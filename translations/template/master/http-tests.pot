# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-25 16:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/http-tests.md:1
#, no-wrap
msgid "HTTP Tests"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:18
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:18
#, no-wrap
msgid ""
"- [Making Requests](#making-requests)\n"
"    - [Customizing Request Headers](#customizing-request-headers)\n"
"    - [Cookies](#cookies)\n"
"    - [Session / Authentication](#session-and-authentication)\n"
"    - [Debugging Responses](#debugging-responses)\n"
"    - [Exception Handling](#exception-handling)\n"
"- [Testing JSON APIs](#testing-json-apis)\n"
"    - [Fluent JSON Testing](#fluent-json-testing)\n"
"- [Testing File Uploads](#testing-file-uploads)\n"
"- [Testing Views](#testing-views)\n"
"    - [Rendering Blade & Components](#rendering-blade-and-components)\n"
"- [Available Assertions](#available-assertions)\n"
"    - [Response Assertions](#response-assertions)\n"
"    - [Authentication Assertions](#authentication-assertions)\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:20
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:20
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:23
msgid ""
"Laravel provides a very fluent API for making HTTP requests to your "
"application and examining the responses. For example, take a look at the "
"feature test defined below:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:25 docs/master/http-tests.md:57 docs/master/http-tests.md:89 docs/master/http-tests.md:117 docs/master/http-tests.md:141 docs/master/http-tests.md:157 docs/master/http-tests.md:185 docs/master/http-tests.md:212 docs/master/http-tests.md:253 docs/master/http-tests.md:289 docs/master/http-tests.md:319 docs/master/http-tests.md:485 docs/master/http-tests.md:541
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:27 docs/master/http-tests.md:59 docs/master/http-tests.md:91 docs/master/http-tests.md:119 docs/master/http-tests.md:143 docs/master/http-tests.md:159 docs/master/http-tests.md:187 docs/master/http-tests.md:214 docs/master/http-tests.md:255 docs/master/http-tests.md:291 docs/master/http-tests.md:321 docs/master/http-tests.md:487 docs/master/http-tests.md:543
#, no-wrap
msgid "    namespace Tests\\Feature;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:31 docs/master/http-tests.md:63
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:42 docs/master/http-tests.md:74
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_a_basic_request()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:46 docs/master/http-tests.md:78
#, no-wrap
msgid ""
"            $response->assertStatus(200);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:48
msgid ""
"The `get` method makes a `GET` request into the application, while the "
"`assertStatus` method asserts that the returned response should have the "
"given HTTP status code. In addition to this simple assertion, Laravel also "
"contains a variety of assertions for inspecting the response headers, "
"content, JSON structure, and more."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:50
#, no-wrap
msgid "<a name=\"making-requests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:50
#, no-wrap
msgid "Making Requests"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:53
msgid ""
"To make a request to your application, you may invoke the `get`, `post`, "
"`put`, `patch`, or `delete` methods within your test. These methods do not "
"actually issue a \"real\" HTTP request to your application. Instead, the "
"entire network request is simulated internally."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:55
msgid ""
"Instead of returning an `Illuminate\\Http\\Response` instance, test request "
"methods return an instance of `Illuminate\\Testing\\TestResponse`, which "
"provides a [variety of helpful assertions](#available-assertions) that allow "
"you to inspect your application's responses:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:80
msgid ""
"In general, each of your tests should only make one request to your "
"application. Unexpected behavior may occur if multiple requests are executed "
"within a single test method."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:82
#, no-wrap
msgid ""
"> {tip} For convenience, the CSRF middleware is automatically disabled when "
"running tests.\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:84
#, no-wrap
msgid "<a name=\"customizing-request-headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:84
#, no-wrap
msgid "Customizing Request Headers"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:87
msgid ""
"You may use the `withHeaders` method to customize the request's headers "
"before it is sent to the application. This method allows you to add any "
"custom headers you would like to the request:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:93 docs/master/http-tests.md:121 docs/master/http-tests.md:145 docs/master/http-tests.md:189 docs/master/http-tests.md:216 docs/master/http-tests.md:257 docs/master/http-tests.md:293 docs/master/http-tests.md:323 docs/master/http-tests.md:545
#, no-wrap
msgid "    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:106
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_interacting_with_headers()\n"
"        {\n"
"            $response = $this->withHeaders([\n"
"                'X-Header' => 'Value',\n"
"            ])->post('/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:110
#, no-wrap
msgid ""
"            $response->assertStatus(201);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:112
#, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:112
#, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:115
msgid ""
"You may use the `withCookie` or `withCookies` methods to set cookie values "
"before making a request. The `withCookie` method accepts a cookie name and "
"value as its two arguments, while the `withCookies` method accepts an array "
"of name / value pairs:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:127
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_cookies()\n"
"        {\n"
"            $response = $this->withCookie('color', 'blue')->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:134
#, no-wrap
msgid ""
"            $response = $this->withCookies([\n"
"                'color' => 'blue',\n"
"                'name' => 'Taylor',\n"
"            ])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:136
#, no-wrap
msgid "<a name=\"session-and-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:136
#, no-wrap
msgid "Session / Authentication"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:139
msgid ""
"Laravel provides several helpers for interacting with the session during "
"HTTP testing. First, you may set the session data to a given array using the "
"`withSession` method. This is useful for loading the session with data "
"before issuing a request to your application:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:153
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_the_session()\n"
"        {\n"
"            $response = $this->withSession(['banned' => false])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:155
msgid ""
"Laravel's session is typically used to maintain state for the currently "
"authenticated user. Therefore, the `actingAs` helper method provides a "
"simple way to authenticate a given user as the current user. For example, we "
"may use a [model "
"factory](/docs/{{version}}/database-testing#writing-factories) to generate "
"and authenticate a user:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:162
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:168
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_an_action_that_requires_authentication()\n"
"        {\n"
"            $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:174
#, no-wrap
msgid ""
"            $response = $this->actingAs($user)\n"
"                             ->withSession(['banned' => false])\n"
"                             ->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:176
msgid ""
"You may also specify which guard should be used to authenticate the given "
"user by passing the guard name as the second argument to the `actingAs` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:178
#, no-wrap
msgid "    $this->actingAs($user, 'web')\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:180
#, no-wrap
msgid "<a name=\"debugging-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:180
#, no-wrap
msgid "Debugging Responses"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:183
msgid ""
"After making a test request to your application, the `dump`, `dumpHeaders`, "
"and `dumpSession` methods may be used to examine and debug the response "
"contents:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:200 docs/master/http-tests.md:227
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_test()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:202
#, no-wrap
msgid "            $response->dumpHeaders();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:204
#, no-wrap
msgid "            $response->dumpSession();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:208
#, no-wrap
msgid ""
"            $response->dump();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:210
msgid ""
"Alternatively, you may use the `dd`, `ddHeaders`, and `ddSession` methods to "
"dump information about the response and then stop execution:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:229
#, no-wrap
msgid "            $response->ddHeaders();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:231
#, no-wrap
msgid "            $response->ddSession();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:235
#, no-wrap
msgid ""
"            $response->dd();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:237
#, no-wrap
msgid "<a name=\"exception-handling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:237
#, no-wrap
msgid "Exception Handling"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:240
msgid ""
"Sometimes you may want to test that your application is throwing a specific "
"exception. To ensure that the exception does not get caught by Laravel's "
"exception handler and returned as an HTTP response, you may invoke the "
"`withoutExceptionHandling` method before making your request:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:242
#, no-wrap
msgid "    $response = $this->withoutExceptionHandling()->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:244
msgid ""
"In addition, if you would like to ensure that your application is not "
"utilizing features that have been deprecated by the PHP language or the "
"libraries your application is using, you may invoke the "
"`withoutDeprecationHandling` method before making your request. When "
"deprecation handling is disabled, deprecation warnings will be converted to "
"exceptions, thus causing your test to fail:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:246
#, no-wrap
msgid "    $response = $this->withoutDeprecationHandling()->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:248
#, no-wrap
msgid "<a name=\"testing-json-apis\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:248
#, no-wrap
msgid "Testing JSON APIs"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:251
msgid ""
"Laravel also provides several helpers for testing JSON APIs and their "
"responses. For example, the `json`, `getJson`, `postJson`, `putJson`, "
"`patchJson`, `deleteJson`, and `optionsJson` methods may be used to issue "
"JSON requests with various HTTP verbs. You may also easily pass data and "
"headers to these methods. To get started, let's write a test to make a "
"`POST` request to `/api/user` and assert that the expected JSON data was "
"returned:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:268
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_making_an_api_request()\n"
"        {\n"
"            $response = $this->postJson('/api/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:276
#, no-wrap
msgid ""
"            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:278
msgid ""
"In addition, JSON response data may be accessed as array variables on the "
"response, making it convenient for you to inspect the individual values "
"returned within a JSON response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:280
#, no-wrap
msgid "    $this->assertTrue($response['created']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:282
#, no-wrap
msgid ""
"> {tip} The `assertJson` method converts the response to an array and "
"utilizes `PHPUnit::assertArraySubset` to verify that the given array exists "
"within the JSON response returned by the application. So, if there are other "
"properties in the JSON response, this test will still pass as long as the "
"given fragment is present.\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:284
#, no-wrap
msgid "<a name=\"verifying-exact-match\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:284
#, no-wrap
msgid "Asserting Exact JSON Matches"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:287
msgid ""
"As previously mentioned, the `assertJson` method may be used to assert that "
"a fragment of JSON exists within the JSON response. If you would like to "
"verify that a given array **exactly matches** the JSON returned by your "
"application, you should use the `assertExactJson` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:304
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_an_exact_json_match()\n"
"        {\n"
"            $response = $this->postJson('/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:312
#, no-wrap
msgid ""
"            $response\n"
"                ->assertStatus(201)\n"
"                ->assertExactJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:314
#, no-wrap
msgid "<a name=\"verifying-json-paths\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:314
#, no-wrap
msgid "Asserting On JSON Paths"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:317
msgid ""
"If you would like to verify that the JSON response contains the given data "
"at a specified path, you should use the `assertJsonPath` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:334
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_a_json_paths_value()\n"
"        {\n"
"            $response = $this->postJson('/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:340
#, no-wrap
msgid ""
"            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJsonPath('team.owner.name', 'Darian');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:342
#, no-wrap
msgid "<a name=\"fluent-json-testing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:342
#, no-wrap
msgid "Fluent JSON Testing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:345
msgid ""
"Laravel also offers a beautiful way to fluently test your application's JSON "
"responses. To get started, pass a closure to the `assertJson` method. This "
"closure will be invoked with an instance of "
"`Illuminate\\Testing\\Fluent\\AssertableJson` which can be used to make "
"assertions against the JSON that was returned by your application. The "
"`where` method may be used to make assertions against a particular attribute "
"of the JSON, while the `missing` method may be used to assert that a "
"particular attribute is missing from the JSON:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:347
#, no-wrap
msgid "    use Illuminate\\Testing\\Fluent\\AssertableJson;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:356
#, no-wrap
msgid ""
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_fluent_json()\n"
"    {\n"
"        $response = $this->getJson('/users/1');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:365
#, no-wrap
msgid ""
"        $response\n"
"            ->assertJson(fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"            );\n"
"    }\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:366
#, no-wrap
msgid "Understanding The `etc` Method"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:369
msgid ""
"In the example above, you may have noticed we invoked the `etc` method at "
"the end of our assertion chain. This method informs Laravel that there may "
"be other attributes present on the JSON object. If the `etc` method is not "
"used, the test will fail if other attributes that you did not make "
"assertions against exist on the JSON object."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:371
msgid ""
"The intention behind this behavior is to protect you from unintentionally "
"exposing sensitive information in your JSON responses by forcing you to "
"either explicitly make an assertion against the attribute or explicitly "
"allow additional attributes via the `etc` method."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:373
#, no-wrap
msgid "<a name=\"asserting-json-attribute-presence-and-absence\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:373
#, no-wrap
msgid "Asserting Attribute Presence / Absence"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:376
msgid ""
"To assert that an attribute is present or absent, you may use the `has` and "
"`missing` methods:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:381
#, no-wrap
msgid ""
"    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('data')\n"
"             ->missing('message')\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:383
msgid ""
"In addition, the `hasAll` and `missingAll` methods allow asserting the "
"presence or absence of multiple attributes simultaneously:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:388
#, no-wrap
msgid ""
"    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->hasAll('status', 'data')\n"
"             ->missingAll('message', 'code')\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:390
msgid ""
"You may use the `hasAny` method to determine if at least one of a given list "
"of attributes is present:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:395
#, no-wrap
msgid ""
"    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('status')\n"
"             ->hasAny('data', 'message', 'code')\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:397
#, no-wrap
msgid "<a name=\"asserting-against-json-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:397
#, no-wrap
msgid "Asserting Against JSON Collections"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:400
msgid ""
"Often, your route will return a JSON response that contains multiple items, "
"such as multiple users:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:404
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return User::all();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:406
msgid ""
"In these situations, we may use the fluent JSON object's `has` method to "
"make assertions against the users included in the response. For example, "
"let's assert that the JSON response contains three users. Next, we'll make "
"some assertions about the first user in the collection using the `first` "
"method. The `first` method accepts a closure which receives another "
"assertable JSON string that we can use to make assertions about the first "
"object in the JSON collection:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:417
#, no-wrap
msgid ""
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has(3)\n"
"                 ->first(fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:419
#, no-wrap
msgid "<a name=\"scoping-json-collection-assertions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:419
#, no-wrap
msgid "Scoping JSON Collection Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:422
msgid ""
"Sometimes, your application's routes will return JSON collections that are "
"assigned named keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:429
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return [\n"
"            'meta' => [...],\n"
"            'users' => User::all(),\n"
"        ];\n"
"    })\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:431
msgid ""
"When testing these routes, you may use the `has` method to assert against "
"the number of items in the collection. In addition, you may use the `has` "
"method to scope a chain of assertions:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:443
#, no-wrap
msgid ""
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has('meta')\n"
"                 ->has('users', 3)\n"
"                 ->has('users.0', fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:445
msgid ""
"However, instead of making two separate calls to the `has` method to assert "
"against the `users` collection, you may make a single call which provides a "
"closure as its third parameter. When doing so, the closure will "
"automatically be invoked and scoped to the first item in the collection:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:456
#, no-wrap
msgid ""
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has('meta')\n"
"                 ->has('users', 3, fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:458
#, no-wrap
msgid "<a name=\"asserting-json-types\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:458
#, no-wrap
msgid "Asserting JSON Types"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:461
msgid ""
"You may only want to assert that the properties in the JSON response are of "
"a certain type. The `Illuminate\\Testing\\Fluent\\AssertableJson` class "
"provides the `whereType` and `whereAllType` methods for doing just that:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:469
#, no-wrap
msgid ""
"    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->whereType('id', 'integer')\n"
"             ->whereAllType([\n"
"                'users.0.name' => 'string',\n"
"                'meta' => 'array'\n"
"            ])\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:471
msgid ""
"You may specify multiple types using the `|` character, or passing an array "
"of types as the second parameter to the `whereType` method. The assertion "
"will be successful if the response value is any of the listed types:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:476
#, no-wrap
msgid ""
"    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->whereType('name', 'string|null')\n"
"             ->whereType('id', ['string', 'integer'])\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:478
msgid ""
"The `whereType` and `whereAllType` methods recognize the following types: "
"`string`, `integer`, `double`, `boolean`, `array`, and `null`."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:480
#, no-wrap
msgid "<a name=\"testing-file-uploads\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:480
#, no-wrap
msgid "Testing File Uploads"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:483
msgid ""
"The `Illuminate\\Http\\UploadedFile` class provides a `fake` method which "
"may be used to generate dummy files or images for testing. This, combined "
"with the `Storage` facade's `fake` method, greatly simplifies the testing of "
"file uploads. For example, you may combine these two features to easily test "
"an avatar upload form:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:493
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Http\\UploadedFile;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:499
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_avatars_can_be_uploaded()\n"
"        {\n"
"            Storage::fake('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:501
#, no-wrap
msgid "            $file = UploadedFile::fake()->image('avatar.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:505
#, no-wrap
msgid ""
"            $response = $this->post('/avatar', [\n"
"                'avatar' => $file,\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:509
#, no-wrap
msgid ""
"            Storage::disk('avatars')->assertExists($file->hashName());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:511
msgid ""
"If you would like to assert that a given file does not exist, you may use "
"the `assertMissing` method provided by the `Storage` facade:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:513
#, no-wrap
msgid "    Storage::fake('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:515
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:517
#, no-wrap
msgid "    Storage::disk('avatars')->assertMissing('missing.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:519
#, no-wrap
msgid "<a name=\"fake-file-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:519
#, no-wrap
msgid "Fake File Customization"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:522
msgid ""
"When creating files using the `fake` method provided by the `UploadedFile` "
"class, you may specify the width, height, and size of the image (in "
"kilobytes) in order to better test your application's validation rules:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:524
#, no-wrap
msgid "    UploadedFile::fake()->image('avatar.jpg', $width, $height)->size(100);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:526
msgid ""
"In addition to creating images, you may create files of any other type using "
"the `create` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:528
#, no-wrap
msgid "    UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:530
msgid ""
"If needed, you may pass a `$mimeType` argument to the method to explicitly "
"define the MIME type that should be returned by the file:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:534
#, no-wrap
msgid ""
"    UploadedFile::fake()->create(\n"
"        'document.pdf', $sizeInKilobytes, 'application/pdf'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:536
#, no-wrap
msgid "<a name=\"testing-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:536
#, no-wrap
msgid "Testing Views"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:539
msgid ""
"Laravel also allows you to render a view without making a simulated HTTP "
"request to the application. To accomplish this, you may call the `view` "
"method within your test. The `view` method accepts the view name and an "
"optional array of data. The method returns an instance of "
"`Illuminate\\Testing\\TestView`, which offers several methods to "
"conveniently make assertions about the view's contents:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:551
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_a_welcome_view_can_be_rendered()\n"
"        {\n"
"            $view = $this->view('welcome', ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:555
#, no-wrap
msgid ""
"            $view->assertSee('Taylor');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:557
msgid ""
"The `TestView` class provides the following assertion methods: `assertSee`, "
"`assertSeeInOrder`, `assertSeeText`, `assertSeeTextInOrder`, "
"`assertDontSee`, and `assertDontSeeText`."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:559
msgid ""
"If needed, you may get the raw, rendered view contents by casting the "
"`TestView` instance to a string:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:561
#, no-wrap
msgid "    $contents = (string) $this->view('welcome');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:563
#, no-wrap
msgid "<a name=\"sharing-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:563
#, no-wrap
msgid "Sharing Errors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:566
msgid ""
"Some views may depend on errors shared in the [global error bag provided by "
"Laravel](/docs/{{version}}/validation#quick-displaying-the-validation-errors). "
"To hydrate the error bag with error messages, you may use the "
"`withViewErrors` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:570
#, no-wrap
msgid ""
"    $view = $this->withViewErrors([\n"
"        'name' => ['Please provide a valid name.']\n"
"    ])->view('form');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:572
#, no-wrap
msgid "    $view->assertSee('Please provide a valid name.');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:574
#, no-wrap
msgid "<a name=\"rendering-blade-and-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:574
#, no-wrap
msgid "Rendering Blade & Components"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:577
msgid ""
"If necessary, you may use the `blade` method to evaluate and render a raw "
"[Blade](/docs/{{version}}/blade) string. Like the `view` method, the `blade` "
"method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:582
#, no-wrap
msgid ""
"    $view = $this->blade(\n"
"        '<x-component :name=\"$name\" />',\n"
"        ['name' => 'Taylor']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:584 docs/master/http-tests.md:590
#, no-wrap
msgid "    $view->assertSee('Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:586
msgid ""
"You may use the `component` method to evaluate and render a [Blade "
"component](/docs/{{version}}/blade#components). Like the `view` method, the "
"`component` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:588
#, no-wrap
msgid "    $view = $this->component(Profile::class, ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:592
#, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:592
#, no-wrap
msgid "Available Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:595
#, no-wrap
msgid "<a name=\"response-assertions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:595
#, no-wrap
msgid "Response Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:598
msgid ""
"Laravel's `Illuminate\\Testing\\TestResponse` class provides a variety of "
"custom assertion methods that you may utilize when testing your "
"application. These assertions may be accessed on the response that is "
"returned by the `json`, `get`, `post`, `put`, and `delete` test methods:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:604
#, no-wrap
msgid ""
"<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:609
#, no-wrap
msgid ""
"    .collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:611
#, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:665
msgid ""
"[assertCookie](#assert-cookie)  "
"[assertCookieExpired](#assert-cookie-expired)  "
"[assertCookieNotExpired](#assert-cookie-not-expired)  "
"[assertCookieMissing](#assert-cookie-missing)  "
"[assertCreated](#assert-created)  [assertDontSee](#assert-dont-see)  "
"[assertDontSeeText](#assert-dont-see-text)  "
"[assertDownload](#assert-download)  [assertExactJson](#assert-exact-json)  "
"[assertForbidden](#assert-forbidden)  [assertHeader](#assert-header)  "
"[assertHeaderMissing](#assert-header-missing)  [assertJson](#assert-json)  "
"[assertJsonCount](#assert-json-count)  "
"[assertJsonFragment](#assert-json-fragment)  "
"[assertJsonMissing](#assert-json-missing)  "
"[assertJsonMissingExact](#assert-json-missing-exact)  "
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)  "
"[assertJsonPath](#assert-json-path)  "
"[assertJsonStructure](#assert-json-structure)  "
"[assertJsonValidationErrors](#assert-json-validation-errors)  "
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)  "
"[assertLocation](#assert-location)  [assertNoContent](#assert-no-content)  "
"[assertNotFound](#assert-not-found)  [assertOk](#assert-ok)  "
"[assertPlainCookie](#assert-plain-cookie)  "
"[assertRedirect](#assert-redirect)  "
"[assertRedirectContains](#assert-redirect-contains)  "
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)  "
"[assertSee](#assert-see)  [assertSeeInOrder](#assert-see-in-order)  "
"[assertSeeText](#assert-see-text)  "
"[assertSeeTextInOrder](#assert-see-text-in-order)  "
"[assertSessionHas](#assert-session-has)  "
"[assertSessionHasInput](#assert-session-has-input)  "
"[assertSessionHasAll](#assert-session-has-all)  "
"[assertSessionHasErrors](#assert-session-has-errors)  "
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)  "
"[assertSessionHasNoErrors](#assert-session-has-no-errors)  "
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)  "
"[assertSessionMissing](#assert-session-missing)  "
"[assertSimilarJson](#assert-similar-json)  [assertStatus](#assert-status)  "
"[assertSuccessful](#assert-successful)  "
"[assertUnauthorized](#assert-unauthorized)  "
"[assertUnprocessable](#assert-unprocessable)  [assertValid](#assert-valid)  "
"[assertInvalid](#assert-invalid)  [assertViewHas](#assert-view-has)  "
"[assertViewHasAll](#assert-view-has-all)  [assertViewIs](#assert-view-is)  "
"[assertViewMissing](#assert-view-missing)"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:667
#, no-wrap
msgid "</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:669
#, no-wrap
msgid "<a name=\"assert-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:669
#, no-wrap
msgid "assertCookie"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:672
msgid "Assert that the response contains the given cookie:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:674
#, no-wrap
msgid "    $response->assertCookie($cookieName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:676
#, no-wrap
msgid "<a name=\"assert-cookie-expired\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:676
#, no-wrap
msgid "assertCookieExpired"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:679
msgid "Assert that the response contains the given cookie and it is expired:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:681
#, no-wrap
msgid "    $response->assertCookieExpired($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:683
#, no-wrap
msgid "<a name=\"assert-cookie-not-expired\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:683
#, no-wrap
msgid "assertCookieNotExpired"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:686
msgid "Assert that the response contains the given cookie and it is not expired:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:688
#, no-wrap
msgid "    $response->assertCookieNotExpired($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:690
#, no-wrap
msgid "<a name=\"assert-cookie-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:690
#, no-wrap
msgid "assertCookieMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:693
msgid "Assert that the response does not contains the given cookie:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:695
#, no-wrap
msgid "    $response->assertCookieMissing($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:697
#, no-wrap
msgid "<a name=\"assert-created\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:697
#, no-wrap
msgid "assertCreated"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:700
msgid "Assert that the response has a 201 HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:702
#, no-wrap
msgid "    $response->assertCreated();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:704
#, no-wrap
msgid "<a name=\"assert-dont-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:704
#, no-wrap
msgid "assertDontSee"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:707
msgid ""
"Assert that the given string is not contained within the response returned "
"by the application. This assertion will automatically escape the given "
"string unless you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:709
#, no-wrap
msgid "    $response->assertDontSee($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:711
#, no-wrap
msgid "<a name=\"assert-dont-see-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:711
#, no-wrap
msgid "assertDontSeeText"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:714
msgid ""
"Assert that the given string is not contained within the response text. This "
"assertion will automatically escape the given string unless you pass a "
"second argument of `false`. This method will pass the response content to "
"the `strip_tags` PHP function before making the assertion:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:716
#, no-wrap
msgid "    $response->assertDontSeeText($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:718
#, no-wrap
msgid "<a name=\"assert-download\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:718
#, no-wrap
msgid "assertDownload"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:721
msgid ""
"Assert that the response is a \"download\". Typically, this means the "
"invoked route that returned the response returned a `Response::download` "
"response, `BinaryFileResponse`, or `Storage::download` response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:723
#, no-wrap
msgid "    $response->assertDownload();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:725
msgid ""
"If you wish, you may assert that the downloadable file was assigned a given "
"file name:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:727
#, no-wrap
msgid "    $response->assertDownload('image.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:729
#, no-wrap
msgid "<a name=\"assert-exact-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:729
#, no-wrap
msgid "assertExactJson"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:732
msgid "Assert that the response contains an exact match of the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:734
#, no-wrap
msgid "    $response->assertExactJson(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:736
#, no-wrap
msgid "<a name=\"assert-forbidden\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:736
#, no-wrap
msgid "assertForbidden"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:739
msgid "Assert that the response has a forbidden (403) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:741
#, no-wrap
msgid "    $response->assertForbidden();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:743
#, no-wrap
msgid "<a name=\"assert-header\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:743
#, no-wrap
msgid "assertHeader"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:746
msgid "Assert that the given header and value is present on the response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:748
#, no-wrap
msgid "    $response->assertHeader($headerName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:750
#, no-wrap
msgid "<a name=\"assert-header-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:750
#, no-wrap
msgid "assertHeaderMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:753
msgid "Assert that the given header is not present on the response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:755
#, no-wrap
msgid "    $response->assertHeaderMissing($headerName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:757
#, no-wrap
msgid "<a name=\"assert-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:757
#, no-wrap
msgid "assertJson"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:760
msgid "Assert that the response contains the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:762
#, no-wrap
msgid "    $response->assertJson(array $data, $strict = false);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:764
msgid ""
"The `assertJson` method converts the response to an array and utilizes "
"`PHPUnit::assertArraySubset` to verify that the given array exists within "
"the JSON response returned by the application. So, if there are other "
"properties in the JSON response, this test will still pass as long as the "
"given fragment is present."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:766
#, no-wrap
msgid "<a name=\"assert-json-count\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:766
#, no-wrap
msgid "assertJsonCount"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:769
msgid ""
"Assert that the response JSON has an array with the expected number of items "
"at the given key:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:771
#, no-wrap
msgid "    $response->assertJsonCount($count, $key = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:773
#, no-wrap
msgid "<a name=\"assert-json-fragment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:773
#, no-wrap
msgid "assertJsonFragment"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:776
msgid ""
"Assert that the response contains the given JSON data anywhere in the "
"response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:786
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return [\n"
"            'users' => [\n"
"                [\n"
"                    'name' => 'Taylor Otwell',\n"
"                ],\n"
"            ],\n"
"        ];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:788
#, no-wrap
msgid "    $response->assertJsonFragment(['name' => 'Taylor Otwell']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:790
#, no-wrap
msgid "<a name=\"assert-json-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:790
#, no-wrap
msgid "assertJsonMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:793
msgid "Assert that the response does not contain the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:795
#, no-wrap
msgid "    $response->assertJsonMissing(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:797
#, no-wrap
msgid "<a name=\"assert-json-missing-exact\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:797
#, no-wrap
msgid "assertJsonMissingExact"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:800
msgid "Assert that the response does not contain the exact JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:802
#, no-wrap
msgid "    $response->assertJsonMissingExact(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:804
#, no-wrap
msgid "<a name=\"assert-json-missing-validation-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:804
#, no-wrap
msgid "assertJsonMissingValidationErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:807
msgid "Assert that the response has no JSON validation errors for the given keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:809
#, no-wrap
msgid "    $response->assertJsonMissingValidationErrors($keys);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:811
#, no-wrap
msgid ""
"> {tip} The more generic [assertValid](#assert-valid) method may be used to "
"assert that a response does not have validation errors that were returned as "
"JSON **and** that no errors were flashed to session storage.\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:813
#, no-wrap
msgid "<a name=\"assert-json-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:813
#, no-wrap
msgid "assertJsonPath"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:816
msgid "Assert that the response contains the given data at the specified path:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:818
#, no-wrap
msgid "    $response->assertJsonPath($path, $expectedValue);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:820 docs/master/http-tests.md:841
msgid ""
"For example, if the JSON response returned by your application contains the "
"following data:"
msgstr ""

#. type: Code fence info string
#: docs/master/http-tests.md:821 docs/master/http-tests.md:842 docs/master/http-tests.md:860
#, no-wrap
msgid "js"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:821 docs/master/http-tests.md:842
#, no-wrap
msgid ""
"{\n"
"    \"user\": {\n"
"        \"name\": \"Steve Schoger\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:830
msgid ""
"You may assert that the `name` property of the `user` object matches a given "
"value like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:832
#, no-wrap
msgid "    $response->assertJsonPath('user.name', 'Steve Schoger');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:834
#, no-wrap
msgid "<a name=\"assert-json-structure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:834
#, no-wrap
msgid "assertJsonStructure"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:837
msgid "Assert that the response has a given JSON structure:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:839
#, no-wrap
msgid "    $response->assertJsonStructure(array $structure);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:851
msgid "You may assert that the JSON structure matches your expectations like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:857
#, no-wrap
msgid ""
"    $response->assertJsonStructure([\n"
"        'user' => [\n"
"            'name',\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:859
msgid ""
"Sometimes, JSON responses returned by your application may contain arrays of "
"objects:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:860
#, no-wrap
msgid ""
"{\n"
"    \"user\": [\n"
"        {\n"
"            \"name\": \"Steve Schoger\",\n"
"            \"age\": 55,\n"
"            \"location\": \"Earth\"\n"
"        },\n"
"        {\n"
"            \"name\": \"Mary Schoger\",\n"
"            \"age\": 60,\n"
"            \"location\": \"Earth\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:878
msgid ""
"In this situation, you may use the `*` character to assert against the "
"structure of all of the objects in the array:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:888
#, no-wrap
msgid ""
"    $response->assertJsonStructure([\n"
"        'user' => [\n"
"            '*' => [\n"
"                 'name',\n"
"                 'age',\n"
"                 'location'\n"
"            ]\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:890
#, no-wrap
msgid "<a name=\"assert-json-validation-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:890
#, no-wrap
msgid "assertJsonValidationErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:893
msgid ""
"Assert that the response has the given JSON validation errors for the given "
"keys. This method should be used when asserting against responses where the "
"validation errors are returned as a JSON structure instead of being flashed "
"to the session:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:895
#, no-wrap
msgid ""
"    $response->assertJsonValidationErrors(array $data, $responseKey = "
"'errors');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:897
#, no-wrap
msgid ""
"> {tip} The more generic [assertInvalid](#assert-invalid) method may be used "
"to assert that a response has validation errors returned as JSON **or** that "
"errors were flashed to session storage.\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:899
#, no-wrap
msgid "<a name=\"assert-json-validation-error-for\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:899
#, no-wrap
msgid "assertJsonValidationErrorFor"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:902
msgid "Assert the response has any JSON validation errors for the given key:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:904
#, no-wrap
msgid ""
"    $response->assertJsonValidationErrorFor(string $key, $responseKey = "
"'errors');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:906
#, no-wrap
msgid "<a name=\"assert-location\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:906
#, no-wrap
msgid "assertLocation"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:909
msgid "Assert that the response has the given URI value in the `Location` header:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:911
#, no-wrap
msgid "    $response->assertLocation($uri);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:913
#, no-wrap
msgid "<a name=\"assert-no-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:913
#, no-wrap
msgid "assertNoContent"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:916
msgid "Assert that the response has the given HTTP status code and no content:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:918
#, no-wrap
msgid "    $response->assertNoContent($status = 204);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:920
#, no-wrap
msgid "<a name=\"assert-not-found\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:920
#, no-wrap
msgid "assertNotFound"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:923
msgid "Assert that the response has a not found (404) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:925
#, no-wrap
msgid "    $response->assertNotFound();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:927
#, no-wrap
msgid "<a name=\"assert-ok\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:927
#, no-wrap
msgid "assertOk"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:930
msgid "Assert that the response has a 200 HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:932
#, no-wrap
msgid "    $response->assertOk();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:934
#, no-wrap
msgid "<a name=\"assert-plain-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:934
#, no-wrap
msgid "assertPlainCookie"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:937
msgid "Assert that the response contains the given unencrypted cookie:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:939
#, no-wrap
msgid "    $response->assertPlainCookie($cookieName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:941
#, no-wrap
msgid "<a name=\"assert-redirect\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:941
#, no-wrap
msgid "assertRedirect"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:944
msgid "Assert that the response is a redirect to the given URI:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:946
#, no-wrap
msgid "    $response->assertRedirect($uri);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:948
#, no-wrap
msgid "<a name=\"assert-redirect-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:948
#, no-wrap
msgid "assertRedirectContains"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:951
msgid ""
"Assert whether the response is redirecting to a URI that contains the given "
"string:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:953
#, no-wrap
msgid "    $response->assertRedirectContains($string);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:955
#, no-wrap
msgid "<a name=\"assert-redirect-to-signed-route\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:955
#, no-wrap
msgid "assertRedirectToSignedRoute"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:958
msgid "Assert that the response is a redirect to the given signed route:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:960
#, no-wrap
msgid ""
"    $response->assertRedirectToSignedRoute($name = null, $parameters = "
"[]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:962
#, no-wrap
msgid "<a name=\"assert-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:962
#, no-wrap
msgid "assertSee"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:965
msgid ""
"Assert that the given string is contained within the response. This "
"assertion will automatically escape the given string unless you pass a "
"second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:967
#, no-wrap
msgid "    $response->assertSee($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:969
#, no-wrap
msgid "<a name=\"assert-see-in-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:969
#, no-wrap
msgid "assertSeeInOrder"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:972
msgid ""
"Assert that the given strings are contained in order within the "
"response. This assertion will automatically escape the given strings unless "
"you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:974
#, no-wrap
msgid "    $response->assertSeeInOrder(array $values, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:976
#, no-wrap
msgid "<a name=\"assert-see-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:976
#, no-wrap
msgid "assertSeeText"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:979
msgid ""
"Assert that the given string is contained within the response text. This "
"assertion will automatically escape the given string unless you pass a "
"second argument of `false`. The response content will be passed to the "
"`strip_tags` PHP function before the assertion is made:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:981
#, no-wrap
msgid "    $response->assertSeeText($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:983
#, no-wrap
msgid "<a name=\"assert-see-text-in-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:983
#, no-wrap
msgid "assertSeeTextInOrder"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:986
msgid ""
"Assert that the given strings are contained in order within the response "
"text. This assertion will automatically escape the given strings unless you "
"pass a second argument of `false`. The response content will be passed to "
"the `strip_tags` PHP function before the assertion is made:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:988
#, no-wrap
msgid "    $response->assertSeeTextInOrder(array $values, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:990
#, no-wrap
msgid "<a name=\"assert-session-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:990
#, no-wrap
msgid "assertSessionHas"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:993
msgid "Assert that the session contains the given piece of data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:995
#, no-wrap
msgid "    $response->assertSessionHas($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:997
msgid ""
"If needed, a closure can be provided as the second argument to the "
"`assertSessionHas` method. The assertion will pass if the closure returns "
"`true`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1001
#, no-wrap
msgid ""
"    $response->assertSessionHas($key, function ($value) {\n"
"        return $value->name === 'Taylor Otwell';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1003
#, no-wrap
msgid "<a name=\"assert-session-has-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1003
#, no-wrap
msgid "assertSessionHasInput"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1006
msgid ""
"Assert that the session has a given value in the [flashed input "
"array](/docs/{{version}}/responses#redirecting-with-flashed-session-data):"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1008
#, no-wrap
msgid "    $response->assertSessionHasInput($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1010
msgid ""
"If needed, a closure can be provided as the second argument to the "
"`assertSessionHasInput` method. The assertion will pass if the closure "
"returns `true`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1014
#, no-wrap
msgid ""
"    $response->assertSessionHasInput($key, function ($value) {\n"
"        return Crypt::decryptString($value) === 'secret';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1016
#, no-wrap
msgid "<a name=\"assert-session-has-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1016
#, no-wrap
msgid "assertSessionHasAll"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1019
msgid "Assert that the session contains a given array of key / value pairs:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1021
#, no-wrap
msgid "    $response->assertSessionHasAll(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1023
msgid ""
"For example, if your application's session contains `name` and `status` "
"keys, you may assert that both exist and have the specified values like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1028
#, no-wrap
msgid ""
"    $response->assertSessionHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'status' => 'active',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1030
#, no-wrap
msgid "<a name=\"assert-session-has-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1030
#, no-wrap
msgid "assertSessionHasErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1033
msgid ""
"Assert that the session contains an error for the given `$keys`. If `$keys` "
"is an associative array, assert that the session contains a specific error "
"message (value) for each field (key). This method should be used when "
"testing routes that flash validation errors to the session instead of "
"returning them as a JSON structure:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1037
#, no-wrap
msgid ""
"    $response->assertSessionHasErrors(\n"
"        array $keys, $format = null, $errorBag = 'default'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1039
msgid ""
"For example, to assert that the `name` and `email` fields have validation "
"error messages that were flashed to the session, you may invoke the "
"`assertSessionHasErrors` method like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1041
#, no-wrap
msgid "    $response->assertSessionHasErrors(['name', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1043
msgid ""
"Or, you may assert that a given field has a particular validation error "
"message:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1047
#, no-wrap
msgid ""
"    $response->assertSessionHasErrors([\n"
"        'name' => 'The given name was invalid.'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1049
#, no-wrap
msgid "<a name=\"assert-session-has-errors-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1049
#, no-wrap
msgid "assertSessionHasErrorsIn"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1052
msgid ""
"Assert that the session contains an error for the given `$keys` within a "
"specific [error bag](/docs/{{version}}/validation#named-error-bags). If "
"`$keys` is an associative array, assert that the session contains a specific "
"error message (value) for each field (key), within the error bag:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1054
#, no-wrap
msgid ""
"    $response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = "
"null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1056
#, no-wrap
msgid "<a name=\"assert-session-has-no-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1056
#, no-wrap
msgid "assertSessionHasNoErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1059
msgid "Assert that the session has no validation errors:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1061
#, no-wrap
msgid "    $response->assertSessionHasNoErrors();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1063
#, no-wrap
msgid "<a name=\"assert-session-doesnt-have-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1063
#, no-wrap
msgid "assertSessionDoesntHaveErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1066
msgid "Assert that the session has no validation errors for the given keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1068
#, no-wrap
msgid ""
"    $response->assertSessionDoesntHaveErrors($keys = [], $format = null, "
"$errorBag = 'default');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1070
#, no-wrap
msgid "<a name=\"assert-session-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1070
#, no-wrap
msgid "assertSessionMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1073
msgid "Assert that the session does not contain the given key:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1075
#, no-wrap
msgid "    $response->assertSessionMissing($key);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1077
#, no-wrap
msgid "<a name=\"assert-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1077
#, no-wrap
msgid "assertStatus"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1080
msgid "Assert that the response has a given HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1082
#, no-wrap
msgid "    $response->assertStatus($code);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1084
#, no-wrap
msgid "<a name=\"assert-successful\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1084
#, no-wrap
msgid "assertSuccessful"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1087
#, no-wrap
msgid ""
"Assert that the response has a successful (>= 200 and < 300) HTTP status "
"code:\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1089
#, no-wrap
msgid "    $response->assertSuccessful();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1091
#, no-wrap
msgid "<a name=\"assert-unauthorized\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1091
#, no-wrap
msgid "assertUnauthorized"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1094
msgid "Assert that the response has an unauthorized (401) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1096
#, no-wrap
msgid "    $response->assertUnauthorized();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1098
#, no-wrap
msgid "<a name=\"assert-unprocessable\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1098
#, no-wrap
msgid "assertUnprocessable"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1101
msgid "Assert that the response has an unprocessable entity (422) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1103
#, no-wrap
msgid "    $response->assertUnprocessable();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1105
#, no-wrap
msgid "<a name=\"assert-valid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1105
#, no-wrap
msgid "assertValid"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1108
msgid ""
"Assert that the response has no validation errors for the given keys. This "
"method may be used for asserting against responses where the validation "
"errors are returned as a JSON structure or where the validation errors have "
"been flashed to the session:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1111
#, no-wrap
msgid ""
"    // Assert that no validation errors are present...\n"
"    $response->assertValid();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1114
#, no-wrap
msgid ""
"    // Assert that the given keys do not have validation errors...\n"
"    $response->assertValid(['name', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1116
#, no-wrap
msgid "<a name=\"assert-invalid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1116
#, no-wrap
msgid "assertInvalid"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1119
msgid ""
"Assert that the response has validation errors for the given keys. This "
"method may be used for asserting against responses where the validation "
"errors are returned as a JSON structure or where the validation errors have "
"been flashed to the session:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1121
#, no-wrap
msgid "    $response->assertInvalid(['name', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1123
msgid ""
"You may also assert that a given key has a particular validation error "
"message. When doing so, you may provide the entire message or only a small "
"portion of the message:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1128
#, no-wrap
msgid ""
"    $response->assertInvalid([\n"
"        'name' => 'The name field is required.',\n"
"        'email' => 'valid email address',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1130
#, no-wrap
msgid "<a name=\"assert-view-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1130
#, no-wrap
msgid "assertViewHas"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1133
msgid "Assert that the response view contains given a piece of data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1135
#, no-wrap
msgid "    $response->assertViewHas($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1137
msgid ""
"Passing a closure as the second argument to the `assertViewHas` method will "
"allow you to inspect and make assertions against a particular piece of view "
"data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1141
#, no-wrap
msgid ""
"    $response->assertViewHas('user', function (User $user) {\n"
"        return $user->name === 'Taylor';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1143
msgid ""
"In addition, view data may be accessed as array variables on the response, "
"allowing you to conveniently inspect it:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1145
#, no-wrap
msgid "    $this->assertEquals('Taylor', $response['name']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1147
#, no-wrap
msgid "<a name=\"assert-view-has-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1147
#, no-wrap
msgid "assertViewHasAll"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1150
msgid "Assert that the response view has a given list of data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1152
#, no-wrap
msgid "    $response->assertViewHasAll(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1154
msgid ""
"This method may be used to assert that the view simply contains data "
"matching the given keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1159
#, no-wrap
msgid ""
"    $response->assertViewHasAll([\n"
"        'name',\n"
"        'email',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1161
msgid "Or, you may assert that the view data is present and has specific values:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1166
#, no-wrap
msgid ""
"    $response->assertViewHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'email' => 'taylor@example.com,',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1168
#, no-wrap
msgid "<a name=\"assert-view-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1168
#, no-wrap
msgid "assertViewIs"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1171
msgid "Assert that the given view was returned by the route:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1173
#, no-wrap
msgid "    $response->assertViewIs($value);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1175
#, no-wrap
msgid "<a name=\"assert-view-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1175
#, no-wrap
msgid "assertViewMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1178
msgid ""
"Assert that the given data key was not made available to the view returned "
"in the application's response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1180
#, no-wrap
msgid "    $response->assertViewMissing($key);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1182
#, no-wrap
msgid "<a name=\"authentication-assertions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:1182
#, no-wrap
msgid "Authentication Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1185
msgid ""
"Laravel also provides a variety of authentication related assertions that "
"you may utilize within your application's feature tests. Note that these "
"methods are invoked on the test class itself and not the "
"`Illuminate\\Testing\\TestResponse` instance returned by methods such as "
"`get` and `post`."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1187
#, no-wrap
msgid "<a name=\"assert-authenticated\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1187
#, no-wrap
msgid "assertAuthenticated"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1190
msgid "Assert that a user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1192
#, no-wrap
msgid "    $this->assertAuthenticated($guard = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1194
#, no-wrap
msgid "<a name=\"assert-guest\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1194
#, no-wrap
msgid "assertGuest"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1197
msgid "Assert that a user is not authenticated:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1199
#, no-wrap
msgid "    $this->assertGuest($guard = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1201
#, no-wrap
msgid "<a name=\"assert-authenticated-as\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:1201
#, no-wrap
msgid "assertAuthenticatedAs"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1204
msgid "Assert that a specific user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:1205
#, no-wrap
msgid "    $this->assertAuthenticatedAs($user, $guard = null);\n"
msgstr ""
