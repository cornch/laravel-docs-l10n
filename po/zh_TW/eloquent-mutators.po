msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/eloquent-mutators.pot\n"
"X-Crowdin-File-ID: 53\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:57\n"

#: ./docs/8.x/eloquent-mutators.md:1
#: ./docs/9.x/eloquent-mutators.md:1
#: ./docs/10.x/eloquent-mutators.md:1
#: ./docs/11.x/eloquent-mutators.md:1
#: ./docs/master/eloquent-mutators.md:1
msgctxt "H1"
msgid "Eloquent: Mutators & Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:3
#: ./docs/9.x/eloquent-mutators.md:3
#: ./docs/10.x/eloquent-mutators.md:3
#: ./docs/11.x/eloquent-mutators.md:3
#: ./docs/master/eloquent-mutators.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:4
#: ./docs/11.x/eloquent-mutators.md:4
#: ./docs/master/eloquent-mutators.md:4
msgctxt "P"
msgid "[Accessors and Mutators](#accessors-and-mutators)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:4
#: ./docs/9.x/eloquent-mutators.md:4
msgctxt "P"
msgid "[Accessors & Mutators](#accessors-and-mutators)"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:5
#: ./docs/11.x/eloquent-mutators.md:5
#: ./docs/master/eloquent-mutators.md:5
msgctxt "P"
msgid "[Defining an Accessor](#defining-an-accessor)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:5
#: ./docs/9.x/eloquent-mutators.md:5
msgctxt "P"
msgid "[Defining An Accessor](#defining-an-accessor)"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:6
#: ./docs/11.x/eloquent-mutators.md:6
#: ./docs/master/eloquent-mutators.md:6
msgctxt "P"
msgid "[Defining a Mutator](#defining-a-mutator)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:6
#: ./docs/9.x/eloquent-mutators.md:6
msgctxt "P"
msgid "[Defining A Mutator](#defining-a-mutator)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:7
#: ./docs/9.x/eloquent-mutators.md:7
#: ./docs/10.x/eloquent-mutators.md:7
#: ./docs/11.x/eloquent-mutators.md:7
#: ./docs/master/eloquent-mutators.md:7
msgctxt "P"
msgid "[Attribute Casting](#attribute-casting)"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:8
#: ./docs/11.x/eloquent-mutators.md:8
#: ./docs/master/eloquent-mutators.md:8
msgctxt "P"
msgid "[Array and JSON Casting](#array-and-json-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:8
#: ./docs/9.x/eloquent-mutators.md:8
msgctxt "P"
msgid "[Array & JSON Casting](#array-and-json-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:9
#: ./docs/9.x/eloquent-mutators.md:9
#: ./docs/10.x/eloquent-mutators.md:9
#: ./docs/11.x/eloquent-mutators.md:9
#: ./docs/master/eloquent-mutators.md:9
msgctxt "P"
msgid "[Date Casting](#date-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:10
#: ./docs/9.x/eloquent-mutators.md:10
#: ./docs/10.x/eloquent-mutators.md:10
#: ./docs/11.x/eloquent-mutators.md:10
#: ./docs/master/eloquent-mutators.md:10
msgctxt "P"
msgid "[Enum Casting](#enum-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:11
#: ./docs/9.x/eloquent-mutators.md:11
#: ./docs/10.x/eloquent-mutators.md:11
#: ./docs/11.x/eloquent-mutators.md:11
#: ./docs/master/eloquent-mutators.md:11
msgctxt "P"
msgid "[Encrypted Casting](#encrypted-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:12
#: ./docs/9.x/eloquent-mutators.md:12
#: ./docs/10.x/eloquent-mutators.md:12
#: ./docs/11.x/eloquent-mutators.md:12
#: ./docs/master/eloquent-mutators.md:12
msgctxt "P"
msgid "[Query Time Casting](#query-time-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:13
#: ./docs/9.x/eloquent-mutators.md:13
#: ./docs/10.x/eloquent-mutators.md:13
#: ./docs/11.x/eloquent-mutators.md:13
#: ./docs/master/eloquent-mutators.md:13
msgctxt "P"
msgid "[Custom Casts](#custom-casts)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:14
#: ./docs/9.x/eloquent-mutators.md:14
#: ./docs/10.x/eloquent-mutators.md:14
#: ./docs/11.x/eloquent-mutators.md:14
#: ./docs/master/eloquent-mutators.md:14
msgctxt "P"
msgid "[Value Object Casting](#value-object-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:15
#: ./docs/9.x/eloquent-mutators.md:15
#: ./docs/10.x/eloquent-mutators.md:15
#: ./docs/11.x/eloquent-mutators.md:15
#: ./docs/master/eloquent-mutators.md:15
msgctxt "P"
msgid "[Array / JSON Serialization](#array-json-serialization)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:16
#: ./docs/9.x/eloquent-mutators.md:16
#: ./docs/10.x/eloquent-mutators.md:16
#: ./docs/11.x/eloquent-mutators.md:16
#: ./docs/master/eloquent-mutators.md:16
msgctxt "P"
msgid "[Inbound Casting](#inbound-casting)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:17
#: ./docs/9.x/eloquent-mutators.md:17
#: ./docs/10.x/eloquent-mutators.md:17
#: ./docs/11.x/eloquent-mutators.md:17
#: ./docs/master/eloquent-mutators.md:17
msgctxt "P"
msgid "[Cast Parameters](#cast-parameters)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:18
#: ./docs/9.x/eloquent-mutators.md:18
#: ./docs/10.x/eloquent-mutators.md:18
#: ./docs/11.x/eloquent-mutators.md:18
#: ./docs/master/eloquent-mutators.md:18
msgctxt "P"
msgid "[Castables](#castables)"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:20
#: ./docs/9.x/eloquent-mutators.md:20
#: ./docs/10.x/eloquent-mutators.md:20
#: ./docs/11.x/eloquent-mutators.md:20
#: ./docs/master/eloquent-mutators.md:20
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:21
#: ./docs/9.x/eloquent-mutators.md:21
#: ./docs/10.x/eloquent-mutators.md:21
#: ./docs/11.x/eloquent-mutators.md:21
#: ./docs/master/eloquent-mutators.md:21
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:23
#: ./docs/9.x/eloquent-mutators.md:23
#: ./docs/10.x/eloquent-mutators.md:23
#: ./docs/11.x/eloquent-mutators.md:23
#: ./docs/master/eloquent-mutators.md:23
msgctxt "P"
msgid "Accessors, mutators, and attribute casting allow you to transform Eloquent attribute values when you retrieve or set them on model instances. For example, you may want to use the [Laravel encrypter](/docs/{{version}}/encryption) to encrypt a value while it is stored in the database, and then automatically decrypt the attribute when you access it on an Eloquent model. Or, you may want to convert a JSON string that is stored in your database to an array when it is accessed via your Eloquent model."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:25
#: ./docs/9.x/eloquent-mutators.md:25
#: ./docs/10.x/eloquent-mutators.md:25
#: ./docs/11.x/eloquent-mutators.md:25
#: ./docs/master/eloquent-mutators.md:25
#~ msgctxt "P"
#~ msgid "<a name=\"accessors-and-mutators\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-mutators.md:26
#: ./docs/11.x/eloquent-mutators.md:26
#: ./docs/master/eloquent-mutators.md:26
msgctxt "H2"
msgid "Accessors and Mutators"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:26
#: ./docs/9.x/eloquent-mutators.md:26
msgctxt "H2"
msgid "Accessors & Mutators"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:28
#: ./docs/9.x/eloquent-mutators.md:28
#: ./docs/10.x/eloquent-mutators.md:28
#: ./docs/11.x/eloquent-mutators.md:28
#: ./docs/master/eloquent-mutators.md:28
#~ msgctxt "P"
#~ msgid "<a name=\"defining-an-accessor\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-mutators.md:29
#: ./docs/11.x/eloquent-mutators.md:29
#: ./docs/master/eloquent-mutators.md:29
msgctxt "H3"
msgid "Defining an Accessor"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:29
#: ./docs/9.x/eloquent-mutators.md:29
msgctxt "H3"
msgid "Defining An Accessor"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:31
msgctxt "P"
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a `get{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:31
#: ./docs/10.x/eloquent-mutators.md:31
#: ./docs/11.x/eloquent-mutators.md:31
#: ./docs/master/eloquent-mutators.md:31
msgctxt "P"
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a protected method on your model to represent the accessible attribute. This method name should correspond to the \"camel case\" representation of the true underlying model attribute / database column when applicable."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:33
msgctxt "P"
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:33
#: ./docs/10.x/eloquent-mutators.md:33
#: ./docs/11.x/eloquent-mutators.md:33
#: ./docs/master/eloquent-mutators.md:33
msgctxt "P"
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute. All attribute accessor / mutator methods must declare a return type-hint of `Illuminate\\Database\\Eloquent\\Casts\\Attribute`:"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:35
#: ./docs/11.x/eloquent-mutators.md:35
#: ./docs/master/eloquent-mutators.md:35
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn (string $value) => ucfirst($value),\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:35
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     *\n"
"     * @param  string  $value\n"
"     * @return string\n"
"     */\n"
"    public function getFirstNameAttribute($value)\n"
"    {\n"
"        return ucfirst($value);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:35
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn ($value) => ucfirst($value),\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:55
#: ./docs/9.x/eloquent-mutators.md:59
#: ./docs/10.x/eloquent-mutators.md:57
#: ./docs/11.x/eloquent-mutators.md:57
#: ./docs/master/eloquent-mutators.md:57
msgctxt "P"
msgid "As you can see, the original value of the column is passed to the accessor, allowing you to manipulate and return the value. To access the value of the accessor, you may simply access the `first_name` attribute on a model instance:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:57
#: ./docs/9.x/eloquent-mutators.md:61
#: ./docs/10.x/eloquent-mutators.md:59
#: ./docs/11.x/eloquent-mutators.md:59
#: ./docs/master/eloquent-mutators.md:59
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$firstName = $user->first_name;"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:57
#: ./docs/10.x/eloquent-mutators.md:55
#: ./docs/11.x/eloquent-mutators.md:55
#: ./docs/master/eloquent-mutators.md:55
msgctxt "P"
msgid "All accessor methods return an `Attribute` instance which defines how the attribute will be accessed and, optionally, mutated. In this example, we are only defining how the attribute will be accessed. To do so, we supply the `get` argument to the `Attribute` class constructor."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:63
msgctxt "P"
msgid "You are not limited to interacting with a single attribute within your accessor. You may also use accessors to return new, computed values from existing attributes:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:65
msgctxt "CODE"
msgid "/**\n"
" * Get the user's full name.\n"
" *\n"
" * @return string\n"
" */\n"
"public function getFullNameAttribute()\n"
"{\n"
"    return \"{$this->first_name} {$this->last_name}\";\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:70
#: ./docs/10.x/eloquent-mutators.md:68
#: ./docs/11.x/eloquent-mutators.md:68
#: ./docs/master/eloquent-mutators.md:68
#~ msgctxt "P"
#~ msgid "<a name=\"building-value-objects-from-multiple-attributes\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-mutators.md:71
#: ./docs/10.x/eloquent-mutators.md:69
#: ./docs/11.x/eloquent-mutators.md:69
#: ./docs/master/eloquent-mutators.md:69
msgctxt "H4"
msgid "Building Value Objects From Multiple Attributes"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:73
#: ./docs/11.x/eloquent-mutators.md:73
#: ./docs/master/eloquent-mutators.md:73
msgctxt "CODE: php"
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (mixed $value, array $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    );\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:73
#: ./docs/10.x/eloquent-mutators.md:71
#: ./docs/11.x/eloquent-mutators.md:71
#: ./docs/master/eloquent-mutators.md:71
msgctxt "P"
msgid "Sometimes your accessor may need to transform multiple model attributes into a single \"value object\". To do so, your `get` closure may accept a second argument of `$attributes`, which will be automatically supplied to the closure and will contain an array of all of the model's current attributes:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:75
#: ./docs/9.x/eloquent-mutators.md:68
#: ./docs/10.x/eloquent-mutators.md:66
#: ./docs/11.x/eloquent-mutators.md:66
#: ./docs/master/eloquent-mutators.md:66
msgctxt "P"
msgid "If you would like these computed values to be added to the array / JSON representations of your model, [you will need to append them](/docs/{{version}}/eloquent-serialization#appending-values-to-json)."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:75
msgctxt "CODE: php"
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:77
#: ./docs/9.x/eloquent-mutators.md:139
#: ./docs/10.x/eloquent-mutators.md:133
#: ./docs/11.x/eloquent-mutators.md:133
#: ./docs/master/eloquent-mutators.md:133
#~ msgctxt "P"
#~ msgid "<a name=\"defining-a-mutator\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:78
#: ./docs/9.x/eloquent-mutators.md:140
msgctxt "H3"
msgid "Defining A Mutator"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:80
msgctxt "P"
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, define a `set{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:82
msgctxt "P"
msgid "Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:84
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Set the user's first name.\n"
"     *\n"
"     * @param  string  $value\n"
"     * @return void\n"
"     */\n"
"    public function setFirstNameAttribute($value)\n"
"    {\n"
"        $this->attributes['first_name'] = strtolower($value);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:95
#: ./docs/10.x/eloquent-mutators.md:91
#: ./docs/11.x/eloquent-mutators.md:91
#: ./docs/master/eloquent-mutators.md:91
#~ msgctxt "P"
#~ msgid "<a name=\"accessor-caching\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-mutators.md:96
#: ./docs/10.x/eloquent-mutators.md:92
#: ./docs/11.x/eloquent-mutators.md:92
#: ./docs/master/eloquent-mutators.md:92
msgctxt "H4"
msgid "Accessor Caching"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:98
#: ./docs/10.x/eloquent-mutators.md:94
#: ./docs/11.x/eloquent-mutators.md:94
#: ./docs/master/eloquent-mutators.md:94
msgctxt "P"
msgid "When returning value objects from accessors, any changes made to the value object will automatically be synced back to the model before the model is saved. This is possible because Eloquent retains instances returned by accessors so it can return the same instance each time the accessor is invoked:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:100
#: ./docs/10.x/eloquent-mutators.md:96
#: ./docs/11.x/eloquent-mutators.md:96
#: ./docs/master/eloquent-mutators.md:96
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->address->lineOne = 'Updated Address Line 1 Value';\n"
"$user->address->lineTwo = 'Updated Address Line 2 Value';\n\n"
"$user->save();"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:104
msgctxt "P"
msgid "The mutator will receive the value that is being set on the attribute, allowing you to manipulate the value and set the manipulated value on the Eloquent model's internal `$attributes` property. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:106
#: ./docs/9.x/eloquent-mutators.md:169
#: ./docs/10.x/eloquent-mutators.md:161
#: ./docs/11.x/eloquent-mutators.md:161
#: ./docs/master/eloquent-mutators.md:161
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->first_name = 'Sally';"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:107
#: ./docs/11.x/eloquent-mutators.md:107
#: ./docs/master/eloquent-mutators.md:107
msgctxt "CODE: php"
msgid "protected function hash(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (string $value) => bcrypt(gzuncompress($value)),\n"
"    )->shouldCache();\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:109
#: ./docs/10.x/eloquent-mutators.md:105
#: ./docs/11.x/eloquent-mutators.md:105
#: ./docs/master/eloquent-mutators.md:105
msgctxt "P"
msgid "However, you may sometimes wish to enable caching for primitive values like strings and booleans, particularly if they are computationally intensive. To accomplish this, you may invoke the `shouldCache` method when defining your accessor:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:111
msgctxt "CODE: php"
msgid "protected function hash(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value) => bcrypt(gzuncompress($value)),\n"
"    )->shouldCache();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:112
msgctxt "P"
msgid "In this example, the `setFirstNameAttribute` function will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in the internal `$attributes` array."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:114
#: ./docs/9.x/eloquent-mutators.md:206
#: ./docs/10.x/eloquent-mutators.md:196
#: ./docs/11.x/eloquent-mutators.md:196
#: ./docs/master/eloquent-mutators.md:196
#~ msgctxt "P"
#~ msgid "<a name=\"attribute-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:115
#: ./docs/9.x/eloquent-mutators.md:207
#: ./docs/10.x/eloquent-mutators.md:197
#: ./docs/11.x/eloquent-mutators.md:197
#: ./docs/master/eloquent-mutators.md:197
msgctxt "H2"
msgid "Attribute Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:117
#: ./docs/9.x/eloquent-mutators.md:209
#: ./docs/10.x/eloquent-mutators.md:199
msgctxt "P"
msgid "Attribute casting provides functionality similar to accessors and mutators without requiring you to define any additional methods on your model. Instead, your model's `$casts` property provides a convenient method of converting attributes to common data types."
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:118
#: ./docs/11.x/eloquent-mutators.md:118
#: ./docs/master/eloquent-mutators.md:118
msgctxt "CODE: php"
msgid "/**\n"
" * Interact with the user's address.\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (mixed $value, array $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    )->withoutObjectCaching();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:119
#: ./docs/9.x/eloquent-mutators.md:211
#: ./docs/10.x/eloquent-mutators.md:201
msgctxt "P"
msgid "The `$casts` property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to. The supported cast types are:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:120
#: ./docs/10.x/eloquent-mutators.md:116
#: ./docs/11.x/eloquent-mutators.md:116
#: ./docs/master/eloquent-mutators.md:116
msgctxt "P"
msgid "If you would like to disable the object caching behavior of attributes, you may invoke the `withoutObjectCaching` method when defining the attribute:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:122
msgctxt "CODE: php"
msgid "/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    )->withoutObjectCaching();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:123
#: ./docs/9.x/eloquent-mutators.md:215
#: ./docs/10.x/eloquent-mutators.md:205
#: ./docs/11.x/eloquent-mutators.md:205
#: ./docs/master/eloquent-mutators.md:205
msgctxt "P"
msgid "`array`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:124
#: ./docs/9.x/eloquent-mutators.md:216
#: ./docs/10.x/eloquent-mutators.md:206
#: ./docs/11.x/eloquent-mutators.md:206
#: ./docs/master/eloquent-mutators.md:206
msgctxt "P"
msgid "`AsStringable::class`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:125
#: ./docs/9.x/eloquent-mutators.md:217
#: ./docs/10.x/eloquent-mutators.md:207
#: ./docs/11.x/eloquent-mutators.md:207
#: ./docs/master/eloquent-mutators.md:207
msgctxt "P"
msgid "`boolean`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:126
#: ./docs/9.x/eloquent-mutators.md:218
#: ./docs/10.x/eloquent-mutators.md:208
#: ./docs/11.x/eloquent-mutators.md:208
#: ./docs/master/eloquent-mutators.md:208
msgctxt "P"
msgid "`collection`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:127
#: ./docs/9.x/eloquent-mutators.md:219
#: ./docs/10.x/eloquent-mutators.md:209
#: ./docs/11.x/eloquent-mutators.md:209
#: ./docs/master/eloquent-mutators.md:209
msgctxt "P"
msgid "`date`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:128
#: ./docs/9.x/eloquent-mutators.md:220
#: ./docs/10.x/eloquent-mutators.md:210
#: ./docs/11.x/eloquent-mutators.md:210
#: ./docs/master/eloquent-mutators.md:210
msgctxt "P"
msgid "`datetime`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:129
#: ./docs/9.x/eloquent-mutators.md:221
#: ./docs/10.x/eloquent-mutators.md:211
#: ./docs/11.x/eloquent-mutators.md:211
#: ./docs/master/eloquent-mutators.md:211
msgctxt "P"
msgid "`immutable_date`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:130
#: ./docs/9.x/eloquent-mutators.md:222
#: ./docs/10.x/eloquent-mutators.md:212
#: ./docs/11.x/eloquent-mutators.md:212
#: ./docs/master/eloquent-mutators.md:212
msgctxt "P"
msgid "`immutable_datetime`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:131
msgctxt "P"
msgid "`decimal:`<code><digits></code>"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:132
#: ./docs/9.x/eloquent-mutators.md:224
#: ./docs/10.x/eloquent-mutators.md:214
#: ./docs/11.x/eloquent-mutators.md:214
#: ./docs/master/eloquent-mutators.md:214
msgctxt "P"
msgid "`double`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:133
#: ./docs/9.x/eloquent-mutators.md:225
#: ./docs/10.x/eloquent-mutators.md:215
#: ./docs/11.x/eloquent-mutators.md:215
#: ./docs/master/eloquent-mutators.md:215
msgctxt "P"
msgid "`encrypted`"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:134
#: ./docs/11.x/eloquent-mutators.md:134
#: ./docs/master/eloquent-mutators.md:134
msgctxt "H3"
msgid "Defining a Mutator"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:134
#: ./docs/9.x/eloquent-mutators.md:226
#: ./docs/10.x/eloquent-mutators.md:216
#: ./docs/11.x/eloquent-mutators.md:216
#: ./docs/master/eloquent-mutators.md:216
msgctxt "P"
msgid "`encrypted:array`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:135
#: ./docs/9.x/eloquent-mutators.md:227
#: ./docs/10.x/eloquent-mutators.md:217
#: ./docs/11.x/eloquent-mutators.md:217
#: ./docs/master/eloquent-mutators.md:217
msgctxt "P"
msgid "`encrypted:collection`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:136
#: ./docs/9.x/eloquent-mutators.md:228
#: ./docs/10.x/eloquent-mutators.md:218
#: ./docs/11.x/eloquent-mutators.md:218
#: ./docs/master/eloquent-mutators.md:218
msgctxt "P"
msgid "`encrypted:object`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:137
#: ./docs/9.x/eloquent-mutators.md:229
#: ./docs/10.x/eloquent-mutators.md:219
#: ./docs/11.x/eloquent-mutators.md:219
#: ./docs/master/eloquent-mutators.md:219
msgctxt "P"
msgid "`float`"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:138
#: ./docs/11.x/eloquent-mutators.md:138
#: ./docs/master/eloquent-mutators.md:138
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Interact with the user's first name.\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn (string $value) => ucfirst($value),\n"
"            set: fn (string $value) => strtolower($value),\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:138
#: ./docs/9.x/eloquent-mutators.md:230
#: ./docs/10.x/eloquent-mutators.md:221
#: ./docs/11.x/eloquent-mutators.md:221
#: ./docs/master/eloquent-mutators.md:221
msgctxt "P"
msgid "`integer`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:139
#: ./docs/9.x/eloquent-mutators.md:231
#: ./docs/10.x/eloquent-mutators.md:222
#: ./docs/11.x/eloquent-mutators.md:222
#: ./docs/master/eloquent-mutators.md:222
msgctxt "P"
msgid "`object`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:140
#: ./docs/9.x/eloquent-mutators.md:232
#: ./docs/10.x/eloquent-mutators.md:223
#: ./docs/11.x/eloquent-mutators.md:223
#: ./docs/master/eloquent-mutators.md:223
msgctxt "P"
msgid "`real`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:141
#: ./docs/9.x/eloquent-mutators.md:233
#: ./docs/10.x/eloquent-mutators.md:224
#: ./docs/11.x/eloquent-mutators.md:224
#: ./docs/master/eloquent-mutators.md:224
msgctxt "P"
msgid "`string`"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:142
#: ./docs/9.x/eloquent-mutators.md:234
#: ./docs/10.x/eloquent-mutators.md:225
#: ./docs/11.x/eloquent-mutators.md:225
#: ./docs/master/eloquent-mutators.md:225
msgctxt "P"
msgid "`timestamp`"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:142
#: ./docs/10.x/eloquent-mutators.md:136
#: ./docs/11.x/eloquent-mutators.md:136
#: ./docs/master/eloquent-mutators.md:136
msgctxt "P"
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, you may provide the `set` argument when defining your attribute. Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:144
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Interact with the user's first name.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn ($value) => ucfirst($value),\n"
"            set: fn ($value) => strtolower($value),\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:146
#: ./docs/9.x/eloquent-mutators.md:238
#: ./docs/10.x/eloquent-mutators.md:229
#: ./docs/11.x/eloquent-mutators.md:229
#: ./docs/master/eloquent-mutators.md:229
msgctxt "P"
msgid "To demonstrate attribute casting, let's cast the `is_admin` attribute, which is stored in our database as an integer (`0` or `1`) to a boolean value:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:148
#: ./docs/9.x/eloquent-mutators.md:240
#: ./docs/10.x/eloquent-mutators.md:231
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'is_admin' => 'boolean',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:166
#: ./docs/9.x/eloquent-mutators.md:258
#: ./docs/10.x/eloquent-mutators.md:249
#: ./docs/11.x/eloquent-mutators.md:252
#: ./docs/master/eloquent-mutators.md:252
msgctxt "P"
msgid "After defining the cast, the `is_admin` attribute will always be cast to a boolean when you access it, even if the underlying value is stored in the database as an integer:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:167
#: ./docs/10.x/eloquent-mutators.md:159
#: ./docs/11.x/eloquent-mutators.md:159
#: ./docs/master/eloquent-mutators.md:159
msgctxt "P"
msgid "The mutator closure will receive the value that is being set on the attribute, allowing you to manipulate the value and return the manipulated value. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:168
#: ./docs/9.x/eloquent-mutators.md:260
msgctxt "CODE"
msgid "$user = App\\Models\\User::find(1);\n\n"
"if ($user->is_admin) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:174
#: ./docs/11.x/eloquent-mutators.md:174
#: ./docs/master/eloquent-mutators.md:174
msgctxt "CODE: php"
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (mixed $value, array $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:174
#: ./docs/9.x/eloquent-mutators.md:266
#: ./docs/10.x/eloquent-mutators.md:257
#: ./docs/11.x/eloquent-mutators.md:260
#: ./docs/master/eloquent-mutators.md:260
msgctxt "P"
msgid "If you need to add a new, temporary cast at runtime, you may use the `mergeCasts` method. These cast definitions will be added to any of the casts already defined on the model:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:175
#: ./docs/10.x/eloquent-mutators.md:167
#: ./docs/11.x/eloquent-mutators.md:167
#: ./docs/master/eloquent-mutators.md:167
msgctxt "P"
msgid "In this example, the `set` callback will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in the model's internal `$attributes` array."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:176
#: ./docs/9.x/eloquent-mutators.md:268
#: ./docs/10.x/eloquent-mutators.md:259
#: ./docs/11.x/eloquent-mutators.md:262
#: ./docs/master/eloquent-mutators.md:262
msgctxt "CODE"
msgid "$user->mergeCasts([\n"
"    'is_admin' => 'integer',\n"
"    'options' => 'object',\n"
"]);"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:177
#: ./docs/10.x/eloquent-mutators.md:169
#: ./docs/11.x/eloquent-mutators.md:169
#: ./docs/master/eloquent-mutators.md:169
#~ msgctxt "P"
#~ msgid "<a name=\"mutating-multiple-attributes\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-mutators.md:178
#: ./docs/10.x/eloquent-mutators.md:170
#: ./docs/11.x/eloquent-mutators.md:170
#: ./docs/master/eloquent-mutators.md:170
msgctxt "H4"
msgid "Mutating Multiple Attributes"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:180
#: ./docs/10.x/eloquent-mutators.md:172
#: ./docs/11.x/eloquent-mutators.md:172
#: ./docs/master/eloquent-mutators.md:172
msgctxt "P"
msgid "Sometimes your mutator may need to set multiple attributes on the underlying model. To do so, you may return an array from the `set` closure. Each key in the array should correspond with an underlying attribute / database column associated with the model:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:181
#: ./docs/9.x/eloquent-mutators.md:274
msgctxt "P"
msgid "Attributes that are `null` will not be cast. In addition, you should never define a cast (or an attribute) that has the same name as a relationship."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:182
msgctxt "CODE: php"
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:183
#: ./docs/9.x/eloquent-mutators.md:276
#: ./docs/10.x/eloquent-mutators.md:267
#: ./docs/11.x/eloquent-mutators.md:270
#: ./docs/master/eloquent-mutators.md:270
#~ msgctxt "P"
#~ msgid "<a name=\"stringable-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:184
#: ./docs/9.x/eloquent-mutators.md:277
#: ./docs/10.x/eloquent-mutators.md:268
#: ./docs/11.x/eloquent-mutators.md:271
#: ./docs/master/eloquent-mutators.md:271
msgctxt "H4"
msgid "Stringable Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:186
#: ./docs/9.x/eloquent-mutators.md:279
msgctxt "P"
msgid "You may use the `Illuminate\\Database\\Eloquent\\Casts\\AsStringable` cast class to cast a model attribute to a [fluent `Illuminate\\Support\\Stringable` object](/docs/{{version}}/helpers#fluent-strings-method-list):"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:188
#: ./docs/9.x/eloquent-mutators.md:281
#: ./docs/10.x/eloquent-mutators.md:272
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsStringable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'directory' => AsStringable::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:199
#: ./docs/master/eloquent-mutators.md:199
msgctxt "P"
msgid "Attribute casting provides functionality similar to accessors and mutators without requiring you to define any additional methods on your model. Instead, your model's `casts` method provides a convenient way of converting attributes to common data types."
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:201
#: ./docs/master/eloquent-mutators.md:201
msgctxt "P"
msgid "The `casts` method should return an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to. The supported cast types are:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:207
#: ./docs/9.x/eloquent-mutators.md:300
#: ./docs/10.x/eloquent-mutators.md:291
#: ./docs/11.x/eloquent-mutators.md:297
#: ./docs/master/eloquent-mutators.md:297
#~ msgctxt "P"
#~ msgid "<a name=\"array-and-json-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:208
#: ./docs/9.x/eloquent-mutators.md:301
msgctxt "H3"
msgid "Array & JSON Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:210
#: ./docs/9.x/eloquent-mutators.md:303
#: ./docs/10.x/eloquent-mutators.md:294
#: ./docs/11.x/eloquent-mutators.md:300
#: ./docs/master/eloquent-mutators.md:300
msgctxt "P"
msgid "The `array` cast is particularly useful when working with columns that are stored as serialized JSON. For example, if your database has a `JSON` or `TEXT` field type that contains serialized JSON, adding the `array` cast to that attribute will automatically deserialize the attribute to a PHP array when you access it on your Eloquent model:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:212
#: ./docs/9.x/eloquent-mutators.md:305
#: ./docs/10.x/eloquent-mutators.md:296
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => 'array',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:220
#: ./docs/11.x/eloquent-mutators.md:220
#: ./docs/master/eloquent-mutators.md:220
msgctxt "P"
msgid "`hashed`"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:223
#: ./docs/10.x/eloquent-mutators.md:213
#: ./docs/11.x/eloquent-mutators.md:213
#: ./docs/master/eloquent-mutators.md:213
msgctxt "P"
msgid "<code>decimal:<precision></code>"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:230
#: ./docs/9.x/eloquent-mutators.md:323
#: ./docs/10.x/eloquent-mutators.md:314
#: ./docs/11.x/eloquent-mutators.md:323
#: ./docs/master/eloquent-mutators.md:323
msgctxt "P"
msgid "Once the cast is defined, you may access the `options` attribute and it will automatically be deserialized from JSON into a PHP array. When you set the value of the `options` attribute, the given array will automatically be serialized back into JSON for storage:"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:231
#: ./docs/master/eloquent-mutators.md:231
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the attributes that should be cast.\n"
"     *\n"
"     * @return array<string, string>\n"
"     */\n"
"    protected function casts(): array\n"
"    {\n"
"        return [\n"
"            'is_admin' => 'boolean',\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:232
#: ./docs/9.x/eloquent-mutators.md:325
#: ./docs/10.x/eloquent-mutators.md:316
#: ./docs/11.x/eloquent-mutators.md:325
#: ./docs/master/eloquent-mutators.md:325
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$options = $user->options;\n\n"
"$options['key'] = 'value';\n\n"
"$user->options = $options;\n\n"
"$user->save();"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:244
#: ./docs/9.x/eloquent-mutators.md:337
msgctxt "P"
msgid "To update a single field of a JSON attribute with a more terse syntax, you may use the `->` operator when calling the `update` method:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:246
#: ./docs/9.x/eloquent-mutators.md:339
#: ./docs/10.x/eloquent-mutators.md:330
#: ./docs/11.x/eloquent-mutators.md:339
#: ./docs/master/eloquent-mutators.md:339
msgctxt "CODE"
msgid "$user = User::find(1);\n\n"
"$user->update(['options->key' => 'value']);"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:250
#: ./docs/9.x/eloquent-mutators.md:343
#: ./docs/10.x/eloquent-mutators.md:334
#: ./docs/11.x/eloquent-mutators.md:343
#: ./docs/master/eloquent-mutators.md:343
#~ msgctxt "P"
#~ msgid "<a name=\"array-object-and-collection-casting\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-mutators.md:251
#: ./docs/11.x/eloquent-mutators.md:254
#: ./docs/master/eloquent-mutators.md:254
msgctxt "CODE"
msgid "$user = App\\Models\\User::find(1);\n\n"
"if ($user->is_admin) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:251
#: ./docs/9.x/eloquent-mutators.md:344
msgctxt "H4"
msgid "Array Object & Collection Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:253
#: ./docs/9.x/eloquent-mutators.md:346
#: ./docs/10.x/eloquent-mutators.md:337
#: ./docs/11.x/eloquent-mutators.md:346
#: ./docs/master/eloquent-mutators.md:346
msgctxt "P"
msgid "Although the standard `array` cast is sufficient for many applications, it does have some disadvantages. Since the `array` cast returns a primitive type, it is not possible to mutate an offset of the array directly. For example, the following code will trigger a PHP error:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:255
#: ./docs/9.x/eloquent-mutators.md:348
#: ./docs/10.x/eloquent-mutators.md:339
#: ./docs/11.x/eloquent-mutators.md:348
#: ./docs/master/eloquent-mutators.md:348
msgctxt "CODE"
msgid "$user = User::find(1);\n\n"
"$user->options['key'] = $value;"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:259
#: ./docs/9.x/eloquent-mutators.md:352
#: ./docs/10.x/eloquent-mutators.md:343
#: ./docs/11.x/eloquent-mutators.md:352
#: ./docs/master/eloquent-mutators.md:352
msgctxt "P"
msgid "To solve this, Laravel offers an `AsArrayObject` cast that casts your JSON attribute to an [ArrayObject](https://www.php.net/manual/en/class.arrayobject.php) class. This feature is implemented using Laravel's [custom cast](#custom-casts) implementation, which allows Laravel to intelligently cache and transform the mutated object such that individual offsets may be modified without triggering a PHP error. To use the `AsArrayObject` cast, simply assign it to an attribute:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:261
#: ./docs/9.x/eloquent-mutators.md:354
#: ./docs/10.x/eloquent-mutators.md:345
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsArrayObject::class,\n"
"];"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:265
#: ./docs/11.x/eloquent-mutators.md:268
#: ./docs/master/eloquent-mutators.md:268
msgctxt "P"
msgid "Attributes that are `null` will not be cast. In addition, you should never define a cast (or an attribute) that has the same name as a relationship or assign a cast to the model's primary key."
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:270
#: ./docs/11.x/eloquent-mutators.md:273
#: ./docs/master/eloquent-mutators.md:273
msgctxt "P"
msgid "You may use the `Illuminate\\Database\\Eloquent\\Casts\\AsStringable` cast class to cast a model attribute to a [fluent `Illuminate\\Support\\Stringable` object](/docs/{{version}}/strings#fluent-strings-method-list):"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:272
#: ./docs/9.x/eloquent-mutators.md:365
#: ./docs/10.x/eloquent-mutators.md:356
#: ./docs/11.x/eloquent-mutators.md:368
#: ./docs/master/eloquent-mutators.md:368
msgctxt "P"
msgid "Similarly, Laravel offers an `AsCollection` cast that casts your JSON attribute to a Laravel [Collection](/docs/{{version}}/collections) instance:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:274
#: ./docs/9.x/eloquent-mutators.md:367
#: ./docs/10.x/eloquent-mutators.md:358
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsCollection::class,\n"
"];"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:275
#: ./docs/master/eloquent-mutators.md:275
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsStringable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the attributes that should be cast.\n"
"     *\n"
"     * @return array<string, string>\n"
"     */\n"
"    protected function casts(): array\n"
"    {\n"
"        return [\n"
"            'directory' => AsStringable::class,\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:285
#: ./docs/9.x/eloquent-mutators.md:378
#: ./docs/10.x/eloquent-mutators.md:383
#: ./docs/11.x/eloquent-mutators.md:401
#: ./docs/master/eloquent-mutators.md:401
#~ msgctxt "P"
#~ msgid "<a name=\"date-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:286
#: ./docs/9.x/eloquent-mutators.md:379
#: ./docs/10.x/eloquent-mutators.md:384
#: ./docs/11.x/eloquent-mutators.md:402
#: ./docs/master/eloquent-mutators.md:402
msgctxt "H3"
msgid "Date Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:288
#: ./docs/9.x/eloquent-mutators.md:381
#: ./docs/10.x/eloquent-mutators.md:386
msgctxt "P"
msgid "By default, Eloquent will cast the `created_at` and `updated_at` columns to instances of [Carbon](https://github.com/briannesbitt/Carbon), which extends the PHP `DateTime` class and provides an assortment of helpful methods. You may cast additional date attributes by defining additional date casts within your model's `$casts` property array. Typically, dates should be cast using the `datetime` or `immutable_datetime` cast types."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:290
#: ./docs/9.x/eloquent-mutators.md:383
#: ./docs/10.x/eloquent-mutators.md:388
#: ./docs/11.x/eloquent-mutators.md:406
#: ./docs/master/eloquent-mutators.md:406
msgctxt "P"
msgid "When defining a `date` or `datetime` cast, you may also specify the date's format. This format will be used when the [model is serialized to an array or JSON](/docs/{{version}}/eloquent-serialization):"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:292
#: ./docs/11.x/eloquent-mutators.md:298
#: ./docs/master/eloquent-mutators.md:298
msgctxt "H3"
msgid "Array and JSON Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:292
#: ./docs/9.x/eloquent-mutators.md:385
#: ./docs/10.x/eloquent-mutators.md:390
msgctxt "CODE"
msgid "/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'created_at' => 'datetime:Y-m-d',\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:301
#: ./docs/9.x/eloquent-mutators.md:394
#: ./docs/10.x/eloquent-mutators.md:399
#: ./docs/11.x/eloquent-mutators.md:420
#: ./docs/master/eloquent-mutators.md:420
msgctxt "P"
msgid "When a column is cast as a date, you may set the corresponding model attribute value to a UNIX timestamp, date string (`Y-m-d`), date-time string, or a `DateTime` / `Carbon` instance. The date's value will be correctly converted and stored in your database."
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:302
#: ./docs/master/eloquent-mutators.md:302
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the attributes that should be cast.\n"
"     *\n"
"     * @return array<string, string>\n"
"     */\n"
"    protected function casts(): array\n"
"    {\n"
"        return [\n"
"            'options' => 'array',\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:303
#: ./docs/9.x/eloquent-mutators.md:396
#: ./docs/10.x/eloquent-mutators.md:401
#: ./docs/11.x/eloquent-mutators.md:422
#: ./docs/master/eloquent-mutators.md:422
msgctxt "P"
msgid "You may customize the default serialization format for all of your model's dates by defining a `serializeDate` method on your model. This method does not affect how your dates are formatted for storage in the database:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:305
#: ./docs/9.x/eloquent-mutators.md:398
msgctxt "CODE"
msgid "/**\n"
" * Prepare a date for array / JSON serialization.\n"
" *\n"
" * @param  \\DateTimeInterface  $date\n"
" * @return string\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date)\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:316
#: ./docs/9.x/eloquent-mutators.md:409
#: ./docs/10.x/eloquent-mutators.md:411
#: ./docs/11.x/eloquent-mutators.md:432
#: ./docs/master/eloquent-mutators.md:432
msgctxt "P"
msgid "To specify the format that should be used when actually storing a model's dates within your database, you should define a `$dateFormat` property on your model:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:318
#: ./docs/9.x/eloquent-mutators.md:411
#: ./docs/10.x/eloquent-mutators.md:413
#: ./docs/11.x/eloquent-mutators.md:434
#: ./docs/master/eloquent-mutators.md:434
msgctxt "CODE"
msgid "/**\n"
" * The storage format of the model's date columns.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $dateFormat = 'U';"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:325
#: ./docs/9.x/eloquent-mutators.md:418
#: ./docs/10.x/eloquent-mutators.md:420
#: ./docs/11.x/eloquent-mutators.md:441
#: ./docs/master/eloquent-mutators.md:441
#~ msgctxt "P"
#~ msgid "<a name=\"date-casting-and-timezones\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:326
#: ./docs/9.x/eloquent-mutators.md:419
msgctxt "H4"
msgid "Date Casting, Serialization, & Timezones"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:328
#: ./docs/11.x/eloquent-mutators.md:337
#: ./docs/master/eloquent-mutators.md:337
msgctxt "P"
msgid "To update a single field of a JSON attribute with a more terse syntax, you may [make the attribute mass assignable](/docs/{{version}}/eloquent#mass-assignment-json-columns) and use the `->` operator when calling the `update` method:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:328
#: ./docs/9.x/eloquent-mutators.md:421
msgctxt "P"
msgid "By default, the `date` and `datetime` casts will serialize dates to a UTC ISO-8601 date string (`1986-05-28T21:05:54.000000Z`), regardless of the timezone specified in your application's `timezone` configuration option. You are strongly encouraged to always use this serialization format, as well as to store your application's dates in the UTC timezone by not changing your application's `timezone` configuration option from its default `UTC` value. Consistently using the UTC timezone throughout your application will provide the maximum level of interoperability with other date manipulation libraries written in PHP and JavaScript."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:330
#: ./docs/9.x/eloquent-mutators.md:423
#: ./docs/10.x/eloquent-mutators.md:425
#: ./docs/master/eloquent-mutators.md:446
msgctxt "P"
msgid "If a custom format is applied to the `date` or `datetime` cast, such as `datetime:Y-m-d H:i:s`, the inner timezone of the Carbon instance will be used during date serialization. Typically, this will be the timezone specified in your application's `timezone` configuration option."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:332
#: ./docs/9.x/eloquent-mutators.md:425
#: ./docs/10.x/eloquent-mutators.md:427
#: ./docs/11.x/eloquent-mutators.md:448
#: ./docs/master/eloquent-mutators.md:448
#~ msgctxt "P"
#~ msgid "<a name=\"enum-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:333
#: ./docs/9.x/eloquent-mutators.md:426
#: ./docs/10.x/eloquent-mutators.md:428
#: ./docs/11.x/eloquent-mutators.md:449
#: ./docs/master/eloquent-mutators.md:449
msgctxt "H3"
msgid "Enum Casting"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:335
#: ./docs/11.x/eloquent-mutators.md:344
#: ./docs/master/eloquent-mutators.md:344
msgctxt "H4"
msgid "Array Object and Collection Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:335
#: ./docs/9.x/eloquent-mutators.md:429
msgctxt "P"
msgid "Enum casting is only available for PHP 8.1+."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:337
msgctxt "P"
msgid "Eloquent also allows you to cast your attribute values to PHP enums. To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:339
#: ./docs/9.x/eloquent-mutators.md:433
#: ./docs/10.x/eloquent-mutators.md:432
msgctxt "CODE"
msgid "use App\\Enums\\ServerStatus;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'status' => ServerStatus::class,\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:350
#: ./docs/9.x/eloquent-mutators.md:444
#: ./docs/10.x/eloquent-mutators.md:443
#: ./docs/11.x/eloquent-mutators.md:467
#: ./docs/master/eloquent-mutators.md:467
msgctxt "P"
msgid "Once you have defined the cast on your model, the specified attribute will be automatically cast to and from an enum when you interact with the attribute:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:352
msgctxt "CODE"
msgid "if ($server->status == ServerStatus::provisioned) {\n"
"    $server->status = ServerStatus::ready;\n\n"
"    $server->save();\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:354
#: ./docs/master/eloquent-mutators.md:354
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n\n"
"/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'options' => AsArrayObject::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:358
#: ./docs/9.x/eloquent-mutators.md:469
#: ./docs/10.x/eloquent-mutators.md:468
#: ./docs/11.x/eloquent-mutators.md:495
#: ./docs/master/eloquent-mutators.md:495
#~ msgctxt "P"
#~ msgid "<a name=\"encrypted-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:359
#: ./docs/9.x/eloquent-mutators.md:470
#: ./docs/10.x/eloquent-mutators.md:469
#: ./docs/11.x/eloquent-mutators.md:496
#: ./docs/master/eloquent-mutators.md:496
msgctxt "H3"
msgid "Encrypted Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:361
#: ./docs/9.x/eloquent-mutators.md:472
#: ./docs/10.x/eloquent-mutators.md:471
#: ./docs/11.x/eloquent-mutators.md:498
#: ./docs/master/eloquent-mutators.md:498
msgctxt "P"
msgid "The `encrypted` cast will encrypt a model's attribute value using Laravel's built-in [encryption](/docs/{{version}}/encryption) features. In addition, the `encrypted:array`, `encrypted:collection`, `encrypted:object`, `AsEncryptedArrayObject`, and `AsEncryptedCollection` casts work like their unencrypted counterparts; however, as you might expect, the underlying value is encrypted when stored in your database."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:363
#: ./docs/9.x/eloquent-mutators.md:474
#: ./docs/10.x/eloquent-mutators.md:473
#: ./docs/11.x/eloquent-mutators.md:500
#: ./docs/master/eloquent-mutators.md:500
msgctxt "P"
msgid "As the final length of the encrypted text is not predictable and is longer than its plain text counterpart, make sure the associated database column is of `TEXT` type or larger. In addition, since the values are encrypted in the database, you will not be able to query or search encrypted attribute values."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:365
#: ./docs/9.x/eloquent-mutators.md:481
#: ./docs/10.x/eloquent-mutators.md:480
#: ./docs/11.x/eloquent-mutators.md:507
#: ./docs/master/eloquent-mutators.md:507
#~ msgctxt "P"
#~ msgid "<a name=\"query-time-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:366
#: ./docs/9.x/eloquent-mutators.md:482
#: ./docs/10.x/eloquent-mutators.md:481
#: ./docs/11.x/eloquent-mutators.md:508
#: ./docs/master/eloquent-mutators.md:508
msgctxt "H3"
msgid "Query Time Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:368
#: ./docs/9.x/eloquent-mutators.md:484
#: ./docs/10.x/eloquent-mutators.md:483
#: ./docs/11.x/eloquent-mutators.md:510
#: ./docs/master/eloquent-mutators.md:510
msgctxt "P"
msgid "Sometimes you may need to apply casts while executing a query, such as when selecting a raw value from a table. For example, consider the following query:"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:369
#: ./docs/11.x/eloquent-mutators.md:384
#: ./docs/master/eloquent-mutators.md:384
msgctxt "P"
msgid "If you would like the `AsCollection` cast to instantiate a custom collection class instead of Laravel's base collection class, you may provide the collection class name as a cast argument:"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:370
#: ./docs/master/eloquent-mutators.md:370
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n"
"/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'options' => AsCollection::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:370
#: ./docs/9.x/eloquent-mutators.md:486
#: ./docs/10.x/eloquent-mutators.md:485
#: ./docs/11.x/eloquent-mutators.md:512
#: ./docs/master/eloquent-mutators.md:512
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"$users = User::select([\n"
"    'users.*',\n"
"    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"            ->whereColumn('user_id', 'users.id')\n"
"])->get();"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:371
msgctxt "CODE"
msgid "use App\\Collections\\OptionCollection;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsCollection::class.':'.OptionCollection::class,\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:379
#: ./docs/9.x/eloquent-mutators.md:495
#: ./docs/10.x/eloquent-mutators.md:494
#: ./docs/11.x/eloquent-mutators.md:521
#: ./docs/master/eloquent-mutators.md:521
msgctxt "P"
msgid "The `last_posted_at` attribute on the results of this query will be a simple string. It would be wonderful if we could apply a `datetime` cast to this attribute when executing the query. Thankfully, we may accomplish this using the `withCasts` method:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:381
#: ./docs/9.x/eloquent-mutators.md:497
#: ./docs/10.x/eloquent-mutators.md:496
#: ./docs/11.x/eloquent-mutators.md:523
#: ./docs/master/eloquent-mutators.md:523
msgctxt "CODE"
msgid "$users = User::select([\n"
"    'users.*',\n"
"    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"            ->whereColumn('user_id', 'users.id')\n"
"])->withCasts([\n"
"    'last_posted_at' => 'datetime'\n"
"])->get();"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:386
#: ./docs/master/eloquent-mutators.md:386
msgctxt "CODE"
msgid "use App\\Collections\\OptionCollection;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n"
"/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'options' => AsCollection::using(OptionCollection::class),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:389
#: ./docs/9.x/eloquent-mutators.md:505
#: ./docs/10.x/eloquent-mutators.md:504
#: ./docs/11.x/eloquent-mutators.md:531
#: ./docs/master/eloquent-mutators.md:531
#~ msgctxt "P"
#~ msgid "<a name=\"custom-casts\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:390
#: ./docs/9.x/eloquent-mutators.md:506
#: ./docs/10.x/eloquent-mutators.md:505
#: ./docs/11.x/eloquent-mutators.md:532
#: ./docs/master/eloquent-mutators.md:532
msgctxt "H2"
msgid "Custom Casts"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:392
msgctxt "P"
msgid "Laravel has a variety of built-in, helpful cast types; however, you may occasionally need to define your own cast types. You may accomplish this by defining a class that implements the `CastsAttributes` interface."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:394
msgctxt "P"
msgid "Classes that implement this interface must define a `get` and `set` method. The `get` method is responsible for transforming a raw value from the database into a cast value, while the `set` method should transform a cast value into a raw value that can be stored in the database. As an example, we will re-implement the built-in `json` cast type as a custom cast type:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:396
#: ./docs/9.x/eloquent-mutators.md:516
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Json implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return json_decode($value, true);\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  array  $value\n"
"     * @param  array  $attributes\n"
"     * @return string\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        return json_encode($value);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:403
#: ./docs/11.x/eloquent-mutators.md:424
#: ./docs/master/eloquent-mutators.md:424
msgctxt "CODE"
msgid "/**\n"
" * Prepare a date for array / JSON serialization.\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date): string\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:404
#: ./docs/master/eloquent-mutators.md:404
msgctxt "P"
msgid "By default, Eloquent will cast the `created_at` and `updated_at` columns to instances of [Carbon](https://github.com/briannesbitt/Carbon), which extends the PHP `DateTime` class and provides an assortment of helpful methods. You may cast additional date attributes by defining additional date casts within your model's `casts` method. Typically, dates should be cast using the `datetime` or `immutable_datetime` cast types."
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:408
#: ./docs/master/eloquent-mutators.md:408
msgctxt "CODE"
msgid "/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'created_at' => 'datetime:Y-m-d',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:421
#: ./docs/11.x/eloquent-mutators.md:442
#: ./docs/master/eloquent-mutators.md:442
msgctxt "H4"
msgid "Date Casting, Serialization, and Timezones"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:423
#: ./docs/11.x/eloquent-mutators.md:444
#: ./docs/master/eloquent-mutators.md:444
msgctxt "P"
msgid "By default, the `date` and `datetime` casts will serialize dates to a UTC ISO-8601 date string (`YYYY-MM-DDTHH:MM:SS.uuuuuuZ`), regardless of the timezone specified in your application's `timezone` configuration option. You are strongly encouraged to always use this serialization format, as well as to store your application's dates in the UTC timezone by not changing your application's `timezone` configuration option from its default `UTC` value. Consistently using the UTC timezone throughout your application will provide the maximum level of interoperability with other date manipulation libraries written in PHP and JavaScript."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:431
#: ./docs/10.x/eloquent-mutators.md:430
msgctxt "P"
msgid "Eloquent also allows you to cast your attribute values to PHP [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:433
#: ./docs/9.x/eloquent-mutators.md:553
#: ./docs/10.x/eloquent-mutators.md:546
#: ./docs/11.x/eloquent-mutators.md:573
#: ./docs/master/eloquent-mutators.md:573
msgctxt "P"
msgid "Once you have defined a custom cast type, you may attach it to a model attribute using its class name:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:435
#: ./docs/9.x/eloquent-mutators.md:555
#: ./docs/10.x/eloquent-mutators.md:548
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Casts\\Json;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => Json::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:446
msgctxt "P"
msgid "If a custom format is applied to the `date` or `datetime` cast, such as `datetime:Y-m-d H:i:s`, the inner timezone of the Carbon instance will be used during date serialization. Typically, this will be the timezone specified in your application's `timezone` configuration option. However, it's important to note that `timestamp` columns such as `created_at` and `updated_at` are exempt from this behavior and are always formatted in UTC, regardless of the application's timezone setting."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:446
#: ./docs/10.x/eloquent-mutators.md:445
#: ./docs/11.x/eloquent-mutators.md:469
#: ./docs/master/eloquent-mutators.md:469
msgctxt "CODE"
msgid "if ($server->status == ServerStatus::Provisioned) {\n"
"    $server->status = ServerStatus::Ready;\n\n"
"    $server->save();\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:451
#: ./docs/master/eloquent-mutators.md:451
msgctxt "P"
msgid "Eloquent also allows you to cast your attribute values to PHP [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To accomplish this, you may specify the attribute and enum you wish to cast in your model's `casts` method:"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:452
#: ./docs/11.x/eloquent-mutators.md:476
#: ./docs/master/eloquent-mutators.md:476
msgctxt "H4"
msgid "Casting Arrays of Enums"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:452
#: ./docs/10.x/eloquent-mutators.md:451
#: ./docs/11.x/eloquent-mutators.md:475
#: ./docs/master/eloquent-mutators.md:475
#~ msgctxt "P"
#~ msgid "<a name=\"casting-arrays-of-enums\"></a>"
#~ msgstr ""

#: ./docs/11.x/eloquent-mutators.md:453
#: ./docs/master/eloquent-mutators.md:453
msgctxt "CODE"
msgid "use App\\Enums\\ServerStatus;\n\n"
"/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'status' => ServerStatus::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:453
msgctxt "H4"
msgid "Casting Arrays Of Enums"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:454
#: ./docs/9.x/eloquent-mutators.md:574
#: ./docs/10.x/eloquent-mutators.md:567
#: ./docs/11.x/eloquent-mutators.md:597
#: ./docs/master/eloquent-mutators.md:597
#~ msgctxt "P"
#~ msgid "<a name=\"value-object-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:455
#: ./docs/9.x/eloquent-mutators.md:575
#: ./docs/10.x/eloquent-mutators.md:568
#: ./docs/11.x/eloquent-mutators.md:598
#: ./docs/master/eloquent-mutators.md:598
msgctxt "H3"
msgid "Value Object Casting"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:455
#: ./docs/10.x/eloquent-mutators.md:454
#: ./docs/11.x/eloquent-mutators.md:478
#: ./docs/master/eloquent-mutators.md:478
msgctxt "P"
msgid "Sometimes you may need your model to store an array of enum values within a single column. To accomplish this, you may utilize the `AsEnumArrayObject` or `AsEnumCollection` casts provided by Laravel:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:457
#: ./docs/9.x/eloquent-mutators.md:577
#: ./docs/10.x/eloquent-mutators.md:570
#: ./docs/11.x/eloquent-mutators.md:600
#: ./docs/master/eloquent-mutators.md:600
msgctxt "P"
msgid "You are not limited to casting values to primitive types. You may also cast values to objects. Defining custom casts that cast values to objects is very similar to casting to primitive types; however, the `set` method should return an array of key / value pairs that will be used to set raw, storable values on the model."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:457
#: ./docs/10.x/eloquent-mutators.md:456
msgctxt "CODE"
msgid "use App\\Enums\\ServerStatus;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsEnumCollection;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'statuses' => AsEnumCollection::class.':'.ServerStatus::class,\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:459
#: ./docs/9.x/eloquent-mutators.md:579
#: ./docs/10.x/eloquent-mutators.md:572
#: ./docs/11.x/eloquent-mutators.md:602
#: ./docs/master/eloquent-mutators.md:602
msgctxt "P"
msgid "As an example, we will define a custom cast class that casts multiple model values into a single `Address` value object. We will assume the `Address` value has two public properties: `lineOne` and `lineTwo`:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:461
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\Models\\Address as AddressModel;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return \\App\\Models\\Address\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return new AddressModel(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  \\App\\Models\\Address  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        if (! $value instanceof AddressModel) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:476
#: ./docs/10.x/eloquent-mutators.md:475
#: ./docs/11.x/eloquent-mutators.md:502
#: ./docs/master/eloquent-mutators.md:502
#~ msgctxt "P"
#~ msgid "<a name=\"key-rotation\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-mutators.md:477
#: ./docs/10.x/eloquent-mutators.md:476
#: ./docs/11.x/eloquent-mutators.md:503
#: ./docs/master/eloquent-mutators.md:503
msgctxt "H4"
msgid "Key Rotation"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:479
#: ./docs/10.x/eloquent-mutators.md:478
#: ./docs/11.x/eloquent-mutators.md:505
#: ./docs/master/eloquent-mutators.md:505
msgctxt "P"
msgid "As you may know, Laravel encrypts strings using the `key` configuration value specified in your application's `app` configuration file. Typically, this value corresponds to the value of the `APP_KEY` environment variable. If you need to rotate your application's encryption key, you will need to manually re-encrypt your encrypted attributes using the new key."
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:480
#: ./docs/master/eloquent-mutators.md:480
msgctxt "CODE"
msgid "use App\\Enums\\ServerStatus;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsEnumCollection;\n\n"
"/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'statuses' => AsEnumCollection::of(ServerStatus::class),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:508
#: ./docs/10.x/eloquent-mutators.md:507
#: ./docs/11.x/eloquent-mutators.md:534
#: ./docs/master/eloquent-mutators.md:534
msgctxt "P"
msgid "Laravel has a variety of built-in, helpful cast types; however, you may occasionally need to define your own cast types. To create a cast, execute the `make:cast` Artisan command. The new cast class will be placed in your `app/Casts` directory:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:510
#: ./docs/9.x/eloquent-mutators.md:630
#: ./docs/10.x/eloquent-mutators.md:617
#: ./docs/11.x/eloquent-mutators.md:647
#: ./docs/master/eloquent-mutators.md:647
msgctxt "P"
msgid "When casting to value objects, any changes made to the value object will automatically be synced back to the model before the model is saved:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:510
#: ./docs/10.x/eloquent-mutators.md:509
#: ./docs/11.x/eloquent-mutators.md:536
#: ./docs/master/eloquent-mutators.md:536
msgctxt "CODE: shell"
msgid "php artisan make:cast Json"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:512
#: ./docs/9.x/eloquent-mutators.md:632
#: ./docs/10.x/eloquent-mutators.md:619
#: ./docs/11.x/eloquent-mutators.md:649
#: ./docs/master/eloquent-mutators.md:649
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->address->lineOne = 'Updated Address Value';\n\n"
"$user->save();"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:514
#: ./docs/10.x/eloquent-mutators.md:513
#: ./docs/11.x/eloquent-mutators.md:540
#: ./docs/master/eloquent-mutators.md:540
msgctxt "P"
msgid "All custom cast classes implement the `CastsAttributes` interface. Classes that implement this interface must define a `get` and `set` method. The `get` method is responsible for transforming a raw value from the database into a cast value, while the `set` method should transform a cast value into a raw value that can be stored in the database. As an example, we will re-implement the built-in `json` cast type as a custom cast type:"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:515
#: ./docs/11.x/eloquent-mutators.md:542
#: ./docs/master/eloquent-mutators.md:542
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Json implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function get(Model $model, string $key, mixed $value, array $attributes): array\n"
"    {\n"
"        return json_decode($value, true);\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     */\n"
"    public function set(Model $model, string $key, mixed $value, array $attributes): string\n"
"    {\n"
"        return json_encode($value);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:520
#: ./docs/9.x/eloquent-mutators.md:641
#: ./docs/10.x/eloquent-mutators.md:628
#: ./docs/11.x/eloquent-mutators.md:658
#: ./docs/master/eloquent-mutators.md:658
msgctxt "P"
msgid "If you plan to serialize your Eloquent models containing value objects to JSON or arrays, you should implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces on the value object."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:522
#: ./docs/9.x/eloquent-mutators.md:643
#: ./docs/10.x/eloquent-mutators.md:646
#: ./docs/11.x/eloquent-mutators.md:676
#: ./docs/master/eloquent-mutators.md:676
#~ msgctxt "P"
#~ msgid "<a name=\"array-json-serialization\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:523
#: ./docs/9.x/eloquent-mutators.md:644
#: ./docs/10.x/eloquent-mutators.md:647
#: ./docs/11.x/eloquent-mutators.md:677
#: ./docs/master/eloquent-mutators.md:677
msgctxt "H3"
msgid "Array / JSON Serialization"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:525
#: ./docs/9.x/eloquent-mutators.md:646
#: ./docs/10.x/eloquent-mutators.md:649
#: ./docs/11.x/eloquent-mutators.md:679
#: ./docs/master/eloquent-mutators.md:679
msgctxt "P"
msgid "When an Eloquent model is converted to an array or JSON using the `toArray` and `toJson` methods, your custom cast value objects will typically be serialized as well as long as they implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces. However, when using value objects provided by third-party libraries, you may not have the ability to add these interfaces to the object."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:527
#: ./docs/9.x/eloquent-mutators.md:648
#: ./docs/10.x/eloquent-mutators.md:651
#: ./docs/11.x/eloquent-mutators.md:681
#: ./docs/master/eloquent-mutators.md:681
msgctxt "P"
msgid "Therefore, you may specify that your custom cast class will be responsible for serializing the value object. To do so, your custom cast class should implement the `Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes` interface. This interface states that your class should contain a `serialize` method which should return the serialized form of your value object:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:529
#: ./docs/9.x/eloquent-mutators.md:650
msgctxt "CODE"
msgid "/**\n"
" * Get the serialized representation of the value.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
" * @param  string  $key\n"
" * @param  mixed  $value\n"
" * @param  array  $attributes\n"
" * @return mixed\n"
" */\n"
"public function serialize($model, string $key, $value, array $attributes)\n"
"{\n"
"    return (string) $value;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:543
#: ./docs/9.x/eloquent-mutators.md:664
#: ./docs/10.x/eloquent-mutators.md:663
#: ./docs/11.x/eloquent-mutators.md:693
#: ./docs/master/eloquent-mutators.md:693
#~ msgctxt "P"
#~ msgid "<a name=\"inbound-casting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:544
#: ./docs/9.x/eloquent-mutators.md:665
#: ./docs/10.x/eloquent-mutators.md:664
#: ./docs/11.x/eloquent-mutators.md:694
#: ./docs/master/eloquent-mutators.md:694
msgctxt "H3"
msgid "Inbound Casting"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:546
msgctxt "P"
msgid "Occasionally, you may need to write a custom cast that only transforms values that are being set on the model and does not perform any operations when attributes are being retrieved from the model. A classic example of an inbound only cast is a \"hashing\" cast. Inbound only custom casts should implement the `CastsInboundAttributes` interface, which only requires a `set` method to be defined."
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:548
#: ./docs/9.x/eloquent-mutators.md:677
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n\n"
"class Hash implements CastsInboundAttributes\n"
"{\n"
"    /**\n"
"     * The hashing algorithm.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $algorithm;\n\n"
"    /**\n"
"     * Create a new cast class instance.\n"
"     *\n"
"     * @param  string|null  $algorithm\n"
"     * @return void\n"
"     */\n"
"    public function __construct($algorithm = null)\n"
"    {\n"
"        $this->algorithm = $algorithm;\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  array  $value\n"
"     * @param  array  $attributes\n"
"     * @return string\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        return is_null($this->algorithm)\n"
"                    ? bcrypt($value)\n"
"                    : hash($this->algorithm, $value);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:574
#: ./docs/11.x/eloquent-mutators.md:604
#: ./docs/master/eloquent-mutators.md:604
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\ValueObjects\\Address as AddressValueObject;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     */\n"
"    public function get(Model $model, string $key, mixed $value, array $attributes): AddressValueObject\n"
"    {\n"
"        return new AddressValueObject(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     * @return array<string, string>\n"
"     */\n"
"    public function set(Model $model, string $key, mixed $value, array $attributes): array\n"
"    {\n"
"        if (! $value instanceof AddressValueObject) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:575
#: ./docs/master/eloquent-mutators.md:575
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Casts\\Json;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the attributes that should be cast.\n"
"     *\n"
"     * @return array<string, string>\n"
"     */\n"
"    protected function casts(): array\n"
"    {\n"
"        return [\n"
"            'options' => Json::class,\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:581
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\ValueObjects\\Address as AddressValueObject;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return \\App\\ValueObjects\\Address\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return new AddressValueObject(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  \\App\\ValueObjects\\Address  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        if (! $value instanceof AddressValueObject) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:591
#: ./docs/9.x/eloquent-mutators.md:720
#: ./docs/10.x/eloquent-mutators.md:705
#: ./docs/11.x/eloquent-mutators.md:735
#: ./docs/master/eloquent-mutators.md:735
#~ msgctxt "P"
#~ msgid "<a name=\"cast-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:592
#: ./docs/9.x/eloquent-mutators.md:721
#: ./docs/10.x/eloquent-mutators.md:706
#: ./docs/11.x/eloquent-mutators.md:736
#: ./docs/master/eloquent-mutators.md:736
msgctxt "H3"
msgid "Cast Parameters"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:594
#: ./docs/9.x/eloquent-mutators.md:723
#: ./docs/10.x/eloquent-mutators.md:708
#: ./docs/11.x/eloquent-mutators.md:738
#: ./docs/master/eloquent-mutators.md:738
msgctxt "P"
msgid "When attaching a custom cast to a model, cast parameters may be specified by separating them from the class name using a `:` character and comma-delimiting multiple parameters. The parameters will be passed to the constructor of the cast class:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:596
#: ./docs/9.x/eloquent-mutators.md:725
#: ./docs/10.x/eloquent-mutators.md:710
msgctxt "CODE"
msgid "/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'secret' => Hash::class.':sha256',\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:605
#: ./docs/9.x/eloquent-mutators.md:734
#: ./docs/10.x/eloquent-mutators.md:719
#: ./docs/11.x/eloquent-mutators.md:752
#: ./docs/master/eloquent-mutators.md:752
#~ msgctxt "P"
#~ msgid "<a name=\"castables\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:606
#: ./docs/9.x/eloquent-mutators.md:735
#: ./docs/10.x/eloquent-mutators.md:720
#: ./docs/11.x/eloquent-mutators.md:753
#: ./docs/master/eloquent-mutators.md:753
msgctxt "H3"
msgid "Castables"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:608
#: ./docs/9.x/eloquent-mutators.md:737
#: ./docs/10.x/eloquent-mutators.md:722
#: ./docs/11.x/eloquent-mutators.md:755
#: ./docs/master/eloquent-mutators.md:755
msgctxt "P"
msgid "You may want to allow your application's value objects to define their own custom cast classes. Instead of attaching the custom cast class to your model, you may alternatively attach a value object class that implements the `Illuminate\\Contracts\\Database\\Eloquent\\Castable` interface:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:610
#: ./docs/9.x/eloquent-mutators.md:739
msgctxt "CODE"
msgid "use App\\Models\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class,\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:616
#: ./docs/9.x/eloquent-mutators.md:745
#: ./docs/10.x/eloquent-mutators.md:730
#: ./docs/11.x/eloquent-mutators.md:766
#: ./docs/master/eloquent-mutators.md:766
msgctxt "P"
msgid "Objects that implement the `Castable` interface must define a `castUsing` method that returns the class name of the custom caster class that is responsible for casting to and from the `Castable` class:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:618
#: ./docs/9.x/eloquent-mutators.md:747
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use App\\Casts\\Address as AddressCast;\n\n"
"class Address implements Castable\n"
"{\n"
"    /**\n"
"     * Get the name of the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array  $arguments\n"
"     * @return string\n"
"     */\n"
"    public static function castUsing(array $arguments)\n"
"    {\n"
"        return AddressCast::class;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:630
#: ./docs/11.x/eloquent-mutators.md:660
#: ./docs/master/eloquent-mutators.md:660
#~ msgctxt "P"
#~ msgid "<a name=\"value-object-caching\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-mutators.md:631
#: ./docs/11.x/eloquent-mutators.md:661
#: ./docs/master/eloquent-mutators.md:661
msgctxt "H4"
msgid "Value Object Caching"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:633
#: ./docs/11.x/eloquent-mutators.md:663
#: ./docs/master/eloquent-mutators.md:663
msgctxt "P"
msgid "When attributes that are cast to value objects are resolved, they are cached by Eloquent. Therefore, the same object instance will be returned if the attribute is accessed again."
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:635
#: ./docs/11.x/eloquent-mutators.md:665
#: ./docs/master/eloquent-mutators.md:665
msgctxt "P"
msgid "If you would like to disable the object caching behavior of custom cast classes, you may declare a public `withoutObjectCaching` property on your custom cast class:"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:637
#: ./docs/11.x/eloquent-mutators.md:667
#: ./docs/master/eloquent-mutators.md:667
msgctxt "CODE: php"
msgid "class Address implements CastsAttributes\n"
"{\n"
"    public bool $withoutObjectCaching = true;\n\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:639
#: ./docs/9.x/eloquent-mutators.md:768
#: ./docs/10.x/eloquent-mutators.md:752
msgctxt "P"
msgid "When using `Castable` classes, you may still provide arguments in the `$casts` definition. The arguments will be passed to the `castUsing` method:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:641
#: ./docs/9.x/eloquent-mutators.md:770
msgctxt "CODE"
msgid "use App\\Models\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class.':argument',\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:647
#: ./docs/9.x/eloquent-mutators.md:776
#: ./docs/10.x/eloquent-mutators.md:760
#: ./docs/11.x/eloquent-mutators.md:799
#: ./docs/master/eloquent-mutators.md:799
#~ msgctxt "P"
#~ msgid "<a name=\"anonymous-cast-classes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-mutators.md:648
#: ./docs/9.x/eloquent-mutators.md:777
#: ./docs/10.x/eloquent-mutators.md:761
#: ./docs/11.x/eloquent-mutators.md:800
#: ./docs/master/eloquent-mutators.md:800
msgctxt "H4"
msgid "Castables & Anonymous Cast Classes"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:650
#: ./docs/9.x/eloquent-mutators.md:779
#: ./docs/10.x/eloquent-mutators.md:763
#: ./docs/11.x/eloquent-mutators.md:802
#: ./docs/master/eloquent-mutators.md:802
msgctxt "P"
msgid "By combining \"castables\" with PHP's [anonymous classes](https://www.php.net/manual/en/language.oop5.anonymous.php), you may define a value object and its casting logic as a single castable object. To accomplish this, return an anonymous class from your value object's `castUsing` method. The anonymous class should implement the `CastsAttributes` interface:"
msgstr ""

#: ./docs/8.x/eloquent-mutators.md:652
#: ./docs/9.x/eloquent-mutators.md:781
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Address implements Castable\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array  $arguments\n"
"     * @return object|string\n"
"     */\n"
"    public static function castUsing(array $arguments)\n"
"    {\n"
"        return new class implements CastsAttributes\n"
"        {\n"
"            public function get($model, $key, $value, $attributes)\n"
"            {\n"
"                return new Address(\n"
"                    $attributes['address_line_one'],\n"
"                    $attributes['address_line_two']\n"
"                );\n"
"            }\n\n"
"            public function set($model, $key, $value, $attributes)\n"
"            {\n"
"                return [\n"
"                    'address_line_one' => $value->lineOne,\n"
"                    'address_line_two' => $value->lineTwo,\n"
"                ];\n"
"            }\n"
"        };\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:653
#: ./docs/11.x/eloquent-mutators.md:683
#: ./docs/master/eloquent-mutators.md:683
msgctxt "CODE"
msgid "/**\n"
" * Get the serialized representation of the value.\n"
" *\n"
" * @param  array<string, mixed>  $attributes\n"
" */\n"
"public function serialize(Model $model, string $key, mixed $value, array $attributes): string\n"
"{\n"
"    return (string) $value;\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:667
#: ./docs/10.x/eloquent-mutators.md:666
#: ./docs/11.x/eloquent-mutators.md:696
#: ./docs/master/eloquent-mutators.md:696
msgctxt "P"
msgid "Occasionally, you may need to write a custom cast class that only transforms values that are being set on the model and does not perform any operations when attributes are being retrieved from the model."
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:669
#: ./docs/10.x/eloquent-mutators.md:668
#: ./docs/11.x/eloquent-mutators.md:698
#: ./docs/master/eloquent-mutators.md:698
msgctxt "P"
msgid "Inbound only custom casts should implement the `CastsInboundAttributes` interface, which only requires a `set` method to be defined. The `make:cast` Artisan command may be invoked with the `--inbound` option to generate an inbound only cast class:"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:671
#: ./docs/10.x/eloquent-mutators.md:670
#: ./docs/11.x/eloquent-mutators.md:700
#: ./docs/master/eloquent-mutators.md:700
msgctxt "CODE: shell"
msgid "php artisan make:cast Hash --inbound"
msgstr ""

#: ./docs/9.x/eloquent-mutators.md:675
#: ./docs/10.x/eloquent-mutators.md:674
#: ./docs/11.x/eloquent-mutators.md:704
#: ./docs/master/eloquent-mutators.md:704
msgctxt "P"
msgid "A classic example of an inbound only cast is a \"hashing\" cast. For example, we may define a cast that hashes inbound values via a given algorithm:"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:676
#: ./docs/11.x/eloquent-mutators.md:706
#: ./docs/master/eloquent-mutators.md:706
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Hash implements CastsInboundAttributes\n"
"{\n"
"    /**\n"
"     * Create a new cast class instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected string|null $algorithm = null,\n"
"    ) {}\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     */\n"
"    public function set(Model $model, string $key, mixed $value, array $attributes): string\n"
"    {\n"
"        return is_null($this->algorithm)\n"
"                    ? bcrypt($value)\n"
"                    : hash($this->algorithm, $value);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:724
msgctxt "CODE"
msgid "use App\\ValueObjects\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class,\n"
"];"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:732
#: ./docs/11.x/eloquent-mutators.md:768
#: ./docs/master/eloquent-mutators.md:768
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\ValueObjects;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use App\\Casts\\Address as AddressCast;\n\n"
"class Address implements Castable\n"
"{\n"
"    /**\n"
"     * Get the name of the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array<string, mixed>  $arguments\n"
"     */\n"
"    public static function castUsing(array $arguments): string\n"
"    {\n"
"        return AddressCast::class;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:740
#: ./docs/master/eloquent-mutators.md:740
msgctxt "CODE"
msgid "/**\n"
" * Get the attributes that should be cast.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'secret' => Hash::class.':sha256',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:754
msgctxt "CODE"
msgid "use App\\ValueObjects\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class.':argument',\n"
"];"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:757
#: ./docs/master/eloquent-mutators.md:757
msgctxt "CODE"
msgid "use App\\ValueObjects\\Address;\n\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'address' => Address::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-mutators.md:765
#: ./docs/11.x/eloquent-mutators.md:804
#: ./docs/master/eloquent-mutators.md:804
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\ValueObjects;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Address implements Castable\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array<string, mixed>  $arguments\n"
"     */\n"
"    public static function castUsing(array $arguments): CastsAttributes\n"
"    {\n"
"        return new class implements CastsAttributes\n"
"        {\n"
"            public function get(Model $model, string $key, mixed $value, array $attributes): Address\n"
"            {\n"
"                return new Address(\n"
"                    $attributes['address_line_one'],\n"
"                    $attributes['address_line_two']\n"
"                );\n"
"            }\n\n"
"            public function set(Model $model, string $key, mixed $value, array $attributes): array\n"
"            {\n"
"                return [\n"
"                    'address_line_one' => $value->lineOne,\n"
"                    'address_line_two' => $value->lineTwo,\n"
"                ];\n"
"            }\n"
"        };\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:788
#: ./docs/master/eloquent-mutators.md:788
msgctxt "P"
msgid "When using `Castable` classes, you may still provide arguments in the `casts` method definition. The arguments will be passed to the `castUsing` method:"
msgstr ""

#: ./docs/11.x/eloquent-mutators.md:790
#: ./docs/master/eloquent-mutators.md:790
msgctxt "CODE"
msgid "use App\\ValueObjects\\Address;\n\n"
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'address' => Address::class.':argument',\n"
"    ];\n"
"}"
msgstr ""

