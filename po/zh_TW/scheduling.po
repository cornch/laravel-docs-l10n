msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/scheduling.pot\n"
"X-Crowdin-File-ID: 147\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-03-07 08:03\n"

#: docs/8.x/scheduling.md:block 1 (header)
msgid "Task Scheduling"
msgstr "任務排程"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Defining Schedules](#defining-schedules)"
msgstr "[定義排程](#defining-schedules)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Scheduling Artisan Commands](#scheduling-artisan-commands)"
msgstr "[排程執行 Artisan 指令](#scheduling-artisan-commands)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Scheduling Queued Jobs](#scheduling-queued-jobs)"
msgstr "[排程執行放入佇列的 Job](#scheduling-queued-jobs)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Scheduling Shell Commands](#scheduling-shell-commands)"
msgstr "[排程執行 Shell 指令](#scheduling-shell-commands)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Schedule Frequency Options](#schedule-frequency-options)"
msgstr "[排程的頻率選項](#schedule-frequency-options)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Timezones](#timezones)"
msgstr "[時區](#timezones)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Preventing Task Overlaps](#preventing-task-overlaps)"
msgstr "[防止排程任務重疊](#preventing-task-overlaps)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Running Tasks On One Server](#running-tasks-on-one-server)"
msgstr "[在單一伺服器上執行任務](#running-tasks-on-one-server)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Background Tasks](#background-tasks)"
msgstr "[背景任務](#background-tasks)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Maintenance Mode](#maintenance-mode)"
msgstr "[維護模式](#maintenance-mode)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Running The Scheduler](#running-the-scheduler)"
msgstr "[執行排程程式](#running-the-scheduler)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Running The Scheduler Locally](#running-the-scheduler-locally)"
msgstr "[在本機上執行排程程式](#running-the-scheduler-locally)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Task Output](#task-output)"
msgstr "[任務的輸出](#task-output)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Task Hooks](#task-hooks)"
msgstr "[任務的 Hook](#task-hooks)"

#: docs/8.x/scheduling.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr "[事件](#events)"

#: docs/8.x/scheduling.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/scheduling.md:block 5 (paragraph)
msgid "In the past, you may have written a cron configuration entry for each task you needed to schedule on your server. However, this can quickly become a pain because your task schedule is no longer in source control and you must SSH into your server to view your existing cron entries or add additional entries."
msgstr "以前，我們需要在伺服器上為每個需要排程執行的任務撰寫 Cron 設定。不過，手動設定 Cron 很快就會變得很麻煩，因為這些排程任務不在版本控制裡面，而且我們必須要 SSH 連進伺服器上才能檢視現有的 Cron 項目以及新增新項目。"

#: docs/8.x/scheduling.md:block 6 (paragraph)
msgid "Laravel's command scheduler offers a fresh approach to managing scheduled tasks on your server. The scheduler allows you to fluently and expressively define your command schedule within your Laravel application itself. When using the scheduler, only a single cron entry is needed on your server. Your task schedule is defined in the `app/Console/Kernel.php` file's `schedule` method. To help you get started, a simple example is defined within the method."
msgstr "Laravel 的^[指令排程程式](Command Scheduler)提供了一種全新的方法來在伺服器上管理排程任務。Laravel 的排程程式能讓我們使用流暢與表達性的方法來在 Laravel 專案中定義指令排程。使用 Laravel 的排程程式時，我們只需要在伺服器上設定一個 Cron 項目即可。任務的排程定義在 `app/Console/Kernel.php` 檔案的 `schedule` 方法內。在該方法中已經有定義好了一個簡單的範例設定，可幫助讀者入門。"

#: docs/8.x/scheduling.md:block 8 (header)
msgid "Defining Schedules"
msgstr "定義排程"

#: docs/8.x/scheduling.md:block 9 (paragraph)
msgid "You may define all of your scheduled tasks in the `schedule` method of your application's `App\\Console\\Kernel` class. To get started, let's take a look at an example. In this example, we will schedule a closure to be called every day at midnight. Within the closure we will execute a database query to clear a table:"
msgstr "我們可以在專案的 `App\\Console\\Kernel` 類別中 `schedule` 方法內定義所有的排程任務。我們先來看一個入門的範例。在這個範例中，我們會排程在每天午夜呼叫一個閉包。在這個閉包中，我們執行一條資料庫查詢來清除資料表："

#: docs/8.x/scheduling.md:block 10 (code)
msgid "<?php\n\n"
"namespace App\\Console;\n\n"
"use Illuminate\\Console\\Scheduling\\Schedule;\n"
"use Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n"
"use Illuminate\\Support\\Facades\\DB;\n\n"
"class Kernel extends ConsoleKernel\n"
"{\n"
"    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->call(function () {\n"
"            DB::table('recent_users')->delete();\n"
"        })->daily();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Console;\n\n"
"use Illuminate\\Console\\Scheduling\\Schedule;\n"
"use Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n"
"use Illuminate\\Support\\Facades\\DB;\n\n"
"class Kernel extends ConsoleKernel\n"
"{\n"
"    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->call(function () {\n"
"            DB::table('recent_users')->delete();\n"
"        })->daily();\n"
"    }\n"
"}\n"

#: docs/8.x/scheduling.md:block 11 (paragraph)
msgid "In addition to scheduling using closures, you may also schedule [invokable objects](https://secure.php.net/manual/en/language.oop5.magic.php#object.invoke). Invokable objects are simple PHP classes that contain an `__invoke` method:"
msgstr "除了使用閉包來排程以外，也可以排程執行 [可 Invoke 的物件](https://secure.php.net/manual/en/language.oop5.magic.php#object.invoke)。可 Invoke 的物件只是一個包含 `__invoke` 方法的普通 PHP 類別："

#: docs/8.x/scheduling.md:block 12 (code)
msgid "$schedule->call(new DeleteRecentUsers)->daily();\n"
msgstr "$schedule->call(new DeleteRecentUsers)->daily();\n"

#: docs/8.x/scheduling.md:block 13 (paragraph)
msgid "If you would like to view an overview of your scheduled tasks and the next time they are scheduled to run, you may use the `schedule:list` Artisan command:"
msgstr "若想檢視目前排程任務的概覽，以及各個任務下次排定的執行時間，可使用 `schedule:list` Artisan 指令："

#: docs/8.x/scheduling.md:block 14 (code)
msgid "php artisan schedule:list\n"
msgstr "php artisan schedule:list\n"

#: docs/8.x/scheduling.md:block 16 (header)
msgid "Scheduling Artisan Commands"
msgstr "排程執行 Artisan 指令"

#: docs/8.x/scheduling.md:block 17 (paragraph)
msgid "In addition to scheduling closures, you may also schedule [Artisan commands](/docs/{{version}}/artisan) and system commands. For example, you may use the `command` method to schedule an Artisan command using either the command's name or class."
msgstr "除了排程執行閉包外，也可以排程執行 [Artisan 指令](/docs/{{version}}/artisan)與系統指令。舉例來說，我們可以使用 `command` 方法來使用指令的名稱或類別名稱來排程執行 Artisan 指令。"

#: docs/8.x/scheduling.md:block 18 (paragraph)
msgid "When scheduling Artisan commands using the command's class name, you may pass an array of additional command-line arguments that should be provided to the command when it is invoked:"
msgstr "若使用指令的類別名稱來排程執行 Artisan 指令時，可傳入一組包含額外指令列引數的陣列，在叫用該指令時會提供這些引數："

#: docs/8.x/scheduling.md:block 19 (code)
msgid "use App\\Console\\Commands\\SendEmailsCommand;\n\n"
"$schedule->command('emails:send Taylor --force')->daily();\n\n"
"$schedule->command(SendEmailsCommand::class, ['Taylor', '--force'])->daily();\n"
msgstr "use App\\Console\\Commands\\SendEmailsCommand;\n\n"
"$schedule->command('emails:send Taylor --force')->daily();\n\n"
"$schedule->command(SendEmailsCommand::class, ['Taylor', '--force'])->daily();\n"

#: docs/8.x/scheduling.md:block 21 (header)
msgid "Scheduling Queued Jobs"
msgstr "排程執行放入佇列的 Job"

#: docs/8.x/scheduling.md:block 22 (paragraph)
msgid "The `job` method may be used to schedule a [queued job](/docs/{{version}}/queues). This method provides a convenient way to schedule queued jobs without using the `call` method to define closures to queue the job:"
msgstr "可使用 `job` 方法來排程執行[放入佇列的 Job](/docs/{{version}}/queues)。該方法提供了一個方便的方法能讓我們能排程執行放入佇列的 Job，而不需使用 `call` 方法來定義將該 Job 放入佇列的閉包："

#: docs/8.x/scheduling.md:block 23 (code)
msgid "use App\\Jobs\\Heartbeat;\n\n"
"$schedule->job(new Heartbeat)->everyFiveMinutes();\n"
msgstr "use App\\Jobs\\Heartbeat;\n\n"
"$schedule->job(new Heartbeat)->everyFiveMinutes();\n"

#: docs/8.x/scheduling.md:block 24 (paragraph)
msgid "Optional second and third arguments may be provided to the `job` method which specifies the queue name and queue connection that should be used to queue the job:"
msgstr "`job` 還有可選的第二個引數與第三個引數，可用來指定該 Job 要使用的佇列名稱與佇列連線："

#: docs/8.x/scheduling.md:block 25 (code)
msgid "use App\\Jobs\\Heartbeat;\n\n"
"// Dispatch the job to the \"heartbeats\" queue on the \"sqs\" connection...\n"
"$schedule->job(new Heartbeat, 'heartbeats', 'sqs')->everyFiveMinutes();\n"
msgstr "use App\\Jobs\\Heartbeat;\n\n"
"// 將該 Job 分派進「sqs」連線中的「heartbeats」佇列...\n"
"$schedule->job(new Heartbeat, 'heartbeats', 'sqs')->everyFiveMinutes();\n"

#: docs/8.x/scheduling.md:block 27 (header)
msgid "Scheduling Shell Commands"
msgstr "排程執行 Shell 指令"

#: docs/8.x/scheduling.md:block 28 (paragraph)
msgid "The `exec` method may be used to issue a command to the operating system:"
msgstr "可使用 `exec` 指令來在作業系統上執行指令："

#: docs/8.x/scheduling.md:block 29 (code)
msgid "$schedule->exec('node /home/forge/script.js')->daily();\n"
msgstr "$schedule->exec('node /home/forge/script.js')->daily();\n"

#: docs/8.x/scheduling.md:block 31 (header)
msgid "Schedule Frequency Options"
msgstr "排程的頻率選項"

#: docs/8.x/scheduling.md:block 32 (paragraph)
msgid "We've already seen a few examples of how you may configure a task to run at specified intervals. However, there are many more task schedule frequencies that you may assign to a task:"
msgstr "我們已經看到了一些在指定間隔間執行任務的範例。不過，還有其他許多用來指派給任務的排程頻率："

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Method"
msgstr "方法"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Description"
msgstr "說明"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->cron('* * * * *');`"
msgstr "`->cron('* * * * *');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task on a custom cron schedule"
msgstr "在自定的 Cron 排程上執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyMinute();`"
msgstr "`->everyMinute();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every minute"
msgstr "每分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyTwoMinutes();`"
msgstr "`->everyTwoMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every two minutes"
msgstr "每 2 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyThreeMinutes();`"
msgstr "`->everyThreeMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every three minutes"
msgstr "每 3 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyFourMinutes();`"
msgstr "`->everyFourMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every four minutes"
msgstr "每 4 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyFiveMinutes();`"
msgstr "`->everyFiveMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every five minutes"
msgstr "每 5 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyTenMinutes();`"
msgstr "`->everyTenMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every ten minutes"
msgstr "每 10 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyFifteenMinutes();`"
msgstr "`->everyFifteenMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every fifteen minutes"
msgstr "每 15 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyThirtyMinutes();`"
msgstr "`->everyThirtyMinutes();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every thirty minutes"
msgstr "每 30 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->hourly();`"
msgstr "`->hourly();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every hour"
msgstr "每小時執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->hourlyAt(17);`"
msgstr "`->hourlyAt(17);`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every hour at 17 minutes past the hour"
msgstr "每小時的第 17 分鐘執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyTwoHours();`"
msgstr "`->everyTwoHours();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every two hours"
msgstr "每 2 小時執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyThreeHours();`"
msgstr "`->everyThreeHours();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every three hours"
msgstr "每 3 小時執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everyFourHours();`"
msgstr "`->everyFourHours();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every four hours"
msgstr "每 4 小時執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->everySixHours();`"
msgstr "`->everySixHours();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every six hours"
msgstr "每 6 小時執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->daily();`"
msgstr "`->daily();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every day at midnight"
msgstr "每當午夜時執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->dailyAt('13:00');`"
msgstr "`->dailyAt('13:00');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every day at 13:00"
msgstr "每天 13:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->twiceDaily(1, 13);`"
msgstr "`->twiceDaily(1, 13);`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task daily at 1:00 & 13:00"
msgstr "每天的 1:00 與 13:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->weekly();`"
msgstr "`->weekly();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every Sunday at 00:00"
msgstr "每週日 00:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->weeklyOn(1, '8:00');`"
msgstr "`->weeklyOn(1, '8:00');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every week on Monday at 8:00"
msgstr "每週一 8:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->monthly();`"
msgstr "`->monthly();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task on the first day of every month at 00:00"
msgstr "每月 1 號的 00:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->monthlyOn(4, '15:00');`"
msgstr "`->monthlyOn(4, '15:00');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every month on the 4th at 15:00"
msgstr "每個月 4 號的 15:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->twiceMonthly(1, 16, '13:00');`"
msgstr "`->twiceMonthly(1, 16, '13:00');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task monthly on the 1st and 16th at 13:00"
msgstr "每個月的 1 號與 16 號的 13:00 執行任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->lastDayOfMonth('15:00');`"
msgstr "`->lastDayOfMonth('15:00');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task on the last day of the month at 15:00"
msgstr "每個月最後一天的 15:00 執行該任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->quarterly();`"
msgstr "`->quarterly();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task on the first day of every quarter at 00:00"
msgstr "每一季第一天的 00:00 執行該任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->yearly();`"
msgstr "`->yearly();`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task on the first day of every year at 00:00"
msgstr "每年第一天的 00:00 執行該任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->yearlyOn(6, 1, '17:00');`"
msgstr "`->yearlyOn(6, 1, '17:00');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Run the task every year on June 1st at 17:00"
msgstr "每年 6 月 1 日的 17:00 執行該任務"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "`->timezone('America/New_York');`"
msgstr "`->timezone('America/New_York');`"

#: docs/8.x/scheduling.md:block 33 (table)
msgid "Set the timezone for the task"
msgstr "為給任務設定時區"

#: docs/8.x/scheduling.md:block 34 (paragraph)
msgid "These methods may be combined with additional constraints to create even more finely tuned schedules that only run on certain days of the week. For example, you may schedule a command to run weekly on Monday:"
msgstr "可以組合使用這些方法來增加額外的條件限制，以設定更精確的排程，如在每週某日時執行任務。舉例來說，我們可以排程每週一執行某個指令："

#: docs/8.x/scheduling.md:block 35 (code)
msgid "// Run once per week on Monday at 1 PM...\n"
"$schedule->call(function () {\n"
"    //\n"
"})->weekly()->mondays()->at('13:00');\n\n"
"// Run hourly from 8 AM to 5 PM on weekdays...\n"
"$schedule->command('foo')\n"
"          ->weekdays()\n"
"          ->hourly()\n"
"          ->timezone('America/Chicago')\n"
"          ->between('8:00', '17:00');\n"
msgstr "// 每週一下午 1 點執行...\n"
"$schedule->call(function () {\n"
"    //\n"
"})->weekly()->mondays()->at('13:00');\n\n"
"// 工作天的上午 8 點至下午 5 點間每小時執行...\n"
"$schedule->command('foo')\n"
"          ->weekdays()\n"
"          ->hourly()\n"
"          ->timezone('America/Chicago')\n"
"          ->between('8:00', '17:00');\n"

#: docs/8.x/scheduling.md:block 36 (paragraph)
msgid "A list of additional schedule constraints may be found below:"
msgstr "下表中列出了其他額外的排程條件限制："

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->weekdays();`"
msgstr "`->weekdays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to weekdays"
msgstr "顯示該任務只在工作日執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->weekends();`"
msgstr "`->weekends();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to weekends"
msgstr "顯示該任務只在假日執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->sundays();`"
msgstr "`->sundays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Sunday"
msgstr "顯示該任務只在週日執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->mondays();`"
msgstr "`->mondays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Monday"
msgstr "顯示該任務只在週一執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->tuesdays();`"
msgstr "`->tuesdays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Tuesday"
msgstr "顯示該任務只在週二執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->wednesdays();`"
msgstr "`->wednesdays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Wednesday"
msgstr "顯示該任務只在週三執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->thursdays();`"
msgstr "`->thursdays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Thursday"
msgstr "顯示該任務只在週四執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->fridays();`"
msgstr "`->fridays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Friday"
msgstr "顯示該任務只在週五執行"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->saturdays();`"
msgstr "`->saturdays();`"

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to Saturday"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->days(array\\|mixed);`"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to specific days"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->between($startTime, $endTime);`"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to run between start and end times"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->unlessBetween($startTime, $endTime);`"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to not run between start and end times"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->when(Closure);`"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task based on a truth test"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "`->environments($env);`"
msgstr ""

#: docs/8.x/scheduling.md:block 37 (table)
msgid "Limit the task to specific environments"
msgstr ""

#: docs/8.x/scheduling.md:block 39 (header)
msgid "Day Constraints"
msgstr ""

#: docs/8.x/scheduling.md:block 40 (paragraph)
msgid "The `days` method may be used to limit the execution of a task to specific days of the week. For example, you may schedule a command to run hourly on Sundays and Wednesdays:"
msgstr ""

#: docs/8.x/scheduling.md:block 41 (code)
msgid "$schedule->command('emails:send')\n"
"                ->hourly()\n"
"                ->days([0, 3]);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 42 (paragraph)
msgid "Alternatively, you may use the constants available on the `Illuminate\\Console\\Scheduling\\Schedule` class when defining the days on which a task should run:"
msgstr ""

#: docs/8.x/scheduling.md:block 43 (code)
msgid "use Illuminate\\Console\\Scheduling\\Schedule;\n\n"
"$schedule->command('emails:send')\n"
"                ->hourly()\n"
"                ->days([Schedule::SUNDAY, Schedule::WEDNESDAY]);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 45 (header)
msgid "Between Time Constraints"
msgstr ""

#: docs/8.x/scheduling.md:block 46 (paragraph)
msgid "The `between` method may be used to limit the execution of a task based on the time of day:"
msgstr ""

#: docs/8.x/scheduling.md:block 47 (code)
msgid "$schedule->command('emails:send')\n"
"                    ->hourly()\n"
"                    ->between('7:00', '22:00');\n"
msgstr ""

#: docs/8.x/scheduling.md:block 48 (paragraph)
msgid "Similarly, the `unlessBetween` method can be used to exclude the execution of a task for a period of time:"
msgstr ""

#: docs/8.x/scheduling.md:block 49 (code)
msgid "$schedule->command('emails:send')\n"
"                    ->hourly()\n"
"                    ->unlessBetween('23:00', '4:00');\n"
msgstr ""

#: docs/8.x/scheduling.md:block 51 (header)
msgid "Truth Test Constraints"
msgstr ""

#: docs/8.x/scheduling.md:block 52 (paragraph)
msgid "The `when` method may be used to limit the execution of a task based on the result of a given truth test. In other words, if the given closure returns `true`, the task will execute as long as no other constraining conditions prevent the task from running:"
msgstr ""

#: docs/8.x/scheduling.md:block 53 (code)
msgid "$schedule->command('emails:send')->daily()->when(function () {\n"
"    return true;\n"
"});\n"
msgstr ""

#: docs/8.x/scheduling.md:block 54 (paragraph)
msgid "The `skip` method may be seen as the inverse of `when`. If the `skip` method returns `true`, the scheduled task will not be executed:"
msgstr ""

#: docs/8.x/scheduling.md:block 55 (code)
msgid "$schedule->command('emails:send')->daily()->skip(function () {\n"
"    return true;\n"
"});\n"
msgstr ""

#: docs/8.x/scheduling.md:block 56 (paragraph)
msgid "When using chained `when` methods, the scheduled command will only execute if all `when` conditions return `true`."
msgstr ""

#: docs/8.x/scheduling.md:block 58 (header)
msgid "Environment Constraints"
msgstr ""

#: docs/8.x/scheduling.md:block 59 (paragraph)
msgid "The `environments` method may be used to execute tasks only on the given environments (as defined by the `APP_ENV` [environment variable](/docs/{{version}}/configuration#environment-configuration)):"
msgstr ""

#: docs/8.x/scheduling.md:block 60 (code)
msgid "$schedule->command('emails:send')\n"
"            ->daily()\n"
"            ->environments(['staging', 'production']);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 62 (header)
msgid "Timezones"
msgstr ""

#: docs/8.x/scheduling.md:block 63 (paragraph)
msgid "Using the `timezone` method, you may specify that a scheduled task's time should be interpreted within a given timezone:"
msgstr ""

#: docs/8.x/scheduling.md:block 64 (code)
msgid "$schedule->command('report:generate')\n"
"         ->timezone('America/New_York')\n"
"         ->at('2:00')\n"
msgstr ""

#: docs/8.x/scheduling.md:block 65 (paragraph)
msgid "If you are repeatedly assigning the same timezone to all of your scheduled tasks, you may wish to define a `scheduleTimezone` method in your `App\\Console\\Kernel` class. This method should return the default timezone that should be assigned to all scheduled tasks:"
msgstr ""

#: docs/8.x/scheduling.md:block 66 (code)
msgid "/**\n"
" * Get the timezone that should be used by default for scheduled events.\n"
" *\n"
" * @return \\DateTimeZone|string|null\n"
" */\n"
"protected function scheduleTimezone()\n"
"{\n"
"    return 'America/Chicago';\n"
"}\n"
msgstr ""

#: docs/8.x/scheduling.md:block 67 (quote)
msgid "{note} Remember that some timezones utilize daylight savings time. When daylight saving time changes occur, your scheduled task may run twice or even not run at all. For this reason, we recommend avoiding timezone scheduling when possible."
msgstr ""

#: docs/8.x/scheduling.md:block 69 (header)
msgid "Preventing Task Overlaps"
msgstr ""

#: docs/8.x/scheduling.md:block 70 (paragraph)
msgid "By default, scheduled tasks will be run even if the previous instance of the task is still running. To prevent this, you may use the `withoutOverlapping` method:"
msgstr ""

#: docs/8.x/scheduling.md:block 71 (code)
msgid "$schedule->command('emails:send')->withoutOverlapping();\n"
msgstr ""

#: docs/8.x/scheduling.md:block 72 (paragraph)
msgid "In this example, the `emails:send` [Artisan command](/docs/{{version}}/artisan) will be run every minute if it is not already running. The `withoutOverlapping` method is especially useful if you have tasks that vary drastically in their execution time, preventing you from predicting exactly how long a given task will take."
msgstr ""

#: docs/8.x/scheduling.md:block 73 (paragraph)
msgid "If needed, you may specify how many minutes must pass before the \"without overlapping\" lock expires. By default, the lock will expire after 24 hours:"
msgstr ""

#: docs/8.x/scheduling.md:block 74 (code)
msgid "$schedule->command('emails:send')->withoutOverlapping(10);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 76 (header)
msgid "Running Tasks On One Server"
msgstr ""

#: docs/8.x/scheduling.md:block 77 (quote)
msgid "{note} To utilize this feature, your application must be using the `database`, `memcached`, `dynamodb`, or `redis` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server."
msgstr ""

#: docs/8.x/scheduling.md:block 78 (paragraph)
msgid "If your application's scheduler is running on multiple servers, you may limit a scheduled job to only execute on a single server. For instance, assume you have a scheduled task that generates a new report every Friday night. If the task scheduler is running on three worker servers, the scheduled task will run on all three servers and generate the report three times. Not good!"
msgstr ""

#: docs/8.x/scheduling.md:block 79 (paragraph)
msgid "To indicate that the task should run on only one server, use the `onOneServer` method when defining the scheduled task. The first server to obtain the task will secure an atomic lock on the job to prevent other servers from running the same task at the same time:"
msgstr ""

#: docs/8.x/scheduling.md:block 80 (code)
msgid "$schedule->command('report:generate')\n"
"                ->fridays()\n"
"                ->at('17:00')\n"
"                ->onOneServer();\n"
msgstr ""

#: docs/8.x/scheduling.md:block 82 (header)
msgid "Background Tasks"
msgstr ""

#: docs/8.x/scheduling.md:block 83 (paragraph)
msgid "By default, multiple tasks scheduled at the same time will execute sequentially based on the order they are defined in your `schedule` method. If you have long-running tasks, this may cause subsequent tasks to start much later than anticipated. If you would like to run tasks in the background so that they may all run simultaneously, you may use the `runInBackground` method:"
msgstr ""

#: docs/8.x/scheduling.md:block 84 (code)
msgid "$schedule->command('analytics:report')\n"
"         ->daily()\n"
"         ->runInBackground();\n"
msgstr ""

#: docs/8.x/scheduling.md:block 85 (quote)
msgid "{note} The `runInBackground` method may only be used when scheduling tasks via the `command` and `exec` methods."
msgstr ""

#: docs/8.x/scheduling.md:block 87 (header)
msgid "Maintenance Mode"
msgstr ""

#: docs/8.x/scheduling.md:block 88 (paragraph)
msgid "Your application's scheduled tasks will not run when the application is in [maintenance mode](/docs/{{version}}/configuration#maintenance-mode), since we don't want your tasks to interfere with any unfinished maintenance you may be performing on your server. However, if you would like to force a task to run even in maintenance mode, you may call the `evenInMaintenanceMode` method when defining the task:"
msgstr ""

#: docs/8.x/scheduling.md:block 89 (code)
msgid "$schedule->command('emails:send')->evenInMaintenanceMode();\n"
msgstr ""

#: docs/8.x/scheduling.md:block 91 (header)
msgid "Running The Scheduler"
msgstr ""

#: docs/8.x/scheduling.md:block 92 (paragraph)
msgid "Now that we have learned how to define scheduled tasks, let's discuss how to actually run them on our server. The `schedule:run` Artisan command will evaluate all of your scheduled tasks and determine if they need to run based on the server's current time."
msgstr ""

#: docs/8.x/scheduling.md:block 93 (paragraph)
msgid "So, when using Laravel's scheduler, we only need to add a single cron configuration entry to our server that runs the `schedule:run` command every minute. If you do not know how to add cron entries to your server, consider using a service such as [Laravel Forge](https://forge.laravel.com) which can manage the cron entries for you:"
msgstr ""

#: docs/8.x/scheduling.md:block 94 (code)
msgid "* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1\n"
msgstr ""

#: docs/8.x/scheduling.md:block 96 (header)
msgid "Running The Scheduler Locally"
msgstr ""

#: docs/8.x/scheduling.md:block 97 (paragraph)
msgid "Typically, you would not add a scheduler cron entry to your local development machine. Instead, you may use the `schedule:work` Artisan command. This command will run in the foreground and invoke the scheduler every minute until you terminate the command:"
msgstr ""

#: docs/8.x/scheduling.md:block 98 (code)
msgid "php artisan schedule:work\n"
msgstr ""

#: docs/8.x/scheduling.md:block 100 (header)
msgid "Task Output"
msgstr ""

#: docs/8.x/scheduling.md:block 101 (paragraph)
msgid "The Laravel scheduler provides several convenient methods for working with the output generated by scheduled tasks. First, using the `sendOutputTo` method, you may send the output to a file for later inspection:"
msgstr ""

#: docs/8.x/scheduling.md:block 102 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->sendOutputTo($filePath);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 103 (paragraph)
msgid "If you would like to append the output to a given file, you may use the `appendOutputTo` method:"
msgstr ""

#: docs/8.x/scheduling.md:block 104 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->appendOutputTo($filePath);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 105 (paragraph)
msgid "Using the `emailOutputTo` method, you may email the output to an email address of your choice. Before emailing the output of a task, you should configure Laravel's [email services](/docs/{{version}}/mail):"
msgstr ""

#: docs/8.x/scheduling.md:block 106 (code)
msgid "$schedule->command('report:generate')\n"
"         ->daily()\n"
"         ->sendOutputTo($filePath)\n"
"         ->emailOutputTo('taylor@example.com');\n"
msgstr ""

#: docs/8.x/scheduling.md:block 107 (paragraph)
msgid "If you only want to email the output if the scheduled Artisan or system command terminates with a non-zero exit code, use the `emailOutputOnFailure` method:"
msgstr ""

#: docs/8.x/scheduling.md:block 108 (code)
msgid "$schedule->command('report:generate')\n"
"         ->daily()\n"
"         ->emailOutputOnFailure('taylor@example.com');\n"
msgstr ""

#: docs/8.x/scheduling.md:block 109 (quote)
msgid "{note} The `emailOutputTo`, `emailOutputOnFailure`, `sendOutputTo`, and `appendOutputTo` methods are exclusive to the `command` and `exec` methods."
msgstr ""

#: docs/8.x/scheduling.md:block 111 (header)
msgid "Task Hooks"
msgstr ""

#: docs/8.x/scheduling.md:block 112 (paragraph)
msgid "Using the `before` and `after` methods, you may specify code to be executed before and after the scheduled task is executed:"
msgstr ""

#: docs/8.x/scheduling.md:block 113 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->before(function () {\n"
"             // The task is about to execute...\n"
"         })\n"
"         ->after(function () {\n"
"             // The task has executed...\n"
"         });\n"
msgstr ""

#: docs/8.x/scheduling.md:block 114 (paragraph)
msgid "The `onSuccess` and `onFailure` methods allow you to specify code to be executed if the scheduled task succeeds or fails. A failure indicates that the scheduled Artisan or system command terminated with a non-zero exit code:"
msgstr ""

#: docs/8.x/scheduling.md:block 115 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->onSuccess(function () {\n"
"             // The task succeeded...\n"
"         })\n"
"         ->onFailure(function () {\n"
"             // The task failed...\n"
"         });\n"
msgstr ""

#: docs/8.x/scheduling.md:block 116 (paragraph)
msgid "If output is available from your command, you may access it in your `after`, `onSuccess` or `onFailure` hooks by type-hinting an `Illuminate\\Support\\Stringable` instance as the `$output` argument of your hook's closure definition:"
msgstr ""

#: docs/8.x/scheduling.md:block 117 (code)
msgid "use Illuminate\\Support\\Stringable;\n\n"
"$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->onSuccess(function (Stringable $output) {\n"
"             // The task succeeded...\n"
"         })\n"
"         ->onFailure(function (Stringable $output) {\n"
"             // The task failed...\n"
"         });\n"
msgstr ""

#: docs/8.x/scheduling.md:block 119 (header)
msgid "Pinging URLs"
msgstr ""

#: docs/8.x/scheduling.md:block 120 (paragraph)
msgid "Using the `pingBefore` and `thenPing` methods, the scheduler can automatically ping a given URL before or after a task is executed. This method is useful for notifying an external service, such as [Envoyer](https://envoyer.io), that your scheduled task is beginning or has finished execution:"
msgstr ""

#: docs/8.x/scheduling.md:block 121 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->pingBefore($url)\n"
"         ->thenPing($url);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 122 (paragraph)
msgid "The `pingBeforeIf` and `thenPingIf` methods may be used to ping a given URL only if a given condition is `true`:"
msgstr ""

#: docs/8.x/scheduling.md:block 123 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->pingBeforeIf($condition, $url)\n"
"         ->thenPingIf($condition, $url);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 124 (paragraph)
msgid "The `pingOnSuccess` and `pingOnFailure` methods may be used to ping a given URL only if the task succeeds or fails. A failure indicates that the scheduled Artisan or system command terminated with a non-zero exit code:"
msgstr ""

#: docs/8.x/scheduling.md:block 125 (code)
msgid "$schedule->command('emails:send')\n"
"         ->daily()\n"
"         ->pingOnSuccess($successUrl)\n"
"         ->pingOnFailure($failureUrl);\n"
msgstr ""

#: docs/8.x/scheduling.md:block 126 (paragraph)
msgid "All of the ping methods require the Guzzle HTTP library. Guzzle is typically installed in all new Laravel projects by default, but, you may manually install Guzzle into your project using the Composer package manager if it has been accidentally removed:"
msgstr ""

#: docs/8.x/scheduling.md:block 127 (code)
msgid "composer require guzzlehttp/guzzle\n"
msgstr ""

#: docs/8.x/scheduling.md:block 129 (header)
msgid "Events"
msgstr ""

#: docs/8.x/scheduling.md:block 130 (paragraph)
msgid "If needed, you may listen to [events](/docs/{{version}}/events) dispatched by the scheduler. Typically, event listener mappings will be defined within your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#: docs/8.x/scheduling.md:block 131 (code)
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Console\\Events\\ScheduledTaskStarting' => [\n"
"        'App\\Listeners\\LogScheduledTaskStarting',\n"
"    ],\n\n"
"    'Illuminate\\Console\\Events\\ScheduledTaskFinished' => [\n"
"        'App\\Listeners\\LogScheduledTaskFinished',\n"
"    ],\n\n"
"    'Illuminate\\Console\\Events\\ScheduledBackgroundTaskFinished' => [\n"
"        'App\\Listeners\\LogScheduledBackgroundTaskFinished',\n"
"    ],\n\n"
"    'Illuminate\\Console\\Events\\ScheduledTaskSkipped' => [\n"
"        'App\\Listeners\\LogScheduledTaskSkipped',\n"
"    ],\n\n"
"    'Illuminate\\Console\\Events\\ScheduledTaskFailed' => [\n"
"        'App\\Listeners\\LogScheduledTaskFailed',\n"
"    ],\n"
"];\n"
msgstr ""

