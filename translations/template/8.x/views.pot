# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/views.md:1
#, markdown-text, no-wrap
msgid "Views"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Creating & Rendering Views](#creating-and-rendering-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Nested View Directories](#nested-view-directories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Creating The First Available View](#creating-the-first-available-view)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Determining If A View Exists](#determining-if-a-view-exists)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Passing Data To Views](#passing-data-to-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Sharing Data With All Views](#sharing-data-with-all-views)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[View Composers](#view-composers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[View Creators](#view-creators)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13
#, markdown-text
msgid "[Optimizing Views](#optimizing-views)"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:15
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:15
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:18
#, markdown-text
msgid ""
"Of course, it's not practical to return entire HTML documents strings "
"directly from your routes and controllers. Thankfully, views provide a "
"convenient way to place all of our HTML in separate files. Views separate "
"your controller / application logic from your presentation logic and are "
"stored in the `resources/views` directory. A simple view might look "
"something like this:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/views.md:19
#, no-wrap
msgid ""
"<!-- View stored in resources/views/greeting.blade.php -->\n"
"\n"
"<html>\n"
"    <body>\n"
"        <h1>Hello, {{ $name }}</h1>\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:30
#, markdown-text
msgid ""
"Since this view is stored at `resources/views/greeting.blade.php`, we may "
"return it using the global `view` helper like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:34 docs/8.x/views.md:47
#, markdown-text, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'James']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:36
#, markdown-text, no-wrap
msgid ""
"> {tip} Looking for more information on how to write Blade templates? Check "
"out the full [Blade documentation](/docs/{{version}}/blade) to get "
"started.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:38
#, markdown-text, no-wrap
msgid "<a name=\"creating-and-rendering-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:38
#, markdown-text, no-wrap
msgid "Creating & Rendering Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:41
#, markdown-text
msgid ""
"You may create a view by placing a file with the `.blade.php` extension in "
"your application's `resources/views` directory. The `.blade.php` extension "
"informs the framework that the file contains a [Blade "
"template](/docs/{{version}}/blade). Blade templates contain HTML as well as "
"Blade directives that allow you to easily echo values, create \"if\" "
"statements, iterate over data, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:43
#, markdown-text
msgid ""
"Once you have created a view, you may return it from one of your "
"application's routes or controllers using the global `view` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:49
#, markdown-text
msgid "Views may also be returned using the `View` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:51 docs/8.x/views.md:71 docs/8.x/views.md:80
#: docs/8.x/views.md:110
#, markdown-text, no-wrap
msgid "    use Illuminate\\Support\\Facades\\View;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:53
#, markdown-text, no-wrap
msgid "    return View::make('greeting', ['name' => 'James']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:55
#, markdown-text
msgid ""
"As you can see, the first argument passed to the `view` helper corresponds "
"to the name of the view file in the `resources/views` directory. The second "
"argument is an array of data that should be made available to the view. In "
"this case, we are passing the `name` variable, which is displayed in the "
"view using [Blade syntax](/docs/{{version}}/blade)."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:57
#, markdown-text, no-wrap
msgid "<a name=\"nested-view-directories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:57
#, markdown-text, no-wrap
msgid "Nested View Directories"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:60
#, markdown-text
msgid ""
"Views may also be nested within subdirectories of the `resources/views` "
"directory. \"Dot\" notation may be used to reference nested views. For "
"example, if your view is stored at "
"`resources/views/admin/profile.blade.php`, you may return it from one of "
"your application's routes / controllers like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:62
#, markdown-text, no-wrap
msgid "    return view('admin.profile', $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:64
#, markdown-text, no-wrap
msgid "> {note} View directory names should not contain the `.` character.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:66
#, markdown-text, no-wrap
msgid "<a name=\"creating-the-first-available-view\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:66
#, markdown-text, no-wrap
msgid "Creating The First Available View"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:69
#, markdown-text
msgid ""
"Using the `View` facade's `first` method, you may create the first view that "
"exists in a given array of views. This may be useful if your application or "
"package allows views to be customized or overwritten:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:73
#, markdown-text, no-wrap
msgid "    return View::first(['custom.admin', 'admin'], $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:75
#, markdown-text, no-wrap
msgid "<a name=\"determining-if-a-view-exists\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:75
#, markdown-text, no-wrap
msgid "Determining If A View Exists"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:78
#, markdown-text
msgid ""
"If you need to determine if a view exists, you may use the `View` "
"facade. The `exists` method will return `true` if the view exists:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:84
#, markdown-text, no-wrap
msgid ""
"    if (View::exists('emails.customer')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:86
#, markdown-text, no-wrap
msgid "<a name=\"passing-data-to-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:86
#, markdown-text, no-wrap
msgid "Passing Data To Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:89
#, markdown-text
msgid ""
"As you saw in the previous examples, you may pass an array of data to views "
"to make that data available to the view:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:91
#, markdown-text, no-wrap
msgid "    return view('greetings', ['name' => 'Victoria']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:93
#, markdown-text, no-wrap
msgid ""
"When passing information in this manner, the data should be an array with "
"key / value pairs. After providing data to a view, you can then access each "
"value within your view using the data's keys, such as `<?php echo $name; "
"?>`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:95
#, markdown-text
msgid ""
"As an alternative to passing a complete array of data to the `view` helper "
"function, you may use the `with` method to add individual pieces of data to "
"the view. The `with` method returns an instance of the view object so that "
"you can continue chaining methods before returning the view:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:99
#, markdown-text, no-wrap
msgid ""
"    return view('greeting')\n"
"                ->with('name', 'Victoria')\n"
"                ->with('occupation', 'Astronaut');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:101
#, markdown-text, no-wrap
msgid "<a name=\"sharing-data-with-all-views\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:101
#, markdown-text, no-wrap
msgid "Sharing Data With All Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:104
#, markdown-text
msgid ""
"Occasionally, you may need to share data with all views that are rendered by "
"your application. You may do so using the `View` facade's `share` "
"method. Typically, you should place calls to the `share` method within a "
"service provider's `boot` method. You are free to add them to the "
"`App\\Providers\\AppServiceProvider` class or generate a separate service "
"provider to house them:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:106 docs/8.x/views.md:144 docs/8.x/views.md:185
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:108 docs/8.x/views.md:146
#, markdown-text, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:122
#, markdown-text, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:133
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            View::share('key', 'value');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:135
#, markdown-text, no-wrap
msgid "<a name=\"view-composers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:135
#, markdown-text, no-wrap
msgid "View Composers"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:138
#, markdown-text
msgid ""
"View composers are callbacks or class methods that are called when a view is "
"rendered. If you have data that you want to be bound to a view each time "
"that view is rendered, a view composer can help you organize that logic into "
"a single location. View composers may prove particularly useful if the same "
"view is returned by multiple routes or controllers within your application "
"and always needs a particular piece of data."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:140
#, markdown-text
msgid ""
"Typically, view composers will be registered within one of your "
"application's [service providers](/docs/{{version}}/providers). In this "
"example, we'll assume that we have created a new "
"`App\\Providers\\ViewServiceProvider` to house this logic."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:142
#, markdown-text
msgid ""
"We'll use the `View` facade's `composer` method to register the view "
"composer. Laravel does not include a default directory for class based view "
"composers, so you are free to organize them however you wish. For example, "
"you could create an `app/Http/View/Composers` directory to house all of your "
"application's view composers:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:150
#, markdown-text, no-wrap
msgid ""
"    use App\\Http\\View\\Composers\\ProfileComposer;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:162
#, markdown-text, no-wrap
msgid ""
"    class ViewServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:172
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            // Using class based composers...\n"
"            View::composer('profile', ProfileComposer::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:179
#, markdown-text, no-wrap
msgid ""
"            // Using closure based composers...\n"
"            View::composer('dashboard', function ($view) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:181
#, markdown-text, no-wrap
msgid ""
"> {note} Remember, if you create a new service provider to contain your view "
"composer registrations, you will need to add the service provider to the "
"`providers` array in the `config/app.php` configuration file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:183
#, markdown-text
msgid ""
"Now that we have registered the composer, the `compose` method of the "
"`App\\Http\\View\\Composers\\ProfileComposer` class will be executed each "
"time the `profile` view is being rendered. Let's take a look at an example "
"of the composer class:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:187
#, markdown-text, no-wrap
msgid "    namespace App\\Http\\View\\Composers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:190
#, markdown-text, no-wrap
msgid ""
"    use App\\Repositories\\UserRepository;\n"
"    use Illuminate\\View\\View;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:199
#, markdown-text, no-wrap
msgid ""
"    class ProfileComposer\n"
"    {\n"
"        /**\n"
"         * The user repository implementation.\n"
"         *\n"
"         * @var \\App\\Repositories\\UserRepository\n"
"         */\n"
"        protected $users;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:211
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Create a new profile composer.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            // Dependencies are automatically resolved by the service "
"container...\n"
"            $this->users = $users;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:223
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Bind data to the view.\n"
"         *\n"
"         * @param  \\Illuminate\\View\\View  $view\n"
"         * @return void\n"
"         */\n"
"        public function compose(View $view)\n"
"        {\n"
"            $view->with('count', $this->users->count());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:225
#, markdown-text
msgid ""
"As you can see, all view composers are resolved via the [service "
"container](/docs/{{version}}/container), so you may type-hint any "
"dependencies you need within a composer's constructor."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:227
#, markdown-text, no-wrap
msgid "<a name=\"attaching-a-composer-to-multiple-views\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/views.md:227
#, markdown-text, no-wrap
msgid "Attaching A Composer To Multiple Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:230
#, markdown-text
msgid ""
"You may attach a view composer to multiple views at once by passing an array "
"of views as the first argument to the `composer` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:232
#, markdown-text, no-wrap
msgid "    use App\\Http\\Views\\Composers\\MultiComposer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:237
#, markdown-text, no-wrap
msgid ""
"    View::composer(\n"
"        ['profile', 'dashboard'],\n"
"        MultiComposer::class\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:239
#, markdown-text
msgid ""
"The `composer` method also accepts the `*` character as a wildcard, allowing "
"you to attach a composer to all views:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:243
#, markdown-text, no-wrap
msgid ""
"    View::composer('*', function ($view) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:245
#, markdown-text, no-wrap
msgid "<a name=\"view-creators\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:245
#, markdown-text, no-wrap
msgid "View Creators"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:248
#, markdown-text
msgid ""
"View \"creators\" are very similar to view composers; however, they are "
"executed immediately after the view is instantiated instead of waiting until "
"the view is about to render. To register a view creator, use the `creator` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:251
#, markdown-text, no-wrap
msgid ""
"    use App\\Http\\View\\Creators\\ProfileCreator;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:253
#, markdown-text, no-wrap
msgid "    View::creator('profile', ProfileCreator::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:255
#, markdown-text, no-wrap
msgid "<a name=\"optimizing-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:255
#, markdown-text, no-wrap
msgid "Optimizing Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:258
#, markdown-text
msgid ""
"By default, Blade template views are compiled on demand. When a request is "
"executed that renders a view, Laravel will determine if a compiled version "
"of the view exists. If the file exists, Laravel will then determine if the "
"uncompiled view has been modified more recently than the compiled view. If "
"the compiled view either does not exist, or the uncompiled view has been "
"modified, Laravel will recompile the view."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:260
#, markdown-text
msgid ""
"Compiling views during the request may have a small negative impact on "
"performance, so Laravel provides the `view:cache` Artisan command to "
"precompile all of the views utilized by your application. For increased "
"performance, you may wish to run this command as part of your deployment "
"process:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:262
#, markdown-text, no-wrap
msgid "    php artisan view:cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:264
#, markdown-text
msgid "You may use the `view:clear` command to clear the view cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:265
#, markdown-text, no-wrap
msgid "    php artisan view:clear\n"
msgstr ""
