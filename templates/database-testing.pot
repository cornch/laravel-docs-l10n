# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-30 12:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/database-testing.md, line: 1
# File: docs/master/database-testing.md, line: 1
#, no-wrap
msgid "Database Testing"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 22
# File: docs/master/database-testing.md, line: 22
#, no-wrap
msgid ""
"- [Introduction](#introduction)\n"
"    - [Resetting The Database After Each Test](#resetting-the-database-after-each-test)\n"
"- [Defining Model Factories](#defining-model-factories)\n"
"    - [Concept Overview](#concept-overview)\n"
"    - [Generating Factories](#generating-factories)\n"
"    - [Factory States](#factory-states)\n"
"    - [Factory Callbacks](#factory-callbacks)\n"
"- [Creating Models Using Factories](#creating-models-using-factories)\n"
"    - [Instantiating Models](#instantiating-models)\n"
"    - [Persisting Models](#persisting-models)\n"
"    - [Sequences](#sequences)\n"
"- [Factory Relationships](#factory-relationships)\n"
"    - [Has Many Relationships](#has-many-relationships)\n"
"    - [Belongs To Relationships](#belongs-to-relationships)\n"
"    - [Many To Many Relationships](#many-to-many-relationships)\n"
"    - [Polymorphic Relationships](#polymorphic-relationships)\n"
"    - [Defining Relationships Within Factories](#defining-relationships-within-factories)\n"
"- [Running Seeders](#running-seeders)\n"
"- [Available Assertions](#available-assertions)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 24
# File: docs/master/database-testing.md, line: 24
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/database-testing.md, line: 24
# File: docs/master/database-testing.md, line: 24
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 27
# File: docs/master/database-testing.md, line: 27
msgid "Laravel provides a variety of helpful tools and assertions to make it easier to test your database driven applications. In addition, Laravel model factories and seeders make it painless to create test database records using your application's Eloquent models and relationships. We'll discuss all of these powerful features in the following documentation."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 29
# File: docs/master/database-testing.md, line: 29
#, no-wrap
msgid "<a name=\"resetting-the-database-after-each-test\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 29
# File: docs/master/database-testing.md, line: 29
#, no-wrap
msgid "Resetting The Database After Each Test"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 32
# File: docs/master/database-testing.md, line: 32
msgid "Before proceeding much further, let's discuss how to reset your database after each of your tests so that data from a previous test does not interfere with subsequent tests. Laravel's included `Illuminate\\Foundation\\Testing\\RefreshDatabase` trait will take care of this for you. Simply use the trait on your test class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 34
# File: docs/8.x/database-testing.md, line: 534
# File: docs/8.x/database-testing.md, line: 574
# File: docs/master/database-testing.md, line: 34
# File: docs/master/database-testing.md, line: 538
# File: docs/master/database-testing.md, line: 578
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 36
# File: docs/8.x/database-testing.md, line: 536
# File: docs/master/database-testing.md, line: 36
# File: docs/master/database-testing.md, line: 540
#, no-wrap
msgid "    namespace Tests\\Feature;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 40
# File: docs/master/database-testing.md, line: 40
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 44
# File: docs/8.x/database-testing.md, line: 546
# File: docs/master/database-testing.md, line: 44
# File: docs/master/database-testing.md, line: 550
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        use RefreshDatabase;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 53
# File: docs/master/database-testing.md, line: 53
#, no-wrap
msgid ""
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_example()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 57
# File: docs/master/database-testing.md, line: 57
#, no-wrap
msgid ""
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 59
# File: docs/master/database-testing.md, line: 63
#, no-wrap
msgid "<a name=\"defining-model-factories\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/database-testing.md, line: 59
# File: docs/master/database-testing.md, line: 63
#, no-wrap
msgid "Defining Model Factories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 62
# File: docs/master/database-testing.md, line: 66
#, no-wrap
msgid "<a name=\"concept-overview\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 62
# File: docs/master/database-testing.md, line: 66
#, no-wrap
msgid "Concept Overview"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 65
# File: docs/master/database-testing.md, line: 69
msgid "First, let's talk about Eloquent model factories. When testing, you may need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a set of default attributes for each of your [Eloquent models](/docs/{{version}}/eloquent) using model factories."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 67
# File: docs/master/database-testing.md, line: 71
msgid "To see an example of how to write a factory, take a look at the `database/factories/UserFactory.php` file in your application. This factory is included with all new Laravel applications and contains the following factory definition:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 69
# File: docs/8.x/database-testing.md, line: 168
# File: docs/master/database-testing.md, line: 73
# File: docs/master/database-testing.md, line: 172
#, no-wrap
msgid "    namespace Database\\Factories;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 72
# File: docs/master/database-testing.md, line: 76
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 91
# File: docs/master/database-testing.md, line: 95
#, no-wrap
msgid ""
"    class UserFactory extends Factory\n"
"    {\n"
"        /**\n"
"         * Define the model's default state.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function definition()\n"
"        {\n"
"            return [\n"
"                'name' => $this->faker->name(),\n"
"                'email' => $this->faker->unique()->safeEmail(),\n"
"                'email_verified_at' => now(),\n"
"                'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"                'remember_token' => Str::random(10),\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 93
# File: docs/master/database-testing.md, line: 97
msgid "As you can see, in their most basic form, factories are classes that extend Laravel's base factory class and define `definition` method. The `definition` method returns the default set of attribute values that should be applied when creating a model using the factory."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 95
# File: docs/master/database-testing.md, line: 99
msgid "Via the `faker` property, factories have access to the [Faker](https://github.com/FakerPHP/Faker) PHP library, which allows you to conveniently generate various kinds of random data for testing."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 97
# File: docs/master/database-testing.md, line: 101
#, no-wrap
msgid "> {tip} You can set your application's Faker locale by adding a `faker_locale` option to your `config/app.php` configuration file.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 99
# File: docs/master/database-testing.md, line: 103
#, no-wrap
msgid "<a name=\"generating-factories\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 99
# File: docs/master/database-testing.md, line: 103
#, no-wrap
msgid "Generating Factories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 102
# File: docs/master/database-testing.md, line: 106
msgid "To create a factory, execute the `make:factory` [Artisan command](/docs/{{version}}/artisan):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 104
# File: docs/master/database-testing.md, line: 108
#, no-wrap
msgid "    php artisan make:factory PostFactory\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 106
# File: docs/master/database-testing.md, line: 110
msgid "The new factory class will be placed in your `database/factories` directory."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 108
# File: docs/master/database-testing.md, line: 112
#, no-wrap
msgid "<a name=\"factory-and-model-discovery-conventions\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 108
# File: docs/master/database-testing.md, line: 112
#, no-wrap
msgid "Model & Factory Discovery Conventions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 111
# File: docs/master/database-testing.md, line: 115
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 113
# File: docs/master/database-testing.md, line: 117
msgid "The `HasFactory` trait's `factory` method will use conventions to determine the proper factory for the model the trait is assigned to. Specifically, the method will look for a factory in the `Database\\Factories` namespace that has a class name matching the model name and is suffixed with `Factory`. If these conventions do not apply to your particular application or factory, you may overwrite the `newFactory` method on your model to return an instance of the model's corresponding factory directly:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 115
# File: docs/master/database-testing.md, line: 119
#, no-wrap
msgid "    use Database\\Factories\\Administration\\FlightFactory;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 125
# File: docs/master/database-testing.md, line: 129
#, no-wrap
msgid ""
"    /**\n"
"     * Create a new factory instance for the model.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    protected static function newFactory()\n"
"    {\n"
"        return FlightFactory::new();\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 127
# File: docs/master/database-testing.md, line: 131
msgid "Next, define a `model` property on the corresponding factory:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 130
# File: docs/master/database-testing.md, line: 134
#, no-wrap
msgid ""
"    use App\\Administration\\Flight;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 140
# File: docs/master/database-testing.md, line: 144
#, no-wrap
msgid ""
"    class FlightFactory extends Factory\n"
"    {\n"
"        /**\n"
"         * The name of the factory's corresponding model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $model = Flight::class;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 142
# File: docs/master/database-testing.md, line: 146
#, no-wrap
msgid "<a name=\"factory-states\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 142
# File: docs/master/database-testing.md, line: 146
#, no-wrap
msgid "Factory States"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 145
# File: docs/master/database-testing.md, line: 149
msgid "State manipulation methods allow you to define discrete modifications that can be applied to your model factories in any combination. For example, your `Database\\Factories\\UserFactory` factory might contain a `suspended` state method that modifies one of its default attribute values."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 147
# File: docs/master/database-testing.md, line: 151
msgid "State transformation methods typically call the `state` method provided by Laravel's base factory class. The `state` method accepts a closure which will receive the array of raw attributes defined for the factory and should return an array of attributes to modify:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 161
# File: docs/master/database-testing.md, line: 165
#, no-wrap
msgid ""
"    /**\n"
"     * Indicate that the user is suspended.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    public function suspended()\n"
"    {\n"
"        return $this->state(function (array $attributes) {\n"
"            return [\n"
"                'account_status' => 'suspended',\n"
"            ];\n"
"        });\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 163
# File: docs/master/database-testing.md, line: 167
#, no-wrap
msgid "<a name=\"factory-callbacks\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 163
# File: docs/master/database-testing.md, line: 167
#, no-wrap
msgid "Factory Callbacks"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 166
# File: docs/master/database-testing.md, line: 170
msgid "Factory callbacks are registered using the `afterMaking` and `afterCreating` methods and allow you to perform additional tasks after making or creating a model. You should register these callbacks by defining a `configure` method on your factory class. This method will be automatically called by Laravel when the factory is instantiated:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 172
# File: docs/master/database-testing.md, line: 176
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 188
# File: docs/master/database-testing.md, line: 192
#, no-wrap
msgid ""
"    class UserFactory extends Factory\n"
"    {\n"
"        /**\n"
"         * Configure the model factory.\n"
"         *\n"
"         * @return $this\n"
"         */\n"
"        public function configure()\n"
"        {\n"
"            return $this->afterMaking(function (User $user) {\n"
"                //\n"
"            })->afterCreating(function (User $user) {\n"
"                //\n"
"            });\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 191
# File: docs/master/database-testing.md, line: 195
#, no-wrap
msgid ""
"        // ...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 193
# File: docs/master/database-testing.md, line: 197
#, no-wrap
msgid "<a name=\"creating-models-using-factories\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/database-testing.md, line: 193
# File: docs/master/database-testing.md, line: 197
#, no-wrap
msgid "Creating Models Using Factories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 196
# File: docs/master/database-testing.md, line: 200
#, no-wrap
msgid "<a name=\"instantiating-models\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 196
# File: docs/master/database-testing.md, line: 200
#, no-wrap
msgid "Instantiating Models"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 199
# File: docs/master/database-testing.md, line: 203
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model. Let's take a look at a few examples of creating models. First, we'll use the `make` method to create models without persisting them to the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 201
# File: docs/8.x/database-testing.md, line: 243
# File: docs/8.x/database-testing.md, line: 494
# File: docs/8.x/database-testing.md, line: 638
# File: docs/8.x/database-testing.md, line: 655
# File: docs/8.x/database-testing.md, line: 666
# File: docs/master/database-testing.md, line: 205
# File: docs/master/database-testing.md, line: 247
# File: docs/master/database-testing.md, line: 498
# File: docs/master/database-testing.md, line: 642
# File: docs/master/database-testing.md, line: 659
# File: docs/master/database-testing.md, line: 670
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 205
# File: docs/master/database-testing.md, line: 209
#, no-wrap
msgid ""
"    public function test_models_can_be_instantiated()\n"
"    {\n"
"        $user = User::factory()->make();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 208
# File: docs/8.x/database-testing.md, line: 254
# File: docs/master/database-testing.md, line: 212
# File: docs/master/database-testing.md, line: 258
#, no-wrap
msgid ""
"        // Use model in tests...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 210
# File: docs/master/database-testing.md, line: 214
msgid "You may create a collection of many models using the `count` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 212
# File: docs/master/database-testing.md, line: 216
#, no-wrap
msgid "    $users = User::factory()->count(3)->make();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 214
# File: docs/master/database-testing.md, line: 218
#, no-wrap
msgid "<a name=\"applying-states\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 214
# File: docs/master/database-testing.md, line: 218
#, no-wrap
msgid "Applying States"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 217
# File: docs/master/database-testing.md, line: 221
msgid "You may also apply any of your [states](#factory-states) to the models. If you would like to apply multiple state transformations to the models, you may simply call the state transformation methods directly:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 219
# File: docs/master/database-testing.md, line: 223
#, no-wrap
msgid "    $users = User::factory()->count(5)->suspended()->make();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 221
# File: docs/master/database-testing.md, line: 225
#, no-wrap
msgid "<a name=\"overriding-attributes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 221
# File: docs/master/database-testing.md, line: 225
#, no-wrap
msgid "Overriding Attributes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 224
# File: docs/master/database-testing.md, line: 228
msgid "If you would like to override some of the default values of your models, you may pass an array of values to the `make` method. Only the specified attributes will be replaced while the rest of the attributes remain set to their default values as specified by the factory:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 228
# File: docs/master/database-testing.md, line: 232
#, no-wrap
msgid ""
"    $user = User::factory()->make([\n"
"        'name' => 'Abigail Otwell',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 230
# File: docs/master/database-testing.md, line: 234
msgid "Alternatively, the `state` method may be called directly on the factory instance to perform an inline state transformation:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 234
# File: docs/master/database-testing.md, line: 238
#, no-wrap
msgid ""
"    $user = User::factory()->state([\n"
"        'name' => 'Abigail Otwell',\n"
"    ])->make();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 236
# File: docs/master/database-testing.md, line: 240
#, no-wrap
msgid "> {tip} [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled when creating models using factories.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 238
# File: docs/master/database-testing.md, line: 242
#, no-wrap
msgid "<a name=\"persisting-models\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 238
# File: docs/master/database-testing.md, line: 242
#, no-wrap
msgid "Persisting Models"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 241
# File: docs/master/database-testing.md, line: 245
msgid "The `create` method instantiates model instances and persists them to the database using Eloquent's `save` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 248
# File: docs/master/database-testing.md, line: 252
#, no-wrap
msgid ""
"    public function test_models_can_be_persisted()\n"
"    {\n"
"        // Create a single App\\Models\\User instance...\n"
"        $user = User::factory()->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 251
# File: docs/master/database-testing.md, line: 255
#, no-wrap
msgid ""
"        // Create three App\\Models\\User instances...\n"
"        $users = User::factory()->count(3)->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 256
# File: docs/master/database-testing.md, line: 260
msgid "You may override the factory's default model attributes by passing an array of attributes to the `create` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 260
# File: docs/master/database-testing.md, line: 264
#, no-wrap
msgid ""
"    $user = User::factory()->create([\n"
"        'name' => 'Abigail',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 262
# File: docs/master/database-testing.md, line: 266
#, no-wrap
msgid "<a name=\"sequences\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 262
# File: docs/master/database-testing.md, line: 266
#, no-wrap
msgid "Sequences"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 265
# File: docs/master/database-testing.md, line: 269
msgid "Sometimes you may wish to alternate the value of a given model attribute for each created model. You may accomplish this by defining a state transformation as a sequence. For example, you may wish to alternate the value of an `admin` column between `Y` and `N` for each created user:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 268
# File: docs/master/database-testing.md, line: 272
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 276
# File: docs/master/database-testing.md, line: 280
#, no-wrap
msgid ""
"    $users = User::factory()\n"
"                    ->count(10)\n"
"                    ->state(new Sequence(\n"
"                        ['admin' => 'Y'],\n"
"                        ['admin' => 'N'],\n"
"                    ))\n"
"                    ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 278
# File: docs/master/database-testing.md, line: 282
msgid "In this example, five users will be created with an `admin` value of `Y` and five users will be created with an `admin` value of `N`."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 280
# File: docs/master/database-testing.md, line: 284
msgid "If necessary, you may include a closure as a sequence value. The closure will be invoked each time the sequence needs a new value:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 287
# File: docs/master/database-testing.md, line: 291
#, no-wrap
msgid ""
"    $users = User::factory()\n"
"                    ->count(10)\n"
"                    ->state(new Sequence(\n"
"                        fn ($sequence) => ['role' => UserRoles::all()->random()],\n"
"                    ))\n"
"                    ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 289
# File: docs/master/database-testing.md, line: 293
msgid "Within a sequence closure, you may access the `$index` or `$count` properties on the sequence instance that is injected into the closure. The `$index` property contains the number of iterations through the sequence that have occurred thus far, while the `$count` property contains the total number of times the sequence will be invoked:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 294
# File: docs/master/database-testing.md, line: 298
#, no-wrap
msgid ""
"    $users = User::factory()\n"
"                    ->count(10)\n"
"                    ->sequence(fn ($sequence) => ['name' => 'Name '.$sequence->index])\n"
"                    ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 296
# File: docs/master/database-testing.md, line: 300
#, no-wrap
msgid "<a name=\"factory-relationships\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/database-testing.md, line: 296
# File: docs/master/database-testing.md, line: 300
#, no-wrap
msgid "Factory Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 299
# File: docs/master/database-testing.md, line: 303
#, no-wrap
msgid "<a name=\"has-many-relationships\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 299
# File: docs/master/database-testing.md, line: 303
#, no-wrap
msgid "Has Many Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 302
# File: docs/master/database-testing.md, line: 306
msgid "Next, let's explore building Eloquent model relationships using Laravel's fluent factory methods. First, let's assume our application has an `App\\Models\\User` model and an `App\\Models\\Post` model. Also, let's assume that the `User` model defines a `hasMany` relationship with `Post`. We can create a user that has three posts using the `has` method provided by the Laravel's factories. The `has` method accepts a factory instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 305
# File: docs/8.x/database-testing.md, line: 360
# File: docs/master/database-testing.md, line: 309
# File: docs/master/database-testing.md, line: 364
#, no-wrap
msgid ""
"    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 309
# File: docs/master/database-testing.md, line: 313
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->has(Post::factory()->count(3))\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 311
# File: docs/master/database-testing.md, line: 315
msgid "By convention, when passing a `Post` model to the `has` method, Laravel will assume that the `User` model must have a `posts` method that defines the relationship. If necessary, you may explicitly specify the name of the relationship that you would like to manipulate:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 315
# File: docs/master/database-testing.md, line: 319
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->has(Post::factory()->count(3), 'posts')\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 317
# File: docs/master/database-testing.md, line: 321
msgid "Of course, you may perform state manipulations on the related models. In addition, you may pass a closure based state transformation if your state change requires access to the parent model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 327
# File: docs/master/database-testing.md, line: 331
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->has(\n"
"                    Post::factory()\n"
"                            ->count(3)\n"
"                            ->state(function (array $attributes, User $user) {\n"
"                                return ['user_type' => $user->type];\n"
"                            })\n"
"                )\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 329
# File: docs/master/database-testing.md, line: 333
#, no-wrap
msgid "<a name=\"has-many-relationships-using-magic-methods\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 329
# File: docs/8.x/database-testing.md, line: 378
# File: docs/8.x/database-testing.md, line: 439
# File: docs/master/database-testing.md, line: 333
# File: docs/master/database-testing.md, line: 382
# File: docs/master/database-testing.md, line: 443
#, no-wrap
msgid "Using Magic Methods"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 332
# File: docs/master/database-testing.md, line: 336
msgid "For convenience, you may use Laravel's magic factory relationship methods to build relationships. For example, the following example will use convention to determine that the related models should be created via a `posts` relationship method on the `User` model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 336
# File: docs/master/database-testing.md, line: 340
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->hasPosts(3)\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 338
# File: docs/master/database-testing.md, line: 342
msgid "When using magic methods to create factory relationships, you may pass an array of attributes to override on the related models:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 344
# File: docs/master/database-testing.md, line: 348
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->hasPosts(3, [\n"
"                    'published' => false,\n"
"                ])\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 346
# File: docs/master/database-testing.md, line: 350
msgid "You may provide a closure based state transformation if your state change requires access to the parent model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 352
# File: docs/master/database-testing.md, line: 356
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->hasPosts(3, function (array $attributes, User $user) {\n"
"                    return ['user_type' => $user->type];\n"
"                })\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 354
# File: docs/master/database-testing.md, line: 358
#, no-wrap
msgid "<a name=\"belongs-to-relationships\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 354
# File: docs/master/database-testing.md, line: 358
#, no-wrap
msgid "Belongs To Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 357
# File: docs/master/database-testing.md, line: 361
msgid "Now that we have explored how to build \"has many\" relationships using factories, let's explore the inverse of the relationship. The `for` method may be used to define the parent model that factory created models belong to. For example, we can create three `App\\Models\\Post` model instances that belong to a single user:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 367
# File: docs/master/database-testing.md, line: 371
#, no-wrap
msgid ""
"    $posts = Post::factory()\n"
"                ->count(3)\n"
"                ->for(User::factory()->state([\n"
"                    'name' => 'Jessica Archer',\n"
"                ]))\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 369
# File: docs/master/database-testing.md, line: 373
msgid "If you already have a parent model instance that should be associated with the models you are creating, you may pass the model instance to the `for` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 371
# File: docs/8.x/database-testing.md, line: 657
# File: docs/8.x/database-testing.md, line: 668
# File: docs/master/database-testing.md, line: 375
# File: docs/master/database-testing.md, line: 661
# File: docs/master/database-testing.md, line: 672
#, no-wrap
msgid "    $user = User::factory()->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 376
# File: docs/master/database-testing.md, line: 380
#, no-wrap
msgid ""
"    $posts = Post::factory()\n"
"                ->count(3)\n"
"                ->for($user)\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 378
# File: docs/master/database-testing.md, line: 382
#, no-wrap
msgid "<a name=\"belongs-to-relationships-using-magic-methods\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 381
# File: docs/master/database-testing.md, line: 385
msgid "For convenience, you may use Laravel's magic factory relationship methods to define \"belongs to\" relationships. For example, the following example will use convention to determine that the three posts should belong to the `user` relationship on the `Post` model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 388
# File: docs/master/database-testing.md, line: 392
#, no-wrap
msgid ""
"    $posts = Post::factory()\n"
"                ->count(3)\n"
"                ->forUser([\n"
"                    'name' => 'Jessica Archer',\n"
"                ])\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 390
# File: docs/master/database-testing.md, line: 394
#, no-wrap
msgid "<a name=\"many-to-many-relationships\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 390
# File: docs/master/database-testing.md, line: 394
#, no-wrap
msgid "Many To Many Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 393
# File: docs/master/database-testing.md, line: 397
msgid "Like [has many relationships](#has-many-relationships), \"many to many\" relationships may be created using the `has` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 396
# File: docs/8.x/database-testing.md, line: 408
# File: docs/master/database-testing.md, line: 400
# File: docs/master/database-testing.md, line: 412
#, no-wrap
msgid ""
"    use App\\Models\\Role;\n"
"    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 400
# File: docs/master/database-testing.md, line: 404
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->has(Role::factory()->count(3))\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 402
# File: docs/master/database-testing.md, line: 406
#, no-wrap
msgid "<a name=\"pivot-table-attributes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 402
# File: docs/master/database-testing.md, line: 406
#, no-wrap
msgid "Pivot Table Attributes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 405
# File: docs/master/database-testing.md, line: 409
msgid "If you need to define attributes that should be set on the pivot / intermediate table linking the models, you may use the `hasAttached` method. This method accepts an array of pivot table attribute names and values as its second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 415
# File: docs/master/database-testing.md, line: 419
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->hasAttached(\n"
"                    Role::factory()->count(3),\n"
"                    ['active' => true]\n"
"                )\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 417
# File: docs/master/database-testing.md, line: 421
msgid "You may provide a closure based state transformation if your state change requires access to the related model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 428
# File: docs/master/database-testing.md, line: 432
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->hasAttached(\n"
"                    Role::factory()\n"
"                        ->count(3)\n"
"                        ->state(function (array $attributes, User $user) {\n"
"                            return ['name' => $user->name.' Role'];\n"
"                        }),\n"
"                    ['active' => true]\n"
"                )\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 430
# File: docs/master/database-testing.md, line: 434
msgid "If you already have model instances that you would like to be attached to the models you are creating, you may pass the model instances to the `hasAttached` method. In this example, the same three roles will be attached to all three users:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 432
# File: docs/master/database-testing.md, line: 436
#, no-wrap
msgid "    $roles = Role::factory()->count(3)->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 437
# File: docs/master/database-testing.md, line: 441
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->count(3)\n"
"                ->hasAttached($roles, ['active' => true])\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 439
# File: docs/master/database-testing.md, line: 443
#, no-wrap
msgid "<a name=\"many-to-many-relationships-using-magic-methods\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 442
# File: docs/master/database-testing.md, line: 446
msgid "For convenience, you may use Laravel's magic factory relationship methods to define many to many relationships. For example, the following example will use convention to determine that the related models should be created via a `roles` relationship method on the `User` model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 448
# File: docs/master/database-testing.md, line: 452
#, no-wrap
msgid ""
"    $user = User::factory()\n"
"                ->hasRoles(1, [\n"
"                    'name' => 'Editor'\n"
"                ])\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 450
# File: docs/master/database-testing.md, line: 454
#, no-wrap
msgid "<a name=\"polymorphic-relationships\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 450
# File: docs/master/database-testing.md, line: 454
#, no-wrap
msgid "Polymorphic Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 453
# File: docs/master/database-testing.md, line: 457
msgid "[Polymorphic relationships](/docs/{{version}}/eloquent-relationships#polymorphic-relationships) may also be created using factories. Polymorphic \"morph many\" relationships are created in the same way as typical \"has many\" relationships. For example, if a `App\\Models\\Post` model has a `morphMany` relationship with a `App\\Models\\Comment` model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 455
# File: docs/master/database-testing.md, line: 459
#, no-wrap
msgid "    use App\\Models\\Post;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 457
# File: docs/master/database-testing.md, line: 461
#, no-wrap
msgid "    $post = Post::factory()->hasComments(3)->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 459
# File: docs/master/database-testing.md, line: 463
#, no-wrap
msgid "<a name=\"morph-to-relationships\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 459
# File: docs/master/database-testing.md, line: 463
#, no-wrap
msgid "Morph To Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 462
# File: docs/master/database-testing.md, line: 466
msgid "Magic methods may not be used to create `morphTo` relationships. Instead, the `for` method must be used directly and the name of the relationship must be explicitly provided. For example, imagine that the `Comment` model has a `commentable` method that defines a `morphTo` relationship. In this situation, we may create three comments that belong to a single post by using the `for` method directly:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 466
# File: docs/master/database-testing.md, line: 470
#, no-wrap
msgid ""
"    $comments = Comment::factory()->count(3)->for(\n"
"        Post::factory(), 'commentable'\n"
"    )->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 468
# File: docs/master/database-testing.md, line: 472
#, no-wrap
msgid "<a name=\"polymorphic-many-to-many-relationships\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 468
# File: docs/master/database-testing.md, line: 472
#, no-wrap
msgid "Polymorphic Many To Many Relationships"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 471
# File: docs/master/database-testing.md, line: 475
msgid "Polymorphic \"many to many\" (`morphToMany` / `morphedByMany`) relationships may be created just like non-polymorphic \"many to many\" relationships:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 474
# File: docs/master/database-testing.md, line: 478
#, no-wrap
msgid ""
"    use App\\Models\\Tag;\n"
"    use App\\Models\\Video;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 481
# File: docs/master/database-testing.md, line: 485
#, no-wrap
msgid ""
"    $videos = Video::factory()\n"
"                ->hasAttached(\n"
"                    Tag::factory()->count(3),\n"
"                    ['public' => true]\n"
"                )\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 483
# File: docs/master/database-testing.md, line: 487
msgid "Of course, the magic `has` method may also be used to create polymorphic \"many to many\" relationships:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 487
# File: docs/master/database-testing.md, line: 491
#, no-wrap
msgid ""
"    $videos = Video::factory()\n"
"                ->hasTags(3, ['public' => true])\n"
"                ->create();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 489
# File: docs/master/database-testing.md, line: 493
#, no-wrap
msgid "<a name=\"defining-relationships-within-factories\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/database-testing.md, line: 489
# File: docs/master/database-testing.md, line: 493
#, no-wrap
msgid "Defining Relationships Within Factories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 492
# File: docs/master/database-testing.md, line: 496
msgid "To define a relationship within your model factory, you will typically assign a new factory instance to the foreign key of the relationship. This is normally done for the \"inverse\" relationships such as `belongsTo` and `morphTo` relationships. For example, if you would like to create a new user when creating a post, you may do the following:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 508
# File: docs/master/database-testing.md, line: 512
#, no-wrap
msgid ""
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'user_id' => User::factory(),\n"
"            'title' => $this->faker->title(),\n"
"            'content' => $this->faker->paragraph(),\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 510
# File: docs/master/database-testing.md, line: 514
msgid "If the relationship's columns depend on the factory that defines it you may assign a closure to an attribute. The closure will receive the factory's evaluated attribute array:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 527
# File: docs/master/database-testing.md, line: 531
#, no-wrap
msgid ""
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'user_id' => User::factory(),\n"
"            'user_type' => function (array $attributes) {\n"
"                return User::find($attributes['user_id'])->type;\n"
"            },\n"
"            'title' => $this->faker->title(),\n"
"            'content' => $this->faker->paragraph(),\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 529
# File: docs/master/database-testing.md, line: 533
#, no-wrap
msgid "<a name=\"running-seeders\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/database-testing.md, line: 529
# File: docs/master/database-testing.md, line: 533
#, no-wrap
msgid "Running Seeders"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 532
# File: docs/master/database-testing.md, line: 536
msgid "If you would like to use [database seeders](/docs/{{version}}/seeding) to populate your database during a feature test, you may invoke the `seed` method. By default, the `seed` method will execute the `DatabaseSeeder`, which should execute all of your other seeders. Alternatively, you pass a specific seeder class name to the `seed` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 542
# File: docs/master/database-testing.md, line: 546
#, no-wrap
msgid ""
"    use Database\\Seeders\\OrderStatusSeeder;\n"
"    use Database\\Seeders\\TransactionStatusSeeder;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 556
# File: docs/master/database-testing.md, line: 560
#, no-wrap
msgid ""
"        /**\n"
"         * Test creating a new order.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_orders_can_be_created()\n"
"        {\n"
"            // Run the DatabaseSeeder...\n"
"            $this->seed();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 559
# File: docs/master/database-testing.md, line: 563
#, no-wrap
msgid ""
"            // Run a specific seeder...\n"
"            $this->seed(OrderStatusSeeder::class);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 561
# File: docs/master/database-testing.md, line: 565
#, no-wrap
msgid "            // ...\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 570
# File: docs/master/database-testing.md, line: 574
#, no-wrap
msgid ""
"            // Run an array of specific seeders...\n"
"            $this->seed([\n"
"                OrderStatusSeeder::class,\n"
"                TransactionStatusSeeder::class,\n"
"                // ...\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 572
# File: docs/master/database-testing.md, line: 576
msgid "Alternatively, you may instruct Laravel to automatically seed the database before each test that uses the `RefreshDatabase` trait. You may accomplish this by defining a `$seed` property on your base test class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 576
# File: docs/master/database-testing.md, line: 580
#, no-wrap
msgid "    namespace Tests;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 578
# File: docs/master/database-testing.md, line: 582
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 582
# File: docs/master/database-testing.md, line: 586
#, no-wrap
msgid ""
"    abstract class TestCase extends BaseTestCase\n"
"    {\n"
"        use CreatesApplication;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 590
# File: docs/master/database-testing.md, line: 594
#, no-wrap
msgid ""
"        /**\n"
"         * Indicates whether the default seeder should run before each test.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        protected $seed = true;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 592
# File: docs/master/database-testing.md, line: 596
msgid "When the `$seed` property is `true`, the test will run the `Database\\Seeders\\DatabaseSeeder` class before each test that uses the `RefreshDatabase` trait. However, you may specify a specific seeder that should be executed by defining a `$seeder` property on your test class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 594
# File: docs/master/database-testing.md, line: 598
#, no-wrap
msgid "    use Database\\Seeders\\OrderStatusSeeder;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 601
# File: docs/master/database-testing.md, line: 605
#, no-wrap
msgid ""
"    /**\n"
"     * Run a specific seeder before each test.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $seeder = OrderStatusSeeder::class;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 603
# File: docs/master/database-testing.md, line: 607
#, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/database-testing.md, line: 603
# File: docs/master/database-testing.md, line: 607
#, no-wrap
msgid "Available Assertions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 606
# File: docs/master/database-testing.md, line: 610
msgid "Laravel provides several database assertions for your [PHPUnit](https://phpunit.de/) feature tests. We'll discuss each of these assertions below."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 608
# File: docs/master/database-testing.md, line: 612
#, no-wrap
msgid "<a name=\"assert-database-count\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 608
# File: docs/master/database-testing.md, line: 612
#, no-wrap
msgid "assertDatabaseCount"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 611
# File: docs/master/database-testing.md, line: 615
msgid "Assert that a table in the database contains the given number of records:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 613
# File: docs/master/database-testing.md, line: 617
#, no-wrap
msgid "    $this->assertDatabaseCount('users', 5);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 615
# File: docs/master/database-testing.md, line: 619
#, no-wrap
msgid "<a name=\"assert-database-has\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 615
# File: docs/master/database-testing.md, line: 619
#, no-wrap
msgid "assertDatabaseHas"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 618
# File: docs/master/database-testing.md, line: 622
msgid "Assert that a table in the database contains records matching the given key / value query constraints:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 622
# File: docs/master/database-testing.md, line: 626
#, no-wrap
msgid ""
"    $this->assertDatabaseHas('users', [\n"
"        'email' => 'sally@example.com',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 624
# File: docs/master/database-testing.md, line: 628
#, no-wrap
msgid "<a name=\"assert-database-missing\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 624
# File: docs/master/database-testing.md, line: 628
#, no-wrap
msgid "assertDatabaseMissing"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 627
# File: docs/master/database-testing.md, line: 631
msgid "Assert that a table in the database does not contain records matching the given key / value query constraints:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 631
# File: docs/master/database-testing.md, line: 635
#, no-wrap
msgid ""
"    $this->assertDatabaseMissing('users', [\n"
"        'email' => 'sally@example.com',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 633
# File: docs/master/database-testing.md, line: 637
#, no-wrap
msgid "<a name=\"assert-deleted\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 633
# File: docs/master/database-testing.md, line: 637
#, no-wrap
msgid "assertDeleted"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 636
# File: docs/master/database-testing.md, line: 640
msgid "The `assertDeleted` asserts that a given Eloquent model has been deleted from the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 640
# File: docs/master/database-testing.md, line: 644
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 642
# File: docs/8.x/database-testing.md, line: 670
# File: docs/master/database-testing.md, line: 646
# File: docs/master/database-testing.md, line: 674
#, no-wrap
msgid "    $user->delete();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 644
# File: docs/master/database-testing.md, line: 648
#, no-wrap
msgid "    $this->assertDeleted($user);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 646
# File: docs/master/database-testing.md, line: 650
msgid "The `assertSoftDeleted` method may be used to assert a given Eloquent model has been \"soft deleted\":"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 648
# File: docs/master/database-testing.md, line: 652
#, no-wrap
msgid "    $this->assertSoftDeleted($user);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 650
# File: docs/master/database-testing.md, line: 654
#, no-wrap
msgid "<a name=\"assert-model-exists\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 650
# File: docs/master/database-testing.md, line: 654
#, no-wrap
msgid "assertModelExists"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 653
# File: docs/master/database-testing.md, line: 657
msgid "Assert that a given model exists in the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 659
# File: docs/master/database-testing.md, line: 663
#, no-wrap
msgid "    $this->assertModelExists($user);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 661
# File: docs/master/database-testing.md, line: 665
#, no-wrap
msgid "<a name=\"assert-model-missing\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/database-testing.md, line: 661
# File: docs/master/database-testing.md, line: 665
#, no-wrap
msgid "assertModelMissing"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 664
# File: docs/master/database-testing.md, line: 668
msgid "Assert that a given model does not exist in the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/database-testing.md, line: 671
# File: docs/master/database-testing.md, line: 675
#, no-wrap
msgid "    $this->assertModelMissing($user);\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/database-testing.md, line: 59
msgid "The `Illuminate\\Foundation\\Testing\\RefreshDatabase` trait does not migrate your database if your schema is up to date. Instead, it will only execute the test within a database transaction. Therefore, any records added to the database by test cases that do not use this trait may still exist in the database."
msgstr ""
#
#. type: Plain text
# File: docs/master/database-testing.md, line: 61
msgid "If you would like to totally reset the database using migrations, you may use the `Illuminate\\Foundation\\Testing\\DatabaseMigrations` trait instead. However, the `DatabaseMigrations` trait is significantly slower than the `RefreshDatabase` trait."
msgstr ""
