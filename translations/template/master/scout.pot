# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/scout.md:1
#, no-wrap
msgid "Laravel Scout"
msgstr ""

#. type: Bullet: '- '
#: docs/master/scout.md:26
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:26
#, no-wrap
msgid ""
"- [Installation](#installation)\n"
"    - [Driver Prerequisites](#driver-prerequisites)\n"
"    - [Queueing](#queueing)\n"
"- [Configuration](#configuration)\n"
"    - [Configuring Model Indexes](#configuring-model-indexes)\n"
"    - [Configuring Searchable Data](#configuring-searchable-data)\n"
"    - [Configuring The Model ID](#configuring-the-model-id)\n"
"    - [Identifying Users](#identifying-users)\n"
"- [Indexing](#indexing)\n"
"    - [Batch Import](#batch-import)\n"
"    - [Adding Records](#adding-records)\n"
"    - [Updating Records](#updating-records)\n"
"    - [Removing Records](#removing-records)\n"
"    - [Pausing Indexing](#pausing-indexing)\n"
"    - [Conditionally Searchable Model "
"Instances](#conditionally-searchable-model-instances)\n"
"- [Searching](#searching)\n"
"    - [Where Clauses](#where-clauses)\n"
"    - [Pagination](#pagination)\n"
"    - [Soft Deleting](#soft-deleting)\n"
"    - [Customizing Engine Searches](#customizing-engine-searches)\n"
"- [Custom Engines](#custom-engines)\n"
"- [Builder Macros](#builder-macros)\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:28
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:28
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:31
msgid ""
"Laravel Scout provides a simple, driver based solution for adding full-text "
"search to your [Eloquent models](/docs/{{version}}/eloquent). Using model "
"observers, Scout will automatically keep your search indexes in sync with "
"your Eloquent records."
msgstr ""

#. type: Plain text
#: docs/master/scout.md:33
msgid ""
"Currently, Scout ships with an [Algolia](https://www.algolia.com/) driver; "
"however, writing custom drivers is simple and you are free to extend Scout "
"with your own search implementations."
msgstr ""

#. type: Plain text
#: docs/master/scout.md:35
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:35
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:38
msgid "First, install Scout via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:40
#, no-wrap
msgid "    composer require laravel/scout\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:42
msgid ""
"After installing Scout, you should publish the Scout configuration file "
"using the `vendor:publish` Artisan command. This command will publish the "
"`scout.php` configuration file to your application's `config` directory:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:44
#, no-wrap
msgid ""
"    php artisan vendor:publish "
"--provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:46
msgid ""
"Finally, add the `Laravel\\Scout\\Searchable` trait to the model you would "
"like to make searchable. This trait will register a model observer that will "
"automatically keep the model in sync with your search driver:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:48 docs/master/scout.md:87 docs/master/scout.md:114 docs/master/scout.md:145
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:50 docs/master/scout.md:89 docs/master/scout.md:116 docs/master/scout.md:147
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:53 docs/master/scout.md:92 docs/master/scout.md:119 docs/master/scout.md:150
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Laravel\\Scout\\Searchable;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:58
#, no-wrap
msgid ""
"    class Post extends Model\n"
"    {\n"
"        use Searchable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:60
#, no-wrap
msgid "<a name=\"driver-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:60
#, no-wrap
msgid "Driver Prerequisites"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:63
#, no-wrap
msgid "<a name=\"algolia\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/scout.md:63
#, no-wrap
msgid "Algolia"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:66
msgid ""
"When using the Algolia driver, you should configure your Algolia `id` and "
"`secret` credentials in your `config/scout.php` configuration file. Once "
"your credentials have been configured, you will also need to install the "
"Algolia PHP SDK via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:68
#, no-wrap
msgid "    composer require algolia/algoliasearch-client-php\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:70
#, no-wrap
msgid "<a name=\"queueing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:70
#, no-wrap
msgid "Queueing"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:73
msgid ""
"While not strictly required to use Scout, you should strongly consider "
"configuring a [queue driver](/docs/{{version}}/queues) before using the "
"library. Running a queue worker will allow Scout to queue all operations "
"that sync your model information to your search indexes, providing much "
"better response times for your application's web interface."
msgstr ""

#. type: Plain text
#: docs/master/scout.md:75
msgid ""
"Once you have configured a queue driver, set the value of the `queue` option "
"in your `config/scout.php` configuration file to `true`:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:77
#, no-wrap
msgid "    'queue' => true,\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:79
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:79
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:82
#, no-wrap
msgid "<a name=\"configuring-model-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:82
#, no-wrap
msgid "Configuring Model Indexes"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:85
msgid ""
"Each Eloquent model is synced with a given search \"index\", which contains "
"all of the searchable records for that model. In other words, you can think "
"of each index like a MySQL table. By default, each model will be persisted "
"to an index matching the model's typical \"table\" name. Typically, this is "
"the plural form of the model name; however, you are free to customize the "
"model's index by overriding the `searchableAs` method on the model:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:96 docs/master/scout.md:123
#, no-wrap
msgid ""
"    class Post extends Model\n"
"    {\n"
"        use Searchable;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:107
#, no-wrap
msgid ""
"        /**\n"
"         * Get the name of the index associated with the model.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function searchableAs()\n"
"        {\n"
"            return 'posts_index';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:109
#, no-wrap
msgid "<a name=\"configuring-searchable-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:109
#, no-wrap
msgid "Configuring Searchable Data"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:112
msgid ""
"By default, the entire `toArray` form of a given model will be persisted to "
"its search index. If you would like to customize the data that is "
"synchronized to the search index, you may override the `toSearchableArray` "
"method on the model:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:132
#, no-wrap
msgid ""
"        /**\n"
"         * Get the indexable data array for the model.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function toSearchableArray()\n"
"        {\n"
"            $array = $this->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:134
#, no-wrap
msgid "            // Customize the data array...\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:138
#, no-wrap
msgid ""
"            return $array;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:140
#, no-wrap
msgid "<a name=\"configuring-the-model-id\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:140
#, no-wrap
msgid "Configuring The Model ID"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:143
msgid ""
"By default, Scout will use the primary key of the model as model's unique ID "
"/ key that is stored in the search index. If you need to customize this "
"behavior, you may override the `getScoutKey` and the `getScoutKeyName` "
"methods on the model:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:154
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        use Searchable;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:164
#, no-wrap
msgid ""
"        /**\n"
"         * Get the value used to index the model.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        public function getScoutKey()\n"
"        {\n"
"            return $this->email;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:175
#, no-wrap
msgid ""
"        /**\n"
"         * Get the key name used to index the model.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        public function getScoutKeyName()\n"
"        {\n"
"            return 'email';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:177
#, no-wrap
msgid "<a name=\"identifying-users\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:177
#, no-wrap
msgid "Identifying Users"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:180
msgid ""
"Scout also allows you to auto identify users when using "
"[Algolia](https://algolia.com). Associating the authenticated user with "
"search operations may be helpful when viewing your search analytics within "
"Algolia's dashboard. You can enable user identification by defining a "
"`SCOUT_IDENTIFY` environment variable as `true` in your application's `.env` "
"file:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:182
#, no-wrap
msgid "    SCOUT_IDENTIFY=true\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:184
msgid ""
"Enabling this feature this will also pass the request's IP address and your "
"authenticated user's primary identifier to Algolia so this data is "
"associated with any search request that is made by the user."
msgstr ""

#. type: Plain text
#: docs/master/scout.md:186
#, no-wrap
msgid "<a name=\"indexing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:186
#, no-wrap
msgid "Indexing"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:189
#, no-wrap
msgid "<a name=\"batch-import\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:189
#, no-wrap
msgid "Batch Import"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:192
msgid ""
"If you are installing Scout into an existing project, you may already have "
"database records you need to import into your indexes. Scout provides a "
"`scout:import` Artisan command that you may use to import all of your "
"existing records into your search indexes:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:194
#, no-wrap
msgid "    php artisan scout:import \"App\\Models\\Post\"\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:196
msgid ""
"The `flush` command may be used to remove all of a model's records from your "
"search indexes:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:198
#, no-wrap
msgid "    php artisan scout:flush \"App\\Models\\Post\"\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:200
#, no-wrap
msgid "<a name=\"modifying-the-import-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/scout.md:200
#, no-wrap
msgid "Modifying The Import Query"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:203
msgid ""
"If you would like to modify the query that is used to retrieve all of your "
"models for batch importing, you may define a `makeAllSearchableUsing` method "
"on your model. This is a great place to add any eager relationship loading "
"that may be necessary before importing your models:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:214
#, no-wrap
msgid ""
"    /**\n"
"     * Modify the query used to retrieve models when making all of the "
"models searchable.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    protected function makeAllSearchableUsing($query)\n"
"    {\n"
"        return $query->with('author');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:216
#, no-wrap
msgid "<a name=\"adding-records\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:216
#, no-wrap
msgid "Adding Records"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:219
msgid ""
"Once you have added the `Laravel\\Scout\\Searchable` trait to a model, all "
"you need to do is `save` or `create` a model instance and it will "
"automatically be added to your search index. If you have configured Scout to "
"[use queues](#queueing) this operation will be performed in the background "
"by your queue worker:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:221 docs/master/scout.md:234 docs/master/scout.md:253 docs/master/scout.md:278 docs/master/scout.md:301 docs/master/scout.md:329 docs/master/scout.md:360 docs/master/scout.md:369 docs/master/scout.md:407 docs/master/scout.md:507
#, no-wrap
msgid "    use App\\Models\\Order;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:223
#, no-wrap
msgid "    $order = new Order;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:225
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:227 docs/master/scout.md:259
#, no-wrap
msgid "    $order->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:229
#, no-wrap
msgid "<a name=\"adding-records-via-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/scout.md:229
#, no-wrap
msgid "Adding Records Via Query"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:232
msgid ""
"If you would like to add a collection of models to your search index via an "
"Eloquent query, you may chain the `searchable` method onto the Eloquent "
"query. The `searchable` method will [chunk the "
"results](/docs/{{version}}/eloquent#chunking-results) of the query and add "
"the records to your search index. Again, if you have configured Scout to use "
"queues, all of the chunks will be imported in the background by your queue "
"workers:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:236 docs/master/scout.md:263
#, no-wrap
msgid "    Order::where('price', '>', 100)->searchable();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:238
msgid ""
"You may also call the `searchable` method on an Eloquent relationship "
"instance:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:240 docs/master/scout.md:267
#, no-wrap
msgid "    $user->orders()->searchable();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:242
msgid ""
"Or, if you already have a collection of Eloquent models in memory, you may "
"call the `searchable` method on the collection instance to add the model "
"instances to their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:244 docs/master/scout.md:271
#, no-wrap
msgid "    $orders->searchable();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:246
#, no-wrap
msgid ""
"> {tip} The `searchable` method can be considered an \"upsert\" "
"operation. In other words, if the model record is already in your index, it "
"will be updated. If it does not exist in the search index, it will be added "
"to the index.\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:248
#, no-wrap
msgid "<a name=\"updating-records\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:248
#, no-wrap
msgid "Updating Records"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:251
msgid ""
"To update a searchable model, you only need to update the model instance's "
"properties and `save` the model to your database. Scout will automatically "
"persist the changes to your search index:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:255 docs/master/scout.md:280
#, no-wrap
msgid "    $order = Order::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:257
#, no-wrap
msgid "    // Update the order...\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:261
msgid ""
"You may also invoke the `searchable` method on an Eloquent query instance to "
"update a collection of models. If the models do not exist in your search "
"index, they will be created:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:265
msgid ""
"If you would like to update the search index records for all of the models "
"in a relationship, you may invoke the `searchable` on the relationship "
"instance:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:269
msgid ""
"Or, if you already have a collection of Eloquent models in memory, you may "
"call the `searchable` method on the collection instance to update the model "
"instances in their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:273
#, no-wrap
msgid "<a name=\"removing-records\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:273
#, no-wrap
msgid "Removing Records"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:276
msgid ""
"To remove a record from your index you may simply `delete` the model from "
"the database. This may be done even if you are using [soft "
"deleted](/docs/{{version}}/eloquent#soft-deleting) models:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:282
#, no-wrap
msgid "    $order->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:284
msgid ""
"If you do not want to retrieve the model before deleting the record, you may "
"use the `unsearchable` method on an Eloquent query instance:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:286
#, no-wrap
msgid "    Order::where('price', '>', 100)->unsearchable();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:288
msgid ""
"If you would like to remove the search index records for all of the models "
"in a relationship, you may invoke the `unsearchable` on the relationship "
"instance:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:290
#, no-wrap
msgid "    $user->orders()->unsearchable();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:292
msgid ""
"Or, if you already have a collection of Eloquent models in memory, you may "
"call the `unsearchable` method on the collection instance to remove the "
"model instances from their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:294
#, no-wrap
msgid "    $orders->unsearchable();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:296
#, no-wrap
msgid "<a name=\"pausing-indexing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:296
#, no-wrap
msgid "Pausing Indexing"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:299
msgid ""
"Sometimes you may need to perform a batch of Eloquent operations on a model "
"without syncing the model data to your search index. You may do this using "
"the `withoutSyncingToSearch` method. This method accepts a single closure "
"which will be immediately executed. Any model operations that occur within "
"the closure will not be synced to the model's index:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:305
#, no-wrap
msgid ""
"    Order::withoutSyncingToSearch(function () {\n"
"        // Perform model actions...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:307
#, no-wrap
msgid "<a name=\"conditionally-searchable-model-instances\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:307
#, no-wrap
msgid "Conditionally Searchable Model Instances"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:310
msgid ""
"Sometimes you may need to only make a model searchable under certain "
"conditions. For example, imagine you have `App\\Models\\Post` model that may "
"be in one of two states: \"draft\" and \"published\". You may only want to "
"allow \"published\" posts to be searchable. To accomplish this, you may "
"define a `shouldBeSearchable` method on your model:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:320
#, no-wrap
msgid ""
"    /**\n"
"     * Determine if the model should be searchable.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function shouldBeSearchable()\n"
"    {\n"
"        return $this->isPublished();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:322
msgid ""
"The `shouldBeSearchable` method is only applied when manipulating models "
"through the `save` and `create` methods, queries, or relationships. Directly "
"making models or collections searchable using the `searchable` method will "
"override the result of the `shouldBeSearchable` method."
msgstr ""

#. type: Plain text
#: docs/master/scout.md:324
#, no-wrap
msgid "<a name=\"searching\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:324
#, no-wrap
msgid "Searching"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:327
msgid ""
"You may begin searching a model using the `search` method. The search method "
"accepts a single string that will be used to search your models. You should "
"then chain the `get` method onto the search query to retrieve the Eloquent "
"models that match the given search query:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:331
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:333
msgid ""
"Since Scout searches return a collection of Eloquent models, you may even "
"return the results directly from a route or controller and they will "
"automatically be converted to JSON:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:336 docs/master/scout.md:392
#, no-wrap
msgid ""
"    use App\\Models\\Order;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:340
#, no-wrap
msgid ""
"    Route::get('/search', function (Request $request) {\n"
"        return Order::search($request->search)->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:342
msgid ""
"If you would like to get the raw search results before they are converted to "
"Eloquent models, you may use the `raw` method:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:344
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->raw();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:346
#, no-wrap
msgid "<a name=\"custom-indexes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/scout.md:346
#, no-wrap
msgid "Custom Indexes"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:349
msgid ""
"Search queries will typically be performed on the index specified by the "
"model's [`searchableAs`](#configuring-model-indexes) method. However, you "
"may use the `within` method to specify a custom index that should be "
"searched instead:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:353
#, no-wrap
msgid ""
"    $orders = Order::search('Star Trek')\n"
"        ->within('tv_shows_popularity_desc')\n"
"        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:355
#, no-wrap
msgid "<a name=\"where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:355
#, no-wrap
msgid "Where Clauses"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:358
msgid ""
"Scout allows you to add simple \"where\" clauses to your search "
"queries. Currently, these clauses only support basic numeric equality checks "
"and are primarily useful for scoping search queries by an owner ID. Since a "
"search index is not a relational database, more advanced \"where\" clauses "
"are not currently supported:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:362
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->where('user_id', 1)->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:364
#, no-wrap
msgid "<a name=\"pagination\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:364
#, no-wrap
msgid "Pagination"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:367
msgid ""
"In addition to retrieving a collection of models, you may paginate your "
"search results using the `paginate` method. This method will return an "
"`Illuminate\\Pagination\\LengthAwarePaginator` instance just as if you had "
"[paginated a traditional Eloquent query](/docs/{{version}}/pagination):"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:371
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->paginate();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:373
msgid ""
"You may specify how many models to retrieve per page by passing the amount "
"as the first argument to the `paginate` method:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:375
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:377
msgid ""
"Once you have retrieved the results, you may display the results and render "
"the page links using [Blade](/docs/{{version}}/blade) just as if you had "
"paginated a traditional Eloquent query:"
msgstr ""

#. type: Code fence info string
#: docs/master/scout.md:378
#, no-wrap
msgid "html"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:378
#, no-wrap
msgid ""
"<div class=\"container\">\n"
"    @foreach ($orders as $order)\n"
"        {{ $order->price }}\n"
"    @endforeach\n"
"</div>\n"
"\n"
"{{ $orders->links() }}\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:389
msgid ""
"Of course, if you would like to retrieve the pagination results as JSON, you "
"may return the paginator instance directly from a route or controller:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:396
#, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        return Order::search($request->input('query'))->paginate(15);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:398
#, no-wrap
msgid "<a name=\"soft-deleting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:398
#, no-wrap
msgid "Soft Deleting"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:401
msgid ""
"If your indexed models are [soft "
"deleting](/docs/{{version}}/eloquent#soft-deleting) and you need to search "
"your soft deleted models, set the `soft_delete` option of the "
"`config/scout.php` configuration file to `true`:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:403
#, no-wrap
msgid "    'soft_delete' => true,\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:405
msgid ""
"When this configuration option is `true`, Scout will not remove soft deleted "
"models from the search index. Instead, it will set a hidden `__soft_deleted` "
"attribute on the indexed record. Then, you may use the `withTrashed` or "
"`onlyTrashed` methods to retrieve the soft deleted records when searching:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:410
#, no-wrap
msgid ""
"    // Include trashed records when retrieving results...\n"
"    $orders = Order::search('Star Trek')->withTrashed()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:413
#, no-wrap
msgid ""
"    // Only include trashed records when retrieving results...\n"
"    $orders = Order::search('Star Trek')->onlyTrashed()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:415
#, no-wrap
msgid ""
"> {tip} When a soft deleted model is permanently deleted using "
"`forceDelete`, Scout will remove it from the search index automatically.\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:417
#, no-wrap
msgid "<a name=\"customizing-engine-searches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/scout.md:417
#, no-wrap
msgid "Customizing Engine Searches"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:420
msgid ""
"If you need to perform advanced customization of the search behavior of an "
"engine you may pass a closure as the second argument to the `search` "
"method. For example, you could use this callback to add geo-location data to "
"your search options before the search query is passed to Algolia:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:423
#, no-wrap
msgid ""
"    use Algolia\\AlgoliaSearch\\SearchIndex;\n"
"    use App\\Models\\Order;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:431
#, no-wrap
msgid ""
"    Order::search(\n"
"        'Star Trek',\n"
"        function (SearchIndex $algolia, string $query, array $options) {\n"
"            $options['body']['query']['bool']['filter']['geo_distance'] = "
"[\n"
"                'distance' => '1000km',\n"
"                'location' => ['lat' => 36, 'lon' => 111],\n"
"            ];\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:435
#, no-wrap
msgid ""
"            return $algolia->search($query, $options);\n"
"        }\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:437
#, no-wrap
msgid "<a name=\"custom-engines\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:437
#, no-wrap
msgid "Custom Engines"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:440
#, no-wrap
msgid "<a name=\"writing-the-engine\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/scout.md:440
#, no-wrap
msgid "Writing The Engine"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:443
msgid ""
"If one of the built-in Scout search engines doesn't fit your needs, you may "
"write your own custom engine and register it with Scout. Your engine should "
"extend the `Laravel\\Scout\\Engines\\Engine` abstract class. This abstract "
"class contains eight methods your custom engine must implement:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:445
#, no-wrap
msgid "    use Laravel\\Scout\\Builder;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:454
#, no-wrap
msgid ""
"    abstract public function update($models);\n"
"    abstract public function delete($models);\n"
"    abstract public function search(Builder $builder);\n"
"    abstract public function paginate(Builder $builder, $perPage, $page);\n"
"    abstract public function mapIds($results);\n"
"    abstract public function map(Builder $builder, $results, $model);\n"
"    abstract public function getTotalCount($results);\n"
"    abstract public function flush($model);\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:456
msgid ""
"You may find it helpful to review the implementations of these methods on "
"the `Laravel\\Scout\\Engines\\AlgoliaEngine` class. This class will provide "
"you with a good starting point for learning how to implement each of these "
"methods in your own engine."
msgstr ""

#. type: Plain text
#: docs/master/scout.md:458
#, no-wrap
msgid "<a name=\"registering-the-engine\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/scout.md:458
#, no-wrap
msgid "Registering The Engine"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:461
msgid ""
"Once you have written your custom engine, you may register it with Scout "
"using the `extend` method of the Scout engine manager. Scout's engine "
"manager may be resolved from the Laravel service container. You should call "
"the `extend` method from the `boot` method of your "
"`App\\Providers\\AppServiceProvider` class or any other service provider "
"used by your application:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:464
#, no-wrap
msgid ""
"    use App\\ScoutExtensions\\MySqlSearchEngine\n"
"    use Laravel\\Scout\\EngineManager;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:476
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        resolve(EngineManager::class)->extend('mysql', function () {\n"
"            return new MySqlSearchEngine;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:478
msgid ""
"Once your engine has been registered, you may specify it as your default "
"Scout `driver` in your application's `config/scout.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:480
#, no-wrap
msgid "    'driver' => 'mysql',\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:482
#, no-wrap
msgid "<a name=\"builder-macros\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/scout.md:482
#, no-wrap
msgid "Builder Macros"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:485
msgid ""
"If you would like to define a custom Scout search builder method, you may "
"use the `macro` method on the `Laravel\\Scout\\Builder` class. Typically, "
"\"macros\" should be defined within a [service "
"provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:489
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Response;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use Laravel\\Scout\\Builder;\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:503
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Builder::macro('count', function () {\n"
"            return $this->engine()->getTotalCount(\n"
"                $this->engine()->search($this)\n"
"            );\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:505
msgid ""
"The `macro` function accepts a macro name as its first argument and a "
"closure as its second argument. The macro's closure will be executed when "
"calling the macro name from a `Laravel\\Scout\\Builder` implementation:"
msgstr ""

#. type: Plain text
#: docs/master/scout.md:508
#, no-wrap
msgid "    Order::search('Star Trek')->count();\n"
msgstr ""
