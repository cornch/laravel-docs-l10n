msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/filesystem.pot\n"
"X-Crowdin-File-ID: 73\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-02-11 10:27\n"

#: docs/10.x/filesystem.md:block 1 (header)
msgid "File Storage"
msgstr "檔案存放空間"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[The Local Driver](#the-local-driver)"
msgstr "[Local Driver](#the-local-driver)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[The Public Disk](#the-public-disk)"
msgstr "[Public Disk](#the-public-disk)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr "[Driver 前置需求](#driver-prerequisites)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Scoped & Read-Only Filesystems](#scoped-and-read-only-filesystems)"
msgstr "[限定範圍與唯讀的檔案系統](#scoped-and-read-only-filesystems)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Amazon S3 Compatible Filesystems](#amazon-s3-compatible-filesystems)"
msgstr "[與 Amazon S3 相容的檔案系統](#amazon-s3-compatible-filesystems)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Obtaining Disk Instances](#obtaining-disk-instances)"
msgstr "[取得 Disk 實體](#obtaining-disk-instances)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[On-Demand Disks](#on-demand-disks)"
msgstr "[隨需建立的 Disk](#on-demand-disks)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Retrieving Files](#retrieving-files)"
msgstr "[取得檔案](#retrieving-files)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Downloading Files](#downloading-files)"
msgstr "[下載檔案](#downloading-files)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[File URLs](#file-urls)"
msgstr "[檔案 URL](#file-urls)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[File Metadata](#file-metadata)"
msgstr "[檔案的詮釋資料](#file-metadata)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Storing Files](#storing-files)"
msgstr "[保存檔案](#storing-files)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Prepending & Appending To Files](#prepending-appending-to-files)"
msgstr "[將內容寫到檔案的最前端或最後端](#prepending-appending-to-files)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Copying & Moving Files](#copying-moving-files)"
msgstr "[複製與移動檔案](#copying-moving-files)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Automatic Streaming](#automatic-streaming)"
msgstr "[自動串流](#automatic-streaming)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[File Uploads](#file-uploads)"
msgstr "[檔案上傳](#file-uploads)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[File Visibility](#file-visibility)"
msgstr "[檔案的可見性 (Visibility)](#file-visibility)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Deleting Files](#deleting-files)"
msgstr "[刪除檔案](#deleting-files)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Directories](#directories)"
msgstr "[目錄](#directories)"

#: docs/10.x/filesystem.md:block 2 (unordered list)
msgid "[Custom Filesystems](#custom-filesystems)"
msgstr "[自訂檔案系統](#custom-filesystems)"

#: docs/10.x/filesystem.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/filesystem.md:block 5 (paragraph)
msgid "Laravel provides a powerful filesystem abstraction thanks to the wonderful [Flysystem](https://github.com/thephpleague/flysystem) PHP package by Frank de Jonge. The Laravel Flysystem integration provides simple drivers for working with local filesystems, SFTP, and Amazon S3. Even better, it's amazingly simple to switch between these storage options between your local development machine and production server as the API remains the same for each system."
msgstr "多虧了 [Flysystem](https://github.com/thephpleague/flysystem)，Laravel 提供了強大的檔案系統抽象介面。Flysystem 是 Frank de Jonge 提供的一個 PHP 套件。Laravel 整合 Flysystem 來提供多個簡單的 Driver，可處理本機檔案系統、SFTP、Amazon S3 等。甚至，在本機開發環境與正式伺服器間交換使用各個不同的儲存空間非常地簡單，且每個儲存系統都有相同的 API。"

#: docs/10.x/filesystem.md:block 7 (header)
msgid "Configuration"
msgstr "設定"

#: docs/10.x/filesystem.md:block 8 (paragraph)
msgid "Laravel's filesystem configuration file is located at `config/filesystems.php`. Within this file, you may configure all of your filesystem \"disks\". Each disk represents a particular storage driver and storage location. Example configurations for each supported driver are included in the configuration file so you can modify the configuration to reflect your storage preferences and credentials."
msgstr "Laravel 的檔案系統設定檔位在 `config/filesystems.php`。在這個檔案中，我們可以設定所有的檔案系統「^[Disk](磁碟)」。各個 Disk 都代表了一個特定的儲存空間 Driver 與儲存位置。該設定檔內已包含了各個支援 Driver 的範例設定，讓你能修改這些設定來反映出儲存空間偏好與認證方式。"

#: docs/10.x/filesystem.md:block 9 (paragraph)
msgid "The `local` driver interacts with files stored locally on the server running the Laravel application while the `s3` driver is used to write to Amazon's S3 cloud storage service."
msgstr "`local` Driver 負責處理保存在執行該 Laravel 專案之本機伺服器上的檔案。而 `s3` Driver 則用來將檔案寫入 Amazon 的 S3 雲端儲存服務。"

#: docs/10.x/filesystem.md:block 10 (quote)
msgid "**Note** You may configure as many disks as you like and may even have multiple disks that use the same driver."
msgstr "**Note** 可以隨意設定多個 Disk，甚至也可以設定多個使用相同 Driver 的 Disk。"

#: docs/10.x/filesystem.md:block 12 (header)
msgid "The Local Driver"
msgstr "「Local」Driver"

#: docs/10.x/filesystem.md:block 13 (paragraph)
msgid "When using the `local` driver, all file operations are relative to the `root` directory defined in your `filesystems` configuration file. By default, this value is set to the `storage/app` directory. Therefore, the following method would write to `storage/app/example.txt`:"
msgstr "使用 `local` Driver 時，所有的檔案操作都相對於 `filesystems` 設定檔中定義的 `root` 根目錄。預設情況下，這個值設為 `storage/app` 目錄。因此，下列方法會寫入 `storage/app/example.txt`："

#: docs/10.x/filesystem.md:block 14 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::disk('local')->put('example.txt', 'Contents');\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::disk('local')->put('example.txt', 'Contents');\n"

#: docs/10.x/filesystem.md:block 16 (header)
msgid "The Public Disk"
msgstr "「Public」Disk"

#: docs/10.x/filesystem.md:block 17 (paragraph)
msgid "The `public` disk included in your application's `filesystems` configuration file is intended for files that are going to be publicly accessible. By default, the `public` disk uses the `local` driver and stores its files in `storage/app/public`."
msgstr "專案中的 `filesystems` 設定檔內有個 `public` Disk，`public` Disk 是用來處理要提供公開存取的檔案。預設情況下，`public` Disk 使用 `local` Driver，並將檔案保存在 `storage/app/public`。"

#: docs/10.x/filesystem.md:block 18 (paragraph)
msgid "To make these files accessible from the web, you should create a symbolic link from `public/storage` to `storage/app/public`. Utilizing this folder convention will keep your publicly accessible files in one directory that can be easily shared across deployments when using zero down-time deployment systems like [Envoyer](https://envoyer.io)."
msgstr "為了這些檔案可在網頁上存取，請建立一個 `public/storage` 到 `storage/app/public` 的^[符號連結](Symbolic Link)。使用這個資料夾慣例來把所有可公開存取的檔案放到同一個資料夾內，就你在使用如 [Envoyer](https://envoyer.io) 這類不停機部署系統時也能輕鬆的在多個部署間共用這個資料夾。"

#: docs/10.x/filesystem.md:block 19 (paragraph)
msgid "To create the symbolic link, you may use the `storage:link` Artisan command:"
msgstr "若要建立符號連結，可使用 `storage:link` Artisan 指令："

#: docs/10.x/filesystem.md:block 20 (code)
msgid "php artisan storage:link\n"
msgstr "php artisan storage:link\n"

#: docs/10.x/filesystem.md:block 21 (paragraph)
msgid "Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the `asset` helper:"
msgstr "保存檔案並建立好符號連結後，就可以使用 `asset` 輔助函式來建立該檔案的 URL："

#: docs/10.x/filesystem.md:block 22 (code)
msgid "echo asset('storage/file.txt');\n"
msgstr "echo asset('storage/file.txt');\n"

#: docs/10.x/filesystem.md:block 23 (paragraph)
msgid "You may configure additional symbolic links in your `filesystems` configuration file. Each of the configured links will be created when you run the `storage:link` command:"
msgstr "也可以在 `filesystems` 設定檔中設定其他符號連結。在執行 `storage:link` 指令時，會建立設定中的各個符號連結："

#: docs/10.x/filesystem.md:block 24 (code)
msgid "'links' => [\n"
"    public_path('storage') => storage_path('app/public'),\n"
"    public_path('images') => storage_path('app/images'),\n"
"],\n"
msgstr "'links' => [\n"
"    public_path('storage') => storage_path('app/public'),\n"
"    public_path('images') => storage_path('app/images'),\n"
"],\n"

#: docs/10.x/filesystem.md:block 26 (header)
msgid "Driver Prerequisites"
msgstr "Driver 的前置需求"

#: docs/10.x/filesystem.md:block 28 (header)
msgid "S3 Driver Configuration"
msgstr "S3 Driver 設定"

#: docs/10.x/filesystem.md:block 29 (paragraph)
msgid "Before using the S3 driver, you will need to install the Flysystem S3 package via the Composer package manager:"
msgstr "在使用 S3 Driver 前，需要先使用 Composer 套件管理員安裝 Flysystem S3 套件："

#: docs/10.x/filesystem.md:block 30 (code)
msgid "composer require league/flysystem-aws-s3-v3 \"^3.0\"\n"
msgstr "composer require league/flysystem-aws-s3-v3 \"^3.0\"\n"

#: docs/10.x/filesystem.md:block 31 (paragraph)
msgid "The S3 driver configuration information is located in your `config/filesystems.php` configuration file. This file contains an example configuration array for an S3 driver. You are free to modify this array with your own S3 configuration and credentials. For convenience, these environment variables match the naming convention used by the AWS CLI."
msgstr "S3 Driver 的設定資訊保存在 `config/filesystems.php` 設定檔內。這個檔案中包含了用於 S3 Driver 的範例設定。可以自行將陣列改為你的 S3 設定與認證資訊。為了方便起見，這些環境變數的名稱都符合 AWS CLI 使用的命名慣例。"

#: docs/10.x/filesystem.md:block 33 (header)
msgid "FTP Driver Configuration"
msgstr "FTP Driver 設定"

#: docs/10.x/filesystem.md:block 34 (paragraph)
msgid "Before using the FTP driver, you will need to install the Flysystem FTP package via the Composer package manager:"
msgstr "在使用 FTP Driver 前，需要先使用 Composer 套件管理員安裝 Flysystem FTP 套件："

#: docs/10.x/filesystem.md:block 35 (code)
msgid "composer require league/flysystem-ftp \"^3.0\"\n"
msgstr "composer require league/flysystem-ftp \"^3.0\"\n"

#: docs/10.x/filesystem.md:block 36 (paragraph)
msgid "Laravel's Flysystem integrations work great with FTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an FTP filesystem, you may use the configuration example below:"
msgstr "Laravel 的 Flysystem 整合可以完美配合 FTP。不過，Laravel 的預設 `filesystems.php` 設定檔中並未包含 FTP 的範例設定。若有需要設定 FTP 檔案系統，可使用下列範例設定："

#: docs/10.x/filesystem.md:block 37 (code)
msgid "'ftp' => [\n"
"    'driver' => 'ftp',\n"
"    'host' => env('FTP_HOST'),\n"
"    'username' => env('FTP_USERNAME'),\n"
"    'password' => env('FTP_PASSWORD'),\n\n"
"    // Optional FTP Settings...\n"
"    // 'port' => env('FTP_PORT', 21),\n"
"    // 'root' => env('FTP_ROOT'),\n"
"    // 'passive' => true,\n"
"    // 'ssl' => true,\n"
"    // 'timeout' => 30,\n"
"],\n"
msgstr "'ftp' => [\n"
"    'driver' => 'ftp',\n"
"    'host' => env('FTP_HOST'),\n"
"    'username' => env('FTP_USERNAME'),\n"
"    'password' => env('FTP_PASSWORD'),\n\n"
"    // 可選的 FTP 設定...\n"
"    // 'port' => env('FTP_PORT', 21),\n"
"    // 'root' => env('FTP_ROOT'),\n"
"    // 'passive' => true,\n"
"    // 'ssl' => true,\n"
"    // 'timeout' => 30,\n"
"],\n"

#: docs/10.x/filesystem.md:block 39 (header)
msgid "SFTP Driver Configuration"
msgstr "SFTP Driver 設定"

#: docs/10.x/filesystem.md:block 40 (paragraph)
msgid "Before using the SFTP driver, you will need to install the Flysystem SFTP package via the Composer package manager:"
msgstr "在使用 SFTP Driver 前，需要先使用 Composer 套件管理員安裝 Flysystem SFTP 套件："

#: docs/10.x/filesystem.md:block 41 (code)
msgid "composer require league/flysystem-sftp-v3 \"^3.0\"\n"
msgstr "composer require league/flysystem-sftp-v3 \"^3.0\"\n"

#: docs/10.x/filesystem.md:block 42 (paragraph)
msgid "Laravel's Flysystem integrations work great with SFTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an SFTP filesystem, you may use the configuration example below:"
msgstr "Laravel 的 Flysystem 整合可以完美配合 SFTP。不過，Laravel 的預設 `filesystems.php` 設定檔中並未包含 SFTP 的範例設定。若有需要設定 SFTP 檔案系統，可使用下列範例設定："

#: docs/10.x/filesystem.md:block 43 (code)
msgid "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n\n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'passphrase' => env('SFTP_PASSPHRASE'),\n\n"
"    // Optional SFTP Settings...\n"
"    // 'hostFingerprint' => env('SFTP_HOST_FINGERPRINT'),\n"
"    // 'maxTries' => 4,\n"
"    // 'passphrase' => env('SFTP_PASSPHRASE'),\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT', ''),\n"
"    // 'timeout' => 30,\n"
"    // 'useAgent' => true,\n"
"],\n"
msgstr "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n"
"    \n"
"    // 設定 Basic 身份認證...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // 設定有加密密碼之基於 SSH 金鑰的身份認證...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'passphrase' => env('SFTP_PASSPHRASE'),\n\n"
"    // 可選的 SFTP 設定...\n"
"    // 'hostFingerprint' => env('SFTP_HOST_FINGERPRINT'),\n"
"    // 'maxTries' => 4,\n"
"    // 'passphrase' => env('SFTP_PASSPHRASE'),\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT', ''),\n"
"    // 'timeout' => 30,\n"
"    // 'useAgent' => true,\n"
"],\n"

#: docs/10.x/filesystem.md:block 45 (header)
msgid "Scoped & Read-Only Filesystems"
msgstr "限定範圍與唯讀的檔案系統"

#: docs/10.x/filesystem.md:block 46 (paragraph)
msgid "Scoped disks allow you to define a filesystem where all paths are automatically prefixed with a given path prefix. Before creating a scoped filesystem disk, you will need to install an additional Flysystem package via the Composer package manager:"
msgstr "使用限定範圍的 Disk，我們可以定義一個檔案系統，在該檔案系統中，所有的路徑都會自動被加上給定的路徑前置詞。在建立限定範圍的檔案系統 Disk 前，我們需要先使用 Composer 套件管理員安裝一個額外的 Flysystem 套件："

#: docs/10.x/filesystem.md:block 47 (code)
msgid "composer require league/flysystem-path-prefixing \"^3.0\"\n"
msgstr "composer require league/flysystem-path-prefixing \"^3.0\"\n"

#: docs/10.x/filesystem.md:block 48 (paragraph)
msgid "You may create a path scoped instance of any existing filesystem disk by defining a disk that utilizes the `scoped` driver. For example, you may create a disk which scopes your existing `s3` disk to a specific path prefix, and then every file operation using your scoped disk will utilize the specified prefix:"
msgstr "只要使用 `scoped` Driver，我們就可以使用任何現有的檔案系統 Disk 來定義限定路徑範圍的 Disk。舉例來說，我們可以建立一個 Disk，該 Disk 使用現有的 `s3` Disk，並將路徑限定在特定的路徑前置詞內。接著，使用這個限定範圍 Disk 的所有檔案操作都會在這個指定的前置詞下："

#: docs/10.x/filesystem.md:block 49 (code)
msgid "'s3-videos' => [\n"
"    'driver' => 'scoped',\n"
"    'disk' => 's3',\n"
"    'prefix' => 'path/to/videos',\n"
"],\n"
msgstr "'s3-videos' => [\n"
"    'driver' => 'scoped',\n"
"    'disk' => 's3',\n"
"    'prefix' => 'path/to/videos',\n"
"],\n"

#: docs/10.x/filesystem.md:block 50 (paragraph)
msgid "\"Read-only\" disks allow you to create filesystem disks that do not allow write operations. Before using the `read-only` configuration option, you will need to install an additional Flysystem package via the Composer package manager:"
msgstr "使用「唯讀」Disk，我們就能建立不允許任何寫入操作的檔案系統 Disk。在使用 `read-only` 組態設定選項前，我們還需要使用 Composer 套件管理員安裝一個額外的 Flysystem 套件："

#: docs/10.x/filesystem.md:block 51 (code)
msgid "composer require league/flysystem-read-only \"^3.0\"\n"
msgstr "composer require league/flysystem-read-only \"^3.0\"\n"

#: docs/10.x/filesystem.md:block 52 (paragraph)
msgid "Next, you may include the `read-only` configuration option in one or more of your disk's configuration arrays:"
msgstr "接著，我們可以在任何一個或多個 Disk 設定內加上 `read-only` 設定選項："

#: docs/10.x/filesystem.md:block 53 (code)
msgid "'s3-videos' => [\n"
"    'driver' => 's3',\n"
"    // ...\n"
"    'read-only' => true,\n"
"],\n"
msgstr "'s3-videos' => [\n"
"    'driver' => 's3',\n"
"    // ...\n"
"    'read-only' => true,\n"
"],\n"

#: docs/10.x/filesystem.md:block 55 (header)
msgid "Amazon S3 Compatible Filesystems"
msgstr "相容於 Amazon S3 的檔案系統"

#: docs/10.x/filesystem.md:block 56 (paragraph)
msgid "By default, your application's `filesystems` configuration file contains a disk configuration for the `s3` disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as [MinIO](https://github.com/minio/minio) or [DigitalOcean Spaces](https://www.digitalocean.com/products/spaces/)."
msgstr "預設情況下，專案的 `filesystems` 設定檔中已包含了一個 `s3` Disk 設定。除了以該 Disk 來使用 Amazon S3 外，還可以通過這個 Disk 來使用相容於 S3 的檔案存放服務，如 [MinIO](https://github.com/minio/minio) 或 [DigitalOcean Spaces](https://www.digitalocean.com/products/spaces/)。"

#: docs/10.x/filesystem.md:block 57 (paragraph)
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `endpoint` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr "一般來說，為 Disk 設定要使用服務的認證資訊後，就只需要更改 `endpoint` 設定選項即可。這個選項值通常是以 `AWS_ENDPOINT` 環境變數定義的："

#: docs/10.x/filesystem.md:block 58 (code)
msgid "'endpoint' => env('AWS_ENDPOINT', 'https://minio:9000'),\n"
msgstr "'endpoint' => env('AWS_ENDPOINT', 'https://minio:9000'),\n"

#: docs/10.x/filesystem.md:block 60 (header)
msgid "MinIO"
msgstr "MinIO"

#: docs/10.x/filesystem.md:block 61 (paragraph)
msgid "In order for Laravel's Flysystem integration to generate proper URLs when using MinIO, you should define the `AWS_URL` environment variable so that it matches your application's local URL and includes the bucket name in the URL path:"
msgstr "為了讓 Laravel 的 Flysystem 整合在使用 MinIO 時整合正確的 URL，請定義 `AWS_URL` 環境變數，並設定適用於專案本機 URL 的值，且該值應在 URL 路徑內包含 Bucket 名稱："

#: docs/10.x/filesystem.md:block 62 (code)
msgid "AWS_URL=http://localhost:9000/local\n"
msgstr "AWS_URL=http://localhost:9000/local\n"

#: docs/10.x/filesystem.md:block 63 (quote)
msgid "**Warning** Generating temporary storage URLs via the `temporaryUrl` method is not supported when using MinIO."
msgstr "**Warning** 使用 MinIO 時，不支援通過 `temporaryUrl` 方法來產生臨時儲存空間 URL。"

#: docs/10.x/filesystem.md:block 65 (header)
msgid "Obtaining Disk Instances"
msgstr "取得 Disk 實體"

#: docs/10.x/filesystem.md:block 66 (paragraph)
msgid "The `Storage` facade may be used to interact with any of your configured disks. For example, you may use the `put` method on the facade to store an avatar on the default disk. If you call methods on the `Storage` facade without first calling the `disk` method, the method will automatically be passed to the default disk:"
msgstr "可通過 `Storage` Facade 來與設定好的任一 Disk 互動。舉例來說，可以使用 Facade 上的 `put` 方法來將使用者圖片保存在預設 Disk 內。若在呼叫方法時沒有在 `Storage` Facade 上先呼叫 `disk` 方法，則這個方法呼叫會自動被傳到預設的 Disk 上："

#: docs/10.x/filesystem.md:block 67 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('avatars/1', $content);\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('avatars/1', $content);\n"

#: docs/10.x/filesystem.md:block 68 (paragraph)
msgid "If your application interacts with multiple disks, you may use the `disk` method on the `Storage` facade to work with files on a particular disk:"
msgstr "若你的專案使用多個 Disk，可使用 `Storage` Facade 上的 `disk` 方法來在特定 Disk 上處理檔案："

#: docs/10.x/filesystem.md:block 69 (code)
msgid "Storage::disk('s3')->put('avatars/1', $content);\n"
msgstr "Storage::disk('s3')->put('avatars/1', $content);\n"

#: docs/10.x/filesystem.md:block 71 (header)
msgid "On-Demand Disks"
msgstr "隨需提供的 Disk"

#: docs/10.x/filesystem.md:block 72 (paragraph)
msgid "Sometimes you may wish to create a disk at runtime using a given configuration without that configuration actually being present in your application's `filesystems` configuration file. To accomplish this, you may pass a configuration array to the `Storage` facade's `build` method:"
msgstr "有時候，我們會想在不實際將設定寫入 `filesystems` 設定檔的情況下，在執行階段直接通過給定的一組設定來建立 Disk。若要在執行階段建立 Disk，請將一組設定陣列傳給 `Storage` Facade 的 `build` 方法："

#: docs/10.x/filesystem.md:block 73 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$disk = Storage::build([\n"
"    'driver' => 'local',\n"
"    'root' => '/path/to/root',\n"
"]);\n\n"
"$disk->put('image.jpg', $content);\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$disk = Storage::build([\n"
"    'driver' => 'local',\n"
"    'root' => '/path/to/root',\n"
"]);\n\n"
"$disk->put('image.jpg', $content);\n"

#: docs/10.x/filesystem.md:block 75 (header)
msgid "Retrieving Files"
msgstr "取得檔案"

#: docs/10.x/filesystem.md:block 76 (paragraph)
msgid "The `get` method may be used to retrieve the contents of a file. The raw string contents of the file will be returned by the method. Remember, all file paths should be specified relative to the disk's \"root\" location:"
msgstr "`get` 方法可用來取得檔案內容。該方法會回傳檔案的原始字串內容。請記得，所有檔案路徑都是相對於該 Disk 所指定的「root」根目錄："

#: docs/10.x/filesystem.md:block 77 (code)
msgid "$contents = Storage::get('file.jpg');\n"
msgstr "$contents = Storage::get('file.jpg');\n"

#: docs/10.x/filesystem.md:block 78 (paragraph)
msgid "The `exists` method may be used to determine if a file exists on the disk:"
msgstr "`exists` 方法可用來判斷某個檔案是否存在於 Disk 上："

#: docs/10.x/filesystem.md:block 79 (code)
msgid "if (Storage::disk('s3')->exists('file.jpg')) {\n"
"    // ...\n"
"}\n"
msgstr "if (Storage::disk('s3')->exists('file.jpg')) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/filesystem.md:block 80 (paragraph)
msgid "The `missing` method may be used to determine if a file is missing from the disk:"
msgstr "可使用 `missing` 方法來判斷 Disk 上是否不存在這個檔案："

#: docs/10.x/filesystem.md:block 81 (code)
msgid "if (Storage::disk('s3')->missing('file.jpg')) {\n"
"    // ...\n"
"}\n"
msgstr "if (Storage::disk('s3')->missing('file.jpg')) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/filesystem.md:block 83 (header)
msgid "Downloading Files"
msgstr "下載檔案"

#: docs/10.x/filesystem.md:block 84 (paragraph)
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr "可使用 `download` 方法來產生一個強制使用者在給定路徑上下載檔案的 Response。`download` 方法接受檔案名稱作為其第二個引數，該引數用來判斷使用者看到的檔案名稱。最後，我們可以傳入一組包含 HTTP 標頭的陣列作為該方法的第三個引數："

#: docs/10.x/filesystem.md:block 85 (code)
msgid "return Storage::download('file.jpg');\n\n"
"return Storage::download('file.jpg', $name, $headers);\n"
msgstr "return Storage::download('file.jpg');\n\n"
"return Storage::download('file.jpg', $name, $headers);\n"

#: docs/10.x/filesystem.md:block 87 (header)
msgid "File URLs"
msgstr "檔案 URL"

#: docs/10.x/filesystem.md:block 88 (paragraph)
msgid "You may use the `url` method to get the URL for a given file. If you are using the `local` driver, this will typically just prepend `/storage` to the given path and return a relative URL to the file. If you are using the `s3` driver, the fully qualified remote URL will be returned:"
msgstr "可以使用 `url` 來取得給定檔案的 URL。若使用 `local` Driver，通常這個網址就只是在給定路徑前方加上 `/storage` 然後回傳該檔案的相對 URL 而已。若使用 `s3` Driver，則會回傳完整的遠端 URL："

#: docs/10.x/filesystem.md:block 89 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$url = Storage::url('file.jpg');\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$url = Storage::url('file.jpg');\n"

#: docs/10.x/filesystem.md:block 90 (paragraph)
msgid "When using the `local` driver, all files that should be publicly accessible should be placed in the `storage/app/public` directory. Furthermore, you should [create a symbolic link](#the-public-disk) at `public/storage` which points to the `storage/app/public` directory."
msgstr "使用 `local` Driver 時，所有要供公開存取的檔案都應放在 `storage/app/public` 目錄內。此外，也應[建立一個符號連結](#the-public-disk)來將 `public/storage` 指向 `storage/app/public` 目錄。"

#: docs/10.x/filesystem.md:block 91 (quote)
msgid "**Warning** When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs."
msgstr "**Warning** 使用 `local` Driver 時，`url` 的回傳值未經過 URL 編碼。因此，我們建議你只使用能產生有效 URL 的檔名來保存檔案。"

#: docs/10.x/filesystem.md:block 93 (header)
msgid "Temporary URLs"
msgstr "時效性 URL"

#: docs/10.x/filesystem.md:block 94 (paragraph)
msgid "Using the `temporaryUrl` method, you may create temporary URLs to files stored using the `s3` driver. This method accepts a path and a `DateTime` instance specifying when the URL should expire:"
msgstr "使用 `temporaryUrl` 方法，就可以為儲存在 `s3` Driver 上的檔案建立時效性 URL。這個方法接受一個路徑、以及一個用來指定 URL 何時過期的 `DateTime` 實體："

#: docs/10.x/filesystem.md:block 95 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$url = Storage::temporaryUrl(\n"
"    'file.jpg', now()->addMinutes(5)\n"
");\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$url = Storage::temporaryUrl(\n"
"    'file.jpg', now()->addMinutes(5)\n"
");\n"

#: docs/10.x/filesystem.md:block 96 (paragraph)
msgid "If you need to specify additional [S3 request parameters](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests), you may pass the array of request parameters as the third argument to the `temporaryUrl` method:"
msgstr "若想指定額外的 [S3 Request 參數](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests)，只需要將 Request 參數陣列作為第三個引數傳給 `temporaryUrl` 方法即可："

#: docs/10.x/filesystem.md:block 97 (code)
msgid "$url = Storage::temporaryUrl(\n"
"    'file.jpg',\n"
"    now()->addMinutes(5),\n"
"    [\n"
"        'ResponseContentType' => 'application/octet-stream',\n"
"        'ResponseContentDisposition' => 'attachment; filename=file2.jpg',\n"
"    ]\n"
");\n"
msgstr "$url = Storage::temporaryUrl(\n"
"    'file.jpg',\n"
"    now()->addMinutes(5),\n"
"    [\n"
"        'ResponseContentType' => 'application/octet-stream',\n"
"        'ResponseContentDisposition' => 'attachment; filename=file2.jpg',\n"
"    ]\n"
");\n"

#: docs/10.x/filesystem.md:block 98 (paragraph)
msgid "If you need to customize how temporary URLs are created for a specific storage disk, you can use the `buildTemporaryUrlsUsing` method. For example, this can be useful if you have a controller that allows you to download files stored via a disk that doesn't typically support temporary URLs. Usually, this method should be called from the `boot` method of a service provider:"
msgstr "若有需要自訂某個存放 Disk 要如何產生臨時 URL，可以使用 `buildTemporaryUrlsUsing` 方法。舉例來說，若有檔案儲存在不支援時效性 URL 的 Driver 上，而在某個 Controller 上我們又想讓使用者能下載這些檔案，就很適合使用這個方法。一般來說，應在某個 Service Provider 的 `boot` 方法內呼叫這個方法："

#: docs/10.x/filesystem.md:block 99 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use DateTime;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function (string $path, DateTime $expiration, array $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use DateTime;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function (string $path, DateTime $expiration, array $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"

#: docs/10.x/filesystem.md:block 101 (header)
msgid "URL Host Customization"
msgstr "自訂 URL 主機"

#: docs/10.x/filesystem.md:block 102 (paragraph)
msgid "If you would like to pre-define the host for URLs generated using the `Storage` facade, you may add a `url` option to the disk's configuration array:"
msgstr "若想為 `Storage` Facade 產生的 URL 預先定義主機，可在 Disk 設定陣列內加上一個 `url` 選項："

#: docs/10.x/filesystem.md:block 103 (code)
msgid "'public' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app/public'),\n"
"    'url' => env('APP_URL').'/storage',\n"
"    'visibility' => 'public',\n"
"],\n"
msgstr "'public' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app/public'),\n"
"    'url' => env('APP_URL').'/storage',\n"
"    'visibility' => 'public',\n"
"],\n"

#: docs/10.x/filesystem.md:block 105 (header)
msgid "File Metadata"
msgstr "檔案詮釋資料"

#: docs/10.x/filesystem.md:block 106 (paragraph)
msgid "In addition to reading and writing files, Laravel can also provide information about the files themselves. For example, the `size` method may be used to get the size of a file in bytes:"
msgstr "除了讀寫檔案外，Laravel 還提供了一些有關檔案本身的資訊。舉例來說，`size` 方法可用來取得單位為^[位元組](Bytes)的檔案大小："

#: docs/10.x/filesystem.md:block 107 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$size = Storage::size('file.jpg');\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$size = Storage::size('file.jpg');\n"

#: docs/10.x/filesystem.md:block 108 (paragraph)
msgid "The `lastModified` method returns the UNIX timestamp of the last time the file was modified:"
msgstr "`lastModified` 方法回傳以 UNIX ^[時戳](Timestamp)表示的檔案最後修改時間："

#: docs/10.x/filesystem.md:block 109 (code)
msgid "$time = Storage::lastModified('file.jpg');\n"
msgstr "$time = Storage::lastModified('file.jpg');\n"

#: docs/10.x/filesystem.md:block 110 (paragraph)
msgid "The MIME type of a given file may be obtained via the `mimeType` method:"
msgstr "使用 `mimeType` 方法，就可取得給定檔案的 MIME 型別："

#: docs/10.x/filesystem.md:block 111 (code)
msgid "$mime = Storage::mimeType('file.jpg')\n"
msgstr "$mime = Storage::mimeType('file.jpg')\n"

#: docs/10.x/filesystem.md:block 113 (header)
msgid "File Paths"
msgstr "檔案路徑"

#: docs/10.x/filesystem.md:block 114 (paragraph)
msgid "You may use the `path` method to get the path for a given file. If you are using the `local` driver, this will return the absolute path to the file. If you are using the `s3` driver, this method will return the relative path to the file in the S3 bucket:"
msgstr "可以使用 `path` 方法來取得給定檔案的路徑。若使用 `local` Driver，該方法會回傳檔案的絕對路徑。若使用 `s3` Driver，該方法會回傳在 S3 Bucket 中的相對路徑："

#: docs/10.x/filesystem.md:block 115 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$path = Storage::path('file.jpg');\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$path = Storage::path('file.jpg');\n"

#: docs/10.x/filesystem.md:block 117 (header)
msgid "Storing Files"
msgstr "保存檔案"

#: docs/10.x/filesystem.md:block 118 (paragraph)
msgid "The `put` method may be used to store file contents on a disk. You may also pass a PHP `resource` to the `put` method, which will use Flysystem's underlying stream support. Remember, all file paths should be specified relative to the \"root\" location configured for the disk:"
msgstr "可使用 `put` 方法來將檔案內容保存到 Disk 上。也可以傳入一個 PHP `resource` 給 `put` 方法，Laravel 會使用 Flysystem 的底層串流支援來保存檔案。請記得，所有的檔案路徑都是相對於 Disk 設定中「root」根目錄的路徑："

#: docs/10.x/filesystem.md:block 119 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('file.jpg', $contents);\n\n"
"Storage::put('file.jpg', $resource);\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('file.jpg', $contents);\n\n"
"Storage::put('file.jpg', $resource);\n"

#: docs/10.x/filesystem.md:block 121 (header)
msgid "Failed Writes"
msgstr "寫入失敗"

#: docs/10.x/filesystem.md:block 122 (paragraph)
msgid "If the `put` method (or other \"write\" operations) is unable to write the file to disk, `false` will be returned:"
msgstr "若 `put` 方法 (或其他「寫入」動作) 無法將檔案寫入到磁碟上，則該方法會回傳 `false`："

#: docs/10.x/filesystem.md:block 123 (code)
msgid "if (! Storage::put('file.jpg', $contents)) {\n"
"    // The file could not be written to disk...\n"
"}\n"
msgstr "if (! Storage::put('file.jpg', $contents)) {\n"
"    // 無法將該檔案寫入磁碟...\n"
"}\n"

#: docs/10.x/filesystem.md:block 124 (paragraph)
msgid "If you wish, you may define the `throw` option within your filesystem disk's configuration array. When this option is defined as `true`, \"write\" methods such as `put` will throw an instance of `League\\Flysystem\\UnableToWriteFile` when write operations fail:"
msgstr "若有需要的話，也可以在檔案系統 Disk 的設定陣列中定義 `throw` 選項。當該選項定義為 `true` 時，如 `put` 等的「寫入」方法會在寫入動作失敗時擲回一個 `League\\Flysystem\\UnableToWriteFile` 實體："

#: docs/10.x/filesystem.md:block 125 (code)
msgid "'public' => [\n"
"    'driver' => 'local',\n"
"    // ...\n"
"    'throw' => true,\n"
"],\n"
msgstr "'public' => [\n"
"    'driver' => 'local',\n"
"    // ...\n"
"    'throw' => true,\n"
"],\n"

#: docs/10.x/filesystem.md:block 127 (header)
msgid "Prepending & Appending To Files"
msgstr "將內容加到檔案的最前面或最後面"

#: docs/10.x/filesystem.md:block 128 (paragraph)
msgid "The `prepend` and `append` methods allow you to write to the beginning or end of a file:"
msgstr "使用 `prepend` 或 `append` 方法，就可以讓我們將內容寫入到檔案的最前端或最後端："

#: docs/10.x/filesystem.md:block 129 (code)
msgid "Storage::prepend('file.log', 'Prepended Text');\n\n"
"Storage::append('file.log', 'Appended Text');\n"
msgstr "Storage::prepend('file.log', 'Prepended Text');\n\n"
"Storage::append('file.log', 'Appended Text');\n"

#: docs/10.x/filesystem.md:block 131 (header)
msgid "Copying & Moving Files"
msgstr "複製與移動檔案"

#: docs/10.x/filesystem.md:block 132 (paragraph)
msgid "The `copy` method may be used to copy an existing file to a new location on the disk, while the `move` method may be used to rename or move an existing file to a new location:"
msgstr "可使用 `copy` 方法來將現有的檔案複製到 Disk 中的新路徑。而 `move` 方法則可用來重新命名現有檔案或將現有檔案移至新路徑："

#: docs/10.x/filesystem.md:block 133 (code)
msgid "Storage::copy('old/file.jpg', 'new/file.jpg');\n\n"
"Storage::move('old/file.jpg', 'new/file.jpg');\n"
msgstr "Storage::copy('old/file.jpg', 'new/file.jpg');\n\n"
"Storage::move('old/file.jpg', 'new/file.jpg');\n"

#: docs/10.x/filesystem.md:block 135 (header)
msgid "Automatic Streaming"
msgstr "自動串流"

#: docs/10.x/filesystem.md:block 136 (paragraph)
msgid "Streaming files to storage offers significantly reduced memory usage. If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the `putFile` or `putFileAs` method. This method accepts either an `Illuminate\\Http\\File` or `Illuminate\\Http\\UploadedFile` instance and will automatically stream the file to your desired location:"
msgstr "使用串流將檔案到寫入存放空間可顯著降低記憶體使用。若想讓 Laravel 自動管理存放路徑中給定檔案的串流，可使用 `putFile` 或 `putFileAs` 方法。這兩個方法接受 `Illuminate\\Http\\File` 或 `Illuminate\\Http\\UploadedFile` 實體，會自動將該檔案串流到指定的路徑上："

#: docs/10.x/filesystem.md:block 137 (code)
msgid "use Illuminate\\Http\\File;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"// Automatically generate a unique ID for filename...\n"
"$path = Storage::putFile('photos', new File('/path/to/photo'));\n\n"
"// Manually specify a filename...\n"
"$path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n"
msgstr "use Illuminate\\Http\\File;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"// 自訂為檔案名稱產生一個不重複的 ID...\n"
"$path = Storage::putFile('photos', new File('/path/to/photo'));\n\n"
"// 手動指定檔案名稱...\n"
"$path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n"

#: docs/10.x/filesystem.md:block 138 (paragraph)
msgid "There are a few important things to note about the `putFile` method. Note that we only specified a directory name and not a filename. By default, the `putFile` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `putFile` method so you can store the path, including the generated filename, in your database."
msgstr "有關 `putFile` 方法，還有幾點重要事項要注意。請注意，我們只有指定資料夾名稱，而未指定檔案名稱。預設情況下，`putFile` 會自動產生一個不重複 ID 來作為檔案名稱。檔案的副檔名會依照該檔案的 MIME 來判斷。`putFile` 方法會回傳該檔案包含檔名的路徑，好讓我們能保存該路徑到資料庫中。"

#: docs/10.x/filesystem.md:block 139 (paragraph)
msgid "The `putFile` and `putFileAs` methods also accept an argument to specify the \"visibility\" of the stored file. This is particularly useful if you are storing the file on a cloud disk such as Amazon S3 and would like the file to be publicly accessible via generated URLs:"
msgstr "`putFile` 與 `putFileAs` 方法也接受一個用來指定保存檔案「^[可見度](Visibility)」的引數。若你使用 Amazon S3 等雲端 Disk 來儲存檔案且想產生能公開存取的 URL，這個功能就特別實用："

#: docs/10.x/filesystem.md:block 140 (code)
msgid "Storage::putFile('photos', new File('/path/to/photo'), 'public');\n"
msgstr "Storage::putFile('photos', new File('/path/to/photo'), 'public');\n"

#: docs/10.x/filesystem.md:block 142 (header)
msgid "File Uploads"
msgstr "檔案上傳"

#: docs/10.x/filesystem.md:block 143 (paragraph)
msgid "In web applications, one of the most common use-cases for storing files is storing user uploaded files such as photos and documents. Laravel makes it very easy to store uploaded files using the `store` method on an uploaded file instance. Call the `store` method with the path at which you wish to store the uploaded file:"
msgstr "在 Web App 中，儲存檔案最常見的例子就是保存使用者上傳的檔案了 (如：照片、文件)。在 Laravel 中，要保存上傳的檔案非常簡單，只要在上傳的檔案實體上使用 `store` 方法即可。呼叫 `store` 方法並傳入要上傳檔案要保存的位置即可："

#: docs/10.x/filesystem.md:block 144 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     */\n"
"    public function update(Request $request): string\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n\n"
"        return $path;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     */\n"
"    public function update(Request $request): string\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n\n"
"        return $path;\n"
"    }\n"
"}\n"

#: docs/10.x/filesystem.md:block 145 (paragraph)
msgid "There are a few important things to note about this example. Note that we only specified a directory name, not a filename. By default, the `store` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `store` method so you can store the path, including the generated filename, in your database."
msgstr "在這個範例中還有幾點重要事項要注意。請注意，我們只有指定資料夾名稱，而未指定檔案名稱。預設情況下，`store` 會自動產生一個不重複 ID 來作為檔案名稱。檔案的副檔名會依照該檔案的 MIME 來判斷。`store` 方法會回傳該檔案包含檔名的路徑，好讓我們能保存該路徑到資料庫中。"

#: docs/10.x/filesystem.md:block 146 (paragraph)
msgid "You may also call the `putFile` method on the `Storage` facade to perform the same file storage operation as the example above:"
msgstr "也可以呼叫 `Storage` Facade 上的 `putFile` 方法進行與上方範例相同的檔案存放操作："

#: docs/10.x/filesystem.md:block 147 (code)
msgid "$path = Storage::putFile('avatars', $request->file('avatar'));\n"
msgstr "$path = Storage::putFile('avatars', $request->file('avatar'));\n"

#: docs/10.x/filesystem.md:block 149 (header)
msgid "Specifying A File Name"
msgstr "指定檔案名稱"

#: docs/10.x/filesystem.md:block 150 (paragraph)
msgid "If you do not want a filename to be automatically assigned to your stored file, you may use the `storeAs` method, which receives the path, the filename, and the (optional) disk as its arguments:"
msgstr "若不想使用自動指派給保存檔案的檔名，可使用 `storeAs` 方法。該方法的引數是路徑、檔名、以及 (可選的) Disk："

#: docs/10.x/filesystem.md:block 151 (code)
msgid "$path = $request->file('avatar')->storeAs(\n"
"    'avatars', $request->user()->id\n"
");\n"
msgstr "$path = $request->file('avatar')->storeAs(\n"
"    'avatars', $request->user()->id\n"
");\n"

#: docs/10.x/filesystem.md:block 152 (paragraph)
msgid "You may also use the `putFileAs` method on the `Storage` facade, which will perform the same file storage operation as the example above:"
msgstr "也可以呼叫 `Storage` Facade 上的 `putFileAs` 方法進行與上方範例相同的檔案存放操作："

#: docs/10.x/filesystem.md:block 153 (code)
msgid "$path = Storage::putFileAs(\n"
"    'avatars', $request->file('avatar'), $request->user()->id\n"
");\n"
msgstr "$path = Storage::putFileAs(\n"
"    'avatars', $request->file('avatar'), $request->user()->id\n"
");\n"

#: docs/10.x/filesystem.md:block 154 (quote)
msgid "**Warning** Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\WhitespacePathNormalizer::normalizePath` method."
msgstr "**Warning** 路徑中若有不可列印 (Unprintable) 或無效的 Unicode 字元，則會被自動移除。因此，在將檔案路徑傳給 Laravel 的檔案存放方法前，我們可能會想先消毒 (Sanitize) 檔案路徑。可使用 `League\\Flysystem\\WhitespacePathNormalizer::normalizePath` 來正常化 (Normalize) 檔案路徑。"

#: docs/10.x/filesystem.md:block 156 (header)
msgid "Specifying A Disk"
msgstr "指定 Disk"

#: docs/10.x/filesystem.md:block 157 (paragraph)
msgid "By default, this uploaded file's `store` method will use your default disk. If you would like to specify another disk, pass the disk name as the second argument to the `store` method:"
msgstr "預設情況下，上傳檔案的 `store` 方法會使用預設的 Disk。若想指定另一個 Disk，請將 Disk 名稱作為第三個引數傳給 `store` 方法："

#: docs/10.x/filesystem.md:block 158 (code)
msgid "$path = $request->file('avatar')->store(\n"
"    'avatars/'.$request->user()->id, 's3'\n"
");\n"
msgstr "$path = $request->file('avatar')->store(\n"
"    'avatars/'.$request->user()->id, 's3'\n"
");\n"

#: docs/10.x/filesystem.md:block 159 (paragraph)
msgid "If you are using the `storeAs` method, you may pass the disk name as the third argument to the method:"
msgstr "若使用 `storeAs` 方法，則可將 Disk 名稱作為第三引數傳給該方法："

#: docs/10.x/filesystem.md:block 160 (code)
msgid "$path = $request->file('avatar')->storeAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");\n"
msgstr "$path = $request->file('avatar')->storeAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");\n"

#: docs/10.x/filesystem.md:block 162 (header)
msgid "Other Uploaded File Information"
msgstr "其他上傳檔案的資訊"

#: docs/10.x/filesystem.md:block 163 (paragraph)
msgid "If you would like to get the original name and extension of the uploaded file, you may do so using the `getClientOriginalName` and `getClientOriginalExtension` methods:"
msgstr "若想取得上傳檔案的原始名稱與副檔名，可使用 `getClientOriginalName` 與 `getClientOriginalExtension` 方法："

#: docs/10.x/filesystem.md:block 164 (code)
msgid "$file = $request->file('avatar');\n\n"
"$name = $file->getClientOriginalName();\n"
"$extension = $file->getClientOriginalExtension();\n"
msgstr "$file = $request->file('avatar');\n\n"
"$name = $file->getClientOriginalName();\n"
"$extension = $file->getClientOriginalExtension();\n"

#: docs/10.x/filesystem.md:block 165 (paragraph)
msgid "However, keep in mind that the `getClientOriginalName` and `getClientOriginalExtension` methods are considered unsafe, as the file name and extension may be tampered with by a malicious user. For this reason, you should typically prefer the `hashName` and `extension` methods to get a name and an extension for the given file upload:"
msgstr "不過，請注意，應將 `getClientOriginalName` 與 `getClientOriginalExtension` 方法視為不安全的，因為惡意使用者可以偽造檔案名稱與副檔名。因此，建議一般還是使用 `hashName` 與 `extension` 方法來取得給定上傳檔案的檔名與副檔名："

#: docs/10.x/filesystem.md:block 166 (code)
msgid "$file = $request->file('avatar');\n\n"
"$name = $file->hashName(); // Generate a unique, random name...\n"
"$extension = $file->extension(); // Determine the file's extension based on the file's MIME type...\n"
msgstr "$file = $request->file('avatar');\n\n"
"$name = $file->hashName(); // 產生一個不重複、隨機的名稱...\n"
"$extension = $file->extension(); // 依據檔案的 MIME 型別判斷檔案的副檔名...\n"

#: docs/10.x/filesystem.md:block 168 (header)
msgid "File Visibility"
msgstr "檔案可見度"

#: docs/10.x/filesystem.md:block 169 (paragraph)
msgid "In Laravel's Flysystem integration, \"visibility\" is an abstraction of file permissions across multiple platforms. Files may either be declared `public` or `private`. When a file is declared `public`, you are indicating that the file should generally be accessible to others. For example, when using the S3 driver, you may retrieve URLs for `public` files."
msgstr "在 Laravel 的 Flysystem 整合中，「^[可見度](Visibility)」是在多個平台間抽象化的檔案權限。檔案可以被定義為 `public`，或是被定義為 `private`。若將檔案定義為 `public`，即代表該檔案是可以被其他人正常存取的。舉例來說，若使用 S3 Driver，可以取得 `public` 檔案的 URL。"

#: docs/10.x/filesystem.md:block 170 (paragraph)
msgid "You can set the visibility when writing the file via the `put` method:"
msgstr "在使用 `put` 方法寫入檔案時，可以設定可見度："

#: docs/10.x/filesystem.md:block 171 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('file.jpg', $contents, 'public');\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('file.jpg', $contents, 'public');\n"

#: docs/10.x/filesystem.md:block 172 (paragraph)
msgid "If the file has already been stored, its visibility can be retrieved and set via the `getVisibility` and `setVisibility` methods:"
msgstr "若檔案已被保存，則可使用 `getVisibility` 來取得可見度，並使用 `setVisibility` 來設定可見度："

#: docs/10.x/filesystem.md:block 173 (code)
msgid "$visibility = Storage::getVisibility('file.jpg');\n\n"
"Storage::setVisibility('file.jpg', 'public');\n"
msgstr "$visibility = Storage::getVisibility('file.jpg');\n\n"
"Storage::setVisibility('file.jpg', 'public');\n"

#: docs/10.x/filesystem.md:block 174 (paragraph)
msgid "When interacting with uploaded files, you may use the `storePublicly` and `storePubliclyAs` methods to store the uploaded file with `public` visibility:"
msgstr "在處理上傳的檔案時，應使用 `storePublicly` 與 `storePubliclyAs` 方法來以 `public` 可見度保存上傳的檔案："

#: docs/10.x/filesystem.md:block 175 (code)
msgid "$path = $request->file('avatar')->storePublicly('avatars', 's3');\n\n"
"$path = $request->file('avatar')->storePubliclyAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");\n"
msgstr "$path = $request->file('avatar')->storePublicly('avatars', 's3');\n\n"
"$path = $request->file('avatar')->storePubliclyAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");\n"

#: docs/10.x/filesystem.md:block 177 (header)
msgid "Local Files & Visibility"
msgstr "本機檔案與可見度"

#: docs/10.x/filesystem.md:block 178 (paragraph)
msgid "When using the `local` driver, `public` [visibility](#file-visibility) translates to `0755` permissions for directories and `0644` permissions for files. You can modify the permissions mappings in your application's `filesystems` configuration file:"
msgstr "使用 `local` Driver 時，`public` [可見度](#file-visibility) 對於目錄來說可翻譯為 `0755` 權限，而檔案則可翻譯為 `0644` 權限。可以在 `filesystems` 設定當中修改這個權限映射："

#: docs/10.x/filesystem.md:block 179 (code)
msgid "'local' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app'),\n"
"    'permissions' => [\n"
"        'file' => [\n"
"            'public' => 0644,\n"
"            'private' => 0600,\n"
"        ],\n"
"        'dir' => [\n"
"            'public' => 0755,\n"
"            'private' => 0700,\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr "'local' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app'),\n"
"    'permissions' => [\n"
"        'file' => [\n"
"            'public' => 0644,\n"
"            'private' => 0600,\n"
"        ],\n"
"        'dir' => [\n"
"            'public' => 0755,\n"
"            'private' => 0700,\n"
"        ],\n"
"    ],\n"
"],\n"

#: docs/10.x/filesystem.md:block 181 (header)
msgid "Deleting Files"
msgstr "刪除檔案"

#: docs/10.x/filesystem.md:block 182 (paragraph)
msgid "The `delete` method accepts a single filename or an array of files to delete:"
msgstr "`delete` 方法接受要刪除的單一檔案名稱，或是一組檔案名稱陣列："

#: docs/10.x/filesystem.md:block 183 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::delete('file.jpg');\n\n"
"Storage::delete(['file.jpg', 'file2.jpg']);\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::delete('file.jpg');\n\n"
"Storage::delete(['file.jpg', 'file2.jpg']);\n"

#: docs/10.x/filesystem.md:block 184 (paragraph)
msgid "If necessary, you may specify the disk that the file should be deleted from:"
msgstr "若有需要，也可指定要在哪個 Disk 上刪除檔案："

#: docs/10.x/filesystem.md:block 185 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::disk('s3')->delete('path/file.jpg');\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::disk('s3')->delete('path/file.jpg');\n"

#: docs/10.x/filesystem.md:block 187 (header)
msgid "Directories"
msgstr "目錄"

#: docs/10.x/filesystem.md:block 189 (header)
msgid "Get All Files Within A Directory"
msgstr "取得目錄中的所有檔案"

#: docs/10.x/filesystem.md:block 190 (paragraph)
msgid "The `files` method returns an array of all of the files in a given directory. If you would like to retrieve a list of all files within a given directory including all subdirectories, you may use the `allFiles` method:"
msgstr "`files` 方法回傳一組包含給定目錄中所有檔案的陣列。若想取得包含子目錄在內的給定目錄內所有檔案的清單，可使用 `allFiles` 方法："

#: docs/10.x/filesystem.md:block 191 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$files = Storage::files($directory);\n\n"
"$files = Storage::allFiles($directory);\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$files = Storage::files($directory);\n\n"
"$files = Storage::allFiles($directory);\n"

#: docs/10.x/filesystem.md:block 193 (header)
msgid "Get All Directories Within A Directory"
msgstr "取得目錄內的所有目錄"

#: docs/10.x/filesystem.md:block 194 (paragraph)
msgid "The `directories` method returns an array of all the directories within a given directory. Additionally, you may use the `allDirectories` method to get a list of all directories within a given directory and all of its subdirectories:"
msgstr "`directories` 方法回傳一組包含給定目錄內所有目錄的陣列。此外，也可以使用 `allDirectories` 方法來取得給定目錄內包含子目錄的所有目錄清單："

#: docs/10.x/filesystem.md:block 195 (code)
msgid "$directories = Storage::directories($directory);\n\n"
"$directories = Storage::allDirectories($directory);\n"
msgstr "$directories = Storage::directories($directory);\n\n"
"$directories = Storage::allDirectories($directory);\n"

#: docs/10.x/filesystem.md:block 197 (header)
msgid "Create A Directory"
msgstr "建立目錄"

#: docs/10.x/filesystem.md:block 198 (paragraph)
msgid "The `makeDirectory` method will create the given directory, including any needed subdirectories:"
msgstr "`makeDirectory` 方法會建立給定的目錄，包含所有需要的子目錄："

#: docs/10.x/filesystem.md:block 199 (code)
msgid "Storage::makeDirectory($directory);\n"
msgstr "Storage::makeDirectory($directory);\n"

#: docs/10.x/filesystem.md:block 201 (header)
msgid "Delete A Directory"
msgstr "刪除目錄"

#: docs/10.x/filesystem.md:block 202 (paragraph)
msgid "Finally, the `deleteDirectory` method may be used to remove a directory and all of its files:"
msgstr "最後，可使用 `deleteDirectory` 方法來移除某個目錄與其中所有檔案："

#: docs/10.x/filesystem.md:block 203 (code)
msgid "Storage::deleteDirectory($directory);\n"
msgstr "Storage::deleteDirectory($directory);\n"

#: docs/10.x/filesystem.md:block 205 (header)
msgid "Custom Filesystems"
msgstr "自訂 Filesystem"

#: docs/10.x/filesystem.md:block 206 (paragraph)
msgid "Laravel's Flysystem integration provides support for several \"drivers\" out of the box; however, Flysystem is not limited to these and has adapters for many other storage systems. You can create a custom driver if you want to use one of these additional adapters in your Laravel application."
msgstr "Laravel 的 Flysystem 整合預設提供了多種可用的「Driver」。不過，Flysystem 也不是只能使用這些 Driver，還有許多其他的存放系統 Adapter 可使用。若想在 Laravel 專案中使用這些額外的 Adapter 的話，則可建立一個自訂的 Driver。"

#: docs/10.x/filesystem.md:block 207 (paragraph)
msgid "In order to define a custom filesystem you will need a Flysystem adapter. Let's add a community maintained Dropbox adapter to our project:"
msgstr "若要定義自訂檔案系統，我們首先需要一個 Flysystem Adapter。我們先來在專案中新增一個由社群維護的 Dropbox Adapter："

#: docs/10.x/filesystem.md:block 208 (code)
msgid "composer require spatie/flysystem-dropbox\n"
msgstr "composer require spatie/flysystem-dropbox\n"

#: docs/10.x/filesystem.md:block 209 (paragraph)
msgid "Next, you can register the driver within the `boot` method of one of your application's [service providers](/docs/{{version}}/providers). To accomplish this, you should use the `extend` method of the `Storage` facade:"
msgstr "接著，我們可以在專案的其中一個 [Service Provider](/docs/{{version}}/providers) 中 `boot` 方法內註冊這個 Driver。若要註冊 Driver，請使用 `Storage` Facade 的 `extend` 方法："

#: docs/10.x/filesystem.md:block 210 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::extend('dropbox', function (Application $app, array $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::extend('dropbox', function (Application $app, array $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"

#: docs/10.x/filesystem.md:block 211 (paragraph)
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `Illuminate\\Filesystem\\FilesystemAdapter`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr "傳入 `extend` 方法的第一個引數是 Driver 的名稱，而第二個引數則是一本接收了 `$app` 與 `$config` 變數的閉包。該閉包應回傳 `Illuminate\\Filesystem\\FilesystemAdapter` 的實體。`$config` 變數則包含了定義在 `config/filesystems.php` 中指定 Disk 的設定值。"

#: docs/10.x/filesystem.md:block 212 (paragraph)
msgid "Once you have created and registered the extension's service provider, you may use the `dropbox` driver in your `config/filesystems.php` configuration file."
msgstr "建立並註冊好擴充的 Service Provider 後，就可以在 `config/filesystems.php` 設定當中使用 `dropbox` Driver。"

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Caching](#caching)"
msgstr "[快取](#caching)"

#: docs/8.x/filesystem.md:block 10 (quote)
msgid "{tip} You may configure as many disks as you like and may even have multiple disks that use the same driver."
msgstr "{tip} 可以隨意設定多個 Disk，甚至也可以設定多個使用相同 Driver 的 Disk。"

#: docs/8.x/filesystem.md:block 28 (header)
msgid "Composer Packages"
msgstr "Composer 套件"

#: docs/8.x/filesystem.md:block 29 (paragraph)
msgid "Before using the S3 or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr "使用 S3 或 SFTP Driver 前，需要使用 Composer 套件管理員安裝適當的套件："

#: docs/8.x/filesystem.md:block 30 (unordered list)
msgid "Amazon S3: `composer require --with-all-dependencies league/flysystem-aws-s3-v3 \"^1.0\"`"
msgstr "Amazon S3: `composer require --with-all-dependencies league/flysystem-aws-s3-v3 \"^1.0\"`"

#: docs/8.x/filesystem.md:block 30 (unordered list)
msgid "SFTP: `composer require league/flysystem-sftp \"~1.0\"`"
msgstr "SFTP: `composer require league/flysystem-sftp \"~1.0\"`"

#: docs/8.x/filesystem.md:block 31 (paragraph)
msgid "In addition, you may choose to install a cached adapter for increased performance:"
msgstr "此外，也可選擇安裝 ^[Cached Adapter](快取配接器) 來增加效能："

#: docs/8.x/filesystem.md:block 32 (unordered list)
msgid "CachedAdapter: `composer require league/flysystem-cached-adapter \"~1.0\"`"
msgstr "CachedAdapter: `composer require league/flysystem-cached-adapter \"~1.0\"`"

#: docs/8.x/filesystem.md:block 43 (code)
msgid "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n"
"    \n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Optional SFTP Settings...\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT'),\n"
"    // 'timeout' => 30,\n"
"],\n"
msgstr "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n"
"    \n"
"    // 設定 Basic 身份認證...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // 設定有加密密碼之基於 SSH 金鑰的身份認證...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Optional SFTP Settings...\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT'),\n"
"    // 'timeout' => 30,\n"
"],\n"

#: docs/8.x/filesystem.md:block 47 (paragraph)
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `url` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr "一般來說，為 Disk 設定要使用服務的認證資訊後，就只需要更改 `url` 設定選項即可。這個選項值通常是以 `AWS_ENGPOINT` 環境變數定義的："

#: docs/8.x/filesystem.md:block 50 (header)
msgid "Caching"
msgstr "快取"

#: docs/8.x/filesystem.md:block 51 (paragraph)
msgid "To enable caching for a given disk, you may add a `cache` directive to the disk's configuration options. The `cache` option should be an array of caching options containing the `disk` name, the `expire` time in seconds, and the cache `prefix`:"
msgstr "若要在給定 Disk 上啟用快取，只需要在該 Disk 的設定選項中加上 `cache` 指示詞即可。`cache` 選項應為一個快取選項陣列，其中包含：`disk` 名稱、`expire` 單位為秒的有效期間、`prefix` 快取前置詞等："

#: docs/8.x/filesystem.md:block 52 (code)
msgid "'s3' => [\n"
"    'driver' => 's3',\n\n"
"    // Other Disk Options...\n\n"
"    'cache' => [\n"
"        'store' => 'memcached',\n"
"        'expire' => 600,\n"
"        'prefix' => 'cache-prefix',\n"
"    ],\n"
"],\n"
msgstr "'s3' => [\n"
"    'driver' => 's3',\n\n"
"    // 其他的 Disk 選項...\n\n"
"    'cache' => [\n"
"        'store' => 'memcached',\n"
"        'expire' => 600,\n"
"        'prefix' => 'cache-prefix',\n"
"    ],\n"
"],\n"

#: docs/8.x/filesystem.md:block 80 (quote)
msgid "{note} When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs."
msgstr "{note} 使用 `local` Driver 時，`url` 的回傳值未經過 URL 編碼。因此，我們建議你只使用能產生有效 URL 的檔名來保存檔案。"

#: docs/8.x/filesystem.md:block 88 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function ($path, $expiration, $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function ($path, $expiration, $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/filesystem.md:block 125 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request)\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n\n"
"        return $path;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request)\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n\n"
"        return $path;\n"
"    }\n"
"}\n"

#: docs/8.x/filesystem.md:block 135 (quote)
msgid "{note} Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\Util::normalizePath` method."
msgstr "{note} 路徑中若有^[不可列印](Unprintable)或無效的 Unicode 字元，則會被自動移除。因此，在將檔案路徑傳給 Laravel 的檔案存放方法前，我們可能會想先^[消毒](Sanitize)檔案路徑。可使用 `League\\Flysystem\\Util::normalizePath` 來^[正常化](Normalize)檔案路徑。"

#: docs/8.x/filesystem.md:block 191 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $client = new DropboxClient(\n"
"                $config['authorization_token']\n"
"            );\n\n"
"            return new Filesystem(new DropboxAdapter($client));\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $client = new DropboxClient(\n"
"                $config['authorization_token']\n"
"            );\n\n"
"            return new Filesystem(new DropboxAdapter($client));\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/filesystem.md:block 192 (paragraph)
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `League\\Flysystem\\Filesystem`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr "傳入 `extend` 方法的第一個引數是 Driver 的名稱，而第二個引數則是一本接收了 `$app` 與 `$config` 變數的閉包。該閉包應回傳 `League\\Flysystem\\Filesystem` 的實體。`$config` 變數則包含了定義在 `config/filesystems.php` 中指定 Disk 的設定值。"

#: docs/9.x/filesystem.md:block 210 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"

