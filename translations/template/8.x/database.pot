# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-03-30 14:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/database.md:1
#, markdown-text, no-wrap
msgid "Database: Getting Started"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Read & Write Connections](#read-and-write-connections)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Running SQL Queries](#running-queries)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Using Multiple Database Connections](#using-multiple-database-connections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Listening For Query Events](#listening-for-query-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Database Transactions](#database-transactions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11
#, markdown-text
msgid "[Connecting To The Database CLI](#connecting-to-the-database-cli)"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:13
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:13
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:16
#, markdown-text
msgid ""
"Almost every modern web application interacts with a database. Laravel makes "
"interacting with databases extremely simple across a variety of supported "
"databases using raw SQL, a [fluent query "
"builder](/docs/{{version}}/queries), and the [Eloquent "
"ORM](/docs/{{version}}/eloquent). Currently, Laravel provides first-party "
"support for four databases:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:23
#, markdown-text, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- MySQL 5.7+ ([Version "
"Policy](https://en.wikipedia.org/wiki/MySQL#Release_history))\n"
"- PostgreSQL 9.6+ ([Version "
"Policy](https://www.postgresql.org/support/versioning/))\n"
"- SQLite 3.8.8+\n"
"- SQL Server 2017+ ([Version "
"Policy](https://support.microsoft.com/en-us/lifecycle/search))\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:25
#, markdown-text, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:25
#, markdown-text, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:28
#, markdown-text
msgid ""
"The configuration for Laravel's database services is located in your "
"application's `config/database.php` configuration file. In this file, you "
"may define all of your database connections, as well as specify which "
"connection should be used by default. Most of the configuration options "
"within this file are driven by the values of your application's environment "
"variables. Examples for most of Laravel's supported database systems are "
"provided in this file."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:30
#, markdown-text
msgid ""
"By default, Laravel's sample [environment "
"configuration](/docs/{{version}}/configuration#environment-configuration) is "
"ready to use with [Laravel Sail](/docs/{{version}}/sail), which is a Docker "
"configuration for developing Laravel applications on your local "
"machine. However, you are free to modify your database configuration as "
"needed for your local database."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:32
#, markdown-text, no-wrap
msgid "<a name=\"sqlite-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:32
#, markdown-text, no-wrap
msgid "SQLite Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:35
#, markdown-text
msgid ""
"SQLite databases are contained within a single file on your filesystem. You "
"can create a new SQLite database using the `touch` command in your terminal: "
"`touch database/database.sqlite`. After the database has been created, you "
"may easily configure your environment variables to point to this database by "
"placing the absolute path to the database in the `DB_DATABASE` environment "
"variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:38
#, markdown-text, no-wrap
msgid ""
"    DB_CONNECTION=sqlite\n"
"    DB_DATABASE=/absolute/path/to/database.sqlite\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:40
#, markdown-text
msgid ""
"To enable foreign key constraints for SQLite connections, you should set the "
"`DB_FOREIGN_KEYS` environment variable to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:42
#, markdown-text, no-wrap
msgid "    DB_FOREIGN_KEYS=true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:44
#, markdown-text, no-wrap
msgid "<a name=\"mssql-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:44
#, markdown-text, no-wrap
msgid "Microsoft SQL Server Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:47
#, markdown-text
msgid ""
"To use a Microsoft SQL Server database, you should ensure that you have the "
"`sqlsrv` and `pdo_sqlsrv` PHP extensions installed as well as any "
"dependencies they may require such as the Microsoft SQL ODBC driver."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:49
#, markdown-text, no-wrap
msgid "<a name=\"configuration-using-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:49
#, markdown-text, no-wrap
msgid "Configuration Using URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:52
#, markdown-text
msgid ""
"Typically, database connections are configured using multiple configuration "
"values such as `host`, `database`, `username`, `password`, etc. Each of "
"these configuration values has its own corresponding environment "
"variable. This means that when configuring your database connection "
"information on a production server, you need to manage several environment "
"variables."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:54
#, markdown-text
msgid ""
"Some managed database providers such as AWS and Heroku provide a single "
"database \"URL\" that contains all of the connection information for the "
"database in a single string. An example database URL may look something like "
"the following:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/database.md:55
#, no-wrap
msgid "mysql://root:password@127.0.0.1/forge?charset=UTF-8\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:60
#, markdown-text
msgid "These URLs typically follow a standard schema convention:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/database.md:61
#, no-wrap
msgid "driver://username:password@host:port/database?options\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:66
#, markdown-text
msgid ""
"For convenience, Laravel supports these URLs as an alternative to "
"configuring your database with multiple configuration options. If the `url` "
"(or corresponding `DATABASE_URL` environment variable) configuration option "
"is present, it will be used to extract the database connection and "
"credential information."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:68
#, markdown-text, no-wrap
msgid "<a name=\"read-and-write-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:68
#, markdown-text, no-wrap
msgid "Read & Write Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:71
#, markdown-text
msgid ""
"Sometimes you may wish to use one database connection for SELECT statements, "
"and another for INSERT, UPDATE, and DELETE statements. Laravel makes this a "
"breeze, and the proper connections will always be used whether you are using "
"raw queries, the query builder, or the Eloquent ORM."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:73
#, markdown-text
msgid ""
"To see how read / write connections should be configured, let's look at this "
"example:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:95
#, markdown-text, no-wrap
msgid ""
"    'mysql' => [\n"
"        'read' => [\n"
"            'host' => [\n"
"                '192.168.1.1',\n"
"                '196.168.1.2',\n"
"            ],\n"
"        ],\n"
"        'write' => [\n"
"            'host' => [\n"
"                '196.168.1.3',\n"
"            ],\n"
"        ],\n"
"        'sticky' => true,\n"
"        'driver' => 'mysql',\n"
"        'database' => 'database',\n"
"        'username' => 'root',\n"
"        'password' => '',\n"
"        'charset' => 'utf8mb4',\n"
"        'collation' => 'utf8mb4_unicode_ci',\n"
"        'prefix' => '',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:97
#, markdown-text
msgid ""
"Note that three keys have been added to the configuration array: `read`, "
"`write` and `sticky`. The `read` and `write` keys have array values "
"containing a single key: `host`. The rest of the database options for the "
"`read` and `write` connections will be merged from the main `mysql` "
"configuration array."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:99
#, markdown-text
msgid ""
"You only need to place items in the `read` and `write` arrays if you wish to "
"override the values from the main `mysql` array. So, in this case, "
"`192.168.1.1` will be used as the host for the \"read\" connection, while "
"`192.168.1.3` will be used for the \"write\" connection. The database "
"credentials, prefix, character set, and all other options in the main "
"`mysql` array will be shared across both connections. When multiple values "
"exist in the `host` configuration array, a database host will be randomly "
"chosen for each request."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:101
#, markdown-text, no-wrap
msgid "<a name=\"the-sticky-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:101
#, markdown-text, no-wrap
msgid "The `sticky` Option"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:104
#, markdown-text
msgid ""
"The `sticky` option is an *optional* value that can be used to allow the "
"immediate reading of records that have been written to the database during "
"the current request cycle. If the `sticky` option is enabled and a \"write\" "
"operation has been performed against the database during the current request "
"cycle, any further \"read\" operations will use the \"write\" "
"connection. This ensures that any data written during the request cycle can "
"be immediately read back from the database during that same request. It is "
"up to you to decide if this is the desired behavior for your application."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:106
#, markdown-text, no-wrap
msgid "<a name=\"running-queries\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:106
#, markdown-text, no-wrap
msgid "Running SQL Queries"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:109
#, markdown-text
msgid ""
"Once you have configured your database connection, you may run queries using "
"the `DB` facade. The `DB` facade provides methods for each type of query: "
"`select`, `update`, `insert`, `delete`, and `statement`."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:111
#, markdown-text, no-wrap
msgid "<a name=\"running-a-select-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:111
#, markdown-text, no-wrap
msgid "Running A Select Query"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:114
#, markdown-text
msgid ""
"To run a basic SELECT query, you may use the `select` method on the `DB` "
"facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:116 docs/8.x/database.md:230
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:118
#, markdown-text, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:121
#, markdown-text, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:132
#, markdown-text, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all of the application's users.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $users = DB::select('select * from users where active = ?', "
"[1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:136
#, markdown-text, no-wrap
msgid ""
"            return view('user.index', ['users' => $users]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:138
#, markdown-text
msgid ""
"The first argument passed to the `select` method is the SQL query, while the "
"second argument is any parameter bindings that need to be bound to the "
"query. Typically, these are the values of the `where` clause "
"constraints. Parameter binding provides protection against SQL injection."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:140
#, markdown-text
msgid ""
"The `select` method will always return an `array` of results. Each result "
"within the array will be a PHP `stdClass` object representing a record from "
"the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:142 docs/8.x/database.md:162 docs/8.x/database.md:171
#: docs/8.x/database.md:183 docs/8.x/database.md:217 docs/8.x/database.md:269
#: docs/8.x/database.md:282 docs/8.x/database.md:295
#, markdown-text, no-wrap
msgid "    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:144
#, markdown-text, no-wrap
msgid "    $users = DB::select('select * from users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:148
#, markdown-text, no-wrap
msgid ""
"    foreach ($users as $user) {\n"
"        echo $user->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:150
#, markdown-text, no-wrap
msgid "<a name=\"using-named-bindings\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:150
#, markdown-text, no-wrap
msgid "Using Named Bindings"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:153
#, markdown-text
msgid ""
"Instead of using `?` to represent your parameter bindings, you may execute a "
"query using named bindings:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:155
#, markdown-text, no-wrap
msgid ""
"    $results = DB::select('select * from users where id = :id', ['id' => "
"1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:157
#, markdown-text, no-wrap
msgid "<a name=\"running-an-insert-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:157
#, markdown-text, no-wrap
msgid "Running An Insert Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:160
#, markdown-text
msgid ""
"To execute an `insert` statement, you may use the `insert` method on the "
"`DB` facade. Like `select`, this method accepts the SQL query as its first "
"argument and bindings as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:164
#, markdown-text, no-wrap
msgid "    DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:166
#, markdown-text, no-wrap
msgid "<a name=\"running-an-update-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:166
#, markdown-text, no-wrap
msgid "Running An Update Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:169
#, markdown-text
msgid ""
"The `update` method should be used to update existing records in the "
"database. The number of rows affected by the statement is returned by the "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:176
#, markdown-text, no-wrap
msgid ""
"    $affected = DB::update(\n"
"        'update users set votes = 100 where name = ?',\n"
"        ['Anita']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:178
#, markdown-text, no-wrap
msgid "<a name=\"running-a-delete-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:178
#, markdown-text, no-wrap
msgid "Running A Delete Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:181
#, markdown-text
msgid ""
"The `delete` method should be used to delete records from the database. Like "
"`update`, the number of rows affected will be returned by the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:185
#, markdown-text, no-wrap
msgid "    $deleted = DB::delete('delete from users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:187
#, markdown-text, no-wrap
msgid "<a name=\"running-a-general-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:187
#, markdown-text, no-wrap
msgid "Running A General Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:190
#, markdown-text
msgid ""
"Some database statements do not return any value. For these types of "
"operations, you may use the `statement` method on the `DB` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:192
#, markdown-text, no-wrap
msgid "    DB::statement('drop table users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:194
#, markdown-text, no-wrap
msgid "<a name=\"running-an-unprepared-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:194
#, markdown-text, no-wrap
msgid "Running An Unprepared Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:197
#, markdown-text
msgid ""
"Sometimes you may want to execute an SQL statement without binding any "
"values. You may use the `DB` facade's `unprepared` method to accomplish "
"this:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:199
#, markdown-text, no-wrap
msgid "    DB::unprepared('update users set votes = 100 where name = \"Dries\"');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:201
#, markdown-text, no-wrap
msgid ""
"> {note} Since unprepared statements do not bind parameters, they may be "
"vulnerable to SQL injection. You should never allow user controlled values "
"within an unprepared statement.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:203
#, markdown-text, no-wrap
msgid "<a name=\"implicit-commits-in-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:203
#, markdown-text, no-wrap
msgid "Implicit Commits"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:206
#, markdown-text
msgid ""
"When using the `DB` facade's `statement` and `unprepared` methods within "
"transactions you must be careful to avoid statements that cause [implicit "
"commits](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html). "
"These statements will cause the database engine to indirectly commit the "
"entire transaction, leaving Laravel unaware of the database's transaction "
"level. An example of such a statement is creating a database table:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:208
#, markdown-text, no-wrap
msgid "    DB::unprepared('create table a (col varchar(1) null)');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:210
#, markdown-text
msgid ""
"Please refer to the MySQL manual for [a list of all "
"statements](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html) "
"that trigger implicit commits."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:212
#, markdown-text, no-wrap
msgid "<a name=\"using-multiple-database-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:212
#, markdown-text, no-wrap
msgid "Using Multiple Database Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:215
#, markdown-text
msgid ""
"If your application defines multiple connections in your "
"`config/database.php` configuration file, you may access each connection via "
"the `connection` method provided by the `DB` facade. The connection name "
"passed to the `connection` method should correspond to one of the "
"connections listed in your `config/database.php` configuration file or "
"configured at runtime using the `config` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:219
#, markdown-text, no-wrap
msgid "    $users = DB::connection('sqlite')->select(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:221
#, markdown-text
msgid ""
"You may access the raw, underlying PDO instance of a connection using the "
"`getPdo` method on a connection instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:223
#, markdown-text, no-wrap
msgid "    $pdo = DB::connection()->getPdo();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:225
#, markdown-text, no-wrap
msgid "<a name=\"listening-for-query-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:225
#, markdown-text, no-wrap
msgid "Listening For Query Events"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:228
#, markdown-text
msgid ""
"If you would like to specify a closure that is invoked for each SQL query "
"executed by your application, you may use the `DB` facade's `listen` "
"method. This method can be useful for logging queries or debugging. You may "
"register your query listener closure in the `boot` method of a [service "
"provider](/docs/{{version}}/providers):"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:232
#, markdown-text, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:235
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\DB;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:247
#, markdown-text, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:262
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            DB::listen(function ($query) {\n"
"                // $query->sql;\n"
"                // $query->bindings;\n"
"                // $query->time;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:264
#, markdown-text, no-wrap
msgid "<a name=\"database-transactions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:264
#, markdown-text, no-wrap
msgid "Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:267
#, markdown-text
msgid ""
"You may use the `transaction` method provided by the `DB` facade to run a "
"set of operations within a database transaction. If an exception is thrown "
"within the transaction closure, the transaction will automatically be rolled "
"back. If the closure executes successfully, the transaction will "
"automatically be committed. You don't need to worry about manually rolling "
"back or committing while using the `transaction` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:272 docs/8.x/database.md:285
#, markdown-text, no-wrap
msgid ""
"    DB::transaction(function () {\n"
"        DB::update('update users set votes = 1');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:275
#, markdown-text, no-wrap
msgid ""
"        DB::delete('delete from posts');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:277
#, markdown-text, no-wrap
msgid "<a name=\"handling-deadlocks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:277
#, markdown-text, no-wrap
msgid "Handling Deadlocks"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:280
#, markdown-text
msgid ""
"The `transaction` method accepts an optional second argument which defines "
"the number of times a transaction should be retried when a deadlock "
"occurs. Once these attempts have been exhausted, an exception will be "
"thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:288
#, markdown-text, no-wrap
msgid ""
"        DB::delete('delete from posts');\n"
"    }, 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:290
#, markdown-text, no-wrap
msgid "<a name=\"manually-using-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:290
#, markdown-text, no-wrap
msgid "Manually Using Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:293
#, markdown-text
msgid ""
"If you would like to begin a transaction manually and have complete control "
"over rollbacks and commits, you may use the `beginTransaction` method "
"provided by the `DB` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:297
#, markdown-text, no-wrap
msgid "    DB::beginTransaction();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:299
#, markdown-text
msgid "You can rollback the transaction via the `rollBack` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:301
#, markdown-text, no-wrap
msgid "    DB::rollBack();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:303
#, markdown-text
msgid "Lastly, you can commit a transaction via the `commit` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:305
#, markdown-text, no-wrap
msgid "    DB::commit();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:307
#, markdown-text, no-wrap
msgid ""
"> {tip} The `DB` facade's transaction methods control the transactions for "
"both the [query builder](/docs/{{version}}/queries) and [Eloquent "
"ORM](/docs/{{version}}/eloquent).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:309
#, markdown-text, no-wrap
msgid "<a name=\"connecting-to-the-database-cli\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:309
#, markdown-text, no-wrap
msgid "Connecting To The Database CLI"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:312
#, markdown-text
msgid ""
"If you would like to connect to your database's CLI, you may use the `db` "
"Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:314
#, markdown-text, no-wrap
msgid "    php artisan db\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:316
#, markdown-text
msgid ""
"If needed, you may specify a database connection name to connect to a "
"database connection that is not the default connection:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:317
#, markdown-text, no-wrap
msgid "    php artisan db mysql\n"
msgstr ""
