msgid ""
msgstr ""

#: ./docs/8.x/scout.md:1
#: ./docs/9.x/scout.md:1
#: ./docs/10.x/scout.md:1
#: ./docs/11.x/scout.md:1
#: ./docs/master/scout.md:1
msgctxt "H1"
msgid "Laravel Scout"
msgstr ""

#: ./docs/8.x/scout.md:3
#: ./docs/9.x/scout.md:3
#: ./docs/10.x/scout.md:3
#: ./docs/11.x/scout.md:3
#: ./docs/master/scout.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/scout.md:4
#: ./docs/9.x/scout.md:4
#: ./docs/10.x/scout.md:4
#: ./docs/11.x/scout.md:4
#: ./docs/master/scout.md:4
msgctxt "P"
msgid "[Installation](#installation)"
msgstr ""

#: ./docs/8.x/scout.md:5
#: ./docs/9.x/scout.md:5
#: ./docs/10.x/scout.md:6
#: ./docs/11.x/scout.md:6
#: ./docs/master/scout.md:6
msgctxt "P"
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: ./docs/8.x/scout.md:6
#: ./docs/9.x/scout.md:6
#: ./docs/10.x/scout.md:5
#: ./docs/11.x/scout.md:5
#: ./docs/master/scout.md:5
msgctxt "P"
msgid "[Queueing](#queueing)"
msgstr ""

#: ./docs/10.x/scout.md:7
#: ./docs/11.x/scout.md:7
#: ./docs/master/scout.md:7
msgctxt "P"
msgid "[Algolia](#algolia)"
msgstr ""

#: ./docs/8.x/scout.md:7
#: ./docs/9.x/scout.md:7
#: ./docs/10.x/scout.md:10
#: ./docs/11.x/scout.md:10
#: ./docs/master/scout.md:10
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/10.x/scout.md:8
#: ./docs/11.x/scout.md:8
#: ./docs/master/scout.md:8
msgctxt "P"
msgid "[Meilisearch](#meilisearch)"
msgstr ""

#: ./docs/8.x/scout.md:8
#: ./docs/9.x/scout.md:8
#: ./docs/10.x/scout.md:11
#: ./docs/11.x/scout.md:11
#: ./docs/master/scout.md:11
msgctxt "P"
msgid "[Configuring Model Indexes](#configuring-model-indexes)"
msgstr ""

#: ./docs/10.x/scout.md:9
#: ./docs/11.x/scout.md:9
#: ./docs/master/scout.md:9
msgctxt "P"
msgid "[Typesense](#typesense)"
msgstr ""

#: ./docs/8.x/scout.md:9
#: ./docs/9.x/scout.md:9
#: ./docs/10.x/scout.md:12
#: ./docs/11.x/scout.md:12
#: ./docs/master/scout.md:12
msgctxt "P"
msgid "[Configuring Searchable Data](#configuring-searchable-data)"
msgstr ""

#: ./docs/8.x/scout.md:10
#: ./docs/9.x/scout.md:10
msgctxt "P"
msgid "[Configuring The Model ID](#configuring-the-model-id)"
msgstr ""

#: ./docs/8.x/scout.md:11
#: ./docs/9.x/scout.md:12
#: ./docs/10.x/scout.md:15
#: ./docs/11.x/scout.md:15
#: ./docs/master/scout.md:15
msgctxt "P"
msgid "[Identifying Users](#identifying-users)"
msgstr ""

#: ./docs/9.x/scout.md:11
msgctxt "P"
msgid "[Configuring Search Engines Per Model](#configuring-search-engines-per-model)"
msgstr ""

#: ./docs/8.x/scout.md:12
msgctxt "P"
msgid "[Local Development](#local-development)"
msgstr ""

#: ./docs/10.x/scout.md:13
#: ./docs/11.x/scout.md:13
#: ./docs/master/scout.md:13
msgctxt "P"
msgid "[Configuring the Model ID](#configuring-the-model-id)"
msgstr ""

#: ./docs/8.x/scout.md:13
#: ./docs/9.x/scout.md:16
#: ./docs/10.x/scout.md:19
#: ./docs/11.x/scout.md:19
#: ./docs/master/scout.md:19
msgctxt "P"
msgid "[Indexing](#indexing)"
msgstr ""

#: ./docs/9.x/scout.md:13
#: ./docs/10.x/scout.md:16
#: ./docs/11.x/scout.md:16
#: ./docs/master/scout.md:16
msgctxt "P"
msgid "[Database / Collection Engines](#database-and-collection-engines)"
msgstr ""

#: ./docs/10.x/scout.md:14
#: ./docs/11.x/scout.md:14
#: ./docs/master/scout.md:14
msgctxt "P"
msgid "[Configuring Search Engines per Model](#configuring-search-engines-per-model)"
msgstr ""

#: ./docs/8.x/scout.md:14
#: ./docs/9.x/scout.md:17
#: ./docs/10.x/scout.md:20
#: ./docs/11.x/scout.md:20
#: ./docs/master/scout.md:20
msgctxt "P"
msgid "[Batch Import](#batch-import)"
msgstr ""

#: ./docs/9.x/scout.md:14
#: ./docs/10.x/scout.md:17
#: ./docs/11.x/scout.md:17
#: ./docs/master/scout.md:17
msgctxt "P"
msgid "[Database Engine](#database-engine)"
msgstr ""

#: ./docs/8.x/scout.md:15
#: ./docs/9.x/scout.md:18
#: ./docs/10.x/scout.md:21
#: ./docs/11.x/scout.md:21
#: ./docs/master/scout.md:21
msgctxt "P"
msgid "[Adding Records](#adding-records)"
msgstr ""

#: ./docs/9.x/scout.md:15
#: ./docs/10.x/scout.md:18
#: ./docs/11.x/scout.md:18
#: ./docs/master/scout.md:18
msgctxt "P"
msgid "[Collection Engine](#collection-engine)"
msgstr ""

#: ./docs/8.x/scout.md:16
#: ./docs/9.x/scout.md:19
#: ./docs/10.x/scout.md:22
#: ./docs/11.x/scout.md:22
#: ./docs/master/scout.md:22
msgctxt "P"
msgid "[Updating Records](#updating-records)"
msgstr ""

#: ./docs/8.x/scout.md:17
#: ./docs/9.x/scout.md:20
#: ./docs/10.x/scout.md:23
#: ./docs/11.x/scout.md:23
#: ./docs/master/scout.md:23
msgctxt "P"
msgid "[Removing Records](#removing-records)"
msgstr ""

#: ./docs/8.x/scout.md:18
#: ./docs/9.x/scout.md:21
#: ./docs/10.x/scout.md:24
#: ./docs/11.x/scout.md:24
#: ./docs/master/scout.md:24
msgctxt "P"
msgid "[Pausing Indexing](#pausing-indexing)"
msgstr ""

#: ./docs/8.x/scout.md:19
#: ./docs/9.x/scout.md:22
#: ./docs/10.x/scout.md:25
#: ./docs/11.x/scout.md:25
#: ./docs/master/scout.md:25
msgctxt "P"
msgid "[Conditionally Searchable Model Instances](#conditionally-searchable-model-instances)"
msgstr ""

#: ./docs/8.x/scout.md:20
#: ./docs/9.x/scout.md:23
#: ./docs/10.x/scout.md:26
#: ./docs/11.x/scout.md:26
#: ./docs/master/scout.md:26
msgctxt "P"
msgid "[Searching](#searching)"
msgstr ""

#: ./docs/8.x/scout.md:21
#: ./docs/9.x/scout.md:24
#: ./docs/10.x/scout.md:27
#: ./docs/11.x/scout.md:27
#: ./docs/master/scout.md:27
msgctxt "P"
msgid "[Where Clauses](#where-clauses)"
msgstr ""

#: ./docs/8.x/scout.md:22
#: ./docs/9.x/scout.md:25
#: ./docs/10.x/scout.md:28
#: ./docs/11.x/scout.md:28
#: ./docs/master/scout.md:28
msgctxt "P"
msgid "[Pagination](#pagination)"
msgstr ""

#: ./docs/8.x/scout.md:23
#: ./docs/9.x/scout.md:26
#: ./docs/10.x/scout.md:29
#: ./docs/11.x/scout.md:29
#: ./docs/master/scout.md:29
msgctxt "P"
msgid "[Soft Deleting](#soft-deleting)"
msgstr ""

#: ./docs/8.x/scout.md:24
#: ./docs/9.x/scout.md:27
#: ./docs/10.x/scout.md:30
#: ./docs/11.x/scout.md:30
#: ./docs/master/scout.md:30
msgctxt "P"
msgid "[Customizing Engine Searches](#customizing-engine-searches)"
msgstr ""

#: ./docs/8.x/scout.md:25
#: ./docs/9.x/scout.md:28
#: ./docs/10.x/scout.md:31
#: ./docs/11.x/scout.md:31
#: ./docs/master/scout.md:31
msgctxt "P"
msgid "[Custom Engines](#custom-engines)"
msgstr ""

#: ./docs/8.x/scout.md:26
#: ./docs/9.x/scout.md:29
msgctxt "P"
msgid "[Builder Macros](#builder-macros)"
msgstr ""

#: ./docs/8.x/scout.md:28
#: ./docs/9.x/scout.md:31
#: ./docs/10.x/scout.md:33
#: ./docs/11.x/scout.md:33
#: ./docs/master/scout.md:33
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:29
#: ./docs/9.x/scout.md:32
#: ./docs/10.x/scout.md:34
#: ./docs/11.x/scout.md:34
#: ./docs/master/scout.md:34
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/scout.md:31
#: ./docs/9.x/scout.md:34
#: ./docs/10.x/scout.md:36
#: ./docs/11.x/scout.md:36
#: ./docs/master/scout.md:36
msgctxt "P"
msgid "[Laravel Scout](https://github.com/laravel/scout) provides a simple, driver based solution for adding full-text search to your [Eloquent models](/docs/{{version}}/eloquent). Using model observers, Scout will automatically keep your search indexes in sync with your Eloquent records."
msgstr ""

#: ./docs/8.x/scout.md:33
msgctxt "P"
msgid "Currently, Scout ships with [Algolia](https://www.algolia.com/) and [MeiliSearch](https://www.meilisearch.com) drivers. In addition, Scout includes a \"collection\" driver that is designed for local development usage and does not require any external dependencies or third-party services. Furthermore, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#: ./docs/8.x/scout.md:35
#: ./docs/9.x/scout.md:38
#: ./docs/10.x/scout.md:40
#: ./docs/11.x/scout.md:40
#: ./docs/master/scout.md:40
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:36
#: ./docs/9.x/scout.md:39
#: ./docs/10.x/scout.md:41
#: ./docs/11.x/scout.md:41
#: ./docs/master/scout.md:41
msgctxt "H2"
msgid "Installation"
msgstr ""

#: ./docs/9.x/scout.md:36
msgctxt "P"
msgid "Currently, Scout ships with [Algolia](https://www.algolia.com/), [MeiliSearch](https://www.meilisearch.com), and MySQL / PostgreSQL (`database`) drivers. In addition, Scout includes a \"collection\" driver that is designed for local development usage and does not require any external dependencies or third-party services. Furthermore, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#: ./docs/10.x/scout.md:38
#: ./docs/11.x/scout.md:38
#: ./docs/master/scout.md:38
msgctxt "P"
msgid "Currently, Scout ships with [Algolia](https://www.algolia.com/), [Meilisearch](https://www.meilisearch.com), [Typesense](https://typesense.org), and MySQL / PostgreSQL (`database`) drivers. In addition, Scout includes a \"collection\" driver that is designed for local development usage and does not require any external dependencies or third-party services. Furthermore, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#: ./docs/8.x/scout.md:38
#: ./docs/9.x/scout.md:41
#: ./docs/10.x/scout.md:43
#: ./docs/11.x/scout.md:43
#: ./docs/master/scout.md:43
msgctxt "P"
msgid "First, install Scout via the Composer package manager:"
msgstr ""

#: ./docs/8.x/scout.md:40
#: ./docs/9.x/scout.md:43
#: ./docs/10.x/scout.md:45
#: ./docs/11.x/scout.md:45
#: ./docs/master/scout.md:45
msgctxt "CODE"
msgid "composer require laravel/scout"
msgstr ""

#: ./docs/8.x/scout.md:42
#: ./docs/9.x/scout.md:47
#: ./docs/10.x/scout.md:49
#: ./docs/11.x/scout.md:49
#: ./docs/master/scout.md:49
msgctxt "P"
msgid "After installing Scout, you should publish the Scout configuration file using the `vendor:publish` Artisan command. This command will publish the `scout.php` configuration file to your application's `config` directory:"
msgstr ""

#: ./docs/8.x/scout.md:44
#: ./docs/9.x/scout.md:49
#: ./docs/10.x/scout.md:51
#: ./docs/11.x/scout.md:51
#: ./docs/master/scout.md:51
msgctxt "CODE"
msgid "php artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\""
msgstr ""

#: ./docs/8.x/scout.md:46
#: ./docs/9.x/scout.md:53
#: ./docs/10.x/scout.md:55
#: ./docs/11.x/scout.md:55
#: ./docs/master/scout.md:55
msgctxt "P"
msgid "Finally, add the `Laravel\\Scout\\Searchable` trait to the model you would like to make searchable. This trait will register a model observer that will automatically keep the model in sync with your search driver:"
msgstr ""

#: ./docs/8.x/scout.md:48
#: ./docs/9.x/scout.md:55
#: ./docs/10.x/scout.md:57
#: ./docs/11.x/scout.md:57
#: ./docs/master/scout.md:57
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:60
#: ./docs/9.x/scout.md:67
#: ./docs/10.x/scout.md:91
#: ./docs/11.x/scout.md:91
#: ./docs/master/scout.md:91
#~ msgctxt "P"
#~ msgid "<a name=\"driver-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:61
#: ./docs/9.x/scout.md:68
#: ./docs/10.x/scout.md:92
#: ./docs/11.x/scout.md:92
#: ./docs/master/scout.md:92
msgctxt "H3"
msgid "Driver Prerequisites"
msgstr ""

#: ./docs/8.x/scout.md:63
#: ./docs/9.x/scout.md:70
#: ./docs/10.x/scout.md:94
#: ./docs/11.x/scout.md:94
#: ./docs/master/scout.md:94
#~ msgctxt "P"
#~ msgid "<a name=\"algolia\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:64
#: ./docs/9.x/scout.md:71
#: ./docs/10.x/scout.md:95
#: ./docs/11.x/scout.md:95
#: ./docs/master/scout.md:95
msgctxt "H4"
msgid "Algolia"
msgstr ""

#: ./docs/8.x/scout.md:66
#: ./docs/9.x/scout.md:73
#: ./docs/10.x/scout.md:97
#: ./docs/11.x/scout.md:97
#: ./docs/master/scout.md:97
msgctxt "P"
msgid "When using the Algolia driver, you should configure your Algolia `id` and `secret` credentials in your `config/scout.php` configuration file. Once your credentials have been configured, you will also need to install the Algolia PHP SDK via the Composer package manager:"
msgstr ""

#: ./docs/8.x/scout.md:68
#: ./docs/9.x/scout.md:75
#: ./docs/10.x/scout.md:99
#: ./docs/11.x/scout.md:99
#: ./docs/master/scout.md:99
msgctxt "CODE"
msgid "composer require algolia/algoliasearch-client-php"
msgstr ""

#: ./docs/8.x/scout.md:70
#: ./docs/9.x/scout.md:79
#: ./docs/10.x/scout.md:103
#: ./docs/11.x/scout.md:103
#: ./docs/master/scout.md:103
#~ msgctxt "P"
#~ msgid "<a name=\"meilisearch\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:71
#: ./docs/9.x/scout.md:80
msgctxt "H4"
msgid "MeiliSearch"
msgstr ""

#: ./docs/8.x/scout.md:73
#: ./docs/9.x/scout.md:82
msgctxt "P"
msgid "[MeiliSearch](https://www.meilisearch.com) is a blazingly fast and open source search engine. If you aren't sure how to install MeiliSearch on your local machine, you may use [Laravel Sail](/docs/{{version}}/sail#meilisearch), Laravel's officially supported Docker development environment."
msgstr ""

#: ./docs/8.x/scout.md:75
#: ./docs/9.x/scout.md:84
msgctxt "P"
msgid "When using the MeiliSearch driver you will need to install the MeiliSearch PHP SDK via the Composer package manager:"
msgstr ""

#: ./docs/8.x/scout.md:77
#: ./docs/9.x/scout.md:86
#: ./docs/10.x/scout.md:110
#: ./docs/11.x/scout.md:110
#: ./docs/master/scout.md:110
msgctxt "CODE"
msgid "composer require meilisearch/meilisearch-php http-interop/http-factory-guzzle"
msgstr ""

#: ./docs/8.x/scout.md:79
#: ./docs/9.x/scout.md:90
msgctxt "P"
msgid "Then, set the `SCOUT_DRIVER` environment variable as well as your MeiliSearch `host` and `key` credentials within your application's `.env` file:"
msgstr ""

#: ./docs/8.x/scout.md:81
#: ./docs/9.x/scout.md:92
#: ./docs/10.x/scout.md:116
#: ./docs/11.x/scout.md:116
#: ./docs/master/scout.md:116
msgctxt "CODE"
msgid ""
"SCOUT_DRIVER=meilisearch\n"
"MEILISEARCH_HOST=http://127.0.0.1:7700\n"
"MEILISEARCH_KEY=masterKey"
msgstr ""

#: ./docs/8.x/scout.md:85
#: ./docs/9.x/scout.md:98
msgctxt "P"
msgid "For more information regarding MeiliSearch, please consult the [MeiliSearch documentation](https://docs.meilisearch.com/learn/getting_started/quick_start.html)."
msgstr ""

#: ./docs/10.x/scout.md:87
#: ./docs/11.x/scout.md:87
#: ./docs/master/scout.md:87
msgctxt "P"
msgid "Of course, if you customize the connection and queue that Scout jobs utilize, you should run a queue worker to process jobs on that connection and queue:"
msgstr ""

#: ./docs/8.x/scout.md:87
#: ./docs/9.x/scout.md:100
msgctxt "P"
msgid "In addition, you should ensure that you install a version of `meilisearch/meilisearch-php` that is compatible with your MeiliSearch binary version by reviewing [MeiliSearch's documentation regarding binary compatibility](https://github.com/meilisearch/meilisearch-php#-compatibility-with-meilisearch)."
msgstr ""

#: ./docs/10.x/scout.md:89
#: ./docs/11.x/scout.md:89
#: ./docs/master/scout.md:89
msgctxt "CODE"
msgid "php artisan queue:work redis --queue=scout"
msgstr ""

#: ./docs/8.x/scout.md:89
#: ./docs/9.x/scout.md:103
msgctxt "P"
msgid "When upgrading Scout on an application that utilizes MeiliSearch, you should always [review any additional breaking changes](https://github.com/meilisearch/MeiliSearch/releases) to the MeiliSearch service itself."
msgstr ""

#: ./docs/8.x/scout.md:91
#: ./docs/9.x/scout.md:105
#: ./docs/10.x/scout.md:69
#: ./docs/11.x/scout.md:69
#: ./docs/master/scout.md:69
#~ msgctxt "P"
#~ msgid "<a name=\"queueing\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:92
#: ./docs/9.x/scout.md:106
#: ./docs/10.x/scout.md:70
#: ./docs/11.x/scout.md:70
#: ./docs/master/scout.md:70
msgctxt "H3"
msgid "Queueing"
msgstr ""

#: ./docs/8.x/scout.md:94
#: ./docs/9.x/scout.md:108
#: ./docs/10.x/scout.md:72
#: ./docs/11.x/scout.md:72
#: ./docs/master/scout.md:72
msgctxt "P"
msgid "While not strictly required to use Scout, you should strongly consider configuring a [queue driver](/docs/{{version}}/queues) before using the library. Running a queue worker will allow Scout to queue all operations that sync your model information to your search indexes, providing much better response times for your application's web interface."
msgstr ""

#: ./docs/8.x/scout.md:96
#: ./docs/9.x/scout.md:110
#: ./docs/10.x/scout.md:74
#: ./docs/11.x/scout.md:74
#: ./docs/master/scout.md:74
msgctxt "P"
msgid "Once you have configured a queue driver, set the value of the `queue` option in your `config/scout.php` configuration file to `true`:"
msgstr ""

#: ./docs/8.x/scout.md:98
#: ./docs/9.x/scout.md:112
#: ./docs/10.x/scout.md:76
#: ./docs/11.x/scout.md:76
#: ./docs/master/scout.md:76
msgctxt "CODE"
msgid "'queue' => true,"
msgstr ""

#: ./docs/8.x/scout.md:100
#: ./docs/9.x/scout.md:123
#: ./docs/10.x/scout.md:214
#: ./docs/11.x/scout.md:214
#: ./docs/master/scout.md:214
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:101
#: ./docs/9.x/scout.md:124
#: ./docs/10.x/scout.md:215
#: ./docs/11.x/scout.md:215
#: ./docs/master/scout.md:215
msgctxt "H2"
msgid "Configuration"
msgstr ""

#: ./docs/8.x/scout.md:103
#: ./docs/9.x/scout.md:126
#: ./docs/10.x/scout.md:217
#: ./docs/11.x/scout.md:217
#: ./docs/master/scout.md:217
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-model-indexes\"></a>"
#~ msgstr ""

#: ./docs/10.x/scout.md:104
#: ./docs/11.x/scout.md:104
#: ./docs/master/scout.md:104
msgctxt "H3"
msgid "Meilisearch"
msgstr ""

#: ./docs/8.x/scout.md:104
#: ./docs/9.x/scout.md:127
#: ./docs/10.x/scout.md:218
#: ./docs/11.x/scout.md:218
#: ./docs/master/scout.md:218
msgctxt "H3"
msgid "Configuring Model Indexes"
msgstr ""

#: ./docs/10.x/scout.md:106
#: ./docs/11.x/scout.md:106
#: ./docs/master/scout.md:106
msgctxt "P"
msgid "[Meilisearch](https://www.meilisearch.com) is a blazingly fast and open source search engine. If you aren't sure how to install Meilisearch on your local machine, you may use [Laravel Sail](/docs/{{version}}/sail#meilisearch), Laravel's officially supported Docker development environment."
msgstr ""

#: ./docs/8.x/scout.md:106
#: ./docs/9.x/scout.md:129
#: ./docs/10.x/scout.md:220
#: ./docs/11.x/scout.md:220
#: ./docs/master/scout.md:220
msgctxt "P"
msgid "Each Eloquent model is synced with a given search \"index\", which contains all of the searchable records for that model. In other words, you can think of each index like a MySQL table. By default, each model will be persisted to an index matching the model's typical \"table\" name. Typically, this is the plural form of the model name; however, you are free to customize the model's index by overriding the `searchableAs` method on the model:"
msgstr ""

#: ./docs/10.x/scout.md:108
#: ./docs/11.x/scout.md:108
#: ./docs/master/scout.md:108
msgctxt "P"
msgid "When using the Meilisearch driver you will need to install the Meilisearch PHP SDK via the Composer package manager:"
msgstr ""

#: ./docs/8.x/scout.md:108
#: ./docs/9.x/scout.md:131
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the name of the index associated with the model.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function searchableAs()\n"
"    {\n"
"        return 'posts_index';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/scout.md:114
#: ./docs/11.x/scout.md:114
#: ./docs/master/scout.md:114
msgctxt "P"
msgid "Then, set the `SCOUT_DRIVER` environment variable as well as your Meilisearch `host` and `key` credentials within your application's `.env` file:"
msgstr ""

#: ./docs/9.x/scout.md:114
#: ./docs/10.x/scout.md:78
#: ./docs/11.x/scout.md:78
#: ./docs/master/scout.md:78
msgctxt "P"
msgid "Even when the `queue` option is set to `false`, it's important to remember that some Scout drivers like Algolia and Meilisearch always index records asynchronously. Meaning, even though the index operation has completed within your Laravel application, the search engine itself may not reflect the new and updated records immediately."
msgstr ""

#: ./docs/9.x/scout.md:116
#: ./docs/10.x/scout.md:80
#: ./docs/11.x/scout.md:80
#: ./docs/master/scout.md:80
msgctxt "P"
msgid "To specify the connection and queue that your Scout jobs utilize, you may define the `queue` configuration option as an array:"
msgstr ""

#: ./docs/9.x/scout.md:118
#: ./docs/10.x/scout.md:82
#: ./docs/11.x/scout.md:82
#: ./docs/master/scout.md:82
msgctxt "CODE"
msgid ""
"'queue' => [\n"
"    'connection' => 'redis',\n"
"    'queue' => 'scout'\n"
"],"
msgstr ""

#: ./docs/10.x/scout.md:122
#: ./docs/11.x/scout.md:122
#: ./docs/master/scout.md:122
msgctxt "P"
msgid "For more information regarding Meilisearch, please consult the [Meilisearch documentation](https://docs.meilisearch.com/learn/getting_started/quick_start.html)."
msgstr ""

#: ./docs/10.x/scout.md:124
#: ./docs/11.x/scout.md:124
#: ./docs/master/scout.md:124
msgctxt "P"
msgid "In addition, you should ensure that you install a version of `meilisearch/meilisearch-php` that is compatible with your Meilisearch binary version by reviewing [Meilisearch's documentation regarding binary compatibility](https://github.com/meilisearch/meilisearch-php#-compatibility-with-meilisearch)."
msgstr ""

#: ./docs/10.x/scout.md:127
#: ./docs/11.x/scout.md:127
#: ./docs/master/scout.md:127
msgctxt "P"
msgid "When upgrading Scout on an application that utilizes Meilisearch, you should always [review any additional breaking changes](https://github.com/meilisearch/Meilisearch/releases) to the Meilisearch service itself."
msgstr ""

#: ./docs/10.x/scout.md:129
#: ./docs/11.x/scout.md:129
#: ./docs/master/scout.md:129
#~ msgctxt "P"
#~ msgid "<a name=\"typesense\"></a>"
#~ msgstr ""

#: ./docs/10.x/scout.md:130
#: ./docs/11.x/scout.md:130
#: ./docs/master/scout.md:130
msgctxt "H3"
msgid "Typesense"
msgstr ""

#: ./docs/8.x/scout.md:130
#: ./docs/9.x/scout.md:153
#: ./docs/10.x/scout.md:242
#: ./docs/11.x/scout.md:242
#: ./docs/master/scout.md:242
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-searchable-data\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:131
#: ./docs/9.x/scout.md:154
#: ./docs/10.x/scout.md:243
#: ./docs/11.x/scout.md:243
#: ./docs/master/scout.md:243
msgctxt "H3"
msgid "Configuring Searchable Data"
msgstr ""

#: ./docs/10.x/scout.md:132
#: ./docs/11.x/scout.md:132
#: ./docs/master/scout.md:132
msgctxt "P"
msgid "[Typesense](https://typesense.org) is a lightning-fast, open source search engine and supports keyword search, semantic search, geo search, and vector search."
msgstr ""

#: ./docs/8.x/scout.md:133
#: ./docs/9.x/scout.md:156
#: ./docs/10.x/scout.md:245
#: ./docs/11.x/scout.md:245
#: ./docs/master/scout.md:245
msgctxt "P"
msgid "By default, the entire `toArray` form of a given model will be persisted to its search index. If you would like to customize the data that is synchronized to the search index, you may override the `toSearchableArray` method on the model:"
msgstr ""

#: ./docs/10.x/scout.md:134
#: ./docs/11.x/scout.md:134
#: ./docs/master/scout.md:134
msgctxt "P"
msgid "You can [self-host](https://typesense.org/docs/guide/install-typesense.html#option-2-local-machine-self-hosting) Typesense or use [Typesense Cloud](https://cloud.typesense.org)."
msgstr ""

#: ./docs/8.x/scout.md:135
#: ./docs/9.x/scout.md:158
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the indexable data array for the model.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function toSearchableArray()\n"
"    {\n"
"        $array = $this->toArray();\n"
"\n"
"        // Customize the data array...\n"
"\n"
"        return $array;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/scout.md:136
#: ./docs/11.x/scout.md:136
#: ./docs/master/scout.md:136
msgctxt "P"
msgid "To get started using Typesense with Scout, install the Typesense PHP SDK via the Composer package manager:"
msgstr ""

#: ./docs/10.x/scout.md:138
#: ./docs/11.x/scout.md:138
#: ./docs/master/scout.md:138
msgctxt "CODE: shell"
msgid "composer require typesense/typesense-php"
msgstr ""

#: ./docs/10.x/scout.md:142
#: ./docs/11.x/scout.md:142
#: ./docs/master/scout.md:142
msgctxt "P"
msgid "Then, set the `SCOUT_DRIVER` environment variable as well as your Typesense host and API key credentials within your application's .env file:"
msgstr ""

#: ./docs/10.x/scout.md:144
#: ./docs/11.x/scout.md:144
#: ./docs/master/scout.md:144
msgctxt "CODE: env"
msgid ""
"SCOUT_DRIVER=typesense\n"
"TYPESENSE_API_KEY=masterKey\n"
"TYPESENSE_HOST=localhost"
msgstr ""

#: ./docs/10.x/scout.md:150
#: ./docs/master/scout.md:150
msgctxt "P"
msgid "If needed, you may also specify your installation's port, path, and protocol:"
msgstr ""

#: ./docs/11.x/scout.md:150
msgctxt "P"
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may need to adjust the `TYPESENSE_HOST` environment variable to match the Docker container name. You may also optionally specify your installation's port, path, and protocol:"
msgstr ""

#: ./docs/10.x/scout.md:152
#: ./docs/11.x/scout.md:152
#: ./docs/master/scout.md:152
msgctxt "CODE: env"
msgid ""
"TYPESENSE_PORT=8108\n"
"TYPESENSE_PATH=\n"
"TYPESENSE_PROTOCOL=http"
msgstr ""

#: ./docs/10.x/scout.md:158
#: ./docs/11.x/scout.md:158
#: ./docs/master/scout.md:158
msgctxt "P"
msgid "Additional settings and schema definitions for your Typesense collections can be found within your application's `config/scout.php` configuration file. For more information regarding Typesense, please consult the [Typesense documentation](https://typesense.org/docs/guide/#quick-start)."
msgstr ""

#: ./docs/10.x/scout.md:160
#: ./docs/11.x/scout.md:160
#: ./docs/master/scout.md:160
#~ msgctxt "P"
#~ msgid "<a name=\"preparing-data-for-storage-in-typesense\"></a>"
#~ msgstr ""

#: ./docs/10.x/scout.md:161
#: ./docs/11.x/scout.md:161
#: ./docs/master/scout.md:161
msgctxt "H4"
msgid "Preparing Data for Storage in Typesense"
msgstr ""

#: ./docs/8.x/scout.md:161
#: ./docs/9.x/scout.md:237
#: ./docs/10.x/scout.md:326
#: ./docs/11.x/scout.md:326
#: ./docs/master/scout.md:326
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-the-model-id\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:162
#: ./docs/9.x/scout.md:238
msgctxt "H3"
msgid "Configuring The Model ID"
msgstr ""

#: ./docs/10.x/scout.md:163
#: ./docs/11.x/scout.md:163
#: ./docs/master/scout.md:163
msgctxt "P"
msgid "When utilizing Typesense, your searchable model's must define a `toSearchableArray` method that casts your model's primary key to a string and creation date to a UNIX timestamp:"
msgstr ""

#: ./docs/8.x/scout.md:164
msgctxt "P"
msgid "By default, Scout will use the primary key of the model as model's unique ID / key that is stored in the search index. If you need to customize this behavior, you may override the `getScoutKey` and the `getScoutKeyName` methods on the model:"
msgstr ""

#: ./docs/10.x/scout.md:165
#: ./docs/11.x/scout.md:165
#: ./docs/master/scout.md:165
msgctxt "CODE: php"
msgid ""
"/**\n"
" * Get the indexable data array for the model.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function toSearchableArray()\n"
"{\n"
"    return array_merge($this->toArray(),[\n"
"        'id' => (string) $this->id,\n"
"        'created_at' => $this->created_at->timestamp,\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:166
#: ./docs/9.x/scout.md:242
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the value used to index the model.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function getScoutKey()\n"
"    {\n"
"        return $this->email;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the key name used to index the model.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function getScoutKeyName()\n"
"    {\n"
"        return 'email';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/scout.md:180
#: ./docs/11.x/scout.md:180
#: ./docs/master/scout.md:180
msgctxt "P"
msgid "You should also define your Typesense collection schemas in your application's `config/scout.php` file. A collection schema describes the data types of each field that is searchable via Typesense. For more information on all available schema options, please consult the [Typesense documentation](https://typesense.org/docs/latest/api/collections.html#schema-parameters)."
msgstr ""

#: ./docs/10.x/scout.md:182
#: ./docs/11.x/scout.md:182
#: ./docs/master/scout.md:182
msgctxt "P"
msgid "If you need to change your Typesense collection's schema after it has been defined, you may either run `scout:flush` and `scout:import`, which will delete all existing indexed data and recreate the schema. Or, you may use Typesense's API to modify the collection's schema without removing any indexed data."
msgstr ""

#: ./docs/10.x/scout.md:184
#: ./docs/11.x/scout.md:184
#: ./docs/master/scout.md:184
msgctxt "P"
msgid "If your searchable model is soft deletable, you should define a `__soft_deleted` field in the model's corresponding Typesense schema within your application's `config/scout.php` configuration file:"
msgstr ""

#: ./docs/9.x/scout.md:184
msgctxt "P"
msgid "Some search engines such as MeiliSearch will only perform filter operations (`>`, `<`, etc.) on data of the correct type. So, when using these search engines and customizing your searchable data, you should ensure that numeric values are cast to their correct type:"
msgstr ""

#: ./docs/10.x/scout.md:186
#: ./docs/11.x/scout.md:186
#: ./docs/master/scout.md:186
msgctxt "CODE: php"
msgid ""
"User::class => [\n"
"    'collection-schema' => [\n"
"        'fields' => [\n"
"            // ...\n"
"            [\n"
"                'name' => '__soft_deleted',\n"
"                'type' => 'int32',\n"
"                'optional' => true,\n"
"            ],\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/9.x/scout.md:186
#: ./docs/10.x/scout.md:275
#: ./docs/11.x/scout.md:275
#: ./docs/master/scout.md:275
msgctxt "CODE"
msgid ""
"public function toSearchableArray()\n"
"{\n"
"    return [\n"
"        'id' => (int) $this->id,\n"
"        'name' => $this->name,\n"
"        'price' => (float) $this->price,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/scout.md:195
#: ./docs/10.x/scout.md:284
#: ./docs/11.x/scout.md:284
#: ./docs/master/scout.md:284
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-filterable-data-for-meilisearch\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:196
msgctxt "H4"
msgid "Configuring Filterable Data & Index Settings (MeiliSearch)"
msgstr ""

#: ./docs/8.x/scout.md:198
#: ./docs/9.x/scout.md:302
#: ./docs/10.x/scout.md:386
#: ./docs/11.x/scout.md:386
#: ./docs/master/scout.md:386
#~ msgctxt "P"
#~ msgid "<a name=\"identifying-users\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:198
msgctxt "P"
msgid "Unlike Scout's other drivers, MeiliSearch requires you to pre-define index search settings such as filterable attributes, sortable attributes, and [other supported settings fields](https://docs.meilisearch.com/reference/api/settings.html)."
msgstr ""

#: ./docs/8.x/scout.md:199
#: ./docs/9.x/scout.md:303
#: ./docs/10.x/scout.md:387
#: ./docs/11.x/scout.md:387
#: ./docs/master/scout.md:387
msgctxt "H3"
msgid "Identifying Users"
msgstr ""

#: ./docs/9.x/scout.md:200
#: ./docs/10.x/scout.md:289
#: ./docs/11.x/scout.md:289
#: ./docs/master/scout.md:289
msgctxt "P"
msgid "Filterable attributes are any attributes you plan to filter on when invoking Scout's `where` method, while sortable attributes are any attributes you plan to sort by when invoking Scout's `orderBy` method. To define your index settings, adjust the `index-settings` portion of your `meilisearch` configuration entry in your application's `scout` configuration file:"
msgstr ""

#: ./docs/10.x/scout.md:201
#: ./docs/11.x/scout.md:201
#: ./docs/master/scout.md:201
#~ msgctxt "P"
#~ msgid "<a name=\"typesense-dynamic-search-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:201
#: ./docs/9.x/scout.md:305
#: ./docs/10.x/scout.md:389
#: ./docs/11.x/scout.md:389
#: ./docs/master/scout.md:389
msgctxt "P"
msgid "Scout also allows you to auto identify users when using [Algolia](https://algolia.com). Associating the authenticated user with search operations may be helpful when viewing your search analytics within Algolia's dashboard. You can enable user identification by defining a `SCOUT_IDENTIFY` environment variable as `true` in your application's `.env` file:"
msgstr ""

#: ./docs/10.x/scout.md:202
#: ./docs/11.x/scout.md:202
#: ./docs/master/scout.md:202
msgctxt "H4"
msgid "Dynamic Search Parameters"
msgstr ""

#: ./docs/9.x/scout.md:202
#: ./docs/10.x/scout.md:291
#: ./docs/11.x/scout.md:291
#: ./docs/master/scout.md:291
msgctxt "CODE: php"
msgid ""
"use App\\Models\\User;\n"
"use App\\Models\\Flight;\n"
"\n"
"'meilisearch' => [\n"
"    'host' => env('MEILISEARCH_HOST', 'http://localhost:7700'),\n"
"    'key' => env('MEILISEARCH_KEY', null),\n"
"    'index-settings' => [\n"
"        User::class => [\n"
"            'filterableAttributes'=> ['id', 'name', 'email'],\n"
"            'sortableAttributes' => ['created_at'],\n"
"            // Other settings fields...\n"
"        ],\n"
"        Flight::class => [\n"
"            'filterableAttributes'=> ['id', 'destination'],\n"
"            'sortableAttributes' => ['updated_at'],\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/scout.md:203
#: ./docs/9.x/scout.md:307
#: ./docs/10.x/scout.md:391
#: ./docs/11.x/scout.md:391
#: ./docs/master/scout.md:391
msgctxt "CODE"
msgid "SCOUT_IDENTIFY=true"
msgstr ""

#: ./docs/10.x/scout.md:204
#: ./docs/11.x/scout.md:204
#: ./docs/master/scout.md:204
msgctxt "P"
msgid "Typesense allows you to modify your [search parameters](https://typesense.org/docs/latest/api/search.html#search-parameters) dynamically when performing a search operation via the `options` method:"
msgstr ""

#: ./docs/8.x/scout.md:205
#: ./docs/9.x/scout.md:311
msgctxt "P"
msgid "Enabling this feature this will also pass the request's IP address and your authenticated user's primary identifier to Algolia so this data is associated with any search request that is made by the user."
msgstr ""

#: ./docs/10.x/scout.md:206
#: ./docs/11.x/scout.md:206
#: ./docs/master/scout.md:206
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Todo;\n"
"\n"
"Todo::search('Groceries')->options([\n"
"    'query_by' => 'title, description'\n"
"])->get();"
msgstr ""

#: ./docs/8.x/scout.md:207
#~ msgctxt "P"
#~ msgid "<a name=\"local-development\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:208
msgctxt "H2"
msgid "Local Development"
msgstr ""

#: ./docs/8.x/scout.md:210
#: ./docs/9.x/scout.md:366
msgctxt "P"
msgid "While you are free to use the Algolia or MeiliSearch search engines during local development, you may find it more convenient to get started with the \"collection\" engine. The collection engine will use \"where\" clauses and collection filtering on results from your existing database to determine the applicable search results for your query. When using this engine, it is not necessary to \"index\" your searchable models, as they will simply be retrieved from your local database."
msgstr ""

#: ./docs/8.x/scout.md:212
#: ./docs/9.x/scout.md:368
#: ./docs/10.x/scout.md:452
#: ./docs/11.x/scout.md:452
#: ./docs/master/scout.md:452
msgctxt "P"
msgid "To use the collection engine, you may simply set the value of the `SCOUT_DRIVER` environment variable to `collection`, or specify the `collection` driver directly in your application's `scout` configuration file:"
msgstr ""

#: ./docs/8.x/scout.md:214
#: ./docs/9.x/scout.md:370
#: ./docs/10.x/scout.md:454
#: ./docs/11.x/scout.md:454
#: ./docs/master/scout.md:454
msgctxt "CODE: ini"
msgid "SCOUT_DRIVER=collection"
msgstr ""

#: ./docs/8.x/scout.md:218
#: ./docs/9.x/scout.md:374
msgctxt "P"
msgid "Once you have specified the collection driver as your preferred driver, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia or MeiliSearch indexes, is unnecessary when using the collection engine."
msgstr ""

#: ./docs/8.x/scout.md:220
#: ./docs/9.x/scout.md:382
#: ./docs/10.x/scout.md:466
#: ./docs/11.x/scout.md:466
#: ./docs/master/scout.md:466
#~ msgctxt "P"
#~ msgid "<a name=\"indexing\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:221
#: ./docs/9.x/scout.md:383
#: ./docs/10.x/scout.md:467
#: ./docs/11.x/scout.md:467
#: ./docs/master/scout.md:467
msgctxt "H2"
msgid "Indexing"
msgstr ""

#: ./docs/10.x/scout.md:222
#: ./docs/11.x/scout.md:222
#: ./docs/master/scout.md:222
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the name of the index associated with the model.\n"
"     */\n"
"    public function searchableAs(): string\n"
"    {\n"
"        return 'posts_index';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:223
#: ./docs/9.x/scout.md:385
#: ./docs/10.x/scout.md:469
#: ./docs/11.x/scout.md:469
#: ./docs/master/scout.md:469
#~ msgctxt "P"
#~ msgid "<a name=\"batch-import\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:223
#: ./docs/10.x/scout.md:312
#: ./docs/11.x/scout.md:312
#: ./docs/master/scout.md:312
msgctxt "P"
msgid "If the model underlying a given index is soft deletable and is included in the `index-settings` array, Scout will automatically include support for filtering on soft deleted models on that index. If you have no other filterable or sortable attributes to define for a soft deletable model index, you may simply add an empty entry to the `index-settings` array for that model:"
msgstr ""

#: ./docs/8.x/scout.md:224
#: ./docs/9.x/scout.md:386
#: ./docs/10.x/scout.md:470
#: ./docs/11.x/scout.md:470
#: ./docs/master/scout.md:470
msgctxt "H3"
msgid "Batch Import"
msgstr ""

#: ./docs/9.x/scout.md:225
#: ./docs/10.x/scout.md:314
#: ./docs/11.x/scout.md:314
#: ./docs/master/scout.md:314
msgctxt "CODE: php"
msgid ""
"'index-settings' => [\n"
"    Flight::class => []\n"
"],"
msgstr ""

#: ./docs/8.x/scout.md:226
#: ./docs/9.x/scout.md:388
#: ./docs/10.x/scout.md:472
#: ./docs/11.x/scout.md:472
#: ./docs/master/scout.md:472
msgctxt "P"
msgid "If you are installing Scout into an existing project, you may already have database records you need to import into your indexes. Scout provides a `scout:import` Artisan command that you may use to import all of your existing records into your search indexes:"
msgstr ""

#: ./docs/8.x/scout.md:228
#: ./docs/9.x/scout.md:390
#: ./docs/10.x/scout.md:474
#: ./docs/11.x/scout.md:474
#: ./docs/master/scout.md:474
msgctxt "CODE"
msgid "php artisan scout:import \"App\\Models\\Post\""
msgstr ""

#: ./docs/8.x/scout.md:230
#: ./docs/9.x/scout.md:394
#: ./docs/10.x/scout.md:478
#: ./docs/11.x/scout.md:478
#: ./docs/master/scout.md:478
msgctxt "P"
msgid "The `flush` command may be used to remove all of a model's records from your search indexes:"
msgstr ""

#: ./docs/9.x/scout.md:231
msgctxt "P"
msgid "After configuring your application's index settings, you must invoke the `scout:sync-index-settings` Artisan command. This command will inform MeiliSearch of your currently configured index settings. For convenience, you may wish to make this command part of your deployment process:"
msgstr ""

#: ./docs/8.x/scout.md:232
#: ./docs/9.x/scout.md:396
#: ./docs/10.x/scout.md:480
#: ./docs/11.x/scout.md:480
#: ./docs/master/scout.md:480
msgctxt "CODE"
msgid "php artisan scout:flush \"App\\Models\\Post\""
msgstr ""

#: ./docs/9.x/scout.md:233
#: ./docs/10.x/scout.md:322
#: ./docs/11.x/scout.md:322
#: ./docs/master/scout.md:322
msgctxt "CODE: shell"
msgid "php artisan scout:sync-index-settings"
msgstr ""

#: ./docs/8.x/scout.md:234
#: ./docs/9.x/scout.md:400
#: ./docs/10.x/scout.md:484
#: ./docs/11.x/scout.md:484
#: ./docs/master/scout.md:484
#~ msgctxt "P"
#~ msgid "<a name=\"modifying-the-import-query\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:235
#: ./docs/9.x/scout.md:401
msgctxt "H4"
msgid "Modifying The Import Query"
msgstr ""

#: ./docs/8.x/scout.md:237
#: ./docs/9.x/scout.md:403
#: ./docs/10.x/scout.md:487
#: ./docs/11.x/scout.md:487
#: ./docs/master/scout.md:487
msgctxt "P"
msgid "If you would like to modify the query that is used to retrieve all of your models for batch importing, you may define a `makeAllSearchableUsing` method on your model. This is a great place to add any eager relationship loading that may be necessary before importing your models:"
msgstr ""

#: ./docs/8.x/scout.md:239
#: ./docs/9.x/scout.md:405
msgctxt "CODE"
msgid ""
"/**\n"
" * Modify the query used to retrieve models when making all of the models searchable.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
" * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
" */\n"
"protected function makeAllSearchableUsing($query)\n"
"{\n"
"    return $query->with('author');\n"
"}"
msgstr ""

#: ./docs/9.x/scout.md:240
#: ./docs/10.x/scout.md:329
#: ./docs/11.x/scout.md:329
#: ./docs/master/scout.md:329
msgctxt "P"
msgid "By default, Scout will use the primary key of the model as the model's unique ID / key that is stored in the search index. If you need to customize this behavior, you may override the `getScoutKey` and the `getScoutKeyName` methods on the model:"
msgstr ""

#: ./docs/10.x/scout.md:247
#: ./docs/11.x/scout.md:247
#: ./docs/master/scout.md:247
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the indexable data array for the model.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function toSearchableArray(): array\n"
"    {\n"
"        $array = $this->toArray();\n"
"\n"
"        // Customize the data array...\n"
"\n"
"        return $array;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:250
#: ./docs/9.x/scout.md:416
#: ./docs/10.x/scout.md:502
#: ./docs/11.x/scout.md:502
#: ./docs/master/scout.md:502
#~ msgctxt "P"
#~ msgid "<a name=\"adding-records\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:251
#: ./docs/9.x/scout.md:417
#: ./docs/10.x/scout.md:503
#: ./docs/11.x/scout.md:503
#: ./docs/master/scout.md:503
msgctxt "H3"
msgid "Adding Records"
msgstr ""

#: ./docs/8.x/scout.md:253
#: ./docs/9.x/scout.md:419
#: ./docs/10.x/scout.md:505
#: ./docs/11.x/scout.md:505
#: ./docs/master/scout.md:505
msgctxt "P"
msgid "Once you have added the `Laravel\\Scout\\Searchable` trait to a model, all you need to do is `save` or `create` a model instance and it will automatically be added to your search index. If you have configured Scout to [use queues](#queueing) this operation will be performed in the background by your queue worker:"
msgstr ""

#: ./docs/8.x/scout.md:255
#: ./docs/9.x/scout.md:421
#: ./docs/10.x/scout.md:507
#: ./docs/11.x/scout.md:507
#: ./docs/master/scout.md:507
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$order = new Order;\n"
"\n"
"// ...\n"
"\n"
"$order->save();"
msgstr ""

#: ./docs/8.x/scout.md:263
#: ./docs/9.x/scout.md:429
#: ./docs/10.x/scout.md:515
#: ./docs/11.x/scout.md:515
#: ./docs/master/scout.md:515
#~ msgctxt "P"
#~ msgid "<a name=\"adding-records-via-query\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:264
#: ./docs/9.x/scout.md:430
msgctxt "H4"
msgid "Adding Records Via Query"
msgstr ""

#: ./docs/8.x/scout.md:266
#: ./docs/9.x/scout.md:432
#: ./docs/10.x/scout.md:518
#: ./docs/11.x/scout.md:518
#: ./docs/master/scout.md:518
msgctxt "P"
msgid "If you would like to add a collection of models to your search index via an Eloquent query, you may chain the `searchable` method onto the Eloquent query. The `searchable` method will [chunk the results](/docs/{{version}}/eloquent#chunking-results) of the query and add the records to your search index. Again, if you have configured Scout to use queues, all of the chunks will be imported in the background by your queue workers:"
msgstr ""

#: ./docs/8.x/scout.md:268
#: ./docs/9.x/scout.md:434
#: ./docs/10.x/scout.md:520
#: ./docs/11.x/scout.md:520
#: ./docs/master/scout.md:520
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"Order::where('price', '>', 100)->searchable();"
msgstr ""

#: ./docs/8.x/scout.md:272
#: ./docs/9.x/scout.md:438
#: ./docs/10.x/scout.md:524
#: ./docs/11.x/scout.md:524
#: ./docs/master/scout.md:524
msgctxt "P"
msgid "You may also call the `searchable` method on an Eloquent relationship instance:"
msgstr ""

#: ./docs/10.x/scout.md:273
#: ./docs/11.x/scout.md:273
#: ./docs/master/scout.md:273
msgctxt "P"
msgid "Some search engines such as Meilisearch will only perform filter operations (`>`, `<`, etc.) on data of the correct type. So, when using these search engines and customizing your searchable data, you should ensure that numeric values are cast to their correct type:"
msgstr ""

#: ./docs/8.x/scout.md:274
#: ./docs/8.x/scout.md:301
#: ./docs/9.x/scout.md:440
#: ./docs/9.x/scout.md:468
#: ./docs/10.x/scout.md:526
#: ./docs/10.x/scout.md:554
#: ./docs/11.x/scout.md:526
#: ./docs/11.x/scout.md:554
#: ./docs/master/scout.md:526
#: ./docs/master/scout.md:554
msgctxt "CODE"
msgid "$user->orders()->searchable();"
msgstr ""

#: ./docs/9.x/scout.md:274
#: ./docs/10.x/scout.md:359
#: ./docs/11.x/scout.md:359
#: ./docs/master/scout.md:359
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-search-engines-per-model\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:275
msgctxt "H3"
msgid "Configuring Search Engines Per Model"
msgstr ""

#: ./docs/8.x/scout.md:276
#: ./docs/9.x/scout.md:442
#: ./docs/10.x/scout.md:528
#: ./docs/11.x/scout.md:528
#: ./docs/master/scout.md:528
msgctxt "P"
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `searchable` method on the collection instance to add the model instances to their corresponding index:"
msgstr ""

#: ./docs/9.x/scout.md:277
#: ./docs/10.x/scout.md:362
#: ./docs/11.x/scout.md:362
#: ./docs/master/scout.md:362
msgctxt "P"
msgid "When searching, Scout will typically use the default search engine specified in your application's `scout` configuration file. However, the search engine for a particular model can be changed by overriding the `searchableUsing` method on the model:"
msgstr ""

#: ./docs/8.x/scout.md:278
#: ./docs/8.x/scout.md:305
#: ./docs/9.x/scout.md:444
#: ./docs/9.x/scout.md:472
#: ./docs/10.x/scout.md:530
#: ./docs/10.x/scout.md:558
#: ./docs/11.x/scout.md:530
#: ./docs/11.x/scout.md:558
#: ./docs/master/scout.md:530
#: ./docs/master/scout.md:558
msgctxt "CODE"
msgid "$orders->searchable();"
msgstr ""

#: ./docs/9.x/scout.md:279
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\EngineManager;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the engine used to index the model.\n"
"     *\n"
"     * @return \\Laravel\\Scout\\Engines\\Engine\n"
"     */\n"
"    public function searchableUsing()\n"
"    {\n"
"        return app(EngineManager::class)->engine('meilisearch');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:280
#: ./docs/9.x/scout.md:447
#: ./docs/10.x/scout.md:533
#: ./docs/11.x/scout.md:533
#: ./docs/master/scout.md:533
msgctxt "P"
msgid "The `searchable` method can be considered an \"upsert\" operation. In other words, if the model record is already in your index, it will be updated. If it does not exist in the search index, it will be added to the index."
msgstr ""

#: ./docs/8.x/scout.md:282
#: ./docs/9.x/scout.md:449
#: ./docs/10.x/scout.md:535
#: ./docs/11.x/scout.md:535
#: ./docs/master/scout.md:535
#~ msgctxt "P"
#~ msgid "<a name=\"updating-records\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:283
#: ./docs/9.x/scout.md:450
#: ./docs/10.x/scout.md:536
#: ./docs/11.x/scout.md:536
#: ./docs/master/scout.md:536
msgctxt "H3"
msgid "Updating Records"
msgstr ""

#: ./docs/10.x/scout.md:285
#: ./docs/11.x/scout.md:285
#: ./docs/master/scout.md:285
msgctxt "H4"
msgid "Configuring Filterable Data and Index Settings (Meilisearch)"
msgstr ""

#: ./docs/8.x/scout.md:285
#: ./docs/9.x/scout.md:452
#: ./docs/10.x/scout.md:538
#: ./docs/11.x/scout.md:538
#: ./docs/master/scout.md:538
msgctxt "P"
msgid "To update a searchable model, you only need to update the model instance's properties and `save` the model to your database. Scout will automatically persist the changes to your search index:"
msgstr ""

#: ./docs/10.x/scout.md:287
#: ./docs/11.x/scout.md:287
#: ./docs/master/scout.md:287
msgctxt "P"
msgid "Unlike Scout's other drivers, Meilisearch requires you to pre-define index search settings such as filterable attributes, sortable attributes, and [other supported settings fields](https://docs.meilisearch.com/reference/api/settings.html)."
msgstr ""

#: ./docs/8.x/scout.md:287
#: ./docs/9.x/scout.md:454
#: ./docs/10.x/scout.md:540
#: ./docs/11.x/scout.md:540
#: ./docs/master/scout.md:540
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$order = Order::find(1);\n"
"\n"
"// Update the order...\n"
"\n"
"$order->save();"
msgstr ""

#: ./docs/8.x/scout.md:295
#: ./docs/9.x/scout.md:462
#: ./docs/10.x/scout.md:548
#: ./docs/11.x/scout.md:548
#: ./docs/master/scout.md:548
msgctxt "P"
msgid "You may also invoke the `searchable` method on an Eloquent query instance to update a collection of models. If the models do not exist in your search index, they will be created:"
msgstr ""

#: ./docs/8.x/scout.md:297
#: ./docs/9.x/scout.md:464
#: ./docs/10.x/scout.md:550
#: ./docs/11.x/scout.md:550
#: ./docs/master/scout.md:550
msgctxt "CODE"
msgid "Order::where('price', '>', 100)->searchable();"
msgstr ""

#: ./docs/8.x/scout.md:299
#: ./docs/9.x/scout.md:466
#: ./docs/10.x/scout.md:552
#: ./docs/11.x/scout.md:552
#: ./docs/master/scout.md:552
msgctxt "P"
msgid "If you would like to update the search index records for all of the models in a relationship, you may invoke the `searchable` on the relationship instance:"
msgstr ""

#: ./docs/8.x/scout.md:303
#: ./docs/9.x/scout.md:470
#: ./docs/10.x/scout.md:556
#: ./docs/11.x/scout.md:556
#: ./docs/master/scout.md:556
msgctxt "P"
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `searchable` method on the collection instance to update the model instances in their corresponding index:"
msgstr ""

#: ./docs/8.x/scout.md:307
#: ./docs/9.x/scout.md:474
#: ./docs/10.x/scout.md:575
#: ./docs/11.x/scout.md:575
#: ./docs/master/scout.md:575
#~ msgctxt "P"
#~ msgid "<a name=\"removing-records\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:308
#: ./docs/9.x/scout.md:475
#: ./docs/10.x/scout.md:576
#: ./docs/11.x/scout.md:576
#: ./docs/master/scout.md:576
msgctxt "H3"
msgid "Removing Records"
msgstr ""

#: ./docs/8.x/scout.md:310
#: ./docs/9.x/scout.md:477
#: ./docs/10.x/scout.md:578
#: ./docs/11.x/scout.md:578
#: ./docs/master/scout.md:578
msgctxt "P"
msgid "To remove a record from your index you may simply `delete` the model from the database. This may be done even if you are using [soft deleted](/docs/{{version}}/eloquent#soft-deleting) models:"
msgstr ""

#: ./docs/8.x/scout.md:312
#: ./docs/9.x/scout.md:479
#: ./docs/10.x/scout.md:580
#: ./docs/11.x/scout.md:580
#: ./docs/master/scout.md:580
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$order = Order::find(1);\n"
"\n"
"$order->delete();"
msgstr ""

#: ./docs/9.x/scout.md:313
#: ./docs/10.x/scout.md:397
#: ./docs/11.x/scout.md:397
#: ./docs/master/scout.md:397
#~ msgctxt "P"
#~ msgid "<a name=\"database-and-collection-engines\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:314
#: ./docs/10.x/scout.md:398
#: ./docs/11.x/scout.md:398
#: ./docs/master/scout.md:398
msgctxt "H2"
msgid "Database / Collection Engines"
msgstr ""

#: ./docs/9.x/scout.md:316
#: ./docs/10.x/scout.md:400
#: ./docs/11.x/scout.md:400
#: ./docs/master/scout.md:400
#~ msgctxt "P"
#~ msgid "<a name=\"database-engine\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:317
#: ./docs/10.x/scout.md:401
#: ./docs/11.x/scout.md:401
#: ./docs/master/scout.md:401
msgctxt "H3"
msgid "Database Engine"
msgstr ""

#: ./docs/8.x/scout.md:318
#: ./docs/9.x/scout.md:485
#: ./docs/10.x/scout.md:586
#: ./docs/11.x/scout.md:586
#: ./docs/master/scout.md:586
msgctxt "P"
msgid "If you do not want to retrieve the model before deleting the record, you may use the `unsearchable` method on an Eloquent query instance:"
msgstr ""

#: ./docs/10.x/scout.md:320
#: ./docs/11.x/scout.md:320
#: ./docs/master/scout.md:320
msgctxt "P"
msgid "After configuring your application's index settings, you must invoke the `scout:sync-index-settings` Artisan command. This command will inform Meilisearch of your currently configured index settings. For convenience, you may wish to make this command part of your deployment process:"
msgstr ""

#: ./docs/8.x/scout.md:320
#: ./docs/9.x/scout.md:487
#: ./docs/10.x/scout.md:588
#: ./docs/11.x/scout.md:588
#: ./docs/master/scout.md:588
msgctxt "CODE"
msgid "Order::where('price', '>', 100)->unsearchable();"
msgstr ""

#: ./docs/9.x/scout.md:320
#: ./docs/10.x/scout.md:404
#: ./docs/11.x/scout.md:404
#: ./docs/master/scout.md:404
msgctxt "P"
msgid "The database engine currently supports MySQL and PostgreSQL."
msgstr ""

#: ./docs/8.x/scout.md:322
#: ./docs/9.x/scout.md:489
#: ./docs/10.x/scout.md:590
#: ./docs/11.x/scout.md:590
#: ./docs/master/scout.md:590
msgctxt "P"
msgid "If you would like to remove the search index records for all of the models in a relationship, you may invoke the `unsearchable` on the relationship instance:"
msgstr ""

#: ./docs/9.x/scout.md:322
#: ./docs/10.x/scout.md:406
#: ./docs/11.x/scout.md:406
#: ./docs/master/scout.md:406
msgctxt "P"
msgid "If your application interacts with small to medium sized databases or has a light workload, you may find it more convenient to get started with Scout's \"database\" engine. The database engine will use \"where like\" clauses and full text indexes when filtering results from your existing database to determine the applicable search results for your query."
msgstr ""

#: ./docs/8.x/scout.md:324
#: ./docs/9.x/scout.md:491
#: ./docs/10.x/scout.md:592
#: ./docs/11.x/scout.md:592
#: ./docs/master/scout.md:592
msgctxt "CODE"
msgid "$user->orders()->unsearchable();"
msgstr ""

#: ./docs/9.x/scout.md:324
#: ./docs/10.x/scout.md:408
#: ./docs/11.x/scout.md:408
#: ./docs/master/scout.md:408
msgctxt "P"
msgid "To use the database engine, you may simply set the value of the `SCOUT_DRIVER` environment variable to `database`, or specify the `database` driver directly in your application's `scout` configuration file:"
msgstr ""

#: ./docs/8.x/scout.md:326
#: ./docs/9.x/scout.md:493
#: ./docs/10.x/scout.md:594
#: ./docs/11.x/scout.md:594
#: ./docs/master/scout.md:594
msgctxt "P"
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `unsearchable` method on the collection instance to remove the model instances from their corresponding index:"
msgstr ""

#: ./docs/9.x/scout.md:326
#: ./docs/10.x/scout.md:410
#: ./docs/11.x/scout.md:410
#: ./docs/master/scout.md:410
msgctxt "CODE: ini"
msgid "SCOUT_DRIVER=database"
msgstr ""

#: ./docs/10.x/scout.md:327
#: ./docs/11.x/scout.md:327
#: ./docs/master/scout.md:327
msgctxt "H3"
msgid "Configuring the Model ID"
msgstr ""

#: ./docs/8.x/scout.md:328
#: ./docs/9.x/scout.md:495
#: ./docs/10.x/scout.md:596
#: ./docs/11.x/scout.md:596
#: ./docs/master/scout.md:596
msgctxt "CODE"
msgid "$orders->unsearchable();"
msgstr ""

#: ./docs/8.x/scout.md:330
#: ./docs/9.x/scout.md:497
#: ./docs/10.x/scout.md:598
#: ./docs/11.x/scout.md:602
#: ./docs/master/scout.md:598
#~ msgctxt "P"
#~ msgid "<a name=\"pausing-indexing\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:330
msgctxt "P"
msgid "Once you have specified the database engine as your preferred driver, you must [configure your searchable data](#configuring-searchable-data). Then, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia or MeiliSearch indexes, is unnecessary when using the database engine."
msgstr ""

#: ./docs/10.x/scout.md:331
#: ./docs/11.x/scout.md:331
#: ./docs/master/scout.md:331
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the value used to index the model.\n"
"     */\n"
"    public function getScoutKey(): mixed\n"
"    {\n"
"        return $this->email;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the key name used to index the model.\n"
"     */\n"
"    public function getScoutKeyName(): mixed\n"
"    {\n"
"        return 'email';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:331
#: ./docs/9.x/scout.md:498
#: ./docs/10.x/scout.md:599
#: ./docs/11.x/scout.md:603
#: ./docs/master/scout.md:599
msgctxt "H3"
msgid "Pausing Indexing"
msgstr ""

#: ./docs/9.x/scout.md:332
#: ./docs/10.x/scout.md:416
#: ./docs/11.x/scout.md:416
#: ./docs/master/scout.md:416
msgctxt "H4"
msgid "Customizing Database Searching Strategies"
msgstr ""

#: ./docs/8.x/scout.md:333
#: ./docs/9.x/scout.md:500
#: ./docs/10.x/scout.md:601
#: ./docs/11.x/scout.md:605
#: ./docs/master/scout.md:601
msgctxt "P"
msgid "Sometimes you may need to perform a batch of Eloquent operations on a model without syncing the model data to your search index. You may do this using the `withoutSyncingToSearch` method. This method accepts a single closure which will be immediately executed. Any model operations that occur within the closure will not be synced to the model's index:"
msgstr ""

#: ./docs/9.x/scout.md:334
#: ./docs/10.x/scout.md:418
#: ./docs/11.x/scout.md:418
#: ./docs/master/scout.md:418
msgctxt "P"
msgid "By default, the database engine will execute a \"where like\" query against every model attribute that you have [configured as searchable](#configuring-searchable-data). However, in some situations, this may result in poor performance. Therefore, the database engine's search strategy can be configured so that some specified columns utilize full text search queries or only use \"where like\" constraints to search the prefixes of strings (`example%`) instead of searching within the entire string (`%example%`)."
msgstr ""

#: ./docs/8.x/scout.md:335
#: ./docs/9.x/scout.md:502
#: ./docs/10.x/scout.md:603
#: ./docs/11.x/scout.md:607
#: ./docs/master/scout.md:603
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"Order::withoutSyncingToSearch(function () {\n"
"    // Perform model actions...\n"
"});"
msgstr ""

#: ./docs/9.x/scout.md:336
#: ./docs/10.x/scout.md:420
#: ./docs/11.x/scout.md:420
#: ./docs/master/scout.md:420
msgctxt "P"
msgid "To define this behavior, you may assign PHP attributes to your model's `toSearchableArray` method. Any columns that are not assigned additional search strategy behavior will continue to use the default \"where like\" strategy:"
msgstr ""

#: ./docs/9.x/scout.md:338
msgctxt "CODE: php"
msgid ""
"use Laravel\\Scout\\Attributes\\SearchUsingFullText;\n"
"use Laravel\\Scout\\Attributes\\SearchUsingPrefix;\n"
"\n"
"/**\n"
" * Get the indexable data array for the model.\n"
" *\n"
" * @return array\n"
" */\n"
"#[SearchUsingPrefix(['id', 'email'])]\n"
"#[SearchUsingFullText(['bio'])]\n"
"public function toSearchableArray()\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'bio' => $this->bio,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:341
#: ./docs/9.x/scout.md:508
#: ./docs/10.x/scout.md:609
#: ./docs/11.x/scout.md:613
#: ./docs/master/scout.md:609
#~ msgctxt "P"
#~ msgid "<a name=\"conditionally-searchable-model-instances\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:342
#: ./docs/9.x/scout.md:509
#: ./docs/10.x/scout.md:610
#: ./docs/11.x/scout.md:614
#: ./docs/master/scout.md:610
msgctxt "H3"
msgid "Conditionally Searchable Model Instances"
msgstr ""

#: ./docs/8.x/scout.md:344
#: ./docs/9.x/scout.md:511
#: ./docs/10.x/scout.md:612
#: ./docs/11.x/scout.md:616
#: ./docs/master/scout.md:612
msgctxt "P"
msgid "Sometimes you may need to only make a model searchable under certain conditions. For example, imagine you have `App\\Models\\Post` model that may be in one of two states: \"draft\" and \"published\". You may only want to allow \"published\" posts to be searchable. To accomplish this, you may define a `shouldBeSearchable` method on your model:"
msgstr ""

#: ./docs/8.x/scout.md:346
#: ./docs/9.x/scout.md:513
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine if the model should be searchable.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function shouldBeSearchable()\n"
"{\n"
"    return $this->isPublished();\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:356
#: ./docs/9.x/scout.md:523
#: ./docs/10.x/scout.md:622
#: ./docs/11.x/scout.md:626
#: ./docs/master/scout.md:622
msgctxt "P"
msgid "The `shouldBeSearchable` method is only applied when manipulating models through the `save` and `create` methods, queries, or relationships. Directly making models or collections searchable using the `searchable` method will override the result of the `shouldBeSearchable` method."
msgstr ""

#: ./docs/8.x/scout.md:358
#: ./docs/9.x/scout.md:528
#: ./docs/10.x/scout.md:627
#: ./docs/11.x/scout.md:631
#: ./docs/master/scout.md:627
#~ msgctxt "P"
#~ msgid "<a name=\"searching\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:359
#: ./docs/9.x/scout.md:529
#: ./docs/10.x/scout.md:628
#: ./docs/11.x/scout.md:632
#: ./docs/master/scout.md:628
msgctxt "H2"
msgid "Searching"
msgstr ""

#: ./docs/10.x/scout.md:360
#: ./docs/11.x/scout.md:360
#: ./docs/master/scout.md:360
msgctxt "H3"
msgid "Configuring Search Engines per Model"
msgstr ""

#: ./docs/8.x/scout.md:361
#: ./docs/9.x/scout.md:531
#: ./docs/10.x/scout.md:630
#: ./docs/11.x/scout.md:634
#: ./docs/master/scout.md:630
msgctxt "P"
msgid "You may begin searching a model using the `search` method. The search method accepts a single string that will be used to search your models. You should then chain the `get` method onto the search query to retrieve the Eloquent models that match the given search query:"
msgstr ""

#: ./docs/9.x/scout.md:361
#: ./docs/10.x/scout.md:445
#: ./docs/11.x/scout.md:445
#: ./docs/master/scout.md:445
msgctxt "P"
msgid "Before specifying that a column should use full text query constraints, ensure that the column has been assigned a [full text index](/docs/{{version}}/migrations#available-index-types)."
msgstr ""

#: ./docs/8.x/scout.md:363
#: ./docs/9.x/scout.md:533
#: ./docs/10.x/scout.md:632
#: ./docs/11.x/scout.md:636
#: ./docs/master/scout.md:632
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$orders = Order::search('Star Trek')->get();"
msgstr ""

#: ./docs/9.x/scout.md:363
#: ./docs/10.x/scout.md:447
#: ./docs/11.x/scout.md:447
#: ./docs/master/scout.md:447
#~ msgctxt "P"
#~ msgid "<a name=\"collection-engine\"></a>"
#~ msgstr ""

#: ./docs/10.x/scout.md:364
#: ./docs/11.x/scout.md:364
#: ./docs/master/scout.md:364
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Engines\\Engine;\n"
"use Laravel\\Scout\\EngineManager;\n"
"use Laravel\\Scout\\Searchable;\n"
"\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n"
"\n"
"    /**\n"
"     * Get the engine used to index the model.\n"
"     */\n"
"    public function searchableUsing(): Engine\n"
"    {\n"
"        return app(EngineManager::class)->engine('meilisearch');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/scout.md:364
#: ./docs/10.x/scout.md:448
#: ./docs/11.x/scout.md:448
#: ./docs/master/scout.md:448
msgctxt "H3"
msgid "Collection Engine"
msgstr ""

#: ./docs/8.x/scout.md:367
#: ./docs/9.x/scout.md:537
#: ./docs/10.x/scout.md:636
#: ./docs/11.x/scout.md:640
#: ./docs/master/scout.md:636
msgctxt "P"
msgid "Since Scout searches return a collection of Eloquent models, you may even return the results directly from a route or controller and they will automatically be converted to JSON:"
msgstr ""

#: ./docs/8.x/scout.md:369
#: ./docs/9.x/scout.md:539
#: ./docs/10.x/scout.md:638
#: ./docs/11.x/scout.md:642
#: ./docs/master/scout.md:638
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/search', function (Request $request) {\n"
"    return Order::search($request->search)->get();\n"
"});"
msgstr ""

#: ./docs/8.x/scout.md:376
#: ./docs/9.x/scout.md:546
#: ./docs/10.x/scout.md:645
#: ./docs/11.x/scout.md:649
#: ./docs/master/scout.md:645
msgctxt "P"
msgid "If you would like to get the raw search results before they are converted to Eloquent models, you may use the `raw` method:"
msgstr ""

#: ./docs/9.x/scout.md:376
#: ./docs/10.x/scout.md:460
#: ./docs/11.x/scout.md:460
#: ./docs/master/scout.md:460
msgctxt "H4"
msgid "Differences From Database Engine"
msgstr ""

#: ./docs/8.x/scout.md:378
#: ./docs/9.x/scout.md:548
#: ./docs/10.x/scout.md:647
#: ./docs/11.x/scout.md:651
#: ./docs/master/scout.md:647
msgctxt "CODE"
msgid "$orders = Order::search('Star Trek')->raw();"
msgstr ""

#: ./docs/9.x/scout.md:378
#: ./docs/10.x/scout.md:462
#: ./docs/11.x/scout.md:462
#: ./docs/master/scout.md:462
msgctxt "P"
msgid "On first glance, the \"database\" and \"collections\" engines are fairly similar. They both interact directly with your database to retrieve search results. However, the collection engine does not utilize full text indexes or `LIKE` clauses to find matching records. Instead, it pulls all possible records and uses Laravel's `Str::is` helper to determine if the search string exists within the model attribute values."
msgstr ""

#: ./docs/8.x/scout.md:380
#: ./docs/9.x/scout.md:550
#: ./docs/10.x/scout.md:649
#: ./docs/11.x/scout.md:653
#: ./docs/master/scout.md:649
#~ msgctxt "P"
#~ msgid "<a name=\"custom-indexes\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:380
#: ./docs/10.x/scout.md:464
#: ./docs/11.x/scout.md:464
#: ./docs/master/scout.md:464
msgctxt "P"
msgid "The collection engine is the most portable search engine as it works across all relational databases supported by Laravel (including SQLite and SQL Server); however, it is less efficient than Scout's database engine."
msgstr ""

#: ./docs/8.x/scout.md:381
#: ./docs/9.x/scout.md:551
#: ./docs/10.x/scout.md:650
#: ./docs/11.x/scout.md:654
#: ./docs/master/scout.md:650
msgctxt "H4"
msgid "Custom Indexes"
msgstr ""

#: ./docs/8.x/scout.md:383
#: ./docs/9.x/scout.md:553
#: ./docs/10.x/scout.md:652
#: ./docs/11.x/scout.md:656
#: ./docs/master/scout.md:652
msgctxt "P"
msgid "Search queries will typically be performed on the index specified by the model's [`searchableAs`](#configuring-model-indexes) method. However, you may use the `within` method to specify a custom index that should be searched instead:"
msgstr ""

#: ./docs/8.x/scout.md:385
#: ./docs/9.x/scout.md:555
#: ./docs/10.x/scout.md:654
#: ./docs/11.x/scout.md:658
#: ./docs/master/scout.md:654
msgctxt "CODE"
msgid ""
"$orders = Order::search('Star Trek')\n"
"    ->within('tv_shows_popularity_desc')\n"
"    ->get();"
msgstr ""

#: ./docs/8.x/scout.md:389
#: ./docs/9.x/scout.md:559
#: ./docs/10.x/scout.md:658
#: ./docs/11.x/scout.md:662
#: ./docs/master/scout.md:658
#~ msgctxt "P"
#~ msgid "<a name=\"where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:390
#: ./docs/9.x/scout.md:560
#: ./docs/10.x/scout.md:659
#: ./docs/11.x/scout.md:663
#: ./docs/master/scout.md:659
msgctxt "H3"
msgid "Where Clauses"
msgstr ""

#: ./docs/8.x/scout.md:392
#: ./docs/9.x/scout.md:562
#: ./docs/10.x/scout.md:661
#: ./docs/11.x/scout.md:665
#: ./docs/master/scout.md:661
msgctxt "P"
msgid "Scout allows you to add simple \"where\" clauses to your search queries. Currently, these clauses only support basic numeric equality checks and are primarily useful for scoping search queries by an owner ID:"
msgstr ""

#: ./docs/8.x/scout.md:394
#: ./docs/9.x/scout.md:564
#: ./docs/10.x/scout.md:663
#: ./docs/11.x/scout.md:667
#: ./docs/master/scout.md:663
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$orders = Order::search('Star Trek')->where('user_id', 1)->get();"
msgstr ""

#: ./docs/10.x/scout.md:395
#: ./docs/11.x/scout.md:395
#: ./docs/master/scout.md:395
msgctxt "P"
msgid "Enabling this feature will also pass the request's IP address and your authenticated user's primary identifier to Algolia so this data is associated with any search request that is made by the user."
msgstr ""

#: ./docs/8.x/scout.md:398
#: ./docs/9.x/scout.md:568
msgctxt "P"
msgid "You may use the `whereIn` method to constrain results against a given set of values:"
msgstr ""

#: ./docs/8.x/scout.md:400
#: ./docs/9.x/scout.md:570
msgctxt "CODE"
msgid ""
"$orders = Order::search('Star Trek')->whereIn(\n"
"    'status', ['paid', 'open']\n"
")->get();"
msgstr ""

#: ./docs/8.x/scout.md:404
#: ./docs/9.x/scout.md:574
#: ./docs/10.x/scout.md:679
#: ./docs/11.x/scout.md:683
#: ./docs/master/scout.md:679
msgctxt "P"
msgid "Since a search index is not a relational database, more advanced \"where\" clauses are not currently supported."
msgstr ""

#: ./docs/8.x/scout.md:406
#: ./docs/9.x/scout.md:579
#: ./docs/10.x/scout.md:684
#: ./docs/11.x/scout.md:688
#: ./docs/master/scout.md:684
#~ msgctxt "P"
#~ msgid "<a name=\"pagination\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:407
#: ./docs/9.x/scout.md:580
#: ./docs/10.x/scout.md:685
#: ./docs/11.x/scout.md:689
#: ./docs/master/scout.md:685
msgctxt "H3"
msgid "Pagination"
msgstr ""

#: ./docs/8.x/scout.md:409
#: ./docs/9.x/scout.md:582
#: ./docs/10.x/scout.md:687
#: ./docs/11.x/scout.md:691
#: ./docs/master/scout.md:687
msgctxt "P"
msgid "In addition to retrieving a collection of models, you may paginate your search results using the `paginate` method. This method will return an `Illuminate\\Pagination\\LengthAwarePaginator` instance just as if you had [paginated a traditional Eloquent query](/docs/{{version}}/pagination):"
msgstr ""

#: ./docs/8.x/scout.md:411
#: ./docs/9.x/scout.md:584
#: ./docs/10.x/scout.md:689
#: ./docs/11.x/scout.md:693
#: ./docs/master/scout.md:689
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$orders = Order::search('Star Trek')->paginate();"
msgstr ""

#: ./docs/10.x/scout.md:414
#: ./docs/11.x/scout.md:414
#: ./docs/master/scout.md:414
msgctxt "P"
msgid "Once you have specified the database engine as your preferred driver, you must [configure your searchable data](#configuring-searchable-data). Then, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia, Meilisearch or Typesense indexes, is unnecessary when using the database engine."
msgstr ""

#: ./docs/8.x/scout.md:415
#: ./docs/9.x/scout.md:588
#: ./docs/10.x/scout.md:693
#: ./docs/11.x/scout.md:697
#: ./docs/master/scout.md:693
msgctxt "P"
msgid "You may specify how many models to retrieve per page by passing the amount as the first argument to the `paginate` method:"
msgstr ""

#: ./docs/8.x/scout.md:417
#: ./docs/9.x/scout.md:590
#: ./docs/10.x/scout.md:695
#: ./docs/11.x/scout.md:699
#: ./docs/master/scout.md:695
msgctxt "CODE"
msgid "$orders = Order::search('Star Trek')->paginate(15);"
msgstr ""

#: ./docs/8.x/scout.md:419
#: ./docs/9.x/scout.md:592
#: ./docs/10.x/scout.md:697
#: ./docs/11.x/scout.md:701
#: ./docs/master/scout.md:697
msgctxt "P"
msgid "Once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade) just as if you had paginated a traditional Eloquent query:"
msgstr ""

#: ./docs/8.x/scout.md:421
#: ./docs/9.x/scout.md:594
#: ./docs/10.x/scout.md:699
#: ./docs/11.x/scout.md:703
#: ./docs/master/scout.md:699
msgctxt "CODE: html"
msgid ""
"<div class=\"container\">\n"
"    @foreach ($orders as $order)\n"
"        {{ $order->price }}\n"
"    @endforeach\n"
"</div>\n"
"\n"
"{{ $orders->links() }}"
msgstr ""

#: ./docs/10.x/scout.md:422
#: ./docs/11.x/scout.md:422
#: ./docs/master/scout.md:422
msgctxt "CODE: php"
msgid ""
"use Laravel\\Scout\\Attributes\\SearchUsingFullText;\n"
"use Laravel\\Scout\\Attributes\\SearchUsingPrefix;\n"
"\n"
"/**\n"
" * Get the indexable data array for the model.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"#[SearchUsingPrefix(['id', 'email'])]\n"
"#[SearchUsingFullText(['bio'])]\n"
"public function toSearchableArray(): array\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'bio' => $this->bio,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:431
#: ./docs/9.x/scout.md:604
#: ./docs/10.x/scout.md:709
#: ./docs/11.x/scout.md:713
#: ./docs/master/scout.md:709
msgctxt "P"
msgid "Of course, if you would like to retrieve the pagination results as JSON, you may return the paginator instance directly from a route or controller:"
msgstr ""

#: ./docs/8.x/scout.md:433
#: ./docs/9.x/scout.md:606
#: ./docs/10.x/scout.md:711
#: ./docs/11.x/scout.md:715
#: ./docs/master/scout.md:711
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/orders', function (Request $request) {\n"
"    return Order::search($request->input('query'))->paginate(15);\n"
"});"
msgstr ""

#: ./docs/8.x/scout.md:440
#: ./docs/9.x/scout.md:616
#: ./docs/10.x/scout.md:721
#: ./docs/11.x/scout.md:725
#: ./docs/master/scout.md:721
#~ msgctxt "P"
#~ msgid "<a name=\"soft-deleting\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:441
#: ./docs/9.x/scout.md:617
#: ./docs/10.x/scout.md:722
#: ./docs/11.x/scout.md:726
#: ./docs/master/scout.md:722
msgctxt "H3"
msgid "Soft Deleting"
msgstr ""

#: ./docs/8.x/scout.md:443
#: ./docs/9.x/scout.md:619
#: ./docs/10.x/scout.md:724
#: ./docs/11.x/scout.md:728
#: ./docs/master/scout.md:724
msgctxt "P"
msgid "If your indexed models are [soft deleting](/docs/{{version}}/eloquent#soft-deleting) and you need to search your soft deleted models, set the `soft_delete` option of the `config/scout.php` configuration file to `true`:"
msgstr ""

#: ./docs/8.x/scout.md:445
#: ./docs/9.x/scout.md:621
#: ./docs/10.x/scout.md:726
#: ./docs/11.x/scout.md:730
#: ./docs/master/scout.md:726
msgctxt "CODE"
msgid "'soft_delete' => true,"
msgstr ""

#: ./docs/8.x/scout.md:447
#: ./docs/9.x/scout.md:623
#: ./docs/10.x/scout.md:728
#: ./docs/11.x/scout.md:732
#: ./docs/master/scout.md:728
msgctxt "P"
msgid "When this configuration option is `true`, Scout will not remove soft deleted models from the search index. Instead, it will set a hidden `__soft_deleted` attribute on the indexed record. Then, you may use the `withTrashed` or `onlyTrashed` methods to retrieve the soft deleted records when searching:"
msgstr ""

#: ./docs/8.x/scout.md:449
#: ./docs/9.x/scout.md:625
#: ./docs/10.x/scout.md:730
#: ./docs/11.x/scout.md:734
#: ./docs/master/scout.md:730
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"// Include trashed records when retrieving results...\n"
"$orders = Order::search('Star Trek')->withTrashed()->get();\n"
"\n"
"// Only include trashed records when retrieving results...\n"
"$orders = Order::search('Star Trek')->onlyTrashed()->get();"
msgstr ""

#: ./docs/10.x/scout.md:450
#: ./docs/11.x/scout.md:450
#: ./docs/master/scout.md:450
msgctxt "P"
msgid "While you are free to use the Algolia, Meilisearch, or Typesense search engines during local development, you may find it more convenient to get started with the \"collection\" engine. The collection engine will use \"where\" clauses and collection filtering on results from your existing database to determine the applicable search results for your query. When using this engine, it is not necessary to \"index\" your searchable models, as they will simply be retrieved from your local database."
msgstr ""

#: ./docs/8.x/scout.md:457
#: ./docs/9.x/scout.md:634
#: ./docs/10.x/scout.md:739
#: ./docs/11.x/scout.md:743
#: ./docs/master/scout.md:739
msgctxt "P"
msgid "When a soft deleted model is permanently deleted using `forceDelete`, Scout will remove it from the search index automatically."
msgstr ""

#: ./docs/10.x/scout.md:458
#: ./docs/11.x/scout.md:458
#: ./docs/master/scout.md:458
msgctxt "P"
msgid "Once you have specified the collection driver as your preferred driver, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia, Meilisearch, or Typesense indexes, is unnecessary when using the collection engine."
msgstr ""

#: ./docs/8.x/scout.md:459
#: ./docs/9.x/scout.md:636
#: ./docs/10.x/scout.md:741
#: ./docs/11.x/scout.md:745
#: ./docs/master/scout.md:741
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-engine-searches\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:460
#: ./docs/9.x/scout.md:637
#: ./docs/10.x/scout.md:742
#: ./docs/11.x/scout.md:746
#: ./docs/master/scout.md:742
msgctxt "H3"
msgid "Customizing Engine Searches"
msgstr ""

#: ./docs/8.x/scout.md:462
#: ./docs/9.x/scout.md:639
#: ./docs/10.x/scout.md:744
#: ./docs/11.x/scout.md:748
#: ./docs/master/scout.md:744
msgctxt "P"
msgid "If you need to perform advanced customization of the search behavior of an engine you may pass a closure as the second argument to the `search` method. For example, you could use this callback to add geo-location data to your search options before the search query is passed to Algolia:"
msgstr ""

#: ./docs/8.x/scout.md:464
#: ./docs/9.x/scout.md:641
#: ./docs/10.x/scout.md:746
#: ./docs/11.x/scout.md:750
#: ./docs/master/scout.md:746
msgctxt "CODE"
msgid ""
"use Algolia\\AlgoliaSearch\\SearchIndex;\n"
"use App\\Models\\Order;\n"
"\n"
"Order::search(\n"
"    'Star Trek',\n"
"    function (SearchIndex $algolia, string $query, array $options) {\n"
"        $options['body']['query']['bool']['filter']['geo_distance'] = [\n"
"            'distance' => '1000km',\n"
"            'location' => ['lat' => 36, 'lon' => 111],\n"
"        ];\n"
"\n"
"        return $algolia->search($query, $options);\n"
"    }\n"
")->get();"
msgstr ""

#: ./docs/8.x/scout.md:479
#: ./docs/9.x/scout.md:671
#: ./docs/10.x/scout.md:777
#: ./docs/11.x/scout.md:781
#: ./docs/master/scout.md:777
#~ msgctxt "P"
#~ msgid "<a name=\"custom-engines\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:480
#: ./docs/9.x/scout.md:672
#: ./docs/10.x/scout.md:778
#: ./docs/11.x/scout.md:782
#: ./docs/master/scout.md:778
msgctxt "H2"
msgid "Custom Engines"
msgstr ""

#: ./docs/8.x/scout.md:482
#: ./docs/9.x/scout.md:674
#: ./docs/10.x/scout.md:780
#: ./docs/11.x/scout.md:784
#: ./docs/master/scout.md:780
#~ msgctxt "P"
#~ msgid "<a name=\"writing-the-engine\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:483
#: ./docs/9.x/scout.md:675
msgctxt "H4"
msgid "Writing The Engine"
msgstr ""

#: ./docs/10.x/scout.md:485
#: ./docs/11.x/scout.md:485
#: ./docs/master/scout.md:485
msgctxt "H4"
msgid "Modifying the Import Query"
msgstr ""

#: ./docs/8.x/scout.md:485
#: ./docs/9.x/scout.md:677
#: ./docs/10.x/scout.md:783
#: ./docs/11.x/scout.md:787
#: ./docs/master/scout.md:783
msgctxt "P"
msgid "If one of the built-in Scout search engines doesn't fit your needs, you may write your own custom engine and register it with Scout. Your engine should extend the `Laravel\\Scout\\Engines\\Engine` abstract class. This abstract class contains eight methods your custom engine must implement:"
msgstr ""

#: ./docs/8.x/scout.md:487
#: ./docs/9.x/scout.md:679
#: ./docs/10.x/scout.md:785
#: ./docs/11.x/scout.md:789
#: ./docs/master/scout.md:785
msgctxt "CODE"
msgid ""
"use Laravel\\Scout\\Builder;\n"
"\n"
"abstract public function update($models);\n"
"abstract public function delete($models);\n"
"abstract public function search(Builder $builder);\n"
"abstract public function paginate(Builder $builder, $perPage, $page);\n"
"abstract public function mapIds($results);\n"
"abstract public function map(Builder $builder, $results, $model);\n"
"abstract public function getTotalCount($results);\n"
"abstract public function flush($model);"
msgstr ""

#: ./docs/10.x/scout.md:489
#: ./docs/11.x/scout.md:489
#: ./docs/master/scout.md:489
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"\n"
"/**\n"
" * Modify the query used to retrieve models when making all of the models searchable.\n"
" */\n"
"protected function makeAllSearchableUsing(Builder $query): Builder\n"
"{\n"
"    return $query->with('author');\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:498
#: ./docs/9.x/scout.md:690
#: ./docs/10.x/scout.md:796
#: ./docs/11.x/scout.md:800
#: ./docs/master/scout.md:796
msgctxt "P"
msgid "You may find it helpful to review the implementations of these methods on the `Laravel\\Scout\\Engines\\AlgoliaEngine` class. This class will provide you with a good starting point for learning how to implement each of these methods in your own engine."
msgstr ""

#: ./docs/10.x/scout.md:500
#: ./docs/11.x/scout.md:500
#: ./docs/master/scout.md:500
msgctxt "P"
msgid "The `makeAllSearchableUsing` method may not be applicable when using a queue to batch import models. Relationships are [not restored](/docs/{{version}}/queues#handling-relationships) when model collections are processed by jobs."
msgstr ""

#: ./docs/8.x/scout.md:500
#: ./docs/9.x/scout.md:692
#: ./docs/10.x/scout.md:798
#: ./docs/11.x/scout.md:802
#: ./docs/master/scout.md:798
#~ msgctxt "P"
#~ msgid "<a name=\"registering-the-engine\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:501
#: ./docs/9.x/scout.md:693
msgctxt "H4"
msgid "Registering The Engine"
msgstr ""

#: ./docs/8.x/scout.md:503
#: ./docs/9.x/scout.md:695
#: ./docs/10.x/scout.md:801
#: ./docs/11.x/scout.md:805
#: ./docs/master/scout.md:801
msgctxt "P"
msgid "Once you have written your custom engine, you may register it with Scout using the `extend` method of the Scout engine manager. Scout's engine manager may be resolved from the Laravel service container. You should call the `extend` method from the `boot` method of your `App\\Providers\\AppServiceProvider` class or any other service provider used by your application:"
msgstr ""

#: ./docs/8.x/scout.md:505
#: ./docs/9.x/scout.md:697
msgctxt "CODE"
msgid ""
"use App\\ScoutExtensions\\MySqlSearchEngine\n"
"use Laravel\\Scout\\EngineManager;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    resolve(EngineManager::class)->extend('mysql', function () {\n"
"        return new MySqlSearchEngine;\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/scout.md:516
#: ./docs/11.x/scout.md:516
#: ./docs/master/scout.md:516
msgctxt "H4"
msgid "Adding Records via Query"
msgstr ""

#: ./docs/8.x/scout.md:520
#: ./docs/9.x/scout.md:712
#: ./docs/10.x/scout.md:816
#: ./docs/11.x/scout.md:820
#: ./docs/master/scout.md:816
msgctxt "P"
msgid "Once your engine has been registered, you may specify it as your default Scout `driver` in your application's `config/scout.php` configuration file:"
msgstr ""

#: ./docs/8.x/scout.md:522
#: ./docs/9.x/scout.md:714
#: ./docs/10.x/scout.md:818
#: ./docs/11.x/scout.md:822
#: ./docs/master/scout.md:818
msgctxt "CODE"
msgid "'driver' => 'mysql',"
msgstr ""

#: ./docs/8.x/scout.md:524
#: ./docs/9.x/scout.md:716
#~ msgctxt "P"
#~ msgid "<a name=\"builder-macros\"></a>"
#~ msgstr ""

#: ./docs/8.x/scout.md:525
#: ./docs/9.x/scout.md:717
msgctxt "H2"
msgid "Builder Macros"
msgstr ""

#: ./docs/9.x/scout.md:526
#: ./docs/10.x/scout.md:625
#: ./docs/11.x/scout.md:629
#: ./docs/master/scout.md:625
msgctxt "P"
msgid "The `shouldBeSearchable` method is not applicable when using Scout's \"database\" engine, as all searchable data is always stored in the database. To achieve similar behavior when using the database engine, you should use [where clauses](#where-clauses) instead."
msgstr ""

#: ./docs/8.x/scout.md:527
#: ./docs/9.x/scout.md:719
msgctxt "P"
msgid "If you would like to define a custom Scout search builder method, you may use the `macro` method on the `Laravel\\Scout\\Builder` class. Typically, \"macros\" should be defined within a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#: ./docs/8.x/scout.md:529
#: ./docs/9.x/scout.md:721
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Scout\\Builder;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Builder::macro('count', function () {\n"
"        return $this->engine()->getTotalCount(\n"
"            $this->engine()->search($this)\n"
"        );\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/scout.md:547
#: ./docs/9.x/scout.md:739
msgctxt "P"
msgid "The `macro` function accepts a macro name as its first argument and a closure as its second argument. The macro's closure will be executed when calling the macro name from a `Laravel\\Scout\\Builder` implementation:"
msgstr ""

#: ./docs/8.x/scout.md:549
#: ./docs/9.x/scout.md:741
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"Order::search('Star Trek')->count();"
msgstr ""

#: ./docs/10.x/scout.md:560
#: ./docs/11.x/scout.md:560
#: ./docs/master/scout.md:560
#~ msgctxt "P"
#~ msgid "<a name=\"modifying-records-before-importing\"></a>"
#~ msgstr ""

#: ./docs/10.x/scout.md:561
#: ./docs/11.x/scout.md:561
#: ./docs/master/scout.md:561
msgctxt "H4"
msgid "Modifying Records Before Importing"
msgstr ""

#: ./docs/10.x/scout.md:563
#: ./docs/11.x/scout.md:563
#: ./docs/master/scout.md:563
msgctxt "P"
msgid "Sometimes you may need to prepare the collection of models before they are made searchable. For instance, you may want to eager load a relationship so that the relationship data can be efficiently added to your search index. To accomplish this, define a `makeSearchableUsing` method on the corresponding model:"
msgstr ""

#: ./docs/10.x/scout.md:565
#: ./docs/11.x/scout.md:565
#: ./docs/master/scout.md:565
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Eloquent\\Collection;\n"
"\n"
"/**\n"
" * Modify the collection of models being made searchable.\n"
" */\n"
"public function makeSearchableUsing(Collection $models): Collection\n"
"{\n"
"    return $models->load('author');\n"
"}"
msgstr ""

#: ./docs/9.x/scout.md:577
msgctxt "P"
msgid "If your application is using MeiliSearch, you must configure your application's [filterable attributes](#configuring-filterable-data-for-meilisearch) before utilizing Scout's \"where\" clauses."
msgstr ""

#: ./docs/11.x/scout.md:598
msgctxt "P"
msgid "To remove all of the model records from their corresponding index, you may invoke the `removeAllFromSearch` method:"
msgstr ""

#: ./docs/11.x/scout.md:600
msgctxt "CODE"
msgid "Order::removeAllFromSearch();"
msgstr ""

#: ./docs/10.x/scout.md:614
#: ./docs/11.x/scout.md:618
#: ./docs/master/scout.md:614
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine if the model should be searchable.\n"
" */\n"
"public function shouldBeSearchable(): bool\n"
"{\n"
"    return $this->isPublished();\n"
"}"
msgstr ""

#: ./docs/9.x/scout.md:614
#: ./docs/10.x/scout.md:719
#: ./docs/11.x/scout.md:723
#: ./docs/master/scout.md:719
msgctxt "P"
msgid "Since search engines are not aware of your Eloquent model's global scope definitions, you should not utilize global scopes in applications that utilize Scout pagination. Or, you should recreate the global scope's constraints when searching via Scout."
msgstr ""

#: ./docs/9.x/scout.md:656
#: ./docs/10.x/scout.md:761
#: ./docs/11.x/scout.md:765
#: ./docs/master/scout.md:761
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-eloquent-results-query\"></a>"
#~ msgstr ""

#: ./docs/9.x/scout.md:657
msgctxt "H4"
msgid "Customizing The Eloquent Results Query"
msgstr ""

#: ./docs/9.x/scout.md:659
#: ./docs/10.x/scout.md:764
#: ./docs/11.x/scout.md:768
#: ./docs/master/scout.md:764
msgctxt "P"
msgid "After Scout retrieves a list of matching Eloquent models from your application's search engine, Eloquent is used to retrieve all of the matching models by their primary keys. You may customize this query by invoking the `query` method. The `query` method accepts a closure that will receive the Eloquent query builder instance as an argument:"
msgstr ""

#: ./docs/9.x/scout.md:661
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"$orders = Order::search('Star Trek')\n"
"    ->query(fn ($query) => $query->with('invoices'))\n"
"    ->get();"
msgstr ""

#: ./docs/10.x/scout.md:667
#: ./docs/11.x/scout.md:671
#: ./docs/master/scout.md:667
msgctxt "P"
msgid "In addition, the `whereIn` method may be used to verify that a given column's value is contained within the given array:"
msgstr ""

#: ./docs/10.x/scout.md:669
#: ./docs/11.x/scout.md:673
#: ./docs/master/scout.md:669
msgctxt "CODE"
msgid ""
"$orders = Order::search('Star Trek')->whereIn(\n"
"    'status', ['open', 'paid']\n"
")->get();"
msgstr ""

#: ./docs/9.x/scout.md:669
#: ./docs/10.x/scout.md:775
#: ./docs/11.x/scout.md:779
#: ./docs/master/scout.md:775
msgctxt "P"
msgid "Since this callback is invoked after the relevant models have already been retrieved from your application's search engine, the `query` method should not be used for \"filtering\" results. Instead, you should use [Scout where clauses](#where-clauses)."
msgstr ""

#: ./docs/10.x/scout.md:673
#: ./docs/11.x/scout.md:677
#: ./docs/master/scout.md:673
msgctxt "P"
msgid "The `whereNotIn` method verifies that the given column's value is not contained in the given array:"
msgstr ""

#: ./docs/10.x/scout.md:675
#: ./docs/11.x/scout.md:679
#: ./docs/master/scout.md:675
msgctxt "CODE"
msgid ""
"$orders = Order::search('Star Trek')->whereNotIn(\n"
"    'status', ['closed']\n"
")->get();"
msgstr ""

#: ./docs/10.x/scout.md:682
#: ./docs/11.x/scout.md:686
#: ./docs/master/scout.md:682
msgctxt "P"
msgid "If your application is using Meilisearch, you must configure your application's [filterable attributes](#configuring-filterable-data-for-meilisearch) before utilizing Scout's \"where\" clauses."
msgstr ""

#: ./docs/10.x/scout.md:762
#: ./docs/11.x/scout.md:766
#: ./docs/master/scout.md:762
msgctxt "H4"
msgid "Customizing the Eloquent Results Query"
msgstr ""

#: ./docs/10.x/scout.md:766
#: ./docs/11.x/scout.md:770
#: ./docs/master/scout.md:766
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Order;\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"\n"
"$orders = Order::search('Star Trek')\n"
"    ->query(fn (Builder $query) => $query->with('invoices'))\n"
"    ->get();"
msgstr ""

#: ./docs/10.x/scout.md:781
#: ./docs/11.x/scout.md:785
#: ./docs/master/scout.md:781
msgctxt "H4"
msgid "Writing the Engine"
msgstr ""

#: ./docs/10.x/scout.md:799
#: ./docs/11.x/scout.md:803
#: ./docs/master/scout.md:799
msgctxt "H4"
msgid "Registering the Engine"
msgstr ""

#: ./docs/10.x/scout.md:803
#: ./docs/11.x/scout.md:807
#: ./docs/master/scout.md:803
msgctxt "CODE"
msgid ""
"use App\\ScoutExtensions\\MySqlSearchEngine;\n"
"use Laravel\\Scout\\EngineManager;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    resolve(EngineManager::class)->extend('mysql', function () {\n"
"        return new MySqlSearchEngine;\n"
"    });\n"
"}"
msgstr ""
