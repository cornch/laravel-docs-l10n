#
msgid ""
msgstr ""

#: docs/8.x/sail.md:block 1 (header)
msgid "Laravel Sail"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Installation & Setup](#installation)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Installing Sail Into Existing Applications](#installing-sail-into-existing-applications)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Configuring A Bash Alias](#configuring-a-bash-alias)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Starting & Stopping Sail](#starting-and-stopping-sail)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Executing Commands](#executing-sail-commands)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Executing PHP Commands](#executing-php-commands)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Executing Composer Commands](#executing-composer-commands)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Executing Artisan Commands](#executing-artisan-commands)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Executing Node / NPM Commands](#executing-node-npm-commands)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Interacting With Databases](#interacting-with-sail-databases)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[MySQL](#mysql)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Redis](#redis)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[MeiliSearch](#meilisearch)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[File Storage](#file-storage)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Running Tests](#running-tests)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Laravel Dusk](#laravel-dusk)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Previewing Emails](#previewing-emails)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Container CLI](#sail-container-cli)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[PHP Versions](#sail-php-versions)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Node Versions](#sail-node-versions)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Sharing Your Site](#sharing-your-site)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Debugging With Xdebug](#debugging-with-xdebug)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Xdebug CLI Usage](#xdebug-cli-usage)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Xdebug Browser Usage](#xdebug-browser-usage)"
msgstr ""

#: docs/8.x/sail.md:block 2 (unordered list)
msgid "[Customization](#sail-customization)"
msgstr ""

#: docs/8.x/sail.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/sail.md:block 5 (paragraph)
msgid "[Laravel Sail](https://github.com/laravel/sail) is a light-weight command-line interface for interacting with Laravel's default Docker development environment. Sail provides a great starting point for building a Laravel application using PHP, MySQL, and Redis without requiring prior Docker experience."
msgstr ""

#: docs/8.x/sail.md:block 6 (paragraph)
msgid "At its heart, Sail is the `docker-compose.yml` file and the `sail` script that is stored at the root of your project. The `sail` script provides a CLI with convenient methods for interacting with the Docker containers defined by the `docker-compose.yml` file."
msgstr ""

#: docs/8.x/sail.md:block 7 (paragraph)
msgid "Laravel Sail is supported on macOS, Linux, and Windows (via [WSL2](https://docs.microsoft.com/en-us/windows/wsl/about))."
msgstr ""

#: docs/8.x/sail.md:block 9 (header)
msgid "Installation & Setup"
msgstr ""

#: docs/8.x/sail.md:block 10 (paragraph)
msgid "Laravel Sail is automatically installed with all new Laravel applications so you may start using it immediately. To learn how to create a new Laravel application, please consult Laravel's [installation documentation](/docs/{{version}}/installation) for your operating system. During installation, you will be asked to choose which Sail supported services your application will be interacting with."
msgstr ""

#: docs/8.x/sail.md:block 12 (header)
msgid "Installing Sail Into Existing Applications"
msgstr ""

#: docs/8.x/sail.md:block 13 (paragraph)
msgid "If you are interested in using Sail with an existing Laravel application, you may simply install Sail using the Composer package manager. Of course, these steps assume that your existing local development environment allows you to install Composer dependencies:"
msgstr ""

#: docs/8.x/sail.md:block 14 (code)
msgid "composer require laravel/sail --dev\n"
msgstr ""

#: docs/8.x/sail.md:block 15 (paragraph)
msgid "After Sail has been installed, you may run the `sail:install` Artisan command. This command will publish Sail's `docker-compose.yml` file to the root of your application:"
msgstr ""

#: docs/8.x/sail.md:block 16 (code)
msgid "php artisan sail:install\n"
msgstr ""

#: docs/8.x/sail.md:block 17 (paragraph)
msgid "Finally, you may start Sail. To continue learning how to use Sail, please continue reading the remainder of this documentation:"
msgstr ""

#: docs/8.x/sail.md:block 18 (code)
msgid "./vendor/bin/sail up\n"
msgstr ""

#: docs/8.x/sail.md:block 20 (header)
msgid "Using Devcontainers"
msgstr ""

#: docs/8.x/sail.md:block 21 (paragraph)
msgid "If you would like to develop within a [Devcontainer](https://code.visualstudio.com/docs/remote/containers), you may provide the `--devcontainer` option to the `sail:install` command. The `--devcontainer` option will instruct the `sail:install` command to publish a default `.devcontainer/devcontainer.json ` file to the root of your application:"
msgstr ""

#: docs/8.x/sail.md:block 22 (code)
msgid "php artisan sail:install --devcontainer\n"
msgstr ""

#: docs/8.x/sail.md:block 24 (header)
msgid "Configuring A Bash Alias"
msgstr ""

#: docs/8.x/sail.md:block 25 (paragraph)
msgid "By default, Sail commands are invoked using the `vendor/bin/sail` script that is included with all new Laravel applications:"
msgstr ""

#: docs/8.x/sail.md:block 27 (paragraph)
msgid "However, instead of repeatedly typing `vendor/bin/sail` to execute Sail commands, you may wish to configure a Bash alias that allows you to execute Sail's commands more easily:"
msgstr ""

#: docs/8.x/sail.md:block 28 (code)
msgid "alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'\n"
msgstr ""

#: docs/8.x/sail.md:block 29 (paragraph)
msgid "Once the Bash alias has been configured, you may execute Sail commands by simply typing `sail`. The remainder of this documentation's examples will assume that you have configured this alias:"
msgstr ""

#: docs/8.x/sail.md:block 30 (code)
msgid "sail up\n"
msgstr ""

#: docs/8.x/sail.md:block 32 (header)
msgid "Starting & Stopping Sail"
msgstr ""

#: docs/8.x/sail.md:block 33 (paragraph)
msgid "Laravel Sail's `docker-compose.yml` file defines a variety of Docker containers that work together to help you build Laravel applications. Each of these containers is an entry within the `services` configuration of your `docker-compose.yml` file. The `laravel.test` container is the primary application container that will be serving your application."
msgstr ""

#: docs/8.x/sail.md:block 34 (paragraph)
msgid "Before starting Sail, you should ensure that no other web servers or databases are running on your local computer. To start all of the Docker containers defined in your application's `docker-compose.yml` file, you should execute the `up` command:"
msgstr ""

#: docs/8.x/sail.md:block 36 (paragraph)
msgid "To start all of the Docker containers in the background, you may start Sail in \"detached\" mode:"
msgstr ""

#: docs/8.x/sail.md:block 37 (code)
msgid "sail up -d\n"
msgstr ""

#: docs/8.x/sail.md:block 38 (paragraph)
msgid "Once the application's containers have been started, you may access the project in your web browser at: http://localhost."
msgstr ""

#: docs/8.x/sail.md:block 39 (paragraph)
msgid "To stop all of the containers, you may simply press Control + C to stop the container's execution. Or, if the containers are running in the background, you may use the `stop` command:"
msgstr ""

#: docs/8.x/sail.md:block 40 (code)
msgid "sail stop\n"
msgstr ""

#: docs/8.x/sail.md:block 42 (header)
msgid "Executing Commands"
msgstr ""

#: docs/8.x/sail.md:block 43 (paragraph)
msgid "When using Laravel Sail, your application is executing within a Docker container and is isolated from your local computer. However, Sail provides a convenient way to run various commands against your application such as arbitrary PHP commands, Artisan commands, Composer commands, and Node / NPM commands."
msgstr ""

#: docs/8.x/sail.md:block 44 (paragraph)
msgid "**When reading the Laravel documentation, you will often see references to Composer, Artisan, and Node / NPM commands that do not reference Sail.** Those examples assume that these tools are installed on your local computer. If you are using Sail for your local Laravel development environment, you should execute those commands using Sail:"
msgstr ""

#: docs/8.x/sail.md:block 45 (code)
msgid ""
"# Running Artisan commands locally...\n"
"php artisan queue:work\n"
"\n"
"# Running Artisan commands within Laravel Sail...\n"
"sail artisan queue:work\n"
msgstr ""

#: docs/8.x/sail.md:block 47 (header)
msgid "Executing PHP Commands"
msgstr ""

#: docs/8.x/sail.md:block 48 (paragraph)
msgid "PHP commands may be executed using the `php` command. Of course, these commands will execute using the PHP version that is configured for your application. To learn more about the PHP versions available to Laravel Sail, consult the [PHP version documentation](#sail-php-versions):"
msgstr ""

#: docs/8.x/sail.md:block 49 (code)
msgid ""
"sail php --version\n"
"\n"
"sail php script.php\n"
msgstr ""

#: docs/8.x/sail.md:block 51 (header)
msgid "Executing Composer Commands"
msgstr ""

#: docs/8.x/sail.md:block 52 (paragraph)
msgid "Composer commands may be executed using the `composer` command. Laravel Sail's application container includes a Composer 2.x installation:"
msgstr ""

#: docs/8.x/sail.md:block 53 (code)
msgid "sail composer require laravel/sanctum\n"
msgstr ""

#: docs/8.x/sail.md:block 55 (header)
msgid "Installing Composer Dependencies For Existing Applications"
msgstr ""

#: docs/8.x/sail.md:block 56 (paragraph)
msgid "If you are developing an application with a team, you may not be the one that initially creates the Laravel application. Therefore, none of the application's Composer dependencies, including Sail, will be installed after you clone the application's repository to your local computer."
msgstr ""

#: docs/8.x/sail.md:block 57 (paragraph)
msgid "You may install the application's dependencies by navigating to the application's directory and executing the following command. This command uses a small Docker container containing PHP and Composer to install the application's dependencies:"
msgstr ""

#: docs/8.x/sail.md:block 58 (code)
msgid ""
"docker run --rm \\\n"
"    -u \"$(id -u):$(id -g)\" \\\n"
"    -v $(pwd):/var/www/html \\\n"
"    -w /var/www/html \\\n"
"    laravelsail/php81-composer:latest \\\n"
"    composer install --ignore-platform-reqs\n"
msgstr ""

#: docs/8.x/sail.md:block 59 (paragraph)
msgid "When using the `laravelsail/phpXX-composer` image, you should use the same version of PHP that you plan to use for your application (`74`, `80`, or `81`)."
msgstr ""

#: docs/8.x/sail.md:block 61 (header)
msgid "Executing Artisan Commands"
msgstr ""

#: docs/8.x/sail.md:block 62 (paragraph)
msgid "Laravel Artisan commands may be executed using the `artisan` command:"
msgstr ""

#: docs/8.x/sail.md:block 63 (code)
msgid "sail artisan queue:work\n"
msgstr ""

#: docs/8.x/sail.md:block 65 (header)
msgid "Executing Node / NPM Commands"
msgstr ""

#: docs/8.x/sail.md:block 66 (paragraph)
msgid "Node commands may be executed using the `node` command while NPM commands may be executed using the `npm` command:"
msgstr ""

#: docs/8.x/sail.md:block 67 (code)
msgid ""
"sail node --version\n"
"\n"
"sail npm run prod\n"
msgstr ""

#: docs/8.x/sail.md:block 68 (paragraph)
msgid "If you wish, you may use Yarn instead of NPM:"
msgstr ""

#: docs/8.x/sail.md:block 69 (code)
msgid "sail yarn\n"
msgstr ""

#: docs/8.x/sail.md:block 71 (header)
msgid "Interacting With Databases"
msgstr ""

#: docs/8.x/sail.md:block 73 (header)
msgid "MySQL"
msgstr ""

#: docs/8.x/sail.md:block 74 (paragraph)
msgid "As you may have noticed, your application's `docker-compose.yml` file contains an entry for a MySQL container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your database is persisted even when stopping and restarting your containers. In addition, when the MySQL container is starting, it will ensure a database exists whose name matches the value of your `DB_DATABASE` environment variable."
msgstr ""

#: docs/8.x/sail.md:block 75 (paragraph)
msgid "Once you have started your containers, you may connect to the MySQL instance within your application by setting your `DB_HOST` environment variable within your application's `.env` file to `mysql`."
msgstr ""

#: docs/8.x/sail.md:block 76 (paragraph)
msgid "To connect to your application's MySQL database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the MySQL database is accessible at `localhost` port 3306."
msgstr ""

#: docs/8.x/sail.md:block 78 (header)
msgid "Redis"
msgstr ""

#: docs/8.x/sail.md:block 79 (paragraph)
msgid "Your application's `docker-compose.yml` file also contains an entry for a [Redis](https://redis.io) container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your Redis data is persisted even when stopping and restarting your containers. Once you have started your containers, you may connect to the Redis instance within your application by setting your `REDIS_HOST` environment variable within your application's `.env` file to `redis`."
msgstr ""

#: docs/8.x/sail.md:block 80 (paragraph)
msgid "To connect to your application's Redis database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the Redis database is accessible at `localhost` port 6379."
msgstr ""

#: docs/8.x/sail.md:block 82 (header)
msgid "MeiliSearch"
msgstr ""

#: docs/8.x/sail.md:block 83 (paragraph)
msgid "If you chose to install the [MeiliSearch](https://www.meilisearch.com) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this powerful search-engine that is [compatible](https://github.com/meilisearch/meilisearch-laravel-scout) with [Laravel Scout](/docs/{{version}}/scout). Once you have started your containers, you may connect to the MeiliSearch instance within your application by setting your `MEILISEARCH_HOST` environment variable to `http://meilisearch:7700`."
msgstr ""

#: docs/8.x/sail.md:block 84 (paragraph)
msgid "From your local machine, you may access MeiliSearch's web based administration panel by navigating to `http://localhost:7700` in your web browser."
msgstr ""

#: docs/8.x/sail.md:block 86 (header)
msgid "File Storage"
msgstr ""

#: docs/8.x/sail.md:block 87 (paragraph)
msgid "If you plan to use Amazon S3 to store files while running your application in its production environment, you may wish to install the [MinIO](https://min.io) service when installing Sail. MinIO provides an S3 compatible API that you may use to develop locally using Laravel's `s3` file storage driver without creating \"test\" storage buckets in your production S3 environment. If you choose to install MinIO while installing Sail, a MinIO configuration section will be added to your application's `docker-compose.yml` file."
msgstr ""

#: docs/8.x/sail.md:block 88 (paragraph)
msgid "By default, your application's `filesystems` configuration file already contains a disk configuration for the `s3` disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as MinIO by simply modifying the associated environment variables that control its configuration. For example, when using MinIO, your filesystem environment variable configuration should be defined as follows:"
msgstr ""

#: docs/8.x/sail.md:block 89 (code)
msgid ""
"FILESYSTEM_DRIVER=s3\n"
"AWS_ACCESS_KEY_ID=sail\n"
"AWS_SECRET_ACCESS_KEY=password\n"
"AWS_DEFAULT_REGION=us-east-1\n"
"AWS_BUCKET=local\n"
"AWS_ENDPOINT=http://minio:9000\n"
"AWS_USE_PATH_STYLE_ENDPOINT=true\n"
msgstr ""

#: docs/8.x/sail.md:block 91 (header)
msgid "Running Tests"
msgstr ""

#: docs/8.x/sail.md:block 92 (paragraph)
msgid "Laravel provides amazing testing support out of the box, and you may use Sail's `test` command to run your applications [feature and unit tests](/docs/{{version}}/testing). Any CLI options that are accepted by PHPUnit may also be passed to the `test` command:"
msgstr ""

#: docs/8.x/sail.md:block 93 (code)
msgid ""
"sail test\n"
"\n"
"sail test --group orders\n"
msgstr ""

#: docs/8.x/sail.md:block 94 (paragraph)
msgid "The Sail `test` command is equivalent to running the `test` Artisan command:"
msgstr ""

#: docs/8.x/sail.md:block 95 (code)
msgid "sail artisan test\n"
msgstr ""

#: docs/8.x/sail.md:block 97 (header)
msgid "Laravel Dusk"
msgstr ""

#: docs/8.x/sail.md:block 98 (paragraph)
msgid "[Laravel Dusk](/docs/{{version}}/dusk) provides an expressive, easy-to-use browser automation and testing API. Thanks to Sail, you may run these tests without ever installing Selenium or other tools on your local computer. To get started, uncomment the Selenium service in your application's `docker-compose.yml` file:"
msgstr ""

#: docs/8.x/sail.md:block 99 (code)
msgid ""
"selenium:\n"
"    image: 'selenium/standalone-chrome'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail\n"
msgstr ""

#: docs/8.x/sail.md:block 100 (paragraph)
msgid "Next, ensure that the `laravel.test` service in your application's `docker-compose.yml` file has a `depends_on` entry for `selenium`:"
msgstr ""

#: docs/8.x/sail.md:block 101 (code)
msgid ""
"depends_on:\n"
"    - mysql\n"
"    - redis\n"
"    - selenium\n"
msgstr ""

#: docs/8.x/sail.md:block 102 (paragraph)
msgid "Finally, you may run your Dusk test suite by starting Sail and running the `dusk` command:"
msgstr ""

#: docs/8.x/sail.md:block 103 (code)
msgid "sail dusk\n"
msgstr ""

#: docs/8.x/sail.md:block 105 (header)
msgid "Selenium On Apple Silicon"
msgstr ""

#: docs/8.x/sail.md:block 106 (paragraph)
msgid "If your local machine contains an Apple Silicon chip, your `selenium` service must use the `seleniarm/standalone-chromium` image:"
msgstr ""

#: docs/8.x/sail.md:block 107 (code)
msgid ""
"selenium:\n"
"    image: 'seleniarm/standalone-chromium'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail\n"
msgstr ""

#: docs/8.x/sail.md:block 109 (header)
msgid "Previewing Emails"
msgstr ""

#: docs/8.x/sail.md:block 110 (paragraph)
msgid "Laravel Sail's default `docker-compose.yml` file contains a service entry for [MailHog](https://github.com/mailhog/MailHog). MailHog intercepts emails sent by your application during local development and provides a convenient web interface so that you can preview your email messages in your browser. When using Sail, MailHog's default host is `mailhog` and is available via port 1025:"
msgstr ""

#: docs/8.x/sail.md:block 111 (code)
msgid ""
"MAIL_HOST=mailhog\n"
"MAIL_PORT=1025\n"
"MAIL_ENCRYPTION=null\n"
msgstr ""

#: docs/8.x/sail.md:block 112 (paragraph)
msgid "When Sail is running, you may access the MailHog web interface at: http://localhost:8025"
msgstr ""

#: docs/8.x/sail.md:block 114 (header)
msgid "Container CLI"
msgstr ""

#: docs/8.x/sail.md:block 115 (paragraph)
msgid "Sometimes you may wish to start a Bash session within your application's container. You may use the `shell` command to connect to your application's container, allowing you to inspect its files and installed services as well execute arbitrary shell commands within the container:"
msgstr ""

#: docs/8.x/sail.md:block 116 (code)
msgid ""
"sail shell\n"
"\n"
"sail root-shell\n"
msgstr ""

#: docs/8.x/sail.md:block 117 (paragraph)
msgid "To start a new [Laravel Tinker](https://github.com/laravel/tinker) session, you may execute the `tinker` command:"
msgstr ""

#: docs/8.x/sail.md:block 118 (code)
msgid "sail tinker\n"
msgstr ""

#: docs/8.x/sail.md:block 120 (header)
msgid "PHP Versions"
msgstr ""

#: docs/8.x/sail.md:block 121 (paragraph)
msgid "Sail currently supports serving your application via PHP 8.1, PHP 8.0, or PHP 7.4. The default PHP version used by Sail is currently PHP 8.1. To change the PHP version that is used to serve your application, you should update the `build` definition of the `laravel.test` container in your application's `docker-compose.yml` file:"
msgstr ""

#: docs/8.x/sail.md:block 122 (code)
msgid ""
"# PHP 8.1\n"
"context: ./vendor/laravel/sail/runtimes/8.1\n"
"\n"
"# PHP 8.0\n"
"context: ./vendor/laravel/sail/runtimes/8.0\n"
"\n"
"# PHP 7.4\n"
"context: ./vendor/laravel/sail/runtimes/7.4\n"
msgstr ""

#: docs/8.x/sail.md:block 123 (paragraph)
msgid "In addition, you may wish to update your `image` name to reflect the version of PHP being used by your application. This option is also defined in your application's `docker-compose.yml` file:"
msgstr ""

#: docs/8.x/sail.md:block 124 (code)
msgid "image: sail-8.1/app\n"
msgstr ""

#: docs/8.x/sail.md:block 125 (paragraph)
msgid "After updating your application's `docker-compose.yml` file, you should rebuild your container images:"
msgstr ""

#: docs/8.x/sail.md:block 126 (code)
msgid ""
"sail build --no-cache\n"
"\n"
"sail up\n"
msgstr ""

#: docs/8.x/sail.md:block 128 (header)
msgid "Node Versions"
msgstr ""

#: docs/8.x/sail.md:block 129 (paragraph)
msgid "Sail installs Node 16 by default. To change the Node version that is installed when building your images, you may update the `build.args` definition of the `laravel.test` service in your application's `docker-compose.yml` file:"
msgstr ""

#: docs/8.x/sail.md:block 130 (code)
msgid ""
"build:\n"
"    args:\n"
"        WWWGROUP: '${WWWGROUP}'\n"
"        NODE_VERSION: '14'\n"
msgstr ""

#: docs/8.x/sail.md:block 134 (header)
msgid "Sharing Your Site"
msgstr ""

#: docs/8.x/sail.md:block 135 (paragraph)
msgid "Sometimes you may need to share your site publicly in order to preview your site for a colleague or to test webhook integrations with your application. To share your site, you may use the `share` command. After executing this command, you will be issued a random `laravel-sail.site` URL that you may use to access your application:"
msgstr ""

#: docs/8.x/sail.md:block 136 (code)
msgid "sail share\n"
msgstr ""

#: docs/8.x/sail.md:block 137 (paragraph)
msgid "When sharing your site via the `share` command, you should configure your application's trusted proxies within the `TrustProxies` middleware. Otherwise, URL generation helpers such as `url` and `route` will be unable to determine the correct HTTP host that should be used during URL generation:"
msgstr ""

#: docs/8.x/sail.md:block 138 (code)
msgid ""
"/**\n"
" * The trusted proxies for this application.\n"
" *\n"
" * @var array|string|null\n"
" */\n"
"protected $proxies = '*';\n"
msgstr ""

#: docs/8.x/sail.md:block 139 (paragraph)
msgid "If you would like to choose the subdomain for your shared site, you may provide the `subdomain` option when executing the `share` command:"
msgstr ""

#: docs/8.x/sail.md:block 140 (code)
msgid "sail share --subdomain=my-sail-site\n"
msgstr ""

#: docs/8.x/sail.md:block 141 (quote)
msgid "{tip} The `share` command is powered by [Expose](https://github.com/beyondcode/expose), an open source tunneling service by [BeyondCode](https://beyondco.de)."
msgstr ""

#: docs/8.x/sail.md:block 143 (header)
msgid "Debugging With Xdebug"
msgstr ""

#: docs/8.x/sail.md:block 144 (paragraph)
msgid "Laravel Sail's Docker configuration includes support for [Xdebug](https://xdebug.org/), a popular and powerful debugger for PHP. In order to enable Xdebug, you will need to add a few variables to your application's `.env` file to [configure Xdebug](https://xdebug.org/docs/step_debug#mode). To enable Xdebug you must set the appropriate mode(s) before starting Sail:"
msgstr ""

#: docs/8.x/sail.md:block 145 (code)
msgid "SAIL_XDEBUG_MODE=develop,debug\n"
msgstr ""

#: docs/8.x/sail.md:block 146 (header)
msgid "Linux Host IP Configuration"
msgstr ""

#: docs/8.x/sail.md:block 147 (paragraph)
msgid "Internally, the `XDEBUG_CONFIG` environment variable is defined as `client_host=host.docker.internal` so that Xdebug will be properly configured for Mac and Windows (WSL2). If your local machine is running Linux, you will need to manually define this environment variable."
msgstr ""

#: docs/8.x/sail.md:block 148 (paragraph)
msgid "First, you should determine the correct host IP address to add to the environment variable by running the following command. Typically, the `<container-name>` should be the name of the container that serves your application and often ends with `_laravel.test_1`:"
msgstr ""

#: docs/8.x/sail.md:block 149 (code)
msgid "docker inspect -f {{range.NetworkSettings.Networks}}{{.Gateway}}{{end}} <container-name>\n"
msgstr ""

#: docs/8.x/sail.md:block 150 (paragraph)
msgid "Once you have obtained the correct host IP address, you should define the `SAIL_XDEBUG_CONFIG` variable within your application's `.env` file:"
msgstr ""

#: docs/8.x/sail.md:block 151 (code)
msgid "SAIL_XDEBUG_CONFIG=\"client_host=<host-ip-address>\"\n"
msgstr ""

#: docs/8.x/sail.md:block 153 (header)
msgid "Xdebug CLI Usage"
msgstr ""

#: docs/8.x/sail.md:block 154 (paragraph)
msgid "A `sail debug` command may be used to start a debugging session when running an Artisan command:"
msgstr ""

#: docs/8.x/sail.md:block 155 (code)
msgid ""
"# Run an Artisan command without Xdebug...\n"
"sail artisan migrate\n"
"\n"
"# Run an Artisan command with Xdebug...\n"
"sail debug migrate\n"
msgstr ""

#: docs/8.x/sail.md:block 157 (header)
msgid "Xdebug Browser Usage"
msgstr ""

#: docs/8.x/sail.md:block 158 (paragraph)
msgid "To debug your application while interacting with the application via a web browser, follow the [instructions provided by Xdebug](https://xdebug.org/docs/step_debug#web-application) for initiating an Xdebug session from the web browser."
msgstr ""

#: docs/8.x/sail.md:block 159 (paragraph)
msgid "If you're using PhpStorm, please review JetBrain's documentation regarding [zero-configuration debugging](https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html)."
msgstr ""

#: docs/8.x/sail.md:block 160 (quote)
msgid "{note} Laravel Sail relies on `artisan serve` to serve your application. The `artisan serve` command only accepts the `XDEBUG_CONFIG` and `XDEBUG_MODE` variables as of Laravel version 8.53.0. Older versions of Laravel (8.52.0 and below) do not support these variables and will not accept debug connections."
msgstr ""

#: docs/8.x/sail.md:block 162 (header)
msgid "Customization"
msgstr ""

#: docs/8.x/sail.md:block 163 (paragraph)
msgid "Since Sail is just Docker, you are free to customize nearly everything about it. To publish Sail's own Dockerfiles, you may execute the `sail:publish` command:"
msgstr ""

#: docs/8.x/sail.md:block 164 (code)
msgid "sail artisan sail:publish\n"
msgstr ""

#: docs/8.x/sail.md:block 165 (paragraph)
msgid "After running this command, the Dockerfiles and other configuration files used by Laravel Sail will be placed within a `docker` directory in your application's root directory. After customizing your Sail installation, you may wish to change the image name for the application container in your application's `docker-compose.yml` file. After doing so, rebuild your application's containers using the `build` command. Assigning a unique name to the application image is particularly important if you are using Sail to develop multiple Laravel applications on a single machine:"
msgstr ""

#: docs/8.x/sail.md:block 166 (code)
msgid "sail build --no-cache\n"
msgstr ""

#: docs/9.x/sail.md:block 89 (code)
msgid ""
"FILESYSTEM_DISK=s3\n"
"AWS_ACCESS_KEY_ID=sail\n"
"AWS_SECRET_ACCESS_KEY=password\n"
"AWS_DEFAULT_REGION=us-east-1\n"
"AWS_BUCKET=local\n"
"AWS_ENDPOINT=http://minio:9000\n"
"AWS_USE_PATH_STYLE_ENDPOINT=true\n"
msgstr ""
