# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-29 13:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/views.md, line: 1
# File: docs/master/views.md, line: 1
#, no-wrap
msgid "Views"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Creating & Rendering Views](#creating-and-rendering-views)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Nested View Directories](#nested-view-directories)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Creating The First Available View](#creating-the-first-available-view)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Determining If A View Exists](#determining-if-a-view-exists)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Passing Data To Views](#passing-data-to-views)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Sharing Data With All Views](#sharing-data-with-all-views)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[View Composers](#view-composers)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[View Creators](#view-creators)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
msgid "[Optimizing Views](#optimizing-views)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 15
# File: docs/master/views.md, line: 15
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/views.md, line: 15
# File: docs/master/views.md, line: 15
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 18
# File: docs/master/views.md, line: 18
msgid "Of course, it's not practical to return entire HTML documents strings directly from your routes and controllers. Thankfully, views provide a convenient way to place all of our HTML in separate files. Views separate your controller / application logic from your presentation logic and are stored in the `resources/views` directory. A simple view might look something like this:"
msgstr ""
#
#. type: Fenced code block (html)
# File: docs/8.x/views.md, line: 19
# File: docs/master/views.md, line: 19
#, no-wrap
msgid ""
"<!-- View stored in resources/views/greeting.blade.php -->\n"
"\n"
"<html>\n"
"    <body>\n"
"        <h1>Hello, {{ $name }}</h1>\n"
"    </body>\n"
"</html>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 30
# File: docs/master/views.md, line: 30
msgid "Since this view is stored at `resources/views/greeting.blade.php`, we may return it using the global `view` helper like so:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 34
# File: docs/8.x/views.md, line: 47
# File: docs/master/views.md, line: 34
# File: docs/master/views.md, line: 47
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'James']);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 36
# File: docs/master/views.md, line: 36
#, no-wrap
msgid "> {tip} Looking for more information on how to write Blade templates? Check out the full [Blade documentation](/docs/{{version}}/blade) to get started.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 38
# File: docs/master/views.md, line: 38
#, no-wrap
msgid "<a name=\"creating-and-rendering-views\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/views.md, line: 38
# File: docs/master/views.md, line: 38
#, no-wrap
msgid "Creating & Rendering Views"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 41
# File: docs/master/views.md, line: 41
msgid "You may create a view by placing a file with the `.blade.php` extension in your application's `resources/views` directory. The `.blade.php` extension informs the framework that the file contains a [Blade template](/docs/{{version}}/blade). Blade templates contain HTML as well as Blade directives that allow you to easily echo values, create \"if\" statements, iterate over data, and more."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 43
# File: docs/master/views.md, line: 43
msgid "Once you have created a view, you may return it from one of your application's routes or controllers using the global `view` helper:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 49
# File: docs/master/views.md, line: 49
msgid "Views may also be returned using the `View` facade:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 51
# File: docs/8.x/views.md, line: 71
# File: docs/8.x/views.md, line: 80
# File: docs/8.x/views.md, line: 110
# File: docs/master/views.md, line: 51
# File: docs/master/views.md, line: 71
# File: docs/master/views.md, line: 80
# File: docs/master/views.md, line: 110
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\View;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 53
# File: docs/master/views.md, line: 53
#, no-wrap
msgid "    return View::make('greeting', ['name' => 'James']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 55
# File: docs/master/views.md, line: 55
msgid "As you can see, the first argument passed to the `view` helper corresponds to the name of the view file in the `resources/views` directory. The second argument is an array of data that should be made available to the view. In this case, we are passing the `name` variable, which is displayed in the view using [Blade syntax](/docs/{{version}}/blade)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 57
# File: docs/master/views.md, line: 57
#, no-wrap
msgid "<a name=\"nested-view-directories\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/views.md, line: 57
# File: docs/master/views.md, line: 57
#, no-wrap
msgid "Nested View Directories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 60
# File: docs/master/views.md, line: 60
msgid "Views may also be nested within subdirectories of the `resources/views` directory. \"Dot\" notation may be used to reference nested views. For example, if your view is stored at `resources/views/admin/profile.blade.php`, you may return it from one of your application's routes / controllers like so:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 62
# File: docs/master/views.md, line: 62
#, no-wrap
msgid "    return view('admin.profile', $data);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 64
# File: docs/master/views.md, line: 64
#, no-wrap
msgid "> {note} View directory names should not contain the `.` character.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 66
# File: docs/master/views.md, line: 66
#, no-wrap
msgid "<a name=\"creating-the-first-available-view\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/views.md, line: 66
# File: docs/master/views.md, line: 66
#, no-wrap
msgid "Creating The First Available View"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 69
# File: docs/master/views.md, line: 69
msgid "Using the `View` facade's `first` method, you may create the first view that exists in a given array of views. This may be useful if your application or package allows views to be customized or overwritten:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 73
# File: docs/master/views.md, line: 73
#, no-wrap
msgid "    return View::first(['custom.admin', 'admin'], $data);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 75
# File: docs/master/views.md, line: 75
#, no-wrap
msgid "<a name=\"determining-if-a-view-exists\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/views.md, line: 75
# File: docs/master/views.md, line: 75
#, no-wrap
msgid "Determining If A View Exists"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 78
# File: docs/master/views.md, line: 78
msgid "If you need to determine if a view exists, you may use the `View` facade. The `exists` method will return `true` if the view exists:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 84
# File: docs/master/views.md, line: 84
#, no-wrap
msgid ""
"    if (View::exists('emails.customer')) {\n"
"        //\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 86
# File: docs/master/views.md, line: 86
#, no-wrap
msgid "<a name=\"passing-data-to-views\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/views.md, line: 86
# File: docs/master/views.md, line: 86
#, no-wrap
msgid "Passing Data To Views"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 89
# File: docs/master/views.md, line: 89
msgid "As you saw in the previous examples, you may pass an array of data to views to make that data available to the view:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 91
# File: docs/master/views.md, line: 91
#, no-wrap
msgid "    return view('greetings', ['name' => 'Victoria']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 93
# File: docs/master/views.md, line: 93
#, no-wrap
msgid "When passing information in this manner, the data should be an array with key / value pairs. After providing data to a view, you can then access each value within your view using the data's keys, such as `<?php echo $name; ?>`.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 95
# File: docs/master/views.md, line: 95
msgid "As an alternative to passing a complete array of data to the `view` helper function, you may use the `with` method to add individual pieces of data to the view. The `with` method returns an instance of the view object so that you can continue chaining methods before returning the view:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 99
# File: docs/master/views.md, line: 99
#, no-wrap
msgid ""
"    return view('greeting')\n"
"                ->with('name', 'Victoria')\n"
"                ->with('occupation', 'Astronaut');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 101
# File: docs/master/views.md, line: 101
#, no-wrap
msgid "<a name=\"sharing-data-with-all-views\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/views.md, line: 101
# File: docs/master/views.md, line: 101
#, no-wrap
msgid "Sharing Data With All Views"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 104
# File: docs/master/views.md, line: 104
msgid "Occasionally, you may need to share data with all views that are rendered by your application. You may do so using the `View` facade's `share` method. Typically, you should place calls to the `share` method within a service provider's `boot` method. You are free to add them to the `App\\Providers\\AppServiceProvider` class or generate a separate service provider to house them:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 106
# File: docs/8.x/views.md, line: 144
# File: docs/8.x/views.md, line: 185
# File: docs/master/views.md, line: 106
# File: docs/master/views.md, line: 144
# File: docs/master/views.md, line: 185
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 108
# File: docs/8.x/views.md, line: 146
# File: docs/master/views.md, line: 108
# File: docs/master/views.md, line: 146
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 122
# File: docs/master/views.md, line: 122
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 133
# File: docs/master/views.md, line: 133
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            View::share('key', 'value');\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 135
# File: docs/master/views.md, line: 135
#, no-wrap
msgid "<a name=\"view-composers\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/views.md, line: 135
# File: docs/master/views.md, line: 135
#, no-wrap
msgid "View Composers"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 138
# File: docs/master/views.md, line: 138
msgid "View composers are callbacks or class methods that are called when a view is rendered. If you have data that you want to be bound to a view each time that view is rendered, a view composer can help you organize that logic into a single location. View composers may prove particularly useful if the same view is returned by multiple routes or controllers within your application and always needs a particular piece of data."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 140
# File: docs/master/views.md, line: 140
msgid "Typically, view composers will be registered within one of your application's [service providers](/docs/{{version}}/providers). In this example, we'll assume that we have created a new `App\\Providers\\ViewServiceProvider` to house this logic."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 142
# File: docs/master/views.md, line: 142
msgid "We'll use the `View` facade's `composer` method to register the view composer. Laravel does not include a default directory for class based view composers, so you are free to organize them however you wish. For example, you could create an `app/View/Composers` directory to house all of your application's view composers:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 150
# File: docs/master/views.md, line: 150
#, no-wrap
msgid ""
"    use App\\View\\Composers\\ProfileComposer;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 162
# File: docs/master/views.md, line: 162
#, no-wrap
msgid ""
"    class ViewServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 172
# File: docs/master/views.md, line: 172
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            // Using class based composers...\n"
"            View::composer('profile', ProfileComposer::class);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 179
# File: docs/master/views.md, line: 179
#, no-wrap
msgid ""
"            // Using closure based composers...\n"
"            View::composer('dashboard', function ($view) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 181
# File: docs/master/views.md, line: 181
#, no-wrap
msgid "> {note} Remember, if you create a new service provider to contain your view composer registrations, you will need to add the service provider to the `providers` array in the `config/app.php` configuration file.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 183
# File: docs/master/views.md, line: 183
msgid "Now that we have registered the composer, the `compose` method of the `App\\View\\Composers\\ProfileComposer` class will be executed each time the `profile` view is being rendered. Let's take a look at an example of the composer class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 187
# File: docs/master/views.md, line: 187
#, no-wrap
msgid "    namespace App\\View\\Composers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 190
# File: docs/master/views.md, line: 190
#, no-wrap
msgid ""
"    use App\\Repositories\\UserRepository;\n"
"    use Illuminate\\View\\View;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 199
# File: docs/master/views.md, line: 199
#, no-wrap
msgid ""
"    class ProfileComposer\n"
"    {\n"
"        /**\n"
"         * The user repository implementation.\n"
"         *\n"
"         * @var \\App\\Repositories\\UserRepository\n"
"         */\n"
"        protected $users;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 211
# File: docs/master/views.md, line: 211
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new profile composer.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            // Dependencies are automatically resolved by the service container...\n"
"            $this->users = $users;\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 223
# File: docs/master/views.md, line: 223
#, no-wrap
msgid ""
"        /**\n"
"         * Bind data to the view.\n"
"         *\n"
"         * @param  \\Illuminate\\View\\View  $view\n"
"         * @return void\n"
"         */\n"
"        public function compose(View $view)\n"
"        {\n"
"            $view->with('count', $this->users->count());\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 225
# File: docs/master/views.md, line: 225
msgid "As you can see, all view composers are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a composer's constructor."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 227
# File: docs/master/views.md, line: 227
#, no-wrap
msgid "<a name=\"attaching-a-composer-to-multiple-views\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/views.md, line: 227
# File: docs/master/views.md, line: 227
#, no-wrap
msgid "Attaching A Composer To Multiple Views"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 230
# File: docs/master/views.md, line: 230
msgid "You may attach a view composer to multiple views at once by passing an array of views as the first argument to the `composer` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 232
# File: docs/master/views.md, line: 232
#, no-wrap
msgid "    use App\\Views\\Composers\\MultiComposer;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 237
# File: docs/master/views.md, line: 237
#, no-wrap
msgid ""
"    View::composer(\n"
"        ['profile', 'dashboard'],\n"
"        MultiComposer::class\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 239
# File: docs/master/views.md, line: 239
msgid "The `composer` method also accepts the `*` character as a wildcard, allowing you to attach a composer to all views:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 243
# File: docs/master/views.md, line: 243
#, no-wrap
msgid ""
"    View::composer('*', function ($view) {\n"
"        //\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 245
# File: docs/master/views.md, line: 245
#, no-wrap
msgid "<a name=\"view-creators\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/views.md, line: 245
# File: docs/master/views.md, line: 245
#, no-wrap
msgid "View Creators"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 248
# File: docs/master/views.md, line: 248
msgid "View \"creators\" are very similar to view composers; however, they are executed immediately after the view is instantiated instead of waiting until the view is about to render. To register a view creator, use the `creator` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 251
# File: docs/master/views.md, line: 251
#, no-wrap
msgid ""
"    use App\\View\\Creators\\ProfileCreator;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 253
# File: docs/master/views.md, line: 253
#, no-wrap
msgid "    View::creator('profile', ProfileCreator::class);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 255
# File: docs/master/views.md, line: 255
#, no-wrap
msgid "<a name=\"optimizing-views\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/views.md, line: 255
# File: docs/master/views.md, line: 255
#, no-wrap
msgid "Optimizing Views"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 258
# File: docs/master/views.md, line: 258
msgid "By default, Blade template views are compiled on demand. When a request is executed that renders a view, Laravel will determine if a compiled version of the view exists. If the file exists, Laravel will then determine if the uncompiled view has been modified more recently than the compiled view. If the compiled view either does not exist, or the uncompiled view has been modified, Laravel will recompile the view."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 260
# File: docs/master/views.md, line: 260
msgid "Compiling views during the request may have a small negative impact on performance, so Laravel provides the `view:cache` Artisan command to precompile all of the views utilized by your application. For increased performance, you may wish to run this command as part of your deployment process:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 262
# File: docs/master/views.md, line: 262
#, no-wrap
msgid "    php artisan view:cache\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 264
# File: docs/master/views.md, line: 264
msgid "You may use the `view:clear` command to clear the view cache:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/views.md, line: 265
# File: docs/master/views.md, line: 265
#, no-wrap
msgid "    php artisan view:clear\n"
msgstr ""
