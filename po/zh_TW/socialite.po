msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/socialite.pot\n"
"X-Crowdin-File-ID: 155\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-06-25 09:23\n"

#: docs/10.x/socialite.md:block 1 (header)
msgid "Laravel Socialite"
msgstr "Laravel Socialite"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr "[安裝](#installation)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Upgrading Socialite](#upgrading-socialite)"
msgstr "[更新 Socialite](#upgrading-socialite)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Authentication](#authentication)"
msgstr "[身份認證](#authentication)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Routing](#routing)"
msgstr "[Routing](#routing)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Authentication & Storage](#authentication-and-storage)"
msgstr "[身份認證與檔案儲存](#authentication-and-storage)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Access Scopes](#access-scopes)"
msgstr "[存取範圍 (Scope)](#access-scopes)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Optional Parameters](#optional-parameters)"
msgstr "[可選參數](#optional-parameters)"

#: docs/10.x/socialite.md:block 2 (unordered list)
msgid "[Retrieving User Details](#retrieving-user-details)"
msgstr "[取得使用者的詳細資訊](#retrieving-user-details)"

#: docs/10.x/socialite.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/socialite.md:block 5 (paragraph)
msgid "In addition to typical, form based authentication, Laravel also provides a simple, convenient way to authenticate with OAuth providers using [Laravel Socialite](https://github.com/laravel/socialite). Socialite currently supports authentication via Facebook, Twitter, LinkedIn, Google, GitHub, GitLab, and Bitbucket."
msgstr "除了一般基於表單的登入方式之外，在 Laravel 中，還可以通過 [Laravel Socialite](https://github.com/laravel/socialite) 來以簡單、方便的方式使用 OAuth 提供者登入。目前 Socialite 支援使用 Facebook、Twitter、LinkedIn、Google、GitHub、GitLab 和 Bitbucket 等服務來進行登入。"

#: docs/10.x/socialite.md:block 6 (quote)
msgid "**Note** Adapters for other platforms are available via the community driven [Socialite Providers](https://socialiteproviders.com/) website."
msgstr "**Note** [Socialite Providers](https://socialiteproviders.com/) 網站上還提供了由社群維護的其他平台的 Adapter。"

#: docs/10.x/socialite.md:block 8 (header)
msgid "Installation"
msgstr "安裝"

#: docs/10.x/socialite.md:block 9 (paragraph)
msgid "To get started with Socialite, use the Composer package manager to add the package to your project's dependencies:"
msgstr "若要開始使用 Socialite，請使用 Composer 套件管理器將 Socialite 套件新增至專案的相依性套件中："

#: docs/10.x/socialite.md:block 10 (code)
msgid "composer require laravel/socialite\n"
msgstr "composer require laravel/socialite\n"

#: docs/10.x/socialite.md:block 12 (header)
msgid "Upgrading Socialite"
msgstr "更新 Socialite"

#: docs/10.x/socialite.md:block 13 (paragraph)
msgid "When upgrading to a new major version of Socialite, it's important that you carefully review [the upgrade guide](https://github.com/laravel/socialite/blob/master/UPGRADE.md)."
msgstr "將 Telescope 升級到新的主要 (Major) 版本時，請務必仔細閱讀[升級指南](https://github.com/laravel/socialite/blob/master/UPGRADE.md)。"

#: docs/10.x/socialite.md:block 15 (header)
msgid "Configuration"
msgstr "設定"

#: docs/10.x/socialite.md:block 16 (paragraph)
msgid "Before using Socialite, you will need to add credentials for the OAuth providers your application utilizes. Typically, these credentials may be retrieved by creating a \"developer application\" within the dashboard of the service you will be authenticating with."
msgstr "在使用 Socialite 之前，需要新增你的網站要使用的 OAuth 提供者憑證 (Credential)。一般來說，可以在要用來登入的服務的儀表板中建立「開發者應用程式」來取得這些憑證。"

#: docs/10.x/socialite.md:block 17 (paragraph)
msgid "These credentials should be placed in your application's `config/services.php` configuration file, and should use the key `facebook`, `twitter` (OAuth 1.0), `twitter-oauth-2` (OAuth 2.0), `linkedin`, `google`, `github`, `gitlab`, or `bitbucket`, depending on the providers your application requires:"
msgstr "請將這些憑證放在專案的 `config/services.php` 設定檔中，並依照你的專案所要使用的 OAuth 提供者，設定 `facebook`、`twitter` (OAuth 1.0)、`twitter-oauth-2` (OAuth 2.0)、`linkedin`、`google`、`github`、`gitlab` 或 `bitbucket` 等相對應的 key："

#: docs/10.x/socialite.md:block 18 (code)
msgid "'github' => [\n"
"    'client_id' => env('GITHUB_CLIENT_ID'),\n"
"    'client_secret' => env('GITHUB_CLIENT_SECRET'),\n"
"    'redirect' => 'http://example.com/callback-url',\n"
"],\n"
msgstr "'github' => [\n"
"    'client_id' => env('GITHUB_CLIENT_ID'),\n"
"    'client_secret' => env('GITHUB_CLIENT_SECRET'),\n"
"    'redirect' => 'http://example.com/callback-url',\n"
"],\n"

#: docs/10.x/socialite.md:block 19 (quote)
msgid "**Note** If the `redirect` option contains a relative path, it will automatically be resolved to a fully qualified URL."
msgstr "**Note** 如果 `redirect` 選項包含相對路徑，則會為自動解析成完整的 URL。"

#: docs/10.x/socialite.md:block 21 (header)
msgid "Authentication"
msgstr "登入"

#: docs/10.x/socialite.md:block 23 (header)
msgid "Routing"
msgstr "Routing"

#: docs/10.x/socialite.md:block 24 (paragraph)
msgid "To authenticate users using an OAuth provider, you will need two routes: one for redirecting the user to the OAuth provider, and another for receiving the callback from the provider after authentication. The example routes below demonstrate the implementation of both routes:"
msgstr "要使用 OAuth 提供者來登入使用者，需要兩個 Route：一個用來將使用者重新導向到 OAuth 提供者，另一個用來接收登入後提供者傳回來的回呼。下面的範例說明如何實作這兩個 Route："

#: docs/10.x/socialite.md:block 25 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"Route::get('/auth/redirect', function () {\n"
"    return Socialite::driver('github')->redirect();\n"
"});\n\n"
"Route::get('/auth/callback', function () {\n"
"    $user = Socialite::driver('github')->user();\n\n"
"    // $user->token\n"
"});\n"
msgstr "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"Route::get('/auth/redirect', function () {\n"
"    return Socialite::driver('github')->redirect();\n"
"});\n\n"
"Route::get('/auth/callback', function () {\n"
"    $user = Socialite::driver('github')->user();\n\n"
"    // $user->token\n"
"});\n"

#: docs/10.x/socialite.md:block 26 (paragraph)
msgid "The `redirect` method provided by the `Socialite` facade takes care of redirecting the user to the OAuth provider, while the `user` method will examine the incoming request and retrieve the user's information from the provider after they have approved the authentication request."
msgstr "`Socialite` Facade 上的 `redirect` 方法負責將使用者重新導向到 OAuth 提供者。當使用者同意登入要求後，`user` 方法會檢查傳入的 Request，並向 OAuth 提供者取得使用者的資訊。"

#: docs/10.x/socialite.md:block 28 (header)
msgid "Authentication & Storage"
msgstr "登入與檔案儲存"

#: docs/10.x/socialite.md:block 29 (paragraph)
msgid "Once the user has been retrieved from the OAuth provider, you may determine if the user exists in your application's database and [authenticate the user](/docs/{{version}}/authentication#authenticate-a-user-instance). If the user does not exist in your application's database, you will typically create a new record in your database to represent the user:"
msgstr "從 OAuth Provider 取得使用者後，就可以判斷該使用者是否存在我們的網站中，並[登入該使用者](/docs/{{version}}/authentication#authenticate-a-user-instance)。如果使用者不存在網站資料庫中，可以在資料庫中建立："

#: docs/10.x/socialite.md:block 30 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Auth;\n"
"use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"Route::get('/auth/callback', function () {\n"
"    $githubUser = Socialite::driver('github')->user();\n\n"
"    $user = User::updateOrCreate([\n"
"        'github_id' => $githubUser->id,\n"
"    ], [\n"
"        'name' => $githubUser->name,\n"
"        'email' => $githubUser->email,\n"
"        'github_token' => $githubUser->token,\n"
"        'github_refresh_token' => $githubUser->refreshToken,\n"
"    ]);\n\n"
"    Auth::login($user);\n\n"
"    return redirect('/dashboard');\n"
"});\n"
msgstr "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Auth;\n"
"use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"Route::get('/auth/callback', function () {\n"
"    $githubUser = Socialite::driver('github')->user();\n\n"
"    $user = User::updateOrCreate([\n"
"        'github_id' => $githubUser->id,\n"
"    ], [\n"
"        'name' => $githubUser->name,\n"
"        'email' => $githubUser->email,\n"
"        'github_token' => $githubUser->token,\n"
"        'github_refresh_token' => $githubUser->refreshToken,\n"
"    ]);\n\n"
"    Auth::login($user);\n\n"
"    return redirect('/dashboard');\n"
"});\n"

#: docs/10.x/socialite.md:block 31 (quote)
msgid "**Note** For more information regarding what user information is available from specific OAuth providers, please consult the documentation on [retrieving user details](#retrieving-user-details)."
msgstr "**Note** 有關各個 OAuth Provider 所提供的使用者資訊，請參考說明文件中有關[取得使用者詳細資料](#retrieving-user-details)的部分。"

#: docs/10.x/socialite.md:block 33 (header)
msgid "Access Scopes"
msgstr "Access Scope (存取範圍)"

#: docs/10.x/socialite.md:block 34 (paragraph)
msgid "Before redirecting the user, you may use the `scopes` method to specify the \"scopes\" that should be included in the authentication request. This method will merge all previously specified scopes with the scopes that you specify:"
msgstr "在為使用者重新導向前，我們可以使用 `scopes` 方法來指定這個登入驗證 Request 中要包含的「Scope (範圍)」。此方法會將所指定的 Scopes 與先前指定的所有 Scopes 合併起來："

#: docs/10.x/socialite.md:block 35 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"return Socialite::driver('github')\n"
"    ->scopes(['read:user', 'public_repo'])\n"
"    ->redirect();\n"
msgstr "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"return Socialite::driver('github')\n"
"    ->scopes(['read:user', 'public_repo'])\n"
"    ->redirect();\n"

#: docs/10.x/socialite.md:block 36 (paragraph)
msgid "You can overwrite all existing scopes on the authentication request using the `setScopes` method:"
msgstr "可以使用 `setScopes` 方法來複寫登入驗證 Request 上的所有已存在的 Scopes："

#: docs/10.x/socialite.md:block 37 (code)
msgid "return Socialite::driver('github')\n"
"    ->setScopes(['read:user', 'public_repo'])\n"
"    ->redirect();\n"
msgstr ""

#: docs/10.x/socialite.md:block 39 (header)
msgid "Optional Parameters"
msgstr ""

#: docs/10.x/socialite.md:block 40 (paragraph)
msgid "A number of OAuth providers support other optional parameters on the redirect request. To include any optional parameters in the request, call the `with` method with an associative array:"
msgstr ""

#: docs/10.x/socialite.md:block 41 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"return Socialite::driver('google')\n"
"    ->with(['hd' => 'example.com'])\n"
"    ->redirect();\n"
msgstr ""

#: docs/10.x/socialite.md:block 42 (quote)
msgid "**Warning** When using the `with` method, be careful not to pass any reserved keywords such as `state` or `response_type`."
msgstr ""

#: docs/10.x/socialite.md:block 44 (header)
msgid "Retrieving User Details"
msgstr ""

#: docs/10.x/socialite.md:block 45 (paragraph)
msgid "After the user is redirected back to your application's authentication callback route, you may retrieve the user's details using Socialite's `user` method. The user object returned by the `user` method provides a variety of properties and methods you may use to store information about the user in your own database."
msgstr ""

#: docs/10.x/socialite.md:block 46 (paragraph)
msgid "Differing properties and methods may be available on this object depending on whether the OAuth provider you are authenticating with supports OAuth 1.0 or OAuth 2.0:"
msgstr ""

#: docs/10.x/socialite.md:block 47 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"Route::get('/auth/callback', function () {\n"
"    $user = Socialite::driver('github')->user();\n\n"
"    // OAuth 2.0 providers...\n"
"    $token = $user->token;\n"
"    $refreshToken = $user->refreshToken;\n"
"    $expiresIn = $user->expiresIn;\n\n"
"    // OAuth 1.0 providers...\n"
"    $token = $user->token;\n"
"    $tokenSecret = $user->tokenSecret;\n\n"
"    // All providers...\n"
"    $user->getId();\n"
"    $user->getNickname();\n"
"    $user->getName();\n"
"    $user->getEmail();\n"
"    $user->getAvatar();\n"
"});\n"
msgstr ""

#: docs/10.x/socialite.md:block 49 (header)
msgid "Retrieving User Details From A Token (OAuth2)"
msgstr ""

#: docs/10.x/socialite.md:block 50 (paragraph)
msgid "If you already have a valid access token for a user, you can retrieve their user details using Socialite's `userFromToken` method:"
msgstr ""

#: docs/10.x/socialite.md:block 51 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"$user = Socialite::driver('github')->userFromToken($token);\n"
msgstr ""

#: docs/10.x/socialite.md:block 53 (header)
msgid "Retrieving User Details From A Token And Secret (OAuth1)"
msgstr ""

#: docs/10.x/socialite.md:block 54 (paragraph)
msgid "If you already have a valid token and secret for a user, you can retrieve their user details using Socialite's `userFromTokenAndSecret` method:"
msgstr ""

#: docs/10.x/socialite.md:block 55 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"$user = Socialite::driver('twitter')->userFromTokenAndSecret($token, $secret);\n"
msgstr ""

#: docs/10.x/socialite.md:block 57 (header)
msgid "Stateless Authentication"
msgstr ""

#: docs/10.x/socialite.md:block 58 (paragraph)
msgid "The `stateless` method may be used to disable session state verification. This is useful when adding social authentication to a stateless API that does not utilize cookie based sessions:"
msgstr ""

#: docs/10.x/socialite.md:block 59 (code)
msgid "use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"return Socialite::driver('google')->stateless()->user();\n"
msgstr ""

#: docs/10.x/socialite.md:block 60 (quote)
msgid "**Warning** Stateless authentication is not available for the Twitter OAuth 1.0 driver."
msgstr ""

#: docs/8.x/socialite.md:block 5 (paragraph)
msgid "In addition to typical, form based authentication, Laravel also provides a simple, convenient way to authenticate with OAuth providers using [Laravel Socialite](https://github.com/laravel/socialite). Socialite currently supports authentication with Facebook, Twitter, LinkedIn, Google, GitHub, GitLab, and Bitbucket."
msgstr ""

#: docs/8.x/socialite.md:block 6 (quote)
msgid "{tip} Adapters for other platforms are listed at the community driven [Socialite Providers](https://socialiteproviders.com/) website."
msgstr ""

#: docs/8.x/socialite.md:block 16 (paragraph)
msgid "Before using Socialite, you will need to add credentials for the OAuth providers your application utilizes. These credentials should be placed in your application's `config/services.php` configuration file, and should use the key `facebook`, `twitter`, `linkedin`, `google`, `github`, `gitlab`, or `bitbucket`, depending on the providers your application requires:"
msgstr ""

#: docs/8.x/socialite.md:block 18 (quote)
msgid "{tip} If the `redirect` option contains a relative path, it will automatically be resolved to a fully qualified URL."
msgstr ""

#: docs/8.x/socialite.md:block 23 (paragraph)
msgid "To authenticate users using an OAuth provider, you will need two routes: one for redirecting the user to the OAuth provider, and another for receiving the callback from the provider after authentication. The example controller below demonstrates the implementation of both routes:"
msgstr ""

#: docs/8.x/socialite.md:block 25 (paragraph)
msgid "The `redirect` method provided by the `Socialite` facade takes care of redirecting the user to the OAuth provider, while the `user` method will read the incoming request and retrieve the user's information from the provider after they are authenticated."
msgstr ""

#: docs/8.x/socialite.md:block 29 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Auth;\n"
"use Laravel\\Socialite\\Facades\\Socialite;\n\n"
"Route::get('/auth/callback', function () {\n"
"    $githubUser = Socialite::driver('github')->user();\n\n"
"    $user = User::where('github_id', $githubUser->id)->first();\n\n"
"    if ($user) {\n"
"        $user->update([\n"
"            'github_token' => $githubUser->token,\n"
"            'github_refresh_token' => $githubUser->refreshToken,\n"
"        ]);\n"
"    } else {\n"
"        $user = User::create([\n"
"            'name' => $githubUser->name,\n"
"            'email' => $githubUser->email,\n"
"            'github_id' => $githubUser->id,\n"
"            'github_token' => $githubUser->token,\n"
"            'github_refresh_token' => $githubUser->refreshToken,\n"
"        ]);\n"
"    }\n\n"
"    Auth::login($user);\n\n"
"    return redirect('/dashboard');\n"
"});\n"
msgstr ""

#: docs/8.x/socialite.md:block 30 (quote)
msgid "{tip} For more information regarding what user information is available from specific OAuth providers, please consult the documentation on [retrieving user details](#retrieving-user-details)."
msgstr ""

#: docs/8.x/socialite.md:block 33 (paragraph)
msgid "Before redirecting the user, you may also add additional \"scopes\" to the authentication request using the `scopes` method. This method will merge all existing scopes with the scopes that you supply:"
msgstr ""

#: docs/8.x/socialite.md:block 39 (paragraph)
msgid "A number of OAuth providers support optional parameters in the redirect request. To include any optional parameters in the request, call the `with` method with an associative array:"
msgstr ""

#: docs/8.x/socialite.md:block 41 (quote)
msgid "{note} When using the `with` method, be careful not to pass any reserved keywords such as `state` or `response_type`."
msgstr ""

#: docs/8.x/socialite.md:block 44 (paragraph)
msgid "After the user is redirected back to your authentication callback route, you may retrieve the user's details using Socialite's `user` method. The user object returned by the `user` method provides a variety of properties and methods you may use to store information about the user in your own database. Different properties and methods may be available depending on whether the OAuth provider you are authenticating with supports OAuth 1.0 or OAuth 2.0:"
msgstr ""

#: docs/8.x/socialite.md:block 48 (paragraph)
msgid "If you already have a valid access token for a user, you can retrieve their details using Socialite's `userFromToken` method:"
msgstr ""

#: docs/8.x/socialite.md:block 52 (paragraph)
msgid "If you already have a valid token and secret for a user, you can retrieve their details using Socialite's `userFromTokenAndSecret` method:"
msgstr ""

#: docs/8.x/socialite.md:block 56 (paragraph)
msgid "The `stateless` method may be used to disable session state verification. This is useful when adding social authentication to an API:"
msgstr ""

#: docs/8.x/socialite.md:block 58 (quote)
msgid "{note} Stateless authentication is not available for the Twitter driver, which uses OAuth 1.0 for authentication."
msgstr ""

