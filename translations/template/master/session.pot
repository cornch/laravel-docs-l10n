# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-25 16:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/session.md:1
#, no-wrap
msgid "HTTP Session"
msgstr ""

#. type: Plain text
#: docs/master/session.md:16
#, no-wrap
msgid ""
"- [Introduction](#introduction)\n"
"    - [Configuration](#configuration)\n"
"    - [Driver Prerequisites](#driver-prerequisites)\n"
"- [Interacting With The Session](#interacting-with-the-session)\n"
"    - [Retrieving Data](#retrieving-data)\n"
"    - [Storing Data](#storing-data)\n"
"    - [Flash Data](#flash-data)\n"
"    - [Deleting Data](#deleting-data)\n"
"    - [Regenerating The Session ID](#regenerating-the-session-id)\n"
"- [Session Blocking](#session-blocking)\n"
"- [Adding Custom Session Drivers](#adding-custom-session-drivers)\n"
"    - [Implementing The Driver](#implementing-the-driver)\n"
"    - [Registering The Driver](#registering-the-driver)\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:18
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/session.md:18
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/session.md:21
msgid ""
"Since HTTP driven applications are stateless, sessions provide a way to "
"store information about the user across multiple requests. That user "
"information is typically placed in a persistent store / backend that can be "
"accessed from subsequent requests."
msgstr ""

#. type: Plain text
#: docs/master/session.md:23
msgid ""
"Laravel ships with a variety of session backends that are accessed through "
"an expressive, unified API. Support for popular backends such as "
"[Memcached](https://memcached.org), [Redis](https://redis.io), and databases "
"is included."
msgstr ""

#. type: Plain text
#: docs/master/session.md:25
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:25
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/master/session.md:28
msgid ""
"Your application's session configuration file is stored at "
"`config/session.php`. Be sure to review the options available to you in this "
"file. By default, Laravel is configured to use the `file` session driver, "
"which will work well for many applications. If your application will be load "
"balanced across multiple web servers, you should choose a centralized store "
"that all servers can access, such as Redis or a database."
msgstr ""

#. type: Plain text
#: docs/master/session.md:30
msgid ""
"The session `driver` configuration option defines where session data will be "
"stored for each request. Laravel ships with several great drivers out of the "
"box:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:39
#, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- `file` - sessions are stored in `storage/framework/sessions`.\n"
"- `cookie` - sessions are stored in secure, encrypted cookies.\n"
"- `database` - sessions are stored in a relational database.\n"
"- `memcached` / `redis` - sessions are stored in one of these fast, cache "
"based stores.\n"
"- `dynamodb` - sessions are stored in AWS DynamoDB.\n"
"- `array` - sessions are stored in a PHP array and will not be persisted.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:41
#, no-wrap
msgid ""
"> {tip} The array driver is primarily used during "
"[testing](/docs/{{version}}/testing) and prevents the data stored in the "
"session from being persisted.\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:43
#, no-wrap
msgid "<a name=\"driver-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:43
#, no-wrap
msgid "Driver Prerequisites"
msgstr ""

#. type: Plain text
#: docs/master/session.md:46
#, no-wrap
msgid "<a name=\"database\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:46
#, no-wrap
msgid "Database"
msgstr ""

#. type: Plain text
#: docs/master/session.md:49
msgid ""
"When using the `database` session driver, you will need to create a table to "
"contain the session records. An example `Schema` declaration for the table "
"may be found below:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:58
#, no-wrap
msgid ""
"    Schema::create('sessions', function ($table) {\n"
"        $table->string('id')->primary();\n"
"        $table->foreignId('user_id')->nullable()->index();\n"
"        $table->string('ip_address', 45)->nullable();\n"
"        $table->text('user_agent')->nullable();\n"
"        $table->text('payload');\n"
"        $table->integer('last_activity')->index();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:60
msgid ""
"You may use the `session:table` Artisan command to generate this "
"migration. To learn more about database migrations, you may consult the "
"complete [migration documentation](/docs/{{version}}/migrations):"
msgstr ""

#. type: Plain text
#: docs/master/session.md:62
#, no-wrap
msgid "    php artisan session:table\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:64
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:66
#, no-wrap
msgid "<a name=\"redis\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:66
#, no-wrap
msgid "Redis"
msgstr ""

#. type: Plain text
#: docs/master/session.md:69
msgid ""
"Before using Redis sessions with Laravel, you will need to either install "
"the PhpRedis PHP extension via PECL or install the `predis/predis` package "
"(~1.0) via Composer. For more information on configuring Redis, consult "
"Laravel's [Redis documentation](/docs/{{version}}/redis#configuration)."
msgstr ""

#. type: Plain text
#: docs/master/session.md:71
#, no-wrap
msgid ""
"> {tip} In the `session` configuration file, the `connection` option may be "
"used to specify which Redis connection is used by the session.\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:73
#, no-wrap
msgid "<a name=\"interacting-with-the-session\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/session.md:73
#, no-wrap
msgid "Interacting With The Session"
msgstr ""

#. type: Plain text
#: docs/master/session.md:76
#, no-wrap
msgid "<a name=\"retrieving-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:76
#, no-wrap
msgid "Retrieving Data"
msgstr ""

#. type: Plain text
#: docs/master/session.md:79
msgid ""
"There are two primary ways of working with session data in Laravel: the "
"global `session` helper and via a `Request` instance. First, let's look at "
"accessing the session via a `Request` instance, which can be type-hinted on "
"a route closure or controller method. Remember, controller method "
"dependencies are automatically injected via the Laravel [service "
"container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/master/session.md:81 docs/master/session.md:275 docs/master/session.md:307
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:83
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:86
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:99
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  Request  $request\n"
"         * @param  int  $id\n"
"         * @return Response\n"
"         */\n"
"        public function show(Request $request, $id)\n"
"        {\n"
"            $value = $request->session()->get('key');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:103
#, no-wrap
msgid ""
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:105
msgid ""
"When you retrieve an item from the session, you may also pass a default "
"value as the second argument to the `get` method. This default value will be "
"returned if the specified key does not exist in the session. If you pass a "
"closure as the default value to the `get` method and the requested key does "
"not exist, the closure will be executed and its result returned:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:107
#, no-wrap
msgid "    $value = $request->session()->get('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:111
#, no-wrap
msgid ""
"    $value = $request->session()->get('key', function () {\n"
"        return 'default';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:113
#, no-wrap
msgid "<a name=\"the-global-session-helper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:113
#, no-wrap
msgid "The Global Session Helper"
msgstr ""

#. type: Plain text
#: docs/master/session.md:116
msgid ""
"You may also use the global `session` PHP function to retrieve and store "
"data in the session. When the `session` helper is called with a single, "
"string argument, it will return the value of that session key. When the "
"helper is called with an array of key / value pairs, those values will be "
"stored in the session:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:120
#, no-wrap
msgid ""
"    Route::get('/home', function () {\n"
"        // Retrieve a piece of data from the session...\n"
"        $value = session('key');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:123
#, no-wrap
msgid ""
"        // Specifying a default value...\n"
"        $value = session('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:127
#, no-wrap
msgid ""
"        // Store a piece of data in the session...\n"
"        session(['key' => 'value']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:129
#, no-wrap
msgid ""
"> {tip} There is little practical difference between using the session via "
"an HTTP request instance versus using the global `session` helper. Both "
"methods are [testable](/docs/{{version}}/testing) via the `assertSessionHas` "
"method which is available in all of your test cases.\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:131
#, no-wrap
msgid "<a name=\"retrieving-all-session-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:131
#, no-wrap
msgid "Retrieving All Session Data"
msgstr ""

#. type: Plain text
#: docs/master/session.md:134
msgid ""
"If you would like to retrieve all the data in the session, you may use the "
"`all` method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:136
#, no-wrap
msgid "    $data = $request->session()->all();\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:138
#, no-wrap
msgid "<a name=\"determining-if-an-item-exists-in-the-session\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:138
#, no-wrap
msgid "Determining If An Item Exists In The Session"
msgstr ""

#. type: Plain text
#: docs/master/session.md:141
msgid ""
"To determine if an item is present in the session, you may use the `has` "
"method. The `has` method returns `true` if the item is present and is not "
"`null`:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:145
#, no-wrap
msgid ""
"    if ($request->session()->has('users')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:147
msgid ""
"To determine if an item is present in the session, even if its value is "
"`null`, you may use the `exists` method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:151
#, no-wrap
msgid ""
"    if ($request->session()->exists('users')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:153
msgid ""
"To determine if an item is not present in the session, you may use the "
"`missing` method. The `missing` method returns `true` if the item is `null` "
"or if the item is not present:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:157
#, no-wrap
msgid ""
"    if ($request->session()->missing('users')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:159
#, no-wrap
msgid "<a name=\"storing-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:159
#, no-wrap
msgid "Storing Data"
msgstr ""

#. type: Plain text
#: docs/master/session.md:162
msgid ""
"To store data in the session, you will typically use the request instance's "
"`put` method or the global `session` helper:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:165
#, no-wrap
msgid ""
"    // Via a request instance...\n"
"    $request->session()->put('key', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:168
#, no-wrap
msgid ""
"    // Via the global \"session\" helper...\n"
"    session(['key' => 'value']);\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:170
#, no-wrap
msgid "<a name=\"pushing-to-array-session-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:170
#, no-wrap
msgid "Pushing To Array Session Values"
msgstr ""

#. type: Plain text
#: docs/master/session.md:173
msgid ""
"The `push` method may be used to push a new value onto a session value that "
"is an array. For example, if the `user.teams` key contains an array of team "
"names, you may push a new value onto the array like so:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:175
#, no-wrap
msgid "    $request->session()->push('user.teams', 'developers');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:177
#, no-wrap
msgid "<a name=\"retrieving-deleting-an-item\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:177
#, no-wrap
msgid "Retrieving & Deleting An Item"
msgstr ""

#. type: Plain text
#: docs/master/session.md:180
msgid ""
"The `pull` method will retrieve and delete an item from the session in a "
"single statement:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:182
#, no-wrap
msgid "    $value = $request->session()->pull('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:184
#, no-wrap
msgid "<a name=\"#incrementing-and-decrementing-session-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:184
#, no-wrap
msgid "Incrementing & Decrementing Session Values"
msgstr ""

#. type: Plain text
#: docs/master/session.md:187
msgid ""
"If your session data contains an integer you wish to increment or decrement, "
"you may use the `increment` and `decrement` methods:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:189
#, no-wrap
msgid "    $request->session()->increment('count');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:191
#, no-wrap
msgid "    $request->session()->increment('count', $incrementBy = 2);\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:193
#, no-wrap
msgid "    $request->session()->decrement('count');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:195
#, no-wrap
msgid "    $request->session()->decrement('count', $decrementBy = 2);\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:197
#, no-wrap
msgid "<a name=\"flash-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:197
#, no-wrap
msgid "Flash Data"
msgstr ""

#. type: Plain text
#: docs/master/session.md:200
msgid ""
"Sometimes you may wish to store items in the session for the next "
"request. You may do so using the `flash` method. Data stored in the session "
"using this method will be available immediately and during the subsequent "
"HTTP request. After the subsequent HTTP request, the flashed data will be "
"deleted. Flash data is primarily useful for short-lived status messages:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:202
#, no-wrap
msgid "    $request->session()->flash('status', 'Task was successful!');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:204
msgid ""
"If you need to persist your flash data for several requests, you may use the "
"`reflash` method, which will keep all of the flash data for an additional "
"request. If you only need to keep specific flash data, you may use the "
"`keep` method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:206
#, no-wrap
msgid "    $request->session()->reflash();\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:208
#, no-wrap
msgid "    $request->session()->keep(['username', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:210
msgid ""
"To persist your flash data only for the current request, you may use the "
"`now` method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:212
#, no-wrap
msgid "    $request->session()->now('status', 'Task was successful!');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:214
#, no-wrap
msgid "<a name=\"deleting-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:214
#, no-wrap
msgid "Deleting Data"
msgstr ""

#. type: Plain text
#: docs/master/session.md:217
msgid ""
"The `forget` method will remove a piece of data from the session. If you "
"would like to remove all data from the session, you may use the `flush` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:220
#, no-wrap
msgid ""
"    // Forget a single key...\n"
"    $request->session()->forget('name');\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:223
#, no-wrap
msgid ""
"    // Forget multiple keys...\n"
"    $request->session()->forget(['name', 'status']);\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:225
#, no-wrap
msgid "    $request->session()->flush();\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:227
#, no-wrap
msgid "<a name=\"regenerating-the-session-id\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/session.md:227
#, no-wrap
msgid "Regenerating The Session ID"
msgstr ""

#. type: Plain text
#: docs/master/session.md:230
msgid ""
"Regenerating the session ID is often done in order to prevent malicious "
"users from exploiting a [session "
"fixation](https://owasp.org/www-community/attacks/Session_fixation) attack "
"on your application."
msgstr ""

#. type: Plain text
#: docs/master/session.md:232
msgid ""
"Laravel automatically regenerates the session ID during authentication if "
"you are using one of the Laravel [application starter "
"kits](/docs/{{version}}/starter-kits) or [Laravel "
"Fortify](/docs/{{version}}/fortify); however, if you need to manually "
"regenerate the session ID, you may use the `regenerate` method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:234
#, no-wrap
msgid "    $request->session()->regenerate();\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:236
msgid ""
"If you need to regenerate the session ID and remove all data from the "
"session in a single statement, you may use the `invalidate` method:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:238
#, no-wrap
msgid "    $request->session()->invalidate();\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:240
#, no-wrap
msgid "<a name=\"session-blocking\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/session.md:240
#, no-wrap
msgid "Session Blocking"
msgstr ""

#. type: Plain text
#: docs/master/session.md:243
#, no-wrap
msgid ""
"> {note} To utilize session blocking, your application must be using a cache "
"driver that supports [atomic "
"locks](/docs/{{version}}/cache#atomic-locks). Currently, those cache drivers "
"include the `memcached`, `dynamodb`, `redis`, and `database` drivers. In "
"addition, you may not use the `cookie` session driver.\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:245
msgid ""
"By default, Laravel allows requests using the same session to execute "
"concurrently. So, for example, if you use a JavaScript HTTP library to make "
"two HTTP requests to your application, they will both execute at the same "
"time. For many applications, this is not a problem; however, session data "
"loss can occur in a small subset of applications that make concurrent "
"requests to two different application endpoints which both write data to the "
"session."
msgstr ""

#. type: Plain text
#: docs/master/session.md:247
msgid ""
"To mitigate this, Laravel provides functionality that allows you to limit "
"concurrent requests for a given session. To get started, you may simply "
"chain the `block` method onto your route definition. In this example, an "
"incoming request to the `/profile` endpoint would acquire a session "
"lock. While this lock is being held, any incoming requests to the `/profile` "
"or `/order` endpoints which share the same session ID will wait for the "
"first request to finish executing before continuing their execution:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:251
#, no-wrap
msgid ""
"    Route::post('/profile', function () {\n"
"        //\n"
"    })->block($lockSeconds = 10, $waitSeconds = 10)\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:255
#, no-wrap
msgid ""
"    Route::post('/order', function () {\n"
"        //\n"
"    })->block($lockSeconds = 10, $waitSeconds = 10)\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:257
msgid ""
"The `block` method accepts two optional arguments. The first argument "
"accepted by the `block` method is the maximum number of seconds the session "
"lock should be held for before it is released. Of course, if the request "
"finishes executing before this time the lock will be released earlier."
msgstr ""

#. type: Plain text
#: docs/master/session.md:259
msgid ""
"The second argument accepted by the `block` method is the number of seconds "
"a request should wait while attempting to obtain a session lock. An "
"`Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown if the "
"request is unable to obtain a session lock within the given number of "
"seconds."
msgstr ""

#. type: Plain text
#: docs/master/session.md:261
msgid ""
"If neither of these arguments is passed, the lock will be obtained for a "
"maximum of 10 seconds and requests will wait a maximum of 10 seconds while "
"attempting to obtain a lock:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:265
#, no-wrap
msgid ""
"    Route::post('/profile', function () {\n"
"        //\n"
"    })->block()\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:267
#, no-wrap
msgid "<a name=\"adding-custom-session-drivers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/session.md:267
#, no-wrap
msgid "Adding Custom Session Drivers"
msgstr ""

#. type: Plain text
#: docs/master/session.md:270
#, no-wrap
msgid "<a name=\"implementing-the-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:270
#, no-wrap
msgid "Implementing The Driver"
msgstr ""

#. type: Plain text
#: docs/master/session.md:273
msgid ""
"If none of the existing session drivers fit your application's needs, "
"Laravel makes it possible to write your own session handler. Your custom "
"session driver should implement PHP's built-in "
"`SessionHandlerInterface`. This interface contains just a few simple "
"methods. A stubbed MongoDB implementation looks like the following:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:277
#, no-wrap
msgid "    namespace App\\Extensions;\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:287
#, no-wrap
msgid ""
"    class MongoSessionHandler implements \\SessionHandlerInterface\n"
"    {\n"
"        public function open($savePath, $sessionName) {}\n"
"        public function close() {}\n"
"        public function read($sessionId) {}\n"
"        public function write($sessionId, $data) {}\n"
"        public function destroy($sessionId) {}\n"
"        public function gc($lifetime) {}\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:289
#, no-wrap
msgid ""
"> {tip} Laravel does not ship with a directory to contain your "
"extensions. You are free to place them anywhere you like. In this example, "
"we have created an `Extensions` directory to house the "
"`MongoSessionHandler`.\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:291
msgid ""
"Since the purpose of these methods is not readily understandable, let's "
"quickly cover what each of the methods do:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:300
#, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- The `open` method would typically be used in file based session store "
"systems. Since Laravel ships with a `file` session driver, you will rarely "
"need to put anything in this method. You can simply leave this method "
"empty.\n"
"- The `close` method, like the `open` method, can also usually be "
"disregarded. For most drivers, it is not needed.\n"
"- The `read` method should return the string version of the session data "
"associated with the given `$sessionId`. There is no need to do any "
"serialization or other encoding when retrieving or storing session data in "
"your driver, as Laravel will perform the serialization for you.\n"
"- The `write` method should write the given `$data` string associated with "
"the `$sessionId` to some persistent storage system, such as MongoDB or "
"another storage system of your choice.  Again, you should not perform any "
"serialization - Laravel will have already handled that for you.\n"
"- The `destroy` method should remove the data associated with the "
"`$sessionId` from persistent storage.\n"
"- The `gc` method should destroy all session data that is older than the "
"given `$lifetime`, which is a UNIX timestamp. For self-expiring systems like "
"Memcached and Redis, this method may be left empty.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:302
#, no-wrap
msgid "<a name=\"registering-the-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/session.md:302
#, no-wrap
msgid "Registering The Driver"
msgstr ""

#. type: Plain text
#: docs/master/session.md:305
msgid ""
"Once your driver has been implemented, you are ready to register it with "
"Laravel. To add additional drivers to Laravel's session backend, you may use "
"the `extend` method provided by the `Session` "
"[facade](/docs/{{version}}/facades). You should call the `extend` method "
"from the `boot` method of a [service "
"provider](/docs/{{version}}/providers). You may do this from the existing "
"`App\\Providers\\AppServiceProvider` or create an entirely new provider:"
msgstr ""

#. type: Plain text
#: docs/master/session.md:309
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:313
#, no-wrap
msgid ""
"    use App\\Extensions\\MongoSessionHandler;\n"
"    use Illuminate\\Support\\Facades\\Session;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:325
#, no-wrap
msgid ""
"    class SessionServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:339
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Session::extend('mongo', function ($app) {\n"
"                // Return an implementation of SessionHandlerInterface...\n"
"                return new MongoSessionHandler;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/session.md:340
msgid ""
"Once the session driver has been registered, you may use the `mongo` driver "
"in your `config/session.php` configuration file."
msgstr ""
