msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/pulse.pot\n"
"X-Crowdin-File-ID: 196\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-06-30 09:02\n"

#: docs/10.x/pulse.md:block 1 (header)
msgid "Laravel Pulse"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Dashboard](#dashboard)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Authorization](#dashboard-authorization)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Customization](#dashboard-customization)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Resolving Users](#dashboard-resolving-users)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Cards](#dashboard-cards)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Capturing Entries](#capturing-entries)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Recorders](#recorders)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Filtering](#filtering)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Performance](#performance)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Using a Different Database](#using-a-different-database)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Redis Ingest](#ingest)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Sampling](#sampling)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Trimming](#trimming)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Handling Pulse Exceptions](#pulse-exceptions)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Custom Cards](#custom-cards)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Card Components](#custom-card-components)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Styling](#custom-card-styling)"
msgstr ""

#: docs/10.x/pulse.md:block 2 (unordered list)
msgid "[Data Capture and Aggregation](#custom-card-data)"
msgstr ""

#: docs/10.x/pulse.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/pulse.md:block 5 (paragraph)
msgid "[Laravel Pulse](https://github.com/laravel/pulse) delivers at-a-glance insights into your application's performance and usage. With Pulse, you can track down bottlenecks like slow jobs and endpoints, find your most active users, and more."
msgstr ""

#: docs/10.x/pulse.md:block 6 (paragraph)
msgid "For in-depth debugging of individual events, check out [Laravel Telescope](/docs/{{version}}/telescope)."
msgstr ""

#: docs/10.x/pulse.md:block 8 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/pulse.md:block 9 (quote)
msgid "[!WARNING] Pulse's first-party storage implementation currently requires a MySQL or PostgreSQL database. If you are using a different database engine, you will need a separate MySQL or PostgreSQL database for your Pulse data."
msgstr ""

#: docs/10.x/pulse.md:block 10 (paragraph)
msgid "Since Pulse is currently in beta, you may need to adjust your application's `composer.json` file to allow beta package releases to be installed:"
msgstr ""

#: docs/10.x/pulse.md:block 11 (code)
msgid "\"minimum-stability\": \"beta\",\n"
"\"prefer-stable\": true\n"
msgstr ""

#: docs/10.x/pulse.md:block 12 (paragraph)
msgid "Then, you may use the Composer package manager to install Pulse into your Laravel project:"
msgstr ""

#: docs/10.x/pulse.md:block 13 (code)
msgid "composer require laravel/pulse\n"
msgstr ""

#: docs/10.x/pulse.md:block 14 (paragraph)
msgid "Next, you should publish the Pulse configuration and migration files using the `vendor:publish` Artisan command:"
msgstr ""

#: docs/10.x/pulse.md:block 15 (code)
msgid "php artisan vendor:publish --provider=\"Laravel\\Pulse\\PulseServiceProvider\"\n"
msgstr ""

#: docs/10.x/pulse.md:block 16 (paragraph)
msgid "Finally, you should run the `migrate` command in order to create the tables needed to store Pulse's data:"
msgstr ""

#: docs/10.x/pulse.md:block 17 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/pulse.md:block 18 (paragraph)
msgid "Once Pulse's database migrations have been run, you may access the Pulse dashboard via the `/pulse` route."
msgstr ""

#: docs/10.x/pulse.md:block 19 (quote)
msgid "[!NOTE] If you do not want to store Pulse data in your application's primary database, you may [specify a dedicated database connection](#using-a-different-database)."
msgstr ""

#: docs/10.x/pulse.md:block 21 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/pulse.md:block 22 (paragraph)
msgid "Many of Pulse's configuration options can be controlled using environment variables. To see the available options, register new recorders, or configure advanced options, you may publish the `config/pulse.php` configuration file:"
msgstr ""

#: docs/10.x/pulse.md:block 23 (code)
msgid "php artisan vendor:publish --tag=pulse-config\n"
msgstr ""

#: docs/10.x/pulse.md:block 25 (header)
msgid "Dashboard"
msgstr ""

#: docs/10.x/pulse.md:block 27 (header)
msgid "Authorization"
msgstr ""

#: docs/10.x/pulse.md:block 28 (paragraph)
msgid "The Pulse dashboard may be accessed via the `/pulse` route. By default, you will only be able to access this dashboard in the `local` environment, so you will need to configure authorization for your production environments by customizing the `'viewPulse'` authorization gate. You can accomplish this within your application's `app/Providers/AuthServiceProvider.php` file:"
msgstr ""

#: docs/10.x/pulse.md:block 29 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('viewPulse', function (User $user) {\n"
"        return $user->isAdmin();\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pulse.md:block 31 (header)
msgid "Customization"
msgstr ""

#: docs/10.x/pulse.md:block 32 (paragraph)
msgid "The Pulse dashboard cards and layout may be configured by publishing the dashboard view. The dashboard view will be published to `resources/views/vendor/pulse/dashboard.blade.php`:"
msgstr ""

#: docs/10.x/pulse.md:block 33 (code)
msgid "php artisan vendor:publish --tag=pulse-dashboard\n"
msgstr ""

#: docs/10.x/pulse.md:block 34 (paragraph)
msgid "The dashboard is powered by [Livewire](https://livewire.laravel.com/), and allows you to customize the cards and layout without needing to rebuild any JavaScript assets."
msgstr ""

#: docs/10.x/pulse.md:block 35 (paragraph)
msgid "Within this file, the `<x-pulse>` component is responsible for rendering the dashboard and provides a grid layout for the cards. If you would like the dashboard to span the full width of the screen, you may provide the `full-width` prop to the component:"
msgstr ""

#: docs/10.x/pulse.md:block 36 (code)
msgid "<x-pulse full-width>\n"
"    ...\n"
"</x-pulse>\n"
msgstr ""

#: docs/10.x/pulse.md:block 37 (paragraph)
msgid "By default, the `<x-pulse>` component will create a 12 column grid, but you may customize this using the `cols` prop:"
msgstr ""

#: docs/10.x/pulse.md:block 38 (code)
msgid "<x-pulse cols=\"16\">\n"
"    ...\n"
"</x-pulse>\n"
msgstr ""

#: docs/10.x/pulse.md:block 39 (paragraph)
msgid "Each card accepts a `cols` and `rows` prop to control the space and positioning:"
msgstr ""

#: docs/10.x/pulse.md:block 40 (code)
msgid "<livewire:pulse.usage cols=\"4\" rows=\"2\" />\n"
msgstr ""

#: docs/10.x/pulse.md:block 41 (paragraph)
msgid "Most cards also accept an `expand` prop to show the full card instead of scrolling:"
msgstr ""

#: docs/10.x/pulse.md:block 42 (code)
msgid "<livewire:pulse.slow-queries expand />\n"
msgstr ""

#: docs/10.x/pulse.md:block 44 (header)
msgid "Resolving Users"
msgstr ""

#: docs/10.x/pulse.md:block 45 (paragraph)
msgid "For cards that display information about your users, such as the Application Usage card, Pulse will only record the user's ID. When rendering the dashboard, Pulse will resolve the `name` and `email` fields from your default `Authenticatable` model and display avatars using the Gravatar web service."
msgstr ""

#: docs/10.x/pulse.md:block 46 (paragraph)
msgid "You may customize the fields and avatar by invoking the `Pulse::user` method within your application's `App\\Providers\\AppServiceProvider` class."
msgstr ""

#: docs/10.x/pulse.md:block 47 (paragraph)
msgid "The `user` method accepts a closure which will receive the `Authenticatable` model to be displayed and should return an array containing `name`, `extra`, and `avatar` information for the user:"
msgstr ""

#: docs/10.x/pulse.md:block 48 (code)
msgid "use Laravel\\Pulse\\Facades\\Pulse;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Pulse::user(fn ($user) => [\n"
"        'name' => $user->name,\n"
"        'extra' => $user->email,\n"
"        'avatar' => $user->avatar_url,\n"
"    ]);\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pulse.md:block 49 (quote)
msgid "[!NOTE] You may completely customize how the authenticated user is captured and retrieved by implementing the `Laravel\\Pulse\\Contracts\\ResolvesUsers` contract and binding it in Laravel's [service container](/docs/{{version}}/container#binding-a-singleton)."
msgstr ""

#: docs/10.x/pulse.md:block 51 (header)
msgid "Cards"
msgstr ""

#: docs/10.x/pulse.md:block 53 (header)
msgid "Servers"
msgstr ""

#: docs/10.x/pulse.md:block 54 (paragraph)
msgid "The `<livewire:pulse.servers />` card displays system resource usage for all servers running the `pulse:check` command. Please refer to the documentation regarding the [servers recorder](#servers-recorder) for more information on system resource reporting."
msgstr ""

#: docs/10.x/pulse.md:block 56 (header)
msgid "Application Usage"
msgstr ""

#: docs/10.x/pulse.md:block 57 (paragraph)
msgid "The `<livewire:pulse.usage />` card displays the top 10 users making requests to your application, dispatching jobs, and experiencing slow requests."
msgstr ""

#: docs/10.x/pulse.md:block 58 (paragraph)
msgid "If you wish to view all usage metrics on screen at the same time, you may include the card multiple times and specify the `type` attribute:"
msgstr ""

#: docs/10.x/pulse.md:block 59 (code)
msgid "<livewire:pulse.usage type=\"requests\" />\n"
"<livewire:pulse.usage type=\"slow_requests\" />\n"
"<livewire:pulse.usage type=\"jobs\" />\n"
msgstr ""

#: docs/10.x/pulse.md:block 60 (paragraph)
msgid "To learn how to customize how Pulse retrieves and displays user information, consult our documentation on [resolving users](#dashboard-resolving-users)."
msgstr ""

#: docs/10.x/pulse.md:block 61 (quote)
msgid "[!NOTE] If your application receives a lot of requests or dispatches a lot of jobs, you may wish to enable [sampling](#sampling). See the [user requests recorder](#user-requests-recorder), [user jobs recorder](#user-jobs-recorder), and [slow jobs recorder](#slow-jobs-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 63 (header)
msgid "Exceptions"
msgstr ""

#: docs/10.x/pulse.md:block 64 (paragraph)
msgid "The `<livewire:pulse.exceptions />` card shows the frequency and recency of exceptions occurring in your application. By default, exceptions are grouped based on the exception class and location where it occurred. See the [exceptions recorder](#exceptions-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 66 (header)
msgid "Queues"
msgstr ""

#: docs/10.x/pulse.md:block 67 (paragraph)
msgid "The `<livewire:pulse.queues />` card shows the throughput of the queues in your application, including the number of jobs queued, processing, processed, released, and failed. See the [queues recorder](#queues-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 69 (header)
msgid "Slow Requests"
msgstr ""

#: docs/10.x/pulse.md:block 70 (paragraph)
msgid "The `<livewire:pulse.slow-requests />` card shows incoming requests to your application that exceed the configured threshold, which is 1,000ms by default. See the [slow requests recorder](#slow-requests-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 72 (header)
msgid "Slow Jobs"
msgstr ""

#: docs/10.x/pulse.md:block 73 (paragraph)
msgid "The `<livewire:pulse.slow-jobs />` card shows the queued jobs in your application that exceed the configured threshold, which is 1,000ms by default. See the [slow jobs recorder](#slow-jobs-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 75 (header)
msgid "Slow Queries"
msgstr ""

#: docs/10.x/pulse.md:block 76 (paragraph)
msgid "The `<livewire:pulse.slow-queries />` card shows the database queries in your application that exceed the configured threshold, which is 1,000ms by default."
msgstr ""

#: docs/10.x/pulse.md:block 77 (paragraph)
msgid "By default, slow queries are grouped based on the SQL query (without bindings) and the location where it occurred, but you may choose to not capture the location if you wish to group solely on the SQL query."
msgstr ""

#: docs/10.x/pulse.md:block 78 (paragraph)
msgid "See the [slow queries recorder](#slow-queries-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 80 (header)
msgid "Slow Outgoing Requests"
msgstr ""

#: docs/10.x/pulse.md:block 81 (paragraph)
msgid "The `<livewire:pulse.slow-outgoing-requests />` card shows outgoing requests made using Laravel's [HTTP client](/docs/{{version}}/http-client) that exceed the configured threshold, which is 1,000ms by default."
msgstr ""

#: docs/10.x/pulse.md:block 82 (paragraph)
msgid "By default, entries will be grouped by the full URL. However, you may wish to normalize or group similar outgoing requests using regular expressions. See the [slow outgoing requests recorder](#slow-outgoing-requests-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 84 (header)
msgid "Cache"
msgstr ""

#: docs/10.x/pulse.md:block 85 (paragraph)
msgid "The `<livewire:pulse.cache />` card shows the cache hit and miss statistics for your application, both globally and for individual keys."
msgstr ""

#: docs/10.x/pulse.md:block 86 (paragraph)
msgid "By default, entries will be grouped by key. However, you may wish to normalize or group similar keys using regular expressions. See the [cache interactions recorder](#cache-interactions-recorder) documentation for more information."
msgstr ""

#: docs/10.x/pulse.md:block 88 (header)
msgid "Capturing Entries"
msgstr ""

#: docs/10.x/pulse.md:block 89 (paragraph)
msgid "Most Pulse recorders will automatically capture entries based on framework events dispatched by Laravel. However, the [servers recorder](#servers-recorder) and some third-party cards must poll for information regularly. To use these cards, you must run the `pulse:check` daemon on all of your individual application servers:"
msgstr ""

#: docs/10.x/pulse.md:block 90 (code)
msgid "php artisan pulse:check\n"
msgstr ""

#: docs/10.x/pulse.md:block 91 (quote)
msgid "[!NOTE] To keep the `pulse:check` process running permanently in the background, you should use a process monitor such as Supervisor to ensure that the command does not stop running."
msgstr ""

#: docs/10.x/pulse.md:block 92 (paragraph)
msgid "As the `pulse:check` command is a long-lived process, it will not see changes to your codebase without being restarted. You should gracefully restart the command by calling the `pulse:restart` command during your application's deployment process:"
msgstr ""

#: docs/10.x/pulse.md:block 93 (code)
msgid "php artisan pulse:restart\n"
msgstr ""

#: docs/10.x/pulse.md:block 94 (quote)
msgid "[!NOTE] Pulse uses the [cache](/docs/{{version}}/cache) to store restart signals, so you should verify that a cache driver is properly configured for your application before using this feature."
msgstr ""

#: docs/10.x/pulse.md:block 96 (header)
msgid "Recorders"
msgstr ""

#: docs/10.x/pulse.md:block 97 (paragraph)
msgid "Recorders are responsible for capturing entries from your application to be recorded in the Pulse database. Recorders are registered and configured in the `recorders` section of the [Pulse configuration file](#configuration)."
msgstr ""

#: docs/10.x/pulse.md:block 99 (header)
msgid "Cache Interactions"
msgstr ""

#: docs/10.x/pulse.md:block 100 (paragraph)
msgid "The `CacheInteractions` recorder captures information about the [cache](/docs/{{version}}/cache) hits and misses occurring in your application for display on the [Cache](#cache-card) card."
msgstr ""

#: docs/10.x/pulse.md:block 101 (paragraph)
msgid "You may optionally adjust the [sample rate](#sampling) and ignored key patterns."
msgstr ""

#: docs/10.x/pulse.md:block 102 (paragraph)
msgid "You may also configure key grouping so that similar keys are grouped as a single entry. For example, you may wish to remove unique IDs from keys caching the same type of information. Groups are configured using a regular expression to \"find and replace\" parts of the key. An example is included in the configuration file:"
msgstr ""

#: docs/10.x/pulse.md:block 103 (code)
msgid "Recorders\\CacheInteractions::class => [\n"
"    // ...\n"
"    'groups' => [\n"
"        // '/:\\d+/' => ':*',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/pulse.md:block 104 (paragraph)
msgid "The first pattern that matches will be used. If no patterns match, then the key will be captured as-is."
msgstr ""

#: docs/10.x/pulse.md:block 107 (paragraph)
msgid "The `Exceptions` recorder captures information about reportable exceptions occurring in your application for display on the [Exceptions](#exceptions-card) card."
msgstr ""

#: docs/10.x/pulse.md:block 108 (paragraph)
msgid "You may optionally adjust the [sample rate](#sampling) and ignored exceptions patterns. You may also configure whether to capture the location that the exception originated from. The captured location will be displayed on the Pulse dashboard which can help to track down the exception origin; however, if the same exception occurs in multiple locations then it will appear multiple times for each unique location."
msgstr ""

#: docs/10.x/pulse.md:block 111 (paragraph)
msgid "The `Queues` recorder captures information about your applications queues for display on the [Queues](#queues-card)."
msgstr ""

#: docs/10.x/pulse.md:block 112 (paragraph)
msgid "You may optionally adjust the [sample rate](#sampling) and ignored jobs patterns."
msgstr ""

#: docs/10.x/pulse.md:block 115 (paragraph)
msgid "The `SlowJobs` recorder captures information about slow jobs occurring in your application for display on the [Slow Jobs](#slow-jobs-recorder) card."
msgstr ""

#: docs/10.x/pulse.md:block 116 (paragraph)
msgid "You may optionally adjust the slow job threshold, [sample rate](#sampling), and ignored job patterns."
msgstr ""

#: docs/10.x/pulse.md:block 119 (paragraph)
msgid "The `SlowOutgoingRequests` recorder captures information about outgoing HTTP requests made using Laravel's [HTTP client](/docs/{{version}}/http-client) that exceed the configured threshold for display on the [Slow Outgoing Requests](#slow-outgoing-requests-card) card."
msgstr ""

#: docs/10.x/pulse.md:block 120 (paragraph)
msgid "You may optionally adjust the slow outgoing request threshold, [sample rate](#sampling), and ignored URL patterns."
msgstr ""

#: docs/10.x/pulse.md:block 121 (paragraph)
msgid "You may also configure URL grouping so that similar URLs are grouped as a single entry. For example, you may wish to remove unique IDs from URL paths or group by domain only. Groups are configured using a regular expression to \"find and replace\" parts of the URL. Some examples are included in the configuration file:"
msgstr ""

#: docs/10.x/pulse.md:block 122 (code)
msgid "Recorders\\OutgoingRequests::class => [\n"
"    // ...\n"
"    'groups' => [\n"
"        // '#^https://api\\.github\\.com/repos/.*$#' => 'api.github.com/repos/*',\n"
"        // '#^https?://([^/]*).*$#' => '\\1',\n"
"        // '#/\\d+#' => '/*',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/pulse.md:block 123 (paragraph)
msgid "The first pattern that matches will be used. If no patterns match, then the URL will be captured as-is."
msgstr ""

#: docs/10.x/pulse.md:block 126 (paragraph)
msgid "The `SlowQueries` recorder captures any database queries in your application that exceed the configured threshold for display on the [Slow Queries](#slow-queries-card) card."
msgstr ""

#: docs/10.x/pulse.md:block 127 (paragraph)
msgid "You may optionally adjust the slow query threshold, [sample rate](#sampling), and ignored query patterns. You may also configure whether to capture the query location. The captured location will be displayed on the Pulse dashboard which can help to track down the query origin; however, if the same query is made in multiple locations then it will appear multiple times for each unique location."
msgstr ""

#: docs/10.x/pulse.md:block 130 (paragraph)
msgid "The `Requests` recorder captures information about requests made to your application for display on the [Slow Requests](#slow-requests-card) and [Application Usage](#application-usage-card) cards."
msgstr ""

#: docs/10.x/pulse.md:block 131 (paragraph)
msgid "You may optionally adjust the slow route threshold, [sample rate](#sampling), and ignored paths."
msgstr ""

#: docs/10.x/pulse.md:block 134 (paragraph)
msgid "The `Servers` recorder captures CPU, memory, and storage usage of the servers that power your application for display on the [Servers](#servers-card) card. This recorder requires the [`pulse:check` command](#capturing-entries) to be running on each of the servers you wish to monitor."
msgstr ""

#: docs/10.x/pulse.md:block 135 (paragraph)
msgid "Each reporting server must have a unique name. By default, Pulse will use the value returned by PHP's `gethostname` function. If you wish to customize this, you may set the `PULSE_SERVER_NAME` environment variable:"
msgstr ""

#: docs/10.x/pulse.md:block 136 (code)
msgid "PULSE_SERVER_NAME=load-balancer\n"
msgstr ""

#: docs/10.x/pulse.md:block 137 (paragraph)
msgid "The Pulse configuration file also allows you to customize the directories that are monitored."
msgstr ""

#: docs/10.x/pulse.md:block 139 (header)
msgid "User Jobs"
msgstr ""

#: docs/10.x/pulse.md:block 140 (paragraph)
msgid "The `UserJobs` recorder captures information about the users dispatching jobs in your application for display on the [Application Usage](#application-usage-card) card."
msgstr ""

#: docs/10.x/pulse.md:block 141 (paragraph)
msgid "You may optionally adjust the [sample rate](#sampling) and ignored job patterns."
msgstr ""

#: docs/10.x/pulse.md:block 143 (header)
msgid "User Requests"
msgstr ""

#: docs/10.x/pulse.md:block 144 (paragraph)
msgid "The `UserRequests` recorder captures information about the users making requests to your application for display on the [Application Usage](#application-usage-card) card."
msgstr ""

#: docs/10.x/pulse.md:block 147 (header)
msgid "Filtering"
msgstr ""

#: docs/10.x/pulse.md:block 148 (paragraph)
msgid "As we have seen, many [recorders](#recorders) offer the ability to, via configuration, \"ignore\" incoming entries based on their value, such as a request's URL. But, sometimes it may be useful to filter out records based on other factors, such as the currently authenticated user. To filter out these records, you may pass a closure to Pulse's `filter` method. Typically, the `filter` method should be invoked within the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/10.x/pulse.md:block 149 (code)
msgid "use Illuminate\\Support\\Facades\\Auth;\n"
"use Laravel\\Pulse\\Entry;\n"
"use Laravel\\Pulse\\Facades\\Pulse;\n"
"use Laravel\\Pulse\\Value;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Pulse::filter(function (Entry|Value $entry) {\n"
"        return Auth::user()->isNotAdmin();\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pulse.md:block 151 (header)
msgid "Performance"
msgstr ""

#: docs/10.x/pulse.md:block 152 (paragraph)
msgid "Pulse has been designed to drop into an existing application without requiring any additional infrastructure. However, for high-traffic applications, there are several ways of removing any impact Pulse may have on your application's performance."
msgstr ""

#: docs/10.x/pulse.md:block 154 (header)
msgid "Using a Different Database"
msgstr ""

#: docs/10.x/pulse.md:block 155 (paragraph)
msgid "For high-traffic applications, you may prefer to use a dedicated database connection for Pulse to avoid impacting your application database."
msgstr ""

#: docs/10.x/pulse.md:block 156 (paragraph)
msgid "You may customize the [database connection](/docs/{{version}}/database#configuration) used by Pulse by setting the `PULSE_DB_CONNECTION` environment variable."
msgstr ""

#: docs/10.x/pulse.md:block 157 (code)
msgid "PULSE_DB_CONNECTION=pulse\n"
msgstr ""

#: docs/10.x/pulse.md:block 159 (header)
msgid "Redis Ingest"
msgstr ""

#: docs/10.x/pulse.md:block 160 (quote)
msgid "[!WARNING] The Redis Ingest requires Redis 6.2 or greater and `phpredis` or `predis` as the application's configured Redis client driver."
msgstr ""

#: docs/10.x/pulse.md:block 161 (paragraph)
msgid "By default, Pulse will store entries directly to the [configured database connection](#using-a-different-database) after the HTTP response has been sent to the client or a job has been processed; however, you may use Pulse's Redis ingest driver to send entries to a Redis stream instead. This can be enabled by configuring the `PULSE_INGEST_DRIVER` environment variable:"
msgstr ""

#: docs/10.x/pulse.md:block 162 (code)
msgid "PULSE_INGEST_DRIVER=redis\n"
msgstr ""

#: docs/10.x/pulse.md:block 163 (paragraph)
msgid "Pulse will use your default [Redis connection](/docs/{{version}}/redis#configuration) by default, but you may customize this via the `PULSE_REDIS_CONNECTION` environment variable:"
msgstr ""

#: docs/10.x/pulse.md:block 164 (code)
msgid "PULSE_REDIS_CONNECTION=pulse\n"
msgstr ""

#: docs/10.x/pulse.md:block 165 (paragraph)
msgid "When using the Redis ingest, you will need to run the `pulse:work` command to monitor the stream and move entries from Redis into Pulse's database tables."
msgstr ""

#: docs/10.x/pulse.md:block 166 (code)
msgid "php artisan pulse:work\n"
msgstr ""

#: docs/10.x/pulse.md:block 167 (quote)
msgid "[!NOTE] To keep the `pulse:work` process running permanently in the background, you should use a process monitor such as Supervisor to ensure that the Pulse worker does not stop running."
msgstr ""

#: docs/10.x/pulse.md:block 168 (paragraph)
msgid "As the `pulse:work` command is a long-lived process, it will not see changes to your codebase without being restarted. You should gracefully restart the command by calling the `pulse:restart` command during your application's deployment process:"
msgstr ""

#: docs/10.x/pulse.md:block 172 (header)
msgid "Sampling"
msgstr ""

#: docs/10.x/pulse.md:block 173 (paragraph)
msgid "By default, Pulse will capture every relevant event that occurs in your application. For high-traffic applications, this can result in needing to aggregate millions of database rows in the dashboard, especially for longer time periods."
msgstr ""

#: docs/10.x/pulse.md:block 174 (paragraph)
msgid "You may instead choose to enable \"sampling\" on certain Pulse data recorders. For example, setting the sample rate to `0.1` on the [`User Requests`](#user-requests-recorder) recorder will mean that you only record approximately 10% of the requests to your application. In the dashboard, the values will be scaled up and prefixed with a `~` to indicate that they are an approximation."
msgstr ""

#: docs/10.x/pulse.md:block 175 (paragraph)
msgid "In general, the more entries you have for a particular metric, the lower you can safely set the sample rate without sacrificing too much accuracy."
msgstr ""

#: docs/10.x/pulse.md:block 177 (header)
msgid "Trimming"
msgstr ""

#: docs/10.x/pulse.md:block 178 (paragraph)
msgid "Pulse will automatically trim its stored entries once they are outside of the dashboard window. Trimming occurs when ingesting data using a lottery system which may be customized in the Pulse [configuration file](#configuration)."
msgstr ""

#: docs/10.x/pulse.md:block 180 (header)
msgid "Handling Pulse Exceptions"
msgstr ""

#: docs/10.x/pulse.md:block 181 (paragraph)
msgid "If an exception occurs while capturing Pulse data, such as being unable to connect to the storage database, Pulse will silently fail to avoid impacting your application."
msgstr ""

#: docs/10.x/pulse.md:block 182 (paragraph)
msgid "If you wish to customize how these exceptions are handled, you may provide a closure to the `handleExceptionsUsing` method:"
msgstr ""

#: docs/10.x/pulse.md:block 183 (code)
msgid "use Laravel\\Pulse\\Facades\\Pulse;\n"
"use Illuminate\\Support\\Facades\\Log;\n\n"
"Pulse::handleExceptionsUsing(function ($e) {\n"
"    Log::debug('An exception happened in Pulse', [\n"
"        'message' => $e->getMessage(),\n"
"        'stack' => $e->getTraceAsString(),\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/pulse.md:block 185 (header)
msgid "Custom Cards"
msgstr ""

#: docs/10.x/pulse.md:block 186 (paragraph)
msgid "Pulse allows you to build custom cards to display data relevant to your application's specific needs. Pulse uses [Livewire](https://livewire.laravel.com), so you may want to [review its documentation](https://livewire.laravel.com/docs) before building your first custom card."
msgstr ""

#: docs/10.x/pulse.md:block 188 (header)
msgid "Card Components"
msgstr ""

#: docs/10.x/pulse.md:block 189 (paragraph)
msgid "Creating a custom card in Laravel Pulse starts with extending the base `Card` Livewire component and defining a corresponding view:"
msgstr ""

#: docs/10.x/pulse.md:block 190 (code)
msgid "namespace App\\Livewire\\Pulse;\n\n"
"use Laravel\\Pulse\\Livewire\\Card;\n"
"use Livewire\\Attributes\\Lazy;\n\n"
"#[Lazy]\n"
"class TopSellers extends Card\n"
"{\n"
"    public function render()\n"
"    {\n"
"        return view('livewire.pulse.top-sellers');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pulse.md:block 191 (paragraph)
msgid "When using Livewire's [lazy loading](https://livewire.laravel.com/docs/lazy) feature, The `Card` component will automatically provide a placeholder that respects the `cols` and `rows` attributes passed to your component."
msgstr ""

#: docs/10.x/pulse.md:block 192 (paragraph)
msgid "When writing your Pulse card's corresponding view, you may leverage Pulse's Blade components for a consistent look and feel:"
msgstr ""

#: docs/10.x/pulse.md:block 193 (code)
msgid "<x-pulse::card :cols=\"$cols\" :rows=\"$rows\" :class=\"$class\" wire:poll.5s=\"\">\n"
"    <x-pulse::card-header name=\"Top Sellers\">\n"
"        <x-slot:icon>\n"
"            ...\n"
"        </x-slot:icon>\n"
"    </x-pulse::card-header>\n\n"
"    <x-pulse::scroll :expand=\"$expand\">\n"
"        ...\n"
"    </x-pulse::scroll>\n"
"</x-pulse::card>\n"
msgstr ""

#: docs/10.x/pulse.md:block 194 (paragraph)
msgid "The `$cols`, `$rows`, `$class`, and `$expand` variables should be passed to their respective Blade components so the card layout may be customized from the dashboard view. You may also wish to include the `wire:poll.5s=\"\"` attribute in your view to have the card automatically update."
msgstr ""

#: docs/10.x/pulse.md:block 195 (paragraph)
msgid "Once you have defined your Livewire component and template, the card may be included in your [dashboard view](#dashboard-customization):"
msgstr ""

#: docs/10.x/pulse.md:block 196 (code)
msgid "<x-pulse>\n"
"    ...\n\n"
"    <livewire:pulse.top-sellers cols=\"4\" />\n"
"</x-pulse>\n"
msgstr ""

#: docs/10.x/pulse.md:block 197 (quote)
msgid "[!NOTE] If your card is included in a package, you will need to register the component with Livewire using the `Livewire::component` method."
msgstr ""

#: docs/10.x/pulse.md:block 199 (header)
msgid "Styling"
msgstr ""

#: docs/10.x/pulse.md:block 200 (paragraph)
msgid "If your card requires additional styling beyond the classes and components included with Pulse, there are a few options for including custom CSS for your cards."
msgstr ""

#: docs/10.x/pulse.md:block 202 (header)
msgid "Laravel Vite Integration"
msgstr ""

#: docs/10.x/pulse.md:block 203 (paragraph)
msgid "If your custom card lives within your application's code base and you are using Laravel's [Vite integration](/docs/{{version}}/vite), you may update your `vite.config.js` file to include a dedicated CSS entry point for your card:"
msgstr ""

#: docs/10.x/pulse.md:block 204 (code)
msgid "laravel({\n"
"    input: [\n"
"        'resources/css/pulse/top-sellers.css',\n"
"        // ...\n"
"    ],\n"
"}),\n"
msgstr ""

#: docs/10.x/pulse.md:block 205 (paragraph)
msgid "You may then use the `@vite` Blade directive in your [dashboard view](#dashboard-customization), specifying the CSS entrypoint for your card:"
msgstr ""

#: docs/10.x/pulse.md:block 206 (code)
msgid "<x-pulse>\n"
"    @vite('resources/css/pulse/top-sellers.css')\n\n"
"    ...\n"
"</x-pulse>\n"
msgstr ""

#: docs/10.x/pulse.md:block 208 (header)
msgid "CSS Files"
msgstr ""

#: docs/10.x/pulse.md:block 209 (paragraph)
msgid "For other use cases, including Pulse cards contained within a package, you may instruct Pulse to load additional stylesheets by defining a `css` method on your Livewire component that returns the file path to your CSS file:"
msgstr ""

#: docs/10.x/pulse.md:block 210 (code)
msgid "class TopSellers extends Card\n"
"{\n"
"    // ...\n\n"
"    protected function css()\n"
"    {\n"
"        return __DIR__.'/../../dist/top-sellers.css';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pulse.md:block 211 (paragraph)
msgid "When this card is included on the dashboard, Pulse will automatically include the contents of this file within a `<style>` tag so it does not need to be published to the `public` directory."
msgstr ""

#: docs/10.x/pulse.md:block 213 (header)
msgid "Tailwind CSS"
msgstr ""

#: docs/10.x/pulse.md:block 214 (paragraph)
msgid "When using Tailwind CSS, you should create a dedicated Tailwind configuration file to avoid loading unnecessary CSS or conflicting with Pulse's Tailwind classes:"
msgstr ""

#: docs/10.x/pulse.md:block 215 (code)
msgid "export default {\n"
"    darkMode: 'class',\n"
"    important: '#top-sellers',\n"
"    content: [\n"
"        './resources/views/livewire/pulse/top-sellers.blade.php',\n"
"    ],\n"
"    corePlugins: {\n"
"        preflight: false,\n"
"    },\n"
"};\n"
msgstr ""

#: docs/10.x/pulse.md:block 216 (paragraph)
msgid "You may then specify the configuration file in your CSS entrypoint:"
msgstr ""

#: docs/10.x/pulse.md:block 217 (code)
msgid "@config \"../../tailwind.top-sellers.config.js\";\n"
"@tailwind base;\n"
"@tailwind components;\n"
"@tailwind utilities;\n"
msgstr ""

#: docs/10.x/pulse.md:block 218 (paragraph)
msgid "You will also need to include an `id` or `class` attribute in your card's view that matches the selector passed to Tailwind's [`important` selector strategy](https://tailwindcss.com/docs/configuration#selector-strategy):"
msgstr ""

#: docs/10.x/pulse.md:block 219 (code)
msgid "<x-pulse::card id=\"top-sellers\" :cols=\"$cols\" :rows=\"$rows\" class=\"$class\">\n"
"    ...\n"
"</x-pulse::card>\n"
msgstr ""

#: docs/10.x/pulse.md:block 221 (header)
msgid "Data Capture and Aggregation"
msgstr ""

#: docs/10.x/pulse.md:block 222 (paragraph)
msgid "Custom cards may fetch and display data from anywhere; however, you may wish to leverage Pulse's powerful and efficient data recording and aggregation system."
msgstr ""

#: docs/10.x/pulse.md:block 225 (paragraph)
msgid "Pulse allows you to record \"entries\" using the `Pulse::record` method:"
msgstr ""

#: docs/10.x/pulse.md:block 226 (code)
msgid "use Laravel\\Pulse\\Facades\\Pulse;\n\n"
"Pulse::record('user_sale', $user->id, $sale->amount)\n"
"    ->sum()\n"
"    ->count();\n"
msgstr ""

#: docs/10.x/pulse.md:block 227 (paragraph)
msgid "The first argument provided to the `record` method is the `type` for the entry you are recording, while the second argument is the `key` that determines how the aggregated data should be grouped. For most aggregation methods you will also need to specify a `value` to be aggregated. In the example above, the value being aggregated is `$sale->amount`. You may then invoke one or more aggregation methods (such as `sum`) so that Pulse may capture pre-aggregated values into \"buckets\" for efficient retrieval later."
msgstr ""

#: docs/10.x/pulse.md:block 228 (paragraph)
msgid "The available aggregation methods are:"
msgstr ""

#: docs/10.x/pulse.md:block 229 (unordered list)
msgid "`avg`"
msgstr ""

#: docs/10.x/pulse.md:block 229 (unordered list)
msgid "`count`"
msgstr ""

#: docs/10.x/pulse.md:block 229 (unordered list)
msgid "`max`"
msgstr ""

#: docs/10.x/pulse.md:block 229 (unordered list)
msgid "`min`"
msgstr ""

#: docs/10.x/pulse.md:block 229 (unordered list)
msgid "`sum`"
msgstr ""

#: docs/10.x/pulse.md:block 230 (quote)
msgid "[!NOTE] When building a card package that captures the currently authenticated user ID, you should use the `Pulse::resolveAuthenticatedUserId()` method, which respects any [user resolver customizations](#dashboard-resolving-users) made to the application."
msgstr ""

#: docs/10.x/pulse.md:block 232 (header)
msgid "Retrieving Aggregate Data"
msgstr ""

#: docs/10.x/pulse.md:block 233 (paragraph)
msgid "When extending Pulse's `Card` Livewire component, you may use the `aggregate` method to retrieve aggregated data for the period being viewed in the dashboard:"
msgstr ""

#: docs/10.x/pulse.md:block 234 (code)
msgid "class TopSellers extends Card\n"
"{\n"
"    public function render()\n"
"    {\n"
"        return view('livewire.pulse.top-sellers', [\n"
"            'topSellers' => $this->aggregate('user_sale', ['sum', 'count']);\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pulse.md:block 235 (paragraph)
msgid "The `aggregate` method returns return a collection of PHP `stdClass` objects. Each object will contain the `key` property captured earlier, along with keys for each of the requested aggregates:"
msgstr ""

#: docs/10.x/pulse.md:block 236 (code)
msgid "@foreach ($topSellers as $seller)\n"
"    {{ $seller->key }}\n"
"    {{ $seller->sum }}\n"
"    {{ $seller->count }}\n"
"@endforeach\n"
msgstr ""

#: docs/10.x/pulse.md:block 237 (paragraph)
msgid "Pulse will primarily retrieve data from the pre-aggregated buckets; therefore, the specified aggregates must have been captured up-front using the `Pulse::record` method. The oldest bucket will typically fall partially outside the period, so Pulse will aggregate the oldest entries to fill the gap and give an accurate value for the entire period, without needing to aggregate the entire period on each poll request."
msgstr ""

#: docs/10.x/pulse.md:block 238 (paragraph)
msgid "You may also retrieve a total value for a given type by using the `aggregateTotal` method. For example, the following method would retrieve the total of all user sales instead of grouping them by user."
msgstr ""

#: docs/10.x/pulse.md:block 239 (code)
msgid "$total = $this->aggregateTotal('user_sale', 'sum');\n"
msgstr ""

#: docs/10.x/pulse.md:block 241 (header)
msgid "Displaying Users"
msgstr ""

#: docs/10.x/pulse.md:block 242 (paragraph)
msgid "When working with aggregates that record a user ID as the key, you may resolve the keys to user records using the `Pulse::resolveUsers` method:"
msgstr ""

#: docs/10.x/pulse.md:block 243 (code)
msgid "$aggregates = $this->aggregate('user_sale', ['sum', 'count']);\n\n"
"$users = Pulse::resolveUsers($aggregates->pluck('key'));\n\n"
"return view('livewire.pulse.top-sellers', [\n"
"    'sellers' => $aggregates->map(fn ($aggregate) => (object) [\n"
"        'user' => $users->find($aggregate->key),\n"
"        'sum' => $aggregate->sum,\n"
"        'count' => $aggregate->count,\n"
"    ])\n"
"]);\n"
msgstr ""

#: docs/10.x/pulse.md:block 244 (paragraph)
msgid "The `find` method returns an object containing `name`, `extra`, and `avatar` keys, which you may optionally pass directly to the `<x-pulse::user-card>` Blade component:"
msgstr ""

#: docs/10.x/pulse.md:block 245 (code)
msgid "<x-pulse::user-card :user=\"{{ $seller->user }}\" :stats=\"{{ $seller->sum }}\" />\n"
msgstr ""

#: docs/10.x/pulse.md:block 247 (header)
msgid "Custom Recorders"
msgstr ""

#: docs/10.x/pulse.md:block 248 (paragraph)
msgid "Package authors may wish to provide recorder classes to allow users to configure the capturing of data."
msgstr ""

#: docs/10.x/pulse.md:block 249 (paragraph)
msgid "Recorders are registered in the `recorders` section of the application's `config/pulse.php` configuration file:"
msgstr ""

#: docs/10.x/pulse.md:block 250 (code)
msgid "[\n"
"    // ...\n"
"    'recorders' => [\n"
"        Acme\\Recorders\\Deployments::class => [\n"
"            // ...\n"
"        ],\n\n"
"        // ...\n"
"    ],\n"
"]\n"
msgstr ""

#: docs/10.x/pulse.md:block 251 (paragraph)
msgid "Recorders may listen to events by specifying a `$listen` property. Pulse will automatically register the listeners and call the recorders `record` method:"
msgstr ""

#: docs/10.x/pulse.md:block 252 (code)
msgid "<?php\n\n"
"namespace Acme\\Recorders;\n\n"
"use Acme\\Events\\Deployment;\n"
"use Illuminate\\Support\\Facades\\Config;\n"
"use Laravel\\Pulse\\Facades\\Pulse;\n\n"
"class Deployments\n"
"{\n"
"    /**\n"
"     * The events to listen for.\n"
"     *\n"
"     * @var list<class-string>\n"
"     */\n"
"    public array $listen = [\n"
"        Deployment::class,\n"
"    ];\n\n"
"    /**\n"
"     * Record the deployment.\n"
"     */\n"
"    public function record(Deployment $event): void\n"
"    {\n"
"        $config = Config::get('pulse.recorders.'.static::class);\n\n"
"        Pulse::record(\n"
"            // ...\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/11.x/pulse.md:block 9 (quote)
msgid "[!WARNING] Pulse's first-party storage implementation currently requires a MySQL, MariaDB, or PostgreSQL database. If you are using a different database engine, you will need a separate MySQL, MariaDB, or PostgreSQL database for your Pulse data."
msgstr ""

#: docs/11.x/pulse.md:block 10 (paragraph)
msgid "You may install Pulse using the Composer package manager:"
msgstr ""

#: docs/11.x/pulse.md:block 26 (paragraph)
msgid "The Pulse dashboard may be accessed via the `/pulse` route. By default, you will only be able to access this dashboard in the `local` environment, so you will need to configure authorization for your production environments by customizing the `'viewPulse'` authorization gate. You can accomplish this within your application's `app/Providers/AppServiceProvider.php` file:"
msgstr ""

#: docs/11.x/pulse.md:block 27 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('viewPulse', function (User $user) {\n"
"        return $user->isAdmin();\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/11.x/pulse.md:block 53 (paragraph)
msgid "If you replace a server in your infrastructure, you may wish to stop displaying the inactive server in the Pulse dashboard after a given duration. You may accomplish this using the `ignore-after` prop, which accepts the number of seconds after which inactive servers should be removed from the Pulse dashboard. Alternatively, you may provide a relative time formatted string, such as `1 hour` or `3 days and 1 hour`:"
msgstr ""

#: docs/11.x/pulse.md:block 54 (code)
msgid "<livewire:pulse.servers ignore-after=\"3 hours\" />\n"
msgstr ""

#: docs/11.x/pulse.md:block 78 (paragraph)
msgid "If you encounter rendering performance issues due to extremely large SQL queries receiving syntax highlighting, you may disable highlighting by adding the `without-highlighting` prop:"
msgstr ""

#: docs/11.x/pulse.md:block 79 (code)
msgid "<livewire:pulse.slow-queries without-highlighting />\n"
msgstr ""

#: docs/11.x/pulse.md:block 119 (paragraph)
msgid "You may have some jobs that you expect to take longer than others. In those cases, you may configure per-job thresholds:"
msgstr ""

#: docs/11.x/pulse.md:block 120 (code)
msgid "Recorders\\SlowJobs::class => [\n"
"    // ...\n"
"    'threshold' => [\n"
"        '#^App\\\\Jobs\\\\GenerateYearlyReports$#' => 5000,\n"
"        'default' => env('PULSE_SLOW_JOBS_THRESHOLD', 1000),\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/11.x/pulse.md:block 121 (paragraph)
msgid "If no regular expression patterns match the job's classname, then the `'default'` value will be used."
msgstr ""

#: docs/11.x/pulse.md:block 126 (paragraph)
msgid "You may have some outgoing requests that you expect to take longer than others. In those cases, you may configure per-request thresholds:"
msgstr ""

#: docs/11.x/pulse.md:block 127 (code)
msgid "Recorders\\SlowOutgoingRequests::class => [\n"
"    // ...\n"
"    'threshold' => [\n"
"        '#backup.zip$#' => 5000,\n"
"        'default' => env('PULSE_SLOW_OUTGOING_REQUESTS_THRESHOLD', 1000),\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/11.x/pulse.md:block 128 (paragraph)
msgid "If no regular expression patterns match the request's URL, then the `'default'` value will be used."
msgstr ""

#: docs/11.x/pulse.md:block 130 (code)
msgid "Recorders\\SlowOutgoingRequests::class => [\n"
"    // ...\n"
"    'groups' => [\n"
"        // '#^https://api\\.github\\.com/repos/.*$#' => 'api.github.com/repos/*',\n"
"        // '#^https?://([^/]*).*$#' => '\\1',\n"
"        // '#/\\d+#' => '/*',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/11.x/pulse.md:block 136 (paragraph)
msgid "You may have some queries that you expect to take longer than others. In those cases, you may configure per-query thresholds:"
msgstr ""

#: docs/11.x/pulse.md:block 137 (code)
msgid "Recorders\\SlowQueries::class => [\n"
"    // ...\n"
"    'threshold' => [\n"
"        '#^insert into `yearly_reports`#' => 5000,\n"
"        'default' => env('PULSE_SLOW_QUERIES_THRESHOLD', 1000),\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/11.x/pulse.md:block 138 (paragraph)
msgid "If no regular expression patterns match the query's SQL, then the `'default'` value will be used."
msgstr ""

#: docs/11.x/pulse.md:block 143 (paragraph)
msgid "You may have some requests that you expect to take longer than others. In those cases, you may configure per-request thresholds:"
msgstr ""

#: docs/11.x/pulse.md:block 144 (code)
msgid "Recorders\\SlowRequests::class => [\n"
"    // ...\n"
"    'threshold' => [\n"
"        '#^/admin/#' => 5000,\n"
"        'default' => env('PULSE_SLOW_REQUESTS_THRESHOLD', 1000),\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/11.x/pulse.md:block 249 (paragraph)
msgid "The `aggregate` method returns a collection of PHP `stdClass` objects. Each object will contain the `key` property captured earlier, along with keys for each of the requested aggregates:"
msgstr ""

#: docs/11.x/pulse.md:block 266 (code)
msgid "<?php\n\n"
"namespace Acme\\Recorders;\n\n"
"use Acme\\Events\\Deployment;\n"
"use Illuminate\\Support\\Facades\\Config;\n"
"use Laravel\\Pulse\\Facades\\Pulse;\n\n"
"class Deployments\n"
"{\n"
"    /**\n"
"     * The events to listen for.\n"
"     *\n"
"     * @var array<int, class-string>\n"
"     */\n"
"    public array $listen = [\n"
"        Deployment::class,\n"
"    ];\n\n"
"    /**\n"
"     * Record the deployment.\n"
"     */\n"
"    public function record(Deployment $event): void\n"
"    {\n"
"        $config = Config::get('pulse.recorders.'.static::class);\n\n"
"        Pulse::record(\n"
"            // ...\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

