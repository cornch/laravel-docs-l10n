msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/authorization.pot\n"
"X-Crowdin-File-ID: 13\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-11-05 13:29\n"

#: docs/10.x/authorization.md:block 1 (header)
msgid "Authorization"
msgstr "授權"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Gates](#gates)"
msgstr "[Gate](#gates)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Writing Gates](#writing-gates)"
msgstr "[撰寫 Gate](#writing-gates)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Authorizing Actions](#authorizing-actions-via-gates)"
msgstr "[授權動作](#authorizing-actions-via-gates)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Gate Responses](#gate-responses)"
msgstr "[Gate Response](#gate-responses)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Intercepting Gate Checks](#intercepting-gate-checks)"
msgstr "[攔截 Gate 檢查](#intercepting-gate-checks)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Inline Authorization](#inline-authorization)"
msgstr "[內嵌授權](#inline-authorization)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Creating Policies](#creating-policies)"
msgstr "[建立 Policy](#creating-policies)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Generating Policies](#generating-policies)"
msgstr "[產生 Policy](#generating-policies)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Registering Policies](#registering-policies)"
msgstr "[註冊 Policy](#registering-policies)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Writing Policies](#writing-policies)"
msgstr "[撰寫 Policy](#writing-policies)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Policy Methods](#policy-methods)"
msgstr "[Policy 方法](#policy-methods)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Policy Responses](#policy-responses)"
msgstr "[Policy Response](#policy-responses)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Methods Without Models](#methods-without-models)"
msgstr "[不使用 Model 的方法](#methods-without-models)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Guest Users](#guest-users)"
msgstr "[訪客使用者](#guest-users)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Policy Filters](#policy-filters)"
msgstr "[Policy 篩選器](#policy-filters)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Authorizing Actions Using Policies](#authorizing-actions-using-policies)"
msgstr "[通過 Policy 來授權動作](#authorizing-actions-using-policies)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via The User Model](#via-the-user-model)"
msgstr "[通過使用者 Model](#via-the-user-model)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via Controller Helpers](#via-controller-helpers)"
msgstr "[通過 Controller 的輔助函式](#via-controller-helpers)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via Middleware](#via-middleware)"
msgstr "[通過 Middleware](#via-middleware)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via Blade Templates](#via-blade-templates)"
msgstr "[通過 Blade 樣板](#via-blade-templates)"

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Supplying Additional Context](#supplying-additional-context)"
msgstr "[提供額外的上下文](#supplying-additional-context)"

#: docs/10.x/authorization.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/authorization.md:block 5 (paragraph)
msgid "In addition to providing built-in [authentication](/docs/{{version}}/authentication) services, Laravel also provides a simple way to authorize user actions against a given resource. For example, even though a user is authenticated, they may not be authorized to update or delete certain Eloquent models or database records managed by your application. Laravel's authorization features provide an easy, organized way of managing these types of authorization checks."
msgstr "除了提供內建的[認證](/docs/{{version}}/authentication)服務，Laravel 也提供了一種能依給定資源來授權使用者的簡單功能。舉例來說，雖然使用者已登入，但這個使用者可能未被授權可更新或刪除網站所管理的特定的 Eloquent Model 或資料庫記錄。Laravel 的授權功能提供了一種簡單且有條理的方法來管理這些種類的授權。"

#: docs/10.x/authorization.md:block 6 (paragraph)
msgid "Laravel provides two primary ways of authorizing actions: [gates](#gates) and [policies](#creating-policies). Think of gates and policies like routes and controllers. Gates provide a simple, closure-based approach to authorization while policies, like controllers, group logic around a particular model or resource. In this documentation, we'll explore gates first and then examine policies."
msgstr "Laravel 提供了兩種主要方法來授權動作：[Gate](#gates) 與 [Policy](#creating-policies)。可以把 Gate 與 Policy 想成是路由與 Controller。Gate 提供了一種簡單、基於閉包的方法來進行授權；而 Policy 就像 Controller 一樣，可以將授權邏輯依照特定的 Model 或資源來進行分組。在本說明文件中，我們會先來探討 Gate，然後再來看看 Policy。"

#: docs/10.x/authorization.md:block 7 (paragraph)
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions that are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr "在製作應用程式時，不需要只使用 Gate 或只使用 Policy。大多數應用程式都在某種程度上組合使用 Gate 與 Policy，這樣完全沒問題！Gate 最適合用來處理與 Model 或資源沒關係的操作，如檢視管理員縱覽頁。相較之下，Policy 則應使用於想授權對特定 Model 或 Resource 的操作時"

#: docs/10.x/authorization.md:block 9 (header)
msgid "Gates"
msgstr "Gate"

#: docs/10.x/authorization.md:block 11 (header)
msgid "Writing Gates"
msgstr "撰寫 Gate"

#: docs/10.x/authorization.md:block 12 (quote)
msgid "**Warning** Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules."
msgstr "**Warning** Gate 是學習基礎 Laravel 授權功能的最好的方法。但是，在製作大型 Laravel 應用程式時，應考慮通過 [Policy](#creating-policies) 來整理各個授權規則。"

#: docs/10.x/authorization.md:block 13 (paragraph)
msgid "Gates are simply closures that determine if a user is authorized to perform a given action. Typically, gates are defined within the `boot` method of the `App\\Providers\\AuthServiceProvider` class using the `Gate` facade. Gates always receive a user instance as their first argument and may optionally receive additional arguments such as a relevant Eloquent model."
msgstr "Gate 是簡單的閉包，用來判斷使用者是否已被授權執行特定的動作。通常來說，Gate 會在 `App\\Providers\\AuthServiceProvider` 類別中的 `boot` 方法內通過 `Gate` Facade 來定義。Gate 會收到一個使用者實體作為其第一個引數，並且可能還會接受到額外的引數，如相關的 Eloquent Model。"

#: docs/10.x/authorization.md:block 14 (paragraph)
msgid "In this example, we'll define a gate to determine if a user can update a given `App\\Models\\Post` model. The gate will accomplish this by comparing the user's `id` against the `user_id` of the user that created the post:"
msgstr "在此範例中，我們會定義一個用來判斷使用者能否更新給定 `App\\Models\\Post` Model 的 Gate。這個 Gate 會通過比對使用者的 `id` 與建立該貼文的 `user_id` 來進行判斷："

#: docs/10.x/authorization.md:block 15 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 16 (paragraph)
msgid "Like controllers, gates may also be defined using a class callback array:"
msgstr "就像 Controller 一樣，Gate 也可以通過類別回呼陣列來定義："

#: docs/10.x/authorization.md:block 17 (code)
msgid "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 19 (header)
msgid "Authorizing Actions"
msgstr "授權動作"

#: docs/10.x/authorization.md:block 20 (paragraph)
msgid "To authorize an action using gates, you should use the `allows` or `denies` methods provided by the `Gate` facade. Note that you are not required to pass the currently authenticated user to these methods. Laravel will automatically take care of passing the user into the gate closure. It is typical to call the gate authorization methods within your application's controllers before performing an action that requires authorization:"
msgstr "若要通過 Gate 來授權某個動作，可以使用 `Gate` Facade 提供的 `allows` 或 `denies` 方法。請注意，不需要將目前已登入的使用者傳給這幾個方法。Laravel 會自動處理好將使用者傳給 Gate 閉包。通常，我們會在 Controller 執行需要授權的特定動作前呼叫這些 Gate 授權方法："

#: docs/10.x/authorization.md:block 21 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 22 (paragraph)
msgid "If you would like to determine if a user other than the currently authenticated user is authorized to perform an action, you may use the `forUser` method on the `Gate` facade:"
msgstr "如果想判斷除了目前登入使用者以外其他的使用者能否執行特定動作，可以使用 `Gate` Facade 上的 `forUser` 方法："

#: docs/10.x/authorization.md:block 23 (code)
msgid "if (Gate::forUser($user)->allows('update-post', $post)) {\n"
"    // The user can update the post...\n"
"}\n\n"
"if (Gate::forUser($user)->denies('update-post', $post)) {\n"
"    // The user can't update the post...\n"
"}\n"
msgstr "if (Gate::forUser($user)->allows('update-post', $post)) {\n"
"    // 該使用者可更新此貼文...\n"
"}\n\n"
"if (Gate::forUser($user)->denies('update-post', $post)) {\n"
"    // 該使用者不能更新此貼文...\n"
"}\n"

#: docs/10.x/authorization.md:block 24 (paragraph)
msgid "You may authorize multiple actions at a time using the `any` or `none` methods:"
msgstr "可以通過 `any` 或 `none` 方法來在任何時候授權多個動作："

#: docs/10.x/authorization.md:block 25 (code)
msgid "if (Gate::any(['update-post', 'delete-post'], $post)) {\n"
"    // The user can update or delete the post...\n"
"}\n\n"
"if (Gate::none(['update-post', 'delete-post'], $post)) {\n"
"    // The user can't update or delete the post...\n"
"}\n"
msgstr "if (Gate::any(['update-post', 'delete-post'], $post)) {\n"
"    // 該使用者可更新或刪除此貼文...\n"
"}\n\n"
"if (Gate::none(['update-post', 'delete-post'], $post)) {\n"
"    // 該使用者不能更新或刪除此貼文...\n"
"}\n"

#: docs/10.x/authorization.md:block 27 (header)
msgid "Authorizing Or Throwing Exceptions"
msgstr "授權或擲回例外"

#: docs/10.x/authorization.md:block 28 (paragraph)
msgid "If you would like to attempt to authorize an action and automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` if the user is not allowed to perform the given action, you may use the `Gate` facade's `authorize` method. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler:"
msgstr "如果想在使用者不允許執行給定動作時自動擲回 `Illuminate\\Auth\\Access\\AuthorizationException`，可以使用 `Gate` Facade 的 `authorize` 方法。`AuthorizationException` 的實體會自動被 Laravel 的例外處理常式轉換為 403 HTTP 回應："

#: docs/10.x/authorization.md:block 29 (code)
msgid "Gate::authorize('update-post', $post);\n\n"
"// The action is authorized...\n"
msgstr "Gate::authorize('update-post', $post);\n\n"
"// 已授權可進行該動作...\n"

#: docs/10.x/authorization.md:block 31 (header)
msgid "Supplying Additional Context"
msgstr "提供額外的上下文"

#: docs/10.x/authorization.md:block 32 (paragraph)
msgid "The gate methods for authorizing abilities (`allows`, `denies`, `check`, `any`, `none`, `authorize`, `can`, `cannot`) and the authorization [Blade directives](#via-blade-templates) (`@can`, `@cannot`, `@canany`) can receive an array as their second argument. These array elements are passed as parameters to the gate closure, and can be used for additional context when making authorization decisions:"
msgstr "用於授權權限的 Gate 方法 (`allows`, `denies`, `check`, `any`, `none`, `authorize`, `can`, `cannot`) 與授權的 [Blade 指示詞](#via-blade-templates) (`@can`, `@cannot`, `@canany`) 都接受一個陣列作為其第二引數。這些陣列的元素會被作為引數傳給 Gate 閉包，並且可在進行權限認證時提供額外的上下文："

#: docs/10.x/authorization.md:block 33 (code)
msgid "use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('create-post', function (User $user, Category $category, bool $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n\n"
"    return true;\n"
"});\n\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}\n"
msgstr "use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('create-post', function (User $user, Category $category, bool $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n\n"
"    return true;\n"
"});\n\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}\n"

#: docs/10.x/authorization.md:block 35 (header)
msgid "Gate Responses"
msgstr "Gate 回應"

#: docs/10.x/authorization.md:block 36 (paragraph)
msgid "So far, we have only examined gates that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` from your gate:"
msgstr "到目前為止，我們只看過了回傳簡單布林值的 Gate。但，有時候我們可能會想回傳一些更具體的回覆，並在其中包含錯誤訊息。為此，可以在 Gate 內回傳 `Illuminate\\Auth\\Access\\Response`："

#: docs/10.x/authorization.md:block 37 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::deny('You must be an administrator.');\n"
"});\n"
msgstr "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::deny('You must be an administrator.');\n"
"});\n"

#: docs/10.x/authorization.md:block 38 (paragraph)
msgid "Even when you return an authorization response from your gate, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr "即使從 Gate 內回傳授權回應，`Gate::allows` 方法依然會回傳簡單的布林值。不過，可以使用 `Gate::inspect` 方法來取得 Gate 回傳的完整授權回應："

#: docs/10.x/authorization.md:block 39 (code)
msgid "$response = Gate::inspect('edit-settings');\n\n"
"if ($response->allowed()) {\n"
"    // The action is authorized...\n"
"} else {\n"
"    echo $response->message();\n"
"}\n"
msgstr "$response = Gate::inspect('edit-settings');\n\n"
"if ($response->allowed()) {\n"
"    // 已授權可進行該動作...\n"
"} else {\n"
"    echo $response->message();\n"
"}\n"

#: docs/10.x/authorization.md:block 40 (paragraph)
msgid "When using the `Gate::authorize` method, which throws an `AuthorizationException` if the action is not authorized, the error message provided by the authorization response will be propagated to the HTTP response:"
msgstr "在使用 `Gate::authorize` 方法時，若動作未被授權，會回傳 `AuthorizationException`。這時，授權回應所提供的錯誤訊息會進一步被傳給 HTTP 回應："

#: docs/10.x/authorization.md:block 41 (code)
msgid "Gate::authorize('edit-settings');\n\n"
"// The action is authorized...\n"
msgstr "Gate::authorize('edit-settings');\n\n"
"// 已授權可進行該動作...\n"

#: docs/10.x/authorization.md:block 43 (header)
msgid "Customizing The HTTP Response Status"
msgstr "自定 HTTP Response 狀態"

#: docs/10.x/authorization.md:block 44 (paragraph)
msgid "When an action is denied via a Gate, a `403` HTTP response is returned; however, it can sometimes be useful to return an alternative HTTP status code. You may customize the HTTP status code returned for a failed authorization check using the `denyWithStatus` static constructor on the `Illuminate\\Auth\\Access\\Response` class:"
msgstr "當 Gate 拒絕某個動作時，會回傳 `403` HTTP Response。不過，在某些情況下，若能回傳其他的 HTTP 狀態碼更好。我們可以使用 `Illuminate\\Auth\\Access\\Response` 類別的 `denyWithStatus` 靜態建構函式來自訂在授權檢查失敗的時候要回傳的 HTTP 狀態碼："

#: docs/10.x/authorization.md:block 45 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"});\n"
msgstr "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"});\n"

#: docs/10.x/authorization.md:block 46 (paragraph)
msgid "Because hiding resources via a `404` response is such a common pattern for web applications, the `denyAsNotFound` method is offered for convenience:"
msgstr "而因為使用 `404` Response 來隱藏資源是在 Web App 中常見的手段，因此為了方便， Laravel 也提供了 `denyAsNotFound` 方法："

#: docs/10.x/authorization.md:block 47 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"});\n"
msgstr "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"});\n"

#: docs/10.x/authorization.md:block 49 (header)
msgid "Intercepting Gate Checks"
msgstr "攔截 Gate 檢查"

#: docs/10.x/authorization.md:block 50 (paragraph)
msgid "Sometimes, you may wish to grant all abilities to a specific user. You may use the `before` method to define a closure that is run before all other authorization checks:"
msgstr "有的時候，我們可能會想授權特定使用者所有的權限。可以使用 `before` 方法來定義會在所有權限檢查前執行的閉包："

#: docs/10.x/authorization.md:block 51 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::before(function (User $user, string $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::before(function (User $user, string $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"

#: docs/10.x/authorization.md:block 52 (paragraph)
msgid "If the `before` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr "若 `before` 閉包回傳了一個非 null 的結果，則該結果值會被當作權限檢查的結果。"

#: docs/10.x/authorization.md:block 53 (paragraph)
msgid "You may use the `after` method to define a closure to be executed after all other authorization checks:"
msgstr "可以使用 `after` 方法來定義一個會在所有其他權限檢查後執行的閉包："

#: docs/10.x/authorization.md:block 54 (code)
msgid "use App\\Models\\User;\n\n"
"Gate::after(function (User $user, string $ability, bool|null $result, mixed $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Gate::after(function (User $user, string $ability, bool|null $result, mixed $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"

#: docs/10.x/authorization.md:block 55 (paragraph)
msgid "Similar to the `before` method, if the `after` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr "與 `before` 方法類似，若 `after` 閉包回傳了非 null 的結果，則該結果會被當作權限檢查的結果。"

#: docs/10.x/authorization.md:block 57 (header)
msgid "Inline Authorization"
msgstr "內嵌授權"

#: docs/10.x/authorization.md:block 58 (paragraph)
msgid "Occasionally, you may wish to determine if the currently authenticated user is authorized to perform a given action without writing a dedicated gate that corresponds to the action. Laravel allows you to perform these types of \"inline\" authorization checks via the `Gate::allowIf` and `Gate::denyIf` methods:"
msgstr "有時候，我們可能需要判斷目前登入的使用者是否有權限進行給定動作，但我們不想給這個動作撰寫獨立的 Gate。在 Laravel，我們可以使用 `Gate::allowIf` 與 `Gate::denyIf` 方法來進行這類的「內嵌」授權檢查："

#: docs/10.x/authorization.md:block 59 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::allowIf(fn (User $user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn (User $user) => $user->banned());\n"
msgstr "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::allowIf(fn (User $user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn (User $user) => $user->banned());\n"

#: docs/10.x/authorization.md:block 60 (paragraph)
msgid "If the action is not authorized or if no user is currently authenticated, Laravel will automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler."
msgstr "若該動作未授權、或是使用者未登入，則 Laravel 會自動擲回 `Illuminate\\Auth\\Access\\AuthorizationException` 例外。`AuthorizationException` 實體會自動由 Laravel 的例外處理常式轉換為 403 HTTP 回應。"

#: docs/10.x/authorization.md:block 62 (header)
msgid "Creating Policies"
msgstr "建立 Policy"

#: docs/10.x/authorization.md:block 64 (header)
msgid "Generating Policies"
msgstr "產生 Policy"

#: docs/10.x/authorization.md:block 65 (paragraph)
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have an `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr ""

#: docs/10.x/authorization.md:block 66 (paragraph)
msgid "You may generate a policy using the `make:policy` Artisan command. The generated policy will be placed in the `app/Policies` directory. If this directory does not exist in your application, Laravel will create it for you:"
msgstr "可以通過 `make:policy` Artisan 指令來產生 Policy。產生的 Policy 會被放在 `app/Policies` 目錄內。若專案中沒有該目錄中，則 Laravel 會自動建立："

#: docs/10.x/authorization.md:block 67 (code)
msgid "php artisan make:policy PostPolicy\n"
msgstr "php artisan make:policy PostPolicy\n"

#: docs/10.x/authorization.md:block 68 (paragraph)
msgid "The `make:policy` command will generate an empty policy class. If you would like to generate a class with example policy methods related to viewing, creating, updating, and deleting the resource, you may provide a `--model` option when executing the command:"
msgstr "`make:policy` 指令會產生一個空的 Policy 類別。若想產生一個與檢視 (View)、建立 (Create)、更新 (Update)、刪除 (Delete) 資源有關的範例 方法的 Policy 類別，可以在執行指令時提供 `--model` 選項："

#: docs/10.x/authorization.md:block 69 (code)
msgid "php artisan make:policy PostPolicy --model=Post\n"
msgstr "php artisan make:policy PostPolicy --model=Post\n"

#: docs/10.x/authorization.md:block 71 (header)
msgid "Registering Policies"
msgstr "註冊 Policy"

#: docs/10.x/authorization.md:block 72 (paragraph)
msgid "Once the policy class has been created, it needs to be registered. Registering policies is how we can inform Laravel which policy to use when authorizing actions against a given model type."
msgstr "建立好 Policy 類別後，需要註冊 Policy。註冊 Policy 就能告訴 Laravel：在進行授權動作時，遇到特定 Model 時要使用哪個對應 Policy。"

#: docs/10.x/authorization.md:block 73 (paragraph)
msgid "The `App\\Providers\\AuthServiceProvider` included with fresh Laravel applications contains a `policies` property which maps your Eloquent models to their corresponding policies. Registering a policy will instruct Laravel which policy to utilize when authorizing actions against a given Eloquent model:"
msgstr "在新安裝的 Laravel 專案中的 `App\\Providers\\AuthServiceProvider` 內，有一個 `policies` 屬性。該屬性會將 Eloquent Model 映射到其對應的 Policy。通過註冊 Policy，就可以告訴 Laravel 在權限檢查時遇到的 Eloquent Model 要使用哪個 Policy："

#: docs/10.x/authorization.md:block 74 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 76 (header)
msgid "Policy Auto-Discovery"
msgstr "Policy Auto-Discovery"

#: docs/10.x/authorization.md:block 77 (paragraph)
msgid "Instead of manually registering model policies, Laravel can automatically discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a `Policies` directory at or above the directory that contains your models. So, for example, the models may be placed in the `app/Models` directory while the policies may be placed in the `app/Policies` directory. In this situation, Laravel will check for policies in `app/Models/Policies` then `app/Policies`. In addition, the policy name must match the model name and have a `Policy` suffix. So, a `User` model would correspond to a `UserPolicy` policy class."
msgstr "除了手動註冊 Model Policy，只要 Model 與 Policy 都遵守 Laravel 的命名常規，Laravel 就能自動找到 Policy。講得更仔細一點，各個 Policy 應放置與 Model 目錄下或  Model 目錄上層的 `Policies` 目錄內。因此，舉例來說，Model 可能被放在 `app/Models` 目錄內，而模型則可能被放在 `app/Policies` 目錄內。此時，Laravel 會先在 `app/Models/Policies` 內檢查 Policy，然後才到 `app/Policies` 內尋找。另外，Policy 名稱也必須與 Model 名稱相同，然後在後方加上 `Policy` 後綴。如此一來，`User` Model 對應的 Policy 類別就是 `UserPolicy`。"

#: docs/10.x/authorization.md:block 78 (paragraph)
msgid "If you would like to define your own policy discovery logic, you may register a custom policy discovery callback using the `Gate::guessPolicyNamesUsing` method. Typically, this method should be called from the `boot` method of your application's `AuthServiceProvider`:"
msgstr "若讀者想定義自己的 Policy Discovery 邏輯，可以通過 `Gate::guessPolicyNamesUsing` 方法來註冊自訂 Policy Discovery 閉包。通常來說，這個方法應該在專案的 `AuthServiceProvider` 內的 `boot` 方法內呼叫："

#: docs/10.x/authorization.md:block 79 (code)
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::guessPolicyNamesUsing(function (string $modelClass) {\n"
"    // Return the name of the policy class for the given model...\n"
"});\n"
msgstr "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::guessPolicyNamesUsing(function (string $modelClass) {\n"
"    // 為給定 Model 回傳 Policy 類別的名稱...\n"
"});\n"

#: docs/10.x/authorization.md:block 80 (quote)
msgid "**Warning** Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies."
msgstr "**Warning** 所有在 `AuthServiceProvider` 中顯式映射之 Policy 的優先級都會比 Auto-Discover 的 Policy 高。"

#: docs/10.x/authorization.md:block 82 (header)
msgid "Writing Policies"
msgstr "撰寫 Policy"

#: docs/10.x/authorization.md:block 84 (header)
msgid "Policy Methods"
msgstr "Policy 方法"

#: docs/10.x/authorization.md:block 85 (paragraph)
msgid "Once the policy class has been registered, you may add methods for each action it authorizes. For example, let's define an `update` method on our `PostPolicy` which determines if a given `App\\Models\\User` can update a given `App\\Models\\Post` instance."
msgstr "註冊好 Policy 類別後，可以為每個授權的動作加上方法。舉例來說，我們來在 `PostPolicy` 中定義一個 `update` 方法，用來判斷給定的 `App\\Models\\User` 可否更新給定的 `App\\Models\\Post` 實體。"

#: docs/10.x/authorization.md:block 86 (paragraph)
msgid "The `update` method will receive a `User` and a `Post` instance as its arguments, and should return `true` or `false` indicating whether the user is authorized to update the given `Post`. So, in this example, we will verify that the user's `id` matches the `user_id` on the post:"
msgstr "`update` 方法會在其引數內收到 `User` 與 `Post` 實體，並且應回傳 `true` 或 `false` 來判斷該使用者是否有權限更新給定的 `Post`。因此，在這個例子中，我們會認證使用者的 `id` 是否與貼文的 `user_id` 相符："

#: docs/10.x/authorization.md:block 87 (code)
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(User $user, Post $post): bool\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(User $user, Post $post): bool\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}\n"

#: docs/10.x/authorization.md:block 88 (paragraph)
msgid "You may continue to define additional methods on the policy as needed for the various actions it authorizes. For example, you might define `view` or `delete` methods to authorize various `Post` related actions, but remember you are free to give your policy methods any name you like."
msgstr "我們可以繼續在 Policy 內為各種所需的權限檢查定義更多額外方法。舉例來說，我們可以定義 `view` 或 `delete` 方法來對各種與 `Post` 有關的動作進行權限檢查。但不要忘了，你可以隨意為 Policy 的方法命名。"

#: docs/10.x/authorization.md:block 89 (paragraph)
msgid "If you used the `--model` option when generating your policy via the Artisan console, it will already contain methods for the `viewAny`, `view`, `create`, `update`, `delete`, `restore`, and `forceDelete` actions."
msgstr "通過 Artisan 主控台產生 Policy 時若有使用 `--model` 選項，則 Policy 就已經包含了 `viewAny`, `view`, `create`, `update`, `delete`, `restore` 與 `forceDelete` 動作的方法。"

#: docs/10.x/authorization.md:block 90 (quote)
msgid "**Note** All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected."
msgstr "**Note** 所有的 Policy 都經由 Laravel 的 [Service Container](/docs/{{version}}/container) 進行解析，這樣一來，可以在 Policy 的建構函式 (Constructor) 內對任何所需的相依項進行型別提示，這些相依項會被自動插入到 Class 內。"

#: docs/10.x/authorization.md:block 92 (header)
msgid "Policy Responses"
msgstr "Policy 回應"

#: docs/10.x/authorization.md:block 93 (paragraph)
msgid "So far, we have only examined policy methods that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` instance from your policy method:"
msgstr "到目前為止，我們只看過了回傳簡單布林值的 Policy 方法。但，有時候我們可能會想回傳一些更具體的回覆，並在其中包含錯誤訊息。為此，可以在 Policy 方法內回傳 `Illuminate\\Auth\\Access\\Response`："

#: docs/10.x/authorization.md:block 94 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}\n"

#: docs/10.x/authorization.md:block 95 (paragraph)
msgid "When returning an authorization response from your policy, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr "當從 Policy 內回傳授權回應時，`Gate::allows` 方法依然會回傳簡單的布林值。不過，可以使用 `Gate::inspect` 方法來取得 Gate 回傳的完整授權回應："

#: docs/10.x/authorization.md:block 96 (code)
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"$response = Gate::inspect('update', $post);\n\n"
"if ($response->allowed()) {\n"
"    // The action is authorized...\n"
"} else {\n"
"    echo $response->message();\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Gate;\n\n"
"$response = Gate::inspect('update', $post);\n\n"
"if ($response->allowed()) {\n"
"    // 已授權可進行該動作...\n"
"} else {\n"
"    echo $response->message();\n"
"}\n"

#: docs/10.x/authorization.md:block 98 (code)
msgid "Gate::authorize('update', $post);\n\n"
"// The action is authorized...\n"
msgstr "Gate::authorize('update', $post);\n\n"
"// The action is authorized...\n"

#: docs/10.x/authorization.md:block 101 (paragraph)
msgid "When an action is denied via a policy method, a `403` HTTP response is returned; however, it can sometimes be useful to return an alternative HTTP status code. You may customize the HTTP status code returned for a failed authorization check using the `denyWithStatus` static constructor on the `Illuminate\\Auth\\Access\\Response` class:"
msgstr "當 Policy 方法拒絕某個動作時，會回傳 `403` HTTP Response。不過，在某些情況下，若能回傳其他的 HTTP 狀態碼更好。我們可以使用 `Illuminate\\Auth\\Access\\Response` 類別的 `denyWithStatus` 靜態建構函式來自訂在授權檢查失敗的時候要回傳的 HTTP 狀態碼："

#: docs/10.x/authorization.md:block 102 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}\n"

#: docs/10.x/authorization.md:block 104 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}\n"

#: docs/10.x/authorization.md:block 106 (header)
msgid "Methods Without Models"
msgstr "沒有 Model 的方法"

#: docs/10.x/authorization.md:block 107 (paragraph)
msgid "Some policy methods only receive an instance of the currently authenticated user. This situation is most common when authorizing `create` actions. For example, if you are creating a blog, you may wish to determine if a user is authorized to create any posts at all. In these situations, your policy method should only expect to receive a user instance:"
msgstr "有些 Policy 方法只會收到目前登入使用者的實體。最常見的情況就是在授權 `create` 動作時。舉例來說，若正在建立部落格，則可能會想判斷某個使用者是否有權限建立任何貼文。在這種情況想，Policy 方法應該只會收到使用者實體："

#: docs/10.x/authorization.md:block 108 (code)
msgid "/**\n"
" * Determine if the given user can create posts.\n"
" */\n"
"public function create(User $user): bool\n"
"{\n"
"    return $user->role == 'writer';\n"
"}\n"
msgstr "/**\n"
" * Determine if the given user can create posts.\n"
" */\n"
"public function create(User $user): bool\n"
"{\n"
"    return $user->role == 'writer';\n"
"}\n"

#: docs/10.x/authorization.md:block 110 (header)
msgid "Guest Users"
msgstr "訪客使用者"

#: docs/10.x/authorization.md:block 111 (paragraph)
msgid "By default, all gates and policies automatically return `false` if the incoming HTTP request was not initiated by an authenticated user. However, you may allow these authorization checks to pass through to your gates and policies by declaring an \"optional\" type-hint or supplying a `null` default value for the user argument definition:"
msgstr "預設情況下，當連入 HTTP 請求並不是由已登入使用者發起的時候，所有的 Gate 與 Policy 都會回傳 `false`。不過，我們可以通過在使用者的引數定義上定義「可選」的型別提示，或是提供一個 `null` 預設值，來讓這些權限檢查可以進到 Gate 與 Policy 中："

#: docs/10.x/authorization.md:block 112 (code)
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(?User $user, Post $post): bool\n"
"    {\n"
"        return $user?->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 114 (header)
msgid "Policy Filters"
msgstr "Policy 篩選器"

#: docs/10.x/authorization.md:block 115 (paragraph)
msgid "For certain users, you may wish to authorize all actions within a given policy. To accomplish this, define a `before` method on the policy. The `before` method will be executed before any other methods on the policy, giving you an opportunity to authorize the action before the intended policy method is actually called. This feature is most commonly used for authorizing application administrators to perform any action:"
msgstr "我們可能會想讓特定使用者擁有某個 Policy 中擁有的所有權限。為此，可以在 Policy 內定義一個 `before` 方法。`before` 方法會在 Policy 內任何其他方法之前被執行，如此一來我們便有機會可以在預定的 Policy 方法被實際執行前對該行為進行授權。這個功能最常見的使用情況就是用來授權網站管理員來進行所有動作："

#: docs/10.x/authorization.md:block 116 (code)
msgid "use App\\Models\\User;\n\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" */\n"
"public function before(User $user, string $ability): bool|null\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n\n"
"    return null;\n"
"}\n"
msgstr "use App\\Models\\User;\n\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" */\n"
"public function before(User $user, string $ability): bool|null\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n\n"
"    return null;\n"
"}\n"

#: docs/10.x/authorization.md:block 117 (paragraph)
msgid "If you would like to deny all authorization checks for a particular type of user then you may return `false` from the `before` method. If `null` is returned, the authorization check will fall through to the policy method."
msgstr "若拒絕特定類型的使用者的所有授權，可以在 `before` 方法內回傳 `false`。若回傳 `null`，則權限檢查會繼續傳到 Policy 方法內。"

#: docs/10.x/authorization.md:block 118 (quote)
msgid "**Warning** The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked."
msgstr "**Warning** 若 Policy 類別內不含要檢查權限名稱的方法，則 `before` 方法將不會被呼叫。"

#: docs/10.x/authorization.md:block 120 (header)
msgid "Authorizing Actions Using Policies"
msgstr "通過 Policy 來授權動作"

#: docs/10.x/authorization.md:block 122 (header)
msgid "Via The User Model"
msgstr "通過 User Model"

#: docs/10.x/authorization.md:block 123 (paragraph)
msgid "The `App\\Models\\User` model that is included with your Laravel application includes two helpful methods for authorizing actions: `can` and `cannot`. The `can` and `cannot` methods receive the name of the action you wish to authorize and the relevant model. For example, let's determine if a user is authorized to update a given `App\\Models\\Post` model. Typically, this will be done within a controller method:"
msgstr "Laravel 專案內建的 `App\\Models\\User` Model 中包含了兩個實用的方法，可以用來進行權限檢查：`can` 與 `cannot`。`can` 與 `cannot` 方法接收用要進行權限檢查的動作名稱，以及相關的 Model。舉例來說，讓我們來判斷某個使用者是否有權限更新給定的 `App\\Models\\Post` Model。一般來說，這個檢查會在 Controller 的方法內進行："

#: docs/10.x/authorization.md:block 124 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 125 (paragraph)
msgid "If a [policy is registered](#registering-policies) for the given model, the `can` method will automatically call the appropriate policy and return the boolean result. If no policy is registered for the model, the `can` method will attempt to call the closure-based Gate matching the given action name."
msgstr "若已為給定的 Model [註冊好 Policy](#registering-policies)，則 `can` 方法會自動呼叫適當的 Policy，並回傳布林結果值。若沒有為該 Model 註冊好的 Policy，則 `can` 方法會呼叫符合給定動作名稱的閉包 Gate。"

#: docs/10.x/authorization.md:block 127 (header)
msgid "Actions That Don't Require Models"
msgstr "不需要 Model 的動作"

#: docs/10.x/authorization.md:block 128 (paragraph)
msgid "Remember, some actions may correspond to policy methods like `create` that do not require a model instance. In these situations, you may pass a class name to the `can` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr "請記得，某些對應到 Policy 方法的動作，如 `create`，並不要求 Model 實體。這種情況下，可以將類別名稱傳給 `can` 方法。類別名稱會用來判斷對動作進行權限檢查時要使用哪個 Policy："

#: docs/10.x/authorization.md:block 129 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Create the post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 131 (header)
msgid "Via Controller Helpers"
msgstr "通過 Controller 輔助函式"

#: docs/10.x/authorization.md:block 132 (paragraph)
msgid "In addition to helpful methods provided to the `App\\Models\\User` model, Laravel provides a helpful `authorize` method to any of your controllers which extend the `App\\Http\\Controllers\\Controller` base class."
msgstr "除了 `App\\Models\\User` Model 上提供的實用方法外，Laravel 還為所有繼承了 `App\\Http\\Controller` 基礎類別的 Controller 提供了一個實用的 `authorize` 方法。"

#: docs/10.x/authorization.md:block 133 (paragraph)
msgid "Like the `can` method, this method accepts the name of the action you wish to authorize and the relevant model. If the action is not authorized, the `authorize` method will throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception which the Laravel exception handler will automatically convert to an HTTP response with a 403 status code:"
msgstr "與 `can` 方法類似，這個方法接收要進行權限檢查的動作名稱、以及相關的 Model。若該動作未被授權，則 `authorize` 方法會擲回 `Illuminate\\Auth\\Access\\AuthroizationException` 例外，Laravel 的例外處理常式會自動將該例外轉成有 403 狀態碼的 HTTP 回應："

#: docs/10.x/authorization.md:block 134 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 137 (paragraph)
msgid "As previously discussed, some policy methods like `create` do not require a model instance. In these situations, you should pass a class name to the `authorize` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr "與前面討論過的一樣，某些 Policy 方法，如 `create`，並不要求 Model 實體。這種情況下，應將類別名稱傳給 `authorize` 方法。類別名稱會用來判斷對動作進行權限檢查時要使用哪個 Policy："

#: docs/10.x/authorization.md:block 138 (code)
msgid "use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): RedirectResponse\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 140 (header)
msgid "Authorizing Resource Controllers"
msgstr "授權 Resource Controller"

#: docs/10.x/authorization.md:block 141 (paragraph)
msgid "If you are utilizing [resource controllers](/docs/{{version}}/controllers#resource-controllers), you may make use of the `authorizeResource` method in your controller's constructor. This method will attach the appropriate `can` middleware definitions to the resource controller's methods."
msgstr "若使用 [Resource Controller](/docs/{{version}}/controllers#resource-controllers)，則可以在 Controller 建構函式中使用 `authorizeResource` 方法。這個方法會將適當的 `can` Middleware 定義附加到該 Resource Controller 的方法內。"

#: docs/10.x/authorization.md:block 142 (paragraph)
msgid "The `authorizeResource` method accepts the model's class name as its first argument, and the name of the route / request parameter that will contain the model's ID as its second argument. You should ensure your [resource controller](/docs/{{version}}/controllers#resource-controllers) is created using the `--model` flag so that it has the required method signatures and type hints:"
msgstr "`authorizeResource` 方法接受 Model 類別名稱作為其第一個引數，而路由名稱或包含 Model ID 的請求參數將為第二個引數。請先確定 [Resource Controller](/docs/{{version}}/controllers#resource-controllers) 是使用 `--model` 旗標建立的，這樣該類別才有所需的方法簽章與型別提示："

#: docs/10.x/authorization.md:block 143 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 144 (paragraph)
msgid "The following controller methods will be mapped to their corresponding policy method. When requests are routed to the given controller method, the corresponding policy method will automatically be invoked before the controller method is executed:"
msgstr "下列 Controller 方法會映射到其對應的 Policy 方法。當請求被路由到給定的 Controller 方法時，對應的 Policy 方法會在 Controller 方法執行前被自動叫用："

#: docs/10.x/authorization.md:block 146 (table)
msgid "Controller Method"
msgstr "Controller 方法"

#: docs/10.x/authorization.md:block 146 (table)
msgid "Policy Method"
msgstr "Policy 方法"

#: docs/10.x/authorization.md:block 146 (table)
msgid "index"
msgstr "index"

#: docs/10.x/authorization.md:block 146 (table)
msgid "viewAny"
msgstr "viewAny"

#: docs/10.x/authorization.md:block 146 (table)
msgid "show"
msgstr "show"

#: docs/10.x/authorization.md:block 146 (table)
msgid "view"
msgstr "view"

#: docs/10.x/authorization.md:block 146 (table)
msgid "create"
msgstr "create"

#: docs/10.x/authorization.md:block 146 (table)
msgid "store"
msgstr "store"

#: docs/10.x/authorization.md:block 146 (table)
msgid "edit"
msgstr "edit"

#: docs/10.x/authorization.md:block 146 (table)
msgid "update"
msgstr "update"

#: docs/10.x/authorization.md:block 146 (table)
msgid "destroy"
msgstr "destroy"

#: docs/10.x/authorization.md:block 146 (table)
msgid "delete"
msgstr "delete"

#: docs/10.x/authorization.md:block 148 (quote)
msgid "**Note** You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`."
msgstr "**Note** 可以使用 `--model` 選項搭配 `make:policy` 指令來快速為給定的 Model 產生 Policy：`php artisan make:policy PostPolicy --model=Post`。"

#: docs/10.x/authorization.md:block 150 (header)
msgid "Via Middleware"
msgstr "通過 Middleware"

#: docs/10.x/authorization.md:block 151 (paragraph)
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware is assigned the `can` key in your `App\\Http\\Kernel` class. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr "Laravel 提供了一個可以用來在連入請求進入路由或 Controller 前進行權限檢查的 Middleware。預設情況下，`Illuminate\\Auth\\Middleware\\Authorize` Middleware 在 `App\\Http\\Kernel` 類別內被指派到 `can` 索引鍵上。我們來看看一個使用 `can` Middleware 對使用者能否更新貼文進行權限檢查的例子："

#: docs/10.x/authorization.md:block 152 (code)
msgid "use App\\Models\\Post;\n\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // The current user may update the post...\n"
"})->middleware('can:update,post');\n"
msgstr "use App\\Models\\Post;\n\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // 目前使用者可更新該貼文...\n"
"})->middleware('can:update,post');\n"

#: docs/10.x/authorization.md:block 153 (paragraph)
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), an `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr ""

#: docs/10.x/authorization.md:block 154 (paragraph)
msgid "For convenience, you may also attach the `can` middleware to your route using the `can` method:"
msgstr "為了方便起見，也可以使用 `can` 方法來將 `can` Middleware 附加到路由上："

#: docs/10.x/authorization.md:block 155 (code)
msgid "use App\\Models\\Post;\n\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // The current user may update the post...\n"
"})->can('update', 'post');\n"
msgstr "use App\\Models\\Post;\n\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // 目前使用者可更新該貼文...\n"
"})->can('update', 'post');\n"

#: docs/10.x/authorization.md:block 158 (paragraph)
msgid "Again, some policy methods like `create` do not require a model instance. In these situations, you may pass a class name to the middleware. The class name will be used to determine which policy to use when authorizing the action:"
msgstr "再強調一次，某些 Policy 方法，如 `create`，並不要求 Model 實體。這種情況下，可以將類別名稱傳給 Middleware。這個類別名稱會用來判斷對動作進行權限檢查時要使用哪個 Policy："

#: docs/10.x/authorization.md:block 159 (code)
msgid "Route::post('/post', function () {\n"
"    // The current user may create posts...\n"
"})->middleware('can:create,App\\Models\\Post');\n"
msgstr "Route::post('/post', function () {\n"
"    // 目前使用者可建立貼文...\n"
"})->middleware('can:create,App\\Models\\Post');\n"

#: docs/10.x/authorization.md:block 160 (paragraph)
msgid "Specifying the entire class name within a string middleware definition can become cumbersome. For that reason, you may choose to attach the `can` middleware to your route using the `can` method:"
msgstr "在字串形式的 Middleware 定義中指定完整的類別名稱可能會有點麻煩。因此，我們也可以使用 `can` 方法來將 `can` Middleware 附加到路由上："

#: docs/10.x/authorization.md:block 161 (code)
msgid "use App\\Models\\Post;\n\n"
"Route::post('/post', function () {\n"
"    // The current user may create posts...\n"
"})->can('create', Post::class);\n"
msgstr "use App\\Models\\Post;\n\n"
"Route::post('/post', function () {\n"
"    // 目前使用者可建立貼文...\n"
"})->can('create', Post::class);\n"

#: docs/10.x/authorization.md:block 163 (header)
msgid "Via Blade Templates"
msgstr "通過 Blade 樣板"

#: docs/10.x/authorization.md:block 164 (paragraph)
msgid "When writing Blade templates, you may wish to display a portion of the page only if the user is authorized to perform a given action. For example, you may wish to show an update form for a blog post only if the user can actually update the post. In this situation, you may use the `@can` and `@cannot` directives:"
msgstr "在撰寫 Blade 樣板時，我們可能會在使用者有權限執行給定動作時顯示某一部分的頁面。舉例來說，我們可能想在使用者真的可以更新貼文時才顯示更新表單。這時，可以使用 `@can` 與 `@cannot` 指示詞："

#: docs/10.x/authorization.md:block 165 (code)
msgid "@can('update', $post)\n"
"    <!-- The current user can update the post... -->\n"
"@elsecan('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create new posts... -->\n"
"@else\n"
"    <!-- ... -->\n"
"@endcan\n\n"
"@cannot('update', $post)\n"
"    <!-- The current user cannot update the post... -->\n"
"@elsecannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user cannot create new posts... -->\n"
"@endcannot\n"
msgstr "@can('update', $post)\n"
"    <!-- 目前使用者可以更新貼文... -->\n"
"@elsecan('create', App\\Models\\Post::class)\n"
"    <!-- 目前使用者可以建立新貼文... -->\n"
"@else\n"
"    <!-- ... -->\n"
"@endcan\n\n"
"@cannot('update', $post)\n"
"    <!-- 目前使用者不能更新貼文... -->\n"
"@elsecannot('create', App\\Models\\Post::class)\n"
"    <!-- 目前使用者不能建立新貼文... -->\n"
"@endcannot\n"

#: docs/10.x/authorization.md:block 166 (paragraph)
msgid "These directives are convenient shortcuts for writing `@if` and `@unless` statements. The `@can` and `@cannot` statements above are equivalent to the following statements:"
msgstr "這些指示詞是撰寫 `@if` 與 `@unless` 陳述式時的方便捷徑。上方的 `@can` 與 `@cannot` 陳述式與下列陳述式相同："

#: docs/10.x/authorization.md:block 167 (code)
msgid "@if (Auth::user()->can('update', $post))\n"
"    <!-- The current user can update the post... -->\n"
"@endif\n\n"
"@unless (Auth::user()->can('update', $post))\n"
"    <!-- The current user cannot update the post... -->\n"
"@endunless\n"
msgstr "@if (Auth::user()->can('update', $post))\n"
"    <!-- 目前的使用者可更新該貼文… -->\n"
"@endif\n\n"
"@unless (Auth::user()->can('update', $post))\n"
"    <!-- 目前的使用者不可更新該貼文… -->\n"
"@endunless\n"

#: docs/10.x/authorization.md:block 168 (paragraph)
msgid "You may also determine if a user is authorized to perform any action from a given array of actions. To accomplish this, use the `@canany` directive:"
msgstr "可以在包含一系列動作的陣列中判斷某個使用者是否有權限執行其中的任意動作。為此，請使用 `@canany` 指示詞："

#: docs/10.x/authorization.md:block 169 (code)
msgid "@canany(['update', 'view', 'delete'], $post)\n"
"    <!-- The current user can update, view, or delete the post... -->\n"
"@elsecanany(['create'], \\App\\Models\\Post::class)\n"
"    <!-- The current user can create a post... -->\n"
"@endcanany\n"
msgstr "@canany(['update', 'view', 'delete'], $post)\n"
"    <!-- 目前的使用者可更新、檢視、或刪除該貼文… -->\n"
"@elsecanany(['create'], \\App\\Models\\Post::class)\n"
"    <!-- 目前的使用者可建立貼文… -->\n"
"@endcanany\n"

#: docs/10.x/authorization.md:block 172 (paragraph)
msgid "Like most of the other authorization methods, you may pass a class name to the `@can` and `@cannot` directives if the action does not require a model instance:"
msgstr "與其他大多數的授權方法一樣，當某個動作不需要 Model 實體時，可以將類別名稱傳給 `@can` 與 `@cannot` 指示詞："

#: docs/10.x/authorization.md:block 173 (code)
msgid "@can('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create posts... -->\n"
"@endcan\n\n"
"@cannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user can't create posts... -->\n"
"@endcannot\n"
msgstr "@can('create', App\\Models\\Post::class)\n"
"    <!-- 目前的使用者可建立貼文… -->\n"
"@endcan\n\n"
"@cannot('create', App\\Models\\Post::class)\n"
"    <!-- 目前的使用者不可建立貼文… -->\n"
"@endcannot\n"

#: docs/10.x/authorization.md:block 176 (paragraph)
msgid "When authorizing actions using policies, you may pass an array as the second argument to the various authorization functions and helpers. The first element in the array will be used to determine which policy should be invoked, while the rest of the array elements are passed as parameters to the policy method and can be used for additional context when making authorization decisions. For example, consider the following `PostPolicy` method definition which contains an additional `$category` parameter:"
msgstr "當使用 Policy 對動作進行權限檢查時，可以將陣列作為第二引數傳給各種權限檢查函式與輔助函式。陣列中的第一個元素是用來判斷要叫用哪個 Policy 的，而剩下的元素則會作為參數傳給 Policy 方法，可用來在做權限檢查時提供額外的上下文。舉例來說，假設有下列 `PostPolicy` 方法定義，其中包含了一個額外的 `$category` 參數："

#: docs/10.x/authorization.md:block 177 (code)
msgid "/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post, int $category): bool\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}\n"
msgstr "/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post, int $category): bool\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}\n"

#: docs/10.x/authorization.md:block 178 (paragraph)
msgid "When attempting to determine if the authenticated user can update a given post, we can invoke this policy method like so:"
msgstr "在嘗試判斷登入使用者能否更新給定貼文時，我們可以像這樣叫用該 Policy 方法："

#: docs/10.x/authorization.md:block 179 (code)
msgid "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): RedirectResponse\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 7 (paragraph)
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr "在製作網站時，不需要在 Gate 或 Policy 間二選一。大多數的專案都在某種程度上組合使用 Gate 與 Policy，混著用完全沒問題！Gate 最適合用來處理與 Model 或資源無關的動作，如檢視後台的「縱覽」頁。相較之下，Policy 則應使用於想授權對特定 Model 或 Resource 的動作時。"

#: docs/8.x/authorization.md:block 12 (quote)
msgid "{note} Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules."
msgstr "{note} Gate 是學習基礎 Laravel 授權功能的最好的方法。但是，在製作大型 Laravel 應用程式時，應考慮通過 [Policy](#creating-policies) 來整理各個授權規則。"

#: docs/8.x/authorization.md:block 15 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"

#: docs/8.x/authorization.md:block 17 (code)
msgid "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"
msgstr "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"

#: docs/8.x/authorization.md:block 21 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 33 (code)
msgid "use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('create-post', function (User $user, Category $category, $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n\n"
"    return true;\n"
"});\n\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}\n"
msgstr "use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('create-post', function (User $user, Category $category, $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n\n"
"    return true;\n"
"});\n\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}\n"

#: docs/8.x/authorization.md:block 45 (code)
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::before(function ($user, $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::before(function ($user, $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"

#: docs/8.x/authorization.md:block 48 (code)
msgid "Gate::after(function ($user, $ability, $result, $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr "Gate::after(function ($user, $ability, $result, $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"

#: docs/8.x/authorization.md:block 53 (code)
msgid "use Illuminate\\Support\\Facades\\Auth;\n\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn ($user) => $user->banned());\n"
msgstr "use Illuminate\\Support\\Facades\\Auth;\n\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn ($user) => $user->banned());\n"

#: docs/8.x/authorization.md:block 59 (paragraph)
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have a `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr "Policy 是用來依照特定 Model 或資源阻止授權邏輯的類別。舉例來說，若你的專案是個部落格，則可能會有 `App\\Models\\Post` Model 以及對應的 `App\\Policies\\PostPolicy` 來授權使用者進行建立或更新貼文之類的動作。"

#: docs/8.x/authorization.md:block 68 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        //\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 73 (code)
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::guessPolicyNamesUsing(function ($modelClass) {\n"
"    // Return the name of the policy class for the given model...\n"
"});\n"
msgstr "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::guessPolicyNamesUsing(function ($modelClass) {\n"
"    // 為給定 Model 回傳 Policy 類別的名稱...\n"
"});\n"

#: docs/8.x/authorization.md:block 74 (quote)
msgid "{note} Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies."
msgstr "{note} 所有在 `AuthServiceProvider` 中顯式映射之 Policy 的優先級都會比 Auto-Discover 的 Policy 高。"

#: docs/8.x/authorization.md:block 81 (code)
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(User $user, Post $post)\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(User $user, Post $post)\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 84 (quote)
msgid "{tip} All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected."
msgstr "{tip} 所有的 Policy 都經由 Laravel 的 [Service Container](/docs/{{version}}/container) 進行解析，這樣一來，可以在 Policy 的 ^[Constructor](建構函式) 內對任何所需的相依性項目進行型別提示，這些相依性項目會被自動插入到類別內。"

#: docs/8.x/authorization.md:block 88 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}\n"

#: docs/8.x/authorization.md:block 96 (code)
msgid "/**\n"
" * Determine if the given user can create posts.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @return bool\n"
" */\n"
"public function create(User $user)\n"
"{\n"
"    return $user->role == 'writer';\n"
"}\n"
msgstr "/**\n"
" * Determine if the given user can create posts.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @return bool\n"
" */\n"
"public function create(User $user)\n"
"{\n"
"    return $user->role == 'writer';\n"
"}\n"

#: docs/8.x/authorization.md:block 100 (code)
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(?User $user, Post $post)\n"
"    {\n"
"        return optional($user)->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(?User $user, Post $post)\n"
"    {\n"
"        return optional($user)->id === $post->user_id;\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 104 (code)
msgid "use App\\Models\\User;\n\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  string  $ability\n"
" * @return void|bool\n"
" */\n"
"public function before(User $user, $ability)\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"}\n"
msgstr "use App\\Models\\User;\n\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  string  $ability\n"
" * @return void|bool\n"
" */\n"
"public function before(User $user, $ability)\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 106 (quote)
msgid "{note} The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked."
msgstr "{note} 若 Policy 類別內不含要檢查權限名稱的方法，則 `before` 方法將不會被呼叫。"

#: docs/8.x/authorization.md:block 112 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 117 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Create the post...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Create the post...\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 122 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 126 (code)
msgid "use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request)\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request)\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n"
"}\n"

#: docs/8.x/authorization.md:block 131 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"

#: docs/8.x/authorization.md:block 134 (quote)
msgid "{tip} You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`."
msgstr "{tip} 可以使用 `--model` 選項搭配 `make:policy` 指令來快速為給定的 Model 產生 Policy：`php artisan make:policy PostPolicy --model=Post`。"

#: docs/8.x/authorization.md:block 139 (paragraph)
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), a `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr "在此例子中，我們將兩個引數傳給了 `can` Middleware。第一個引數是我們想進行權限檢查的動作名稱，而第二個引數是我們想傳給 Policy 方法的路由參數。在這個例子中，由於我們使用了[隱式 Model 繫結](/docs/{{version}}/routing#implicit-binding)，所以會將 `App\\Models\\Post` Model 傳給 Policy 方法。若使用者沒有權限執行給定的動作，則這個 Middleware 會回傳狀態碼 403 的 HTTP 回應。"

#: docs/8.x/authorization.md:block 163 (code)
msgid "/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @param  int  $category\n"
" * @return bool\n"
" */\n"
"public function update(User $user, Post $post, int $category)\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}\n"
msgstr "/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @param  int  $category\n"
" * @return bool\n"
" */\n"
"public function update(User $user, Post $post, int $category)\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}\n"

#: docs/8.x/authorization.md:block 165 (code)
msgid "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post)\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n"
"}\n"
msgstr "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post)\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n"
"}\n"

#: docs/9.x/authorization.md:block 59 (code)
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn ($user) => $user->banned());\n"
msgstr "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn ($user) => $user->banned());\n"

#: docs/9.x/authorization.md:block 102 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}\n"

#: docs/9.x/authorization.md:block 104 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}\n"

#: docs/master/authorization.md:block 15 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"

#: docs/master/authorization.md:block 17 (code)
msgid "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"
msgstr "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"

#: docs/master/authorization.md:block 21 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): Response\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): Response\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // 更新貼文...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 74 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        // ...\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 112 (code)
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(?User $user, Post $post): bool\n"
"    {\n"
"        return optional($user)->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(?User $user, Post $post): bool\n"
"    {\n"
"        return optional($user)->id === $post->user_id;\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 124 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): Response\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): Response\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // 更新貼文...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 129 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     */\n"
"    public function store(Request $request): Response\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Create the post...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     */\n"
"    public function store(Request $request): Response\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // 建立貼文...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 134 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): Response\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): Response\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // 目前使用者可更新此部落格貼文...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 138 (code)
msgid "use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): Response\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n\n"
"    return response()->noContent();\n"
"}\n"
msgstr "use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): Response\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // 目前使用者可建立部落格貼文...\n\n"
"    return response()->noContent();\n"
"}\n"

#: docs/master/authorization.md:block 143 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"

#: docs/master/authorization.md:block 179 (code)
msgid "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): Response\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n\n"
"    return response()->noContent();\n"
"}\n"
msgstr "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): Response\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // 目前使用者可更新部落格貼文...\n\n"
"    return response()->noContent();\n"
"}\n"

