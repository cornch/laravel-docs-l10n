msgid ""
msgstr ""

#: ./docs/8.x/artisan.md:1
#: ./docs/9.x/artisan.md:1
#: ./docs/10.x/artisan.md:1
#: ./docs/11.x/artisan.md:1
#: ./docs/master/artisan.md:1
msgid "Artisan Console"
msgstr ""

#: ./docs/8.x/artisan.md:3
#: ./docs/9.x/artisan.md:3
#: ./docs/10.x/artisan.md:3
#: ./docs/11.x/artisan.md:3
#: ./docs/master/artisan.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/artisan.md:4
#: ./docs/9.x/artisan.md:4
#: ./docs/10.x/artisan.md:4
#: ./docs/11.x/artisan.md:4
#: ./docs/master/artisan.md:4
msgid "[Tinker (REPL)](#tinker)"
msgstr ""

#: ./docs/8.x/artisan.md:5
#: ./docs/9.x/artisan.md:5
#: ./docs/10.x/artisan.md:5
#: ./docs/11.x/artisan.md:5
#: ./docs/master/artisan.md:5
msgid "[Writing Commands](#writing-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:6
#: ./docs/9.x/artisan.md:6
#: ./docs/10.x/artisan.md:6
#: ./docs/11.x/artisan.md:6
#: ./docs/master/artisan.md:6
msgid "[Generating Commands](#generating-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:7
#: ./docs/9.x/artisan.md:7
#: ./docs/10.x/artisan.md:7
#: ./docs/11.x/artisan.md:7
#: ./docs/master/artisan.md:7
msgid "[Command Structure](#command-structure)"
msgstr ""

#: ./docs/8.x/artisan.md:8
#: ./docs/9.x/artisan.md:8
#: ./docs/10.x/artisan.md:8
#: ./docs/11.x/artisan.md:8
#: ./docs/master/artisan.md:8
msgid "[Closure Commands](#closure-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:9
#: ./docs/9.x/artisan.md:10
#: ./docs/10.x/artisan.md:10
#: ./docs/11.x/artisan.md:10
#: ./docs/master/artisan.md:10
msgid "[Defining Input Expectations](#defining-input-expectations)"
msgstr ""

#: ./docs/9.x/artisan.md:9
#: ./docs/10.x/artisan.md:9
#: ./docs/11.x/artisan.md:9
#: ./docs/master/artisan.md:9
msgid "[Isolatable Commands](#isolatable-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:10
#: ./docs/9.x/artisan.md:11
#: ./docs/10.x/artisan.md:11
#: ./docs/11.x/artisan.md:11
#: ./docs/master/artisan.md:11
msgid "[Arguments](#arguments)"
msgstr ""

#: ./docs/8.x/artisan.md:11
#: ./docs/9.x/artisan.md:12
#: ./docs/10.x/artisan.md:12
#: ./docs/11.x/artisan.md:12
#: ./docs/master/artisan.md:12
msgid "[Options](#options)"
msgstr ""

#: ./docs/8.x/artisan.md:12
#: ./docs/9.x/artisan.md:13
#: ./docs/10.x/artisan.md:13
#: ./docs/11.x/artisan.md:13
#: ./docs/master/artisan.md:13
msgid "[Input Arrays](#input-arrays)"
msgstr ""

#: ./docs/8.x/artisan.md:13
#: ./docs/9.x/artisan.md:14
#: ./docs/10.x/artisan.md:14
#: ./docs/11.x/artisan.md:14
#: ./docs/master/artisan.md:14
msgid "[Input Descriptions](#input-descriptions)"
msgstr ""

#: ./docs/8.x/artisan.md:14
#: ./docs/9.x/artisan.md:15
#: ./docs/10.x/artisan.md:16
#: ./docs/11.x/artisan.md:16
#: ./docs/master/artisan.md:16
msgid "[Command I/O](#command-io)"
msgstr ""

#: ./docs/10.x/artisan.md:15
#: ./docs/11.x/artisan.md:15
#: ./docs/master/artisan.md:15
msgid "[Prompting for Missing Input](#prompting-for-missing-input)"
msgstr ""

#: ./docs/8.x/artisan.md:15
#: ./docs/9.x/artisan.md:16
#: ./docs/10.x/artisan.md:17
#: ./docs/11.x/artisan.md:17
#: ./docs/master/artisan.md:17
msgid "[Retrieving Input](#retrieving-input)"
msgstr ""

#: ./docs/8.x/artisan.md:16
#: ./docs/9.x/artisan.md:17
msgid "[Prompting For Input](#prompting-for-input)"
msgstr ""

#: ./docs/8.x/artisan.md:17
#: ./docs/9.x/artisan.md:18
#: ./docs/10.x/artisan.md:19
#: ./docs/11.x/artisan.md:19
#: ./docs/master/artisan.md:19
msgid "[Writing Output](#writing-output)"
msgstr ""

#: ./docs/10.x/artisan.md:18
#: ./docs/11.x/artisan.md:18
#: ./docs/master/artisan.md:18
msgid "[Prompting for Input](#prompting-for-input)"
msgstr ""

#: ./docs/8.x/artisan.md:18
#: ./docs/9.x/artisan.md:19
#: ./docs/10.x/artisan.md:20
#: ./docs/11.x/artisan.md:20
#: ./docs/master/artisan.md:20
msgid "[Registering Commands](#registering-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:19
#: ./docs/9.x/artisan.md:20
#: ./docs/10.x/artisan.md:21
#: ./docs/11.x/artisan.md:21
#: ./docs/master/artisan.md:21
msgid "[Programmatically Executing Commands](#programmatically-executing-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:20
#: ./docs/9.x/artisan.md:21
#: ./docs/10.x/artisan.md:22
#: ./docs/11.x/artisan.md:22
#: ./docs/master/artisan.md:22
msgid "[Calling Commands From Other Commands](#calling-commands-from-other-commands)"
msgstr ""

#: ./docs/8.x/artisan.md:21
#: ./docs/9.x/artisan.md:22
#: ./docs/10.x/artisan.md:23
#: ./docs/11.x/artisan.md:23
#: ./docs/master/artisan.md:23
msgid "[Signal Handling](#signal-handling)"
msgstr ""

#: ./docs/8.x/artisan.md:22
#: ./docs/9.x/artisan.md:23
#: ./docs/10.x/artisan.md:24
#: ./docs/11.x/artisan.md:24
#: ./docs/master/artisan.md:24
msgid "[Stub Customization](#stub-customization)"
msgstr ""

#: ./docs/8.x/artisan.md:23
#: ./docs/9.x/artisan.md:24
#: ./docs/10.x/artisan.md:25
#: ./docs/11.x/artisan.md:25
#: ./docs/master/artisan.md:25
msgid "[Events](#events)"
msgstr ""

#: ./docs/8.x/artisan.md:25
#: ./docs/9.x/artisan.md:26
#: ./docs/10.x/artisan.md:27
#: ./docs/11.x/artisan.md:27
#: ./docs/master/artisan.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:26
#: ./docs/9.x/artisan.md:27
#: ./docs/10.x/artisan.md:28
#: ./docs/11.x/artisan.md:28
#: ./docs/master/artisan.md:28
msgid "Introduction"
msgstr ""

#: ./docs/8.x/artisan.md:28
#: ./docs/9.x/artisan.md:29
#: ./docs/10.x/artisan.md:30
#: ./docs/11.x/artisan.md:30
#: ./docs/master/artisan.md:30
msgid "Artisan is the command line interface included with Laravel. Artisan exists at the root of your application as the `artisan` script and provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the `list` command:"
msgstr ""

#: ./docs/8.x/artisan.md:30
#: ./docs/9.x/artisan.md:31
#: ./docs/10.x/artisan.md:32
#: ./docs/11.x/artisan.md:32
#: ./docs/master/artisan.md:32
msgid "php artisan list"
msgstr ""

#: ./docs/8.x/artisan.md:32
#: ./docs/9.x/artisan.md:35
#: ./docs/10.x/artisan.md:36
#: ./docs/11.x/artisan.md:36
#: ./docs/master/artisan.md:36
msgid "Every command also includes a \"help\" screen which displays and describes the command's available arguments and options. To view a help screen, precede the name of the command with `help`:"
msgstr ""

#: ./docs/8.x/artisan.md:34
#: ./docs/9.x/artisan.md:37
#: ./docs/10.x/artisan.md:38
#: ./docs/11.x/artisan.md:38
#: ./docs/master/artisan.md:38
msgid "php artisan help migrate"
msgstr ""

#: ./docs/8.x/artisan.md:36
#: ./docs/9.x/artisan.md:41
#: ./docs/10.x/artisan.md:42
#: ./docs/11.x/artisan.md:42
#: ./docs/master/artisan.md:42
#~ msgctxt "P"
#~ msgid "<a name=\"laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:37
#: ./docs/9.x/artisan.md:42
#: ./docs/10.x/artisan.md:43
#: ./docs/11.x/artisan.md:43
#: ./docs/master/artisan.md:43
msgid "Laravel Sail"
msgstr ""

#: ./docs/8.x/artisan.md:39
#: ./docs/9.x/artisan.md:44
#: ./docs/10.x/artisan.md:45
#: ./docs/11.x/artisan.md:45
#: ./docs/master/artisan.md:45
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail) as your local development environment, remember to use the `sail` command line to invoke Artisan commands. Sail will execute your Artisan commands within your application's Docker containers:"
msgstr ""

#: ./docs/8.x/artisan.md:41
msgid "./sail artisan list"
msgstr ""

#: ./docs/8.x/artisan.md:43
#: ./docs/9.x/artisan.md:50
#: ./docs/10.x/artisan.md:51
#: ./docs/11.x/artisan.md:51
#: ./docs/master/artisan.md:51
#~ msgctxt "P"
#~ msgid "<a name=\"tinker\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:44
#: ./docs/9.x/artisan.md:51
#: ./docs/10.x/artisan.md:52
#: ./docs/11.x/artisan.md:52
#: ./docs/master/artisan.md:52
msgid "Tinker (REPL)"
msgstr ""

#: ./docs/8.x/artisan.md:46
#: ./docs/9.x/artisan.md:53
#: ./docs/10.x/artisan.md:54
#: ./docs/11.x/artisan.md:54
#: ./docs/master/artisan.md:54
msgid "Laravel Tinker is a powerful REPL for the Laravel framework, powered by the [PsySH](https://github.com/bobthecow/psysh) package."
msgstr ""

#: ./docs/9.x/artisan.md:46
#: ./docs/10.x/artisan.md:47
#: ./docs/11.x/artisan.md:47
#: ./docs/master/artisan.md:47
msgid "./vendor/bin/sail artisan list"
msgstr ""

#: ./docs/8.x/artisan.md:48
#: ./docs/9.x/artisan.md:55
#: ./docs/10.x/artisan.md:56
#: ./docs/11.x/artisan.md:56
#: ./docs/master/artisan.md:56
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:49
#: ./docs/9.x/artisan.md:56
#: ./docs/10.x/artisan.md:57
#: ./docs/11.x/artisan.md:57
#: ./docs/master/artisan.md:57
msgid "Installation"
msgstr ""

#: ./docs/8.x/artisan.md:51
#: ./docs/9.x/artisan.md:58
#: ./docs/10.x/artisan.md:59
#: ./docs/11.x/artisan.md:59
#: ./docs/master/artisan.md:59
msgid "All Laravel applications include Tinker by default. However, you may install Tinker using Composer if you have previously removed it from your application:"
msgstr ""

#: ./docs/8.x/artisan.md:53
#: ./docs/9.x/artisan.md:60
#: ./docs/10.x/artisan.md:61
#: ./docs/11.x/artisan.md:61
#: ./docs/master/artisan.md:61
msgid "composer require laravel/tinker"
msgstr ""

#: ./docs/8.x/artisan.md:55
#: ./docs/9.x/artisan.md:65
msgid "Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!"
msgstr ""

#: ./docs/8.x/artisan.md:57
#: ./docs/9.x/artisan.md:67
#: ./docs/10.x/artisan.md:68
#: ./docs/11.x/artisan.md:68
#: ./docs/master/artisan.md:68
#~ msgctxt "P"
#~ msgid "<a name=\"usage\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:58
#: ./docs/9.x/artisan.md:68
#: ./docs/10.x/artisan.md:69
#: ./docs/11.x/artisan.md:69
#: ./docs/master/artisan.md:69
msgid "Usage"
msgstr ""

#: ./docs/8.x/artisan.md:60
#: ./docs/9.x/artisan.md:70
#: ./docs/10.x/artisan.md:71
#: ./docs/11.x/artisan.md:71
#: ./docs/master/artisan.md:71
msgid "Tinker allows you to interact with your entire Laravel application on the command line, including your Eloquent models, jobs, events, and more. To enter the Tinker environment, run the `tinker` Artisan command:"
msgstr ""

#: ./docs/8.x/artisan.md:62
#: ./docs/9.x/artisan.md:72
#: ./docs/10.x/artisan.md:73
#: ./docs/11.x/artisan.md:73
#: ./docs/master/artisan.md:73
msgid "php artisan tinker"
msgstr ""

#: ./docs/8.x/artisan.md:64
#: ./docs/9.x/artisan.md:76
#: ./docs/10.x/artisan.md:77
#: ./docs/11.x/artisan.md:77
#: ./docs/master/artisan.md:77
msgid "You can publish Tinker's configuration file using the `vendor:publish` command:"
msgstr ""

#: ./docs/10.x/artisan.md:66
#: ./docs/11.x/artisan.md:66
#: ./docs/master/artisan.md:66
msgid "Looking for hot reloading, multiline code editing, and autocompletion when interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!"
msgstr ""

#: ./docs/8.x/artisan.md:66
#: ./docs/9.x/artisan.md:78
#: ./docs/10.x/artisan.md:79
#: ./docs/11.x/artisan.md:79
#: ./docs/master/artisan.md:79
msgid "php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\""
msgstr ""

#: ./docs/8.x/artisan.md:68
#: ./docs/9.x/artisan.md:83
#: ./docs/10.x/artisan.md:84
#: ./docs/11.x/artisan.md:84
#: ./docs/master/artisan.md:84
msgid "The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs."
msgstr ""

#: ./docs/8.x/artisan.md:70
#: ./docs/9.x/artisan.md:85
#: ./docs/10.x/artisan.md:86
#: ./docs/11.x/artisan.md:86
#: ./docs/master/artisan.md:86
#~ msgctxt "P"
#~ msgid "<a name=\"command-allow-list\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:71
#: ./docs/9.x/artisan.md:86
#: ./docs/10.x/artisan.md:87
#: ./docs/11.x/artisan.md:87
#: ./docs/master/artisan.md:87
msgid "Command Allow List"
msgstr ""

#: ./docs/8.x/artisan.md:73
#: ./docs/9.x/artisan.md:88
#: ./docs/10.x/artisan.md:89
#: ./docs/master/artisan.md:89
msgid "Tinker utilizes an \"allow\" list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` commands. If you would like to allow more commands you may add them to the `commands` array in your `tinker.php` configuration file:"
msgstr ""

#: ./docs/8.x/artisan.md:75
#: ./docs/9.x/artisan.md:90
#: ./docs/10.x/artisan.md:91
#: ./docs/11.x/artisan.md:91
#: ./docs/master/artisan.md:91
msgid ""
"'commands' => [\n"
"    // App\\Console\\Commands\\ExampleCommand::class,\n"
"],"
msgstr ""

#: ./docs/8.x/artisan.md:79
#: ./docs/9.x/artisan.md:94
#: ./docs/10.x/artisan.md:95
#: ./docs/11.x/artisan.md:95
#: ./docs/master/artisan.md:95
#~ msgctxt "P"
#~ msgid "<a name=\"classes-that-should-not-be-aliased\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:80
#: ./docs/9.x/artisan.md:95
#: ./docs/10.x/artisan.md:96
#: ./docs/11.x/artisan.md:96
#: ./docs/master/artisan.md:96
msgid "Classes That Should Not Be Aliased"
msgstr ""

#: ./docs/8.x/artisan.md:82
#: ./docs/9.x/artisan.md:97
#: ./docs/10.x/artisan.md:98
#: ./docs/11.x/artisan.md:98
#: ./docs/master/artisan.md:98
msgid "Typically, Tinker automatically aliases classes as you interact with them in Tinker. However, you may wish to never alias some classes. You may accomplish this by listing the classes in the `dont_alias` array of your `tinker.php` configuration file:"
msgstr ""

#: ./docs/8.x/artisan.md:84
#: ./docs/9.x/artisan.md:99
#: ./docs/10.x/artisan.md:100
#: ./docs/11.x/artisan.md:100
#: ./docs/master/artisan.md:100
msgid ""
"'dont_alias' => [\n"
"    App\\Models\\User::class,\n"
"],"
msgstr ""

#: ./docs/8.x/artisan.md:88
#: ./docs/9.x/artisan.md:103
#: ./docs/10.x/artisan.md:104
#: ./docs/11.x/artisan.md:104
#: ./docs/master/artisan.md:104
#~ msgctxt "P"
#~ msgid "<a name=\"writing-commands\"></a>"
#~ msgstr ""

#: ./docs/11.x/artisan.md:89
msgid "Tinker utilizes an \"allow\" list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `migrate:install`, `up`, and `optimize` commands. If you would like to allow more commands you may add them to the `commands` array in your `tinker.php` configuration file:"
msgstr ""

#: ./docs/8.x/artisan.md:89
#: ./docs/9.x/artisan.md:104
#: ./docs/10.x/artisan.md:105
#: ./docs/11.x/artisan.md:105
#: ./docs/master/artisan.md:105
msgid "Writing Commands"
msgstr ""

#: ./docs/8.x/artisan.md:91
#: ./docs/9.x/artisan.md:106
#: ./docs/10.x/artisan.md:107
#: ./docs/11.x/artisan.md:107
#: ./docs/master/artisan.md:107
msgid "In addition to the commands provided with Artisan, you may build your own custom commands. Commands are typically stored in the `app/Console/Commands` directory; however, you are free to choose your own storage location as long as your commands can be loaded by Composer."
msgstr ""

#: ./docs/8.x/artisan.md:93
#: ./docs/9.x/artisan.md:108
#: ./docs/10.x/artisan.md:109
#: ./docs/11.x/artisan.md:109
#: ./docs/master/artisan.md:109
#~ msgctxt "P"
#~ msgid "<a name=\"generating-commands\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:94
#: ./docs/9.x/artisan.md:109
#: ./docs/10.x/artisan.md:110
#: ./docs/11.x/artisan.md:110
#: ./docs/master/artisan.md:110
msgid "Generating Commands"
msgstr ""

#: ./docs/8.x/artisan.md:96
#: ./docs/9.x/artisan.md:111
#: ./docs/10.x/artisan.md:112
#: ./docs/11.x/artisan.md:112
#: ./docs/master/artisan.md:112
msgid "To create a new command, you may use the `make:command` Artisan command. This command will create a new command class in the `app/Console/Commands` directory. Don't worry if this directory does not exist in your application - it will be created the first time you run the `make:command` Artisan command:"
msgstr ""

#: ./docs/8.x/artisan.md:98
#: ./docs/9.x/artisan.md:113
#: ./docs/10.x/artisan.md:114
#: ./docs/11.x/artisan.md:114
#: ./docs/master/artisan.md:114
msgid "php artisan make:command SendEmails"
msgstr ""

#: ./docs/8.x/artisan.md:100
#: ./docs/9.x/artisan.md:117
#: ./docs/10.x/artisan.md:118
#: ./docs/11.x/artisan.md:118
#: ./docs/master/artisan.md:118
#~ msgctxt "P"
#~ msgid "<a name=\"command-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:101
#: ./docs/9.x/artisan.md:118
#: ./docs/10.x/artisan.md:119
#: ./docs/11.x/artisan.md:119
#: ./docs/master/artisan.md:119
msgid "Command Structure"
msgstr ""

#: ./docs/8.x/artisan.md:103
#: ./docs/9.x/artisan.md:120
#: ./docs/10.x/artisan.md:121
#: ./docs/11.x/artisan.md:121
#: ./docs/master/artisan.md:121
msgid "After generating your command, you should define appropriate values for the `signature` and `description` properties of the class. These properties will be used when displaying your command on the `list` screen. The `signature` property also allows you to define [your command's input expectations](#defining-input-expectations). The `handle` method will be called when your command is executed. You may place your command logic in this method."
msgstr ""

#: ./docs/8.x/artisan.md:105
#: ./docs/9.x/artisan.md:122
#: ./docs/10.x/artisan.md:123
#: ./docs/11.x/artisan.md:123
#: ./docs/master/artisan.md:123
msgid "Let's take a look at an example command. Note that we are able to request any dependencies we need via the command's `handle` method. The Laravel [service container](/docs/{{version}}/container) will automatically inject all dependencies that are type-hinted in this method's signature:"
msgstr ""

#: ./docs/8.x/artisan.md:107
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"use Illuminate\\Console\\Command;\n"
"\n"
"class SendEmails extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Send a marketing email to a user';\n"
"\n"
"    /**\n"
"     * Create a new command instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        parent::__construct();\n"
"    }\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @param  \\App\\Support\\DripEmailer  $drip\n"
"     * @return mixed\n"
"     */\n"
"    public function handle(DripEmailer $drip)\n"
"    {\n"
"        $drip->send(User::find($this->argument('user')));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/artisan.md:124
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"use Illuminate\\Console\\Command;\n"
"\n"
"class SendEmails extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Send a marketing email to a user';\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @param  \\App\\Support\\DripEmailer  $drip\n"
"     * @return mixed\n"
"     */\n"
"    public function handle(DripEmailer $drip)\n"
"    {\n"
"        $drip->send(User::find($this->argument('user')));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/artisan.md:125
#: ./docs/11.x/artisan.md:125
#: ./docs/master/artisan.md:125
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"use Illuminate\\Console\\Command;\n"
"\n"
"class SendEmails extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Send a marketing email to a user';\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     */\n"
"    public function handle(DripEmailer $drip): void\n"
"    {\n"
"        $drip->send(User::find($this->argument('user')));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:153
#: ./docs/9.x/artisan.md:161
#: ./docs/10.x/artisan.md:159
#: ./docs/11.x/artisan.md:159
#: ./docs/master/artisan.md:159
msgid "For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails."
msgstr ""

#: ./docs/8.x/artisan.md:155
#: ./docs/9.x/artisan.md:163
#: ./docs/10.x/artisan.md:161
#: ./docs/11.x/artisan.md:174
#: ./docs/master/artisan.md:161
#~ msgctxt "P"
#~ msgid "<a name=\"closure-commands\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:156
#: ./docs/9.x/artisan.md:164
#: ./docs/10.x/artisan.md:162
#: ./docs/11.x/artisan.md:175
#: ./docs/master/artisan.md:162
msgid "Closure Commands"
msgstr ""

#: ./docs/8.x/artisan.md:158
#: ./docs/9.x/artisan.md:166
#: ./docs/10.x/artisan.md:164
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes. Within the `commands` method of your `app/Console/Kernel.php` file, Laravel loads the `routes/console.php` file:"
msgstr ""

#: ./docs/8.x/artisan.md:160
#: ./docs/9.x/artisan.md:168
msgid ""
"/**\n"
" * Register the closure based commands for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function commands()\n"
"{\n"
"    require base_path('routes/console.php');\n"
"}"
msgstr ""

#: ./docs/11.x/artisan.md:161
#~ msgctxt "P"
#~ msgid "<a name=\"exit-codes\"></a>"
#~ msgstr ""

#: ./docs/11.x/artisan.md:162
msgid "Exit Codes"
msgstr ""

#: ./docs/11.x/artisan.md:164
msgid "If nothing is returned from the `handle` method and the command executes successfully, the command will exit with a `0` exit code, indicating success. However, the `handle` method may optionally return an integer to manually specify command's exit code:"
msgstr ""

#: ./docs/10.x/artisan.md:166
msgid ""
"/**\n"
" * Register the closure based commands for the application.\n"
" */\n"
"protected function commands(): void\n"
"{\n"
"    require base_path('routes/console.php');\n"
"}"
msgstr ""

#: ./docs/11.x/artisan.md:166
msgid ""
"$this->error('Something went wrong.');\n"
"\n"
"return 1;"
msgstr ""

#: ./docs/master/artisan.md:166
msgid "Even though the `routes/console.php` file file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#: ./docs/11.x/artisan.md:170
msgid "If you would like to \"fail\" the command from any method within the command, you may utilize the `fail` method. The `fail` method will immediately terminate execution of the command and return an exit code of `1`:"
msgstr ""

#: ./docs/8.x/artisan.md:170
#: ./docs/9.x/artisan.md:178
#: ./docs/10.x/artisan.md:174
msgid "Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#: ./docs/11.x/artisan.md:172
msgid "$this->fail('Something went wrong.');"
msgstr ""

#: ./docs/8.x/artisan.md:172
#: ./docs/9.x/artisan.md:180
msgid ""
"Artisan::command('mail:send {user}', function ($user) {\n"
"    $this->info(\"Sending email to: {$user}!\");\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:176
#: ./docs/11.x/artisan.md:181
#: ./docs/master/artisan.md:168
msgid ""
"Artisan::command('mail:send {user}', function (string $user) {\n"
"    $this->info(\"Sending email to: {$user}!\");\n"
"});"
msgstr ""

#: ./docs/8.x/artisan.md:176
#: ./docs/9.x/artisan.md:184
#: ./docs/10.x/artisan.md:180
#: ./docs/11.x/artisan.md:185
#: ./docs/master/artisan.md:172
msgid "The closure is bound to the underlying command instance, so you have full access to all of the helper methods you would typically be able to access on a full command class."
msgstr ""

#: ./docs/11.x/artisan.md:177
#: ./docs/master/artisan.md:164
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes."
msgstr ""

#: ./docs/8.x/artisan.md:178
#: ./docs/9.x/artisan.md:186
#: ./docs/10.x/artisan.md:182
#: ./docs/11.x/artisan.md:187
#: ./docs/master/artisan.md:174
#~ msgctxt "P"
#~ msgid "<a name=\"type-hinting-dependencies\"></a>"
#~ msgstr ""

#: ./docs/11.x/artisan.md:179
msgid "Even though the `routes/console.php` file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#: ./docs/8.x/artisan.md:179
#: ./docs/9.x/artisan.md:187
#: ./docs/10.x/artisan.md:183
#: ./docs/11.x/artisan.md:188
#: ./docs/master/artisan.md:175
msgid "Type-Hinting Dependencies"
msgstr ""

#: ./docs/8.x/artisan.md:181
#: ./docs/9.x/artisan.md:189
#: ./docs/10.x/artisan.md:185
#: ./docs/11.x/artisan.md:190
#: ./docs/master/artisan.md:177
msgid "In addition to receiving your command's arguments and options, command closures may also type-hint additional dependencies that you would like resolved out of the [service container](/docs/{{version}}/container):"
msgstr ""

#: ./docs/8.x/artisan.md:183
#: ./docs/9.x/artisan.md:191
msgid ""
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"\n"
"Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"    $drip->send(User::find($user));\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:187
#: ./docs/11.x/artisan.md:192
#: ./docs/master/artisan.md:179
msgid ""
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"\n"
"Artisan::command('mail:send {user}', function (DripEmailer $drip, string $user) {\n"
"    $drip->send(User::find($user));\n"
"});"
msgstr ""

#: ./docs/8.x/artisan.md:190
#: ./docs/9.x/artisan.md:198
#: ./docs/10.x/artisan.md:194
#: ./docs/11.x/artisan.md:199
#: ./docs/master/artisan.md:186
#~ msgctxt "P"
#~ msgid "<a name=\"closure-command-descriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:191
#: ./docs/9.x/artisan.md:199
#: ./docs/10.x/artisan.md:195
#: ./docs/11.x/artisan.md:200
#: ./docs/master/artisan.md:187
msgid "Closure Command Descriptions"
msgstr ""

#: ./docs/8.x/artisan.md:193
#: ./docs/9.x/artisan.md:201
#: ./docs/10.x/artisan.md:197
#: ./docs/11.x/artisan.md:202
#: ./docs/master/artisan.md:189
msgid "When defining a closure based command, you may use the `purpose` method to add a description to the command. This description will be displayed when you run the `php artisan list` or `php artisan help` commands:"
msgstr ""

#: ./docs/8.x/artisan.md:195
#: ./docs/9.x/artisan.md:203
msgid ""
"Artisan::command('mail:send {user}', function ($user) {\n"
"    // ...\n"
"})->purpose('Send a marketing email to a user');"
msgstr ""

#: ./docs/10.x/artisan.md:199
#: ./docs/11.x/artisan.md:204
#: ./docs/master/artisan.md:191
msgid ""
"Artisan::command('mail:send {user}', function (string $user) {\n"
"    // ...\n"
"})->purpose('Send a marketing email to a user');"
msgstr ""

#: ./docs/8.x/artisan.md:199
#: ./docs/9.x/artisan.md:256
#: ./docs/10.x/artisan.md:268
#: ./docs/11.x/artisan.md:273
#: ./docs/master/artisan.md:260
#~ msgctxt "P"
#~ msgid "<a name=\"defining-input-expectations\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:200
#: ./docs/9.x/artisan.md:257
#: ./docs/10.x/artisan.md:269
#: ./docs/11.x/artisan.md:274
#: ./docs/master/artisan.md:261
msgid "Defining Input Expectations"
msgstr ""

#: ./docs/8.x/artisan.md:202
#: ./docs/9.x/artisan.md:259
#: ./docs/10.x/artisan.md:271
#: ./docs/11.x/artisan.md:276
#: ./docs/master/artisan.md:263
msgid "When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the `signature` property on your commands. The `signature` property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax."
msgstr ""

#: ./docs/8.x/artisan.md:204
#: ./docs/9.x/artisan.md:261
#: ./docs/10.x/artisan.md:273
#: ./docs/11.x/artisan.md:278
#: ./docs/master/artisan.md:265
#~ msgctxt "P"
#~ msgid "<a name=\"arguments\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:205
#: ./docs/9.x/artisan.md:262
#: ./docs/10.x/artisan.md:274
#: ./docs/11.x/artisan.md:279
#: ./docs/master/artisan.md:266
msgid "Arguments"
msgstr ""

#: ./docs/8.x/artisan.md:207
#: ./docs/9.x/artisan.md:264
#: ./docs/10.x/artisan.md:276
#: ./docs/11.x/artisan.md:281
#: ./docs/master/artisan.md:268
msgid "All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one required argument: `user`:"
msgstr ""

#: ./docs/9.x/artisan.md:207
#: ./docs/10.x/artisan.md:203
#: ./docs/11.x/artisan.md:208
#: ./docs/master/artisan.md:195
#~ msgctxt "P"
#~ msgid "<a name=\"isolatable-commands\"></a>"
#~ msgstr ""

#: ./docs/9.x/artisan.md:208
#: ./docs/10.x/artisan.md:204
#: ./docs/11.x/artisan.md:209
#: ./docs/master/artisan.md:196
msgid "Isolatable Commands"
msgstr ""

#: ./docs/8.x/artisan.md:209
#: ./docs/9.x/artisan.md:266
#: ./docs/10.x/artisan.md:278
#: ./docs/11.x/artisan.md:283
#: ./docs/master/artisan.md:270
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send {user}';"
msgstr ""

#: ./docs/9.x/artisan.md:211
#: ./docs/10.x/artisan.md:207
#: ./docs/11.x/artisan.md:212
#: ./docs/master/artisan.md:199
msgid "To utilize this feature, your application must be using the `memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server."
msgstr ""

#: ./docs/9.x/artisan.md:213
#: ./docs/10.x/artisan.md:209
#: ./docs/11.x/artisan.md:214
#: ./docs/master/artisan.md:201
msgid "Sometimes you may wish to ensure that only one instance of a command can run at a time. To accomplish this, you may implement the `Illuminate\\Contracts\\Console\\Isolatable` interface on your command class:"
msgstr ""

#: ./docs/9.x/artisan.md:215
#: ./docs/10.x/artisan.md:211
#: ./docs/11.x/artisan.md:216
#: ./docs/master/artisan.md:203
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use Illuminate\\Console\\Command;\n"
"use Illuminate\\Contracts\\Console\\Isolatable;\n"
"\n"
"class SendEmails extends Command implements Isolatable\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:216
#: ./docs/9.x/artisan.md:273
#: ./docs/10.x/artisan.md:285
#: ./docs/11.x/artisan.md:290
#: ./docs/master/artisan.md:277
msgid "You may also make arguments optional or define default values for arguments:"
msgstr ""

#: ./docs/8.x/artisan.md:218
msgid ""
"// Optional argument...\n"
"mail:send {user?}\n"
"\n"
"// Optional argument with default value...\n"
"mail:send {user=foo}"
msgstr ""

#: ./docs/8.x/artisan.md:224
#: ./docs/9.x/artisan.md:281
#: ./docs/10.x/artisan.md:293
#: ./docs/11.x/artisan.md:298
#: ./docs/master/artisan.md:285
#~ msgctxt "P"
#~ msgid "<a name=\"options\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:225
#: ./docs/9.x/artisan.md:282
#: ./docs/10.x/artisan.md:294
#: ./docs/11.x/artisan.md:299
#: ./docs/master/artisan.md:286
msgid "Options"
msgstr ""

#: ./docs/8.x/artisan.md:227
#: ./docs/9.x/artisan.md:284
#: ./docs/10.x/artisan.md:296
#: ./docs/11.x/artisan.md:301
#: ./docs/master/artisan.md:288
msgid "Options, like arguments, are another form of user input. Options are prefixed by two hyphens (`--`) when they are provided via the command line. There are two types of options: those that receive a value and those that don't. Options that don't receive a value serve as a boolean \"switch\". Let's take a look at an example of this type of option:"
msgstr ""

#: ./docs/9.x/artisan.md:227
#: ./docs/10.x/artisan.md:223
#: ./docs/11.x/artisan.md:228
#: ./docs/master/artisan.md:215
msgid "When a command is marked as `Isolatable`, Laravel will automatically add an `--isolated` option to the command. When the command is invoked with that option, Laravel will ensure that no other instances of that command are already running. Laravel accomplishes this by attempting to acquire an atomic lock using your application's default cache driver. If other instances of the command are running, the command will not execute; however, the command will still exit with a successful exit status code:"
msgstr ""

#: ./docs/8.x/artisan.md:229
#: ./docs/9.x/artisan.md:286
#: ./docs/10.x/artisan.md:298
#: ./docs/11.x/artisan.md:303
#: ./docs/master/artisan.md:290
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send {user} {--queue}';"
msgstr ""

#: ./docs/9.x/artisan.md:229
#: ./docs/10.x/artisan.md:225
#: ./docs/11.x/artisan.md:230
#: ./docs/master/artisan.md:217
msgid "php artisan mail:send 1 --isolated"
msgstr ""

#: ./docs/9.x/artisan.md:233
#: ./docs/10.x/artisan.md:229
#: ./docs/11.x/artisan.md:234
#: ./docs/master/artisan.md:221
msgid "If you would like to specify the exit status code that the command should return if it is not able to execute, you may provide the desired status code via the `isolated` option:"
msgstr ""

#: ./docs/10.x/artisan.md:235
#: ./docs/11.x/artisan.md:240
#: ./docs/master/artisan.md:227
#~ msgctxt "P"
#~ msgid "<a name=\"lock-id\"></a>"
#~ msgstr ""

#: ./docs/9.x/artisan.md:235
#: ./docs/10.x/artisan.md:231
#: ./docs/11.x/artisan.md:236
#: ./docs/master/artisan.md:223
msgid "php artisan mail:send 1 --isolated=12"
msgstr ""

#: ./docs/10.x/artisan.md:236
#: ./docs/11.x/artisan.md:241
#: ./docs/master/artisan.md:228
msgid "Lock ID"
msgstr ""

#: ./docs/8.x/artisan.md:236
#: ./docs/9.x/artisan.md:293
#: ./docs/10.x/artisan.md:305
#: ./docs/11.x/artisan.md:310
#: ./docs/master/artisan.md:297
msgid "In this example, the `--queue` switch may be specified when calling the Artisan command. If the `--queue` switch is passed, the value of the option will be `true`. Otherwise, the value will be `false`:"
msgstr ""

#: ./docs/10.x/artisan.md:238
#: ./docs/11.x/artisan.md:243
#: ./docs/master/artisan.md:230
msgid "By default, Laravel will use the command's name to generate the string key that is used to acquire the atomic lock in your application's cache. However, you may customize this key by defining an `isolatableId` method on your Artisan command class, allowing you to integrate the command's arguments or options into the key:"
msgstr ""

#: ./docs/8.x/artisan.md:238
#: ./docs/9.x/artisan.md:295
#: ./docs/10.x/artisan.md:307
#: ./docs/11.x/artisan.md:312
#: ./docs/master/artisan.md:299
msgid "php artisan mail:send 1 --queue"
msgstr ""

#: ./docs/9.x/artisan.md:239
#: ./docs/10.x/artisan.md:250
#: ./docs/11.x/artisan.md:255
#: ./docs/master/artisan.md:242
#~ msgctxt "P"
#~ msgid "<a name=\"lock-expiration-time\"></a>"
#~ msgstr ""

#: ./docs/10.x/artisan.md:240
#: ./docs/11.x/artisan.md:245
#: ./docs/master/artisan.md:232
msgid ""
"/**\n"
" * Get the isolatable ID for the command.\n"
" */\n"
"public function isolatableId(): string\n"
"{\n"
"    return $this->argument('user');\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:240
#: ./docs/9.x/artisan.md:299
#: ./docs/10.x/artisan.md:311
#: ./docs/11.x/artisan.md:316
#: ./docs/master/artisan.md:303
#~ msgctxt "P"
#~ msgid "<a name=\"options-with-values\"></a>"
#~ msgstr ""

#: ./docs/9.x/artisan.md:240
#: ./docs/10.x/artisan.md:251
#: ./docs/11.x/artisan.md:256
#: ./docs/master/artisan.md:243
msgid "Lock Expiration Time"
msgstr ""

#: ./docs/8.x/artisan.md:241
#: ./docs/9.x/artisan.md:300
#: ./docs/10.x/artisan.md:312
#: ./docs/11.x/artisan.md:317
#: ./docs/master/artisan.md:304
msgid "Options With Values"
msgstr ""

#: ./docs/9.x/artisan.md:242
#: ./docs/10.x/artisan.md:253
#: ./docs/11.x/artisan.md:258
#: ./docs/master/artisan.md:245
msgid "By default, isolation locks expire after the command is finished. Or, if the command is interrupted and unable to finish, the lock will expire after one hour. However, you may adjust the lock expiration time by defining a `isolationLockExpiresAt` method on your command:"
msgstr ""

#: ./docs/8.x/artisan.md:243
#: ./docs/9.x/artisan.md:302
#: ./docs/10.x/artisan.md:314
#: ./docs/11.x/artisan.md:319
#: ./docs/master/artisan.md:306
msgid "Next, let's take a look at an option that expects a value. If the user must specify a value for an option, you should suffix the option name with a `=` sign:"
msgstr ""

#: ./docs/9.x/artisan.md:244
msgid ""
"/**\n"
" * Determine when an isolation lock expires for the command.\n"
" *\n"
" * @return \\DateTimeInterface|\\DateInterval\n"
" */\n"
"public function isolationLockExpiresAt()\n"
"{\n"
"    return now()->addMinutes(5);\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:245
#: ./docs/9.x/artisan.md:304
#: ./docs/10.x/artisan.md:316
#: ./docs/11.x/artisan.md:321
#: ./docs/master/artisan.md:308
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send {user} {--queue=}';"
msgstr ""

#: ./docs/8.x/artisan.md:252
#: ./docs/9.x/artisan.md:311
#: ./docs/10.x/artisan.md:323
#: ./docs/11.x/artisan.md:328
#: ./docs/master/artisan.md:315
msgid "In this example, the user may pass a value for the option like so. If the option is not specified when invoking the command, its value will be `null`:"
msgstr ""

#: ./docs/8.x/artisan.md:254
#: ./docs/9.x/artisan.md:313
#: ./docs/10.x/artisan.md:325
#: ./docs/11.x/artisan.md:330
#: ./docs/master/artisan.md:317
msgid "php artisan mail:send 1 --queue=default"
msgstr ""

#: ./docs/10.x/artisan.md:255
#: ./docs/11.x/artisan.md:260
#: ./docs/master/artisan.md:247
msgid ""
"use DateTimeInterface;\n"
"use DateInterval;\n"
"\n"
"/**\n"
" * Determine when an isolation lock expires for the command.\n"
" */\n"
"public function isolationLockExpiresAt(): DateTimeInterface|DateInterval\n"
"{\n"
"    return now()->addMinutes(5);\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:256
#: ./docs/9.x/artisan.md:317
#: ./docs/10.x/artisan.md:329
#: ./docs/11.x/artisan.md:334
#: ./docs/master/artisan.md:321
msgid "You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:"
msgstr ""

#: ./docs/8.x/artisan.md:258
msgid "mail:send {user} {--queue=default}"
msgstr ""

#: ./docs/8.x/artisan.md:260
#: ./docs/9.x/artisan.md:321
#: ./docs/10.x/artisan.md:333
#: ./docs/11.x/artisan.md:338
#: ./docs/master/artisan.md:325
#~ msgctxt "P"
#~ msgid "<a name=\"option-shortcuts\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:261
#: ./docs/9.x/artisan.md:322
#: ./docs/10.x/artisan.md:334
#: ./docs/11.x/artisan.md:339
#: ./docs/master/artisan.md:326
msgid "Option Shortcuts"
msgstr ""

#: ./docs/8.x/artisan.md:263
#: ./docs/9.x/artisan.md:324
#: ./docs/10.x/artisan.md:336
#: ./docs/11.x/artisan.md:341
#: ./docs/master/artisan.md:328
msgid "To assign a shortcut when defining an option, you may specify it before the option name and use the `|` character as a delimiter to separate the shortcut from the full option name:"
msgstr ""

#: ./docs/8.x/artisan.md:265
msgid "mail:send {user} {--Q|queue}"
msgstr ""

#: ./docs/8.x/artisan.md:267
#: ./docs/9.x/artisan.md:328
msgid "When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen:"
msgstr ""

#: ./docs/8.x/artisan.md:269
#: ./docs/9.x/artisan.md:330
msgid "php artisan mail:send 1 -Q"
msgstr ""

#: ./docs/8.x/artisan.md:271
#: ./docs/9.x/artisan.md:334
#: ./docs/10.x/artisan.md:346
#: ./docs/11.x/artisan.md:351
#: ./docs/master/artisan.md:338
#~ msgctxt "P"
#~ msgid "<a name=\"input-arrays\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:272
#: ./docs/9.x/artisan.md:335
#: ./docs/10.x/artisan.md:347
#: ./docs/11.x/artisan.md:352
#: ./docs/master/artisan.md:339
msgid "Input Arrays"
msgstr ""

#: ./docs/8.x/artisan.md:274
#: ./docs/9.x/artisan.md:337
#: ./docs/10.x/artisan.md:349
#: ./docs/11.x/artisan.md:354
#: ./docs/master/artisan.md:341
msgid "If you would like to define arguments or options to expect multiple input values, you may use the `*` character. First, let's take a look at an example that specifies such an argument:"
msgstr ""

#: ./docs/9.x/artisan.md:275
#: ./docs/10.x/artisan.md:287
#: ./docs/11.x/artisan.md:292
#: ./docs/master/artisan.md:279
msgid ""
"// Optional argument...\n"
"'mail:send {user?}'\n"
"\n"
"// Optional argument with default value...\n"
"'mail:send {user=foo}'"
msgstr ""

#: ./docs/8.x/artisan.md:276
msgid "mail:send {user*}"
msgstr ""

#: ./docs/8.x/artisan.md:278
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `foo` and `bar` as its values:"
msgstr ""

#: ./docs/8.x/artisan.md:280
msgid "php artisan mail:send foo bar"
msgstr ""

#: ./docs/8.x/artisan.md:282
#: ./docs/9.x/artisan.md:347
#: ./docs/10.x/artisan.md:359
#: ./docs/11.x/artisan.md:364
#: ./docs/master/artisan.md:351
msgid "This `*` character can be combined with an optional argument definition to allow zero or more instances of an argument:"
msgstr ""

#: ./docs/8.x/artisan.md:284
msgid "mail:send {user?*}"
msgstr ""

#: ./docs/8.x/artisan.md:286
#: ./docs/9.x/artisan.md:351
#: ./docs/10.x/artisan.md:363
#: ./docs/11.x/artisan.md:368
#: ./docs/master/artisan.md:355
#~ msgctxt "P"
#~ msgid "<a name=\"option-arrays\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:287
#: ./docs/9.x/artisan.md:352
#: ./docs/10.x/artisan.md:364
#: ./docs/11.x/artisan.md:369
#: ./docs/master/artisan.md:356
msgid "Option Arrays"
msgstr ""

#: ./docs/8.x/artisan.md:289
#: ./docs/9.x/artisan.md:354
#: ./docs/10.x/artisan.md:366
#: ./docs/11.x/artisan.md:371
#: ./docs/master/artisan.md:358
msgid "When defining an option that expects multiple input values, each option value passed to the command should be prefixed with the option name:"
msgstr ""

#: ./docs/8.x/artisan.md:291
msgid ""
"mail:send {user} {--id=*}\n"
"\n"
"php artisan mail:send --id=1 --id=2"
msgstr ""

#: ./docs/8.x/artisan.md:295
#: ./docs/9.x/artisan.md:364
#: ./docs/10.x/artisan.md:376
#: ./docs/11.x/artisan.md:381
#: ./docs/master/artisan.md:368
#~ msgctxt "P"
#~ msgid "<a name=\"input-descriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:296
#: ./docs/9.x/artisan.md:365
#: ./docs/10.x/artisan.md:377
#: ./docs/11.x/artisan.md:382
#: ./docs/master/artisan.md:369
msgid "Input Descriptions"
msgstr ""

#: ./docs/8.x/artisan.md:298
#: ./docs/9.x/artisan.md:367
#: ./docs/10.x/artisan.md:379
#: ./docs/11.x/artisan.md:384
#: ./docs/master/artisan.md:371
msgid "You may assign descriptions to input arguments and options by separating the argument name from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:"
msgstr ""

#: ./docs/8.x/artisan.md:300
#: ./docs/9.x/artisan.md:369
#: ./docs/10.x/artisan.md:381
#: ./docs/11.x/artisan.md:386
#: ./docs/master/artisan.md:373
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send\n"
"                        {user : The ID of the user}\n"
"                        {--queue : Whether the job should be queued}';"
msgstr ""

#: ./docs/8.x/artisan.md:309
#: ./docs/9.x/artisan.md:378
#: ./docs/10.x/artisan.md:477
#: ./docs/11.x/artisan.md:478
#: ./docs/master/artisan.md:465
#~ msgctxt "P"
#~ msgid "<a name=\"command-io\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:310
#: ./docs/9.x/artisan.md:379
#: ./docs/10.x/artisan.md:478
#: ./docs/11.x/artisan.md:479
#: ./docs/master/artisan.md:466
msgid "Command I/O"
msgstr ""

#: ./docs/8.x/artisan.md:312
#: ./docs/9.x/artisan.md:381
#: ./docs/10.x/artisan.md:480
#: ./docs/11.x/artisan.md:481
#: ./docs/master/artisan.md:468
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-input\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:313
#: ./docs/9.x/artisan.md:382
#: ./docs/10.x/artisan.md:481
#: ./docs/11.x/artisan.md:482
#: ./docs/master/artisan.md:469
msgid "Retrieving Input"
msgstr ""

#: ./docs/8.x/artisan.md:315
#: ./docs/9.x/artisan.md:384
#: ./docs/10.x/artisan.md:483
#: ./docs/11.x/artisan.md:484
#: ./docs/master/artisan.md:471
msgid "While your command is executing, you will likely need to access the values for the arguments and options accepted by your command. To do so, you may use the `argument` and `option` methods. If an argument or option does not exist, `null` will be returned:"
msgstr ""

#: ./docs/8.x/artisan.md:317
#: ./docs/9.x/artisan.md:386
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return int\n"
" */\n"
"public function handle()\n"
"{\n"
"    $userId = $this->argument('user');\n"
"\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/artisan.md:319
#: ./docs/10.x/artisan.md:331
#: ./docs/11.x/artisan.md:336
#: ./docs/master/artisan.md:323
msgid "'mail:send {user} {--queue=default}'"
msgstr ""

#: ./docs/9.x/artisan.md:326
#: ./docs/10.x/artisan.md:338
#: ./docs/11.x/artisan.md:343
#: ./docs/master/artisan.md:330
msgid "'mail:send {user} {--Q|queue}'"
msgstr ""

#: ./docs/8.x/artisan.md:329
#: ./docs/9.x/artisan.md:398
#: ./docs/10.x/artisan.md:493
#: ./docs/11.x/artisan.md:494
#: ./docs/master/artisan.md:481
msgid "If you need to retrieve all of the arguments as an `array`, call the `arguments` method:"
msgstr ""

#: ./docs/8.x/artisan.md:331
#: ./docs/9.x/artisan.md:400
#: ./docs/10.x/artisan.md:495
#: ./docs/11.x/artisan.md:496
#: ./docs/master/artisan.md:483
msgid "$arguments = $this->arguments();"
msgstr ""

#: ./docs/8.x/artisan.md:333
#: ./docs/9.x/artisan.md:402
#: ./docs/10.x/artisan.md:497
#: ./docs/11.x/artisan.md:498
#: ./docs/master/artisan.md:485
msgid "Options may be retrieved just as easily as arguments using the `option` method. To retrieve all of the options as an array, call the `options` method:"
msgstr ""

#: ./docs/8.x/artisan.md:335
#: ./docs/9.x/artisan.md:404
#: ./docs/10.x/artisan.md:499
#: ./docs/11.x/artisan.md:500
#: ./docs/master/artisan.md:487
msgid ""
"// Retrieve a specific option...\n"
"$queueName = $this->option('queue');\n"
"\n"
"// Retrieve all options as an array...\n"
"$options = $this->options();"
msgstr ""

#: ./docs/9.x/artisan.md:339
#: ./docs/10.x/artisan.md:351
#: ./docs/11.x/artisan.md:356
#: ./docs/master/artisan.md:343
msgid "'mail:send {user*}'"
msgstr ""

#: ./docs/10.x/artisan.md:340
#: ./docs/11.x/artisan.md:345
#: ./docs/master/artisan.md:332
msgid "When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen and no `=` character should be included when specifying a value for the option:"
msgstr ""

#: ./docs/8.x/artisan.md:341
#: ./docs/9.x/artisan.md:410
#: ./docs/10.x/artisan.md:505
#: ./docs/11.x/artisan.md:506
#: ./docs/master/artisan.md:493
#~ msgctxt "P"
#~ msgid "<a name=\"prompting-for-input\"></a>"
#~ msgstr ""

#: ./docs/9.x/artisan.md:341
#: ./docs/10.x/artisan.md:353
#: ./docs/11.x/artisan.md:358
#: ./docs/master/artisan.md:345
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `1` and `2` as its values:"
msgstr ""

#: ./docs/10.x/artisan.md:342
#: ./docs/11.x/artisan.md:347
#: ./docs/master/artisan.md:334
msgid "php artisan mail:send 1 -Qdefault"
msgstr ""

#: ./docs/8.x/artisan.md:342
#: ./docs/9.x/artisan.md:411
msgid "Prompting For Input"
msgstr ""

#: ./docs/9.x/artisan.md:343
#: ./docs/10.x/artisan.md:355
#: ./docs/11.x/artisan.md:360
#: ./docs/master/artisan.md:347
msgid "php artisan mail:send 1 2"
msgstr ""

#: ./docs/8.x/artisan.md:344
#: ./docs/9.x/artisan.md:413
#: ./docs/10.x/artisan.md:511
#: ./docs/11.x/artisan.md:512
#: ./docs/master/artisan.md:499
msgid "In addition to displaying output, you may also ask the user to provide input during the execution of your command. The `ask` method will prompt the user with the given question, accept their input, and then return the user's input back to your command:"
msgstr ""

#: ./docs/8.x/artisan.md:346
#: ./docs/9.x/artisan.md:415
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    $name = $this->ask('What is your name?');\n"
"}"
msgstr ""

#: ./docs/9.x/artisan.md:349
#: ./docs/10.x/artisan.md:361
#: ./docs/11.x/artisan.md:366
#: ./docs/master/artisan.md:353
msgid "'mail:send {user?*}'"
msgstr ""

#: ./docs/8.x/artisan.md:356
#: ./docs/9.x/artisan.md:425
#: ./docs/10.x/artisan.md:527
#: ./docs/11.x/artisan.md:528
#: ./docs/master/artisan.md:515
msgid "The `secret` method is similar to `ask`, but the user's input will not be visible to them as they type in the console. This method is useful when asking for sensitive information such as passwords:"
msgstr ""

#: ./docs/9.x/artisan.md:356
#: ./docs/10.x/artisan.md:368
#: ./docs/11.x/artisan.md:373
#: ./docs/master/artisan.md:360
msgid "'mail:send {--id=*}'"
msgstr ""

#: ./docs/8.x/artisan.md:358
#: ./docs/9.x/artisan.md:427
#: ./docs/10.x/artisan.md:529
#: ./docs/11.x/artisan.md:530
#: ./docs/master/artisan.md:517
msgid "$password = $this->secret('What is the password?');"
msgstr ""

#: ./docs/9.x/artisan.md:358
#: ./docs/10.x/artisan.md:370
#: ./docs/11.x/artisan.md:375
#: ./docs/master/artisan.md:362
msgid "Such a command may be invoked by passing multiple `--id` arguments:"
msgstr ""

#: ./docs/8.x/artisan.md:360
#: ./docs/9.x/artisan.md:429
#: ./docs/10.x/artisan.md:531
#: ./docs/11.x/artisan.md:532
#: ./docs/master/artisan.md:519
#~ msgctxt "P"
#~ msgid "<a name=\"asking-for-confirmation\"></a>"
#~ msgstr ""

#: ./docs/9.x/artisan.md:360
#: ./docs/10.x/artisan.md:372
#: ./docs/11.x/artisan.md:377
#: ./docs/master/artisan.md:364
msgid "php artisan mail:send --id=1 --id=2"
msgstr ""

#: ./docs/8.x/artisan.md:361
#: ./docs/9.x/artisan.md:430
msgid "Asking For Confirmation"
msgstr ""

#: ./docs/8.x/artisan.md:363
#: ./docs/9.x/artisan.md:432
#: ./docs/10.x/artisan.md:534
#: ./docs/11.x/artisan.md:535
#: ./docs/master/artisan.md:522
msgid "If you need to ask the user for a simple \"yes or no\" confirmation, you may use the `confirm` method. By default, this method will return `false`. However, if the user enters `y` or `yes` in response to the prompt, the method will return `true`."
msgstr ""

#: ./docs/8.x/artisan.md:365
#: ./docs/9.x/artisan.md:434
msgid ""
"if ($this->confirm('Do you wish to continue?')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:369
#: ./docs/9.x/artisan.md:438
#: ./docs/10.x/artisan.md:540
#: ./docs/11.x/artisan.md:541
#: ./docs/master/artisan.md:528
msgid "If necessary, you may specify that the confirmation prompt should return `true` by default by passing `true` as the second argument to the `confirm` method:"
msgstr ""

#: ./docs/8.x/artisan.md:371
#: ./docs/9.x/artisan.md:440
msgid ""
"if ($this->confirm('Do you wish to continue?', true)) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:375
#: ./docs/9.x/artisan.md:444
#: ./docs/10.x/artisan.md:546
#: ./docs/11.x/artisan.md:547
#: ./docs/master/artisan.md:534
#~ msgctxt "P"
#~ msgid "<a name=\"auto-completion\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:376
#: ./docs/9.x/artisan.md:445
#: ./docs/10.x/artisan.md:547
#: ./docs/11.x/artisan.md:548
#: ./docs/master/artisan.md:535
msgid "Auto-Completion"
msgstr ""

#: ./docs/8.x/artisan.md:378
#: ./docs/9.x/artisan.md:447
#: ./docs/10.x/artisan.md:549
#: ./docs/11.x/artisan.md:550
#: ./docs/master/artisan.md:537
msgid "The `anticipate` method can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr ""

#: ./docs/8.x/artisan.md:380
#: ./docs/9.x/artisan.md:449
#: ./docs/10.x/artisan.md:551
#: ./docs/11.x/artisan.md:552
#: ./docs/master/artisan.md:539
msgid "$name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);"
msgstr ""

#: ./docs/8.x/artisan.md:382
#: ./docs/9.x/artisan.md:451
#: ./docs/10.x/artisan.md:553
#: ./docs/11.x/artisan.md:554
#: ./docs/master/artisan.md:541
msgid "Alternatively, you may pass a closure as the second argument to the `anticipate` method. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far, and return an array of options for auto-completion:"
msgstr ""

#: ./docs/8.x/artisan.md:384
#: ./docs/9.x/artisan.md:453
msgid ""
"$name = $this->anticipate('What is your address?', function ($input) {\n"
"    // Return auto-completion options...\n"
"});"
msgstr ""

#: ./docs/8.x/artisan.md:388
#: ./docs/9.x/artisan.md:457
#: ./docs/10.x/artisan.md:559
#: ./docs/11.x/artisan.md:560
#: ./docs/master/artisan.md:547
#~ msgctxt "P"
#~ msgid "<a name=\"multiple-choice-questions\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:389
#: ./docs/9.x/artisan.md:458
#: ./docs/10.x/artisan.md:560
#: ./docs/11.x/artisan.md:561
#: ./docs/master/artisan.md:548
msgid "Multiple Choice Questions"
msgstr ""

#: ./docs/10.x/artisan.md:390
#: ./docs/11.x/artisan.md:395
#: ./docs/master/artisan.md:382
#~ msgctxt "P"
#~ msgid "<a name=\"prompting-for-missing-input\"></a>"
#~ msgstr ""

#: ./docs/10.x/artisan.md:391
#: ./docs/11.x/artisan.md:396
#: ./docs/master/artisan.md:383
msgid "Prompting for Missing Input"
msgstr ""

#: ./docs/8.x/artisan.md:391
#: ./docs/9.x/artisan.md:460
#: ./docs/10.x/artisan.md:562
#: ./docs/11.x/artisan.md:563
#: ./docs/master/artisan.md:550
msgid "If you need to give the user a predefined set of choices when asking a question, you may use the `choice` method. You may set the array index of the default value to be returned if no option is chosen by passing the index as the third argument to the method:"
msgstr ""

#: ./docs/10.x/artisan.md:393
#: ./docs/11.x/artisan.md:398
#: ./docs/master/artisan.md:385
msgid "If your command contains required arguments, the user will receive an error message when they are not provided. Alternatively, you may configure your command to automatically prompt the user when required arguments are missing by implementing the `PromptsForMissingInput` interface:"
msgstr ""

#: ./docs/8.x/artisan.md:393
#: ./docs/9.x/artisan.md:462
#: ./docs/10.x/artisan.md:564
#: ./docs/11.x/artisan.md:565
#: ./docs/master/artisan.md:552
msgid ""
"$name = $this->choice(\n"
"    'What is your name?',\n"
"    ['Taylor', 'Dayle'],\n"
"    $defaultIndex\n"
");"
msgstr ""

#: ./docs/10.x/artisan.md:395
#: ./docs/11.x/artisan.md:400
#: ./docs/master/artisan.md:387
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use Illuminate\\Console\\Command;\n"
"use Illuminate\\Contracts\\Console\\PromptsForMissingInput;\n"
"\n"
"class SendEmails extends Command implements PromptsForMissingInput\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:399
#: ./docs/9.x/artisan.md:468
#: ./docs/10.x/artisan.md:570
#: ./docs/11.x/artisan.md:571
#: ./docs/master/artisan.md:558
msgid "In addition, the `choice` method accepts optional fourth and fifth arguments for determining the maximum number of attempts to select a valid response and whether multiple selections are permitted:"
msgstr ""

#: ./docs/8.x/artisan.md:401
#: ./docs/9.x/artisan.md:470
#: ./docs/10.x/artisan.md:572
#: ./docs/11.x/artisan.md:573
#: ./docs/master/artisan.md:560
msgid ""
"$name = $this->choice(\n"
"    'What is your name?',\n"
"    ['Taylor', 'Dayle'],\n"
"    $defaultIndex,\n"
"    $maxAttempts = null,\n"
"    $allowMultipleSelections = false\n"
");"
msgstr ""

#: ./docs/8.x/artisan.md:409
#: ./docs/9.x/artisan.md:478
#: ./docs/10.x/artisan.md:580
#: ./docs/11.x/artisan.md:581
#: ./docs/master/artisan.md:568
#~ msgctxt "P"
#~ msgid "<a name=\"writing-output\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:410
#: ./docs/9.x/artisan.md:479
#: ./docs/10.x/artisan.md:581
#: ./docs/11.x/artisan.md:582
#: ./docs/master/artisan.md:569
msgid "Writing Output"
msgstr ""

#: ./docs/8.x/artisan.md:412
#: ./docs/9.x/artisan.md:481
#: ./docs/10.x/artisan.md:583
#: ./docs/11.x/artisan.md:584
#: ./docs/master/artisan.md:571
msgid "To send output to the console, you may use the `line`, `info`, `comment`, `question`, `warn`, and `error` methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let's display some general information to the user. Typically, the `info` method will display in the console as green colored text:"
msgstr ""

#: ./docs/10.x/artisan.md:414
#: ./docs/11.x/artisan.md:419
#: ./docs/master/artisan.md:406
msgid "If Laravel needs to gather a required argument from the user, it will automatically ask the user for the argument by intelligently phrasing the question using either the argument name or description. If you wish to customize the question used to gather the required argument, you may implement the `promptForMissingArgumentsUsing` method, returning an array of questions keyed by the argument names:"
msgstr ""

#: ./docs/8.x/artisan.md:414
#: ./docs/9.x/artisan.md:483
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    // ...\n"
"\n"
"    $this->info('The command was successful!');\n"
"}"
msgstr ""

#: ./docs/10.x/artisan.md:416
msgid ""
"/**\n"
" * Prompt for missing input arguments using the returned questions.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function promptForMissingArgumentsUsing()\n"
"{\n"
"    return [\n"
"        'user' => 'Which user ID should receive the mail?',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/artisan.md:421
#: ./docs/master/artisan.md:408
msgid ""
"/**\n"
" * Prompt for missing input arguments using the returned questions.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function promptForMissingArgumentsUsing(): array\n"
"{\n"
"    return [\n"
"        'user' => 'Which user ID should receive the mail?',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:426
#: ./docs/9.x/artisan.md:495
#: ./docs/10.x/artisan.md:595
#: ./docs/11.x/artisan.md:596
#: ./docs/master/artisan.md:583
msgid "To display an error message, use the `error` method. Error message text is typically displayed in red:"
msgstr ""

#: ./docs/10.x/artisan.md:428
#: ./docs/11.x/artisan.md:433
#: ./docs/master/artisan.md:420
msgid "You may also provide placeholder text by using a tuple containing the question and placeholder:"
msgstr ""

#: ./docs/8.x/artisan.md:428
#: ./docs/9.x/artisan.md:497
#: ./docs/10.x/artisan.md:597
#: ./docs/11.x/artisan.md:598
#: ./docs/master/artisan.md:585
msgid "$this->error('Something went wrong!');"
msgstr ""

#: ./docs/10.x/artisan.md:430
#: ./docs/11.x/artisan.md:435
#: ./docs/master/artisan.md:422
msgid ""
"return [\n"
"    'user' => ['Which user ID should receive the mail?', 'E.g. 123'],\n"
"];"
msgstr ""

#: ./docs/8.x/artisan.md:430
#: ./docs/9.x/artisan.md:499
#: ./docs/10.x/artisan.md:599
#: ./docs/11.x/artisan.md:600
#: ./docs/master/artisan.md:587
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr ""

#: ./docs/8.x/artisan.md:432
#: ./docs/9.x/artisan.md:501
#: ./docs/10.x/artisan.md:601
#: ./docs/11.x/artisan.md:602
#: ./docs/master/artisan.md:589
msgid "$this->line('Display this on the screen');"
msgstr ""

#: ./docs/10.x/artisan.md:434
#: ./docs/11.x/artisan.md:439
#: ./docs/master/artisan.md:426
msgid "If you would like complete control over the prompt, you may provide a closure that should prompt the user and return their answer:"
msgstr ""

#: ./docs/8.x/artisan.md:434
#: ./docs/9.x/artisan.md:503
#: ./docs/10.x/artisan.md:603
#: ./docs/11.x/artisan.md:604
#: ./docs/master/artisan.md:591
msgid "You may use the `newLine` method to display a blank line:"
msgstr ""

#: ./docs/10.x/artisan.md:436
#: ./docs/11.x/artisan.md:441
#: ./docs/master/artisan.md:428
msgid ""
"use App\\Models\\User;\n"
"use function Laravel\\Prompts\\search;\n"
"\n"
"// ...\n"
"\n"
"return [\n"
"    'user' => fn () => search(\n"
"        label: 'Search for a user:',\n"
"        placeholder: 'E.g. Taylor Otwell',\n"
"        options: fn ($value) => strlen($value) > 0\n"
"            ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"            : []\n"
"    ),\n"
"];"
msgstr ""

#: ./docs/8.x/artisan.md:436
#: ./docs/9.x/artisan.md:505
#: ./docs/10.x/artisan.md:605
#: ./docs/11.x/artisan.md:606
#: ./docs/master/artisan.md:593
msgid ""
"// Write a single blank line...\n"
"$this->newLine();\n"
"\n"
"// Write three blank lines...\n"
"$this->newLine(3);"
msgstr ""

#: ./docs/8.x/artisan.md:442
#: ./docs/9.x/artisan.md:511
#: ./docs/10.x/artisan.md:611
#: ./docs/11.x/artisan.md:612
#: ./docs/master/artisan.md:599
#~ msgctxt "P"
#~ msgid "<a name=\"tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:443
#: ./docs/9.x/artisan.md:512
#: ./docs/10.x/artisan.md:612
#: ./docs/11.x/artisan.md:613
#: ./docs/master/artisan.md:600
msgid "Tables"
msgstr ""

#: ./docs/8.x/artisan.md:445
#: ./docs/9.x/artisan.md:514
#: ./docs/10.x/artisan.md:614
#: ./docs/11.x/artisan.md:615
#: ./docs/master/artisan.md:602
msgid ""
"The `table` method makes it easy to correctly format multiple rows / columns of data. All you need to do is provide the column names and the data for the table and Laravel will\n"
"automatically calculate the appropriate width and height of the table for you:"
msgstr ""

#: ./docs/8.x/artisan.md:448
#: ./docs/9.x/artisan.md:517
#: ./docs/10.x/artisan.md:617
#: ./docs/11.x/artisan.md:618
#: ./docs/master/artisan.md:605
msgid ""
"use App\\Models\\User;\n"
"\n"
"$this->table(\n"
"    ['Name', 'Email'],\n"
"    User::all(['name', 'email'])->toArray()\n"
");"
msgstr ""

#: ./docs/10.x/artisan.md:452
#: ./docs/11.x/artisan.md:457
#: ./docs/master/artisan.md:444
msgid "The comprehensive [Laravel Prompts](/docs/{{version}}/prompts) documentation includes additional information on the available prompts and their usage."
msgstr ""

#: ./docs/10.x/artisan.md:454
#: ./docs/11.x/artisan.md:459
#: ./docs/master/artisan.md:446
msgid "If you wish to prompt the user to select or enter [options](#options), you may include prompts in your command's `handle` method. However, if you only wish to prompt the user when they have also been automatically prompted for missing arguments, then you may implement the `afterPromptingForMissingArguments` method:"
msgstr ""

#: ./docs/8.x/artisan.md:455
#: ./docs/9.x/artisan.md:524
#: ./docs/10.x/artisan.md:624
#: ./docs/11.x/artisan.md:625
#: ./docs/master/artisan.md:612
#~ msgctxt "P"
#~ msgid "<a name=\"progress-bars\"></a>"
#~ msgstr ""

#: ./docs/10.x/artisan.md:456
msgid ""
"use Symfony\\Component\\Console\\Input\\InputInterface;\n"
"use Symfony\\Component\\Console\\Output\\OutputInterface;\n"
"use function Laravel\\Prompts\\confirm;\n"
"\n"
"// ...\n"
"\n"
"/**\n"
" * Perform actions after the user was prompted for missing arguments.\n"
" *\n"
" * @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input\n"
" * @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output\n"
" * @return void\n"
" */\n"
"protected function afterPromptingForMissingArguments(InputInterface $input, OutputInterface $output)\n"
"{\n"
"    $input->setOption('queue', confirm(\n"
"        label: 'Would you like to queue the mail?',\n"
"        default: $this->option('queue')\n"
"    ));\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:456
#: ./docs/9.x/artisan.md:525
#: ./docs/10.x/artisan.md:625
#: ./docs/11.x/artisan.md:626
#: ./docs/master/artisan.md:613
msgid "Progress Bars"
msgstr ""

#: ./docs/8.x/artisan.md:458
#: ./docs/9.x/artisan.md:527
#: ./docs/10.x/artisan.md:627
#: ./docs/11.x/artisan.md:628
#: ./docs/master/artisan.md:615
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `withProgressBar` method, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr ""

#: ./docs/8.x/artisan.md:460
#: ./docs/9.x/artisan.md:529
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $this->withProgressBar(User::all(), function ($user) {\n"
"    $this->performTask($user);\n"
"});"
msgstr ""

#: ./docs/11.x/artisan.md:461
#: ./docs/master/artisan.md:448
msgid ""
"use Symfony\\Component\\Console\\Input\\InputInterface;\n"
"use Symfony\\Component\\Console\\Output\\OutputInterface;\n"
"use function Laravel\\Prompts\\confirm;\n"
"\n"
"// ...\n"
"\n"
"/**\n"
" * Perform actions after the user was prompted for missing arguments.\n"
" */\n"
"protected function afterPromptingForMissingArguments(InputInterface $input, OutputInterface $output): void\n"
"{\n"
"    $input->setOption('queue', confirm(\n"
"        label: 'Would you like to queue the mail?',\n"
"        default: $this->option('queue')\n"
"    ));\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:466
#: ./docs/9.x/artisan.md:535
#: ./docs/10.x/artisan.md:635
#: ./docs/11.x/artisan.md:636
#: ./docs/master/artisan.md:623
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar after processing each item:"
msgstr ""

#: ./docs/8.x/artisan.md:468
#: ./docs/9.x/artisan.md:537
#: ./docs/10.x/artisan.md:637
#: ./docs/11.x/artisan.md:638
#: ./docs/master/artisan.md:625
msgid ""
"$users = App\\Models\\User::all();\n"
"\n"
"$bar = $this->output->createProgressBar(count($users));\n"
"\n"
"$bar->start();\n"
"\n"
"foreach ($users as $user) {\n"
"    $this->performTask($user);\n"
"\n"
"    $bar->advance();\n"
"}\n"
"\n"
"$bar->finish();"
msgstr ""

#: ./docs/8.x/artisan.md:482
#: ./docs/9.x/artisan.md:552
#: ./docs/10.x/artisan.md:652
msgid "For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html)."
msgstr ""

#: ./docs/8.x/artisan.md:484
#: ./docs/9.x/artisan.md:554
#: ./docs/10.x/artisan.md:654
#: ./docs/11.x/artisan.md:655
#: ./docs/master/artisan.md:642
#~ msgctxt "P"
#~ msgid "<a name=\"registering-commands\"></a>"
#~ msgstr ""

#: ./docs/10.x/artisan.md:485
#: ./docs/11.x/artisan.md:486
#: ./docs/master/artisan.md:473
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $userId = $this->argument('user');\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:485
#: ./docs/9.x/artisan.md:555
#: ./docs/10.x/artisan.md:655
#: ./docs/11.x/artisan.md:656
#: ./docs/master/artisan.md:643
msgid "Registering Commands"
msgstr ""

#: ./docs/8.x/artisan.md:487
#: ./docs/9.x/artisan.md:557
#: ./docs/10.x/artisan.md:657
msgid "All of your console commands are registered within your application's `App\\Console\\Kernel` class, which is your application's \"console kernel\". Within the `commands` method of this class, you will see a call to the kernel's `load` method. The `load` method will scan the `app/Console/Commands` directory and automatically register each command it contains with Artisan. You are even free to make additional calls to the `load` method to scan other directories for Artisan commands:"
msgstr ""

#: ./docs/8.x/artisan.md:489
#: ./docs/9.x/artisan.md:559
msgid ""
"/**\n"
" * Register the commands for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function commands()\n"
"{\n"
"    $this->load(__DIR__.'/Commands');\n"
"    $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:502
#: ./docs/9.x/artisan.md:572
#: ./docs/10.x/artisan.md:670
msgid "If necessary, you may manually register commands by adding the command's class name to a `$commands` property within your `App\\Console\\Kernel` class. If this property is not already defined on your kernel, you should define it manually. When Artisan boots, all the commands listed in this property will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan:"
msgstr ""

#: ./docs/8.x/artisan.md:504
#: ./docs/9.x/artisan.md:574
#: ./docs/10.x/artisan.md:672
msgid ""
"protected $commands = [\n"
"    Commands\\SendEmails::class\n"
"];"
msgstr ""

#: ./docs/10.x/artisan.md:506
#: ./docs/11.x/artisan.md:507
#: ./docs/master/artisan.md:494
msgid "Prompting for Input"
msgstr ""

#: ./docs/8.x/artisan.md:508
#: ./docs/9.x/artisan.md:578
#: ./docs/10.x/artisan.md:676
#: ./docs/11.x/artisan.md:674
#: ./docs/master/artisan.md:661
#~ msgctxt "P"
#~ msgid "<a name=\"programmatically-executing-commands\"></a>"
#~ msgstr ""

#: ./docs/10.x/artisan.md:509
#: ./docs/11.x/artisan.md:510
#: ./docs/master/artisan.md:497
msgid "[Laravel Prompts](/docs/{{version}}/prompts) is a PHP package for adding beautiful and user-friendly forms to your command-line applications, with browser-like features including placeholder text and validation."
msgstr ""

#: ./docs/8.x/artisan.md:509
#: ./docs/9.x/artisan.md:579
#: ./docs/10.x/artisan.md:677
#: ./docs/11.x/artisan.md:675
#: ./docs/master/artisan.md:662
msgid "Programmatically Executing Commands"
msgstr ""

#: ./docs/8.x/artisan.md:511
#: ./docs/9.x/artisan.md:581
#: ./docs/10.x/artisan.md:679
#: ./docs/11.x/artisan.md:677
#: ./docs/master/artisan.md:664
msgid "Sometimes you may wish to execute an Artisan command outside of the CLI. For example, you may wish to execute an Artisan command from a route or controller. You may use the `call` method on the `Artisan` facade to accomplish this. The `call` method accepts either the command's signature name or class name as its first argument, and an array of command parameters as the second argument. The exit code will be returned:"
msgstr ""

#: ./docs/10.x/artisan.md:513
#: ./docs/11.x/artisan.md:514
#: ./docs/master/artisan.md:501
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $name = $this->ask('What is your name?');\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:513
#: ./docs/9.x/artisan.md:583
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function ($user) {\n"
"    $exitCode = Artisan::call('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    //\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:523
#: ./docs/11.x/artisan.md:524
#: ./docs/master/artisan.md:511
msgid "The `ask` method also accepts an optional second argument which specifies the default value that should be returned if no user input is provided:"
msgstr ""

#: ./docs/8.x/artisan.md:523
#: ./docs/9.x/artisan.md:593
#: ./docs/10.x/artisan.md:691
#: ./docs/11.x/artisan.md:689
#: ./docs/master/artisan.md:676
msgid "Alternatively, you may pass the entire Artisan command to the `call` method as a string:"
msgstr ""

#: ./docs/10.x/artisan.md:525
#: ./docs/11.x/artisan.md:526
#: ./docs/master/artisan.md:513
msgid "$name = $this->ask('What is your name?', 'Taylor');"
msgstr ""

#: ./docs/8.x/artisan.md:525
#: ./docs/9.x/artisan.md:595
#: ./docs/10.x/artisan.md:693
#: ./docs/11.x/artisan.md:691
#: ./docs/master/artisan.md:678
msgid "Artisan::call('mail:send 1 --queue=default');"
msgstr ""

#: ./docs/8.x/artisan.md:527
#: ./docs/9.x/artisan.md:597
#: ./docs/10.x/artisan.md:695
#: ./docs/11.x/artisan.md:693
#: ./docs/master/artisan.md:680
#~ msgctxt "P"
#~ msgid "<a name=\"passing-array-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:528
#: ./docs/9.x/artisan.md:598
#: ./docs/10.x/artisan.md:696
#: ./docs/11.x/artisan.md:694
#: ./docs/master/artisan.md:681
msgid "Passing Array Values"
msgstr ""

#: ./docs/8.x/artisan.md:530
#: ./docs/9.x/artisan.md:600
#: ./docs/10.x/artisan.md:698
#: ./docs/11.x/artisan.md:696
#: ./docs/master/artisan.md:683
msgid "If your command defines an option that accepts an array, you may pass an array of values to that option:"
msgstr ""

#: ./docs/10.x/artisan.md:532
#: ./docs/11.x/artisan.md:533
#: ./docs/master/artisan.md:520
msgid "Asking for Confirmation"
msgstr ""

#: ./docs/8.x/artisan.md:532
#: ./docs/9.x/artisan.md:602
#: ./docs/10.x/artisan.md:700
#: ./docs/11.x/artisan.md:698
#: ./docs/master/artisan.md:685
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/mail', function () {\n"
"    $exitCode = Artisan::call('mail:send', [\n"
"        '--id' => [5, 13]\n"
"    ]);\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:536
#: ./docs/11.x/artisan.md:537
#: ./docs/master/artisan.md:524
msgid ""
"if ($this->confirm('Do you wish to continue?')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:540
#: ./docs/9.x/artisan.md:610
#: ./docs/10.x/artisan.md:708
#: ./docs/11.x/artisan.md:706
#: ./docs/master/artisan.md:693
#~ msgctxt "P"
#~ msgid "<a name=\"passing-boolean-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:541
#: ./docs/9.x/artisan.md:611
#: ./docs/10.x/artisan.md:709
#: ./docs/11.x/artisan.md:707
#: ./docs/master/artisan.md:694
msgid "Passing Boolean Values"
msgstr ""

#: ./docs/10.x/artisan.md:542
#: ./docs/11.x/artisan.md:543
#: ./docs/master/artisan.md:530
msgid ""
"if ($this->confirm('Do you wish to continue?', true)) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:543
#: ./docs/9.x/artisan.md:613
#: ./docs/10.x/artisan.md:711
#: ./docs/11.x/artisan.md:709
#: ./docs/master/artisan.md:696
msgid "If you need to specify the value of an option that does not accept string values, such as the `--force` flag on the `migrate:refresh` command, you should pass `true` or `false` as the value of the option:"
msgstr ""

#: ./docs/8.x/artisan.md:545
#: ./docs/9.x/artisan.md:615
#: ./docs/10.x/artisan.md:713
#: ./docs/11.x/artisan.md:711
#: ./docs/master/artisan.md:698
msgid ""
"$exitCode = Artisan::call('migrate:refresh', [\n"
"    '--force' => true,\n"
"]);"
msgstr ""

#: ./docs/8.x/artisan.md:549
#: ./docs/9.x/artisan.md:619
#: ./docs/10.x/artisan.md:717
#: ./docs/11.x/artisan.md:715
#: ./docs/master/artisan.md:702
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-artisan-commands\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:550
#: ./docs/9.x/artisan.md:620
#: ./docs/10.x/artisan.md:718
#: ./docs/11.x/artisan.md:716
#: ./docs/master/artisan.md:703
msgid "Queueing Artisan Commands"
msgstr ""

#: ./docs/8.x/artisan.md:552
#: ./docs/9.x/artisan.md:622
#: ./docs/10.x/artisan.md:720
#: ./docs/11.x/artisan.md:718
#: ./docs/master/artisan.md:705
msgid "Using the `queue` method on the `Artisan` facade, you may even queue Artisan commands so they are processed in the background by your [queue workers](/docs/{{version}}/queues). Before using this method, make sure you have configured your queue and are running a queue listener:"
msgstr ""

#: ./docs/8.x/artisan.md:554
#: ./docs/9.x/artisan.md:624
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function ($user) {\n"
"    Artisan::queue('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    //\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:555
#: ./docs/11.x/artisan.md:556
#: ./docs/master/artisan.md:543
msgid ""
"$name = $this->anticipate('What is your address?', function (string $input) {\n"
"    // Return auto-completion options...\n"
"});"
msgstr ""

#: ./docs/8.x/artisan.md:564
#: ./docs/9.x/artisan.md:634
#: ./docs/10.x/artisan.md:732
#: ./docs/11.x/artisan.md:730
#: ./docs/master/artisan.md:717
msgid "Using the `onConnection` and `onQueue` methods, you may specify the connection or queue the Artisan command should be dispatched to:"
msgstr ""

#: ./docs/8.x/artisan.md:566
#: ./docs/9.x/artisan.md:636
#: ./docs/10.x/artisan.md:734
#: ./docs/11.x/artisan.md:732
#: ./docs/master/artisan.md:719
msgid ""
"Artisan::queue('mail:send', [\n"
"    'user' => 1, '--queue' => 'default'\n"
"])->onConnection('redis')->onQueue('commands');"
msgstr ""

#: ./docs/8.x/artisan.md:570
#: ./docs/9.x/artisan.md:640
#: ./docs/10.x/artisan.md:738
#: ./docs/11.x/artisan.md:736
#: ./docs/master/artisan.md:723
#~ msgctxt "P"
#~ msgid "<a name=\"calling-commands-from-other-commands\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:571
#: ./docs/9.x/artisan.md:641
#: ./docs/10.x/artisan.md:739
#: ./docs/11.x/artisan.md:737
#: ./docs/master/artisan.md:724
msgid "Calling Commands From Other Commands"
msgstr ""

#: ./docs/8.x/artisan.md:573
#: ./docs/9.x/artisan.md:643
#: ./docs/10.x/artisan.md:741
#: ./docs/11.x/artisan.md:739
#: ./docs/master/artisan.md:726
msgid "Sometimes you may wish to call other commands from an existing Artisan command. You may do so using the `call` method. This `call` method accepts the command name and an array of command arguments / options:"
msgstr ""

#: ./docs/8.x/artisan.md:575
#: ./docs/9.x/artisan.md:645
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    $this->call('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/artisan.md:585
#: ./docs/11.x/artisan.md:586
#: ./docs/master/artisan.md:573
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    // ...\n"
"\n"
"    $this->info('The command was successful!');\n"
"}"
msgstr ""

#: ./docs/8.x/artisan.md:589
#: ./docs/9.x/artisan.md:659
#: ./docs/10.x/artisan.md:755
#: ./docs/11.x/artisan.md:753
#: ./docs/master/artisan.md:740
msgid "If you would like to call another console command and suppress all of its output, you may use the `callSilently` method. The `callSilently` method has the same signature as the `call` method:"
msgstr ""

#: ./docs/8.x/artisan.md:591
#: ./docs/9.x/artisan.md:661
#: ./docs/10.x/artisan.md:757
#: ./docs/11.x/artisan.md:755
#: ./docs/master/artisan.md:742
msgid ""
"$this->callSilently('mail:send', [\n"
"    'user' => 1, '--queue' => 'default'\n"
"]);"
msgstr ""

#: ./docs/8.x/artisan.md:595
#: ./docs/9.x/artisan.md:665
#: ./docs/10.x/artisan.md:761
#: ./docs/11.x/artisan.md:759
#: ./docs/master/artisan.md:746
#~ msgctxt "P"
#~ msgid "<a name=\"signal-handling\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:596
#: ./docs/9.x/artisan.md:666
#: ./docs/10.x/artisan.md:762
#: ./docs/11.x/artisan.md:760
#: ./docs/master/artisan.md:747
msgid "Signal Handling"
msgstr ""

#: ./docs/8.x/artisan.md:598
msgid "The Symfony Console component, which powers the Artisan console, allows you to indicate which process signals (if any) your command handles. For example, you may indicate that your command handles the `SIGINT` and `SIGTERM` signals."
msgstr ""

#: ./docs/8.x/artisan.md:600
msgid "To get started, you should implement the `Symfony\\Component\\Console\\Command\\SignalableCommandInterface` interface on your Artisan command class. This interface requires you to define two methods: `getSubscribedSignals` and `handleSignal`:"
msgstr ""

#: ./docs/8.x/artisan.md:602
msgid ""
"<?php\n"
"\n"
"use Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\n"
"\n"
"class StartServer extends Command implements SignalableCommandInterface\n"
"{\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Get the list of signals handled by the command.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function getSubscribedSignals(): array\n"
"    {\n"
"        return [SIGINT, SIGTERM];\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle an incoming signal.\n"
"     *\n"
"     * @param  int  $signal\n"
"     * @return void\n"
"     */\n"
"    public function handleSignal(int $signal): void\n"
"    {\n"
"        if ($signal === SIGINT) {\n"
"            $this->stopServer();\n"
"\n"
"            return;\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/artisan.md:629
#: ./docs/11.x/artisan.md:630
#: ./docs/master/artisan.md:617
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $this->withProgressBar(User::all(), function (User $user) {\n"
"    $this->performTask($user);\n"
"});"
msgstr ""

#: ./docs/8.x/artisan.md:638
msgid "As you might expect, the `getSubscribedSignals` method should return an array of the signals that your command can handle, while the `handleSignal` method receives the signal and can respond accordingly."
msgstr ""

#: ./docs/8.x/artisan.md:640
#: ./docs/9.x/artisan.md:692
#: ./docs/10.x/artisan.md:786
#: ./docs/11.x/artisan.md:784
#: ./docs/master/artisan.md:771
#~ msgctxt "P"
#~ msgid "<a name=\"stub-customization\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:641
#: ./docs/9.x/artisan.md:693
#: ./docs/10.x/artisan.md:787
#: ./docs/11.x/artisan.md:785
#: ./docs/master/artisan.md:772
msgid "Stub Customization"
msgstr ""

#: ./docs/8.x/artisan.md:643
#: ./docs/9.x/artisan.md:695
#: ./docs/10.x/artisan.md:789
#: ./docs/11.x/artisan.md:787
#: ./docs/master/artisan.md:774
msgid "The Artisan console's `make` commands are used to create a variety of classes, such as controllers, jobs, migrations, and tests. These classes are generated using \"stub\" files that are populated with values based on your input. However, you may want to make small changes to files generated by Artisan. To accomplish this, you may use the `stub:publish` command to publish the most common stubs to your application so that you can customize them:"
msgstr ""

#: ./docs/8.x/artisan.md:645
#: ./docs/9.x/artisan.md:697
#: ./docs/10.x/artisan.md:791
#: ./docs/11.x/artisan.md:789
#: ./docs/master/artisan.md:776
msgid "php artisan stub:publish"
msgstr ""

#: ./docs/8.x/artisan.md:647
#: ./docs/9.x/artisan.md:701
#: ./docs/10.x/artisan.md:795
#: ./docs/11.x/artisan.md:793
#: ./docs/master/artisan.md:780
msgid "The published stubs will be located within a `stubs` directory in the root of your application. Any changes you make to these stubs will be reflected when you generate their corresponding classes using Artisan's `make` commands."
msgstr ""

#: ./docs/master/artisan.md:647
msgid ""
"->withCommands([\n"
"    __DIR__.'../app/Domain/Orders/Commands',\n"
"])"
msgstr ""

#: ./docs/8.x/artisan.md:649
#: ./docs/9.x/artisan.md:703
#: ./docs/10.x/artisan.md:797
#: ./docs/11.x/artisan.md:795
#: ./docs/master/artisan.md:782
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/artisan.md:650
#: ./docs/9.x/artisan.md:704
#: ./docs/10.x/artisan.md:798
#: ./docs/11.x/artisan.md:796
#: ./docs/master/artisan.md:783
msgid "Events"
msgstr ""

#: ./docs/8.x/artisan.md:652
#: ./docs/9.x/artisan.md:706
#: ./docs/10.x/artisan.md:800
#: ./docs/11.x/artisan.md:798
#: ./docs/master/artisan.md:785
msgid "Artisan dispatches three events when running commands: `Illuminate\\Console\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting`, and `Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` event is dispatched immediately when Artisan starts running. Next, the `CommandStarting` event is dispatched immediately before a command runs. Finally, the `CommandFinished` event is dispatched once a command finishes executing."
msgstr ""

#: ./docs/11.x/artisan.md:653
#: ./docs/master/artisan.md:640
msgid "For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/7.0/components/console/helpers/progressbar.html)."
msgstr ""

#: ./docs/11.x/artisan.md:658
#: ./docs/master/artisan.md:645
msgid "By default, Laravel automatically registers all commands within the `app/Console/Commands` directory. However, you can instruct Laravel to scan other directories for Artisan commands using the `withCommands` method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/10.x/artisan.md:659
msgid ""
"/**\n"
" * Register the commands for the application.\n"
" */\n"
"protected function commands(): void\n"
"{\n"
"    $this->load(__DIR__.'/Commands');\n"
"    $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/11.x/artisan.md:660
msgid ""
"->withCommands([\n"
"    __DIR__.'/../app/Domain/Orders/Commands',\n"
"])"
msgstr ""

#: ./docs/11.x/artisan.md:664
#: ./docs/master/artisan.md:651
msgid "If necessary, you may also manually register commands by providing the command's class name to the `withCommands` method:"
msgstr ""

#: ./docs/11.x/artisan.md:666
#: ./docs/master/artisan.md:653
msgid ""
"use App\\Domain\\Orders\\Commands\\SendEmails;\n"
"\n"
"->withCommands([\n"
"    SendEmails::class,\n"
"])"
msgstr ""

#: ./docs/9.x/artisan.md:668
#: ./docs/10.x/artisan.md:764
#: ./docs/11.x/artisan.md:762
#: ./docs/master/artisan.md:749
msgid "As you may know, operating systems allow signals to be sent to running processes. For example, the `SIGTERM` signal is how operating systems ask a program to terminate. If you wish to listen for signals in your Artisan console commands and execute code when they occur, you may use the `trap` method:"
msgstr ""

#: ./docs/9.x/artisan.md:670
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    $this->trap(SIGTERM, fn () => $this->shouldKeepRunning = false);\n"
"\n"
"    while ($this->shouldKeepRunning) {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/artisan.md:672
#: ./docs/master/artisan.md:659
msgid "When Artisan boots, all the commands in your application will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan."
msgstr ""

#: ./docs/10.x/artisan.md:681
#: ./docs/11.x/artisan.md:679
#: ./docs/master/artisan.md:666
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function (string $user) {\n"
"    $exitCode = Artisan::call('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/9.x/artisan.md:684
#: ./docs/10.x/artisan.md:778
#: ./docs/11.x/artisan.md:776
#: ./docs/master/artisan.md:763
msgid "To listen for multiple signals at once, you may provide an array of signals to the `trap` method:"
msgstr ""

#: ./docs/9.x/artisan.md:686
msgid ""
"$this->trap([SIGTERM, SIGQUIT], function ($signal) {\n"
"    $this->shouldKeepRunning = false;\n"
"\n"
"    dump($signal); // SIGTERM / SIGQUIT\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:722
#: ./docs/11.x/artisan.md:720
#: ./docs/master/artisan.md:707
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function (string $user) {\n"
"    Artisan::queue('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/10.x/artisan.md:743
#: ./docs/11.x/artisan.md:741
#: ./docs/master/artisan.md:728
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $this->call('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/artisan.md:766
#: ./docs/11.x/artisan.md:764
#: ./docs/master/artisan.md:751
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $this->trap(SIGTERM, fn () => $this->shouldKeepRunning = false);\n"
"\n"
"    while ($this->shouldKeepRunning) {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/artisan.md:780
#: ./docs/11.x/artisan.md:778
#: ./docs/master/artisan.md:765
msgid ""
"$this->trap([SIGTERM, SIGQUIT], function (int $signal) {\n"
"    $this->shouldKeepRunning = false;\n"
"\n"
"    dump($signal); // SIGTERM / SIGQUIT\n"
"});"
msgstr ""
