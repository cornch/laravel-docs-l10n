#
msgid ""
msgstr ""

#: docs/8.x/notifications.md:block 1 (header)
msgid "Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Generating Notifications](#generating-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Sending Notifications](#sending-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Using The Notifiable Trait](#using-the-notifiable-trait)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Using The Notification Facade](#using-the-notification-facade)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Specifying Delivery Channels](#specifying-delivery-channels)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Queueing Notifications](#queueing-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[On-Demand Notifications](#on-demand-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Mail Notifications](#mail-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Mail Messages](#formatting-mail-messages)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Sender](#customizing-the-sender)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Recipient](#customizing-the-recipient)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Subject](#customizing-the-subject)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Mailer](#customizing-the-mailer)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Templates](#customizing-the-templates)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Attachments](#mail-attachments)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Using Mailables](#using-mailables)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Previewing Mail Notifications](#previewing-mail-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Markdown Mail Notifications](#markdown-mail-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Generating The Message](#generating-the-message)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Writing The Message](#writing-the-message)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Database Notifications](#database-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#database-prerequisites)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Database Notifications](#formatting-database-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Accessing The Notifications](#accessing-the-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Marking Notifications As Read](#marking-notifications-as-read)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Broadcast Notifications](#broadcast-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#broadcast-prerequisites)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Broadcast Notifications](#formatting-broadcast-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Listening For Notifications](#listening-for-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[SMS Notifications](#sms-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#sms-prerequisites)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting SMS Notifications](#formatting-sms-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Shortcode Notifications](#formatting-shortcode-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The \"From\" Number](#customizing-the-from-number)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Adding A Client Reference](#adding-a-client-reference)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Routing SMS Notifications](#routing-sms-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Slack Notifications](#slack-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#slack-prerequisites)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Slack Notifications](#formatting-slack-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Slack Attachments](#slack-attachments)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Routing Slack Notifications](#routing-slack-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Localizing Notifications](#localizing-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Notification Events](#notification-events)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Custom Channels](#custom-channels)"
msgstr ""

#: docs/8.x/notifications.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/notifications.md:block 5 (paragraph)
msgid "In addition to support for [sending email](/docs/{{version}}/mail), Laravel provides support for sending notifications across a variety of delivery channels, including email, SMS (via [Vonage](https://www.vonage.com/communications-apis/), formerly known as Nexmo), and [Slack](https://slack.com). In addition, a variety of [community built notification channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) have been created to send notification over dozens of different channels! Notifications may also be stored in a database so they may be displayed in your web interface."
msgstr ""

#: docs/8.x/notifications.md:block 6 (paragraph)
msgid "Typically, notifications should be short, informational messages that notify users of something that occurred in your application. For example, if you are writing a billing application, you might send an \"Invoice Paid\" notification to your users via the email and SMS channels."
msgstr ""

#: docs/8.x/notifications.md:block 7 (paragraph)
msgid "<a name=\"generating-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 8 (header)
msgid "Generating Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 9 (paragraph)
msgid "In Laravel, each notification is represented by a single class that is typically stored in the `app/Notifications` directory. Don't worry if you don't see this directory in your application - it will be created for you when you run the `make:notification` Artisan command:"
msgstr ""

#: docs/8.x/notifications.md:block 10 (code)
msgid "php artisan make:notification InvoicePaid\n"
msgstr ""

#: docs/8.x/notifications.md:block 11 (paragraph)
msgid "This command will place a fresh notification class in your `app/Notifications` directory. Each notification class contains a `via` method and a variable number of message building methods, such as `toMail` or `toDatabase`, that convert the notification to a message tailored for that particular channel."
msgstr ""

#: docs/8.x/notifications.md:block 12 (paragraph)
msgid "<a name=\"sending-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 13 (header)
msgid "Sending Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 14 (paragraph)
msgid "<a name=\"using-the-notifiable-trait\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 15 (header)
msgid "Using The Notifiable Trait"
msgstr ""

#: docs/8.x/notifications.md:block 16 (paragraph)
msgid "Notifications may be sent in two ways: using the `notify` method of the `Notifiable` trait or using the `Notification` [facade](/docs/{{version}}/facades). The `Notifiable` trait is included on your application's `App\\Models\\User` model by default:"
msgstr ""

#: docs/8.x/notifications.md:block 17 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 18 (paragraph)
msgid "The `notify` method that is provided by this trait expects to receive a notification instance:"
msgstr ""

#: docs/8.x/notifications.md:block 19 (code)
msgid ""
"use App\\Notifications\\InvoicePaid;\n"
"\n"
"$user->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/8.x/notifications.md:block 20 (quote)
msgid "{tip} Remember, you may use the `Notifiable` trait on any of your models. You are not limited to only including it on your `User` model."
msgstr ""

#: docs/8.x/notifications.md:block 21 (paragraph)
msgid "<a name=\"using-the-notification-facade\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 22 (header)
msgid "Using The Notification Facade"
msgstr ""

#: docs/8.x/notifications.md:block 23 (paragraph)
msgid "Alternatively, you may send notifications via the `Notification` [facade](/docs/{{version}}/facades). This approach is useful when you need to send a notification to multiple notifiable entities such as a collection of users. To send notifications using the facade, pass all of the notifiable entities and the notification instance to the `send` method:"
msgstr ""

#: docs/8.x/notifications.md:block 24 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Notification;\n"
"\n"
"Notification::send($users, new InvoicePaid($invoice));\n"
msgstr ""

#: docs/8.x/notifications.md:block 25 (paragraph)
msgid "You can also send notifications immediately using the `sendNow` method. This method will send the notification immediately even if the notification implements the `ShouldQueue` interface:"
msgstr ""

#: docs/8.x/notifications.md:block 26 (code)
msgid "Notification::sendNow($developers, new DeploymentCompleted($deployment));\n"
msgstr ""

#: docs/8.x/notifications.md:block 27 (paragraph)
msgid "<a name=\"specifying-delivery-channels\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 28 (header)
msgid "Specifying Delivery Channels"
msgstr ""

#: docs/8.x/notifications.md:block 29 (paragraph)
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `nexmo`, and `slack` channels."
msgstr ""

#: docs/8.x/notifications.md:block 30 (quote)
msgid "{tip} If you would like to use other delivery channels such as Telegram or Pusher, check out the community driven [Laravel Notification Channels website](http://laravel-notification-channels.com)."
msgstr ""

#: docs/8.x/notifications.md:block 31 (paragraph)
msgid "The `via` method receives a `$notifiable` instance, which will be an instance of the class to which the notification is being sent. You may use `$notifiable` to determine which channels the notification should be delivered on:"
msgstr ""

#: docs/8.x/notifications.md:block 32 (code)
msgid ""
"/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function via($notifiable)\n"
"{\n"
"    return $notifiable->prefers_sms ? ['nexmo'] : ['mail', 'database'];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 33 (paragraph)
msgid "<a name=\"queueing-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 34 (header)
msgid "Queueing Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 35 (quote)
msgid "{note} Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues)."
msgstr ""

#: docs/8.x/notifications.md:block 36 (paragraph)
msgid "Sending notifications can take time, especially if the channel needs to make an external API call to deliver the notification. To speed up your application's response time, let your notification be queued by adding the `ShouldQueue` interface and `Queueable` trait to your class. The interface and trait are already imported for all notifications generated using the `make:notification` command, so you may immediately add them to your notification class:"
msgstr ""

#: docs/8.x/notifications.md:block 37 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 38 (paragraph)
msgid "Once the `ShouldQueue` interface has been added to your notification, you may send the notification like normal. Laravel will detect the `ShouldQueue` interface on the class and automatically queue the delivery of the notification:"
msgstr ""

#: docs/8.x/notifications.md:block 39 (code)
msgid "$user->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/8.x/notifications.md:block 40 (paragraph)
msgid "If you would like to delay the delivery of the notification, you may chain the `delay` method onto your notification instantiation:"
msgstr ""

#: docs/8.x/notifications.md:block 41 (code)
msgid ""
"$delay = now()->addMinutes(10);\n"
"\n"
"$user->notify((new InvoicePaid($invoice))->delay($delay));\n"
msgstr ""

#: docs/8.x/notifications.md:block 42 (paragraph)
msgid "You may pass an array to the `delay` method to specify the delay amount for specific channels:"
msgstr ""

#: docs/8.x/notifications.md:block 43 (code)
msgid ""
"$user->notify((new InvoicePaid($invoice))->delay([\n"
"    'mail' => now()->addMinutes(5),\n"
"    'sms' => now()->addMinutes(10),\n"
"]));\n"
msgstr ""

#: docs/8.x/notifications.md:block 44 (paragraph)
msgid "When queueing notifications, a queued job will be created for each recipient and channel combination. For example, six jobs will be dispatched to the queue if your notification has three recipients and two channels."
msgstr ""

#: docs/8.x/notifications.md:block 45 (paragraph)
msgid "<a name=\"customizing-the-notification-queue-connection\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 46 (header)
msgid "Customizing The Notification Queue Connection"
msgstr ""

#: docs/8.x/notifications.md:block 47 (paragraph)
msgid "By default, queued notifications will be queued using your application's default queue connection. If you would like to specify a different connection that should be used for a particular notification, you may define a `$connection` property on the notification class:"
msgstr ""

#: docs/8.x/notifications.md:block 48 (code)
msgid ""
"/**\n"
" * The name of the queue connection to use when queueing the notification.\n"
" *\n"
" * @var string\n"
" */\n"
"public $connection = 'redis';\n"
msgstr ""

#: docs/8.x/notifications.md:block 49 (paragraph)
msgid "<a name=\"customizing-notification-channel-queues\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 50 (header)
msgid "Customizing Notification Channel Queues"
msgstr ""

#: docs/8.x/notifications.md:block 51 (paragraph)
msgid "If you would like to specify a specific queue that should be used for each notification channel supported by the notification, you may define a `viaQueues` method on your notification. This method should return an array of channel name / queue name pairs:"
msgstr ""

#: docs/8.x/notifications.md:block 52 (code)
msgid ""
"/**\n"
" * Determine which queues should be used for each notification channel.\n"
" *\n"
" * @return array\n"
" */\n"
"public function viaQueues()\n"
"{\n"
"    return [\n"
"        'mail' => 'mail-queue',\n"
"        'slack' => 'slack-queue',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 53 (paragraph)
msgid "<a name=\"queued-notifications-and-database-transactions\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 54 (header)
msgid "Queued Notifications & Database Transactions"
msgstr ""

#: docs/8.x/notifications.md:block 55 (paragraph)
msgid "When queued notifications are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your notification depends on these models, unexpected errors can occur when the job that sends the queued notification is processed."
msgstr ""

#: docs/8.x/notifications.md:block 56 (paragraph)
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued notification should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the notification:"
msgstr ""

#: docs/8.x/notifications.md:block 57 (code)
msgid ""
"use App\\Notifications\\InvoicePaid;\n"
"\n"
"$user->notify((new InvoicePaid($invoice))->afterCommit());\n"
msgstr ""

#: docs/8.x/notifications.md:block 58 (paragraph)
msgid "Alternatively, you may call the `afterCommit` method from your notification's constructor:"
msgstr ""

#: docs/8.x/notifications.md:block 59 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 60 (quote)
msgid "{tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/8.x/notifications.md:block 61 (paragraph)
msgid "<a name=\"determining-if-the-queued-notification-should-be-sent\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 62 (header)
msgid "Determining If A Queued Notification Should Be Sent"
msgstr ""

#: docs/8.x/notifications.md:block 63 (paragraph)
msgid "After a queued notification has been dispatched for the queue for background processing, it will typically be accepted by a queue worker and sent to its intended recipient."
msgstr ""

#: docs/8.x/notifications.md:block 64 (paragraph)
msgid "However, if you would like to make the final determination on whether the queued notification should be sent after it is being processed by a queue worker, you may define a `shouldSend` method on the notification class. If this method returns `false`, the notification will not be sent:"
msgstr ""

#: docs/8.x/notifications.md:block 65 (code)
msgid ""
"/**\n"
" * Determine if the notification should be sent.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @param  string  $channel\n"
" * @return bool\n"
" */\n"
"public function shouldSend($notifiable, $channel)\n"
"{\n"
"    return $this->invoice->isPaid();\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 66 (paragraph)
msgid "<a name=\"on-demand-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 67 (header)
msgid "On-Demand Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 68 (paragraph)
msgid "Sometimes you may need to send a notification to someone who is not stored as a \"user\" of your application. Using the `Notification` facade's `route` method, you may specify ad-hoc notification routing information before sending the notification:"
msgstr ""

#: docs/8.x/notifications.md:block 69 (code)
msgid ""
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('nexmo', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/8.x/notifications.md:block 70 (paragraph)
msgid "If you would like to provide the recipient's name when sending an on-demand notification to the `mail` route, you may provide an array that contains the email address as the key and the name as the value of the first element in the array:"
msgstr ""

#: docs/8.x/notifications.md:block 71 (code)
msgid ""
"Notification::route('mail', [\n"
"    'barrett@example.com' => 'Barrett Blair',\n"
"])->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/8.x/notifications.md:block 72 (paragraph)
msgid "<a name=\"mail-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 73 (header)
msgid "Mail Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 74 (paragraph)
msgid "<a name=\"formatting-mail-messages\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 75 (header)
msgid "Formatting Mail Messages"
msgstr ""

#: docs/8.x/notifications.md:block 76 (paragraph)
msgid "If a notification supports being sent as an email, you should define a `toMail` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\MailMessage` instance."
msgstr ""

#: docs/8.x/notifications.md:block 77 (paragraph)
msgid "The `MailMessage` class contains a few simple methods to help you build transactional email messages. Mail messages may contain lines of text as well as a \"call to action\". Let's take a look at an example `toMail` method:"
msgstr ""

#: docs/8.x/notifications.md:block 78 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 79 (quote)
msgid "{tip} Note we are using `$this->invoice->id` in our `toMail` method. You may pass any data your notification needs to generate its message into the notification's constructor."
msgstr ""

#: docs/8.x/notifications.md:block 80 (paragraph)
msgid "In this example, we register a greeting, a line of text, a call to action, and then another line of text. These methods provided by the `MailMessage` object make it simple and fast to format small transactional emails. The mail channel will then translate the message components into a beautiful, responsive HTML email template with a plain-text counterpart. Here is an example of an email generated by the `mail` channel:"
msgstr ""

#: docs/8.x/notifications.md:block 82 (quote)
msgid "{tip} When sending mail notifications, be sure to set the `name` configuration option in your `config/app.php` configuration file. This value will be used in the header and footer of your mail notification messages."
msgstr ""

#: docs/8.x/notifications.md:block 83 (paragraph)
msgid "<a name=\"other-mail-notification-formatting-options\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 84 (header)
msgid "Other Mail Notification Formatting Options"
msgstr ""

#: docs/8.x/notifications.md:block 85 (paragraph)
msgid "Instead of defining the \"lines\" of text in the notification class, you may use the `view` method to specify a custom template that should be used to render the notification email:"
msgstr ""

#: docs/8.x/notifications.md:block 86 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        'emails.name', ['invoice' => $this->invoice]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 87 (paragraph)
msgid "You may specify a plain-text view for the mail message by passing the view name as the second element of an array that is given to the `view` method:"
msgstr ""

#: docs/8.x/notifications.md:block 88 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        ['emails.name.html', 'emails.name.plain'],\n"
"        ['invoice' => $this->invoice]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 89 (paragraph)
msgid "<a name=\"error-messages\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 90 (header)
msgid "Error Messages"
msgstr ""

#: docs/8.x/notifications.md:block 91 (paragraph)
msgid "Some notifications inform users of errors, such as a failed invoice payment. You may indicate that a mail message is regarding an error by calling the `error` method when building your message. When using the `error` method on a mail message, the call to action button will be red instead of black:"
msgstr ""

#: docs/8.x/notifications.md:block 92 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Message\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 93 (paragraph)
msgid "<a name=\"customizing-the-sender\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 94 (header)
msgid "Customizing The Sender"
msgstr ""

#: docs/8.x/notifications.md:block 95 (paragraph)
msgid "By default, the email's sender / from address is defined in the `config/mail.php` configuration file. However, you may specify the from address for a specific notification using the `from` method:"
msgstr ""

#: docs/8.x/notifications.md:block 96 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->from('barrett@example.com', 'Barrett Blair')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 97 (paragraph)
msgid "<a name=\"customizing-the-recipient\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 98 (header)
msgid "Customizing The Recipient"
msgstr ""

#: docs/8.x/notifications.md:block 99 (paragraph)
msgid "When sending notifications via the `mail` channel, the notification system will automatically look for an `email` property on your notifiable entity. You may customize which email address is used to deliver the notification by defining a `routeNotificationForMail` method on the notifiable entity:"
msgstr ""

#: docs/8.x/notifications.md:block 100 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the mail channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return array|string\n"
"     */\n"
"    public function routeNotificationForMail($notification)\n"
"    {\n"
"        // Return email address only...\n"
"        return $this->email_address;\n"
"\n"
"        // Return email address and name...\n"
"        return [$this->email_address => $this->name];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 101 (paragraph)
msgid "<a name=\"customizing-the-subject\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 102 (header)
msgid "Customizing The Subject"
msgstr ""

#: docs/8.x/notifications.md:block 103 (paragraph)
msgid "By default, the email's subject is the class name of the notification formatted to \"Title Case\". So, if your notification class is named `InvoicePaid`, the email's subject will be `Invoice Paid`. If you would like to specify a different subject for the message, you may call the `subject` method when building your message:"
msgstr ""

#: docs/8.x/notifications.md:block 104 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 105 (paragraph)
msgid "<a name=\"customizing-the-mailer\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 106 (header)
msgid "Customizing The Mailer"
msgstr ""

#: docs/8.x/notifications.md:block 107 (paragraph)
msgid "By default, the email notification will be sent using the default mailer defined in the `config/mail.php` configuration file. However, you may specify a different mailer at runtime by calling the `mailer` method when building your message:"
msgstr ""

#: docs/8.x/notifications.md:block 108 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->mailer('postmark')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 109 (paragraph)
msgid "<a name=\"customizing-the-templates\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 110 (header)
msgid "Customizing The Templates"
msgstr ""

#: docs/8.x/notifications.md:block 111 (paragraph)
msgid "You can modify the HTML and plain-text template used by mail notifications by publishing the notification package's resources. After running this command, the mail notification templates will be located in the `resources/views/vendor/notifications` directory:"
msgstr ""

#: docs/8.x/notifications.md:block 112 (code)
msgid "php artisan vendor:publish --tag=laravel-notifications\n"
msgstr ""

#: docs/8.x/notifications.md:block 113 (paragraph)
msgid "<a name=\"mail-attachments\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 114 (header)
msgid "Attachments"
msgstr ""

#: docs/8.x/notifications.md:block 115 (paragraph)
msgid "To add attachments to an email notification, use the `attach` method while building your message. The `attach` method accepts the absolute path to the file as its first argument:"
msgstr ""

#: docs/8.x/notifications.md:block 116 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 117 (paragraph)
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#: docs/8.x/notifications.md:block 118 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 119 (paragraph)
msgid "Unlike attaching files in mailable objects, you may not attach a file directly from a storage disk using `attachFromStorage`. You should rather use the `attach` method with an absolute path to the file on the storage disk. Alternatively, you could return a [mailable](/docs/{{version}}/mail#generating-mailables) from the `toMail` method:"
msgstr ""

#: docs/8.x/notifications.md:block 120 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email)\n"
"                ->attachFromStorage('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 121 (paragraph)
msgid "<a name=\"raw-data-attachments\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 122 (header)
msgid "Raw Data Attachments"
msgstr ""

#: docs/8.x/notifications.md:block 123 (paragraph)
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. When calling the `attachData` method, you should provide the filename that should be assigned to the attachment:"
msgstr ""

#: docs/8.x/notifications.md:block 124 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 125 (paragraph)
msgid "<a name=\"using-mailables\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 126 (header)
msgid "Using Mailables"
msgstr ""

#: docs/8.x/notifications.md:block 127 (paragraph)
msgid "If needed, you may return a full [mailable object](/docs/{{version}}/mail) from your notification's `toMail` method. When returning a `Mailable` instead of a `MailMessage`, you will need to specify the message recipient using the mailable object's `to` method:"
msgstr ""

#: docs/8.x/notifications.md:block 128 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 129 (paragraph)
msgid "<a name=\"mailables-and-on-demand-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 130 (header)
msgid "Mailables & On-Demand Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 131 (paragraph)
msgid "If you are sending an [on-demand notification](#on-demand-notifications), the `$notifiable` instance given to the `toMail` method will be an instance of `Illuminate\\Notifications\\AnonymousNotifiable`, which offers a `routeNotificationFor` method that may be used to retrieve the email address the on-demand notification should be sent to:"
msgstr ""

#: docs/8.x/notifications.md:block 132 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Notifications\\AnonymousNotifiable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $address = $notifiable instanceof AnonymousNotifiable\n"
"            ? $notifiable->routeNotificationFor('mail')\n"
"            : $notifiable->email;\n"
"\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($address);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 133 (paragraph)
msgid "<a name=\"previewing-mail-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 134 (header)
msgid "Previewing Mail Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 135 (paragraph)
msgid "When designing a mail notification template, it is convenient to quickly preview the rendered mail message in your browser like a typical Blade template. For this reason, Laravel allows you to return any mail message generated by a mail notification directly from a route closure or controller. When a `MailMessage` is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#: docs/8.x/notifications.md:block 136 (code)
msgid ""
"use App\\Models\\Invoice;\n"
"use App\\Notifications\\InvoicePaid;\n"
"\n"
"Route::get('/notification', function () {\n"
"    $invoice = Invoice::find(1);\n"
"\n"
"    return (new InvoicePaid($invoice))\n"
"                ->toMail($invoice->user);\n"
"});\n"
msgstr ""

#: docs/8.x/notifications.md:block 137 (paragraph)
msgid "<a name=\"markdown-mail-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 138 (header)
msgid "Markdown Mail Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 139 (paragraph)
msgid "Markdown mail notifications allow you to take advantage of the pre-built templates of mail notifications, while giving you more freedom to write longer, customized messages. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#: docs/8.x/notifications.md:block 140 (paragraph)
msgid "<a name=\"generating-the-message\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 141 (header)
msgid "Generating The Message"
msgstr ""

#: docs/8.x/notifications.md:block 142 (paragraph)
msgid "To generate a notification with a corresponding Markdown template, you may use the `--markdown` option of the `make:notification` Artisan command:"
msgstr ""

#: docs/8.x/notifications.md:block 143 (code)
msgid "php artisan make:notification InvoicePaid --markdown=mail.invoice.paid\n"
msgstr ""

#: docs/8.x/notifications.md:block 144 (paragraph)
msgid "Like all other mail notifications, notifications that use Markdown templates should define a `toMail` method on their notification class. However, instead of using the `line` and `action` methods to construct the notification, use the `markdown` method to specify the name of the Markdown template that should be used. An array of data you wish to make available to the template may be passed as the method's second argument:"
msgstr ""

#: docs/8.x/notifications.md:block 145 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 146 (paragraph)
msgid "<a name=\"writing-the-message\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 147 (header)
msgid "Writing The Message"
msgstr ""

#: docs/8.x/notifications.md:block 148 (paragraph)
msgid "Markdown mail notifications use a combination of Blade components and Markdown syntax which allow you to easily construct notifications while leveraging Laravel's pre-crafted notification components:"
msgstr ""

#: docs/8.x/notifications.md:block 149 (code)
msgid ""
"@component('mail::message')\n"
"# Invoice Paid\n"
"\n"
"Your invoice has been paid!\n"
"\n"
"@component('mail::button', ['url' => $url])\n"
"View Invoice\n"
"@endcomponent\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 150 (paragraph)
msgid "<a name=\"button-component\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 151 (header)
msgid "Button Component"
msgstr ""

#: docs/8.x/notifications.md:block 152 (paragraph)
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `green`, and `red`. You may add as many button components to a notification as you wish:"
msgstr ""

#: docs/8.x/notifications.md:block 153 (code)
msgid ""
"@component('mail::button', ['url' => $url, 'color' => 'green'])\n"
"View Invoice\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 154 (paragraph)
msgid "<a name=\"panel-component\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 155 (header)
msgid "Panel Component"
msgstr ""

#: docs/8.x/notifications.md:block 156 (paragraph)
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the notification. This allows you to draw attention to a given block of text:"
msgstr ""

#: docs/8.x/notifications.md:block 157 (code)
msgid ""
"@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 158 (paragraph)
msgid "<a name=\"table-component\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 159 (header)
msgid "Table Component"
msgstr ""

#: docs/8.x/notifications.md:block 160 (paragraph)
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#: docs/8.x/notifications.md:block 161 (code)
msgid ""
"@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 162 (paragraph)
msgid "<a name=\"customizing-the-components\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 163 (header)
msgid "Customizing The Components"
msgstr ""

#: docs/8.x/notifications.md:block 164 (paragraph)
msgid "You may export all of the Markdown notification components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#: docs/8.x/notifications.md:block 165 (code)
msgid "php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#: docs/8.x/notifications.md:block 166 (paragraph)
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#: docs/8.x/notifications.md:block 167 (paragraph)
msgid "<a name=\"customizing-the-css\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 168 (header)
msgid "Customizing The CSS"
msgstr ""

#: docs/8.x/notifications.md:block 169 (paragraph)
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be in-lined within the HTML representations of your Markdown notifications."
msgstr ""

#: docs/8.x/notifications.md:block 170 (paragraph)
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of the `mail` configuration file to match the name of your new theme."
msgstr ""

#: docs/8.x/notifications.md:block 171 (paragraph)
msgid "To customize the theme for an individual notification, you may call the `theme` method while building the notification's mail message. The `theme` method accepts the name of the theme that should be used when sending the notification:"
msgstr ""

#: docs/8.x/notifications.md:block 172 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->theme('invoice')\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 173 (paragraph)
msgid "<a name=\"database-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 174 (header)
msgid "Database Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 175 (paragraph)
msgid "<a name=\"database-prerequisites\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 176 (header)
msgid "Prerequisites"
msgstr ""

#: docs/8.x/notifications.md:block 177 (paragraph)
msgid "The `database` notification channel stores the notification information in a database table. This table will contain information such as the notification type as well as a JSON data structure that describes the notification."
msgstr ""

#: docs/8.x/notifications.md:block 178 (paragraph)
msgid "You can query the table to display the notifications in your application's user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the `notifications:table` command to generate a [migration](/docs/{{version}}/migrations) with the proper table schema:"
msgstr ""

#: docs/8.x/notifications.md:block 179 (code)
msgid ""
"php artisan notifications:table\n"
"\n"
"php artisan migrate\n"
msgstr ""

#: docs/8.x/notifications.md:block 180 (paragraph)
msgid "<a name=\"formatting-database-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 181 (header)
msgid "Formatting Database Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 182 (paragraph)
msgid "If a notification supports being stored in a database table, you should define a `toDatabase` or `toArray` method on the notification class. This method will receive a `$notifiable` entity and should return a plain PHP array. The returned array will be encoded as JSON and stored in the `data` column of your `notifications` table. Let's take a look at an example `toArray` method:"
msgstr ""

#: docs/8.x/notifications.md:block 183 (code)
msgid ""
"/**\n"
" * Get the array representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function toArray($notifiable)\n"
"{\n"
"    return [\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 184 (paragraph)
msgid "<a name=\"todatabase-vs-toarray\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 185 (header)
msgid "`toDatabase` Vs. `toArray`"
msgstr ""

#: docs/8.x/notifications.md:block 186 (paragraph)
msgid "The `toArray` method is also used by the `broadcast` channel to determine which data to broadcast to your JavaScript powered frontend. If you would like to have two different array representations for the `database` and `broadcast` channels, you should define a `toDatabase` method instead of a `toArray` method."
msgstr ""

#: docs/8.x/notifications.md:block 187 (paragraph)
msgid "<a name=\"accessing-the-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 188 (header)
msgid "Accessing The Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 189 (paragraph)
msgid "Once notifications are stored in the database, you need a convenient way to access them from your notifiable entities. The `Illuminate\\Notifications\\Notifiable` trait, which is included on Laravel's default `App\\Models\\User` model, includes a `notifications` [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that returns the notifications for the entity. To fetch notifications, you may access this method like any other Eloquent relationship. By default, notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#: docs/8.x/notifications.md:block 190 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"foreach ($user->notifications as $notification) {\n"
"    echo $notification->type;\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 191 (paragraph)
msgid "If you want to retrieve only the \"unread\" notifications, you may use the `unreadNotifications` relationship. Again, these notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#: docs/8.x/notifications.md:block 192 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"foreach ($user->unreadNotifications as $notification) {\n"
"    echo $notification->type;\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 193 (quote)
msgid "{tip} To access your notifications from your JavaScript client, you should define a notification controller for your application which returns the notifications for a notifiable entity, such as the current user. You may then make an HTTP request to that controller's URL from your JavaScript client."
msgstr ""

#: docs/8.x/notifications.md:block 194 (paragraph)
msgid "<a name=\"marking-notifications-as-read\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 195 (header)
msgid "Marking Notifications As Read"
msgstr ""

#: docs/8.x/notifications.md:block 196 (paragraph)
msgid "Typically, you will want to mark a notification as \"read\" when a user views it. The `Illuminate\\Notifications\\Notifiable` trait provides a `markAsRead` method, which updates the `read_at` column on the notification's database record:"
msgstr ""

#: docs/8.x/notifications.md:block 197 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"foreach ($user->unreadNotifications as $notification) {\n"
"    $notification->markAsRead();\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 198 (paragraph)
msgid "However, instead of looping through each notification, you may use the `markAsRead` method directly on a collection of notifications:"
msgstr ""

#: docs/8.x/notifications.md:block 199 (code)
msgid "$user->unreadNotifications->markAsRead();\n"
msgstr ""

#: docs/8.x/notifications.md:block 200 (paragraph)
msgid "You may also use a mass-update query to mark all of the notifications as read without retrieving them from the database:"
msgstr ""

#: docs/8.x/notifications.md:block 201 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"$user->unreadNotifications()->update(['read_at' => now()]);\n"
msgstr ""

#: docs/8.x/notifications.md:block 202 (paragraph)
msgid "You may `delete` the notifications to remove them from the table entirely:"
msgstr ""

#: docs/8.x/notifications.md:block 203 (code)
msgid "$user->notifications()->delete();\n"
msgstr ""

#: docs/8.x/notifications.md:block 204 (paragraph)
msgid "<a name=\"broadcast-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 205 (header)
msgid "Broadcast Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 206 (paragraph)
msgid "<a name=\"broadcast-prerequisites\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 208 (paragraph)
msgid "Before broadcasting notifications, you should configure and be familiar with Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services. Event broadcasting provides a way to react to server-side Laravel events from your JavaScript powered frontend."
msgstr ""

#: docs/8.x/notifications.md:block 209 (paragraph)
msgid "<a name=\"formatting-broadcast-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 210 (header)
msgid "Formatting Broadcast Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 211 (paragraph)
msgid "The `broadcast` channel broadcasts notifications using Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services, allowing your JavaScript powered frontend to catch notifications in realtime. If a notification supports broadcasting, you can define a `toBroadcast` method on the notification class. This method will receive a `$notifiable` entity and should return a `BroadcastMessage` instance. If the `toBroadcast` method does not exist, the `toArray` method will be used to gather the data that should be broadcast. The returned data will be encoded as JSON and broadcast to your JavaScript powered frontend. Let's take a look at an example `toBroadcast` method:"
msgstr ""

#: docs/8.x/notifications.md:block 212 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
"\n"
"/**\n"
" * Get the broadcastable representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return BroadcastMessage\n"
" */\n"
"public function toBroadcast($notifiable)\n"
"{\n"
"    return new BroadcastMessage([\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 213 (paragraph)
msgid "<a name=\"broadcast-queue-configuration\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 214 (header)
msgid "Broadcast Queue Configuration"
msgstr ""

#: docs/8.x/notifications.md:block 215 (paragraph)
msgid "All broadcast notifications are queued for broadcasting. If you would like to configure the queue connection or queue name that is used to queue the broadcast operation, you may use the `onConnection` and `onQueue` methods of the `BroadcastMessage`:"
msgstr ""

#: docs/8.x/notifications.md:block 216 (code)
msgid ""
"return (new BroadcastMessage($data))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('broadcasts');\n"
msgstr ""

#: docs/8.x/notifications.md:block 217 (paragraph)
msgid "<a name=\"customizing-the-notification-type\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 218 (header)
msgid "Customizing The Notification Type"
msgstr ""

#: docs/8.x/notifications.md:block 219 (paragraph)
msgid "In addition to the data you specify, all broadcast notifications also have a `type` field containing the full class name of the notification. If you would like to customize the notification `type`, you may define a `broadcastType` method on the notification class:"
msgstr ""

#: docs/8.x/notifications.md:block 220 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
"\n"
"/**\n"
" * Get the type of the notification being broadcast.\n"
" *\n"
" * @return string\n"
" */\n"
"public function broadcastType()\n"
"{\n"
"    return 'broadcast.message';\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 221 (paragraph)
msgid "<a name=\"listening-for-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 222 (header)
msgid "Listening For Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 223 (paragraph)
msgid "Notifications will broadcast on a private channel formatted using a `{notifiable}.{id}` convention. So, if you are sending a notification to an `App\\Models\\User` instance with an ID of `1`, the notification will be broadcast on the `App.Models.User.1` private channel. When using [Laravel Echo](/docs/{{version}}/broadcasting#client-side-installation), you may easily listen for notifications on a channel using the `notification` method:"
msgstr ""

#: docs/8.x/notifications.md:block 224 (code)
msgid ""
"Echo.private('App.Models.User.' + userId)\n"
"    .notification((notification) => {\n"
"        console.log(notification.type);\n"
"    });\n"
msgstr ""

#: docs/8.x/notifications.md:block 225 (paragraph)
msgid "<a name=\"customizing-the-notification-channel\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 226 (header)
msgid "Customizing The Notification Channel"
msgstr ""

#: docs/8.x/notifications.md:block 227 (paragraph)
msgid "If you would like to customize which channel that an entity's broadcast notifications are broadcast on, you may define a `receivesBroadcastNotificationsOn` method on the notifiable entity:"
msgstr ""

#: docs/8.x/notifications.md:block 228 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * The channels the user receives notification broadcasts on.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function receivesBroadcastNotificationsOn()\n"
"    {\n"
"        return 'users.'.$this->id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 229 (paragraph)
msgid "<a name=\"sms-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 230 (header)
msgid "SMS Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 231 (paragraph)
msgid "<a name=\"sms-prerequisites\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 233 (paragraph)
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/nexmo-notification-channel` and `nexmo/laravel` Composer packages"
msgstr ""

#: docs/8.x/notifications.md:block 234 (code)
msgid "composer require laravel/nexmo-notification-channel nexmo/laravel\n"
msgstr ""

#: docs/8.x/notifications.md:block 235 (paragraph)
msgid "The `nexmo/laravel` package includes [its own configuration file](https://github.com/Nexmo/nexmo-laravel/blob/master/config/nexmo.php). However, you are not required to export this configuration file to your own application. You can simply use the `NEXMO_KEY` and `NEXMO_SECRET` environment variables to set your Vonage public and secret key."
msgstr ""

#: docs/8.x/notifications.md:block 236 (paragraph)
msgid "Next, you will need to add a `nexmo` configuration entry to your `config/services.php` configuration file. You may copy the example configuration below to get started:"
msgstr ""

#: docs/8.x/notifications.md:block 237 (code)
msgid ""
"'nexmo' => [\n"
"    'sms_from' => '15556666666',\n"
"],\n"
msgstr ""

#: docs/8.x/notifications.md:block 238 (paragraph)
msgid "The `sms_from` option is the phone number that your SMS messages will be sent from. You should generate a phone number for your application in the Vonage control panel."
msgstr ""

#: docs/8.x/notifications.md:block 239 (paragraph)
msgid "<a name=\"formatting-sms-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 240 (header)
msgid "Formatting SMS Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 241 (paragraph)
msgid "If a notification supports being sent as an SMS, you should define a `toNexmo` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\NexmoMessage` instance:"
msgstr ""

#: docs/8.x/notifications.md:block 242 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 243 (paragraph)
msgid "<a name=\"unicode-content\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 244 (header)
msgid "Unicode Content"
msgstr ""

#: docs/8.x/notifications.md:block 245 (paragraph)
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `NexmoMessage` instance:"
msgstr ""

#: docs/8.x/notifications.md:block 246 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 247 (paragraph)
msgid "<a name=\"formatting-shortcode-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 248 (header)
msgid "Formatting Shortcode Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 249 (paragraph)
msgid "Laravel also supports sending shortcode notifications, which are pre-defined message templates in your Vonage account. To send a shortcode SMS notification, you should define a `toShortcode` method on your notification class. From within this method, you may return an array specifying the type of notification (`alert`, `2fa`, or `marketing`) as well as the custom values that will populate the template:"
msgstr ""

#: docs/8.x/notifications.md:block 250 (code)
msgid ""
"/**\n"
" * Get the Vonage / Shortcode representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function toShortcode($notifiable)\n"
"{\n"
"    return [\n"
"        'type' => 'alert',\n"
"        'custom' => [\n"
"            'code' => 'ABC123',\n"
"        ],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 251 (quote)
msgid "{tip} Like [routing SMS Notifications](#routing-sms-notifications), you should implement the `routeNotificationForShortcode` method on your notifiable model."
msgstr ""

#: docs/8.x/notifications.md:block 252 (paragraph)
msgid "<a name=\"customizing-the-from-number\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 253 (header)
msgid "Customizing The \"From\" Number"
msgstr ""

#: docs/8.x/notifications.md:block 254 (paragraph)
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified in your `config/services.php` file, you may call the `from` method on a `NexmoMessage` instance:"
msgstr ""

#: docs/8.x/notifications.md:block 255 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 256 (paragraph)
msgid "<a name=\"adding-a-client-reference\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 257 (header)
msgid "Adding a Client Reference"
msgstr ""

#: docs/8.x/notifications.md:block 258 (paragraph)
msgid "If you would like to keep track of costs per user, team, or client, you may add a \"client reference\" to the notification. Vonage will allow you to generate reports using this client reference so that you can better understand a particular customer's SMS usage. The client reference can be any string up to 40 characters:"
msgstr ""

#: docs/8.x/notifications.md:block 259 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 260 (paragraph)
msgid "<a name=\"routing-sms-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 261 (header)
msgid "Routing SMS Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 262 (paragraph)
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForNexmo` method on your notifiable entity:"
msgstr ""

#: docs/8.x/notifications.md:block 263 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Nexmo channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForNexmo($notification)\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 264 (paragraph)
msgid "<a name=\"slack-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 265 (header)
msgid "Slack Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 266 (paragraph)
msgid "<a name=\"slack-prerequisites\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 268 (paragraph)
msgid "Before you can send notifications via Slack, you must install the Slack notification channel via Composer:"
msgstr ""

#: docs/8.x/notifications.md:block 269 (code)
msgid "composer require laravel/slack-notification-channel\n"
msgstr ""

#: docs/8.x/notifications.md:block 270 (paragraph)
msgid "You will also need to create a [Slack App](https://api.slack.com/apps?new_app=1) for your team. After creating the App, you should configure an \"Incoming Webhook\" for the workspace. Slack will then provide you with a webhook URL that you may use when [routing Slack notifications](#routing-slack-notifications)."
msgstr ""

#: docs/8.x/notifications.md:block 271 (paragraph)
msgid "<a name=\"formatting-slack-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 272 (header)
msgid "Formatting Slack Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 273 (paragraph)
msgid "If a notification supports being sent as a Slack message, you should define a `toSlack` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\SlackMessage` instance. Slack messages may contain text content as well as an \"attachment\" that formats additional text or an array of fields. Let's take a look at a basic `toSlack` example:"
msgstr ""

#: docs/8.x/notifications.md:block 274 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    return (new SlackMessage)\n"
"                ->content('One of your invoices has been paid!');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 275 (paragraph)
msgid "<a name=\"slack-attachments\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 276 (header)
msgid "Slack Attachments"
msgstr ""

#: docs/8.x/notifications.md:block 277 (paragraph)
msgid "You may also add \"attachments\" to Slack messages. Attachments provide richer formatting options than simple text messages. In this example, we will send an error notification about an exception that occurred in an application, including a link to view more details about the exception:"
msgstr ""

#: docs/8.x/notifications.md:block 278 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was not found.');\n"
"                });\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 279 (paragraph)
msgid "Attachments also allow you to specify an array of data that should be presented to the user. The given data will be presented in a table-style format for easy reading:"
msgstr ""

#: docs/8.x/notifications.md:block 280 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/invoices/'.$this->invoice->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->success()\n"
"                ->content('One of your invoices has been paid!')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Invoice 1322', $url)\n"
"                               ->fields([\n"
"                                    'Title' => 'Server Expenses',\n"
"                                    'Amount' => '$1,234',\n"
"                                    'Via' => 'American Express',\n"
"                                    'Was Overdue' => ':-1:',\n"
"                                ]);\n"
"                });\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 281 (paragraph)
msgid "<a name=\"markdown-attachment-content\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 282 (header)
msgid "Markdown Attachment Content"
msgstr ""

#: docs/8.x/notifications.md:block 283 (paragraph)
msgid "If some of your attachment fields contain Markdown, you may use the `markdown` method to instruct Slack to parse and display the given attachment fields as Markdown formatted text. The values accepted by this method are: `pretext`, `text`, and / or `fields`. For more information about Slack attachment formatting, check out the [Slack API documentation](https://api.slack.com/docs/message-formatting#message_formatting):"
msgstr ""

#: docs/8.x/notifications.md:block 284 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was *not found*.')\n"
"                               ->markdown(['text']);\n"
"                });\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 285 (paragraph)
msgid "<a name=\"routing-slack-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 286 (header)
msgid "Routing Slack Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 287 (paragraph)
msgid "To route Slack notifications to the proper Slack team and channel, define a `routeNotificationForSlack` method on your notifiable entity. This should return the webhook URL to which the notification should be delivered. Webhook URLs may be generated by adding an \"Incoming Webhook\" service to your Slack team:"
msgstr ""

#: docs/8.x/notifications.md:block 288 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForSlack($notification)\n"
"    {\n"
"        return 'https://hooks.slack.com/services/...';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 289 (paragraph)
msgid "<a name=\"localizing-notifications\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 290 (header)
msgid "Localizing Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 291 (paragraph)
msgid "Laravel allows you to send notifications in a locale other than the HTTP request's current locale, and will even remember this locale if the notification is queued."
msgstr ""

#: docs/8.x/notifications.md:block 292 (paragraph)
msgid "To accomplish this, the `Illuminate\\Notifications\\Notification` class offers a `locale` method to set the desired language. The application will change into this locale when the notification is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#: docs/8.x/notifications.md:block 293 (code)
msgid "$user->notify((new InvoicePaid($invoice))->locale('es'));\n"
msgstr ""

#: docs/8.x/notifications.md:block 294 (paragraph)
msgid "Localization of multiple notifiable entries may also be achieved via the `Notification` facade:"
msgstr ""

#: docs/8.x/notifications.md:block 295 (code)
msgid ""
"Notification::locale('es')->send(\n"
"    $users, new InvoicePaid($invoice)\n"
");\n"
msgstr ""

#: docs/8.x/notifications.md:block 296 (paragraph)
msgid "<a name=\"user-preferred-locales\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 297 (header)
msgid "User Preferred Locales"
msgstr ""

#: docs/8.x/notifications.md:block 298 (paragraph)
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on your notifiable model, you may instruct Laravel to use this stored locale when sending a notification:"
msgstr ""

#: docs/8.x/notifications.md:block 299 (code)
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 300 (paragraph)
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending notifications and mailables to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#: docs/8.x/notifications.md:block 302 (paragraph)
msgid "<a name=\"notification-events\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 303 (header)
msgid "Notification Events"
msgstr ""

#: docs/8.x/notifications.md:block 304 (paragraph)
msgid "<a name=\"notification-sending-event\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 305 (header)
msgid "Notification Sending Event"
msgstr ""

#: docs/8.x/notifications.md:block 306 (paragraph)
msgid "When a notification is sending, the `Illuminate\\Notifications\\Events\\NotificationSending` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your application's `EventServiceProvider`:"
msgstr ""

#: docs/8.x/notifications.md:block 307 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Notifications\\Events\\NotificationSending' => [\n"
"        'App\\Listeners\\CheckNotificationStatus',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/8.x/notifications.md:block 308 (paragraph)
msgid "The notification will not be sent if an event listener for the `NotificationSending` event returns `false` from its `handle` method:"
msgstr ""

#: docs/8.x/notifications.md:block 309 (code)
msgid ""
"use Illuminate\\Notifications\\Events\\NotificationSending;\n"
"\n"
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSending  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSending $event)\n"
"{\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 310 (paragraph)
msgid "Within an event listener, you may access the `notifiable`, `notification`, and `channel` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#: docs/8.x/notifications.md:block 311 (code)
msgid ""
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSending  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSending $event)\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 312 (paragraph)
msgid "<a name=\"notification-sent-event\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 313 (header)
msgid "Notification Sent Event"
msgstr ""

#: docs/8.x/notifications.md:block 314 (paragraph)
msgid "When a notification is sent, the `Illuminate\\Notifications\\Events\\NotificationSent` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your `EventServiceProvider`:"
msgstr ""

#: docs/8.x/notifications.md:block 315 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Notifications\\Events\\NotificationSent' => [\n"
"        'App\\Listeners\\LogNotification',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/8.x/notifications.md:block 316 (quote)
msgid "{tip} After registering listeners in your `EventServiceProvider`, use the `event:generate` Artisan command to quickly generate listener classes."
msgstr ""

#: docs/8.x/notifications.md:block 317 (paragraph)
msgid "Within an event listener, you may access the `notifiable`, `notification`, `channel`, and `response` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#: docs/8.x/notifications.md:block 318 (code)
msgid ""
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSent  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSent $event)\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"    // $event->response\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 319 (paragraph)
msgid "<a name=\"custom-channels\"></a>"
msgstr ""

#: docs/8.x/notifications.md:block 320 (header)
msgid "Custom Channels"
msgstr ""

#: docs/8.x/notifications.md:block 321 (paragraph)
msgid "Laravel ships with a handful of notification channels, but you may want to write your own drivers to deliver notifications via other channels. Laravel makes it simple. To get started, define a class that contains a `send` method. The method should receive two arguments: a `$notifiable` and a `$notification`."
msgstr ""

#: docs/8.x/notifications.md:block 322 (paragraph)
msgid "Within the `send` method, you may call methods on the notification to retrieve a message object understood by your channel and then send the notification to the `$notifiable` instance however you wish:"
msgstr ""

#: docs/8.x/notifications.md:block 323 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class VoiceChannel\n"
"{\n"
"    /**\n"
"     * Send the given notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return void\n"
"     */\n"
"    public function send($notifiable, Notification $notification)\n"
"    {\n"
"        $message = $notification->toVoice($notifiable);\n"
"\n"
"        // Send notification to the $notifiable instance...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 324 (paragraph)
msgid "Once your notification channel class has been defined, you may return the class name from the `via` method of any of your notifications. In this example, the `toVoice` method of your notification can return whatever object you choose to represent voice messages. For example, you might define your own `VoiceMessage` class to represent these messages:"
msgstr ""

#: docs/8.x/notifications.md:block 325 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use App\\Notifications\\Messages\\VoiceMessage;\n"
"use App\\Notifications\\VoiceChannel;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Get the notification channels.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array|string\n"
"     */\n"
"    public function via($notifiable)\n"
"    {\n"
"        return [VoiceChannel::class];\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the voice representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return VoiceMessage\n"
"     */\n"
"    public function toVoice($notifiable)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 29 (paragraph)
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `vonage`, and `slack` channels."
msgstr ""

#: docs/9.x/notifications.md:block 32 (code)
msgid ""
"/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function via($notifiable)\n"
"{\n"
"    return $notifiable->prefers_sms ? ['vonage'] : ['mail', 'database'];\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 69 (code)
msgid ""
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('vonage', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/9.x/notifications.md:block 233 (paragraph)
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/vonage-notification-channel` and `guzzlehttp/guzzle` packages:"
msgstr ""

#: docs/9.x/notifications.md:block 234 (code)
msgid "composer require laravel/vonage-notification-channel guzzlehttp/guzzle\n"
msgstr ""

#: docs/9.x/notifications.md:block 235 (paragraph)
msgid "The package includes a [configuration file](https://github.com/laravel/vonage-notification-channel/blob/3.x/config/vonage.php). However, you are not required to export this configuration file to your own application. You can simply use the `VONAGE_KEY` and `VONAGE_SECRET` environment variables to define your Vonage public and secret keys."
msgstr ""

#: docs/9.x/notifications.md:block 236 (paragraph)
msgid "After defining your keys, you may set a `VONAGE_SMS_FROM` environment variable that defines the phone number that your SMS messages should be sent from by default. You may generate this phone number within the Vonage control panel:"
msgstr ""

#: docs/9.x/notifications.md:block 237 (code)
msgid "VONAGE_SMS_FROM=15556666666\n"
msgstr ""

#: docs/9.x/notifications.md:block 240 (paragraph)
msgid "If a notification supports being sent as an SMS, you should define a `toVonage` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\VonageMessage` instance:"
msgstr ""

#: docs/9.x/notifications.md:block 241 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 244 (paragraph)
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `VonageMessage` instance:"
msgstr ""

#: docs/9.x/notifications.md:block 245 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 248 (paragraph)
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified by your `VONAGE_SMS_FROM` environment variable, you may call the `from` method on a `VonageMessage` instance:"
msgstr ""

#: docs/9.x/notifications.md:block 249 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 253 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 256 (paragraph)
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForVonage` method on your notifiable entity:"
msgstr ""

#: docs/9.x/notifications.md:block 257 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Vonage channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForVonage($notification)\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}\n"
msgstr ""
