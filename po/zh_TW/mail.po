msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/mail.pot\n"
"X-Crowdin-File-ID: 99\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-02-13 09:29\n"

#: docs/8.x/mail.md:block 1 (header)
msgid "Mail"
msgstr "郵件"

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Failover Configuration](#failover-configuration)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Generating Mailables](#generating-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Writing Mailables](#writing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuring The View](#configuring-the-view)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[View Data](#view-data)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Attachments](#attachments)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Inline Attachments](#inline-attachments)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Sending Mail](#sending-mail)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Queueing Mail](#queueing-mail)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Testing Mailables](#testing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/8.x/mail.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr "傳送郵件不會很複雜。Laravel 提供簡潔的 API，並由熱門的 [SwiftMailer](https://swiftmailer.symfony.com/) 函式庫驅動。Laravel 與 SwiftMailer 提供使用 SMTP、Mailgun、Postmark、Amazon SES、`sendmail` 等方式寄信的 Driver，可讓我們使用偏好的本機或雲端服務來快速開始傳送郵件。"

#: docs/8.x/mail.md:block 7 (header)
msgid "Configuration"
msgstr "設定"

#: docs/8.x/mail.md:block 8 (paragraph)
msgid "Laravel's email services may be configured via your application's `config/mail.php` configuration file. Each mailer configured within this file may have its own unique configuration and even its own unique \"transport\", allowing your application to use different email services to send certain email messages. For example, your application might use Postmark to send transactional emails while using Amazon SES to send bulk emails."
msgstr "可以使用專案的 `config/mail.php` 設定檔來設定 Laravel 的郵件服務。在這個檔案中，每個 ^[Mailer](郵件傳送程式) 都可以有不同的設定，甚至還可以設定不同的「Transport」設定，這樣我們就可以在程式中使用不同的電子郵件服務來寄送不同的訊息。舉例來說，我們可以使用 Postmark 來寄送交易電子郵件，並使用 Amazon SES 來傳送大量寄送的電子郵件。"

#: docs/8.x/mail.md:block 9 (paragraph)
msgid "Within your `mail` configuration file, you will find a `mailers` configuration array. This array contains a sample configuration entry for each of the major mail drivers / transports supported by Laravel, while the `default` configuration value determines which mailer will be used by default when your application needs to send an email message."
msgstr "在 `mail` 設定檔中，可以看到一個 `mailers` 設定陣列。這個陣列中包含了 Laravel 支援的各個主要郵件 Driver / Transport 範例設定，而其中 `default` 設定值用來判斷專案預設要使用哪個 Mailer 來傳送電子郵件訊息。"

#: docs/8.x/mail.md:block 11 (header)
msgid "Driver / Transport Prerequisites"
msgstr "Driver / Transport 的前置要求"

#: docs/8.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers. All of the API based drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:"
msgstr "如 Mailgun 與 Postmark 等基於 API 的 Driver 在寄送郵件時通常會比 SMTP 伺服器來得簡單快速。若可能的話，我們建議你從這幾個 Driver 中選一個使用。這些基於 API 的 Driver 都要求要有 Guzzle HTTP 函式庫，可以通過 Composer 套件管理員來安裝 Guzzle HTTP 函式庫："

#: docs/8.x/mail.md:block 13 (code)
msgid "composer require guzzlehttp/guzzle\n"
msgstr ""

#: docs/8.x/mail.md:block 15 (header)
msgid "Mailgun Driver"
msgstr "Mailgun Driver"

#: docs/8.x/mail.md:block 16 (paragraph)
msgid "To use the Mailgun driver, first install the Guzzle HTTP library. Then, set the `default` option in your `config/mail.php` configuration file to `mailgun`. Next, verify that your `config/services.php` configuration file contains the following options:"
msgstr "若要使用 Mailgun Driver，請先安裝 Guzzle HTTP 函式庫。接著，在 `config/mail.php` 設定檔中將 `default` 選項設為 `mailgun`。接著，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: docs/8.x/mail.md:block 17 (code)
msgid "'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 18 (paragraph)
msgid "If you are not using the United States [Mailgun region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), you may define your region's endpoint in the `services` configuration file:"
msgstr "若你使用的 [Mailgun 地區](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions)不是美國的話，請在 `services` 設定檔中定義該地區的 Endpoint："

#: docs/8.x/mail.md:block 19 (code)
msgid "'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 21 (header)
msgid "Postmark Driver"
msgstr "Postmark Driver"

#: docs/8.x/mail.md:block 22 (paragraph)
msgid "To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:"
msgstr "若要使用 Postmark Driver，請使用 Composer 安裝 Postmark 的 SwiftMailer Transport："

#: docs/8.x/mail.md:block 23 (code)
msgid "composer require wildbit/swiftmailer-postmark\n"
msgstr ""

#: docs/8.x/mail.md:block 24 (paragraph)
msgid "Next, install the Guzzle HTTP library and set the `default` option in your `config/mail.php` configuration file to `postmark`. Finally, verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請安裝 Guzzle HTTP 函式庫。然後，在 `config/mail.php` 設定檔中將 `default` 選項設為 `postmark`。最後，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: docs/8.x/mail.md:block 25 (code)
msgid "'postmark' => [\n"
"    'token' => env('POSTMARK_TOKEN'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 26 (paragraph)
msgid "If you would like to specify the Postmark message stream that should be used by a given mailer, you may add the `message_stream_id` configuration option to the mailer's configuration array. This configuration array can be found in your application's `config/mail.php` configuration file:"
msgstr "若想為給定 Mailer 指定 Postmark ^[訊息串流](Message Stream)，請在該 Mailer 的設定陣列中加上 `message_stream_id` 設定選項。該設定陣列可在 `config/mail.php` 設定檔中找到："

#: docs/8.x/mail.md:block 27 (code)
msgid "'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 28 (paragraph)
msgid "This way you are also able to set up multiple Postmark mailers with different message streams."
msgstr "這樣一來，我們就能設定多個 Postmark Mailer，並給不同 Mailer 設定不同的訊息串流。"

#: docs/8.x/mail.md:block 30 (header)
msgid "SES Driver"
msgstr "SES Driver"

#: docs/8.x/mail.md:block 31 (paragraph)
msgid "To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library via the Composer package manager:"
msgstr "若要使用 Amazon SES Driver，必須先安裝 PHP 版的 Amazon SDK。可使用 Composer 套件管理員來安裝這個函式庫："

#: docs/8.x/mail.md:block 32 (code)
msgid "composer require aws/aws-sdk-php\n"
msgstr "composer require aws/aws-sdk-php\n"

#: docs/8.x/mail.md:block 33 (paragraph)
msgid "Next, set the `default` option in your `config/mail.php` configuration file to `ses` and verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請在 `config/mail.php` 設定檔中將 `default` 選項設為 `ses`，然後確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: docs/8.x/mail.md:block 34 (code)
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 35 (paragraph)
msgid "To utilize AWS [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html) via a session token, you may add a `token` key to your application's SES configuration:"
msgstr "若要通過 Session Token 使用 AWS 的 [Temporary Credential](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html)，請在專案的 SES 設定中加上 `token` 索引鍵："

#: docs/8.x/mail.md:block 36 (code)
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'token' => env('AWS_SESSION_TOKEN'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 37 (paragraph)
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr "若想定義要讓 Laravel 在寄送郵件時要傳給 AWS SDK 之 `SendRawEmail` 方法的[額外的選項](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail)，可在 `ses` 設定中定義一個 `options` 陣列："

#: docs/8.x/mail.md:block 38 (code)
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'Tags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 40 (header)
msgid "Failover Configuration"
msgstr "Failover 設定"

#: docs/8.x/mail.md:block 41 (paragraph)
msgid "Sometimes, an external service you have configured to send your application's mail may be down. In these cases, it can be useful to define one or more backup mail delivery configurations that will be used in case your primary delivery driver is down."
msgstr "有時候，我們設定要用來寄送郵件的外部服務可能沒辦法用。因為這種情況，所以最好定義一個或多個備用的郵件寄送設定，以免主要寄送 Driver 無法使用。"

#: docs/8.x/mail.md:block 42 (paragraph)
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which mail drivers should be chosen for delivery:"
msgstr "若要定義備用 Mailer，請在 `mail` 設定檔中定義一個使用 `failover` Transport的 Mailer。`failover` Mailer的設定值呢列應包含一個 `mailers` 的陣列，並在其中參照用來寄送郵件之各個 Driver 的順序："

#: docs/8.x/mail.md:block 43 (code)
msgid "'mailers' => [\n"
"    'failover' => [\n"
"        'transport' => 'failover',\n"
"        'mailers' => [\n"
"            'postmark',\n"
"            'mailgun',\n"
"            'sendmail',\n"
"        ],\n"
"    ],\n\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 44 (paragraph)
msgid "Once your failover mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr "定義好 Failover Mailer 後，請將 `mail` 設定檔中的 `default` 設定索引鍵設為該 Failover Mailer 的名稱，以將其設為預設 Mailer。"

#: docs/8.x/mail.md:block 45 (code)
msgid "'default' => env('MAIL_MAILER', 'failover'),\n"
msgstr ""

#: docs/8.x/mail.md:block 47 (header)
msgid "Generating Mailables"
msgstr "產生 Mailable"

#: docs/8.x/mail.md:block 48 (paragraph)
msgid "When building Laravel applications, each type of email sent by your application is represented as a \"mailable\" class. These classes are stored in the `app/Mail` directory. Don't worry if you don't see this directory in your application, since it will be generated for you when you create your first mailable class using the `make:mail` Artisan command:"
msgstr "在撰寫 Laravel 專案時，程式所寄出的所有郵件都以「Mailable」類別的形式呈現。這些類別保存在 `app/Mail` 目錄中。若沒看到這個目錄，請別擔心。使用 `make:mail` Artisan 指令初次建立 Mailable 類別時會自動產生該目錄："

#: docs/8.x/mail.md:block 49 (code)
msgid "php artisan make:mail OrderShipped\n"
msgstr "php artisan make:mail OrderShipped\n"

#: docs/8.x/mail.md:block 51 (header)
msgid "Writing Mailables"
msgstr "撰寫 Mailable"

#: docs/8.x/mail.md:block 52 (paragraph)
msgid "Once you have generated a mailable class, open it up so we can explore its contents. First, note that all of a mailable class' configuration is done in the `build` method. Within this method, you may call various methods such as `from`, `subject`, `view`, and `attach` to configure the email's presentation and delivery."
msgstr "產生好 Mailable 類別後，請打開該類別，我們來看看裡面的內容。首先，可以注意到所有的 Mailable 類別都在 `build` 方法內進行設定。在該方法中，可呼叫如 `form`、`view`、`attach` 等方法來設定 E-Mail 的顯示方式與寄送設定。"

#: docs/8.x/mail.md:block 53 (quote)
msgid "{tip} You may type-hint dependencies on the mailable's `build` method. The Laravel [service container](/docs/{{version}}/container) automatically injects these dependencies."
msgstr ""

#: docs/8.x/mail.md:block 55 (header)
msgid "Configuring The Sender"
msgstr "設定寄件人"

#: docs/8.x/mail.md:block 57 (header)
msgid "Using The `from` Method"
msgstr "使用 `from` 方法"

#: docs/8.x/mail.md:block 58 (paragraph)
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may use the `from` method within your mailable class' `build` method:"
msgstr "首先，我們先來看看如何設定寄件人。或者，換句話說，也就是郵件要「^[從](From)」誰那裡寄出。要設定寄件人，有兩種方法。第一種方法，我們可以在 Mailable 類別的 `build` 方法內使用 `from` 方法來設定："

#: docs/8.x/mail.md:block 59 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com', 'Example')\n"
"                ->view('emails.orders.shipped');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 61 (header)
msgid "Using A Global `from` Address"
msgstr "使用全域的 `from` 位址"

#: docs/8.x/mail.md:block 62 (paragraph)
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to call the `from` method in each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr "不過，若你的專案中所有的郵件都使用相同的寄件人位址，在每個產生的 Mailable 類別內都呼叫 `from` 方法會很麻煩。比起在每個 Mailable 內呼叫 `from` 方法，我們可以在 `config/mail.php` 設定檔中指定一個全域的「from」位址。若 Mailable 類別內沒有指定「from」位址，就會使用這個全域的位址："

#: docs/8.x/mail.md:block 63 (code)
msgid "'from' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#: docs/8.x/mail.md:block 64 (paragraph)
msgid "In addition, you may define a global \"reply_to\" address within your `config/mail.php` configuration file:"
msgstr "​此外，也可以在 `config/mail.php` 設定檔中定義一個全域的「reply_to」位址："

#: docs/8.x/mail.md:block 65 (code)
msgid "'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#: docs/8.x/mail.md:block 67 (header)
msgid "Configuring The View"
msgstr "​設定 View"

#: docs/8.x/mail.md:block 68 (paragraph)
msgid "Within a mailable class' `build` method, you may use the `view` method to specify which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr "在 Mailable 類別的 `build` 方法中，可以使用 `view` 方法來指定在轉譯郵件內容時欲使用哪個樣板。由於一般來說大部分郵件都是使用 [Blade 樣板]來轉譯內容的，因此在建立郵件內容時，我們就可以使用 [Blade 樣板引擎](/docs/{{version}}/blade)的完整功能與便利："

#: docs/8.x/mail.md:block 69 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 70 (quote)
msgid "{tip} You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr ""

#: docs/8.x/mail.md:block 72 (header)
msgid "Plain Text Emails"
msgstr "純文字郵件"

#: docs/8.x/mail.md:block 73 (paragraph)
msgid "If you would like to define a plain-text version of your email, you may use the `text` method. Like the `view` method, the `text` method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr "若想為郵件定義純文字版本，可使用 `text` 方法。與 `view` 方法一樣，`text` 方法接受一個用來轉譯郵件內容的樣板名稱。可以同時為郵件定義 HTML 與純文字版本："

#: docs/8.x/mail.md:block 74 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->text('emails.orders.shipped_plain');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 76 (header)
msgid "View Data"
msgstr "View 資料"

#: docs/8.x/mail.md:block 78 (header)
msgid "Via Public Properties"
msgstr "使用公開屬性"

#: docs/8.x/mail.md:block 79 (paragraph)
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class' constructor and set that data to public properties defined on the class:"
msgstr "一般來說，在轉譯 HTML 版本的郵件時，我們會需要將資料傳入 View 來在其中使用。要將資料傳入 View 有兩種方法。第一種方法，即是在 Mailable 類別裡的公用變數，在 View 裡面可以直接使用。因此，舉例來說，我們可以將資料傳入 Mailable 類別的 ^[Constructor](建構函式) 內，然後將資料設為該類別中定義的公用變數："

#: docs/8.x/mail.md:block 80 (code)
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 81 (paragraph)
msgid "Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr "將資料設為公用變數後，在 View 中就自動可以使用該資料。因此在 Blade 樣板中，我們可以像存取其他資料一樣存取這些資料："

#: docs/8.x/mail.md:block 82 (code)
msgid "<div>\n"
"    Price: {{ $order->price }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/mail.md:block 84 (header)
msgid "Via The `with` Method:"
msgstr "通過 `with` 方法："

#: docs/8.x/mail.md:block 85 (paragraph)
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `with` method. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template. Then, when calling the `with` method, pass an array of data that you wish to make available to the template:"
msgstr "若想在資料被傳給樣板前自訂其格式，可使用 `with` 方法來手動傳入資料。一般來說，我們還是會使用 Mailable 類別的 Constroctor 來傳入資料。不過，我們可以將該資料設為 `protected` 或 `private` 屬性，這樣樣板中才不會有這些資料。接著，呼叫 `with` 方法，傳入欲在樣板中使用的資料："

#: docs/8.x/mail.md:block 86 (code)
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->with([\n"
"                        'orderName' => $this->order->name,\n"
"                        'orderPrice' => $this->order->price,\n"
"                    ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 87 (paragraph)
msgid "Once the data has been passed to the `with` method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr "使用 `with` 方法傳入資料後，在 View 中就自動可以使用該資料。因此在 Blade 樣板中，我們可以像存取其他資料一樣存取這些資料："

#: docs/8.x/mail.md:block 88 (code)
msgid "<div>\n"
"    Price: {{ $orderPrice }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/mail.md:block 90 (header)
msgid "Attachments"
msgstr "附加檔案"

#: docs/8.x/mail.md:block 91 (paragraph)
msgid "To add attachments to an email, use the `attach` method within the mailable class' `build` method. The `attach` method accepts the full path to the file as its first argument:"
msgstr "若要將檔案附加至 E-Mail，請使用 Mailable 類別 `build` 方法中的 `attach` 方法。`attach` 方法接受檔案的完整路徑作為其第一個引數："

#: docs/8.x/mail.md:block 92 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 93 (paragraph)
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr "將檔案附加至訊息時，也可傳入一個陣列給 `attach` 方法來指定要顯示的檔案名稱與 / 或 MIME 類型："

#: docs/8.x/mail.md:block 94 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 96 (header)
msgid "Attaching Files From Disk"
msgstr "從 Disk 中附加檔案"

#: docs/8.x/mail.md:block 97 (paragraph)
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `attachFromStorage` method:"
msgstr "若有儲存在[檔案系統 Disk](/docs/{{version}}/filesystem)中的檔案，可使用 `attachFromStorage` 方法來將其附加至郵件中："

#: docs/8.x/mail.md:block 98 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 99 (paragraph)
msgid "If necessary, you may specify the file's attachment name and additional options using the second and third arguments to the `attachFromStorage` method:"
msgstr "若有需要，可使用 `attachFromStorage` 方法的第三與第四個引數來指定檔案名稱與其他額外的選項："

#: docs/8.x/mail.md:block 100 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                   'mime' => 'application/pdf'\n"
"               ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 101 (paragraph)
msgid "The `attachFromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr "若想指定預設以外的 Disk，可使用 `attachFromStorageDisk` 方法："

#: docs/8.x/mail.md:block 102 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorageDisk('s3', '/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 104 (header)
msgid "Raw Data Attachments"
msgstr "原始資料附加檔案"

#: docs/8.x/mail.md:block 105 (paragraph)
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `attachData` method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:"
msgstr "可使用 `attachData` 方法來以位元組原始字串的形式作為附件附加。舉例來說，我們可能會在記憶體內產生 PDF，然後想在不寫入 Disk 的情況下將其附加到郵件上。`attachData` 方法接受原始資料位元組作為其第一個引數，檔案名稱為其第二個引數，然後是一組選項陣列作為其第三個引數："

#: docs/8.x/mail.md:block 106 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 108 (header)
msgid "Inline Attachments"
msgstr "內嵌的附加檔案"

#: docs/8.x/mail.md:block 109 (paragraph)
msgid "Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails. To embed an inline image, use the `embed` method on the `$message` variable within your email template. Laravel automatically makes the `$message` variable available to all of your email templates, so you don't need to worry about passing it in manually:"
msgstr "一般來說，要把圖片內嵌到郵件裡面是很麻煩的。不過，Laravel 提供了一個方便的方法可以將圖片附加到郵件裡。若要內嵌圖片，請使用郵件樣板內 `$message` 變數中的 `embed` 方法。Laravel 會自動為所有的郵件樣板提供這個 `$message` 變數，所以我們不需要手動傳入："

#: docs/8.x/mail.md:block 110 (code)
msgid "<body>\n"
"    Here is an image:\n\n"
"    <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"</body>\n"
msgstr "<body>\n"
"    Here is an image:\n\n"
"    <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"</body>\n"

#: docs/8.x/mail.md:block 111 (quote)
msgid "{note} The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr ""

#: docs/8.x/mail.md:block 113 (header)
msgid "Embedding Raw Data Attachments"
msgstr "內嵌原始資料附件"

#: docs/8.x/mail.md:block 114 (paragraph)
msgid "If you already have a raw image data string you wish to embed into an email template, you may call the `embedData` method on the `$message` variable. When calling the `embedData` method, you will need to provide a filename that should be assigned to the embedded image:"
msgstr "若有欲嵌入到郵件樣板中的原始圖片字串，可呼叫 `$message` 變數上的 `embedData` 方法。呼叫 `embedData` 方法時，請提供一個欲設定給嵌入圖片的檔案名稱："

#: docs/8.x/mail.md:block 115 (code)
msgid "<body>\n"
"    Here is an image from raw data:\n\n"
"    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"</body>\n"
msgstr "<body>\n"
"    Here is an image from raw data:\n\n"
"    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"</body>\n"

#: docs/8.x/mail.md:block 117 (header)
msgid "Customizing The SwiftMailer Message"
msgstr "自訂 SwiftMailer 訊息"

#: docs/8.x/mail.md:block 118 (paragraph)
msgid "The `withSwiftMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the SwiftMailer message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr "`Mailable` 基礎類別的 `withSwiftMessage` 方法可讓我們註冊一個閉包，在傳送訊息前會以 SwiftMailer 實體叫用該閉包。這樣我們就有機會在郵件被送出前深度自訂該訊息："

#: docs/8.x/mail.md:block 119 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n\n"
"    $this->withSwiftMessage(function ($message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n\n"
"    return $this;\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 121 (header)
msgid "Markdown Mailables"
msgstr "Markdown 的 Mailer"

#: docs/8.x/mail.md:block 122 (paragraph)
msgid "Markdown mailable messages allow you to take advantage of the pre-built templates and components of [mail notifications](/docs/{{version}}/notifications#mail-notifications) in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr "Markdown Mailer 訊息可讓我們在 Mailable 內使用內建樣板與 [Mail Notification](/docs/{{version}}/notifications#mail-notifications) 的元件。由於使用 Markdown 來撰寫訊息，因此 Laravel 就可為這些郵件轉譯出漂亮的回應式 HTML 樣板，並自動轉譯出純文字版本的郵件。"

#: docs/8.x/mail.md:block 124 (header)
msgid "Generating Markdown Mailables"
msgstr "產生 Markdown 的 Malable"

#: docs/8.x/mail.md:block 125 (paragraph)
msgid "To generate a mailable with a corresponding Markdown template, you may use the `--markdown` option of the `make:mail` Artisan command:"
msgstr "若要產生有對應 Markdown 樣板的 Mailable，請使用 `make:mail` Artisan 指令的 `--markdown` 選項："

#: docs/8.x/mail.md:block 126 (code)
msgid "php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n"
msgstr "php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n"

#: docs/8.x/mail.md:block 127 (paragraph)
msgid "Then, when configuring the mailable within its `build` method, call the `markdown` method instead of the `view` method. The `markdown` method accepts the name of the Markdown template and an optional array of data to make available to the template:"
msgstr "接著，在 `build` 方法內設定 Mailable 時，不呼叫 `view` 方法，而是改呼叫 `markdown` 方法。`makrdown` 方法接受 Markdown 樣板的名稱，以及一組用來提供給樣板的可選資料陣列："

#: docs/8.x/mail.md:block 128 (code)
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com')\n"
"                ->markdown('emails.orders.shipped', [\n"
"                    'url' => $this->orderUrl,\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 130 (header)
msgid "Writing Markdown Messages"
msgstr "撰寫 Markdown 訊息"

#: docs/8.x/mail.md:block 131 (paragraph)
msgid "Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel's pre-built email UI components:"
msgstr "Markdown 的 Markdown 使用 Blade 元件與 Markdown 格式的組合，讓我們能輕鬆地使用 Laravel 內建的 E-Mail UI 元件來建立訊息："

#: docs/8.x/mail.md:block 132 (code)
msgid "@component('mail::message')\n"
"# Order Shipped\n\n"
"Your order has been shipped!\n\n"
"@component('mail::button', ['url' => $url])\n"
"View Order\n"
"@endcomponent\n\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent\n"
msgstr "@component('mail::message')\n"
"# Order Shipped\n\n"
"Your order has been shipped!\n\n"
"@component('mail::button', ['url' => $url])\n"
"View Order\n"
"@endcomponent\n\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent\n"

#: docs/8.x/mail.md:block 133 (quote)
msgid "{tip} Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr ""

#: docs/8.x/mail.md:block 135 (header)
msgid "Button Component"
msgstr "Button 元件"

#: docs/8.x/mail.md:block 136 (paragraph)
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `success`, and `error`. You may add as many button components to a message as you wish:"
msgstr "Button 元件轉譯一個置中的按鈕連結。這個元件接受兩個引數，一個是 `url` 網址，另一個則是可選的 `color` 顏色。支援的顏色有 `primary`、`success`、`error`。在訊息中可以加上不限數量的 Button 元件："

#: docs/8.x/mail.md:block 137 (code)
msgid "@component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"View Order\n"
"@endcomponent\n"
msgstr "@component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"View Order\n"
"@endcomponent\n"

#: docs/8.x/mail.md:block 139 (header)
msgid "Panel Component"
msgstr "Panel 元件"

#: docs/8.x/mail.md:block 140 (paragraph)
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:"
msgstr "Panel 元件將給定的文字區塊轉譯在一個面板中，面板的底色與訊息中其他部分的背景色稍有不同。我們可以使用 Panel 元件來讓給定區塊的文字較為醒目："

#: docs/8.x/mail.md:block 141 (code)
msgid "@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent\n"
msgstr "@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent\n"

#: docs/8.x/mail.md:block 143 (header)
msgid "Table Component"
msgstr "Table 元件"

#: docs/8.x/mail.md:block 144 (paragraph)
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr "Table 元件可讓我們將 Markdown 表格轉為 HTML 表格。該元件接受一個 Markdown 表格作為其內容。支援使用預設的 Markdown 表格對其格式來對其表格欄位："

#: docs/8.x/mail.md:block 145 (code)
msgid "@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent\n"
msgstr "@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent\n"

#: docs/8.x/mail.md:block 147 (header)
msgid "Customizing The Components"
msgstr "自訂元件"

#: docs/8.x/mail.md:block 148 (paragraph)
msgid "You may export all of the Markdown mail components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr "可以將所有的 Markdown 郵件元件匯出到專案內來自訂這些元件。若要匯出元件，請使用 `vendor:publish` Artisan  指令來^[安裝](Publish) `laravel-mail` 素材標籤："

#: docs/8.x/mail.md:block 149 (code)
msgid "php artisan vendor:publish --tag=laravel-mail\n"
msgstr "php artisan vendor:publish --tag=laravel-mail\n"

#: docs/8.x/mail.md:block 150 (paragraph)
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr "這個指令會將 Markdown 郵件元件安裝到 `resources/views/vendor/mail` 目錄下。`mail` 目錄會包含 `html` 與 `text` 目錄，這些目錄中包含了所有可用元件對應的呈現方式。可以隨意自訂這些元件。"

#: docs/8.x/mail.md:block 152 (header)
msgid "Customizing The CSS"
msgstr "自訂 CSS"

#: docs/8.x/mail.md:block 153 (paragraph)
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be converted to inline CSS styles within the HTML representations of your Markdown mail messages."
msgstr "匯出元件後，`resources/views/vendor/mail/html/themes` 目錄下會包含一個 `default.css` 檔案。可以自訂這個檔案內的 CSS。這些樣式在 Markdown 郵件訊息的 HTML 呈現上會自動被轉換為內嵌的 CSS 樣式："

#: docs/8.x/mail.md:block 154 (paragraph)
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of your application's `config/mail.php` configuration file to match the name of your new theme."
msgstr "若想為 Laravel Markdown 元件製作一個全新的主題，可在 `html/themes` 目錄下放置一個 CSS 檔。命名好 CSS 檔並保存後，請修改專案 `config/mail.php` 設定檔中的 `theme` 選項為該新主題的名稱： "

#: docs/8.x/mail.md:block 155 (paragraph)
msgid "To customize the theme for an individual mailable, you may set the `$theme` property of the mailable class to the name of the theme that should be used when sending that mailable."
msgstr "若要為個別 Mailable 自訂主題，可在 Mailable 類別上將 `$theme` 屬性設為傳送該 Mailable 時要使用的主題名稱："

#: docs/8.x/mail.md:block 157 (header)
msgid "Sending Mail"
msgstr "傳送郵件"

#: docs/8.x/mail.md:block 158 (paragraph)
msgid "To send a message, use the `to` method on the `Mail` [facade](/docs/{{version}}/facades). The `to` method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their `email` and `name` properties when determining the email's recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the `send` method:"
msgstr "若要傳送郵件，請使用 `Mail` Facade` 上的 `to` 方法。可傳入電子郵件位址、使用者實體、或是一組包含使用者的 Collection 給 `to` 方法。若傳入物件或一組包含物件的 Collection，則 Mailer 在判斷收件人時會自動使用這些物件的 `email` 與 `name` 屬性來判斷。因此，請確認這些物件上是否有這兩個屬性。指定好收件人後，就可傳入 Mailable 類別的實體給 `send` 方法："

#: docs/8.x/mail.md:block 159 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n\n"
"        // Ship the order...\n\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 160 (paragraph)
msgid "You are not limited to just specifying the \"to\" recipients when sending a message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by chaining their respective methods together:"
msgstr "傳送訊息時，除了「to」方法能用來指定收件人外，還可以指定「^[CC](副本)」與「^[BCC](密件副本)」收件人。可將「to」、「cc」、「bcc」等方法串聯使用，以指定這些方法對應的收件人："

#: docs/8.x/mail.md:block 161 (code)
msgid "Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->send(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 163 (header)
msgid "Looping Over Recipients"
msgstr "在收件人中迴圈"

#: docs/8.x/mail.md:block 164 (paragraph)
msgid "Occasionally, you may need to send a mailable to a list of recipients by iterating over an array of recipients / email addresses. However, since the `to` method appends email addresses to the mailable's list of recipients, each iteration through the loop will send another email to every previous recipient. Therefore, you should always re-create the mailable instance for each recipient:"
msgstr "有時候，我們會需要迭代一組收件人或 E-Mail 位址的陣列來將 Mailable 傳送給多個收件人。不過，因為 `to` 方法會將 E-Mail 位址加到 Mailable 的收件人列表上，因此每次循環都會將該郵件再傳送給之前的收件人一次。所以，每個收件人都需要重新建立一個新的 Mailable 實體："

#: docs/8.x/mail.md:block 165 (code)
msgid "foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"    Mail::to($recipient)->send(new OrderShipped($order));\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 167 (header)
msgid "Sending Mail Via A Specific Mailer"
msgstr "使用指定的 Mailer 來傳送郵件"

#: docs/8.x/mail.md:block 168 (paragraph)
msgid "By default, Laravel will send email using the mailer configured as the `default` mailer in your application's `mail` configuration file. However, you may use the `mailer` method to send a message using a specific mailer configuration:"
msgstr "預設情況下，Laravel 會使用專案 `mail` 設定中設為 `default` 的 Mailaer 來寄送郵件。不過，也可以使用 `mailer` 方法來特定的 Mailer 設定傳送訊息："

#: docs/8.x/mail.md:block 169 (code)
msgid "Mail::mailer('postmark')\n"
"        ->to($request->user())\n"
"        ->send(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 171 (header)
msgid "Queueing Mail"
msgstr "將郵件放入佇列"

#: docs/8.x/mail.md:block 173 (header)
msgid "Queueing A Mail Message"
msgstr "將郵件訊息放入佇列"

#: docs/8.x/mail.md:block 174 (paragraph)
msgid "Since sending email messages can negatively impact the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in [unified queue API](/docs/{{version}}/queues). To queue a mail message, use the `queue` method on the `Mail` facade after specifying the message's recipients:"
msgstr "由於傳送郵件訊息可能對程式的 Response 時間造成負面影響，因此許多開發人員都選擇將郵件訊息放入陣列來在背景執行。在 Laravel 中，使用內建的[統一佇列 API](/docs/{{version}}/queues)，就能輕鬆地將郵件放入佇列。若要將郵件訊息放入佇列，請在指定好收件人後使用 `Mail` Facade 的 `queue` 方法："

#: docs/8.x/mail.md:block 175 (code)
msgid "Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 176 (paragraph)
msgid "This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to [configure your queues](/docs/{{version}}/queues) before using this feature."
msgstr "這個方法會自動將任務推入佇列，這樣訊息就會在背景傳送。在使用這個功能前，會需要先[設定佇列](/docs/{{version}}/queues)。"

#: docs/8.x/mail.md:block 178 (header)
msgid "Delayed Message Queueing"
msgstr "延遲訊息佇列"

#: docs/8.x/mail.md:block 179 (paragraph)
msgid "If you wish to delay the delivery of a queued email message, you may use the `later` method. As its first argument, the `later` method accepts a `DateTime` instance indicating when the message should be sent:"
msgstr "若想延遲傳送某個佇列訊息，可使用 `later` 方法。`later` 方法的第一個引數是 `DateTime` 實體，用來表示該訊息何時寄出："

#: docs/8.x/mail.md:block 180 (code)
msgid "Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->later(now()->addMinutes(10), new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 182 (header)
msgid "Pushing To Specific Queues"
msgstr "推入指定的佇列"

#: docs/8.x/mail.md:block 183 (paragraph)
msgid "Since all mailable classes generated using the `make:mail` command make use of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and `onConnection` methods on any mailable class instance, allowing you to specify the connection and queue name for the message:"
msgstr "由於所有使用 `make:mail` 指令產生的 Mailable 類別都使用 `Illiminate\\Bus\\Queuable` Trait，因此我們可以在任何一個 Mailable 類別實體上呼叫 `onQueue` 與 `onConnection` 方法，可讓我們指定該訊息要使用的佇列名稱："

#: docs/8.x/mail.md:block 184 (code)
msgid "$message = (new OrderShipped($order))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('emails');\n\n"
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue($message);\n"
msgstr ""

#: docs/8.x/mail.md:block 186 (header)
msgid "Queueing By Default"
msgstr "預設佇列"

#: docs/8.x/mail.md:block 187 (paragraph)
msgid "If you have mailable classes that you want to always be queued, you may implement the `ShouldQueue` contract on the class. Now, even if you call the `send` method when mailing, the mailable will still be queued since it implements the contract:"
msgstr "若有想要永遠放入佇列的 Mailable 類別，可在該類別上實作 `ShouldQueue` Contract。接著，即使使用 `send` 方法來寄送郵件，由於該 Mailable 有實作 `ShouldQueue` Contract，因此還是會被放入佇列："

#: docs/8.x/mail.md:block 188 (code)
msgid "use Illuminate\\Contracts\\Queue\\ShouldQueue;\n\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 190 (header)
msgid "Queued Mailables & Database Transactions"
msgstr "佇列的 Mailable 與資料庫 Transaction"

#: docs/8.x/mail.md:block 191 (paragraph)
msgid "When queued mailables are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your mailable depends on these models, unexpected errors can occur when the job that sends the queued mailable is processed."
msgstr "當佇列 Mailable 是在資料庫 Transaction 內^[分派](Dispatch)的時候，這個 Mailable 可能會在資料庫 Transaction 被 Commit 前就被佇列進行處理了。發生這種情況時，在資料庫 Transaction 期間對 Model 或資料庫記錄所做出的更新可能都還未反應到資料庫內。另外，所有在 Transaction 期間新增的 Model 或資料庫記錄也可能還未出現在資料庫內。若 Mailable 有使用這些 Model 的話，在處理該佇列 Mailable 的任務時可能會出現未預期的錯誤。"

#: docs/8.x/mail.md:block 192 (paragraph)
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued mailable should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the mail message:"
msgstr "若佇列的 `after_commit` 選項設為 `false`，則我們還是可以通過在寄送郵件訊息前呼叫 `afterCommit` 方法來表示出該 Mailable 應在所有資料庫 Transaction 都被 Commit 後才分派："

#: docs/8.x/mail.md:block 193 (code)
msgid "Mail::to($request->user())->send(\n"
"    (new OrderShipped($order))->afterCommit()\n"
");\n"
msgstr ""

#: docs/8.x/mail.md:block 194 (paragraph)
msgid "Alternatively, you may call the `afterCommit` method from your mailable's constructor:"
msgstr "或者，也可以在 Mailable 的 Constructor 上呼叫 `afterCommit` 方法："

#: docs/8.x/mail.md:block 195 (code)
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 196 (quote)
msgid "{tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/8.x/mail.md:block 198 (header)
msgid "Rendering Mailables"
msgstr "轉譯 Mailable"

#: docs/8.x/mail.md:block 199 (paragraph)
msgid "Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the `render` method of the mailable. This method will return the evaluated HTML content of the mailable as a string:"
msgstr "有時候我們會想在不寄送 Mailable 的情況下截取其 HTML 內容。若要截取其內容，可呼叫 Mailable 的 `render` 方法。該方法會以字串回傳該 Mailable 的 HTML 取值內容："

#: docs/8.x/mail.md:block 200 (code)
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\Invoice;\n\n"
"$invoice = Invoice::find(1);\n\n"
"return (new InvoicePaid($invoice))->render();\n"
msgstr ""

#: docs/8.x/mail.md:block 202 (header)
msgid "Previewing Mailables In The Browser"
msgstr "在瀏覽器內預覽 Mailable"

#: docs/8.x/mail.md:block 203 (paragraph)
msgid "When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr "在設計 Mailable 樣板時，若能像普通的 Blade 樣板一樣在瀏覽器中預覽轉譯後的 Mailable 該有多方便。因為這樣，在 Laravel 中，可以直接在 Route 閉包或 Controller 中回傳任何的 Mailable。若回傳 Mailable，則會轉譯該 Mailable 並顯示在瀏覽器上，讓我們不需將其寄到真實的電子郵件上也能快速檢視其設計："

#: docs/8.x/mail.md:block 204 (code)
msgid "Route::get('/mailable', function () {\n"
"    $invoice = App\\Models\\Invoice::find(1);\n\n"
"    return new App\\Mail\\InvoicePaid($invoice);\n"
"});\n"
msgstr ""

#: docs/8.x/mail.md:block 205 (quote)
msgid "{note} [Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [MailHog](https://github.com/mailhog/MailHog) or [HELO](https://usehelo.com)."
msgstr ""

#: docs/8.x/mail.md:block 207 (header)
msgid "Localizing Mailables"
msgstr "本土化 Mailable"

#: docs/8.x/mail.md:block 208 (paragraph)
msgid "Laravel allows you to send mailables in a locale other than the request's current locale, and will even remember this locale if the mail is queued."
msgstr "在 Laravel 中，可以使用與 Request 中不同的語系設定來傳送郵件，且在郵件被放入佇列後依然會使用所設定的語系。"

#: docs/8.x/mail.md:block 209 (paragraph)
msgid "To accomplish this, the `Mail` facade offers a `locale` method to set the desired language. The application will change into this locale when the mailable's template is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr "若要設定語系，請使用 `Mail` Facade 提供的 `locale` 方法來設定要使用的語言。在轉譯 Mailable 樣板時，程式會先進入這個語系中，轉譯完畢後再回到之前的語系："

#: docs/8.x/mail.md:block 210 (code)
msgid "Mail::to($request->user())->locale('es')->send(\n"
"    new OrderShipped($order)\n"
");\n"
msgstr ""

#: docs/8.x/mail.md:block 212 (header)
msgid "User Preferred Locales"
msgstr "使用者偏好的語系"

#: docs/8.x/mail.md:block 213 (paragraph)
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:"
msgstr "有時候，我們的程式會儲存每個使用者偏好的語言。只要在一個或多個 Model 上實作 `HasLocalePreference` Contract，就可以讓 Laravel 在寄送郵件時使用這些儲存的語系："

#: docs/8.x/mail.md:block 214 (code)
msgid "use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 215 (paragraph)
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr "實作好該介面後，向該 Model 寄送 Mailable 或通知時，Laravel 會自動使用偏好的語系。因此，使用該介面時不需呼叫 `locale` 方法："

#: docs/8.x/mail.md:block 216 (code)
msgid "Mail::to($request->user())->send(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 218 (header)
msgid "Testing Mailables"
msgstr "測試 Mailable"

#: docs/8.x/mail.md:block 219 (paragraph)
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr "Laravel 提供了多種可測試 Mailable 是否包含於其內容的方便方法。這些方法是：`assertSeeInHtml`、`assertDontSeeInHtml`、`assertSeeInText`、`assertDontSeeInText`。"

#: docs/8.x/mail.md:block 220 (paragraph)
msgid "As you might expect, the \"HTML\" assertions assert that the HTML version of your mailable contains a given string, while the \"text\" assertions assert that the plain-text version of your mailable contains a given string:"
msgstr "就和預期的一樣，有「HTML」的^ [Assertion](判斷提示) 判斷 HTML 版本的 Mailable 是否包含給定字串，而「Text」版本的 Assertion 則判斷純文字版本的 Mailable 是否包含給定字串："

#: docs/8.x/mail.md:block 221 (code)
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n\n"
"    $mailable = new InvoicePaid($user);\n\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInText('Invoice Paid');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 223 (header)
msgid "Testing Mailable Sending"
msgstr "測試 Mailable 的寄送"

#: docs/8.x/mail.md:block 224 (paragraph)
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test that mailables were sent, check out our documentation on the [Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr "在測試郵件是否有寄給特定使用者時，我們建議與 Mailable 的內容分開測試。若要瞭解如何測試郵件是否有寄出，請參考有關 [Mail 模擬](/docs/{{version}}/mocking#mail-fake)的說明文件。"

#: docs/8.x/mail.md:block 226 (header)
msgid "Mail & Local Development"
msgstr "郵件與本機開發"

#: docs/8.x/mail.md:block 227 (paragraph)
msgid "When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to \"disable\" the actual sending of emails during local development."
msgstr "在開發有寄送郵件的程式時，我們通常都不會想實際將郵件寄到真實的 E-Mail 位址上。Laravel 提供了數種數種方法來在本機上開發時「禁用」郵件的實際傳送。"

#: docs/8.x/mail.md:block 229 (header)
msgid "Log Driver"
msgstr "Log Driver"

#: docs/8.x/mail.md:block 230 (paragraph)
msgid "Instead of sending your emails, the `log` mail driver will write all email messages to your log files for inspection. Typically, this driver would only be used during local development. For more information on configuring your application per environment, check out the [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr "`log` 郵件 Driver 不會實際寄送電子郵件，而是將所有電子郵件訊息寫入日誌檔以供檢查。一般來說，Log Driver 只會在開發環境上使用。有關一找不同環境設定專案的方法，請參考[組態設定的說明文件](/docs/{{version}}/configuration#environment-configuration)。"

#: docs/8.x/mail.md:block 232 (header)
msgid "HELO / Mailtrap / MailHog"
msgstr "HELO / Mailtrap / MailHog"

#: docs/8.x/mail.md:block 233 (paragraph)
msgid "Alternatively, you may use a service like [HELO](https://usehelo.com) or [Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email messages to a \"dummy\" mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap's message viewer."
msgstr "或者，也可以使用如 [HELO](https://usehelo.com) 或 [Mailtrap](https://mailtrap.io) 這類服務搭配 `smtp` Driver 來將電子郵件寄送到一個「模擬的」收件夾，並像在真的郵件用戶端一樣檢視這些郵件。這種做法的好處就是可以在 Mailtrap 的訊息檢視工具中實際檢視寄出的郵件。"

#: docs/8.x/mail.md:block 234 (paragraph)
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail is running, you may access the MailHog interface at: `http://localhost:8025`."
msgstr "若使用 [Laravel Sail](/docs/{{version}}/sail),，則可使用 [MailHog](https://github.com/mailhog/MailHog) 來預覽訊息。當 Sail 有在執行時，可在 `http://localhost:8025` 上存取 MailHog 的界面。"

#: docs/8.x/mail.md:block 236 (header)
msgid "Using A Global `to` Address"
msgstr "使用全域的 `to` 位址"

#: docs/8.x/mail.md:block 237 (paragraph)
msgid "Finally, you may specify a global \"to\" address by invoking the `alwaysTo` method offered by the `Mail` facade. Typically, this method should be called from the `boot` method of one of your application's service providers:"
msgstr "最後一種方法，就是我們可以叫用 `Mail` Facade 提供的 `alwaysTo` 方法指定一個全域的「to」位址。一般來說，應在專案的其中一個 Service Provider 內 `boot` 方法中呼叫這個方法："

#: docs/8.x/mail.md:block 238 (code)
msgid "use Illuminate\\Support\\Facades\\Mail;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 240 (header)
msgid "Events"
msgstr "事件"

#: docs/8.x/mail.md:block 241 (paragraph)
msgid "Laravel fires two events during the process of sending mail messages. The `MessageSending` event is fired prior to a message being sent, while the `MessageSent` event is fired after a message has been sent. Remember, these events are fired when the mail is being *sent*, not when it is queued. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr "在處理郵件訊息寄送時，Laravel 會觸發兩個事件。`MessageSending` 事件會在寄出郵件前觸發，而`MessageSent` 事件則會在訊息寄出後觸發。請記得，這些事件都是在 *寄送* 郵件的時候出發的，而不是在放入佇列時觸發。可以在 `App\\Providers\\EventServiceProvider` Service Provider 上為這些 Event 註冊 Listener："

#: docs/8.x/mail.md:block 242 (code)
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"        'App\\Listeners\\LogSendingMessage',\n"
"    ],\n"
"    'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"        'App\\Listeners\\LogSentMessage',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Custom Transports](#custom-transports)"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Additional Symfony Transports](#additional-symfony-transports)"
msgstr ""

#: docs/9.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr "傳送郵件不會很複雜。Laravel 提供簡潔的 API，並由熱門的 [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html/) 驅動。Laravel 與 Symfony Mailer 提供使用 SMTP、Mailgun、Postmark、Amazon SES、`sendmail` 等方式寄信的 Driver，可讓我們使用偏好的本機或雲端服務來快速開始傳送郵件。"

#: docs/9.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr "如 Mailgun 或 Postmark 等基於 API 的 Driver 與使用 SMTP 伺服器寄送郵件比起來通常會比較簡單快速。若可能的話，我們推薦儘量使用這類 Driver。"

#: docs/9.x/mail.md:block 15 (paragraph)
msgid "To use the Mailgun driver, install Symfony's Mailgun Mailer transport via Composer:"
msgstr "若要使用 Mailgun Driver，請使用 Composer 安裝 Symfony 的 Mailgun Mailer Transport："

#: docs/9.x/mail.md:block 16 (code)
msgid "composer require symfony/mailgun-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/mail.md:block 17 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請在 `config/mail.php` 設定檔中將 `default` 選項設為 `mailgun`。設定好預設 Mailer 後，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: docs/9.x/mail.md:block 23 (paragraph)
msgid "To use the Postmark driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr "若要使用 Postmark Driver，請使用 Composer 安裝 Symfony 的 Postmark Mailer Transport："

#: docs/9.x/mail.md:block 24 (code)
msgid "composer require symfony/postmark-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/mail.md:block 25 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請在 `config/mail.php` 設定檔中將 `default` 選項設為 `postmark`。設定好預設 Mailer 後，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: docs/9.x/mail.md:block 38 (paragraph)
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail) that Laravel should pass to the AWS SDK's `SendEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr "若想定義要讓 Laravel 在寄送郵件時要傳給 AWS SDK 之 `SendEmail` 方法的[額外的選項](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail)，可在 `ses` 設定中定義一個 `options` 陣列："

#: docs/9.x/mail.md:block 39 (code)
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'EmailTags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 118 (header)
msgid "Customizing The Symfony Message"
msgstr "自訂 Symfony Message"

#: docs/9.x/mail.md:block 119 (paragraph)
msgid "The `withSymfonyMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr "`Mailable` 基礎類別的 `withSymfonyMessage` 方法可讓我們註冊一個閉包，在傳送訊息前會以 Symfony Message 實體叫用該閉包。這樣我們就有機會在郵件被送出前深度自訂該訊息："

#: docs/9.x/mail.md:block 120 (code)
msgid "use Symfony\\Component\\Mime\\Email;\n\n"
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n\n"
"    $this->withSymfonyMessage(function (Email $message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n\n"
"    return $this;\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 220 (paragraph)
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInOrderInHtml`, `assertSeeInText`, `assertDontSeeInText`, and `assertSeeInOrderInText`."
msgstr "Laravel 提供了多種可測試 Mailable 是否包含於其內容的方便方法。這些方法是：`assertSeeInHtml`、`assertDontSeeInHtml`、`assertSeeInOrderInHtml`、`assertSeeInText`、`assertDontSeeInText`、`assertSeeInOrderInText`"

#: docs/9.x/mail.md:block 222 (code)
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n\n"
"    $mailable = new InvoicePaid($user);\n\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 245 (header)
msgid "Custom Transports"
msgstr "自訂 Transport"

#: docs/9.x/mail.md:block 246 (paragraph)
msgid "Laravel includes a variety of mail transports; however, you may wish to write your own transports to deliver email via other services that Laravel does not support out of the box. To get started, define a class that extends the `Symfony\\Component\\Mailer\\Transport\\AbstractTransport` class. Then, implement the `doSend` and `__toString()` methods on your transport:"
msgstr "Laravel 中包含了許多的 Mail Transport。不過，有時候我們可能會需要撰寫自己的 Transport 來使用 Laravel 預設未支援的其他服務來寄送郵件。要開始撰寫 Transport，請先定義一個繼承了`Symfony\\Component\\Mailer\\Transport\\AbstractTransport` 的類別。接著，請在該 Transport 上實作 `doSend` 與 `__toString()` 方法："

#: docs/9.x/mail.md:block 247 (code)
msgid "use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * The Mailchimp API client.\n"
"     *\n"
"     * @var \\MailchimpTransactional\\ApiClient\n"
"     */\n"
"    protected $client;\n\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     *\n"
"     * @param  \\MailchimpTransactional\\ApiClient  $client\n"
"     * @return void\n"
"     */\n"
"    public function __construct(ApiClient $client)\n"
"    {\n"
"        $this->client = $client\n"
"    }\n\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function ($email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 248 (paragraph)
msgid "Once you've defined your custom transport, you may register it via the `extend` method provided by the `Mail` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider` service provider. A `$config` argument will be passed to the closure provided to the `extend` method. This argument will contain the configuration array defined for the mailer in the application's `config/mail.php` configuration file:"
msgstr "定義好自訂 Transport 後，就可以使用 `Mail` Facade 的 `extend` 方法來註冊這個 Transport。一般來說，應在 `AppServiceProvider` Service Provider 中 `boot` 方法內註冊這個 Transport。傳給 `extend` 方法的閉包會收到一個 `$config` 引數。這個引數中會包含在專案 `config/mail.php` 內定義給該方法的設定陣列："

#: docs/9.x/mail.md:block 249 (code)
msgid "use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(...);\n"
"    })\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 250 (paragraph)
msgid "Once your custom transport has been defined and registered, you may create a mailer definition within your application's `config/mail.php` configuration file that utilizes the new transport:"
msgstr "定義並註冊好自訂 Transport 後，就可以在專案 `config/mail.php` 設定檔內建立一個使用這個新 Transport 的 Mailer 定義："

#: docs/9.x/mail.md:block 251 (code)
msgid "'mailchimp' => [\n"
"    'transport' => 'mailchimp',\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 253 (header)
msgid "Additional Symfony Transports"
msgstr "額外的 Symfony Transport"

#: docs/9.x/mail.md:block 254 (paragraph)
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Sendinblue\" Symfony mailer:"
msgstr "Laravel 支援一些像是 Mailgun 與 Postmark 等現有 Symfony 維護的 Mail Transport。不過，有時候我們可能會需要讓 Laravel 也支援其他由 Symfony 維護的 Transport。若要讓 Laravel 支援這些 Transport，只要使用 Composer 安裝這些 Symfony Mailer，然後再向 Laravel 註冊這個 Transport。舉例來說，我們可以安裝並註冊「Sendinblue」Symfony Mailer："

#: docs/9.x/mail.md:block 255 (code)
msgid "composer require symfony/sendinblue-mailer\n"
msgstr "composer require symfony/sendinblue-mailer\n"

#: docs/9.x/mail.md:block 256 (paragraph)
msgid "Once the Sendinblue mailer package has been installed, you may add an entry for your Sendinblue API credentials to your application's `services` configuration file:"
msgstr "安裝好 Sendinblue Mailer 套件後，就可以在專案的 `services` 設定檔中加上 Sendinblue 的 API 認證："

#: docs/9.x/mail.md:block 257 (code)
msgid "'sendinblue' => [\n"
"    'key' => 'your-api-key',\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 258 (paragraph)
msgid "Finally, you may use the `Mail` facade's `extend` method to register the transport with Laravel. Typically, this should be done within the `boot` method of a service provider:"
msgstr "最後，使用 `Mail` Facade 的 `extend` 方法來向 Laravel 註冊這個 Transport。一般來說，應在某個 Service Provider 內註冊一個 `boot` 方法："

#: docs/9.x/mail.md:block 259 (code)
msgid "use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Sendinblue\\Transport\\SendinblueTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('sendinblue', function () {\n"
"        return (new SendinblueTransportFactory)->create(\n"
"            new Dsn(\n"
"                'sendinblue+api',\n"
"                'default',\n"
"                config('services.sendinblue.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}\n"
msgstr ""

#: docs/master/mail.md:block 16 (code)
msgid "composer require symfony/mailgun-mailer\n"
msgstr "composer require symfony/mailgun-mailer\n"

#: docs/master/mail.md:block 24 (code)
msgid "composer require symfony/postmark-mailer\n"
msgstr "composer require symfony/postmark-mailer\n"

