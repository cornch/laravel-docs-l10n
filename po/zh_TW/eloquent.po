msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-30 07:57\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/eloquent.pot\n"
"X-Crowdin-File-ID: 61\n"

# File: docs/8.x/eloquent.md, line: 1
# File: docs/master/eloquent.md, line: 1
#. type: Title #
#, no-wrap
msgid "Eloquent: Getting Started"
msgstr "Eloquent：入門"

# File: docs/8.x/eloquent.md, line: 38
# File: docs/master/eloquent.md, line: 38
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# File: docs/8.x/eloquent.md, line: 38
# File: docs/master/eloquent.md, line: 38
#. type: Bullet: '- '
msgid "[Generating Model Classes](#generating-model-classes)"
msgstr "[產生 Model 類別](#generating-model-classes)"

# File: docs/8.x/eloquent.md, line: 38
#. type: Plain text
#, no-wrap
msgid "- [Eloquent Model Conventions](#eloquent-model-conventions)\n"
"    - [Table Names](#table-names)\n"
"    - [Primary Keys](#primary-keys)\n"
"    - [Timestamps](#timestamps)\n"
"    - [Database Connections](#database-connections)\n"
"    - [Default Attribute Values](#default-attribute-values)\n"
"- [Retrieving Models](#retrieving-models)\n"
"    - [Collections](#collections)\n"
"    - [Chunking Results](#chunking-results)\n"
"    - [Streaming Results Lazily](#streaming-results-lazily)\n"
"    - [Cursors](#cursors)\n"
"    - [Advanced Subqueries](#advanced-subqueries)\n"
"- [Retrieving Single Models / Aggregates](#retrieving-single-models)\n"
"    - [Retrieving Or Creating Models](#retrieving-or-creating-models)\n"
"    - [Retrieving Aggregates](#retrieving-aggregates)\n"
"- [Inserting & Updating Models](#inserting-and-updating-models)\n"
"    - [Inserts](#inserts)\n"
"    - [Updates](#updates)\n"
"    - [Mass Assignment](#mass-assignment)\n"
"    - [Upserts](#upserts)\n"
"- [Deleting Models](#deleting-models)\n"
"    - [Soft Deleting](#soft-deleting)\n"
"    - [Querying Soft Deleted Models](#querying-soft-deleted-models)\n"
"- [Pruning Models](#pruning-models)\n"
"- [Replicating Models](#replicating-models)\n"
"- [Query Scopes](#query-scopes)\n"
"    - [Global Scopes](#global-scopes)\n"
"    - [Local Scopes](#local-scopes)\n"
"- [Comparing Models](#comparing-models)\n"
"- [Events](#events)\n"
"    - [Using Closures](#events-using-closures)\n"
"    - [Observers](#observers)\n"
"    - [Muting Events](#muting-events)\n"
msgstr "- [Eloquent Model 慣例](#eloquent-model-conventions)\n"
"    - [資料表名稱](#table-names)\n"
"    - [主索引鍵 - Primary Key](#primary-keys)\n"
"    - [時戳 - Timestamps](#timestamps)\n"
"    - [資料庫連線](#database-connections)\n"
"    - [預設屬性值](#default-attribute-values)\n"
"- [取得 Model](#retrieving-models)\n"
"    - [Collection](#collections)\n"
"    - [將查詢結果分段](#chunking-results)\n"
"    - [延遲的查詢結果資料流](#streaming-results-lazily)\n"
"    - [指標 - Cursor](#cursors)\n"
"    - [進階子查詢](#advanced-subqueries)\n"
"- [取得單一 Model 或進行彙總](#retrieving-single-models)\n"
"    - [取得或建立 Model](#retrieving-or-creating-models)\n"
"    - [取得匯總值](#retrieving-aggregates)\n"
"- [插入或更新 Model](#inserting-and-updating-models)\n"
"    - [插入](#inserts)\n"
"    - [更新](#updates)\n"
"    - [大量賦值](#mass-assignment)\n"
"    - [更新插入 (Upsert)](#upserts)\n"
"- [刪除 Model](#deleting-models)\n"
"    - [軟刪除](#soft-deleting)\n"
"    - [查詢軟刪除的 Model](#querying-soft-deleted-models)\n"
"- [剪除 (Prune) Model](#pruning-models)\n"
"- [複製 (Replicate) Model](#replicating-models)\n"
"- [查詢 Scope](#query-scopes)\n"
"    - [全域 Scope](#global-scopes)\n"
"    - [本域 Scope](#local-scopes)\n"
"- [比較 Model](#comparing-models)\n"
"- [事件](#events)\n"
"    - [使用閉包](#events-using-closures)\n"
"    - [觀察程式 - Observer](#observers)\n"
"    - [靜音事件](#muting-events)\n"

# File: docs/8.x/eloquent.md, line: 40
# File: docs/master/eloquent.md, line: 40
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/eloquent.md, line: 40
# File: docs/master/eloquent.md, line: 40
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/eloquent.md, line: 43
# File: docs/master/eloquent.md, line: 43
#. type: Plain text
msgid "Laravel includes Eloquent, an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using Eloquent, each database table has a corresponding \"Model\" that is used to interact with that table. In addition to retrieving records from the database table, Eloquent models allow you to insert, update, and delete records from the table as well."
msgstr "Laravel 中包含了 Eloquent。Eloquent 是一個物件關聯對映 (ORM, Object-Relational Mapper)，能讓開發人員以更愉快的方式與資料庫互動。在使用 Eloquent 時，每個資料表都會有一個對應的「Model」，我們可以使用這個 Model 來與中聯辦互動。除了從資料表中取得資料外，通過 Eloquent Model，我們還能進行插入、更新、與刪除的動作。"

# File: docs/8.x/eloquent.md, line: 45
# File: docs/master/eloquent.md, line: 45
#. type: Plain text
#, no-wrap
msgid "> {tip} Before getting started, be sure to configure a database connection in your application's `config/database.php` configuration file. For more information on configuring your database, check out [the database configuration documentation](/docs/{{version}}/database#configuration).\n"
msgstr "> {tip} 在開始之前，請先確定是否有在 `config/database.php` 組態設定檔中設定好資料庫連線。更多有關設定資料庫則資訊，請參考[資料庫組態設定說明文件](/docs/{{version}}/database#configuration)。\n"

# File: docs/8.x/eloquent.md, line: 47
# File: docs/master/eloquent.md, line: 47
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-model-classes\"></a>\n"
msgstr "<a name=\"generating-model-classes\"></a>\n"

# File: docs/8.x/eloquent.md, line: 47
# File: docs/master/eloquent.md, line: 47
#. type: Title ##
#, no-wrap
msgid "Generating Model Classes"
msgstr "產生 Model 類別"

# File: docs/8.x/eloquent.md, line: 50
# File: docs/master/eloquent.md, line: 50
#. type: Plain text
msgid "To get started, let's create an Eloquent model. Models typically live in the `app\\Models` directory and extend the `Illuminate\\Database\\Eloquent\\Model` class. You may use the `make:model` [Artisan command](/docs/{{version}}/artisan) to generate a new model:"
msgstr "我們先來建立 Eloquent Model。一般來說，Model 都放在 `app\\Models` 目錄內，並繼承 `Illuminate\\Database\\Eloquent\\Model` 類別。我們可以使用 `make:model` [Artisan 指令](/docs/{{version}}/artisan)來產生新 Model："

# File: docs/8.x/eloquent.md, line: 52
# File: docs/master/eloquent.md, line: 52
#. type: Plain text
#, no-wrap
msgid "    php artisan make:model Flight\n"
msgstr "    php artisan make:model Flight\n"

# File: docs/8.x/eloquent.md, line: 54
# File: docs/master/eloquent.md, line: 54
#. type: Plain text
msgid "If you would like to generate a [database migration](/docs/{{version}}/migrations) when you generate the model, you may use the `--migration` or `-m` option:"
msgstr "若想在產生 Model 時一併產生[資料庫 Migration](/docs/{{version}}/migrations)，可使用 `--migration` 或 `-m` 選項："

# File: docs/8.x/eloquent.md, line: 56
# File: docs/master/eloquent.md, line: 56
#. type: Plain text
#, no-wrap
msgid "    php artisan make:model Flight --migration\n"
msgstr "    php artisan make:model Flight --migration\n"

# File: docs/8.x/eloquent.md, line: 58
# File: docs/master/eloquent.md, line: 58
#. type: Plain text
msgid "You may generate various other types of classes when generating a model, such as factories, seeders, policies, controllers, and form requests. In addition, these options may be combined to create multiple classes at once:"
msgstr "在產生 Model 時，也能產生許多其他類型的類別，如 Factory、Seeder、Policy、Controller、Form Request⋯等。此外，我們也能組合多個選項來一次產生多個類別："

# File: docs/8.x/eloquent.md, line: 59
# File: docs/master/eloquent.md, line: 59
#. type: Code fence info string
#, no-wrap
msgid "bash"
msgstr "bash"

# File: docs/8.x/eloquent.md, line: 59
# File: docs/master/eloquent.md, line: 59
#. type: Plain text
#, no-wrap
msgid "# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n\n"
"# Generate a model, FlightController resource class, and form request classes...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n\n"
"# Generate a model and a FlightPolicy class...\n"
"php artisan make:model Flight --policy\n\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n\n"
"# Shortcut to generate a model, migration, factory, seeder, policy, controller, and form requests...\n"
"php artisan make:model Flight --all\n\n"
"# Generate a pivot model...\n"
"php artisan make:model Member --pivot\n"
msgstr "# 產生 Model 與一個 FlightFactory 類別...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n\n"
"# 產生 Model 與一個 FlightSeeder 類別...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n\n"
"# 產生 Model 與一個 FlightController 類別...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n\n"
"# 產生 Model、FlightController 資源類別、以及 Form Request 類別...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n\n"
"# 產生 Model 與一個 FlightPolicy 類別...\n"
"php artisan make:model Flight --policy\n\n"
"# 產生 Migration、Factory、Seeder、與 Controller...\n"
"php artisan make:model Flight -mfsc\n\n"
"# 產生 Model、Migration、Factory、Seeder、Policy、Controller、與 Form Requests...\n"
"php artisan make:model Flight --all\n\n"
"# 產生樞紐 Model...\n"
"php artisan make:model Member --pivot\n"

# File: docs/8.x/eloquent.md, line: 90
# File: docs/master/eloquent.md, line: 90
#. type: Plain text
#, no-wrap
msgid "<a name=\"eloquent-model-conventions\"></a>\n"
msgstr "<a name=\"eloquent-model-conventions\"></a>\n"

# File: docs/8.x/eloquent.md, line: 90
# File: docs/master/eloquent.md, line: 90
#. type: Title ##
#, no-wrap
msgid "Eloquent Model Conventions"
msgstr "Eloquent Model 慣例"

# File: docs/8.x/eloquent.md, line: 93
# File: docs/master/eloquent.md, line: 93
#. type: Plain text
msgid "Models generated by the `make:model` command will be placed in the `app/Models` directory. Let's examine a basic model class and discuss some of Eloquent's key conventions:"
msgstr "使用 `make:model` 指令產生的 Model 會被放在 `app/Models` 目錄中。我們來看看一個基礎的 Model 類別，並討論一些 Eloquent 的重要慣例："

# File: docs/8.x/eloquent.md, line: 95
# File: docs/8.x/eloquent.md, line: 113
# File: docs/8.x/eloquent.md, line: 134
# File: docs/8.x/eloquent.md, line: 152
# File: docs/8.x/eloquent.md, line: 166
# File: docs/8.x/eloquent.md, line: 188
# File: docs/8.x/eloquent.md, line: 206
# File: docs/8.x/eloquent.md, line: 224
# File: docs/8.x/eloquent.md, line: 237
# File: docs/8.x/eloquent.md, line: 258
# File: docs/8.x/eloquent.md, line: 547
# File: docs/8.x/eloquent.md, line: 689
# File: docs/8.x/eloquent.md, line: 802
# File: docs/8.x/eloquent.md, line: 897
# File: docs/8.x/eloquent.md, line: 967
# File: docs/8.x/eloquent.md, line: 1039
# File: docs/8.x/eloquent.md, line: 1069
# File: docs/8.x/eloquent.md, line: 1100
# File: docs/8.x/eloquent.md, line: 1150
# File: docs/8.x/eloquent.md, line: 1205
# File: docs/8.x/eloquent.md, line: 1260
# File: docs/8.x/eloquent.md, line: 1292
# File: docs/8.x/eloquent.md, line: 1333
# File: docs/8.x/eloquent.md, line: 1408
# File: docs/master/eloquent.md, line: 95
# File: docs/master/eloquent.md, line: 113
# File: docs/master/eloquent.md, line: 134
# File: docs/master/eloquent.md, line: 152
# File: docs/master/eloquent.md, line: 166
# File: docs/master/eloquent.md, line: 188
# File: docs/master/eloquent.md, line: 206
# File: docs/master/eloquent.md, line: 224
# File: docs/master/eloquent.md, line: 237
# File: docs/master/eloquent.md, line: 258
# File: docs/master/eloquent.md, line: 547
# File: docs/master/eloquent.md, line: 689
# File: docs/master/eloquent.md, line: 802
# File: docs/master/eloquent.md, line: 897
# File: docs/master/eloquent.md, line: 967
# File: docs/master/eloquent.md, line: 1039
# File: docs/master/eloquent.md, line: 1069
# File: docs/master/eloquent.md, line: 1100
# File: docs/master/eloquent.md, line: 1150
# File: docs/master/eloquent.md, line: 1205
# File: docs/master/eloquent.md, line: 1260
# File: docs/master/eloquent.md, line: 1292
# File: docs/master/eloquent.md, line: 1333
# File: docs/master/eloquent.md, line: 1422
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/eloquent.md, line: 97
# File: docs/8.x/eloquent.md, line: 115
# File: docs/8.x/eloquent.md, line: 136
# File: docs/8.x/eloquent.md, line: 190
# File: docs/8.x/eloquent.md, line: 208
# File: docs/8.x/eloquent.md, line: 239
# File: docs/8.x/eloquent.md, line: 260
# File: docs/8.x/eloquent.md, line: 691
# File: docs/8.x/eloquent.md, line: 804
# File: docs/8.x/eloquent.md, line: 899
# File: docs/8.x/eloquent.md, line: 969
# File: docs/8.x/eloquent.md, line: 1071
# File: docs/8.x/eloquent.md, line: 1102
# File: docs/8.x/eloquent.md, line: 1152
# File: docs/8.x/eloquent.md, line: 1207
# File: docs/8.x/eloquent.md, line: 1262
# File: docs/8.x/eloquent.md, line: 1294
# File: docs/master/eloquent.md, line: 97
# File: docs/master/eloquent.md, line: 115
# File: docs/master/eloquent.md, line: 136
# File: docs/master/eloquent.md, line: 190
# File: docs/master/eloquent.md, line: 208
# File: docs/master/eloquent.md, line: 239
# File: docs/master/eloquent.md, line: 260
# File: docs/master/eloquent.md, line: 691
# File: docs/master/eloquent.md, line: 804
# File: docs/master/eloquent.md, line: 899
# File: docs/master/eloquent.md, line: 969
# File: docs/master/eloquent.md, line: 1071
# File: docs/master/eloquent.md, line: 1102
# File: docs/master/eloquent.md, line: 1152
# File: docs/master/eloquent.md, line: 1207
# File: docs/master/eloquent.md, line: 1262
# File: docs/master/eloquent.md, line: 1294
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr "    namespace App\\Models;\n"

# File: docs/8.x/eloquent.md, line: 99
# File: docs/8.x/eloquent.md, line: 117
# File: docs/8.x/eloquent.md, line: 138
# File: docs/8.x/eloquent.md, line: 192
# File: docs/8.x/eloquent.md, line: 210
# File: docs/8.x/eloquent.md, line: 241
# File: docs/8.x/eloquent.md, line: 262
# File: docs/8.x/eloquent.md, line: 693
# File: docs/8.x/eloquent.md, line: 1154
# File: docs/8.x/eloquent.md, line: 1209
# File: docs/8.x/eloquent.md, line: 1296
# File: docs/master/eloquent.md, line: 99
# File: docs/master/eloquent.md, line: 117
# File: docs/master/eloquent.md, line: 138
# File: docs/master/eloquent.md, line: 192
# File: docs/master/eloquent.md, line: 210
# File: docs/master/eloquent.md, line: 241
# File: docs/master/eloquent.md, line: 262
# File: docs/master/eloquent.md, line: 693
# File: docs/master/eloquent.md, line: 1154
# File: docs/master/eloquent.md, line: 1209
# File: docs/master/eloquent.md, line: 1296
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr "    use Illuminate\\Database\\Eloquent\\Model;\n"

# File: docs/8.x/eloquent.md, line: 104
# File: docs/master/eloquent.md, line: 104
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        //\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        //\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 106
# File: docs/master/eloquent.md, line: 106
#. type: Plain text
#, no-wrap
msgid "<a name=\"table-names\"></a>\n"
msgstr "<a name=\"table-names\"></a>\n"

# File: docs/8.x/eloquent.md, line: 106
# File: docs/master/eloquent.md, line: 106
#. type: Title ###
#, no-wrap
msgid "Table Names"
msgstr "資料表名稱"

# File: docs/8.x/eloquent.md, line: 109
# File: docs/master/eloquent.md, line: 109
#. type: Plain text
msgid "After glancing at the example above, you may have noticed that we did not tell Eloquent which database table corresponds to our `Flight` model. By convention, the \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the `Flight` model stores records in the `flights` table, while an `AirTrafficController` model would store records in an `air_traffic_controllers` table."
msgstr "看一眼上方的範例後，讀者應該已經發現，我們並沒有告訴 Eloquent，我們的 `Flight` Model 要對應到哪個資料表。依照慣例，除非有特別指定，否則 Eloquent 會將類別名稱的複數形式改為「蛇行命名法 (snake_case)」來當作表名。因此，在這個例子中，Eloquent 會假設 `Flight` Model 將資料儲存在 `flights` 資料表中，而 `AirTrafficController` Model 則會儲存在 `air_traffic_controllers` 資料表中。"

# File: docs/8.x/eloquent.md, line: 111
# File: docs/master/eloquent.md, line: 111
#. type: Plain text
msgid "If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by defining a `table` property on the model:"
msgstr "若你的 Model 對應的資料表不符合這個管理，可以手動在 Model 上定義 `table` 屬性來指定 Model 的表名："

# File: docs/8.x/eloquent.md, line: 127
# File: docs/master/eloquent.md, line: 127
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The table associated with the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $table = 'my_flights';\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The table associated with the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $table = 'my_flights';\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 129
# File: docs/master/eloquent.md, line: 129
#. type: Plain text
#, no-wrap
msgid "<a name=\"primary-keys\"></a>\n"
msgstr "<a name=\"primary-keys\"></a>\n"

# File: docs/8.x/eloquent.md, line: 129
# File: docs/master/eloquent.md, line: 129
#. type: Title ###
#, no-wrap
msgid "Primary Keys"
msgstr "主索引鍵 - Primary Key"

# File: docs/8.x/eloquent.md, line: 132
# File: docs/master/eloquent.md, line: 132
#. type: Plain text
msgid "Eloquent will also assume that each model's corresponding database table has a primary key column named `id`. If necessary, you may define a protected `$primaryKey` property on your model to specify a different column that serves as your model's primary key:"
msgstr "Eloquent 會假設每個 Model 對應的資料表都有一個名為 `id` 的主索引鍵欄位。若有需要的話，可以在 Model 上定義一個 protected `$primaryKey` 屬性來指定不同的欄位作為 Model 的主索引鍵："

# File: docs/8.x/eloquent.md, line: 148
# File: docs/master/eloquent.md, line: 148
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The primary key associated with the table.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $primaryKey = 'flight_id';\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The primary key associated with the table.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $primaryKey = 'flight_id';\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 150
# File: docs/master/eloquent.md, line: 150
#. type: Plain text
msgid "In addition, Eloquent assumes that the primary key is an incrementing integer value, which means that Eloquent will automatically cast the primary key to an integer. If you wish to use a non-incrementing or a non-numeric primary key you must define a public `$incrementing` property on your model that is set to `false`:"
msgstr "此外，Eloquent 還會假設主索引鍵是一個遞增 (Incrementing) 的整數值。這表示，Eloquent 會自動將主索引鍵的型別轉換為整數 (Integer)。若想使用非遞增或非數字的主索引鍵，則應在 Model 上定義一個 public `$incrementing` 屬性，並將其值設為 `false`："

# File: docs/8.x/eloquent.md, line: 162
# File: docs/master/eloquent.md, line: 162
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model's ID is auto-incrementing.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $incrementing = false;\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model's ID is auto-incrementing.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $incrementing = false;\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 164
# File: docs/master/eloquent.md, line: 164
#. type: Plain text
msgid "If your model's primary key is not an integer, you should define a protected `$keyType` property on your model. This property should have a value of `string`:"
msgstr "若 Model 的主索引件不是正數，則應在 Model 上定義一個 protected `$keyType` 屬性。該屬性的值應為 `string`："

# File: docs/8.x/eloquent.md, line: 176
# File: docs/master/eloquent.md, line: 176
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The data type of the auto-incrementing ID.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $keyType = 'string';\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The data type of the auto-incrementing ID.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $keyType = 'string';\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 178
# File: docs/master/eloquent.md, line: 178
#. type: Plain text
#, no-wrap
msgid "<a name=\"composite-primary-keys\"></a>\n"
msgstr "<a name=\"composite-primary-keys\"></a>\n"

# File: docs/8.x/eloquent.md, line: 178
# File: docs/master/eloquent.md, line: 178
#. type: Title ####
#, no-wrap
msgid "\"Composite\" Primary Keys"
msgstr "「組合式 (Composite)」主索引鍵"

# File: docs/8.x/eloquent.md, line: 181
# File: docs/master/eloquent.md, line: 181
#. type: Plain text
msgid "Eloquent requires each model to have at least one uniquely identifying \"ID\" that can serve as its primary key. \"Composite\" primary keys are not supported by Eloquent models. However, you are free to add additional multi-column, unique indexes to your database tables in addition to the table's uniquely identifying primary key."
msgstr "在 Eloquent 中，每個 Model 都必須要有至少一個不重複的識別用「ID」作為其主索引鍵。Eloquent Model 不支援「組合式」的主索引鍵。不過，除了不重複的識別用主索引鍵以外，你可以自由在資料表中新增額外的多欄位、不重複索引。"

# File: docs/8.x/eloquent.md, line: 183
# File: docs/master/eloquent.md, line: 183
#. type: Plain text
#, no-wrap
msgid "<a name=\"timestamps\"></a>\n"
msgstr "<a name=\"timestamps\"></a>\n"

# File: docs/8.x/eloquent.md, line: 183
# File: docs/master/eloquent.md, line: 183
#. type: Title ###
#, no-wrap
msgid "Timestamps"
msgstr "時戳 - Timestamps"

# File: docs/8.x/eloquent.md, line: 186
# File: docs/master/eloquent.md, line: 186
#. type: Plain text
msgid "By default, Eloquent expects `created_at` and `updated_at` columns to exist on your model's corresponding database table.  Eloquent will automatically set these column's values when models are created or updated. If you do not want these columns to be automatically managed by Eloquent, you should define a `$timestamps` property on your model with a value of `false`:"
msgstr "預設情況下，Eloquent 會預期 Model 所對應的資料表中有 `expected_at` 與 `updated_at` 欄位。在建立或更新 Model 時，Eloquent 會自動設定這些欄位的值。若不想要 Eloquent 自動處理這些欄位，可在 Model 上定義一個 `$timestamps` 屬性，並將其值設為 `false`："

# File: docs/8.x/eloquent.md, line: 202
# File: docs/master/eloquent.md, line: 202
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model should be timestamped.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $timestamps = false;\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model should be timestamped.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $timestamps = false;\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 204
# File: docs/master/eloquent.md, line: 204
#. type: Plain text
msgid "If you need to customize the format of your model's timestamps, set the `$dateFormat` property on your model. This property determines how date attributes are stored in the database as well as their format when the model is serialized to an array or JSON:"
msgstr "若需要自訂 Model 時戳的格式，可在 Model 上設定 `$dateFormat` 屬性。這個屬性會用來決定儲存在資料庫中的日期格式，以及 Model 被序列化為陣列或 JSON 時使用的各式："

# File: docs/8.x/eloquent.md, line: 220
# File: docs/master/eloquent.md, line: 220
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The storage format of the model's date columns.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $dateFormat = 'U';\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The storage format of the model's date columns.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $dateFormat = 'U';\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 222
# File: docs/master/eloquent.md, line: 222
#. type: Plain text
msgid "If you need to customize the names of the columns used to store the timestamps, you may define `CREATED_AT` and `UPDATED_AT` constants on your model:"
msgstr "若有需要自訂用來儲存時戳的欄位名稱，可在 Model 上定義 `CREATED_AT` 與 `UPDATED_AT` 常數："

# File: docs/8.x/eloquent.md, line: 230
# File: docs/master/eloquent.md, line: 230
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        const CREATED_AT = 'creation_date';\n"
"        const UPDATED_AT = 'updated_date';\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        const CREATED_AT = 'creation_date';\n"
"        const UPDATED_AT = 'updated_date';\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 232
# File: docs/master/eloquent.md, line: 232
#. type: Plain text
#, no-wrap
msgid "<a name=\"database-connections\"></a>\n"
msgstr "<a name=\"database-connections\"></a>\n"

# File: docs/8.x/eloquent.md, line: 232
# File: docs/master/eloquent.md, line: 232
#. type: Title ###
#, no-wrap
msgid "Database Connections"
msgstr "資料庫連線"

# File: docs/8.x/eloquent.md, line: 235
# File: docs/master/eloquent.md, line: 235
#. type: Plain text
msgid "By default, all Eloquent models will use the default database connection that is configured for your application. If you would like to specify a different connection that should be used when interacting with a particular model, you should define a `$connection` property on the model:"
msgstr "預設情況下，Eloquent Model 會使用專案設定的預設資料庫連線。若想為特定 Model 指定不同的資料庫連線，可在 Model 上定義一個 `$connection` 屬性："

# File: docs/8.x/eloquent.md, line: 251
# File: docs/master/eloquent.md, line: 251
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The database connection that should be used by the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $connection = 'sqlite';\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The database connection that should be used by the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $connection = 'sqlite';\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 253
# File: docs/master/eloquent.md, line: 253
#. type: Plain text
#, no-wrap
msgid "<a name=\"default-attribute-values\"></a>\n"
msgstr "<a name=\"default-attribute-values\"></a>\n"

# File: docs/8.x/eloquent.md, line: 253
# File: docs/master/eloquent.md, line: 253
#. type: Title ###
#, no-wrap
msgid "Default Attribute Values"
msgstr "預設的屬性值"

# File: docs/8.x/eloquent.md, line: 256
# File: docs/master/eloquent.md, line: 256
#. type: Plain text
msgid "By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an `$attributes` property on your model:"
msgstr "預設情況下，新初始化的 Model 實體不會包含任何屬性值。若為 Model 上的一些屬性定義預設值，可在 Model 上定義一個 `$attributes` 屬性："

# File: docs/8.x/eloquent.md, line: 274
# File: docs/master/eloquent.md, line: 274
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The model's default values for attributes.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $attributes = [\n"
"            'delayed' => false,\n"
"        ];\n"
"    }\n"
msgstr "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The model's default values for attributes.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $attributes = [\n"
"            'delayed' => false,\n"
"        ];\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 276
# File: docs/master/eloquent.md, line: 276
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-models\"></a>\n"
msgstr "<a name=\"retrieving-models\"></a>\n"

# File: docs/8.x/eloquent.md, line: 276
# File: docs/master/eloquent.md, line: 276
#. type: Title ##
#, no-wrap
msgid "Retrieving Models"
msgstr "取得 Model"

# File: docs/8.x/eloquent.md, line: 279
# File: docs/master/eloquent.md, line: 279
#. type: Plain text
msgid "Once you have created a model and [its associated database table](/docs/{{version}}/migrations#writing-migrations), you are ready to start retrieving data from your database. You can think of each Eloquent model as a powerful [query builder](/docs/{{version}}/queries) allowing you to fluently query the database table associated with the model. The model's `all` method will retrieve all of the records from the model's associated database table:"
msgstr "建立好 Model 與[相關的資料表](/docs/{{version}}/migrations#writing-migrations)後，就可以從資料庫中取得資料了。可以將 Eloquent Model 當成一個強大的 [Query Builder](/docs/{{version}}/queries)，能讓你流暢的查詢與該 Model 所關聯的資料表。Model 的 `all` 方法可以從 Model 關聯的資料表中取得所有紀錄："

# File: docs/8.x/eloquent.md, line: 281
# File: docs/8.x/eloquent.md, line: 465
# File: docs/8.x/eloquent.md, line: 493
# File: docs/8.x/eloquent.md, line: 506
# File: docs/8.x/eloquent.md, line: 579
# File: docs/8.x/eloquent.md, line: 592
# File: docs/8.x/eloquent.md, line: 677
# File: docs/8.x/eloquent.md, line: 763
# File: docs/8.x/eloquent.md, line: 873
# File: docs/master/eloquent.md, line: 281
# File: docs/master/eloquent.md, line: 465
# File: docs/master/eloquent.md, line: 493
# File: docs/master/eloquent.md, line: 506
# File: docs/master/eloquent.md, line: 579
# File: docs/master/eloquent.md, line: 592
# File: docs/master/eloquent.md, line: 677
# File: docs/master/eloquent.md, line: 763
# File: docs/master/eloquent.md, line: 873
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Flight;\n"
msgstr "    use App\\Models\\Flight;\n"

# File: docs/8.x/eloquent.md, line: 285
# File: docs/master/eloquent.md, line: 285
#. type: Plain text
#, no-wrap
msgid "    foreach (Flight::all() as $flight) {\n"
"        echo $flight->name;\n"
"    }\n"
msgstr "    foreach (Flight::all() as $flight) {\n"
"        echo $flight->name;\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 287
# File: docs/master/eloquent.md, line: 287
#. type: Plain text
#, no-wrap
msgid "<a name=\"building-queries\"></a>\n"
msgstr "<a name=\"building-queries\"></a>\n"

# File: docs/8.x/eloquent.md, line: 287
# File: docs/master/eloquent.md, line: 287
#. type: Title ####
#, no-wrap
msgid "Building Queries"
msgstr "建立查詢"

# File: docs/8.x/eloquent.md, line: 290
# File: docs/master/eloquent.md, line: 290
#. type: Plain text
msgid "The Eloquent `all` method will return all of the results in the model's table. However, since each Eloquent model serves as a [query builder](/docs/{{version}}/queries), you may add additional constraints to queries and then invoke the `get` method to retrieve the results:"
msgstr "Eloquent 的 `all` 方法會回傳 Model 資料表中的所有紀錄。不過，由於每個 Eloquent Model 也都有 [Query Builder](/docs/{{version}}/queries) 的功能，因此你可以隨意加上額外的查詢條件，然後再叫用 `get` 方法來取得結果："

# File: docs/8.x/eloquent.md, line: 295
# File: docs/master/eloquent.md, line: 295
#. type: Plain text
#, no-wrap
msgid "    $flights = Flight::where('active', 1)\n"
"                   ->orderBy('name')\n"
"                   ->take(10)\n"
"                   ->get();\n"
msgstr "    $flights = Flight::where('active', 1)\n"
"                   ->orderBy('name')\n"
"                   ->take(10)\n"
"                   ->get();\n"

# File: docs/8.x/eloquent.md, line: 297
# File: docs/master/eloquent.md, line: 297
#. type: Plain text
#, no-wrap
msgid "> {tip} Since Eloquent models are query builders, you should review all of the methods provided by Laravel's [query builder](/docs/{{version}}/queries). You may use any of these methods when writing your Eloquent queries.\n"
msgstr "> {tip} 由於 Eloquent Model 是 Query Builder，因此讀者因先看看 Laravel 的 [Query Builder](/docs/{{version}}/queries) 中所提供的方法。在撰寫 Eloquent 查詢時，可以使用這些方法中所有的方法。\n"

# File: docs/8.x/eloquent.md, line: 299
# File: docs/master/eloquent.md, line: 299
#. type: Plain text
#, no-wrap
msgid "<a name=\"refreshing-models\"></a>\n"
msgstr "<a name=\"refreshing-models\"></a>\n"

# File: docs/8.x/eloquent.md, line: 299
# File: docs/master/eloquent.md, line: 299
#. type: Title ####
#, no-wrap
msgid "Refreshing Models"
msgstr "重新整理 Model"

# File: docs/8.x/eloquent.md, line: 302
# File: docs/master/eloquent.md, line: 302
#. type: Plain text
msgid "If you already have an instance of an Eloquent model that was retrieved from the database, you can \"refresh\" the model using the `fresh` and `refresh` methods. The `fresh` method will re-retrieve the model from the database. The existing model instance will not be affected:"
msgstr "若已經從資料庫中取得 Eloquent Model 的實體，則可以使用 `fresh` 與 `refresh` 方法來「重新整理」Model。`fresh` 方法會從資料庫中重新取得 Model。現有的 Model 實體將不受影響："

# File: docs/8.x/eloquent.md, line: 304
# File: docs/8.x/eloquent.md, line: 310
# File: docs/master/eloquent.md, line: 304
# File: docs/master/eloquent.md, line: 310
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::where('number', 'FR 900')->first();\n"
msgstr "    $flight = Flight::where('number', 'FR 900')->first();\n"

# File: docs/8.x/eloquent.md, line: 306
# File: docs/master/eloquent.md, line: 306
#. type: Plain text
#, no-wrap
msgid "    $freshFlight = $flight->fresh();\n"
msgstr "    $freshFlight = $flight->fresh();\n"

# File: docs/8.x/eloquent.md, line: 308
# File: docs/master/eloquent.md, line: 308
#. type: Plain text
msgid "The `refresh` method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:"
msgstr "`refresh` 方法會使用資料庫中最新的資料庫來重新填寫現有的 Model。此外，該 Model 中所有已載入的關聯也會被重新載入："

# File: docs/8.x/eloquent.md, line: 312
# File: docs/master/eloquent.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    $flight->number = 'FR 456';\n"
msgstr "    $flight->number = 'FR 456';\n"

# File: docs/8.x/eloquent.md, line: 314
# File: docs/master/eloquent.md, line: 314
#. type: Plain text
#, no-wrap
msgid "    $flight->refresh();\n"
msgstr "    $flight->refresh();\n"

# File: docs/8.x/eloquent.md, line: 316
# File: docs/master/eloquent.md, line: 316
#. type: Plain text
#, no-wrap
msgid "    $flight->number; // \"FR 900\"\n"
msgstr "    $flight->number; // \"FR 900\"\n"

# File: docs/8.x/eloquent.md, line: 318
# File: docs/master/eloquent.md, line: 318
#. type: Plain text
#, no-wrap
msgid "<a name=\"collections\"></a>\n"
msgstr "<a name=\"collections\"></a>\n"

# File: docs/8.x/eloquent.md, line: 318
# File: docs/master/eloquent.md, line: 318
#. type: Title ###
#, no-wrap
msgid "Collections"
msgstr "Collection"

# File: docs/8.x/eloquent.md, line: 321
# File: docs/master/eloquent.md, line: 321
#. type: Plain text
msgid "As we have seen, Eloquent methods like `all` and `get` retrieve multiple records from the database. However, these methods don't return a plain PHP array. Instead, an instance of `Illuminate\\Database\\Eloquent\\Collection` is returned."
msgstr "如同我們看到的，`all` 或 `get` 等 Eloquent 方法會從資料庫中取得多筆紀錄。不過，這些方法並不是回傳一般的 PHP 陣列，而是回傳一個 `Illuminate\\Database\\Eloquent\\Collection` 的實體。"

# File: docs/8.x/eloquent.md, line: 323
# File: docs/master/eloquent.md, line: 323
#. type: Plain text
msgid "The Eloquent `Collection` class extends Laravel's base `Illuminate\\Support\\Collection` class, which provides a [variety of helpful methods](/docs/{{version}}/collections#available-methods) for interacting with data collections. For example, the `reject` method may be used to remove models from a collection based on the results of an invoked closure:"
msgstr "Eloquent 的 `Collection` 類別繼承自 Laravel 的基礎 `Illuminate\\Support\\Collection` 類別。對於要與一組資料互動，這個類別提供了[許多實用的方法](/docs/{{version}}/collections#available-methods)。舉例來說，使用 `reject` 方法，可以按照閉包的叫用結果來將一些 Model 從 Collection 中移除："

# File: docs/8.x/eloquent.md, line: 324
# File: docs/8.x/eloquent.md, line: 336
# File: docs/8.x/eloquent.md, line: 349
# File: docs/8.x/eloquent.md, line: 363
# File: docs/8.x/eloquent.md, line: 375
# File: docs/8.x/eloquent.md, line: 385
# File: docs/8.x/eloquent.md, line: 404
# File: docs/8.x/eloquent.md, line: 414
# File: docs/master/eloquent.md, line: 324
# File: docs/master/eloquent.md, line: 336
# File: docs/master/eloquent.md, line: 349
# File: docs/master/eloquent.md, line: 363
# File: docs/master/eloquent.md, line: 375
# File: docs/master/eloquent.md, line: 385
# File: docs/master/eloquent.md, line: 404
# File: docs/master/eloquent.md, line: 414
#. type: Code fence info string
#, no-wrap
msgid "php"
msgstr "php"

# File: docs/8.x/eloquent.md, line: 324
# File: docs/master/eloquent.md, line: 324
#. type: Plain text
#, no-wrap
msgid "$flights = Flight::where('destination', 'Paris')->get();\n\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});\n"
msgstr "$flights = Flight::where('destination', 'Paris')->get();\n\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});\n"

# File: docs/8.x/eloquent.md, line: 333
# File: docs/master/eloquent.md, line: 333
#. type: Plain text
msgid "In addition to the methods provided by Laravel's base collection class, the Eloquent collection class provides [a few extra methods](/docs/{{version}}/eloquent-collections#available-methods) that are specifically intended for interacting with collections of Eloquent models."
msgstr "除了 Laravel 的基礎 Collection 類別中提供的方法外，為了與包含 Eloquent Model 的 Collection\n"
"互動，Eloquent Collection 也特別提供了[一些額外的方法](/docs/{{version}}/eloquent-collections#available-methods)。"

# File: docs/8.x/eloquent.md, line: 335
# File: docs/master/eloquent.md, line: 335
#. type: Plain text
msgid "Since all of Laravel's collections implement PHP's iterable interfaces, you may loop over collections as if they were an array:"
msgstr "由於所有的 Laravel Collection 都實作了 PHP 的 Iterable 介面，因此我們可以把 Collection 當作陣列一樣迭代："

# File: docs/8.x/eloquent.md, line: 336
# File: docs/master/eloquent.md, line: 336
#. type: Plain text
#, no-wrap
msgid "foreach ($flights as $flight) {\n"
"    echo $flight->name;\n"
"}\n"
msgstr "foreach ($flights as $flight) {\n"
"    echo $flight->name;\n"
"}\n"

# File: docs/8.x/eloquent.md, line: 343
# File: docs/master/eloquent.md, line: 343
#. type: Plain text
#, no-wrap
msgid "<a name=\"chunking-results\"></a>\n"
msgstr "<a name=\"chunking-results\"></a>\n"

# File: docs/8.x/eloquent.md, line: 343
# File: docs/master/eloquent.md, line: 343
#. type: Title ###
#, no-wrap
msgid "Chunking Results"
msgstr "將查詢結果分段"

# File: docs/8.x/eloquent.md, line: 346
# File: docs/master/eloquent.md, line: 346
#. type: Plain text
msgid "Your application may run out of memory if you attempt to load tens of thousands of Eloquent records via the `all` or `get` methods. Instead of using these methods, the `chunk` method may be used to process large numbers of models more efficiently."
msgstr "如果嘗試使用 `all` 或 `get` 方法來取得幾萬筆 Eloquent 紀錄，那麼你的程式可能會記憶體不足。除了使用這些方法外，可以使用 `chunk` 方法來更有效率地處理大量的 Model："

# File: docs/8.x/eloquent.md, line: 348
# File: docs/master/eloquent.md, line: 348
#. type: Plain text
msgid "The `chunk` method will retrieve a subset of Eloquent models, passing them to a closure for processing. Since only the current chunk of Eloquent models is retrieved at a time, the `chunk` method will provide significantly reduced memory usage when working with a large number of models:"
msgstr "`chunk` 方法會取得一部分的 Eloquent Model，然後將這些 Model 傳入用於處理的閉包中。由於一次只會取得目前這個部分的 Eloquent Model，因此在處理大量 Model 時，`chunk` 方法會顯著地降低記憶體的使用："

# File: docs/8.x/eloquent.md, line: 349
# File: docs/master/eloquent.md, line: 349
#. type: Plain text
#, no-wrap
msgid "use App\\Models\\Flight;\n\n"
"Flight::chunk(200, function ($flights) {\n"
"    foreach ($flights as $flight) {\n"
"        //\n"
"    }\n"
"});\n"
msgstr "use App\\Models\\Flight;\n\n"
"Flight::chunk(200, function ($flights) {\n"
"    foreach ($flights as $flight) {\n"
"        //\n"
"    }\n"
"});\n"

# File: docs/8.x/eloquent.md, line: 360
# File: docs/master/eloquent.md, line: 360
#. type: Plain text
msgid "The first argument passed to the `chunk` method is the number of records you wish to receive per \"chunk\". The closure passed as the second argument will be invoked for each chunk that is retrieved from the database. A database query will be executed to retrieve each chunk of records passed to the closure."
msgstr "傳給 `chunk` 方法的第一個引數代表每個「Chunk (分段)」要取得的紀錄。每次從資料庫中取得一組片段後，就會叫用作為第二個引數傳入的閉包。每取得一組傳入閉包的片段，就會執行一次資料庫查詢。"

# File: docs/8.x/eloquent.md, line: 362
# File: docs/master/eloquent.md, line: 362
#. type: Plain text
msgid "If you are filtering the results of the `chunk` method based on a column that you will also be updating while iterating over the results, you should use the `chunkById` method. Using the `chunk` method in these scenarios could lead to unexpected and inconsistent results. Internally, the `chunkById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr "若使用 `chunk` 方法時有過濾資料，在迭代結果的時候會更新這個欄位，則應使用 `chunkById` 方法。若在這種情況下使用 `chunk` 可能會取得未預期的結果或是不一致的結果。在 `chunkById` 方法內部，會取得 `id` 欄位值大於前一個分段中最後一個 Model 的 Model："

# File: docs/8.x/eloquent.md, line: 363
# File: docs/master/eloquent.md, line: 363
#. type: Plain text
#, no-wrap
msgid "Flight::where('departed', true)\n"
"    ->chunkById(200, function ($flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, $column = 'id');\n"
msgstr "Flight::where('departed', true)\n"
"    ->chunkById(200, function ($flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, $column = 'id');\n"

# File: docs/8.x/eloquent.md, line: 371
#. type: Plain text
#, no-wrap
msgid "<a name=\"streaming-results-lazily\"></a>\n"
msgstr "<a name=\"streaming-results-lazily\"></a>\n"

# File: docs/8.x/eloquent.md, line: 371
#. type: Title ###
#, no-wrap
msgid "Streaming Results Lazily"
msgstr "延遲的查詢結果資料流"

# File: docs/8.x/eloquent.md, line: 374
# File: docs/master/eloquent.md, line: 374
#. type: Plain text
msgid "The `lazy` method works similarly to [the `chunk` method](#chunking-results) in the sense that, behind the scenes, it executes the query in chunks. However, instead of passing each chunk directly into a callback as is, the `lazy` method returns a flattened [`LazyCollection`](/docs/{{version}}/collections#lazy-collections) of Eloquent models, which lets you interact with the results as a single stream:"
msgstr "`lazy` 方法與 [`chunk` 方法](#chunking-results) 的原理類似，都是以分段的方式執行查詢。不過，`lazy` 方法不是直接把每個分段傳入回呼中，而是回傳一個包含 Eloquent Model 的扁平 (Flattened) [`LazyCollection`](/docs/{{version}}/collections#lazy-collections)，使用這個 LazyCollection，就可以以單一資料流的方式與查詢結果互動："

# File: docs/8.x/eloquent.md, line: 375
# File: docs/master/eloquent.md, line: 375
#. type: Plain text
#, no-wrap
msgid "use App\\Models\\Flight;\n\n"
"foreach (Flight::lazy() as $flight) {\n"
"    //\n"
"}\n"
msgstr "use App\\Models\\Flight;\n\n"
"foreach (Flight::lazy() as $flight) {\n"
"    //\n"
"}\n"

# File: docs/8.x/eloquent.md, line: 384
# File: docs/master/eloquent.md, line: 384
#. type: Plain text
msgid "If you are filtering the results of the `lazy` method based on a column that you will also be updating while iterating over the results, you should use the `lazyById` method. Internally, the `lazyById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr "若使用 `lazy` 方法時有過濾資料，在迭代結果的時候會更新這個欄位，則應使用 `lazyById` 方法。在 `lazyById` 方法內部，會取得 `id` 欄位值大於前一個分段中最後一個 Model 的 Model："

# File: docs/8.x/eloquent.md, line: 385
# File: docs/master/eloquent.md, line: 385
#. type: Plain text
#, no-wrap
msgid "Flight::where('departed', true)\n"
"    ->lazyById(200, $column = 'id')\n"
"    ->each->update(['departed' => false]);\n"
msgstr "Flight::where('departed', true)\n"
"    ->lazyById(200, $column = 'id')\n"
"    ->each->update(['departed' => false]);\n"

# File: docs/8.x/eloquent.md, line: 392
# File: docs/master/eloquent.md, line: 392
#. type: Plain text
msgid "You may filter the results based on the descending order of the `id` using the `lazyByIdDesc` method."
msgstr "可以使用 `lazyByIdDesc` 以依據 `id` 的降冪排序來過濾查詢結果。"

# File: docs/8.x/eloquent.md, line: 394
# File: docs/master/eloquent.md, line: 394
#. type: Plain text
#, no-wrap
msgid "<a name=\"cursors\"></a>\n"
msgstr "<a name=\"cursors\"></a>\n"

# File: docs/8.x/eloquent.md, line: 394
# File: docs/master/eloquent.md, line: 394
#. type: Title ###
#, no-wrap
msgid "Cursors"
msgstr "指標 - Cursor"

# File: docs/8.x/eloquent.md, line: 397
# File: docs/master/eloquent.md, line: 397
#. type: Plain text
msgid "Similar to the `lazy` method, the `cursor` method may be used to significantly reduce your application's memory consumption when iterating through tens of thousands of Eloquent model records."
msgstr "與 `lazy` 方法類似，`cursor` 方法也可用來在疊檯數千筆 Eloquent Model 時顯著降低程式的記憶體使用量。"

# File: docs/8.x/eloquent.md, line: 399
# File: docs/master/eloquent.md, line: 399
#. type: Plain text
msgid "The `cursor` method will only execute a single database query; however, the individual Eloquent models will not be hydrated until they are actually iterated over. Therefore, only one Eloquent model is kept in memory at any given time while iterating over the cursor."
msgstr "`cursor` 方法只會執行一筆資料庫查詢。不過，直到個別 Eloquent Model 被迭代到以前，這些 Model 都不會被解凍 (Hydrated)。因此，Cursor 的每次迭代時，記憶體內一次都只會有一個 Eloquent Model。"

# File: docs/8.x/eloquent.md, line: 401
# File: docs/master/eloquent.md, line: 401
#. type: Plain text
#, no-wrap
msgid "> {note} Since the `cursor` method only ever holds a single Eloquent model in memory at a time, it cannot eager load relationships. If you need to eager load relationships, consider using [the `lazy` method](#streaming-results-lazily) instead.\n"
msgstr "> {note} 由於 `cursor` 方法一次只會將一個 Eloquent Model 放在記憶體內，因此我們沒有辦法對關聯做積極式載入。若想積極式載入關聯，請考慮使用 [`lazy` 方法](#streaming-results-lazily) 代替。\n"

# File: docs/8.x/eloquent.md, line: 403
# File: docs/master/eloquent.md, line: 403
#. type: Plain text
msgid "Internally, the `cursor` method uses PHP [generators](https://www.php.net/manual/en/language.generators.overview.php) to implement this functionality:"
msgstr "`cursor` 方法在其內部使用了 PHP 的 [Generator](https://www.php.net/manual/en/language.generators.overview.php) 來實作此功能："

# File: docs/8.x/eloquent.md, line: 404
# File: docs/master/eloquent.md, line: 404
#. type: Plain text
#, no-wrap
msgid "use App\\Models\\Flight;\n\n"
"foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"    //\n"
"}\n"
msgstr "use App\\Models\\Flight;\n\n"
"foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"    //\n"
"}\n"

# File: docs/8.x/eloquent.md, line: 413
# File: docs/master/eloquent.md, line: 413
#. type: Plain text
msgid "The `cursor` returns an `Illuminate\\Support\\LazyCollection` instance. [Lazy collections](/docs/{{version}}/collections#lazy-collections) allow you to use many of the collection methods available on typical Laravel collections while only loading a single model into memory at a time:"
msgstr "`cursor` 會回傳一個 `Illuminate\\Support\\LazyCollection` 實體。使用 [Lazy collection](/docs/{{version}}/collections#lazy-collections)，能讓我們使用許多一般 Laravel Collection 中的方法，但一次只需要將一筆 Model 載入記憶體即可："

# File: docs/8.x/eloquent.md, line: 414
# File: docs/master/eloquent.md, line: 414
#. type: Plain text
#, no-wrap
msgid "use App\\Models\\User;\n\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}\n"
msgstr "use App\\Models\\User;\n\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}\n"

# File: docs/8.x/eloquent.md, line: 427
# File: docs/master/eloquent.md, line: 427
#. type: Plain text
msgid "Although the `cursor` method uses far less memory than a regular query (by only holding a single Eloquent model in memory at a time), it will still eventually run out of memory. This is [due to PHP's PDO driver internally caching all raw query results in its buffer](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php). If you're dealing with a very large number of Eloquent records, consider using [the `lazy` method](#streaming-results-lazily) instead."
msgstr "雖然 `cursor` 方法比起一般查詢使用較少記憶體 (因為記憶體內一次只會有一筆 Eloquent Model)，但最終還是由可能會記憶體不足。這是[因為 PHP 的 PDO Driver 會自動在內部將所有的查詢結果都快取在其緩衝區 (Buffer) 上](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php)。所以，若要處理非常大量的 Eloquent 紀錄，請考慮使用 [`lazy` 方法](#streaming-results-lazily)替代。"

# File: docs/8.x/eloquent.md, line: 429
# File: docs/master/eloquent.md, line: 429
#. type: Plain text
#, no-wrap
msgid "<a name=\"advanced-subqueries\"></a>\n"
msgstr "<a name=\"advanced-subqueries\"></a>\n"

# File: docs/8.x/eloquent.md, line: 429
# File: docs/master/eloquent.md, line: 429
#. type: Title ###
#, no-wrap
msgid "Advanced Subqueries"
msgstr "進階子查詢"

# File: docs/8.x/eloquent.md, line: 432
# File: docs/master/eloquent.md, line: 432
#. type: Plain text
#, no-wrap
msgid "<a name=\"subquery-selects\"></a>\n"
msgstr "<a name=\"subquery-selects\"></a>\n"

# File: docs/8.x/eloquent.md, line: 432
# File: docs/master/eloquent.md, line: 432
#. type: Title ####
#, no-wrap
msgid "Subquery Selects"
msgstr "子查詢 Select"

# File: docs/8.x/eloquent.md, line: 435
# File: docs/master/eloquent.md, line: 435
#. type: Plain text
msgid "Eloquent also offers advanced subquery support, which allows you to pull information from related tables in a single query. For example, let's imagine that we have a table of flight `destinations` and a table of `flights` to destinations. The `flights` table contains an `arrived_at` column which indicates when the flight arrived at the destination."
msgstr "Eloquent 也提供了進階子查詢的支援，能讓你在單一查詢內從其他相關的資料表中取得資料。舉例來說，假設我們有張班機目的地的 `destinations` 資料表，以及一張由前往該目的地班機的 `flights` 資料表。`flights` 資料表中包含了顯示班機抵達目的地時間的 `arrived_at` 欄位。"

# File: docs/8.x/eloquent.md, line: 437
# File: docs/master/eloquent.md, line: 437
#. type: Plain text
msgid "Using the subquery functionality available to the query builder's `select` and `addSelect` methods, we can select all of the `destinations` and the name of the flight that most recently arrived at that destination using a single query:"
msgstr "使用 Query Builder 的 `select` 與 `addSelect` 方法中的子查詢功能，我們就能使用單一查詢來選擇所有目的地 `destinations` 以及最近抵達該目的地的航班名稱："

# File: docs/8.x/eloquent.md, line: 440
# File: docs/master/eloquent.md, line: 440
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Destination;\n"
"    use App\\Models\\Flight;\n"
msgstr "    use App\\Models\\Destination;\n"
"    use App\\Models\\Flight;\n"

# File: docs/8.x/eloquent.md, line: 446
# File: docs/master/eloquent.md, line: 446
#. type: Plain text
#, no-wrap
msgid "    return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
"    ])->get();\n"
msgstr "    return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
"    ])->get();\n"

# File: docs/8.x/eloquent.md, line: 448
# File: docs/master/eloquent.md, line: 448
#. type: Plain text
#, no-wrap
msgid "<a name=\"subquery-ordering\"></a>\n"
msgstr "<a name=\"subquery-ordering\"></a>\n"

# File: docs/8.x/eloquent.md, line: 448
# File: docs/master/eloquent.md, line: 448
#. type: Title ####
#, no-wrap
msgid "Subquery Ordering"
msgstr "子查詢排序"

# File: docs/8.x/eloquent.md, line: 451
# File: docs/master/eloquent.md, line: 451
#. type: Plain text
msgid "In addition, the query builder's `orderBy` function supports subqueries. Continuing to use our flight example, we may use this functionality to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single database query:"
msgstr "此外，Query Builder 的 `orderBy` 功能也支援子查詢。繼續使用剛才的航班範例，我們可以使用這個功能來按照最後班機抵達目的地的時間來為所有目的地進行排序。同樣，我們只需要單一資料庫查詢就可以完成："

# File: docs/8.x/eloquent.md, line: 458
# File: docs/master/eloquent.md, line: 458
#. type: Plain text
#, no-wrap
msgid "    return Destination::orderByDesc(\n"
"        Flight::select('arrived_at')\n"
"            ->whereColumn('destination_id', 'destinations.id')\n"
"            ->orderByDesc('arrived_at')\n"
"            ->limit(1)\n"
"    )->get();\n"
msgstr "    return Destination::orderByDesc(\n"
"        Flight::select('arrived_at')\n"
"            ->whereColumn('destination_id', 'destinations.id')\n"
"            ->orderByDesc('arrived_at')\n"
"            ->limit(1)\n"
"    )->get();\n"

# File: docs/8.x/eloquent.md, line: 460
# File: docs/master/eloquent.md, line: 460
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-single-models\"></a>\n"
msgstr "<a name=\"retrieving-single-models\"></a>\n"

# File: docs/8.x/eloquent.md, line: 460
# File: docs/master/eloquent.md, line: 460
#. type: Title ##
#, no-wrap
msgid "Retrieving Single Models / Aggregates"
msgstr "取得單一 Model 或彙總"

# File: docs/8.x/eloquent.md, line: 463
# File: docs/master/eloquent.md, line: 463
#. type: Plain text
msgid "In addition to retrieving all of the records matching a given query, you may also retrieve single records using the `find`, `first`, or `firstWhere` methods. Instead of returning a collection of models, these methods return a single model instance:"
msgstr "除了取得所有符合給定查詢的紀錄外，我們也可以使用 `find`, `first`, 或 `firstWhere` 方法來取得單一紀錄。這些方法不會回傳一組包含 Model 的 Collection，而只會回傳單一 Model："

# File: docs/8.x/eloquent.md, line: 468
# File: docs/master/eloquent.md, line: 468
#. type: Plain text
#, no-wrap
msgid "    // Retrieve a model by its primary key...\n"
"    $flight = Flight::find(1);\n"
msgstr "    // 使用主索引鍵來取得 Model...\n"
"    $flight = Flight::find(1);\n"

# File: docs/8.x/eloquent.md, line: 471
# File: docs/master/eloquent.md, line: 471
#. type: Plain text
#, no-wrap
msgid "    // Retrieve the first model matching the query constraints...\n"
"    $flight = Flight::where('active', 1)->first();\n"
msgstr "    // 取得符合查詢條件的第一個 Model...\n"
"    $flight = Flight::where('active', 1)->first();\n"

# File: docs/8.x/eloquent.md, line: 474
# File: docs/master/eloquent.md, line: 474
#. type: Plain text
#, no-wrap
msgid "    // Alternative to retrieving the first model matching the query constraints...\n"
"    $flight = Flight::firstWhere('active', 1);\n"
msgstr "    // 取得符合查詢條件的第一筆 Model 之替代寫法...\n"
"    $flight = Flight::firstWhere('active', 1);\n"

# File: docs/8.x/eloquent.md, line: 476
# File: docs/master/eloquent.md, line: 476
#. type: Plain text
msgid "Sometimes you may wish to retrieve the first result of a query or perform some other action if no results are found. The `firstOr` method will return the first result matching the query or, if no results are found, execute the given closure. The value returned by the closure will be considered the result of the `firstOr` method:"
msgstr "有時候，我們可能會想取得查詢的第一筆結果，並在沒有符合的查詢結果時執行一些其他的操作。`firstOr` 方法會回傳第一筆符合該查詢的結果，並在沒有找到相符結果時執行給定的閉包。該閉包的回傳值會被當作 `firstOr` 方法的結果："

# File: docs/8.x/eloquent.md, line: 480
# File: docs/master/eloquent.md, line: 480
#. type: Plain text
#, no-wrap
msgid "    $model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"        // ...\n"
"    });\n"
msgstr "    $model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"        // ...\n"
"    });\n"

# File: docs/8.x/eloquent.md, line: 482
# File: docs/master/eloquent.md, line: 482
#. type: Plain text
#, no-wrap
msgid "<a name=\"not-found-exceptions\"></a>\n"
msgstr "<a name=\"not-found-exceptions\"></a>\n"

# File: docs/8.x/eloquent.md, line: 482
# File: docs/master/eloquent.md, line: 482
#. type: Title ####
#, no-wrap
msgid "Not Found Exceptions"
msgstr "找不到的例外"

# File: docs/8.x/eloquent.md, line: 485
# File: docs/master/eloquent.md, line: 485
#. type: Plain text
msgid "Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The `findOrFail` and `firstOrFail` methods will retrieve the first result of the query; however, if no result is found, an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` will be thrown:"
msgstr "有時候，我們可能會想在找不到 Model 時擲回一個例外。這種行為特別適用於路由或 Controller 中。`findOrFail` 或 `firstOrFail` 方法會取得查詢的第一筆結果。不過，若找不到結果，會擲回 `Illuminate\\Database\\Eloquent\\ModelNotFoundException`："

# File: docs/8.x/eloquent.md, line: 487
# File: docs/master/eloquent.md, line: 487
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::findOrFail(1);\n"
msgstr "    $flight = Flight::findOrFail(1);\n"

# File: docs/8.x/eloquent.md, line: 489
# File: docs/master/eloquent.md, line: 489
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::where('legs', '>', 3)->firstOrFail();\n"
msgstr "    $flight = Flight::where('legs', '>', 3)->firstOrFail();\n"

# File: docs/8.x/eloquent.md, line: 491
# File: docs/master/eloquent.md, line: 491
#. type: Plain text
msgid "If the `ModelNotFoundException` is not caught, a 404 HTTP response is automatically sent back to the client:"
msgstr "若未攔截 (Catch) `ModelNotFoundException`，則會自動回傳 404 HTTP 回應給用戶端："

# File: docs/8.x/eloquent.md, line: 497
# File: docs/master/eloquent.md, line: 497
#. type: Plain text
#, no-wrap
msgid "    Route::get('/api/flights/{id}', function ($id) {\n"
"        return Flight::findOrFail($id);\n"
"    });\n"
msgstr "    Route::get('/api/flights/{id}', function ($id) {\n"
"        return Flight::findOrFail($id);\n"
"    });\n"

# File: docs/8.x/eloquent.md, line: 499
# File: docs/master/eloquent.md, line: 499
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-or-creating-models\"></a>\n"
msgstr "<a name=\"retrieving-or-creating-models\"></a>\n"

# File: docs/8.x/eloquent.md, line: 499
# File: docs/master/eloquent.md, line: 499
#. type: Title ###
#, no-wrap
msgid "Retrieving Or Creating Models"
msgstr "取得或建立 Model"

# File: docs/8.x/eloquent.md, line: 502
# File: docs/master/eloquent.md, line: 502
#. type: Plain text
msgid "The `firstOrCreate` method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the attributes resulting from merging the first array argument with the optional second array argument:"
msgstr "`firstOrCreate` 方法會嘗試使用給定的欄位 / 值配對組來取得資料庫紀錄。若資料庫中找不到該 Model，則會將第一個第一個陣列引述與第二個可選的陣列引數合併後插入資料庫："

# File: docs/8.x/eloquent.md, line: 504
# File: docs/master/eloquent.md, line: 504
#. type: Plain text
msgid "The `firstOrNew` method, like `firstOrCreate`, will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by `firstOrNew` has not yet been persisted to the database. You will need to manually call the `save` method to persist it:"
msgstr "`firstOrNew` 方法與 `firstOrCreate` 方法類似，會嘗試在資料庫中尋找符合給定屬性的紀錄。不過，若找不到 Model，則會回傳新的 Model 實體。請注意，`firstOrNew` 回傳的 Model 還未被儲存在資料庫中，應手動呼叫 `save` 方法來保存："

# File: docs/8.x/eloquent.md, line: 511
# File: docs/master/eloquent.md, line: 511
#. type: Plain text
#, no-wrap
msgid "    // Retrieve flight by name or create it if it doesn't exist...\n"
"    $flight = Flight::firstOrCreate([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"
msgstr "    // 依據名稱來取得航班，若不存在則建立...\n"
"    $flight = Flight::firstOrCreate([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"

# File: docs/8.x/eloquent.md, line: 517
# File: docs/master/eloquent.md, line: 517
#. type: Plain text
#, no-wrap
msgid "    // Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\n"
"    $flight = Flight::firstOrCreate(\n"
"        ['name' => 'London to Paris'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"
msgstr "    // 依據名稱取得航班，若不存在則使用 name, delayed, 與 arrival_time 屬性建立一筆...\n"
"    $flight = Flight::firstOrCreate(\n"
"        ['name' => 'London to Paris'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"

# File: docs/8.x/eloquent.md, line: 522
# File: docs/master/eloquent.md, line: 522
#. type: Plain text
#, no-wrap
msgid "    // Retrieve flight by name or instantiate a new Flight instance...\n"
"    $flight = Flight::firstOrNew([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"
msgstr "    // 依據名稱取的航班，若不存在則初始化一個新的 Flight 實體...\n"
"    $flight = Flight::firstOrNew([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"

# File: docs/8.x/eloquent.md, line: 528
# File: docs/master/eloquent.md, line: 528
#. type: Plain text
#, no-wrap
msgid "    // Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n"
"    $flight = Flight::firstOrNew(\n"
"        ['name' => 'Tokyo to Sydney'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"
msgstr "    // 依據名稱取得航班，若不存在則使用 name, delayed, 與 arrival_time 屬性初始化一個航班實體...\n"
"    $flight = Flight::firstOrNew(\n"
"        ['name' => 'Tokyo to Sydney'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"

# File: docs/8.x/eloquent.md, line: 530
# File: docs/master/eloquent.md, line: 530
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-aggregates\"></a>\n"
msgstr "<a name=\"retrieving-aggregates\"></a>\n"

# File: docs/8.x/eloquent.md, line: 530
# File: docs/master/eloquent.md, line: 530
#. type: Title ###
#, no-wrap
msgid "Retrieving Aggregates"
msgstr "取得彙總值 (Aggregate)"

# File: docs/8.x/eloquent.md, line: 533
# File: docs/master/eloquent.md, line: 533
#. type: Plain text
msgid "When interacting with Eloquent models, you may also use the `count`, `sum`, `max`, and other [aggregate methods](/docs/{{version}}/queries#aggregates) provided by the Laravel [query builder](/docs/{{version}}/queries). As you might expect, these methods return a scalar value instead of an Eloquent model instance:"
msgstr "在與 Eloquent Model 互動時，我們也可以使用 `count`、`sum`、`max`⋯等其他由 Laravel [Query Builder](/docs/{{version}}/queries) 提供的[彙總方法](/docs/{{version}}/queries#aggregates)。如同讀者預期的一樣，這些方法會回傳純量值 (Scalar Value)，而非 Eloquent Model 實體："

# File: docs/8.x/eloquent.md, line: 535
# File: docs/master/eloquent.md, line: 535
#. type: Plain text
#, no-wrap
msgid "    $count = Flight::where('active', 1)->count();\n"
msgstr "    $count = Flight::where('active', 1)->count();\n"

# File: docs/8.x/eloquent.md, line: 537
# File: docs/master/eloquent.md, line: 537
#. type: Plain text
#, no-wrap
msgid "    $max = Flight::where('active', 1)->max('price');\n"
msgstr "    $max = Flight::where('active', 1)->max('price');\n"

# File: docs/8.x/eloquent.md, line: 539
# File: docs/master/eloquent.md, line: 539
#. type: Plain text
#, no-wrap
msgid "<a name=\"inserting-and-updating-models\"></a>\n"
msgstr "<a name=\"inserting-and-updating-models\"></a>\n"

# File: docs/8.x/eloquent.md, line: 539
# File: docs/master/eloquent.md, line: 539
#. type: Title ##
#, no-wrap
msgid "Inserting & Updating Models"
msgstr "插入與更新 Model"

# File: docs/8.x/eloquent.md, line: 542
# File: docs/master/eloquent.md, line: 542
#. type: Plain text
#, no-wrap
msgid "<a name=\"inserts\"></a>\n"
msgstr "<a name=\"inserts\"></a>\n"

# File: docs/8.x/eloquent.md, line: 542
# File: docs/master/eloquent.md, line: 542
#. type: Title ###
#, no-wrap
msgid "Inserts"
msgstr "插入 - Insert"

# File: docs/8.x/eloquent.md, line: 545
# File: docs/master/eloquent.md, line: 545
#. type: Plain text
msgid "Of course, when using Eloquent, we don't only need to retrieve models from the database. We also need to insert new records. Thankfully, Eloquent makes it simple. To insert a new record into the database, you should instantiate a new model instance and set attributes on the model. Then, call the `save` method on the model instance:"
msgstr "當然，在使用 Eloquent 時，我們的需求不只有從資料庫中取得資料，我們也需要能插入新紀錄。所幸，在 Eloquent 中要插入資料非常簡單。要將新紀錄插入資料庫，請初始化一個新的 Model 實體，並在 Model 上設定屬性。然後，在 Model 實體上呼叫 `save` 方法："

# File: docs/8.x/eloquent.md, line: 549
# File: docs/master/eloquent.md, line: 549
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr "    namespace App\\Http\\Controllers;\n"

# File: docs/8.x/eloquent.md, line: 553
# File: docs/master/eloquent.md, line: 553
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Flight;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Flight;\n"
"    use Illuminate\\Http\\Request;\n"

# File: docs/8.x/eloquent.md, line: 565
# File: docs/master/eloquent.md, line: 565
#. type: Plain text
#, no-wrap
msgid "    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new flight in the database.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            // Validate the request...\n"
msgstr "    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new flight in the database.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            // Validate the request...\n"

# File: docs/8.x/eloquent.md, line: 567
# File: docs/master/eloquent.md, line: 567
#. type: Plain text
#, no-wrap
msgid "            $flight = new Flight;\n"
msgstr "            $flight = new Flight;\n"

# File: docs/8.x/eloquent.md, line: 569
# File: docs/master/eloquent.md, line: 569
#. type: Plain text
#, no-wrap
msgid "            $flight->name = $request->name;\n"
msgstr "            $flight->name = $request->name;\n"

# File: docs/8.x/eloquent.md, line: 573
# File: docs/master/eloquent.md, line: 573
#. type: Plain text
#, no-wrap
msgid "            $flight->save();\n"
"        }\n"
"    }\n"
msgstr "            $flight->save();\n"
"        }\n"
"    }\n"

# File: docs/8.x/eloquent.md, line: 575
# File: docs/master/eloquent.md, line: 575
#. type: Plain text
msgid "In this example, we assign the `name` field from the incoming HTTP request to the `name` attribute of the `App\\Models\\Flight` model instance. When we call the `save` method, a record will be inserted into the database. The model's `created_at` and `updated_at` timestamps will automatically be set when the `save` method is called, so there is no need to set them manually."
msgstr "在這個範例中，我們將來自連入 HTTP 請求的 `name` 欄位賦值給 `App\\Models\\Flight` Model 實體的 `name` 屬性。呼叫 `save` 方法後，就會將一筆紀錄插入到資料庫中。在呼叫 `save` 方法時，會自動設定 `created_at` 與 `updated_at` 時戳，因此我們不需要手動設定這些欄位。"

# File: docs/8.x/eloquent.md, line: 577
# File: docs/master/eloquent.md, line: 577
#. type: Plain text
msgid "Alternatively, you may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the `create` method:"
msgstr "或者，我們也可以使用 `create` 來通過單一 PHP 陳述式「保存」新 Model。`create` 方法會回傳插入的 Model 實體："

# File: docs/8.x/eloquent.md, line: 583
# File: docs/8.x/eloquent.md, line: 681
# File: docs/master/eloquent.md, line: 583
# File: docs/master/eloquent.md, line: 681
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::create([\n"
"        'name' => 'London to Paris',\n"
"    ]);\n"
msgstr "    $flight = Flight::create([\n"
"        'name' => 'London to Paris',\n"
"    ]);\n"

# File: docs/8.x/eloquent.md, line: 585
# File: docs/master/eloquent.md, line: 585
#. type: Plain text
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default. To learn more about mass assignment, please consult the [mass assignment documentation](#mass-assignment)."
msgstr "不過，在使用 `create` 方法時，應在 Model 類別上設定好 `fillable` 或 `guarded` 屬性。由於所有的 Eloquent Model 預設都有針對大量賦值弱點 (Mass Assignment Vulnerability) 進行保護，因此必須設定這些屬性。要瞭解更多有關大量賦值的資訊，請參考[大量賦值說明文件](#mass-assignment)。"

# File: docs/8.x/eloquent.md, line: 587
# File: docs/master/eloquent.md, line: 587
#. type: Plain text
#, no-wrap
msgid "<a name=\"updates\"></a>\n"
msgstr "<a name=\"updates\"></a>\n"

# File: docs/8.x/eloquent.md, line: 587
# File: docs/master/eloquent.md, line: 587
#. type: Title ###
#, no-wrap
msgid "Updates"
msgstr "更新 - Update"

# File: docs/8.x/eloquent.md, line: 590
# File: docs/master/eloquent.md, line: 590
#. type: Plain text
msgid "The `save` method may also be used to update models that already exist in the database. To update a model, you should retrieve it and set any attributes you wish to update. Then, you should call the model's `save` method. Again, the `updated_at` timestamp will automatically be updated, so there is no need to manually set its value:"
msgstr "`save` 方法也可用來更新已存在於資料庫的 Model。要更新 Model，應先取得這個 Model，然後設定要更新的屬性。接著，呼叫 Model 的 `save` 方法。同樣，`updated_at` 時戳會自動更新，無須手動設定："

# File: docs/8.x/eloquent.md, line: 594
# File: docs/8.x/eloquent.md, line: 765
# File: docs/master/eloquent.md, line: 594
# File: docs/master/eloquent.md, line: 765
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::find(1);\n"
msgstr "    $flight = Flight::find(1);\n"

# File: docs/8.x/eloquent.md, line: 596
# File: docs/master/eloquent.md, line: 596
#. type: Plain text
#, no-wrap
msgid "    $flight->name = 'Paris to London';\n"
msgstr "    $flight->name = 'Paris to London';\n"

# File: docs/8.x/eloquent.md, line: 598
# File: docs/master/eloquent.md, line: 598
#. type: Plain text
#, no-wrap
msgid "    $flight->save();\n"
msgstr "    $flight->save();\n"

# File: docs/8.x/eloquent.md, line: 600
# File: docs/master/eloquent.md, line: 600
#. type: Plain text
#, no-wrap
msgid "<a name=\"mass-updates\"></a>\n"
msgstr "<a name=\"mass-updates\"></a>\n"

# File: docs/8.x/eloquent.md, line: 600
# File: docs/master/eloquent.md, line: 600
#. type: Title ####
#, no-wrap
msgid "Mass Updates"
msgstr "批次更新"

# File: docs/8.x/eloquent.md, line: 603
# File: docs/master/eloquent.md, line: 603
#. type: Plain text
msgid "Updates can also be performed against models that match a given query. In this example, all flights that are `active` and have a `destination` of `San Diego` will be marked as delayed:"
msgstr "也可以更新符合給定查詢的 Model。在這個範例中，設為 `active` 且 `destination` 為 `San Diego` 的航班會被標記為誤點 (Delayed)："

# File: docs/8.x/eloquent.md, line: 607
# File: docs/master/eloquent.md, line: 607
#. type: Plain text
#, no-wrap
msgid "    Flight::where('active', 1)\n"
"          ->where('destination', 'San Diego')\n"
"          ->update(['delayed' => 1]);\n"
msgstr "    Flight::where('active', 1)\n"
"          ->where('destination', 'San Diego')\n"
"          ->update(['delayed' => 1]);\n"

# File: docs/8.x/eloquent.md, line: 609
# File: docs/master/eloquent.md, line: 609
#. type: Plain text
msgid "The `update` method expects an array of column and value pairs representing the columns that should be updated. The `update` method returns the number of affected rows."
msgstr "`update` 方法預期一組包含欄位與值的陣列，用來代表要更新的欄位。`update` 方法會回傳受影響的行數。"

# File: docs/8.x/eloquent.md, line: 611
# File: docs/master/eloquent.md, line: 611
#. type: Plain text
#, no-wrap
msgid "> {note} When issuing a mass update via Eloquent, the `saving`, `saved`, `updating`, and `updated` model events will not be fired for the updated models. This is because the models are never actually retrieved when issuing a mass update.\n"
msgstr "> {note} 在使用 Eloquent 進行批次更新時，將不會引發 `saving`、`saved`、`updating`、`updated` 等 Model 事件。這是因為，在批次更新時並不會實際取得這些 Model。\n"

# File: docs/8.x/eloquent.md, line: 613
# File: docs/master/eloquent.md, line: 613
#. type: Plain text
#, no-wrap
msgid "<a name=\"examining-attribute-changes\"></a>\n"
msgstr "<a name=\"examining-attribute-changes\"></a>\n"

# File: docs/8.x/eloquent.md, line: 613
# File: docs/master/eloquent.md, line: 613
#. type: Title ####
#, no-wrap
msgid "Examining Attribute Changes"
msgstr "檢驗屬性的更改"

# File: docs/8.x/eloquent.md, line: 616
# File: docs/master/eloquent.md, line: 616
#. type: Plain text
msgid "Eloquent provides the `isDirty`, `isClean`, and `wasChanged` methods to examine the internal state of your model and determine how its attributes have changed from when the model was originally retrieved."
msgstr ""

# File: docs/8.x/eloquent.md, line: 618
# File: docs/master/eloquent.md, line: 618
#. type: Plain text
msgid "The `isDirty` method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name to the `isDirty` method to determine if a particular attribute is dirty. The `isClean` will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 620
# File: docs/8.x/eloquent.md, line: 1186
# File: docs/8.x/eloquent.md, line: 1337
# File: docs/8.x/eloquent.md, line: 1412
# File: docs/8.x/eloquent.md, line: 1440
# File: docs/master/eloquent.md, line: 620
# File: docs/master/eloquent.md, line: 1186
# File: docs/master/eloquent.md, line: 1337
# File: docs/master/eloquent.md, line: 1426
# File: docs/master/eloquent.md, line: 1454
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 626
# File: docs/8.x/eloquent.md, line: 649
# File: docs/master/eloquent.md, line: 626
# File: docs/master/eloquent.md, line: 649
#. type: Plain text
#, no-wrap
msgid "    $user = User::create([\n"
"        'first_name' => 'Taylor',\n"
"        'last_name' => 'Otwell',\n"
"        'title' => 'Developer',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 628
# File: docs/8.x/eloquent.md, line: 651
# File: docs/master/eloquent.md, line: 628
# File: docs/master/eloquent.md, line: 651
#. type: Plain text
#, no-wrap
msgid "    $user->title = 'Painter';\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 632
# File: docs/master/eloquent.md, line: 632
#. type: Plain text
#, no-wrap
msgid "    $user->isDirty(); // true\n"
"    $user->isDirty('title'); // true\n"
"    $user->isDirty('first_name'); // false\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 636
# File: docs/master/eloquent.md, line: 636
#. type: Plain text
#, no-wrap
msgid "    $user->isClean(); // false\n"
"    $user->isClean('title'); // false\n"
"    $user->isClean('first_name'); // true\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 638
# File: docs/8.x/eloquent.md, line: 653
# File: docs/master/eloquent.md, line: 638
# File: docs/master/eloquent.md, line: 653
#. type: Plain text
#, no-wrap
msgid "    $user->save();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 641
# File: docs/master/eloquent.md, line: 641
#. type: Plain text
#, no-wrap
msgid "    $user->isDirty(); // false\n"
"    $user->isClean(); // true\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 643
# File: docs/master/eloquent.md, line: 643
#. type: Plain text
msgid "The `wasChanged` method determines if any attributes were changed when the model was last saved within the current request cycle. If needed, you may pass an attribute name to see if a particular attribute was changed:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 657
# File: docs/master/eloquent.md, line: 657
#. type: Plain text
#, no-wrap
msgid "    $user->wasChanged(); // true\n"
"    $user->wasChanged('title'); // true\n"
"    $user->wasChanged('first_name'); // false\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 659
# File: docs/master/eloquent.md, line: 659
#. type: Plain text
msgid "The `getOriginal` method returns an array containing the original attributes of the model regardless of any changes to the model since it was retrieved. If needed, you may pass a specific attribute name to get the original value of a particular attribute:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 661
# File: docs/master/eloquent.md, line: 661
#. type: Plain text
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 664
# File: docs/master/eloquent.md, line: 664
#. type: Plain text
#, no-wrap
msgid "    $user->name; // John\n"
"    $user->email; // john@example.com\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 667
# File: docs/master/eloquent.md, line: 667
#. type: Plain text
#, no-wrap
msgid "    $user->name = \"Jack\";\n"
"    $user->name; // Jack\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 670
# File: docs/master/eloquent.md, line: 670
#. type: Plain text
#, no-wrap
msgid "    $user->getOriginal('name'); // John\n"
"    $user->getOriginal(); // Array of original attributes...\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 672
# File: docs/master/eloquent.md, line: 672
#. type: Plain text
#, no-wrap
msgid "<a name=\"mass-assignment\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 672
# File: docs/master/eloquent.md, line: 672
#. type: Title ###
#, no-wrap
msgid "Mass Assignment"
msgstr ""

# File: docs/8.x/eloquent.md, line: 675
# File: docs/master/eloquent.md, line: 675
#. type: Plain text
msgid "You may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 683
# File: docs/master/eloquent.md, line: 683
#. type: Plain text
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default."
msgstr ""

# File: docs/8.x/eloquent.md, line: 685
# File: docs/master/eloquent.md, line: 685
#. type: Plain text
msgid "A mass assignment vulnerability occurs when a user passes an unexpected HTTP request field and that field changes a column in your database that you did not expect. For example, a malicious user might send an `is_admin` parameter through an HTTP request, which is then passed to your model's `create` method, allowing the user to escalate themselves to an administrator."
msgstr ""

# File: docs/8.x/eloquent.md, line: 687
# File: docs/master/eloquent.md, line: 687
#. type: Plain text
msgid "So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the `$fillable` property on the model. For example, let's make the `name` attribute of our `Flight` model mass assignable:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 703
# File: docs/master/eloquent.md, line: 703
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that are mass assignable.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $fillable = ['name'];\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 705
# File: docs/master/eloquent.md, line: 705
#. type: Plain text
msgid "Once you have specified which attributes are mass assignable, you may use the `create` method to insert a new record in the database. The `create` method returns the newly created model instance:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 707
# File: docs/master/eloquent.md, line: 707
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::create(['name' => 'London to Paris']);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 709
# File: docs/master/eloquent.md, line: 709
#. type: Plain text
msgid "If you already have a model instance, you may use the `fill` method to populate it with an array of attributes:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 711
# File: docs/master/eloquent.md, line: 711
#. type: Plain text
#, no-wrap
msgid "    $flight->fill(['name' => 'Amsterdam to Frankfurt']);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 713
# File: docs/master/eloquent.md, line: 713
#. type: Plain text
#, no-wrap
msgid "<a name=\"mass-assignment-json-columns\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 713
# File: docs/master/eloquent.md, line: 713
#. type: Title ####
#, no-wrap
msgid "Mass Assignment & JSON Columns"
msgstr ""

# File: docs/8.x/eloquent.md, line: 716
# File: docs/master/eloquent.md, line: 716
#. type: Plain text
msgid "When assigning JSON columns, each column's mass assignable key must be specified in your model's `$fillable` array. For security, Laravel does not support updating nested JSON attributes when using the `guarded` property:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 725
# File: docs/master/eloquent.md, line: 725
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $fillable = [\n"
"        'options->enabled',\n"
"    ];\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 727
# File: docs/master/eloquent.md, line: 727
#. type: Plain text
#, no-wrap
msgid "<a name=\"allowing-mass-assignment\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 727
# File: docs/master/eloquent.md, line: 727
#. type: Title ####
#, no-wrap
msgid "Allowing Mass Assignment"
msgstr ""

# File: docs/8.x/eloquent.md, line: 730
# File: docs/master/eloquent.md, line: 730
#. type: Plain text
msgid "If you would like to make all of your attributes mass assignable, you may define your model's `$guarded` property as an empty array. If you choose to unguard your model, you should take special care to always hand-craft the arrays passed to Eloquent's `fill`, `create`, and `update` methods:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 737
# File: docs/master/eloquent.md, line: 737
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The attributes that aren't mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $guarded = [];\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 739
# File: docs/master/eloquent.md, line: 739
#. type: Plain text
#, no-wrap
msgid "<a name=\"upserts\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 739
# File: docs/master/eloquent.md, line: 739
#. type: Title ###
#, no-wrap
msgid "Upserts"
msgstr ""

# File: docs/8.x/eloquent.md, line: 742
# File: docs/master/eloquent.md, line: 742
#. type: Plain text
msgid "Occasionally, you may need to update an existing model or create a new model if no matching model exists. Like the `firstOrCreate` method, the `updateOrCreate` method persists the model, so there's no need to manually call the `save` method."
msgstr ""

# File: docs/8.x/eloquent.md, line: 744
# File: docs/master/eloquent.md, line: 744
#. type: Plain text
msgid "In the example below, if a flight exists with a `departure` location of `Oakland` and a `destination` location of `San Diego`, its `price` and `discounted` columns will be updated. If no such flight exists, a new flight will be created which has the attributes resulting from merging the first argument array with the second argument array:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 749
# File: docs/master/eloquent.md, line: 749
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::updateOrCreate(\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego'],\n"
"        ['price' => 99, 'discounted' => 1]\n"
"    );\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 751
# File: docs/master/eloquent.md, line: 751
#. type: Plain text
msgid "If you would like to perform multiple \"upserts\" in a single query, then you should use the `upsert` method instead. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of the columns that should be updated if a matching record already exists in the database. The `upsert` method will automatically set the `created_at` and `updated_at` timestamps if timestamps are enabled on the model:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 756
# File: docs/master/eloquent.md, line: 756
#. type: Plain text
#, no-wrap
msgid "    Flight::upsert([\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"    ], ['departure', 'destination'], ['price']);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 758
# File: docs/master/eloquent.md, line: 758
#. type: Plain text
#, no-wrap
msgid "<a name=\"deleting-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 758
# File: docs/master/eloquent.md, line: 758
#. type: Title ##
#, no-wrap
msgid "Deleting Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 761
# File: docs/master/eloquent.md, line: 761
#. type: Plain text
msgid "To delete a model, you may call the `delete` method on the model instance:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 767
# File: docs/master/eloquent.md, line: 767
#. type: Plain text
#, no-wrap
msgid "    $flight->delete();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 769
# File: docs/master/eloquent.md, line: 769
#. type: Plain text
msgid "You may call the `truncate` method to delete all of the model's associated database records. The `truncate` operation will also reset any auto-incrementing IDs on the model's associated table:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 771
# File: docs/master/eloquent.md, line: 771
#. type: Plain text
#, no-wrap
msgid "    Flight::truncate();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 773
# File: docs/master/eloquent.md, line: 773
#. type: Plain text
#, no-wrap
msgid "<a name=\"deleting-an-existing-model-by-its-primary-key\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 773
# File: docs/master/eloquent.md, line: 773
#. type: Title ####
#, no-wrap
msgid "Deleting An Existing Model By Its Primary Key"
msgstr ""

# File: docs/8.x/eloquent.md, line: 776
# File: docs/master/eloquent.md, line: 776
#. type: Plain text
msgid "In the example above, we are retrieving the model from the database before calling the `delete` method. However, if you know the primary key of the model, you may delete the model without explicitly retrieving it by calling the `destroy` method.  In addition to accepting the single primary key, the `destroy` method will accept multiple primary keys, an array of primary keys, or a [collection](/docs/{{version}}/collections) of primary keys:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 778
# File: docs/master/eloquent.md, line: 778
#. type: Plain text
#, no-wrap
msgid "    Flight::destroy(1);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 780
# File: docs/master/eloquent.md, line: 780
#. type: Plain text
#, no-wrap
msgid "    Flight::destroy(1, 2, 3);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 782
# File: docs/master/eloquent.md, line: 782
#. type: Plain text
#, no-wrap
msgid "    Flight::destroy([1, 2, 3]);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 784
# File: docs/master/eloquent.md, line: 784
#. type: Plain text
#, no-wrap
msgid "    Flight::destroy(collect([1, 2, 3]));\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 786
# File: docs/master/eloquent.md, line: 786
#. type: Plain text
#, no-wrap
msgid "> {note} The `destroy` method loads each model individually and calls the `delete` method so that the `deleting` and `deleted` events are properly dispatched for each model.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 788
# File: docs/master/eloquent.md, line: 788
#. type: Plain text
#, no-wrap
msgid "<a name=\"deleting-models-using-queries\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 788
# File: docs/master/eloquent.md, line: 788
#. type: Title ####
#, no-wrap
msgid "Deleting Models Using Queries"
msgstr ""

# File: docs/8.x/eloquent.md, line: 791
# File: docs/master/eloquent.md, line: 791
#. type: Plain text
msgid "Of course, you may build an Eloquent query to delete all models matching your query's criteria. In this example, we will delete all flights that are marked as inactive. Like mass updates, mass deletes will not dispatch model events for the models that are deleted:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 793
# File: docs/master/eloquent.md, line: 793
#. type: Plain text
#, no-wrap
msgid "    $deleted = Flight::where('active', 0)->delete();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 795
# File: docs/master/eloquent.md, line: 795
#. type: Plain text
#, no-wrap
msgid "> {note} When executing a mass delete statement via Eloquent, the `deleting` and `deleted` model events will not be dispatched for the deleted models. This is because the models are never actually retrieved when executing the delete statement.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 797
# File: docs/master/eloquent.md, line: 797
#. type: Plain text
#, no-wrap
msgid "<a name=\"soft-deleting\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 797
# File: docs/master/eloquent.md, line: 797
#. type: Title ###
#, no-wrap
msgid "Soft Deleting"
msgstr ""

# File: docs/8.x/eloquent.md, line: 800
# File: docs/master/eloquent.md, line: 800
#. type: Plain text
msgid "In addition to actually removing records from your database, Eloquent can also \"soft delete\" models. When models are soft deleted, they are not actually removed from your database. Instead, a `deleted_at` attribute is set on the model indicating the date and time at which the model was \"deleted\". To enable soft deletes for a model, add the `Illuminate\\Database\\Eloquent\\SoftDeletes` trait to the model:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 807
# File: docs/master/eloquent.md, line: 807
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\SoftDeletes;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 812
# File: docs/master/eloquent.md, line: 812
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        use SoftDeletes;\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 814
# File: docs/master/eloquent.md, line: 814
#. type: Plain text
#, no-wrap
msgid "> {tip} The `SoftDeletes` trait will automatically cast the `deleted_at` attribute to a `DateTime` / `Carbon` instance for you.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 816
# File: docs/master/eloquent.md, line: 816
#. type: Plain text
msgid "You should also add the `deleted_at` column to your database table. The Laravel [schema builder](/docs/{{version}}/migrations) contains a helper method to create this column:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 819
# File: docs/master/eloquent.md, line: 819
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 823
# File: docs/master/eloquent.md, line: 823
#. type: Plain text
#, no-wrap
msgid "    Schema::table('flights', function (Blueprint $table) {\n"
"        $table->softDeletes();\n"
"    });\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 827
# File: docs/master/eloquent.md, line: 827
#. type: Plain text
#, no-wrap
msgid "    Schema::table('flights', function (Blueprint $table) {\n"
"        $table->dropSoftDeletes();\n"
"    });\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 829
# File: docs/master/eloquent.md, line: 829
#. type: Plain text
msgid "Now, when you call the `delete` method on the model, the `deleted_at` column will be set to the current date and time. However, the model's database record will be left in the table. When querying a model that uses soft deletes, the soft deleted models will automatically be excluded from all query results."
msgstr ""

# File: docs/8.x/eloquent.md, line: 831
# File: docs/master/eloquent.md, line: 831
#. type: Plain text
msgid "To determine if a given model instance has been soft deleted, you may use the `trashed` method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 835
# File: docs/master/eloquent.md, line: 835
#. type: Plain text
#, no-wrap
msgid "    if ($flight->trashed()) {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 837
# File: docs/master/eloquent.md, line: 837
#. type: Plain text
#, no-wrap
msgid "<a name=\"restoring-soft-deleted-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 837
# File: docs/master/eloquent.md, line: 837
#. type: Title ####
#, no-wrap
msgid "Restoring Soft Deleted Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 840
# File: docs/master/eloquent.md, line: 840
#. type: Plain text
msgid "Sometimes you may wish to \"un-delete\" a soft deleted model. To restore a soft deleted model, you may call the `restore` method on a model instance. The `restore` method will set the model's `deleted_at` column to `null`:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 842
# File: docs/master/eloquent.md, line: 842
#. type: Plain text
#, no-wrap
msgid "    $flight->restore();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 844
# File: docs/master/eloquent.md, line: 844
#. type: Plain text
msgid "You may also use the `restore` method in a query to restore multiple models. Again, like other \"mass\" operations, this will not dispatch any model events for the models that are restored:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 848
# File: docs/master/eloquent.md, line: 848
#. type: Plain text
#, no-wrap
msgid "    Flight::withTrashed()\n"
"            ->where('airline_id', 1)\n"
"            ->restore();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 850
# File: docs/master/eloquent.md, line: 850
#. type: Plain text
msgid "The `restore` method may also be used when building [relationship](/docs/{{version}}/eloquent-relationships) queries:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 852
# File: docs/master/eloquent.md, line: 852
#. type: Plain text
#, no-wrap
msgid "    $flight->history()->restore();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 854
# File: docs/master/eloquent.md, line: 854
#. type: Plain text
#, no-wrap
msgid "<a name=\"permanently-deleting-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 854
# File: docs/master/eloquent.md, line: 854
#. type: Title ####
#, no-wrap
msgid "Permanently Deleting Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 857
# File: docs/master/eloquent.md, line: 857
#. type: Plain text
msgid "Sometimes you may need to truly remove a model from your database. You may use the `forceDelete` method to permanently remove a soft deleted model from the database table:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 859
# File: docs/master/eloquent.md, line: 859
#. type: Plain text
#, no-wrap
msgid "    $flight->forceDelete();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 861
# File: docs/master/eloquent.md, line: 861
#. type: Plain text
msgid "You may also use the `forceDelete` method when building Eloquent relationship queries:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 863
# File: docs/master/eloquent.md, line: 863
#. type: Plain text
#, no-wrap
msgid "    $flight->history()->forceDelete();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 865
# File: docs/master/eloquent.md, line: 865
#. type: Plain text
#, no-wrap
msgid "<a name=\"querying-soft-deleted-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 865
# File: docs/master/eloquent.md, line: 865
#. type: Title ###
#, no-wrap
msgid "Querying Soft Deleted Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 868
# File: docs/master/eloquent.md, line: 868
#. type: Plain text
#, no-wrap
msgid "<a name=\"including-soft-deleted-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 868
# File: docs/master/eloquent.md, line: 868
#. type: Title ####
#, no-wrap
msgid "Including Soft Deleted Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 871
# File: docs/master/eloquent.md, line: 871
#. type: Plain text
msgid "As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to be included in a query's results by calling the `withTrashed` method on the query:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 877
# File: docs/master/eloquent.md, line: 877
#. type: Plain text
#, no-wrap
msgid "    $flights = Flight::withTrashed()\n"
"                    ->where('account_id', 1)\n"
"                    ->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 879
# File: docs/master/eloquent.md, line: 879
#. type: Plain text
msgid "The `withTrashed` method may also be called when building a [relationship](/docs/{{version}}/eloquent-relationships) query:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 881
# File: docs/master/eloquent.md, line: 881
#. type: Plain text
#, no-wrap
msgid "    $flight->history()->withTrashed()->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 883
# File: docs/master/eloquent.md, line: 883
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-only-soft-deleted-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 883
# File: docs/master/eloquent.md, line: 883
#. type: Title ####
#, no-wrap
msgid "Retrieving Only Soft Deleted Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 886
# File: docs/master/eloquent.md, line: 886
#. type: Plain text
msgid "The `onlyTrashed` method will retrieve **only** soft deleted models:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 890
# File: docs/master/eloquent.md, line: 890
#. type: Plain text
#, no-wrap
msgid "    $flights = Flight::onlyTrashed()\n"
"                    ->where('airline_id', 1)\n"
"                    ->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 892
# File: docs/master/eloquent.md, line: 892
#. type: Plain text
#, no-wrap
msgid "<a name=\"pruning-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 892
# File: docs/master/eloquent.md, line: 892
#. type: Title ##
#, no-wrap
msgid "Pruning Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 895
# File: docs/master/eloquent.md, line: 895
#. type: Plain text
msgid "Sometimes you may want to periodically delete models that are no longer needed. To accomplish this, you may add the `Illuminate\\Database\\Eloquent\\Prunable` or `Illuminate\\Database\\Eloquent\\MassPrunable` trait to the models you would like to periodically prune. After adding one of the traits to the model, implement a `prunable` method which returns an Eloquent query builder that resolves the models that are no longer needed:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 902
# File: docs/master/eloquent.md, line: 902
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\Prunable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 906
# File: docs/master/eloquent.md, line: 906
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        use Prunable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 917
# File: docs/8.x/eloquent.md, line: 987
# File: docs/master/eloquent.md, line: 917
# File: docs/master/eloquent.md, line: 987
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Get the prunable model query.\n"
"         *\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function prunable()\n"
"        {\n"
"            return static::where('created_at', '<=', now()->subMonth());\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 919
# File: docs/master/eloquent.md, line: 919
#. type: Plain text
msgid "When marking models as `Prunable`, you may also define a `pruning` method on the model. This method will be called before the model is deleted. This method can be useful for deleting any additional resources associated with the model, such as stored files, before the model is permanently removed from the database:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 929
# File: docs/master/eloquent.md, line: 929
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Prepare the model for pruning.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function pruning()\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 931
# File: docs/master/eloquent.md, line: 931
#. type: Plain text
msgid "After configuring your prunable model, you should schedule the `model:prune` Artisan command in your application's `App\\Console\\Kernel` class. You are free to choose the appropriate interval at which this command should be run:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 942
# File: docs/master/eloquent.md, line: 942
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->command('model:prune')->daily();\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 944
# File: docs/master/eloquent.md, line: 944
#. type: Plain text
msgid "Behind the scenes, the `model:prune` command will automatically detect \"Prunable\" models within your application's `app/Models` directory. If your models are in a different location, you may use the `--model` option to specify the model class names:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 948
# File: docs/master/eloquent.md, line: 948
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('model:prune', [\n"
"        '--model' => [Address::class, Flight::class],\n"
"    ])->daily();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 950
# File: docs/master/eloquent.md, line: 950
#. type: Plain text
msgid "If you wish to exclude certain models from being pruned while pruning all other detected models, you may use the `--except` option:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 954
# File: docs/master/eloquent.md, line: 954
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('model:prune', [\n"
"        '--except' => [Address::class, Flight::class],\n"
"    ])->daily();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 956
# File: docs/master/eloquent.md, line: 956
#. type: Plain text
msgid "You may test your `prunable` query by executing the `model:prune` command with the `--pretend` option. When pretending, the `model:prune` command will simply report how many records would be pruned if the command were to actually run:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 958
# File: docs/master/eloquent.md, line: 958
#. type: Plain text
#, no-wrap
msgid "    php artisan model:prune --pretend\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 960
# File: docs/master/eloquent.md, line: 960
#. type: Plain text
#, no-wrap
msgid "> {note} Soft deleting models will be permanently deleted (`forceDelete`) if they match the prunable query.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 962
# File: docs/master/eloquent.md, line: 962
#. type: Plain text
#, no-wrap
msgid "<a name=\"mass-pruning\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 962
# File: docs/master/eloquent.md, line: 962
#. type: Title ####
#, no-wrap
msgid "Mass Pruning"
msgstr ""

# File: docs/8.x/eloquent.md, line: 965
# File: docs/master/eloquent.md, line: 965
#. type: Plain text
msgid "When models are marked with the `Illuminate\\Database\\Eloquent\\MassPrunable` trait, models are deleted from the database using mass-deletion queries. Therefore, the `pruning` method will not be invoked, nor will the `deleting` and `deleted` model events be dispatched. This is because the models are never actually retrieved before deletion, thus making the pruning process much more efficient:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 972
# File: docs/master/eloquent.md, line: 972
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\MassPrunable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 976
# File: docs/master/eloquent.md, line: 976
#. type: Plain text
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        use MassPrunable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 989
# File: docs/master/eloquent.md, line: 989
#. type: Plain text
#, no-wrap
msgid "<a name=\"replicating-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 989
# File: docs/master/eloquent.md, line: 989
#. type: Title ##
#, no-wrap
msgid "Replicating Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 992
# File: docs/master/eloquent.md, line: 992
#. type: Plain text
msgid "You may create an unsaved copy of an existing model instance using the `replicate` method. This method is particularly useful when you have model instances that share many of the same attributes:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 994
# File: docs/master/eloquent.md, line: 994
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Address;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1002
# File: docs/master/eloquent.md, line: 1002
#. type: Plain text
#, no-wrap
msgid "    $shipping = Address::create([\n"
"        'type' => 'shipping',\n"
"        'line_1' => '123 Example Street',\n"
"        'city' => 'Victorville',\n"
"        'state' => 'CA',\n"
"        'postcode' => '90001',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1006
# File: docs/master/eloquent.md, line: 1006
#. type: Plain text
#, no-wrap
msgid "    $billing = $shipping->replicate()->fill([\n"
"        'type' => 'billing'\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1008
# File: docs/master/eloquent.md, line: 1008
#. type: Plain text
#, no-wrap
msgid "    $billing->save();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1010
# File: docs/master/eloquent.md, line: 1010
#. type: Plain text
msgid "To exclude one or more attributes from being replicated to the new model, you may pass an array to the `replicate` method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1017
# File: docs/master/eloquent.md, line: 1017
#. type: Plain text
#, no-wrap
msgid "    $flight = Flight::create([\n"
"        'destination' => 'LAX',\n"
"        'origin' => 'LHR',\n"
"        'last_flown' => '2020-03-04 11:00:00',\n"
"        'last_pilot_id' => 747,\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1022
# File: docs/master/eloquent.md, line: 1022
#. type: Plain text
#, no-wrap
msgid "    $flight = $flight->replicate([\n"
"        'last_flown',\n"
"        'last_pilot_id'\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1024
# File: docs/master/eloquent.md, line: 1024
#. type: Plain text
#, no-wrap
msgid "<a name=\"query-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1024
# File: docs/master/eloquent.md, line: 1024
#. type: Title ##
#, no-wrap
msgid "Query Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1027
# File: docs/master/eloquent.md, line: 1027
#. type: Plain text
#, no-wrap
msgid "<a name=\"global-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1027
# File: docs/master/eloquent.md, line: 1027
#. type: Title ###
#, no-wrap
msgid "Global Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1030
# File: docs/master/eloquent.md, line: 1030
#. type: Plain text
msgid "Global scopes allow you to add constraints to all queries for a given model. Laravel's own [soft delete](#soft-deleting) functionality utilizes global scopes to only retrieve \"non-deleted\" models from the database. Writing your own global scopes can provide a convenient, easy way to make sure every query for a given model receives certain constraints."
msgstr ""

# File: docs/8.x/eloquent.md, line: 1032
# File: docs/master/eloquent.md, line: 1032
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-global-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1032
# File: docs/master/eloquent.md, line: 1032
#. type: Title ####
#, no-wrap
msgid "Writing Global Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1035
# File: docs/master/eloquent.md, line: 1035
#. type: Plain text
msgid "Writing a global scope is simple. First, define a class that implements the `Illuminate\\Database\\Eloquent\\Scope` interface. Laravel does not have a conventional location that you should place scope classes, so you are free to place this class in any directory that you wish."
msgstr ""

# File: docs/8.x/eloquent.md, line: 1037
# File: docs/master/eloquent.md, line: 1037
#. type: Plain text
msgid "The `Scope` interface requires you to implement one method: `apply`. The `apply` method may add `where` constraints or other types of clauses to the query as needed:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1041
# File: docs/master/eloquent.md, line: 1041
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Scopes;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1045
# File: docs/master/eloquent.md, line: 1045
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\Scope;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1060
# File: docs/master/eloquent.md, line: 1060
#. type: Plain text
#, no-wrap
msgid "    class AncientScope implements Scope\n"
"    {\n"
"        /**\n"
"         * Apply the scope to a given Eloquent query builder.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @return void\n"
"         */\n"
"        public function apply(Builder $builder, Model $model)\n"
"        {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1062
# File: docs/master/eloquent.md, line: 1062
#. type: Plain text
#, no-wrap
msgid "> {tip} If your global scope is adding columns to the select clause of the query, you should use the `addSelect` method instead of `select`. This will prevent the unintentional replacement of the query's existing select clause.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1064
# File: docs/master/eloquent.md, line: 1064
#. type: Plain text
#, no-wrap
msgid "<a name=\"applying-global-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1064
# File: docs/master/eloquent.md, line: 1064
#. type: Title ####
#, no-wrap
msgid "Applying Global Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1067
# File: docs/master/eloquent.md, line: 1067
#. type: Plain text
msgid "To assign a global scope to a model, you should override the model's `booted` method and invoke the model's `addGlobalScope` method. The `addGlobalScope` method accepts an instance of your scope as its only argument:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1074
# File: docs/master/eloquent.md, line: 1074
#. type: Plain text
#, no-wrap
msgid "    use App\\Scopes\\AncientScope;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1087
# File: docs/master/eloquent.md, line: 1087
#. type: Plain text
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::addGlobalScope(new AncientScope);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1089
# File: docs/master/eloquent.md, line: 1089
#. type: Plain text
msgid "After adding the scope in the example above to the `App\\Models\\User` model, a call to the `User::all()` method will execute the following SQL query:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1090
# File: docs/master/eloquent.md, line: 1090
#. type: Code fence info string
#, no-wrap
msgid "sql"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1090
# File: docs/master/eloquent.md, line: 1090
#. type: Plain text
#, no-wrap
msgid "select * from `users` where `created_at` < 0021-02-18 00:00:00\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1095
# File: docs/master/eloquent.md, line: 1095
#. type: Plain text
#, no-wrap
msgid "<a name=\"anonymous-global-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1095
# File: docs/master/eloquent.md, line: 1095
#. type: Title ####
#, no-wrap
msgid "Anonymous Global Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1098
# File: docs/master/eloquent.md, line: 1098
#. type: Plain text
msgid "Eloquent also allows you to define global scopes using closures, which is particularly useful for simple scopes that do not warrant a separate class of their own. When defining a global scope using a closure, you should provide a scope name of your own choosing as the first argument to the `addGlobalScope` method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1105
# File: docs/master/eloquent.md, line: 1105
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1120
# File: docs/master/eloquent.md, line: 1120
#. type: Plain text
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::addGlobalScope('ancient', function (Builder $builder) {\n"
"                $builder->where('created_at', '<', now()->subYears(2000));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1122
# File: docs/master/eloquent.md, line: 1122
#. type: Plain text
#, no-wrap
msgid "<a name=\"removing-global-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1122
# File: docs/master/eloquent.md, line: 1122
#. type: Title ####
#, no-wrap
msgid "Removing Global Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1125
# File: docs/master/eloquent.md, line: 1125
#. type: Plain text
msgid "If you would like to remove a global scope for a given query, you may use the `withoutGlobalScope` method. This method accepts the class name of the global scope as its only argument:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1127
# File: docs/master/eloquent.md, line: 1127
#. type: Plain text
#, no-wrap
msgid "    User::withoutGlobalScope(AncientScope::class)->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1129
# File: docs/master/eloquent.md, line: 1129
#. type: Plain text
msgid "Or, if you defined the global scope using a closure, you should pass the string name that you assigned to the global scope:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1131
# File: docs/master/eloquent.md, line: 1131
#. type: Plain text
#, no-wrap
msgid "    User::withoutGlobalScope('ancient')->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1133
# File: docs/master/eloquent.md, line: 1133
#. type: Plain text
msgid "If you would like to remove several or even all of the query's global scopes, you may use the `withoutGlobalScopes` method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1136
# File: docs/master/eloquent.md, line: 1136
#. type: Plain text
#, no-wrap
msgid "    // Remove all of the global scopes...\n"
"    User::withoutGlobalScopes()->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1141
# File: docs/master/eloquent.md, line: 1141
#. type: Plain text
#, no-wrap
msgid "    // Remove some of the global scopes...\n"
"    User::withoutGlobalScopes([\n"
"        FirstScope::class, SecondScope::class\n"
"    ])->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1143
# File: docs/master/eloquent.md, line: 1143
#. type: Plain text
#, no-wrap
msgid "<a name=\"local-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1143
# File: docs/master/eloquent.md, line: 1143
#. type: Title ###
#, no-wrap
msgid "Local Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1146
# File: docs/master/eloquent.md, line: 1146
#. type: Plain text
msgid "Local scopes allow you to define common sets of query constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`."
msgstr ""

# File: docs/8.x/eloquent.md, line: 1148
# File: docs/master/eloquent.md, line: 1148
#. type: Plain text
msgid "Scopes should always return the same query builder instance or `void`:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1167
# File: docs/master/eloquent.md, line: 1167
#. type: Plain text
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Scope a query to only include popular users.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopePopular($query)\n"
"        {\n"
"            return $query->where('votes', '>', 100);\n"
"        }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1179
# File: docs/master/eloquent.md, line: 1179
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Scope a query to only include active users.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @return void\n"
"         */\n"
"        public function scopeActive($query)\n"
"        {\n"
"            $query->where('active', 1);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1181
# File: docs/master/eloquent.md, line: 1181
#. type: Plain text
#, no-wrap
msgid "<a name=\"utilizing-a-local-scope\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1181
# File: docs/master/eloquent.md, line: 1181
#. type: Title ####
#, no-wrap
msgid "Utilizing A Local Scope"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1184
# File: docs/master/eloquent.md, line: 1184
#. type: Plain text
msgid "Once the scope has been defined, you may call the scope methods when querying the model. However, you should not include the `scope` prefix when calling the method. You can even chain calls to various scopes:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1188
# File: docs/master/eloquent.md, line: 1188
#. type: Plain text
#, no-wrap
msgid "    $users = User::popular()->active()->orderBy('created_at')->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1190
# File: docs/master/eloquent.md, line: 1190
#. type: Plain text
msgid "Combining multiple Eloquent model scopes via an `or` query operator may require the use of closures to achieve the correct [logical grouping](/docs/{{version}}/queries#logical-grouping):"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1194
# File: docs/master/eloquent.md, line: 1194
#. type: Plain text
#, no-wrap
msgid "    $users = User::popular()->orWhere(function (Builder $query) {\n"
"        $query->active();\n"
"    })->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1196
# File: docs/master/eloquent.md, line: 1196
#. type: Plain text
msgid "However, since this can be cumbersome, Laravel provides a \"higher order\" `orWhere` method that allows you to fluently chain scopes together without the use of closures:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1198
# File: docs/master/eloquent.md, line: 1198
#. type: Plain text
#, no-wrap
msgid "    $users = App\\Models\\User::popular()->orWhere->active()->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1200
# File: docs/master/eloquent.md, line: 1200
#. type: Plain text
#, no-wrap
msgid "<a name=\"dynamic-scopes\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1200
# File: docs/master/eloquent.md, line: 1200
#. type: Title ####
#, no-wrap
msgid "Dynamic Scopes"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1203
# File: docs/master/eloquent.md, line: 1203
#. type: Plain text
msgid "Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope method's signature. Scope parameters should be defined after the `$query` parameter:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1224
# File: docs/master/eloquent.md, line: 1224
#. type: Plain text
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Scope a query to only include users of a given type.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @param  mixed  $type\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopeOfType($query, $type)\n"
"        {\n"
"            return $query->where('type', $type);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1226
# File: docs/master/eloquent.md, line: 1226
#. type: Plain text
msgid "Once the expected arguments have been added to your scope method's signature, you may pass the arguments when calling the scope:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1228
# File: docs/master/eloquent.md, line: 1228
#. type: Plain text
#, no-wrap
msgid "    $users = User::ofType('admin')->get();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1230
# File: docs/master/eloquent.md, line: 1230
#. type: Plain text
#, no-wrap
msgid "<a name=\"comparing-models\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1230
# File: docs/master/eloquent.md, line: 1230
#. type: Title ##
#, no-wrap
msgid "Comparing Models"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1233
# File: docs/master/eloquent.md, line: 1233
#. type: Plain text
msgid "Sometimes you may need to determine if two models are the \"same\" or not. The `is` and `isNot` methods may be used to quickly verify two models have the same primary key, table, and database connection or not:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1237
# File: docs/master/eloquent.md, line: 1237
#. type: Plain text
#, no-wrap
msgid "    if ($post->is($anotherPost)) {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1241
# File: docs/master/eloquent.md, line: 1241
#. type: Plain text
#, no-wrap
msgid "    if ($post->isNot($anotherPost)) {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1243
# File: docs/master/eloquent.md, line: 1243
#. type: Plain text
msgid "The `is` and `isNot` methods are also available when using the `belongsTo`, `hasOne`, `morphTo`, and `morphOne` [relationships](/docs/{{version}}/eloquent-relationships). This method is particularly helpful when you would like to compare a related model without issuing a query to retrieve that model:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1247
# File: docs/master/eloquent.md, line: 1247
#. type: Plain text
#, no-wrap
msgid "    if ($post->author()->is($user)) {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1249
# File: docs/master/eloquent.md, line: 1249
#. type: Plain text
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1249
# File: docs/master/eloquent.md, line: 1249
#. type: Title ##
#, no-wrap
msgid "Events"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1252
# File: docs/master/eloquent.md, line: 1252
#. type: Plain text
#, no-wrap
msgid "> {tip} Want to broadcast your Eloquent events directly to your client-side application? Check out Laravel's [model event broadcasting](/docs/{{version}}/broadcasting#model-broadcasting).\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1254
# File: docs/master/eloquent.md, line: 1254
#. type: Plain text
msgid "Eloquent models dispatch several events, allowing you to hook into the following moments in a model's lifecycle: `retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `restoring`, `restored`, and `replicating`."
msgstr ""

# File: docs/8.x/eloquent.md, line: 1256
# File: docs/master/eloquent.md, line: 1256
#. type: Plain text
msgid "The `retrieved` event will dispatch when an existing model is retrieved from the database. When a new model is saved for the first time, the `creating` and `created` events will dispatch. The `updating` / `updated` events will dispatch when an existing model is modified and the `save` method is called. The `saving` / `saved` events will dispatch when a model is created or updated - even if the model's attributes have not been changed. Event names ending with `-ing` are dispatched before any changes to the model are persisted, while events ending with `-ed` are dispatched after the changes to the model are persisted."
msgstr ""

# File: docs/8.x/eloquent.md, line: 1258
# File: docs/master/eloquent.md, line: 1258
#. type: Plain text
msgid "To start listening to model events, define a `$dispatchesEvents` property on your Eloquent model. This property maps various points of the Eloquent model's lifecycle to your own [event classes](/docs/{{version}}/events). Each model event class should expect to receive an instance of the affected model via its constructor:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1266
# File: docs/master/eloquent.md, line: 1266
#. type: Plain text
#, no-wrap
msgid "    use App\\Events\\UserDeleted;\n"
"    use App\\Events\\UserSaved;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1270
# File: docs/master/eloquent.md, line: 1270
#. type: Plain text
#, no-wrap
msgid "    class User extends Authenticatable\n"
"    {\n"
"        use Notifiable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1281
# File: docs/master/eloquent.md, line: 1281
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * The event map for the model.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $dispatchesEvents = [\n"
"            'saved' => UserSaved::class,\n"
"            'deleted' => UserDeleted::class,\n"
"        ];\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1283
# File: docs/master/eloquent.md, line: 1283
#. type: Plain text
msgid "After defining and mapping your Eloquent events, you may use [event listeners](/docs/{{version}}/events#defining-listeners) to handle the events."
msgstr ""

# File: docs/8.x/eloquent.md, line: 1285
# File: docs/master/eloquent.md, line: 1285
#. type: Plain text
#, no-wrap
msgid "> {note} When issuing a mass update or delete query via Eloquent, the `saved`, `updated`, `deleting`, and `deleted` model events will not be dispatched for the affected models. This is because the models are never actually retrieved when performing mass updates or deletes.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1287
# File: docs/master/eloquent.md, line: 1287
#. type: Plain text
#, no-wrap
msgid "<a name=\"events-using-closures\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1287
# File: docs/master/eloquent.md, line: 1287
#. type: Title ###
#, no-wrap
msgid "Using Closures"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1290
# File: docs/master/eloquent.md, line: 1290
#. type: Plain text
msgid "Instead of using custom event classes, you may register closures that execute when various model events are dispatched. Typically, you should register these closures in the `booted` method of your model:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1311
# File: docs/master/eloquent.md, line: 1311
#. type: Plain text
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::created(function ($user) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1313
# File: docs/master/eloquent.md, line: 1313
#. type: Plain text
msgid "If needed, you may utilize [queueable anonymous event listeners](/docs/{{version}}/events#queuable-anonymous-event-listeners) when registering model events. This will instruct Laravel to execute the model event listener in the background using your application's [queue](/docs/{{version}}/queues):"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1315
# File: docs/master/eloquent.md, line: 1315
#. type: Plain text
#, no-wrap
msgid "    use function Illuminate\\Events\\queueable;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1319
# File: docs/master/eloquent.md, line: 1319
#. type: Plain text
#, no-wrap
msgid "    static::created(queueable(function ($user) {\n"
"        //\n"
"    }));\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1321
# File: docs/master/eloquent.md, line: 1321
#. type: Plain text
#, no-wrap
msgid "<a name=\"observers\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1321
# File: docs/master/eloquent.md, line: 1321
#. type: Title ###
#, no-wrap
msgid "Observers"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1324
# File: docs/master/eloquent.md, line: 1324
#. type: Plain text
#, no-wrap
msgid "<a name=\"defining-observers\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1324
# File: docs/master/eloquent.md, line: 1324
#. type: Title ####
#, no-wrap
msgid "Defining Observers"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1327
# File: docs/master/eloquent.md, line: 1327
#. type: Plain text
msgid "If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observer classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the affected model as their only argument. The `make:observer` Artisan command is the easiest way to create a new observer class:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1329
# File: docs/master/eloquent.md, line: 1329
#. type: Plain text
#, no-wrap
msgid "    php artisan make:observer UserObserver --model=User\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1331
# File: docs/master/eloquent.md, line: 1331
#. type: Plain text
msgid "This command will place the new observer in your `App/Observers` directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1335
# File: docs/8.x/eloquent.md, line: 1410
# File: docs/master/eloquent.md, line: 1335
# File: docs/master/eloquent.md, line: 1424
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Observers;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1350
# File: docs/master/eloquent.md, line: 1350
#. type: Plain text
#, no-wrap
msgid "    class UserObserver\n"
"    {\n"
"        /**\n"
"         * Handle the User \"created\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function created(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1361
# File: docs/master/eloquent.md, line: 1361
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"updated\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function updated(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1372
# File: docs/master/eloquent.md, line: 1372
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"deleted\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function deleted(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1384
# File: docs/master/eloquent.md, line: 1384
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"forceDeleted\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function forceDeleted(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1386
# File: docs/master/eloquent.md, line: 1386
#. type: Plain text
msgid "To register an observer, you need to call the `observe` method on the model you wish to observe. You may register observers in the `boot` method of your application's `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1389
# File: docs/master/eloquent.md, line: 1389
# File: docs/master/eloquent.md, line: 1404
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Observers\\UserObserver;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1399
# File: docs/master/eloquent.md, line: 1399
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register any events for your application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        User::observe(UserObserver::class);\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1401
# File: docs/master/eloquent.md, line: 1415
#. type: Plain text
#, no-wrap
msgid "> {tip} There are additional events an observer can listen to, such as `saving` and `retrieved`. These events are described within the [events](#events) documentation.\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1403
# File: docs/master/eloquent.md, line: 1417
#. type: Plain text
#, no-wrap
msgid "<a name=\"observers-and-database-transactions\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1403
# File: docs/master/eloquent.md, line: 1417
#. type: Title ####
#, no-wrap
msgid "Observers & Database Transactions"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1406
# File: docs/master/eloquent.md, line: 1420
#. type: Plain text
msgid "When models are being created within a database transaction, you may want to instruct an observer to only execute its event handlers after the database transaction is committed. You may accomplish this by defining an `$afterCommit` property on the observer. If a database transaction is not in progress, the event handlers will execute immediately:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1421
# File: docs/master/eloquent.md, line: 1435
#. type: Plain text
#, no-wrap
msgid "    class UserObserver\n"
"    {\n"
"        /**\n"
"         * Handle events after all transactions are committed.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $afterCommit = true;\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1433
# File: docs/master/eloquent.md, line: 1447
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"created\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function created(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1435
# File: docs/master/eloquent.md, line: 1449
#. type: Plain text
#, no-wrap
msgid "<a name=\"muting-events\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1435
# File: docs/master/eloquent.md, line: 1449
#. type: Title ###
#, no-wrap
msgid "Muting Events"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1438
# File: docs/master/eloquent.md, line: 1452
#. type: Plain text
msgid "You may occasionally need to temporarily \"mute\" all events fired by a model. You may achieve this using the `withoutEvents` method. The `withoutEvents` method accepts a closure as its only argument. Any code executed within this closure will not dispatch model events, and any value returned by the closure will be returned by the `withoutEvents` method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1443
# File: docs/master/eloquent.md, line: 1457
#. type: Plain text
#, no-wrap
msgid "    $user = User::withoutEvents(function () use () {\n"
"        User::findOrFail(1)->delete();\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1446
# File: docs/master/eloquent.md, line: 1460
#. type: Plain text
#, no-wrap
msgid "        return User::find(2);\n"
"    });\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1448
# File: docs/master/eloquent.md, line: 1462
#. type: Plain text
#, no-wrap
msgid "<a name=\"saving-a-single-model-without-events\"></a>\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1448
# File: docs/master/eloquent.md, line: 1462
#. type: Title ####
#, no-wrap
msgid "Saving A Single Model Without Events"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1451
# File: docs/master/eloquent.md, line: 1465
#. type: Plain text
msgid "Sometimes you may wish to \"save\" a given model without dispatching any events. You may accomplish this using the `saveQuietly` method:"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1453
# File: docs/master/eloquent.md, line: 1467
#. type: Plain text
#, no-wrap
msgid "    $user = User::findOrFail(1);\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1455
# File: docs/master/eloquent.md, line: 1469
#. type: Plain text
#, no-wrap
msgid "    $user->name = 'Victoria Faith';\n"
msgstr ""

# File: docs/8.x/eloquent.md, line: 1456
# File: docs/master/eloquent.md, line: 1470
#. type: Plain text
#, no-wrap
msgid "    $user->saveQuietly();\n"
msgstr ""

# File: docs/master/eloquent.md, line: 38
#. type: Plain text
#, no-wrap
msgid "- [Eloquent Model Conventions](#eloquent-model-conventions)\n"
"    - [Table Names](#table-names)\n"
"    - [Primary Keys](#primary-keys)\n"
"    - [Timestamps](#timestamps)\n"
"    - [Database Connections](#database-connections)\n"
"    - [Default Attribute Values](#default-attribute-values)\n"
"- [Retrieving Models](#retrieving-models)\n"
"    - [Collections](#collections)\n"
"    - [Chunking Results](#chunking-results)\n"
"    - [Chunk Using Lazy Collections](#chunking-using-lazy-collections)\n"
"    - [Cursors](#cursors)\n"
"    - [Advanced Subqueries](#advanced-subqueries)\n"
"- [Retrieving Single Models / Aggregates](#retrieving-single-models)\n"
"    - [Retrieving Or Creating Models](#retrieving-or-creating-models)\n"
"    - [Retrieving Aggregates](#retrieving-aggregates)\n"
"- [Inserting & Updating Models](#inserting-and-updating-models)\n"
"    - [Inserts](#inserts)\n"
"    - [Updates](#updates)\n"
"    - [Mass Assignment](#mass-assignment)\n"
"    - [Upserts](#upserts)\n"
"- [Deleting Models](#deleting-models)\n"
"    - [Soft Deleting](#soft-deleting)\n"
"    - [Querying Soft Deleted Models](#querying-soft-deleted-models)\n"
"- [Pruning Models](#pruning-models)\n"
"- [Replicating Models](#replicating-models)\n"
"- [Query Scopes](#query-scopes)\n"
"    - [Global Scopes](#global-scopes)\n"
"    - [Local Scopes](#local-scopes)\n"
"- [Comparing Models](#comparing-models)\n"
"- [Events](#events)\n"
"    - [Using Closures](#events-using-closures)\n"
"    - [Observers](#observers)\n"
"    - [Muting Events](#muting-events)\n"
msgstr ""

# File: docs/master/eloquent.md, line: 371
#. type: Plain text
#, no-wrap
msgid "<a name=\"chunking-using-lazy-collections\"></a>\n"
msgstr ""

# File: docs/master/eloquent.md, line: 371
#. type: Title ###
#, no-wrap
msgid "Chunking Using Lazy Collections"
msgstr ""

# File: docs/master/eloquent.md, line: 1401
#. type: Plain text
msgid "Alternatively, you may list your observers within an `$observers` property of your applications' `App\\Providers\\EventServiceProvider` class:"
msgstr ""

# File: docs/master/eloquent.md, line: 1413
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The model observers for your application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $observers = [\n"
"        User::class => [UserObserver::class],\n"
"    ];\n"
msgstr ""

