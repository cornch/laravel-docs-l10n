# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"#-#-#-#-#  csrf.pot (Laravel Documentation VERSION)  #-#-#-#-#\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"#-#-#-#-#  csrf.pot (Laravel Documentation VERSION)  #-#-#-#-#\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"#-#-#-#-#  csrf.pot (Laravel Documentation VERSION)  #-#-#-#-#\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/csrf.md, line: 1
# File: docs/9.x/csrf.md, line: 1
# File: docs/master/csrf.md, line: 1
#, no-wrap
msgid "CSRF Protection"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/csrf.md, line: 8
# File: docs/9.x/csrf.md, line: 8
# File: docs/master/csrf.md, line: 8
msgid "[Introduction](#csrf-introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 8
# File: docs/9.x/csrf.md, line: 8
# File: docs/master/csrf.md, line: 8
#, no-wrap
msgid ""
"- [Preventing CSRF Requests](#preventing-csrf-requests)\n"
"    - [Excluding URIs](#csrf-excluding-uris)\n"
"- [X-CSRF-Token](#csrf-x-csrf-token)\n"
"- [X-XSRF-Token](#csrf-x-xsrf-token)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 10
# File: docs/9.x/csrf.md, line: 10
# File: docs/master/csrf.md, line: 10
#, no-wrap
msgid "<a name=\"csrf-introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/csrf.md, line: 10
# File: docs/9.x/csrf.md, line: 10
# File: docs/master/csrf.md, line: 10
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 13
# File: docs/9.x/csrf.md, line: 13
# File: docs/master/csrf.md, line: 13
msgid "Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user. Thankfully, Laravel makes it easy to protect your application from [cross-site request forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) attacks."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 15
# File: docs/9.x/csrf.md, line: 15
# File: docs/master/csrf.md, line: 15
#, no-wrap
msgid "<a name=\"csrf-explanation\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/csrf.md, line: 15
# File: docs/9.x/csrf.md, line: 15
# File: docs/master/csrf.md, line: 15
#, no-wrap
msgid "An Explanation Of The Vulnerability"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 18
# File: docs/9.x/csrf.md, line: 18
# File: docs/master/csrf.md, line: 18
msgid "In case you're not familiar with cross-site request forgeries, let's discuss an example of how this vulnerability can be exploited. Imagine your application has a `/user/email` route that accepts a `POST` request to change the authenticated user's email address. Most likely, this route expects an `email` input field to contain the email address the user would like to begin using."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 20
# File: docs/9.x/csrf.md, line: 20
# File: docs/master/csrf.md, line: 20
msgid "Without CSRF protection, a malicious website could create an HTML form that points to your application's `/user/email` route and submits the malicious user's own email address:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 24
#, no-wrap
msgid ""
"    <form action=\"https://your-application.com/user/email\" method=\"POST\">\n"
"        <input type=\"email\" value=\"malicious-email@example.com\">\n"
"    </form>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 28
#, no-wrap
msgid ""
"    <script>\n"
"        document.forms[0].submit();\n"
"    </script>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 30
# File: docs/9.x/csrf.md, line: 32
# File: docs/master/csrf.md, line: 32
#, no-wrap
msgid " If the malicious website automatically submits the form when the page is loaded, the malicious user only needs to lure an unsuspecting user of your application to visit their website and their email address will be changed in your application.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 32
# File: docs/9.x/csrf.md, line: 34
# File: docs/master/csrf.md, line: 34
#, no-wrap
msgid " To prevent this vulnerability, we need to inspect every incoming `POST`, `PUT`, `PATCH`, or `DELETE` request for a secret session value that the malicious application is unable to access.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 34
# File: docs/9.x/csrf.md, line: 36
# File: docs/master/csrf.md, line: 36
#, no-wrap
msgid "<a name=\"preventing-csrf-requests\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/csrf.md, line: 34
# File: docs/9.x/csrf.md, line: 36
# File: docs/master/csrf.md, line: 36
#, no-wrap
msgid "Preventing CSRF Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 37
# File: docs/9.x/csrf.md, line: 39
# File: docs/master/csrf.md, line: 39
msgid "Laravel automatically generates a CSRF \"token\" for each active [user session](/docs/{{version}}/session) managed by the application. This token is used to verify that the authenticated user is the person actually making the requests to the application. Since this token is stored in the user's session and changes each time the session is regenerated, a malicious application is unable to access it."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 39
# File: docs/9.x/csrf.md, line: 41
# File: docs/master/csrf.md, line: 41
msgid "The current session's CSRF token can be accessed via the request's session or via the `csrf_token` helper function:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 41
# File: docs/9.x/csrf.md, line: 43
# File: docs/master/csrf.md, line: 43
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 44
# File: docs/9.x/csrf.md, line: 46
# File: docs/master/csrf.md, line: 46
#, no-wrap
msgid ""
"    Route::get('/token', function (Request $request) {\n"
"        $token = $request->session()->token();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 46
# File: docs/9.x/csrf.md, line: 48
# File: docs/master/csrf.md, line: 48
#, no-wrap
msgid "        $token = csrf_token();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 49
# File: docs/9.x/csrf.md, line: 51
# File: docs/master/csrf.md, line: 51
#, no-wrap
msgid ""
"        // ...\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 51
# File: docs/9.x/csrf.md, line: 53
# File: docs/master/csrf.md, line: 53
msgid "Anytime you define a \"POST\", \"PUT\", \"PATCH\", or \"DELETE\" HTML form in your application, you should include a hidden CSRF `_token` field in the form so that the CSRF protection middleware can validate the request. For convenience, you may use the `@csrf` Blade directive to generate the hidden token input field:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 54
#, no-wrap
msgid ""
"    <form method=\"POST\" action=\"/profile\">\n"
"        @csrf\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 58
#, no-wrap
msgid ""
"        <!-- Equivalent to... -->\n"
"        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n"
"    </form>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 60
# File: docs/9.x/csrf.md, line: 64
# File: docs/master/csrf.md, line: 64
msgid "The `App\\Http\\Middleware\\VerifyCsrfToken` [middleware](/docs/{{version}}/middleware), which is included in the `web` middleware group by default, will automatically verify that the token in the request input matches the token stored in the session. When these two tokens match, we know that the authenticated user is the one initiating the request."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 62
# File: docs/9.x/csrf.md, line: 66
# File: docs/master/csrf.md, line: 66
#, no-wrap
msgid "<a name=\"csrf-tokens-and-spas\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/csrf.md, line: 62
# File: docs/9.x/csrf.md, line: 66
# File: docs/master/csrf.md, line: 66
#, no-wrap
msgid "CSRF Tokens & SPAs"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 65
# File: docs/9.x/csrf.md, line: 69
# File: docs/master/csrf.md, line: 69
msgid "If you are building an SPA that is utilizing Laravel as an API backend, you should consult the [Laravel Sanctum documentation](/docs/{{version}}/sanctum) for information on authenticating with your API and protecting against CSRF vulnerabilities."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 67
# File: docs/9.x/csrf.md, line: 71
# File: docs/master/csrf.md, line: 71
#, no-wrap
msgid "<a name=\"csrf-excluding-uris\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/csrf.md, line: 67
# File: docs/9.x/csrf.md, line: 71
# File: docs/master/csrf.md, line: 71
#, no-wrap
msgid "Excluding URIs From CSRF Protection"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 70
# File: docs/9.x/csrf.md, line: 74
# File: docs/master/csrf.md, line: 74
msgid "Sometimes you may wish to exclude a set of URIs from CSRF protection. For example, if you are using [Stripe](https://stripe.com) to process payments and are utilizing their webhook system, you will need to exclude your Stripe webhook handler route from CSRF protection since Stripe will not know what CSRF token to send to your routes."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 72
# File: docs/9.x/csrf.md, line: 76
# File: docs/master/csrf.md, line: 76
msgid "Typically, you should place these kinds of routes outside of the `web` middleware group that the `App\\Providers\\RouteServiceProvider` applies to all routes in the `routes/web.php` file. However, you may also exclude the routes by adding their URIs to the `$except` property of the `VerifyCsrfToken` middleware:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 74
# File: docs/9.x/csrf.md, line: 78
# File: docs/master/csrf.md, line: 78
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 76
# File: docs/9.x/csrf.md, line: 80
# File: docs/master/csrf.md, line: 80
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 78
# File: docs/9.x/csrf.md, line: 82
# File: docs/master/csrf.md, line: 82
#, no-wrap
msgid "    use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 92
# File: docs/9.x/csrf.md, line: 96
# File: docs/master/csrf.md, line: 96
#, no-wrap
msgid ""
"    class VerifyCsrfToken extends Middleware\n"
"    {\n"
"        /**\n"
"         * The URIs that should be excluded from CSRF verification.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $except = [\n"
"            'stripe/*',\n"
"            'http://example.com/foo/bar',\n"
"            'http://example.com/foo/*',\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 94
# File: docs/9.x/csrf.md, line: 98
# File: docs/master/csrf.md, line: 98
#, no-wrap
msgid "> {tip} For convenience, the CSRF middleware is automatically disabled for all routes when [running tests](/docs/{{version}}/testing).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 96
# File: docs/9.x/csrf.md, line: 100
# File: docs/master/csrf.md, line: 100
#, no-wrap
msgid "<a name=\"csrf-x-csrf-token\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/csrf.md, line: 96
# File: docs/9.x/csrf.md, line: 100
# File: docs/master/csrf.md, line: 100
#, no-wrap
msgid "X-CSRF-TOKEN"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 99
# File: docs/9.x/csrf.md, line: 103
# File: docs/master/csrf.md, line: 103
msgid "In addition to checking for the CSRF token as a POST parameter, the `App\\Http\\Middleware\\VerifyCsrfToken` middleware will also check for the `X-CSRF-TOKEN` request header. You could, for example, store the token in an HTML `meta` tag:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 101
#, no-wrap
msgid "    <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 103
# File: docs/9.x/csrf.md, line: 109
# File: docs/master/csrf.md, line: 109
msgid "Then, you can instruct a library like jQuery to automatically add the token to all request headers. This provides simple, convenient CSRF protection for your AJAX based applications using legacy JavaScript technology:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 109
#, no-wrap
msgid ""
"    $.ajaxSetup({\n"
"        headers: {\n"
"            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n"
"        }\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 111
# File: docs/9.x/csrf.md, line: 119
# File: docs/master/csrf.md, line: 119
#, no-wrap
msgid "<a name=\"csrf-x-xsrf-token\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/csrf.md, line: 111
# File: docs/9.x/csrf.md, line: 119
# File: docs/master/csrf.md, line: 119
#, no-wrap
msgid "X-XSRF-TOKEN"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 114
# File: docs/9.x/csrf.md, line: 122
# File: docs/master/csrf.md, line: 122
msgid "Laravel stores the current CSRF token in an encrypted `XSRF-TOKEN` cookie that is included with each response generated by the framework. You can use the cookie value to set the `X-XSRF-TOKEN` request header."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 116
# File: docs/9.x/csrf.md, line: 124
# File: docs/master/csrf.md, line: 124
msgid "This cookie is primarily sent as a developer convenience since some JavaScript frameworks and libraries, like Angular and Axios, automatically place its value in the `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/csrf.md, line: 117
# File: docs/9.x/csrf.md, line: 125
# File: docs/master/csrf.md, line: 125
#, no-wrap
msgid "> {tip} By default, the `resources/js/bootstrap.js` file includes the Axios HTTP library which will automatically send the `X-XSRF-TOKEN` header for you.\n"
msgstr ""
#
#. type: Code fence info string
# File: docs/9.x/csrf.md, line: 21
# File: docs/9.x/csrf.md, line: 54
# File: docs/9.x/csrf.md, line: 104
# File: docs/master/csrf.md, line: 21
# File: docs/master/csrf.md, line: 54
# File: docs/master/csrf.md, line: 104
#, no-wrap
msgid "blade"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/csrf.md, line: 21
# File: docs/master/csrf.md, line: 21
#, no-wrap
msgid ""
"<form action=\"https://your-application.com/user/email\" method=\"POST\">\n"
"    <input type=\"email\" value=\"malicious-email@example.com\">\n"
"</form>\n"
"\n"
"<script>\n"
"    document.forms[0].submit();\n"
"</script>\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/csrf.md, line: 54
# File: docs/master/csrf.md, line: 54
#, no-wrap
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"\n"
"    <!-- Equivalent to... -->\n"
"    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n"
"</form>\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/csrf.md, line: 104
# File: docs/master/csrf.md, line: 104
#, no-wrap
msgid "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n"
msgstr ""
#
#. type: Code fence info string
# File: docs/9.x/csrf.md, line: 110
# File: docs/master/csrf.md, line: 110
#, no-wrap
msgid "js"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/csrf.md, line: 110
# File: docs/master/csrf.md, line: 110
#, no-wrap
msgid ""
"$.ajaxSetup({\n"
"    headers: {\n"
"        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n"
"    }\n"
"});\n"
msgstr ""
