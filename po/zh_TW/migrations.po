msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/migrations.pot\n"
"X-Crowdin-File-ID: 103\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 05:57\n"

#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated (MySQL)."
msgstr ""

#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->noActionOnUpdate();`"
msgstr ""

#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "No action on updates."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Place the column \"after\" another column (MariaDB / MySQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Set `INTEGER` columns as auto-incrementing (primary key)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Specify a character set for the column (MariaDB / MySQL)."
msgstr ""

#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Specify a collation for the column."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Add a comment to a column (MariaDB / MySQL / PostgreSQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Place the column \"first\" in the table (MariaDB / MySQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Set the starting value of an auto-incrementing field (MariaDB / MySQL / PostgreSQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Make the column \"invisible\" to `SELECT *` queries (MariaDB / MySQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Allow `NULL` values to be inserted into the column."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Create a stored generated column (MariaDB / MySQL / PostgreSQL / SQLite)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Set `INTEGER` columns as `UNSIGNED` (MariaDB / MySQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Set `TIMESTAMP` columns to use `CURRENT_TIMESTAMP` as default value."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Set `TIMESTAMP` columns to use `CURRENT_TIMESTAMP` when a record is updated (MariaDB / MySQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Create a virtual generated column (MariaDB / MySQL / SQLite)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Adds a full text index (MariaDB / MySQL / PostgreSQL)."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "`$table->nullOnUpdate();`"
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Updates should set the foreign key value to null."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "`$table->noActionOnDelete();`"
msgstr ""

#: ./docs/11.x/migrations.md
msgid "Prevents deletes if child records exist."
msgstr ""

#: ./docs/11.x/migrations.md
msgid "`Illuminate\\Database\\Events\\NoPendingMigrations`"
msgstr ""

#: ./docs/11.x/migrations.md
msgid "A migration command found no pending migrations."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Modifier"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Description"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->after('column')`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Place the column \"after\" another column (MySQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->autoIncrement()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Set INTEGER columns as auto-incrementing (primary key)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->charset('utf8mb4')`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Specify a character set for the column (MySQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->collation('utf8mb4_unicode_ci')`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "Specify a collation for the column (MySQL/PostgreSQL/SQL Server)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->comment('my comment')`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "Add a comment to a column (MySQL/PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->default($value)`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Specify a \"default\" value for the column."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->first()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Place the column \"first\" in the table (MySQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->from($integer)`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Set the starting value of an auto-incrementing field (MySQL / PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->invisible()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Make the column \"invisible\" to `SELECT *` queries (MySQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->nullable($value = true)`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Allow NULL values to be inserted into the column."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->storedAs($expression)`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "Create a stored generated column (MySQL / PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->unsigned()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Set INTEGER columns as UNSIGNED (MySQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->useCurrent()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/master/migrations.md
msgid "Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->useCurrentOnUpdate()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
msgid "Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->virtualAs($expression)`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "Create a virtual generated column (MySQL / PostgreSQL / SQLite)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->generatedAs($expression)`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Create an identity column with specified sequence options (PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`->always()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Defines the precedence of sequence values over input for an identity column (PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "`->isGeometry()`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "Set spatial column type to `geometry` - the default type is `geography` (PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Command"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropMorphs('morphable');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop the `morphable_id` and `morphable_type` columns."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropRememberToken();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop the `remember_token` column."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropSoftDeletes();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop the `deleted_at` column."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropSoftDeletesTz();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Alias of `dropSoftDeletes()` method."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropTimestamps();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop the `created_at` and `updated_at` columns."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropTimestampsTz();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Alias of `dropTimestamps()` method."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->primary('id');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Adds a primary key."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->primary(['id', 'parent_id']);`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Adds composite keys."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->unique('email');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Adds a unique index."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->index('state');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Adds an index."
msgstr ""

#: ./docs/8.x/migrations.md
msgid "`$table->fulltext('body');`"
msgstr ""

#: ./docs/8.x/migrations.md
msgid "Adds a fulltext index (MySQL/PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
msgid "`$table->fulltext('body')->language('english');`"
msgstr ""

#: ./docs/8.x/migrations.md
msgid "Adds a fulltext index of the specified language (PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->spatialIndex('location');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Adds a spatial index (except SQLite)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropPrimary('users_id_primary');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop a primary key from the \"users\" table."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropUnique('users_email_unique');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop a unique index from the \"users\" table."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropIndex('geo_state_index');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop a basic index from the \"geo\" table."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropSpatialIndex('geo_location_spatialindex');`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop a spatial index from the \"geo\" table  (except SQLite)."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Method"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->cascadeOnUpdate();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Updates should cascade."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->restrictOnUpdate();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Updates should be restricted."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->cascadeOnDelete();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Deletes should cascade."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->restrictOnDelete();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Deletes should be restricted."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->nullOnDelete();`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Deletes should set the foreign key value to null."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Class"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`Illuminate\\Database\\Events\\MigrationsStarted`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "A batch of migrations is about to be executed."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`Illuminate\\Database\\Events\\MigrationsEnded`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "A batch of migrations has finished executing."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`Illuminate\\Database\\Events\\MigrationStarted`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "A single migration is about to be executed."
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`Illuminate\\Database\\Events\\MigrationEnded`"
msgstr ""

#: ./docs/8.x/migrations.md
#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "A single migration has finished executing."
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->fullText('body');`"
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
msgid "Adds a full text index (MySQL/PostgreSQL)."
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->fullText('body')->language('english');`"
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Adds a full text index of the specified language (PostgreSQL)."
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`$table->dropFullText('posts_body_fulltext');`"
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "Drop a full text index from the \"posts\" table."
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`Illuminate\\Database\\Events\\SchemaDumped`"
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "A database schema dump has completed."
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "`Illuminate\\Database\\Events\\SchemaLoaded`"
msgstr ""

#: ./docs/9.x/migrations.md
#: ./docs/10.x/migrations.md
#: ./docs/11.x/migrations.md
#: ./docs/master/migrations.md
msgid "An existing database schema dump has loaded."
msgstr ""

#: ./docs/master/migrations.md
msgid "Add a comment to a column (MySQL / PostgreSQL)."
msgstr ""

#: ./docs/master/migrations.md
msgid "Create a stored generated column (MySQL / PostgreSQL / SQLite)."
msgstr ""

#: ./docs/master/migrations.md
msgid "Create a virtual generated column (MySQL / SQLite)."
msgstr ""

#: ./docs/master/migrations.md
msgid "Adds a full text index (MySQL / PostgreSQL)."
msgstr ""

#: ./docs/8.x/migrations.md:1
#: ./docs/9.x/migrations.md:1
#: ./docs/10.x/migrations.md:1
#: ./docs/11.x/migrations.md:1
#: ./docs/master/migrations.md:1
msgid "Database: Migrations"
msgstr ""

#: ./docs/8.x/migrations.md:3
#: ./docs/9.x/migrations.md:3
#: ./docs/10.x/migrations.md:3
#: ./docs/11.x/migrations.md:3
#: ./docs/master/migrations.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/migrations.md:4
#: ./docs/9.x/migrations.md:4
#: ./docs/10.x/migrations.md:4
#: ./docs/11.x/migrations.md:4
#: ./docs/master/migrations.md:4
msgid "[Generating Migrations](#generating-migrations)"
msgstr ""

#: ./docs/8.x/migrations.md:5
#: ./docs/9.x/migrations.md:5
#: ./docs/10.x/migrations.md:5
#: ./docs/11.x/migrations.md:5
#: ./docs/master/migrations.md:5
msgid "[Squashing Migrations](#squashing-migrations)"
msgstr ""

#: ./docs/8.x/migrations.md:6
#: ./docs/9.x/migrations.md:6
#: ./docs/10.x/migrations.md:6
#: ./docs/11.x/migrations.md:6
#: ./docs/master/migrations.md:6
msgid "[Migration Structure](#migration-structure)"
msgstr ""

#: ./docs/8.x/migrations.md:7
#: ./docs/9.x/migrations.md:7
#: ./docs/10.x/migrations.md:7
#: ./docs/11.x/migrations.md:7
#: ./docs/master/migrations.md:7
msgid "[Running Migrations](#running-migrations)"
msgstr ""

#: ./docs/8.x/migrations.md:8
#: ./docs/9.x/migrations.md:8
#: ./docs/10.x/migrations.md:8
#: ./docs/11.x/migrations.md:8
#: ./docs/master/migrations.md:8
msgid "[Rolling Back Migrations](#rolling-back-migrations)"
msgstr ""

#: ./docs/8.x/migrations.md:9
#: ./docs/9.x/migrations.md:9
#: ./docs/10.x/migrations.md:9
#: ./docs/11.x/migrations.md:9
#: ./docs/master/migrations.md:9
msgid "[Tables](#tables)"
msgstr ""

#: ./docs/8.x/migrations.md:10
#: ./docs/9.x/migrations.md:10
#: ./docs/10.x/migrations.md:10
#: ./docs/11.x/migrations.md:10
#: ./docs/master/migrations.md:10
msgid "[Creating Tables](#creating-tables)"
msgstr ""

#: ./docs/8.x/migrations.md:11
#: ./docs/9.x/migrations.md:11
#: ./docs/10.x/migrations.md:11
#: ./docs/11.x/migrations.md:11
#: ./docs/master/migrations.md:11
msgid "[Updating Tables](#updating-tables)"
msgstr ""

#: ./docs/8.x/migrations.md:12
#: ./docs/9.x/migrations.md:12
#: ./docs/10.x/migrations.md:12
#: ./docs/11.x/migrations.md:12
#: ./docs/master/migrations.md:12
msgid "[Renaming / Dropping Tables](#renaming-and-dropping-tables)"
msgstr ""

#: ./docs/8.x/migrations.md:13
#: ./docs/9.x/migrations.md:13
#: ./docs/10.x/migrations.md:13
#: ./docs/11.x/migrations.md:13
#: ./docs/master/migrations.md:13
msgid "[Columns](#columns)"
msgstr ""

#: ./docs/8.x/migrations.md:14
#: ./docs/9.x/migrations.md:14
#: ./docs/10.x/migrations.md:14
#: ./docs/11.x/migrations.md:14
#: ./docs/master/migrations.md:14
msgid "[Creating Columns](#creating-columns)"
msgstr ""

#: ./docs/8.x/migrations.md:15
#: ./docs/9.x/migrations.md:15
#: ./docs/10.x/migrations.md:15
#: ./docs/11.x/migrations.md:15
#: ./docs/master/migrations.md:15
msgid "[Available Column Types](#available-column-types)"
msgstr ""

#: ./docs/8.x/migrations.md:16
#: ./docs/9.x/migrations.md:16
#: ./docs/10.x/migrations.md:16
#: ./docs/11.x/migrations.md:16
#: ./docs/master/migrations.md:16
msgid "[Column Modifiers](#column-modifiers)"
msgstr ""

#: ./docs/8.x/migrations.md:17
#: ./docs/9.x/migrations.md:17
#: ./docs/10.x/migrations.md:17
#: ./docs/11.x/migrations.md:17
#: ./docs/master/migrations.md:17
msgid "[Modifying Columns](#modifying-columns)"
msgstr ""

#: ./docs/8.x/migrations.md:18
#: ./docs/9.x/migrations.md:19
#: ./docs/10.x/migrations.md:19
#: ./docs/11.x/migrations.md:19
#: ./docs/master/migrations.md:19
msgid "[Dropping Columns](#dropping-columns)"
msgstr ""

#: ./docs/9.x/migrations.md:18
#: ./docs/10.x/migrations.md:18
#: ./docs/11.x/migrations.md:18
#: ./docs/master/migrations.md:18
msgid "[Renaming Columns](#renaming-columns)"
msgstr ""

#: ./docs/8.x/migrations.md:19
#: ./docs/9.x/migrations.md:20
#: ./docs/10.x/migrations.md:20
#: ./docs/11.x/migrations.md:20
#: ./docs/master/migrations.md:20
msgid "[Indexes](#indexes)"
msgstr ""

#: ./docs/8.x/migrations.md:20
#: ./docs/9.x/migrations.md:21
#: ./docs/10.x/migrations.md:21
#: ./docs/11.x/migrations.md:21
#: ./docs/master/migrations.md:21
msgid "[Creating Indexes](#creating-indexes)"
msgstr ""

#: ./docs/8.x/migrations.md:21
#: ./docs/9.x/migrations.md:22
#: ./docs/10.x/migrations.md:22
#: ./docs/11.x/migrations.md:22
#: ./docs/master/migrations.md:22
msgid "[Renaming Indexes](#renaming-indexes)"
msgstr ""

#: ./docs/8.x/migrations.md:22
#: ./docs/9.x/migrations.md:23
#: ./docs/10.x/migrations.md:23
#: ./docs/11.x/migrations.md:23
#: ./docs/master/migrations.md:23
msgid "[Dropping Indexes](#dropping-indexes)"
msgstr ""

#: ./docs/8.x/migrations.md:23
#: ./docs/9.x/migrations.md:24
#: ./docs/10.x/migrations.md:24
#: ./docs/11.x/migrations.md:24
#: ./docs/master/migrations.md:24
msgid "[Foreign Key Constraints](#foreign-key-constraints)"
msgstr ""

#: ./docs/8.x/migrations.md:24
#: ./docs/9.x/migrations.md:25
#: ./docs/10.x/migrations.md:25
#: ./docs/11.x/migrations.md:25
#: ./docs/master/migrations.md:25
msgid "[Events](#events)"
msgstr ""

#: ./docs/8.x/migrations.md:26
#: ./docs/9.x/migrations.md:27
#: ./docs/10.x/migrations.md:27
#: ./docs/11.x/migrations.md:27
#: ./docs/master/migrations.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:27
#: ./docs/9.x/migrations.md:28
#: ./docs/10.x/migrations.md:28
#: ./docs/11.x/migrations.md:28
#: ./docs/master/migrations.md:28
msgid "Introduction"
msgstr ""

#: ./docs/8.x/migrations.md:29
#: ./docs/9.x/migrations.md:30
#: ./docs/10.x/migrations.md:30
#: ./docs/11.x/migrations.md:30
#: ./docs/master/migrations.md:30
msgid "Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. If you have ever had to tell a teammate to manually add a column to their local database schema after pulling in your changes from source control, you've faced the problem that database migrations solve."
msgstr ""

#: ./docs/8.x/migrations.md:31
#: ./docs/9.x/migrations.md:32
#: ./docs/10.x/migrations.md:32
#: ./docs/11.x/migrations.md:32
#: ./docs/master/migrations.md:32
msgid "The Laravel `Schema` [facade](/docs/{{version}}/facades) provides database agnostic support for creating and manipulating tables across all of Laravel's supported database systems. Typically, migrations will use this facade to create and modify database tables and columns."
msgstr ""

#: ./docs/8.x/migrations.md:33
#: ./docs/9.x/migrations.md:34
#: ./docs/10.x/migrations.md:34
#: ./docs/11.x/migrations.md:34
#: ./docs/master/migrations.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"generating-migrations\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:34
#: ./docs/9.x/migrations.md:35
#: ./docs/10.x/migrations.md:35
#: ./docs/11.x/migrations.md:35
#: ./docs/master/migrations.md:35
msgid "Generating Migrations"
msgstr ""

#: ./docs/8.x/migrations.md:36
#: ./docs/9.x/migrations.md:37
#: ./docs/10.x/migrations.md:37
#: ./docs/11.x/migrations.md:37
#: ./docs/master/migrations.md:37
msgid "You may use the `make:migration` [Artisan command](/docs/{{version}}/artisan) to generate a database migration. The new migration will be placed in your `database/migrations` directory. Each migration filename contains a timestamp that allows Laravel to determine the order of the migrations:"
msgstr ""

#: ./docs/8.x/migrations.md:38
#: ./docs/9.x/migrations.md:39
#: ./docs/10.x/migrations.md:39
#: ./docs/11.x/migrations.md:39
#: ./docs/master/migrations.md:39
msgid "php artisan make:migration create_flights_table"
msgstr ""

#: ./docs/8.x/migrations.md:40
#: ./docs/9.x/migrations.md:43
#: ./docs/10.x/migrations.md:43
#: ./docs/11.x/migrations.md:43
#: ./docs/master/migrations.md:43
msgid "Laravel will use the name of the migration to attempt to guess the name of the table and whether or not the migration will be creating a new table. If Laravel is able to determine the table name from the migration name, Laravel will pre-fill the generated migration file with the specified table. Otherwise, you may simply specify the table in the migration file manually."
msgstr ""

#: ./docs/8.x/migrations.md:42
#: ./docs/9.x/migrations.md:45
#: ./docs/10.x/migrations.md:45
#: ./docs/11.x/migrations.md:45
#: ./docs/master/migrations.md:45
msgid "If you would like to specify a custom path for the generated migration, you may use the `--path` option when executing the `make:migration` command. The given path should be relative to your application's base path."
msgstr ""

#: ./docs/8.x/migrations.md:44
#: ./docs/9.x/migrations.md:48
#: ./docs/10.x/migrations.md:48
#: ./docs/11.x/migrations.md:48
#: ./docs/master/migrations.md:48
msgid "Migration stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr ""

#: ./docs/8.x/migrations.md:46
#: ./docs/9.x/migrations.md:50
#: ./docs/10.x/migrations.md:50
#: ./docs/11.x/migrations.md:50
#: ./docs/master/migrations.md:50
#~ msgctxt "P"
#~ msgid "<a name=\"squashing-migrations\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:47
#: ./docs/9.x/migrations.md:51
#: ./docs/10.x/migrations.md:51
#: ./docs/11.x/migrations.md:51
#: ./docs/master/migrations.md:51
msgid "Squashing Migrations"
msgstr ""

#: ./docs/8.x/migrations.md:49
#: ./docs/9.x/migrations.md:53
#: ./docs/10.x/migrations.md:53
#: ./docs/11.x/migrations.md:53
#: ./docs/master/migrations.md:53
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your `database/migrations` directory becoming bloated with potentially hundreds of migrations. If you would like, you may \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr ""

#: ./docs/8.x/migrations.md:51
msgid "php artisan schema:dump\n\n"
"// Dump the current database schema and prune all existing migrations...\n"
"php artisan schema:dump --prune"
msgstr ""

#: ./docs/9.x/migrations.md:55
#: ./docs/10.x/migrations.md:55
#: ./docs/11.x/migrations.md:55
#: ./docs/master/migrations.md:55
msgid "php artisan schema:dump\n\n"
"# Dump the current database schema and prune all existing migrations...\n"
"php artisan schema:dump --prune"
msgstr ""

#: ./docs/8.x/migrations.md:56
msgid "When you execute this command, Laravel will write a \"schema\" file to your application's `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL statements first. After executing the schema file's statements, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""

#: ./docs/8.x/migrations.md:58
#: ./docs/9.x/migrations.md:71
#: ./docs/10.x/migrations.md:71
#: ./docs/11.x/migrations.md:71
#: ./docs/master/migrations.md:71
msgid "You should commit your database schema file to source control so that other new developers on your team may quickly create your application's initial database structure."
msgstr ""

#: ./docs/8.x/migrations.md:60
#: ./docs/9.x/migrations.md:74
msgid "Migration squashing is only available for the MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client. Schema dumps may not be restored to in-memory SQLite databases."
msgstr ""

#: ./docs/10.x/migrations.md:62
#: ./docs/11.x/migrations.md:62
#: ./docs/master/migrations.md:62
msgid "When you execute this command, Laravel will write a \"schema\" file to your application's `database/schema` directory. The schema file's name will correspond to the database connection. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will first execute the SQL statements in the schema file of the database connection you are using. After executing the schema file's SQL statements, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""

#: ./docs/8.x/migrations.md:62
#: ./docs/9.x/migrations.md:76
#: ./docs/10.x/migrations.md:76
#: ./docs/11.x/migrations.md:76
#: ./docs/master/migrations.md:76
#~ msgctxt "P"
#~ msgid "<a name=\"migration-structure\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:62
msgid "When you execute this command, Laravel will write a \"schema\" file to your application's `database/schema` directory. The schema file's name will correspond to the database connection. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute first the SQL statements of the schema file of the database connection you are using. After executing the schema file's statements, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""

#: ./docs/8.x/migrations.md:63
#: ./docs/9.x/migrations.md:77
#: ./docs/10.x/migrations.md:77
#: ./docs/11.x/migrations.md:77
#: ./docs/master/migrations.md:77
msgid "Migration Structure"
msgstr ""

#: ./docs/9.x/migrations.md:64
#: ./docs/10.x/migrations.md:64
#: ./docs/11.x/migrations.md:64
#: ./docs/master/migrations.md:64
msgid "If your application's tests use a different database connection than the one you typically use during local development, you should ensure you have dumped a schema file using that database connection so that your tests are able to build your database. You may wish to do this after dumping the database connection you typically use during local development:"
msgstr ""

#: ./docs/8.x/migrations.md:65
#: ./docs/9.x/migrations.md:79
#: ./docs/10.x/migrations.md:79
#: ./docs/11.x/migrations.md:79
#: ./docs/master/migrations.md:79
msgid "A migration class contains two methods: `up` and `down`. The `up` method is used to add new tables, columns, or indexes to your database, while the `down` method should reverse the operations performed by the `up` method."
msgstr ""

#: ./docs/9.x/migrations.md:66
#: ./docs/10.x/migrations.md:66
#: ./docs/11.x/migrations.md:66
#: ./docs/master/migrations.md:66
msgid "php artisan schema:dump\n"
"php artisan schema:dump --database=testing --prune"
msgstr ""

#: ./docs/8.x/migrations.md:67
#: ./docs/9.x/migrations.md:81
#: ./docs/10.x/migrations.md:81
#: ./docs/11.x/migrations.md:81
#: ./docs/master/migrations.md:81
msgid "Within both of these methods, you may use the Laravel schema builder to expressively create and modify tables. To learn about all of the methods available on the `Schema` builder, [check out its documentation](#creating-tables). For example, the following migration creates a `flights` table:"
msgstr ""

#: ./docs/8.x/migrations.md:69
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"class CreateFlightsTable extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->string('name');\n"
"            $table->string('airline');\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Reverse the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function down()\n"
"    {\n"
"        Schema::drop('flights');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/migrations.md:74
#: ./docs/master/migrations.md:74
msgid "Migration squashing is only available for the MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client."
msgstr ""

#: ./docs/11.x/migrations.md:74
msgid "Migration squashing is only available for the MariaDB, MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client."
msgstr ""

#: ./docs/10.x/migrations.md:83
#: ./docs/11.x/migrations.md:83
#: ./docs/master/migrations.md:83
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     */\n"
"    public function up(): void\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->string('name');\n"
"            $table->string('airline');\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Reverse the migrations.\n"
"     */\n"
"    public function down(): void\n"
"    {\n"
"        Schema::drop('flights');\n"
"    }\n"
"};"
msgstr ""

#: ./docs/9.x/migrations.md:83
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->string('name');\n"
"            $table->string('airline');\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Reverse the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function down()\n"
"    {\n"
"        Schema::drop('flights');\n"
"    }\n"
"};"
msgstr ""

#: ./docs/8.x/migrations.md:103
#~ msgctxt "P"
#~ msgid "<a name=\"anonymous-migrations\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:104
msgid "Anonymous Migrations"
msgstr ""

#: ./docs/8.x/migrations.md:106
msgid "As you may have noticed in the example above, Laravel will automatically assign a class name to all of the migrations that you generate using the `make:migration` command. However, if you wish, you may return an anonymous class from your migration file. This is primarily useful if your application accumulates many migrations and two of them have a class name collision:"
msgstr ""

#: ./docs/8.x/migrations.md:108
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"return new class extends Migration\n"
"{\n"
"    //\n"
"};"
msgstr ""

#: ./docs/10.x/migrations.md:114
#: ./docs/11.x/migrations.md:114
#: ./docs/master/migrations.md:114
msgid "Setting the Migration Connection"
msgstr ""

#: ./docs/8.x/migrations.md:117
#: ./docs/9.x/migrations.md:117
#: ./docs/10.x/migrations.md:113
#: ./docs/11.x/migrations.md:113
#: ./docs/master/migrations.md:113
#~ msgctxt "P"
#~ msgid "<a name=\"setting-the-migration-connection\"></a>"
#~ msgstr ""

#: ./docs/10.x/migrations.md:118
#: ./docs/11.x/migrations.md:118
#: ./docs/master/migrations.md:118
msgid "/**\n"
" * The database connection that should be used by the migration.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $connection = 'pgsql';\n\n"
"/**\n"
" * Run the migrations.\n"
" */\n"
"public function up(): void\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/migrations.md:118
#: ./docs/9.x/migrations.md:118
msgid "Setting The Migration Connection"
msgstr ""

#: ./docs/8.x/migrations.md:120
#: ./docs/9.x/migrations.md:120
#: ./docs/10.x/migrations.md:116
#: ./docs/11.x/migrations.md:116
#: ./docs/master/migrations.md:116
msgid "If your migration will be interacting with a database connection other than your application's default database connection, you should set the `$connection` property of your migration:"
msgstr ""

#: ./docs/8.x/migrations.md:122
#: ./docs/9.x/migrations.md:122
msgid "/**\n"
" * The database connection that should be used by the migration.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $connection = 'pgsql';\n\n"
"/**\n"
" * Run the migrations.\n"
" *\n"
" * @return void\n"
" */\n"
"public function up()\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/migrations.md:139
#: ./docs/9.x/migrations.md:139
#: ./docs/10.x/migrations.md:133
#: ./docs/11.x/migrations.md:133
#: ./docs/master/migrations.md:133
#~ msgctxt "P"
#~ msgid "<a name=\"running-migrations\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:140
#: ./docs/9.x/migrations.md:140
#: ./docs/10.x/migrations.md:134
#: ./docs/11.x/migrations.md:134
#: ./docs/master/migrations.md:134
msgid "Running Migrations"
msgstr ""

#: ./docs/8.x/migrations.md:142
#: ./docs/9.x/migrations.md:142
#: ./docs/10.x/migrations.md:136
#: ./docs/11.x/migrations.md:136
#: ./docs/master/migrations.md:136
msgid "To run all of your outstanding migrations, execute the `migrate` Artisan command:"
msgstr ""

#: ./docs/8.x/migrations.md:144
#: ./docs/9.x/migrations.md:144
#: ./docs/10.x/migrations.md:138
#: ./docs/11.x/migrations.md:138
#: ./docs/master/migrations.md:138
msgid "php artisan migrate"
msgstr ""

#: ./docs/8.x/migrations.md:146
#: ./docs/9.x/migrations.md:148
#: ./docs/10.x/migrations.md:142
#: ./docs/11.x/migrations.md:142
#: ./docs/master/migrations.md:142
msgid "If you would like to see which migrations have run thus far, you may use the `migrate:status` Artisan command:"
msgstr ""

#: ./docs/8.x/migrations.md:148
#: ./docs/9.x/migrations.md:150
#: ./docs/10.x/migrations.md:144
#: ./docs/11.x/migrations.md:144
#: ./docs/master/migrations.md:144
msgid "php artisan migrate:status"
msgstr ""

#: ./docs/8.x/migrations.md:150
#: ./docs/9.x/migrations.md:173
#: ./docs/10.x/migrations.md:167
#: ./docs/11.x/migrations.md:167
#: ./docs/master/migrations.md:167
#~ msgctxt "P"
#~ msgid "<a name=\"forcing-migrations-to-run-in-production\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:151
#: ./docs/9.x/migrations.md:174
msgid "Forcing Migrations To Run In Production"
msgstr ""

#: ./docs/8.x/migrations.md:153
#: ./docs/9.x/migrations.md:176
#: ./docs/10.x/migrations.md:170
#: ./docs/11.x/migrations.md:170
#: ./docs/master/migrations.md:170
msgid "Some migration operations are destructive, which means they may cause you to lose data. In order to protect you from running these commands against your production database, you will be prompted for confirmation before the commands are executed. To force the commands to run without a prompt, use the `--force` flag:"
msgstr ""

#: ./docs/9.x/migrations.md:154
#: ./docs/10.x/migrations.md:148
#: ./docs/11.x/migrations.md:148
#: ./docs/master/migrations.md:148
msgid "If you would like to see the SQL statements that will be executed by the migrations without actually running them, you may provide the `--pretend` flag to the `migrate` command:"
msgstr ""

#: ./docs/8.x/migrations.md:155
#: ./docs/9.x/migrations.md:178
#: ./docs/10.x/migrations.md:172
#: ./docs/11.x/migrations.md:172
#: ./docs/master/migrations.md:172
msgid "php artisan migrate --force"
msgstr ""

#: ./docs/9.x/migrations.md:156
#: ./docs/10.x/migrations.md:150
#: ./docs/11.x/migrations.md:150
#: ./docs/master/migrations.md:150
msgid "php artisan migrate --pretend"
msgstr ""

#: ./docs/8.x/migrations.md:157
#: ./docs/9.x/migrations.md:182
#: ./docs/10.x/migrations.md:176
#: ./docs/11.x/migrations.md:176
#: ./docs/master/migrations.md:176
#~ msgctxt "P"
#~ msgid "<a name=\"rolling-back-migrations\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:158
#: ./docs/9.x/migrations.md:183
#: ./docs/10.x/migrations.md:177
#: ./docs/11.x/migrations.md:177
#: ./docs/master/migrations.md:177
msgid "Rolling Back Migrations"
msgstr ""

#: ./docs/8.x/migrations.md:160
#: ./docs/9.x/migrations.md:185
#: ./docs/10.x/migrations.md:179
#: ./docs/11.x/migrations.md:179
#: ./docs/master/migrations.md:179
msgid "To roll back the latest migration operation, you may use the `rollback` Artisan command. This command rolls back the last \"batch\" of migrations, which may include multiple migration files:"
msgstr ""

#: ./docs/9.x/migrations.md:160
#: ./docs/10.x/migrations.md:154
#: ./docs/11.x/migrations.md:154
#: ./docs/master/migrations.md:154
msgid "Isolating Migration Execution"
msgstr ""

#: ./docs/8.x/migrations.md:162
#: ./docs/9.x/migrations.md:187
#: ./docs/10.x/migrations.md:181
#: ./docs/11.x/migrations.md:181
#: ./docs/master/migrations.md:181
msgid "php artisan migrate:rollback"
msgstr ""

#: ./docs/9.x/migrations.md:162
#: ./docs/10.x/migrations.md:156
#: ./docs/11.x/migrations.md:156
#: ./docs/master/migrations.md:156
msgid "If you are deploying your application across multiple servers and running migrations as part of your deployment process, you likely do not want two servers attempting to migrate the database at the same time. To avoid this, you may use the `isolated` option when invoking the `migrate` command."
msgstr ""

#: ./docs/8.x/migrations.md:164
#: ./docs/9.x/migrations.md:191
#: ./docs/10.x/migrations.md:185
#: ./docs/11.x/migrations.md:185
#: ./docs/master/migrations.md:185
msgid "You may roll back a limited number of migrations by providing the `step` option to the `rollback` command. For example, the following command will roll back the last five migrations:"
msgstr ""

#: ./docs/9.x/migrations.md:164
#: ./docs/10.x/migrations.md:158
#: ./docs/11.x/migrations.md:158
#: ./docs/master/migrations.md:158
msgid "When the `isolated` option is provided, Laravel will acquire an atomic lock using your application's cache driver before attempting to run your migrations. All other attempts to run the `migrate` command while that lock is held will not execute; however, the command will still exit with a successful exit status code:"
msgstr ""

#: ./docs/8.x/migrations.md:166
#: ./docs/9.x/migrations.md:193
#: ./docs/10.x/migrations.md:187
#: ./docs/11.x/migrations.md:187
#: ./docs/master/migrations.md:187
msgid "php artisan migrate:rollback --step=5"
msgstr ""

#: ./docs/9.x/migrations.md:166
#: ./docs/10.x/migrations.md:160
#: ./docs/11.x/migrations.md:160
#: ./docs/master/migrations.md:160
msgid "php artisan migrate --isolated"
msgstr ""

#: ./docs/10.x/migrations.md:168
#: ./docs/11.x/migrations.md:168
#: ./docs/master/migrations.md:168
msgid "Forcing Migrations to Run in Production"
msgstr ""

#: ./docs/8.x/migrations.md:168
#: ./docs/9.x/migrations.md:197
#: ./docs/10.x/migrations.md:203
#: ./docs/11.x/migrations.md:203
#: ./docs/master/migrations.md:203
msgid "The `migrate:reset` command will roll back all of your application's migrations:"
msgstr ""

#: ./docs/8.x/migrations.md:170
#: ./docs/9.x/migrations.md:199
#: ./docs/10.x/migrations.md:205
#: ./docs/11.x/migrations.md:205
#: ./docs/master/migrations.md:205
msgid "php artisan migrate:reset"
msgstr ""

#: ./docs/9.x/migrations.md:171
#: ./docs/10.x/migrations.md:165
#: ./docs/11.x/migrations.md:165
#: ./docs/master/migrations.md:165
msgid "To utilize this feature, your application must be using the `memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server."
msgstr ""

#: ./docs/8.x/migrations.md:172
#: ./docs/9.x/migrations.md:203
#: ./docs/10.x/migrations.md:209
#: ./docs/11.x/migrations.md:209
#: ./docs/master/migrations.md:209
#~ msgctxt "P"
#~ msgid "<a name=\"roll-back-migrate-using-a-single-command\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:173
#: ./docs/9.x/migrations.md:204
msgid "Roll Back & Migrate Using A Single Command"
msgstr ""

#: ./docs/8.x/migrations.md:175
#: ./docs/9.x/migrations.md:206
#: ./docs/10.x/migrations.md:212
#: ./docs/11.x/migrations.md:212
#: ./docs/master/migrations.md:212
msgid "The `migrate:refresh` command will roll back all of your migrations and then execute the `migrate` command. This command effectively re-creates your entire database:"
msgstr ""

#: ./docs/8.x/migrations.md:177
msgid "php artisan migrate:refresh\n\n"
"// Refresh the database and run all database seeds...\n"
"php artisan migrate:refresh --seed"
msgstr ""

#: ./docs/8.x/migrations.md:182
#: ./docs/9.x/migrations.md:215
#: ./docs/10.x/migrations.md:221
#: ./docs/11.x/migrations.md:221
#: ./docs/master/migrations.md:221
msgid "You may roll back and re-migrate a limited number of migrations by providing the `step` option to the `refresh` command. For example, the following command will roll back and re-migrate the last five migrations:"
msgstr ""

#: ./docs/8.x/migrations.md:184
#: ./docs/9.x/migrations.md:217
#: ./docs/10.x/migrations.md:223
#: ./docs/11.x/migrations.md:223
#: ./docs/master/migrations.md:223
msgid "php artisan migrate:refresh --step=5"
msgstr ""

#: ./docs/8.x/migrations.md:186
#: ./docs/9.x/migrations.md:221
#: ./docs/10.x/migrations.md:227
#: ./docs/11.x/migrations.md:227
#: ./docs/master/migrations.md:227
#~ msgctxt "P"
#~ msgid "<a name=\"drop-all-tables-migrate\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:187
#: ./docs/9.x/migrations.md:222
msgid "Drop All Tables & Migrate"
msgstr ""

#: ./docs/8.x/migrations.md:189
#: ./docs/9.x/migrations.md:224
#: ./docs/10.x/migrations.md:230
#: ./docs/11.x/migrations.md:230
#: ./docs/master/migrations.md:230
msgid "The `migrate:fresh` command will drop all tables from the database and then execute the `migrate` command:"
msgstr ""

#: ./docs/10.x/migrations.md:191
#: ./docs/11.x/migrations.md:191
#: ./docs/master/migrations.md:191
msgid "You may roll back a specific \"batch\" of migrations by providing the `batch` option to the `rollback` command, where the `batch` option corresponds to a batch value within your application's `migrations` database table. For example, the following command will roll back all migrations in batch three:"
msgstr ""

#: ./docs/8.x/migrations.md:191
#: ./docs/9.x/migrations.md:226
#: ./docs/10.x/migrations.md:232
#: ./docs/11.x/migrations.md:232
#: ./docs/master/migrations.md:232
msgid "php artisan migrate:fresh\n\n"
"php artisan migrate:fresh --seed"
msgstr ""

#: ./docs/10.x/migrations.md:193
#: ./docs/11.x/migrations.md:193
#: ./docs/master/migrations.md:193
msgid "php artisan migrate:rollback --batch=3"
msgstr ""

#: ./docs/8.x/migrations.md:195
#: ./docs/9.x/migrations.md:233
#: ./docs/10.x/migrations.md:245
#: ./docs/11.x/migrations.md:245
#: ./docs/master/migrations.md:245
msgid "The `migrate:fresh` command will drop all database tables regardless of their prefix. This command should be used with caution when developing on a database that is shared with other applications."
msgstr ""

#: ./docs/10.x/migrations.md:197
#: ./docs/11.x/migrations.md:197
#: ./docs/master/migrations.md:197
msgid "If you would like to see the SQL statements that will be executed by the migrations without actually running them, you may provide the `--pretend` flag to the `migrate:rollback` command:"
msgstr ""

#: ./docs/8.x/migrations.md:197
#: ./docs/9.x/migrations.md:235
#: ./docs/10.x/migrations.md:247
#: ./docs/11.x/migrations.md:247
#: ./docs/master/migrations.md:247
#~ msgctxt "P"
#~ msgid "<a name=\"tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:198
#: ./docs/9.x/migrations.md:236
#: ./docs/10.x/migrations.md:248
#: ./docs/11.x/migrations.md:248
#: ./docs/master/migrations.md:248
msgid "Tables"
msgstr ""

#: ./docs/10.x/migrations.md:199
#: ./docs/11.x/migrations.md:199
#: ./docs/master/migrations.md:199
msgid "php artisan migrate:rollback --pretend"
msgstr ""

#: ./docs/8.x/migrations.md:200
#: ./docs/9.x/migrations.md:238
#: ./docs/10.x/migrations.md:250
#: ./docs/11.x/migrations.md:250
#: ./docs/master/migrations.md:250
#~ msgctxt "P"
#~ msgid "<a name=\"creating-tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:201
#: ./docs/9.x/migrations.md:239
#: ./docs/10.x/migrations.md:251
#: ./docs/11.x/migrations.md:251
#: ./docs/master/migrations.md:251
msgid "Creating Tables"
msgstr ""

#: ./docs/8.x/migrations.md:203
#: ./docs/9.x/migrations.md:241
#: ./docs/10.x/migrations.md:253
#: ./docs/11.x/migrations.md:253
#: ./docs/master/migrations.md:253
msgid "To create a new database table, use the `create` method on the `Schema` facade. The `create` method accepts two arguments: the first is the name of the table, while the second is a closure which receives a `Blueprint` object that may be used to define the new table:"
msgstr ""

#: ./docs/8.x/migrations.md:205
#: ./docs/9.x/migrations.md:243
#: ./docs/10.x/migrations.md:255
#: ./docs/11.x/migrations.md:255
#: ./docs/master/migrations.md:255
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::create('users', function (Blueprint $table) {\n"
"    $table->id();\n"
"    $table->string('name');\n"
"    $table->string('email');\n"
"    $table->timestamps();\n"
"});"
msgstr ""

#: ./docs/9.x/migrations.md:208
#: ./docs/10.x/migrations.md:214
#: ./docs/11.x/migrations.md:214
#: ./docs/master/migrations.md:214
msgid "php artisan migrate:refresh\n\n"
"# Refresh the database and run all database seeds...\n"
"php artisan migrate:refresh --seed"
msgstr ""

#: ./docs/10.x/migrations.md:210
#: ./docs/11.x/migrations.md:210
#: ./docs/master/migrations.md:210
msgid "Roll Back and Migrate Using a Single Command"
msgstr ""

#: ./docs/8.x/migrations.md:215
#: ./docs/9.x/migrations.md:253
#: ./docs/10.x/migrations.md:265
#: ./docs/11.x/migrations.md:265
#: ./docs/master/migrations.md:265
msgid "When creating the table, you may use any of the schema builder's [column methods](#creating-columns) to define the table's columns."
msgstr ""

#: ./docs/8.x/migrations.md:217
#: ./docs/9.x/migrations.md:255
#~ msgctxt "P"
#~ msgid "<a name=\"checking-for-table-column-existence\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:218
#: ./docs/9.x/migrations.md:256
msgid "Checking For Table / Column Existence"
msgstr ""

#: ./docs/8.x/migrations.md:220
#: ./docs/9.x/migrations.md:258
msgid "You may check for the existence of a table or column using the `hasTable` and `hasColumn` methods:"
msgstr ""

#: ./docs/8.x/migrations.md:222
#: ./docs/9.x/migrations.md:260
#: ./docs/10.x/migrations.md:272
msgid "if (Schema::hasTable('users')) {\n"
"    // The \"users\" table exists...\n"
"}\n\n"
"if (Schema::hasColumn('users', 'email')) {\n"
"    // The \"users\" table exists and has an \"email\" column...\n"
"}"
msgstr ""

#: ./docs/10.x/migrations.md:228
#: ./docs/11.x/migrations.md:228
#: ./docs/master/migrations.md:228
msgid "Drop All Tables and Migrate"
msgstr ""

#: ./docs/8.x/migrations.md:230
#: ./docs/9.x/migrations.md:268
#: ./docs/10.x/migrations.md:280
#: ./docs/11.x/migrations.md:284
#: ./docs/master/migrations.md:284
#~ msgctxt "P"
#~ msgid "<a name=\"database-connection-table-options\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:231
#: ./docs/9.x/migrations.md:269
msgid "Database Connection & Table Options"
msgstr ""

#: ./docs/8.x/migrations.md:233
#: ./docs/9.x/migrations.md:271
#: ./docs/10.x/migrations.md:283
#: ./docs/11.x/migrations.md:287
#: ./docs/master/migrations.md:287
msgid "If you want to perform a schema operation on a database connection that is not your application's default connection, use the `connection` method:"
msgstr ""

#: ./docs/8.x/migrations.md:235
#: ./docs/9.x/migrations.md:273
#: ./docs/10.x/migrations.md:285
#: ./docs/11.x/migrations.md:289
#: ./docs/master/migrations.md:289
msgid "Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n"
"    $table->id();\n"
"});"
msgstr ""

#: ./docs/10.x/migrations.md:238
#: ./docs/11.x/migrations.md:238
#: ./docs/master/migrations.md:238
msgid "By default, the `migrate:fresh` command only drops tables from the default database connection. However, you may use the `--database` option to specify the database connection that should be migrated. The database connection name should correspond to a connection defined in your application's `database` [configuration file](/docs/{{version}}/configuration):"
msgstr ""

#: ./docs/8.x/migrations.md:239
#: ./docs/9.x/migrations.md:277
#: ./docs/10.x/migrations.md:289
#: ./docs/master/migrations.md:293
msgid "In addition, a few other properties and methods may be used to define other aspects of the table's creation. The `engine` property may be used to specify the table's storage engine when using MySQL:"
msgstr ""

#: ./docs/10.x/migrations.md:240
#: ./docs/11.x/migrations.md:240
#: ./docs/master/migrations.md:240
msgid "php artisan migrate:fresh --database=admin"
msgstr ""

#: ./docs/8.x/migrations.md:241
#: ./docs/9.x/migrations.md:279
#: ./docs/10.x/migrations.md:291
msgid "Schema::create('users', function (Blueprint $table) {\n"
"    $table->engine = 'InnoDB';\n\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:247
#: ./docs/9.x/migrations.md:285
#: ./docs/10.x/migrations.md:297
#: ./docs/master/migrations.md:301
msgid "The `charset` and `collation` properties may be used to specify the character set and collation for the created table when using MySQL:"
msgstr ""

#: ./docs/8.x/migrations.md:249
#: ./docs/9.x/migrations.md:287
#: ./docs/10.x/migrations.md:299
msgid "Schema::create('users', function (Blueprint $table) {\n"
"    $table->charset = 'utf8mb4';\n"
"    $table->collation = 'utf8mb4_unicode_ci';\n\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:256
#: ./docs/9.x/migrations.md:294
#: ./docs/10.x/migrations.md:306
#: ./docs/11.x/migrations.md:310
#: ./docs/master/migrations.md:310
msgid "The `temporary` method may be used to indicate that the table should be \"temporary\". Temporary tables are only visible to the current connection's database session and are dropped automatically when the connection is closed:"
msgstr ""

#: ./docs/8.x/migrations.md:258
#: ./docs/9.x/migrations.md:296
#: ./docs/10.x/migrations.md:308
#: ./docs/11.x/migrations.md:312
#: ./docs/master/migrations.md:312
msgid "Schema::create('calculations', function (Blueprint $table) {\n"
"    $table->temporary();\n\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:264
#: ./docs/9.x/migrations.md:310
#: ./docs/10.x/migrations.md:322
#: ./docs/11.x/migrations.md:326
#: ./docs/master/migrations.md:326
#~ msgctxt "P"
#~ msgid "<a name=\"updating-tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:265
#: ./docs/9.x/migrations.md:311
#: ./docs/10.x/migrations.md:323
#: ./docs/11.x/migrations.md:327
#: ./docs/master/migrations.md:327
msgid "Updating Tables"
msgstr ""

#: ./docs/10.x/migrations.md:267
#: ./docs/11.x/migrations.md:267
#: ./docs/master/migrations.md:267
#~ msgctxt "P"
#~ msgid "<a name=\"determining-table-column-existence\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:267
#: ./docs/9.x/migrations.md:313
#: ./docs/10.x/migrations.md:325
#: ./docs/11.x/migrations.md:329
#: ./docs/master/migrations.md:329
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives a `Blueprint` instance you may use to add columns or indexes to the table:"
msgstr ""

#: ./docs/10.x/migrations.md:268
#: ./docs/11.x/migrations.md:268
#: ./docs/master/migrations.md:268
msgid "Determining Table / Column Existence"
msgstr ""

#: ./docs/8.x/migrations.md:269
#: ./docs/8.x/migrations.md:304
#: ./docs/9.x/migrations.md:315
#: ./docs/9.x/migrations.md:350
#: ./docs/10.x/migrations.md:327
#: ./docs/10.x/migrations.md:362
#: ./docs/11.x/migrations.md:331
#: ./docs/11.x/migrations.md:366
#: ./docs/master/migrations.md:331
#: ./docs/master/migrations.md:366
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->integer('votes');\n"
"});"
msgstr ""

#: ./docs/10.x/migrations.md:270
msgid "You may determine the existence of a table or column using the `hasTable` and `hasColumn` methods:"
msgstr ""

#: ./docs/11.x/migrations.md:270
#: ./docs/master/migrations.md:270
msgid "You may determine the existence of a table, column, or index using the `hasTable`, `hasColumn`, and `hasIndex` methods:"
msgstr ""

#: ./docs/11.x/migrations.md:272
#: ./docs/master/migrations.md:272
msgid "if (Schema::hasTable('users')) {\n"
"    // The \"users\" table exists...\n"
"}\n\n"
"if (Schema::hasColumn('users', 'email')) {\n"
"    // The \"users\" table exists and has an \"email\" column...\n"
"}\n\n"
"if (Schema::hasIndex('users', ['email'], 'unique')) {\n"
"    // The \"users\" table exists and has a unique index on the \"email\" column...\n"
"}"
msgstr ""

#: ./docs/8.x/migrations.md:276
#: ./docs/9.x/migrations.md:322
#: ./docs/10.x/migrations.md:334
#: ./docs/11.x/migrations.md:338
#: ./docs/master/migrations.md:338
#~ msgctxt "P"
#~ msgid "<a name=\"renaming-and-dropping-tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:277
#: ./docs/9.x/migrations.md:323
#: ./docs/10.x/migrations.md:335
#: ./docs/11.x/migrations.md:339
#: ./docs/master/migrations.md:339
msgid "Renaming / Dropping Tables"
msgstr ""

#: ./docs/8.x/migrations.md:279
#: ./docs/9.x/migrations.md:325
#: ./docs/10.x/migrations.md:337
#: ./docs/11.x/migrations.md:341
#: ./docs/master/migrations.md:341
msgid "To rename an existing database table, use the `rename` method:"
msgstr ""

#: ./docs/10.x/migrations.md:281
#: ./docs/11.x/migrations.md:285
#: ./docs/master/migrations.md:285
msgid "Database Connection and Table Options"
msgstr ""

#: ./docs/8.x/migrations.md:281
#: ./docs/9.x/migrations.md:327
#: ./docs/10.x/migrations.md:339
#: ./docs/11.x/migrations.md:343
#: ./docs/master/migrations.md:343
msgid "use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::rename($from, $to);"
msgstr ""

#: ./docs/8.x/migrations.md:285
#: ./docs/9.x/migrations.md:331
#: ./docs/10.x/migrations.md:343
#: ./docs/11.x/migrations.md:347
#: ./docs/master/migrations.md:347
msgid "To drop an existing table, you may use the `drop` or `dropIfExists` methods:"
msgstr ""

#: ./docs/8.x/migrations.md:287
#: ./docs/9.x/migrations.md:333
#: ./docs/10.x/migrations.md:345
#: ./docs/11.x/migrations.md:349
#: ./docs/master/migrations.md:349
msgid "Schema::drop('users');\n\n"
"Schema::dropIfExists('users');"
msgstr ""

#: ./docs/8.x/migrations.md:291
#: ./docs/9.x/migrations.md:337
#: ./docs/10.x/migrations.md:349
#: ./docs/11.x/migrations.md:353
#: ./docs/master/migrations.md:353
#~ msgctxt "P"
#~ msgid "<a name=\"renaming-tables-with-foreign-keys\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:292
#: ./docs/9.x/migrations.md:338
#: ./docs/10.x/migrations.md:350
#: ./docs/11.x/migrations.md:354
#: ./docs/master/migrations.md:354
msgid "Renaming Tables With Foreign Keys"
msgstr ""

#: ./docs/11.x/migrations.md:293
msgid "In addition, a few other properties and methods may be used to define other aspects of the table's creation. The `engine` property may be used to specify the table's storage engine when using MariaDB or MySQL:"
msgstr ""

#: ./docs/8.x/migrations.md:294
#: ./docs/9.x/migrations.md:340
#: ./docs/10.x/migrations.md:352
#: ./docs/11.x/migrations.md:356
#: ./docs/master/migrations.md:356
msgid "Before renaming a table, you should verify that any foreign key constraints on the table have an explicit name in your migration files instead of letting Laravel assign a convention based name. Otherwise, the foreign key constraint name will refer to the old table name."
msgstr ""

#: ./docs/11.x/migrations.md:295
#: ./docs/master/migrations.md:295
msgid "Schema::create('users', function (Blueprint $table) {\n"
"    $table->engine('InnoDB');\n\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:296
#: ./docs/9.x/migrations.md:342
#: ./docs/10.x/migrations.md:354
#: ./docs/11.x/migrations.md:358
#: ./docs/master/migrations.md:358
#~ msgctxt "P"
#~ msgid "<a name=\"columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:297
#: ./docs/9.x/migrations.md:343
#: ./docs/10.x/migrations.md:355
#: ./docs/11.x/migrations.md:359
#: ./docs/master/migrations.md:359
msgid "Columns"
msgstr ""

#: ./docs/8.x/migrations.md:299
#: ./docs/9.x/migrations.md:345
#: ./docs/10.x/migrations.md:357
#: ./docs/11.x/migrations.md:361
#: ./docs/master/migrations.md:361
#~ msgctxt "P"
#~ msgid "<a name=\"creating-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:300
#: ./docs/9.x/migrations.md:346
#: ./docs/10.x/migrations.md:358
#: ./docs/11.x/migrations.md:362
#: ./docs/master/migrations.md:362
msgid "Creating Columns"
msgstr ""

#: ./docs/11.x/migrations.md:301
msgid "The `charset` and `collation` properties may be used to specify the character set and collation for the created table when using MariaDB or MySQL:"
msgstr ""

#: ./docs/8.x/migrations.md:302
#: ./docs/9.x/migrations.md:348
#: ./docs/10.x/migrations.md:360
#: ./docs/11.x/migrations.md:364
#: ./docs/master/migrations.md:364
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives an `Illuminate\\Database\\Schema\\Blueprint` instance you may use to add columns to the table:"
msgstr ""

#: ./docs/9.x/migrations.md:302
#: ./docs/10.x/migrations.md:314
msgid "If you would like to add a \"comment\" to a database table, you may invoke the `comment` method on the table instance. Table comments are currently only supported by MySQL and Postgres:"
msgstr ""

#: ./docs/11.x/migrations.md:303
#: ./docs/master/migrations.md:303
msgid "Schema::create('users', function (Blueprint $table) {\n"
"    $table->charset('utf8mb4');\n"
"    $table->collation('utf8mb4_unicode_ci');\n\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/9.x/migrations.md:304
#: ./docs/10.x/migrations.md:316
#: ./docs/11.x/migrations.md:320
#: ./docs/master/migrations.md:320
msgid "Schema::create('calculations', function (Blueprint $table) {\n"
"    $table->comment('Business calculations');\n\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:311
#: ./docs/9.x/migrations.md:357
#: ./docs/10.x/migrations.md:369
#: ./docs/11.x/migrations.md:373
#: ./docs/master/migrations.md:373
#~ msgctxt "P"
#~ msgid "<a name=\"available-column-types\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:312
#: ./docs/9.x/migrations.md:358
#: ./docs/10.x/migrations.md:370
#: ./docs/11.x/migrations.md:374
#: ./docs/master/migrations.md:374
msgid "Available Column Types"
msgstr ""

#: ./docs/8.x/migrations.md:314
#: ./docs/9.x/migrations.md:360
#: ./docs/10.x/migrations.md:372
#: ./docs/11.x/migrations.md:376
#: ./docs/master/migrations.md:376
msgid "The schema builder blueprint offers a variety of methods that correspond to the different types of columns you can add to your database tables. Each of the available methods are listed in the table below:"
msgstr ""

#: ./docs/11.x/migrations.md:318
msgid "If you would like to add a \"comment\" to a database table, you may invoke the `comment` method on the table instance. Table comments are currently only supported by MariaDB, MySQL, and PostgreSQL:"
msgstr ""

#: ./docs/master/migrations.md:318
msgid "If you would like to add a \"comment\" to a database table, you may invoke the `comment` method on the table instance. Table comments are currently only supported by MySQL and PostgreSQL:"
msgstr ""

#: ./docs/8.x/migrations.md:337
msgid "[bigIncrements](#column-method-bigIncrements)\n"
"[bigInteger](#column-method-bigInteger)\n"
"[binary](#column-method-binary)\n"
"[boolean](#column-method-boolean)\n"
"[char](#column-method-char)\n"
"[dateTimeTz](#column-method-dateTimeTz)\n"
"[dateTime](#column-method-dateTime)\n"
"[date](#column-method-date)\n"
"[decimal](#column-method-decimal)\n"
"[double](#column-method-double)\n"
"[enum](#column-method-enum)\n"
"[float](#column-method-float)\n"
"[foreignId](#column-method-foreignId)\n"
"[foreignIdFor](#column-method-foreignIdFor)\n"
"[foreignUuid](#column-method-foreignUuid)\n"
"[geometryCollection](#column-method-geometryCollection)\n"
"[geometry](#column-method-geometry)\n"
"[id](#column-method-id)\n"
"[increments](#column-method-increments)\n"
"[integer](#column-method-integer)\n"
"[ipAddress](#column-method-ipAddress)\n"
"[json](#column-method-json)\n"
"[jsonb](#column-method-jsonb)\n"
"[lineString](#column-method-lineString)\n"
"[longText](#column-method-longText)\n"
"[macAddress](#column-method-macAddress)\n"
"[mediumIncrements](#column-method-mediumIncrements)\n"
"[mediumInteger](#column-method-mediumInteger)\n"
"[mediumText](#column-method-mediumText)\n"
"[morphs](#column-method-morphs)\n"
"[multiLineString](#column-method-multiLineString)\n"
"[multiPoint](#column-method-multiPoint)\n"
"[multiPolygon](#column-method-multiPolygon)\n"
"[nullableMorphs](#column-method-nullableMorphs)\n"
"[nullableTimestamps](#column-method-nullableTimestamps)\n"
"[nullableUuidMorphs](#column-method-nullableUuidMorphs)\n"
"[point](#column-method-point)\n"
"[polygon](#column-method-polygon)\n"
"[rememberToken](#column-method-rememberToken)\n"
"[set](#column-method-set)\n"
"[smallIncrements](#column-method-smallIncrements)\n"
"[smallInteger](#column-method-smallInteger)\n"
"[softDeletesTz](#column-method-softDeletesTz)\n"
"[softDeletes](#column-method-softDeletes)\n"
"[string](#column-method-string)\n"
"[text](#column-method-text)\n"
"[timeTz](#column-method-timeTz)\n"
"[time](#column-method-time)\n"
"[timestampTz](#column-method-timestampTz)\n"
"[timestamp](#column-method-timestamp)\n"
"[timestampsTz](#column-method-timestampsTz)\n"
"[timestamps](#column-method-timestamps)\n"
"[tinyIncrements](#column-method-tinyIncrements)\n"
"[tinyInteger](#column-method-tinyInteger)\n"
"[tinyText](#column-method-tinyText)\n"
"[unsignedBigInteger](#column-method-unsignedBigInteger)\n"
"[unsignedDecimal](#column-method-unsignedDecimal)\n"
"[unsignedInteger](#column-method-unsignedInteger)\n"
"[unsignedMediumInteger](#column-method-unsignedMediumInteger)\n"
"[unsignedSmallInteger](#column-method-unsignedSmallInteger)\n"
"[unsignedTinyInteger](#column-method-unsignedTinyInteger)\n"
"[uuidMorphs](#column-method-uuidMorphs)\n"
"[uuid](#column-method-uuid)\n"
"[year](#column-method-year)"
msgstr ""

#: ./docs/9.x/migrations.md:385
#: ./docs/10.x/migrations.md:397
msgid "[bigIncrements](#column-method-bigIncrements)\n"
"[bigInteger](#column-method-bigInteger)\n"
"[binary](#column-method-binary)\n"
"[boolean](#column-method-boolean)\n"
"[char](#column-method-char)\n"
"[dateTimeTz](#column-method-dateTimeTz)\n"
"[dateTime](#column-method-dateTime)\n"
"[date](#column-method-date)\n"
"[decimal](#column-method-decimal)\n"
"[double](#column-method-double)\n"
"[enum](#column-method-enum)\n"
"[float](#column-method-float)\n"
"[foreignId](#column-method-foreignId)\n"
"[foreignIdFor](#column-method-foreignIdFor)\n"
"[foreignUlid](#column-method-foreignUlid)\n"
"[foreignUuid](#column-method-foreignUuid)\n"
"[geometryCollection](#column-method-geometryCollection)\n"
"[geometry](#column-method-geometry)\n"
"[id](#column-method-id)\n"
"[increments](#column-method-increments)\n"
"[integer](#column-method-integer)\n"
"[ipAddress](#column-method-ipAddress)\n"
"[json](#column-method-json)\n"
"[jsonb](#column-method-jsonb)\n"
"[lineString](#column-method-lineString)\n"
"[longText](#column-method-longText)\n"
"[macAddress](#column-method-macAddress)\n"
"[mediumIncrements](#column-method-mediumIncrements)\n"
"[mediumInteger](#column-method-mediumInteger)\n"
"[mediumText](#column-method-mediumText)\n"
"[morphs](#column-method-morphs)\n"
"[multiLineString](#column-method-multiLineString)\n"
"[multiPoint](#column-method-multiPoint)\n"
"[multiPolygon](#column-method-multiPolygon)\n"
"[nullableMorphs](#column-method-nullableMorphs)\n"
"[nullableTimestamps](#column-method-nullableTimestamps)\n"
"[nullableUlidMorphs](#column-method-nullableUlidMorphs)\n"
"[nullableUuidMorphs](#column-method-nullableUuidMorphs)\n"
"[point](#column-method-point)\n"
"[polygon](#column-method-polygon)\n"
"[rememberToken](#column-method-rememberToken)\n"
"[set](#column-method-set)\n"
"[smallIncrements](#column-method-smallIncrements)\n"
"[smallInteger](#column-method-smallInteger)\n"
"[softDeletesTz](#column-method-softDeletesTz)\n"
"[softDeletes](#column-method-softDeletes)\n"
"[string](#column-method-string)\n"
"[text](#column-method-text)\n"
"[timeTz](#column-method-timeTz)\n"
"[time](#column-method-time)\n"
"[timestampTz](#column-method-timestampTz)\n"
"[timestamp](#column-method-timestamp)\n"
"[timestampsTz](#column-method-timestampsTz)\n"
"[timestamps](#column-method-timestamps)\n"
"[tinyIncrements](#column-method-tinyIncrements)\n"
"[tinyInteger](#column-method-tinyInteger)\n"
"[tinyText](#column-method-tinyText)\n"
"[unsignedBigInteger](#column-method-unsignedBigInteger)\n"
"[unsignedDecimal](#column-method-unsignedDecimal)\n"
"[unsignedInteger](#column-method-unsignedInteger)\n"
"[unsignedMediumInteger](#column-method-unsignedMediumInteger)\n"
"[unsignedSmallInteger](#column-method-unsignedSmallInteger)\n"
"[unsignedTinyInteger](#column-method-unsignedTinyInteger)\n"
"[ulidMorphs](#column-method-ulidMorphs)\n"
"[uuidMorphs](#column-method-uuidMorphs)\n"
"[ulid](#column-method-ulid)\n"
"[uuid](#column-method-uuid)\n"
"[year](#column-method-year)"
msgstr ""

#: ./docs/11.x/migrations.md:401
msgid "[bigIncrements](#column-method-bigIncrements)\n"
"[bigInteger](#column-method-bigInteger)\n"
"[binary](#column-method-binary)\n"
"[boolean](#column-method-boolean)\n"
"[char](#column-method-char)\n"
"[dateTimeTz](#column-method-dateTimeTz)\n"
"[dateTime](#column-method-dateTime)\n"
"[date](#column-method-date)\n"
"[decimal](#column-method-decimal)\n"
"[double](#column-method-double)\n"
"[enum](#column-method-enum)\n"
"[float](#column-method-float)\n"
"[foreignId](#column-method-foreignId)\n"
"[foreignIdFor](#column-method-foreignIdFor)\n"
"[foreignUlid](#column-method-foreignUlid)\n"
"[foreignUuid](#column-method-foreignUuid)\n"
"[geography](#column-method-geography)\n"
"[geometry](#column-method-geometry)\n"
"[id](#column-method-id)\n"
"[increments](#column-method-increments)\n"
"[integer](#column-method-integer)\n"
"[ipAddress](#column-method-ipAddress)\n"
"[json](#column-method-json)\n"
"[jsonb](#column-method-jsonb)\n"
"[longText](#column-method-longText)\n"
"[macAddress](#column-method-macAddress)\n"
"[mediumIncrements](#column-method-mediumIncrements)\n"
"[mediumInteger](#column-method-mediumInteger)\n"
"[mediumText](#column-method-mediumText)\n"
"[morphs](#column-method-morphs)\n"
"[nullableMorphs](#column-method-nullableMorphs)\n"
"[nullableTimestamps](#column-method-nullableTimestamps)\n"
"[nullableUlidMorphs](#column-method-nullableUlidMorphs)\n"
"[nullableUuidMorphs](#column-method-nullableUuidMorphs)\n"
"[rememberToken](#column-method-rememberToken)\n"
"[set](#column-method-set)\n"
"[smallIncrements](#column-method-smallIncrements)\n"
"[smallInteger](#column-method-smallInteger)\n"
"[softDeletesTz](#column-method-softDeletesTz)\n"
"[softDeletes](#column-method-softDeletes)\n"
"[string](#column-method-string)\n"
"[text](#column-method-text)\n"
"[timeTz](#column-method-timeTz)\n"
"[time](#column-method-time)\n"
"[timestampTz](#column-method-timestampTz)\n"
"[timestamp](#column-method-timestamp)\n"
"[timestampsTz](#column-method-timestampsTz)\n"
"[timestamps](#column-method-timestamps)\n"
"[tinyIncrements](#column-method-tinyIncrements)\n"
"[tinyInteger](#column-method-tinyInteger)\n"
"[tinyText](#column-method-tinyText)\n"
"[unsignedBigInteger](#column-method-unsignedBigInteger)\n"
"[unsignedInteger](#column-method-unsignedInteger)\n"
"[unsignedMediumInteger](#column-method-unsignedMediumInteger)\n"
"[unsignedSmallInteger](#column-method-unsignedSmallInteger)\n"
"[unsignedTinyInteger](#column-method-unsignedTinyInteger)\n"
"[ulidMorphs](#column-method-ulidMorphs)\n"
"[uuidMorphs](#column-method-uuidMorphs)\n"
"[ulid](#column-method-ulid)\n"
"[uuid](#column-method-uuid)\n"
"[vector](#column-method-vector)\n"
"[year](#column-method-year)"
msgstr ""

#: ./docs/master/migrations.md:401
msgid "[bigIncrements](#column-method-bigIncrements)\n"
"[bigInteger](#column-method-bigInteger)\n"
"[binary](#column-method-binary)\n"
"[boolean](#column-method-boolean)\n"
"[char](#column-method-char)\n"
"[dateTimeTz](#column-method-dateTimeTz)\n"
"[dateTime](#column-method-dateTime)\n"
"[date](#column-method-date)\n"
"[decimal](#column-method-decimal)\n"
"[double](#column-method-double)\n"
"[enum](#column-method-enum)\n"
"[float](#column-method-float)\n"
"[foreignId](#column-method-foreignId)\n"
"[foreignIdFor](#column-method-foreignIdFor)\n"
"[foreignUlid](#column-method-foreignUlid)\n"
"[foreignUuid](#column-method-foreignUuid)\n"
"[geography](#column-method-geography)\n"
"[geometry](#column-method-geometry)\n"
"[id](#column-method-id)\n"
"[increments](#column-method-increments)\n"
"[integer](#column-method-integer)\n"
"[ipAddress](#column-method-ipAddress)\n"
"[json](#column-method-json)\n"
"[jsonb](#column-method-jsonb)\n"
"[longText](#column-method-longText)\n"
"[macAddress](#column-method-macAddress)\n"
"[mediumIncrements](#column-method-mediumIncrements)\n"
"[mediumInteger](#column-method-mediumInteger)\n"
"[mediumText](#column-method-mediumText)\n"
"[morphs](#column-method-morphs)\n"
"[nullableMorphs](#column-method-nullableMorphs)\n"
"[nullableTimestamps](#column-method-nullableTimestamps)\n"
"[nullableUlidMorphs](#column-method-nullableUlidMorphs)\n"
"[nullableUuidMorphs](#column-method-nullableUuidMorphs)\n"
"[rememberToken](#column-method-rememberToken)\n"
"[set](#column-method-set)\n"
"[smallIncrements](#column-method-smallIncrements)\n"
"[smallInteger](#column-method-smallInteger)\n"
"[softDeletesTz](#column-method-softDeletesTz)\n"
"[softDeletes](#column-method-softDeletes)\n"
"[string](#column-method-string)\n"
"[text](#column-method-text)\n"
"[timeTz](#column-method-timeTz)\n"
"[time](#column-method-time)\n"
"[timestampTz](#column-method-timestampTz)\n"
"[timestamp](#column-method-timestamp)\n"
"[timestampsTz](#column-method-timestampsTz)\n"
"[timestamps](#column-method-timestamps)\n"
"[tinyIncrements](#column-method-tinyIncrements)\n"
"[tinyInteger](#column-method-tinyInteger)\n"
"[tinyText](#column-method-tinyText)\n"
"[unsignedBigInteger](#column-method-unsignedBigInteger)\n"
"[unsignedInteger](#column-method-unsignedInteger)\n"
"[unsignedMediumInteger](#column-method-unsignedMediumInteger)\n"
"[unsignedSmallInteger](#column-method-unsignedSmallInteger)\n"
"[unsignedTinyInteger](#column-method-unsignedTinyInteger)\n"
"[ulidMorphs](#column-method-ulidMorphs)\n"
"[uuidMorphs](#column-method-uuidMorphs)\n"
"[ulid](#column-method-ulid)\n"
"[uuid](#column-method-uuid)\n"
"[year](#column-method-year)"
msgstr ""

#: ./docs/8.x/migrations.md:404
#: ./docs/9.x/migrations.md:456
#: ./docs/10.x/migrations.md:468
#: ./docs/11.x/migrations.md:466
#: ./docs/master/migrations.md:465
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-bigIncrements\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:405
#: ./docs/9.x/migrations.md:457
#: ./docs/10.x/migrations.md:469
#: ./docs/11.x/migrations.md:467
#: ./docs/master/migrations.md:466
msgid "`bigIncrements()` {.collection-method .first-collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:407
#: ./docs/9.x/migrations.md:459
#: ./docs/10.x/migrations.md:471
#: ./docs/11.x/migrations.md:469
#: ./docs/master/migrations.md:468
msgid "The `bigIncrements` method creates an auto-incrementing `UNSIGNED BIGINT` (primary key) equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:409
#: ./docs/9.x/migrations.md:461
#: ./docs/10.x/migrations.md:473
#: ./docs/11.x/migrations.md:471
#: ./docs/master/migrations.md:470
msgid "$table->bigIncrements('id');"
msgstr ""

#: ./docs/8.x/migrations.md:411
#: ./docs/9.x/migrations.md:463
#: ./docs/10.x/migrations.md:475
#: ./docs/11.x/migrations.md:473
#: ./docs/master/migrations.md:472
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-bigInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:412
#: ./docs/9.x/migrations.md:464
#: ./docs/10.x/migrations.md:476
#: ./docs/11.x/migrations.md:474
#: ./docs/master/migrations.md:473
msgid "`bigInteger()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:414
#: ./docs/9.x/migrations.md:466
#: ./docs/10.x/migrations.md:478
#: ./docs/11.x/migrations.md:476
#: ./docs/master/migrations.md:475
msgid "The `bigInteger` method creates a `BIGINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:416
#: ./docs/9.x/migrations.md:468
#: ./docs/10.x/migrations.md:480
#: ./docs/11.x/migrations.md:478
#: ./docs/master/migrations.md:477
msgid "$table->bigInteger('votes');"
msgstr ""

#: ./docs/8.x/migrations.md:418
#: ./docs/9.x/migrations.md:470
#: ./docs/10.x/migrations.md:482
#: ./docs/11.x/migrations.md:480
#: ./docs/master/migrations.md:479
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-binary\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:419
#: ./docs/9.x/migrations.md:471
#: ./docs/10.x/migrations.md:483
#: ./docs/11.x/migrations.md:481
#: ./docs/master/migrations.md:480
msgid "`binary()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:421
#: ./docs/9.x/migrations.md:473
#: ./docs/10.x/migrations.md:485
#: ./docs/11.x/migrations.md:483
#: ./docs/master/migrations.md:482
msgid "The `binary` method creates a `BLOB` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:423
#: ./docs/9.x/migrations.md:475
#: ./docs/10.x/migrations.md:487
#: ./docs/11.x/migrations.md:485
#: ./docs/master/migrations.md:484
msgid "$table->binary('photo');"
msgstr ""

#: ./docs/8.x/migrations.md:425
#: ./docs/9.x/migrations.md:477
#: ./docs/10.x/migrations.md:489
#: ./docs/11.x/migrations.md:493
#: ./docs/master/migrations.md:492
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-boolean\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:426
#: ./docs/9.x/migrations.md:478
#: ./docs/10.x/migrations.md:490
#: ./docs/11.x/migrations.md:494
#: ./docs/master/migrations.md:493
msgid "`boolean()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:428
#: ./docs/9.x/migrations.md:480
#: ./docs/10.x/migrations.md:492
#: ./docs/11.x/migrations.md:496
#: ./docs/master/migrations.md:495
msgid "The `boolean` method creates a `BOOLEAN` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:430
#: ./docs/9.x/migrations.md:482
#: ./docs/10.x/migrations.md:494
#: ./docs/11.x/migrations.md:498
#: ./docs/master/migrations.md:497
msgid "$table->boolean('confirmed');"
msgstr ""

#: ./docs/8.x/migrations.md:432
#: ./docs/9.x/migrations.md:484
#: ./docs/10.x/migrations.md:496
#: ./docs/11.x/migrations.md:500
#: ./docs/master/migrations.md:499
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-char\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:433
#: ./docs/9.x/migrations.md:485
#: ./docs/10.x/migrations.md:497
#: ./docs/11.x/migrations.md:501
#: ./docs/master/migrations.md:500
msgid "`char()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:435
#: ./docs/9.x/migrations.md:487
#: ./docs/10.x/migrations.md:499
#: ./docs/11.x/migrations.md:503
#: ./docs/master/migrations.md:502
msgid "The `char` method creates a `CHAR` equivalent column with of a given length:"
msgstr ""

#: ./docs/8.x/migrations.md:437
#: ./docs/9.x/migrations.md:489
#: ./docs/10.x/migrations.md:501
msgid "$table->char('name', 100);"
msgstr ""

#: ./docs/8.x/migrations.md:439
#: ./docs/9.x/migrations.md:491
#: ./docs/10.x/migrations.md:503
#: ./docs/11.x/migrations.md:507
#: ./docs/master/migrations.md:506
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-dateTimeTz\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:440
#: ./docs/9.x/migrations.md:492
#: ./docs/10.x/migrations.md:504
#: ./docs/11.x/migrations.md:508
#: ./docs/master/migrations.md:507
msgid "`dateTimeTz()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:442
#: ./docs/9.x/migrations.md:494
#: ./docs/10.x/migrations.md:506
msgid "The `dateTimeTz` method creates a `DATETIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""

#: ./docs/8.x/migrations.md:444
#: ./docs/9.x/migrations.md:496
#: ./docs/10.x/migrations.md:508
msgid "$table->dateTimeTz('created_at', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:446
#: ./docs/9.x/migrations.md:498
#: ./docs/10.x/migrations.md:510
#: ./docs/11.x/migrations.md:514
#: ./docs/master/migrations.md:513
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-dateTime\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:447
#: ./docs/9.x/migrations.md:499
#: ./docs/10.x/migrations.md:511
#: ./docs/11.x/migrations.md:515
#: ./docs/master/migrations.md:514
msgid "`dateTime()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:449
#: ./docs/9.x/migrations.md:501
#: ./docs/10.x/migrations.md:513
msgid "The `dateTime` method creates a `DATETIME` equivalent column with an optional precision (total digits):"
msgstr ""

#: ./docs/8.x/migrations.md:451
#: ./docs/9.x/migrations.md:503
#: ./docs/10.x/migrations.md:515
msgid "$table->dateTime('created_at', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:453
#: ./docs/9.x/migrations.md:505
#: ./docs/10.x/migrations.md:517
#: ./docs/11.x/migrations.md:521
#: ./docs/master/migrations.md:520
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-date\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:454
#: ./docs/9.x/migrations.md:506
#: ./docs/10.x/migrations.md:518
#: ./docs/11.x/migrations.md:522
#: ./docs/master/migrations.md:521
msgid "`date()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:456
#: ./docs/9.x/migrations.md:508
#: ./docs/10.x/migrations.md:520
#: ./docs/11.x/migrations.md:524
#: ./docs/master/migrations.md:523
msgid "The `date` method creates a `DATE` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:458
#: ./docs/9.x/migrations.md:510
#: ./docs/10.x/migrations.md:522
#: ./docs/11.x/migrations.md:526
#: ./docs/master/migrations.md:525
msgid "$table->date('created_at');"
msgstr ""

#: ./docs/8.x/migrations.md:460
#: ./docs/9.x/migrations.md:512
#: ./docs/10.x/migrations.md:524
#: ./docs/11.x/migrations.md:528
#: ./docs/master/migrations.md:527
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-decimal\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:461
#: ./docs/9.x/migrations.md:513
#: ./docs/10.x/migrations.md:525
#: ./docs/11.x/migrations.md:529
#: ./docs/master/migrations.md:528
msgid "`decimal()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:463
#: ./docs/9.x/migrations.md:515
#: ./docs/10.x/migrations.md:527
#: ./docs/11.x/migrations.md:531
#: ./docs/master/migrations.md:530
msgid "The `decimal` method creates a `DECIMAL` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""

#: ./docs/8.x/migrations.md:465
#: ./docs/9.x/migrations.md:517
#: ./docs/10.x/migrations.md:529
msgid "$table->decimal('amount', $precision = 8, $scale = 2);"
msgstr ""

#: ./docs/8.x/migrations.md:467
#: ./docs/9.x/migrations.md:519
#: ./docs/10.x/migrations.md:531
#: ./docs/11.x/migrations.md:535
#: ./docs/master/migrations.md:534
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-double\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:468
#: ./docs/9.x/migrations.md:520
#: ./docs/10.x/migrations.md:532
#: ./docs/11.x/migrations.md:536
#: ./docs/master/migrations.md:535
msgid "`double()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:470
#: ./docs/9.x/migrations.md:522
#: ./docs/10.x/migrations.md:534
msgid "The `double` method creates a `DOUBLE` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""

#: ./docs/8.x/migrations.md:472
#: ./docs/9.x/migrations.md:524
#: ./docs/10.x/migrations.md:536
msgid "$table->double('amount', 8, 2);"
msgstr ""

#: ./docs/8.x/migrations.md:474
#: ./docs/9.x/migrations.md:526
#: ./docs/10.x/migrations.md:538
#: ./docs/11.x/migrations.md:542
#: ./docs/master/migrations.md:541
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-enum\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:475
#: ./docs/9.x/migrations.md:527
#: ./docs/10.x/migrations.md:539
#: ./docs/11.x/migrations.md:543
#: ./docs/master/migrations.md:542
msgid "`enum()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:477
#: ./docs/9.x/migrations.md:529
#: ./docs/10.x/migrations.md:541
#: ./docs/11.x/migrations.md:545
#: ./docs/master/migrations.md:544
msgid "The `enum` method creates a `ENUM` equivalent column with the given valid values:"
msgstr ""

#: ./docs/8.x/migrations.md:479
#: ./docs/9.x/migrations.md:531
#: ./docs/10.x/migrations.md:543
#: ./docs/11.x/migrations.md:547
#: ./docs/master/migrations.md:546
msgid "$table->enum('difficulty', ['easy', 'hard']);"
msgstr ""

#: ./docs/8.x/migrations.md:481
#: ./docs/9.x/migrations.md:533
#: ./docs/10.x/migrations.md:545
#: ./docs/11.x/migrations.md:549
#: ./docs/master/migrations.md:548
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-float\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:482
#: ./docs/9.x/migrations.md:534
#: ./docs/10.x/migrations.md:546
#: ./docs/11.x/migrations.md:550
#: ./docs/master/migrations.md:549
msgid "`float()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:484
#: ./docs/9.x/migrations.md:536
#: ./docs/10.x/migrations.md:548
msgid "The `float` method creates a `FLOAT` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""

#: ./docs/8.x/migrations.md:486
#: ./docs/9.x/migrations.md:538
#: ./docs/10.x/migrations.md:550
msgid "$table->float('amount', 8, 2);"
msgstr ""

#: ./docs/11.x/migrations.md:487
#: ./docs/master/migrations.md:486
msgid "When utilizing MySQL, MariaDB, or SQL Server, you may pass `length` and `fixed` arguments to create `VARBINARY` or `BINARY` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:488
#: ./docs/9.x/migrations.md:540
#: ./docs/10.x/migrations.md:552
#: ./docs/11.x/migrations.md:556
#: ./docs/master/migrations.md:555
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-foreignId\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:489
#: ./docs/master/migrations.md:488
msgid "$table->binary('data', length: 16); // VARBINARY(16)\n\n"
"$table->binary('data', length: 16, fixed: true); // BINARY(16)"
msgstr ""

#: ./docs/8.x/migrations.md:489
#: ./docs/9.x/migrations.md:541
#: ./docs/10.x/migrations.md:553
#: ./docs/11.x/migrations.md:557
#: ./docs/master/migrations.md:556
msgid "`foreignId()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:491
#: ./docs/9.x/migrations.md:543
#: ./docs/10.x/migrations.md:555
#: ./docs/11.x/migrations.md:559
#: ./docs/master/migrations.md:558
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:493
#: ./docs/9.x/migrations.md:545
#: ./docs/10.x/migrations.md:557
#: ./docs/11.x/migrations.md:561
#: ./docs/master/migrations.md:560
msgid "$table->foreignId('user_id');"
msgstr ""

#: ./docs/8.x/migrations.md:495
#: ./docs/9.x/migrations.md:547
#: ./docs/10.x/migrations.md:559
#: ./docs/11.x/migrations.md:563
#: ./docs/master/migrations.md:562
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-foreignIdFor\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:496
#: ./docs/9.x/migrations.md:548
#: ./docs/10.x/migrations.md:560
#: ./docs/11.x/migrations.md:564
#: ./docs/master/migrations.md:563
msgid "`foreignIdFor()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:498
#: ./docs/9.x/migrations.md:550
msgid "The `foreignIdFor` method adds a `{column}_id UNSIGNED BIGINT` equivalent column for a given model class:"
msgstr ""

#: ./docs/8.x/migrations.md:500
#: ./docs/9.x/migrations.md:552
#: ./docs/10.x/migrations.md:564
#: ./docs/11.x/migrations.md:568
#: ./docs/master/migrations.md:567
msgid "$table->foreignIdFor(User::class);"
msgstr ""

#: ./docs/8.x/migrations.md:502
#: ./docs/9.x/migrations.md:561
#: ./docs/10.x/migrations.md:573
#: ./docs/11.x/migrations.md:577
#: ./docs/master/migrations.md:576
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-foreignUuid\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:503
#: ./docs/9.x/migrations.md:562
#: ./docs/10.x/migrations.md:574
#: ./docs/11.x/migrations.md:578
#: ./docs/master/migrations.md:577
msgid "`foreignUuid()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:505
#: ./docs/master/migrations.md:504
msgid "$table->char('name', length: 100);"
msgstr ""

#: ./docs/8.x/migrations.md:505
#: ./docs/9.x/migrations.md:564
#: ./docs/10.x/migrations.md:576
#: ./docs/11.x/migrations.md:580
#: ./docs/master/migrations.md:579
msgid "The `foreignUuid` method creates a `UUID` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:507
#: ./docs/9.x/migrations.md:566
#: ./docs/10.x/migrations.md:578
#: ./docs/11.x/migrations.md:582
#: ./docs/master/migrations.md:581
msgid "$table->foreignUuid('user_id');"
msgstr ""

#: ./docs/8.x/migrations.md:509
#: ./docs/9.x/migrations.md:568
#: ./docs/10.x/migrations.md:580
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-geometryCollection\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:510
#: ./docs/master/migrations.md:509
msgid "The `dateTimeTz` method creates a `DATETIME` (with timezone) equivalent column with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:510
#: ./docs/9.x/migrations.md:569
#: ./docs/10.x/migrations.md:581
msgid "`geometryCollection()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:512
#: ./docs/master/migrations.md:511
msgid "$table->dateTimeTz('created_at', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:512
#: ./docs/9.x/migrations.md:571
#: ./docs/10.x/migrations.md:583
msgid "The `geometryCollection` method creates a `GEOMETRYCOLLECTION` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:514
#: ./docs/9.x/migrations.md:573
#: ./docs/10.x/migrations.md:585
msgid "$table->geometryCollection('positions');"
msgstr ""

#: ./docs/8.x/migrations.md:516
#: ./docs/9.x/migrations.md:575
#: ./docs/10.x/migrations.md:587
#: ./docs/11.x/migrations.md:594
#: ./docs/master/migrations.md:593
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-geometry\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:517
#: ./docs/master/migrations.md:516
msgid "The `dateTime` method creates a `DATETIME` equivalent column with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:517
#: ./docs/9.x/migrations.md:576
#: ./docs/10.x/migrations.md:588
#: ./docs/11.x/migrations.md:595
#: ./docs/master/migrations.md:594
msgid "`geometry()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:519
#: ./docs/master/migrations.md:518
msgid "$table->dateTime('created_at', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:519
#: ./docs/9.x/migrations.md:578
#: ./docs/10.x/migrations.md:590
msgid "The `geometry` method creates a `GEOMETRY` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:521
#: ./docs/9.x/migrations.md:580
#: ./docs/10.x/migrations.md:592
msgid "$table->geometry('positions');"
msgstr ""

#: ./docs/8.x/migrations.md:523
#: ./docs/9.x/migrations.md:582
#: ./docs/10.x/migrations.md:594
#: ./docs/11.x/migrations.md:604
#: ./docs/master/migrations.md:603
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-id\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:524
#: ./docs/9.x/migrations.md:583
#: ./docs/10.x/migrations.md:595
#: ./docs/11.x/migrations.md:605
#: ./docs/master/migrations.md:604
msgid "`id()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:526
#: ./docs/9.x/migrations.md:585
#: ./docs/10.x/migrations.md:597
#: ./docs/11.x/migrations.md:607
#: ./docs/master/migrations.md:606
msgid "The `id` method is an alias of the `bigIncrements` method. By default, the method will create an `id` column; however, you may pass a column name if you would like to assign a different name to the column:"
msgstr ""

#: ./docs/8.x/migrations.md:528
#: ./docs/9.x/migrations.md:587
#: ./docs/10.x/migrations.md:599
#: ./docs/11.x/migrations.md:609
#: ./docs/master/migrations.md:608
msgid "$table->id();"
msgstr ""

#: ./docs/8.x/migrations.md:530
#: ./docs/9.x/migrations.md:589
#: ./docs/10.x/migrations.md:601
#: ./docs/11.x/migrations.md:611
#: ./docs/master/migrations.md:610
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-increments\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:531
#: ./docs/9.x/migrations.md:590
#: ./docs/10.x/migrations.md:602
#: ./docs/11.x/migrations.md:612
#: ./docs/master/migrations.md:611
msgid "`increments()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:533
#: ./docs/master/migrations.md:532
msgid "$table->decimal('amount', total: 8, places: 2);"
msgstr ""

#: ./docs/8.x/migrations.md:533
#: ./docs/9.x/migrations.md:592
#: ./docs/10.x/migrations.md:604
#: ./docs/11.x/migrations.md:614
#: ./docs/master/migrations.md:613
msgid "The `increments` method creates an auto-incrementing `UNSIGNED INTEGER` equivalent column as a primary key:"
msgstr ""

#: ./docs/8.x/migrations.md:535
#: ./docs/9.x/migrations.md:594
#: ./docs/10.x/migrations.md:606
#: ./docs/11.x/migrations.md:616
#: ./docs/master/migrations.md:615
msgid "$table->increments('id');"
msgstr ""

#: ./docs/8.x/migrations.md:537
#: ./docs/9.x/migrations.md:596
#: ./docs/10.x/migrations.md:608
#: ./docs/11.x/migrations.md:618
#: ./docs/master/migrations.md:617
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-integer\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:538
#: ./docs/master/migrations.md:537
msgid "The `double` method creates a `DOUBLE` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:538
#: ./docs/9.x/migrations.md:597
#: ./docs/10.x/migrations.md:609
#: ./docs/11.x/migrations.md:619
#: ./docs/master/migrations.md:618
msgid "`integer()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:540
#: ./docs/master/migrations.md:539
msgid "$table->double('amount');"
msgstr ""

#: ./docs/8.x/migrations.md:540
#: ./docs/9.x/migrations.md:599
#: ./docs/10.x/migrations.md:611
#: ./docs/11.x/migrations.md:621
#: ./docs/master/migrations.md:620
msgid "The `integer` method creates an `INTEGER` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:542
#: ./docs/9.x/migrations.md:601
#: ./docs/10.x/migrations.md:613
#: ./docs/11.x/migrations.md:623
#: ./docs/master/migrations.md:622
msgid "$table->integer('votes');"
msgstr ""

#: ./docs/8.x/migrations.md:544
#: ./docs/9.x/migrations.md:603
#: ./docs/10.x/migrations.md:615
#: ./docs/11.x/migrations.md:625
#: ./docs/master/migrations.md:624
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-ipAddress\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:545
#: ./docs/9.x/migrations.md:604
#: ./docs/10.x/migrations.md:616
#: ./docs/11.x/migrations.md:626
#: ./docs/master/migrations.md:625
msgid "`ipAddress()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:547
#: ./docs/9.x/migrations.md:606
#: ./docs/10.x/migrations.md:618
#: ./docs/11.x/migrations.md:628
#: ./docs/master/migrations.md:627
msgid "The `ipAddress` method creates a `VARCHAR` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:549
#: ./docs/9.x/migrations.md:608
#: ./docs/10.x/migrations.md:620
#: ./docs/11.x/migrations.md:630
#: ./docs/master/migrations.md:629
msgid "$table->ipAddress('visitor');"
msgstr ""

#: ./docs/8.x/migrations.md:551
#: ./docs/9.x/migrations.md:610
#: ./docs/10.x/migrations.md:624
#: ./docs/11.x/migrations.md:634
#: ./docs/master/migrations.md:633
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-json\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:552
#: ./docs/master/migrations.md:551
msgid "The `float` method creates a `FLOAT` equivalent column with the given precision:"
msgstr ""

#: ./docs/8.x/migrations.md:552
#: ./docs/9.x/migrations.md:611
#: ./docs/10.x/migrations.md:625
#: ./docs/11.x/migrations.md:635
#: ./docs/master/migrations.md:634
msgid "`json()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:554
#: ./docs/master/migrations.md:553
msgid "$table->float('amount', precision: 53);"
msgstr ""

#: ./docs/8.x/migrations.md:554
#: ./docs/9.x/migrations.md:613
#: ./docs/10.x/migrations.md:627
#: ./docs/11.x/migrations.md:637
#: ./docs/master/migrations.md:636
msgid "The `json` method creates a `JSON` equivalent column:"
msgstr ""

#: ./docs/9.x/migrations.md:554
#: ./docs/10.x/migrations.md:566
#: ./docs/11.x/migrations.md:570
#: ./docs/master/migrations.md:569
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-foreignUlid\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:555
#: ./docs/10.x/migrations.md:567
#: ./docs/11.x/migrations.md:571
#: ./docs/master/migrations.md:570
msgid "`foreignUlid()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:556
#: ./docs/9.x/migrations.md:615
#: ./docs/10.x/migrations.md:629
#: ./docs/11.x/migrations.md:639
#: ./docs/master/migrations.md:638
msgid "$table->json('options');"
msgstr ""

#: ./docs/9.x/migrations.md:557
#: ./docs/10.x/migrations.md:569
#: ./docs/11.x/migrations.md:573
#: ./docs/master/migrations.md:572
msgid "The `foreignUlid` method creates a `ULID` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:558
#: ./docs/9.x/migrations.md:617
#: ./docs/10.x/migrations.md:631
#: ./docs/11.x/migrations.md:641
#: ./docs/master/migrations.md:640
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-jsonb\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:559
#: ./docs/9.x/migrations.md:618
#: ./docs/10.x/migrations.md:632
#: ./docs/11.x/migrations.md:642
#: ./docs/master/migrations.md:641
msgid "`jsonb()` {.collection-method}"
msgstr ""

#: ./docs/9.x/migrations.md:559
#: ./docs/10.x/migrations.md:571
#: ./docs/11.x/migrations.md:575
#: ./docs/master/migrations.md:574
msgid "$table->foreignUlid('user_id');"
msgstr ""

#: ./docs/8.x/migrations.md:561
#: ./docs/9.x/migrations.md:620
#: ./docs/10.x/migrations.md:634
#: ./docs/11.x/migrations.md:644
#: ./docs/master/migrations.md:643
msgid "The `jsonb` method creates a `JSONB` equivalent column:"
msgstr ""

#: ./docs/10.x/migrations.md:562
#: ./docs/11.x/migrations.md:566
#: ./docs/master/migrations.md:565
msgid "The `foreignIdFor` method adds a `{column}_id` equivalent column for a given model class. The column type will be `UNSIGNED BIGINT`, `CHAR(36)`, or `CHAR(26)` depending on the model key type:"
msgstr ""

#: ./docs/8.x/migrations.md:563
#: ./docs/9.x/migrations.md:622
#: ./docs/10.x/migrations.md:636
#: ./docs/11.x/migrations.md:646
#: ./docs/master/migrations.md:645
msgid "$table->jsonb('options');"
msgstr ""

#: ./docs/8.x/migrations.md:565
#: ./docs/9.x/migrations.md:624
#: ./docs/10.x/migrations.md:638
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-lineString\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:566
#: ./docs/9.x/migrations.md:625
#: ./docs/10.x/migrations.md:639
msgid "`lineString()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:568
#: ./docs/9.x/migrations.md:627
#: ./docs/10.x/migrations.md:641
msgid "The `lineString` method creates a `LINESTRING` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:570
#: ./docs/9.x/migrations.md:629
#: ./docs/10.x/migrations.md:643
msgid "$table->lineString('positions');"
msgstr ""

#: ./docs/8.x/migrations.md:572
#: ./docs/9.x/migrations.md:631
#: ./docs/10.x/migrations.md:645
#: ./docs/11.x/migrations.md:648
#: ./docs/master/migrations.md:647
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-longText\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:573
#: ./docs/9.x/migrations.md:632
#: ./docs/10.x/migrations.md:646
#: ./docs/11.x/migrations.md:649
#: ./docs/master/migrations.md:648
msgid "`longText()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:575
#: ./docs/9.x/migrations.md:634
#: ./docs/10.x/migrations.md:648
#: ./docs/11.x/migrations.md:651
#: ./docs/master/migrations.md:650
msgid "The `longText` method creates a `LONGTEXT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:577
#: ./docs/9.x/migrations.md:636
#: ./docs/10.x/migrations.md:650
#: ./docs/11.x/migrations.md:653
#: ./docs/master/migrations.md:652
msgid "$table->longText('description');"
msgstr ""

#: ./docs/8.x/migrations.md:579
#: ./docs/9.x/migrations.md:638
#: ./docs/10.x/migrations.md:652
#: ./docs/11.x/migrations.md:659
#: ./docs/master/migrations.md:658
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-macAddress\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:580
#: ./docs/9.x/migrations.md:639
#: ./docs/10.x/migrations.md:653
#: ./docs/11.x/migrations.md:660
#: ./docs/master/migrations.md:659
msgid "`macAddress()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:582
#: ./docs/9.x/migrations.md:641
#: ./docs/10.x/migrations.md:655
#: ./docs/11.x/migrations.md:662
#: ./docs/master/migrations.md:661
msgid "The `macAddress` method creates a column that is intended to hold a MAC address. Some database systems, such as PostgreSQL, have a dedicated column type for this type of data. Other database systems will use a string equivalent column:"
msgstr ""

#: ./docs/11.x/migrations.md:584
#: ./docs/master/migrations.md:583
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-geography\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:584
#: ./docs/9.x/migrations.md:643
#: ./docs/10.x/migrations.md:657
#: ./docs/11.x/migrations.md:664
#: ./docs/master/migrations.md:663
msgid "$table->macAddress('device');"
msgstr ""

#: ./docs/11.x/migrations.md:585
#: ./docs/master/migrations.md:584
msgid "`geography()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:586
#: ./docs/9.x/migrations.md:645
#: ./docs/10.x/migrations.md:659
#: ./docs/11.x/migrations.md:666
#: ./docs/master/migrations.md:665
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-mediumIncrements\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:587
#: ./docs/master/migrations.md:586
msgid "The `geography` method creates a `GEOGRAPHY` equivalent column with the given spatial type and SRID (Spatial Reference System Identifier):"
msgstr ""

#: ./docs/8.x/migrations.md:587
#: ./docs/9.x/migrations.md:646
#: ./docs/10.x/migrations.md:660
#: ./docs/11.x/migrations.md:667
#: ./docs/master/migrations.md:666
msgid "`mediumIncrements()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:589
#: ./docs/master/migrations.md:588
msgid "$table->geography('coordinates', subtype: 'point', srid: 4326);"
msgstr ""

#: ./docs/8.x/migrations.md:589
#: ./docs/9.x/migrations.md:648
#: ./docs/10.x/migrations.md:662
#: ./docs/11.x/migrations.md:669
#: ./docs/master/migrations.md:668
msgid "The `mediumIncrements` method creates an auto-incrementing `UNSIGNED MEDIUMINT` equivalent column as a primary key:"
msgstr ""

#: ./docs/8.x/migrations.md:591
#: ./docs/9.x/migrations.md:650
#: ./docs/10.x/migrations.md:664
#: ./docs/11.x/migrations.md:671
#: ./docs/master/migrations.md:670
msgid "$table->mediumIncrements('id');"
msgstr ""

#: ./docs/11.x/migrations.md:592
#: ./docs/master/migrations.md:591
msgid "Support for spatial types depends on your database driver. Please refer to your database's documentation. If your application is utilizing a PostgreSQL database, you must install the [PostGIS](https://postgis.net) extension before the `geography` method may be used."
msgstr ""

#: ./docs/8.x/migrations.md:593
#: ./docs/9.x/migrations.md:652
#: ./docs/10.x/migrations.md:666
#: ./docs/11.x/migrations.md:673
#: ./docs/master/migrations.md:672
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-mediumInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:594
#: ./docs/9.x/migrations.md:653
#: ./docs/10.x/migrations.md:667
#: ./docs/11.x/migrations.md:674
#: ./docs/master/migrations.md:673
msgid "`mediumInteger()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:596
#: ./docs/9.x/migrations.md:655
#: ./docs/10.x/migrations.md:669
#: ./docs/11.x/migrations.md:676
#: ./docs/master/migrations.md:675
msgid "The `mediumInteger` method creates a `MEDIUMINT` equivalent column:"
msgstr ""

#: ./docs/11.x/migrations.md:597
#: ./docs/master/migrations.md:596
msgid "The `geometry` method creates a `GEOMETRY` equivalent column with the given spatial type and SRID (Spatial Reference System Identifier):"
msgstr ""

#: ./docs/8.x/migrations.md:598
#: ./docs/9.x/migrations.md:657
#: ./docs/10.x/migrations.md:671
#: ./docs/11.x/migrations.md:678
#: ./docs/master/migrations.md:677
msgid "$table->mediumInteger('votes');"
msgstr ""

#: ./docs/11.x/migrations.md:599
#: ./docs/master/migrations.md:598
msgid "$table->geometry('positions', subtype: 'point', srid: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:600
#: ./docs/9.x/migrations.md:659
#: ./docs/10.x/migrations.md:673
#: ./docs/11.x/migrations.md:680
#: ./docs/master/migrations.md:679
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-mediumText\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:601
#: ./docs/9.x/migrations.md:660
#: ./docs/10.x/migrations.md:674
#: ./docs/11.x/migrations.md:681
#: ./docs/master/migrations.md:680
msgid "`mediumText()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:602
#: ./docs/master/migrations.md:601
msgid "Support for spatial types depends on your database driver. Please refer to your database's documentation. If your application is utilizing a PostgreSQL database, you must install the [PostGIS](https://postgis.net) extension before the `geometry` method may be used."
msgstr ""

#: ./docs/8.x/migrations.md:603
#: ./docs/9.x/migrations.md:662
#: ./docs/10.x/migrations.md:676
#: ./docs/11.x/migrations.md:683
#: ./docs/master/migrations.md:682
msgid "The `mediumText` method creates a `MEDIUMTEXT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:605
#: ./docs/9.x/migrations.md:664
#: ./docs/10.x/migrations.md:678
#: ./docs/11.x/migrations.md:685
#: ./docs/master/migrations.md:684
msgid "$table->mediumText('description');"
msgstr ""

#: ./docs/8.x/migrations.md:607
#: ./docs/9.x/migrations.md:666
#: ./docs/10.x/migrations.md:680
#: ./docs/11.x/migrations.md:691
#: ./docs/master/migrations.md:690
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-morphs\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:608
#: ./docs/9.x/migrations.md:667
#: ./docs/10.x/migrations.md:681
#: ./docs/11.x/migrations.md:692
#: ./docs/master/migrations.md:691
msgid "`morphs()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:610
#: ./docs/9.x/migrations.md:669
msgid "The `morphs` method is a convenience method that adds a `{column}_id` `UNSIGNED BIGINT` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""

#: ./docs/8.x/migrations.md:612
#: ./docs/9.x/migrations.md:671
#: ./docs/10.x/migrations.md:685
#: ./docs/11.x/migrations.md:696
#: ./docs/master/migrations.md:695
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships). In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""

#: ./docs/8.x/migrations.md:614
#: ./docs/9.x/migrations.md:673
#: ./docs/10.x/migrations.md:687
#: ./docs/11.x/migrations.md:698
#: ./docs/master/migrations.md:697
msgid "$table->morphs('taggable');"
msgstr ""

#: ./docs/8.x/migrations.md:616
#: ./docs/9.x/migrations.md:675
#: ./docs/10.x/migrations.md:689
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-multiLineString\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:617
#: ./docs/9.x/migrations.md:676
#: ./docs/10.x/migrations.md:690
msgid "`multiLineString()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:619
#: ./docs/9.x/migrations.md:678
#: ./docs/10.x/migrations.md:692
msgid "The `multiLineString` method creates a `MULTILINESTRING` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:621
#: ./docs/9.x/migrations.md:680
#: ./docs/10.x/migrations.md:694
msgid "$table->multiLineString('positions');"
msgstr ""

#: ./docs/10.x/migrations.md:622
msgid "When using Postgres, an `INET` column will be created."
msgstr ""

#: ./docs/8.x/migrations.md:623
#: ./docs/9.x/migrations.md:682
#: ./docs/10.x/migrations.md:696
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-multiPoint\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:624
#: ./docs/9.x/migrations.md:683
#: ./docs/10.x/migrations.md:697
msgid "`multiPoint()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:626
#: ./docs/9.x/migrations.md:685
#: ./docs/10.x/migrations.md:699
msgid "The `multiPoint` method creates a `MULTIPOINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:628
#: ./docs/9.x/migrations.md:687
#: ./docs/10.x/migrations.md:701
msgid "$table->multiPoint('positions');"
msgstr ""

#: ./docs/8.x/migrations.md:630
#: ./docs/9.x/migrations.md:689
#: ./docs/10.x/migrations.md:703
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-multiPolygon\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:631
#: ./docs/9.x/migrations.md:690
#: ./docs/10.x/migrations.md:704
msgid "`multiPolygon()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:632
#: ./docs/master/migrations.md:631
msgid "When using PostgreSQL, an `INET` column will be created."
msgstr ""

#: ./docs/8.x/migrations.md:633
#: ./docs/9.x/migrations.md:692
#: ./docs/10.x/migrations.md:706
msgid "The `multiPolygon` method creates a `MULTIPOLYGON` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:635
#: ./docs/9.x/migrations.md:694
#: ./docs/10.x/migrations.md:708
msgid "$table->multiPolygon('positions');"
msgstr ""

#: ./docs/8.x/migrations.md:637
#: ./docs/9.x/migrations.md:696
#: ./docs/10.x/migrations.md:710
#: ./docs/11.x/migrations.md:700
#: ./docs/master/migrations.md:699
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-nullableTimestamps\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:638
#: ./docs/9.x/migrations.md:697
#: ./docs/10.x/migrations.md:711
#: ./docs/11.x/migrations.md:701
#: ./docs/master/migrations.md:700
msgid "`nullableTimestamps()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:640
#: ./docs/9.x/migrations.md:699
#: ./docs/10.x/migrations.md:713
#: ./docs/11.x/migrations.md:703
#: ./docs/master/migrations.md:702
msgid "The `nullableTimestamps` method is an alias of the [timestamps](#column-method-timestamps) method:"
msgstr ""

#: ./docs/8.x/migrations.md:642
#: ./docs/9.x/migrations.md:701
#: ./docs/10.x/migrations.md:715
msgid "$table->nullableTimestamps(0);"
msgstr ""

#: ./docs/8.x/migrations.md:644
#: ./docs/9.x/migrations.md:703
#: ./docs/10.x/migrations.md:717
#: ./docs/11.x/migrations.md:707
#: ./docs/master/migrations.md:706
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-nullableMorphs\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:645
#: ./docs/9.x/migrations.md:704
#: ./docs/10.x/migrations.md:718
#: ./docs/11.x/migrations.md:708
#: ./docs/master/migrations.md:707
msgid "`nullableMorphs()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:647
#: ./docs/9.x/migrations.md:706
#: ./docs/10.x/migrations.md:720
#: ./docs/11.x/migrations.md:710
#: ./docs/master/migrations.md:709
msgid "The method is similar to the [morphs](#column-method-morphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""

#: ./docs/8.x/migrations.md:649
#: ./docs/9.x/migrations.md:708
#: ./docs/10.x/migrations.md:722
#: ./docs/11.x/migrations.md:712
#: ./docs/master/migrations.md:711
msgid "$table->nullableMorphs('taggable');"
msgstr ""

#: ./docs/8.x/migrations.md:651
#: ./docs/9.x/migrations.md:717
#: ./docs/10.x/migrations.md:731
#: ./docs/11.x/migrations.md:721
#: ./docs/master/migrations.md:720
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-nullableUuidMorphs\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:652
#: ./docs/9.x/migrations.md:718
#: ./docs/10.x/migrations.md:732
#: ./docs/11.x/migrations.md:722
#: ./docs/master/migrations.md:721
msgid "`nullableUuidMorphs()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:654
#: ./docs/9.x/migrations.md:720
#: ./docs/10.x/migrations.md:734
#: ./docs/11.x/migrations.md:724
#: ./docs/master/migrations.md:723
msgid "The method is similar to the [uuidMorphs](#column-method-uuidMorphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""

#: ./docs/11.x/migrations.md:655
#: ./docs/master/migrations.md:654
msgid "When utilizing MySQL or MariaDB, you may apply a `binary` character set to the column in order to create a `LONGBLOB` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:656
#: ./docs/9.x/migrations.md:722
#: ./docs/10.x/migrations.md:736
#: ./docs/11.x/migrations.md:726
#: ./docs/master/migrations.md:725
msgid "$table->nullableUuidMorphs('taggable');"
msgstr ""

#: ./docs/11.x/migrations.md:657
#: ./docs/master/migrations.md:656
msgid "$table->longText('data')->charset('binary'); // LONGBLOB"
msgstr ""

#: ./docs/8.x/migrations.md:658
#: ./docs/9.x/migrations.md:724
#: ./docs/10.x/migrations.md:738
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-point\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:659
#: ./docs/9.x/migrations.md:725
#: ./docs/10.x/migrations.md:739
msgid "`point()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:661
#: ./docs/9.x/migrations.md:727
#: ./docs/10.x/migrations.md:741
msgid "The `point` method creates a `POINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:663
#: ./docs/9.x/migrations.md:729
#: ./docs/10.x/migrations.md:743
msgid "$table->point('position');"
msgstr ""

#: ./docs/8.x/migrations.md:665
#: ./docs/9.x/migrations.md:731
#: ./docs/10.x/migrations.md:745
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-polygon\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:666
#: ./docs/9.x/migrations.md:732
#: ./docs/10.x/migrations.md:746
msgid "`polygon()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:668
#: ./docs/9.x/migrations.md:734
#: ./docs/10.x/migrations.md:748
msgid "The `polygon` method creates a `POLYGON` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:670
#: ./docs/9.x/migrations.md:736
#: ./docs/10.x/migrations.md:750
msgid "$table->polygon('position');"
msgstr ""

#: ./docs/8.x/migrations.md:672
#: ./docs/9.x/migrations.md:738
#: ./docs/10.x/migrations.md:752
#: ./docs/11.x/migrations.md:728
#: ./docs/master/migrations.md:727
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-rememberToken\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:673
#: ./docs/9.x/migrations.md:739
#: ./docs/10.x/migrations.md:753
#: ./docs/11.x/migrations.md:729
#: ./docs/master/migrations.md:728
msgid "`rememberToken()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:675
#: ./docs/9.x/migrations.md:741
#: ./docs/10.x/migrations.md:755
#: ./docs/11.x/migrations.md:731
#: ./docs/master/migrations.md:730
msgid "The `rememberToken` method creates a nullable, `VARCHAR(100)` equivalent column that is intended to store the current \"remember me\" [authentication token](/docs/{{version}}/authentication#remembering-users):"
msgstr ""

#: ./docs/8.x/migrations.md:677
#: ./docs/9.x/migrations.md:743
#: ./docs/10.x/migrations.md:757
#: ./docs/11.x/migrations.md:733
#: ./docs/master/migrations.md:732
msgid "$table->rememberToken();"
msgstr ""

#: ./docs/8.x/migrations.md:679
#: ./docs/9.x/migrations.md:745
#: ./docs/10.x/migrations.md:759
#: ./docs/11.x/migrations.md:735
#: ./docs/master/migrations.md:734
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-set\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:680
#: ./docs/9.x/migrations.md:746
#: ./docs/10.x/migrations.md:760
#: ./docs/11.x/migrations.md:736
#: ./docs/master/migrations.md:735
msgid "`set()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:682
#: ./docs/9.x/migrations.md:748
#: ./docs/10.x/migrations.md:762
#: ./docs/11.x/migrations.md:738
#: ./docs/master/migrations.md:737
msgid "The `set` method creates a `SET` equivalent column with the given list of valid values:"
msgstr ""

#: ./docs/10.x/migrations.md:683
#: ./docs/11.x/migrations.md:694
#: ./docs/master/migrations.md:693
msgid "The `morphs` method is a convenience method that adds a `{column}_id` equivalent column and a `{column}_type` `VARCHAR` equivalent column. The column type for the `{column}_id` will be `UNSIGNED BIGINT`, `CHAR(36)`, or `CHAR(26)` depending on the model key type."
msgstr ""

#: ./docs/8.x/migrations.md:684
#: ./docs/9.x/migrations.md:750
#: ./docs/10.x/migrations.md:764
#: ./docs/11.x/migrations.md:740
#: ./docs/master/migrations.md:739
msgid "$table->set('flavors', ['strawberry', 'vanilla']);"
msgstr ""

#: ./docs/8.x/migrations.md:686
#: ./docs/9.x/migrations.md:752
#: ./docs/10.x/migrations.md:766
#: ./docs/11.x/migrations.md:742
#: ./docs/master/migrations.md:741
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-smallIncrements\"></a>"
#~ msgstr ""

#: ./docs/11.x/migrations.md:687
#: ./docs/master/migrations.md:686
msgid "When utilizing MySQL or MariaDB, you may apply a `binary` character set to the column in order to create a `MEDIUMBLOB` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:687
#: ./docs/9.x/migrations.md:753
#: ./docs/10.x/migrations.md:767
#: ./docs/11.x/migrations.md:743
#: ./docs/master/migrations.md:742
msgid "`smallIncrements()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:689
#: ./docs/master/migrations.md:688
msgid "$table->mediumText('data')->charset('binary'); // MEDIUMBLOB"
msgstr ""

#: ./docs/8.x/migrations.md:689
#: ./docs/9.x/migrations.md:755
#: ./docs/10.x/migrations.md:769
#: ./docs/11.x/migrations.md:745
#: ./docs/master/migrations.md:744
msgid "The `smallIncrements` method creates an auto-incrementing `UNSIGNED SMALLINT` equivalent column as a primary key:"
msgstr ""

#: ./docs/8.x/migrations.md:691
#: ./docs/9.x/migrations.md:757
#: ./docs/10.x/migrations.md:771
#: ./docs/11.x/migrations.md:747
#: ./docs/master/migrations.md:746
msgid "$table->smallIncrements('id');"
msgstr ""

#: ./docs/8.x/migrations.md:693
#: ./docs/9.x/migrations.md:759
#: ./docs/10.x/migrations.md:773
#: ./docs/11.x/migrations.md:749
#: ./docs/master/migrations.md:748
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-smallInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:694
#: ./docs/9.x/migrations.md:760
#: ./docs/10.x/migrations.md:774
#: ./docs/11.x/migrations.md:750
#: ./docs/master/migrations.md:749
msgid "`smallInteger()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:696
#: ./docs/9.x/migrations.md:762
#: ./docs/10.x/migrations.md:776
#: ./docs/11.x/migrations.md:752
#: ./docs/master/migrations.md:751
msgid "The `smallInteger` method creates a `SMALLINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:698
#: ./docs/9.x/migrations.md:764
#: ./docs/10.x/migrations.md:778
#: ./docs/11.x/migrations.md:754
#: ./docs/master/migrations.md:753
msgid "$table->smallInteger('votes');"
msgstr ""

#: ./docs/8.x/migrations.md:700
#: ./docs/9.x/migrations.md:766
#: ./docs/10.x/migrations.md:780
#: ./docs/11.x/migrations.md:756
#: ./docs/master/migrations.md:755
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-softDeletesTz\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:701
#: ./docs/9.x/migrations.md:767
#: ./docs/10.x/migrations.md:781
#: ./docs/11.x/migrations.md:757
#: ./docs/master/migrations.md:756
msgid "`softDeletesTz()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:703
#: ./docs/9.x/migrations.md:769
#: ./docs/10.x/migrations.md:783
msgid "The `softDeletesTz` method adds a nullable `deleted_at` `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""

#: ./docs/11.x/migrations.md:705
#: ./docs/master/migrations.md:704
msgid "$table->nullableTimestamps(precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:705
#: ./docs/9.x/migrations.md:771
#: ./docs/10.x/migrations.md:785
msgid "$table->softDeletesTz($column = 'deleted_at', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:707
#: ./docs/9.x/migrations.md:773
#: ./docs/10.x/migrations.md:787
#: ./docs/11.x/migrations.md:763
#: ./docs/master/migrations.md:762
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-softDeletes\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:708
#: ./docs/9.x/migrations.md:774
#: ./docs/10.x/migrations.md:788
#: ./docs/11.x/migrations.md:764
#: ./docs/master/migrations.md:763
msgid "`softDeletes()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:710
#: ./docs/9.x/migrations.md:776
#: ./docs/10.x/migrations.md:790
msgid "The `softDeletes` method adds a nullable `deleted_at` `TIMESTAMP` equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""

#: ./docs/9.x/migrations.md:710
#: ./docs/10.x/migrations.md:724
#: ./docs/11.x/migrations.md:714
#: ./docs/master/migrations.md:713
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-nullableUlidMorphs\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:711
#: ./docs/10.x/migrations.md:725
#: ./docs/11.x/migrations.md:715
#: ./docs/master/migrations.md:714
msgid "`nullableUlidMorphs()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:712
#: ./docs/9.x/migrations.md:778
#: ./docs/10.x/migrations.md:792
msgid "$table->softDeletes($column = 'deleted_at', $precision = 0);"
msgstr ""

#: ./docs/9.x/migrations.md:713
#: ./docs/10.x/migrations.md:727
#: ./docs/11.x/migrations.md:717
#: ./docs/master/migrations.md:716
msgid "The method is similar to the [ulidMorphs](#column-method-ulidMorphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""

#: ./docs/8.x/migrations.md:714
#: ./docs/9.x/migrations.md:780
#: ./docs/10.x/migrations.md:794
#: ./docs/11.x/migrations.md:770
#: ./docs/master/migrations.md:769
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-string\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:715
#: ./docs/9.x/migrations.md:781
#: ./docs/10.x/migrations.md:795
#: ./docs/11.x/migrations.md:771
#: ./docs/master/migrations.md:770
msgid "`string()` {.collection-method}"
msgstr ""

#: ./docs/9.x/migrations.md:715
#: ./docs/10.x/migrations.md:729
#: ./docs/11.x/migrations.md:719
#: ./docs/master/migrations.md:718
msgid "$table->nullableUlidMorphs('taggable');"
msgstr ""

#: ./docs/8.x/migrations.md:717
#: ./docs/9.x/migrations.md:783
#: ./docs/10.x/migrations.md:797
#: ./docs/11.x/migrations.md:773
#: ./docs/master/migrations.md:772
msgid "The `string` method creates a `VARCHAR` equivalent column of the given length:"
msgstr ""

#: ./docs/8.x/migrations.md:719
#: ./docs/9.x/migrations.md:785
#: ./docs/10.x/migrations.md:799
msgid "$table->string('name', 100);"
msgstr ""

#: ./docs/8.x/migrations.md:721
#: ./docs/9.x/migrations.md:787
#: ./docs/10.x/migrations.md:801
#: ./docs/11.x/migrations.md:777
#: ./docs/master/migrations.md:776
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-text\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:722
#: ./docs/9.x/migrations.md:788
#: ./docs/10.x/migrations.md:802
#: ./docs/11.x/migrations.md:778
#: ./docs/master/migrations.md:777
msgid "`text()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:724
#: ./docs/9.x/migrations.md:790
#: ./docs/10.x/migrations.md:804
#: ./docs/11.x/migrations.md:780
#: ./docs/master/migrations.md:779
msgid "The `text` method creates a `TEXT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:726
#: ./docs/9.x/migrations.md:792
#: ./docs/10.x/migrations.md:806
#: ./docs/11.x/migrations.md:782
#: ./docs/master/migrations.md:781
msgid "$table->text('description');"
msgstr ""

#: ./docs/8.x/migrations.md:728
#: ./docs/9.x/migrations.md:794
#: ./docs/10.x/migrations.md:808
#: ./docs/11.x/migrations.md:788
#: ./docs/master/migrations.md:787
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-timeTz\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:729
#: ./docs/9.x/migrations.md:795
#: ./docs/10.x/migrations.md:809
#: ./docs/11.x/migrations.md:789
#: ./docs/master/migrations.md:788
msgid "`timeTz()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:731
#: ./docs/9.x/migrations.md:797
#: ./docs/10.x/migrations.md:811
msgid "The `timeTz` method creates a `TIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""

#: ./docs/8.x/migrations.md:733
#: ./docs/9.x/migrations.md:799
#: ./docs/10.x/migrations.md:813
msgid "$table->timeTz('sunrise', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:735
#: ./docs/9.x/migrations.md:801
#: ./docs/10.x/migrations.md:815
#: ./docs/11.x/migrations.md:795
#: ./docs/master/migrations.md:794
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-time\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:736
#: ./docs/9.x/migrations.md:802
#: ./docs/10.x/migrations.md:816
#: ./docs/11.x/migrations.md:796
#: ./docs/master/migrations.md:795
msgid "`time()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:738
#: ./docs/9.x/migrations.md:804
#: ./docs/10.x/migrations.md:818
msgid "The `time` method creates a `TIME` equivalent column with an optional precision (total digits):"
msgstr ""

#: ./docs/8.x/migrations.md:740
#: ./docs/9.x/migrations.md:806
#: ./docs/10.x/migrations.md:820
msgid "$table->time('sunrise', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:742
#: ./docs/9.x/migrations.md:808
#: ./docs/10.x/migrations.md:822
#: ./docs/11.x/migrations.md:802
#: ./docs/master/migrations.md:801
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-timestampTz\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:743
#: ./docs/9.x/migrations.md:809
#: ./docs/10.x/migrations.md:823
#: ./docs/11.x/migrations.md:803
#: ./docs/master/migrations.md:802
msgid "`timestampTz()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:745
#: ./docs/9.x/migrations.md:811
#: ./docs/10.x/migrations.md:825
msgid "The `timestampTz` method creates a `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""

#: ./docs/8.x/migrations.md:747
#: ./docs/9.x/migrations.md:813
#: ./docs/10.x/migrations.md:827
msgid "$table->timestampTz('added_at', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:749
#: ./docs/9.x/migrations.md:815
#: ./docs/10.x/migrations.md:829
#: ./docs/11.x/migrations.md:809
#: ./docs/master/migrations.md:808
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-timestamp\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:750
#: ./docs/9.x/migrations.md:816
#: ./docs/10.x/migrations.md:830
#: ./docs/11.x/migrations.md:810
#: ./docs/master/migrations.md:809
msgid "`timestamp()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:752
#: ./docs/9.x/migrations.md:818
#: ./docs/10.x/migrations.md:832
msgid "The `timestamp` method creates a `TIMESTAMP` equivalent column with an optional precision (total digits):"
msgstr ""

#: ./docs/8.x/migrations.md:754
#: ./docs/9.x/migrations.md:820
#: ./docs/10.x/migrations.md:834
msgid "$table->timestamp('added_at', $precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:756
#: ./docs/9.x/migrations.md:822
#: ./docs/10.x/migrations.md:836
#: ./docs/11.x/migrations.md:816
#: ./docs/master/migrations.md:815
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-timestampsTz\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:757
#: ./docs/9.x/migrations.md:823
#: ./docs/10.x/migrations.md:837
#: ./docs/11.x/migrations.md:817
#: ./docs/master/migrations.md:816
msgid "`timestampsTz()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:759
#: ./docs/master/migrations.md:758
msgid "The `softDeletesTz` method adds a nullable `deleted_at` `TIMESTAMP` (with timezone) equivalent column with an optional fractional seconds precision. This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""

#: ./docs/8.x/migrations.md:759
#: ./docs/9.x/migrations.md:825
#: ./docs/10.x/migrations.md:839
msgid "The `timestampsTz` method creates `created_at` and `updated_at` `TIMESTAMP` (with timezone) equivalent columns with an optional precision (total digits):"
msgstr ""

#: ./docs/11.x/migrations.md:761
#: ./docs/master/migrations.md:760
msgid "$table->softDeletesTz('deleted_at', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:761
#: ./docs/9.x/migrations.md:827
#: ./docs/10.x/migrations.md:841
msgid "$table->timestampsTz($precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:763
#: ./docs/9.x/migrations.md:829
#: ./docs/10.x/migrations.md:843
#: ./docs/11.x/migrations.md:823
#: ./docs/master/migrations.md:822
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-timestamps\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:764
#: ./docs/9.x/migrations.md:830
#: ./docs/10.x/migrations.md:844
#: ./docs/11.x/migrations.md:824
#: ./docs/master/migrations.md:823
msgid "`timestamps()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:766
#: ./docs/master/migrations.md:765
msgid "The `softDeletes` method adds a nullable `deleted_at` `TIMESTAMP` equivalent column with an optional fractional seconds precision. This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""

#: ./docs/8.x/migrations.md:766
#: ./docs/9.x/migrations.md:832
#: ./docs/10.x/migrations.md:846
msgid "The `timestamps` method creates `created_at` and `updated_at` `TIMESTAMP` equivalent columns with an optional precision (total digits):"
msgstr ""

#: ./docs/11.x/migrations.md:768
#: ./docs/master/migrations.md:767
msgid "$table->softDeletes('deleted_at', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:768
#: ./docs/9.x/migrations.md:834
#: ./docs/10.x/migrations.md:848
msgid "$table->timestamps($precision = 0);"
msgstr ""

#: ./docs/8.x/migrations.md:770
#: ./docs/9.x/migrations.md:836
#: ./docs/10.x/migrations.md:850
#: ./docs/11.x/migrations.md:830
#: ./docs/master/migrations.md:829
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-tinyIncrements\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:771
#: ./docs/9.x/migrations.md:837
#: ./docs/10.x/migrations.md:851
#: ./docs/11.x/migrations.md:831
#: ./docs/master/migrations.md:830
msgid "`tinyIncrements()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:773
#: ./docs/9.x/migrations.md:839
#: ./docs/10.x/migrations.md:853
#: ./docs/11.x/migrations.md:833
#: ./docs/master/migrations.md:832
msgid "The `tinyIncrements` method creates an auto-incrementing `UNSIGNED TINYINT` equivalent column as a primary key:"
msgstr ""

#: ./docs/11.x/migrations.md:775
#: ./docs/master/migrations.md:774
msgid "$table->string('name', length: 100);"
msgstr ""

#: ./docs/8.x/migrations.md:775
#: ./docs/9.x/migrations.md:841
#: ./docs/10.x/migrations.md:855
#: ./docs/11.x/migrations.md:835
#: ./docs/master/migrations.md:834
msgid "$table->tinyIncrements('id');"
msgstr ""

#: ./docs/8.x/migrations.md:777
#: ./docs/9.x/migrations.md:843
#: ./docs/10.x/migrations.md:857
#: ./docs/11.x/migrations.md:837
#: ./docs/master/migrations.md:836
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-tinyInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:778
#: ./docs/9.x/migrations.md:844
#: ./docs/10.x/migrations.md:858
#: ./docs/11.x/migrations.md:838
#: ./docs/master/migrations.md:837
msgid "`tinyInteger()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:780
#: ./docs/9.x/migrations.md:846
#: ./docs/10.x/migrations.md:860
#: ./docs/11.x/migrations.md:840
#: ./docs/master/migrations.md:839
msgid "The `tinyInteger` method creates a `TINYINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:782
#: ./docs/9.x/migrations.md:848
#: ./docs/10.x/migrations.md:862
#: ./docs/11.x/migrations.md:842
#: ./docs/master/migrations.md:841
msgid "$table->tinyInteger('votes');"
msgstr ""

#: ./docs/11.x/migrations.md:784
#: ./docs/master/migrations.md:783
msgid "When utilizing MySQL or MariaDB, you may apply a `binary` character set to the column in order to create a `BLOB` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:784
#: ./docs/9.x/migrations.md:850
#: ./docs/10.x/migrations.md:864
#: ./docs/11.x/migrations.md:844
#: ./docs/master/migrations.md:843
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-tinyText\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:785
#: ./docs/9.x/migrations.md:851
#: ./docs/10.x/migrations.md:865
#: ./docs/11.x/migrations.md:845
#: ./docs/master/migrations.md:844
msgid "`tinyText()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:786
#: ./docs/master/migrations.md:785
msgid "$table->text('data')->charset('binary'); // BLOB"
msgstr ""

#: ./docs/8.x/migrations.md:787
#: ./docs/9.x/migrations.md:853
#: ./docs/10.x/migrations.md:867
#: ./docs/11.x/migrations.md:847
#: ./docs/master/migrations.md:846
msgid "The `tinyText` method creates a `TINYTEXT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:789
#: ./docs/9.x/migrations.md:855
#: ./docs/10.x/migrations.md:869
#: ./docs/11.x/migrations.md:849
#: ./docs/master/migrations.md:848
msgid "$table->tinyText('notes');"
msgstr ""

#: ./docs/11.x/migrations.md:791
#: ./docs/master/migrations.md:790
msgid "The `timeTz` method creates a `TIME` (with timezone) equivalent column with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:791
#: ./docs/9.x/migrations.md:857
#: ./docs/10.x/migrations.md:871
#: ./docs/11.x/migrations.md:855
#: ./docs/master/migrations.md:854
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-unsignedBigInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:792
#: ./docs/9.x/migrations.md:858
#: ./docs/10.x/migrations.md:872
#: ./docs/11.x/migrations.md:856
#: ./docs/master/migrations.md:855
msgid "`unsignedBigInteger()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:793
#: ./docs/master/migrations.md:792
msgid "$table->timeTz('sunrise', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:794
#: ./docs/9.x/migrations.md:860
#: ./docs/10.x/migrations.md:874
#: ./docs/11.x/migrations.md:858
#: ./docs/master/migrations.md:857
msgid "The `unsignedBigInteger` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:796
#: ./docs/9.x/migrations.md:862
#: ./docs/10.x/migrations.md:876
#: ./docs/11.x/migrations.md:860
#: ./docs/master/migrations.md:859
msgid "$table->unsignedBigInteger('votes');"
msgstr ""

#: ./docs/11.x/migrations.md:798
#: ./docs/master/migrations.md:797
msgid "The `time` method creates a `TIME` equivalent column with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:798
#: ./docs/9.x/migrations.md:864
#: ./docs/10.x/migrations.md:878
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-unsignedDecimal\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:799
#: ./docs/9.x/migrations.md:865
#: ./docs/10.x/migrations.md:879
msgid "`unsignedDecimal()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:800
#: ./docs/master/migrations.md:799
msgid "$table->time('sunrise', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:801
#: ./docs/9.x/migrations.md:867
#: ./docs/10.x/migrations.md:881
msgid "The `unsignedDecimal` method creates an `UNSIGNED DECIMAL` equivalent column with an optional precision (total digits) and scale (decimal digits):"
msgstr ""

#: ./docs/8.x/migrations.md:803
#: ./docs/9.x/migrations.md:869
#: ./docs/10.x/migrations.md:883
msgid "$table->unsignedDecimal('amount', $precision = 8, $scale = 2);"
msgstr ""

#: ./docs/11.x/migrations.md:805
#: ./docs/master/migrations.md:804
msgid "The `timestampTz` method creates a `TIMESTAMP` (with timezone) equivalent column with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:805
#: ./docs/9.x/migrations.md:871
#: ./docs/10.x/migrations.md:885
#: ./docs/11.x/migrations.md:862
#: ./docs/master/migrations.md:861
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-unsignedInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:806
#: ./docs/9.x/migrations.md:872
#: ./docs/10.x/migrations.md:886
#: ./docs/11.x/migrations.md:863
#: ./docs/master/migrations.md:862
msgid "`unsignedInteger()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:807
#: ./docs/master/migrations.md:806
msgid "$table->timestampTz('added_at', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:808
#: ./docs/9.x/migrations.md:874
#: ./docs/10.x/migrations.md:888
#: ./docs/11.x/migrations.md:865
#: ./docs/master/migrations.md:864
msgid "The `unsignedInteger` method creates an `UNSIGNED INTEGER` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:810
#: ./docs/9.x/migrations.md:876
#: ./docs/10.x/migrations.md:890
#: ./docs/11.x/migrations.md:867
#: ./docs/master/migrations.md:866
msgid "$table->unsignedInteger('votes');"
msgstr ""

#: ./docs/11.x/migrations.md:812
#: ./docs/master/migrations.md:811
msgid "The `timestamp` method creates a `TIMESTAMP` equivalent column with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:812
#: ./docs/9.x/migrations.md:878
#: ./docs/10.x/migrations.md:892
#: ./docs/11.x/migrations.md:869
#: ./docs/master/migrations.md:868
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-unsignedMediumInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:813
#: ./docs/9.x/migrations.md:879
#: ./docs/10.x/migrations.md:893
#: ./docs/11.x/migrations.md:870
#: ./docs/master/migrations.md:869
msgid "`unsignedMediumInteger()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:814
#: ./docs/master/migrations.md:813
msgid "$table->timestamp('added_at', precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:815
#: ./docs/9.x/migrations.md:881
#: ./docs/10.x/migrations.md:895
#: ./docs/11.x/migrations.md:872
#: ./docs/master/migrations.md:871
msgid "The `unsignedMediumInteger` method creates an `UNSIGNED MEDIUMINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:817
#: ./docs/9.x/migrations.md:883
#: ./docs/10.x/migrations.md:897
#: ./docs/11.x/migrations.md:874
#: ./docs/master/migrations.md:873
msgid "$table->unsignedMediumInteger('votes');"
msgstr ""

#: ./docs/11.x/migrations.md:819
#: ./docs/master/migrations.md:818
msgid "The `timestampsTz` method creates `created_at` and `updated_at` `TIMESTAMP` (with timezone) equivalent columns with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:819
#: ./docs/9.x/migrations.md:885
#: ./docs/10.x/migrations.md:899
#: ./docs/11.x/migrations.md:876
#: ./docs/master/migrations.md:875
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-unsignedSmallInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:820
#: ./docs/9.x/migrations.md:886
#: ./docs/10.x/migrations.md:900
#: ./docs/11.x/migrations.md:877
#: ./docs/master/migrations.md:876
msgid "`unsignedSmallInteger()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:821
#: ./docs/master/migrations.md:820
msgid "$table->timestampsTz(precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:822
#: ./docs/9.x/migrations.md:888
#: ./docs/10.x/migrations.md:902
#: ./docs/11.x/migrations.md:879
#: ./docs/master/migrations.md:878
msgid "The `unsignedSmallInteger` method creates an `UNSIGNED SMALLINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:824
#: ./docs/9.x/migrations.md:890
#: ./docs/10.x/migrations.md:904
#: ./docs/11.x/migrations.md:881
#: ./docs/master/migrations.md:880
msgid "$table->unsignedSmallInteger('votes');"
msgstr ""

#: ./docs/11.x/migrations.md:826
#: ./docs/master/migrations.md:825
msgid "The `timestamps` method creates `created_at` and `updated_at` `TIMESTAMP` equivalent columns with an optional fractional seconds precision:"
msgstr ""

#: ./docs/8.x/migrations.md:826
#: ./docs/9.x/migrations.md:892
#: ./docs/10.x/migrations.md:906
#: ./docs/11.x/migrations.md:883
#: ./docs/master/migrations.md:882
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-unsignedTinyInteger\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:827
#: ./docs/9.x/migrations.md:893
#: ./docs/10.x/migrations.md:907
#: ./docs/11.x/migrations.md:884
#: ./docs/master/migrations.md:883
msgid "`unsignedTinyInteger()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:828
#: ./docs/master/migrations.md:827
msgid "$table->timestamps(precision: 0);"
msgstr ""

#: ./docs/8.x/migrations.md:829
#: ./docs/9.x/migrations.md:895
#: ./docs/10.x/migrations.md:909
#: ./docs/11.x/migrations.md:886
#: ./docs/master/migrations.md:885
msgid "The `unsignedTinyInteger` method creates an `UNSIGNED TINYINT` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:831
#: ./docs/9.x/migrations.md:897
#: ./docs/10.x/migrations.md:911
#: ./docs/11.x/migrations.md:888
#: ./docs/master/migrations.md:887
msgid "$table->unsignedTinyInteger('votes');"
msgstr ""

#: ./docs/8.x/migrations.md:833
#: ./docs/9.x/migrations.md:908
#: ./docs/10.x/migrations.md:922
#: ./docs/11.x/migrations.md:899
#: ./docs/master/migrations.md:898
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-uuidMorphs\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:834
#: ./docs/9.x/migrations.md:909
#: ./docs/10.x/migrations.md:923
#: ./docs/11.x/migrations.md:900
#: ./docs/master/migrations.md:899
msgid "`uuidMorphs()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:836
#: ./docs/9.x/migrations.md:911
#: ./docs/10.x/migrations.md:925
#: ./docs/11.x/migrations.md:902
#: ./docs/master/migrations.md:901
msgid "The `uuidMorphs` method is a convenience method that adds a `{column}_id` `CHAR(36)` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""

#: ./docs/8.x/migrations.md:838
#: ./docs/9.x/migrations.md:913
#: ./docs/10.x/migrations.md:927
#: ./docs/11.x/migrations.md:904
#: ./docs/master/migrations.md:903
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that use UUID identifiers. In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""

#: ./docs/8.x/migrations.md:840
#: ./docs/9.x/migrations.md:915
#: ./docs/10.x/migrations.md:929
#: ./docs/11.x/migrations.md:906
#: ./docs/master/migrations.md:905
msgid "$table->uuidMorphs('taggable');"
msgstr ""

#: ./docs/8.x/migrations.md:842
#: ./docs/9.x/migrations.md:924
#: ./docs/10.x/migrations.md:938
#: ./docs/11.x/migrations.md:915
#: ./docs/master/migrations.md:914
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-uuid\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:843
#: ./docs/9.x/migrations.md:925
#: ./docs/10.x/migrations.md:939
#: ./docs/11.x/migrations.md:916
#: ./docs/master/migrations.md:915
msgid "`uuid()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:845
#: ./docs/9.x/migrations.md:927
#: ./docs/10.x/migrations.md:941
#: ./docs/11.x/migrations.md:918
#: ./docs/master/migrations.md:917
msgid "The `uuid` method creates a `UUID` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:847
#: ./docs/9.x/migrations.md:929
#: ./docs/10.x/migrations.md:943
#: ./docs/11.x/migrations.md:920
#: ./docs/master/migrations.md:919
msgid "$table->uuid('id');"
msgstr ""

#: ./docs/8.x/migrations.md:849
#: ./docs/9.x/migrations.md:931
#: ./docs/10.x/migrations.md:945
#: ./docs/11.x/migrations.md:929
#: ./docs/master/migrations.md:921
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-year\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:850
#: ./docs/9.x/migrations.md:932
#: ./docs/10.x/migrations.md:946
#: ./docs/11.x/migrations.md:930
#: ./docs/master/migrations.md:922
msgid "`year()` {.collection-method}"
msgstr ""

#: ./docs/11.x/migrations.md:851
#: ./docs/master/migrations.md:850
msgid "When utilizing MySQL or MariaDB, you may apply a `binary` character set to the column in order to create a `TINYBLOB` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:852
#: ./docs/9.x/migrations.md:934
#: ./docs/10.x/migrations.md:948
#: ./docs/11.x/migrations.md:932
#: ./docs/master/migrations.md:924
msgid "The `year` method creates a `YEAR` equivalent column:"
msgstr ""

#: ./docs/11.x/migrations.md:853
#: ./docs/master/migrations.md:852
msgid "$table->tinyText('data')->charset('binary'); // TINYBLOB"
msgstr ""

#: ./docs/8.x/migrations.md:854
#: ./docs/9.x/migrations.md:936
#: ./docs/10.x/migrations.md:950
#: ./docs/11.x/migrations.md:934
#: ./docs/master/migrations.md:926
msgid "$table->year('birth_year');"
msgstr ""

#: ./docs/8.x/migrations.md:856
#: ./docs/9.x/migrations.md:938
#: ./docs/10.x/migrations.md:952
#: ./docs/11.x/migrations.md:936
#: ./docs/master/migrations.md:928
#~ msgctxt "P"
#~ msgid "<a name=\"column-modifiers\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:857
#: ./docs/9.x/migrations.md:939
#: ./docs/10.x/migrations.md:953
#: ./docs/11.x/migrations.md:937
#: ./docs/master/migrations.md:929
msgid "Column Modifiers"
msgstr ""

#: ./docs/8.x/migrations.md:859
#: ./docs/9.x/migrations.md:941
#: ./docs/10.x/migrations.md:955
#: ./docs/11.x/migrations.md:939
#: ./docs/master/migrations.md:931
msgid "In addition to the column types listed above, there are several column \"modifiers\" you may use when adding a column to a database table. For example, to make the column \"nullable\", you may use the `nullable` method:"
msgstr ""

#: ./docs/8.x/migrations.md:861
#: ./docs/9.x/migrations.md:943
#: ./docs/10.x/migrations.md:957
#: ./docs/11.x/migrations.md:941
#: ./docs/master/migrations.md:933
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('email')->nullable();\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:868
#: ./docs/9.x/migrations.md:950
#: ./docs/10.x/migrations.md:964
#: ./docs/11.x/migrations.md:948
#: ./docs/master/migrations.md:940
msgid "The following table contains all of the available column modifiers. This list does not include [index modifiers](#creating-indexes):"
msgstr ""

#: ./docs/8.x/migrations.md:891
#: ./docs/9.x/migrations.md:973
#: ./docs/10.x/migrations.md:987
#: ./docs/11.x/migrations.md:974
#: ./docs/master/migrations.md:962
#~ msgctxt "P"
#~ msgid "<a name=\"default-expressions\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:892
#: ./docs/9.x/migrations.md:974
#: ./docs/10.x/migrations.md:988
#: ./docs/11.x/migrations.md:975
#: ./docs/master/migrations.md:963
msgid "Default Expressions"
msgstr ""

#: ./docs/8.x/migrations.md:894
#: ./docs/9.x/migrations.md:976
#: ./docs/10.x/migrations.md:990
#: ./docs/11.x/migrations.md:977
#: ./docs/master/migrations.md:965
msgid "The `default` modifier accepts a value or an `Illuminate\\Database\\Query\\Expression` instance. Using an `Expression` instance will prevent Laravel from wrapping the value in quotes and allow you to use database specific functions. One situation where this is particularly useful is when you need to assign default values to JSON columns:"
msgstr ""

#: ./docs/8.x/migrations.md:896
msgid "<?php\n\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Database\\Query\\Expression;\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"class CreateFlightsTable extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/migrations.md:899
#: ./docs/10.x/migrations.md:913
#: ./docs/11.x/migrations.md:890
#: ./docs/master/migrations.md:889
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-ulidMorphs\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:900
#: ./docs/10.x/migrations.md:914
#: ./docs/11.x/migrations.md:891
#: ./docs/master/migrations.md:890
msgid "`ulidMorphs()` {.collection-method}"
msgstr ""

#: ./docs/9.x/migrations.md:902
#: ./docs/10.x/migrations.md:916
#: ./docs/11.x/migrations.md:893
#: ./docs/master/migrations.md:892
msgid "The `ulidMorphs` method is a convenience method that adds a `{column}_id` `CHAR(26)` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""

#: ./docs/9.x/migrations.md:904
#: ./docs/10.x/migrations.md:918
#: ./docs/11.x/migrations.md:895
#: ./docs/master/migrations.md:894
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that use ULID identifiers. In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""

#: ./docs/9.x/migrations.md:906
#: ./docs/10.x/migrations.md:920
#: ./docs/11.x/migrations.md:897
#: ./docs/master/migrations.md:896
msgid "$table->ulidMorphs('taggable');"
msgstr ""

#: ./docs/9.x/migrations.md:917
#: ./docs/10.x/migrations.md:931
#: ./docs/11.x/migrations.md:908
#: ./docs/master/migrations.md:907
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-ulid\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:918
#: ./docs/10.x/migrations.md:932
#: ./docs/11.x/migrations.md:909
#: ./docs/master/migrations.md:908
msgid "`ulid()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:920
#: ./docs/10.x/migrations.md:1015
#: ./docs/11.x/migrations.md:1002
#: ./docs/master/migrations.md:990
msgid "Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation."
msgstr ""

#: ./docs/9.x/migrations.md:920
#: ./docs/10.x/migrations.md:934
#: ./docs/11.x/migrations.md:911
#: ./docs/master/migrations.md:910
msgid "The `ulid` method creates a `ULID` equivalent column:"
msgstr ""

#: ./docs/11.x/migrations.md:922
#~ msgctxt "P"
#~ msgid "<a name=\"column-method-vector\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:922
#: ./docs/9.x/migrations.md:1005
#: ./docs/10.x/migrations.md:1017
#: ./docs/11.x/migrations.md:1004
#: ./docs/master/migrations.md:992
#~ msgctxt "P"
#~ msgid "<a name=\"column-order\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:922
#: ./docs/10.x/migrations.md:936
#: ./docs/11.x/migrations.md:913
#: ./docs/master/migrations.md:912
msgid "$table->ulid('id');"
msgstr ""

#: ./docs/11.x/migrations.md:923
msgid "`vector()` {.collection-method}"
msgstr ""

#: ./docs/8.x/migrations.md:923
#: ./docs/9.x/migrations.md:1006
#: ./docs/10.x/migrations.md:1018
#: ./docs/11.x/migrations.md:1005
#: ./docs/master/migrations.md:993
msgid "Column Order"
msgstr ""

#: ./docs/11.x/migrations.md:925
msgid "The `vector` method creates a `vector` equivalent column:"
msgstr ""

#: ./docs/8.x/migrations.md:925
#: ./docs/9.x/migrations.md:1008
#: ./docs/10.x/migrations.md:1020
#: ./docs/master/migrations.md:995
msgid "When using the MySQL database, the `after` method may be used to add columns after an existing column in the schema:"
msgstr ""

#: ./docs/11.x/migrations.md:927
msgid "$table->vector('embedding', dimensions: 100);"
msgstr ""

#: ./docs/8.x/migrations.md:927
#: ./docs/9.x/migrations.md:1010
msgid "$table->after('password', function ($table) {\n"
"    $table->string('address_line1');\n"
"    $table->string('address_line2');\n"
"    $table->string('city');\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:933
#: ./docs/9.x/migrations.md:1016
#: ./docs/10.x/migrations.md:1028
#: ./docs/11.x/migrations.md:1015
#: ./docs/master/migrations.md:1003
#~ msgctxt "P"
#~ msgid "<a name=\"modifying-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:934
#: ./docs/9.x/migrations.md:1017
#: ./docs/10.x/migrations.md:1029
#: ./docs/11.x/migrations.md:1016
#: ./docs/master/migrations.md:1004
msgid "Modifying Columns"
msgstr ""

#: ./docs/8.x/migrations.md:936
#: ./docs/9.x/migrations.md:1019
#~ msgctxt "P"
#~ msgid "<a name=\"prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:937
#: ./docs/9.x/migrations.md:1020
msgid "Prerequisites"
msgstr ""

#: ./docs/8.x/migrations.md:939
#: ./docs/9.x/migrations.md:1022
msgid "Before modifying a column, you must install the `doctrine/dbal` package using the Composer package manager. The Doctrine DBAL library is used to determine the current state of the column and to create the SQL queries needed to make the requested changes to your column:"
msgstr ""

#: ./docs/8.x/migrations.md:941
#: ./docs/9.x/migrations.md:1024
#: ./docs/10.x/migrations.md:1048
msgid "composer require doctrine/dbal"
msgstr ""

#: ./docs/8.x/migrations.md:943
#: ./docs/9.x/migrations.md:1026
#: ./docs/10.x/migrations.md:1050
msgid "If you plan to modify columns created using the `timestamp` method, you must also add the following configuration to your application's `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/migrations.md:945
#: ./docs/9.x/migrations.md:1028
#: ./docs/10.x/migrations.md:1052
msgid "use Illuminate\\Database\\DBAL\\TimestampType;\n\n"
"'dbal' => [\n"
"    'types' => [\n"
"        'timestamp' => TimestampType::class,\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/migrations.md:955
#: ./docs/9.x/migrations.md:1039
msgid "If your application is using Microsoft SQL Server, please ensure that you install `doctrine/dbal:^3.0`."
msgstr ""

#: ./docs/8.x/migrations.md:957
#: ./docs/9.x/migrations.md:1041
#~ msgctxt "P"
#~ msgid "<a name=\"updating-column-attributes\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:958
#: ./docs/9.x/migrations.md:1042
msgid "Updating Column Attributes"
msgstr ""

#: ./docs/8.x/migrations.md:960
#: ./docs/9.x/migrations.md:1044
#: ./docs/10.x/migrations.md:1031
#: ./docs/11.x/migrations.md:1018
#: ./docs/master/migrations.md:1006
msgid "The `change` method allows you to modify the type and attributes of existing columns. For example, you may wish to increase the size of a `string` column. To see the `change` method in action, let's increase the size of the `name` column from 25 to 50. To accomplish this, we simply define the new state of the column and then call the `change` method:"
msgstr ""

#: ./docs/8.x/migrations.md:962
#: ./docs/9.x/migrations.md:1046
#: ./docs/10.x/migrations.md:1033
#: ./docs/11.x/migrations.md:1020
#: ./docs/master/migrations.md:1008
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('name', 50)->change();\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:966
#: ./docs/9.x/migrations.md:1050
msgid "We could also modify a column to be nullable:"
msgstr ""

#: ./docs/8.x/migrations.md:968
#: ./docs/9.x/migrations.md:1052
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('name', 50)->nullable()->change();\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:972
msgid "The following column types can be modified: `bigInteger`, `binary`, `boolean`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`.  To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites)."
msgstr ""

#: ./docs/8.x/migrations.md:974
#: ./docs/9.x/migrations.md:1059
#: ./docs/10.x/migrations.md:1065
#: ./docs/11.x/migrations.md:1040
#: ./docs/master/migrations.md:1028
#~ msgctxt "P"
#~ msgid "<a name=\"renaming-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:975
#: ./docs/9.x/migrations.md:1060
#: ./docs/10.x/migrations.md:1066
#: ./docs/11.x/migrations.md:1041
#: ./docs/master/migrations.md:1029
msgid "Renaming Columns"
msgstr ""

#: ./docs/8.x/migrations.md:977
msgid "To rename a column, you may use the `renameColumn` method provided by the schema builder blueprint. Before renaming a column, ensure that you have installed the `doctrine/dbal` library via the Composer package manager:"
msgstr ""

#: ./docs/9.x/migrations.md:978
msgid "<?php\n\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Database\\Query\\Expression;\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n"
"};"
msgstr ""

#: ./docs/8.x/migrations.md:979
#: ./docs/9.x/migrations.md:1064
#: ./docs/10.x/migrations.md:1070
#: ./docs/11.x/migrations.md:1045
#: ./docs/master/migrations.md:1033
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->renameColumn('from', 'to');\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:983
msgid "Renaming an `enum` column is not currently supported."
msgstr ""

#: ./docs/8.x/migrations.md:985
#: ./docs/9.x/migrations.md:1081
#: ./docs/10.x/migrations.md:1087
#: ./docs/11.x/migrations.md:1049
#: ./docs/master/migrations.md:1037
#~ msgctxt "P"
#~ msgid "<a name=\"dropping-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:986
#: ./docs/9.x/migrations.md:1082
#: ./docs/10.x/migrations.md:1088
#: ./docs/11.x/migrations.md:1050
#: ./docs/master/migrations.md:1038
msgid "Dropping Columns"
msgstr ""

#: ./docs/8.x/migrations.md:988
msgid "To drop a column, you may use the `dropColumn` method on the schema builder blueprint. If your application is utilizing an SQLite database, you must install the `doctrine/dbal` package via the Composer package manager before the `dropColumn` method may be used:"
msgstr ""

#: ./docs/8.x/migrations.md:990
#: ./docs/9.x/migrations.md:1086
#: ./docs/10.x/migrations.md:1092
#: ./docs/11.x/migrations.md:1054
#: ./docs/master/migrations.md:1042
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->dropColumn('votes');\n"
"});"
msgstr ""

#: ./docs/10.x/migrations.md:992
#: ./docs/11.x/migrations.md:979
#: ./docs/master/migrations.md:967
msgid "<?php\n\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Database\\Query\\Expression;\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     */\n"
"    public function up(): void\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n"
"};"
msgstr ""

#: ./docs/8.x/migrations.md:994
#: ./docs/9.x/migrations.md:1090
#: ./docs/10.x/migrations.md:1096
#: ./docs/11.x/migrations.md:1058
#: ./docs/master/migrations.md:1046
msgid "You may drop multiple columns from a table by passing an array of column names to the `dropColumn` method:"
msgstr ""

#: ./docs/8.x/migrations.md:996
#: ./docs/9.x/migrations.md:1092
#: ./docs/10.x/migrations.md:1098
#: ./docs/11.x/migrations.md:1060
#: ./docs/master/migrations.md:1048
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->dropColumn(['votes', 'avatar', 'location']);\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:1000
msgid "Dropping or modifying multiple columns within a single migration while using an SQLite database is not supported."
msgstr ""

#: ./docs/8.x/migrations.md:1002
#: ./docs/9.x/migrations.md:1102
#: ./docs/10.x/migrations.md:1107
#: ./docs/11.x/migrations.md:1064
#: ./docs/master/migrations.md:1052
#~ msgctxt "P"
#~ msgid "<a name=\"available-command-aliases\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1003
#: ./docs/9.x/migrations.md:1103
#: ./docs/10.x/migrations.md:1108
#: ./docs/11.x/migrations.md:1065
#: ./docs/master/migrations.md:1053
msgid "Available Command Aliases"
msgstr ""

#: ./docs/9.x/migrations.md:1003
msgid "Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation. In addition, it is not possible to combine raw `default` expressions (using `DB::raw`) with column changes via the `change` method."
msgstr ""

#: ./docs/8.x/migrations.md:1005
#: ./docs/9.x/migrations.md:1105
#: ./docs/10.x/migrations.md:1110
#: ./docs/11.x/migrations.md:1067
#: ./docs/master/migrations.md:1055
msgid "Laravel provides several convenient methods related to dropping common types of columns. Each of these methods is described in the table below:"
msgstr ""

#: ./docs/11.x/migrations.md:1007
msgid "When using the MariaDB or MySQL database, the `after` method may be used to add columns after an existing column in the schema:"
msgstr ""

#: ./docs/8.x/migrations.md:1016
#: ./docs/9.x/migrations.md:1116
#: ./docs/10.x/migrations.md:1121
#: ./docs/11.x/migrations.md:1082
#: ./docs/master/migrations.md:1066
#~ msgctxt "P"
#~ msgid "<a name=\"indexes\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1017
#: ./docs/9.x/migrations.md:1117
#: ./docs/10.x/migrations.md:1122
#: ./docs/11.x/migrations.md:1083
#: ./docs/master/migrations.md:1067
msgid "Indexes"
msgstr ""

#: ./docs/8.x/migrations.md:1019
#: ./docs/9.x/migrations.md:1119
#: ./docs/10.x/migrations.md:1124
#: ./docs/11.x/migrations.md:1085
#: ./docs/master/migrations.md:1069
#~ msgctxt "P"
#~ msgid "<a name=\"creating-indexes\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1020
#: ./docs/9.x/migrations.md:1120
#: ./docs/10.x/migrations.md:1125
#: ./docs/11.x/migrations.md:1086
#: ./docs/master/migrations.md:1070
msgid "Creating Indexes"
msgstr ""

#: ./docs/10.x/migrations.md:1022
#: ./docs/11.x/migrations.md:1009
#: ./docs/master/migrations.md:997
msgid "$table->after('password', function (Blueprint $table) {\n"
"    $table->string('address_line1');\n"
"    $table->string('address_line2');\n"
"    $table->string('city');\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:1022
#: ./docs/9.x/migrations.md:1122
#: ./docs/10.x/migrations.md:1127
#: ./docs/11.x/migrations.md:1088
#: ./docs/master/migrations.md:1072
msgid "The Laravel schema builder supports several types of indexes. The following example creates a new `email` column and specifies that its values should be unique. To create the index, we can chain the `unique` method onto the column definition:"
msgstr ""

#: ./docs/11.x/migrations.md:1024
#: ./docs/master/migrations.md:1012
msgid "When modifying a column, you must explicitly include all the modifiers you want to keep on the column definition - any missing attribute will be dropped. For example, to retain the `unsigned`, `default`, and `comment` attributes, you must call each modifier explicitly when changing the column:"
msgstr ""

#: ./docs/8.x/migrations.md:1024
#: ./docs/9.x/migrations.md:1124
#: ./docs/10.x/migrations.md:1129
#: ./docs/11.x/migrations.md:1090
#: ./docs/master/migrations.md:1074
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('email')->unique();\n"
"});"
msgstr ""

#: ./docs/11.x/migrations.md:1030
#: ./docs/master/migrations.md:1018
msgid "The `change` method does not change the indexes of the column. Therefore, you may use index modifiers to explicitly add or drop an index when modifying the column:"
msgstr ""

#: ./docs/8.x/migrations.md:1031
#: ./docs/9.x/migrations.md:1131
#: ./docs/10.x/migrations.md:1136
#: ./docs/11.x/migrations.md:1097
#: ./docs/master/migrations.md:1081
msgid "Alternatively, you may create the index after defining the column. To do so, you should call the `unique` method on the schema builder blueprint. This method accepts the name of the column that should receive a unique index:"
msgstr ""

#: ./docs/11.x/migrations.md:1032
#: ./docs/master/migrations.md:1020
msgid "// Add an index...\n"
"$table->bigIncrements('id')->primary()->change();\n\n"
"// Drop an index...\n"
"$table->char('postal_code', 10)->unique(false)->change();"
msgstr ""

#: ./docs/8.x/migrations.md:1033
#: ./docs/9.x/migrations.md:1133
#: ./docs/10.x/migrations.md:1138
#: ./docs/11.x/migrations.md:1099
#: ./docs/master/migrations.md:1083
msgid "$table->unique('email');"
msgstr ""

#: ./docs/8.x/migrations.md:1035
#: ./docs/9.x/migrations.md:1135
#: ./docs/10.x/migrations.md:1140
#: ./docs/11.x/migrations.md:1101
#: ./docs/master/migrations.md:1085
msgid "You may even pass an array of columns to an index method to create a compound (or composite) index:"
msgstr ""

#: ./docs/10.x/migrations.md:1037
msgid "When modifying a column, you must explicitly include all of the modifiers you want to keep on the column definition - any missing attribute will be dropped. For example, to retain the `unsigned`, `default`, and `comment` attributes, you must call each modifier explicitly when changing the column:"
msgstr ""

#: ./docs/8.x/migrations.md:1037
#: ./docs/9.x/migrations.md:1137
#: ./docs/10.x/migrations.md:1142
#: ./docs/11.x/migrations.md:1103
#: ./docs/master/migrations.md:1087
msgid "$table->index(['account_id', 'created_at']);"
msgstr ""

#: ./docs/10.x/migrations.md:1039
#: ./docs/11.x/migrations.md:1026
#: ./docs/master/migrations.md:1014
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->integer('votes')->unsigned()->default(1)->comment('my comment')->change();\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:1039
#: ./docs/9.x/migrations.md:1139
#: ./docs/10.x/migrations.md:1144
#: ./docs/11.x/migrations.md:1105
#: ./docs/master/migrations.md:1089
msgid "When creating an index, Laravel will automatically generate an index name based on the table, column names, and the index type, but you may pass a second argument to the method to specify the index name yourself:"
msgstr ""

#: ./docs/8.x/migrations.md:1041
#: ./docs/9.x/migrations.md:1141
#: ./docs/10.x/migrations.md:1146
#: ./docs/11.x/migrations.md:1107
#: ./docs/master/migrations.md:1091
msgid "$table->unique('email', 'unique_email');"
msgstr ""

#: ./docs/10.x/migrations.md:1043
#~ msgctxt "P"
#~ msgid "<a name=\"modifying-columns-on-sqlite\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1043
#: ./docs/9.x/migrations.md:1143
#: ./docs/10.x/migrations.md:1148
#: ./docs/11.x/migrations.md:1109
#: ./docs/master/migrations.md:1093
#~ msgctxt "P"
#~ msgid "<a name=\"available-index-types\"></a>"
#~ msgstr ""

#: ./docs/10.x/migrations.md:1044
msgid "Modifying Columns on SQLite"
msgstr ""

#: ./docs/8.x/migrations.md:1044
#: ./docs/9.x/migrations.md:1144
#: ./docs/10.x/migrations.md:1149
#: ./docs/11.x/migrations.md:1110
#: ./docs/master/migrations.md:1094
msgid "Available Index Types"
msgstr ""

#: ./docs/10.x/migrations.md:1046
msgid "If your application is utilizing an SQLite database, you must install the `doctrine/dbal` package using the Composer package manager before modifying a column. The Doctrine DBAL library is used to determine the current state of the column and to create the SQL queries needed to make the requested changes to your column:"
msgstr ""

#: ./docs/8.x/migrations.md:1046
#: ./docs/9.x/migrations.md:1146
#: ./docs/10.x/migrations.md:1151
#: ./docs/11.x/migrations.md:1112
#: ./docs/master/migrations.md:1096
msgid "Laravel's schema builder blueprint class provides methods for creating each type of index supported by Laravel. Each index method accepts an optional second argument to specify the name of the index. If omitted, the name will be derived from the names of the table and column(s) used for the index, as well as the index type. Each of the available index methods is described in the table below:"
msgstr ""

#: ./docs/9.x/migrations.md:1057
msgid "The following column types can be modified: `bigInteger`, `binary`, `boolean`, `char`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `double`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `tinyText`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`.  To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites)."
msgstr ""

#: ./docs/8.x/migrations.md:1058
#: ./docs/9.x/migrations.md:1158
#: ./docs/10.x/migrations.md:1163
#~ msgctxt "P"
#~ msgid "<a name=\"index-lengths-mysql-mariadb\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1059
#: ./docs/9.x/migrations.md:1159
msgid "Index Lengths & MySQL / MariaDB"
msgstr ""

#: ./docs/8.x/migrations.md:1061
#: ./docs/9.x/migrations.md:1161
#: ./docs/10.x/migrations.md:1166
msgid "By default, Laravel uses the `utf8mb4` character set. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure the default string length by calling the `Schema::defaultStringLength` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/9.x/migrations.md:1062
#: ./docs/10.x/migrations.md:1068
#: ./docs/11.x/migrations.md:1043
#: ./docs/master/migrations.md:1031
msgid "To rename a column, you may use the `renameColumn` method provided by the schema builder:"
msgstr ""

#: ./docs/10.x/migrations.md:1063
msgid "When using the `doctrine/dbal` package, the following column types can be modified: `bigInteger`, `binary`, `boolean`, `char`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `double`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `tinyText`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, `ulid`, and `uuid`."
msgstr ""

#: ./docs/8.x/migrations.md:1063
#: ./docs/9.x/migrations.md:1163
msgid "use Illuminate\\Support\\Facades\\Schema;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Schema::defaultStringLength(191);\n"
"}"
msgstr ""

#: ./docs/9.x/migrations.md:1068
#: ./docs/10.x/migrations.md:1074
#~ msgctxt "P"
#~ msgid "<a name=\"renaming-columns-on-legacy-databases\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:1069
msgid "Renaming Columns On Legacy Databases"
msgstr ""

#: ./docs/9.x/migrations.md:1071
#: ./docs/10.x/migrations.md:1077
msgid "If you are running a database installation older than one of the following releases, you should ensure that you have installed the `doctrine/dbal` library via the Composer package manager before renaming a column:"
msgstr ""

#: ./docs/10.x/migrations.md:1075
msgid "Renaming Columns on Legacy Databases"
msgstr ""

#: ./docs/8.x/migrations.md:1075
#: ./docs/9.x/migrations.md:1175
#: ./docs/10.x/migrations.md:1178
msgid "Alternatively, you may enable the `innodb_large_prefix` option for your database. Refer to your database's documentation for instructions on how to properly enable this option."
msgstr ""

#: ./docs/9.x/migrations.md:1075
#: ./docs/10.x/migrations.md:1081
msgid "MySQL < `8.0.3`"
msgstr ""

#: ./docs/9.x/migrations.md:1076
#: ./docs/10.x/migrations.md:1082
msgid "MariaDB < `10.5.2`"
msgstr ""

#: ./docs/8.x/migrations.md:1077
#: ./docs/9.x/migrations.md:1177
#: ./docs/10.x/migrations.md:1180
#: ./docs/11.x/migrations.md:1128
#: ./docs/master/migrations.md:1108
#~ msgctxt "P"
#~ msgid "<a name=\"renaming-indexes\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:1077
#: ./docs/10.x/migrations.md:1083
msgid "SQLite < `3.25.0`"
msgstr ""

#: ./docs/8.x/migrations.md:1078
#: ./docs/9.x/migrations.md:1178
#: ./docs/10.x/migrations.md:1181
#: ./docs/11.x/migrations.md:1129
#: ./docs/master/migrations.md:1109
msgid "Renaming Indexes"
msgstr ""

#: ./docs/8.x/migrations.md:1080
#: ./docs/9.x/migrations.md:1180
#: ./docs/10.x/migrations.md:1183
#: ./docs/11.x/migrations.md:1131
#: ./docs/master/migrations.md:1111
msgid "To rename an index, you may use the `renameIndex` method provided by the schema builder blueprint. This method accepts the current index name as its first argument and the desired name as its second argument:"
msgstr ""

#: ./docs/8.x/migrations.md:1082
#: ./docs/9.x/migrations.md:1182
#: ./docs/10.x/migrations.md:1185
#: ./docs/11.x/migrations.md:1133
#: ./docs/master/migrations.md:1113
msgid "$table->renameIndex('from', 'to')"
msgstr ""

#: ./docs/8.x/migrations.md:1084
#: ./docs/9.x/migrations.md:1187
#: ./docs/10.x/migrations.md:1190
#: ./docs/11.x/migrations.md:1135
#: ./docs/master/migrations.md:1115
#~ msgctxt "P"
#~ msgid "<a name=\"dropping-indexes\"></a>"
#~ msgstr ""

#: ./docs/9.x/migrations.md:1084
#: ./docs/10.x/migrations.md:1090
#: ./docs/11.x/migrations.md:1052
#: ./docs/master/migrations.md:1040
msgid "To drop a column, you may use the `dropColumn` method on the schema builder:"
msgstr ""

#: ./docs/8.x/migrations.md:1085
#: ./docs/9.x/migrations.md:1188
#: ./docs/10.x/migrations.md:1191
#: ./docs/11.x/migrations.md:1136
#: ./docs/master/migrations.md:1116
msgid "Dropping Indexes"
msgstr ""

#: ./docs/8.x/migrations.md:1087
#: ./docs/9.x/migrations.md:1190
#: ./docs/10.x/migrations.md:1193
#: ./docs/11.x/migrations.md:1138
#: ./docs/master/migrations.md:1118
msgid "To drop an index, you must specify the index's name. By default, Laravel automatically assigns an index name based on the table name, the name of the indexed column, and the index type. Here are some examples:"
msgstr ""

#: ./docs/8.x/migrations.md:1096
#: ./docs/9.x/migrations.md:1200
#: ./docs/10.x/migrations.md:1203
#: ./docs/11.x/migrations.md:1152
#: ./docs/master/migrations.md:1128
msgid "If you pass an array of columns into a method that drops indexes, the conventional index name will be generated based on the table name, columns, and index type:"
msgstr ""

#: ./docs/9.x/migrations.md:1097
#: ./docs/10.x/migrations.md:1102
#~ msgctxt "P"
#~ msgid "<a name=\"dropping-columns-on-legacy-databases\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1098
#: ./docs/9.x/migrations.md:1202
#: ./docs/10.x/migrations.md:1205
#: ./docs/11.x/migrations.md:1154
#: ./docs/master/migrations.md:1130
msgid "Schema::table('geo', function (Blueprint $table) {\n"
"    $table->dropIndex(['state']); // Drops index 'geo_state_index'\n"
"});"
msgstr ""

#: ./docs/9.x/migrations.md:1098
msgid "Dropping Columns On Legacy Databases"
msgstr ""

#: ./docs/9.x/migrations.md:1100
#: ./docs/10.x/migrations.md:1105
msgid "If you are running a version of SQLite prior to `3.35.0`, you must install the `doctrine/dbal` package via the Composer package manager before the `dropColumn` method may be used. Dropping or modifying multiple columns within a single migration while using this package is not supported."
msgstr ""

#: ./docs/8.x/migrations.md:1102
#: ./docs/9.x/migrations.md:1206
#: ./docs/10.x/migrations.md:1209
#: ./docs/11.x/migrations.md:1158
#: ./docs/master/migrations.md:1134
#~ msgctxt "P"
#~ msgid "<a name=\"foreign-key-constraints\"></a>"
#~ msgstr ""

#: ./docs/10.x/migrations.md:1103
msgid "Dropping Columns on Legacy Databases"
msgstr ""

#: ./docs/8.x/migrations.md:1103
#: ./docs/9.x/migrations.md:1207
#: ./docs/10.x/migrations.md:1210
#: ./docs/11.x/migrations.md:1159
#: ./docs/master/migrations.md:1135
msgid "Foreign Key Constraints"
msgstr ""

#: ./docs/8.x/migrations.md:1105
#: ./docs/9.x/migrations.md:1209
#: ./docs/10.x/migrations.md:1212
#: ./docs/11.x/migrations.md:1161
#: ./docs/master/migrations.md:1137
msgid "Laravel also provides support for creating foreign key constraints, which are used to force referential integrity at the database level. For example, let's define a `user_id` column on the `posts` table that references the `id` column on a `users` table:"
msgstr ""

#: ./docs/8.x/migrations.md:1107
#: ./docs/9.x/migrations.md:1211
#: ./docs/10.x/migrations.md:1214
#: ./docs/11.x/migrations.md:1163
#: ./docs/master/migrations.md:1139
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('posts', function (Blueprint $table) {\n"
"    $table->unsignedBigInteger('user_id');\n\n"
"    $table->foreign('user_id')->references('id')->on('users');\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:1116
#: ./docs/9.x/migrations.md:1220
#: ./docs/10.x/migrations.md:1223
#: ./docs/11.x/migrations.md:1172
#: ./docs/master/migrations.md:1148
msgid "Since this syntax is rather verbose, Laravel provides additional, terser methods that use conventions to provide a better developer experience. When using the `foreignId` method to create your column, the example above can be rewritten like so:"
msgstr ""

#: ./docs/8.x/migrations.md:1118
#: ./docs/9.x/migrations.md:1222
#: ./docs/10.x/migrations.md:1225
#: ./docs/11.x/migrations.md:1174
#: ./docs/master/migrations.md:1150
msgid "Schema::table('posts', function (Blueprint $table) {\n"
"    $table->foreignId('user_id')->constrained();\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:1122
#: ./docs/9.x/migrations.md:1226
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column, while the `constrained` method will use conventions to determine the table and column name being referenced. If your table name does not match Laravel's conventions, you may specify the table name by passing it as an argument to the `constrained` method:"
msgstr ""

#: ./docs/8.x/migrations.md:1124
#: ./docs/9.x/migrations.md:1228
msgid "Schema::table('posts', function (Blueprint $table) {\n"
"    $table->foreignId('user_id')->constrained('users');\n"
"});"
msgstr ""

#: ./docs/8.x/migrations.md:1128
#: ./docs/9.x/migrations.md:1232
#: ./docs/10.x/migrations.md:1237
#: ./docs/11.x/migrations.md:1186
#: ./docs/master/migrations.md:1162
msgid "You may also specify the desired action for the \"on delete\" and \"on update\" properties of the constraint:"
msgstr ""

#: ./docs/8.x/migrations.md:1130
#: ./docs/9.x/migrations.md:1234
#: ./docs/10.x/migrations.md:1239
#: ./docs/11.x/migrations.md:1188
#: ./docs/master/migrations.md:1164
msgid "$table->foreignId('user_id')\n"
"      ->constrained()\n"
"      ->onUpdate('cascade')\n"
"      ->onDelete('cascade');"
msgstr ""

#: ./docs/8.x/migrations.md:1135
#: ./docs/9.x/migrations.md:1239
#: ./docs/10.x/migrations.md:1244
#: ./docs/11.x/migrations.md:1193
#: ./docs/master/migrations.md:1169
msgid "An alternative, expressive syntax is also provided for these actions:"
msgstr ""

#: ./docs/8.x/migrations.md:1145
#: ./docs/9.x/migrations.md:1249
#: ./docs/10.x/migrations.md:1255
#: ./docs/11.x/migrations.md:1210
#: ./docs/master/migrations.md:1180
msgid "Any additional [column modifiers](#column-modifiers) must be called before the `constrained` method:"
msgstr ""

#: ./docs/8.x/migrations.md:1147
#: ./docs/9.x/migrations.md:1251
#: ./docs/10.x/migrations.md:1257
#: ./docs/11.x/migrations.md:1212
#: ./docs/master/migrations.md:1182
msgid "$table->foreignId('user_id')\n"
"      ->nullable()\n"
"      ->constrained();"
msgstr ""

#: ./docs/8.x/migrations.md:1151
#: ./docs/9.x/migrations.md:1255
#: ./docs/10.x/migrations.md:1261
#: ./docs/11.x/migrations.md:1216
#: ./docs/master/migrations.md:1186
#~ msgctxt "P"
#~ msgid "<a name=\"dropping-foreign-keys\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1152
#: ./docs/9.x/migrations.md:1256
#: ./docs/10.x/migrations.md:1262
#: ./docs/11.x/migrations.md:1217
#: ./docs/master/migrations.md:1187
msgid "Dropping Foreign Keys"
msgstr ""

#: ./docs/8.x/migrations.md:1154
#: ./docs/9.x/migrations.md:1258
#: ./docs/10.x/migrations.md:1264
#: ./docs/11.x/migrations.md:1219
#: ./docs/master/migrations.md:1189
msgid "To drop a foreign key, you may use the `dropForeign` method, passing the name of the foreign key constraint to be deleted as an argument. Foreign key constraints use the same naming convention as indexes. In other words, the foreign key constraint name is based on the name of the table and the columns in the constraint, followed by a \"_foreign\" suffix:"
msgstr ""

#: ./docs/8.x/migrations.md:1156
#: ./docs/9.x/migrations.md:1260
#: ./docs/10.x/migrations.md:1266
#: ./docs/11.x/migrations.md:1221
#: ./docs/master/migrations.md:1191
msgid "$table->dropForeign('posts_user_id_foreign');"
msgstr ""

#: ./docs/8.x/migrations.md:1158
#: ./docs/9.x/migrations.md:1262
#: ./docs/10.x/migrations.md:1268
#: ./docs/11.x/migrations.md:1223
#: ./docs/master/migrations.md:1193
msgid "Alternatively, you may pass an array containing the column name that holds the foreign key to the `dropForeign` method. The array will be converted to a foreign key constraint name using Laravel's constraint naming conventions:"
msgstr ""

#: ./docs/8.x/migrations.md:1160
#: ./docs/9.x/migrations.md:1264
#: ./docs/10.x/migrations.md:1270
#: ./docs/11.x/migrations.md:1225
#: ./docs/master/migrations.md:1195
msgid "$table->dropForeign(['user_id']);"
msgstr ""

#: ./docs/8.x/migrations.md:1162
#: ./docs/9.x/migrations.md:1266
#: ./docs/10.x/migrations.md:1272
#: ./docs/11.x/migrations.md:1227
#: ./docs/master/migrations.md:1197
#~ msgctxt "P"
#~ msgid "<a name=\"toggling-foreign-key-constraints\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1163
#: ./docs/9.x/migrations.md:1267
#: ./docs/10.x/migrations.md:1273
#: ./docs/11.x/migrations.md:1228
#: ./docs/master/migrations.md:1198
msgid "Toggling Foreign Key Constraints"
msgstr ""

#: ./docs/10.x/migrations.md:1164
msgid "Index Lengths and MySQL / MariaDB"
msgstr ""

#: ./docs/8.x/migrations.md:1165
#: ./docs/9.x/migrations.md:1269
#: ./docs/10.x/migrations.md:1275
#: ./docs/11.x/migrations.md:1230
#: ./docs/master/migrations.md:1200
msgid "You may enable or disable foreign key constraints within your migrations by using the following methods:"
msgstr ""

#: ./docs/8.x/migrations.md:1167
msgid "Schema::enableForeignKeyConstraints();\n\n"
"Schema::disableForeignKeyConstraints();"
msgstr ""

#: ./docs/10.x/migrations.md:1168
msgid "use Illuminate\\Support\\Facades\\Schema;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Schema::defaultStringLength(191);\n"
"}"
msgstr ""

#: ./docs/8.x/migrations.md:1171
#: ./docs/9.x/migrations.md:1280
#: ./docs/10.x/migrations.md:1286
#: ./docs/master/migrations.md:1211
msgid "SQLite disables foreign key constraints by default. When using SQLite, make sure to [enable foreign key support](/docs/{{version}}/database#configuration) in your database configuration before attempting to create them in your migrations. In addition, SQLite only supports foreign keys upon creation of the table and [not when tables are altered](https://www.sqlite.org/omitted.html)."
msgstr ""

#: ./docs/8.x/migrations.md:1173
#: ./docs/9.x/migrations.md:1282
#: ./docs/10.x/migrations.md:1288
#: ./docs/11.x/migrations.md:1243
#: ./docs/master/migrations.md:1213
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/migrations.md:1174
#: ./docs/9.x/migrations.md:1283
#: ./docs/10.x/migrations.md:1289
#: ./docs/11.x/migrations.md:1244
#: ./docs/master/migrations.md:1214
msgid "Events"
msgstr ""

#: ./docs/8.x/migrations.md:1176
#: ./docs/9.x/migrations.md:1285
#: ./docs/10.x/migrations.md:1291
#: ./docs/11.x/migrations.md:1246
#: ./docs/master/migrations.md:1216
msgid "For convenience, each migration operation will dispatch an [event](/docs/{{version}}/events). All of the following events extend the base `Illuminate\\Database\\Events\\MigrationEvent` class:"
msgstr ""

#: ./docs/9.x/migrations.md:1185
#: ./docs/10.x/migrations.md:1188
msgid "If your application is utilizing an SQLite database, you must install the `doctrine/dbal` package via the Composer package manager before the `renameIndex` method may be used."
msgstr ""

#: ./docs/10.x/migrations.md:1229
#: ./docs/11.x/migrations.md:1178
#: ./docs/master/migrations.md:1154
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column, while the `constrained` method will use conventions to determine the table and column being referenced. If your table name does not match Laravel's conventions, you may manually provide it to the `constrained` method. In addition, the name that should be assigned to the generated index may be specified as well:"
msgstr ""

#: ./docs/10.x/migrations.md:1231
#: ./docs/11.x/migrations.md:1180
#: ./docs/master/migrations.md:1156
msgid "Schema::table('posts', function (Blueprint $table) {\n"
"    $table->foreignId('user_id')->constrained(\n"
"        table: 'users', indexName: 'posts_user_id'\n"
"    );\n"
"});"
msgstr ""

#: ./docs/11.x/migrations.md:1241
msgid "SQLite disables foreign key constraints by default. When using SQLite, make sure to [enable foreign key support](/docs/{{version}}/database#configuration) in your database configuration before attempting to create them in your migrations."
msgstr ""

#: ./docs/9.x/migrations.md:1271
#: ./docs/10.x/migrations.md:1277
#: ./docs/11.x/migrations.md:1232
#: ./docs/master/migrations.md:1202
msgid "Schema::enableForeignKeyConstraints();\n\n"
"Schema::disableForeignKeyConstraints();\n\n"
"Schema::withoutForeignKeyConstraints(function () {\n"
"    // Constraints disabled within this closure...\n"
"});"
msgstr ""

