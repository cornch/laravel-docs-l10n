msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/passport.pot\n"
"X-Crowdin-File-ID: 117\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-01-22 14:08\n"

#: docs/10.x/passport.md:block 1 (header)
msgid "Laravel Passport"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Passport Or Sanctum?](#passport-or-sanctum)"
msgstr "[Passport Or Sanctum?](#passport-or-sanctum)"

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Deploying Passport](#deploying-passport)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Migration Customization](#migration-customization)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Upgrading Passport](#upgrading-passport)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Client Secret Hashing](#client-secret-hashing)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Token Lifetimes](#token-lifetimes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Overriding Default Models](#overriding-default-models)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Overriding Routes](#overriding-routes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Issuing Access Tokens](#issuing-access-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Managing Clients](#managing-clients)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Requesting Tokens](#requesting-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Refreshing Tokens](#refreshing-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Revoking Tokens](#revoking-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Purging Tokens](#purging-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Authorization Code Grant with PKCE](#code-grant-pkce)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Creating The Client](#creating-a-auth-pkce-grant-client)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Requesting Tokens](#requesting-auth-pkce-grant-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Password Grant Tokens](#password-grant-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Creating A Password Grant Client](#creating-a-password-grant-client)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Requesting Tokens](#requesting-password-grant-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Requesting All Scopes](#requesting-all-scopes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Customizing The User Provider](#customizing-the-user-provider)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Customizing The Username Field](#customizing-the-username-field)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Customizing The Password Validation](#customizing-the-password-validation)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Implicit Grant Tokens](#implicit-grant-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Client Credentials Grant Tokens](#client-credentials-grant-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Personal Access Tokens](#personal-access-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Creating A Personal Access Client](#creating-a-personal-access-client)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Managing Personal Access Tokens](#managing-personal-access-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Protecting Routes](#protecting-routes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Via Middleware](#via-middleware)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Passing The Access Token](#passing-the-access-token)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Token Scopes](#token-scopes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Defining Scopes](#defining-scopes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Default Scope](#default-scope)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Assigning Scopes To Tokens](#assigning-scopes-to-tokens)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Checking Scopes](#checking-scopes)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Consuming Your API With JavaScript](#consuming-your-api-with-javascript)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/10.x/passport.md:block 2 (unordered list)
msgid "[Testing](#testing)"
msgstr ""

#: docs/10.x/passport.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/passport.md:block 5 (paragraph)
msgid "[Laravel Passport](https://github.com/laravel/passport) provides a full OAuth2 server implementation for your Laravel application in a matter of minutes. Passport is built on top of the [League OAuth2 server](https://github.com/thephpleague/oauth2-server) that is maintained by Andy Millington and Simon Hamp."
msgstr ""

#: docs/10.x/passport.md:block 6 (quote)
msgid "**Warning** This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general [terminology](https://oauth2.thephpleague.com/terminology/) and features of OAuth2 before continuing."
msgstr ""

#: docs/10.x/passport.md:block 8 (header)
msgid "Passport Or Sanctum?"
msgstr ""

#: docs/10.x/passport.md:block 9 (paragraph)
msgid "Before getting started, you may wish to determine if your application would be better served by Laravel Passport or [Laravel Sanctum](/docs/{{version}}/sanctum). If your application absolutely needs to support OAuth2, then you should use Laravel Passport."
msgstr ""

#: docs/10.x/passport.md:block 10 (paragraph)
msgid "However, if you are attempting to authenticate a single-page application, mobile application, or issue API tokens, you should use [Laravel Sanctum](/docs/{{version}}/sanctum). Laravel Sanctum does not support OAuth2; however, it provides a much simpler API authentication development experience."
msgstr ""

#: docs/10.x/passport.md:block 12 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/passport.md:block 13 (paragraph)
msgid "To get started, install Passport via the Composer package manager:"
msgstr ""

#: docs/10.x/passport.md:block 14 (code)
msgid "composer require laravel/passport\n"
msgstr ""

#: docs/10.x/passport.md:block 15 (paragraph)
msgid "Passport's [service provider](/docs/{{version}}/providers) registers its own database migration directory, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store OAuth2 clients and access tokens:"
msgstr ""

#: docs/10.x/passport.md:block 16 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/passport.md:block 17 (paragraph)
msgid "Next, you should execute the `passport:install` Artisan command. This command will create the encryption keys needed to generate secure access tokens. In addition, the command will create \"personal access\" and \"password grant\" clients which will be used to generate access tokens:"
msgstr ""

#: docs/10.x/passport.md:block 18 (code)
msgid "php artisan passport:install\n"
msgstr ""

#: docs/10.x/passport.md:block 19 (quote)
msgid "**Note** If you would like to use UUIDs as the primary key value of the Passport `Client` model instead of auto-incrementing integers, please install Passport using [the `uuids` option](#client-uuids)."
msgstr ""

#: docs/10.x/passport.md:block 20 (paragraph)
msgid "After running the `passport:install` command, add the `Laravel\\Passport\\HasApiTokens` trait to your `App\\Models\\User` model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes. If your model is already using the `Laravel\\Sanctum\\HasApiTokens` trait, you may remove that trait:"
msgstr ""

#: docs/10.x/passport.md:block 21 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, HasFactory, Notifiable;\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 22 (paragraph)
msgid "Finally, in your application's `config/auth.php` configuration file, you should define an `api` authentication guard and set the `driver` option to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:"
msgstr ""

#: docs/10.x/passport.md:block 23 (code)
msgid "'guards' => [\n"
"    'web' => [\n"
"        'driver' => 'session',\n"
"        'provider' => 'users',\n"
"    ],\n\n"
"    'api' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'users',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/passport.md:block 25 (header)
msgid "Client UUIDs"
msgstr ""

#: docs/10.x/passport.md:block 26 (paragraph)
msgid "You may also run the `passport:install` command with the `--uuids` option present. This option will instruct Passport that you would like to use UUIDs instead of auto-incrementing integers as the Passport `Client` model's primary key values. After running the `passport:install` command with the `--uuids` option, you will be given additional instructions regarding disabling Passport's default migrations:"
msgstr ""

#: docs/10.x/passport.md:block 27 (code)
msgid "php artisan passport:install --uuids\n"
msgstr ""

#: docs/10.x/passport.md:block 29 (header)
msgid "Deploying Passport"
msgstr ""

#: docs/10.x/passport.md:block 30 (paragraph)
msgid "When deploying Passport to your application's servers for the first time, you will likely need to run the `passport:keys` command. This command generates the encryption keys Passport needs in order to generate access tokens. The generated keys are not typically kept in source control:"
msgstr ""

#: docs/10.x/passport.md:block 31 (code)
msgid "php artisan passport:keys\n"
msgstr ""

#: docs/10.x/passport.md:block 32 (paragraph)
msgid "If necessary, you may define the path where Passport's keys should be loaded from. You may use the `Passport::loadKeysFrom` method to accomplish this. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 33 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 35 (header)
msgid "Loading Keys From The Environment"
msgstr ""

#: docs/10.x/passport.md:block 36 (paragraph)
msgid "Alternatively, you may publish Passport's configuration file using the `vendor:publish` Artisan command:"
msgstr ""

#: docs/10.x/passport.md:block 37 (code)
msgid "php artisan vendor:publish --tag=passport-config\n"
msgstr ""

#: docs/10.x/passport.md:block 38 (paragraph)
msgid "After the configuration file has been published, you may load your application's encryption keys by defining them as environment variables:"
msgstr ""

#: docs/10.x/passport.md:block 39 (code)
msgid "PASSPORT_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n"
"<private key here>\n"
"-----END RSA PRIVATE KEY-----\"\n\n"
"PASSPORT_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\n"
"<public key here>\n"
"-----END PUBLIC KEY-----\"\n"
msgstr ""

#: docs/10.x/passport.md:block 41 (header)
msgid "Migration Customization"
msgstr ""

#: docs/10.x/passport.md:block 42 (paragraph)
msgid "If you are not going to use Passport's default migrations, you should call the `Passport::ignoreMigrations` method in the `register` method of your `App\\Providers\\AppServiceProvider` class. You may export the default migrations using the `vendor:publish` Artisan command:"
msgstr ""

#: docs/10.x/passport.md:block 43 (code)
msgid "php artisan vendor:publish --tag=passport-migrations\n"
msgstr ""

#: docs/10.x/passport.md:block 45 (header)
msgid "Upgrading Passport"
msgstr ""

#: docs/10.x/passport.md:block 46 (paragraph)
msgid "When upgrading to a new major version of Passport, it's important that you carefully review [the upgrade guide](https://github.com/laravel/passport/blob/master/UPGRADE.md)."
msgstr ""

#: docs/10.x/passport.md:block 48 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/passport.md:block 50 (header)
msgid "Client Secret Hashing"
msgstr ""

#: docs/10.x/passport.md:block 51 (paragraph)
msgid "If you would like your client's secrets to be hashed when stored in your database, you should call the `Passport::hashClientSecrets` method in the `boot` method of your `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 52 (code)
msgid "use Laravel\\Passport\\Passport;\n\n"
"Passport::hashClientSecrets();\n"
msgstr ""

#: docs/10.x/passport.md:block 53 (paragraph)
msgid "Once enabled, all of your client secrets will only be displayable to the user immediately after they are created. Since the plain-text client secret value is never stored in the database, it is not possible to recover the secret's value if it is lost."
msgstr ""

#: docs/10.x/passport.md:block 55 (header)
msgid "Token Lifetimes"
msgstr ""

#: docs/10.x/passport.md:block 56 (paragraph)
msgid "By default, Passport issues long-lived access tokens that expire after one year. If you would like to configure a longer / shorter token lifetime, you may use the `tokensExpireIn`, `refreshTokensExpireIn`, and `personalAccessTokensExpireIn` methods. These methods should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 57 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 58 (quote)
msgid "**Warning** The `expires_at` columns on Passport's database tables are read-only and for display purposes only. When issuing tokens, Passport stores the expiration information within the signed and encrypted tokens. If you need to invalidate a token you should [revoke it](#revoking-tokens)."
msgstr ""

#: docs/10.x/passport.md:block 60 (header)
msgid "Overriding Default Models"
msgstr ""

#: docs/10.x/passport.md:block 61 (paragraph)
msgid "You are free to extend the models used internally by Passport by defining your own model and extending the corresponding Passport model:"
msgstr ""

#: docs/10.x/passport.md:block 62 (code)
msgid "use Laravel\\Passport\\Client as PassportClient;\n\n"
"class Client extends PassportClient\n"
"{\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 63 (paragraph)
msgid "After defining your model, you may instruct Passport to use your custom model via the `Laravel\\Passport\\Passport` class. Typically, you should inform Passport about your custom models in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 64 (code)
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\RefreshToken;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useRefreshTokenModel(RefreshToken::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 66 (header)
msgid "Overriding Routes"
msgstr ""

#: docs/10.x/passport.md:block 67 (paragraph)
msgid "Sometimes you may wish to customize the routes defined by Passport. To achieve this, you first need to ignore the routes registered by Passport by adding `Passport::ignoreRoutes` to the `register` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/10.x/passport.md:block 68 (code)
msgid "use Laravel\\Passport\\Passport;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Passport::ignoreRoutes();\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 69 (paragraph)
msgid "Then, you may copy the routes defined by Passport in [its routes file](https://github.com/laravel/passport/blob/11.x/routes/web.php) to your application's `routes/web.php` file and modify them to your liking:"
msgstr ""

#: docs/10.x/passport.md:block 70 (code)
msgid "Route::group([\n"
"    'as' => 'passport.',\n"
"    'prefix' => config('passport.path', 'oauth'),\n"
"    'namespace' => '\\Laravel\\Passport\\Http\\Controllers',\n"
"], function () {\n"
"    // Passport routes...\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 72 (header)
msgid "Issuing Access Tokens"
msgstr ""

#: docs/10.x/passport.md:block 73 (paragraph)
msgid "Using OAuth2 via authorization codes is how most developers are familiar with OAuth2. When using authorization codes, a client application will redirect a user to your server where they will either approve or deny the request to issue an access token to the client."
msgstr ""

#: docs/10.x/passport.md:block 75 (header)
msgid "Managing Clients"
msgstr ""

#: docs/10.x/passport.md:block 76 (paragraph)
msgid "First, developers building applications that need to interact with your application's API will need to register their application with yours by creating a \"client\". Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization."
msgstr ""

#: docs/10.x/passport.md:block 78 (header)
msgid "The `passport:client` Command"
msgstr ""

#: docs/10.x/passport.md:block 79 (paragraph)
msgid "The simplest way to create a client is using the `passport:client` Artisan command. This command may be used to create your own clients for testing your OAuth2 functionality. When you run the `client` command, Passport will prompt you for more information about your client and will provide you with a client ID and secret:"
msgstr ""

#: docs/10.x/passport.md:block 80 (code)
msgid "php artisan passport:client\n"
msgstr ""

#: docs/10.x/passport.md:block 81 (paragraph)
msgid "**Redirect URLs**"
msgstr ""

#: docs/10.x/passport.md:block 82 (paragraph)
msgid "If you would like to allow multiple redirect URLs for your client, you may specify them using a comma-delimited list when prompted for the URL by the `passport:client` command. Any URLs which contain commas should be URL encoded:"
msgstr ""

#: docs/10.x/passport.md:block 83 (code)
msgid "http://example.com/callback,http://examplefoo.com/callback\n"
msgstr ""

#: docs/10.x/passport.md:block 85 (header)
msgid "JSON API"
msgstr ""

#: docs/10.x/passport.md:block 86 (paragraph)
msgid "Since your application's users will not be able to utilize the `client` command, Passport provides a JSON API that you may use to create clients. This saves you the trouble of having to manually code controllers for creating, updating, and deleting clients."
msgstr ""

#: docs/10.x/passport.md:block 87 (paragraph)
msgid "However, you will need to pair Passport's JSON API with your own frontend to provide a dashboard for your users to manage their clients. Below, we'll review all of the API endpoints for managing clients. For convenience, we'll use [Axios](https://github.com/axios/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#: docs/10.x/passport.md:block 88 (paragraph)
msgid "The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application. It is not able to be called from an external source."
msgstr ""

#: docs/10.x/passport.md:block 90 (header)
msgid "`GET /oauth/clients`"
msgstr ""

#: docs/10.x/passport.md:block 91 (paragraph)
msgid "This route returns all of the clients for the authenticated user. This is primarily useful for listing all of the user's clients so that they may edit or delete them:"
msgstr ""

#: docs/10.x/passport.md:block 92 (code)
msgid "axios.get('/oauth/clients')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 94 (header)
msgid "`POST /oauth/clients`"
msgstr ""

#: docs/10.x/passport.md:block 95 (paragraph)
msgid "This route is used to create new clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization."
msgstr ""

#: docs/10.x/passport.md:block 96 (paragraph)
msgid "When a client is created, it will be issued a client ID and client secret. These values will be used when requesting access tokens from your application. The client creation route will return the new client instance:"
msgstr ""

#: docs/10.x/passport.md:block 97 (code)
msgid "const data = {\n"
"    name: 'Client Name',\n"
"    redirect: 'http://example.com/callback'\n"
"};\n\n"
"axios.post('/oauth/clients', data)\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    })\n"
"    .catch (response => {\n"
"        // List errors on response...\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 99 (header)
msgid "`PUT /oauth/clients/{client-id}`"
msgstr ""

#: docs/10.x/passport.md:block 100 (paragraph)
msgid "This route is used to update clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization. The route will return the updated client instance:"
msgstr ""

#: docs/10.x/passport.md:block 101 (code)
msgid "const data = {\n"
"    name: 'New Client Name',\n"
"    redirect: 'http://example.com/callback'\n"
"};\n\n"
"axios.put('/oauth/clients/' + clientId, data)\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    })\n"
"    .catch (response => {\n"
"        // List errors on response...\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 103 (header)
msgid "`DELETE /oauth/clients/{client-id}`"
msgstr ""

#: docs/10.x/passport.md:block 104 (paragraph)
msgid "This route is used to delete clients:"
msgstr ""

#: docs/10.x/passport.md:block 105 (code)
msgid "axios.delete('/oauth/clients/' + clientId)\n"
"    .then(response => {\n"
"        // ...\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 107 (header)
msgid "Requesting Tokens"
msgstr ""

#: docs/10.x/passport.md:block 109 (header)
msgid "Redirecting For Authorization"
msgstr ""

#: docs/10.x/passport.md:block 110 (paragraph)
msgid "Once a client has been created, developers may use their client ID and secret to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""

#: docs/10.x/passport.md:block 111 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 112 (paragraph)
msgid "The `prompt` parameter may be used to specify the authentication behavior of the Passport application."
msgstr ""

#: docs/10.x/passport.md:block 113 (paragraph)
msgid "If the `prompt` value is `none`, Passport will always throw an authentication error if the user is not already authenticated with the Passport application. If the value is `consent`, Passport will always display the authorization approval screen, even if all scopes were previously granted to the consuming application. When the value is `login`, the Passport application will always prompt the user to re-login to the application, even if they already have an existing session."
msgstr ""

#: docs/10.x/passport.md:block 114 (paragraph)
msgid "If no `prompt` value is provided, the user will be prompted for authorization only if they have not previously authorized access to the consuming application for the requested scopes."
msgstr ""

#: docs/10.x/passport.md:block 115 (quote)
msgid "**Note** Remember, the `/oauth/authorize` route is already defined by Passport. You do not need to manually define this route."
msgstr ""

#: docs/10.x/passport.md:block 117 (header)
msgid "Approving The Request"
msgstr ""

#: docs/10.x/passport.md:block 118 (paragraph)
msgid "When receiving authorization requests, Passport will automatically respond based on the value of `prompt` parameter (if present) and may display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the `redirect_uri` that was specified by the consuming application. The `redirect_uri` must match the `redirect` URL that was specified when the client was created."
msgstr ""

#: docs/10.x/passport.md:block 119 (paragraph)
msgid "If you would like to customize the authorization approval screen, you may publish Passport's views using the `vendor:publish` Artisan command. The published views will be placed in the `resources/views/vendor/passport` directory:"
msgstr ""

#: docs/10.x/passport.md:block 120 (code)
msgid "php artisan vendor:publish --tag=passport-views\n"
msgstr ""

#: docs/10.x/passport.md:block 121 (paragraph)
msgid "Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by [extending the `Client` model](#overriding-default-models) and defining a `skipsAuthorization` method. If `skipsAuthorization` returns `true` the client will be approved and the user will be redirected back to the `redirect_uri` immediately, unless the consuming application has explicitly set the `prompt` parameter when redirecting for authorization:"
msgstr ""

#: docs/10.x/passport.md:block 122 (code)
msgid "<?php\n\n"
"namespace App\\Models\\Passport;\n\n"
"use Laravel\\Passport\\Client as BaseClient;\n\n"
"class Client extends BaseClient\n"
"{\n"
"    /**\n"
"     * Determine if the client should skip the authorization prompt.\n"
"     */\n"
"    public function skipsAuthorization(): bool\n"
"    {\n"
"        return $this->firstParty();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 124 (header)
msgid "Converting Authorization Codes To Access Tokens"
msgstr ""

#: docs/10.x/passport.md:block 125 (paragraph)
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should first verify the `state` parameter against the value that was stored prior to the redirect. If the state parameter matches then the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request:"
msgstr ""

#: docs/10.x/passport.md:block 126 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Route::get('/callback', function (Request $request) {\n"
"    $state = $request->session()->pull('state');\n\n"
"    throw_unless(\n"
"        strlen($state) > 0 && $state === $request->state,\n"
"        InvalidArgumentException::class,\n"
"        'Invalid state value.'\n"
"    );\n\n"
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'authorization_code',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'code' => $request->code,\n"
"    ]);\n\n"
"    return $response->json();\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 127 (paragraph)
msgid "This `/oauth/token` route will return a JSON response containing `access_token`, `refresh_token`, and `expires_in` attributes. The `expires_in` attribute contains the number of seconds until the access token expires."
msgstr ""

#: docs/10.x/passport.md:block 128 (quote)
msgid "**Note** Like the `/oauth/authorize` route, the `/oauth/token` route is defined for you by Passport. There is no need to manually define this route."
msgstr ""

#: docs/10.x/passport.md:block 131 (paragraph)
msgid "Passport also includes a JSON API for managing authorized access tokens. You may pair this with your own frontend to offer your users a dashboard for managing access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints. The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application."
msgstr ""

#: docs/10.x/passport.md:block 133 (header)
msgid "`GET /oauth/tokens`"
msgstr ""

#: docs/10.x/passport.md:block 134 (paragraph)
msgid "This route returns all of the authorized access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they can revoke them:"
msgstr ""

#: docs/10.x/passport.md:block 135 (code)
msgid "axios.get('/oauth/tokens')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 137 (header)
msgid "`DELETE /oauth/tokens/{token-id}`"
msgstr ""

#: docs/10.x/passport.md:block 138 (paragraph)
msgid "This route may be used to revoke authorized access tokens and their related refresh tokens:"
msgstr ""

#: docs/10.x/passport.md:block 139 (code)
msgid "axios.delete('/oauth/tokens/' + tokenId);\n"
msgstr ""

#: docs/10.x/passport.md:block 141 (header)
msgid "Refreshing Tokens"
msgstr ""

#: docs/10.x/passport.md:block 142 (paragraph)
msgid "If your application issues short-lived access tokens, users will need to refresh their access tokens via the refresh token that was provided to them when the access token was issued:"
msgstr ""

#: docs/10.x/passport.md:block 143 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'refresh_token',\n"
"    'refresh_token' => 'the-refresh-token',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'scope' => '',\n"
"]);\n\n"
"return $response->json();\n"
msgstr ""

#: docs/10.x/passport.md:block 146 (header)
msgid "Revoking Tokens"
msgstr ""

#: docs/10.x/passport.md:block 147 (paragraph)
msgid "You may revoke a token by using the `revokeAccessToken` method on the `Laravel\\Passport\\TokenRepository`. You may revoke a token's refresh tokens using the `revokeRefreshTokensByAccessTokenId` method on the `Laravel\\Passport\\RefreshTokenRepository`. These classes may be resolved using Laravel's [service container](/docs/{{version}}/container):"
msgstr ""

#: docs/10.x/passport.md:block 148 (code)
msgid "use Laravel\\Passport\\TokenRepository;\n"
"use Laravel\\Passport\\RefreshTokenRepository;\n\n"
"$tokenRepository = app(TokenRepository::class);\n"
"$refreshTokenRepository = app(RefreshTokenRepository::class);\n\n"
"// Revoke an access token...\n"
"$tokenRepository->revokeAccessToken($tokenId);\n\n"
"// Revoke all of the token's refresh tokens...\n"
"$refreshTokenRepository->revokeRefreshTokensByAccessTokenId($tokenId);\n"
msgstr ""

#: docs/10.x/passport.md:block 150 (header)
msgid "Purging Tokens"
msgstr ""

#: docs/10.x/passport.md:block 151 (paragraph)
msgid "When tokens have been revoked or expired, you might want to purge them from the database. Passport's included `passport:purge` Artisan command can do this for you:"
msgstr ""

#: docs/10.x/passport.md:block 152 (code)
msgid "# Purge revoked and expired tokens and auth codes...\n"
"php artisan passport:purge\n\n"
"# Only purge tokens expired for more than 6 hours...\n"
"php artisan passport:purge --hours=6\n\n"
"# Only purge revoked tokens and auth codes...\n"
"php artisan passport:purge --revoked\n\n"
"# Only purge expired tokens and auth codes...\n"
"php artisan passport:purge --expired\n"
msgstr ""

#: docs/10.x/passport.md:block 153 (paragraph)
msgid "You may also configure a [scheduled job](/docs/{{version}}/scheduling) in your application's `App\\Console\\Kernel` class to automatically prune your tokens on a schedule:"
msgstr ""

#: docs/10.x/passport.md:block 154 (code)
msgid "/**\n"
" * Define the application's command schedule.\n"
" */\n"
"protected function schedule(Schedule $schedule): void\n"
"{\n"
"    $schedule->command('passport:purge')->hourly();\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 156 (header)
msgid "Authorization Code Grant with PKCE"
msgstr ""

#: docs/10.x/passport.md:block 157 (paragraph)
msgid "The Authorization Code grant with \"Proof Key for Code Exchange\" (PKCE) is a secure way to authenticate single page applications or native applications to access your API. This grant should be used when you can't guarantee that the client secret will be stored confidentially or in order to mitigate the threat of having the authorization code intercepted by an attacker. A combination of a \"code verifier\" and a \"code challenge\" replaces the client secret when exchanging the authorization code for an access token."
msgstr ""

#: docs/10.x/passport.md:block 159 (header)
msgid "Creating The Client"
msgstr ""

#: docs/10.x/passport.md:block 160 (paragraph)
msgid "Before your application can issue tokens via the authorization code grant with PKCE, you will need to create a PKCE-enabled client. You may do this using the `passport:client` Artisan command with the `--public` option:"
msgstr ""

#: docs/10.x/passport.md:block 161 (code)
msgid "php artisan passport:client --public\n"
msgstr ""

#: docs/10.x/passport.md:block 165 (header)
msgid "Code Verifier & Code Challenge"
msgstr ""

#: docs/10.x/passport.md:block 166 (paragraph)
msgid "As this authorization grant does not provide a client secret, developers will need to generate a combination of a code verifier and a code challenge in order to request a token."
msgstr ""

#: docs/10.x/passport.md:block 167 (paragraph)
msgid "The code verifier should be a random string of between 43 and 128 characters containing letters, numbers, and `\"-\"`, `\".\"`, `\"_\"`, `\"~\"` characters, as defined in the [RFC 7636 specification](https://tools.ietf.org/html/rfc7636)."
msgstr ""

#: docs/10.x/passport.md:block 168 (paragraph)
msgid "The code challenge should be a Base64 encoded string with URL and filename-safe characters. The trailing `'='` characters should be removed and no line breaks, whitespace, or other additional characters should be present."
msgstr ""

#: docs/10.x/passport.md:block 169 (code)
msgid "$encoded = base64_encode(hash('sha256', $code_verifier, true));\n\n"
"$codeChallenge = strtr(rtrim($encoded, '='), '+/', '-_');\n"
msgstr ""

#: docs/10.x/passport.md:block 172 (paragraph)
msgid "Once a client has been created, you may use the client ID and the generated code verifier and code challenge to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route:"
msgstr ""

#: docs/10.x/passport.md:block 173 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $request->session()->put(\n"
"        'code_verifier', $code_verifier = Str::random(128)\n"
"    );\n\n"
"    $codeChallenge = strtr(rtrim(\n"
"        base64_encode(hash('sha256', $code_verifier, true))\n"
"    , '='), '+/', '-_');\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        'code_challenge' => $codeChallenge,\n"
"        'code_challenge_method' => 'S256',\n"
"        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 176 (paragraph)
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should verify the `state` parameter against the value that was stored prior to the redirect, as in the standard Authorization Code Grant."
msgstr ""

#: docs/10.x/passport.md:block 177 (paragraph)
msgid "If the state parameter matches, the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request along with the originally generated code verifier:"
msgstr ""

#: docs/10.x/passport.md:block 178 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Route::get('/callback', function (Request $request) {\n"
"    $state = $request->session()->pull('state');\n\n"
"    $codeVerifier = $request->session()->pull('code_verifier');\n\n"
"    throw_unless(\n"
"        strlen($state) > 0 && $state === $request->state,\n"
"        InvalidArgumentException::class\n"
"    );\n\n"
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'authorization_code',\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'code_verifier' => $codeVerifier,\n"
"        'code' => $request->code,\n"
"    ]);\n\n"
"    return $response->json();\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 180 (header)
msgid "Password Grant Tokens"
msgstr ""

#: docs/10.x/passport.md:block 181 (quote)
msgid "**Warning** We no longer recommend using password grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/)."
msgstr ""

#: docs/10.x/passport.md:block 182 (paragraph)
msgid "The OAuth2 password grant allows your other first-party clients, such as a mobile application, to obtain an access token using an email address / username and password. This allows you to issue access tokens securely to your first-party clients without requiring your users to go through the entire OAuth2 authorization code redirect flow."
msgstr ""

#: docs/10.x/passport.md:block 184 (header)
msgid "Creating A Password Grant Client"
msgstr ""

#: docs/10.x/passport.md:block 185 (paragraph)
msgid "Before your application can issue tokens via the password grant, you will need to create a password grant client. You may do this using the `passport:client` Artisan command with the `--password` option. **If you have already run the `passport:install` command, you do not need to run this command:**"
msgstr ""

#: docs/10.x/passport.md:block 186 (code)
msgid "php artisan passport:client --password\n"
msgstr ""

#: docs/10.x/passport.md:block 189 (paragraph)
msgid "Once you have created a password grant client, you may request an access token by issuing a `POST` request to the `/oauth/token` route with the user's email address and password. Remember, this route is already registered by Passport so there is no need to define it manually. If the request is successful, you will receive an `access_token` and `refresh_token` in the JSON response from the server:"
msgstr ""

#: docs/10.x/passport.md:block 190 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'password',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'username' => 'taylor@laravel.com',\n"
"    'password' => 'my-password',\n"
"    'scope' => '',\n"
"]);\n\n"
"return $response->json();\n"
msgstr ""

#: docs/10.x/passport.md:block 191 (quote)
msgid "**Note** Remember, access tokens are long-lived by default. However, you are free to [configure your maximum access token lifetime](#configuration) if needed."
msgstr ""

#: docs/10.x/passport.md:block 193 (header)
msgid "Requesting All Scopes"
msgstr ""

#: docs/10.x/passport.md:block 194 (paragraph)
msgid "When using the password grant or client credentials grant, you may wish to authorize the token for all of the scopes supported by your application. You can do this by requesting the `*` scope. If you request the `*` scope, the `can` method on the token instance will always return `true`. This scope may only be assigned to a token that is issued using the `password` or `client_credentials` grant:"
msgstr ""

#: docs/10.x/passport.md:block 195 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'password',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'username' => 'taylor@laravel.com',\n"
"    'password' => 'my-password',\n"
"    'scope' => '*',\n"
"]);\n"
msgstr ""

#: docs/10.x/passport.md:block 197 (header)
msgid "Customizing The User Provider"
msgstr ""

#: docs/10.x/passport.md:block 198 (paragraph)
msgid "If your application uses more than one [authentication user provider](/docs/{{version}}/authentication#introduction), you may specify which user provider the password grant client uses by providing a `--provider` option when creating the client via the `artisan passport:client --password` command. The given provider name should match a valid provider defined in your application's `config/auth.php` configuration file. You can then [protect your route using middleware](#via-middleware) to ensure that only users from the guard's specified provider are authorized."
msgstr ""

#: docs/10.x/passport.md:block 200 (header)
msgid "Customizing The Username Field"
msgstr ""

#: docs/10.x/passport.md:block 201 (paragraph)
msgid "When authenticating using the password grant, Passport will use the `email` attribute of your authenticatable model as the \"username\". However, you may customize this behavior by defining a `findForPassport` method on your model:"
msgstr ""

#: docs/10.x/passport.md:block 202 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Find the user instance for the given username.\n"
"     */\n"
"    public function findForPassport(string $username): User\n"
"    {\n"
"        return $this->where('username', $username)->first();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 204 (header)
msgid "Customizing The Password Validation"
msgstr ""

#: docs/10.x/passport.md:block 205 (paragraph)
msgid "When authenticating using the password grant, Passport will use the `password` attribute of your model to validate the given password. If your model does not have a `password` attribute or you wish to customize the password validation logic, you can define a `validateForPassportPasswordGrant` method on your model:"
msgstr ""

#: docs/10.x/passport.md:block 206 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Validate the password of the user for the Passport password grant.\n"
"     */\n"
"    public function validateForPassportPasswordGrant(string $password): bool\n"
"    {\n"
"        return Hash::check($password, $this->password);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 208 (header)
msgid "Implicit Grant Tokens"
msgstr ""

#: docs/10.x/passport.md:block 209 (quote)
msgid "**Warning** We no longer recommend using implicit grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/)."
msgstr ""

#: docs/10.x/passport.md:block 210 (paragraph)
msgid "The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored. To enable the grant, call the `enableImplicitGrant` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 211 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::enableImplicitGrant();\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 212 (paragraph)
msgid "Once the grant has been enabled, developers may use their client ID to request an access token from your application. The consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""

#: docs/10.x/passport.md:block 213 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'token',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 216 (header)
msgid "Client Credentials Grant Tokens"
msgstr ""

#: docs/10.x/passport.md:block 217 (paragraph)
msgid "The client credentials grant is suitable for machine-to-machine authentication. For example, you might use this grant in a scheduled job which is performing maintenance tasks over an API."
msgstr ""

#: docs/10.x/passport.md:block 218 (paragraph)
msgid "Before your application can issue tokens via the client credentials grant, you will need to create a client credentials grant client. You may do this using the `--client` option of the `passport:client` Artisan command:"
msgstr ""

#: docs/10.x/passport.md:block 219 (code)
msgid "php artisan passport:client --client\n"
msgstr ""

#: docs/10.x/passport.md:block 220 (paragraph)
msgid "Next, to use this grant type, you may add the `CheckClientCredentials` middleware to the `$middlewareAliases` property of your application's `app/Http/Kernel.php` file:"
msgstr ""

#: docs/10.x/passport.md:block 221 (code)
msgid "use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n\n"
"protected $middlewareAliases = [\n"
"    'client' => CheckClientCredentials::class,\n"
"];\n"
msgstr ""

#: docs/10.x/passport.md:block 222 (paragraph)
msgid "Then, attach the middleware to a route:"
msgstr ""

#: docs/10.x/passport.md:block 223 (code)
msgid "Route::get('/orders', function (Request $request) {\n"
"    ...\n"
"})->middleware('client');\n"
msgstr ""

#: docs/10.x/passport.md:block 224 (paragraph)
msgid "To restrict access to the route to specific scopes, you may provide a comma-delimited list of the required scopes when attaching the `client` middleware to the route:"
msgstr ""

#: docs/10.x/passport.md:block 225 (code)
msgid "Route::get('/orders', function (Request $request) {\n"
"    ...\n"
"})->middleware('client:check-status,your-scope');\n"
msgstr ""

#: docs/10.x/passport.md:block 227 (header)
msgid "Retrieving Tokens"
msgstr ""

#: docs/10.x/passport.md:block 228 (paragraph)
msgid "To retrieve a token using this grant type, make a request to the `oauth/token` endpoint:"
msgstr ""

#: docs/10.x/passport.md:block 229 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'client_credentials',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'scope' => 'your-scope',\n"
"]);\n\n"
"return $response->json()['access_token'];\n"
msgstr ""

#: docs/10.x/passport.md:block 231 (header)
msgid "Personal Access Tokens"
msgstr ""

#: docs/10.x/passport.md:block 232 (paragraph)
msgid "Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow. Allowing users to issue tokens to themselves via your application's UI can be useful for allowing users to experiment with your API or may serve as a simpler approach to issuing access tokens in general."
msgstr ""

#: docs/10.x/passport.md:block 233 (quote)
msgid "**Note** If your application is primarily using Passport to issue personal access tokens, consider using [Laravel Sanctum](/docs/{{version}}/sanctum), Laravel's light-weight first-party library for issuing API access tokens."
msgstr ""

#: docs/10.x/passport.md:block 235 (header)
msgid "Creating A Personal Access Client"
msgstr ""

#: docs/10.x/passport.md:block 236 (paragraph)
msgid "Before your application can issue personal access tokens, you will need to create a personal access client. You may do this by executing the `passport:client` Artisan command with the `--personal` option. If you have already run the `passport:install` command, you do not need to run this command:"
msgstr ""

#: docs/10.x/passport.md:block 237 (code)
msgid "php artisan passport:client --personal\n"
msgstr ""

#: docs/10.x/passport.md:block 238 (paragraph)
msgid "After creating your personal access client, place the client's ID and plain-text secret value in your application's `.env` file:"
msgstr ""

#: docs/10.x/passport.md:block 239 (code)
msgid "PASSPORT_PERSONAL_ACCESS_CLIENT_ID=\"client-id-value\"\n"
"PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=\"unhashed-client-secret-value\"\n"
msgstr ""

#: docs/10.x/passport.md:block 241 (header)
msgid "Managing Personal Access Tokens"
msgstr ""

#: docs/10.x/passport.md:block 242 (paragraph)
msgid "Once you have created a personal access client, you may issue tokens for a given user using the `createToken` method on the `App\\Models\\User` model instance. The `createToken` method accepts the name of the token as its first argument and an optional array of [scopes](#token-scopes) as its second argument:"
msgstr ""

#: docs/10.x/passport.md:block 243 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"// Creating a token without scopes...\n"
"$token = $user->createToken('Token Name')->accessToken;\n\n"
"// Creating a token with scopes...\n"
"$token = $user->createToken('My Token', ['place-orders'])->accessToken;\n"
msgstr ""

#: docs/10.x/passport.md:block 246 (paragraph)
msgid "Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a dashboard for managing personal access tokens. Below, we'll review all of the API endpoints for managing personal access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#: docs/10.x/passport.md:block 249 (header)
msgid "`GET /oauth/scopes`"
msgstr ""

#: docs/10.x/passport.md:block 250 (paragraph)
msgid "This route returns all of the [scopes](#token-scopes) defined for your application. You may use this route to list the scopes a user may assign to a personal access token:"
msgstr ""

#: docs/10.x/passport.md:block 251 (code)
msgid "axios.get('/oauth/scopes')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 253 (header)
msgid "`GET /oauth/personal-access-tokens`"
msgstr ""

#: docs/10.x/passport.md:block 254 (paragraph)
msgid "This route returns all of the personal access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they may edit or revoke them:"
msgstr ""

#: docs/10.x/passport.md:block 255 (code)
msgid "axios.get('/oauth/personal-access-tokens')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 257 (header)
msgid "`POST /oauth/personal-access-tokens`"
msgstr ""

#: docs/10.x/passport.md:block 258 (paragraph)
msgid "This route creates new personal access tokens. It requires two pieces of data: the token's `name` and the `scopes` that should be assigned to the token:"
msgstr ""

#: docs/10.x/passport.md:block 259 (code)
msgid "const data = {\n"
"    name: 'Token Name',\n"
"    scopes: []\n"
"};\n\n"
"axios.post('/oauth/personal-access-tokens', data)\n"
"    .then(response => {\n"
"        console.log(response.data.accessToken);\n"
"    })\n"
"    .catch (response => {\n"
"        // List errors on response...\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 261 (header)
msgid "`DELETE /oauth/personal-access-tokens/{token-id}`"
msgstr ""

#: docs/10.x/passport.md:block 262 (paragraph)
msgid "This route may be used to revoke personal access tokens:"
msgstr ""

#: docs/10.x/passport.md:block 263 (code)
msgid "axios.delete('/oauth/personal-access-tokens/' + tokenId);\n"
msgstr ""

#: docs/10.x/passport.md:block 265 (header)
msgid "Protecting Routes"
msgstr ""

#: docs/10.x/passport.md:block 267 (header)
msgid "Via Middleware"
msgstr ""

#: docs/10.x/passport.md:block 268 (paragraph)
msgid "Passport includes an [authentication guard](/docs/{{version}}/authentication#adding-custom-guards) that will validate access tokens on incoming requests. Once you have configured the `api` guard to use the `passport` driver, you only need to specify the `auth:api` middleware on any routes that should require a valid access token:"
msgstr ""

#: docs/10.x/passport.md:block 269 (code)
msgid "Route::get('/user', function () {\n"
"    // ...\n"
"})->middleware('auth:api');\n"
msgstr ""

#: docs/10.x/passport.md:block 270 (quote)
msgid "**Warning** If you are using the [client credentials grant](#client-credentials-grant-tokens), you should use [the `client` middleware](#client-credentials-grant-tokens) to protect your routes instead of the `auth:api` middleware."
msgstr ""

#: docs/10.x/passport.md:block 272 (header)
msgid "Multiple Authentication Guards"
msgstr ""

#: docs/10.x/passport.md:block 273 (paragraph)
msgid "If your application authenticates different types of users that perhaps use entirely different Eloquent models, you will likely need to define a guard configuration for each user provider type in your application. This allows you to protect requests intended for specific user providers. For example, given the following guard configuration the `config/auth.php` configuration file:"
msgstr ""

#: docs/10.x/passport.md:block 274 (code)
msgid "'api' => [\n"
"    'driver' => 'passport',\n"
"    'provider' => 'users',\n"
"],\n\n"
"'api-customers' => [\n"
"    'driver' => 'passport',\n"
"    'provider' => 'customers',\n"
"],\n"
msgstr ""

#: docs/10.x/passport.md:block 275 (paragraph)
msgid "The following route will utilize the `api-customers` guard, which uses the `customers` user provider, to authenticate incoming requests:"
msgstr ""

#: docs/10.x/passport.md:block 276 (code)
msgid "Route::get('/customer', function () {\n"
"    // ...\n"
"})->middleware('auth:api-customers');\n"
msgstr ""

#: docs/10.x/passport.md:block 277 (quote)
msgid "**Note** For more information on using multiple user providers with Passport, please consult the [password grant documentation](#customizing-the-user-provider)."
msgstr ""

#: docs/10.x/passport.md:block 279 (header)
msgid "Passing The Access Token"
msgstr ""

#: docs/10.x/passport.md:block 280 (paragraph)
msgid "When calling routes that are protected by Passport, your application's API consumers should specify their access token as a `Bearer` token in the `Authorization` header of their request. For example, when using the Guzzle HTTP library:"
msgstr ""

#: docs/10.x/passport.md:block 281 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::withHeaders([\n"
"    'Accept' => 'application/json',\n"
"    'Authorization' => 'Bearer '.$accessToken,\n"
"])->get('https://passport-app.test/api/user');\n\n"
"return $response->json();\n"
msgstr ""

#: docs/10.x/passport.md:block 283 (header)
msgid "Token Scopes"
msgstr ""

#: docs/10.x/passport.md:block 284 (paragraph)
msgid "Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. For example, if you are building an e-commerce application, not all API consumers will need the ability to place orders. Instead, you may allow the consumers to only request authorization to access order shipment statuses. In other words, scopes allow your application's users to limit the actions a third-party application can perform on their behalf."
msgstr ""

#: docs/10.x/passport.md:block 286 (header)
msgid "Defining Scopes"
msgstr ""

#: docs/10.x/passport.md:block 287 (paragraph)
msgid "You may define your API's scopes using the `Passport::tokensCan` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class. The `tokensCan` method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:"
msgstr ""

#: docs/10.x/passport.md:block 288 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 290 (header)
msgid "Default Scope"
msgstr ""

#: docs/10.x/passport.md:block 291 (paragraph)
msgid "If a client does not request any specific scopes, you may configure your Passport server to attach default scope(s) to the token using the `setDefaultScope` method. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 292 (code)
msgid "use Laravel\\Passport\\Passport;\n\n"
"Passport::tokensCan([\n"
"    'place-orders' => 'Place orders',\n"
"    'check-status' => 'Check order status',\n"
"]);\n\n"
"Passport::setDefaultScope([\n"
"    'check-status',\n"
"    'place-orders',\n"
"]);\n"
msgstr ""

#: docs/10.x/passport.md:block 293 (quote)
msgid "**Note** Passport's default scopes do not apply to personal access tokens that are generated by the user."
msgstr ""

#: docs/10.x/passport.md:block 295 (header)
msgid "Assigning Scopes To Tokens"
msgstr ""

#: docs/10.x/passport.md:block 297 (header)
msgid "When Requesting Authorization Codes"
msgstr ""

#: docs/10.x/passport.md:block 298 (paragraph)
msgid "When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the `scope` query string parameter. The `scope` parameter should be a space-delimited list of scopes:"
msgstr ""

#: docs/10.x/passport.md:block 299 (code)
msgid "Route::get('/redirect', function () {\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://example.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => 'place-orders check-status',\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 301 (header)
msgid "When Issuing Personal Access Tokens"
msgstr ""

#: docs/10.x/passport.md:block 302 (paragraph)
msgid "If you are issuing personal access tokens using the `App\\Models\\User` model's `createToken` method, you may pass the array of desired scopes as the second argument to the method:"
msgstr ""

#: docs/10.x/passport.md:block 303 (code)
msgid "$token = $user->createToken('My Token', ['place-orders'])->accessToken;\n"
msgstr ""

#: docs/10.x/passport.md:block 305 (header)
msgid "Checking Scopes"
msgstr ""

#: docs/10.x/passport.md:block 306 (paragraph)
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the `$middlewareAliases` property of your `app/Http/Kernel.php` file:"
msgstr ""

#: docs/10.x/passport.md:block 307 (code)
msgid "'scopes' => \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n"
"'scope' => \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n"
msgstr ""

#: docs/10.x/passport.md:block 309 (header)
msgid "Check For All Scopes"
msgstr ""

#: docs/10.x/passport.md:block 310 (paragraph)
msgid "The `scopes` middleware may be assigned to a route to verify that the incoming request's access token has all of the listed scopes:"
msgstr ""

#: docs/10.x/passport.md:block 311 (code)
msgid "Route::get('/orders', function () {\n"
"    // Access token has both \"check-status\" and \"place-orders\" scopes...\n"
"})->middleware(['auth:api', 'scopes:check-status,place-orders']);\n"
msgstr ""

#: docs/10.x/passport.md:block 313 (header)
msgid "Check For Any Scopes"
msgstr ""

#: docs/10.x/passport.md:block 314 (paragraph)
msgid "The `scope` middleware may be assigned to a route to verify that the incoming request's access token has *at least one* of the listed scopes:"
msgstr ""

#: docs/10.x/passport.md:block 315 (code)
msgid "Route::get('/orders', function () {\n"
"    // Access token has either \"check-status\" or \"place-orders\" scope...\n"
"})->middleware(['auth:api', 'scope:check-status,place-orders']);\n"
msgstr ""

#: docs/10.x/passport.md:block 317 (header)
msgid "Checking Scopes On A Token Instance"
msgstr ""

#: docs/10.x/passport.md:block 318 (paragraph)
msgid "Once an access token authenticated request has entered your application, you may still check if the token has a given scope using the `tokenCan` method on the authenticated `App\\Models\\User` instance:"
msgstr ""

#: docs/10.x/passport.md:block 319 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/orders', function (Request $request) {\n"
"    if ($request->user()->tokenCan('place-orders')) {\n"
"        // ...\n"
"    }\n"
"});\n"
msgstr ""

#: docs/10.x/passport.md:block 321 (header)
msgid "Additional Scope Methods"
msgstr ""

#: docs/10.x/passport.md:block 322 (paragraph)
msgid "The `scopeIds` method will return an array of all defined IDs / names:"
msgstr ""

#: docs/10.x/passport.md:block 323 (code)
msgid "use Laravel\\Passport\\Passport;\n\n"
"Passport::scopeIds();\n"
msgstr ""

#: docs/10.x/passport.md:block 324 (paragraph)
msgid "The `scopes` method will return an array of all defined scopes as instances of `Laravel\\Passport\\Scope`:"
msgstr ""

#: docs/10.x/passport.md:block 325 (code)
msgid "Passport::scopes();\n"
msgstr ""

#: docs/10.x/passport.md:block 326 (paragraph)
msgid "The `scopesFor` method will return an array of `Laravel\\Passport\\Scope` instances matching the given IDs / names:"
msgstr ""

#: docs/10.x/passport.md:block 327 (code)
msgid "Passport::scopesFor(['place-orders', 'check-status']);\n"
msgstr ""

#: docs/10.x/passport.md:block 328 (paragraph)
msgid "You may determine if a given scope has been defined using the `hasScope` method:"
msgstr ""

#: docs/10.x/passport.md:block 329 (code)
msgid "Passport::hasScope('place-orders');\n"
msgstr ""

#: docs/10.x/passport.md:block 331 (header)
msgid "Consuming Your API With JavaScript"
msgstr ""

#: docs/10.x/passport.md:block 332 (paragraph)
msgid "When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach to API development allows your own application to consume the same API that you are sharing with the world. The same API may be consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package managers."
msgstr ""

#: docs/10.x/passport.md:block 333 (paragraph)
msgid "Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you. All you need to do is add the `CreateFreshApiToken` middleware to your `web` middleware group in your `app/Http/Kernel.php` file:"
msgstr ""

#: docs/10.x/passport.md:block 334 (code)
msgid "'web' => [\n"
"    // Other middleware...\n"
"    \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n"
"],\n"
msgstr ""

#: docs/10.x/passport.md:block 335 (quote)
msgid "**Warning** You should ensure that the `CreateFreshApiToken` middleware is the last middleware listed in your middleware stack."
msgstr ""

#: docs/10.x/passport.md:block 336 (paragraph)
msgid "This middleware will attach a `laravel_token` cookie to your outgoing responses. This cookie contains an encrypted JWT that Passport will use to authenticate API requests from your JavaScript application. The JWT has a lifetime equal to your `session.lifetime` configuration value. Now, since the browser will automatically send the cookie with all subsequent requests, you may make requests to your application's API without explicitly passing an access token:"
msgstr ""

#: docs/10.x/passport.md:block 337 (code)
msgid "axios.get('/api/user')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });\n"
msgstr ""

#: docs/10.x/passport.md:block 339 (header)
msgid "Customizing The Cookie Name"
msgstr ""

#: docs/10.x/passport.md:block 340 (paragraph)
msgid "If needed, you can customize the `laravel_token` cookie's name using the `Passport::cookie` method. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 341 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::cookie('custom_name');\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 343 (header)
msgid "CSRF Protection"
msgstr ""

#: docs/10.x/passport.md:block 344 (paragraph)
msgid "When using this method of authentication, you will need to ensure a valid CSRF token header is included in your requests. The default Laravel JavaScript scaffolding includes an Axios instance, which will automatically use the encrypted `XSRF-TOKEN` cookie value to send an `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""

#: docs/10.x/passport.md:block 345 (quote)
msgid "**Note** If you choose to send the `X-CSRF-TOKEN` header instead of `X-XSRF-TOKEN`, you will need to use the unencrypted token provided by `csrf_token()`."
msgstr ""

#: docs/10.x/passport.md:block 347 (header)
msgid "Events"
msgstr ""

#: docs/10.x/passport.md:block 348 (paragraph)
msgid "Passport raises events when issuing access tokens and refresh tokens. You may use these events to prune or revoke other access tokens in your database. If you would like, you may attach listeners to these events in your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#: docs/10.x/passport.md:block 349 (code)
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Laravel\\Passport\\Events\\AccessTokenCreated' => [\n"
"        'App\\Listeners\\RevokeOldTokens',\n"
"    ],\n\n"
"    'Laravel\\Passport\\Events\\RefreshTokenCreated' => [\n"
"        'App\\Listeners\\PruneOldTokens',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/10.x/passport.md:block 351 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/passport.md:block 352 (paragraph)
msgid "Passport's `actingAs` method may be used to specify the currently authenticated user as well as its scopes. The first argument given to the `actingAs` method is the user instance and the second is an array of scopes that should be granted to the user's token:"
msgstr ""

#: docs/10.x/passport.md:block 353 (code)
msgid "use App\\Models\\User;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_servers_can_be_created(): void\n"
"{\n"
"    Passport::actingAs(\n"
"        User::factory()->create(),\n"
"        ['create-servers']\n"
"    );\n\n"
"    $response = $this->post('/api/create-server');\n\n"
"    $response->assertStatus(201);\n"
"}\n"
msgstr ""

#: docs/10.x/passport.md:block 354 (paragraph)
msgid "Passport's `actingAsClient` method may be used to specify the currently authenticated client as well as its scopes. The first argument given to the `actingAsClient` method is the client instance and the second is an array of scopes that should be granted to the client's token:"
msgstr ""

#: docs/10.x/passport.md:block 355 (code)
msgid "use Laravel\\Passport\\Client;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_orders_can_be_retrieved(): void\n"
"{\n"
"    Passport::actingAsClient(\n"
"        Client::factory()->create(),\n"
"        ['check-status']\n"
"    );\n\n"
"    $response = $this->get('/api/orders');\n\n"
"    $response->assertStatus(200);\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 6 (quote)
msgid "{note} This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general [terminology](https://oauth2.thephpleague.com/terminology/) and features of OAuth2 before continuing."
msgstr ""

#: docs/8.x/passport.md:block 19 (quote)
msgid "{tip} If you would like to use UUIDs as the primary key value of the Passport `Client` model instead of auto-incrementing integers, please install Passport using [the `uuids` option](#client-uuids)."
msgstr ""

#: docs/8.x/passport.md:block 22 (paragraph)
msgid "Next, you should call the `Passport::routes` method within the `boot` method of your `App\\Providers\\AuthServiceProvider`. This method will register the routes necessary to issue access tokens and revoke access tokens, clients, and personal access tokens:"
msgstr ""

#: docs/8.x/passport.md:block 23 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"use Laravel\\Passport\\Passport;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n"
"    ];\n\n"
"    /**\n"
"     * Register any authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        if (! $this->app->routesAreCached()) {\n"
"            Passport::routes();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 24 (paragraph)
msgid "Finally, in your application's `config/auth.php` configuration file, you should set the `driver` option of the `api` authentication guard to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:"
msgstr ""

#: docs/8.x/passport.md:block 35 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 59 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 60 (quote)
msgid "{note} The `expires_at` columns on Passport's database tables are read-only and for display purposes only. When issuing tokens, Passport stores the expiration information within the signed and encrypted tokens. If you need to invalidate a token you should [revoke it](#revoking-tokens)."
msgstr ""

#: docs/8.x/passport.md:block 66 (code)
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 101 (code)
msgid "axios.delete('/oauth/clients/' + clientId)\n"
"    .then(response => {\n"
"        //\n"
"    });\n"
msgstr ""

#: docs/8.x/passport.md:block 107 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/8.x/passport.md:block 108 (quote)
msgid "{tip} Remember, the `/oauth/authorize` route is already defined by the `Passport::routes` method. You do not need to manually define this route."
msgstr ""

#: docs/8.x/passport.md:block 111 (paragraph)
msgid "When receiving authorization requests, Passport will automatically display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the `redirect_uri` that was specified by the consuming application. The `redirect_uri` must match the `redirect` URL that was specified when the client was created."
msgstr ""

#: docs/8.x/passport.md:block 114 (paragraph)
msgid "Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by [extending the `Client` model](#overriding-default-models) and defining a `skipsAuthorization` method. If `skipsAuthorization` returns `true` the client will be approved and the user will be redirected back to the `redirect_uri` immediately:"
msgstr ""

#: docs/8.x/passport.md:block 115 (code)
msgid "<?php\n\n"
"namespace App\\Models\\Passport;\n\n"
"use Laravel\\Passport\\Client as BaseClient;\n\n"
"class Client extends BaseClient\n"
"{\n"
"    /**\n"
"     * Determine if the client should skip the authorization prompt.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function skipsAuthorization()\n"
"    {\n"
"        return $this->firstParty();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 119 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Route::get('/callback', function (Request $request) {\n"
"    $state = $request->session()->pull('state');\n\n"
"    throw_unless(\n"
"        strlen($state) > 0 && $state === $request->state,\n"
"        InvalidArgumentException::class\n"
"    );\n\n"
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'authorization_code',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'code' => $request->code,\n"
"    ]);\n\n"
"    return $response->json();\n"
"});\n"
msgstr ""

#: docs/8.x/passport.md:block 121 (quote)
msgid "{tip} Like the `/oauth/authorize` route, the `/oauth/token` route is defined for you by the `Passport::routes` method. There is no need to manually define this route."
msgstr ""

#: docs/8.x/passport.md:block 145 (code)
msgid "# Purge revoked and expired tokens and auth codes...\n"
"php artisan passport:purge\n\n"
"# Only purge revoked tokens and auth codes...\n"
"php artisan passport:purge --revoked\n\n"
"# Only purge expired tokens and auth codes...\n"
"php artisan passport:purge --expired\n"
msgstr ""

#: docs/8.x/passport.md:block 147 (code)
msgid "/**\n"
" * Define the application's command schedule.\n"
" *\n"
" * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
" * @return void\n"
" */\n"
"protected function schedule(Schedule $schedule)\n"
"{\n"
"    $schedule->command('passport:purge')->hourly();\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 166 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $request->session()->put(\n"
"        'code_verifier', $code_verifier = Str::random(128)\n"
"    );\n\n"
"    $codeChallenge = strtr(rtrim(\n"
"        base64_encode(hash('sha256', $code_verifier, true))\n"
"    , '='), '+/', '-_');\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        'code_challenge' => $codeChallenge,\n"
"        'code_challenge_method' => 'S256',\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/8.x/passport.md:block 174 (quote)
msgid "{note} We no longer recommend using password grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/)."
msgstr ""

#: docs/8.x/passport.md:block 182 (paragraph)
msgid "Once you have created a password grant client, you may request an access token by issuing a `POST` request to the `/oauth/token` route with the user's email address and password. Remember, this route is already registered by the `Passport::routes` method so there is no need to define it manually. If the request is successful, you will receive an `access_token` and `refresh_token` in the JSON response from the server:"
msgstr ""

#: docs/8.x/passport.md:block 184 (quote)
msgid "{tip} Remember, access tokens are long-lived by default. However, you are free to [configure your maximum access token lifetime](#configuration) if needed."
msgstr ""

#: docs/8.x/passport.md:block 195 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Find the user instance for the given username.\n"
"     *\n"
"     * @param  string  $username\n"
"     * @return \\App\\Models\\User\n"
"     */\n"
"    public function findForPassport($username)\n"
"    {\n"
"        return $this->where('username', $username)->first();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 199 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Validate the password of the user for the Passport password grant.\n"
"     *\n"
"     * @param  string  $password\n"
"     * @return bool\n"
"     */\n"
"    public function validateForPassportPasswordGrant($password)\n"
"    {\n"
"        return Hash::check($password, $this->password);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 202 (quote)
msgid "{note} We no longer recommend using implicit grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/)."
msgstr ""

#: docs/8.x/passport.md:block 204 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::enableImplicitGrant();\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 206 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'token',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});\n"
msgstr ""

#: docs/8.x/passport.md:block 213 (paragraph)
msgid "Next, to use this grant type, you need to add the `CheckClientCredentials` middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#: docs/8.x/passport.md:block 214 (code)
msgid "use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n\n"
"protected $routeMiddleware = [\n"
"    'client' => CheckClientCredentials::class,\n"
"];\n"
msgstr ""

#: docs/8.x/passport.md:block 226 (quote)
msgid "{tip} If your application is primarily using Passport to issue personal access tokens, consider using [Laravel Sanctum](/docs/{{version}}/sanctum), Laravel's light-weight first-party library for issuing API access tokens."
msgstr ""

#: docs/8.x/passport.md:block 262 (code)
msgid "Route::get('/user', function () {\n"
"    //\n"
"})->middleware('auth:api');\n"
msgstr ""

#: docs/8.x/passport.md:block 263 (quote)
msgid "{note} If you are using the [client credentials grant](#client-credentials-grant-tokens), you should use [the `client` middleware](#client-credentials-grant-tokens) to protect your routes instead of the `auth:api` middleware."
msgstr ""

#: docs/8.x/passport.md:block 269 (code)
msgid "Route::get('/customer', function () {\n"
"    //\n"
"})->middleware('auth:api-customers');\n"
msgstr ""

#: docs/8.x/passport.md:block 270 (quote)
msgid "{tip} For more information on using multiple user providers with Passport, please consult the [password grant documentation](#customizing-the-user-provider)."
msgstr ""

#: docs/8.x/passport.md:block 281 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 298 (paragraph)
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#: docs/8.x/passport.md:block 311 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/orders', function (Request $request) {\n"
"    if ($request->user()->tokenCan('place-orders')) {\n"
"        //\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/passport.md:block 327 (quote)
msgid "{note} You should ensure that the `CreateFreshApiToken` middleware is the last middleware listed in your middleware stack."
msgstr ""

#: docs/8.x/passport.md:block 333 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::cookie('custom_name');\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 337 (quote)
msgid "{tip} If you choose to send the `X-CSRF-TOKEN` header instead of `X-XSRF-TOKEN`, you will need to use the unencrypted token provided by `csrf_token()`."
msgstr ""

#: docs/8.x/passport.md:block 345 (code)
msgid "use App\\Models\\User;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_servers_can_be_created()\n"
"{\n"
"    Passport::actingAs(\n"
"        User::factory()->create(),\n"
"        ['create-servers']\n"
"    );\n\n"
"    $response = $this->post('/api/create-server');\n\n"
"    $response->assertStatus(201);\n"
"}\n"
msgstr ""

#: docs/8.x/passport.md:block 347 (code)
msgid "use Laravel\\Passport\\Client;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_orders_can_be_retrieved()\n"
"{\n"
"    Passport::actingAsClient(\n"
"        Client::factory()->create(),\n"
"        ['check-status']\n"
"    );\n\n"
"    $response = $this->get('/api/orders');\n\n"
"    $response->assertStatus(200);\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 33 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 57 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 64 (code)
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\RefreshToken;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useRefreshTokenModel(RefreshToken::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 68 (code)
msgid "use Laravel\\Passport\\Passport;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Passport::ignoreRoutes();\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 70 (code)
msgid "Route::group([\n"
"    'as' => 'passport.',\n"
"    'prefix' => config('passport.path', 'oauth'),\n"
"    'namespace' => 'Laravel\\Passport\\Http\\Controllers',\n"
"], function () {\n"
"    // Passport routes...\n"
"});\n"
msgstr ""

#: docs/9.x/passport.md:block 211 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::enableImplicitGrant();\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 288 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/9.x/passport.md:block 341 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::cookie('custom_name');\n"
"}\n"
msgstr ""

#: docs/master/passport.md:block 33 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}\n"
msgstr ""

#: docs/master/passport.md:block 57 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}\n"
msgstr ""

#: docs/master/passport.md:block 64 (code)
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\RefreshToken;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useRefreshTokenModel(RefreshToken::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}\n"
msgstr ""

#: docs/master/passport.md:block 211 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::enableImplicitGrant();\n"
"}\n"
msgstr ""

#: docs/master/passport.md:block 288 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/master/passport.md:block 341 (code)
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::cookie('custom_name');\n"
"}\n"
msgstr ""

