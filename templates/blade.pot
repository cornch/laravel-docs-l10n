#
msgid ""
msgstr ""

#: docs/8.x/blade.md:block 1 (header)
msgid "Blade Templates"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Displaying Data](#displaying-data)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[HTML Entity Encoding](#html-entity-encoding)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Blade & JavaScript Frameworks](#blade-and-javascript-frameworks)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Blade Directives](#blade-directives)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[If Statements](#if-statements)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Switch Statements](#switch-statements)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Loops](#loops)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[The Loop Variable](#the-loop-variable)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Conditional Classes](#conditional-classes)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Including Subviews](#including-subviews)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[The `@once` Directive](#the-once-directive)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Raw PHP](#raw-php)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Comments](#comments)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Components](#components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Rendering Components](#rendering-components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Passing Data To Components](#passing-data-to-components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Component Attributes](#component-attributes)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Reserved Keywords](#reserved-keywords)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Slots](#slots)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Inline Component Views](#inline-component-views)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Anonymous Components](#anonymous-components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Dynamic Components](#dynamic-components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Manually Registering Components](#manually-registering-components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Building Layouts](#building-layouts)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Layouts Using Components](#layouts-using-components)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Layouts Using Template Inheritance](#layouts-using-template-inheritance)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Forms](#forms)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[CSRF Field](#csrf-field)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Method Field](#method-field)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Validation Errors](#validation-errors)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Stacks](#stacks)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Service Injection](#service-injection)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Extending Blade](#extending-blade)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Custom Echo Handlers](#custom-echo-handlers)"
msgstr ""

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Custom If Statements](#custom-if-statements)"
msgstr ""

#: docs/8.x/blade.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/blade.md:block 5 (paragraph)
msgid "Blade is the simple, yet powerful templating engine that is included with Laravel. Unlike some PHP templating engines, Blade does not restrict you from using plain PHP code in your templates. In fact, all Blade templates are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade template files use the `.blade.php` file extension and are typically stored in the `resources/views` directory."
msgstr ""

#: docs/8.x/blade.md:block 6 (paragraph)
msgid "Blade views may be returned from routes or controller using the global `view` helper. Of course, as mentioned in the documentation on [views](/docs/{{version}}/views), data may be passed to the Blade view using the `view` helper's second argument:"
msgstr ""

#: docs/8.x/blade.md:block 7 (code)
msgid ""
"Route::get('/', function () {\n"
"    return view('greeting', ['name' => 'Finn']);\n"
"});\n"
msgstr ""

#: docs/8.x/blade.md:block 8 (quote)
msgid "{tip} Want to take your Blade templates to the next level and build dynamic interfaces with ease? Check out [Laravel Livewire](https://laravel-livewire.com)."
msgstr ""

#: docs/8.x/blade.md:block 9 (paragraph)
msgid "<a name=\"displaying-data\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 10 (header)
msgid "Displaying Data"
msgstr ""

#: docs/8.x/blade.md:block 11 (paragraph)
msgid "You may display data that is passed to your Blade views by wrapping the variable in curly braces. For example, given the following route:"
msgstr ""

#: docs/8.x/blade.md:block 12 (code)
msgid ""
"Route::get('/', function () {\n"
"    return view('welcome', ['name' => 'Samantha']);\n"
"});\n"
msgstr ""

#: docs/8.x/blade.md:block 13 (paragraph)
msgid "You may display the contents of the `name` variable like so:"
msgstr ""

#: docs/8.x/blade.md:block 14 (code)
msgid "Hello, {{ $name }}.\n"
msgstr ""

#: docs/8.x/blade.md:block 15 (quote)
msgid "{tip} Blade's `{{ }}` echo statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks."
msgstr ""

#: docs/8.x/blade.md:block 16 (paragraph)
msgid "You are not limited to displaying the contents of the variables passed to the view. You may also echo the results of any PHP function. In fact, you can put any PHP code you wish inside of a Blade echo statement:"
msgstr ""

#: docs/8.x/blade.md:block 17 (code)
msgid "The current UNIX timestamp is {{ time() }}.\n"
msgstr ""

#: docs/8.x/blade.md:block 18 (paragraph)
msgid "<a name=\"html-entity-encoding\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 19 (header)
msgid "HTML Entity Encoding"
msgstr ""

#: docs/8.x/blade.md:block 20 (paragraph)
msgid "By default, Blade (and the Laravel `e` helper) will double encode HTML entities. If you would like to disable double encoding, call the `Blade::withoutDoubleEncoding` method from the `boot` method of your `AppServiceProvider`:"
msgstr ""

#: docs/8.x/blade.md:block 21 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::withoutDoubleEncoding();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 22 (paragraph)
msgid "<a name=\"displaying-unescaped-data\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 23 (header)
msgid "Displaying Unescaped Data"
msgstr ""

#: docs/8.x/blade.md:block 24 (paragraph)
msgid "By default, Blade `{{ }}` statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks. If you do not want your data to be escaped, you may use the following syntax:"
msgstr ""

#: docs/8.x/blade.md:block 25 (code)
msgid "Hello, {!! $name !!}.\n"
msgstr ""

#: docs/8.x/blade.md:block 26 (quote)
msgid "{note} Be very careful when echoing content that is supplied by users of your application. You should typically use the escaped, double curly brace syntax to prevent XSS attacks when displaying user supplied data."
msgstr ""

#: docs/8.x/blade.md:block 27 (paragraph)
msgid "<a name=\"blade-and-javascript-frameworks\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 28 (header)
msgid "Blade & JavaScript Frameworks"
msgstr ""

#: docs/8.x/blade.md:block 29 (paragraph)
msgid "Since many JavaScript frameworks also use \"curly\" braces to indicate a given expression should be displayed in the browser, you may use the `@` symbol to inform the Blade rendering engine an expression should remain untouched. For example:"
msgstr ""

#: docs/8.x/blade.md:block 30 (code)
msgid ""
"<h1>Laravel</h1>\n"
"\n"
"Hello, @{{ name }}.\n"
msgstr ""

#: docs/8.x/blade.md:block 31 (paragraph)
msgid "In this example, the `@` symbol will be removed by Blade; however, `{{ name }}` expression will remain untouched by the Blade engine, allowing it to be rendered by your JavaScript framework."
msgstr ""

#: docs/8.x/blade.md:block 32 (paragraph)
msgid "The `@` symbol may also be used to escape Blade directives:"
msgstr ""

#: docs/8.x/blade.md:block 33 (code)
msgid ""
"{{-- Blade template --}}\n"
"@@if()\n"
"\n"
"<!-- HTML output -->\n"
"@if()\n"
msgstr ""

#: docs/8.x/blade.md:block 34 (paragraph)
msgid "<a name=\"rendering-json\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 35 (header)
msgid "Rendering JSON"
msgstr ""

#: docs/8.x/blade.md:block 36 (paragraph)
msgid "Sometimes you may pass an array to your view with the intention of rendering it as JSON in order to initialize a JavaScript variable. For example:"
msgstr ""

#: docs/8.x/blade.md:block 37 (code)
msgid ""
"<script>\n"
"    var app = <?php echo json_encode($array); ?>;\n"
"</script>\n"
msgstr ""

#: docs/8.x/blade.md:block 38 (paragraph)
msgid "However, instead of manually calling `json_encode`, you may use the `Illuminate\\Support\\Js::from` method directive. The `from` method accepts the same arguments as PHP's `json_encode` function; however, it will ensure that the resulting JSON is properly escaped for inclusion within HTML quotes. The `from` method will return a string `JSON.parse` JavaScript statement that will convert the given object or array into a valid JavaScript object:"
msgstr ""

#: docs/8.x/blade.md:block 39 (code)
msgid ""
"<script>\n"
"    var app = {{ Illuminate\\Support\\Js::from($array) }};\n"
"</script>\n"
msgstr ""

#: docs/8.x/blade.md:block 40 (paragraph)
msgid "The latest versions of the Laravel application skeleton include a `Js` facade, which provides convenient access to this functionality within your Blade templates:"
msgstr ""

#: docs/8.x/blade.md:block 41 (code)
msgid ""
"<script>\n"
"    var app = {{ Js::from($array) }};\n"
"</script>\n"
msgstr ""

#: docs/8.x/blade.md:block 42 (quote)
msgid "{note} You should only use the `Js::from` method to render existing variables as JSON. The Blade templating is based on regular expressions and attempts to pass a complex expression to the directive may cause unexpected failures."
msgstr ""

#: docs/8.x/blade.md:block 43 (paragraph)
msgid "<a name=\"the-at-verbatim-directive\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 44 (header)
msgid "The `@verbatim` Directive"
msgstr ""

#: docs/8.x/blade.md:block 45 (paragraph)
msgid "If you are displaying JavaScript variables in a large portion of your template, you may wrap the HTML in the `@verbatim` directive so that you do not have to prefix each Blade echo statement with an `@` symbol:"
msgstr ""

#: docs/8.x/blade.md:block 46 (code)
msgid ""
"@verbatim\n"
"    <div class=\"container\">\n"
"        Hello, {{ name }}.\n"
"    </div>\n"
"@endverbatim\n"
msgstr ""

#: docs/8.x/blade.md:block 47 (paragraph)
msgid "<a name=\"blade-directives\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 48 (header)
msgid "Blade Directives"
msgstr ""

#: docs/8.x/blade.md:block 49 (paragraph)
msgid "In addition to template inheritance and displaying data, Blade also provides convenient shortcuts for common PHP control structures, such as conditional statements and loops. These shortcuts provide a very clean, terse way of working with PHP control structures while also remaining familiar to their PHP counterparts."
msgstr ""

#: docs/8.x/blade.md:block 50 (paragraph)
msgid "<a name=\"if-statements\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 51 (header)
msgid "If Statements"
msgstr ""

#: docs/8.x/blade.md:block 52 (paragraph)
msgid "You may construct `if` statements using the `@if`, `@elseif`, `@else`, and `@endif` directives. These directives function identically to their PHP counterparts:"
msgstr ""

#: docs/8.x/blade.md:block 53 (code)
msgid ""
"@if (count($records) === 1)\n"
"    I have one record!\n"
"@elseif (count($records) > 1)\n"
"    I have multiple records!\n"
"@else\n"
"    I don't have any records!\n"
"@endif\n"
msgstr ""

#: docs/8.x/blade.md:block 54 (paragraph)
msgid "For convenience, Blade also provides an `@unless` directive:"
msgstr ""

#: docs/8.x/blade.md:block 55 (code)
msgid ""
"@unless (Auth::check())\n"
"    You are not signed in.\n"
"@endunless\n"
msgstr ""

#: docs/8.x/blade.md:block 56 (paragraph)
msgid "In addition to the conditional directives already discussed, the `@isset` and `@empty` directives may be used as convenient shortcuts for their respective PHP functions:"
msgstr ""

#: docs/8.x/blade.md:block 57 (code)
msgid ""
"@isset($records)\n"
"    // $records is defined and is not null...\n"
"@endisset\n"
"\n"
"@empty($records)\n"
"    // $records is \"empty\"...\n"
"@endempty\n"
msgstr ""

#: docs/8.x/blade.md:block 58 (paragraph)
msgid "<a name=\"authentication-directives\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 59 (header)
msgid "Authentication Directives"
msgstr ""

#: docs/8.x/blade.md:block 60 (paragraph)
msgid "The `@auth` and `@guest` directives may be used to quickly determine if the current user is [authenticated](/docs/{{version}}/authentication) or is a guest:"
msgstr ""

#: docs/8.x/blade.md:block 61 (code)
msgid ""
"@auth\n"
"    // The user is authenticated...\n"
"@endauth\n"
"\n"
"@guest\n"
"    // The user is not authenticated...\n"
"@endguest\n"
msgstr ""

#: docs/8.x/blade.md:block 62 (paragraph)
msgid "If needed, you may specify the authentication guard that should be checked when using the `@auth` and `@guest` directives:"
msgstr ""

#: docs/8.x/blade.md:block 63 (code)
msgid ""
"@auth('admin')\n"
"    // The user is authenticated...\n"
"@endauth\n"
"\n"
"@guest('admin')\n"
"    // The user is not authenticated...\n"
"@endguest\n"
msgstr ""

#: docs/8.x/blade.md:block 64 (paragraph)
msgid "<a name=\"environment-directives\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 65 (header)
msgid "Environment Directives"
msgstr ""

#: docs/8.x/blade.md:block 66 (paragraph)
msgid "You may check if the application is running in the production environment using the `@production` directive:"
msgstr ""

#: docs/8.x/blade.md:block 67 (code)
msgid ""
"@production\n"
"    // Production specific content...\n"
"@endproduction\n"
msgstr ""

#: docs/8.x/blade.md:block 68 (paragraph)
msgid "Or, you may determine if the application is running in a specific environment using the `@env` directive:"
msgstr ""

#: docs/8.x/blade.md:block 69 (code)
msgid ""
"@env('staging')\n"
"    // The application is running in \"staging\"...\n"
"@endenv\n"
"\n"
"@env(['staging', 'production'])\n"
"    // The application is running in \"staging\" or \"production\"...\n"
"@endenv\n"
msgstr ""

#: docs/8.x/blade.md:block 70 (paragraph)
msgid "<a name=\"section-directives\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 71 (header)
msgid "Section Directives"
msgstr ""

#: docs/8.x/blade.md:block 72 (paragraph)
msgid "You may determine if a template inheritance section has content using the `@hasSection` directive:"
msgstr ""

#: docs/8.x/blade.md:block 73 (code)
msgid ""
"@hasSection('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @yield('navigation')\n"
"    </div>\n"
"\n"
"    <div class=\"clearfix\"></div>\n"
"@endif\n"
msgstr ""

#: docs/8.x/blade.md:block 74 (paragraph)
msgid "You may use the `sectionMissing` directive to determine if a section does not have content:"
msgstr ""

#: docs/8.x/blade.md:block 75 (code)
msgid ""
"@sectionMissing('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @include('default-navigation')\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/8.x/blade.md:block 76 (paragraph)
msgid "<a name=\"switch-statements\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 77 (header)
msgid "Switch Statements"
msgstr ""

#: docs/8.x/blade.md:block 78 (paragraph)
msgid "Switch statements can be constructed using the `@switch`, `@case`, `@break`, `@default` and `@endswitch` directives:"
msgstr ""

#: docs/8.x/blade.md:block 79 (code)
msgid ""
"@switch($i)\n"
"    @case(1)\n"
"        First case...\n"
"        @break\n"
"\n"
"    @case(2)\n"
"        Second case...\n"
"        @break\n"
"\n"
"    @default\n"
"        Default case...\n"
"@endswitch\n"
msgstr ""

#: docs/8.x/blade.md:block 80 (paragraph)
msgid "<a name=\"loops\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 81 (header)
msgid "Loops"
msgstr ""

#: docs/8.x/blade.md:block 82 (paragraph)
msgid "In addition to conditional statements, Blade provides simple directives for working with PHP's loop structures. Again, each of these directives functions identically to their PHP counterparts:"
msgstr ""

#: docs/8.x/blade.md:block 83 (code)
msgid ""
"@for ($i = 0; $i < 10; $i++)\n"
"    The current value is {{ $i }}\n"
"@endfor\n"
"\n"
"@foreach ($users as $user)\n"
"    <p>This is user {{ $user->id }}</p>\n"
"@endforeach\n"
"\n"
"@forelse ($users as $user)\n"
"    <li>{{ $user->name }}</li>\n"
"@empty\n"
"    <p>No users</p>\n"
"@endforelse\n"
"\n"
"@while (true)\n"
"    <p>I'm looping forever.</p>\n"
"@endwhile\n"
msgstr ""

#: docs/8.x/blade.md:block 84 (quote)
msgid "{tip} While iterating through a `foreach` loop, you may use the [loop variable](#the-loop-variable) to gain valuable information about the loop, such as whether you are in the first or last iteration through the loop."
msgstr ""

#: docs/8.x/blade.md:block 85 (paragraph)
msgid "When using loops you may also end the loop or skip the current iteration using the `@continue` and `@break` directives:"
msgstr ""

#: docs/8.x/blade.md:block 86 (code)
msgid ""
"@foreach ($users as $user)\n"
"    @if ($user->type == 1)\n"
"        @continue\n"
"    @endif\n"
"\n"
"    <li>{{ $user->name }}</li>\n"
"\n"
"    @if ($user->number == 5)\n"
"        @break\n"
"    @endif\n"
"@endforeach\n"
msgstr ""

#: docs/8.x/blade.md:block 87 (paragraph)
msgid "You may also include the continuation or break condition within the directive declaration:"
msgstr ""

#: docs/8.x/blade.md:block 88 (code)
msgid ""
"@foreach ($users as $user)\n"
"    @continue($user->type == 1)\n"
"\n"
"    <li>{{ $user->name }}</li>\n"
"\n"
"    @break($user->number == 5)\n"
"@endforeach\n"
msgstr ""

#: docs/8.x/blade.md:block 89 (paragraph)
msgid "<a name=\"the-loop-variable\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 90 (header)
msgid "The Loop Variable"
msgstr ""

#: docs/8.x/blade.md:block 91 (paragraph)
msgid "While iterating through a `foreach` loop, a `$loop` variable will be available inside of your loop. This variable provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:"
msgstr ""

#: docs/8.x/blade.md:block 92 (code)
msgid ""
"@foreach ($users as $user)\n"
"    @if ($loop->first)\n"
"        This is the first iteration.\n"
"    @endif\n"
"\n"
"    @if ($loop->last)\n"
"        This is the last iteration.\n"
"    @endif\n"
"\n"
"    <p>This is user {{ $user->id }}</p>\n"
"@endforeach\n"
msgstr ""

#: docs/8.x/blade.md:block 93 (paragraph)
msgid "If you are in a nested loop, you may access the parent loop's `$loop` variable via the `parent` property:"
msgstr ""

#: docs/8.x/blade.md:block 94 (code)
msgid ""
"@foreach ($users as $user)\n"
"    @foreach ($user->posts as $post)\n"
"        @if ($loop->parent->first)\n"
"            This is the first iteration of the parent loop.\n"
"        @endif\n"
"    @endforeach\n"
"@endforeach\n"
msgstr ""

#: docs/8.x/blade.md:block 95 (paragraph)
msgid "The `$loop` variable also contains a variety of other useful properties:"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "Property"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "Description"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->index`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "The index of the current loop iteration (starts at 0)."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->iteration`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "The current loop iteration (starts at 1)."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->remaining`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "The iterations remaining in the loop."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->count`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "The total number of items in the array being iterated."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->first`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is the first iteration through the loop."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->last`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is the last iteration through the loop."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->even`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is an even iteration through the loop."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->odd`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is an odd iteration through the loop."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->depth`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "The nesting level of the current loop."
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->parent`"
msgstr ""

#: docs/8.x/blade.md:block 96 (table)
msgid "When in a nested loop, the parent's loop variable."
msgstr ""

#: docs/8.x/blade.md:block 97 (paragraph)
msgid "<a name=\"conditional-classes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 98 (header)
msgid "Conditional Classes"
msgstr ""

#: docs/8.x/blade.md:block 99 (paragraph)
msgid "The `@class` directive conditionally compiles a CSS class string. The directive accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr ""

#: docs/8.x/blade.md:block 100 (code)
msgid ""
"@php\n"
"    $isActive = false;\n"
"    $hasError = true;\n"
"@endphp\n"
"\n"
"<span @class([\n"
"    'p-4',\n"
"    'font-bold' => $isActive,\n"
"    'text-gray-500' => ! $isActive,\n"
"    'bg-red' => $hasError,\n"
"])></span>\n"
"\n"
"<span class=\"p-4 text-gray-500 bg-red\"></span>\n"
msgstr ""

#: docs/8.x/blade.md:block 101 (paragraph)
msgid "<a name=\"including-subviews\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 102 (header)
msgid "Including Subviews"
msgstr ""

#: docs/8.x/blade.md:block 103 (quote)
msgid "{tip} While you're free to use the `@include` directive, Blade [components](#components) provide similar functionality and offer several benefits over the `@include` directive such as data and attribute binding."
msgstr ""

#: docs/8.x/blade.md:block 104 (paragraph)
msgid "Blade's `@include` directive allows you to include a Blade view from within another view. All variables that are available to the parent view will be made available to the included view:"
msgstr ""

#: docs/8.x/blade.md:block 105 (code)
msgid ""
"<div>\n"
"    @include('shared.errors')\n"
"\n"
"    <form>\n"
"        <!-- Form Contents -->\n"
"    </form>\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 106 (paragraph)
msgid "Even though the included view will inherit all data available in the parent view, you may also pass an array of additional data that should be made available to the included view:"
msgstr ""

#: docs/8.x/blade.md:block 107 (code)
msgid "@include('view.name', ['status' => 'complete'])\n"
msgstr ""

#: docs/8.x/blade.md:block 108 (paragraph)
msgid "If you attempt to `@include` a view which does not exist, Laravel will throw an error. If you would like to include a view that may or may not be present, you should use the `@includeIf` directive:"
msgstr ""

#: docs/8.x/blade.md:block 109 (code)
msgid "@includeIf('view.name', ['status' => 'complete'])\n"
msgstr ""

#: docs/8.x/blade.md:block 110 (paragraph)
msgid "If you would like to `@include` a view if a given boolean expression evaluates to `true` or `false`, you may use the `@includeWhen` and `@includeUnless` directives:"
msgstr ""

#: docs/8.x/blade.md:block 111 (code)
msgid ""
"@includeWhen($boolean, 'view.name', ['status' => 'complete'])\n"
"\n"
"@includeUnless($boolean, 'view.name', ['status' => 'complete'])\n"
msgstr ""

#: docs/8.x/blade.md:block 112 (paragraph)
msgid "To include the first view that exists from a given array of views, you may use the `includeFirst` directive:"
msgstr ""

#: docs/8.x/blade.md:block 113 (code)
msgid "@includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])\n"
msgstr ""

#: docs/8.x/blade.md:block 114 (quote)
msgid "{note} You should avoid using the `__DIR__` and `__FILE__` constants in your Blade views, since they will refer to the location of the cached, compiled view."
msgstr ""

#: docs/8.x/blade.md:block 115 (paragraph)
msgid "<a name=\"rendering-views-for-collections\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 116 (header)
msgid "Rendering Views For Collections"
msgstr ""

#: docs/8.x/blade.md:block 117 (paragraph)
msgid "You may combine loops and includes into one line with Blade's `@each` directive:"
msgstr ""

#: docs/8.x/blade.md:block 118 (code)
msgid "@each('view.name', $jobs, 'job')\n"
msgstr ""

#: docs/8.x/blade.md:block 119 (paragraph)
msgid "The `@each` directive's first argument is the view to render for each element in the array or collection. The second argument is the array or collection you wish to iterate over, while the third argument is the variable name that will be assigned to the current iteration within the view. So, for example, if you are iterating over an array of `jobs`, typically you will want to access each job as a `job` variable within the view. The array key for the current iteration will be available as the `key` variable within the view."
msgstr ""

#: docs/8.x/blade.md:block 120 (paragraph)
msgid "You may also pass a fourth argument to the `@each` directive. This argument determines the view that will be rendered if the given array is empty."
msgstr ""

#: docs/8.x/blade.md:block 121 (code)
msgid "@each('view.name', $jobs, 'job', 'view.empty')\n"
msgstr ""

#: docs/8.x/blade.md:block 122 (quote)
msgid "{note} Views rendered via `@each` do not inherit the variables from the parent view. If the child view requires these variables, you should use the `@foreach` and `@include` directives instead."
msgstr ""

#: docs/8.x/blade.md:block 123 (paragraph)
msgid "<a name=\"the-once-directive\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 124 (header)
msgid "The `@once` Directive"
msgstr ""

#: docs/8.x/blade.md:block 125 (paragraph)
msgid "The `@once` directive allows you to define a portion of the template that will only be evaluated once per rendering cycle. This may be useful for pushing a given piece of JavaScript into the page's header using [stacks](#stacks). For example, if you are rendering a given [component](#components) within a loop, you may wish to only push the JavaScript to the header the first time the component is rendered:"
msgstr ""

#: docs/8.x/blade.md:block 126 (code)
msgid ""
"@once\n"
"    @push('scripts')\n"
"        <script>\n"
"            // Your custom JavaScript...\n"
"        </script>\n"
"    @endpush\n"
"@endonce\n"
msgstr ""

#: docs/8.x/blade.md:block 127 (paragraph)
msgid "<a name=\"raw-php\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 128 (header)
msgid "Raw PHP"
msgstr ""

#: docs/8.x/blade.md:block 129 (paragraph)
msgid "In some situations, it's useful to embed PHP code into your views. You can use the Blade `@php` directive to execute a block of plain PHP within your template:"
msgstr ""

#: docs/8.x/blade.md:block 130 (code)
msgid ""
"@php\n"
"    $counter = 1;\n"
"@endphp\n"
msgstr ""

#: docs/8.x/blade.md:block 131 (paragraph)
msgid "<a name=\"comments\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 132 (header)
msgid "Comments"
msgstr ""

#: docs/8.x/blade.md:block 133 (paragraph)
msgid "Blade also allows you to define comments in your views. However, unlike HTML comments, Blade comments are not included in the HTML returned by your application:"
msgstr ""

#: docs/8.x/blade.md:block 134 (code)
msgid "{{-- This comment will not be present in the rendered HTML --}}\n"
msgstr ""

#: docs/8.x/blade.md:block 135 (paragraph)
msgid "<a name=\"components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 136 (header)
msgid "Components"
msgstr ""

#: docs/8.x/blade.md:block 137 (paragraph)
msgid "Components and slots provide similar benefits to sections, layouts, and includes; however, some may find the mental model of components and slots easier to understand. There are two approaches to writing components: class based components and anonymous components."
msgstr ""

#: docs/8.x/blade.md:block 138 (paragraph)
msgid "To create a class based component, you may use the `make:component` Artisan command. To illustrate how to use components, we will create a simple `Alert` component. The `make:component` command will place the component in the `App\\View\\Components` directory:"
msgstr ""

#: docs/8.x/blade.md:block 139 (code)
msgid "php artisan make:component Alert\n"
msgstr ""

#: docs/8.x/blade.md:block 140 (paragraph)
msgid "The `make:component` command will also create a view template for the component. The view will be placed in the `resources/views/components` directory. When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory, so no further component registration is typically required."
msgstr ""

#: docs/8.x/blade.md:block 141 (paragraph)
msgid "You may also create components within subdirectories:"
msgstr ""

#: docs/8.x/blade.md:block 142 (code)
msgid "php artisan make:component Forms/Input\n"
msgstr ""

#: docs/8.x/blade.md:block 143 (paragraph)
msgid "The command above will create an `Input` component in the `App\\View\\Components\\Forms` directory and the view will be placed in the `resources/views/components/forms` directory."
msgstr ""

#: docs/8.x/blade.md:block 144 (paragraph)
msgid "<a name=\"manually-registering-package-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 145 (header)
msgid "Manually Registering Package Components"
msgstr ""

#: docs/8.x/blade.md:block 146 (paragraph)
msgid "When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory."
msgstr ""

#: docs/8.x/blade.md:block 147 (paragraph)
msgid "However, if you are building a package that utilizes Blade components, you will need to manually register your component class and its HTML tag alias. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

#: docs/8.x/blade.md:block 148 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', Alert::class);\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 149 (paragraph)
msgid "Once your component has been registered, it may be rendered using its tag alias:"
msgstr ""

#: docs/8.x/blade.md:block 150 (code)
msgid "<x-package-alert/>\n"
msgstr ""

#: docs/8.x/blade.md:block 151 (paragraph)
msgid "Alternatively, you may use the `componentNamespace` method to autoload component classes by convention. For example, a `Nightshade` package might have `Calendar` and `ColorPicker` components that reside within the `Package\\Views\\Components` namespace:"
msgstr ""

#: docs/8.x/blade.md:block 152 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 153 (paragraph)
msgid "This will allow the usage of package components by their vendor namespace using the `package-name::` syntax:"
msgstr ""

#: docs/8.x/blade.md:block 154 (code)
msgid ""
"<x-nightshade::calendar />\n"
"<x-nightshade::color-picker />\n"
msgstr ""

#: docs/8.x/blade.md:block 155 (paragraph)
msgid "Blade will automatically detect the class that's linked to this component by pascal-casing the component name. Subdirectories are also supported using \"dot\" notation."
msgstr ""

#: docs/8.x/blade.md:block 156 (paragraph)
msgid "<a name=\"rendering-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 157 (header)
msgid "Rendering Components"
msgstr ""

#: docs/8.x/blade.md:block 158 (paragraph)
msgid "To display a component, you may use a Blade component tag within one of your Blade templates. Blade component tags start with the string `x-` followed by the kebab case name of the component class:"
msgstr ""

#: docs/8.x/blade.md:block 159 (code)
msgid ""
"<x-alert/>\n"
"\n"
"<x-user-profile/>\n"
msgstr ""

#: docs/8.x/blade.md:block 160 (paragraph)
msgid "If the component class is nested deeper within the `App\\View\\Components` directory, you may use the `.` character to indicate directory nesting. For example, if we assume a component is located at `App\\View\\Components\\Inputs\\Button.php`, we may render it like so:"
msgstr ""

#: docs/8.x/blade.md:block 161 (code)
msgid "<x-inputs.button/>\n"
msgstr ""

#: docs/8.x/blade.md:block 162 (paragraph)
msgid "<a name=\"passing-data-to-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 163 (header)
msgid "Passing Data To Components"
msgstr ""

#: docs/8.x/blade.md:block 164 (paragraph)
msgid "You may pass data to Blade components using HTML attributes. Hard-coded, primitive values may be passed to the component using simple HTML attribute strings. PHP expressions and variables should be passed to the component via attributes that use the `:` character as a prefix:"
msgstr ""

#: docs/8.x/blade.md:block 165 (code)
msgid "<x-alert type=\"error\" :message=\"$message\"/>\n"
msgstr ""

#: docs/8.x/blade.md:block 166 (paragraph)
msgid "You should define the component's required data in its class constructor. All public properties on a component will automatically be made available to the component's view. It is not necessary to pass the data to the view from the component's `render` method:"
msgstr ""

#: docs/8.x/blade.md:block 167 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\View\\Components;\n"
"\n"
"use Illuminate\\View\\Component;\n"
"\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n"
"\n"
"    /**\n"
"     * The alert message.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $message;\n"
"\n"
"    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  string  $type\n"
"     * @param  string  $message\n"
"     * @return void\n"
"     */\n"
"    public function __construct($type, $message)\n"
"    {\n"
"        $this->type = $type;\n"
"        $this->message = $message;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return view('components.alert');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 168 (paragraph)
msgid "When your component is rendered, you may display the contents of your component's public variables by echoing the variables by name:"
msgstr ""

#: docs/8.x/blade.md:block 169 (code)
msgid ""
"<div class=\"alert alert-{{ $type }}\">\n"
"    {{ $message }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 170 (paragraph)
msgid "<a name=\"casing\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 171 (header)
msgid "Casing"
msgstr ""

#: docs/8.x/blade.md:block 172 (paragraph)
msgid "Component constructor arguments should be specified using `camelCase`, while `kebab-case` should be used when referencing the argument names in your HTML attributes. For example, given the following component constructor:"
msgstr ""

#: docs/8.x/blade.md:block 173 (code)
msgid ""
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  string  $alertType\n"
" * @return void\n"
" */\n"
"public function __construct($alertType)\n"
"{\n"
"    $this->alertType = $alertType;\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 174 (paragraph)
msgid "The `$alertType` argument may be provided to the component like so:"
msgstr ""

#: docs/8.x/blade.md:block 175 (code)
msgid "<x-alert alert-type=\"danger\" />\n"
msgstr ""

#: docs/8.x/blade.md:block 176 (paragraph)
msgid "<a name=\"escaping-attribute-rendering\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 177 (header)
msgid "Escaping Attribute Rendering"
msgstr ""

#: docs/8.x/blade.md:block 178 (paragraph)
msgid "Since some JavaScript frameworks such as Alpine.js also use colon-prefixed attributes, you may use a double colon (`::`) prefix to inform Blade that the attribute is not a PHP expression. For example, given the following component:"
msgstr ""

#: docs/8.x/blade.md:block 179 (code)
msgid ""
"<x-button ::class=\"{ danger: isDeleting }\">\n"
"    Submit\n"
"</x-button>\n"
msgstr ""

#: docs/8.x/blade.md:block 180 (paragraph)
msgid "The following HTML will be rendered by Blade:"
msgstr ""

#: docs/8.x/blade.md:block 181 (code)
msgid ""
"<button :class=\"{ danger: isDeleting }\">\n"
"    Submit\n"
"</button>\n"
msgstr ""

#: docs/8.x/blade.md:block 182 (paragraph)
msgid "<a name=\"component-methods\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 183 (header)
msgid "Component Methods"
msgstr ""

#: docs/8.x/blade.md:block 184 (paragraph)
msgid "In addition to public variables being available to your component template, any public methods on the component may be invoked. For example, imagine a component that has an `isSelected` method:"
msgstr ""

#: docs/8.x/blade.md:block 185 (code)
msgid ""
"/**\n"
" * Determine if the given option is the currently selected option.\n"
" *\n"
" * @param  string  $option\n"
" * @return bool\n"
" */\n"
"public function isSelected($option)\n"
"{\n"
"    return $option === $this->selected;\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 186 (paragraph)
msgid "You may execute this method from your component template by invoking the variable matching the name of the method:"
msgstr ""

#: docs/8.x/blade.md:block 187 (code)
msgid ""
"<option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n"
"    {{ $label }}\n"
"</option>\n"
msgstr ""

#: docs/8.x/blade.md:block 188 (paragraph)
msgid "<a name=\"using-attributes-slots-within-component-class\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 189 (header)
msgid "Accessing Attributes & Slots Within Component Classes"
msgstr ""

#: docs/8.x/blade.md:block 190 (paragraph)
msgid "Blade components also allow you to access the component name, attributes, and slot inside the class's render method. However, in order to access this data, you should return a closure from your component's `render` method. The closure will receive a `$data` array as its only argument. This array will contain several elements that provide information about the component:"
msgstr ""

#: docs/8.x/blade.md:block 191 (code)
msgid ""
"/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return function (array $data) {\n"
"        // $data['componentName'];\n"
"        // $data['attributes'];\n"
"        // $data['slot'];\n"
"\n"
"        return '<div>Components content</div>';\n"
"    };\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 192 (paragraph)
msgid "The `componentName` is equal to the name used in the HTML tag after the `x-` prefix. So `<x-alert />`'s `componentName` will be `alert`. The `attributes` element will contain all of the attributes that were present on the HTML tag. The `slot` element is an `Illuminate\\Support\\HtmlString` instance with the contents of the component's slot."
msgstr ""

#: docs/8.x/blade.md:block 193 (paragraph)
msgid "The closure should return a string. If the returned string corresponds to an existing view, that view will be rendered; otherwise, the returned string will be evaluated as an inline Blade view."
msgstr ""

#: docs/8.x/blade.md:block 194 (paragraph)
msgid "<a name=\"additional-dependencies\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 195 (header)
msgid "Additional Dependencies"
msgstr ""

#: docs/8.x/blade.md:block 196 (paragraph)
msgid "If your component requires dependencies from Laravel's [service container](/docs/{{version}}/container), you may list them before any of the component's data attributes and they will automatically be injected by the container:"
msgstr ""

#: docs/8.x/blade.md:block 197 (code)
msgid ""
"use App\\Services\\AlertCreator\n"
"\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 198 (paragraph)
msgid "<a name=\"hiding-attributes-and-methods\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 199 (header)
msgid "Hiding Attributes / Methods"
msgstr ""

#: docs/8.x/blade.md:block 200 (paragraph)
msgid "If you would like to prevent some public methods or properties from being exposed as variables to your component template, you may add them to an `$except` array property on your component:"
msgstr ""

#: docs/8.x/blade.md:block 201 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\View\\Components;\n"
"\n"
"use Illuminate\\View\\Component;\n"
"\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n"
"\n"
"    /**\n"
"     * The properties / methods that should not be exposed to the component template.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = ['type'];\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 202 (paragraph)
msgid "<a name=\"component-attributes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 203 (header)
msgid "Component Attributes"
msgstr ""

#: docs/8.x/blade.md:block 204 (paragraph)
msgid "We've already examined how to pass data attributes to a component; however, sometimes you may need to specify additional HTML attributes, such as `class`, that are not part of the data required for a component to function. Typically, you want to pass these additional attributes down to the root element of the component template. For example, imagine we want to render an `alert` component like so:"
msgstr ""

#: docs/8.x/blade.md:block 205 (code)
msgid "<x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n"
msgstr ""

#: docs/8.x/blade.md:block 206 (paragraph)
msgid "All of the attributes that are not part of the component's constructor will automatically be added to the component's \"attribute bag\". This attribute bag is automatically made available to the component via the `$attributes` variable. All of the attributes may be rendered within the component by echoing this variable:"
msgstr ""

#: docs/8.x/blade.md:block 207 (code)
msgid ""
"<div {{ $attributes }}>\n"
"    <!-- Component content -->\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 208 (quote)
msgid "{note} Using directives such as `@env` within component tags is not supported at this time. For example, `<x-alert :live=\"@env('production')\"/>` will not be compiled."
msgstr ""

#: docs/8.x/blade.md:block 209 (paragraph)
msgid "<a name=\"default-merged-attributes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 210 (header)
msgid "Default / Merged Attributes"
msgstr ""

#: docs/8.x/blade.md:block 211 (paragraph)
msgid "Sometimes you may need to specify default values for attributes or merge additional values into some of the component's attributes. To accomplish this, you may use the attribute bag's `merge` method. This method is particularly useful for defining a set of default CSS classes that should always be applied to a component:"
msgstr ""

#: docs/8.x/blade.md:block 212 (code)
msgid ""
"<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 213 (paragraph)
msgid "If we assume this component is utilized like so:"
msgstr ""

#: docs/8.x/blade.md:block 214 (code)
msgid "<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n"
msgstr ""

#: docs/8.x/blade.md:block 215 (paragraph)
msgid "The final, rendered HTML of the component will appear like the following:"
msgstr ""

#: docs/8.x/blade.md:block 216 (code)
msgid ""
"<div class=\"alert alert-error mb-4\">\n"
"    <!-- Contents of the $message variable -->\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 217 (paragraph)
msgid "<a name=\"conditionally-merge-classes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 218 (header)
msgid "Conditionally Merge Classes"
msgstr ""

#: docs/8.x/blade.md:block 219 (paragraph)
msgid "Sometimes you may wish to merge classes if a given condition is `true`. You can accomplish this via the `class` method, which accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr ""

#: docs/8.x/blade.md:block 220 (code)
msgid ""
"<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n"
"    {{ $message }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 221 (paragraph)
msgid "If you need to merge other attributes onto your component, you can chain the `merge` method onto the `class` method:"
msgstr ""

#: docs/8.x/blade.md:block 222 (code)
msgid ""
"<button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>\n"
msgstr ""

#: docs/8.x/blade.md:block 223 (quote)
msgid "{tip} If you need to conditionally compile classes on other HTML elements that shouldn't receive merged attributes, you can use the [`@class` directive](#conditional-classes)."
msgstr ""

#: docs/8.x/blade.md:block 224 (paragraph)
msgid "<a name=\"non-class-attribute-merging\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 225 (header)
msgid "Non-Class Attribute Merging"
msgstr ""

#: docs/8.x/blade.md:block 226 (paragraph)
msgid "When merging attributes that are not `class` attributes, the values provided to the `merge` method will be considered the \"default\" values of the attribute. However, unlike the `class` attribute, these attributes will not be merged with injected attribute values. Instead, they will be overwritten. For example, a `button` component's implementation may look like the following:"
msgstr ""

#: docs/8.x/blade.md:block 227 (code)
msgid ""
"<button {{ $attributes->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>\n"
msgstr ""

#: docs/8.x/blade.md:block 228 (paragraph)
msgid "To render the button component with a custom `type`, it may be specified when consuming the component. If no type is specified, the `button` type will be used:"
msgstr ""

#: docs/8.x/blade.md:block 229 (code)
msgid ""
"<x-button type=\"submit\">\n"
"    Submit\n"
"</x-button>\n"
msgstr ""

#: docs/8.x/blade.md:block 230 (paragraph)
msgid "The rendered HTML of the `button` component in this example would be:"
msgstr ""

#: docs/8.x/blade.md:block 231 (code)
msgid ""
"<button type=\"submit\">\n"
"    Submit\n"
"</button>\n"
msgstr ""

#: docs/8.x/blade.md:block 232 (paragraph)
msgid "If you would like an attribute other than `class` to have its default value and injected values joined together, you may use the `prepends` method. In this example, the `data-controller` attribute will always begin with `profile-controller` and any additional injected `data-controller` values will be placed after this default value:"
msgstr ""

#: docs/8.x/blade.md:block 233 (code)
msgid ""
"<div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 234 (paragraph)
msgid "<a name=\"filtering-attributes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 235 (header)
msgid "Retrieving & Filtering Attributes"
msgstr ""

#: docs/8.x/blade.md:block 236 (paragraph)
msgid "You may filter attributes using the `filter` method. This method accepts a closure which should return `true` if you wish to retain the attribute in the attribute bag:"
msgstr ""

#: docs/8.x/blade.md:block 237 (code)
msgid "{{ $attributes->filter(fn ($value, $key) => $key == 'foo') }}\n"
msgstr ""

#: docs/8.x/blade.md:block 238 (paragraph)
msgid "For convenience, you may use the `whereStartsWith` method to retrieve all attributes whose keys begin with a given string:"
msgstr ""

#: docs/8.x/blade.md:block 239 (code)
msgid "{{ $attributes->whereStartsWith('wire:model') }}\n"
msgstr ""

#: docs/8.x/blade.md:block 240 (paragraph)
msgid "Conversely, the `whereDoesntStartWith` method may be used to exclude all attributes whose keys begin with a given string:"
msgstr ""

#: docs/8.x/blade.md:block 241 (code)
msgid "{{ $attributes->whereDoesntStartWith('wire:model') }}\n"
msgstr ""

#: docs/8.x/blade.md:block 242 (paragraph)
msgid "Using the `first` method, you may render the first attribute in a given attribute bag:"
msgstr ""

#: docs/8.x/blade.md:block 243 (code)
msgid "{{ $attributes->whereStartsWith('wire:model')->first() }}\n"
msgstr ""

#: docs/8.x/blade.md:block 244 (paragraph)
msgid "If you would like to check if an attribute is present on the component, you may use the `has` method. This method accepts the attribute name as its only argument and returns a boolean indicating whether or not the attribute is present:"
msgstr ""

#: docs/8.x/blade.md:block 245 (code)
msgid ""
"@if ($attributes->has('class'))\n"
"    <div>Class attribute is present</div>\n"
"@endif\n"
msgstr ""

#: docs/8.x/blade.md:block 246 (paragraph)
msgid "You may retrieve a specific attribute's value using the `get` method:"
msgstr ""

#: docs/8.x/blade.md:block 247 (code)
msgid "{{ $attributes->get('class') }}\n"
msgstr ""

#: docs/8.x/blade.md:block 248 (paragraph)
msgid "<a name=\"reserved-keywords\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 249 (header)
msgid "Reserved Keywords"
msgstr ""

#: docs/8.x/blade.md:block 250 (paragraph)
msgid "By default, some keywords are reserved for Blade's internal use in order to render components. The following keywords cannot be defined as public properties or method names within your components:"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`data`"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`render`"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`resolveView`"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`shouldRender`"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`view`"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`withAttributes`"
msgstr ""

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`withName`"
msgstr ""

#: docs/8.x/blade.md:block 254 (paragraph)
msgid "<a name=\"slots\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 255 (header)
msgid "Slots"
msgstr ""

#: docs/8.x/blade.md:block 256 (paragraph)
msgid "You will often need to pass additional content to your component via \"slots\". Component slots are rendered by echoing the `$slot` variable. To explore this concept, let's imagine that an `alert` component has the following markup:"
msgstr ""

#: docs/8.x/blade.md:block 257 (code)
msgid ""
"<!-- /resources/views/components/alert.blade.php -->\n"
"\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 258 (paragraph)
msgid "We may pass content to the `slot` by injecting content into the component:"
msgstr ""

#: docs/8.x/blade.md:block 259 (code)
msgid ""
"<x-alert>\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#: docs/8.x/blade.md:block 260 (paragraph)
msgid "Sometimes a component may need to render multiple different slots in different locations within the component. Let's modify our alert component to allow for the injection of a \"title\" slot:"
msgstr ""

#: docs/8.x/blade.md:block 261 (code)
msgid ""
"<!-- /resources/views/components/alert.blade.php -->\n"
"\n"
"<span class=\"alert-title\">{{ $title }}</span>\n"
"\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 262 (paragraph)
msgid "You may define the content of the named slot using the `x-slot` tag. Any content not within an explicit `x-slot` tag will be passed to the component in the `$slot` variable:"
msgstr ""

#: docs/8.x/blade.md:block 263 (code)
msgid ""
"<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#: docs/8.x/blade.md:block 264 (paragraph)
msgid "<a name=\"scoped-slots\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 265 (header)
msgid "Scoped Slots"
msgstr ""

#: docs/8.x/blade.md:block 266 (paragraph)
msgid "If you have used a JavaScript framework such as Vue, you may be familiar with \"scoped slots\", which allow you to access data or methods from the component within your slot. You may achieve similar behavior in Laravel by defining public methods or properties on your component and accessing the component within your slot via the `$component` variable. In this example, we will assume that the `x-alert` component has a public `formatAlert` method defined on its component class:"
msgstr ""

#: docs/8.x/blade.md:block 267 (code)
msgid ""
"<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#: docs/8.x/blade.md:block 268 (paragraph)
msgid "<a name=\"slot-attributes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 269 (header)
msgid "Slot Attributes"
msgstr ""

#: docs/8.x/blade.md:block 270 (paragraph)
msgid "Like Blade components, you may assign additional [attributes](#component-attributes) to slots such as CSS class names:"
msgstr ""

#: docs/8.x/blade.md:block 271 (code)
msgid ""
"<x-card class=\"shadow-sm\">\n"
"    <x-slot name=\"heading\" class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n"
"\n"
"    Content\n"
"\n"
"    <x-slot name=\"footer\" class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"
msgstr ""

#: docs/8.x/blade.md:block 272 (paragraph)
msgid "To interact with slot attributes, you may access the `attributes` property of the slot's variable. For more information on how to interact with attributes, please consult the documentation on [component attributes](#component-attributes):"
msgstr ""

#: docs/8.x/blade.md:block 273 (code)
msgid ""
"@props([\n"
"    'heading',\n"
"    'footer',\n"
"])\n"
"\n"
"<div {{ $attributes->class(['border']) }}>\n"
"    <h1 {{ $heading->attributes->class(['text-lg']) }}>\n"
"        {{ $heading }}\n"
"    </h1>\n"
"\n"
"    {{ $slot }}\n"
"\n"
"    <footer {{ $footer->attributes->class(['text-gray-700']) }}>\n"
"        {{ $footer }}\n"
"    </footer>\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 274 (paragraph)
msgid "<a name=\"inline-component-views\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 275 (header)
msgid "Inline Component Views"
msgstr ""

#: docs/8.x/blade.md:block 276 (paragraph)
msgid "For very small components, it may feel cumbersome to manage both the component class and the component's view template. For this reason, you may return the component's markup directly from the `render` method:"
msgstr ""

#: docs/8.x/blade.md:block 277 (code)
msgid ""
"/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return <<<'blade'\n"
"        <div class=\"alert alert-danger\">\n"
"            {{ $slot }}\n"
"        </div>\n"
"    blade;\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 278 (paragraph)
msgid "<a name=\"generating-inline-view-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 279 (header)
msgid "Generating Inline View Components"
msgstr ""

#: docs/8.x/blade.md:block 280 (paragraph)
msgid "To create a component that renders an inline view, you may use the `inline` option when executing the `make:component` command:"
msgstr ""

#: docs/8.x/blade.md:block 281 (code)
msgid "php artisan make:component Alert --inline\n"
msgstr ""

#: docs/8.x/blade.md:block 282 (paragraph)
msgid "<a name=\"anonymous-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 283 (header)
msgid "Anonymous Components"
msgstr ""

#: docs/8.x/blade.md:block 284 (paragraph)
msgid "Similar to inline components, anonymous components provide a mechanism for managing a component via a single file. However, anonymous components utilize a single view file and have no associated class. To define an anonymous component, you only need to place a Blade template within your `resources/views/components` directory. For example, assuming you have defined a component at `resources/views/components/alert.blade.php`, you may simply render it like so:"
msgstr ""

#: docs/8.x/blade.md:block 285 (code)
msgid "<x-alert/>\n"
msgstr ""

#: docs/8.x/blade.md:block 286 (paragraph)
msgid "You may use the `.` character to indicate if a component is nested deeper inside the `components` directory. For example, assuming the component is defined at `resources/views/components/inputs/button.blade.php`, you may render it like so:"
msgstr ""

#: docs/8.x/blade.md:block 288 (paragraph)
msgid "<a name=\"anonymous-index-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 289 (header)
msgid "Anonymous Index Components"
msgstr ""

#: docs/8.x/blade.md:block 290 (paragraph)
msgid "Sometimes, when a component is made up of many Blade templates, you may wish to group the given component's templates within a single directory. For example, imagine an \"accordion\" component with the following directory structure:"
msgstr ""

#: docs/8.x/blade.md:block 291 (code)
msgid ""
"/resources/views/components/accordion.blade.php\n"
"/resources/views/components/accordion/item.blade.php\n"
msgstr ""

#: docs/8.x/blade.md:block 292 (paragraph)
msgid "This directory structure allows you to render the accordion component and its item like so:"
msgstr ""

#: docs/8.x/blade.md:block 293 (code)
msgid ""
"<x-accordion>\n"
"    <x-accordion.item>\n"
"        ...\n"
"    </x-accordion.item>\n"
"</x-accordion>\n"
msgstr ""

#: docs/8.x/blade.md:block 294 (paragraph)
msgid "However, in order to render the accordion component via `x-accordion`, we were forced to place the \"index\" accordion component template in the `resources/views/components` directory instead of nesting it within the `accordion` directory with the other accordion related templates."
msgstr ""

#: docs/8.x/blade.md:block 295 (paragraph)
msgid "Thankfully, Blade allows you to place an `index.blade.php` file within a component's template directory. When an `index.blade.php` template exists for the component, it will be rendered as the \"root\" node of the component. So, we can continue to use the same Blade syntax given in the example above; however, we will adjust our directory structure like so:"
msgstr ""

#: docs/8.x/blade.md:block 296 (code)
msgid ""
"/resources/views/components/accordion/index.blade.php\n"
"/resources/views/components/accordion/item.blade.php\n"
msgstr ""

#: docs/8.x/blade.md:block 297 (paragraph)
msgid "<a name=\"data-properties-attributes\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 298 (header)
msgid "Data Properties / Attributes"
msgstr ""

#: docs/8.x/blade.md:block 299 (paragraph)
msgid "Since anonymous components do not have any associated class, you may wonder how you may differentiate which data should be passed to the component as variables and which attributes should be placed in the component's [attribute bag](#component-attributes)."
msgstr ""

#: docs/8.x/blade.md:block 300 (paragraph)
msgid "You may specify which attributes should be considered data variables using the `@props` directive at the top of your component's Blade template. All other attributes on the component will be available via the component's attribute bag. If you wish to give a data variable a default value, you may specify the variable's name as the array key and the default value as the array value:"
msgstr ""

#: docs/8.x/blade.md:block 301 (code)
msgid ""
"<!-- /resources/views/components/alert.blade.php -->\n"
"\n"
"@props(['type' => 'info', 'message'])\n"
"\n"
"<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 302 (paragraph)
msgid "Given the component definition above, we may render the component like so:"
msgstr ""

#: docs/8.x/blade.md:block 304 (paragraph)
msgid "<a name=\"accessing-parent-data\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 305 (header)
msgid "Accessing Parent Data"
msgstr ""

#: docs/8.x/blade.md:block 306 (paragraph)
msgid "Sometimes you may want to access data from a parent component inside a child component. In these cases, you may use the `@aware` directive. For example, imagine we are building a complex menu component consisting of a parent `<x-menu>` and child `<x-menu.item>`:"
msgstr ""

#: docs/8.x/blade.md:block 307 (code)
msgid ""
"<x-menu color=\"purple\">\n"
"    <x-menu.item>...</x-menu.item>\n"
"    <x-menu.item>...</x-menu.item>\n"
"</x-menu>\n"
msgstr ""

#: docs/8.x/blade.md:block 308 (paragraph)
msgid "The `<x-menu>` component may have an implementation like the following:"
msgstr ""

#: docs/8.x/blade.md:block 309 (code)
msgid ""
"<!-- /resources/views/components/menu/index.blade.php -->\n"
"\n"
"@props(['color' => 'gray'])\n"
"\n"
"<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>\n"
"    {{ $slot }}\n"
"</ul>\n"
msgstr ""

#: docs/8.x/blade.md:block 310 (paragraph)
msgid "Because the `color` prop was only passed into the parent (`<x-menu>`), it won't be available inside `<x-menu.item>`. However, if we use the `@aware` directive, we can make it available inside `<x-menu.item>` as well:"
msgstr ""

#: docs/8.x/blade.md:block 311 (code)
msgid ""
"<!-- /resources/views/components/menu/item.blade.php -->\n"
"\n"
"@aware(['color' => 'gray'])\n"
"\n"
"<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>\n"
"    {{ $slot }}\n"
"</li>\n"
msgstr ""

#: docs/8.x/blade.md:block 312 (paragraph)
msgid "<a name=\"dynamic-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 313 (header)
msgid "Dynamic Components"
msgstr ""

#: docs/8.x/blade.md:block 314 (paragraph)
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr ""

#: docs/8.x/blade.md:block 315 (code)
msgid "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr ""

#: docs/8.x/blade.md:block 316 (paragraph)
msgid "<a name=\"manually-registering-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 317 (header)
msgid "Manually Registering Components"
msgstr ""

#: docs/8.x/blade.md:block 318 (quote)
msgid "{note} The following documentation on manually registering components is primarily applicable to those who are writing Laravel packages that include view components. If you are not writing a package, this portion of the component documentation may not be relevant to you."
msgstr ""

#: docs/8.x/blade.md:block 320 (paragraph)
msgid "However, if you are building a package that utilizes Blade components or placing components in non-conventional directories, you will need to manually register your component class and its HTML tag alias so that Laravel knows where to find the component. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

#: docs/8.x/blade.md:block 321 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"use VendorPackage\\View\\Components\\AlertComponent;\n"
"\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', AlertComponent::class);\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 324 (header)
msgid "Autoloading Package Components"
msgstr ""

#: docs/8.x/blade.md:block 330 (paragraph)
msgid "<a name=\"building-layouts\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 331 (header)
msgid "Building Layouts"
msgstr ""

#: docs/8.x/blade.md:block 332 (paragraph)
msgid "<a name=\"layouts-using-components\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 333 (header)
msgid "Layouts Using Components"
msgstr ""

#: docs/8.x/blade.md:block 334 (paragraph)
msgid "Most web applications maintain the same general layout across various pages. It would be incredibly cumbersome and hard to maintain our application if we had to repeat the entire layout HTML in every view we create. Thankfully, it's convenient to define this layout as a single [Blade component](#components) and then use it throughout our application."
msgstr ""

#: docs/8.x/blade.md:block 335 (paragraph)
msgid "<a name=\"defining-the-layout-component\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 336 (header)
msgid "Defining The Layout Component"
msgstr ""

#: docs/8.x/blade.md:block 337 (paragraph)
msgid "For example, imagine we are building a \"todo\" list application. We might define a `layout` component that looks like the following:"
msgstr ""

#: docs/8.x/blade.md:block 338 (code)
msgid ""
"<!-- resources/views/components/layout.blade.php -->\n"
"\n"
"<html>\n"
"    <head>\n"
"        <title>{{ $title ?? 'Todo Manager' }}</title>\n"
"    </head>\n"
"    <body>\n"
"        <h1>Todos</h1>\n"
"        <hr/>\n"
"        {{ $slot }}\n"
"    </body>\n"
"</html>\n"
msgstr ""

#: docs/8.x/blade.md:block 339 (paragraph)
msgid "<a name=\"applying-the-layout-component\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 340 (header)
msgid "Applying The Layout Component"
msgstr ""

#: docs/8.x/blade.md:block 341 (paragraph)
msgid "Once the `layout` component has been defined, we may create a Blade view that utilizes the component. In this example, we will define a simple view that displays our task list:"
msgstr ""

#: docs/8.x/blade.md:block 342 (code)
msgid ""
"<!-- resources/views/tasks.blade.php -->\n"
"\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#: docs/8.x/blade.md:block 343 (paragraph)
msgid "Remember, content that is injected into a component will be supplied to the default `$slot` variable within our `layout` component. As you may have noticed, our `layout` also respects a `$title` slot if one is provided; otherwise, a default title is shown. We may inject a custom title from our task list view using the standard slot syntax discussed in the [component documentation](#components):"
msgstr ""

#: docs/8.x/blade.md:block 344 (code)
msgid ""
"<!-- resources/views/tasks.blade.php -->\n"
"\n"
"<x-layout>\n"
"    <x-slot name=\"title\">\n"
"        Custom Title\n"
"    </x-slot>\n"
"\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#: docs/8.x/blade.md:block 345 (paragraph)
msgid "Now that we have defined our layout and task list views, we just need to return the `task` view from a route:"
msgstr ""

#: docs/8.x/blade.md:block 346 (code)
msgid ""
"use App\\Models\\Task;\n"
"\n"
"Route::get('/tasks', function () {\n"
"    return view('tasks', ['tasks' => Task::all()]);\n"
"});\n"
msgstr ""

#: docs/8.x/blade.md:block 347 (paragraph)
msgid "<a name=\"layouts-using-template-inheritance\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 348 (header)
msgid "Layouts Using Template Inheritance"
msgstr ""

#: docs/8.x/blade.md:block 349 (paragraph)
msgid "<a name=\"defining-a-layout\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 350 (header)
msgid "Defining A Layout"
msgstr ""

#: docs/8.x/blade.md:block 351 (paragraph)
msgid "Layouts may also be created via \"template inheritance\". This was the primary way of building applications prior to the introduction of [components](#components)."
msgstr ""

#: docs/8.x/blade.md:block 352 (paragraph)
msgid "To get started, let's take a look at a simple example. First, we will examine a page layout. Since most web applications maintain the same general layout across various pages, it's convenient to define this layout as a single Blade view:"
msgstr ""

#: docs/8.x/blade.md:block 353 (code)
msgid ""
"<!-- resources/views/layouts/app.blade.php -->\n"
"\n"
"<html>\n"
"    <head>\n"
"        <title>App Name - @yield('title')</title>\n"
"    </head>\n"
"    <body>\n"
"        @section('sidebar')\n"
"            This is the master sidebar.\n"
"        @show\n"
"\n"
"        <div class=\"container\">\n"
"            @yield('content')\n"
"        </div>\n"
"    </body>\n"
"</html>\n"
msgstr ""

#: docs/8.x/blade.md:block 354 (paragraph)
msgid "As you can see, this file contains typical HTML mark-up. However, take note of the `@section` and `@yield` directives. The `@section` directive, as the name implies, defines a section of content, while the `@yield` directive is used to display the contents of a given section."
msgstr ""

#: docs/8.x/blade.md:block 355 (paragraph)
msgid "Now that we have defined a layout for our application, let's define a child page that inherits the layout."
msgstr ""

#: docs/8.x/blade.md:block 356 (paragraph)
msgid "<a name=\"extending-a-layout\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 357 (header)
msgid "Extending A Layout"
msgstr ""

#: docs/8.x/blade.md:block 358 (paragraph)
msgid "When defining a child view, use the `@extends` Blade directive to specify which layout the child view should \"inherit\". Views which extend a Blade layout may inject content into the layout's sections using `@section` directives. Remember, as seen in the example above, the contents of these sections will be displayed in the layout using `@yield`:"
msgstr ""

#: docs/8.x/blade.md:block 359 (code)
msgid ""
"<!-- resources/views/child.blade.php -->\n"
"\n"
"@extends('layouts.app')\n"
"\n"
"@section('title', 'Page Title')\n"
"\n"
"@section('sidebar')\n"
"    @@parent\n"
"\n"
"    <p>This is appended to the master sidebar.</p>\n"
"@endsection\n"
"\n"
"@section('content')\n"
"    <p>This is my body content.</p>\n"
"@endsection\n"
msgstr ""

#: docs/8.x/blade.md:block 360 (paragraph)
msgid "In this example, the `sidebar` section is utilizing the `@@parent` directive to append (rather than overwriting) content to the layout's sidebar. The `@@parent` directive will be replaced by the content of the layout when the view is rendered."
msgstr ""

#: docs/8.x/blade.md:block 361 (quote)
msgid "{tip} Contrary to the previous example, this `sidebar` section ends with `@endsection` instead of `@show`. The `@endsection` directive will only define a section while `@show` will define and **immediately yield** the section."
msgstr ""

#: docs/8.x/blade.md:block 362 (paragraph)
msgid "The `@yield` directive also accepts a default value as its second parameter. This value will be rendered if the section being yielded is undefined:"
msgstr ""

#: docs/8.x/blade.md:block 363 (code)
msgid "@yield('content', 'Default content')\n"
msgstr ""

#: docs/8.x/blade.md:block 364 (paragraph)
msgid "<a name=\"forms\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 365 (header)
msgid "Forms"
msgstr ""

#: docs/8.x/blade.md:block 366 (paragraph)
msgid "<a name=\"csrf-field\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 367 (header)
msgid "CSRF Field"
msgstr ""

#: docs/8.x/blade.md:block 368 (paragraph)
msgid "Anytime you define an HTML form in your application, you should include a hidden CSRF token field in the form so that [the CSRF protection](/docs/{{version}}/csrf) middleware can validate the request. You may use the `@csrf` Blade directive to generate the token field:"
msgstr ""

#: docs/8.x/blade.md:block 369 (code)
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"\n"
"    ...\n"
"</form>\n"
msgstr ""

#: docs/8.x/blade.md:block 370 (paragraph)
msgid "<a name=\"method-field\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 371 (header)
msgid "Method Field"
msgstr ""

#: docs/8.x/blade.md:block 372 (paragraph)
msgid "Since HTML forms can't make `PUT`, `PATCH`, or `DELETE` requests, you will need to add a hidden `_method` field to spoof these HTTP verbs. The `@method` Blade directive can create this field for you:"
msgstr ""

#: docs/8.x/blade.md:block 373 (code)
msgid ""
"<form action=\"/foo/bar\" method=\"POST\">\n"
"    @method('PUT')\n"
"\n"
"    ...\n"
"</form>\n"
msgstr ""

#: docs/8.x/blade.md:block 374 (paragraph)
msgid "<a name=\"validation-errors\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 375 (header)
msgid "Validation Errors"
msgstr ""

#: docs/8.x/blade.md:block 376 (paragraph)
msgid "The `@error` directive may be used to quickly check if [validation error messages](/docs/{{version}}/validation#quick-displaying-the-validation-errors) exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr ""

#: docs/8.x/blade.md:block 377 (code)
msgid ""
"<!-- /resources/views/post/create.blade.php -->\n"
"\n"
"<label for=\"title\">Post Title</label>\n"
"\n"
"<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\">\n"
"\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#: docs/8.x/blade.md:block 378 (paragraph)
msgid "Since the `@error` directive compiles to an \"if\" statement, you may use the `@else` directive to render content when there is not an error for an attribute:"
msgstr ""

#: docs/8.x/blade.md:block 379 (code)
msgid ""
"<!-- /resources/views/auth.blade.php -->\n"
"\n"
"<label for=\"email\">Email address</label>\n"
"\n"
"<input id=\"email\" type=\"email\" class=\"@error('email') is-invalid @else is-valid @enderror\">\n"
msgstr ""

#: docs/8.x/blade.md:block 380 (paragraph)
msgid "You may pass [the name of a specific error bag](/docs/{{version}}/validation#named-error-bags) as the second parameter to the `@error` directive to retrieve validation error messages on pages containing multiple forms:"
msgstr ""

#: docs/8.x/blade.md:block 381 (code)
msgid ""
"<!-- /resources/views/auth.blade.php -->\n"
"\n"
"<label for=\"email\">Email address</label>\n"
"\n"
"<input id=\"email\" type=\"email\" class=\"@error('email', 'login') is-invalid @enderror\">\n"
"\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#: docs/8.x/blade.md:block 382 (paragraph)
msgid "<a name=\"stacks\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 383 (header)
msgid "Stacks"
msgstr ""

#: docs/8.x/blade.md:block 384 (paragraph)
msgid "Blade allows you to push to named stacks which can be rendered somewhere else in another view or layout. This can be particularly useful for specifying any JavaScript libraries required by your child views:"
msgstr ""

#: docs/8.x/blade.md:block 385 (code)
msgid ""
"@push('scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endpush\n"
msgstr ""

#: docs/8.x/blade.md:block 386 (paragraph)
msgid "You may push to a stack as many times as needed. To render the complete stack contents, pass the name of the stack to the `@stack` directive:"
msgstr ""

#: docs/8.x/blade.md:block 387 (code)
msgid ""
"<head>\n"
"    <!-- Head Contents -->\n"
"\n"
"    @stack('scripts')\n"
"</head>\n"
msgstr ""

#: docs/8.x/blade.md:block 388 (paragraph)
msgid "If you would like to prepend content onto the beginning of a stack, you should use the `@prepend` directive:"
msgstr ""

#: docs/8.x/blade.md:block 389 (code)
msgid ""
"@push('scripts')\n"
"    This will be second...\n"
"@endpush\n"
"\n"
"// Later...\n"
"\n"
"@prepend('scripts')\n"
"    This will be first...\n"
"@endprepend\n"
msgstr ""

#: docs/8.x/blade.md:block 390 (paragraph)
msgid "<a name=\"service-injection\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 391 (header)
msgid "Service Injection"
msgstr ""

#: docs/8.x/blade.md:block 392 (paragraph)
msgid "The `@inject` directive may be used to retrieve a service from the Laravel [service container](/docs/{{version}}/container). The first argument passed to `@inject` is the name of the variable the service will be placed into, while the second argument is the class or interface name of the service you wish to resolve:"
msgstr ""

#: docs/8.x/blade.md:block 393 (code)
msgid ""
"@inject('metrics', 'App\\Services\\MetricsService')\n"
"\n"
"<div>\n"
"    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n"
"</div>\n"
msgstr ""

#: docs/8.x/blade.md:block 394 (paragraph)
msgid "<a name=\"extending-blade\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 395 (header)
msgid "Extending Blade"
msgstr ""

#: docs/8.x/blade.md:block 396 (paragraph)
msgid "Blade allows you to define your own custom directives using the `directive` method. When the Blade compiler encounters the custom directive, it will call the provided callback with the expression that the directive contains."
msgstr ""

#: docs/8.x/blade.md:block 397 (paragraph)
msgid "The following example creates a `@datetime($var)` directive which formats a given `$var`, which should be an instance of `DateTime`:"
msgstr ""

#: docs/8.x/blade.md:block 398 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::directive('datetime', function ($expression) {\n"
"            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 399 (paragraph)
msgid "As you can see, we will chain the `format` method onto whatever expression is passed into the directive. So, in this example, the final PHP generated by this directive will be:"
msgstr ""

#: docs/8.x/blade.md:block 400 (code)
msgid "<?php echo ($var)->format('m/d/Y H:i'); ?>\n"
msgstr ""

#: docs/8.x/blade.md:block 401 (quote)
msgid "{note} After updating the logic of a Blade directive, you will need to delete all of the cached Blade views. The cached Blade views may be removed using the `view:clear` Artisan command."
msgstr ""

#: docs/8.x/blade.md:block 402 (paragraph)
msgid "<a name=\"custom-echo-handlers\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 403 (header)
msgid "Custom Echo Handlers"
msgstr ""

#: docs/8.x/blade.md:block 404 (paragraph)
msgid "If you attempt to \"echo\" an object using Blade, the object's `__toString` method will be invoked. The [`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) method is one of PHP's built-in \"magic methods\". However, sometimes you may not have control over the `__toString` method of a given class, such as when the class that you are interacting with belongs to a third-party library."
msgstr ""

#: docs/8.x/blade.md:block 405 (paragraph)
msgid "In these cases, Blade allows you to register a custom echo handler for that particular type of object. To accomplish this, you should invoke Blade's `stringable` method. The `stringable` method accepts a closure. This closure should type-hint the type of object that it is responsible for rendering. Typically, the `stringable` method should be invoked within the `boot` method of your application's `AppServiceProvider` class:"
msgstr ""

#: docs/8.x/blade.md:block 406 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Money\\Money;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 407 (paragraph)
msgid "Once your custom echo handler has been defined, you may simply echo the object in your Blade template:"
msgstr ""

#: docs/8.x/blade.md:block 408 (code)
msgid "Cost: {{ $money }}\n"
msgstr ""

#: docs/8.x/blade.md:block 409 (paragraph)
msgid "<a name=\"custom-if-statements\"></a>"
msgstr ""

#: docs/8.x/blade.md:block 410 (header)
msgid "Custom If Statements"
msgstr ""

#: docs/8.x/blade.md:block 411 (paragraph)
msgid "Programming a custom directive is sometimes more complex than necessary when defining simple, custom conditional statements. For that reason, Blade provides a `Blade::if` method which allows you to quickly define custom conditional directives using closures. For example, let's define a custom conditional that checks the configured default \"disk\" for the application. We may do this in the `boot` method of our `AppServiceProvider`:"
msgstr ""

#: docs/8.x/blade.md:block 412 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::if('disk', function ($value) {\n"
"        return config('filesystems.default') === $value;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/blade.md:block 413 (paragraph)
msgid "Once the custom conditional has been defined, you can use it within your templates:"
msgstr ""

#: docs/8.x/blade.md:block 414 (code)
msgid ""
"@disk('local')\n"
"    <!-- The application is using the local disk... -->\n"
"@elsedisk('s3')\n"
"    <!-- The application is using the s3 disk... -->\n"
"@else\n"
"    <!-- The application is using some other disk... -->\n"
"@enddisk\n"
"\n"
"@unlessdisk('local')\n"
"    <!-- The application is not using the local disk... -->\n"
"@enddisk\n"
msgstr ""

#: docs/9.x/blade.md:block 2 (unordered list)
msgid "[Checked / Selected](#checked-and-selected)"
msgstr ""

#: docs/9.x/blade.md:block 2 (unordered list)
msgid "[Rendering Inline Blade Templates](#rendering-inline-blade-templates)"
msgstr ""

#: docs/9.x/blade.md:block 101 (paragraph)
msgid "<a name=\"checked-and-selected\"></a>"
msgstr ""

#: docs/9.x/blade.md:block 102 (header)
msgid "Checked / Selected"
msgstr ""

#: docs/9.x/blade.md:block 103 (paragraph)
msgid "For convenience, you may use the `@checked` directive to easily indicate if a given HTML checkbox input is \"checked\". This directive will echo `checked` if the provided condition evaluates to `true`:"
msgstr ""

#: docs/9.x/blade.md:block 104 (code)
msgid ""
"<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />\n"
msgstr ""

#: docs/9.x/blade.md:block 105 (paragraph)
msgid "Likewise, the `@selected` directive may be used to indicate if a given select option should be \"selected\":"
msgstr ""

#: docs/9.x/blade.md:block 106 (code)
msgid ""
"<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>\n"
msgstr ""

#: docs/9.x/blade.md:block 133 (paragraph)
msgid "Since the `@once` directive is often used in conjunction with the `@push` or `@prepend` directives, the `@pushOnce` and `@prependOnce` directives are available for your convenience:"
msgstr ""

#: docs/9.x/blade.md:block 134 (code)
msgid ""
"@pushOnce('scripts')\n"
"    <script>\n"
"        // Your custom JavaScript...\n"
"    </script>\n"
"@endPushOnce\n"
msgstr ""

#: docs/9.x/blade.md:block 152 (paragraph)
msgid "If you would like to create an anonymous component (a component with only a Blade template and no class), you may use the `--view` flag when invoking the `make:component` command:"
msgstr ""

#: docs/9.x/blade.md:block 153 (code)
msgid "php artisan make:component forms.input --view\n"
msgstr ""

#: docs/9.x/blade.md:block 154 (paragraph)
msgid "The command above will create a Blade file at `resources/views/components/forms/input.blade.php` which can be rendered as a component via `<x-forms.input />`."
msgstr ""

#: docs/9.x/blade.md:block 208 (code)
msgid ""
"use App\\Services\\AlertCreator;\n"
"\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}\n"
msgstr ""

#: docs/9.x/blade.md:block 274 (code)
msgid ""
"<x-alert>\n"
"    <x-slot:title>\n"
"        Server Error\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#: docs/9.x/blade.md:block 278 (code)
msgid ""
"<x-alert>\n"
"    <x-slot:title>\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#: docs/9.x/blade.md:block 282 (code)
msgid ""
"<x-card class=\"shadow-sm\">\n"
"    <x-slot:heading class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n"
"\n"
"    Content\n"
"\n"
"    <x-slot:footer class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"
msgstr ""

#: docs/9.x/blade.md:block 355 (code)
msgid ""
"<!-- resources/views/tasks.blade.php -->\n"
"\n"
"<x-layout>\n"
"    <x-slot:title>\n"
"        Custom Title\n"
"    </x-slot>\n"
"\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#: docs/9.x/blade.md:block 388 (code)
msgid ""
"<!-- /resources/views/post/create.blade.php -->\n"
"\n"
"<label for=\"title\">Post Title</label>\n"
"\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n"
"\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#: docs/9.x/blade.md:block 390 (code)
msgid ""
"<!-- /resources/views/auth.blade.php -->\n"
"\n"
"<label for=\"email\">Email address</label>\n"
"\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email') is-invalid @else is-valid @enderror\">\n"
msgstr ""

#: docs/9.x/blade.md:block 392 (code)
msgid ""
"<!-- /resources/views/auth.blade.php -->\n"
"\n"
"<label for=\"email\">Email address</label>\n"
"\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email', 'login') is-invalid @enderror\">\n"
"\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#: docs/9.x/blade.md:block 405 (paragraph)
msgid "<a name=\"rendering-inline-blade-templates\"></a>"
msgstr ""

#: docs/9.x/blade.md:block 406 (header)
msgid "Rendering Inline Blade Templates"
msgstr ""

#: docs/9.x/blade.md:block 407 (paragraph)
msgid "Sometimes you may need to transform a raw Blade template string into valid HTML. You may accomplish this using the `render` method provided by the `Blade` facade. The `render` method accepts the Blade template string and an optional array of data to provide to the template:"
msgstr ""

#: docs/9.x/blade.md:block 408 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"
msgstr ""

#: docs/9.x/blade.md:block 409 (paragraph)
msgid "Laravel renders inline Blade templates by writing them to the `storage/framework/views` directory. If you would like Laravel to remove these temporary files after rendering the Blade template, you may provide the `deleteCachedView` argument to the method:"
msgstr ""

#: docs/9.x/blade.md:block 410 (code)
msgid ""
"return Blade::render(\n"
"    'Hello, {{ $name }}',\n"
"    ['name' => 'Julian Bashir'],\n"
"    deleteCachedView: true\n"
");\n"
msgstr ""
