# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-03-30 14:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/console-tests.md:1
#, markdown-text, no-wrap
msgid "Console Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:5
#, markdown-text
msgid ""
"- [Introduction](#introduction)  - [Input / Output "
"Expectations](#input-output-expectations)"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:7
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/console-tests.md:7
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:10
#, markdown-text
msgid ""
"In addition to simplifying HTTP testing, Laravel provides a simple API for "
"testing your application's [custom console "
"commands](/docs/{{version}}/artisan)."
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:12
#, markdown-text, no-wrap
msgid "<a name=\"input-output-expectations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/console-tests.md:12
#, markdown-text, no-wrap
msgid "Input / Output Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:15
#, markdown-text
msgid ""
"Laravel allows you to easily \"mock\" user input for your console commands "
"using the `expectsQuestion` method. In addition, you may specify the exit "
"code and text that you expect to be output by the console command using the "
"`assertExitCode` and `expectsOutput` methods. For example, consider the "
"following console command:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:18
#, markdown-text, no-wrap
msgid ""
"    Artisan::command('question', function () {\n"
"        $name = $this->ask('What is your name?');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:24
#, markdown-text, no-wrap
msgid ""
"        $language = $this->choice('Which language do you prefer?', [\n"
"            'PHP',\n"
"            'Ruby',\n"
"            'Python',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:27
#, markdown-text, no-wrap
msgid ""
"        $this->line('Your name is '.$name.' and you prefer "
"'.$language.'.');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:29
#, markdown-text
msgid ""
"You may test this command with the following test which utilizes the "
"`expectsQuestion`, `expectsOutput`, `doesntExpectOutput`, and "
"`assertExitCode` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:44
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Test a console command.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_console_command()\n"
"    {\n"
"        $this->artisan('question')\n"
"             ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"             ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"             ->expectsOutput('Your name is Taylor Otwell and you prefer "
"PHP.')\n"
"             ->doesntExpectOutput('Your name is Taylor Otwell and you prefer "
"Ruby.')\n"
"             ->assertExitCode(0);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:46
#, markdown-text, no-wrap
msgid "<a name=\"confirmation-expectations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/console-tests.md:46
#, markdown-text, no-wrap
msgid "Confirmation Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:49
#, markdown-text
msgid ""
"When writing a command which expects confirmation in the form of a \"yes\" "
"or \"no\" answer, you may utilize the `expectsConfirmation` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:53
#, markdown-text, no-wrap
msgid ""
"    $this->artisan('module:import')\n"
"        ->expectsConfirmation('Do you really wish to run this command?', "
"'no')\n"
"        ->assertExitCode(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:55
#, markdown-text, no-wrap
msgid "<a name=\"table-expectations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/console-tests.md:55
#, markdown-text, no-wrap
msgid "Table Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:58
#, markdown-text
msgid ""
"If your command displays a table of information using Artisan's `table` "
"method, it can be cumbersome to write output expectations for the entire "
"table. Instead, you may use the `expectsTable` method. This method accepts "
"the table's headers as its first argument and the table's data as its second "
"argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:66
#, markdown-text, no-wrap
msgid ""
"    $this->artisan('users:all')\n"
"        ->expectsTable([\n"
"            'ID',\n"
"            'Email',\n"
"        ], [\n"
"            [1, 'taylor@example.com'],\n"
"            [2, 'abigail@example.com'],\n"
"        ]);\n"
msgstr ""
