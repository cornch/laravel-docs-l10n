# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-03-30 14:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/dusk.md:1
#, markdown-text, no-wrap
msgid "Laravel Dusk"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Installation](#installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Managing ChromeDriver Installations](#managing-chromedriver-installations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Using Other Browsers](#using-other-browsers)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Getting Started](#getting-started)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Generating Tests](#generating-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Database Migrations](#migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Running Tests](#running-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Environment Handling](#environment-handling)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Browser Basics](#browser-basics)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Creating Browsers](#creating-browsers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Navigation](#navigation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Resizing Browser Windows](#resizing-browser-windows)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Browser Macros](#browser-macros)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Authentication](#authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Cookies](#cookies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Executing JavaScript](#executing-javascript)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Taking A Screenshot](#taking-a-screenshot)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Storing Console Output To Disk](#storing-console-output-to-disk)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Storing Page Source To Disk](#storing-page-source-to-disk)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Interacting With Elements](#interacting-with-elements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Dusk Selectors](#dusk-selectors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Text, Values, & Attributes](#text-values-and-attributes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Interacting With Forms](#interacting-with-forms)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Attaching Files](#attaching-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Pressing Buttons](#pressing-buttons)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Clicking Links](#clicking-links)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Using The Keyboard](#using-the-keyboard)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Using The Mouse](#using-the-mouse)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[JavaScript Dialogs](#javascript-dialogs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Scoping Selectors](#scoping-selectors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Waiting For Elements](#waiting-for-elements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Scrolling An Element Into View](#scrolling-an-element-into-view)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Pages](#pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Generating Pages](#generating-pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Configuring Pages](#configuring-pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Navigating To Pages](#navigating-to-pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Shorthand Selectors](#shorthand-selectors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Page Methods](#page-methods)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Components](#components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Generating Components](#generating-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Using Components](#using-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Continuous Integration](#continuous-integration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Heroku CI](#running-tests-on-heroku-ci)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[Travis CI](#running-tests-on-travis-ci)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50
#, markdown-text
msgid "[GitHub Actions](#running-tests-on-github-actions)"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:52
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:52
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:55
#, markdown-text
msgid ""
"Laravel Dusk provides an expressive, easy-to-use browser automation and "
"testing API. By default, Dusk does not require you to install JDK or "
"Selenium on your local computer. Instead, Dusk uses a standalone "
"[ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/home) "
"installation. However, you are free to utilize any other Selenium compatible "
"driver you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:57
#, markdown-text, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:57
#, markdown-text, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:60
#, markdown-text
msgid ""
"To get started, you should add the `laravel/dusk` Composer dependency to "
"your project:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:62
#, markdown-text, no-wrap
msgid "    composer require --dev laravel/dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:64
#, markdown-text, no-wrap
msgid ""
"> {note} If you are manually registering Dusk's service provider, you should "
"**never** register it in your production environment, as doing so could lead "
"to arbitrary users being able to authenticate with your application.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:66
#, markdown-text
msgid ""
"After installing the Dusk package, execute the `dusk:install` Artisan "
"command. The `dusk:install` command will create a `tests/Browser` directory "
"and an example Dusk test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:68
#, markdown-text, no-wrap
msgid "    php artisan dusk:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:70
#, markdown-text
msgid ""
"Next, set the `APP_URL` environment variable in your application's `.env` "
"file. This value should match the URL you use to access your application in "
"a browser."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:72
#, markdown-text, no-wrap
msgid ""
"> {tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage "
"your local development environment, please also consult the Sail "
"documentation on [configuring and running Dusk "
"tests](/docs/{{version}}/sail#laravel-dusk).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:74
#, markdown-text, no-wrap
msgid "<a name=\"managing-chromedriver-installations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:74
#, markdown-text, no-wrap
msgid "Managing ChromeDriver Installations"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:77
#, markdown-text
msgid ""
"If you would like to install a different version of ChromeDriver than what "
"is included with Laravel Dusk, you may use the `dusk:chrome-driver` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:80
#, markdown-text, no-wrap
msgid ""
"    # Install the latest version of ChromeDriver for your OS...\n"
"    php artisan dusk:chrome-driver\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:83
#, markdown-text, no-wrap
msgid ""
"    # Install a given version of ChromeDriver for your OS...\n"
"    php artisan dusk:chrome-driver 86\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:86
#, markdown-text, no-wrap
msgid ""
"    # Install a given version of ChromeDriver for all supported OSs...\n"
"    php artisan dusk:chrome-driver --all\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:89
#, markdown-text, no-wrap
msgid ""
"    # Install the version of ChromeDriver that matches the detected version "
"of Chrome / Chromium for your OS...\n"
"    php artisan dusk:chrome-driver --detect\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:91
#, markdown-text, no-wrap
msgid ""
"> {note} Dusk requires the `chromedriver` binaries to be executable. If "
"you're having problems running Dusk, you should ensure the binaries are "
"executable using the following command: `chmod -R 0755 "
"vendor/laravel/dusk/bin/`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:93
#, markdown-text, no-wrap
msgid "<a name=\"using-other-browsers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:93
#, markdown-text, no-wrap
msgid "Using Other Browsers"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:96
#, markdown-text
msgid ""
"By default, Dusk uses Google Chrome and a standalone "
"[ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/home) "
"installation to run your browser tests. However, you may start your own "
"Selenium server and run your tests against any browser you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:98
#, markdown-text
msgid ""
"To get started, open your `tests/DuskTestCase.php` file, which is the base "
"Dusk test case for your application. Within this file, you can remove the "
"call to the `startChromeDriver` method. This will stop Dusk from "
"automatically starting the ChromeDriver:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:109 docs/8.x/dusk.md:187
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Prepare for Dusk test execution.\n"
"     *\n"
"     * @beforeClass\n"
"     * @return void\n"
"     */\n"
"    public static function prepare()\n"
"    {\n"
"        // static::startChromeDriver();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:111
#, markdown-text
msgid ""
"Next, you may modify the `driver` method to connect to the URL and port of "
"your choice. In addition, you may modify the \"desired capabilities\" that "
"should be passed to the WebDriver:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:123
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Create the RemoteWebDriver instance.\n"
"     *\n"
"     * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
"     */\n"
"    protected function driver()\n"
"    {\n"
"        return RemoteWebDriver::create(\n"
"            'http://localhost:4444/wd/hub', "
"DesiredCapabilities::phantomjs()\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:125
#, markdown-text, no-wrap
msgid "<a name=\"getting-started\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:125
#, markdown-text, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:128
#, markdown-text, no-wrap
msgid "<a name=\"generating-tests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:128
#, markdown-text, no-wrap
msgid "Generating Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:131
#, markdown-text
msgid ""
"To generate a Dusk test, use the `dusk:make` Artisan command. The generated "
"test will be placed in the `tests/Browser` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:133
#, markdown-text, no-wrap
msgid "    php artisan dusk:make LoginTest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:135
#, markdown-text, no-wrap
msgid "<a name=\"migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:135
#, markdown-text, no-wrap
msgid "Database Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:138
#, markdown-text
msgid ""
"Most of the tests you write will interact with pages that retrieve data from "
"your application's database; however, your Dusk tests should never use the "
"`RefreshDatabase `trait. The `RefreshDatabase` trait leverages database "
"transactions which will not be applicable or available across HTTP "
"requests. Instead, use the `DatabaseMigrations` trait, which re-migrates the "
"database for each test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:140 docs/8.x/dusk.md:218 docs/8.x/dusk.md:323
#: docs/8.x/dusk.md:1561 docs/8.x/dusk.md:1608 docs/8.x/dusk.md:1682
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:142 docs/8.x/dusk.md:220 docs/8.x/dusk.md:1684
#, markdown-text, no-wrap
msgid "    namespace Tests\\Browser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:147 docs/8.x/dusk.md:225
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"    use Laravel\\Dusk\\Chrome;\n"
"    use Tests\\DuskTestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:152
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        use DatabaseMigrations;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:154
#, markdown-text, no-wrap
msgid ""
"> {note} SQLite in-memory databases may not be used when executing Dusk "
"tests. Since the browser executes within its own process, it will not be "
"able to access the in-memory databases of other processes.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:156
#, markdown-text, no-wrap
msgid "<a name=\"running-tests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:156
#, markdown-text, no-wrap
msgid "Running Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:159
#, markdown-text
msgid "To run your browser tests, execute the `dusk` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:161
#, markdown-text, no-wrap
msgid "    php artisan dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:163
#, markdown-text
msgid ""
"If you had test failures the last time you ran the `dusk` command, you may "
"save time by re-running the failing tests first using the `dusk:fails` "
"command:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:165
#, markdown-text, no-wrap
msgid "    php artisan dusk:fails\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:167
#, markdown-text
msgid ""
"The `dusk` command accepts any argument that is normally accepted by the "
"PHPUnit test runner, such as allowing you to only run the tests for a given "
"[group](https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group):"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:169
#, markdown-text, no-wrap
msgid "    php artisan dusk --group=foo\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:171
#, markdown-text, no-wrap
msgid ""
"> {tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage "
"your local development environment, please consult the Sail documentation on "
"[configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:173
#, markdown-text, no-wrap
msgid "<a name=\"manually-starting-chromedriver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:173
#, markdown-text, no-wrap
msgid "Manually Starting ChromeDriver"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:176
#, markdown-text
msgid ""
"By default, Dusk will automatically attempt to start ChromeDriver. If this "
"does not work for your particular system, you may manually start "
"ChromeDriver before running the `dusk` command. If you choose to start "
"ChromeDriver manually, you should comment out the following line of your "
"`tests/DuskTestCase.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:189
#, markdown-text
msgid ""
"In addition, if you start ChromeDriver on a port other than 9515, you should "
"modify the `driver` method of the same class to reflect the correct port:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:201
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Create the RemoteWebDriver instance.\n"
"     *\n"
"     * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
"     */\n"
"    protected function driver()\n"
"    {\n"
"        return RemoteWebDriver::create(\n"
"            'http://localhost:9515', DesiredCapabilities::chrome()\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:203
#, markdown-text, no-wrap
msgid "<a name=\"environment-handling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:203
#, markdown-text, no-wrap
msgid "Environment Handling"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:206
#, markdown-text
msgid ""
"To force Dusk to use its own environment file when running tests, create a "
"`.env.dusk.{environment}` file in the root of your project. For example, if "
"you will be initiating the `dusk` command from your `local` environment, you "
"should create a `.env.dusk.local` file."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:208
#, markdown-text
msgid ""
"When running tests, Dusk will back-up your `.env` file and rename your Dusk "
"environment to `.env`. Once the tests have completed, your `.env` file will "
"be restored."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:210
#, markdown-text, no-wrap
msgid "<a name=\"browser-basics\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:210
#, markdown-text, no-wrap
msgid "Browser Basics"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:213
#, markdown-text, no-wrap
msgid "<a name=\"creating-browsers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:213
#, markdown-text, no-wrap
msgid "Creating Browsers"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:216
#, markdown-text
msgid ""
"To get started, let's write a test that verifies we can log into our "
"application. After generating a test, we can modify it to navigate to the "
"login page, enter some credentials, and click the \"Login\" button. To "
"create a browser instance, you may call the `browse` method from within your "
"Dusk test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:229
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        use DatabaseMigrations;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:240
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * A basic browser test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_example()\n"
"        {\n"
"            $user = User::factory()->create([\n"
"                'email' => 'taylor@laravel.com',\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:250
#, markdown-text, no-wrap
msgid ""
"            $this->browse(function ($browser) use ($user) {\n"
"                $browser->visit('/login')\n"
"                        ->type('email', $user->email)\n"
"                        ->type('password', 'password')\n"
"                        ->press('Login')\n"
"                        ->assertPathIs('/home');\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:252
#, markdown-text
msgid ""
"As you can see in the example above, the `browse` method accepts a "
"closure. A browser instance will automatically be passed to this closure by "
"Dusk and is the main object used to interact with and make assertions "
"against your application."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:254
#, markdown-text, no-wrap
msgid "<a name=\"creating-multiple-browsers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:254
#, markdown-text, no-wrap
msgid "Creating Multiple Browsers"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:257
#, markdown-text
msgid ""
"Sometimes you may need multiple browsers in order to properly carry out a "
"test. For example, multiple browsers may be needed to test a chat screen "
"that interacts with websockets. To create multiple browsers, simply add more "
"browser arguments to the signature of the closure given to the `browse` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:262
#, markdown-text, no-wrap
msgid ""
"    $this->browse(function ($first, $second) {\n"
"        $first->loginAs(User::find(1))\n"
"              ->visit('/home')\n"
"              ->waitForText('Message');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:268
#, markdown-text, no-wrap
msgid ""
"        $second->loginAs(User::find(2))\n"
"               ->visit('/home')\n"
"               ->waitForText('Message')\n"
"               ->type('message', 'Hey Taylor')\n"
"               ->press('Send');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:272
#, markdown-text, no-wrap
msgid ""
"        $first->waitForText('Hey Taylor')\n"
"              ->assertSee('Jeffrey Way');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:274
#, markdown-text, no-wrap
msgid "<a name=\"navigation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:274
#, markdown-text, no-wrap
msgid "Navigation"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:277
#, markdown-text
msgid ""
"The `visit` method may be used to navigate to a given URI within your "
"application:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:279
#, markdown-text, no-wrap
msgid "    $browser->visit('/login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:281
#, markdown-text
msgid ""
"You may use the `visitRoute` method to navigate to a [named "
"route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:283
#, markdown-text, no-wrap
msgid "    $browser->visitRoute('login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:285
#, markdown-text
msgid ""
"You may navigate \"back\" and \"forward\" using the `back` and `forward` "
"methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:287
#, markdown-text, no-wrap
msgid "    $browser->back();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:289
#, markdown-text, no-wrap
msgid "    $browser->forward();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:291
#, markdown-text
msgid "You may use the `refresh` method to refresh the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:293
#, markdown-text, no-wrap
msgid "    $browser->refresh();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:295
#, markdown-text, no-wrap
msgid "<a name=\"resizing-browser-windows\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:295
#, markdown-text, no-wrap
msgid "Resizing Browser Windows"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:298
#, markdown-text
msgid "You may use the `resize` method to adjust the size of the browser window:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:300
#, markdown-text, no-wrap
msgid "    $browser->resize(1920, 1080);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:302
#, markdown-text
msgid "The `maximize` method may be used to maximize the browser window:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:304
#, markdown-text, no-wrap
msgid "    $browser->maximize();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:306
#, markdown-text
msgid ""
"The `fitContent` method will resize the browser window to match the size of "
"its content:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:308
#, markdown-text, no-wrap
msgid "    $browser->fitContent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:310
#, markdown-text
msgid ""
"When a test fails, Dusk will automatically resize the browser to fit the "
"content prior to taking a screenshot. You may disable this feature by "
"calling the `disableFitOnFailure` method within your test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:312
#, markdown-text, no-wrap
msgid "    $browser->disableFitOnFailure();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:314
#, markdown-text
msgid ""
"You may use the `move` method to move the browser window to a different "
"position on your screen:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:316
#, markdown-text, no-wrap
msgid "    $browser->move($x = 100, $y = 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:318
#, markdown-text, no-wrap
msgid "<a name=\"browser-macros\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:318
#, markdown-text, no-wrap
msgid "Browser Macros"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:321
#, markdown-text
msgid ""
"If you would like to define a custom browser method that you can re-use in a "
"variety of your tests, you may use the `macro` method on the `Browser` "
"class. Typically, you should call this method from a [service "
"provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:325
#, markdown-text, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:328
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use Laravel\\Dusk\\Browser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:340
#, markdown-text, no-wrap
msgid ""
"    class DuskServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register Dusk's browser macros.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Browser::macro('scrollToElement', function ($element = null) {\n"
"                $this->script(\"$('html, body').animate({ scrollTop: "
"$('$element').offset().top }, 0);\");\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:345
#, markdown-text, no-wrap
msgid ""
"                return $this;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:347
#, markdown-text
msgid ""
"The `macro` function accepts a name as its first argument, and a closure as "
"its second. The macro's closure will be executed when calling the macro as a "
"method on a `Browser` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:353
#, markdown-text, no-wrap
msgid ""
"    $this->browse(function ($browser) use ($user) {\n"
"        $browser->visit('/pay')\n"
"                ->scrollToElement('#credit-card-details')\n"
"                ->assertSee('Enter Credit Card Details');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:355
#, markdown-text, no-wrap
msgid "<a name=\"authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:355
#, markdown-text, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:358
#, markdown-text
msgid ""
"Often, you will be testing pages that require authentication. You can use "
"Dusk's `loginAs` method in order to avoid interacting with your "
"application's login screen during every test. The `loginAs` method accepts a "
"primary key associated with your authenticatable model or an authenticatable "
"model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:360
#, markdown-text, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:365
#, markdown-text, no-wrap
msgid ""
"    $this->browse(function ($browser) {\n"
"        $browser->loginAs(User::find(1))\n"
"              ->visit('/home');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:367
#, markdown-text, no-wrap
msgid ""
"> {note} After using the `loginAs` method, the user session will be "
"maintained for all tests within the file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:369
#, markdown-text, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:369
#, markdown-text, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:372
#, markdown-text
msgid ""
"You may use the `cookie` method to get or set an encrypted cookie's "
"value. By default, all of the cookies created by Laravel are encrypted:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:374
#, markdown-text, no-wrap
msgid "    $browser->cookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:376
#, markdown-text, no-wrap
msgid "    $browser->cookie('name', 'Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:378
#, markdown-text
msgid ""
"You may use the `plainCookie` method to get or set an unencrypted cookie's "
"value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:380
#, markdown-text, no-wrap
msgid "    $browser->plainCookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:382
#, markdown-text, no-wrap
msgid "    $browser->plainCookie('name', 'Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:384
#, markdown-text
msgid "You may use the `deleteCookie` method to delete the given cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:386
#, markdown-text, no-wrap
msgid "    $browser->deleteCookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:388
#, markdown-text, no-wrap
msgid "<a name=\"executing-javascript\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:388
#, markdown-text, no-wrap
msgid "Executing JavaScript"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:391
#, markdown-text
msgid ""
"You may use the `script` method to execute arbitrary JavaScript statements "
"within the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:393
#, markdown-text, no-wrap
msgid "    $output = $browser->script('document.documentElement.scrollTop = 0');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:398
#, markdown-text, no-wrap
msgid ""
"    $output = $browser->script([\n"
"        'document.body.scrollTop = 0',\n"
"        'document.documentElement.scrollTop = 0',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:400
#, markdown-text, no-wrap
msgid "<a name=\"taking-a-screenshot\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:400
#, markdown-text, no-wrap
msgid "Taking A Screenshot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:403
#, markdown-text
msgid ""
"You may use the `screenshot` method to take a screenshot and store it with "
"the given filename. All screenshots will be stored within the "
"`tests/Browser/screenshots` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:405
#, markdown-text, no-wrap
msgid "    $browser->screenshot('filename');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:407
#, markdown-text, no-wrap
msgid "<a name=\"storing-console-output-to-disk\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:407
#, markdown-text, no-wrap
msgid "Storing Console Output To Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:410
#, markdown-text
msgid ""
"You may use the `storeConsoleLog` method to write the current browser's "
"console output to disk with the given filename. Console output will be "
"stored within the `tests/Browser/console` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:412
#, markdown-text, no-wrap
msgid "    $browser->storeConsoleLog('filename');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:414
#, markdown-text, no-wrap
msgid "<a name=\"storing-page-source-to-disk\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:414
#, markdown-text, no-wrap
msgid "Storing Page Source To Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:417
#, markdown-text
msgid ""
"You may use the `storeSource` method to write the current page's source to "
"disk with the given filename. The page source will be stored within the "
"`tests/Browser/source` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:419
#, markdown-text, no-wrap
msgid "    $browser->storeSource('filename');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:421
#, markdown-text, no-wrap
msgid "<a name=\"interacting-with-elements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:421
#, markdown-text, no-wrap
msgid "Interacting With Elements"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:424
#, markdown-text, no-wrap
msgid "<a name=\"dusk-selectors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:424
#, markdown-text, no-wrap
msgid "Dusk Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:427
#, markdown-text
msgid ""
"Choosing good CSS selectors for interacting with elements is one of the "
"hardest parts of writing Dusk tests. Over time, frontend changes can cause "
"CSS selectors like the following to break your tests:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:429 docs/8.x/dusk.md:439 docs/8.x/dusk.md:1399
#, markdown-text, no-wrap
msgid "    // HTML...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:431
#, markdown-text, no-wrap
msgid "    <button>Login</button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:433 docs/8.x/dusk.md:443
#, markdown-text, no-wrap
msgid "    // Test...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:435
#, markdown-text, no-wrap
msgid "    $browser->click('.login-page .container div > button');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:437
#, markdown-text
msgid ""
"Dusk selectors allow you to focus on writing effective tests rather than "
"remembering CSS selectors. To define a selector, add a `dusk` attribute to "
"your HTML element. Then, when interacting with a Dusk browser, prefix the "
"selector with `@` to manipulate the attached element within your test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:441
#, markdown-text, no-wrap
msgid "    <button dusk=\"login-button\">Login</button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:445
#, markdown-text, no-wrap
msgid "    $browser->click('@login-button');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:447
#, markdown-text, no-wrap
msgid "<a name=\"text-values-and-attributes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:447
#, markdown-text, no-wrap
msgid "Text, Values, & Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:450
#, markdown-text, no-wrap
msgid "<a name=\"retrieving-setting-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:450
#, markdown-text, no-wrap
msgid "Retrieving & Setting Values"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:453
#, markdown-text
msgid ""
"Dusk provides several methods for interacting with the current value, "
"display text, and attributes of elements on the page. For example, to get "
"the \"value\" of an element that matches a given CSS or Dusk selector, use "
"the `value` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:456
#, markdown-text, no-wrap
msgid ""
"    // Retrieve the value...\n"
"    $value = $browser->value('selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:459
#, markdown-text, no-wrap
msgid ""
"    // Set the value...\n"
"    $browser->value('selector', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:461
#, markdown-text
msgid ""
"You may use the `inputValue` method to get the \"value\" of an input element "
"that has a given field name:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:463
#, markdown-text, no-wrap
msgid "    $value = $browser->inputValue('field');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:465
#, markdown-text, no-wrap
msgid "<a name=\"retrieving-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:465
#, markdown-text, no-wrap
msgid "Retrieving Text"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:468
#, markdown-text
msgid ""
"The `text` method may be used to retrieve the display text of an element "
"that matches the given selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:470
#, markdown-text, no-wrap
msgid "    $text = $browser->text('selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:472
#, markdown-text, no-wrap
msgid "<a name=\"retrieving-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:472
#, markdown-text, no-wrap
msgid "Retrieving Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:475
#, markdown-text
msgid ""
"Finally, the `attribute` method may be used to retrieve the value of an "
"attribute of an element matching the given selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:477
#, markdown-text, no-wrap
msgid "    $attribute = $browser->attribute('selector', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:479
#, markdown-text, no-wrap
msgid "<a name=\"interacting-with-forms\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:479
#, markdown-text, no-wrap
msgid "Interacting With Forms"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:482
#, markdown-text, no-wrap
msgid "<a name=\"typing-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:482
#, markdown-text, no-wrap
msgid "Typing Values"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:485
#, markdown-text
msgid ""
"Dusk provides a variety of methods for interacting with forms and input "
"elements. First, let's take a look at an example of typing text into an "
"input field:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:487
#, markdown-text, no-wrap
msgid "    $browser->type('email', 'taylor@laravel.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:489
#, markdown-text
msgid ""
"Note that, although the method accepts one if necessary, we are not required "
"to pass a CSS selector into the `type` method. If a CSS selector is not "
"provided, Dusk will search for an `input` or `textarea` field with the given "
"`name` attribute."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:491
#, markdown-text
msgid ""
"To append text to a field without clearing its content, you may use the "
"`append` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:494
#, markdown-text, no-wrap
msgid ""
"    $browser->type('tags', 'foo')\n"
"            ->append('tags', ', bar, baz');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:496
#, markdown-text
msgid "You may clear the value of an input using the `clear` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:498
#, markdown-text, no-wrap
msgid "    $browser->clear('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:500
#, markdown-text
msgid ""
"You can instruct Dusk to type slowly using the `typeSlowly` method. By "
"default, Dusk will pause for 100 milliseconds between key presses. To "
"customize the amount of time between key presses, you may pass the "
"appropriate number of milliseconds as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:502
#, markdown-text, no-wrap
msgid "    $browser->typeSlowly('mobile', '+1 (202) 555-5555');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:504
#, markdown-text, no-wrap
msgid "    $browser->typeSlowly('mobile', '+1 (202) 555-5555', 300);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:506
#, markdown-text
msgid "You may use the `appendSlowly` method to append text slowly:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:509
#, markdown-text, no-wrap
msgid ""
"    $browser->type('tags', 'foo')\n"
"            ->appendSlowly('tags', ', bar, baz');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:511
#, markdown-text, no-wrap
msgid "<a name=\"dropdowns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:511
#, markdown-text, no-wrap
msgid "Dropdowns"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:514
#, markdown-text
msgid ""
"To select a value available on a `select` element, you may use the `select` "
"method. Like the `type` method, the `select` method does not require a full "
"CSS selector. When passing a value to the `select` method, you should pass "
"the underlying option value instead of the display text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:516
#, markdown-text, no-wrap
msgid "    $browser->select('size', 'Large');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:518
#, markdown-text
msgid "You may select a random option by omitting the second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:520
#, markdown-text, no-wrap
msgid "    $browser->select('size');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:522
#, markdown-text, no-wrap
msgid "<a name=\"checkboxes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:522
#, markdown-text, no-wrap
msgid "Checkboxes"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:525
#, markdown-text
msgid ""
"To \"check\" a checkbox input, you may use the `check` method. Like many "
"other input related methods, a full CSS selector is not required. If a CSS "
"selector match can't be found, Dusk will search for a checkbox with a "
"matching `name` attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:527
#, markdown-text, no-wrap
msgid "    $browser->check('terms');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:529
#, markdown-text
msgid "The `uncheck` method may be used to \"uncheck\" a checkbox input:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:531
#, markdown-text, no-wrap
msgid "    $browser->uncheck('terms');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:533
#, markdown-text, no-wrap
msgid "<a name=\"radio-buttons\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:533
#, markdown-text, no-wrap
msgid "Radio Buttons"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:536
#, markdown-text
msgid ""
"To \"select\" a `radio` input option, you may use the `radio` method. Like "
"many other input related methods, a full CSS selector is not required. If a "
"CSS selector match can't be found, Dusk will search for a `radio` input with "
"matching `name` and `value` attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:538
#, markdown-text, no-wrap
msgid "    $browser->radio('size', 'large');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:540
#, markdown-text, no-wrap
msgid "<a name=\"attaching-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:540
#, markdown-text, no-wrap
msgid "Attaching Files"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:543
#, markdown-text
msgid ""
"The `attach` method may be used to attach a file to a `file` input "
"element. Like many other input related methods, a full CSS selector is not "
"required. If a CSS selector match can't be found, Dusk will search for a "
"`file` input with a matching `name` attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:545
#, markdown-text, no-wrap
msgid "    $browser->attach('photo', __DIR__.'/photos/mountains.png');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:547
#, markdown-text, no-wrap
msgid ""
"> {note} The attach function requires the `Zip` PHP extension to be "
"installed and enabled on your server.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:549
#, markdown-text, no-wrap
msgid "<a name=\"pressing-buttons\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:549
#, markdown-text, no-wrap
msgid "Pressing Buttons"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:552
#, markdown-text
msgid ""
"The `press` method may be used to click a button element on the page. The "
"first argument given to the `press` method may be either the display text of "
"the button or a CSS / Dusk selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:554
#, markdown-text, no-wrap
msgid "    $browser->press('Login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:556
#, markdown-text
msgid ""
"When submitting forms, many application's disable the form's submission "
"button after it is pressed and then re-enable the button when the form "
"submission's HTTP request is complete. To press a button and wait for the "
"button to be re-enabled, you may use the `pressAndWaitFor` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:559
#, markdown-text, no-wrap
msgid ""
"    // Press the button and wait a maximum of 5 seconds for it to be "
"enabled...\n"
"    $browser->pressAndWaitFor('Save');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:562
#, markdown-text, no-wrap
msgid ""
"    // Press the button and wait a maximum of 1 second for it to be "
"enabled...\n"
"    $browser->pressAndWaitFor('Save', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:564
#, markdown-text, no-wrap
msgid "<a name=\"clicking-links\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:564
#, markdown-text, no-wrap
msgid "Clicking Links"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:567
#, markdown-text
msgid ""
"To click a link, you may use the `clickLink` method on the browser "
"instance. The `clickLink` method will click the link that has the given "
"display text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:569
#, markdown-text, no-wrap
msgid "    $browser->clickLink($linkText);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:571
#, markdown-text
msgid ""
"You may use the `seeLink` method to determine if a link with the given "
"display text is visible on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:575
#, markdown-text, no-wrap
msgid ""
"    if ($browser->seeLink($linkText)) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:577
#, markdown-text, no-wrap
msgid ""
"> {note} These methods interact with jQuery. If jQuery is not available on "
"the page, Dusk will automatically inject it into the page so it is available "
"for the test's duration.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:579
#, markdown-text, no-wrap
msgid "<a name=\"using-the-keyboard\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:579
#, markdown-text, no-wrap
msgid "Using The Keyboard"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:582
#, markdown-text
msgid ""
"The `keys` method allows you to provide more complex input sequences to a "
"given element than normally allowed by the `type` method. For example, you "
"may instruct Dusk to hold modifier keys while entering values. In this "
"example, the `shift` key will be held while `taylor` is entered into the "
"element matching the given selector. After `taylor` is typed, `swift` will "
"be typed without any modifier keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:584
#, markdown-text, no-wrap
msgid "    $browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:586
#, markdown-text
msgid ""
"Another valuable use case for the `keys` method is sending a \"keyboard "
"shortcut\" combination to the primary CSS selector for your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:588
#, markdown-text, no-wrap
msgid "    $browser->keys('.app', ['{command}', 'j']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:590
#, markdown-text, no-wrap
msgid ""
"> {tip} All modifier keys such as `{command}` are wrapped in `{}` "
"characters, and match the constants defined in the "
"`Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on "
"GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:592
#, markdown-text, no-wrap
msgid "<a name=\"using-the-mouse\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:592
#, markdown-text, no-wrap
msgid "Using The Mouse"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:595
#, markdown-text, no-wrap
msgid "<a name=\"clicking-on-elements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:595
#, markdown-text, no-wrap
msgid "Clicking On Elements"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:598
#, markdown-text
msgid ""
"The `click` method may be used to click on an element matching the given CSS "
"or Dusk selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:600
#, markdown-text, no-wrap
msgid "    $browser->click('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:602
#, markdown-text
msgid ""
"The `clickAtXPath` method may be used to click on an element matching the "
"given XPath expression:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:604
#, markdown-text, no-wrap
msgid "    $browser->clickAtXPath('//div[@class = \"selector\"]');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:606
#, markdown-text
msgid ""
"The `clickAtPoint` method may be used to click on the topmost element at a "
"given pair of coordinates relative to the viewable area of the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:608
#, markdown-text, no-wrap
msgid "    $browser->clickAtPoint($x = 0, $y = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:610
#, markdown-text
msgid ""
"The `doubleClick` method may be used to simulate the double click of a "
"mouse:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:612
#, markdown-text, no-wrap
msgid "    $browser->doubleClick();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:614
#, markdown-text
msgid "The `rightClick` method may be used to simulate the right click of a mouse:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:616
#, markdown-text, no-wrap
msgid "    $browser->rightClick();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:618
#, markdown-text, no-wrap
msgid "    $browser->rightClick('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:620
#, markdown-text
msgid ""
"The `clickAndHold` method may be used to simulate a mouse button being "
"clicked and held down. A subsequent call to the `releaseMouse` method will "
"undo this behavior and release the mouse button:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:624
#, markdown-text, no-wrap
msgid ""
"    $browser->clickAndHold()\n"
"            ->pause(1000)\n"
"            ->releaseMouse();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:626
#, markdown-text, no-wrap
msgid "<a name=\"mouseover\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:626
#, markdown-text, no-wrap
msgid "Mouseover"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:629
#, markdown-text
msgid ""
"The `mouseover` method may be used when you need to move the mouse over an "
"element matching the given CSS or Dusk selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:631
#, markdown-text, no-wrap
msgid "    $browser->mouseover('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:633
#, markdown-text, no-wrap
msgid "<a name=\"drag-drop\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:633
#, markdown-text, no-wrap
msgid "Drag & Drop"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:636
#, markdown-text
msgid ""
"The `drag` method may be used to drag an element matching the given selector "
"to another element:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:638
#, markdown-text, no-wrap
msgid "    $browser->drag('.from-selector', '.to-selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:640
#, markdown-text
msgid "Or, you may drag an element in a single direction:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:645
#, markdown-text, no-wrap
msgid ""
"    $browser->dragLeft('.selector', $pixels = 10);\n"
"    $browser->dragRight('.selector', $pixels = 10);\n"
"    $browser->dragUp('.selector', $pixels = 10);\n"
"    $browser->dragDown('.selector', $pixels = 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:647
#, markdown-text
msgid "Finally, you may drag an element by a given offset:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:649
#, markdown-text, no-wrap
msgid "    $browser->dragOffset('.selector', $x = 10, $y = 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:651
#, markdown-text, no-wrap
msgid "<a name=\"javascript-dialogs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:651
#, markdown-text, no-wrap
msgid "JavaScript Dialogs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:654
#, markdown-text
msgid ""
"Dusk provides various methods to interact with JavaScript Dialogs. For "
"example, you may use the `waitForDialog` method to wait for a JavaScript "
"dialog to appear. This method accepts an optional argument indicating how "
"many seconds to wait for the dialog to appear:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:656
#, markdown-text, no-wrap
msgid "    $browser->waitForDialog($seconds = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:658
#, markdown-text
msgid ""
"The `assertDialogOpened` method may be used to assert that a dialog has been "
"displayed and contains the given message:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:660
#, markdown-text, no-wrap
msgid "    $browser->assertDialogOpened('Dialog message');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:662
#, markdown-text
msgid ""
"If the JavaScript dialog contains a prompt, you may use the `typeInDialog` "
"method to type a value into the prompt:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:664
#, markdown-text, no-wrap
msgid "    $browser->typeInDialog('Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:666
#, markdown-text
msgid ""
"To close an open JavaScript dialog by clicking the \"OK\" button, you may "
"invoke the `acceptDialog` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:668
#, markdown-text, no-wrap
msgid "    $browser->acceptDialog();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:670
#, markdown-text
msgid ""
"To close an open JavaScript dialog by clicking the \"Cancel\" button, you "
"may invoke the `dismissDialog` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:672
#, markdown-text, no-wrap
msgid "    $browser->dismissDialog();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:674
#, markdown-text, no-wrap
msgid "<a name=\"scoping-selectors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:674
#, markdown-text, no-wrap
msgid "Scoping Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:677
#, markdown-text
msgid ""
"Sometimes you may wish to perform several operations while scoping all of "
"the operations within a given selector. For example, you may wish to assert "
"that some text exists only within a table and then click a button within "
"that table. You may use the `with` method to accomplish this. All operations "
"performed within the closure given to the `with` method will be scoped to "
"the original selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:682
#, markdown-text, no-wrap
msgid ""
"    $browser->with('.table', function ($table) {\n"
"        $table->assertSee('Hello World')\n"
"              ->clickLink('Delete');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:684
#, markdown-text
msgid ""
"You may occasionally need to execute assertions outside of the current "
"scope. You may use the `elsewhere` and `elsewhereWhenAvailable` methods to "
"accomplish this:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:687
#, markdown-text, no-wrap
msgid ""
"     $browser->with('.table', function ($table) {\n"
"        // Current scope is `body .table`...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:692
#, markdown-text, no-wrap
msgid ""
"        $browser->elsewhere('.page-title', function ($title) {\n"
"            // Current scope is `body .page-title`...\n"
"            $title->assertSee('Hello World');\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:698
#, markdown-text, no-wrap
msgid ""
"        $browser->elsewhereWhenAvailable('.page-title', function ($title) "
"{\n"
"            // Current scope is `body .page-title`...\n"
"            $title->assertSee('Hello World');\n"
"        });\n"
"     });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:700
#, markdown-text, no-wrap
msgid "<a name=\"waiting-for-elements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:700
#, markdown-text, no-wrap
msgid "Waiting For Elements"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:703
#, markdown-text
msgid ""
"When testing applications that use JavaScript extensively, it often becomes "
"necessary to \"wait\" for certain elements or data to be available before "
"proceeding with a test. Dusk makes this a cinch. Using a variety of methods, "
"you may wait for elements to be visible on the page or even wait until a "
"given JavaScript expression evaluates to `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:705
#, markdown-text, no-wrap
msgid "<a name=\"waiting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:705
#, markdown-text, no-wrap
msgid "Waiting"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:708
#, markdown-text
msgid ""
"If you just need to pause the test for a given number of milliseconds, use "
"the `pause` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:710
#, markdown-text, no-wrap
msgid "    $browser->pause(1000);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:712
#, markdown-text, no-wrap
msgid "<a name=\"waiting-for-selectors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:712
#, markdown-text, no-wrap
msgid "Waiting For Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:715
#, markdown-text
msgid ""
"The `waitFor` method may be used to pause the execution of the test until "
"the element matching the given CSS or Dusk selector is displayed on the "
"page. By default, this will pause the test for a maximum of five seconds "
"before throwing an exception. If necessary, you may pass a custom timeout "
"threshold as the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:718
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds for the selector...\n"
"    $browser->waitFor('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:721
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second for the selector...\n"
"    $browser->waitFor('.selector', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:723
#, markdown-text
msgid ""
"You may also wait until the element matching the given selector contains the "
"given text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:726
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds for the selector to contain the given "
"text...\n"
"    $browser->waitForTextIn('.selector', 'Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:729
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second for the selector to contain the given "
"text...\n"
"    $browser->waitForTextIn('.selector', 'Hello World', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:731
#, markdown-text
msgid ""
"You may also wait until the element matching the given selector is missing "
"from the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:734
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds until the selector is missing...\n"
"    $browser->waitUntilMissing('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:737
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second until the selector is missing...\n"
"    $browser->waitUntilMissing('.selector', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:739
#, markdown-text, no-wrap
msgid "<a name=\"scoping-selectors-when-available\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:739
#, markdown-text, no-wrap
msgid "Scoping Selectors When Available"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:742
#, markdown-text
msgid ""
"Occasionally, you may wish to wait for an element to appear that matches a "
"given selector and then interact with the element. For example, you may wish "
"to wait until a modal window is available and then press the \"OK\" button "
"within the modal. The `whenAvailable` method may be used to accomplish "
"this. All element operations performed within the given closure will be "
"scoped to the original selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:747
#, markdown-text, no-wrap
msgid ""
"    $browser->whenAvailable('.modal', function ($modal) {\n"
"        $modal->assertSee('Hello World')\n"
"              ->press('OK');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:749
#, markdown-text, no-wrap
msgid "<a name=\"waiting-for-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:749
#, markdown-text, no-wrap
msgid "Waiting For Text"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:752
#, markdown-text
msgid ""
"The `waitForText` method may be used to wait until the given text is "
"displayed on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:755
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds for the text...\n"
"    $browser->waitForText('Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:758
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second for the text...\n"
"    $browser->waitForText('Hello World', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:760
#, markdown-text
msgid ""
"You may use the `waitUntilMissingText` method to wait until the displayed "
"text has been removed from the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:763
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds for the text to be removed...\n"
"    $browser->waitUntilMissingText('Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:766
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second for the text to be removed...\n"
"    $browser->waitUntilMissingText('Hello World', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:768
#, markdown-text, no-wrap
msgid "<a name=\"waiting-for-links\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:768
#, markdown-text, no-wrap
msgid "Waiting For Links"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:771
#, markdown-text
msgid ""
"The `waitForLink` method may be used to wait until the given link text is "
"displayed on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:774
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds for the link...\n"
"    $browser->waitForLink('Create');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:777
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second for the link...\n"
"    $browser->waitForLink('Create', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:779
#, markdown-text, no-wrap
msgid "<a name=\"waiting-on-the-page-location\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:779
#, markdown-text, no-wrap
msgid "Waiting On The Page Location"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:782
#, markdown-text, no-wrap
msgid ""
"When making a path assertion such as `$browser->assertPathIs('/home')`, the "
"assertion can fail if `window.location.pathname` is being updated "
"asynchronously. You may use the `waitForLocation` method to wait for the "
"location to be a given value:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:784
#, markdown-text, no-wrap
msgid "    $browser->waitForLocation('/secret');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:786
#, markdown-text
msgid ""
"You may also wait for a [named "
"route's](/docs/{{version}}/routing#named-routes) location:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:788
#, markdown-text, no-wrap
msgid "    $browser->waitForRoute($routeName, $parameters);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:790
#, markdown-text, no-wrap
msgid "<a name=\"waiting-for-page-reloads\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:790
#, markdown-text, no-wrap
msgid "Waiting for Page Reloads"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:793
#, markdown-text
msgid ""
"If you need to make assertions after a page has been reloaded, use the "
"`waitForReload` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:797
#, markdown-text, no-wrap
msgid ""
"    $browser->click('.some-action')\n"
"            ->waitForReload()\n"
"            ->assertSee('something');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:799
#, markdown-text, no-wrap
msgid "<a name=\"waiting-on-javascript-expressions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:799
#, markdown-text, no-wrap
msgid "Waiting On JavaScript Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:802
#, markdown-text
msgid ""
"Sometimes you may wish to pause the execution of a test until a given "
"JavaScript expression evaluates to `true`. You may easily accomplish this "
"using the `waitUntil` method. When passing an expression to this method, you "
"do not need to include the `return` keyword or an ending semi-colon:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:805
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of five seconds for the expression to be true...\n"
"    $browser->waitUntil('App.data.servers.length > 0');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:808
#, markdown-text, no-wrap
msgid ""
"    // Wait a maximum of one second for the expression to be true...\n"
"    $browser->waitUntil('App.data.servers.length > 0', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:810
#, markdown-text, no-wrap
msgid "<a name=\"waiting-on-vue-expressions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:810
#, markdown-text, no-wrap
msgid "Waiting On Vue Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:813
#, markdown-text
msgid ""
"The `waitUntilVue` and `waitUntilVueIsNot` methods may be used to wait until "
"a [Vue component](https://vuejs.org) attribute has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:816
#, markdown-text, no-wrap
msgid ""
"    // Wait until the component attribute contains the given value...\n"
"    $browser->waitUntilVue('user.name', 'Taylor', '@user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:819
#, markdown-text, no-wrap
msgid ""
"    // Wait until the component attribute doesn't contain the given "
"value...\n"
"    $browser->waitUntilVueIsNot('user.name', null, '@user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:821
#, markdown-text, no-wrap
msgid "<a name=\"waiting-with-a-callback\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:821
#, markdown-text, no-wrap
msgid "Waiting With A Callback"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:824
#, markdown-text
msgid ""
"Many of the \"wait\" methods in Dusk rely on the underlying `waitUsing` "
"method. You may use this method directly to wait for a given closure to "
"return `true`. The `waitUsing` method accepts the maximum number of seconds "
"to wait, the interval at which the closure should be evaluated, the closure, "
"and an optional failure message:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:828
#, markdown-text, no-wrap
msgid ""
"    $browser->waitUsing(10, 1, function () use ($something) {\n"
"        return $something->isReady();\n"
"    }, \"Something wasn't ready in time.\");\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:830
#, markdown-text, no-wrap
msgid "<a name=\"scrolling-an-element-into-view\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:830
#, markdown-text, no-wrap
msgid "Scrolling An Element Into View"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:833
#, markdown-text
msgid ""
"Sometimes you may not be able to click on an element because it is outside "
"of the viewable area of the browser. The `scrollIntoView` method will scroll "
"the browser window until the element at the given selector is within the "
"view:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:836
#, markdown-text, no-wrap
msgid ""
"    $browser->scrollIntoView('.selector')\n"
"            ->click('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:838
#, markdown-text, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:838
#, markdown-text, no-wrap
msgid "Available Assertions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:841
#, markdown-text
msgid ""
"Dusk provides a variety of assertions that you may make against your "
"application. All of the available assertions are documented in the list "
"below:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:847
#, markdown-text, no-wrap
msgid ""
"<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:852
#, markdown-text, no-wrap
msgid ""
"    .collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:924
#, markdown-text, no-wrap
msgid ""
"<div class=\"collection-method-list\" markdown=\"1\">\n"
"[assertTitle](#assert-title)\n"
"[assertTitleContains](#assert-title-contains)\n"
"[assertUrlIs](#assert-url-is)\n"
"[assertSchemeIs](#assert-scheme-is)\n"
"[assertSchemeIsNot](#assert-scheme-is-not)\n"
"[assertHostIs](#assert-host-is)\n"
"[assertHostIsNot](#assert-host-is-not)\n"
"[assertPortIs](#assert-port-is)\n"
"[assertPortIsNot](#assert-port-is-not)\n"
"[assertPathBeginsWith](#assert-path-begins-with)\n"
"[assertPathIs](#assert-path-is)\n"
"[assertPathIsNot](#assert-path-is-not)\n"
"[assertRouteIs](#assert-route-is)\n"
"[assertQueryStringHas](#assert-query-string-has)\n"
"[assertQueryStringMissing](#assert-query-string-missing)\n"
"[assertFragmentIs](#assert-fragment-is)\n"
"[assertFragmentBeginsWith](#assert-fragment-begins-with)\n"
"[assertFragmentIsNot](#assert-fragment-is-not)\n"
"[assertHasCookie](#assert-has-cookie)\n"
"[assertHasPlainCookie](#assert-has-plain-cookie)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertPlainCookieMissing](#assert-plain-cookie-missing)\n"
"[assertCookieValue](#assert-cookie-value)\n"
"[assertPlainCookieValue](#assert-plain-cookie-value)\n"
"[assertSee](#assert-see)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertSeeIn](#assert-see-in)\n"
"[assertDontSeeIn](#assert-dont-see-in)\n"
"[assertSeeAnythingIn](#assert-see-anything-in)\n"
"[assertSeeNothingIn](#assert-see-nothing-in)\n"
"[assertScript](#assert-script)\n"
"[assertSourceHas](#assert-source-has)\n"
"[assertSourceMissing](#assert-source-missing)\n"
"[assertSeeLink](#assert-see-link)\n"
"[assertDontSeeLink](#assert-dont-see-link)\n"
"[assertInputValue](#assert-input-value)\n"
"[assertInputValueIsNot](#assert-input-value-is-not)\n"
"[assertChecked](#assert-checked)\n"
"[assertNotChecked](#assert-not-checked)\n"
"[assertRadioSelected](#assert-radio-selected)\n"
"[assertRadioNotSelected](#assert-radio-not-selected)\n"
"[assertSelected](#assert-selected)\n"
"[assertNotSelected](#assert-not-selected)\n"
"[assertSelectHasOptions](#assert-select-has-options)\n"
"[assertSelectMissingOptions](#assert-select-missing-options)\n"
"[assertSelectHasOption](#assert-select-has-option)\n"
"[assertSelectMissingOption](#assert-select-missing-option)\n"
"[assertValue](#assert-value)\n"
"[assertAttribute](#assert-attribute)\n"
"[assertAriaAttribute](#assert-aria-attribute)\n"
"[assertDataAttribute](#assert-data-attribute)\n"
"[assertVisible](#assert-visible)\n"
"[assertPresent](#assert-present)\n"
"[assertNotPresent](#assert-not-present)\n"
"[assertMissing](#assert-missing)\n"
"[assertDialogOpened](#assert-dialog-opened)\n"
"[assertEnabled](#assert-enabled)\n"
"[assertDisabled](#assert-disabled)\n"
"[assertButtonEnabled](#assert-button-enabled)\n"
"[assertButtonDisabled](#assert-button-disabled)\n"
"[assertFocused](#assert-focused)\n"
"[assertNotFocused](#assert-not-focused)\n"
"[assertAuthenticated](#assert-authenticated)\n"
"[assertGuest](#assert-guest)\n"
"[assertAuthenticatedAs](#assert-authenticated-as)\n"
"[assertVue](#assert-vue)\n"
"[assertVueIsNot](#assert-vue-is-not)\n"
"[assertVueContains](#assert-vue-contains)\n"
"[assertVueDoesNotContain](#assert-vue-does-not-contain)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:926
#, markdown-text, no-wrap
msgid "<a name=\"assert-title\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:926
#, markdown-text, no-wrap
msgid "assertTitle"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:929
#, markdown-text
msgid "Assert that the page title matches the given text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:931
#, markdown-text, no-wrap
msgid "    $browser->assertTitle($title);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:933
#, markdown-text, no-wrap
msgid "<a name=\"assert-title-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:933
#, markdown-text, no-wrap
msgid "assertTitleContains"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:936
#, markdown-text
msgid "Assert that the page title contains the given text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:938
#, markdown-text, no-wrap
msgid "    $browser->assertTitleContains($title);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:940
#, markdown-text, no-wrap
msgid "<a name=\"assert-url-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:940
#, markdown-text, no-wrap
msgid "assertUrlIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:943
#, markdown-text
msgid ""
"Assert that the current URL (without the query string) matches the given "
"string:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:945
#, markdown-text, no-wrap
msgid "    $browser->assertUrlIs($url);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:947
#, markdown-text, no-wrap
msgid "<a name=\"assert-scheme-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:947
#, markdown-text, no-wrap
msgid "assertSchemeIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:950
#, markdown-text
msgid "Assert that the current URL scheme matches the given scheme:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:952
#, markdown-text, no-wrap
msgid "    $browser->assertSchemeIs($scheme);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:954
#, markdown-text, no-wrap
msgid "<a name=\"assert-scheme-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:954
#, markdown-text, no-wrap
msgid "assertSchemeIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:957
#, markdown-text
msgid "Assert that the current URL scheme does not match the given scheme:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:959
#, markdown-text, no-wrap
msgid "    $browser->assertSchemeIsNot($scheme);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:961
#, markdown-text, no-wrap
msgid "<a name=\"assert-host-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:961
#, markdown-text, no-wrap
msgid "assertHostIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:964
#, markdown-text
msgid "Assert that the current URL host matches the given host:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:966
#, markdown-text, no-wrap
msgid "    $browser->assertHostIs($host);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:968
#, markdown-text, no-wrap
msgid "<a name=\"assert-host-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:968
#, markdown-text, no-wrap
msgid "assertHostIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:971
#, markdown-text
msgid "Assert that the current URL host does not match the given host:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:973
#, markdown-text, no-wrap
msgid "    $browser->assertHostIsNot($host);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:975
#, markdown-text, no-wrap
msgid "<a name=\"assert-port-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:975
#, markdown-text, no-wrap
msgid "assertPortIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:978
#, markdown-text
msgid "Assert that the current URL port matches the given port:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:980
#, markdown-text, no-wrap
msgid "    $browser->assertPortIs($port);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:982
#, markdown-text, no-wrap
msgid "<a name=\"assert-port-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:982
#, markdown-text, no-wrap
msgid "assertPortIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:985
#, markdown-text
msgid "Assert that the current URL port does not match the given port:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:987
#, markdown-text, no-wrap
msgid "    $browser->assertPortIsNot($port);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:989
#, markdown-text, no-wrap
msgid "<a name=\"assert-path-begins-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:989
#, markdown-text, no-wrap
msgid "assertPathBeginsWith"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:992
#, markdown-text
msgid "Assert that the current URL path begins with the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:994
#, markdown-text, no-wrap
msgid "    $browser->assertPathBeginsWith('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:996
#, markdown-text, no-wrap
msgid "<a name=\"assert-path-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:996
#, markdown-text, no-wrap
msgid "assertPathIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:999
#, markdown-text
msgid "Assert that the current path matches the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1001
#, markdown-text, no-wrap
msgid "    $browser->assertPathIs('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1003
#, markdown-text, no-wrap
msgid "<a name=\"assert-path-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1003
#, markdown-text, no-wrap
msgid "assertPathIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1006
#, markdown-text
msgid "Assert that the current path does not match the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1008
#, markdown-text, no-wrap
msgid "    $browser->assertPathIsNot('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1010
#, markdown-text, no-wrap
msgid "<a name=\"assert-route-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1010
#, markdown-text, no-wrap
msgid "assertRouteIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1013
#, markdown-text
msgid ""
"Assert that the current URL matches the given [named "
"route's](/docs/{{version}}/routing#named-routes) URL:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1015
#, markdown-text, no-wrap
msgid "    $browser->assertRouteIs($name, $parameters);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1017
#, markdown-text, no-wrap
msgid "<a name=\"assert-query-string-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1017
#, markdown-text, no-wrap
msgid "assertQueryStringHas"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1020
#, markdown-text
msgid "Assert that the given query string parameter is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1022
#, markdown-text, no-wrap
msgid "    $browser->assertQueryStringHas($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1024
#, markdown-text
msgid ""
"Assert that the given query string parameter is present and has a given "
"value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1026
#, markdown-text, no-wrap
msgid "    $browser->assertQueryStringHas($name, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1028
#, markdown-text, no-wrap
msgid "<a name=\"assert-query-string-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1028
#, markdown-text, no-wrap
msgid "assertQueryStringMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1031
#, markdown-text
msgid "Assert that the given query string parameter is missing:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1033
#, markdown-text, no-wrap
msgid "    $browser->assertQueryStringMissing($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1035
#, markdown-text, no-wrap
msgid "<a name=\"assert-fragment-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1035
#, markdown-text, no-wrap
msgid "assertFragmentIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1038
#, markdown-text
msgid "Assert that the URL's current hash fragment matches the given fragment:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1040
#, markdown-text, no-wrap
msgid "    $browser->assertFragmentIs('anchor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1042
#, markdown-text, no-wrap
msgid "<a name=\"assert-fragment-begins-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1042
#, markdown-text, no-wrap
msgid "assertFragmentBeginsWith"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1045
#, markdown-text
msgid "Assert that the URL's current hash fragment begins with the given fragment:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1047
#, markdown-text, no-wrap
msgid "    $browser->assertFragmentBeginsWith('anchor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1049
#, markdown-text, no-wrap
msgid "<a name=\"assert-fragment-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1049
#, markdown-text, no-wrap
msgid "assertFragmentIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1052
#, markdown-text
msgid ""
"Assert that the URL's current hash fragment does not match the given "
"fragment:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1054
#, markdown-text, no-wrap
msgid "    $browser->assertFragmentIsNot('anchor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1056
#, markdown-text, no-wrap
msgid "<a name=\"assert-has-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1056
#, markdown-text, no-wrap
msgid "assertHasCookie"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1059
#, markdown-text
msgid "Assert that the given encrypted cookie is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1061
#, markdown-text, no-wrap
msgid "    $browser->assertHasCookie($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1063
#, markdown-text, no-wrap
msgid "<a name=\"assert-has-plain-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1063
#, markdown-text, no-wrap
msgid "assertHasPlainCookie"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1066
#, markdown-text
msgid "Assert that the given unencrypted cookie is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1068
#, markdown-text, no-wrap
msgid "    $browser->assertHasPlainCookie($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1070
#, markdown-text, no-wrap
msgid "<a name=\"assert-cookie-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1070
#, markdown-text, no-wrap
msgid "assertCookieMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1073
#, markdown-text
msgid "Assert that the given encrypted cookie is not present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1075
#, markdown-text, no-wrap
msgid "    $browser->assertCookieMissing($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1077
#, markdown-text, no-wrap
msgid "<a name=\"assert-plain-cookie-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1077
#, markdown-text, no-wrap
msgid "assertPlainCookieMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1080
#, markdown-text
msgid "Assert that the given unencrypted cookie is not present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1082
#, markdown-text, no-wrap
msgid "    $browser->assertPlainCookieMissing($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1084
#, markdown-text, no-wrap
msgid "<a name=\"assert-cookie-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1084
#, markdown-text, no-wrap
msgid "assertCookieValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1087
#, markdown-text
msgid "Assert that an encrypted cookie has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1089
#, markdown-text, no-wrap
msgid "    $browser->assertCookieValue($name, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1091
#, markdown-text, no-wrap
msgid "<a name=\"assert-plain-cookie-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1091
#, markdown-text, no-wrap
msgid "assertPlainCookieValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1094
#, markdown-text
msgid "Assert that an unencrypted cookie has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1096
#, markdown-text, no-wrap
msgid "    $browser->assertPlainCookieValue($name, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1098
#, markdown-text, no-wrap
msgid "<a name=\"assert-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1098
#, markdown-text, no-wrap
msgid "assertSee"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1101
#, markdown-text
msgid "Assert that the given text is present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1103
#, markdown-text, no-wrap
msgid "    $browser->assertSee($text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1105
#, markdown-text, no-wrap
msgid "<a name=\"assert-dont-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1105
#, markdown-text, no-wrap
msgid "assertDontSee"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1108
#, markdown-text
msgid "Assert that the given text is not present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1110
#, markdown-text, no-wrap
msgid "    $browser->assertDontSee($text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1112
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1112
#, markdown-text, no-wrap
msgid "assertSeeIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1115
#, markdown-text
msgid "Assert that the given text is present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1117
#, markdown-text, no-wrap
msgid "    $browser->assertSeeIn($selector, $text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1119
#, markdown-text, no-wrap
msgid "<a name=\"assert-dont-see-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1119
#, markdown-text, no-wrap
msgid "assertDontSeeIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1122
#, markdown-text
msgid "Assert that the given text is not present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1124
#, markdown-text, no-wrap
msgid "    $browser->assertDontSeeIn($selector, $text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1126
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-anything-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1126
#, markdown-text, no-wrap
msgid "assertSeeAnythingIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1129
#, markdown-text
msgid "Assert that any text is present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1131
#, markdown-text, no-wrap
msgid "    $browser->assertSeeAnythingIn($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1133
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-nothing-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1133
#, markdown-text, no-wrap
msgid "assertSeeNothingIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1136
#, markdown-text
msgid "Assert that no text is present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1138
#, markdown-text, no-wrap
msgid "    $browser->assertSeeNothingIn($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1140
#, markdown-text, no-wrap
msgid "<a name=\"assert-script\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1140
#, markdown-text, no-wrap
msgid "assertScript"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1143
#, markdown-text
msgid "Assert that the given JavaScript expression evaluates to the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1146
#, markdown-text, no-wrap
msgid ""
"    $browser->assertScript('window.isLoaded')\n"
"            ->assertScript('document.readyState', 'complete');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1148
#, markdown-text, no-wrap
msgid "<a name=\"assert-source-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1148
#, markdown-text, no-wrap
msgid "assertSourceHas"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1151
#, markdown-text
msgid "Assert that the given source code is present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1153
#, markdown-text, no-wrap
msgid "    $browser->assertSourceHas($code);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1155
#, markdown-text, no-wrap
msgid "<a name=\"assert-source-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1155
#, markdown-text, no-wrap
msgid "assertSourceMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1158
#, markdown-text
msgid "Assert that the given source code is not present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1160
#, markdown-text, no-wrap
msgid "    $browser->assertSourceMissing($code);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1162
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-link\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1162
#, markdown-text, no-wrap
msgid "assertSeeLink"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1165
#, markdown-text
msgid "Assert that the given link is present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1167
#, markdown-text, no-wrap
msgid "    $browser->assertSeeLink($linkText);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1169
#, markdown-text, no-wrap
msgid "<a name=\"assert-dont-see-link\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1169
#, markdown-text, no-wrap
msgid "assertDontSeeLink"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1172
#, markdown-text
msgid "Assert that the given link is not present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1174
#, markdown-text, no-wrap
msgid "    $browser->assertDontSeeLink($linkText);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1176
#, markdown-text, no-wrap
msgid "<a name=\"assert-input-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1176
#, markdown-text, no-wrap
msgid "assertInputValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1179
#, markdown-text
msgid "Assert that the given input field has the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1181
#, markdown-text, no-wrap
msgid "    $browser->assertInputValue($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1183
#, markdown-text, no-wrap
msgid "<a name=\"assert-input-value-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1183
#, markdown-text, no-wrap
msgid "assertInputValueIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1186
#, markdown-text
msgid "Assert that the given input field does not have the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1188
#, markdown-text, no-wrap
msgid "    $browser->assertInputValueIsNot($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1190
#, markdown-text, no-wrap
msgid "<a name=\"assert-checked\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1190
#, markdown-text, no-wrap
msgid "assertChecked"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1193
#, markdown-text
msgid "Assert that the given checkbox is checked:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1195
#, markdown-text, no-wrap
msgid "    $browser->assertChecked($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1197
#, markdown-text, no-wrap
msgid "<a name=\"assert-not-checked\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1197
#, markdown-text, no-wrap
msgid "assertNotChecked"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1200
#, markdown-text
msgid "Assert that the given checkbox is not checked:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1202
#, markdown-text, no-wrap
msgid "    $browser->assertNotChecked($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1204
#, markdown-text, no-wrap
msgid "<a name=\"assert-radio-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1204
#, markdown-text, no-wrap
msgid "assertRadioSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1207
#, markdown-text
msgid "Assert that the given radio field is selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1209
#, markdown-text, no-wrap
msgid "    $browser->assertRadioSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1211
#, markdown-text, no-wrap
msgid "<a name=\"assert-radio-not-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1211
#, markdown-text, no-wrap
msgid "assertRadioNotSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1214
#, markdown-text
msgid "Assert that the given radio field is not selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1216
#, markdown-text, no-wrap
msgid "    $browser->assertRadioNotSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1218
#, markdown-text, no-wrap
msgid "<a name=\"assert-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1218
#, markdown-text, no-wrap
msgid "assertSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1221
#, markdown-text
msgid "Assert that the given dropdown has the given value selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1223
#, markdown-text, no-wrap
msgid "    $browser->assertSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1225
#, markdown-text, no-wrap
msgid "<a name=\"assert-not-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1225
#, markdown-text, no-wrap
msgid "assertNotSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1228
#, markdown-text
msgid "Assert that the given dropdown does not have the given value selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1230
#, markdown-text, no-wrap
msgid "    $browser->assertNotSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1232
#, markdown-text, no-wrap
msgid "<a name=\"assert-select-has-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1232
#, markdown-text, no-wrap
msgid "assertSelectHasOptions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1235
#, markdown-text
msgid "Assert that the given array of values are available to be selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1237
#, markdown-text, no-wrap
msgid "    $browser->assertSelectHasOptions($field, $values);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1239
#, markdown-text, no-wrap
msgid "<a name=\"assert-select-missing-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1239
#, markdown-text, no-wrap
msgid "assertSelectMissingOptions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1242
#, markdown-text
msgid "Assert that the given array of values are not available to be selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1244
#, markdown-text, no-wrap
msgid "    $browser->assertSelectMissingOptions($field, $values);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1246
#, markdown-text, no-wrap
msgid "<a name=\"assert-select-has-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1246
#, markdown-text, no-wrap
msgid "assertSelectHasOption"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1249
#, markdown-text
msgid "Assert that the given value is available to be selected on the given field:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1251
#, markdown-text, no-wrap
msgid "    $browser->assertSelectHasOption($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1253
#, markdown-text, no-wrap
msgid "<a name=\"assert-select-missing-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1253
#, markdown-text, no-wrap
msgid "assertSelectMissingOption"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1256
#, markdown-text
msgid "Assert that the given value is not available to be selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1258
#, markdown-text, no-wrap
msgid "    $browser->assertSelectMissingOption($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1260
#, markdown-text, no-wrap
msgid "<a name=\"assert-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1260
#, markdown-text, no-wrap
msgid "assertValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1263
#, markdown-text
msgid "Assert that the element matching the given selector has the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1265
#, markdown-text, no-wrap
msgid "    $browser->assertValue($selector, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1267
#, markdown-text, no-wrap
msgid "<a name=\"assert-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1267
#, markdown-text, no-wrap
msgid "assertAttribute"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1270
#, markdown-text
msgid ""
"Assert that the element matching the given selector has the given value in "
"the provided attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1272
#, markdown-text, no-wrap
msgid "    $browser->assertAttribute($selector, $attribute, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1274
#, markdown-text, no-wrap
msgid "<a name=\"assert-aria-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1274
#, markdown-text, no-wrap
msgid "assertAriaAttribute"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1277
#, markdown-text
msgid ""
"Assert that the element matching the given selector has the given value in "
"the provided aria attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1279
#, markdown-text, no-wrap
msgid "    $browser->assertAriaAttribute($selector, $attribute, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1281
#, markdown-text, no-wrap
msgid ""
"For example, given the markup `<button aria-label=\"Add\"></button>`, you "
"may assert against the `aria-label` attribute like so:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1283
#, markdown-text, no-wrap
msgid "    $browser->assertAriaAttribute('button', 'label', 'Add')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1285
#, markdown-text, no-wrap
msgid "<a name=\"assert-data-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1285
#, markdown-text, no-wrap
msgid "assertDataAttribute"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1288
#, markdown-text
msgid ""
"Assert that the element matching the given selector has the given value in "
"the provided data attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1290
#, markdown-text, no-wrap
msgid "    $browser->assertDataAttribute($selector, $attribute, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1292
#, markdown-text, no-wrap
msgid ""
"For example, given the markup `<tr id=\"row-1\" "
"data-content=\"attendees\"></tr>`, you may assert against the `data-label` "
"attribute like so:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1294
#, markdown-text, no-wrap
msgid "    $browser->assertDataAttribute('#row-1', 'content', 'attendees')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1296
#, markdown-text, no-wrap
msgid "<a name=\"assert-visible\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1296
#, markdown-text, no-wrap
msgid "assertVisible"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1299
#, markdown-text
msgid "Assert that the element matching the given selector is visible:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1301
#, markdown-text, no-wrap
msgid "    $browser->assertVisible($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1303
#, markdown-text, no-wrap
msgid "<a name=\"assert-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1303
#, markdown-text, no-wrap
msgid "assertPresent"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1306
#, markdown-text
msgid "Assert that the element matching the given selector is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1308
#, markdown-text, no-wrap
msgid "    $browser->assertPresent($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1310
#, markdown-text, no-wrap
msgid "<a name=\"assert-not-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1310
#, markdown-text, no-wrap
msgid "assertNotPresent"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1313
#, markdown-text
msgid ""
"Assert that the element matching the given selector is not present in the "
"source:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1315
#, markdown-text, no-wrap
msgid "    $browser->assertNotPresent($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1317
#, markdown-text, no-wrap
msgid "<a name=\"assert-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1317
#, markdown-text, no-wrap
msgid "assertMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1320
#, markdown-text
msgid "Assert that the element matching the given selector is not visible:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1322
#, markdown-text, no-wrap
msgid "    $browser->assertMissing($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1324
#, markdown-text, no-wrap
msgid "<a name=\"assert-dialog-opened\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1324
#, markdown-text, no-wrap
msgid "assertDialogOpened"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1327
#, markdown-text
msgid "Assert that a JavaScript dialog with the given message has been opened:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1329
#, markdown-text, no-wrap
msgid "    $browser->assertDialogOpened($message);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1331
#, markdown-text, no-wrap
msgid "<a name=\"assert-enabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1331
#, markdown-text, no-wrap
msgid "assertEnabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1334
#, markdown-text
msgid "Assert that the given field is enabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1336
#, markdown-text, no-wrap
msgid "    $browser->assertEnabled($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1338
#, markdown-text, no-wrap
msgid "<a name=\"assert-disabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1338
#, markdown-text, no-wrap
msgid "assertDisabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1341
#, markdown-text
msgid "Assert that the given field is disabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1343
#, markdown-text, no-wrap
msgid "    $browser->assertDisabled($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1345
#, markdown-text, no-wrap
msgid "<a name=\"assert-button-enabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1345
#, markdown-text, no-wrap
msgid "assertButtonEnabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1348
#, markdown-text
msgid "Assert that the given button is enabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1350
#, markdown-text, no-wrap
msgid "    $browser->assertButtonEnabled($button);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1352
#, markdown-text, no-wrap
msgid "<a name=\"assert-button-disabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1352
#, markdown-text, no-wrap
msgid "assertButtonDisabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1355
#, markdown-text
msgid "Assert that the given button is disabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1357
#, markdown-text, no-wrap
msgid "    $browser->assertButtonDisabled($button);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1359
#, markdown-text, no-wrap
msgid "<a name=\"assert-focused\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1359
#, markdown-text, no-wrap
msgid "assertFocused"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1362
#, markdown-text
msgid "Assert that the given field is focused:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1364
#, markdown-text, no-wrap
msgid "    $browser->assertFocused($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1366
#, markdown-text, no-wrap
msgid "<a name=\"assert-not-focused\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1366
#, markdown-text, no-wrap
msgid "assertNotFocused"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1369
#, markdown-text
msgid "Assert that the given field is not focused:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1371
#, markdown-text, no-wrap
msgid "    $browser->assertNotFocused($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1373
#, markdown-text, no-wrap
msgid "<a name=\"assert-authenticated\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1373
#, markdown-text, no-wrap
msgid "assertAuthenticated"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1376
#, markdown-text
msgid "Assert that the user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1378
#, markdown-text, no-wrap
msgid "    $browser->assertAuthenticated();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1380
#, markdown-text, no-wrap
msgid "<a name=\"assert-guest\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1380
#, markdown-text, no-wrap
msgid "assertGuest"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1383
#, markdown-text
msgid "Assert that the user is not authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1385
#, markdown-text, no-wrap
msgid "    $browser->assertGuest();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1387
#, markdown-text, no-wrap
msgid "<a name=\"assert-authenticated-as\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1387
#, markdown-text, no-wrap
msgid "assertAuthenticatedAs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1390
#, markdown-text
msgid "Assert that the user is authenticated as the given user:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1392
#, markdown-text, no-wrap
msgid "    $browser->assertAuthenticatedAs($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1394
#, markdown-text, no-wrap
msgid "<a name=\"assert-vue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1394
#, markdown-text, no-wrap
msgid "assertVue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1397
#, markdown-text
msgid ""
"Dusk even allows you to make assertions on the state of [Vue "
"component](https://vuejs.org) data. For example, imagine your application "
"contains the following Vue component:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1401
#, markdown-text, no-wrap
msgid "    <profile dusk=\"profile-component\"></profile>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1403
#, markdown-text, no-wrap
msgid "    // Component Definition...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1406
#, markdown-text, no-wrap
msgid ""
"    Vue.component('profile', {\n"
"        template: '<div>{{ user.name }}</div>',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1415
#, markdown-text, no-wrap
msgid ""
"        data: function () {\n"
"            return {\n"
"                user: {\n"
"                    name: 'Taylor'\n"
"                }\n"
"            };\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1417
#, markdown-text
msgid "You may assert on the state of the Vue component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1430
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * A basic Vue test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testVue()\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->assertVue('user.name', 'Taylor', "
"'@profile-component');\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1432
#, markdown-text, no-wrap
msgid "<a name=\"assert-vue-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1432
#, markdown-text, no-wrap
msgid "assertVueIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1435
#, markdown-text
msgid ""
"Assert that a given Vue component data property does not match the given "
"value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1437
#, markdown-text, no-wrap
msgid ""
"    $browser->assertVueIsNot($property, $value, $componentSelector = "
"null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1439
#, markdown-text, no-wrap
msgid "<a name=\"assert-vue-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1439
#, markdown-text, no-wrap
msgid "assertVueContains"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1442
#, markdown-text
msgid ""
"Assert that a given Vue component data property is an array and contains the "
"given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1444
#, markdown-text, no-wrap
msgid ""
"    $browser->assertVueContains($property, $value, $componentSelector = "
"null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1446
#, markdown-text, no-wrap
msgid "<a name=\"assert-vue-does-not-contain\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1446
#, markdown-text, no-wrap
msgid "assertVueDoesNotContain"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1449
#, markdown-text
msgid ""
"Assert that a given Vue component data property is an array and does not "
"contain the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1451
#, markdown-text, no-wrap
msgid ""
"    $browser->assertVueDoesNotContain($property, $value, $componentSelector "
"= null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1453
#, markdown-text, no-wrap
msgid "<a name=\"pages\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:1453
#, markdown-text, no-wrap
msgid "Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1456
#, markdown-text
msgid ""
"Sometimes, tests require several complicated actions to be performed in "
"sequence. This can make your tests harder to read and understand. Dusk Pages "
"allow you to define expressive actions that may then be performed on a given "
"page via a single method. Pages also allow you to define short-cuts to "
"common selectors for your application or for a single page."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1458
#, markdown-text, no-wrap
msgid "<a name=\"generating-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1458
#, markdown-text, no-wrap
msgid "Generating Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1461
#, markdown-text
msgid ""
"To generate a page object, execute the `dusk:page` Artisan command. All page "
"objects will be placed in your application's `tests/Browser/Pages` "
"directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1463
#, markdown-text, no-wrap
msgid "    php artisan dusk:page Login\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1465
#, markdown-text, no-wrap
msgid "<a name=\"configuring-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1465
#, markdown-text, no-wrap
msgid "Configuring Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1468
#, markdown-text
msgid ""
"By default, pages have three methods: `url`, `assert`, and `elements`. We "
"will discuss the `url` and `assert` methods now. The `elements` method will "
"be [discussed in more detail below](#shorthand-selectors)."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1470
#, markdown-text, no-wrap
msgid "<a name=\"the-url-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1470
#, markdown-text, no-wrap
msgid "The `url` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1473
#, markdown-text
msgid ""
"The `url` method should return the path of the URL that represents the "
"page. Dusk will use this URL when navigating to the page in the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1483
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Get the URL for the page.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function url()\n"
"    {\n"
"        return '/login';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1485
#, markdown-text, no-wrap
msgid "<a name=\"the-assert-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1485
#, markdown-text, no-wrap
msgid "The `assert` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1488
#, markdown-text
msgid ""
"The `assert` method may make any assertions necessary to verify that the "
"browser is actually on the given page. It is not actually necessary to place "
"anything within this method; however, you are free to make these assertions "
"if you wish. These assertions will be run automatically when navigating to "
"the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1498
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Assert that the browser is on the page.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function assert(Browser $browser)\n"
"    {\n"
"        $browser->assertPathIs($this->url());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1500
#, markdown-text, no-wrap
msgid "<a name=\"navigating-to-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1500
#, markdown-text, no-wrap
msgid "Navigating To Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1503
#, markdown-text
msgid ""
"Once a page has been defined, you may navigate to it using the `visit` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1505
#, markdown-text, no-wrap
msgid "    use Tests\\Browser\\Pages\\Login;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1507
#, markdown-text, no-wrap
msgid "    $browser->visit(new Login);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1509
#, markdown-text
msgid ""
"Sometimes you may already be on a given page and need to \"load\" the page's "
"selectors and methods into the current test context. This is common when "
"pressing a button and being redirected to a given page without explicitly "
"navigating to it. In this situation, you may use the `on` method to load the "
"page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1511
#, markdown-text, no-wrap
msgid "    use Tests\\Browser\\Pages\\CreatePlaylist;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1516
#, markdown-text, no-wrap
msgid ""
"    $browser->visit('/dashboard')\n"
"            ->clickLink('Create Playlist')\n"
"            ->on(new CreatePlaylist)\n"
"            ->assertSee('@create');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1518
#, markdown-text, no-wrap
msgid "<a name=\"shorthand-selectors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1518
#, markdown-text, no-wrap
msgid "Shorthand Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1521
#, markdown-text
msgid ""
"The `elements` method within page classes allows you to define quick, "
"easy-to-remember shortcuts for any CSS selector on your page. For example, "
"let's define a shortcut for the \"email\" input field of the application's "
"login page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1533
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Get the element shortcuts for the page.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function elements()\n"
"    {\n"
"        return [\n"
"            '@email' => 'input[name=email]',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1535
#, markdown-text
msgid ""
"Once the shortcut has been defined, you may use the shorthand selector "
"anywhere you would typically use a full CSS selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1537
#, markdown-text, no-wrap
msgid "    $browser->type('@email', 'taylor@laravel.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1539
#, markdown-text, no-wrap
msgid "<a name=\"global-shorthand-selectors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1539
#, markdown-text, no-wrap
msgid "Global Shorthand Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1542
#, markdown-text
msgid ""
"After installing Dusk, a base `Page` class will be placed in your "
"`tests/Browser/Pages` directory. This class contains a `siteElements` method "
"which may be used to define global shorthand selectors that should be "
"available on every page throughout your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1554
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Get the global element shortcuts for the site.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public static function siteElements()\n"
"    {\n"
"        return [\n"
"            '@element' => '#selector',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1556
#, markdown-text, no-wrap
msgid "<a name=\"page-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1556
#, markdown-text, no-wrap
msgid "Page Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1559
#, markdown-text
msgid ""
"In addition to the default methods defined on pages, you may define "
"additional methods which may be used throughout your tests. For example, "
"let's imagine we are building a music management application. A common "
"action for one page of the application might be to create a "
"playlist. Instead of re-writing the logic to create a playlist in each test, "
"you may define a `createPlaylist` method on a page class:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1563
#, markdown-text, no-wrap
msgid "    namespace Tests\\Browser\\Pages;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1565
#, markdown-text, no-wrap
msgid "    use Laravel\\Dusk\\Browser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1569
#, markdown-text, no-wrap
msgid ""
"    class Dashboard extends Page\n"
"    {\n"
"        // Other page methods...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1584
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Create a new playlist.\n"
"         *\n"
"         * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"         * @param  string  $name\n"
"         * @return void\n"
"         */\n"
"        public function createPlaylist(Browser $browser, $name)\n"
"        {\n"
"            $browser->type('name', $name)\n"
"                    ->check('share')\n"
"                    ->press('Create Playlist');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1586
#, markdown-text
msgid ""
"Once the method has been defined, you may use it within any test that "
"utilizes the page. The browser instance will automatically be passed as the "
"first argument to custom page methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1588
#, markdown-text, no-wrap
msgid "    use Tests\\Browser\\Pages\\Dashboard;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1592
#, markdown-text, no-wrap
msgid ""
"    $browser->visit(new Dashboard)\n"
"            ->createPlaylist('My Playlist')\n"
"            ->assertSee('My Playlist');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1594
#, markdown-text, no-wrap
msgid "<a name=\"components\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:1594
#, markdown-text, no-wrap
msgid "Components"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1597
#, markdown-text
msgid ""
"Components are similar to Duskâs âpage objectsâ, but are intended for "
"pieces of UI and functionality that are re-used throughout your application, "
"such as a navigation bar or notification window. As such, components are not "
"bound to specific URLs."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1599
#, markdown-text, no-wrap
msgid "<a name=\"generating-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1599
#, markdown-text, no-wrap
msgid "Generating Components"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1602
#, markdown-text
msgid ""
"To generate a component, execute the `dusk:component` Artisan command. New "
"components are placed in the `tests/Browser/Components` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1604
#, markdown-text, no-wrap
msgid "    php artisan dusk:component DatePicker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1606
#, markdown-text
msgid ""
"As shown above, a \"date picker\" is an example of a component that might "
"exist throughout your application on a variety of pages. It can become "
"cumbersome to manually write the browser automation logic to select a date "
"in dozens of tests throughout your test suite. Instead, we can define a Dusk "
"component to represent the date picker, allowing us to encapsulate that "
"logic within the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1610
#, markdown-text, no-wrap
msgid "    namespace Tests\\Browser\\Components;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1613
#, markdown-text, no-wrap
msgid ""
"    use Laravel\\Dusk\\Browser;\n"
"    use Laravel\\Dusk\\Component as BaseComponent;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1625
#, markdown-text, no-wrap
msgid ""
"    class DatePicker extends BaseComponent\n"
"    {\n"
"        /**\n"
"         * Get the root selector for the component.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function selector()\n"
"        {\n"
"            return '.date-picker';\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1636
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Assert that the browser page contains the component.\n"
"         *\n"
"         * @param  Browser  $browser\n"
"         * @return void\n"
"         */\n"
"        public function assert(Browser $browser)\n"
"        {\n"
"            $browser->assertVisible($this->selector());\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1651
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Get the element shortcuts for the component.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function elements()\n"
"        {\n"
"            return [\n"
"                '@date-field' => 'input.datepicker-input',\n"
"                '@year-list' => 'div > div.datepicker-years',\n"
"                '@month-list' => 'div > div.datepicker-months',\n"
"                '@day-list' => 'div > div.datepicker-days',\n"
"            ];\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1675
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Select the given date.\n"
"         *\n"
"         * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"         * @param  int  $year\n"
"         * @param  int  $month\n"
"         * @param  int  $day\n"
"         * @return void\n"
"         */\n"
"        public function selectDate(Browser $browser, $year, $month, $day)\n"
"        {\n"
"            $browser->click('@date-field')\n"
"                    ->within('@year-list', function ($browser) use ($year) "
"{\n"
"                        $browser->click($year);\n"
"                    })\n"
"                    ->within('@month-list', function ($browser) use ($month) "
"{\n"
"                        $browser->click($month);\n"
"                    })\n"
"                    ->within('@day-list', function ($browser) use ($day) {\n"
"                        $browser->click($day);\n"
"                    });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1677
#, markdown-text, no-wrap
msgid "<a name=\"using-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1677
#, markdown-text, no-wrap
msgid "Using Components"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1680
#, markdown-text
msgid ""
"Once the component has been defined, we can easily select a date within the "
"date picker from any test. And, if the logic necessary to select a date "
"changes, we only need to update the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1689
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"    use Laravel\\Dusk\\Browser;\n"
"    use Tests\\Browser\\Components\\DatePicker;\n"
"    use Tests\\DuskTestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1708
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        /**\n"
"         * A basic component test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function testBasicExample()\n"
"        {\n"
"            $this->browse(function (Browser $browser) {\n"
"                $browser->visit('/')\n"
"                        ->within(new DatePicker, function ($browser) {\n"
"                            $browser->selectDate(2019, 1, 30);\n"
"                        })\n"
"                        ->assertSee('January');\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1710
#, markdown-text, no-wrap
msgid "<a name=\"continuous-integration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:1710
#, markdown-text, no-wrap
msgid "Continuous Integration"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1713
#, markdown-text, no-wrap
msgid ""
"> {note} Most Dusk continuous integration configurations expect your Laravel "
"application to be served using the built-in PHP development server on port "
"8000. Therefore, before continuing, you should ensure that your continuous "
"integration environment has an `APP_URL` environment variable value of "
"`http://127.0.0.1:8000`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1715
#, markdown-text, no-wrap
msgid "<a name=\"running-tests-on-heroku-ci\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1715
#, markdown-text, no-wrap
msgid "Heroku CI"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1718
#, markdown-text
msgid ""
"To run Dusk tests on [Heroku "
"CI](https://www.heroku.com/continuous-integration), add the following Google "
"Chrome buildpack and scripts to your Heroku `app.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1733
#, markdown-text, no-wrap
msgid ""
"    {\n"
"      \"environments\": {\n"
"        \"test\": {\n"
"          \"buildpacks\": [\n"
"            { \"url\": \"heroku/php\" },\n"
"            { \"url\": "
"\"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n"
"          ],\n"
"          \"scripts\": {\n"
"            \"test-setup\": \"cp .env.testing .env\",\n"
"            \"test\": \"nohup bash -c "
"'./vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &' && nohup "
"bash -c 'php artisan serve > /dev/null 2>&1 &' && php artisan dusk\"\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1735
#, markdown-text, no-wrap
msgid "<a name=\"running-tests-on-travis-ci\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1735
#, markdown-text, no-wrap
msgid "Travis CI"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1738
#, markdown-text
msgid ""
"To run your Dusk tests on [Travis CI](https://travis-ci.org), use the "
"following `.travis.yml` configuration. Since Travis CI is not a graphical "
"environment, we will need to take some extra steps in order to launch a "
"Chrome browser. In addition, we will use `php artisan serve` to launch PHP's "
"built-in web server:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1740
#, markdown-text, no-wrap
msgid "    language: php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1743
#, markdown-text, no-wrap
msgid ""
"    php:\n"
"      - 7.3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1746
#, markdown-text, no-wrap
msgid ""
"    addons:\n"
"      chrome: stable\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1752
#, markdown-text, no-wrap
msgid ""
"    install:\n"
"      - cp .env.testing .env\n"
"      - travis_retry composer install --no-interaction --prefer-dist "
"--no-suggest\n"
"      - php artisan key:generate\n"
"      - php artisan dusk:chrome-driver\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1756
#, markdown-text, no-wrap
msgid ""
"    before_script:\n"
"      - google-chrome-stable --headless --disable-gpu "
"--remote-debugging-port=9222 http://localhost &\n"
"      - php artisan serve &\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1759
#, markdown-text, no-wrap
msgid ""
"    script:\n"
"      - php artisan dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1761
#, markdown-text, no-wrap
msgid "<a name=\"running-tests-on-github-actions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1761
#, markdown-text, no-wrap
msgid "GitHub Actions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1764
#, markdown-text
msgid ""
"If you are using [Github Actions](https://github.com/features/actions) to "
"run your Dusk tests, you may use the following configuration file as a "
"starting point. Like TravisCI, we will use the `php artisan serve` command "
"to launch PHP's built-in web server:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1768
#, markdown-text, no-wrap
msgid ""
"    name: CI\n"
"    on: [push]\n"
"    jobs:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1804
#, markdown-text, no-wrap
msgid ""
"      dusk-php:\n"
"        runs-on: ubuntu-latest\n"
"        steps:\n"
"          - uses: actions/checkout@v2\n"
"          - name: Prepare The Environment\n"
"            run: cp .env.example .env\n"
"          - name: Create Database\n"
"            run: |\n"
"              sudo systemctl start mysql\n"
"              mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE "
"'my-database' character set UTF8mb4 collate utf8mb4_bin;\"\n"
"          - name: Install Composer Dependencies\n"
"            run: composer install --no-progress --no-suggest --prefer-dist "
"--optimize-autoloader\n"
"          - name: Generate Application Key\n"
"            run: php artisan key:generate\n"
"          - name: Upgrade Chrome Driver\n"
"            run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome "
"--version | cut -d \" \" -f3 | cut -d \".\" -f1`\n"
"          - name: Start Chrome Driver\n"
"            run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"          - name: Run Laravel Server\n"
"            run: php artisan serve &\n"
"          - name: Run Dusk Tests\n"
"            env:\n"
"              APP_URL: \"http://127.0.0.1:8000\"\n"
"            run: php artisan dusk\n"
"          - name: Upload Screenshots\n"
"            if: failure()\n"
"            uses: actions/upload-artifact@v2\n"
"            with:\n"
"              name: screenshots\n"
"              path: tests/Browser/screenshots\n"
"          - name: Upload Console Logs\n"
"            if: failure()\n"
"            uses: actions/upload-artifact@v2\n"
"            with:\n"
"              name: console\n"
"              path: tests/Browser/console\n"
msgstr ""
