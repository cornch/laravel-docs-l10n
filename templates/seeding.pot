# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/seeding.md, line: 1
# File: docs/master/seeding.md, line: 1
#, no-wrap
msgid "Database: Seeding"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/seeding.md, line: 8
# File: docs/master/seeding.md, line: 9
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 8
#, no-wrap
msgid ""
"- [Writing Seeders](#writing-seeders)\n"
"    - [Using Model Factories](#using-model-factories)\n"
"    - [Calling Additional Seeders](#calling-additional-seeders)\n"
"- [Running Seeders](#running-seeders)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 10
# File: docs/master/seeding.md, line: 11
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/seeding.md, line: 10
# File: docs/master/seeding.md, line: 11
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 13
# File: docs/master/seeding.md, line: 14
msgid "Laravel includes the ability to seed your database with data using seed classes. All seed classes are stored in the `database/seeders` directory. By default, a `DatabaseSeeder` class is defined for you. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 15
# File: docs/master/seeding.md, line: 16
#, no-wrap
msgid "> {tip} [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled during database seeding.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 17
# File: docs/master/seeding.md, line: 18
#, no-wrap
msgid "<a name=\"writing-seeders\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/seeding.md, line: 17
# File: docs/master/seeding.md, line: 18
#, no-wrap
msgid "Writing Seeders"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 20
# File: docs/master/seeding.md, line: 21
msgid "To generate a seeder, execute the `make:seeder` [Artisan command](/docs/{{version}}/artisan). All seeders generated by the framework will be placed in the `database/seeders` directory:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 22
# File: docs/master/seeding.md, line: 23
#, no-wrap
msgid "    php artisan make:seeder UserSeeder\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 24
# File: docs/master/seeding.md, line: 25
msgid "A seeder class only contains one method by default: `run`. This method is called when the `db:seed` [Artisan command](/docs/{{version}}/artisan) is executed. Within the `run` method, you may insert data into your database however you wish. You may use the [query builder](/docs/{{version}}/queries) to manually insert data or you may use [Eloquent model factories](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 26
# File: docs/master/seeding.md, line: 27
msgid "As an example, let's modify the default `DatabaseSeeder` class and add a database insert statement to the `run` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 28
# File: docs/master/seeding.md, line: 29
# File: docs/master/seeding.md, line: 103
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 30
# File: docs/master/seeding.md, line: 31
# File: docs/master/seeding.md, line: 105
#, no-wrap
msgid "    namespace Database\\Seeders;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 35
# File: docs/master/seeding.md, line: 36
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Seeder;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 52
# File: docs/master/seeding.md, line: 53
#, no-wrap
msgid ""
"    class DatabaseSeeder extends Seeder\n"
"    {\n"
"        /**\n"
"         * Run the database seeders.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function run()\n"
"        {\n"
"            DB::table('users')->insert([\n"
"                'name' => Str::random(10),\n"
"                'email' => Str::random(10).'@gmail.com',\n"
"                'password' => Hash::make('password'),\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 54
# File: docs/master/seeding.md, line: 55
#, no-wrap
msgid "> {tip} You may type-hint any dependencies you need within the `run` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 56
# File: docs/master/seeding.md, line: 57
#, no-wrap
msgid "<a name=\"using-model-factories\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/seeding.md, line: 56
# File: docs/master/seeding.md, line: 57
#, no-wrap
msgid "Using Model Factories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 59
# File: docs/master/seeding.md, line: 60
msgid "Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use [model factories](/docs/{{version}}/database-testing#defining-model-factories) to conveniently generate large amounts of database records. First, review the [model factory documentation](/docs/{{version}}/database-testing#defining-model-factories) to learn how to define your factories."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 61
# File: docs/master/seeding.md, line: 62
msgid "For example, let's create 50 users that each has one related post:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 63
# File: docs/master/seeding.md, line: 64
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 76
# File: docs/master/seeding.md, line: 77
#, no-wrap
msgid ""
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        User::factory()\n"
"                ->count(50)\n"
"                ->hasPosts(1)\n"
"                ->create();\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 78
# File: docs/master/seeding.md, line: 79
#, no-wrap
msgid "<a name=\"calling-additional-seeders\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/seeding.md, line: 78
# File: docs/master/seeding.md, line: 79
#, no-wrap
msgid "Calling Additional Seeders"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 81
# File: docs/master/seeding.md, line: 82
msgid "Within the `DatabaseSeeder` class, you may use the `call` method to execute additional seed classes. Using the `call` method allows you to break up your database seeding into multiple files so that no single seeder class becomes too large. The `call` method accepts an array of seeder classes that should be executed:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 95
# File: docs/master/seeding.md, line: 96
#, no-wrap
msgid ""
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"            PostSeeder::class,\n"
"            CommentSeeder::class,\n"
"        ]);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 97
# File: docs/master/seeding.md, line: 127
#, no-wrap
msgid "<a name=\"running-seeders\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/seeding.md, line: 97
# File: docs/master/seeding.md, line: 127
#, no-wrap
msgid "Running Seeders"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 100
# File: docs/master/seeding.md, line: 130
msgid "You may execute the `db:seed` Artisan command to seed your database. By default, the `db:seed` command runs the `Database\\Seeders\\DatabaseSeeder` class, which may in turn invoke other seed classes. However, you may use the `--class` option to specify a specific seeder class to run individually:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 102
# File: docs/master/seeding.md, line: 132
#, no-wrap
msgid "    php artisan db:seed\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 104
# File: docs/master/seeding.md, line: 134
#, no-wrap
msgid "    php artisan db:seed --class=UserSeeder\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 106
# File: docs/master/seeding.md, line: 136
msgid "You may also seed your database using the `migrate:fresh` command in combination with the `--seed` option, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 108
# File: docs/master/seeding.md, line: 138
#, no-wrap
msgid "    php artisan migrate:fresh --seed\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 110
# File: docs/master/seeding.md, line: 140
#, no-wrap
msgid "<a name=\"forcing-seeding-production\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/seeding.md, line: 110
# File: docs/master/seeding.md, line: 140
#, no-wrap
msgid "Forcing Seeders To Run In Production"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 113
# File: docs/master/seeding.md, line: 143
msgid "Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed in the `production` environment. To force the seeders to run without a prompt, use the `--force` flag:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/seeding.md, line: 114
# File: docs/master/seeding.md, line: 144
#, no-wrap
msgid "    php artisan db:seed --force\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/seeding.md, line: 9
#, no-wrap
msgid ""
"- [Writing Seeders](#writing-seeders)\n"
"    - [Using Model Factories](#using-model-factories)\n"
"    - [Calling Additional Seeders](#calling-additional-seeders)\n"
"    - [Muting Model Events](#muting-model-events)\n"
"- [Running Seeders](#running-seeders)\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/seeding.md, line: 98
#, no-wrap
msgid "<a name=\"muting-model-events\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/master/seeding.md, line: 98
#, no-wrap
msgid "Muting Model Events"
msgstr ""
#
#. type: Plain text
# File: docs/master/seeding.md, line: 101
msgid "While running seeds, you may want to prevent models from dispatching events. You may achieve this using the `WithoutModelEvents` trait. When used, the `WithoutModelEvents` trait ensures no model events are dispatched, even if additional seed classes are executed via the `call` method:"
msgstr ""
#
#. type: Plain text
# File: docs/master/seeding.md, line: 108
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Seeder;\n"
"    use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/seeding.md, line: 112
#, no-wrap
msgid ""
"    class DatabaseSeeder extends Seeder\n"
"    {\n"
"        use WithoutModelEvents;\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/seeding.md, line: 125
#, no-wrap
msgid ""
"        /**\n"
"         * Run the database seeders.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function run()\n"
"        {\n"
"            $this->call([\n"
"                UserSeeder::class,\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""
