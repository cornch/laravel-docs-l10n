# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-29 13:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/testing.md, line: 1
# File: docs/master/testing.md, line: 1
#, no-wrap
msgid "Testing: Getting Started"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/testing.md, line: 8
# File: docs/master/testing.md, line: 9
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/testing.md, line: 8
# File: docs/master/testing.md, line: 9
msgid "[Environment](#environment)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/testing.md, line: 8
# File: docs/master/testing.md, line: 9
msgid "[Creating Tests](#creating-tests)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/testing.md, line: 8
# File: docs/master/testing.md, line: 9
msgid "[Running Tests](#running-tests)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/testing.md, line: 8
# File: docs/master/testing.md, line: 9
msgid "[Running Tests In Parallel](#running-tests-in-parallel)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 10
# File: docs/master/testing.md, line: 11
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/testing.md, line: 10
# File: docs/master/testing.md, line: 11
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 13
# File: docs/master/testing.md, line: 14
msgid "Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 15
# File: docs/master/testing.md, line: 16
msgid "By default, your application's `tests` directory contains two directories: `Feature` and `Unit`. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests within your \"Unit\" test directory do not boot your Laravel application and therefore are unable to access your application's database or other framework services."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 17
# File: docs/master/testing.md, line: 18
msgid "Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint. **Generally, most of your tests should be feature tests. These types of tests provide the most confidence that your system as a whole is functioning as intended.**"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 19
# File: docs/master/testing.md, line: 20
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/phpunit` or `php artisan test` commands to run your tests."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 21
# File: docs/master/testing.md, line: 22
#, no-wrap
msgid "<a name=\"environment\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/testing.md, line: 21
# File: docs/master/testing.md, line: 22
#, no-wrap
msgid "Environment"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 24
# File: docs/master/testing.md, line: 25
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver while testing, meaning no session or cache data will be persisted while testing."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 26
# File: docs/master/testing.md, line: 27
msgid "You are free to define other testing environment configuration values as necessary. The `testing` environment variables may be configured in your application's `phpunit.xml` file, but make sure to clear your configuration cache using the `config:clear` Artisan command before running your tests!"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 28
# File: docs/master/testing.md, line: 29
#, no-wrap
msgid "<a name=\"the-env-testing-environment-file\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/testing.md, line: 28
# File: docs/master/testing.md, line: 29
#, no-wrap
msgid "The `.env.testing` Environment File"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 31
# File: docs/master/testing.md, line: 32
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 33
# File: docs/master/testing.md, line: 34
#, no-wrap
msgid "<a name=\"the-creates-application-trait\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/testing.md, line: 33
# File: docs/master/testing.md, line: 34
#, no-wrap
msgid "The `CreatesApplication` Trait"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 36
# File: docs/master/testing.md, line: 37
msgid "Laravel includes a `CreatesApplication` trait that is applied to your application's base `TestCase` class. This trait contains a `createApplication` method that bootstraps the Laravel application before running your tests. It's important that you leave this trait at its original location as some features, such as Laravel's parallel testing feature, depend on it."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 38
# File: docs/master/testing.md, line: 39
#, no-wrap
msgid "<a name=\"creating-tests\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/testing.md, line: 38
# File: docs/master/testing.md, line: 39
#, no-wrap
msgid "Creating Tests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 41
# File: docs/master/testing.md, line: 42
msgid "To create a new test case, use the `make:test` Artisan command. By default, tests will be placed in the `tests/Feature` directory:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 43
# File: docs/master/testing.md, line: 44
#, no-wrap
msgid "    php artisan make:test UserTest\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 45
# File: docs/master/testing.md, line: 46
msgid "If you would like to create a test within the `tests/Unit` directory, you may use the `--unit` option when executing the `make:test` command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 47
# File: docs/master/testing.md, line: 48
#, no-wrap
msgid "    php artisan make:test UserTest --unit\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 49
# File: docs/master/testing.md, line: 50
msgid "If you would like to create a [Pest PHP](https://pestphp.com) test, you may provide the `--pest` option to the `make:test` command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 52
# File: docs/master/testing.md, line: 53
#, no-wrap
msgid ""
"    php artisan make:test UserTest --pest\n"
"    php artisan make:test UserTest --unit --pest\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 54
# File: docs/master/testing.md, line: 55
#, no-wrap
msgid "> {tip} Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 56
# File: docs/master/testing.md, line: 57
msgid "Once the test has been generated, you may define test methods as you normally would using [PHPUnit](https://phpunit.de). To run your tests, execute the `vendor/bin/phpunit` or `php artisan test` command from your terminal:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 58
# File: docs/8.x/testing.md, line: 124
# File: docs/master/testing.md, line: 59
# File: docs/master/testing.md, line: 125
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 60
# File: docs/master/testing.md, line: 61
#, no-wrap
msgid "    namespace Tests\\Unit;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 62
# File: docs/master/testing.md, line: 63
#, no-wrap
msgid "    use PHPUnit\\Framework\\TestCase;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 75
# File: docs/master/testing.md, line: 76
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_test()\n"
"        {\n"
"            $this->assertTrue(true);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 77
# File: docs/master/testing.md, line: 78
#, no-wrap
msgid "> {note} If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 79
# File: docs/master/testing.md, line: 80
#, no-wrap
msgid "<a name=\"running-tests\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/testing.md, line: 79
# File: docs/master/testing.md, line: 80
#, no-wrap
msgid "Running Tests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 82
# File: docs/master/testing.md, line: 83
msgid "As mentioned previously, once you've written tests, you may run them using `phpunit`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 84
# File: docs/master/testing.md, line: 85
#, no-wrap
msgid "    ./vendor/bin/phpunit\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 86
# File: docs/master/testing.md, line: 87
msgid "In addition to the `phpunit` command, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 88
# File: docs/master/testing.md, line: 89
#, no-wrap
msgid "    php artisan test\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 90
# File: docs/master/testing.md, line: 91
msgid "Any arguments that can be passed to the `phpunit` command may also be passed to the Artisan `test` command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 92
# File: docs/master/testing.md, line: 93
#, no-wrap
msgid "    php artisan test --testsuite=Feature --stop-on-failure\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 95
# File: docs/master/testing.md, line: 96
#, no-wrap
msgid "<a name=\"running-tests-in-parallel\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/testing.md, line: 95
# File: docs/master/testing.md, line: 96
#, no-wrap
msgid "Running Tests In Parallel"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 98
# File: docs/master/testing.md, line: 99
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, ensure your application depends on version `^5.3` or greater of the `nunomaduro/collision` package. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 100
# File: docs/master/testing.md, line: 101
#, no-wrap
msgid "    php artisan test --parallel\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 102
# File: docs/master/testing.md, line: 103
msgid "By default, Laravel will create as many processes as there are available CPU cores on your machine. However, you may adjust the number of processes using the `--processes` option:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 104
# File: docs/master/testing.md, line: 105
#, no-wrap
msgid "    php artisan test --parallel --processes=4\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 106
# File: docs/master/testing.md, line: 107
#, no-wrap
msgid "> {note} When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 108
# File: docs/master/testing.md, line: 109
#, no-wrap
msgid "<a name=\"parallel-testing-and-databases\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/testing.md, line: 108
# File: docs/master/testing.md, line: 109
#, no-wrap
msgid "Parallel Testing & Databases"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 111
# File: docs/master/testing.md, line: 112
msgid "Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 113
# File: docs/master/testing.md, line: 114
msgid "By default, test databases persist between calls to the `test` Artisan command so that they can be used again by subsequent `test` invocations. However, you may re-create them using the `--recreate-databases` option:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 115
# File: docs/master/testing.md, line: 116
#, no-wrap
msgid "    php artisan test --parallel --recreate-databases\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 117
# File: docs/master/testing.md, line: 118
#, no-wrap
msgid "<a name=\"parallel-testing-hooks\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/testing.md, line: 117
# File: docs/master/testing.md, line: 118
#, no-wrap
msgid "Parallel Testing Hooks"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 120
# File: docs/master/testing.md, line: 121
msgid "Occasionally, you may need to prepare certain resources used by your application's tests so they may be safely used by multiple test processes."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 122
# File: docs/master/testing.md, line: 123
msgid "Using the `ParallelTesting` facade, you may specify code to be executed on the `setUp` and `tearDown` of a process or test case. The given closures receive the `$token` and `$testCase` variables that contain the process token and the current test case, respectively:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 126
# File: docs/master/testing.md, line: 127
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 130
# File: docs/master/testing.md, line: 131
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Artisan;\n"
"    use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 143
# File: docs/master/testing.md, line: 144
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            ParallelTesting::setUpProcess(function ($token) {\n"
"                // ...\n"
"            });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 147
# File: docs/master/testing.md, line: 148
#, no-wrap
msgid ""
"            ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"                // ...\n"
"            });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 152
# File: docs/master/testing.md, line: 153
#, no-wrap
msgid ""
"            // Executed when a test database is created...\n"
"            ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"                Artisan::call('db:seed');\n"
"            });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 156
# File: docs/master/testing.md, line: 157
#, no-wrap
msgid ""
"            ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"                // ...\n"
"            });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 162
# File: docs/master/testing.md, line: 163
#, no-wrap
msgid ""
"            ParallelTesting::tearDownProcess(function ($token) {\n"
"                // ...\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 164
# File: docs/master/testing.md, line: 165
#, no-wrap
msgid "<a name=\"accessing-the-parallel-testing-token\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/testing.md, line: 164
# File: docs/master/testing.md, line: 165
#, no-wrap
msgid "Accessing The Parallel Testing Token"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 167
# File: docs/master/testing.md, line: 168
msgid "If you would like to access to current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/testing.md, line: 168
# File: docs/master/testing.md, line: 170
#, no-wrap
msgid "    $token = ParallelTesting::token();\n"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/master/testing.md, line: 9
msgid "[Reporting Test Coverage](#reporting-test-coverage)"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 172
#, no-wrap
msgid "<a name=\"reporting-test-coverage\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/master/testing.md, line: 172
#, no-wrap
msgid "Reporting Test Coverage"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 175
#, no-wrap
msgid "> {note} This feature requires [Xdebug](https://xdebug.org) or [PCOV](https://pecl.php.net/package/pcov).\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 177
msgid "When running your application tests, you may want to determine whether your test cases are actually covering the application code and how much application code is used when running your tests. To accomplish this, you may provide the `--coverage` option when invoking the `test` command:"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 179
#, no-wrap
msgid "    php artisan test --coverage\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 181
#, no-wrap
msgid "<a name=\"enforcing-a-minimum-coverage-threshold\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/master/testing.md, line: 181
#, no-wrap
msgid "Enforcing A Minimum Coverage Threshold"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 184
msgid "You may use the `--min` option to define a minimum test coverage threshold for your application. The test suite will fail if this threshold is not met:"
msgstr ""
#
#. type: Plain text
# File: docs/master/testing.md, line: 185
#, no-wrap
msgid "    php artisan test --coverage --min=80.3\n"
msgstr ""
