msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/dusk.pot\n"
"X-Crowdin-File-ID: 49\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-04-18 09:23\n"

#: docs/8.x/dusk.md:block 1 (header)
msgid "Laravel Dusk"
msgstr "Laravel Dusk"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr "[安裝](#installation)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Managing ChromeDriver Installations](#managing-chromedriver-installations)"
msgstr "[安裝 ChromeDriver](#managing-chromedriver-installations)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Using Other Browsers](#using-other-browsers)"
msgstr "[使用其他瀏覽器](#using-other-browsers)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Getting Started](#getting-started)"
msgstr "[入門](#getting-started)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Generating Tests](#generating-tests)"
msgstr "[產生測試](#generating-tests)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Database Migrations](#migrations)"
msgstr "[資料庫 Migration](#migrations)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Running Tests](#running-tests)"
msgstr "[執行測試](#running-tests)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Environment Handling](#environment-handling)"
msgstr "[處理環境](#environment-handling)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Browser Basics](#browser-basics)"
msgstr "[「Browser」基礎](#browser-basics)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Creating Browsers](#creating-browsers)"
msgstr "[建立 Browser](#creating-browsers)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Navigation](#navigation)"
msgstr "[瀏覽](#navigation)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Resizing Browser Windows](#resizing-browser-windows)"
msgstr "[縮放 Browser 視窗](#resizing-browser-windows)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Browser Macros](#browser-macros)"
msgstr "[Browser Macro](#browser-macros)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Authentication](#authentication)"
msgstr "[身份認證](#authentication)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Cookies](#cookies)"
msgstr "[Cookie](#cookies)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Executing JavaScript](#executing-javascript)"
msgstr "[執行 JavaScript](#executing-javascript)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Taking A Screenshot](#taking-a-screenshot)"
msgstr "[截圖](#taking-a-screenshot)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Storing Console Output To Disk](#storing-console-output-to-disk)"
msgstr "[將主控台 (Console) 輸出保存至 Disk](#storing-console-output-to-disk)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Storing Page Source To Disk](#storing-page-source-to-disk)"
msgstr "[將頁面原始碼保存至 Disk](#storing-page-source-to-disk)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Interacting With Elements](#interacting-with-elements)"
msgstr "[與元素互動](#interacting-with-elements)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Dusk Selectors](#dusk-selectors)"
msgstr "[Dusk 選擇器](#dusk-selectors)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Text, Values, & Attributes](#text-values-and-attributes)"
msgstr "[文字、值、屬性](#text-values-and-attributes)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Interacting With Forms](#interacting-with-forms)"
msgstr "[處理表單](#interacting-with-forms)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Attaching Files](#attaching-files)"
msgstr "[附加檔案](#attaching-files)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Pressing Buttons](#pressing-buttons)"
msgstr "[按下按鈕](#pressing-buttons)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Clicking Links](#clicking-links)"
msgstr "[點擊連結](#clicking-links)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Using The Keyboard](#using-the-keyboard)"
msgstr "[使用鍵盤](#using-the-keyboard)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Using The Mouse](#using-the-mouse)"
msgstr "[使用滑鼠](#using-the-mouse)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[JavaScript Dialogs](#javascript-dialogs)"
msgstr "[JavaScript 對話方塊](#javascript-dialogs)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Scoping Selectors](#scoping-selectors)"
msgstr "[限制範圍的選擇器](#scoping-selectors)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Waiting For Elements](#waiting-for-elements)"
msgstr "[等待元素](#waiting-for-elements)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Scrolling An Element Into View](#scrolling-an-element-into-view)"
msgstr "[滾動頁面以將元素放入顯式區域](#scrolling-an-element-into-view)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Available Assertions](#available-assertions)"
msgstr "[可用的 Assertion](#available-assertions)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Pages](#pages)"
msgstr "[Page](#pages)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Generating Pages](#generating-pages)"
msgstr "[產生 Page](#generating-pages)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Configuring Pages](#configuring-pages)"
msgstr "[設定 Page](#configuring-pages)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Navigating To Pages](#navigating-to-pages)"
msgstr "[前往 Page](#navigating-to-pages)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Shorthand Selectors](#shorthand-selectors)"
msgstr "[選擇器簡寫](#shorthand-selectors)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Page Methods](#page-methods)"
msgstr "[Page 方法](#page-methods)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Components](#components)"
msgstr "[Component (元件)](#components)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Generating Components](#generating-components)"
msgstr "[產生 Component](#generating-components)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Using Components](#using-components)"
msgstr "[使用 Component](#using-components)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Continuous Integration](#continuous-integration)"
msgstr "[持續整合 (Continuous Integration)](#continuous-integration)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Heroku CI](#running-tests-on-heroku-ci)"
msgstr "[Heroku CI](#running-tests-on-heroku-ci)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Travis CI](#running-tests-on-travis-ci)"
msgstr "[Travis CI](#running-tests-on-travis-ci)"

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[GitHub Actions](#running-tests-on-github-actions)"
msgstr "[GitHub Actions](#running-tests-on-github-actions)"

#: docs/8.x/dusk.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/dusk.md:block 5 (paragraph)
msgid "[Laravel Dusk](https://github.com/laravel/dusk) provides an expressive, easy-to-use browser automation and testing API. By default, Dusk does not require you to install JDK or Selenium on your local computer. Instead, Dusk uses a standalone [ChromeDriver](https://sites.google.com/chromium.org/driver) installation. However, you are free to utilize any other Selenium compatible driver you wish."
msgstr "[Laravel Dusk](https://github.com/laravel/dusk) 提供了一個豐富、簡單易用的瀏覽器自動化與測試 API。預設情況下，使用 Dusk 不需要額外在本機電腦上安裝 JDK 或 Slenium。Dusk 會使用獨立的 [ChromeDriver](https://sites.google.com/chromium.org/driver) 安裝。不過，也可以自由使用其他 Selenium 相容的驅動器。"

#: docs/8.x/dusk.md:block 7 (header)
msgid "Installation"
msgstr "安裝"

#: docs/8.x/dusk.md:block 8 (paragraph)
msgid "To get started, you should install [Google Chrome](https://www.google.com/chrome) and add the `laravel/dusk` Composer dependency to your project:"
msgstr "要開始使用 Dusk，請先安裝 [Google Chrome](https://www.google.com/chrome)，並將 `laravel/dusk` Composer 相依性套件加到專案中："

#: docs/8.x/dusk.md:block 9 (code)
msgid "composer require --dev laravel/dusk\n"
msgstr "composer require --dev laravel/dusk\n"

#: docs/8.x/dusk.md:block 10 (quote)
msgid "{note} If you are manually registering Dusk's service provider, you should **never** register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application."
msgstr "{note} 若要手動註冊 Dusk 的 Service Provider，請**不要**在正式環境內加上該 Provider，因為這麼會讓所有人都能任意登入任何使用者。"

#: docs/8.x/dusk.md:block 11 (paragraph)
msgid "After installing the Dusk package, execute the `dusk:install` Artisan command. The `dusk:install` command will create a `tests/Browser` directory and an example Dusk test:"
msgstr "安裝好 Dusk 套件後，請執行 `dusk:install` Artisan 指令。`dusk:install` 指令會建立 `tests/Browser` 資料夾，以及一個 Dusk 範例測試："

#: docs/8.x/dusk.md:block 12 (code)
msgid "php artisan dusk:install\n"
msgstr "php artisan dusk:install\n"

#: docs/8.x/dusk.md:block 13 (paragraph)
msgid "Next, set the `APP_URL` environment variable in your application's `.env` file. This value should match the URL you use to access your application in a browser."
msgstr "接著，請在專案的 `.env` 檔內設定 `APP_URL` 環境變數。該變數應符合要在瀏覽器內存取專案的 URL。"

#: docs/8.x/dusk.md:block 14 (quote)
msgid "{tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please also consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr "{tip} 若使用 [Laravel Sail](/docs/{{version}}/sail) 來管理本機開發環境，也請一併參考 Sail 說明文件中有關[設定與執行 Dusk 測試](/docs/{{version}}/sail#laravel-dusk)的部分。"

#: docs/8.x/dusk.md:block 16 (header)
msgid "Managing ChromeDriver Installations"
msgstr "管理 ChromeDriver 安裝"

#: docs/8.x/dusk.md:block 17 (paragraph)
msgid "If you would like to install a different version of ChromeDriver than what is included with Laravel Dusk, you may use the `dusk:chrome-driver` command:"
msgstr "若想安裝與 Laravel Dusk 附帶的 ChromeDriver 不同的版本，可使用 `dusk:chrome-driver` 指令："

#: docs/8.x/dusk.md:block 18 (code)
msgid "# Install the latest version of ChromeDriver for your OS...\n"
"php artisan dusk:chrome-driver\n\n"
"# Install a given version of ChromeDriver for your OS...\n"
"php artisan dusk:chrome-driver 86\n\n"
"# Install a given version of ChromeDriver for all supported OSs...\n"
"php artisan dusk:chrome-driver --all\n\n"
"# Install the version of ChromeDriver that matches the detected version of Chrome / Chromium for your OS...\n"
"php artisan dusk:chrome-driver --detect\n"
msgstr "# 為你的作業系統安裝最新版的 ChromeDriver...\n"
"php artisan dusk:chrome-driver\n\n"
"# 為你的作業系統安裝給定版本的 ChromeDriver...\n"
"php artisan dusk:chrome-driver 86\n\n"
"# 為所有支援的作業系統安裝最新版的 ChromeDriver...\n"
"php artisan dusk:chrome-driver --all\n\n"
"# 為你的作業系統安裝符合偵測到的 Chrome / Chromium 版本之 ChromeDriver 版本...\n"
"php artisan dusk:chrome-driver --detect\n"

#: docs/8.x/dusk.md:block 19 (quote)
msgid "{note} Dusk requires the `chromedriver` binaries to be executable. If you're having problems running Dusk, you should ensure the binaries are executable using the following command: `chmod -R 0755 vendor/laravel/dusk/bin/`."
msgstr "{note} 要使用 Dusk，`chromedriver` 二進位執行檔必須可執行。若無法執行 Dusk，請通過下列指令確保該二進位執行檔可執行：`chmod -R 0755 vendor/laravel/dusk/bin/`。"

#: docs/8.x/dusk.md:block 21 (header)
msgid "Using Other Browsers"
msgstr "使用其他瀏覽器"

#: docs/8.x/dusk.md:block 22 (paragraph)
msgid "By default, Dusk uses Google Chrome and a standalone [ChromeDriver](https://sites.google.com/chromium.org/driver) installation to run your browser tests. However, you may start your own Selenium server and run your tests against any browser you wish."
msgstr "預設情況下，Dusk 會使用 Google Chrome 以及一個獨立的 [ChromeDriver](https://sites.google.com/chromium.org/driver) 安裝來執行瀏覽器測試。不過，可以自行開啟 Selenium 伺服器，並使用任何瀏覽器來執行測試。"

#: docs/8.x/dusk.md:block 23 (paragraph)
msgid "To get started, open your `tests/DuskTestCase.php` file, which is the base Dusk test case for your application. Within this file, you can remove the call to the `startChromeDriver` method. This will stop Dusk from automatically starting the ChromeDriver:"
msgstr "要開始使用其他瀏覽器，請開啟 `tests/DuskTestCase.php` 檔。這個檔案是專案中所有 Dusk 測試的基礎測試類別。若在該檔案內移除 `startChromeDriver` 方法的呼叫，就可以讓 Dusk 不要自動開啟 ChromeDriver："

#: docs/8.x/dusk.md:block 24 (code)
msgid "/**\n"
" * Prepare for Dusk test execution.\n"
" *\n"
" * @beforeClass\n"
" * @return void\n"
" */\n"
"public static function prepare()\n"
"{\n"
"    // static::startChromeDriver();\n"
"}\n"
msgstr "/**\n"
" * Prepare for Dusk test execution.\n"
" *\n"
" * @beforeClass\n"
" * @return void\n"
" */\n"
"public static function prepare()\n"
"{\n"
"    // static::startChromeDriver();\n"
"}\n"

#: docs/8.x/dusk.md:block 25 (paragraph)
msgid "Next, you may modify the `driver` method to connect to the URL and port of your choice. In addition, you may modify the \"desired capabilities\" that should be passed to the WebDriver:"
msgstr "接著，可以修改 `driver` 方法來連先到所選的 URL 與連結埠。另外，也可以修改應傳給 WebDriver 的「Desired Capabilities (所需功能)」："

#: docs/8.x/dusk.md:block 26 (code)
msgid "/**\n"
" * Create the RemoteWebDriver instance.\n"
" *\n"
" * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
" */\n"
"protected function driver()\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n"
"    );\n"
"}\n"
msgstr "/**\n"
" * Create the RemoteWebDriver instance.\n"
" *\n"
" * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
" */\n"
"protected function driver()\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n"
"    );\n"
"}\n"

#: docs/8.x/dusk.md:block 28 (header)
msgid "Getting Started"
msgstr "入門"

#: docs/8.x/dusk.md:block 30 (header)
msgid "Generating Tests"
msgstr "產生測試"

#: docs/8.x/dusk.md:block 31 (paragraph)
msgid "To generate a Dusk test, use the `dusk:make` Artisan command. The generated test will be placed in the `tests/Browser` directory:"
msgstr "若要產生 Dusk 測試，請使用 `dusk:make` Artisan 指令。產生的測試將放置於 `tests/Browser` 目錄內："

#: docs/8.x/dusk.md:block 32 (code)
msgid "php artisan dusk:make LoginTest\n"
msgstr "php artisan dusk:make LoginTest\n"

#: docs/8.x/dusk.md:block 34 (header)
msgid "Database Migrations"
msgstr "資料庫 Migration"

#: docs/8.x/dusk.md:block 35 (paragraph)
msgid "Most of the tests you write will interact with pages that retrieve data from your application's database; however, your Dusk tests should never use the `RefreshDatabase `trait. The `RefreshDatabase` trait leverages database transactions which will not be applicable or available across HTTP requests. Instead, use the `DatabaseMigrations` trait, which re-migrates the database for each test:"
msgstr "我們所撰寫的大部分的測試所互動的頁面都會從專案的資料庫內取得資料。不過，Dusk 測試不應使用 `RefreshDatabase` Trait。`RefreshDatabase` Trait 使用資料庫 Transaction，會讓資料無法在不同 HTTP 請求間共用。請改用 `DatabaseMigrations` Trait，為每個測試重新 Migrate 資料庫："

#: docs/8.x/dusk.md:block 36 (code)
msgid "<?php\n\n"
"namespace Tests\\Browser;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests\\Browser;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"}\n"

#: docs/8.x/dusk.md:block 37 (quote)
msgid "{note} SQLite in-memory databases may not be used when executing Dusk tests. Since the browser executes within its own process, it will not be able to access the in-memory databases of other processes."
msgstr "{note} 在記憶體內的 SQLite 資料庫無法在執行 Dusk 測試時使用。由於瀏覽器會在自己的處理程序內執行，因此將無法存取其他處理程序中在記憶體內的資料庫。"

#: docs/8.x/dusk.md:block 39 (header)
msgid "Running Tests"
msgstr "執行測試"

#: docs/8.x/dusk.md:block 40 (paragraph)
msgid "To run your browser tests, execute the `dusk` Artisan command:"
msgstr "若要執行瀏覽器測試，請執行 `dusk` Artisan 指令："

#: docs/8.x/dusk.md:block 41 (code)
msgid "php artisan dusk\n"
msgstr "php artisan dusk\n"

#: docs/8.x/dusk.md:block 42 (paragraph)
msgid "If you had test failures the last time you ran the `dusk` command, you may save time by re-running the failing tests first using the `dusk:fails` command:"
msgstr "若在上次執行 `dusk` 指令時有測試失敗了，則可以通過 `dusk:fails` 指令來先重新執行失敗的測試以節省時間："

#: docs/8.x/dusk.md:block 43 (code)
msgid "php artisan dusk:fails\n"
msgstr "php artisan dusk:fails\n"

#: docs/8.x/dusk.md:block 44 (paragraph)
msgid "The `dusk` command accepts any argument that is normally accepted by the PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group):"
msgstr "`dusk` 指令接受所有一般 PHPUnit 測試執行程式所接受的引數，如可以只執行特定[群組](https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group)內的測試："

#: docs/8.x/dusk.md:block 45 (code)
msgid "php artisan dusk --group=foo\n"
msgstr "php artisan dusk --group=foo\n"

#: docs/8.x/dusk.md:block 46 (quote)
msgid "{tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr "{tip} 若使用 [Laravel Sail](/docs/{{version}}/sail) 來管理本機開發環境，請參考 Sail 說明文件中有關[設定與執行 Dusk 測試](/docs/{{version}}/sail#laravel-dusk)的部分。"

#: docs/8.x/dusk.md:block 48 (header)
msgid "Manually Starting ChromeDriver"
msgstr "手動啟動 ChromeDriver"

#: docs/8.x/dusk.md:block 49 (paragraph)
msgid "By default, Dusk will automatically attempt to start ChromeDriver. If this does not work for your particular system, you may manually start ChromeDriver before running the `dusk` command. If you choose to start ChromeDriver manually, you should comment out the following line of your `tests/DuskTestCase.php` file:"
msgstr "預設情況下，Dusk 會自動嘗試開啟 ChromeDriver。若你所使用的系統無法自動開啟 ChromeDriver，則可以在執行 `dusk` 指令前手動啟動 ChromeDriver。若想手動啟動 ChromeDriver，則應先在 `test/DuskTestCase.php` 檔中將下列部分註解掉："

#: docs/8.x/dusk.md:block 51 (paragraph)
msgid "In addition, if you start ChromeDriver on a port other than 9515, you should modify the `driver` method of the same class to reflect the correct port:"
msgstr "此外，若在 9515 連結埠以外的其他連結埠上開啟 ChromeDriver，則應在相同類別內修改 `driver` 方法以修改為相應的連結埠："

#: docs/8.x/dusk.md:block 52 (code)
msgid "/**\n"
" * Create the RemoteWebDriver instance.\n"
" *\n"
" * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
" */\n"
"protected function driver()\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:9515', DesiredCapabilities::chrome()\n"
"    );\n"
"}\n"
msgstr "/**\n"
" * Create the RemoteWebDriver instance.\n"
" *\n"
" * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
" */\n"
"protected function driver()\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:9515', DesiredCapabilities::chrome()\n"
"    );\n"
"}\n"

#: docs/8.x/dusk.md:block 54 (header)
msgid "Environment Handling"
msgstr "處理環境"

#: docs/8.x/dusk.md:block 55 (paragraph)
msgid "To force Dusk to use its own environment file when running tests, create a `.env.dusk.{environment}` file in the root of your project. For example, if you will be initiating the `dusk` command from your `local` environment, you should create a `.env.dusk.local` file."
msgstr "若要在執行測試時強制讓 Dusk 使用自己的環境檔，請在專案根目錄下建立一個 `.env.dusk.{environment}` 檔案。舉例來說，若會在 `local` 環境下執行 `dusk`，請建立 `.env.dusk.local` 檔案。"

#: docs/8.x/dusk.md:block 56 (paragraph)
msgid "When running tests, Dusk will back-up your `.env` file and rename your Dusk environment to `.env`. Once the tests have completed, your `.env` file will be restored."
msgstr "執行測試時，Dusk 會備份 `.env` 檔，並將 Dusk 環境檔重新命名為 `.env`。測試完成後，會恢復原本的 `.env` 檔。"

#: docs/8.x/dusk.md:block 58 (header)
msgid "Browser Basics"
msgstr "「瀏覽器」基礎"

#: docs/8.x/dusk.md:block 60 (header)
msgid "Creating Browsers"
msgstr "建立瀏覽器"

#: docs/8.x/dusk.md:block 61 (paragraph)
msgid "To get started, let's write a test that verifies we can log into our application. After generating a test, we can modify it to navigate to the login page, enter some credentials, and click the \"Login\" button. To create a browser instance, you may call the `browse` method from within your Dusk test:"
msgstr "要開始使用瀏覽器，我們先來建立一個用來認證能否登入網站的測試。產生測試後，我們就可以修改該測試、前往登入頁、輸入帳號密碼、並點擊「登入」按鈕。要建立瀏覽器實體，可在 Dusk 測試內呼叫 `browser` 方法："

#: docs/8.x/dusk.md:block 62 (code)
msgid "<?php\n\n"
"namespace Tests\\Browser;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n\n"
"    /**\n"
"     * A basic browser test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_example()\n"
"    {\n"
"        $user = User::factory()->create([\n"
"            'email' => 'taylor@laravel.com',\n"
"        ]);\n\n"
"        $this->browse(function ($browser) use ($user) {\n"
"            $browser->visit('/login')\n"
"                    ->type('email', $user->email)\n"
"                    ->type('password', 'password')\n"
"                    ->press('Login')\n"
"                    ->assertPathIs('/home');\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests\\Browser;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n\n"
"    /**\n"
"     * A basic browser test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_example()\n"
"    {\n"
"        $user = User::factory()->create([\n"
"            'email' => 'taylor@laravel.com',\n"
"        ]);\n\n"
"        $this->browse(function ($browser) use ($user) {\n"
"            $browser->visit('/login')\n"
"                    ->type('email', $user->email)\n"
"                    ->type('password', 'password')\n"
"                    ->press('Login')\n"
"                    ->assertPathIs('/home');\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/dusk.md:block 63 (paragraph)
msgid "As you can see in the example above, the `browse` method accepts a closure. A browser instance will automatically be passed to this closure by Dusk and is the main object used to interact with and make assertions against your application."
msgstr "如上所見，`browser` 方法接受一個閉包。Dusk 會自動將瀏覽器實體傳入該閉包內，瀏覽器實體是用來與網站互動以及用來進行 Assertion 的主要物件。"

#: docs/8.x/dusk.md:block 65 (header)
msgid "Creating Multiple Browsers"
msgstr "建立多個瀏覽器"

#: docs/8.x/dusk.md:block 66 (paragraph)
msgid "Sometimes you may need multiple browsers in order to properly carry out a test. For example, multiple browsers may be needed to test a chat screen that interacts with websockets. To create multiple browsers, simply add more browser arguments to the signature of the closure given to the `browse` method:"
msgstr "有時候，我們需要建立多個瀏覽器來正確地進行測試。舉例來說，在測試與 WebSocket 互動的聊天畫面時可能會需要多個瀏覽器。若要建立多個瀏覽器，只需要將多個瀏覽器引數加到提供給 `browser` 方法的閉包上即可："

#: docs/8.x/dusk.md:block 67 (code)
msgid "$this->browse(function ($first, $second) {\n"
"    $first->loginAs(User::find(1))\n"
"          ->visit('/home')\n"
"          ->waitForText('Message');\n\n"
"    $second->loginAs(User::find(2))\n"
"           ->visit('/home')\n"
"           ->waitForText('Message')\n"
"           ->type('message', 'Hey Taylor')\n"
"           ->press('Send');\n\n"
"    $first->waitForText('Hey Taylor')\n"
"          ->assertSee('Jeffrey Way');\n"
"});\n"
msgstr "$this->browse(function ($first, $second) {\n"
"    $first->loginAs(User::find(1))\n"
"          ->visit('/home')\n"
"          ->waitForText('Message');\n\n"
"    $second->loginAs(User::find(2))\n"
"           ->visit('/home')\n"
"           ->waitForText('Message')\n"
"           ->type('message', 'Hey Taylor')\n"
"           ->press('Send');\n\n"
"    $first->waitForText('Hey Taylor')\n"
"          ->assertSee('Jeffrey Way');\n"
"});\n"

#: docs/8.x/dusk.md:block 69 (header)
msgid "Navigation"
msgstr "導航"

#: docs/8.x/dusk.md:block 70 (paragraph)
msgid "The `visit` method may be used to navigate to a given URI within your application:"
msgstr "`visit` 方法可用來在網站內導航到特定的 URI 上："

#: docs/8.x/dusk.md:block 71 (code)
msgid "$browser->visit('/login');\n"
msgstr "$browser->visit('/login');\n"

#: docs/8.x/dusk.md:block 72 (paragraph)
msgid "You may use the `visitRoute` method to navigate to a [named route](/docs/{{version}}/routing#named-routes):"
msgstr "可以使用 `visitRoute` 方法來導航到[命名路由](/docs/{{version}}/routing#named-routes)："

#: docs/8.x/dusk.md:block 73 (code)
msgid "$browser->visitRoute('login');\n"
msgstr "$browser->visitRoute('login');\n"

#: docs/8.x/dusk.md:block 74 (paragraph)
msgid "You may navigate \"back\" and \"forward\" using the `back` and `forward` methods:"
msgstr "可以使用 `back` 與 `forward` 方法來導航到「上一頁」與「下一頁」："

#: docs/8.x/dusk.md:block 75 (code)
msgid "$browser->back();\n\n"
"$browser->forward();\n"
msgstr "$browser->back();\n\n"
"$browser->forward();\n"

#: docs/8.x/dusk.md:block 76 (paragraph)
msgid "You may use the `refresh` method to refresh the page:"
msgstr "可以使用 `refresh` 方法來重新整理頁面："

#: docs/8.x/dusk.md:block 77 (code)
msgid "$browser->refresh();\n"
msgstr "$browser->refresh();\n"

#: docs/8.x/dusk.md:block 79 (header)
msgid "Resizing Browser Windows"
msgstr "縮放瀏覽器視窗"

#: docs/8.x/dusk.md:block 80 (paragraph)
msgid "You may use the `resize` method to adjust the size of the browser window:"
msgstr "可以使用 `resize` 方法來調整瀏覽器視窗的大小："

#: docs/8.x/dusk.md:block 81 (code)
msgid "$browser->resize(1920, 1080);\n"
msgstr "$browser->resize(1920, 1080);\n"

#: docs/8.x/dusk.md:block 82 (paragraph)
msgid "The `maximize` method may be used to maximize the browser window:"
msgstr "`maximize` 方法可用來最大化瀏覽器視窗："

#: docs/8.x/dusk.md:block 83 (code)
msgid "$browser->maximize();\n"
msgstr "$browser->maximize();\n"

#: docs/8.x/dusk.md:block 84 (paragraph)
msgid "The `fitContent` method will resize the browser window to match the size of its content:"
msgstr "`fitContent` 方法會將瀏覽器視窗縮放到符合其內容的大小："

#: docs/8.x/dusk.md:block 85 (code)
msgid "$browser->fitContent();\n"
msgstr "$browser->fitContent();\n"

#: docs/8.x/dusk.md:block 86 (paragraph)
msgid "When a test fails, Dusk will automatically resize the browser to fit the content prior to taking a screenshot. You may disable this feature by calling the `disableFitOnFailure` method within your test:"
msgstr "當測試失敗時，Dusk 會自動縮放瀏覽器視窗來符合其內容，以進行截圖。可以通過在測試內呼叫 `disableFitOnFailure` 方法來禁用此功能："

#: docs/8.x/dusk.md:block 87 (code)
msgid "$browser->disableFitOnFailure();\n"
msgstr "$browser->disableFitOnFailure();\n"

#: docs/8.x/dusk.md:block 88 (paragraph)
msgid "You may use the `move` method to move the browser window to a different position on your screen:"
msgstr "可以使用 `move` 方法來將瀏覽器視窗移動到畫面上的不同位置："

#: docs/8.x/dusk.md:block 89 (code)
msgid "$browser->move($x = 100, $y = 100);\n"
msgstr "$browser->move($x = 100, $y = 100);\n"

#: docs/8.x/dusk.md:block 91 (header)
msgid "Browser Macros"
msgstr "瀏覽器 Macro"

#: docs/8.x/dusk.md:block 92 (paragraph)
msgid "If you would like to define a custom browser method that you can re-use in a variety of your tests, you may use the `macro` method on the `Browser` class. Typically, you should call this method from a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr "若想定義可在各個測試內重複使用的自訂瀏覽器方法，可使用 `Browser` 類別上的 `macro` 方法。通常來說，該方法應在某個 [Service Provider](/docs/{{version}}/providers) 的 `boot` 方法內呼叫："

#: docs/8.x/dusk.md:block 93 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Dusk\\Browser;\n\n"
"class DuskServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register Dusk's browser macros.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Browser::macro('scrollToElement', function ($element = null) {\n"
"            $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n\n"
"            return $this;\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Dusk\\Browser;\n\n"
"class DuskServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register Dusk's browser macros.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Browser::macro('scrollToElement', function ($element = null) {\n"
"            $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n\n"
"            return $this;\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/dusk.md:block 94 (paragraph)
msgid "The `macro` function accepts a name as its first argument, and a closure as its second. The macro's closure will be executed when calling the macro as a method on a `Browser` instance:"
msgstr "`macro` 方法接受一個名稱作為其第一個引數，以及閉包作為其第二個引數。當在 `Browser` 實體上以方法呼叫該 Macro 時，會執行該 Macro 的閉包："

#: docs/8.x/dusk.md:block 95 (code)
msgid "$this->browse(function ($browser) use ($user) {\n"
"    $browser->visit('/pay')\n"
"            ->scrollToElement('#credit-card-details')\n"
"            ->assertSee('Enter Credit Card Details');\n"
"});\n"
msgstr "$this->browse(function ($browser) use ($user) {\n"
"    $browser->visit('/pay')\n"
"            ->scrollToElement('#credit-card-details')\n"
"            ->assertSee('Enter Credit Card Details');\n"
"});\n"

#: docs/8.x/dusk.md:block 97 (header)
msgid "Authentication"
msgstr "登入認證"

#: docs/8.x/dusk.md:block 98 (paragraph)
msgid "Often, you will be testing pages that require authentication. You can use Dusk's `loginAs` method in order to avoid interacting with your application's login screen during every test. The `loginAs` method accepts a primary key associated with your authenticatable model or an authenticatable model instance:"
msgstr "一般來說，我們會需要測試需要登入的頁面。可以使用 Dusk 的 `loginAs` 方法來避免每個測試都需要處理網站的登入畫面。`loginAs` 方法接受 Authenticatable Model 所關聯的主索引鍵，或是 Authenticatable Model 實體："

#: docs/8.x/dusk.md:block 99 (code)
msgid "use App\\Models\\User;\n\n"
"$this->browse(function ($browser) {\n"
"    $browser->loginAs(User::find(1))\n"
"          ->visit('/home');\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"$this->browse(function ($browser) {\n"
"    $browser->loginAs(User::find(1))\n"
"          ->visit('/home');\n"
"});\n"

#: docs/8.x/dusk.md:block 100 (quote)
msgid "{note} After using the `loginAs` method, the user session will be maintained for all tests within the file."
msgstr "{note} 使用 `loginAs` 方法後，在該檔案內所有的測試都將使用該使用者 Session。"

#: docs/8.x/dusk.md:block 102 (header)
msgid "Cookies"
msgstr "Cookie"

#: docs/8.x/dusk.md:block 103 (paragraph)
msgid "You may use the `cookie` method to get or set an encrypted cookie's value. By default, all of the cookies created by Laravel are encrypted:"
msgstr "可以使用 `cookie` 方法來取得或設定加密的 Cookie 值。預設情況下，Laravel 所建立的所有 Cookie 都是經過加密的："

#: docs/8.x/dusk.md:block 104 (code)
msgid "$browser->cookie('name');\n\n"
"$browser->cookie('name', 'Taylor');\n"
msgstr "$browser->cookie('name');\n\n"
"$browser->cookie('name', 'Taylor');\n"

#: docs/8.x/dusk.md:block 105 (paragraph)
msgid "You may use the `plainCookie` method to get or set an unencrypted cookie's value:"
msgstr "可以使用 `plainCookie` 方法來取得或設定未加密的 Cookie 值："

#: docs/8.x/dusk.md:block 106 (code)
msgid "$browser->plainCookie('name');\n\n"
"$browser->plainCookie('name', 'Taylor');\n"
msgstr "$browser->plainCookie('name');\n\n"
"$browser->plainCookie('name', 'Taylor');\n"

#: docs/8.x/dusk.md:block 107 (paragraph)
msgid "You may use the `deleteCookie` method to delete the given cookie:"
msgstr "可以使用 `deleteCookie` 方法來刪除給定的 Cookie："

#: docs/8.x/dusk.md:block 108 (code)
msgid "$browser->deleteCookie('name');\n"
msgstr "$browser->deleteCookie('name');\n"

#: docs/8.x/dusk.md:block 110 (header)
msgid "Executing JavaScript"
msgstr "執行 JavaScript"

#: docs/8.x/dusk.md:block 111 (paragraph)
msgid "You may use the `script` method to execute arbitrary JavaScript statements within the browser:"
msgstr "可以使用 `script` 方法來在瀏覽器內執行任意的 JavaScript 陳述式："

#: docs/8.x/dusk.md:block 112 (code)
msgid "$browser->script('document.documentElement.scrollTop = 0');\n\n"
"$browser->script([\n"
"    'document.body.scrollTop = 0',\n"
"    'document.documentElement.scrollTop = 0',\n"
"]);\n\n"
"$output = $browser->script('return window.location.pathname');\n"
msgstr "$browser->script('document.documentElement.scrollTop = 0');\n\n"
"$browser->script([\n"
"    'document.body.scrollTop = 0',\n"
"    'document.documentElement.scrollTop = 0',\n"
"]);\n\n"
"$output = $browser->script('return window.location.pathname');\n"

#: docs/8.x/dusk.md:block 114 (header)
msgid "Taking A Screenshot"
msgstr "截圖"

#: docs/8.x/dusk.md:block 115 (paragraph)
msgid "You may use the `screenshot` method to take a screenshot and store it with the given filename. All screenshots will be stored within the `tests/Browser/screenshots` directory:"
msgstr "可以使用 `screenshot` 方法來截圖，並將截圖保存為給定的檔案名稱。所有的截圖都會保存在 `tests/Browser/screenshots` 目錄內："

#: docs/8.x/dusk.md:block 116 (code)
msgid "$browser->screenshot('filename');\n"
msgstr "$browser->screenshot('filename');\n"

#: docs/8.x/dusk.md:block 118 (header)
msgid "Storing Console Output To Disk"
msgstr "將主控台輸出保存至磁碟"

#: docs/8.x/dusk.md:block 119 (paragraph)
msgid "You may use the `storeConsoleLog` method to write the current browser's console output to disk with the given filename. Console output will be stored within the `tests/Browser/console` directory:"
msgstr "可以使用 `storeConsoleLog` 方法來將目前瀏覽器的主控台輸出以給定的檔案名稱寫入到磁碟內。主控台輸出會保存在 `tests/Browser/console` 目錄內："

#: docs/8.x/dusk.md:block 120 (code)
msgid "$browser->storeConsoleLog('filename');\n"
msgstr "$browser->storeConsoleLog('filename');\n"

#: docs/8.x/dusk.md:block 122 (header)
msgid "Storing Page Source To Disk"
msgstr "將頁面原始碼儲存至磁碟"

#: docs/8.x/dusk.md:block 123 (paragraph)
msgid "You may use the `storeSource` method to write the current page's source to disk with the given filename. The page source will be stored within the `tests/Browser/source` directory:"
msgstr "可以使用 `storeSource` 方法來將目前頁面的原始碼以給定的檔案名稱寫入到磁碟內。頁面原始碼會保存在 `tests/Browser/source` 目錄內："

#: docs/8.x/dusk.md:block 124 (code)
msgid "$browser->storeSource('filename');\n"
msgstr "$browser->storeSource('filename');\n"

#: docs/8.x/dusk.md:block 126 (header)
msgid "Interacting With Elements"
msgstr "與元素互動"

#: docs/8.x/dusk.md:block 128 (header)
msgid "Dusk Selectors"
msgstr "Dusk 選擇器"

#: docs/8.x/dusk.md:block 129 (paragraph)
msgid "Choosing good CSS selectors for interacting with elements is one of the hardest parts of writing Dusk tests. Over time, frontend changes can cause CSS selectors like the following to break your tests:"
msgstr "在撰寫 Dusk 測試時，選擇一個好的 CSS 選擇器來與元素互動是最難的一部分。日子一天天過去，當前端有更改時，若有像下列這樣的 CSS 選擇器就有可能讓測試失敗："

#: docs/8.x/dusk.md:block 130 (code)
msgid "// HTML...\n\n"
"<button>Login</button>\n\n"
"// Test...\n\n"
"$browser->click('.login-page .container div > button');\n"
msgstr "// HTML...\n\n"
"<button>Login</button>\n\n"
"// 測試...\n\n"
"$browser->click('.login-page .container div > button');\n"

#: docs/8.x/dusk.md:block 131 (paragraph)
msgid "Dusk selectors allow you to focus on writing effective tests rather than remembering CSS selectors. To define a selector, add a `dusk` attribute to your HTML element. Then, when interacting with a Dusk browser, prefix the selector with `@` to manipulate the attached element within your test:"
msgstr "使用 Dusk 選擇器，就能讓開發人員更專注於撰寫有效的測試，而不是記住 CSS 選擇器。若要定義選擇請，請在 HTML 元素內加上 `dusk` 屬性。接著，當與 Dusk 瀏覽器互動時，請在該選擇器前方加上 `@` 來在測試內操作該元素："

#: docs/8.x/dusk.md:block 132 (code)
msgid "// HTML...\n\n"
"<button dusk=\"login-button\">Login</button>\n\n"
"// Test...\n\n"
"$browser->click('@login-button');\n"
msgstr "// HTML...\n\n"
"<button dusk=\"login-button\">Login</button>\n\n"
"// 測試...\n\n"
"$browser->click('@login-button');\n"

#: docs/8.x/dusk.md:block 134 (header)
msgid "Text, Values, & Attributes"
msgstr "文字、值、與屬性"

#: docs/8.x/dusk.md:block 136 (header)
msgid "Retrieving & Setting Values"
msgstr "取得與設定值"

#: docs/8.x/dusk.md:block 137 (paragraph)
msgid "Dusk provides several methods for interacting with the current value, display text, and attributes of elements on the page. For example, to get the \"value\" of an element that matches a given CSS or Dusk selector, use the `value` method:"
msgstr "Dusk 內提供了數種可與目前頁面上元素的值、顯示文字、與屬性互動的方法。舉例來說，若要在某個符合給定 CSS 或 Dusk 選擇器的元素上取得該元素的「值 (Value)」，可使用 `value` 方法："

#: docs/8.x/dusk.md:block 138 (code)
msgid "// Retrieve the value...\n"
"$value = $browser->value('selector');\n\n"
"// Set the value...\n"
"$browser->value('selector', 'value');\n"
msgstr "// 取值...\n"
"$value = $browser->value('selector');\n\n"
"// 賦值...\n"
"$browser->value('selector', 'value');\n"

#: docs/8.x/dusk.md:block 139 (paragraph)
msgid "You may use the `inputValue` method to get the \"value\" of an input element that has a given field name:"
msgstr "可以使用 `inputValue` 方法來取得某個給定欄位名稱之 input 元素的「值 (Value)」："

#: docs/8.x/dusk.md:block 140 (code)
msgid "$value = $browser->inputValue('field');\n"
msgstr "$value = $browser->inputValue('field');\n"

#: docs/8.x/dusk.md:block 142 (header)
msgid "Retrieving Text"
msgstr "取得文字"

#: docs/8.x/dusk.md:block 143 (paragraph)
msgid "The `text` method may be used to retrieve the display text of an element that matches the given selector:"
msgstr "可使用 `text` 方法來取得符合給定選擇器之元素的顯示文字："

#: docs/8.x/dusk.md:block 144 (code)
msgid "$text = $browser->text('selector');\n"
msgstr "$text = $browser->text('selector');\n"

#: docs/8.x/dusk.md:block 146 (header)
msgid "Retrieving Attributes"
msgstr "取得屬性"

#: docs/8.x/dusk.md:block 147 (paragraph)
msgid "Finally, the `attribute` method may be used to retrieve the value of an attribute of an element matching the given selector:"
msgstr "最後，可使用 `attribute` 方法來取得符合給定選擇器之元素的屬性值："

#: docs/8.x/dusk.md:block 148 (code)
msgid "$attribute = $browser->attribute('selector', 'value');\n"
msgstr "$attribute = $browser->attribute('selector', 'value');\n"

#: docs/8.x/dusk.md:block 150 (header)
msgid "Interacting With Forms"
msgstr "與表單互動"

#: docs/8.x/dusk.md:block 152 (header)
msgid "Typing Values"
msgstr "鍵入值"

#: docs/8.x/dusk.md:block 153 (paragraph)
msgid "Dusk provides a variety of methods for interacting with forms and input elements. First, let's take a look at an example of typing text into an input field:"
msgstr "Dusk 提供了多種與表單以及 Input 元素互動的方法。首先，來看看一個在 Input 欄位內鍵入文字的例子："

#: docs/8.x/dusk.md:block 154 (code)
msgid "$browser->type('email', 'taylor@laravel.com');\n"
msgstr "$browser->type('email', 'taylor@laravel.com');\n"

#: docs/8.x/dusk.md:block 155 (paragraph)
msgid "Note that, although the method accepts one if necessary, we are not required to pass a CSS selector into the `type` method. If a CSS selector is not provided, Dusk will search for an `input` or `textarea` field with the given `name` attribute."
msgstr "請注意這裡，雖然可將 CSS 選擇器傳入 `type` 方法，但並不需特別傳入。若未提供 CSS 選擇器，則 Dusk 會搜尋符合給定 `name` 屬性的 `input` 或 `textarea` 欄位。"

#: docs/8.x/dusk.md:block 156 (paragraph)
msgid "To append text to a field without clearing its content, you may use the `append` method:"
msgstr "若要在不將其原本內容清除的情況下將文字附加在最後面，可以使用 `append` 方法："

#: docs/8.x/dusk.md:block 157 (code)
msgid "$browser->type('tags', 'foo')\n"
"        ->append('tags', ', bar, baz');\n"
msgstr "$browser->type('tags', 'foo')\n"
"        ->append('tags', ', bar, baz');\n"

#: docs/8.x/dusk.md:block 158 (paragraph)
msgid "You may clear the value of an input using the `clear` method:"
msgstr "可以使用 `clear` 方法來清除某個 Input 的值："

#: docs/8.x/dusk.md:block 159 (code)
msgid "$browser->clear('email');\n"
msgstr "$browser->clear('email');\n"

#: docs/8.x/dusk.md:block 160 (paragraph)
msgid "You can instruct Dusk to type slowly using the `typeSlowly` method. By default, Dusk will pause for 100 milliseconds between key presses. To customize the amount of time between key presses, you may pass the appropriate number of milliseconds as the third argument to the method:"
msgstr "可以使用 `typeSlowly` 方法來讓 Dusk 輸入得慢一點。預設情況下，Dusk 會在每個按鍵間暫停 100 毫秒。若要自訂按鍵按下間的時間，可將適當的毫秒數作為第三個引數傳給該方法："

#: docs/8.x/dusk.md:block 161 (code)
msgid "$browser->typeSlowly('mobile', '+1 (202) 555-5555');\n\n"
"$browser->typeSlowly('mobile', '+1 (202) 555-5555', 300);\n"
msgstr "$browser->typeSlowly('mobile', '+1 (202) 555-5555');\n\n"
"$browser->typeSlowly('mobile', '+1 (202) 555-5555', 300);\n"

#: docs/8.x/dusk.md:block 162 (paragraph)
msgid "You may use the `appendSlowly` method to append text slowly:"
msgstr "可以使用 `appendSlowly` 方法來慢慢地將文字附加到最後："

#: docs/8.x/dusk.md:block 163 (code)
msgid "$browser->type('tags', 'foo')\n"
"        ->appendSlowly('tags', ', bar, baz');\n"
msgstr "$browser->type('tags', 'foo')\n"
"        ->appendSlowly('tags', ', bar, baz');\n"

#: docs/8.x/dusk.md:block 165 (header)
msgid "Dropdowns"
msgstr "下拉選單"

#: docs/8.x/dusk.md:block 166 (paragraph)
msgid "To select a value available on a `select` element, you may use the `select` method. Like the `type` method, the `select` method does not require a full CSS selector. When passing a value to the `select` method, you should pass the underlying option value instead of the display text:"
msgstr "若要在 `select` 元素上選擇可用的值，可使用 `select` 方法。與 `type` 方法類似，`select` 方法並不要求要提供完整的 CSS 選擇器。將值傳給 `select` 方法時，應傳入底層的選項值而非顯示的文字："

#: docs/8.x/dusk.md:block 167 (code)
msgid "$browser->select('size', 'Large');\n"
msgstr "$browser->select('size', 'Large');\n"

#: docs/8.x/dusk.md:block 168 (paragraph)
msgid "You may select a random option by omitting the second argument:"
msgstr "也可以通過省略第二個引數來隨機選擇選項："

#: docs/8.x/dusk.md:block 169 (code)
msgid "$browser->select('size');\n"
msgstr "$browser->select('size');\n"

#: docs/8.x/dusk.md:block 170 (paragraph)
msgid "By providing an array as the second argument to the `select` method, you can instruct the method to select multiple options:"
msgstr "在 `select` 方法的第二個引數中使用陣列，就可以選擇多個選項："

#: docs/8.x/dusk.md:block 171 (code)
msgid "$browser->select('categories', ['Art', 'Music']);\n"
msgstr "$browser->select('categories', ['Art', 'Music']);\n"

#: docs/8.x/dusk.md:block 173 (header)
msgid "Checkboxes"
msgstr "多選框"

#: docs/8.x/dusk.md:block 174 (paragraph)
msgid "To \"check\" a checkbox input, you may use the `check` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a checkbox with a matching `name` attribute:"
msgstr "若要「勾選」多選框，可使用 `check` 方法。與其他 Input 有關的方法類似，並不需要傳入完整的 CSS 選擇器。若找不到對應的 CSS 選擇器，Dusk 會自動搜尋符合 `name` 屬性的多選框："

#: docs/8.x/dusk.md:block 175 (code)
msgid "$browser->check('terms');\n"
msgstr "$browser->check('terms');\n"

#: docs/8.x/dusk.md:block 176 (paragraph)
msgid "The `uncheck` method may be used to \"uncheck\" a checkbox input:"
msgstr "可使用 `uncheck` 方法來「取消勾選」多選框："

#: docs/8.x/dusk.md:block 177 (code)
msgid "$browser->uncheck('terms');\n"
msgstr "$browser->uncheck('terms');\n"

#: docs/8.x/dusk.md:block 179 (header)
msgid "Radio Buttons"
msgstr "單選框"

#: docs/8.x/dusk.md:block 180 (paragraph)
msgid "To \"select\" a `radio` input option, you may use the `radio` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `radio` input with matching `name` and `value` attributes:"
msgstr "若要「勾選」`radio` 單選框，可使用 `check` 方法。與其他 Input 有關的方法類似，並不需要傳入完整的 CSS 選擇器。若找不到對應的 CSS 選擇器，Dusk 會自動搜尋符合 `name` 屬性的 `radio` 單選框："

#: docs/8.x/dusk.md:block 181 (code)
msgid "$browser->radio('size', 'large');\n"
msgstr "$browser->radio('size', 'large');\n"

#: docs/8.x/dusk.md:block 183 (header)
msgid "Attaching Files"
msgstr "附加檔案"

#: docs/8.x/dusk.md:block 184 (paragraph)
msgid "The `attach` method may be used to attach a file to a `file` input element. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `file` input with a matching `name` attribute:"
msgstr "可使用 `attach` 方法來將檔案附加到 `file` Input 元素上。與其他 Input 有關的方法類似，並不需要傳入完整的 CSS 選擇器。若找不到對應的 CSS 選擇器，Dusk 會自動搜尋符合 `name` 屬性的 `file` Input："

#: docs/8.x/dusk.md:block 185 (code)
msgid "$browser->attach('photo', __DIR__.'/photos/mountains.png');\n"
msgstr "$browser->attach('photo', __DIR__.'/photos/mountains.png');\n"

#: docs/8.x/dusk.md:block 186 (quote)
msgid "{note} The attach function requires the `Zip` PHP extension to be installed and enabled on your server."
msgstr "{note} 要使用 attach 函式，伺服器上必須有安裝 `Zip` PHP 擴充套件並已啟用。"

#: docs/8.x/dusk.md:block 188 (header)
msgid "Pressing Buttons"
msgstr "按下按鈕"

#: docs/8.x/dusk.md:block 189 (paragraph)
msgid "The `press` method may be used to click a button element on the page. The first argument given to the `press` method may be either the display text of the button or a CSS / Dusk selector:"
msgstr "`press` 方法可用來點擊頁面上的按鈕元素。傳給 `press` 方法的第一個引數可以是按鈕的顯示文字，或是 CSS / Dusk 選擇器："

#: docs/8.x/dusk.md:block 190 (code)
msgid "$browser->press('Login');\n"
msgstr "$browser->press('Login');\n"

#: docs/8.x/dusk.md:block 191 (paragraph)
msgid "When submitting forms, many application's disable the form's submission button after it is pressed and then re-enable the button when the form submission's HTTP request is complete. To press a button and wait for the button to be re-enabled, you may use the `pressAndWaitFor` method:"
msgstr "在送出表單時，許多網站會在按鈕按下的時候禁用表單的送出按鈕，並在表單送出的 HTTP 請求完成後重新啟用該按鈕。若要按下按鈕並等待該按鈕重新啟用，可使用 `pressAndWaitFor` 方法："

#: docs/8.x/dusk.md:block 192 (code)
msgid "// Press the button and wait a maximum of 5 seconds for it to be enabled...\n"
"$browser->pressAndWaitFor('Save');\n\n"
"// Press the button and wait a maximum of 1 second for it to be enabled...\n"
"$browser->pressAndWaitFor('Save', 1);\n"
msgstr "// 按下按鈕，並等待該按鈕啟用，最多 5 秒...\n"
"$browser->pressAndWaitFor('Save');\n\n"
"// 按下按鈕，並等待該按鈕啟用，最多 1 秒...\n"
"$browser->pressAndWaitFor('Save', 1);\n"

#: docs/8.x/dusk.md:block 194 (header)
msgid "Clicking Links"
msgstr "點擊連結"

#: docs/8.x/dusk.md:block 195 (paragraph)
msgid "To click a link, you may use the `clickLink` method on the browser instance. The `clickLink` method will click the link that has the given display text:"
msgstr "若要點擊連結，可使用瀏覽器實體上的 `clickLink` 方法。`clickLink` 方法會點擊有給定顯示文字的連結："

#: docs/8.x/dusk.md:block 196 (code)
msgid "$browser->clickLink($linkText);\n"
msgstr "$browser->clickLink($linkText);\n"

#: docs/8.x/dusk.md:block 197 (paragraph)
msgid "You may use the `seeLink` method to determine if a link with the given display text is visible on the page:"
msgstr "可使用 `seeLink` 方法來判斷給定的顯示文字是否在頁面上可見："

#: docs/8.x/dusk.md:block 198 (code)
msgid "if ($browser->seeLink($linkText)) {\n"
"    // ...\n"
"}\n"
msgstr "if ($browser->seeLink($linkText)) {\n"
"    // ...\n"
"}\n"

#: docs/8.x/dusk.md:block 199 (quote)
msgid "{note} These methods interact with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test's duration."
msgstr "{note} 該方法需要與 jQuery 互動。若頁面上沒有 jQuery 可用，則 Dusk 會自動將 jQuery 插入到頁面上以在測試期間使用。"

#: docs/8.x/dusk.md:block 201 (header)
msgid "Using The Keyboard"
msgstr "使用鍵盤"

#: docs/8.x/dusk.md:block 202 (paragraph)
msgid "The `keys` method allows you to provide more complex input sequences to a given element than normally allowed by the `type` method. For example, you may instruct Dusk to hold modifier keys while entering values. In this example, the `shift` key will be held while `taylor` is entered into the element matching the given selector. After `taylor` is typed, `swift` will be typed without any modifier keys:"
msgstr "比起使用一般的 `type` 方法，`keys` 方法提供了可對給定元素進行一系列更複雜輸入的能力。舉例來說，可以讓 Dusk 在輸入數值的時候按著某個輔助按鍵。在這個範例中，於符合給定選擇器的元素內輸入 `taylor` 文字時，會按著 `Shift` 鍵。輸入完 `taylor` 後，`swift` 會在不按下任何輔助按鍵的情況下輸入："

#: docs/8.x/dusk.md:block 203 (code)
msgid "$browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n"
msgstr "$browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n"

#: docs/8.x/dusk.md:block 204 (paragraph)
msgid "Another valuable use case for the `keys` method is sending a \"keyboard shortcut\" combination to the primary CSS selector for your application:"
msgstr "`keys` 方法的另一個實用用途是給主要 CSS 選擇器傳送一組「鍵盤快捷鍵」："

#: docs/8.x/dusk.md:block 205 (code)
msgid "$browser->keys('.app', ['{command}', 'j']);\n"
msgstr "$browser->keys('.app', ['{command}', 'j']);\n"

#: docs/8.x/dusk.md:block 206 (quote)
msgid "{tip} All modifier keys such as `{command}` are wrapped in `{}` characters, and match the constants defined in the `Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php)."
msgstr "{tip} 所有的輔助按鍵，如 `{command}` 都以 `{}` 字元來進行包裝，且符合 `Facebook\\WebDriver\\WebDriverKeys` 中所定義的常數值。可[在 GitHub 上找到](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php)這些常數值。"

#: docs/8.x/dusk.md:block 208 (header)
msgid "Using The Mouse"
msgstr "使用滑鼠"

#: docs/8.x/dusk.md:block 210 (header)
msgid "Clicking On Elements"
msgstr "點擊元素"

#: docs/8.x/dusk.md:block 211 (paragraph)
msgid "The `click` method may be used to click on an element matching the given CSS or Dusk selector:"
msgstr "可使用 `click` 方法來點擊符合給定 CSS 或 Dusk 選擇器的元素："

#: docs/8.x/dusk.md:block 212 (code)
msgid "$browser->click('.selector');\n"
msgstr "$browser->click('.selector');\n"

#: docs/8.x/dusk.md:block 213 (paragraph)
msgid "The `clickAtXPath` method may be used to click on an element matching the given XPath expression:"
msgstr "可使用 `clickAtXPath` 方法來點擊符合給定 XPath 運算式的元素："

#: docs/8.x/dusk.md:block 214 (code)
msgid "$browser->clickAtXPath('//div[@class = \"selector\"]');\n"
msgstr "$browser->clickAtXPath('//div[@class = \"selector\"]');\n"

#: docs/8.x/dusk.md:block 215 (paragraph)
msgid "The `clickAtPoint` method may be used to click on the topmost element at a given pair of coordinates relative to the viewable area of the browser:"
msgstr "可使用 `clickAtPoint` 方法來點擊在相對於瀏覽器檢視區域上，符合給定座標點上最上層的元素："

#: docs/8.x/dusk.md:block 216 (code)
msgid "$browser->clickAtPoint($x = 0, $y = 0);\n"
msgstr "$browser->clickAtPoint($x = 0, $y = 0);\n"

#: docs/8.x/dusk.md:block 217 (paragraph)
msgid "The `doubleClick` method may be used to simulate the double click of a mouse:"
msgstr "可使用 `doubleClick` 方法來模擬使用滑鼠點兩下："

#: docs/8.x/dusk.md:block 218 (code)
msgid "$browser->doubleClick();\n"
msgstr "$browser->doubleClick();\n"

#: docs/8.x/dusk.md:block 219 (paragraph)
msgid "The `rightClick` method may be used to simulate the right click of a mouse:"
msgstr "可使用 `rightClick` 方法來模擬按滑鼠右鍵："

#: docs/8.x/dusk.md:block 220 (code)
msgid "$browser->rightClick();\n\n"
"$browser->rightClick('.selector');\n"
msgstr "$browser->rightClick();\n\n"
"$browser->rightClick('.selector');\n"

#: docs/8.x/dusk.md:block 221 (paragraph)
msgid "The `clickAndHold` method may be used to simulate a mouse button being clicked and held down. A subsequent call to the `releaseMouse` method will undo this behavior and release the mouse button:"
msgstr "可使用 `clickAndHold` 方法來模擬按下滑鼠按鈕並保持按下。若接著呼叫 `releaseMouse` 方法，則會取消這個行為並放開滑鼠按鈕："

#: docs/8.x/dusk.md:block 222 (code)
msgid "$browser->clickAndHold()\n"
"        ->pause(1000)\n"
"        ->releaseMouse();\n"
msgstr "$browser->clickAndHold()\n"
"        ->pause(1000)\n"
"        ->releaseMouse();\n"

#: docs/8.x/dusk.md:block 224 (header)
msgid "Mouseover"
msgstr "滑鼠移至上方"

#: docs/8.x/dusk.md:block 225 (paragraph)
msgid "The `mouseover` method may be used when you need to move the mouse over an element matching the given CSS or Dusk selector:"
msgstr "當需要將滑鼠移至符合給定 CSS 或 Dusk 選擇器的元素上時，可使用 `mouseover` 方法："

#: docs/8.x/dusk.md:block 226 (code)
msgid "$browser->mouseover('.selector');\n"
msgstr "$browser->mouseover('.selector');\n"

#: docs/8.x/dusk.md:block 228 (header)
msgid "Drag & Drop"
msgstr "拖放"

#: docs/8.x/dusk.md:block 229 (paragraph)
msgid "The `drag` method may be used to drag an element matching the given selector to another element:"
msgstr "可使用 `drag` 方法來將符合給定選擇器元素拖曳至另一個元素上："

#: docs/8.x/dusk.md:block 230 (code)
msgid "$browser->drag('.from-selector', '.to-selector');\n"
msgstr "$browser->drag('.from-selector', '.to-selector');\n"

#: docs/8.x/dusk.md:block 231 (paragraph)
msgid "Or, you may drag an element in a single direction:"
msgstr "或者，也可以將某個元素在單一方向上拖曳："

#: docs/8.x/dusk.md:block 232 (code)
msgid "$browser->dragLeft('.selector', $pixels = 10);\n"
"$browser->dragRight('.selector', $pixels = 10);\n"
"$browser->dragUp('.selector', $pixels = 10);\n"
"$browser->dragDown('.selector', $pixels = 10);\n"
msgstr "$browser->dragLeft('.selector', $pixels = 10);\n"
"$browser->dragRight('.selector', $pixels = 10);\n"
"$browser->dragUp('.selector', $pixels = 10);\n"
"$browser->dragDown('.selector', $pixels = 10);\n"

#: docs/8.x/dusk.md:block 233 (paragraph)
msgid "Finally, you may drag an element by a given offset:"
msgstr "最後，可以依照給定偏移值來拖曳元素："

#: docs/8.x/dusk.md:block 234 (code)
msgid "$browser->dragOffset('.selector', $x = 10, $y = 10);\n"
msgstr "$browser->dragOffset('.selector', $x = 10, $y = 10);\n"

#: docs/8.x/dusk.md:block 236 (header)
msgid "JavaScript Dialogs"
msgstr "JavaScript 對話方塊"

#: docs/8.x/dusk.md:block 237 (paragraph)
msgid "Dusk provides various methods to interact with JavaScript Dialogs. For example, you may use the `waitForDialog` method to wait for a JavaScript dialog to appear. This method accepts an optional argument indicating how many seconds to wait for the dialog to appear:"
msgstr "Dusk 提供了多種與 JavaScript 對話方塊互動的方法。舉例來說，可以使用 `waitForDialog` 方法來等待 JavaScript 對話方塊出現。該方法可接收一個可選的引數來判斷要等幾秒讓該對話方塊顯示出來："

#: docs/8.x/dusk.md:block 238 (code)
msgid "$browser->waitForDialog($seconds = null);\n"
msgstr "$browser->waitForDialog($seconds = null);\n"

#: docs/8.x/dusk.md:block 239 (paragraph)
msgid "The `assertDialogOpened` method may be used to assert that a dialog has been displayed and contains the given message:"
msgstr "可使用 `assertDialogOpened` 方法來判斷某個對話方塊是否已顯示，且包含給定的訊息："

#: docs/8.x/dusk.md:block 240 (code)
msgid "$browser->assertDialogOpened('Dialog message');\n"
msgstr "$browser->assertDialogOpened('Dialog message');\n"

#: docs/8.x/dusk.md:block 241 (paragraph)
msgid "If the JavaScript dialog contains a prompt, you may use the `typeInDialog` method to type a value into the prompt:"
msgstr "若該 JavaScript 對話方塊包含輸入提示，可使用 `typeInDialog` 方法來在該提示中輸入數值："

#: docs/8.x/dusk.md:block 242 (code)
msgid "$browser->typeInDialog('Hello World');\n"
msgstr "$browser->typeInDialog('Hello World');\n"

#: docs/8.x/dusk.md:block 243 (paragraph)
msgid "To close an open JavaScript dialog by clicking the \"OK\" button, you may invoke the `acceptDialog` method:"
msgstr "若要點擊「確定」按鈕來關閉開啟的 JavaScript 對話方塊，可以叫用 `acceptDialog` 方法："

#: docs/8.x/dusk.md:block 244 (code)
msgid "$browser->acceptDialog();\n"
msgstr "$browser->acceptDialog();\n"

#: docs/8.x/dusk.md:block 245 (paragraph)
msgid "To close an open JavaScript dialog by clicking the \"Cancel\" button, you may invoke the `dismissDialog` method:"
msgstr "若要點擊「取消」按鈕來關閉開啟的 JavaScript 對話方塊，可以叫用 `dismissDialog` 方法："

#: docs/8.x/dusk.md:block 246 (code)
msgid "$browser->dismissDialog();\n"
msgstr "$browser->dismissDialog();\n"

#: docs/8.x/dusk.md:block 248 (header)
msgid "Scoping Selectors"
msgstr "區域性選擇器"

#: docs/8.x/dusk.md:block 249 (paragraph)
msgid "Sometimes you may wish to perform several operations while scoping all of the operations within a given selector. For example, you may wish to assert that some text exists only within a table and then click a button within that table. You may use the `with` method to accomplish this. All operations performed within the closure given to the `with` method will be scoped to the original selector:"
msgstr "有的時候，我們可能會想把多個操作限制到某個特定選擇器裡面。舉例來說，我們在判斷某段文字是否有出現時，可能只想在某個表格內檢查，並在檢查完畢後接著在該表格內點擊某個按鈕。可以使用 `with` 方法來達成。在提供給 `with` 方法的閉包內所進行的操作都會被限制在某個選擇器之內："

#: docs/8.x/dusk.md:block 250 (code)
msgid "$browser->with('.table', function ($table) {\n"
"    $table->assertSee('Hello World')\n"
"          ->clickLink('Delete');\n"
"});\n"
msgstr "$browser->with('.table', function ($table) {\n"
"    $table->assertSee('Hello World')\n"
"          ->clickLink('Delete');\n"
"});\n"

#: docs/8.x/dusk.md:block 251 (paragraph)
msgid "You may occasionally need to execute assertions outside of the current scope. You may use the `elsewhere` and `elsewhereWhenAvailable` methods to accomplish this:"
msgstr "某些時候，我們可能需要在目前的 Scope 外執行 Assertion。可以使用 `elsewhere` 與 `elsewhereWhenAvailable` 方法來進行："

#: docs/8.x/dusk.md:block 252 (code)
msgid " $browser->with('.table', function ($table) {\n"
"    // Current scope is `body .table`...\n\n"
"    $browser->elsewhere('.page-title', function ($title) {\n"
"        // Current scope is `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n\n"
"    $browser->elsewhereWhenAvailable('.page-title', function ($title) {\n"
"        // Current scope is `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n"
" });\n"
msgstr " $browser->with('.table', function ($table) {\n"
"    // 目前範圍為 `body .table`...\n\n"
"    $browser->elsewhere('.page-title', function ($title) {\n"
"        // 目前範圍為 `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n\n"
"    $browser->elsewhereWhenAvailable('.page-title', function ($title) {\n"
"        // 目前範圍為 `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n"
" });\n"

#: docs/8.x/dusk.md:block 254 (header)
msgid "Waiting For Elements"
msgstr "等待元素"

#: docs/8.x/dusk.md:block 255 (paragraph)
msgid "When testing applications that use JavaScript extensively, it often becomes necessary to \"wait\" for certain elements or data to be available before proceeding with a test. Dusk makes this a cinch. Using a variety of methods, you may wait for elements to become visible on the page or even wait until a given JavaScript expression evaluates to `true`."
msgstr "在測試使用了大量 JavaScript 的網站時，常常會需要「等待」特定元素或資料出現後才能繼續進行測試。在 Dusk 中可以輕鬆做到。只需要使用幾個方法，就可以等待元素顯示在頁面上，或是等待某個給定的 JavaScript 運算式取值變為 `true`。"

#: docs/8.x/dusk.md:block 257 (header)
msgid "Waiting"
msgstr "等待"

#: docs/8.x/dusk.md:block 258 (paragraph)
msgid "If you just need to pause the test for a given number of milliseconds, use the `pause` method:"
msgstr "若只是需要將測試暫停幾毫秒，可使用 `pause` 方法："

#: docs/8.x/dusk.md:block 259 (code)
msgid "$browser->pause(1000);\n"
msgstr "$browser->pause(1000);\n"

#: docs/8.x/dusk.md:block 261 (header)
msgid "Waiting For Selectors"
msgstr "等待選擇器"

#: docs/8.x/dusk.md:block 262 (paragraph)
msgid "The `waitFor` method may be used to pause the execution of the test until the element matching the given CSS or Dusk selector is displayed on the page. By default, this will pause the test for a maximum of five seconds before throwing an exception. If necessary, you may pass a custom timeout threshold as the second argument to the method:"
msgstr "`waitFor` 方法可用來暫停執行測試，並等到符合給定 CSS 或 Dusk 選擇器的元素顯示在頁面上。預設情況下，該方法會最多會暫停測試五秒，超過則會擲回例外。若有需要，可以將自訂的逾時閥值傳入為該方法的第二個引數："

#: docs/8.x/dusk.md:block 263 (code)
msgid "// Wait a maximum of five seconds for the selector...\n"
"$browser->waitFor('.selector');\n\n"
"// Wait a maximum of one second for the selector...\n"
"$browser->waitFor('.selector', 1);\n"
msgstr "// 等待選擇器最多 5 秒...\n"
"$browser->waitFor('.selector');\n\n"
"// 等待選擇器最多 1 秒...\n"
"$browser->waitFor('.selector', 1);\n"

#: docs/8.x/dusk.md:block 264 (paragraph)
msgid "You may also wait until the element matching the given selector contains the given text:"
msgstr "也可以等待某個符合給定選擇器的元素出現給定文字："

#: docs/8.x/dusk.md:block 265 (code)
msgid "// Wait a maximum of five seconds for the selector to contain the given text...\n"
"$browser->waitForTextIn('.selector', 'Hello World');\n\n"
"// Wait a maximum of one second for the selector to contain the given text...\n"
"$browser->waitForTextIn('.selector', 'Hello World', 1);\n"
msgstr "// 等待選擇器中包含給定文字最多 5 秒...\n"
"$browser->waitForTextIn('.selector', 'Hello World');\n\n"
"// 等待選擇器中包含給定文字最多 1 秒...\n"
"$browser->waitForTextIn('.selector', 'Hello World', 1);\n"

#: docs/8.x/dusk.md:block 266 (paragraph)
msgid "You may also wait until the element matching the given selector is missing from the page:"
msgstr "也可以等待某個符合給定選擇器的元素消失在頁面上："

#: docs/8.x/dusk.md:block 267 (code)
msgid "// Wait a maximum of five seconds until the selector is missing...\n"
"$browser->waitUntilMissing('.selector');\n\n"
"// Wait a maximum of one second until the selector is missing...\n"
"$browser->waitUntilMissing('.selector', 1);\n"
msgstr "// 等待選擇器不存在，最多 5 秒...\n"
"$browser->waitUntilMissing('.selector');\n\n"
"// 等待選擇器不存在，最多 1 秒...\n"
"$browser->waitUntilMissing('.selector', 1);\n"

#: docs/8.x/dusk.md:block 268 (paragraph)
msgid "Or, you may wait until the element matching the given selector is enabled or disabled:"
msgstr "或者，也可以等待給定的選擇器為 Enabled 或 Disabled："

#: docs/8.x/dusk.md:block 269 (code)
msgid "// Wait a maximum of five seconds until the selector is enabled...\n"
"$browser->waitUntilEnabled('.selector');\n\n"
"// Wait a maximum of one second until the selector is enabled...\n"
"$browser->waitUntilEnabled('.selector', 1);\n\n"
"// Wait a maximum of five seconds until the selector is disabled...\n"
"$browser->waitUntilDisabled('.selector');\n\n"
"// Wait a maximum of one second until the selector is disabled...\n"
"$browser->waitUntilDisabled('.selector', 1);\n"
msgstr "// 等待選擇器啟用，最多 5 秒...\n"
"$browser->waitUntilEnabled('.selector');\n\n"
"// 等待選擇器啟用，最多 1 秒...\n"
"$browser->waitUntilEnabled('.selector', 1);\n\n"
"// 等待選擇器禁用，最多 5 秒...\n"
"$browser->waitUntilDisabled('.selector');\n\n"
"// 等待選擇器禁用，最多 1 秒...\n"
"$browser->waitUntilDisabled('.selector', 1);\n"

#: docs/8.x/dusk.md:block 271 (header)
msgid "Scoping Selectors When Available"
msgstr "可用時進入選擇器的 Scope"

#: docs/8.x/dusk.md:block 272 (paragraph)
msgid "Occasionally, you may wish to wait for an element to appear that matches a given selector and then interact with the element. For example, you may wish to wait until a modal window is available and then press the \"OK\" button within the modal. The `whenAvailable` method may be used to accomplish this. All element operations performed within the given closure will be scoped to the original selector:"
msgstr "有時候我們可能會想等待符合給定選擇器的元素出現在頁面上後再接著與該元素互動。舉例來說，我們可能會想等待某個 Modal 視窗出現，然後在該 Modal 內點擊「OK」按鈕。可以使用 `whenAvailable` 方法來完成。在給定閉包內進行的所有元素操作都會被限制在原始選擇器的作用範圍內："

#: docs/8.x/dusk.md:block 273 (code)
msgid "$browser->whenAvailable('.modal', function ($modal) {\n"
"    $modal->assertSee('Hello World')\n"
"          ->press('OK');\n"
"});\n"
msgstr "$browser->whenAvailable('.modal', function ($modal) {\n"
"    $modal->assertSee('Hello World')\n"
"          ->press('OK');\n"
"});\n"

#: docs/8.x/dusk.md:block 275 (header)
msgid "Waiting For Text"
msgstr "等待文字"

#: docs/8.x/dusk.md:block 276 (paragraph)
msgid "The `waitForText` method may be used to wait until the given text is displayed on the page:"
msgstr "可使用 `waitForText` 方法來等待給定文字顯示在頁面上："

#: docs/8.x/dusk.md:block 277 (code)
msgid "// Wait a maximum of five seconds for the text...\n"
"$browser->waitForText('Hello World');\n\n"
"// Wait a maximum of one second for the text...\n"
"$browser->waitForText('Hello World', 1);\n"
msgstr "// 等待文字，最多 5 秒...\n"
"$browser->waitForText('Hello World');\n\n"
"// 等待文字，最多 1 秒...\n"
"$browser->waitForText('Hello World', 1);\n"

#: docs/8.x/dusk.md:block 278 (paragraph)
msgid "You may use the `waitUntilMissingText` method to wait until the displayed text has been removed from the page:"
msgstr "可以使用 `waitUntilMissingText` 方法來等待某個正在顯示的文字從頁面上移除："

#: docs/8.x/dusk.md:block 279 (code)
msgid "// Wait a maximum of five seconds for the text to be removed...\n"
"$browser->waitUntilMissingText('Hello World');\n\n"
"// Wait a maximum of one second for the text to be removed...\n"
"$browser->waitUntilMissingText('Hello World', 1);\n"
msgstr "// 等待文字移除，最多 5 秒...\n"
"$browser->waitUntilMissingText('Hello World');\n\n"
"// 等待文字移除，最多 1 秒...\n"
"$browser->waitUntilMissingText('Hello World', 1);\n"

#: docs/8.x/dusk.md:block 281 (header)
msgid "Waiting For Links"
msgstr "等待連結"

#: docs/8.x/dusk.md:block 282 (paragraph)
msgid "The `waitForLink` method may be used to wait until the given link text is displayed on the page:"
msgstr "可使用 `waitForLink` 方法來等待給定連結文字顯示在頁面上："

#: docs/8.x/dusk.md:block 283 (code)
msgid "// Wait a maximum of five seconds for the link...\n"
"$browser->waitForLink('Create');\n\n"
"// Wait a maximum of one second for the link...\n"
"$browser->waitForLink('Create', 1);\n"
msgstr "// 等待連結，最多 5 秒...\n"
"$browser->waitForLink('Create');\n\n"
"// 等待連結，最多 1 秒...\n"
"$browser->waitForLink('Create', 1);\n"

#: docs/8.x/dusk.md:block 285 (header)
msgid "Waiting On The Page Location"
msgstr "等待網頁位置"

#: docs/8.x/dusk.md:block 286 (paragraph)
msgid "When making a path assertion such as `$browser->assertPathIs('/home')`, the assertion can fail if `window.location.pathname` is being updated asynchronously. You may use the `waitForLocation` method to wait for the location to be a given value:"
msgstr "在進行如 `$browser->assertPathIs('/home')` 這種路徑 Assertion 時，如果 `window.location.pathname` 是非同步更新的，則該 Assertion 可能會失敗。可以使用 `waitForLocation` 方法來等待路徑為給定的值："

#: docs/8.x/dusk.md:block 287 (code)
msgid "$browser->waitForLocation('/secret');\n"
msgstr "$browser->waitForLocation('/secret');\n"

#: docs/8.x/dusk.md:block 288 (paragraph)
msgid "The `waitForLocation` method can also be used to wait for the current window location to be a fully qualified URL:"
msgstr "也可以使用 `waitForLocation` 方法來等待目前視窗的路徑符合完整的 URL："

#: docs/8.x/dusk.md:block 289 (code)
msgid "$browser->waitForLocation('https://example.com/path');\n"
msgstr "$browser->waitForLocation('https://example.com/path');\n"

#: docs/8.x/dusk.md:block 290 (paragraph)
msgid "You may also wait for a [named route's](/docs/{{version}}/routing#named-routes) location:"
msgstr "也可以等待 [命名路由](/docs/{{version}}/routing#named-routes) 的位置："

#: docs/8.x/dusk.md:block 291 (code)
msgid "$browser->waitForRoute($routeName, $parameters);\n"
msgstr "$browser->waitForRoute($routeName, $parameters);\n"

#: docs/8.x/dusk.md:block 293 (header)
msgid "Waiting for Page Reloads"
msgstr "等待頁面重新整理"

#: docs/8.x/dusk.md:block 294 (paragraph)
msgid "If you need to wait for a page to reload after performing an action, use the `waitForReload` method:"
msgstr "若有需要在執行特定動作前等待頁面重新整理，請使用 `waitForReload` 方法："

#: docs/8.x/dusk.md:block 295 (code)
msgid "use Laravel\\Dusk\\Browser;\n\n"
"$browser->waitForReload(function (Browser $browser) {\n"
"    $browser->press('Submit');\n"
"})\n"
"->assertSee('Success!');\n"
msgstr "use Laravel\\Dusk\\Browser;\n\n"
"$browser->waitForReload(function (Browser $browser) {\n"
"    $browser->press('Submit');\n"
"})\n"
"->assertSee('Success!');\n"

#: docs/8.x/dusk.md:block 296 (paragraph)
msgid "Since the need to wait for the page to reload typically occurs after clicking a button, you may use the `clickAndWaitForReload` method for convenience:"
msgstr "由於我們通常會在點擊按鈕後等待頁面重新整理，因此可以使用更方便的 `clickAndWaitForReload` 方法："

#: docs/8.x/dusk.md:block 297 (code)
msgid "$browser->clickAndWaitForReload('.selector')\n"
"        ->assertSee('something');\n"
msgstr "$browser->clickAndWaitForReload('.selector')\n"
"        ->assertSee('something');\n"

#: docs/8.x/dusk.md:block 299 (header)
msgid "Waiting On JavaScript Expressions"
msgstr "等待 JavaScript 運算式"

#: docs/8.x/dusk.md:block 300 (paragraph)
msgid "Sometimes you may wish to pause the execution of a test until a given JavaScript expression evaluates to `true`. You may easily accomplish this using the `waitUntil` method. When passing an expression to this method, you do not need to include the `return` keyword or an ending semi-colon:"
msgstr "有時候，我們可能會想暫停測試並等待某個給定的 JavaScript 運算式取值為 `true`。可使用 `waitUntil` 方法來輕鬆達成。將運算式傳給該方法時，不需要包含 `return` 關鍵字或結尾的分號："

#: docs/8.x/dusk.md:block 301 (code)
msgid "// Wait a maximum of five seconds for the expression to be true...\n"
"$browser->waitUntil('App.data.servers.length > 0');\n\n"
"// Wait a maximum of one second for the expression to be true...\n"
"$browser->waitUntil('App.data.servers.length > 0', 1);\n"
msgstr "// 等待運算式為 True，最多 5 秒...\n"
"$browser->waitUntil('App.data.servers.length > 0');\n\n"
"// 等待運算式為 True，最多 1 秒...\n"
"$browser->waitUntil('App.data.servers.length > 0', 1);\n"

#: docs/8.x/dusk.md:block 303 (header)
msgid "Waiting On Vue Expressions"
msgstr "等待 Vue 運算式"

#: docs/8.x/dusk.md:block 304 (paragraph)
msgid "The `waitUntilVue` and `waitUntilVueIsNot` methods may be used to wait until a [Vue component](https://vuejs.org) attribute has a given value:"
msgstr "可使用 `waitUntilVue` 與 `waitUntilVueIsNot` 方法來等待給定的 [Vue 元件](https://vuejs.org) 屬性具有給定的值："

#: docs/8.x/dusk.md:block 305 (code)
msgid "// Wait until the component attribute contains the given value...\n"
"$browser->waitUntilVue('user.name', 'Taylor', '@user');\n\n"
"// Wait until the component attribute doesn't contain the given value...\n"
"$browser->waitUntilVueIsNot('user.name', null, '@user');\n"
msgstr "// 等待直到 Vue 元件的屬性包含給定值...\n"
"$browser->waitUntilVue('user.name', 'Taylor', '@user');\n\n"
"// 等待直到 Vue 元件的屬性不包含給定值...\n"
"$browser->waitUntilVueIsNot('user.name', null, '@user');\n"

#: docs/8.x/dusk.md:block 307 (header)
msgid "Waiting With A Callback"
msgstr "包含回呼的等待"

#: docs/8.x/dusk.md:block 308 (paragraph)
msgid "Many of the \"wait\" methods in Dusk rely on the underlying `waitUsing` method. You may use this method directly to wait for a given closure to return `true`. The `waitUsing` method accepts the maximum number of seconds to wait, the interval at which the closure should be evaluated, the closure, and an optional failure message:"
msgstr "在 Dusk 中，許多的「wait」方法都仰賴於底層的 `waitUsing` 方法。可以直接使用該方法來等待給定的閉包回傳 `true`。`waitUsing` 方法接受等待最大秒數、閉包取值的時間間隔、閉包、以及一個可選的錯誤訊息："

#: docs/8.x/dusk.md:block 309 (code)
msgid "$browser->waitUsing(10, 1, function () use ($something) {\n"
"    return $something->isReady();\n"
"}, \"Something wasn't ready in time.\");\n"
msgstr "$browser->waitUsing(10, 1, function () use ($something) {\n"
"    return $something->isReady();\n"
"}, \"Something wasn't ready in time.\");\n"

#: docs/8.x/dusk.md:block 311 (header)
msgid "Scrolling An Element Into View"
msgstr "將元素滾動進也沒"

#: docs/8.x/dusk.md:block 312 (paragraph)
msgid "Sometimes you may not be able to click on an element because it is outside of the viewable area of the browser. The `scrollIntoView` method will scroll the browser window until the element at the given selector is within the view:"
msgstr "有時候，我們可能沒辦法點擊某個元素，因為該元素在瀏覽器可視區域外。使用 `scrollIntoView` 方法可以滾動瀏覽器視窗，直到給定選擇器元素出現在顯示區內："

#: docs/8.x/dusk.md:block 313 (code)
msgid "$browser->scrollIntoView('.selector')\n"
"        ->click('.selector');\n"
msgstr "$browser->scrollIntoView('.selector')\n"
"        ->click('.selector');\n"

#: docs/8.x/dusk.md:block 315 (header)
msgid "Available Assertions"
msgstr "可用的 Assertion"

#: docs/8.x/dusk.md:block 316 (paragraph)
msgid "Dusk provides a variety of assertions that you may make against your application. All of the available assertions are documented in the list below:"
msgstr "Dusk 提供了多種可對網站進行的 Assertion。下面列出了所有可用的 Assertion："

#: docs/8.x/dusk.md:block 319 (paragraph)
msgid "[assertTitle](#assert-title) [assertTitleContains](#assert-title-contains) [assertUrlIs](#assert-url-is) [assertSchemeIs](#assert-scheme-is) [assertSchemeIsNot](#assert-scheme-is-not) [assertHostIs](#assert-host-is) [assertHostIsNot](#assert-host-is-not) [assertPortIs](#assert-port-is) [assertPortIsNot](#assert-port-is-not) [assertPathBeginsWith](#assert-path-begins-with) [assertPathIs](#assert-path-is) [assertPathIsNot](#assert-path-is-not) [assertRouteIs](#assert-route-is) [assertQueryStringHas](#assert-query-string-has) [assertQueryStringMissing](#assert-query-string-missing) [assertFragmentIs](#assert-fragment-is) [assertFragmentBeginsWith](#assert-fragment-begins-with) [assertFragmentIsNot](#assert-fragment-is-not) [assertHasCookie](#assert-has-cookie) [assertHasPlainCookie](#assert-has-plain-cookie) [assertCookieMissing](#assert-cookie-missing) [assertPlainCookieMissing](#assert-plain-cookie-missing) [assertCookieValue](#assert-cookie-value) [assertPlainCookieValue](#assert-plain-cookie-value) [assertSee](#assert-see) [assertDontSee](#assert-dont-see) [assertSeeIn](#assert-see-in) [assertDontSeeIn](#assert-dont-see-in) [assertSeeAnythingIn](#assert-see-anything-in) [assertSeeNothingIn](#assert-see-nothing-in) [assertScript](#assert-script) [assertSourceHas](#assert-source-has) [assertSourceMissing](#assert-source-missing) [assertSeeLink](#assert-see-link) [assertDontSeeLink](#assert-dont-see-link) [assertInputValue](#assert-input-value) [assertInputValueIsNot](#assert-input-value-is-not) [assertChecked](#assert-checked) [assertNotChecked](#assert-not-checked) [assertRadioSelected](#assert-radio-selected) [assertRadioNotSelected](#assert-radio-not-selected) [assertSelected](#assert-selected) [assertNotSelected](#assert-not-selected) [assertSelectHasOptions](#assert-select-has-options) [assertSelectMissingOptions](#assert-select-missing-options) [assertSelectHasOption](#assert-select-has-option) [assertSelectMissingOption](#assert-select-missing-option) [assertValue](#assert-value) [assertValueIsNot](#assert-value-is-not) [assertAttribute](#assert-attribute) [assertAttributeContains](#assert-attribute-contains) [assertAriaAttribute](#assert-aria-attribute) [assertDataAttribute](#assert-data-attribute) [assertVisible](#assert-visible) [assertPresent](#assert-present) [assertNotPresent](#assert-not-present) [assertMissing](#assert-missing) [assertInputPresent](#assert-input-present) [assertInputMissing](#assert-input-missing) [assertDialogOpened](#assert-dialog-opened) [assertEnabled](#assert-enabled) [assertDisabled](#assert-disabled) [assertButtonEnabled](#assert-button-enabled) [assertButtonDisabled](#assert-button-disabled) [assertFocused](#assert-focused) [assertNotFocused](#assert-not-focused) [assertAuthenticated](#assert-authenticated) [assertGuest](#assert-guest) [assertAuthenticatedAs](#assert-authenticated-as) [assertVue](#assert-vue) [assertVueIsNot](#assert-vue-is-not) [assertVueContains](#assert-vue-contains) [assertVueDoesNotContain](#assert-vue-does-not-contain)"
msgstr "[assertTitle](#assert-title) [assertTitleContains](#assert-title-contains) [assertUrlIs](#assert-url-is) [assertSchemeIs](#assert-scheme-is) [assertSchemeIsNot](#assert-scheme-is-not) [assertHostIs](#assert-host-is) [assertHostIsNot](#assert-host-is-not) [assertPortIs](#assert-port-is) [assertPortIsNot](#assert-port-is-not) [assertPathBeginsWith](#assert-path-begins-with) [assertPathIs](#assert-path-is) [assertPathIsNot](#assert-path-is-not) [assertRouteIs](#assert-route-is) [assertQueryStringHas](#assert-query-string-has) [assertQueryStringMissing](#assert-query-string-missing) [assertFragmentIs](#assert-fragment-is) [assertFragmentBeginsWith](#assert-fragment-begins-with) [assertFragmentIsNot](#assert-fragment-is-not) [assertHasCookie](#assert-has-cookie) [assertHasPlainCookie](#assert-has-plain-cookie) [assertCookieMissing](#assert-cookie-missing) [assertPlainCookieMissing](#assert-plain-cookie-missing) [assertCookieValue](#assert-cookie-value) [assertPlainCookieValue](#assert-plain-cookie-value) [assertSee](#assert-see) [assertDontSee](#assert-dont-see) [assertSeeIn](#assert-see-in) [assertDontSeeIn](#assert-dont-see-in) [assertSeeAnythingIn](#assert-see-anything-in) [assertSeeNothingIn](#assert-see-nothing-in) [assertScript](#assert-script) [assertSourceHas](#assert-source-has) [assertSourceMissing](#assert-source-missing) [assertSeeLink](#assert-see-link) [assertDontSeeLink](#assert-dont-see-link) [assertInputValue](#assert-input-value) [assertInputValueIsNot](#assert-input-value-is-not) [assertChecked](#assert-checked) [assertNotChecked](#assert-not-checked) [assertRadioSelected](#assert-radio-selected) [assertRadioNotSelected](#assert-radio-not-selected) [assertSelected](#assert-selected) [assertNotSelected](#assert-not-selected) [assertSelectHasOptions](#assert-select-has-options) [assertSelectMissingOptions](#assert-select-missing-options) [assertSelectHasOption](#assert-select-has-option) [assertSelectMissingOption](#assert-select-missing-option) [assertValue](#assert-value) [assertValueIsNot](#assert-value-is-not) [assertAttribute](#assert-attribute) [assertAttributeContains](#assert-attribute-contains) [assertAriaAttribute](#assert-aria-attribute) [assertDataAttribute](#assert-data-attribute) [assertVisible](#assert-visible) [assertPresent](#assert-present) [assertNotPresent](#assert-not-present) [assertMissing](#assert-missing) [assertInputPresent](#assert-input-present) [assertInputMissing](#assert-input-missing) [assertDialogOpened](#assert-dialog-opened) [assertEnabled](#assert-enabled) [assertDisabled](#assert-disabled) [assertButtonEnabled](#assert-button-enabled) [assertButtonDisabled](#assert-button-disabled) [assertFocused](#assert-focused) [assertNotFocused](#assert-not-focused) [assertAuthenticated](#assert-authenticated) [assertGuest](#assert-guest) [assertAuthenticatedAs](#assert-authenticated-as) [assertVue](#assert-vue) [assertVueIsNot](#assert-vue-is-not) [assertVueContains](#assert-vue-contains) [assertVueDoesNotContain](#assert-vue-does-not-contain)"

#: docs/8.x/dusk.md:block 322 (header)
msgid "assertTitle"
msgstr "assertTitle"

#: docs/8.x/dusk.md:block 323 (paragraph)
msgid "Assert that the page title matches the given text:"
msgstr "判斷頁面標題符合給定文字："

#: docs/8.x/dusk.md:block 324 (code)
msgid "$browser->assertTitle($title);\n"
msgstr "$browser->assertTitle($title);\n"

#: docs/8.x/dusk.md:block 326 (header)
msgid "assertTitleContains"
msgstr "assertTitleContains"

#: docs/8.x/dusk.md:block 327 (paragraph)
msgid "Assert that the page title contains the given text:"
msgstr "判斷頁面標題包含給定文字："

#: docs/8.x/dusk.md:block 328 (code)
msgid "$browser->assertTitleContains($title);\n"
msgstr "$browser->assertTitleContains($title);\n"

#: docs/8.x/dusk.md:block 330 (header)
msgid "assertUrlIs"
msgstr "assertUrlIs"

#: docs/8.x/dusk.md:block 331 (paragraph)
msgid "Assert that the current URL (without the query string) matches the given string:"
msgstr "判斷目前 URL (不含查詢字串 Query String) 符合給定字串："

#: docs/8.x/dusk.md:block 332 (code)
msgid "$browser->assertUrlIs($url);\n"
msgstr "$browser->assertUrlIs($url);\n"

#: docs/8.x/dusk.md:block 334 (header)
msgid "assertSchemeIs"
msgstr "assertSchemeIs"

#: docs/8.x/dusk.md:block 335 (paragraph)
msgid "Assert that the current URL scheme matches the given scheme:"
msgstr "判斷目前 URL 的協定 (Scheme) 符合給定協定："

#: docs/8.x/dusk.md:block 336 (code)
msgid "$browser->assertSchemeIs($scheme);\n"
msgstr "$browser->assertSchemeIs($scheme);\n"

#: docs/8.x/dusk.md:block 338 (header)
msgid "assertSchemeIsNot"
msgstr "assertSchemeIsNot"

#: docs/8.x/dusk.md:block 339 (paragraph)
msgid "Assert that the current URL scheme does not match the given scheme:"
msgstr "判斷目前的 URL 協定 (Scheme) 不符合給定協定："

#: docs/8.x/dusk.md:block 340 (code)
msgid "$browser->assertSchemeIsNot($scheme);\n"
msgstr "$browser->assertSchemeIsNot($scheme);\n"

#: docs/8.x/dusk.md:block 342 (header)
msgid "assertHostIs"
msgstr "assertHostIs"

#: docs/8.x/dusk.md:block 343 (paragraph)
msgid "Assert that the current URL host matches the given host:"
msgstr "判斷目前 URL 的主機名稱 (Host) 符合給定主機名稱："

#: docs/8.x/dusk.md:block 344 (code)
msgid "$browser->assertHostIs($host);\n"
msgstr "$browser->assertHostIs($host);\n"

#: docs/8.x/dusk.md:block 346 (header)
msgid "assertHostIsNot"
msgstr "assertHostIsNot"

#: docs/8.x/dusk.md:block 347 (paragraph)
msgid "Assert that the current URL host does not match the given host:"
msgstr "判斷目前 URL 的主機名稱 (Host) 不符合給定主機名稱："

#: docs/8.x/dusk.md:block 348 (code)
msgid "$browser->assertHostIsNot($host);\n"
msgstr "$browser->assertHostIsNot($host);\n"

#: docs/8.x/dusk.md:block 350 (header)
msgid "assertPortIs"
msgstr "assertPortIs"

#: docs/8.x/dusk.md:block 351 (paragraph)
msgid "Assert that the current URL port matches the given port:"
msgstr "判斷目前 URL 的連接埠 (Port) 符合給定連接埠："

#: docs/8.x/dusk.md:block 352 (code)
msgid "$browser->assertPortIs($port);\n"
msgstr "$browser->assertPortIs($port);\n"

#: docs/8.x/dusk.md:block 354 (header)
msgid "assertPortIsNot"
msgstr "assertPortIsNot"

#: docs/8.x/dusk.md:block 355 (paragraph)
msgid "Assert that the current URL port does not match the given port:"
msgstr "判斷目前 URL 的連接埠 (Port) 不符合給定連接埠："

#: docs/8.x/dusk.md:block 356 (code)
msgid "$browser->assertPortIsNot($port);\n"
msgstr "$browser->assertPortIsNot($port);\n"

#: docs/8.x/dusk.md:block 358 (header)
msgid "assertPathBeginsWith"
msgstr "assertPathBeginsWith"

#: docs/8.x/dusk.md:block 359 (paragraph)
msgid "Assert that the current URL path begins with the given path:"
msgstr "判斷目前 URL 的路徑 (Path) 以給定路徑開始："

#: docs/8.x/dusk.md:block 360 (code)
msgid "$browser->assertPathBeginsWith('/home');\n"
msgstr "$browser->assertPathBeginsWith('/home');\n"

#: docs/8.x/dusk.md:block 362 (header)
msgid "assertPathIs"
msgstr "assertPathIs"

#: docs/8.x/dusk.md:block 363 (paragraph)
msgid "Assert that the current path matches the given path:"
msgstr "判斷目前路徑 (Path) 符合給定路徑："

#: docs/8.x/dusk.md:block 364 (code)
msgid "$browser->assertPathIs('/home');\n"
msgstr "$browser->assertPathIs('/home');\n"

#: docs/8.x/dusk.md:block 366 (header)
msgid "assertPathIsNot"
msgstr "assertPathIsNot"

#: docs/8.x/dusk.md:block 367 (paragraph)
msgid "Assert that the current path does not match the given path:"
msgstr "判斷目前路徑不符合給定路徑："

#: docs/8.x/dusk.md:block 368 (code)
msgid "$browser->assertPathIsNot('/home');\n"
msgstr "$browser->assertPathIsNot('/home');\n"

#: docs/8.x/dusk.md:block 370 (header)
msgid "assertRouteIs"
msgstr "assertRouteIs"

#: docs/8.x/dusk.md:block 371 (paragraph)
msgid "Assert that the current URL matches the given [named route's](/docs/{{version}}/routing#named-routes) URL:"
msgstr "判斷目前 URL 符合給定的 [命名路由](/docs/{{version}}/routing#named-routes) URL："

#: docs/8.x/dusk.md:block 372 (code)
msgid "$browser->assertRouteIs($name, $parameters);\n"
msgstr "$browser->assertRouteIs($name, $parameters);\n"

#: docs/8.x/dusk.md:block 374 (header)
msgid "assertQueryStringHas"
msgstr "assertQueryStringHas"

#: docs/8.x/dusk.md:block 375 (paragraph)
msgid "Assert that the given query string parameter is present:"
msgstr "判斷查詢字串 (Query String) 有包含給定參數："

#: docs/8.x/dusk.md:block 376 (code)
msgid "$browser->assertQueryStringHas($name);\n"
msgstr "$browser->assertQueryStringHas($name);\n"

#: docs/8.x/dusk.md:block 377 (paragraph)
msgid "Assert that the given query string parameter is present and has a given value:"
msgstr "判斷查詢字串有包含給定參數，並符合給定的值："

#: docs/8.x/dusk.md:block 378 (code)
msgid "$browser->assertQueryStringHas($name, $value);\n"
msgstr "$browser->assertQueryStringHas($name, $value);\n"

#: docs/8.x/dusk.md:block 380 (header)
msgid "assertQueryStringMissing"
msgstr "assertQueryStringMissing"

#: docs/8.x/dusk.md:block 381 (paragraph)
msgid "Assert that the given query string parameter is missing:"
msgstr "判斷查詢字串 (Query String) 不包含給定的參數："

#: docs/8.x/dusk.md:block 382 (code)
msgid "$browser->assertQueryStringMissing($name);\n"
msgstr "$browser->assertQueryStringMissing($name);\n"

#: docs/8.x/dusk.md:block 384 (header)
msgid "assertFragmentIs"
msgstr "assertFragmentIs"

#: docs/8.x/dusk.md:block 385 (paragraph)
msgid "Assert that the URL's current hash fragment matches the given fragment:"
msgstr "判斷 URL 目前的雜湊片段 (Hash Fragment) 符合給定的片段："

#: docs/8.x/dusk.md:block 386 (code)
msgid "$browser->assertFragmentIs('anchor');\n"
msgstr "$browser->assertFragmentIs('anchor');\n"

#: docs/8.x/dusk.md:block 388 (header)
msgid "assertFragmentBeginsWith"
msgstr "assertFragmentBeginsWith"

#: docs/8.x/dusk.md:block 389 (paragraph)
msgid "Assert that the URL's current hash fragment begins with the given fragment:"
msgstr "判斷 URL 目前的雜湊片段 (Hash Fragment) 以給定的片段開始："

#: docs/8.x/dusk.md:block 390 (code)
msgid "$browser->assertFragmentBeginsWith('anchor');\n"
msgstr "$browser->assertFragmentBeginsWith('anchor');\n"

#: docs/8.x/dusk.md:block 392 (header)
msgid "assertFragmentIsNot"
msgstr "assertFragmentIsNot"

#: docs/8.x/dusk.md:block 393 (paragraph)
msgid "Assert that the URL's current hash fragment does not match the given fragment:"
msgstr "判斷 URL 目前的雜湊片段 (Hash Fragment) 不符合給定的片段："

#: docs/8.x/dusk.md:block 394 (code)
msgid "$browser->assertFragmentIsNot('anchor');\n"
msgstr "$browser->assertFragmentIsNot('anchor');\n"

#: docs/8.x/dusk.md:block 396 (header)
msgid "assertHasCookie"
msgstr "assertHasCookie"

#: docs/8.x/dusk.md:block 397 (paragraph)
msgid "Assert that the given encrypted cookie is present:"
msgstr "判斷 Cookie 中含有給定的加密 Cookie："

#: docs/8.x/dusk.md:block 398 (code)
msgid "$browser->assertHasCookie($name);\n"
msgstr "$browser->assertHasCookie($name);\n"

#: docs/8.x/dusk.md:block 400 (header)
msgid "assertHasPlainCookie"
msgstr "assertHasPlainCookie"

#: docs/8.x/dusk.md:block 401 (paragraph)
msgid "Assert that the given unencrypted cookie is present:"
msgstr "判斷 Cookie 中含有給定的未加密 Cookie："

#: docs/8.x/dusk.md:block 402 (code)
msgid "$browser->assertHasPlainCookie($name);\n"
msgstr "$browser->assertHasPlainCookie($name);\n"

#: docs/8.x/dusk.md:block 404 (header)
msgid "assertCookieMissing"
msgstr "assertCookieMissing"

#: docs/8.x/dusk.md:block 405 (paragraph)
msgid "Assert that the given encrypted cookie is not present:"
msgstr "判斷 Cookie 中不包含給定的加密 Cookie："

#: docs/8.x/dusk.md:block 406 (code)
msgid "$browser->assertCookieMissing($name);\n"
msgstr "$browser->assertCookieMissing($name);\n"

#: docs/8.x/dusk.md:block 408 (header)
msgid "assertPlainCookieMissing"
msgstr "assertPlainCookieMissing"

#: docs/8.x/dusk.md:block 409 (paragraph)
msgid "Assert that the given unencrypted cookie is not present:"
msgstr "判斷 Cookie 中不包含給定的未加密 Cookie："

#: docs/8.x/dusk.md:block 410 (code)
msgid "$browser->assertPlainCookieMissing($name);\n"
msgstr "$browser->assertPlainCookieMissing($name);\n"

#: docs/8.x/dusk.md:block 412 (header)
msgid "assertCookieValue"
msgstr "assertCookieValue"

#: docs/8.x/dusk.md:block 413 (paragraph)
msgid "Assert that an encrypted cookie has a given value:"
msgstr "判斷加密 Cookie 為給定的值："

#: docs/8.x/dusk.md:block 414 (code)
msgid "$browser->assertCookieValue($name, $value);\n"
msgstr "$browser->assertCookieValue($name, $value);\n"

#: docs/8.x/dusk.md:block 416 (header)
msgid "assertPlainCookieValue"
msgstr "assertPlainCookieValue"

#: docs/8.x/dusk.md:block 417 (paragraph)
msgid "Assert that an unencrypted cookie has a given value:"
msgstr "判斷未加密 Cookie 為給定的值："

#: docs/8.x/dusk.md:block 418 (code)
msgid "$browser->assertPlainCookieValue($name, $value);\n"
msgstr "$browser->assertPlainCookieValue($name, $value);\n"

#: docs/8.x/dusk.md:block 420 (header)
msgid "assertSee"
msgstr "assertSee"

#: docs/8.x/dusk.md:block 421 (paragraph)
msgid "Assert that the given text is present on the page:"
msgstr "判斷給定文字有出現在頁面上："

#: docs/8.x/dusk.md:block 422 (code)
msgid "$browser->assertSee($text);\n"
msgstr "$browser->assertSee($text);\n"

#: docs/8.x/dusk.md:block 424 (header)
msgid "assertDontSee"
msgstr "assertDontSee"

#: docs/8.x/dusk.md:block 425 (paragraph)
msgid "Assert that the given text is not present on the page:"
msgstr "判斷給定文字未出現在頁面上："

#: docs/8.x/dusk.md:block 426 (code)
msgid "$browser->assertDontSee($text);\n"
msgstr "$browser->assertDontSee($text);\n"

#: docs/8.x/dusk.md:block 428 (header)
msgid "assertSeeIn"
msgstr "assertSeeIn"

#: docs/8.x/dusk.md:block 429 (paragraph)
msgid "Assert that the given text is present within the selector:"
msgstr "判斷給定文字出現在選擇器中："

#: docs/8.x/dusk.md:block 430 (code)
msgid "$browser->assertSeeIn($selector, $text);\n"
msgstr "$browser->assertSeeIn($selector, $text);\n"

#: docs/8.x/dusk.md:block 432 (header)
msgid "assertDontSeeIn"
msgstr "assertDontSeeIn"

#: docs/8.x/dusk.md:block 433 (paragraph)
msgid "Assert that the given text is not present within the selector:"
msgstr "判斷給定文字未出現在選擇器中："

#: docs/8.x/dusk.md:block 434 (code)
msgid "$browser->assertDontSeeIn($selector, $text);\n"
msgstr "$browser->assertDontSeeIn($selector, $text);\n"

#: docs/8.x/dusk.md:block 436 (header)
msgid "assertSeeAnythingIn"
msgstr "assertSeeAnythingIn"

#: docs/8.x/dusk.md:block 437 (paragraph)
msgid "Assert that any text is present within the selector:"
msgstr "判斷選擇器中有包含任何文字："

#: docs/8.x/dusk.md:block 438 (code)
msgid "$browser->assertSeeAnythingIn($selector);\n"
msgstr "$browser->assertSeeAnythingIn($selector);\n"

#: docs/8.x/dusk.md:block 440 (header)
msgid "assertSeeNothingIn"
msgstr "assertSeeNothingIn"

#: docs/8.x/dusk.md:block 441 (paragraph)
msgid "Assert that no text is present within the selector:"
msgstr "判斷選擇器中未包含任何文字："

#: docs/8.x/dusk.md:block 442 (code)
msgid "$browser->assertSeeNothingIn($selector);\n"
msgstr "$browser->assertSeeNothingIn($selector);\n"

#: docs/8.x/dusk.md:block 444 (header)
msgid "assertScript"
msgstr "assertScript"

#: docs/8.x/dusk.md:block 445 (paragraph)
msgid "Assert that the given JavaScript expression evaluates to the given value:"
msgstr "判斷給定的 JavaScript 運算式取值為給定的值："

#: docs/8.x/dusk.md:block 446 (code)
msgid "$browser->assertScript('window.isLoaded')\n"
"        ->assertScript('document.readyState', 'complete');\n"
msgstr "$browser->assertScript('window.isLoaded')\n"
"        ->assertScript('document.readyState', 'complete');\n"

#: docs/8.x/dusk.md:block 448 (header)
msgid "assertSourceHas"
msgstr "assertSourceHas"

#: docs/8.x/dusk.md:block 449 (paragraph)
msgid "Assert that the given source code is present on the page:"
msgstr "判斷給定的原始碼有出現在頁面上："

#: docs/8.x/dusk.md:block 450 (code)
msgid "$browser->assertSourceHas($code);\n"
msgstr "$browser->assertSourceHas($code);\n"

#: docs/8.x/dusk.md:block 452 (header)
msgid "assertSourceMissing"
msgstr "assertSourceMissing"

#: docs/8.x/dusk.md:block 453 (paragraph)
msgid "Assert that the given source code is not present on the page:"
msgstr "判斷給定的原始碼未出現在頁面上："

#: docs/8.x/dusk.md:block 454 (code)
msgid "$browser->assertSourceMissing($code);\n"
msgstr "$browser->assertSourceMissing($code);\n"

#: docs/8.x/dusk.md:block 456 (header)
msgid "assertSeeLink"
msgstr "assertSeeLink"

#: docs/8.x/dusk.md:block 457 (paragraph)
msgid "Assert that the given link is present on the page:"
msgstr "判斷給定連結有出現在頁面上："

#: docs/8.x/dusk.md:block 458 (code)
msgid "$browser->assertSeeLink($linkText);\n"
msgstr "$browser->assertSeeLink($linkText);\n"

#: docs/8.x/dusk.md:block 460 (header)
msgid "assertDontSeeLink"
msgstr "assertDontSeeLink"

#: docs/8.x/dusk.md:block 461 (paragraph)
msgid "Assert that the given link is not present on the page:"
msgstr "判斷給定連結未出現在頁面上："

#: docs/8.x/dusk.md:block 462 (code)
msgid "$browser->assertDontSeeLink($linkText);\n"
msgstr "$browser->assertDontSeeLink($linkText);\n"

#: docs/8.x/dusk.md:block 464 (header)
msgid "assertInputValue"
msgstr "assertInputValue"

#: docs/8.x/dusk.md:block 465 (paragraph)
msgid "Assert that the given input field has the given value:"
msgstr "判斷給定的輸入欄位為給定值："

#: docs/8.x/dusk.md:block 466 (code)
msgid "$browser->assertInputValue($field, $value);\n"
msgstr "$browser->assertInputValue($field, $value);\n"

#: docs/8.x/dusk.md:block 468 (header)
msgid "assertInputValueIsNot"
msgstr "assertInputValueIsNot"

#: docs/8.x/dusk.md:block 469 (paragraph)
msgid "Assert that the given input field does not have the given value:"
msgstr "判斷給定的輸入欄位不是給定值："

#: docs/8.x/dusk.md:block 470 (code)
msgid "$browser->assertInputValueIsNot($field, $value);\n"
msgstr "$browser->assertInputValueIsNot($field, $value);\n"

#: docs/8.x/dusk.md:block 472 (header)
msgid "assertChecked"
msgstr "assertChecked"

#: docs/8.x/dusk.md:block 473 (paragraph)
msgid "Assert that the given checkbox is checked:"
msgstr "判斷給定多選況已勾選："

#: docs/8.x/dusk.md:block 474 (code)
msgid "$browser->assertChecked($field);\n"
msgstr "$browser->assertChecked($field);\n"

#: docs/8.x/dusk.md:block 476 (header)
msgid "assertNotChecked"
msgstr "assertNotChecked"

#: docs/8.x/dusk.md:block 477 (paragraph)
msgid "Assert that the given checkbox is not checked:"
msgstr "判斷給定多選況未勾選："

#: docs/8.x/dusk.md:block 478 (code)
msgid "$browser->assertNotChecked($field);\n"
msgstr "$browser->assertNotChecked($field);\n"

#: docs/8.x/dusk.md:block 480 (header)
msgid "assertRadioSelected"
msgstr "assertRadioSelected"

#: docs/8.x/dusk.md:block 481 (paragraph)
msgid "Assert that the given radio field is selected:"
msgstr "判斷給定單選框欄位已選擇："

#: docs/8.x/dusk.md:block 482 (code)
msgid "$browser->assertRadioSelected($field, $value);\n"
msgstr "$browser->assertRadioSelected($field, $value);\n"

#: docs/8.x/dusk.md:block 484 (header)
msgid "assertRadioNotSelected"
msgstr "assertRadioNotSelected"

#: docs/8.x/dusk.md:block 485 (paragraph)
msgid "Assert that the given radio field is not selected:"
msgstr "判斷給定單選框欄位未選擇："

#: docs/8.x/dusk.md:block 486 (code)
msgid "$browser->assertRadioNotSelected($field, $value);\n"
msgstr "$browser->assertRadioNotSelected($field, $value);\n"

#: docs/8.x/dusk.md:block 488 (header)
msgid "assertSelected"
msgstr "assertSelected"

#: docs/8.x/dusk.md:block 489 (paragraph)
msgid "Assert that the given dropdown has the given value selected:"
msgstr "判斷給定下拉選單已選擇給定值："

#: docs/8.x/dusk.md:block 490 (code)
msgid "$browser->assertSelected($field, $value);\n"
msgstr "$browser->assertSelected($field, $value);\n"

#: docs/8.x/dusk.md:block 492 (header)
msgid "assertNotSelected"
msgstr "assertNotSelected"

#: docs/8.x/dusk.md:block 493 (paragraph)
msgid "Assert that the given dropdown does not have the given value selected:"
msgstr "判斷給定下拉選單未選擇給定值："

#: docs/8.x/dusk.md:block 494 (code)
msgid "$browser->assertNotSelected($field, $value);\n"
msgstr "$browser->assertNotSelected($field, $value);\n"

#: docs/8.x/dusk.md:block 496 (header)
msgid "assertSelectHasOptions"
msgstr "assertSelectHasOptions"

#: docs/8.x/dusk.md:block 497 (paragraph)
msgid "Assert that the given array of values are available to be selected:"
msgstr "判斷給定陣列中的值可被選取："

#: docs/8.x/dusk.md:block 498 (code)
msgid "$browser->assertSelectHasOptions($field, $values);\n"
msgstr "$browser->assertSelectHasOptions($field, $values);\n"

#: docs/8.x/dusk.md:block 500 (header)
msgid "assertSelectMissingOptions"
msgstr "assertSelectMissingOptions"

#: docs/8.x/dusk.md:block 501 (paragraph)
msgid "Assert that the given array of values are not available to be selected:"
msgstr "判斷給定陣列中的值不可被選取："

#: docs/8.x/dusk.md:block 502 (code)
msgid "$browser->assertSelectMissingOptions($field, $values);\n"
msgstr "$browser->assertSelectMissingOptions($field, $values);\n"

#: docs/8.x/dusk.md:block 504 (header)
msgid "assertSelectHasOption"
msgstr "assertSelectHasOption"

#: docs/8.x/dusk.md:block 505 (paragraph)
msgid "Assert that the given value is available to be selected on the given field:"
msgstr "判斷給定值在給定欄位中可被選取："

#: docs/8.x/dusk.md:block 506 (code)
msgid "$browser->assertSelectHasOption($field, $value);\n"
msgstr "$browser->assertSelectHasOption($field, $value);\n"

#: docs/8.x/dusk.md:block 508 (header)
msgid "assertSelectMissingOption"
msgstr "assertSelectMissingOption"

#: docs/8.x/dusk.md:block 509 (paragraph)
msgid "Assert that the given value is not available to be selected:"
msgstr "判斷給定值不可被選取："

#: docs/8.x/dusk.md:block 510 (code)
msgid "$browser->assertSelectMissingOption($field, $value);\n"
msgstr "$browser->assertSelectMissingOption($field, $value);\n"

#: docs/8.x/dusk.md:block 512 (header)
msgid "assertValue"
msgstr "assertValue"

#: docs/8.x/dusk.md:block 513 (paragraph)
msgid "Assert that the element matching the given selector has the given value:"
msgstr "判斷符合給定選擇器的元素符合給定值："

#: docs/8.x/dusk.md:block 514 (code)
msgid "$browser->assertValue($selector, $value);\n"
msgstr "$browser->assertValue($selector, $value);\n"

#: docs/8.x/dusk.md:block 516 (header)
msgid "assertValueIsNot"
msgstr "assertValueIsNot"

#: docs/8.x/dusk.md:block 517 (paragraph)
msgid "Assert that the element matching the given selector does not have the given value:"
msgstr "判斷符合給定選擇器的元素不符合給定值："

#: docs/8.x/dusk.md:block 518 (code)
msgid "$browser->assertValueIsNot($selector, $value);\n"
msgstr "$browser->assertValueIsNot($selector, $value);\n"

#: docs/8.x/dusk.md:block 520 (header)
msgid "assertAttribute"
msgstr "assertAttribute"

#: docs/8.x/dusk.md:block 521 (paragraph)
msgid "Assert that the element matching the given selector has the given value in the provided attribute:"
msgstr "判斷符合給定選擇器的元素中指定的屬性為給定值："

#: docs/8.x/dusk.md:block 522 (code)
msgid "$browser->assertAttribute($selector, $attribute, $value);\n"
msgstr "$browser->assertAttribute($selector, $attribute, $value);\n"

#: docs/8.x/dusk.md:block 524 (header)
msgid "assertAttributeContains"
msgstr "assertAttributeContains"

#: docs/8.x/dusk.md:block 525 (paragraph)
msgid "Assert that the element matching the given selector contains the given value in the provided attribute:"
msgstr "判斷符合給定選擇器的元素中指定的屬性包含給定值："

#: docs/8.x/dusk.md:block 526 (code)
msgid "$browser->assertAttributeContains($selector, $attribute, $value);\n"
msgstr "$browser->assertAttributeContains($selector, $attribute, $value);\n"

#: docs/8.x/dusk.md:block 528 (header)
msgid "assertAriaAttribute"
msgstr "assertAriaAttribute"

#: docs/8.x/dusk.md:block 529 (paragraph)
msgid "Assert that the element matching the given selector has the given value in the provided aria attribute:"
msgstr "判斷符合給定選擇器的元素中指定的 Aria 屬性為給定值："

#: docs/8.x/dusk.md:block 530 (code)
msgid "$browser->assertAriaAttribute($selector, $attribute, $value);\n"
msgstr "$browser->assertAriaAttribute($selector, $attribute, $value);\n"

#: docs/8.x/dusk.md:block 531 (paragraph)
msgid "For example, given the markup `<button aria-label=\"Add\"></button>`, you may assert against the `aria-label` attribute like so:"
msgstr "舉例來說，若有 `<button aria-label=\"Add\">` 標記，則可像這樣判斷 `aria-label` 屬性："

#: docs/8.x/dusk.md:block 532 (code)
msgid "$browser->assertAriaAttribute('button', 'label', 'Add')\n"
msgstr "$browser->assertAriaAttribute('button', 'label', 'Add')\n"

#: docs/8.x/dusk.md:block 534 (header)
msgid "assertDataAttribute"
msgstr "assertDataAttribute"

#: docs/8.x/dusk.md:block 535 (paragraph)
msgid "Assert that the element matching the given selector has the given value in the provided data attribute:"
msgstr "判斷符合給定選擇器的元素中指定的 Data 屬性為給定值："

#: docs/8.x/dusk.md:block 536 (code)
msgid "$browser->assertDataAttribute($selector, $attribute, $value);\n"
msgstr "$browser->assertDataAttribute($selector, $attribute, $value);\n"

#: docs/8.x/dusk.md:block 537 (paragraph)
msgid "For example, given the markup `<tr id=\"row-1\" data-content=\"attendees\"></tr>`, you may assert against the `data-label` attribute like so:"
msgstr "舉例來說，若有 `<tr id=\"row-1\" data-content=\"attendees\"></tr>` 標記，則可像這樣判斷 `data-label` 屬性："

#: docs/8.x/dusk.md:block 538 (code)
msgid "$browser->assertDataAttribute('#row-1', 'content', 'attendees')\n"
msgstr "$browser->assertDataAttribute('#row-1', 'content', 'attendees')\n"

#: docs/8.x/dusk.md:block 540 (header)
msgid "assertVisible"
msgstr "assertVisible"

#: docs/8.x/dusk.md:block 541 (paragraph)
msgid "Assert that the element matching the given selector is visible:"
msgstr "判斷符合給定選擇器的元素可見："

#: docs/8.x/dusk.md:block 542 (code)
msgid "$browser->assertVisible($selector);\n"
msgstr "$browser->assertVisible($selector);\n"

#: docs/8.x/dusk.md:block 544 (header)
msgid "assertPresent"
msgstr "assertPresent"

#: docs/8.x/dusk.md:block 545 (paragraph)
msgid "Assert that the element matching the given selector is present in the source:"
msgstr "判斷符合給定選擇器的元素存在於原始碼中："

#: docs/8.x/dusk.md:block 546 (code)
msgid "$browser->assertPresent($selector);\n"
msgstr "$browser->assertPresent($selector);\n"

#: docs/8.x/dusk.md:block 548 (header)
msgid "assertNotPresent"
msgstr "assertNotPresent"

#: docs/8.x/dusk.md:block 549 (paragraph)
msgid "Assert that the element matching the given selector is not present in the source:"
msgstr "判斷符合給定選擇器的元素不存在於原始碼中："

#: docs/8.x/dusk.md:block 550 (code)
msgid "$browser->assertNotPresent($selector);\n"
msgstr "$browser->assertNotPresent($selector);\n"

#: docs/8.x/dusk.md:block 552 (header)
msgid "assertMissing"
msgstr "assertMissing"

#: docs/8.x/dusk.md:block 553 (paragraph)
msgid "Assert that the element matching the given selector is not visible:"
msgstr "判斷符合給定選擇器的元素不可見："

#: docs/8.x/dusk.md:block 554 (code)
msgid "$browser->assertMissing($selector);\n"
msgstr "$browser->assertMissing($selector);\n"

#: docs/8.x/dusk.md:block 556 (header)
msgid "assertInputPresent"
msgstr "assertInputPresent"

#: docs/8.x/dusk.md:block 557 (paragraph)
msgid "Assert that an input with the given name is present:"
msgstr "判斷給定名稱的輸入欄位存在："

#: docs/8.x/dusk.md:block 558 (code)
msgid "$browser->assertInputPresent($name);\n"
msgstr "$browser->assertInputPresent($name);\n"

#: docs/8.x/dusk.md:block 560 (header)
msgid "assertInputMissing"
msgstr "assertInputMissing"

#: docs/8.x/dusk.md:block 561 (paragraph)
msgid "Assert that an input with the given name is not present in the source:"
msgstr "判斷給定名稱的輸入欄位不存在："

#: docs/8.x/dusk.md:block 562 (code)
msgid "$browser->assertInputMissing($name);\n"
msgstr "$browser->assertInputMissing($name);\n"

#: docs/8.x/dusk.md:block 564 (header)
msgid "assertDialogOpened"
msgstr "assertDialogOpened"

#: docs/8.x/dusk.md:block 565 (paragraph)
msgid "Assert that a JavaScript dialog with the given message has been opened:"
msgstr "判斷有給定訊息的 JavaScript 對話方塊開啟："

#: docs/8.x/dusk.md:block 566 (code)
msgid "$browser->assertDialogOpened($message);\n"
msgstr "$browser->assertDialogOpened($message);\n"

#: docs/8.x/dusk.md:block 568 (header)
msgid "assertEnabled"
msgstr "assertEnabled"

#: docs/8.x/dusk.md:block 569 (paragraph)
msgid "Assert that the given field is enabled:"
msgstr "判斷給定欄位啟用："

#: docs/8.x/dusk.md:block 570 (code)
msgid "$browser->assertEnabled($field);\n"
msgstr "$browser->assertEnabled($field);\n"

#: docs/8.x/dusk.md:block 572 (header)
msgid "assertDisabled"
msgstr "assertDisabled"

#: docs/8.x/dusk.md:block 573 (paragraph)
msgid "Assert that the given field is disabled:"
msgstr "判斷給定欄位禁用："

#: docs/8.x/dusk.md:block 574 (code)
msgid "$browser->assertDisabled($field);\n"
msgstr "$browser->assertDisabled($field);\n"

#: docs/8.x/dusk.md:block 576 (header)
msgid "assertButtonEnabled"
msgstr "assertButtonEnabled"

#: docs/8.x/dusk.md:block 577 (paragraph)
msgid "Assert that the given button is enabled:"
msgstr "判斷給定按鈕啟用："

#: docs/8.x/dusk.md:block 578 (code)
msgid "$browser->assertButtonEnabled($button);\n"
msgstr "$browser->assertButtonEnabled($button);\n"

#: docs/8.x/dusk.md:block 580 (header)
msgid "assertButtonDisabled"
msgstr "assertButtonDisabled"

#: docs/8.x/dusk.md:block 581 (paragraph)
msgid "Assert that the given button is disabled:"
msgstr "判斷給定按鈕禁用："

#: docs/8.x/dusk.md:block 582 (code)
msgid "$browser->assertButtonDisabled($button);\n"
msgstr "$browser->assertButtonDisabled($button);\n"

#: docs/8.x/dusk.md:block 584 (header)
msgid "assertFocused"
msgstr "assertFocused"

#: docs/8.x/dusk.md:block 585 (paragraph)
msgid "Assert that the given field is focused:"
msgstr "判斷給定欄位已聚焦："

#: docs/8.x/dusk.md:block 586 (code)
msgid "$browser->assertFocused($field);\n"
msgstr "$browser->assertFocused($field);\n"

#: docs/8.x/dusk.md:block 588 (header)
msgid "assertNotFocused"
msgstr "assertNotFocused"

#: docs/8.x/dusk.md:block 589 (paragraph)
msgid "Assert that the given field is not focused:"
msgstr "判斷給定欄位未聚焦："

#: docs/8.x/dusk.md:block 590 (code)
msgid "$browser->assertNotFocused($field);\n"
msgstr "$browser->assertNotFocused($field);\n"

#: docs/8.x/dusk.md:block 592 (header)
msgid "assertAuthenticated"
msgstr "assertAuthenticated"

#: docs/8.x/dusk.md:block 593 (paragraph)
msgid "Assert that the user is authenticated:"
msgstr "判斷使用者已登入："

#: docs/8.x/dusk.md:block 594 (code)
msgid "$browser->assertAuthenticated();\n"
msgstr "$browser->assertAuthenticated();\n"

#: docs/8.x/dusk.md:block 596 (header)
msgid "assertGuest"
msgstr "assertGuest"

#: docs/8.x/dusk.md:block 597 (paragraph)
msgid "Assert that the user is not authenticated:"
msgstr "判斷使用者未登入："

#: docs/8.x/dusk.md:block 598 (code)
msgid "$browser->assertGuest();\n"
msgstr "$browser->assertGuest();\n"

#: docs/8.x/dusk.md:block 600 (header)
msgid "assertAuthenticatedAs"
msgstr "assertAuthenticatedAs"

#: docs/8.x/dusk.md:block 601 (paragraph)
msgid "Assert that the user is authenticated as the given user:"
msgstr "判斷使用者已登入為給定使用者："

#: docs/8.x/dusk.md:block 602 (code)
msgid "$browser->assertAuthenticatedAs($user);\n"
msgstr "$browser->assertAuthenticatedAs($user);\n"

#: docs/8.x/dusk.md:block 604 (header)
msgid "assertVue"
msgstr "assertVue"

#: docs/8.x/dusk.md:block 605 (paragraph)
msgid "Dusk even allows you to make assertions on the state of [Vue component](https://vuejs.org) data. For example, imagine your application contains the following Vue component:"
msgstr "在 Dusk 中，甚至可以對 [Vue 元件](https://vuejs.org) 資料的狀態進行 Assertion。舉例來說，假設網站中包含下列 Vue 元件："

#: docs/8.x/dusk.md:block 606 (code)
msgid "// HTML...\n\n"
"<profile dusk=\"profile-component\"></profile>\n\n"
"// Component Definition...\n\n"
"Vue.component('profile', {\n"
"    template: '<div>{{ user.name }}</div>',\n\n"
"    data: function () {\n"
"        return {\n"
"            user: {\n"
"                name: 'Taylor'\n"
"            }\n"
"        };\n"
"    }\n"
"});\n"
msgstr "// HTML...\n\n"
"<profile dusk=\"profile-component\"></profile>\n\n"
"// 元件定義...\n\n"
"Vue.component('profile', {\n"
"    template: '<div>{{ user.name }}</div>',\n\n"
"    data: function () {\n"
"        return {\n"
"            user: {\n"
"                name: 'Taylor'\n"
"            }\n"
"        };\n"
"    }\n"
"});\n"

#: docs/8.x/dusk.md:block 607 (paragraph)
msgid "You may assert on the state of the Vue component like so:"
msgstr "則可像這樣判斷 Vue 元件的狀態："

#: docs/8.x/dusk.md:block 608 (code)
msgid "/**\n"
" * A basic Vue test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function testVue()\n"
"{\n"
"    $this->browse(function (Browser $browser) {\n"
"        $browser->visit('/')\n"
"                ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"    });\n"
"}\n"
msgstr "/**\n"
" * A basic Vue test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function testVue()\n"
"{\n"
"    $this->browse(function (Browser $browser) {\n"
"        $browser->visit('/')\n"
"                ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"    });\n"
"}\n"

#: docs/8.x/dusk.md:block 610 (header)
msgid "assertVueIsNot"
msgstr "assertVueIsNot"

#: docs/8.x/dusk.md:block 611 (paragraph)
msgid "Assert that a given Vue component data property does not match the given value:"
msgstr "判斷給定的 Vue 元件資料屬性不符合給定值："

#: docs/8.x/dusk.md:block 612 (code)
msgid "$browser->assertVueIsNot($property, $value, $componentSelector = null);\n"
msgstr "$browser->assertVueIsNot($property, $value, $componentSelector = null);\n"

#: docs/8.x/dusk.md:block 614 (header)
msgid "assertVueContains"
msgstr "assertVueContains"

#: docs/8.x/dusk.md:block 615 (paragraph)
msgid "Assert that a given Vue component data property is an array and contains the given value:"
msgstr "判斷給定的 Vue 元件資料屬性為陣列，並包含給定值："

#: docs/8.x/dusk.md:block 616 (code)
msgid "$browser->assertVueContains($property, $value, $componentSelector = null);\n"
msgstr "$browser->assertVueContains($property, $value, $componentSelector = null);\n"

#: docs/8.x/dusk.md:block 618 (header)
msgid "assertVueDoesNotContain"
msgstr "assertVueDoesNotContain"

#: docs/8.x/dusk.md:block 619 (paragraph)
msgid "Assert that a given Vue component data property is an array and does not contain the given value:"
msgstr "判斷給定的 Vue 元件資料屬性為陣列，並且不包含給定值："

#: docs/8.x/dusk.md:block 620 (code)
msgid "$browser->assertVueDoesNotContain($property, $value, $componentSelector = null);\n"
msgstr "$browser->assertVueDoesNotContain($property, $value, $componentSelector = null);\n"

#: docs/8.x/dusk.md:block 622 (header)
msgid "Pages"
msgstr "Page"

#: docs/8.x/dusk.md:block 623 (paragraph)
msgid "Sometimes, tests require several complicated actions to be performed in sequence. This can make your tests harder to read and understand. Dusk Pages allow you to define expressive actions that may then be performed on a given page via a single method. Pages also allow you to define short-cuts to common selectors for your application or for a single page."
msgstr "有時候，測試可能會需要按照順序執行多個複雜的動作。這樣一來可能會使測試難以閱讀與理解。通過 Dusk Page，便可定義描述性的動作，並以單一方法來在給定頁面上執行。使用 Page 還可為網站或單一頁面上常用的選擇器定義捷徑。"

#: docs/8.x/dusk.md:block 625 (header)
msgid "Generating Pages"
msgstr "產生 Page"

#: docs/8.x/dusk.md:block 626 (paragraph)
msgid "To generate a page object, execute the `dusk:page` Artisan command. All page objects will be placed in your application's `tests/Browser/Pages` directory:"
msgstr "若要產生 Page 物件，請執行 `dusk:page` Artisan 指令。"

#: docs/8.x/dusk.md:block 627 (code)
msgid "php artisan dusk:page Login\n"
msgstr "php artisan dusk:page Login\n"

#: docs/8.x/dusk.md:block 629 (header)
msgid "Configuring Pages"
msgstr "設定 Page"

#: docs/8.x/dusk.md:block 630 (paragraph)
msgid "By default, pages have three methods: `url`, `assert`, and `elements`. We will discuss the `url` and `assert` methods now. The `elements` method will be [discussed in more detail below](#shorthand-selectors)."
msgstr "預設情況下，Page 有三個方法：`url`、`assert`、與 `elements`。我們現在先來討論 `url` 與 `assert` 方法。[稍後會來詳細討論](#shorthand-selectors)有關 `elements` 方法。"

#: docs/8.x/dusk.md:block 632 (header)
msgid "The `url` Method"
msgstr "`url` 方法"

#: docs/8.x/dusk.md:block 633 (paragraph)
msgid "The `url` method should return the path of the URL that represents the page. Dusk will use this URL when navigating to the page in the browser:"
msgstr "`url` 方法應回傳代表該 Page 的 URL 之路徑。在瀏覽器中前往該頁面時，Dusk 會使用該 URL："

#: docs/8.x/dusk.md:block 634 (code)
msgid "/**\n"
" * Get the URL for the page.\n"
" *\n"
" * @return string\n"
" */\n"
"public function url()\n"
"{\n"
"    return '/login';\n"
"}\n"
msgstr "/**\n"
" * Get the URL for the page.\n"
" *\n"
" * @return string\n"
" */\n"
"public function url()\n"
"{\n"
"    return '/login';\n"
"}\n"

#: docs/8.x/dusk.md:block 636 (header)
msgid "The `assert` Method"
msgstr "`assert` 方法"

#: docs/8.x/dusk.md:block 637 (paragraph)
msgid "The `assert` method may make any assertions necessary to verify that the browser is actually on the given page. It is not actually necessary to place anything within this method; however, you are free to make these assertions if you wish. These assertions will be run automatically when navigating to the page:"
msgstr "`assert` 方法可進行任意的 Assertion 判斷，來認證瀏覽器是否確實在該頁面上。該方法中不一定要有內容。不過，若有需要，可以自行進行 Assertion。這些 Assertion 會在前往該頁面後被自動執行："

#: docs/8.x/dusk.md:block 638 (code)
msgid "/**\n"
" * Assert that the browser is on the page.\n"
" *\n"
" * @return void\n"
" */\n"
"public function assert(Browser $browser)\n"
"{\n"
"    $browser->assertPathIs($this->url());\n"
"}\n"
msgstr "/**\n"
" * Assert that the browser is on the page.\n"
" *\n"
" * @return void\n"
" */\n"
"public function assert(Browser $browser)\n"
"{\n"
"    $browser->assertPathIs($this->url());\n"
"}\n"

#: docs/8.x/dusk.md:block 640 (header)
msgid "Navigating To Pages"
msgstr "前往 Page"

#: docs/8.x/dusk.md:block 641 (paragraph)
msgid "Once a page has been defined, you may navigate to it using the `visit` method:"
msgstr "Page 建立好後，就可以使用 `visit` 方法來前往該 Page："

#: docs/8.x/dusk.md:block 642 (code)
msgid "use Tests\\Browser\\Pages\\Login;\n\n"
"$browser->visit(new Login);\n"
msgstr "use Tests\\Browser\\Pages\\Login;\n\n"
"$browser->visit(new Login);\n"

#: docs/8.x/dusk.md:block 643 (paragraph)
msgid "Sometimes you may already be on a given page and need to \"load\" the page's selectors and methods into the current test context. This is common when pressing a button and being redirected to a given page without explicitly navigating to it. In this situation, you may use the `on` method to load the page:"
msgstr "有時候，我們可能已經在某個給定頁面上，並且只需要將該頁面的選擇器與方法「載入」進目前的測試內容即可。常見的例子如通過點擊按鈕後跳轉至給定的頁面，而不是顯式前往該頁面。在此情況下，可使用 `on` 方法來載入頁面："

#: docs/8.x/dusk.md:block 644 (code)
msgid "use Tests\\Browser\\Pages\\CreatePlaylist;\n\n"
"$browser->visit('/dashboard')\n"
"        ->clickLink('Create Playlist')\n"
"        ->on(new CreatePlaylist)\n"
"        ->assertSee('@create');\n"
msgstr "use Tests\\Browser\\Pages\\CreatePlaylist;\n\n"
"$browser->visit('/dashboard')\n"
"        ->clickLink('Create Playlist')\n"
"        ->on(new CreatePlaylist)\n"
"        ->assertSee('@create');\n"

#: docs/8.x/dusk.md:block 646 (header)
msgid "Shorthand Selectors"
msgstr "選擇器簡寫"

#: docs/8.x/dusk.md:block 647 (paragraph)
msgid "The `elements` method within page classes allows you to define quick, easy-to-remember shortcuts for any CSS selector on your page. For example, let's define a shortcut for the \"email\" input field of the application's login page:"
msgstr "Page 類別中的 `elements` 方法可讓你為頁面上的任意 CSS 選擇器定義快速、簡單好記的簡寫。舉例來說，來為網站登入頁的「email」輸入欄位定義捷徑："

#: docs/8.x/dusk.md:block 648 (code)
msgid "/**\n"
" * Get the element shortcuts for the page.\n"
" *\n"
" * @return array\n"
" */\n"
"public function elements()\n"
"{\n"
"    return [\n"
"        '@email' => 'input[name=email]',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get the element shortcuts for the page.\n"
" *\n"
" * @return array\n"
" */\n"
"public function elements()\n"
"{\n"
"    return [\n"
"        '@email' => 'input[name=email]',\n"
"    ];\n"
"}\n"

#: docs/8.x/dusk.md:block 649 (paragraph)
msgid "Once the shortcut has been defined, you may use the shorthand selector anywhere you would typically use a full CSS selector:"
msgstr "定義好捷徑後，就可以在其他通常需要使用完整 CSS 選擇器的地方使用該選擇器簡寫："

#: docs/8.x/dusk.md:block 650 (code)
msgid "$browser->type('@email', 'taylor@laravel.com');\n"
msgstr "$browser->type('@email', 'taylor@laravel.com');\n"

#: docs/8.x/dusk.md:block 652 (header)
msgid "Global Shorthand Selectors"
msgstr "全域選擇器簡寫"

#: docs/8.x/dusk.md:block 653 (paragraph)
msgid "After installing Dusk, a base `Page` class will be placed in your `tests/Browser/Pages` directory. This class contains a `siteElements` method which may be used to define global shorthand selectors that should be available on every page throughout your application:"
msgstr "安裝好 Dusk 後，`tests/Browser/Pages` 目錄下會包含一個基礎的 `Page` 類別。該類別包含了一個 `siteElements` 方法，可用來定義在網站中所有頁面都可用的全域選擇器簡寫："

#: docs/8.x/dusk.md:block 654 (code)
msgid "/**\n"
" * Get the global element shortcuts for the site.\n"
" *\n"
" * @return array\n"
" */\n"
"public static function siteElements()\n"
"{\n"
"    return [\n"
"        '@element' => '#selector',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get the global element shortcuts for the site.\n"
" *\n"
" * @return array\n"
" */\n"
"public static function siteElements()\n"
"{\n"
"    return [\n"
"        '@element' => '#selector',\n"
"    ];\n"
"}\n"

#: docs/8.x/dusk.md:block 656 (header)
msgid "Page Methods"
msgstr "Page 方法"

#: docs/8.x/dusk.md:block 657 (paragraph)
msgid "In addition to the default methods defined on pages, you may define additional methods which may be used throughout your tests. For example, let's imagine we are building a music management application. A common action for one page of the application might be to create a playlist. Instead of re-writing the logic to create a playlist in each test, you may define a `createPlaylist` method on a page class:"
msgstr "除了 Page 中預設定義的方法外，也可以定義額外的方法來在測試中使用。舉例來說，假設我們正在製作一個音樂管理軟體。在該軟體中，建立播放清單可能會是個常見的動作。比起在每個測試中重複撰寫建立播放清單的邏輯，我們可以在 Page 類別內定義 `createPlaylist` 方法："

#: docs/8.x/dusk.md:block 658 (code)
msgid "<?php\n\n"
"namespace Tests\\Browser\\Pages;\n\n"
"use Laravel\\Dusk\\Browser;\n\n"
"class Dashboard extends Page\n"
"{\n"
"    // Other page methods...\n\n"
"    /**\n"
"     * Create a new playlist.\n"
"     *\n"
"     * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"     * @param  string  $name\n"
"     * @return void\n"
"     */\n"
"    public function createPlaylist(Browser $browser, $name)\n"
"    {\n"
"        $browser->type('name', $name)\n"
"                ->check('share')\n"
"                ->press('Create Playlist');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests\\Browser\\Pages;\n\n"
"use Laravel\\Dusk\\Browser;\n\n"
"class Dashboard extends Page\n"
"{\n"
"    // Other page methods...\n\n"
"    /**\n"
"     * Create a new playlist.\n"
"     *\n"
"     * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"     * @param  string  $name\n"
"     * @return void\n"
"     */\n"
"    public function createPlaylist(Browser $browser, $name)\n"
"    {\n"
"        $browser->type('name', $name)\n"
"                ->check('share')\n"
"                ->press('Create Playlist');\n"
"    }\n"
"}\n"

#: docs/8.x/dusk.md:block 659 (paragraph)
msgid "Once the method has been defined, you may use it within any test that utilizes the page. The browser instance will automatically be passed as the first argument to custom page methods:"
msgstr "定義好該方法後，就可以在任何使用該 Page 的測試中使用該方法。Browser 實體會自動作為第一個引數傳入給自訂 Page 方法內："

#: docs/8.x/dusk.md:block 660 (code)
msgid "use Tests\\Browser\\Pages\\Dashboard;\n\n"
"$browser->visit(new Dashboard)\n"
"        ->createPlaylist('My Playlist')\n"
"        ->assertSee('My Playlist');\n"
msgstr "use Tests\\Browser\\Pages\\Dashboard;\n\n"
"$browser->visit(new Dashboard)\n"
"        ->createPlaylist('My Playlist')\n"
"        ->assertSee('My Playlist');\n"

#: docs/8.x/dusk.md:block 662 (header)
msgid "Components"
msgstr "元件"

#: docs/8.x/dusk.md:block 663 (paragraph)
msgid "Components are similar to Dusk’s “page objects”, but are intended for pieces of UI and functionality that are re-used throughout your application, such as a navigation bar or notification window. As such, components are not bound to specific URLs."
msgstr "Component (元件) 與 Dusk 的「Page 物件」類似，不同的地方在於元件是用於一小部分的 UI，且在整個網站中都可重複使用。如：導航列或通知視窗。因此，元件並不限定於特定的 URL。"

#: docs/8.x/dusk.md:block 665 (header)
msgid "Generating Components"
msgstr "產生 Component"

#: docs/8.x/dusk.md:block 666 (paragraph)
msgid "To generate a component, execute the `dusk:component` Artisan command. New components are placed in the `tests/Browser/Components` directory:"
msgstr "若要產生 Component，請執行 `dusk:component` Artisan 指令。新建立的 Component 會放置於 `tests/Browser/Components` 目錄中："

#: docs/8.x/dusk.md:block 667 (code)
msgid "php artisan dusk:component DatePicker\n"
msgstr "php artisan dusk:component DatePicker\n"

#: docs/8.x/dusk.md:block 668 (paragraph)
msgid "As shown above, a \"date picker\" is an example of a component that might exist throughout your application on a variety of pages. It can become cumbersome to manually write the browser automation logic to select a date in dozens of tests throughout your test suite. Instead, we can define a Dusk component to represent the date picker, allowing us to encapsulate that logic within the component:"
msgstr "像上面這樣，「date picker」是一個範例元件，該元件可能會在網站的各種頁面上出現。若要在測試套件中的數十個測試內手動轉寫瀏覽器自動化邏輯會很麻煩。因此，我們可以改用 Dusk Component 來代表 Date Picker，進而將此一邏輯封裝在該元件內："

#: docs/8.x/dusk.md:block 669 (code)
msgid "<?php\n\n"
"namespace Tests\\Browser\\Components;\n\n"
"use Laravel\\Dusk\\Browser;\n"
"use Laravel\\Dusk\\Component as BaseComponent;\n\n"
"class DatePicker extends BaseComponent\n"
"{\n"
"    /**\n"
"     * Get the root selector for the component.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function selector()\n"
"    {\n"
"        return '.date-picker';\n"
"    }\n\n"
"    /**\n"
"     * Assert that the browser page contains the component.\n"
"     *\n"
"     * @param  Browser  $browser\n"
"     * @return void\n"
"     */\n"
"    public function assert(Browser $browser)\n"
"    {\n"
"        $browser->assertVisible($this->selector());\n"
"    }\n\n"
"    /**\n"
"     * Get the element shortcuts for the component.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function elements()\n"
"    {\n"
"        return [\n"
"            '@date-field' => 'input.datepicker-input',\n"
"            '@year-list' => 'div > div.datepicker-years',\n"
"            '@month-list' => 'div > div.datepicker-months',\n"
"            '@day-list' => 'div > div.datepicker-days',\n"
"        ];\n"
"    }\n\n"
"    /**\n"
"     * Select the given date.\n"
"     *\n"
"     * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"     * @param  int  $year\n"
"     * @param  int  $month\n"
"     * @param  int  $day\n"
"     * @return void\n"
"     */\n"
"    public function selectDate(Browser $browser, $year, $month, $day)\n"
"    {\n"
"        $browser->click('@date-field')\n"
"                ->within('@year-list', function ($browser) use ($year) {\n"
"                    $browser->click($year);\n"
"                })\n"
"                ->within('@month-list', function ($browser) use ($month) {\n"
"                    $browser->click($month);\n"
"                })\n"
"                ->within('@day-list', function ($browser) use ($day) {\n"
"                    $browser->click($day);\n"
"                });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests\\Browser\\Components;\n\n"
"use Laravel\\Dusk\\Browser;\n"
"use Laravel\\Dusk\\Component as BaseComponent;\n\n"
"class DatePicker extends BaseComponent\n"
"{\n"
"    /**\n"
"     * Get the root selector for the component.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function selector()\n"
"    {\n"
"        return '.date-picker';\n"
"    }\n\n"
"    /**\n"
"     * Assert that the browser page contains the component.\n"
"     *\n"
"     * @param  Browser  $browser\n"
"     * @return void\n"
"     */\n"
"    public function assert(Browser $browser)\n"
"    {\n"
"        $browser->assertVisible($this->selector());\n"
"    }\n\n"
"    /**\n"
"     * Get the element shortcuts for the component.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function elements()\n"
"    {\n"
"        return [\n"
"            '@date-field' => 'input.datepicker-input',\n"
"            '@year-list' => 'div > div.datepicker-years',\n"
"            '@month-list' => 'div > div.datepicker-months',\n"
"            '@day-list' => 'div > div.datepicker-days',\n"
"        ];\n"
"    }\n\n"
"    /**\n"
"     * Select the given date.\n"
"     *\n"
"     * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"     * @param  int  $year\n"
"     * @param  int  $month\n"
"     * @param  int  $day\n"
"     * @return void\n"
"     */\n"
"    public function selectDate(Browser $browser, $year, $month, $day)\n"
"    {\n"
"        $browser->click('@date-field')\n"
"                ->within('@year-list', function ($browser) use ($year) {\n"
"                    $browser->click($year);\n"
"                })\n"
"                ->within('@month-list', function ($browser) use ($month) {\n"
"                    $browser->click($month);\n"
"                })\n"
"                ->within('@day-list', function ($browser) use ($day) {\n"
"                    $browser->click($day);\n"
"                });\n"
"    }\n"
"}\n"

#: docs/8.x/dusk.md:block 671 (header)
msgid "Using Components"
msgstr "使用 Component"

#: docs/8.x/dusk.md:block 672 (paragraph)
msgid "Once the component has been defined, we can easily select a date within the date picker from any test. And, if the logic necessary to select a date changes, we only need to update the component:"
msgstr "定義好 Component 後，便可輕鬆地在任何測試內於 Date Picker 中選擇日期。而且，若選擇日期所需要的邏輯更改了，我們只需要更新 Component 即可："

#: docs/8.x/dusk.md:block 673 (code)
msgid "<?php\n\n"
"namespace Tests\\Browser;\n\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\Browser\\Components\\DatePicker;\n"
"use Tests\\DuskTestCase;\n\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    /**\n"
"     * A basic component test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testBasicExample()\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->within(new DatePicker, function ($browser) {\n"
"                        $browser->selectDate(2019, 1, 30);\n"
"                    })\n"
"                    ->assertSee('January');\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests\\Browser;\n\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\Browser\\Components\\DatePicker;\n"
"use Tests\\DuskTestCase;\n\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    /**\n"
"     * A basic component test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testBasicExample()\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->within(new DatePicker, function ($browser) {\n"
"                        $browser->selectDate(2019, 1, 30);\n"
"                    })\n"
"                    ->assertSee('January');\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/dusk.md:block 675 (header)
msgid "Continuous Integration"
msgstr "持續整合 (CI, Continuous Integration)"

#: docs/8.x/dusk.md:block 676 (quote)
msgid "{note} Most Dusk continuous integration configurations expect your Laravel application to be served using the built-in PHP development server on port 8000. Therefore, before continuing, you should ensure that your continuous integration environment has an `APP_URL` environment variable value of `http://127.0.0.1:8000`."
msgstr "{note} 大多數的 Dusk CI 設定都假設你的 Laravel 應用程式放在連接埠 8000 的 PHP 內建開發伺服器上。因此，在繼續前，請先確保 CI 環境上有將 `APP_URL` 環境變數設為 `http://127.0.0.1:8000`。"

#: docs/8.x/dusk.md:block 678 (header)
msgid "Heroku CI"
msgstr "Heroku CI"

#: docs/8.x/dusk.md:block 679 (paragraph)
msgid "To run Dusk tests on [Heroku CI](https://www.heroku.com/continuous-integration), add the following Google Chrome buildpack and scripts to your Heroku `app.json` file:"
msgstr "若要在 [Heroku CI](https://www.heroku.com/continuous-integration) 上執行 Dusk 測試，請將下列 Google Chrome Buildpack 與指令嗎加到 Heroku 的 `app.json` 檔中："

#: docs/8.x/dusk.md:block 680 (code)
msgid "{\n"
"  \"environments\": {\n"
"    \"test\": {\n"
"      \"buildpacks\": [\n"
"        { \"url\": \"heroku/php\" },\n"
"        { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n"
"      ],\n"
"      \"scripts\": {\n"
"        \"test-setup\": \"cp .env.testing .env\",\n"
"        \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &' && nohup bash -c 'php artisan serve --no-reload > /dev/null 2>&1 &' && php artisan dusk\"\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr "{\n"
"  \"environments\": {\n"
"    \"test\": {\n"
"      \"buildpacks\": [\n"
"        { \"url\": \"heroku/php\" },\n"
"        { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n"
"      ],\n"
"      \"scripts\": {\n"
"        \"test-setup\": \"cp .env.testing .env\",\n"
"        \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &' && nohup bash -c 'php artisan serve --no-reload > /dev/null 2>&1 &' && php artisan dusk\"\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"

#: docs/8.x/dusk.md:block 682 (header)
msgid "Travis CI"
msgstr "Travis CI"

#: docs/8.x/dusk.md:block 683 (paragraph)
msgid "To run your Dusk tests on [Travis CI](https://travis-ci.org), use the following `.travis.yml` configuration. Since Travis CI is not a graphical environment, we will need to take some extra steps in order to launch a Chrome browser. In addition, we will use `php artisan serve` to launch PHP's built-in web server:"
msgstr "若要在 [Travis CI](https://travis-ci.org) 上執行 Dusk 測試，請使用下列 `.travis.yml` 組態設定檔。由於 Travis CI 並非圖形化環境，因此若要啟動 Chrome 瀏覽器，我們需要做一些額外的步驟。此外，我們會使用 `php artisan serve` 來啟動 PHP 的內建網頁伺服器："

#: docs/8.x/dusk.md:block 684 (code)
msgid "language: php\n\n"
"php:\n"
"  - 7.3\n\n"
"addons:\n"
"  chrome: stable\n\n"
"install:\n"
"  - cp .env.testing .env\n"
"  - travis_retry composer install --no-interaction --prefer-dist\n"
"  - php artisan key:generate\n"
"  - php artisan dusk:chrome-driver\n\n"
"before_script:\n"
"  - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &\n"
"  - php artisan serve --no-reload &\n\n"
"script:\n"
"  - php artisan dusk\n"
msgstr "language: php\n\n"
"php:\n"
"  - 7.3\n\n"
"addons:\n"
"  chrome: stable\n\n"
"install:\n"
"  - cp .env.testing .env\n"
"  - travis_retry composer install --no-interaction --prefer-dist\n"
"  - php artisan key:generate\n"
"  - php artisan dusk:chrome-driver\n\n"
"before_script:\n"
"  - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &\n"
"  - php artisan serve --no-reload &\n\n"
"script:\n"
"  - php artisan dusk\n"

#: docs/8.x/dusk.md:block 686 (header)
msgid "GitHub Actions"
msgstr "GitHub Actions"

#: docs/8.x/dusk.md:block 687 (paragraph)
msgid "If you are using [Github Actions](https://github.com/features/actions) to run your Dusk tests, you may use the following configuration file as a starting point. Like TravisCI, we will use the `php artisan serve` command to launch PHP's built-in web server:"
msgstr "若要使用 [Github Actions](https://github.com/features/actions) 來執行 Dusk 測試，可參考下列組態設定檔。與 TravisCI 一樣，我們會使用 `php artisan serve` 指令來啟動 PHP 的內建網頁伺服器："

#: docs/8.x/dusk.md:block 688 (code)
msgid "name: CI\n"
"on: [push]\n"
"jobs:\n\n"
"  dusk-php:\n"
"    runs-on: ubuntu-latest\n"
"    steps:\n"
"      - uses: actions/checkout@v2\n"
"      - name: Prepare The Environment\n"
"        run: cp .env.example .env\n"
"      - name: Create Database\n"
"        run: |\n"
"          sudo systemctl start mysql\n"
"          mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE 'my-database' character set UTF8mb4 collate utf8mb4_bin;\"\n"
"      - name: Install Composer Dependencies\n"
"        run: composer install --no-progress --prefer-dist --optimize-autoloader\n"
"      - name: Generate Application Key\n"
"        run: php artisan key:generate\n"
"      - name: Upgrade Chrome Driver\n"
"        run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d \" \" -f3 | cut -d \".\" -f1`\n"
"      - name: Start Chrome Driver\n"
"        run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"      - name: Run Laravel Server\n"
"        run: php artisan serve --no-reload &\n"
"      - name: Run Dusk Tests\n"
"        env:\n"
"          APP_URL: \"http://127.0.0.1:8000\"\n"
"        run: php artisan dusk\n"
"      - name: Upload Screenshots\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: screenshots\n"
"          path: tests/Browser/screenshots\n"
"      - name: Upload Console Logs\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: console\n"
"          path: tests/Browser/console\n"
msgstr "name: CI\n"
"on: [push]\n"
"jobs:\n\n"
"  dusk-php:\n"
"    runs-on: ubuntu-latest\n"
"    steps:\n"
"      - uses: actions/checkout@v2\n"
"      - name: Prepare The Environment\n"
"        run: cp .env.example .env\n"
"      - name: Create Database\n"
"        run: |\n"
"          sudo systemctl start mysql\n"
"          mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE 'my-database' character set UTF8mb4 collate utf8mb4_bin;\"\n"
"      - name: Install Composer Dependencies\n"
"        run: composer install --no-progress --prefer-dist --optimize-autoloader\n"
"      - name: Generate Application Key\n"
"        run: php artisan key:generate\n"
"      - name: Upgrade Chrome Driver\n"
"        run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d \" \" -f3 | cut -d \".\" -f1`\n"
"      - name: Start Chrome Driver\n"
"        run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"      - name: Run Laravel Server\n"
"        run: php artisan serve --no-reload &\n"
"      - name: Run Dusk Tests\n"
"        env:\n"
"          APP_URL: \"http://127.0.0.1:8000\"\n"
"        run: php artisan dusk\n"
"      - name: Upload Screenshots\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: screenshots\n"
"          path: tests/Browser/screenshots\n"
"      - name: Upload Console Logs\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: console\n"
"          path: tests/Browser/console\n"

#: docs/9.x/dusk.md:block 189 (paragraph)
msgid "The `press` method may be used to click a button element on the page. The argument given to the `press` method may be either the display text of the button or a CSS / Dusk selector:"
msgstr "`press` 方法可用來點擊頁面上的按鈕元素。傳給 `press` 方法的引數可以是按鈕的顯示文字，也可以是 CSS / Dusk 選擇器："

#: docs/9.x/dusk.md:block 293 (header)
msgid "Waiting For Page Reloads"
msgstr "等待頁面重新整理"

#: docs/9.x/dusk.md:block 307 (header)
msgid "Waiting For JavaScript Events"
msgstr "等待 JavaScript 事件"

#: docs/9.x/dusk.md:block 308 (paragraph)
msgid "The `waitForEvent` method can be used to pause the execution of a test until a JavaScript event occurs:"
msgstr "`waitForEvent` 方法可用來暫停執行測試，直到發生了某個 JavaScript 事件："

#: docs/9.x/dusk.md:block 309 (code)
msgid "$browser->waitForEvent('load');\n"
msgstr "$browser->waitForEvent('load');\n"

#: docs/9.x/dusk.md:block 310 (paragraph)
msgid "The event listener is attached to the current scope, which is the `body` element by default. When using a scoped selector, the event listener will be attached to the matching element:"
msgstr "會附加一個 Event Listener 到目前的 Scope 上，預設為 `body` 元素。在使用限定範圍的 Selector 時，則會將該 Event Listener 附加到符合的元素上："

#: docs/9.x/dusk.md:block 311 (code)
msgid "$browser->with('iframe', function ($iframe) {\n"
"    // Wait for the iframe's load event...\n"
"    $iframe->waitForEvent('load');\n"
"});\n"
msgstr "$browser->with('iframe', function ($iframe) {\n"
"    // 等待 iframe 的 load 事件...\n"
"    $iframe->waitForEvent('load');\n"
"});\n"

#: docs/9.x/dusk.md:block 312 (paragraph)
msgid "You may also provide a selector as the second argument to the `waitForEvent` method to attach the event listener to a specific element:"
msgstr "也可以使用 `waitForEvent` 方法的第二個引數來提供選擇器，以將 Event Listener 附加到特定的元素上："

#: docs/9.x/dusk.md:block 313 (code)
msgid "$browser->waitForEvent('load', '.selector');\n"
msgstr "$browser->waitForEvent('load', '.selector');\n"

#: docs/9.x/dusk.md:block 314 (paragraph)
msgid "You may also wait for events on the `document` and `window` objects:"
msgstr "也可以在 `document` 或 `window` 物件上等待事件："

#: docs/9.x/dusk.md:block 315 (code)
msgid "// Wait until the document is scrolled...\n"
"$browser->waitForEvent('scroll', 'document');\n\n"
"// Wait a maximum of five seconds until the window is resized...\n"
"$browser->waitForEvent('resize', 'window', 5);\n"
msgstr "// 等待直到捲動畫面...\n"
"$browser->waitForEvent('scroll', 'document');\n\n"
"// 等待視窗縮放，最多 5 秒...\n"
"$browser->waitForEvent('resize', 'window', 5);\n"

