# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-07 15:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/migrations.md, line: 1
# File: docs/master/migrations.md, line: 1
#, no-wrap
msgid "Database: Migrations"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/migrations.md, line: 25
# File: docs/master/migrations.md, line: 25
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 25
# File: docs/master/migrations.md, line: 25
#, no-wrap
msgid ""
"- [Generating Migrations](#generating-migrations)\n"
"    - [Squashing Migrations](#squashing-migrations)\n"
"- [Migration Structure](#migration-structure)\n"
"- [Running Migrations](#running-migrations)\n"
"    - [Rolling Back Migrations](#rolling-back-migrations)\n"
"- [Tables](#tables)\n"
"    - [Creating Tables](#creating-tables)\n"
"    - [Updating Tables](#updating-tables)\n"
"    - [Renaming / Dropping Tables](#renaming-and-dropping-tables)\n"
"- [Columns](#columns)\n"
"    - [Creating Columns](#creating-columns)\n"
"    - [Available Column Types](#available-column-types)\n"
"    - [Column Modifiers](#column-modifiers)\n"
"    - [Modifying Columns](#modifying-columns)\n"
"    - [Dropping Columns](#dropping-columns)\n"
"- [Indexes](#indexes)\n"
"    - [Creating Indexes](#creating-indexes)\n"
"    - [Renaming Indexes](#renaming-indexes)\n"
"    - [Dropping Indexes](#dropping-indexes)\n"
"    - [Foreign Key Constraints](#foreign-key-constraints)\n"
"- [Events](#events)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 27
# File: docs/master/migrations.md, line: 27
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 27
# File: docs/master/migrations.md, line: 27
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 30
# File: docs/master/migrations.md, line: 30
msgid "Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. If you have ever had to tell a teammate to manually add a column to their local database schema after pulling in your changes from source control, you've faced the problem that database migrations solve."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 32
# File: docs/master/migrations.md, line: 32
msgid "The Laravel `Schema` [facade](/docs/{{version}}/facades) provides database agnostic support for creating and manipulating tables across all of Laravel's supported database systems. Typically, migrations will use this facade to create and modify database tables and columns."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 34
# File: docs/master/migrations.md, line: 34
#, no-wrap
msgid "<a name=\"generating-migrations\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 34
# File: docs/master/migrations.md, line: 34
#, no-wrap
msgid "Generating Migrations"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 37
# File: docs/master/migrations.md, line: 37
msgid "You may use the `make:migration` [Artisan command](/docs/{{version}}/artisan) to generate a database migration. The new migration will be placed in your `database/migrations` directory. Each migration filename contains a timestamp that allows Laravel to determine the order of the migrations:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 39
# File: docs/master/migrations.md, line: 39
#, no-wrap
msgid "    php artisan make:migration create_flights_table\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 41
# File: docs/master/migrations.md, line: 41
msgid "Laravel will use the name of the migration to attempt to guess the name of the table and whether or not the migration will be creating a new table. If Laravel is able to determine the table name from the migration name, Laravel will pre-fill the generated migration file with the specified table. Otherwise, you may simply specify the table in the migration file manually."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 43
# File: docs/master/migrations.md, line: 43
msgid "If you would like to specify a custom path for the generated migration, you may use the `--path` option when executing the `make:migration` command. The given path should be relative to your application's base path."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 45
# File: docs/master/migrations.md, line: 45
#, no-wrap
msgid "> {tip} Migration stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 47
# File: docs/master/migrations.md, line: 47
#, no-wrap
msgid "<a name=\"squashing-migrations\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 47
# File: docs/master/migrations.md, line: 47
#, no-wrap
msgid "Squashing Migrations"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 50
# File: docs/master/migrations.md, line: 50
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your `database/migrations` directory becoming bloated with potentially hundreds of migrations. If you would like, you may \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 52
# File: docs/master/migrations.md, line: 52
#, no-wrap
msgid "    php artisan schema:dump\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 55
# File: docs/master/migrations.md, line: 55
#, no-wrap
msgid ""
"    // Dump the current database schema and prune all existing migrations...\n"
"    php artisan schema:dump --prune\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 57
# File: docs/master/migrations.md, line: 57
msgid "When you execute this command, Laravel will write a \"schema\" file to your application's `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL statements first. After executing the schema file's statements, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 59
# File: docs/master/migrations.md, line: 59
msgid "You should commit your database schema file to source control so that other new developers on your team may quickly create your application's initial database structure."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 61
# File: docs/master/migrations.md, line: 61
#, no-wrap
msgid "> {note} Migration squashing is only available for the MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client. Schema dumps may not be restored to in-memory SQLite databases.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 63
# File: docs/master/migrations.md, line: 63
#, no-wrap
msgid "<a name=\"migration-structure\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 63
# File: docs/master/migrations.md, line: 63
#, no-wrap
msgid "Migration Structure"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 66
# File: docs/master/migrations.md, line: 66
msgid "A migration class contains two methods: `up` and `down`. The `up` method is used to add new tables, columns, or indexes to your database, while the `down` method should reverse the operations performed by the `up` method."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 68
# File: docs/master/migrations.md, line: 68
msgid "Within both of these methods, you may use the Laravel schema builder to expressively create and modify tables. To learn about all of the methods available on the `Schema` builder, [check out its documentation](#creating-tables). For example, the following migration creates a `flights` table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 70
# File: docs/8.x/migrations.md, line: 109
# File: docs/8.x/migrations.md, line: 897
# File: docs/master/migrations.md, line: 70
# File: docs/master/migrations.md, line: 109
# File: docs/master/migrations.md, line: 897
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 74
# File: docs/master/migrations.md, line: 74
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Migrations\\Migration;\n"
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 91
#, no-wrap
msgid ""
"    class CreateFlightsTable extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->string('name');\n"
"                $table->string('airline');\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 102
#, no-wrap
msgid ""
"        /**\n"
"         * Reverse the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function down()\n"
"        {\n"
"            Schema::drop('flights');\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 104
# File: docs/master/migrations.md, line: 104
#, no-wrap
msgid "<a name=\"anonymous-migrations\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 104
# File: docs/master/migrations.md, line: 104
#, no-wrap
msgid "Anonymous Migrations"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 107
# File: docs/master/migrations.md, line: 107
msgid "As you may have noticed in the example above, Laravel will automatically assign a class name to all of the migrations that you generate using the `make:migration` command. However, if you wish, you may return an anonymous class from your migration file. This is primarily useful if your application accumulates many migrations and two of them have a class name collision:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 111
# File: docs/master/migrations.md, line: 111
#, no-wrap
msgid "    use Illuminate\\Database\\Migrations\\Migration;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 116
# File: docs/master/migrations.md, line: 116
#, no-wrap
msgid ""
"    return new class extends Migration\n"
"    {\n"
"        //\n"
"    };\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 118
# File: docs/master/migrations.md, line: 118
#, no-wrap
msgid "<a name=\"setting-the-migration-connection\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 118
# File: docs/master/migrations.md, line: 118
#, no-wrap
msgid "Setting The Migration Connection"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 121
# File: docs/master/migrations.md, line: 121
msgid "If your migration will be interacting with a database connection other than your application's default database connection, you should set the `$connection` property of your migration:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 128
# File: docs/master/migrations.md, line: 128
#, no-wrap
msgid ""
"    /**\n"
"     * The database connection that should be used by the migration.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'pgsql';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 138
# File: docs/master/migrations.md, line: 138
#, no-wrap
msgid ""
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 140
# File: docs/master/migrations.md, line: 140
#, no-wrap
msgid "<a name=\"running-migrations\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 140
# File: docs/master/migrations.md, line: 140
#, no-wrap
msgid "Running Migrations"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 143
# File: docs/master/migrations.md, line: 143
msgid "To run all of your outstanding migrations, execute the `migrate` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 145
# File: docs/master/migrations.md, line: 145
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 147
# File: docs/master/migrations.md, line: 147
msgid "If you would like to see which migrations have run thus far, you may use the `migrate:status` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 149
# File: docs/master/migrations.md, line: 149
#, no-wrap
msgid "    php artisan migrate:status\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 151
# File: docs/master/migrations.md, line: 151
#, no-wrap
msgid "<a name=\"forcing-migrations-to-run-in-production\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 151
# File: docs/master/migrations.md, line: 151
#, no-wrap
msgid "Forcing Migrations To Run In Production"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 154
# File: docs/master/migrations.md, line: 154
msgid "Some migration operations are destructive, which means they may cause you to lose data. In order to protect you from running these commands against your production database, you will be prompted for confirmation before the commands are executed. To force the commands to run without a prompt, use the `--force` flag:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 156
# File: docs/master/migrations.md, line: 156
#, no-wrap
msgid "    php artisan migrate --force\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 158
# File: docs/master/migrations.md, line: 158
#, no-wrap
msgid "<a name=\"rolling-back-migrations\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 158
# File: docs/master/migrations.md, line: 158
#, no-wrap
msgid "Rolling Back Migrations"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 161
# File: docs/master/migrations.md, line: 161
msgid "To roll back the latest migration operation, you may use the `rollback` Artisan command. This command rolls back the last \"batch\" of migrations, which may include multiple migration files:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 163
# File: docs/master/migrations.md, line: 163
#, no-wrap
msgid "    php artisan migrate:rollback\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 165
# File: docs/master/migrations.md, line: 165
msgid "You may roll back a limited number of migrations by providing the `step` option to the `rollback` command. For example, the following command will roll back the last five migrations:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 167
# File: docs/master/migrations.md, line: 167
#, no-wrap
msgid "    php artisan migrate:rollback --step=5\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 169
# File: docs/master/migrations.md, line: 169
msgid "The `migrate:reset` command will roll back all of your application's migrations:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 171
# File: docs/master/migrations.md, line: 171
#, no-wrap
msgid "    php artisan migrate:reset\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 173
# File: docs/master/migrations.md, line: 173
#, no-wrap
msgid "<a name=\"roll-back-migrate-using-a-single-command\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 173
# File: docs/master/migrations.md, line: 173
#, no-wrap
msgid "Roll Back & Migrate Using A Single Command"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 176
# File: docs/master/migrations.md, line: 176
msgid "The `migrate:refresh` command will roll back all of your migrations and then execute the `migrate` command. This command effectively re-creates your entire database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 178
# File: docs/master/migrations.md, line: 178
#, no-wrap
msgid "    php artisan migrate:refresh\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 181
# File: docs/master/migrations.md, line: 181
#, no-wrap
msgid ""
"    // Refresh the database and run all database seeds...\n"
"    php artisan migrate:refresh --seed\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 183
# File: docs/master/migrations.md, line: 183
msgid "You may roll back and re-migrate a limited number of migrations by providing the `step` option to the `refresh` command. For example, the following command will roll back and re-migrate the last five migrations:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 185
# File: docs/master/migrations.md, line: 185
#, no-wrap
msgid "    php artisan migrate:refresh --step=5\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 187
# File: docs/master/migrations.md, line: 187
#, no-wrap
msgid "<a name=\"drop-all-tables-migrate\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 187
# File: docs/master/migrations.md, line: 187
#, no-wrap
msgid "Drop All Tables & Migrate"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 190
# File: docs/master/migrations.md, line: 190
msgid "The `migrate:fresh` command will drop all tables from the database and then execute the `migrate` command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 192
# File: docs/master/migrations.md, line: 192
#, no-wrap
msgid "    php artisan migrate:fresh\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 194
# File: docs/master/migrations.md, line: 194
#, no-wrap
msgid "    php artisan migrate:fresh --seed\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 196
# File: docs/master/migrations.md, line: 196
#, no-wrap
msgid "> {note} The `migrate:fresh` command will drop all database tables regardless of their prefix. This command should be used with caution when developing on a database that is shared with other applications.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 198
# File: docs/master/migrations.md, line: 198
#, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 198
# File: docs/master/migrations.md, line: 198
#, no-wrap
msgid "Tables"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 201
# File: docs/master/migrations.md, line: 201
#, no-wrap
msgid "<a name=\"creating-tables\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 201
# File: docs/master/migrations.md, line: 201
#, no-wrap
msgid "Creating Tables"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 204
# File: docs/master/migrations.md, line: 204
msgid "To create a new database table, use the `create` method on the `Schema` facade. The `create` method accepts two arguments: the first is the name of the table, while the second is a closure which receives a `Blueprint` object that may be used to define the new table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 207
# File: docs/8.x/migrations.md, line: 271
# File: docs/8.x/migrations.md, line: 306
# File: docs/8.x/migrations.md, line: 863
# File: docs/8.x/migrations.md, line: 1026
# File: docs/8.x/migrations.md, line: 1109
# File: docs/master/migrations.md, line: 207
# File: docs/master/migrations.md, line: 271
# File: docs/master/migrations.md, line: 306
# File: docs/master/migrations.md, line: 863
# File: docs/master/migrations.md, line: 1026
# File: docs/master/migrations.md, line: 1109
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 214
# File: docs/master/migrations.md, line: 214
#, no-wrap
msgid ""
"    Schema::create('users', function (Blueprint $table) {\n"
"        $table->id();\n"
"        $table->string('name');\n"
"        $table->string('email');\n"
"        $table->timestamps();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 216
# File: docs/master/migrations.md, line: 216
msgid "When creating the table, you may use any of the schema builder's [column methods](#creating-columns) to define the table's columns."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 218
# File: docs/master/migrations.md, line: 218
#, no-wrap
msgid "<a name=\"checking-for-table-column-existence\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 218
# File: docs/master/migrations.md, line: 218
#, no-wrap
msgid "Checking For Table / Column Existence"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 221
# File: docs/master/migrations.md, line: 221
msgid "You may check for the existence of a table or column using the `hasTable` and `hasColumn` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 225
# File: docs/master/migrations.md, line: 225
#, no-wrap
msgid ""
"    if (Schema::hasTable('users')) {\n"
"        // The \"users\" table exists...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 229
# File: docs/master/migrations.md, line: 229
#, no-wrap
msgid ""
"    if (Schema::hasColumn('users', 'email')) {\n"
"        // The \"users\" table exists and has an \"email\" column...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 231
# File: docs/master/migrations.md, line: 231
#, no-wrap
msgid "<a name=\"database-connection-table-options\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 231
# File: docs/master/migrations.md, line: 231
#, no-wrap
msgid "Database Connection & Table Options"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 234
# File: docs/master/migrations.md, line: 234
msgid "If you want to perform a schema operation on a database connection that is not your application's default connection, use the `connection` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 238
# File: docs/master/migrations.md, line: 238
#, no-wrap
msgid ""
"    Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n"
"        $table->id();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 240
# File: docs/master/migrations.md, line: 240
msgid "In addition, a few other properties and methods may be used to define other aspects of the table's creation. The `engine` property may be used to specify the table's storage engine when using MySQL:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 243
# File: docs/master/migrations.md, line: 243
#, no-wrap
msgid ""
"    Schema::create('users', function (Blueprint $table) {\n"
"        $table->engine = 'InnoDB';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 246
# File: docs/8.x/migrations.md, line: 255
# File: docs/8.x/migrations.md, line: 263
# File: docs/master/migrations.md, line: 246
# File: docs/master/migrations.md, line: 255
# File: docs/master/migrations.md, line: 263
#, no-wrap
msgid ""
"        // ...\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 248
# File: docs/master/migrations.md, line: 248
msgid "The `charset` and `collation` properties may be used to specify the character set and collation for the created table when using MySQL:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 252
# File: docs/master/migrations.md, line: 252
#, no-wrap
msgid ""
"    Schema::create('users', function (Blueprint $table) {\n"
"        $table->charset = 'utf8mb4';\n"
"        $table->collation = 'utf8mb4_unicode_ci';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 257
# File: docs/master/migrations.md, line: 257
msgid "The `temporary` method may be used to indicate that the table should be \"temporary\". Temporary tables are only visible to the current connection's database session and are dropped automatically when the connection is closed:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 260
# File: docs/master/migrations.md, line: 260
#, no-wrap
msgid ""
"    Schema::create('calculations', function (Blueprint $table) {\n"
"        $table->temporary();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 265
# File: docs/master/migrations.md, line: 265
#, no-wrap
msgid "<a name=\"updating-tables\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 265
# File: docs/master/migrations.md, line: 265
#, no-wrap
msgid "Updating Tables"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 268
# File: docs/master/migrations.md, line: 268
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives a `Blueprint` instance you may use to add columns or indexes to the table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 275
# File: docs/8.x/migrations.md, line: 310
# File: docs/master/migrations.md, line: 275
# File: docs/master/migrations.md, line: 310
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->integer('votes');\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 277
# File: docs/master/migrations.md, line: 277
#, no-wrap
msgid "<a name=\"renaming-and-dropping-tables\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 277
# File: docs/master/migrations.md, line: 277
#, no-wrap
msgid "Renaming / Dropping Tables"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 280
# File: docs/master/migrations.md, line: 280
msgid "To rename an existing database table, use the `rename` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 282
# File: docs/8.x/migrations.md, line: 1064
# File: docs/master/migrations.md, line: 282
# File: docs/master/migrations.md, line: 1064
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 284
# File: docs/master/migrations.md, line: 284
#, no-wrap
msgid "    Schema::rename($from, $to);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 286
# File: docs/master/migrations.md, line: 286
msgid "To drop an existing table, you may use the `drop` or `dropIfExists` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 288
# File: docs/master/migrations.md, line: 288
#, no-wrap
msgid "    Schema::drop('users');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 290
# File: docs/master/migrations.md, line: 290
#, no-wrap
msgid "    Schema::dropIfExists('users');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 292
# File: docs/master/migrations.md, line: 292
#, no-wrap
msgid "<a name=\"renaming-tables-with-foreign-keys\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 292
# File: docs/master/migrations.md, line: 292
#, no-wrap
msgid "Renaming Tables With Foreign Keys"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 295
# File: docs/master/migrations.md, line: 295
msgid "Before renaming a table, you should verify that any foreign key constraints on the table have an explicit name in your migration files instead of letting Laravel assign a convention based name. Otherwise, the foreign key constraint name will refer to the old table name."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 297
# File: docs/master/migrations.md, line: 297
#, no-wrap
msgid "<a name=\"columns\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 297
# File: docs/master/migrations.md, line: 297
#, no-wrap
msgid "Columns"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 300
# File: docs/master/migrations.md, line: 300
#, no-wrap
msgid "<a name=\"creating-columns\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 300
# File: docs/master/migrations.md, line: 300
#, no-wrap
msgid "Creating Columns"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 303
# File: docs/master/migrations.md, line: 303
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives an `Illuminate\\Database\\Schema\\Blueprint` instance you may use to add columns to the table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 312
# File: docs/master/migrations.md, line: 312
#, no-wrap
msgid "<a name=\"available-column-types\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 312
# File: docs/master/migrations.md, line: 312
#, no-wrap
msgid "Available Column Types"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 315
# File: docs/master/migrations.md, line: 315
msgid "The schema builder blueprint offers a variety of methods that correspond to the different types of columns you can add to your database tables. Each of the available methods are listed in the table below:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 321
# File: docs/master/migrations.md, line: 321
#, no-wrap
msgid ""
"<style>\n"
"    #collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 325
# File: docs/master/migrations.md, line: 325
#, no-wrap
msgid ""
"    #collection-method-list a {\n"
"        display: block;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 329
# File: docs/master/migrations.md, line: 329
#, no-wrap
msgid ""
"    .collection-method code {\n"
"        font-size: 14px;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 334
# File: docs/master/migrations.md, line: 334
#, no-wrap
msgid ""
"    .collection-method:not(.first-collection-method) {\n"
"        margin-top: 50px;\n"
"    }\n"
"</style>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 336
# File: docs/master/migrations.md, line: 336
#, no-wrap
msgid "<div id=\"collection-method-list\" markdown=\"1\">\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 401
# File: docs/master/migrations.md, line: 401
msgid "[bigIncrements](#column-method-bigIncrements)  [bigInteger](#column-method-bigInteger)  [binary](#column-method-binary)  [boolean](#column-method-boolean)  [char](#column-method-char)  [dateTimeTz](#column-method-dateTimeTz)  [dateTime](#column-method-dateTime)  [date](#column-method-date)  [decimal](#column-method-decimal)  [double](#column-method-double)  [enum](#column-method-enum)  [float](#column-method-float)  [foreignId](#column-method-foreignId)  [foreignIdFor](#column-method-foreignIdFor)  [foreignUuid](#column-method-foreignUuid)  [geometryCollection](#column-method-geometryCollection)  [geometry](#column-method-geometry)  [id](#column-method-id)  [increments](#column-method-increments)  [integer](#column-method-integer)  [ipAddress](#column-method-ipAddress)  [json](#column-method-json)  [jsonb](#column-method-jsonb)  [lineString](#column-method-lineString)  [longText](#column-method-longText)  [macAddress](#column-method-macAddress)  [mediumIncrements](#column-method-mediumIncrements)  [mediumInteger](#column-method-mediumInteger)  [mediumText](#column-method-mediumText)  [morphs](#column-method-morphs)  [multiLineString](#column-method-multiLineString)  [multiPoint](#column-method-multiPoint)  [multiPolygon](#column-method-multiPolygon)  [nullableMorphs](#column-method-nullableMorphs)  [nullableTimestamps](#column-method-nullableTimestamps)  [nullableUuidMorphs](#column-method-nullableUuidMorphs)  [point](#column-method-point)  [polygon](#column-method-polygon)  [rememberToken](#column-method-rememberToken)  [set](#column-method-set)  [smallIncrements](#column-method-smallIncrements)  [smallInteger](#column-method-smallInteger)  [softDeletesTz](#column-method-softDeletesTz)  [softDeletes](#column-method-softDeletes)  [string](#column-method-string)  [text](#column-method-text)  [timeTz](#column-method-timeTz)  [time](#column-method-time)  [timestampTz](#column-method-timestampTz)  [timestamp](#column-method-timestamp)  [timestampsTz](#column-method-timestampsTz)  [timestamps](#column-method-timestamps)  [tinyIncrements](#column-method-tinyIncrements)  [tinyInteger](#column-method-tinyInteger)  [tinyText](#column-method-tinyText)  [unsignedBigInteger](#column-method-unsignedBigInteger)  [unsignedDecimal](#column-method-unsignedDecimal)  [unsignedInteger](#column-method-unsignedInteger)  [unsignedMediumInteger](#column-method-unsignedMediumInteger)  [unsignedSmallInteger](#column-method-unsignedSmallInteger)  [unsignedTinyInteger](#column-method-unsignedTinyInteger)  [uuidMorphs](#column-method-uuidMorphs)  [uuid](#column-method-uuid)  [year](#column-method-year)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 403
# File: docs/master/migrations.md, line: 403
#, no-wrap
msgid "</div>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 405
# File: docs/master/migrations.md, line: 405
#, no-wrap
msgid "<a name=\"column-method-bigIncrements\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 405
# File: docs/master/migrations.md, line: 405
#, no-wrap
msgid "`bigIncrements()` {.collection-method .first-collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 408
# File: docs/master/migrations.md, line: 408
msgid "The `bigIncrements` method creates an auto-incrementing `UNSIGNED BIGINT` (primary key) equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 410
# File: docs/master/migrations.md, line: 410
#, no-wrap
msgid "    $table->bigIncrements('id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 412
# File: docs/master/migrations.md, line: 412
#, no-wrap
msgid "<a name=\"column-method-bigInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 412
# File: docs/master/migrations.md, line: 412
#, no-wrap
msgid "`bigInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 415
# File: docs/master/migrations.md, line: 415
msgid "The `bigInteger` method creates a `BIGINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 417
# File: docs/master/migrations.md, line: 417
#, no-wrap
msgid "    $table->bigInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 419
# File: docs/master/migrations.md, line: 419
#, no-wrap
msgid "<a name=\"column-method-binary\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 419
# File: docs/master/migrations.md, line: 419
#, no-wrap
msgid "`binary()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 422
# File: docs/master/migrations.md, line: 422
msgid "The `binary` method creates a `BLOB` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 424
# File: docs/master/migrations.md, line: 424
#, no-wrap
msgid "    $table->binary('photo');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 426
# File: docs/master/migrations.md, line: 426
#, no-wrap
msgid "<a name=\"column-method-boolean\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 426
# File: docs/master/migrations.md, line: 426
#, no-wrap
msgid "`boolean()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 429
# File: docs/master/migrations.md, line: 429
msgid "The `boolean` method creates a `BOOLEAN` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 431
# File: docs/master/migrations.md, line: 431
#, no-wrap
msgid "    $table->boolean('confirmed');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 433
# File: docs/master/migrations.md, line: 433
#, no-wrap
msgid "<a name=\"column-method-char\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 433
# File: docs/master/migrations.md, line: 433
#, no-wrap
msgid "`char()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 436
# File: docs/master/migrations.md, line: 436
msgid "The `char` method creates a `CHAR` equivalent column with of a given length:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 438
# File: docs/master/migrations.md, line: 438
#, no-wrap
msgid "    $table->char('name', 100);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 440
# File: docs/master/migrations.md, line: 440
#, no-wrap
msgid "<a name=\"column-method-dateTimeTz\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 440
# File: docs/master/migrations.md, line: 440
#, no-wrap
msgid "`dateTimeTz()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 443
# File: docs/master/migrations.md, line: 443
msgid "The `dateTimeTz` method creates a `DATETIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 445
# File: docs/master/migrations.md, line: 445
#, no-wrap
msgid "    $table->dateTimeTz('created_at', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 447
# File: docs/master/migrations.md, line: 447
#, no-wrap
msgid "<a name=\"column-method-dateTime\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 447
# File: docs/master/migrations.md, line: 447
#, no-wrap
msgid "`dateTime()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 450
# File: docs/master/migrations.md, line: 450
msgid "The `dateTime` method creates a `DATETIME` equivalent column with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 452
# File: docs/master/migrations.md, line: 452
#, no-wrap
msgid "    $table->dateTime('created_at', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 454
# File: docs/master/migrations.md, line: 454
#, no-wrap
msgid "<a name=\"column-method-date\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 454
# File: docs/master/migrations.md, line: 454
#, no-wrap
msgid "`date()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 457
# File: docs/master/migrations.md, line: 457
msgid "The `date` method creates a `DATE` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 459
# File: docs/master/migrations.md, line: 459
#, no-wrap
msgid "    $table->date('created_at');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 461
# File: docs/master/migrations.md, line: 461
#, no-wrap
msgid "<a name=\"column-method-decimal\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 461
# File: docs/master/migrations.md, line: 461
#, no-wrap
msgid "`decimal()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 464
# File: docs/master/migrations.md, line: 464
msgid "The `decimal` method creates a `DECIMAL` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 466
# File: docs/master/migrations.md, line: 466
#, no-wrap
msgid "    $table->decimal('amount', $precision = 8, $scale = 2);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 468
# File: docs/master/migrations.md, line: 468
#, no-wrap
msgid "<a name=\"column-method-double\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 468
# File: docs/master/migrations.md, line: 468
#, no-wrap
msgid "`double()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 471
# File: docs/master/migrations.md, line: 471
msgid "The `double` method creates a `DOUBLE` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 473
# File: docs/master/migrations.md, line: 473
#, no-wrap
msgid "    $table->double('amount', 8, 2);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 475
# File: docs/master/migrations.md, line: 475
#, no-wrap
msgid "<a name=\"column-method-enum\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 475
# File: docs/master/migrations.md, line: 475
#, no-wrap
msgid "`enum()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 478
# File: docs/master/migrations.md, line: 478
msgid "The `enum` method creates a `ENUM` equivalent column with the given valid values:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 480
# File: docs/master/migrations.md, line: 480
#, no-wrap
msgid "    $table->enum('difficulty', ['easy', 'hard']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 482
# File: docs/master/migrations.md, line: 482
#, no-wrap
msgid "<a name=\"column-method-float\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 482
# File: docs/master/migrations.md, line: 482
#, no-wrap
msgid "`float()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 485
# File: docs/master/migrations.md, line: 485
msgid "The `float` method creates a `FLOAT` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 487
# File: docs/master/migrations.md, line: 487
#, no-wrap
msgid "    $table->float('amount', 8, 2);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 489
# File: docs/master/migrations.md, line: 489
#, no-wrap
msgid "<a name=\"column-method-foreignId\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 489
# File: docs/master/migrations.md, line: 489
#, no-wrap
msgid "`foreignId()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 492
# File: docs/master/migrations.md, line: 492
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 494
# File: docs/master/migrations.md, line: 494
#, no-wrap
msgid "    $table->foreignId('user_id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 496
# File: docs/master/migrations.md, line: 496
#, no-wrap
msgid "<a name=\"column-method-foreignIdFor\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 496
# File: docs/master/migrations.md, line: 496
#, no-wrap
msgid "`foreignIdFor()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 499
# File: docs/master/migrations.md, line: 499
msgid "The `foreignIdFor` method adds a `{column}_id UNSIGNED BIGINT` equivalent column for a given model class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 501
# File: docs/master/migrations.md, line: 501
#, no-wrap
msgid "    $table->foreignIdFor(User::class);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 503
# File: docs/master/migrations.md, line: 503
#, no-wrap
msgid "<a name=\"column-method-foreignUuid\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 503
# File: docs/master/migrations.md, line: 503
#, no-wrap
msgid "`foreignUuid()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 506
# File: docs/master/migrations.md, line: 506
msgid "The `foreignUuid` method creates a `UUID` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 508
# File: docs/master/migrations.md, line: 508
#, no-wrap
msgid "    $table->foreignUuid('user_id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 510
# File: docs/master/migrations.md, line: 510
#, no-wrap
msgid "<a name=\"column-method-geometryCollection\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 510
# File: docs/master/migrations.md, line: 510
#, no-wrap
msgid "`geometryCollection()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 513
# File: docs/master/migrations.md, line: 513
msgid "The `geometryCollection` method creates a `GEOMETRYCOLLECTION` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 515
# File: docs/master/migrations.md, line: 515
#, no-wrap
msgid "    $table->geometryCollection('positions');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 517
# File: docs/master/migrations.md, line: 517
#, no-wrap
msgid "<a name=\"column-method-geometry\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 517
# File: docs/master/migrations.md, line: 517
#, no-wrap
msgid "`geometry()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 520
# File: docs/master/migrations.md, line: 520
msgid "The `geometry` method creates a `GEOMETRY` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 522
# File: docs/master/migrations.md, line: 522
#, no-wrap
msgid "    $table->geometry('positions');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 524
# File: docs/master/migrations.md, line: 524
#, no-wrap
msgid "<a name=\"column-method-id\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 524
# File: docs/master/migrations.md, line: 524
#, no-wrap
msgid "`id()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 527
# File: docs/master/migrations.md, line: 527
msgid "The `id` method is an alias of the `bigIncrements` method. By default, the method will create an `id` column; however, you may pass a column name if you would like to assign a different name to the column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 529
# File: docs/master/migrations.md, line: 529
#, no-wrap
msgid "    $table->id();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 531
# File: docs/master/migrations.md, line: 531
#, no-wrap
msgid "<a name=\"column-method-increments\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 531
# File: docs/master/migrations.md, line: 531
#, no-wrap
msgid "`increments()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 534
# File: docs/master/migrations.md, line: 534
msgid "The `increments` method creates an auto-incrementing `UNSIGNED INTEGER` equivalent column as a primary key:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 536
# File: docs/master/migrations.md, line: 536
#, no-wrap
msgid "    $table->increments('id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 538
# File: docs/master/migrations.md, line: 538
#, no-wrap
msgid "<a name=\"column-method-integer\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 538
# File: docs/master/migrations.md, line: 538
#, no-wrap
msgid "`integer()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 541
# File: docs/master/migrations.md, line: 541
msgid "The `integer` method creates an `INTEGER` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 543
# File: docs/master/migrations.md, line: 543
#, no-wrap
msgid "    $table->integer('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 545
# File: docs/master/migrations.md, line: 545
#, no-wrap
msgid "<a name=\"column-method-ipAddress\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 545
# File: docs/master/migrations.md, line: 545
#, no-wrap
msgid "`ipAddress()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 548
# File: docs/master/migrations.md, line: 548
msgid "The `ipAddress` method creates a `VARCHAR` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 550
# File: docs/master/migrations.md, line: 550
#, no-wrap
msgid "    $table->ipAddress('visitor');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 552
# File: docs/master/migrations.md, line: 552
#, no-wrap
msgid "<a name=\"column-method-json\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 552
# File: docs/master/migrations.md, line: 552
#, no-wrap
msgid "`json()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 555
# File: docs/master/migrations.md, line: 555
msgid "The `json` method creates a `JSON` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 557
# File: docs/master/migrations.md, line: 557
#, no-wrap
msgid "    $table->json('options');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 559
# File: docs/master/migrations.md, line: 559
#, no-wrap
msgid "<a name=\"column-method-jsonb\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 559
# File: docs/master/migrations.md, line: 559
#, no-wrap
msgid "`jsonb()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 562
# File: docs/master/migrations.md, line: 562
msgid "The `jsonb` method creates a `JSONB` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 564
# File: docs/master/migrations.md, line: 564
#, no-wrap
msgid "    $table->jsonb('options');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 566
# File: docs/master/migrations.md, line: 566
#, no-wrap
msgid "<a name=\"column-method-lineString\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 566
# File: docs/master/migrations.md, line: 566
#, no-wrap
msgid "`lineString()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 569
# File: docs/master/migrations.md, line: 569
msgid "The `lineString` method creates a `LINESTRING` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 571
# File: docs/master/migrations.md, line: 571
#, no-wrap
msgid "    $table->lineString('positions');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 573
# File: docs/master/migrations.md, line: 573
#, no-wrap
msgid "<a name=\"column-method-longText\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 573
# File: docs/master/migrations.md, line: 573
#, no-wrap
msgid "`longText()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 576
# File: docs/master/migrations.md, line: 576
msgid "The `longText` method creates a `LONGTEXT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 578
# File: docs/master/migrations.md, line: 578
#, no-wrap
msgid "    $table->longText('description');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 580
# File: docs/master/migrations.md, line: 580
#, no-wrap
msgid "<a name=\"column-method-macAddress\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 580
# File: docs/master/migrations.md, line: 580
#, no-wrap
msgid "`macAddress()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 583
# File: docs/master/migrations.md, line: 583
msgid "The `macAddress` method creates a column that is intended to hold a MAC address. Some database systems, such as PostgreSQL, have a dedicated column type for this type of data. Other database systems will use a string equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 585
# File: docs/master/migrations.md, line: 585
#, no-wrap
msgid "    $table->macAddress('device');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 587
# File: docs/master/migrations.md, line: 587
#, no-wrap
msgid "<a name=\"column-method-mediumIncrements\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 587
# File: docs/master/migrations.md, line: 587
#, no-wrap
msgid "`mediumIncrements()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 590
# File: docs/master/migrations.md, line: 590
msgid "The `mediumIncrements` method creates an auto-incrementing `UNSIGNED MEDIUMINT` equivalent column as a primary key:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 592
# File: docs/master/migrations.md, line: 592
#, no-wrap
msgid "    $table->mediumIncrements('id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 594
# File: docs/master/migrations.md, line: 594
#, no-wrap
msgid "<a name=\"column-method-mediumInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 594
# File: docs/master/migrations.md, line: 594
#, no-wrap
msgid "`mediumInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 597
# File: docs/master/migrations.md, line: 597
msgid "The `mediumInteger` method creates a `MEDIUMINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 599
# File: docs/master/migrations.md, line: 599
#, no-wrap
msgid "    $table->mediumInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 601
# File: docs/master/migrations.md, line: 601
#, no-wrap
msgid "<a name=\"column-method-mediumText\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 601
# File: docs/master/migrations.md, line: 601
#, no-wrap
msgid "`mediumText()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 604
# File: docs/master/migrations.md, line: 604
msgid "The `mediumText` method creates a `MEDIUMTEXT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 606
# File: docs/master/migrations.md, line: 606
#, no-wrap
msgid "    $table->mediumText('description');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 608
# File: docs/master/migrations.md, line: 608
#, no-wrap
msgid "<a name=\"column-method-morphs\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 608
# File: docs/master/migrations.md, line: 608
#, no-wrap
msgid "`morphs()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 611
# File: docs/master/migrations.md, line: 611
msgid "The `morphs` method is a convenience method that adds a `{column}_id` `UNSIGNED BIGINT` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 613
# File: docs/master/migrations.md, line: 613
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships). In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 615
# File: docs/master/migrations.md, line: 615
#, no-wrap
msgid "    $table->morphs('taggable');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 617
# File: docs/master/migrations.md, line: 617
#, no-wrap
msgid "<a name=\"column-method-multiLineString\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 617
# File: docs/master/migrations.md, line: 617
#, no-wrap
msgid "`multiLineString()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 620
# File: docs/master/migrations.md, line: 620
msgid "The `multiLineString` method creates a `MULTILINESTRING` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 622
# File: docs/master/migrations.md, line: 622
#, no-wrap
msgid "    $table->multiLineString('positions');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 624
# File: docs/master/migrations.md, line: 624
#, no-wrap
msgid "<a name=\"column-method-multiPoint\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 624
# File: docs/master/migrations.md, line: 624
#, no-wrap
msgid "`multiPoint()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 627
# File: docs/master/migrations.md, line: 627
msgid "The `multiPoint` method creates a `MULTIPOINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 629
# File: docs/master/migrations.md, line: 629
#, no-wrap
msgid "    $table->multiPoint('positions');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 631
# File: docs/master/migrations.md, line: 631
#, no-wrap
msgid "<a name=\"column-method-multiPolygon\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 631
# File: docs/master/migrations.md, line: 631
#, no-wrap
msgid "`multiPolygon()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 634
# File: docs/master/migrations.md, line: 634
msgid "The `multiPolygon` method creates a `MULTIPOLYGON` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 636
# File: docs/master/migrations.md, line: 636
#, no-wrap
msgid "    $table->multiPolygon('positions');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 638
# File: docs/master/migrations.md, line: 638
#, no-wrap
msgid "<a name=\"column-method-nullableTimestamps\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 638
# File: docs/master/migrations.md, line: 638
#, no-wrap
msgid "`nullableTimestamps()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 641
# File: docs/master/migrations.md, line: 641
msgid "The `nullableTimestamps` method is an alias of the [timestamps](#column-method-timestamps) method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 643
# File: docs/master/migrations.md, line: 643
#, no-wrap
msgid "    $table->nullableTimestamps(0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 645
# File: docs/master/migrations.md, line: 645
#, no-wrap
msgid "<a name=\"column-method-nullableMorphs\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 645
# File: docs/master/migrations.md, line: 645
#, no-wrap
msgid "`nullableMorphs()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 648
# File: docs/master/migrations.md, line: 648
msgid "The method is similar to the [morphs](#column-method-morphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 650
# File: docs/master/migrations.md, line: 650
#, no-wrap
msgid "    $table->nullableMorphs('taggable');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 652
# File: docs/master/migrations.md, line: 652
#, no-wrap
msgid "<a name=\"column-method-nullableUuidMorphs\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 652
# File: docs/master/migrations.md, line: 652
#, no-wrap
msgid "`nullableUuidMorphs()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 655
# File: docs/master/migrations.md, line: 655
msgid "The method is similar to the [uuidMorphs](#column-method-uuidMorphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 657
# File: docs/master/migrations.md, line: 657
#, no-wrap
msgid "    $table->nullableUuidMorphs('taggable');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 659
# File: docs/master/migrations.md, line: 659
#, no-wrap
msgid "<a name=\"column-method-point\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 659
# File: docs/master/migrations.md, line: 659
#, no-wrap
msgid "`point()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 662
# File: docs/master/migrations.md, line: 662
msgid "The `point` method creates a `POINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 664
# File: docs/master/migrations.md, line: 664
#, no-wrap
msgid "    $table->point('position');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 666
# File: docs/master/migrations.md, line: 666
#, no-wrap
msgid "<a name=\"column-method-polygon\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 666
# File: docs/master/migrations.md, line: 666
#, no-wrap
msgid "`polygon()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 669
# File: docs/master/migrations.md, line: 669
msgid "The `polygon` method creates a `POLYGON` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 671
# File: docs/master/migrations.md, line: 671
#, no-wrap
msgid "    $table->polygon('position');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 673
# File: docs/master/migrations.md, line: 673
#, no-wrap
msgid "<a name=\"column-method-rememberToken\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 673
# File: docs/master/migrations.md, line: 673
#, no-wrap
msgid "`rememberToken()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 676
# File: docs/master/migrations.md, line: 676
msgid "The `rememberToken` method creates a nullable, `VARCHAR(100)` equivalent column that is intended to store the current \"remember me\" [authentication token](/docs/{{version}}/authentication#remembering-users):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 678
# File: docs/master/migrations.md, line: 678
#, no-wrap
msgid "    $table->rememberToken();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 680
# File: docs/master/migrations.md, line: 680
#, no-wrap
msgid "<a name=\"column-method-set\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 680
# File: docs/master/migrations.md, line: 680
#, no-wrap
msgid "`set()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 683
# File: docs/master/migrations.md, line: 683
msgid "The `set` method creates a `SET` equivalent column with the given list of valid values:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 685
# File: docs/master/migrations.md, line: 685
#, no-wrap
msgid "    $table->set('flavors', ['strawberry', 'vanilla']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 687
# File: docs/master/migrations.md, line: 687
#, no-wrap
msgid "<a name=\"column-method-smallIncrements\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 687
# File: docs/master/migrations.md, line: 687
#, no-wrap
msgid "`smallIncrements()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 690
# File: docs/master/migrations.md, line: 690
msgid "The `smallIncrements` method creates an auto-incrementing `UNSIGNED SMALLINT` equivalent column as a primary key:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 692
# File: docs/master/migrations.md, line: 692
#, no-wrap
msgid "    $table->smallIncrements('id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 694
# File: docs/master/migrations.md, line: 694
#, no-wrap
msgid "<a name=\"column-method-smallInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 694
# File: docs/master/migrations.md, line: 694
#, no-wrap
msgid "`smallInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 697
# File: docs/master/migrations.md, line: 697
msgid "The `smallInteger` method creates a `SMALLINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 699
# File: docs/master/migrations.md, line: 699
#, no-wrap
msgid "    $table->smallInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 701
# File: docs/master/migrations.md, line: 701
#, no-wrap
msgid "<a name=\"column-method-softDeletesTz\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 701
# File: docs/master/migrations.md, line: 701
#, no-wrap
msgid "`softDeletesTz()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 704
# File: docs/master/migrations.md, line: 704
msgid "The `softDeletesTz` method adds a nullable `deleted_at` `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 706
# File: docs/master/migrations.md, line: 706
#, no-wrap
msgid "    $table->softDeletesTz($column = 'deleted_at', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 708
# File: docs/master/migrations.md, line: 708
#, no-wrap
msgid "<a name=\"column-method-softDeletes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 708
# File: docs/master/migrations.md, line: 708
#, no-wrap
msgid "`softDeletes()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 711
# File: docs/master/migrations.md, line: 711
msgid "The `softDeletes` method adds a nullable `deleted_at` `TIMESTAMP` equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 713
# File: docs/master/migrations.md, line: 713
#, no-wrap
msgid "    $table->softDeletes($column = 'deleted_at', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 715
# File: docs/master/migrations.md, line: 715
#, no-wrap
msgid "<a name=\"column-method-string\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 715
# File: docs/master/migrations.md, line: 715
#, no-wrap
msgid "`string()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 718
# File: docs/master/migrations.md, line: 718
msgid "The `string` method creates a `VARCHAR` equivalent column of the given length:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 720
# File: docs/master/migrations.md, line: 720
#, no-wrap
msgid "    $table->string('name', 100);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 722
# File: docs/master/migrations.md, line: 722
#, no-wrap
msgid "<a name=\"column-method-text\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 722
# File: docs/master/migrations.md, line: 722
#, no-wrap
msgid "`text()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 725
# File: docs/master/migrations.md, line: 725
msgid "The `text` method creates a `TEXT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 727
# File: docs/master/migrations.md, line: 727
#, no-wrap
msgid "    $table->text('description');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 729
# File: docs/master/migrations.md, line: 729
#, no-wrap
msgid "<a name=\"column-method-timeTz\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 729
# File: docs/master/migrations.md, line: 729
#, no-wrap
msgid "`timeTz()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 732
# File: docs/master/migrations.md, line: 732
msgid "The `timeTz` method creates a `TIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 734
# File: docs/master/migrations.md, line: 734
#, no-wrap
msgid "    $table->timeTz('sunrise', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 736
# File: docs/master/migrations.md, line: 736
#, no-wrap
msgid "<a name=\"column-method-time\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 736
# File: docs/master/migrations.md, line: 736
#, no-wrap
msgid "`time()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 739
# File: docs/master/migrations.md, line: 739
msgid "The `time` method creates a `TIME` equivalent column with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 741
# File: docs/master/migrations.md, line: 741
#, no-wrap
msgid "    $table->time('sunrise', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 743
# File: docs/master/migrations.md, line: 743
#, no-wrap
msgid "<a name=\"column-method-timestampTz\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 743
# File: docs/master/migrations.md, line: 743
#, no-wrap
msgid "`timestampTz()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 746
# File: docs/master/migrations.md, line: 746
msgid "The `timestampTz` method creates a `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 748
# File: docs/master/migrations.md, line: 748
#, no-wrap
msgid "    $table->timestampTz('added_at', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 750
# File: docs/master/migrations.md, line: 750
#, no-wrap
msgid "<a name=\"column-method-timestamp\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 750
# File: docs/master/migrations.md, line: 750
#, no-wrap
msgid "`timestamp()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 753
# File: docs/master/migrations.md, line: 753
msgid "The `timestamp` method creates a `TIMESTAMP` equivalent column with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 755
# File: docs/master/migrations.md, line: 755
#, no-wrap
msgid "    $table->timestamp('added_at', $precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 757
# File: docs/master/migrations.md, line: 757
#, no-wrap
msgid "<a name=\"column-method-timestampsTz\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 757
# File: docs/master/migrations.md, line: 757
#, no-wrap
msgid "`timestampsTz()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 760
# File: docs/master/migrations.md, line: 760
msgid "The `timestampsTz` method creates `created_at` and `updated_at` `TIMESTAMP` (with timezone) equivalent columns with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 762
# File: docs/master/migrations.md, line: 762
#, no-wrap
msgid "    $table->timestampsTz($precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 764
# File: docs/master/migrations.md, line: 764
#, no-wrap
msgid "<a name=\"column-method-timestamps\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 764
# File: docs/master/migrations.md, line: 764
#, no-wrap
msgid "`timestamps()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 767
# File: docs/master/migrations.md, line: 767
msgid "The `timestamps` method creates `created_at` and `updated_at` `TIMESTAMP` equivalent columns with an optional precision (total digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 769
# File: docs/master/migrations.md, line: 769
#, no-wrap
msgid "    $table->timestamps($precision = 0);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 771
# File: docs/master/migrations.md, line: 771
#, no-wrap
msgid "<a name=\"column-method-tinyIncrements\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 771
# File: docs/master/migrations.md, line: 771
#, no-wrap
msgid "`tinyIncrements()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 774
# File: docs/master/migrations.md, line: 774
msgid "The `tinyIncrements` method creates an auto-incrementing `UNSIGNED TINYINT` equivalent column as a primary key:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 776
# File: docs/master/migrations.md, line: 776
#, no-wrap
msgid "    $table->tinyIncrements('id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 778
# File: docs/master/migrations.md, line: 778
#, no-wrap
msgid "<a name=\"column-method-tinyInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 778
# File: docs/master/migrations.md, line: 778
#, no-wrap
msgid "`tinyInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 781
# File: docs/master/migrations.md, line: 781
msgid "The `tinyInteger` method creates a `TINYINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 783
# File: docs/master/migrations.md, line: 783
#, no-wrap
msgid "    $table->tinyInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 785
# File: docs/master/migrations.md, line: 785
#, no-wrap
msgid "<a name=\"column-method-tinyText\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 785
# File: docs/master/migrations.md, line: 785
#, no-wrap
msgid "`tinyText()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 788
# File: docs/master/migrations.md, line: 788
msgid "The `tinyText` method creates a `TINYTEXT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 790
# File: docs/master/migrations.md, line: 790
#, no-wrap
msgid "    $table->tinyText('notes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 792
# File: docs/master/migrations.md, line: 792
#, no-wrap
msgid "<a name=\"column-method-unsignedBigInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 792
# File: docs/master/migrations.md, line: 792
#, no-wrap
msgid "`unsignedBigInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 795
# File: docs/master/migrations.md, line: 795
msgid "The `unsignedBigInteger` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 797
# File: docs/master/migrations.md, line: 797
#, no-wrap
msgid "    $table->unsignedBigInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 799
# File: docs/master/migrations.md, line: 799
#, no-wrap
msgid "<a name=\"column-method-unsignedDecimal\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 799
# File: docs/master/migrations.md, line: 799
#, no-wrap
msgid "`unsignedDecimal()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 802
# File: docs/master/migrations.md, line: 802
msgid "The `unsignedDecimal` method creates an `UNSIGNED DECIMAL` equivalent column with an optional precision (total digits) and scale (decimal digits):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 804
# File: docs/master/migrations.md, line: 804
#, no-wrap
msgid "    $table->unsignedDecimal('amount', $precision = 8, $scale = 2);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 806
# File: docs/master/migrations.md, line: 806
#, no-wrap
msgid "<a name=\"column-method-unsignedInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 806
# File: docs/master/migrations.md, line: 806
#, no-wrap
msgid "`unsignedInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 809
# File: docs/master/migrations.md, line: 809
msgid "The `unsignedInteger` method creates an `UNSIGNED INTEGER` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 811
# File: docs/master/migrations.md, line: 811
#, no-wrap
msgid "    $table->unsignedInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 813
# File: docs/master/migrations.md, line: 813
#, no-wrap
msgid "<a name=\"column-method-unsignedMediumInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 813
# File: docs/master/migrations.md, line: 813
#, no-wrap
msgid "`unsignedMediumInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 816
# File: docs/master/migrations.md, line: 816
msgid "The `unsignedMediumInteger` method creates an `UNSIGNED MEDIUMINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 818
# File: docs/master/migrations.md, line: 818
#, no-wrap
msgid "    $table->unsignedMediumInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 820
# File: docs/master/migrations.md, line: 820
#, no-wrap
msgid "<a name=\"column-method-unsignedSmallInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 820
# File: docs/master/migrations.md, line: 820
#, no-wrap
msgid "`unsignedSmallInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 823
# File: docs/master/migrations.md, line: 823
msgid "The `unsignedSmallInteger` method creates an `UNSIGNED SMALLINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 825
# File: docs/master/migrations.md, line: 825
#, no-wrap
msgid "    $table->unsignedSmallInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 827
# File: docs/master/migrations.md, line: 827
#, no-wrap
msgid "<a name=\"column-method-unsignedTinyInteger\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 827
# File: docs/master/migrations.md, line: 827
#, no-wrap
msgid "`unsignedTinyInteger()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 830
# File: docs/master/migrations.md, line: 830
msgid "The `unsignedTinyInteger` method creates an `UNSIGNED TINYINT` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 832
# File: docs/master/migrations.md, line: 832
#, no-wrap
msgid "    $table->unsignedTinyInteger('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 834
# File: docs/master/migrations.md, line: 834
#, no-wrap
msgid "<a name=\"column-method-uuidMorphs\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 834
# File: docs/master/migrations.md, line: 834
#, no-wrap
msgid "`uuidMorphs()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 837
# File: docs/master/migrations.md, line: 837
msgid "The `uuidMorphs` method is a convenience method that adds a `{column}_id` `CHAR(36)` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 839
# File: docs/master/migrations.md, line: 839
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that use UUID identifiers. In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 841
# File: docs/master/migrations.md, line: 841
#, no-wrap
msgid "    $table->uuidMorphs('taggable');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 843
# File: docs/master/migrations.md, line: 843
#, no-wrap
msgid "<a name=\"column-method-uuid\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 843
# File: docs/master/migrations.md, line: 843
#, no-wrap
msgid "`uuid()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 846
# File: docs/master/migrations.md, line: 846
msgid "The `uuid` method creates a `UUID` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 848
# File: docs/master/migrations.md, line: 848
#, no-wrap
msgid "    $table->uuid('id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 850
# File: docs/master/migrations.md, line: 850
#, no-wrap
msgid "<a name=\"column-method-year\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 850
# File: docs/master/migrations.md, line: 850
#, no-wrap
msgid "`year()` {.collection-method}"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 853
# File: docs/master/migrations.md, line: 853
msgid "The `year` method creates a `YEAR` equivalent column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 855
# File: docs/master/migrations.md, line: 855
#, no-wrap
msgid "    $table->year('birth_year');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 857
# File: docs/master/migrations.md, line: 857
#, no-wrap
msgid "<a name=\"column-modifiers\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 857
# File: docs/master/migrations.md, line: 857
#, no-wrap
msgid "Column Modifiers"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 860
# File: docs/master/migrations.md, line: 860
msgid "In addition to the column types listed above, there are several column \"modifiers\" you may use when adding a column to a database table. For example, to make the column \"nullable\", you may use the `nullable` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 867
# File: docs/master/migrations.md, line: 867
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('email')->nullable();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 869
# File: docs/master/migrations.md, line: 869
msgid "The following table contains all of the available column modifiers. This list does not include [index modifiers](#creating-indexes):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 890
# File: docs/master/migrations.md, line: 890
#, no-wrap
msgid ""
"Modifier  |  Description\n"
"--------  |  -----------\n"
"`->after('column')`  |  Place the column \"after\" another column (MySQL).\n"
"`->autoIncrement()`  |  Set INTEGER columns as auto-incrementing (primary key).\n"
"`->charset('utf8mb4')`  |  Specify a character set for the column (MySQL).\n"
"`->collation('utf8mb4_unicode_ci')`  |  Specify a collation for the column (MySQL/PostgreSQL/SQL Server).\n"
"`->comment('my comment')`  |  Add a comment to a column (MySQL/PostgreSQL).\n"
"`->default($value)`  |  Specify a \"default\" value for the column.\n"
"`->first()`  |  Place the column \"first\" in the table (MySQL).\n"
"`->from($integer)`  |  Set the starting value of an auto-incrementing field (MySQL / PostgreSQL).\n"
"`->invisible()`  |  Make the column \"invisible\" to `SELECT *` queries (MySQL).\n"
"`->nullable($value = true)`  |  Allow NULL values to be inserted into the column.\n"
"`->storedAs($expression)`  |  Create a stored generated column (MySQL / PostgreSQL).\n"
"`->unsigned()`  |  Set INTEGER columns as UNSIGNED (MySQL).\n"
"`->useCurrent()`  |  Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value.\n"
"`->useCurrentOnUpdate()`  |  Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated.\n"
"`->virtualAs($expression)`  |  Create a virtual generated column (MySQL).\n"
"`->generatedAs($expression)`  |  Create an identity column with specified sequence options (PostgreSQL).\n"
"`->always()`  |  Defines the precedence of sequence values over input for an identity column (PostgreSQL).\n"
"`->isGeometry()`  |  Set spatial column type to `geometry` - the default type is `geography` (PostgreSQL).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 892
# File: docs/master/migrations.md, line: 892
#, no-wrap
msgid "<a name=\"default-expressions\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 892
# File: docs/master/migrations.md, line: 892
#, no-wrap
msgid "Default Expressions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 895
# File: docs/master/migrations.md, line: 895
msgid "The `default` modifier accepts a value or an `Illuminate\\Database\\Query\\Expression` instance. Using an `Expression` instance will prevent Laravel from wrapping the value in quotes and allow you to use database specific functions. One situation where this is particularly useful is when you need to assign default values to JSON columns:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 902
# File: docs/master/migrations.md, line: 902
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Schema;\n"
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Database\\Query\\Expression;\n"
"    use Illuminate\\Database\\Migrations\\Migration;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 919
#, no-wrap
msgid ""
"    class CreateFlightsTable extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 921
# File: docs/master/migrations.md, line: 921
#, no-wrap
msgid "> {note} Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 923
# File: docs/master/migrations.md, line: 923
#, no-wrap
msgid "<a name=\"column-order\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 923
# File: docs/master/migrations.md, line: 923
#, no-wrap
msgid "Column Order"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 926
# File: docs/master/migrations.md, line: 926
msgid "When using the MySQL database, the `after` method may be used to add columns after an existing column in the schema:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 932
# File: docs/master/migrations.md, line: 932
#, no-wrap
msgid ""
"    $table->after('password', function ($table) {\n"
"        $table->string('address_line1');\n"
"        $table->string('address_line2');\n"
"        $table->string('city');\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 934
# File: docs/master/migrations.md, line: 934
#, no-wrap
msgid "<a name=\"modifying-columns\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 934
# File: docs/master/migrations.md, line: 934
#, no-wrap
msgid "Modifying Columns"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 937
# File: docs/master/migrations.md, line: 937
#, no-wrap
msgid "<a name=\"prerequisites\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 937
# File: docs/master/migrations.md, line: 937
#, no-wrap
msgid "Prerequisites"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 940
# File: docs/master/migrations.md, line: 940
msgid "Before modifying a column, you must install the `doctrine/dbal` package using the Composer package manager. The Doctrine DBAL library is used to determine the current state of the column and to create the SQL queries needed to make the requested changes to your column:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 942
# File: docs/master/migrations.md, line: 942
#, no-wrap
msgid "    composer require doctrine/dbal\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 944
# File: docs/master/migrations.md, line: 944
msgid "If you plan to modify columns created using the `timestamp` method, you must also add the following configuration to your application's `config/database.php` configuration file:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/migrations.md, line: 945
# File: docs/master/migrations.md, line: 945
#, no-wrap
msgid "php"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 945
# File: docs/master/migrations.md, line: 945
#, no-wrap
msgid ""
"use Illuminate\\Database\\DBAL\\TimestampType;\n"
"\n"
"'dbal' => [\n"
"    'types' => [\n"
"        'timestamp' => TimestampType::class,\n"
"    ],\n"
"],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 956
# File: docs/master/migrations.md, line: 956
#, no-wrap
msgid "> {note} If your application is using Microsoft SQL Server, please ensure that you install `doctrine/dbal:^3.0`.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 958
# File: docs/master/migrations.md, line: 958
#, no-wrap
msgid "<a name=\"updating-column-attributes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 958
# File: docs/master/migrations.md, line: 958
#, no-wrap
msgid "Updating Column Attributes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 961
# File: docs/master/migrations.md, line: 961
msgid "The `change` method allows you to modify the type and attributes of existing columns. For example, you may wish to increase the size of a `string` column. To see the `change` method in action, let's increase the size of the `name` column from 25 to 50. To accomplish this, we simply define the new state of the column and then call the `change` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 965
# File: docs/master/migrations.md, line: 965
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('name', 50)->change();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 967
# File: docs/master/migrations.md, line: 967
msgid "We could also modify a column to be nullable:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 971
# File: docs/master/migrations.md, line: 971
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('name', 50)->nullable()->change();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 973
# File: docs/master/migrations.md, line: 973
#, no-wrap
msgid "> {note} The following column types can be modified: `bigInteger`, `binary`, `boolean`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`.  To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 975
# File: docs/master/migrations.md, line: 975
#, no-wrap
msgid "<a name=\"renaming-columns\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 975
# File: docs/master/migrations.md, line: 975
#, no-wrap
msgid "Renaming Columns"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 978
# File: docs/master/migrations.md, line: 978
msgid "To rename a column, you may use the `renameColumn` method provided by the schema builder blueprint. Before renaming a column, ensure that you have installed the `doctrine/dbal` library via the Composer package manager:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 982
# File: docs/master/migrations.md, line: 982
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->renameColumn('from', 'to');\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 984
# File: docs/master/migrations.md, line: 984
#, no-wrap
msgid "> {note} Renaming an `enum` column is not currently supported.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 986
# File: docs/master/migrations.md, line: 986
#, no-wrap
msgid "<a name=\"dropping-columns\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 986
# File: docs/master/migrations.md, line: 986
#, no-wrap
msgid "Dropping Columns"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 989
# File: docs/master/migrations.md, line: 989
msgid "To drop a column, you may use the `dropColumn` method on the schema builder blueprint. If your application is utilizing an SQLite database, you must install the `doctrine/dbal` package via the Composer package manager before the `dropColumn` method may be used:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 993
# File: docs/master/migrations.md, line: 993
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->dropColumn('votes');\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 995
# File: docs/master/migrations.md, line: 995
msgid "You may drop multiple columns from a table by passing an array of column names to the `dropColumn` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 999
# File: docs/master/migrations.md, line: 999
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->dropColumn(['votes', 'avatar', 'location']);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1001
# File: docs/master/migrations.md, line: 1001
#, no-wrap
msgid "> {note} Dropping or modifying multiple columns within a single migration while using an SQLite database is not supported.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1003
# File: docs/master/migrations.md, line: 1003
#, no-wrap
msgid "<a name=\"available-command-aliases\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 1003
# File: docs/master/migrations.md, line: 1003
#, no-wrap
msgid "Available Command Aliases"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1006
# File: docs/master/migrations.md, line: 1006
msgid "Laravel provides several convenient methods related to dropping common types of columns. Each of these methods is described in the table below:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1015
# File: docs/master/migrations.md, line: 1015
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->dropMorphs('morphable');`  |  Drop the `morphable_id` and `morphable_type` columns.\n"
"`$table->dropRememberToken();`  |  Drop the `remember_token` column.\n"
"`$table->dropSoftDeletes();`  |  Drop the `deleted_at` column.\n"
"`$table->dropSoftDeletesTz();`  |  Alias of `dropSoftDeletes()` method.\n"
"`$table->dropTimestamps();`  |  Drop the `created_at` and `updated_at` columns.\n"
"`$table->dropTimestampsTz();` |  Alias of `dropTimestamps()` method.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1017
# File: docs/master/migrations.md, line: 1017
#, no-wrap
msgid "<a name=\"indexes\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 1017
# File: docs/master/migrations.md, line: 1017
#, no-wrap
msgid "Indexes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1020
# File: docs/master/migrations.md, line: 1020
#, no-wrap
msgid "<a name=\"creating-indexes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 1020
# File: docs/master/migrations.md, line: 1020
#, no-wrap
msgid "Creating Indexes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1023
# File: docs/master/migrations.md, line: 1023
msgid "The Laravel schema builder supports several types of indexes. The following example creates a new `email` column and specifies that its values should be unique. To create the index, we can chain the `unique` method onto the column definition:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1030
# File: docs/master/migrations.md, line: 1030
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('email')->unique();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1032
# File: docs/master/migrations.md, line: 1032
msgid "Alternatively, you may create the index after defining the column. To do so, you should call the `unique` method on the schema builder blueprint. This method accepts the name of the column that should receive a unique index:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1034
# File: docs/master/migrations.md, line: 1034
#, no-wrap
msgid "    $table->unique('email');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1036
# File: docs/master/migrations.md, line: 1036
msgid "You may even pass an array of columns to an index method to create a compound (or composite) index:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1038
# File: docs/master/migrations.md, line: 1038
#, no-wrap
msgid "    $table->index(['account_id', 'created_at']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1040
# File: docs/master/migrations.md, line: 1040
msgid "When creating an index, Laravel will automatically generate an index name based on the table, column names, and the index type, but you may pass a second argument to the method to specify the index name yourself:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1042
# File: docs/master/migrations.md, line: 1042
#, no-wrap
msgid "    $table->unique('email', 'unique_email');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1044
# File: docs/master/migrations.md, line: 1044
#, no-wrap
msgid "<a name=\"available-index-types\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 1044
# File: docs/master/migrations.md, line: 1044
#, no-wrap
msgid "Available Index Types"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1047
# File: docs/master/migrations.md, line: 1047
msgid "Laravel's schema builder blueprint class provides methods for creating each type of index supported by Laravel. Each index method accepts an optional second argument to specify the name of the index. If omitted, the name will be derived from the names of the table and column(s) used for the index, as well as the index type. Each of the available index methods is described in the table below:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1057
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->primary('id');`  |  Adds a primary key.\n"
"`$table->primary(['id', 'parent_id']);`  |  Adds composite keys.\n"
"`$table->unique('email');`  |  Adds a unique index.\n"
"`$table->index('state');`  |  Adds an index.\n"
"`$table->fulltext('body');`  |  Adds a fulltext index (MySQL/PostgreSQL).\n"
"`$table->fulltext('body')->language('english');`  |  Adds a fulltext index of the specified language (PostgreSQL).\n"
"`$table->spatialIndex('location');`  |  Adds a spatial index (except SQLite).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1059
# File: docs/master/migrations.md, line: 1059
#, no-wrap
msgid "<a name=\"index-lengths-mysql-mariadb\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 1059
# File: docs/master/migrations.md, line: 1059
#, no-wrap
msgid "Index Lengths & MySQL / MariaDB"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1062
# File: docs/master/migrations.md, line: 1062
msgid "By default, Laravel uses the `utf8mb4` character set. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure the default string length by calling the `Schema::defaultStringLength` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1074
# File: docs/master/migrations.md, line: 1074
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Schema::defaultStringLength(191);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1076
# File: docs/master/migrations.md, line: 1076
msgid "Alternatively, you may enable the `innodb_large_prefix` option for your database. Refer to your database's documentation for instructions on how to properly enable this option."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1078
# File: docs/master/migrations.md, line: 1078
#, no-wrap
msgid "<a name=\"renaming-indexes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 1078
# File: docs/master/migrations.md, line: 1078
#, no-wrap
msgid "Renaming Indexes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1081
# File: docs/master/migrations.md, line: 1081
msgid "To rename an index, you may use the `renameIndex` method provided by the schema builder blueprint. This method accepts the current index name as its first argument and the desired name as its second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1083
# File: docs/master/migrations.md, line: 1083
#, no-wrap
msgid "    $table->renameIndex('from', 'to')\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1085
# File: docs/master/migrations.md, line: 1085
#, no-wrap
msgid "<a name=\"dropping-indexes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 1085
# File: docs/master/migrations.md, line: 1085
#, no-wrap
msgid "Dropping Indexes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1088
# File: docs/master/migrations.md, line: 1088
msgid "To drop an index, you must specify the index's name. By default, Laravel automatically assigns an index name based on the table name, the name of the indexed column, and the index type. Here are some examples:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1095
# File: docs/master/migrations.md, line: 1095
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->dropPrimary('users_id_primary');`  |  Drop a primary key from the \"users\" table.\n"
"`$table->dropUnique('users_email_unique');`  |  Drop a unique index from the \"users\" table.\n"
"`$table->dropIndex('geo_state_index');`  |  Drop a basic index from the \"geo\" table.\n"
"`$table->dropSpatialIndex('geo_location_spatialindex');`  |  Drop a spatial index from the \"geo\" table  (except SQLite).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1097
# File: docs/master/migrations.md, line: 1097
msgid "If you pass an array of columns into a method that drops indexes, the conventional index name will be generated based on the table name, columns, and index type:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1101
# File: docs/master/migrations.md, line: 1101
#, no-wrap
msgid ""
"    Schema::table('geo', function (Blueprint $table) {\n"
"        $table->dropIndex(['state']); // Drops index 'geo_state_index'\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1103
# File: docs/master/migrations.md, line: 1103
#, no-wrap
msgid "<a name=\"foreign-key-constraints\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/migrations.md, line: 1103
# File: docs/master/migrations.md, line: 1103
#, no-wrap
msgid "Foreign Key Constraints"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1106
# File: docs/master/migrations.md, line: 1106
msgid "Laravel also provides support for creating foreign key constraints, which are used to force referential integrity at the database level. For example, let's define a `user_id` column on the `posts` table that references the `id` column on a `users` table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1112
# File: docs/master/migrations.md, line: 1112
#, no-wrap
msgid ""
"    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->unsignedBigInteger('user_id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1115
# File: docs/master/migrations.md, line: 1115
#, no-wrap
msgid ""
"        $table->foreign('user_id')->references('id')->on('users');\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1117
# File: docs/master/migrations.md, line: 1117
msgid "Since this syntax is rather verbose, Laravel provides additional, terser methods that use conventions to provide a better developer experience. When using the `foreignId` method to create your column, the example above can be rewritten like so:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1121
# File: docs/master/migrations.md, line: 1121
#, no-wrap
msgid ""
"    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->foreignId('user_id')->constrained();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1123
# File: docs/master/migrations.md, line: 1123
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column, while the `constrained` method will use conventions to determine the table and column name being referenced. If your table name does not match Laravel's conventions, you may specify the table name by passing it as an argument to the `constrained` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1127
# File: docs/master/migrations.md, line: 1127
#, no-wrap
msgid ""
"    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->foreignId('user_id')->constrained('users');\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1129
# File: docs/master/migrations.md, line: 1129
msgid "You may also specify the desired action for the \"on delete\" and \"on update\" properties of the constraint:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1134
# File: docs/master/migrations.md, line: 1134
#, no-wrap
msgid ""
"    $table->foreignId('user_id')\n"
"          ->constrained()\n"
"          ->onUpdate('cascade')\n"
"          ->onDelete('cascade');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1136
# File: docs/master/migrations.md, line: 1136
msgid "An alternative, expressive syntax is also provided for these actions:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1144
# File: docs/master/migrations.md, line: 1144
#, no-wrap
msgid ""
"Method  |  Description\n"
"-------  |  -----------\n"
"`$table->cascadeOnUpdate();` | Updates should cascade.\n"
"`$table->restrictOnUpdate();`| Updates should be restricted.\n"
"`$table->cascadeOnDelete();` | Deletes should cascade.\n"
"`$table->restrictOnDelete();`| Deletes should be restricted.\n"
"`$table->nullOnDelete();`    | Deletes should set the foreign key value to null.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1146
# File: docs/master/migrations.md, line: 1146
msgid "Any additional [column modifiers](#column-modifiers) must be called before the `constrained` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1150
# File: docs/master/migrations.md, line: 1150
#, no-wrap
msgid ""
"    $table->foreignId('user_id')\n"
"          ->nullable()\n"
"          ->constrained();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1152
# File: docs/master/migrations.md, line: 1152
#, no-wrap
msgid "<a name=\"dropping-foreign-keys\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 1152
# File: docs/master/migrations.md, line: 1152
#, no-wrap
msgid "Dropping Foreign Keys"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1155
# File: docs/master/migrations.md, line: 1155
msgid "To drop a foreign key, you may use the `dropForeign` method, passing the name of the foreign key constraint to be deleted as an argument. Foreign key constraints use the same naming convention as indexes. In other words, the foreign key constraint name is based on the name of the table and the columns in the constraint, followed by a \"\\_foreign\" suffix:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1157
# File: docs/master/migrations.md, line: 1157
#, no-wrap
msgid "    $table->dropForeign('posts_user_id_foreign');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1159
# File: docs/master/migrations.md, line: 1159
msgid "Alternatively, you may pass an array containing the column name that holds the foreign key to the `dropForeign` method. The array will be converted to a foreign key constraint name using Laravel's constraint naming conventions:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1161
# File: docs/master/migrations.md, line: 1161
#, no-wrap
msgid "    $table->dropForeign(['user_id']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1163
# File: docs/master/migrations.md, line: 1163
#, no-wrap
msgid "<a name=\"toggling-foreign-key-constraints\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/migrations.md, line: 1163
# File: docs/master/migrations.md, line: 1163
#, no-wrap
msgid "Toggling Foreign Key Constraints"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1166
# File: docs/master/migrations.md, line: 1166
msgid "You may enable or disable foreign key constraints within your migrations by using the following methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1168
# File: docs/master/migrations.md, line: 1168
#, no-wrap
msgid "    Schema::enableForeignKeyConstraints();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1170
# File: docs/master/migrations.md, line: 1170
#, no-wrap
msgid "    Schema::disableForeignKeyConstraints();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1172
# File: docs/master/migrations.md, line: 1172
#, no-wrap
msgid "> {note} SQLite disables foreign key constraints by default. When using SQLite, make sure to [enable foreign key support](/docs/{{version}}/database#configuration) in your database configuration before attempting to create them in your migrations. In addition, SQLite only supports foreign keys upon creation of the table and [not when tables are altered](https://www.sqlite.org/omitted.html).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1174
# File: docs/master/migrations.md, line: 1174
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/migrations.md, line: 1174
# File: docs/master/migrations.md, line: 1174
#, no-wrap
msgid "Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1177
# File: docs/master/migrations.md, line: 1177
msgid "For convenience, each migration operation will dispatch an [event](/docs/{{version}}/events). All of the following events extend the base `Illuminate\\Database\\Events\\MigrationEvent` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/migrations.md, line: 1184
# File: docs/master/migrations.md, line: 1184
#, no-wrap
msgid ""
" Class | Description\n"
"-------|-------\n"
"| `Illuminate\\Database\\Events\\MigrationsStarted` | A batch of migrations is about to be executed. |\n"
"| `Illuminate\\Database\\Events\\MigrationsEnded` | A batch of migrations has finished executing. |\n"
"| `Illuminate\\Database\\Events\\MigrationStarted` | A single migration is about to be executed. |\n"
"| `Illuminate\\Database\\Events\\MigrationEnded` | A single migration has finished executing. |\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/migrations.md, line: 91
#, no-wrap
msgid ""
"    return new class extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->string('name');\n"
"                $table->string('airline');\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/migrations.md, line: 102
#, no-wrap
msgid ""
"        /**\n"
"         * Reverse the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function down()\n"
"        {\n"
"            Schema::drop('flights');\n"
"        }\n"
"    };\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/migrations.md, line: 919
#, no-wrap
msgid ""
"    return new class extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
"    };\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/migrations.md, line: 1057
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->primary('id');`  |  Adds a primary key.\n"
"`$table->primary(['id', 'parent_id']);`  |  Adds composite keys.\n"
"`$table->unique('email');`  |  Adds a unique index.\n"
"`$table->index('state');`  |  Adds an index.\n"
"`$table->fullText('body');`  |  Adds a full text index (MySQL/PostgreSQL).\n"
"`$table->fullText('body')->language('english');`  |  Adds a full text index of the specified language (PostgreSQL).\n"
"`$table->spatialIndex('location');`  |  Adds a spatial index (except SQLite).\n"
msgstr ""
