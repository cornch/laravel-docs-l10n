msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/billing.pot\n"
"X-Crowdin-File-ID: 15\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-02-11 10:27\n"

#: docs/10.x/billing.md:block 1 (header)
msgid "Laravel Cashier (Stripe)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Upgrading Cashier](#upgrading-cashier)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Database Migrations](#database-migrations)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Billable Model](#billable-model)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[API Keys](#api-keys)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Currency Configuration](#currency-configuration)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Tax Configuration](#tax-configuration)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Logging](#logging)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Using Custom Models](#using-custom-models)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Customers](#customers)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Retrieving Customers](#retrieving-customers)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Creating Customers](#creating-customers)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Updating Customers](#updating-customers)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Balances](#balances)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Tax IDs](#tax-ids)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Syncing Customer Data With Stripe](#syncing-customer-data-with-stripe)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Billing Portal](#billing-portal)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Payment Methods](#payment-methods)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Storing Payment Methods](#storing-payment-methods)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Retrieving Payment Methods](#retrieving-payment-methods)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Determining If A User Has A Payment Method](#check-for-a-payment-method)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Updating The Default Payment Method](#updating-the-default-payment-method)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Adding Payment Methods](#adding-payment-methods)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Deleting Payment Methods](#deleting-payment-methods)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscriptions](#subscriptions)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Creating Subscriptions](#creating-subscriptions)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Checking Subscription Status](#checking-subscription-status)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Changing Prices](#changing-prices)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscription Quantity](#subscription-quantity)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscriptions With Multiple Products](#subscriptions-with-multiple-products)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Multiple Subscriptions](#multiple-subscriptions)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Metered Billing](#metered-billing)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscription Taxes](#subscription-taxes)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscription Anchor Date](#subscription-anchor-date)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Canceling Subscriptions](#cancelling-subscriptions)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Resuming Subscriptions](#resuming-subscriptions)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscription Trials](#subscription-trials)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[With Payment Method Up Front](#with-payment-method-up-front)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Without Payment Method Up Front](#without-payment-method-up-front)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Extending Trials](#extending-trials)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Handling Stripe Webhooks](#handling-stripe-webhooks)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Defining Webhook Event Handlers](#defining-webhook-event-handlers)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Verifying Webhook Signatures](#verifying-webhook-signatures)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Single Charges](#single-charges)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Simple Charge](#simple-charge)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Charge With Invoice](#charge-with-invoice)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Creating Payment Intents](#creating-payment-intents)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Refunding Charges](#refunding-charges)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Checkout](#checkout)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Product Checkouts](#product-checkouts)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Single Charge Checkouts](#single-charge-checkouts)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Subscription Checkouts](#subscription-checkouts)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Collecting Tax IDs](#collecting-tax-ids)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Guest Checkouts](#guest-checkouts)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Invoices](#invoices)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Retrieving Invoices](#retrieving-invoices)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Upcoming Invoices](#upcoming-invoices)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Previewing Subscription Invoices](#previewing-subscription-invoices)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Generating Invoice PDFs](#generating-invoice-pdfs)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Handling Failed Payments](#handling-failed-payments)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Strong Customer Authentication (SCA)](#strong-customer-authentication)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Payments Requiring Additional Confirmation](#payments-requiring-additional-confirmation)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Off-session Payment Notifications](#off-session-payment-notifications)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Stripe SDK](#stripe-sdk)"
msgstr ""

#: docs/10.x/billing.md:block 2 (unordered list)
msgid "[Testing](#testing)"
msgstr ""

#: docs/10.x/billing.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/billing.md:block 5 (paragraph)
msgid "[Laravel Cashier Stripe](https://github.com/laravel/cashier-stripe) provides an expressive, fluent interface to [Stripe's](https://stripe.com) subscription billing services. It handles almost all of the boilerplate subscription billing code you are dreading writing. In addition to basic subscription management, Cashier can handle coupons, swapping subscription, subscription \"quantities\", cancellation grace periods, and even generate invoice PDFs."
msgstr ""

#: docs/10.x/billing.md:block 7 (header)
msgid "Upgrading Cashier"
msgstr ""

#: docs/10.x/billing.md:block 8 (paragraph)
msgid "When upgrading to a new version of Cashier, it's important that you carefully review [the upgrade guide](https://github.com/laravel/cashier-stripe/blob/master/UPGRADE.md)."
msgstr ""

#: docs/10.x/billing.md:block 9 (quote)
msgid "**Warning** To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 14 utilizes Stripe API version `2022-11-15`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements."
msgstr ""

#: docs/10.x/billing.md:block 11 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/billing.md:block 12 (paragraph)
msgid "First, install the Cashier package for Stripe using the Composer package manager:"
msgstr ""

#: docs/10.x/billing.md:block 13 (code)
msgid "composer require laravel/cashier\n"
msgstr ""

#: docs/10.x/billing.md:block 14 (quote)
msgid "**Warning** To ensure Cashier properly handles all Stripe events, remember to [set up Cashier's webhook handling](#handling-stripe-webhooks)."
msgstr ""

#: docs/10.x/billing.md:block 16 (header)
msgid "Database Migrations"
msgstr ""

#: docs/10.x/billing.md:block 17 (paragraph)
msgid "Cashier's service provider registers its own database migration directory, so remember to migrate your database after installing the package. The Cashier migrations will add several columns to your `users` table as well as create a new `subscriptions` table to hold all of your customer's subscriptions:"
msgstr ""

#: docs/10.x/billing.md:block 18 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/billing.md:block 19 (paragraph)
msgid "If you need to overwrite the migrations that ship with Cashier, you can publish them using the `vendor:publish` Artisan command:"
msgstr ""

#: docs/10.x/billing.md:block 20 (code)
msgid "php artisan vendor:publish --tag=\"cashier-migrations\"\n"
msgstr ""

#: docs/10.x/billing.md:block 21 (paragraph)
msgid "If you would like to prevent Cashier's migrations from running entirely, you may use the `ignoreMigrations` method provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#: docs/10.x/billing.md:block 22 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Cashier::ignoreMigrations();\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 23 (quote)
msgid "**Warning** Stripe recommends that any column used for storing Stripe identifiers should be case-sensitive. Therefore, you should ensure the column collation for the `stripe_id` column is set to `utf8_bin` when using MySQL. More information regarding this can be found in the [Stripe documentation](https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible)."
msgstr ""

#: docs/10.x/billing.md:block 25 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/billing.md:block 27 (header)
msgid "Billable Model"
msgstr ""

#: docs/10.x/billing.md:block 28 (paragraph)
msgid "Before using Cashier, add the `Billable` trait to your billable model definition. Typically, this will be the `App\\Models\\User` model. This trait provides various methods to allow you to perform common billing tasks, such as creating subscriptions, applying coupons, and updating payment method information:"
msgstr ""

#: docs/10.x/billing.md:block 29 (code)
msgid "use Laravel\\Cashier\\Billable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Billable;\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 30 (paragraph)
msgid "Cashier assumes your billable model will be the `App\\Models\\User` class that ships with Laravel. If you wish to change this you may specify a different model via the `useCustomerModel` method. This method should typically be called in the `boot` method of your `AppServiceProvider` class:"
msgstr ""

#: docs/10.x/billing.md:block 31 (code)
msgid "use App\\Models\\Cashier\\User;\n"
"use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::useCustomerModel(User::class);\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 32 (quote)
msgid "**Warning** If you're using a model other than Laravel's supplied `App\\Models\\User` model, you'll need to publish and alter the [Cashier migrations](#installation) provided to match your alternative model's table name."
msgstr ""

#: docs/10.x/billing.md:block 34 (header)
msgid "API Keys"
msgstr ""

#: docs/10.x/billing.md:block 35 (paragraph)
msgid "Next, you should configure your Stripe API keys in your application's `.env` file. You can retrieve your Stripe API keys from the Stripe control panel:"
msgstr ""

#: docs/10.x/billing.md:block 36 (code)
msgid "STRIPE_KEY=your-stripe-key\n"
"STRIPE_SECRET=your-stripe-secret\n"
"STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret\n"
msgstr ""

#: docs/10.x/billing.md:block 37 (quote)
msgid "**Warning** You should ensure that the `STRIPE_WEBHOOK_SECRET` environment variable is defined in your application's `.env` file, as this variable is used to ensure that incoming webhooks are actually from Stripe."
msgstr ""

#: docs/10.x/billing.md:block 39 (header)
msgid "Currency Configuration"
msgstr ""

#: docs/10.x/billing.md:block 40 (paragraph)
msgid "The default Cashier currency is United States Dollars (USD). You can change the default currency by setting the `CASHIER_CURRENCY` environment variable within your application's `.env` file:"
msgstr ""

#: docs/10.x/billing.md:block 41 (code)
msgid "CASHIER_CURRENCY=eur\n"
msgstr ""

#: docs/10.x/billing.md:block 42 (paragraph)
msgid "In addition to configuring Cashier's currency, you may also specify a locale to be used when formatting money values for display on invoices. Internally, Cashier utilizes [PHP's `NumberFormatter` class](https://www.php.net/manual/en/class.numberformatter.php) to set the currency locale:"
msgstr ""

#: docs/10.x/billing.md:block 43 (code)
msgid "CASHIER_CURRENCY_LOCALE=nl_BE\n"
msgstr ""

#: docs/10.x/billing.md:block 44 (quote)
msgid "**Warning** In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server."
msgstr ""

#: docs/10.x/billing.md:block 46 (header)
msgid "Tax Configuration"
msgstr ""

#: docs/10.x/billing.md:block 47 (paragraph)
msgid "Thanks to [Stripe Tax](https://stripe.com/tax), it's possible to automatically calculate taxes for all invoices generated by Stripe. You can enable automatic tax calculation by invoking the `calculateTaxes` method in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/10.x/billing.md:block 48 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::calculateTaxes();\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 49 (paragraph)
msgid "Once tax calculation has been enabled, any new subscriptions and any one-off invoices that are generated will receive automatic tax calculation."
msgstr ""

#: docs/10.x/billing.md:block 50 (paragraph)
msgid "For this feature to work properly, your customer's billing details, such as the customer's name, address, and tax ID, need to be synced to Stripe. You may use the [customer data synchronization](#syncing-customer-data-with-stripe) and [Tax ID](#tax-ids) methods offered by Cashier to accomplish this."
msgstr ""

#: docs/10.x/billing.md:block 51 (quote)
msgid "**Warning** No tax is calculated for [single charges](#single-charges) or [single charge checkouts](#single-charge-checkouts)."
msgstr ""

#: docs/10.x/billing.md:block 53 (header)
msgid "Logging"
msgstr ""

#: docs/10.x/billing.md:block 54 (paragraph)
msgid "Cashier allows you to specify the log channel to be used when logging fatal Stripe errors. You may specify the log channel by defining the `CASHIER_LOGGER` environment variable within your application's `.env` file:"
msgstr ""

#: docs/10.x/billing.md:block 55 (code)
msgid "CASHIER_LOGGER=stack\n"
msgstr ""

#: docs/10.x/billing.md:block 56 (paragraph)
msgid "Exceptions that are generated by API calls to Stripe will be logged through your application's default log channel."
msgstr ""

#: docs/10.x/billing.md:block 58 (header)
msgid "Using Custom Models"
msgstr ""

#: docs/10.x/billing.md:block 59 (paragraph)
msgid "You are free to extend the models used internally by Cashier by defining your own model and extending the corresponding Cashier model:"
msgstr ""

#: docs/10.x/billing.md:block 60 (code)
msgid "use Laravel\\Cashier\\Subscription as CashierSubscription;\n\n"
"class Subscription extends CashierSubscription\n"
"{\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 61 (paragraph)
msgid "After defining your model, you may instruct Cashier to use your custom model via the `Laravel\\Cashier\\Cashier` class. Typically, you should inform Cashier about your custom models in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/10.x/billing.md:block 62 (code)
msgid "use App\\Models\\Cashier\\Subscription;\n"
"use App\\Models\\Cashier\\SubscriptionItem;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::useSubscriptionModel(Subscription::class);\n"
"    Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 64 (header)
msgid "Customers"
msgstr ""

#: docs/10.x/billing.md:block 66 (header)
msgid "Retrieving Customers"
msgstr ""

#: docs/10.x/billing.md:block 67 (paragraph)
msgid "You can retrieve a customer by their Stripe ID using the `Cashier::findBillable` method. This method will return an instance of the billable model:"
msgstr ""

#: docs/10.x/billing.md:block 68 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"$user = Cashier::findBillable($stripeId);\n"
msgstr ""

#: docs/10.x/billing.md:block 70 (header)
msgid "Creating Customers"
msgstr ""

#: docs/10.x/billing.md:block 71 (paragraph)
msgid "Occasionally, you may wish to create a Stripe customer without beginning a subscription. You may accomplish this using the `createAsStripeCustomer` method:"
msgstr ""

#: docs/10.x/billing.md:block 72 (code)
msgid "$stripeCustomer = $user->createAsStripeCustomer();\n"
msgstr ""

#: docs/10.x/billing.md:block 73 (paragraph)
msgid "Once the customer has been created in Stripe, you may begin a subscription at a later date. You may provide an optional `$options` array to pass in any additional [customer creation parameters that are supported by the Stripe API](https://stripe.com/docs/api/customers/create):"
msgstr ""

#: docs/10.x/billing.md:block 74 (code)
msgid "$stripeCustomer = $user->createAsStripeCustomer($options);\n"
msgstr ""

#: docs/10.x/billing.md:block 75 (paragraph)
msgid "You may use the `asStripeCustomer` method if you want to return the Stripe customer object for a billable model:"
msgstr ""

#: docs/10.x/billing.md:block 76 (code)
msgid "$stripeCustomer = $user->asStripeCustomer();\n"
msgstr ""

#: docs/10.x/billing.md:block 77 (paragraph)
msgid "The `createOrGetStripeCustomer` method may be used if you would like to retrieve the Stripe customer object for a given billable model but are not sure whether the billable model is already a customer within Stripe. This method will create a new customer in Stripe if one does not already exist:"
msgstr ""

#: docs/10.x/billing.md:block 78 (code)
msgid "$stripeCustomer = $user->createOrGetStripeCustomer();\n"
msgstr ""

#: docs/10.x/billing.md:block 80 (header)
msgid "Updating Customers"
msgstr ""

#: docs/10.x/billing.md:block 81 (paragraph)
msgid "Occasionally, you may wish to update the Stripe customer directly with additional information. You may accomplish this using the `updateStripeCustomer` method. This method accepts an array of [customer update options supported by the Stripe API](https://stripe.com/docs/api/customers/update):"
msgstr ""

#: docs/10.x/billing.md:block 82 (code)
msgid "$stripeCustomer = $user->updateStripeCustomer($options);\n"
msgstr ""

#: docs/10.x/billing.md:block 84 (header)
msgid "Balances"
msgstr ""

#: docs/10.x/billing.md:block 85 (paragraph)
msgid "Stripe allows you to credit or debit a customer's \"balance\". Later, this balance will be credited or debited on new invoices. To check the customer's total balance you may use the `balance` method that is available on your billable model. The `balance` method will return a formatted string representation of the balance in the customer's currency:"
msgstr ""

#: docs/10.x/billing.md:block 86 (code)
msgid "$balance = $user->balance();\n"
msgstr ""

#: docs/10.x/billing.md:block 87 (paragraph)
msgid "To credit a customer's balance, you may provide a value to the `creditBalance` method. If you wish, you may also provide a description:"
msgstr ""

#: docs/10.x/billing.md:block 88 (code)
msgid "$user->creditBalance(500, 'Premium customer top-up.');\n"
msgstr ""

#: docs/10.x/billing.md:block 89 (paragraph)
msgid "Providing a value to the `debitBalance` method will debit the customer's balance:"
msgstr ""

#: docs/10.x/billing.md:block 90 (code)
msgid "$user->debitBalance(300, 'Bad usage penalty.');\n"
msgstr ""

#: docs/10.x/billing.md:block 91 (paragraph)
msgid "The `applyBalance` method will create new customer balance transactions for the customer. You may retrieve these transaction records using the `balanceTransactions` method, which may be useful in order to provide a log of credits and debits for the customer to review:"
msgstr ""

#: docs/10.x/billing.md:block 92 (code)
msgid "// Retrieve all transactions...\n"
"$transactions = $user->balanceTransactions();\n\n"
"foreach ($transactions as $transaction) {\n"
"    // Transaction amount...\n"
"    $amount = $transaction->amount(); // $2.31\n\n"
"    // Retrieve the related invoice when available...\n"
"    $invoice = $transaction->invoice();\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 94 (header)
msgid "Tax IDs"
msgstr ""

#: docs/10.x/billing.md:block 95 (paragraph)
msgid "Cashier offers an easy way to manage a customer's tax IDs. For example, the `taxIds` method may be used to retrieve all of the [tax IDs](https://stripe.com/docs/api/customer_tax_ids/object) that are assigned to a customer as a collection:"
msgstr ""

#: docs/10.x/billing.md:block 96 (code)
msgid "$taxIds = $user->taxIds();\n"
msgstr ""

#: docs/10.x/billing.md:block 97 (paragraph)
msgid "You can also retrieve a specific tax ID for a customer by its identifier:"
msgstr ""

#: docs/10.x/billing.md:block 98 (code)
msgid "$taxId = $user->findTaxId('txi_belgium');\n"
msgstr ""

#: docs/10.x/billing.md:block 99 (paragraph)
msgid "You may create a new Tax ID by providing a valid [type](https://stripe.com/docs/api/customer_tax_ids/object#tax_id_object-type) and value to the `createTaxId` method:"
msgstr ""

#: docs/10.x/billing.md:block 100 (code)
msgid "$taxId = $user->createTaxId('eu_vat', 'BE0123456789');\n"
msgstr ""

#: docs/10.x/billing.md:block 101 (paragraph)
msgid "The `createTaxId` method will immediately add the VAT ID to the customer's account. [Verification of VAT IDs is also done by Stripe](https://stripe.com/docs/invoicing/customer/tax-ids#validation); however, this is an asynchronous process. You can be notified of verification updates by subscribing to the `customer.tax_id.updated` webhook event and inspecting [the VAT IDs `verification` parameter](https://stripe.com/docs/api/customer_tax_ids/object#tax_id_object-verification). For more information on handling webhooks, please consult the [documentation on defining webhook handlers](#handling-stripe-webhooks)."
msgstr ""

#: docs/10.x/billing.md:block 102 (paragraph)
msgid "You may delete a tax ID using the `deleteTaxId` method:"
msgstr ""

#: docs/10.x/billing.md:block 103 (code)
msgid "$user->deleteTaxId('txi_belgium');\n"
msgstr ""

#: docs/10.x/billing.md:block 105 (header)
msgid "Syncing Customer Data With Stripe"
msgstr ""

#: docs/10.x/billing.md:block 106 (paragraph)
msgid "Typically, when your application's users update their name, email address, or other information that is also stored by Stripe, you should inform Stripe of the updates. By doing so, Stripe's copy of the information will be in sync with your application's."
msgstr ""

#: docs/10.x/billing.md:block 107 (paragraph)
msgid "To automate this, you may define an event listener on your billable model that reacts to the model's `updated` event. Then, within your event listener, you may invoke the `syncStripeCustomerDetails` method on the model:"
msgstr ""

#: docs/10.x/billing.md:block 108 (code)
msgid "use App\\Models\\User;\n"
"use function Illuminate\\Events\\queueable;\n\n"
"/**\n"
" * The \"booted\" method of the model.\n"
" */\n"
"protected static function booted(): void\n"
"{\n"
"    static::updated(queueable(function (User $customer) {\n"
"        if ($customer->hasStripeId()) {\n"
"            $customer->syncStripeCustomerDetails();\n"
"        }\n"
"    }));\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 109 (paragraph)
msgid "Now, every time your customer model is updated, its information will be synced with Stripe. For convenience, Cashier will automatically sync your customer's information with Stripe on the initial creation of the customer."
msgstr ""

#: docs/10.x/billing.md:block 110 (paragraph)
msgid "You may customize the columns used for syncing customer information to Stripe by overriding a variety of methods provided by Cashier. For example, you may override the `stripeName` method to customize the attribute that should be considered the customer's \"name\" when Cashier syncs customer information to Stripe:"
msgstr ""

#: docs/10.x/billing.md:block 111 (code)
msgid "/**\n"
" * Get the customer name that should be synced to Stripe.\n"
" */\n"
"public function stripeName(): string|null\n"
"{\n"
"    return $this->company_name;\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 112 (paragraph)
msgid "Similarly, you may override the `stripeEmail`, `stripePhone`, `stripeAddress`, and `stripePreferredLocales` methods. These methods will sync information to their corresponding customer parameters when [updating the Stripe customer object](https://stripe.com/docs/api/customers/update). If you wish to take total control over the customer information sync process, you may override the `syncStripeCustomerDetails` method."
msgstr ""

#: docs/10.x/billing.md:block 114 (header)
msgid "Billing Portal"
msgstr ""

#: docs/10.x/billing.md:block 115 (paragraph)
msgid "Stripe offers [an easy way to set up a billing portal](https://stripe.com/docs/billing/subscriptions/customer-portal) so that your customer can manage their subscription, payment methods, and view their billing history. You can redirect your users to the billing portal by invoking the `redirectToBillingPortal` method on the billable model from a controller or route:"
msgstr ""

#: docs/10.x/billing.md:block 116 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/billing-portal', function (Request $request) {\n"
"    return $request->user()->redirectToBillingPortal();\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 117 (paragraph)
msgid "By default, when the user is finished managing their subscription, they will be able to return to the `home` route of your application via a link within the Stripe billing portal. You may provide a custom URL that the user should return to by passing the URL as an argument to the `redirectToBillingPortal` method:"
msgstr ""

#: docs/10.x/billing.md:block 118 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/billing-portal', function (Request $request) {\n"
"    return $request->user()->redirectToBillingPortal(route('billing'));\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 119 (paragraph)
msgid "If you would like to generate the URL to the billing portal without generating an HTTP redirect response, you may invoke the `billingPortalUrl` method:"
msgstr ""

#: docs/10.x/billing.md:block 120 (code)
msgid "$url = $request->user()->billingPortalUrl(route('billing'));\n"
msgstr ""

#: docs/10.x/billing.md:block 122 (header)
msgid "Payment Methods"
msgstr ""

#: docs/10.x/billing.md:block 124 (header)
msgid "Storing Payment Methods"
msgstr ""

#: docs/10.x/billing.md:block 125 (paragraph)
msgid "In order to create subscriptions or perform \"one-off\" charges with Stripe, you will need to store a payment method and retrieve its identifier from Stripe. The approach used to accomplish this differs based on whether you plan to use the payment method for subscriptions or single charges, so we will examine both below."
msgstr ""

#: docs/10.x/billing.md:block 127 (header)
msgid "Payment Methods For Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 128 (paragraph)
msgid "When storing a customer's credit card information for future use by a subscription, the Stripe \"Setup Intents\" API must be used to securely gather the customer's payment method details. A \"Setup Intent\" indicates to Stripe the intention to charge a customer's payment method. Cashier's `Billable` trait includes the `createSetupIntent` method to easily create a new Setup Intent. You should invoke this method from the route or controller that will render the form which gathers your customer's payment method details:"
msgstr ""

#: docs/10.x/billing.md:block 129 (code)
msgid "return view('update-payment-method', [\n"
"    'intent' => $user->createSetupIntent()\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 130 (paragraph)
msgid "After you have created the Setup Intent and passed it to the view, you should attach its secret to the element that will gather the payment method. For example, consider this \"update payment method\" form:"
msgstr ""

#: docs/10.x/billing.md:block 131 (code)
msgid "<input id=\"card-holder-name\" type=\"text\">\n\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n\n"
"<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">\n"
"    Update Payment Method\n"
"</button>\n"
msgstr ""

#: docs/10.x/billing.md:block 132 (paragraph)
msgid "Next, the Stripe.js library may be used to attach a [Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely gather the customer's payment details:"
msgstr ""

#: docs/10.x/billing.md:block 133 (code)
msgid "<script src=\"https://js.stripe.com/v3/\"></script>\n\n"
"<script>\n"
"    const stripe = Stripe('stripe-public-key');\n\n"
"    const elements = stripe.elements();\n"
"    const cardElement = elements.create('card');\n\n"
"    cardElement.mount('#card-element');\n"
"</script>\n"
msgstr ""

#: docs/10.x/billing.md:block 134 (paragraph)
msgid "Next, the card can be verified and a secure \"payment method identifier\" can be retrieved from Stripe using [Stripe's `confirmCardSetup` method](https://stripe.com/docs/js/setup_intents/confirm_card_setup):"
msgstr ""

#: docs/10.x/billing.md:block 135 (code)
msgid "const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"const clientSecret = cardButton.dataset.secret;\n\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { setupIntent, error } = await stripe.confirmCardSetup(\n"
"        clientSecret, {\n"
"            payment_method: {\n"
"                card: cardElement,\n"
"                billing_details: { name: cardHolderName.value }\n"
"            }\n"
"        }\n"
"    );\n\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 136 (paragraph)
msgid "After the card has been verified by Stripe, you may pass the resulting `setupIntent.payment_method` identifier to your Laravel application, where it can be attached to the customer. The payment method can either be [added as a new payment method](#adding-payment-methods) or [used to update the default payment method](#updating-the-default-payment-method). You can also immediately use the payment method identifier to [create a new subscription](#creating-subscriptions)."
msgstr ""

#: docs/10.x/billing.md:block 137 (quote)
msgid "**Note** If you would like more information about Setup Intents and gathering customer payment details please [review this overview provided by Stripe](https://stripe.com/docs/payments/save-and-reuse#php)."
msgstr ""

#: docs/10.x/billing.md:block 139 (header)
msgid "Payment Methods For Single Charges"
msgstr ""

#: docs/10.x/billing.md:block 140 (paragraph)
msgid "Of course, when making a single charge against a customer's payment method, we will only need to use a payment method identifier once. Due to Stripe limitations, you may not use the stored default payment method of a customer for single charges. You must allow the customer to enter their payment method details using the Stripe.js library. For example, consider the following form:"
msgstr ""

#: docs/10.x/billing.md:block 141 (code)
msgid "<input id=\"card-holder-name\" type=\"text\">\n\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n\n"
"<button id=\"card-button\">\n"
"    Process Payment\n"
"</button>\n"
msgstr ""

#: docs/10.x/billing.md:block 142 (paragraph)
msgid "After defining such a form, the Stripe.js library may be used to attach a [Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely gather the customer's payment details:"
msgstr ""

#: docs/10.x/billing.md:block 144 (paragraph)
msgid "Next, the card can be verified and a secure \"payment method identifier\" can be retrieved from Stripe using [Stripe's `createPaymentMethod` method](https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method):"
msgstr ""

#: docs/10.x/billing.md:block 145 (code)
msgid "const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { paymentMethod, error } = await stripe.createPaymentMethod(\n"
"        'card', cardElement, {\n"
"            billing_details: { name: cardHolderName.value }\n"
"        }\n"
"    );\n\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 146 (paragraph)
msgid "If the card is verified successfully, you may pass the `paymentMethod.id` to your Laravel application and process a [single charge](#simple-charge)."
msgstr ""

#: docs/10.x/billing.md:block 148 (header)
msgid "Retrieving Payment Methods"
msgstr ""

#: docs/10.x/billing.md:block 149 (paragraph)
msgid "The `paymentMethods` method on the billable model instance returns a collection of `Laravel\\Cashier\\PaymentMethod` instances:"
msgstr ""

#: docs/10.x/billing.md:block 150 (code)
msgid "$paymentMethods = $user->paymentMethods();\n"
msgstr ""

#: docs/10.x/billing.md:block 151 (paragraph)
msgid "By default, this method will return payment methods of the `card` type. To retrieve payment methods of a different type, you may pass the `type` as an argument to the method:"
msgstr ""

#: docs/10.x/billing.md:block 152 (code)
msgid "$paymentMethods = $user->paymentMethods('sepa_debit');\n"
msgstr ""

#: docs/10.x/billing.md:block 153 (paragraph)
msgid "To retrieve the customer's default payment method, the `defaultPaymentMethod` method may be used:"
msgstr ""

#: docs/10.x/billing.md:block 154 (code)
msgid "$paymentMethod = $user->defaultPaymentMethod();\n"
msgstr ""

#: docs/10.x/billing.md:block 155 (paragraph)
msgid "You can retrieve a specific payment method that is attached to the billable model using the `findPaymentMethod` method:"
msgstr ""

#: docs/10.x/billing.md:block 156 (code)
msgid "$paymentMethod = $user->findPaymentMethod($paymentMethodId);\n"
msgstr ""

#: docs/10.x/billing.md:block 158 (header)
msgid "Determining If A User Has A Payment Method"
msgstr ""

#: docs/10.x/billing.md:block 159 (paragraph)
msgid "To determine if a billable model has a default payment method attached to their account, invoke the `hasDefaultPaymentMethod` method:"
msgstr ""

#: docs/10.x/billing.md:block 160 (code)
msgid "if ($user->hasDefaultPaymentMethod()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 161 (paragraph)
msgid "You may use the `hasPaymentMethod` method to determine if a billable model has at least one payment method attached to their account:"
msgstr ""

#: docs/10.x/billing.md:block 162 (code)
msgid "if ($user->hasPaymentMethod()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 163 (paragraph)
msgid "This method will determine if the billable model has payment methods of the `card` type. To determine if a payment method of another type exists for the model, you may pass the `type` as an argument to the method:"
msgstr ""

#: docs/10.x/billing.md:block 164 (code)
msgid "if ($user->hasPaymentMethod('sepa_debit')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 166 (header)
msgid "Updating The Default Payment Method"
msgstr ""

#: docs/10.x/billing.md:block 167 (paragraph)
msgid "The `updateDefaultPaymentMethod` method may be used to update a customer's default payment method information. This method accepts a Stripe payment method identifier and will assign the new payment method as the default billing payment method:"
msgstr ""

#: docs/10.x/billing.md:block 168 (code)
msgid "$user->updateDefaultPaymentMethod($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 169 (paragraph)
msgid "To sync your default payment method information with the customer's default payment method information in Stripe, you may use the `updateDefaultPaymentMethodFromStripe` method:"
msgstr ""

#: docs/10.x/billing.md:block 170 (code)
msgid "$user->updateDefaultPaymentMethodFromStripe();\n"
msgstr ""

#: docs/10.x/billing.md:block 171 (quote)
msgid "**Warning** The default payment method on a customer can only be used for invoicing and creating new subscriptions. Due to limitations imposed by Stripe, it may not be used for single charges."
msgstr ""

#: docs/10.x/billing.md:block 173 (header)
msgid "Adding Payment Methods"
msgstr ""

#: docs/10.x/billing.md:block 174 (paragraph)
msgid "To add a new payment method, you may call the `addPaymentMethod` method on the billable model, passing the payment method identifier:"
msgstr ""

#: docs/10.x/billing.md:block 175 (code)
msgid "$user->addPaymentMethod($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 176 (quote)
msgid "**Note** To learn how to retrieve payment method identifiers please review the [payment method storage documentation](#storing-payment-methods)."
msgstr ""

#: docs/10.x/billing.md:block 178 (header)
msgid "Deleting Payment Methods"
msgstr ""

#: docs/10.x/billing.md:block 179 (paragraph)
msgid "To delete a payment method, you may call the `delete` method on the `Laravel\\Cashier\\PaymentMethod` instance you wish to delete:"
msgstr ""

#: docs/10.x/billing.md:block 180 (code)
msgid "$paymentMethod->delete();\n"
msgstr ""

#: docs/10.x/billing.md:block 181 (paragraph)
msgid "The `deletePaymentMethod` method will delete a specific payment method from the billable model:"
msgstr ""

#: docs/10.x/billing.md:block 182 (code)
msgid "$user->deletePaymentMethod('pm_visa');\n"
msgstr ""

#: docs/10.x/billing.md:block 183 (paragraph)
msgid "The `deletePaymentMethods` method will delete all of the payment method information for the billable model:"
msgstr ""

#: docs/10.x/billing.md:block 184 (code)
msgid "$user->deletePaymentMethods();\n"
msgstr ""

#: docs/10.x/billing.md:block 185 (paragraph)
msgid "By default, this method will delete payment methods of the `card` type. To delete payment methods of a different type you can pass the `type` as an argument to the method:"
msgstr ""

#: docs/10.x/billing.md:block 186 (code)
msgid "$user->deletePaymentMethods('sepa_debit');\n"
msgstr ""

#: docs/10.x/billing.md:block 187 (quote)
msgid "**Warning** If a user has an active subscription, your application should not allow them to delete their default payment method."
msgstr ""

#: docs/10.x/billing.md:block 189 (header)
msgid "Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 190 (paragraph)
msgid "Subscriptions provide a way to set up recurring payments for your customers. Stripe subscriptions managed by Cashier provide support for multiple subscription prices, subscription quantities, trials, and more."
msgstr ""

#: docs/10.x/billing.md:block 192 (header)
msgid "Creating Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 193 (paragraph)
msgid "To create a subscription, first retrieve an instance of your billable model, which typically will be an instance of `App\\Models\\User`. Once you have retrieved the model instance, you may use the `newSubscription` method to create the model's subscription:"
msgstr ""

#: docs/10.x/billing.md:block 194 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription(\n"
"        'default', 'price_monthly'\n"
"    )->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 195 (paragraph)
msgid "The first argument passed to the `newSubscription` method should be the internal name of the subscription. If your application only offers a single subscription, you might call this `default` or `primary`. This subscription name is only for internal application usage and is not meant to be shown to users. In addition, it should not contain spaces and it should never be changed after creating the subscription. The second argument is the specific price the user is subscribing to. This value should correspond to the price's identifier in Stripe."
msgstr ""

#: docs/10.x/billing.md:block 196 (paragraph)
msgid "The `create` method, which accepts [a Stripe payment method identifier](#storing-payment-methods) or Stripe `PaymentMethod` object, will begin the subscription as well as update your database with the billable model's Stripe customer ID and other relevant billing information."
msgstr ""

#: docs/10.x/billing.md:block 197 (quote)
msgid "**Warning** Passing a payment method identifier directly to the `create` subscription method will also automatically add it to the user's stored payment methods."
msgstr ""

#: docs/10.x/billing.md:block 199 (header)
msgid "Collecting Recurring Payments Via Invoice Emails"
msgstr ""

#: docs/10.x/billing.md:block 200 (paragraph)
msgid "Instead of collecting a customer's recurring payments automatically, you may instruct Stripe to email an invoice to the customer each time their recurring payment is due. Then, the customer may manually pay the invoice once they receive it. The customer does not need to provide a payment method up front when collecting recurring payments via invoices:"
msgstr ""

#: docs/10.x/billing.md:block 201 (code)
msgid "$user->newSubscription('default', 'price_monthly')->createAndSendInvoice();\n"
msgstr ""

#: docs/10.x/billing.md:block 202 (paragraph)
msgid "The amount of time a customer has to pay their invoice before their subscription is cancelled is determined by the `days_until_due` option. By default, this is 30 days; however, you may provide a specific value for this option if you wish:"
msgstr ""

#: docs/10.x/billing.md:block 203 (code)
msgid "$user->newSubscription('default', 'price_monthly')->createAndSendInvoice([], [\n"
"    'days_until_due' => 30\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 205 (header)
msgid "Quantities"
msgstr ""

#: docs/10.x/billing.md:block 206 (paragraph)
msgid "If you would like to set a specific [quantity](https://stripe.com/docs/billing/subscriptions/quantities) for the price when creating the subscription, you should invoke the `quantity` method on the subscription builder before creating the subscription:"
msgstr ""

#: docs/10.x/billing.md:block 207 (code)
msgid "$user->newSubscription('default', 'price_monthly')\n"
"     ->quantity(5)\n"
"     ->create($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 209 (header)
msgid "Additional Details"
msgstr ""

#: docs/10.x/billing.md:block 210 (paragraph)
msgid "If you would like to specify additional [customer](https://stripe.com/docs/api/customers/create) or [subscription](https://stripe.com/docs/api/subscriptions/create) options supported by Stripe, you may do so by passing them as the second and third arguments to the `create` method:"
msgstr ""

#: docs/10.x/billing.md:block 211 (code)
msgid "$user->newSubscription('default', 'price_monthly')->create($paymentMethod, [\n"
"    'email' => $email,\n"
"], [\n"
"    'metadata' => ['note' => 'Some extra information.'],\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 213 (header)
msgid "Coupons"
msgstr ""

#: docs/10.x/billing.md:block 214 (paragraph)
msgid "If you would like to apply a coupon when creating the subscription, you may use the `withCoupon` method:"
msgstr ""

#: docs/10.x/billing.md:block 215 (code)
msgid "$user->newSubscription('default', 'price_monthly')\n"
"     ->withCoupon('code')\n"
"     ->create($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 216 (paragraph)
msgid "Or, if you would like to apply a [Stripe promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes), you may use the `withPromotionCode` method:"
msgstr ""

#: docs/10.x/billing.md:block 217 (code)
msgid "$user->newSubscription('default', 'price_monthly')\n"
"     ->withPromotionCode('promo_code_id')\n"
"     ->create($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 218 (paragraph)
msgid "The given promotion code ID should be the Stripe API ID assigned to the promotion code and not the customer facing promotion code. If you need to find a promotion code ID based on a given customer facing promotion code, you may use the `findPromotionCode` method:"
msgstr ""

#: docs/10.x/billing.md:block 219 (code)
msgid "// Find a promotion code ID by its customer facing code...\n"
"$promotionCode = $user->findPromotionCode('SUMMERSALE');\n\n"
"// Find an active promotion code ID by its customer facing code...\n"
"$promotionCode = $user->findActivePromotionCode('SUMMERSALE');\n"
msgstr ""

#: docs/10.x/billing.md:block 220 (paragraph)
msgid "In the example above, the returned `$promotionCode` object is an instance of `Laravel\\Cashier\\PromotionCode`. This class decorates an underlying `Stripe\\PromotionCode` object. You can retrieve the coupon related to the promotion code by invoking the `coupon` method:"
msgstr ""

#: docs/10.x/billing.md:block 221 (code)
msgid "$coupon = $user->findPromotionCode('SUMMERSALE')->coupon();\n"
msgstr ""

#: docs/10.x/billing.md:block 222 (paragraph)
msgid "The coupon instance allows you to determine the discount amount and whether the coupon represents a fixed discount or percentage based discount:"
msgstr ""

#: docs/10.x/billing.md:block 223 (code)
msgid "if ($coupon->isPercentage()) {\n"
"    return $coupon->percentOff().'%'; // 21.5%\n"
"} else {\n"
"    return $coupon->amountOff(); // $5.99\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 224 (paragraph)
msgid "You can also retrieve the discounts that are currently applied to a customer or subscription:"
msgstr ""

#: docs/10.x/billing.md:block 225 (code)
msgid "$discount = $billable->discount();\n\n"
"$discount = $subscription->discount();\n"
msgstr ""

#: docs/10.x/billing.md:block 226 (paragraph)
msgid "The returned `Laravel\\Cashier\\Discount` instances decorate an underlying `Stripe\\Discount` object instance. You may retrieve the coupon related to this discount by invoking the `coupon` method:"
msgstr ""

#: docs/10.x/billing.md:block 227 (code)
msgid "$coupon = $subscription->discount()->coupon();\n"
msgstr ""

#: docs/10.x/billing.md:block 228 (paragraph)
msgid "If you would like to apply a new coupon or promotion code to a customer or subscription, you may do so via the `applyCoupon` or `applyPromotionCode` methods:"
msgstr ""

#: docs/10.x/billing.md:block 229 (code)
msgid "$billable->applyCoupon('coupon_id');\n"
"$billable->applyPromotionCode('promotion_code_id');\n\n"
"$subscription->applyCoupon('coupon_id');\n"
"$subscription->applyPromotionCode('promotion_code_id');\n"
msgstr ""

#: docs/10.x/billing.md:block 230 (paragraph)
msgid "Remember, you should use the Stripe API ID assigned to the promotion code and not the customer facing promotion code. Only one coupon or promotion code can be applied to a customer or subscription at a given time."
msgstr ""

#: docs/10.x/billing.md:block 231 (paragraph)
msgid "For more info on this subject, please consult the Stripe documentation regarding [coupons](https://stripe.com/docs/billing/subscriptions/coupons) and [promotion codes](https://stripe.com/docs/billing/subscriptions/coupons/codes)."
msgstr ""

#: docs/10.x/billing.md:block 233 (header)
msgid "Adding Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 234 (paragraph)
msgid "If you would like to add a subscription to a customer who already has a default payment method you may invoke the `add` method on the subscription builder:"
msgstr ""

#: docs/10.x/billing.md:block 235 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->newSubscription('default', 'price_monthly')->add();\n"
msgstr ""

#: docs/10.x/billing.md:block 237 (header)
msgid "Creating Subscriptions From The Stripe Dashboard"
msgstr ""

#: docs/10.x/billing.md:block 238 (paragraph)
msgid "You may also create subscriptions from the Stripe dashboard itself. When doing so, Cashier will sync newly added subscriptions and assign them a name of `default`. To customize the subscription name that is assigned to dashboard created subscriptions, [extend the `WebhookController`](#defining-webhook-event-handlers) and overwrite the `newSubscriptionName` method."
msgstr ""

#: docs/10.x/billing.md:block 239 (paragraph)
msgid "In addition, you may only create one type of subscription via the Stripe dashboard. If your application offers multiple subscriptions that use different names, only one type of subscription may be added through the Stripe dashboard."
msgstr ""

#: docs/10.x/billing.md:block 240 (paragraph)
msgid "Finally, you should always make sure to only add one active subscription per type of subscription offered by your application. If a customer has two `default` subscriptions, only the most recently added subscription will be used by Cashier even though both would be synced with your application's database."
msgstr ""

#: docs/10.x/billing.md:block 242 (header)
msgid "Checking Subscription Status"
msgstr ""

#: docs/10.x/billing.md:block 243 (paragraph)
msgid "Once a customer is subscribed to your application, you may easily check their subscription status using a variety of convenient methods. First, the `subscribed` method returns `true` if the customer has an active subscription, even if the subscription is currently within its trial period. The `subscribed` method accepts the name of the subscription as its first argument:"
msgstr ""

#: docs/10.x/billing.md:block 244 (code)
msgid "if ($user->subscribed('default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 245 (paragraph)
msgid "The `subscribed` method also makes a great candidate for a [route middleware](/docs/{{version}}/middleware), allowing you to filter access to routes and controllers based on the user's subscription status:"
msgstr ""

#: docs/10.x/billing.md:block 246 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('billing');\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 247 (paragraph)
msgid "If you would like to determine if a user is still within their trial period, you may use the `onTrial` method. This method can be useful for determining if you should display a warning to the user that they are still on their trial period:"
msgstr ""

#: docs/10.x/billing.md:block 248 (code)
msgid "if ($user->subscription('default')->onTrial()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 249 (paragraph)
msgid "The `subscribedToProduct` method may be used to determine if the user is subscribed to a given product based on a given Stripe product's identifier. In Stripe, products are collections of prices. In this example, we will determine if the user's `default` subscription is actively subscribed to the application's \"premium\" product. The given Stripe product identifier should correspond to one of your product's identifiers in the Stripe dashboard:"
msgstr ""

#: docs/10.x/billing.md:block 250 (code)
msgid "if ($user->subscribedToProduct('prod_premium', 'default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 251 (paragraph)
msgid "By passing an array to the `subscribedToProduct` method, you may determine if the user's `default` subscription is actively subscribed to the application's \"basic\" or \"premium\" product:"
msgstr ""

#: docs/10.x/billing.md:block 252 (code)
msgid "if ($user->subscribedToProduct(['prod_basic', 'prod_premium'], 'default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 253 (paragraph)
msgid "The `subscribedToPrice` method may be used to determine if a customer's subscription corresponds to a given price ID:"
msgstr ""

#: docs/10.x/billing.md:block 254 (code)
msgid "if ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 255 (paragraph)
msgid "The `recurring` method may be used to determine if the user is currently subscribed and is no longer within their trial period:"
msgstr ""

#: docs/10.x/billing.md:block 256 (code)
msgid "if ($user->subscription('default')->recurring()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 257 (quote)
msgid "**Warning** If a user has two subscriptions with the same name, the most recent subscription will always be returned by the `subscription` method. For example, a user might have two subscription records named `default`; however, one of the subscriptions may be an old, expired subscription, while the other is the current, active subscription. The most recent subscription will always be returned while older subscriptions are kept in the database for historical review."
msgstr ""

#: docs/10.x/billing.md:block 259 (header)
msgid "Canceled Subscription Status"
msgstr ""

#: docs/10.x/billing.md:block 260 (paragraph)
msgid "To determine if the user was once an active subscriber but has canceled their subscription, you may use the `canceled` method:"
msgstr ""

#: docs/10.x/billing.md:block 261 (code)
msgid "if ($user->subscription('default')->canceled()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 262 (paragraph)
msgid "You may also determine if a user has canceled their subscription but are still on their \"grace period\" until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their \"grace period\" until March 10th. Note that the `subscribed` method still returns `true` during this time:"
msgstr ""

#: docs/10.x/billing.md:block 263 (code)
msgid "if ($user->subscription('default')->onGracePeriod()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 264 (paragraph)
msgid "To determine if the user has canceled their subscription and is no longer within their \"grace period\", you may use the `ended` method:"
msgstr ""

#: docs/10.x/billing.md:block 265 (code)
msgid "if ($user->subscription('default')->ended()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 267 (header)
msgid "Incomplete and Past Due Status"
msgstr ""

#: docs/10.x/billing.md:block 268 (paragraph)
msgid "If a subscription requires a secondary payment action after creation the subscription will be marked as `incomplete`. Subscription statuses are stored in the `stripe_status` column of Cashier's `subscriptions` database table."
msgstr ""

#: docs/10.x/billing.md:block 269 (paragraph)
msgid "Similarly, if a secondary payment action is required when swapping prices the subscription will be marked as `past_due`. When your subscription is in either of these states it will not be active until the customer has confirmed their payment. Determining if a subscription has an incomplete payment may be accomplished using the `hasIncompletePayment` method on the billable model or a subscription instance:"
msgstr ""

#: docs/10.x/billing.md:block 270 (code)
msgid "if ($user->hasIncompletePayment('default')) {\n"
"    // ...\n"
"}\n\n"
"if ($user->subscription('default')->hasIncompletePayment()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 271 (paragraph)
msgid "When a subscription has an incomplete payment, you should direct the user to Cashier's payment confirmation page, passing the `latestPayment` identifier. You may use the `latestPayment` method available on subscription instance to retrieve this identifier:"
msgstr ""

#: docs/10.x/billing.md:block 272 (code)
msgid "<a href=\"{{ route('cashier.payment', $subscription->latestPayment()->id) }}\">\n"
"    Please confirm your payment.\n"
"</a>\n"
msgstr ""

#: docs/10.x/billing.md:block 273 (paragraph)
msgid "If you would like the subscription to still be considered active when it's in a `past_due` or `incomplete` state, you may use the `keepPastDueSubscriptionsActive` and `keepIncompleteSubscriptionsActive` methods provided by Cashier. Typically, these methods should be called in the `register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#: docs/10.x/billing.md:block 274 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"    Cashier::keepIncompleteSubscriptionsActive();\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 275 (quote)
msgid "**Warning** When a subscription is in an `incomplete` state it cannot be changed until the payment is confirmed. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in an `incomplete` state."
msgstr ""

#: docs/10.x/billing.md:block 277 (header)
msgid "Subscription Scopes"
msgstr ""

#: docs/10.x/billing.md:block 278 (paragraph)
msgid "Most subscription states are also available as query scopes so that you may easily query your database for subscriptions that are in a given state:"
msgstr ""

#: docs/10.x/billing.md:block 279 (code)
msgid "// Get all active subscriptions...\n"
"$subscriptions = Subscription::query()->active()->get();\n\n"
"// Get all of the canceled subscriptions for a user...\n"
"$subscriptions = $user->subscriptions()->canceled()->get();\n"
msgstr ""

#: docs/10.x/billing.md:block 280 (paragraph)
msgid "A complete list of available scopes is available below:"
msgstr ""

#: docs/10.x/billing.md:block 281 (code)
msgid "Subscription::query()->active();\n"
"Subscription::query()->canceled();\n"
"Subscription::query()->ended();\n"
"Subscription::query()->incomplete();\n"
"Subscription::query()->notCanceled();\n"
"Subscription::query()->notOnGracePeriod();\n"
"Subscription::query()->notOnTrial();\n"
"Subscription::query()->onGracePeriod();\n"
"Subscription::query()->onTrial();\n"
"Subscription::query()->pastDue();\n"
"Subscription::query()->recurring();\n"
msgstr ""

#: docs/10.x/billing.md:block 283 (header)
msgid "Changing Prices"
msgstr ""

#: docs/10.x/billing.md:block 284 (paragraph)
msgid "After a customer is subscribed to your application, they may occasionally want to change to a new subscription price. To swap a customer to a new price, pass the Stripe price's identifier to the `swap` method. When swapping prices, it is assumed that the user would like to re-activate their subscription if it was previously canceled. The given price identifier should correspond to a Stripe price identifier available in the Stripe dashboard:"
msgstr ""

#: docs/10.x/billing.md:block 285 (code)
msgid "use App\\Models\\User;\n\n"
"$user = App\\Models\\User::find(1);\n\n"
"$user->subscription('default')->swap('price_yearly');\n"
msgstr ""

#: docs/10.x/billing.md:block 286 (paragraph)
msgid "If the customer is on trial, the trial period will be maintained. Additionally, if a \"quantity\" exists for the subscription, that quantity will also be maintained."
msgstr ""

#: docs/10.x/billing.md:block 287 (paragraph)
msgid "If you would like to swap prices and cancel any trial period the customer is currently on, you may invoke the `skipTrial` method:"
msgstr ""

#: docs/10.x/billing.md:block 288 (code)
msgid "$user->subscription('default')\n"
"        ->skipTrial()\n"
"        ->swap('price_yearly');\n"
msgstr ""

#: docs/10.x/billing.md:block 289 (paragraph)
msgid "If you would like to swap prices and immediately invoice the customer instead of waiting for their next billing cycle, you may use the `swapAndInvoice` method:"
msgstr ""

#: docs/10.x/billing.md:block 290 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->swapAndInvoice('price_yearly');\n"
msgstr ""

#: docs/10.x/billing.md:block 292 (header)
msgid "Prorations"
msgstr ""

#: docs/10.x/billing.md:block 293 (paragraph)
msgid "By default, Stripe prorates charges when swapping between prices. The `noProrate` method may be used to update the subscription's price without prorating the charges:"
msgstr ""

#: docs/10.x/billing.md:block 294 (code)
msgid "$user->subscription('default')->noProrate()->swap('price_yearly');\n"
msgstr ""

#: docs/10.x/billing.md:block 295 (paragraph)
msgid "For more information on subscription proration, consult the [Stripe documentation](https://stripe.com/docs/billing/subscriptions/prorations)."
msgstr ""

#: docs/10.x/billing.md:block 296 (quote)
msgid "**Warning** Executing the `noProrate` method before the `swapAndInvoice` method will have no effect on proration. An invoice will always be issued."
msgstr ""

#: docs/10.x/billing.md:block 298 (header)
msgid "Subscription Quantity"
msgstr ""

#: docs/10.x/billing.md:block 299 (paragraph)
msgid "Sometimes subscriptions are affected by \"quantity\". For example, a project management application might charge $10 per month per project. You may use the `incrementQuantity` and `decrementQuantity` methods to easily increment or decrement your subscription quantity:"
msgstr ""

#: docs/10.x/billing.md:block 300 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->subscription('default')->incrementQuantity();\n\n"
"// Add five to the subscription's current quantity...\n"
"$user->subscription('default')->incrementQuantity(5);\n\n"
"$user->subscription('default')->decrementQuantity();\n\n"
"// Subtract five from the subscription's current quantity...\n"
"$user->subscription('default')->decrementQuantity(5);\n"
msgstr ""

#: docs/10.x/billing.md:block 301 (paragraph)
msgid "Alternatively, you may set a specific quantity using the `updateQuantity` method:"
msgstr ""

#: docs/10.x/billing.md:block 302 (code)
msgid "$user->subscription('default')->updateQuantity(10);\n"
msgstr ""

#: docs/10.x/billing.md:block 303 (paragraph)
msgid "The `noProrate` method may be used to update the subscription's quantity without prorating the charges:"
msgstr ""

#: docs/10.x/billing.md:block 304 (code)
msgid "$user->subscription('default')->noProrate()->updateQuantity(10);\n"
msgstr ""

#: docs/10.x/billing.md:block 305 (paragraph)
msgid "For more information on subscription quantities, consult the [Stripe documentation](https://stripe.com/docs/subscriptions/quantities)."
msgstr ""

#: docs/10.x/billing.md:block 307 (header)
msgid "Quantities For Subscriptions With Multiple Products"
msgstr ""

#: docs/10.x/billing.md:block 308 (paragraph)
msgid "If your subscription is a [subscription with multiple products](#subscriptions-with-multiple-products), you should pass the ID of the price whose quantity you wish to increment or decrement as the second argument to the increment / decrement methods:"
msgstr ""

#: docs/10.x/billing.md:block 309 (code)
msgid "$user->subscription('default')->incrementQuantity(1, 'price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 311 (header)
msgid "Subscriptions With Multiple Products"
msgstr ""

#: docs/10.x/billing.md:block 312 (paragraph)
msgid "[Subscription with multiple products](https://stripe.com/docs/billing/subscriptions/multiple-products) allow you to assign multiple billing products to a single subscription. For example, imagine you are building a customer service \"helpdesk\" application that has a base subscription price of $10 per month but offers a live chat add-on product for an additional $15 per month. Information for subscriptions with multiple products is stored in Cashier's `subscription_items` database table."
msgstr ""

#: docs/10.x/billing.md:block 313 (paragraph)
msgid "You may specify multiple products for a given subscription by passing an array of prices as the second argument to the `newSubscription` method:"
msgstr ""

#: docs/10.x/billing.md:block 314 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('default', [\n"
"        'price_monthly',\n"
"        'price_chat',\n"
"    ])->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 315 (paragraph)
msgid "In the example above, the customer will have two prices attached to their `default` subscription. Both prices will be charged on their respective billing intervals. If necessary, you may use the `quantity` method to indicate a specific quantity for each price:"
msgstr ""

#: docs/10.x/billing.md:block 316 (code)
msgid "$user = User::find(1);\n\n"
"$user->newSubscription('default', ['price_monthly', 'price_chat'])\n"
"    ->quantity(5, 'price_chat')\n"
"    ->create($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 317 (paragraph)
msgid "If you would like to add another price to an existing subscription, you may invoke the subscription's `addPrice` method:"
msgstr ""

#: docs/10.x/billing.md:block 318 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->addPrice('price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 319 (paragraph)
msgid "The example above will add the new price and the customer will be billed for it on their next billing cycle. If you would like to bill the customer immediately you may use the `addPriceAndInvoice` method:"
msgstr ""

#: docs/10.x/billing.md:block 320 (code)
msgid "$user->subscription('default')->addPriceAndInvoice('price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 321 (paragraph)
msgid "If you would like to add a price with a specific quantity, you can pass the quantity as the second argument of the `addPrice` or `addPriceAndInvoice` methods:"
msgstr ""

#: docs/10.x/billing.md:block 322 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->addPrice('price_chat', 5);\n"
msgstr ""

#: docs/10.x/billing.md:block 323 (paragraph)
msgid "You may remove prices from subscriptions using the `removePrice` method:"
msgstr ""

#: docs/10.x/billing.md:block 324 (code)
msgid "$user->subscription('default')->removePrice('price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 325 (quote)
msgid "**Warning** You may not remove the last price on a subscription. Instead, you should simply cancel the subscription."
msgstr ""

#: docs/10.x/billing.md:block 327 (header)
msgid "Swapping Prices"
msgstr ""

#: docs/10.x/billing.md:block 328 (paragraph)
msgid "You may also change the prices attached to a subscription with multiple products. For example, imagine a customer has a `price_basic` subscription with a `price_chat` add-on product and you want to upgrade the customer from the `price_basic` to the `price_pro` price:"
msgstr ""

#: docs/10.x/billing.md:block 329 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->subscription('default')->swap(['price_pro', 'price_chat']);\n"
msgstr ""

#: docs/10.x/billing.md:block 330 (paragraph)
msgid "When executing the example above, the underlying subscription item with the `price_basic` is deleted and the one with the `price_chat` is preserved. Additionally, a new subscription item for the `price_pro` is created."
msgstr ""

#: docs/10.x/billing.md:block 331 (paragraph)
msgid "You can also specify subscription item options by passing an array of key / value pairs to the `swap` method. For example, you may need to specify the subscription price quantities:"
msgstr ""

#: docs/10.x/billing.md:block 332 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->swap([\n"
"    'price_pro' => ['quantity' => 5],\n"
"    'price_chat'\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 333 (paragraph)
msgid "If you want to swap a single price on a subscription, you may do so using the `swap` method on the subscription item itself. This approach is particularly useful if you would like to preserve all of the existing metadata on the subscription's other prices:"
msgstr ""

#: docs/10.x/billing.md:block 334 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')\n"
"        ->findItemOrFail('price_basic')\n"
"        ->swap('price_pro');\n"
msgstr ""

#: docs/10.x/billing.md:block 336 (header)
msgid "Proration"
msgstr ""

#: docs/10.x/billing.md:block 337 (paragraph)
msgid "By default, Stripe will prorate charges when adding or removing prices from a subscription with multiple products. If you would like to make a price adjustment without proration, you should chain the `noProrate` method onto your price operation:"
msgstr ""

#: docs/10.x/billing.md:block 338 (code)
msgid "$user->subscription('default')->noProrate()->removePrice('price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 341 (paragraph)
msgid "If you would like to update quantities on individual subscription prices, you may do so using the [existing quantity methods](#subscription-quantity) by passing the name of the price as an additional argument to the method:"
msgstr ""

#: docs/10.x/billing.md:block 342 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->incrementQuantity(5, 'price_chat');\n\n"
"$user->subscription('default')->decrementQuantity(3, 'price_chat');\n\n"
"$user->subscription('default')->updateQuantity(10, 'price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 343 (quote)
msgid "**Warning** When a subscription has multiple prices the `stripe_price` and `quantity` attributes on the `Subscription` model will be `null`. To access the individual price attributes, you should use the `items` relationship available on the `Subscription` model."
msgstr ""

#: docs/10.x/billing.md:block 345 (header)
msgid "Subscription Items"
msgstr ""

#: docs/10.x/billing.md:block 346 (paragraph)
msgid "When a subscription has multiple prices, it will have multiple subscription \"items\" stored in your database's `subscription_items` table. You may access these via the `items` relationship on the subscription:"
msgstr ""

#: docs/10.x/billing.md:block 347 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$subscriptionItem = $user->subscription('default')->items->first();\n\n"
"// Retrieve the Stripe price and quantity for a specific item...\n"
"$stripePrice = $subscriptionItem->stripe_price;\n"
"$quantity = $subscriptionItem->quantity;\n"
msgstr ""

#: docs/10.x/billing.md:block 348 (paragraph)
msgid "You can also retrieve a specific price using the `findItemOrFail` method:"
msgstr ""

#: docs/10.x/billing.md:block 349 (code)
msgid "$user = User::find(1);\n\n"
"$subscriptionItem = $user->subscription('default')->findItemOrFail('price_chat');\n"
msgstr ""

#: docs/10.x/billing.md:block 351 (header)
msgid "Multiple Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 352 (paragraph)
msgid "Stripe allows your customers to have multiple subscriptions simultaneously. For example, you may run a gym that offers a swimming subscription and a weight-lifting subscription, and each subscription may have different pricing. Of course, customers should be able to subscribe to either or both plans."
msgstr ""

#: docs/10.x/billing.md:block 353 (paragraph)
msgid "When your application creates subscriptions, you may provide the name of the subscription to the `newSubscription` method. The name may be any string that represents the type of subscription the user is initiating:"
msgstr ""

#: docs/10.x/billing.md:block 354 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/swimming/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('swimming')\n"
"        ->price('price_swimming_monthly')\n"
"        ->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 355 (paragraph)
msgid "In this example, we initiated a monthly swimming subscription for the customer. However, they may want to swap to a yearly subscription at a later time. When adjusting the customer's subscription, we can simply swap the price on the `swimming` subscription:"
msgstr ""

#: docs/10.x/billing.md:block 356 (code)
msgid "$user->subscription('swimming')->swap('price_swimming_yearly');\n"
msgstr ""

#: docs/10.x/billing.md:block 357 (paragraph)
msgid "Of course, you may also cancel the subscription entirely:"
msgstr ""

#: docs/10.x/billing.md:block 358 (code)
msgid "$user->subscription('swimming')->cancel();\n"
msgstr ""

#: docs/10.x/billing.md:block 360 (header)
msgid "Metered Billing"
msgstr ""

#: docs/10.x/billing.md:block 361 (paragraph)
msgid "[Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) allows you to charge customers based on their product usage during a billing cycle. For example, you may charge customers based on the number of text messages or emails they send per month."
msgstr ""

#: docs/10.x/billing.md:block 362 (paragraph)
msgid "To start using metered billing, you will first need to create a new product in your Stripe dashboard with a metered price. Then, use the `meteredPrice` to add the metered price ID to a customer subscription:"
msgstr ""

#: docs/10.x/billing.md:block 363 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('default')\n"
"        ->meteredPrice('price_metered')\n"
"        ->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 364 (paragraph)
msgid "You may also start a metered subscription via [Stripe Checkout](#checkout):"
msgstr ""

#: docs/10.x/billing.md:block 365 (code)
msgid "$checkout = Auth::user()\n"
"        ->newSubscription('default', [])\n"
"        ->meteredPrice('price_metered')\n"
"        ->checkout();\n\n"
"return view('your-checkout-view', [\n"
"    'checkout' => $checkout,\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 367 (header)
msgid "Reporting Usage"
msgstr ""

#: docs/10.x/billing.md:block 368 (paragraph)
msgid "As your customer uses your application, you will report their usage to Stripe so that they can be billed accurately. To increment the usage of a metered subscription, you may use the `reportUsage` method:"
msgstr ""

#: docs/10.x/billing.md:block 369 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->reportUsage();\n"
msgstr ""

#: docs/10.x/billing.md:block 370 (paragraph)
msgid "By default, a \"usage quantity\" of 1 is added to the billing period. Alternatively, you may pass a specific amount of \"usage\" to add to the customer's usage for the billing period:"
msgstr ""

#: docs/10.x/billing.md:block 371 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->reportUsage(15);\n"
msgstr ""

#: docs/10.x/billing.md:block 372 (paragraph)
msgid "If your application offers multiple prices on a single subscription, you will need to use the `reportUsageFor` method to specify the metered price you want to report usage for:"
msgstr ""

#: docs/10.x/billing.md:block 373 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->reportUsageFor('price_metered', 15);\n"
msgstr ""

#: docs/10.x/billing.md:block 374 (paragraph)
msgid "Sometimes, you may need to update usage which you have previously reported. To accomplish this, you may pass a timestamp or a `DateTimeInterface` instance as the second parameter to `reportUsage`. When doing so, Stripe will update the usage that was reported at that given time. You can continue to update previous usage records as the given date and time is still within the current billing period:"
msgstr ""

#: docs/10.x/billing.md:block 375 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->reportUsage(5, $timestamp);\n"
msgstr ""

#: docs/10.x/billing.md:block 377 (header)
msgid "Retrieving Usage Records"
msgstr ""

#: docs/10.x/billing.md:block 378 (paragraph)
msgid "To retrieve a customer's past usage, you may use a subscription instance's `usageRecords` method:"
msgstr ""

#: docs/10.x/billing.md:block 379 (code)
msgid "$user = User::find(1);\n\n"
"$usageRecords = $user->subscription('default')->usageRecords();\n"
msgstr ""

#: docs/10.x/billing.md:block 380 (paragraph)
msgid "If your application offers multiple prices on a single subscription, you may use the `usageRecordsFor` method to specify the metered price that you wish to retrieve usage records for:"
msgstr ""

#: docs/10.x/billing.md:block 381 (code)
msgid "$user = User::find(1);\n\n"
"$usageRecords = $user->subscription('default')->usageRecordsFor('price_metered');\n"
msgstr ""

#: docs/10.x/billing.md:block 382 (paragraph)
msgid "The `usageRecords` and `usageRecordsFor` methods return a Collection instance containing an associative array of usage records. You may iterate over this array to display a customer's total usage:"
msgstr ""

#: docs/10.x/billing.md:block 383 (code)
msgid "@foreach ($usageRecords as $usageRecord)\n"
"    - Period Starting: {{ $usageRecord['period']['start'] }}\n"
"    - Period Ending: {{ $usageRecord['period']['end'] }}\n"
"    - Total Usage: {{ $usageRecord['total_usage'] }}\n"
"@endforeach\n"
msgstr ""

#: docs/10.x/billing.md:block 384 (paragraph)
msgid "For a full reference of all usage data returned and how to use Stripe's cursor based pagination, please consult [the official Stripe API documentation](https://stripe.com/docs/api/usage_records/subscription_item_summary_list)."
msgstr ""

#: docs/10.x/billing.md:block 386 (header)
msgid "Subscription Taxes"
msgstr ""

#: docs/10.x/billing.md:block 387 (quote)
msgid "**Warning** Instead of calculating Tax Rates manually, you can [automatically calculate taxes using Stripe Tax](#tax-configuration)"
msgstr ""

#: docs/10.x/billing.md:block 388 (paragraph)
msgid "To specify the tax rates a user pays on a subscription, you should implement the `taxRates` method on your billable model and return an array containing the Stripe tax rate IDs. You can define these tax rates in [your Stripe dashboard](https://dashboard.stripe.com/test/tax-rates):"
msgstr ""

#: docs/10.x/billing.md:block 389 (code)
msgid "/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"public function taxRates(): array\n"
"{\n"
"    return ['txr_id'];\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 390 (paragraph)
msgid "The `taxRates` method enables you to apply a tax rate on a customer-by-customer basis, which may be helpful for a user base that spans multiple countries and tax rates."
msgstr ""

#: docs/10.x/billing.md:block 391 (paragraph)
msgid "If you're offering subscriptions with multiple products, you may define different tax rates for each price by implementing a `priceTaxRates` method on your billable model:"
msgstr ""

#: docs/10.x/billing.md:block 392 (code)
msgid "/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array<string, array<int, string>>\n"
" */\n"
"public function priceTaxRates(): array\n"
"{\n"
"    return [\n"
"        'price_monthly' => ['txr_id'],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 393 (quote)
msgid "**Warning** The `taxRates` method only applies to subscription charges. If you use Cashier to make \"one-off\" charges, you will need to manually specify the tax rate at that time."
msgstr ""

#: docs/10.x/billing.md:block 395 (header)
msgid "Syncing Tax Rates"
msgstr ""

#: docs/10.x/billing.md:block 396 (paragraph)
msgid "When changing the hard-coded tax rate IDs returned by the `taxRates` method, the tax settings on any existing subscriptions for the user will remain the same. If you wish to update the tax value for existing subscriptions with the new `taxRates` values, you should call the `syncTaxRates` method on the user's subscription instance:"
msgstr ""

#: docs/10.x/billing.md:block 397 (code)
msgid "$user->subscription('default')->syncTaxRates();\n"
msgstr ""

#: docs/10.x/billing.md:block 398 (paragraph)
msgid "This will also sync any item tax rates for a subscription with multiple products. If your application is offering subscriptions with multiple products, you should ensure that your billable model implements the `priceTaxRates` method [discussed above](#subscription-taxes)."
msgstr ""

#: docs/10.x/billing.md:block 400 (header)
msgid "Tax Exemption"
msgstr ""

#: docs/10.x/billing.md:block 401 (paragraph)
msgid "Cashier also offers the `isNotTaxExempt`, `isTaxExempt`, and `reverseChargeApplies` methods to determine if the customer is tax exempt. These methods will call the Stripe API to determine a customer's tax exemption status:"
msgstr ""

#: docs/10.x/billing.md:block 402 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->isTaxExempt();\n"
"$user->isNotTaxExempt();\n"
"$user->reverseChargeApplies();\n"
msgstr ""

#: docs/10.x/billing.md:block 403 (quote)
msgid "**Warning** These methods are also available on any `Laravel\\Cashier\\Invoice` object. However, when invoked on an `Invoice` object, the methods will determine the exemption status at the time the invoice was created."
msgstr ""

#: docs/10.x/billing.md:block 405 (header)
msgid "Subscription Anchor Date"
msgstr ""

#: docs/10.x/billing.md:block 406 (paragraph)
msgid "By default, the billing cycle anchor is the date the subscription was created or, if a trial period is used, the date that the trial ends. If you would like to modify the billing anchor date, you may use the `anchorBillingCycleOn` method:"
msgstr ""

#: docs/10.x/billing.md:block 407 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $anchor = Carbon::parse('first day of next month');\n\n"
"    $request->user()->newSubscription('default', 'price_monthly')\n"
"                ->anchorBillingCycleOn($anchor->startOfDay())\n"
"                ->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 408 (paragraph)
msgid "For more information on managing subscription billing cycles, consult the [Stripe billing cycle documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)"
msgstr ""

#: docs/10.x/billing.md:block 410 (header)
msgid "Cancelling Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 411 (paragraph)
msgid "To cancel a subscription, call the `cancel` method on the user's subscription:"
msgstr ""

#: docs/10.x/billing.md:block 412 (code)
msgid "$user->subscription('default')->cancel();\n"
msgstr ""

#: docs/10.x/billing.md:block 413 (paragraph)
msgid "When a subscription is canceled, Cashier will automatically set the `ends_at` column in your `subscriptions` database table. This column is used to know when the `subscribed` method should begin returning `false`."
msgstr ""

#: docs/10.x/billing.md:block 414 (paragraph)
msgid "For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the `subscribed` method will continue to return `true` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#: docs/10.x/billing.md:block 415 (paragraph)
msgid "You may determine if a user has canceled their subscription but are still on their \"grace period\" using the `onGracePeriod` method:"
msgstr ""

#: docs/10.x/billing.md:block 417 (paragraph)
msgid "If you wish to cancel a subscription immediately, call the `cancelNow` method on the user's subscription:"
msgstr ""

#: docs/10.x/billing.md:block 418 (code)
msgid "$user->subscription('default')->cancelNow();\n"
msgstr ""

#: docs/10.x/billing.md:block 419 (paragraph)
msgid "If you wish to cancel a subscription immediately and invoice any remaining un-invoiced metered usage or new / pending proration invoice items, call the `cancelNowAndInvoice` method on the user's subscription:"
msgstr ""

#: docs/10.x/billing.md:block 420 (code)
msgid "$user->subscription('default')->cancelNowAndInvoice();\n"
msgstr ""

#: docs/10.x/billing.md:block 421 (paragraph)
msgid "You may also choose to cancel the subscription at a specific moment in time:"
msgstr ""

#: docs/10.x/billing.md:block 422 (code)
msgid "$user->subscription('default')->cancelAt(\n"
"    now()->addDays(10)\n"
");\n"
msgstr ""

#: docs/10.x/billing.md:block 424 (header)
msgid "Resuming Subscriptions"
msgstr ""

#: docs/10.x/billing.md:block 425 (paragraph)
msgid "If a customer has canceled their subscription and you wish to resume it, you may invoke the `resume` method on the subscription. The customer must still be within their \"grace period\" in order to resume a subscription:"
msgstr ""

#: docs/10.x/billing.md:block 426 (code)
msgid "$user->subscription('default')->resume();\n"
msgstr ""

#: docs/10.x/billing.md:block 427 (paragraph)
msgid "If the customer cancels a subscription and then resumes that subscription before the subscription has fully expired the customer will not be billed immediately. Instead, their subscription will be re-activated and they will be billed on the original billing cycle."
msgstr ""

#: docs/10.x/billing.md:block 429 (header)
msgid "Subscription Trials"
msgstr ""

#: docs/10.x/billing.md:block 431 (header)
msgid "With Payment Method Up Front"
msgstr ""

#: docs/10.x/billing.md:block 432 (paragraph)
msgid "If you would like to offer trial periods to your customers while still collecting payment method information up front, you should use the `trialDays` method when creating your subscriptions:"
msgstr ""

#: docs/10.x/billing.md:block 433 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('default', 'price_monthly')\n"
"                ->trialDays(10)\n"
"                ->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 434 (paragraph)
msgid "This method will set the trial period ending date on the subscription record within the database and instruct Stripe to not begin billing the customer until after this date. When using the `trialDays` method, Cashier will overwrite any default trial period configured for the price in Stripe."
msgstr ""

#: docs/10.x/billing.md:block 435 (quote)
msgid "**Warning** If the customer's subscription is not canceled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date."
msgstr ""

#: docs/10.x/billing.md:block 436 (paragraph)
msgid "The `trialUntil` method allows you to provide a `DateTime` instance that specifies when the trial period should end:"
msgstr ""

#: docs/10.x/billing.md:block 437 (code)
msgid "use Carbon\\Carbon;\n\n"
"$user->newSubscription('default', 'price_monthly')\n"
"            ->trialUntil(Carbon::now()->addDays(10))\n"
"            ->create($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 438 (paragraph)
msgid "You may determine if a user is within their trial period using either the `onTrial` method of the user instance or the `onTrial` method of the subscription instance. The two examples below are equivalent:"
msgstr ""

#: docs/10.x/billing.md:block 439 (code)
msgid "if ($user->onTrial('default')) {\n"
"    // ...\n"
"}\n\n"
"if ($user->subscription('default')->onTrial()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 440 (paragraph)
msgid "You may use the `endTrial` method to immediately end a subscription trial:"
msgstr ""

#: docs/10.x/billing.md:block 441 (code)
msgid "$user->subscription('default')->endTrial();\n"
msgstr ""

#: docs/10.x/billing.md:block 442 (paragraph)
msgid "To determine if an existing trial has expired, you may use the `hasExpiredTrial` methods:"
msgstr ""

#: docs/10.x/billing.md:block 443 (code)
msgid "if ($user->hasExpiredTrial('default')) {\n"
"    // ...\n"
"}\n\n"
"if ($user->subscription('default')->hasExpiredTrial()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 445 (header)
msgid "Defining Trial Days In Stripe / Cashier"
msgstr ""

#: docs/10.x/billing.md:block 446 (paragraph)
msgid "You may choose to define how many trial days your price's receive in the Stripe dashboard or always pass them explicitly using Cashier. If you choose to define your price's trial days in Stripe you should be aware that new subscriptions, including new subscriptions for a customer that had a subscription in the past, will always receive a trial period unless you explicitly call the `skipTrial()` method."
msgstr ""

#: docs/10.x/billing.md:block 448 (header)
msgid "Without Payment Method Up Front"
msgstr ""

#: docs/10.x/billing.md:block 449 (paragraph)
msgid "If you would like to offer trial periods without collecting the user's payment method information up front, you may set the `trial_ends_at` column on the user record to your desired trial ending date. This is typically done during user registration:"
msgstr ""

#: docs/10.x/billing.md:block 450 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::create([\n"
"    // ...\n"
"    'trial_ends_at' => now()->addDays(10),\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 451 (quote)
msgid "**Warning** Be sure to add a [date cast](/docs/{{version}}/eloquent-mutators#date-casting) for the `trial_ends_at` attribute within your billable model's class definition."
msgstr ""

#: docs/10.x/billing.md:block 452 (paragraph)
msgid "Cashier refers to this type of trial as a \"generic trial\", since it is not attached to any existing subscription. The `onTrial` method on the billable model instance will return `true` if the current date is not past the value of `trial_ends_at`:"
msgstr ""

#: docs/10.x/billing.md:block 453 (code)
msgid "if ($user->onTrial()) {\n"
"    // User is within their trial period...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 454 (paragraph)
msgid "Once you are ready to create an actual subscription for the user, you may use the `newSubscription` method as usual:"
msgstr ""

#: docs/10.x/billing.md:block 455 (code)
msgid "$user = User::find(1);\n\n"
"$user->newSubscription('default', 'price_monthly')->create($paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 456 (paragraph)
msgid "To retrieve the user's trial ending date, you may use the `trialEndsAt` method. This method will return a Carbon date instance if a user is on a trial or `null` if they aren't. You may also pass an optional subscription name parameter if you would like to get the trial ending date for a specific subscription other than the default one:"
msgstr ""

#: docs/10.x/billing.md:block 457 (code)
msgid "if ($user->onTrial()) {\n"
"    $trialEndsAt = $user->trialEndsAt('main');\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 458 (paragraph)
msgid "You may also use the `onGenericTrial` method if you wish to know specifically that the user is within their \"generic\" trial period and has not yet created an actual subscription:"
msgstr ""

#: docs/10.x/billing.md:block 459 (code)
msgid "if ($user->onGenericTrial()) {\n"
"    // User is within their \"generic\" trial period...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 461 (header)
msgid "Extending Trials"
msgstr ""

#: docs/10.x/billing.md:block 462 (paragraph)
msgid "The `extendTrial` method allows you to extend the trial period of a subscription after the subscription has been created. If the trial has already expired and the customer is already being billed for the subscription, you can still offer them an extended trial. The time spent within the trial period will be deducted from the customer's next invoice:"
msgstr ""

#: docs/10.x/billing.md:block 463 (code)
msgid "use App\\Models\\User;\n\n"
"$subscription = User::find(1)->subscription('default');\n\n"
"// End the trial 7 days from now...\n"
"$subscription->extendTrial(\n"
"    now()->addDays(7)\n"
");\n\n"
"// Add an additional 5 days to the trial...\n"
"$subscription->extendTrial(\n"
"    $subscription->trial_ends_at->addDays(5)\n"
");\n"
msgstr ""

#: docs/10.x/billing.md:block 465 (header)
msgid "Handling Stripe Webhooks"
msgstr ""

#: docs/10.x/billing.md:block 466 (quote)
msgid "**Note** You may use [the Stripe CLI](https://stripe.com/docs/stripe-cli) to help test webhooks during local development."
msgstr ""

#: docs/10.x/billing.md:block 467 (paragraph)
msgid "Stripe can notify your application of a variety of events via webhooks. By default, a route that points to Cashier's webhook controller is automatically registered by the Cashier service provider. This controller will handle all incoming webhook requests."
msgstr ""

#: docs/10.x/billing.md:block 468 (paragraph)
msgid "By default, the Cashier webhook controller will automatically handle cancelling subscriptions that have too many failed charges (as defined by your Stripe settings), customer updates, customer deletions, subscription updates, and payment method changes; however, as we'll soon discover, you can extend this controller to handle any Stripe webhook event you like."
msgstr ""

#: docs/10.x/billing.md:block 469 (paragraph)
msgid "To ensure your application can handle Stripe webhooks, be sure to configure the webhook URL in the Stripe control panel. By default, Cashier's webhook controller responds to the `/stripe/webhook` URL path. The full list of all webhooks you should enable in the Stripe control panel are:"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`customer.subscription.created`"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`customer.subscription.updated`"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`customer.subscription.deleted`"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`customer.updated`"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`customer.deleted`"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`invoice.payment_succeeded`"
msgstr ""

#: docs/10.x/billing.md:block 470 (unordered list)
msgid "`invoice.payment_action_required`"
msgstr ""

#: docs/10.x/billing.md:block 471 (paragraph)
msgid "For convenience, Cashier includes a `cashier:webhook` Artisan command. This command will create a webhook in Stripe that listens to all of the events required by Cashier:"
msgstr ""

#: docs/10.x/billing.md:block 472 (code)
msgid "php artisan cashier:webhook\n"
msgstr ""

#: docs/10.x/billing.md:block 473 (paragraph)
msgid "By default, the created webhook will point to the URL defined by the `APP_URL` environment variable and the `cashier.webhook` route that is included with Cashier. You may provide the `--url` option when invoking the command if you would like to use a different URL:"
msgstr ""

#: docs/10.x/billing.md:block 474 (code)
msgid "php artisan cashier:webhook --url \"https://example.com/stripe/webhook\"\n"
msgstr ""

#: docs/10.x/billing.md:block 475 (paragraph)
msgid "The webhook that is created will use the Stripe API version that your version of Cashier is compatible with. If you would like to use a different Stripe version, you may provide the `--api-version` option:"
msgstr ""

#: docs/10.x/billing.md:block 476 (code)
msgid "php artisan cashier:webhook --api-version=\"2019-12-03\"\n"
msgstr ""

#: docs/10.x/billing.md:block 477 (paragraph)
msgid "After creation, the webhook will be immediately active. If you wish to create the webhook but have it disabled until you're ready, you may provide the `--disabled` option when invoking the command:"
msgstr ""

#: docs/10.x/billing.md:block 478 (code)
msgid "php artisan cashier:webhook --disabled\n"
msgstr ""

#: docs/10.x/billing.md:block 479 (quote)
msgid "**Warning** Make sure you protect incoming Stripe webhook requests with Cashier's included [webhook signature verification](#verifying-webhook-signatures) middleware."
msgstr ""

#: docs/10.x/billing.md:block 481 (header)
msgid "Webhooks & CSRF Protection"
msgstr ""

#: docs/10.x/billing.md:block 482 (paragraph)
msgid "Since Stripe webhooks need to bypass Laravel's [CSRF protection](/docs/{{version}}/csrf), be sure to list the URI as an exception in your application's `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list the route outside of the `web` middleware group:"
msgstr ""

#: docs/10.x/billing.md:block 483 (code)
msgid "protected $except = [\n"
"    'stripe/*',\n"
"];\n"
msgstr ""

#: docs/10.x/billing.md:block 485 (header)
msgid "Defining Webhook Event Handlers"
msgstr ""

#: docs/10.x/billing.md:block 486 (paragraph)
msgid "Cashier automatically handles subscription cancellations for failed charges and other common Stripe webhook events. However, if you have additional webhook events you would like to handle, you may do so by listening to the following events that are dispatched by Cashier:"
msgstr ""

#: docs/10.x/billing.md:block 487 (unordered list)
msgid "`Laravel\\Cashier\\Events\\WebhookReceived`"
msgstr ""

#: docs/10.x/billing.md:block 487 (unordered list)
msgid "`Laravel\\Cashier\\Events\\WebhookHandled`"
msgstr ""

#: docs/10.x/billing.md:block 488 (paragraph)
msgid "Both events contain the full payload of the Stripe webhook. For example, if you wish to handle the `invoice.payment_succeeded` webhook, you may register a [listener](/docs/{{version}}/events#defining-listeners) that will handle the event:"
msgstr ""

#: docs/10.x/billing.md:block 489 (code)
msgid "<?php\n\n"
"namespace App\\Listeners;\n\n"
"use Laravel\\Cashier\\Events\\WebhookReceived;\n\n"
"class StripeEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Stripe webhooks.\n"
"     */\n"
"    public function handle(WebhookReceived $event): void\n"
"    {\n"
"        if ($event->payload['type'] === 'invoice.payment_succeeded') {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 490 (paragraph)
msgid "Once your listener has been defined, you may register it within your application's `EventServiceProvider`:"
msgstr ""

#: docs/10.x/billing.md:block 491 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Listeners\\StripeEventListener;\n"
"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
"use Laravel\\Cashier\\Events\\WebhookReceived;\n\n"
"class EventServiceProvider extends ServiceProvider\n"
"{\n"
"    protected $listen = [\n"
"        WebhookReceived::class => [\n"
"            StripeEventListener::class,\n"
"        ],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 493 (header)
msgid "Verifying Webhook Signatures"
msgstr ""

#: docs/10.x/billing.md:block 494 (paragraph)
msgid "To secure your webhooks, you may use [Stripe's webhook signatures](https://stripe.com/docs/webhooks/signatures). For convenience, Cashier automatically includes a middleware which validates that the incoming Stripe webhook request is valid."
msgstr ""

#: docs/10.x/billing.md:block 495 (paragraph)
msgid "To enable webhook verification, ensure that the `STRIPE_WEBHOOK_SECRET` environment variable is set in your application's `.env` file. The webhook `secret` may be retrieved from your Stripe account dashboard."
msgstr ""

#: docs/10.x/billing.md:block 497 (header)
msgid "Single Charges"
msgstr ""

#: docs/10.x/billing.md:block 499 (header)
msgid "Simple Charge"
msgstr ""

#: docs/10.x/billing.md:block 500 (paragraph)
msgid "If you would like to make a one-time charge against a customer, you may use the `charge` method on a billable model instance. You will need to [provide a payment method identifier](#payment-methods-for-single-charges) as the second argument to the `charge` method:"
msgstr ""

#: docs/10.x/billing.md:block 501 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/purchase', function (Request $request) {\n"
"    $stripeCharge = $request->user()->charge(\n"
"        100, $request->paymentMethodId\n"
"    );\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 502 (paragraph)
msgid "The `charge` method accepts an array as its third argument, allowing you to pass any options you wish to the underlying Stripe charge creation. More information regarding the options available to you when creating charges may be found in the [Stripe documentation](https://stripe.com/docs/api/charges/create):"
msgstr ""

#: docs/10.x/billing.md:block 503 (code)
msgid "$user->charge(100, $paymentMethod, [\n"
"    'custom_option' => $value,\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 504 (paragraph)
msgid "You may also use the `charge` method without an underlying customer or user. To accomplish this, invoke the `charge` method on a new instance of your application's billable model:"
msgstr ""

#: docs/10.x/billing.md:block 505 (code)
msgid "use App\\Models\\User;\n\n"
"$stripeCharge = (new User)->charge(100, $paymentMethod);\n"
msgstr ""

#: docs/10.x/billing.md:block 506 (paragraph)
msgid "The `charge` method will throw an exception if the charge fails. If the charge is successful, an instance of `Laravel\\Cashier\\Payment` will be returned from the method:"
msgstr ""

#: docs/10.x/billing.md:block 507 (code)
msgid "try {\n"
"    $payment = $user->charge(100, $paymentMethod);\n"
"} catch (Exception $e) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 508 (quote)
msgid "**Warning** The `charge` method accepts the payment amount in the lowest denominator of the currency used by your application. For example, if customers are paying in United States Dollars, amounts should be specified in pennies."
msgstr ""

#: docs/10.x/billing.md:block 510 (header)
msgid "Charge With Invoice"
msgstr ""

#: docs/10.x/billing.md:block 511 (paragraph)
msgid "Sometimes you may need to make a one-time charge and offer a PDF receipt to your customer. The `invoicePrice` method lets you do just that. For example, let's invoice a customer for five new shirts:"
msgstr ""

#: docs/10.x/billing.md:block 512 (code)
msgid "$user->invoicePrice('price_tshirt', 5);\n"
msgstr ""

#: docs/10.x/billing.md:block 513 (paragraph)
msgid "The invoice will be immediately charged against the user's default payment method. The `invoicePrice` method also accepts an array as its third argument. This array contains the billing options for the invoice item. The fourth argument accepted by the method is also an array which should contain the billing options for the invoice itself:"
msgstr ""

#: docs/10.x/billing.md:block 514 (code)
msgid "$user->invoicePrice('price_tshirt', 5, [\n"
"    'discounts' => [\n"
"        ['coupon' => 'SUMMER21SALE']\n"
"    ],\n"
"], [\n"
"    'default_tax_rates' => ['txr_id'],\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 515 (paragraph)
msgid "Similarly to `invoicePrice`, you may use the `tabPrice` method to create a one-time charge for multiple items (up to 250 items per invoice) by adding them to the customer's \"tab\" and then invoicing the customer. For example, we may invoice a customer for five shirts and two mugs:"
msgstr ""

#: docs/10.x/billing.md:block 516 (code)
msgid "$user->tabPrice('price_tshirt', 5);\n"
"$user->tabPrice('price_mug', 2);\n"
"$user->invoice();\n"
msgstr ""

#: docs/10.x/billing.md:block 517 (paragraph)
msgid "Alternatively, you may use the `invoiceFor` method to make a \"one-off\" charge against the customer's default payment method:"
msgstr ""

#: docs/10.x/billing.md:block 518 (code)
msgid "$user->invoiceFor('One Time Fee', 500);\n"
msgstr ""

#: docs/10.x/billing.md:block 519 (paragraph)
msgid "Although the `invoiceFor` method is available for you to use, it is recommended that you use the `invoicePrice` and `tabPrice` methods with pre-defined prices. By doing so, you will have access to better analytics and data within your Stripe dashboard regarding your sales on a per-product basis."
msgstr ""

#: docs/10.x/billing.md:block 520 (quote)
msgid "**Warning** The `invoice`, `invoicePrice`, and `invoiceFor` methods will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge."
msgstr ""

#: docs/10.x/billing.md:block 522 (header)
msgid "Creating Payment Intents"
msgstr ""

#: docs/10.x/billing.md:block 523 (paragraph)
msgid "You can create a new Stripe payment intent by invoking the `pay` method on a billable model instance. Calling this method will create a payment intent that is wrapped in a `Laravel\\Cashier\\Payment` instance:"
msgstr ""

#: docs/10.x/billing.md:block 524 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/pay', function (Request $request) {\n"
"    $payment = $request->user()->pay(\n"
"        $request->get('amount')\n"
"    );\n\n"
"    return $payment->client_secret;\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 525 (paragraph)
msgid "After creating the payment intent, you can return the client secret to your application's frontend so that the user can complete the payment in their browser. To read more about building entire payment flows using Stripe payment intents, please consult the [Stripe documentation](https://stripe.com/docs/payments/accept-a-payment?platform=web)."
msgstr ""

#: docs/10.x/billing.md:block 526 (paragraph)
msgid "When using the `pay` method, the default payment methods that are enabled within your Stripe dashboard will be available to the customer. Alternatively, if you only want to allow for some specific payment methods to be used, you may use the `payWith` method:"
msgstr ""

#: docs/10.x/billing.md:block 527 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/pay', function (Request $request) {\n"
"    $payment = $request->user()->payWith(\n"
"        $request->get('amount'), ['card', 'bancontact']\n"
"    );\n\n"
"    return $payment->client_secret;\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 528 (quote)
msgid "**Warning** The `pay` and `payWith` methods accept the payment amount in the lowest denominator of the currency used by your application. For example, if customers are paying in United States Dollars, amounts should be specified in pennies."
msgstr ""

#: docs/10.x/billing.md:block 530 (header)
msgid "Refunding Charges"
msgstr ""

#: docs/10.x/billing.md:block 531 (paragraph)
msgid "If you need to refund a Stripe charge, you may use the `refund` method. This method accepts the Stripe [payment intent ID](#payment-methods-for-single-charges) as its first argument:"
msgstr ""

#: docs/10.x/billing.md:block 532 (code)
msgid "$payment = $user->charge(100, $paymentMethodId);\n\n"
"$user->refund($payment->id);\n"
msgstr ""

#: docs/10.x/billing.md:block 534 (header)
msgid "Invoices"
msgstr ""

#: docs/10.x/billing.md:block 536 (header)
msgid "Retrieving Invoices"
msgstr ""

#: docs/10.x/billing.md:block 537 (paragraph)
msgid "You may easily retrieve an array of a billable model's invoices using the `invoices` method. The `invoices` method returns a collection of `Laravel\\Cashier\\Invoice` instances:"
msgstr ""

#: docs/10.x/billing.md:block 538 (code)
msgid "$invoices = $user->invoices();\n"
msgstr ""

#: docs/10.x/billing.md:block 539 (paragraph)
msgid "If you would like to include pending invoices in the results, you may use the `invoicesIncludingPending` method:"
msgstr ""

#: docs/10.x/billing.md:block 540 (code)
msgid "$invoices = $user->invoicesIncludingPending();\n"
msgstr ""

#: docs/10.x/billing.md:block 541 (paragraph)
msgid "You may use the `findInvoice` method to retrieve a specific invoice by its ID:"
msgstr ""

#: docs/10.x/billing.md:block 542 (code)
msgid "$invoice = $user->findInvoice($invoiceId);\n"
msgstr ""

#: docs/10.x/billing.md:block 544 (header)
msgid "Displaying Invoice Information"
msgstr ""

#: docs/10.x/billing.md:block 545 (paragraph)
msgid "When listing the invoices for the customer, you may use the invoice's methods to display the relevant invoice information. For example, you may wish to list every invoice in a table, allowing the user to easily download any of them:"
msgstr ""

#: docs/10.x/billing.md:block 546 (code)
msgid "<table>\n"
"    @foreach ($invoices as $invoice)\n"
"        <tr>\n"
"            <td>{{ $invoice->date()->toFormattedDateString() }}</td>\n"
"            <td>{{ $invoice->total() }}</td>\n"
"            <td><a href=\"/user/invoice/{{ $invoice->id }}\">Download</a></td>\n"
"        </tr>\n"
"    @endforeach\n"
"</table>\n"
msgstr ""

#: docs/10.x/billing.md:block 548 (header)
msgid "Upcoming Invoices"
msgstr ""

#: docs/10.x/billing.md:block 549 (paragraph)
msgid "To retrieve the upcoming invoice for a customer, you may use the `upcomingInvoice` method:"
msgstr ""

#: docs/10.x/billing.md:block 550 (code)
msgid "$invoice = $user->upcomingInvoice();\n"
msgstr ""

#: docs/10.x/billing.md:block 551 (paragraph)
msgid "Similarly, if the customer has multiple subscriptions, you can also retrieve the upcoming invoice for a specific subscription:"
msgstr ""

#: docs/10.x/billing.md:block 552 (code)
msgid "$invoice = $user->subscription('default')->upcomingInvoice();\n"
msgstr ""

#: docs/10.x/billing.md:block 554 (header)
msgid "Previewing Subscription Invoices"
msgstr ""

#: docs/10.x/billing.md:block 555 (paragraph)
msgid "Using the `previewInvoice` method, you can preview an invoice before making price changes. This will allow you to determine what your customer's invoice will look like when a given price change is made:"
msgstr ""

#: docs/10.x/billing.md:block 556 (code)
msgid "$invoice = $user->subscription('default')->previewInvoice('price_yearly');\n"
msgstr ""

#: docs/10.x/billing.md:block 557 (paragraph)
msgid "You may pass an array of prices to the `previewInvoice` method in order to preview invoices with multiple new prices:"
msgstr ""

#: docs/10.x/billing.md:block 558 (code)
msgid "$invoice = $user->subscription('default')->previewInvoice(['price_yearly', 'price_metered']);\n"
msgstr ""

#: docs/10.x/billing.md:block 560 (header)
msgid "Generating Invoice PDFs"
msgstr ""

#: docs/10.x/billing.md:block 561 (paragraph)
msgid "Before generating invoice PDFs, you should use Composer to install the Dompdf library, which is the default invoice renderer for Cashier:"
msgstr ""

#: docs/10.x/billing.md:block 562 (code)
msgid "composer require dompdf/dompdf\n"
msgstr ""

#: docs/10.x/billing.md:block 563 (paragraph)
msgid "From within a route or controller, you may use the `downloadInvoice` method to generate a PDF download of a given invoice. This method will automatically generate the proper HTTP response needed to download the invoice:"
msgstr ""

#: docs/10.x/billing.md:block 564 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/invoice/{invoice}', function (Request $request, string $invoiceId) {\n"
"    return $request->user()->downloadInvoice($invoiceId);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 565 (paragraph)
msgid "By default, all data on the invoice is derived from the customer and invoice data stored in Stripe. The filename is based on your `app.name` config value. However, you can customize some of this data by providing an array as the second argument to the `downloadInvoice` method. This array allows you to customize information such as your company and product details:"
msgstr ""

#: docs/10.x/billing.md:block 566 (code)
msgid "return $request->user()->downloadInvoice($invoiceId, [\n"
"    'vendor' => 'Your Company',\n"
"    'product' => 'Your Product',\n"
"    'street' => 'Main Str. 1',\n"
"    'location' => '2000 Antwerp, Belgium',\n"
"    'phone' => '+32 499 00 00 00',\n"
"    'email' => 'info@example.com',\n"
"    'url' => 'https://example.com',\n"
"    'vendorVat' => 'BE123456789',\n"
"]);\n"
msgstr ""

#: docs/10.x/billing.md:block 567 (paragraph)
msgid "The `downloadInvoice` method also allows for a custom filename via its third argument. This filename will automatically be suffixed with `.pdf`:"
msgstr ""

#: docs/10.x/billing.md:block 568 (code)
msgid "return $request->user()->downloadInvoice($invoiceId, [], 'my-invoice');\n"
msgstr ""

#: docs/10.x/billing.md:block 570 (header)
msgid "Custom Invoice Renderer"
msgstr ""

#: docs/10.x/billing.md:block 571 (paragraph)
msgid "Cashier also makes it possible to use a custom invoice renderer. By default, Cashier uses the `DompdfInvoiceRenderer` implementation, which utilizes the [dompdf](https://github.com/dompdf/dompdf) PHP library to generate Cashier's invoices. However, you may use any renderer you wish by implementing the `Laravel\\Cashier\\Contracts\\InvoiceRenderer` interface. For example, you may wish to render an invoice PDF using an API call to a third-party PDF rendering service:"
msgstr ""

#: docs/10.x/billing.md:block 572 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n"
"use Laravel\\Cashier\\Contracts\\InvoiceRenderer;\n"
"use Laravel\\Cashier\\Invoice;\n\n"
"class ApiInvoiceRenderer implements InvoiceRenderer\n"
"{\n"
"    /**\n"
"     * Render the given invoice and return the raw PDF bytes.\n"
"     */\n"
"    public function render(Invoice $invoice, array $data = [], array $options = []): string\n"
"    {\n"
"        $html = $invoice->view($data)->render();\n\n"
"        return Http::get('https://example.com/html-to-pdf', ['html' => $html])->get()->body();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 573 (paragraph)
msgid "Once you have implemented the invoice renderer contract, you should update the `cashier.invoices.renderer` configuration value in your application's `config/cashier.php` configuration file. This configuration value should be set to the class name of your custom renderer implementation."
msgstr ""

#: docs/10.x/billing.md:block 575 (header)
msgid "Checkout"
msgstr ""

#: docs/10.x/billing.md:block 576 (paragraph)
msgid "Cashier Stripe also provides support for [Stripe Checkout](https://stripe.com/payments/checkout). Stripe Checkout takes the pain out of implementing custom pages to accept payments by providing a pre-built, hosted payment page."
msgstr ""

#: docs/10.x/billing.md:block 577 (paragraph)
msgid "The following documentation contains information on how to get started using Stripe Checkout with Cashier. To learn more about Stripe Checkout, you should also consider reviewing [Stripe's own documentation on Checkout](https://stripe.com/docs/payments/checkout)."
msgstr ""

#: docs/10.x/billing.md:block 579 (header)
msgid "Product Checkouts"
msgstr ""

#: docs/10.x/billing.md:block 580 (paragraph)
msgid "You may perform a checkout for an existing product that has been created within your Stripe dashboard using the `checkout` method on a billable model. The `checkout` method will initiate a new Stripe Checkout session. By default, you're required to pass a Stripe Price ID:"
msgstr ""

#: docs/10.x/billing.md:block 581 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout('price_tshirt');\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 582 (paragraph)
msgid "If needed, you may also specify a product quantity:"
msgstr ""

#: docs/10.x/billing.md:block 583 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 15]);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 584 (paragraph)
msgid "When a customer visits this route they will be redirected to Stripe's Checkout page. By default, when a user successfully completes or cancels a purchase they will be redirected to your `home` route location, but you may specify custom callback URLs using the `success_url` and `cancel_url` options:"
msgstr ""

#: docs/10.x/billing.md:block 585 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 1], [\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 586 (paragraph)
msgid "When defining your `success_url` checkout option, you may instruct Stripe to add the checkout session ID as a query string parameter when invoking your URL. To do so, add the literal string `{CHECKOUT_SESSION_ID}` to your `success_url` query string. Stripe will replace this placeholder with the actual checkout session ID:"
msgstr ""

#: docs/10.x/billing.md:block 587 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Stripe\\Checkout\\Session;\n"
"use Stripe\\Customer;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 1], [\n"
"        'success_url' => route('checkout-success').'?session_id={CHECKOUT_SESSION_ID}',\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"    ]);\n"
"});\n\n"
"Route::get('/checkout-success', function (Request $request) {\n"
"    $checkoutSession = $request->user()->stripe()->checkout->sessions->retrieve($request->get('session_id'));\n\n"
"    return view('checkout.success', ['checkoutSession' => $checkoutSession]);\n"
"})->name('checkout-success');\n"
msgstr ""

#: docs/10.x/billing.md:block 589 (header)
msgid "Promotion Codes"
msgstr ""

#: docs/10.x/billing.md:block 590 (paragraph)
msgid "By default, Stripe Checkout does not allow [user redeemable promotion codes](https://stripe.com/docs/billing/subscriptions/discounts/codes). Luckily, there's an easy way to enable these for your Checkout page. To do so, you may invoke the `allowPromotionCodes` method:"
msgstr ""

#: docs/10.x/billing.md:block 591 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->allowPromotionCodes()\n"
"        ->checkout('price_tshirt');\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 593 (header)
msgid "Single Charge Checkouts"
msgstr ""

#: docs/10.x/billing.md:block 594 (paragraph)
msgid "You can also perform a simple charge for an ad-hoc product that has not been created in your Stripe dashboard. To do so you may use the `checkoutCharge` method on a billable model and pass it a chargeable amount, a product name, and an optional quantity. When a customer visits this route they will be redirected to Stripe's Checkout page:"
msgstr ""

#: docs/10.x/billing.md:block 595 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/charge-checkout', function (Request $request) {\n"
"    return $request->user()->checkoutCharge(1200, 'T-Shirt', 5);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 596 (quote)
msgid "**Warning** When using the `checkoutCharge` method, Stripe will always create a new product and price in your Stripe dashboard. Therefore, we recommend that you create the products up front in your Stripe dashboard and use the `checkout` method instead."
msgstr ""

#: docs/10.x/billing.md:block 598 (header)
msgid "Subscription Checkouts"
msgstr ""

#: docs/10.x/billing.md:block 599 (quote)
msgid "**Warning** Using Stripe Checkout for subscriptions requires you to enable the `customer.subscription.created` webhook in your Stripe dashboard. This webhook will create the subscription record in your database and store all of the relevant subscription items."
msgstr ""

#: docs/10.x/billing.md:block 600 (paragraph)
msgid "You may also use Stripe Checkout to initiate subscriptions. After defining your subscription with Cashier's subscription builder methods, you may call the `checkout `method. When a customer visits this route they will be redirected to Stripe's Checkout page:"
msgstr ""

#: docs/10.x/billing.md:block 601 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_monthly')\n"
"        ->checkout();\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 602 (paragraph)
msgid "Just as with product checkouts, you may customize the success and cancellation URLs:"
msgstr ""

#: docs/10.x/billing.md:block 603 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_monthly')\n"
"        ->checkout([\n"
"            'success_url' => route('your-success-route'),\n"
"            'cancel_url' => route('your-cancel-route'),\n"
"        ]);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 604 (paragraph)
msgid "Of course, you can also enable promotion codes for subscription checkouts:"
msgstr ""

#: docs/10.x/billing.md:block 605 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_monthly')\n"
"        ->allowPromotionCodes()\n"
"        ->checkout();\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 606 (quote)
msgid "**Warning** Unfortunately Stripe Checkout does not support all subscription billing options when starting subscriptions. Using the `anchorBillingCycleOn` method on the subscription builder, setting proration behavior, or setting payment behavior will not have any effect during Stripe Checkout sessions. Please consult [the Stripe Checkout Session API documentation](https://stripe.com/docs/api/checkout/sessions/create) to review which parameters are available."
msgstr ""

#: docs/10.x/billing.md:block 608 (header)
msgid "Stripe Checkout & Trial Periods"
msgstr ""

#: docs/10.x/billing.md:block 609 (paragraph)
msgid "Of course, you can define a trial period when building a subscription that will be completed using Stripe Checkout:"
msgstr ""

#: docs/10.x/billing.md:block 610 (code)
msgid "$checkout = Auth::user()->newSubscription('default', 'price_monthly')\n"
"    ->trialDays(3)\n"
"    ->checkout();\n"
msgstr ""

#: docs/10.x/billing.md:block 611 (paragraph)
msgid "However, the trial period must be at least 48 hours, which is the minimum amount of trial time supported by Stripe Checkout."
msgstr ""

#: docs/10.x/billing.md:block 613 (header)
msgid "Subscriptions & Webhooks"
msgstr ""

#: docs/10.x/billing.md:block 614 (paragraph)
msgid "Remember, Stripe and Cashier update subscription statuses via webhooks, so there's a possibility a subscription might not yet be active when the customer returns to the application after entering their payment information. To handle this scenario, you may wish to display a message informing the user that their payment or subscription is pending."
msgstr ""

#: docs/10.x/billing.md:block 616 (header)
msgid "Collecting Tax IDs"
msgstr ""

#: docs/10.x/billing.md:block 617 (paragraph)
msgid "Checkout also supports collecting a customer's Tax ID. To enable this on a checkout session, invoke the `collectTaxIds` method when creating the session:"
msgstr ""

#: docs/10.x/billing.md:block 618 (code)
msgid "$checkout = $user->collectTaxIds()->checkout('price_tshirt');\n"
msgstr ""

#: docs/10.x/billing.md:block 619 (paragraph)
msgid "When this method is invoked, a new checkbox will be available to the customer that allows them to indicate if they're purchasing as a company. If so, they will have the opportunity to provide their Tax ID number."
msgstr ""

#: docs/10.x/billing.md:block 620 (quote)
msgid "**Warning** If you have already configured [automatic tax collection](#tax-configuration) in your application's service provider then this feature will be enabled automatically and there is no need to invoke the `collectTaxIds` method."
msgstr ""

#: docs/10.x/billing.md:block 622 (header)
msgid "Guest Checkouts"
msgstr ""

#: docs/10.x/billing.md:block 623 (paragraph)
msgid "Using the `Checkout::guest` method, you may initiate checkout sessions for guests of your application that do not have an \"account\":"
msgstr ""

#: docs/10.x/billing.md:block 624 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Laravel\\Cashier\\Checkout;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return Checkout::guest()->create('price_tshirt', [\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 625 (paragraph)
msgid "Similarly to when creating checkout sessions for existing users, you may utilize additional methods available on the `Laravel\\Cashier\\CheckoutBuilder` instance to customize the guest checkout session:"
msgstr ""

#: docs/10.x/billing.md:block 626 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Laravel\\Cashier\\Checkout;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return Checkout::guest()\n"
"        ->withPromotionCode('promo-code')\n"
"        ->create('price_tshirt', [\n"
"            'success_url' => route('your-success-route'),\n"
"            'cancel_url' => route('your-cancel-route'),\n"
"        ]);\n"
"});\n"
msgstr ""

#: docs/10.x/billing.md:block 627 (paragraph)
msgid "After a guest checkout has been completed, Stripe can dispatch a `checkout.session.completed` webhook event, so make sure to [configure your Stripe webhook](https://dashboard.stripe.com/webhooks) to actually send this event to your application. Once the webhook has been enabled within the Stripe dashboard, you may [handle the webhook with Cashier](#handling-stripe-webhooks). The object contained in the webhook payload will be a [`checkout` object](https://stripe.com/docs/api/checkout/sessions/object) that you may inspect in order to fulfill your customer's order."
msgstr ""

#: docs/10.x/billing.md:block 629 (header)
msgid "Handling Failed Payments"
msgstr ""

#: docs/10.x/billing.md:block 630 (paragraph)
msgid "Sometimes, payments for subscriptions or single charges can fail. When this happens, Cashier will throw an `Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you that this happened. After catching this exception, you have two options on how to proceed."
msgstr ""

#: docs/10.x/billing.md:block 631 (paragraph)
msgid "First, you could redirect your customer to the dedicated payment confirmation page which is included with Cashier. This page already has an associated named route that is registered via Cashier's service provider. So, you may catch the `IncompletePayment` exception and redirect the user to the payment confirmation page:"
msgstr ""

#: docs/10.x/billing.md:block 632 (code)
msgid "use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n\n"
"try {\n"
"    $subscription = $user->newSubscription('default', 'price_monthly')\n"
"                            ->create($paymentMethod);\n"
"} catch (IncompletePayment $exception) {\n"
"    return redirect()->route(\n"
"        'cashier.payment',\n"
"        [$exception->payment->id, 'redirect' => route('home')]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 633 (paragraph)
msgid "On the payment confirmation page, the customer will be prompted to enter their credit card information again and perform any additional actions required by Stripe, such as \"3D Secure\" confirmation. After confirming their payment, the user will be redirected to the URL provided by the `redirect` parameter specified above. Upon redirection, `message` (string) and `success` (integer) query string variables will be added to the URL. The payment page currently supports the following payment method types:"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "Credit Cards"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "Alipay"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "Bancontact"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "BECS Direct Debit"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "EPS"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "Giropay"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "iDEAL"
msgstr ""

#: docs/10.x/billing.md:block 635 (unordered list)
msgid "SEPA Direct Debit"
msgstr ""

#: docs/10.x/billing.md:block 637 (paragraph)
msgid "Alternatively, you could allow Stripe to handle the payment confirmation for you. In this case, instead of redirecting to the payment confirmation page, you may [setup Stripe's automatic billing emails](https://dashboard.stripe.com/account/billing/automatic) in your Stripe dashboard. However, if an `IncompletePayment` exception is caught, you should still inform the user they will receive an email with further payment confirmation instructions."
msgstr ""

#: docs/10.x/billing.md:block 638 (paragraph)
msgid "Payment exceptions may be thrown for the following methods: `charge`, `invoiceFor`, and `invoice` on models using the `Billable` trait. When interacting with subscriptions, the `create` method on the `SubscriptionBuilder`, and the `incrementAndInvoice` and `swapAndInvoice` methods on the `Subscription` and `SubscriptionItem` models may throw incomplete payment exceptions."
msgstr ""

#: docs/10.x/billing.md:block 639 (paragraph)
msgid "Determining if an existing subscription has an incomplete payment may be accomplished using the `hasIncompletePayment` method on the billable model or a subscription instance:"
msgstr ""

#: docs/10.x/billing.md:block 641 (paragraph)
msgid "You can derive the specific status of an incomplete payment by inspecting the `payment` property on the exception instance:"
msgstr ""

#: docs/10.x/billing.md:block 642 (code)
msgid "use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n\n"
"try {\n"
"    $user->charge(1000, 'pm_card_threeDSecure2Required');\n"
"} catch (IncompletePayment $exception) {\n"
"    // Get the payment intent status...\n"
"    $exception->payment->status;\n\n"
"    // Check specific conditions...\n"
"    if ($exception->payment->requiresPaymentMethod()) {\n"
"        // ...\n"
"    } elseif ($exception->payment->requiresConfirmation()) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/billing.md:block 644 (header)
msgid "Strong Customer Authentication"
msgstr ""

#: docs/10.x/billing.md:block 645 (paragraph)
msgid "If your business or one of your customers is based in Europe you will need to abide by the EU's Strong Customer Authentication (SCA) regulations. These regulations were imposed in September 2019 by the European Union to prevent payment fraud. Luckily, Stripe and Cashier are prepared for building SCA compliant applications."
msgstr ""

#: docs/10.x/billing.md:block 646 (quote)
msgid "**Warning** Before getting started, review [Stripe's guide on PSD2 and SCA](https://stripe.com/guides/strong-customer-authentication) as well as their [documentation on the new SCA APIs](https://stripe.com/docs/strong-customer-authentication)."
msgstr ""

#: docs/10.x/billing.md:block 648 (header)
msgid "Payments Requiring Additional Confirmation"
msgstr ""

#: docs/10.x/billing.md:block 649 (paragraph)
msgid "SCA regulations often require extra verification in order to confirm and process a payment. When this happens, Cashier will throw a `Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you that extra verification is needed. More information on how to handle these exceptions be found can be found in the documentation on [handling failed payments](#handling-failed-payments)."
msgstr ""

#: docs/10.x/billing.md:block 650 (paragraph)
msgid "Payment confirmation screens presented by Stripe or Cashier may be tailored to a specific bank or card issuer's payment flow and can include additional card confirmation, a temporary small charge, separate device authentication, or other forms of verification."
msgstr ""

#: docs/10.x/billing.md:block 652 (header)
msgid "Incomplete and Past Due State"
msgstr ""

#: docs/10.x/billing.md:block 653 (paragraph)
msgid "When a payment needs additional confirmation, the subscription will remain in an `incomplete` or `past_due` state as indicated by its `stripe_status` database column. Cashier will automatically activate the customer's subscription as soon as payment confirmation is complete and your application is notified by Stripe via webhook of its completion."
msgstr ""

#: docs/10.x/billing.md:block 654 (paragraph)
msgid "For more information on `incomplete` and `past_due` states, please refer to [our additional documentation on these states](#incomplete-and-past-due-status)."
msgstr ""

#: docs/10.x/billing.md:block 656 (header)
msgid "Off-Session Payment Notifications"
msgstr ""

#: docs/10.x/billing.md:block 657 (paragraph)
msgid "Since SCA regulations require customers to occasionally verify their payment details even while their subscription is active, Cashier can send a notification to the customer when off-session payment confirmation is required. For example, this may occur when a subscription is renewing. Cashier's payment notification can be enabled by setting the `CASHIER_PAYMENT_NOTIFICATION` environment variable to a notification class. By default, this notification is disabled. Of course, Cashier includes a notification class you may use for this purpose, but you are free to provide your own notification class if desired:"
msgstr ""

#: docs/10.x/billing.md:block 658 (code)
msgid "CASHIER_PAYMENT_NOTIFICATION=Laravel\\Cashier\\Notifications\\ConfirmPayment\n"
msgstr ""

#: docs/10.x/billing.md:block 659 (paragraph)
msgid "To ensure that off-session payment confirmation notifications are delivered, verify that [Stripe webhooks are configured](#handling-stripe-webhooks) for your application and the `invoice.payment_action_required` webhook is enabled in your Stripe dashboard. In addition, your `Billable` model should also use Laravel's `Illuminate\\Notifications\\Notifiable` trait."
msgstr ""

#: docs/10.x/billing.md:block 660 (quote)
msgid "**Warning** Notifications will be sent even when customers are manually making a payment that requires additional confirmation. Unfortunately, there is no way for Stripe to know that the payment was done manually or \"off-session\". But, a customer will simply see a \"Payment Successful\" message if they visit the payment page after already confirming their payment. The customer will not be allowed to accidentally confirm the same payment twice and incur an accidental second charge."
msgstr ""

#: docs/10.x/billing.md:block 662 (header)
msgid "Stripe SDK"
msgstr ""

#: docs/10.x/billing.md:block 663 (paragraph)
msgid "Many of Cashier's objects are wrappers around Stripe SDK objects. If you would like to interact with the Stripe objects directly, you may conveniently retrieve them using the `asStripe` method:"
msgstr ""

#: docs/10.x/billing.md:block 664 (code)
msgid "$stripeSubscription = $subscription->asStripeSubscription();\n\n"
"$stripeSubscription->application_fee_percent = 5;\n\n"
"$stripeSubscription->save();\n"
msgstr ""

#: docs/10.x/billing.md:block 665 (paragraph)
msgid "You may also use the `updateStripeSubscription` method to update a Stripe subscription directly:"
msgstr ""

#: docs/10.x/billing.md:block 666 (code)
msgid "$subscription->updateStripeSubscription(['application_fee_percent' => 5]);\n"
msgstr ""

#: docs/10.x/billing.md:block 667 (paragraph)
msgid "You may invoke the `stripe` method on the `Cashier` class if you would like to use the `Stripe\\StripeClient` client directly. For example, you could use this method to access the `StripeClient` instance and retrieve a list of prices from your Stripe account:"
msgstr ""

#: docs/10.x/billing.md:block 668 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"$prices = Cashier::stripe()->prices->all();\n"
msgstr ""

#: docs/10.x/billing.md:block 670 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/billing.md:block 671 (paragraph)
msgid "When testing an application that uses Cashier, you may mock the actual HTTP requests to the Stripe API; however, this requires you to partially re-implement Cashier's own behavior. Therefore, we recommend allowing your tests to hit the actual Stripe API. While this is slower, it provides more confidence that your application is working as expected and any slow tests may be placed within their own PHPUnit testing group."
msgstr ""

#: docs/10.x/billing.md:block 672 (paragraph)
msgid "When testing, remember that Cashier itself already has a great test suite, so you should only focus on testing the subscription and payment flow of your own application and not every underlying Cashier behavior."
msgstr ""

#: docs/10.x/billing.md:block 673 (paragraph)
msgid "To get started, add the **testing** version of your Stripe secret to your `phpunit.xml` file:"
msgstr ""

#: docs/10.x/billing.md:block 674 (code)
msgid "<env name=\"STRIPE_SECRET\" value=\"sk_test_<your-key>\"/>\n"
msgstr ""

#: docs/10.x/billing.md:block 675 (paragraph)
msgid "Now, whenever you interact with Cashier while testing, it will send actual API requests to your Stripe testing environment. For convenience, you should pre-fill your Stripe testing account with subscriptions / prices that you may use during testing."
msgstr ""

#: docs/10.x/billing.md:block 676 (quote)
msgid "**Note** In order to test a variety of billing scenarios, such as credit card denials and failures, you may use the vast range of [testing card numbers and tokens](https://stripe.com/docs/testing) provided by Stripe."
msgstr ""

#: docs/8.x/billing.md:block 2 (unordered list)
msgid "[Multiprice Subscriptions](#multiprice-subscriptions)"
msgstr ""

#: docs/8.x/billing.md:block 9 (quote)
msgid "{note} To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 13 utilizes Stripe API version `2020-08-27`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements."
msgstr ""

#: docs/8.x/billing.md:block 14 (quote)
msgid "{note} To ensure Cashier properly handles all Stripe events, remember to [set up Cashier's webhook handling](#handling-stripe-webhooks)."
msgstr ""

#: docs/8.x/billing.md:block 22 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::ignoreMigrations();\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 23 (quote)
msgid "{note} Stripe recommends that any column used for storing Stripe identifiers should be case-sensitive. Therefore, you should ensure the column collation for the `stripe_id` column is set to `utf8_bin` when using MySQL. More information regarding this can be found in the [Stripe documentation](https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible)."
msgstr ""

#: docs/8.x/billing.md:block 31 (code)
msgid "use App\\Models\\Cashier\\User;\n"
"use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::useCustomerModel(User::class);\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 32 (quote)
msgid "{note} If you're using a model other than Laravel's supplied `App\\Models\\User` model, you'll need to publish and alter the [Cashier migrations](#installation) provided to match your alternative model's table name."
msgstr ""

#: docs/8.x/billing.md:block 36 (code)
msgid "STRIPE_KEY=your-stripe-key\n"
"STRIPE_SECRET=your-stripe-secret\n"
msgstr ""

#: docs/8.x/billing.md:block 43 (quote)
msgid "{note} In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server."
msgstr ""

#: docs/8.x/billing.md:block 47 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::calculateTaxes();\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 50 (quote)
msgid "{note} Unfortunately, for now, no tax is calculated for [single charges](#single-charges) or [single charge checkouts](#single-charge-checkouts). In addition, Stripe Tax is currently \"invite-only\" during its beta period. You can request access to Stripe Tax via the [Stripe Tax website](https://stripe.com/tax#request-access)."
msgstr ""

#: docs/8.x/billing.md:block 61 (code)
msgid "use App\\Models\\Cashier\\Subscription;\n"
"use App\\Models\\Cashier\\SubscriptionItem;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::useSubscriptionModel(Subscription::class);\n"
"    Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 86 (paragraph)
msgid "To credit a customer's balance, you may provide a negative value to the `applyBalance` method. If you wish, you may also provide a description:"
msgstr ""

#: docs/8.x/billing.md:block 87 (code)
msgid "$user->applyBalance(-500, 'Premium customer top-up.');\n"
msgstr ""

#: docs/8.x/billing.md:block 88 (paragraph)
msgid "Providing a positive value to the `applyBalance` method will debit the customer's balance:"
msgstr ""

#: docs/8.x/billing.md:block 89 (code)
msgid "$user->applyBalance(300, 'Bad usage penalty.');\n"
msgstr ""

#: docs/8.x/billing.md:block 107 (code)
msgid "use function Illuminate\\Events\\queueable;\n\n"
"/**\n"
" * The \"booted\" method of the model.\n"
" *\n"
" * @return void\n"
" */\n"
"protected static function booted()\n"
"{\n"
"    static::updated(queueable(function ($customer) {\n"
"        if ($customer->hasStripeId()) {\n"
"            $customer->syncStripeCustomerDetails();\n"
"        }\n"
"    }));\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 110 (code)
msgid "/**\n"
" * Get the customer name that should be synced to Stripe.\n"
" *\n"
" * @return string|null\n"
" */\n"
"public function stripeName()\n"
"{\n"
"    return $this->company_name;\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 111 (paragraph)
msgid "Similarly, you may override the `stripeEmail`, `stripePhone`, and `stripeAddress` methods. These methods will sync information to their corresponding customer parameters when [updating the Stripe customer object](https://stripe.com/docs/api/customers/update). If you wish to take total control over the customer information sync process, you may override the `syncStripeCustomerDetails` method."
msgstr ""

#: docs/8.x/billing.md:block 124 (paragraph)
msgid "In order to create subscriptions or perform \"one off\" charges with Stripe, you will need to store a payment method and retrieve its identifier from Stripe. The approach used to accomplish this differs based on whether you plan to use the payment method for subscriptions or single charges, so we will examine both below."
msgstr ""

#: docs/8.x/billing.md:block 136 (quote)
msgid "{tip} If you would like more information about Setup Intents and gathering customer payment details please [review this overview provided by Stripe](https://stripe.com/docs/payments/save-and-reuse#php)."
msgstr ""

#: docs/8.x/billing.md:block 159 (code)
msgid "if ($user->hasDefaultPaymentMethod()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 161 (code)
msgid "if ($user->hasPaymentMethod()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 163 (code)
msgid "if ($user->hasPaymentMethod('sepa_debit')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 170 (quote)
msgid "{note} The default payment method on a customer can only be used for invoicing and creating new subscriptions. Due to limitations imposed by Stripe, it may not be used for single charges."
msgstr ""

#: docs/8.x/billing.md:block 175 (quote)
msgid "{tip} To learn how to retrieve payment method identifiers please review the [payment method storage documentation](#storing-payment-methods)."
msgstr ""

#: docs/8.x/billing.md:block 186 (quote)
msgid "{note} If a user has an active subscription, your application should not allow them to delete their default payment method."
msgstr ""

#: docs/8.x/billing.md:block 196 (quote)
msgid "{note} Passing a payment method identifier directly to the `create` subscription method will also automatically add it to the user's stored payment methods."
msgstr ""

#: docs/8.x/billing.md:block 201 (paragraph)
msgid "The amount of time a customer has to pay their invoice before their subscription is canceled is determined by your subscription and invoice settings within the [Stripe dashboard](https://dashboard.stripe.com/settings/billing/automatic)."
msgstr ""

#: docs/8.x/billing.md:block 214 (paragraph)
msgid "Or, if you would like to apply a [Stripe promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes), you may use the `withPromotionCode` method. The given promotion code ID should be the Stripe API ID assigned to the promotion code and not the customer facing promotion code:"
msgstr ""

#: docs/8.x/billing.md:block 215 (code)
msgid "$user->newSubscription('default', 'price_monthly')\n"
"     ->withPromotionCode('promo_code')\n"
"     ->create($paymentMethod);\n"
msgstr ""

#: docs/8.x/billing.md:block 222 (paragraph)
msgid "You may also create subscriptions from the Stripe dashboard itself. When doing so, Cashier will sync newly added subscriptions and assign them a name of `default`. To customize the subscription name that is assigned to dashboard created subscriptions, [extend the `WebhookController`](/docs/{{version}}/billing#defining-webhook-event-handlers) and overwrite the `newSubscriptionName` method."
msgstr ""

#: docs/8.x/billing.md:block 224 (paragraph)
msgid "Finally, you should always make sure to only add one active subscription per type of subscription offered by your application. If customer has two `default` subscriptions, only the most recently added subscription will be used by Cashier even though both would be synced with your application's database."
msgstr ""

#: docs/8.x/billing.md:block 228 (code)
msgid "if ($user->subscribed('default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 230 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('billing');\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 232 (code)
msgid "if ($user->subscription('default')->onTrial()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 234 (code)
msgid "if ($user->subscribedToProduct('prod_premium', 'default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 236 (code)
msgid "if ($user->subscribedToProduct(['prod_basic', 'prod_premium'], 'default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 238 (code)
msgid "if ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 240 (code)
msgid "if ($user->subscription('default')->recurring()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 241 (quote)
msgid "{note} If a user has two subscriptions with the same name, the most recent subscription will always be returned by the `subscription` method. For example, a user might have two subscription records named `default`; however, one of the subscriptions may be an old, expired subscription, while the other is the current, active subscription. The most recent subscription will always be returned while older subscriptions are kept in the database for historical review."
msgstr ""

#: docs/8.x/billing.md:block 245 (code)
msgid "if ($user->subscription('default')->canceled()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 247 (code)
msgid "if ($user->subscription('default')->onGracePeriod()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 249 (code)
msgid "if ($user->subscription('default')->ended()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 254 (code)
msgid "if ($user->hasIncompletePayment('default')) {\n"
"    //\n"
"}\n\n"
"if ($user->subscription('default')->hasIncompletePayment()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 257 (paragraph)
msgid "If you would like the subscription to still be considered active when it's in a `past_due` state, you may use the `keepPastDueSubscriptionsActive` method provided by Cashier. Typically, this method should be called in the `register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#: docs/8.x/billing.md:block 258 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 259 (quote)
msgid "{note} When a subscription is in an `incomplete` state it cannot be changed until the payment is confirmed. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in an `incomplete` state."
msgstr ""

#: docs/8.x/billing.md:block 280 (quote)
msgid "{note} Executing the `noProrate` method before the `swapAndInvoice` method will have no effect on proration. An invoice will always be issued."
msgstr ""

#: docs/8.x/billing.md:block 291 (header)
msgid "Multiprice Subscription Quantities"
msgstr ""

#: docs/8.x/billing.md:block 292 (paragraph)
msgid "If your subscription is a [multiprice subscription](#multiprice-subscriptions), you should pass the name of the price whose quantity you wish to increment or decrement as the second argument to the increment / decrement methods:"
msgstr ""

#: docs/8.x/billing.md:block 295 (header)
msgid "Multiprice Subscriptions"
msgstr ""

#: docs/8.x/billing.md:block 296 (paragraph)
msgid "[Multiprice subscriptions](https://stripe.com/docs/billing/subscriptions/multiple-products) allow you to assign multiple billing prices to a single subscription. For example, imagine you are building a customer service \"helpdesk\" application that has a base subscription price of $10 per month but offers a live chat add-on price for an additional $15 per month. Multiprice subscription information is stored in Cashier's `subscription_items` database table."
msgstr ""

#: docs/8.x/billing.md:block 297 (paragraph)
msgid "You may specify multiple prices for a given subscription by passing an array of prices as the second argument to the `newSubscription` method:"
msgstr ""

#: docs/8.x/billing.md:block 309 (quote)
msgid "{note} You may not remove the last price on a subscription. Instead, you should simply cancel the subscription."
msgstr ""

#: docs/8.x/billing.md:block 312 (paragraph)
msgid "You may also change the prices attached to a multiprice subscription. For example, imagine a customer has a `price_basic` subscription with a `price_chat` add-on price and you want to upgrade the customer from the `price_basic` to the `price_pro` price:"
msgstr ""

#: docs/8.x/billing.md:block 321 (paragraph)
msgid "By default, Stripe will prorate charges when adding or removing prices from a multiprice subscription. If you would like to make a price adjustment without proration, you should chain the `noProrate` method onto your price operation:"
msgstr ""

#: docs/8.x/billing.md:block 327 (quote)
msgid "{note} When a subscription has multiple prices the `stripe_price` and `quantity` attributes on the `Subscription` model will be `null`. To access the individual price attributes, you should use the `items` relationship available on the `Subscription` model."
msgstr ""

#: docs/8.x/billing.md:block 362 (quote)
msgid "{note} Instead of calculating Tax Rates manually, you can [automatically calculate taxes using Stripe Tax](#tax-configuration)"
msgstr ""

#: docs/8.x/billing.md:block 364 (code)
msgid "/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array\n"
" */\n"
"public function taxRates()\n"
"{\n"
"    return ['txr_id'];\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 366 (paragraph)
msgid "If you're offering multiprice subscriptions, you may define different tax rates for each price by implementing a `priceTaxRates` method on your billable model:"
msgstr ""

#: docs/8.x/billing.md:block 367 (code)
msgid "/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array\n"
" */\n"
"public function priceTaxRates()\n"
"{\n"
"    return [\n"
"        'price_monthly' => ['txr_id'],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 368 (quote)
msgid "{note} The `taxRates` method only applies to subscription charges. If you use Cashier to make \"one off\" charges, you will need to manually specify the tax rate at that time."
msgstr ""

#: docs/8.x/billing.md:block 373 (paragraph)
msgid "This will also sync any multiprice subscription item tax rates. If your application is offering multiprice subscriptions, you should ensure that your billable model implements the `priceTaxRates` method [discussed above](#subscription-taxes)."
msgstr ""

#: docs/8.x/billing.md:block 378 (quote)
msgid "{note} These methods are also available on any `Laravel\\Cashier\\Invoice` object. However, when invoked on an `Invoice` object, the methods will determine the exemption status at the time the invoice was created."
msgstr ""

#: docs/8.x/billing.md:block 410 (quote)
msgid "{note} If the customer's subscription is not canceled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date."
msgstr ""

#: docs/8.x/billing.md:block 414 (code)
msgid "if ($user->onTrial('default')) {\n"
"    //\n"
"}\n\n"
"if ($user->subscription('default')->onTrial()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 424 (quote)
msgid "{note} Be sure to add a [date cast](/docs/{{version}}/eloquent-mutators##date-casting) for the `trial_ends_at` attribute within your billable model's class definition."
msgstr ""

#: docs/8.x/billing.md:block 439 (quote)
msgid "{tip} You may use [the Stripe CLI](https://stripe.com/docs/stripe-cli) to help test webhooks during local development."
msgstr ""

#: docs/8.x/billing.md:block 452 (quote)
msgid "{note} Make sure you protect incoming Stripe webhook requests with Cashier's included [webhook signature verification](#verifying-webhook-signatures) middleware."
msgstr ""

#: docs/8.x/billing.md:block 462 (code)
msgid "<?php\n\n"
"namespace App\\Listeners;\n\n"
"use Laravel\\Cashier\\Events\\WebhookReceived;\n\n"
"class StripeEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Stripe webhooks.\n"
"     *\n"
"     * @param  \\Laravel\\Cashier\\Events\\WebhookReceived  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(WebhookReceived $event)\n"
"    {\n"
"        if ($event->payload['type'] === 'invoice.payment_succeeded') {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 473 (quote)
msgid "{note} The `charge` method accepts the amount you would like to charge in the lowest denominator of the currency used by your application. For example, when using United States Dollars, amounts should be specified in pennies."
msgstr ""

#: docs/8.x/billing.md:block 481 (code)
msgid "try {\n"
"    $payment = $user->charge(100, $paymentMethod);\n"
"} catch (Exception $e) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 490 (paragraph)
msgid "Although the `invoiceFor` method is available for you to use, it is recommendeded that you use the `invoicePrice` method with pre-defined prices. By doing so, you will have access to better analytics and data within your Stripe dashboard regarding your sales on a per-product basis."
msgstr ""

#: docs/8.x/billing.md:block 491 (quote)
msgid "{note} The `invoicePrice` and `invoiceFor` methods will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge."
msgstr ""

#: docs/8.x/billing.md:block 514 (paragraph)
msgid "Similary, if the customer has multiple subscriptions, you can also retrieve the upcoming invoice for a specific subscription:"
msgstr ""

#: docs/8.x/billing.md:block 517 (header)
msgid "Previewing Subscription Invoice"
msgstr ""

#: docs/8.x/billing.md:block 525 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/invoice/{invoice}', function (Request $request, $invoiceId) {\n"
"    return $request->user()->downloadInvoice($invoiceId, [\n"
"        'vendor' => 'Your Company',\n"
"        'product' => 'Your Product',\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/8.x/billing.md:block 526 (paragraph)
msgid "By default, all data on the invoice is derived from the customer and invoice data stored in Stripe. However, you can customize some of this data by providing an array as the second argument to the `downloadInvoice` method. This array allows you to customize information such as your company and product details:"
msgstr ""

#: docs/8.x/billing.md:block 527 (code)
msgid "return $request->user()->downloadInvoice($invoiceId, [\n"
"    'vendor' => 'Your Company',\n"
"    'product' => 'Your Product',\n"
"    'street' => 'Main Str. 1',\n"
"    'location' => '2000 Antwerp, Belgium',\n"
"    'phone' => '+32 499 00 00 00',\n"
"    'email' => 'info@example.com',\n"
"    'url' => 'https://example.com',\n"
"    'vendorVat' => 'BE123456789',\n"
"], 'my-invoice');\n"
msgstr ""

#: docs/8.x/billing.md:block 533 (code)
msgid "use Illuminate\\Support\\Facades\\Http;\n"
"use Laravel\\Cashier\\Contracts\\InvoiceRenderer;\n"
"use Laravel\\Cashier\\Invoice;\n\n"
"class ApiInvoiceRenderer implements InvoiceRenderer\n"
"{\n"
"    /**\n"
"     * Render the given invoice and return the raw PDF bytes.\n"
"     *\n"
"     * @param  \\Laravel\\Cashier\\Invoice. $invoice\n"
"     * @param  array  $data\n"
"     * @param  array  $options\n"
"     * @return string\n"
"     */\n"
"    public function render(Invoice $invoice, array $data = [], array $options = []): string\n"
"    {\n"
"        $html = $invoice->view($data)->render();\n\n"
"        return Http::get('https://example.com/html-to-pdf', ['html' => $html])->get()->body();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/billing.md:block 548 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Stripe\\Checkout\\Session;\n"
"use Stripe\\Customer;\n\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 1], [\n"
"        'success_url' => route('checkout-success') . '?session_id={CHECKOUT_SESSION_ID}',\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"    ]);\n"
"});\n\n"
"Route::get('/checkout-success', function (Request $request) {\n"
"    $checkoutSession = $request->user()->stripe()->checkout->sessions->retrieve($request->get('session_id'));\n\n"
"    return view('checkout.success', ['checkoutSession' => $checkoutSession]);\n"
"})->name('checkout-success');\n"
msgstr ""

#: docs/8.x/billing.md:block 557 (quote)
msgid "{note} When using the `checkoutCharge` method, Stripe will always create a new product and price in your Stripe dashboard. Therefore, we recommend that you create the products up front in your Stripe dashboard and use the `checkout` method instead."
msgstr ""

#: docs/8.x/billing.md:block 560 (quote)
msgid "{note} Using Stripe Checkout for subscriptions requires you to enable the `customer.subscription.created` webhook in your Stripe dashboard. This webhook will create the subscription record in your database and store all of the relevant subscription items."
msgstr ""

#: docs/8.x/billing.md:block 567 (quote)
msgid "{note} Unfortunately Stripe Checkout does not support all subscription billing options when starting subscriptions. Using the `anchorBillingCycleOn` method on the subscription builder, setting proration behavior, or setting payment behavior will not have any effect during Stripe Checkout sessions. Please consult [the Stripe Checkout Session API documentation](https://stripe.com/docs/api/checkout/sessions/create) to review which parameters are available."
msgstr ""

#: docs/8.x/billing.md:block 581 (quote)
msgid "{note} If you have already configured [automatic tax collection](#tax-configuration) in your application's service provider then this feature will be enabled automatically and there is no need to invoke the `collectTaxIds` method."
msgstr ""

#: docs/8.x/billing.md:block 600 (quote)
msgid "{note} Before getting started, review [Stripe's guide on PSD2 and SCA](https://stripe.com/guides/strong-customer-authentication) as well as their [documentation on the new SCA APIs](https://stripe.com/docs/strong-customer-authentication)."
msgstr ""

#: docs/8.x/billing.md:block 614 (quote)
msgid "{note} Notifications will be sent even when customers are manually making a payment that requires additional confirmation. Unfortunately, there is no way for Stripe to know that the payment was done manually or \"off-session\". But, a customer will simply see a \"Payment Successful\" message if they visit the payment page after already confirming their payment. The customer will not be allowed to accidentally confirm the same payment twice and incur an accidental second charge."
msgstr ""

#: docs/8.x/billing.md:block 630 (quote)
msgid "{tip} In order to test a variety of billing scenarios, such as credit card denials and failures, you may use the vast range of [testing card numbers and tokens](https://stripe.com/docs/testing) provided by Stripe."
msgstr ""

#: docs/9.x/billing.md:block 274 (code)
msgid "use Laravel\\Cashier\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"    Cashier::keepIncompleteSubscriptionsActive();\n"
"}\n"
msgstr ""

#: docs/9.x/billing.md:block 443 (code)
msgid "if ($user->hasExpiredTrial('default')) {\n"
"    //\n"
"}\n\n"
"if ($user->subscription('default')->hasExpiredTrial()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/9.x/billing.md:block 564 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/invoice/{invoice}', function (Request $request, $invoiceId) {\n"
"    return $request->user()->downloadInvoice($invoiceId);\n"
"});\n"
msgstr ""

