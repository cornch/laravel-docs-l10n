msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-02-08 06:32+0000\n"
"PO-Revision-Date: 2022-02-08 06:39\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/packages.pot\n"
"X-Crowdin-File-ID: 113\n"

# File: docs/8.x/packages.md, line: 1
# File: docs/9.x/packages.md, line: 1
# File: docs/master/packages.md, line: 1
#. type: Title #
#, no-wrap
msgid "Package Development"
msgstr ""

# File: docs/8.x/packages.md, line: 17
# File: docs/9.x/packages.md, line: 17
# File: docs/master/packages.md, line: 17
#. type: Plain text
#, no-wrap
msgid "- [Introduction](#introduction)\n"
"    - [A Note On Facades](#a-note-on-facades)\n"
"- [Package Discovery](#package-discovery)\n"
"- [Service Providers](#service-providers)\n"
"- [Resources](#resources)\n"
"    - [Configuration](#configuration)\n"
"    - [Migrations](#migrations)\n"
"    - [Routes](#routes)\n"
"    - [Translations](#translations)\n"
"    - [Views](#views)\n"
"    - [View Components](#view-components)\n"
"- [Commands](#commands)\n"
"- [Public Assets](#public-assets)\n"
"- [Publishing File Groups](#publishing-file-groups)\n"
msgstr ""

# File: docs/8.x/packages.md, line: 19
# File: docs/9.x/packages.md, line: 19
# File: docs/master/packages.md, line: 19
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 19
# File: docs/9.x/packages.md, line: 19
# File: docs/master/packages.md, line: 19
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr ""

# File: docs/8.x/packages.md, line: 22
# File: docs/9.x/packages.md, line: 22
# File: docs/master/packages.md, line: 22
#. type: Plain text
msgid "Packages are the primary way of adding functionality to Laravel. Packages might be anything from a great way to work with dates like [Carbon](https://github.com/briannesbitt/Carbon) or a package that allows you to associate files with Eloquent models like Spatie's [Laravel Media Library](https://github.com/spatie/laravel-medialibrary)."
msgstr ""

# File: docs/8.x/packages.md, line: 24
# File: docs/9.x/packages.md, line: 24
# File: docs/master/packages.md, line: 24
#. type: Plain text
msgid "There are different types of packages. Some packages are stand-alone, meaning they work with any PHP framework. Carbon and PHPUnit are examples of stand-alone packages. Any of these packages may be used with Laravel by requiring them in your `composer.json` file."
msgstr ""

# File: docs/8.x/packages.md, line: 26
# File: docs/9.x/packages.md, line: 26
# File: docs/master/packages.md, line: 26
#. type: Plain text
msgid "On the other hand, other packages are specifically intended for use with Laravel. These packages may have routes, controllers, views, and configuration specifically intended to enhance a Laravel application. This guide primarily covers the development of those packages that are Laravel specific."
msgstr ""

# File: docs/8.x/packages.md, line: 28
# File: docs/9.x/packages.md, line: 28
# File: docs/master/packages.md, line: 28
#. type: Plain text
#, no-wrap
msgid "<a name=\"a-note-on-facades\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 28
# File: docs/9.x/packages.md, line: 28
# File: docs/master/packages.md, line: 28
#. type: Title ###
#, no-wrap
msgid "A Note On Facades"
msgstr ""

# File: docs/8.x/packages.md, line: 31
# File: docs/9.x/packages.md, line: 31
# File: docs/master/packages.md, line: 31
#. type: Plain text
msgid "When writing a Laravel application, it generally does not matter if you use contracts or facades since both provide essentially equal levels of testability. However, when writing packages, your package will not typically have access to all of Laravel's testing helpers. If you would like to be able to write your package tests as if the package were installed inside a typical Laravel application, you may use the [Orchestral Testbench](https://github.com/orchestral/testbench) package."
msgstr ""

# File: docs/8.x/packages.md, line: 33
# File: docs/9.x/packages.md, line: 33
# File: docs/master/packages.md, line: 33
#. type: Plain text
#, no-wrap
msgid "<a name=\"package-discovery\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 33
# File: docs/9.x/packages.md, line: 33
# File: docs/master/packages.md, line: 33
#. type: Title ##
#, no-wrap
msgid "Package Discovery"
msgstr ""

# File: docs/8.x/packages.md, line: 36
# File: docs/9.x/packages.md, line: 36
# File: docs/master/packages.md, line: 36
#. type: Plain text
msgid "In a Laravel application's `config/app.php` configuration file, the `providers` option defines a list of service providers that should be loaded by Laravel. When someone installs your package, you will typically want your service provider to be included in this list. Instead of requiring users to manually add your service provider to the list, you may define the provider in the `extra` section of your package's `composer.json` file. In addition to service providers, you may also list any [facades](/docs/{{version}}/facades) you would like to be registered:"
msgstr ""

# File: docs/8.x/packages.md, line: 47
#. type: Plain text
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"providers\": [\n"
"                \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n"
"            ],\n"
"            \"aliases\": {\n"
"                \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n"
"            }\n"
"        }\n"
"    },\n"
msgstr ""

# File: docs/8.x/packages.md, line: 49
# File: docs/9.x/packages.md, line: 51
# File: docs/master/packages.md, line: 51
#. type: Plain text
msgid "Once your package has been configured for discovery, Laravel will automatically register its service providers and facades when it is installed, creating a convenient installation experience for your package's users."
msgstr ""

# File: docs/8.x/packages.md, line: 51
# File: docs/9.x/packages.md, line: 53
# File: docs/master/packages.md, line: 53
#. type: Plain text
#, no-wrap
msgid "<a name=\"opting-out-of-package-discovery\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 51
# File: docs/9.x/packages.md, line: 53
# File: docs/master/packages.md, line: 53
#. type: Title ###
#, no-wrap
msgid "Opting Out Of Package Discovery"
msgstr ""

# File: docs/8.x/packages.md, line: 54
# File: docs/9.x/packages.md, line: 56
# File: docs/master/packages.md, line: 56
#. type: Plain text
msgid "If you are the consumer of a package and would like to disable package discovery for a package, you may list the package name in the `extra` section of your application's `composer.json` file:"
msgstr ""

# File: docs/8.x/packages.md, line: 62
#. type: Plain text
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"dont-discover\": [\n"
"                \"barryvdh/laravel-debugbar\"\n"
"            ]\n"
"        }\n"
"    },\n"
msgstr ""

# File: docs/8.x/packages.md, line: 64
# File: docs/9.x/packages.md, line: 68
# File: docs/master/packages.md, line: 68
#. type: Plain text
msgid "You may disable package discovery for all packages using the `*` character inside of your application's `dont-discover` directive:"
msgstr ""

# File: docs/8.x/packages.md, line: 72
#. type: Plain text
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"dont-discover\": [\n"
"                \"*\"\n"
"            ]\n"
"        }\n"
"    },\n"
msgstr ""

# File: docs/8.x/packages.md, line: 74
# File: docs/9.x/packages.md, line: 80
# File: docs/master/packages.md, line: 80
#. type: Plain text
#, no-wrap
msgid "<a name=\"service-providers\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 74
# File: docs/9.x/packages.md, line: 80
# File: docs/master/packages.md, line: 80
#. type: Title ##
#, no-wrap
msgid "Service Providers"
msgstr ""

# File: docs/8.x/packages.md, line: 77
# File: docs/9.x/packages.md, line: 83
# File: docs/master/packages.md, line: 83
#. type: Plain text
msgid "[Service providers](/docs/{{version}}/providers) are the connection point between your package and Laravel. A service provider is responsible for binding things into Laravel's [service container](/docs/{{version}}/container) and informing Laravel where to load package resources such as views, configuration, and localization files."
msgstr ""

# File: docs/8.x/packages.md, line: 79
# File: docs/9.x/packages.md, line: 85
# File: docs/master/packages.md, line: 85
#. type: Plain text
msgid "A service provider extends the `Illuminate\\Support\\ServiceProvider` class and contains two methods: `register` and `boot`. The base `ServiceProvider` class is located in the `illuminate/support` Composer package, which you should add to your own package's dependencies. To learn more about the structure and purpose of service providers, check out [their documentation](/docs/{{version}}/providers)."
msgstr ""

# File: docs/8.x/packages.md, line: 81
# File: docs/9.x/packages.md, line: 87
# File: docs/master/packages.md, line: 87
#. type: Plain text
#, no-wrap
msgid "<a name=\"resources\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 81
# File: docs/9.x/packages.md, line: 87
# File: docs/master/packages.md, line: 87
#. type: Title ##
#, no-wrap
msgid "Resources"
msgstr ""

# File: docs/8.x/packages.md, line: 84
# File: docs/9.x/packages.md, line: 90
# File: docs/master/packages.md, line: 90
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 84
# File: docs/9.x/packages.md, line: 90
# File: docs/master/packages.md, line: 90
#. type: Title ###
#, no-wrap
msgid "Configuration"
msgstr ""

# File: docs/8.x/packages.md, line: 87
# File: docs/9.x/packages.md, line: 93
# File: docs/master/packages.md, line: 93
#. type: Plain text
msgid "Typically, you will need to publish your package's configuration file to the application's `config` directory. This will allow users of your package to easily override your default configuration options. To allow your configuration files to be published, call the `publishes` method from the `boot` method of your service provider:"
msgstr ""

# File: docs/8.x/packages.md, line: 99
# File: docs/9.x/packages.md, line: 105
# File: docs/master/packages.md, line: 105
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->publishes([\n"
"            __DIR__.'/../config/courier.php' => config_path('courier.php'),\n"
"        ]);\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 101
# File: docs/9.x/packages.md, line: 107
# File: docs/master/packages.md, line: 107
#. type: Plain text
msgid "Now, when users of your package execute Laravel's `vendor:publish` command, your file will be copied to the specified publish location. Once your configuration has been published, its values may be accessed like any other configuration file:"
msgstr ""

# File: docs/8.x/packages.md, line: 103
# File: docs/9.x/packages.md, line: 109
# File: docs/master/packages.md, line: 109
#. type: Plain text
#, no-wrap
msgid "    $value = config('courier.option');\n"
msgstr ""

# File: docs/8.x/packages.md, line: 105
# File: docs/9.x/packages.md, line: 111
# File: docs/master/packages.md, line: 111
#. type: Plain text
#, no-wrap
msgid "> {note} You should not define closures in your configuration files. They can not be serialized correctly when users execute the `config:cache` Artisan command.\n"
msgstr ""

# File: docs/8.x/packages.md, line: 107
# File: docs/9.x/packages.md, line: 113
# File: docs/master/packages.md, line: 113
#. type: Plain text
#, no-wrap
msgid "<a name=\"default-package-configuration\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 107
# File: docs/9.x/packages.md, line: 113
# File: docs/master/packages.md, line: 113
#. type: Title ####
#, no-wrap
msgid "Default Package Configuration"
msgstr ""

# File: docs/8.x/packages.md, line: 110
# File: docs/9.x/packages.md, line: 116
# File: docs/master/packages.md, line: 116
#. type: Plain text
msgid "You may also merge your own package configuration file with the application's published copy. This will allow your users to define only the options they actually want to override in the published copy of the configuration file. To merge the configuration file values, use the `mergeConfigFrom` method within your service provider's `register` method."
msgstr ""

# File: docs/8.x/packages.md, line: 112
# File: docs/9.x/packages.md, line: 118
# File: docs/master/packages.md, line: 118
#. type: Plain text
msgid "The `mergeConfigFrom` method accepts the path to your package's configuration file as its first argument and the name of the application's copy of the configuration file as its second argument:"
msgstr ""

# File: docs/8.x/packages.md, line: 124
# File: docs/9.x/packages.md, line: 130
# File: docs/master/packages.md, line: 130
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->mergeConfigFrom(\n"
"            __DIR__.'/../config/courier.php', 'courier'\n"
"        );\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 126
# File: docs/9.x/packages.md, line: 132
# File: docs/master/packages.md, line: 132
#. type: Plain text
#, no-wrap
msgid "> {note} This method only merges the first level of the configuration array. If your users partially define a multi-dimensional configuration array, the missing options will not be merged.\n"
msgstr ""

# File: docs/8.x/packages.md, line: 128
# File: docs/9.x/packages.md, line: 134
# File: docs/master/packages.md, line: 134
#. type: Plain text
#, no-wrap
msgid "<a name=\"routes\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 128
# File: docs/9.x/packages.md, line: 134
# File: docs/master/packages.md, line: 134
#. type: Title ###
#, no-wrap
msgid "Routes"
msgstr ""

# File: docs/8.x/packages.md, line: 131
# File: docs/9.x/packages.md, line: 137
# File: docs/master/packages.md, line: 137
#. type: Plain text
msgid "If your package contains routes, you may load them using the `loadRoutesFrom` method. This method will automatically determine if the application's routes are cached and will not load your routes file if the routes have already been cached:"
msgstr ""

# File: docs/8.x/packages.md, line: 141
# File: docs/9.x/packages.md, line: 147
# File: docs/master/packages.md, line: 147
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 143
# File: docs/9.x/packages.md, line: 149
# File: docs/master/packages.md, line: 149
#. type: Plain text
#, no-wrap
msgid "<a name=\"migrations\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 143
# File: docs/9.x/packages.md, line: 149
# File: docs/master/packages.md, line: 149
#. type: Title ###
#, no-wrap
msgid "Migrations"
msgstr ""

# File: docs/8.x/packages.md, line: 146
# File: docs/9.x/packages.md, line: 152
# File: docs/master/packages.md, line: 152
#. type: Plain text
msgid "If your package contains [database migrations](/docs/{{version}}/migrations), you may use the `loadMigrationsFrom` method to inform Laravel how to load them. The `loadMigrationsFrom` method accepts the path to your package's migrations as its only argument:"
msgstr ""

# File: docs/8.x/packages.md, line: 156
# File: docs/9.x/packages.md, line: 162
# File: docs/master/packages.md, line: 162
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadMigrationsFrom(__DIR__.'/../database/migrations');\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 158
# File: docs/9.x/packages.md, line: 164
# File: docs/master/packages.md, line: 164
#. type: Plain text
msgid "Once your package's migrations have been registered, they will automatically be run when the `php artisan migrate` command is executed. You do not need to export them to the application's `database/migrations` directory."
msgstr ""

# File: docs/8.x/packages.md, line: 160
# File: docs/9.x/packages.md, line: 166
# File: docs/master/packages.md, line: 166
#. type: Plain text
#, no-wrap
msgid "<a name=\"translations\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 160
# File: docs/9.x/packages.md, line: 166
# File: docs/master/packages.md, line: 166
#. type: Title ###
#, no-wrap
msgid "Translations"
msgstr ""

# File: docs/8.x/packages.md, line: 163
# File: docs/9.x/packages.md, line: 169
# File: docs/master/packages.md, line: 169
#. type: Plain text
msgid "If your package contains [translation files](/docs/{{version}}/localization), you may use the `loadTranslationsFrom` method to inform Laravel how to load them. For example, if your package is named `courier`, you should add the following to your service provider's `boot` method:"
msgstr ""

# File: docs/8.x/packages.md, line: 173
# File: docs/9.x/packages.md, line: 179
# File: docs/master/packages.md, line: 179
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 175
# File: docs/9.x/packages.md, line: 181
# File: docs/master/packages.md, line: 181
#. type: Plain text
msgid "Package translations are referenced using the `package::file.line` syntax convention. So, you may load the `courier` package's `welcome` line from the `messages` file like so:"
msgstr ""

# File: docs/8.x/packages.md, line: 177
# File: docs/9.x/packages.md, line: 183
# File: docs/master/packages.md, line: 183
#. type: Plain text
#, no-wrap
msgid "    echo trans('courier::messages.welcome');\n"
msgstr ""

# File: docs/8.x/packages.md, line: 179
# File: docs/9.x/packages.md, line: 185
# File: docs/master/packages.md, line: 185
#. type: Plain text
#, no-wrap
msgid "<a name=\"publishing-translations\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 179
# File: docs/9.x/packages.md, line: 185
# File: docs/master/packages.md, line: 185
#. type: Title ####
#, no-wrap
msgid "Publishing Translations"
msgstr ""

# File: docs/8.x/packages.md, line: 182
# File: docs/9.x/packages.md, line: 188
# File: docs/master/packages.md, line: 188
#. type: Plain text
msgid "If you would like to publish your package's translations to the application's `resources/lang/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the `courier` package, you may do the following:"
msgstr ""

# File: docs/8.x/packages.md, line: 191
# File: docs/9.x/packages.md, line: 197
# File: docs/master/packages.md, line: 197
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
msgstr ""

# File: docs/8.x/packages.md, line: 196
# File: docs/9.x/packages.md, line: 202
# File: docs/master/packages.md, line: 202
#. type: Plain text
#, no-wrap
msgid "        $this->publishes([\n"
"            __DIR__.'/../resources/lang' => resource_path('lang/vendor/courier'),\n"
"        ]);\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 198
# File: docs/9.x/packages.md, line: 204
# File: docs/master/packages.md, line: 204
#. type: Plain text
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's translations will be published to the specified publish location."
msgstr ""

# File: docs/8.x/packages.md, line: 200
# File: docs/9.x/packages.md, line: 206
# File: docs/master/packages.md, line: 206
#. type: Plain text
#, no-wrap
msgid "<a name=\"views\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 200
# File: docs/9.x/packages.md, line: 206
# File: docs/master/packages.md, line: 206
#. type: Title ###
#, no-wrap
msgid "Views"
msgstr ""

# File: docs/8.x/packages.md, line: 203
# File: docs/9.x/packages.md, line: 209
# File: docs/master/packages.md, line: 209
#. type: Plain text
msgid "To register your package's [views](/docs/{{version}}/views) with Laravel, you need to tell Laravel where the views are located. You may do this using the service provider's `loadViewsFrom` method. The `loadViewsFrom` method accepts two arguments: the path to your view templates and your package's name. For example, if your package's name is `courier`, you would add the following to your service provider's `boot` method:"
msgstr ""

# File: docs/8.x/packages.md, line: 213
# File: docs/9.x/packages.md, line: 219
# File: docs/master/packages.md, line: 219
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 215
# File: docs/9.x/packages.md, line: 221
# File: docs/master/packages.md, line: 221
#. type: Plain text
msgid "Package views are referenced using the `package::view` syntax convention. So, once your view path is registered in a service provider, you may load the `dashboard` view from the `courier` package like so:"
msgstr ""

# File: docs/8.x/packages.md, line: 219
# File: docs/9.x/packages.md, line: 225
# File: docs/master/packages.md, line: 225
#. type: Plain text
#, no-wrap
msgid "    Route::get('/dashboard', function () {\n"
"        return view('courier::dashboard');\n"
"    });\n"
msgstr ""

# File: docs/8.x/packages.md, line: 221
# File: docs/9.x/packages.md, line: 227
# File: docs/master/packages.md, line: 227
#. type: Plain text
#, no-wrap
msgid "<a name=\"overriding-package-views\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 221
# File: docs/9.x/packages.md, line: 227
# File: docs/master/packages.md, line: 227
#. type: Title ####
#, no-wrap
msgid "Overriding Package Views"
msgstr ""

# File: docs/8.x/packages.md, line: 224
# File: docs/9.x/packages.md, line: 230
# File: docs/master/packages.md, line: 230
#. type: Plain text
msgid "When you use the `loadViewsFrom` method, Laravel actually registers two locations for your views: the application's `resources/views/vendor` directory and the directory you specify. So, using the `courier` package as an example, Laravel will first check if a custom version of the view has been placed in the `resources/views/vendor/courier` directory by the developer. Then, if the view has not been customized, Laravel will search the package view directory you specified in your call to `loadViewsFrom`. This makes it easy for package users to customize / override your package's views."
msgstr ""

# File: docs/8.x/packages.md, line: 226
# File: docs/9.x/packages.md, line: 232
# File: docs/master/packages.md, line: 232
#. type: Plain text
#, no-wrap
msgid "<a name=\"publishing-views\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 226
# File: docs/9.x/packages.md, line: 232
# File: docs/master/packages.md, line: 232
#. type: Title ####
#, no-wrap
msgid "Publishing Views"
msgstr ""

# File: docs/8.x/packages.md, line: 229
# File: docs/9.x/packages.md, line: 235
# File: docs/master/packages.md, line: 235
#. type: Plain text
msgid "If you would like to make your views available for publishing to the application's `resources/views/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package view paths and their desired publish locations:"
msgstr ""

# File: docs/8.x/packages.md, line: 238
# File: docs/9.x/packages.md, line: 244
# File: docs/master/packages.md, line: 244
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap the package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
msgstr ""

# File: docs/8.x/packages.md, line: 243
# File: docs/9.x/packages.md, line: 249
# File: docs/master/packages.md, line: 249
#. type: Plain text
#, no-wrap
msgid "        $this->publishes([\n"
"            __DIR__.'/../resources/views' => resource_path('views/vendor/courier'),\n"
"        ]);\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 245
# File: docs/9.x/packages.md, line: 251
# File: docs/master/packages.md, line: 251
#. type: Plain text
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's views will be copied to the specified publish location."
msgstr ""

# File: docs/8.x/packages.md, line: 247
# File: docs/9.x/packages.md, line: 253
# File: docs/master/packages.md, line: 253
#. type: Plain text
#, no-wrap
msgid "<a name=\"view-components\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 247
# File: docs/9.x/packages.md, line: 253
# File: docs/master/packages.md, line: 253
#. type: Title ###
#, no-wrap
msgid "View Components"
msgstr ""

# File: docs/8.x/packages.md, line: 250
# File: docs/9.x/packages.md, line: 256
# File: docs/master/packages.md, line: 256
#. type: Plain text
msgid "If your package contains [view components](/docs/{{version}}/blade#components), you may use the `loadViewComponentsAs` method to inform Laravel how to load them. The `loadViewComponentsAs` method accepts two arguments: the tag prefix for your view components and an array of your view component class names. For example, if your package's prefix is `courier` and you have `Alert` and `Button` view components, you would add the following to your service provider's `boot` method:"
msgstr ""

# File: docs/8.x/packages.md, line: 253
# File: docs/9.x/packages.md, line: 259
# File: docs/master/packages.md, line: 259
#. type: Plain text
#, no-wrap
msgid "    use Courier\\Components\\Alert;\n"
"    use Courier\\Components\\Button;\n"
msgstr ""

# File: docs/8.x/packages.md, line: 266
# File: docs/9.x/packages.md, line: 272
# File: docs/master/packages.md, line: 272
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadViewComponentsAs('courier', [\n"
"            Alert::class,\n"
"            Button::class,\n"
"        ]);\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 268
# File: docs/9.x/packages.md, line: 274
# File: docs/master/packages.md, line: 274
#. type: Plain text
msgid "Once your view components are registered in a service provider, you may reference them in your view like so:"
msgstr ""

# File: docs/8.x/packages.md, line: 270
#. type: Plain text
#, no-wrap
msgid "    <x-courier-alert />\n"
msgstr ""

# File: docs/8.x/packages.md, line: 272
#. type: Plain text
#, no-wrap
msgid "    <x-courier-button />\n"
msgstr ""

# File: docs/8.x/packages.md, line: 274
# File: docs/9.x/packages.md, line: 282
# File: docs/master/packages.md, line: 282
#. type: Plain text
#, no-wrap
msgid "<a name=\"anonymous-components\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 274
# File: docs/9.x/packages.md, line: 282
# File: docs/master/packages.md, line: 282
#. type: Title ####
#, no-wrap
msgid "Anonymous Components"
msgstr ""

# File: docs/8.x/packages.md, line: 277
# File: docs/9.x/packages.md, line: 285
# File: docs/master/packages.md, line: 285
#. type: Plain text
msgid "If your package contains anonymous components, they must be placed within a `components` directory of your package's \"views\" directory (as specified by `loadViewsFrom`). Then, you may render them by prefixing the component name with the package's view namespace:"
msgstr ""

# File: docs/8.x/packages.md, line: 279
#. type: Plain text
#, no-wrap
msgid "    <x-courier::alert />\n"
msgstr ""

# File: docs/8.x/packages.md, line: 281
# File: docs/9.x/packages.md, line: 291
# File: docs/master/packages.md, line: 291
#. type: Plain text
#, no-wrap
msgid "<a name=\"commands\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 281
# File: docs/9.x/packages.md, line: 291
# File: docs/master/packages.md, line: 291
#. type: Title ##
#, no-wrap
msgid "Commands"
msgstr ""

# File: docs/8.x/packages.md, line: 284
# File: docs/9.x/packages.md, line: 294
# File: docs/master/packages.md, line: 294
#. type: Plain text
msgid "To register your package's Artisan commands with Laravel, you may use the `commands` method. This method expects an array of command class names. Once the commands have been registered, you may execute them using the [Artisan CLI](/docs/{{version}}/artisan):"
msgstr ""

# File: docs/8.x/packages.md, line: 287
# File: docs/9.x/packages.md, line: 297
# File: docs/master/packages.md, line: 297
#. type: Plain text
#, no-wrap
msgid "    use Courier\\Console\\Commands\\InstallCommand;\n"
"    use Courier\\Console\\Commands\\NetworkCommand;\n"
msgstr ""

# File: docs/8.x/packages.md, line: 302
# File: docs/9.x/packages.md, line: 312
# File: docs/master/packages.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        if ($this->app->runningInConsole()) {\n"
"            $this->commands([\n"
"                InstallCommand::class,\n"
"                NetworkCommand::class,\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 304
# File: docs/9.x/packages.md, line: 314
# File: docs/master/packages.md, line: 314
#. type: Plain text
#, no-wrap
msgid "<a name=\"public-assets\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 304
# File: docs/9.x/packages.md, line: 314
# File: docs/master/packages.md, line: 314
#. type: Title ##
#, no-wrap
msgid "Public Assets"
msgstr ""

# File: docs/8.x/packages.md, line: 307
# File: docs/9.x/packages.md, line: 317
# File: docs/master/packages.md, line: 317
#. type: Plain text
msgid "Your package may have assets such as JavaScript, CSS, and images. To publish these assets to the application's `public` directory, use the service provider's `publishes` method. In this example, we will also add a `public` asset group tag, which may be used to easily publish groups of related assets:"
msgstr ""

# File: docs/8.x/packages.md, line: 319
# File: docs/9.x/packages.md, line: 329
# File: docs/master/packages.md, line: 329
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->publishes([\n"
"            __DIR__.'/../public' => public_path('vendor/courier'),\n"
"        ], 'public');\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 321
# File: docs/9.x/packages.md, line: 331
# File: docs/master/packages.md, line: 331
#. type: Plain text
msgid "Now, when your package's users execute the `vendor:publish` command, your assets will be copied to the specified publish location. Since users will typically need to overwrite the assets every time the package is updated, you may use the `--force` flag:"
msgstr ""

# File: docs/8.x/packages.md, line: 323
#. type: Plain text
#, no-wrap
msgid "    php artisan vendor:publish --tag=public --force\n"
msgstr ""

# File: docs/8.x/packages.md, line: 325
# File: docs/9.x/packages.md, line: 337
# File: docs/master/packages.md, line: 337
#. type: Plain text
#, no-wrap
msgid "<a name=\"publishing-file-groups\"></a>\n"
msgstr ""

# File: docs/8.x/packages.md, line: 325
# File: docs/9.x/packages.md, line: 337
# File: docs/master/packages.md, line: 337
#. type: Title ##
#, no-wrap
msgid "Publishing File Groups"
msgstr ""

# File: docs/8.x/packages.md, line: 328
# File: docs/9.x/packages.md, line: 340
# File: docs/master/packages.md, line: 340
#. type: Plain text
msgid "You may want to publish groups of package assets and resources separately. For instance, you might want to allow your users to publish your package's configuration files without being forced to publish your package's assets. You may do this by \"tagging\" them when calling the `publishes` method from a package's service provider. For example, let's use tags to define two publish groups for the `courier` package (`courier-config` and `courier-migrations`) in the `boot` method of the package's service provider:"
msgstr ""

# File: docs/8.x/packages.md, line: 339
# File: docs/9.x/packages.md, line: 351
# File: docs/master/packages.md, line: 351
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->publishes([\n"
"            __DIR__.'/../config/package.php' => config_path('package.php')\n"
"        ], 'courier-config');\n"
msgstr ""

# File: docs/8.x/packages.md, line: 344
# File: docs/9.x/packages.md, line: 356
# File: docs/master/packages.md, line: 356
#. type: Plain text
#, no-wrap
msgid "        $this->publishes([\n"
"            __DIR__.'/../database/migrations/' => database_path('migrations')\n"
"        ], 'courier-migrations');\n"
"    }\n"
msgstr ""

# File: docs/8.x/packages.md, line: 346
# File: docs/9.x/packages.md, line: 358
# File: docs/master/packages.md, line: 358
#. type: Plain text
msgid "Now your users may publish these groups separately by referencing their tag when executing the `vendor:publish` command:"
msgstr ""

# File: docs/8.x/packages.md, line: 347
#. type: Plain text
#, no-wrap
msgid "    php artisan vendor:publish --tag=courier-config\n"
msgstr ""

# File: docs/9.x/packages.md, line: 37
# File: docs/9.x/packages.md, line: 57
# File: docs/9.x/packages.md, line: 69
# File: docs/master/packages.md, line: 37
# File: docs/master/packages.md, line: 57
# File: docs/master/packages.md, line: 69
#. type: Code fence info string
#, no-wrap
msgid "json"
msgstr ""

# File: docs/9.x/packages.md, line: 37
# File: docs/master/packages.md, line: 37
#. type: Plain text
#, no-wrap
msgid "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"providers\": [\n"
"            \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n"
"        ],\n"
"        \"aliases\": {\n"
"            \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n"
"        }\n"
"    }\n"
"},\n"
msgstr ""

# File: docs/9.x/packages.md, line: 57
# File: docs/master/packages.md, line: 57
#. type: Plain text
#, no-wrap
msgid "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"barryvdh/laravel-debugbar\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr ""

# File: docs/9.x/packages.md, line: 69
# File: docs/master/packages.md, line: 69
#. type: Plain text
#, no-wrap
msgid "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"*\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr ""

# File: docs/9.x/packages.md, line: 275
# File: docs/9.x/packages.md, line: 286
# File: docs/master/packages.md, line: 275
# File: docs/master/packages.md, line: 286
#. type: Code fence info string
#, no-wrap
msgid "blade"
msgstr ""

# File: docs/9.x/packages.md, line: 275
# File: docs/master/packages.md, line: 275
#. type: Plain text
#, no-wrap
msgid "<x-courier-alert />\n\n"
"<x-courier-button />\n"
msgstr ""

# File: docs/9.x/packages.md, line: 286
# File: docs/master/packages.md, line: 286
#. type: Plain text
#, no-wrap
msgid "<x-courier::alert />\n"
msgstr ""

# File: docs/9.x/packages.md, line: 332
# File: docs/9.x/packages.md, line: 359
# File: docs/master/packages.md, line: 332
# File: docs/master/packages.md, line: 359
#. type: Code fence info string
#, no-wrap
msgid "shell"
msgstr ""

# File: docs/9.x/packages.md, line: 332
# File: docs/master/packages.md, line: 332
#. type: Plain text
#, no-wrap
msgid "php artisan vendor:publish --tag=public --force\n"
msgstr ""

# File: docs/9.x/packages.md, line: 359
# File: docs/master/packages.md, line: 359
#. type: Plain text
#, no-wrap
msgid "php artisan vendor:publish --tag=courier-config\n"
msgstr ""

