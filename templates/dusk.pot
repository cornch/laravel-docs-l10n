#
msgid ""
msgstr ""

#: docs/10.x/dusk.md:block 1 (header)
msgid "Laravel Dusk"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Managing ChromeDriver Installations](#managing-chromedriver-installations)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Using Other Browsers](#using-other-browsers)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Getting Started](#getting-started)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Generating Tests](#generating-tests)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Resetting the Database After Each Test](#resetting-the-database-after-each-test)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Running Tests](#running-tests)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Environment Handling](#environment-handling)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Browser Basics](#browser-basics)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Creating Browsers](#creating-browsers)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Navigation](#navigation)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Resizing Browser Windows](#resizing-browser-windows)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Browser Macros](#browser-macros)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Authentication](#authentication)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Cookies](#cookies)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Executing JavaScript](#executing-javascript)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Taking a Screenshot](#taking-a-screenshot)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Storing Console Output to Disk](#storing-console-output-to-disk)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Storing Page Source to Disk](#storing-page-source-to-disk)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Interacting With Elements](#interacting-with-elements)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Dusk Selectors](#dusk-selectors)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Text, Values, and Attributes](#text-values-and-attributes)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Interacting With Forms](#interacting-with-forms)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Attaching Files](#attaching-files)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Pressing Buttons](#pressing-buttons)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Clicking Links](#clicking-links)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Using the Keyboard](#using-the-keyboard)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Using the Mouse](#using-the-mouse)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[JavaScript Dialogs](#javascript-dialogs)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Interacting With Inline Frames](#interacting-with-iframes)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Scoping Selectors](#scoping-selectors)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Waiting for Elements](#waiting-for-elements)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Scrolling an Element Into View](#scrolling-an-element-into-view)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Pages](#pages)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Generating Pages](#generating-pages)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Configuring Pages](#configuring-pages)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Navigating to Pages](#navigating-to-pages)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Shorthand Selectors](#shorthand-selectors)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Page Methods](#page-methods)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Components](#components)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Generating Components](#generating-components)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Using Components](#using-components)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Continuous Integration](#continuous-integration)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Heroku CI](#running-tests-on-heroku-ci)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Travis CI](#running-tests-on-travis-ci)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[GitHub Actions](#running-tests-on-github-actions)"
msgstr ""

#: docs/10.x/dusk.md:block 2 (unordered list)
msgid "[Chipper CI](#running-tests-on-chipper-ci)"
msgstr ""

#: docs/10.x/dusk.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/dusk.md:block 5 (paragraph)
msgid "[Laravel Dusk](https://github.com/laravel/dusk) provides an expressive, easy-to-use browser automation and testing API. By default, Dusk does not require you to install JDK or Selenium on your local computer. Instead, Dusk uses a standalone [ChromeDriver](https://sites.google.com/chromium.org/driver) installation. However, you are free to utilize any other Selenium compatible driver you wish."
msgstr ""

#: docs/10.x/dusk.md:block 7 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/dusk.md:block 8 (paragraph)
msgid "To get started, you should install [Google Chrome](https://www.google.com/chrome) and add the `laravel/dusk` Composer dependency to your project:"
msgstr ""

#: docs/10.x/dusk.md:block 9 (code)
msgid "composer require laravel/dusk --dev\n"
msgstr ""

#: docs/10.x/dusk.md:block 10 (quote)
msgid "[!WARNING] If you are manually registering Dusk's service provider, you should **never** register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application."
msgstr ""

#: docs/10.x/dusk.md:block 11 (paragraph)
msgid "After installing the Dusk package, execute the `dusk:install` Artisan command. The `dusk:install` command will create a `tests/Browser` directory, an example Dusk test, and install the Chrome Driver binary for your operating system:"
msgstr ""

#: docs/10.x/dusk.md:block 12 (code)
msgid "php artisan dusk:install\n"
msgstr ""

#: docs/10.x/dusk.md:block 13 (paragraph)
msgid "Next, set the `APP_URL` environment variable in your application's `.env` file. This value should match the URL you use to access your application in a browser."
msgstr ""

#: docs/10.x/dusk.md:block 14 (quote)
msgid "[!NOTE] If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please also consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr ""

#: docs/10.x/dusk.md:block 16 (header)
msgid "Managing ChromeDriver Installations"
msgstr ""

#: docs/10.x/dusk.md:block 17 (paragraph)
msgid "If you would like to install a different version of ChromeDriver than what is installed by Laravel Dusk via the `dusk:install` command, you may use the `dusk:chrome-driver` command:"
msgstr ""

#: docs/10.x/dusk.md:block 18 (code)
msgid ""
"# Install the latest version of ChromeDriver for your OS...\n"
"php artisan dusk:chrome-driver\n"
"\n"
"# Install a given version of ChromeDriver for your OS...\n"
"php artisan dusk:chrome-driver 86\n"
"\n"
"# Install a given version of ChromeDriver for all supported OSs...\n"
"php artisan dusk:chrome-driver --all\n"
"\n"
"# Install the version of ChromeDriver that matches the detected version of Chrome / Chromium for your OS...\n"
"php artisan dusk:chrome-driver --detect\n"
msgstr ""

#: docs/10.x/dusk.md:block 19 (quote)
msgid "[!WARNING] Dusk requires the `chromedriver` binaries to be executable. If you're having problems running Dusk, you should ensure the binaries are executable using the following command: `chmod -R 0755 vendor/laravel/dusk/bin/`."
msgstr ""

#: docs/10.x/dusk.md:block 21 (header)
msgid "Using Other Browsers"
msgstr ""

#: docs/10.x/dusk.md:block 22 (paragraph)
msgid "By default, Dusk uses Google Chrome and a standalone [ChromeDriver](https://sites.google.com/chromium.org/driver) installation to run your browser tests. However, you may start your own Selenium server and run your tests against any browser you wish."
msgstr ""

#: docs/10.x/dusk.md:block 23 (paragraph)
msgid "To get started, open your `tests/DuskTestCase.php` file, which is the base Dusk test case for your application. Within this file, you can remove the call to the `startChromeDriver` method. This will stop Dusk from automatically starting the ChromeDriver:"
msgstr ""

#: docs/10.x/dusk.md:block 24 (code)
msgid ""
"/**\n"
" * Prepare for Dusk test execution.\n"
" *\n"
" * @beforeClass\n"
" */\n"
"public static function prepare(): void\n"
"{\n"
"    // static::startChromeDriver();\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 25 (paragraph)
msgid "Next, you may modify the `driver` method to connect to the URL and port of your choice. In addition, you may modify the \"desired capabilities\" that should be passed to the WebDriver:"
msgstr ""

#: docs/10.x/dusk.md:block 26 (code)
msgid ""
"use Facebook\\WebDriver\\Remote\\RemoteWebDriver;\n"
"\n"
"/**\n"
" * Create the RemoteWebDriver instance.\n"
" */\n"
"protected function driver(): RemoteWebDriver\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 28 (header)
msgid "Getting Started"
msgstr ""

#: docs/10.x/dusk.md:block 30 (header)
msgid "Generating Tests"
msgstr ""

#: docs/10.x/dusk.md:block 31 (paragraph)
msgid "To generate a Dusk test, use the `dusk:make` Artisan command. The generated test will be placed in the `tests/Browser` directory:"
msgstr ""

#: docs/10.x/dusk.md:block 32 (code)
msgid "php artisan dusk:make LoginTest\n"
msgstr ""

#: docs/10.x/dusk.md:block 34 (header)
msgid "Resetting the Database After Each Test"
msgstr ""

#: docs/10.x/dusk.md:block 35 (paragraph)
msgid "Most of the tests you write will interact with pages that retrieve data from your application's database; however, your Dusk tests should never use the `RefreshDatabase` trait. The `RefreshDatabase` trait leverages database transactions which will not be applicable or available across HTTP requests. Instead, you have two options: the `DatabaseMigrations` trait and the `DatabaseTruncation` trait."
msgstr ""

#: docs/10.x/dusk.md:block 37 (header)
msgid "Using Database Migrations"
msgstr ""

#: docs/10.x/dusk.md:block 38 (paragraph)
msgid "The `DatabaseMigrations` trait will run your database migrations before each test. However, dropping and re-creating your database tables for each test is typically slower than truncating the tables:"
msgstr ""

#: docs/10.x/dusk.md:block 39 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 40 (quote)
msgid "[!WARNING] SQLite in-memory databases may not be used when executing Dusk tests. Since the browser executes within its own process, it will not be able to access the in-memory databases of other processes."
msgstr ""

#: docs/10.x/dusk.md:block 42 (header)
msgid "Using Database Truncation"
msgstr ""

#: docs/10.x/dusk.md:block 43 (paragraph)
msgid "Before using the `DatabaseTruncation` trait, you must install the `doctrine/dbal` package using the Composer package manager:"
msgstr ""

#: docs/10.x/dusk.md:block 44 (code)
msgid "composer require --dev doctrine/dbal\n"
msgstr ""

#: docs/10.x/dusk.md:block 45 (paragraph)
msgid "The `DatabaseTruncation` trait will migrate your database on the first test in order to ensure your database tables have been properly created. However, on subsequent tests, the database's tables will simply be truncated - providing a speed boost over re-running all of your database migrations:"
msgstr ""

#: docs/10.x/dusk.md:block 46 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseTruncation;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseTruncation;\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 47 (paragraph)
msgid "By default, this trait will truncate all tables except the `migrations` table. If you would like to customize the tables that should be truncated, you may define a `$tablesToTruncate` property on your test class:"
msgstr ""

#: docs/10.x/dusk.md:block 48 (code)
msgid ""
"/**\n"
" * Indicates which tables should be truncated.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $tablesToTruncate = ['users'];\n"
msgstr ""

#: docs/10.x/dusk.md:block 49 (paragraph)
msgid "Alternatively, you may define an `$exceptTables` property on your test class to specify which tables should be excluded from truncation:"
msgstr ""

#: docs/10.x/dusk.md:block 50 (code)
msgid ""
"/**\n"
" * Indicates which tables should be excluded from truncation.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $exceptTables = ['users'];\n"
msgstr ""

#: docs/10.x/dusk.md:block 51 (paragraph)
msgid "To specify the database connections that should have their tables truncated, you may define a `$connectionsToTruncate` property on your test class:"
msgstr ""

#: docs/10.x/dusk.md:block 52 (code)
msgid ""
"/**\n"
" * Indicates which connections should have their tables truncated.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $connectionsToTruncate = ['mysql'];\n"
msgstr ""

#: docs/10.x/dusk.md:block 53 (paragraph)
msgid "If you would like to execute code before or after database truncation is performed, you may define `beforeTruncatingDatabase` or `afterTruncatingDatabase` methods on your test class:"
msgstr ""

#: docs/10.x/dusk.md:block 54 (code)
msgid ""
"/**\n"
" * Perform any work that should take place before the database has started truncating.\n"
" */\n"
"protected function beforeTruncatingDatabase(): void\n"
"{\n"
"    //\n"
"}\n"
"\n"
"/**\n"
" * Perform any work that should take place after the database has finished truncating.\n"
" */\n"
"protected function afterTruncatingDatabase(): void\n"
"{\n"
"    //\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 56 (header)
msgid "Running Tests"
msgstr ""

#: docs/10.x/dusk.md:block 57 (paragraph)
msgid "To run your browser tests, execute the `dusk` Artisan command:"
msgstr ""

#: docs/10.x/dusk.md:block 58 (code)
msgid "php artisan dusk\n"
msgstr ""

#: docs/10.x/dusk.md:block 59 (paragraph)
msgid "If you had test failures the last time you ran the `dusk` command, you may save time by re-running the failing tests first using the `dusk:fails` command:"
msgstr ""

#: docs/10.x/dusk.md:block 60 (code)
msgid "php artisan dusk:fails\n"
msgstr ""

#: docs/10.x/dusk.md:block 61 (paragraph)
msgid "The `dusk` command accepts any argument that is normally accepted by the PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://docs.phpunit.de/en/10.5/annotations.html#group):"
msgstr ""

#: docs/10.x/dusk.md:block 62 (code)
msgid "php artisan dusk --group=foo\n"
msgstr ""

#: docs/10.x/dusk.md:block 63 (quote)
msgid "[!NOTE] If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr ""

#: docs/10.x/dusk.md:block 65 (header)
msgid "Manually Starting ChromeDriver"
msgstr ""

#: docs/10.x/dusk.md:block 66 (paragraph)
msgid "By default, Dusk will automatically attempt to start ChromeDriver. If this does not work for your particular system, you may manually start ChromeDriver before running the `dusk` command. If you choose to start ChromeDriver manually, you should comment out the following line of your `tests/DuskTestCase.php` file:"
msgstr ""

#: docs/10.x/dusk.md:block 68 (paragraph)
msgid "In addition, if you start ChromeDriver on a port other than 9515, you should modify the `driver` method of the same class to reflect the correct port:"
msgstr ""

#: docs/10.x/dusk.md:block 69 (code)
msgid ""
"use Facebook\\WebDriver\\Remote\\RemoteWebDriver;\n"
"\n"
"/**\n"
" * Create the RemoteWebDriver instance.\n"
" */\n"
"protected function driver(): RemoteWebDriver\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:9515', DesiredCapabilities::chrome()\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 71 (header)
msgid "Environment Handling"
msgstr ""

#: docs/10.x/dusk.md:block 72 (paragraph)
msgid "To force Dusk to use its own environment file when running tests, create a `.env.dusk.{environment}` file in the root of your project. For example, if you will be initiating the `dusk` command from your `local` environment, you should create a `.env.dusk.local` file."
msgstr ""

#: docs/10.x/dusk.md:block 73 (paragraph)
msgid "When running tests, Dusk will back-up your `.env` file and rename your Dusk environment to `.env`. Once the tests have completed, your `.env` file will be restored."
msgstr ""

#: docs/10.x/dusk.md:block 75 (header)
msgid "Browser Basics"
msgstr ""

#: docs/10.x/dusk.md:block 77 (header)
msgid "Creating Browsers"
msgstr ""

#: docs/10.x/dusk.md:block 78 (paragraph)
msgid "To get started, let's write a test that verifies we can log into our application. After generating a test, we can modify it to navigate to the login page, enter some credentials, and click the \"Login\" button. To create a browser instance, you may call the `browse` method from within your Dusk test:"
msgstr ""

#: docs/10.x/dusk.md:block 79 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"\n"
"    /**\n"
"     * A basic browser test example.\n"
"     */\n"
"    public function test_basic_example(): void\n"
"    {\n"
"        $user = User::factory()->create([\n"
"            'email' => 'taylor@laravel.com',\n"
"        ]);\n"
"\n"
"        $this->browse(function (Browser $browser) use ($user) {\n"
"            $browser->visit('/login')\n"
"                    ->type('email', $user->email)\n"
"                    ->type('password', 'password')\n"
"                    ->press('Login')\n"
"                    ->assertPathIs('/home');\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 80 (paragraph)
msgid "As you can see in the example above, the `browse` method accepts a closure. A browser instance will automatically be passed to this closure by Dusk and is the main object used to interact with and make assertions against your application."
msgstr ""

#: docs/10.x/dusk.md:block 82 (header)
msgid "Creating Multiple Browsers"
msgstr ""

#: docs/10.x/dusk.md:block 83 (paragraph)
msgid "Sometimes you may need multiple browsers in order to properly carry out a test. For example, multiple browsers may be needed to test a chat screen that interacts with websockets. To create multiple browsers, simply add more browser arguments to the signature of the closure given to the `browse` method:"
msgstr ""

#: docs/10.x/dusk.md:block 84 (code)
msgid ""
"$this->browse(function (Browser $first, Browser $second) {\n"
"    $first->loginAs(User::find(1))\n"
"          ->visit('/home')\n"
"          ->waitForText('Message');\n"
"\n"
"    $second->loginAs(User::find(2))\n"
"           ->visit('/home')\n"
"           ->waitForText('Message')\n"
"           ->type('message', 'Hey Taylor')\n"
"           ->press('Send');\n"
"\n"
"    $first->waitForText('Hey Taylor')\n"
"          ->assertSee('Jeffrey Way');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 86 (header)
msgid "Navigation"
msgstr ""

#: docs/10.x/dusk.md:block 87 (paragraph)
msgid "The `visit` method may be used to navigate to a given URI within your application:"
msgstr ""

#: docs/10.x/dusk.md:block 88 (code)
msgid "$browser->visit('/login');\n"
msgstr ""

#: docs/10.x/dusk.md:block 89 (paragraph)
msgid "You may use the `visitRoute` method to navigate to a [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#: docs/10.x/dusk.md:block 90 (code)
msgid "$browser->visitRoute('login');\n"
msgstr ""

#: docs/10.x/dusk.md:block 91 (paragraph)
msgid "You may navigate \"back\" and \"forward\" using the `back` and `forward` methods:"
msgstr ""

#: docs/10.x/dusk.md:block 92 (code)
msgid ""
"$browser->back();\n"
"\n"
"$browser->forward();\n"
msgstr ""

#: docs/10.x/dusk.md:block 93 (paragraph)
msgid "You may use the `refresh` method to refresh the page:"
msgstr ""

#: docs/10.x/dusk.md:block 94 (code)
msgid "$browser->refresh();\n"
msgstr ""

#: docs/10.x/dusk.md:block 96 (header)
msgid "Resizing Browser Windows"
msgstr ""

#: docs/10.x/dusk.md:block 97 (paragraph)
msgid "You may use the `resize` method to adjust the size of the browser window:"
msgstr ""

#: docs/10.x/dusk.md:block 98 (code)
msgid "$browser->resize(1920, 1080);\n"
msgstr ""

#: docs/10.x/dusk.md:block 99 (paragraph)
msgid "The `maximize` method may be used to maximize the browser window:"
msgstr ""

#: docs/10.x/dusk.md:block 100 (code)
msgid "$browser->maximize();\n"
msgstr ""

#: docs/10.x/dusk.md:block 101 (paragraph)
msgid "The `fitContent` method will resize the browser window to match the size of its content:"
msgstr ""

#: docs/10.x/dusk.md:block 102 (code)
msgid "$browser->fitContent();\n"
msgstr ""

#: docs/10.x/dusk.md:block 103 (paragraph)
msgid "When a test fails, Dusk will automatically resize the browser to fit the content prior to taking a screenshot. You may disable this feature by calling the `disableFitOnFailure` method within your test:"
msgstr ""

#: docs/10.x/dusk.md:block 104 (code)
msgid "$browser->disableFitOnFailure();\n"
msgstr ""

#: docs/10.x/dusk.md:block 105 (paragraph)
msgid "You may use the `move` method to move the browser window to a different position on your screen:"
msgstr ""

#: docs/10.x/dusk.md:block 106 (code)
msgid "$browser->move($x = 100, $y = 100);\n"
msgstr ""

#: docs/10.x/dusk.md:block 108 (header)
msgid "Browser Macros"
msgstr ""

#: docs/10.x/dusk.md:block 109 (paragraph)
msgid "If you would like to define a custom browser method that you can re-use in a variety of your tests, you may use the `macro` method on the `Browser` class. Typically, you should call this method from a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#: docs/10.x/dusk.md:block 110 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"class DuskServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register Dusk's browser macros.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Browser::macro('scrollToElement', function (string $element = null) {\n"
"            $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n"
"\n"
"            return $this;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 111 (paragraph)
msgid "The `macro` function accepts a name as its first argument, and a closure as its second. The macro's closure will be executed when calling the macro as a method on a `Browser` instance:"
msgstr ""

#: docs/10.x/dusk.md:block 112 (code)
msgid ""
"$this->browse(function (Browser $browser) use ($user) {\n"
"    $browser->visit('/pay')\n"
"            ->scrollToElement('#credit-card-details')\n"
"            ->assertSee('Enter Credit Card Details');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 114 (header)
msgid "Authentication"
msgstr ""

#: docs/10.x/dusk.md:block 115 (paragraph)
msgid "Often, you will be testing pages that require authentication. You can use Dusk's `loginAs` method in order to avoid interacting with your application's login screen during every test. The `loginAs` method accepts a primary key associated with your authenticatable model or an authenticatable model instance:"
msgstr ""

#: docs/10.x/dusk.md:block 116 (code)
msgid ""
"use App\\Models\\User;\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"$this->browse(function (Browser $browser) {\n"
"    $browser->loginAs(User::find(1))\n"
"          ->visit('/home');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 117 (quote)
msgid "[!WARNING] After using the `loginAs` method, the user session will be maintained for all tests within the file."
msgstr ""

#: docs/10.x/dusk.md:block 119 (header)
msgid "Cookies"
msgstr ""

#: docs/10.x/dusk.md:block 120 (paragraph)
msgid "You may use the `cookie` method to get or set an encrypted cookie's value. By default, all of the cookies created by Laravel are encrypted:"
msgstr ""

#: docs/10.x/dusk.md:block 121 (code)
msgid ""
"$browser->cookie('name');\n"
"\n"
"$browser->cookie('name', 'Taylor');\n"
msgstr ""

#: docs/10.x/dusk.md:block 122 (paragraph)
msgid "You may use the `plainCookie` method to get or set an unencrypted cookie's value:"
msgstr ""

#: docs/10.x/dusk.md:block 123 (code)
msgid ""
"$browser->plainCookie('name');\n"
"\n"
"$browser->plainCookie('name', 'Taylor');\n"
msgstr ""

#: docs/10.x/dusk.md:block 124 (paragraph)
msgid "You may use the `deleteCookie` method to delete the given cookie:"
msgstr ""

#: docs/10.x/dusk.md:block 125 (code)
msgid "$browser->deleteCookie('name');\n"
msgstr ""

#: docs/10.x/dusk.md:block 127 (header)
msgid "Executing JavaScript"
msgstr ""

#: docs/10.x/dusk.md:block 128 (paragraph)
msgid "You may use the `script` method to execute arbitrary JavaScript statements within the browser:"
msgstr ""

#: docs/10.x/dusk.md:block 129 (code)
msgid ""
"$browser->script('document.documentElement.scrollTop = 0');\n"
"\n"
"$browser->script([\n"
"    'document.body.scrollTop = 0',\n"
"    'document.documentElement.scrollTop = 0',\n"
"]);\n"
"\n"
"$output = $browser->script('return window.location.pathname');\n"
msgstr ""

#: docs/10.x/dusk.md:block 131 (header)
msgid "Taking a Screenshot"
msgstr ""

#: docs/10.x/dusk.md:block 132 (paragraph)
msgid "You may use the `screenshot` method to take a screenshot and store it with the given filename. All screenshots will be stored within the `tests/Browser/screenshots` directory:"
msgstr ""

#: docs/10.x/dusk.md:block 133 (code)
msgid "$browser->screenshot('filename');\n"
msgstr ""

#: docs/10.x/dusk.md:block 134 (paragraph)
msgid "The `responsiveScreenshots` method may be used to take a series of screenshots at various breakpoints:"
msgstr ""

#: docs/10.x/dusk.md:block 135 (code)
msgid "$browser->responsiveScreenshots('filename');\n"
msgstr ""

#: docs/10.x/dusk.md:block 137 (header)
msgid "Storing Console Output to Disk"
msgstr ""

#: docs/10.x/dusk.md:block 138 (paragraph)
msgid "You may use the `storeConsoleLog` method to write the current browser's console output to disk with the given filename. Console output will be stored within the `tests/Browser/console` directory:"
msgstr ""

#: docs/10.x/dusk.md:block 139 (code)
msgid "$browser->storeConsoleLog('filename');\n"
msgstr ""

#: docs/10.x/dusk.md:block 141 (header)
msgid "Storing Page Source to Disk"
msgstr ""

#: docs/10.x/dusk.md:block 142 (paragraph)
msgid "You may use the `storeSource` method to write the current page's source to disk with the given filename. The page source will be stored within the `tests/Browser/source` directory:"
msgstr ""

#: docs/10.x/dusk.md:block 143 (code)
msgid "$browser->storeSource('filename');\n"
msgstr ""

#: docs/10.x/dusk.md:block 145 (header)
msgid "Interacting With Elements"
msgstr ""

#: docs/10.x/dusk.md:block 147 (header)
msgid "Dusk Selectors"
msgstr ""

#: docs/10.x/dusk.md:block 148 (paragraph)
msgid "Choosing good CSS selectors for interacting with elements is one of the hardest parts of writing Dusk tests. Over time, frontend changes can cause CSS selectors like the following to break your tests:"
msgstr ""

#: docs/10.x/dusk.md:block 149 (code)
msgid ""
"// HTML...\n"
"\n"
"<button>Login</button>\n"
"\n"
"// Test...\n"
"\n"
"$browser->click('.login-page .container div > button');\n"
msgstr ""

#: docs/10.x/dusk.md:block 150 (paragraph)
msgid "Dusk selectors allow you to focus on writing effective tests rather than remembering CSS selectors. To define a selector, add a `dusk` attribute to your HTML element. Then, when interacting with a Dusk browser, prefix the selector with `@` to manipulate the attached element within your test:"
msgstr ""

#: docs/10.x/dusk.md:block 151 (code)
msgid ""
"// HTML...\n"
"\n"
"<button dusk=\"login-button\">Login</button>\n"
"\n"
"// Test...\n"
"\n"
"$browser->click('@login-button');\n"
msgstr ""

#: docs/10.x/dusk.md:block 152 (paragraph)
msgid "If desired, you may customize the HTML attribute that the Dusk selector utilizes via the `selectorHtmlAttribute` method. Typically, this method should be called from the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/10.x/dusk.md:block 153 (code)
msgid ""
"use Laravel\\Dusk\\Dusk;\n"
"\n"
"Dusk::selectorHtmlAttribute('data-dusk');\n"
msgstr ""

#: docs/10.x/dusk.md:block 155 (header)
msgid "Text, Values, and Attributes"
msgstr ""

#: docs/10.x/dusk.md:block 157 (header)
msgid "Retrieving and Setting Values"
msgstr ""

#: docs/10.x/dusk.md:block 158 (paragraph)
msgid "Dusk provides several methods for interacting with the current value, display text, and attributes of elements on the page. For example, to get the \"value\" of an element that matches a given CSS or Dusk selector, use the `value` method:"
msgstr ""

#: docs/10.x/dusk.md:block 159 (code)
msgid ""
"// Retrieve the value...\n"
"$value = $browser->value('selector');\n"
"\n"
"// Set the value...\n"
"$browser->value('selector', 'value');\n"
msgstr ""

#: docs/10.x/dusk.md:block 160 (paragraph)
msgid "You may use the `inputValue` method to get the \"value\" of an input element that has a given field name:"
msgstr ""

#: docs/10.x/dusk.md:block 161 (code)
msgid "$value = $browser->inputValue('field');\n"
msgstr ""

#: docs/10.x/dusk.md:block 163 (header)
msgid "Retrieving Text"
msgstr ""

#: docs/10.x/dusk.md:block 164 (paragraph)
msgid "The `text` method may be used to retrieve the display text of an element that matches the given selector:"
msgstr ""

#: docs/10.x/dusk.md:block 165 (code)
msgid "$text = $browser->text('selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 167 (header)
msgid "Retrieving Attributes"
msgstr ""

#: docs/10.x/dusk.md:block 168 (paragraph)
msgid "Finally, the `attribute` method may be used to retrieve the value of an attribute of an element matching the given selector:"
msgstr ""

#: docs/10.x/dusk.md:block 169 (code)
msgid "$attribute = $browser->attribute('selector', 'value');\n"
msgstr ""

#: docs/10.x/dusk.md:block 171 (header)
msgid "Interacting With Forms"
msgstr ""

#: docs/10.x/dusk.md:block 173 (header)
msgid "Typing Values"
msgstr ""

#: docs/10.x/dusk.md:block 174 (paragraph)
msgid "Dusk provides a variety of methods for interacting with forms and input elements. First, let's take a look at an example of typing text into an input field:"
msgstr ""

#: docs/10.x/dusk.md:block 175 (code)
msgid "$browser->type('email', 'taylor@laravel.com');\n"
msgstr ""

#: docs/10.x/dusk.md:block 176 (paragraph)
msgid "Note that, although the method accepts one if necessary, we are not required to pass a CSS selector into the `type` method. If a CSS selector is not provided, Dusk will search for an `input` or `textarea` field with the given `name` attribute."
msgstr ""

#: docs/10.x/dusk.md:block 177 (paragraph)
msgid "To append text to a field without clearing its content, you may use the `append` method:"
msgstr ""

#: docs/10.x/dusk.md:block 178 (code)
msgid ""
"$browser->type('tags', 'foo')\n"
"        ->append('tags', ', bar, baz');\n"
msgstr ""

#: docs/10.x/dusk.md:block 179 (paragraph)
msgid "You may clear the value of an input using the `clear` method:"
msgstr ""

#: docs/10.x/dusk.md:block 180 (code)
msgid "$browser->clear('email');\n"
msgstr ""

#: docs/10.x/dusk.md:block 181 (paragraph)
msgid "You can instruct Dusk to type slowly using the `typeSlowly` method. By default, Dusk will pause for 100 milliseconds between key presses. To customize the amount of time between key presses, you may pass the appropriate number of milliseconds as the third argument to the method:"
msgstr ""

#: docs/10.x/dusk.md:block 182 (code)
msgid ""
"$browser->typeSlowly('mobile', '+1 (202) 555-5555');\n"
"\n"
"$browser->typeSlowly('mobile', '+1 (202) 555-5555', 300);\n"
msgstr ""

#: docs/10.x/dusk.md:block 183 (paragraph)
msgid "You may use the `appendSlowly` method to append text slowly:"
msgstr ""

#: docs/10.x/dusk.md:block 184 (code)
msgid ""
"$browser->type('tags', 'foo')\n"
"        ->appendSlowly('tags', ', bar, baz');\n"
msgstr ""

#: docs/10.x/dusk.md:block 186 (header)
msgid "Dropdowns"
msgstr ""

#: docs/10.x/dusk.md:block 187 (paragraph)
msgid "To select a value available on a `select` element, you may use the `select` method. Like the `type` method, the `select` method does not require a full CSS selector. When passing a value to the `select` method, you should pass the underlying option value instead of the display text:"
msgstr ""

#: docs/10.x/dusk.md:block 188 (code)
msgid "$browser->select('size', 'Large');\n"
msgstr ""

#: docs/10.x/dusk.md:block 189 (paragraph)
msgid "You may select a random option by omitting the second argument:"
msgstr ""

#: docs/10.x/dusk.md:block 190 (code)
msgid "$browser->select('size');\n"
msgstr ""

#: docs/10.x/dusk.md:block 191 (paragraph)
msgid "By providing an array as the second argument to the `select` method, you can instruct the method to select multiple options:"
msgstr ""

#: docs/10.x/dusk.md:block 192 (code)
msgid "$browser->select('categories', ['Art', 'Music']);\n"
msgstr ""

#: docs/10.x/dusk.md:block 194 (header)
msgid "Checkboxes"
msgstr ""

#: docs/10.x/dusk.md:block 195 (paragraph)
msgid "To \"check\" a checkbox input, you may use the `check` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a checkbox with a matching `name` attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 196 (code)
msgid "$browser->check('terms');\n"
msgstr ""

#: docs/10.x/dusk.md:block 197 (paragraph)
msgid "The `uncheck` method may be used to \"uncheck\" a checkbox input:"
msgstr ""

#: docs/10.x/dusk.md:block 198 (code)
msgid "$browser->uncheck('terms');\n"
msgstr ""

#: docs/10.x/dusk.md:block 200 (header)
msgid "Radio Buttons"
msgstr ""

#: docs/10.x/dusk.md:block 201 (paragraph)
msgid "To \"select\" a `radio` input option, you may use the `radio` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `radio` input with matching `name` and `value` attributes:"
msgstr ""

#: docs/10.x/dusk.md:block 202 (code)
msgid "$browser->radio('size', 'large');\n"
msgstr ""

#: docs/10.x/dusk.md:block 204 (header)
msgid "Attaching Files"
msgstr ""

#: docs/10.x/dusk.md:block 205 (paragraph)
msgid "The `attach` method may be used to attach a file to a `file` input element. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `file` input with a matching `name` attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 206 (code)
msgid "$browser->attach('photo', __DIR__.'/photos/mountains.png');\n"
msgstr ""

#: docs/10.x/dusk.md:block 207 (quote)
msgid "[!WARNING] The attach function requires the `Zip` PHP extension to be installed and enabled on your server."
msgstr ""

#: docs/10.x/dusk.md:block 209 (header)
msgid "Pressing Buttons"
msgstr ""

#: docs/10.x/dusk.md:block 210 (paragraph)
msgid "The `press` method may be used to click a button element on the page. The argument given to the `press` method may be either the display text of the button or a CSS / Dusk selector:"
msgstr ""

#: docs/10.x/dusk.md:block 211 (code)
msgid "$browser->press('Login');\n"
msgstr ""

#: docs/10.x/dusk.md:block 212 (paragraph)
msgid "When submitting forms, many applications disable the form's submission button after it is pressed and then re-enable the button when the form submission's HTTP request is complete. To press a button and wait for the button to be re-enabled, you may use the `pressAndWaitFor` method:"
msgstr ""

#: docs/10.x/dusk.md:block 213 (code)
msgid ""
"// Press the button and wait a maximum of 5 seconds for it to be enabled...\n"
"$browser->pressAndWaitFor('Save');\n"
"\n"
"// Press the button and wait a maximum of 1 second for it to be enabled...\n"
"$browser->pressAndWaitFor('Save', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 215 (header)
msgid "Clicking Links"
msgstr ""

#: docs/10.x/dusk.md:block 216 (paragraph)
msgid "To click a link, you may use the `clickLink` method on the browser instance. The `clickLink` method will click the link that has the given display text:"
msgstr ""

#: docs/10.x/dusk.md:block 217 (code)
msgid "$browser->clickLink($linkText);\n"
msgstr ""

#: docs/10.x/dusk.md:block 218 (paragraph)
msgid "You may use the `seeLink` method to determine if a link with the given display text is visible on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 219 (code)
msgid ""
"if ($browser->seeLink($linkText)) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 220 (quote)
msgid "[!WARNING] These methods interact with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test's duration."
msgstr ""

#: docs/10.x/dusk.md:block 222 (header)
msgid "Using the Keyboard"
msgstr ""

#: docs/10.x/dusk.md:block 223 (paragraph)
msgid "The `keys` method allows you to provide more complex input sequences to a given element than normally allowed by the `type` method. For example, you may instruct Dusk to hold modifier keys while entering values. In this example, the `shift` key will be held while `taylor` is entered into the element matching the given selector. After `taylor` is typed, `swift` will be typed without any modifier keys:"
msgstr ""

#: docs/10.x/dusk.md:block 224 (code)
msgid "$browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n"
msgstr ""

#: docs/10.x/dusk.md:block 225 (paragraph)
msgid "Another valuable use case for the `keys` method is sending a \"keyboard shortcut\" combination to the primary CSS selector for your application:"
msgstr ""

#: docs/10.x/dusk.md:block 226 (code)
msgid "$browser->keys('.app', ['{command}', 'j']);\n"
msgstr ""

#: docs/10.x/dusk.md:block 227 (quote)
msgid "[!NOTE] All modifier keys such as `{command}` are wrapped in `{}` characters, and match the constants defined in the `Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php)."
msgstr ""

#: docs/10.x/dusk.md:block 229 (header)
msgid "Fluent Keyboard Interactions"
msgstr ""

#: docs/10.x/dusk.md:block 230 (paragraph)
msgid "Dusk also provides a `withKeyboard` method, allowing you to fluently perform complex keyboard interactions via the `Laravel\\Dusk\\Keyboard` class. The `Keyboard` class provides `press`, `release`, `type`, and `pause` methods:"
msgstr ""

#: docs/10.x/dusk.md:block 231 (code)
msgid ""
"use Laravel\\Dusk\\Keyboard;\n"
"\n"
"$browser->withKeyboard(function (Keyboard $keyboard) {\n"
"    $keyboard->press('c')\n"
"        ->pause(1000)\n"
"        ->release('c')\n"
"        ->type(['c', 'e', 'o']);\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 233 (header)
msgid "Keyboard Macros"
msgstr ""

#: docs/10.x/dusk.md:block 234 (paragraph)
msgid "If you would like to define custom keyboard interactions that you can easily re-use throughout your test suite, you may use the `macro` method provided by the `Keyboard` class. Typically, you should call this method from a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#: docs/10.x/dusk.md:block 235 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Facebook\\WebDriver\\WebDriverKeys;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Dusk\\Keyboard;\n"
"use Laravel\\Dusk\\OperatingSystem;\n"
"\n"
"class DuskServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register Dusk's browser macros.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Keyboard::macro('copy', function (string $element = null) {\n"
"            $this->type([\n"
"                OperatingSystem::onMac() ? WebDriverKeys::META : WebDriverKeys::CONTROL, 'c',\n"
"            ]);\n"
"\n"
"            return $this;\n"
"        });\n"
"\n"
"        Keyboard::macro('paste', function (string $element = null) {\n"
"            $this->type([\n"
"                OperatingSystem::onMac() ? WebDriverKeys::META : WebDriverKeys::CONTROL, 'v',\n"
"            ]);\n"
"\n"
"            return $this;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 236 (paragraph)
msgid "The `macro` function accepts a name as its first argument and a closure as its second. The macro's closure will be executed when calling the macro as a method on a `Keyboard` instance:"
msgstr ""

#: docs/10.x/dusk.md:block 237 (code)
msgid ""
"$browser->click('@textarea')\n"
"    ->withKeyboard(fn (Keyboard $keyboard) => $keyboard->copy())\n"
"    ->click('@another-textarea')\n"
"    ->withKeyboard(fn (Keyboard $keyboard) => $keyboard->paste());\n"
msgstr ""

#: docs/10.x/dusk.md:block 239 (header)
msgid "Using the Mouse"
msgstr ""

#: docs/10.x/dusk.md:block 241 (header)
msgid "Clicking on Elements"
msgstr ""

#: docs/10.x/dusk.md:block 242 (paragraph)
msgid "The `click` method may be used to click on an element matching the given CSS or Dusk selector:"
msgstr ""

#: docs/10.x/dusk.md:block 243 (code)
msgid "$browser->click('.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 244 (paragraph)
msgid "The `clickAtXPath` method may be used to click on an element matching the given XPath expression:"
msgstr ""

#: docs/10.x/dusk.md:block 245 (code)
msgid "$browser->clickAtXPath('//div[@class = \"selector\"]');\n"
msgstr ""

#: docs/10.x/dusk.md:block 246 (paragraph)
msgid "The `clickAtPoint` method may be used to click on the topmost element at a given pair of coordinates relative to the viewable area of the browser:"
msgstr ""

#: docs/10.x/dusk.md:block 247 (code)
msgid "$browser->clickAtPoint($x = 0, $y = 0);\n"
msgstr ""

#: docs/10.x/dusk.md:block 248 (paragraph)
msgid "The `doubleClick` method may be used to simulate the double click of a mouse:"
msgstr ""

#: docs/10.x/dusk.md:block 249 (code)
msgid ""
"$browser->doubleClick();\n"
"\n"
"$browser->doubleClick('.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 250 (paragraph)
msgid "The `rightClick` method may be used to simulate the right click of a mouse:"
msgstr ""

#: docs/10.x/dusk.md:block 251 (code)
msgid ""
"$browser->rightClick();\n"
"\n"
"$browser->rightClick('.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 252 (paragraph)
msgid "The `clickAndHold` method may be used to simulate a mouse button being clicked and held down. A subsequent call to the `releaseMouse` method will undo this behavior and release the mouse button:"
msgstr ""

#: docs/10.x/dusk.md:block 253 (code)
msgid ""
"$browser->clickAndHold('.selector');\n"
"\n"
"$browser->clickAndHold()\n"
"        ->pause(1000)\n"
"        ->releaseMouse();\n"
msgstr ""

#: docs/10.x/dusk.md:block 254 (paragraph)
msgid "The `controlClick` method may be used to simulate the `ctrl+click` event within the browser:"
msgstr ""

#: docs/10.x/dusk.md:block 255 (code)
msgid ""
"$browser->controlClick();\n"
"\n"
"$browser->controlClick('.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 257 (header)
msgid "Mouseover"
msgstr ""

#: docs/10.x/dusk.md:block 258 (paragraph)
msgid "The `mouseover` method may be used when you need to move the mouse over an element matching the given CSS or Dusk selector:"
msgstr ""

#: docs/10.x/dusk.md:block 259 (code)
msgid "$browser->mouseover('.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 261 (header)
msgid "Drag and Drop"
msgstr ""

#: docs/10.x/dusk.md:block 262 (paragraph)
msgid "The `drag` method may be used to drag an element matching the given selector to another element:"
msgstr ""

#: docs/10.x/dusk.md:block 263 (code)
msgid "$browser->drag('.from-selector', '.to-selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 264 (paragraph)
msgid "Or, you may drag an element in a single direction:"
msgstr ""

#: docs/10.x/dusk.md:block 265 (code)
msgid ""
"$browser->dragLeft('.selector', $pixels = 10);\n"
"$browser->dragRight('.selector', $pixels = 10);\n"
"$browser->dragUp('.selector', $pixels = 10);\n"
"$browser->dragDown('.selector', $pixels = 10);\n"
msgstr ""

#: docs/10.x/dusk.md:block 266 (paragraph)
msgid "Finally, you may drag an element by a given offset:"
msgstr ""

#: docs/10.x/dusk.md:block 267 (code)
msgid "$browser->dragOffset('.selector', $x = 10, $y = 10);\n"
msgstr ""

#: docs/10.x/dusk.md:block 269 (header)
msgid "JavaScript Dialogs"
msgstr ""

#: docs/10.x/dusk.md:block 270 (paragraph)
msgid "Dusk provides various methods to interact with JavaScript Dialogs. For example, you may use the `waitForDialog` method to wait for a JavaScript dialog to appear. This method accepts an optional argument indicating how many seconds to wait for the dialog to appear:"
msgstr ""

#: docs/10.x/dusk.md:block 271 (code)
msgid "$browser->waitForDialog($seconds = null);\n"
msgstr ""

#: docs/10.x/dusk.md:block 272 (paragraph)
msgid "The `assertDialogOpened` method may be used to assert that a dialog has been displayed and contains the given message:"
msgstr ""

#: docs/10.x/dusk.md:block 273 (code)
msgid "$browser->assertDialogOpened('Dialog message');\n"
msgstr ""

#: docs/10.x/dusk.md:block 274 (paragraph)
msgid "If the JavaScript dialog contains a prompt, you may use the `typeInDialog` method to type a value into the prompt:"
msgstr ""

#: docs/10.x/dusk.md:block 275 (code)
msgid "$browser->typeInDialog('Hello World');\n"
msgstr ""

#: docs/10.x/dusk.md:block 276 (paragraph)
msgid "To close an open JavaScript dialog by clicking the \"OK\" button, you may invoke the `acceptDialog` method:"
msgstr ""

#: docs/10.x/dusk.md:block 277 (code)
msgid "$browser->acceptDialog();\n"
msgstr ""

#: docs/10.x/dusk.md:block 278 (paragraph)
msgid "To close an open JavaScript dialog by clicking the \"Cancel\" button, you may invoke the `dismissDialog` method:"
msgstr ""

#: docs/10.x/dusk.md:block 279 (code)
msgid "$browser->dismissDialog();\n"
msgstr ""

#: docs/10.x/dusk.md:block 281 (header)
msgid "Interacting With Inline Frames"
msgstr ""

#: docs/10.x/dusk.md:block 282 (paragraph)
msgid "If you need to interact with elements within an iframe, you may use the `withinFrame` method. All element interactions that take place within the closure provided to the `withinFrame` method will be scoped to the context of the specified iframe:"
msgstr ""

#: docs/10.x/dusk.md:block 283 (code)
msgid ""
"$browser->withinFrame('#credit-card-details', function ($browser) {\n"
"    $browser->type('input[name=\"cardnumber\"]', '4242424242424242')\n"
"        ->type('input[name=\"exp-date\"]', '12/24')\n"
"        ->type('input[name=\"cvc\"]', '123');\n"
"    })->press('Pay');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 285 (header)
msgid "Scoping Selectors"
msgstr ""

#: docs/10.x/dusk.md:block 286 (paragraph)
msgid "Sometimes you may wish to perform several operations while scoping all of the operations within a given selector. For example, you may wish to assert that some text exists only within a table and then click a button within that table. You may use the `with` method to accomplish this. All operations performed within the closure given to the `with` method will be scoped to the original selector:"
msgstr ""

#: docs/10.x/dusk.md:block 287 (code)
msgid ""
"$browser->with('.table', function (Browser $table) {\n"
"    $table->assertSee('Hello World')\n"
"          ->clickLink('Delete');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 288 (paragraph)
msgid "You may occasionally need to execute assertions outside of the current scope. You may use the `elsewhere` and `elsewhereWhenAvailable` methods to accomplish this:"
msgstr ""

#: docs/10.x/dusk.md:block 289 (code)
msgid ""
" $browser->with('.table', function (Browser $table) {\n"
"    // Current scope is `body .table`...\n"
"\n"
"    $browser->elsewhere('.page-title', function (Browser $title) {\n"
"        // Current scope is `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n"
"\n"
"    $browser->elsewhereWhenAvailable('.page-title', function (Browser $title) {\n"
"        // Current scope is `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n"
" });\n"
msgstr ""

#: docs/10.x/dusk.md:block 291 (header)
msgid "Waiting for Elements"
msgstr ""

#: docs/10.x/dusk.md:block 292 (paragraph)
msgid "When testing applications that use JavaScript extensively, it often becomes necessary to \"wait\" for certain elements or data to be available before proceeding with a test. Dusk makes this a cinch. Using a variety of methods, you may wait for elements to become visible on the page or even wait until a given JavaScript expression evaluates to `true`."
msgstr ""

#: docs/10.x/dusk.md:block 294 (header)
msgid "Waiting"
msgstr ""

#: docs/10.x/dusk.md:block 295 (paragraph)
msgid "If you just need to pause the test for a given number of milliseconds, use the `pause` method:"
msgstr ""

#: docs/10.x/dusk.md:block 296 (code)
msgid "$browser->pause(1000);\n"
msgstr ""

#: docs/10.x/dusk.md:block 297 (paragraph)
msgid "If you need to pause the test only if a given condition is `true`, use the `pauseIf` method:"
msgstr ""

#: docs/10.x/dusk.md:block 298 (code)
msgid "$browser->pauseIf(App::environment('production'), 1000);\n"
msgstr ""

#: docs/10.x/dusk.md:block 299 (paragraph)
msgid "Likewise, if you need to pause the test unless a given condition is `true`, you may use the `pauseUnless` method:"
msgstr ""

#: docs/10.x/dusk.md:block 300 (code)
msgid "$browser->pauseUnless(App::environment('testing'), 1000);\n"
msgstr ""

#: docs/10.x/dusk.md:block 302 (header)
msgid "Waiting for Selectors"
msgstr ""

#: docs/10.x/dusk.md:block 303 (paragraph)
msgid "The `waitFor` method may be used to pause the execution of the test until the element matching the given CSS or Dusk selector is displayed on the page. By default, this will pause the test for a maximum of five seconds before throwing an exception. If necessary, you may pass a custom timeout threshold as the second argument to the method:"
msgstr ""

#: docs/10.x/dusk.md:block 304 (code)
msgid ""
"// Wait a maximum of five seconds for the selector...\n"
"$browser->waitFor('.selector');\n"
"\n"
"// Wait a maximum of one second for the selector...\n"
"$browser->waitFor('.selector', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 305 (paragraph)
msgid "You may also wait until the element matching the given selector contains the given text:"
msgstr ""

#: docs/10.x/dusk.md:block 306 (code)
msgid ""
"// Wait a maximum of five seconds for the selector to contain the given text...\n"
"$browser->waitForTextIn('.selector', 'Hello World');\n"
"\n"
"// Wait a maximum of one second for the selector to contain the given text...\n"
"$browser->waitForTextIn('.selector', 'Hello World', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 307 (paragraph)
msgid "You may also wait until the element matching the given selector is missing from the page:"
msgstr ""

#: docs/10.x/dusk.md:block 308 (code)
msgid ""
"// Wait a maximum of five seconds until the selector is missing...\n"
"$browser->waitUntilMissing('.selector');\n"
"\n"
"// Wait a maximum of one second until the selector is missing...\n"
"$browser->waitUntilMissing('.selector', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 309 (paragraph)
msgid "Or, you may wait until the element matching the given selector is enabled or disabled:"
msgstr ""

#: docs/10.x/dusk.md:block 310 (code)
msgid ""
"// Wait a maximum of five seconds until the selector is enabled...\n"
"$browser->waitUntilEnabled('.selector');\n"
"\n"
"// Wait a maximum of one second until the selector is enabled...\n"
"$browser->waitUntilEnabled('.selector', 1);\n"
"\n"
"// Wait a maximum of five seconds until the selector is disabled...\n"
"$browser->waitUntilDisabled('.selector');\n"
"\n"
"// Wait a maximum of one second until the selector is disabled...\n"
"$browser->waitUntilDisabled('.selector', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 312 (header)
msgid "Scoping Selectors When Available"
msgstr ""

#: docs/10.x/dusk.md:block 313 (paragraph)
msgid "Occasionally, you may wish to wait for an element to appear that matches a given selector and then interact with the element. For example, you may wish to wait until a modal window is available and then press the \"OK\" button within the modal. The `whenAvailable` method may be used to accomplish this. All element operations performed within the given closure will be scoped to the original selector:"
msgstr ""

#: docs/10.x/dusk.md:block 314 (code)
msgid ""
"$browser->whenAvailable('.modal', function (Browser $modal) {\n"
"    $modal->assertSee('Hello World')\n"
"          ->press('OK');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 316 (header)
msgid "Waiting for Text"
msgstr ""

#: docs/10.x/dusk.md:block 317 (paragraph)
msgid "The `waitForText` method may be used to wait until the given text is displayed on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 318 (code)
msgid ""
"// Wait a maximum of five seconds for the text...\n"
"$browser->waitForText('Hello World');\n"
"\n"
"// Wait a maximum of one second for the text...\n"
"$browser->waitForText('Hello World', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 319 (paragraph)
msgid "You may use the `waitUntilMissingText` method to wait until the displayed text has been removed from the page:"
msgstr ""

#: docs/10.x/dusk.md:block 320 (code)
msgid ""
"// Wait a maximum of five seconds for the text to be removed...\n"
"$browser->waitUntilMissingText('Hello World');\n"
"\n"
"// Wait a maximum of one second for the text to be removed...\n"
"$browser->waitUntilMissingText('Hello World', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 322 (header)
msgid "Waiting for Links"
msgstr ""

#: docs/10.x/dusk.md:block 323 (paragraph)
msgid "The `waitForLink` method may be used to wait until the given link text is displayed on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 324 (code)
msgid ""
"// Wait a maximum of five seconds for the link...\n"
"$browser->waitForLink('Create');\n"
"\n"
"// Wait a maximum of one second for the link...\n"
"$browser->waitForLink('Create', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 326 (header)
msgid "Waiting for Inputs"
msgstr ""

#: docs/10.x/dusk.md:block 327 (paragraph)
msgid "The `waitForInput` method may be used to wait until the given input field is visible on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 328 (code)
msgid ""
"// Wait a maximum of five seconds for the input...\n"
"$browser->waitForInput($field);\n"
"\n"
"// Wait a maximum of one second for the input...\n"
"$browser->waitForInput($field, 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 330 (header)
msgid "Waiting on the Page Location"
msgstr ""

#: docs/10.x/dusk.md:block 331 (paragraph)
msgid "When making a path assertion such as `$browser->assertPathIs('/home')`, the assertion can fail if `window.location.pathname` is being updated asynchronously. You may use the `waitForLocation` method to wait for the location to be a given value:"
msgstr ""

#: docs/10.x/dusk.md:block 332 (code)
msgid "$browser->waitForLocation('/secret');\n"
msgstr ""

#: docs/10.x/dusk.md:block 333 (paragraph)
msgid "The `waitForLocation` method can also be used to wait for the current window location to be a fully qualified URL:"
msgstr ""

#: docs/10.x/dusk.md:block 334 (code)
msgid "$browser->waitForLocation('https://example.com/path');\n"
msgstr ""

#: docs/10.x/dusk.md:block 335 (paragraph)
msgid "You may also wait for a [named route's](/docs/{{version}}/routing#named-routes) location:"
msgstr ""

#: docs/10.x/dusk.md:block 336 (code)
msgid "$browser->waitForRoute($routeName, $parameters);\n"
msgstr ""

#: docs/10.x/dusk.md:block 338 (header)
msgid "Waiting for Page Reloads"
msgstr ""

#: docs/10.x/dusk.md:block 339 (paragraph)
msgid "If you need to wait for a page to reload after performing an action, use the `waitForReload` method:"
msgstr ""

#: docs/10.x/dusk.md:block 340 (code)
msgid ""
"use Laravel\\Dusk\\Browser;\n"
"\n"
"$browser->waitForReload(function (Browser $browser) {\n"
"    $browser->press('Submit');\n"
"})\n"
"->assertSee('Success!');\n"
msgstr ""

#: docs/10.x/dusk.md:block 341 (paragraph)
msgid "Since the need to wait for the page to reload typically occurs after clicking a button, you may use the `clickAndWaitForReload` method for convenience:"
msgstr ""

#: docs/10.x/dusk.md:block 342 (code)
msgid ""
"$browser->clickAndWaitForReload('.selector')\n"
"        ->assertSee('something');\n"
msgstr ""

#: docs/10.x/dusk.md:block 344 (header)
msgid "Waiting on JavaScript Expressions"
msgstr ""

#: docs/10.x/dusk.md:block 345 (paragraph)
msgid "Sometimes you may wish to pause the execution of a test until a given JavaScript expression evaluates to `true`. You may easily accomplish this using the `waitUntil` method. When passing an expression to this method, you do not need to include the `return` keyword or an ending semi-colon:"
msgstr ""

#: docs/10.x/dusk.md:block 346 (code)
msgid ""
"// Wait a maximum of five seconds for the expression to be true...\n"
"$browser->waitUntil('App.data.servers.length > 0');\n"
"\n"
"// Wait a maximum of one second for the expression to be true...\n"
"$browser->waitUntil('App.data.servers.length > 0', 1);\n"
msgstr ""

#: docs/10.x/dusk.md:block 348 (header)
msgid "Waiting on Vue Expressions"
msgstr ""

#: docs/10.x/dusk.md:block 349 (paragraph)
msgid "The `waitUntilVue` and `waitUntilVueIsNot` methods may be used to wait until a [Vue component](https://vuejs.org) attribute has a given value:"
msgstr ""

#: docs/10.x/dusk.md:block 350 (code)
msgid ""
"// Wait until the component attribute contains the given value...\n"
"$browser->waitUntilVue('user.name', 'Taylor', '@user');\n"
"\n"
"// Wait until the component attribute doesn't contain the given value...\n"
"$browser->waitUntilVueIsNot('user.name', null, '@user');\n"
msgstr ""

#: docs/10.x/dusk.md:block 352 (header)
msgid "Waiting for JavaScript Events"
msgstr ""

#: docs/10.x/dusk.md:block 353 (paragraph)
msgid "The `waitForEvent` method can be used to pause the execution of a test until a JavaScript event occurs:"
msgstr ""

#: docs/10.x/dusk.md:block 354 (code)
msgid "$browser->waitForEvent('load');\n"
msgstr ""

#: docs/10.x/dusk.md:block 355 (paragraph)
msgid "The event listener is attached to the current scope, which is the `body` element by default. When using a scoped selector, the event listener will be attached to the matching element:"
msgstr ""

#: docs/10.x/dusk.md:block 356 (code)
msgid ""
"$browser->with('iframe', function (Browser $iframe) {\n"
"    // Wait for the iframe's load event...\n"
"    $iframe->waitForEvent('load');\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 357 (paragraph)
msgid "You may also provide a selector as the second argument to the `waitForEvent` method to attach the event listener to a specific element:"
msgstr ""

#: docs/10.x/dusk.md:block 358 (code)
msgid "$browser->waitForEvent('load', '.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 359 (paragraph)
msgid "You may also wait for events on the `document` and `window` objects:"
msgstr ""

#: docs/10.x/dusk.md:block 360 (code)
msgid ""
"// Wait until the document is scrolled...\n"
"$browser->waitForEvent('scroll', 'document');\n"
"\n"
"// Wait a maximum of five seconds until the window is resized...\n"
"$browser->waitForEvent('resize', 'window', 5);\n"
msgstr ""

#: docs/10.x/dusk.md:block 362 (header)
msgid "Waiting With a Callback"
msgstr ""

#: docs/10.x/dusk.md:block 363 (paragraph)
msgid "Many of the \"wait\" methods in Dusk rely on the underlying `waitUsing` method. You may use this method directly to wait for a given closure to return `true`. The `waitUsing` method accepts the maximum number of seconds to wait, the interval at which the closure should be evaluated, the closure, and an optional failure message:"
msgstr ""

#: docs/10.x/dusk.md:block 364 (code)
msgid ""
"$browser->waitUsing(10, 1, function () use ($something) {\n"
"    return $something->isReady();\n"
"}, \"Something wasn't ready in time.\");\n"
msgstr ""

#: docs/10.x/dusk.md:block 366 (header)
msgid "Scrolling an Element Into View"
msgstr ""

#: docs/10.x/dusk.md:block 367 (paragraph)
msgid "Sometimes you may not be able to click on an element because it is outside of the viewable area of the browser. The `scrollIntoView` method will scroll the browser window until the element at the given selector is within the view:"
msgstr ""

#: docs/10.x/dusk.md:block 368 (code)
msgid ""
"$browser->scrollIntoView('.selector')\n"
"        ->click('.selector');\n"
msgstr ""

#: docs/10.x/dusk.md:block 370 (header)
msgid "Available Assertions"
msgstr ""

#: docs/10.x/dusk.md:block 371 (paragraph)
msgid "Dusk provides a variety of assertions that you may make against your application. All of the available assertions are documented in the list below:"
msgstr ""

#: docs/10.x/dusk.md:block 374 (paragraph)
msgid "[assertTitle](#assert-title) [assertTitleContains](#assert-title-contains) [assertUrlIs](#assert-url-is) [assertSchemeIs](#assert-scheme-is) [assertSchemeIsNot](#assert-scheme-is-not) [assertHostIs](#assert-host-is) [assertHostIsNot](#assert-host-is-not) [assertPortIs](#assert-port-is) [assertPortIsNot](#assert-port-is-not) [assertPathBeginsWith](#assert-path-begins-with) [assertPathIs](#assert-path-is) [assertPathIsNot](#assert-path-is-not) [assertRouteIs](#assert-route-is) [assertQueryStringHas](#assert-query-string-has) [assertQueryStringMissing](#assert-query-string-missing) [assertFragmentIs](#assert-fragment-is) [assertFragmentBeginsWith](#assert-fragment-begins-with) [assertFragmentIsNot](#assert-fragment-is-not) [assertHasCookie](#assert-has-cookie) [assertHasPlainCookie](#assert-has-plain-cookie) [assertCookieMissing](#assert-cookie-missing) [assertPlainCookieMissing](#assert-plain-cookie-missing) [assertCookieValue](#assert-cookie-value) [assertPlainCookieValue](#assert-plain-cookie-value) [assertSee](#assert-see) [assertDontSee](#assert-dont-see) [assertSeeIn](#assert-see-in) [assertDontSeeIn](#assert-dont-see-in) [assertSeeAnythingIn](#assert-see-anything-in) [assertSeeNothingIn](#assert-see-nothing-in) [assertScript](#assert-script) [assertSourceHas](#assert-source-has) [assertSourceMissing](#assert-source-missing) [assertSeeLink](#assert-see-link) [assertDontSeeLink](#assert-dont-see-link) [assertInputValue](#assert-input-value) [assertInputValueIsNot](#assert-input-value-is-not) [assertChecked](#assert-checked) [assertNotChecked](#assert-not-checked) [assertIndeterminate](#assert-indeterminate) [assertRadioSelected](#assert-radio-selected) [assertRadioNotSelected](#assert-radio-not-selected) [assertSelected](#assert-selected) [assertNotSelected](#assert-not-selected) [assertSelectHasOptions](#assert-select-has-options) [assertSelectMissingOptions](#assert-select-missing-options) [assertSelectHasOption](#assert-select-has-option) [assertSelectMissingOption](#assert-select-missing-option) [assertValue](#assert-value) [assertValueIsNot](#assert-value-is-not) [assertAttribute](#assert-attribute) [assertAttributeContains](#assert-attribute-contains) [assertAttributeDoesntContain](#assert-attribute-doesnt-contain) [assertAriaAttribute](#assert-aria-attribute) [assertDataAttribute](#assert-data-attribute) [assertVisible](#assert-visible) [assertPresent](#assert-present) [assertNotPresent](#assert-not-present) [assertMissing](#assert-missing) [assertInputPresent](#assert-input-present) [assertInputMissing](#assert-input-missing) [assertDialogOpened](#assert-dialog-opened) [assertEnabled](#assert-enabled) [assertDisabled](#assert-disabled) [assertButtonEnabled](#assert-button-enabled) [assertButtonDisabled](#assert-button-disabled) [assertFocused](#assert-focused) [assertNotFocused](#assert-not-focused) [assertAuthenticated](#assert-authenticated) [assertGuest](#assert-guest) [assertAuthenticatedAs](#assert-authenticated-as) [assertVue](#assert-vue) [assertVueIsNot](#assert-vue-is-not) [assertVueContains](#assert-vue-contains) [assertVueDoesntContain](#assert-vue-doesnt-contain)"
msgstr ""

#: docs/10.x/dusk.md:block 377 (header)
msgid "assertTitle"
msgstr ""

#: docs/10.x/dusk.md:block 378 (paragraph)
msgid "Assert that the page title matches the given text:"
msgstr ""

#: docs/10.x/dusk.md:block 379 (code)
msgid "$browser->assertTitle($title);\n"
msgstr ""

#: docs/10.x/dusk.md:block 381 (header)
msgid "assertTitleContains"
msgstr ""

#: docs/10.x/dusk.md:block 382 (paragraph)
msgid "Assert that the page title contains the given text:"
msgstr ""

#: docs/10.x/dusk.md:block 383 (code)
msgid "$browser->assertTitleContains($title);\n"
msgstr ""

#: docs/10.x/dusk.md:block 385 (header)
msgid "assertUrlIs"
msgstr ""

#: docs/10.x/dusk.md:block 386 (paragraph)
msgid "Assert that the current URL (without the query string) matches the given string:"
msgstr ""

#: docs/10.x/dusk.md:block 387 (code)
msgid "$browser->assertUrlIs($url);\n"
msgstr ""

#: docs/10.x/dusk.md:block 389 (header)
msgid "assertSchemeIs"
msgstr ""

#: docs/10.x/dusk.md:block 390 (paragraph)
msgid "Assert that the current URL scheme matches the given scheme:"
msgstr ""

#: docs/10.x/dusk.md:block 391 (code)
msgid "$browser->assertSchemeIs($scheme);\n"
msgstr ""

#: docs/10.x/dusk.md:block 393 (header)
msgid "assertSchemeIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 394 (paragraph)
msgid "Assert that the current URL scheme does not match the given scheme:"
msgstr ""

#: docs/10.x/dusk.md:block 395 (code)
msgid "$browser->assertSchemeIsNot($scheme);\n"
msgstr ""

#: docs/10.x/dusk.md:block 397 (header)
msgid "assertHostIs"
msgstr ""

#: docs/10.x/dusk.md:block 398 (paragraph)
msgid "Assert that the current URL host matches the given host:"
msgstr ""

#: docs/10.x/dusk.md:block 399 (code)
msgid "$browser->assertHostIs($host);\n"
msgstr ""

#: docs/10.x/dusk.md:block 401 (header)
msgid "assertHostIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 402 (paragraph)
msgid "Assert that the current URL host does not match the given host:"
msgstr ""

#: docs/10.x/dusk.md:block 403 (code)
msgid "$browser->assertHostIsNot($host);\n"
msgstr ""

#: docs/10.x/dusk.md:block 405 (header)
msgid "assertPortIs"
msgstr ""

#: docs/10.x/dusk.md:block 406 (paragraph)
msgid "Assert that the current URL port matches the given port:"
msgstr ""

#: docs/10.x/dusk.md:block 407 (code)
msgid "$browser->assertPortIs($port);\n"
msgstr ""

#: docs/10.x/dusk.md:block 409 (header)
msgid "assertPortIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 410 (paragraph)
msgid "Assert that the current URL port does not match the given port:"
msgstr ""

#: docs/10.x/dusk.md:block 411 (code)
msgid "$browser->assertPortIsNot($port);\n"
msgstr ""

#: docs/10.x/dusk.md:block 413 (header)
msgid "assertPathBeginsWith"
msgstr ""

#: docs/10.x/dusk.md:block 414 (paragraph)
msgid "Assert that the current URL path begins with the given path:"
msgstr ""

#: docs/10.x/dusk.md:block 415 (code)
msgid "$browser->assertPathBeginsWith('/home');\n"
msgstr ""

#: docs/10.x/dusk.md:block 417 (header)
msgid "assertPathIs"
msgstr ""

#: docs/10.x/dusk.md:block 418 (paragraph)
msgid "Assert that the current path matches the given path:"
msgstr ""

#: docs/10.x/dusk.md:block 419 (code)
msgid "$browser->assertPathIs('/home');\n"
msgstr ""

#: docs/10.x/dusk.md:block 421 (header)
msgid "assertPathIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 422 (paragraph)
msgid "Assert that the current path does not match the given path:"
msgstr ""

#: docs/10.x/dusk.md:block 423 (code)
msgid "$browser->assertPathIsNot('/home');\n"
msgstr ""

#: docs/10.x/dusk.md:block 425 (header)
msgid "assertRouteIs"
msgstr ""

#: docs/10.x/dusk.md:block 426 (paragraph)
msgid "Assert that the current URL matches the given [named route's](/docs/{{version}}/routing#named-routes) URL:"
msgstr ""

#: docs/10.x/dusk.md:block 427 (code)
msgid "$browser->assertRouteIs($name, $parameters);\n"
msgstr ""

#: docs/10.x/dusk.md:block 429 (header)
msgid "assertQueryStringHas"
msgstr ""

#: docs/10.x/dusk.md:block 430 (paragraph)
msgid "Assert that the given query string parameter is present:"
msgstr ""

#: docs/10.x/dusk.md:block 431 (code)
msgid "$browser->assertQueryStringHas($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 432 (paragraph)
msgid "Assert that the given query string parameter is present and has a given value:"
msgstr ""

#: docs/10.x/dusk.md:block 433 (code)
msgid "$browser->assertQueryStringHas($name, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 435 (header)
msgid "assertQueryStringMissing"
msgstr ""

#: docs/10.x/dusk.md:block 436 (paragraph)
msgid "Assert that the given query string parameter is missing:"
msgstr ""

#: docs/10.x/dusk.md:block 437 (code)
msgid "$browser->assertQueryStringMissing($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 439 (header)
msgid "assertFragmentIs"
msgstr ""

#: docs/10.x/dusk.md:block 440 (paragraph)
msgid "Assert that the URL's current hash fragment matches the given fragment:"
msgstr ""

#: docs/10.x/dusk.md:block 441 (code)
msgid "$browser->assertFragmentIs('anchor');\n"
msgstr ""

#: docs/10.x/dusk.md:block 443 (header)
msgid "assertFragmentBeginsWith"
msgstr ""

#: docs/10.x/dusk.md:block 444 (paragraph)
msgid "Assert that the URL's current hash fragment begins with the given fragment:"
msgstr ""

#: docs/10.x/dusk.md:block 445 (code)
msgid "$browser->assertFragmentBeginsWith('anchor');\n"
msgstr ""

#: docs/10.x/dusk.md:block 447 (header)
msgid "assertFragmentIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 448 (paragraph)
msgid "Assert that the URL's current hash fragment does not match the given fragment:"
msgstr ""

#: docs/10.x/dusk.md:block 449 (code)
msgid "$browser->assertFragmentIsNot('anchor');\n"
msgstr ""

#: docs/10.x/dusk.md:block 451 (header)
msgid "assertHasCookie"
msgstr ""

#: docs/10.x/dusk.md:block 452 (paragraph)
msgid "Assert that the given encrypted cookie is present:"
msgstr ""

#: docs/10.x/dusk.md:block 453 (code)
msgid "$browser->assertHasCookie($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 455 (header)
msgid "assertHasPlainCookie"
msgstr ""

#: docs/10.x/dusk.md:block 456 (paragraph)
msgid "Assert that the given unencrypted cookie is present:"
msgstr ""

#: docs/10.x/dusk.md:block 457 (code)
msgid "$browser->assertHasPlainCookie($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 459 (header)
msgid "assertCookieMissing"
msgstr ""

#: docs/10.x/dusk.md:block 460 (paragraph)
msgid "Assert that the given encrypted cookie is not present:"
msgstr ""

#: docs/10.x/dusk.md:block 461 (code)
msgid "$browser->assertCookieMissing($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 463 (header)
msgid "assertPlainCookieMissing"
msgstr ""

#: docs/10.x/dusk.md:block 464 (paragraph)
msgid "Assert that the given unencrypted cookie is not present:"
msgstr ""

#: docs/10.x/dusk.md:block 465 (code)
msgid "$browser->assertPlainCookieMissing($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 467 (header)
msgid "assertCookieValue"
msgstr ""

#: docs/10.x/dusk.md:block 468 (paragraph)
msgid "Assert that an encrypted cookie has a given value:"
msgstr ""

#: docs/10.x/dusk.md:block 469 (code)
msgid "$browser->assertCookieValue($name, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 471 (header)
msgid "assertPlainCookieValue"
msgstr ""

#: docs/10.x/dusk.md:block 472 (paragraph)
msgid "Assert that an unencrypted cookie has a given value:"
msgstr ""

#: docs/10.x/dusk.md:block 473 (code)
msgid "$browser->assertPlainCookieValue($name, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 475 (header)
msgid "assertSee"
msgstr ""

#: docs/10.x/dusk.md:block 476 (paragraph)
msgid "Assert that the given text is present on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 477 (code)
msgid "$browser->assertSee($text);\n"
msgstr ""

#: docs/10.x/dusk.md:block 479 (header)
msgid "assertDontSee"
msgstr ""

#: docs/10.x/dusk.md:block 480 (paragraph)
msgid "Assert that the given text is not present on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 481 (code)
msgid "$browser->assertDontSee($text);\n"
msgstr ""

#: docs/10.x/dusk.md:block 483 (header)
msgid "assertSeeIn"
msgstr ""

#: docs/10.x/dusk.md:block 484 (paragraph)
msgid "Assert that the given text is present within the selector:"
msgstr ""

#: docs/10.x/dusk.md:block 485 (code)
msgid "$browser->assertSeeIn($selector, $text);\n"
msgstr ""

#: docs/10.x/dusk.md:block 487 (header)
msgid "assertDontSeeIn"
msgstr ""

#: docs/10.x/dusk.md:block 488 (paragraph)
msgid "Assert that the given text is not present within the selector:"
msgstr ""

#: docs/10.x/dusk.md:block 489 (code)
msgid "$browser->assertDontSeeIn($selector, $text);\n"
msgstr ""

#: docs/10.x/dusk.md:block 491 (header)
msgid "assertSeeAnythingIn"
msgstr ""

#: docs/10.x/dusk.md:block 492 (paragraph)
msgid "Assert that any text is present within the selector:"
msgstr ""

#: docs/10.x/dusk.md:block 493 (code)
msgid "$browser->assertSeeAnythingIn($selector);\n"
msgstr ""

#: docs/10.x/dusk.md:block 495 (header)
msgid "assertSeeNothingIn"
msgstr ""

#: docs/10.x/dusk.md:block 496 (paragraph)
msgid "Assert that no text is present within the selector:"
msgstr ""

#: docs/10.x/dusk.md:block 497 (code)
msgid "$browser->assertSeeNothingIn($selector);\n"
msgstr ""

#: docs/10.x/dusk.md:block 499 (header)
msgid "assertScript"
msgstr ""

#: docs/10.x/dusk.md:block 500 (paragraph)
msgid "Assert that the given JavaScript expression evaluates to the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 501 (code)
msgid ""
"$browser->assertScript('window.isLoaded')\n"
"        ->assertScript('document.readyState', 'complete');\n"
msgstr ""

#: docs/10.x/dusk.md:block 503 (header)
msgid "assertSourceHas"
msgstr ""

#: docs/10.x/dusk.md:block 504 (paragraph)
msgid "Assert that the given source code is present on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 505 (code)
msgid "$browser->assertSourceHas($code);\n"
msgstr ""

#: docs/10.x/dusk.md:block 507 (header)
msgid "assertSourceMissing"
msgstr ""

#: docs/10.x/dusk.md:block 508 (paragraph)
msgid "Assert that the given source code is not present on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 509 (code)
msgid "$browser->assertSourceMissing($code);\n"
msgstr ""

#: docs/10.x/dusk.md:block 511 (header)
msgid "assertSeeLink"
msgstr ""

#: docs/10.x/dusk.md:block 512 (paragraph)
msgid "Assert that the given link is present on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 513 (code)
msgid "$browser->assertSeeLink($linkText);\n"
msgstr ""

#: docs/10.x/dusk.md:block 515 (header)
msgid "assertDontSeeLink"
msgstr ""

#: docs/10.x/dusk.md:block 516 (paragraph)
msgid "Assert that the given link is not present on the page:"
msgstr ""

#: docs/10.x/dusk.md:block 517 (code)
msgid "$browser->assertDontSeeLink($linkText);\n"
msgstr ""

#: docs/10.x/dusk.md:block 519 (header)
msgid "assertInputValue"
msgstr ""

#: docs/10.x/dusk.md:block 520 (paragraph)
msgid "Assert that the given input field has the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 521 (code)
msgid "$browser->assertInputValue($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 523 (header)
msgid "assertInputValueIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 524 (paragraph)
msgid "Assert that the given input field does not have the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 525 (code)
msgid "$browser->assertInputValueIsNot($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 527 (header)
msgid "assertChecked"
msgstr ""

#: docs/10.x/dusk.md:block 528 (paragraph)
msgid "Assert that the given checkbox is checked:"
msgstr ""

#: docs/10.x/dusk.md:block 529 (code)
msgid "$browser->assertChecked($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 531 (header)
msgid "assertNotChecked"
msgstr ""

#: docs/10.x/dusk.md:block 532 (paragraph)
msgid "Assert that the given checkbox is not checked:"
msgstr ""

#: docs/10.x/dusk.md:block 533 (code)
msgid "$browser->assertNotChecked($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 535 (header)
msgid "assertIndeterminate"
msgstr ""

#: docs/10.x/dusk.md:block 536 (paragraph)
msgid "Assert that the given checkbox is in an indeterminate state:"
msgstr ""

#: docs/10.x/dusk.md:block 537 (code)
msgid "$browser->assertIndeterminate($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 539 (header)
msgid "assertRadioSelected"
msgstr ""

#: docs/10.x/dusk.md:block 540 (paragraph)
msgid "Assert that the given radio field is selected:"
msgstr ""

#: docs/10.x/dusk.md:block 541 (code)
msgid "$browser->assertRadioSelected($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 543 (header)
msgid "assertRadioNotSelected"
msgstr ""

#: docs/10.x/dusk.md:block 544 (paragraph)
msgid "Assert that the given radio field is not selected:"
msgstr ""

#: docs/10.x/dusk.md:block 545 (code)
msgid "$browser->assertRadioNotSelected($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 547 (header)
msgid "assertSelected"
msgstr ""

#: docs/10.x/dusk.md:block 548 (paragraph)
msgid "Assert that the given dropdown has the given value selected:"
msgstr ""

#: docs/10.x/dusk.md:block 549 (code)
msgid "$browser->assertSelected($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 551 (header)
msgid "assertNotSelected"
msgstr ""

#: docs/10.x/dusk.md:block 552 (paragraph)
msgid "Assert that the given dropdown does not have the given value selected:"
msgstr ""

#: docs/10.x/dusk.md:block 553 (code)
msgid "$browser->assertNotSelected($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 555 (header)
msgid "assertSelectHasOptions"
msgstr ""

#: docs/10.x/dusk.md:block 556 (paragraph)
msgid "Assert that the given array of values are available to be selected:"
msgstr ""

#: docs/10.x/dusk.md:block 557 (code)
msgid "$browser->assertSelectHasOptions($field, $values);\n"
msgstr ""

#: docs/10.x/dusk.md:block 559 (header)
msgid "assertSelectMissingOptions"
msgstr ""

#: docs/10.x/dusk.md:block 560 (paragraph)
msgid "Assert that the given array of values are not available to be selected:"
msgstr ""

#: docs/10.x/dusk.md:block 561 (code)
msgid "$browser->assertSelectMissingOptions($field, $values);\n"
msgstr ""

#: docs/10.x/dusk.md:block 563 (header)
msgid "assertSelectHasOption"
msgstr ""

#: docs/10.x/dusk.md:block 564 (paragraph)
msgid "Assert that the given value is available to be selected on the given field:"
msgstr ""

#: docs/10.x/dusk.md:block 565 (code)
msgid "$browser->assertSelectHasOption($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 567 (header)
msgid "assertSelectMissingOption"
msgstr ""

#: docs/10.x/dusk.md:block 568 (paragraph)
msgid "Assert that the given value is not available to be selected:"
msgstr ""

#: docs/10.x/dusk.md:block 569 (code)
msgid "$browser->assertSelectMissingOption($field, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 571 (header)
msgid "assertValue"
msgstr ""

#: docs/10.x/dusk.md:block 572 (paragraph)
msgid "Assert that the element matching the given selector has the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 573 (code)
msgid "$browser->assertValue($selector, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 575 (header)
msgid "assertValueIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 576 (paragraph)
msgid "Assert that the element matching the given selector does not have the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 577 (code)
msgid "$browser->assertValueIsNot($selector, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 579 (header)
msgid "assertAttribute"
msgstr ""

#: docs/10.x/dusk.md:block 580 (paragraph)
msgid "Assert that the element matching the given selector has the given value in the provided attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 581 (code)
msgid "$browser->assertAttribute($selector, $attribute, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 583 (header)
msgid "assertAttributeContains"
msgstr ""

#: docs/10.x/dusk.md:block 584 (paragraph)
msgid "Assert that the element matching the given selector contains the given value in the provided attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 585 (code)
msgid "$browser->assertAttributeContains($selector, $attribute, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 587 (header)
msgid "assertAttributeDoesntContain"
msgstr ""

#: docs/10.x/dusk.md:block 588 (paragraph)
msgid "Assert that the element matching the given selector does not contain the given value in the provided attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 589 (code)
msgid "$browser->assertAttributeDoesntContain($selector, $attribute, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 591 (header)
msgid "assertAriaAttribute"
msgstr ""

#: docs/10.x/dusk.md:block 592 (paragraph)
msgid "Assert that the element matching the given selector has the given value in the provided aria attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 593 (code)
msgid "$browser->assertAriaAttribute($selector, $attribute, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 594 (paragraph)
msgid "For example, given the markup `<button aria-label=\"Add\"></button>`, you may assert against the `aria-label` attribute like so:"
msgstr ""

#: docs/10.x/dusk.md:block 595 (code)
msgid "$browser->assertAriaAttribute('button', 'label', 'Add')\n"
msgstr ""

#: docs/10.x/dusk.md:block 597 (header)
msgid "assertDataAttribute"
msgstr ""

#: docs/10.x/dusk.md:block 598 (paragraph)
msgid "Assert that the element matching the given selector has the given value in the provided data attribute:"
msgstr ""

#: docs/10.x/dusk.md:block 599 (code)
msgid "$browser->assertDataAttribute($selector, $attribute, $value);\n"
msgstr ""

#: docs/10.x/dusk.md:block 600 (paragraph)
msgid "For example, given the markup `<tr id=\"row-1\" data-content=\"attendees\"></tr>`, you may assert against the `data-label` attribute like so:"
msgstr ""

#: docs/10.x/dusk.md:block 601 (code)
msgid "$browser->assertDataAttribute('#row-1', 'content', 'attendees')\n"
msgstr ""

#: docs/10.x/dusk.md:block 603 (header)
msgid "assertVisible"
msgstr ""

#: docs/10.x/dusk.md:block 604 (paragraph)
msgid "Assert that the element matching the given selector is visible:"
msgstr ""

#: docs/10.x/dusk.md:block 605 (code)
msgid "$browser->assertVisible($selector);\n"
msgstr ""

#: docs/10.x/dusk.md:block 607 (header)
msgid "assertPresent"
msgstr ""

#: docs/10.x/dusk.md:block 608 (paragraph)
msgid "Assert that the element matching the given selector is present in the source:"
msgstr ""

#: docs/10.x/dusk.md:block 609 (code)
msgid "$browser->assertPresent($selector);\n"
msgstr ""

#: docs/10.x/dusk.md:block 611 (header)
msgid "assertNotPresent"
msgstr ""

#: docs/10.x/dusk.md:block 612 (paragraph)
msgid "Assert that the element matching the given selector is not present in the source:"
msgstr ""

#: docs/10.x/dusk.md:block 613 (code)
msgid "$browser->assertNotPresent($selector);\n"
msgstr ""

#: docs/10.x/dusk.md:block 615 (header)
msgid "assertMissing"
msgstr ""

#: docs/10.x/dusk.md:block 616 (paragraph)
msgid "Assert that the element matching the given selector is not visible:"
msgstr ""

#: docs/10.x/dusk.md:block 617 (code)
msgid "$browser->assertMissing($selector);\n"
msgstr ""

#: docs/10.x/dusk.md:block 619 (header)
msgid "assertInputPresent"
msgstr ""

#: docs/10.x/dusk.md:block 620 (paragraph)
msgid "Assert that an input with the given name is present:"
msgstr ""

#: docs/10.x/dusk.md:block 621 (code)
msgid "$browser->assertInputPresent($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 623 (header)
msgid "assertInputMissing"
msgstr ""

#: docs/10.x/dusk.md:block 624 (paragraph)
msgid "Assert that an input with the given name is not present in the source:"
msgstr ""

#: docs/10.x/dusk.md:block 625 (code)
msgid "$browser->assertInputMissing($name);\n"
msgstr ""

#: docs/10.x/dusk.md:block 627 (header)
msgid "assertDialogOpened"
msgstr ""

#: docs/10.x/dusk.md:block 628 (paragraph)
msgid "Assert that a JavaScript dialog with the given message has been opened:"
msgstr ""

#: docs/10.x/dusk.md:block 629 (code)
msgid "$browser->assertDialogOpened($message);\n"
msgstr ""

#: docs/10.x/dusk.md:block 631 (header)
msgid "assertEnabled"
msgstr ""

#: docs/10.x/dusk.md:block 632 (paragraph)
msgid "Assert that the given field is enabled:"
msgstr ""

#: docs/10.x/dusk.md:block 633 (code)
msgid "$browser->assertEnabled($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 635 (header)
msgid "assertDisabled"
msgstr ""

#: docs/10.x/dusk.md:block 636 (paragraph)
msgid "Assert that the given field is disabled:"
msgstr ""

#: docs/10.x/dusk.md:block 637 (code)
msgid "$browser->assertDisabled($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 639 (header)
msgid "assertButtonEnabled"
msgstr ""

#: docs/10.x/dusk.md:block 640 (paragraph)
msgid "Assert that the given button is enabled:"
msgstr ""

#: docs/10.x/dusk.md:block 641 (code)
msgid "$browser->assertButtonEnabled($button);\n"
msgstr ""

#: docs/10.x/dusk.md:block 643 (header)
msgid "assertButtonDisabled"
msgstr ""

#: docs/10.x/dusk.md:block 644 (paragraph)
msgid "Assert that the given button is disabled:"
msgstr ""

#: docs/10.x/dusk.md:block 645 (code)
msgid "$browser->assertButtonDisabled($button);\n"
msgstr ""

#: docs/10.x/dusk.md:block 647 (header)
msgid "assertFocused"
msgstr ""

#: docs/10.x/dusk.md:block 648 (paragraph)
msgid "Assert that the given field is focused:"
msgstr ""

#: docs/10.x/dusk.md:block 649 (code)
msgid "$browser->assertFocused($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 651 (header)
msgid "assertNotFocused"
msgstr ""

#: docs/10.x/dusk.md:block 652 (paragraph)
msgid "Assert that the given field is not focused:"
msgstr ""

#: docs/10.x/dusk.md:block 653 (code)
msgid "$browser->assertNotFocused($field);\n"
msgstr ""

#: docs/10.x/dusk.md:block 655 (header)
msgid "assertAuthenticated"
msgstr ""

#: docs/10.x/dusk.md:block 656 (paragraph)
msgid "Assert that the user is authenticated:"
msgstr ""

#: docs/10.x/dusk.md:block 657 (code)
msgid "$browser->assertAuthenticated();\n"
msgstr ""

#: docs/10.x/dusk.md:block 659 (header)
msgid "assertGuest"
msgstr ""

#: docs/10.x/dusk.md:block 660 (paragraph)
msgid "Assert that the user is not authenticated:"
msgstr ""

#: docs/10.x/dusk.md:block 661 (code)
msgid "$browser->assertGuest();\n"
msgstr ""

#: docs/10.x/dusk.md:block 663 (header)
msgid "assertAuthenticatedAs"
msgstr ""

#: docs/10.x/dusk.md:block 664 (paragraph)
msgid "Assert that the user is authenticated as the given user:"
msgstr ""

#: docs/10.x/dusk.md:block 665 (code)
msgid "$browser->assertAuthenticatedAs($user);\n"
msgstr ""

#: docs/10.x/dusk.md:block 667 (header)
msgid "assertVue"
msgstr ""

#: docs/10.x/dusk.md:block 668 (paragraph)
msgid "Dusk even allows you to make assertions on the state of [Vue component](https://vuejs.org) data. For example, imagine your application contains the following Vue component:"
msgstr ""

#: docs/10.x/dusk.md:block 669 (code)
msgid ""
"// HTML...\n"
"\n"
"<profile dusk=\"profile-component\"></profile>\n"
"\n"
"// Component Definition...\n"
"\n"
"Vue.component('profile', {\n"
"    template: '<div>{{ user.name }}</div>',\n"
"\n"
"    data: function () {\n"
"        return {\n"
"            user: {\n"
"                name: 'Taylor'\n"
"            }\n"
"        };\n"
"    }\n"
"});\n"
msgstr ""

#: docs/10.x/dusk.md:block 670 (paragraph)
msgid "You may assert on the state of the Vue component like so:"
msgstr ""

#: docs/10.x/dusk.md:block 671 (code)
msgid ""
"/**\n"
" * A basic Vue test example.\n"
" */\n"
"public function test_vue(): void\n"
"{\n"
"    $this->browse(function (Browser $browser) {\n"
"        $browser->visit('/')\n"
"                ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 673 (header)
msgid "assertVueIsNot"
msgstr ""

#: docs/10.x/dusk.md:block 674 (paragraph)
msgid "Assert that a given Vue component data property does not match the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 675 (code)
msgid "$browser->assertVueIsNot($property, $value, $componentSelector = null);\n"
msgstr ""

#: docs/10.x/dusk.md:block 677 (header)
msgid "assertVueContains"
msgstr ""

#: docs/10.x/dusk.md:block 678 (paragraph)
msgid "Assert that a given Vue component data property is an array and contains the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 679 (code)
msgid "$browser->assertVueContains($property, $value, $componentSelector = null);\n"
msgstr ""

#: docs/10.x/dusk.md:block 681 (header)
msgid "assertVueDoesntContain"
msgstr ""

#: docs/10.x/dusk.md:block 682 (paragraph)
msgid "Assert that a given Vue component data property is an array and does not contain the given value:"
msgstr ""

#: docs/10.x/dusk.md:block 683 (code)
msgid "$browser->assertVueDoesntContain($property, $value, $componentSelector = null);\n"
msgstr ""

#: docs/10.x/dusk.md:block 685 (header)
msgid "Pages"
msgstr ""

#: docs/10.x/dusk.md:block 686 (paragraph)
msgid "Sometimes, tests require several complicated actions to be performed in sequence. This can make your tests harder to read and understand. Dusk Pages allow you to define expressive actions that may then be performed on a given page via a single method. Pages also allow you to define short-cuts to common selectors for your application or for a single page."
msgstr ""

#: docs/10.x/dusk.md:block 688 (header)
msgid "Generating Pages"
msgstr ""

#: docs/10.x/dusk.md:block 689 (paragraph)
msgid "To generate a page object, execute the `dusk:page` Artisan command. All page objects will be placed in your application's `tests/Browser/Pages` directory:"
msgstr ""

#: docs/10.x/dusk.md:block 690 (code)
msgid "php artisan dusk:page Login\n"
msgstr ""

#: docs/10.x/dusk.md:block 692 (header)
msgid "Configuring Pages"
msgstr ""

#: docs/10.x/dusk.md:block 693 (paragraph)
msgid "By default, pages have three methods: `url`, `assert`, and `elements`. We will discuss the `url` and `assert` methods now. The `elements` method will be [discussed in more detail below](#shorthand-selectors)."
msgstr ""

#: docs/10.x/dusk.md:block 695 (header)
msgid "The `url` Method"
msgstr ""

#: docs/10.x/dusk.md:block 696 (paragraph)
msgid "The `url` method should return the path of the URL that represents the page. Dusk will use this URL when navigating to the page in the browser:"
msgstr ""

#: docs/10.x/dusk.md:block 697 (code)
msgid ""
"/**\n"
" * Get the URL for the page.\n"
" */\n"
"public function url(): string\n"
"{\n"
"    return '/login';\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 699 (header)
msgid "The `assert` Method"
msgstr ""

#: docs/10.x/dusk.md:block 700 (paragraph)
msgid "The `assert` method may make any assertions necessary to verify that the browser is actually on the given page. It is not actually necessary to place anything within this method; however, you are free to make these assertions if you wish. These assertions will be run automatically when navigating to the page:"
msgstr ""

#: docs/10.x/dusk.md:block 701 (code)
msgid ""
"/**\n"
" * Assert that the browser is on the page.\n"
" */\n"
"public function assert(Browser $browser): void\n"
"{\n"
"    $browser->assertPathIs($this->url());\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 703 (header)
msgid "Navigating to Pages"
msgstr ""

#: docs/10.x/dusk.md:block 704 (paragraph)
msgid "Once a page has been defined, you may navigate to it using the `visit` method:"
msgstr ""

#: docs/10.x/dusk.md:block 705 (code)
msgid ""
"use Tests\\Browser\\Pages\\Login;\n"
"\n"
"$browser->visit(new Login);\n"
msgstr ""

#: docs/10.x/dusk.md:block 706 (paragraph)
msgid "Sometimes you may already be on a given page and need to \"load\" the page's selectors and methods into the current test context. This is common when pressing a button and being redirected to a given page without explicitly navigating to it. In this situation, you may use the `on` method to load the page:"
msgstr ""

#: docs/10.x/dusk.md:block 707 (code)
msgid ""
"use Tests\\Browser\\Pages\\CreatePlaylist;\n"
"\n"
"$browser->visit('/dashboard')\n"
"        ->clickLink('Create Playlist')\n"
"        ->on(new CreatePlaylist)\n"
"        ->assertSee('@create');\n"
msgstr ""

#: docs/10.x/dusk.md:block 709 (header)
msgid "Shorthand Selectors"
msgstr ""

#: docs/10.x/dusk.md:block 710 (paragraph)
msgid "The `elements` method within page classes allows you to define quick, easy-to-remember shortcuts for any CSS selector on your page. For example, let's define a shortcut for the \"email\" input field of the application's login page:"
msgstr ""

#: docs/10.x/dusk.md:block 711 (code)
msgid ""
"/**\n"
" * Get the element shortcuts for the page.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function elements(): array\n"
"{\n"
"    return [\n"
"        '@email' => 'input[name=email]',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 712 (paragraph)
msgid "Once the shortcut has been defined, you may use the shorthand selector anywhere you would typically use a full CSS selector:"
msgstr ""

#: docs/10.x/dusk.md:block 713 (code)
msgid "$browser->type('@email', 'taylor@laravel.com');\n"
msgstr ""

#: docs/10.x/dusk.md:block 715 (header)
msgid "Global Shorthand Selectors"
msgstr ""

#: docs/10.x/dusk.md:block 716 (paragraph)
msgid "After installing Dusk, a base `Page` class will be placed in your `tests/Browser/Pages` directory. This class contains a `siteElements` method which may be used to define global shorthand selectors that should be available on every page throughout your application:"
msgstr ""

#: docs/10.x/dusk.md:block 717 (code)
msgid ""
"/**\n"
" * Get the global element shortcuts for the site.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public static function siteElements(): array\n"
"{\n"
"    return [\n"
"        '@element' => '#selector',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 719 (header)
msgid "Page Methods"
msgstr ""

#: docs/10.x/dusk.md:block 720 (paragraph)
msgid "In addition to the default methods defined on pages, you may define additional methods which may be used throughout your tests. For example, let's imagine we are building a music management application. A common action for one page of the application might be to create a playlist. Instead of re-writing the logic to create a playlist in each test, you may define a `createPlaylist` method on a page class:"
msgstr ""

#: docs/10.x/dusk.md:block 721 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser\\Pages;\n"
"\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"class Dashboard extends Page\n"
"{\n"
"    // Other page methods...\n"
"\n"
"    /**\n"
"     * Create a new playlist.\n"
"     */\n"
"    public function createPlaylist(Browser $browser, string $name): void\n"
"    {\n"
"        $browser->type('name', $name)\n"
"                ->check('share')\n"
"                ->press('Create Playlist');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 722 (paragraph)
msgid "Once the method has been defined, you may use it within any test that utilizes the page. The browser instance will automatically be passed as the first argument to custom page methods:"
msgstr ""

#: docs/10.x/dusk.md:block 723 (code)
msgid ""
"use Tests\\Browser\\Pages\\Dashboard;\n"
"\n"
"$browser->visit(new Dashboard)\n"
"        ->createPlaylist('My Playlist')\n"
"        ->assertSee('My Playlist');\n"
msgstr ""

#: docs/10.x/dusk.md:block 725 (header)
msgid "Components"
msgstr ""

#: docs/10.x/dusk.md:block 726 (paragraph)
msgid "Components are similar to Dusk’s “page objects”, but are intended for pieces of UI and functionality that are re-used throughout your application, such as a navigation bar or notification window. As such, components are not bound to specific URLs."
msgstr ""

#: docs/10.x/dusk.md:block 728 (header)
msgid "Generating Components"
msgstr ""

#: docs/10.x/dusk.md:block 729 (paragraph)
msgid "To generate a component, execute the `dusk:component` Artisan command. New components are placed in the `tests/Browser/Components` directory:"
msgstr ""

#: docs/10.x/dusk.md:block 730 (code)
msgid "php artisan dusk:component DatePicker\n"
msgstr ""

#: docs/10.x/dusk.md:block 731 (paragraph)
msgid "As shown above, a \"date picker\" is an example of a component that might exist throughout your application on a variety of pages. It can become cumbersome to manually write the browser automation logic to select a date in dozens of tests throughout your test suite. Instead, we can define a Dusk component to represent the date picker, allowing us to encapsulate that logic within the component:"
msgstr ""

#: docs/10.x/dusk.md:block 732 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser\\Components;\n"
"\n"
"use Laravel\\Dusk\\Browser;\n"
"use Laravel\\Dusk\\Component as BaseComponent;\n"
"\n"
"class DatePicker extends BaseComponent\n"
"{\n"
"    /**\n"
"     * Get the root selector for the component.\n"
"     */\n"
"    public function selector(): string\n"
"    {\n"
"        return '.date-picker';\n"
"    }\n"
"\n"
"    /**\n"
"     * Assert that the browser page contains the component.\n"
"     */\n"
"    public function assert(Browser $browser): void\n"
"    {\n"
"        $browser->assertVisible($this->selector());\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the element shortcuts for the component.\n"
"     *\n"
"     * @return array<string, string>\n"
"     */\n"
"    public function elements(): array\n"
"    {\n"
"        return [\n"
"            '@date-field' => 'input.datepicker-input',\n"
"            '@year-list' => 'div > div.datepicker-years',\n"
"            '@month-list' => 'div > div.datepicker-months',\n"
"            '@day-list' => 'div > div.datepicker-days',\n"
"        ];\n"
"    }\n"
"\n"
"    /**\n"
"     * Select the given date.\n"
"     */\n"
"    public function selectDate(Browser $browser, int $year, int $month, int $day): void\n"
"    {\n"
"        $browser->click('@date-field')\n"
"                ->within('@year-list', function (Browser $browser) use ($year) {\n"
"                    $browser->click($year);\n"
"                })\n"
"                ->within('@month-list', function (Browser $browser) use ($month) {\n"
"                    $browser->click($month);\n"
"                })\n"
"                ->within('@day-list', function (Browser $browser) use ($day) {\n"
"                    $browser->click($day);\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 734 (header)
msgid "Using Components"
msgstr ""

#: docs/10.x/dusk.md:block 735 (paragraph)
msgid "Once the component has been defined, we can easily select a date within the date picker from any test. And, if the logic necessary to select a date changes, we only need to update the component:"
msgstr ""

#: docs/10.x/dusk.md:block 736 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\Browser\\Components\\DatePicker;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    /**\n"
"     * A basic component test example.\n"
"     */\n"
"    public function test_basic_example(): void\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->within(new DatePicker, function (Browser $browser) {\n"
"                        $browser->selectDate(2019, 1, 30);\n"
"                    })\n"
"                    ->assertSee('January');\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 738 (header)
msgid "Continuous Integration"
msgstr ""

#: docs/10.x/dusk.md:block 739 (quote)
msgid "[!WARNING] Most Dusk continuous integration configurations expect your Laravel application to be served using the built-in PHP development server on port 8000. Therefore, before continuing, you should ensure that your continuous integration environment has an `APP_URL` environment variable value of `http://127.0.0.1:8000`."
msgstr ""

#: docs/10.x/dusk.md:block 741 (header)
msgid "Heroku CI"
msgstr ""

#: docs/10.x/dusk.md:block 742 (paragraph)
msgid "To run Dusk tests on [Heroku CI](https://www.heroku.com/continuous-integration), add the following Google Chrome buildpack and scripts to your Heroku `app.json` file:"
msgstr ""

#: docs/10.x/dusk.md:block 743 (code)
msgid ""
"{\n"
"  \"environments\": {\n"
"    \"test\": {\n"
"      \"buildpacks\": [\n"
"        { \"url\": \"heroku/php\" },\n"
"        { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n"
"      ],\n"
"      \"scripts\": {\n"
"        \"test-setup\": \"cp .env.testing .env\",\n"
"        \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &' && nohup bash -c 'php artisan serve --no-reload > /dev/null 2>&1 &' && php artisan dusk\"\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: docs/10.x/dusk.md:block 745 (header)
msgid "Travis CI"
msgstr ""

#: docs/10.x/dusk.md:block 746 (paragraph)
msgid "To run your Dusk tests on [Travis CI](https://travis-ci.org), use the following `.travis.yml` configuration. Since Travis CI is not a graphical environment, we will need to take some extra steps in order to launch a Chrome browser. In addition, we will use `php artisan serve` to launch PHP's built-in web server:"
msgstr ""

#: docs/10.x/dusk.md:block 747 (code)
msgid ""
"language: php\n"
"\n"
"php:\n"
"  - 7.3\n"
"\n"
"addons:\n"
"  chrome: stable\n"
"\n"
"install:\n"
"  - cp .env.testing .env\n"
"  - travis_retry composer install --no-interaction --prefer-dist\n"
"  - php artisan key:generate\n"
"  - php artisan dusk:chrome-driver\n"
"\n"
"before_script:\n"
"  - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &\n"
"  - php artisan serve --no-reload &\n"
"\n"
"script:\n"
"  - php artisan dusk\n"
msgstr ""

#: docs/10.x/dusk.md:block 749 (header)
msgid "GitHub Actions"
msgstr ""

#: docs/10.x/dusk.md:block 750 (paragraph)
msgid "If you are using [GitHub Actions](https://github.com/features/actions) to run your Dusk tests, you may use the following configuration file as a starting point. Like TravisCI, we will use the `php artisan serve` command to launch PHP's built-in web server:"
msgstr ""

#: docs/10.x/dusk.md:block 751 (code)
msgid ""
"name: CI\n"
"on: [push]\n"
"jobs:\n"
"\n"
"  dusk-php:\n"
"    runs-on: ubuntu-latest\n"
"    env:\n"
"      APP_URL: \"http://127.0.0.1:8000\"\n"
"      DB_USERNAME: root\n"
"      DB_PASSWORD: root\n"
"      MAIL_MAILER: log\n"
"    steps:\n"
"      - uses: actions/checkout@v4\n"
"      - name: Prepare The Environment\n"
"        run: cp .env.example .env\n"
"      - name: Create Database\n"
"        run: |\n"
"          sudo systemctl start mysql\n"
"          mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE \\`my-database\\` character set UTF8mb4 collate utf8mb4_bin;\"\n"
"      - name: Install Composer Dependencies\n"
"        run: composer install --no-progress --prefer-dist --optimize-autoloader\n"
"      - name: Generate Application Key\n"
"        run: php artisan key:generate\n"
"      - name: Upgrade Chrome Driver\n"
"        run: php artisan dusk:chrome-driver --detect\n"
"      - name: Start Chrome Driver\n"
"        run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"      - name: Run Laravel Server\n"
"        run: php artisan serve --no-reload &\n"
"      - name: Run Dusk Tests\n"
"        run: php artisan dusk\n"
"      - name: Upload Screenshots\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: screenshots\n"
"          path: tests/Browser/screenshots\n"
"      - name: Upload Console Logs\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: console\n"
"          path: tests/Browser/console\n"
msgstr ""

#: docs/10.x/dusk.md:block 753 (header)
msgid "Chipper CI"
msgstr ""

#: docs/10.x/dusk.md:block 754 (paragraph)
msgid "If you are using [Chipper CI](https://chipperci.com) to run your Dusk tests, you may use the following configuration file as a starting point. We will use PHP's built-in server to run Laravel so we can listen for requests:"
msgstr ""

#: docs/10.x/dusk.md:block 755 (code)
msgid ""
"# file .chipperci.yml\n"
"version: 1\n"
"\n"
"environment:\n"
"  php: 8.2\n"
"  node: 16\n"
"\n"
"# Include Chrome in the build environment\n"
"services:\n"
"  - dusk\n"
"\n"
"# Build all commits\n"
"on:\n"
"   push:\n"
"      branches: .*\n"
"\n"
"pipeline:\n"
"  - name: Setup\n"
"    cmd: |\n"
"      cp -v .env.example .env\n"
"      composer install --no-interaction --prefer-dist --optimize-autoloader\n"
"      php artisan key:generate\n"
"      \n"
"      # Create a dusk env file, ensuring APP_URL uses BUILD_HOST\n"
"      cp -v .env .env.dusk.ci\n"
"      sed -i \"s@APP_URL=.*@APP_URL=http://$BUILD_HOST:8000@g\" .env.dusk.ci\n"
"\n"
"  - name: Compile Assets\n"
"    cmd: |\n"
"      npm ci --no-audit\n"
"      npm run build\n"
"\n"
"  - name: Browser Tests\n"
"    cmd: |\n"
"      php -S [::0]:8000 -t public 2>server.log &\n"
"      sleep 2\n"
"      php artisan dusk:chrome-driver $CHROME_DRIVER\n"
"      php artisan dusk --env=ci\n"
msgstr ""

#: docs/10.x/dusk.md:block 756 (paragraph)
msgid "To learn more about running Dusk tests on Chipper CI, including how to use databases, consult the [official Chipper CI documentation](https://chipperci.com/docs/testing/laravel-dusk-new/)."
msgstr ""

#: docs/11.x/dusk.md:block 39 (code)
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"uses(DatabaseMigrations::class);\n"
"\n"
"//\n"
msgstr ""

#: docs/11.x/dusk.md:block 40 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"\n"
"    //\n"
"}\n"
msgstr ""

#: docs/11.x/dusk.md:block 45 (code)
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Foundation\\Testing\\DatabaseTruncation;\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"uses(DatabaseTruncation::class);\n"
"\n"
"//\n"
msgstr ""

#: docs/11.x/dusk.md:block 46 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseTruncation;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseTruncation;\n"
"\n"
"    //\n"
"}\n"
msgstr ""

#: docs/11.x/dusk.md:block 48 (quote)
msgid "[!NOTE] If you are using Pest, you should define properties or methods on the base `DuskTestCase` class or on any class your test file extends."
msgstr ""

#: docs/11.x/dusk.md:block 62 (paragraph)
msgid "The `dusk` command accepts any argument that is normally accepted by the Pest / PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://docs.phpunit.de/en/10.5/annotations.html#group):"
msgstr ""

#: docs/11.x/dusk.md:block 80 (code)
msgid ""
"<?php\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"uses(DatabaseMigrations::class);\n"
"\n"
"test('basic example', function () {\n"
"    $user = User::factory()->create([\n"
"        'email' => 'taylor@laravel.com',\n"
"    ]);\n"
"\n"
"    $this->browse(function (Browser $browser) use ($user) {\n"
"        $browser->visit('/login')\n"
"                ->type('email', $user->email)\n"
"                ->type('password', 'password')\n"
"                ->press('Login')\n"
"                ->assertPathIs('/home');\n"
"    });\n"
"});\n"
msgstr ""

#: docs/11.x/dusk.md:block 81 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"\n"
"    /**\n"
"     * A basic browser test example.\n"
"     */\n"
"    public function test_basic_example(): void\n"
"    {\n"
"        $user = User::factory()->create([\n"
"            'email' => 'taylor@laravel.com',\n"
"        ]);\n"
"\n"
"        $this->browse(function (Browser $browser) use ($user) {\n"
"            $browser->visit('/login')\n"
"                    ->type('email', $user->email)\n"
"                    ->type('password', 'password')\n"
"                    ->press('Login')\n"
"                    ->assertPathIs('/home');\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/11.x/dusk.md:block 138 (paragraph)
msgid "The `screenshotElement` method may be used to take a screenshot of a specific element on the page:"
msgstr ""

#: docs/11.x/dusk.md:block 139 (code)
msgid "$browser->screenshotElement('#selector', 'filename');\n"
msgstr ""

#: docs/11.x/dusk.md:block 287 (code)
msgid ""
"$browser->withinFrame('#credit-card-details', function ($browser) {\n"
"    $browser->type('input[name=\"cardnumber\"]', '4242424242424242')\n"
"        ->type('input[name=\"exp-date\"]', '1224')\n"
"        ->type('input[name=\"cvc\"]', '123')\n"
"        ->press('Pay');\n"
"});\n"
msgstr ""

#: docs/11.x/dusk.md:block 378 (paragraph)
msgid "[assertTitle](#assert-title) [assertTitleContains](#assert-title-contains) [assertUrlIs](#assert-url-is) [assertSchemeIs](#assert-scheme-is) [assertSchemeIsNot](#assert-scheme-is-not) [assertHostIs](#assert-host-is) [assertHostIsNot](#assert-host-is-not) [assertPortIs](#assert-port-is) [assertPortIsNot](#assert-port-is-not) [assertPathBeginsWith](#assert-path-begins-with) [assertPathEndsWith](#assert-path-ends-with) [assertPathContains](#assert-path-contains) [assertPathIs](#assert-path-is) [assertPathIsNot](#assert-path-is-not) [assertRouteIs](#assert-route-is) [assertQueryStringHas](#assert-query-string-has) [assertQueryStringMissing](#assert-query-string-missing) [assertFragmentIs](#assert-fragment-is) [assertFragmentBeginsWith](#assert-fragment-begins-with) [assertFragmentIsNot](#assert-fragment-is-not) [assertHasCookie](#assert-has-cookie) [assertHasPlainCookie](#assert-has-plain-cookie) [assertCookieMissing](#assert-cookie-missing) [assertPlainCookieMissing](#assert-plain-cookie-missing) [assertCookieValue](#assert-cookie-value) [assertPlainCookieValue](#assert-plain-cookie-value) [assertSee](#assert-see) [assertDontSee](#assert-dont-see) [assertSeeIn](#assert-see-in) [assertDontSeeIn](#assert-dont-see-in) [assertSeeAnythingIn](#assert-see-anything-in) [assertSeeNothingIn](#assert-see-nothing-in) [assertScript](#assert-script) [assertSourceHas](#assert-source-has) [assertSourceMissing](#assert-source-missing) [assertSeeLink](#assert-see-link) [assertDontSeeLink](#assert-dont-see-link) [assertInputValue](#assert-input-value) [assertInputValueIsNot](#assert-input-value-is-not) [assertChecked](#assert-checked) [assertNotChecked](#assert-not-checked) [assertIndeterminate](#assert-indeterminate) [assertRadioSelected](#assert-radio-selected) [assertRadioNotSelected](#assert-radio-not-selected) [assertSelected](#assert-selected) [assertNotSelected](#assert-not-selected) [assertSelectHasOptions](#assert-select-has-options) [assertSelectMissingOptions](#assert-select-missing-options) [assertSelectHasOption](#assert-select-has-option) [assertSelectMissingOption](#assert-select-missing-option) [assertValue](#assert-value) [assertValueIsNot](#assert-value-is-not) [assertAttribute](#assert-attribute) [assertAttributeContains](#assert-attribute-contains) [assertAttributeDoesntContain](#assert-attribute-doesnt-contain) [assertAriaAttribute](#assert-aria-attribute) [assertDataAttribute](#assert-data-attribute) [assertVisible](#assert-visible) [assertPresent](#assert-present) [assertNotPresent](#assert-not-present) [assertMissing](#assert-missing) [assertInputPresent](#assert-input-present) [assertInputMissing](#assert-input-missing) [assertDialogOpened](#assert-dialog-opened) [assertEnabled](#assert-enabled) [assertDisabled](#assert-disabled) [assertButtonEnabled](#assert-button-enabled) [assertButtonDisabled](#assert-button-disabled) [assertFocused](#assert-focused) [assertNotFocused](#assert-not-focused) [assertAuthenticated](#assert-authenticated) [assertGuest](#assert-guest) [assertAuthenticatedAs](#assert-authenticated-as) [assertVue](#assert-vue) [assertVueIsNot](#assert-vue-is-not) [assertVueContains](#assert-vue-contains) [assertVueDoesntContain](#assert-vue-doesnt-contain)"
msgstr ""

#: docs/11.x/dusk.md:block 421 (header)
msgid "assertPathEndsWith"
msgstr ""

#: docs/11.x/dusk.md:block 422 (paragraph)
msgid "Assert that the current URL path ends with the given path:"
msgstr ""

#: docs/11.x/dusk.md:block 423 (code)
msgid "$browser->assertPathEndsWith('/home');\n"
msgstr ""

#: docs/11.x/dusk.md:block 425 (header)
msgid "assertPathContains"
msgstr ""

#: docs/11.x/dusk.md:block 426 (paragraph)
msgid "Assert that the current URL path contains the given path:"
msgstr ""

#: docs/11.x/dusk.md:block 427 (code)
msgid "$browser->assertPathContains('/home');\n"
msgstr ""

#: docs/11.x/dusk.md:block 683 (code)
msgid ""
"test('vue', function () {\n"
"    $this->browse(function (Browser $browser) {\n"
"        $browser->visit('/')\n"
"                ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"    });\n"
"});\n"
msgstr ""

#: docs/11.x/dusk.md:block 734 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser\\Pages;\n"
"\n"
"use Laravel\\Dusk\\Browser;\n"
"use Laravel\\Dusk\\Page;\n"
"\n"
"class Dashboard extends Page\n"
"{\n"
"    // Other page methods...\n"
"\n"
"    /**\n"
"     * Create a new playlist.\n"
"     */\n"
"    public function createPlaylist(Browser $browser, string $name): void\n"
"    {\n"
"        $browser->type('name', $name)\n"
"                ->check('share')\n"
"                ->press('Create Playlist');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/11.x/dusk.md:block 749 (code)
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\Browser\\Components\\DatePicker;\n"
"\n"
"uses(DatabaseMigrations::class);\n"
"\n"
"test('basic example', function () {\n"
"    $this->browse(function (Browser $browser) {\n"
"        $browser->visit('/')\n"
"                ->within(new DatePicker, function (Browser $browser) {\n"
"                    $browser->selectDate(2019, 1, 30);\n"
"                })\n"
"                ->assertSee('January');\n"
"    });\n"
"});\n"
msgstr ""

#: docs/11.x/dusk.md:block 769 (code)
msgid ""
"# file .chipperci.yml\n"
"version: 1\n"
"\n"
"environment:\n"
"  php: 8.2\n"
"  node: 16\n"
"\n"
"# Include Chrome in the build environment\n"
"services:\n"
"  - dusk\n"
"\n"
"# Build all commits\n"
"on:\n"
"   push:\n"
"      branches: .*\n"
"\n"
"pipeline:\n"
"  - name: Setup\n"
"    cmd: |\n"
"      cp -v .env.example .env\n"
"      composer install --no-interaction --prefer-dist --optimize-autoloader\n"
"      php artisan key:generate\n"
"\n"
"      # Create a dusk env file, ensuring APP_URL uses BUILD_HOST\n"
"      cp -v .env .env.dusk.ci\n"
"      sed -i \"s@APP_URL=.*@APP_URL=http://$BUILD_HOST:8000@g\" .env.dusk.ci\n"
"\n"
"  - name: Compile Assets\n"
"    cmd: |\n"
"      npm ci --no-audit\n"
"      npm run build\n"
"\n"
"  - name: Browser Tests\n"
"    cmd: |\n"
"      php -S [::0]:8000 -t public 2>server.log &\n"
"      sleep 2\n"
"      php artisan dusk:chrome-driver $CHROME_DRIVER\n"
"      php artisan dusk --env=ci\n"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Database Migrations](#migrations)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Taking A Screenshot](#taking-a-screenshot)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Storing Console Output To Disk](#storing-console-output-to-disk)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Storing Page Source To Disk](#storing-page-source-to-disk)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Text, Values, & Attributes](#text-values-and-attributes)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Using The Keyboard](#using-the-keyboard)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Using The Mouse](#using-the-mouse)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Waiting For Elements](#waiting-for-elements)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Scrolling An Element Into View](#scrolling-an-element-into-view)"
msgstr ""

#: docs/8.x/dusk.md:block 2 (unordered list)
msgid "[Navigating To Pages](#navigating-to-pages)"
msgstr ""

#: docs/8.x/dusk.md:block 9 (code)
msgid "composer require --dev laravel/dusk\n"
msgstr ""

#: docs/8.x/dusk.md:block 10 (quote)
msgid "{note} If you are manually registering Dusk's service provider, you should **never** register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application."
msgstr ""

#: docs/8.x/dusk.md:block 11 (paragraph)
msgid "After installing the Dusk package, execute the `dusk:install` Artisan command. The `dusk:install` command will create a `tests/Browser` directory and an example Dusk test:"
msgstr ""

#: docs/8.x/dusk.md:block 14 (quote)
msgid "{tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please also consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr ""

#: docs/8.x/dusk.md:block 17 (paragraph)
msgid "If you would like to install a different version of ChromeDriver than what is included with Laravel Dusk, you may use the `dusk:chrome-driver` command:"
msgstr ""

#: docs/8.x/dusk.md:block 19 (quote)
msgid "{note} Dusk requires the `chromedriver` binaries to be executable. If you're having problems running Dusk, you should ensure the binaries are executable using the following command: `chmod -R 0755 vendor/laravel/dusk/bin/`."
msgstr ""

#: docs/8.x/dusk.md:block 24 (code)
msgid ""
"/**\n"
" * Prepare for Dusk test execution.\n"
" *\n"
" * @beforeClass\n"
" * @return void\n"
" */\n"
"public static function prepare()\n"
"{\n"
"    // static::startChromeDriver();\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 26 (code)
msgid ""
"/**\n"
" * Create the RemoteWebDriver instance.\n"
" *\n"
" * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
" */\n"
"protected function driver()\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 34 (header)
msgid "Database Migrations"
msgstr ""

#: docs/8.x/dusk.md:block 35 (paragraph)
msgid "Most of the tests you write will interact with pages that retrieve data from your application's database; however, your Dusk tests should never use the `RefreshDatabase `trait. The `RefreshDatabase` trait leverages database transactions which will not be applicable or available across HTTP requests. Instead, use the `DatabaseMigrations` trait, which re-migrates the database for each test:"
msgstr ""

#: docs/8.x/dusk.md:block 37 (quote)
msgid "{note} SQLite in-memory databases may not be used when executing Dusk tests. Since the browser executes within its own process, it will not be able to access the in-memory databases of other processes."
msgstr ""

#: docs/8.x/dusk.md:block 44 (paragraph)
msgid "The `dusk` command accepts any argument that is normally accepted by the PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group):"
msgstr ""

#: docs/8.x/dusk.md:block 46 (quote)
msgid "{tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr ""

#: docs/8.x/dusk.md:block 52 (code)
msgid ""
"/**\n"
" * Create the RemoteWebDriver instance.\n"
" *\n"
" * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
" */\n"
"protected function driver()\n"
"{\n"
"    return RemoteWebDriver::create(\n"
"        'http://localhost:9515', DesiredCapabilities::chrome()\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 62 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Chrome;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    use DatabaseMigrations;\n"
"\n"
"    /**\n"
"     * A basic browser test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_example()\n"
"    {\n"
"        $user = User::factory()->create([\n"
"            'email' => 'taylor@laravel.com',\n"
"        ]);\n"
"\n"
"        $this->browse(function ($browser) use ($user) {\n"
"            $browser->visit('/login')\n"
"                    ->type('email', $user->email)\n"
"                    ->type('password', 'password')\n"
"                    ->press('Login')\n"
"                    ->assertPathIs('/home');\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 67 (code)
msgid ""
"$this->browse(function ($first, $second) {\n"
"    $first->loginAs(User::find(1))\n"
"          ->visit('/home')\n"
"          ->waitForText('Message');\n"
"\n"
"    $second->loginAs(User::find(2))\n"
"           ->visit('/home')\n"
"           ->waitForText('Message')\n"
"           ->type('message', 'Hey Taylor')\n"
"           ->press('Send');\n"
"\n"
"    $first->waitForText('Hey Taylor')\n"
"          ->assertSee('Jeffrey Way');\n"
"});\n"
msgstr ""

#: docs/8.x/dusk.md:block 93 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"class DuskServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register Dusk's browser macros.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Browser::macro('scrollToElement', function ($element = null) {\n"
"            $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n"
"\n"
"            return $this;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 95 (code)
msgid ""
"$this->browse(function ($browser) use ($user) {\n"
"    $browser->visit('/pay')\n"
"            ->scrollToElement('#credit-card-details')\n"
"            ->assertSee('Enter Credit Card Details');\n"
"});\n"
msgstr ""

#: docs/8.x/dusk.md:block 99 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$this->browse(function ($browser) {\n"
"    $browser->loginAs(User::find(1))\n"
"          ->visit('/home');\n"
"});\n"
msgstr ""

#: docs/8.x/dusk.md:block 100 (quote)
msgid "{note} After using the `loginAs` method, the user session will be maintained for all tests within the file."
msgstr ""

#: docs/8.x/dusk.md:block 114 (header)
msgid "Taking A Screenshot"
msgstr ""

#: docs/8.x/dusk.md:block 118 (header)
msgid "Storing Console Output To Disk"
msgstr ""

#: docs/8.x/dusk.md:block 122 (header)
msgid "Storing Page Source To Disk"
msgstr ""

#: docs/8.x/dusk.md:block 134 (header)
msgid "Text, Values, & Attributes"
msgstr ""

#: docs/8.x/dusk.md:block 136 (header)
msgid "Retrieving & Setting Values"
msgstr ""

#: docs/8.x/dusk.md:block 186 (quote)
msgid "{note} The attach function requires the `Zip` PHP extension to be installed and enabled on your server."
msgstr ""

#: docs/8.x/dusk.md:block 189 (paragraph)
msgid "The `press` method may be used to click a button element on the page. The first argument given to the `press` method may be either the display text of the button or a CSS / Dusk selector:"
msgstr ""

#: docs/8.x/dusk.md:block 191 (paragraph)
msgid "When submitting forms, many application's disable the form's submission button after it is pressed and then re-enable the button when the form submission's HTTP request is complete. To press a button and wait for the button to be re-enabled, you may use the `pressAndWaitFor` method:"
msgstr ""

#: docs/8.x/dusk.md:block 199 (quote)
msgid "{note} These methods interact with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test's duration."
msgstr ""

#: docs/8.x/dusk.md:block 201 (header)
msgid "Using The Keyboard"
msgstr ""

#: docs/8.x/dusk.md:block 206 (quote)
msgid "{tip} All modifier keys such as `{command}` are wrapped in `{}` characters, and match the constants defined in the `Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php)."
msgstr ""

#: docs/8.x/dusk.md:block 208 (header)
msgid "Using The Mouse"
msgstr ""

#: docs/8.x/dusk.md:block 210 (header)
msgid "Clicking On Elements"
msgstr ""

#: docs/8.x/dusk.md:block 218 (code)
msgid "$browser->doubleClick();\n"
msgstr ""

#: docs/8.x/dusk.md:block 222 (code)
msgid ""
"$browser->clickAndHold()\n"
"        ->pause(1000)\n"
"        ->releaseMouse();\n"
msgstr ""

#: docs/8.x/dusk.md:block 228 (header)
msgid "Drag & Drop"
msgstr ""

#: docs/8.x/dusk.md:block 250 (code)
msgid ""
"$browser->with('.table', function ($table) {\n"
"    $table->assertSee('Hello World')\n"
"          ->clickLink('Delete');\n"
"});\n"
msgstr ""

#: docs/8.x/dusk.md:block 252 (code)
msgid ""
" $browser->with('.table', function ($table) {\n"
"    // Current scope is `body .table`...\n"
"\n"
"    $browser->elsewhere('.page-title', function ($title) {\n"
"        // Current scope is `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n"
"\n"
"    $browser->elsewhereWhenAvailable('.page-title', function ($title) {\n"
"        // Current scope is `body .page-title`...\n"
"        $title->assertSee('Hello World');\n"
"    });\n"
" });\n"
msgstr ""

#: docs/8.x/dusk.md:block 254 (header)
msgid "Waiting For Elements"
msgstr ""

#: docs/8.x/dusk.md:block 261 (header)
msgid "Waiting For Selectors"
msgstr ""

#: docs/8.x/dusk.md:block 273 (code)
msgid ""
"$browser->whenAvailable('.modal', function ($modal) {\n"
"    $modal->assertSee('Hello World')\n"
"          ->press('OK');\n"
"});\n"
msgstr ""

#: docs/8.x/dusk.md:block 275 (header)
msgid "Waiting For Text"
msgstr ""

#: docs/8.x/dusk.md:block 281 (header)
msgid "Waiting For Links"
msgstr ""

#: docs/8.x/dusk.md:block 285 (header)
msgid "Waiting On The Page Location"
msgstr ""

#: docs/8.x/dusk.md:block 299 (header)
msgid "Waiting On JavaScript Expressions"
msgstr ""

#: docs/8.x/dusk.md:block 303 (header)
msgid "Waiting On Vue Expressions"
msgstr ""

#: docs/8.x/dusk.md:block 307 (header)
msgid "Waiting With A Callback"
msgstr ""

#: docs/8.x/dusk.md:block 311 (header)
msgid "Scrolling An Element Into View"
msgstr ""

#: docs/8.x/dusk.md:block 319 (paragraph)
msgid "[assertTitle](#assert-title) [assertTitleContains](#assert-title-contains) [assertUrlIs](#assert-url-is) [assertSchemeIs](#assert-scheme-is) [assertSchemeIsNot](#assert-scheme-is-not) [assertHostIs](#assert-host-is) [assertHostIsNot](#assert-host-is-not) [assertPortIs](#assert-port-is) [assertPortIsNot](#assert-port-is-not) [assertPathBeginsWith](#assert-path-begins-with) [assertPathIs](#assert-path-is) [assertPathIsNot](#assert-path-is-not) [assertRouteIs](#assert-route-is) [assertQueryStringHas](#assert-query-string-has) [assertQueryStringMissing](#assert-query-string-missing) [assertFragmentIs](#assert-fragment-is) [assertFragmentBeginsWith](#assert-fragment-begins-with) [assertFragmentIsNot](#assert-fragment-is-not) [assertHasCookie](#assert-has-cookie) [assertHasPlainCookie](#assert-has-plain-cookie) [assertCookieMissing](#assert-cookie-missing) [assertPlainCookieMissing](#assert-plain-cookie-missing) [assertCookieValue](#assert-cookie-value) [assertPlainCookieValue](#assert-plain-cookie-value) [assertSee](#assert-see) [assertDontSee](#assert-dont-see) [assertSeeIn](#assert-see-in) [assertDontSeeIn](#assert-dont-see-in) [assertSeeAnythingIn](#assert-see-anything-in) [assertSeeNothingIn](#assert-see-nothing-in) [assertScript](#assert-script) [assertSourceHas](#assert-source-has) [assertSourceMissing](#assert-source-missing) [assertSeeLink](#assert-see-link) [assertDontSeeLink](#assert-dont-see-link) [assertInputValue](#assert-input-value) [assertInputValueIsNot](#assert-input-value-is-not) [assertChecked](#assert-checked) [assertNotChecked](#assert-not-checked) [assertRadioSelected](#assert-radio-selected) [assertRadioNotSelected](#assert-radio-not-selected) [assertSelected](#assert-selected) [assertNotSelected](#assert-not-selected) [assertSelectHasOptions](#assert-select-has-options) [assertSelectMissingOptions](#assert-select-missing-options) [assertSelectHasOption](#assert-select-has-option) [assertSelectMissingOption](#assert-select-missing-option) [assertValue](#assert-value) [assertValueIsNot](#assert-value-is-not) [assertAttribute](#assert-attribute) [assertAttributeContains](#assert-attribute-contains) [assertAriaAttribute](#assert-aria-attribute) [assertDataAttribute](#assert-data-attribute) [assertVisible](#assert-visible) [assertPresent](#assert-present) [assertNotPresent](#assert-not-present) [assertMissing](#assert-missing) [assertInputPresent](#assert-input-present) [assertInputMissing](#assert-input-missing) [assertDialogOpened](#assert-dialog-opened) [assertEnabled](#assert-enabled) [assertDisabled](#assert-disabled) [assertButtonEnabled](#assert-button-enabled) [assertButtonDisabled](#assert-button-disabled) [assertFocused](#assert-focused) [assertNotFocused](#assert-not-focused) [assertAuthenticated](#assert-authenticated) [assertGuest](#assert-guest) [assertAuthenticatedAs](#assert-authenticated-as) [assertVue](#assert-vue) [assertVueIsNot](#assert-vue-is-not) [assertVueContains](#assert-vue-contains) [assertVueDoesNotContain](#assert-vue-does-not-contain)"
msgstr ""

#: docs/8.x/dusk.md:block 608 (code)
msgid ""
"/**\n"
" * A basic Vue test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function testVue()\n"
"{\n"
"    $this->browse(function (Browser $browser) {\n"
"        $browser->visit('/')\n"
"                ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 618 (header)
msgid "assertVueDoesNotContain"
msgstr ""

#: docs/8.x/dusk.md:block 620 (code)
msgid "$browser->assertVueDoesNotContain($property, $value, $componentSelector = null);\n"
msgstr ""

#: docs/8.x/dusk.md:block 634 (code)
msgid ""
"/**\n"
" * Get the URL for the page.\n"
" *\n"
" * @return string\n"
" */\n"
"public function url()\n"
"{\n"
"    return '/login';\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 638 (code)
msgid ""
"/**\n"
" * Assert that the browser is on the page.\n"
" *\n"
" * @return void\n"
" */\n"
"public function assert(Browser $browser)\n"
"{\n"
"    $browser->assertPathIs($this->url());\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 640 (header)
msgid "Navigating To Pages"
msgstr ""

#: docs/8.x/dusk.md:block 648 (code)
msgid ""
"/**\n"
" * Get the element shortcuts for the page.\n"
" *\n"
" * @return array\n"
" */\n"
"public function elements()\n"
"{\n"
"    return [\n"
"        '@email' => 'input[name=email]',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 654 (code)
msgid ""
"/**\n"
" * Get the global element shortcuts for the site.\n"
" *\n"
" * @return array\n"
" */\n"
"public static function siteElements()\n"
"{\n"
"    return [\n"
"        '@element' => '#selector',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 658 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser\\Pages;\n"
"\n"
"use Laravel\\Dusk\\Browser;\n"
"\n"
"class Dashboard extends Page\n"
"{\n"
"    // Other page methods...\n"
"\n"
"    /**\n"
"     * Create a new playlist.\n"
"     *\n"
"     * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"     * @param  string  $name\n"
"     * @return void\n"
"     */\n"
"    public function createPlaylist(Browser $browser, $name)\n"
"    {\n"
"        $browser->type('name', $name)\n"
"                ->check('share')\n"
"                ->press('Create Playlist');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 669 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser\\Components;\n"
"\n"
"use Laravel\\Dusk\\Browser;\n"
"use Laravel\\Dusk\\Component as BaseComponent;\n"
"\n"
"class DatePicker extends BaseComponent\n"
"{\n"
"    /**\n"
"     * Get the root selector for the component.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function selector()\n"
"    {\n"
"        return '.date-picker';\n"
"    }\n"
"\n"
"    /**\n"
"     * Assert that the browser page contains the component.\n"
"     *\n"
"     * @param  Browser  $browser\n"
"     * @return void\n"
"     */\n"
"    public function assert(Browser $browser)\n"
"    {\n"
"        $browser->assertVisible($this->selector());\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the element shortcuts for the component.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function elements()\n"
"    {\n"
"        return [\n"
"            '@date-field' => 'input.datepicker-input',\n"
"            '@year-list' => 'div > div.datepicker-years',\n"
"            '@month-list' => 'div > div.datepicker-months',\n"
"            '@day-list' => 'div > div.datepicker-days',\n"
"        ];\n"
"    }\n"
"\n"
"    /**\n"
"     * Select the given date.\n"
"     *\n"
"     * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"     * @param  int  $year\n"
"     * @param  int  $month\n"
"     * @param  int  $day\n"
"     * @return void\n"
"     */\n"
"    public function selectDate(Browser $browser, $year, $month, $day)\n"
"    {\n"
"        $browser->click('@date-field')\n"
"                ->within('@year-list', function ($browser) use ($year) {\n"
"                    $browser->click($year);\n"
"                })\n"
"                ->within('@month-list', function ($browser) use ($month) {\n"
"                    $browser->click($month);\n"
"                })\n"
"                ->within('@day-list', function ($browser) use ($day) {\n"
"                    $browser->click($day);\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 673 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Browser;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"use Laravel\\Dusk\\Browser;\n"
"use Tests\\Browser\\Components\\DatePicker;\n"
"use Tests\\DuskTestCase;\n"
"\n"
"class ExampleTest extends DuskTestCase\n"
"{\n"
"    /**\n"
"     * A basic component test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testBasicExample()\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->within(new DatePicker, function ($browser) {\n"
"                        $browser->selectDate(2019, 1, 30);\n"
"                    })\n"
"                    ->assertSee('January');\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/dusk.md:block 676 (quote)
msgid "{note} Most Dusk continuous integration configurations expect your Laravel application to be served using the built-in PHP development server on port 8000. Therefore, before continuing, you should ensure that your continuous integration environment has an `APP_URL` environment variable value of `http://127.0.0.1:8000`."
msgstr ""

#: docs/8.x/dusk.md:block 687 (paragraph)
msgid "If you are using [Github Actions](https://github.com/features/actions) to run your Dusk tests, you may use the following configuration file as a starting point. Like TravisCI, we will use the `php artisan serve` command to launch PHP's built-in web server:"
msgstr ""

#: docs/8.x/dusk.md:block 688 (code)
msgid ""
"name: CI\n"
"on: [push]\n"
"jobs:\n"
"\n"
"  dusk-php:\n"
"    runs-on: ubuntu-latest\n"
"    steps:\n"
"      - uses: actions/checkout@v2\n"
"      - name: Prepare The Environment\n"
"        run: cp .env.example .env\n"
"      - name: Create Database\n"
"        run: |\n"
"          sudo systemctl start mysql\n"
"          mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE 'my-database' character set UTF8mb4 collate utf8mb4_bin;\"\n"
"      - name: Install Composer Dependencies\n"
"        run: composer install --no-progress --prefer-dist --optimize-autoloader\n"
"      - name: Generate Application Key\n"
"        run: php artisan key:generate\n"
"      - name: Upgrade Chrome Driver\n"
"        run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d \" \" -f3 | cut -d \".\" -f1`\n"
"      - name: Start Chrome Driver\n"
"        run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"      - name: Run Laravel Server\n"
"        run: php artisan serve --no-reload &\n"
"      - name: Run Dusk Tests\n"
"        env:\n"
"          APP_URL: \"http://127.0.0.1:8000\"\n"
"        run: php artisan dusk\n"
"      - name: Upload Screenshots\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: screenshots\n"
"          path: tests/Browser/screenshots\n"
"      - name: Upload Console Logs\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: console\n"
"          path: tests/Browser/console\n"
msgstr ""

#: docs/9.x/dusk.md:block 2 (unordered list)
msgid "[Resetting The Database After Each Test](#resetting-the-database-after-each-test)"
msgstr ""

#: docs/9.x/dusk.md:block 10 (quote)
msgid "**Warning** If you are manually registering Dusk's service provider, you should **never** register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application."
msgstr ""

#: docs/9.x/dusk.md:block 14 (quote)
msgid "**Note** If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please also consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr ""

#: docs/9.x/dusk.md:block 19 (quote)
msgid "**Warning** Dusk requires the `chromedriver` binaries to be executable. If you're having problems running Dusk, you should ensure the binaries are executable using the following command: `chmod -R 0755 vendor/laravel/dusk/bin/`."
msgstr ""

#: docs/9.x/dusk.md:block 34 (header)
msgid "Resetting The Database After Each Test"
msgstr ""

#: docs/9.x/dusk.md:block 40 (quote)
msgid "**Warning** SQLite in-memory databases may not be used when executing Dusk tests. Since the browser executes within its own process, it will not be able to access the in-memory databases of other processes."
msgstr ""

#: docs/9.x/dusk.md:block 59 (paragraph)
msgid "The `dusk` command accepts any argument that is normally accepted by the PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://phpunit.readthedocs.io/en/9.5/annotations.html#group):"
msgstr ""

#: docs/9.x/dusk.md:block 61 (quote)
msgid "**Note** If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk)."
msgstr ""

#: docs/9.x/dusk.md:block 115 (quote)
msgid "**Warning** After using the `loginAs` method, the user session will be maintained for all tests within the file."
msgstr ""

#: docs/9.x/dusk.md:block 203 (quote)
msgid "**Warning** The attach function requires the `Zip` PHP extension to be installed and enabled on your server."
msgstr ""

#: docs/9.x/dusk.md:block 216 (quote)
msgid "**Warning** These methods interact with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test's duration."
msgstr ""

#: docs/9.x/dusk.md:block 223 (quote)
msgid "**Note** All modifier keys such as `{command}` are wrapped in `{}` characters, and match the constants defined in the `Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php)."
msgstr ""

#: docs/9.x/dusk.md:block 306 (header)
msgid "Waiting For Inputs"
msgstr ""

#: docs/9.x/dusk.md:block 318 (header)
msgid "Waiting For Page Reloads"
msgstr ""

#: docs/9.x/dusk.md:block 332 (header)
msgid "Waiting For JavaScript Events"
msgstr ""

#: docs/9.x/dusk.md:block 336 (code)
msgid ""
"$browser->with('iframe', function ($iframe) {\n"
"    // Wait for the iframe's load event...\n"
"    $iframe->waitForEvent('load');\n"
"});\n"
msgstr ""

#: docs/9.x/dusk.md:block 354 (paragraph)
msgid "[assertTitle](#assert-title) [assertTitleContains](#assert-title-contains) [assertUrlIs](#assert-url-is) [assertSchemeIs](#assert-scheme-is) [assertSchemeIsNot](#assert-scheme-is-not) [assertHostIs](#assert-host-is) [assertHostIsNot](#assert-host-is-not) [assertPortIs](#assert-port-is) [assertPortIsNot](#assert-port-is-not) [assertPathBeginsWith](#assert-path-begins-with) [assertPathIs](#assert-path-is) [assertPathIsNot](#assert-path-is-not) [assertRouteIs](#assert-route-is) [assertQueryStringHas](#assert-query-string-has) [assertQueryStringMissing](#assert-query-string-missing) [assertFragmentIs](#assert-fragment-is) [assertFragmentBeginsWith](#assert-fragment-begins-with) [assertFragmentIsNot](#assert-fragment-is-not) [assertHasCookie](#assert-has-cookie) [assertHasPlainCookie](#assert-has-plain-cookie) [assertCookieMissing](#assert-cookie-missing) [assertPlainCookieMissing](#assert-plain-cookie-missing) [assertCookieValue](#assert-cookie-value) [assertPlainCookieValue](#assert-plain-cookie-value) [assertSee](#assert-see) [assertDontSee](#assert-dont-see) [assertSeeIn](#assert-see-in) [assertDontSeeIn](#assert-dont-see-in) [assertSeeAnythingIn](#assert-see-anything-in) [assertSeeNothingIn](#assert-see-nothing-in) [assertScript](#assert-script) [assertSourceHas](#assert-source-has) [assertSourceMissing](#assert-source-missing) [assertSeeLink](#assert-see-link) [assertDontSeeLink](#assert-dont-see-link) [assertInputValue](#assert-input-value) [assertInputValueIsNot](#assert-input-value-is-not) [assertChecked](#assert-checked) [assertNotChecked](#assert-not-checked) [assertIndeterminate](#assert-indeterminate) [assertRadioSelected](#assert-radio-selected) [assertRadioNotSelected](#assert-radio-not-selected) [assertSelected](#assert-selected) [assertNotSelected](#assert-not-selected) [assertSelectHasOptions](#assert-select-has-options) [assertSelectMissingOptions](#assert-select-missing-options) [assertSelectHasOption](#assert-select-has-option) [assertSelectMissingOption](#assert-select-missing-option) [assertValue](#assert-value) [assertValueIsNot](#assert-value-is-not) [assertAttribute](#assert-attribute) [assertAttributeContains](#assert-attribute-contains) [assertAriaAttribute](#assert-aria-attribute) [assertDataAttribute](#assert-data-attribute) [assertVisible](#assert-visible) [assertPresent](#assert-present) [assertNotPresent](#assert-not-present) [assertMissing](#assert-missing) [assertInputPresent](#assert-input-present) [assertInputMissing](#assert-input-missing) [assertDialogOpened](#assert-dialog-opened) [assertEnabled](#assert-enabled) [assertDisabled](#assert-disabled) [assertButtonEnabled](#assert-button-enabled) [assertButtonDisabled](#assert-button-disabled) [assertFocused](#assert-focused) [assertNotFocused](#assert-not-focused) [assertAuthenticated](#assert-authenticated) [assertGuest](#assert-guest) [assertAuthenticatedAs](#assert-authenticated-as) [assertVue](#assert-vue) [assertVueIsNot](#assert-vue-is-not) [assertVueContains](#assert-vue-contains) [assertVueDoesNotContain](#assert-vue-does-not-contain)"
msgstr ""

#: docs/9.x/dusk.md:block 715 (quote)
msgid "**Warning** Most Dusk continuous integration configurations expect your Laravel application to be served using the built-in PHP development server on port 8000. Therefore, before continuing, you should ensure that your continuous integration environment has an `APP_URL` environment variable value of `http://127.0.0.1:8000`."
msgstr ""

#: docs/9.x/dusk.md:block 727 (code)
msgid ""
"name: CI\n"
"on: [push]\n"
"jobs:\n"
"\n"
"  dusk-php:\n"
"    runs-on: ubuntu-latest\n"
"    env:\n"
"      APP_URL: \"http://127.0.0.1:8000\"\n"
"      DB_USERNAME: root\n"
"      DB_PASSWORD: root\n"
"      MAIL_MAILER: log\n"
"    steps:\n"
"      - uses: actions/checkout@v3\n"
"      - name: Prepare The Environment\n"
"        run: cp .env.example .env\n"
"      - name: Create Database\n"
"        run: |\n"
"          sudo systemctl start mysql\n"
"          mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE \\`my-database\\` character set UTF8mb4 collate utf8mb4_bin;\"\n"
"      - name: Install Composer Dependencies\n"
"        run: composer install --no-progress --prefer-dist --optimize-autoloader\n"
"      - name: Generate Application Key\n"
"        run: php artisan key:generate\n"
"      - name: Upgrade Chrome Driver\n"
"        run: php artisan dusk:chrome-driver --detect\n"
"      - name: Start Chrome Driver\n"
"        run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"      - name: Run Laravel Server\n"
"        run: php artisan serve --no-reload &\n"
"      - name: Run Dusk Tests\n"
"        run: php artisan dusk\n"
"      - name: Upload Screenshots\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: screenshots\n"
"          path: tests/Browser/screenshots\n"
"      - name: Upload Console Logs\n"
"        if: failure()\n"
"        uses: actions/upload-artifact@v2\n"
"        with:\n"
"          name: console\n"
"          path: tests/Browser/console\n"
msgstr ""
