#
msgid ""
msgstr ""

#: docs/10.x/pint.md:block 1 (header)
msgid "Laravel Pint"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Running Pint](#running-pint)"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Configuring Pint](#configuring-pint)"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Presets](#presets)"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Rules](#rules)"
msgstr ""

#: docs/10.x/pint.md:block 2 (unordered list)
msgid "[Excluding Files / Folders](#excluding-files-or-folders)"
msgstr ""

#: docs/10.x/pint.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/pint.md:block 5 (paragraph)
msgid "[Laravel Pint](https://github.com/laravel/pint) is an opinionated PHP code style fixer for minimalists. Pint is built on top of PHP-CS-Fixer and makes it simple to ensure that your code style stays clean and consistent."
msgstr ""

#: docs/10.x/pint.md:block 6 (paragraph)
msgid "Pint is automatically installed with all new Laravel applications so you may start using it immediately. By default, Pint does not require any configuration and will fix code style issues in your code by following the opinionated coding style of Laravel."
msgstr ""

#: docs/10.x/pint.md:block 8 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/pint.md:block 9 (paragraph)
msgid "Pint is included in recent releases of the Laravel framework, so installation is typically unnecessary. However, for older applications, you may install Laravel Pint via Composer:"
msgstr ""

#: docs/10.x/pint.md:block 10 (code)
msgid "composer require laravel/pint --dev\n"
msgstr ""

#: docs/10.x/pint.md:block 12 (header)
msgid "Running Pint"
msgstr ""

#: docs/10.x/pint.md:block 13 (paragraph)
msgid "You can instruct Pint to fix code style issues by invoking the `pint` binary that is available in your project's `vendor/bin` directory:"
msgstr ""

#: docs/10.x/pint.md:block 14 (code)
msgid "./vendor/bin/pint\n"
msgstr ""

#: docs/10.x/pint.md:block 15 (paragraph)
msgid "You may also run Pint on specific files or directories:"
msgstr ""

#: docs/10.x/pint.md:block 16 (code)
msgid ""
"./vendor/bin/pint app/Models\n"
"\n"
"./vendor/bin/pint app/Models/User.php\n"
msgstr ""

#: docs/10.x/pint.md:block 17 (paragraph)
msgid "Pint will display a thorough list of all of the files that it updates. You can view even more detail about Pint's changes by providing the `-v` option when invoking Pint:"
msgstr ""

#: docs/10.x/pint.md:block 18 (code)
msgid "./vendor/bin/pint -v\n"
msgstr ""

#: docs/10.x/pint.md:block 19 (paragraph)
msgid "If you would like Pint to simply inspect your code for style errors without actually changing the files, you may use the `--test` option:"
msgstr ""

#: docs/10.x/pint.md:block 20 (code)
msgid "./vendor/bin/pint --test\n"
msgstr ""

#: docs/10.x/pint.md:block 21 (paragraph)
msgid "If you would like Pint to only modify the files that have uncommitted changes according to Git, you may use the `--dirty` option:"
msgstr ""

#: docs/10.x/pint.md:block 22 (code)
msgid "./vendor/bin/pint --dirty\n"
msgstr ""

#: docs/10.x/pint.md:block 24 (header)
msgid "Configuring Pint"
msgstr ""

#: docs/10.x/pint.md:block 25 (paragraph)
msgid "As previously mentioned, Pint does not require any configuration. However, if you wish to customize the presets, rules, or inspected folders, you may do so by creating a `pint.json` file in your project's root directory:"
msgstr ""

#: docs/10.x/pint.md:block 26 (code)
msgid ""
"{\n"
"    \"preset\": \"laravel\"\n"
"}\n"
msgstr ""

#: docs/10.x/pint.md:block 27 (paragraph)
msgid "In addition, if you wish to use a `pint.json` from a specific directory, you may provide the `--config` option when invoking Pint:"
msgstr ""

#: docs/10.x/pint.md:block 28 (code)
msgid "pint --config vendor/my-company/coding-style/pint.json\n"
msgstr ""

#: docs/10.x/pint.md:block 30 (header)
msgid "Presets"
msgstr ""

#: docs/10.x/pint.md:block 31 (paragraph)
msgid "Presets defines a set of rules that can be used to fix code style issues in your code. By default, Pint uses the `laravel` preset, which fixes issues by following the opinionated coding style of Laravel. However, you may specify a different preset by providing the `--preset` option to Pint:"
msgstr ""

#: docs/10.x/pint.md:block 32 (code)
msgid "pint --preset psr12\n"
msgstr ""

#: docs/10.x/pint.md:block 33 (paragraph)
msgid "If you wish, you may also set the preset in your project's `pint.json` file:"
msgstr ""

#: docs/10.x/pint.md:block 34 (code)
msgid ""
"{\n"
"    \"preset\": \"psr12\"\n"
"}\n"
msgstr ""

#: docs/10.x/pint.md:block 35 (paragraph)
msgid "Pint's currently supported presets are: `laravel`, `per`, `psr12`, and `symfony`."
msgstr ""

#: docs/10.x/pint.md:block 37 (header)
msgid "Rules"
msgstr ""

#: docs/10.x/pint.md:block 38 (paragraph)
msgid "Rules are style guidelines that Pint will use to fix code style issues in your code. As mentioned above, presets are predefined groups of rules that should be perfect for most PHP projects, so you typically will not need to worry about the individual rules they contain."
msgstr ""

#: docs/10.x/pint.md:block 39 (paragraph)
msgid "However, if you wish, you may enable or disable specific rules in your `pint.json` file:"
msgstr ""

#: docs/10.x/pint.md:block 40 (code)
msgid ""
"{\n"
"    \"preset\": \"laravel\",\n"
"    \"rules\": {\n"
"        \"simplified_null_return\": true,\n"
"        \"braces\": false,\n"
"        \"new_with_braces\": {\n"
"            \"anonymous_class\": false,\n"
"            \"named_class\": false\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pint.md:block 41 (paragraph)
msgid "Pint is built on top of [PHP-CS-Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer). Therefore, you may use any of its rules to fix code style issues in your project: [PHP-CS-Fixer Configurator](https://mlocati.github.io/php-cs-fixer-configurator)."
msgstr ""

#: docs/10.x/pint.md:block 43 (header)
msgid "Excluding Files / Folders"
msgstr ""

#: docs/10.x/pint.md:block 44 (paragraph)
msgid "By default, Pint will inspect all `.php` files in your project except those in the `vendor` directory. If you wish to exclude more folders, you may do so using the `exclude` configuration option:"
msgstr ""

#: docs/10.x/pint.md:block 45 (code)
msgid ""
"{\n"
"    \"exclude\": [\n"
"        \"my-specific/folder\"\n"
"    ]\n"
"}\n"
msgstr ""

#: docs/10.x/pint.md:block 46 (paragraph)
msgid "If you wish to exclude all files that contain a given name pattern, you may do so using the `notName` configuration option:"
msgstr ""

#: docs/10.x/pint.md:block 47 (code)
msgid ""
"{\n"
"    \"notName\": [\n"
"        \"*-my-file.php\"\n"
"    ]\n"
"}\n"
msgstr ""

#: docs/10.x/pint.md:block 48 (paragraph)
msgid "If you would like to exclude a file by providing an exact path to the file, you may do so using the `notPath` configuration option:"
msgstr ""

#: docs/10.x/pint.md:block 49 (code)
msgid ""
"{\n"
"    \"notPath\": [\n"
"        \"path/to/excluded-file.php\"\n"
"    ]\n"
"}\n"
msgstr ""

#: docs/11.x/pint.md:block 2 (unordered list)
msgid "[Continuous Integration](#continuous-integration)"
msgstr ""

#: docs/11.x/pint.md:block 2 (unordered list)
msgid "[GitHub Actions](#running-tests-on-github-actions)"
msgstr ""

#: docs/11.x/pint.md:block 19 (paragraph)
msgid "If you would like Pint to simply inspect your code for style errors without actually changing the files, you may use the `--test` option. Pint will return a non-zero exit code if any code style errors are found:"
msgstr ""

#: docs/11.x/pint.md:block 23 (paragraph)
msgid "If you would like Pint to fix any files with code style errors but also exit with a non-zero exit code if any errors were fixed, you may use the `--repair` option:"
msgstr ""

#: docs/11.x/pint.md:block 24 (code)
msgid "./vendor/bin/pint --repair\n"
msgstr ""

#: docs/11.x/pint.md:block 53 (header)
msgid "Continuous Integration"
msgstr ""

#: docs/11.x/pint.md:block 55 (header)
msgid "GitHub Actions"
msgstr ""

#: docs/11.x/pint.md:block 56 (paragraph)
msgid "To automate linting your project with Laravel Pint, you can configure [GitHub Actions](https://github.com/features/actions) to run Pint whenever new code is pushed to GitHub. First, be sure to grant \"Read and write permissions\" to workflows within GitHub at **Settings > Actions > General > Workflow permissions**. Then, create a `.github/workflows/lint.yml` file with the following content:"
msgstr ""

#: docs/11.x/pint.md:block 57 (code)
msgid ""
"name: Fix Code Style\n"
"\n"
"on: [push]\n"
"\n"
"jobs:\n"
"  lint:\n"
"    runs-on: ubuntu-latest\n"
"    strategy:\n"
"      fail-fast: true\n"
"      matrix:\n"
"        php: [8.3]\n"
"\n"
"    steps:\n"
"      - name: Checkout code\n"
"        uses: actions/checkout@v4\n"
"\n"
"      - name: Setup PHP\n"
"        uses: shivammathur/setup-php@v2\n"
"        with:\n"
"          php-version: ${{ matrix.php }}\n"
"          extensions: json, dom, curl, libxml, mbstring\n"
"          coverage: none\n"
"\n"
"      - name: Install Pint\n"
"        run: composer global require laravel/pint\n"
"\n"
"      - name: Run Pint\n"
"        run: pint\n"
"\n"
"      - name: Commit linted files\n"
"        uses: stefanzweifel/git-auto-commit-action@v5\n"
"        with:\n"
"          commit_message: \"Fixes coding style\"\n"
msgstr ""

#: docs/9.x/pint.md:block 35 (paragraph)
msgid "Pint's currently supported presets are: `laravel`, `psr12`, and `symfony`."
msgstr ""
