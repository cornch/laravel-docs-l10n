msgid ""
msgstr ""

# H1
#: ./docs/8.x/collections.md:1
#: ./docs/9.x/collections.md:1
#: ./docs/10.x/collections.md:1
#: ./docs/11.x/collections.md:1
#: ./docs/master/collections.md:1
msgid "Collections"
msgstr ""

# P
#: ./docs/8.x/collections.md:3
#: ./docs/9.x/collections.md:3
#: ./docs/10.x/collections.md:3
#: ./docs/11.x/collections.md:3
#: ./docs/master/collections.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/collections.md:4
#: ./docs/9.x/collections.md:4
#: ./docs/10.x/collections.md:4
#: ./docs/11.x/collections.md:4
#: ./docs/master/collections.md:4
msgid "[Creating Collections](#creating-collections)"
msgstr ""

# P
#: ./docs/8.x/collections.md:5
#: ./docs/9.x/collections.md:5
#: ./docs/10.x/collections.md:5
#: ./docs/11.x/collections.md:5
#: ./docs/master/collections.md:5
msgid "[Extending Collections](#extending-collections)"
msgstr ""

# P
#: ./docs/8.x/collections.md:6
#: ./docs/9.x/collections.md:6
#: ./docs/10.x/collections.md:6
#: ./docs/11.x/collections.md:6
#: ./docs/master/collections.md:6
msgid "[Available Methods](#available-methods)"
msgstr ""

# P
#: ./docs/8.x/collections.md:7
#: ./docs/9.x/collections.md:7
#: ./docs/10.x/collections.md:7
#: ./docs/11.x/collections.md:7
#: ./docs/master/collections.md:7
msgid "[Higher Order Messages](#higher-order-messages)"
msgstr ""

# P
#: ./docs/8.x/collections.md:8
#: ./docs/9.x/collections.md:8
#: ./docs/10.x/collections.md:8
#: ./docs/11.x/collections.md:8
#: ./docs/master/collections.md:8
msgid "[Lazy Collections](#lazy-collections)"
msgstr ""

# P
#: ./docs/8.x/collections.md:9
#: ./docs/9.x/collections.md:9
#: ./docs/10.x/collections.md:9
#: ./docs/11.x/collections.md:9
#: ./docs/master/collections.md:9
msgid "[Introduction](#lazy-collection-introduction)"
msgstr ""

# P
#: ./docs/8.x/collections.md:10
#: ./docs/9.x/collections.md:10
#: ./docs/10.x/collections.md:10
#: ./docs/11.x/collections.md:10
#: ./docs/master/collections.md:10
msgid "[Creating Lazy Collections](#creating-lazy-collections)"
msgstr ""

# P
#: ./docs/8.x/collections.md:11
#: ./docs/9.x/collections.md:11
#: ./docs/10.x/collections.md:11
#: ./docs/11.x/collections.md:11
#: ./docs/master/collections.md:11
msgid "[The Enumerable Contract](#the-enumerable-contract)"
msgstr ""

# P
#: ./docs/8.x/collections.md:12
#: ./docs/9.x/collections.md:12
#: ./docs/10.x/collections.md:12
#: ./docs/11.x/collections.md:12
#: ./docs/master/collections.md:12
msgid "[Lazy Collection Methods](#lazy-collection-methods)"
msgstr ""

# P
#: ./docs/8.x/collections.md:14
#: ./docs/9.x/collections.md:14
#: ./docs/10.x/collections.md:14
#: ./docs/11.x/collections.md:14
#: ./docs/master/collections.md:14
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
# H3
#: ./docs/8.x/collections.md:15
#: ./docs/8.x/collections.md:3169
#: ./docs/9.x/collections.md:15
#: ./docs/9.x/collections.md:3305
#: ./docs/10.x/collections.md:15
#: ./docs/10.x/collections.md:3419
#: ./docs/11.x/collections.md:15
#: ./docs/11.x/collections.md:3502
#: ./docs/master/collections.md:15
#: ./docs/master/collections.md:3419
msgid "Introduction"
msgstr ""

# P
#: ./docs/8.x/collections.md:17
#: ./docs/9.x/collections.md:17
#: ./docs/10.x/collections.md:17
#: ./docs/11.x/collections.md:17
#: ./docs/master/collections.md:17
msgid "The `Illuminate\\Support\\Collection` class provides a fluent, convenient wrapper for working with arrays of data. For example, check out the following code. We'll use the `collect` helper to create a new collection instance from the array, run the `strtoupper` function on each element, and then remove all empty elements:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:19
#: ./docs/11.x/collections.md:19
#: ./docs/master/collections.md:19
msgid ""
"$collection = collect(['taylor', 'abigail', null])->map(function (?string $name) {\n"
"    return strtoupper($name);\n"
"})->reject(function (string $name) {\n"
"    return empty($name);\n"
"});"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:19
#: ./docs/9.x/collections.md:19
msgid ""
"$collection = collect(['taylor', 'abigail', null])->map(function ($name) {\n"
"    return strtoupper($name);\n"
"})->reject(function ($name) {\n"
"    return empty($name);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:25
#: ./docs/9.x/collections.md:25
#: ./docs/10.x/collections.md:25
#: ./docs/11.x/collections.md:25
#: ./docs/master/collections.md:25
msgid "As you can see, the `Collection` class allows you to chain its methods to perform fluent mapping and reducing of the underlying array. In general, collections are immutable, meaning every `Collection` method returns an entirely new `Collection` instance."
msgstr ""

# P
#: ./docs/8.x/collections.md:27
#: ./docs/9.x/collections.md:27
#: ./docs/10.x/collections.md:27
#: ./docs/11.x/collections.md:27
#: ./docs/master/collections.md:27
#~ msgid "<a name=\"creating-collections\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/collections.md:28
#: ./docs/9.x/collections.md:28
#: ./docs/10.x/collections.md:28
#: ./docs/11.x/collections.md:28
#: ./docs/master/collections.md:28
msgid "Creating Collections"
msgstr ""

# P
#: ./docs/8.x/collections.md:30
#: ./docs/9.x/collections.md:30
#: ./docs/10.x/collections.md:30
#: ./docs/11.x/collections.md:30
#: ./docs/master/collections.md:30
msgid "As mentioned above, the `collect` helper returns a new `Illuminate\\Support\\Collection` instance for the given array. So, creating a collection is as simple as:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:32
#: ./docs/9.x/collections.md:32
#: ./docs/10.x/collections.md:32
#: ./docs/11.x/collections.md:32
#: ./docs/master/collections.md:32
msgid "$collection = collect([1, 2, 3]);"
msgstr ""

# P
#: ./docs/8.x/collections.md:34
#: ./docs/9.x/collections.md:35
#: ./docs/10.x/collections.md:35
#: ./docs/11.x/collections.md:35
#: ./docs/master/collections.md:35
msgid "The results of [Eloquent](/docs/{{version}}/eloquent) queries are always returned as `Collection` instances."
msgstr ""

# P
#: ./docs/8.x/collections.md:36
#: ./docs/9.x/collections.md:37
#: ./docs/10.x/collections.md:37
#: ./docs/11.x/collections.md:37
#: ./docs/master/collections.md:37
#~ msgid "<a name=\"extending-collections\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/collections.md:37
#: ./docs/9.x/collections.md:38
#: ./docs/10.x/collections.md:38
#: ./docs/11.x/collections.md:38
#: ./docs/master/collections.md:38
msgid "Extending Collections"
msgstr ""

# P
#: ./docs/8.x/collections.md:39
#: ./docs/9.x/collections.md:40
#: ./docs/10.x/collections.md:40
#: ./docs/11.x/collections.md:40
#: ./docs/master/collections.md:40
msgid "Collections are \"macroable\", which allows you to add additional methods to the `Collection` class at run time. The `Illuminate\\Support\\Collection` class' `macro` method accepts a closure that will be executed when your macro is called. The macro closure may access the collection's other methods via `$this`, just as if it were a real method of the collection class. For example, the following code adds a `toUpper` method to the `Collection` class:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:41
#: ./docs/9.x/collections.md:42
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"Collection::macro('toUpper', function () {\n"
"    return $this->map(function ($value) {\n"
"        return Str::upper($value);\n"
"    });\n"
"});\n"
"\n"
"$collection = collect(['first', 'second']);\n"
"\n"
"$upper = $collection->toUpper();\n"
"\n"
"// ['FIRST', 'SECOND']"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:42
#: ./docs/11.x/collections.md:42
#: ./docs/master/collections.md:42
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"Collection::macro('toUpper', function () {\n"
"    return $this->map(function (string $value) {\n"
"        return Str::upper($value);\n"
"    });\n"
"});\n"
"\n"
"$collection = collect(['first', 'second']);\n"
"\n"
"$upper = $collection->toUpper();\n"
"\n"
"// ['FIRST', 'SECOND']"
msgstr ""

# P
#: ./docs/8.x/collections.md:56
#: ./docs/9.x/collections.md:57
#: ./docs/10.x/collections.md:57
#: ./docs/11.x/collections.md:57
#: ./docs/master/collections.md:57
msgid "Typically, you should declare collection macros in the `boot` method of a [service provider](/docs/{{version}}/providers)."
msgstr ""

# P
#: ./docs/8.x/collections.md:58
#: ./docs/9.x/collections.md:59
#: ./docs/10.x/collections.md:59
#: ./docs/11.x/collections.md:59
#: ./docs/master/collections.md:59
#~ msgid "<a name=\"macro-arguments\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:59
#: ./docs/9.x/collections.md:60
#: ./docs/10.x/collections.md:60
#: ./docs/11.x/collections.md:60
#: ./docs/master/collections.md:60
msgid "Macro Arguments"
msgstr ""

# P
#: ./docs/8.x/collections.md:61
#: ./docs/9.x/collections.md:62
#: ./docs/10.x/collections.md:62
#: ./docs/11.x/collections.md:62
#: ./docs/master/collections.md:62
msgid "If necessary, you may define macros that accept additional arguments:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:63
#: ./docs/9.x/collections.md:64
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Facades\\Lang;\n"
"\n"
"Collection::macro('toLocale', function ($locale) {\n"
"    return $this->map(function ($value) use ($locale) {\n"
"        return Lang::get($value, [], $locale);\n"
"    });\n"
"});\n"
"\n"
"$collection = collect(['first', 'second']);\n"
"\n"
"$translated = $collection->toLocale('es');"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:64
#: ./docs/11.x/collections.md:64
#: ./docs/master/collections.md:64
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Facades\\Lang;\n"
"\n"
"Collection::macro('toLocale', function (string $locale) {\n"
"    return $this->map(function (string $value) use ($locale) {\n"
"        return Lang::get($value, [], $locale);\n"
"    });\n"
"});\n"
"\n"
"$collection = collect(['first', 'second']);\n"
"\n"
"$translated = $collection->toLocale('es');"
msgstr ""

# P
#: ./docs/8.x/collections.md:76
#: ./docs/9.x/collections.md:77
#: ./docs/10.x/collections.md:77
#: ./docs/11.x/collections.md:77
#: ./docs/master/collections.md:77
#~ msgid "<a name=\"available-methods\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/collections.md:77
#: ./docs/9.x/collections.md:78
#: ./docs/10.x/collections.md:78
#: ./docs/11.x/collections.md:78
#: ./docs/master/collections.md:78
msgid "Available Methods"
msgstr ""

# P
#: ./docs/8.x/collections.md:79
#: ./docs/9.x/collections.md:80
#: ./docs/10.x/collections.md:80
#: ./docs/11.x/collections.md:80
#: ./docs/master/collections.md:80
msgid "For the majority of the remaining collection documentation, we'll discuss each method available on the `Collection` class. Remember, all of these methods may be chained to fluently manipulate the underlying array. Furthermore, almost every method returns a new `Collection` instance, allowing you to preserve the original copy of the collection when necessary:"
msgstr ""

# P
#: ./docs/8.x/collections.md:94
msgid ""
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffKeys](#method-diffkeys)\n"
"[doesntContain](#method-doesntcontain)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forget](#method-forget)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[pipe](#method-pipe)\n"
"[pipeInto](#method-pipeinto)\n"
"[pipeThrough](#method-pipethrough)\n"
"[pluck](#method-pluck)\n"
"[pop](#method-pop)\n"
"[prepend](#method-prepend)\n"
"[pull](#method-pull)\n"
"[push](#method-push)\n"
"[put](#method-put)\n"
"[random](#method-random)\n"
"[range](#method-range)\n"
"[reduce](#method-reduce)\n"
"[reduceSpread](#method-reduce-spread)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[shift](#method-shift)\n"
"[shuffle](#method-shuffle)\n"
"[sliding](#method-sliding)\n"
"[skip](#method-skip)\n"
"[skipUntil](#method-skipuntil)\n"
"[skipWhile](#method-skipwhile)\n"
"[slice](#method-slice)\n"
"[sole](#method-sole)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortDesc](#method-sortdesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[sortKeysUsing](#method-sortkeysusing)\n"
"[splice](#method-splice)\n"
"[split](#method-split)\n"
"[splitIn](#method-splitin)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[takeUntil](#method-takeuntil)\n"
"[takeWhile](#method-takewhile)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[transform](#method-transform)\n"
"[undot](#method-undot)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[whereNotNull](#method-wherenotnull)\n"
"[whereNull](#method-wherenull)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# P
#: ./docs/10.x/collections.md:97
#: ./docs/master/collections.md:97
msgid ""
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsOneItem](#method-containsoneitem)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffAssocUsing](#method-diffassocusing)\n"
"[diffKeys](#method-diffkeys)\n"
"[doesntContain](#method-doesntcontain)\n"
"[dot](#method-dot)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[ensure](#method-ensure)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstOrFail](#method-first-or-fail)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forget](#method-forget)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[hasAny](#method-hasany)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectAssoc](#method-intersectAssoc)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[lazy](#method-lazy)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[percentage](#method-percentage)\n"
"[pipe](#method-pipe)\n"
"[pipeInto](#method-pipeinto)\n"
"[pipeThrough](#method-pipethrough)\n"
"[pluck](#method-pluck)\n"
"[pop](#method-pop)\n"
"[prepend](#method-prepend)\n"
"[pull](#method-pull)\n"
"[push](#method-push)\n"
"[put](#method-put)\n"
"[random](#method-random)\n"
"[range](#method-range)\n"
"[reduce](#method-reduce)\n"
"[reduceSpread](#method-reduce-spread)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[select](#method-select)\n"
"[shift](#method-shift)\n"
"[shuffle](#method-shuffle)\n"
"[skip](#method-skip)\n"
"[skipUntil](#method-skipuntil)\n"
"[skipWhile](#method-skipwhile)\n"
"[slice](#method-slice)\n"
"[sliding](#method-sliding)\n"
"[sole](#method-sole)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortDesc](#method-sortdesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[sortKeysUsing](#method-sortkeysusing)\n"
"[splice](#method-splice)\n"
"[split](#method-split)\n"
"[splitIn](#method-splitin)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[takeUntil](#method-takeuntil)\n"
"[takeWhile](#method-takewhile)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[transform](#method-transform)\n"
"[undot](#method-undot)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[value](#method-value)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[whereNotNull](#method-wherenotnull)\n"
"[whereNull](#method-wherenull)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# P
#: ./docs/11.x/collections.md:97
msgid ""
"[after](#method-after)\n"
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[before](#method-before)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsOneItem](#method-containsoneitem)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffAssocUsing](#method-diffassocusing)\n"
"[diffKeys](#method-diffkeys)\n"
"[doesntContain](#method-doesntcontain)\n"
"[dot](#method-dot)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[ensure](#method-ensure)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstOrFail](#method-first-or-fail)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forget](#method-forget)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[hasAny](#method-hasany)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectAssoc](#method-intersectAssoc)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[lazy](#method-lazy)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[multiply](#method-multiply)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[percentage](#method-percentage)\n"
"[pipe](#method-pipe)\n"
"[pipeInto](#method-pipeinto)\n"
"[pipeThrough](#method-pipethrough)\n"
"[pluck](#method-pluck)\n"
"[pop](#method-pop)\n"
"[prepend](#method-prepend)\n"
"[pull](#method-pull)\n"
"[push](#method-push)\n"
"[put](#method-put)\n"
"[random](#method-random)\n"
"[range](#method-range)\n"
"[reduce](#method-reduce)\n"
"[reduceSpread](#method-reduce-spread)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[select](#method-select)\n"
"[shift](#method-shift)\n"
"[shuffle](#method-shuffle)\n"
"[skip](#method-skip)\n"
"[skipUntil](#method-skipuntil)\n"
"[skipWhile](#method-skipwhile)\n"
"[slice](#method-slice)\n"
"[sliding](#method-sliding)\n"
"[sole](#method-sole)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortDesc](#method-sortdesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[sortKeysUsing](#method-sortkeysusing)\n"
"[splice](#method-splice)\n"
"[split](#method-split)\n"
"[splitIn](#method-splitin)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[takeUntil](#method-takeuntil)\n"
"[takeWhile](#method-takewhile)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[transform](#method-transform)\n"
"[undot](#method-undot)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[value](#method-value)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[whereNotNull](#method-wherenotnull)\n"
"[whereNull](#method-wherenull)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# P
#: ./docs/9.x/collections.md:97
msgid ""
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsOneItem](#method-containsoneitem)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffKeys](#method-diffkeys)\n"
"[doesntContain](#method-doesntcontain)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstOrFail](#method-first-or-fail)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forget](#method-forget)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[hasAny](#method-hasany)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[lazy](#method-lazy)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[pipe](#method-pipe)\n"
"[pipeInto](#method-pipeinto)\n"
"[pipeThrough](#method-pipethrough)\n"
"[pluck](#method-pluck)\n"
"[pop](#method-pop)\n"
"[prepend](#method-prepend)\n"
"[pull](#method-pull)\n"
"[push](#method-push)\n"
"[put](#method-put)\n"
"[random](#method-random)\n"
"[range](#method-range)\n"
"[reduce](#method-reduce)\n"
"[reduceSpread](#method-reduce-spread)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[shift](#method-shift)\n"
"[shuffle](#method-shuffle)\n"
"[skip](#method-skip)\n"
"[skipUntil](#method-skipuntil)\n"
"[skipWhile](#method-skipwhile)\n"
"[slice](#method-slice)\n"
"[sliding](#method-sliding)\n"
"[sole](#method-sole)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortDesc](#method-sortdesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[sortKeysUsing](#method-sortkeysusing)\n"
"[splice](#method-splice)\n"
"[split](#method-split)\n"
"[splitIn](#method-splitin)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[takeUntil](#method-takeuntil)\n"
"[takeWhile](#method-takewhile)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[transform](#method-transform)\n"
"[undot](#method-undot)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[value](#method-value)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[whereNotNull](#method-wherenotnull)\n"
"[whereNull](#method-wherenull)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# P
#: ./docs/8.x/collections.md:231
#: ./docs/9.x/collections.md:239
#: ./docs/10.x/collections.md:245
#: ./docs/11.x/collections.md:248
#: ./docs/master/collections.md:245
#~ msgid "<a name=\"method-listing\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/collections.md:232
#: ./docs/9.x/collections.md:240
#: ./docs/10.x/collections.md:246
#: ./docs/11.x/collections.md:249
#: ./docs/master/collections.md:246
msgid "Method Listing"
msgstr ""

# P
#: ./docs/8.x/collections.md:244
#: ./docs/9.x/collections.md:252
#: ./docs/10.x/collections.md:258
#: ./docs/11.x/collections.md:290
#: ./docs/master/collections.md:258
#~ msgid "<a name=\"method-all\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:245
#: ./docs/9.x/collections.md:253
#: ./docs/10.x/collections.md:259
#: ./docs/master/collections.md:259
msgid "`all()` {.collection-method .first-collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:247
#: ./docs/9.x/collections.md:255
#: ./docs/10.x/collections.md:261
#: ./docs/11.x/collections.md:293
#: ./docs/master/collections.md:261
msgid "The `all` method returns the underlying array represented by the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:249
#: ./docs/9.x/collections.md:257
#: ./docs/10.x/collections.md:263
#: ./docs/11.x/collections.md:295
#: ./docs/master/collections.md:263
msgid ""
"collect([1, 2, 3])->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:253
#: ./docs/9.x/collections.md:261
#: ./docs/10.x/collections.md:267
#: ./docs/11.x/collections.md:299
#: ./docs/master/collections.md:267
#~ msgid "<a name=\"method-average\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:254
#: ./docs/9.x/collections.md:262
#: ./docs/10.x/collections.md:268
#: ./docs/11.x/collections.md:300
#: ./docs/master/collections.md:268
msgid "`average()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:256
#: ./docs/9.x/collections.md:264
#: ./docs/10.x/collections.md:270
#: ./docs/11.x/collections.md:302
#: ./docs/master/collections.md:270
msgid "Alias for the [`avg`](#method-avg) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:258
#: ./docs/9.x/collections.md:266
#: ./docs/10.x/collections.md:272
#: ./docs/11.x/collections.md:304
#: ./docs/master/collections.md:272
#~ msgid "<a name=\"method-avg\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:259
#: ./docs/9.x/collections.md:267
#: ./docs/10.x/collections.md:273
#: ./docs/11.x/collections.md:305
#: ./docs/master/collections.md:273
msgid "`avg()` {.collection-method}"
msgstr ""

# P
#: ./docs/11.x/collections.md:261
#~ msgid "<a name=\"method-after\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/collections.md:261
#: ./docs/9.x/collections.md:269
#: ./docs/10.x/collections.md:275
#: ./docs/11.x/collections.md:307
#: ./docs/master/collections.md:275
msgid "The `avg` method returns the [average value](https://en.wikipedia.org/wiki/Average) of a given key:"
msgstr ""

# H4
#: ./docs/11.x/collections.md:262
msgid "`after()` {.collection-method .first-collection-method}"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:263
#: ./docs/9.x/collections.md:271
#: ./docs/10.x/collections.md:277
#: ./docs/11.x/collections.md:309
#: ./docs/master/collections.md:277
msgid ""
"$average = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 10],\n"
"    ['foo' => 20],\n"
"    ['foo' => 40]\n"
"])->avg('foo');\n"
"\n"
"// 20\n"
"\n"
"$average = collect([1, 1, 2, 4])->avg();\n"
"\n"
"// 2"
msgstr ""

# P
#: ./docs/11.x/collections.md:264
msgid "The `after` method returns the item after the given item. `null` is returned if the given item is not found or is the last item:"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:266
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->after(3);\n"
"\n"
"// 4\n"
"\n"
"$collection->after(5);\n"
"\n"
"// null"
msgstr ""

# P
#: ./docs/11.x/collections.md:276
msgid "This method searches for the given item using \"loose\" comparison, meaning a string containing an integer value will be considered equal to an integer of the same value. To use \"strict\" comparison, you may provide the `strict` argument to the method:"
msgstr ""

# P
#: ./docs/8.x/collections.md:276
#: ./docs/9.x/collections.md:284
#: ./docs/10.x/collections.md:290
#: ./docs/11.x/collections.md:347
#: ./docs/master/collections.md:290
#~ msgid "<a name=\"method-chunk\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:277
#: ./docs/9.x/collections.md:285
#: ./docs/10.x/collections.md:291
#: ./docs/11.x/collections.md:348
#: ./docs/master/collections.md:291
msgid "`chunk()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:278
msgid ""
"collect([2, 4, 6, 8])->after('4', strict: true);\n"
"\n"
"// null"
msgstr ""

# P
#: ./docs/8.x/collections.md:279
#: ./docs/9.x/collections.md:287
#: ./docs/10.x/collections.md:293
#: ./docs/11.x/collections.md:350
#: ./docs/master/collections.md:293
msgid "The `chunk` method breaks the collection into multiple, smaller collections of a given size:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:281
#: ./docs/9.x/collections.md:289
#: ./docs/10.x/collections.md:295
#: ./docs/11.x/collections.md:352
#: ./docs/master/collections.md:295
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7]);\n"
"\n"
"$chunks = $collection->chunk(4);\n"
"\n"
"$chunks->all();\n"
"\n"
"// [[1, 2, 3, 4], [5, 6, 7]]"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:284
msgid ""
"collect([2, 4, 6, 8])->after(function (int $item, int $key) {\n"
"    return $item > 5;\n"
"});\n"
"\n"
"// 8"
msgstr ""

# P
#: ./docs/8.x/collections.md:289
#: ./docs/9.x/collections.md:297
#: ./docs/10.x/collections.md:303
msgid "This method is especially useful in [views](/docs/{{version}}/views) when working with a grid system such as [Bootstrap](https://getbootstrap.com/docs/4.1/layout/grid/). For example, imagine you have a collection of [Eloquent](/docs/{{version}}/eloquent) models you want to display in a grid:"
msgstr ""

# H4
#: ./docs/11.x/collections.md:291
msgid "`all()` {.collection-method}"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/collections.md:291
#: ./docs/9.x/collections.md:299
#: ./docs/10.x/collections.md:305
#: ./docs/11.x/collections.md:362
#: ./docs/master/collections.md:305
msgid ""
"@foreach ($products->chunk(3) as $chunk)\n"
"    <div class=\"row\">\n"
"        @foreach ($chunk as $product)\n"
"            <div class=\"col-xs-4\">{{ $product->name }}</div>\n"
"        @endforeach\n"
"    </div>\n"
"@endforeach"
msgstr ""

# P
#: ./docs/8.x/collections.md:299
#: ./docs/9.x/collections.md:309
#: ./docs/10.x/collections.md:315
#: ./docs/11.x/collections.md:372
#: ./docs/master/collections.md:315
#~ msgid "<a name=\"method-chunkwhile\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:300
#: ./docs/9.x/collections.md:310
#: ./docs/10.x/collections.md:316
#: ./docs/11.x/collections.md:373
#: ./docs/master/collections.md:316
msgid "`chunkWhile()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:302
#: ./docs/9.x/collections.md:312
#: ./docs/10.x/collections.md:318
#: ./docs/11.x/collections.md:375
#: ./docs/master/collections.md:318
msgid "The `chunkWhile` method breaks the collection into multiple, smaller collections based on the evaluation of the given callback. The `$chunk` variable passed to the closure may be used to inspect the previous element:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:304
#: ./docs/9.x/collections.md:314
msgid ""
"$collection = collect(str_split('AABBCCCD'));\n"
"\n"
"$chunks = $collection->chunkWhile(function ($value, $key, $chunk) {\n"
"    return $value === $chunk->last();\n"
"});\n"
"\n"
"$chunks->all();\n"
"\n"
"// [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]"
msgstr ""

# P
#: ./docs/8.x/collections.md:314
#: ./docs/9.x/collections.md:324
#: ./docs/10.x/collections.md:330
#: ./docs/11.x/collections.md:387
#: ./docs/master/collections.md:330
#~ msgid "<a name=\"method-collapse\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:315
#: ./docs/9.x/collections.md:325
#: ./docs/10.x/collections.md:331
#: ./docs/11.x/collections.md:388
#: ./docs/master/collections.md:331
msgid "`collapse()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:317
#: ./docs/9.x/collections.md:327
#: ./docs/10.x/collections.md:333
#: ./docs/11.x/collections.md:390
#: ./docs/master/collections.md:333
msgid "The `collapse` method collapses a collection of arrays into a single, flat collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:319
#: ./docs/9.x/collections.md:329
#: ./docs/10.x/collections.md:335
#: ./docs/11.x/collections.md:392
#: ./docs/master/collections.md:335
msgid ""
"$collection = collect([\n"
"    [1, 2, 3],\n"
"    [4, 5, 6],\n"
"    [7, 8, 9],\n"
"]);\n"
"\n"
"$collapsed = $collection->collapse();\n"
"\n"
"$collapsed->all();\n"
"\n"
"// [1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:320
#: ./docs/11.x/collections.md:377
#: ./docs/master/collections.md:320
msgid ""
"$collection = collect(str_split('AABBCCCD'));\n"
"\n"
"$chunks = $collection->chunkWhile(function (string $value, int $key, Collection $chunk) {\n"
"    return $value === $chunk->last();\n"
"});\n"
"\n"
"$chunks->all();\n"
"\n"
"// [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]"
msgstr ""

# P
#: ./docs/11.x/collections.md:322
#~ msgid "<a name=\"method-before\"></a>"
#~ msgstr ""

# H4
#: ./docs/11.x/collections.md:323
msgid "`before()` {.collection-method}"
msgstr ""

# P
#: ./docs/11.x/collections.md:325
msgid "The `before` method is the opposite of the [`after`](#method-after) method. It returns the item before the given item. `null` is returned if the given item is not found or is the first item:"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:327
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->before(3);\n"
"\n"
"// 2\n"
"\n"
"$collection->before(1);\n"
"\n"
"// null\n"
"\n"
"collect([2, 4, 6, 8])->before('4', strict: true);\n"
"\n"
"// null\n"
"\n"
"collect([2, 4, 6, 8])->before(function (int $item, int $key) {\n"
"    return $item > 5;\n"
"});\n"
"\n"
"// 4"
msgstr ""

# P
#: ./docs/8.x/collections.md:331
#: ./docs/9.x/collections.md:341
#: ./docs/10.x/collections.md:347
#: ./docs/11.x/collections.md:404
#: ./docs/master/collections.md:347
#~ msgid "<a name=\"method-collect\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:332
#: ./docs/9.x/collections.md:342
#: ./docs/10.x/collections.md:348
#: ./docs/11.x/collections.md:405
#: ./docs/master/collections.md:348
msgid "`collect()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:334
#: ./docs/9.x/collections.md:344
#: ./docs/10.x/collections.md:350
#: ./docs/11.x/collections.md:407
#: ./docs/master/collections.md:350
msgid "The `collect` method returns a new `Collection` instance with the items currently in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:336
#: ./docs/9.x/collections.md:346
#: ./docs/10.x/collections.md:352
#: ./docs/11.x/collections.md:409
#: ./docs/master/collections.md:352
msgid ""
"$collectionA = collect([1, 2, 3]);\n"
"\n"
"$collectionB = $collectionA->collect();\n"
"\n"
"$collectionB->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:344
#: ./docs/9.x/collections.md:354
#: ./docs/10.x/collections.md:360
#: ./docs/11.x/collections.md:417
#: ./docs/master/collections.md:360
msgid "The `collect` method is primarily useful for converting [lazy collections](#lazy-collections) into standard `Collection` instances:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:346
#: ./docs/9.x/collections.md:356
msgid ""
"$lazyCollection = LazyCollection::make(function () {\n"
"    yield 1;\n"
"    yield 2;\n"
"    yield 3;\n"
"});\n"
"\n"
"$collection = $lazyCollection->collect();\n"
"\n"
"get_class($collection);\n"
"\n"
"// 'Illuminate\\Support\\Collection'\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/11.x/collections.md:360
#: ./docs/master/collections.md:303
msgid "This method is especially useful in [views](/docs/{{version}}/views) when working with a grid system such as [Bootstrap](https://getbootstrap.com/docs/5.3/layout/grid/). For example, imagine you have a collection of [Eloquent](/docs/{{version}}/eloquent) models you want to display in a grid:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:362
#: ./docs/11.x/collections.md:419
#: ./docs/master/collections.md:362
msgid ""
"$lazyCollection = LazyCollection::make(function () {\n"
"    yield 1;\n"
"    yield 2;\n"
"    yield 3;\n"
"});\n"
"\n"
"$collection = $lazyCollection->collect();\n"
"\n"
"$collection::class;\n"
"\n"
"// 'Illuminate\\Support\\Collection'\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:362
#: ./docs/9.x/collections.md:373
#: ./docs/10.x/collections.md:379
#: ./docs/11.x/collections.md:436
#: ./docs/master/collections.md:379
msgid "The `collect` method is especially useful when you have an instance of `Enumerable` and need a non-lazy collection instance. Since `collect()` is part of the `Enumerable` contract, you can safely use it to get a `Collection` instance."
msgstr ""

# P
#: ./docs/8.x/collections.md:364
#: ./docs/9.x/collections.md:375
#: ./docs/10.x/collections.md:381
#: ./docs/11.x/collections.md:438
#: ./docs/master/collections.md:381
#~ msgid "<a name=\"method-combine\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:365
#: ./docs/9.x/collections.md:376
#: ./docs/10.x/collections.md:382
#: ./docs/11.x/collections.md:439
#: ./docs/master/collections.md:382
msgid "`combine()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:367
#: ./docs/9.x/collections.md:378
#: ./docs/10.x/collections.md:384
#: ./docs/11.x/collections.md:441
#: ./docs/master/collections.md:384
msgid "The `combine` method combines the values of the collection, as keys, with the values of another array or collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:369
#: ./docs/9.x/collections.md:380
#: ./docs/10.x/collections.md:386
#: ./docs/11.x/collections.md:443
#: ./docs/master/collections.md:386
msgid ""
"$collection = collect(['name', 'age']);\n"
"\n"
"$combined = $collection->combine(['George', 29]);\n"
"\n"
"$combined->all();\n"
"\n"
"// ['name' => 'George', 'age' => 29]"
msgstr ""

# P
#: ./docs/8.x/collections.md:377
#: ./docs/9.x/collections.md:388
#: ./docs/10.x/collections.md:394
#: ./docs/11.x/collections.md:451
#: ./docs/master/collections.md:394
#~ msgid "<a name=\"method-concat\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:378
#: ./docs/9.x/collections.md:389
#: ./docs/10.x/collections.md:395
#: ./docs/11.x/collections.md:452
#: ./docs/master/collections.md:395
msgid "`concat()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:380
#: ./docs/9.x/collections.md:391
#: ./docs/10.x/collections.md:397
#: ./docs/11.x/collections.md:454
#: ./docs/master/collections.md:397
msgid "The `concat` method appends the given `array` or collection's values onto the end of another collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:382
#: ./docs/9.x/collections.md:393
#: ./docs/10.x/collections.md:399
#: ./docs/11.x/collections.md:456
#: ./docs/master/collections.md:399
msgid ""
"$collection = collect(['John Doe']);\n"
"\n"
"$concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\n"
"\n"
"$concatenated->all();\n"
"\n"
"// ['John Doe', 'Jane Doe', 'Johnny Doe']"
msgstr ""

# P
#: ./docs/8.x/collections.md:390
#: ./docs/9.x/collections.md:403
#: ./docs/10.x/collections.md:409
#: ./docs/11.x/collections.md:466
#: ./docs/master/collections.md:409
#~ msgid "<a name=\"method-contains\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:391
#: ./docs/9.x/collections.md:404
#: ./docs/10.x/collections.md:410
#: ./docs/11.x/collections.md:467
#: ./docs/master/collections.md:410
msgid "`contains()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:393
#: ./docs/9.x/collections.md:406
#: ./docs/10.x/collections.md:412
#: ./docs/11.x/collections.md:469
#: ./docs/master/collections.md:412
msgid "The `contains` method determines whether the collection contains a given item. You may pass a closure to the `contains` method to determine if an element exists in the collection matching a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:395
#: ./docs/9.x/collections.md:408
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->contains(function ($value, $key) {\n"
"    return $value > 5;\n"
"});\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/9.x/collections.md:401
#: ./docs/10.x/collections.md:407
#: ./docs/11.x/collections.md:464
#: ./docs/master/collections.md:407
msgid "The `concat` method numerically reindexes keys for items concatenated onto the original collection. To maintain keys in associative collections, see the [merge](#method-merge) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:403
#: ./docs/9.x/collections.md:416
#: ./docs/10.x/collections.md:422
#: ./docs/11.x/collections.md:479
#: ./docs/master/collections.md:422
msgid "Alternatively, you may pass a string to the `contains` method to determine whether the collection contains a given item value:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:405
#: ./docs/9.x/collections.md:418
#: ./docs/10.x/collections.md:424
#: ./docs/11.x/collections.md:481
#: ./docs/master/collections.md:424
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 100]);\n"
"\n"
"$collection->contains('Desk');\n"
"\n"
"// true\n"
"\n"
"$collection->contains('New York');\n"
"\n"
"// false"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:414
#: ./docs/11.x/collections.md:471
#: ./docs/master/collections.md:414
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->contains(function (int $value, int $key) {\n"
"    return $value > 5;\n"
"});\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:415
#: ./docs/9.x/collections.md:428
#: ./docs/10.x/collections.md:434
#: ./docs/11.x/collections.md:491
#: ./docs/master/collections.md:434
msgid "You may also pass a key / value pair to the `contains` method, which will determine if the given pair exists in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:417
#: ./docs/9.x/collections.md:430
#: ./docs/10.x/collections.md:436
#: ./docs/11.x/collections.md:493
#: ./docs/master/collections.md:436
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"]);\n"
"\n"
"$collection->contains('product', 'Bookcase');\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:426
#: ./docs/9.x/collections.md:439
#: ./docs/10.x/collections.md:445
#: ./docs/11.x/collections.md:502
#: ./docs/master/collections.md:445
msgid "The `contains` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`containsStrict`](#method-containsstrict) method to filter using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:428
#: ./docs/9.x/collections.md:441
#: ./docs/10.x/collections.md:447
#: ./docs/11.x/collections.md:504
#: ./docs/master/collections.md:447
msgid "For the inverse of `contains`, see the [doesntContain](#method-doesntcontain) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:430
#: ./docs/9.x/collections.md:460
#: ./docs/10.x/collections.md:466
#: ./docs/11.x/collections.md:523
#: ./docs/master/collections.md:466
#~ msgid "<a name=\"method-containsstrict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:431
#: ./docs/9.x/collections.md:461
#: ./docs/10.x/collections.md:467
#: ./docs/11.x/collections.md:524
#: ./docs/master/collections.md:467
msgid "`containsStrict()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:433
#: ./docs/9.x/collections.md:463
#: ./docs/10.x/collections.md:469
#: ./docs/11.x/collections.md:526
#: ./docs/master/collections.md:469
msgid "This method has the same signature as the [`contains`](#method-contains) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:435
#: ./docs/9.x/collections.md:466
#: ./docs/10.x/collections.md:472
#: ./docs/11.x/collections.md:529
#: ./docs/master/collections.md:472
msgid "This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-contains)."
msgstr ""

# P
#: ./docs/8.x/collections.md:437
#: ./docs/9.x/collections.md:468
#: ./docs/10.x/collections.md:474
#: ./docs/11.x/collections.md:531
#: ./docs/master/collections.md:474
#~ msgid "<a name=\"method-count\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:438
#: ./docs/9.x/collections.md:469
#: ./docs/10.x/collections.md:475
#: ./docs/11.x/collections.md:532
#: ./docs/master/collections.md:475
msgid "`count()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:440
#: ./docs/9.x/collections.md:471
#: ./docs/10.x/collections.md:477
#: ./docs/11.x/collections.md:534
#: ./docs/master/collections.md:477
msgid "The `count` method returns the total number of items in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:442
#: ./docs/9.x/collections.md:473
#: ./docs/10.x/collections.md:479
#: ./docs/11.x/collections.md:536
#: ./docs/master/collections.md:479
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$collection->count();\n"
"\n"
"// 4"
msgstr ""

# P
#: ./docs/9.x/collections.md:443
#: ./docs/10.x/collections.md:449
#: ./docs/11.x/collections.md:506
#: ./docs/master/collections.md:449
#~ msgid "<a name=\"method-containsoneitem\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/collections.md:444
#: ./docs/10.x/collections.md:450
#: ./docs/11.x/collections.md:507
#: ./docs/master/collections.md:450
msgid "`containsOneItem()` {.collection-method}"
msgstr ""

# P
#: ./docs/9.x/collections.md:446
#: ./docs/10.x/collections.md:452
#: ./docs/11.x/collections.md:509
#: ./docs/master/collections.md:452
msgid "The `containsOneItem` method determines whether the collection contains a single item:"
msgstr ""

# P
#: ./docs/8.x/collections.md:448
#: ./docs/9.x/collections.md:479
#: ./docs/10.x/collections.md:485
#: ./docs/11.x/collections.md:542
#: ./docs/master/collections.md:485
#~ msgid "<a name=\"method-countBy\"></a>"
#~ msgstr ""

# CODE
#: ./docs/9.x/collections.md:448
#: ./docs/10.x/collections.md:454
#: ./docs/11.x/collections.md:511
#: ./docs/master/collections.md:454
msgid ""
"collect([])->containsOneItem();\n"
"\n"
"// false\n"
"\n"
"collect(['1'])->containsOneItem();\n"
"\n"
"// true\n"
"\n"
"collect(['1', '2'])->containsOneItem();\n"
"\n"
"// false"
msgstr ""

# H4
#: ./docs/8.x/collections.md:449
#: ./docs/9.x/collections.md:480
#: ./docs/10.x/collections.md:486
#: ./docs/11.x/collections.md:543
#: ./docs/master/collections.md:486
msgid "`countBy()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:451
#: ./docs/9.x/collections.md:482
#: ./docs/10.x/collections.md:488
#: ./docs/11.x/collections.md:545
#: ./docs/master/collections.md:488
msgid "The `countBy` method counts the occurrences of values in the collection. By default, the method counts the occurrences of every element, allowing you to count certain \"types\" of elements in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:453
#: ./docs/9.x/collections.md:484
#: ./docs/10.x/collections.md:490
#: ./docs/11.x/collections.md:547
#: ./docs/master/collections.md:490
msgid ""
"$collection = collect([1, 2, 2, 2, 3]);\n"
"\n"
"$counted = $collection->countBy();\n"
"\n"
"$counted->all();\n"
"\n"
"// [1 => 1, 2 => 3, 3 => 1]"
msgstr ""

# P
#: ./docs/8.x/collections.md:461
#: ./docs/9.x/collections.md:492
#: ./docs/10.x/collections.md:498
#: ./docs/11.x/collections.md:555
#: ./docs/master/collections.md:498
msgid "You pass a closure to the `countBy` method to count all items by a custom value:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:463
#: ./docs/9.x/collections.md:494
msgid ""
"$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n"
"\n"
"$counted = $collection->countBy(function ($email) {\n"
"    return substr(strrchr($email, \"@\"), 1);\n"
"});\n"
"\n"
"$counted->all();\n"
"\n"
"// ['gmail.com' => 2, 'yahoo.com' => 1]"
msgstr ""

# P
#: ./docs/8.x/collections.md:473
#: ./docs/9.x/collections.md:504
#: ./docs/10.x/collections.md:510
#: ./docs/11.x/collections.md:567
#: ./docs/master/collections.md:510
#~ msgid "<a name=\"method-crossjoin\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:474
#: ./docs/9.x/collections.md:505
#: ./docs/10.x/collections.md:511
#: ./docs/11.x/collections.md:568
#: ./docs/master/collections.md:511
msgid "`crossJoin()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:476
#: ./docs/9.x/collections.md:507
#: ./docs/10.x/collections.md:513
#: ./docs/11.x/collections.md:570
#: ./docs/master/collections.md:513
msgid "The `crossJoin` method cross joins the collection's values among the given arrays or collections, returning a Cartesian product with all possible permutations:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:478
#: ./docs/9.x/collections.md:509
#: ./docs/10.x/collections.md:515
#: ./docs/11.x/collections.md:572
#: ./docs/master/collections.md:515
msgid ""
"$collection = collect([1, 2]);\n"
"\n"
"$matrix = $collection->crossJoin(['a', 'b']);\n"
"\n"
"$matrix->all();\n"
"\n"
"/*\n"
"    [\n"
"        [1, 'a'],\n"
"        [1, 'b'],\n"
"        [2, 'a'],\n"
"        [2, 'b'],\n"
"    ]\n"
"*/\n"
"\n"
"$collection = collect([1, 2]);\n"
"\n"
"$matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n"
"\n"
"$matrix->all();\n"
"\n"
"/*\n"
"    [\n"
"        [1, 'a', 'I'],\n"
"        [1, 'a', 'II'],\n"
"        [1, 'b', 'I'],\n"
"        [1, 'b', 'II'],\n"
"        [2, 'a', 'I'],\n"
"        [2, 'a', 'II'],\n"
"        [2, 'b', 'I'],\n"
"        [2, 'b', 'II'],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:500
#: ./docs/11.x/collections.md:557
#: ./docs/master/collections.md:500
msgid ""
"$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n"
"\n"
"$counted = $collection->countBy(function (string $email) {\n"
"    return substr(strrchr($email, \"@\"), 1);\n"
"});\n"
"\n"
"$counted->all();\n"
"\n"
"// ['gmail.com' => 2, 'yahoo.com' => 1]"
msgstr ""

# P
#: ./docs/8.x/collections.md:512
#: ./docs/9.x/collections.md:543
#: ./docs/10.x/collections.md:549
#: ./docs/11.x/collections.md:606
#: ./docs/master/collections.md:549
#~ msgid "<a name=\"method-dd\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:513
#: ./docs/9.x/collections.md:544
#: ./docs/10.x/collections.md:550
#: ./docs/11.x/collections.md:607
#: ./docs/master/collections.md:550
msgid "`dd()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:515
#: ./docs/9.x/collections.md:546
#: ./docs/10.x/collections.md:552
#: ./docs/11.x/collections.md:609
#: ./docs/master/collections.md:552
msgid "The `dd` method dumps the collection's items and ends execution of the script:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:517
#: ./docs/9.x/collections.md:548
#: ./docs/10.x/collections.md:554
#: ./docs/11.x/collections.md:611
#: ./docs/master/collections.md:554
msgid ""
"$collection = collect(['John Doe', 'Jane Doe']);\n"
"\n"
"$collection->dd();\n"
"\n"
"/*\n"
"    Collection {\n"
"        #items: array:2 [\n"
"            0 => \"John Doe\"\n"
"            1 => \"Jane Doe\"\n"
"        ]\n"
"    }\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:530
#: ./docs/9.x/collections.md:561
#: ./docs/10.x/collections.md:567
#: ./docs/11.x/collections.md:624
#: ./docs/master/collections.md:567
msgid "If you do not want to stop executing the script, use the [`dump`](#method-dump) method instead."
msgstr ""

# P
#: ./docs/8.x/collections.md:532
#: ./docs/9.x/collections.md:563
#: ./docs/10.x/collections.md:569
#: ./docs/11.x/collections.md:626
#: ./docs/master/collections.md:569
#~ msgid "<a name=\"method-diff\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:533
#: ./docs/9.x/collections.md:564
#: ./docs/10.x/collections.md:570
#: ./docs/11.x/collections.md:627
#: ./docs/master/collections.md:570
msgid "`diff()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:535
#: ./docs/9.x/collections.md:566
#: ./docs/10.x/collections.md:572
#: ./docs/11.x/collections.md:629
#: ./docs/master/collections.md:572
msgid "The `diff` method compares the collection against another collection or a plain PHP `array` based on its values. This method will return the values in the original collection that are not present in the given collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:537
#: ./docs/9.x/collections.md:568
#: ./docs/10.x/collections.md:574
#: ./docs/11.x/collections.md:631
#: ./docs/master/collections.md:574
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$diff = $collection->diff([2, 4, 6, 8]);\n"
"\n"
"$diff->all();\n"
"\n"
"// [1, 3, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:545
#: ./docs/9.x/collections.md:577
#: ./docs/10.x/collections.md:583
#: ./docs/11.x/collections.md:640
#: ./docs/master/collections.md:583
msgid "This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-diff)."
msgstr ""

# P
#: ./docs/8.x/collections.md:547
#: ./docs/9.x/collections.md:579
#: ./docs/10.x/collections.md:585
#: ./docs/11.x/collections.md:642
#: ./docs/master/collections.md:585
#~ msgid "<a name=\"method-diffassoc\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:548
#: ./docs/9.x/collections.md:580
#: ./docs/10.x/collections.md:586
#: ./docs/11.x/collections.md:643
#: ./docs/master/collections.md:586
msgid "`diffAssoc()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:550
#: ./docs/9.x/collections.md:582
#: ./docs/10.x/collections.md:588
#: ./docs/11.x/collections.md:645
#: ./docs/master/collections.md:588
msgid "The `diffAssoc` method compares the collection against another collection or a plain PHP `array` based on its keys and values. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:552
#: ./docs/9.x/collections.md:584
#: ./docs/10.x/collections.md:590
#: ./docs/11.x/collections.md:647
#: ./docs/master/collections.md:590
msgid ""
"$collection = collect([\n"
"    'color' => 'orange',\n"
"    'type' => 'fruit',\n"
"    'remain' => 6,\n"
"]);\n"
"\n"
"$diff = $collection->diffAssoc([\n"
"    'color' => 'yellow',\n"
"    'type' => 'fruit',\n"
"    'remain' => 3,\n"
"    'used' => 6,\n"
"]);\n"
"\n"
"$diff->all();\n"
"\n"
"// ['color' => 'orange', 'remain' => 6]"
msgstr ""

# P
#: ./docs/8.x/collections.md:569
#: ./docs/9.x/collections.md:601
#: ./docs/10.x/collections.md:630
#: ./docs/11.x/collections.md:687
#: ./docs/master/collections.md:630
#~ msgid "<a name=\"method-diffkeys\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:570
#: ./docs/9.x/collections.md:602
#: ./docs/10.x/collections.md:631
#: ./docs/11.x/collections.md:688
#: ./docs/master/collections.md:631
msgid "`diffKeys()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:572
#: ./docs/9.x/collections.md:604
#: ./docs/10.x/collections.md:633
#: ./docs/11.x/collections.md:690
#: ./docs/master/collections.md:633
msgid "The `diffKeys` method compares the collection against another collection or a plain PHP `array` based on its keys. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:574
#: ./docs/9.x/collections.md:606
#: ./docs/10.x/collections.md:635
#: ./docs/11.x/collections.md:692
#: ./docs/master/collections.md:635
msgid ""
"$collection = collect([\n"
"    'one' => 10,\n"
"    'two' => 20,\n"
"    'three' => 30,\n"
"    'four' => 40,\n"
"    'five' => 50,\n"
"]);\n"
"\n"
"$diff = $collection->diffKeys([\n"
"    'two' => 2,\n"
"    'four' => 4,\n"
"    'six' => 6,\n"
"    'eight' => 8,\n"
"]);\n"
"\n"
"$diff->all();\n"
"\n"
"// ['one' => 10, 'three' => 30, 'five' => 50]"
msgstr ""

# P
#: ./docs/8.x/collections.md:593
#: ./docs/9.x/collections.md:625
#: ./docs/10.x/collections.md:654
#: ./docs/11.x/collections.md:711
#: ./docs/master/collections.md:654
#~ msgid "<a name=\"method-doesntcontain\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:594
#: ./docs/9.x/collections.md:626
#: ./docs/10.x/collections.md:655
#: ./docs/11.x/collections.md:712
#: ./docs/master/collections.md:655
msgid "`doesntContain()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:596
#: ./docs/9.x/collections.md:628
#: ./docs/10.x/collections.md:657
#: ./docs/11.x/collections.md:714
#: ./docs/master/collections.md:657
msgid "The `doesntContain` method determines whether the collection does not contain a given item. You may pass a closure to the `doesntContain` method to determine if an element does not exist in the collection matching a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:598
#: ./docs/9.x/collections.md:630
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->doesntContain(function ($value, $key) {\n"
"    return $value < 5;\n"
"});\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:606
#: ./docs/9.x/collections.md:638
#: ./docs/10.x/collections.md:667
#: ./docs/11.x/collections.md:724
#: ./docs/master/collections.md:667
msgid "Alternatively, you may pass a string to the `doesntContain` method to determine whether the collection does not contain a given item value:"
msgstr ""

# P
#: ./docs/10.x/collections.md:607
#: ./docs/11.x/collections.md:664
#: ./docs/master/collections.md:607
#~ msgid "<a name=\"method-diffassocusing\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/collections.md:608
#: ./docs/11.x/collections.md:665
#: ./docs/master/collections.md:608
msgid "`diffAssocUsing()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:608
#: ./docs/9.x/collections.md:640
#: ./docs/10.x/collections.md:669
#: ./docs/11.x/collections.md:726
#: ./docs/master/collections.md:669
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 100]);\n"
"\n"
"$collection->doesntContain('Table');\n"
"\n"
"// true\n"
"\n"
"$collection->doesntContain('Desk');\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/10.x/collections.md:610
#: ./docs/11.x/collections.md:667
#: ./docs/master/collections.md:610
msgid "Unlike `diffAssoc`, `diffAssocUsing` accepts a user supplied callback function for the indices comparison:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:612
#: ./docs/11.x/collections.md:669
#: ./docs/master/collections.md:612
msgid ""
"$collection = collect([\n"
"    'color' => 'orange',\n"
"    'type' => 'fruit',\n"
"    'remain' => 6,\n"
"]);\n"
"\n"
"$diff = $collection->diffAssocUsing([\n"
"    'Color' => 'yellow',\n"
"    'Type' => 'fruit',\n"
"    'Remain' => 3,\n"
"], 'strnatcasecmp');\n"
"\n"
"$diff->all();\n"
"\n"
"// ['color' => 'orange', 'remain' => 6]"
msgstr ""

# P
#: ./docs/8.x/collections.md:618
#: ./docs/9.x/collections.md:650
#: ./docs/10.x/collections.md:679
#: ./docs/11.x/collections.md:736
#: ./docs/master/collections.md:679
msgid "You may also pass a key / value pair to the `doesntContain` method, which will determine if the given pair does not exist in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:620
#: ./docs/9.x/collections.md:652
#: ./docs/10.x/collections.md:681
#: ./docs/11.x/collections.md:738
#: ./docs/master/collections.md:681
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"]);\n"
"\n"
"$collection->doesntContain('product', 'Bookcase');\n"
"\n"
"// true"
msgstr ""

# P
#: ./docs/10.x/collections.md:628
#: ./docs/11.x/collections.md:685
#: ./docs/master/collections.md:628
msgid "The callback must be a comparison function that returns an integer less than, equal to, or greater than zero. For more information, refer to the PHP documentation on [`array_diff_uassoc`](https://www.php.net/array_diff_uassoc#refsect1-function.array-diff-uassoc-parameters), which is the PHP function that the `diffAssocUsing` method utilizes internally."
msgstr ""

# P
#: ./docs/8.x/collections.md:629
#: ./docs/9.x/collections.md:661
#: ./docs/10.x/collections.md:690
#: ./docs/11.x/collections.md:747
#: ./docs/master/collections.md:690
msgid "The `doesntContain` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value."
msgstr ""

# P
#: ./docs/8.x/collections.md:631
#: ./docs/9.x/collections.md:663
#: ./docs/10.x/collections.md:705
#: ./docs/11.x/collections.md:762
#: ./docs/master/collections.md:705
#~ msgid "<a name=\"method-dump\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:632
#: ./docs/9.x/collections.md:664
#: ./docs/10.x/collections.md:706
#: ./docs/11.x/collections.md:763
#: ./docs/master/collections.md:706
msgid "`dump()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:634
#: ./docs/9.x/collections.md:666
#: ./docs/10.x/collections.md:708
#: ./docs/11.x/collections.md:765
#: ./docs/master/collections.md:708
msgid "The `dump` method dumps the collection's items:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:636
#: ./docs/9.x/collections.md:668
#: ./docs/10.x/collections.md:710
#: ./docs/11.x/collections.md:767
#: ./docs/master/collections.md:710
msgid ""
"$collection = collect(['John Doe', 'Jane Doe']);\n"
"\n"
"$collection->dump();\n"
"\n"
"/*\n"
"    Collection {\n"
"        #items: array:2 [\n"
"            0 => \"John Doe\"\n"
"            1 => \"Jane Doe\"\n"
"        ]\n"
"    }\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:649
#: ./docs/9.x/collections.md:681
#: ./docs/10.x/collections.md:723
#: ./docs/11.x/collections.md:780
#: ./docs/master/collections.md:723
msgid "If you want to stop executing the script after dumping the collection, use the [`dd`](#method-dd) method instead."
msgstr ""

# P
#: ./docs/8.x/collections.md:651
#: ./docs/9.x/collections.md:683
#: ./docs/10.x/collections.md:725
#: ./docs/11.x/collections.md:782
#: ./docs/master/collections.md:725
#~ msgid "<a name=\"method-duplicates\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:652
#: ./docs/9.x/collections.md:684
#: ./docs/10.x/collections.md:726
#: ./docs/11.x/collections.md:783
#: ./docs/master/collections.md:726
msgid "`duplicates()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:654
#: ./docs/9.x/collections.md:686
#: ./docs/10.x/collections.md:728
#: ./docs/11.x/collections.md:785
#: ./docs/master/collections.md:728
msgid "The `duplicates` method retrieves and returns duplicate values from the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:656
#: ./docs/9.x/collections.md:688
#: ./docs/10.x/collections.md:730
#: ./docs/11.x/collections.md:787
#: ./docs/master/collections.md:730
msgid ""
"$collection = collect(['a', 'b', 'a', 'c', 'b']);\n"
"\n"
"$collection->duplicates();\n"
"\n"
"// [2 => 'a', 4 => 'b']"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:659
#: ./docs/11.x/collections.md:716
#: ./docs/master/collections.md:659
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->doesntContain(function (int $value, int $key) {\n"
"    return $value < 5;\n"
"});\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:662
#: ./docs/9.x/collections.md:694
#: ./docs/10.x/collections.md:736
#: ./docs/11.x/collections.md:793
#: ./docs/master/collections.md:736
msgid "If the collection contains arrays or objects, you can pass the key of the attributes that you wish to check for duplicate values:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:664
#: ./docs/9.x/collections.md:696
#: ./docs/10.x/collections.md:738
#: ./docs/11.x/collections.md:795
#: ./docs/master/collections.md:738
msgid ""
"$employees = collect([\n"
"    ['email' => 'abigail@example.com', 'position' => 'Developer'],\n"
"    ['email' => 'james@example.com', 'position' => 'Designer'],\n"
"    ['email' => 'victoria@example.com', 'position' => 'Developer'],\n"
"]);\n"
"\n"
"$employees->duplicates('position');\n"
"\n"
"// [2 => 'Developer']"
msgstr ""

# P
#: ./docs/8.x/collections.md:674
#: ./docs/9.x/collections.md:706
#: ./docs/10.x/collections.md:748
#: ./docs/11.x/collections.md:805
#: ./docs/master/collections.md:748
#~ msgid "<a name=\"method-duplicatesstrict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:675
#: ./docs/9.x/collections.md:707
#: ./docs/10.x/collections.md:749
#: ./docs/11.x/collections.md:806
#: ./docs/master/collections.md:749
msgid "`duplicatesStrict()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:677
#: ./docs/9.x/collections.md:709
#: ./docs/10.x/collections.md:751
#: ./docs/11.x/collections.md:808
#: ./docs/master/collections.md:751
msgid "This method has the same signature as the [`duplicates`](#method-duplicates) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:679
#: ./docs/9.x/collections.md:711
#: ./docs/10.x/collections.md:753
#: ./docs/11.x/collections.md:810
#: ./docs/master/collections.md:753
#~ msgid "<a name=\"method-each\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:680
#: ./docs/9.x/collections.md:712
#: ./docs/10.x/collections.md:754
#: ./docs/11.x/collections.md:811
#: ./docs/master/collections.md:754
msgid "`each()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:682
#: ./docs/9.x/collections.md:714
#: ./docs/10.x/collections.md:756
#: ./docs/11.x/collections.md:813
#: ./docs/master/collections.md:756
msgid "The `each` method iterates over the items in the collection and passes each item to a closure:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:684
#: ./docs/9.x/collections.md:716
msgid ""
"$collection->each(function ($item, $key) {\n"
"    //\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:688
#: ./docs/9.x/collections.md:720
#: ./docs/10.x/collections.md:764
#: ./docs/11.x/collections.md:821
#: ./docs/master/collections.md:764
msgid "If you would like to stop iterating through the items, you may return `false` from your closure:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:690
#: ./docs/9.x/collections.md:722
msgid ""
"$collection->each(function ($item, $key) {\n"
"    if (/* condition */) {\n"
"        return false;\n"
"    }\n"
"});"
msgstr ""

# P
#: ./docs/10.x/collections.md:692
#: ./docs/11.x/collections.md:749
#: ./docs/master/collections.md:692
#~ msgid "<a name=\"method-dot\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/collections.md:693
#: ./docs/11.x/collections.md:750
#: ./docs/master/collections.md:693
msgid "`dot()` {.collection-method}"
msgstr ""

# P
#: ./docs/10.x/collections.md:695
#: ./docs/11.x/collections.md:752
#: ./docs/master/collections.md:695
msgid "The `dot` method flattens a multi-dimensional collection into a single level collection that uses \"dot\" notation to indicate depth:"
msgstr ""

# P
#: ./docs/8.x/collections.md:696
#: ./docs/9.x/collections.md:728
#: ./docs/10.x/collections.md:772
#: ./docs/11.x/collections.md:829
#: ./docs/master/collections.md:772
#~ msgid "<a name=\"method-eachspread\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/collections.md:697
#: ./docs/11.x/collections.md:754
#: ./docs/master/collections.md:697
msgid ""
"$collection = collect(['products' => ['desk' => ['price' => 100]]]);\n"
"\n"
"$flattened = $collection->dot();\n"
"\n"
"$flattened->all();\n"
"\n"
"// ['products.desk.price' => 100]"
msgstr ""

# H4
#: ./docs/8.x/collections.md:697
#: ./docs/9.x/collections.md:729
#: ./docs/10.x/collections.md:773
#: ./docs/11.x/collections.md:830
#: ./docs/master/collections.md:773
msgid "`eachSpread()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:699
#: ./docs/9.x/collections.md:731
#: ./docs/10.x/collections.md:775
#: ./docs/11.x/collections.md:832
#: ./docs/master/collections.md:775
msgid "The `eachSpread` method iterates over the collection's items, passing each nested item value into the given callback:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:701
#: ./docs/9.x/collections.md:733
msgid ""
"$collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n"
"\n"
"$collection->eachSpread(function ($name, $age) {\n"
"    //\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:707
#: ./docs/9.x/collections.md:739
#: ./docs/10.x/collections.md:783
#: ./docs/11.x/collections.md:840
#: ./docs/master/collections.md:783
msgid "You may stop iterating through the items by returning `false` from the callback:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:709
#: ./docs/9.x/collections.md:741
msgid ""
"$collection->eachSpread(function ($name, $age) {\n"
"    return false;\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:713
#: ./docs/9.x/collections.md:745
#: ./docs/10.x/collections.md:805
#: ./docs/11.x/collections.md:862
#: ./docs/master/collections.md:805
#~ msgid "<a name=\"method-every\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:714
#: ./docs/9.x/collections.md:746
#: ./docs/10.x/collections.md:806
#: ./docs/11.x/collections.md:863
#: ./docs/master/collections.md:806
msgid "`every()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:716
#: ./docs/9.x/collections.md:748
#: ./docs/10.x/collections.md:808
#: ./docs/11.x/collections.md:865
#: ./docs/master/collections.md:808
msgid "The `every` method may be used to verify that all elements of a collection pass a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:718
#: ./docs/9.x/collections.md:750
msgid ""
"collect([1, 2, 3, 4])->every(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:724
#: ./docs/9.x/collections.md:756
#: ./docs/10.x/collections.md:816
#: ./docs/11.x/collections.md:873
#: ./docs/master/collections.md:816
msgid "If the collection is empty, the `every` method will return true:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:726
#: ./docs/9.x/collections.md:758
msgid ""
"$collection = collect([]);\n"
"\n"
"$collection->every(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// true"
msgstr ""

# P
#: ./docs/8.x/collections.md:734
#: ./docs/9.x/collections.md:766
#: ./docs/10.x/collections.md:826
#: ./docs/11.x/collections.md:883
#: ./docs/master/collections.md:826
#~ msgid "<a name=\"method-except\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:735
#: ./docs/9.x/collections.md:767
#: ./docs/10.x/collections.md:827
#: ./docs/11.x/collections.md:884
#: ./docs/master/collections.md:827
msgid "`except()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:737
#: ./docs/9.x/collections.md:769
#: ./docs/10.x/collections.md:829
#: ./docs/11.x/collections.md:886
#: ./docs/master/collections.md:829
msgid "The `except` method returns all items in the collection except for those with the specified keys:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:739
#: ./docs/9.x/collections.md:771
#: ./docs/10.x/collections.md:831
#: ./docs/11.x/collections.md:888
#: ./docs/master/collections.md:831
msgid ""
"$collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);\n"
"\n"
"$filtered = $collection->except(['price', 'discount']);\n"
"\n"
"$filtered->all();\n"
"\n"
"// ['product_id' => 1]"
msgstr ""

# P
#: ./docs/8.x/collections.md:747
#: ./docs/9.x/collections.md:779
#: ./docs/10.x/collections.md:839
#: ./docs/11.x/collections.md:896
#: ./docs/master/collections.md:839
msgid "For the inverse of `except`, see the [only](#method-only) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:749
#: ./docs/9.x/collections.md:782
#: ./docs/10.x/collections.md:842
#: ./docs/11.x/collections.md:899
#: ./docs/master/collections.md:842
msgid "This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-except)."
msgstr ""

# P
#: ./docs/8.x/collections.md:751
#: ./docs/9.x/collections.md:784
#: ./docs/10.x/collections.md:844
#: ./docs/11.x/collections.md:901
#: ./docs/master/collections.md:844
#~ msgid "<a name=\"method-filter\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:752
#: ./docs/9.x/collections.md:785
#: ./docs/10.x/collections.md:845
#: ./docs/11.x/collections.md:902
#: ./docs/master/collections.md:845
msgid "`filter()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:754
#: ./docs/9.x/collections.md:787
#: ./docs/10.x/collections.md:847
#: ./docs/11.x/collections.md:904
#: ./docs/master/collections.md:847
msgid "The `filter` method filters the collection using the given callback, keeping only those items that pass a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:756
#: ./docs/9.x/collections.md:789
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$filtered = $collection->filter(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"$filtered->all();\n"
"\n"
"// [3, 4]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:758
#: ./docs/11.x/collections.md:815
#: ./docs/master/collections.md:758
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$collection->each(function (int $item, int $key) {\n"
"    // ...\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:766
#: ./docs/11.x/collections.md:823
#: ./docs/master/collections.md:766
msgid ""
"$collection->each(function (int $item, int $key) {\n"
"    if (/* condition */) {\n"
"        return false;\n"
"    }\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:766
#: ./docs/9.x/collections.md:799
#: ./docs/10.x/collections.md:859
#: ./docs/11.x/collections.md:916
#: ./docs/master/collections.md:859
msgid "If no callback is supplied, all entries of the collection that are equivalent to `false` will be removed:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:768
#: ./docs/9.x/collections.md:801
#: ./docs/10.x/collections.md:861
#: ./docs/11.x/collections.md:918
#: ./docs/master/collections.md:861
msgid ""
"$collection = collect([1, 2, 3, null, false, '', 0, []]);\n"
"\n"
"$collection->filter()->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:774
#: ./docs/9.x/collections.md:807
#: ./docs/10.x/collections.md:867
#: ./docs/11.x/collections.md:924
#: ./docs/master/collections.md:867
msgid "For the inverse of `filter`, see the [reject](#method-reject) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:776
#: ./docs/9.x/collections.md:809
#: ./docs/10.x/collections.md:869
#: ./docs/11.x/collections.md:926
#: ./docs/master/collections.md:869
#~ msgid "<a name=\"method-first\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/collections.md:777
#: ./docs/11.x/collections.md:834
#: ./docs/master/collections.md:777
msgid ""
"$collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n"
"\n"
"$collection->eachSpread(function (string $name, int $age) {\n"
"    // ...\n"
"});"
msgstr ""

# H4
#: ./docs/8.x/collections.md:777
#: ./docs/9.x/collections.md:810
#: ./docs/10.x/collections.md:870
#: ./docs/11.x/collections.md:927
#: ./docs/master/collections.md:870
msgid "`first()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:779
#: ./docs/9.x/collections.md:812
#: ./docs/10.x/collections.md:872
#: ./docs/11.x/collections.md:929
#: ./docs/master/collections.md:872
msgid "The `first` method returns the first element in the collection that passes a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:781
#: ./docs/9.x/collections.md:814
msgid ""
"collect([1, 2, 3, 4])->first(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// 3"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:785
#: ./docs/11.x/collections.md:842
#: ./docs/master/collections.md:785
msgid ""
"$collection->eachSpread(function (string $name, int $age) {\n"
"    return false;\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:787
#: ./docs/9.x/collections.md:820
#: ./docs/10.x/collections.md:880
#: ./docs/11.x/collections.md:937
#: ./docs/master/collections.md:880
msgid "You may also call the `first` method with no arguments to get the first element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

# P
#: ./docs/10.x/collections.md:789
#: ./docs/11.x/collections.md:846
#: ./docs/master/collections.md:789
#~ msgid "<a name=\"method-ensure\"></a>"
#~ msgstr ""

# CODE
#: ./docs/8.x/collections.md:789
#: ./docs/9.x/collections.md:822
#: ./docs/10.x/collections.md:882
#: ./docs/11.x/collections.md:939
#: ./docs/master/collections.md:882
msgid ""
"collect([1, 2, 3, 4])->first();\n"
"\n"
"// 1"
msgstr ""

# H4
#: ./docs/10.x/collections.md:790
#: ./docs/11.x/collections.md:847
#: ./docs/master/collections.md:790
msgid "`ensure()` {.collection-method}"
msgstr ""

# P
#: ./docs/10.x/collections.md:792
#: ./docs/11.x/collections.md:849
#: ./docs/master/collections.md:792
msgid "The `ensure` method may be used to verify that all elements of a collection are of a given type or list of types. Otherwise, an `UnexpectedValueException` will be thrown:"
msgstr ""

# P
#: ./docs/8.x/collections.md:793
#: ./docs/9.x/collections.md:843
#: ./docs/10.x/collections.md:903
#: ./docs/11.x/collections.md:960
#: ./docs/master/collections.md:903
#~ msgid "<a name=\"method-first-where\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/collections.md:794
#: ./docs/11.x/collections.md:851
#: ./docs/master/collections.md:794
msgid ""
"return $collection->ensure(User::class);\n"
"\n"
"return $collection->ensure([User::class, Customer::class]);"
msgstr ""

# H4
#: ./docs/8.x/collections.md:794
#: ./docs/9.x/collections.md:844
#: ./docs/10.x/collections.md:904
#: ./docs/11.x/collections.md:961
#: ./docs/master/collections.md:904
msgid "`firstWhere()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:796
#: ./docs/9.x/collections.md:846
#: ./docs/10.x/collections.md:906
#: ./docs/11.x/collections.md:963
#: ./docs/master/collections.md:906
msgid "The `firstWhere` method returns the first element in the collection with the given key / value pair:"
msgstr ""

# P
#: ./docs/10.x/collections.md:798
#: ./docs/11.x/collections.md:855
#: ./docs/master/collections.md:798
msgid "Primitive types such as `string`, `int`, `float`, `bool`, and `array` may also be specified:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:798
#: ./docs/9.x/collections.md:848
#: ./docs/10.x/collections.md:908
#: ./docs/11.x/collections.md:965
#: ./docs/master/collections.md:908
msgid ""
"$collection = collect([\n"
"    ['name' => 'Regena', 'age' => null],\n"
"    ['name' => 'Linda', 'age' => 14],\n"
"    ['name' => 'Diego', 'age' => 23],\n"
"    ['name' => 'Linda', 'age' => 84],\n"
"]);\n"
"\n"
"$collection->firstWhere('name', 'Linda');\n"
"\n"
"// ['name' => 'Linda', 'age' => 14]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:800
#: ./docs/11.x/collections.md:857
#: ./docs/master/collections.md:800
msgid "return $collection->ensure('int');"
msgstr ""

# P
#: ./docs/10.x/collections.md:803
#: ./docs/11.x/collections.md:860
#: ./docs/master/collections.md:803
msgid "The `ensure` method does not guarantee that elements of different types will not be added to the collection at a later time."
msgstr ""

# P
#: ./docs/8.x/collections.md:809
#: ./docs/9.x/collections.md:859
#: ./docs/10.x/collections.md:919
#: ./docs/11.x/collections.md:976
#: ./docs/master/collections.md:919
msgid "You may also call the `firstWhere` method with a comparison operator:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:810
#: ./docs/11.x/collections.md:867
#: ./docs/master/collections.md:810
msgid ""
"collect([1, 2, 3, 4])->every(function (int $value, int $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// false"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:811
#: ./docs/9.x/collections.md:861
#: ./docs/10.x/collections.md:921
#: ./docs/11.x/collections.md:978
#: ./docs/master/collections.md:921
msgid ""
"$collection->firstWhere('age', '>=', 18);\n"
"\n"
"// ['name' => 'Diego', 'age' => 23]"
msgstr ""

# P
#: ./docs/8.x/collections.md:815
#: ./docs/9.x/collections.md:865
#: ./docs/10.x/collections.md:925
#: ./docs/11.x/collections.md:982
#: ./docs/master/collections.md:925
msgid "Like the [where](#method-where) method, you may pass one argument to the `firstWhere` method. In this scenario, the `firstWhere` method will return the first item where the given item key's value is \"truthy\":"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:817
#: ./docs/9.x/collections.md:867
#: ./docs/10.x/collections.md:927
#: ./docs/11.x/collections.md:984
#: ./docs/master/collections.md:927
msgid ""
"$collection->firstWhere('age');\n"
"\n"
"// ['name' => 'Linda', 'age' => 14]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:818
#: ./docs/11.x/collections.md:875
#: ./docs/master/collections.md:818
msgid ""
"$collection = collect([]);\n"
"\n"
"$collection->every(function (int $value, int $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// true"
msgstr ""

# P
#: ./docs/8.x/collections.md:821
#: ./docs/9.x/collections.md:871
#: ./docs/10.x/collections.md:931
#: ./docs/11.x/collections.md:988
#: ./docs/master/collections.md:931
#~ msgid "<a name=\"method-flatmap\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:822
#: ./docs/9.x/collections.md:872
#: ./docs/10.x/collections.md:932
#: ./docs/11.x/collections.md:989
#: ./docs/master/collections.md:932
msgid "`flatMap()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:824
#: ./docs/9.x/collections.md:874
#: ./docs/10.x/collections.md:934
#: ./docs/11.x/collections.md:991
#: ./docs/master/collections.md:934
msgid "The `flatMap` method iterates through the collection and passes each value to the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items. Then, the array is flattened by one level:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:826
#: ./docs/9.x/collections.md:876
msgid ""
"$collection = collect([\n"
"    ['name' => 'Sally'],\n"
"    ['school' => 'Arkansas'],\n"
"    ['age' => 28]\n"
"]);\n"
"\n"
"$flattened = $collection->flatMap(function ($values) {\n"
"    return array_map('strtoupper', $values);\n"
"});\n"
"\n"
"$flattened->all();\n"
"\n"
"// ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];"
msgstr ""

# P
#: ./docs/9.x/collections.md:826
#: ./docs/10.x/collections.md:886
#: ./docs/11.x/collections.md:943
#: ./docs/master/collections.md:886
#~ msgid "<a name=\"method-first-or-fail\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/collections.md:827
#: ./docs/10.x/collections.md:887
#: ./docs/11.x/collections.md:944
#: ./docs/master/collections.md:887
msgid "`firstOrFail()` {.collection-method}"
msgstr ""

# P
#: ./docs/9.x/collections.md:829
#: ./docs/10.x/collections.md:889
#: ./docs/11.x/collections.md:946
#: ./docs/master/collections.md:889
msgid "The `firstOrFail` method is identical to the `first` method; however, if no result is found, an `Illuminate\\Support\\ItemNotFoundException` exception will be thrown:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:831
msgid ""
"collect([1, 2, 3, 4])->firstOrFail(function ($value, $key) {\n"
"    return $value > 5;\n"
"});\n"
"\n"
"// Throws ItemNotFoundException..."
msgstr ""

# P
#: ./docs/9.x/collections.md:837
#: ./docs/10.x/collections.md:897
#: ./docs/11.x/collections.md:954
#: ./docs/master/collections.md:897
msgid "You may also call the `firstOrFail` method with no arguments to get the first element in the collection. If the collection is empty, an `Illuminate\\Support\\ItemNotFoundException` exception will be thrown:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:839
#: ./docs/10.x/collections.md:899
#: ./docs/11.x/collections.md:956
#: ./docs/master/collections.md:899
msgid ""
"collect([])->firstOrFail();\n"
"\n"
"// Throws ItemNotFoundException..."
msgstr ""

# P
#: ./docs/8.x/collections.md:840
#: ./docs/9.x/collections.md:890
#: ./docs/10.x/collections.md:950
#: ./docs/11.x/collections.md:1007
#: ./docs/master/collections.md:950
#~ msgid "<a name=\"method-flatten\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:841
#: ./docs/9.x/collections.md:891
#: ./docs/10.x/collections.md:951
#: ./docs/11.x/collections.md:1008
#: ./docs/master/collections.md:951
msgid "`flatten()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:843
#: ./docs/9.x/collections.md:893
#: ./docs/10.x/collections.md:953
#: ./docs/11.x/collections.md:1010
#: ./docs/master/collections.md:953
msgid "The `flatten` method flattens a multi-dimensional collection into a single dimension:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:845
#: ./docs/9.x/collections.md:895
#: ./docs/10.x/collections.md:955
#: ./docs/11.x/collections.md:1012
#: ./docs/master/collections.md:955
msgid ""
"$collection = collect([\n"
"    'name' => 'taylor',\n"
"    'languages' => [\n"
"        'php', 'javascript'\n"
"    ]\n"
"]);\n"
"\n"
"$flattened = $collection->flatten();\n"
"\n"
"$flattened->all();\n"
"\n"
"// ['taylor', 'php', 'javascript'];"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:849
#: ./docs/11.x/collections.md:906
#: ./docs/master/collections.md:849
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$filtered = $collection->filter(function (int $value, int $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"$filtered->all();\n"
"\n"
"// [3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:858
#: ./docs/9.x/collections.md:908
#: ./docs/10.x/collections.md:968
#: ./docs/11.x/collections.md:1025
#: ./docs/master/collections.md:968
msgid "If necessary, you may pass the `flatten` method a \"depth\" argument:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:860
#: ./docs/9.x/collections.md:910
#: ./docs/10.x/collections.md:970
#: ./docs/11.x/collections.md:1027
#: ./docs/master/collections.md:970
msgid ""
"$collection = collect([\n"
"    'Apple' => [\n"
"        [\n"
"            'name' => 'iPhone 6S',\n"
"            'brand' => 'Apple'\n"
"        ],\n"
"    ],\n"
"    'Samsung' => [\n"
"        [\n"
"            'name' => 'Galaxy S7',\n"
"            'brand' => 'Samsung'\n"
"        ],\n"
"    ],\n"
"]);\n"
"\n"
"$products = $collection->flatten(1);\n"
"\n"
"$products->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6S', 'brand' => 'Apple'],\n"
"        ['name' => 'Galaxy S7', 'brand' => 'Samsung'],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:874
#: ./docs/11.x/collections.md:931
#: ./docs/master/collections.md:874
msgid ""
"collect([1, 2, 3, 4])->first(function (int $value, int $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// 3"
msgstr ""

# P
#: ./docs/8.x/collections.md:886
#: ./docs/9.x/collections.md:936
#: ./docs/10.x/collections.md:996
#: ./docs/11.x/collections.md:1053
#: ./docs/master/collections.md:996
msgid "In this example, calling `flatten` without providing the depth would have also flattened the nested arrays, resulting in `['iPhone 6S', 'Apple', 'Galaxy S7', 'Samsung']`. Providing a depth allows you to specify the number of levels nested arrays will be flattened."
msgstr ""

# P
#: ./docs/8.x/collections.md:888
#: ./docs/9.x/collections.md:938
#: ./docs/10.x/collections.md:998
#: ./docs/11.x/collections.md:1055
#: ./docs/master/collections.md:998
#~ msgid "<a name=\"method-flip\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:889
#: ./docs/9.x/collections.md:939
#: ./docs/10.x/collections.md:999
#: ./docs/11.x/collections.md:1056
#: ./docs/master/collections.md:999
msgid "`flip()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:891
#: ./docs/11.x/collections.md:948
#: ./docs/master/collections.md:891
msgid ""
"collect([1, 2, 3, 4])->firstOrFail(function (int $value, int $key) {\n"
"    return $value > 5;\n"
"});\n"
"\n"
"// Throws ItemNotFoundException..."
msgstr ""

# P
#: ./docs/8.x/collections.md:891
#: ./docs/9.x/collections.md:941
#: ./docs/10.x/collections.md:1001
#: ./docs/11.x/collections.md:1058
#: ./docs/master/collections.md:1001
msgid "The `flip` method swaps the collection's keys with their corresponding values:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:893
#: ./docs/9.x/collections.md:943
#: ./docs/10.x/collections.md:1003
#: ./docs/11.x/collections.md:1060
#: ./docs/master/collections.md:1003
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$flipped = $collection->flip();\n"
"\n"
"$flipped->all();\n"
"\n"
"// ['taylor' => 'name', 'laravel' => 'framework']"
msgstr ""

# P
#: ./docs/8.x/collections.md:901
#: ./docs/9.x/collections.md:951
#: ./docs/10.x/collections.md:1011
#: ./docs/11.x/collections.md:1068
#: ./docs/master/collections.md:1011
#~ msgid "<a name=\"method-forget\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:902
#: ./docs/9.x/collections.md:952
#: ./docs/10.x/collections.md:1012
#: ./docs/11.x/collections.md:1069
#: ./docs/master/collections.md:1012
msgid "`forget()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:904
#: ./docs/9.x/collections.md:954
#: ./docs/10.x/collections.md:1014
#: ./docs/11.x/collections.md:1071
#: ./docs/master/collections.md:1014
msgid "The `forget` method removes an item from the collection by its key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:906
#: ./docs/9.x/collections.md:956
#: ./docs/10.x/collections.md:1016
#: ./docs/master/collections.md:1016
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$collection->forget('name');\n"
"\n"
"$collection->all();\n"
"\n"
"// ['framework' => 'laravel']"
msgstr ""

# P
#: ./docs/8.x/collections.md:914
#: ./docs/9.x/collections.md:965
#: ./docs/10.x/collections.md:1025
#: ./docs/master/collections.md:1025
msgid "Unlike most other collection methods, `forget` does not return a new modified collection; it modifies the collection it is called on."
msgstr ""

# P
#: ./docs/8.x/collections.md:916
#: ./docs/9.x/collections.md:967
#: ./docs/10.x/collections.md:1027
#: ./docs/11.x/collections.md:1088
#: ./docs/master/collections.md:1027
#~ msgid "<a name=\"method-forpage\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:917
#: ./docs/9.x/collections.md:968
#: ./docs/10.x/collections.md:1028
#: ./docs/11.x/collections.md:1089
#: ./docs/master/collections.md:1028
msgid "`forPage()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:919
#: ./docs/9.x/collections.md:970
#: ./docs/10.x/collections.md:1030
#: ./docs/11.x/collections.md:1091
#: ./docs/master/collections.md:1030
msgid "The `forPage` method returns a new collection containing the items that would be present on a given page number. The method accepts the page number as its first argument and the number of items to show per page as its second argument:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:921
#: ./docs/9.x/collections.md:972
#: ./docs/10.x/collections.md:1032
#: ./docs/11.x/collections.md:1093
#: ./docs/master/collections.md:1032
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"\n"
"$chunk = $collection->forPage(2, 3);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [4, 5, 6]"
msgstr ""

# P
#: ./docs/8.x/collections.md:929
#: ./docs/9.x/collections.md:980
#: ./docs/10.x/collections.md:1040
#: ./docs/11.x/collections.md:1101
#: ./docs/master/collections.md:1040
#~ msgid "<a name=\"method-get\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:930
#: ./docs/9.x/collections.md:981
#: ./docs/10.x/collections.md:1041
#: ./docs/11.x/collections.md:1102
#: ./docs/master/collections.md:1041
msgid "`get()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:932
#: ./docs/9.x/collections.md:983
#: ./docs/10.x/collections.md:1043
#: ./docs/11.x/collections.md:1104
#: ./docs/master/collections.md:1043
msgid "The `get` method returns the item at a given key. If the key does not exist, `null` is returned:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:934
#: ./docs/9.x/collections.md:985
#: ./docs/10.x/collections.md:1045
#: ./docs/11.x/collections.md:1106
#: ./docs/master/collections.md:1045
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$value = $collection->get('name');\n"
"\n"
"// taylor"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:936
#: ./docs/11.x/collections.md:993
#: ./docs/master/collections.md:936
msgid ""
"$collection = collect([\n"
"    ['name' => 'Sally'],\n"
"    ['school' => 'Arkansas'],\n"
"    ['age' => 28]\n"
"]);\n"
"\n"
"$flattened = $collection->flatMap(function (array $values) {\n"
"    return array_map('strtoupper', $values);\n"
"});\n"
"\n"
"$flattened->all();\n"
"\n"
"// ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];"
msgstr ""

# P
#: ./docs/8.x/collections.md:940
#: ./docs/9.x/collections.md:991
#: ./docs/10.x/collections.md:1051
#: ./docs/11.x/collections.md:1112
#: ./docs/master/collections.md:1051
msgid "You may optionally pass a default value as the second argument:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:942
#: ./docs/9.x/collections.md:993
#: ./docs/10.x/collections.md:1053
#: ./docs/11.x/collections.md:1114
#: ./docs/master/collections.md:1053
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$value = $collection->get('age', 34);\n"
"\n"
"// 34"
msgstr ""

# P
#: ./docs/8.x/collections.md:948
#: ./docs/9.x/collections.md:999
#: ./docs/10.x/collections.md:1059
#: ./docs/11.x/collections.md:1120
#: ./docs/master/collections.md:1059
msgid "You may even pass a callback as the method's default value. The result of the callback will be returned if the specified key does not exist:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:950
#: ./docs/9.x/collections.md:1001
#: ./docs/10.x/collections.md:1061
#: ./docs/11.x/collections.md:1122
#: ./docs/master/collections.md:1061
msgid ""
"$collection->get('email', function () {\n"
"    return 'taylor@example.com';\n"
"});\n"
"\n"
"// taylor@example.com"
msgstr ""

# P
#: ./docs/8.x/collections.md:956
#: ./docs/9.x/collections.md:1007
#: ./docs/10.x/collections.md:1067
#: ./docs/11.x/collections.md:1128
#: ./docs/master/collections.md:1067
#~ msgid "<a name=\"method-groupby\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:957
#: ./docs/9.x/collections.md:1008
#: ./docs/10.x/collections.md:1068
#: ./docs/11.x/collections.md:1129
#: ./docs/master/collections.md:1068
msgid "`groupBy()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:959
#: ./docs/9.x/collections.md:1010
#: ./docs/10.x/collections.md:1070
#: ./docs/11.x/collections.md:1131
#: ./docs/master/collections.md:1070
msgid "The `groupBy` method groups the collection's items by a given key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:961
#: ./docs/9.x/collections.md:1012
#: ./docs/10.x/collections.md:1072
#: ./docs/11.x/collections.md:1133
#: ./docs/master/collections.md:1072
msgid ""
"$collection = collect([\n"
"    ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"    ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"    ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"]);\n"
"\n"
"$grouped = $collection->groupBy('account_id');\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'account-x10' => [\n"
"            ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ],\n"
"        'account-x11' => [\n"
"            ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"        ],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:983
#: ./docs/9.x/collections.md:1034
#: ./docs/10.x/collections.md:1094
#: ./docs/11.x/collections.md:1155
#: ./docs/master/collections.md:1094
msgid "Instead of passing a string `key`, you may pass a callback. The callback should return the value you wish to key the group by:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:985
#: ./docs/9.x/collections.md:1036
msgid ""
"$grouped = $collection->groupBy(function ($item, $key) {\n"
"    return substr($item['account_id'], -3);\n"
"});\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'x10' => [\n"
"            ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ],\n"
"        'x11' => [\n"
"            ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"        ],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1003
#: ./docs/9.x/collections.md:1054
#: ./docs/10.x/collections.md:1114
#: ./docs/11.x/collections.md:1175
#: ./docs/master/collections.md:1114
msgid "Multiple grouping criteria may be passed as an array. Each array element will be applied to the corresponding level within a multi-dimensional array:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1005
msgid ""
"$data = new Collection([\n"
"    10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"    20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"    30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"    40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"]);\n"
"\n"
"$result = $data->groupBy(['skill', function ($item) {\n"
"    return $item['roles'];\n"
"}], $preserveKeys = true);\n"
"\n"
"/*\n"
"[\n"
"    1 => [\n"
"        'Role_1' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_3' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        ],\n"
"    ],\n"
"    2 => [\n"
"        'Role_1' => [\n"
"            30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"        ],\n"
"    ],\n"
"];\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1041
#: ./docs/9.x/collections.md:1092
#: ./docs/10.x/collections.md:1152
#: ./docs/11.x/collections.md:1213
#: ./docs/master/collections.md:1152
#~ msgid "<a name=\"method-has\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1042
#: ./docs/9.x/collections.md:1093
#: ./docs/10.x/collections.md:1153
#: ./docs/11.x/collections.md:1214
#: ./docs/master/collections.md:1153
msgid "`has()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1044
#: ./docs/9.x/collections.md:1095
#: ./docs/10.x/collections.md:1155
#: ./docs/11.x/collections.md:1216
#: ./docs/master/collections.md:1155
msgid "The `has` method determines if a given key exists in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1046
#: ./docs/9.x/collections.md:1097
#: ./docs/10.x/collections.md:1157
#: ./docs/11.x/collections.md:1218
#: ./docs/master/collections.md:1157
msgid ""
"$collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n"
"\n"
"$collection->has('product');\n"
"\n"
"// true\n"
"\n"
"$collection->has(['product', 'amount']);\n"
"\n"
"// true\n"
"\n"
"$collection->has(['amount', 'price']);\n"
"\n"
"// false"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1056
msgid ""
"$data = new Collection([\n"
"    10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"    20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"    30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"    40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"]);\n"
"\n"
"$result = $data->groupBy(['skill', function ($item) {\n"
"    return $item['roles'];\n"
"}], preserveKeys: true);\n"
"\n"
"/*\n"
"[\n"
"    1 => [\n"
"        'Role_1' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_3' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        ],\n"
"    ],\n"
"    2 => [\n"
"        'Role_1' => [\n"
"            30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"        ],\n"
"    ],\n"
"];\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1060
#: ./docs/9.x/collections.md:1126
#: ./docs/10.x/collections.md:1186
#: ./docs/11.x/collections.md:1247
#: ./docs/master/collections.md:1186
#~ msgid "<a name=\"method-implode\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1061
#: ./docs/9.x/collections.md:1127
#: ./docs/10.x/collections.md:1187
#: ./docs/11.x/collections.md:1248
#: ./docs/master/collections.md:1187
msgid "`implode()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1063
#: ./docs/9.x/collections.md:1129
#: ./docs/10.x/collections.md:1189
#: ./docs/11.x/collections.md:1250
#: ./docs/master/collections.md:1189
msgid "The `implode` method joins items in a collection. Its arguments depend on the type of items in the collection. If the collection contains arrays or objects, you should pass the key of the attributes you wish to join, and the \"glue\" string you wish to place between the values:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1065
#: ./docs/9.x/collections.md:1131
#: ./docs/10.x/collections.md:1191
#: ./docs/11.x/collections.md:1252
#: ./docs/master/collections.md:1191
msgid ""
"$collection = collect([\n"
"    ['account_id' => 1, 'product' => 'Desk'],\n"
"    ['account_id' => 2, 'product' => 'Chair'],\n"
"]);\n"
"\n"
"$collection->implode('product', ', ');\n"
"\n"
"// Desk, Chair"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:1073
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"// Forget a single key...\n"
"$collection->forget('name');\n"
"\n"
"// ['framework' => 'laravel']\n"
"\n"
"// Forget multiple keys...\n"
"$collection->forget(['name', 'framework']);\n"
"\n"
"// []"
msgstr ""

# P
#: ./docs/8.x/collections.md:1074
#: ./docs/9.x/collections.md:1140
#: ./docs/10.x/collections.md:1200
#: ./docs/11.x/collections.md:1261
#: ./docs/master/collections.md:1200
msgid "If the collection contains simple strings or numeric values, you should pass the \"glue\" as the only argument to the method:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1076
#: ./docs/9.x/collections.md:1142
#: ./docs/10.x/collections.md:1202
#: ./docs/11.x/collections.md:1263
#: ./docs/master/collections.md:1202
msgid ""
"collect([1, 2, 3, 4, 5])->implode('-');\n"
"\n"
"// '1-2-3-4-5'"
msgstr ""

# P
#: ./docs/8.x/collections.md:1080
#: ./docs/9.x/collections.md:1154
#: ./docs/10.x/collections.md:1214
#: ./docs/11.x/collections.md:1275
#: ./docs/master/collections.md:1214
#~ msgid "<a name=\"method-intersect\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1081
#: ./docs/9.x/collections.md:1155
#: ./docs/10.x/collections.md:1215
#: ./docs/11.x/collections.md:1276
#: ./docs/master/collections.md:1215
msgid "`intersect()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1083
#: ./docs/9.x/collections.md:1157
#: ./docs/10.x/collections.md:1217
#: ./docs/11.x/collections.md:1278
#: ./docs/master/collections.md:1217
msgid "The `intersect` method removes any values from the original collection that are not present in the given `array` or collection. The resulting collection will preserve the original collection's keys:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1085
#: ./docs/9.x/collections.md:1159
#: ./docs/10.x/collections.md:1219
#: ./docs/11.x/collections.md:1280
#: ./docs/master/collections.md:1219
msgid ""
"$collection = collect(['Desk', 'Sofa', 'Chair']);\n"
"\n"
"$intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n"
"\n"
"$intersect->all();\n"
"\n"
"// [0 => 'Desk', 2 => 'Chair']"
msgstr ""

# P
#: ./docs/11.x/collections.md:1086
msgid "Unlike most other collection methods, `forget` does not return a new modified collection; it modifies and returns the collection it is called on."
msgstr ""

# P
#: ./docs/8.x/collections.md:1093
#: ./docs/9.x/collections.md:1168
#: ./docs/10.x/collections.md:1228
#: ./docs/11.x/collections.md:1289
#: ./docs/master/collections.md:1228
msgid "This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-intersect)."
msgstr ""

# P
#: ./docs/8.x/collections.md:1095
#: ./docs/9.x/collections.md:1170
#: ./docs/10.x/collections.md:1251
#: ./docs/11.x/collections.md:1312
#: ./docs/master/collections.md:1251
#~ msgid "<a name=\"method-intersectbykeys\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/collections.md:1096
#: ./docs/11.x/collections.md:1157
#: ./docs/master/collections.md:1096
msgid ""
"$grouped = $collection->groupBy(function (array $item, int $key) {\n"
"    return substr($item['account_id'], -3);\n"
"});\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'x10' => [\n"
"            ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ],\n"
"        'x11' => [\n"
"            ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"        ],\n"
"    ]\n"
"*/"
msgstr ""

# H4
#: ./docs/8.x/collections.md:1096
#: ./docs/9.x/collections.md:1171
#: ./docs/10.x/collections.md:1252
#: ./docs/11.x/collections.md:1313
#: ./docs/master/collections.md:1252
msgid "`intersectByKeys()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1098
#: ./docs/9.x/collections.md:1173
#: ./docs/10.x/collections.md:1254
#: ./docs/11.x/collections.md:1315
#: ./docs/master/collections.md:1254
msgid "The `intersectByKeys` method removes any keys and their corresponding values from the original collection that are not present in the given `array` or collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1100
#: ./docs/9.x/collections.md:1175
#: ./docs/10.x/collections.md:1256
#: ./docs/11.x/collections.md:1317
#: ./docs/master/collections.md:1256
msgid ""
"$collection = collect([\n"
"    'serial' => 'UX301', 'type' => 'screen', 'year' => 2009,\n"
"]);\n"
"\n"
"$intersect = $collection->intersectByKeys([\n"
"    'reference' => 'UX404', 'type' => 'tab', 'year' => 2011,\n"
"]);\n"
"\n"
"$intersect->all();\n"
"\n"
"// ['type' => 'screen', 'year' => 2009]"
msgstr ""

# P
#: ./docs/9.x/collections.md:1111
#: ./docs/10.x/collections.md:1171
#: ./docs/11.x/collections.md:1232
#: ./docs/master/collections.md:1171
#~ msgid "<a name=\"method-hasany\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/collections.md:1112
#: ./docs/9.x/collections.md:1187
#: ./docs/10.x/collections.md:1268
#: ./docs/11.x/collections.md:1329
#: ./docs/master/collections.md:1268
#~ msgid "<a name=\"method-isempty\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/collections.md:1112
#: ./docs/10.x/collections.md:1172
#: ./docs/11.x/collections.md:1233
#: ./docs/master/collections.md:1172
msgid "`hasAny()` {.collection-method}"
msgstr ""

# H4
#: ./docs/8.x/collections.md:1113
#: ./docs/9.x/collections.md:1188
#: ./docs/10.x/collections.md:1269
#: ./docs/11.x/collections.md:1330
#: ./docs/master/collections.md:1269
msgid "`isEmpty()` {.collection-method}"
msgstr ""

# P
#: ./docs/9.x/collections.md:1114
#: ./docs/10.x/collections.md:1174
#: ./docs/11.x/collections.md:1235
#: ./docs/master/collections.md:1174
msgid "The `hasAny` method determines whether any of the given keys exist in the collection:"
msgstr ""

# P
#: ./docs/8.x/collections.md:1115
#: ./docs/9.x/collections.md:1190
#: ./docs/10.x/collections.md:1271
#: ./docs/11.x/collections.md:1332
#: ./docs/master/collections.md:1271
msgid "The `isEmpty` method returns `true` if the collection is empty; otherwise, `false` is returned:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1116
#: ./docs/11.x/collections.md:1177
#: ./docs/master/collections.md:1116
msgid ""
"$data = new Collection([\n"
"    10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"    20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"    30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"    40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"]);\n"
"\n"
"$result = $data->groupBy(['skill', function (array $item) {\n"
"    return $item['roles'];\n"
"}], preserveKeys: true);\n"
"\n"
"/*\n"
"[\n"
"    1 => [\n"
"        'Role_1' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_3' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        ],\n"
"    ],\n"
"    2 => [\n"
"        'Role_1' => [\n"
"            30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"        ],\n"
"    ],\n"
"];\n"
"*/"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1116
#: ./docs/10.x/collections.md:1176
#: ./docs/11.x/collections.md:1237
#: ./docs/master/collections.md:1176
msgid ""
"$collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n"
"\n"
"$collection->hasAny(['product', 'price']);\n"
"\n"
"// true\n"
"\n"
"$collection->hasAny(['name', 'price']);\n"
"\n"
"// false"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1117
#: ./docs/9.x/collections.md:1192
#: ./docs/10.x/collections.md:1273
#: ./docs/11.x/collections.md:1334
#: ./docs/master/collections.md:1273
msgid ""
"collect([])->isEmpty();\n"
"\n"
"// true"
msgstr ""

# P
#: ./docs/8.x/collections.md:1121
#: ./docs/9.x/collections.md:1196
#: ./docs/10.x/collections.md:1277
#: ./docs/11.x/collections.md:1338
#: ./docs/master/collections.md:1277
#~ msgid "<a name=\"method-isnotempty\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1122
#: ./docs/9.x/collections.md:1197
#: ./docs/10.x/collections.md:1278
#: ./docs/11.x/collections.md:1339
#: ./docs/master/collections.md:1278
msgid "`isNotEmpty()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1124
#: ./docs/9.x/collections.md:1199
#: ./docs/10.x/collections.md:1280
#: ./docs/11.x/collections.md:1341
#: ./docs/master/collections.md:1280
msgid "The `isNotEmpty` method returns `true` if the collection is not empty; otherwise, `false` is returned:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1126
#: ./docs/9.x/collections.md:1201
#: ./docs/10.x/collections.md:1282
#: ./docs/11.x/collections.md:1343
#: ./docs/master/collections.md:1282
msgid ""
"collect([])->isNotEmpty();\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:1130
#: ./docs/9.x/collections.md:1205
#: ./docs/10.x/collections.md:1286
#: ./docs/11.x/collections.md:1347
#: ./docs/master/collections.md:1286
#~ msgid "<a name=\"method-join\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1131
#: ./docs/9.x/collections.md:1206
#: ./docs/10.x/collections.md:1287
#: ./docs/11.x/collections.md:1348
#: ./docs/master/collections.md:1287
msgid "`join()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1133
#: ./docs/9.x/collections.md:1208
#: ./docs/10.x/collections.md:1289
#: ./docs/11.x/collections.md:1350
#: ./docs/master/collections.md:1289
msgid "The `join` method joins the collection's values with a string. Using this method's second argument, you may also specify how the final element should be appended to the string:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1135
#: ./docs/9.x/collections.md:1210
#: ./docs/10.x/collections.md:1291
#: ./docs/11.x/collections.md:1352
#: ./docs/master/collections.md:1291
msgid ""
"collect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\n"
"collect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\n"
"collect(['a', 'b'])->join(', ', ' and '); // 'a and b'\n"
"collect(['a'])->join(', ', ' and '); // 'a'\n"
"collect([])->join(', ', ' and '); // ''"
msgstr ""

# P
#: ./docs/8.x/collections.md:1141
#: ./docs/9.x/collections.md:1216
#: ./docs/10.x/collections.md:1297
#: ./docs/11.x/collections.md:1358
#: ./docs/master/collections.md:1297
#~ msgid "<a name=\"method-keyby\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1142
#: ./docs/9.x/collections.md:1217
#: ./docs/10.x/collections.md:1298
#: ./docs/11.x/collections.md:1359
#: ./docs/master/collections.md:1298
msgid "`keyBy()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1144
#: ./docs/9.x/collections.md:1219
#: ./docs/10.x/collections.md:1300
#: ./docs/11.x/collections.md:1361
#: ./docs/master/collections.md:1300
msgid "The `keyBy` method keys the collection by the given key. If multiple items have the same key, only the last one will appear in the new collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1146
#: ./docs/9.x/collections.md:1221
#: ./docs/10.x/collections.md:1302
#: ./docs/11.x/collections.md:1363
#: ./docs/master/collections.md:1302
msgid ""
"$collection = collect([\n"
"    ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"]);\n"
"\n"
"$keyed = $collection->keyBy('product_id');\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/9.x/collections.md:1146
#: ./docs/10.x/collections.md:1206
#: ./docs/11.x/collections.md:1267
#: ./docs/master/collections.md:1206
msgid "You may pass a closure to the `implode` method if you would like to format the values being imploded:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1148
msgid ""
"$collection->implode(function ($item, $key) {\n"
"    return strtoupper($item['product']);\n"
"}, ', ');\n"
"\n"
"// DESK, CHAIR"
msgstr ""

# P
#: ./docs/8.x/collections.md:1162
#: ./docs/9.x/collections.md:1237
#: ./docs/10.x/collections.md:1318
#: ./docs/11.x/collections.md:1379
#: ./docs/master/collections.md:1318
msgid "You may also pass a callback to the method. The callback should return the value to key the collection by:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1164
msgid ""
"$keyed = $collection->keyBy(function ($item) {\n"
"    return strtoupper($item['product_id']);\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1177
#: ./docs/9.x/collections.md:1252
#: ./docs/10.x/collections.md:1333
#: ./docs/11.x/collections.md:1394
#: ./docs/master/collections.md:1333
#~ msgid "<a name=\"method-keys\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1178
#: ./docs/9.x/collections.md:1253
#: ./docs/10.x/collections.md:1334
#: ./docs/11.x/collections.md:1395
#: ./docs/master/collections.md:1334
msgid "`keys()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1180
#: ./docs/9.x/collections.md:1255
#: ./docs/10.x/collections.md:1336
#: ./docs/11.x/collections.md:1397
#: ./docs/master/collections.md:1336
msgid "The `keys` method returns all of the collection's keys:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1182
#: ./docs/9.x/collections.md:1257
#: ./docs/10.x/collections.md:1338
#: ./docs/11.x/collections.md:1399
#: ./docs/master/collections.md:1338
msgid ""
"$collection = collect([\n"
"    'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"]);\n"
"\n"
"$keys = $collection->keys();\n"
"\n"
"$keys->all();\n"
"\n"
"// ['prod-100', 'prod-200']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1193
#: ./docs/9.x/collections.md:1268
#: ./docs/10.x/collections.md:1349
#: ./docs/11.x/collections.md:1410
#: ./docs/master/collections.md:1349
#~ msgid "<a name=\"method-last\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1194
#: ./docs/9.x/collections.md:1269
#: ./docs/10.x/collections.md:1350
#: ./docs/11.x/collections.md:1411
#: ./docs/master/collections.md:1350
msgid "`last()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1196
#: ./docs/9.x/collections.md:1271
#: ./docs/10.x/collections.md:1352
#: ./docs/11.x/collections.md:1413
#: ./docs/master/collections.md:1352
msgid "The `last` method returns the last element in the collection that passes a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1198
#: ./docs/9.x/collections.md:1273
msgid ""
"collect([1, 2, 3, 4])->last(function ($value, $key) {\n"
"    return $value < 3;\n"
"});\n"
"\n"
"// 2"
msgstr ""

# P
#: ./docs/8.x/collections.md:1204
#: ./docs/9.x/collections.md:1279
#: ./docs/10.x/collections.md:1360
#: ./docs/11.x/collections.md:1421
#: ./docs/master/collections.md:1360
msgid "You may also call the `last` method with no arguments to get the last element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1206
#: ./docs/9.x/collections.md:1281
#: ./docs/10.x/collections.md:1362
#: ./docs/11.x/collections.md:1423
#: ./docs/master/collections.md:1362
msgid ""
"collect([1, 2, 3, 4])->last();\n"
"\n"
"// 4"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1208
#: ./docs/11.x/collections.md:1269
#: ./docs/master/collections.md:1208
msgid ""
"$collection->implode(function (array $item, int $key) {\n"
"    return strtoupper($item['product']);\n"
"}, ', ');\n"
"\n"
"// DESK, CHAIR"
msgstr ""

# P
#: ./docs/8.x/collections.md:1210
#: ./docs/9.x/collections.md:1310
#: ./docs/10.x/collections.md:1391
#: ./docs/11.x/collections.md:1452
#: ./docs/master/collections.md:1391
#~ msgid "<a name=\"method-macro\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1211
#: ./docs/9.x/collections.md:1311
#: ./docs/10.x/collections.md:1392
#: ./docs/11.x/collections.md:1453
#: ./docs/master/collections.md:1392
msgid "`macro()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1213
#: ./docs/9.x/collections.md:1313
#: ./docs/10.x/collections.md:1394
#: ./docs/11.x/collections.md:1455
#: ./docs/master/collections.md:1394
msgid "The static `macro` method allows you to add methods to the `Collection` class at run time. Refer to the documentation on [extending collections](#extending-collections) for more information."
msgstr ""

# P
#: ./docs/8.x/collections.md:1215
#: ./docs/9.x/collections.md:1315
#: ./docs/10.x/collections.md:1396
#: ./docs/11.x/collections.md:1457
#: ./docs/master/collections.md:1396
#~ msgid "<a name=\"method-make\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1216
#: ./docs/9.x/collections.md:1316
#: ./docs/10.x/collections.md:1397
#: ./docs/11.x/collections.md:1458
#: ./docs/master/collections.md:1397
msgid "`make()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1218
#: ./docs/9.x/collections.md:1318
#: ./docs/10.x/collections.md:1399
#: ./docs/11.x/collections.md:1460
#: ./docs/master/collections.md:1399
msgid "The static `make` method creates a new collection instance. See the [Creating Collections](#creating-collections) section."
msgstr ""

# P
#: ./docs/8.x/collections.md:1220
#: ./docs/9.x/collections.md:1320
#: ./docs/10.x/collections.md:1401
#: ./docs/11.x/collections.md:1462
#: ./docs/master/collections.md:1401
#~ msgid "<a name=\"method-map\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1221
#: ./docs/9.x/collections.md:1321
#: ./docs/10.x/collections.md:1402
#: ./docs/11.x/collections.md:1463
#: ./docs/master/collections.md:1402
msgid "`map()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1223
#: ./docs/9.x/collections.md:1323
#: ./docs/10.x/collections.md:1404
#: ./docs/11.x/collections.md:1465
#: ./docs/master/collections.md:1404
msgid "The `map` method iterates through the collection and passes each value to the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1225
#: ./docs/9.x/collections.md:1325
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$multiplied = $collection->map(function ($item, $key) {\n"
"    return $item * 2;\n"
"});\n"
"\n"
"$multiplied->all();\n"
"\n"
"// [2, 4, 6, 8, 10]"
msgstr ""

# P
#: ./docs/10.x/collections.md:1230
#: ./docs/11.x/collections.md:1291
#: ./docs/master/collections.md:1230
#~ msgid "<a name=\"method-intersectAssoc\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/collections.md:1231
#: ./docs/11.x/collections.md:1292
#: ./docs/master/collections.md:1231
msgid "`intersectAssoc()` {.collection-method}"
msgstr ""

# P
#: ./docs/10.x/collections.md:1233
#: ./docs/11.x/collections.md:1294
#: ./docs/master/collections.md:1233
msgid "The `intersectAssoc` method compares the original collection against another collection or `array`, returning the key / value pairs that are present in all of the given collections:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1235
#: ./docs/11.x/collections.md:1296
#: ./docs/master/collections.md:1235
msgid ""
"$collection = collect([\n"
"    'color' => 'red',\n"
"    'size' => 'M',\n"
"    'material' => 'cotton'\n"
"]);\n"
"\n"
"$intersect = $collection->intersectAssoc([\n"
"    'color' => 'blue',\n"
"    'size' => 'M',\n"
"    'material' => 'polyester'\n"
"]);\n"
"\n"
"$intersect->all();\n"
"\n"
"// ['size' => 'M']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1235
#: ./docs/9.x/collections.md:1336
#: ./docs/10.x/collections.md:1417
#: ./docs/11.x/collections.md:1478
#: ./docs/master/collections.md:1417
msgid "Like most other collection methods, `map` returns a new collection instance; it does not modify the collection it is called on. If you want to transform the original collection, use the [`transform`](#method-transform) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:1237
#: ./docs/9.x/collections.md:1338
#: ./docs/10.x/collections.md:1419
#: ./docs/11.x/collections.md:1480
#: ./docs/master/collections.md:1419
#~ msgid "<a name=\"method-mapinto\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1238
#: ./docs/9.x/collections.md:1339
#: ./docs/10.x/collections.md:1420
#: ./docs/11.x/collections.md:1481
#: ./docs/master/collections.md:1420
msgid "`mapInto()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1239
msgid ""
"$keyed = $collection->keyBy(function ($item, $key) {\n"
"    return strtoupper($item['product_id']);\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1240
#: ./docs/9.x/collections.md:1341
#: ./docs/10.x/collections.md:1422
#: ./docs/11.x/collections.md:1483
#: ./docs/master/collections.md:1422
msgid "The `mapInto()` method iterates over the collection, creating a new instance of the given class by passing the value into the constructor:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1242
#: ./docs/9.x/collections.md:1343
msgid ""
"class Currency\n"
"{\n"
"    /**\n"
"     * Create a new currency instance.\n"
"     *\n"
"     * @param  string  $code\n"
"     * @return void\n"
"     */\n"
"    function __construct(string $code)\n"
"    {\n"
"        $this->code = $code;\n"
"    }\n"
"}\n"
"\n"
"$collection = collect(['USD', 'EUR', 'GBP']);\n"
"\n"
"$currencies = $collection->mapInto(Currency::class);\n"
"\n"
"$currencies->all();\n"
"\n"
"// [Currency('USD'), Currency('EUR'), Currency('GBP')]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1264
#: ./docs/9.x/collections.md:1365
#: ./docs/10.x/collections.md:1442
#: ./docs/11.x/collections.md:1503
#: ./docs/master/collections.md:1442
#~ msgid "<a name=\"method-mapspread\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1265
#: ./docs/9.x/collections.md:1366
#: ./docs/10.x/collections.md:1443
#: ./docs/11.x/collections.md:1504
#: ./docs/master/collections.md:1443
msgid "`mapSpread()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1267
#: ./docs/9.x/collections.md:1368
#: ./docs/10.x/collections.md:1445
#: ./docs/11.x/collections.md:1506
#: ./docs/master/collections.md:1445
msgid "The `mapSpread` method iterates over the collection's items, passing each nested item value into the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1269
#: ./docs/9.x/collections.md:1370
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"\n"
"$chunks = $collection->chunk(2);\n"
"\n"
"$sequence = $chunks->mapSpread(function ($even, $odd) {\n"
"    return $even + $odd;\n"
"});\n"
"\n"
"$sequence->all();\n"
"\n"
"// [1, 5, 9, 13, 17]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1281
#: ./docs/9.x/collections.md:1382
#: ./docs/10.x/collections.md:1459
#: ./docs/11.x/collections.md:1520
#: ./docs/master/collections.md:1459
#~ msgid "<a name=\"method-maptogroups\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1282
#: ./docs/9.x/collections.md:1383
#: ./docs/10.x/collections.md:1460
#: ./docs/11.x/collections.md:1521
#: ./docs/master/collections.md:1460
msgid "`mapToGroups()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1284
#: ./docs/9.x/collections.md:1385
#: ./docs/10.x/collections.md:1462
#: ./docs/11.x/collections.md:1523
#: ./docs/master/collections.md:1462
msgid "The `mapToGroups` method groups the collection's items by the given closure. The closure should return an associative array containing a single key / value pair, thus forming a new collection of grouped values:"
msgstr ""

# P
#: ./docs/9.x/collections.md:1285
#: ./docs/10.x/collections.md:1366
#: ./docs/11.x/collections.md:1427
#: ./docs/master/collections.md:1366
#~ msgid "<a name=\"method-lazy\"></a>"
#~ msgstr ""

# CODE
#: ./docs/8.x/collections.md:1286
#: ./docs/9.x/collections.md:1387
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'John Doe',\n"
"        'department' => 'Sales',\n"
"    ],\n"
"    [\n"
"        'name' => 'Jane Doe',\n"
"        'department' => 'Sales',\n"
"    ],\n"
"    [\n"
"        'name' => 'Johnny Doe',\n"
"        'department' => 'Marketing',\n"
"    ]\n"
"]);\n"
"\n"
"$grouped = $collection->mapToGroups(function ($item, $key) {\n"
"    return [$item['department'] => $item['name']];\n"
"});\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'Sales' => ['John Doe', 'Jane Doe'],\n"
"        'Marketing' => ['Johnny Doe'],\n"
"    ]\n"
"*/\n"
"\n"
"$grouped->get('Sales')->all();\n"
"\n"
"// ['John Doe', 'Jane Doe']"
msgstr ""

# H4
#: ./docs/9.x/collections.md:1286
#: ./docs/10.x/collections.md:1367
#: ./docs/11.x/collections.md:1428
#: ./docs/master/collections.md:1367
msgid "`lazy()` {.collection-method}"
msgstr ""

# P
#: ./docs/9.x/collections.md:1288
#: ./docs/10.x/collections.md:1369
#: ./docs/11.x/collections.md:1430
#: ./docs/master/collections.md:1369
msgid "The `lazy` method returns a new [`LazyCollection`](#lazy-collections) instance from the underlying array of items:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1290
msgid ""
"$lazyCollection = collect([1, 2, 3, 4])->lazy();\n"
"\n"
"get_class($lazyCollection);\n"
"\n"
"// Illuminate\\Support\\LazyCollection\n"
"\n"
"$lazyCollection->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/9.x/collections.md:1300
#: ./docs/10.x/collections.md:1381
#: ./docs/11.x/collections.md:1442
#: ./docs/master/collections.md:1381
msgid "This is especially useful when you need to perform transformations on a huge `Collection` that contains many items:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1302
#: ./docs/10.x/collections.md:1383
#: ./docs/11.x/collections.md:1444
#: ./docs/master/collections.md:1383
msgid ""
"$count = $hugeCollection\n"
"    ->lazy()\n"
"    ->where('country', 'FR')\n"
"    ->where('balance', '>', '100')\n"
"    ->count();"
msgstr ""

# P
#: ./docs/9.x/collections.md:1308
#: ./docs/10.x/collections.md:1389
#: ./docs/11.x/collections.md:1450
#: ./docs/master/collections.md:1389
msgid "By converting the collection to a `LazyCollection`, we avoid having to allocate a ton of additional memory. Though the original collection still keeps *its* values in memory, the subsequent filters will not. Therefore, virtually no additional memory will be allocated when filtering the collection's results."
msgstr ""

# P
#: ./docs/8.x/collections.md:1318
#: ./docs/9.x/collections.md:1419
#: ./docs/10.x/collections.md:1496
#: ./docs/11.x/collections.md:1557
#: ./docs/master/collections.md:1496
#~ msgid "<a name=\"method-mapwithkeys\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1319
#: ./docs/9.x/collections.md:1420
#: ./docs/10.x/collections.md:1497
#: ./docs/11.x/collections.md:1558
#: ./docs/master/collections.md:1497
msgid "`mapWithKeys()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1320
#: ./docs/11.x/collections.md:1381
#: ./docs/master/collections.md:1320
msgid ""
"$keyed = $collection->keyBy(function (array $item, int $key) {\n"
"    return strtoupper($item['product_id']);\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1321
#: ./docs/9.x/collections.md:1422
#: ./docs/10.x/collections.md:1499
#: ./docs/11.x/collections.md:1560
#: ./docs/master/collections.md:1499
msgid "The `mapWithKeys` method iterates through the collection and passes each value to the given callback. The callback should return an associative array containing a single key / value pair:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1323
#: ./docs/9.x/collections.md:1424
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'John',\n"
"        'department' => 'Sales',\n"
"        'email' => 'john@example.com',\n"
"    ],\n"
"    [\n"
"        'name' => 'Jane',\n"
"        'department' => 'Marketing',\n"
"        'email' => 'jane@example.com',\n"
"    ]\n"
"]);\n"
"\n"
"$keyed = $collection->mapWithKeys(function ($item, $key) {\n"
"    return [$item['email'] => $item['name']];\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'john@example.com' => 'John',\n"
"        'jane@example.com' => 'Jane',\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1349
#: ./docs/9.x/collections.md:1450
#: ./docs/10.x/collections.md:1527
#: ./docs/11.x/collections.md:1588
#: ./docs/master/collections.md:1527
#~ msgid "<a name=\"method-max\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1350
#: ./docs/9.x/collections.md:1451
#: ./docs/10.x/collections.md:1528
#: ./docs/11.x/collections.md:1589
#: ./docs/master/collections.md:1528
msgid "`max()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1352
#: ./docs/9.x/collections.md:1453
#: ./docs/10.x/collections.md:1530
#: ./docs/11.x/collections.md:1591
#: ./docs/master/collections.md:1530
msgid "The `max` method returns the maximum value of a given key:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1354
#: ./docs/11.x/collections.md:1415
#: ./docs/master/collections.md:1354
msgid ""
"collect([1, 2, 3, 4])->last(function (int $value, int $key) {\n"
"    return $value < 3;\n"
"});\n"
"\n"
"// 2"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1354
#: ./docs/9.x/collections.md:1455
#: ./docs/10.x/collections.md:1532
#: ./docs/11.x/collections.md:1593
#: ./docs/master/collections.md:1532
msgid ""
"$max = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 20]\n"
"])->max('foo');\n"
"\n"
"// 20\n"
"\n"
"$max = collect([1, 2, 3, 4, 5])->max();\n"
"\n"
"// 5"
msgstr ""

# P
#: ./docs/8.x/collections.md:1365
#: ./docs/9.x/collections.md:1466
#: ./docs/10.x/collections.md:1543
#: ./docs/11.x/collections.md:1604
#: ./docs/master/collections.md:1543
#~ msgid "<a name=\"method-median\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1366
#: ./docs/9.x/collections.md:1467
#: ./docs/10.x/collections.md:1544
#: ./docs/11.x/collections.md:1605
#: ./docs/master/collections.md:1544
msgid "`median()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1368
#: ./docs/9.x/collections.md:1469
#: ./docs/10.x/collections.md:1546
#: ./docs/11.x/collections.md:1607
#: ./docs/master/collections.md:1546
msgid "The `median` method returns the [median value](https://en.wikipedia.org/wiki/Median) of a given key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1370
#: ./docs/9.x/collections.md:1471
#: ./docs/10.x/collections.md:1548
#: ./docs/11.x/collections.md:1609
#: ./docs/master/collections.md:1548
msgid ""
"$median = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 10],\n"
"    ['foo' => 20],\n"
"    ['foo' => 40]\n"
"])->median('foo');\n"
"\n"
"// 15\n"
"\n"
"$median = collect([1, 1, 2, 4])->median();\n"
"\n"
"// 1.5"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1371
#: ./docs/11.x/collections.md:1432
#: ./docs/master/collections.md:1371
msgid ""
"$lazyCollection = collect([1, 2, 3, 4])->lazy();\n"
"\n"
"$lazyCollection::class;\n"
"\n"
"// Illuminate\\Support\\LazyCollection\n"
"\n"
"$lazyCollection->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1383
#: ./docs/9.x/collections.md:1484
#: ./docs/10.x/collections.md:1561
#: ./docs/11.x/collections.md:1622
#: ./docs/master/collections.md:1561
#~ msgid "<a name=\"method-merge\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1384
#: ./docs/9.x/collections.md:1485
#: ./docs/10.x/collections.md:1562
#: ./docs/11.x/collections.md:1623
#: ./docs/master/collections.md:1562
msgid "`merge()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1386
msgid "The `merge` method merges the given array or collection with the original collection. If a string key in the given items matches a string key in the original collection, the given items's value will overwrite the value in the original collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1388
#: ./docs/9.x/collections.md:1489
#: ./docs/10.x/collections.md:1566
#: ./docs/11.x/collections.md:1627
#: ./docs/master/collections.md:1566
msgid ""
"$collection = collect(['product_id' => 1, 'price' => 100]);\n"
"\n"
"$merged = $collection->merge(['price' => 200, 'discount' => false]);\n"
"\n"
"$merged->all();\n"
"\n"
"// ['product_id' => 1, 'price' => 200, 'discount' => false]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1396
msgid "If the given items's keys are numeric, the values will be appended to the end of the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1398
#: ./docs/9.x/collections.md:1499
#: ./docs/10.x/collections.md:1576
#: ./docs/11.x/collections.md:1637
#: ./docs/master/collections.md:1576
msgid ""
"$collection = collect(['Desk', 'Chair']);\n"
"\n"
"$merged = $collection->merge(['Bookcase', 'Door']);\n"
"\n"
"$merged->all();\n"
"\n"
"// ['Desk', 'Chair', 'Bookcase', 'Door']"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1406
#: ./docs/11.x/collections.md:1467
#: ./docs/master/collections.md:1406
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$multiplied = $collection->map(function (int $item, int $key) {\n"
"    return $item * 2;\n"
"});\n"
"\n"
"$multiplied->all();\n"
"\n"
"// [2, 4, 6, 8, 10]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1406
#: ./docs/9.x/collections.md:1507
#: ./docs/10.x/collections.md:1584
#: ./docs/11.x/collections.md:1645
#: ./docs/master/collections.md:1584
#~ msgid "<a name=\"method-mergerecursive\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1407
#: ./docs/9.x/collections.md:1508
#: ./docs/10.x/collections.md:1585
#: ./docs/11.x/collections.md:1646
#: ./docs/master/collections.md:1585
msgid "`mergeRecursive()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1409
#: ./docs/9.x/collections.md:1510
#: ./docs/10.x/collections.md:1587
#: ./docs/11.x/collections.md:1648
#: ./docs/master/collections.md:1587
msgid "The `mergeRecursive` method merges the given array or collection recursively with the original collection. If a string key in the given items matches a string key in the original collection, then the values for these keys are merged together into an array, and this is done recursively:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1411
#: ./docs/9.x/collections.md:1512
#: ./docs/10.x/collections.md:1589
#: ./docs/11.x/collections.md:1650
#: ./docs/master/collections.md:1589
msgid ""
"$collection = collect(['product_id' => 1, 'price' => 100]);\n"
"\n"
"$merged = $collection->mergeRecursive([\n"
"    'product_id' => 2,\n"
"    'price' => 200,\n"
"    'discount' => false\n"
"]);\n"
"\n"
"$merged->all();\n"
"\n"
"// ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1423
#: ./docs/9.x/collections.md:1524
#: ./docs/10.x/collections.md:1601
#: ./docs/11.x/collections.md:1662
#: ./docs/master/collections.md:1601
#~ msgid "<a name=\"method-min\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/collections.md:1424
#: ./docs/master/collections.md:1424
msgid ""
"class Currency\n"
"{\n"
"    /**\n"
"     * Create a new currency instance.\n"
"     */\n"
"    function __construct(\n"
"        public string $code\n"
"    ) {}\n"
"}\n"
"\n"
"$collection = collect(['USD', 'EUR', 'GBP']);\n"
"\n"
"$currencies = $collection->mapInto(Currency::class);\n"
"\n"
"$currencies->all();\n"
"\n"
"// [Currency('USD'), Currency('EUR'), Currency('GBP')]"
msgstr ""

# H4
#: ./docs/8.x/collections.md:1424
#: ./docs/9.x/collections.md:1525
#: ./docs/10.x/collections.md:1602
#: ./docs/11.x/collections.md:1663
#: ./docs/master/collections.md:1602
msgid "`min()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1426
#: ./docs/9.x/collections.md:1527
#: ./docs/10.x/collections.md:1604
#: ./docs/11.x/collections.md:1665
#: ./docs/master/collections.md:1604
msgid "The `min` method returns the minimum value of a given key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1428
#: ./docs/9.x/collections.md:1529
#: ./docs/10.x/collections.md:1606
#: ./docs/11.x/collections.md:1667
#: ./docs/master/collections.md:1606
msgid ""
"$min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n"
"\n"
"// 10\n"
"\n"
"$min = collect([1, 2, 3, 4, 5])->min();\n"
"\n"
"// 1"
msgstr ""

# P
#: ./docs/8.x/collections.md:1436
#: ./docs/9.x/collections.md:1537
#: ./docs/10.x/collections.md:1614
#: ./docs/11.x/collections.md:1675
#: ./docs/master/collections.md:1614
#~ msgid "<a name=\"method-mode\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1437
#: ./docs/9.x/collections.md:1538
#: ./docs/10.x/collections.md:1615
#: ./docs/11.x/collections.md:1676
#: ./docs/master/collections.md:1615
msgid "`mode()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1439
#: ./docs/9.x/collections.md:1540
#: ./docs/10.x/collections.md:1617
#: ./docs/11.x/collections.md:1678
#: ./docs/master/collections.md:1617
msgid "The `mode` method returns the [mode value](https://en.wikipedia.org/wiki/Mode_(statistics)) of a given key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1441
#: ./docs/9.x/collections.md:1542
#: ./docs/10.x/collections.md:1619
#: ./docs/11.x/collections.md:1680
#: ./docs/master/collections.md:1619
msgid ""
"$mode = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 10],\n"
"    ['foo' => 20],\n"
"    ['foo' => 40]\n"
"])->mode('foo');\n"
"\n"
"// [10]\n"
"\n"
"$mode = collect([1, 1, 2, 4])->mode();\n"
"\n"
"// [1]\n"
"\n"
"$mode = collect([1, 1, 2, 2])->mode();\n"
"\n"
"// [1, 2]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1447
#: ./docs/11.x/collections.md:1508
#: ./docs/master/collections.md:1447
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"\n"
"$chunks = $collection->chunk(2);\n"
"\n"
"$sequence = $chunks->mapSpread(function (int $even, int $odd) {\n"
"    return $even + $odd;\n"
"});\n"
"\n"
"$sequence->all();\n"
"\n"
"// [1, 5, 9, 13, 17]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1458
#: ./docs/9.x/collections.md:1559
#: ./docs/10.x/collections.md:1636
#: ./docs/11.x/collections.md:1720
#: ./docs/master/collections.md:1636
#~ msgid "<a name=\"method-nth\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1459
#: ./docs/9.x/collections.md:1560
#: ./docs/10.x/collections.md:1637
#: ./docs/11.x/collections.md:1721
#: ./docs/master/collections.md:1637
msgid "`nth()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1461
#: ./docs/9.x/collections.md:1562
#: ./docs/10.x/collections.md:1639
#: ./docs/11.x/collections.md:1723
#: ./docs/master/collections.md:1639
msgid "The `nth` method creates a new collection consisting of every n-th element:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1463
#: ./docs/9.x/collections.md:1564
#: ./docs/10.x/collections.md:1641
#: ./docs/11.x/collections.md:1725
#: ./docs/master/collections.md:1641
msgid ""
"$collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n"
"\n"
"$collection->nth(4);\n"
"\n"
"// ['a', 'e']"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1464
#: ./docs/11.x/collections.md:1525
#: ./docs/master/collections.md:1464
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'John Doe',\n"
"        'department' => 'Sales',\n"
"    ],\n"
"    [\n"
"        'name' => 'Jane Doe',\n"
"        'department' => 'Sales',\n"
"    ],\n"
"    [\n"
"        'name' => 'Johnny Doe',\n"
"        'department' => 'Marketing',\n"
"    ]\n"
"]);\n"
"\n"
"$grouped = $collection->mapToGroups(function (array $item, int $key) {\n"
"    return [$item['department'] => $item['name']];\n"
"});\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'Sales' => ['John Doe', 'Jane Doe'],\n"
"        'Marketing' => ['Johnny Doe'],\n"
"    ]\n"
"*/\n"
"\n"
"$grouped->get('Sales')->all();\n"
"\n"
"// ['John Doe', 'Jane Doe']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1469
#: ./docs/9.x/collections.md:1570
#: ./docs/10.x/collections.md:1647
#: ./docs/11.x/collections.md:1731
#: ./docs/master/collections.md:1647
msgid "You may optionally pass a starting offset as the second argument:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1471
#: ./docs/9.x/collections.md:1572
#: ./docs/10.x/collections.md:1649
#: ./docs/11.x/collections.md:1733
#: ./docs/master/collections.md:1649
msgid ""
"$collection->nth(4, 1);\n"
"\n"
"// ['b', 'f']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1475
#: ./docs/9.x/collections.md:1576
#: ./docs/10.x/collections.md:1653
#: ./docs/11.x/collections.md:1737
#: ./docs/master/collections.md:1653
#~ msgid "<a name=\"method-only\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1476
#: ./docs/9.x/collections.md:1577
#: ./docs/10.x/collections.md:1654
#: ./docs/11.x/collections.md:1738
#: ./docs/master/collections.md:1654
msgid "`only()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1478
#: ./docs/9.x/collections.md:1579
#: ./docs/10.x/collections.md:1656
#: ./docs/11.x/collections.md:1740
#: ./docs/master/collections.md:1656
msgid "The `only` method returns the items in the collection with the specified keys:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1480
#: ./docs/9.x/collections.md:1581
#: ./docs/10.x/collections.md:1658
#: ./docs/11.x/collections.md:1742
#: ./docs/master/collections.md:1658
msgid ""
"$collection = collect([\n"
"    'product_id' => 1,\n"
"    'name' => 'Desk',\n"
"    'price' => 100,\n"
"    'discount' => false\n"
"]);\n"
"\n"
"$filtered = $collection->only(['product_id', 'name']);\n"
"\n"
"$filtered->all();\n"
"\n"
"// ['product_id' => 1, 'name' => 'Desk']"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:1485
msgid ""
"class Currency\n"
"{\n"
"    /**\n"
"     * Create a new currency instance.\n"
"     */\n"
"    function __construct(\n"
"        public string $code,\n"
"    ) {}\n"
"}\n"
"\n"
"$collection = collect(['USD', 'EUR', 'GBP']);\n"
"\n"
"$currencies = $collection->mapInto(Currency::class);\n"
"\n"
"$currencies->all();\n"
"\n"
"// [Currency('USD'), Currency('EUR'), Currency('GBP')]"
msgstr ""

# P
#: ./docs/9.x/collections.md:1487
#: ./docs/10.x/collections.md:1564
#: ./docs/11.x/collections.md:1625
#: ./docs/master/collections.md:1564
msgid "The `merge` method merges the given array or collection with the original collection. If a string key in the given items matches a string key in the original collection, the given item's value will overwrite the value in the original collection:"
msgstr ""

# P
#: ./docs/8.x/collections.md:1493
#: ./docs/9.x/collections.md:1594
#: ./docs/10.x/collections.md:1671
#: ./docs/11.x/collections.md:1755
#: ./docs/master/collections.md:1671
msgid "For the inverse of `only`, see the [except](#method-except) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:1495
#: ./docs/9.x/collections.md:1597
#: ./docs/10.x/collections.md:1674
#: ./docs/11.x/collections.md:1758
#: ./docs/master/collections.md:1674
msgid "This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-only)."
msgstr ""

# P
#: ./docs/8.x/collections.md:1497
#: ./docs/9.x/collections.md:1599
#: ./docs/10.x/collections.md:1676
#: ./docs/11.x/collections.md:1760
#: ./docs/master/collections.md:1676
#~ msgid "<a name=\"method-pad\"></a>"
#~ msgstr ""

# P
#: ./docs/9.x/collections.md:1497
#: ./docs/10.x/collections.md:1574
#: ./docs/11.x/collections.md:1635
#: ./docs/master/collections.md:1574
msgid "If the given item's keys are numeric, the values will be appended to the end of the collection:"
msgstr ""

# H4
#: ./docs/8.x/collections.md:1498
#: ./docs/9.x/collections.md:1600
#: ./docs/10.x/collections.md:1677
#: ./docs/11.x/collections.md:1761
#: ./docs/master/collections.md:1677
msgid "`pad()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1500
#: ./docs/9.x/collections.md:1602
#: ./docs/10.x/collections.md:1679
#: ./docs/11.x/collections.md:1763
#: ./docs/master/collections.md:1679
msgid "The `pad` method will fill the array with the given value until the array reaches the specified size. This method behaves like the [array_pad](https://secure.php.net/manual/en/function.array-pad.php) PHP function."
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1501
#: ./docs/11.x/collections.md:1562
#: ./docs/master/collections.md:1501
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'John',\n"
"        'department' => 'Sales',\n"
"        'email' => 'john@example.com',\n"
"    ],\n"
"    [\n"
"        'name' => 'Jane',\n"
"        'department' => 'Marketing',\n"
"        'email' => 'jane@example.com',\n"
"    ]\n"
"]);\n"
"\n"
"$keyed = $collection->mapWithKeys(function (array $item, int $key) {\n"
"    return [$item['email'] => $item['name']];\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'john@example.com' => 'John',\n"
"        'jane@example.com' => 'Jane',\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1502
#: ./docs/9.x/collections.md:1604
#: ./docs/10.x/collections.md:1681
#: ./docs/11.x/collections.md:1765
#: ./docs/master/collections.md:1681
msgid "To pad to the left, you should specify a negative size. No padding will take place if the absolute value of the given size is less than or equal to the length of the array:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1504
#: ./docs/9.x/collections.md:1606
#: ./docs/10.x/collections.md:1683
#: ./docs/11.x/collections.md:1767
#: ./docs/master/collections.md:1683
msgid ""
"$collection = collect(['A', 'B', 'C']);\n"
"\n"
"$filtered = $collection->pad(5, 0);\n"
"\n"
"$filtered->all();\n"
"\n"
"// ['A', 'B', 'C', 0, 0]\n"
"\n"
"$filtered = $collection->pad(-5, 0);\n"
"\n"
"$filtered->all();\n"
"\n"
"// [0, 0, 'A', 'B', 'C']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1518
#: ./docs/9.x/collections.md:1620
#: ./docs/10.x/collections.md:1697
#: ./docs/11.x/collections.md:1781
#: ./docs/master/collections.md:1697
#~ msgid "<a name=\"method-partition\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1519
#: ./docs/9.x/collections.md:1621
#: ./docs/10.x/collections.md:1698
#: ./docs/11.x/collections.md:1782
#: ./docs/master/collections.md:1698
msgid "`partition()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1521
#: ./docs/9.x/collections.md:1623
#: ./docs/10.x/collections.md:1700
#: ./docs/11.x/collections.md:1784
#: ./docs/master/collections.md:1700
msgid "The `partition` method may be combined with PHP array destructuring to separate elements that pass a given truth test from those that do not:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1523
#: ./docs/9.x/collections.md:1625
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6]);\n"
"\n"
"[$underThree, $equalOrAboveThree] = $collection->partition(function ($i) {\n"
"    return $i < 3;\n"
"});\n"
"\n"
"$underThree->all();\n"
"\n"
"// [1, 2]\n"
"\n"
"$equalOrAboveThree->all();\n"
"\n"
"// [3, 4, 5, 6]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1537
#: ./docs/9.x/collections.md:1639
#: ./docs/10.x/collections.md:1737
#: ./docs/11.x/collections.md:1821
#: ./docs/master/collections.md:1737
#~ msgid "<a name=\"method-pipe\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1538
#: ./docs/9.x/collections.md:1640
#: ./docs/10.x/collections.md:1738
#: ./docs/11.x/collections.md:1822
#: ./docs/master/collections.md:1738
msgid "`pipe()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1540
#: ./docs/9.x/collections.md:1642
#: ./docs/10.x/collections.md:1740
#: ./docs/11.x/collections.md:1824
#: ./docs/master/collections.md:1740
msgid "The `pipe` method passes the collection to the given closure and returns the result of the executed closure:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1542
#: ./docs/9.x/collections.md:1644
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$piped = $collection->pipe(function ($collection) {\n"
"    return $collection->sum();\n"
"});\n"
"\n"
"// 6"
msgstr ""

# P
#: ./docs/8.x/collections.md:1550
#: ./docs/9.x/collections.md:1652
#: ./docs/10.x/collections.md:1750
#: ./docs/11.x/collections.md:1834
#: ./docs/master/collections.md:1750
#~ msgid "<a name=\"method-pipeinto\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1551
#: ./docs/9.x/collections.md:1653
#: ./docs/10.x/collections.md:1751
#: ./docs/11.x/collections.md:1835
#: ./docs/master/collections.md:1751
msgid "`pipeInto()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1553
#: ./docs/9.x/collections.md:1655
#: ./docs/10.x/collections.md:1753
#: ./docs/11.x/collections.md:1837
#: ./docs/master/collections.md:1753
msgid "The `pipeInto` method creates a new instance of the given class and passes the collection into the constructor:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1555
#: ./docs/9.x/collections.md:1657
msgid ""
"class ResourceCollection\n"
"{\n"
"    /**\n"
"     * The Collection instance.\n"
"     */\n"
"    public $collection;\n"
"\n"
"    /**\n"
"     * Create a new ResourceCollection instance.\n"
"     *\n"
"     * @param  Collection  $collection\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Collection $collection)\n"
"    {\n"
"        $this->collection = $collection;\n"
"    }\n"
"}\n"
"\n"
"$collection = collect([1, 2, 3]);\n"
"\n"
"$resource = $collection->pipeInto(ResourceCollection::class);\n"
"\n"
"$resource->collection->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1582
#: ./docs/9.x/collections.md:1684
#: ./docs/10.x/collections.md:1773
#: ./docs/11.x/collections.md:1857
#: ./docs/master/collections.md:1773
#~ msgid "<a name=\"method-pipethrough\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1583
#: ./docs/9.x/collections.md:1685
#: ./docs/10.x/collections.md:1774
#: ./docs/11.x/collections.md:1858
#: ./docs/master/collections.md:1774
msgid "`pipeThrough()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1585
#: ./docs/9.x/collections.md:1687
#: ./docs/10.x/collections.md:1776
#: ./docs/11.x/collections.md:1860
#: ./docs/master/collections.md:1776
msgid "The `pipeThrough` method passes the collection to the given array of closures and returns the result of the executed closures:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1587
#: ./docs/9.x/collections.md:1689
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$result = $collection->pipeThrough([\n"
"    function ($collection) {\n"
"        return $collection->merge([4, 5]);\n"
"    },\n"
"    function ($collection) {\n"
"        return $collection->sum();\n"
"    },\n"
"]);\n"
"\n"
"// 15"
msgstr ""

# P
#: ./docs/8.x/collections.md:1600
#: ./docs/9.x/collections.md:1702
#: ./docs/10.x/collections.md:1793
#: ./docs/11.x/collections.md:1877
#: ./docs/master/collections.md:1793
#~ msgid "<a name=\"method-pluck\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1601
#: ./docs/9.x/collections.md:1703
#: ./docs/10.x/collections.md:1794
#: ./docs/11.x/collections.md:1878
#: ./docs/master/collections.md:1794
msgid "`pluck()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1603
#: ./docs/9.x/collections.md:1705
#: ./docs/10.x/collections.md:1796
#: ./docs/11.x/collections.md:1880
#: ./docs/master/collections.md:1796
msgid "The `pluck` method retrieves all of the values for a given key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1605
#: ./docs/9.x/collections.md:1707
#: ./docs/10.x/collections.md:1798
#: ./docs/11.x/collections.md:1882
#: ./docs/master/collections.md:1798
msgid ""
"$collection = collect([\n"
"    ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('name');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['Desk', 'Chair']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1616
#: ./docs/9.x/collections.md:1718
#: ./docs/10.x/collections.md:1809
#: ./docs/11.x/collections.md:1893
#: ./docs/master/collections.md:1809
msgid "You may also specify how you wish the resulting collection to be keyed:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1618
#: ./docs/9.x/collections.md:1720
#: ./docs/10.x/collections.md:1811
#: ./docs/11.x/collections.md:1895
#: ./docs/master/collections.md:1811
msgid ""
"$plucked = $collection->pluck('name', 'product_id');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['prod-100' => 'Desk', 'prod-200' => 'Chair']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1624
#: ./docs/9.x/collections.md:1726
#: ./docs/10.x/collections.md:1817
#: ./docs/11.x/collections.md:1901
#: ./docs/master/collections.md:1817
msgid "The `pluck` method also supports retrieving nested values using \"dot\" notation:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1626
msgid ""
"$collection = collect([\n"
"    [\n"
"        'speakers' => [\n"
"            'first_day' => ['Rosa', 'Judith'],\n"
"            'second_day' => ['Angela', 'Kathleen'],\n"
"        ],\n"
"    ],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('speakers.first_day');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['Rosa', 'Judith']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1641
#: ./docs/9.x/collections.md:1749
#: ./docs/10.x/collections.md:1840
#: ./docs/11.x/collections.md:1924
#: ./docs/master/collections.md:1840
msgid "If duplicate keys exist, the last matching element will be inserted into the plucked collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1643
#: ./docs/9.x/collections.md:1751
#: ./docs/10.x/collections.md:1842
#: ./docs/11.x/collections.md:1926
#: ./docs/master/collections.md:1842
msgid ""
"$collection = collect([\n"
"    ['brand' => 'Tesla',  'color' => 'red'],\n"
"    ['brand' => 'Pagani', 'color' => 'white'],\n"
"    ['brand' => 'Tesla',  'color' => 'black'],\n"
"    ['brand' => 'Pagani', 'color' => 'orange'],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('color', 'brand');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['Tesla' => 'black', 'Pagani' => 'orange']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1656
#: ./docs/9.x/collections.md:1764
#: ./docs/10.x/collections.md:1855
#: ./docs/11.x/collections.md:1939
#: ./docs/master/collections.md:1855
#~ msgid "<a name=\"method-pop\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1657
#: ./docs/9.x/collections.md:1765
#: ./docs/10.x/collections.md:1856
#: ./docs/11.x/collections.md:1940
#: ./docs/master/collections.md:1856
msgid "`pop()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1659
#: ./docs/9.x/collections.md:1767
#: ./docs/10.x/collections.md:1858
#: ./docs/11.x/collections.md:1942
#: ./docs/master/collections.md:1858
msgid "The `pop` method removes and returns the last item from the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1661
#: ./docs/9.x/collections.md:1769
#: ./docs/10.x/collections.md:1860
#: ./docs/11.x/collections.md:1944
#: ./docs/master/collections.md:1860
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->pop();\n"
"\n"
"// 5\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1671
#: ./docs/9.x/collections.md:1779
#: ./docs/10.x/collections.md:1870
#: ./docs/11.x/collections.md:1954
#: ./docs/master/collections.md:1870
msgid "You may pass an integer to the `pop` method to remove and return multiple items from the end of a collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1673
#: ./docs/9.x/collections.md:1781
#: ./docs/10.x/collections.md:1872
#: ./docs/11.x/collections.md:1956
#: ./docs/master/collections.md:1872
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->pop(3);\n"
"\n"
"// collect([5, 4, 3])\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1683
#: ./docs/9.x/collections.md:1791
#: ./docs/10.x/collections.md:1882
#: ./docs/11.x/collections.md:1966
#: ./docs/master/collections.md:1882
#~ msgid "<a name=\"method-prepend\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1684
#: ./docs/9.x/collections.md:1792
#: ./docs/10.x/collections.md:1883
#: ./docs/11.x/collections.md:1967
#: ./docs/master/collections.md:1883
msgid "`prepend()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1686
#: ./docs/9.x/collections.md:1794
#: ./docs/10.x/collections.md:1885
#: ./docs/11.x/collections.md:1969
#: ./docs/master/collections.md:1885
msgid "The `prepend` method adds an item to the beginning of the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1688
#: ./docs/9.x/collections.md:1796
#: ./docs/10.x/collections.md:1887
#: ./docs/11.x/collections.md:1971
#: ./docs/master/collections.md:1887
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->prepend(0);\n"
"\n"
"$collection->all();\n"
"\n"
"// [0, 1, 2, 3, 4, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1696
#: ./docs/9.x/collections.md:1804
#: ./docs/10.x/collections.md:1895
#: ./docs/11.x/collections.md:1979
#: ./docs/master/collections.md:1895
msgid "You may also pass a second argument to specify the key of the prepended item:"
msgstr ""

# P
#: ./docs/11.x/collections.md:1697
#~ msgid "<a name=\"method-multiply\"></a>"
#~ msgstr ""

# H4
#: ./docs/11.x/collections.md:1698
msgid "`multiply()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1698
#: ./docs/9.x/collections.md:1806
#: ./docs/10.x/collections.md:1897
#: ./docs/11.x/collections.md:1981
#: ./docs/master/collections.md:1897
msgid ""
"$collection = collect(['one' => 1, 'two' => 2]);\n"
"\n"
"$collection->prepend(0, 'zero');\n"
"\n"
"$collection->all();\n"
"\n"
"// ['zero' => 0, 'one' => 1, 'two' => 2]"
msgstr ""

# P
#: ./docs/11.x/collections.md:1700
msgid "The `multiply` method creates the specified number of copies of all items in the collection:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1702
#: ./docs/11.x/collections.md:1786
#: ./docs/master/collections.md:1702
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6]);\n"
"\n"
"[$underThree, $equalOrAboveThree] = $collection->partition(function (int $i) {\n"
"    return $i < 3;\n"
"});\n"
"\n"
"$underThree->all();\n"
"\n"
"// [1, 2]\n"
"\n"
"$equalOrAboveThree->all();\n"
"\n"
"// [3, 4, 5, 6]"
msgstr ""

# CODE: php
#: ./docs/11.x/collections.md:1702
msgid ""
"$users = collect([\n"
"    ['name' => 'User #1', 'email' => 'user1@example.com'],\n"
"    ['name' => 'User #2', 'email' => 'user2@example.com'],\n"
"])->multiply(3);\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'User #1', 'email' => 'user1@example.com'],\n"
"        ['name' => 'User #2', 'email' => 'user2@example.com'],\n"
"        ['name' => 'User #1', 'email' => 'user1@example.com'],\n"
"        ['name' => 'User #2', 'email' => 'user2@example.com'],\n"
"        ['name' => 'User #1', 'email' => 'user1@example.com'],\n"
"        ['name' => 'User #2', 'email' => 'user2@example.com'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1706
#: ./docs/9.x/collections.md:1814
#: ./docs/10.x/collections.md:1905
#: ./docs/11.x/collections.md:1989
#: ./docs/master/collections.md:1905
#~ msgid "<a name=\"method-pull\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1707
#: ./docs/9.x/collections.md:1815
#: ./docs/10.x/collections.md:1906
#: ./docs/11.x/collections.md:1990
#: ./docs/master/collections.md:1906
msgid "`pull()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1709
#: ./docs/9.x/collections.md:1817
#: ./docs/10.x/collections.md:1908
#: ./docs/11.x/collections.md:1992
#: ./docs/master/collections.md:1908
msgid "The `pull` method removes and returns an item from the collection by its key:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1711
#: ./docs/9.x/collections.md:1819
#: ./docs/10.x/collections.md:1910
#: ./docs/11.x/collections.md:1994
#: ./docs/master/collections.md:1910
msgid ""
"$collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);\n"
"\n"
"$collection->pull('name');\n"
"\n"
"// 'Desk'\n"
"\n"
"$collection->all();\n"
"\n"
"// ['product_id' => 'prod-100']"
msgstr ""

# P
#: ./docs/10.x/collections.md:1716
#: ./docs/11.x/collections.md:1800
#: ./docs/master/collections.md:1716
#~ msgid "<a name=\"method-percentage\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/collections.md:1717
#: ./docs/11.x/collections.md:1801
#: ./docs/master/collections.md:1717
msgid "`percentage()` {.collection-method}"
msgstr ""

# P
#: ./docs/10.x/collections.md:1719
#: ./docs/11.x/collections.md:1803
#: ./docs/master/collections.md:1719
msgid "The `percentage` method may be used to quickly determine the percentage of items in the collection that pass a given truth test:"
msgstr ""

# CODE: php
#: ./docs/10.x/collections.md:1721
#: ./docs/11.x/collections.md:1805
#: ./docs/master/collections.md:1721
msgid ""
"$collection = collect([1, 1, 2, 2, 2, 3]);\n"
"\n"
"$percentage = $collection->percentage(fn ($value) => $value === 1);\n"
"\n"
"// 33.33"
msgstr ""

# P
#: ./docs/8.x/collections.md:1721
#: ./docs/9.x/collections.md:1829
#: ./docs/10.x/collections.md:1920
#: ./docs/11.x/collections.md:2004
#: ./docs/master/collections.md:1920
#~ msgid "<a name=\"method-push\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1722
#: ./docs/9.x/collections.md:1830
#: ./docs/10.x/collections.md:1921
#: ./docs/11.x/collections.md:2005
#: ./docs/master/collections.md:1921
msgid "`push()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1724
#: ./docs/9.x/collections.md:1832
#: ./docs/10.x/collections.md:1923
#: ./docs/11.x/collections.md:2007
#: ./docs/master/collections.md:1923
msgid "The `push` method appends an item to the end of the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1726
#: ./docs/9.x/collections.md:1834
#: ./docs/10.x/collections.md:1925
#: ./docs/11.x/collections.md:2009
#: ./docs/master/collections.md:1925
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$collection->push(5);\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4, 5]"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1728
#: ./docs/10.x/collections.md:1819
#: ./docs/11.x/collections.md:1903
#: ./docs/master/collections.md:1819
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'Laracon',\n"
"        'speakers' => [\n"
"            'first_day' => ['Rosa', 'Judith'],\n"
"        ],\n"
"    ],\n"
"    [\n"
"        'name' => 'VueConf',\n"
"        'speakers' => [\n"
"            'first_day' => ['Abigail', 'Joey'],\n"
"        ],\n"
"    ],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('speakers.first_day');\n"
"\n"
"$plucked->all();\n"
"\n"
"// [['Rosa', 'Judith'], ['Abigail', 'Joey']]"
msgstr ""

# P
#: ./docs/10.x/collections.md:1729
#: ./docs/11.x/collections.md:1813
#: ./docs/master/collections.md:1729
msgid "By default, the percentage will be rounded to two decimal places. However, you may customize this behavior by providing a second argument to the method:"
msgstr ""

# CODE: php
#: ./docs/10.x/collections.md:1731
#: ./docs/11.x/collections.md:1815
#: ./docs/master/collections.md:1731
msgid ""
"$percentage = $collection->percentage(fn ($value) => $value === 1, precision: 3);\n"
"\n"
"// 33.333"
msgstr ""

# P
#: ./docs/8.x/collections.md:1734
#: ./docs/9.x/collections.md:1842
#: ./docs/10.x/collections.md:1933
#: ./docs/11.x/collections.md:2017
#: ./docs/master/collections.md:1933
#~ msgid "<a name=\"method-put\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1735
#: ./docs/9.x/collections.md:1843
#: ./docs/10.x/collections.md:1934
#: ./docs/11.x/collections.md:2018
#: ./docs/master/collections.md:1934
msgid "`put()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1737
#: ./docs/9.x/collections.md:1845
#: ./docs/10.x/collections.md:1936
#: ./docs/11.x/collections.md:2020
#: ./docs/master/collections.md:1936
msgid "The `put` method sets the given key and value in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1739
#: ./docs/9.x/collections.md:1847
#: ./docs/10.x/collections.md:1938
#: ./docs/11.x/collections.md:2022
#: ./docs/master/collections.md:1938
msgid ""
"$collection = collect(['product_id' => 1, 'name' => 'Desk']);\n"
"\n"
"$collection->put('price', 100);\n"
"\n"
"$collection->all();\n"
"\n"
"// ['product_id' => 1, 'name' => 'Desk', 'price' => 100]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1742
#: ./docs/11.x/collections.md:1826
#: ./docs/master/collections.md:1742
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$piped = $collection->pipe(function (Collection $collection) {\n"
"    return $collection->sum();\n"
"});\n"
"\n"
"// 6"
msgstr ""

# P
#: ./docs/8.x/collections.md:1747
#: ./docs/9.x/collections.md:1855
#: ./docs/10.x/collections.md:1946
#: ./docs/11.x/collections.md:2030
#: ./docs/master/collections.md:1946
#~ msgid "<a name=\"method-random\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1748
#: ./docs/9.x/collections.md:1856
#: ./docs/10.x/collections.md:1947
#: ./docs/11.x/collections.md:2031
#: ./docs/master/collections.md:1947
msgid "`random()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1750
#: ./docs/9.x/collections.md:1858
#: ./docs/10.x/collections.md:1949
#: ./docs/11.x/collections.md:2033
#: ./docs/master/collections.md:1949
msgid "The `random` method returns a random item from the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1752
#: ./docs/9.x/collections.md:1860
#: ./docs/10.x/collections.md:1951
#: ./docs/11.x/collections.md:2035
#: ./docs/master/collections.md:1951
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->random();\n"
"\n"
"// 4 - (retrieved randomly)"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1755
#: ./docs/master/collections.md:1755
msgid ""
"class ResourceCollection\n"
"{\n"
"    /**\n"
"     * Create a new ResourceCollection instance.\n"
"     */\n"
"    public function __construct(\n"
"      public Collection $collection,\n"
"    ) {}\n"
"}\n"
"\n"
"$collection = collect([1, 2, 3]);\n"
"\n"
"$resource = $collection->pipeInto(ResourceCollection::class);\n"
"\n"
"$resource->collection->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1758
#: ./docs/9.x/collections.md:1866
#: ./docs/10.x/collections.md:1957
#: ./docs/11.x/collections.md:2041
#: ./docs/master/collections.md:1957
msgid "You may pass an integer to `random` to specify how many items you would like to randomly retrieve. A collection of items is always returned when explicitly passing the number of items you wish to receive:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1760
#: ./docs/9.x/collections.md:1868
#: ./docs/10.x/collections.md:1959
#: ./docs/11.x/collections.md:2043
#: ./docs/master/collections.md:1959
msgid ""
"$random = $collection->random(3);\n"
"\n"
"$random->all();\n"
"\n"
"// [2, 4, 5] - (retrieved randomly)"
msgstr ""

# P
#: ./docs/8.x/collections.md:1766
#: ./docs/9.x/collections.md:1874
#: ./docs/10.x/collections.md:1965
#: ./docs/11.x/collections.md:2049
#: ./docs/master/collections.md:1965
msgid "If the collection instance has fewer items than requested, the `random` method will throw an `InvalidArgumentException`."
msgstr ""

# P
#: ./docs/8.x/collections.md:1768
#: ./docs/9.x/collections.md:1884
#: ./docs/10.x/collections.md:1977
#: ./docs/11.x/collections.md:2061
#: ./docs/master/collections.md:1977
#~ msgid "<a name=\"method-range\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1769
#: ./docs/9.x/collections.md:1885
#: ./docs/10.x/collections.md:1978
#: ./docs/11.x/collections.md:2062
#: ./docs/master/collections.md:1978
msgid "`range()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1771
#: ./docs/9.x/collections.md:1887
#: ./docs/10.x/collections.md:1980
#: ./docs/11.x/collections.md:2064
#: ./docs/master/collections.md:1980
msgid "The `range` method returns a collection containing integers between the specified range:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1773
#: ./docs/9.x/collections.md:1889
#: ./docs/10.x/collections.md:1982
#: ./docs/11.x/collections.md:2066
#: ./docs/master/collections.md:1982
msgid ""
"$collection = collect()->range(3, 6);\n"
"\n"
"$collection->all();\n"
"\n"
"// [3, 4, 5, 6]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1778
#: ./docs/11.x/collections.md:1862
#: ./docs/master/collections.md:1778
msgid ""
"use Illuminate\\Support\\Collection;\n"
"\n"
"$collection = collect([1, 2, 3]);\n"
"\n"
"$result = $collection->pipeThrough([\n"
"    function (Collection $collection) {\n"
"        return $collection->merge([4, 5]);\n"
"    },\n"
"    function (Collection $collection) {\n"
"        return $collection->sum();\n"
"    },\n"
"]);\n"
"\n"
"// 15"
msgstr ""

# P
#: ./docs/8.x/collections.md:1779
#: ./docs/9.x/collections.md:1895
#: ./docs/10.x/collections.md:1988
#: ./docs/11.x/collections.md:2072
#: ./docs/master/collections.md:1988
#~ msgid "<a name=\"method-reduce\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1780
#: ./docs/9.x/collections.md:1896
#: ./docs/10.x/collections.md:1989
#: ./docs/11.x/collections.md:2073
#: ./docs/master/collections.md:1989
msgid "`reduce()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1782
#: ./docs/9.x/collections.md:1898
#: ./docs/10.x/collections.md:1991
#: ./docs/11.x/collections.md:2075
#: ./docs/master/collections.md:1991
msgid "The `reduce` method reduces the collection to a single value, passing the result of each iteration into the subsequent iteration:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1784
#: ./docs/9.x/collections.md:1900
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$total = $collection->reduce(function ($carry, $item) {\n"
"    return $carry + $item;\n"
"});\n"
"\n"
"// 6"
msgstr ""

# P
#: ./docs/8.x/collections.md:1792
#: ./docs/9.x/collections.md:1908
#: ./docs/10.x/collections.md:2001
#: ./docs/11.x/collections.md:2085
#: ./docs/master/collections.md:2001
msgid "The value for `$carry` on the first iteration is `null`; however, you may specify its initial value by passing a second argument to `reduce`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1794
#: ./docs/9.x/collections.md:1910
msgid ""
"$collection->reduce(function ($carry, $item) {\n"
"    return $carry + $item;\n"
"}, 4);\n"
"\n"
"// 10"
msgstr ""

# P
#: ./docs/8.x/collections.md:1800
#: ./docs/9.x/collections.md:1916
#: ./docs/10.x/collections.md:2009
#: ./docs/11.x/collections.md:2093
#: ./docs/master/collections.md:2009
msgid "The `reduce` method also passes array keys in associative collections to the given callback:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1802
#: ./docs/9.x/collections.md:1918
msgid ""
"$collection = collect([\n"
"    'usd' => 1400,\n"
"    'gbp' => 1200,\n"
"    'eur' => 1000,\n"
"]);\n"
"\n"
"$ratio = [\n"
"    'usd' => 1,\n"
"    'gbp' => 1.37,\n"
"    'eur' => 1.22,\n"
"];\n"
"\n"
"$collection->reduce(function ($carry, $value, $key) use ($ratio) {\n"
"    return $carry + ($value * $ratio[$key]);\n"
"});\n"
"\n"
"// 4264"
msgstr ""

# P
#: ./docs/8.x/collections.md:1820
#: ./docs/9.x/collections.md:1936
#: ./docs/10.x/collections.md:2029
#: ./docs/11.x/collections.md:2113
#: ./docs/master/collections.md:2029
#~ msgid "<a name=\"method-reduce-spread\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1821
#: ./docs/9.x/collections.md:1937
#: ./docs/10.x/collections.md:2030
#: ./docs/11.x/collections.md:2114
#: ./docs/master/collections.md:2030
msgid "`reduceSpread()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1823
#: ./docs/9.x/collections.md:1939
#: ./docs/10.x/collections.md:2032
#: ./docs/11.x/collections.md:2116
#: ./docs/master/collections.md:2032
msgid "The `reduceSpread` method reduces the collection to an array of values, passing the results of each iteration into the subsequent iteration. This method is similar to the `reduce` method; however, it can accept multiple initial values:"
msgstr ""

# CODE: php
#: ./docs/8.x/collections.md:1825
msgid ""
"[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"        ->get()\n"
"        ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"            if ($creditsRemaining >= $image->creditsRequired()) {\n"
"                $batch->push($image);\n"
"\n"
"                $creditsRemaining -= $image->creditsRequired();\n"
"            }\n"
"\n"
"            return [$creditsRemaining, $batch];\n"
"        }, $creditsAvailable, collect());"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:1839
msgid ""
"class ResourceCollection\n"
"{\n"
"    /**\n"
"     * Create a new ResourceCollection instance.\n"
"     */\n"
"    public function __construct(\n"
"        public Collection $collection,\n"
"    ) {}\n"
"}\n"
"\n"
"$collection = collect([1, 2, 3]);\n"
"\n"
"$resource = $collection->pipeInto(ResourceCollection::class);\n"
"\n"
"$resource->collection->all();\n"
"\n"
"// [1, 2, 3]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1839
#: ./docs/9.x/collections.md:1953
#: ./docs/10.x/collections.md:2046
#: ./docs/11.x/collections.md:2130
#: ./docs/master/collections.md:2046
#~ msgid "<a name=\"method-reject\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1840
#: ./docs/9.x/collections.md:1954
#: ./docs/10.x/collections.md:2047
#: ./docs/11.x/collections.md:2131
#: ./docs/master/collections.md:2047
msgid "`reject()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1842
#: ./docs/9.x/collections.md:1956
#: ./docs/10.x/collections.md:2049
#: ./docs/11.x/collections.md:2133
#: ./docs/master/collections.md:2049
msgid "The `reject` method filters the collection using the given closure. The closure should return `true` if the item should be removed from the resulting collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1844
#: ./docs/9.x/collections.md:1958
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$filtered = $collection->reject(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"$filtered->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1854
#: ./docs/9.x/collections.md:1968
#: ./docs/10.x/collections.md:2061
#: ./docs/11.x/collections.md:2145
#: ./docs/master/collections.md:2061
msgid "For the inverse of the `reject` method, see the [`filter`](#method-filter) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:1856
#: ./docs/9.x/collections.md:1970
#: ./docs/10.x/collections.md:2063
#: ./docs/11.x/collections.md:2147
#: ./docs/master/collections.md:2063
#~ msgid "<a name=\"method-replace\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1857
#: ./docs/9.x/collections.md:1971
#: ./docs/10.x/collections.md:2064
#: ./docs/11.x/collections.md:2148
#: ./docs/master/collections.md:2064
msgid "`replace()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1859
#: ./docs/9.x/collections.md:1973
#: ./docs/10.x/collections.md:2066
#: ./docs/11.x/collections.md:2150
#: ./docs/master/collections.md:2066
msgid "The `replace` method behaves similarly to `merge`; however, in addition to overwriting matching items that have string keys, the `replace` method will also overwrite items in the collection that have matching numeric keys:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1861
#: ./docs/9.x/collections.md:1975
#: ./docs/10.x/collections.md:2068
#: ./docs/11.x/collections.md:2152
#: ./docs/master/collections.md:2068
msgid ""
"$collection = collect(['Taylor', 'Abigail', 'James']);\n"
"\n"
"$replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n"
"\n"
"$replaced->all();\n"
"\n"
"// ['Taylor', 'Victoria', 'James', 'Finn']"
msgstr ""

# P
#: ./docs/8.x/collections.md:1869
#: ./docs/9.x/collections.md:1983
#: ./docs/10.x/collections.md:2076
#: ./docs/11.x/collections.md:2160
#: ./docs/master/collections.md:2076
#~ msgid "<a name=\"method-replacerecursive\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1870
#: ./docs/9.x/collections.md:1984
#: ./docs/10.x/collections.md:2077
#: ./docs/11.x/collections.md:2161
#: ./docs/master/collections.md:2077
msgid "`replaceRecursive()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1872
#: ./docs/9.x/collections.md:1986
#: ./docs/10.x/collections.md:2079
#: ./docs/11.x/collections.md:2163
#: ./docs/master/collections.md:2079
msgid "This method works like `replace`, but it will recur into arrays and apply the same replacement process to the inner values:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1874
#: ./docs/9.x/collections.md:1988
#: ./docs/10.x/collections.md:2081
#: ./docs/11.x/collections.md:2165
#: ./docs/master/collections.md:2081
msgid ""
"$collection = collect([\n"
"    'Taylor',\n"
"    'Abigail',\n"
"    [\n"
"        'James',\n"
"        'Victoria',\n"
"        'Finn'\n"
"    ]\n"
"]);\n"
"\n"
"$replaced = $collection->replaceRecursive([\n"
"    'Charlie',\n"
"    2 => [1 => 'King']\n"
"]);\n"
"\n"
"$replaced->all();\n"
"\n"
"// ['Charlie', 'Abigail', ['James', 'King', 'Finn']]"
msgstr ""

# P
#: ./docs/9.x/collections.md:1876
#: ./docs/10.x/collections.md:1967
#: ./docs/11.x/collections.md:2051
#: ./docs/master/collections.md:1967
msgid "The `random` method also accepts a closure, which will receive the current collection instance:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1878
msgid ""
"$random = $collection->random(fn ($items) => min(10, count($items)));\n"
"\n"
"$random->all();\n"
"\n"
"// [1, 2, 3, 4, 5] - (retrieved randomly)"
msgstr ""

# P
#: ./docs/8.x/collections.md:1893
#: ./docs/9.x/collections.md:2007
#: ./docs/10.x/collections.md:2100
#: ./docs/11.x/collections.md:2184
#: ./docs/master/collections.md:2100
#~ msgid "<a name=\"method-reverse\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1894
#: ./docs/9.x/collections.md:2008
#: ./docs/10.x/collections.md:2101
#: ./docs/11.x/collections.md:2185
#: ./docs/master/collections.md:2101
msgid "`reverse()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1896
#: ./docs/9.x/collections.md:2010
#: ./docs/10.x/collections.md:2103
#: ./docs/11.x/collections.md:2187
#: ./docs/master/collections.md:2103
msgid "The `reverse` method reverses the order of the collection's items, preserving the original keys:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1898
#: ./docs/9.x/collections.md:2012
#: ./docs/10.x/collections.md:2105
#: ./docs/11.x/collections.md:2189
#: ./docs/master/collections.md:2105
msgid ""
"$collection = collect(['a', 'b', 'c', 'd', 'e']);\n"
"\n"
"$reversed = $collection->reverse();\n"
"\n"
"$reversed->all();\n"
"\n"
"/*\n"
"    [\n"
"        4 => 'e',\n"
"        3 => 'd',\n"
"        2 => 'c',\n"
"        1 => 'b',\n"
"        0 => 'a',\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:1914
#: ./docs/9.x/collections.md:2028
#: ./docs/10.x/collections.md:2121
#: ./docs/11.x/collections.md:2205
#: ./docs/master/collections.md:2121
#~ msgid "<a name=\"method-search\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1915
#: ./docs/9.x/collections.md:2029
#: ./docs/10.x/collections.md:2122
#: ./docs/11.x/collections.md:2206
#: ./docs/master/collections.md:2122
msgid "`search()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1917
#: ./docs/9.x/collections.md:2031
#: ./docs/10.x/collections.md:2124
#: ./docs/11.x/collections.md:2208
#: ./docs/master/collections.md:2124
msgid "The `search` method searches the collection for the given value and returns its key if found. If the item is not found, `false` is returned:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1919
#: ./docs/9.x/collections.md:2033
#: ./docs/10.x/collections.md:2126
#: ./docs/11.x/collections.md:2210
#: ./docs/master/collections.md:2126
msgid ""
"$collection = collect([2, 4, 6, 8]);\n"
"\n"
"$collection->search(4);\n"
"\n"
"// 1"
msgstr ""

# P
#: ./docs/8.x/collections.md:1925
#: ./docs/9.x/collections.md:2039
#: ./docs/10.x/collections.md:2132
#: ./docs/11.x/collections.md:2216
#: ./docs/master/collections.md:2132
msgid "The search is done using a \"loose\" comparison, meaning a string with an integer value will be considered equal to an integer of the same value. To use \"strict\" comparison, pass `true` as the second argument to the method:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1927
#: ./docs/9.x/collections.md:2041
#: ./docs/10.x/collections.md:2134
#: ./docs/master/collections.md:2134
msgid ""
"collect([2, 4, 6, 8])->search('4', $strict = true);\n"
"\n"
"// false"
msgstr ""

# P
#: ./docs/8.x/collections.md:1931
#: ./docs/9.x/collections.md:2045
#: ./docs/10.x/collections.md:2138
#: ./docs/11.x/collections.md:282
#: ./docs/11.x/collections.md:2222
#: ./docs/master/collections.md:2138
msgid "Alternatively, you may provide your own closure to search for the first item that passes a given truth test:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1933
#: ./docs/9.x/collections.md:2047
msgid ""
"collect([2, 4, 6, 8])->search(function ($item, $key) {\n"
"    return $item > 5;\n"
"});\n"
"\n"
"// 2"
msgstr ""

# P
#: ./docs/8.x/collections.md:1939
#: ./docs/9.x/collections.md:2053
#: ./docs/10.x/collections.md:2167
#: ./docs/11.x/collections.md:2251
#: ./docs/master/collections.md:2167
#~ msgid "<a name=\"method-shift\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1940
#: ./docs/9.x/collections.md:2054
#: ./docs/10.x/collections.md:2168
#: ./docs/11.x/collections.md:2252
#: ./docs/master/collections.md:2168
msgid "`shift()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:1941
msgid ""
"[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"    ->get()\n"
"    ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"        if ($creditsRemaining >= $image->creditsRequired()) {\n"
"            $batch->push($image);\n"
"\n"
"            $creditsRemaining -= $image->creditsRequired();\n"
"        }\n"
"\n"
"        return [$creditsRemaining, $batch];\n"
"    }, $creditsAvailable, collect());"
msgstr ""

# P
#: ./docs/8.x/collections.md:1942
#: ./docs/9.x/collections.md:2056
#: ./docs/10.x/collections.md:2170
#: ./docs/11.x/collections.md:2254
#: ./docs/master/collections.md:2170
msgid "The `shift` method removes and returns the first item from the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1944
#: ./docs/9.x/collections.md:2058
#: ./docs/10.x/collections.md:2172
#: ./docs/11.x/collections.md:2256
#: ./docs/master/collections.md:2172
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->shift();\n"
"\n"
"// 1\n"
"\n"
"$collection->all();\n"
"\n"
"// [2, 3, 4, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1954
#: ./docs/9.x/collections.md:2068
#: ./docs/10.x/collections.md:2182
#: ./docs/11.x/collections.md:2266
#: ./docs/master/collections.md:2182
msgid "You may pass an integer to the `shift` method to remove and return multiple items from the beginning of a collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1956
#: ./docs/9.x/collections.md:2070
#: ./docs/10.x/collections.md:2184
#: ./docs/11.x/collections.md:2268
#: ./docs/master/collections.md:2184
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->shift(3);\n"
"\n"
"// collect([1, 2, 3])\n"
"\n"
"$collection->all();\n"
"\n"
"// [4, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1966
#: ./docs/9.x/collections.md:2080
#: ./docs/10.x/collections.md:2194
#: ./docs/11.x/collections.md:2278
#: ./docs/master/collections.md:2194
#~ msgid "<a name=\"method-shuffle\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1967
#: ./docs/9.x/collections.md:2081
#: ./docs/10.x/collections.md:2195
#: ./docs/11.x/collections.md:2279
#: ./docs/master/collections.md:2195
msgid "`shuffle()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1969
#: ./docs/11.x/collections.md:2053
#: ./docs/master/collections.md:1969
msgid ""
"use Illuminate\\Support\\Collection;\n"
"\n"
"$random = $collection->random(fn (Collection $items) => min(10, count($items)));\n"
"\n"
"$random->all();\n"
"\n"
"// [1, 2, 3, 4, 5] - (retrieved randomly)"
msgstr ""

# P
#: ./docs/8.x/collections.md:1969
#: ./docs/9.x/collections.md:2083
#: ./docs/10.x/collections.md:2197
#: ./docs/11.x/collections.md:2281
#: ./docs/master/collections.md:2197
msgid "The `shuffle` method randomly shuffles the items in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1971
#: ./docs/9.x/collections.md:2085
#: ./docs/10.x/collections.md:2199
#: ./docs/11.x/collections.md:2283
#: ./docs/master/collections.md:2199
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$shuffled = $collection->shuffle();\n"
"\n"
"$shuffled->all();\n"
"\n"
"// [3, 2, 5, 1, 4] - (generated randomly)"
msgstr ""

# P
#: ./docs/8.x/collections.md:1979
#: ./docs/9.x/collections.md:2175
#: ./docs/10.x/collections.md:2289
#: ./docs/11.x/collections.md:2373
#: ./docs/master/collections.md:2289
#~ msgid "<a name=\"method-sliding\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:1980
#: ./docs/9.x/collections.md:2176
#: ./docs/10.x/collections.md:2290
#: ./docs/11.x/collections.md:2374
#: ./docs/master/collections.md:2290
msgid "`sliding()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:1982
#: ./docs/9.x/collections.md:2178
#: ./docs/10.x/collections.md:2292
#: ./docs/11.x/collections.md:2376
#: ./docs/master/collections.md:2292
msgid "The `sliding` method returns a new collection of chunks representing a \"sliding window\" view of the items in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1984
#: ./docs/9.x/collections.md:2180
#: ./docs/10.x/collections.md:2294
#: ./docs/11.x/collections.md:2378
#: ./docs/master/collections.md:2294
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunks = $collection->sliding(2);\n"
"\n"
"$chunks->toArray();\n"
"\n"
"// [[1, 2], [2, 3], [3, 4], [4, 5]]"
msgstr ""

# P
#: ./docs/8.x/collections.md:1992
#: ./docs/9.x/collections.md:2188
#: ./docs/10.x/collections.md:2302
#: ./docs/11.x/collections.md:2386
#: ./docs/master/collections.md:2302
msgid "This is especially useful in conjunction with the [`eachSpread`](#method-eachspread) method:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:1993
#: ./docs/11.x/collections.md:2077
#: ./docs/master/collections.md:1993
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$total = $collection->reduce(function (?int $carry, int $item) {\n"
"    return $carry + $item;\n"
"});\n"
"\n"
"// 6"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:1994
#: ./docs/9.x/collections.md:2190
msgid ""
"$transactions->sliding(2)->eachSpread(function ($previous, $current) {\n"
"    $current->total = $previous->total + $current->amount;\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:1998
#: ./docs/9.x/collections.md:2194
#: ./docs/10.x/collections.md:2308
#: ./docs/11.x/collections.md:2392
#: ./docs/master/collections.md:2308
msgid "You may optionally pass a second \"step\" value, which determines the distance between the first item of every chunk:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2000
#: ./docs/9.x/collections.md:2196
#: ./docs/10.x/collections.md:2310
#: ./docs/11.x/collections.md:2394
#: ./docs/master/collections.md:2310
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunks = $collection->sliding(3, step: 2);\n"
"\n"
"$chunks->toArray();\n"
"\n"
"// [[1, 2, 3], [3, 4, 5]]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2003
#: ./docs/11.x/collections.md:2087
#: ./docs/master/collections.md:2003
msgid ""
"$collection->reduce(function (int $carry, int $item) {\n"
"    return $carry + $item;\n"
"}, 4);\n"
"\n"
"// 10"
msgstr ""

# P
#: ./docs/8.x/collections.md:2008
#: ./docs/9.x/collections.md:2093
#: ./docs/10.x/collections.md:2207
#: ./docs/11.x/collections.md:2291
#: ./docs/master/collections.md:2207
#~ msgid "<a name=\"method-skip\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2009
#: ./docs/9.x/collections.md:2094
#: ./docs/10.x/collections.md:2208
#: ./docs/11.x/collections.md:2292
#: ./docs/master/collections.md:2208
msgid "`skip()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2011
#: ./docs/11.x/collections.md:2095
#: ./docs/master/collections.md:2011
msgid ""
"$collection = collect([\n"
"    'usd' => 1400,\n"
"    'gbp' => 1200,\n"
"    'eur' => 1000,\n"
"]);\n"
"\n"
"$ratio = [\n"
"    'usd' => 1,\n"
"    'gbp' => 1.37,\n"
"    'eur' => 1.22,\n"
"];\n"
"\n"
"$collection->reduce(function (int $carry, int $value, int $key) use ($ratio) {\n"
"    return $carry + ($value * $ratio[$key]);\n"
"});\n"
"\n"
"// 4264"
msgstr ""

# P
#: ./docs/8.x/collections.md:2011
#: ./docs/9.x/collections.md:2096
#: ./docs/10.x/collections.md:2210
#: ./docs/11.x/collections.md:2294
#: ./docs/master/collections.md:2210
msgid "The `skip` method returns a new collection, with the given number of elements removed from the beginning of the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2013
#: ./docs/9.x/collections.md:2098
#: ./docs/10.x/collections.md:2212
#: ./docs/11.x/collections.md:2296
#: ./docs/master/collections.md:2212
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"\n"
"$collection = $collection->skip(4);\n"
"\n"
"$collection->all();\n"
"\n"
"// [5, 6, 7, 8, 9, 10]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2021
#: ./docs/9.x/collections.md:2106
#: ./docs/10.x/collections.md:2220
#: ./docs/11.x/collections.md:2304
#: ./docs/master/collections.md:2220
#~ msgid "<a name=\"method-skipuntil\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2022
#: ./docs/9.x/collections.md:2107
#: ./docs/10.x/collections.md:2221
#: ./docs/11.x/collections.md:2305
#: ./docs/master/collections.md:2221
msgid "`skipUntil()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2024
#: ./docs/9.x/collections.md:2109
#: ./docs/10.x/collections.md:2223
#: ./docs/11.x/collections.md:2307
#: ./docs/master/collections.md:2223
msgid "The `skipUntil` method skips over items from the collection until the given callback returns `true` and then returns the remaining items in the collection as a new collection instance:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2026
#: ./docs/9.x/collections.md:2111
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipUntil(function ($item) {\n"
"    return $item >= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [3, 4]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2034
#: ./docs/11.x/collections.md:2118
#: ./docs/master/collections.md:2034
msgid ""
"[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"    ->get()\n"
"    ->reduceSpread(function (int $creditsRemaining, Collection $batch, Image $image) {\n"
"        if ($creditsRemaining >= $image->creditsRequired()) {\n"
"            $batch->push($image);\n"
"\n"
"            $creditsRemaining -= $image->creditsRequired();\n"
"        }\n"
"\n"
"        return [$creditsRemaining, $batch];\n"
"    }, $creditsAvailable, collect());"
msgstr ""

# P
#: ./docs/8.x/collections.md:2036
#: ./docs/9.x/collections.md:2121
#: ./docs/10.x/collections.md:2235
#: ./docs/11.x/collections.md:2319
#: ./docs/master/collections.md:2235
msgid "You may also pass a simple value to the `skipUntil` method to skip all items until the given value is found:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2038
#: ./docs/9.x/collections.md:2123
#: ./docs/10.x/collections.md:2237
#: ./docs/11.x/collections.md:2321
#: ./docs/master/collections.md:2237
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipUntil(3);\n"
"\n"
"$subset->all();\n"
"\n"
"// [3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2046
#: ./docs/9.x/collections.md:2132
#: ./docs/10.x/collections.md:2246
#: ./docs/11.x/collections.md:2330
#: ./docs/master/collections.md:2246
msgid "If the given value is not found or the callback never returns `true`, the `skipUntil` method will return an empty collection."
msgstr ""

# P
#: ./docs/8.x/collections.md:2048
#: ./docs/9.x/collections.md:2134
#: ./docs/10.x/collections.md:2248
#: ./docs/11.x/collections.md:2332
#: ./docs/master/collections.md:2248
#~ msgid "<a name=\"method-skipwhile\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2049
#: ./docs/9.x/collections.md:2135
#: ./docs/10.x/collections.md:2249
#: ./docs/11.x/collections.md:2333
#: ./docs/master/collections.md:2249
msgid "`skipWhile()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2051
#: ./docs/11.x/collections.md:2135
#: ./docs/master/collections.md:2051
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$filtered = $collection->reject(function (int $value, int $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"$filtered->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2051
#: ./docs/9.x/collections.md:2137
#: ./docs/10.x/collections.md:2251
#: ./docs/11.x/collections.md:2335
#: ./docs/master/collections.md:2251
msgid "The `skipWhile` method skips over items from the collection while the given callback returns `true` and then returns the remaining items in the collection as a new collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2053
#: ./docs/9.x/collections.md:2139
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipWhile(function ($item) {\n"
"    return $item <= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2063
#: ./docs/9.x/collections.md:2150
#: ./docs/10.x/collections.md:2264
#: ./docs/11.x/collections.md:2348
#: ./docs/master/collections.md:2264
msgid "If the callback never returns `false`, the `skipWhile` method will return an empty collection."
msgstr ""

# P
#: ./docs/8.x/collections.md:2065
#: ./docs/9.x/collections.md:2152
#: ./docs/10.x/collections.md:2266
#: ./docs/11.x/collections.md:2350
#: ./docs/master/collections.md:2266
#~ msgid "<a name=\"method-slice\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2066
#: ./docs/9.x/collections.md:2153
#: ./docs/10.x/collections.md:2267
#: ./docs/11.x/collections.md:2351
#: ./docs/master/collections.md:2267
msgid "`slice()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2068
#: ./docs/9.x/collections.md:2155
#: ./docs/10.x/collections.md:2269
#: ./docs/11.x/collections.md:2353
#: ./docs/master/collections.md:2269
msgid "The `slice` method returns a slice of the collection starting at the given index:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2070
#: ./docs/9.x/collections.md:2157
#: ./docs/10.x/collections.md:2271
#: ./docs/11.x/collections.md:2355
#: ./docs/master/collections.md:2271
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"\n"
"$slice = $collection->slice(4);\n"
"\n"
"$slice->all();\n"
"\n"
"// [5, 6, 7, 8, 9, 10]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2078
#: ./docs/9.x/collections.md:2165
#: ./docs/10.x/collections.md:2279
#: ./docs/11.x/collections.md:2363
#: ./docs/master/collections.md:2279
msgid "If you would like to limit the size of the returned slice, pass the desired size as the second argument to the method:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2080
#: ./docs/9.x/collections.md:2167
#: ./docs/10.x/collections.md:2281
#: ./docs/11.x/collections.md:2365
#: ./docs/master/collections.md:2281
msgid ""
"$slice = $collection->slice(4, 2);\n"
"\n"
"$slice->all();\n"
"\n"
"// [5, 6]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2086
#: ./docs/9.x/collections.md:2173
#: ./docs/10.x/collections.md:2287
#: ./docs/11.x/collections.md:2371
#: ./docs/master/collections.md:2287
msgid "The returned slice will preserve keys by default. If you do not wish to preserve the original keys, you can use the [`values`](#method-values) method to reindex them."
msgstr ""

# P
#: ./docs/8.x/collections.md:2088
#: ./docs/9.x/collections.md:2204
#: ./docs/10.x/collections.md:2318
#: ./docs/11.x/collections.md:2402
#: ./docs/master/collections.md:2318
#~ msgid "<a name=\"method-sole\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2089
#: ./docs/9.x/collections.md:2205
#: ./docs/10.x/collections.md:2319
#: ./docs/11.x/collections.md:2403
#: ./docs/master/collections.md:2319
msgid "`sole()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2091
#: ./docs/9.x/collections.md:2207
#: ./docs/10.x/collections.md:2321
#: ./docs/11.x/collections.md:2405
#: ./docs/master/collections.md:2321
msgid "The `sole` method returns the first element in the collection that passes a given truth test, but only if the truth test matches exactly one element:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2093
#: ./docs/9.x/collections.md:2209
msgid ""
"collect([1, 2, 3, 4])->sole(function ($value, $key) {\n"
"    return $value === 2;\n"
"});\n"
"\n"
"// 2"
msgstr ""

# P
#: ./docs/8.x/collections.md:2099
#: ./docs/9.x/collections.md:2215
#: ./docs/10.x/collections.md:2329
#: ./docs/11.x/collections.md:2413
#: ./docs/master/collections.md:2329
msgid "You may also pass a key / value pair to the `sole` method, which will return the first element in the collection that matches the given pair, but only if it exactly one element matches:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2101
#: ./docs/9.x/collections.md:2217
#: ./docs/10.x/collections.md:2331
#: ./docs/11.x/collections.md:2415
#: ./docs/master/collections.md:2331
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"]);\n"
"\n"
"$collection->sole('product', 'Chair');\n"
"\n"
"// ['product' => 'Chair', 'price' => 100]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2110
#: ./docs/9.x/collections.md:2226
#: ./docs/10.x/collections.md:2340
#: ./docs/11.x/collections.md:2424
#: ./docs/master/collections.md:2340
msgid "Alternatively, you may also call the `sole` method with no argument to get the first element in the collection if there is only one element:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2112
#: ./docs/9.x/collections.md:2228
#: ./docs/10.x/collections.md:2342
#: ./docs/11.x/collections.md:2426
#: ./docs/master/collections.md:2342
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"]);\n"
"\n"
"$collection->sole();\n"
"\n"
"// ['product' => 'Desk', 'price' => 200]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2120
#: ./docs/9.x/collections.md:2236
#: ./docs/10.x/collections.md:2350
#: ./docs/11.x/collections.md:2434
#: ./docs/master/collections.md:2350
msgid "If there are no elements in the collection that should be returned by the `sole` method, an `\\Illuminate\\Collections\\ItemNotFoundException` exception will be thrown. If there is more than one element that should be returned, an `\\Illuminate\\Collections\\MultipleItemsFoundException` will be thrown."
msgstr ""

# P
#: ./docs/8.x/collections.md:2122
#: ./docs/9.x/collections.md:2238
#: ./docs/10.x/collections.md:2352
#: ./docs/11.x/collections.md:2436
#: ./docs/master/collections.md:2352
#~ msgid "<a name=\"method-some\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2123
#: ./docs/9.x/collections.md:2239
#: ./docs/10.x/collections.md:2353
#: ./docs/11.x/collections.md:2437
#: ./docs/master/collections.md:2353
msgid "`some()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2125
#: ./docs/9.x/collections.md:2241
#: ./docs/10.x/collections.md:2355
#: ./docs/11.x/collections.md:2439
#: ./docs/master/collections.md:2355
msgid "Alias for the [`contains`](#method-contains) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2127
#: ./docs/9.x/collections.md:2243
#: ./docs/10.x/collections.md:2357
#: ./docs/11.x/collections.md:2441
#: ./docs/master/collections.md:2357
#~ msgid "<a name=\"method-sort\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2128
#: ./docs/9.x/collections.md:2244
#: ./docs/10.x/collections.md:2358
#: ./docs/11.x/collections.md:2442
#: ./docs/master/collections.md:2358
msgid "`sort()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2130
#: ./docs/9.x/collections.md:2246
#: ./docs/10.x/collections.md:2360
#: ./docs/11.x/collections.md:2444
#: ./docs/master/collections.md:2360
msgid "The `sort` method sorts the collection. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2132
#: ./docs/9.x/collections.md:2248
#: ./docs/10.x/collections.md:2362
#: ./docs/11.x/collections.md:2446
#: ./docs/master/collections.md:2362
msgid ""
"$collection = collect([5, 3, 1, 2, 4]);\n"
"\n"
"$sorted = $collection->sort();\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"// [1, 2, 3, 4, 5]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2140
#: ./docs/11.x/collections.md:2224
#: ./docs/master/collections.md:2140
msgid ""
"collect([2, 4, 6, 8])->search(function (int $item, int $key) {\n"
"    return $item > 5;\n"
"});\n"
"\n"
"// 2"
msgstr ""

# P
#: ./docs/8.x/collections.md:2140
#: ./docs/9.x/collections.md:2256
#: ./docs/10.x/collections.md:2370
#: ./docs/11.x/collections.md:2454
#: ./docs/master/collections.md:2370
msgid "If your sorting needs are more advanced, you may pass a callback to `sort` with your own algorithm. Refer to the PHP documentation on [`uasort`](https://secure.php.net/manual/en/function.uasort.php#refsect1-function.uasort-parameters), which is what the collection's `sort` method calls utilizes internally."
msgstr ""

# P
#: ./docs/8.x/collections.md:2142
#: ./docs/9.x/collections.md:2259
#: ./docs/10.x/collections.md:2373
#: ./docs/11.x/collections.md:2457
#: ./docs/master/collections.md:2373
msgid "If you need to sort a collection of nested arrays or objects, see the [`sortBy`](#method-sortby) and [`sortByDesc`](#method-sortbydesc) methods."
msgstr ""

# P
#: ./docs/8.x/collections.md:2144
#: ./docs/9.x/collections.md:2261
#: ./docs/10.x/collections.md:2375
#: ./docs/11.x/collections.md:2459
#: ./docs/master/collections.md:2375
#~ msgid "<a name=\"method-sortby\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2145
#: ./docs/9.x/collections.md:2262
#: ./docs/10.x/collections.md:2376
#: ./docs/11.x/collections.md:2460
#: ./docs/master/collections.md:2376
msgid "`sortBy()` {.collection-method}"
msgstr ""

# P
#: ./docs/10.x/collections.md:2146
#: ./docs/11.x/collections.md:2230
#: ./docs/master/collections.md:2146
#~ msgid "<a name=\"method-select\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/collections.md:2147
#: ./docs/11.x/collections.md:2231
#: ./docs/master/collections.md:2147
msgid "`select()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2147
#: ./docs/9.x/collections.md:2264
#: ./docs/10.x/collections.md:2378
#: ./docs/11.x/collections.md:2462
#: ./docs/master/collections.md:2378
msgid "The `sortBy` method sorts the collection by the given key. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

# P
#: ./docs/10.x/collections.md:2149
#: ./docs/11.x/collections.md:2233
#: ./docs/master/collections.md:2149
msgid "The `select` method selects the given keys from the collection, similar to an SQL `SELECT` statement:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2149
#: ./docs/9.x/collections.md:2266
#: ./docs/10.x/collections.md:2380
#: ./docs/11.x/collections.md:2464
#: ./docs/master/collections.md:2380
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk', 'price' => 200],\n"
"    ['name' => 'Chair', 'price' => 100],\n"
"    ['name' => 'Bookcase', 'price' => 150],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy('price');\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair', 'price' => 100],\n"
"        ['name' => 'Bookcase', 'price' => 150],\n"
"        ['name' => 'Desk', 'price' => 200],\n"
"    ]\n"
"*/"
msgstr ""

# CODE: php
#: ./docs/10.x/collections.md:2151
#: ./docs/11.x/collections.md:2235
#: ./docs/master/collections.md:2151
msgid ""
"$users = collect([\n"
"    ['name' => 'Taylor Otwell', 'role' => 'Developer', 'status' => 'active'],\n"
"    ['name' => 'Victoria Faith', 'role' => 'Researcher', 'status' => 'active'],\n"
"]);\n"
"\n"
"$users->select(['name', 'role']);\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Taylor Otwell', 'role' => 'Developer'],\n"
"        ['name' => 'Victoria Faith', 'role' => 'Researcher'],\n"
"    ],\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2167
#: ./docs/9.x/collections.md:2284
#: ./docs/10.x/collections.md:2398
#: ./docs/11.x/collections.md:2482
#: ./docs/master/collections.md:2398
msgid "The `sortBy` method accepts [sort flags](https://www.php.net/manual/en/function.sort.php) as its second argument:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2169
#: ./docs/9.x/collections.md:2286
#: ./docs/10.x/collections.md:2400
#: ./docs/11.x/collections.md:2484
#: ./docs/master/collections.md:2400
msgid ""
"$collection = collect([\n"
"    ['title' => 'Item 1'],\n"
"    ['title' => 'Item 12'],\n"
"    ['title' => 'Item 3'],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy('title', SORT_NATURAL);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['title' => 'Item 1'],\n"
"        ['title' => 'Item 3'],\n"
"        ['title' => 'Item 12'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2187
#: ./docs/9.x/collections.md:2304
#: ./docs/10.x/collections.md:2418
#: ./docs/11.x/collections.md:2502
#: ./docs/master/collections.md:2418
msgid "Alternatively, you may pass your own closure to determine how to sort the collection's values:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2189
#: ./docs/9.x/collections.md:2306
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"    ['name' => 'Chair', 'colors' => ['Black']],\n"
"    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy(function ($product, $key) {\n"
"    return count($product['colors']);\n"
"});\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2209
#: ./docs/9.x/collections.md:2326
#: ./docs/10.x/collections.md:2440
#: ./docs/11.x/collections.md:2524
#: ./docs/master/collections.md:2440
msgid "If you would like to sort your collection by multiple attributes, you may pass an array of sort operations to the `sortBy` method. Each sort operation should be an array consisting of the attribute that you wish to sort by and the direction of the desired sort:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2211
#: ./docs/9.x/collections.md:2328
#: ./docs/10.x/collections.md:2442
#: ./docs/11.x/collections.md:2526
#: ./docs/master/collections.md:2442
msgid ""
"$collection = collect([\n"
"    ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ['name' => 'Abigail Otwell', 'age' => 30],\n"
"    ['name' => 'Taylor Otwell', 'age' => 36],\n"
"    ['name' => 'Abigail Otwell', 'age' => 32],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy([\n"
"    ['name', 'asc'],\n"
"    ['age', 'desc'],\n"
"]);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/11.x/collections.md:2218
msgid ""
"collect([2, 4, 6, 8])->search('4', strict: true);\n"
"\n"
"// false"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2225
#: ./docs/11.x/collections.md:2309
#: ./docs/master/collections.md:2225
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipUntil(function (int $item) {\n"
"    return $item >= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2234
#: ./docs/9.x/collections.md:2351
#: ./docs/10.x/collections.md:2465
#: ./docs/11.x/collections.md:2549
#: ./docs/master/collections.md:2465
msgid "When sorting a collection by multiple attributes, you may also provide closures that define each sort operation:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2236
#: ./docs/9.x/collections.md:2353
msgid ""
"$collection = collect([\n"
"    ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ['name' => 'Abigail Otwell', 'age' => 30],\n"
"    ['name' => 'Taylor Otwell', 'age' => 36],\n"
"    ['name' => 'Abigail Otwell', 'age' => 32],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy([\n"
"    fn ($a, $b) => $a['name'] <=> $b['name'],\n"
"    fn ($a, $b) => $b['age'] <=> $a['age'],\n"
"]);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2253
#: ./docs/11.x/collections.md:2337
#: ./docs/master/collections.md:2253
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipWhile(function (int $item) {\n"
"    return $item <= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2259
#: ./docs/9.x/collections.md:2376
#: ./docs/10.x/collections.md:2490
#: ./docs/11.x/collections.md:2574
#: ./docs/master/collections.md:2490
#~ msgid "<a name=\"method-sortbydesc\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2260
#: ./docs/9.x/collections.md:2377
#: ./docs/10.x/collections.md:2491
#: ./docs/11.x/collections.md:2575
#: ./docs/master/collections.md:2491
msgid "`sortByDesc()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2262
#: ./docs/9.x/collections.md:2379
#: ./docs/10.x/collections.md:2493
#: ./docs/11.x/collections.md:2577
#: ./docs/master/collections.md:2493
msgid "This method has the same signature as the [`sortBy`](#method-sortby) method, but will sort the collection in the opposite order."
msgstr ""

# P
#: ./docs/8.x/collections.md:2264
#: ./docs/9.x/collections.md:2381
#: ./docs/10.x/collections.md:2495
#: ./docs/11.x/collections.md:2579
#: ./docs/master/collections.md:2495
#~ msgid "<a name=\"method-sortdesc\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2265
#: ./docs/9.x/collections.md:2382
#: ./docs/10.x/collections.md:2496
#: ./docs/11.x/collections.md:2580
#: ./docs/master/collections.md:2496
msgid "`sortDesc()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2267
#: ./docs/9.x/collections.md:2384
#: ./docs/10.x/collections.md:2498
#: ./docs/11.x/collections.md:2582
#: ./docs/master/collections.md:2498
msgid "This method will sort the collection in the opposite order as the [`sort`](#method-sort) method:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2269
#: ./docs/9.x/collections.md:2386
#: ./docs/10.x/collections.md:2500
#: ./docs/11.x/collections.md:2584
#: ./docs/master/collections.md:2500
msgid ""
"$collection = collect([5, 3, 1, 2, 4]);\n"
"\n"
"$sorted = $collection->sortDesc();\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"// [5, 4, 3, 2, 1]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2277
#: ./docs/9.x/collections.md:2394
#: ./docs/10.x/collections.md:2508
#: ./docs/11.x/collections.md:2592
#: ./docs/master/collections.md:2508
msgid "Unlike `sort`, you may not pass a closure to `sortDesc`. Instead, you should use the [`sort`](#method-sort) method and invert your comparison."
msgstr ""

# P
#: ./docs/8.x/collections.md:2279
#: ./docs/9.x/collections.md:2396
#: ./docs/10.x/collections.md:2510
#: ./docs/11.x/collections.md:2594
#: ./docs/master/collections.md:2510
#~ msgid "<a name=\"method-sortkeys\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2280
#: ./docs/9.x/collections.md:2397
#: ./docs/10.x/collections.md:2511
#: ./docs/11.x/collections.md:2595
#: ./docs/master/collections.md:2511
msgid "`sortKeys()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2282
#: ./docs/9.x/collections.md:2399
#: ./docs/10.x/collections.md:2513
#: ./docs/11.x/collections.md:2597
#: ./docs/master/collections.md:2513
msgid "The `sortKeys` method sorts the collection by the keys of the underlying associative array:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2284
#: ./docs/9.x/collections.md:2401
#: ./docs/10.x/collections.md:2515
#: ./docs/11.x/collections.md:2599
#: ./docs/master/collections.md:2515
msgid ""
"$collection = collect([\n"
"    'id' => 22345,\n"
"    'first' => 'John',\n"
"    'last' => 'Doe',\n"
"]);\n"
"\n"
"$sorted = $collection->sortKeys();\n"
"\n"
"$sorted->all();\n"
"\n"
"/*\n"
"    [\n"
"        'first' => 'John',\n"
"        'id' => 22345,\n"
"        'last' => 'Doe',\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2302
#: ./docs/9.x/collections.md:2419
#: ./docs/10.x/collections.md:2533
#: ./docs/11.x/collections.md:2617
#: ./docs/master/collections.md:2533
#~ msgid "<a name=\"method-sortkeysdesc\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2303
#: ./docs/9.x/collections.md:2420
#: ./docs/10.x/collections.md:2534
#: ./docs/11.x/collections.md:2618
#: ./docs/master/collections.md:2534
msgid "`sortKeysDesc()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2304
#: ./docs/11.x/collections.md:2388
#: ./docs/master/collections.md:2304
msgid ""
"$transactions->sliding(2)->eachSpread(function (Collection $previous, Collection $current) {\n"
"    $current->total = $previous->total + $current->amount;\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:2305
#: ./docs/9.x/collections.md:2422
#: ./docs/10.x/collections.md:2536
#: ./docs/11.x/collections.md:2620
#: ./docs/master/collections.md:2536
msgid "This method has the same signature as the [`sortKeys`](#method-sortkeys) method, but will sort the collection in the opposite order."
msgstr ""

# P
#: ./docs/8.x/collections.md:2307
#: ./docs/9.x/collections.md:2424
#: ./docs/10.x/collections.md:2538
#: ./docs/11.x/collections.md:2622
#: ./docs/master/collections.md:2538
#~ msgid "<a name=\"method-sortkeysusing\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2308
#: ./docs/9.x/collections.md:2425
#: ./docs/10.x/collections.md:2539
#: ./docs/11.x/collections.md:2623
#: ./docs/master/collections.md:2539
msgid "`sortKeysUsing()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2310
#: ./docs/9.x/collections.md:2427
#: ./docs/10.x/collections.md:2541
#: ./docs/11.x/collections.md:2625
#: ./docs/master/collections.md:2541
msgid "The `sortKeysUsing` method sorts the collection by the keys of the underlying associative array using a callback:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2312
#: ./docs/9.x/collections.md:2429
#: ./docs/10.x/collections.md:2543
#: ./docs/11.x/collections.md:2627
#: ./docs/master/collections.md:2543
msgid ""
"$collection = collect([\n"
"    'ID' => 22345,\n"
"    'first' => 'John',\n"
"    'last' => 'Doe',\n"
"]);\n"
"\n"
"$sorted = $collection->sortKeysUsing('strnatcasecmp');\n"
"\n"
"$sorted->all();\n"
"\n"
"/*\n"
"    [\n"
"        'first' => 'John',\n"
"        'ID' => 22345,\n"
"        'last' => 'Doe',\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2323
#: ./docs/11.x/collections.md:2407
#: ./docs/master/collections.md:2323
msgid ""
"collect([1, 2, 3, 4])->sole(function (int $value, int $key) {\n"
"    return $value === 2;\n"
"});\n"
"\n"
"// 2"
msgstr ""

# P
#: ./docs/8.x/collections.md:2330
#: ./docs/9.x/collections.md:2447
#: ./docs/10.x/collections.md:2561
#: ./docs/11.x/collections.md:2645
#: ./docs/master/collections.md:2561
msgid "The callback must be a comparison function that returns an integer less than, equal to, or greater than zero. For more information, refer to the PHP documentation on [`uksort`](https://www.php.net/manual/en/function.uksort.php#refsect1-function.uksort-parameters), which is the PHP function that `sortKeysUsing` method utilizes internally."
msgstr ""

# P
#: ./docs/8.x/collections.md:2332
#: ./docs/9.x/collections.md:2449
#: ./docs/10.x/collections.md:2563
#: ./docs/11.x/collections.md:2647
#: ./docs/master/collections.md:2563
#~ msgid "<a name=\"method-splice\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2333
#: ./docs/9.x/collections.md:2450
#: ./docs/10.x/collections.md:2564
#: ./docs/11.x/collections.md:2648
#: ./docs/master/collections.md:2564
msgid "`splice()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2335
#: ./docs/9.x/collections.md:2452
#: ./docs/10.x/collections.md:2566
#: ./docs/11.x/collections.md:2650
#: ./docs/master/collections.md:2566
msgid "The `splice` method removes and returns a slice of items starting at the specified index:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2337
#: ./docs/9.x/collections.md:2454
#: ./docs/10.x/collections.md:2568
#: ./docs/11.x/collections.md:2652
#: ./docs/master/collections.md:2568
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->splice(2);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [3, 4, 5]\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2349
#: ./docs/9.x/collections.md:2466
#: ./docs/10.x/collections.md:2580
#: ./docs/11.x/collections.md:2664
#: ./docs/master/collections.md:2580
msgid "You may pass a second argument to limit the size of the resulting collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2351
#: ./docs/9.x/collections.md:2468
#: ./docs/10.x/collections.md:2582
#: ./docs/11.x/collections.md:2666
#: ./docs/master/collections.md:2582
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->splice(2, 1);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [3]\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 4, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2363
#: ./docs/9.x/collections.md:2480
#: ./docs/10.x/collections.md:2594
#: ./docs/11.x/collections.md:2678
#: ./docs/master/collections.md:2594
msgid "In addition, you may pass a third argument containing the new items to replace the items removed from the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2365
#: ./docs/9.x/collections.md:2482
#: ./docs/10.x/collections.md:2596
#: ./docs/11.x/collections.md:2680
#: ./docs/master/collections.md:2596
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->splice(2, 1, [10, 11]);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [3]\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 10, 11, 4, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2377
#: ./docs/9.x/collections.md:2494
#: ./docs/10.x/collections.md:2608
#: ./docs/11.x/collections.md:2692
#: ./docs/master/collections.md:2608
#~ msgid "<a name=\"method-split\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2378
#: ./docs/9.x/collections.md:2495
#: ./docs/10.x/collections.md:2609
#: ./docs/11.x/collections.md:2693
#: ./docs/master/collections.md:2609
msgid "`split()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2380
#: ./docs/9.x/collections.md:2497
#: ./docs/10.x/collections.md:2611
#: ./docs/11.x/collections.md:2695
#: ./docs/master/collections.md:2611
msgid "The `split` method breaks a collection into the given number of groups:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2382
#: ./docs/9.x/collections.md:2499
#: ./docs/10.x/collections.md:2613
#: ./docs/11.x/collections.md:2697
#: ./docs/master/collections.md:2613
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$groups = $collection->split(3);\n"
"\n"
"$groups->all();\n"
"\n"
"// [[1, 2], [3, 4], [5]]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2390
#: ./docs/9.x/collections.md:2507
#: ./docs/10.x/collections.md:2621
#: ./docs/11.x/collections.md:2705
#: ./docs/master/collections.md:2621
#~ msgid "<a name=\"method-splitin\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2391
#: ./docs/9.x/collections.md:2508
#: ./docs/10.x/collections.md:2622
#: ./docs/11.x/collections.md:2706
#: ./docs/master/collections.md:2622
msgid "`splitIn()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2393
#: ./docs/9.x/collections.md:2510
#: ./docs/10.x/collections.md:2624
#: ./docs/11.x/collections.md:2708
#: ./docs/master/collections.md:2624
msgid "The `splitIn` method breaks a collection into the given number of groups, filling non-terminal groups completely before allocating the remainder to the final group:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2395
#: ./docs/9.x/collections.md:2512
#: ./docs/10.x/collections.md:2626
#: ./docs/11.x/collections.md:2710
#: ./docs/master/collections.md:2626
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"\n"
"$groups = $collection->splitIn(3);\n"
"\n"
"$groups->all();\n"
"\n"
"// [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2403
#: ./docs/9.x/collections.md:2520
#: ./docs/10.x/collections.md:2634
#: ./docs/11.x/collections.md:2718
#: ./docs/master/collections.md:2634
#~ msgid "<a name=\"method-sum\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2404
#: ./docs/9.x/collections.md:2521
#: ./docs/10.x/collections.md:2635
#: ./docs/11.x/collections.md:2719
#: ./docs/master/collections.md:2635
msgid "`sum()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2406
#: ./docs/9.x/collections.md:2523
#: ./docs/10.x/collections.md:2637
#: ./docs/11.x/collections.md:2721
#: ./docs/master/collections.md:2637
msgid "The `sum` method returns the sum of all items in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2408
#: ./docs/9.x/collections.md:2525
#: ./docs/10.x/collections.md:2639
#: ./docs/11.x/collections.md:2723
#: ./docs/master/collections.md:2639
msgid ""
"collect([1, 2, 3, 4, 5])->sum();\n"
"\n"
"// 15"
msgstr ""

# P
#: ./docs/8.x/collections.md:2412
#: ./docs/9.x/collections.md:2529
#: ./docs/10.x/collections.md:2643
#: ./docs/11.x/collections.md:2727
#: ./docs/master/collections.md:2643
msgid "If the collection contains nested arrays or objects, you should pass a key that will be used to determine which values to sum:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2414
#: ./docs/9.x/collections.md:2531
#: ./docs/10.x/collections.md:2645
#: ./docs/11.x/collections.md:2729
#: ./docs/master/collections.md:2645
msgid ""
"$collection = collect([\n"
"    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n"
"    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n"
"]);\n"
"\n"
"$collection->sum('pages');\n"
"\n"
"// 1272"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2420
#: ./docs/11.x/collections.md:2504
#: ./docs/master/collections.md:2420
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"    ['name' => 'Chair', 'colors' => ['Black']],\n"
"    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy(function (array $product, int $key) {\n"
"    return count($product['colors']);\n"
"});\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2423
#: ./docs/9.x/collections.md:2540
#: ./docs/10.x/collections.md:2654
#: ./docs/11.x/collections.md:2738
#: ./docs/master/collections.md:2654
msgid "In addition, you may pass your own closure to determine which values of the collection to sum:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2425
#: ./docs/9.x/collections.md:2542
msgid ""
"$collection = collect([\n"
"    ['name' => 'Chair', 'colors' => ['Black']],\n"
"    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"]);\n"
"\n"
"$collection->sum(function ($product) {\n"
"    return count($product['colors']);\n"
"});\n"
"\n"
"// 6"
msgstr ""

# P
#: ./docs/8.x/collections.md:2437
#: ./docs/9.x/collections.md:2554
#: ./docs/10.x/collections.md:2668
#: ./docs/11.x/collections.md:2752
#: ./docs/master/collections.md:2668
#~ msgid "<a name=\"method-take\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2438
#: ./docs/9.x/collections.md:2555
#: ./docs/10.x/collections.md:2669
#: ./docs/11.x/collections.md:2753
#: ./docs/master/collections.md:2669
msgid "`take()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2440
#: ./docs/9.x/collections.md:2557
#: ./docs/10.x/collections.md:2671
#: ./docs/11.x/collections.md:2755
#: ./docs/master/collections.md:2671
msgid "The `take` method returns a new collection with the specified number of items:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2442
#: ./docs/9.x/collections.md:2559
#: ./docs/10.x/collections.md:2673
#: ./docs/11.x/collections.md:2757
#: ./docs/master/collections.md:2673
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->take(3);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [0, 1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2450
#: ./docs/9.x/collections.md:2567
#: ./docs/10.x/collections.md:2681
#: ./docs/11.x/collections.md:2765
#: ./docs/master/collections.md:2681
msgid "You may also pass a negative integer to take the specified number of items from the end of the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2452
#: ./docs/9.x/collections.md:2569
#: ./docs/10.x/collections.md:2683
#: ./docs/11.x/collections.md:2767
#: ./docs/master/collections.md:2683
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->take(-2);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [4, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2460
#: ./docs/9.x/collections.md:2577
#: ./docs/10.x/collections.md:2691
#: ./docs/11.x/collections.md:2775
#: ./docs/master/collections.md:2691
#~ msgid "<a name=\"method-takeuntil\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2461
#: ./docs/9.x/collections.md:2578
#: ./docs/10.x/collections.md:2692
#: ./docs/11.x/collections.md:2776
#: ./docs/master/collections.md:2692
msgid "`takeUntil()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2463
#: ./docs/9.x/collections.md:2580
#: ./docs/10.x/collections.md:2694
#: ./docs/11.x/collections.md:2778
#: ./docs/master/collections.md:2694
msgid "The `takeUntil` method returns items in the collection until the given callback returns `true`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2465
#: ./docs/9.x/collections.md:2582
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeUntil(function ($item) {\n"
"    return $item >= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2467
#: ./docs/11.x/collections.md:2551
#: ./docs/master/collections.md:2467
msgid ""
"$collection = collect([\n"
"    ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ['name' => 'Abigail Otwell', 'age' => 30],\n"
"    ['name' => 'Taylor Otwell', 'age' => 36],\n"
"    ['name' => 'Abigail Otwell', 'age' => 32],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy([\n"
"    fn (array $a, array $b) => $a['name'] <=> $b['name'],\n"
"    fn (array $a, array $b) => $b['age'] <=> $a['age'],\n"
"]);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2475
#: ./docs/9.x/collections.md:2592
#: ./docs/10.x/collections.md:2706
#: ./docs/11.x/collections.md:2790
#: ./docs/master/collections.md:2706
msgid "You may also pass a simple value to the `takeUntil` method to get the items until the given value is found:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2477
#: ./docs/9.x/collections.md:2594
#: ./docs/10.x/collections.md:2708
#: ./docs/11.x/collections.md:2792
#: ./docs/master/collections.md:2708
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeUntil(3);\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2485
#: ./docs/9.x/collections.md:2603
#: ./docs/10.x/collections.md:2717
#: ./docs/11.x/collections.md:2801
#: ./docs/master/collections.md:2717
msgid "If the given value is not found or the callback never returns `true`, the `takeUntil` method will return all items in the collection."
msgstr ""

# P
#: ./docs/8.x/collections.md:2487
#: ./docs/9.x/collections.md:2605
#: ./docs/10.x/collections.md:2719
#: ./docs/11.x/collections.md:2803
#: ./docs/master/collections.md:2719
#~ msgid "<a name=\"method-takewhile\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2488
#: ./docs/9.x/collections.md:2606
#: ./docs/10.x/collections.md:2720
#: ./docs/11.x/collections.md:2804
#: ./docs/master/collections.md:2720
msgid "`takeWhile()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2490
#: ./docs/9.x/collections.md:2608
#: ./docs/10.x/collections.md:2722
#: ./docs/11.x/collections.md:2806
#: ./docs/master/collections.md:2722
msgid "The `takeWhile` method returns items in the collection until the given callback returns `false`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2492
#: ./docs/9.x/collections.md:2610
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeWhile(function ($item) {\n"
"    return $item < 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2502
#: ./docs/9.x/collections.md:2621
#: ./docs/10.x/collections.md:2735
#: ./docs/11.x/collections.md:2819
#: ./docs/master/collections.md:2735
msgid "If the callback never returns `false`, the `takeWhile` method will return all items in the collection."
msgstr ""

# P
#: ./docs/8.x/collections.md:2504
#: ./docs/9.x/collections.md:2623
#: ./docs/10.x/collections.md:2737
#: ./docs/11.x/collections.md:2821
#: ./docs/master/collections.md:2737
#~ msgid "<a name=\"method-tap\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2505
#: ./docs/9.x/collections.md:2624
#: ./docs/10.x/collections.md:2738
#: ./docs/11.x/collections.md:2822
#: ./docs/master/collections.md:2738
msgid "`tap()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2507
#: ./docs/9.x/collections.md:2626
#: ./docs/10.x/collections.md:2740
#: ./docs/11.x/collections.md:2824
#: ./docs/master/collections.md:2740
msgid "The `tap` method passes the collection to the given callback, allowing you to \"tap\" into the collection at a specific point and do something with the items while not affecting the collection itself. The collection is then returned by the `tap` method:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2509
#: ./docs/9.x/collections.md:2628
msgid ""
"collect([2, 4, 3, 1, 5])\n"
"    ->sort()\n"
"    ->tap(function ($collection) {\n"
"        Log::debug('Values after sorting', $collection->values()->all());\n"
"    })\n"
"    ->shift();\n"
"\n"
"// 1"
msgstr ""

# P
#: ./docs/8.x/collections.md:2518
#: ./docs/9.x/collections.md:2637
#: ./docs/10.x/collections.md:2751
#: ./docs/11.x/collections.md:2835
#: ./docs/master/collections.md:2751
#~ msgid "<a name=\"method-times\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2519
#: ./docs/9.x/collections.md:2638
#: ./docs/10.x/collections.md:2752
#: ./docs/11.x/collections.md:2836
#: ./docs/master/collections.md:2752
msgid "`times()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2521
#: ./docs/9.x/collections.md:2640
#: ./docs/10.x/collections.md:2754
#: ./docs/11.x/collections.md:2838
#: ./docs/master/collections.md:2754
msgid "The static `times` method creates a new collection by invoking the given closure a specified number of times:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2523
#: ./docs/9.x/collections.md:2642
msgid ""
"$collection = Collection::times(10, function ($number) {\n"
"    return $number * 9;\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2531
#: ./docs/9.x/collections.md:2650
#: ./docs/10.x/collections.md:2764
#: ./docs/11.x/collections.md:2848
#: ./docs/master/collections.md:2764
#~ msgid "<a name=\"method-toarray\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2532
#: ./docs/9.x/collections.md:2651
#: ./docs/10.x/collections.md:2765
#: ./docs/11.x/collections.md:2849
#: ./docs/master/collections.md:2765
msgid "`toArray()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2534
#: ./docs/9.x/collections.md:2653
#: ./docs/10.x/collections.md:2767
#: ./docs/11.x/collections.md:2851
#: ./docs/master/collections.md:2767
msgid "The `toArray` method converts the collection into a plain PHP `array`. If the collection's values are [Eloquent](/docs/{{version}}/eloquent) models, the models will also be converted to arrays:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2536
#: ./docs/9.x/collections.md:2655
#: ./docs/10.x/collections.md:2769
#: ./docs/11.x/collections.md:2853
#: ./docs/master/collections.md:2769
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 200]);\n"
"\n"
"$collection->toArray();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Desk', 'price' => 200],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2546
#: ./docs/9.x/collections.md:2666
#: ./docs/10.x/collections.md:2780
#: ./docs/11.x/collections.md:2864
#: ./docs/master/collections.md:2780
msgid "`toArray` also converts all of the collection's nested objects that are an instance of `Arrayable` to an array. If you want to get the raw array underlying the collection, use the [`all`](#method-all) method instead."
msgstr ""

# P
#: ./docs/8.x/collections.md:2548
#: ./docs/9.x/collections.md:2668
#: ./docs/10.x/collections.md:2782
#: ./docs/11.x/collections.md:2866
#: ./docs/master/collections.md:2782
#~ msgid "<a name=\"method-tojson\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2549
#: ./docs/9.x/collections.md:2669
#: ./docs/10.x/collections.md:2783
#: ./docs/11.x/collections.md:2867
#: ./docs/master/collections.md:2783
msgid "`toJson()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2551
#: ./docs/9.x/collections.md:2671
#: ./docs/10.x/collections.md:2785
#: ./docs/11.x/collections.md:2869
#: ./docs/master/collections.md:2785
msgid "The `toJson` method converts the collection into a JSON serialized string:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2553
#: ./docs/9.x/collections.md:2673
#: ./docs/10.x/collections.md:2787
#: ./docs/11.x/collections.md:2871
#: ./docs/master/collections.md:2787
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 200]);\n"
"\n"
"$collection->toJson();\n"
"\n"
"// '{\"name\":\"Desk\", \"price\":200}'"
msgstr ""

# P
#: ./docs/8.x/collections.md:2559
#: ./docs/9.x/collections.md:2679
#: ./docs/10.x/collections.md:2793
#: ./docs/11.x/collections.md:2877
#: ./docs/master/collections.md:2793
#~ msgid "<a name=\"method-transform\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2560
#: ./docs/9.x/collections.md:2680
#: ./docs/10.x/collections.md:2794
#: ./docs/11.x/collections.md:2878
#: ./docs/master/collections.md:2794
msgid "`transform()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2562
#: ./docs/9.x/collections.md:2682
#: ./docs/10.x/collections.md:2796
#: ./docs/11.x/collections.md:2880
#: ./docs/master/collections.md:2796
msgid "The `transform` method iterates over the collection and calls the given callback with each item in the collection. The items in the collection will be replaced by the values returned by the callback:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2564
#: ./docs/9.x/collections.md:2684
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->transform(function ($item, $key) {\n"
"    return $item * 2;\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [2, 4, 6, 8, 10]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2574
#: ./docs/9.x/collections.md:2695
#: ./docs/10.x/collections.md:2809
#: ./docs/11.x/collections.md:2893
#: ./docs/master/collections.md:2809
msgid "Unlike most other collection methods, `transform` modifies the collection itself. If you wish to create a new collection instead, use the [`map`](#method-map) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2576
#: ./docs/9.x/collections.md:2697
#: ./docs/10.x/collections.md:2811
#: ./docs/11.x/collections.md:2895
#: ./docs/master/collections.md:2811
#~ msgid "<a name=\"method-undot\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2577
#: ./docs/9.x/collections.md:2698
#: ./docs/10.x/collections.md:2812
#: ./docs/11.x/collections.md:2896
#: ./docs/master/collections.md:2812
msgid "`undot()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2579
#: ./docs/9.x/collections.md:2700
#: ./docs/10.x/collections.md:2814
#: ./docs/11.x/collections.md:2898
#: ./docs/master/collections.md:2814
msgid "The `undot` method expands a single-dimensional collection that uses \"dot\" notation into a multi-dimensional collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2581
msgid ""
"$person = collect([\n"
"    'name.first_name' => 'Marie',\n"
"    'name.last_name' => 'Valentine',\n"
"    'address.line_1' => '2992 Eagle Drive',\n"
"    'address.line_2' => '',\n"
"    'address.suburb' => 'Detroit',\n"
"    'address.state' => 'MI',\n"
"    'address.postcode' => '48219'\n"
"])\n"
"\n"
"$person = $person->undot();\n"
"\n"
"$person->toArray();\n"
"\n"
"/*\n"
"    [\n"
"        \"name\" => [\n"
"            \"first_name\" => \"Marie\",\n"
"            \"last_name\" => \"Valentine\",\n"
"        ],\n"
"        \"address\" => [\n"
"            \"line_1\" => \"2992 Eagle Drive\",\n"
"            \"line_2\" => \"\",\n"
"            \"suburb\" => \"Detroit\",\n"
"            \"state\" => \"MI\",\n"
"            \"postcode\" => \"48219\",\n"
"        ],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2611
#: ./docs/9.x/collections.md:2732
#: ./docs/10.x/collections.md:2846
#: ./docs/11.x/collections.md:2930
#: ./docs/master/collections.md:2846
#~ msgid "<a name=\"method-union\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2612
#: ./docs/9.x/collections.md:2733
#: ./docs/10.x/collections.md:2847
#: ./docs/11.x/collections.md:2931
#: ./docs/master/collections.md:2847
msgid "`union()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2614
#: ./docs/9.x/collections.md:2735
#: ./docs/10.x/collections.md:2849
#: ./docs/11.x/collections.md:2933
#: ./docs/master/collections.md:2849
msgid "The `union` method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection's values will be preferred:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2616
#: ./docs/9.x/collections.md:2737
#: ./docs/10.x/collections.md:2851
#: ./docs/11.x/collections.md:2935
#: ./docs/master/collections.md:2851
msgid ""
"$collection = collect([1 => ['a'], 2 => ['b']]);\n"
"\n"
"$union = $collection->union([3 => ['c'], 1 => ['d']]);\n"
"\n"
"$union->all();\n"
"\n"
"// [1 => ['a'], 2 => ['b'], 3 => ['c']]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2624
#: ./docs/9.x/collections.md:2745
#: ./docs/10.x/collections.md:2859
#: ./docs/11.x/collections.md:2943
#: ./docs/master/collections.md:2859
#~ msgid "<a name=\"method-unique\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2625
#: ./docs/9.x/collections.md:2746
#: ./docs/10.x/collections.md:2860
#: ./docs/11.x/collections.md:2944
#: ./docs/master/collections.md:2860
msgid "`unique()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2627
#: ./docs/9.x/collections.md:2748
#: ./docs/10.x/collections.md:2862
#: ./docs/11.x/collections.md:2946
#: ./docs/master/collections.md:2862
msgid "The `unique` method returns all of the unique items in the collection. The returned collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2629
#: ./docs/9.x/collections.md:2750
#: ./docs/10.x/collections.md:2864
#: ./docs/11.x/collections.md:2948
#: ./docs/master/collections.md:2864
msgid ""
"$collection = collect([1, 1, 2, 2, 3, 4, 2]);\n"
"\n"
"$unique = $collection->unique();\n"
"\n"
"$unique->values()->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2637
#: ./docs/9.x/collections.md:2758
#: ./docs/10.x/collections.md:2872
#: ./docs/11.x/collections.md:2956
#: ./docs/master/collections.md:2872
msgid "When dealing with nested arrays or objects, you may specify the key used to determine uniqueness:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2639
#: ./docs/9.x/collections.md:2760
#: ./docs/10.x/collections.md:2874
#: ./docs/11.x/collections.md:2958
#: ./docs/master/collections.md:2874
msgid ""
"$collection = collect([\n"
"    ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"    ['name' => 'iPhone 5', 'brand' => 'Apple', 'type' => 'phone'],\n"
"    ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"    ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"    ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"]);\n"
"\n"
"$unique = $collection->unique('brand');\n"
"\n"
"$unique->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2656
#: ./docs/11.x/collections.md:2740
#: ./docs/master/collections.md:2656
msgid ""
"$collection = collect([\n"
"    ['name' => 'Chair', 'colors' => ['Black']],\n"
"    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"]);\n"
"\n"
"$collection->sum(function (array $product) {\n"
"    return count($product['colors']);\n"
"});\n"
"\n"
"// 6"
msgstr ""

# P
#: ./docs/8.x/collections.md:2658
#: ./docs/9.x/collections.md:2779
#: ./docs/10.x/collections.md:2893
#: ./docs/11.x/collections.md:2977
#: ./docs/master/collections.md:2893
msgid "Finally, you may also pass your own closure to the `unique` method to specify which value should determine an item's uniqueness:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2660
#: ./docs/9.x/collections.md:2781
msgid ""
"$unique = $collection->unique(function ($item) {\n"
"    return $item['brand'].$item['type'];\n"
"});\n"
"\n"
"$unique->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2675
#: ./docs/9.x/collections.md:2796
#: ./docs/10.x/collections.md:2910
#: ./docs/11.x/collections.md:2994
#: ./docs/master/collections.md:2910
msgid "The `unique` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`uniqueStrict`](#method-uniquestrict) method to filter using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:2677
#: ./docs/9.x/collections.md:2799
#: ./docs/10.x/collections.md:2913
#: ./docs/11.x/collections.md:2997
#: ./docs/master/collections.md:2913
msgid "This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-unique)."
msgstr ""

# P
#: ./docs/8.x/collections.md:2679
#: ./docs/9.x/collections.md:2801
#: ./docs/10.x/collections.md:2915
#: ./docs/11.x/collections.md:2999
#: ./docs/master/collections.md:2915
#~ msgid "<a name=\"method-uniquestrict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2680
#: ./docs/9.x/collections.md:2802
#: ./docs/10.x/collections.md:2916
#: ./docs/11.x/collections.md:3000
#: ./docs/master/collections.md:2916
msgid "`uniqueStrict()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2682
#: ./docs/9.x/collections.md:2804
#: ./docs/10.x/collections.md:2918
#: ./docs/11.x/collections.md:3002
#: ./docs/master/collections.md:2918
msgid "This method has the same signature as the [`unique`](#method-unique) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:2684
#: ./docs/9.x/collections.md:2806
#: ./docs/10.x/collections.md:2920
#: ./docs/11.x/collections.md:3004
#: ./docs/master/collections.md:2920
#~ msgid "<a name=\"method-unless\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2685
#: ./docs/9.x/collections.md:2807
#: ./docs/10.x/collections.md:2921
#: ./docs/11.x/collections.md:3005
#: ./docs/master/collections.md:2921
msgid "`unless()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2687
#: ./docs/9.x/collections.md:2809
#: ./docs/10.x/collections.md:2923
#: ./docs/11.x/collections.md:3007
#: ./docs/master/collections.md:2923
msgid "The `unless` method will execute the given callback unless the first argument given to the method evaluates to `true`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2689
#: ./docs/9.x/collections.md:2811
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->unless(true, function ($collection) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->unless(false, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2696
#: ./docs/11.x/collections.md:2780
#: ./docs/master/collections.md:2696
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeUntil(function (int $item) {\n"
"    return $item >= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:2702
#: ./docs/10.x/collections.md:2816
#: ./docs/11.x/collections.md:2900
#: ./docs/master/collections.md:2816
msgid ""
"$person = collect([\n"
"    'name.first_name' => 'Marie',\n"
"    'name.last_name' => 'Valentine',\n"
"    'address.line_1' => '2992 Eagle Drive',\n"
"    'address.line_2' => '',\n"
"    'address.suburb' => 'Detroit',\n"
"    'address.state' => 'MI',\n"
"    'address.postcode' => '48219'\n"
"]);\n"
"\n"
"$person = $person->undot();\n"
"\n"
"$person->toArray();\n"
"\n"
"/*\n"
"    [\n"
"        \"name\" => [\n"
"            \"first_name\" => \"Marie\",\n"
"            \"last_name\" => \"Valentine\",\n"
"        ],\n"
"        \"address\" => [\n"
"            \"line_1\" => \"2992 Eagle Drive\",\n"
"            \"line_2\" => \"\",\n"
"            \"suburb\" => \"Detroit\",\n"
"            \"state\" => \"MI\",\n"
"            \"postcode\" => \"48219\",\n"
"        ],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2703
#: ./docs/9.x/collections.md:2825
#: ./docs/10.x/collections.md:2939
#: ./docs/11.x/collections.md:3023
#: ./docs/master/collections.md:2939
msgid "A second callback may be passed to the `unless` method. The second callback will be executed when the first argument given to the `unless` method evaluates to `true`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2705
#: ./docs/9.x/collections.md:2827
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->unless(true, function ($collection) {\n"
"    return $collection->push(4);\n"
"}, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2717
#: ./docs/9.x/collections.md:2839
#: ./docs/10.x/collections.md:2953
#: ./docs/11.x/collections.md:3037
#: ./docs/master/collections.md:2953
msgid "For the inverse of `unless`, see the [`when`](#method-when) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2719
#: ./docs/9.x/collections.md:2841
#: ./docs/10.x/collections.md:2955
#: ./docs/11.x/collections.md:3039
#: ./docs/master/collections.md:2955
#~ msgid "<a name=\"method-unlessempty\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2720
#: ./docs/9.x/collections.md:2842
#: ./docs/10.x/collections.md:2956
#: ./docs/11.x/collections.md:3040
#: ./docs/master/collections.md:2956
msgid "`unlessEmpty()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2722
#: ./docs/9.x/collections.md:2844
#: ./docs/10.x/collections.md:2958
#: ./docs/11.x/collections.md:3042
#: ./docs/master/collections.md:2958
msgid "Alias for the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2724
#: ./docs/11.x/collections.md:2808
#: ./docs/master/collections.md:2724
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeWhile(function (int $item) {\n"
"    return $item < 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2724
#: ./docs/9.x/collections.md:2846
#: ./docs/10.x/collections.md:2960
#: ./docs/11.x/collections.md:3044
#: ./docs/master/collections.md:2960
#~ msgid "<a name=\"method-unlessnotempty\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2725
#: ./docs/9.x/collections.md:2847
#: ./docs/10.x/collections.md:2961
#: ./docs/11.x/collections.md:3045
#: ./docs/master/collections.md:2961
msgid "`unlessNotEmpty()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2727
#: ./docs/9.x/collections.md:2849
#: ./docs/10.x/collections.md:2963
#: ./docs/11.x/collections.md:3047
#: ./docs/master/collections.md:2963
msgid "Alias for the [`whenEmpty`](#method-whenempty) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2729
#: ./docs/9.x/collections.md:2851
#: ./docs/10.x/collections.md:2965
#: ./docs/11.x/collections.md:3049
#: ./docs/master/collections.md:2965
#~ msgid "<a name=\"method-unwrap\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2730
#: ./docs/9.x/collections.md:2852
#: ./docs/10.x/collections.md:2966
#: ./docs/11.x/collections.md:3050
#: ./docs/master/collections.md:2966
msgid "`unwrap()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2732
#: ./docs/9.x/collections.md:2854
#: ./docs/10.x/collections.md:2968
#: ./docs/11.x/collections.md:3052
#: ./docs/master/collections.md:2968
msgid "The static `unwrap` method returns the collection's underlying items from the given value when applicable:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2734
#: ./docs/9.x/collections.md:2856
#: ./docs/10.x/collections.md:2970
#: ./docs/11.x/collections.md:3054
#: ./docs/master/collections.md:2970
msgid ""
"Collection::unwrap(collect('John Doe'));\n"
"\n"
"// ['John Doe']\n"
"\n"
"Collection::unwrap(['John Doe']);\n"
"\n"
"// ['John Doe']\n"
"\n"
"Collection::unwrap('John Doe');\n"
"\n"
"// 'John Doe'"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2742
#: ./docs/11.x/collections.md:2826
#: ./docs/master/collections.md:2742
msgid ""
"collect([2, 4, 3, 1, 5])\n"
"    ->sort()\n"
"    ->tap(function (Collection $collection) {\n"
"        Log::debug('Values after sorting', $collection->values()->all());\n"
"    })\n"
"    ->shift();\n"
"\n"
"// 1"
msgstr ""

# P
#: ./docs/8.x/collections.md:2746
#: ./docs/9.x/collections.md:2882
#: ./docs/10.x/collections.md:2996
#: ./docs/11.x/collections.md:3080
#: ./docs/master/collections.md:2996
#~ msgid "<a name=\"method-values\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2747
#: ./docs/9.x/collections.md:2883
#: ./docs/10.x/collections.md:2997
#: ./docs/11.x/collections.md:3081
#: ./docs/master/collections.md:2997
msgid "`values()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2749
#: ./docs/9.x/collections.md:2885
#: ./docs/10.x/collections.md:2999
#: ./docs/11.x/collections.md:3083
#: ./docs/master/collections.md:2999
msgid "The `values` method returns a new collection with the keys reset to consecutive integers:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2751
#: ./docs/9.x/collections.md:2887
#: ./docs/10.x/collections.md:3001
#: ./docs/11.x/collections.md:3085
#: ./docs/master/collections.md:3001
msgid ""
"$collection = collect([\n"
"    10 => ['product' => 'Desk', 'price' => 200],\n"
"    11 => ['product' => 'Desk', 'price' => 200],\n"
"]);\n"
"\n"
"$values = $collection->values();\n"
"\n"
"$values->all();\n"
"\n"
"/*\n"
"    [\n"
"        0 => ['product' => 'Desk', 'price' => 200],\n"
"        1 => ['product' => 'Desk', 'price' => 200],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2756
#: ./docs/11.x/collections.md:2840
#: ./docs/master/collections.md:2756
msgid ""
"$collection = Collection::times(10, function (int $number) {\n"
"    return $number * 9;\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2767
#: ./docs/9.x/collections.md:2903
#: ./docs/10.x/collections.md:3017
#: ./docs/11.x/collections.md:3101
#: ./docs/master/collections.md:3017
#~ msgid "<a name=\"method-when\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2768
#: ./docs/9.x/collections.md:2904
#: ./docs/10.x/collections.md:3018
#: ./docs/11.x/collections.md:3102
#: ./docs/master/collections.md:3018
msgid "`when()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2770
msgid "The `when` method will execute the given callback when the first argument given to the method evaluates to `true`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2772
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(true, function ($collection) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->when(false, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2786
#: ./docs/9.x/collections.md:2922
#: ./docs/10.x/collections.md:3036
#: ./docs/11.x/collections.md:3120
#: ./docs/master/collections.md:3036
msgid "A second callback may be passed to the `when` method. The second callback will be executed when the first argument given to the `when` method evaluates to `false`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2788
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(false, function ($collection) {\n"
"    return $collection->push(4);\n"
"}, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2798
#: ./docs/11.x/collections.md:2882
#: ./docs/master/collections.md:2798
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->transform(function (int $item, int $key) {\n"
"    return $item * 2;\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [2, 4, 6, 8, 10]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2800
#: ./docs/9.x/collections.md:2936
#: ./docs/10.x/collections.md:3050
#: ./docs/11.x/collections.md:3134
#: ./docs/master/collections.md:3050
msgid "For the inverse of `when`, see the [`unless`](#method-unless) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2802
#: ./docs/9.x/collections.md:2938
#: ./docs/10.x/collections.md:3052
#: ./docs/11.x/collections.md:3136
#: ./docs/master/collections.md:3052
#~ msgid "<a name=\"method-whenempty\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2803
#: ./docs/9.x/collections.md:2939
#: ./docs/10.x/collections.md:3053
#: ./docs/11.x/collections.md:3137
#: ./docs/master/collections.md:3053
msgid "`whenEmpty()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2805
#: ./docs/9.x/collections.md:2941
#: ./docs/10.x/collections.md:3055
#: ./docs/11.x/collections.md:3139
#: ./docs/master/collections.md:3055
msgid "The `whenEmpty` method will execute the given callback when the collection is empty:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2807
#: ./docs/9.x/collections.md:2943
msgid ""
"$collection = collect(['Michael', 'Tom']);\n"
"\n"
"$collection->whenEmpty(function ($collection) {\n"
"    return $collection->push('Adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Michael', 'Tom']\n"
"\n"
"\n"
"$collection = collect();\n"
"\n"
"$collection->whenEmpty(function ($collection) {\n"
"    return $collection->push('Adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Adam']"
msgstr ""

# P
#: ./docs/8.x/collections.md:2828
#: ./docs/9.x/collections.md:2964
#: ./docs/10.x/collections.md:3078
#: ./docs/11.x/collections.md:3162
#: ./docs/master/collections.md:3078
msgid "A second closure may be passed to the `whenEmpty` method that will be executed when the collection is not empty:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2830
#: ./docs/9.x/collections.md:2966
msgid ""
"$collection = collect(['Michael', 'Tom']);\n"
"\n"
"$collection->whenEmpty(function ($collection) {\n"
"    return $collection->push('Adam');\n"
"}, function ($collection) {\n"
"    return $collection->push('Taylor');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Michael', 'Tom', 'Taylor']"
msgstr ""

# P
#: ./docs/8.x/collections.md:2842
#: ./docs/9.x/collections.md:2978
#: ./docs/10.x/collections.md:3092
#: ./docs/11.x/collections.md:3176
#: ./docs/master/collections.md:3092
msgid "For the inverse of `whenEmpty`, see the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2844
#: ./docs/9.x/collections.md:2980
#: ./docs/10.x/collections.md:3094
#: ./docs/11.x/collections.md:3178
#: ./docs/master/collections.md:3094
#~ msgid "<a name=\"method-whennotempty\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2845
#: ./docs/9.x/collections.md:2981
#: ./docs/10.x/collections.md:3095
#: ./docs/11.x/collections.md:3179
#: ./docs/master/collections.md:3095
msgid "`whenNotEmpty()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2847
#: ./docs/9.x/collections.md:2983
#: ./docs/10.x/collections.md:3097
#: ./docs/11.x/collections.md:3181
#: ./docs/master/collections.md:3097
msgid "The `whenNotEmpty` method will execute the given callback when the collection is not empty:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2849
#: ./docs/9.x/collections.md:2985
msgid ""
"$collection = collect(['michael', 'tom']);\n"
"\n"
"$collection->whenNotEmpty(function ($collection) {\n"
"    return $collection->push('adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['michael', 'tom', 'adam']\n"
"\n"
"\n"
"$collection = collect();\n"
"\n"
"$collection->whenNotEmpty(function ($collection) {\n"
"    return $collection->push('adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// []"
msgstr ""

# P
#: ./docs/9.x/collections.md:2868
#: ./docs/10.x/collections.md:2982
#: ./docs/11.x/collections.md:3066
#: ./docs/master/collections.md:2982
#~ msgid "<a name=\"method-value\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/collections.md:2869
#: ./docs/10.x/collections.md:2983
#: ./docs/11.x/collections.md:3067
#: ./docs/master/collections.md:2983
msgid "`value()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2870
#: ./docs/9.x/collections.md:3006
#: ./docs/10.x/collections.md:3120
#: ./docs/11.x/collections.md:3204
#: ./docs/master/collections.md:3120
msgid "A second closure may be passed to the `whenNotEmpty` method that will be executed when the collection is empty:"
msgstr ""

# P
#: ./docs/9.x/collections.md:2871
#: ./docs/10.x/collections.md:2985
#: ./docs/11.x/collections.md:3069
#: ./docs/master/collections.md:2985
msgid "The `value` method retrieves a given value from the first element of the collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2872
#: ./docs/9.x/collections.md:3008
msgid ""
"$collection = collect();\n"
"\n"
"$collection->whenNotEmpty(function ($collection) {\n"
"    return $collection->push('adam');\n"
"}, function ($collection) {\n"
"    return $collection->push('taylor');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['taylor']"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:2873
#: ./docs/10.x/collections.md:2987
#: ./docs/11.x/collections.md:3071
#: ./docs/master/collections.md:2987
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Speaker', 'price' => 400],\n"
"]);\n"
"\n"
"$value = $collection->value('price');\n"
"\n"
"// 200"
msgstr ""

# P
#: ./docs/8.x/collections.md:2884
#: ./docs/9.x/collections.md:3020
#: ./docs/10.x/collections.md:3134
#: ./docs/11.x/collections.md:3218
#: ./docs/master/collections.md:3134
msgid "For the inverse of `whenNotEmpty`, see the [`whenEmpty`](#method-whenempty) method."
msgstr ""

# P
#: ./docs/8.x/collections.md:2886
#: ./docs/9.x/collections.md:3022
#: ./docs/10.x/collections.md:3136
#: ./docs/11.x/collections.md:3220
#: ./docs/master/collections.md:3136
#~ msgid "<a name=\"method-where\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2887
#: ./docs/9.x/collections.md:3023
#: ./docs/10.x/collections.md:3137
#: ./docs/11.x/collections.md:3221
#: ./docs/master/collections.md:3137
msgid "`where()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2889
#: ./docs/9.x/collections.md:3025
#: ./docs/10.x/collections.md:3139
#: ./docs/11.x/collections.md:3223
#: ./docs/master/collections.md:3139
msgid "The `where` method filters the collection by a given key / value pair:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2891
#: ./docs/9.x/collections.md:3027
#: ./docs/10.x/collections.md:3141
#: ./docs/11.x/collections.md:3225
#: ./docs/master/collections.md:3141
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->where('price', 100);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2895
#: ./docs/11.x/collections.md:2979
#: ./docs/master/collections.md:2895
msgid ""
"$unique = $collection->unique(function (array $item) {\n"
"    return $item['brand'].$item['type'];\n"
"});\n"
"\n"
"$unique->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/9.x/collections.md:2906
#: ./docs/10.x/collections.md:3020
#: ./docs/11.x/collections.md:3104
#: ./docs/master/collections.md:3020
msgid "The `when` method will execute the given callback when the first argument given to the method evaluates to `true`. The collection instance and the first argument given to the `when` method will be provided to the closure:"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:2908
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(true, function ($collection, $value) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->when(false, function ($collection, $value) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2909
#: ./docs/9.x/collections.md:3045
#: ./docs/10.x/collections.md:3159
#: ./docs/11.x/collections.md:3243
#: ./docs/master/collections.md:3159
msgid "The `where` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereStrict`](#method-wherestrict) method to filter using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:2911
msgid "Optionally, you may pass a comparison operator as the second parameter."
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2913
#: ./docs/9.x/collections.md:3049
#: ./docs/10.x/collections.md:3163
#: ./docs/11.x/collections.md:3247
#: ./docs/master/collections.md:3163
msgid ""
"$collection = collect([\n"
"    ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"    ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"    ['name' => 'Sue', 'deleted_at' => null],\n"
"]);\n"
"\n"
"$filtered = $collection->where('deleted_at', '!=', null);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"        ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/9.x/collections.md:2924
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(false, function ($collection, $value) {\n"
"    return $collection->push(4);\n"
"}, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2925
#: ./docs/11.x/collections.md:3009
#: ./docs/master/collections.md:2925
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->unless(true, function (Collection $collection) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->unless(false, function (Collection $collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2930
#: ./docs/9.x/collections.md:3066
#: ./docs/10.x/collections.md:3180
#: ./docs/11.x/collections.md:3264
#: ./docs/master/collections.md:3180
#~ msgid "<a name=\"method-wherestrict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2931
#: ./docs/9.x/collections.md:3067
#: ./docs/10.x/collections.md:3181
#: ./docs/11.x/collections.md:3265
#: ./docs/master/collections.md:3181
msgid "`whereStrict()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2933
#: ./docs/9.x/collections.md:3069
#: ./docs/10.x/collections.md:3183
#: ./docs/11.x/collections.md:3267
#: ./docs/master/collections.md:3183
msgid "This method has the same signature as the [`where`](#method-where) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:2935
#: ./docs/9.x/collections.md:3071
#: ./docs/10.x/collections.md:3185
#: ./docs/11.x/collections.md:3269
#: ./docs/master/collections.md:3185
#~ msgid "<a name=\"method-wherebetween\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2936
#: ./docs/9.x/collections.md:3072
#: ./docs/10.x/collections.md:3186
#: ./docs/11.x/collections.md:3270
#: ./docs/master/collections.md:3186
msgid "`whereBetween()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2938
#: ./docs/9.x/collections.md:3074
#: ./docs/10.x/collections.md:3188
#: ./docs/11.x/collections.md:3272
#: ./docs/master/collections.md:3188
msgid "The `whereBetween` method filters the collection by determining if a specified item value is within a given range:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2940
#: ./docs/9.x/collections.md:3076
#: ./docs/10.x/collections.md:3190
#: ./docs/11.x/collections.md:3274
#: ./docs/master/collections.md:3190
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 80],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Pencil', 'price' => 30],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereBetween('price', [100, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:2941
#: ./docs/11.x/collections.md:3025
#: ./docs/master/collections.md:2941
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->unless(true, function (Collection $collection) {\n"
"    return $collection->push(4);\n"
"}, function (Collection $collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# P
#: ./docs/8.x/collections.md:2960
#: ./docs/9.x/collections.md:3096
#: ./docs/10.x/collections.md:3210
#: ./docs/11.x/collections.md:3294
#: ./docs/master/collections.md:3210
#~ msgid "<a name=\"method-wherein\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2961
#: ./docs/9.x/collections.md:3097
#: ./docs/10.x/collections.md:3211
#: ./docs/11.x/collections.md:3295
#: ./docs/master/collections.md:3211
msgid "`whereIn()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2963
#: ./docs/9.x/collections.md:3099
#: ./docs/10.x/collections.md:3213
#: ./docs/11.x/collections.md:3297
#: ./docs/master/collections.md:3213
msgid "The `whereIn` method removes elements from the collection that do not have a specified item value that is contained within the given array:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2965
#: ./docs/9.x/collections.md:3101
#: ./docs/10.x/collections.md:3215
#: ./docs/11.x/collections.md:3299
#: ./docs/master/collections.md:3215
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereIn('price', [150, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/8.x/collections.md:2983
#: ./docs/9.x/collections.md:3119
#: ./docs/10.x/collections.md:3233
#: ./docs/11.x/collections.md:3317
#: ./docs/master/collections.md:3233
msgid "The `whereIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereInStrict`](#method-whereinstrict) method to filter using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:2985
#: ./docs/9.x/collections.md:3121
#: ./docs/10.x/collections.md:3235
#: ./docs/11.x/collections.md:3319
#: ./docs/master/collections.md:3235
#~ msgid "<a name=\"method-whereinstrict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2986
#: ./docs/9.x/collections.md:3122
#: ./docs/10.x/collections.md:3236
#: ./docs/11.x/collections.md:3320
#: ./docs/master/collections.md:3236
msgid "`whereInStrict()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2988
#: ./docs/9.x/collections.md:3124
#: ./docs/10.x/collections.md:3238
#: ./docs/11.x/collections.md:3322
#: ./docs/master/collections.md:3238
msgid "This method has the same signature as the [`whereIn`](#method-wherein) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:2990
#: ./docs/9.x/collections.md:3126
#: ./docs/10.x/collections.md:3240
#: ./docs/11.x/collections.md:3324
#: ./docs/master/collections.md:3240
#~ msgid "<a name=\"method-whereinstanceof\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:2991
#: ./docs/9.x/collections.md:3127
#: ./docs/10.x/collections.md:3241
#: ./docs/11.x/collections.md:3325
#: ./docs/master/collections.md:3241
msgid "`whereInstanceOf()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:2993
#: ./docs/9.x/collections.md:3129
#: ./docs/10.x/collections.md:3243
#: ./docs/11.x/collections.md:3327
#: ./docs/master/collections.md:3243
msgid "The `whereInstanceOf` method filters the collection by a given class type:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:2995
#: ./docs/9.x/collections.md:3131
#: ./docs/10.x/collections.md:3245
#: ./docs/11.x/collections.md:3329
#: ./docs/master/collections.md:3245
msgid ""
"use App\\Models\\User;\n"
"use App\\Models\\Post;\n"
"\n"
"$collection = collect([\n"
"    new User,\n"
"    new User,\n"
"    new Post,\n"
"]);\n"
"\n"
"$filtered = $collection->whereInstanceOf(User::class);\n"
"\n"
"$filtered->all();\n"
"\n"
"// [App\\Models\\User, App\\Models\\User]"
msgstr ""

# P
#: ./docs/8.x/collections.md:3010
#: ./docs/9.x/collections.md:3146
#: ./docs/10.x/collections.md:3260
#: ./docs/11.x/collections.md:3344
#: ./docs/master/collections.md:3260
#~ msgid "<a name=\"method-wherenotbetween\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3011
#: ./docs/9.x/collections.md:3147
#: ./docs/10.x/collections.md:3261
#: ./docs/11.x/collections.md:3345
#: ./docs/master/collections.md:3261
msgid "`whereNotBetween()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3013
#: ./docs/9.x/collections.md:3149
#: ./docs/10.x/collections.md:3263
#: ./docs/11.x/collections.md:3347
#: ./docs/master/collections.md:3263
msgid "The `whereNotBetween` method filters the collection by determining if a specified item value is outside of a given range:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3015
#: ./docs/9.x/collections.md:3151
#: ./docs/10.x/collections.md:3265
#: ./docs/11.x/collections.md:3349
#: ./docs/master/collections.md:3265
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 80],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Pencil', 'price' => 30],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNotBetween('price', [100, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Chair', 'price' => 80],\n"
"        ['product' => 'Pencil', 'price' => 30],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3022
#: ./docs/11.x/collections.md:3106
#: ./docs/master/collections.md:3022
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(true, function (Collection $collection, int $value) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->when(false, function (Collection $collection, int $value) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4]"
msgstr ""

# P
#: ./docs/8.x/collections.md:3034
#: ./docs/9.x/collections.md:3170
#: ./docs/10.x/collections.md:3284
#: ./docs/11.x/collections.md:3368
#: ./docs/master/collections.md:3284
#~ msgid "<a name=\"method-wherenotin\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3035
#: ./docs/9.x/collections.md:3171
#: ./docs/10.x/collections.md:3285
#: ./docs/11.x/collections.md:3369
#: ./docs/master/collections.md:3285
msgid "`whereNotIn()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3037
#: ./docs/9.x/collections.md:3173
#: ./docs/10.x/collections.md:3287
#: ./docs/11.x/collections.md:3371
#: ./docs/master/collections.md:3287
msgid "The `whereNotIn` method removes elements from the collection that have a specified item value that is contained within the given array:"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3038
#: ./docs/11.x/collections.md:3122
#: ./docs/master/collections.md:3038
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(false, function (Collection $collection, int $value) {\n"
"    return $collection->push(4);\n"
"}, function (Collection $collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3039
#: ./docs/9.x/collections.md:3175
#: ./docs/10.x/collections.md:3289
#: ./docs/11.x/collections.md:3373
#: ./docs/master/collections.md:3289
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNotIn('price', [150, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]\n"
"*/"
msgstr ""

# P
#: ./docs/9.x/collections.md:3047
#: ./docs/10.x/collections.md:3161
#: ./docs/11.x/collections.md:3245
#: ./docs/master/collections.md:3161
msgid "Optionally, you may pass a comparison operator as the second parameter. Supported operators are: '===', '!==', '!=', '==', '=', '<>', '>', '<', '>=', and '<=':"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3057
#: ./docs/11.x/collections.md:3141
#: ./docs/master/collections.md:3057
msgid ""
"$collection = collect(['Michael', 'Tom']);\n"
"\n"
"$collection->whenEmpty(function (Collection $collection) {\n"
"    return $collection->push('Adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Michael', 'Tom']\n"
"\n"
"\n"
"$collection = collect();\n"
"\n"
"$collection->whenEmpty(function (Collection $collection) {\n"
"    return $collection->push('Adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Adam']"
msgstr ""

# P
#: ./docs/8.x/collections.md:3057
#: ./docs/9.x/collections.md:3193
#: ./docs/10.x/collections.md:3307
#: ./docs/11.x/collections.md:3391
#: ./docs/master/collections.md:3307
msgid "The `whereNotIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereNotInStrict`](#method-wherenotinstrict) method to filter using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:3059
#: ./docs/9.x/collections.md:3195
#: ./docs/10.x/collections.md:3309
#: ./docs/11.x/collections.md:3393
#: ./docs/master/collections.md:3309
#~ msgid "<a name=\"method-wherenotinstrict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3060
#: ./docs/9.x/collections.md:3196
#: ./docs/10.x/collections.md:3310
#: ./docs/11.x/collections.md:3394
#: ./docs/master/collections.md:3310
msgid "`whereNotInStrict()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3062
#: ./docs/9.x/collections.md:3198
#: ./docs/10.x/collections.md:3312
#: ./docs/11.x/collections.md:3396
#: ./docs/master/collections.md:3312
msgid "This method has the same signature as the [`whereNotIn`](#method-wherenotin) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# P
#: ./docs/8.x/collections.md:3064
#: ./docs/9.x/collections.md:3200
#: ./docs/10.x/collections.md:3314
#: ./docs/11.x/collections.md:3398
#: ./docs/master/collections.md:3314
#~ msgid "<a name=\"method-wherenotnull\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3065
#: ./docs/9.x/collections.md:3201
#: ./docs/10.x/collections.md:3315
#: ./docs/11.x/collections.md:3399
#: ./docs/master/collections.md:3315
msgid "`whereNotNull()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3067
#: ./docs/9.x/collections.md:3203
#: ./docs/10.x/collections.md:3317
#: ./docs/11.x/collections.md:3401
#: ./docs/master/collections.md:3317
msgid "The `whereNotNull` method returns items from the collection where the given key is not `null`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3069
#: ./docs/9.x/collections.md:3205
#: ./docs/10.x/collections.md:3319
#: ./docs/11.x/collections.md:3403
#: ./docs/master/collections.md:3319
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk'],\n"
"    ['name' => null],\n"
"    ['name' => 'Bookcase'],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNotNull('name');\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Bookcase'],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3080
#: ./docs/11.x/collections.md:3164
#: ./docs/master/collections.md:3080
msgid ""
"$collection = collect(['Michael', 'Tom']);\n"
"\n"
"$collection->whenEmpty(function (Collection $collection) {\n"
"    return $collection->push('Adam');\n"
"}, function (Collection $collection) {\n"
"    return $collection->push('Taylor');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Michael', 'Tom', 'Taylor']"
msgstr ""

# P
#: ./docs/8.x/collections.md:3086
#: ./docs/9.x/collections.md:3222
#: ./docs/10.x/collections.md:3336
#: ./docs/11.x/collections.md:3420
#: ./docs/master/collections.md:3336
#~ msgid "<a name=\"method-wherenull\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3087
#: ./docs/9.x/collections.md:3223
#: ./docs/10.x/collections.md:3337
#: ./docs/11.x/collections.md:3421
#: ./docs/master/collections.md:3337
msgid "`whereNull()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3089
#: ./docs/9.x/collections.md:3225
#: ./docs/10.x/collections.md:3339
#: ./docs/11.x/collections.md:3423
#: ./docs/master/collections.md:3339
msgid "The `whereNull` method returns items from the collection where the given key is `null`:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3091
#: ./docs/9.x/collections.md:3227
#: ./docs/10.x/collections.md:3341
#: ./docs/11.x/collections.md:3425
#: ./docs/master/collections.md:3341
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk'],\n"
"    ['name' => null],\n"
"    ['name' => 'Bookcase'],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNull('name');\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => null],\n"
"    ]\n"
"*/"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3099
#: ./docs/11.x/collections.md:3183
#: ./docs/master/collections.md:3099
msgid ""
"$collection = collect(['michael', 'tom']);\n"
"\n"
"$collection->whenNotEmpty(function (Collection $collection) {\n"
"    return $collection->push('adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['michael', 'tom', 'adam']\n"
"\n"
"\n"
"$collection = collect();\n"
"\n"
"$collection->whenNotEmpty(function (Collection $collection) {\n"
"    return $collection->push('adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// []"
msgstr ""

# P
#: ./docs/8.x/collections.md:3108
#: ./docs/9.x/collections.md:3244
#: ./docs/10.x/collections.md:3358
#: ./docs/11.x/collections.md:3441
#: ./docs/master/collections.md:3358
#~ msgid "<a name=\"method-wrap\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3109
#: ./docs/9.x/collections.md:3245
#: ./docs/10.x/collections.md:3359
#: ./docs/11.x/collections.md:3442
#: ./docs/master/collections.md:3359
msgid "`wrap()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3111
#: ./docs/9.x/collections.md:3247
#: ./docs/10.x/collections.md:3361
#: ./docs/11.x/collections.md:3444
#: ./docs/master/collections.md:3361
msgid "The static `wrap` method wraps the given value in a collection when applicable:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3113
#: ./docs/9.x/collections.md:3249
#: ./docs/10.x/collections.md:3363
#: ./docs/11.x/collections.md:3446
#: ./docs/master/collections.md:3363
msgid ""
"use Illuminate\\Support\\Collection;\n"
"\n"
"$collection = Collection::wrap('John Doe');\n"
"\n"
"$collection->all();\n"
"\n"
"// ['John Doe']\n"
"\n"
"$collection = Collection::wrap(['John Doe']);\n"
"\n"
"$collection->all();\n"
"\n"
"// ['John Doe']\n"
"\n"
"$collection = Collection::wrap(collect('John Doe'));\n"
"\n"
"$collection->all();\n"
"\n"
"// ['John Doe']"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3122
#: ./docs/11.x/collections.md:3206
#: ./docs/master/collections.md:3122
msgid ""
"$collection = collect();\n"
"\n"
"$collection->whenNotEmpty(function (Collection $collection) {\n"
"    return $collection->push('adam');\n"
"}, function (Collection $collection) {\n"
"    return $collection->push('taylor');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['taylor']"
msgstr ""

# P
#: ./docs/8.x/collections.md:3133
#: ./docs/9.x/collections.md:3269
#: ./docs/10.x/collections.md:3383
#: ./docs/11.x/collections.md:3466
#: ./docs/master/collections.md:3383
#~ msgid "<a name=\"method-zip\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3134
#: ./docs/9.x/collections.md:3270
#: ./docs/10.x/collections.md:3384
#: ./docs/11.x/collections.md:3467
#: ./docs/master/collections.md:3384
msgid "`zip()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3136
#: ./docs/9.x/collections.md:3272
#: ./docs/10.x/collections.md:3386
#: ./docs/11.x/collections.md:3469
#: ./docs/master/collections.md:3386
msgid "The `zip` method merges together the values of the given array with the values of the original collection at their corresponding index:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3138
#: ./docs/9.x/collections.md:3274
#: ./docs/10.x/collections.md:3388
#: ./docs/11.x/collections.md:3471
#: ./docs/master/collections.md:3388
msgid ""
"$collection = collect(['Chair', 'Desk']);\n"
"\n"
"$zipped = $collection->zip([100, 200]);\n"
"\n"
"$zipped->all();\n"
"\n"
"// [['Chair', 100], ['Desk', 200]]"
msgstr ""

# P
#: ./docs/8.x/collections.md:3146
#: ./docs/9.x/collections.md:3282
#: ./docs/10.x/collections.md:3396
#: ./docs/11.x/collections.md:3479
#: ./docs/master/collections.md:3396
#~ msgid "<a name=\"higher-order-messages\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/collections.md:3147
#: ./docs/9.x/collections.md:3283
#: ./docs/10.x/collections.md:3397
#: ./docs/11.x/collections.md:3480
#: ./docs/master/collections.md:3397
msgid "Higher Order Messages"
msgstr ""

# P
#: ./docs/8.x/collections.md:3149
#: ./docs/9.x/collections.md:3285
#: ./docs/10.x/collections.md:3399
#: ./docs/11.x/collections.md:3482
#: ./docs/master/collections.md:3399
msgid "Collections also provide support for \"higher order messages\", which are short-cuts for performing common actions on collections. The collection methods that provide higher order messages are: [`average`](#method-average), [`avg`](#method-avg), [`contains`](#method-contains), [`each`](#method-each), [`every`](#method-every), [`filter`](#method-filter), [`first`](#method-first), [`flatMap`](#method-flatmap), [`groupBy`](#method-groupby), [`keyBy`](#method-keyby), [`map`](#method-map), [`max`](#method-max), [`min`](#method-min), [`partition`](#method-partition), [`reject`](#method-reject), [`skipUntil`](#method-skipuntil), [`skipWhile`](#method-skipwhile), [`some`](#method-some), [`sortBy`](#method-sortby), [`sortByDesc`](#method-sortbydesc), [`sum`](#method-sum), [`takeUntil`](#method-takeuntil), [`takeWhile`](#method-takewhile), and [`unique`](#method-unique)."
msgstr ""

# P
#: ./docs/8.x/collections.md:3151
#: ./docs/9.x/collections.md:3287
#: ./docs/10.x/collections.md:3401
#: ./docs/11.x/collections.md:3484
#: ./docs/master/collections.md:3401
msgid "Each higher order message can be accessed as a dynamic property on a collection instance. For instance, let's use the `each` higher order message to call a method on each object within a collection:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3153
#: ./docs/9.x/collections.md:3289
#: ./docs/10.x/collections.md:3403
#: ./docs/11.x/collections.md:3486
#: ./docs/master/collections.md:3403
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('votes', '>', 500)->get();\n"
"\n"
"$users->each->markAsVip();"
msgstr ""

# P
#: ./docs/8.x/collections.md:3159
#: ./docs/9.x/collections.md:3295
#: ./docs/10.x/collections.md:3409
#: ./docs/11.x/collections.md:3492
#: ./docs/master/collections.md:3409
msgid "Likewise, we can use the `sum` higher order message to gather the total number of \"votes\" for a collection of users:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3161
#: ./docs/9.x/collections.md:3297
#: ./docs/10.x/collections.md:3411
#: ./docs/11.x/collections.md:3494
#: ./docs/master/collections.md:3411
msgid ""
"$users = User::where('group', 'Development')->get();\n"
"\n"
"return $users->sum->votes;"
msgstr ""

# P
#: ./docs/8.x/collections.md:3165
#: ./docs/9.x/collections.md:3301
#: ./docs/10.x/collections.md:3415
#: ./docs/11.x/collections.md:3498
#: ./docs/master/collections.md:3415
#~ msgid "<a name=\"lazy-collections\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/collections.md:3166
#: ./docs/9.x/collections.md:3302
#: ./docs/10.x/collections.md:3416
#: ./docs/11.x/collections.md:3499
#: ./docs/master/collections.md:3416
msgid "Lazy Collections"
msgstr ""

# P
#: ./docs/8.x/collections.md:3168
#: ./docs/9.x/collections.md:3304
#: ./docs/10.x/collections.md:3418
#: ./docs/11.x/collections.md:3501
#: ./docs/master/collections.md:3418
#~ msgid "<a name=\"lazy-collection-introduction\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/collections.md:3171
#: ./docs/9.x/collections.md:3308
#: ./docs/10.x/collections.md:3422
#: ./docs/11.x/collections.md:3505
#: ./docs/master/collections.md:3422
msgid "Before learning more about Laravel's lazy collections, take some time to familiarize yourself with [PHP generators](https://www.php.net/manual/en/language.generators.overview.php)."
msgstr ""

# P
#: ./docs/8.x/collections.md:3173
#: ./docs/9.x/collections.md:3310
#: ./docs/10.x/collections.md:3424
#: ./docs/11.x/collections.md:3507
#: ./docs/master/collections.md:3424
msgid "To supplement the already powerful `Collection` class, the `LazyCollection` class leverages PHP's [generators](https://www.php.net/manual/en/language.generators.overview.php) to allow you to work with very large datasets while keeping memory usage low."
msgstr ""

# P
#: ./docs/8.x/collections.md:3175
#: ./docs/9.x/collections.md:3312
#: ./docs/10.x/collections.md:3426
#: ./docs/11.x/collections.md:3509
#: ./docs/master/collections.md:3426
msgid "For example, imagine your application needs to process a multi-gigabyte log file while taking advantage of Laravel's collection methods to parse the logs. Instead of reading the entire file into memory at once, lazy collections may be used to keep only a small part of the file in memory at a given time:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3177
#: ./docs/9.x/collections.md:3314
msgid ""
"use App\\Models\\LogEntry;\n"
"use Illuminate\\Support\\LazyCollection;\n"
"\n"
"LazyCollection::make(function () {\n"
"    $handle = fopen('log.txt', 'r');\n"
"\n"
"    while (($line = fgets($handle)) !== false) {\n"
"        yield $line;\n"
"    }\n"
"})->chunk(4)->map(function ($lines) {\n"
"    return LogEntry::fromLines($lines);\n"
"})->each(function (LogEntry $logEntry) {\n"
"    // Process the log entry...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:3192
#: ./docs/9.x/collections.md:3329
#: ./docs/10.x/collections.md:3443
#: ./docs/11.x/collections.md:3526
#: ./docs/master/collections.md:3443
msgid "Or, imagine you need to iterate through 10,000 Eloquent models. When using traditional Laravel collections, all 10,000 Eloquent models must be loaded into memory at the same time:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3194
#: ./docs/9.x/collections.md:3331
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::all()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:3200
#: ./docs/9.x/collections.md:3337
#: ./docs/10.x/collections.md:3451
#: ./docs/11.x/collections.md:3534
#: ./docs/master/collections.md:3451
msgid "However, the query builder's `cursor` method returns a `LazyCollection` instance. This allows you to still only run a single query against the database but also only keep one Eloquent model loaded in memory at a time. In this example, the `filter` callback is not executed until we actually iterate over each user individually, allowing for a drastic reduction in memory usage:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3202
#: ./docs/9.x/collections.md:3339
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3212
#: ./docs/9.x/collections.md:3349
#: ./docs/10.x/collections.md:3463
#: ./docs/11.x/collections.md:3546
#: ./docs/master/collections.md:3463
#~ msgid "<a name=\"creating-lazy-collections\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/collections.md:3213
#: ./docs/9.x/collections.md:3350
#: ./docs/10.x/collections.md:3464
#: ./docs/11.x/collections.md:3547
#: ./docs/master/collections.md:3464
msgid "Creating Lazy Collections"
msgstr ""

# P
#: ./docs/8.x/collections.md:3215
#: ./docs/9.x/collections.md:3352
#: ./docs/10.x/collections.md:3466
#: ./docs/11.x/collections.md:3549
#: ./docs/master/collections.md:3466
msgid "To create a lazy collection instance, you should pass a PHP generator function to the collection's `make` method:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3217
#: ./docs/9.x/collections.md:3354
#: ./docs/10.x/collections.md:3468
#: ./docs/11.x/collections.md:3551
#: ./docs/master/collections.md:3468
msgid ""
"use Illuminate\\Support\\LazyCollection;\n"
"\n"
"LazyCollection::make(function () {\n"
"    $handle = fopen('log.txt', 'r');\n"
"\n"
"    while (($line = fgets($handle)) !== false) {\n"
"        yield $line;\n"
"    }\n"
"});"
msgstr ""

# P
#: ./docs/8.x/collections.md:3227
#: ./docs/9.x/collections.md:3364
#: ./docs/10.x/collections.md:3478
#: ./docs/11.x/collections.md:3561
#: ./docs/master/collections.md:3478
#~ msgid "<a name=\"the-enumerable-contract\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/collections.md:3228
#: ./docs/9.x/collections.md:3365
#: ./docs/10.x/collections.md:3479
#: ./docs/11.x/collections.md:3562
#: ./docs/master/collections.md:3479
msgid "The Enumerable Contract"
msgstr ""

# P
#: ./docs/8.x/collections.md:3230
#: ./docs/9.x/collections.md:3367
#: ./docs/10.x/collections.md:3481
#: ./docs/11.x/collections.md:3564
#: ./docs/master/collections.md:3481
msgid "Almost all methods available on the `Collection` class are also available on the `LazyCollection` class. Both of these classes implement the `Illuminate\\Support\\Enumerable` contract, which defines the following methods:"
msgstr ""

# P
#: ./docs/8.x/collections.md:3234
msgid ""
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffKeys](#method-diffkeys)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[pipe](#method-pipe)\n"
"[pluck](#method-pluck)\n"
"[random](#method-random)\n"
"[reduce](#method-reduce)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[shuffle](#method-shuffle)\n"
"[skip](#method-skip)\n"
"[slice](#method-slice)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[split](#method-split)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# P
#: ./docs/8.x/collections.md:3345
#: ./docs/9.x/collections.md:3498
#: ./docs/10.x/collections.md:3613
#: ./docs/11.x/collections.md:3696
#: ./docs/master/collections.md:3613
msgid "Methods that mutate the collection (such as `shift`, `pop`, `prepend` etc.) are **not** available on the `LazyCollection` class."
msgstr ""

# P
#: ./docs/8.x/collections.md:3347
#: ./docs/9.x/collections.md:3500
#: ./docs/10.x/collections.md:3615
#: ./docs/11.x/collections.md:3698
#: ./docs/master/collections.md:3615
#~ msgid "<a name=\"lazy-collection-methods\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/collections.md:3348
#: ./docs/9.x/collections.md:3501
#: ./docs/10.x/collections.md:3616
#: ./docs/11.x/collections.md:3699
#: ./docs/master/collections.md:3616
msgid "Lazy Collection Methods"
msgstr ""

# P
#: ./docs/8.x/collections.md:3350
#: ./docs/9.x/collections.md:3503
#: ./docs/10.x/collections.md:3618
#: ./docs/11.x/collections.md:3701
#: ./docs/master/collections.md:3618
msgid "In addition to the methods defined in the `Enumerable` contract, the `LazyCollection` class contains the following methods:"
msgstr ""

# P
#: ./docs/8.x/collections.md:3352
#: ./docs/9.x/collections.md:3505
#: ./docs/10.x/collections.md:3620
#: ./docs/11.x/collections.md:3703
#: ./docs/master/collections.md:3620
#~ msgid "<a name=\"method-takeUntilTimeout\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3353
#: ./docs/9.x/collections.md:3506
#: ./docs/10.x/collections.md:3621
#: ./docs/11.x/collections.md:3704
#: ./docs/master/collections.md:3621
msgid "`takeUntilTimeout()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3355
#: ./docs/9.x/collections.md:3508
#: ./docs/10.x/collections.md:3623
#: ./docs/11.x/collections.md:3706
#: ./docs/master/collections.md:3623
msgid "The `takeUntilTimeout` method returns a new lazy collection that will enumerate values until the specified time. After that time, the collection will then stop enumerating:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3357
#: ./docs/9.x/collections.md:3510
msgid ""
"$lazyCollection = LazyCollection::times(INF)\n"
"    ->takeUntilTimeout(now()->addMinute());\n"
"\n"
"$lazyCollection->each(function ($number) {\n"
"    dump($number);\n"
"\n"
"    sleep(1);\n"
"});\n"
"\n"
"// 1\n"
"// 2\n"
"// ...\n"
"// 58\n"
"// 59"
msgstr ""

# P
#: ./docs/8.x/collections.md:3372
#: ./docs/9.x/collections.md:3525
#: ./docs/10.x/collections.md:3640
#: ./docs/11.x/collections.md:3723
#: ./docs/master/collections.md:3640
msgid "To illustrate the usage of this method, imagine an application that submits invoices from the database using a cursor. You could define a [scheduled task](/docs/{{version}}/scheduling) that runs every 15 minutes and only processes invoices for a maximum of 14 minutes:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3374
#: ./docs/9.x/collections.md:3527
msgid ""
"use App\\Models\\Invoice;\n"
"use Illuminate\\Support\\Carbon;\n"
"\n"
"Invoice::pending()->cursor()\n"
"    ->takeUntilTimeout(\n"
"        Carbon::createFromTimestamp(LARAVEL_START)->add(14, 'minutes')\n"
"    )\n"
"    ->each(fn ($invoice) => $invoice->submit());"
msgstr ""

# P
#: ./docs/8.x/collections.md:3383
#: ./docs/9.x/collections.md:3536
#: ./docs/10.x/collections.md:3651
#: ./docs/11.x/collections.md:3734
#: ./docs/master/collections.md:3651
#~ msgid "<a name=\"method-tapEach\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3384
#: ./docs/9.x/collections.md:3537
#: ./docs/10.x/collections.md:3652
#: ./docs/11.x/collections.md:3735
#: ./docs/master/collections.md:3652
msgid "`tapEach()` {.collection-method}"
msgstr ""

# P
#: ./docs/9.x/collections.md:3384
msgid ""
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffKeys](#method-diffkeys)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstOrFail](#method-first-or-fail)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[pipe](#method-pipe)\n"
"[pluck](#method-pluck)\n"
"[random](#method-random)\n"
"[reduce](#method-reduce)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[shuffle](#method-shuffle)\n"
"[skip](#method-skip)\n"
"[slice](#method-slice)\n"
"[sole](#method-sole)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[split](#method-split)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# P
#: ./docs/8.x/collections.md:3386
#: ./docs/9.x/collections.md:3539
#: ./docs/10.x/collections.md:3654
#: ./docs/11.x/collections.md:3737
#: ./docs/master/collections.md:3654
msgid "While the `each` method calls the given callback for each item in the collection right away, the `tapEach` method only calls the given callback as the items are being pulled out of the list one by one:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3388
#: ./docs/9.x/collections.md:3541
msgid ""
"// Nothing has been dumped so far...\n"
"$lazyCollection = LazyCollection::times(INF)->tapEach(function ($value) {\n"
"    dump($value);\n"
"});\n"
"\n"
"// Three items are dumped...\n"
"$array = $lazyCollection->take(3)->all();\n"
"\n"
"// 1\n"
"// 2\n"
"// 3"
msgstr ""

# P
#: ./docs/8.x/collections.md:3400
#: ./docs/9.x/collections.md:3553
#: ./docs/10.x/collections.md:3668
#: ./docs/11.x/collections.md:3767
#: ./docs/master/collections.md:3668
#~ msgid "<a name=\"method-remember\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/collections.md:3401
#: ./docs/9.x/collections.md:3554
#: ./docs/10.x/collections.md:3669
#: ./docs/11.x/collections.md:3768
#: ./docs/master/collections.md:3669
msgid "`remember()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/collections.md:3403
#: ./docs/9.x/collections.md:3556
#: ./docs/10.x/collections.md:3671
#: ./docs/11.x/collections.md:3770
#: ./docs/master/collections.md:3671
msgid "The `remember` method returns a new lazy collection that will remember any values that have already been enumerated and will not retrieve them again on subsequent collection enumerations:"
msgstr ""

# CODE
#: ./docs/8.x/collections.md:3405
#: ./docs/9.x/collections.md:3558
#: ./docs/10.x/collections.md:3673
#: ./docs/11.x/collections.md:3772
#: ./docs/master/collections.md:3673
msgid ""
"// No query has been executed yet...\n"
"$users = User::cursor()->remember();\n"
"\n"
"// The query is executed...\n"
"// The first 5 users are hydrated from the database...\n"
"$users->take(5)->all();\n"
"\n"
"// First 5 users come from the collection's cache...\n"
"// The rest are hydrated from the database...\n"
"$users->take(20)->all();"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3428
#: ./docs/11.x/collections.md:3511
#: ./docs/master/collections.md:3428
msgid ""
"use App\\Models\\LogEntry;\n"
"use Illuminate\\Support\\LazyCollection;\n"
"\n"
"LazyCollection::make(function () {\n"
"    $handle = fopen('log.txt', 'r');\n"
"\n"
"    while (($line = fgets($handle)) !== false) {\n"
"        yield $line;\n"
"    }\n"
"})->chunk(4)->map(function (array $lines) {\n"
"    return LogEntry::fromLines($lines);\n"
"})->each(function (LogEntry $logEntry) {\n"
"    // Process the log entry...\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3445
#: ./docs/11.x/collections.md:3528
#: ./docs/master/collections.md:3445
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::all()->filter(function (User $user) {\n"
"    return $user->id > 500;\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3453
#: ./docs/11.x/collections.md:3536
#: ./docs/master/collections.md:3453
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::cursor()->filter(function (User $user) {\n"
"    return $user->id > 500;\n"
"});\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}"
msgstr ""

# P
#: ./docs/10.x/collections.md:3498
#: ./docs/11.x/collections.md:3581
#: ./docs/master/collections.md:3498
msgid ""
"[all](#method-all)\n"
"[average](#method-average)\n"
"[avg](#method-avg)\n"
"[chunk](#method-chunk)\n"
"[chunkWhile](#method-chunkwhile)\n"
"[collapse](#method-collapse)\n"
"[collect](#method-collect)\n"
"[combine](#method-combine)\n"
"[concat](#method-concat)\n"
"[contains](#method-contains)\n"
"[containsStrict](#method-containsstrict)\n"
"[count](#method-count)\n"
"[countBy](#method-countBy)\n"
"[crossJoin](#method-crossjoin)\n"
"[dd](#method-dd)\n"
"[diff](#method-diff)\n"
"[diffAssoc](#method-diffassoc)\n"
"[diffKeys](#method-diffkeys)\n"
"[dump](#method-dump)\n"
"[duplicates](#method-duplicates)\n"
"[duplicatesStrict](#method-duplicatesstrict)\n"
"[each](#method-each)\n"
"[eachSpread](#method-eachspread)\n"
"[every](#method-every)\n"
"[except](#method-except)\n"
"[filter](#method-filter)\n"
"[first](#method-first)\n"
"[firstOrFail](#method-first-or-fail)\n"
"[firstWhere](#method-first-where)\n"
"[flatMap](#method-flatmap)\n"
"[flatten](#method-flatten)\n"
"[flip](#method-flip)\n"
"[forPage](#method-forpage)\n"
"[get](#method-get)\n"
"[groupBy](#method-groupby)\n"
"[has](#method-has)\n"
"[implode](#method-implode)\n"
"[intersect](#method-intersect)\n"
"[intersectAssoc](#method-intersectAssoc)\n"
"[intersectByKeys](#method-intersectbykeys)\n"
"[isEmpty](#method-isempty)\n"
"[isNotEmpty](#method-isnotempty)\n"
"[join](#method-join)\n"
"[keyBy](#method-keyby)\n"
"[keys](#method-keys)\n"
"[last](#method-last)\n"
"[macro](#method-macro)\n"
"[make](#method-make)\n"
"[map](#method-map)\n"
"[mapInto](#method-mapinto)\n"
"[mapSpread](#method-mapspread)\n"
"[mapToGroups](#method-maptogroups)\n"
"[mapWithKeys](#method-mapwithkeys)\n"
"[max](#method-max)\n"
"[median](#method-median)\n"
"[merge](#method-merge)\n"
"[mergeRecursive](#method-mergerecursive)\n"
"[min](#method-min)\n"
"[mode](#method-mode)\n"
"[nth](#method-nth)\n"
"[only](#method-only)\n"
"[pad](#method-pad)\n"
"[partition](#method-partition)\n"
"[pipe](#method-pipe)\n"
"[pluck](#method-pluck)\n"
"[random](#method-random)\n"
"[reduce](#method-reduce)\n"
"[reject](#method-reject)\n"
"[replace](#method-replace)\n"
"[replaceRecursive](#method-replacerecursive)\n"
"[reverse](#method-reverse)\n"
"[search](#method-search)\n"
"[shuffle](#method-shuffle)\n"
"[skip](#method-skip)\n"
"[slice](#method-slice)\n"
"[sole](#method-sole)\n"
"[some](#method-some)\n"
"[sort](#method-sort)\n"
"[sortBy](#method-sortby)\n"
"[sortByDesc](#method-sortbydesc)\n"
"[sortKeys](#method-sortkeys)\n"
"[sortKeysDesc](#method-sortkeysdesc)\n"
"[split](#method-split)\n"
"[sum](#method-sum)\n"
"[take](#method-take)\n"
"[tap](#method-tap)\n"
"[times](#method-times)\n"
"[toArray](#method-toarray)\n"
"[toJson](#method-tojson)\n"
"[union](#method-union)\n"
"[unique](#method-unique)\n"
"[uniqueStrict](#method-uniquestrict)\n"
"[unless](#method-unless)\n"
"[unlessEmpty](#method-unlessempty)\n"
"[unlessNotEmpty](#method-unlessnotempty)\n"
"[unwrap](#method-unwrap)\n"
"[values](#method-values)\n"
"[when](#method-when)\n"
"[whenEmpty](#method-whenempty)\n"
"[whenNotEmpty](#method-whennotempty)\n"
"[where](#method-where)\n"
"[whereStrict](#method-wherestrict)\n"
"[whereBetween](#method-wherebetween)\n"
"[whereIn](#method-wherein)\n"
"[whereInStrict](#method-whereinstrict)\n"
"[whereInstanceOf](#method-whereinstanceof)\n"
"[whereNotBetween](#method-wherenotbetween)\n"
"[whereNotIn](#method-wherenotin)\n"
"[whereNotInStrict](#method-wherenotinstrict)\n"
"[wrap](#method-wrap)\n"
"[zip](#method-zip)"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3625
#: ./docs/11.x/collections.md:3708
#: ./docs/master/collections.md:3625
msgid ""
"$lazyCollection = LazyCollection::times(INF)\n"
"    ->takeUntilTimeout(now()->addMinute());\n"
"\n"
"$lazyCollection->each(function (int $number) {\n"
"    dump($number);\n"
"\n"
"    sleep(1);\n"
"});\n"
"\n"
"// 1\n"
"// 2\n"
"// ...\n"
"// 58\n"
"// 59"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3642
#: ./docs/11.x/collections.md:3725
#: ./docs/master/collections.md:3642
msgid ""
"use App\\Models\\Invoice;\n"
"use Illuminate\\Support\\Carbon;\n"
"\n"
"Invoice::pending()->cursor()\n"
"    ->takeUntilTimeout(\n"
"        Carbon::createFromTimestamp(LARAVEL_START)->add(14, 'minutes')\n"
"    )\n"
"    ->each(fn (Invoice $invoice) => $invoice->submit());"
msgstr ""

# CODE
#: ./docs/10.x/collections.md:3656
#: ./docs/11.x/collections.md:3739
#: ./docs/master/collections.md:3656
msgid ""
"// Nothing has been dumped so far...\n"
"$lazyCollection = LazyCollection::times(INF)->tapEach(function (int $value) {\n"
"    dump($value);\n"
"});\n"
"\n"
"// Three items are dumped...\n"
"$array = $lazyCollection->take(3)->all();\n"
"\n"
"// 1\n"
"// 2\n"
"// 3"
msgstr ""

# P
#: ./docs/11.x/collections.md:3751
#~ msgid "<a name=\"method-throttle\"></a>"
#~ msgstr ""

# H4
#: ./docs/11.x/collections.md:3752
msgid "`throttle()` {.collection-method}"
msgstr ""

# P
#: ./docs/11.x/collections.md:3754
msgid "The `throttle` method will throttle the lazy collection such that each value is returned after the specified number of seconds. This method is especially useful for situations where you may be interacting with external APIs that rate limit incoming requests:"
msgstr ""

# CODE: php
#: ./docs/11.x/collections.md:3756
msgid ""
"use App\\Models\\User;\n"
"\n"
"User::where('vip', true)\n"
"    ->cursor()\n"
"    ->throttle(seconds: 1)\n"
"    ->each(function (User $user) {\n"
"        // Call external API...\n"
"    });"
msgstr ""
