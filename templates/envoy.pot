#
msgid ""
msgstr ""

#: docs/8.x/envoy.md:block 1 (header)
msgid "Laravel Envoy"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Writing Tasks](#writing-tasks)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Defining Tasks](#defining-tasks)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Multiple Servers](#multiple-servers)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Setup](#setup)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Variables](#variables)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Stories](#stories)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Hooks](#completion-hooks)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Running Tasks](#running-tasks)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Confirming Task Execution](#confirming-task-execution)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Notifications](#notifications)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Slack](#slack)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Discord](#discord)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Telegram](#telegram)"
msgstr ""

#: docs/8.x/envoy.md:block 2 (unordered list)
msgid "[Microsoft Teams](#microsoft-teams)"
msgstr ""

#: docs/8.x/envoy.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/envoy.md:block 5 (paragraph)
msgid "[Laravel Envoy](https://github.com/laravel/envoy) is a tool for executing common tasks you run on your remote servers. Using [Blade](/docs/{{version}}/blade) style syntax, you can easily setup tasks for deployment, Artisan commands, and more. Currently, Envoy only supports the Mac and Linux operating systems. However, Windows support is achievable using [WSL2](https://docs.microsoft.com/en-us/windows/wsl/install-win10)."
msgstr ""

#: docs/8.x/envoy.md:block 7 (header)
msgid "Installation"
msgstr ""

#: docs/8.x/envoy.md:block 8 (paragraph)
msgid "First, install Envoy into your project using the Composer package manager:"
msgstr ""

#: docs/8.x/envoy.md:block 9 (code)
msgid "composer require laravel/envoy --dev\n"
msgstr ""

#: docs/8.x/envoy.md:block 10 (paragraph)
msgid "Once Envoy has been installed, the Envoy binary will be available in your application's `vendor/bin` directory:"
msgstr ""

#: docs/8.x/envoy.md:block 11 (code)
msgid "php vendor/bin/envoy\n"
msgstr ""

#: docs/8.x/envoy.md:block 13 (header)
msgid "Writing Tasks"
msgstr ""

#: docs/8.x/envoy.md:block 15 (header)
msgid "Defining Tasks"
msgstr ""

#: docs/8.x/envoy.md:block 16 (paragraph)
msgid "Tasks are the basic building block of Envoy. Tasks define the shell commands that should execute on your remote servers when the task is invoked. For example, you might define a task that executes the `php artisan queue:restart` command on all of your application's queue worker servers."
msgstr ""

#: docs/8.x/envoy.md:block 17 (paragraph)
msgid "All of your Envoy tasks should be defined in an `Envoy.blade.php` file at the root of your application. Here's an example to get you started:"
msgstr ""

#: docs/8.x/envoy.md:block 18 (code)
msgid ""
"@servers(['web' => ['user@192.168.1.1'], 'workers' => ['user@192.168.1.2']])\n"
"\n"
"@task('restart-queues', ['on' => 'workers'])\n"
"    cd /home/user/example.com\n"
"    php artisan queue:restart\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 19 (paragraph)
msgid "As you can see, an array of `@servers` is defined at the top of the file, allowing you to reference these servers via the `on` option of your task declarations. The `@servers` declaration should always be placed on a single line. Within your `@task` declarations, you should place the shell commands that should execute on your servers when the task is invoked."
msgstr ""

#: docs/8.x/envoy.md:block 21 (header)
msgid "Local Tasks"
msgstr ""

#: docs/8.x/envoy.md:block 22 (paragraph)
msgid "You can force a script to run on your local computer by specifying the server's IP address as `127.0.0.1`:"
msgstr ""

#: docs/8.x/envoy.md:block 23 (code)
msgid "@servers(['localhost' => '127.0.0.1'])\n"
msgstr ""

#: docs/8.x/envoy.md:block 25 (header)
msgid "Importing Envoy Tasks"
msgstr ""

#: docs/8.x/envoy.md:block 26 (paragraph)
msgid "Using the `@import` directive, you may import other Envoy files so their stories and tasks are added to yours. After the files have been imported, you may execute the tasks they contain as if they were defined in your own Envoy file:"
msgstr ""

#: docs/8.x/envoy.md:block 27 (code)
msgid "@import('vendor/package/Envoy.blade.php')\n"
msgstr ""

#: docs/8.x/envoy.md:block 29 (header)
msgid "Multiple Servers"
msgstr ""

#: docs/8.x/envoy.md:block 30 (paragraph)
msgid "Envoy allows you to easily run a task across multiple servers. First, add additional servers to your `@servers` declaration. Each server should be assigned a unique name. Once you have defined your additional servers you may list each of the servers in the task's `on` array:"
msgstr ""

#: docs/8.x/envoy.md:block 31 (code)
msgid ""
"@servers(['web-1' => '192.168.1.1', 'web-2' => '192.168.1.2'])\n"
"\n"
"@task('deploy', ['on' => ['web-1', 'web-2']])\n"
"    cd /home/user/example.com\n"
"    git pull origin {{ $branch }}\n"
"    php artisan migrate --force\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 33 (header)
msgid "Parallel Execution"
msgstr ""

#: docs/8.x/envoy.md:block 34 (paragraph)
msgid "By default, tasks will be executed on each server serially. In other words, a task will finish running on the first server before proceeding to execute on the second server. If you would like to run a task across multiple servers in parallel, add the `parallel` option to your task declaration:"
msgstr ""

#: docs/8.x/envoy.md:block 35 (code)
msgid ""
"@servers(['web-1' => '192.168.1.1', 'web-2' => '192.168.1.2'])\n"
"\n"
"@task('deploy', ['on' => ['web-1', 'web-2'], 'parallel' => true])\n"
"    cd /home/user/example.com\n"
"    git pull origin {{ $branch }}\n"
"    php artisan migrate --force\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 37 (header)
msgid "Setup"
msgstr ""

#: docs/8.x/envoy.md:block 38 (paragraph)
msgid "Sometimes, you may need to execute arbitrary PHP code before running your Envoy tasks. You may use the `@setup` directive to define a block of PHP code that should execute before your tasks:"
msgstr ""

#: docs/8.x/envoy.md:block 39 (code)
msgid ""
"@setup\n"
"    $now = new DateTime;\n"
"@endsetup\n"
msgstr ""

#: docs/8.x/envoy.md:block 40 (paragraph)
msgid "If you need to require other PHP files before your task is executed, you may use the `@include` directive at the top of your `Envoy.blade.php` file:"
msgstr ""

#: docs/8.x/envoy.md:block 41 (code)
msgid ""
"@include('vendor/autoload.php')\n"
"\n"
"@task('restart-queues')\n"
"    # ...\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 43 (header)
msgid "Variables"
msgstr ""

#: docs/8.x/envoy.md:block 44 (paragraph)
msgid "If needed, you may pass arguments to Envoy tasks by specifying them on the command line when invoking Envoy:"
msgstr ""

#: docs/8.x/envoy.md:block 45 (code)
msgid "php vendor/bin/envoy run deploy --branch=master\n"
msgstr ""

#: docs/8.x/envoy.md:block 46 (paragraph)
msgid "You may access the options within your tasks using Blade's \"echo\" syntax. You may also define Blade `if` statements and loops within your tasks. For example, let's verify the presence of the `$branch` variable before executing the `git pull` command:"
msgstr ""

#: docs/8.x/envoy.md:block 47 (code)
msgid ""
"@servers(['web' => ['user@192.168.1.1']])\n"
"\n"
"@task('deploy', ['on' => 'web'])\n"
"    cd /home/user/example.com\n"
"\n"
"    @if ($branch)\n"
"        git pull origin {{ $branch }}\n"
"    @endif\n"
"\n"
"    php artisan migrate --force\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 49 (header)
msgid "Stories"
msgstr ""

#: docs/8.x/envoy.md:block 50 (paragraph)
msgid "Stories group a set of tasks under a single, convenient name. For instance, a `deploy` story may run the `update-code` and `install-dependencies` tasks by listing the task names within its definition:"
msgstr ""

#: docs/8.x/envoy.md:block 51 (code)
msgid ""
"@servers(['web' => ['user@192.168.1.1']])\n"
"\n"
"@story('deploy')\n"
"    update-code\n"
"    install-dependencies\n"
"@endstory\n"
"\n"
"@task('update-code')\n"
"    cd /home/user/example.com\n"
"    git pull origin master\n"
"@endtask\n"
"\n"
"@task('install-dependencies')\n"
"    cd /home/user/example.com\n"
"    composer install\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 52 (paragraph)
msgid "Once the story has been written, you may invoke it in the same way you would invoke a task:"
msgstr ""

#: docs/8.x/envoy.md:block 53 (code)
msgid "php vendor/bin/envoy run deploy\n"
msgstr ""

#: docs/8.x/envoy.md:block 55 (header)
msgid "Hooks"
msgstr ""

#: docs/8.x/envoy.md:block 56 (paragraph)
msgid "When tasks and stories run, a number of hooks are executed. The hook types supported by Envoy are `@before`, `@after`, `@error`, `@success`, and `@finished`. All of the code in these hooks is interpreted as PHP and executed locally, not on the remote servers that your tasks interact with."
msgstr ""

#: docs/8.x/envoy.md:block 57 (paragraph)
msgid "You may define as many of each of these hooks as you like. They will be executed in the order that they appear in your Envoy script."
msgstr ""

#: docs/8.x/envoy.md:block 59 (header)
msgid "`@before`"
msgstr ""

#: docs/8.x/envoy.md:block 60 (paragraph)
msgid "Before each task execution, all of the `@before` hooks registered in your Envoy script will execute. The `@before` hooks receive the name of the task that will be executed:"
msgstr ""

#: docs/8.x/envoy.md:block 61 (code)
msgid ""
"@before\n"
"    if ($task === 'deploy') {\n"
"        // ...\n"
"    }\n"
"@endbefore\n"
msgstr ""

#: docs/8.x/envoy.md:block 63 (header)
msgid "`@after`"
msgstr ""

#: docs/8.x/envoy.md:block 64 (paragraph)
msgid "After each task execution, all of the `@after` hooks registered in your Envoy script will execute. The `@after` hooks receive the name of the task that was executed:"
msgstr ""

#: docs/8.x/envoy.md:block 65 (code)
msgid ""
"@after\n"
"    if ($task === 'deploy') {\n"
"        // ...\n"
"    }\n"
"@endafter\n"
msgstr ""

#: docs/8.x/envoy.md:block 67 (header)
msgid "`@error`"
msgstr ""

#: docs/8.x/envoy.md:block 68 (paragraph)
msgid "After every task failure (exits with a status code greater than `0`), all of the `@error` hooks registered in your Envoy script will execute. The `@error` hooks receive the name of the task that was executed:"
msgstr ""

#: docs/8.x/envoy.md:block 69 (code)
msgid ""
"@error\n"
"    if ($task === 'deploy') {\n"
"        // ...\n"
"    }\n"
"@enderror\n"
msgstr ""

#: docs/8.x/envoy.md:block 71 (header)
msgid "`@success`"
msgstr ""

#: docs/8.x/envoy.md:block 72 (paragraph)
msgid "If all tasks have executed without errors, all of the `@success` hooks registered in your Envoy script will execute:"
msgstr ""

#: docs/8.x/envoy.md:block 73 (code)
msgid ""
"@success\n"
"    // ...\n"
"@endsuccess\n"
msgstr ""

#: docs/8.x/envoy.md:block 75 (header)
msgid "`@finished`"
msgstr ""

#: docs/8.x/envoy.md:block 76 (paragraph)
msgid "After all tasks have been executed (regardless of exit status), all of the `@finished` hooks will be executed. The `@finished` hooks receive the status code of the completed task, which may be `null` or an `integer` greater than or equal to `0`:"
msgstr ""

#: docs/8.x/envoy.md:block 77 (code)
msgid ""
"@finished\n"
"    if ($exitCode > 0) {\n"
"        // There were errors in one of the tasks...\n"
"    }\n"
"@endfinished\n"
msgstr ""

#: docs/8.x/envoy.md:block 79 (header)
msgid "Running Tasks"
msgstr ""

#: docs/8.x/envoy.md:block 80 (paragraph)
msgid "To run a task or story that is defined in your application's `Envoy.blade.php` file, execute Envoy's `run` command, passing the name of the task or story you would like to execute. Envoy will execute the task and display the output from your remote servers as the task is running:"
msgstr ""

#: docs/8.x/envoy.md:block 83 (header)
msgid "Confirming Task Execution"
msgstr ""

#: docs/8.x/envoy.md:block 84 (paragraph)
msgid "If you would like to be prompted for confirmation before running a given task on your servers, you should add the `confirm` directive to your task declaration. This option is particularly useful for destructive operations:"
msgstr ""

#: docs/8.x/envoy.md:block 85 (code)
msgid ""
"@task('deploy', ['on' => 'web', 'confirm' => true])\n"
"    cd /home/user/example.com\n"
"    git pull origin {{ $branch }}\n"
"    php artisan migrate\n"
"@endtask\n"
msgstr ""

#: docs/8.x/envoy.md:block 87 (header)
msgid "Notifications"
msgstr ""

#: docs/8.x/envoy.md:block 89 (header)
msgid "Slack"
msgstr ""

#: docs/8.x/envoy.md:block 90 (paragraph)
msgid "Envoy supports sending notifications to [Slack](https://slack.com) after each task is executed. The `@slack` directive accepts a Slack hook URL and a channel / user name. You may retrieve your webhook URL by creating an \"Incoming WebHooks\" integration in your Slack control panel."
msgstr ""

#: docs/8.x/envoy.md:block 91 (paragraph)
msgid "You should pass the entire webhook URL as the first argument given to the `@slack` directive. The second argument given to the `@slack` directive should be a channel name (`#channel`) or a user name (`@user`):"
msgstr ""

#: docs/8.x/envoy.md:block 92 (code)
msgid ""
"@finished\n"
"    @slack('webhook-url', '#bots')\n"
"@endfinished\n"
msgstr ""

#: docs/8.x/envoy.md:block 93 (paragraph)
msgid "By default, Envoy notifications will send a message to the notification channel describing the task that was executed. However, you may overwrite this message with your own custom message by passing a third argument to the `@slack` directive:"
msgstr ""

#: docs/8.x/envoy.md:block 94 (code)
msgid ""
"@finished\n"
"    @slack('webhook-url', '#bots', 'Hello, Slack.')\n"
"@endfinished\n"
msgstr ""

#: docs/8.x/envoy.md:block 96 (header)
msgid "Discord"
msgstr ""

#: docs/8.x/envoy.md:block 97 (paragraph)
msgid "Envoy also supports sending notifications to [Discord](https://discord.com) after each task is executed. The `@discord` directive accepts a Discord hook URL and a message. You may retrieve your webhook URL by creating a \"Webhook\" in your Server Settings and choosing which channel the webhook should post to. You should pass the entire Webhook URL into the `@discord` directive:"
msgstr ""

#: docs/8.x/envoy.md:block 98 (code)
msgid ""
"@finished\n"
"    @discord('discord-webhook-url')\n"
"@endfinished\n"
msgstr ""

#: docs/8.x/envoy.md:block 100 (header)
msgid "Telegram"
msgstr ""

#: docs/8.x/envoy.md:block 101 (paragraph)
msgid "Envoy also supports sending notifications to [Telegram](https://telegram.org) after each task is executed. The `@telegram` directive accepts a Telegram Bot ID and a Chat ID. You may retrieve your Bot ID by creating a new bot using [BotFather](https://t.me/botfather). You can retrieve a valid Chat ID using [@username_to_id_bot](https://t.me/username_to_id_bot). You should pass the entire Bot ID and Chat ID into the `@telegram` directive:"
msgstr ""

#: docs/8.x/envoy.md:block 102 (code)
msgid ""
"@finished\n"
"    @telegram('bot-id','chat-id')\n"
"@endfinished\n"
msgstr ""

#: docs/8.x/envoy.md:block 104 (header)
msgid "Microsoft Teams"
msgstr ""

#: docs/8.x/envoy.md:block 105 (paragraph)
msgid "Envoy also supports sending notifications to [Microsoft Teams](https://www.microsoft.com/en-us/microsoft-teams) after each task is executed. The `@microsoftTeams` directive accepts a Teams Webhook (required), a message, theme color (success, info, warning, error), and an array of options. You may retrieve your Teams Webook by creating a new [incoming webhook](https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook). The Teams API has many other attributes to customize your message box like title, summary, and sections. You can find more information on the [Microsoft Teams documentation](https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using?tabs=cURL#example-of-connector-message). You should pass the entire Webhook URL into the `@microsoftTeams` directive:"
msgstr ""

#: docs/8.x/envoy.md:block 106 (code)
msgid ""
"@finished\n"
"    @microsoftTeams('webhook-url')\n"
"@endfinished\n"
msgstr ""
