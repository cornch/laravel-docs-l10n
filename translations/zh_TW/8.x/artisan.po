# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Cornch <cornch@cornch.dev>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title #
#: docs/8.x/artisan.md:1
#, no-wrap
msgid "Artisan Console"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Tinker (REPL)](#tinker)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Writing Commands](#writing-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Generating Commands](#generating-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Command Structure](#command-structure)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Closure Commands](#closure-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Defining Input Expectations](#defining-input-expectations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Arguments](#arguments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Options](#options)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Input Arrays](#input-arrays)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Input Descriptions](#input-descriptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Command I/O](#command-io)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Retrieving Input](#retrieving-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Prompting For Input](#prompting-for-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid "[Writing Output](#writing-output)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Registering Commands](#registering-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid ""
"[Programmatically Executing Commands](#programmatically-executing-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23
msgid ""
"[Calling Commands From Other Commands](#calling-commands-from-other-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Stub Customization](#stub-customization)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23
msgid "[Events](#events)"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:25
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:25
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:28
msgid ""
"Artisan is the command line interface included with Laravel. Artisan exists "
"at the root of your application as the `artisan` script and provides a "
"number of helpful commands that can assist you while you build your "
"application. To view a list of all available Artisan commands, you may use "
"the `list` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:30
#, no-wrap
msgid "    php artisan list\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:32
msgid ""
"Every command also includes a \"help\" screen which displays and describes "
"the command's available arguments and options. To view a help screen, "
"precede the name of the command with `help`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:34
#, no-wrap
msgid "    php artisan help migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:36
#, no-wrap
msgid "<a name=\"laravel-sail\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:36
#, no-wrap
msgid "Laravel Sail"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:39
msgid ""
"If you are using [Laravel Sail](/docs/{{version}}/sail) as your local "
"development environment, remember to use the `sail` command line to invoke "
"Artisan commands. Sail will execute your Artisan commands within your "
"application's Docker containers:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:41
#, no-wrap
msgid "    ./sail artisan list\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:43
#, no-wrap
msgid "<a name=\"tinker\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:43
#, no-wrap
msgid "Tinker (REPL)"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:46
msgid ""
"Laravel Tinker is a powerful REPL for the Laravel framework, powered by the "
"[PsySH](https://github.com/bobthecow/psysh) package."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:48
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:48
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:51
msgid ""
"All Laravel applications include Tinker by default. However, you may install "
"Tinker using Composer if you have previously removed it from your "
"application:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:53
#, no-wrap
msgid "    composer require laravel/tinker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:55
#, no-wrap
msgid "> {tip} Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:57
#, no-wrap
msgid "<a name=\"usage\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:57
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:60
msgid ""
"Tinker allows you to interact with your entire Laravel application on the "
"command line, including your Eloquent models, jobs, events, and more. To "
"enter the Tinker environment, run the `tinker` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:62
#, no-wrap
msgid "    php artisan tinker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:64
msgid ""
"You can publish Tinker's configuration file using the `vendor:publish` "
"command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:66
#, no-wrap
msgid "    php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:68
#, no-wrap
msgid "> {note} The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:70
#, no-wrap
msgid "<a name=\"command-allow-list\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:70
#, no-wrap
msgid "Command Allow List"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:73
msgid ""
"Tinker utilizes an \"allow\" list to determine which Artisan commands are "
"allowed to be run within its shell. By default, you may run the `clear-"
"compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` "
"commands. If you would like to allow more commands you may add them to the "
"`commands` array in your `tinker.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:77
#, no-wrap
msgid ""
"    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:79
#, no-wrap
msgid "<a name=\"classes-that-should-not-be-aliased\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:79
#, no-wrap
msgid "Classes That Should Not Be Aliased"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:82
msgid ""
"Typically, Tinker automatically aliases classes as you interact with them in "
"Tinker. However, you may wish to never alias some classes. You may "
"accomplish this by listing the classes in the `dont_alias` array of your "
"`tinker.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:86
#, no-wrap
msgid ""
"    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:88
#, no-wrap
msgid "<a name=\"writing-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:88
#, no-wrap
msgid "Writing Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:91
msgid ""
"In addition to the commands provided with Artisan, you may build your own "
"custom commands. Commands are typically stored in the `app/Console/Commands` "
"directory; however, you are free to choose your own storage location as long "
"as your commands can be loaded by Composer."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:93
#, no-wrap
msgid "<a name=\"generating-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:93
#, no-wrap
msgid "Generating Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:96
msgid ""
"To create a new command, you may use the `make:command` Artisan command. "
"This command will create a new command class in the `app/Console/Commands` "
"directory. Don't worry if this directory does not exist in your application "
"- it will be created the first time you run the `make:command` Artisan "
"command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:98
#, no-wrap
msgid "    php artisan make:command SendEmails\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:100
#, no-wrap
msgid "<a name=\"command-structure\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:100
#, no-wrap
msgid "Command Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:103
msgid ""
"After generating your command, you should define appropriate values for the "
"`signature` and `description` properties of the class. These properties will "
"be used when displaying your command on the `list` screen. The `signature` "
"property also allows you to define [your command's input expectations]"
"(#defining-input-expectations). The `handle` method will be called when your "
"command is executed. You may place your command logic in this method."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:105
msgid ""
"Let's take a look at an example command. Note that we are able to request "
"any dependencies we need via the command's `handle` method. The Laravel "
"[service container](/docs/{{version}}/container) will automatically inject "
"all dependencies that are type-hinted in this method's signature:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:107
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:109
#, no-wrap
msgid "    namespace App\\Console\\Commands;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:113
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:122
#, no-wrap
msgid ""
"    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:129
#, no-wrap
msgid ""
"        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:139
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:151
#, no-wrap
msgid ""
"        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:153
#, no-wrap
msgid "> {tip} For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:155
#, no-wrap
msgid "<a name=\"closure-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:155
#, no-wrap
msgid "Closure Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:158
msgid ""
"Closure based commands provide an alternative to defining console commands "
"as classes. In the same way that route closures are an alternative to "
"controllers, think of command closures as an alternative to command classes. "
"Within the `commands` method of your `app/Console/Kernel.php` file, Laravel "
"loads the `routes/console.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:168
#, no-wrap
msgid ""
"    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:170
msgid ""
"Even though this file does not define HTTP routes, it defines console based "
"entry points (routes) into your application. Within this file, you may "
"define all of your closure based console commands using the `Artisan::"
"command` method. The `command` method accepts two arguments: the [command "
"signature](#defining-input-expectations) and a closure which receives the "
"command's arguments and options:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:174
#, no-wrap
msgid ""
"    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:176
msgid ""
"The closure is bound to the underlying command instance, so you have full "
"access to all of the helper methods you would typically be able to access on "
"a full command class."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:178
#, no-wrap
msgid "<a name=\"type-hinting-dependencies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:178
#, no-wrap
msgid "Type-Hinting Dependencies"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:181
msgid ""
"In addition to receiving your command's arguments and options, command "
"closures may also type-hint additional dependencies that you would like "
"resolved out of the [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:184
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:188
#, no-wrap
msgid ""
"    Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"        $drip->send(User::find($user));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:190
#, no-wrap
msgid "<a name=\"closure-command-descriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:190
#, no-wrap
msgid "Closure Command Descriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:193
msgid ""
"When defining a closure based command, you may use the `purpose` method to "
"add a description to the command. This description will be displayed when "
"you run the `php artisan list` or `php artisan help` commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:197
#, no-wrap
msgid ""
"    Artisan::command('mail:send {user}', function ($user) {\n"
"        // ...\n"
"    })->purpose('Send a marketing email to a user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:199
#, no-wrap
msgid "<a name=\"defining-input-expectations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:199
#, no-wrap
msgid "Defining Input Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:202
msgid ""
"When writing console commands, it is common to gather input from the user "
"through arguments or options. Laravel makes it very convenient to define the "
"input you expect from the user using the `signature` property on your "
"commands. The `signature` property allows you to define the name, arguments, "
"and options for the command in a single, expressive, route-like syntax."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:204
#, no-wrap
msgid "<a name=\"arguments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:204
#, no-wrap
msgid "Arguments"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:207
msgid ""
"All user supplied arguments and options are wrapped in curly braces. In the "
"following example, the command defines one required argument: `user`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:214
#, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:216
msgid ""
"You may also make arguments optional or define default values for arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:219
#, no-wrap
msgid ""
"    // Optional argument...\n"
"    mail:send {user?}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:222
#, no-wrap
msgid ""
"    // Optional argument with default value...\n"
"    mail:send {user=foo}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:224
#, no-wrap
msgid "<a name=\"options\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:224
#, no-wrap
msgid "Options"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:227
msgid ""
"Options, like arguments, are another form of user input. Options are "
"prefixed by two hyphens (`--`) when they are provided via the command line. "
"There are two types of options: those that receive a value and those that "
"don't. Options that don't receive a value serve as a boolean \"switch\". "
"Let's take a look at an example of this type of option:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:234
#, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:236
msgid ""
"In this example, the `--queue` switch may be specified when calling the "
"Artisan command. If the `--queue` switch is passed, the value of the option "
"will be `true`. Otherwise, the value will be `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:238
#, no-wrap
msgid "    php artisan mail:send 1 --queue\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:240
#, no-wrap
msgid "<a name=\"options-with-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:240
#, no-wrap
msgid "Options With Values"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:243
msgid ""
"Next, let's take a look at an option that expects a value. If the user must "
"specify a value for an option, you should suffix the option name with a `=` "
"sign:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:250
#, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue=}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:252
msgid ""
"In this example, the user may pass a value for the option like so. If the "
"option is not specified when invoking the command, its value will be `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:254
#, no-wrap
msgid "    php artisan mail:send 1 --queue=default\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:256
msgid ""
"You may assign default values to options by specifying the default value "
"after the option name. If no option value is passed by the user, the default "
"value will be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:258
#, no-wrap
msgid "    mail:send {user} {--queue=default}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:260
#, no-wrap
msgid "<a name=\"option-shortcuts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:260
#, no-wrap
msgid "Option Shortcuts"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:263
msgid ""
"To assign a shortcut when defining an option, you may specify it before the "
"option name and use the `|` character as a delimiter to separate the "
"shortcut from the full option name:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:265
#, no-wrap
msgid "    mail:send {user} {--Q|queue}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:267
#, no-wrap
msgid "<a name=\"input-arrays\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:267
#, no-wrap
msgid "Input Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:270
msgid ""
"If you would like to define arguments or options to expect multiple input "
"values, you may use the `*` character. First, let's take a look at an "
"example that specifies such an argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:272
#, no-wrap
msgid "    mail:send {user*}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:274
msgid ""
"When calling this method, the `user` arguments may be passed in order to the "
"command line. For example, the following command will set the value of "
"`user` to an array with `foo` and `bar` as its values:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:276
#, no-wrap
msgid "    php artisan mail:send foo bar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:278
msgid ""
"This `*` character can be combined with an optional argument definition to "
"allow zero or more instances of an argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:280
#, no-wrap
msgid "    mail:send {user?*}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:282
#, no-wrap
msgid "<a name=\"option-arrays\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:282
#, no-wrap
msgid "Option Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:285
msgid ""
"When defining an option that expects multiple input values, each option "
"value passed to the command should be prefixed with the option name:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:287
#, no-wrap
msgid "    mail:send {user} {--id=*}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:289
#, no-wrap
msgid "    php artisan mail:send --id=1 --id=2\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:291
#, no-wrap
msgid "<a name=\"input-descriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:291
#, no-wrap
msgid "Input Descriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:294
msgid ""
"You may assign descriptions to input arguments and options by separating the "
"argument name from the description using a colon. If you need a little extra "
"room to define your command, feel free to spread the definition across "
"multiple lines:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:303
#, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send\n"
"                            {user : The ID of the user}\n"
"                            {--queue= : Whether the job should be queued}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:305
#, no-wrap
msgid "<a name=\"command-io\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:305
#, no-wrap
msgid "Command I/O"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:308
#, no-wrap
msgid "<a name=\"retrieving-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:308
#, no-wrap
msgid "Retrieving Input"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:311
msgid ""
"While your command is executing, you will likely need to access the values "
"for the arguments and options accepted by your command. To do so, you may "
"use the `argument` and `option` methods. If an argument or option does not "
"exist, `null` will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:320
#, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return int\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $userId = $this->argument('user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:323 docs/8.x/artisan.md:583
#, no-wrap
msgid ""
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:325
msgid ""
"If you need to retrieve all of the arguments as an `array`, call the "
"`arguments` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:327
#, no-wrap
msgid "    $arguments = $this->arguments();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:329
msgid ""
"Options may be retrieved just as easily as arguments using the `option` "
"method. To retrieve all of the options as an array, call the `options` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:332
#, no-wrap
msgid ""
"    // Retrieve a specific option...\n"
"    $queueName = $this->option('queue');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:335
#, no-wrap
msgid ""
"    // Retrieve all options as an array...\n"
"    $options = $this->options();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:337
#, no-wrap
msgid "<a name=\"prompting-for-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:337
#, no-wrap
msgid "Prompting For Input"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:340
msgid ""
"In addition to displaying output, you may also ask the user to provide input "
"during the execution of your command. The `ask` method will prompt the user "
"with the given question, accept their input, and then return the user's "
"input back to your command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:350
#, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $name = $this->ask('What is your name?');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:352
msgid ""
"The `secret` method is similar to `ask`, but the user's input will not be "
"visible to them as they type in the console. This method is useful when "
"asking for sensitive information such as passwords:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:354
#, no-wrap
msgid "    $password = $this->secret('What is the password?');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:356
#, no-wrap
msgid "<a name=\"asking-for-confirmation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:356
#, no-wrap
msgid "Asking For Confirmation"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:359
msgid ""
"If you need to ask the user for a simple \"yes or no\" confirmation, you may "
"use the `confirm` method. By default, this method will return `false`. "
"However, if the user enters `y` or `yes` in response to the prompt, the "
"method will return `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:363
#, no-wrap
msgid ""
"    if ($this->confirm('Do you wish to continue?')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:365
msgid ""
"If necessary, you may specify that the confirmation prompt should return "
"`true` by default by passing `true` as the second argument to the `confirm` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:369
#, no-wrap
msgid ""
"    if ($this->confirm('Do you wish to continue?', true)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:371
#, no-wrap
msgid "<a name=\"auto-completion\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:371
#, no-wrap
msgid "Auto-Completion"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:374
msgid ""
"The `anticipate` method can be used to provide auto-completion for possible "
"choices. The user can still provide any answer, regardless of the auto-"
"completion hints:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:376
#, no-wrap
msgid "    $name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:378
msgid ""
"Alternatively, you may pass a closure as the second argument to the "
"`anticipate` method. The closure will be called each time the user types an "
"input character. The closure should accept a string parameter containing the "
"user's input so far, and return an array of options for auto-completion:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:382
#, no-wrap
msgid ""
"    $name = $this->anticipate('What is your address?', function ($input) {\n"
"        // Return auto-completion options...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:384
#, no-wrap
msgid "<a name=\"multiple-choice-questions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:384
#, no-wrap
msgid "Multiple Choice Questions"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:387
msgid ""
"If you need to give the user a predefined set of choices when asking a "
"question, you may use the `choice` method. You may set the array index of "
"the default value to be returned if no option is chosen by passing the index "
"as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:393
#, no-wrap
msgid ""
"    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:395
msgid ""
"In addition, the `choice` method accepts optional fourth and fifth arguments "
"for determining the maximum number of attempts to select a valid response "
"and whether multiple selections are permitted:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:403
#, no-wrap
msgid ""
"    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex,\n"
"        $maxAttempts = null,\n"
"        $allowMultipleSelections = false\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:405
#, no-wrap
msgid "<a name=\"writing-output\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:405
#, no-wrap
msgid "Writing Output"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:408
msgid ""
"To send output to the console, you may use the `line`, `info`, `comment`, "
"`question` and `error` methods. Each of these methods will use appropriate "
"ANSI colors for their purpose. For example, let's display some general "
"information to the user. Typically, the `info` method will display in the "
"console as green colored text:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:417
#, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:420
#, no-wrap
msgid ""
"        $this->info('The command was successful!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:422
msgid ""
"To display an error message, use the `error` method. Error message text is "
"typically displayed in red:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:424
#, no-wrap
msgid "    $this->error('Something went wrong!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:426
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:428
#, no-wrap
msgid "    $this->line('Display this on the screen');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:430
msgid "You may use the `newLine` method to display a blank line:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:433
#, no-wrap
msgid ""
"    // Write a single blank line...\n"
"    $this->newLine();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:436
#, no-wrap
msgid ""
"    // Write three blank lines...\n"
"    $this->newLine(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:438
#, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:438
#, no-wrap
msgid "Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:442
msgid ""
"The `table` method makes it easy to correctly format multiple rows / columns "
"of data. All you need to do is provide the column names and the data for the "
"table and Laravel will automatically calculate the appropriate width and "
"height of the table for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:444 docs/8.x/artisan.md:456
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:449
#, no-wrap
msgid ""
"    $this->table(\n"
"        ['Name', 'Email'],\n"
"        User::all(['name', 'email'])->toArray()\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:451
#, no-wrap
msgid "<a name=\"progress-bars\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:451
#, no-wrap
msgid "Progress Bars"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:454
msgid ""
"For long running tasks, it can be helpful to show a progress bar that "
"informs users how complete the task is. Using the `withProgressBar` method, "
"Laravel will display a progress bar and advance its progress for each "
"iteration over a given iterable value:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:460
#, no-wrap
msgid ""
"    $users = $this->withProgressBar(User::all(), function ($user) {\n"
"        $this->performTask($user);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:462
msgid ""
"Sometimes, you may need more manual control over how a progress bar is "
"advanced. First, define the total number of steps the process will iterate "
"through. Then, advance the progress bar after processing each item:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:464
#, no-wrap
msgid "    $users = App\\Models\\User::all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:466
#, no-wrap
msgid "    $bar = $this->output->createProgressBar(count($users));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:468
#, no-wrap
msgid "    $bar->start();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:471
#, no-wrap
msgid ""
"    foreach ($users as $user) {\n"
"        $this->performTask($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:474
#, no-wrap
msgid ""
"        $bar->advance();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:476
#, no-wrap
msgid "    $bar->finish();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:478
#, no-wrap
msgid "> {tip} For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:480
#, no-wrap
msgid "<a name=\"registering-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:480
#, no-wrap
msgid "Registering Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:483
msgid ""
"All of your console commands are registered within your application's `App"
"\\Console\\Kernel` class, which is your application's \"console kernel\". "
"Within the `commands` method of this class, you will see a call to the "
"kernel's `load` method. The `load` method will scan the `app/Console/"
"Commands` directory and automatically register each command it contains with "
"Artisan. You are even free to make additional calls to the `load` method to "
"scan other directories for Artisan commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:493
#, no-wrap
msgid ""
"    /**\n"
"     * Register the commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        $this->load(__DIR__.'/Commands');\n"
"        $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:496
#, no-wrap
msgid ""
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:498
msgid ""
"If necessary, you may manually register commands by adding the command's "
"class name to the `$commands` property of your `App\\Console\\Kernel` class. "
"When Artisan boots, all the commands listed in this property will be "
"resolved by the [service container](/docs/{{version}}/container) and "
"registered with Artisan:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:502
#, no-wrap
msgid ""
"    protected $commands = [\n"
"        Commands\\SendEmails::class\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:504
#, no-wrap
msgid "<a name=\"programmatically-executing-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:504
#, no-wrap
msgid "Programmatically Executing Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:507
msgid ""
"Sometimes you may wish to execute an Artisan command outside of the CLI. For "
"example, you may wish to execute an Artisan command from a route or "
"controller. You may use the `call` method on the `Artisan` facade to "
"accomplish this. The `call` method accepts either the command's signature "
"name or class name as its first argument, and an array of command parameters "
"as the second argument. The exit code will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:509 docs/8.x/artisan.md:528 docs/8.x/artisan.md:550
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Artisan;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:514
#, no-wrap
msgid ""
"    Route::post('/user/{user}/mail', function ($user) {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:517 docs/8.x/artisan.md:558
#, no-wrap
msgid ""
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:519
msgid ""
"Alternatively, you may pass the entire Artisan command to the `call` method "
"as a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:521
#, no-wrap
msgid "    Artisan::call('mail:send 1 --queue=default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:523
#, no-wrap
msgid "<a name=\"passing-array-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:523
#, no-wrap
msgid "Passing Array Values"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:526
msgid ""
"If your command defines an option that accepts an array, you may pass an "
"array of values to that option:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:534
#, no-wrap
msgid ""
"    Route::post('/mail', function () {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            '--id' => [5, 13]\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:536
#, no-wrap
msgid "<a name=\"passing-boolean-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:536
#, no-wrap
msgid "Passing Boolean Values"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:539
msgid ""
"If you need to specify the value of an option that does not accept string "
"values, such as the `--force` flag on the `migrate:refresh` command, you "
"should pass `true` or `false` as the value of the option:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:543
#, no-wrap
msgid ""
"    $exitCode = Artisan::call('migrate:refresh', [\n"
"        '--force' => true,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:545
#, no-wrap
msgid "<a name=\"queueing-artisan-commands\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:545
#, no-wrap
msgid "Queueing Artisan Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:548
msgid ""
"Using the `queue` method on the `Artisan` facade, you may even queue Artisan "
"commands so they are processed in the background by your [queue workers](/"
"docs/{{version}}/queues). Before using this method, make sure you have "
"configured your queue and are running a queue listener:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:555
#, no-wrap
msgid ""
"    Route::post('/user/{user}/mail', function ($user) {\n"
"        Artisan::queue('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:560
msgid ""
"Using the `onConnection` and `onQueue` methods, you may specify the "
"connection or queue the Artisan command should be dispatched to:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:564
#, no-wrap
msgid ""
"    Artisan::queue('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ])->onConnection('redis')->onQueue('commands');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:566
#, no-wrap
msgid "<a name=\"calling-commands-from-other-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:566
#, no-wrap
msgid "Calling Commands From Other Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:569
msgid ""
"Sometimes you may wish to call other commands from an existing Artisan "
"command. You may do so using the `call` method. This `call` method accepts "
"the command name and an array of command arguments / options:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:580
#, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $this->call('mail:send', [\n"
"            'user' => 1, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:585
msgid ""
"If you would like to call another console command and suppress all of its "
"output, you may use the `callSilently` method. The `callSilently` method has "
"the same signature as the `call` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:589
#, no-wrap
msgid ""
"    $this->callSilently('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:591
#, no-wrap
msgid "<a name=\"stub-customization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:591
#, no-wrap
msgid "Stub Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:594
msgid ""
"The Artisan console's `make` commands are used to create a variety of "
"classes, such as controllers, jobs, migrations, and tests. These classes are "
"generated using \"stub\" files that are populated with values based on your "
"input. However, you may want to make small changes to files generated by "
"Artisan. To accomplish this, you may use the `stub:publish` command to "
"publish the most common stubs to your application so that you can customize "
"them:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:596
#, no-wrap
msgid "    php artisan stub:publish\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:598
msgid ""
"The published stubs will be located within a `stubs` directory in the root "
"of your application. Any changes you make to these stubs will be reflected "
"when you generate their corresponding classes using Artisan's `make` "
"commands."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:600
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:600
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:602
msgid ""
"Artisan dispatches three events when running commands: `Illuminate\\Console"
"\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting`, "
"and `Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` "
"event is dispatched immediately when Artisan starts running. Next, the "
"`CommandStarting` event is dispatched immediately before a command runs. "
"Finally, the `CommandFinished` event is dispatched once a command finishes "
"executing."
msgstr ""

#, no-wrap
#~ msgid "Laravel Fortify"
#~ msgstr "Laravel Fortify"

#~ msgid "[What Is Fortify?](#what-is-fortify)"
#~ msgstr "[什麼是 Fortify？](#what-is-fortify)"

#~ msgid "[When Should I Use Fortify?](#when-should-i-use-fortify)"
#~ msgstr "[什麼時候該用 Fortify？](#when-should-i-use-fortify)"
