msgid ""
msgstr ""

# H1
#: ./docs/8.x/seeding.md:1
#: ./docs/9.x/seeding.md:1
#: ./docs/10.x/seeding.md:1
#: ./docs/11.x/seeding.md:1
#: ./docs/master/seeding.md:1
msgid "Database: Seeding"
msgstr ""

# P
#: ./docs/8.x/seeding.md:3
#: ./docs/9.x/seeding.md:3
#: ./docs/10.x/seeding.md:3
#: ./docs/11.x/seeding.md:3
#: ./docs/master/seeding.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/seeding.md:4
#: ./docs/9.x/seeding.md:4
#: ./docs/10.x/seeding.md:4
#: ./docs/11.x/seeding.md:4
#: ./docs/master/seeding.md:4
msgid "[Writing Seeders](#writing-seeders)"
msgstr ""

# P
#: ./docs/8.x/seeding.md:5
#: ./docs/9.x/seeding.md:5
#: ./docs/10.x/seeding.md:5
#: ./docs/11.x/seeding.md:5
#: ./docs/master/seeding.md:5
msgid "[Using Model Factories](#using-model-factories)"
msgstr ""

# P
#: ./docs/8.x/seeding.md:6
#: ./docs/9.x/seeding.md:6
#: ./docs/10.x/seeding.md:6
#: ./docs/11.x/seeding.md:6
#: ./docs/master/seeding.md:6
msgid "[Calling Additional Seeders](#calling-additional-seeders)"
msgstr ""

# P
#: ./docs/8.x/seeding.md:7
#: ./docs/9.x/seeding.md:8
#: ./docs/10.x/seeding.md:8
#: ./docs/11.x/seeding.md:8
#: ./docs/master/seeding.md:8
msgid "[Running Seeders](#running-seeders)"
msgstr ""

# P
#: ./docs/9.x/seeding.md:7
#: ./docs/10.x/seeding.md:7
#: ./docs/11.x/seeding.md:7
#: ./docs/master/seeding.md:7
msgid "[Muting Model Events](#muting-model-events)"
msgstr ""

# P
#: ./docs/8.x/seeding.md:9
#: ./docs/9.x/seeding.md:10
#: ./docs/10.x/seeding.md:10
#: ./docs/11.x/seeding.md:10
#: ./docs/master/seeding.md:10
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/seeding.md:10
#: ./docs/9.x/seeding.md:11
#: ./docs/10.x/seeding.md:11
#: ./docs/11.x/seeding.md:11
#: ./docs/master/seeding.md:11
msgid "Introduction"
msgstr ""

# P
#: ./docs/8.x/seeding.md:12
#: ./docs/9.x/seeding.md:13
#: ./docs/10.x/seeding.md:13
#: ./docs/11.x/seeding.md:13
#: ./docs/master/seeding.md:13
msgid "Laravel includes the ability to seed your database with data using seed classes. All seed classes are stored in the `database/seeders` directory. By default, a `DatabaseSeeder` class is defined for you. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order."
msgstr ""

# P
#: ./docs/8.x/seeding.md:14
#: ./docs/9.x/seeding.md:16
#: ./docs/10.x/seeding.md:16
#: ./docs/11.x/seeding.md:16
#: ./docs/master/seeding.md:16
msgid "[Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled during database seeding."
msgstr ""

# P
#: ./docs/8.x/seeding.md:16
#: ./docs/9.x/seeding.md:18
#: ./docs/10.x/seeding.md:18
#: ./docs/11.x/seeding.md:18
#: ./docs/master/seeding.md:18
#~ msgid "<a name=\"writing-seeders\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/seeding.md:17
#: ./docs/9.x/seeding.md:19
#: ./docs/10.x/seeding.md:19
#: ./docs/11.x/seeding.md:19
#: ./docs/master/seeding.md:19
msgid "Writing Seeders"
msgstr ""

# P
#: ./docs/8.x/seeding.md:19
#: ./docs/9.x/seeding.md:21
#: ./docs/10.x/seeding.md:21
#: ./docs/11.x/seeding.md:21
#: ./docs/master/seeding.md:21
msgid "To generate a seeder, execute the `make:seeder` [Artisan command](/docs/{{version}}/artisan). All seeders generated by the framework will be placed in the `database/seeders` directory:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/seeding.md:21
#: ./docs/9.x/seeding.md:23
#: ./docs/10.x/seeding.md:23
#: ./docs/11.x/seeding.md:23
#: ./docs/master/seeding.md:23
msgid "php artisan make:seeder UserSeeder"
msgstr ""

# P
#: ./docs/8.x/seeding.md:23
msgid "A seeder class only contains one method by default: `run`. This method is called when the `db:seed` [Artisan command](/docs/{{version}}/artisan) is executed. Within the `run` method, you may insert data into your database however you wish. You may use the [query builder](/docs/{{version}}/queries) to manually insert data or you may use [Eloquent model factories](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr ""

# P
#: ./docs/8.x/seeding.md:25
#: ./docs/9.x/seeding.md:29
#: ./docs/10.x/seeding.md:29
#: ./docs/11.x/seeding.md:29
#: ./docs/master/seeding.md:29
msgid "As an example, let's modify the default `DatabaseSeeder` class and add a database insert statement to the `run` method:"
msgstr ""

# CODE
#: ./docs/8.x/seeding.md:27
#: ./docs/9.x/seeding.md:31
msgid ""
"<?php\n"
"\n"
"namespace Database\\Seeders;\n"
"\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        DB::table('users')->insert([\n"
"            'name' => Str::random(10),\n"
"            'email' => Str::random(10).'@gmail.com',\n"
"            'password' => Hash::make('password'),\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/9.x/seeding.md:27
#: ./docs/10.x/seeding.md:27
#: ./docs/11.x/seeding.md:27
#: ./docs/master/seeding.md:27
msgid "A seeder class only contains one method by default: `run`. This method is called when the `db:seed` [Artisan command](/docs/{{version}}/artisan) is executed. Within the `run` method, you may insert data into your database however you wish. You may use the [query builder](/docs/{{version}}/queries) to manually insert data or you may use [Eloquent model factories](/docs/{{version}}/eloquent-factories)."
msgstr ""

# CODE
#: ./docs/10.x/seeding.md:31
#: ./docs/11.x/seeding.md:31
#: ./docs/master/seeding.md:31
msgid ""
"<?php\n"
"\n"
"namespace Database\\Seeders;\n"
"\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Run the database seeders.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        DB::table('users')->insert([\n"
"            'name' => Str::random(10),\n"
"            'email' => Str::random(10).'@example.com',\n"
"            'password' => Hash::make('password'),\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/seeding.md:53
#: ./docs/9.x/seeding.md:58
#: ./docs/10.x/seeding.md:56
#: ./docs/11.x/seeding.md:56
#: ./docs/master/seeding.md:56
msgid "You may type-hint any dependencies you need within the `run` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr ""

# P
#: ./docs/8.x/seeding.md:55
#: ./docs/9.x/seeding.md:60
#: ./docs/10.x/seeding.md:58
#: ./docs/11.x/seeding.md:58
#: ./docs/master/seeding.md:58
#~ msgid "<a name=\"using-model-factories\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/seeding.md:56
#: ./docs/9.x/seeding.md:61
#: ./docs/10.x/seeding.md:59
#: ./docs/11.x/seeding.md:59
#: ./docs/master/seeding.md:59
msgid "Using Model Factories"
msgstr ""

# P
#: ./docs/8.x/seeding.md:58
msgid "Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use [model factories](/docs/{{version}}/database-testing#defining-model-factories) to conveniently generate large amounts of database records. First, review the [model factory documentation](/docs/{{version}}/database-testing#defining-model-factories) to learn how to define your factories."
msgstr ""

# P
#: ./docs/8.x/seeding.md:60
#: ./docs/9.x/seeding.md:65
#: ./docs/10.x/seeding.md:63
#: ./docs/11.x/seeding.md:63
#: ./docs/master/seeding.md:63
msgid "For example, let's create 50 users that each has one related post:"
msgstr ""

# CODE
#: ./docs/8.x/seeding.md:62
#: ./docs/9.x/seeding.md:67
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Run the database seeders.\n"
" *\n"
" * @return void\n"
" */\n"
"public function run()\n"
"{\n"
"    User::factory()\n"
"            ->count(50)\n"
"            ->hasPosts(1)\n"
"            ->create();\n"
"}"
msgstr ""

# P
#: ./docs/9.x/seeding.md:63
#: ./docs/10.x/seeding.md:61
#: ./docs/11.x/seeding.md:61
#: ./docs/master/seeding.md:61
msgid "Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use [model factories](/docs/{{version}}/eloquent-factories) to conveniently generate large amounts of database records. First, review the [model factory documentation](/docs/{{version}}/eloquent-factories) to learn how to define your factories."
msgstr ""

# CODE
#: ./docs/10.x/seeding.md:65
#: ./docs/11.x/seeding.md:65
#: ./docs/master/seeding.md:65
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Run the database seeders.\n"
" */\n"
"public function run(): void\n"
"{\n"
"    User::factory()\n"
"            ->count(50)\n"
"            ->hasPosts(1)\n"
"            ->create();\n"
"}"
msgstr ""

# P
#: ./docs/8.x/seeding.md:77
#: ./docs/9.x/seeding.md:82
#: ./docs/10.x/seeding.md:78
#: ./docs/11.x/seeding.md:78
#: ./docs/master/seeding.md:78
#~ msgid "<a name=\"calling-additional-seeders\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/seeding.md:78
#: ./docs/9.x/seeding.md:83
#: ./docs/10.x/seeding.md:79
#: ./docs/11.x/seeding.md:79
#: ./docs/master/seeding.md:79
msgid "Calling Additional Seeders"
msgstr ""

# P
#: ./docs/8.x/seeding.md:80
#: ./docs/9.x/seeding.md:85
#: ./docs/10.x/seeding.md:81
#: ./docs/11.x/seeding.md:81
#: ./docs/master/seeding.md:81
msgid "Within the `DatabaseSeeder` class, you may use the `call` method to execute additional seed classes. Using the `call` method allows you to break up your database seeding into multiple files so that no single seeder class becomes too large. The `call` method accepts an array of seeder classes that should be executed:"
msgstr ""

# CODE
#: ./docs/8.x/seeding.md:82
#: ./docs/9.x/seeding.md:87
msgid ""
"/**\n"
" * Run the database seeders.\n"
" *\n"
" * @return void\n"
" */\n"
"public function run()\n"
"{\n"
"    $this->call([\n"
"        UserSeeder::class,\n"
"        PostSeeder::class,\n"
"        CommentSeeder::class,\n"
"    ]);\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/seeding.md:83
#: ./docs/11.x/seeding.md:83
#: ./docs/master/seeding.md:83
msgid ""
"/**\n"
" * Run the database seeders.\n"
" */\n"
"public function run(): void\n"
"{\n"
"    $this->call([\n"
"        UserSeeder::class,\n"
"        PostSeeder::class,\n"
"        CommentSeeder::class,\n"
"    ]);\n"
"}"
msgstr ""

# P
#: ./docs/8.x/seeding.md:96
#: ./docs/9.x/seeding.md:130
#: ./docs/10.x/seeding.md:122
#: ./docs/11.x/seeding.md:122
#: ./docs/master/seeding.md:122
#~ msgid "<a name=\"running-seeders\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/seeding.md:97
#: ./docs/9.x/seeding.md:131
#: ./docs/10.x/seeding.md:123
#: ./docs/11.x/seeding.md:123
#: ./docs/master/seeding.md:123
msgid "Running Seeders"
msgstr ""

# P
#: ./docs/8.x/seeding.md:99
#: ./docs/9.x/seeding.md:133
#: ./docs/10.x/seeding.md:125
#: ./docs/11.x/seeding.md:125
#: ./docs/master/seeding.md:125
msgid "You may execute the `db:seed` Artisan command to seed your database. By default, the `db:seed` command runs the `Database\\Seeders\\DatabaseSeeder` class, which may in turn invoke other seed classes. However, you may use the `--class` option to specify a specific seeder class to run individually:"
msgstr ""

# CODE
#: ./docs/10.x/seeding.md:100
#: ./docs/11.x/seeding.md:100
#: ./docs/master/seeding.md:100
msgid ""
"<?php\n"
"\n"
"namespace Database\\Seeders;\n"
"\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n"
"\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    use WithoutModelEvents;\n"
"\n"
"    /**\n"
"     * Run the database seeders.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/seeding.md:101
#: ./docs/9.x/seeding.md:135
#: ./docs/10.x/seeding.md:127
#: ./docs/11.x/seeding.md:127
#: ./docs/master/seeding.md:127
msgid ""
"php artisan db:seed\n"
"\n"
"php artisan db:seed --class=UserSeeder"
msgstr ""

# P
#: ./docs/9.x/seeding.md:101
#: ./docs/10.x/seeding.md:95
#: ./docs/11.x/seeding.md:95
#: ./docs/master/seeding.md:95
#~ msgid "<a name=\"muting-model-events\"></a>"
#~ msgstr ""

# H3
#: ./docs/9.x/seeding.md:102
#: ./docs/10.x/seeding.md:96
#: ./docs/11.x/seeding.md:96
#: ./docs/master/seeding.md:96
msgid "Muting Model Events"
msgstr ""

# P
#: ./docs/9.x/seeding.md:104
#: ./docs/10.x/seeding.md:98
#: ./docs/11.x/seeding.md:98
#: ./docs/master/seeding.md:98
msgid "While running seeds, you may want to prevent models from dispatching events. You may achieve this using the `WithoutModelEvents` trait. When used, the `WithoutModelEvents` trait ensures no model events are dispatched, even if additional seed classes are executed via the `call` method:"
msgstr ""

# P
#: ./docs/8.x/seeding.md:105
msgid "You may also seed your database using the `migrate:fresh` command in combination with the `--seed` option, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database:"
msgstr ""

# CODE
#: ./docs/9.x/seeding.md:106
msgid ""
"<?php\n"
"\n"
"namespace Database\\Seeders;\n"
"\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n"
"\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    use WithoutModelEvents;\n"
"\n"
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/seeding.md:107
msgid "php artisan migrate:fresh --seed"
msgstr ""

# P
#: ./docs/8.x/seeding.md:109
#: ./docs/9.x/seeding.md:149
#: ./docs/10.x/seeding.md:141
#: ./docs/11.x/seeding.md:141
#: ./docs/master/seeding.md:141
#~ msgid "<a name=\"forcing-seeding-production\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/seeding.md:110
#: ./docs/9.x/seeding.md:150
msgid "Forcing Seeders To Run In Production"
msgstr ""

# P
#: ./docs/8.x/seeding.md:112
#: ./docs/9.x/seeding.md:152
#: ./docs/10.x/seeding.md:144
#: ./docs/11.x/seeding.md:144
#: ./docs/master/seeding.md:144
msgid "Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed in the `production` environment. To force the seeders to run without a prompt, use the `--force` flag:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/seeding.md:114
#: ./docs/9.x/seeding.md:154
#: ./docs/10.x/seeding.md:146
#: ./docs/11.x/seeding.md:146
#: ./docs/master/seeding.md:146
msgid "php artisan db:seed --force"
msgstr ""

# CODE: shell
#: ./docs/11.x/seeding.md:135
msgid ""
"php artisan migrate:fresh --seed\n"
"\n"
"php artisan migrate:fresh --seed --seeder=UserSeeder"
msgstr ""

# P
#: ./docs/9.x/seeding.md:141
#: ./docs/10.x/seeding.md:133
#: ./docs/11.x/seeding.md:133
#: ./docs/master/seeding.md:133
msgid "You may also seed your database using the `migrate:fresh` command in combination with the `--seed` option, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database. The `--seeder` option may be used to specify a specific seeder to run:"
msgstr ""

# H4
#: ./docs/10.x/seeding.md:142
#: ./docs/11.x/seeding.md:142
#: ./docs/master/seeding.md:142
msgid "Forcing Seeders to Run in Production"
msgstr ""

# CODE: shell
#: ./docs/9.x/seeding.md:143
#: ./docs/10.x/seeding.md:135
#: ./docs/master/seeding.md:135
msgid ""
"php artisan migrate:fresh --seed\n"
"\n"
"php artisan migrate:fresh --seed --seeder=UserSeeder "
msgstr ""
