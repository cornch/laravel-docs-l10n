msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/errors.pot\n"
"X-Crowdin-File-ID: 67\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-06-30 09:00\n"

#: docs/10.x/errors.md:block 1 (header)
msgid "Error Handling"
msgstr "錯誤處理"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[The Exception Handler](#the-exception-handler)"
msgstr "[Exception Handler](#the-exception-handler)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Reporting Exceptions](#reporting-exceptions)"
msgstr "[回報 Exception](#reporting-exceptions)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Exception Log Levels](#exception-log-levels)"
msgstr "[Exception 的 Log 等級](#exception-log-levels)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Ignoring Exceptions by Type](#ignoring-exceptions-by-type)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Rendering Exceptions](#rendering-exceptions)"
msgstr "[轉譯 Exception](#rendering-exceptions)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Reportable and Renderable Exceptions](#renderable-exceptions)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Throttling Reported Exceptions](#throttling-reported-exceptions)"
msgstr "[頻率限制 Exception 的回報](#throttling-exceptions)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[HTTP Exceptions](#http-exceptions)"
msgstr "[HTTP Exception](#http-exceptions)"

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Custom HTTP Error Pages](#custom-http-error-pages)"
msgstr "[自訂 HTTP 錯誤的頁面](#custom-http-error-pages)"

#: docs/10.x/errors.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/errors.md:block 5 (paragraph)
msgid "When you start a new Laravel project, error and exception handling is already configured for you. The `App\\Exceptions\\Handler` class is where all exceptions thrown by your application are logged and then rendered to the user. We'll dive deeper into this class throughout this documentation."
msgstr "在開始新的 Laravel 專案時，Laravel 已經先幫你設定好錯誤與 ^[Exception Handler](例外處理常式)。在你的專案中^[擲回](Throw)的所有 Exception 都會由 `App\\Exceptions\\Handler` 負責紀錄 ^[Log](日誌) 並轉譯給使用者。我們會在這篇說明文件中深入瞭解這個類別。"

#: docs/10.x/errors.md:block 7 (header)
msgid "Configuration"
msgstr "設定"

#: docs/10.x/errors.md:block 8 (paragraph)
msgid "The `debug` option in your `config/app.php` configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the `APP_DEBUG` environment variable, which is stored in your `.env` file."
msgstr "`config/app.php` 設定檔中的 `debug` 選項用來判斷錯誤在實際顯示給使用者時要包含多少資訊。預設情況下，這個選項被設為依照 `APP_DEBUG` 環境變數值，該環境變數儲存於 `.env` 檔內。"

#: docs/10.x/errors.md:block 9 (paragraph)
msgid "During local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the value is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr "在本機上開發時，應將 `APP_DEBUG` 環境變數設為 `true`。 **在正式環境上，這個值一定要是 `false`。若在正式環境上將該值設為 `true`，則會有將機敏設定值暴露給應用程式終端使用者的風險。**"

#: docs/10.x/errors.md:block 11 (header)
msgid "The Exception Handler"
msgstr "Exception Handler"

#: docs/10.x/errors.md:block 13 (header)
msgid "Reporting Exceptions"
msgstr "回報 Exception"

#: docs/10.x/errors.md:block 14 (paragraph)
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com), or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr "所有的 Exception 都由 `App\\Exceptions\\Handler` 類別負責處理。該類別中包含了一個 `register` 方法，可用來註冊所有自訂的 Exception 回報與轉譯回呼。我們來詳細看看其中各個概念。「回報 Exception」就是指將例外紀錄到 ^[Log](日誌)，或是傳送到如 [Flare](https://flareapp.io)、[Bugsnag](https://bugsnag.com)、[Sentry](https://github.com/getsentry/sentry-laravel) 等外部服務。預設情況下，Laravel 會使用專案的[Log](/docs/{{version}}/logging) 設定來紀錄 Exception。不過，我們也可以隨意調整 Exception 要如何紀錄。"

#: docs/10.x/errors.md:block 15 (paragraph)
msgid "If you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will determine what type of exception the closure reports by examining the type-hint of the closure:"
msgstr "若想以不同的方式回報不同類型的 Exception，可以使用 `reportable` 方法來註冊一個閉包。這個閉包會在給定類型的 Exception 需要回報時被呼叫。Laravel 會自動使用該閉包的^[型別提示](Type-Hint)來判斷該閉包接受什麼類型的 Exception："

#: docs/10.x/errors.md:block 16 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    });\n"
"}\n"
msgstr "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    });\n"
"}\n"

#: docs/10.x/errors.md:block 17 (paragraph)
msgid "When you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr "使用 `reportable` 方法定義自訂的 Exception 回報回呼時，Laravel 還是會使用專案的預設 Log 設定來紀錄例外。若想停止將 Exception ^[傳播](Propagation)給預設的日誌 Stack，請在定義回報回呼時使用 `stop` 方法，或是在該回呼內回傳 `false`："

#: docs/10.x/errors.md:block 18 (code)
msgid "$this->reportable(function (InvalidOrderException $e) {\n"
"    // ...\n"
"})->stop();\n\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});\n"
msgstr "$this->reportable(function (InvalidOrderException $e) {\n"
"    // ...\n"
"})->stop();\n\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});\n"

#: docs/10.x/errors.md:block 19 (quote)
msgid "[!NOTE] To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)."
msgstr ""

#: docs/10.x/errors.md:block 21 (header)
msgid "Global Log Context"
msgstr "全域 Log 上下文"

#: docs/10.x/errors.md:block 22 (paragraph)
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by defining a `context` method on your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr "當有目前使用者 ID 的時候，Laravel 會自動將使用者 ID 加到所有的例外 Log 訊息，以作為^[上下文](Context)資料。可以在專案中 `App\\Exceptions\\Handler` 類別內定義一個 `context` 方法來定義你自己的全域上下文資料。這個資料會被包含在專案輸出的所有例外 Log 訊息中："

#: docs/10.x/errors.md:block 23 (code)
msgid "/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"protected function context(): array\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"protected function context(): array\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}\n"

#: docs/10.x/errors.md:block 25 (header)
msgid "Exception Log Context"
msgstr "Exception Log 的上下文"

#: docs/10.x/errors.md:block 26 (paragraph)
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr "為所有 Log 訊息都新增額外的上下文可能會很實用，但有些特別的 Exception 可能會有一些獨特的上下文，而我們也想將這類上下文加到 Log 上。只要在 Exception 中定義一個 `context` 方法，就可以指定與該 Exception 相關的資料，將這些資料包含到例外的 Log 中："

#: docs/10.x/errors.md:block 27 (code)
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function context(): array\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function context(): array\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}\n"

#: docs/10.x/errors.md:block 29 (header)
msgid "The `report` Helper"
msgstr "`report` 輔助函式"

#: docs/10.x/errors.md:block 30 (paragraph)
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception via the exception handler without rendering an error page to the user:"
msgstr "有時候，我們可能會想回報某個 Exception，但又想繼續執行目前的 Request。使用 `report` 輔助函式，就能輕鬆地在不轉譯出錯誤頁面的情況下使用 Exception Handler 來回報這個 Exception："

#: docs/10.x/errors.md:block 31 (code)
msgid "public function isValid(string $value): bool\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr "public function isValid(string $value): bool\n"
"{\n"
"    try {\n"
"        // 驗證資料...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n\n"
"        return false;\n"
"    }\n"
"}\n"

#: docs/10.x/errors.md:block 33 (header)
msgid "Deduplicating Reported Exceptions"
msgstr "避免重複回報的 Exception"

#: docs/10.x/errors.md:block 34 (paragraph)
msgid "If you are using the `report` function throughout your application, you may occasionally report the same exception multiple times, creating duplicate entries in your logs."
msgstr "若你在專案中使用 `report` 函式，偶爾可能會發生同一個 Exception 被回報多次的情況，並在 Log 中造成重複的項目。"

#: docs/10.x/errors.md:block 35 (paragraph)
msgid "If you would like to ensure that a single instance of an exception is only ever reported once, you may set the `$withoutDuplicates` property to `true` within your application's `App\\Exceptions\\Handler` class:"
msgstr "若想避免同一個 Exception 實體被回報多次，可以在 `App\\Exceptions\\Handler` 類別中將 `$withoutDuplicates` 屬性設為 `true`："

#: docs/10.x/errors.md:block 36 (code)
msgid "namespace App\\Exceptions;\n\n"
"use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n\n"
"class Handler extends ExceptionHandler\n"
"{\n"
"    /**\n"
"     * Indicates that an exception instance should only be reported once.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $withoutDuplicates = true;\n\n"
"    // ...\n"
"}\n"
msgstr "namespace App\\Exceptions;\n\n"
"use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n\n"
"class Handler extends ExceptionHandler\n"
"{\n"
"    /**\n"
"     * Indicates that an exception instance should only be reported once.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $withoutDuplicates = true;\n\n"
"    // ...\n"
"}\n"

#: docs/10.x/errors.md:block 37 (paragraph)
msgid "Now, when the `report` helper is called with the same instance of an exception, only the first call will be reported:"
msgstr "現在，當使用相同 Exception 實體來呼叫 `report` 輔助函式時，就只有第一次呼叫會被回報："

#: docs/10.x/errors.md:block 38 (code)
msgid "$original = new RuntimeException('Whoops!');\n\n"
"report($original); // reported\n\n"
"try {\n"
"    throw $original;\n"
"} catch (Throwable $caught) {\n"
"    report($caught); // ignored\n"
"}\n\n"
"report($original); // ignored\n"
"report($caught); // ignored\n"
msgstr "$original = new RuntimeException('Whoops!');\n\n"
"report($original); // 回報\n\n"
"try {\n"
"    throw $original;\n"
"} catch (Throwable $caught) {\n"
"    report($caught); // 忽略\n"
"}\n\n"
"report($original); // 忽略\n"
"report($caught); // 忽略\n"

#: docs/10.x/errors.md:block 40 (header)
msgid "Exception Log Levels"
msgstr "Exception 的 Log 等級"

#: docs/10.x/errors.md:block 41 (paragraph)
msgid "When messages are written to your application's [logs](/docs/{{version}}/logging), the messages are written at a specified [log level](/docs/{{version}}/logging#log-levels), which indicates the severity or importance of the message being logged."
msgstr "在將訊息寫入專案的 [Log](/docs/{{version}}/logging) 時，這些訊息會以特定的 [Log 等級](/docs/{{version}}/logging#log-levels)寫入。這個等級即代表該日誌訊息的嚴重程度。"

#: docs/10.x/errors.md:block 42 (paragraph)
msgid "As noted above, even when you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application; however, since the log level can sometimes influence the channels on which a message is logged, you may wish to configure the log level that certain exceptions are logged at."
msgstr "上面也提過，即使使用了 `reportable` 方法註冊自定的 Exception 回報回呼，Laravel 也還是會使用專案預設的 Log 設定來記錄該 Exception。不過，由於 Log 等級有時候會影響訊息會被記錄在哪些通道內，因此有時候我們可能會想設定某個特定的 Exception 要被記錄在哪個 Log 等級上。"

#: docs/10.x/errors.md:block 43 (paragraph)
msgid "To accomplish this, you may define a `$levels` property on your application's exception handler. This property should contain an array of exception types and their associated log levels:"
msgstr "若要設定 Exception 的等級，請在專案的 Exception Handler 內定義一個 `$levels` 屬性。該屬性應包含一組陣列，包含 Exception 型別與其關聯的 Log 等級："

#: docs/10.x/errors.md:block 44 (code)
msgid "use PDOException;\n"
"use Psr\\Log\\LogLevel;\n\n"
"/**\n"
" * A list of exception types with their corresponding custom log levels.\n"
" *\n"
" * @var array<class-string<\\Throwable>, \\Psr\\Log\\LogLevel::*>\n"
" */\n"
"protected $levels = [\n"
"    PDOException::class => LogLevel::CRITICAL,\n"
"];\n"
msgstr "use PDOException;\n"
"use Psr\\Log\\LogLevel;\n\n"
"/**\n"
" * A list of exception types with their corresponding custom log levels.\n"
" *\n"
" * @var array<class-string<\\Throwable>, \\Psr\\Log\\LogLevel::*>\n"
" */\n"
"protected $levels = [\n"
"    PDOException::class => LogLevel::CRITICAL,\n"
"];\n"

#: docs/10.x/errors.md:block 46 (header)
msgid "Ignoring Exceptions by Type"
msgstr ""

#: docs/10.x/errors.md:block 47 (paragraph)
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, define a `$dontReport` property on your application's exception handler. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr "在製作專案時，有一些類型的 Exception 可能是我們想永遠忽略不回報的。若要忽略這類 Exception，請在專案的 Exception Handler 中定義一個 `$dontReport` 屬性。加入到此屬性的任何類別都不會被回報。不過，這些 Exception 還是可以有其自定轉譯邏輯："

#: docs/10.x/errors.md:block 48 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * A list of the exception types that are not reported.\n"
" *\n"
" * @var array<int, class-string<\\Throwable>>\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];\n"
msgstr "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * A list of the exception types that are not reported.\n"
" *\n"
" * @var array<int, class-string<\\Throwable>>\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];\n"

#: docs/10.x/errors.md:block 49 (paragraph)
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may invoke the `stopIgnoring` method within your exception handler's `register` method:"
msgstr "在 Laravel 內部，已經有一些型別的錯誤是會預設被忽略的，例如 404 HTTP 錯誤與無效 CSRF Token 產生的 419 HTTP Response 所產生的 Exception 等。若想讓 Laravel 不要忽略特定類型的 Exception，可以在 Exception Handler 的 `register` 方法中呼叫 `stopIgnoring` 方法："

#: docs/10.x/errors.md:block 50 (code)
msgid "use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->stopIgnoring(HttpException::class);\n\n"
"    // ...\n"
"}\n"
msgstr "use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->stopIgnoring(HttpException::class);\n\n"
"    // ...\n"
"}\n"

#: docs/10.x/errors.md:block 52 (header)
msgid "Rendering Exceptions"
msgstr "轉譯 Exception"

#: docs/10.x/errors.md:block 53 (paragraph)
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by invoking the `renderable` method within your exception handler."
msgstr "預設情況下，Laravel 的 Exception Handler 會幫你把 Exception 轉成 HTTP Response。不過，我們也可以自由地為某個類型的 Exception 註冊自訂^[轉譯閉包](Rendering Closure)。只要在 Exception Handler 內呼叫 `renderable` 方法，就可以註冊轉譯閉包。"

#: docs/10.x/errors.md:block 54 (paragraph)
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will determine what type of exception the closure renders by examining the type-hint of the closure:"
msgstr "傳給 `renderable` 方法的閉包應回傳一個 `Illuminate\\Http\\Response` 的實體。可以使用 `response` 輔助函式來產生該實體。Laravel 會依照該閉包的型別提示來判斷這個閉包能轉移哪種類型的 Exception："

#: docs/10.x/errors.md:block 55 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}\n"
msgstr "use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}\n"

#: docs/10.x/errors.md:block 56 (paragraph)
msgid "You may also use the `renderable` method to override the rendering behavior for built-in Laravel or Symfony exceptions such as `NotFoundHttpException`. If the closure given to the `renderable` method does not return a value, Laravel's default exception rendering will be utilized:"
msgstr "也可以使用 `renderable` 方法來複寫 Laravel 或 Symfony 內建 Exception 的轉移行外。如：`NotFoundHttpException`。若傳給 `renderable` 方法的閉包未回傳任何值，則會使用 Laravel 的預設 Exception 轉譯："

#: docs/10.x/errors.md:block 57 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, Request $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}\n"
msgstr "use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, Request $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}\n"

#: docs/10.x/errors.md:block 59 (header)
msgid "Reportable and Renderable Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 60 (paragraph)
msgid "Instead of defining custom reporting and rendering behavior in your exception handler's `register` method, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr "除了在 Exception Handler 的 `register` 方法中定義回報與轉譯行為，也可以直接在專案的 Exception 中定義 `report` 與 `render` 方法。當 Exception 中有這些方法時，Laravel 會自動呼叫該方法："

#: docs/10.x/errors.md:block 61 (code)
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     */\n"
"    public function report(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     */\n"
"    public function render(Request $request): Response\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     */\n"
"    public function report(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     */\n"
"    public function render(Request $request): Response\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}\n"

#: docs/10.x/errors.md:block 62 (paragraph)
msgid "If your exception extends an exception that is already renderable, such as a built-in Laravel or Symfony exception, you may return `false` from the exception's `render` method to render the exception's default HTTP response:"
msgstr "若你的 Exception 繼承的 Exception 已經是^[可轉譯的](Renderable)了 (如 Laravel 或 Symfony 內建的 Exception)，可在該 Exception 的 `render` 方法內回傳 `false` 來轉譯某個 Exception 的預設 HTTP Response："

#: docs/10.x/errors.md:block 63 (code)
msgid "/**\n"
" * Render the exception into an HTTP response.\n"
" */\n"
"public function render(Request $request): Response|bool\n"
"{\n"
"    if (/** Determine if the exception needs custom rendering */) {\n\n"
"        return response(/* ... */);\n"
"    }\n\n"
"    return false;\n"
"}\n"
msgstr "/**\n"
" * Render the exception into an HTTP response.\n"
" */\n"
"public function render(Request $request): Response|bool\n"
"{\n"
"    if (/** 判斷 Exception 是否需要自定轉譯程式 */) {\n\n"
"        return response(/* ... */);\n"
"    }\n\n"
"    return false;\n"
"}\n"

#: docs/10.x/errors.md:block 64 (paragraph)
msgid "If your exception contains custom reporting logic that is only necessary when certain conditions are met, you may need to instruct Laravel to sometimes report the exception using the default exception handling configuration. To accomplish this, you may return `false` from the exception's `report` method:"
msgstr "若你的 Exception 中包含了只有在特定情況下才會使用的自訂回報邏輯，則可讓 Laravel 在某些時候使用預設的 Exception 處理設定來回報這個 Exception。若要這麼做，請在該 Exception 的 `report` 方法內回傳 `false`："

#: docs/10.x/errors.md:block 65 (code)
msgid "/**\n"
" * Report the exception.\n"
" */\n"
"public function report(): bool\n"
"{\n"
"    if (/** Determine if the exception needs custom reporting */) {\n\n"
"        // ...\n\n"
"        return true;\n"
"    }\n\n"
"    return false;\n"
"}\n"
msgstr "/**\n"
" * Report the exception.\n"
" */\n"
"public function report(): bool\n"
"{\n"
"    if (/** 判斷 Exception 是否需要自定回報邏輯 */) {\n\n"
"        // ...\n\n"
"        return true;\n"
"    }\n\n"
"    return false;\n"
"}\n"

#: docs/10.x/errors.md:block 66 (quote)
msgid "[!NOTE] You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/10.x/errors.md:block 68 (header)
msgid "Throttling Reported Exceptions"
msgstr "頻率限制回報的 Exception"

#: docs/10.x/errors.md:block 69 (paragraph)
msgid "If your application reports a very large number of exceptions, you may want to throttle how many exceptions are actually logged or sent to your application's external error tracking service."
msgstr "若你的專案會回報大量的 Exception，則你可能會想針對實際要被 Log 與傳送到專案外部錯誤追蹤服務的 Exception 進行頻率限制。"

#: docs/10.x/errors.md:block 70 (paragraph)
msgid "To take a random sample rate of exceptions, you can return a `Lottery` instance from your exception handler's `throttle` method. If your `App\\Exceptions\\Handler` class does not contain this method, you may simply add it to the class:"
msgstr "若要對 Exception 採用隨機的採樣率，可以在 Exception Handler 的 `throttle` 方法中回傳 Lottery 實體。若 `App\\Exceptions\\Handler` 類別中沒有此方法，只需要將其加入類別即可："

#: docs/10.x/errors.md:block 71 (code)
msgid "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return Lottery::odds(1, 1000);\n"
"}\n"
msgstr "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return Lottery::odds(1, 1000);\n"
"}\n"

#: docs/10.x/errors.md:block 72 (paragraph)
msgid "It is also possible to conditionally sample based on the exception type. If you would like to only sample instances of a specific exception class, you may return a `Lottery` instance only for that class:"
msgstr "也可以根據 Exception 的型別來有條件地採樣。若只想採樣特定 Exception 類別的實體，只需要針對該類別回傳 `Lottery` 實體即可："

#: docs/10.x/errors.md:block 73 (code)
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof ApiMonitoringException) {\n"
"        return Lottery::odds(1, 1000);\n"
"    }\n"
"}\n"
msgstr "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof ApiMonitoringException) {\n"
"        return Lottery::odds(1, 1000);\n"
"    }\n"
"}\n"

#: docs/10.x/errors.md:block 74 (paragraph)
msgid "You may also rate limit exceptions logged or sent to an external error tracking service by returning a `Limit` instance instead of a `Lottery`. This is useful if you want to protect against sudden bursts of exceptions flooding your logs, for example, when a third-party service used by your application is down:"
msgstr "若不回傳 `Lottery` 而回傳 `Limit` 實體的話，就可以針對 Exception 的 Log 或傳送到外部錯誤追蹤服務進行頻率限制。這麼做可以避免突然增加的 Exception 使 Log 暴增，例如當網站使用的第三方服務突然離線的情況："

#: docs/10.x/errors.md:block 75 (code)
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300);\n"
"    }\n"
"}\n"
msgstr "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300);\n"
"    }\n"
"}\n"

#: docs/10.x/errors.md:block 76 (paragraph)
msgid "By default, limits will use the exception's class as the rate limit key. You can customize this by specifying your own key using the `by` method on the `Limit`:"
msgstr "預設情況下，會使用 Exception 的類別名稱來作為頻率限制的索引鍵。可以在 `Limit` 上使用 `by` 方法來指定自定的索引鍵："

#: docs/10.x/errors.md:block 77 (code)
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300)->by($e->getMessage());\n"
"    }\n"
"}\n"
msgstr "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300)->by($e->getMessage());\n"
"    }\n"
"}\n"

#: docs/10.x/errors.md:block 78 (paragraph)
msgid "Of course, you may return a mixture of `Lottery` and `Limit` instances for different exceptions:"
msgstr "當然，可以在不同的 Exception 間混合使用 `Lottery` 與 `Limit` 實體："

#: docs/10.x/errors.md:block 79 (code)
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return match (true) {\n"
"        $e instanceof BroadcastException => Limit::perMinute(300),\n"
"        $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"        default => Limit::none(),\n"
"    };\n"
"}\n"
msgstr "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return match (true) {\n"
"        $e instanceof BroadcastException => Limit::perMinute(300),\n"
"        $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"        default => Limit::none(),\n"
"    };\n"
"}\n"

#: docs/10.x/errors.md:block 81 (header)
msgid "HTTP Exceptions"
msgstr "HTTP Exception"

#: docs/10.x/errors.md:block 82 (paragraph)
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401), or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr "有的 Exception 是用來描述伺服器的 HTTP 錯誤代碼。例如，這些 Exception 可能是：「找不到頁面」錯誤 (404)、「未經授權」錯誤 (401) 等，甚至是開發人員造成的 500 錯誤。在你的程式中的任何地點內，若要產生這種 Response，可使用 `abort` ^[輔助函式](Helper)："

#: docs/10.x/errors.md:block 83 (code)
msgid "abort(404);\n"
msgstr "abort(404);\n"

#: docs/10.x/errors.md:block 85 (header)
msgid "Custom HTTP Error Pages"
msgstr "自訂 HTTP 錯誤頁面"

#: docs/10.x/errors.md:block 86 (paragraph)
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered for all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr "在 Laravel 中，要給各種 HTTP 狀態碼顯示自訂錯誤頁非常容易。舉例來說，若要自訂 404 HTTP 狀態碼的錯誤頁面，請建立 `resources/views/errors/404.blade.php` View 樣板。程式中只要產生 404 錯誤，就會轉譯這個 View。在該目錄中的 View 應以對應的 HTTP 狀態碼來命名。由 `abort` 函式產生的 `Symfony\\Component\\HttpKernel\\Exception\\HttpException` 實體會以 `$exception` 變數傳給該 View："

#: docs/10.x/errors.md:block 87 (code)
msgid "<h2>{{ $exception->getMessage() }}</h2>\n"
msgstr "<h2>{{ $exception->getMessage() }}</h2>\n"

#: docs/10.x/errors.md:block 88 (paragraph)
msgid "You may publish Laravel's default error page templates using the `vendor:publish` Artisan command. Once the templates have been published, you may customize them to your liking:"
msgstr "可以使用 `vendor:publish` Artisan 指令來將 Laravel 的預設錯誤頁樣板^[安裝](Publish)到專案內。安裝好樣板後，就可以隨意自訂這些樣板："

#: docs/10.x/errors.md:block 89 (code)
msgid "php artisan vendor:publish --tag=laravel-errors\n"
msgstr "php artisan vendor:publish --tag=laravel-errors\n"

#: docs/10.x/errors.md:block 91 (header)
msgid "Fallback HTTP Error Pages"
msgstr "^[遞補](Fallback)的 HTTP 錯誤頁"

#: docs/10.x/errors.md:block 92 (paragraph)
msgid "You may also define a \"fallback\" error page for a given series of HTTP status codes. This page will be rendered if there is not a corresponding page for the specific HTTP status code that occurred. To accomplish this, define a `4xx.blade.php` template and a `5xx.blade.php` template in your application's `resources/views/errors` directory."
msgstr "可以為給定的一系列 HTTP 狀態碼定義一個「遞補的」錯誤頁面。當發生的 HTTP 狀態碼沒有對應頁面時，就會轉譯這個遞補的頁面。若要使用遞補頁面，請在專案的 `resources/views/errors` 目錄下定義一個 `4xx.blade.php` 樣板與 `5xx.blade.php` 樣板。"

#: docs/11.x/errors.md:block 2 (unordered list)
msgid "[Handling Exceptions](#handling-exceptions)"
msgstr ""

#: docs/11.x/errors.md:block 5 (paragraph)
msgid "When you start a new Laravel project, error and exception handling is already configured for you; however, at any point, you may use the `withExceptions` method in your application's `bootstrap/app.php` to manage how exceptions are reported and rendered by your application."
msgstr ""

#: docs/11.x/errors.md:block 6 (paragraph)
msgid "The `$exceptions` object provided to the `withExceptions` closure is an instance of `Illuminate\\Foundation\\Configuration\\Exceptions` and is responsible for managing exception handling in your application. We'll dive deeper into this object throughout this documentation."
msgstr ""

#: docs/11.x/errors.md:block 12 (header)
msgid "Handling Exceptions"
msgstr ""

#: docs/11.x/errors.md:block 15 (paragraph)
msgid "In Laravel, exception reporting is used to log exceptions or send them to an external service [Sentry](https://github.com/getsentry/sentry-laravel) or [Flare](https://flareapp.io). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#: docs/11.x/errors.md:block 16 (paragraph)
msgid "If you need to report different types of exceptions in different ways, you may use the `report` exception method in your application's `bootstrap/app.php` to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will determine what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#: docs/11.x/errors.md:block 17 (code)
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->report(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 18 (paragraph)
msgid "When you register a custom exception reporting callback using the `report` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr ""

#: docs/11.x/errors.md:block 19 (code)
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->report(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    })->stop();\n\n"
"    $exceptions->report(function (InvalidOrderException $e) {\n"
"        return false;\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 23 (paragraph)
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data using the `context` exception method in your application's `bootstrap/app.php` file. This information will be included in every exception's log message written by your application:"
msgstr ""

#: docs/11.x/errors.md:block 24 (code)
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->context(fn () => [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 31 (paragraph)
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception without rendering an error page to the user:"
msgstr ""

#: docs/11.x/errors.md:block 36 (paragraph)
msgid "If you would like to ensure that a single instance of an exception is only ever reported once, you may invoke the `dontReportDuplicates` exception method in your application's `bootstrap/app.php` file:"
msgstr ""

#: docs/11.x/errors.md:block 37 (code)
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->dontReportDuplicates();\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 43 (paragraph)
msgid "As noted above, even when you register a custom exception reporting callback using the `report` method, Laravel will still log the exception using the default logging configuration for the application; however, since the log level can sometimes influence the channels on which a message is logged, you may wish to configure the log level that certain exceptions are logged at."
msgstr ""

#: docs/11.x/errors.md:block 44 (paragraph)
msgid "To accomplish this, you may use the `level` exception method in your application's `bootstrap/app.php` file. This method receives the exception type as its first argument and the log level as its second argument:"
msgstr ""

#: docs/11.x/errors.md:block 45 (code)
msgid "use PDOException;\n"
"use Psr\\Log\\LogLevel;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->level(PDOException::class, LogLevel::CRITICAL);\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 48 (paragraph)
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, you may use the `dontReport` exception method in your application's `bootstrap/app.php` file. Any class provided to this method will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: docs/11.x/errors.md:block 49 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->dontReport([\n"
"        InvalidOrderException::class,\n"
"    ]);\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 50 (paragraph)
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may use the `stopIgnoring` exception method in your application's `bootstrap/app.php` file:"
msgstr ""

#: docs/11.x/errors.md:block 51 (code)
msgid "use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->stopIgnoring(HttpException::class);\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 54 (paragraph)
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by using the `render` exception method in your application's `bootstrap/app.php` file."
msgstr ""

#: docs/11.x/errors.md:block 55 (paragraph)
msgid "The closure passed to the `render` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will determine what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#: docs/11.x/errors.md:block 56 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->render(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 57 (paragraph)
msgid "You may also use the `render` method to override the rendering behavior for built-in Laravel or Symfony exceptions such as `NotFoundHttpException`. If the closure given to the `render` method does not return a value, Laravel's default exception rendering will be utilized:"
msgstr ""

#: docs/11.x/errors.md:block 58 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->render(function (NotFoundHttpException $e, Request $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 60 (header)
msgid "Rendering Exceptions as JSON"
msgstr ""

#: docs/11.x/errors.md:block 61 (paragraph)
msgid "When rendering an exception, Laravel will automatically determine if the exception should be rendered as an HTML or JSON response based on the `Accept` header of the request. If you would like to customize how Laravel determines whether to render HTML or JSON exception responses, you may utilize the `shouldRenderJsonWhen` method:"
msgstr ""

#: docs/11.x/errors.md:block 62 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->shouldRenderJsonWhen(function (Request $request, Throwable $e) {\n"
"        if ($request->is('admin/*')) {\n"
"            return true;\n"
"        }\n\n"
"        return $request->expectsJson();\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 64 (header)
msgid "Customizing the Exception Response"
msgstr ""

#: docs/11.x/errors.md:block 65 (paragraph)
msgid "Rarely, you may need to customize the entire HTTP response rendered by Laravel's exception handler. To accomplish this, you may register a response customization closure using the `respond` method:"
msgstr ""

#: docs/11.x/errors.md:block 66 (code)
msgid "use Symfony\\Component\\HttpFoundation\\Response;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->respond(function (Response $response) {\n"
"        if ($response->getStatusCode() === 419) {\n"
"            return back()->with([\n"
"                'message' => 'The page expired, please try again.',\n"
"            ]);\n"
"        }\n\n"
"        return $response;\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 69 (paragraph)
msgid "Instead of defining custom reporting and rendering behavior in your application's `bootstrap/app.php` file, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr ""

#: docs/11.x/errors.md:block 79 (paragraph)
msgid "To take a random sample rate of exceptions, you may use the `throttle` exception method in your application's `bootstrap/app.php` file. The `throttle` method receives a closure that should return a `Lottery` instance:"
msgstr ""

#: docs/11.x/errors.md:block 80 (code)
msgid "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        return Lottery::odds(1, 1000);\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 82 (code)
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        if ($e instanceof ApiMonitoringException) {\n"
"            return Lottery::odds(1, 1000);\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 84 (code)
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300);\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 86 (code)
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300)->by($e->getMessage());\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 88 (code)
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        return match (true) {\n"
"            $e instanceof BroadcastException => Limit::perMinute(300),\n"
"            $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"            default => Limit::none(),\n"
"        };\n"
"    });\n"
"})\n"
msgstr ""

#: docs/11.x/errors.md:block 102 (paragraph)
msgid "When defining fallback error pages, the fallback pages will not affect `404`, `500`, and `503` error responses since Laravel has internal, dedicated pages for these status codes. To customize the pages rendered for these status codes, you should define a custom error page for each of them individually."
msgstr ""

#: docs/8.x/errors.md:block 2 (unordered list)
msgid "[Ignoring Exceptions By Type](#ignoring-exceptions-by-type)"
msgstr "[依照型別忽略 Exception](#ignoring-exceptions-by-type)"

#: docs/8.x/errors.md:block 2 (unordered list)
msgid "[Reportable & Renderable Exceptions](#renderable-exceptions)"
msgstr "[Reportable 與 Renderable 的 Exception](#renderable-exceptions)"

#: docs/8.x/errors.md:block 2 (unordered list)
msgid "[Mapping Exceptions By Type](#mapping-exceptions-by-type)"
msgstr "[依型別映射 Exception](#mapping-exceptions-by-type)"

#: docs/8.x/errors.md:block 14 (paragraph)
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com) or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr "所有的 Exception 都由 `App\\Exceptions\\Handler` 類別負責處理。該類別中包含了一個 `register` 方法，可用來註冊所有自訂的 Exception 回報與轉譯回呼。我們來詳細看看其中各個概念。「回報 Exception」就是指將例外紀錄到 ^[Log](日誌)，或是傳送到如 [Flare](https://flareapp.io)、[Bugsnag](https://bugsnag.com)、[Sentry](https://github.com/getsentry/sentry-laravel)⋯⋯等外部服務。預設情況下，Laravel 會使用專案的[Log](/docs/{{version}}/logging) 設定來紀錄 Exception。不過，我們也可以隨意調整 Exception 要如何紀錄。"

#: docs/8.x/errors.md:block 15 (paragraph)
msgid "For example, if you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will deduce what type of exception the closure reports by examining the type-hint of the closure:"
msgstr "舉例來說，如果想以不同的方式回報不同類型的 Exception，可以使用 `reportable` 方法來註冊一個閉包。這個閉包會在給定類型的 Exception 需要回報時被呼叫。Laravel 會自動使用該閉包的^[型別提示](Type-Hint)來推導該閉包接受什麼類型的 Exception："

#: docs/8.x/errors.md:block 16 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    });\n"
"}\n"
msgstr "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    });\n"
"}\n"

#: docs/8.x/errors.md:block 18 (code)
msgid "$this->reportable(function (InvalidOrderException $e) {\n"
"    //\n"
"})->stop();\n\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});\n"
msgstr "$this->reportable(function (InvalidOrderException $e) {\n"
"    //\n"
"})->stop();\n\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});\n"

#: docs/8.x/errors.md:block 19 (quote)
msgid "{tip} To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)."
msgstr "{tip} 若要為給定的例外自訂 Exception 回報，可使用 [Reportable 的例外](/docs/{{version}}/errors#renderable-exceptions)。"

#: docs/8.x/errors.md:block 22 (paragraph)
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by overriding the `context` method of your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr "當有目前使用者 ID 的時候，Laravel 會自動將使用者 ID 加到所有的例外 Log 訊息，以作為^[上下文](Context)資料。可以複寫專案中 `App\\Exceptions\\Handler` 類別的 `context` 來定義你自己的全域上下文資料。這個資料會被包含在專案輸出的所有例外 Log 訊息中："

#: docs/8.x/errors.md:block 23 (code)
msgid "/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function context()\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function context()\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}\n"

#: docs/8.x/errors.md:block 26 (paragraph)
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's custom exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr "為所有 Log 訊息都新增額外的上下文可能會很實用，但有些特別的 Exception 可能會有一些獨特的上下文，而我們也想將這類上下文加到 Log 上。只要在我們的其中一個自訂 Exception 中定義一個 `context` 方法，就可以指定與該 Exception 相關的資料，將這些資料包含到例外的 Log 中："

#: docs/8.x/errors.md:block 27 (code)
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function context()\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function context()\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}\n"

#: docs/8.x/errors.md:block 31 (code)
msgid "public function isValid($value)\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr "public function isValid($value)\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n\n"
"        return false;\n"
"    }\n"
"}\n"

#: docs/8.x/errors.md:block 33 (header)
msgid "Ignoring Exceptions By Type"
msgstr "以類型忽略例外"

#: docs/8.x/errors.md:block 34 (paragraph)
msgid "When building your application, there will be some types of exceptions you simply want to ignore and never report. Your application's exception handler contains a `$dontReport` property which is initialized to an empty array. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr "在製作專案時，我們可能會想忽略一些類型的 Exception，讓這些 Exception 永遠不要被回報。在專案中的 Exception Handler 中包含了一個 `$dontReport` 屬性，該屬性被初始化為空陣列。只要將任何類別加到該屬性中，這些類別就不會被回報。不過，還是可以為這些類別定義自訂的轉譯邏輯："

#: docs/8.x/errors.md:block 35 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * A list of the exception types that should not be reported.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];\n"
msgstr "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * A list of the exception types that should not be reported.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];\n"

#: docs/8.x/errors.md:block 36 (quote)
msgid "{tip} Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens."
msgstr "{tip} Laravel 已經預先幫你在內部忽略了一些類型的錯誤。如：產生 404 HTTP「找不到」錯誤的 Exception、還有因為無效 CSRF Token 產生的 419 HTTP Response。"

#: docs/8.x/errors.md:block 39 (paragraph)
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this via the `renderable` method of your exception handler."
msgstr "預設情況下，Laravel 的 Exception Handler 會幫你把 Exception 轉成 HTTP Response。不過，我們也可以自由地為某個類型的 Exception 註冊自訂^[轉譯閉包](Rendering Closure)。只要使用 Exception Handler 的 `renderable` 方法，就註冊轉譯閉包。"

#: docs/8.x/errors.md:block 40 (paragraph)
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will deduce what type of exception the closure renders by examining the type-hint of the closure:"
msgstr "傳給 `renderable` 方法的閉包應回傳一個 `Illuminate\\Http\\Response` 的實體。可以使用 `response` 輔助函式來產生該實體。Laravel 會依照該閉包的型別提示來判斷這個閉包能轉移哪種類型的 Exception："

#: docs/8.x/errors.md:block 41 (code)
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}\n"
msgstr "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}\n"

#: docs/8.x/errors.md:block 43 (code)
msgid "use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}\n"
msgstr "use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}\n"

#: docs/8.x/errors.md:block 45 (header)
msgid "Reportable & Renderable Exceptions"
msgstr "^[可回報](Reportable)與^[可轉譯](Renderable)的 Exception"

#: docs/8.x/errors.md:block 46 (paragraph)
msgid "Instead of type-checking exceptions in the exception handler's `register` method, you may define `report` and `render` methods directly on your custom exceptions. When these methods exist, they will be automatically called by the framework:"
msgstr "除了在 Exception Handler 的 `register` 方法上設定 Exception 的類型外，我們還可以直接在我們的自訂 Exception 上定義 `report` 與 `render` 方法。當這些方法存在時，Laravel 會自動呼叫這些方法："

#: docs/8.x/errors.md:block 47 (code)
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(...);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(...);\n"
"    }\n"
"}\n"

#: docs/8.x/errors.md:block 49 (code)
msgid "/**\n"
" * Render the exception into an HTTP response.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function render($request)\n"
"{\n"
"    // Determine if the exception needs custom rendering...\n\n"
"    return false;\n"
"}\n"
msgstr "/**\n"
" * Render the exception into an HTTP response.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function render($request)\n"
"{\n"
"    // Determine if the exception needs custom rendering...\n\n"
"    return false;\n"
"}\n"

#: docs/8.x/errors.md:block 51 (code)
msgid "/**\n"
" * Report the exception.\n"
" *\n"
" * @return bool|null\n"
" */\n"
"public function report()\n"
"{\n"
"    // Determine if the exception needs custom reporting...\n\n"
"    return false;\n"
"}\n"
msgstr "/**\n"
" * Report the exception.\n"
" *\n"
" * @return bool|null\n"
" */\n"
"public function report()\n"
"{\n"
"    // Determine if the exception needs custom reporting...\n\n"
"    return false;\n"
"}\n"

#: docs/8.x/errors.md:block 52 (quote)
msgid "{tip} You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container)."
msgstr "{tip} 可以在 `report` 方法中型別提示任何的^[相依性](Dependency)。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動插入這些相依性。"

#: docs/8.x/errors.md:block 54 (header)
msgid "Mapping Exceptions By Type"
msgstr "依型別映射 Exception"

#: docs/8.x/errors.md:block 55 (paragraph)
msgid "Sometimes, third-party libraries used by your application may throw exceptions that you wish to make [renderable](#renderable-exceptions), but are unable to do so because you do not have control over the definitions of third-party exceptions."
msgstr "專案中使用的第三方函式庫可能會擲回 Exception，而有時候我們會想讓這些 Exception 變成是[可被轉譯](#renderable-exceptions)的，但因為我們無法控制第三方的 Exception，因此無法做到。"

#: docs/8.x/errors.md:block 56 (paragraph)
msgid "Thankfully, Laravel allows you to conveniently map these exceptions to other exception types that you manage within your application. To accomplish this, call the `map` method from your exception handler's `register` method:"
msgstr "幸好，在 Laravel 中，我們可以將這些 Exception 映射為其他由專案所管理的 Exception 型別。若要映射這些 Exception，可以在 Exception Handler 的 `register` 方法內呼叫 `map` 方法："

#: docs/8.x/errors.md:block 57 (code)
msgid "use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->map(Exception::class, FilesystemException::class);\n"
"}\n"
msgstr "use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->map(Exception::class, FilesystemException::class);\n"
"}\n"

#: docs/8.x/errors.md:block 58 (paragraph)
msgid "If you would like more control over the creation of the target exception, you may pass a closure to the `map` method:"
msgstr "若想進一步控制目標 Exception，可以傳入一個閉包給 `map` 方法："

#: docs/8.x/errors.md:block 59 (code)
msgid "use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n\n"
"$this->map(fn (Exception $e) => new FilesystemException($e));\n"
msgstr "use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n\n"
"$this->map(fn (Exception $e) => new FilesystemException($e));\n"

#: docs/8.x/errors.md:block 62 (paragraph)
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr "有的 Exception 是用來描述伺服器的 HTTP 錯誤代碼。例如，這些 Exception 可能是：「找不到頁面」錯誤 (404)、「未經授權」錯誤 (401)⋯⋯等，甚至是開發人員造成的 500 錯誤。在你的程式中的任何地點內，若要產生這種 Response，可使用 `abort` ^[輔助函式](Helper)："

#: docs/8.x/errors.md:block 66 (paragraph)
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, if you wish to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered on all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr "在 Laravel 中，要給各種 HTTP 狀態碼顯示自訂錯誤頁非常容易。舉例來說，若要自訂 404 HTTP 狀態碼的錯誤頁面，請建立 `resources/views/errors/404.blade.php` View 樣板。程式中只要產生 404 錯誤，就會轉譯這個 View。在該目錄中的 View 應以對應的 HTTP 狀態碼來命名。由 `abort` 函式產生的 `Symfony\\Component\\HttpKernel\\Exception\\HttpException` 實體會以 `$exception` 變數傳給該 View："

#: docs/9.x/errors.md:block 19 (quote)
msgid "**Note** To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)."
msgstr "**Note** 若要為給定的例外自訂 Exception 回報，可使用 [Reportable 的例外](/docs/{{version}}/errors#renderable-exceptions)。"

#: docs/9.x/errors.md:block 36 (paragraph)
msgid "To accomplish this, you may define an array of exception types and their associated log levels within the `$levels` property of your application's exception handler:"
msgstr "若要調整 Log 等級，可以在專案的 Exception Handler 上的 `$levels` 屬性中定義一組 Exception 型別於其 Log 等級的陣列："

#: docs/9.x/errors.md:block 42 (quote)
msgid "**Note** Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens."
msgstr "**Note** 在 Laravel 內部，Laravel 已經預先幫你忽略了一些類型的錯誤。如：產生 404 HTTP「找不到」錯誤的 Exception、還有因為無效 CSRF Token 產生的 419 HTTP Response。"

#: docs/9.x/errors.md:block 53 (code)
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}\n"

#: docs/9.x/errors.md:block 58 (quote)
msgid "**Note** You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container)."
msgstr "**Note** 可以在 `report` 方法中型別提示任何的^[相依性](Dependency)。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動插入這些相依性。"

#: docs/master/errors.md:block 48 (paragraph)
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, you may use the `dontReport` exception method in your application's `boostrap/app.php` file. Any class provided to this method will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: docs/master/errors.md:block 50 (paragraph)
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may use the `stopIgnoring` exception method in your application's `boostrap/app.php` file:"
msgstr ""

#: docs/master/errors.md:block 54 (paragraph)
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by using the `render` exception method in your application's `boostrap/app.php` file."
msgstr ""

#: docs/master/errors.md:block 61 (paragraph)
msgid "When rendering an exception, Laravel will automatically determine if the exception should be rendered as an HTML or JSON response based on the `Content-Type` header of the request. If you would like to customize how Laravel determines whether to render HTML or JSON exception responses, you may utilize the `shouldRenderJsonWhen` method:"
msgstr ""

#: docs/master/errors.md:block 69 (paragraph)
msgid "Instead of defining custom reporting and rendering behavior in your application's `boostrap/app.php` file, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr ""

#: docs/master/errors.md:block 80 (code)
msgid "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        return Lottery::odds(1, 1000);\n"
"    });\n"
"})\n"
msgstr ""

#: docs/master/errors.md:block 82 (code)
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        if ($e instanceof ApiMonitoringException) {\n"
"            return Lottery::odds(1, 1000);\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/master/errors.md:block 84 (code)
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300);\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/master/errors.md:block 86 (code)
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300)->by($e->getMessage());\n"
"        }\n"
"    });\n"
"})\n"
msgstr ""

#: docs/master/errors.md:block 88 (code)
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        return match (true) {\n"
"            $e instanceof BroadcastException => Limit::perMinute(300),\n"
"            $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"            default => Limit::none(),\n"
"        };\n"
"    });\n"
"})\n"
msgstr ""

