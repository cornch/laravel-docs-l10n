msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/http-client.pot\n"
"X-Crowdin-File-ID: 85\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 06:48\n"

#: ./docs/8.x/http-client.md:1
#: ./docs/9.x/http-client.md:1
#: ./docs/10.x/http-client.md:1
#: ./docs/11.x/http-client.md:1
#: ./docs/master/http-client.md:1
msgctxt "H1"
msgid "HTTP Client"
msgstr ""

#: ./docs/8.x/http-client.md:3
#: ./docs/9.x/http-client.md:3
#: ./docs/10.x/http-client.md:3
#: ./docs/11.x/http-client.md:3
#: ./docs/master/http-client.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/http-client.md:4
#: ./docs/9.x/http-client.md:4
#: ./docs/10.x/http-client.md:4
#: ./docs/11.x/http-client.md:4
#: ./docs/master/http-client.md:4
msgctxt "P"
msgid "[Making Requests](#making-requests)"
msgstr ""

#: ./docs/8.x/http-client.md:5
#: ./docs/9.x/http-client.md:5
#: ./docs/10.x/http-client.md:5
#: ./docs/11.x/http-client.md:5
#: ./docs/master/http-client.md:5
msgctxt "P"
msgid "[Request Data](#request-data)"
msgstr ""

#: ./docs/8.x/http-client.md:6
#: ./docs/9.x/http-client.md:6
#: ./docs/10.x/http-client.md:6
#: ./docs/11.x/http-client.md:6
#: ./docs/master/http-client.md:6
msgctxt "P"
msgid "[Headers](#headers)"
msgstr ""

#: ./docs/8.x/http-client.md:7
#: ./docs/9.x/http-client.md:7
#: ./docs/10.x/http-client.md:7
#: ./docs/11.x/http-client.md:7
#: ./docs/master/http-client.md:7
msgctxt "P"
msgid "[Authentication](#authentication)"
msgstr ""

#: ./docs/8.x/http-client.md:8
#: ./docs/9.x/http-client.md:8
#: ./docs/10.x/http-client.md:8
#: ./docs/11.x/http-client.md:8
#: ./docs/master/http-client.md:8
msgctxt "P"
msgid "[Timeout](#timeout)"
msgstr ""

#: ./docs/8.x/http-client.md:9
#: ./docs/9.x/http-client.md:9
#: ./docs/10.x/http-client.md:9
#: ./docs/11.x/http-client.md:9
#: ./docs/master/http-client.md:9
msgctxt "P"
msgid "[Retries](#retries)"
msgstr ""

#: ./docs/8.x/http-client.md:10
#: ./docs/9.x/http-client.md:10
#: ./docs/10.x/http-client.md:10
#: ./docs/11.x/http-client.md:10
#: ./docs/master/http-client.md:10
msgctxt "P"
msgid "[Error Handling](#error-handling)"
msgstr ""

#: ./docs/8.x/http-client.md:11
#: ./docs/9.x/http-client.md:12
#: ./docs/10.x/http-client.md:12
#: ./docs/11.x/http-client.md:12
#: ./docs/master/http-client.md:12
msgctxt "P"
msgid "[Guzzle Options](#guzzle-options)"
msgstr ""

#: ./docs/9.x/http-client.md:11
#: ./docs/10.x/http-client.md:11
#: ./docs/11.x/http-client.md:11
#: ./docs/master/http-client.md:11
msgctxt "P"
msgid "[Guzzle Middleware](#guzzle-middleware)"
msgstr ""

#: ./docs/8.x/http-client.md:12
#: ./docs/9.x/http-client.md:13
#: ./docs/10.x/http-client.md:13
#: ./docs/11.x/http-client.md:13
#: ./docs/master/http-client.md:13
msgctxt "P"
msgid "[Concurrent Requests](#concurrent-requests)"
msgstr ""

#: ./docs/8.x/http-client.md:13
#: ./docs/9.x/http-client.md:14
#: ./docs/10.x/http-client.md:14
#: ./docs/11.x/http-client.md:14
#: ./docs/master/http-client.md:14
msgctxt "P"
msgid "[Macros](#macros)"
msgstr ""

#: ./docs/8.x/http-client.md:14
#: ./docs/9.x/http-client.md:15
#: ./docs/10.x/http-client.md:15
#: ./docs/11.x/http-client.md:15
#: ./docs/master/http-client.md:15
msgctxt "P"
msgid "[Testing](#testing)"
msgstr ""

#: ./docs/8.x/http-client.md:15
#: ./docs/9.x/http-client.md:16
#: ./docs/10.x/http-client.md:16
#: ./docs/11.x/http-client.md:16
#: ./docs/master/http-client.md:16
msgctxt "P"
msgid "[Faking Responses](#faking-responses)"
msgstr ""

#: ./docs/8.x/http-client.md:16
#: ./docs/9.x/http-client.md:17
#: ./docs/10.x/http-client.md:17
#: ./docs/11.x/http-client.md:17
#: ./docs/master/http-client.md:17
msgctxt "P"
msgid "[Inspecting Requests](#inspecting-requests)"
msgstr ""

#: ./docs/8.x/http-client.md:17
#: ./docs/9.x/http-client.md:19
#: ./docs/10.x/http-client.md:19
#: ./docs/11.x/http-client.md:19
#: ./docs/master/http-client.md:19
msgctxt "P"
msgid "[Events](#events)"
msgstr ""

#: ./docs/9.x/http-client.md:18
#: ./docs/10.x/http-client.md:18
#: ./docs/11.x/http-client.md:18
#: ./docs/master/http-client.md:18
msgctxt "P"
msgid "[Preventing Stray Requests](#preventing-stray-requests)"
msgstr ""

#: ./docs/8.x/http-client.md:19
#: ./docs/9.x/http-client.md:21
#: ./docs/10.x/http-client.md:21
#: ./docs/11.x/http-client.md:21
#: ./docs/master/http-client.md:21
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:20
#: ./docs/9.x/http-client.md:22
#: ./docs/10.x/http-client.md:22
#: ./docs/11.x/http-client.md:22
#: ./docs/master/http-client.md:22
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/http-client.md:22
#: ./docs/9.x/http-client.md:24
#: ./docs/10.x/http-client.md:24
#: ./docs/11.x/http-client.md:24
#: ./docs/master/http-client.md:24
msgctxt "P"
msgid "Laravel provides an expressive, minimal API around the [Guzzle HTTP client](http://docs.guzzlephp.org/en/stable/), allowing you to quickly make outgoing HTTP requests to communicate with other web applications. Laravel's wrapper around Guzzle is focused on its most common use cases and a wonderful developer experience."
msgstr ""

#: ./docs/8.x/http-client.md:24
#: ./docs/9.x/http-client.md:26
#: ./docs/10.x/http-client.md:26
msgctxt "P"
msgid "Before getting started, you should ensure that you have installed the Guzzle package as a dependency of your application. By default, Laravel automatically includes this dependency. However, if you have previously removed the package, you may install it again via Composer:"
msgstr ""

#: ./docs/8.x/http-client.md:26
#: ./docs/9.x/http-client.md:28
#: ./docs/10.x/http-client.md:28
msgctxt "CODE"
msgid "composer require guzzlehttp/guzzle"
msgstr ""

#: ./docs/8.x/http-client.md:28
#: ./docs/9.x/http-client.md:32
#: ./docs/10.x/http-client.md:32
#: ./docs/11.x/http-client.md:26
#: ./docs/master/http-client.md:26
#~ msgctxt "P"
#~ msgid "<a name=\"making-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:29
#: ./docs/9.x/http-client.md:33
#: ./docs/10.x/http-client.md:33
#: ./docs/11.x/http-client.md:27
#: ./docs/master/http-client.md:27
msgctxt "H2"
msgid "Making Requests"
msgstr ""

#: ./docs/8.x/http-client.md:31
#: ./docs/9.x/http-client.md:35
#: ./docs/10.x/http-client.md:35
#: ./docs/11.x/http-client.md:29
#: ./docs/master/http-client.md:29
msgctxt "P"
msgid "To make requests, you may use the `head`, `get`, `post`, `put`, `patch`, and `delete` methods provided by the `Http` facade. First, let's examine how to make a basic `GET` request to another URL:"
msgstr ""

#: ./docs/8.x/http-client.md:33
#: ./docs/9.x/http-client.md:37
#: ./docs/10.x/http-client.md:37
#: ./docs/11.x/http-client.md:31
#: ./docs/master/http-client.md:31
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::get('http://example.com');"
msgstr ""

#: ./docs/11.x/http-client.md:37
msgctxt "CODE"
msgid "$response->body() : string;\n"
"$response->json($key = null, $default = null) : mixed;\n"
"$response->object() : object;\n"
"$response->collect($key = null) : Illuminate\\Support\\Collection;\n"
"$response->resource() : resource;\n"
"$response->status() : int;\n"
"$response->successful() : bool;\n"
"$response->redirect(): bool;\n"
"$response->failed() : bool;\n"
"$response->clientError() : bool;\n"
"$response->header($header) : string;\n"
"$response->headers() : array;"
msgstr ""

#: ./docs/8.x/http-client.md:37
#: ./docs/9.x/http-client.md:41
#: ./docs/10.x/http-client.md:41
#: ./docs/11.x/http-client.md:35
#: ./docs/master/http-client.md:35
msgctxt "P"
msgid "The `get` method returns an instance of `Illuminate\\Http\\Client\\Response`, which provides a variety of methods that may be used to inspect the response:"
msgstr ""

#: ./docs/8.x/http-client.md:39
msgctxt "CODE"
msgid "$response->body() : string;\n"
"$response->json($key = null) : array|mixed;\n"
"$response->object() : object;\n"
"$response->collect($key = null) : Illuminate\\Support\\Collection;\n"
"$response->status() : int;\n"
"$response->ok() : bool;\n"
"$response->successful() : bool;\n"
"$response->redirect(): bool;\n"
"$response->failed() : bool;\n"
"$response->serverError() : bool;\n"
"$response->clientError() : bool;\n"
"$response->header($header) : string;\n"
"$response->headers() : array;"
msgstr ""

#: ./docs/9.x/http-client.md:43
#: ./docs/10.x/http-client.md:43
#: ./docs/master/http-client.md:37
msgctxt "CODE"
msgid "$response->body() : string;\n"
"$response->json($key = null, $default = null) : array|mixed;\n"
"$response->object() : object;\n"
"$response->collect($key = null) : Illuminate\\Support\\Collection;\n"
"$response->status() : int;\n"
"$response->successful() : bool;\n"
"$response->redirect(): bool;\n"
"$response->failed() : bool;\n"
"$response->clientError() : bool;\n"
"$response->header($header) : string;\n"
"$response->headers() : array;"
msgstr ""

#: ./docs/8.x/http-client.md:53
#: ./docs/9.x/http-client.md:55
#: ./docs/10.x/http-client.md:55
#: ./docs/11.x/http-client.md:50
#: ./docs/master/http-client.md:49
msgctxt "P"
msgid "The `Illuminate\\Http\\Client\\Response` object also implements the PHP `ArrayAccess` interface, allowing you to access JSON response data directly on the response:"
msgstr ""

#: ./docs/8.x/http-client.md:55
#: ./docs/9.x/http-client.md:57
#: ./docs/10.x/http-client.md:57
#: ./docs/11.x/http-client.md:52
#: ./docs/master/http-client.md:51
msgctxt "CODE"
msgid "return Http::get('http://example.com/users/1')['name'];"
msgstr ""

#: ./docs/8.x/http-client.md:57
#: ./docs/9.x/http-client.md:92
#: ./docs/10.x/http-client.md:92
#: ./docs/11.x/http-client.md:87
#: ./docs/master/http-client.md:86
#~ msgctxt "P"
#~ msgid "<a name=\"dumping-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:58
#: ./docs/9.x/http-client.md:93
#: ./docs/10.x/http-client.md:93
#: ./docs/11.x/http-client.md:88
#: ./docs/master/http-client.md:87
msgctxt "H4"
msgid "Dumping Requests"
msgstr ""

#: ./docs/9.x/http-client.md:59
#: ./docs/10.x/http-client.md:59
#: ./docs/11.x/http-client.md:54
#: ./docs/master/http-client.md:53
msgctxt "P"
msgid "In addition to the response methods listed above, the following methods may be used to determine if the response has a given status code:"
msgstr ""

#: ./docs/8.x/http-client.md:60
#: ./docs/9.x/http-client.md:95
#: ./docs/10.x/http-client.md:95
#: ./docs/11.x/http-client.md:90
#: ./docs/master/http-client.md:89
msgctxt "P"
msgid "If you would like to dump the outgoing request instance before it is sent and terminate the script's execution, you may add the `dd` method to the beginning of your request definition:"
msgstr ""

#: ./docs/9.x/http-client.md:61
#: ./docs/10.x/http-client.md:61
#: ./docs/11.x/http-client.md:56
#: ./docs/master/http-client.md:55
msgctxt "CODE"
msgid "$response->ok() : bool;                  // 200 OK\n"
"$response->created() : bool;             // 201 Created\n"
"$response->accepted() : bool;            // 202 Accepted\n"
"$response->noContent() : bool;           // 204 No Content\n"
"$response->movedPermanently() : bool;    // 301 Moved Permanently\n"
"$response->found() : bool;               // 302 Found\n"
"$response->badRequest() : bool;          // 400 Bad Request\n"
"$response->unauthorized() : bool;        // 401 Unauthorized\n"
"$response->paymentRequired() : bool;     // 402 Payment Required\n"
"$response->forbidden() : bool;           // 403 Forbidden\n"
"$response->notFound() : bool;            // 404 Not Found\n"
"$response->requestTimeout() : bool;      // 408 Request Timeout\n"
"$response->conflict() : bool;            // 409 Conflict\n"
"$response->unprocessableEntity() : bool; // 422 Unprocessable Entity\n"
"$response->tooManyRequests() : bool;     // 429 Too Many Requests\n"
"$response->serverError() : bool;         // 500 Internal Server Error"
msgstr ""

#: ./docs/8.x/http-client.md:62
#: ./docs/9.x/http-client.md:97
#: ./docs/10.x/http-client.md:97
#: ./docs/11.x/http-client.md:92
#: ./docs/master/http-client.md:91
msgctxt "CODE"
msgid "return Http::dd()->get('http://example.com');"
msgstr ""

#: ./docs/8.x/http-client.md:64
#: ./docs/9.x/http-client.md:99
#: ./docs/10.x/http-client.md:99
#: ./docs/11.x/http-client.md:94
#: ./docs/master/http-client.md:93
#~ msgctxt "P"
#~ msgid "<a name=\"request-data\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:65
#: ./docs/9.x/http-client.md:100
#: ./docs/10.x/http-client.md:100
#: ./docs/11.x/http-client.md:95
#: ./docs/master/http-client.md:94
msgctxt "H3"
msgid "Request Data"
msgstr ""

#: ./docs/8.x/http-client.md:67
#: ./docs/9.x/http-client.md:102
#: ./docs/10.x/http-client.md:102
#: ./docs/11.x/http-client.md:97
#: ./docs/master/http-client.md:96
msgctxt "P"
msgid "Of course, it is common when making `POST`, `PUT`, and `PATCH` requests to send additional data with your request, so these methods accept an array of data as their second argument. By default, data will be sent using the `application/json` content type:"
msgstr ""

#: ./docs/8.x/http-client.md:69
#: ./docs/9.x/http-client.md:104
#: ./docs/10.x/http-client.md:104
#: ./docs/11.x/http-client.md:99
#: ./docs/master/http-client.md:98
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::post('http://example.com/users', [\n"
"    'name' => 'Steve',\n"
"    'role' => 'Network Administrator',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-client.md:76
#: ./docs/9.x/http-client.md:111
#: ./docs/10.x/http-client.md:111
#: ./docs/11.x/http-client.md:106
#: ./docs/master/http-client.md:105
#~ msgctxt "P"
#~ msgid "<a name=\"get-request-query-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:77
#: ./docs/9.x/http-client.md:112
#: ./docs/10.x/http-client.md:112
#: ./docs/11.x/http-client.md:107
#: ./docs/master/http-client.md:106
msgctxt "H4"
msgid "GET Request Query Parameters"
msgstr ""

#: ./docs/11.x/http-client.md:78
#: ./docs/master/http-client.md:77
msgctxt "CODE: php"
msgid "Http::withUrlParameters([\n"
"    'endpoint' => 'https://laravel.com',\n"
"    'page' => 'docs',\n"
"    'version' => '11.x',\n"
"    'topic' => 'validation',\n"
"])->get('{+endpoint}/{page}/{version}/{topic}');"
msgstr ""

#: ./docs/9.x/http-client.md:78
#: ./docs/10.x/http-client.md:78
#: ./docs/11.x/http-client.md:73
#: ./docs/master/http-client.md:72
#~ msgctxt "P"
#~ msgid "<a name=\"uri-templates\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:79
#: ./docs/9.x/http-client.md:114
#: ./docs/10.x/http-client.md:114
#: ./docs/11.x/http-client.md:109
#: ./docs/master/http-client.md:108
msgctxt "P"
msgid "When making `GET` requests, you may either append a query string to the URL directly or pass an array of key / value pairs as the second argument to the `get` method:"
msgstr ""

#: ./docs/9.x/http-client.md:79
#: ./docs/10.x/http-client.md:79
#: ./docs/11.x/http-client.md:74
#: ./docs/master/http-client.md:73
msgctxt "H4"
msgid "URI Templates"
msgstr ""

#: ./docs/8.x/http-client.md:81
#: ./docs/9.x/http-client.md:116
#: ./docs/10.x/http-client.md:116
#: ./docs/11.x/http-client.md:111
#: ./docs/master/http-client.md:110
msgctxt "CODE"
msgid "$response = Http::get('http://example.com/users', [\n"
"    'name' => 'Taylor',\n"
"    'page' => 1,\n"
"]);"
msgstr ""

#: ./docs/9.x/http-client.md:81
#: ./docs/10.x/http-client.md:81
#: ./docs/11.x/http-client.md:76
#: ./docs/master/http-client.md:75
msgctxt "P"
msgid "The HTTP client also allows you to construct request URLs using the [URI template specification](https://www.rfc-editor.org/rfc/rfc6570). To define the URL parameters that can be expanded by your URI template, you may use the `withUrlParameters` method:"
msgstr ""

#: ./docs/9.x/http-client.md:83
#: ./docs/10.x/http-client.md:83
msgctxt "CODE: php"
msgid "Http::withUrlParameters([\n"
"    'endpoint' => 'https://laravel.com',\n"
"    'page' => 'docs',\n"
"    'version' => '9.x',\n"
"    'topic' => 'validation',\n"
"])->get('{+endpoint}/{page}/{version}/{topic}');"
msgstr ""

#: ./docs/8.x/http-client.md:86
#: ./docs/9.x/http-client.md:121
#: ./docs/10.x/http-client.md:128
#: ./docs/11.x/http-client.md:123
#: ./docs/master/http-client.md:122
#~ msgctxt "P"
#~ msgid "<a name=\"sending-form-url-encoded-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:87
#: ./docs/9.x/http-client.md:122
#: ./docs/10.x/http-client.md:129
#: ./docs/11.x/http-client.md:124
#: ./docs/master/http-client.md:123
msgctxt "H4"
msgid "Sending Form URL Encoded Requests"
msgstr ""

#: ./docs/8.x/http-client.md:89
#: ./docs/9.x/http-client.md:124
#: ./docs/10.x/http-client.md:131
#: ./docs/11.x/http-client.md:126
#: ./docs/master/http-client.md:125
msgctxt "P"
msgid "If you would like to send data using the `application/x-www-form-urlencoded` content type, you should call the `asForm` method before making your request:"
msgstr ""

#: ./docs/8.x/http-client.md:91
#: ./docs/9.x/http-client.md:126
#: ./docs/10.x/http-client.md:133
#: ./docs/11.x/http-client.md:128
#: ./docs/master/http-client.md:127
msgctxt "CODE"
msgid "$response = Http::asForm()->post('http://example.com/users', [\n"
"    'name' => 'Sara',\n"
"    'role' => 'Privacy Consultant',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-client.md:96
#: ./docs/9.x/http-client.md:131
#: ./docs/10.x/http-client.md:138
#: ./docs/11.x/http-client.md:133
#: ./docs/master/http-client.md:132
#~ msgctxt "P"
#~ msgid "<a name=\"sending-a-raw-request-body\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:97
#: ./docs/9.x/http-client.md:132
msgctxt "H4"
msgid "Sending A Raw Request Body"
msgstr ""

#: ./docs/8.x/http-client.md:99
#: ./docs/9.x/http-client.md:134
#: ./docs/10.x/http-client.md:141
#: ./docs/11.x/http-client.md:136
#: ./docs/master/http-client.md:135
msgctxt "P"
msgid "You may use the `withBody` method if you would like to provide a raw request body when making a request. The content type may be provided via the method's second argument:"
msgstr ""

#: ./docs/8.x/http-client.md:101
#: ./docs/9.x/http-client.md:136
#: ./docs/10.x/http-client.md:143
#: ./docs/11.x/http-client.md:138
#: ./docs/master/http-client.md:137
msgctxt "CODE"
msgid "$response = Http::withBody(\n"
"    base64_encode($photo), 'image/jpeg'\n"
")->post('http://example.com/photo');"
msgstr ""

#: ./docs/8.x/http-client.md:105
#: ./docs/9.x/http-client.md:140
#: ./docs/10.x/http-client.md:147
#: ./docs/11.x/http-client.md:142
#: ./docs/master/http-client.md:141
#~ msgctxt "P"
#~ msgid "<a name=\"multi-part-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:106
#: ./docs/9.x/http-client.md:141
#: ./docs/10.x/http-client.md:148
#: ./docs/11.x/http-client.md:143
#: ./docs/master/http-client.md:142
msgctxt "H4"
msgid "Multi-Part Requests"
msgstr ""

#: ./docs/8.x/http-client.md:108
#: ./docs/9.x/http-client.md:143
msgctxt "P"
msgid "If you would like to send files as multi-part requests, you should call the `attach` method before making your request. This method accepts the name of the file and its contents. If needed, you may provide a third argument which will be considered the file's filename:"
msgstr ""

#: ./docs/8.x/http-client.md:110
#: ./docs/9.x/http-client.md:145
msgctxt "CODE"
msgid "$response = Http::attach(\n"
"    'attachment', file_get_contents('photo.jpg'), 'photo.jpg'\n"
")->post('http://example.com/attachments');"
msgstr ""

#: ./docs/8.x/http-client.md:114
#: ./docs/9.x/http-client.md:149
#: ./docs/10.x/http-client.md:156
#: ./docs/11.x/http-client.md:151
#: ./docs/master/http-client.md:150
msgctxt "P"
msgid "Instead of passing the raw contents of a file, you may pass a stream resource:"
msgstr ""

#: ./docs/8.x/http-client.md:116
#: ./docs/9.x/http-client.md:151
#: ./docs/10.x/http-client.md:158
#: ./docs/11.x/http-client.md:153
#: ./docs/master/http-client.md:152
msgctxt "CODE"
msgid "$photo = fopen('photo.jpg', 'r');\n\n"
"$response = Http::attach(\n"
"    'attachment', $photo, 'photo.jpg'\n"
")->post('http://example.com/attachments');"
msgstr ""

#: ./docs/10.x/http-client.md:121
#: ./docs/11.x/http-client.md:116
#: ./docs/master/http-client.md:115
msgctxt "P"
msgid "Alternatively, the `withQueryParameters` method may be used:"
msgstr ""

#: ./docs/8.x/http-client.md:122
#: ./docs/9.x/http-client.md:157
#: ./docs/10.x/http-client.md:164
#: ./docs/11.x/http-client.md:159
#: ./docs/master/http-client.md:158
#~ msgctxt "P"
#~ msgid "<a name=\"headers\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-client.md:123
#: ./docs/11.x/http-client.md:118
#: ./docs/master/http-client.md:117
msgctxt "CODE"
msgid "Http::retry(3, 100)->withQueryParameters([\n"
"    'name' => 'Taylor',\n"
"    'page' => 1,\n"
"])->get('http://example.com/users')"
msgstr ""

#: ./docs/8.x/http-client.md:123
#: ./docs/9.x/http-client.md:158
#: ./docs/10.x/http-client.md:165
#: ./docs/11.x/http-client.md:160
#: ./docs/master/http-client.md:159
msgctxt "H3"
msgid "Headers"
msgstr ""

#: ./docs/8.x/http-client.md:125
#: ./docs/9.x/http-client.md:160
#: ./docs/10.x/http-client.md:167
#: ./docs/11.x/http-client.md:162
#: ./docs/master/http-client.md:161
msgctxt "P"
msgid "Headers may be added to requests using the `withHeaders` method. This `withHeaders` method accepts an array of key / value pairs:"
msgstr ""

#: ./docs/8.x/http-client.md:127
#: ./docs/9.x/http-client.md:162
#: ./docs/10.x/http-client.md:169
#: ./docs/11.x/http-client.md:164
#: ./docs/master/http-client.md:163
msgctxt "CODE"
msgid "$response = Http::withHeaders([\n"
"    'X-First' => 'foo',\n"
"    'X-Second' => 'bar'\n"
"])->post('http://example.com/users', [\n"
"    'name' => 'Taylor',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-client.md:134
#: ./docs/9.x/http-client.md:169
#: ./docs/10.x/http-client.md:176
#: ./docs/11.x/http-client.md:171
#: ./docs/master/http-client.md:170
msgctxt "P"
msgid "You may use the `accept` method to specify the content type that your application is expecting in response to your request:"
msgstr ""

#: ./docs/8.x/http-client.md:136
#: ./docs/9.x/http-client.md:171
#: ./docs/10.x/http-client.md:178
#: ./docs/11.x/http-client.md:173
#: ./docs/master/http-client.md:172
msgctxt "CODE"
msgid "$response = Http::accept('application/json')->get('http://example.com/users');"
msgstr ""

#: ./docs/8.x/http-client.md:138
#: ./docs/9.x/http-client.md:173
#: ./docs/10.x/http-client.md:180
#: ./docs/11.x/http-client.md:175
#: ./docs/master/http-client.md:174
msgctxt "P"
msgid "For convenience, you may use the `acceptJson` method to quickly specify that your application expects the `application/json` content type in response to your request:"
msgstr ""

#: ./docs/10.x/http-client.md:139
#: ./docs/11.x/http-client.md:134
#: ./docs/master/http-client.md:133
msgctxt "H4"
msgid "Sending a Raw Request Body"
msgstr ""

#: ./docs/8.x/http-client.md:140
#: ./docs/9.x/http-client.md:175
#: ./docs/10.x/http-client.md:182
#: ./docs/11.x/http-client.md:177
#: ./docs/master/http-client.md:176
msgctxt "CODE"
msgid "$response = Http::acceptJson()->get('http://example.com/users');"
msgstr ""

#: ./docs/8.x/http-client.md:142
#: ./docs/9.x/http-client.md:177
#: ./docs/10.x/http-client.md:196
#: ./docs/11.x/http-client.md:191
#: ./docs/master/http-client.md:190
#~ msgctxt "P"
#~ msgid "<a name=\"authentication\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:143
#: ./docs/9.x/http-client.md:178
#: ./docs/10.x/http-client.md:197
#: ./docs/11.x/http-client.md:192
#: ./docs/master/http-client.md:191
msgctxt "H3"
msgid "Authentication"
msgstr ""

#: ./docs/8.x/http-client.md:145
#: ./docs/9.x/http-client.md:180
#: ./docs/10.x/http-client.md:199
#: ./docs/11.x/http-client.md:194
#: ./docs/master/http-client.md:193
msgctxt "P"
msgid "You may specify basic and digest authentication credentials using the `withBasicAuth` and `withDigestAuth` methods, respectively:"
msgstr ""

#: ./docs/8.x/http-client.md:147
msgctxt "CODE"
msgid "// Basic authentication...\n"
"$response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(...);\n\n"
"// Digest authentication...\n"
"$response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(...);"
msgstr ""

#: ./docs/10.x/http-client.md:150
#: ./docs/11.x/http-client.md:145
#: ./docs/master/http-client.md:144
msgctxt "P"
msgid "If you would like to send files as multi-part requests, you should call the `attach` method before making your request. This method accepts the name of the file and its contents. If needed, you may provide a third argument which will be considered the file's filename, while a fourth argument may be used to provide headers associated with the file:"
msgstr ""

#: ./docs/10.x/http-client.md:152
#: ./docs/11.x/http-client.md:147
#: ./docs/master/http-client.md:146
msgctxt "CODE"
msgid "$response = Http::attach(\n"
"    'attachment', file_get_contents('photo.jpg'), 'photo.jpg', ['Content-Type' => 'image/jpeg']\n"
")->post('http://example.com/attachments');"
msgstr ""

#: ./docs/8.x/http-client.md:153
#: ./docs/9.x/http-client.md:188
#: ./docs/10.x/http-client.md:207
#: ./docs/11.x/http-client.md:202
#: ./docs/master/http-client.md:201
#~ msgctxt "P"
#~ msgid "<a name=\"bearer-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:154
#: ./docs/9.x/http-client.md:189
#: ./docs/10.x/http-client.md:208
#: ./docs/11.x/http-client.md:203
#: ./docs/master/http-client.md:202
msgctxt "H4"
msgid "Bearer Tokens"
msgstr ""

#: ./docs/8.x/http-client.md:156
#: ./docs/9.x/http-client.md:191
#: ./docs/10.x/http-client.md:210
#: ./docs/11.x/http-client.md:205
#: ./docs/master/http-client.md:204
msgctxt "P"
msgid "If you would like to quickly add a bearer token to the request's `Authorization` header, you may use the `withToken` method:"
msgstr ""

#: ./docs/8.x/http-client.md:158
msgctxt "CODE"
msgid "$response = Http::withToken('token')->post(...);"
msgstr ""

#: ./docs/8.x/http-client.md:160
#: ./docs/9.x/http-client.md:195
#: ./docs/10.x/http-client.md:214
#: ./docs/11.x/http-client.md:209
#: ./docs/master/http-client.md:208
#~ msgctxt "P"
#~ msgid "<a name=\"timeout\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:161
#: ./docs/9.x/http-client.md:196
#: ./docs/10.x/http-client.md:215
#: ./docs/11.x/http-client.md:210
#: ./docs/master/http-client.md:209
msgctxt "H3"
msgid "Timeout"
msgstr ""

#: ./docs/8.x/http-client.md:163
#: ./docs/9.x/http-client.md:198
msgctxt "P"
msgid "The `timeout` method may be used to specify the maximum number of seconds to wait for a response:"
msgstr ""

#: ./docs/8.x/http-client.md:165
msgctxt "CODE"
msgid "$response = Http::timeout(3)->get(...);"
msgstr ""

#: ./docs/8.x/http-client.md:167
#: ./docs/9.x/http-client.md:202
#: ./docs/10.x/http-client.md:221
#: ./docs/11.x/http-client.md:216
#: ./docs/master/http-client.md:215
msgctxt "P"
msgid "If the given timeout is exceeded, an instance of `Illuminate\\Http\\Client\\ConnectionException` will  be thrown."
msgstr ""

#: ./docs/8.x/http-client.md:169
#: ./docs/9.x/http-client.md:208
#: ./docs/10.x/http-client.md:227
#: ./docs/11.x/http-client.md:222
#: ./docs/master/http-client.md:221
#~ msgctxt "P"
#~ msgid "<a name=\"retries\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:170
#: ./docs/9.x/http-client.md:209
#: ./docs/10.x/http-client.md:228
#: ./docs/11.x/http-client.md:223
#: ./docs/master/http-client.md:222
msgctxt "H3"
msgid "Retries"
msgstr ""

#: ./docs/8.x/http-client.md:172
msgctxt "P"
msgid "If you would like HTTP client to automatically retry the request if a client or server error occurs, you may use the `retry` method. The `retry` method accepts the maximum number of times the request should be attempted and the number of milliseconds that Laravel should wait in between attempts:"
msgstr ""

#: ./docs/8.x/http-client.md:174
msgctxt "CODE"
msgid "$response = Http::retry(3, 100)->post(...);"
msgstr ""

#: ./docs/8.x/http-client.md:176
#: ./docs/9.x/http-client.md:215
#: ./docs/10.x/http-client.md:246
#: ./docs/11.x/http-client.md:241
#: ./docs/master/http-client.md:240
msgctxt "P"
msgid "If needed, you may pass a third argument to the `retry` method. The third argument should be a callable that determines if the retries should actually be attempted. For example, you may wish to only retry the request if the initial request encounters an `ConnectionException`:"
msgstr ""

#: ./docs/8.x/http-client.md:178
msgctxt "CODE"
msgid "$response = Http::retry(3, 100, function ($exception) {\n"
"    return $exception instanceof ConnectionException;\n"
"})->post(...);"
msgstr ""

#: ./docs/8.x/http-client.md:182
msgctxt "P"
msgid "If all of the requests fail, an instance of `Illuminate\\Http\\Client\\RequestException` will be thrown."
msgstr ""

#: ./docs/9.x/http-client.md:182
#: ./docs/10.x/http-client.md:201
#: ./docs/11.x/http-client.md:196
#: ./docs/master/http-client.md:195
msgctxt "CODE"
msgid "// Basic authentication...\n"
"$response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(/* ... */);\n\n"
"// Digest authentication...\n"
"$response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(/* ... */);"
msgstr ""

#: ./docs/10.x/http-client.md:184
#: ./docs/11.x/http-client.md:179
#: ./docs/master/http-client.md:178
msgctxt "P"
msgid "The `withHeaders` method merges new headers into the request's existing headers. If needed, you may replace all of the headers entirely using the `replaceHeaders` method:"
msgstr ""

#: ./docs/8.x/http-client.md:184
#: ./docs/9.x/http-client.md:240
#: ./docs/10.x/http-client.md:278
#: ./docs/11.x/http-client.md:273
#: ./docs/master/http-client.md:272
#~ msgctxt "P"
#~ msgid "<a name=\"error-handling\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:185
#: ./docs/9.x/http-client.md:241
#: ./docs/10.x/http-client.md:279
#: ./docs/11.x/http-client.md:274
#: ./docs/master/http-client.md:273
msgctxt "H3"
msgid "Error Handling"
msgstr ""

#: ./docs/10.x/http-client.md:186
#: ./docs/11.x/http-client.md:181
#: ./docs/master/http-client.md:180
msgctxt "CODE: php"
msgid "$response = Http::withHeaders([\n"
"    'X-Original' => 'foo',\n"
"])->replaceHeaders([\n"
"    'X-Replacement' => 'bar',\n"
"])->post('http://example.com/users', [\n"
"    'name' => 'Taylor',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-client.md:187
#: ./docs/9.x/http-client.md:243
#: ./docs/10.x/http-client.md:281
#: ./docs/11.x/http-client.md:276
#: ./docs/master/http-client.md:275
msgctxt "P"
msgid "Unlike Guzzle's default behavior, Laravel's HTTP client wrapper does not throw exceptions on client or server errors (`400` and `500` level responses from servers). You may determine if one of these errors was returned using the `successful`, `clientError`, or `serverError` methods:"
msgstr ""

#: ./docs/8.x/http-client.md:189
#: ./docs/9.x/http-client.md:245
#: ./docs/10.x/http-client.md:283
#: ./docs/11.x/http-client.md:278
#: ./docs/master/http-client.md:277
msgctxt "CODE"
msgid "// Determine if the status code is >= 200 and < 300...\n"
"$response->successful();\n\n"
"// Determine if the status code is >= 400...\n"
"$response->failed();\n\n"
"// Determine if the response has a 400 level status code...\n"
"$response->clientError();\n\n"
"// Determine if the response has a 500 level status code...\n"
"$response->serverError();\n\n"
"// Immediately execute the given callback if there was a client or server error...\n"
"$response->onError(callable $callback);"
msgstr ""

#: ./docs/9.x/http-client.md:193
#: ./docs/10.x/http-client.md:212
#: ./docs/11.x/http-client.md:207
#: ./docs/master/http-client.md:206
msgctxt "CODE"
msgid "$response = Http::withToken('token')->post(/* ... */);"
msgstr ""

#: ./docs/9.x/http-client.md:200
#: ./docs/10.x/http-client.md:219
#: ./docs/11.x/http-client.md:214
#: ./docs/master/http-client.md:213
msgctxt "CODE"
msgid "$response = Http::timeout(3)->get(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:204
#: ./docs/9.x/http-client.md:260
#: ./docs/10.x/http-client.md:298
#: ./docs/11.x/http-client.md:293
#: ./docs/master/http-client.md:292
#~ msgctxt "P"
#~ msgid "<a name=\"throwing-exceptions\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-client.md:204
#: ./docs/10.x/http-client.md:223
#: ./docs/11.x/http-client.md:218
#: ./docs/master/http-client.md:217
msgctxt "P"
msgid "You may specify the maximum number of seconds to wait while trying to connect to a server using the `connectTimeout` method:"
msgstr ""

#: ./docs/8.x/http-client.md:205
#: ./docs/9.x/http-client.md:261
#: ./docs/10.x/http-client.md:299
#: ./docs/11.x/http-client.md:294
#: ./docs/master/http-client.md:293
msgctxt "H4"
msgid "Throwing Exceptions"
msgstr ""

#: ./docs/9.x/http-client.md:206
#: ./docs/10.x/http-client.md:225
#: ./docs/11.x/http-client.md:220
#: ./docs/master/http-client.md:219
msgctxt "CODE"
msgid "$response = Http::connectTimeout(3)->get(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:207
#: ./docs/9.x/http-client.md:263
#: ./docs/10.x/http-client.md:301
#: ./docs/11.x/http-client.md:296
#: ./docs/master/http-client.md:295
msgctxt "P"
msgid "If you have a response instance and would like to throw an instance of `Illuminate\\Http\\Client\\RequestException` if the response status code indicates a client or server error, you may use the `throw` or `throwIf` methods:"
msgstr ""

#: ./docs/8.x/http-client.md:209
msgctxt "CODE"
msgid "$response = Http::post(...);\n\n"
"// Throw an exception if a client or server error occurred...\n"
"$response->throw();\n\n"
"// Throw an exception if an error occurred and the given condition is true...\n"
"$response->throwIf($condition);\n\n"
"return $response['user']['id'];"
msgstr ""

#: ./docs/9.x/http-client.md:211
#: ./docs/10.x/http-client.md:230
#: ./docs/11.x/http-client.md:225
#: ./docs/master/http-client.md:224
msgctxt "P"
msgid "If you would like the HTTP client to automatically retry the request if a client or server error occurs, you may use the `retry` method. The `retry` method accepts the maximum number of times the request should be attempted and the number of milliseconds that Laravel should wait in between attempts:"
msgstr ""

#: ./docs/9.x/http-client.md:213
#: ./docs/10.x/http-client.md:232
#: ./docs/11.x/http-client.md:227
#: ./docs/master/http-client.md:226
msgctxt "CODE"
msgid "$response = Http::retry(3, 100)->post(/* ... */);"
msgstr ""

#: ./docs/10.x/http-client.md:217
#: ./docs/11.x/http-client.md:212
#: ./docs/master/http-client.md:211
msgctxt "P"
msgid "The `timeout` method may be used to specify the maximum number of seconds to wait for a response. By default, the HTTP client will timeout after 30 seconds:"
msgstr ""

#: ./docs/9.x/http-client.md:217
msgctxt "CODE"
msgid "$response = Http::retry(3, 100, function ($exception, $request) {\n"
"    return $exception instanceof ConnectionException;\n"
"})->post(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:219
#: ./docs/9.x/http-client.md:290
#: ./docs/10.x/http-client.md:330
#: ./docs/11.x/http-client.md:325
#: ./docs/master/http-client.md:324
msgctxt "P"
msgid "The `Illuminate\\Http\\Client\\RequestException` instance has a public `$response` property which will allow you to inspect the returned response."
msgstr ""

#: ./docs/8.x/http-client.md:221
#: ./docs/9.x/http-client.md:292
#: ./docs/10.x/http-client.md:332
#: ./docs/11.x/http-client.md:327
#: ./docs/master/http-client.md:326
msgctxt "P"
msgid "The `throw` method returns the response instance if no error occurred, allowing you to chain other operations onto the `throw` method:"
msgstr ""

#: ./docs/9.x/http-client.md:221
#: ./docs/10.x/http-client.md:255
#: ./docs/11.x/http-client.md:250
#: ./docs/master/http-client.md:249
msgctxt "P"
msgid "If a request attempt fails, you may wish to make a change to the request before a new attempt is made. You can achieve this by modifying the request argument provided to the callable you provided to the `retry` method. For example, you might want to retry the request with a new authorization token if the first attempt returned an authentication error:"
msgstr ""

#: ./docs/8.x/http-client.md:223
msgctxt "CODE"
msgid "return Http::post(...)->throw()->json();"
msgstr ""

#: ./docs/9.x/http-client.md:223
msgctxt "CODE"
msgid "$response = Http::withToken($this->getToken())->retry(2, 0, function ($exception, $request) {\n"
"    if (! $exception instanceof RequestException || $exception->response->status() !== 401) {\n"
"        return false;\n"
"    }\n\n"
"    $request->withToken($this->getNewToken());\n\n"
"    return true;\n"
"})->post(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:225
#: ./docs/9.x/http-client.md:296
#: ./docs/10.x/http-client.md:336
#: ./docs/11.x/http-client.md:331
#: ./docs/master/http-client.md:330
msgctxt "P"
msgid "If you would like to perform some additional logic before the exception is thrown, you may pass a closure to the `throw` method. The exception will be thrown automatically after the closure is invoked, so you do not need to re-throw the exception from within the closure:"
msgstr ""

#: ./docs/8.x/http-client.md:227
msgctxt "CODE"
msgid "return Http::post(...)->throw(function ($response, $e) {\n"
"    //\n"
"})->json();"
msgstr ""

#: ./docs/8.x/http-client.md:231
#: ./docs/9.x/http-client.md:335
#: ./docs/10.x/http-client.md:391
#: ./docs/11.x/http-client.md:386
#: ./docs/master/http-client.md:385
#~ msgctxt "P"
#~ msgid "<a name=\"guzzle-options\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:232
#: ./docs/9.x/http-client.md:336
#: ./docs/10.x/http-client.md:392
#: ./docs/11.x/http-client.md:387
#: ./docs/master/http-client.md:386
msgctxt "H3"
msgid "Guzzle Options"
msgstr ""

#: ./docs/9.x/http-client.md:233
#: ./docs/10.x/http-client.md:271
#: ./docs/11.x/http-client.md:266
#: ./docs/master/http-client.md:265
msgctxt "P"
msgid "If all of the requests fail, an instance of `Illuminate\\Http\\Client\\RequestException` will be thrown. If you would like to disable this behavior, you may provide a `throw` argument with a value of `false`. When disabled, the last response received by the client will be returned after all retries have been attempted:"
msgstr ""

#: ./docs/10.x/http-client.md:234
#: ./docs/11.x/http-client.md:229
#: ./docs/master/http-client.md:228
msgctxt "P"
msgid "If you would like to manually calculate the number of milliseconds to sleep between attempts, you may pass a closure as the second argument to the `retry` method:"
msgstr ""

#: ./docs/8.x/http-client.md:234
#: ./docs/9.x/http-client.md:338
#: ./docs/10.x/http-client.md:394
msgctxt "P"
msgid "You may specify additional [Guzzle request options](http://docs.guzzlephp.org/en/stable/request-options.html) using the `withOptions` method. The `withOptions` method accepts an array of key / value pairs:"
msgstr ""

#: ./docs/9.x/http-client.md:235
#: ./docs/10.x/http-client.md:273
#: ./docs/11.x/http-client.md:268
#: ./docs/master/http-client.md:267
msgctxt "CODE"
msgid "$response = Http::retry(3, 100, throw: false)->post(/* ... */);"
msgstr ""

#: ./docs/10.x/http-client.md:236
#: ./docs/11.x/http-client.md:231
#: ./docs/master/http-client.md:230
msgctxt "CODE"
msgid "use Exception;\n\n"
"$response = Http::retry(3, function (int $attempt, Exception $exception) {\n"
"    return $attempt * 100;\n"
"})->post(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:236
#: ./docs/9.x/http-client.md:340
#: ./docs/10.x/http-client.md:396
#: ./docs/11.x/http-client.md:391
#: ./docs/master/http-client.md:390
msgctxt "CODE"
msgid "$response = Http::withOptions([\n"
"    'debug' => true,\n"
"])->get('http://example.com/users');"
msgstr ""

#: ./docs/9.x/http-client.md:238
#: ./docs/10.x/http-client.md:276
#: ./docs/11.x/http-client.md:271
#: ./docs/master/http-client.md:270
msgctxt "P"
msgid "If all of the requests fail because of a connection issue, a `Illuminate\\Http\\Client\\ConnectionException` will still be thrown even when the `throw` argument is set to `false`."
msgstr ""

#: ./docs/8.x/http-client.md:240
#: ./docs/9.x/http-client.md:344
#: ./docs/10.x/http-client.md:400
#: ./docs/11.x/http-client.md:414
#: ./docs/master/http-client.md:413
#~ msgctxt "P"
#~ msgid "<a name=\"concurrent-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:241
#: ./docs/9.x/http-client.md:345
#: ./docs/10.x/http-client.md:401
#: ./docs/11.x/http-client.md:415
#: ./docs/master/http-client.md:414
msgctxt "H2"
msgid "Concurrent Requests"
msgstr ""

#: ./docs/10.x/http-client.md:242
#: ./docs/11.x/http-client.md:237
#: ./docs/master/http-client.md:236
msgctxt "P"
msgid "For convenience, you may also provide an array as the first argument to the `retry` method. This array will be used to determine how many milliseconds to sleep between subsequent attempts:"
msgstr ""

#: ./docs/8.x/http-client.md:243
#: ./docs/9.x/http-client.md:347
#: ./docs/10.x/http-client.md:403
#: ./docs/11.x/http-client.md:417
#: ./docs/master/http-client.md:416
msgctxt "P"
msgid "Sometimes, you may wish to make multiple HTTP requests concurrently. In other words, you want several requests to be dispatched at the same time instead of issuing the requests sequentially. This can lead to substantial performance improvements when interacting with slow HTTP APIs."
msgstr ""

#: ./docs/10.x/http-client.md:244
#: ./docs/11.x/http-client.md:239
#: ./docs/master/http-client.md:238
msgctxt "CODE"
msgid "$response = Http::retry([100, 200])->post(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:245
#: ./docs/9.x/http-client.md:349
#: ./docs/10.x/http-client.md:405
#: ./docs/11.x/http-client.md:419
#: ./docs/master/http-client.md:418
msgctxt "P"
msgid "Thankfully, you may accomplish this using the `pool` method. The `pool` method accepts a closure which receives an `Illuminate\\Http\\Client\\Pool` instance, allowing you to easily add requests to the request pool for dispatching:"
msgstr ""

#: ./docs/8.x/http-client.md:247
#: ./docs/9.x/http-client.md:351
#: ./docs/10.x/http-client.md:407
#: ./docs/11.x/http-client.md:421
#: ./docs/master/http-client.md:420
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Pool;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"$responses = Http::pool(fn (Pool $pool) => [\n"
"    $pool->get('http://localhost/first'),\n"
"    $pool->get('http://localhost/second'),\n"
"    $pool->get('http://localhost/third'),\n"
"]);\n\n"
"return $responses[0]->ok() &&\n"
"       $responses[1]->ok() &&\n"
"       $responses[2]->ok();"
msgstr ""

#: ./docs/10.x/http-client.md:248
#: ./docs/11.x/http-client.md:243
#: ./docs/master/http-client.md:242
msgctxt "CODE"
msgid "use Exception;\n"
"use Illuminate\\Http\\Client\\PendingRequest;\n\n"
"$response = Http::retry(3, 100, function (Exception $exception, PendingRequest $request) {\n"
"    return $exception instanceof ConnectionException;\n"
"})->post(/* ... */);"
msgstr ""

#: ./docs/10.x/http-client.md:257
#: ./docs/11.x/http-client.md:252
#: ./docs/master/http-client.md:251
msgctxt "CODE"
msgid "use Exception;\n"
"use Illuminate\\Http\\Client\\PendingRequest;\n"
"use Illuminate\\Http\\Client\\RequestException;\n\n"
"$response = Http::withToken($this->getToken())->retry(2, 0, function (Exception $exception, PendingRequest $request) {\n"
"    if (! $exception instanceof RequestException || $exception->response->status() !== 401) {\n"
"        return false;\n"
"    }\n\n"
"    $request->withToken($this->getNewToken());\n\n"
"    return true;\n"
"})->post(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:260
#: ./docs/9.x/http-client.md:364
#: ./docs/10.x/http-client.md:420
#: ./docs/11.x/http-client.md:434
#: ./docs/master/http-client.md:433
msgctxt "P"
msgid "As you can see, each response instance can be accessed based on the order it was added to the pool. If you wish, you can name the requests using the `as` method, which allows you to access the corresponding responses by name:"
msgstr ""

#: ./docs/8.x/http-client.md:262
#: ./docs/9.x/http-client.md:366
#: ./docs/10.x/http-client.md:422
#: ./docs/11.x/http-client.md:436
#: ./docs/master/http-client.md:435
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Pool;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"$responses = Http::pool(fn (Pool $pool) => [\n"
"    $pool->as('first')->get('http://localhost/first'),\n"
"    $pool->as('second')->get('http://localhost/second'),\n"
"    $pool->as('third')->get('http://localhost/third'),\n"
"]);\n\n"
"return $responses['first']->ok();"
msgstr ""

#: ./docs/9.x/http-client.md:265
msgctxt "CODE"
msgid "$response = Http::post(/* ... */);\n\n"
"// Throw an exception if a client or server error occurred...\n"
"$response->throw();\n\n"
"// Throw an exception if an error occurred and the given condition is true...\n"
"$response->throwIf($condition);\n\n"
"// Throw an exception if an error occurred and the given closure resolves to true...\n"
"$response->throwIf(fn ($response) => true);\n\n"
"// Throw an exception if an error occurred and the given condition is false...\n"
"$response->throwUnless($condition);\n\n"
"// Throw an exception if an error occurred and the given closure resolves to false...\n"
"$response->throwUnless(fn ($response) => false);\n\n"
"// Throw an exception if the response has a specific status code...\n"
"$response->throwIfStatus(403);\n\n"
"// Throw an exception unless the response has a specific status code...\n"
"$response->throwUnlessStatus(200);\n\n"
"return $response['user']['id'];"
msgstr ""

#: ./docs/8.x/http-client.md:273
#: ./docs/9.x/http-client.md:377
#: ./docs/10.x/http-client.md:453
#: ./docs/11.x/http-client.md:467
#: ./docs/master/http-client.md:466
#~ msgctxt "P"
#~ msgid "<a name=\"macros\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:274
#: ./docs/9.x/http-client.md:378
#: ./docs/10.x/http-client.md:454
#: ./docs/11.x/http-client.md:468
#: ./docs/master/http-client.md:467
msgctxt "H2"
msgid "Macros"
msgstr ""

#: ./docs/8.x/http-client.md:276
#: ./docs/9.x/http-client.md:380
#: ./docs/10.x/http-client.md:456
#: ./docs/11.x/http-client.md:470
#: ./docs/master/http-client.md:469
msgctxt "P"
msgid "The Laravel HTTP client allows you to define \"macros\", which can serve as a fluent, expressive mechanism to configure common request paths and headers when interacting with services throughout your application. To get started, you may define the macro within the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/http-client.md:278
#: ./docs/9.x/http-client.md:382
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Http::macro('github', function () {\n"
"        return Http::withHeaders([\n"
"            'X-Example' => 'example',\n"
"        ])->baseUrl('https://github.com');\n"
"    });\n"
"}"
msgstr ""

#: ./docs/9.x/http-client.md:294
#: ./docs/10.x/http-client.md:334
#: ./docs/11.x/http-client.md:329
#: ./docs/master/http-client.md:328
msgctxt "CODE"
msgid "return Http::post(/* ... */)->throw()->json();"
msgstr ""

#: ./docs/8.x/http-client.md:296
#: ./docs/9.x/http-client.md:400
#: ./docs/10.x/http-client.md:474
#: ./docs/11.x/http-client.md:488
#: ./docs/master/http-client.md:487
msgctxt "P"
msgid "Once your macro has been configured, you may invoke it from anywhere in your application to create a pending request with the specified configuration:"
msgstr ""

#: ./docs/8.x/http-client.md:298
#: ./docs/9.x/http-client.md:402
#: ./docs/10.x/http-client.md:476
#: ./docs/11.x/http-client.md:490
#: ./docs/master/http-client.md:489
msgctxt "CODE: php"
msgid "$response = Http::github()->get('/');"
msgstr ""

#: ./docs/9.x/http-client.md:298
msgctxt "CODE"
msgid "return Http::post(/* ... */)->throw(function ($response, $e) {\n"
"    //\n"
"})->json();"
msgstr ""

#: ./docs/8.x/http-client.md:302
#: ./docs/9.x/http-client.md:406
#: ./docs/10.x/http-client.md:480
#: ./docs/11.x/http-client.md:494
#: ./docs/master/http-client.md:493
#~ msgctxt "P"
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-client.md:302
#: ./docs/10.x/http-client.md:345
#: ./docs/11.x/http-client.md:340
#: ./docs/master/http-client.md:339
#~ msgctxt "P"
#~ msgid "<a name=\"guzzle-middleware\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-client.md:303
#: ./docs/11.x/http-client.md:298
#: ./docs/master/http-client.md:297
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Response;\n\n"
"$response = Http::post(/* ... */);\n\n"
"// Throw an exception if a client or server error occurred...\n"
"$response->throw();\n\n"
"// Throw an exception if an error occurred and the given condition is true...\n"
"$response->throwIf($condition);\n\n"
"// Throw an exception if an error occurred and the given closure resolves to true...\n"
"$response->throwIf(fn (Response $response) => true);\n\n"
"// Throw an exception if an error occurred and the given condition is false...\n"
"$response->throwUnless($condition);\n\n"
"// Throw an exception if an error occurred and the given closure resolves to false...\n"
"$response->throwUnless(fn (Response $response) => false);\n\n"
"// Throw an exception if the response has a specific status code...\n"
"$response->throwIfStatus(403);\n\n"
"// Throw an exception unless the response has a specific status code...\n"
"$response->throwUnlessStatus(200);\n\n"
"return $response['user']['id'];"
msgstr ""

#: ./docs/8.x/http-client.md:303
#: ./docs/9.x/http-client.md:407
#: ./docs/10.x/http-client.md:481
#: ./docs/11.x/http-client.md:495
#: ./docs/master/http-client.md:494
msgctxt "H2"
msgid "Testing"
msgstr ""

#: ./docs/9.x/http-client.md:303
#: ./docs/10.x/http-client.md:346
#: ./docs/11.x/http-client.md:341
#: ./docs/master/http-client.md:340
msgctxt "H3"
msgid "Guzzle Middleware"
msgstr ""

#: ./docs/8.x/http-client.md:305
msgctxt "P"
msgid "Many Laravel services provide functionality to help you easily and expressively write tests, and Laravel's HTTP wrapper is no exception. The `Http` facade's `fake` method allows you to instruct the HTTP client to return stubbed / dummy responses when requests are made."
msgstr ""

#: ./docs/9.x/http-client.md:305
msgctxt "P"
msgid "Since Laravel's HTTP client is powered by Guzzle, you may take advantage of [Guzzle Middleware](https://docs.guzzlephp.org/en/stable/handlers-and-middleware.html) to manipulate the outgoing request or inspect the incoming response. To manipulate the outgoing request, register a Guzzle middleware via the `withMiddleware` method in combination with Guzzle's `mapRequest` middleware factory:"
msgstr ""

#: ./docs/8.x/http-client.md:307
#: ./docs/9.x/http-client.md:411
#: ./docs/10.x/http-client.md:485
#: ./docs/11.x/http-client.md:499
#: ./docs/master/http-client.md:498
#~ msgctxt "P"
#~ msgid "<a name=\"faking-responses\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-client.md:307
msgctxt "CODE"
msgid "use GuzzleHttp\\Middleware;\n"
"use Illuminate\\Support\\Facades\\Http;\n"
"use Psr\\Http\\Message\\RequestInterface;\n\n"
"$response = Http::withMiddleware(\n"
"    Middleware::mapRequest(function (RequestInterface $request) {\n"
"        $request = $request->withHeader('X-Example', 'Value');\n"
"        \n"
"        return $request;\n"
"    })\n"
")->get('http://example.com');"
msgstr ""

#: ./docs/8.x/http-client.md:308
#: ./docs/9.x/http-client.md:412
#: ./docs/10.x/http-client.md:486
#: ./docs/11.x/http-client.md:500
#: ./docs/master/http-client.md:499
msgctxt "H3"
msgid "Faking Responses"
msgstr ""

#: ./docs/8.x/http-client.md:310
#: ./docs/9.x/http-client.md:414
#: ./docs/10.x/http-client.md:488
#: ./docs/11.x/http-client.md:502
#: ./docs/master/http-client.md:501
msgctxt "P"
msgid "For example, to instruct the HTTP client to return empty, `200` status code responses for every request, you may call the `fake` method with no arguments:"
msgstr ""

#: ./docs/8.x/http-client.md:312
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"Http::fake();\n\n"
"$response = Http::post(...);"
msgstr ""

#: ./docs/8.x/http-client.md:318
msgctxt "P"
msgid "When faking requests, HTTP client middleware are not executed. You should define expectations for faked responses as if these middleware have run correctly."
msgstr ""

#: ./docs/9.x/http-client.md:319
msgctxt "P"
msgid "Likewise, you can inspect the incoming HTTP response by registering a middleware via the `withMiddleware` method in combination with Guzzle's `mapResponse` middleware factory:"
msgstr ""

#: ./docs/8.x/http-client.md:320
#: ./docs/9.x/http-client.md:422
#: ./docs/10.x/http-client.md:496
#: ./docs/11.x/http-client.md:510
#: ./docs/master/http-client.md:509
#~ msgctxt "P"
#~ msgid "<a name=\"faking-specific-urls\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:321
#: ./docs/9.x/http-client.md:423
#: ./docs/10.x/http-client.md:497
#: ./docs/11.x/http-client.md:511
#: ./docs/master/http-client.md:510
msgctxt "H4"
msgid "Faking Specific URLs"
msgstr ""

#: ./docs/9.x/http-client.md:321
msgctxt "CODE"
msgid "use GuzzleHttp\\Middleware;\n"
"use Illuminate\\Support\\Facades\\Http;\n"
"use Psr\\Http\\Message\\ResponseInterface;\n\n"
"$response = Http::withMiddleware(\n"
"    Middleware::mapResponse(function (ResponseInterface $response) {\n"
"        $header = $response->getHeader('X-Example');\n\n"
"        // ...\n"
"        \n"
"        return $response;\n"
"    })\n"
")->get('http://example.com');"
msgstr ""

#: ./docs/8.x/http-client.md:323
#: ./docs/9.x/http-client.md:425
#: ./docs/10.x/http-client.md:499
#: ./docs/11.x/http-client.md:513
#: ./docs/master/http-client.md:512
msgctxt "P"
msgid "Alternatively, you may pass an array to the `fake` method. The array's keys should represent URL patterns that you wish to fake and their associated responses. The `*` character may be used as a wildcard character. Any requests made to URLs that have not been faked will actually be executed. You may use the `Http` facade's `response` method to construct stub / fake responses for these endpoints:"
msgstr ""

#: ./docs/8.x/http-client.md:325
#: ./docs/9.x/http-client.md:427
#: ./docs/10.x/http-client.md:501
#: ./docs/11.x/http-client.md:515
#: ./docs/master/http-client.md:514
msgctxt "CODE"
msgid "Http::fake([\n"
"    // Stub a JSON response for GitHub endpoints...\n"
"    'github.com/*' => Http::response(['foo' => 'bar'], 200, $headers),\n\n"
"    // Stub a string response for Google endpoints...\n"
"    'google.com/*' => Http::response('Hello World', 200, $headers),\n"
"]);"
msgstr ""

#: ./docs/8.x/http-client.md:333
#: ./docs/9.x/http-client.md:435
#: ./docs/10.x/http-client.md:509
#: ./docs/11.x/http-client.md:523
#: ./docs/master/http-client.md:522
msgctxt "P"
msgid "If you would like to specify a fallback URL pattern that will stub all unmatched URLs, you may use a single `*` character:"
msgstr ""

#: ./docs/8.x/http-client.md:335
#: ./docs/9.x/http-client.md:437
#: ./docs/10.x/http-client.md:511
#: ./docs/11.x/http-client.md:525
#: ./docs/master/http-client.md:524
msgctxt "CODE"
msgid "Http::fake([\n"
"    // Stub a JSON response for GitHub endpoints...\n"
"    'github.com/*' => Http::response(['foo' => 'bar'], 200, ['Headers']),\n\n"
"    // Stub a string response for all other endpoints...\n"
"    '*' => Http::response('Hello World', 200, ['Headers']),\n"
"]);"
msgstr ""

#: ./docs/10.x/http-client.md:338
#: ./docs/11.x/http-client.md:333
#: ./docs/master/http-client.md:332
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Response;\n"
"use Illuminate\\Http\\Client\\RequestException;\n\n"
"return Http::post(/* ... */)->throw(function (Response $response, RequestException $e) {\n"
"    // ...\n"
"})->json();"
msgstr ""

#: ./docs/8.x/http-client.md:343
#: ./docs/9.x/http-client.md:445
#: ./docs/10.x/http-client.md:519
#: ./docs/11.x/http-client.md:542
#: ./docs/master/http-client.md:532
#~ msgctxt "P"
#~ msgid "<a name=\"faking-response-sequences\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:344
#: ./docs/9.x/http-client.md:446
#: ./docs/10.x/http-client.md:520
#: ./docs/11.x/http-client.md:543
#: ./docs/master/http-client.md:533
msgctxt "H4"
msgid "Faking Response Sequences"
msgstr ""

#: ./docs/8.x/http-client.md:346
#: ./docs/9.x/http-client.md:448
#: ./docs/10.x/http-client.md:522
#: ./docs/11.x/http-client.md:545
#: ./docs/master/http-client.md:535
msgctxt "P"
msgid "Sometimes you may need to specify that a single URL should return a series of fake responses in a specific order. You may accomplish this using the `Http::sequence` method to build the responses:"
msgstr ""

#: ./docs/10.x/http-client.md:348
#: ./docs/11.x/http-client.md:343
#: ./docs/master/http-client.md:342
msgctxt "P"
msgid "Since Laravel's HTTP client is powered by Guzzle, you may take advantage of [Guzzle Middleware](https://docs.guzzlephp.org/en/stable/handlers-and-middleware.html) to manipulate the outgoing request or inspect the incoming response. To manipulate the outgoing request, register a Guzzle middleware via the `withRequestMiddleware` method:"
msgstr ""

#: ./docs/8.x/http-client.md:348
#: ./docs/9.x/http-client.md:450
#: ./docs/10.x/http-client.md:524
#: ./docs/11.x/http-client.md:547
#: ./docs/master/http-client.md:537
msgctxt "CODE"
msgid "Http::fake([\n"
"    // Stub a series of responses for GitHub endpoints...\n"
"    'github.com/*' => Http::sequence()\n"
"                            ->push('Hello World', 200)\n"
"                            ->push(['foo' => 'bar'], 200)\n"
"                            ->pushStatus(404),\n"
"]);"
msgstr ""

#: ./docs/10.x/http-client.md:350
#: ./docs/11.x/http-client.md:345
#: ./docs/master/http-client.md:344
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n"
"use Psr\\Http\\Message\\RequestInterface;\n\n"
"$response = Http::withRequestMiddleware(\n"
"    function (RequestInterface $request) {\n"
"        return $request->withHeader('X-Example', 'Value');\n"
"    }\n"
")->get('http://example.com');"
msgstr ""

#: ./docs/8.x/http-client.md:356
msgctxt "P"
msgid "When all of the responses in a response sequence have been consumed, any further requests will cause the response sequence to throw an exception. If you would like to specify a default response that should be returned when a sequence is empty, you may use the `whenEmpty` method:"
msgstr ""

#: ./docs/8.x/http-client.md:358
#: ./docs/9.x/http-client.md:460
#: ./docs/10.x/http-client.md:534
#: ./docs/11.x/http-client.md:557
#: ./docs/master/http-client.md:547
msgctxt "CODE"
msgid "Http::fake([\n"
"    // Stub a series of responses for GitHub endpoints...\n"
"    'github.com/*' => Http::sequence()\n"
"                            ->push('Hello World', 200)\n"
"                            ->push(['foo' => 'bar'], 200)\n"
"                            ->whenEmpty(Http::response()),\n"
"]);"
msgstr ""

#: ./docs/10.x/http-client.md:359
#: ./docs/11.x/http-client.md:354
#: ./docs/master/http-client.md:353
msgctxt "P"
msgid "Likewise, you can inspect the incoming HTTP response by registering a middleware via the `withResponseMiddleware` method:"
msgstr ""

#: ./docs/10.x/http-client.md:361
#: ./docs/11.x/http-client.md:356
#: ./docs/master/http-client.md:355
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n"
"use Psr\\Http\\Message\\ResponseInterface;\n\n"
"$response = Http::withResponseMiddleware(\n"
"    function (ResponseInterface $response) {\n"
"        $header = $response->getHeader('X-Example');\n\n"
"        // ...\n\n"
"        return $response;\n"
"    }\n"
")->get('http://example.com');"
msgstr ""

#: ./docs/8.x/http-client.md:366
#: ./docs/9.x/http-client.md:468
#: ./docs/10.x/http-client.md:542
#: ./docs/11.x/http-client.md:565
#: ./docs/master/http-client.md:555
msgctxt "P"
msgid "If you would like to fake a sequence of responses but do not need to specify a specific URL pattern that should be faked, you may use the `Http::fakeSequence` method:"
msgstr ""

#: ./docs/8.x/http-client.md:368
#: ./docs/9.x/http-client.md:470
#: ./docs/10.x/http-client.md:544
#: ./docs/11.x/http-client.md:567
#: ./docs/master/http-client.md:557
msgctxt "CODE"
msgid "Http::fakeSequence()\n"
"        ->push('Hello World', 200)\n"
"        ->whenEmpty(Http::response());"
msgstr ""

#: ./docs/8.x/http-client.md:372
#: ./docs/9.x/http-client.md:474
#: ./docs/10.x/http-client.md:548
#: ./docs/11.x/http-client.md:571
#: ./docs/master/http-client.md:561
#~ msgctxt "P"
#~ msgid "<a name=\"fake-callback\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:373
#: ./docs/9.x/http-client.md:475
#: ./docs/10.x/http-client.md:549
#: ./docs/11.x/http-client.md:572
#: ./docs/master/http-client.md:562
msgctxt "H4"
msgid "Fake Callback"
msgstr ""

#: ./docs/10.x/http-client.md:374
#: ./docs/11.x/http-client.md:369
#: ./docs/master/http-client.md:368
#~ msgctxt "P"
#~ msgid "<a name=\"global-middleware\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-client.md:375
#: ./docs/11.x/http-client.md:370
#: ./docs/master/http-client.md:369
msgctxt "H4"
msgid "Global Middleware"
msgstr ""

#: ./docs/8.x/http-client.md:375
#: ./docs/9.x/http-client.md:477
#: ./docs/11.x/http-client.md:574
#: ./docs/master/http-client.md:564
msgctxt "P"
msgid "If you require more complicated logic to determine what responses to return for certain endpoints, you may pass a closure to the `fake` method. This closure will receive an instance of `Illuminate\\Http\\Client\\Request` and should return a response instance. Within your closure, you may perform whatever logic is necessary to determine what type of response to return:"
msgstr ""

#: ./docs/10.x/http-client.md:377
#: ./docs/11.x/http-client.md:372
#: ./docs/master/http-client.md:371
msgctxt "P"
msgid "Sometimes, you may want to register a middleware that applies to every outgoing request and incoming response. To accomplish this, you may use the `globalRequestMiddleware` and `globalResponseMiddleware` methods. Typically, these methods should be invoked in the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/http-client.md:377
msgctxt "CODE"
msgid "Http::fake(function ($request) {\n"
"    return Http::response('Hello World', 200);\n"
"});"
msgstr ""

#: ./docs/10.x/http-client.md:379
#: ./docs/11.x/http-client.md:374
#: ./docs/master/http-client.md:373
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"Http::globalRequestMiddleware(fn ($request) => $request->withHeader(\n"
"    'User-Agent', 'Example Application/1.0'\n"
"));\n\n"
"Http::globalResponseMiddleware(fn ($response) => $response->withHeader(\n"
"    'X-Finished-At', now()->toDateTimeString()\n"
"));"
msgstr ""

#: ./docs/8.x/http-client.md:381
#: ./docs/9.x/http-client.md:504
#: ./docs/10.x/http-client.md:578
#: ./docs/11.x/http-client.md:601
#: ./docs/master/http-client.md:591
#~ msgctxt "P"
#~ msgid "<a name=\"inspecting-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-client.md:382
#: ./docs/9.x/http-client.md:505
#: ./docs/10.x/http-client.md:579
#: ./docs/11.x/http-client.md:602
#: ./docs/master/http-client.md:592
msgctxt "H3"
msgid "Inspecting Requests"
msgstr ""

#: ./docs/8.x/http-client.md:384
#: ./docs/9.x/http-client.md:507
#: ./docs/10.x/http-client.md:581
#: ./docs/11.x/http-client.md:604
#: ./docs/master/http-client.md:594
msgctxt "P"
msgid "When faking responses, you may occasionally wish to inspect the requests the client receives in order to make sure your application is sending the correct data or headers. You may accomplish this by calling the `Http::assertSent` method after calling `Http::fake`."
msgstr ""

#: ./docs/8.x/http-client.md:386
#: ./docs/9.x/http-client.md:509
#: ./docs/10.x/http-client.md:583
#: ./docs/11.x/http-client.md:606
#: ./docs/master/http-client.md:596
msgctxt "P"
msgid "The `assertSent` method accepts a closure which will receive an `Illuminate\\Http\\Client\\Request` instance and should return a boolean value indicating if the request matches your expectations. In order for the test to pass, at least one request must have been issued matching the given expectations:"
msgstr ""

#: ./docs/8.x/http-client.md:388
#: ./docs/9.x/http-client.md:511
#: ./docs/10.x/http-client.md:585
#: ./docs/11.x/http-client.md:608
#: ./docs/master/http-client.md:598
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Http::fake();\n\n"
"Http::withHeaders([\n"
"    'X-First' => 'foo',\n"
"])->post('http://example.com/users', [\n"
"    'name' => 'Taylor',\n"
"    'role' => 'Developer',\n"
"]);\n\n"
"Http::assertSent(function (Request $request) {\n"
"    return $request->hasHeader('X-First', 'foo') &&\n"
"           $request->url() == 'http://example.com/users' &&\n"
"           $request['name'] == 'Taylor' &&\n"
"           $request['role'] == 'Developer';\n"
"});"
msgstr ""

#: ./docs/11.x/http-client.md:389
#: ./docs/master/http-client.md:388
msgctxt "P"
msgid "You may specify additional [Guzzle request options](http://docs.guzzlephp.org/en/stable/request-options.html) for an outgoing request using the `withOptions` method. The `withOptions` method accepts an array of key / value pairs:"
msgstr ""

#: ./docs/11.x/http-client.md:395
#: ./docs/master/http-client.md:394
#~ msgctxt "P"
#~ msgid "<a name=\"global-options\"></a>"
#~ msgstr ""

#: ./docs/11.x/http-client.md:396
#: ./docs/master/http-client.md:395
msgctxt "H4"
msgid "Global Options"
msgstr ""

#: ./docs/11.x/http-client.md:398
#: ./docs/master/http-client.md:397
msgctxt "P"
msgid "To configure default options for every outgoing request, you may utilize the `globalOptions` method. Typically, this method should be invoked from the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/11.x/http-client.md:400
#: ./docs/master/http-client.md:399
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Http::globalOptions([\n"
"        'allow_redirects' => false,\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/http-client.md:407
#: ./docs/9.x/http-client.md:530
#: ./docs/10.x/http-client.md:604
#: ./docs/11.x/http-client.md:627
#: ./docs/master/http-client.md:617
msgctxt "P"
msgid "If needed, you may assert that a specific request was not sent using the `assertNotSent` method:"
msgstr ""

#: ./docs/8.x/http-client.md:409
#: ./docs/9.x/http-client.md:532
#: ./docs/10.x/http-client.md:606
#: ./docs/11.x/http-client.md:629
#: ./docs/master/http-client.md:619
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Http::fake();\n\n"
"Http::post('http://example.com/users', [\n"
"    'name' => 'Taylor',\n"
"    'role' => 'Developer',\n"
"]);\n\n"
"Http::assertNotSent(function (Request $request) {\n"
"    return $request->url() === 'http://example.com/posts';\n"
"});"
msgstr ""

#: ./docs/9.x/http-client.md:409
#: ./docs/10.x/http-client.md:483
#: ./docs/11.x/http-client.md:497
#: ./docs/master/http-client.md:496
msgctxt "P"
msgid "Many Laravel services provide functionality to help you easily and expressively write tests, and Laravel's HTTP client is no exception. The `Http` facade's `fake` method allows you to instruct the HTTP client to return stubbed / dummy responses when requests are made."
msgstr ""

#: ./docs/9.x/http-client.md:416
#: ./docs/10.x/http-client.md:490
#: ./docs/11.x/http-client.md:504
#: ./docs/master/http-client.md:503
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"Http::fake();\n\n"
"$response = Http::post(/* ... */);"
msgstr ""

#: ./docs/8.x/http-client.md:423
#: ./docs/9.x/http-client.md:546
#: ./docs/10.x/http-client.md:620
#: ./docs/11.x/http-client.md:643
#: ./docs/master/http-client.md:633
msgctxt "P"
msgid "You may use the `assertSentCount` method to assert how many requests were \"sent\" during the test:"
msgstr ""

#: ./docs/8.x/http-client.md:425
#: ./docs/9.x/http-client.md:548
#: ./docs/10.x/http-client.md:622
#: ./docs/11.x/http-client.md:645
#: ./docs/master/http-client.md:635
msgctxt "CODE"
msgid "Http::fake();\n\n"
"Http::assertSentCount(5);"
msgstr ""

#: ./docs/8.x/http-client.md:429
#: ./docs/9.x/http-client.md:552
#: ./docs/10.x/http-client.md:626
#: ./docs/11.x/http-client.md:649
#: ./docs/master/http-client.md:639
msgctxt "P"
msgid "Or, you may use the `assertNothingSent` method to assert that no requests were sent during the test:"
msgstr ""

#: ./docs/8.x/http-client.md:431
#: ./docs/9.x/http-client.md:554
#: ./docs/10.x/http-client.md:628
#: ./docs/11.x/http-client.md:651
#: ./docs/master/http-client.md:641
msgctxt "CODE"
msgid "Http::fake();\n\n"
"Http::assertNothingSent();"
msgstr ""

#: ./docs/10.x/http-client.md:433
#: ./docs/11.x/http-client.md:447
#: ./docs/master/http-client.md:446
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-concurrent-requests\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-client.md:434
#: ./docs/11.x/http-client.md:448
#: ./docs/master/http-client.md:447
msgctxt "H4"
msgid "Customizing Concurrent Requests"
msgstr ""

#: ./docs/8.x/http-client.md:435
#: ./docs/9.x/http-client.md:597
#: ./docs/10.x/http-client.md:671
#: ./docs/11.x/http-client.md:694
#: ./docs/master/http-client.md:684
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-client.md:436
#: ./docs/11.x/http-client.md:450
#: ./docs/master/http-client.md:449
msgctxt "P"
msgid "The `pool` method cannot be chained with other HTTP client methods such as the `withHeaders` or `middleware` methods. If you want to apply custom headers or middleware to pooled requests, you should configure those options on each request in the pool:"
msgstr ""

#: ./docs/8.x/http-client.md:436
#: ./docs/9.x/http-client.md:598
#: ./docs/10.x/http-client.md:672
#: ./docs/11.x/http-client.md:695
#: ./docs/master/http-client.md:685
msgctxt "H2"
msgid "Events"
msgstr ""

#: ./docs/10.x/http-client.md:438
#: ./docs/11.x/http-client.md:452
#: ./docs/master/http-client.md:451
msgctxt "CODE: php"
msgid "use Illuminate\\Http\\Client\\Pool;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"$headers = [\n"
"    'X-Example' => 'example',\n"
"];\n\n"
"$responses = Http::pool(fn (Pool $pool) => [\n"
"    $pool->withHeaders($headers)->get('http://laravel.test/test'),\n"
"    $pool->withHeaders($headers)->get('http://laravel.test/test'),\n"
"    $pool->withHeaders($headers)->get('http://laravel.test/test'),\n"
"]);"
msgstr ""

#: ./docs/8.x/http-client.md:438
#: ./docs/9.x/http-client.md:600
#: ./docs/10.x/http-client.md:674
#: ./docs/11.x/http-client.md:697
#: ./docs/master/http-client.md:687
msgctxt "P"
msgid "Laravel fires three events during the process of sending HTTP requests. The `RequestSending` event is fired prior to a request being sent, while the `ResponseReceived` event is fired after a response is received for a given request. The `ConnectionFailed` event is fired if no response is received for a given request."
msgstr ""

#: ./docs/8.x/http-client.md:440
#: ./docs/9.x/http-client.md:602
#: ./docs/10.x/http-client.md:676
msgctxt "P"
msgid "The `RequestSending` and `ConnectionFailed` events both contain a public `$request` property that you may use to inspect the `Illuminate\\Http\\Client\\Request` instance. Likewise, the `ResponseReceived` event contains a `$request` property as well as a `$response` property which may be used to inspect the `Illuminate\\Http\\Client\\Response` instance. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#: ./docs/8.x/http-client.md:442
#: ./docs/9.x/http-client.md:604
#: ./docs/10.x/http-client.md:678
msgctxt "CODE"
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Http\\Client\\Events\\RequestSending' => [\n"
"        'App\\Listeners\\LogRequestSending',\n"
"    ],\n"
"    'Illuminate\\Http\\Client\\Events\\ResponseReceived' => [\n"
"        'App\\Listeners\\LogResponseReceived',\n"
"    ],\n"
"    'Illuminate\\Http\\Client\\Events\\ConnectionFailed' => [\n"
"        'App\\Listeners\\LogConnectionFailed',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/http-client.md:458
#: ./docs/11.x/http-client.md:472
#: ./docs/master/http-client.md:471
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Http::macro('github', function () {\n"
"        return Http::withHeaders([\n"
"            'X-Example' => 'example',\n"
"        ])->baseUrl('https://github.com');\n"
"    });\n"
"}"
msgstr ""

#: ./docs/9.x/http-client.md:458
#: ./docs/10.x/http-client.md:532
#: ./docs/11.x/http-client.md:555
#: ./docs/master/http-client.md:545
msgctxt "P"
msgid "When all the responses in a response sequence have been consumed, any further requests will cause the response sequence to throw an exception. If you would like to specify a default response that should be returned when a sequence is empty, you may use the `whenEmpty` method:"
msgstr ""

#: ./docs/9.x/http-client.md:479
#: ./docs/11.x/http-client.md:576
#: ./docs/master/http-client.md:566
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Request;\n\n"
"Http::fake(function (Request $request) {\n"
"    return Http::response('Hello World', 200);\n"
"});"
msgstr ""

#: ./docs/9.x/http-client.md:485
#: ./docs/10.x/http-client.md:559
#: ./docs/11.x/http-client.md:582
#: ./docs/master/http-client.md:572
#~ msgctxt "P"
#~ msgid "<a name=\"preventing-stray-requests\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-client.md:486
#: ./docs/10.x/http-client.md:560
#: ./docs/11.x/http-client.md:583
#: ./docs/master/http-client.md:573
msgctxt "H3"
msgid "Preventing Stray Requests"
msgstr ""

#: ./docs/9.x/http-client.md:488
#: ./docs/10.x/http-client.md:562
#: ./docs/11.x/http-client.md:585
#: ./docs/master/http-client.md:575
msgctxt "P"
msgid "If you would like to ensure that all requests sent via the HTTP client have been faked throughout your individual test or complete test suite, you can call the `preventStrayRequests` method. After calling this method, any requests that do not have a corresponding fake response will throw an exception rather than making the actual HTTP request:"
msgstr ""

#: ./docs/9.x/http-client.md:490
#: ./docs/10.x/http-client.md:564
#: ./docs/11.x/http-client.md:587
#: ./docs/master/http-client.md:577
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"Http::preventStrayRequests();\n\n"
"Http::fake([\n"
"    'github.com/*' => Http::response('ok'),\n"
"]);\n\n"
"// An \"ok\" response is returned...\n"
"Http::get('https://github.com/laravel/framework');\n\n"
"// An exception is thrown...\n"
"Http::get('https://laravel.com');"
msgstr ""

#: ./docs/11.x/http-client.md:533
#~ msgctxt "P"
#~ msgid "<a name=\"faking-connection-exceptions\"></a>"
#~ msgstr ""

#: ./docs/11.x/http-client.md:534
msgctxt "H4"
msgid "Faking Connection Exceptions"
msgstr ""

#: ./docs/11.x/http-client.md:536
msgctxt "P"
msgid "Sometimes you may need to test your application's behavior if the HTTP client encounters an `Illuminate\\Http\\Client\\ConnectionException` when attempting to make a request. You can instruct the HTTP client to throw a connection exception using the `failedConnection` method:"
msgstr ""

#: ./docs/11.x/http-client.md:538
msgctxt "CODE"
msgid "Http::fake([\n"
"    'github.com/*' => Http::failedConnection(),\n"
"]);"
msgstr ""

#: ./docs/10.x/http-client.md:551
msgctxt "P"
msgid "If you require more complicated logic to determine what responses to return for certain endpoints, you may pass a closure to the `fake` method. This closure will receive an instance of `Illuminate\\Http\\Client\\Request` as well as an array of options. The closure should return a response instance. Within your closure, you may perform whatever logic is necessary to determine what type of response to return:"
msgstr ""

#: ./docs/10.x/http-client.md:553
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Request;\n\n"
"Http::fake(function (Request $request, array $options) {\n"
"    return Http::response('Hello World', 200);\n"
"});"
msgstr ""

#: ./docs/9.x/http-client.md:558
#: ./docs/10.x/http-client.md:632
#: ./docs/11.x/http-client.md:655
#: ./docs/master/http-client.md:645
#~ msgctxt "P"
#~ msgid "<a name=\"recording-requests-and-responses\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-client.md:559
#: ./docs/10.x/http-client.md:633
#: ./docs/11.x/http-client.md:656
#: ./docs/master/http-client.md:646
msgctxt "H4"
msgid "Recording Requests / Responses"
msgstr ""

#: ./docs/9.x/http-client.md:561
#: ./docs/10.x/http-client.md:635
#: ./docs/11.x/http-client.md:658
#: ./docs/master/http-client.md:648
msgctxt "P"
msgid "You may use the `recorded` method to gather all requests and their corresponding responses. The `recorded` method returns a collection of arrays that contains instances of `Illuminate\\Http\\Client\\Request` and `Illuminate\\Http\\Client\\Response`:"
msgstr ""

#: ./docs/9.x/http-client.md:563
#: ./docs/10.x/http-client.md:637
#: ./docs/11.x/http-client.md:660
#: ./docs/master/http-client.md:650
msgctxt "CODE: php"
msgid "Http::fake([\n"
"    'https://laravel.com' => Http::response(status: 500),\n"
"    'https://nova.laravel.com/' => Http::response(),\n"
"]);\n\n"
"Http::get('https://laravel.com');\n"
"Http::get('https://nova.laravel.com/');\n\n"
"$recorded = Http::recorded();\n\n"
"[$request, $response] = $recorded[0];"
msgstr ""

#: ./docs/9.x/http-client.md:577
#: ./docs/10.x/http-client.md:651
#: ./docs/11.x/http-client.md:674
#: ./docs/master/http-client.md:664
msgctxt "P"
msgid "Additionally, the `recorded` method accepts a closure which will receive an instance of `Illuminate\\Http\\Client\\Request` and `Illuminate\\Http\\Client\\Response` and may be used to filter request / response pairs based on your expectations:"
msgstr ""

#: ./docs/9.x/http-client.md:579
#: ./docs/10.x/http-client.md:653
#: ./docs/11.x/http-client.md:676
#: ./docs/master/http-client.md:666
msgctxt "CODE: php"
msgid "use Illuminate\\Http\\Client\\Request;\n"
"use Illuminate\\Http\\Client\\Response;\n\n"
"Http::fake([\n"
"    'https://laravel.com' => Http::response(status: 500),\n"
"    'https://nova.laravel.com/' => Http::response(),\n"
"]);\n\n"
"Http::get('https://laravel.com');\n"
"Http::get('https://nova.laravel.com/');\n\n"
"$recorded = Http::recorded(function (Request $request, Response $response) {\n"
"    return $request->url() !== 'https://laravel.com' &&\n"
"           $response->successful();\n"
"});"
msgstr ""

#: ./docs/11.x/http-client.md:699
#: ./docs/master/http-client.md:689
msgctxt "P"
msgid "The `RequestSending` and `ConnectionFailed` events both contain a public `$request` property that you may use to inspect the `Illuminate\\Http\\Client\\Request` instance. Likewise, the `ResponseReceived` event contains a `$request` property as well as a `$response` property which may be used to inspect the `Illuminate\\Http\\Client\\Response` instance. You may create [event listeners](/docs/{{version}}/events) for these events within your application:"
msgstr ""

#: ./docs/11.x/http-client.md:701
#: ./docs/master/http-client.md:691
msgctxt "CODE"
msgid "use Illuminate\\Http\\Client\\Events\\RequestSending;\n\n"
"class LogRequest\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(RequestSending $event): void\n"
"    {\n"
"        // $event->request ...\n"
"    }\n"
"}"
msgstr ""

