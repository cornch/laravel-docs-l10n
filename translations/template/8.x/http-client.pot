# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-13 05:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/http-client.md:1
#, no-wrap
msgid "HTTP Client"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/http-client.md:17
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:17
#, no-wrap
msgid ""
"- [Making Requests](#making-requests)\n"
"    - [Request Data](#request-data)\n"
"    - [Headers](#headers)\n"
"    - [Authentication](#authentication)\n"
"    - [Timeout](#timeout)\n"
"    - [Retries](#retries)\n"
"    - [Error Handling](#error-handling)\n"
"    - [Guzzle Options](#guzzle-options)\n"
"- [Concurrent Requests](#concurrent-requests)\n"
"- [Testing](#testing)\n"
"    - [Faking Responses](#faking-responses)\n"
"    - [Inspecting Requests](#inspecting-requests)\n"
"- [Events](#events)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:19
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-client.md:19
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:22
msgid ""
"Laravel provides an expressive, minimal API around the [Guzzle HTTP "
"client](http://docs.guzzlephp.org/en/stable/), allowing you to quickly make "
"outgoing HTTP requests to communicate with other web applications. Laravel's "
"wrapper around Guzzle is focused on its most common use cases and a "
"wonderful developer experience."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:24
msgid ""
"Before getting started, you should ensure that you have installed the Guzzle "
"package as a dependency of your application. By default, Laravel "
"automatically includes this dependency. However, if you have previously "
"removed the package, you may install it again via Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:26
#, no-wrap
msgid "    composer require guzzlehttp/guzzle\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:28
#, no-wrap
msgid "<a name=\"making-requests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-client.md:28
#, no-wrap
msgid "Making Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:31
msgid ""
"To make requests, you may use the `get`, `post`, `put`, `patch`, and "
"`delete` methods provided by the `Http` facade. First, let's examine how to "
"make a basic `GET` request to another URL:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:33 docs/8.x/http-client.md:68 docs/8.x/http-client.md:276
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:35
#, no-wrap
msgid "    $response = Http::get('http://example.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:37
msgid ""
"The `get` method returns an instance of "
"`Illuminate\\Http\\Client\\Response`, which provides a variety of methods "
"that may be used to inspect the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:50
#, no-wrap
msgid ""
"    $response->body() : string;\n"
"    $response->json() : array|mixed;\n"
"    $response->object() : object;\n"
"    $response->collect() : Illuminate\\Support\\Collection;\n"
"    $response->status() : int;\n"
"    $response->ok() : bool;\n"
"    $response->successful() : bool;\n"
"    $response->failed() : bool;\n"
"    $response->serverError() : bool;\n"
"    $response->clientError() : bool;\n"
"    $response->header($header) : string;\n"
"    $response->headers() : array;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:52
msgid ""
"The `Illuminate\\Http\\Client\\Response` object also implements the PHP "
"`ArrayAccess` interface, allowing you to access JSON response data directly "
"on the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:54
#, no-wrap
msgid "    return Http::get('http://example.com/users/1')['name'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:56
#, no-wrap
msgid "<a name=\"dumping-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:56
#, no-wrap
msgid "Dumping Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:59
msgid ""
"If you would like to dump the outgoing request instance before it is sent "
"and terminate the script's execution, you may add the `dd` method to the "
"beginning of your request definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:61
#, no-wrap
msgid "    return Http::dd()->get('http://example.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:63
#, no-wrap
msgid "<a name=\"request-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:63
#, no-wrap
msgid "Request Data"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:66
msgid ""
"Of course, it is common when making `POST`, `PUT`, and `PATCH` requests to "
"send additional data with your request, so these methods accept an array of "
"data as their second argument. By default, data will be sent using the "
"`application/json` content type:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:73
#, no-wrap
msgid ""
"    $response = Http::post('http://example.com/users', [\n"
"        'name' => 'Steve',\n"
"        'role' => 'Network Administrator',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:75
#, no-wrap
msgid "<a name=\"get-request-query-parameters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:75
#, no-wrap
msgid "GET Request Query Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:78
msgid ""
"When making `GET` requests, you may either append a query string to the URL "
"directly or pass an array of key / value pairs as the second argument to the "
"`get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:83
#, no-wrap
msgid ""
"    $response = Http::get('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'page' => 1,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:85
#, no-wrap
msgid "<a name=\"sending-form-url-encoded-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:85
#, no-wrap
msgid "Sending Form URL Encoded Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:88
msgid ""
"If you would like to send data using the `application/x-www-form-urlencoded` "
"content type, you should call the `asForm` method before making your "
"request:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:93
#, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://example.com/users', [\n"
"        'name' => 'Sara',\n"
"        'role' => 'Privacy Consultant',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:95
#, no-wrap
msgid "<a name=\"sending-a-raw-request-body\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:95
#, no-wrap
msgid "Sending A Raw Request Body"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:98
msgid ""
"You may use the `withBody` method if you would like to provide a raw request "
"body when making a request. The content type may be provided via the "
"method's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:102
#, no-wrap
msgid ""
"    $response = Http::withBody(\n"
"        base64_encode($photo), 'image/jpeg'\n"
"    )->post('http://example.com/photo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:104
#, no-wrap
msgid "<a name=\"multi-part-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:104
#, no-wrap
msgid "Multi-Part Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:107
msgid ""
"If you would like to send files as multi-part requests, you should call the "
"`attach` method before making your request. This method accepts the name of "
"the file and its contents. If needed, you may provide a third argument which "
"will be considered the file's filename:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:111
#, no-wrap
msgid ""
"    $response = Http::attach(\n"
"        'attachment', file_get_contents('photo.jpg'), 'photo.jpg'\n"
"    )->post('http://example.com/attachments');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:113
msgid ""
"Instead of passing the raw contents of a file, you may pass a stream "
"resource:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:115
#, no-wrap
msgid "    $photo = fopen('photo.jpg', 'r');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:119
#, no-wrap
msgid ""
"    $response = Http::attach(\n"
"        'attachment', $photo, 'photo.jpg'\n"
"    )->post('http://example.com/attachments');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:121
#, no-wrap
msgid "<a name=\"headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:121
#, no-wrap
msgid "Headers"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:124
msgid ""
"Headers may be added to requests using the `withHeaders` method. This "
"`withHeaders` method accepts an array of key / value pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:131
#, no-wrap
msgid ""
"    $response = Http::withHeaders([\n"
"        'X-First' => 'foo',\n"
"        'X-Second' => 'bar'\n"
"    ])->post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:133
msgid ""
"You may use the `accept` method to specify the content type that your "
"application is expecting in response to your request:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:135
#, no-wrap
msgid ""
"    $response = "
"Http::accept('application/json')->get('http://example.com/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:137
msgid ""
"For convenience, you may use the `acceptJson` method to quickly specify that "
"your application expects the `application/json` content type in response to "
"your request:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:139
#, no-wrap
msgid "    $response = Http::acceptJson()->get('http://example.com/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:141
#, no-wrap
msgid "<a name=\"authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:141
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:144
msgid ""
"You may specify basic and digest authentication credentials using the "
"`withBasicAuth` and `withDigestAuth` methods, respectively:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:147
#, no-wrap
msgid ""
"    // Basic authentication...\n"
"    $response = Http::withBasicAuth('taylor@laravel.com', "
"'secret')->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:150
#, no-wrap
msgid ""
"    // Digest authentication...\n"
"    $response = Http::withDigestAuth('taylor@laravel.com', "
"'secret')->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:152
#, no-wrap
msgid "<a name=\"bearer-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:152
#, no-wrap
msgid "Bearer Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:155
msgid ""
"If you would like to quickly add a bearer token to the request's "
"`Authorization` header, you may use the `withToken` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:157
#, no-wrap
msgid "    $response = Http::withToken('token')->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:159
#, no-wrap
msgid "<a name=\"timeout\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:159
#, no-wrap
msgid "Timeout"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:162
msgid ""
"The `timeout` method may be used to specify the maximum number of seconds to "
"wait for a response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:164
#, no-wrap
msgid "    $response = Http::timeout(3)->get(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:166
msgid ""
"If the given timeout is exceeded, an instance of "
"`Illuminate\\Http\\Client\\ConnectionException` will be thrown."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:168
#, no-wrap
msgid "<a name=\"retries\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:168
#, no-wrap
msgid "Retries"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:171
msgid ""
"If you would like HTTP client to automatically retry the request if a client "
"or server error occurs, you may use the `retry` method. The `retry` method "
"accepts the maximum number of times the request should be attempted and the "
"number of milliseconds that Laravel should wait in between attempts:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:173
#, no-wrap
msgid "    $response = Http::retry(3, 100)->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:175
msgid ""
"If needed, you may pass a third argument to the `retry` method. The third "
"argument should be a callable that determines if the retries should actually "
"be attempted. For example, you may wish to only retry the request if the "
"initial request encounters an `ConnectionException`:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:179
#, no-wrap
msgid ""
"    $response = Http::retry(3, 100, function ($exception) {\n"
"        return $exception instanceof ConnectionException;\n"
"    })->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:181
msgid ""
"If all of the requests fail, an instance of "
"`Illuminate\\Http\\Client\\RequestException` will be thrown."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:183
#, no-wrap
msgid "<a name=\"error-handling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:183
#, no-wrap
msgid "Error Handling"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:186
msgid ""
"Unlike Guzzle's default behavior, Laravel's HTTP client wrapper does not "
"throw exceptions on client or server errors (`400` and `500` level responses "
"from servers). You may determine if one of these errors was returned using "
"the `successful`, `clientError`, or `serverError` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:189
#, no-wrap
msgid ""
"    // Determine if the status code is >= 200 and < 300...\n"
"    $response->successful();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:192
#, no-wrap
msgid ""
"    // Determine if the status code is >= 400...\n"
"    $response->failed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:195
#, no-wrap
msgid ""
"    // Determine if the response has a 400 level status code...\n"
"    $response->clientError();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:198
#, no-wrap
msgid ""
"    // Determine if the response has a 500 level status code...\n"
"    $response->serverError();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:200
#, no-wrap
msgid "<a name=\"throwing-exceptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:200
#, no-wrap
msgid "Throwing Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:203
msgid ""
"If you have a response instance and would like to throw an instance of "
"`Illuminate\\Http\\Client\\RequestException` if the response status code "
"indicates a client or server error, you may use the `throw` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:205 docs/8.x/http-client.md:280
#, no-wrap
msgid "    $response = Http::post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:208
#, no-wrap
msgid ""
"    // Throw an exception if a client or server error occurred...\n"
"    $response->throw();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:210
#, no-wrap
msgid "    return $response['user']['id'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:212
msgid ""
"The `Illuminate\\Http\\Client\\RequestException` instance has a public "
"`$response` property which will allow you to inspect the returned response."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:214
msgid ""
"The `throw` method returns the response instance if no error occurred, "
"allowing you to chain other operations onto the `throw` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:216
#, no-wrap
msgid "    return Http::post(...)->throw()->json();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:218
msgid ""
"If you would like to perform some additional logic before the exception is "
"thrown, you may pass a closure to the `throw` method. The exception will be "
"thrown automatically after the closure is invoked, so you do not need to "
"re-throw the exception from within the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:222
#, no-wrap
msgid ""
"    return Http::post(...)->throw(function ($response, $e) {\n"
"        //\n"
"    })->json();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:224
#, no-wrap
msgid "<a name=\"guzzle-options\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:224
#, no-wrap
msgid "Guzzle Options"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:227
msgid ""
"You may specify additional [Guzzle request "
"options](http://docs.guzzlephp.org/en/stable/request-options.html) using the "
"`withOptions` method. The `withOptions` method accepts an array of key / "
"value pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:231
#, no-wrap
msgid ""
"    $response = Http::withOptions([\n"
"        'debug' => true,\n"
"    ])->get('http://example.com/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:233
#, no-wrap
msgid "<a name=\"concurrent-requests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-client.md:233
#, no-wrap
msgid "Concurrent Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:236
msgid ""
"Sometimes, you may wish to make multiple HTTP requests concurrently. In "
"other words, you want several requests to be dispatched at the same time "
"instead of issuing the requests sequentially. This can lead to substantial "
"performance improvements when interacting with slow HTTP APIs."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:238
msgid ""
"Thankfully, you may accomplish this using the `pool` method. The `pool` "
"method accepts a closure which receives an `Illuminate\\Http\\Client\\Pool` "
"instance, allowing you to easily add requests to the request pool for "
"dispatching:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:241 docs/8.x/http-client.md:256
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Client\\Pool;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:247
#, no-wrap
msgid ""
"    $responses = Http::pool(fn (Pool $pool) => [\n"
"        $pool->get('http://localhost/first'),\n"
"        $pool->get('http://localhost/second'),\n"
"        $pool->get('http://localhost/third'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:251
#, no-wrap
msgid ""
"    return $responses[0]->ok() &&\n"
"           $responses[1]->ok() &&\n"
"           $responses[2]->ok();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:253
msgid ""
"As you can see, each response instance can be accessed based on the order it "
"was added to the pool. If you wish, you can name the requests using the `as` "
"method, which allows you to access the corresponding responses by name:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:262
#, no-wrap
msgid ""
"    $responses = Http::pool(fn (Pool $pool) => [\n"
"        $pool->as('first')->get('http://localhost/first'),\n"
"        $pool->as('second')->get('http://localhost/second'),\n"
"        $pool->as('third')->get('http://localhost/third'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:264
#, no-wrap
msgid "    return $responses['first']->ok();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:266
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-client.md:266
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:269
msgid ""
"Many Laravel services provide functionality to help you easily and "
"expressively write tests, and Laravel's HTTP wrapper is no exception. The "
"`Http` facade's `fake` method allows you to instruct the HTTP client to "
"return stubbed / dummy responses when requests are made."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:271
#, no-wrap
msgid "<a name=\"faking-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:271
#, no-wrap
msgid "Faking Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:274
msgid ""
"For example, to instruct the HTTP client to return empty, `200` status code "
"responses for every request, you may call the `fake` method with no "
"arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:278 docs/8.x/http-client.md:355 docs/8.x/http-client.md:376 docs/8.x/http-client.md:389
#, no-wrap
msgid "    Http::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:282
#, no-wrap
msgid ""
"> {note} When faking requests, HTTP client middleware are not executed. You "
"should define expectations for faked responses as if these middleware have "
"run correctly.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:284
#, no-wrap
msgid "<a name=\"faking-specific-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:284
#, no-wrap
msgid "Faking Specific URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:287
msgid ""
"Alternatively, you may pass an array to the `fake` method. The array's keys "
"should represent URL patterns that you wish to fake and their associated "
"responses. The `*` character may be used as a wildcard character. Any "
"requests made to URLs that have not been faked will actually be "
"executed. You may use the `Http` facade's `response` method to construct "
"stub / fake responses for these endpoints:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:291
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a JSON response for GitHub endpoints...\n"
"        'github.com/*' => Http::response(['foo' => 'bar'], 200, $headers),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:295
#, no-wrap
msgid ""
"        // Stub a string response for Google endpoints...\n"
"        'google.com/*' => Http::response('Hello World', 200, $headers),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:297
msgid ""
"If you would like to specify a fallback URL pattern that will stub all "
"unmatched URLs, you may use a single `*` character:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:301
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a JSON response for GitHub endpoints...\n"
"        'github.com/*' => Http::response(['foo' => 'bar'], 200, "
"['Headers']),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:305
#, no-wrap
msgid ""
"        // Stub a string response for all other endpoints...\n"
"        '*' => Http::response('Hello World', 200, ['Headers']),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:307
#, no-wrap
msgid "<a name=\"faking-response-sequences\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:307
#, no-wrap
msgid "Faking Response Sequences"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:310
msgid ""
"Sometimes you may need to specify that a single URL should return a series "
"of fake responses in a specific order. You may accomplish this using the "
"`Http::sequence` method to build the responses:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:318
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a series of responses for GitHub endpoints...\n"
"        'github.com/*' => Http::sequence()\n"
"                                ->push('Hello World', 200)\n"
"                                ->push(['foo' => 'bar'], 200)\n"
"                                ->pushStatus(404),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:320
msgid ""
"When all of the responses in a response sequence have been consumed, any "
"further requests will cause the response sequence to throw an exception. If "
"you would like to specify a default response that should be returned when a "
"sequence is empty, you may use the `whenEmpty` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:328
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a series of responses for GitHub endpoints...\n"
"        'github.com/*' => Http::sequence()\n"
"                                ->push('Hello World', 200)\n"
"                                ->push(['foo' => 'bar'], 200)\n"
"                                ->whenEmpty(Http::response()),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:330
msgid ""
"If you would like to fake a sequence of responses but do not need to specify "
"a specific URL pattern that should be faked, you may use the "
"`Http::fakeSequence` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:334
#, no-wrap
msgid ""
"    Http::fakeSequence()\n"
"            ->push('Hello World', 200)\n"
"            ->whenEmpty(Http::response());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:336
#, no-wrap
msgid "<a name=\"fake-callback\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:336
#, no-wrap
msgid "Fake Callback"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:339
msgid ""
"If you require more complicated logic to determine what responses to return "
"for certain endpoints, you may pass a closure to the `fake` method. This "
"closure will receive an instance of `Illuminate\\Http\\Client\\Request` and "
"should return a response instance. Within your closure, you may perform "
"whatever logic is necessary to determine what type of response to return:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:343
#, no-wrap
msgid ""
"    Http::fake(function ($request) {\n"
"        return Http::response('Hello World', 200);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:345
#, no-wrap
msgid "<a name=\"inspecting-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:345
#, no-wrap
msgid "Inspecting Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:348
msgid ""
"When faking responses, you may occasionally wish to inspect the requests the "
"client receives in order to make sure your application is sending the "
"correct data or headers. You may accomplish this by calling the "
"`Http::assertSent` method after calling `Http::fake`."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:350
msgid ""
"The `assertSent` method accepts a closure which will receive an "
"`Illuminate\\Http\\Client\\Request` instance and should return a boolean "
"value indicating if the request matches your expectations. In order for the "
"test to pass, at least one request must have been issued matching the given "
"expectations:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:353 docs/8.x/http-client.md:374
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Client\\Request;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:362
#, no-wrap
msgid ""
"    Http::withHeaders([\n"
"        'X-First' => 'foo',\n"
"    ])->post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'role' => 'Developer',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:369
#, no-wrap
msgid ""
"    Http::assertSent(function (Request $request) {\n"
"        return $request->hasHeader('X-First', 'foo') &&\n"
"               $request->url() == 'http://example.com/users' &&\n"
"               $request['name'] == 'Taylor' &&\n"
"               $request['role'] == 'Developer';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:371
msgid ""
"If needed, you may assert that a specific request was not sent using the "
"`assertNotSent` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:381
#, no-wrap
msgid ""
"    Http::post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'role' => 'Developer',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:385
#, no-wrap
msgid ""
"    Http::assertNotSent(function (Request $request) {\n"
"        return $request->url() === 'http://example.com/posts';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:387
msgid ""
"Or, you may use the `assertNothingSent` method to assert that no requests "
"were sent during the test:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:391
#, no-wrap
msgid "    Http::assertNothingSent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:393
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-client.md:393
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:396
msgid ""
"Laravel fires three events during the process of sending HTTP requests. The "
"`RequestSending` event is fired prior to a request being sent, while the "
"`ResponseReceived` event is fired after a response is received for a given "
"request. The `ConnectionFailed` event is fired if no response is received "
"for a given request."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:398
msgid ""
"The `RequestSending` and `ConnectionFailed` events both contain a public "
"`$request` property that you may use to inspect the "
"`Illuminate\\Http\\Client\\Request` instance. Likewise, the "
"`ResponseReceived` event contains a `$request` property as well as a "
"`$response` property which may be used to inspect the "
"`Illuminate\\Http\\Client\\Response` instance. You may register event "
"listeners for this event in your `App\\Providers\\EventServiceProvider` "
"service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:414
#, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Http\\Client\\Events\\RequestSending' => [\n"
"            'App\\Listeners\\LogRequestSending',\n"
"        ],\n"
"        'Illuminate\\Http\\Client\\Events\\ResponseReceived' => [\n"
"            'App\\Listeners\\LogResponseReceived',\n"
"        ],\n"
"        'Illuminate\\Http\\Client\\Events\\ConnectionFailed' => [\n"
"            'App\\Listeners\\LogConnectionFailed',\n"
"        ],\n"
"    ];\n"
msgstr ""
