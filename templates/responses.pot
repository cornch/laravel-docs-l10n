#
msgid ""
msgstr ""

#: docs/10.x/responses.md:block 1 (header)
msgid "HTTP Responses"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Creating Responses](#creating-responses)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Attaching Headers To Responses](#attaching-headers-to-responses)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Attaching Cookies To Responses](#attaching-cookies-to-responses)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Cookies & Encryption](#cookies-and-encryption)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Redirects](#redirects)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Redirecting To Named Routes](#redirecting-named-routes)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Redirecting To Controller Actions](#redirecting-controller-actions)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Redirecting To External Domains](#redirecting-external-domains)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Redirecting With Flashed Session Data](#redirecting-with-flashed-session-data)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Other Response Types](#other-response-types)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[View Responses](#view-responses)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[JSON Responses](#json-responses)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[File Downloads](#file-downloads)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[File Responses](#file-responses)"
msgstr ""

#: docs/10.x/responses.md:block 2 (unordered list)
msgid "[Response Macros](#response-macros)"
msgstr ""

#: docs/10.x/responses.md:block 4 (header)
msgid "Creating Responses"
msgstr ""

#: docs/10.x/responses.md:block 6 (header)
msgid "Strings & Arrays"
msgstr ""

#: docs/10.x/responses.md:block 7 (paragraph)
msgid "All routes and controllers should return a response to be sent back to the user's browser. Laravel provides several different ways to return responses. The most basic response is returning a string from a route or controller. The framework will automatically convert the string into a full HTTP response:"
msgstr ""

#: docs/10.x/responses.md:block 8 (code)
msgid ""
"Route::get('/', function () {\n"
"    return 'Hello World';\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 9 (paragraph)
msgid "In addition to returning strings from your routes and controllers, you may also return arrays. The framework will automatically convert the array into a JSON response:"
msgstr ""

#: docs/10.x/responses.md:block 10 (code)
msgid ""
"Route::get('/', function () {\n"
"    return [1, 2, 3];\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 11 (quote)
msgid "**Note** Did you know you can also return [Eloquent collections](/docs/{{version}}/eloquent-collections) from your routes or controllers? They will automatically be converted to JSON. Give it a shot!"
msgstr ""

#: docs/10.x/responses.md:block 13 (header)
msgid "Response Objects"
msgstr ""

#: docs/10.x/responses.md:block 14 (paragraph)
msgid "Typically, you won't just be returning simple strings or arrays from your route actions. Instead, you will be returning full `Illuminate\\Http\\Response` instances or [views](/docs/{{version}}/views)."
msgstr ""

#: docs/10.x/responses.md:block 15 (paragraph)
msgid "Returning a full `Response` instance allows you to customize the response's HTTP status code and headers. A `Response` instance inherits from the `Symfony\\Component\\HttpFoundation\\Response` class, which provides a variety of methods for building HTTP responses:"
msgstr ""

#: docs/10.x/responses.md:block 16 (code)
msgid ""
"Route::get('/home', function () {\n"
"    return response('Hello World', 200)\n"
"                  ->header('Content-Type', 'text/plain');\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 18 (header)
msgid "Eloquent Models & Collections"
msgstr ""

#: docs/10.x/responses.md:block 19 (paragraph)
msgid "You may also return [Eloquent ORM](/docs/{{version}}/eloquent) models and collections directly from your routes and controllers. When you do, Laravel will automatically convert the models and collections to JSON responses while respecting the model's [hidden attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json):"
msgstr ""

#: docs/10.x/responses.md:block 20 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/user/{user}', function (User $user) {\n"
"    return $user;\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 22 (header)
msgid "Attaching Headers To Responses"
msgstr ""

#: docs/10.x/responses.md:block 23 (paragraph)
msgid "Keep in mind that most response methods are chainable, allowing for the fluent construction of response instances. For example, you may use the `header` method to add a series of headers to the response before sending it back to the user:"
msgstr ""

#: docs/10.x/responses.md:block 24 (code)
msgid ""
"return response($content)\n"
"            ->header('Content-Type', $type)\n"
"            ->header('X-Header-One', 'Header Value')\n"
"            ->header('X-Header-Two', 'Header Value');\n"
msgstr ""

#: docs/10.x/responses.md:block 25 (paragraph)
msgid "Or, you may use the `withHeaders` method to specify an array of headers to be added to the response:"
msgstr ""

#: docs/10.x/responses.md:block 26 (code)
msgid ""
"return response($content)\n"
"            ->withHeaders([\n"
"                'Content-Type' => $type,\n"
"                'X-Header-One' => 'Header Value',\n"
"                'X-Header-Two' => 'Header Value',\n"
"            ]);\n"
msgstr ""

#: docs/10.x/responses.md:block 28 (header)
msgid "Cache Control Middleware"
msgstr ""

#: docs/10.x/responses.md:block 29 (paragraph)
msgid "Laravel includes a `cache.headers` middleware, which may be used to quickly set the `Cache-Control` header for a group of routes. Directives should be provided using the \"snake case\" equivalent of the corresponding cache-control directive and should be separated by a semicolon. If `etag` is specified in the list of directives, an MD5 hash of the response content will automatically be set as the ETag identifier:"
msgstr ""

#: docs/10.x/responses.md:block 30 (code)
msgid ""
"Route::middleware('cache.headers:public;max_age=2628000;etag')->group(function () {\n"
"    Route::get('/privacy', function () {\n"
"        // ...\n"
"    });\n"
"\n"
"    Route::get('/terms', function () {\n"
"        // ...\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 32 (header)
msgid "Attaching Cookies To Responses"
msgstr ""

#: docs/10.x/responses.md:block 33 (paragraph)
msgid "You may attach a cookie to an outgoing `Illuminate\\Http\\Response` instance using the `cookie` method. You should pass the name, value, and the number of minutes the cookie should be considered valid to this method:"
msgstr ""

#: docs/10.x/responses.md:block 34 (code)
msgid ""
"return response('Hello World')->cookie(\n"
"    'name', 'value', $minutes\n"
");\n"
msgstr ""

#: docs/10.x/responses.md:block 35 (paragraph)
msgid "The `cookie` method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP's native [setcookie](https://secure.php.net/manual/en/function.setcookie.php) method:"
msgstr ""

#: docs/10.x/responses.md:block 36 (code)
msgid ""
"return response('Hello World')->cookie(\n"
"    'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n"
");\n"
msgstr ""

#: docs/10.x/responses.md:block 37 (paragraph)
msgid "If you would like to ensure that a cookie is sent with the outgoing response but you do not yet have an instance of that response, you can use the `Cookie` facade to \"queue\" cookies for attachment to the response when it is sent. The `queue` method accepts the arguments needed to create a cookie instance. These cookies will be attached to the outgoing response before it is sent to the browser:"
msgstr ""

#: docs/10.x/responses.md:block 38 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Cookie;\n"
"\n"
"Cookie::queue('name', 'value', $minutes);\n"
msgstr ""

#: docs/10.x/responses.md:block 40 (header)
msgid "Generating Cookie Instances"
msgstr ""

#: docs/10.x/responses.md:block 41 (paragraph)
msgid "If you would like to generate a `Symfony\\Component\\HttpFoundation\\Cookie` instance that can be attached to a response instance at a later time, you may use the global `cookie` helper. This cookie will not be sent back to the client unless it is attached to a response instance:"
msgstr ""

#: docs/10.x/responses.md:block 42 (code)
msgid ""
"$cookie = cookie('name', 'value', $minutes);\n"
"\n"
"return response('Hello World')->cookie($cookie);\n"
msgstr ""

#: docs/10.x/responses.md:block 44 (header)
msgid "Expiring Cookies Early"
msgstr ""

#: docs/10.x/responses.md:block 45 (paragraph)
msgid "You may remove a cookie by expiring it via the `withoutCookie` method of an outgoing response:"
msgstr ""

#: docs/10.x/responses.md:block 46 (code)
msgid "return response('Hello World')->withoutCookie('name');\n"
msgstr ""

#: docs/10.x/responses.md:block 47 (paragraph)
msgid "If you do not yet have an instance of the outgoing response, you may use the `Cookie` facade's `expire` method to expire a cookie:"
msgstr ""

#: docs/10.x/responses.md:block 48 (code)
msgid "Cookie::expire('name');\n"
msgstr ""

#: docs/10.x/responses.md:block 50 (header)
msgid "Cookies & Encryption"
msgstr ""

#: docs/10.x/responses.md:block 51 (paragraph)
msgid "By default, all cookies generated by Laravel are encrypted and signed so that they can't be modified or read by the client. If you would like to disable encryption for a subset of cookies generated by your application, you may use the `$except` property of the `App\\Http\\Middleware\\EncryptCookies` middleware, which is located in the `app/Http/Middleware` directory:"
msgstr ""

#: docs/10.x/responses.md:block 52 (code)
msgid ""
"/**\n"
" * The names of the cookies that should not be encrypted.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $except = [\n"
"    'cookie_name',\n"
"];\n"
msgstr ""

#: docs/10.x/responses.md:block 54 (header)
msgid "Redirects"
msgstr ""

#: docs/10.x/responses.md:block 55 (paragraph)
msgid "Redirect responses are instances of the `Illuminate\\Http\\RedirectResponse` class, and contain the proper headers needed to redirect the user to another URL. There are several ways to generate a `RedirectResponse` instance. The simplest method is to use the global `redirect` helper:"
msgstr ""

#: docs/10.x/responses.md:block 56 (code)
msgid ""
"Route::get('/dashboard', function () {\n"
"    return redirect('home/dashboard');\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 57 (paragraph)
msgid "Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global `back` helper function. Since this feature utilizes the [session](/docs/{{version}}/session), make sure the route calling the `back` function is using the `web` middleware group:"
msgstr ""

#: docs/10.x/responses.md:block 58 (code)
msgid ""
"Route::post('/user/profile', function () {\n"
"    // Validate the request...\n"
"\n"
"    return back()->withInput();\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 60 (header)
msgid "Redirecting To Named Routes"
msgstr ""

#: docs/10.x/responses.md:block 61 (paragraph)
msgid "When you call the `redirect` helper with no parameters, an instance of `Illuminate\\Routing\\Redirector` is returned, allowing you to call any method on the `Redirector` instance. For example, to generate a `RedirectResponse` to a named route, you may use the `route` method:"
msgstr ""

#: docs/10.x/responses.md:block 62 (code)
msgid "return redirect()->route('login');\n"
msgstr ""

#: docs/10.x/responses.md:block 63 (paragraph)
msgid "If your route has parameters, you may pass them as the second argument to the `route` method:"
msgstr ""

#: docs/10.x/responses.md:block 64 (code)
msgid ""
"// For a route with the following URI: /profile/{id}\n"
"\n"
"return redirect()->route('profile', ['id' => 1]);\n"
msgstr ""

#: docs/10.x/responses.md:block 66 (header)
msgid "Populating Parameters Via Eloquent Models"
msgstr ""

#: docs/10.x/responses.md:block 67 (paragraph)
msgid "If you are redirecting to a route with an \"ID\" parameter that is being populated from an Eloquent model, you may pass the model itself. The ID will be extracted automatically:"
msgstr ""

#: docs/10.x/responses.md:block 68 (code)
msgid ""
"// For a route with the following URI: /profile/{id}\n"
"\n"
"return redirect()->route('profile', [$user]);\n"
msgstr ""

#: docs/10.x/responses.md:block 69 (paragraph)
msgid "If you would like to customize the value that is placed in the route parameter, you can specify the column in the route parameter definition (`/profile/{id:slug}`) or you can override the `getRouteKey` method on your Eloquent model:"
msgstr ""

#: docs/10.x/responses.md:block 70 (code)
msgid ""
"/**\n"
" * Get the value of the model's route key.\n"
" */\n"
"public function getRouteKey(): mixed\n"
"{\n"
"    return $this->slug;\n"
"}\n"
msgstr ""

#: docs/10.x/responses.md:block 72 (header)
msgid "Redirecting To Controller Actions"
msgstr ""

#: docs/10.x/responses.md:block 73 (paragraph)
msgid "You may also generate redirects to [controller actions](/docs/{{version}}/controllers). To do so, pass the controller and action name to the `action` method:"
msgstr ""

#: docs/10.x/responses.md:block 74 (code)
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"return redirect()->action([UserController::class, 'index']);\n"
msgstr ""

#: docs/10.x/responses.md:block 75 (paragraph)
msgid "If your controller route requires parameters, you may pass them as the second argument to the `action` method:"
msgstr ""

#: docs/10.x/responses.md:block 76 (code)
msgid ""
"return redirect()->action(\n"
"    [UserController::class, 'profile'], ['id' => 1]\n"
");\n"
msgstr ""

#: docs/10.x/responses.md:block 78 (header)
msgid "Redirecting To External Domains"
msgstr ""

#: docs/10.x/responses.md:block 79 (paragraph)
msgid "Sometimes you may need to redirect to a domain outside of your application. You may do so by calling the `away` method, which creates a `RedirectResponse` without any additional URL encoding, validation, or verification:"
msgstr ""

#: docs/10.x/responses.md:block 80 (code)
msgid "return redirect()->away('https://www.google.com');\n"
msgstr ""

#: docs/10.x/responses.md:block 82 (header)
msgid "Redirecting With Flashed Session Data"
msgstr ""

#: docs/10.x/responses.md:block 83 (paragraph)
msgid "Redirecting to a new URL and [flashing data to the session](/docs/{{version}}/session#flash-data) are usually done at the same time. Typically, this is done after successfully performing an action when you flash a success message to the session. For convenience, you may create a `RedirectResponse` instance and flash data to the session in a single, fluent method chain:"
msgstr ""

#: docs/10.x/responses.md:block 84 (code)
msgid ""
"Route::post('/user/profile', function () {\n"
"    // ...\n"
"\n"
"    return redirect('dashboard')->with('status', 'Profile updated!');\n"
"});\n"
msgstr ""

#: docs/10.x/responses.md:block 85 (paragraph)
msgid "After the user is redirected, you may display the flashed message from the [session](/docs/{{version}}/session). For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr ""

#: docs/10.x/responses.md:block 86 (code)
msgid ""
"@if (session('status'))\n"
"    <div class=\"alert alert-success\">\n"
"        {{ session('status') }}\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/10.x/responses.md:block 88 (header)
msgid "Redirecting With Input"
msgstr ""

#: docs/10.x/responses.md:block 89 (paragraph)
msgid "You may use the `withInput` method provided by the `RedirectResponse` instance to flash the current request's input data to the session before redirecting the user to a new location. This is typically done if the user has encountered a validation error. Once the input has been flashed to the session, you may easily [retrieve it](/docs/{{version}}/requests#retrieving-old-input) during the next request to repopulate the form:"
msgstr ""

#: docs/10.x/responses.md:block 90 (code)
msgid "return back()->withInput();\n"
msgstr ""

#: docs/10.x/responses.md:block 92 (header)
msgid "Other Response Types"
msgstr ""

#: docs/10.x/responses.md:block 93 (paragraph)
msgid "The `response` helper may be used to generate other types of response instances. When the `response` helper is called without arguments, an implementation of the `Illuminate\\Contracts\\Routing\\ResponseFactory` [contract](/docs/{{version}}/contracts) is returned. This contract provides several helpful methods for generating responses."
msgstr ""

#: docs/10.x/responses.md:block 95 (header)
msgid "View Responses"
msgstr ""

#: docs/10.x/responses.md:block 96 (paragraph)
msgid "If you need control over the response's status and headers but also need to return a [view](/docs/{{version}}/views) as the response's content, you should use the `view` method:"
msgstr ""

#: docs/10.x/responses.md:block 97 (code)
msgid ""
"return response()\n"
"            ->view('hello', $data, 200)\n"
"            ->header('Content-Type', $type);\n"
msgstr ""

#: docs/10.x/responses.md:block 98 (paragraph)
msgid "Of course, if you do not need to pass a custom HTTP status code or custom headers, you may use the global `view` helper function."
msgstr ""

#: docs/10.x/responses.md:block 100 (header)
msgid "JSON Responses"
msgstr ""

#: docs/10.x/responses.md:block 101 (paragraph)
msgid "The `json` method will automatically set the `Content-Type` header to `application/json`, as well as convert the given array to JSON using the `json_encode` PHP function:"
msgstr ""

#: docs/10.x/responses.md:block 102 (code)
msgid ""
"return response()->json([\n"
"    'name' => 'Abigail',\n"
"    'state' => 'CA',\n"
"]);\n"
msgstr ""

#: docs/10.x/responses.md:block 103 (paragraph)
msgid "If you would like to create a JSONP response, you may use the `json` method in combination with the `withCallback` method:"
msgstr ""

#: docs/10.x/responses.md:block 104 (code)
msgid ""
"return response()\n"
"            ->json(['name' => 'Abigail', 'state' => 'CA'])\n"
"            ->withCallback($request->input('callback'));\n"
msgstr ""

#: docs/10.x/responses.md:block 106 (header)
msgid "File Downloads"
msgstr ""

#: docs/10.x/responses.md:block 107 (paragraph)
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr ""

#: docs/10.x/responses.md:block 108 (code)
msgid ""
"return response()->download($pathToFile);\n"
"\n"
"return response()->download($pathToFile, $name, $headers);\n"
msgstr ""

#: docs/10.x/responses.md:block 109 (quote)
msgid "**Warning** Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII filename."
msgstr ""

#: docs/10.x/responses.md:block 111 (header)
msgid "Streamed Downloads"
msgstr ""

#: docs/10.x/responses.md:block 112 (paragraph)
msgid "Sometimes you may wish to turn the string response of a given operation into a downloadable response without having to write the contents of the operation to disk. You may use the `streamDownload` method in this scenario. This method accepts a callback, filename, and an optional array of headers as its arguments:"
msgstr ""

#: docs/10.x/responses.md:block 113 (code)
msgid ""
"use App\\Services\\GitHub;\n"
"\n"
"return response()->streamDownload(function () {\n"
"    echo GitHub::api('repo')\n"
"                ->contents()\n"
"                ->readme('laravel', 'laravel')['contents'];\n"
"}, 'laravel-readme.md');\n"
msgstr ""

#: docs/10.x/responses.md:block 115 (header)
msgid "File Responses"
msgstr ""

#: docs/10.x/responses.md:block 116 (paragraph)
msgid "The `file` method may be used to display a file, such as an image or PDF, directly in the user's browser instead of initiating a download. This method accepts the path to the file as its first argument and an array of headers as its second argument:"
msgstr ""

#: docs/10.x/responses.md:block 117 (code)
msgid ""
"return response()->file($pathToFile);\n"
"\n"
"return response()->file($pathToFile, $headers);\n"
msgstr ""

#: docs/10.x/responses.md:block 119 (header)
msgid "Response Macros"
msgstr ""

#: docs/10.x/responses.md:block 120 (paragraph)
msgid "If you would like to define a custom response that you can re-use in a variety of your routes and controllers, you may use the `macro` method on the `Response` facade. Typically, you should call this method from the `boot` method of one of your application's [service providers](/docs/{{version}}/providers), such as the `App\\Providers\\AppServiceProvider` service provider:"
msgstr ""

#: docs/10.x/responses.md:block 121 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Response::macro('caps', function (string $value) {\n"
"            return Response::make(strtoupper($value));\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/responses.md:block 122 (paragraph)
msgid "The `macro` function accepts a name as its first argument and a closure as its second argument. The macro's closure will be executed when calling the macro name from a `ResponseFactory` implementation or the `response` helper:"
msgstr ""

#: docs/10.x/responses.md:block 123 (code)
msgid "return response()->caps('foo');\n"
msgstr ""

#: docs/8.x/responses.md:block 11 (quote)
msgid "{tip} Did you know you can also return [Eloquent collections](/docs/{{version}}/eloquent-collections) from your routes or controllers? They will automatically be converted to JSON. Give it a shot!"
msgstr ""

#: docs/8.x/responses.md:block 70 (code)
msgid ""
"/**\n"
" * Get the value of the model's route key.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function getRouteKey()\n"
"{\n"
"    return $this->slug;\n"
"}\n"
msgstr ""

#: docs/8.x/responses.md:block 109 (quote)
msgid "{note} Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII filename."
msgstr ""

#: docs/8.x/responses.md:block 121 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Response::macro('caps', function ($value) {\n"
"            return Response::make(strtoupper($value));\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""
