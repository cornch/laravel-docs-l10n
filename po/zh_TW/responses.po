msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/responses.pot\n"
"X-Crowdin-File-ID: 139\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-08-06 05:47\n"

#: docs/8.x/responses.md:block 1 (header)
msgid "HTTP Responses"
msgstr "HTTP Response"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Creating Responses](#creating-responses)"
msgstr "[建立 Response](#creating-responses)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Attaching Headers To Responses](#attaching-headers-to-responses)"
msgstr "[在 Response 上附加標頭](#attaching-headers-to-responses)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Attaching Cookies To Responses](#attaching-cookies-to-responses)"
msgstr "[在 Response 上附加 Cookie](#attaching-cookies-to-responses)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Cookies & Encryption](#cookies-and-encryption)"
msgstr "[Cookie 與加密](#cookies-and-encryption)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Redirects](#redirects)"
msgstr "[重新導向](#redirects)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Redirecting To Named Routes](#redirecting-named-routes)"
msgstr "[重新導向之命名 Route](#redirecting-named-routes)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Redirecting To Controller Actions](#redirecting-controller-actions)"
msgstr "[重新導向至 Controller 動作](#redirecting-controller-actions)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Redirecting To External Domains](#redirecting-external-domains)"
msgstr "[重新導向至外部網域](#redirecting-external-domains)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Redirecting With Flashed Session Data](#redirecting-with-flashed-session-data)"
msgstr "[重新導向並帶上快閃存入的 Session 資料](#redirecting-with-flashed-session-data)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Other Response Types](#other-response-types)"
msgstr "[其他 Response 類型](#other-response-types)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[View Responses](#view-responses)"
msgstr "[View Response](#view-responses)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[JSON Responses](#json-responses)"
msgstr "[JSON Response](#json-responses)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[File Downloads](#file-downloads)"
msgstr "[檔案下載](#file-downloads)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[File Responses](#file-responses)"
msgstr "[File Response](#file-responses)"

#: docs/8.x/responses.md:block 2 (unordered list)
msgid "[Response Macros](#response-macros)"
msgstr "[Response Macro](#response-macros)"

#: docs/8.x/responses.md:block 4 (header)
msgid "Creating Responses"
msgstr "建立 Response"

#: docs/8.x/responses.md:block 6 (header)
msgid "Strings & Arrays"
msgstr "字串與陣列"

#: docs/8.x/responses.md:block 7 (paragraph)
msgid "All routes and controllers should return a response to be sent back to the user's browser. Laravel provides several different ways to return responses. The most basic response is returning a string from a route or controller. The framework will automatically convert the string into a full HTTP response:"
msgstr "所有的 Route 與 Controller 都應回傳 Response，以傳送回使用者的瀏覽器。Laravel 中提供了多種不同的方法來回傳 Response。最基礎的 Response 就是從 Route 或 Controller 中回傳字串。Laravel 會自動將字串轉換為完整的 HTTP 回應："

#: docs/8.x/responses.md:block 8 (code)
msgid "Route::get('/', function () {\n"
"    return 'Hello World';\n"
"});\n"
msgstr "Route::get('/', function () {\n"
"    return 'Hello World';\n"
"});\n"

#: docs/8.x/responses.md:block 9 (paragraph)
msgid "In addition to returning strings from your routes and controllers, you may also return arrays. The framework will automatically convert the array into a JSON response:"
msgstr "除了從 Route 與 Controller 中回傳字串外，也可以回傳陣列。Laravel 會自動將陣列轉換為 JSON 回應："

#: docs/8.x/responses.md:block 10 (code)
msgid "Route::get('/', function () {\n"
"    return [1, 2, 3];\n"
"});\n"
msgstr "Route::get('/', function () {\n"
"    return [1, 2, 3];\n"
"});\n"

#: docs/8.x/responses.md:block 11 (quote)
msgid "{tip} Did you know you can also return [Eloquent collections](/docs/{{version}}/eloquent-collections) from your routes or controllers? They will automatically be converted to JSON. Give it a shot!"
msgstr "{tip} 你知道你也可以從 Route 或 Controller 中回傳 [Eloquent Collection](/docs/{{version}}/eloquent-collections) 嗎？回傳的 Eloquent Collection 會自動被轉為 JSON。試試看吧！"

#: docs/8.x/responses.md:block 13 (header)
msgid "Response Objects"
msgstr "Response 物件"

#: docs/8.x/responses.md:block 14 (paragraph)
msgid "Typically, you won't just be returning simple strings or arrays from your route actions. Instead, you will be returning full `Illuminate\\Http\\Response` instances or [views](/docs/{{version}}/views)."
msgstr "通常來說，我們不會只想在 Route 動作裡回傳簡單的字串或陣列。除了字串 / 陣列外，我們還可以回傳完整的 `Illuminate\\Http\\Response` 實體或 [View](/docs/{{version}}/views)。"

#: docs/8.x/responses.md:block 15 (paragraph)
msgid "Returning a full `Response` instance allows you to customize the response's HTTP status code and headers. A `Response` instance inherits from the `Symfony\\Component\\HttpFoundation\\Response` class, which provides a variety of methods for building HTTP responses:"
msgstr "若回傳完整的 `Response`，就可以自訂回應的 HTTP 狀態碼與標頭。`Response` 實體繼承自 `Symfony\\Component\\HttpFoundation\\Response` 類別，該類別提供各種不同的方法來建立 HTTP Response："

#: docs/8.x/responses.md:block 16 (code)
msgid "Route::get('/home', function () {\n"
"    return response('Hello World', 200)\n"
"                  ->header('Content-Type', 'text/plain');\n"
"});\n"
msgstr "Route::get('/home', function () {\n"
"    return response('Hello World', 200)\n"
"                  ->header('Content-Type', 'text/plain');\n"
"});\n"

#: docs/8.x/responses.md:block 18 (header)
msgid "Eloquent Models & Collections"
msgstr "Eloquent Model 與 Collection"

#: docs/8.x/responses.md:block 19 (paragraph)
msgid "You may also return [Eloquent ORM](/docs/{{version}}/eloquent) models and collections directly from your routes and controllers. When you do, Laravel will automatically convert the models and collections to JSON responses while respecting the model's [hidden attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json):"
msgstr "我們也可以從 Route 或 Controller 中回傳 [Eloquent ORM](/docs/{{version}}/eloquent) Model 或 Collection。回傳 Eloquent Model 或 Collection 時，Laravel 會自動將其轉換為 JSON 回應。當 Model 上有[隱藏屬性](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json)時，這些屬性也會被隱藏："

#: docs/8.x/responses.md:block 20 (code)
msgid "use App\\Models\\User;\n\n"
"Route::get('/user/{user}', function (User $user) {\n"
"    return $user;\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Route::get('/user/{user}', function (User $user) {\n"
"    return $user;\n"
"});\n"

#: docs/8.x/responses.md:block 22 (header)
msgid "Attaching Headers To Responses"
msgstr "將標頭附加到 Response"

#: docs/8.x/responses.md:block 23 (paragraph)
msgid "Keep in mind that most response methods are chainable, allowing for the fluent construction of response instances. For example, you may use the `header` method to add a series of headers to the response before sending it back to the user:"
msgstr "請記得，大多數的 Response 方法都是可串連的 (Chainable)，讓我們能流暢地建構 Response 實體。舉例來說，我們可以在把 Respnse 傳回給使用者前使用 `header` 方法來加上一系列的標頭："

#: docs/8.x/responses.md:block 24 (code)
msgid "return response($content)\n"
"            ->header('Content-Type', $type)\n"
"            ->header('X-Header-One', 'Header Value')\n"
"            ->header('X-Header-Two', 'Header Value');\n"
msgstr "return response($content)\n"
"            ->header('Content-Type', $type)\n"
"            ->header('X-Header-One', 'Header Value')\n"
"            ->header('X-Header-Two', 'Header Value');\n"

#: docs/8.x/responses.md:block 25 (paragraph)
msgid "Or, you may use the `withHeaders` method to specify an array of headers to be added to the response:"
msgstr "或者，我們也可以使用 `withHeaders` 方法來指定一組包含標頭的陣列，來將該陣列加到 Response 上："

#: docs/8.x/responses.md:block 26 (code)
msgid "return response($content)\n"
"            ->withHeaders([\n"
"                'Content-Type' => $type,\n"
"                'X-Header-One' => 'Header Value',\n"
"                'X-Header-Two' => 'Header Value',\n"
"            ]);\n"
msgstr "return response($content)\n"
"            ->withHeaders([\n"
"                'Content-Type' => $type,\n"
"                'X-Header-One' => 'Header Value',\n"
"                'X-Header-Two' => 'Header Value',\n"
"            ]);\n"

#: docs/8.x/responses.md:block 28 (header)
msgid "Cache Control Middleware"
msgstr "快取 Controller Middleware"

#: docs/8.x/responses.md:block 29 (paragraph)
msgid "Laravel includes a `cache.headers` middleware, which may be used to quickly set the `Cache-Control` header for a group of routes. Directives should be provided using the \"snake case\" equivalent of the corresponding cache-control directive and should be separated by a semicolon. If `etag` is specified in the list of directives, an MD5 hash of the response content will automatically be set as the ETag identifier:"
msgstr "Laravel 中提供了一個 `cache.headers` Middleware，可以使用該 Middleware 來快速將 `Cache-Control` 標頭設定到一組 Route 上。必須提供與 Cache-Control 指示詞 (Directive) 對應的「蛇形命名法 (snake_case)」指示詞，並使用分號區隔。若指示詞列表中有 `etag`，則會自動以 Response 內容的 MD5 雜湊 (Hash) 來設定 ETag 識別元："

#: docs/8.x/responses.md:block 30 (code)
msgid "Route::middleware('cache.headers:public;max_age=2628000;etag')->group(function () {\n"
"    Route::get('/privacy', function () {\n"
"        // ...\n"
"    });\n\n"
"    Route::get('/terms', function () {\n"
"        // ...\n"
"    });\n"
"});\n"
msgstr "Route::middleware('cache.headers:public;max_age=2628000;etag')->group(function () {\n"
"    Route::get('/privacy', function () {\n"
"        // ...\n"
"    });\n\n"
"    Route::get('/terms', function () {\n"
"        // ...\n"
"    });\n"
"});\n"

#: docs/8.x/responses.md:block 32 (header)
msgid "Attaching Cookies To Responses"
msgstr "附加 Cookie 到 Response"

#: docs/8.x/responses.md:block 33 (paragraph)
msgid "You may attach a cookie to an outgoing `Illuminate\\Http\\Response` instance using the `cookie` method. You should pass the name, value, and the number of minutes the cookie should be considered valid to this method:"
msgstr "可以使用 `cookie` 方法來將 Cookie 附加到外連的 `Illuminate\\Http\\Response` 實體。我們可以傳入 Cookie 的名稱、Cookie 值、以及單位為分鐘的有效期限給該方法："

#: docs/8.x/responses.md:block 34 (code)
msgid "return response('Hello World')->cookie(\n"
"    'name', 'value', $minutes\n"
");\n"
msgstr "return response('Hello World')->cookie(\n"
"    'name', 'value', $minutes\n"
");\n"

#: docs/8.x/responses.md:block 35 (paragraph)
msgid "The `cookie` method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP's native [setcookie](https://secure.php.net/manual/en/function.setcookie.php) method:"
msgstr "`cookie` 方法還接受一些更多的引數，但這些引數很少用。一般來說，這些引數的功能跟 PHP 原生的 [setcookie](https://secure.php.net/manual/en/function.setcookie.php) 方法一樣："

#: docs/8.x/responses.md:block 36 (code)
msgid "return response('Hello World')->cookie(\n"
"    'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n"
");\n"
msgstr "return response('Hello World')->cookie(\n"
"    'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n"
");\n"

#: docs/8.x/responses.md:block 37 (paragraph)
msgid "If you would like to ensure that a cookie is sent with the outgoing response but you do not yet have an instance of that response, you can use the `Cookie` facade to \"queue\" cookies for attachment to the response when it is sent. The `queue` method accepts the arguments needed to create a cookie instance. These cookies will be attached to the outgoing response before it is sent to the browser:"
msgstr "若想要與連出的 Response 一起送出 Cookie，但目前還未有 Response 實體的話，可使用 `Cookie` Facade 來將 Cookie 「放到佇列」，以在 Response 送出的時候將其附加上去。`queue` (佇列) 方法接受要用來建立 Cookie 實體的引數。這些佇列中的 Cookie 會在連出 Response 被送到瀏覽器前被附加上去："

#: docs/8.x/responses.md:block 38 (code)
msgid "use Illuminate\\Support\\Facades\\Cookie;\n\n"
"Cookie::queue('name', 'value', $minutes);\n"
msgstr "use Illuminate\\Support\\Facades\\Cookie;\n\n"
"Cookie::queue('name', 'value', $minutes);\n"

#: docs/8.x/responses.md:block 40 (header)
msgid "Generating Cookie Instances"
msgstr "產生 Cookie 實體"

#: docs/8.x/responses.md:block 41 (paragraph)
msgid "If you would like to generate a `Symfony\\Component\\HttpFoundation\\Cookie` instance that can be attached to a response instance at a later time, you may use the global `cookie` helper. This cookie will not be sent back to the client unless it is attached to a response instance:"
msgstr "若想產生稍後可附加到 Response 實體上的 `Symfony\\Component\\HttpFoundation\\Cookie` 實體，則可使用全域的 `cookie` 輔助函式。必須將產生的 Cookie 附加到 Response 實體，這些 Cookie 才會被送回用戶端："

#: docs/8.x/responses.md:block 42 (code)
msgid "$cookie = cookie('name', 'value', $minutes);\n\n"
"return response('Hello World')->cookie($cookie);\n"
msgstr "$cookie = cookie('name', 'value', $minutes);\n\n"
"return response('Hello World')->cookie($cookie);\n"

#: docs/8.x/responses.md:block 44 (header)
msgid "Expiring Cookies Early"
msgstr "提早讓 Cookie 過期"

#: docs/8.x/responses.md:block 45 (paragraph)
msgid "You may remove a cookie by expiring it via the `withoutCookie` method of an outgoing response:"
msgstr "可以在連外 Response 上使用 `withoutCookie` 方法來讓 Cookie 無效，以將 Cookie 移除："

#: docs/8.x/responses.md:block 46 (code)
msgid "return response('Hello World')->withoutCookie('name');\n"
msgstr "return response('Hello World')->withoutCookie('name');\n"

#: docs/8.x/responses.md:block 47 (paragraph)
msgid "If you do not yet have an instance of the outgoing response, you may use the `Cookie` facade's `expire` method to expire a cookie:"
msgstr "若還未有連外 Response 實體，則可以使用 `Cookie` Facade 的 `expire` 方法來讓 Cookie 過期："

#: docs/8.x/responses.md:block 48 (code)
msgid "Cookie::expire('name');\n"
msgstr "Cookie::expire('name');\n"

#: docs/8.x/responses.md:block 50 (header)
msgid "Cookies & Encryption"
msgstr "Cookie 與加密"

#: docs/8.x/responses.md:block 51 (paragraph)
msgid "By default, all cookies generated by Laravel are encrypted and signed so that they can't be modified or read by the client. If you would like to disable encryption for a subset of cookies generated by your application, you may use the `$except` property of the `App\\Http\\Middleware\\EncryptCookies` middleware, which is located in the `app/Http/Middleware` directory:"
msgstr "預設情況下，Laravel 產生的所有 Cookie 都經過加密並簽名，因此這些 Cookie 在用戶端上都無法被修改或讀取。若想讓你的程式中一部分的 Cookie 不啟用加密，則可使用 `App\\Http\\Middleware\\EncryptCookies` Middleware 的 `$except` 屬性，這個 Middleware 位在 `app/Http/Middleware` 目錄："

#: docs/8.x/responses.md:block 52 (code)
msgid "/**\n"
" * The names of the cookies that should not be encrypted.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $except = [\n"
"    'cookie_name',\n"
"];\n"
msgstr "/**\n"
" * The names of the cookies that should not be encrypted.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $except = [\n"
"    'cookie_name',\n"
"];\n"

#: docs/8.x/responses.md:block 54 (header)
msgid "Redirects"
msgstr "重新導向"

#: docs/8.x/responses.md:block 55 (paragraph)
msgid "Redirect responses are instances of the `Illuminate\\Http\\RedirectResponse` class, and contain the proper headers needed to redirect the user to another URL. There are several ways to generate a `RedirectResponse` instance. The simplest method is to use the global `redirect` helper:"
msgstr "Redirect Response (重新導向回應) 是 `Illuminate\\Http\\RedirectResponse` 類別的實體，Redirect Response 中包含了用來將使用者重新導向到另一個網址所需的一些標頭 (Header)。要產生 `RedirectResponse` 實體有幾個方法。最簡單的方法是使用全域的 `redirect` 輔助函式："

#: docs/8.x/responses.md:block 56 (code)
msgid "Route::get('/dashboard', function () {\n"
"    return redirect('home/dashboard');\n"
"});\n"
msgstr "Route::get('/dashboard', function () {\n"
"    return redirect('home/dashboard');\n"
"});\n"

#: docs/8.x/responses.md:block 57 (paragraph)
msgid "Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global `back` helper function. Since this feature utilizes the [session](/docs/{{version}}/session), make sure the route calling the `back` function is using the `web` middleware group:"
msgstr "有時候（如：使用者送出了無效的表單時），我們可能會想把使用者重新導向到使用者瀏覽的前一個位置。為此，我們可以使用全域的 `back` 輔助函式。由於這個功能使用了 [Session](/docs/{{version}}/session)，因此請確保呼叫 `back` 函式的 Route 有使用 `web` Middleware 群組："

#: docs/8.x/responses.md:block 58 (code)
msgid "Route::post('/user/profile', function () {\n"
"    // Validate the request...\n\n"
"    return back()->withInput();\n"
"});\n"
msgstr "Route::post('/user/profile', function () {\n"
"    // 驗證 Request...\n\n"
"    return back()->withInput();\n"
"});\n"

#: docs/8.x/responses.md:block 60 (header)
msgid "Redirecting To Named Routes"
msgstr "重新導向到命名 Route"

#: docs/8.x/responses.md:block 61 (paragraph)
msgid "When you call the `redirect` helper with no parameters, an instance of `Illuminate\\Routing\\Redirector` is returned, allowing you to call any method on the `Redirector` instance. For example, to generate a `RedirectResponse` to a named route, you may use the `route` method:"
msgstr "呼叫 `redirect` 輔助函式時若沒有帶上任何參數，則會回傳 `Illuminate\\Routing\\Redirector` 實體，這樣我們就可以呼叫 `Redirect` 實體上的所有方法。舉例來說，若要為某個命名 Route 產生 `RedirectResponse`，可以使用 `route` 方法："

#: docs/8.x/responses.md:block 62 (code)
msgid "return redirect()->route('login');\n"
msgstr "return redirect()->route('login');\n"

#: docs/8.x/responses.md:block 63 (paragraph)
msgid "If your route has parameters, you may pass them as the second argument to the `route` method:"
msgstr "若 Route 有參數，則可將這些 Route 參數作為第二個引數傳給 `route` 方法："

#: docs/8.x/responses.md:block 64 (code)
msgid "// For a route with the following URI: /profile/{id}\n\n"
"return redirect()->route('profile', ['id' => 1]);\n"
msgstr "// 給有下列 URI 的 Route：/profile/{id}\n\n"
"return redirect()->route('profile', ['id' => 1]);\n"

#: docs/8.x/responses.md:block 66 (header)
msgid "Populating Parameters Via Eloquent Models"
msgstr "使用 Eloquent Model 來填充參數"

#: docs/8.x/responses.md:block 67 (paragraph)
msgid "If you are redirecting to a route with an \"ID\" parameter that is being populated from an Eloquent model, you may pass the model itself. The ID will be extracted automatically:"
msgstr "若要重新導向的 Route 中有個可從 Eloquent Model 中填充的「ID」參數，則可傳入 Model。會自動取出 ID："

#: docs/8.x/responses.md:block 68 (code)
msgid "// For a route with the following URI: /profile/{id}\n\n"
"return redirect()->route('profile', [$user]);\n"
msgstr "// 給有下列 URI 的 Route：/profile/{id}\n\n"
"return redirect()->route('profile', [$user]);\n"

#: docs/8.x/responses.md:block 69 (paragraph)
msgid "If you would like to customize the value that is placed in the route parameter, you can specify the column in the route parameter definition (`/profile/{id:slug}`) or you can override the `getRouteKey` method on your Eloquent model:"
msgstr "若想自訂放在 Route 參數中的值，可在 Route 的參數定義中指定欄位 (`/profile/{id:slug}`)，或是在 Eloquent Model 中複寫 `getRouteKey` 方法："

#: docs/8.x/responses.md:block 70 (code)
msgid "/**\n"
" * Get the value of the model's route key.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function getRouteKey()\n"
"{\n"
"    return $this->slug;\n"
"}\n"
msgstr "/**\n"
" * Get the value of the model's route key.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function getRouteKey()\n"
"{\n"
"    return $this->slug;\n"
"}\n"

#: docs/8.x/responses.md:block 72 (header)
msgid "Redirecting To Controller Actions"
msgstr "重新導向到 Controller 動作"

#: docs/8.x/responses.md:block 73 (paragraph)
msgid "You may also generate redirects to [controller actions](/docs/{{version}}/controllers). To do so, pass the controller and action name to the `action` method:"
msgstr "也可以產生一個前往 [Controller 動作](/docs/{{version}}/controllers)的重新導向。為此，請將 Controller 與動作名稱傳入 `action` 方法："

#: docs/8.x/responses.md:block 74 (code)
msgid "use App\\Http\\Controllers\\UserController;\n\n"
"return redirect()->action([UserController::class, 'index']);\n"
msgstr "use App\\Http\\Controllers\\UserController;\n\n"
"return redirect()->action([UserController::class, 'index']);\n"

#: docs/8.x/responses.md:block 75 (paragraph)
msgid "If your controller route requires parameters, you may pass them as the second argument to the `action` method:"
msgstr "若這個 Controller 的 Route 有要求參數，則可將這些參數作為第二個引數傳給 `action` 方法："

#: docs/8.x/responses.md:block 76 (code)
msgid "return redirect()->action(\n"
"    [UserController::class, 'profile'], ['id' => 1]\n"
");\n"
msgstr "return redirect()->action(\n"
"    [UserController::class, 'profile'], ['id' => 1]\n"
");\n"

#: docs/8.x/responses.md:block 78 (header)
msgid "Redirecting To External Domains"
msgstr "重新導向到外部網域"

#: docs/8.x/responses.md:block 79 (paragraph)
msgid "Sometimes you may need to redirect to a domain outside of your application. You may do so by calling the `away` method, which creates a `RedirectResponse` without any additional URL encoding, validation, or verification:"
msgstr "有時候，我們會需要重新導向到程式外部的網域。為此，可以呼叫 `away` 方法。該方法會建立一個 `RedirectResponse`，並且不會做額外的 URL 編碼或驗證："

#: docs/8.x/responses.md:block 80 (code)
msgid "return redirect()->away('https://www.google.com');\n"
msgstr "return redirect()->away('https://www.google.com');\n"

#: docs/8.x/responses.md:block 82 (header)
msgid "Redirecting With Flashed Session Data"
msgstr "重新導向時帶上快閃存入的 Session 資料"

#: docs/8.x/responses.md:block 83 (paragraph)
msgid "Redirecting to a new URL and [flashing data to the session](/docs/{{version}}/session#flash-data) are usually done at the same time. Typically, this is done after successfully performing an action when you flash a success message to the session. For convenience, you may create a `RedirectResponse` instance and flash data to the session in a single, fluent method chain:"
msgstr "通常，我們在重新導向到新網址的時候，也會[將資料快閃存入 Session]。一般來說，這種情況通常是當某個動作順利進行，而我們將成功訊息寫入 Session 時。為了方便起見，我們可以建立一個 `RedirectResponse` 實體，並以一行流暢的方法串連呼叫來將資料快閃存入 Session："

#: docs/8.x/responses.md:block 84 (code)
msgid "Route::post('/user/profile', function () {\n"
"    // ...\n\n"
"    return redirect('dashboard')->with('status', 'Profile updated!');\n"
"});\n"
msgstr "Route::post('/user/profile', function () {\n"
"    // ...\n\n"
"    return redirect('dashboard')->with('status', 'Profile updated!');\n"
"});\n"

#: docs/8.x/responses.md:block 85 (paragraph)
msgid "After the user is redirected, you may display the flashed message from the [session](/docs/{{version}}/session). For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr "使用者被重新導向後，我們就可以從 [Session](/docs/{{version}}/session) 中顯示出剛才快閃存入的資料。舉例來說，我們可以使用 [Blade 語法](/docs/{{version}}/blade)："

#: docs/8.x/responses.md:block 86 (code)
msgid "@if (session('status'))\n"
"    <div class=\"alert alert-success\">\n"
"        {{ session('status') }}\n"
"    </div>\n"
"@endif\n"
msgstr "@if (session('status'))\n"
"    <div class=\"alert alert-success\">\n"
"        {{ session('status') }}\n"
"    </div>\n"
"@endif\n"

#: docs/8.x/responses.md:block 88 (header)
msgid "Redirecting With Input"
msgstr "重新導向時帶上輸入"

#: docs/8.x/responses.md:block 89 (paragraph)
msgid "You may use the `withInput` method provided by the `RedirectResponse` instance to flash the current request's input data to the session before redirecting the user to a new location. This is typically done if the user has encountered a validation error. Once the input has been flashed to the session, you may easily [retrieve it](/docs/{{version}}/requests#retrieving-old-input) during the next request to repopulate the form:"
msgstr "可以使用 `RedirectResponse` 實體提供的 `withInput` 方法來在將使用者重新導向到新位置前先將目前 Request 的輸入資料快閃存入 Session 中。通常來說我們會在表單驗證錯誤時這麼做。將輸入資料快閃存入 Session 後，我們就可以在下一個 Request 中輕鬆地[取得這些資料](/docs/{{version}}/requests#retrieving-old-input)並將其填回表單中："

#: docs/8.x/responses.md:block 90 (code)
msgid "return back()->withInput();\n"
msgstr "return back()->withInput();\n"

#: docs/8.x/responses.md:block 92 (header)
msgid "Other Response Types"
msgstr "其他 Response 類型"

#: docs/8.x/responses.md:block 93 (paragraph)
msgid "The `response` helper may be used to generate other types of response instances. When the `response` helper is called without arguments, an implementation of the `Illuminate\\Contracts\\Routing\\ResponseFactory` [contract](/docs/{{version}}/contracts) is returned. This contract provides several helpful methods for generating responses."
msgstr "`response` 輔助函式還能產生一些其他類型的 Response 實體。呼叫 `response` 輔助函式時若未帶入任何引數，則會回傳 `Illuminate\\Contracts\\Routing\\ResponseFactory` [Contract](/docs/{{version}}/contracts) 的實作。這個 Contract 提供了數種用來建立 Response 的實用方法："

#: docs/8.x/responses.md:block 95 (header)
msgid "View Responses"
msgstr "View Response"

#: docs/8.x/responses.md:block 96 (paragraph)
msgid "If you need control over the response's status and headers but also need to return a [view](/docs/{{version}}/views) as the response's content, you should use the `view` method:"
msgstr "若有需要控制 Response 的狀態與標頭，但 Response 的內容又需要是 [View] 時，則可使用 `view` 方法："

#: docs/8.x/responses.md:block 97 (code)
msgid "return response()\n"
"            ->view('hello', $data, 200)\n"
"            ->header('Content-Type', $type);\n"
msgstr "return response()\n"
"            ->view('hello', $data, 200)\n"
"            ->header('Content-Type', $type);\n"

#: docs/8.x/responses.md:block 98 (paragraph)
msgid "Of course, if you do not need to pass a custom HTTP status code or custom headers, you may use the global `view` helper function."
msgstr "當然，若不需要傳入自訂 HTTP 狀態或自訂標頭的話，應該使用全域的 `view` 輔助函式。"

#: docs/8.x/responses.md:block 100 (header)
msgid "JSON Responses"
msgstr "JSON Response"

#: docs/8.x/responses.md:block 101 (paragraph)
msgid "The `json` method will automatically set the `Content-Type` header to `application/json`, as well as convert the given array to JSON using the `json_encode` PHP function:"
msgstr "`json` 方法會自動將 `Content-Type` 標頭設為 `application/json`，並使用 `json_encode` PHP 函式來將任何給定的陣列轉換為 JSON："

#: docs/8.x/responses.md:block 102 (code)
msgid "return response()->json([\n"
"    'name' => 'Abigail',\n"
"    'state' => 'CA',\n"
"]);\n"
msgstr "return response()->json([\n"
"    'name' => 'Abigail',\n"
"    'state' => 'CA',\n"
"]);\n"

#: docs/8.x/responses.md:block 103 (paragraph)
msgid "If you would like to create a JSONP response, you may use the `json` method in combination with the `withCallback` method:"
msgstr "若想建立 JSONP Response，則可在使用 `json` 方法時搭配使用 `withCallback` 方法："

#: docs/8.x/responses.md:block 104 (code)
msgid "return response()\n"
"            ->json(['name' => 'Abigail', 'state' => 'CA'])\n"
"            ->withCallback($request->input('callback'));\n"
msgstr "return response()\n"
"            ->json(['name' => 'Abigail', 'state' => 'CA'])\n"
"            ->withCallback($request->input('callback'));\n"

#: docs/8.x/responses.md:block 106 (header)
msgid "File Downloads"
msgstr "檔案下載"

#: docs/8.x/responses.md:block 107 (paragraph)
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr "可使用 `download` 方法來產生一個強制使用者在給定路徑上下載檔案的 Response。`download` 方法接受檔案名稱作為其第二個引數，該引數用來判斷使用者看到的檔案名稱。最後，我們可以傳入一組包含 HTTP 標頭的陣列作為該方法的第三個引數："

#: docs/8.x/responses.md:block 108 (code)
msgid "return response()->download($pathToFile);\n\n"
"return response()->download($pathToFile, $name, $headers);\n"
msgstr "return response()->download($pathToFile);\n\n"
"return response()->download($pathToFile, $name, $headers);\n"

#: docs/8.x/responses.md:block 109 (quote)
msgid "{note} Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII filename."
msgstr "{note} Symfony HttpFoundation —— 負責處理檔案下載的類別 —— 要求下載的檔案名稱必須為 ASCII。"

#: docs/8.x/responses.md:block 111 (header)
msgid "Streamed Downloads"
msgstr "串流下載"

#: docs/8.x/responses.md:block 112 (paragraph)
msgid "Sometimes you may wish to turn the string response of a given operation into a downloadable response without having to write the contents of the operation to disk. You may use the `streamDownload` method in this scenario. This method accepts a callback, filename, and an optional array of headers as its arguments:"
msgstr "有時候，我們會需要在不寫入磁碟的情況下將某個操作的字串結果轉變成可下載的 Response。這時可以使用 `streamDownload` 方法。這個方法接受一個回呼、檔案名稱、以及一個可選的標頭陣列作為其引數："

#: docs/8.x/responses.md:block 113 (code)
msgid "use App\\Services\\GitHub;\n\n"
"return response()->streamDownload(function () {\n"
"    echo GitHub::api('repo')\n"
"                ->contents()\n"
"                ->readme('laravel', 'laravel')['contents'];\n"
"}, 'laravel-readme.md');\n"
msgstr "use App\\Services\\GitHub;\n\n"
"return response()->streamDownload(function () {\n"
"    echo GitHub::api('repo')\n"
"                ->contents()\n"
"                ->readme('laravel', 'laravel')['contents'];\n"
"}, 'laravel-readme.md');\n"

#: docs/8.x/responses.md:block 115 (header)
msgid "File Responses"
msgstr "File Response"

#: docs/8.x/responses.md:block 116 (paragraph)
msgid "The `file` method may be used to display a file, such as an image or PDF, directly in the user's browser instead of initiating a download. This method accepts the path to the file as its first argument and an array of headers as its second argument:"
msgstr "比起直接讓使用者下載檔案，我們可以使用 `file` 方法來直接將檔案（如圖片或 PDF）顯示在使用者的瀏覽器上。這個方法接受檔案路徑作為其第一個引數，以及一個包含標頭的陣列作為其第二個引數："

#: docs/8.x/responses.md:block 117 (code)
msgid "return response()->file($pathToFile);\n\n"
"return response()->file($pathToFile, $headers);\n"
msgstr "return response()->file($pathToFile);\n\n"
"return response()->file($pathToFile, $headers);\n"

#: docs/8.x/responses.md:block 119 (header)
msgid "Response Macros"
msgstr "Response Macro"

#: docs/8.x/responses.md:block 120 (paragraph)
msgid "If you would like to define a custom response that you can re-use in a variety of your routes and controllers, you may use the `macro` method on the `Response` facade. Typically, you should call this method from the `boot` method of one of your application's [service providers](/docs/{{version}}/providers), such as the `App\\Providers\\AppServiceProvider` service provider:"
msgstr "若想定義可在各個 Route 或 Controller 內重複使用的自訂 Response 方法，可使用 `Response` Facade 上的 `macro` 方法。通常來說，該方法應在某個 [Service Provider](/docs/{{version}}/providers) 的 `boot` 方法內呼叫，如 `App\\Providers\\AppServiceProvider` Service Provider："

#: docs/8.x/responses.md:block 121 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Response::macro('caps', function ($value) {\n"
"            return Response::make(strtoupper($value));\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Response::macro('caps', function ($value) {\n"
"            return Response::make(strtoupper($value));\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/responses.md:block 122 (paragraph)
msgid "The `macro` function accepts a name as its first argument and a closure as its second argument. The macro's closure will be executed when calling the macro name from a `ResponseFactory` implementation or the `response` helper:"
msgstr "`macro` 方法接受一個名稱作為其第一個引數，以及閉包作為其第二個引數。當在 `ResponseFactory` 的實作或 `response` 輔助函式上呼叫給定的 Macro 名稱時，會執行該 Macro 的閉包："

#: docs/8.x/responses.md:block 123 (code)
msgid "return response()->caps('foo');\n"
msgstr "return response()->caps('foo');\n"

#: docs/9.x/responses.md:block 11 (quote)
msgid "**Note** Did you know you can also return [Eloquent collections](/docs/{{version}}/eloquent-collections) from your routes or controllers? They will automatically be converted to JSON. Give it a shot!"
msgstr ""

#: docs/9.x/responses.md:block 109 (quote)
msgid "**Warning** Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII filename."
msgstr ""

