msgid ""
msgstr ""

#: ./docs/10.x/strings.md:1
#: ./docs/10.x/strings.md:28
#: ./docs/10.x/strings.md:224
#: ./docs/11.x/strings.md:1
#: ./docs/11.x/strings.md:28
#: ./docs/11.x/strings.md:237
#: ./docs/master/strings.md:1
#: ./docs/master/strings.md:28
#: ./docs/master/strings.md:224
msgid "Strings"
msgstr ""

#: ./docs/10.x/strings.md:3
#: ./docs/11.x/strings.md:3
#: ./docs/master/strings.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/strings.md:4
#: ./docs/11.x/strings.md:4
#: ./docs/master/strings.md:4
msgid "[Available Methods](#available-methods)"
msgstr ""

#: ./docs/10.x/strings.md:6
#: ./docs/11.x/strings.md:6
#: ./docs/master/strings.md:6
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:7
#: ./docs/11.x/strings.md:7
#: ./docs/master/strings.md:7
msgid "Introduction"
msgstr ""

#: ./docs/10.x/strings.md:9
#: ./docs/11.x/strings.md:9
#: ./docs/master/strings.md:9
msgid "Laravel includes a variety of functions for manipulating string values. Many of these functions are used by the framework itself; however, you are free to use them in your own applications if you find them convenient."
msgstr ""

#: ./docs/10.x/strings.md:11
#: ./docs/11.x/strings.md:11
#: ./docs/master/strings.md:11
#~ msgctxt "P"
#~ msgid "<a name=\"available-methods\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:12
#: ./docs/11.x/strings.md:12
#: ./docs/master/strings.md:12
msgid "Available Methods"
msgstr ""

#: ./docs/10.x/strings.md:27
#: ./docs/11.x/strings.md:27
#: ./docs/master/strings.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"strings-method-list\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:32
#: ./docs/master/strings.md:32
msgid ""
"[__](#method-__)\n"
"[class_basename](#method-class-basename)\n"
"[e](#method-e)\n"
"[preg_replace_array](#method-preg-replace-array)\n"
"[Str::after](#method-str-after)\n"
"[Str::afterLast](#method-str-after-last)\n"
"[Str::apa](#method-str-apa)\n"
"[Str::ascii](#method-str-ascii)\n"
"[Str::before](#method-str-before)\n"
"[Str::beforeLast](#method-str-before-last)\n"
"[Str::between](#method-str-between)\n"
"[Str::betweenFirst](#method-str-between-first)\n"
"[Str::camel](#method-camel-case)\n"
"[Str::charAt](#method-char-at)\n"
"[Str::contains](#method-str-contains)\n"
"[Str::containsAll](#method-str-contains-all)\n"
"[Str::endsWith](#method-ends-with)\n"
"[Str::excerpt](#method-excerpt)\n"
"[Str::finish](#method-str-finish)\n"
"[Str::headline](#method-str-headline)\n"
"[Str::inlineMarkdown](#method-str-inline-markdown)\n"
"[Str::is](#method-str-is)\n"
"[Str::isAscii](#method-str-is-ascii)\n"
"[Str::isJson](#method-str-is-json)\n"
"[Str::isUlid](#method-str-is-ulid)\n"
"[Str::isUrl](#method-str-is-url)\n"
"[Str::isUuid](#method-str-is-uuid)\n"
"[Str::kebab](#method-kebab-case)\n"
"[Str::lcfirst](#method-str-lcfirst)\n"
"[Str::length](#method-str-length)\n"
"[Str::limit](#method-str-limit)\n"
"[Str::lower](#method-str-lower)\n"
"[Str::markdown](#method-str-markdown)\n"
"[Str::mask](#method-str-mask)\n"
"[Str::orderedUuid](#method-str-ordered-uuid)\n"
"[Str::padBoth](#method-str-padboth)\n"
"[Str::padLeft](#method-str-padleft)\n"
"[Str::padRight](#method-str-padright)\n"
"[Str::password](#method-str-password)\n"
"[Str::plural](#method-str-plural)\n"
"[Str::pluralStudly](#method-str-plural-studly)\n"
"[Str::position](#method-str-position)\n"
"[Str::random](#method-str-random)\n"
"[Str::remove](#method-str-remove)\n"
"[Str::repeat](#method-str-repeat)\n"
"[Str::replace](#method-str-replace)\n"
"[Str::replaceArray](#method-str-replace-array)\n"
"[Str::replaceFirst](#method-str-replace-first)\n"
"[Str::replaceLast](#method-str-replace-last)\n"
"[Str::replaceMatches](#method-str-replace-matches)\n"
"[Str::replaceStart](#method-str-replace-start)\n"
"[Str::replaceEnd](#method-str-replace-end)\n"
"[Str::reverse](#method-str-reverse)\n"
"[Str::singular](#method-str-singular)\n"
"[Str::slug](#method-str-slug)\n"
"[Str::snake](#method-snake-case)\n"
"[Str::squish](#method-str-squish)\n"
"[Str::start](#method-str-start)\n"
"[Str::startsWith](#method-starts-with)\n"
"[Str::studly](#method-studly-case)\n"
"[Str::substr](#method-str-substr)\n"
"[Str::substrCount](#method-str-substrcount)\n"
"[Str::substrReplace](#method-str-substrreplace)\n"
"[Str::swap](#method-str-swap)\n"
"[Str::take](#method-take)\n"
"[Str::title](#method-title-case)\n"
"[Str::toBase64](#method-str-to-base64)\n"
"[Str::toHtmlString](#method-str-to-html-string)\n"
"[Str::ucfirst](#method-str-ucfirst)\n"
"[Str::ucsplit](#method-str-ucsplit)\n"
"[Str::upper](#method-str-upper)\n"
"[Str::ulid](#method-str-ulid)\n"
"[Str::unwrap](#method-str-unwrap)\n"
"[Str::uuid](#method-str-uuid)\n"
"[Str::wordCount](#method-str-word-count)\n"
"[Str::wordWrap](#method-str-word-wrap)\n"
"[Str::words](#method-str-words)\n"
"[Str::wrap](#method-str-wrap)\n"
"[str](#method-str)\n"
"[trans](#method-trans)\n"
"[trans_choice](#method-trans-choice)"
msgstr ""

#: ./docs/11.x/strings.md:32
msgid ""
"[__](#method-__)\n"
"[class_basename](#method-class-basename)\n"
"[e](#method-e)\n"
"[preg_replace_array](#method-preg-replace-array)\n"
"[Str::after](#method-str-after)\n"
"[Str::afterLast](#method-str-after-last)\n"
"[Str::apa](#method-str-apa)\n"
"[Str::ascii](#method-str-ascii)\n"
"[Str::before](#method-str-before)\n"
"[Str::beforeLast](#method-str-before-last)\n"
"[Str::between](#method-str-between)\n"
"[Str::betweenFirst](#method-str-between-first)\n"
"[Str::camel](#method-camel-case)\n"
"[Str::charAt](#method-char-at)\n"
"[Str::chopStart](#method-str-chop-start)\n"
"[Str::chopEnd](#method-str-chop-end)\n"
"[Str::contains](#method-str-contains)\n"
"[Str::containsAll](#method-str-contains-all)\n"
"[Str::doesntContain](#method-str-doesnt-contain)\n"
"[Str::deduplicate](#method-deduplicate)\n"
"[Str::endsWith](#method-ends-with)\n"
"[Str::excerpt](#method-excerpt)\n"
"[Str::finish](#method-str-finish)\n"
"[Str::headline](#method-str-headline)\n"
"[Str::inlineMarkdown](#method-str-inline-markdown)\n"
"[Str::is](#method-str-is)\n"
"[Str::isAscii](#method-str-is-ascii)\n"
"[Str::isJson](#method-str-is-json)\n"
"[Str::isUlid](#method-str-is-ulid)\n"
"[Str::isUrl](#method-str-is-url)\n"
"[Str::isUuid](#method-str-is-uuid)\n"
"[Str::kebab](#method-kebab-case)\n"
"[Str::lcfirst](#method-str-lcfirst)\n"
"[Str::length](#method-str-length)\n"
"[Str::limit](#method-str-limit)\n"
"[Str::lower](#method-str-lower)\n"
"[Str::markdown](#method-str-markdown)\n"
"[Str::mask](#method-str-mask)\n"
"[Str::orderedUuid](#method-str-ordered-uuid)\n"
"[Str::padBoth](#method-str-padboth)\n"
"[Str::padLeft](#method-str-padleft)\n"
"[Str::padRight](#method-str-padright)\n"
"[Str::password](#method-str-password)\n"
"[Str::plural](#method-str-plural)\n"
"[Str::pluralStudly](#method-str-plural-studly)\n"
"[Str::position](#method-str-position)\n"
"[Str::random](#method-str-random)\n"
"[Str::remove](#method-str-remove)\n"
"[Str::repeat](#method-str-repeat)\n"
"[Str::replace](#method-str-replace)\n"
"[Str::replaceArray](#method-str-replace-array)\n"
"[Str::replaceFirst](#method-str-replace-first)\n"
"[Str::replaceLast](#method-str-replace-last)\n"
"[Str::replaceMatches](#method-str-replace-matches)\n"
"[Str::replaceStart](#method-str-replace-start)\n"
"[Str::replaceEnd](#method-str-replace-end)\n"
"[Str::reverse](#method-str-reverse)\n"
"[Str::singular](#method-str-singular)\n"
"[Str::slug](#method-str-slug)\n"
"[Str::snake](#method-snake-case)\n"
"[Str::squish](#method-str-squish)\n"
"[Str::start](#method-str-start)\n"
"[Str::startsWith](#method-starts-with)\n"
"[Str::studly](#method-studly-case)\n"
"[Str::substr](#method-str-substr)\n"
"[Str::substrCount](#method-str-substrcount)\n"
"[Str::substrReplace](#method-str-substrreplace)\n"
"[Str::swap](#method-str-swap)\n"
"[Str::take](#method-take)\n"
"[Str::title](#method-title-case)\n"
"[Str::toBase64](#method-str-to-base64)\n"
"[Str::toHtmlString](#method-str-to-html-string)\n"
"[Str::transliterate](#method-str-transliterate)\n"
"[Str::trim](#method-str-trim)\n"
"[Str::ltrim](#method-str-ltrim)\n"
"[Str::rtrim](#method-str-rtrim)\n"
"[Str::ucfirst](#method-str-ucfirst)\n"
"[Str::ucsplit](#method-str-ucsplit)\n"
"[Str::upper](#method-str-upper)\n"
"[Str::ulid](#method-str-ulid)\n"
"[Str::unwrap](#method-str-unwrap)\n"
"[Str::uuid](#method-str-uuid)\n"
"[Str::wordCount](#method-str-word-count)\n"
"[Str::wordWrap](#method-str-word-wrap)\n"
"[Str::words](#method-str-words)\n"
"[Str::wrap](#method-str-wrap)\n"
"[str](#method-str)\n"
"[trans](#method-trans)\n"
"[trans_choice](#method-trans-choice)"
msgstr ""

#: ./docs/10.x/strings.md:116
#: ./docs/11.x/strings.md:124
#: ./docs/master/strings.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"fluent-strings-method-list\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:117
#: ./docs/10.x/strings.md:1398
#: ./docs/11.x/strings.md:125
#: ./docs/11.x/strings.md:1558
#: ./docs/master/strings.md:117
#: ./docs/master/strings.md:1399
msgid "Fluent Strings"
msgstr ""

#: ./docs/10.x/strings.md:121
#: ./docs/master/strings.md:121
msgid ""
"[after](#method-fluent-str-after)\n"
"[afterLast](#method-fluent-str-after-last)\n"
"[apa](#method-fluent-str-apa)\n"
"[append](#method-fluent-str-append)\n"
"[ascii](#method-fluent-str-ascii)\n"
"[basename](#method-fluent-str-basename)\n"
"[before](#method-fluent-str-before)\n"
"[beforeLast](#method-fluent-str-before-last)\n"
"[between](#method-fluent-str-between)\n"
"[betweenFirst](#method-fluent-str-between-first)\n"
"[camel](#method-fluent-str-camel)\n"
"[charAt](#method-fluent-str-char-at)\n"
"[classBasename](#method-fluent-str-class-basename)\n"
"[contains](#method-fluent-str-contains)\n"
"[containsAll](#method-fluent-str-contains-all)\n"
"[dirname](#method-fluent-str-dirname)\n"
"[endsWith](#method-fluent-str-ends-with)\n"
"[excerpt](#method-fluent-str-excerpt)\n"
"[exactly](#method-fluent-str-exactly)\n"
"[explode](#method-fluent-str-explode)\n"
"[finish](#method-fluent-str-finish)\n"
"[headline](#method-fluent-str-headline)\n"
"[inlineMarkdown](#method-fluent-str-inline-markdown)\n"
"[is](#method-fluent-str-is)\n"
"[isAscii](#method-fluent-str-is-ascii)\n"
"[isEmpty](#method-fluent-str-is-empty)\n"
"[isNotEmpty](#method-fluent-str-is-not-empty)\n"
"[isJson](#method-fluent-str-is-json)\n"
"[isUlid](#method-fluent-str-is-ulid)\n"
"[isUrl](#method-fluent-str-is-url)\n"
"[isUuid](#method-fluent-str-is-uuid)\n"
"[kebab](#method-fluent-str-kebab)\n"
"[lcfirst](#method-fluent-str-lcfirst)\n"
"[length](#method-fluent-str-length)\n"
"[limit](#method-fluent-str-limit)\n"
"[lower](#method-fluent-str-lower)\n"
"[ltrim](#method-fluent-str-ltrim)\n"
"[markdown](#method-fluent-str-markdown)\n"
"[mask](#method-fluent-str-mask)\n"
"[match](#method-fluent-str-match)\n"
"[matchAll](#method-fluent-str-match-all)\n"
"[isMatch](#method-fluent-str-is-match)\n"
"[newLine](#method-fluent-str-new-line)\n"
"[padBoth](#method-fluent-str-padboth)\n"
"[padLeft](#method-fluent-str-padleft)\n"
"[padRight](#method-fluent-str-padright)\n"
"[pipe](#method-fluent-str-pipe)\n"
"[plural](#method-fluent-str-plural)\n"
"[position](#method-fluent-str-position)\n"
"[prepend](#method-fluent-str-prepend)\n"
"[remove](#method-fluent-str-remove)\n"
"[repeat](#method-fluent-str-repeat)\n"
"[replace](#method-fluent-str-replace)\n"
"[replaceArray](#method-fluent-str-replace-array)\n"
"[replaceFirst](#method-fluent-str-replace-first)\n"
"[replaceLast](#method-fluent-str-replace-last)\n"
"[replaceMatches](#method-fluent-str-replace-matches)\n"
"[replaceStart](#method-fluent-str-replace-start)\n"
"[replaceEnd](#method-fluent-str-replace-end)\n"
"[rtrim](#method-fluent-str-rtrim)\n"
"[scan](#method-fluent-str-scan)\n"
"[singular](#method-fluent-str-singular)\n"
"[slug](#method-fluent-str-slug)\n"
"[snake](#method-fluent-str-snake)\n"
"[split](#method-fluent-str-split)\n"
"[squish](#method-fluent-str-squish)\n"
"[start](#method-fluent-str-start)\n"
"[startsWith](#method-fluent-str-starts-with)\n"
"[stripTags](#method-fluent-str-strip-tags)\n"
"[studly](#method-fluent-str-studly)\n"
"[substr](#method-fluent-str-substr)\n"
"[substrReplace](#method-fluent-str-substrreplace)\n"
"[swap](#method-fluent-str-swap)\n"
"[take](#method-fluent-str-take)\n"
"[tap](#method-fluent-str-tap)\n"
"[test](#method-fluent-str-test)\n"
"[title](#method-fluent-str-title)\n"
"[toBase64](#method-fluent-str-to-base64)\n"
"[trim](#method-fluent-str-trim)\n"
"[ucfirst](#method-fluent-str-ucfirst)\n"
"[ucsplit](#method-fluent-str-ucsplit)\n"
"[unwrap](#method-fluent-str-unwrap)\n"
"[upper](#method-fluent-str-upper)\n"
"[when](#method-fluent-str-when)\n"
"[whenContains](#method-fluent-str-when-contains)\n"
"[whenContainsAll](#method-fluent-str-when-contains-all)\n"
"[whenEmpty](#method-fluent-str-when-empty)\n"
"[whenNotEmpty](#method-fluent-str-when-not-empty)\n"
"[whenStartsWith](#method-fluent-str-when-starts-with)\n"
"[whenEndsWith](#method-fluent-str-when-ends-with)\n"
"[whenExactly](#method-fluent-str-when-exactly)\n"
"[whenNotExactly](#method-fluent-str-when-not-exactly)\n"
"[whenIs](#method-fluent-str-when-is)\n"
"[whenIsAscii](#method-fluent-str-when-is-ascii)\n"
"[whenIsUlid](#method-fluent-str-when-is-ulid)\n"
"[whenIsUuid](#method-fluent-str-when-is-uuid)\n"
"[whenTest](#method-fluent-str-when-test)\n"
"[wordCount](#method-fluent-str-word-count)\n"
"[words](#method-fluent-str-words)"
msgstr ""

#: ./docs/11.x/strings.md:129
msgid ""
"[after](#method-fluent-str-after)\n"
"[afterLast](#method-fluent-str-after-last)\n"
"[apa](#method-fluent-str-apa)\n"
"[append](#method-fluent-str-append)\n"
"[ascii](#method-fluent-str-ascii)\n"
"[basename](#method-fluent-str-basename)\n"
"[before](#method-fluent-str-before)\n"
"[beforeLast](#method-fluent-str-before-last)\n"
"[between](#method-fluent-str-between)\n"
"[betweenFirst](#method-fluent-str-between-first)\n"
"[camel](#method-fluent-str-camel)\n"
"[charAt](#method-fluent-str-char-at)\n"
"[classBasename](#method-fluent-str-class-basename)\n"
"[chopStart](#method-fluent-str-chop-start)\n"
"[chopEnd](#method-fluent-str-chop-end)\n"
"[contains](#method-fluent-str-contains)\n"
"[containsAll](#method-fluent-str-contains-all)\n"
"[deduplicate](#method-fluent-str-deduplicate)\n"
"[dirname](#method-fluent-str-dirname)\n"
"[endsWith](#method-fluent-str-ends-with)\n"
"[exactly](#method-fluent-str-exactly)\n"
"[excerpt](#method-fluent-str-excerpt)\n"
"[explode](#method-fluent-str-explode)\n"
"[finish](#method-fluent-str-finish)\n"
"[headline](#method-fluent-str-headline)\n"
"[inlineMarkdown](#method-fluent-str-inline-markdown)\n"
"[is](#method-fluent-str-is)\n"
"[isAscii](#method-fluent-str-is-ascii)\n"
"[isEmpty](#method-fluent-str-is-empty)\n"
"[isNotEmpty](#method-fluent-str-is-not-empty)\n"
"[isJson](#method-fluent-str-is-json)\n"
"[isUlid](#method-fluent-str-is-ulid)\n"
"[isUrl](#method-fluent-str-is-url)\n"
"[isUuid](#method-fluent-str-is-uuid)\n"
"[kebab](#method-fluent-str-kebab)\n"
"[lcfirst](#method-fluent-str-lcfirst)\n"
"[length](#method-fluent-str-length)\n"
"[limit](#method-fluent-str-limit)\n"
"[lower](#method-fluent-str-lower)\n"
"[markdown](#method-fluent-str-markdown)\n"
"[mask](#method-fluent-str-mask)\n"
"[match](#method-fluent-str-match)\n"
"[matchAll](#method-fluent-str-match-all)\n"
"[isMatch](#method-fluent-str-is-match)\n"
"[newLine](#method-fluent-str-new-line)\n"
"[padBoth](#method-fluent-str-padboth)\n"
"[padLeft](#method-fluent-str-padleft)\n"
"[padRight](#method-fluent-str-padright)\n"
"[pipe](#method-fluent-str-pipe)\n"
"[plural](#method-fluent-str-plural)\n"
"[position](#method-fluent-str-position)\n"
"[prepend](#method-fluent-str-prepend)\n"
"[remove](#method-fluent-str-remove)\n"
"[repeat](#method-fluent-str-repeat)\n"
"[replace](#method-fluent-str-replace)\n"
"[replaceArray](#method-fluent-str-replace-array)\n"
"[replaceFirst](#method-fluent-str-replace-first)\n"
"[replaceLast](#method-fluent-str-replace-last)\n"
"[replaceMatches](#method-fluent-str-replace-matches)\n"
"[replaceStart](#method-fluent-str-replace-start)\n"
"[replaceEnd](#method-fluent-str-replace-end)\n"
"[scan](#method-fluent-str-scan)\n"
"[singular](#method-fluent-str-singular)\n"
"[slug](#method-fluent-str-slug)\n"
"[snake](#method-fluent-str-snake)\n"
"[split](#method-fluent-str-split)\n"
"[squish](#method-fluent-str-squish)\n"
"[start](#method-fluent-str-start)\n"
"[startsWith](#method-fluent-str-starts-with)\n"
"[stripTags](#method-fluent-str-strip-tags)\n"
"[studly](#method-fluent-str-studly)\n"
"[substr](#method-fluent-str-substr)\n"
"[substrReplace](#method-fluent-str-substrreplace)\n"
"[swap](#method-fluent-str-swap)\n"
"[take](#method-fluent-str-take)\n"
"[tap](#method-fluent-str-tap)\n"
"[test](#method-fluent-str-test)\n"
"[title](#method-fluent-str-title)\n"
"[toBase64](#method-fluent-str-to-base64)\n"
"[transliterate](#method-fluent-str-transliterate)\n"
"[trim](#method-fluent-str-trim)\n"
"[ltrim](#method-fluent-str-ltrim)\n"
"[rtrim](#method-fluent-str-rtrim)\n"
"[ucfirst](#method-fluent-str-ucfirst)\n"
"[ucsplit](#method-fluent-str-ucsplit)\n"
"[unwrap](#method-fluent-str-unwrap)\n"
"[upper](#method-fluent-str-upper)\n"
"[when](#method-fluent-str-when)\n"
"[whenContains](#method-fluent-str-when-contains)\n"
"[whenContainsAll](#method-fluent-str-when-contains-all)\n"
"[whenEmpty](#method-fluent-str-when-empty)\n"
"[whenNotEmpty](#method-fluent-str-when-not-empty)\n"
"[whenStartsWith](#method-fluent-str-when-starts-with)\n"
"[whenEndsWith](#method-fluent-str-when-ends-with)\n"
"[whenExactly](#method-fluent-str-when-exactly)\n"
"[whenNotExactly](#method-fluent-str-when-not-exactly)\n"
"[whenIs](#method-fluent-str-when-is)\n"
"[whenIsAscii](#method-fluent-str-when-is-ascii)\n"
"[whenIsUlid](#method-fluent-str-when-is-ulid)\n"
"[whenIsUuid](#method-fluent-str-when-is-uuid)\n"
"[whenTest](#method-fluent-str-when-test)\n"
"[wordCount](#method-fluent-str-word-count)\n"
"[words](#method-fluent-str-words)\n"
"[wrap](#method-fluent-str-wrap)"
msgstr ""

#: ./docs/10.x/strings.md:223
#: ./docs/11.x/strings.md:236
#: ./docs/master/strings.md:223
#~ msgctxt "P"
#~ msgid "<a name=\"strings\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:226
#: ./docs/11.x/strings.md:239
#: ./docs/master/strings.md:226
#~ msgctxt "P"
#~ msgid "<a name=\"method-__\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:227
#: ./docs/11.x/strings.md:240
#: ./docs/master/strings.md:227
msgid "`__()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:229
#: ./docs/11.x/strings.md:242
#: ./docs/master/strings.md:229
msgid "The `__` function translates the given translation string or translation key using your [language files](/docs/{{version}}/localization):"
msgstr ""

#: ./docs/10.x/strings.md:231
#: ./docs/11.x/strings.md:244
#: ./docs/master/strings.md:231
msgid ""
"echo __('Welcome to our application');\n"
"\n"
"echo __('messages.welcome');"
msgstr ""

#: ./docs/10.x/strings.md:235
#: ./docs/11.x/strings.md:248
#: ./docs/master/strings.md:235
msgid "If the specified translation string or key does not exist, the `__` function will return the given value. So, using the example above, the `__` function would return `messages.welcome` if that translation key does not exist."
msgstr ""

#: ./docs/10.x/strings.md:237
#: ./docs/11.x/strings.md:250
#: ./docs/master/strings.md:237
#~ msgctxt "P"
#~ msgid "<a name=\"method-class-basename\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:238
#: ./docs/11.x/strings.md:251
#: ./docs/master/strings.md:238
msgid "`class_basename()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:240
#: ./docs/11.x/strings.md:253
#: ./docs/master/strings.md:240
msgid "The `class_basename` function returns the class name of the given class with the class's namespace removed:"
msgstr ""

#: ./docs/10.x/strings.md:242
#: ./docs/11.x/strings.md:255
#: ./docs/master/strings.md:242
msgid ""
"$class = class_basename('Foo\\Bar\\Baz');\n"
"\n"
"// Baz"
msgstr ""

#: ./docs/10.x/strings.md:246
#: ./docs/11.x/strings.md:259
#: ./docs/master/strings.md:246
#~ msgctxt "P"
#~ msgid "<a name=\"method-e\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:247
#: ./docs/11.x/strings.md:260
#: ./docs/master/strings.md:247
msgid "`e()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:249
#: ./docs/11.x/strings.md:262
#: ./docs/master/strings.md:249
msgid "The `e` function runs PHP's `htmlspecialchars` function with the `double_encode` option set to `true` by default:"
msgstr ""

#: ./docs/10.x/strings.md:251
#: ./docs/11.x/strings.md:264
#: ./docs/master/strings.md:251
msgid ""
"echo e('<html>foo</html>');\n"
"\n"
"// &lt;html&gt;foo&lt;/html&gt;"
msgstr ""

#: ./docs/10.x/strings.md:255
#: ./docs/11.x/strings.md:268
#: ./docs/master/strings.md:255
#~ msgctxt "P"
#~ msgid "<a name=\"method-preg-replace-array\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:256
#: ./docs/11.x/strings.md:269
#: ./docs/master/strings.md:256
msgid "`preg_replace_array()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:258
#: ./docs/11.x/strings.md:271
#: ./docs/master/strings.md:258
msgid "The `preg_replace_array` function replaces a given pattern in the string sequentially using an array:"
msgstr ""

#: ./docs/10.x/strings.md:260
#: ./docs/11.x/strings.md:273
#: ./docs/master/strings.md:260
msgid ""
"$string = 'The event will take place between :start and :end';\n"
"\n"
"$replaced = preg_replace_array('/:[a-z_]+/', ['8:30', '9:00'], $string);\n"
"\n"
"// The event will take place between 8:30 and 9:00"
msgstr ""

#: ./docs/10.x/strings.md:266
#: ./docs/11.x/strings.md:279
#: ./docs/master/strings.md:266
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-after\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:267
#: ./docs/11.x/strings.md:280
#: ./docs/master/strings.md:267
msgid "`Str::after()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:269
#: ./docs/11.x/strings.md:282
#: ./docs/master/strings.md:269
msgid "The `Str::after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: ./docs/10.x/strings.md:271
#: ./docs/11.x/strings.md:284
#: ./docs/master/strings.md:271
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::after('This is my name', 'This is');\n"
"\n"
"// ' my name'"
msgstr ""

#: ./docs/10.x/strings.md:277
#: ./docs/11.x/strings.md:290
#: ./docs/master/strings.md:277
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-after-last\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:278
#: ./docs/11.x/strings.md:291
#: ./docs/master/strings.md:278
msgid "`Str::afterLast()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:280
#: ./docs/11.x/strings.md:293
#: ./docs/master/strings.md:280
msgid "The `Str::afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: ./docs/10.x/strings.md:282
#: ./docs/11.x/strings.md:295
#: ./docs/master/strings.md:282
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::afterLast('App\\Http\\Controllers\\Controller', '\\\\');\n"
"\n"
"// 'Controller'"
msgstr ""

#: ./docs/10.x/strings.md:288
#: ./docs/11.x/strings.md:301
#: ./docs/master/strings.md:288
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-apa\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:289
#: ./docs/11.x/strings.md:302
#: ./docs/master/strings.md:289
msgid "`Str::apa()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:291
#: ./docs/11.x/strings.md:304
#: ./docs/master/strings.md:291
msgid "The `Str::apa` method converts the given string to title case following the [APA guidelines](https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case):"
msgstr ""

#: ./docs/10.x/strings.md:293
#: ./docs/11.x/strings.md:306
#: ./docs/master/strings.md:293
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$title = Str::apa('Creating A Project');\n"
"\n"
"// 'Creating a Project'"
msgstr ""

#: ./docs/10.x/strings.md:299
#: ./docs/11.x/strings.md:312
#: ./docs/master/strings.md:299
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-ascii\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:300
#: ./docs/11.x/strings.md:313
#: ./docs/master/strings.md:300
msgid "`Str::ascii()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:302
#: ./docs/11.x/strings.md:315
#: ./docs/master/strings.md:302
msgid "The `Str::ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#: ./docs/10.x/strings.md:304
#: ./docs/11.x/strings.md:317
#: ./docs/master/strings.md:304
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::ascii('û');\n"
"\n"
"// 'u'"
msgstr ""

#: ./docs/10.x/strings.md:310
#: ./docs/11.x/strings.md:323
#: ./docs/master/strings.md:310
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-before\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:311
#: ./docs/11.x/strings.md:324
#: ./docs/master/strings.md:311
msgid "`Str::before()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:313
#: ./docs/11.x/strings.md:326
#: ./docs/master/strings.md:313
msgid "The `Str::before` method returns everything before the given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:315
#: ./docs/11.x/strings.md:328
#: ./docs/master/strings.md:315
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::before('This is my name', 'my name');\n"
"\n"
"// 'This is '"
msgstr ""

#: ./docs/10.x/strings.md:321
#: ./docs/11.x/strings.md:334
#: ./docs/master/strings.md:321
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-before-last\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:322
#: ./docs/11.x/strings.md:335
#: ./docs/master/strings.md:322
msgid "`Str::beforeLast()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:324
#: ./docs/11.x/strings.md:337
#: ./docs/master/strings.md:324
msgid "The `Str::beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:326
#: ./docs/11.x/strings.md:339
#: ./docs/master/strings.md:326
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::beforeLast('This is my name', 'is');\n"
"\n"
"// 'This '"
msgstr ""

#: ./docs/10.x/strings.md:332
#: ./docs/11.x/strings.md:345
#: ./docs/master/strings.md:332
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-between\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:333
#: ./docs/11.x/strings.md:346
#: ./docs/master/strings.md:333
msgid "`Str::between()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:335
#: ./docs/11.x/strings.md:348
#: ./docs/master/strings.md:335
msgid "The `Str::between` method returns the portion of a string between two values:"
msgstr ""

#: ./docs/10.x/strings.md:337
#: ./docs/11.x/strings.md:350
#: ./docs/master/strings.md:337
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::between('This is my name', 'This', 'name');\n"
"\n"
"// ' is my '"
msgstr ""

#: ./docs/10.x/strings.md:343
#: ./docs/11.x/strings.md:356
#: ./docs/master/strings.md:343
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-between-first\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:344
#: ./docs/11.x/strings.md:357
#: ./docs/master/strings.md:344
msgid "`Str::betweenFirst()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:346
#: ./docs/11.x/strings.md:359
#: ./docs/master/strings.md:346
msgid "The `Str::betweenFirst` method returns the smallest possible portion of a string between two values:"
msgstr ""

#: ./docs/10.x/strings.md:348
#: ./docs/11.x/strings.md:361
#: ./docs/master/strings.md:348
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::betweenFirst('[a] bc [d]', '[', ']');\n"
"\n"
"// 'a'"
msgstr ""

#: ./docs/10.x/strings.md:354
#: ./docs/11.x/strings.md:367
#: ./docs/master/strings.md:354
#~ msgctxt "P"
#~ msgid "<a name=\"method-camel-case\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:355
#: ./docs/11.x/strings.md:368
#: ./docs/master/strings.md:355
msgid "`Str::camel()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:357
#: ./docs/11.x/strings.md:370
#: ./docs/master/strings.md:357
msgid "The `Str::camel` method converts the given string to `camelCase`:"
msgstr ""

#: ./docs/10.x/strings.md:359
#: ./docs/11.x/strings.md:372
#: ./docs/master/strings.md:359
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::camel('foo_bar');\n"
"\n"
"// 'fooBar'"
msgstr ""

#: ./docs/10.x/strings.md:365
#: ./docs/11.x/strings.md:378
#: ./docs/master/strings.md:365
#~ msgctxt "P"
#~ msgid "<a name=\"method-char-at\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:366
#: ./docs/11.x/strings.md:379
#: ./docs/master/strings.md:367
msgid "`Str::charAt()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:368
#: ./docs/11.x/strings.md:381
#: ./docs/master/strings.md:369
msgid "The `Str::charAt` method returns the character at the specified index. If the index is out of bounds, `false` is returned:"
msgstr ""

#: ./docs/10.x/strings.md:370
#: ./docs/11.x/strings.md:383
#: ./docs/master/strings.md:371
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$character = Str::charAt('This is my name.', 6);\n"
"\n"
"// 's'"
msgstr ""

#: ./docs/10.x/strings.md:376
#: ./docs/11.x/strings.md:427
#: ./docs/master/strings.md:377
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-contains\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:377
#: ./docs/11.x/strings.md:428
#: ./docs/master/strings.md:378
msgid "`Str::contains()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:379
#: ./docs/master/strings.md:380
msgid "The `Str::contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#: ./docs/10.x/strings.md:381
#: ./docs/11.x/strings.md:432
#: ./docs/master/strings.md:382
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::contains('This is my name', 'my');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:387
#: ./docs/10.x/strings.md:1564
#: ./docs/10.x/strings.md:2634
#: ./docs/11.x/strings.md:438
#: ./docs/11.x/strings.md:1762
#: ./docs/11.x/strings.md:2880
#: ./docs/master/strings.md:388
#: ./docs/master/strings.md:1565
#: ./docs/master/strings.md:2635
msgid "You may also pass an array of values to determine if the given string contains any of the values in the array:"
msgstr ""

#: ./docs/10.x/strings.md:389
#: ./docs/11.x/strings.md:440
#: ./docs/master/strings.md:390
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::contains('This is my name', ['my', 'foo']);\n"
"\n"
"// true"
msgstr ""

#: ./docs/11.x/strings.md:389
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-chop-start\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:390
msgid "`Str::chopStart()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:392
msgid "The `Str::chopStart` method removes the first occurrence of the given value only if the value appears at the start of the string:"
msgstr ""

#: ./docs/11.x/strings.md:394
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::chopStart('https://laravel.com', 'https://');\n"
"\n"
"// 'laravel.com'"
msgstr ""

#: ./docs/10.x/strings.md:395
#: ./docs/11.x/strings.md:454
#: ./docs/master/strings.md:396
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-contains-all\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:396
#: ./docs/11.x/strings.md:455
#: ./docs/master/strings.md:397
msgid "`Str::containsAll()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:398
#: ./docs/11.x/strings.md:457
#: ./docs/master/strings.md:399
msgid "The `Str::containsAll` method determines if the given string contains all of the values in a given array:"
msgstr ""

#: ./docs/10.x/strings.md:400
#: ./docs/11.x/strings.md:459
#: ./docs/master/strings.md:401
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$containsAll = Str::containsAll('This is my name', ['my', 'name']);\n"
"\n"
"// true"
msgstr ""

#: ./docs/11.x/strings.md:400
msgid "You may also pass an array as the second argument. If the string starts with any of the values in the array then that value will be removed from string:"
msgstr ""

#: ./docs/11.x/strings.md:402
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::chopStart('http://laravel.com', ['https://', 'http://']);\n"
"\n"
"// 'laravel.com'"
msgstr ""

#: ./docs/10.x/strings.md:406
#: ./docs/11.x/strings.md:519
#: ./docs/master/strings.md:407
#~ msgctxt "P"
#~ msgid "<a name=\"method-ends-with\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:407
#: ./docs/11.x/strings.md:520
#: ./docs/master/strings.md:408
msgid "`Str::endsWith()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:408
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-chop-end\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:409
#: ./docs/11.x/strings.md:522
#: ./docs/master/strings.md:410
msgid "The `Str::endsWith` method determines if the given string ends with the given value:"
msgstr ""

#: ./docs/11.x/strings.md:409
msgid "`Str::chopEnd()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:411
#: ./docs/11.x/strings.md:524
#: ./docs/master/strings.md:412
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::endsWith('This is my name', 'name');\n"
"\n"
"// true"
msgstr ""

#: ./docs/11.x/strings.md:411
msgid "The `Str::chopEnd` method removes the last occurrence of the given value only if the value appears at the end of the string:"
msgstr ""

#: ./docs/11.x/strings.md:413
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::chopEnd('app/Models/Photograph.php', '.php');\n"
"\n"
"// 'app/Models/Photograph'"
msgstr ""

#: ./docs/10.x/strings.md:418
#: ./docs/10.x/strings.md:1639
#: ./docs/11.x/strings.md:530
#: ./docs/11.x/strings.md:1846
#: ./docs/master/strings.md:419
#: ./docs/master/strings.md:1640
msgid "You may also pass an array of values to determine if the given string ends with any of the values in the array:"
msgstr ""

#: ./docs/11.x/strings.md:419
msgid "You may also pass an array as the second argument. If the string ends with any of the values in the array then that value will be removed from string:"
msgstr ""

#: ./docs/10.x/strings.md:420
#: ./docs/11.x/strings.md:532
#: ./docs/master/strings.md:421
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::endsWith('This is my name', ['name', 'foo']);\n"
"\n"
"// true\n"
"\n"
"$result = Str::endsWith('This is my name', ['this', 'foo']);\n"
"\n"
"// false"
msgstr ""

#: ./docs/11.x/strings.md:421
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::chopEnd('laravel.com/index.php', ['/index.html', '/index.php']);\n"
"\n"
"// 'laravel.com'"
msgstr ""

#: ./docs/10.x/strings.md:430
#: ./docs/11.x/strings.md:542
#: ./docs/master/strings.md:431
#~ msgctxt "P"
#~ msgid "<a name=\"method-excerpt\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:430
msgid "The `Str::contains` method determines if the given string contains the given value. By default this method is case sensitive:"
msgstr ""

#: ./docs/10.x/strings.md:431
#: ./docs/11.x/strings.md:543
#: ./docs/master/strings.md:432
msgid "`Str::excerpt()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:433
#: ./docs/11.x/strings.md:545
#: ./docs/master/strings.md:434
msgid "The `Str::excerpt` method extracts an excerpt from a given string that matches the first instance of a phrase within that string:"
msgstr ""

#: ./docs/10.x/strings.md:435
#: ./docs/11.x/strings.md:547
#: ./docs/master/strings.md:436
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::excerpt('This is my name', 'my', [\n"
"    'radius' => 3\n"
"]);\n"
"\n"
"// '...is my na...'"
msgstr ""

#: ./docs/10.x/strings.md:443
#: ./docs/10.x/strings.md:1615
#: ./docs/11.x/strings.md:555
#: ./docs/11.x/strings.md:1882
#: ./docs/master/strings.md:444
#: ./docs/master/strings.md:1616
msgid "The `radius` option, which defaults to `100`, allows you to define the number of characters that should appear on each side of the truncated string."
msgstr ""

#: ./docs/10.x/strings.md:445
#: ./docs/11.x/strings.md:557
#: ./docs/master/strings.md:446
msgid "In addition, you may use the `omission` option to define the string that will be prepended and appended to the truncated string:"
msgstr ""

#: ./docs/11.x/strings.md:446
#: ./docs/11.x/strings.md:465
#: ./docs/11.x/strings.md:492
msgid "You may disable case sensitivity by setting the `ignoreCase` argument to `true`:"
msgstr ""

#: ./docs/10.x/strings.md:447
#: ./docs/11.x/strings.md:559
#: ./docs/master/strings.md:448
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::excerpt('This is my name', 'name', [\n"
"    'radius' => 3,\n"
"    'omission' => '(...) '\n"
"]);\n"
"\n"
"// '(...) my name'"
msgstr ""

#: ./docs/11.x/strings.md:448
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::contains('This is my name', 'MY', ignoreCase: true);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:456
#: ./docs/11.x/strings.md:568
#: ./docs/master/strings.md:457
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-finish\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:457
#: ./docs/11.x/strings.md:569
#: ./docs/master/strings.md:458
msgid "`Str::finish()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:459
#: ./docs/11.x/strings.md:571
#: ./docs/master/strings.md:460
msgid "The `Str::finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#: ./docs/10.x/strings.md:461
#: ./docs/11.x/strings.md:573
#: ./docs/master/strings.md:462
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::finish('this/string', '/');\n"
"\n"
"// this/string/\n"
"\n"
"$adjusted = Str::finish('this/string/', '/');\n"
"\n"
"// this/string/"
msgstr ""

#: ./docs/11.x/strings.md:467
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$containsAll = Str::containsAll('This is my name', ['MY', 'NAME'], ignoreCase: true);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:471
#: ./docs/11.x/strings.md:583
#: ./docs/master/strings.md:472
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-headline\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:472
#: ./docs/11.x/strings.md:584
#: ./docs/master/strings.md:473
msgid "`Str::headline()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:473
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-doesnt-contain\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:474
#: ./docs/11.x/strings.md:586
#: ./docs/master/strings.md:475
msgid "The `Str::headline` method will convert strings delimited by casing, hyphens, or underscores into a space delimited string with each word's first letter capitalized:"
msgstr ""

#: ./docs/11.x/strings.md:474
msgid "`Str::doesntContain()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:476
#: ./docs/11.x/strings.md:588
#: ./docs/master/strings.md:477
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$headline = Str::headline('steve_jobs');\n"
"\n"
"// Steve Jobs\n"
"\n"
"$headline = Str::headline('EmailNotificationSent');\n"
"\n"
"// Email Notification Sent"
msgstr ""

#: ./docs/11.x/strings.md:476
msgid "The `Str::doesntContain` method determines if the given string doesn't contain the given value. By default this method is case sensitive:"
msgstr ""

#: ./docs/11.x/strings.md:478
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$doesntContain = Str::doesntContain('This is name', 'my');\n"
"\n"
"// true"
msgstr ""

#: ./docs/11.x/strings.md:484
msgid "You may also pass an array of values to determine if the given string doesn't contain any of the values in the array:"
msgstr ""

#: ./docs/10.x/strings.md:486
#: ./docs/11.x/strings.md:598
#: ./docs/master/strings.md:487
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-inline-markdown\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:486
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$doesntContain = Str::doesntContain('This is name', ['my', 'foo']);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:487
#: ./docs/11.x/strings.md:599
#: ./docs/master/strings.md:488
msgid "`Str::inlineMarkdown()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:489
#: ./docs/11.x/strings.md:601
#: ./docs/master/strings.md:490
msgid "The `Str::inlineMarkdown` method converts GitHub flavored Markdown into inline HTML using [CommonMark](https://commonmark.thephpleague.com/). However, unlike the `markdown` method, it does not wrap all generated HTML in a block-level element:"
msgstr ""

#: ./docs/10.x/strings.md:491
#: ./docs/11.x/strings.md:603
#: ./docs/master/strings.md:492
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::inlineMarkdown('**Laravel**');\n"
"\n"
"// <strong>Laravel</strong>"
msgstr ""

#: ./docs/11.x/strings.md:494
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$doesntContain = Str::doesntContain('This is name', 'MY', ignoreCase: true);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:497
#: ./docs/10.x/strings.md:688
#: ./docs/10.x/strings.md:1714
#: ./docs/10.x/strings.md:1952
#: ./docs/11.x/strings.md:609
#: ./docs/11.x/strings.md:804
#: ./docs/11.x/strings.md:1947
#: ./docs/11.x/strings.md:2172
#: ./docs/master/strings.md:498
#: ./docs/master/strings.md:689
#: ./docs/master/strings.md:1715
#: ./docs/master/strings.md:1953
msgid "Markdown Security"
msgstr ""

#: ./docs/10.x/strings.md:499
#: ./docs/10.x/strings.md:690
#: ./docs/10.x/strings.md:1716
#: ./docs/10.x/strings.md:1954
#: ./docs/11.x/strings.md:611
#: ./docs/11.x/strings.md:806
#: ./docs/11.x/strings.md:1949
#: ./docs/11.x/strings.md:2174
#: ./docs/master/strings.md:500
#: ./docs/master/strings.md:691
#: ./docs/master/strings.md:1717
#: ./docs/master/strings.md:1955
msgid "By default, Markdown supports raw HTML, which will expose Cross-Site Scripting (XSS) vulnerabilities when used with raw user input. As per the [CommonMark Security documentation](https://commonmark.thephpleague.com/security/), you may use the `html_input` option to either escape or strip raw HTML, and the `allow_unsafe_links` option to specify whether to allow unsafe links. If you need to allow some raw HTML, you should pass your compiled Markdown through an HTML Purifier:"
msgstr ""

#: ./docs/11.x/strings.md:500
#~ msgctxt "P"
#~ msgid "<a name=\"method-deduplicate\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:501
#: ./docs/11.x/strings.md:613
#: ./docs/master/strings.md:502
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::inlineMarkdown('Inject: <script>alert(\"Hello XSS!\");</script>', [\n"
"    'html_input' => 'strip',\n"
"    'allow_unsafe_links' => false,\n"
"]);\n"
"\n"
"// Inject: alert(&quot;Hello XSS!&quot;);"
msgstr ""

#: ./docs/11.x/strings.md:501
msgid "`Str::deduplicate()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:503
msgid "The `Str::deduplicate` method replaces consecutive instances of a character with a single instance of that character in the given string. By default, the method deduplicates spaces:"
msgstr ""

#: ./docs/11.x/strings.md:505
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::deduplicate('The   Laravel   Framework');\n"
"\n"
"// The Laravel Framework"
msgstr ""

#: ./docs/10.x/strings.md:510
#: ./docs/11.x/strings.md:622
#: ./docs/master/strings.md:511
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-is\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:511
#: ./docs/11.x/strings.md:623
#: ./docs/master/strings.md:512
msgid "`Str::is()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:511
#: ./docs/11.x/strings.md:1808
msgid "You may specify a different character to deduplicate by passing it in as the second argument to the method:"
msgstr ""

#: ./docs/10.x/strings.md:513
#: ./docs/11.x/strings.md:625
#: ./docs/master/strings.md:514
msgid "The `Str::is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values:"
msgstr ""

#: ./docs/11.x/strings.md:513
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::deduplicate('The---Laravel---Framework', '-');\n"
"\n"
"// The-Laravel-Framework"
msgstr ""

#: ./docs/10.x/strings.md:515
#: ./docs/11.x/strings.md:627
#: ./docs/master/strings.md:516
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$matches = Str::is('foo*', 'foobar');\n"
"\n"
"// true\n"
"\n"
"$matches = Str::is('baz*', 'foobar');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:525
#: ./docs/11.x/strings.md:637
#: ./docs/master/strings.md:526
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-is-ascii\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:526
#: ./docs/11.x/strings.md:638
#: ./docs/master/strings.md:527
msgid "`Str::isAscii()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:528
#: ./docs/11.x/strings.md:640
#: ./docs/master/strings.md:529
msgid "The `Str::isAscii` method determines if a given string is 7 bit ASCII:"
msgstr ""

#: ./docs/10.x/strings.md:530
#: ./docs/11.x/strings.md:642
#: ./docs/master/strings.md:531
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isAscii = Str::isAscii('Taylor');\n"
"\n"
"// true\n"
"\n"
"$isAscii = Str::isAscii('ü');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:540
#: ./docs/11.x/strings.md:652
#: ./docs/master/strings.md:541
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-is-json\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:541
#: ./docs/11.x/strings.md:653
#: ./docs/master/strings.md:542
msgid "`Str::isJson()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:543
#: ./docs/11.x/strings.md:655
#: ./docs/master/strings.md:544
msgid "The `Str::isJson` method determines if the given string is valid JSON:"
msgstr ""

#: ./docs/10.x/strings.md:545
#: ./docs/11.x/strings.md:657
#: ./docs/master/strings.md:546
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::isJson('[1,2,3]');\n"
"\n"
"// true\n"
"\n"
"$result = Str::isJson('{\"first\": \"John\", \"last\": \"Doe\"}');\n"
"\n"
"// true\n"
"\n"
"$result = Str::isJson('{first: \"John\", last: \"Doe\"}');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:559
#: ./docs/11.x/strings.md:671
#: ./docs/master/strings.md:560
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-is-url\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:560
#: ./docs/11.x/strings.md:672
#: ./docs/master/strings.md:561
msgid "`Str::isUrl()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:562
#: ./docs/11.x/strings.md:674
#: ./docs/master/strings.md:563
msgid "The `Str::isUrl` method determines if the given string is a valid URL:"
msgstr ""

#: ./docs/10.x/strings.md:564
#: ./docs/11.x/strings.md:676
#: ./docs/master/strings.md:565
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isUrl = Str::isUrl('http://example.com');\n"
"\n"
"// true\n"
"\n"
"$isUrl = Str::isUrl('laravel');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:574
#: ./docs/10.x/strings.md:1837
#: ./docs/11.x/strings.md:686
#: ./docs/11.x/strings.md:2069
#: ./docs/master/strings.md:575
#: ./docs/master/strings.md:1838
msgid "The `isUrl` method considers a wide range of protocols as valid. However, you may specify the protocols that should be considered valid by providing them to the `isUrl` method:"
msgstr ""

#: ./docs/10.x/strings.md:576
#: ./docs/11.x/strings.md:688
#: ./docs/master/strings.md:577
msgid "$isUrl = Str::isUrl('http://example.com', ['http', 'https']);"
msgstr ""

#: ./docs/10.x/strings.md:578
#: ./docs/11.x/strings.md:690
#: ./docs/master/strings.md:579
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-is-ulid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:579
#: ./docs/11.x/strings.md:691
#: ./docs/master/strings.md:580
msgid "`Str::isUlid()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:581
#: ./docs/11.x/strings.md:693
#: ./docs/master/strings.md:582
msgid "The `Str::isUlid` method determines if the given string is a valid ULID:"
msgstr ""

#: ./docs/10.x/strings.md:583
#: ./docs/11.x/strings.md:695
#: ./docs/master/strings.md:584
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isUlid = Str::isUlid('01gd6r360bp37zj17nxb55yv40');\n"
"\n"
"// true\n"
"\n"
"$isUlid = Str::isUlid('laravel');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:593
#: ./docs/11.x/strings.md:705
#: ./docs/master/strings.md:594
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-is-uuid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:594
#: ./docs/11.x/strings.md:706
#: ./docs/master/strings.md:595
msgid "`Str::isUuid()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:596
#: ./docs/11.x/strings.md:708
#: ./docs/master/strings.md:597
msgid "The `Str::isUuid` method determines if the given string is a valid UUID:"
msgstr ""

#: ./docs/10.x/strings.md:598
#: ./docs/11.x/strings.md:710
#: ./docs/master/strings.md:599
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isUuid = Str::isUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de');\n"
"\n"
"// true\n"
"\n"
"$isUuid = Str::isUuid('laravel');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:608
#: ./docs/11.x/strings.md:720
#: ./docs/master/strings.md:609
#~ msgctxt "P"
#~ msgid "<a name=\"method-kebab-case\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:609
#: ./docs/11.x/strings.md:721
#: ./docs/master/strings.md:610
msgid "`Str::kebab()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:611
#: ./docs/11.x/strings.md:723
#: ./docs/master/strings.md:612
msgid "The `Str::kebab` method converts the given string to `kebab-case`:"
msgstr ""

#: ./docs/10.x/strings.md:613
#: ./docs/11.x/strings.md:725
#: ./docs/master/strings.md:614
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::kebab('fooBar');\n"
"\n"
"// foo-bar"
msgstr ""

#: ./docs/10.x/strings.md:619
#: ./docs/11.x/strings.md:731
#: ./docs/master/strings.md:620
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-lcfirst\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:620
#: ./docs/11.x/strings.md:732
#: ./docs/master/strings.md:621
msgid "`Str::lcfirst()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:622
#: ./docs/11.x/strings.md:734
#: ./docs/master/strings.md:623
msgid "The `Str::lcfirst` method returns the given string with the first character lowercased:"
msgstr ""

#: ./docs/10.x/strings.md:624
#: ./docs/11.x/strings.md:736
#: ./docs/master/strings.md:625
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::lcfirst('Foo Bar');\n"
"\n"
"// foo Bar"
msgstr ""

#: ./docs/10.x/strings.md:630
#: ./docs/11.x/strings.md:742
#: ./docs/master/strings.md:631
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-length\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:631
#: ./docs/11.x/strings.md:743
#: ./docs/master/strings.md:632
msgid "`Str::length()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:633
#: ./docs/11.x/strings.md:745
#: ./docs/master/strings.md:634
msgid "The `Str::length` method returns the length of the given string:"
msgstr ""

#: ./docs/10.x/strings.md:635
#: ./docs/11.x/strings.md:747
#: ./docs/master/strings.md:636
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$length = Str::length('Laravel');\n"
"\n"
"// 7"
msgstr ""

#: ./docs/10.x/strings.md:641
#: ./docs/11.x/strings.md:753
#: ./docs/master/strings.md:642
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-limit\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:642
#: ./docs/11.x/strings.md:754
#: ./docs/master/strings.md:643
msgid "`Str::limit()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:644
#: ./docs/11.x/strings.md:756
#: ./docs/master/strings.md:645
msgid "The `Str::limit` method truncates the given string to the specified length:"
msgstr ""

#: ./docs/10.x/strings.md:646
#: ./docs/11.x/strings.md:758
#: ./docs/master/strings.md:647
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);\n"
"\n"
"// The quick brown fox..."
msgstr ""

#: ./docs/10.x/strings.md:652
#: ./docs/11.x/strings.md:764
#: ./docs/master/strings.md:653
msgid "You may pass a third argument to the method to change the string that will be appended to the end of the truncated string:"
msgstr ""

#: ./docs/10.x/strings.md:654
#: ./docs/master/strings.md:655
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n"
"\n"
"// The quick brown fox (...)"
msgstr ""

#: ./docs/10.x/strings.md:660
#: ./docs/11.x/strings.md:776
#: ./docs/master/strings.md:661
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-lower\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:661
#: ./docs/11.x/strings.md:777
#: ./docs/master/strings.md:662
msgid "`Str::lower()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:663
#: ./docs/11.x/strings.md:779
#: ./docs/master/strings.md:664
msgid "The `Str::lower` method converts the given string to lowercase:"
msgstr ""

#: ./docs/10.x/strings.md:665
#: ./docs/11.x/strings.md:781
#: ./docs/master/strings.md:666
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::lower('LARAVEL');\n"
"\n"
"// laravel"
msgstr ""

#: ./docs/10.x/strings.md:671
#: ./docs/11.x/strings.md:787
#: ./docs/master/strings.md:672
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-markdown\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:672
#: ./docs/11.x/strings.md:788
#: ./docs/master/strings.md:673
msgid "`Str::markdown()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:674
#: ./docs/11.x/strings.md:790
#: ./docs/master/strings.md:675
msgid "The `Str::markdown` method converts GitHub flavored Markdown into HTML using [CommonMark](https://commonmark.thephpleague.com/):"
msgstr ""

#: ./docs/10.x/strings.md:676
#: ./docs/11.x/strings.md:792
#: ./docs/master/strings.md:677
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::markdown('# Laravel');\n"
"\n"
"// <h1>Laravel</h1>\n"
"\n"
"$html = Str::markdown('# Taylor <b>Otwell</b>', [\n"
"    'html_input' => 'strip',\n"
"]);\n"
"\n"
"// <h1>Taylor Otwell</h1>"
msgstr ""

#: ./docs/10.x/strings.md:692
#: ./docs/11.x/strings.md:808
#: ./docs/master/strings.md:693
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::markdown('Inject: <script>alert(\"Hello XSS!\");</script>', [\n"
"    'html_input' => 'strip',\n"
"    'allow_unsafe_links' => false,\n"
"]);\n"
"\n"
"// <p>Inject: alert(&quot;Hello XSS!&quot;);</p>"
msgstr ""

#: ./docs/10.x/strings.md:701
#: ./docs/11.x/strings.md:817
#: ./docs/master/strings.md:702
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-mask\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:702
#: ./docs/11.x/strings.md:818
#: ./docs/master/strings.md:703
msgid "`Str::mask()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:704
#: ./docs/11.x/strings.md:820
#: ./docs/master/strings.md:705
msgid "The `Str::mask` method masks a portion of a string with a repeated character, and may be used to obfuscate segments of strings such as email addresses and phone numbers:"
msgstr ""

#: ./docs/10.x/strings.md:706
#: ./docs/11.x/strings.md:822
#: ./docs/master/strings.md:707
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::mask('taylor@example.com', '*', 3);\n"
"\n"
"// tay***************"
msgstr ""

#: ./docs/10.x/strings.md:712
#: ./docs/11.x/strings.md:828
#: ./docs/master/strings.md:713
msgid "If needed, you provide a negative number as the third argument to the `mask` method, which will instruct the method to begin masking at the given distance from the end of the string:"
msgstr ""

#: ./docs/10.x/strings.md:714
#: ./docs/11.x/strings.md:830
#: ./docs/master/strings.md:715
msgid ""
"$string = Str::mask('taylor@example.com', '*', -15, 3);\n"
"\n"
"// tay***@example.com"
msgstr ""

#: ./docs/10.x/strings.md:718
#: ./docs/11.x/strings.md:834
#: ./docs/master/strings.md:719
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-ordered-uuid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:719
#: ./docs/11.x/strings.md:835
#: ./docs/master/strings.md:720
msgid "`Str::orderedUuid()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:721
#: ./docs/11.x/strings.md:837
#: ./docs/master/strings.md:722
msgid "The `Str::orderedUuid` method generates a \"timestamp first\" UUID that may be efficiently stored in an indexed database column. Each UUID that is generated using this method will be sorted after UUIDs previously generated using the method:"
msgstr ""

#: ./docs/10.x/strings.md:723
#: ./docs/11.x/strings.md:839
#: ./docs/master/strings.md:724
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return (string) Str::orderedUuid();"
msgstr ""

#: ./docs/10.x/strings.md:727
#: ./docs/11.x/strings.md:843
#: ./docs/master/strings.md:728
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-padboth\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:728
#: ./docs/11.x/strings.md:844
#: ./docs/master/strings.md:729
msgid "`Str::padBoth()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:730
#: ./docs/11.x/strings.md:846
#: ./docs/master/strings.md:731
msgid "The `Str::padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches a desired length:"
msgstr ""

#: ./docs/10.x/strings.md:732
#: ./docs/11.x/strings.md:848
#: ./docs/master/strings.md:733
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::padBoth('James', 10, '_');\n"
"\n"
"// '__James___'\n"
"\n"
"$padded = Str::padBoth('James', 10);\n"
"\n"
"// '  James   '"
msgstr ""

#: ./docs/10.x/strings.md:742
#: ./docs/11.x/strings.md:858
#: ./docs/master/strings.md:743
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-padleft\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:743
#: ./docs/11.x/strings.md:859
#: ./docs/master/strings.md:744
msgid "`Str::padLeft()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:745
#: ./docs/11.x/strings.md:861
#: ./docs/master/strings.md:746
msgid "The `Str::padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches a desired length:"
msgstr ""

#: ./docs/10.x/strings.md:747
#: ./docs/11.x/strings.md:863
#: ./docs/master/strings.md:748
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::padLeft('James', 10, '-=');\n"
"\n"
"// '-=-=-James'\n"
"\n"
"$padded = Str::padLeft('James', 10);\n"
"\n"
"// '     James'"
msgstr ""

#: ./docs/10.x/strings.md:757
#: ./docs/11.x/strings.md:873
#: ./docs/master/strings.md:758
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-padright\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:758
#: ./docs/11.x/strings.md:874
#: ./docs/master/strings.md:759
msgid "`Str::padRight()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:760
#: ./docs/11.x/strings.md:876
#: ./docs/master/strings.md:761
msgid "The `Str::padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches a desired length:"
msgstr ""

#: ./docs/10.x/strings.md:762
#: ./docs/11.x/strings.md:878
#: ./docs/master/strings.md:763
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::padRight('James', 10, '-');\n"
"\n"
"// 'James-----'\n"
"\n"
"$padded = Str::padRight('James', 10);\n"
"\n"
"// 'James     '"
msgstr ""

#: ./docs/11.x/strings.md:766
msgid ""
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n"
"\n"
"// The quick brown fox (...)"
msgstr ""

#: ./docs/11.x/strings.md:770
#: ./docs/11.x/strings.md:2138
msgid "If you would like to preserve complete words when truncating the string, you may utilize the `preserveWords` argument. When this argument is `true`, the string will be truncated to the nearest complete word boundary:"
msgstr ""

#: ./docs/10.x/strings.md:772
#: ./docs/11.x/strings.md:888
#: ./docs/master/strings.md:773
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-password\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:772
msgid ""
"$truncated = Str::limit('The quick brown fox', 12, preserveWords: true);\n"
"\n"
"// The quick..."
msgstr ""

#: ./docs/10.x/strings.md:773
#: ./docs/11.x/strings.md:889
#: ./docs/master/strings.md:774
msgid "`Str::password()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:775
#: ./docs/11.x/strings.md:891
#: ./docs/master/strings.md:776
msgid "The `Str::password` method may be used to generate a secure, random password of a given length. The password will consist of a combination of letters, numbers, symbols, and spaces. By default, passwords are 32 characters long:"
msgstr ""

#: ./docs/10.x/strings.md:777
#: ./docs/11.x/strings.md:893
#: ./docs/master/strings.md:778
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$password = Str::password();\n"
"\n"
"// 'EbJo2vE-AS:U,$%_gkrV4n,q~1xy/-_4'\n"
"\n"
"$password = Str::password(12);\n"
"\n"
"// 'qwuar>#V|i]N'"
msgstr ""

#: ./docs/10.x/strings.md:787
#: ./docs/11.x/strings.md:903
#: ./docs/master/strings.md:788
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-plural\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:788
#: ./docs/11.x/strings.md:904
#: ./docs/master/strings.md:789
msgid "`Str::plural()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:790
#: ./docs/11.x/strings.md:906
#: ./docs/master/strings.md:791
msgid "The `Str::plural` method converts a singular word string to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: ./docs/10.x/strings.md:792
#: ./docs/11.x/strings.md:908
#: ./docs/master/strings.md:793
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::plural('car');\n"
"\n"
"// cars\n"
"\n"
"$plural = Str::plural('child');\n"
"\n"
"// children"
msgstr ""

#: ./docs/10.x/strings.md:802
#: ./docs/10.x/strings.md:829
#: ./docs/10.x/strings.md:2127
#: ./docs/11.x/strings.md:918
#: ./docs/11.x/strings.md:945
#: ./docs/11.x/strings.md:2347
#: ./docs/master/strings.md:803
#: ./docs/master/strings.md:830
#: ./docs/master/strings.md:2128
msgid "You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:"
msgstr ""

#: ./docs/10.x/strings.md:804
#: ./docs/11.x/strings.md:920
#: ./docs/master/strings.md:805
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::plural('child', 2);\n"
"\n"
"// children\n"
"\n"
"$singular = Str::plural('child', 1);\n"
"\n"
"// child"
msgstr ""

#: ./docs/10.x/strings.md:814
#: ./docs/11.x/strings.md:930
#: ./docs/master/strings.md:815
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-plural-studly\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:815
#: ./docs/11.x/strings.md:931
#: ./docs/master/strings.md:816
msgid "`Str::pluralStudly()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:817
#: ./docs/11.x/strings.md:933
#: ./docs/master/strings.md:818
msgid "The `Str::pluralStudly` method converts a singular word string formatted in studly caps case to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: ./docs/10.x/strings.md:819
#: ./docs/11.x/strings.md:935
#: ./docs/master/strings.md:820
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::pluralStudly('VerifiedHuman');\n"
"\n"
"// VerifiedHumans\n"
"\n"
"$plural = Str::pluralStudly('UserFeedback');\n"
"\n"
"// UserFeedback"
msgstr ""

#: ./docs/10.x/strings.md:831
#: ./docs/11.x/strings.md:947
#: ./docs/master/strings.md:832
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::pluralStudly('VerifiedHuman', 2);\n"
"\n"
"// VerifiedHumans\n"
"\n"
"$singular = Str::pluralStudly('VerifiedHuman', 1);\n"
"\n"
"// VerifiedHuman"
msgstr ""

#: ./docs/10.x/strings.md:841
#: ./docs/11.x/strings.md:957
#: ./docs/master/strings.md:842
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-position\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:842
#: ./docs/11.x/strings.md:958
#: ./docs/master/strings.md:843
msgid "`Str::position()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:844
#: ./docs/11.x/strings.md:960
#: ./docs/master/strings.md:845
msgid "The `Str::position` method returns the position of the first occurrence of a substring in a string. If the substring does not exist in the given string, `false` is returned:"
msgstr ""

#: ./docs/10.x/strings.md:846
#: ./docs/11.x/strings.md:962
#: ./docs/master/strings.md:847
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$position = Str::position('Hello, World!', 'Hello');\n"
"\n"
"// 0\n"
"\n"
"$position = Str::position('Hello, World!', 'W');\n"
"\n"
"// 7"
msgstr ""

#: ./docs/10.x/strings.md:856
#: ./docs/11.x/strings.md:972
#: ./docs/master/strings.md:857
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-random\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:857
#: ./docs/11.x/strings.md:973
#: ./docs/master/strings.md:858
msgid "`Str::random()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:859
#: ./docs/11.x/strings.md:975
#: ./docs/master/strings.md:860
msgid "The `Str::random` method generates a random string of the specified length. This function uses PHP's `random_bytes` function:"
msgstr ""

#: ./docs/10.x/strings.md:861
#: ./docs/11.x/strings.md:977
#: ./docs/master/strings.md:862
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$random = Str::random(40);"
msgstr ""

#: ./docs/10.x/strings.md:865
#: ./docs/11.x/strings.md:981
#: ./docs/master/strings.md:866
msgid "During testing, it may be useful to \"fake\" the value that is returned by the `Str::random` method. To accomplish this, you may use the `createRandomStringsUsing` method:"
msgstr ""

#: ./docs/10.x/strings.md:867
#: ./docs/11.x/strings.md:983
#: ./docs/master/strings.md:868
msgid ""
"Str::createRandomStringsUsing(function () {\n"
"    return 'fake-random-string';\n"
"});"
msgstr ""

#: ./docs/10.x/strings.md:871
#: ./docs/11.x/strings.md:987
#: ./docs/master/strings.md:872
msgid "To instruct the `random` method to return to generating random strings normally, you may invoke the `createRandomStringsNormally` method:"
msgstr ""

#: ./docs/10.x/strings.md:873
#: ./docs/11.x/strings.md:989
#: ./docs/master/strings.md:874
msgid "Str::createRandomStringsNormally();"
msgstr ""

#: ./docs/10.x/strings.md:875
#: ./docs/11.x/strings.md:991
#: ./docs/master/strings.md:876
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-remove\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:876
#: ./docs/11.x/strings.md:992
#: ./docs/master/strings.md:877
msgid "`Str::remove()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:878
#: ./docs/11.x/strings.md:994
#: ./docs/master/strings.md:879
msgid "The `Str::remove` method removes the given value or array of values from the string:"
msgstr ""

#: ./docs/10.x/strings.md:880
#: ./docs/11.x/strings.md:996
#: ./docs/master/strings.md:881
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'Peter Piper picked a peck of pickled peppers.';\n"
"\n"
"$removed = Str::remove('e', $string);\n"
"\n"
"// Ptr Pipr pickd a pck of pickld ppprs."
msgstr ""

#: ./docs/10.x/strings.md:888
#: ./docs/11.x/strings.md:1004
#: ./docs/master/strings.md:889
msgid "You may also pass `false` as a third argument to the `remove` method to ignore case when removing strings."
msgstr ""

#: ./docs/10.x/strings.md:890
#: ./docs/11.x/strings.md:1006
#: ./docs/master/strings.md:891
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-repeat\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:891
#: ./docs/11.x/strings.md:1007
#: ./docs/master/strings.md:892
msgid "`Str::repeat()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:893
#: ./docs/11.x/strings.md:1009
#: ./docs/master/strings.md:894
msgid "The `Str::repeat` method repeats the given string:"
msgstr ""

#: ./docs/10.x/strings.md:895
#: ./docs/11.x/strings.md:1011
#: ./docs/master/strings.md:896
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'a';\n"
"\n"
"$repeat = Str::repeat($string, 5);\n"
"\n"
"// aaaaa"
msgstr ""

#: ./docs/10.x/strings.md:905
#: ./docs/11.x/strings.md:1021
#: ./docs/master/strings.md:906
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:906
#: ./docs/11.x/strings.md:1022
#: ./docs/master/strings.md:907
msgid "`Str::replace()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:908
#: ./docs/11.x/strings.md:1024
#: ./docs/master/strings.md:909
msgid "The `Str::replace` method replaces a given string within the string:"
msgstr ""

#: ./docs/10.x/strings.md:910
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'Laravel 8.x';\n"
"\n"
"$replaced = Str::replace('8.x', '9.x', $string);\n"
"\n"
"// Laravel 9.x"
msgstr ""

#: ./docs/10.x/strings.md:918
#: ./docs/10.x/strings.md:2202
#: ./docs/11.x/strings.md:1034
#: ./docs/11.x/strings.md:2422
#: ./docs/master/strings.md:919
#: ./docs/master/strings.md:2203
msgid "The `replace` method also accepts a `caseSensitive` argument. By default, the `replace` method is case sensitive:"
msgstr ""

#: ./docs/10.x/strings.md:920
#: ./docs/11.x/strings.md:1036
#: ./docs/master/strings.md:921
msgid "Str::replace('Framework', 'Laravel', caseSensitive: false);"
msgstr ""

#: ./docs/10.x/strings.md:922
#: ./docs/11.x/strings.md:1038
#: ./docs/master/strings.md:923
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace-array\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:923
#: ./docs/11.x/strings.md:1039
#: ./docs/master/strings.md:924
msgid "`Str::replaceArray()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:925
#: ./docs/11.x/strings.md:1041
#: ./docs/master/strings.md:926
msgid "The `Str::replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#: ./docs/10.x/strings.md:927
#: ./docs/11.x/strings.md:1043
#: ./docs/master/strings.md:928
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'The event will take place between ? and ?';\n"
"\n"
"$replaced = Str::replaceArray('?', ['8:30', '9:00'], $string);\n"
"\n"
"// The event will take place between 8:30 and 9:00"
msgstr ""

#: ./docs/10.x/strings.md:935
#: ./docs/11.x/strings.md:1051
#: ./docs/master/strings.md:936
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace-first\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:936
#: ./docs/11.x/strings.md:1052
#: ./docs/master/strings.md:937
msgid "`Str::replaceFirst()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:938
#: ./docs/11.x/strings.md:1054
#: ./docs/master/strings.md:939
msgid "The `Str::replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:940
#: ./docs/11.x/strings.md:1056
#: ./docs/master/strings.md:941
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceFirst('the', 'a', 'the quick brown fox jumps over the lazy dog');\n"
"\n"
"// a quick brown fox jumps over the lazy dog"
msgstr ""

#: ./docs/10.x/strings.md:946
#: ./docs/11.x/strings.md:1062
#: ./docs/master/strings.md:947
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace-last\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:947
#: ./docs/11.x/strings.md:1063
#: ./docs/master/strings.md:948
msgid "`Str::replaceLast()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:949
#: ./docs/11.x/strings.md:1065
#: ./docs/master/strings.md:950
msgid "The `Str::replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:951
#: ./docs/11.x/strings.md:1067
#: ./docs/master/strings.md:952
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceLast('the', 'a', 'the quick brown fox jumps over the lazy dog');\n"
"\n"
"// the quick brown fox jumps over a lazy dog"
msgstr ""

#: ./docs/10.x/strings.md:957
#: ./docs/11.x/strings.md:1073
#: ./docs/master/strings.md:958
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace-matches\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:958
#: ./docs/11.x/strings.md:1074
#: ./docs/master/strings.md:959
msgid "`Str::replaceMatches()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:960
#: ./docs/11.x/strings.md:1076
#: ./docs/master/strings.md:961
msgid "The `Str::replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string:"
msgstr ""

#: ./docs/10.x/strings.md:962
#: ./docs/11.x/strings.md:1078
#: ./docs/master/strings.md:963
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceMatches(\n"
"    pattern: '/[^A-Za-z0-9]++/',\n"
"    replace: '',\n"
"    subject: '(+1) 501-555-1000'\n"
")\n"
"\n"
"// '15015551000'"
msgstr ""

#: ./docs/10.x/strings.md:972
#: ./docs/10.x/strings.md:2254
#: ./docs/11.x/strings.md:1088
#: ./docs/11.x/strings.md:2474
#: ./docs/master/strings.md:973
#: ./docs/master/strings.md:2255
msgid "The `replaceMatches` method also accepts a closure that will be invoked with each portion of the string matching the given pattern, allowing you to perform the replacement logic within the closure and return the replaced value:"
msgstr ""

#: ./docs/10.x/strings.md:974
#: ./docs/11.x/strings.md:1090
#: ./docs/master/strings.md:975
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceMatches('/\\d/', function (array $matches) {\n"
"    return '['.$matches[0].']';\n"
"}, '123');\n"
"\n"
"// '[1][2][3]'"
msgstr ""

#: ./docs/10.x/strings.md:982
#: ./docs/11.x/strings.md:1098
#: ./docs/master/strings.md:983
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace-start\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:983
#: ./docs/11.x/strings.md:1099
#: ./docs/master/strings.md:984
msgid "`Str::replaceStart()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:985
#: ./docs/11.x/strings.md:1101
#: ./docs/master/strings.md:986
msgid "The `Str::replaceStart` method replaces the first occurrence of the given value only if the value appears at the start of the string:"
msgstr ""

#: ./docs/10.x/strings.md:987
#: ./docs/11.x/strings.md:1103
#: ./docs/master/strings.md:988
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceStart('Hello', 'Laravel', 'Hello World');\n"
"\n"
"// Laravel World\n"
"\n"
"$replaced = Str::replaceStart('World', 'Laravel', 'Hello World');\n"
"\n"
"// Hello World"
msgstr ""

#: ./docs/10.x/strings.md:997
#: ./docs/11.x/strings.md:1113
#: ./docs/master/strings.md:998
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-replace-end\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:998
#: ./docs/11.x/strings.md:1114
#: ./docs/master/strings.md:999
msgid "`Str::replaceEnd()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1000
#: ./docs/11.x/strings.md:1116
#: ./docs/master/strings.md:1001
msgid "The `Str::replaceEnd` method replaces the last occurrence of the given value only if the value appears at the end of the string:"
msgstr ""

#: ./docs/10.x/strings.md:1002
#: ./docs/11.x/strings.md:1118
#: ./docs/master/strings.md:1003
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceEnd('World', 'Laravel', 'Hello World');\n"
"\n"
"// Hello Laravel\n"
"\n"
"$replaced = Str::replaceEnd('Hello', 'Laravel', 'Hello World');\n"
"\n"
"// Hello World"
msgstr ""

#: ./docs/10.x/strings.md:1012
#: ./docs/11.x/strings.md:1128
#: ./docs/master/strings.md:1013
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-reverse\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1013
#: ./docs/11.x/strings.md:1129
#: ./docs/master/strings.md:1014
msgid "`Str::reverse()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1015
#: ./docs/11.x/strings.md:1131
#: ./docs/master/strings.md:1016
msgid "The `Str::reverse` method reverses the given string:"
msgstr ""

#: ./docs/10.x/strings.md:1017
#: ./docs/11.x/strings.md:1133
#: ./docs/master/strings.md:1018
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$reversed = Str::reverse('Hello World');\n"
"\n"
"// dlroW olleH"
msgstr ""

#: ./docs/10.x/strings.md:1023
#: ./docs/11.x/strings.md:1139
#: ./docs/master/strings.md:1024
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-singular\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1024
#: ./docs/11.x/strings.md:1140
#: ./docs/master/strings.md:1025
msgid "`Str::singular()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1026
#: ./docs/11.x/strings.md:1142
#: ./docs/master/strings.md:1027
msgid "The `Str::singular` method converts a string to its singular form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: ./docs/11.x/strings.md:1026
#: ./docs/master/strings.md:911
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'Laravel 10.x';\n"
"\n"
"$replaced = Str::replace('10.x', '11.x', $string);\n"
"\n"
"// Laravel 11.x"
msgstr ""

#: ./docs/10.x/strings.md:1028
#: ./docs/11.x/strings.md:1144
#: ./docs/master/strings.md:1029
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$singular = Str::singular('cars');\n"
"\n"
"// car\n"
"\n"
"$singular = Str::singular('children');\n"
"\n"
"// child"
msgstr ""

#: ./docs/10.x/strings.md:1038
#: ./docs/11.x/strings.md:1154
#: ./docs/master/strings.md:1039
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-slug\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1039
#: ./docs/11.x/strings.md:1155
#: ./docs/master/strings.md:1040
msgid "`Str::slug()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1041
#: ./docs/11.x/strings.md:1157
#: ./docs/master/strings.md:1042
msgid "The `Str::slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#: ./docs/10.x/strings.md:1043
#: ./docs/11.x/strings.md:1159
#: ./docs/master/strings.md:1044
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slug = Str::slug('Laravel 5 Framework', '-');\n"
"\n"
"// laravel-5-framework"
msgstr ""

#: ./docs/10.x/strings.md:1049
#: ./docs/11.x/strings.md:1165
#: ./docs/master/strings.md:1050
#~ msgctxt "P"
#~ msgid "<a name=\"method-snake-case\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1050
#: ./docs/11.x/strings.md:1166
#: ./docs/master/strings.md:1051
msgid "`Str::snake()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1052
#: ./docs/11.x/strings.md:1168
#: ./docs/master/strings.md:1053
msgid "The `Str::snake` method converts the given string to `snake_case`:"
msgstr ""

#: ./docs/10.x/strings.md:1054
#: ./docs/11.x/strings.md:1170
#: ./docs/master/strings.md:1055
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::snake('fooBar');\n"
"\n"
"// foo_bar\n"
"\n"
"$converted = Str::snake('fooBar', '-');\n"
"\n"
"// foo-bar"
msgstr ""

#: ./docs/10.x/strings.md:1064
#: ./docs/11.x/strings.md:1180
#: ./docs/master/strings.md:1065
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-squish\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1065
#: ./docs/11.x/strings.md:1181
#: ./docs/master/strings.md:1066
msgid "`Str::squish()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1067
#: ./docs/11.x/strings.md:1183
#: ./docs/master/strings.md:1068
msgid "The `Str::squish` method removes all extraneous white space from a string, including extraneous white space between words:"
msgstr ""

#: ./docs/10.x/strings.md:1069
#: ./docs/11.x/strings.md:1185
#: ./docs/master/strings.md:1070
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::squish('    laravel    framework    ');\n"
"\n"
"// laravel framework"
msgstr ""

#: ./docs/10.x/strings.md:1075
#: ./docs/11.x/strings.md:1191
#: ./docs/master/strings.md:1076
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-start\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1076
#: ./docs/11.x/strings.md:1192
#: ./docs/master/strings.md:1077
msgid "`Str::start()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1078
#: ./docs/11.x/strings.md:1194
#: ./docs/master/strings.md:1079
msgid "The `Str::start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#: ./docs/10.x/strings.md:1080
#: ./docs/11.x/strings.md:1196
#: ./docs/master/strings.md:1081
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::start('this/string', '/');\n"
"\n"
"// /this/string\n"
"\n"
"$adjusted = Str::start('/this/string', '/');\n"
"\n"
"// /this/string"
msgstr ""

#: ./docs/10.x/strings.md:1090
#: ./docs/11.x/strings.md:1206
#: ./docs/master/strings.md:1091
#~ msgctxt "P"
#~ msgid "<a name=\"method-starts-with\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1091
#: ./docs/11.x/strings.md:1207
#: ./docs/master/strings.md:1092
msgid "`Str::startsWith()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1093
#: ./docs/11.x/strings.md:1209
#: ./docs/master/strings.md:1094
msgid "The `Str::startsWith` method determines if the given string begins with the given value:"
msgstr ""

#: ./docs/10.x/strings.md:1095
#: ./docs/11.x/strings.md:1211
#: ./docs/master/strings.md:1096
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::startsWith('This is my name', 'This');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1101
#: ./docs/11.x/strings.md:1217
#: ./docs/master/strings.md:1102
msgid "If an array of possible values is passed, the `startsWith` method will return `true` if the string begins with any of the given values:"
msgstr ""

#: ./docs/10.x/strings.md:1103
#: ./docs/11.x/strings.md:1219
#: ./docs/master/strings.md:1104
msgid ""
"$result = Str::startsWith('This is my name', ['This', 'That', 'There']);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1107
#: ./docs/11.x/strings.md:1223
#: ./docs/master/strings.md:1108
#~ msgctxt "P"
#~ msgid "<a name=\"method-studly-case\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1108
#: ./docs/11.x/strings.md:1224
#: ./docs/master/strings.md:1109
msgid "`Str::studly()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1110
#: ./docs/11.x/strings.md:1226
#: ./docs/master/strings.md:1111
msgid "The `Str::studly` method converts the given string to `StudlyCase`:"
msgstr ""

#: ./docs/10.x/strings.md:1112
#: ./docs/11.x/strings.md:1228
#: ./docs/master/strings.md:1113
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::studly('foo_bar');\n"
"\n"
"// FooBar"
msgstr ""

#: ./docs/10.x/strings.md:1118
#: ./docs/11.x/strings.md:1234
#: ./docs/master/strings.md:1119
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-substr\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1119
#: ./docs/11.x/strings.md:1235
#: ./docs/master/strings.md:1120
msgid "`Str::substr()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1121
#: ./docs/11.x/strings.md:1237
#: ./docs/master/strings.md:1122
msgid "The `Str::substr` method returns the portion of string specified by the start and length parameters:"
msgstr ""

#: ./docs/10.x/strings.md:1123
#: ./docs/11.x/strings.md:1239
#: ./docs/master/strings.md:1124
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::substr('The Laravel Framework', 4, 7);\n"
"\n"
"// Laravel"
msgstr ""

#: ./docs/10.x/strings.md:1129
#: ./docs/11.x/strings.md:1245
#: ./docs/master/strings.md:1130
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-substrcount\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1130
#: ./docs/11.x/strings.md:1246
#: ./docs/master/strings.md:1131
msgid "`Str::substrCount()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1132
#: ./docs/11.x/strings.md:1248
#: ./docs/master/strings.md:1133
msgid "The `Str::substrCount` method returns the number of occurrences of a given value in the given string:"
msgstr ""

#: ./docs/10.x/strings.md:1134
#: ./docs/11.x/strings.md:1250
#: ./docs/master/strings.md:1135
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$count = Str::substrCount('If you like ice cream, you will like snow cones.', 'like');\n"
"\n"
"// 2"
msgstr ""

#: ./docs/10.x/strings.md:1140
#: ./docs/11.x/strings.md:1256
#: ./docs/master/strings.md:1141
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-substrreplace\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1141
#: ./docs/11.x/strings.md:1257
#: ./docs/master/strings.md:1142
msgid "`Str::substrReplace()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1143
#: ./docs/11.x/strings.md:1259
#: ./docs/master/strings.md:1144
msgid "The `Str::substrReplace` method replaces text within a portion of a string, starting at the position specified by the third argument and replacing the number of characters specified by the fourth argument. Passing `0` to the method's fourth argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: ./docs/10.x/strings.md:1145
#: ./docs/11.x/strings.md:1261
#: ./docs/master/strings.md:1146
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::substrReplace('1300', ':', 2);\n"
"// 13:\n"
"\n"
"$result = Str::substrReplace('1300', ':', 2, 0);\n"
"// 13:00"
msgstr ""

#: ./docs/10.x/strings.md:1153
#: ./docs/11.x/strings.md:1269
#: ./docs/master/strings.md:1154
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-swap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1154
#: ./docs/11.x/strings.md:1270
#: ./docs/master/strings.md:1155
msgid "`Str::swap()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1156
#: ./docs/11.x/strings.md:1272
#: ./docs/master/strings.md:1157
msgid "The `Str::swap` method replaces multiple values in the given string using PHP's `strtr` function:"
msgstr ""

#: ./docs/10.x/strings.md:1158
#: ./docs/11.x/strings.md:1274
#: ./docs/master/strings.md:1159
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::swap([\n"
"    'Tacos' => 'Burritos',\n"
"    'great' => 'fantastic',\n"
"], 'Tacos are great!');\n"
"\n"
"// Burritos are fantastic!"
msgstr ""

#: ./docs/10.x/strings.md:1167
#: ./docs/11.x/strings.md:1283
#: ./docs/master/strings.md:1168
#~ msgctxt "P"
#~ msgid "<a name=\"method-take\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1168
#: ./docs/11.x/strings.md:1284
#: ./docs/master/strings.md:1169
msgid "`Str::take()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1170
#: ./docs/11.x/strings.md:1286
#: ./docs/master/strings.md:1171
msgid "The `Str::take` method returns a specified number of characters from the beginning of a string:"
msgstr ""

#: ./docs/10.x/strings.md:1172
#: ./docs/11.x/strings.md:1288
#: ./docs/master/strings.md:1173
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$taken = Str::take('Build something amazing!', 5);\n"
"\n"
"// Build"
msgstr ""

#: ./docs/10.x/strings.md:1178
#: ./docs/11.x/strings.md:1294
#: ./docs/master/strings.md:1179
#~ msgctxt "P"
#~ msgid "<a name=\"method-title-case\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1179
#: ./docs/11.x/strings.md:1295
#: ./docs/master/strings.md:1180
msgid "`Str::title()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1181
#: ./docs/11.x/strings.md:1297
#: ./docs/master/strings.md:1182
msgid "The `Str::title` method converts the given string to `Title Case`:"
msgstr ""

#: ./docs/10.x/strings.md:1183
#: ./docs/11.x/strings.md:1299
#: ./docs/master/strings.md:1184
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::title('a nice title uses the correct case');\n"
"\n"
"// A Nice Title Uses The Correct Case"
msgstr ""

#: ./docs/10.x/strings.md:1189
#: ./docs/11.x/strings.md:1305
#: ./docs/master/strings.md:1190
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-to-base64\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1190
#: ./docs/11.x/strings.md:1306
#: ./docs/master/strings.md:1191
msgid "`Str::toBase64()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1192
#: ./docs/11.x/strings.md:1308
#: ./docs/master/strings.md:1193
msgid "The `Str::toBase64` method converts the given string to Base64:"
msgstr ""

#: ./docs/10.x/strings.md:1194
#: ./docs/11.x/strings.md:1310
#: ./docs/master/strings.md:1195
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$base64 = Str::toBase64('Laravel');\n"
"\n"
"// TGFyYXZlbA=="
msgstr ""

#: ./docs/10.x/strings.md:1200
#: ./docs/11.x/strings.md:1316
#: ./docs/master/strings.md:1201
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-to-html-string\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1201
#: ./docs/11.x/strings.md:1317
#: ./docs/master/strings.md:1202
msgid "`Str::toHtmlString()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1203
#: ./docs/11.x/strings.md:1319
#: ./docs/master/strings.md:1204
msgid "The `Str::toHtmlString` method converts the string instance to an instance of `Illuminate\\Support\\HtmlString`, which may be displayed in Blade templates:"
msgstr ""

#: ./docs/10.x/strings.md:1205
#: ./docs/11.x/strings.md:1321
#: ./docs/master/strings.md:1206
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$htmlString = Str::of('Nuno Maduro')->toHtmlString();"
msgstr ""

#: ./docs/10.x/strings.md:1209
#: ./docs/11.x/strings.md:1369
#: ./docs/master/strings.md:1210
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-ucfirst\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1210
#: ./docs/11.x/strings.md:1370
#: ./docs/master/strings.md:1211
msgid "`Str::ucfirst()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1212
#: ./docs/11.x/strings.md:1372
#: ./docs/master/strings.md:1213
msgid "The `Str::ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#: ./docs/10.x/strings.md:1214
#: ./docs/11.x/strings.md:1374
#: ./docs/master/strings.md:1215
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::ucfirst('foo bar');\n"
"\n"
"// Foo bar"
msgstr ""

#: ./docs/10.x/strings.md:1220
#: ./docs/11.x/strings.md:1380
#: ./docs/master/strings.md:1221
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-ucsplit\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1221
#: ./docs/11.x/strings.md:1381
#: ./docs/master/strings.md:1222
msgid "`Str::ucsplit()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1223
#: ./docs/11.x/strings.md:1383
#: ./docs/master/strings.md:1224
msgid "The `Str::ucsplit` method splits the given string into an array by uppercase characters:"
msgstr ""

#: ./docs/10.x/strings.md:1225
#: ./docs/11.x/strings.md:1385
#: ./docs/master/strings.md:1226
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$segments = Str::ucsplit('FooBar');\n"
"\n"
"// [0 => 'Foo', 1 => 'Bar']"
msgstr ""

#: ./docs/10.x/strings.md:1231
#: ./docs/11.x/strings.md:1391
#: ./docs/master/strings.md:1232
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-upper\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1232
#: ./docs/11.x/strings.md:1392
#: ./docs/master/strings.md:1233
msgid "`Str::upper()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1234
#: ./docs/11.x/strings.md:1394
#: ./docs/master/strings.md:1235
msgid "The `Str::upper` method converts the given string to uppercase:"
msgstr ""

#: ./docs/10.x/strings.md:1236
#: ./docs/11.x/strings.md:1396
#: ./docs/master/strings.md:1237
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::upper('laravel');\n"
"\n"
"// LARAVEL"
msgstr ""

#: ./docs/10.x/strings.md:1242
#: ./docs/11.x/strings.md:1402
#: ./docs/master/strings.md:1243
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-ulid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1243
#: ./docs/11.x/strings.md:1403
#: ./docs/master/strings.md:1244
msgid "`Str::ulid()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1245
#: ./docs/11.x/strings.md:1405
#: ./docs/master/strings.md:1246
msgid "The `Str::ulid` method generates a ULID, which is a compact, time-ordered unique identifier:"
msgstr ""

#: ./docs/10.x/strings.md:1247
#: ./docs/11.x/strings.md:1407
#: ./docs/master/strings.md:1248
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return (string) Str::ulid();\n"
"\n"
"// 01gd6r360bp37zj17nxb55yv40"
msgstr ""

#: ./docs/10.x/strings.md:1253
#: ./docs/11.x/strings.md:1413
#: ./docs/master/strings.md:1254
msgid "If you would like to retrieve a `Illuminate\\Support\\Carbon` date instance representing the date and time that a given ULID was created, you may use the `createFromId` method provided by Laravel's Carbon integration:"
msgstr ""

#: ./docs/10.x/strings.md:1255
#: ./docs/11.x/strings.md:1415
#: ./docs/master/strings.md:1256
msgid ""
"use Illuminate\\Support\\Carbon;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"$date = Carbon::createFromId((string) Str::ulid());"
msgstr ""

#: ./docs/10.x/strings.md:1262
#: ./docs/11.x/strings.md:1422
#: ./docs/master/strings.md:1263
msgid "During testing, it may be useful to \"fake\" the value that is returned by the `Str::ulid` method. To accomplish this, you may use the `createUlidsUsing` method:"
msgstr ""

#: ./docs/10.x/strings.md:1264
#: ./docs/11.x/strings.md:1424
#: ./docs/master/strings.md:1265
msgid ""
"use Symfony\\Component\\Uid\\Ulid;\n"
"\n"
"Str::createUlidsUsing(function () {\n"
"    return new Ulid('01HRDBNHHCKNW2AK4Z29SN82T9');\n"
"});"
msgstr ""

#: ./docs/10.x/strings.md:1270
#: ./docs/11.x/strings.md:1430
#: ./docs/master/strings.md:1271
msgid "To instruct the `ulid` method to return to generating ULIDs normally, you may invoke the `createUlidsNormally` method:"
msgstr ""

#: ./docs/10.x/strings.md:1272
#: ./docs/11.x/strings.md:1432
#: ./docs/master/strings.md:1273
msgid "Str::createUlidsNormally();"
msgstr ""

#: ./docs/10.x/strings.md:1274
#: ./docs/11.x/strings.md:1434
#: ./docs/master/strings.md:1275
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-unwrap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1275
#: ./docs/11.x/strings.md:1435
#: ./docs/master/strings.md:1276
msgid "`Str::unwrap()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1277
#: ./docs/11.x/strings.md:1437
#: ./docs/master/strings.md:1278
msgid "The `Str::unwrap` method removes the specified strings from the beginning and end of a given string:"
msgstr ""

#: ./docs/10.x/strings.md:1279
#: ./docs/11.x/strings.md:1439
#: ./docs/master/strings.md:1280
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::unwrap('-Laravel-', '-');\n"
"\n"
"// Laravel\n"
"\n"
"Str::unwrap('{framework: \"Laravel\"}', '{', '}');\n"
"\n"
"// framework: \"Laravel\""
msgstr ""

#: ./docs/10.x/strings.md:1289
#: ./docs/11.x/strings.md:1449
#: ./docs/master/strings.md:1290
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-uuid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1290
#: ./docs/11.x/strings.md:1450
#: ./docs/master/strings.md:1291
msgid "`Str::uuid()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1292
#: ./docs/11.x/strings.md:1452
#: ./docs/master/strings.md:1293
msgid "The `Str::uuid` method generates a UUID (version 4):"
msgstr ""

#: ./docs/10.x/strings.md:1294
#: ./docs/11.x/strings.md:1454
#: ./docs/master/strings.md:1295
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return (string) Str::uuid();"
msgstr ""

#: ./docs/10.x/strings.md:1298
#: ./docs/11.x/strings.md:1458
#: ./docs/master/strings.md:1299
msgid "During testing, it may be useful to \"fake\" the value that is returned by the `Str::uuid` method. To accomplish this, you may use the `createUuidsUsing` method:"
msgstr ""

#: ./docs/10.x/strings.md:1300
#: ./docs/11.x/strings.md:1460
#: ./docs/master/strings.md:1301
msgid ""
"use Ramsey\\Uuid\\Uuid;\n"
"\n"
"Str::createUuidsUsing(function () {\n"
"    return Uuid::fromString('eadbfeac-5258-45c2-bab7-ccb9b5ef74f9');\n"
"});"
msgstr ""

#: ./docs/10.x/strings.md:1306
#: ./docs/11.x/strings.md:1466
#: ./docs/master/strings.md:1307
msgid "To instruct the `uuid` method to return to generating UUIDs normally, you may invoke the `createUuidsNormally` method:"
msgstr ""

#: ./docs/10.x/strings.md:1308
#: ./docs/11.x/strings.md:1468
#: ./docs/master/strings.md:1309
msgid "Str::createUuidsNormally();"
msgstr ""

#: ./docs/10.x/strings.md:1310
#: ./docs/11.x/strings.md:1470
#: ./docs/master/strings.md:1311
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-word-count\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1311
#: ./docs/11.x/strings.md:1471
#: ./docs/master/strings.md:1312
msgid "`Str::wordCount()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1313
#: ./docs/11.x/strings.md:1473
#: ./docs/master/strings.md:1314
msgid "The `Str::wordCount` method returns the number of words that a string contains:"
msgstr ""

#: ./docs/10.x/strings.md:1315
#: ./docs/11.x/strings.md:1475
#: ./docs/master/strings.md:1316
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::wordCount('Hello, world!'); // 2"
msgstr ""

#: ./docs/10.x/strings.md:1321
#: ./docs/11.x/strings.md:1481
#: ./docs/master/strings.md:1322
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-word-wrap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1322
#: ./docs/11.x/strings.md:1482
#: ./docs/master/strings.md:1323
msgid "`Str::wordWrap()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1324
#: ./docs/11.x/strings.md:1484
#: ./docs/master/strings.md:1325
msgid "The `Str::wordWrap` method wraps a string to a given number of characters:"
msgstr ""

#: ./docs/11.x/strings.md:1325
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-transliterate\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1326
#: ./docs/11.x/strings.md:1486
#: ./docs/master/strings.md:1327
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$text = \"The quick brown fox jumped over the lazy dog.\"\n"
"\n"
"Str::wordWrap($text, characters: 20, break: \"<br />\\n\");\n"
"\n"
"/*\n"
"The quick brown fox<br />\n"
"jumped over the lazy<br />\n"
"dog.\n"
"*/"
msgstr ""

#: ./docs/11.x/strings.md:1326
msgid "`Str::transliterate()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1328
msgid "The `Str::transliterate` method will attempt to convert a given string into its closest ASCII representation:"
msgstr ""

#: ./docs/11.x/strings.md:1330
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$email = Str::transliterate('ⓣⓔⓢⓣ@ⓛⓐⓡⓐⓥⓔⓛ.ⓒⓞⓜ');\n"
"\n"
"// 'test@laravel.com'"
msgstr ""

#: ./docs/11.x/strings.md:1336
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-trim\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1337
msgid "`Str::trim()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1338
#: ./docs/11.x/strings.md:1498
#: ./docs/master/strings.md:1339
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-words\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1339
#: ./docs/11.x/strings.md:1499
#: ./docs/master/strings.md:1340
msgid "`Str::words()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1339
msgid "The `Str::trim` method strips whitespace (or other characters) from the beginning and end of the given string. Unlike PHP's native `trim` function, the `Str::trim` method also removes unicode whitespace characters:"
msgstr ""

#: ./docs/10.x/strings.md:1341
#: ./docs/11.x/strings.md:1501
#: ./docs/master/strings.md:1342
msgid "The `Str::words` method limits the number of words in a string. An additional string may be passed to this method via its third argument to specify which string should be appended to the end of the truncated string:"
msgstr ""

#: ./docs/11.x/strings.md:1341
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::trim(' foo bar ');\n"
"\n"
"// 'foo bar'"
msgstr ""

#: ./docs/10.x/strings.md:1343
#: ./docs/11.x/strings.md:1503
#: ./docs/master/strings.md:1344
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return Str::words('Perfectly balanced, as all things should be.', 3, ' >>>');\n"
"\n"
"// Perfectly balanced, as >>>"
msgstr ""

#: ./docs/11.x/strings.md:1347
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-ltrim\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1348
msgid "`Str::ltrim()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1349
#: ./docs/11.x/strings.md:1509
#: ./docs/master/strings.md:1350
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-wrap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1350
#: ./docs/11.x/strings.md:1510
#: ./docs/master/strings.md:1351
msgid "`Str::wrap()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1350
msgid "The `Str::ltrim` method strips whitespace (or other characters) from the beginning of the given string. Unlike PHP's native `ltrim` function, the `Str::ltrim` method also removes unicode whitespace characters:"
msgstr ""

#: ./docs/10.x/strings.md:1352
#: ./docs/11.x/strings.md:1512
#: ./docs/master/strings.md:1353
msgid "The `Str::wrap` method wraps the given string with an additional string or pair of strings:"
msgstr ""

#: ./docs/11.x/strings.md:1352
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::ltrim('  foo bar  ');\n"
"\n"
"// 'foo bar  '"
msgstr ""

#: ./docs/10.x/strings.md:1354
#: ./docs/11.x/strings.md:1514
#: ./docs/master/strings.md:1355
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::wrap('Laravel', '\"');\n"
"\n"
"// \"Laravel\"\n"
"\n"
"Str::wrap('is', before: 'This ', after: ' Laravel!');\n"
"\n"
"// This is Laravel!"
msgstr ""

#: ./docs/11.x/strings.md:1358
#~ msgctxt "P"
#~ msgid "<a name=\"method-str-rtrim\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1359
msgid "`Str::rtrim()` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1361
msgid "The `Str::rtrim` method strips whitespace (or other characters) from the end of the given string. Unlike PHP's native `rtrim` function, the `Str::rtrim` method also removes unicode whitespace characters:"
msgstr ""

#: ./docs/11.x/strings.md:1363
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::rtrim('  foo bar  ');\n"
"\n"
"// '  foo bar'"
msgstr ""

#: ./docs/10.x/strings.md:1364
#: ./docs/11.x/strings.md:1524
#: ./docs/master/strings.md:1365
#~ msgctxt "P"
#~ msgid "<a name=\"method-str\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1365
#: ./docs/11.x/strings.md:1525
#: ./docs/master/strings.md:1366
msgid "`str()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1367
#: ./docs/11.x/strings.md:1527
#: ./docs/master/strings.md:1368
msgid "The `str` function returns a new `Illuminate\\Support\\Stringable` instance of the given string. This function is equivalent to the `Str::of` method:"
msgstr ""

#: ./docs/10.x/strings.md:1369
#: ./docs/11.x/strings.md:1529
#: ./docs/master/strings.md:1370
msgid ""
"$string = str('Taylor')->append(' Otwell');\n"
"\n"
"// 'Taylor Otwell'"
msgstr ""

#: ./docs/10.x/strings.md:1373
#: ./docs/11.x/strings.md:1533
#: ./docs/master/strings.md:1374
msgid "If no argument is provided to the `str` function, the function returns an instance of `Illuminate\\Support\\Str`:"
msgstr ""

#: ./docs/10.x/strings.md:1375
#: ./docs/11.x/strings.md:1535
#: ./docs/master/strings.md:1376
msgid ""
"$snake = str()->snake('FooBar');\n"
"\n"
"// 'foo_bar'"
msgstr ""

#: ./docs/10.x/strings.md:1379
#: ./docs/11.x/strings.md:1539
#: ./docs/master/strings.md:1380
#~ msgctxt "P"
#~ msgid "<a name=\"method-trans\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1380
#: ./docs/11.x/strings.md:1540
#: ./docs/master/strings.md:1381
msgid "`trans()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1382
#: ./docs/11.x/strings.md:1542
#: ./docs/master/strings.md:1383
msgid "The `trans` function translates the given translation key using your [language files](/docs/{{version}}/localization):"
msgstr ""

#: ./docs/10.x/strings.md:1384
#: ./docs/11.x/strings.md:1544
#: ./docs/master/strings.md:1385
msgid "echo trans('messages.welcome');"
msgstr ""

#: ./docs/10.x/strings.md:1386
#: ./docs/11.x/strings.md:1546
#: ./docs/master/strings.md:1387
msgid "If the specified translation key does not exist, the `trans` function will return the given key. So, using the example above, the `trans` function would return `messages.welcome` if the translation key does not exist."
msgstr ""

#: ./docs/10.x/strings.md:1388
#: ./docs/11.x/strings.md:1548
#: ./docs/master/strings.md:1389
#~ msgctxt "P"
#~ msgid "<a name=\"method-trans-choice\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1389
#: ./docs/11.x/strings.md:1549
#: ./docs/master/strings.md:1390
msgid "`trans_choice()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1391
#: ./docs/11.x/strings.md:1551
#: ./docs/master/strings.md:1392
msgid "The `trans_choice` function translates the given translation key with inflection:"
msgstr ""

#: ./docs/10.x/strings.md:1393
#: ./docs/11.x/strings.md:1553
#: ./docs/master/strings.md:1394
msgid "echo trans_choice('messages.notifications', $unreadCount);"
msgstr ""

#: ./docs/10.x/strings.md:1395
#: ./docs/11.x/strings.md:1555
#: ./docs/master/strings.md:1396
msgid "If the specified translation key does not exist, the `trans_choice` function will return the given key. So, using the example above, the `trans_choice` function would return `messages.notifications` if the translation key does not exist."
msgstr ""

#: ./docs/10.x/strings.md:1397
#: ./docs/11.x/strings.md:1557
#: ./docs/master/strings.md:1398
#~ msgctxt "P"
#~ msgid "<a name=\"fluent-strings\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1400
#: ./docs/11.x/strings.md:1560
#: ./docs/master/strings.md:1401
msgid "Fluent strings provide a more fluent, object-oriented interface for working with string values, allowing you to chain multiple string operations together using a more readable syntax compared to traditional string operations."
msgstr ""

#: ./docs/10.x/strings.md:1402
#: ./docs/11.x/strings.md:1562
#: ./docs/master/strings.md:1403
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-after\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1403
#: ./docs/11.x/strings.md:1563
#: ./docs/master/strings.md:1404
msgid "`after` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1405
#: ./docs/11.x/strings.md:1565
#: ./docs/master/strings.md:1406
msgid "The `after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: ./docs/10.x/strings.md:1407
#: ./docs/11.x/strings.md:1567
#: ./docs/master/strings.md:1408
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('This is my name')->after('This is');\n"
"\n"
"// ' my name'"
msgstr ""

#: ./docs/10.x/strings.md:1413
#: ./docs/11.x/strings.md:1573
#: ./docs/master/strings.md:1414
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-after-last\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1414
#: ./docs/11.x/strings.md:1574
#: ./docs/master/strings.md:1415
msgid "`afterLast` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1416
#: ./docs/11.x/strings.md:1576
#: ./docs/master/strings.md:1417
msgid "The `afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: ./docs/10.x/strings.md:1418
#: ./docs/11.x/strings.md:1578
#: ./docs/master/strings.md:1419
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('App\\Http\\Controllers\\Controller')->afterLast('\\\\');\n"
"\n"
"// 'Controller'"
msgstr ""

#: ./docs/10.x/strings.md:1424
#: ./docs/11.x/strings.md:1584
#: ./docs/master/strings.md:1425
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-apa\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1425
#: ./docs/11.x/strings.md:1585
#: ./docs/master/strings.md:1426
msgid "`apa` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1427
#: ./docs/11.x/strings.md:1587
#: ./docs/master/strings.md:1428
msgid "The `apa` method converts the given string to title case following the [APA guidelines](https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case):"
msgstr ""

#: ./docs/10.x/strings.md:1429
#: ./docs/11.x/strings.md:1589
#: ./docs/master/strings.md:1430
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('a nice title uses the correct case')->apa();\n"
"\n"
"// A Nice Title Uses the Correct Case"
msgstr ""

#: ./docs/10.x/strings.md:1435
#: ./docs/11.x/strings.md:1595
#: ./docs/master/strings.md:1436
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-append\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1436
#: ./docs/11.x/strings.md:1596
#: ./docs/master/strings.md:1437
msgid "`append` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1438
#: ./docs/11.x/strings.md:1598
#: ./docs/master/strings.md:1439
msgid "The `append` method appends the given values to the string:"
msgstr ""

#: ./docs/10.x/strings.md:1440
#: ./docs/11.x/strings.md:1600
#: ./docs/master/strings.md:1441
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Taylor')->append(' Otwell');\n"
"\n"
"// 'Taylor Otwell'"
msgstr ""

#: ./docs/10.x/strings.md:1446
#: ./docs/11.x/strings.md:1606
#: ./docs/master/strings.md:1447
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-ascii\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1447
#: ./docs/11.x/strings.md:1607
#: ./docs/master/strings.md:1448
msgid "`ascii` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1449
#: ./docs/11.x/strings.md:1609
#: ./docs/master/strings.md:1450
msgid "The `ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#: ./docs/10.x/strings.md:1451
#: ./docs/11.x/strings.md:1611
#: ./docs/master/strings.md:1452
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('ü')->ascii();\n"
"\n"
"// 'u'"
msgstr ""

#: ./docs/10.x/strings.md:1457
#: ./docs/11.x/strings.md:1617
#: ./docs/master/strings.md:1458
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-basename\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1458
#: ./docs/11.x/strings.md:1618
#: ./docs/master/strings.md:1459
msgid "`basename` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1460
#: ./docs/11.x/strings.md:1620
#: ./docs/master/strings.md:1461
msgid "The `basename` method will return the trailing name component of the given string:"
msgstr ""

#: ./docs/10.x/strings.md:1462
#: ./docs/11.x/strings.md:1622
#: ./docs/master/strings.md:1463
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz')->basename();\n"
"\n"
"// 'baz'"
msgstr ""

#: ./docs/10.x/strings.md:1468
#: ./docs/11.x/strings.md:1628
#: ./docs/master/strings.md:1469
msgid "If needed, you may provide an \"extension\" that will be removed from the trailing component:"
msgstr ""

#: ./docs/10.x/strings.md:1470
#: ./docs/11.x/strings.md:1630
#: ./docs/master/strings.md:1471
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz.jpg')->basename('.jpg');\n"
"\n"
"// 'baz'"
msgstr ""

#: ./docs/10.x/strings.md:1476
#: ./docs/11.x/strings.md:1636
#: ./docs/master/strings.md:1477
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-before\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1477
#: ./docs/11.x/strings.md:1637
#: ./docs/master/strings.md:1478
msgid "`before` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1479
#: ./docs/11.x/strings.md:1639
#: ./docs/master/strings.md:1480
msgid "The `before` method returns everything before the given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:1481
#: ./docs/11.x/strings.md:1641
#: ./docs/master/strings.md:1482
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('This is my name')->before('my name');\n"
"\n"
"// 'This is '"
msgstr ""

#: ./docs/10.x/strings.md:1487
#: ./docs/11.x/strings.md:1647
#: ./docs/master/strings.md:1488
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-before-last\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1488
#: ./docs/11.x/strings.md:1648
#: ./docs/master/strings.md:1489
msgid "`beforeLast` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1490
#: ./docs/11.x/strings.md:1650
#: ./docs/master/strings.md:1491
msgid "The `beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:1492
#: ./docs/11.x/strings.md:1652
#: ./docs/master/strings.md:1493
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('This is my name')->beforeLast('is');\n"
"\n"
"// 'This '"
msgstr ""

#: ./docs/10.x/strings.md:1498
#: ./docs/11.x/strings.md:1658
#: ./docs/master/strings.md:1499
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-between\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1499
#: ./docs/11.x/strings.md:1659
#: ./docs/master/strings.md:1500
msgid "`between` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1501
#: ./docs/11.x/strings.md:1661
#: ./docs/master/strings.md:1502
msgid "The `between` method returns the portion of a string between two values:"
msgstr ""

#: ./docs/10.x/strings.md:1503
#: ./docs/11.x/strings.md:1663
#: ./docs/master/strings.md:1504
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('This is my name')->between('This', 'name');\n"
"\n"
"// ' is my '"
msgstr ""

#: ./docs/10.x/strings.md:1509
#: ./docs/11.x/strings.md:1669
#: ./docs/master/strings.md:1510
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-between-first\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1510
#: ./docs/11.x/strings.md:1670
#: ./docs/master/strings.md:1511
msgid "`betweenFirst` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1512
#: ./docs/11.x/strings.md:1672
#: ./docs/master/strings.md:1513
msgid "The `betweenFirst` method returns the smallest possible portion of a string between two values:"
msgstr ""

#: ./docs/10.x/strings.md:1514
#: ./docs/11.x/strings.md:1674
#: ./docs/master/strings.md:1515
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('[a] bc [d]')->betweenFirst('[', ']');\n"
"\n"
"// 'a'"
msgstr ""

#: ./docs/10.x/strings.md:1520
#: ./docs/11.x/strings.md:1680
#: ./docs/master/strings.md:1521
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-camel\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1521
#: ./docs/11.x/strings.md:1681
#: ./docs/master/strings.md:1522
msgid "`camel` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1523
#: ./docs/11.x/strings.md:1683
#: ./docs/master/strings.md:1524
msgid "The `camel` method converts the given string to `camelCase`:"
msgstr ""

#: ./docs/10.x/strings.md:1525
#: ./docs/11.x/strings.md:1685
#: ./docs/master/strings.md:1526
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('foo_bar')->camel();\n"
"\n"
"// 'fooBar'"
msgstr ""

#: ./docs/10.x/strings.md:1531
#: ./docs/11.x/strings.md:1691
#: ./docs/master/strings.md:1532
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-char-at\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1532
#: ./docs/11.x/strings.md:1692
#: ./docs/master/strings.md:1533
msgid "`charAt` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1534
#: ./docs/11.x/strings.md:1694
#: ./docs/master/strings.md:1535
msgid "The `charAt` method returns the character at the specified index. If the index is out of bounds, `false` is returned:"
msgstr ""

#: ./docs/10.x/strings.md:1536
#: ./docs/11.x/strings.md:1696
#: ./docs/master/strings.md:1537
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$character = Str::of('This is my name.')->charAt(6);\n"
"\n"
"// 's'"
msgstr ""

#: ./docs/10.x/strings.md:1542
#: ./docs/11.x/strings.md:1702
#: ./docs/master/strings.md:1543
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-class-basename\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1543
#: ./docs/11.x/strings.md:1703
#: ./docs/master/strings.md:1544
msgid "`classBasename` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1545
#: ./docs/11.x/strings.md:1705
#: ./docs/master/strings.md:1546
msgid "The `classBasename` method returns the class name of the given class with the class's namespace removed:"
msgstr ""

#: ./docs/10.x/strings.md:1547
#: ./docs/11.x/strings.md:1707
#: ./docs/master/strings.md:1548
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$class = Str::of('Foo\\Bar\\Baz')->classBasename();\n"
"\n"
"// 'Baz'"
msgstr ""

#: ./docs/10.x/strings.md:1553
#: ./docs/11.x/strings.md:1751
#: ./docs/master/strings.md:1554
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-contains\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1554
#: ./docs/11.x/strings.md:1752
#: ./docs/master/strings.md:1555
msgid "`contains` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1556
#: ./docs/master/strings.md:1557
msgid "The `contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#: ./docs/10.x/strings.md:1558
#: ./docs/11.x/strings.md:1756
#: ./docs/master/strings.md:1559
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::of('This is my name')->contains('my');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1566
#: ./docs/11.x/strings.md:1764
#: ./docs/master/strings.md:1567
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::of('This is my name')->contains(['my', 'foo']);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1572
#: ./docs/11.x/strings.md:1778
#: ./docs/master/strings.md:1573
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-contains-all\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1573
#: ./docs/11.x/strings.md:1779
#: ./docs/master/strings.md:1574
msgid "`containsAll` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1575
#: ./docs/11.x/strings.md:1781
#: ./docs/master/strings.md:1576
msgid "The `containsAll` method determines if the given string contains all of the values in the given array:"
msgstr ""

#: ./docs/10.x/strings.md:1577
#: ./docs/11.x/strings.md:1783
#: ./docs/master/strings.md:1578
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$containsAll = Str::of('This is my name')->containsAll(['my', 'name']);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1583
#: ./docs/11.x/strings.md:1816
#: ./docs/master/strings.md:1584
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-dirname\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1584
#: ./docs/11.x/strings.md:1817
#: ./docs/master/strings.md:1585
msgid "`dirname` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1586
#: ./docs/11.x/strings.md:1819
#: ./docs/master/strings.md:1587
msgid "The `dirname` method returns the parent directory portion of the given string:"
msgstr ""

#: ./docs/10.x/strings.md:1588
#: ./docs/11.x/strings.md:1821
#: ./docs/master/strings.md:1589
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz')->dirname();\n"
"\n"
"// '/foo/bar'"
msgstr ""

#: ./docs/10.x/strings.md:1594
#: ./docs/11.x/strings.md:1827
#: ./docs/master/strings.md:1595
msgid "If necessary, you may specify how many directory levels you wish to trim from the string:"
msgstr ""

#: ./docs/10.x/strings.md:1596
#: ./docs/11.x/strings.md:1829
#: ./docs/master/strings.md:1597
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz')->dirname(2);\n"
"\n"
"// '/foo'"
msgstr ""

#: ./docs/10.x/strings.md:1602
#: ./docs/11.x/strings.md:1869
#: ./docs/master/strings.md:1603
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-excerpt\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1603
#: ./docs/11.x/strings.md:1870
#: ./docs/master/strings.md:1604
msgid "`excerpt` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1605
#: ./docs/11.x/strings.md:1872
#: ./docs/master/strings.md:1606
msgid "The `excerpt` method extracts an excerpt from the string that matches the first instance of a phrase within that string:"
msgstr ""

#: ./docs/10.x/strings.md:1607
#: ./docs/11.x/strings.md:1874
#: ./docs/master/strings.md:1608
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::of('This is my name')->excerpt('my', [\n"
"    'radius' => 3\n"
"]);\n"
"\n"
"// '...is my na...'"
msgstr ""

#: ./docs/10.x/strings.md:1617
#: ./docs/11.x/strings.md:1884
#: ./docs/master/strings.md:1618
msgid "In addition, you may use the `omission` option to change the string that will be prepended and appended to the truncated string:"
msgstr ""

#: ./docs/10.x/strings.md:1619
#: ./docs/11.x/strings.md:1886
#: ./docs/master/strings.md:1620
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::of('This is my name')->excerpt('name', [\n"
"    'radius' => 3,\n"
"    'omission' => '(...) '\n"
"]);\n"
"\n"
"// '(...) my name'"
msgstr ""

#: ./docs/10.x/strings.md:1628
#: ./docs/11.x/strings.md:1835
#: ./docs/master/strings.md:1629
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-ends-with\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1629
#: ./docs/11.x/strings.md:1836
#: ./docs/master/strings.md:1630
msgid "`endsWith` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1631
#: ./docs/11.x/strings.md:1838
#: ./docs/master/strings.md:1632
msgid "The `endsWith` method determines if the given string ends with the given value:"
msgstr ""

#: ./docs/10.x/strings.md:1633
#: ./docs/11.x/strings.md:1840
#: ./docs/master/strings.md:1634
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('This is my name')->endsWith('name');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1641
#: ./docs/11.x/strings.md:1848
#: ./docs/master/strings.md:1642
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('This is my name')->endsWith(['name', 'foo']);\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('This is my name')->endsWith(['this', 'foo']);\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:1651
#: ./docs/11.x/strings.md:1858
#: ./docs/master/strings.md:1652
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-exactly\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1652
#: ./docs/11.x/strings.md:1859
#: ./docs/master/strings.md:1653
msgid "`exactly` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1654
#: ./docs/11.x/strings.md:1861
#: ./docs/master/strings.md:1655
msgid "The `exactly` method determines if the given string is an exact match with another string:"
msgstr ""

#: ./docs/10.x/strings.md:1656
#: ./docs/11.x/strings.md:1863
#: ./docs/master/strings.md:1657
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('Laravel')->exactly('Laravel');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1662
#: ./docs/11.x/strings.md:1895
#: ./docs/master/strings.md:1663
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-explode\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1663
#: ./docs/11.x/strings.md:1896
#: ./docs/master/strings.md:1664
msgid "`explode` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1665
#: ./docs/11.x/strings.md:1898
#: ./docs/master/strings.md:1666
msgid "The `explode` method splits the string by the given delimiter and returns a collection containing each section of the split string:"
msgstr ""

#: ./docs/10.x/strings.md:1667
#: ./docs/11.x/strings.md:1900
#: ./docs/master/strings.md:1668
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$collection = Str::of('foo bar baz')->explode(' ');\n"
"\n"
"// collect(['foo', 'bar', 'baz'])"
msgstr ""

#: ./docs/10.x/strings.md:1673
#: ./docs/11.x/strings.md:1906
#: ./docs/master/strings.md:1674
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-finish\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1674
#: ./docs/11.x/strings.md:1907
#: ./docs/master/strings.md:1675
msgid "`finish` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1676
#: ./docs/11.x/strings.md:1909
#: ./docs/master/strings.md:1677
msgid "The `finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#: ./docs/10.x/strings.md:1678
#: ./docs/11.x/strings.md:1911
#: ./docs/master/strings.md:1679
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::of('this/string')->finish('/');\n"
"\n"
"// this/string/\n"
"\n"
"$adjusted = Str::of('this/string/')->finish('/');\n"
"\n"
"// this/string/"
msgstr ""

#: ./docs/10.x/strings.md:1688
#: ./docs/11.x/strings.md:1921
#: ./docs/master/strings.md:1689
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-headline\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1689
#: ./docs/11.x/strings.md:1922
#: ./docs/master/strings.md:1690
msgid "`headline` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1691
#: ./docs/11.x/strings.md:1924
#: ./docs/master/strings.md:1692
msgid "The `headline` method will convert strings delimited by casing, hyphens, or underscores into a space delimited string with each word's first letter capitalized:"
msgstr ""

#: ./docs/10.x/strings.md:1693
#: ./docs/11.x/strings.md:1926
#: ./docs/master/strings.md:1694
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$headline = Str::of('taylor_otwell')->headline();\n"
"\n"
"// Taylor Otwell\n"
"\n"
"$headline = Str::of('EmailNotificationSent')->headline();\n"
"\n"
"// Email Notification Sent"
msgstr ""

#: ./docs/10.x/strings.md:1703
#: ./docs/11.x/strings.md:1936
#: ./docs/master/strings.md:1704
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-inline-markdown\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1704
#: ./docs/11.x/strings.md:1937
#: ./docs/master/strings.md:1705
msgid "`inlineMarkdown` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1706
#: ./docs/11.x/strings.md:1939
#: ./docs/master/strings.md:1707
msgid "The `inlineMarkdown` method converts GitHub flavored Markdown into inline HTML using [CommonMark](https://commonmark.thephpleague.com/). However, unlike the `markdown` method, it does not wrap all generated HTML in a block-level element:"
msgstr ""

#: ./docs/10.x/strings.md:1708
#: ./docs/11.x/strings.md:1941
#: ./docs/master/strings.md:1709
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::of('**Laravel**')->inlineMarkdown();\n"
"\n"
"// <strong>Laravel</strong>"
msgstr ""

#: ./docs/11.x/strings.md:1713
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-chop-start\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1714
msgid "`chopStart` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1716
msgid "The `chopStart` method removes the first occurrence of the given value only if the value appears at the start of the string:"
msgstr ""

#: ./docs/10.x/strings.md:1718
#: ./docs/11.x/strings.md:1951
#: ./docs/master/strings.md:1719
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::of('Inject: <script>alert(\"Hello XSS!\");</script>')->inlineMarkdown([\n"
"    'html_input' => 'strip',\n"
"    'allow_unsafe_links' => false,\n"
"]);\n"
"\n"
"// Inject: alert(&quot;Hello XSS!&quot;);"
msgstr ""

#: ./docs/11.x/strings.md:1718
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::of('https://laravel.com')->chopStart('https://');\n"
"\n"
"// 'laravel.com'"
msgstr ""

#: ./docs/11.x/strings.md:1724
msgid "You may also pass an array. If the string starts with any of the values in the array then that value will be removed from string:"
msgstr ""

#: ./docs/11.x/strings.md:1726
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::of('http://laravel.com')->chopStart(['https://', 'http://']);\n"
"\n"
"// 'laravel.com'"
msgstr ""

#: ./docs/10.x/strings.md:1727
#: ./docs/11.x/strings.md:1960
#: ./docs/master/strings.md:1728
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1728
#: ./docs/11.x/strings.md:1961
#: ./docs/master/strings.md:1729
msgid "`is` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1730
#: ./docs/11.x/strings.md:1963
#: ./docs/master/strings.md:1731
msgid "The `is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values"
msgstr ""

#: ./docs/10.x/strings.md:1732
#: ./docs/11.x/strings.md:1965
#: ./docs/master/strings.md:1733
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$matches = Str::of('foobar')->is('foo*');\n"
"\n"
"// true\n"
"\n"
"$matches = Str::of('foobar')->is('baz*');\n"
"\n"
"// false"
msgstr ""

#: ./docs/11.x/strings.md:1732
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-chop-end\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1733
msgid "`chopEnd` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1735
msgid "The `chopEnd` method removes the last occurrence of the given value only if the value appears at the end of the string:"
msgstr ""

#: ./docs/11.x/strings.md:1737
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::of('https://laravel.com')->chopEnd('.com');\n"
"\n"
"// 'https://laravel'"
msgstr ""

#: ./docs/10.x/strings.md:1742
#: ./docs/11.x/strings.md:1975
#: ./docs/master/strings.md:1743
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-ascii\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1743
#: ./docs/11.x/strings.md:1976
#: ./docs/master/strings.md:1744
msgid "`isAscii` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1743
msgid "You may also pass an array. If the string ends with any of the values in the array then that value will be removed from string:"
msgstr ""

#: ./docs/10.x/strings.md:1745
#: ./docs/11.x/strings.md:1978
#: ./docs/master/strings.md:1746
msgid "The `isAscii` method determines if a given string is an ASCII string:"
msgstr ""

#: ./docs/11.x/strings.md:1745
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$url = Str::of('http://laravel.com')->chopEnd(['.com', '.io']);\n"
"\n"
"// 'http://laravel'"
msgstr ""

#: ./docs/10.x/strings.md:1747
#: ./docs/11.x/strings.md:1980
#: ./docs/master/strings.md:1748
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('Taylor')->isAscii();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('ü')->isAscii();\n"
"\n"
"// false"
msgstr ""

#: ./docs/11.x/strings.md:1754
msgid "The `contains` method determines if the given string contains the given value. By default this method is case sensitive:"
msgstr ""

#: ./docs/10.x/strings.md:1757
#: ./docs/11.x/strings.md:1990
#: ./docs/master/strings.md:1758
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-empty\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1758
#: ./docs/11.x/strings.md:1991
#: ./docs/master/strings.md:1759
msgid "`isEmpty` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1760
#: ./docs/11.x/strings.md:1993
#: ./docs/master/strings.md:1761
msgid "The `isEmpty` method determines if the given string is empty:"
msgstr ""

#: ./docs/10.x/strings.md:1762
#: ./docs/11.x/strings.md:1995
#: ./docs/master/strings.md:1763
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('  ')->trim()->isEmpty();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Laravel')->trim()->isEmpty();\n"
"\n"
"// false"
msgstr ""

#: ./docs/11.x/strings.md:1770
#: ./docs/11.x/strings.md:1789
msgid "You can disable case sensitivity by setting the `ignoreCase` argument to `true`:"
msgstr ""

#: ./docs/10.x/strings.md:1772
#: ./docs/11.x/strings.md:2005
#: ./docs/master/strings.md:1773
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-not-empty\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1772
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::of('This is my name')->contains('MY', ignoreCase: true);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1773
#: ./docs/11.x/strings.md:2006
#: ./docs/master/strings.md:1774
msgid "`isNotEmpty` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1775
#: ./docs/11.x/strings.md:2008
#: ./docs/master/strings.md:1776
msgid "The `isNotEmpty` method determines if the given string is not empty:"
msgstr ""

#: ./docs/10.x/strings.md:1778
#: ./docs/11.x/strings.md:2010
#: ./docs/master/strings.md:1779
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('  ')->trim()->isNotEmpty();\n"
"\n"
"// false\n"
"\n"
"$result = Str::of('Laravel')->trim()->isNotEmpty();\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1788
#: ./docs/11.x/strings.md:2020
#: ./docs/master/strings.md:1789
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-json\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1789
#: ./docs/11.x/strings.md:2021
#: ./docs/master/strings.md:1790
msgid "`isJson` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1791
#: ./docs/11.x/strings.md:2023
#: ./docs/master/strings.md:1792
msgid "The `isJson` method determines if a given string is valid JSON:"
msgstr ""

#: ./docs/11.x/strings.md:1791
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$containsAll = Str::of('This is my name')->containsAll(['MY', 'NAME'], ignoreCase: true);\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:1793
#: ./docs/11.x/strings.md:2025
#: ./docs/master/strings.md:1794
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('[1,2,3]')->isJson();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('{\"first\": \"John\", \"last\": \"Doe\"}')->isJson();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('{first: \"John\", last: \"Doe\"}')->isJson();\n"
"\n"
"// false"
msgstr ""

#: ./docs/11.x/strings.md:1797
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-deduplicate\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:1798
msgid "`deduplicate` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:1800
msgid "The `deduplicate` method replaces consecutive instances of a character with a single instance of that character in the given string. By default, the method deduplicates spaces:"
msgstr ""

#: ./docs/11.x/strings.md:1802
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('The   Laravel   Framework')->deduplicate();\n"
"\n"
"// The Laravel Framework"
msgstr ""

#: ./docs/10.x/strings.md:1807
#: ./docs/11.x/strings.md:2039
#: ./docs/master/strings.md:1808
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-ulid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1808
#: ./docs/11.x/strings.md:2040
#: ./docs/master/strings.md:1809
msgid "`isUlid` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1810
#: ./docs/11.x/strings.md:2042
#: ./docs/master/strings.md:1811
msgid "The `isUlid` method determines if a given string is a ULID:"
msgstr ""

#: ./docs/11.x/strings.md:1810
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('The---Laravel---Framework')->deduplicate('-');\n"
"\n"
"// The-Laravel-Framework"
msgstr ""

#: ./docs/10.x/strings.md:1812
#: ./docs/11.x/strings.md:2044
#: ./docs/master/strings.md:1813
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('01gd6r360bp37zj17nxb55yv40')->isUlid();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Taylor')->isUlid();\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:1822
#: ./docs/11.x/strings.md:2054
#: ./docs/master/strings.md:1823
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-url\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1823
#: ./docs/11.x/strings.md:2055
#: ./docs/master/strings.md:1824
msgid "`isUrl` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1825
#: ./docs/11.x/strings.md:2057
#: ./docs/master/strings.md:1826
msgid "The `isUrl` method determines if a given string is a URL:"
msgstr ""

#: ./docs/10.x/strings.md:1827
#: ./docs/11.x/strings.md:2059
#: ./docs/master/strings.md:1828
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('http://example.com')->isUrl();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Taylor')->isUrl();\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:1839
#: ./docs/11.x/strings.md:2071
#: ./docs/master/strings.md:1840
msgid "$result = Str::of('http://example.com')->isUrl(['http', 'https']);"
msgstr ""

#: ./docs/10.x/strings.md:1841
#: ./docs/11.x/strings.md:2073
#: ./docs/master/strings.md:1842
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-uuid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1842
#: ./docs/11.x/strings.md:2074
#: ./docs/master/strings.md:1843
msgid "`isUuid` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1844
#: ./docs/11.x/strings.md:2076
#: ./docs/master/strings.md:1845
msgid "The `isUuid` method determines if a given string is a UUID:"
msgstr ""

#: ./docs/10.x/strings.md:1846
#: ./docs/11.x/strings.md:2078
#: ./docs/master/strings.md:1847
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('5ace9ab9-e9cf-4ec6-a19d-5881212a452c')->isUuid();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Taylor')->isUuid();\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:1856
#: ./docs/11.x/strings.md:2088
#: ./docs/master/strings.md:1857
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-kebab\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1857
#: ./docs/11.x/strings.md:2089
#: ./docs/master/strings.md:1858
msgid "`kebab` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1859
#: ./docs/11.x/strings.md:2091
#: ./docs/master/strings.md:1860
msgid "The `kebab` method converts the given string to `kebab-case`:"
msgstr ""

#: ./docs/10.x/strings.md:1861
#: ./docs/11.x/strings.md:2093
#: ./docs/master/strings.md:1862
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('fooBar')->kebab();\n"
"\n"
"// foo-bar"
msgstr ""

#: ./docs/10.x/strings.md:1867
#: ./docs/11.x/strings.md:2099
#: ./docs/master/strings.md:1868
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-lcfirst\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1868
#: ./docs/11.x/strings.md:2100
#: ./docs/master/strings.md:1869
msgid "`lcfirst` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1870
#: ./docs/11.x/strings.md:2102
#: ./docs/master/strings.md:1871
msgid "The `lcfirst` method returns the given string with the first character lowercased:"
msgstr ""

#: ./docs/10.x/strings.md:1872
#: ./docs/11.x/strings.md:2104
#: ./docs/master/strings.md:1873
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Foo Bar')->lcfirst();\n"
"\n"
"// foo Bar"
msgstr ""

#: ./docs/10.x/strings.md:1879
#: ./docs/11.x/strings.md:2110
#: ./docs/master/strings.md:1880
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-length\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1880
#: ./docs/11.x/strings.md:2111
#: ./docs/master/strings.md:1881
msgid "`length` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1882
#: ./docs/11.x/strings.md:2113
#: ./docs/master/strings.md:1883
msgid "The `length` method returns the length of the given string:"
msgstr ""

#: ./docs/10.x/strings.md:1884
#: ./docs/11.x/strings.md:2115
#: ./docs/master/strings.md:1885
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$length = Str::of('Laravel')->length();\n"
"\n"
"// 7"
msgstr ""

#: ./docs/10.x/strings.md:1890
#: ./docs/11.x/strings.md:2121
#: ./docs/master/strings.md:1891
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-limit\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1891
#: ./docs/11.x/strings.md:2122
#: ./docs/master/strings.md:1892
msgid "`limit` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1893
#: ./docs/11.x/strings.md:2124
#: ./docs/master/strings.md:1894
msgid "The `limit` method truncates the given string to the specified length:"
msgstr ""

#: ./docs/10.x/strings.md:1895
#: ./docs/11.x/strings.md:2126
#: ./docs/master/strings.md:1896
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20);\n"
"\n"
"// The quick brown fox..."
msgstr ""

#: ./docs/10.x/strings.md:1901
#: ./docs/11.x/strings.md:2132
#: ./docs/master/strings.md:1902
msgid "You may also pass a second argument to change the string that will be appended to the end of the truncated string:"
msgstr ""

#: ./docs/10.x/strings.md:1903
#: ./docs/master/strings.md:1904
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20, ' (...)');\n"
"\n"
"// The quick brown fox (...)"
msgstr ""

#: ./docs/10.x/strings.md:1909
#: ./docs/11.x/strings.md:2144
#: ./docs/master/strings.md:1910
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-lower\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1910
#: ./docs/11.x/strings.md:2145
#: ./docs/master/strings.md:1911
msgid "`lower` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1912
#: ./docs/11.x/strings.md:2147
#: ./docs/master/strings.md:1913
msgid "The `lower` method converts the given string to lowercase:"
msgstr ""

#: ./docs/10.x/strings.md:1914
#: ./docs/11.x/strings.md:2149
#: ./docs/master/strings.md:1915
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('LARAVEL')->lower();\n"
"\n"
"// 'laravel'"
msgstr ""

#: ./docs/10.x/strings.md:1920
#: ./docs/11.x/strings.md:2768
#: ./docs/master/strings.md:1921
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-ltrim\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1921
#: ./docs/11.x/strings.md:2769
#: ./docs/master/strings.md:1922
msgid "`ltrim` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1923
#: ./docs/master/strings.md:1924
msgid "The `ltrim` method trims the left side of the string:"
msgstr ""

#: ./docs/10.x/strings.md:1925
#: ./docs/11.x/strings.md:2773
#: ./docs/master/strings.md:1926
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  Laravel  ')->ltrim();\n"
"\n"
"// 'Laravel  '\n"
"\n"
"$string = Str::of('/Laravel/')->ltrim('/');\n"
"\n"
"// 'Laravel/'"
msgstr ""

#: ./docs/10.x/strings.md:1935
#: ./docs/11.x/strings.md:2155
#: ./docs/master/strings.md:1936
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-markdown\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1936
#: ./docs/11.x/strings.md:2156
#: ./docs/master/strings.md:1937
msgid "`markdown` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1938
#: ./docs/11.x/strings.md:2158
#: ./docs/master/strings.md:1939
msgid "The `markdown` method converts GitHub flavored Markdown into HTML:"
msgstr ""

#: ./docs/10.x/strings.md:1940
#: ./docs/11.x/strings.md:2160
#: ./docs/master/strings.md:1941
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::of('# Laravel')->markdown();\n"
"\n"
"// <h1>Laravel</h1>\n"
"\n"
"$html = Str::of('# Taylor <b>Otwell</b>')->markdown([\n"
"    'html_input' => 'strip',\n"
"]);\n"
"\n"
"// <h1>Taylor Otwell</h1>"
msgstr ""

#: ./docs/10.x/strings.md:1956
#: ./docs/11.x/strings.md:2176
#: ./docs/master/strings.md:1957
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::of('Inject: <script>alert(\"Hello XSS!\");</script>')->markdown([\n"
"    'html_input' => 'strip',\n"
"    'allow_unsafe_links' => false,\n"
"]);\n"
"\n"
"// <p>Inject: alert(&quot;Hello XSS!&quot;);</p>"
msgstr ""

#: ./docs/10.x/strings.md:1965
#: ./docs/11.x/strings.md:2185
#: ./docs/master/strings.md:1966
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-mask\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1966
#: ./docs/11.x/strings.md:2186
#: ./docs/master/strings.md:1967
msgid "`mask` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1968
#: ./docs/11.x/strings.md:2188
#: ./docs/master/strings.md:1969
msgid "The `mask` method masks a portion of a string with a repeated character, and may be used to obfuscate segments of strings such as email addresses and phone numbers:"
msgstr ""

#: ./docs/10.x/strings.md:1970
#: ./docs/11.x/strings.md:2190
#: ./docs/master/strings.md:1971
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('taylor@example.com')->mask('*', 3);\n"
"\n"
"// tay***************"
msgstr ""

#: ./docs/10.x/strings.md:1976
#: ./docs/11.x/strings.md:2196
#: ./docs/master/strings.md:1977
msgid "If needed, you may provide negative numbers as the third or fourth argument to the `mask` method, which will instruct the method to begin masking at the given distance from the end of the string:"
msgstr ""

#: ./docs/10.x/strings.md:1978
#: ./docs/11.x/strings.md:2198
#: ./docs/master/strings.md:1979
msgid ""
"$string = Str::of('taylor@example.com')->mask('*', -15, 3);\n"
"\n"
"// tay***@example.com\n"
"\n"
"$string = Str::of('taylor@example.com')->mask('*', 4, -4);\n"
"\n"
"// tayl**********.com"
msgstr ""

#: ./docs/10.x/strings.md:1986
#: ./docs/11.x/strings.md:2206
#: ./docs/master/strings.md:1987
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-match\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:1987
#: ./docs/11.x/strings.md:2207
#: ./docs/master/strings.md:1988
msgid "`match` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:1989
#: ./docs/11.x/strings.md:2209
#: ./docs/master/strings.md:1990
msgid "The `match` method will return the portion of a string that matches a given regular expression pattern:"
msgstr ""

#: ./docs/10.x/strings.md:1991
#: ./docs/11.x/strings.md:2211
#: ./docs/master/strings.md:1992
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('foo bar')->match('/bar/');\n"
"\n"
"// 'bar'\n"
"\n"
"$result = Str::of('foo bar')->match('/foo (.*)/');\n"
"\n"
"// 'bar'"
msgstr ""

#: ./docs/10.x/strings.md:2001
#: ./docs/11.x/strings.md:2221
#: ./docs/master/strings.md:2002
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-match-all\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2002
#: ./docs/11.x/strings.md:2222
#: ./docs/master/strings.md:2003
msgid "`matchAll` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2004
#: ./docs/11.x/strings.md:2224
#: ./docs/master/strings.md:2005
msgid "The `matchAll` method will return a collection containing the portions of a string that match a given regular expression pattern:"
msgstr ""

#: ./docs/10.x/strings.md:2006
#: ./docs/11.x/strings.md:2226
#: ./docs/master/strings.md:2007
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('bar foo bar')->matchAll('/bar/');\n"
"\n"
"// collect(['bar', 'bar'])"
msgstr ""

#: ./docs/10.x/strings.md:2012
#: ./docs/master/strings.md:2013
msgid "If you specify a matching group within the expression, Laravel will return a collection of that group's matches:"
msgstr ""

#: ./docs/10.x/strings.md:2014
#: ./docs/11.x/strings.md:2234
#: ./docs/master/strings.md:2015
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('bar fun bar fly')->matchAll('/f(\\w*)/');\n"
"\n"
"// collect(['un', 'ly']);"
msgstr ""

#: ./docs/10.x/strings.md:2020
#: ./docs/11.x/strings.md:2240
#: ./docs/master/strings.md:2021
msgid "If no matches are found, an empty collection will be returned."
msgstr ""

#: ./docs/10.x/strings.md:2022
#: ./docs/11.x/strings.md:2242
#: ./docs/master/strings.md:2023
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-is-match\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2023
#: ./docs/11.x/strings.md:2243
#: ./docs/master/strings.md:2024
msgid "`isMatch` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2025
#: ./docs/11.x/strings.md:2245
#: ./docs/master/strings.md:2026
msgid "The `isMatch` method will return `true` if the string matches a given regular expression:"
msgstr ""

#: ./docs/10.x/strings.md:2027
#: ./docs/11.x/strings.md:2247
#: ./docs/master/strings.md:2028
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('foo bar')->isMatch('/foo (.*)/');\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('laravel')->isMatch('/foo (.*)/');\n"
"\n"
"// false"
msgstr ""

#: ./docs/10.x/strings.md:2037
#: ./docs/11.x/strings.md:2257
#: ./docs/master/strings.md:2038
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-new-line\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2038
#: ./docs/11.x/strings.md:2258
#: ./docs/master/strings.md:2039
msgid "`newLine` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2040
#: ./docs/11.x/strings.md:2260
#: ./docs/master/strings.md:2041
msgid "The `newLine` method appends an \"end of line\" character to a string:"
msgstr ""

#: ./docs/10.x/strings.md:2042
#: ./docs/11.x/strings.md:2262
#: ./docs/master/strings.md:2043
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('Laravel')->newLine()->append('Framework');\n"
"\n"
"// 'Laravel\n"
"//  Framework'"
msgstr ""

#: ./docs/10.x/strings.md:2049
#: ./docs/11.x/strings.md:2269
#: ./docs/master/strings.md:2050
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-padboth\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2050
#: ./docs/11.x/strings.md:2270
#: ./docs/master/strings.md:2051
msgid "`padBoth` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2052
#: ./docs/11.x/strings.md:2272
#: ./docs/master/strings.md:2053
msgid "The `padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches the desired length:"
msgstr ""

#: ./docs/10.x/strings.md:2054
#: ./docs/11.x/strings.md:2274
#: ./docs/master/strings.md:2055
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('James')->padBoth(10, '_');\n"
"\n"
"// '__James___'\n"
"\n"
"$padded = Str::of('James')->padBoth(10);\n"
"\n"
"// '  James   '"
msgstr ""

#: ./docs/10.x/strings.md:2064
#: ./docs/11.x/strings.md:2284
#: ./docs/master/strings.md:2065
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-padleft\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2065
#: ./docs/11.x/strings.md:2285
#: ./docs/master/strings.md:2066
msgid "`padLeft` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2067
#: ./docs/11.x/strings.md:2287
#: ./docs/master/strings.md:2068
msgid "The `padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches the desired length:"
msgstr ""

#: ./docs/10.x/strings.md:2069
#: ./docs/11.x/strings.md:2289
#: ./docs/master/strings.md:2070
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('James')->padLeft(10, '-=');\n"
"\n"
"// '-=-=-James'\n"
"\n"
"$padded = Str::of('James')->padLeft(10);\n"
"\n"
"// '     James'"
msgstr ""

#: ./docs/10.x/strings.md:2079
#: ./docs/11.x/strings.md:2299
#: ./docs/master/strings.md:2080
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-padright\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2080
#: ./docs/11.x/strings.md:2300
#: ./docs/master/strings.md:2081
msgid "`padRight` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2082
#: ./docs/11.x/strings.md:2302
#: ./docs/master/strings.md:2083
msgid "The `padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches the desired length:"
msgstr ""

#: ./docs/10.x/strings.md:2084
#: ./docs/11.x/strings.md:2304
#: ./docs/master/strings.md:2085
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('James')->padRight(10, '-');\n"
"\n"
"// 'James-----'\n"
"\n"
"$padded = Str::of('James')->padRight(10);\n"
"\n"
"// 'James     '"
msgstr ""

#: ./docs/10.x/strings.md:2094
#: ./docs/11.x/strings.md:2314
#: ./docs/master/strings.md:2095
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-pipe\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2095
#: ./docs/11.x/strings.md:2315
#: ./docs/master/strings.md:2096
msgid "`pipe` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2097
#: ./docs/11.x/strings.md:2317
#: ./docs/master/strings.md:2098
msgid "The `pipe` method allows you to transform the string by passing its current value to the given callable:"
msgstr ""

#: ./docs/10.x/strings.md:2099
#: ./docs/11.x/strings.md:2319
#: ./docs/master/strings.md:2100
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$hash = Str::of('Laravel')->pipe('md5')->prepend('Checksum: ');\n"
"\n"
"// 'Checksum: a5c95b86291ea299fcbe64458ed12702'\n"
"\n"
"$closure = Str::of('foo')->pipe(function (Stringable $str) {\n"
"    return 'bar';\n"
"});\n"
"\n"
"// 'bar'"
msgstr ""

#: ./docs/10.x/strings.md:2112
#: ./docs/11.x/strings.md:2332
#: ./docs/master/strings.md:2113
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-plural\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2113
#: ./docs/11.x/strings.md:2333
#: ./docs/master/strings.md:2114
msgid "`plural` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2115
#: ./docs/11.x/strings.md:2335
#: ./docs/master/strings.md:2116
msgid "The `plural` method converts a singular word string to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: ./docs/10.x/strings.md:2117
#: ./docs/11.x/strings.md:2337
#: ./docs/master/strings.md:2118
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::of('car')->plural();\n"
"\n"
"// cars\n"
"\n"
"$plural = Str::of('child')->plural();\n"
"\n"
"// children"
msgstr ""

#: ./docs/10.x/strings.md:2129
#: ./docs/11.x/strings.md:2349
#: ./docs/master/strings.md:2130
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::of('child')->plural(2);\n"
"\n"
"// children\n"
"\n"
"$plural = Str::of('child')->plural(1);\n"
"\n"
"// child"
msgstr ""

#: ./docs/11.x/strings.md:2134
msgid ""
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20, ' (...)');\n"
"\n"
"// The quick brown fox (...)"
msgstr ""

#: ./docs/10.x/strings.md:2139
#: ./docs/11.x/strings.md:2359
#: ./docs/master/strings.md:2140
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-position\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2140
#: ./docs/11.x/strings.md:2360
#: ./docs/master/strings.md:2141
msgid "`position` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:2140
msgid ""
"$truncated = Str::of('The quick brown fox')->limit(12, preserveWords: true);\n"
"\n"
"// The quick..."
msgstr ""

#: ./docs/10.x/strings.md:2142
#: ./docs/11.x/strings.md:2362
#: ./docs/master/strings.md:2143
msgid "The `position` method returns the position of the first occurrence of a substring in a string. If the substring does not exist within the string, `false` is returned:"
msgstr ""

#: ./docs/10.x/strings.md:2144
#: ./docs/11.x/strings.md:2364
#: ./docs/master/strings.md:2145
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$position = Str::of('Hello, World!')->position('Hello');\n"
"\n"
"// 0\n"
"\n"
"$position = Str::of('Hello, World!')->position('W');\n"
"\n"
"// 7"
msgstr ""

#: ./docs/10.x/strings.md:2154
#: ./docs/11.x/strings.md:2374
#: ./docs/master/strings.md:2155
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-prepend\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2155
#: ./docs/11.x/strings.md:2375
#: ./docs/master/strings.md:2156
msgid "`prepend` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2157
#: ./docs/11.x/strings.md:2377
#: ./docs/master/strings.md:2158
msgid "The `prepend` method prepends the given values onto the string:"
msgstr ""

#: ./docs/10.x/strings.md:2159
#: ./docs/11.x/strings.md:2379
#: ./docs/master/strings.md:2160
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Framework')->prepend('Laravel ');\n"
"\n"
"// Laravel Framework"
msgstr ""

#: ./docs/10.x/strings.md:2165
#: ./docs/11.x/strings.md:2385
#: ./docs/master/strings.md:2166
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-remove\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2166
#: ./docs/11.x/strings.md:2386
#: ./docs/master/strings.md:2167
msgid "`remove` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2168
#: ./docs/11.x/strings.md:2388
#: ./docs/master/strings.md:2169
msgid "The `remove` method removes the given value or array of values from the string:"
msgstr ""

#: ./docs/10.x/strings.md:2170
#: ./docs/11.x/strings.md:2390
#: ./docs/master/strings.md:2171
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Arkansas is quite beautiful!')->remove('quite');\n"
"\n"
"// Arkansas is beautiful!"
msgstr ""

#: ./docs/10.x/strings.md:2176
#: ./docs/11.x/strings.md:2396
#: ./docs/master/strings.md:2177
msgid "You may also pass `false` as a second parameter to ignore case when removing strings."
msgstr ""

#: ./docs/10.x/strings.md:2178
#: ./docs/11.x/strings.md:2398
#: ./docs/master/strings.md:2179
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-repeat\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2179
#: ./docs/11.x/strings.md:2399
#: ./docs/master/strings.md:2180
msgid "`repeat` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2181
#: ./docs/11.x/strings.md:2401
#: ./docs/master/strings.md:2182
msgid "The `repeat` method repeats the given string:"
msgstr ""

#: ./docs/10.x/strings.md:2183
#: ./docs/11.x/strings.md:2403
#: ./docs/master/strings.md:2184
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$repeated = Str::of('a')->repeat(5);\n"
"\n"
"// aaaaa"
msgstr ""

#: ./docs/10.x/strings.md:2191
#: ./docs/11.x/strings.md:2411
#: ./docs/master/strings.md:2192
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2192
#: ./docs/11.x/strings.md:2412
#: ./docs/master/strings.md:2193
msgid "`replace` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2194
#: ./docs/11.x/strings.md:2414
#: ./docs/master/strings.md:2195
msgid "The `replace` method replaces a given string within the string:"
msgstr ""

#: ./docs/10.x/strings.md:2196
#: ./docs/11.x/strings.md:2416
#: ./docs/master/strings.md:2197
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('Laravel 6.x')->replace('6.x', '7.x');\n"
"\n"
"// Laravel 7.x"
msgstr ""

#: ./docs/10.x/strings.md:2204
#: ./docs/11.x/strings.md:2424
#: ./docs/master/strings.md:2205
msgid ""
"$replaced = Str::of('macOS 13.x')->replace(\n"
"    'macOS', 'iOS', caseSensitive: false\n"
");"
msgstr ""

#: ./docs/10.x/strings.md:2208
#: ./docs/11.x/strings.md:2428
#: ./docs/master/strings.md:2209
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace-array\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2209
#: ./docs/11.x/strings.md:2429
#: ./docs/master/strings.md:2210
msgid "`replaceArray` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2211
#: ./docs/11.x/strings.md:2431
#: ./docs/master/strings.md:2212
msgid "The `replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#: ./docs/10.x/strings.md:2213
#: ./docs/11.x/strings.md:2433
#: ./docs/master/strings.md:2214
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'The event will take place between ? and ?';\n"
"\n"
"$replaced = Str::of($string)->replaceArray('?', ['8:30', '9:00']);\n"
"\n"
"// The event will take place between 8:30 and 9:00"
msgstr ""

#: ./docs/10.x/strings.md:2221
#: ./docs/11.x/strings.md:2441
#: ./docs/master/strings.md:2222
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace-first\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2222
#: ./docs/11.x/strings.md:2442
#: ./docs/master/strings.md:2223
msgid "`replaceFirst` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2224
#: ./docs/11.x/strings.md:2444
#: ./docs/master/strings.md:2225
msgid "The `replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:2226
#: ./docs/11.x/strings.md:2446
#: ./docs/master/strings.md:2227
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceFirst('the', 'a');\n"
"\n"
"// a quick brown fox jumps over the lazy dog"
msgstr ""

#: ./docs/10.x/strings.md:2232
#: ./docs/11.x/strings.md:2452
#: ./docs/master/strings.md:2233
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace-last\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:2232
msgid "If you specify a matching group within the expression, Laravel will return a collection of the first matching group's matches:"
msgstr ""

#: ./docs/10.x/strings.md:2233
#: ./docs/11.x/strings.md:2453
#: ./docs/master/strings.md:2234
msgid "`replaceLast` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2235
#: ./docs/11.x/strings.md:2455
#: ./docs/master/strings.md:2236
msgid "The `replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#: ./docs/10.x/strings.md:2237
#: ./docs/11.x/strings.md:2457
#: ./docs/master/strings.md:2238
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceLast('the', 'a');\n"
"\n"
"// the quick brown fox jumps over a lazy dog"
msgstr ""

#: ./docs/10.x/strings.md:2243
#: ./docs/11.x/strings.md:2463
#: ./docs/master/strings.md:2244
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace-matches\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2244
#: ./docs/11.x/strings.md:2464
#: ./docs/master/strings.md:2245
msgid "`replaceMatches` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2246
#: ./docs/11.x/strings.md:2466
#: ./docs/master/strings.md:2247
msgid "The `replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string:"
msgstr ""

#: ./docs/10.x/strings.md:2248
#: ./docs/11.x/strings.md:2468
#: ./docs/master/strings.md:2249
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('(+1) 501-555-1000')->replaceMatches('/[^A-Za-z0-9]++/', '')\n"
"\n"
"// '15015551000'"
msgstr ""

#: ./docs/10.x/strings.md:2256
#: ./docs/11.x/strings.md:2476
#: ./docs/master/strings.md:2257
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('123')->replaceMatches('/\\d/', function (array $matches) {\n"
"    return '['.$matches[0].']';\n"
"});\n"
"\n"
"// '[1][2][3]'"
msgstr ""

#: ./docs/10.x/strings.md:2264
#: ./docs/11.x/strings.md:2484
#: ./docs/master/strings.md:2265
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace-start\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2265
#: ./docs/11.x/strings.md:2485
#: ./docs/master/strings.md:2266
msgid "`replaceStart` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2267
#: ./docs/11.x/strings.md:2487
#: ./docs/master/strings.md:2268
msgid "The `replaceStart` method replaces the first occurrence of the given value only if the value appears at the start of the string:"
msgstr ""

#: ./docs/10.x/strings.md:2269
#: ./docs/11.x/strings.md:2489
#: ./docs/master/strings.md:2270
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('Hello World')->replaceStart('Hello', 'Laravel');\n"
"\n"
"// Laravel World\n"
"\n"
"$replaced = Str::of('Hello World')->replaceStart('World', 'Laravel');\n"
"\n"
"// Hello World"
msgstr ""

#: ./docs/10.x/strings.md:2279
#: ./docs/11.x/strings.md:2499
#: ./docs/master/strings.md:2280
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-replace-end\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2280
#: ./docs/11.x/strings.md:2500
#: ./docs/master/strings.md:2281
msgid "`replaceEnd` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2282
#: ./docs/11.x/strings.md:2502
#: ./docs/master/strings.md:2283
msgid "The `replaceEnd` method replaces the last occurrence of the given value only if the value appears at the end of the string:"
msgstr ""

#: ./docs/10.x/strings.md:2284
#: ./docs/11.x/strings.md:2504
#: ./docs/master/strings.md:2285
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('Hello World')->replaceEnd('World', 'Laravel');\n"
"\n"
"// Hello Laravel\n"
"\n"
"$replaced = Str::of('Hello World')->replaceEnd('Hello', 'Laravel');\n"
"\n"
"// Hello World"
msgstr ""

#: ./docs/10.x/strings.md:2294
#: ./docs/11.x/strings.md:2783
#: ./docs/master/strings.md:2295
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-rtrim\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2295
#: ./docs/11.x/strings.md:2784
#: ./docs/master/strings.md:2296
msgid "`rtrim` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2297
#: ./docs/master/strings.md:2298
msgid "The `rtrim` method trims the right side of the given string:"
msgstr ""

#: ./docs/10.x/strings.md:2299
#: ./docs/11.x/strings.md:2788
#: ./docs/master/strings.md:2300
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  Laravel  ')->rtrim();\n"
"\n"
"// '  Laravel'\n"
"\n"
"$string = Str::of('/Laravel/')->rtrim('/');\n"
"\n"
"// '/Laravel'"
msgstr ""

#: ./docs/10.x/strings.md:2309
#: ./docs/11.x/strings.md:2514
#: ./docs/master/strings.md:2310
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-scan\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2310
#: ./docs/11.x/strings.md:2515
#: ./docs/master/strings.md:2311
msgid "`scan` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2312
#: ./docs/11.x/strings.md:2517
#: ./docs/master/strings.md:2313
msgid "The `scan` method parses input from a string into a collection according to a format supported by the [`sscanf` PHP function](https://www.php.net/manual/en/function.sscanf.php):"
msgstr ""

#: ./docs/10.x/strings.md:2314
#: ./docs/11.x/strings.md:2519
#: ./docs/master/strings.md:2315
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$collection = Str::of('filename.jpg')->scan('%[^.].%s');\n"
"\n"
"// collect(['filename', 'jpg'])"
msgstr ""

#: ./docs/10.x/strings.md:2320
#: ./docs/11.x/strings.md:2525
#: ./docs/master/strings.md:2321
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-singular\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2321
#: ./docs/11.x/strings.md:2526
#: ./docs/master/strings.md:2322
msgid "`singular` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2323
#: ./docs/11.x/strings.md:2528
#: ./docs/master/strings.md:2324
msgid "The `singular` method converts a string to its singular form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: ./docs/10.x/strings.md:2325
#: ./docs/11.x/strings.md:2530
#: ./docs/master/strings.md:2326
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$singular = Str::of('cars')->singular();\n"
"\n"
"// car\n"
"\n"
"$singular = Str::of('children')->singular();\n"
"\n"
"// child"
msgstr ""

#: ./docs/10.x/strings.md:2335
#: ./docs/11.x/strings.md:2540
#: ./docs/master/strings.md:2336
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-slug\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2336
#: ./docs/11.x/strings.md:2541
#: ./docs/master/strings.md:2337
msgid "`slug` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2338
#: ./docs/11.x/strings.md:2543
#: ./docs/master/strings.md:2339
msgid "The `slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#: ./docs/10.x/strings.md:2340
#: ./docs/11.x/strings.md:2545
#: ./docs/master/strings.md:2341
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slug = Str::of('Laravel Framework')->slug('-');\n"
"\n"
"// laravel-framework"
msgstr ""

#: ./docs/10.x/strings.md:2346
#: ./docs/11.x/strings.md:2551
#: ./docs/master/strings.md:2347
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-snake\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2347
#: ./docs/11.x/strings.md:2552
#: ./docs/master/strings.md:2348
msgid "`snake` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2349
#: ./docs/11.x/strings.md:2554
#: ./docs/master/strings.md:2350
msgid "The `snake` method converts the given string to `snake_case`:"
msgstr ""

#: ./docs/10.x/strings.md:2351
#: ./docs/11.x/strings.md:2556
#: ./docs/master/strings.md:2352
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('fooBar')->snake();\n"
"\n"
"// foo_bar"
msgstr ""

#: ./docs/10.x/strings.md:2357
#: ./docs/11.x/strings.md:2562
#: ./docs/master/strings.md:2358
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-split\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2358
#: ./docs/11.x/strings.md:2563
#: ./docs/master/strings.md:2359
msgid "`split` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2360
#: ./docs/11.x/strings.md:2565
#: ./docs/master/strings.md:2361
msgid "The `split` method splits a string into a collection using a regular expression:"
msgstr ""

#: ./docs/10.x/strings.md:2362
#: ./docs/11.x/strings.md:2567
#: ./docs/master/strings.md:2363
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$segments = Str::of('one, two, three')->split('/[\\s,]+/');\n"
"\n"
"// collect([\"one\", \"two\", \"three\"])"
msgstr ""

#: ./docs/10.x/strings.md:2368
#: ./docs/11.x/strings.md:2573
#: ./docs/master/strings.md:2369
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-squish\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2369
#: ./docs/11.x/strings.md:2574
#: ./docs/master/strings.md:2370
msgid "`squish` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2371
#: ./docs/11.x/strings.md:2576
#: ./docs/master/strings.md:2372
msgid "The `squish` method removes all extraneous white space from a string, including extraneous white space between words:"
msgstr ""

#: ./docs/10.x/strings.md:2373
#: ./docs/11.x/strings.md:2578
#: ./docs/master/strings.md:2374
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('    laravel    framework    ')->squish();\n"
"\n"
"// laravel framework"
msgstr ""

#: ./docs/10.x/strings.md:2379
#: ./docs/11.x/strings.md:2584
#: ./docs/master/strings.md:2380
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-start\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2380
#: ./docs/11.x/strings.md:2585
#: ./docs/master/strings.md:2381
msgid "`start` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2382
#: ./docs/11.x/strings.md:2587
#: ./docs/master/strings.md:2383
msgid "The `start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#: ./docs/10.x/strings.md:2384
#: ./docs/11.x/strings.md:2589
#: ./docs/master/strings.md:2385
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::of('this/string')->start('/');\n"
"\n"
"// /this/string\n"
"\n"
"$adjusted = Str::of('/this/string')->start('/');\n"
"\n"
"// /this/string"
msgstr ""

#: ./docs/10.x/strings.md:2394
#: ./docs/11.x/strings.md:2599
#: ./docs/master/strings.md:2395
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-starts-with\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2395
#: ./docs/11.x/strings.md:2600
#: ./docs/master/strings.md:2396
msgid "`startsWith` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2397
#: ./docs/11.x/strings.md:2602
#: ./docs/master/strings.md:2398
msgid "The `startsWith` method determines if the given string begins with the given value:"
msgstr ""

#: ./docs/10.x/strings.md:2399
#: ./docs/11.x/strings.md:2604
#: ./docs/master/strings.md:2400
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('This is my name')->startsWith('This');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:2405
#: ./docs/11.x/strings.md:2610
#: ./docs/master/strings.md:2406
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-strip-tags\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2406
#: ./docs/11.x/strings.md:2611
#: ./docs/master/strings.md:2407
msgid "`stripTags` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2408
#: ./docs/11.x/strings.md:2613
#: ./docs/master/strings.md:2409
msgid "The `stripTags` method removes all HTML and PHP tags from a string:"
msgstr ""

#: ./docs/10.x/strings.md:2410
#: ./docs/11.x/strings.md:2615
#: ./docs/master/strings.md:2411
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('<a href=\"https://laravel.com\">Taylor <b>Otwell</b></a>')->stripTags();\n"
"\n"
"// Taylor Otwell\n"
"\n"
"$result = Str::of('<a href=\"https://laravel.com\">Taylor <b>Otwell</b></a>')->stripTags('<b>');\n"
"\n"
"// Taylor <b>Otwell</b>"
msgstr ""

#: ./docs/10.x/strings.md:2420
#: ./docs/11.x/strings.md:2625
#: ./docs/master/strings.md:2421
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-studly\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2421
#: ./docs/11.x/strings.md:2626
#: ./docs/master/strings.md:2422
msgid "`studly` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2423
#: ./docs/11.x/strings.md:2628
#: ./docs/master/strings.md:2424
msgid "The `studly` method converts the given string to `StudlyCase`:"
msgstr ""

#: ./docs/10.x/strings.md:2425
#: ./docs/11.x/strings.md:2630
#: ./docs/master/strings.md:2426
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('foo_bar')->studly();\n"
"\n"
"// FooBar"
msgstr ""

#: ./docs/10.x/strings.md:2431
#: ./docs/11.x/strings.md:2636
#: ./docs/master/strings.md:2432
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-substr\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2432
#: ./docs/11.x/strings.md:2637
#: ./docs/master/strings.md:2433
msgid "`substr` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2434
#: ./docs/11.x/strings.md:2639
#: ./docs/master/strings.md:2435
msgid "The `substr` method returns the portion of the string specified by the given start and length parameters:"
msgstr ""

#: ./docs/10.x/strings.md:2436
#: ./docs/11.x/strings.md:2641
#: ./docs/master/strings.md:2437
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Laravel Framework')->substr(8);\n"
"\n"
"// Framework\n"
"\n"
"$string = Str::of('Laravel Framework')->substr(8, 5);\n"
"\n"
"// Frame"
msgstr ""

#: ./docs/10.x/strings.md:2446
#: ./docs/11.x/strings.md:2651
#: ./docs/master/strings.md:2447
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-substrreplace\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2447
#: ./docs/11.x/strings.md:2652
#: ./docs/master/strings.md:2448
msgid "`substrReplace` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2449
#: ./docs/11.x/strings.md:2654
#: ./docs/master/strings.md:2450
msgid "The `substrReplace` method replaces text within a portion of a string, starting at the position specified by the second argument and replacing the number of characters specified by the third argument. Passing `0` to the method's third argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: ./docs/10.x/strings.md:2451
#: ./docs/11.x/strings.md:2656
#: ./docs/master/strings.md:2452
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('1300')->substrReplace(':', 2);\n"
"\n"
"// 13:\n"
"\n"
"$string = Str::of('The Framework')->substrReplace(' Laravel', 3, 0);\n"
"\n"
"// The Laravel Framework"
msgstr ""

#: ./docs/10.x/strings.md:2461
#: ./docs/11.x/strings.md:2666
#: ./docs/master/strings.md:2462
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-swap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2462
#: ./docs/11.x/strings.md:2667
#: ./docs/master/strings.md:2463
msgid "`swap` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2464
#: ./docs/11.x/strings.md:2669
#: ./docs/master/strings.md:2465
msgid "The `swap` method replaces multiple values in the string using PHP's `strtr` function:"
msgstr ""

#: ./docs/10.x/strings.md:2466
#: ./docs/11.x/strings.md:2671
#: ./docs/master/strings.md:2467
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Tacos are great!')\n"
"    ->swap([\n"
"        'Tacos' => 'Burritos',\n"
"        'great' => 'fantastic',\n"
"    ]);\n"
"\n"
"// Burritos are fantastic!"
msgstr ""

#: ./docs/10.x/strings.md:2476
#: ./docs/11.x/strings.md:2681
#: ./docs/master/strings.md:2477
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-take\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2477
#: ./docs/11.x/strings.md:2682
#: ./docs/master/strings.md:2478
msgid "`take` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2479
#: ./docs/11.x/strings.md:2684
#: ./docs/master/strings.md:2480
msgid "The `take` method returns a specified number of characters from the beginning of the string:"
msgstr ""

#: ./docs/10.x/strings.md:2481
#: ./docs/11.x/strings.md:2686
#: ./docs/master/strings.md:2482
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$taken = Str::of('Build something amazing!')->take(5);\n"
"\n"
"// Build"
msgstr ""

#: ./docs/10.x/strings.md:2487
#: ./docs/11.x/strings.md:2692
#: ./docs/master/strings.md:2488
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-tap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2488
#: ./docs/11.x/strings.md:2693
#: ./docs/master/strings.md:2489
msgid "`tap` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2490
#: ./docs/11.x/strings.md:2695
#: ./docs/master/strings.md:2491
msgid "The `tap` method passes the string to the given closure, allowing you to examine and interact with the string while not affecting the string itself. The original string is returned by the `tap` method regardless of what is returned by the closure:"
msgstr ""

#: ./docs/10.x/strings.md:2492
#: ./docs/11.x/strings.md:2697
#: ./docs/master/strings.md:2493
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('Laravel')\n"
"    ->append(' Framework')\n"
"    ->tap(function (Stringable $string) {\n"
"        dump('String after append: '.$string);\n"
"    })\n"
"    ->upper();\n"
"\n"
"// LARAVEL FRAMEWORK"
msgstr ""

#: ./docs/10.x/strings.md:2504
#: ./docs/11.x/strings.md:2709
#: ./docs/master/strings.md:2505
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-test\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2505
#: ./docs/11.x/strings.md:2710
#: ./docs/master/strings.md:2506
msgid "`test` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2507
#: ./docs/11.x/strings.md:2712
#: ./docs/master/strings.md:2508
msgid "The `test` method determines if a string matches the given regular expression pattern:"
msgstr ""

#: ./docs/10.x/strings.md:2509
#: ./docs/11.x/strings.md:2714
#: ./docs/master/strings.md:2510
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('Laravel Framework')->test('/Laravel/');\n"
"\n"
"// true"
msgstr ""

#: ./docs/10.x/strings.md:2515
#: ./docs/11.x/strings.md:2720
#: ./docs/master/strings.md:2516
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-title\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2516
#: ./docs/11.x/strings.md:2721
#: ./docs/master/strings.md:2517
msgid "`title` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2518
#: ./docs/11.x/strings.md:2723
#: ./docs/master/strings.md:2519
msgid "The `title` method converts the given string to `Title Case`:"
msgstr ""

#: ./docs/10.x/strings.md:2520
#: ./docs/11.x/strings.md:2725
#: ./docs/master/strings.md:2521
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('a nice title uses the correct case')->title();\n"
"\n"
"// A Nice Title Uses The Correct Case"
msgstr ""

#: ./docs/10.x/strings.md:2526
#: ./docs/11.x/strings.md:2731
#: ./docs/master/strings.md:2527
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-to-base64\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2527
#: ./docs/11.x/strings.md:2732
#: ./docs/master/strings.md:2528
msgid "`toBase64()` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2529
#: ./docs/11.x/strings.md:2734
#: ./docs/master/strings.md:2530
msgid "The `toBase64` method converts the given string to Base64:"
msgstr ""

#: ./docs/10.x/strings.md:2531
#: ./docs/11.x/strings.md:2736
#: ./docs/master/strings.md:2532
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$base64 = Str::of('Laravel')->toBase64();\n"
"\n"
"// TGFyYXZlbA=="
msgstr ""

#: ./docs/10.x/strings.md:2537
#: ./docs/11.x/strings.md:2753
#: ./docs/master/strings.md:2538
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-trim\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2538
#: ./docs/11.x/strings.md:2754
#: ./docs/master/strings.md:2539
msgid "`trim` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2540
#: ./docs/master/strings.md:2541
msgid "The `trim` method trims the given string:"
msgstr ""

#: ./docs/10.x/strings.md:2542
#: ./docs/11.x/strings.md:2758
#: ./docs/master/strings.md:2543
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  Laravel  ')->trim();\n"
"\n"
"// 'Laravel'\n"
"\n"
"$string = Str::of('/Laravel/')->trim('/');\n"
"\n"
"// 'Laravel'"
msgstr ""

#: ./docs/10.x/strings.md:2552
#: ./docs/11.x/strings.md:2798
#: ./docs/master/strings.md:2553
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-ucfirst\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2553
#: ./docs/11.x/strings.md:2799
#: ./docs/master/strings.md:2554
msgid "`ucfirst` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2555
#: ./docs/11.x/strings.md:2801
#: ./docs/master/strings.md:2556
msgid "The `ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#: ./docs/10.x/strings.md:2557
#: ./docs/11.x/strings.md:2803
#: ./docs/master/strings.md:2558
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('foo bar')->ucfirst();\n"
"\n"
"// Foo bar"
msgstr ""

#: ./docs/10.x/strings.md:2563
#: ./docs/11.x/strings.md:2809
#: ./docs/master/strings.md:2564
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-ucsplit\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2564
#: ./docs/11.x/strings.md:2810
#: ./docs/master/strings.md:2565
msgid "`ucsplit` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2566
#: ./docs/11.x/strings.md:2812
#: ./docs/master/strings.md:2567
msgid "The `ucsplit` method splits the given string into a collection by uppercase characters:"
msgstr ""

#: ./docs/10.x/strings.md:2568
#: ./docs/11.x/strings.md:2814
#: ./docs/master/strings.md:2569
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Foo Bar')->ucsplit();\n"
"\n"
"// collect(['Foo', 'Bar'])"
msgstr ""

#: ./docs/10.x/strings.md:2574
#: ./docs/11.x/strings.md:2820
#: ./docs/master/strings.md:2575
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-unwrap\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2575
#: ./docs/11.x/strings.md:2821
#: ./docs/master/strings.md:2576
msgid "`unwrap` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2577
#: ./docs/11.x/strings.md:2823
#: ./docs/master/strings.md:2578
msgid "The `unwrap` method removes the specified strings from the beginning and end of a given string:"
msgstr ""

#: ./docs/10.x/strings.md:2579
#: ./docs/11.x/strings.md:2825
#: ./docs/master/strings.md:2580
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::of('-Laravel-')->unwrap('-');\n"
"\n"
"// Laravel\n"
"\n"
"Str::of('{framework: \"Laravel\"}')->unwrap('{', '}');\n"
"\n"
"// framework: \"Laravel\""
msgstr ""

#: ./docs/10.x/strings.md:2589
#: ./docs/11.x/strings.md:2835
#: ./docs/master/strings.md:2590
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-upper\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2590
#: ./docs/11.x/strings.md:2836
#: ./docs/master/strings.md:2591
msgid "`upper` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2592
#: ./docs/11.x/strings.md:2838
#: ./docs/master/strings.md:2593
msgid "The `upper` method converts the given string to uppercase:"
msgstr ""

#: ./docs/10.x/strings.md:2594
#: ./docs/11.x/strings.md:2840
#: ./docs/master/strings.md:2595
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::of('laravel')->upper();\n"
"\n"
"// LARAVEL"
msgstr ""

#: ./docs/10.x/strings.md:2600
#: ./docs/11.x/strings.md:2846
#: ./docs/master/strings.md:2601
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2601
#: ./docs/11.x/strings.md:2847
#: ./docs/master/strings.md:2602
msgid "`when` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2603
#: ./docs/11.x/strings.md:2849
#: ./docs/master/strings.md:2604
msgid "The `when` method invokes the given closure if a given condition is `true`. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2605
#: ./docs/11.x/strings.md:2851
#: ./docs/master/strings.md:2606
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('Taylor')\n"
"                ->when(true, function (Stringable $string) {\n"
"                    return $string->append(' Otwell');\n"
"                });\n"
"\n"
"// 'Taylor Otwell'"
msgstr ""

#: ./docs/10.x/strings.md:2615
#: ./docs/10.x/strings.md:2661
#: ./docs/11.x/strings.md:2861
#: ./docs/11.x/strings.md:2907
#: ./docs/master/strings.md:2616
#: ./docs/master/strings.md:2662
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the condition parameter evaluates to `false`."
msgstr ""

#: ./docs/10.x/strings.md:2617
#: ./docs/11.x/strings.md:2863
#: ./docs/master/strings.md:2618
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-contains\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2618
#: ./docs/11.x/strings.md:2864
#: ./docs/master/strings.md:2619
msgid "`whenContains` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2620
#: ./docs/11.x/strings.md:2866
#: ./docs/master/strings.md:2621
msgid "The `whenContains` method invokes the given closure if the string contains the given value. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2622
#: ./docs/11.x/strings.md:2868
#: ./docs/master/strings.md:2623
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains('tony', function (Stringable $string) {\n"
"                return $string->title();\n"
"            });\n"
"\n"
"// 'Tony Stark'"
msgstr ""

#: ./docs/10.x/strings.md:2632
#: ./docs/11.x/strings.md:2878
#: ./docs/master/strings.md:2633
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the string does not contain the given value."
msgstr ""

#: ./docs/10.x/strings.md:2636
#: ./docs/11.x/strings.md:2882
#: ./docs/master/strings.md:2637
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains(['tony', 'hulk'], function (Stringable $string) {\n"
"                return $string->title();\n"
"            });\n"
"\n"
"// Tony Stark"
msgstr ""

#: ./docs/10.x/strings.md:2646
#: ./docs/11.x/strings.md:2892
#: ./docs/master/strings.md:2647
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-contains-all\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2647
#: ./docs/11.x/strings.md:2893
#: ./docs/master/strings.md:2648
msgid "`whenContainsAll` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2649
#: ./docs/11.x/strings.md:2895
#: ./docs/master/strings.md:2650
msgid "The `whenContainsAll` method invokes the given closure if the string contains all of the given sub-strings. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2651
#: ./docs/11.x/strings.md:2897
#: ./docs/master/strings.md:2652
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('tony stark')\n"
"                ->whenContainsAll(['tony', 'stark'], function (Stringable $string) {\n"
"                    return $string->title();\n"
"                });\n"
"\n"
"// 'Tony Stark'"
msgstr ""

#: ./docs/10.x/strings.md:2663
#: ./docs/11.x/strings.md:2909
#: ./docs/master/strings.md:2664
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-empty\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2664
#: ./docs/11.x/strings.md:2910
#: ./docs/master/strings.md:2665
msgid "`whenEmpty` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2666
#: ./docs/11.x/strings.md:2912
#: ./docs/master/strings.md:2667
msgid "The `whenEmpty` method invokes the given closure if the string is empty. If the closure returns a value, that value will also be returned by the `whenEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#: ./docs/10.x/strings.md:2668
#: ./docs/11.x/strings.md:2914
#: ./docs/master/strings.md:2669
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('  ')->whenEmpty(function (Stringable $string) {\n"
"    return $string->trim()->prepend('Laravel');\n"
"});\n"
"\n"
"// 'Laravel'"
msgstr ""

#: ./docs/10.x/strings.md:2677
#: ./docs/11.x/strings.md:2923
#: ./docs/master/strings.md:2678
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-not-empty\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2678
#: ./docs/11.x/strings.md:2924
#: ./docs/master/strings.md:2679
msgid "`whenNotEmpty` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2680
#: ./docs/11.x/strings.md:2926
#: ./docs/master/strings.md:2681
msgid "The `whenNotEmpty` method invokes the given closure if the string is not empty. If the closure returns a value, that value will also be returned by the `whenNotEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#: ./docs/10.x/strings.md:2682
#: ./docs/11.x/strings.md:2928
#: ./docs/master/strings.md:2683
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('Framework')->whenNotEmpty(function (Stringable $string) {\n"
"    return $string->prepend('Laravel ');\n"
"});\n"
"\n"
"// 'Laravel Framework'"
msgstr ""

#: ./docs/10.x/strings.md:2691
#: ./docs/11.x/strings.md:2937
#: ./docs/master/strings.md:2692
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-starts-with\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2692
#: ./docs/11.x/strings.md:2938
#: ./docs/master/strings.md:2693
msgid "`whenStartsWith` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2694
#: ./docs/11.x/strings.md:2940
#: ./docs/master/strings.md:2695
msgid "The `whenStartsWith` method invokes the given closure if the string starts with the given sub-string. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2696
#: ./docs/11.x/strings.md:2942
#: ./docs/master/strings.md:2697
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('disney world')->whenStartsWith('disney', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Disney World'"
msgstr ""

#: ./docs/10.x/strings.md:2705
#: ./docs/11.x/strings.md:2951
#: ./docs/master/strings.md:2706
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-ends-with\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2706
#: ./docs/11.x/strings.md:2952
#: ./docs/master/strings.md:2707
msgid "`whenEndsWith` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2708
#: ./docs/11.x/strings.md:2954
#: ./docs/master/strings.md:2709
msgid "The `whenEndsWith` method invokes the given closure if the string ends with the given sub-string. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2710
#: ./docs/11.x/strings.md:2956
#: ./docs/master/strings.md:2711
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('disney world')->whenEndsWith('world', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Disney World'"
msgstr ""

#: ./docs/10.x/strings.md:2719
#: ./docs/11.x/strings.md:2965
#: ./docs/master/strings.md:2720
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-exactly\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2720
#: ./docs/11.x/strings.md:2966
#: ./docs/master/strings.md:2721
msgid "`whenExactly` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2722
#: ./docs/11.x/strings.md:2968
#: ./docs/master/strings.md:2723
msgid "The `whenExactly` method invokes the given closure if the string exactly matches the given string. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2724
#: ./docs/11.x/strings.md:2970
#: ./docs/master/strings.md:2725
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('laravel')->whenExactly('laravel', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'"
msgstr ""

#: ./docs/10.x/strings.md:2733
#: ./docs/11.x/strings.md:2979
#: ./docs/master/strings.md:2734
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-not-exactly\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2734
#: ./docs/11.x/strings.md:2980
#: ./docs/master/strings.md:2735
msgid "`whenNotExactly` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2736
#: ./docs/11.x/strings.md:2982
#: ./docs/master/strings.md:2737
msgid "The `whenNotExactly` method invokes the given closure if the string does not exactly match the given string. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2738
#: ./docs/11.x/strings.md:2984
#: ./docs/master/strings.md:2739
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('framework')->whenNotExactly('laravel', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Framework'"
msgstr ""

#: ./docs/11.x/strings.md:2742
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-transliterate\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:2743
msgid "`transliterate` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:2745
msgid "The `transliterate` method will attempt to convert a given string into its closest ASCII representation:"
msgstr ""

#: ./docs/10.x/strings.md:2747
#: ./docs/11.x/strings.md:2993
#: ./docs/master/strings.md:2748
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-is\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:2747
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$email = Str::of('ⓣⓔⓢⓣ@ⓛⓐⓡⓐⓥⓔⓛ.ⓒⓞⓜ')->transliterate()\n"
"\n"
"// 'test@laravel.com'"
msgstr ""

#: ./docs/10.x/strings.md:2748
#: ./docs/11.x/strings.md:2994
#: ./docs/master/strings.md:2749
msgid "`whenIs` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2750
#: ./docs/11.x/strings.md:2996
#: ./docs/master/strings.md:2751
msgid "The `whenIs` method invokes the given closure if the string matches a given pattern. Asterisks may be used as wildcard values. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2752
#: ./docs/11.x/strings.md:2998
#: ./docs/master/strings.md:2753
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('foo/bar')->whenIs('foo/*', function (Stringable $string) {\n"
"    return $string->append('/baz');\n"
"});\n"
"\n"
"// 'foo/bar/baz'"
msgstr ""

#: ./docs/11.x/strings.md:2756
msgid "The `trim` method trims the given string. Unlike PHP's native `trim` function, Laravel's `trim` method also removes unicode whitespace characters:"
msgstr ""

#: ./docs/10.x/strings.md:2761
#: ./docs/11.x/strings.md:3007
#: ./docs/master/strings.md:2762
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-is-ascii\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2762
#: ./docs/11.x/strings.md:3008
#: ./docs/master/strings.md:2763
msgid "`whenIsAscii` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2764
#: ./docs/11.x/strings.md:3010
#: ./docs/master/strings.md:2765
msgid "The `whenIsAscii` method invokes the given closure if the string is 7 bit ASCII. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2766
#: ./docs/11.x/strings.md:3012
#: ./docs/master/strings.md:2767
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('laravel')->whenIsAscii(function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'"
msgstr ""

#: ./docs/11.x/strings.md:2771
msgid "The `ltrim` method trims the left side of the string. Unlike PHP's native `ltrim` function, Laravel's `ltrim` method also removes unicode whitespace characters:"
msgstr ""

#: ./docs/10.x/strings.md:2775
#: ./docs/11.x/strings.md:3021
#: ./docs/master/strings.md:2776
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-is-ulid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2776
#: ./docs/11.x/strings.md:3022
#: ./docs/master/strings.md:2777
msgid "`whenIsUlid` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2778
#: ./docs/11.x/strings.md:3024
#: ./docs/master/strings.md:2779
msgid "The `whenIsUlid` method invokes the given closure if the string is a valid ULID. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2780
#: ./docs/11.x/strings.md:3026
#: ./docs/master/strings.md:2781
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('01gd6r360bp37zj17nxb55yv40')->whenIsUlid(function (Stringable $string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// '01gd6r36'"
msgstr ""

#: ./docs/11.x/strings.md:2786
msgid "The `rtrim` method trims the right side of the given string. Unlike PHP's native `rtrim` function, Laravel's `rtrim` method also removes unicode whitespace characters:"
msgstr ""

#: ./docs/10.x/strings.md:2788
#: ./docs/11.x/strings.md:3034
#: ./docs/master/strings.md:2789
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-is-uuid\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2789
#: ./docs/11.x/strings.md:3035
#: ./docs/master/strings.md:2790
msgid "`whenIsUuid` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2791
#: ./docs/11.x/strings.md:3037
#: ./docs/master/strings.md:2792
msgid "The `whenIsUuid` method invokes the given closure if the string is a valid UUID. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2793
#: ./docs/11.x/strings.md:3039
#: ./docs/master/strings.md:2794
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('a0a2a2d2-0b87-4a18-83f2-2529882be2de')->whenIsUuid(function (Stringable $string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// 'a0a2a2d2'"
msgstr ""

#: ./docs/10.x/strings.md:2802
#: ./docs/11.x/strings.md:3048
#: ./docs/master/strings.md:2803
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-when-test\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2803
#: ./docs/11.x/strings.md:3049
#: ./docs/master/strings.md:2804
msgid "`whenTest` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2805
#: ./docs/11.x/strings.md:3051
#: ./docs/master/strings.md:2806
msgid "The `whenTest` method invokes the given closure if the string matches the given regular expression. The closure will receive the fluent string instance:"
msgstr ""

#: ./docs/10.x/strings.md:2807
#: ./docs/11.x/strings.md:3053
#: ./docs/master/strings.md:2808
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('laravel framework')->whenTest('/laravel/', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel Framework'"
msgstr ""

#: ./docs/10.x/strings.md:2816
#: ./docs/11.x/strings.md:3062
#: ./docs/master/strings.md:2817
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-word-count\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2817
#: ./docs/11.x/strings.md:3063
#: ./docs/master/strings.md:2818
msgid "`wordCount` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2819
#: ./docs/11.x/strings.md:3065
#: ./docs/master/strings.md:2820
msgid "The `wordCount` method returns the number of words that a string contains:"
msgstr ""

#: ./docs/10.x/strings.md:2821
#: ./docs/11.x/strings.md:3067
#: ./docs/master/strings.md:2822
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::of('Hello, world!')->wordCount(); // 2"
msgstr ""

#: ./docs/10.x/strings.md:2827
#: ./docs/11.x/strings.md:3073
#: ./docs/master/strings.md:2828
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-words\"></a>"
#~ msgstr ""

#: ./docs/10.x/strings.md:2828
#: ./docs/11.x/strings.md:3074
#: ./docs/master/strings.md:2829
msgid "`words` {.collection-method}"
msgstr ""

#: ./docs/10.x/strings.md:2830
#: ./docs/11.x/strings.md:3076
#: ./docs/master/strings.md:2831
msgid "The `words` method limits the number of words in a string. If necessary, you may specify an additional string that will be appended to the truncated string:"
msgstr ""

#: ./docs/10.x/strings.md:2832
#: ./docs/11.x/strings.md:3078
#: ./docs/master/strings.md:2833
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Perfectly balanced, as all things should be.')->words(3, ' >>>');\n"
"\n"
"// Perfectly balanced, as >>>"
msgstr ""

#: ./docs/11.x/strings.md:3084
#~ msgctxt "P"
#~ msgid "<a name=\"method-fluent-str-wrap\"></a>"
#~ msgstr ""

#: ./docs/11.x/strings.md:3085
msgid "`wrap` {.collection-method}"
msgstr ""

#: ./docs/11.x/strings.md:3087
msgid "The `wrap` method wraps the given string with an additional string or pair of strings:"
msgstr ""

#: ./docs/11.x/strings.md:3089
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::of('Laravel')->wrap('\"');\n"
"\n"
"// \"Laravel\"\n"
"\n"
"Str::is('is')->wrap(before: 'This ', after: ' Laravel!');\n"
"\n"
"// This is Laravel!"
msgstr ""
