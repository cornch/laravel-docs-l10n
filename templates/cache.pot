msgid ""
msgstr ""

#: ./docs/11.x/cache.md
#: ./docs/master/cache.md
msgctxt "TD"
msgid "Event Name"
msgstr ""

#: ./docs/11.x/cache.md
#: ./docs/master/cache.md
msgctxt "TD"
msgid "`Illuminate\\Cache\\Events\\CacheHit`"
msgstr ""

#: ./docs/11.x/cache.md
#: ./docs/master/cache.md
msgctxt "TD"
msgid "`Illuminate\\Cache\\Events\\CacheMissed`"
msgstr ""

#: ./docs/11.x/cache.md
#: ./docs/master/cache.md
msgctxt "TD"
msgid "`Illuminate\\Cache\\Events\\KeyForgotten`"
msgstr ""

#: ./docs/11.x/cache.md
#: ./docs/master/cache.md
msgctxt "TD"
msgid "`Illuminate\\Cache\\Events\\KeyWritten`"
msgstr ""

#: ./docs/8.x/cache.md:1
#: ./docs/9.x/cache.md:1
#: ./docs/10.x/cache.md:1
#: ./docs/11.x/cache.md:1
#: ./docs/master/cache.md:1
msgctxt "H1"
msgid "Cache"
msgstr ""

#: ./docs/8.x/cache.md:3
#: ./docs/9.x/cache.md:3
#: ./docs/10.x/cache.md:3
#: ./docs/11.x/cache.md:3
#: ./docs/master/cache.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/cache.md:4
#: ./docs/9.x/cache.md:4
#: ./docs/10.x/cache.md:4
#: ./docs/11.x/cache.md:4
#: ./docs/master/cache.md:4
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/8.x/cache.md:5
#: ./docs/9.x/cache.md:5
#: ./docs/10.x/cache.md:5
#: ./docs/11.x/cache.md:5
#: ./docs/master/cache.md:5
msgctxt "P"
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: ./docs/8.x/cache.md:6
#: ./docs/9.x/cache.md:6
#: ./docs/10.x/cache.md:6
#: ./docs/11.x/cache.md:6
#: ./docs/master/cache.md:6
msgctxt "P"
msgid "[Cache Usage](#cache-usage)"
msgstr ""

#: ./docs/10.x/cache.md:7
#: ./docs/11.x/cache.md:7
#: ./docs/master/cache.md:7
msgctxt "P"
msgid "[Obtaining a Cache Instance](#obtaining-a-cache-instance)"
msgstr ""

#: ./docs/8.x/cache.md:7
#: ./docs/9.x/cache.md:7
msgctxt "P"
msgid "[Obtaining A Cache Instance](#obtaining-a-cache-instance)"
msgstr ""

#: ./docs/10.x/cache.md:8
#: ./docs/11.x/cache.md:8
#: ./docs/master/cache.md:8
msgctxt "P"
msgid "[Retrieving Items From the Cache](#retrieving-items-from-the-cache)"
msgstr ""

#: ./docs/8.x/cache.md:8
#: ./docs/9.x/cache.md:8
msgctxt "P"
msgid "[Retrieving Items From The Cache](#retrieving-items-from-the-cache)"
msgstr ""

#: ./docs/10.x/cache.md:9
#: ./docs/11.x/cache.md:9
#: ./docs/master/cache.md:9
msgctxt "P"
msgid "[Storing Items in the Cache](#storing-items-in-the-cache)"
msgstr ""

#: ./docs/8.x/cache.md:9
#: ./docs/9.x/cache.md:9
msgctxt "P"
msgid "[Storing Items In The Cache](#storing-items-in-the-cache)"
msgstr ""

#: ./docs/10.x/cache.md:10
#: ./docs/11.x/cache.md:10
#: ./docs/master/cache.md:10
msgctxt "P"
msgid "[Removing Items From the Cache](#removing-items-from-the-cache)"
msgstr ""

#: ./docs/8.x/cache.md:10
#: ./docs/9.x/cache.md:10
msgctxt "P"
msgid "[Removing Items From The Cache](#removing-items-from-the-cache)"
msgstr ""

#: ./docs/8.x/cache.md:11
#: ./docs/9.x/cache.md:11
#: ./docs/10.x/cache.md:11
#: ./docs/11.x/cache.md:11
#: ./docs/master/cache.md:11
msgctxt "P"
msgid "[The Cache Helper](#the-cache-helper)"
msgstr ""

#: ./docs/8.x/cache.md:12
#: ./docs/9.x/cache.md:12
msgctxt "P"
msgid "[Cache Tags](#cache-tags)"
msgstr ""

#: ./docs/8.x/cache.md:13
#: ./docs/9.x/cache.md:13
msgctxt "P"
msgid "[Storing Tagged Cache Items](#storing-tagged-cache-items)"
msgstr ""

#: ./docs/8.x/cache.md:14
#: ./docs/9.x/cache.md:14
msgctxt "P"
msgid "[Accessing Tagged Cache Items](#accessing-tagged-cache-items)"
msgstr ""

#: ./docs/8.x/cache.md:15
#: ./docs/9.x/cache.md:15
msgctxt "P"
msgid "[Removing Tagged Cache Items](#removing-tagged-cache-items)"
msgstr ""

#: ./docs/8.x/cache.md:16
#: ./docs/9.x/cache.md:16
#: ./docs/10.x/cache.md:12
#: ./docs/11.x/cache.md:12
#: ./docs/master/cache.md:12
msgctxt "P"
msgid "[Atomic Locks](#atomic-locks)"
msgstr ""

#: ./docs/10.x/cache.md:17
#: ./docs/11.x/cache.md:16
#: ./docs/master/cache.md:16
msgctxt "P"
msgid "[Writing the Driver](#writing-the-driver)"
msgstr ""

#: ./docs/8.x/cache.md:17
#: ./docs/9.x/cache.md:17
#: ./docs/10.x/cache.md:13
msgctxt "P"
msgid "[Driver Prerequisites](#lock-driver-prerequisites)"
msgstr ""

#: ./docs/10.x/cache.md:18
#: ./docs/11.x/cache.md:17
#: ./docs/master/cache.md:17
msgctxt "P"
msgid "[Registering the Driver](#registering-the-driver)"
msgstr ""

#: ./docs/8.x/cache.md:18
#: ./docs/9.x/cache.md:18
#: ./docs/10.x/cache.md:14
#: ./docs/11.x/cache.md:13
#: ./docs/master/cache.md:13
msgctxt "P"
msgid "[Managing Locks](#managing-locks)"
msgstr ""

#: ./docs/8.x/cache.md:19
#: ./docs/9.x/cache.md:19
#: ./docs/10.x/cache.md:15
#: ./docs/11.x/cache.md:14
#: ./docs/master/cache.md:14
msgctxt "P"
msgid "[Managing Locks Across Processes](#managing-locks-across-processes)"
msgstr ""

#: ./docs/8.x/cache.md:20
#: ./docs/9.x/cache.md:20
#: ./docs/10.x/cache.md:16
#: ./docs/11.x/cache.md:15
#: ./docs/master/cache.md:15
msgctxt "P"
msgid "[Adding Custom Cache Drivers](#adding-custom-cache-drivers)"
msgstr ""

#: ./docs/8.x/cache.md:21
#: ./docs/9.x/cache.md:21
msgctxt "P"
msgid "[Writing The Driver](#writing-the-driver)"
msgstr ""

#: ./docs/8.x/cache.md:22
#: ./docs/9.x/cache.md:22
msgctxt "P"
msgid "[Registering The Driver](#registering-the-driver)"
msgstr ""

#: ./docs/8.x/cache.md:23
#: ./docs/9.x/cache.md:23
#: ./docs/10.x/cache.md:19
#: ./docs/11.x/cache.md:18
#: ./docs/master/cache.md:18
msgctxt "P"
msgid "[Events](#events)"
msgstr ""

#: ./docs/8.x/cache.md:25
#: ./docs/9.x/cache.md:25
#: ./docs/10.x/cache.md:21
#: ./docs/11.x/cache.md:20
#: ./docs/master/cache.md:20
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:26
#: ./docs/9.x/cache.md:26
#: ./docs/10.x/cache.md:22
#: ./docs/11.x/cache.md:21
#: ./docs/master/cache.md:21
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/cache.md:28
#: ./docs/9.x/cache.md:28
#: ./docs/10.x/cache.md:24
#: ./docs/11.x/cache.md:23
#: ./docs/master/cache.md:23
msgctxt "P"
msgid "Some of the data retrieval or processing tasks performed by your application could be CPU intensive or take several seconds to complete. When this is the case, it is common to cache the retrieved data for a time so it can be retrieved quickly on subsequent requests for the same data. The cached data is usually stored in a very fast data store such as [Memcached](https://memcached.org) or [Redis](https://redis.io)."
msgstr ""

#: ./docs/11.x/cache.md:30
#: ./docs/master/cache.md:30
msgctxt "P"
msgid "Your application's cache configuration file is located at `config/cache.php`. In this file, you may specify which cache store you would like to be used by default throughout your application. Laravel supports popular caching backends like [Memcached](https://memcached.org), [Redis](https://redis.io), [DynamoDB](https://aws.amazon.com/dynamodb), and relational databases out of the box. In addition, a file based cache driver is available, while `array` and \"null\" cache drivers provide convenient cache backends for your automated tests."
msgstr ""

#: ./docs/8.x/cache.md:30
#: ./docs/9.x/cache.md:30
#: ./docs/10.x/cache.md:26
#: ./docs/11.x/cache.md:25
#: ./docs/master/cache.md:25
msgctxt "P"
msgid "Thankfully, Laravel provides an expressive, unified API for various cache backends, allowing you to take advantage of their blazing fast data retrieval and speed up your web application."
msgstr ""

#: ./docs/11.x/cache.md:32
#: ./docs/master/cache.md:32
msgctxt "P"
msgid "The cache configuration file also contains a variety of other options that you may review. By default, Laravel is configured to use the `database` cache driver, which stores the serialized, cached objects in your application's database."
msgstr ""

#: ./docs/8.x/cache.md:32
#: ./docs/9.x/cache.md:32
#: ./docs/10.x/cache.md:28
#: ./docs/11.x/cache.md:27
#: ./docs/master/cache.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:33
#: ./docs/9.x/cache.md:33
#: ./docs/10.x/cache.md:29
#: ./docs/11.x/cache.md:28
#: ./docs/master/cache.md:28
msgctxt "H2"
msgid "Configuration"
msgstr ""

#: ./docs/8.x/cache.md:35
#: ./docs/9.x/cache.md:35
#: ./docs/10.x/cache.md:31
msgctxt "P"
msgid "Your application's cache configuration file is located at `config/cache.php`. In this file, you may specify which cache driver you would like to be used by default throughout your application. Laravel supports popular caching backends like [Memcached](https://memcached.org), [Redis](https://redis.io), [DynamoDB](https://aws.amazon.com/dynamodb), and relational databases out of the box. In addition, a file based cache driver is available, while `array` and \"null\" cache drivers provide convenient cache backends for your automated tests."
msgstr ""

#: ./docs/8.x/cache.md:37
#: ./docs/9.x/cache.md:37
#: ./docs/10.x/cache.md:33
msgctxt "P"
msgid "The cache configuration file also contains various other options, which are documented within the file, so make sure to read over these options. By default, Laravel is configured to use the `file` cache driver, which stores the serialized, cached objects on the server's filesystem. For larger applications, it is recommended that you use a more robust driver such as Memcached or Redis. You may even configure multiple cache configurations for the same driver."
msgstr ""

#: ./docs/8.x/cache.md:39
#: ./docs/9.x/cache.md:39
#: ./docs/10.x/cache.md:35
#: ./docs/11.x/cache.md:34
#: ./docs/master/cache.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"driver-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/11.x/cache.md:40
#: ./docs/master/cache.md:40
msgctxt "P"
msgid "When using the `database` cache driver, you will need a database table to contain the cache data. Typically, this is included in Laravel's default `0001_01_01_000001_create_cache_table.php` [database migration](/docs/{{version}}/migrations); however, if your application does not contain this migration, you may use the `make:cache-table` Artisan command to create it:"
msgstr ""

#: ./docs/8.x/cache.md:40
#: ./docs/8.x/cache.md:301
#: ./docs/9.x/cache.md:40
#: ./docs/9.x/cache.md:307
#: ./docs/10.x/cache.md:36
#: ./docs/10.x/cache.md:272
#: ./docs/11.x/cache.md:35
#: ./docs/master/cache.md:35
msgctxt "H3"
msgid "Driver Prerequisites"
msgstr ""

#: ./docs/11.x/cache.md:42
#: ./docs/master/cache.md:42
msgctxt "CODE: shell"
msgid ""
"php artisan make:cache-table\n"
"\n"
"php artisan migrate"
msgstr ""

#: ./docs/8.x/cache.md:42
#: ./docs/9.x/cache.md:42
#: ./docs/10.x/cache.md:38
#: ./docs/11.x/cache.md:37
#: ./docs/master/cache.md:37
#~ msgctxt "P"
#~ msgid "<a name=\"prerequisites-database\"></a>"
#~ msgstr ""

#: ./docs/10.x/cache.md:43
msgctxt "CODE"
msgid ""
"Schema::create('cache', function (Blueprint $table) {\n"
"    $table->string('key')->unique();\n"
"    $table->text('value');\n"
"    $table->integer('expiration');\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:43
#: ./docs/8.x/cache.md:304
#: ./docs/9.x/cache.md:43
#: ./docs/9.x/cache.md:310
#: ./docs/10.x/cache.md:39
#: ./docs/10.x/cache.md:275
#: ./docs/11.x/cache.md:38
#: ./docs/master/cache.md:38
msgctxt "H4"
msgid "Database"
msgstr ""

#: ./docs/8.x/cache.md:45
msgctxt "P"
msgid "When using the `database` cache driver, you will need to setup a table to contain the cache items. You'll find an example `Schema` declaration for the table below:"
msgstr ""

#: ./docs/9.x/cache.md:45
#: ./docs/10.x/cache.md:41
msgctxt "P"
msgid "When using the `database` cache driver, you will need to set up a table to contain the cache items. You'll find an example `Schema` declaration for the table below:"
msgstr ""

#: ./docs/8.x/cache.md:47
#: ./docs/9.x/cache.md:47
msgctxt "CODE"
msgid ""
"Schema::create('cache', function ($table) {\n"
"    $table->string('key')->unique();\n"
"    $table->text('value');\n"
"    $table->integer('expiration');\n"
"});"
msgstr ""

#: ./docs/11.x/cache.md:53
#: ./docs/master/cache.md:53
msgctxt "CODE"
msgid ""
"'memcached' => [\n"
"    // ...\n"
"\n"
"    'servers' => [\n"
"        [\n"
"            'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n"
"            'port' => env('MEMCACHED_PORT', 11211),\n"
"            'weight' => 100,\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/cache.md:53
#: ./docs/9.x/cache.md:54
#: ./docs/10.x/cache.md:50
msgctxt "P"
msgid "You may also use the `php artisan cache:table` Artisan command to generate a migration with the proper schema."
msgstr ""

#: ./docs/8.x/cache.md:55
#: ./docs/9.x/cache.md:56
#: ./docs/10.x/cache.md:52
#: ./docs/11.x/cache.md:48
#: ./docs/master/cache.md:48
#~ msgctxt "P"
#~ msgid "<a name=\"memcached\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:56
#: ./docs/9.x/cache.md:57
#: ./docs/10.x/cache.md:53
#: ./docs/11.x/cache.md:49
#: ./docs/master/cache.md:49
msgctxt "H4"
msgid "Memcached"
msgstr ""

#: ./docs/8.x/cache.md:58
#: ./docs/9.x/cache.md:59
#: ./docs/10.x/cache.md:55
#: ./docs/11.x/cache.md:51
#: ./docs/master/cache.md:51
msgctxt "P"
msgid "Using the Memcached driver requires the [Memcached PECL package](https://pecl.php.net/package/memcached) to be installed. You may list all of your Memcached servers in the `config/cache.php` configuration file. This file already contains a `memcached.servers` entry to get you started:"
msgstr ""

#: ./docs/8.x/cache.md:60
#: ./docs/9.x/cache.md:61
#: ./docs/10.x/cache.md:57
msgctxt "CODE"
msgid ""
"'memcached' => [\n"
"    'servers' => [\n"
"        [\n"
"            'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n"
"            'port' => env('MEMCACHED_PORT', 11211),\n"
"            'weight' => 100,\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/cache.md:67
#: ./docs/master/cache.md:67
msgctxt "CODE"
msgid ""
"'memcached' => [\n"
"    // ...\n"
"\n"
"    'servers' => [\n"
"        [\n"
"            'host' => '/var/run/memcached/memcached.sock',\n"
"            'port' => 0,\n"
"            'weight' => 100\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/cache.md:70
#: ./docs/9.x/cache.md:71
#: ./docs/10.x/cache.md:67
#: ./docs/11.x/cache.md:65
#: ./docs/master/cache.md:65
msgctxt "P"
msgid "If needed, you may set the `host` option to a UNIX socket path. If you do this, the `port` option should be set to `0`:"
msgstr ""

#: ./docs/8.x/cache.md:72
#: ./docs/9.x/cache.md:73
#: ./docs/10.x/cache.md:69
msgctxt "CODE"
msgid ""
"'memcached' => [\n"
"    [\n"
"        'host' => '/var/run/memcached/memcached.sock',\n"
"        'port' => 0,\n"
"        'weight' => 100\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/cache.md:80
#: ./docs/9.x/cache.md:81
#: ./docs/10.x/cache.md:77
#: ./docs/11.x/cache.md:79
#: ./docs/master/cache.md:79
#~ msgctxt "P"
#~ msgid "<a name=\"redis\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:81
#: ./docs/9.x/cache.md:82
#: ./docs/10.x/cache.md:78
#: ./docs/11.x/cache.md:80
#: ./docs/master/cache.md:80
msgctxt "H4"
msgid "Redis"
msgstr ""

#: ./docs/11.x/cache.md:82
#: ./docs/master/cache.md:82
msgctxt "P"
msgid "Before using a Redis cache with Laravel, you will need to either install the PhpRedis PHP extension via PECL or install the `predis/predis` package (~2.0) via Composer. [Laravel Sail](/docs/{{version}}/sail) already includes this extension. In addition, official Laravel deployment platforms such as [Laravel Forge](https://forge.laravel.com) and [Laravel Vapor](https://vapor.laravel.com) have the PhpRedis extension installed by default."
msgstr ""

#: ./docs/8.x/cache.md:83
#: ./docs/9.x/cache.md:84
#: ./docs/10.x/cache.md:80
msgctxt "P"
msgid "Before using a Redis cache with Laravel, you will need to either install the PhpRedis PHP extension via PECL or install the `predis/predis` package (~1.0) via Composer. [Laravel Sail](/docs/{{version}}/sail) already includes this extension. In addition, official Laravel deployment platforms such as [Laravel Forge](https://forge.laravel.com) and [Laravel Vapor](https://vapor.laravel.com) have the PhpRedis extension installed by default."
msgstr ""

#: ./docs/8.x/cache.md:85
#: ./docs/9.x/cache.md:86
#: ./docs/10.x/cache.md:82
#: ./docs/11.x/cache.md:84
#: ./docs/master/cache.md:84
msgctxt "P"
msgid "For more information on configuring Redis, consult its [Laravel documentation page](/docs/{{version}}/redis#configuration)."
msgstr ""

#: ./docs/8.x/cache.md:87
#: ./docs/9.x/cache.md:88
#: ./docs/10.x/cache.md:84
#: ./docs/11.x/cache.md:86
#: ./docs/master/cache.md:86
#~ msgctxt "P"
#~ msgid "<a name=\"dynamodb\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:88
#: ./docs/9.x/cache.md:89
#: ./docs/10.x/cache.md:85
#: ./docs/11.x/cache.md:87
#: ./docs/master/cache.md:87
msgctxt "H4"
msgid "DynamoDB"
msgstr ""

#: ./docs/11.x/cache.md:89
#: ./docs/master/cache.md:89
msgctxt "P"
msgid "Before using the [DynamoDB](https://aws.amazon.com/dynamodb) cache driver, you must create a DynamoDB table to store all of the cached data. Typically, this table should be named `cache`. However, you should name the table based on the value of the `stores.dynamodb.table` configuration value within the `cache` configuration file. The table name may also be set via the `DYNAMODB_CACHE_TABLE` environment variable."
msgstr ""

#: ./docs/8.x/cache.md:90
#: ./docs/9.x/cache.md:91
#: ./docs/10.x/cache.md:87
msgctxt "P"
msgid "Before using the [DynamoDB](https://aws.amazon.com/dynamodb) cache driver, you must create a DynamoDB table to store all of the cached data. Typically, this table should be named `cache`. However, you should name the table based on the value of the `stores.dynamodb.table` configuration value within your application's `cache` configuration file."
msgstr ""

#: ./docs/8.x/cache.md:92
#: ./docs/9.x/cache.md:93
#: ./docs/10.x/cache.md:89
#: ./docs/11.x/cache.md:91
#: ./docs/master/cache.md:91
msgctxt "P"
msgid "This table should also have a string partition key with a name that corresponds to the value of the `stores.dynamodb.attributes.key` configuration item within your application's `cache` configuration file. By default, the partition key should be named `key`."
msgstr ""

#: ./docs/11.x/cache.md:93
msgctxt "P"
msgid "Typically, DynamoDB will not proactively remove expired items from a table. Therefore, you should [enable Time to Live (TTL)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html) on the table. When configuring the table's TTL settings, you should set the TTL attribute name to `expires_at`."
msgstr ""

#: ./docs/8.x/cache.md:94
#: ./docs/9.x/cache.md:95
#: ./docs/10.x/cache.md:91
#: ./docs/11.x/cache.md:121
#: ./docs/master/cache.md:93
#~ msgctxt "P"
#~ msgid "<a name=\"cache-usage\"></a>"
#~ msgstr ""

#: ./docs/10.x/cache.md:95
#: ./docs/11.x/cache.md:125
#: ./docs/master/cache.md:97
msgctxt "H3"
msgid "Obtaining a Cache Instance"
msgstr ""

#: ./docs/11.x/cache.md:95
msgctxt "P"
msgid "Next, install the AWS SDK so that your Laravel application can communicate with DynamoDB:"
msgstr ""

#: ./docs/8.x/cache.md:95
#: ./docs/9.x/cache.md:96
#: ./docs/10.x/cache.md:92
#: ./docs/11.x/cache.md:122
#: ./docs/master/cache.md:94
msgctxt "H2"
msgid "Cache Usage"
msgstr ""

#: ./docs/11.x/cache.md:97
msgctxt "CODE: shell"
msgid "composer require aws/aws-sdk-php"
msgstr ""

#: ./docs/8.x/cache.md:97
#: ./docs/9.x/cache.md:98
#: ./docs/10.x/cache.md:94
#: ./docs/11.x/cache.md:124
#: ./docs/master/cache.md:96
#~ msgctxt "P"
#~ msgid "<a name=\"obtaining-a-cache-instance\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:98
#: ./docs/9.x/cache.md:99
msgctxt "H3"
msgid "Obtaining A Cache Instance"
msgstr ""

#: ./docs/10.x/cache.md:99
#: ./docs/11.x/cache.md:129
#: ./docs/master/cache.md:101
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Cache;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show a list of all users of the application.\n"
"     */\n"
"    public function index(): array\n"
"    {\n"
"        $value = Cache::get('key');\n"
"\n"
"        return [\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:100
#: ./docs/9.x/cache.md:101
#: ./docs/10.x/cache.md:97
#: ./docs/11.x/cache.md:127
#: ./docs/master/cache.md:99
msgctxt "P"
msgid "To obtain a cache store instance, you may use the `Cache` facade, which is what we will use throughout this documentation. The `Cache` facade provides convenient, terse access to the underlying implementations of the Laravel cache contracts:"
msgstr ""

#: ./docs/11.x/cache.md:101
msgctxt "P"
msgid "In addition, you should ensure that values are provided for the DynamoDB cache store configuration options. Typically these options, such as `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, should be defined in your application's `.env` configuration file:"
msgstr ""

#: ./docs/8.x/cache.md:102
#: ./docs/9.x/cache.md:103
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Cache;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show a list of all users of the application.\n"
"     *\n"
"     * @return Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        $value = Cache::get('key');\n"
"\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/cache.md:103
msgctxt "CODE: php"
msgid ""
"'dynamodb' => [\n"
"    'driver' => 'dynamodb',\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),\n"
"    'endpoint' => env('DYNAMODB_ENDPOINT'),\n"
"],"
msgstr ""

#: ./docs/11.x/cache.md:114
#~ msgctxt "P"
#~ msgid "<a name=\"mongodb\"></a>"
#~ msgstr ""

#: ./docs/11.x/cache.md:115
msgctxt "H4"
msgid "MongoDB"
msgstr ""

#: ./docs/11.x/cache.md:117
msgctxt "P"
msgid "If you are using MongoDB, a `mongodb` cache driver is provided by the official `mongodb/laravel-mongodb` package and can be configured using a `mongodb` database connection. MongoDB supports TTL indexes, which can be used to automatically clear expired cache items."
msgstr ""

#: ./docs/11.x/cache.md:119
msgctxt "P"
msgid "For more information on configuring MongoDB, please refer to the MongoDB [Cache and Locks documentation](https://www.mongodb.com/docs/drivers/php/laravel-mongodb/current/cache/)."
msgstr ""

#: ./docs/8.x/cache.md:123
#: ./docs/9.x/cache.md:124
#: ./docs/10.x/cache.md:120
#: ./docs/11.x/cache.md:150
#: ./docs/master/cache.md:122
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-multiple-cache-stores\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:124
#: ./docs/9.x/cache.md:125
#: ./docs/10.x/cache.md:121
#: ./docs/11.x/cache.md:151
#: ./docs/master/cache.md:123
msgctxt "H4"
msgid "Accessing Multiple Cache Stores"
msgstr ""

#: ./docs/8.x/cache.md:126
#: ./docs/9.x/cache.md:127
#: ./docs/10.x/cache.md:123
#: ./docs/11.x/cache.md:153
#: ./docs/master/cache.md:125
msgctxt "P"
msgid "Using the `Cache` facade, you may access various cache stores via the `store` method. The key passed to the `store` method should correspond to one of the stores listed in the `stores` configuration array in your `cache` configuration file:"
msgstr ""

#: ./docs/8.x/cache.md:128
#: ./docs/9.x/cache.md:129
#: ./docs/10.x/cache.md:125
#: ./docs/11.x/cache.md:155
#: ./docs/master/cache.md:127
msgctxt "CODE"
msgid ""
"$value = Cache::store('file')->get('foo');\n"
"\n"
"Cache::store('redis')->put('bar', 'baz', 600); // 10 Minutes"
msgstr ""

#: ./docs/10.x/cache.md:130
#: ./docs/11.x/cache.md:160
#: ./docs/master/cache.md:132
msgctxt "H3"
msgid "Retrieving Items From the Cache"
msgstr ""

#: ./docs/8.x/cache.md:132
#: ./docs/9.x/cache.md:133
#: ./docs/10.x/cache.md:129
#: ./docs/11.x/cache.md:159
#: ./docs/master/cache.md:131
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-items-from-the-cache\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:133
#: ./docs/9.x/cache.md:134
msgctxt "H3"
msgid "Retrieving Items From The Cache"
msgstr ""

#: ./docs/8.x/cache.md:135
#: ./docs/9.x/cache.md:136
#: ./docs/10.x/cache.md:132
#: ./docs/11.x/cache.md:162
#: ./docs/master/cache.md:134
msgctxt "P"
msgid "The `Cache` facade's `get` method is used to retrieve items from the cache. If the item does not exist in the cache, `null` will be returned. If you wish, you may pass a second argument to the `get` method specifying the default value you wish to be returned if the item doesn't exist:"
msgstr ""

#: ./docs/8.x/cache.md:137
#: ./docs/9.x/cache.md:138
#: ./docs/10.x/cache.md:134
#: ./docs/11.x/cache.md:164
#: ./docs/master/cache.md:136
msgctxt "CODE"
msgid ""
"$value = Cache::get('key');\n"
"\n"
"$value = Cache::get('key', 'default');"
msgstr ""

#: ./docs/8.x/cache.md:141
#: ./docs/9.x/cache.md:142
#: ./docs/10.x/cache.md:138
#: ./docs/11.x/cache.md:168
#: ./docs/master/cache.md:140
msgctxt "P"
msgid "You may even pass a closure as the default value. The result of the closure will be returned if the specified item does not exist in the cache. Passing a closure allows you to defer the retrieval of default values from a database or other external service:"
msgstr ""

#: ./docs/8.x/cache.md:143
msgctxt "CODE"
msgid ""
"$value = Cache::get('key', function () {\n"
"    return DB::table(...)->get();\n"
"});"
msgstr ""

#: ./docs/10.x/cache.md:144
#: ./docs/11.x/cache.md:174
#: ./docs/master/cache.md:146
#~ msgctxt "P"
#~ msgid "<a name=\"determining-item-existence\"></a>"
#~ msgstr ""

#: ./docs/9.x/cache.md:144
#: ./docs/10.x/cache.md:140
#: ./docs/11.x/cache.md:170
#: ./docs/master/cache.md:142
msgctxt "CODE"
msgid ""
"$value = Cache::get('key', function () {\n"
"    return DB::table(/* ... */)->get();\n"
"});"
msgstr ""

#: ./docs/10.x/cache.md:145
#: ./docs/11.x/cache.md:175
#: ./docs/master/cache.md:147
msgctxt "H4"
msgid "Determining Item Existence"
msgstr ""

#: ./docs/8.x/cache.md:147
#: ./docs/9.x/cache.md:148
#~ msgctxt "P"
#~ msgid "<a name=\"checking-for-item-existence\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:148
#: ./docs/9.x/cache.md:149
msgctxt "H4"
msgid "Checking For Item Existence"
msgstr ""

#: ./docs/10.x/cache.md:149
#: ./docs/11.x/cache.md:179
#: ./docs/master/cache.md:151
msgctxt "CODE"
msgid ""
"if (Cache::has('key')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:150
#: ./docs/9.x/cache.md:151
#: ./docs/10.x/cache.md:147
#: ./docs/11.x/cache.md:177
#: ./docs/master/cache.md:149
msgctxt "P"
msgid "The `has` method may be used to determine if an item exists in the cache. This method will also return `false` if the item exists but its value is `null`:"
msgstr ""

#: ./docs/8.x/cache.md:152
#: ./docs/9.x/cache.md:153
msgctxt "CODE"
msgid ""
"if (Cache::has('key')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:156
#: ./docs/9.x/cache.md:157
#: ./docs/10.x/cache.md:153
#: ./docs/11.x/cache.md:183
#: ./docs/master/cache.md:155
#~ msgctxt "P"
#~ msgid "<a name=\"incrementing-decrementing-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:157
#: ./docs/9.x/cache.md:158
#: ./docs/10.x/cache.md:154
#: ./docs/11.x/cache.md:184
#: ./docs/master/cache.md:156
msgctxt "H4"
msgid "Incrementing / Decrementing Values"
msgstr ""

#: ./docs/10.x/cache.md:158
#: ./docs/11.x/cache.md:188
#: ./docs/master/cache.md:160
msgctxt "CODE"
msgid ""
"// Initialize the value if it does not exist...\n"
"Cache::add('key', 0, now()->addHours(4));\n"
"\n"
"// Increment or decrement the value...\n"
"Cache::increment('key');\n"
"Cache::increment('key', $amount);\n"
"Cache::decrement('key');\n"
"Cache::decrement('key', $amount);"
msgstr ""

#: ./docs/8.x/cache.md:159
#: ./docs/9.x/cache.md:160
#: ./docs/10.x/cache.md:156
#: ./docs/11.x/cache.md:186
#: ./docs/master/cache.md:158
msgctxt "P"
msgid "The `increment` and `decrement` methods may be used to adjust the value of integer items in the cache. Both of these methods accept an optional second argument indicating the amount by which to increment or decrement the item's value:"
msgstr ""

#: ./docs/8.x/cache.md:161
#: ./docs/9.x/cache.md:162
msgctxt "CODE"
msgid ""
"Cache::increment('key');\n"
"Cache::increment('key', $amount);\n"
"Cache::decrement('key');\n"
"Cache::decrement('key', $amount);"
msgstr ""

#: ./docs/8.x/cache.md:166
#: ./docs/9.x/cache.md:167
#: ./docs/10.x/cache.md:167
#: ./docs/11.x/cache.md:197
#: ./docs/master/cache.md:169
#~ msgctxt "P"
#~ msgid "<a name=\"retrieve-store\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:167
#: ./docs/9.x/cache.md:168
msgctxt "H4"
msgid "Retrieve & Store"
msgstr ""

#: ./docs/10.x/cache.md:168
#: ./docs/11.x/cache.md:198
#: ./docs/master/cache.md:170
msgctxt "H4"
msgid "Retrieve and Store"
msgstr ""

#: ./docs/8.x/cache.md:169
#: ./docs/9.x/cache.md:170
#: ./docs/10.x/cache.md:170
#: ./docs/11.x/cache.md:200
#: ./docs/master/cache.md:172
msgctxt "P"
msgid "Sometimes you may wish to retrieve an item from the cache, but also store a default value if the requested item doesn't exist. For example, you may wish to retrieve all users from the cache or, if they don't exist, retrieve them from the database and add them to the cache. You may do this using the `Cache::remember` method:"
msgstr ""

#: ./docs/8.x/cache.md:171
#: ./docs/9.x/cache.md:172
#: ./docs/10.x/cache.md:172
#: ./docs/11.x/cache.md:202
#: ./docs/master/cache.md:174
msgctxt "CODE"
msgid ""
"$value = Cache::remember('users', $seconds, function () {\n"
"    return DB::table('users')->get();\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:175
#: ./docs/9.x/cache.md:176
#: ./docs/10.x/cache.md:176
#: ./docs/11.x/cache.md:206
#: ./docs/master/cache.md:178
msgctxt "P"
msgid "If the item does not exist in the cache, the closure passed to the `remember` method will be executed and its result will be placed in the cache."
msgstr ""

#: ./docs/8.x/cache.md:177
#: ./docs/9.x/cache.md:178
#: ./docs/10.x/cache.md:178
#: ./docs/11.x/cache.md:208
#: ./docs/master/cache.md:180
msgctxt "P"
msgid "You may use the `rememberForever` method to retrieve an item from the cache or store it forever if it does not exist:"
msgstr ""

#: ./docs/8.x/cache.md:179
#: ./docs/9.x/cache.md:180
#: ./docs/10.x/cache.md:180
#: ./docs/11.x/cache.md:210
#: ./docs/master/cache.md:182
msgctxt "CODE"
msgid ""
"$value = Cache::rememberForever('users', function () {\n"
"    return DB::table('users')->get();\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:183
#: ./docs/9.x/cache.md:184
#: ./docs/10.x/cache.md:184
#: ./docs/11.x/cache.md:227
#: ./docs/master/cache.md:186
#~ msgctxt "P"
#~ msgid "<a name=\"retrieve-delete\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:184
#: ./docs/9.x/cache.md:185
msgctxt "H4"
msgid "Retrieve & Delete"
msgstr ""

#: ./docs/10.x/cache.md:185
#: ./docs/11.x/cache.md:228
#: ./docs/master/cache.md:187
msgctxt "H4"
msgid "Retrieve and Delete"
msgstr ""

#: ./docs/8.x/cache.md:186
#: ./docs/9.x/cache.md:187
#: ./docs/10.x/cache.md:187
#: ./docs/11.x/cache.md:230
#: ./docs/master/cache.md:189
msgctxt "P"
msgid "If you need to retrieve an item from the cache and then delete the item, you may use the `pull` method. Like the `get` method, `null` will be returned if the item does not exist in the cache:"
msgstr ""

#: ./docs/8.x/cache.md:188
#: ./docs/9.x/cache.md:189
#: ./docs/10.x/cache.md:189
#: ./docs/master/cache.md:191
msgctxt "CODE"
msgid "$value = Cache::pull('key');"
msgstr ""

#: ./docs/8.x/cache.md:190
#: ./docs/9.x/cache.md:191
#: ./docs/10.x/cache.md:191
#: ./docs/11.x/cache.md:236
#: ./docs/master/cache.md:193
#~ msgctxt "P"
#~ msgid "<a name=\"storing-items-in-the-cache\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:191
#: ./docs/9.x/cache.md:192
msgctxt "H3"
msgid "Storing Items In The Cache"
msgstr ""

#: ./docs/10.x/cache.md:192
#: ./docs/11.x/cache.md:237
#: ./docs/master/cache.md:194
msgctxt "H3"
msgid "Storing Items in the Cache"
msgstr ""

#: ./docs/8.x/cache.md:193
#: ./docs/9.x/cache.md:194
#: ./docs/10.x/cache.md:194
#: ./docs/11.x/cache.md:239
#: ./docs/master/cache.md:196
msgctxt "P"
msgid "You may use the `put` method on the `Cache` facade to store items in the cache:"
msgstr ""

#: ./docs/8.x/cache.md:195
#: ./docs/9.x/cache.md:196
#: ./docs/10.x/cache.md:196
#: ./docs/11.x/cache.md:241
#: ./docs/master/cache.md:198
msgctxt "CODE"
msgid "Cache::put('key', 'value', $seconds = 10);"
msgstr ""

#: ./docs/8.x/cache.md:197
#: ./docs/9.x/cache.md:198
#: ./docs/10.x/cache.md:198
#: ./docs/11.x/cache.md:243
#: ./docs/master/cache.md:200
msgctxt "P"
msgid "If the storage time is not passed to the `put` method, the item will be stored indefinitely:"
msgstr ""

#: ./docs/8.x/cache.md:199
#: ./docs/9.x/cache.md:200
#: ./docs/10.x/cache.md:200
#: ./docs/11.x/cache.md:245
#: ./docs/master/cache.md:202
msgctxt "CODE"
msgid "Cache::put('key', 'value');"
msgstr ""

#: ./docs/8.x/cache.md:201
#: ./docs/9.x/cache.md:202
#: ./docs/10.x/cache.md:202
#: ./docs/11.x/cache.md:247
#: ./docs/master/cache.md:204
msgctxt "P"
msgid "Instead of passing the number of seconds as an integer, you may also pass a `DateTime` instance representing the desired expiration time of the cached item:"
msgstr ""

#: ./docs/8.x/cache.md:203
#: ./docs/9.x/cache.md:204
#: ./docs/10.x/cache.md:204
#: ./docs/11.x/cache.md:249
#: ./docs/master/cache.md:206
msgctxt "CODE"
msgid "Cache::put('key', 'value', now()->addMinutes(10));"
msgstr ""

#: ./docs/8.x/cache.md:205
#: ./docs/9.x/cache.md:206
#: ./docs/10.x/cache.md:206
#: ./docs/11.x/cache.md:251
#: ./docs/master/cache.md:208
#~ msgctxt "P"
#~ msgid "<a name=\"store-if-not-present\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:206
#: ./docs/9.x/cache.md:207
msgctxt "H4"
msgid "Store If Not Present"
msgstr ""

#: ./docs/10.x/cache.md:207
#: ./docs/11.x/cache.md:252
#: ./docs/master/cache.md:209
msgctxt "H4"
msgid "Store if Not Present"
msgstr ""

#: ./docs/8.x/cache.md:208
#: ./docs/9.x/cache.md:209
#: ./docs/10.x/cache.md:209
#: ./docs/11.x/cache.md:254
#: ./docs/master/cache.md:211
msgctxt "P"
msgid "The `add` method will only add the item to the cache if it does not already exist in the cache store. The method will return `true` if the item is actually added to the cache. Otherwise, the method will return `false`. The `add` method is an atomic operation:"
msgstr ""

#: ./docs/8.x/cache.md:210
#: ./docs/9.x/cache.md:211
#: ./docs/10.x/cache.md:211
#: ./docs/11.x/cache.md:256
#: ./docs/master/cache.md:213
msgctxt "CODE"
msgid "Cache::add('key', 'value', $seconds);"
msgstr ""

#: ./docs/8.x/cache.md:212
#: ./docs/9.x/cache.md:213
#: ./docs/10.x/cache.md:213
#: ./docs/11.x/cache.md:258
#: ./docs/master/cache.md:215
#~ msgctxt "P"
#~ msgid "<a name=\"storing-items-forever\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:213
#: ./docs/9.x/cache.md:214
#: ./docs/10.x/cache.md:214
#: ./docs/11.x/cache.md:259
#: ./docs/master/cache.md:216
msgctxt "H4"
msgid "Storing Items Forever"
msgstr ""

#: ./docs/11.x/cache.md:214
#~ msgctxt "P"
#~ msgid "<a name=\"swr\"></a>"
#~ msgstr ""

#: ./docs/11.x/cache.md:215
msgctxt "H4"
msgid "Stale While Revalidate"
msgstr ""

#: ./docs/8.x/cache.md:215
#: ./docs/9.x/cache.md:216
#: ./docs/10.x/cache.md:216
#: ./docs/11.x/cache.md:261
#: ./docs/master/cache.md:218
msgctxt "P"
msgid "The `forever` method may be used to store an item in the cache permanently. Since these items will not expire, they must be manually removed from the cache using the `forget` method:"
msgstr ""

#: ./docs/11.x/cache.md:217
msgctxt "P"
msgid "When using the `Cache::remember` method, some users may experience slow response times if the cached value has expired. For certain types of data, it can be useful to allow partially stale data to be served while the cached value is recalculated in the background, preventing some users from experiencing slow response times while cached values are calculated. This is often referred to as the \"stale-while-revalidate\" pattern, and the `Cache::flexible` method provides an implementation of this pattern."
msgstr ""

#: ./docs/8.x/cache.md:217
#: ./docs/9.x/cache.md:218
#: ./docs/10.x/cache.md:218
#: ./docs/11.x/cache.md:263
#: ./docs/master/cache.md:220
msgctxt "CODE"
msgid "Cache::forever('key', 'value');"
msgstr ""

#: ./docs/11.x/cache.md:219
msgctxt "P"
msgid "The flexible method accepts an array that specifies how long the cached value is considered “fresh” and when it becomes “stale.” The first value in the array represents the number of seconds the cache is considered fresh, while the second value defines how long it can be served as stale data before recalculation is necessary."
msgstr ""

#: ./docs/8.x/cache.md:219
#: ./docs/9.x/cache.md:221
#: ./docs/10.x/cache.md:221
#: ./docs/11.x/cache.md:266
#: ./docs/master/cache.md:223
msgctxt "P"
msgid "If you are using the Memcached driver, items that are stored \"forever\" may be removed when the cache reaches its size limit."
msgstr ""

#: ./docs/11.x/cache.md:221
msgctxt "P"
msgid "If a request is made within the fresh period (before the first value), the cache is returned immediately without recalculation. If a request is made during the stale period (between the two values), the stale value is served to the user, and a [deferred function](/docs/{{version}}/helpers#deferred-functions) is registered to refresh the cached value after the response is sent to the user. If a request is made after the second value, the cache is considered expired, and the value is recalculated immediately, which may result in a slower response for the user:"
msgstr ""

#: ./docs/8.x/cache.md:221
#: ./docs/9.x/cache.md:223
#: ./docs/10.x/cache.md:223
#: ./docs/11.x/cache.md:268
#: ./docs/master/cache.md:225
#~ msgctxt "P"
#~ msgid "<a name=\"removing-items-from-the-cache\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:222
#: ./docs/9.x/cache.md:224
msgctxt "H3"
msgid "Removing Items From The Cache"
msgstr ""

#: ./docs/11.x/cache.md:223
msgctxt "CODE"
msgid ""
"$value = Cache::flexible('users', [5, 10], function () {\n"
"    return DB::table('users')->get();\n"
"});"
msgstr ""

#: ./docs/10.x/cache.md:224
#: ./docs/11.x/cache.md:269
#: ./docs/master/cache.md:226
msgctxt "H3"
msgid "Removing Items From the Cache"
msgstr ""

#: ./docs/8.x/cache.md:224
#: ./docs/9.x/cache.md:226
#: ./docs/10.x/cache.md:226
#: ./docs/11.x/cache.md:271
#: ./docs/master/cache.md:228
msgctxt "P"
msgid "You may remove items from the cache using the `forget` method:"
msgstr ""

#: ./docs/8.x/cache.md:226
#: ./docs/9.x/cache.md:228
#: ./docs/10.x/cache.md:228
#: ./docs/11.x/cache.md:273
#: ./docs/master/cache.md:230
msgctxt "CODE"
msgid "Cache::forget('key');"
msgstr ""

#: ./docs/8.x/cache.md:228
#: ./docs/9.x/cache.md:230
#: ./docs/10.x/cache.md:230
#: ./docs/11.x/cache.md:275
#: ./docs/master/cache.md:232
msgctxt "P"
msgid "You may also remove items by providing a zero or negative number of expiration seconds:"
msgstr ""

#: ./docs/8.x/cache.md:230
#: ./docs/9.x/cache.md:232
#: ./docs/10.x/cache.md:232
#: ./docs/11.x/cache.md:277
#: ./docs/master/cache.md:234
msgctxt "CODE"
msgid ""
"Cache::put('key', 'value', 0);\n"
"\n"
"Cache::put('key', 'value', -5);"
msgstr ""

#: ./docs/11.x/cache.md:232
msgctxt "CODE"
msgid ""
"$value = Cache::pull('key');\n"
"\n"
"$value = Cache::pull('key', 'default');"
msgstr ""

#: ./docs/8.x/cache.md:234
#: ./docs/9.x/cache.md:236
#: ./docs/10.x/cache.md:236
#: ./docs/11.x/cache.md:281
#: ./docs/master/cache.md:238
msgctxt "P"
msgid "You may clear the entire cache using the `flush` method:"
msgstr ""

#: ./docs/8.x/cache.md:236
#: ./docs/9.x/cache.md:238
#: ./docs/10.x/cache.md:238
#: ./docs/11.x/cache.md:283
#: ./docs/master/cache.md:240
msgctxt "CODE"
msgid "Cache::flush();"
msgstr ""

#: ./docs/8.x/cache.md:238
#: ./docs/9.x/cache.md:241
#: ./docs/10.x/cache.md:241
#: ./docs/11.x/cache.md:286
#: ./docs/master/cache.md:243
msgctxt "P"
msgid "Flushing the cache does not respect your configured cache \"prefix\" and will remove all entries from the cache. Consider this carefully when clearing a cache which is shared by other applications."
msgstr ""

#: ./docs/8.x/cache.md:240
#: ./docs/9.x/cache.md:243
#: ./docs/10.x/cache.md:243
#: ./docs/11.x/cache.md:288
#: ./docs/master/cache.md:245
#~ msgctxt "P"
#~ msgid "<a name=\"the-cache-helper\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:241
#: ./docs/9.x/cache.md:244
#: ./docs/10.x/cache.md:244
#: ./docs/11.x/cache.md:289
#: ./docs/master/cache.md:246
msgctxt "H3"
msgid "The Cache Helper"
msgstr ""

#: ./docs/8.x/cache.md:243
#: ./docs/9.x/cache.md:246
#: ./docs/10.x/cache.md:246
#: ./docs/11.x/cache.md:291
#: ./docs/master/cache.md:248
msgctxt "P"
msgid "In addition to using the `Cache` facade, you may also use the global `cache` function to retrieve and store data via the cache. When the `cache` function is called with a single, string argument, it will return the value of the given key:"
msgstr ""

#: ./docs/8.x/cache.md:245
#: ./docs/9.x/cache.md:248
#: ./docs/10.x/cache.md:248
#: ./docs/11.x/cache.md:293
#: ./docs/master/cache.md:250
msgctxt "CODE"
msgid "$value = cache('key');"
msgstr ""

#: ./docs/8.x/cache.md:247
#: ./docs/9.x/cache.md:250
#: ./docs/10.x/cache.md:250
#: ./docs/11.x/cache.md:295
#: ./docs/master/cache.md:252
msgctxt "P"
msgid "If you provide an array of key / value pairs and an expiration time to the function, it will store values in the cache for the specified duration:"
msgstr ""

#: ./docs/8.x/cache.md:249
#: ./docs/9.x/cache.md:252
#: ./docs/10.x/cache.md:252
#: ./docs/11.x/cache.md:297
#: ./docs/master/cache.md:254
msgctxt "CODE"
msgid ""
"cache(['key' => 'value'], $seconds);\n"
"\n"
"cache(['key' => 'value'], now()->addMinutes(10));"
msgstr ""

#: ./docs/8.x/cache.md:253
#: ./docs/9.x/cache.md:256
#: ./docs/10.x/cache.md:256
#: ./docs/11.x/cache.md:301
#: ./docs/master/cache.md:258
msgctxt "P"
msgid "When the `cache` function is called without any arguments, it returns an instance of the `Illuminate\\Contracts\\Cache\\Factory` implementation, allowing you to call other caching methods:"
msgstr ""

#: ./docs/8.x/cache.md:255
#: ./docs/9.x/cache.md:258
#: ./docs/10.x/cache.md:258
#: ./docs/11.x/cache.md:303
#: ./docs/master/cache.md:260
msgctxt "CODE"
msgid ""
"cache()->remember('users', $seconds, function () {\n"
"    return DB::table('users')->get();\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:259
#: ./docs/9.x/cache.md:263
#: ./docs/10.x/cache.md:263
#: ./docs/11.x/cache.md:308
#: ./docs/master/cache.md:265
msgctxt "P"
msgid "When testing call to the global `cache` function, you may use the `Cache::shouldReceive` method just as if you were [testing the facade](/docs/{{version}}/mocking#mocking-facades)."
msgstr ""

#: ./docs/8.x/cache.md:261
#: ./docs/9.x/cache.md:265
#~ msgctxt "P"
#~ msgid "<a name=\"cache-tags\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:262
#: ./docs/9.x/cache.md:266
msgctxt "H2"
msgid "Cache Tags"
msgstr ""

#: ./docs/8.x/cache.md:264
#: ./docs/9.x/cache.md:269
msgctxt "P"
msgid "Cache tags are not supported when using the `file`, `dynamodb`, or `database` cache drivers. Furthermore, when using multiple tags with caches that are stored \"forever\", performance will be best with a driver such as `memcached`, which automatically purges stale records."
msgstr ""

#: ./docs/8.x/cache.md:266
#: ./docs/9.x/cache.md:271
#~ msgctxt "P"
#~ msgid "<a name=\"storing-tagged-cache-items\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:267
#: ./docs/9.x/cache.md:272
msgctxt "H3"
msgid "Storing Tagged Cache Items"
msgstr ""

#: ./docs/8.x/cache.md:269
#: ./docs/9.x/cache.md:274
msgctxt "P"
msgid "Cache tags allow you to tag related items in the cache and then flush all cached values that have been assigned a given tag. You may access a tagged cache by passing in an ordered array of tag names. For example, let's access a tagged cache and `put` a value into the cache:"
msgstr ""

#: ./docs/8.x/cache.md:271
#: ./docs/9.x/cache.md:276
msgctxt "CODE"
msgid ""
"Cache::tags(['people', 'artists'])->put('John', $john, $seconds);\n"
"\n"
"Cache::tags(['people', 'authors'])->put('Anne', $anne, $seconds);"
msgstr ""

#: ./docs/8.x/cache.md:275
#: ./docs/9.x/cache.md:280
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-tagged-cache-items\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:276
#: ./docs/9.x/cache.md:281
msgctxt "H3"
msgid "Accessing Tagged Cache Items"
msgstr ""

#: ./docs/8.x/cache.md:278
msgctxt "P"
msgid "To retrieve a tagged cache item, pass the same ordered list of tags to the `tags` method and then call the `get` method with the key you wish to retrieve:"
msgstr ""

#: ./docs/10.x/cache.md:279
msgctxt "CODE"
msgid ""
"Schema::create('cache_locks', function (Blueprint $table) {\n"
"    $table->string('key')->primary();\n"
"    $table->string('owner');\n"
"    $table->integer('expiration');\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:280
#: ./docs/9.x/cache.md:285
msgctxt "CODE"
msgid ""
"$john = Cache::tags(['people', 'artists'])->get('John');\n"
"\n"
"$anne = Cache::tags(['people', 'authors'])->get('Anne');"
msgstr ""

#: ./docs/9.x/cache.md:283
msgctxt "P"
msgid "Items stored via tags may not be accessed without also providing the tags that were used to store the value. To retrieve a tagged cache item, pass the same ordered list of tags to the `tags` method and then call the `get` method with the key you wish to retrieve:"
msgstr ""

#: ./docs/8.x/cache.md:284
#: ./docs/9.x/cache.md:289
#~ msgctxt "P"
#~ msgid "<a name=\"removing-tagged-cache-items\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:285
#: ./docs/9.x/cache.md:290
msgctxt "H3"
msgid "Removing Tagged Cache Items"
msgstr ""

#: ./docs/10.x/cache.md:286
msgctxt "P"
msgid "If you used the `cache:table` Artisan command to create the database driver's cache table, the migration created by that command already includes a definition for the `cache_locks` table."
msgstr ""

#: ./docs/8.x/cache.md:287
#: ./docs/9.x/cache.md:292
msgctxt "P"
msgid "You may flush all items that are assigned a tag or list of tags. For example, this statement would remove all caches tagged with either `people`, `authors`, or both. So, both `Anne` and `John` would be removed from the cache:"
msgstr ""

#: ./docs/8.x/cache.md:289
#: ./docs/9.x/cache.md:294
msgctxt "CODE"
msgid "Cache::tags(['people', 'authors'])->flush();"
msgstr ""

#: ./docs/8.x/cache.md:291
#: ./docs/9.x/cache.md:296
msgctxt "P"
msgid "In contrast, this statement would remove only cached values tagged with `authors`, so `Anne` would be removed, but not `John`:"
msgstr ""

#: ./docs/8.x/cache.md:293
#: ./docs/9.x/cache.md:298
msgctxt "CODE"
msgid "Cache::tags('authors')->flush();"
msgstr ""

#: ./docs/8.x/cache.md:295
#: ./docs/9.x/cache.md:300
#: ./docs/10.x/cache.md:265
#: ./docs/11.x/cache.md:310
#: ./docs/master/cache.md:267
#~ msgctxt "P"
#~ msgid "<a name=\"atomic-locks\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:296
#: ./docs/9.x/cache.md:301
#: ./docs/10.x/cache.md:266
#: ./docs/11.x/cache.md:311
#: ./docs/master/cache.md:268
msgctxt "H2"
msgid "Atomic Locks"
msgstr ""

#: ./docs/8.x/cache.md:298
#: ./docs/9.x/cache.md:304
#: ./docs/10.x/cache.md:269
#: ./docs/11.x/cache.md:314
#: ./docs/master/cache.md:271
msgctxt "P"
msgid "To utilize this feature, your application must be using the `memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server."
msgstr ""

#: ./docs/8.x/cache.md:300
#: ./docs/9.x/cache.md:306
#: ./docs/10.x/cache.md:271
#~ msgctxt "P"
#~ msgid "<a name=\"lock-driver-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:303
#: ./docs/9.x/cache.md:309
#: ./docs/10.x/cache.md:274
#~ msgctxt "P"
#~ msgid "<a name=\"atomic-locks-prerequisites-database\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:306
#: ./docs/9.x/cache.md:312
#: ./docs/10.x/cache.md:277
msgctxt "P"
msgid "When using the `database` cache driver, you will need to setup a table to contain your application's cache locks. You'll find an example `Schema` declaration for the table below:"
msgstr ""

#: ./docs/8.x/cache.md:308
#: ./docs/9.x/cache.md:314
msgctxt "CODE"
msgid ""
"Schema::create('cache_locks', function ($table) {\n"
"    $table->string('key')->primary();\n"
"    $table->string('owner');\n"
"    $table->integer('expiration');\n"
"});"
msgstr ""

#: ./docs/10.x/cache.md:311
#: ./docs/master/cache.md:296
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Cache\\LockTimeoutException;\n"
"\n"
"$lock = Cache::lock('foo', 10);\n"
"\n"
"try {\n"
"    $lock->block(5);\n"
"\n"
"    // Lock acquired after waiting a maximum of 5 seconds...\n"
"} catch (LockTimeoutException $e) {\n"
"    // Unable to acquire lock...\n"
"} finally {\n"
"    $lock?->release();\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:314
#: ./docs/9.x/cache.md:320
#: ./docs/10.x/cache.md:288
#: ./docs/11.x/cache.md:316
#: ./docs/master/cache.md:273
#~ msgctxt "P"
#~ msgid "<a name=\"managing-locks\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:315
#: ./docs/9.x/cache.md:321
#: ./docs/10.x/cache.md:289
#: ./docs/11.x/cache.md:317
#: ./docs/master/cache.md:274
msgctxt "H3"
msgid "Managing Locks"
msgstr ""

#: ./docs/8.x/cache.md:317
#: ./docs/9.x/cache.md:323
#: ./docs/10.x/cache.md:291
#: ./docs/11.x/cache.md:319
#: ./docs/master/cache.md:276
msgctxt "P"
msgid "Atomic locks allow for the manipulation of distributed locks without worrying about race conditions. For example, [Laravel Forge](https://forge.laravel.com) uses atomic locks to ensure that only one remote task is being executed on a server at a time. You may create and manage locks using the `Cache::lock` method:"
msgstr ""

#: ./docs/8.x/cache.md:319
#: ./docs/9.x/cache.md:325
#: ./docs/10.x/cache.md:293
#: ./docs/11.x/cache.md:321
#: ./docs/master/cache.md:278
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Cache;\n"
"\n"
"$lock = Cache::lock('foo', 10);\n"
"\n"
"if ($lock->get()) {\n"
"    // Lock acquired for 10 seconds...\n"
"\n"
"    $lock->release();\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:329
#: ./docs/9.x/cache.md:335
#: ./docs/10.x/cache.md:303
#: ./docs/11.x/cache.md:331
#: ./docs/master/cache.md:288
msgctxt "P"
msgid "The `get` method also accepts a closure. After the closure is executed, Laravel will automatically release the lock:"
msgstr ""

#: ./docs/8.x/cache.md:331
msgctxt "CODE"
msgid ""
"Cache::lock('foo')->get(function () {\n"
"    // Lock acquired indefinitely and automatically released...\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:335
#: ./docs/9.x/cache.md:341
#: ./docs/10.x/cache.md:309
#: ./docs/master/cache.md:294
msgctxt "P"
msgid "If the lock is not available at the moment you request it, you may instruct Laravel to wait for a specified number of seconds. If the lock can not be acquired within the specified time limit, an `Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown:"
msgstr ""

#: ./docs/11.x/cache.md:337
msgctxt "P"
msgid "If the lock is not available at the moment you request it, you may instruct Laravel to wait for a specified number of seconds. If the lock cannot be acquired within the specified time limit, an `Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown:"
msgstr ""

#: ./docs/8.x/cache.md:337
#: ./docs/9.x/cache.md:343
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Cache\\LockTimeoutException;\n"
"\n"
"$lock = Cache::lock('foo', 10);\n"
"\n"
"try {\n"
"    $lock->block(5);\n"
"\n"
"    // Lock acquired after waiting a maximum of 5 seconds...\n"
"} catch (LockTimeoutException $e) {\n"
"    // Unable to acquire lock...\n"
"} finally {\n"
"    optional($lock)->release();\n"
"}"
msgstr ""

#: ./docs/9.x/cache.md:337
#: ./docs/10.x/cache.md:305
#: ./docs/11.x/cache.md:333
#: ./docs/master/cache.md:290
msgctxt "CODE"
msgid ""
"Cache::lock('foo', 10)->get(function () {\n"
"    // Lock acquired for 10 seconds and automatically released...\n"
"});"
msgstr ""

#: ./docs/11.x/cache.md:339
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Cache\\LockTimeoutException;\n"
"\n"
"$lock = Cache::lock('foo', 10);\n"
"\n"
"try {\n"
"    $lock->block(5);\n"
"\n"
"    // Lock acquired after waiting a maximum of 5 seconds...\n"
"} catch (LockTimeoutException $e) {\n"
"    // Unable to acquire lock...\n"
"} finally {\n"
"    $lock->release();\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:351
#: ./docs/9.x/cache.md:357
#: ./docs/10.x/cache.md:325
#: ./docs/11.x/cache.md:353
#: ./docs/master/cache.md:310
msgctxt "P"
msgid "The example above may be simplified by passing a closure to the `block` method. When a closure is passed to this method, Laravel will attempt to acquire the lock for the specified number of seconds and will automatically release the lock once the closure has been executed:"
msgstr ""

#: ./docs/8.x/cache.md:353
#: ./docs/9.x/cache.md:359
#: ./docs/10.x/cache.md:327
#: ./docs/11.x/cache.md:355
#: ./docs/master/cache.md:312
msgctxt "CODE"
msgid ""
"Cache::lock('foo', 10)->block(5, function () {\n"
"    // Lock acquired after waiting a maximum of 5 seconds...\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:357
#: ./docs/9.x/cache.md:363
#: ./docs/10.x/cache.md:331
#: ./docs/11.x/cache.md:359
#: ./docs/master/cache.md:316
#~ msgctxt "P"
#~ msgid "<a name=\"managing-locks-across-processes\"></a>"
#~ msgstr ""

#: ./docs/10.x/cache.md:358
#: ./docs/11.x/cache.md:386
#: ./docs/master/cache.md:343
msgctxt "H3"
msgid "Writing the Driver"
msgstr ""

#: ./docs/8.x/cache.md:358
#: ./docs/9.x/cache.md:364
#: ./docs/10.x/cache.md:332
#: ./docs/11.x/cache.md:360
#: ./docs/master/cache.md:317
msgctxt "H3"
msgid "Managing Locks Across Processes"
msgstr ""

#: ./docs/8.x/cache.md:360
#: ./docs/9.x/cache.md:366
#: ./docs/10.x/cache.md:334
#: ./docs/11.x/cache.md:362
#: ./docs/master/cache.md:319
msgctxt "P"
msgid "Sometimes, you may wish to acquire a lock in one process and release it in another process. For example, you may acquire a lock during a web request and wish to release the lock at the end of a queued job that is triggered by that request. In this scenario, you should pass the lock's scoped \"owner token\" to the queued job so that the job can re-instantiate the lock using the given token."
msgstr ""

#: ./docs/8.x/cache.md:362
#: ./docs/9.x/cache.md:368
#: ./docs/10.x/cache.md:336
#: ./docs/11.x/cache.md:364
#: ./docs/master/cache.md:321
msgctxt "P"
msgid "In the example below, we will dispatch a queued job if a lock is successfully acquired. In addition, we will pass the lock's owner token to the queued job via the lock's `owner` method:"
msgstr ""

#: ./docs/8.x/cache.md:364
#: ./docs/9.x/cache.md:370
#: ./docs/10.x/cache.md:338
#: ./docs/11.x/cache.md:366
#: ./docs/master/cache.md:323
msgctxt "CODE"
msgid ""
"$podcast = Podcast::find($id);\n"
"\n"
"$lock = Cache::lock('processing', 120);\n"
"\n"
"if ($lock->get()) {\n"
"    ProcessPodcast::dispatch($podcast, $lock->owner());\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:372
#: ./docs/9.x/cache.md:378
#: ./docs/10.x/cache.md:346
#: ./docs/11.x/cache.md:374
#: ./docs/master/cache.md:331
msgctxt "P"
msgid "Within our application's `ProcessPodcast` job, we can restore and release the lock using the owner token:"
msgstr ""

#: ./docs/8.x/cache.md:374
#: ./docs/9.x/cache.md:380
#: ./docs/10.x/cache.md:348
#: ./docs/11.x/cache.md:376
#: ./docs/master/cache.md:333
msgctxt "CODE"
msgid "Cache::restoreLock('processing', $this->owner)->release();"
msgstr ""

#: ./docs/8.x/cache.md:376
#: ./docs/9.x/cache.md:382
#: ./docs/10.x/cache.md:350
#: ./docs/11.x/cache.md:378
#: ./docs/master/cache.md:335
msgctxt "P"
msgid "If you would like to release a lock without respecting its current owner, you may use the `forceRelease` method:"
msgstr ""

#: ./docs/8.x/cache.md:378
#: ./docs/9.x/cache.md:384
#: ./docs/10.x/cache.md:352
#: ./docs/11.x/cache.md:380
#: ./docs/master/cache.md:337
msgctxt "CODE"
msgid "Cache::lock('processing')->forceRelease();"
msgstr ""

#: ./docs/8.x/cache.md:380
#: ./docs/9.x/cache.md:386
#: ./docs/10.x/cache.md:354
#: ./docs/11.x/cache.md:382
#: ./docs/master/cache.md:339
#~ msgctxt "P"
#~ msgid "<a name=\"adding-custom-cache-drivers\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:381
#: ./docs/9.x/cache.md:387
#: ./docs/10.x/cache.md:355
#: ./docs/11.x/cache.md:383
#: ./docs/master/cache.md:340
msgctxt "H2"
msgid "Adding Custom Cache Drivers"
msgstr ""

#: ./docs/8.x/cache.md:383
#: ./docs/9.x/cache.md:389
#: ./docs/10.x/cache.md:357
#: ./docs/11.x/cache.md:385
#: ./docs/master/cache.md:342
#~ msgctxt "P"
#~ msgid "<a name=\"writing-the-driver\"></a>"
#~ msgstr ""

#: ./docs/10.x/cache.md:384
#: ./docs/11.x/cache.md:412
#: ./docs/master/cache.md:369
msgctxt "CODE"
msgid ""
"Cache::extend('mongo', function (Application $app) {\n"
"    return Cache::repository(new MongoStore);\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:384
#: ./docs/9.x/cache.md:390
msgctxt "H3"
msgid "Writing The Driver"
msgstr ""

#: ./docs/8.x/cache.md:386
#: ./docs/9.x/cache.md:392
#: ./docs/10.x/cache.md:360
#: ./docs/11.x/cache.md:388
#: ./docs/master/cache.md:345
msgctxt "P"
msgid "To create our custom cache driver, we first need to implement the `Illuminate\\Contracts\\Cache\\Store` [contract](/docs/{{version}}/contracts). So, a MongoDB cache implementation might look something like this:"
msgstr ""

#: ./docs/8.x/cache.md:388
#: ./docs/9.x/cache.md:394
#: ./docs/10.x/cache.md:362
#: ./docs/11.x/cache.md:390
#: ./docs/master/cache.md:347
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Extensions;\n"
"\n"
"use Illuminate\\Contracts\\Cache\\Store;\n"
"\n"
"class MongoStore implements Store\n"
"{\n"
"    public function get($key) {}\n"
"    public function many(array $keys) {}\n"
"    public function put($key, $value, $seconds) {}\n"
"    public function putMany(array $values, $seconds) {}\n"
"    public function increment($key, $value = 1) {}\n"
"    public function decrement($key, $value = 1) {}\n"
"    public function forever($key, $value) {}\n"
"    public function forget($key) {}\n"
"    public function flush() {}\n"
"    public function getPrefix() {}\n"
"}"
msgstr ""

#: ./docs/10.x/cache.md:392
#: ./docs/11.x/cache.md:420
#: ./docs/master/cache.md:377
msgctxt "H3"
msgid "Registering the Driver"
msgstr ""

#: ./docs/10.x/cache.md:396
#: ./docs/11.x/cache.md:424
#: ./docs/master/cache.md:381
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Extensions\\MongoStore;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\Facades\\Cache;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        $this->app->booting(function () {\n"
"             Cache::extend('mongo', function (Application $app) {\n"
"                 return Cache::repository(new MongoStore);\n"
"             });\n"
"         });\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:408
#: ./docs/9.x/cache.md:414
#: ./docs/10.x/cache.md:382
#: ./docs/11.x/cache.md:410
#: ./docs/master/cache.md:367
msgctxt "P"
msgid "We just need to implement each of these methods using a MongoDB connection. For an example of how to implement each of these methods, take a look at the `Illuminate\\Cache\\MemcachedStore` in the [Laravel framework source code](https://github.com/laravel/framework). Once our implementation is complete, we can finish our custom driver registration by calling the `Cache` facade's `extend` method:"
msgstr ""

#: ./docs/8.x/cache.md:410
#: ./docs/9.x/cache.md:416
msgctxt "CODE"
msgid ""
"Cache::extend('mongo', function ($app) {\n"
"    return Cache::repository(new MongoStore);\n"
"});"
msgstr ""

#: ./docs/8.x/cache.md:414
#: ./docs/9.x/cache.md:421
#: ./docs/10.x/cache.md:389
#: ./docs/11.x/cache.md:417
#: ./docs/master/cache.md:374
msgctxt "P"
msgid "If you're wondering where to put your custom cache driver code, you could create an `Extensions` namespace within your `app` directory. However, keep in mind that Laravel does not have a rigid application structure and you are free to organize your application according to your preferences."
msgstr ""

#: ./docs/8.x/cache.md:416
#: ./docs/9.x/cache.md:423
#: ./docs/10.x/cache.md:391
#: ./docs/11.x/cache.md:419
#: ./docs/master/cache.md:376
#~ msgctxt "P"
#~ msgid "<a name=\"registering-the-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:417
#: ./docs/9.x/cache.md:424
msgctxt "H3"
msgid "Registering The Driver"
msgstr ""

#: ./docs/8.x/cache.md:419
#: ./docs/9.x/cache.md:426
#: ./docs/10.x/cache.md:394
#: ./docs/11.x/cache.md:422
#: ./docs/master/cache.md:379
msgctxt "P"
msgid "To register the custom cache driver with Laravel, we will use the `extend` method on the `Cache` facade. Since other service providers may attempt to read cached values within their `boot` method, we will register our custom driver within a `booting` callback. By using the `booting` callback, we can ensure that the custom driver is registered just before the `boot` method is called on our application's service providers but after the `register` method is called on all of the service providers. We will register our `booting` callback within the `register` method of our application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/cache.md:421
#: ./docs/9.x/cache.md:428
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Extensions\\MongoStore;\n"
"use Illuminate\\Support\\Facades\\Cache;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class CacheServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->app->booting(function () {\n"
"             Cache::extend('mongo', function ($app) {\n"
"                 return Cache::repository(new MongoStore);\n"
"             });\n"
"         });\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/cache.md:456
#: ./docs/9.x/cache.md:463
#: ./docs/10.x/cache.md:428
#: ./docs/11.x/cache.md:456
#: ./docs/master/cache.md:413
msgctxt "P"
msgid "The first argument passed to the `extend` method is the name of the driver. This will correspond to your `driver` option in the `config/cache.php` configuration file. The second argument is a closure that should return an `Illuminate\\Cache\\Repository` instance. The closure will be passed an `$app` instance, which is an instance of the [service container](/docs/{{version}}/container)."
msgstr ""

#: ./docs/11.x/cache.md:458
#: ./docs/master/cache.md:415
msgctxt "P"
msgid "Once your extension is registered, update the `CACHE_STORE` environment variable or `default` option within your application's `config/cache.php` configuration file to the name of your extension."
msgstr ""

#: ./docs/8.x/cache.md:458
#: ./docs/9.x/cache.md:465
#: ./docs/10.x/cache.md:430
msgctxt "P"
msgid "Once your extension is registered, update your `config/cache.php` configuration file's `driver` option to the name of your extension."
msgstr ""

#: ./docs/8.x/cache.md:460
#: ./docs/9.x/cache.md:467
#: ./docs/10.x/cache.md:432
#: ./docs/11.x/cache.md:460
#: ./docs/master/cache.md:417
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/cache.md:461
#: ./docs/9.x/cache.md:468
#: ./docs/10.x/cache.md:433
#: ./docs/11.x/cache.md:461
#: ./docs/master/cache.md:418
msgctxt "H2"
msgid "Events"
msgstr ""

#: ./docs/11.x/cache.md:463
#: ./docs/master/cache.md:420
msgctxt "P"
msgid "To execute code on every cache operation, you may listen for various [events](/docs/{{version}}/events) dispatched by the cache:"
msgstr ""

#: ./docs/8.x/cache.md:463
#: ./docs/9.x/cache.md:470
#: ./docs/10.x/cache.md:435
msgctxt "P"
msgid "To execute code on every cache operation, you may listen for the [events](/docs/{{version}}/events) fired by the cache. Typically, you should place these event listeners within your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#: ./docs/8.x/cache.md:465
msgctxt "CODE"
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Cache\\Events\\CacheHit' => [\n"
"        'App\\Listeners\\LogCacheHit',\n"
"    ],\n"
"\n"
"    'Illuminate\\Cache\\Events\\CacheMissed' => [\n"
"        'App\\Listeners\\LogCacheMissed',\n"
"    ],\n"
"\n"
"    'Illuminate\\Cache\\Events\\KeyForgotten' => [\n"
"        'App\\Listeners\\LogKeyForgotten',\n"
"    ],\n"
"\n"
"    'Illuminate\\Cache\\Events\\KeyWritten' => [\n"
"        'App\\Listeners\\LogKeyWritten',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/9.x/cache.md:472
#: ./docs/10.x/cache.md:437
msgctxt "CODE"
msgid ""
"use App\\Listeners\\LogCacheHit;\n"
"use App\\Listeners\\LogCacheMissed;\n"
"use App\\Listeners\\LogKeyForgotten;\n"
"use App\\Listeners\\LogKeyWritten;\n"
"use Illuminate\\Cache\\Events\\CacheHit;\n"
"use Illuminate\\Cache\\Events\\CacheMissed;\n"
"use Illuminate\\Cache\\Events\\KeyForgotten;\n"
"use Illuminate\\Cache\\Events\\KeyWritten;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    CacheHit::class => [\n"
"        LogCacheHit::class,\n"
"    ],\n"
"\n"
"    CacheMissed::class => [\n"
"        LogCacheMissed::class,\n"
"    ],\n"
"\n"
"    KeyForgotten::class => [\n"
"        LogKeyForgotten::class,\n"
"    ],\n"
"\n"
"    KeyWritten::class => [\n"
"        LogKeyWritten::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/11.x/cache.md:476
msgctxt "P"
msgid "To increase performance, you may disable cache events by setting the `events` configuration option to `false` for a given cache store in your application's `config/cache.php` configuration file:"
msgstr ""

#: ./docs/11.x/cache.md:478
msgctxt "CODE: php"
msgid ""
"'database' => [\n"
"    'driver' => 'database',\n"
"    // ...\n"
"    'events' => false,\n"
"],"
msgstr ""
