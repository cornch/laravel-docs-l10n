msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/filesystem.pot\n"
"X-Crowdin-File-ID: 73\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 08:38\n"

# H1
#: ./docs/8.x/filesystem.md:1
#: ./docs/9.x/filesystem.md:1
#: ./docs/10.x/filesystem.md:1
#: ./docs/11.x/filesystem.md:1
#: ./docs/master/filesystem.md:1
msgid "File Storage"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:3
#: ./docs/9.x/filesystem.md:3
#: ./docs/10.x/filesystem.md:3
#: ./docs/11.x/filesystem.md:3
#: ./docs/master/filesystem.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:4
#: ./docs/9.x/filesystem.md:4
#: ./docs/10.x/filesystem.md:4
#: ./docs/11.x/filesystem.md:4
#: ./docs/master/filesystem.md:4
msgid "[Configuration](#configuration)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:5
#: ./docs/9.x/filesystem.md:5
#: ./docs/10.x/filesystem.md:5
#: ./docs/11.x/filesystem.md:5
#: ./docs/master/filesystem.md:5
msgid "[The Local Driver](#the-local-driver)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:6
#: ./docs/9.x/filesystem.md:6
#: ./docs/10.x/filesystem.md:6
#: ./docs/11.x/filesystem.md:6
#: ./docs/master/filesystem.md:6
msgid "[The Public Disk](#the-public-disk)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:7
#: ./docs/9.x/filesystem.md:7
#: ./docs/10.x/filesystem.md:7
#: ./docs/11.x/filesystem.md:7
#: ./docs/master/filesystem.md:7
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:8
#: ./docs/11.x/filesystem.md:8
#: ./docs/master/filesystem.md:8
msgid "[Scoped and Read-Only Filesystems](#scoped-and-read-only-filesystems)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:8
#: ./docs/9.x/filesystem.md:9
#: ./docs/10.x/filesystem.md:9
#: ./docs/11.x/filesystem.md:9
#: ./docs/master/filesystem.md:9
msgid "[Amazon S3 Compatible Filesystems](#amazon-s3-compatible-filesystems)"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:8
msgid "[Scoped & Read-Only Filesystems](#scoped-and-read-only-filesystems)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:9
msgid "[Caching](#caching)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:10
#: ./docs/9.x/filesystem.md:10
#: ./docs/10.x/filesystem.md:10
#: ./docs/11.x/filesystem.md:10
#: ./docs/master/filesystem.md:10
msgid "[Obtaining Disk Instances](#obtaining-disk-instances)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:11
#: ./docs/9.x/filesystem.md:11
#: ./docs/10.x/filesystem.md:11
#: ./docs/11.x/filesystem.md:11
#: ./docs/master/filesystem.md:11
msgid "[On-Demand Disks](#on-demand-disks)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:12
#: ./docs/9.x/filesystem.md:12
#: ./docs/10.x/filesystem.md:12
#: ./docs/11.x/filesystem.md:12
#: ./docs/master/filesystem.md:12
msgid "[Retrieving Files](#retrieving-files)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:13
#: ./docs/9.x/filesystem.md:13
#: ./docs/10.x/filesystem.md:13
#: ./docs/11.x/filesystem.md:13
#: ./docs/master/filesystem.md:13
msgid "[Downloading Files](#downloading-files)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:14
#: ./docs/9.x/filesystem.md:14
#: ./docs/10.x/filesystem.md:14
#: ./docs/11.x/filesystem.md:14
#: ./docs/master/filesystem.md:14
msgid "[File URLs](#file-urls)"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:15
#: ./docs/11.x/filesystem.md:15
#: ./docs/master/filesystem.md:15
msgid "[Temporary URLs](#temporary-urls)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:15
#: ./docs/9.x/filesystem.md:15
#: ./docs/10.x/filesystem.md:16
#: ./docs/11.x/filesystem.md:16
#: ./docs/master/filesystem.md:16
msgid "[File Metadata](#file-metadata)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:16
#: ./docs/9.x/filesystem.md:16
#: ./docs/10.x/filesystem.md:17
#: ./docs/11.x/filesystem.md:17
#: ./docs/master/filesystem.md:17
msgid "[Storing Files](#storing-files)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:17
#: ./docs/9.x/filesystem.md:20
#: ./docs/10.x/filesystem.md:21
#: ./docs/11.x/filesystem.md:21
#: ./docs/master/filesystem.md:21
msgid "[File Uploads](#file-uploads)"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:17
msgid "[Prepending & Appending To Files](#prepending-appending-to-files)"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:18
#: ./docs/11.x/filesystem.md:18
#: ./docs/master/filesystem.md:18
msgid "[Prepending and Appending To Files](#prepending-appending-to-files)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:18
#: ./docs/9.x/filesystem.md:21
#: ./docs/10.x/filesystem.md:22
#: ./docs/11.x/filesystem.md:22
#: ./docs/master/filesystem.md:22
msgid "[File Visibility](#file-visibility)"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:18
msgid "[Copying & Moving Files](#copying-moving-files)"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:19
#: ./docs/11.x/filesystem.md:19
#: ./docs/master/filesystem.md:19
msgid "[Copying and Moving Files](#copying-moving-files)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:19
#: ./docs/9.x/filesystem.md:22
#: ./docs/10.x/filesystem.md:23
#: ./docs/11.x/filesystem.md:23
#: ./docs/master/filesystem.md:23
msgid "[Deleting Files](#deleting-files)"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:19
#: ./docs/10.x/filesystem.md:20
#: ./docs/11.x/filesystem.md:20
#: ./docs/master/filesystem.md:20
msgid "[Automatic Streaming](#automatic-streaming)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:20
#: ./docs/9.x/filesystem.md:23
#: ./docs/10.x/filesystem.md:24
#: ./docs/11.x/filesystem.md:24
#: ./docs/master/filesystem.md:24
msgid "[Directories](#directories)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:21
#: ./docs/9.x/filesystem.md:24
#: ./docs/10.x/filesystem.md:26
#: ./docs/11.x/filesystem.md:26
#: ./docs/master/filesystem.md:26
msgid "[Custom Filesystems](#custom-filesystems)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:23
#: ./docs/9.x/filesystem.md:26
#: ./docs/10.x/filesystem.md:28
#: ./docs/11.x/filesystem.md:28
#: ./docs/master/filesystem.md:28
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:24
#: ./docs/9.x/filesystem.md:27
#: ./docs/10.x/filesystem.md:29
#: ./docs/11.x/filesystem.md:29
#: ./docs/master/filesystem.md:29
msgid "Introduction"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:25
#: ./docs/11.x/filesystem.md:25
#: ./docs/master/filesystem.md:25
msgid "[Testing](#testing)"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:26
#: ./docs/9.x/filesystem.md:29
#: ./docs/10.x/filesystem.md:31
#: ./docs/11.x/filesystem.md:31
#: ./docs/master/filesystem.md:31
msgid "Laravel provides a powerful filesystem abstraction thanks to the wonderful [Flysystem](https://github.com/thephpleague/flysystem) PHP package by Frank de Jonge. The Laravel Flysystem integration provides simple drivers for working with local filesystems, SFTP, and Amazon S3. Even better, it's amazingly simple to switch between these storage options between your local development machine and production server as the API remains the same for each system."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:28
#: ./docs/9.x/filesystem.md:31
#: ./docs/10.x/filesystem.md:33
#: ./docs/11.x/filesystem.md:33
#: ./docs/master/filesystem.md:33
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:29
#: ./docs/9.x/filesystem.md:32
#: ./docs/10.x/filesystem.md:34
#: ./docs/11.x/filesystem.md:34
#: ./docs/master/filesystem.md:34
msgid "Configuration"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:31
#: ./docs/9.x/filesystem.md:34
#: ./docs/10.x/filesystem.md:36
#: ./docs/11.x/filesystem.md:36
#: ./docs/master/filesystem.md:36
msgid "Laravel's filesystem configuration file is located at `config/filesystems.php`. Within this file, you may configure all of your filesystem \"disks\". Each disk represents a particular storage driver and storage location. Example configurations for each supported driver are included in the configuration file so you can modify the configuration to reflect your storage preferences and credentials."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:33
#: ./docs/9.x/filesystem.md:36
#: ./docs/10.x/filesystem.md:38
#: ./docs/11.x/filesystem.md:38
#: ./docs/master/filesystem.md:38
msgid "The `local` driver interacts with files stored locally on the server running the Laravel application while the `s3` driver is used to write to Amazon's S3 cloud storage service."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:35
#: ./docs/9.x/filesystem.md:39
#: ./docs/10.x/filesystem.md:41
#: ./docs/11.x/filesystem.md:41
#: ./docs/master/filesystem.md:41
msgid "You may configure as many disks as you like and may even have multiple disks that use the same driver."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:37
#: ./docs/9.x/filesystem.md:41
#: ./docs/10.x/filesystem.md:43
#: ./docs/11.x/filesystem.md:43
#: ./docs/master/filesystem.md:43
#~ msgid "<a name=\"the-local-driver\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:38
#: ./docs/9.x/filesystem.md:42
#: ./docs/10.x/filesystem.md:44
#: ./docs/11.x/filesystem.md:44
#: ./docs/master/filesystem.md:44
msgid "The Local Driver"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:40
#: ./docs/9.x/filesystem.md:44
#: ./docs/10.x/filesystem.md:46
#: ./docs/11.x/filesystem.md:46
#: ./docs/master/filesystem.md:46
msgid "When using the `local` driver, all file operations are relative to the `root` directory defined in your `filesystems` configuration file. By default, this value is set to the `storage/app` directory. Therefore, the following method would write to `storage/app/example.txt`:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:42
#: ./docs/9.x/filesystem.md:46
#: ./docs/10.x/filesystem.md:48
#: ./docs/11.x/filesystem.md:48
#: ./docs/master/filesystem.md:48
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::disk('local')->put('example.txt', 'Contents');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:46
#: ./docs/9.x/filesystem.md:50
#: ./docs/10.x/filesystem.md:52
#: ./docs/11.x/filesystem.md:52
#: ./docs/master/filesystem.md:52
#~ msgid "<a name=\"the-public-disk\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:47
#: ./docs/9.x/filesystem.md:51
#: ./docs/10.x/filesystem.md:53
#: ./docs/11.x/filesystem.md:53
#: ./docs/master/filesystem.md:53
msgid "The Public Disk"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:49
#: ./docs/9.x/filesystem.md:53
#: ./docs/10.x/filesystem.md:55
#: ./docs/11.x/filesystem.md:55
#: ./docs/master/filesystem.md:55
msgid "The `public` disk included in your application's `filesystems` configuration file is intended for files that are going to be publicly accessible. By default, the `public` disk uses the `local` driver and stores its files in `storage/app/public`."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:51
#: ./docs/9.x/filesystem.md:55
#: ./docs/10.x/filesystem.md:57
#: ./docs/11.x/filesystem.md:57
#: ./docs/master/filesystem.md:57
msgid "To make these files accessible from the web, you should create a symbolic link from `public/storage` to `storage/app/public`. Utilizing this folder convention will keep your publicly accessible files in one directory that can be easily shared across deployments when using zero down-time deployment systems like [Envoyer](https://envoyer.io)."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:53
#: ./docs/9.x/filesystem.md:57
#: ./docs/10.x/filesystem.md:59
#: ./docs/11.x/filesystem.md:59
#: ./docs/master/filesystem.md:59
msgid "To create the symbolic link, you may use the `storage:link` Artisan command:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/filesystem.md:55
#: ./docs/9.x/filesystem.md:59
#: ./docs/10.x/filesystem.md:61
#: ./docs/11.x/filesystem.md:61
#: ./docs/master/filesystem.md:61
msgid "php artisan storage:link"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:57
#: ./docs/9.x/filesystem.md:63
#: ./docs/10.x/filesystem.md:65
#: ./docs/11.x/filesystem.md:65
#: ./docs/master/filesystem.md:65
msgid "Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the `asset` helper:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:59
#: ./docs/9.x/filesystem.md:65
#: ./docs/10.x/filesystem.md:67
#: ./docs/11.x/filesystem.md:67
#: ./docs/master/filesystem.md:67
msgid "echo asset('storage/file.txt');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:61
#: ./docs/9.x/filesystem.md:67
#: ./docs/10.x/filesystem.md:69
#: ./docs/11.x/filesystem.md:69
#: ./docs/master/filesystem.md:69
msgid "You may configure additional symbolic links in your `filesystems` configuration file. Each of the configured links will be created when you run the `storage:link` command:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:63
#: ./docs/9.x/filesystem.md:69
#: ./docs/10.x/filesystem.md:71
#: ./docs/11.x/filesystem.md:71
#: ./docs/master/filesystem.md:71
msgid "'links' => [\n"
"    public_path('storage') => storage_path('app/public'),\n"
"    public_path('images') => storage_path('app/images'),\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:68
#: ./docs/9.x/filesystem.md:74
#: ./docs/10.x/filesystem.md:82
#: ./docs/11.x/filesystem.md:82
#: ./docs/master/filesystem.md:82
#~ msgid "<a name=\"driver-prerequisites\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:69
#: ./docs/9.x/filesystem.md:75
#: ./docs/10.x/filesystem.md:83
#: ./docs/11.x/filesystem.md:83
#: ./docs/master/filesystem.md:83
msgid "Driver Prerequisites"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:71
#~ msgid "<a name=\"composer-packages\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:72
msgid "Composer Packages"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:74
msgid "Before using the S3 or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:76
#: ./docs/11.x/filesystem.md:76
#: ./docs/master/filesystem.md:76
msgid "The `storage:unlink` command may be used to destroy your configured symbolic links:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:76
msgid "Amazon S3: `composer require --with-all-dependencies league/flysystem-aws-s3-v3 \"^1.0\"`"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:77
msgid "SFTP: `composer require league/flysystem-sftp \"~1.0\"`"
msgstr ""

# CODE: shell
#: ./docs/10.x/filesystem.md:78
#: ./docs/11.x/filesystem.md:78
#: ./docs/master/filesystem.md:78
msgid "php artisan storage:unlink"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:79
msgid "In addition, you may choose to install a cached adapter for increased performance:"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:80
#: ./docs/10.x/filesystem.md:88
#: ./docs/11.x/filesystem.md:88
#: ./docs/master/filesystem.md:88
msgid "Before using the S3 driver, you will need to install the Flysystem S3 package via the Composer package manager:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:81
msgid "CachedAdapter: `composer require league/flysystem-cached-adapter \"~1.0\"`"
msgstr ""

# CODE: shell
#: ./docs/9.x/filesystem.md:82
msgid "composer require league/flysystem-aws-s3-v3 \"^3.0\""
msgstr ""

# P
#: ./docs/8.x/filesystem.md:83
#: ./docs/9.x/filesystem.md:77
#: ./docs/10.x/filesystem.md:85
#: ./docs/11.x/filesystem.md:85
#: ./docs/master/filesystem.md:85
#~ msgid "<a name=\"s3-driver-configuration\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:84
#: ./docs/9.x/filesystem.md:78
#: ./docs/10.x/filesystem.md:86
#: ./docs/11.x/filesystem.md:86
#: ./docs/master/filesystem.md:86
msgid "S3 Driver Configuration"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:86
#: ./docs/9.x/filesystem.md:86
#: ./docs/10.x/filesystem.md:94
msgid "The S3 driver configuration information is located in your `config/filesystems.php` configuration file. This file contains an example configuration array for an S3 driver. You are free to modify this array with your own S3 configuration and credentials. For convenience, these environment variables match the naming convention used by the AWS CLI."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:88
#: ./docs/9.x/filesystem.md:88
#: ./docs/10.x/filesystem.md:96
#: ./docs/11.x/filesystem.md:106
#: ./docs/master/filesystem.md:106
#~ msgid "<a name=\"ftp-driver-configuration\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:89
#: ./docs/9.x/filesystem.md:89
#: ./docs/10.x/filesystem.md:97
#: ./docs/11.x/filesystem.md:107
#: ./docs/master/filesystem.md:107
msgid "FTP Driver Configuration"
msgstr ""

# CODE: shell
#: ./docs/10.x/filesystem.md:90
#: ./docs/11.x/filesystem.md:90
#: ./docs/master/filesystem.md:90
msgid "composer require league/flysystem-aws-s3-v3 \"^3.0\" --with-all-dependencies"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:91
#: ./docs/9.x/filesystem.md:97
#: ./docs/10.x/filesystem.md:105
msgid "Laravel's Flysystem integrations work great with FTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an FTP filesystem, you may use the configuration example below:"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:91
#: ./docs/10.x/filesystem.md:99
#: ./docs/11.x/filesystem.md:109
#: ./docs/master/filesystem.md:109
msgid "Before using the FTP driver, you will need to install the Flysystem FTP package via the Composer package manager:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:93
#: ./docs/9.x/filesystem.md:99
#: ./docs/10.x/filesystem.md:107
#: ./docs/11.x/filesystem.md:117
#: ./docs/master/filesystem.md:117
msgid "'ftp' => [\n"
"    'driver' => 'ftp',\n"
"    'host' => env('FTP_HOST'),\n"
"    'username' => env('FTP_USERNAME'),\n"
"    'password' => env('FTP_PASSWORD'),\n\n"
"    // Optional FTP Settings...\n"
"    // 'port' => env('FTP_PORT', 21),\n"
"    // 'root' => env('FTP_ROOT'),\n"
"    // 'passive' => true,\n"
"    // 'ssl' => true,\n"
"    // 'timeout' => 30,\n"
"],"
msgstr ""

# CODE: shell
#: ./docs/9.x/filesystem.md:93
#: ./docs/10.x/filesystem.md:101
#: ./docs/11.x/filesystem.md:111
#: ./docs/master/filesystem.md:111
msgid "composer require league/flysystem-ftp \"^3.0\""
msgstr ""

# P
#: ./docs/11.x/filesystem.md:94
#: ./docs/master/filesystem.md:94
msgid "An S3 disk configuration array is located in your `config/filesystems.php` configuration file. Typically, you should configure your S3 information and credentials using the following environment variables which are referenced by the `config/filesystems.php` configuration file:"
msgstr ""

# CODE
#: ./docs/11.x/filesystem.md:96
#: ./docs/master/filesystem.md:96
msgid "AWS_ACCESS_KEY_ID=<your-key-id>\n"
"AWS_SECRET_ACCESS_KEY=<your-secret-access-key>\n"
"AWS_DEFAULT_REGION=us-east-1\n"
"AWS_BUCKET=<your-bucket-name>\n"
"AWS_USE_PATH_STYLE_ENDPOINT=false"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:104
#: ./docs/master/filesystem.md:104
msgid "For convenience, these environment variables match the naming convention used by the AWS CLI."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:107
#: ./docs/9.x/filesystem.md:113
#: ./docs/10.x/filesystem.md:121
#: ./docs/11.x/filesystem.md:131
#: ./docs/master/filesystem.md:131
#~ msgid "<a name=\"sftp-driver-configuration\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:108
#: ./docs/9.x/filesystem.md:114
#: ./docs/10.x/filesystem.md:122
#: ./docs/11.x/filesystem.md:132
#: ./docs/master/filesystem.md:132
msgid "SFTP Driver Configuration"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:110
#: ./docs/9.x/filesystem.md:122
#: ./docs/10.x/filesystem.md:130
msgid "Laravel's Flysystem integrations work great with SFTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an SFTP filesystem, you may use the configuration example below:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:112
msgid "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n"
"    \n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Optional SFTP Settings...\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT'),\n"
"    // 'timeout' => 30,\n"
"],"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:115
#: ./docs/master/filesystem.md:115
msgid "Laravel's Flysystem integrations work great with FTP; however, a sample configuration is not included with the framework's default `config/filesystems.php` configuration file. If you need to configure an FTP filesystem, you may use the configuration example below:"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:116
#: ./docs/10.x/filesystem.md:124
#: ./docs/11.x/filesystem.md:134
#: ./docs/master/filesystem.md:134
msgid "Before using the SFTP driver, you will need to install the Flysystem SFTP package via the Composer package manager:"
msgstr ""

# CODE: shell
#: ./docs/9.x/filesystem.md:118
#: ./docs/10.x/filesystem.md:126
#: ./docs/11.x/filesystem.md:136
#: ./docs/master/filesystem.md:136
msgid "composer require league/flysystem-sftp-v3 \"^3.0\""
msgstr ""

# CODE
#: ./docs/9.x/filesystem.md:124
msgid "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n\n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'passphrase' => env('SFTP_PASSPHRASE'),\n\n"
"    // Optional SFTP Settings...\n"
"    // 'hostFingerprint' => env('SFTP_HOST_FINGERPRINT'),\n"
"    // 'maxTries' => 4,\n"
"    // 'passphrase' => env('SFTP_PASSPHRASE'),\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT', ''),\n"
"    // 'timeout' => 30,\n"
"    // 'useAgent' => true,\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:130
#: ./docs/9.x/filesystem.md:181
#: ./docs/10.x/filesystem.md:193
#: ./docs/11.x/filesystem.md:203
#: ./docs/master/filesystem.md:203
#~ msgid "<a name=\"amazon-s3-compatible-filesystems\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:131
#: ./docs/9.x/filesystem.md:182
#: ./docs/10.x/filesystem.md:194
#: ./docs/11.x/filesystem.md:204
#: ./docs/master/filesystem.md:204
msgid "Amazon S3 Compatible Filesystems"
msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:132
#: ./docs/11.x/filesystem.md:142
#: ./docs/master/filesystem.md:142
msgid "'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n\n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'passphrase' => env('SFTP_PASSPHRASE'),\n\n"
"    // Settings for file / directory permissions...\n"
"    'visibility' => 'private', // `private` = 0600, `public` = 0644\n"
"    'directory_visibility' => 'private', // `private` = 0700, `public` = 0755\n\n"
"    // Optional SFTP Settings...\n"
"    // 'hostFingerprint' => env('SFTP_HOST_FINGERPRINT'),\n"
"    // 'maxTries' => 4,\n"
"    // 'passphrase' => env('SFTP_PASSPHRASE'),\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT', ''),\n"
"    // 'timeout' => 30,\n"
"    // 'useAgent' => true,\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:133
#: ./docs/9.x/filesystem.md:184
#: ./docs/10.x/filesystem.md:196
#: ./docs/11.x/filesystem.md:206
#: ./docs/master/filesystem.md:206
msgid "By default, your application's `filesystems` configuration file contains a disk configuration for the `s3` disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as [MinIO](https://github.com/minio/minio) or [DigitalOcean Spaces](https://www.digitalocean.com/products/spaces/)."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:135
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `url` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:137
#: ./docs/9.x/filesystem.md:188
#: ./docs/10.x/filesystem.md:200
#: ./docs/11.x/filesystem.md:210
#: ./docs/master/filesystem.md:210
msgid "'endpoint' => env('AWS_ENDPOINT', 'https://minio:9000'),"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:139
#~ msgid "<a name=\"caching\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/filesystem.md:140
#: ./docs/master/filesystem.md:140
msgid "Laravel's Flysystem integrations work great with SFTP; however, a sample configuration is not included with the framework's default `config/filesystems.php` configuration file. If you need to configure an SFTP filesystem, you may use the configuration example below:"
msgstr ""

# H3
#: ./docs/8.x/filesystem.md:140
msgid "Caching"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:142
msgid "To enable caching for a given disk, you may add a `cache` directive to the disk's configuration options. The `cache` option should be an array of caching options containing the cache `store` name, the `expire` time in seconds, and the cache `prefix`:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:144
msgid "'s3' => [\n"
"    'driver' => 's3',\n\n"
"    // Other Disk Options...\n\n"
"    'cache' => [\n"
"        'store' => 'memcached',\n"
"        'expire' => 600,\n"
"        'prefix' => 'cache-prefix',\n"
"    ],\n"
"],"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:146
#: ./docs/10.x/filesystem.md:158
#: ./docs/11.x/filesystem.md:168
#: ./docs/master/filesystem.md:168
#~ msgid "<a name=\"scoped-and-read-only-filesystems\"></a>"
#~ msgstr ""

# H3
#: ./docs/9.x/filesystem.md:147
msgid "Scoped & Read-Only Filesystems"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:149
#: ./docs/10.x/filesystem.md:161
#: ./docs/11.x/filesystem.md:171
#: ./docs/master/filesystem.md:171
msgid "Scoped disks allow you to define a filesystem where all paths are automatically prefixed with a given path prefix. Before creating a scoped filesystem disk, you will need to install an additional Flysystem package via the Composer package manager:"
msgstr ""

# CODE: shell
#: ./docs/9.x/filesystem.md:151
#: ./docs/10.x/filesystem.md:163
#: ./docs/11.x/filesystem.md:173
#: ./docs/master/filesystem.md:173
msgid "composer require league/flysystem-path-prefixing \"^3.0\""
msgstr ""

# P
#: ./docs/9.x/filesystem.md:155
#: ./docs/10.x/filesystem.md:167
#: ./docs/11.x/filesystem.md:177
#: ./docs/master/filesystem.md:177
msgid "You may create a path scoped instance of any existing filesystem disk by defining a disk that utilizes the `scoped` driver. For example, you may create a disk which scopes your existing `s3` disk to a specific path prefix, and then every file operation using your scoped disk will utilize the specified prefix:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:156
#: ./docs/9.x/filesystem.md:202
#: ./docs/10.x/filesystem.md:214
#: ./docs/11.x/filesystem.md:224
#: ./docs/master/filesystem.md:224
#~ msgid "<a name=\"obtaining-disk-instances\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:157
#: ./docs/9.x/filesystem.md:203
#: ./docs/10.x/filesystem.md:215
#: ./docs/11.x/filesystem.md:225
#: ./docs/master/filesystem.md:225
msgid "Obtaining Disk Instances"
msgstr ""

# CODE: php
#: ./docs/9.x/filesystem.md:157
#: ./docs/10.x/filesystem.md:169
#: ./docs/11.x/filesystem.md:179
#: ./docs/master/filesystem.md:179
msgid "'s3-videos' => [\n"
"    'driver' => 'scoped',\n"
"    'disk' => 's3',\n"
"    'prefix' => 'path/to/videos',\n"
"],"
msgstr ""

# H3
#: ./docs/10.x/filesystem.md:159
#: ./docs/11.x/filesystem.md:169
#: ./docs/master/filesystem.md:169
msgid "Scoped and Read-Only Filesystems"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:159
#: ./docs/9.x/filesystem.md:205
#: ./docs/10.x/filesystem.md:217
#: ./docs/11.x/filesystem.md:227
#: ./docs/master/filesystem.md:227
msgid "The `Storage` facade may be used to interact with any of your configured disks. For example, you may use the `put` method on the facade to store an avatar on the default disk. If you call methods on the `Storage` facade without first calling the `disk` method, the method will automatically be passed to the default disk:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:161
#: ./docs/9.x/filesystem.md:207
#: ./docs/10.x/filesystem.md:219
#: ./docs/11.x/filesystem.md:229
#: ./docs/master/filesystem.md:229
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('avatars/1', $content);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:165
#: ./docs/9.x/filesystem.md:211
#: ./docs/10.x/filesystem.md:223
#: ./docs/11.x/filesystem.md:233
#: ./docs/master/filesystem.md:233
msgid "If your application interacts with multiple disks, you may use the `disk` method on the `Storage` facade to work with files on a particular disk:"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:165
#: ./docs/10.x/filesystem.md:177
#: ./docs/11.x/filesystem.md:187
#: ./docs/master/filesystem.md:187
msgid "\"Read-only\" disks allow you to create filesystem disks that do not allow write operations. Before using the `read-only` configuration option, you will need to install an additional Flysystem package via the Composer package manager:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:167
#: ./docs/9.x/filesystem.md:213
#: ./docs/10.x/filesystem.md:225
#: ./docs/11.x/filesystem.md:235
#: ./docs/master/filesystem.md:235
msgid "Storage::disk('s3')->put('avatars/1', $content);"
msgstr ""

# CODE: shell
#: ./docs/9.x/filesystem.md:167
#: ./docs/10.x/filesystem.md:179
#: ./docs/11.x/filesystem.md:189
#: ./docs/master/filesystem.md:189
msgid "composer require league/flysystem-read-only \"^3.0\""
msgstr ""

# P
#: ./docs/8.x/filesystem.md:169
#: ./docs/9.x/filesystem.md:215
#: ./docs/10.x/filesystem.md:227
#: ./docs/11.x/filesystem.md:237
#: ./docs/master/filesystem.md:237
#~ msgid "<a name=\"on-demand-disks\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:170
#: ./docs/9.x/filesystem.md:216
#: ./docs/10.x/filesystem.md:228
#: ./docs/11.x/filesystem.md:238
#: ./docs/master/filesystem.md:238
msgid "On-Demand Disks"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:171
#: ./docs/10.x/filesystem.md:183
#: ./docs/11.x/filesystem.md:193
#: ./docs/master/filesystem.md:193
msgid "Next, you may include the `read-only` configuration option in one or more of your disk's configuration arrays:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:172
#: ./docs/9.x/filesystem.md:218
#: ./docs/10.x/filesystem.md:230
#: ./docs/11.x/filesystem.md:240
#: ./docs/master/filesystem.md:240
msgid "Sometimes you may wish to create a disk at runtime using a given configuration without that configuration actually being present in your application's `filesystems` configuration file. To accomplish this, you may pass a configuration array to the `Storage` facade's `build` method:"
msgstr ""

# CODE: php
#: ./docs/9.x/filesystem.md:173
#: ./docs/10.x/filesystem.md:185
#: ./docs/11.x/filesystem.md:195
#: ./docs/master/filesystem.md:195
msgid "'s3-videos' => [\n"
"    'driver' => 's3',\n"
"    // ...\n"
"    'read-only' => true,\n"
"],"
msgstr ""

# CODE: php
#: ./docs/8.x/filesystem.md:174
#: ./docs/9.x/filesystem.md:220
#: ./docs/10.x/filesystem.md:232
#: ./docs/11.x/filesystem.md:242
#: ./docs/master/filesystem.md:242
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$disk = Storage::build([\n"
"    'driver' => 'local',\n"
"    'root' => '/path/to/root',\n"
"]);\n\n"
"$disk->put('image.jpg', $content);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:185
#: ./docs/9.x/filesystem.md:231
#: ./docs/10.x/filesystem.md:243
#: ./docs/11.x/filesystem.md:253
#: ./docs/master/filesystem.md:253
#~ msgid "<a name=\"retrieving-files\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:186
#: ./docs/9.x/filesystem.md:232
#: ./docs/10.x/filesystem.md:244
#: ./docs/11.x/filesystem.md:254
#: ./docs/master/filesystem.md:254
msgid "Retrieving Files"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:186
#: ./docs/10.x/filesystem.md:198
#: ./docs/11.x/filesystem.md:208
#: ./docs/master/filesystem.md:208
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `endpoint` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:188
#: ./docs/9.x/filesystem.md:234
#: ./docs/10.x/filesystem.md:246
#: ./docs/11.x/filesystem.md:256
#: ./docs/master/filesystem.md:256
msgid "The `get` method may be used to retrieve the contents of a file. The raw string contents of the file will be returned by the method. Remember, all file paths should be specified relative to the disk's \"root\" location:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:190
#: ./docs/9.x/filesystem.md:236
#: ./docs/10.x/filesystem.md:248
#: ./docs/11.x/filesystem.md:258
#: ./docs/master/filesystem.md:258
msgid "$contents = Storage::get('file.jpg');"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:190
#: ./docs/10.x/filesystem.md:202
#: ./docs/11.x/filesystem.md:212
#: ./docs/master/filesystem.md:212
#~ msgid "<a name=\"minio\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/filesystem.md:191
#: ./docs/10.x/filesystem.md:203
#: ./docs/11.x/filesystem.md:213
#: ./docs/master/filesystem.md:213
msgid "MinIO"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:192
#: ./docs/9.x/filesystem.md:238
#: ./docs/10.x/filesystem.md:254
#: ./docs/11.x/filesystem.md:264
#: ./docs/master/filesystem.md:264
msgid "The `exists` method may be used to determine if a file exists on the disk:"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:193
#: ./docs/10.x/filesystem.md:205
#: ./docs/11.x/filesystem.md:215
#: ./docs/master/filesystem.md:215
msgid "In order for Laravel's Flysystem integration to generate proper URLs when using MinIO, you should define the `AWS_URL` environment variable so that it matches your application's local URL and includes the bucket name in the URL path:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:194
#: ./docs/9.x/filesystem.md:240
#: ./docs/10.x/filesystem.md:256
#: ./docs/11.x/filesystem.md:266
#: ./docs/master/filesystem.md:266
msgid "if (Storage::disk('s3')->exists('file.jpg')) {\n"
"    // ...\n"
"}"
msgstr ""

# CODE: ini
#: ./docs/9.x/filesystem.md:195
#: ./docs/10.x/filesystem.md:207
#: ./docs/11.x/filesystem.md:217
#: ./docs/master/filesystem.md:217
msgid "AWS_URL=http://localhost:9000/local"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:198
#: ./docs/9.x/filesystem.md:244
#: ./docs/10.x/filesystem.md:260
#: ./docs/11.x/filesystem.md:270
#: ./docs/master/filesystem.md:270
msgid "The `missing` method may be used to determine if a file is missing from the disk:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:200
#: ./docs/9.x/filesystem.md:246
#: ./docs/10.x/filesystem.md:262
#: ./docs/11.x/filesystem.md:272
#: ./docs/master/filesystem.md:272
msgid "if (Storage::disk('s3')->missing('file.jpg')) {\n"
"    // ...\n"
"}"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:200
#: ./docs/10.x/filesystem.md:212
#: ./docs/master/filesystem.md:222
msgid "Generating temporary storage URLs via the `temporaryUrl` method is not supported when using MinIO."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:204
#: ./docs/9.x/filesystem.md:250
#: ./docs/10.x/filesystem.md:266
#: ./docs/11.x/filesystem.md:276
#: ./docs/master/filesystem.md:276
#~ msgid "<a name=\"downloading-files\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:205
#: ./docs/9.x/filesystem.md:251
#: ./docs/10.x/filesystem.md:267
#: ./docs/11.x/filesystem.md:277
#: ./docs/master/filesystem.md:277
msgid "Downloading Files"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:207
#: ./docs/9.x/filesystem.md:253
#: ./docs/10.x/filesystem.md:269
#: ./docs/11.x/filesystem.md:279
#: ./docs/master/filesystem.md:279
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:209
#: ./docs/9.x/filesystem.md:255
#: ./docs/10.x/filesystem.md:271
#: ./docs/11.x/filesystem.md:281
#: ./docs/master/filesystem.md:281
msgid "return Storage::download('file.jpg');\n\n"
"return Storage::download('file.jpg', $name, $headers);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:213
#: ./docs/9.x/filesystem.md:259
#: ./docs/10.x/filesystem.md:275
#: ./docs/11.x/filesystem.md:285
#: ./docs/master/filesystem.md:285
#~ msgid "<a name=\"file-urls\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:214
#: ./docs/9.x/filesystem.md:260
#: ./docs/10.x/filesystem.md:276
#: ./docs/11.x/filesystem.md:286
#: ./docs/master/filesystem.md:286
msgid "File URLs"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:216
#: ./docs/9.x/filesystem.md:262
#: ./docs/10.x/filesystem.md:278
#: ./docs/11.x/filesystem.md:288
#: ./docs/master/filesystem.md:288
msgid "You may use the `url` method to get the URL for a given file. If you are using the `local` driver, this will typically just prepend `/storage` to the given path and return a relative URL to the file. If you are using the `s3` driver, the fully qualified remote URL will be returned:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:218
#: ./docs/9.x/filesystem.md:264
#: ./docs/10.x/filesystem.md:280
#: ./docs/11.x/filesystem.md:290
#: ./docs/master/filesystem.md:290
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$url = Storage::url('file.jpg');"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:222
msgid "Generating temporary storage URLs via the `temporaryUrl` method may not work when using MinIO if the `endpoint` is not accessible by the client."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:222
#: ./docs/9.x/filesystem.md:268
#: ./docs/10.x/filesystem.md:284
#: ./docs/11.x/filesystem.md:294
#: ./docs/master/filesystem.md:294
msgid "When using the `local` driver, all files that should be publicly accessible should be placed in the `storage/app/public` directory. Furthermore, you should [create a symbolic link](#the-public-disk) at `public/storage` which points to the `storage/app/public` directory."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:224
#: ./docs/9.x/filesystem.md:271
#: ./docs/10.x/filesystem.md:287
#: ./docs/11.x/filesystem.md:297
#: ./docs/master/filesystem.md:297
msgid "When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:226
#: ./docs/9.x/filesystem.md:273
#: ./docs/10.x/filesystem.md:301
#: ./docs/11.x/filesystem.md:312
#: ./docs/master/filesystem.md:312
#~ msgid "<a name=\"temporary-urls\"></a>"
#~ msgstr ""

# H4
# H3
#: ./docs/8.x/filesystem.md:227
#: ./docs/9.x/filesystem.md:274
#: ./docs/10.x/filesystem.md:302
#: ./docs/11.x/filesystem.md:313
#: ./docs/master/filesystem.md:313
msgid "Temporary URLs"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:229
#: ./docs/9.x/filesystem.md:276
#: ./docs/10.x/filesystem.md:304
#: ./docs/master/filesystem.md:315
msgid "Using the `temporaryUrl` method, you may create temporary URLs to files stored using the `s3` driver. This method accepts a path and a `DateTime` instance specifying when the URL should expire:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:231
#: ./docs/9.x/filesystem.md:278
#: ./docs/10.x/filesystem.md:306
#: ./docs/11.x/filesystem.md:317
#: ./docs/master/filesystem.md:317
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$url = Storage::temporaryUrl(\n"
"    'file.jpg', now()->addMinutes(5)\n"
");"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:237
#: ./docs/9.x/filesystem.md:284
#: ./docs/10.x/filesystem.md:312
#: ./docs/11.x/filesystem.md:340
#: ./docs/master/filesystem.md:323
msgid "If you need to specify additional [S3 request parameters](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests), you may pass the array of request parameters as the third argument to the `temporaryUrl` method:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:239
#: ./docs/9.x/filesystem.md:286
#: ./docs/10.x/filesystem.md:314
#: ./docs/11.x/filesystem.md:342
#: ./docs/master/filesystem.md:325
msgid "$url = Storage::temporaryUrl(\n"
"    'file.jpg',\n"
"    now()->addMinutes(5),\n"
"    [\n"
"        'ResponseContentType' => 'application/octet-stream',\n"
"        'ResponseContentDisposition' => 'attachment; filename=file2.jpg',\n"
"    ]\n"
");"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:248
#: ./docs/9.x/filesystem.md:295
#: ./docs/10.x/filesystem.md:323
#: ./docs/11.x/filesystem.md:354
#: ./docs/master/filesystem.md:334
msgid "If you need to customize how temporary URLs are created for a specific storage disk, you can use the `buildTemporaryUrlsUsing` method. For example, this can be useful if you have a controller that allows you to download files stored via a disk that doesn't typically support temporary URLs. Usually, this method should be called from the `boot` method of a service provider:"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:250
#: ./docs/11.x/filesystem.md:260
#: ./docs/master/filesystem.md:260
msgid "If the file you are retrieving contains JSON, you may use the `json` method to retrieve the file and decode its contents:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:250
#: ./docs/9.x/filesystem.md:297
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function ($path, $expiration, $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:252
#: ./docs/11.x/filesystem.md:262
#: ./docs/master/filesystem.md:262
msgid "$orders = Storage::json('orders.json');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:277
#: ./docs/9.x/filesystem.md:324
#: ./docs/10.x/filesystem.md:289
#: ./docs/11.x/filesystem.md:299
#: ./docs/master/filesystem.md:299
#~ msgid "<a name=\"url-host-customization\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:278
#: ./docs/9.x/filesystem.md:325
#: ./docs/10.x/filesystem.md:290
#: ./docs/11.x/filesystem.md:300
#: ./docs/master/filesystem.md:300
msgid "URL Host Customization"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:280
#: ./docs/9.x/filesystem.md:327
#: ./docs/10.x/filesystem.md:292
msgid "If you would like to pre-define the host for URLs generated using the `Storage` facade, you may add a `url` option to the disk's configuration array:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:282
#: ./docs/9.x/filesystem.md:329
#: ./docs/10.x/filesystem.md:294
msgid "'public' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app/public'),\n"
"    'url' => env('APP_URL').'/storage',\n"
"    'visibility' => 'public',\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:289
#: ./docs/9.x/filesystem.md:336
#: ./docs/10.x/filesystem.md:369
#: ./docs/11.x/filesystem.md:400
#: ./docs/master/filesystem.md:380
#~ msgid "<a name=\"file-metadata\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:290
#: ./docs/9.x/filesystem.md:337
#: ./docs/10.x/filesystem.md:370
#: ./docs/11.x/filesystem.md:401
#: ./docs/master/filesystem.md:381
msgid "File Metadata"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:292
#: ./docs/9.x/filesystem.md:339
#: ./docs/10.x/filesystem.md:372
#: ./docs/11.x/filesystem.md:403
#: ./docs/master/filesystem.md:383
msgid "In addition to reading and writing files, Laravel can also provide information about the files themselves. For example, the `size` method may be used to get the size of a file in bytes:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:294
#: ./docs/9.x/filesystem.md:341
#: ./docs/10.x/filesystem.md:374
#: ./docs/11.x/filesystem.md:405
#: ./docs/master/filesystem.md:385
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$size = Storage::size('file.jpg');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:298
#: ./docs/9.x/filesystem.md:345
#: ./docs/10.x/filesystem.md:378
#: ./docs/11.x/filesystem.md:409
#: ./docs/master/filesystem.md:389
msgid "The `lastModified` method returns the UNIX timestamp of the last time the file was modified:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:300
#: ./docs/9.x/filesystem.md:347
#: ./docs/10.x/filesystem.md:380
#: ./docs/11.x/filesystem.md:411
#: ./docs/master/filesystem.md:391
msgid "$time = Storage::lastModified('file.jpg');"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:302
#: ./docs/master/filesystem.md:302
msgid "If you would like to modify the host for URLs generated using the `Storage` facade, you may add or change the `url` option in the disk's configuration array:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:302
#: ./docs/9.x/filesystem.md:353
#: ./docs/10.x/filesystem.md:386
#: ./docs/11.x/filesystem.md:417
#: ./docs/master/filesystem.md:397
#~ msgid "<a name=\"file-paths\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:303
#: ./docs/9.x/filesystem.md:354
#: ./docs/10.x/filesystem.md:387
#: ./docs/11.x/filesystem.md:418
#: ./docs/master/filesystem.md:398
msgid "File Paths"
msgstr ""

# CODE
#: ./docs/11.x/filesystem.md:304
#: ./docs/master/filesystem.md:304
msgid "'public' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app/public'),\n"
"    'url' => env('APP_URL').'/storage',\n"
"    'visibility' => 'public',\n"
"    'throw' => false,\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:305
#: ./docs/9.x/filesystem.md:356
#: ./docs/10.x/filesystem.md:389
#: ./docs/11.x/filesystem.md:420
#: ./docs/master/filesystem.md:400
msgid "You may use the `path` method to get the path for a given file. If you are using the `local` driver, this will return the absolute path to the file. If you are using the `s3` driver, this method will return the relative path to the file in the S3 bucket:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:307
#: ./docs/9.x/filesystem.md:358
#: ./docs/10.x/filesystem.md:391
#: ./docs/11.x/filesystem.md:422
#: ./docs/master/filesystem.md:402
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$path = Storage::path('file.jpg');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:311
#: ./docs/9.x/filesystem.md:362
#: ./docs/10.x/filesystem.md:395
#: ./docs/11.x/filesystem.md:426
#: ./docs/master/filesystem.md:406
#~ msgid "<a name=\"storing-files\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:312
#: ./docs/9.x/filesystem.md:363
#: ./docs/10.x/filesystem.md:396
#: ./docs/11.x/filesystem.md:427
#: ./docs/master/filesystem.md:407
msgid "Storing Files"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:314
#: ./docs/9.x/filesystem.md:365
#: ./docs/10.x/filesystem.md:398
#: ./docs/11.x/filesystem.md:429
#: ./docs/master/filesystem.md:409
msgid "The `put` method may be used to store file contents on a disk. You may also pass a PHP `resource` to the `put` method, which will use Flysystem's underlying stream support. Remember, all file paths should be specified relative to the \"root\" location configured for the disk:"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:315
msgid "Using the `temporaryUrl` method, you may create temporary URLs to files stored using the `local` and `s3` drivers. This method accepts a path and a `DateTime` instance specifying when the URL should expire:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:316
#: ./docs/9.x/filesystem.md:367
#: ./docs/10.x/filesystem.md:400
#: ./docs/11.x/filesystem.md:431
#: ./docs/master/filesystem.md:411
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('file.jpg', $contents);\n\n"
"Storage::put('file.jpg', $resource);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:322
#: ./docs/9.x/filesystem.md:408
#: ./docs/10.x/filesystem.md:441
#: ./docs/11.x/filesystem.md:472
#: ./docs/master/filesystem.md:452
#~ msgid "<a name=\"automatic-streaming\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/filesystem.md:323
#~ msgid "<a name=\"enabling-local-temporary-urls\"></a>"
#~ msgstr ""

# H4
# H3
#: ./docs/8.x/filesystem.md:323
#: ./docs/9.x/filesystem.md:409
#: ./docs/10.x/filesystem.md:442
#: ./docs/11.x/filesystem.md:473
#: ./docs/master/filesystem.md:453
msgid "Automatic Streaming"
msgstr ""

# H4
#: ./docs/11.x/filesystem.md:324
msgid "Enabling Local Temporary URLs"
msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:325
#: ./docs/11.x/filesystem.md:356
#: ./docs/master/filesystem.md:336
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use DateTime;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(\n"
"            function (string $path, DateTime $expiration, array $options) {\n"
"                return URL::temporarySignedRoute(\n"
"                    'files.download',\n"
"                    $expiration,\n"
"                    array_merge($options, ['path' => $path])\n"
"                );\n"
"            }\n"
"        );\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:325
#: ./docs/9.x/filesystem.md:411
#: ./docs/10.x/filesystem.md:444
#: ./docs/11.x/filesystem.md:475
#: ./docs/master/filesystem.md:455
msgid "Streaming files to storage offers significantly reduced memory usage. If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the `putFile` or `putFileAs` method. This method accepts either an `Illuminate\\Http\\File` or `Illuminate\\Http\\UploadedFile` instance and will automatically stream the file to your desired location:"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:326
msgid "If you started developing your application before support for temporary URLs was introduced to the `local` driver, you may need to enable local temporary URLs. To do so, add the `serve` option to your `local` disk's configuration array within the `config/filesystems.php` configuration file:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:327
#: ./docs/9.x/filesystem.md:413
#: ./docs/10.x/filesystem.md:446
#: ./docs/11.x/filesystem.md:477
#: ./docs/master/filesystem.md:457
msgid "use Illuminate\\Http\\File;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"// Automatically generate a unique ID for filename...\n"
"$path = Storage::putFile('photos', new File('/path/to/photo'));\n\n"
"// Manually specify a filename...\n"
"$path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');"
msgstr ""

# CODE: php
#: ./docs/11.x/filesystem.md:328
msgid "'local' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app/private'),\n"
"    'serve' => true, // [tl! add]\n"
"    'throw' => false,\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:336
#: ./docs/9.x/filesystem.md:422
#: ./docs/10.x/filesystem.md:455
#: ./docs/11.x/filesystem.md:486
#: ./docs/master/filesystem.md:466
msgid "There are a few important things to note about the `putFile` method. Note that we only specified a directory name and not a filename. By default, the `putFile` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `putFile` method so you can store the path, including the generated filename, in your database."
msgstr ""

# P
#: ./docs/11.x/filesystem.md:337
#~ msgid "<a name=\"s3-request-parameters\"></a>"
#~ msgstr ""

# H4
#: ./docs/11.x/filesystem.md:338
msgid "S3 Request Parameters"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:338
#: ./docs/9.x/filesystem.md:424
#: ./docs/10.x/filesystem.md:457
#: ./docs/11.x/filesystem.md:488
#: ./docs/master/filesystem.md:468
msgid "The `putFile` and `putFileAs` methods also accept an argument to specify the \"visibility\" of the stored file. This is particularly useful if you are storing the file on a cloud disk such as Amazon S3 and would like the file to be publicly accessible via generated URLs:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:340
#: ./docs/9.x/filesystem.md:426
#: ./docs/10.x/filesystem.md:459
#: ./docs/11.x/filesystem.md:490
#: ./docs/master/filesystem.md:470
msgid "Storage::putFile('photos', new File('/path/to/photo'), 'public');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:342
#: ./docs/9.x/filesystem.md:390
#: ./docs/10.x/filesystem.md:423
#: ./docs/11.x/filesystem.md:454
#: ./docs/master/filesystem.md:434
#~ msgid "<a name=\"prepending-appending-to-files\"></a>"
#~ msgstr ""

# H4
# H3
#: ./docs/8.x/filesystem.md:343
#: ./docs/9.x/filesystem.md:391
msgid "Prepending & Appending To Files"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:345
#: ./docs/9.x/filesystem.md:393
#: ./docs/10.x/filesystem.md:426
#: ./docs/11.x/filesystem.md:457
#: ./docs/master/filesystem.md:437
msgid "The `prepend` and `append` methods allow you to write to the beginning or end of a file:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:347
#: ./docs/9.x/filesystem.md:395
#: ./docs/10.x/filesystem.md:428
#: ./docs/11.x/filesystem.md:459
#: ./docs/master/filesystem.md:439
msgid "Storage::prepend('file.log', 'Prepended Text');\n\n"
"Storage::append('file.log', 'Appended Text');"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:349
#: ./docs/10.x/filesystem.md:382
#: ./docs/11.x/filesystem.md:413
#: ./docs/master/filesystem.md:393
msgid "The MIME type of a given file may be obtained via the `mimeType` method:"
msgstr ""

# P
#: ./docs/11.x/filesystem.md:351
#~ msgid "<a name=\"customizing-temporary-urls\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/filesystem.md:351
#: ./docs/9.x/filesystem.md:399
#: ./docs/10.x/filesystem.md:432
#: ./docs/11.x/filesystem.md:463
#: ./docs/master/filesystem.md:443
#~ msgid "<a name=\"copying-moving-files\"></a>"
#~ msgstr ""

# CODE
#: ./docs/9.x/filesystem.md:351
msgid "$mime = Storage::mimeType('file.jpg')"
msgstr ""

# H4
#: ./docs/11.x/filesystem.md:352
msgid "Customizing Temporary URLs"
msgstr ""

# H4
# H3
#: ./docs/8.x/filesystem.md:352
#: ./docs/9.x/filesystem.md:400
msgid "Copying & Moving Files"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:353
#: ./docs/11.x/filesystem.md:384
#: ./docs/master/filesystem.md:364
#~ msgid "<a name=\"temporary-upload-urls\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/filesystem.md:354
#: ./docs/11.x/filesystem.md:385
#: ./docs/master/filesystem.md:365
msgid "Temporary Upload URLs"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:354
#: ./docs/9.x/filesystem.md:402
#: ./docs/10.x/filesystem.md:435
#: ./docs/11.x/filesystem.md:466
#: ./docs/master/filesystem.md:446
msgid "The `copy` method may be used to copy an existing file to a new location on the disk, while the `move` method may be used to rename or move an existing file to a new location:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:356
#: ./docs/9.x/filesystem.md:404
#: ./docs/10.x/filesystem.md:437
#: ./docs/11.x/filesystem.md:468
#: ./docs/master/filesystem.md:448
msgid "Storage::copy('old/file.jpg', 'new/file.jpg');\n\n"
"Storage::move('old/file.jpg', 'new/file.jpg');"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:357
#: ./docs/11.x/filesystem.md:388
#: ./docs/master/filesystem.md:368
msgid "The ability to generate temporary upload URLs is only supported by the `s3` driver."
msgstr ""

# P
#: ./docs/10.x/filesystem.md:359
#: ./docs/11.x/filesystem.md:390
#: ./docs/master/filesystem.md:370
msgid "If you need to generate a temporary URL that can be used to upload a file directly from your client-side application, you may use the `temporaryUploadUrl` method. This method accepts a path and a `DateTime` instance specifying when the URL should expire. The `temporaryUploadUrl` method returns an associative array which may be destructured into the upload URL and the headers that should be included with the upload request:"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:360
#: ./docs/9.x/filesystem.md:428
#: ./docs/10.x/filesystem.md:461
#: ./docs/11.x/filesystem.md:492
#: ./docs/master/filesystem.md:472
#~ msgid "<a name=\"file-uploads\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:361
#: ./docs/11.x/filesystem.md:392
#: ./docs/master/filesystem.md:372
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"['url' => $url, 'headers' => $headers] = Storage::temporaryUploadUrl(\n"
"    'file.jpg', now()->addMinutes(5)\n"
");"
msgstr ""

# H3
#: ./docs/8.x/filesystem.md:361
#: ./docs/9.x/filesystem.md:429
#: ./docs/10.x/filesystem.md:462
#: ./docs/11.x/filesystem.md:493
#: ./docs/master/filesystem.md:473
msgid "File Uploads"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:363
#: ./docs/9.x/filesystem.md:431
#: ./docs/10.x/filesystem.md:464
#: ./docs/11.x/filesystem.md:495
#: ./docs/master/filesystem.md:475
msgid "In web applications, one of the most common use-cases for storing files is storing user uploaded files such as photos and documents. Laravel makes it very easy to store uploaded files using the `store` method on an uploaded file instance. Call the `store` method with the path at which you wish to store the uploaded file:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:365
#: ./docs/9.x/filesystem.md:433
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request)\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n\n"
"        return $path;\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:367
#: ./docs/11.x/filesystem.md:398
#: ./docs/master/filesystem.md:378
msgid "This method is primarily useful in serverless environments that require the client-side application to directly upload files to a cloud storage system such as Amazon S3."
msgstr ""

# P
#: ./docs/9.x/filesystem.md:373
#: ./docs/10.x/filesystem.md:406
#: ./docs/11.x/filesystem.md:437
#: ./docs/master/filesystem.md:417
#~ msgid "<a name=\"failed-writes\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/filesystem.md:374
#: ./docs/10.x/filesystem.md:407
#: ./docs/11.x/filesystem.md:438
#: ./docs/master/filesystem.md:418
msgid "Failed Writes"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:376
#: ./docs/10.x/filesystem.md:409
#: ./docs/11.x/filesystem.md:440
#: ./docs/master/filesystem.md:420
msgid "If the `put` method (or other \"write\" operations) is unable to write the file to disk, `false` will be returned:"
msgstr ""

# CODE
#: ./docs/9.x/filesystem.md:378
#: ./docs/10.x/filesystem.md:411
#: ./docs/11.x/filesystem.md:442
#: ./docs/master/filesystem.md:422
msgid "if (! Storage::put('file.jpg', $contents)) {\n"
"    // The file could not be written to disk...\n"
"}"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:382
#: ./docs/10.x/filesystem.md:415
#: ./docs/11.x/filesystem.md:446
#: ./docs/master/filesystem.md:426
msgid "If you wish, you may define the `throw` option within your filesystem disk's configuration array. When this option is defined as `true`, \"write\" methods such as `put` will throw an instance of `League\\Flysystem\\UnableToWriteFile` when write operations fail:"
msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:384
#: ./docs/11.x/filesystem.md:415
#: ./docs/master/filesystem.md:395
msgid "$mime = Storage::mimeType('file.jpg');"
msgstr ""

# CODE
#: ./docs/9.x/filesystem.md:384
#: ./docs/10.x/filesystem.md:417
#: ./docs/11.x/filesystem.md:448
#: ./docs/master/filesystem.md:428
msgid "'public' => [\n"
"    'driver' => 'local',\n"
"    // ...\n"
"    'throw' => true,\n"
"],"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:388
#: ./docs/9.x/filesystem.md:456
#: ./docs/10.x/filesystem.md:486
#: ./docs/11.x/filesystem.md:517
#: ./docs/master/filesystem.md:497
msgid "There are a few important things to note about this example. Note that we only specified a directory name, not a filename. By default, the `store` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `store` method so you can store the path, including the generated filename, in your database."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:390
#: ./docs/9.x/filesystem.md:458
#: ./docs/10.x/filesystem.md:488
#: ./docs/11.x/filesystem.md:519
#: ./docs/master/filesystem.md:499
msgid "You may also call the `putFile` method on the `Storage` facade to perform the same file storage operation as the example above:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:392
#: ./docs/9.x/filesystem.md:460
#: ./docs/10.x/filesystem.md:490
#: ./docs/11.x/filesystem.md:521
#: ./docs/master/filesystem.md:501
msgid "$path = Storage::putFile('avatars', $request->file('avatar'));"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:394
#: ./docs/9.x/filesystem.md:462
#: ./docs/10.x/filesystem.md:492
#: ./docs/11.x/filesystem.md:523
#: ./docs/master/filesystem.md:503
#~ msgid "<a name=\"specifying-a-file-name\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:395
#: ./docs/9.x/filesystem.md:463
msgid "Specifying A File Name"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:397
#: ./docs/9.x/filesystem.md:465
#: ./docs/10.x/filesystem.md:495
#: ./docs/11.x/filesystem.md:526
#: ./docs/master/filesystem.md:506
msgid "If you do not want a filename to be automatically assigned to your stored file, you may use the `storeAs` method, which receives the path, the filename, and the (optional) disk as its arguments:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:399
#: ./docs/9.x/filesystem.md:467
#: ./docs/10.x/filesystem.md:497
#: ./docs/11.x/filesystem.md:528
#: ./docs/master/filesystem.md:508
msgid "$path = $request->file('avatar')->storeAs(\n"
"    'avatars', $request->user()->id\n"
");"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:403
#: ./docs/9.x/filesystem.md:471
#: ./docs/10.x/filesystem.md:501
#: ./docs/11.x/filesystem.md:532
#: ./docs/master/filesystem.md:512
msgid "You may also use the `putFileAs` method on the `Storage` facade, which will perform the same file storage operation as the example above:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:405
#: ./docs/9.x/filesystem.md:473
#: ./docs/10.x/filesystem.md:503
#: ./docs/11.x/filesystem.md:534
#: ./docs/master/filesystem.md:514
msgid "$path = Storage::putFileAs(\n"
"    'avatars', $request->file('avatar'), $request->user()->id\n"
");"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:409
msgid "Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\Util::normalizePath` method."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:411
#: ./docs/9.x/filesystem.md:480
#: ./docs/10.x/filesystem.md:510
#: ./docs/11.x/filesystem.md:541
#: ./docs/master/filesystem.md:521
#~ msgid "<a name=\"specifying-a-disk\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:412
#: ./docs/9.x/filesystem.md:481
msgid "Specifying A Disk"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:414
#: ./docs/9.x/filesystem.md:483
#: ./docs/10.x/filesystem.md:513
#: ./docs/11.x/filesystem.md:544
#: ./docs/master/filesystem.md:524
msgid "By default, this uploaded file's `store` method will use your default disk. If you would like to specify another disk, pass the disk name as the second argument to the `store` method:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:416
#: ./docs/9.x/filesystem.md:485
#: ./docs/10.x/filesystem.md:515
#: ./docs/11.x/filesystem.md:546
#: ./docs/master/filesystem.md:526
msgid "$path = $request->file('avatar')->store(\n"
"    'avatars/'.$request->user()->id, 's3'\n"
");"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:420
#: ./docs/9.x/filesystem.md:489
#: ./docs/10.x/filesystem.md:519
#: ./docs/11.x/filesystem.md:550
#: ./docs/master/filesystem.md:530
msgid "If you are using the `storeAs` method, you may pass the disk name as the third argument to the method:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:422
#: ./docs/9.x/filesystem.md:491
#: ./docs/10.x/filesystem.md:521
#: ./docs/11.x/filesystem.md:552
#: ./docs/master/filesystem.md:532
msgid "$path = $request->file('avatar')->storeAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");"
msgstr ""

# H3
#: ./docs/10.x/filesystem.md:424
#: ./docs/11.x/filesystem.md:455
#: ./docs/master/filesystem.md:435
msgid "Prepending and Appending To Files"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:428
#: ./docs/9.x/filesystem.md:497
#: ./docs/10.x/filesystem.md:527
#: ./docs/11.x/filesystem.md:558
#: ./docs/master/filesystem.md:538
#~ msgid "<a name=\"other-uploaded-file-information\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:429
#: ./docs/9.x/filesystem.md:498
#: ./docs/10.x/filesystem.md:528
#: ./docs/11.x/filesystem.md:559
#: ./docs/master/filesystem.md:539
msgid "Other Uploaded File Information"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:431
#: ./docs/9.x/filesystem.md:500
#: ./docs/10.x/filesystem.md:530
#: ./docs/11.x/filesystem.md:561
#: ./docs/master/filesystem.md:541
msgid "If you would like to get the original name and extension of the uploaded file, you may do so using the `getClientOriginalName` and `getClientOriginalExtension` methods:"
msgstr ""

# H3
#: ./docs/10.x/filesystem.md:433
#: ./docs/11.x/filesystem.md:464
#: ./docs/master/filesystem.md:444
msgid "Copying and Moving Files"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:433
#: ./docs/9.x/filesystem.md:502
#: ./docs/10.x/filesystem.md:532
#: ./docs/11.x/filesystem.md:563
#: ./docs/master/filesystem.md:543
msgid "$file = $request->file('avatar');\n\n"
"$name = $file->getClientOriginalName();\n"
"$extension = $file->getClientOriginalExtension();"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:438
#: ./docs/9.x/filesystem.md:507
#: ./docs/10.x/filesystem.md:537
#: ./docs/11.x/filesystem.md:568
#: ./docs/master/filesystem.md:548
msgid "However, keep in mind that the `getClientOriginalName` and `getClientOriginalExtension` methods are considered unsafe, as the file name and extension may be tampered with by a malicious user. For this reason, you should typically prefer the `hashName` and `extension` methods to get a name and an extension for the given file upload:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:440
#: ./docs/9.x/filesystem.md:509
#: ./docs/10.x/filesystem.md:539
#: ./docs/11.x/filesystem.md:570
#: ./docs/master/filesystem.md:550
msgid "$file = $request->file('avatar');\n\n"
"$name = $file->hashName(); // Generate a unique, random name...\n"
"$extension = $file->extension(); // Determine the file's extension based on the file's MIME type..."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:445
#: ./docs/9.x/filesystem.md:514
#: ./docs/10.x/filesystem.md:544
#: ./docs/11.x/filesystem.md:575
#: ./docs/master/filesystem.md:555
#~ msgid "<a name=\"file-visibility\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/filesystem.md:446
#: ./docs/9.x/filesystem.md:515
#: ./docs/10.x/filesystem.md:545
#: ./docs/11.x/filesystem.md:576
#: ./docs/master/filesystem.md:556
msgid "File Visibility"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:448
#: ./docs/9.x/filesystem.md:517
#: ./docs/10.x/filesystem.md:547
#: ./docs/11.x/filesystem.md:578
#: ./docs/master/filesystem.md:558
msgid "In Laravel's Flysystem integration, \"visibility\" is an abstraction of file permissions across multiple platforms. Files may either be declared `public` or `private`. When a file is declared `public`, you are indicating that the file should generally be accessible to others. For example, when using the S3 driver, you may retrieve URLs for `public` files."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:450
#: ./docs/9.x/filesystem.md:519
#: ./docs/10.x/filesystem.md:549
#: ./docs/11.x/filesystem.md:580
#: ./docs/master/filesystem.md:560
msgid "You can set the visibility when writing the file via the `put` method:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:452
#: ./docs/9.x/filesystem.md:521
#: ./docs/10.x/filesystem.md:551
#: ./docs/11.x/filesystem.md:582
#: ./docs/master/filesystem.md:562
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::put('file.jpg', $contents, 'public');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:456
#: ./docs/9.x/filesystem.md:525
#: ./docs/10.x/filesystem.md:555
#: ./docs/11.x/filesystem.md:586
#: ./docs/master/filesystem.md:566
msgid "If the file has already been stored, its visibility can be retrieved and set via the `getVisibility` and `setVisibility` methods:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:458
#: ./docs/9.x/filesystem.md:527
#: ./docs/10.x/filesystem.md:557
#: ./docs/11.x/filesystem.md:588
#: ./docs/master/filesystem.md:568
msgid "$visibility = Storage::getVisibility('file.jpg');\n\n"
"Storage::setVisibility('file.jpg', 'public');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:462
#: ./docs/9.x/filesystem.md:531
#: ./docs/10.x/filesystem.md:561
#: ./docs/11.x/filesystem.md:592
#: ./docs/master/filesystem.md:572
msgid "When interacting with uploaded files, you may use the `storePublicly` and `storePubliclyAs` methods to store the uploaded file with `public` visibility:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:464
#: ./docs/9.x/filesystem.md:533
#: ./docs/10.x/filesystem.md:563
#: ./docs/11.x/filesystem.md:594
#: ./docs/master/filesystem.md:574
msgid "$path = $request->file('avatar')->storePublicly('avatars', 's3');\n\n"
"$path = $request->file('avatar')->storePubliclyAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");"
msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:466
#: ./docs/11.x/filesystem.md:497
#: ./docs/master/filesystem.md:477
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     */\n"
"    public function update(Request $request): string\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n\n"
"        return $path;\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:472
#: ./docs/9.x/filesystem.md:541
#: ./docs/10.x/filesystem.md:571
#: ./docs/11.x/filesystem.md:602
#: ./docs/master/filesystem.md:582
#~ msgid "<a name=\"local-files-and-visibility\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:473
#: ./docs/9.x/filesystem.md:542
msgid "Local Files & Visibility"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:475
#: ./docs/9.x/filesystem.md:544
#: ./docs/10.x/filesystem.md:574
#: ./docs/11.x/filesystem.md:605
#: ./docs/master/filesystem.md:585
msgid "When using the `local` driver, `public` [visibility](#file-visibility) translates to `0755` permissions for directories and `0644` permissions for files. You can modify the permissions mappings in your application's `filesystems` configuration file:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:477
#: ./docs/9.x/filesystem.md:546
#: ./docs/10.x/filesystem.md:576
msgid "'local' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app'),\n"
"    'permissions' => [\n"
"        'file' => [\n"
"            'public' => 0644,\n"
"            'private' => 0600,\n"
"        ],\n"
"        'dir' => [\n"
"            'public' => 0755,\n"
"            'private' => 0700,\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:478
#: ./docs/10.x/filesystem.md:508
#: ./docs/11.x/filesystem.md:539
#: ./docs/master/filesystem.md:519
msgid "Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\WhitespacePathNormalizer::normalizePath` method."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:492
#: ./docs/9.x/filesystem.md:561
#: ./docs/10.x/filesystem.md:591
#: ./docs/11.x/filesystem.md:623
#: ./docs/master/filesystem.md:603
#~ msgid "<a name=\"deleting-files\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/filesystem.md:493
#: ./docs/11.x/filesystem.md:524
#: ./docs/master/filesystem.md:504
msgid "Specifying a File Name"
msgstr ""

# H2
#: ./docs/8.x/filesystem.md:493
#: ./docs/9.x/filesystem.md:562
#: ./docs/10.x/filesystem.md:592
#: ./docs/11.x/filesystem.md:624
#: ./docs/master/filesystem.md:604
msgid "Deleting Files"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:495
#: ./docs/9.x/filesystem.md:564
#: ./docs/10.x/filesystem.md:594
#: ./docs/11.x/filesystem.md:626
#: ./docs/master/filesystem.md:606
msgid "The `delete` method accepts a single filename or an array of files to delete:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:497
#: ./docs/9.x/filesystem.md:566
#: ./docs/10.x/filesystem.md:596
#: ./docs/11.x/filesystem.md:628
#: ./docs/master/filesystem.md:608
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::delete('file.jpg');\n\n"
"Storage::delete(['file.jpg', 'file2.jpg']);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:503
#: ./docs/9.x/filesystem.md:572
#: ./docs/10.x/filesystem.md:602
#: ./docs/11.x/filesystem.md:634
#: ./docs/master/filesystem.md:614
msgid "If necessary, you may specify the disk that the file should be deleted from:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:505
#: ./docs/9.x/filesystem.md:574
#: ./docs/10.x/filesystem.md:604
#: ./docs/11.x/filesystem.md:636
#: ./docs/master/filesystem.md:616
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"Storage::disk('s3')->delete('path/file.jpg');"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:509
#: ./docs/9.x/filesystem.md:578
#: ./docs/10.x/filesystem.md:608
#: ./docs/11.x/filesystem.md:640
#: ./docs/master/filesystem.md:620
#~ msgid "<a name=\"directories\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:510
#: ./docs/9.x/filesystem.md:579
#: ./docs/10.x/filesystem.md:609
#: ./docs/11.x/filesystem.md:641
#: ./docs/master/filesystem.md:621
msgid "Directories"
msgstr ""

# H4
#: ./docs/10.x/filesystem.md:511
#: ./docs/11.x/filesystem.md:542
#: ./docs/master/filesystem.md:522
msgid "Specifying a Disk"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:512
#: ./docs/9.x/filesystem.md:581
#: ./docs/10.x/filesystem.md:611
#: ./docs/11.x/filesystem.md:643
#: ./docs/master/filesystem.md:623
#~ msgid "<a name=\"get-all-files-within-a-directory\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:513
#: ./docs/9.x/filesystem.md:582
msgid "Get All Files Within A Directory"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:515
#: ./docs/9.x/filesystem.md:584
#: ./docs/10.x/filesystem.md:614
#: ./docs/11.x/filesystem.md:646
#: ./docs/master/filesystem.md:626
msgid "The `files` method returns an array of all of the files in a given directory. If you would like to retrieve a list of all files within a given directory including all subdirectories, you may use the `allFiles` method:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:517
#: ./docs/9.x/filesystem.md:586
#: ./docs/10.x/filesystem.md:616
#: ./docs/11.x/filesystem.md:648
#: ./docs/master/filesystem.md:628
msgid "use Illuminate\\Support\\Facades\\Storage;\n\n"
"$files = Storage::files($directory);\n\n"
"$files = Storage::allFiles($directory);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:523
#: ./docs/9.x/filesystem.md:592
#: ./docs/10.x/filesystem.md:622
#: ./docs/11.x/filesystem.md:654
#: ./docs/master/filesystem.md:634
#~ msgid "<a name=\"get-all-directories-within-a-directory\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:524
#: ./docs/9.x/filesystem.md:593
msgid "Get All Directories Within A Directory"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:526
#: ./docs/9.x/filesystem.md:595
#: ./docs/10.x/filesystem.md:625
#: ./docs/11.x/filesystem.md:657
#: ./docs/master/filesystem.md:637
msgid "The `directories` method returns an array of all the directories within a given directory. Additionally, you may use the `allDirectories` method to get a list of all directories within a given directory and all of its subdirectories:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:528
#: ./docs/9.x/filesystem.md:597
#: ./docs/10.x/filesystem.md:627
#: ./docs/11.x/filesystem.md:659
#: ./docs/master/filesystem.md:639
msgid "$directories = Storage::directories($directory);\n\n"
"$directories = Storage::allDirectories($directory);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:532
#: ./docs/9.x/filesystem.md:601
#: ./docs/10.x/filesystem.md:631
#: ./docs/11.x/filesystem.md:663
#: ./docs/master/filesystem.md:643
#~ msgid "<a name=\"create-a-directory\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:533
#: ./docs/9.x/filesystem.md:602
msgid "Create A Directory"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:535
#: ./docs/9.x/filesystem.md:604
#: ./docs/10.x/filesystem.md:634
#: ./docs/11.x/filesystem.md:666
#: ./docs/master/filesystem.md:646
msgid "The `makeDirectory` method will create the given directory, including any needed subdirectories:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:537
#: ./docs/9.x/filesystem.md:606
#: ./docs/10.x/filesystem.md:636
#: ./docs/11.x/filesystem.md:668
#: ./docs/master/filesystem.md:648
msgid "Storage::makeDirectory($directory);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:539
#: ./docs/9.x/filesystem.md:608
#: ./docs/10.x/filesystem.md:638
#: ./docs/11.x/filesystem.md:670
#: ./docs/master/filesystem.md:650
#~ msgid "<a name=\"delete-a-directory\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/filesystem.md:540
#: ./docs/9.x/filesystem.md:609
msgid "Delete A Directory"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:542
#: ./docs/9.x/filesystem.md:611
#: ./docs/10.x/filesystem.md:641
#: ./docs/11.x/filesystem.md:673
#: ./docs/master/filesystem.md:653
msgid "Finally, the `deleteDirectory` method may be used to remove a directory and all of its files:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:544
#: ./docs/9.x/filesystem.md:613
#: ./docs/10.x/filesystem.md:643
#: ./docs/11.x/filesystem.md:675
#: ./docs/master/filesystem.md:655
msgid "Storage::deleteDirectory($directory);"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:546
#: ./docs/9.x/filesystem.md:615
#: ./docs/10.x/filesystem.md:687
#: ./docs/11.x/filesystem.md:748
#: ./docs/master/filesystem.md:728
#~ msgid "<a name=\"custom-filesystems\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/filesystem.md:547
#: ./docs/9.x/filesystem.md:616
#: ./docs/10.x/filesystem.md:688
#: ./docs/11.x/filesystem.md:749
#: ./docs/master/filesystem.md:729
msgid "Custom Filesystems"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:549
#: ./docs/9.x/filesystem.md:618
#: ./docs/10.x/filesystem.md:690
#: ./docs/11.x/filesystem.md:751
#: ./docs/master/filesystem.md:731
msgid "Laravel's Flysystem integration provides support for several \"drivers\" out of the box; however, Flysystem is not limited to these and has adapters for many other storage systems. You can create a custom driver if you want to use one of these additional adapters in your Laravel application."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:551
#: ./docs/9.x/filesystem.md:620
#: ./docs/10.x/filesystem.md:692
#: ./docs/11.x/filesystem.md:753
#: ./docs/master/filesystem.md:733
msgid "In order to define a custom filesystem you will need a Flysystem adapter. Let's add a community maintained Dropbox adapter to our project:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/filesystem.md:553
#: ./docs/9.x/filesystem.md:622
#: ./docs/10.x/filesystem.md:694
#: ./docs/11.x/filesystem.md:755
#: ./docs/master/filesystem.md:735
msgid "composer require spatie/flysystem-dropbox"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:555
#: ./docs/9.x/filesystem.md:626
#: ./docs/10.x/filesystem.md:698
#: ./docs/11.x/filesystem.md:759
#: ./docs/master/filesystem.md:739
msgid "Next, you can register the driver within the `boot` method of one of your application's [service providers](/docs/{{version}}/providers). To accomplish this, you should use the `extend` method of the `Storage` facade:"
msgstr ""

# CODE
#: ./docs/8.x/filesystem.md:557
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $client = new DropboxClient(\n"
"                $config['authorization_token']\n"
"            );\n\n"
"            return new Filesystem(new DropboxAdapter($client));\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# H4
#: ./docs/10.x/filesystem.md:572
#: ./docs/11.x/filesystem.md:603
#: ./docs/master/filesystem.md:583
msgid "Local Files and Visibility"
msgstr ""

# P
#: ./docs/8.x/filesystem.md:596
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `League\\Flysystem\\Filesystem`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""

# P
#: ./docs/8.x/filesystem.md:598
#: ./docs/9.x/filesystem.md:674
#: ./docs/10.x/filesystem.md:743
#: ./docs/11.x/filesystem.md:804
#: ./docs/master/filesystem.md:784
msgid "Once you have created and registered the extension's service provider, you may use the `dropbox` driver in your `config/filesystems.php` configuration file."
msgstr ""

# CODE
#: ./docs/11.x/filesystem.md:607
#: ./docs/master/filesystem.md:587
msgid "'local' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app'),\n"
"    'permissions' => [\n"
"        'file' => [\n"
"            'public' => 0644,\n"
"            'private' => 0600,\n"
"        ],\n"
"        'dir' => [\n"
"            'public' => 0755,\n"
"            'private' => 0700,\n"
"        ],\n"
"    ],\n"
"    'throw' => false,\n"
"],"
msgstr ""

# H4
#: ./docs/10.x/filesystem.md:612
#: ./docs/11.x/filesystem.md:644
#: ./docs/master/filesystem.md:624
msgid "Get All Files Within a Directory"
msgstr ""

# H4
#: ./docs/10.x/filesystem.md:623
#: ./docs/11.x/filesystem.md:655
#: ./docs/master/filesystem.md:635
msgid "Get All Directories Within a Directory"
msgstr ""

# CODE
#: ./docs/9.x/filesystem.md:628
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# H4
#: ./docs/10.x/filesystem.md:632
#: ./docs/11.x/filesystem.md:664
#: ./docs/master/filesystem.md:644
msgid "Create a Directory"
msgstr ""

# H4
#: ./docs/10.x/filesystem.md:639
#: ./docs/11.x/filesystem.md:671
#: ./docs/master/filesystem.md:651
msgid "Delete a Directory"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:645
#: ./docs/11.x/filesystem.md:677
#: ./docs/master/filesystem.md:657
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

# H2
#: ./docs/10.x/filesystem.md:646
#: ./docs/11.x/filesystem.md:678
#: ./docs/master/filesystem.md:658
msgid "Testing"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:648
#: ./docs/11.x/filesystem.md:680
#: ./docs/master/filesystem.md:660
msgid "The `Storage` facade's `fake` method allows you to easily generate a fake disk that, combined with the file generation utilities of the `Illuminate\\Http\\UploadedFile` class, greatly simplifies the testing of file uploads. For example:"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/filesystem.md:650
#: ./docs/11.x/filesystem.md:709
#: ./docs/master/filesystem.md:689
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_albums_can_be_uploaded(): void\n"
"    {\n"
"        Storage::fake('photos');\n\n"
"        $response = $this->json('POST', '/photos', [\n"
"            UploadedFile::fake()->image('photo1.jpg'),\n"
"            UploadedFile::fake()->image('photo2.jpg')\n"
"        ]);\n\n"
"        // Assert one or more files were stored...\n"
"        Storage::disk('photos')->assertExists('photo1.jpg');\n"
"        Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n\n"
"        // Assert one or more files were not stored...\n"
"        Storage::disk('photos')->assertMissing('missing.jpg');\n"
"        Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n\n"
"        // Assert that a given directory is empty...\n"
"        Storage::disk('photos')->assertDirectoryEmpty('/wallpapers');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/9.x/filesystem.md:672
#: ./docs/10.x/filesystem.md:741
#: ./docs/11.x/filesystem.md:802
#: ./docs/master/filesystem.md:782
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `Illuminate\\Filesystem\\FilesystemAdapter`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""

# P
#: ./docs/10.x/filesystem.md:682
#: ./docs/11.x/filesystem.md:743
#: ./docs/master/filesystem.md:723
msgid "By default, the `fake` method will delete all files in its temporary directory. If you would like to keep these files, you may use the \"persistentFake\" method instead. For more information on testing file uploads, you may consult the [HTTP testing documentation's information on file uploads](/docs/{{version}}/http-tests#testing-file-uploads)."
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/filesystem.md:682
#: ./docs/master/filesystem.md:662
msgid "<?php\n\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"test('albums can be uploaded', function () {\n"
"    Storage::fake('photos');\n\n"
"    $response = $this->json('POST', '/photos', [\n"
"        UploadedFile::fake()->image('photo1.jpg'),\n"
"        UploadedFile::fake()->image('photo2.jpg')\n"
"    ]);\n\n"
"    // Assert one or more files were stored...\n"
"    Storage::disk('photos')->assertExists('photo1.jpg');\n"
"    Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n\n"
"    // Assert one or more files were not stored...\n"
"    Storage::disk('photos')->assertMissing('missing.jpg');\n"
"    Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n\n"
"    // Assert that a given directory is empty...\n"
"    Storage::disk('photos')->assertDirectoryEmpty('/wallpapers');\n"
"});"
msgstr ""

# P
#: ./docs/10.x/filesystem.md:685
#: ./docs/11.x/filesystem.md:746
#: ./docs/master/filesystem.md:726
msgid "The `image` method requires the [GD extension](https://www.php.net/manual/en/book.image.php)."
msgstr ""

# CODE
#: ./docs/10.x/filesystem.md:700
#: ./docs/11.x/filesystem.md:761
#: ./docs/master/filesystem.md:741
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::extend('dropbox', function (Application $app, array $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}"
msgstr ""

