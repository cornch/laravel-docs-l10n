#
msgid ""
msgstr ""

#: docs/8.x/eloquent-collections.md:block 1 (header)
msgid "Eloquent: Collections"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 2 (unordered list)
msgid "[Available Methods](#available-methods)"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 2 (unordered list)
msgid "[Custom Collections](#custom-collections)"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 5 (paragraph)
msgid "All Eloquent methods that return more than one model result will return instances of the `Illuminate\\Database\\Eloquent\\Collection` class, including results retrieved via the `get` method or accessed via a relationship. The Eloquent collection object extends Laravel's [base collection](/docs/{{version}}/collections), so it naturally inherits dozens of methods used to fluently work with the underlying array of Eloquent models. Be sure to review the Laravel collection documentation to learn all about these helpful methods!"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 6 (paragraph)
msgid "All collections also serve as iterators, allowing you to loop over them as if they were simple PHP arrays:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 7 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('active', 1)->get();\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->name;\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 8 (paragraph)
msgid "However, as previously mentioned, collections are much more powerful than arrays and expose a variety of map / reduce operations that may be chained using an intuitive interface. For example, we may remove all inactive models and then gather the first name for each remaining user:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 9 (code)
msgid ""
"$names = User::all()->reject(function ($user) {\n"
"    return $user->active === false;\n"
"})->map(function ($user) {\n"
"    return $user->name;\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 10 (paragraph)
msgid "<a name=\"eloquent-collection-conversion\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 11 (header)
msgid "Eloquent Collection Conversion"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 12 (paragraph)
msgid "While most Eloquent collection methods return a new instance of an Eloquent collection, the `collapse`, `flatten`, `flip`, `keys`, `pluck`, and `zip` methods return a [base collection](/docs/{{version}}/collections) instance. Likewise, if a `map` operation returns a collection that does not contain any Eloquent models, it will be converted to a base collection instance."
msgstr ""

#: docs/8.x/eloquent-collections.md:block 13 (paragraph)
msgid "<a name=\"available-methods\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 14 (header)
msgid "Available Methods"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 15 (paragraph)
msgid "All Eloquent collections extend the base [Laravel collection](/docs/{{version}}/collections#available-methods) object; therefore, they inherit all of the powerful methods provided by the base collection class."
msgstr ""

#: docs/8.x/eloquent-collections.md:block 16 (paragraph)
msgid "In addition, the `Illuminate\\Database\\Eloquent\\Collection` class provides a superset of methods to aid with managing your model collections. Most methods return `Illuminate\\Database\\Eloquent\\Collection` instances; however, some methods, like `modelKeys`, return an `Illuminate\\Support\\Collection` instance."
msgstr ""

#: docs/8.x/eloquent-collections.md:block 19 (paragraph)
msgid "[contains](#method-contains) [diff](#method-diff) [except](#method-except) [find](#method-find) [fresh](#method-fresh) [intersect](#method-intersect) [load](#method-load) [loadMissing](#method-loadMissing) [modelKeys](#method-modelKeys) [makeVisible](#method-makeVisible) [makeHidden](#method-makeHidden) [only](#method-only) [toQuery](#method-toquery) [unique](#method-unique)"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 21 (paragraph)
msgid "<a name=\"method-contains\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 22 (header)
msgid "`contains($key, $operator = null, $value = null)` {.collection-method .first-collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 23 (paragraph)
msgid "The `contains` method may be used to determine if a given model instance is contained by the collection. This method accepts a primary key or a model instance:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 24 (code)
msgid ""
"$users->contains(1);\n"
"\n"
"$users->contains(User::find(1));\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 25 (paragraph)
msgid "<a name=\"method-diff\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 26 (header)
msgid "`diff($items)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 27 (paragraph)
msgid "The `diff` method returns all of the models that are not present in the given collection:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 28 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $users->diff(User::whereIn('id', [1, 2, 3])->get());\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 29 (paragraph)
msgid "<a name=\"method-except\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 30 (header)
msgid "`except($keys)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 31 (paragraph)
msgid "The `except` method returns all of the models that do not have the given primary keys:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 32 (code)
msgid "$users = $users->except([1, 2, 3]);\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 33 (paragraph)
msgid "<a name=\"method-find\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 34 (header)
msgid "`find($key)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 35 (paragraph)
msgid "The `find` method returns the model that has a primary key matching the given key. If `$key` is a model instance, `find` will attempt to return a model matching the primary key. If `$key` is an array of keys, `find` will return all models which have a primary key in the given array:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 36 (code)
msgid ""
"$users = User::all();\n"
"\n"
"$user = $users->find(1);\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 37 (paragraph)
msgid "<a name=\"method-fresh\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 38 (header)
msgid "`fresh($with = [])` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 39 (paragraph)
msgid "The `fresh` method retrieves a fresh instance of each model in the collection from the database. In addition, any specified relationships will be eager loaded:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 40 (code)
msgid ""
"$users = $users->fresh();\n"
"\n"
"$users = $users->fresh('comments');\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 41 (paragraph)
msgid "<a name=\"method-intersect\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 42 (header)
msgid "`intersect($items)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 43 (paragraph)
msgid "The `intersect` method returns all of the models that are also present in the given collection:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 44 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $users->intersect(User::whereIn('id', [1, 2, 3])->get());\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 45 (paragraph)
msgid "<a name=\"method-load\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 46 (header)
msgid "`load($relations)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 47 (paragraph)
msgid "The `load` method eager loads the given relationships for all models in the collection:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 48 (code)
msgid ""
"$users->load(['comments', 'posts']);\n"
"\n"
"$users->load('comments.author');\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 49 (paragraph)
msgid "<a name=\"method-loadMissing\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 50 (header)
msgid "`loadMissing($relations)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 51 (paragraph)
msgid "The `loadMissing` method eager loads the given relationships for all models in the collection if the relationships are not already loaded:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 52 (code)
msgid ""
"$users->loadMissing(['comments', 'posts']);\n"
"\n"
"$users->loadMissing('comments.author');\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 53 (paragraph)
msgid "<a name=\"method-modelKeys\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 54 (header)
msgid "`modelKeys()` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 55 (paragraph)
msgid "The `modelKeys` method returns the primary keys for all models in the collection:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 56 (code)
msgid ""
"$users->modelKeys();\n"
"\n"
"// [1, 2, 3, 4, 5]\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 57 (paragraph)
msgid "<a name=\"method-makeVisible\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 58 (header)
msgid "`makeVisible($attributes)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 59 (paragraph)
msgid "The `makeVisible` method [makes attributes visible](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json) that are typically \"hidden\" on each model in the collection:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 60 (code)
msgid "$users = $users->makeVisible(['address', 'phone_number']);\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 61 (paragraph)
msgid "<a name=\"method-makeHidden\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 62 (header)
msgid "`makeHidden($attributes)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 63 (paragraph)
msgid "The `makeHidden` method [hides attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json) that are typically \"visible\" on each model in the collection:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 64 (code)
msgid "$users = $users->makeHidden(['address', 'phone_number']);\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 65 (paragraph)
msgid "<a name=\"method-only\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 66 (header)
msgid "`only($keys)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 67 (paragraph)
msgid "The `only` method returns all of the models that have the given primary keys:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 68 (code)
msgid "$users = $users->only([1, 2, 3]);\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 69 (paragraph)
msgid "<a name=\"method-toquery\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 70 (header)
msgid "`toQuery()` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 71 (paragraph)
msgid "The `toQuery` method returns an Eloquent query builder instance containing a `whereIn` constraint on the collection model's primary keys:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 72 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('status', 'VIP')->get();\n"
"\n"
"$users->toQuery()->update([\n"
"    'status' => 'Administrator',\n"
"]);\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 73 (paragraph)
msgid "<a name=\"method-unique\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 74 (header)
msgid "`unique($key = null, $strict = false)` {.collection-method}"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 75 (paragraph)
msgid "The `unique` method returns all of the unique models in the collection. Any models of the same type with the same primary key as another model in the collection are removed:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 76 (code)
msgid "$users = $users->unique();\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 77 (paragraph)
msgid "<a name=\"custom-collections\"></a>"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 78 (header)
msgid "Custom Collections"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 79 (paragraph)
msgid "If you would like to use a custom `Collection` object when interacting with a given model, you may define a `newCollection` method on your model:"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 80 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Support\\UserCollection;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Create a new Eloquent Collection instance.\n"
"     *\n"
"     * @param  array  $models\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Collection\n"
"     */\n"
"    public function newCollection(array $models = [])\n"
"    {\n"
"        return new UserCollection($models);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-collections.md:block 81 (paragraph)
msgid "Once you have defined a `newCollection` method, you will receive an instance of your custom collection anytime Eloquent would normally return an `Illuminate\\Database\\Eloquent\\Collection` instance. If you would like to use a custom collection for every model in your application, you should define the `newCollection` method on a base model class that is extended by all of your application's models."
msgstr ""
