msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:15\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/providers.pot\n"
"X-Crowdin-File-ID: 121\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/providers.md:1
#: ./docs/9.x/providers.md:1
#: ./docs/10.x/providers.md:1
#: ./docs/11.x/providers.md:1
#: ./docs/master/providers.md:1
msgctxt "H1"
msgid "Service Providers"
msgstr "Service Provider"

#: ./docs/8.x/providers.md:3
#: ./docs/9.x/providers.md:3
#: ./docs/10.x/providers.md:3
#: ./docs/11.x/providers.md:3
#: ./docs/master/providers.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: ./docs/8.x/providers.md:4
#: ./docs/9.x/providers.md:4
#: ./docs/10.x/providers.md:4
#: ./docs/11.x/providers.md:4
#: ./docs/master/providers.md:4
msgctxt "P"
msgid "[Writing Service Providers](#writing-service-providers)"
msgstr "[撰寫 ServiceProvider](#writing-service-providers)"

#: ./docs/8.x/providers.md:5
#: ./docs/9.x/providers.md:5
#: ./docs/10.x/providers.md:5
#: ./docs/11.x/providers.md:5
#: ./docs/master/providers.md:5
msgctxt "P"
msgid "[The Register Method](#the-register-method)"
msgstr "[Register 方法](#the-register-method)"

#: ./docs/8.x/providers.md:6
#: ./docs/9.x/providers.md:6
#: ./docs/10.x/providers.md:6
#: ./docs/11.x/providers.md:6
#: ./docs/master/providers.md:6
msgctxt "P"
msgid "[The Boot Method](#the-boot-method)"
msgstr "[Boot 方法](#the-boot-method)"

#: ./docs/8.x/providers.md:7
#: ./docs/9.x/providers.md:7
#: ./docs/10.x/providers.md:7
#: ./docs/11.x/providers.md:7
#: ./docs/master/providers.md:7
msgctxt "P"
msgid "[Registering Providers](#registering-providers)"
msgstr "[註冊 Provider](#registering-providers)"

#: ./docs/8.x/providers.md:8
#: ./docs/9.x/providers.md:8
#: ./docs/10.x/providers.md:8
#: ./docs/11.x/providers.md:8
#: ./docs/master/providers.md:8
msgctxt "P"
msgid "[Deferred Providers](#deferred-providers)"
msgstr "[延遲的 Provider](#deferred-providers)"

#: ./docs/8.x/providers.md:10
#: ./docs/9.x/providers.md:10
#: ./docs/10.x/providers.md:10
#: ./docs/11.x/providers.md:10
#: ./docs/master/providers.md:10
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:11
#: ./docs/9.x/providers.md:11
#: ./docs/10.x/providers.md:11
#: ./docs/11.x/providers.md:11
#: ./docs/master/providers.md:11
msgctxt "H2"
msgid "Introduction"
msgstr "簡介"

#: ./docs/8.x/providers.md:13
#: ./docs/9.x/providers.md:13
#: ./docs/10.x/providers.md:13
#: ./docs/11.x/providers.md:13
#: ./docs/master/providers.md:13
msgctxt "P"
msgid "Service providers are the central place of all Laravel application bootstrapping. Your own application, as well as all of Laravel's core services, are bootstrapped via service providers."
msgstr "Service Provider 是 Laravel 中負責啟動應用程式的中心點。不過是你自己開發的應用程式，還是 Laravel 的核心服務，都是使用 Service Provider 啟動的。"

#: ./docs/8.x/providers.md:15
#: ./docs/9.x/providers.md:15
#: ./docs/10.x/providers.md:15
#: ./docs/11.x/providers.md:15
#: ./docs/master/providers.md:15
msgctxt "P"
msgid "But, what do we mean by \"bootstrapped\"? In general, we mean **registering** things, including registering service container bindings, event listeners, middleware, and even routes. Service providers are the central place to configure your application."
msgstr "不過，「啟動」是什麼意思呢？一般來說，我們指的是 **註冊** 一些東西，包含註冊 Service Container 的繫結、事件監聽常式、Middleware、甚至是 Route。Service Provider 是用來設定應用程式的中心點。"

#: ./docs/11.x/providers.md:17
#: ./docs/master/providers.md:17
msgctxt "P"
msgid "Laravel uses dozens of service providers internally to bootstrap its core services, such as the mailer, queue, cache, and others. Many of these providers are \"deferred\" providers, meaning they will not be loaded on every request, but only when the services they provide are actually needed."
msgstr ""

#: ./docs/8.x/providers.md:17
#: ./docs/9.x/providers.md:17
#: ./docs/10.x/providers.md:17
msgctxt "P"
msgid "If you open the `config/app.php` file included with Laravel, you will see a `providers` array. These are all of the service provider classes that will be loaded for your application. By default, a set of Laravel core service providers are listed in this array. These providers bootstrap the core Laravel components, such as the mailer, queue, cache, and others. Many of these providers are \"deferred\" providers, meaning they will not be loaded on every request, but only when the services they provide are actually needed."
msgstr "若打開 Laravel 中的 `config/app.php`，可以看到一個 `providers` 陣列。這個陣列中的就是你的程式會載入的所有 Service Provider。預設情況下，這個陣列中列出了一組 Laravel 的核心 Service Provider。這些 Provider 會啟動 Laravel 的核心元件，如：Mailer、佇列 (Queue)⋯⋯等。其中的許多 Provider 是屬於「延遲的」Provider，延遲的 Provider 是指：不是所有 Request 中都會載入這些 Provider，只有在我們有需要這些 Provider 提供的服務時才會載入。"

#: ./docs/11.x/providers.md:19
#: ./docs/master/providers.md:19
msgctxt "P"
msgid "All user-defined service providers are registered in the `bootstrap/providers.php` file. In the following documentation, you will learn how to write your own service providers and register them with your Laravel application."
msgstr ""

#: ./docs/8.x/providers.md:19
#: ./docs/9.x/providers.md:19
#: ./docs/10.x/providers.md:19
msgctxt "P"
msgid "In this overview, you will learn how to write your own service providers and register them with your Laravel application."
msgstr "在本篇概覽中，讀者將可以學習到如何撰寫你自己的 Service Provider，並將這些 Provider 註冊到 Laravel 專案上。"

#: ./docs/8.x/providers.md:21
#: ./docs/9.x/providers.md:22
#: ./docs/10.x/providers.md:22
#: ./docs/11.x/providers.md:22
#: ./docs/master/providers.md:22
msgctxt "P"
msgid "If you would like to learn more about how Laravel handles requests and works internally, check out our documentation on the Laravel [request lifecycle](/docs/{{version}}/lifecycle)."
msgstr "若想瞭解 Laravel 如何處理 Request 以及其內部如何運作，請參考我們有關 Laravel [Request 的生命週期](/docs/{{version}}/lifecycle)說明文件。"

#: ./docs/8.x/providers.md:23
#: ./docs/9.x/providers.md:24
#: ./docs/10.x/providers.md:24
#: ./docs/11.x/providers.md:24
#: ./docs/master/providers.md:24
#~ msgctxt "P"
#~ msgid "<a name=\"writing-service-providers\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:24
#: ./docs/9.x/providers.md:25
#: ./docs/10.x/providers.md:25
#: ./docs/11.x/providers.md:25
#: ./docs/master/providers.md:25
msgctxt "H2"
msgid "Writing Service Providers"
msgstr "撰寫 Service Provider"

#: ./docs/8.x/providers.md:26
#: ./docs/9.x/providers.md:27
#: ./docs/10.x/providers.md:27
#: ./docs/11.x/providers.md:27
#: ./docs/master/providers.md:27
msgctxt "P"
msgid "All service providers extend the `Illuminate\\Support\\ServiceProvider` class. Most service providers contain a `register` and a `boot` method. Within the `register` method, you should **only bind things into the [service container](/docs/{{version}}/container)**. You should never attempt to register any event listeners, routes, or any other piece of functionality within the `register` method."
msgstr "所有的 Service Provider 都繼承自 `Illuminate\\Support\\ServiceProvider`。大多數的 Service Provider 都包含了 `registe` 與 `boot` 方法。`register` 方法 **只負責將事物繫結到 [Service Container](/docs/{{version}}/container)** 上。請絕對不要在 `register` 方法中註冊任何事件監聽常式、Route、或是任何其他的功能。"

#: ./docs/8.x/providers.md:28
#: ./docs/9.x/providers.md:29
#: ./docs/10.x/providers.md:29
#: ./docs/master/providers.md:29
msgctxt "P"
msgid "The Artisan CLI can generate a new provider via the `make:provider` command:"
msgstr "Artisan CLI 提供了一個 `make:provider` 指令來新增新 Provider："

#: ./docs/11.x/providers.md:29
msgctxt "P"
msgid "The Artisan CLI can generate a new provider via the `make:provider` command. Laravel will automatically register your new provider in your application's `bootstrap/providers.php` file:"
msgstr ""

#: ./docs/8.x/providers.md:30
#: ./docs/9.x/providers.md:31
#: ./docs/10.x/providers.md:31
#: ./docs/11.x/providers.md:31
#: ./docs/master/providers.md:31
msgctxt "CODE"
msgid "php artisan make:provider RiakServiceProvider"
msgstr ""

#: ./docs/8.x/providers.md:32
#: ./docs/9.x/providers.md:35
#: ./docs/10.x/providers.md:35
#: ./docs/11.x/providers.md:35
#: ./docs/master/providers.md:35
#~ msgctxt "P"
#~ msgid "<a name=\"the-register-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:33
#: ./docs/9.x/providers.md:36
#: ./docs/10.x/providers.md:36
#: ./docs/11.x/providers.md:36
#: ./docs/master/providers.md:36
msgctxt "H3"
msgid "The Register Method"
msgstr "Register 方法"

#: ./docs/8.x/providers.md:35
#: ./docs/9.x/providers.md:38
#: ./docs/10.x/providers.md:38
#: ./docs/11.x/providers.md:38
#: ./docs/master/providers.md:38
msgctxt "P"
msgid "As mentioned previously, within the `register` method, you should only bind things into the [service container](/docs/{{version}}/container). You should never attempt to register any event listeners, routes, or any other piece of functionality within the `register` method. Otherwise, you may accidentally use a service that is provided by a service provider which has not loaded yet."
msgstr "剛才也提到過，在 `register` 方法中應只能將東西註冊到 [Service Provider](/docs/{{version}}/container) 內。絕對不要嘗試在 `register` 方法內註冊事件監聽常式、Route、或其他任何功能。否則，我們可能會不小心使用到還沒載入的 Service Provider 提供的服務。"

#: ./docs/8.x/providers.md:37
#: ./docs/9.x/providers.md:40
#: ./docs/10.x/providers.md:40
#: ./docs/11.x/providers.md:40
#: ./docs/master/providers.md:40
msgctxt "P"
msgid "Let's take a look at a basic service provider. Within any of your service provider methods, you always have access to the `$app` property which provides access to the service container:"
msgstr "來看看一個基礎的 Service Provider。在 Service Provider 中的任何方法都可以存取一個 `$app` 屬性，該屬性可用來存取 Service Container："

#: ./docs/8.x/providers.md:39
#: ./docs/9.x/providers.md:42
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Services\\Riak\\Connection;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class RiakServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->app->singleton(Connection::class, function ($app) {\n"
"            return new Connection(config('riak'));\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/providers.md:42
#: ./docs/11.x/providers.md:42
#: ./docs/master/providers.md:42
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Services\\Riak\\Connection;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class RiakServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        $this->app->singleton(Connection::class, function (Application $app) {\n"
"            return new Connection(config('riak'));\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/providers.md:61
#: ./docs/9.x/providers.md:64
#: ./docs/10.x/providers.md:63
#: ./docs/11.x/providers.md:63
#: ./docs/master/providers.md:63
msgctxt "P"
msgid "This service provider only defines a `register` method, and uses that method to define an implementation of `App\\Services\\Riak\\Connection` in the service container. If you're not yet familiar with Laravel's service container, check out [its documentation](/docs/{{version}}/container)."
msgstr "這個 Service Provider 只註冊了一個 `register` 方法，我們使用這個方法來向 Service Container 定義 `App\\Services\\Riak\\Connection` 的實作。若你不熟悉 Laravel 的 Service Container，請參考 [Service Container 的說明文件](/docs/{{version}}/container)。"

#: ./docs/8.x/providers.md:63
#: ./docs/9.x/providers.md:66
#: ./docs/10.x/providers.md:65
#: ./docs/11.x/providers.md:65
#: ./docs/master/providers.md:65
#~ msgctxt "P"
#~ msgid "<a name=\"the-bindings-and-singletons-properties\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:64
#: ./docs/9.x/providers.md:67
msgctxt "H4"
msgid "The `bindings` And `singletons` Properties"
msgstr "`bindings` 與 `singletons` 屬性"

#: ./docs/10.x/providers.md:66
#: ./docs/11.x/providers.md:66
#: ./docs/master/providers.md:66
msgctxt "H4"
msgid "The `bindings` and `singletons` Properties"
msgstr ""

#: ./docs/8.x/providers.md:66
#: ./docs/9.x/providers.md:69
#: ./docs/10.x/providers.md:68
#: ./docs/11.x/providers.md:68
#: ./docs/master/providers.md:68
msgctxt "P"
msgid "If your service provider registers many simple bindings, you may wish to use the `bindings` and `singletons` properties instead of manually registering each container binding. When the service provider is loaded by the framework, it will automatically check for these properties and register their bindings:"
msgstr "若你的 Service Provider 會註冊很多的繫結，則可以使用 `bindings` 或 `singletons` 屬性，而不用手動註冊個別的 Container 繫結。Laravel 載入這個 Service Provider 後，會自動檢查這些屬性並註冊這些繫結："

#: ./docs/8.x/providers.md:68
#: ./docs/9.x/providers.md:71
#: ./docs/10.x/providers.md:70
#: ./docs/11.x/providers.md:70
#: ./docs/master/providers.md:70
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Contracts\\DowntimeNotifier;\n"
"use App\\Contracts\\ServerProvider;\n"
"use App\\Services\\DigitalOceanServerProvider;\n"
"use App\\Services\\PingdomDowntimeNotifier;\n"
"use App\\Services\\ServerToolsProvider;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * All of the container bindings that should be registered.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    public $bindings = [\n"
"        ServerProvider::class => DigitalOceanServerProvider::class,\n"
"    ];\n"
"\n"
"    /**\n"
"     * All of the container singletons that should be registered.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    public $singletons = [\n"
"        DowntimeNotifier::class => PingdomDowntimeNotifier::class,\n"
"        ServerProvider::class => ServerToolsProvider::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/providers.md:101
#: ./docs/9.x/providers.md:104
#: ./docs/10.x/providers.md:103
#: ./docs/11.x/providers.md:103
#: ./docs/master/providers.md:103
#~ msgctxt "P"
#~ msgid "<a name=\"the-boot-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:102
#: ./docs/9.x/providers.md:105
#: ./docs/10.x/providers.md:104
#: ./docs/11.x/providers.md:104
#: ./docs/master/providers.md:104
msgctxt "H3"
msgid "The Boot Method"
msgstr "Boot 方法"

#: ./docs/8.x/providers.md:104
#: ./docs/9.x/providers.md:107
#: ./docs/10.x/providers.md:106
#: ./docs/11.x/providers.md:106
#: ./docs/master/providers.md:106
msgctxt "P"
msgid "So, what if we need to register a [view composer](/docs/{{version}}/views#view-composers) within our service provider? This should be done within the `boot` method. **This method is called after all other service providers have been registered**, meaning you have access to all other services that have been registered by the framework:"
msgstr "那麼，若我們想在 Service Provider 內註冊 [View Composer] 該怎麼辦呢？我們可以在 `boot` 方法中註冊。**這個方法會在所有 Service Provider 都註冊好後才被呼叫**，這表示，我們就可以存取所有 Laravel 中已註冊好的服務："

#: ./docs/8.x/providers.md:106
#: ./docs/9.x/providers.md:109
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\View;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class ComposerServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        View::composer('view', function () {\n"
"            //\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/providers.md:108
#: ./docs/11.x/providers.md:108
#: ./docs/master/providers.md:108
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\View;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class ComposerServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        View::composer('view', function () {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/providers.md:128
#: ./docs/9.x/providers.md:131
#: ./docs/10.x/providers.md:128
#: ./docs/11.x/providers.md:128
#: ./docs/master/providers.md:128
#~ msgctxt "P"
#~ msgid "<a name=\"boot-method-dependency-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:129
#: ./docs/9.x/providers.md:132
#: ./docs/10.x/providers.md:129
#: ./docs/11.x/providers.md:129
#: ./docs/master/providers.md:129
msgctxt "H4"
msgid "Boot Method Dependency Injection"
msgstr "Boot 方法的相依性插入"

#: ./docs/8.x/providers.md:131
#: ./docs/9.x/providers.md:134
#: ./docs/10.x/providers.md:131
#: ./docs/11.x/providers.md:131
#: ./docs/master/providers.md:131
msgctxt "P"
msgid "You may type-hint dependencies for your service provider's `boot` method. The [service container](/docs/{{version}}/container) will automatically inject any dependencies you need:"
msgstr "在 Service Provider 中，若 `boot` 方法有相依性 (Dependency)，我們可以在該方法上做型別提示 (Type-Hint)。[Service Container](/docs/{{version}}/container) 會自動為你插入所有所需的相依性："

#: ./docs/10.x/providers.md:133
#: ./docs/11.x/providers.md:133
#: ./docs/master/providers.md:133
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Routing\\ResponseFactory;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(ResponseFactory $response): void\n"
"{\n"
"    $response->macro('serialized', function (mixed $value) {\n"
"        // ...\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/providers.md:133
#: ./docs/9.x/providers.md:136
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Routing\\ResponseFactory;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @param  \\Illuminate\\Contracts\\Routing\\ResponseFactory  $response\n"
" * @return void\n"
" */\n"
"public function boot(ResponseFactory $response)\n"
"{\n"
"    $response->macro('serialized', function ($value) {\n"
"        //\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/providers.md:148
msgctxt "P"
msgid "All service providers are registered in the `config/app.php` configuration file. This file contains a `providers` array where you can list the class names of your service providers. By default, a set of Laravel core service providers are registered in this array. The default providers bootstrap the core Laravel components, such as the mailer, queue, cache, and others."
msgstr "`config/app.php` 中註冊了所有的 Provider。這個檔案中包含了一個 `providers` 陣列，我們可以在其中列出所有 Service Provider 的類別名稱。預設情況下，這個陣列中已經註冊了一組 Laravel 的核心 Service Provider。預設的這些 Provider 負責啟動 Laravel 的核心元件，如：Mailer、佇列、快取⋯⋯等。"

#: ./docs/11.x/providers.md:148
#: ./docs/master/providers.md:148
msgctxt "P"
msgid "All service providers are registered in the `bootstrap/providers.php` configuration file. This file returns an array that contains the class names of your application's service providers:"
msgstr ""

#: ./docs/8.x/providers.md:148
#: ./docs/9.x/providers.md:151
#: ./docs/10.x/providers.md:145
#: ./docs/11.x/providers.md:145
#: ./docs/master/providers.md:145
#~ msgctxt "P"
#~ msgid "<a name=\"registering-providers\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:149
#: ./docs/9.x/providers.md:152
#: ./docs/10.x/providers.md:146
#: ./docs/11.x/providers.md:146
#: ./docs/master/providers.md:146
msgctxt "H2"
msgid "Registering Providers"
msgstr "註冊 Provider"

#: ./docs/11.x/providers.md:150
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"return [\n"
"    App\\Providers\\AppServiceProvider::class,\n"
"];"
msgstr ""

#: ./docs/master/providers.md:150
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"// This file is automatically generated by Laravel...\n"
"\n"
"return [\n"
"    App\\Providers\\AppServiceProvider::class,\n"
"];"
msgstr ""

#: ./docs/8.x/providers.md:151
#: ./docs/9.x/providers.md:154
msgctxt "P"
msgid "All service providers are registered in the `config/app.php` configuration file. This file contains a `providers` array where you can list the class names of your service providers. By default, a set of Laravel core service providers are listed in this array. These providers bootstrap the core Laravel components, such as the mailer, queue, cache, and others."
msgstr "`config/app.php` 中註冊了所有的 Provider。這個檔案中包含了一個 `providers` 陣列，我們可以在其中列出所有 Service Provider 的類別名稱。預設情況下，這個陣列中已經有一組 Laravel 的核心 Service Provider。這些 Provider 負責啟動 Laravel 的核心元件，如：Mailer、佇列、快取⋯⋯等。"

#: ./docs/10.x/providers.md:152
msgctxt "CODE"
msgid ""
"'providers' => ServiceProvider::defaultProviders()->merge([\n"
"    // Other Service Providers\n"
"\n"
"    App\\Providers\\ComposerServiceProvider::class,\n"
"])->toArray(),"
msgstr ""

#: ./docs/8.x/providers.md:153
#: ./docs/9.x/providers.md:156
#: ./docs/10.x/providers.md:150
msgctxt "P"
msgid "To register your provider, add it to the array:"
msgstr "若要註冊 Provider，請將其加到該陣列中："

#: ./docs/8.x/providers.md:155
#: ./docs/9.x/providers.md:158
msgctxt "CODE"
msgid ""
"'providers' => [\n"
"    // Other Service Providers\n"
"\n"
"    App\\Providers\\ComposerServiceProvider::class,\n"
"],"
msgstr ""

#: ./docs/11.x/providers.md:156
#: ./docs/master/providers.md:158
msgctxt "P"
msgid "When you invoke the `make:provider` Artisan command, Laravel will automatically add the generated provider to the `bootstrap/providers.php` file. However, if you have manually created the provider class, you should manually add the provider class to the array:"
msgstr ""

#: ./docs/11.x/providers.md:158
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"return [\n"
"    App\\Providers\\AppServiceProvider::class,\n"
"    App\\Providers\\ComposerServiceProvider::class, // [tl! add]\n"
"];"
msgstr ""

#: ./docs/master/providers.md:160
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"// This file is automatically generated by Laravel...\n"
"\n"
"return [\n"
"    App\\Providers\\AppServiceProvider::class,\n"
"    App\\Providers\\ComposerServiceProvider::class, // [tl! add]\n"
"];"
msgstr ""

#: ./docs/8.x/providers.md:161
#: ./docs/9.x/providers.md:164
#: ./docs/10.x/providers.md:158
#: ./docs/11.x/providers.md:165
#: ./docs/master/providers.md:169
#~ msgctxt "P"
#~ msgid "<a name=\"deferred-providers\"></a>"
#~ msgstr ""

#: ./docs/8.x/providers.md:162
#: ./docs/9.x/providers.md:165
#: ./docs/10.x/providers.md:159
#: ./docs/11.x/providers.md:166
#: ./docs/master/providers.md:170
msgctxt "H2"
msgid "Deferred Providers"
msgstr "延遲的 Provider"

#: ./docs/8.x/providers.md:164
#: ./docs/9.x/providers.md:167
#: ./docs/10.x/providers.md:161
#: ./docs/11.x/providers.md:168
#: ./docs/master/providers.md:172
msgctxt "P"
msgid "If your provider is **only** registering bindings in the [service container](/docs/{{version}}/container), you may choose to defer its registration until one of the registered bindings is actually needed. Deferring the loading of such a provider will improve the performance of your application, since it is not loaded from the filesystem on every request."
msgstr "若 Provider **只有** 向 [Service Container](/docs/{{version}}/container) 註冊繫結，則可以選擇將其註冊過程延遲到真正有需要這些繫結時才註冊。由於我們就不需要每個 Request 都從檔案系統中載入這些 Provider，因此延遲載入這類 Provider 可以提升你程式的效能。"

#: ./docs/8.x/providers.md:166
#: ./docs/9.x/providers.md:169
#: ./docs/10.x/providers.md:163
#: ./docs/11.x/providers.md:170
#: ./docs/master/providers.md:174
msgctxt "P"
msgid "Laravel compiles and stores a list of all of the services supplied by deferred service providers, along with the name of its service provider class. Then, only when you attempt to resolve one of these services does Laravel load the service provider."
msgstr "Laravel 會編譯並保存延遲的 Service Provider 名稱、以及其所提供的 Service 列表。接著，當有需要解析其中一個 Service 時，Laravel 就會載入這個 Service Provider："

#: ./docs/10.x/providers.md:167
#: ./docs/11.x/providers.md:174
#: ./docs/master/providers.md:178
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Services\\Riak\\Connection;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Contracts\\Support\\DeferrableProvider;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class RiakServiceProvider extends ServiceProvider implements DeferrableProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        $this->app->singleton(Connection::class, function (Application $app) {\n"
"            return new Connection($app['config']['riak']);\n"
"        });\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the services provided by the provider.\n"
"     *\n"
"     * @return array<int, string>\n"
"     */\n"
"    public function provides(): array\n"
"    {\n"
"        return [Connection::class];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/providers.md:168
#: ./docs/9.x/providers.md:171
#: ./docs/10.x/providers.md:165
#: ./docs/11.x/providers.md:172
#: ./docs/master/providers.md:176
msgctxt "P"
msgid "To defer the loading of a provider, implement the `\\Illuminate\\Contracts\\Support\\DeferrableProvider` interface and define a `provides` method. The `provides` method should return the service container bindings registered by the provider:"
msgstr "若要延遲載入 Provider，請實作 `\\Illuminate\\Contracts\\Support\\DeferrableProvider` 介面，並定義 `provides` 方法。`provides` 方法應回傳該 Provider 中註冊的 Service Container 繫結："

#: ./docs/8.x/providers.md:170
#: ./docs/9.x/providers.md:173
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Services\\Riak\\Connection;\n"
"use Illuminate\\Contracts\\Support\\DeferrableProvider;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class RiakServiceProvider extends ServiceProvider implements DeferrableProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->app->singleton(Connection::class, function ($app) {\n"
"            return new Connection($app['config']['riak']);\n"
"        });\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the services provided by the provider.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function provides()\n"
"    {\n"
"        return [Connection::class];\n"
"    }\n"
"}"
msgstr ""
