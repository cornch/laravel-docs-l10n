#
msgid ""
msgstr ""

#: docs/10.x/eloquent-factories.md:block 1 (header)
msgid "Eloquent: Factories"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Defining Model Factories](#defining-model-factories)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Generating Factories](#generating-factories)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Factory States](#factory-states)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Factory Callbacks](#factory-callbacks)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Creating Models Using Factories](#creating-models-using-factories)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Instantiating Models](#instantiating-models)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Persisting Models](#persisting-models)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Sequences](#sequences)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Factory Relationships](#factory-relationships)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Has Many Relationships](#has-many-relationships)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Belongs To Relationships](#belongs-to-relationships)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Many To Many Relationships](#many-to-many-relationships)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Polymorphic Relationships](#polymorphic-relationships)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Defining Relationships Within Factories](#defining-relationships-within-factories)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 2 (unordered list)
msgid "[Recycling An Existing Model For Relationships](#recycling-an-existing-model-for-relationships)"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 5 (paragraph)
msgid "When testing your application or seeding your database, you may need to insert a few records into your database. Instead of manually specifying the value of each column, Laravel allows you to define a set of default attributes for each of your [Eloquent models](/docs/{{version}}/eloquent) using model factories."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 6 (paragraph)
msgid "To see an example of how to write a factory, take a look at the `database/factories/UserFactory.php` file in your application. This factory is included with all new Laravel applications and contains the following factory definition:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 7 (code)
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function definition(): array\n"
"    {\n"
"        return [\n"
"            'name' => fake()->name(),\n"
"            'email' => fake()->unique()->safeEmail(),\n"
"            'email_verified_at' => now(),\n"
"            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"            'remember_token' => Str::random(10),\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 8 (paragraph)
msgid "As you can see, in their most basic form, factories are classes that extend Laravel's base factory class and define a `definition` method. The `definition` method returns the default set of attribute values that should be applied when creating a model using the factory."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 9 (paragraph)
msgid "Via the `fake` helper, factories have access to the [Faker](https://github.com/FakerPHP/Faker) PHP library, which allows you to conveniently generate various kinds of random data for testing and seeding."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 10 (quote)
msgid "**Note** You can set your application's Faker locale by adding a `faker_locale` option to your `config/app.php` configuration file."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 12 (header)
msgid "Defining Model Factories"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 14 (header)
msgid "Generating Factories"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 15 (paragraph)
msgid "To create a factory, execute the `make:factory` [Artisan command](/docs/{{version}}/artisan):"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 16 (code)
msgid "php artisan make:factory PostFactory\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 17 (paragraph)
msgid "The new factory class will be placed in your `database/factories` directory."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 19 (header)
msgid "Model & Factory Discovery Conventions"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 20 (paragraph)
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 21 (paragraph)
msgid "The `HasFactory` trait's `factory` method will use conventions to determine the proper factory for the model the trait is assigned to. Specifically, the method will look for a factory in the `Database\\Factories` namespace that has a class name matching the model name and is suffixed with `Factory`. If these conventions do not apply to your particular application or factory, you may overwrite the `newFactory` method on your model to return an instance of the model's corresponding factory directly:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 22 (code)
msgid ""
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Database\\Factories\\Administration\\FlightFactory;\n"
"\n"
"/**\n"
" * Create a new factory instance for the model.\n"
" */\n"
"protected static function newFactory(): Factory\n"
"{\n"
"    return FlightFactory::new();\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 23 (paragraph)
msgid "Then, define a `model` property on the corresponding factory:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 24 (code)
msgid ""
"use App\\Administration\\Flight;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"class FlightFactory extends Factory\n"
"{\n"
"    /**\n"
"     * The name of the factory's corresponding model.\n"
"     *\n"
"     * @var class-string<\\Illuminate\\Database\\Eloquent\\Model>\n"
"     */\n"
"    protected $model = Flight::class;\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 26 (header)
msgid "Factory States"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 27 (paragraph)
msgid "State manipulation methods allow you to define discrete modifications that can be applied to your model factories in any combination. For example, your `Database\\Factories\\UserFactory` factory might contain a `suspended` state method that modifies one of its default attribute values."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 28 (paragraph)
msgid "State transformation methods typically call the `state` method provided by Laravel's base factory class. The `state` method accepts a closure which will receive the array of raw attributes defined for the factory and should return an array of attributes to modify:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 29 (code)
msgid ""
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"/**\n"
" * Indicate that the user is suspended.\n"
" */\n"
"public function suspended(): Factory\n"
"{\n"
"    return $this->state(function (array $attributes) {\n"
"        return [\n"
"            'account_status' => 'suspended',\n"
"        ];\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 31 (header)
msgid "\"Trashed\" State"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 32 (paragraph)
msgid "If your Eloquent model can be [soft deleted](/docs/{{version}}/eloquent#soft-deleting), you may invoke the built-in `trashed` state method to indicate that the created model should already be \"soft deleted\". You do not need to manually define the `trashed` state as it is automatically available to all factories:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 33 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()->trashed()->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 35 (header)
msgid "Factory Callbacks"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 36 (paragraph)
msgid "Factory callbacks are registered using the `afterMaking` and `afterCreating` methods and allow you to perform additional tasks after making or creating a model. You should register these callbacks by defining a `configure` method on your factory class. This method will be automatically called by Laravel when the factory is instantiated:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 37 (code)
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Configure the model factory.\n"
"     */\n"
"    public function configure(): static\n"
"    {\n"
"        return $this->afterMaking(function (User $user) {\n"
"            // ...\n"
"        })->afterCreating(function (User $user) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 38 (paragraph)
msgid "You may also register factory callbacks within state methods to perform additional tasks that are specific to a given state:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 39 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"/**\n"
" * Indicate that the user is suspended.\n"
" */\n"
"public function suspended(): Factory\n"
"{\n"
"    return $this->state(function (array $attributes) {\n"
"        return [\n"
"            'account_status' => 'suspended',\n"
"        ];\n"
"    })->afterMaking(function (User $user) {\n"
"        // ...\n"
"    })->afterCreating(function (User $user) {\n"
"        // ...\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 41 (header)
msgid "Creating Models Using Factories"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 43 (header)
msgid "Instantiating Models"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 44 (paragraph)
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model. Let's take a look at a few examples of creating models. First, we'll use the `make` method to create models without persisting them to the database:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 45 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()->make();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 46 (paragraph)
msgid "You may create a collection of many models using the `count` method:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 47 (code)
msgid "$users = User::factory()->count(3)->make();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 49 (header)
msgid "Applying States"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 50 (paragraph)
msgid "You may also apply any of your [states](#factory-states) to the models. If you would like to apply multiple state transformations to the models, you may simply call the state transformation methods directly:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 51 (code)
msgid "$users = User::factory()->count(5)->suspended()->make();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 53 (header)
msgid "Overriding Attributes"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 54 (paragraph)
msgid "If you would like to override some of the default values of your models, you may pass an array of values to the `make` method. Only the specified attributes will be replaced while the rest of the attributes remain set to their default values as specified by the factory:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 55 (code)
msgid ""
"$user = User::factory()->make([\n"
"    'name' => 'Abigail Otwell',\n"
"]);\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 56 (paragraph)
msgid "Alternatively, the `state` method may be called directly on the factory instance to perform an inline state transformation:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 57 (code)
msgid ""
"$user = User::factory()->state([\n"
"    'name' => 'Abigail Otwell',\n"
"])->make();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 58 (quote)
msgid "**Note** [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled when creating models using factories."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 60 (header)
msgid "Persisting Models"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 61 (paragraph)
msgid "The `create` method instantiates model instances and persists them to the database using Eloquent's `save` method:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 62 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"// Create a single App\\Models\\User instance...\n"
"$user = User::factory()->create();\n"
"\n"
"// Create three App\\Models\\User instances...\n"
"$users = User::factory()->count(3)->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 63 (paragraph)
msgid "You may override the factory's default model attributes by passing an array of attributes to the `create` method:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 64 (code)
msgid ""
"$user = User::factory()->create([\n"
"    'name' => 'Abigail',\n"
"]);\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 66 (header)
msgid "Sequences"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 67 (paragraph)
msgid "Sometimes you may wish to alternate the value of a given model attribute for each created model. You may accomplish this by defining a state transformation as a sequence. For example, you may wish to alternate the value of an `admin` column between `Y` and `N` for each created user:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 68 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n"
"\n"
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->state(new Sequence(\n"
"                    ['admin' => 'Y'],\n"
"                    ['admin' => 'N'],\n"
"                ))\n"
"                ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 69 (paragraph)
msgid "In this example, five users will be created with an `admin` value of `Y` and five users will be created with an `admin` value of `N`."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 70 (paragraph)
msgid "If necessary, you may include a closure as a sequence value. The closure will be invoked each time the sequence needs a new value:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 71 (code)
msgid ""
"use Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n"
"\n"
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->state(new Sequence(\n"
"                    fn (Sequence $sequence) => ['role' => UserRoles::all()->random()],\n"
"                ))\n"
"                ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 72 (paragraph)
msgid "Within a sequence closure, you may access the `$index` or `$count` properties on the sequence instance that is injected into the closure. The `$index` property contains the number of iterations through the sequence that have occurred thus far, while the `$count` property contains the total number of times the sequence will be invoked:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 73 (code)
msgid ""
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->sequence(fn (Sequence $sequence) => ['name' => 'Name '.$sequence->index])\n"
"                ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 74 (paragraph)
msgid "For convenience, sequences may also be applied using the `sequence` method, which simply invokes the `state` method internally. The `sequence` method accepts a closure or arrays of sequenced attributes:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 75 (code)
msgid ""
"$users = User::factory()\n"
"                ->count(2)\n"
"                ->sequence(\n"
"                    ['name' => 'First User'],\n"
"                    ['name' => 'Second User'],\n"
"                )\n"
"                ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 77 (header)
msgid "Factory Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 79 (header)
msgid "Has Many Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 80 (paragraph)
msgid "Next, let's explore building Eloquent model relationships using Laravel's fluent factory methods. First, let's assume our application has an `App\\Models\\User` model and an `App\\Models\\Post` model. Also, let's assume that the `User` model defines a `hasMany` relationship with `Post`. We can create a user that has three posts using the `has` method provided by the Laravel's factories. The `has` method accepts a factory instance:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 81 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()\n"
"            ->has(Post::factory()->count(3))\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 82 (paragraph)
msgid "By convention, when passing a `Post` model to the `has` method, Laravel will assume that the `User` model must have a `posts` method that defines the relationship. If necessary, you may explicitly specify the name of the relationship that you would like to manipulate:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 83 (code)
msgid ""
"$user = User::factory()\n"
"            ->has(Post::factory()->count(3), 'posts')\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 84 (paragraph)
msgid "Of course, you may perform state manipulations on the related models. In addition, you may pass a closure based state transformation if your state change requires access to the parent model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 85 (code)
msgid ""
"$user = User::factory()\n"
"            ->has(\n"
"                Post::factory()\n"
"                        ->count(3)\n"
"                        ->state(function (array $attributes, User $user) {\n"
"                            return ['user_type' => $user->type];\n"
"                        })\n"
"            )\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 87 (header)
msgid "Using Magic Methods"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 88 (paragraph)
msgid "For convenience, you may use Laravel's magic factory relationship methods to build relationships. For example, the following example will use convention to determine that the related models should be created via a `posts` relationship method on the `User` model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 89 (code)
msgid ""
"$user = User::factory()\n"
"            ->hasPosts(3)\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 90 (paragraph)
msgid "When using magic methods to create factory relationships, you may pass an array of attributes to override on the related models:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 91 (code)
msgid ""
"$user = User::factory()\n"
"            ->hasPosts(3, [\n"
"                'published' => false,\n"
"            ])\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 92 (paragraph)
msgid "You may provide a closure based state transformation if your state change requires access to the parent model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 93 (code)
msgid ""
"$user = User::factory()\n"
"            ->hasPosts(3, function (array $attributes, User $user) {\n"
"                return ['user_type' => $user->type];\n"
"            })\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 95 (header)
msgid "Belongs To Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 96 (paragraph)
msgid "Now that we have explored how to build \"has many\" relationships using factories, let's explore the inverse of the relationship. The `for` method may be used to define the parent model that factory created models belong to. For example, we can create three `App\\Models\\Post` model instances that belong to a single user:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 97 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"$posts = Post::factory()\n"
"            ->count(3)\n"
"            ->for(User::factory()->state([\n"
"                'name' => 'Jessica Archer',\n"
"            ]))\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 98 (paragraph)
msgid "If you already have a parent model instance that should be associated with the models you are creating, you may pass the model instance to the `for` method:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 99 (code)
msgid ""
"$user = User::factory()->create();\n"
"\n"
"$posts = Post::factory()\n"
"            ->count(3)\n"
"            ->for($user)\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 102 (paragraph)
msgid "For convenience, you may use Laravel's magic factory relationship methods to define \"belongs to\" relationships. For example, the following example will use convention to determine that the three posts should belong to the `user` relationship on the `Post` model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 103 (code)
msgid ""
"$posts = Post::factory()\n"
"            ->count(3)\n"
"            ->forUser([\n"
"                'name' => 'Jessica Archer',\n"
"            ])\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 105 (header)
msgid "Many To Many Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 106 (paragraph)
msgid "Like [has many relationships](#has-many-relationships), \"many to many\" relationships may be created using the `has` method:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 107 (code)
msgid ""
"use App\\Models\\Role;\n"
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()\n"
"            ->has(Role::factory()->count(3))\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 109 (header)
msgid "Pivot Table Attributes"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 110 (paragraph)
msgid "If you need to define attributes that should be set on the pivot / intermediate table linking the models, you may use the `hasAttached` method. This method accepts an array of pivot table attribute names and values as its second argument:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 111 (code)
msgid ""
"use App\\Models\\Role;\n"
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()\n"
"            ->hasAttached(\n"
"                Role::factory()->count(3),\n"
"                ['active' => true]\n"
"            )\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 112 (paragraph)
msgid "You may provide a closure based state transformation if your state change requires access to the related model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 113 (code)
msgid ""
"$user = User::factory()\n"
"            ->hasAttached(\n"
"                Role::factory()\n"
"                    ->count(3)\n"
"                    ->state(function (array $attributes, User $user) {\n"
"                        return ['name' => $user->name.' Role'];\n"
"                    }),\n"
"                ['active' => true]\n"
"            )\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 114 (paragraph)
msgid "If you already have model instances that you would like to be attached to the models you are creating, you may pass the model instances to the `hasAttached` method. In this example, the same three roles will be attached to all three users:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 115 (code)
msgid ""
"$roles = Role::factory()->count(3)->create();\n"
"\n"
"$user = User::factory()\n"
"            ->count(3)\n"
"            ->hasAttached($roles, ['active' => true])\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 118 (paragraph)
msgid "For convenience, you may use Laravel's magic factory relationship methods to define many to many relationships. For example, the following example will use convention to determine that the related models should be created via a `roles` relationship method on the `User` model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 119 (code)
msgid ""
"$user = User::factory()\n"
"            ->hasRoles(1, [\n"
"                'name' => 'Editor'\n"
"            ])\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 121 (header)
msgid "Polymorphic Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 122 (paragraph)
msgid "[Polymorphic relationships](/docs/{{version}}/eloquent-relationships#polymorphic-relationships) may also be created using factories. Polymorphic \"morph many\" relationships are created in the same way as typical \"has many\" relationships. For example, if an `App\\Models\\Post` model has a `morphMany` relationship with an `App\\Models\\Comment` model:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 123 (code)
msgid ""
"use App\\Models\\Post;\n"
"\n"
"$post = Post::factory()->hasComments(3)->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 125 (header)
msgid "Morph To Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 126 (paragraph)
msgid "Magic methods may not be used to create `morphTo` relationships. Instead, the `for` method must be used directly and the name of the relationship must be explicitly provided. For example, imagine that the `Comment` model has a `commentable` method that defines a `morphTo` relationship. In this situation, we may create three comments that belong to a single post by using the `for` method directly:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 127 (code)
msgid ""
"$comments = Comment::factory()->count(3)->for(\n"
"    Post::factory(), 'commentable'\n"
")->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 129 (header)
msgid "Polymorphic Many To Many Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 130 (paragraph)
msgid "Polymorphic \"many to many\" (`morphToMany` / `morphedByMany`) relationships may be created just like non-polymorphic \"many to many\" relationships:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 131 (code)
msgid ""
"use App\\Models\\Tag;\n"
"use App\\Models\\Video;\n"
"\n"
"$videos = Video::factory()\n"
"            ->hasAttached(\n"
"                Tag::factory()->count(3),\n"
"                ['public' => true]\n"
"            )\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 132 (paragraph)
msgid "Of course, the magic `has` method may also be used to create polymorphic \"many to many\" relationships:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 133 (code)
msgid ""
"$videos = Video::factory()\n"
"            ->hasTags(3, ['public' => true])\n"
"            ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 135 (header)
msgid "Defining Relationships Within Factories"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 136 (paragraph)
msgid "To define a relationship within your model factory, you will typically assign a new factory instance to the foreign key of the relationship. This is normally done for the \"inverse\" relationships such as `belongsTo` and `morphTo` relationships. For example, if you would like to create a new user when creating a post, you may do the following:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 137 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Define the model's default state.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function definition(): array\n"
"{\n"
"    return [\n"
"        'user_id' => User::factory(),\n"
"        'title' => fake()->title(),\n"
"        'content' => fake()->paragraph(),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 138 (paragraph)
msgid "If the relationship's columns depend on the factory that defines it you may assign a closure to an attribute. The closure will receive the factory's evaluated attribute array:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 139 (code)
msgid ""
"/**\n"
" * Define the model's default state.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function definition(): array\n"
"{\n"
"    return [\n"
"        'user_id' => User::factory(),\n"
"        'user_type' => function (array $attributes) {\n"
"            return User::find($attributes['user_id'])->type;\n"
"        },\n"
"        'title' => fake()->title(),\n"
"        'content' => fake()->paragraph(),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 141 (header)
msgid "Recycling An Existing Model For Relationships"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 142 (paragraph)
msgid "If you have models that share a common relationship with another model, you may use the `recycle` method to ensure a single instance of the related model is recycled for all of the relationships created by the factory."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 143 (paragraph)
msgid "For example, imagine you have `Airline`, `Flight`, and `Ticket` models, where the ticket belongs to an airline and a flight, and the flight also belongs to an airline. When creating tickets, you will probably want the same airline for both the ticket and the flight, so you may pass an airline instance to the `recycle` method:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 144 (code)
msgid ""
"Ticket::factory()\n"
"    ->recycle(Airline::factory()->create())\n"
"    ->create();\n"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 145 (paragraph)
msgid "You may find the `recycle` method particularly useful if you have models belonging to a common user or team."
msgstr ""

#: docs/10.x/eloquent-factories.md:block 146 (paragraph)
msgid "The `recycle` method also accepts a collection of existing models. When a collection is provided to the `recycle` method, a random model from the collection will be chosen when the factory needs a model of that type:"
msgstr ""

#: docs/10.x/eloquent-factories.md:block 147 (code)
msgid ""
"Ticket::factory()\n"
"    ->recycle($airlines)\n"
"    ->create();\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 7 (code)
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'name' => fake()->name(),\n"
"            'email' => fake()->unique()->safeEmail(),\n"
"            'email_verified_at' => now(),\n"
"            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"            'remember_token' => Str::random(10),\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 22 (code)
msgid ""
"use Database\\Factories\\Administration\\FlightFactory;\n"
"\n"
"/**\n"
" * Create a new factory instance for the model.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"protected static function newFactory()\n"
"{\n"
"    return FlightFactory::new();\n"
"}\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 23 (paragraph)
msgid "Next, define a `model` property on the corresponding factory:"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 24 (code)
msgid ""
"use App\\Administration\\Flight;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"class FlightFactory extends Factory\n"
"{\n"
"    /**\n"
"     * The name of the factory's corresponding model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $model = Flight::class;\n"
"}\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 29 (code)
msgid ""
"/**\n"
" * Indicate that the user is suspended.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"public function suspended()\n"
"{\n"
"    return $this->state(function (array $attributes) {\n"
"        return [\n"
"            'account_status' => 'suspended',\n"
"        ];\n"
"    });\n"
"}\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 36 (code)
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Configure the model factory.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function configure()\n"
"    {\n"
"        return $this->afterMaking(function (User $user) {\n"
"            //\n"
"        })->afterCreating(function (User $user) {\n"
"            //\n"
"        });\n"
"    }\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 68 (code)
msgid ""
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->state(new Sequence(\n"
"                    fn ($sequence) => ['role' => UserRoles::all()->random()],\n"
"                ))\n"
"                ->create();\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 70 (code)
msgid ""
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->sequence(fn ($sequence) => ['name' => 'Name '.$sequence->index])\n"
"                ->create();\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 119 (paragraph)
msgid "[Polymorphic relationships](/docs/{{version}}/eloquent-relationships#polymorphic-relationships) may also be created using factories. Polymorphic \"morph many\" relationships are created in the same way as typical \"has many\" relationships. For example, if a `App\\Models\\Post` model has a `morphMany` relationship with a `App\\Models\\Comment` model:"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 134 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Define the model's default state.\n"
" *\n"
" * @return array\n"
" */\n"
"public function definition()\n"
"{\n"
"    return [\n"
"        'user_id' => User::factory(),\n"
"        'title' => fake()->title(),\n"
"        'content' => fake()->paragraph(),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/eloquent-factories.md:block 136 (code)
msgid ""
"/**\n"
" * Define the model's default state.\n"
" *\n"
" * @return array\n"
" */\n"
"public function definition()\n"
"{\n"
"    return [\n"
"        'user_id' => User::factory(),\n"
"        'user_type' => function (array $attributes) {\n"
"            return User::find($attributes['user_id'])->type;\n"
"        },\n"
"        'title' => fake()->title(),\n"
"        'content' => fake()->paragraph(),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/master/eloquent-factories.md:block 36 (code)
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Configure the model factory.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function configure(): static\n"
"    {\n"
"        return $this->afterMaking(function (User $user) {\n"
"            // ...\n"
"        })->afterCreating(function (User $user) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""
