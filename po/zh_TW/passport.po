msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/passport.pot\n"
"X-Crowdin-File-ID: 117\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:58\n"

#: ./docs/11.x/passport.md
#: ./docs/master/passport.md
msgctxt "TD"
msgid "Event Name"
msgstr ""

#: ./docs/11.x/passport.md
#: ./docs/master/passport.md
msgctxt "TD"
msgid "`Laravel\\Passport\\Events\\AccessTokenCreated`"
msgstr ""

#: ./docs/11.x/passport.md
#: ./docs/master/passport.md
msgctxt "TD"
msgid "`Laravel\\Passport\\Events\\RefreshTokenCreated`"
msgstr ""

#: ./docs/8.x/passport.md:1
#: ./docs/9.x/passport.md:1
#: ./docs/10.x/passport.md:1
#: ./docs/11.x/passport.md:1
#: ./docs/master/passport.md:1
msgctxt "H1"
msgid "Laravel Passport"
msgstr ""

#: ./docs/8.x/passport.md:3
#: ./docs/9.x/passport.md:3
#: ./docs/10.x/passport.md:3
#: ./docs/11.x/passport.md:3
#: ./docs/master/passport.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/passport.md:4
#: ./docs/11.x/passport.md:4
#: ./docs/master/passport.md:4
msgctxt "P"
msgid "[Passport or Sanctum?](#passport-or-sanctum)"
msgstr ""

#: ./docs/8.x/passport.md:4
#: ./docs/9.x/passport.md:4
msgctxt "P"
msgid "[Passport Or Sanctum?](#passport-or-sanctum)"
msgstr ""

#: ./docs/8.x/passport.md:5
#: ./docs/9.x/passport.md:5
#: ./docs/10.x/passport.md:5
#: ./docs/11.x/passport.md:5
#: ./docs/master/passport.md:5
msgctxt "P"
msgid "[Installation](#installation)"
msgstr ""

#: ./docs/8.x/passport.md:6
#: ./docs/9.x/passport.md:6
#: ./docs/10.x/passport.md:6
#: ./docs/11.x/passport.md:6
#: ./docs/master/passport.md:6
msgctxt "P"
msgid "[Deploying Passport](#deploying-passport)"
msgstr ""

#: ./docs/8.x/passport.md:7
#: ./docs/9.x/passport.md:7
#: ./docs/10.x/passport.md:7
msgctxt "P"
msgid "[Migration Customization](#migration-customization)"
msgstr ""

#: ./docs/8.x/passport.md:8
#: ./docs/9.x/passport.md:8
#: ./docs/10.x/passport.md:8
#: ./docs/11.x/passport.md:7
#: ./docs/master/passport.md:7
msgctxt "P"
msgid "[Upgrading Passport](#upgrading-passport)"
msgstr ""

#: ./docs/8.x/passport.md:9
#: ./docs/9.x/passport.md:9
#: ./docs/10.x/passport.md:9
#: ./docs/11.x/passport.md:8
#: ./docs/master/passport.md:8
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/8.x/passport.md:10
#: ./docs/9.x/passport.md:10
#: ./docs/10.x/passport.md:10
#: ./docs/11.x/passport.md:9
#: ./docs/master/passport.md:9
msgctxt "P"
msgid "[Client Secret Hashing](#client-secret-hashing)"
msgstr ""

#: ./docs/8.x/passport.md:11
#: ./docs/9.x/passport.md:11
#: ./docs/10.x/passport.md:11
#: ./docs/11.x/passport.md:10
#: ./docs/master/passport.md:10
msgctxt "P"
msgid "[Token Lifetimes](#token-lifetimes)"
msgstr ""

#: ./docs/8.x/passport.md:12
#: ./docs/9.x/passport.md:12
#: ./docs/10.x/passport.md:12
#: ./docs/11.x/passport.md:11
#: ./docs/master/passport.md:11
msgctxt "P"
msgid "[Overriding Default Models](#overriding-default-models)"
msgstr ""

#: ./docs/8.x/passport.md:13
#: ./docs/9.x/passport.md:14
#: ./docs/10.x/passport.md:14
#: ./docs/11.x/passport.md:13
#: ./docs/master/passport.md:13
msgctxt "P"
msgid "[Issuing Access Tokens](#issuing-access-tokens)"
msgstr ""

#: ./docs/9.x/passport.md:13
#: ./docs/10.x/passport.md:13
#: ./docs/11.x/passport.md:12
#: ./docs/master/passport.md:12
msgctxt "P"
msgid "[Overriding Routes](#overriding-routes)"
msgstr ""

#: ./docs/8.x/passport.md:14
#: ./docs/9.x/passport.md:15
#: ./docs/10.x/passport.md:15
#: ./docs/11.x/passport.md:14
#: ./docs/master/passport.md:14
msgctxt "P"
msgid "[Managing Clients](#managing-clients)"
msgstr ""

#: ./docs/8.x/passport.md:15
#: ./docs/9.x/passport.md:16
#: ./docs/10.x/passport.md:16
#: ./docs/11.x/passport.md:15
#: ./docs/master/passport.md:15
msgctxt "P"
msgid "[Requesting Tokens](#requesting-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:16
#: ./docs/9.x/passport.md:17
#: ./docs/10.x/passport.md:17
#: ./docs/11.x/passport.md:16
#: ./docs/master/passport.md:16
msgctxt "P"
msgid "[Refreshing Tokens](#refreshing-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:17
#: ./docs/9.x/passport.md:18
#: ./docs/10.x/passport.md:18
#: ./docs/11.x/passport.md:17
#: ./docs/master/passport.md:17
msgctxt "P"
msgid "[Revoking Tokens](#revoking-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:18
#: ./docs/9.x/passport.md:19
#: ./docs/10.x/passport.md:19
#: ./docs/11.x/passport.md:18
#: ./docs/master/passport.md:18
msgctxt "P"
msgid "[Purging Tokens](#purging-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:19
#: ./docs/9.x/passport.md:20
msgctxt "P"
msgid "[Authorization Code Grant with PKCE](#code-grant-pkce)"
msgstr ""

#: ./docs/10.x/passport.md:20
#: ./docs/11.x/passport.md:19
#: ./docs/master/passport.md:19
msgctxt "P"
msgid "[Authorization Code Grant With PKCE](#code-grant-pkce)"
msgstr ""

#: ./docs/8.x/passport.md:20
#: ./docs/9.x/passport.md:21
msgctxt "P"
msgid "[Creating The Client](#creating-a-auth-pkce-grant-client)"
msgstr ""

#: ./docs/10.x/passport.md:21
#: ./docs/11.x/passport.md:20
#: ./docs/master/passport.md:20
msgctxt "P"
msgid "[Creating the Client](#creating-a-auth-pkce-grant-client)"
msgstr ""

#: ./docs/8.x/passport.md:21
#: ./docs/9.x/passport.md:22
#: ./docs/10.x/passport.md:22
#: ./docs/11.x/passport.md:21
#: ./docs/master/passport.md:21
msgctxt "P"
msgid "[Requesting Tokens](#requesting-auth-pkce-grant-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:22
#: ./docs/9.x/passport.md:23
#: ./docs/10.x/passport.md:23
#: ./docs/11.x/passport.md:22
#: ./docs/master/passport.md:22
msgctxt "P"
msgid "[Password Grant Tokens](#password-grant-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:23
#: ./docs/9.x/passport.md:24
msgctxt "P"
msgid "[Creating A Password Grant Client](#creating-a-password-grant-client)"
msgstr ""

#: ./docs/10.x/passport.md:24
#: ./docs/11.x/passport.md:23
#: ./docs/master/passport.md:23
msgctxt "P"
msgid "[Creating a Password Grant Client](#creating-a-password-grant-client)"
msgstr ""

#: ./docs/8.x/passport.md:24
#: ./docs/9.x/passport.md:25
#: ./docs/10.x/passport.md:25
#: ./docs/11.x/passport.md:24
#: ./docs/master/passport.md:24
msgctxt "P"
msgid "[Requesting Tokens](#requesting-password-grant-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:25
#: ./docs/9.x/passport.md:26
#: ./docs/10.x/passport.md:26
#: ./docs/11.x/passport.md:25
#: ./docs/master/passport.md:25
msgctxt "P"
msgid "[Requesting All Scopes](#requesting-all-scopes)"
msgstr ""

#: ./docs/8.x/passport.md:26
#: ./docs/9.x/passport.md:27
msgctxt "P"
msgid "[Customizing The User Provider](#customizing-the-user-provider)"
msgstr ""

#: ./docs/10.x/passport.md:27
#: ./docs/11.x/passport.md:26
#: ./docs/master/passport.md:26
msgctxt "P"
msgid "[Customizing the User Provider](#customizing-the-user-provider)"
msgstr ""

#: ./docs/8.x/passport.md:27
#: ./docs/9.x/passport.md:28
msgctxt "P"
msgid "[Customizing The Username Field](#customizing-the-username-field)"
msgstr ""

#: ./docs/10.x/passport.md:28
#: ./docs/11.x/passport.md:27
#: ./docs/master/passport.md:27
msgctxt "P"
msgid "[Customizing the Username Field](#customizing-the-username-field)"
msgstr ""

#: ./docs/8.x/passport.md:28
#: ./docs/9.x/passport.md:29
msgctxt "P"
msgid "[Customizing The Password Validation](#customizing-the-password-validation)"
msgstr ""

#: ./docs/10.x/passport.md:29
#: ./docs/11.x/passport.md:28
#: ./docs/master/passport.md:28
msgctxt "P"
msgid "[Customizing the Password Validation](#customizing-the-password-validation)"
msgstr ""

#: ./docs/8.x/passport.md:29
#: ./docs/9.x/passport.md:30
#: ./docs/10.x/passport.md:30
#: ./docs/11.x/passport.md:29
#: ./docs/master/passport.md:29
msgctxt "P"
msgid "[Implicit Grant Tokens](#implicit-grant-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:30
#: ./docs/9.x/passport.md:31
#: ./docs/10.x/passport.md:31
#: ./docs/11.x/passport.md:30
#: ./docs/master/passport.md:30
msgctxt "P"
msgid "[Client Credentials Grant Tokens](#client-credentials-grant-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:31
#: ./docs/9.x/passport.md:32
#: ./docs/10.x/passport.md:32
#: ./docs/11.x/passport.md:31
#: ./docs/master/passport.md:31
msgctxt "P"
msgid "[Personal Access Tokens](#personal-access-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:32
#: ./docs/9.x/passport.md:33
msgctxt "P"
msgid "[Creating A Personal Access Client](#creating-a-personal-access-client)"
msgstr ""

#: ./docs/10.x/passport.md:33
#: ./docs/11.x/passport.md:32
#: ./docs/master/passport.md:32
msgctxt "P"
msgid "[Creating a Personal Access Client](#creating-a-personal-access-client)"
msgstr ""

#: ./docs/8.x/passport.md:33
#: ./docs/9.x/passport.md:34
#: ./docs/10.x/passport.md:34
#: ./docs/11.x/passport.md:33
#: ./docs/master/passport.md:33
msgctxt "P"
msgid "[Managing Personal Access Tokens](#managing-personal-access-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:34
#: ./docs/9.x/passport.md:35
#: ./docs/10.x/passport.md:35
#: ./docs/11.x/passport.md:34
#: ./docs/master/passport.md:34
msgctxt "P"
msgid "[Protecting Routes](#protecting-routes)"
msgstr ""

#: ./docs/8.x/passport.md:35
#: ./docs/9.x/passport.md:36
#: ./docs/10.x/passport.md:36
#: ./docs/11.x/passport.md:35
#: ./docs/master/passport.md:35
msgctxt "P"
msgid "[Via Middleware](#via-middleware)"
msgstr ""

#: ./docs/8.x/passport.md:36
#: ./docs/9.x/passport.md:37
msgctxt "P"
msgid "[Passing The Access Token](#passing-the-access-token)"
msgstr ""

#: ./docs/10.x/passport.md:37
#: ./docs/11.x/passport.md:36
#: ./docs/master/passport.md:36
msgctxt "P"
msgid "[Passing the Access Token](#passing-the-access-token)"
msgstr ""

#: ./docs/8.x/passport.md:37
#: ./docs/9.x/passport.md:38
#: ./docs/10.x/passport.md:38
#: ./docs/11.x/passport.md:37
#: ./docs/master/passport.md:37
msgctxt "P"
msgid "[Token Scopes](#token-scopes)"
msgstr ""

#: ./docs/8.x/passport.md:38
#: ./docs/9.x/passport.md:39
#: ./docs/10.x/passport.md:39
#: ./docs/11.x/passport.md:38
#: ./docs/master/passport.md:38
msgctxt "P"
msgid "[Defining Scopes](#defining-scopes)"
msgstr ""

#: ./docs/8.x/passport.md:39
#: ./docs/9.x/passport.md:40
#: ./docs/10.x/passport.md:40
#: ./docs/11.x/passport.md:39
#: ./docs/master/passport.md:39
msgctxt "P"
msgid "[Default Scope](#default-scope)"
msgstr ""

#: ./docs/8.x/passport.md:40
#: ./docs/9.x/passport.md:41
msgctxt "P"
msgid "[Assigning Scopes To Tokens](#assigning-scopes-to-tokens)"
msgstr ""

#: ./docs/10.x/passport.md:41
#: ./docs/11.x/passport.md:40
#: ./docs/master/passport.md:40
msgctxt "P"
msgid "[Assigning Scopes to Tokens](#assigning-scopes-to-tokens)"
msgstr ""

#: ./docs/8.x/passport.md:41
#: ./docs/9.x/passport.md:42
#: ./docs/10.x/passport.md:42
#: ./docs/11.x/passport.md:41
#: ./docs/master/passport.md:41
msgctxt "P"
msgid "[Checking Scopes](#checking-scopes)"
msgstr ""

#: ./docs/8.x/passport.md:42
#: ./docs/9.x/passport.md:43
#: ./docs/10.x/passport.md:43
#: ./docs/11.x/passport.md:42
#: ./docs/master/passport.md:42
msgctxt "P"
msgid "[Consuming Your API With JavaScript](#consuming-your-api-with-javascript)"
msgstr ""

#: ./docs/8.x/passport.md:43
#: ./docs/9.x/passport.md:44
#: ./docs/10.x/passport.md:44
#: ./docs/11.x/passport.md:43
#: ./docs/master/passport.md:43
msgctxt "P"
msgid "[Events](#events)"
msgstr ""

#: ./docs/8.x/passport.md:44
#: ./docs/9.x/passport.md:45
#: ./docs/10.x/passport.md:45
#: ./docs/11.x/passport.md:44
#: ./docs/master/passport.md:44
msgctxt "P"
msgid "[Testing](#testing)"
msgstr ""

#: ./docs/8.x/passport.md:46
#: ./docs/9.x/passport.md:47
#: ./docs/10.x/passport.md:47
#: ./docs/11.x/passport.md:46
#: ./docs/master/passport.md:46
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:47
#: ./docs/9.x/passport.md:48
#: ./docs/10.x/passport.md:48
#: ./docs/11.x/passport.md:47
#: ./docs/master/passport.md:47
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/passport.md:49
#: ./docs/9.x/passport.md:50
#: ./docs/10.x/passport.md:50
#: ./docs/11.x/passport.md:49
#: ./docs/master/passport.md:49
msgctxt "P"
msgid "[Laravel Passport](https://github.com/laravel/passport) provides a full OAuth2 server implementation for your Laravel application in a matter of minutes. Passport is built on top of the [League OAuth2 server](https://github.com/thephpleague/oauth2-server) that is maintained by Andy Millington and Simon Hamp."
msgstr ""

#: ./docs/8.x/passport.md:51
#: ./docs/9.x/passport.md:53
#: ./docs/10.x/passport.md:53
#: ./docs/11.x/passport.md:52
#: ./docs/master/passport.md:52
msgctxt "P"
msgid "This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general [terminology](https://oauth2.thephpleague.com/terminology/) and features of OAuth2 before continuing."
msgstr ""

#: ./docs/8.x/passport.md:53
#: ./docs/9.x/passport.md:55
#: ./docs/10.x/passport.md:55
#: ./docs/11.x/passport.md:54
#: ./docs/master/passport.md:54
#~ msgctxt "P"
#~ msgid "<a name=\"passport-or-sanctum\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:54
#: ./docs/9.x/passport.md:56
msgctxt "H3"
msgid "Passport Or Sanctum?"
msgstr ""

#: ./docs/10.x/passport.md:56
#: ./docs/11.x/passport.md:55
#: ./docs/master/passport.md:55
msgctxt "H3"
msgid "Passport or Sanctum?"
msgstr ""

#: ./docs/8.x/passport.md:56
#: ./docs/9.x/passport.md:58
#: ./docs/10.x/passport.md:58
#: ./docs/11.x/passport.md:57
#: ./docs/master/passport.md:57
msgctxt "P"
msgid "Before getting started, you may wish to determine if your application would be better served by Laravel Passport or [Laravel Sanctum](/docs/{{version}}/sanctum). If your application absolutely needs to support OAuth2, then you should use Laravel Passport."
msgstr ""

#: ./docs/8.x/passport.md:58
#: ./docs/9.x/passport.md:60
#: ./docs/10.x/passport.md:60
#: ./docs/11.x/passport.md:59
#: ./docs/master/passport.md:59
msgctxt "P"
msgid "However, if you are attempting to authenticate a single-page application, mobile application, or issue API tokens, you should use [Laravel Sanctum](/docs/{{version}}/sanctum). Laravel Sanctum does not support OAuth2; however, it provides a much simpler API authentication development experience."
msgstr ""

#: ./docs/8.x/passport.md:60
#: ./docs/9.x/passport.md:62
#: ./docs/10.x/passport.md:62
#: ./docs/11.x/passport.md:61
#: ./docs/master/passport.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:61
#: ./docs/9.x/passport.md:63
#: ./docs/10.x/passport.md:63
#: ./docs/11.x/passport.md:62
#: ./docs/master/passport.md:62
msgctxt "H2"
msgid "Installation"
msgstr ""

#: ./docs/8.x/passport.md:63
#: ./docs/9.x/passport.md:65
#: ./docs/10.x/passport.md:65
msgctxt "P"
msgid "To get started, install Passport via the Composer package manager:"
msgstr ""

#: ./docs/11.x/passport.md:64
#: ./docs/master/passport.md:64
msgctxt "P"
msgid "You may install Laravel Passport via the `install:api` Artisan command:"
msgstr ""

#: ./docs/8.x/passport.md:65
#: ./docs/9.x/passport.md:67
#: ./docs/10.x/passport.md:67
msgctxt "CODE"
msgid "composer require laravel/passport"
msgstr ""

#: ./docs/11.x/passport.md:66
#: ./docs/master/passport.md:66
msgctxt "CODE: shell"
msgid "php artisan install:api --passport"
msgstr ""

#: ./docs/8.x/passport.md:67
#: ./docs/9.x/passport.md:71
#: ./docs/10.x/passport.md:71
msgctxt "P"
msgid "Passport's [service provider](/docs/{{version}}/providers) registers its own database migration directory, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store OAuth2 clients and access tokens:"
msgstr ""

#: ./docs/8.x/passport.md:69
#: ./docs/9.x/passport.md:73
#: ./docs/10.x/passport.md:73
msgctxt "CODE"
msgid "php artisan migrate"
msgstr ""

#: ./docs/11.x/passport.md:70
#: ./docs/master/passport.md:70
msgctxt "P"
msgid "This command will publish and run the database migrations necessary for creating the tables your application needs to store OAuth2 clients and access tokens. The command will also create the encryption keys required to generate secure access tokens."
msgstr ""

#: ./docs/8.x/passport.md:71
#: ./docs/9.x/passport.md:77
#: ./docs/10.x/passport.md:77
msgctxt "P"
msgid "Next, you should execute the `passport:install` Artisan command. This command will create the encryption keys needed to generate secure access tokens. In addition, the command will create \"personal access\" and \"password grant\" clients which will be used to generate access tokens:"
msgstr ""

#: ./docs/11.x/passport.md:72
#: ./docs/master/passport.md:72
msgctxt "P"
msgid "Additionally, this command will ask if you would like to use UUIDs as the primary key value of the Passport `Client` model instead of auto-incrementing integers."
msgstr ""

#: ./docs/8.x/passport.md:73
#: ./docs/9.x/passport.md:79
#: ./docs/10.x/passport.md:79
msgctxt "CODE"
msgid "php artisan passport:install"
msgstr ""

#: ./docs/11.x/passport.md:74
#: ./docs/master/passport.md:74
msgctxt "P"
msgid "After running the `install:api` command, add the `Laravel\\Passport\\HasApiTokens` trait to your `App\\Models\\User` model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes:"
msgstr ""

#: ./docs/8.x/passport.md:75
#: ./docs/9.x/passport.md:84
#: ./docs/10.x/passport.md:84
msgctxt "P"
msgid "If you would like to use UUIDs as the primary key value of the Passport `Client` model instead of auto-incrementing integers, please install Passport using [the `uuids` option](#client-uuids)."
msgstr ""

#: ./docs/8.x/passport.md:77
#: ./docs/9.x/passport.md:86
#: ./docs/10.x/passport.md:86
msgctxt "P"
msgid "After running the `passport:install` command, add the `Laravel\\Passport\\HasApiTokens` trait to your `App\\Models\\User` model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes. If your model is already using the `Laravel\\Sanctum\\HasApiTokens` trait, you may remove that trait:"
msgstr ""

#: ./docs/8.x/passport.md:79
#: ./docs/9.x/passport.md:88
#: ./docs/10.x/passport.md:88
#: ./docs/11.x/passport.md:76
#: ./docs/master/passport.md:76
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, HasFactory, Notifiable;\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:93
msgctxt "P"
msgid "Next, you should call the `Passport::routes` method within the `boot` method of your `App\\Providers\\AuthServiceProvider`. This method will register the routes necessary to issue access tokens and revoke access tokens, clients, and personal access tokens:"
msgstr ""

#: ./docs/8.x/passport.md:95
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"use Laravel\\Passport\\Passport;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n"
"    ];\n\n"
"    /**\n"
"     * Register any authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        if (! $this->app->routesAreCached()) {\n"
"            Passport::routes();\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:102
#: ./docs/10.x/passport.md:102
#: ./docs/11.x/passport.md:90
#: ./docs/master/passport.md:90
msgctxt "P"
msgid "Finally, in your application's `config/auth.php` configuration file, you should define an `api` authentication guard and set the `driver` option to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:"
msgstr ""

#: ./docs/11.x/passport.md:113
#: ./docs/master/passport.md:113
msgctxt "P"
msgid "If necessary, you may define the path where Passport's keys should be loaded from. You may use the `Passport::loadKeysFrom` method to accomplish this. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/11.x/passport.md:115
#: ./docs/master/passport.md:115
msgctxt "CODE"
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:129
msgctxt "P"
msgid "Finally, in your application's `config/auth.php` configuration file, you should set the `driver` option of the `api` authentication guard to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:"
msgstr ""

#: ./docs/8.x/passport.md:131
#: ./docs/9.x/passport.md:104
#: ./docs/10.x/passport.md:104
#: ./docs/11.x/passport.md:92
#: ./docs/master/passport.md:92
msgctxt "CODE"
msgid "'guards' => [\n"
"    'web' => [\n"
"        'driver' => 'session',\n"
"        'provider' => 'users',\n"
"    ],\n\n"
"    'api' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'users',\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/10.x/passport.md:136
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:136
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:143
#: ./docs/9.x/passport.md:116
#: ./docs/10.x/passport.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"client-uuids\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:144
#: ./docs/9.x/passport.md:117
#: ./docs/10.x/passport.md:117
msgctxt "H4"
msgid "Client UUIDs"
msgstr ""

#: ./docs/10.x/passport.md:145
#: ./docs/11.x/passport.md:124
#: ./docs/master/passport.md:124
msgctxt "H4"
msgid "Loading Keys From the Environment"
msgstr ""

#: ./docs/8.x/passport.md:146
#: ./docs/9.x/passport.md:119
#: ./docs/10.x/passport.md:119
msgctxt "P"
msgid "You may also run the `passport:install` command with the `--uuids` option present. This option will instruct Passport that you would like to use UUIDs instead of auto-incrementing integers as the Passport `Client` model's primary key values. After running the `passport:install` command with the `--uuids` option, you will be given additional instructions regarding disabling Passport's default migrations:"
msgstr ""

#: ./docs/8.x/passport.md:148
#: ./docs/9.x/passport.md:121
#: ./docs/10.x/passport.md:121
msgctxt "CODE"
msgid "php artisan passport:install --uuids"
msgstr ""

#: ./docs/8.x/passport.md:150
#: ./docs/9.x/passport.md:125
#: ./docs/10.x/passport.md:125
#: ./docs/11.x/passport.md:104
#: ./docs/master/passport.md:104
#~ msgctxt "P"
#~ msgid "<a name=\"deploying-passport\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:151
#: ./docs/9.x/passport.md:126
#: ./docs/10.x/passport.md:126
#: ./docs/11.x/passport.md:105
#: ./docs/master/passport.md:105
msgctxt "H3"
msgid "Deploying Passport"
msgstr ""

#: ./docs/8.x/passport.md:153
#: ./docs/9.x/passport.md:128
#: ./docs/10.x/passport.md:128
#: ./docs/11.x/passport.md:107
#: ./docs/master/passport.md:107
msgctxt "P"
msgid "When deploying Passport to your application's servers for the first time, you will likely need to run the `passport:keys` command. This command generates the encryption keys Passport needs in order to generate access tokens. The generated keys are not typically kept in source control:"
msgstr ""

#: ./docs/11.x/passport.md:155
#: ./docs/master/passport.md:155
msgctxt "P"
msgid "If you would like your client's secrets to be hashed when stored in your database, you should call the `Passport::hashClientSecrets` method in the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:155
#: ./docs/9.x/passport.md:130
#: ./docs/10.x/passport.md:130
#: ./docs/11.x/passport.md:109
#: ./docs/master/passport.md:109
msgctxt "CODE"
msgid "php artisan passport:keys"
msgstr ""

#: ./docs/8.x/passport.md:157
#: ./docs/9.x/passport.md:134
#: ./docs/10.x/passport.md:134
msgctxt "P"
msgid "If necessary, you may define the path where Passport's keys should be loaded from. You may use the `Passport::loadKeysFrom` method to accomplish this. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:159
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:166
#: ./docs/master/passport.md:166
msgctxt "P"
msgid "By default, Passport issues long-lived access tokens that expire after one year. If you would like to configure a longer / shorter token lifetime, you may use the `tokensExpireIn`, `refreshTokensExpireIn`, and `personalAccessTokensExpireIn` methods. These methods should be called from the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/11.x/passport.md:168
#: ./docs/master/passport.md:168
msgctxt "CODE"
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:173
#: ./docs/9.x/passport.md:148
#: ./docs/10.x/passport.md:144
#: ./docs/11.x/passport.md:123
#: ./docs/master/passport.md:123
#~ msgctxt "P"
#~ msgid "<a name=\"loading-keys-from-the-environment\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:174
#: ./docs/9.x/passport.md:149
msgctxt "H4"
msgid "Loading Keys From The Environment"
msgstr ""

#: ./docs/8.x/passport.md:176
#: ./docs/9.x/passport.md:151
#: ./docs/10.x/passport.md:147
#: ./docs/11.x/passport.md:126
#: ./docs/master/passport.md:126
msgctxt "P"
msgid "Alternatively, you may publish Passport's configuration file using the `vendor:publish` Artisan command:"
msgstr ""

#: ./docs/8.x/passport.md:178
#: ./docs/9.x/passport.md:153
#: ./docs/10.x/passport.md:149
#: ./docs/11.x/passport.md:128
#: ./docs/master/passport.md:128
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=passport-config"
msgstr ""

#: ./docs/8.x/passport.md:180
#: ./docs/9.x/passport.md:157
#: ./docs/10.x/passport.md:153
#: ./docs/11.x/passport.md:132
#: ./docs/master/passport.md:132
msgctxt "P"
msgid "After the configuration file has been published, you may load your application's encryption keys by defining them as environment variables:"
msgstr ""

#: ./docs/8.x/passport.md:182
#: ./docs/9.x/passport.md:159
#: ./docs/10.x/passport.md:155
#: ./docs/11.x/passport.md:134
#: ./docs/master/passport.md:134
msgctxt "CODE: bash"
msgid "PASSPORT_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n"
"<private key here>\n"
"-----END RSA PRIVATE KEY-----\"\n\n"
"PASSPORT_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\n"
"<public key here>\n"
"-----END PUBLIC KEY-----\""
msgstr ""

#: ./docs/8.x/passport.md:192
#: ./docs/9.x/passport.md:169
#: ./docs/10.x/passport.md:165
#~ msgctxt "P"
#~ msgid "<a name=\"migration-customization\"></a>"
#~ msgstr ""

#: ./docs/11.x/passport.md:193
#: ./docs/master/passport.md:193
msgctxt "P"
msgid "After defining your model, you may instruct Passport to use your custom model via the `Laravel\\Passport\\Passport` class. Typically, you should inform Passport about your custom models in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:193
#: ./docs/9.x/passport.md:170
#: ./docs/10.x/passport.md:166
msgctxt "H3"
msgid "Migration Customization"
msgstr ""

#: ./docs/11.x/passport.md:195
#: ./docs/master/passport.md:195
msgctxt "CODE"
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\RefreshToken;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useRefreshTokenModel(RefreshToken::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:195
#: ./docs/9.x/passport.md:172
#: ./docs/10.x/passport.md:168
msgctxt "P"
msgid "If you are not going to use Passport's default migrations, you should call the `Passport::ignoreMigrations` method in the `register` method of your `App\\Providers\\AppServiceProvider` class. You may export the default migrations using the `vendor:publish` Artisan command:"
msgstr ""

#: ./docs/8.x/passport.md:197
#: ./docs/9.x/passport.md:174
#: ./docs/10.x/passport.md:170
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=passport-migrations"
msgstr ""

#: ./docs/10.x/passport.md:198
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:199
#: ./docs/9.x/passport.md:178
#: ./docs/10.x/passport.md:174
#: ./docs/11.x/passport.md:144
#: ./docs/master/passport.md:144
#~ msgctxt "P"
#~ msgid "<a name=\"upgrading-passport\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:200
#: ./docs/9.x/passport.md:179
#: ./docs/10.x/passport.md:175
#: ./docs/11.x/passport.md:145
#: ./docs/master/passport.md:145
msgctxt "H3"
msgid "Upgrading Passport"
msgstr ""

#: ./docs/8.x/passport.md:202
#: ./docs/9.x/passport.md:181
#: ./docs/10.x/passport.md:177
#: ./docs/11.x/passport.md:147
#: ./docs/master/passport.md:147
msgctxt "P"
msgid "When upgrading to a new major version of Passport, it's important that you carefully review [the upgrade guide](https://github.com/laravel/passport/blob/master/UPGRADE.md)."
msgstr ""

#: ./docs/9.x/passport.md:202
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:204
#: ./docs/9.x/passport.md:183
#: ./docs/10.x/passport.md:179
#: ./docs/11.x/passport.md:149
#: ./docs/master/passport.md:149
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:205
#: ./docs/9.x/passport.md:184
#: ./docs/10.x/passport.md:180
#: ./docs/11.x/passport.md:150
#: ./docs/master/passport.md:150
msgctxt "H2"
msgid "Configuration"
msgstr ""

#: ./docs/8.x/passport.md:207
#: ./docs/9.x/passport.md:186
#: ./docs/10.x/passport.md:182
#: ./docs/11.x/passport.md:152
#: ./docs/master/passport.md:152
#~ msgctxt "P"
#~ msgid "<a name=\"client-secret-hashing\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:208
#: ./docs/9.x/passport.md:187
#: ./docs/10.x/passport.md:183
#: ./docs/11.x/passport.md:153
#: ./docs/master/passport.md:153
msgctxt "H3"
msgid "Client Secret Hashing"
msgstr ""

#: ./docs/8.x/passport.md:210
#: ./docs/9.x/passport.md:189
#: ./docs/10.x/passport.md:185
msgctxt "P"
msgid "If you would like your client's secrets to be hashed when stored in your database, you should call the `Passport::hashClientSecrets` method in the `boot` method of your `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:212
#: ./docs/9.x/passport.md:191
#: ./docs/10.x/passport.md:187
#: ./docs/11.x/passport.md:157
#: ./docs/master/passport.md:157
msgctxt "CODE"
msgid "use Laravel\\Passport\\Passport;\n\n"
"Passport::hashClientSecrets();"
msgstr ""

#: ./docs/8.x/passport.md:216
#: ./docs/9.x/passport.md:195
#: ./docs/10.x/passport.md:191
#: ./docs/11.x/passport.md:161
#: ./docs/master/passport.md:161
msgctxt "P"
msgid "Once enabled, all of your client secrets will only be displayable to the user immediately after they are created. Since the plain-text client secret value is never stored in the database, it is not possible to recover the secret's value if it is lost."
msgstr ""

#: ./docs/8.x/passport.md:218
#: ./docs/9.x/passport.md:197
#: ./docs/10.x/passport.md:193
#: ./docs/11.x/passport.md:163
#: ./docs/master/passport.md:163
#~ msgctxt "P"
#~ msgid "<a name=\"token-lifetimes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:219
#: ./docs/9.x/passport.md:198
#: ./docs/10.x/passport.md:194
#: ./docs/11.x/passport.md:164
#: ./docs/master/passport.md:164
msgctxt "H3"
msgid "Token Lifetimes"
msgstr ""

#: ./docs/8.x/passport.md:221
#: ./docs/9.x/passport.md:200
#: ./docs/10.x/passport.md:196
msgctxt "P"
msgid "By default, Passport issues long-lived access tokens that expire after one year. If you would like to configure a longer / shorter token lifetime, you may use the `tokensExpireIn`, `refreshTokensExpireIn`, and `personalAccessTokensExpireIn` methods. These methods should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:223
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::tokensExpireIn(now()->addDays(15));\n"
"    Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"}"
msgstr ""

#: ./docs/10.x/passport.md:225
msgctxt "CODE"
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\RefreshToken;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useRefreshTokenModel(RefreshToken::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:233
msgctxt "CODE"
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\RefreshToken;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useRefreshTokenModel(RefreshToken::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:239
#: ./docs/9.x/passport.md:217
#: ./docs/10.x/passport.md:209
#: ./docs/11.x/passport.md:179
#: ./docs/master/passport.md:179
msgctxt "P"
msgid "The `expires_at` columns on Passport's database tables are read-only and for display purposes only. When issuing tokens, Passport stores the expiration information within the signed and encrypted tokens. If you need to invalidate a token you should [revoke it](#revoking-tokens)."
msgstr ""

#: ./docs/8.x/passport.md:241
#: ./docs/9.x/passport.md:219
#: ./docs/10.x/passport.md:211
#: ./docs/11.x/passport.md:181
#: ./docs/master/passport.md:181
#~ msgctxt "P"
#~ msgid "<a name=\"overriding-default-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:242
#: ./docs/9.x/passport.md:220
#: ./docs/10.x/passport.md:212
#: ./docs/11.x/passport.md:182
#: ./docs/master/passport.md:182
msgctxt "H3"
msgid "Overriding Default Models"
msgstr ""

#: ./docs/8.x/passport.md:244
#: ./docs/9.x/passport.md:222
#: ./docs/10.x/passport.md:214
#: ./docs/11.x/passport.md:184
#: ./docs/master/passport.md:184
msgctxt "P"
msgid "You are free to extend the models used internally by Passport by defining your own model and extending the corresponding Passport model:"
msgstr ""

#: ./docs/8.x/passport.md:246
#: ./docs/9.x/passport.md:224
#: ./docs/10.x/passport.md:216
#: ./docs/11.x/passport.md:186
#: ./docs/master/passport.md:186
msgctxt "CODE"
msgid "use Laravel\\Passport\\Client as PassportClient;\n\n"
"class Client extends PassportClient\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/passport.md:248
#: ./docs/11.x/passport.md:218
#: ./docs/master/passport.md:218
msgctxt "CODE"
msgid "use Laravel\\Passport\\Passport;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Passport::ignoreRoutes();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:253
#: ./docs/9.x/passport.md:231
#: ./docs/10.x/passport.md:223
msgctxt "P"
msgid "After defining your model, you may instruct Passport to use your custom model via the `Laravel\\Passport\\Passport` class. Typically, you should inform Passport about your custom models in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:255
msgctxt "CODE"
msgid "use App\\Models\\Passport\\AuthCode;\n"
"use App\\Models\\Passport\\Client;\n"
"use App\\Models\\Passport\\PersonalAccessClient;\n"
"use App\\Models\\Passport\\Token;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::useTokenModel(Token::class);\n"
"    Passport::useClientModel(Client::class);\n"
"    Passport::useAuthCodeModel(AuthCode::class);\n"
"    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:255
#: ./docs/10.x/passport.md:243
#: ./docs/11.x/passport.md:213
#: ./docs/master/passport.md:213
#~ msgctxt "P"
#~ msgid "<a name=\"overriding-routes\"></a>"
#~ msgstr ""

#: ./docs/9.x/passport.md:256
#: ./docs/10.x/passport.md:244
#: ./docs/11.x/passport.md:214
#: ./docs/master/passport.md:214
msgctxt "H3"
msgid "Overriding Routes"
msgstr ""

#: ./docs/9.x/passport.md:258
#: ./docs/10.x/passport.md:246
#: ./docs/11.x/passport.md:216
#: ./docs/master/passport.md:216
msgctxt "P"
msgid "Sometimes you may wish to customize the routes defined by Passport. To achieve this, you first need to ignore the routes registered by Passport by adding `Passport::ignoreRoutes` to the `register` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/10.x/passport.md:260
#: ./docs/11.x/passport.md:230
#: ./docs/master/passport.md:230
msgctxt "CODE"
msgid "Route::group([\n"
"    'as' => 'passport.',\n"
"    'prefix' => config('passport.path', 'oauth'),\n"
"    'namespace' => '\\Laravel\\Passport\\Http\\Controllers',\n"
"], function () {\n"
"    // Passport routes...\n"
"});"
msgstr ""

#: ./docs/9.x/passport.md:260
msgctxt "CODE"
msgid "use Laravel\\Passport\\Passport;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Passport::ignoreRoutes();\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:272
#: ./docs/10.x/passport.md:258
#: ./docs/11.x/passport.md:228
#: ./docs/master/passport.md:228
msgctxt "P"
msgid "Then, you may copy the routes defined by Passport in [its routes file](https://github.com/laravel/passport/blob/11.x/routes/web.php) to your application's `routes/web.php` file and modify them to your liking:"
msgstr ""

#: ./docs/9.x/passport.md:274
msgctxt "CODE"
msgid "Route::group([\n"
"    'as' => 'passport.',\n"
"    'prefix' => config('passport.path', 'oauth'),\n"
"    'namespace' => 'Laravel\\Passport\\Http\\Controllers',\n"
"], function () {\n"
"    // Passport routes...\n"
"});"
msgstr ""

#: ./docs/8.x/passport.md:277
#: ./docs/9.x/passport.md:282
#: ./docs/10.x/passport.md:268
#: ./docs/11.x/passport.md:238
#: ./docs/master/passport.md:238
#~ msgctxt "P"
#~ msgid "<a name=\"issuing-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:278
#: ./docs/9.x/passport.md:283
#: ./docs/10.x/passport.md:269
#: ./docs/11.x/passport.md:239
#: ./docs/master/passport.md:239
msgctxt "H2"
msgid "Issuing Access Tokens"
msgstr ""

#: ./docs/8.x/passport.md:280
#: ./docs/9.x/passport.md:285
#: ./docs/10.x/passport.md:271
#: ./docs/11.x/passport.md:241
#: ./docs/master/passport.md:241
msgctxt "P"
msgid "Using OAuth2 via authorization codes is how most developers are familiar with OAuth2. When using authorization codes, a client application will redirect a user to your server where they will either approve or deny the request to issue an access token to the client."
msgstr ""

#: ./docs/8.x/passport.md:282
#: ./docs/9.x/passport.md:287
#: ./docs/10.x/passport.md:273
#: ./docs/11.x/passport.md:243
#: ./docs/master/passport.md:243
#~ msgctxt "P"
#~ msgid "<a name=\"managing-clients\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:283
#: ./docs/9.x/passport.md:288
#: ./docs/10.x/passport.md:274
#: ./docs/11.x/passport.md:244
#: ./docs/master/passport.md:244
msgctxt "H3"
msgid "Managing Clients"
msgstr ""

#: ./docs/8.x/passport.md:285
#: ./docs/9.x/passport.md:290
#: ./docs/10.x/passport.md:276
#: ./docs/11.x/passport.md:246
#: ./docs/master/passport.md:246
msgctxt "P"
msgid "First, developers building applications that need to interact with your application's API will need to register their application with yours by creating a \"client\". Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization."
msgstr ""

#: ./docs/8.x/passport.md:287
#: ./docs/9.x/passport.md:292
#: ./docs/10.x/passport.md:278
#: ./docs/11.x/passport.md:248
#: ./docs/master/passport.md:248
#~ msgctxt "P"
#~ msgid "<a name=\"the-passportclient-command\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:288
#: ./docs/9.x/passport.md:293
#: ./docs/10.x/passport.md:279
#: ./docs/11.x/passport.md:249
#: ./docs/master/passport.md:249
msgctxt "H4"
msgid "The `passport:client` Command"
msgstr ""

#: ./docs/8.x/passport.md:290
#: ./docs/9.x/passport.md:295
#: ./docs/10.x/passport.md:281
#: ./docs/11.x/passport.md:251
#: ./docs/master/passport.md:251
msgctxt "P"
msgid "The simplest way to create a client is using the `passport:client` Artisan command. This command may be used to create your own clients for testing your OAuth2 functionality. When you run the `client` command, Passport will prompt you for more information about your client and will provide you with a client ID and secret:"
msgstr ""

#: ./docs/8.x/passport.md:292
#: ./docs/9.x/passport.md:297
#: ./docs/10.x/passport.md:283
#: ./docs/11.x/passport.md:253
#: ./docs/master/passport.md:253
msgctxt "CODE"
msgid "php artisan passport:client"
msgstr ""

#: ./docs/8.x/passport.md:294
#: ./docs/9.x/passport.md:301
#: ./docs/10.x/passport.md:287
#: ./docs/11.x/passport.md:257
#: ./docs/master/passport.md:257
msgctxt "P"
msgid "**Redirect URLs**"
msgstr ""

#: ./docs/8.x/passport.md:296
#: ./docs/9.x/passport.md:303
#: ./docs/10.x/passport.md:289
#: ./docs/11.x/passport.md:259
#: ./docs/master/passport.md:259
msgctxt "P"
msgid "If you would like to allow multiple redirect URLs for your client, you may specify them using a comma-delimited list when prompted for the URL by the `passport:client` command. Any URLs which contain commas should be URL encoded:"
msgstr ""

#: ./docs/8.x/passport.md:298
#: ./docs/9.x/passport.md:305
#: ./docs/10.x/passport.md:291
#: ./docs/11.x/passport.md:261
#: ./docs/master/passport.md:261
msgctxt "CODE: bash"
msgid "http://example.com/callback,http://examplefoo.com/callback"
msgstr ""

#: ./docs/8.x/passport.md:302
#: ./docs/9.x/passport.md:309
#: ./docs/10.x/passport.md:295
#: ./docs/11.x/passport.md:265
#: ./docs/master/passport.md:265
#~ msgctxt "P"
#~ msgid "<a name=\"clients-json-api\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:303
#: ./docs/8.x/passport.md:458
#: ./docs/8.x/passport.md:870
#: ./docs/9.x/passport.md:310
#: ./docs/9.x/passport.md:484
#: ./docs/9.x/passport.md:918
#: ./docs/10.x/passport.md:296
#: ./docs/10.x/passport.md:469
#: ./docs/10.x/passport.md:890
#: ./docs/11.x/passport.md:266
#: ./docs/11.x/passport.md:439
#: ./docs/11.x/passport.md:868
#: ./docs/master/passport.md:266
#: ./docs/master/passport.md:439
#: ./docs/master/passport.md:868
msgctxt "H4"
msgid "JSON API"
msgstr ""

#: ./docs/8.x/passport.md:305
#: ./docs/9.x/passport.md:312
#: ./docs/10.x/passport.md:298
#: ./docs/11.x/passport.md:268
#: ./docs/master/passport.md:268
msgctxt "P"
msgid "Since your application's users will not be able to utilize the `client` command, Passport provides a JSON API that you may use to create clients. This saves you the trouble of having to manually code controllers for creating, updating, and deleting clients."
msgstr ""

#: ./docs/8.x/passport.md:307
#: ./docs/9.x/passport.md:314
#: ./docs/10.x/passport.md:300
#: ./docs/11.x/passport.md:270
#: ./docs/master/passport.md:270
msgctxt "P"
msgid "However, you will need to pair Passport's JSON API with your own frontend to provide a dashboard for your users to manage their clients. Below, we'll review all of the API endpoints for managing clients. For convenience, we'll use [Axios](https://github.com/axios/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#: ./docs/8.x/passport.md:309
#: ./docs/8.x/passport.md:874
#: ./docs/9.x/passport.md:316
#: ./docs/9.x/passport.md:922
#: ./docs/10.x/passport.md:302
#: ./docs/10.x/passport.md:894
#: ./docs/11.x/passport.md:272
#: ./docs/11.x/passport.md:872
#: ./docs/master/passport.md:272
#: ./docs/master/passport.md:872
msgctxt "P"
msgid "The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application. It is not able to be called from an external source."
msgstr ""

#: ./docs/8.x/passport.md:311
#: ./docs/9.x/passport.md:318
#: ./docs/10.x/passport.md:304
#: ./docs/11.x/passport.md:274
#: ./docs/master/passport.md:274
#~ msgctxt "P"
#~ msgid "<a name=\"get-oauthclients\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:312
#: ./docs/9.x/passport.md:319
#: ./docs/10.x/passport.md:305
#: ./docs/11.x/passport.md:275
#: ./docs/master/passport.md:275
msgctxt "H4"
msgid "`GET /oauth/clients`"
msgstr ""

#: ./docs/8.x/passport.md:314
#: ./docs/9.x/passport.md:321
#: ./docs/10.x/passport.md:307
#: ./docs/11.x/passport.md:277
#: ./docs/master/passport.md:277
msgctxt "P"
msgid "This route returns all of the clients for the authenticated user. This is primarily useful for listing all of the user's clients so that they may edit or delete them:"
msgstr ""

#: ./docs/8.x/passport.md:316
#: ./docs/9.x/passport.md:323
#: ./docs/10.x/passport.md:309
#: ./docs/11.x/passport.md:279
#: ./docs/master/passport.md:279
msgctxt "CODE"
msgid "axios.get('/oauth/clients')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:321
#: ./docs/9.x/passport.md:330
#: ./docs/10.x/passport.md:316
#: ./docs/11.x/passport.md:286
#: ./docs/master/passport.md:286
#~ msgctxt "P"
#~ msgid "<a name=\"post-oauthclients\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:322
#: ./docs/9.x/passport.md:331
#: ./docs/10.x/passport.md:317
#: ./docs/11.x/passport.md:287
#: ./docs/master/passport.md:287
msgctxt "H4"
msgid "`POST /oauth/clients`"
msgstr ""

#: ./docs/8.x/passport.md:324
#: ./docs/9.x/passport.md:333
#: ./docs/10.x/passport.md:319
#: ./docs/11.x/passport.md:289
#: ./docs/master/passport.md:289
msgctxt "P"
msgid "This route is used to create new clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization."
msgstr ""

#: ./docs/8.x/passport.md:326
#: ./docs/9.x/passport.md:335
#: ./docs/10.x/passport.md:321
#: ./docs/11.x/passport.md:291
#: ./docs/master/passport.md:291
msgctxt "P"
msgid "When a client is created, it will be issued a client ID and client secret. These values will be used when requesting access tokens from your application. The client creation route will return the new client instance:"
msgstr ""

#: ./docs/8.x/passport.md:328
#: ./docs/9.x/passport.md:337
#: ./docs/10.x/passport.md:323
#: ./docs/11.x/passport.md:293
#: ./docs/master/passport.md:293
msgctxt "CODE"
msgid "const data = {\n"
"    name: 'Client Name',\n"
"    redirect: 'http://example.com/callback'\n"
"};\n\n"
"axios.post('/oauth/clients', data)\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    })\n"
"    .catch (response => {\n"
"        // List errors on response...\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:341
#: ./docs/9.x/passport.md:352
#: ./docs/10.x/passport.md:338
#: ./docs/11.x/passport.md:308
#: ./docs/master/passport.md:308
#~ msgctxt "P"
#~ msgid "<a name=\"put-oauthclientsclient-id\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:342
#: ./docs/9.x/passport.md:353
#: ./docs/10.x/passport.md:339
#: ./docs/11.x/passport.md:309
#: ./docs/master/passport.md:309
msgctxt "H4"
msgid "`PUT /oauth/clients/{client-id}`"
msgstr ""

#: ./docs/8.x/passport.md:344
#: ./docs/9.x/passport.md:355
#: ./docs/10.x/passport.md:341
#: ./docs/11.x/passport.md:311
#: ./docs/master/passport.md:311
msgctxt "P"
msgid "This route is used to update clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization. The route will return the updated client instance:"
msgstr ""

#: ./docs/8.x/passport.md:346
#: ./docs/9.x/passport.md:357
#: ./docs/10.x/passport.md:343
#: ./docs/11.x/passport.md:313
#: ./docs/master/passport.md:313
msgctxt "CODE"
msgid "const data = {\n"
"    name: 'New Client Name',\n"
"    redirect: 'http://example.com/callback'\n"
"};\n\n"
"axios.put('/oauth/clients/' + clientId, data)\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    })\n"
"    .catch (response => {\n"
"        // List errors on response...\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:359
#: ./docs/9.x/passport.md:372
#: ./docs/10.x/passport.md:358
#: ./docs/11.x/passport.md:328
#: ./docs/master/passport.md:328
#~ msgctxt "P"
#~ msgid "<a name=\"delete-oauthclientsclient-id\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:360
#: ./docs/9.x/passport.md:373
#: ./docs/10.x/passport.md:359
#: ./docs/11.x/passport.md:329
#: ./docs/master/passport.md:329
msgctxt "H4"
msgid "`DELETE /oauth/clients/{client-id}`"
msgstr ""

#: ./docs/8.x/passport.md:362
#: ./docs/9.x/passport.md:375
#: ./docs/10.x/passport.md:361
#: ./docs/11.x/passport.md:331
#: ./docs/master/passport.md:331
msgctxt "P"
msgid "This route is used to delete clients:"
msgstr ""

#: ./docs/10.x/passport.md:363
#: ./docs/11.x/passport.md:333
#: ./docs/master/passport.md:333
msgctxt "CODE: js"
msgid "axios.delete('/oauth/clients/' + clientId)\n"
"    .then(response => {\n"
"        // ...\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:364
#: ./docs/9.x/passport.md:377
msgctxt "CODE"
msgid "axios.delete('/oauth/clients/' + clientId)\n"
"    .then(response => {\n"
"        //\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:369
#: ./docs/9.x/passport.md:384
#: ./docs/10.x/passport.md:370
#: ./docs/11.x/passport.md:340
#: ./docs/master/passport.md:340
#~ msgctxt "P"
#~ msgid "<a name=\"requesting-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:370
#: ./docs/8.x/passport.md:555
#: ./docs/8.x/passport.md:648
#: ./docs/9.x/passport.md:385
#: ./docs/9.x/passport.md:592
#: ./docs/9.x/passport.md:689
#: ./docs/10.x/passport.md:371
#: ./docs/10.x/passport.md:574
#: ./docs/10.x/passport.md:671
#: ./docs/11.x/passport.md:341
#: ./docs/11.x/passport.md:540
#: ./docs/11.x/passport.md:647
#: ./docs/master/passport.md:341
#: ./docs/master/passport.md:540
#: ./docs/master/passport.md:647
msgctxt "H3"
msgid "Requesting Tokens"
msgstr ""

#: ./docs/8.x/passport.md:372
#: ./docs/9.x/passport.md:387
#: ./docs/10.x/passport.md:373
#: ./docs/11.x/passport.md:343
#: ./docs/master/passport.md:343
#~ msgctxt "P"
#~ msgid "<a name=\"requesting-tokens-redirecting-for-authorization\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:373
#: ./docs/8.x/passport.md:571
#: ./docs/9.x/passport.md:388
#: ./docs/9.x/passport.md:608
msgctxt "H4"
msgid "Redirecting For Authorization"
msgstr ""

#: ./docs/10.x/passport.md:374
#: ./docs/10.x/passport.md:590
#: ./docs/11.x/passport.md:344
#: ./docs/11.x/passport.md:556
#: ./docs/master/passport.md:344
#: ./docs/master/passport.md:556
msgctxt "H4"
msgid "Redirecting for Authorization"
msgstr ""

#: ./docs/8.x/passport.md:375
#: ./docs/9.x/passport.md:390
#: ./docs/10.x/passport.md:376
#: ./docs/11.x/passport.md:346
#: ./docs/master/passport.md:346
msgctxt "P"
msgid "Once a client has been created, developers may use their client ID and secret to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""

#: ./docs/8.x/passport.md:377
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/9.x/passport.md:392
#: ./docs/10.x/passport.md:378
#: ./docs/11.x/passport.md:348
#: ./docs/master/passport.md:348
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/8.x/passport.md:394
#: ./docs/8.x/passport.md:786
msgctxt "P"
msgid "Remember, the `/oauth/authorize` route is already defined by the `Passport::routes` method. You do not need to manually define this route."
msgstr ""

#: ./docs/8.x/passport.md:396
#: ./docs/9.x/passport.md:419
#: ./docs/10.x/passport.md:405
#: ./docs/11.x/passport.md:375
#: ./docs/master/passport.md:375
#~ msgctxt "P"
#~ msgid "<a name=\"approving-the-request\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:397
#: ./docs/9.x/passport.md:420
msgctxt "H4"
msgid "Approving The Request"
msgstr ""

#: ./docs/8.x/passport.md:399
msgctxt "P"
msgid "When receiving authorization requests, Passport will automatically display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the `redirect_uri` that was specified by the consuming application. The `redirect_uri` must match the `redirect` URL that was specified when the client was created."
msgstr ""

#: ./docs/8.x/passport.md:401
#: ./docs/9.x/passport.md:424
#: ./docs/10.x/passport.md:410
#: ./docs/11.x/passport.md:380
#: ./docs/master/passport.md:380
msgctxt "P"
msgid "If you would like to customize the authorization approval screen, you may publish Passport's views using the `vendor:publish` Artisan command. The published views will be placed in the `resources/views/vendor/passport` directory:"
msgstr ""

#: ./docs/8.x/passport.md:403
#: ./docs/9.x/passport.md:426
#: ./docs/10.x/passport.md:412
#: ./docs/11.x/passport.md:382
#: ./docs/master/passport.md:382
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=passport-views"
msgstr ""

#: ./docs/8.x/passport.md:405
msgctxt "P"
msgid "Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by [extending the `Client` model](#overriding-default-models) and defining a `skipsAuthorization` method. If `skipsAuthorization` returns `true` the client will be approved and the user will be redirected back to the `redirect_uri` immediately:"
msgstr ""

#: ./docs/10.x/passport.md:406
#: ./docs/11.x/passport.md:376
#: ./docs/master/passport.md:376
msgctxt "H4"
msgid "Approving the Request"
msgstr ""

#: ./docs/8.x/passport.md:407
#: ./docs/9.x/passport.md:432
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models\\Passport;\n\n"
"use Laravel\\Passport\\Client as BaseClient;\n\n"
"class Client extends BaseClient\n"
"{\n"
"    /**\n"
"     * Determine if the client should skip the authorization prompt.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function skipsAuthorization()\n"
"    {\n"
"        return $this->firstParty();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:410
#: ./docs/10.x/passport.md:396
#: ./docs/11.x/passport.md:366
#: ./docs/master/passport.md:366
msgctxt "P"
msgid "The `prompt` parameter may be used to specify the authentication behavior of the Passport application."
msgstr ""

#: ./docs/9.x/passport.md:412
#: ./docs/10.x/passport.md:398
#: ./docs/11.x/passport.md:368
#: ./docs/master/passport.md:368
msgctxt "P"
msgid "If the `prompt` value is `none`, Passport will always throw an authentication error if the user is not already authenticated with the Passport application. If the value is `consent`, Passport will always display the authorization approval screen, even if all scopes were previously granted to the consuming application. When the value is `login`, the Passport application will always prompt the user to re-login to the application, even if they already have an existing session."
msgstr ""

#: ./docs/9.x/passport.md:414
#: ./docs/10.x/passport.md:400
#: ./docs/11.x/passport.md:370
#: ./docs/master/passport.md:370
msgctxt "P"
msgid "If no `prompt` value is provided, the user will be prompted for authorization only if they have not previously authorized access to the consuming application for the requested scopes."
msgstr ""

#: ./docs/9.x/passport.md:417
#: ./docs/9.x/passport.md:829
#: ./docs/10.x/passport.md:403
#: ./docs/10.x/passport.md:801
#: ./docs/11.x/passport.md:373
#: ./docs/11.x/passport.md:777
#: ./docs/master/passport.md:373
#: ./docs/master/passport.md:777
msgctxt "P"
msgid "Remember, the `/oauth/authorize` route is already defined by Passport. You do not need to manually define this route."
msgstr ""

#: ./docs/10.x/passport.md:418
#: ./docs/11.x/passport.md:388
#: ./docs/master/passport.md:388
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models\\Passport;\n\n"
"use Laravel\\Passport\\Client as BaseClient;\n\n"
"class Client extends BaseClient\n"
"{\n"
"    /**\n"
"     * Determine if the client should skip the authorization prompt.\n"
"     */\n"
"    public function skipsAuthorization(): bool\n"
"    {\n"
"        return $this->firstParty();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/passport.md:422
#: ./docs/10.x/passport.md:408
#: ./docs/11.x/passport.md:378
#: ./docs/master/passport.md:378
msgctxt "P"
msgid "When receiving authorization requests, Passport will automatically respond based on the value of `prompt` parameter (if present) and may display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the `redirect_uri` that was specified by the consuming application. The `redirect_uri` must match the `redirect` URL that was specified when the client was created."
msgstr ""

#: ./docs/8.x/passport.md:426
#: ./docs/9.x/passport.md:451
#: ./docs/10.x/passport.md:435
#: ./docs/11.x/passport.md:405
#: ./docs/master/passport.md:405
#~ msgctxt "P"
#~ msgid "<a name=\"requesting-tokens-converting-authorization-codes-to-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:427
#: ./docs/8.x/passport.md:603
#: ./docs/9.x/passport.md:452
#: ./docs/9.x/passport.md:641
msgctxt "H4"
msgid "Converting Authorization Codes To Access Tokens"
msgstr ""

#: ./docs/8.x/passport.md:429
#: ./docs/9.x/passport.md:454
#: ./docs/10.x/passport.md:438
#: ./docs/11.x/passport.md:408
#: ./docs/master/passport.md:408
msgctxt "P"
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should first verify the `state` parameter against the value that was stored prior to the redirect. If the state parameter matches then the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request:"
msgstr ""

#: ./docs/9.x/passport.md:430
#: ./docs/10.x/passport.md:416
#: ./docs/11.x/passport.md:386
#: ./docs/master/passport.md:386
msgctxt "P"
msgid "Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by [extending the `Client` model](#overriding-default-models) and defining a `skipsAuthorization` method. If `skipsAuthorization` returns `true` the client will be approved and the user will be redirected back to the `redirect_uri` immediately, unless the consuming application has explicitly set the `prompt` parameter when redirecting for authorization:"
msgstr ""

#: ./docs/8.x/passport.md:431
#: ./docs/9.x/passport.md:456
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Route::get('/callback', function (Request $request) {\n"
"    $state = $request->session()->pull('state');\n\n"
"    throw_unless(\n"
"        strlen($state) > 0 && $state === $request->state,\n"
"        InvalidArgumentException::class\n"
"    );\n\n"
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'authorization_code',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'code' => $request->code,\n"
"    ]);\n\n"
"    return $response->json();\n"
"});"
msgstr ""

#: ./docs/10.x/passport.md:436
#: ./docs/10.x/passport.md:623
#: ./docs/11.x/passport.md:406
#: ./docs/11.x/passport.md:589
#: ./docs/master/passport.md:406
#: ./docs/master/passport.md:589
msgctxt "H4"
msgid "Converting Authorization Codes to Access Tokens"
msgstr ""

#: ./docs/10.x/passport.md:440
#: ./docs/11.x/passport.md:410
#: ./docs/master/passport.md:410
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Route::get('/callback', function (Request $request) {\n"
"    $state = $request->session()->pull('state');\n\n"
"    throw_unless(\n"
"        strlen($state) > 0 && $state === $request->state,\n"
"        InvalidArgumentException::class,\n"
"        'Invalid state value.'\n"
"    );\n\n"
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'authorization_code',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'code' => $request->code,\n"
"    ]);\n\n"
"    return $response->json();\n"
"});"
msgstr ""

#: ./docs/11.x/passport.md:441
msgctxt "P"
msgid "Passport also includes a JSON API for managing authorized access tokens. You may pair this with your own frontend to offer your users a dashboard for managing access tokens. For convenience, we'll use [Axios](https://github.com/axios/axios) to demonstrate making HTTP requests to the endpoints. The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application."
msgstr ""

#: ./docs/8.x/passport.md:453
#: ./docs/8.x/passport.md:496
#: ./docs/9.x/passport.md:478
#: ./docs/9.x/passport.md:526
#: ./docs/10.x/passport.md:463
#: ./docs/10.x/passport.md:511
#: ./docs/11.x/passport.md:433
#: ./docs/11.x/passport.md:481
#: ./docs/master/passport.md:433
#: ./docs/master/passport.md:481
msgctxt "P"
msgid "This `/oauth/token` route will return a JSON response containing `access_token`, `refresh_token`, and `expires_in` attributes. The `expires_in` attribute contains the number of seconds until the access token expires."
msgstr ""

#: ./docs/8.x/passport.md:455
msgctxt "P"
msgid "Like the `/oauth/authorize` route, the `/oauth/token` route is defined for you by the `Passport::routes` method. There is no need to manually define this route."
msgstr ""

#: ./docs/8.x/passport.md:457
#: ./docs/9.x/passport.md:483
#: ./docs/10.x/passport.md:468
#: ./docs/11.x/passport.md:438
#: ./docs/master/passport.md:438
#~ msgctxt "P"
#~ msgid "<a name=\"tokens-json-api\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:460
#: ./docs/9.x/passport.md:486
#: ./docs/10.x/passport.md:471
#: ./docs/master/passport.md:441
msgctxt "P"
msgid "Passport also includes a JSON API for managing authorized access tokens. You may pair this with your own frontend to offer your users a dashboard for managing access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints. The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application."
msgstr ""

#: ./docs/8.x/passport.md:462
#: ./docs/9.x/passport.md:488
#: ./docs/10.x/passport.md:473
#: ./docs/11.x/passport.md:443
#: ./docs/master/passport.md:443
#~ msgctxt "P"
#~ msgid "<a name=\"get-oauthtokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:463
#: ./docs/9.x/passport.md:489
#: ./docs/10.x/passport.md:474
#: ./docs/11.x/passport.md:444
#: ./docs/master/passport.md:444
msgctxt "H4"
msgid "`GET /oauth/tokens`"
msgstr ""

#: ./docs/8.x/passport.md:465
#: ./docs/9.x/passport.md:491
#: ./docs/10.x/passport.md:476
#: ./docs/11.x/passport.md:446
#: ./docs/master/passport.md:446
msgctxt "P"
msgid "This route returns all of the authorized access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they can revoke them:"
msgstr ""

#: ./docs/8.x/passport.md:467
#: ./docs/9.x/passport.md:493
#: ./docs/10.x/passport.md:478
#: ./docs/11.x/passport.md:448
#: ./docs/master/passport.md:448
msgctxt "CODE"
msgid "axios.get('/oauth/tokens')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:472
#: ./docs/9.x/passport.md:500
#: ./docs/10.x/passport.md:485
#: ./docs/11.x/passport.md:455
#: ./docs/master/passport.md:455
#~ msgctxt "P"
#~ msgid "<a name=\"delete-oauthtokenstoken-id\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:473
#: ./docs/9.x/passport.md:501
#: ./docs/10.x/passport.md:486
#: ./docs/11.x/passport.md:456
#: ./docs/master/passport.md:456
msgctxt "H4"
msgid "`DELETE /oauth/tokens/{token-id}`"
msgstr ""

#: ./docs/8.x/passport.md:475
#: ./docs/9.x/passport.md:503
#: ./docs/10.x/passport.md:488
#: ./docs/11.x/passport.md:458
#: ./docs/master/passport.md:458
msgctxt "P"
msgid "This route may be used to revoke authorized access tokens and their related refresh tokens:"
msgstr ""

#: ./docs/8.x/passport.md:477
#: ./docs/9.x/passport.md:505
#: ./docs/10.x/passport.md:490
#: ./docs/11.x/passport.md:460
#: ./docs/master/passport.md:460
msgctxt "CODE"
msgid "axios.delete('/oauth/tokens/' + tokenId);"
msgstr ""

#: ./docs/8.x/passport.md:479
#: ./docs/9.x/passport.md:509
#: ./docs/10.x/passport.md:494
#: ./docs/11.x/passport.md:464
#: ./docs/master/passport.md:464
#~ msgctxt "P"
#~ msgid "<a name=\"refreshing-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:480
#: ./docs/9.x/passport.md:510
#: ./docs/10.x/passport.md:495
#: ./docs/11.x/passport.md:465
#: ./docs/master/passport.md:465
msgctxt "H3"
msgid "Refreshing Tokens"
msgstr ""

#: ./docs/9.x/passport.md:481
#: ./docs/10.x/passport.md:466
#: ./docs/11.x/passport.md:436
#: ./docs/master/passport.md:436
msgctxt "P"
msgid "Like the `/oauth/authorize` route, the `/oauth/token` route is defined for you by Passport. There is no need to manually define this route."
msgstr ""

#: ./docs/8.x/passport.md:482
#: ./docs/9.x/passport.md:512
#: ./docs/10.x/passport.md:497
#: ./docs/11.x/passport.md:467
#: ./docs/master/passport.md:467
msgctxt "P"
msgid "If your application issues short-lived access tokens, users will need to refresh their access tokens via the refresh token that was provided to them when the access token was issued:"
msgstr ""

#: ./docs/8.x/passport.md:484
#: ./docs/9.x/passport.md:514
#: ./docs/10.x/passport.md:499
#: ./docs/11.x/passport.md:469
#: ./docs/master/passport.md:469
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'refresh_token',\n"
"    'refresh_token' => 'the-refresh-token',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'scope' => '',\n"
"]);\n\n"
"return $response->json();"
msgstr ""

#: ./docs/8.x/passport.md:498
#: ./docs/9.x/passport.md:528
#: ./docs/10.x/passport.md:513
#: ./docs/11.x/passport.md:483
#: ./docs/master/passport.md:483
#~ msgctxt "P"
#~ msgid "<a name=\"revoking-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:499
#: ./docs/9.x/passport.md:529
#: ./docs/10.x/passport.md:514
#: ./docs/11.x/passport.md:484
#: ./docs/master/passport.md:484
msgctxt "H3"
msgid "Revoking Tokens"
msgstr ""

#: ./docs/8.x/passport.md:501
#: ./docs/9.x/passport.md:531
#: ./docs/10.x/passport.md:516
#: ./docs/11.x/passport.md:486
#: ./docs/master/passport.md:486
msgctxt "P"
msgid "You may revoke a token by using the `revokeAccessToken` method on the `Laravel\\Passport\\TokenRepository`. You may revoke a token's refresh tokens using the `revokeRefreshTokensByAccessTokenId` method on the `Laravel\\Passport\\RefreshTokenRepository`. These classes may be resolved using Laravel's [service container](/docs/{{version}}/container):"
msgstr ""

#: ./docs/8.x/passport.md:503
#: ./docs/9.x/passport.md:533
#: ./docs/10.x/passport.md:518
#: ./docs/11.x/passport.md:488
#: ./docs/master/passport.md:488
msgctxt "CODE"
msgid "use Laravel\\Passport\\TokenRepository;\n"
"use Laravel\\Passport\\RefreshTokenRepository;\n\n"
"$tokenRepository = app(TokenRepository::class);\n"
"$refreshTokenRepository = app(RefreshTokenRepository::class);\n\n"
"// Revoke an access token...\n"
"$tokenRepository->revokeAccessToken($tokenId);\n\n"
"// Revoke all of the token's refresh tokens...\n"
"$refreshTokenRepository->revokeRefreshTokensByAccessTokenId($tokenId);"
msgstr ""

#: ./docs/8.x/passport.md:515
#: ./docs/9.x/passport.md:545
#: ./docs/10.x/passport.md:530
#: ./docs/11.x/passport.md:500
#: ./docs/master/passport.md:500
#~ msgctxt "P"
#~ msgid "<a name=\"purging-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:516
#: ./docs/9.x/passport.md:546
#: ./docs/10.x/passport.md:531
#: ./docs/11.x/passport.md:501
#: ./docs/master/passport.md:501
msgctxt "H3"
msgid "Purging Tokens"
msgstr ""

#: ./docs/8.x/passport.md:518
#: ./docs/9.x/passport.md:548
#: ./docs/10.x/passport.md:533
#: ./docs/11.x/passport.md:503
#: ./docs/master/passport.md:503
msgctxt "P"
msgid "When tokens have been revoked or expired, you might want to purge them from the database. Passport's included `passport:purge` Artisan command can do this for you:"
msgstr ""

#: ./docs/11.x/passport.md:519
#: ./docs/master/passport.md:519
msgctxt "P"
msgid "You may also configure a [scheduled job](/docs/{{version}}/scheduling) in your application's `routes/console.php` file to automatically prune your tokens on a schedule:"
msgstr ""

#: ./docs/8.x/passport.md:520
msgctxt "CODE"
msgid "# Purge revoked and expired tokens and auth codes...\n"
"php artisan passport:purge\n\n"
"# Only purge revoked tokens and auth codes...\n"
"php artisan passport:purge --revoked\n\n"
"# Only purge expired tokens and auth codes...\n"
"php artisan passport:purge --expired"
msgstr ""

#: ./docs/11.x/passport.md:521
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Schedule;\n\n"
"Schedule::command('passport:purge')->hourly();"
msgstr ""

#: ./docs/master/passport.md:521
msgctxt "CODE"
msgid "use Laravel\\Support\\Facades\\Schedule;\n\n"
"Schedule::command('passport:purge')->hourly();"
msgstr ""

#: ./docs/8.x/passport.md:529
#: ./docs/9.x/passport.md:564
#: ./docs/10.x/passport.md:549
msgctxt "P"
msgid "You may also configure a [scheduled job](/docs/{{version}}/scheduling) in your application's `App\\Console\\Kernel` class to automatically prune your tokens on a schedule:"
msgstr ""

#: ./docs/8.x/passport.md:531
#: ./docs/9.x/passport.md:566
msgctxt "CODE"
msgid "/**\n"
" * Define the application's command schedule.\n"
" *\n"
" * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
" * @return void\n"
" */\n"
"protected function schedule(Schedule $schedule)\n"
"{\n"
"    $schedule->command('passport:purge')->hourly();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:542
#: ./docs/9.x/passport.md:577
#: ./docs/10.x/passport.md:559
#: ./docs/11.x/passport.md:525
#: ./docs/master/passport.md:525
#~ msgctxt "P"
#~ msgid "<a name=\"code-grant-pkce\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:543
#: ./docs/9.x/passport.md:578
msgctxt "H2"
msgid "Authorization Code Grant with PKCE"
msgstr ""

#: ./docs/8.x/passport.md:545
#: ./docs/9.x/passport.md:580
#: ./docs/10.x/passport.md:562
#: ./docs/11.x/passport.md:528
#: ./docs/master/passport.md:528
msgctxt "P"
msgid "The Authorization Code grant with \"Proof Key for Code Exchange\" (PKCE) is a secure way to authenticate single page applications or native applications to access your API. This grant should be used when you can't guarantee that the client secret will be stored confidentially or in order to mitigate the threat of having the authorization code intercepted by an attacker. A combination of a \"code verifier\" and a \"code challenge\" replaces the client secret when exchanging the authorization code for an access token."
msgstr ""

#: ./docs/8.x/passport.md:547
#: ./docs/9.x/passport.md:582
#: ./docs/10.x/passport.md:564
#: ./docs/11.x/passport.md:530
#: ./docs/master/passport.md:530
#~ msgctxt "P"
#~ msgid "<a name=\"creating-a-auth-pkce-grant-client\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:548
#: ./docs/9.x/passport.md:583
msgctxt "H3"
msgid "Creating The Client"
msgstr ""

#: ./docs/8.x/passport.md:550
#: ./docs/9.x/passport.md:585
#: ./docs/10.x/passport.md:567
#: ./docs/11.x/passport.md:533
#: ./docs/master/passport.md:533
msgctxt "P"
msgid "Before your application can issue tokens via the authorization code grant with PKCE, you will need to create a PKCE-enabled client. You may do this using the `passport:client` Artisan command with the `--public` option:"
msgstr ""

#: ./docs/9.x/passport.md:550
#: ./docs/10.x/passport.md:535
#: ./docs/11.x/passport.md:505
#: ./docs/master/passport.md:505
msgctxt "CODE: shell"
msgid "# Purge revoked and expired tokens and auth codes...\n"
"php artisan passport:purge\n\n"
"# Only purge tokens expired for more than 6 hours...\n"
"php artisan passport:purge --hours=6\n\n"
"# Only purge revoked tokens and auth codes...\n"
"php artisan passport:purge --revoked\n\n"
"# Only purge expired tokens and auth codes...\n"
"php artisan passport:purge --expired"
msgstr ""

#: ./docs/10.x/passport.md:551
msgctxt "CODE"
msgid "/**\n"
" * Define the application's command schedule.\n"
" */\n"
"protected function schedule(Schedule $schedule): void\n"
"{\n"
"    $schedule->command('passport:purge')->hourly();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:552
#: ./docs/9.x/passport.md:587
#: ./docs/10.x/passport.md:569
#: ./docs/11.x/passport.md:535
#: ./docs/master/passport.md:535
msgctxt "CODE"
msgid "php artisan passport:client --public"
msgstr ""

#: ./docs/8.x/passport.md:554
#: ./docs/9.x/passport.md:591
#: ./docs/10.x/passport.md:573
#: ./docs/11.x/passport.md:539
#: ./docs/master/passport.md:539
#~ msgctxt "P"
#~ msgid "<a name=\"requesting-auth-pkce-grant-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:557
#: ./docs/9.x/passport.md:594
#: ./docs/10.x/passport.md:576
#: ./docs/11.x/passport.md:542
#: ./docs/master/passport.md:542
#~ msgctxt "P"
#~ msgid "<a name=\"code-verifier-code-challenge\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:558
#: ./docs/9.x/passport.md:595
msgctxt "H4"
msgid "Code Verifier & Code Challenge"
msgstr ""

#: ./docs/10.x/passport.md:560
#: ./docs/11.x/passport.md:526
#: ./docs/master/passport.md:526
msgctxt "H2"
msgid "Authorization Code Grant With PKCE"
msgstr ""

#: ./docs/8.x/passport.md:560
#: ./docs/9.x/passport.md:597
#: ./docs/10.x/passport.md:579
#: ./docs/11.x/passport.md:545
#: ./docs/master/passport.md:545
msgctxt "P"
msgid "As this authorization grant does not provide a client secret, developers will need to generate a combination of a code verifier and a code challenge in order to request a token."
msgstr ""

#: ./docs/8.x/passport.md:562
#: ./docs/9.x/passport.md:599
#: ./docs/10.x/passport.md:581
#: ./docs/11.x/passport.md:547
#: ./docs/master/passport.md:547
msgctxt "P"
msgid "The code verifier should be a random string of between 43 and 128 characters containing letters, numbers, and  `\"-\"`, `\".\"`, `\"_\"`, `\"~\"` characters, as defined in the [RFC 7636 specification](https://tools.ietf.org/html/rfc7636)."
msgstr ""

#: ./docs/8.x/passport.md:564
#: ./docs/9.x/passport.md:601
#: ./docs/10.x/passport.md:583
#: ./docs/11.x/passport.md:549
#: ./docs/master/passport.md:549
msgctxt "P"
msgid "The code challenge should be a Base64 encoded string with URL and filename-safe characters. The trailing `'='` characters should be removed and no line breaks, whitespace, or other additional characters should be present."
msgstr ""

#: ./docs/10.x/passport.md:565
#: ./docs/11.x/passport.md:531
#: ./docs/master/passport.md:531
msgctxt "H3"
msgid "Creating the Client"
msgstr ""

#: ./docs/8.x/passport.md:566
#: ./docs/9.x/passport.md:603
#: ./docs/10.x/passport.md:585
#: ./docs/11.x/passport.md:551
#: ./docs/master/passport.md:551
msgctxt "CODE"
msgid "$encoded = base64_encode(hash('sha256', $code_verifier, true));\n\n"
"$codeChallenge = strtr(rtrim($encoded, '='), '+/', '-_');"
msgstr ""

#: ./docs/8.x/passport.md:570
#: ./docs/9.x/passport.md:607
#: ./docs/10.x/passport.md:589
#: ./docs/11.x/passport.md:555
#: ./docs/master/passport.md:555
#~ msgctxt "P"
#~ msgid "<a name=\"code-grant-pkce-redirecting-for-authorization\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:573
#: ./docs/9.x/passport.md:610
#: ./docs/10.x/passport.md:592
#: ./docs/11.x/passport.md:558
#: ./docs/master/passport.md:558
msgctxt "P"
msgid "Once a client has been created, you may use the client ID and the generated code verifier and code challenge to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route:"
msgstr ""

#: ./docs/8.x/passport.md:575
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $request->session()->put(\n"
"        'code_verifier', $code_verifier = Str::random(128)\n"
"    );\n\n"
"    $codeChallenge = strtr(rtrim(\n"
"        base64_encode(hash('sha256', $code_verifier, true))\n"
"    , '='), '+/', '-_');\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        'code_challenge' => $codeChallenge,\n"
"        'code_challenge_method' => 'S256',\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/10.x/passport.md:577
#: ./docs/11.x/passport.md:543
#: ./docs/master/passport.md:543
msgctxt "H4"
msgid "Code Verifier and Code Challenge"
msgstr ""

#: ./docs/8.x/passport.md:602
#: ./docs/9.x/passport.md:640
#: ./docs/10.x/passport.md:622
#: ./docs/11.x/passport.md:588
#: ./docs/master/passport.md:588
#~ msgctxt "P"
#~ msgid "<a name=\"code-grant-pkce-converting-authorization-codes-to-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:605
#: ./docs/9.x/passport.md:643
#: ./docs/10.x/passport.md:625
#: ./docs/11.x/passport.md:591
#: ./docs/master/passport.md:591
msgctxt "P"
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should verify the `state` parameter against the value that was stored prior to the redirect, as in the standard Authorization Code Grant."
msgstr ""

#: ./docs/8.x/passport.md:607
#: ./docs/9.x/passport.md:645
#: ./docs/10.x/passport.md:627
#: ./docs/11.x/passport.md:593
#: ./docs/master/passport.md:593
msgctxt "P"
msgid "If the state parameter matches, the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request along with the originally generated code verifier:"
msgstr ""

#: ./docs/8.x/passport.md:609
#: ./docs/9.x/passport.md:647
#: ./docs/10.x/passport.md:629
#: ./docs/11.x/passport.md:595
#: ./docs/master/passport.md:595
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Http;\n\n"
"Route::get('/callback', function (Request $request) {\n"
"    $state = $request->session()->pull('state');\n\n"
"    $codeVerifier = $request->session()->pull('code_verifier');\n\n"
"    throw_unless(\n"
"        strlen($state) > 0 && $state === $request->state,\n"
"        InvalidArgumentException::class\n"
"    );\n\n"
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'authorization_code',\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'code_verifier' => $codeVerifier,\n"
"        'code' => $request->code,\n"
"    ]);\n\n"
"    return $response->json();\n"
"});"
msgstr ""

#: ./docs/9.x/passport.md:612
#: ./docs/10.x/passport.md:594
#: ./docs/11.x/passport.md:560
#: ./docs/master/passport.md:560
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $request->session()->put(\n"
"        'code_verifier', $code_verifier = Str::random(128)\n"
"    );\n\n"
"    $codeChallenge = strtr(rtrim(\n"
"        base64_encode(hash('sha256', $code_verifier, true))\n"
"    , '='), '+/', '-_');\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        'code_challenge' => $codeChallenge,\n"
"        'code_challenge_method' => 'S256',\n"
"        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/11.x/passport.md:627
#: ./docs/master/passport.md:627
msgctxt "P"
msgid "To enable the password grant, call the `enablePasswordGrant` method in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/11.x/passport.md:629
#: ./docs/master/passport.md:629
msgctxt "CODE"
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::enablePasswordGrant();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:633
#: ./docs/9.x/passport.md:671
#: ./docs/10.x/passport.md:653
#: ./docs/11.x/passport.md:619
#: ./docs/master/passport.md:619
#~ msgctxt "P"
#~ msgid "<a name=\"password-grant-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:634
#: ./docs/9.x/passport.md:672
#: ./docs/10.x/passport.md:654
#: ./docs/11.x/passport.md:620
#: ./docs/master/passport.md:620
msgctxt "H2"
msgid "Password Grant Tokens"
msgstr ""

#: ./docs/8.x/passport.md:636
#: ./docs/9.x/passport.md:675
#: ./docs/10.x/passport.md:657
#: ./docs/11.x/passport.md:623
#: ./docs/master/passport.md:623
msgctxt "P"
msgid "We no longer recommend using password grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/)."
msgstr ""

#: ./docs/8.x/passport.md:638
#: ./docs/9.x/passport.md:677
#: ./docs/10.x/passport.md:659
#: ./docs/11.x/passport.md:625
#: ./docs/master/passport.md:625
msgctxt "P"
msgid "The OAuth2 password grant allows your other first-party clients, such as a mobile application, to obtain an access token using an email address / username and password. This allows you to issue access tokens securely to your first-party clients without requiring your users to go through the entire OAuth2 authorization code redirect flow."
msgstr ""

#: ./docs/8.x/passport.md:640
#: ./docs/9.x/passport.md:679
#: ./docs/10.x/passport.md:661
#: ./docs/11.x/passport.md:637
#: ./docs/master/passport.md:637
#~ msgctxt "P"
#~ msgid "<a name=\"creating-a-password-grant-client\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:641
#: ./docs/9.x/passport.md:680
msgctxt "H3"
msgid "Creating A Password Grant Client"
msgstr ""

#: ./docs/8.x/passport.md:643
#: ./docs/9.x/passport.md:682
#: ./docs/10.x/passport.md:664
#: ./docs/11.x/passport.md:640
#: ./docs/master/passport.md:640
msgctxt "P"
msgid "Before your application can issue tokens via the password grant, you will need to create a password grant client. You may do this using the `passport:client` Artisan command with the `--password` option. **If you have already run the `passport:install` command, you do not need to run this command:**"
msgstr ""

#: ./docs/8.x/passport.md:645
#: ./docs/9.x/passport.md:684
#: ./docs/10.x/passport.md:666
#: ./docs/11.x/passport.md:642
#: ./docs/master/passport.md:642
msgctxt "CODE"
msgid "php artisan passport:client --password"
msgstr ""

#: ./docs/8.x/passport.md:647
#: ./docs/9.x/passport.md:688
#: ./docs/10.x/passport.md:670
#: ./docs/11.x/passport.md:646
#: ./docs/master/passport.md:646
#~ msgctxt "P"
#~ msgid "<a name=\"requesting-password-grant-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:650
msgctxt "P"
msgid "Once you have created a password grant client, you may request an access token by issuing a `POST` request to the `/oauth/token` route with the user's email address and password. Remember, this route is already registered by the `Passport::routes` method so there is no need to define it manually. If the request is successful, you will receive an `access_token` and `refresh_token` in the JSON response from the server:"
msgstr ""

#: ./docs/8.x/passport.md:652
#: ./docs/9.x/passport.md:693
#: ./docs/10.x/passport.md:675
#: ./docs/11.x/passport.md:651
#: ./docs/master/passport.md:651
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'password',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'username' => 'taylor@laravel.com',\n"
"    'password' => 'my-password',\n"
"    'scope' => '',\n"
"]);\n\n"
"return $response->json();"
msgstr ""

#: ./docs/10.x/passport.md:662
#: ./docs/11.x/passport.md:638
#: ./docs/master/passport.md:638
msgctxt "H3"
msgid "Creating a Password Grant Client"
msgstr ""

#: ./docs/8.x/passport.md:665
#: ./docs/9.x/passport.md:707
#: ./docs/10.x/passport.md:689
#: ./docs/11.x/passport.md:665
#: ./docs/master/passport.md:665
msgctxt "P"
msgid "Remember, access tokens are long-lived by default. However, you are free to [configure your maximum access token lifetime](#configuration) if needed."
msgstr ""

#: ./docs/8.x/passport.md:667
#: ./docs/9.x/passport.md:709
#: ./docs/10.x/passport.md:691
#: ./docs/11.x/passport.md:667
#: ./docs/master/passport.md:667
#~ msgctxt "P"
#~ msgid "<a name=\"requesting-all-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:668
#: ./docs/9.x/passport.md:710
#: ./docs/10.x/passport.md:692
#: ./docs/11.x/passport.md:668
#: ./docs/master/passport.md:668
msgctxt "H3"
msgid "Requesting All Scopes"
msgstr ""

#: ./docs/8.x/passport.md:670
#: ./docs/9.x/passport.md:712
#: ./docs/10.x/passport.md:694
#: ./docs/11.x/passport.md:670
#: ./docs/master/passport.md:670
msgctxt "P"
msgid "When using the password grant or client credentials grant, you may wish to authorize the token for all of the scopes supported by your application. You can do this by requesting the `*` scope. If you request the `*` scope, the `can` method on the token instance will always return `true`. This scope may only be assigned to a token that is issued using the `password` or `client_credentials` grant:"
msgstr ""

#: ./docs/8.x/passport.md:672
#: ./docs/9.x/passport.md:714
#: ./docs/10.x/passport.md:696
#: ./docs/11.x/passport.md:672
#: ./docs/master/passport.md:672
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'password',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'username' => 'taylor@laravel.com',\n"
"    'password' => 'my-password',\n"
"    'scope' => '*',\n"
"]);"
msgstr ""

#: ./docs/8.x/passport.md:683
#: ./docs/9.x/passport.md:725
#: ./docs/10.x/passport.md:707
#: ./docs/11.x/passport.md:683
#: ./docs/master/passport.md:683
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-user-provider\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:684
#: ./docs/9.x/passport.md:726
msgctxt "H3"
msgid "Customizing The User Provider"
msgstr ""

#: ./docs/8.x/passport.md:686
#: ./docs/9.x/passport.md:728
#: ./docs/10.x/passport.md:710
#: ./docs/11.x/passport.md:686
#: ./docs/master/passport.md:686
msgctxt "P"
msgid "If your application uses more than one [authentication user provider](/docs/{{version}}/authentication#introduction), you may specify which user provider the password grant client uses by providing a `--provider` option when creating the client via the `artisan passport:client --password` command. The given provider name should match a valid provider defined in your application's `config/auth.php` configuration file. You can then [protect your route using middleware](#via-middleware) to ensure that only users from the guard's specified provider are authorized."
msgstr ""

#: ./docs/8.x/passport.md:688
#: ./docs/9.x/passport.md:730
#: ./docs/10.x/passport.md:712
#: ./docs/11.x/passport.md:688
#: ./docs/master/passport.md:688
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-username-field\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:689
#: ./docs/9.x/passport.md:731
msgctxt "H3"
msgid "Customizing The Username Field"
msgstr ""

#: ./docs/8.x/passport.md:691
#: ./docs/9.x/passport.md:733
#: ./docs/10.x/passport.md:715
#: ./docs/11.x/passport.md:691
#: ./docs/master/passport.md:691
msgctxt "P"
msgid "When authenticating using the password grant, Passport will use the `email` attribute of your authenticatable model as the \"username\". However, you may customize this behavior by defining a `findForPassport` method on your model:"
msgstr ""

#: ./docs/9.x/passport.md:691
#: ./docs/10.x/passport.md:673
#: ./docs/11.x/passport.md:649
#: ./docs/master/passport.md:649
msgctxt "P"
msgid "Once you have created a password grant client, you may request an access token by issuing a `POST` request to the `/oauth/token` route with the user's email address and password. Remember, this route is already registered by Passport so there is no need to define it manually. If the request is successful, you will receive an `access_token` and `refresh_token` in the JSON response from the server:"
msgstr ""

#: ./docs/8.x/passport.md:693
#: ./docs/9.x/passport.md:735
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Find the user instance for the given username.\n"
"     *\n"
"     * @param  string  $username\n"
"     * @return \\App\\Models\\User\n"
"     */\n"
"    public function findForPassport($username)\n"
"    {\n"
"        return $this->where('username', $username)->first();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/passport.md:708
#: ./docs/11.x/passport.md:684
#: ./docs/master/passport.md:684
msgctxt "H3"
msgid "Customizing the User Provider"
msgstr ""

#: ./docs/10.x/passport.md:713
#: ./docs/11.x/passport.md:689
#: ./docs/master/passport.md:689
msgctxt "H3"
msgid "Customizing the Username Field"
msgstr ""

#: ./docs/10.x/passport.md:717
#: ./docs/11.x/passport.md:693
#: ./docs/master/passport.md:693
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Find the user instance for the given username.\n"
"     */\n"
"    public function findForPassport(string $username): User\n"
"    {\n"
"        return $this->where('username', $username)->first();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:717
#: ./docs/9.x/passport.md:759
#: ./docs/10.x/passport.md:738
#: ./docs/11.x/passport.md:714
#: ./docs/master/passport.md:714
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-password-validation\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:718
#: ./docs/9.x/passport.md:760
msgctxt "H3"
msgid "Customizing The Password Validation"
msgstr ""

#: ./docs/8.x/passport.md:720
#: ./docs/9.x/passport.md:762
#: ./docs/10.x/passport.md:741
#: ./docs/11.x/passport.md:717
#: ./docs/master/passport.md:717
msgctxt "P"
msgid "When authenticating using the password grant, Passport will use the `password` attribute of your model to validate the given password. If your model does not have a `password` attribute or you wish to customize the password validation logic, you can define a `validateForPassportPasswordGrant` method on your model:"
msgstr ""

#: ./docs/8.x/passport.md:722
#: ./docs/9.x/passport.md:764
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Validate the password of the user for the Passport password grant.\n"
"     *\n"
"     * @param  string  $password\n"
"     * @return bool\n"
"     */\n"
"    public function validateForPassportPasswordGrant($password)\n"
"    {\n"
"        return Hash::check($password, $this->password);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/passport.md:739
#: ./docs/11.x/passport.md:715
#: ./docs/master/passport.md:715
msgctxt "H3"
msgid "Customizing the Password Validation"
msgstr ""

#: ./docs/10.x/passport.md:743
#: ./docs/11.x/passport.md:719
#: ./docs/master/passport.md:719
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Passport\\HasApiTokens;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasApiTokens, Notifiable;\n\n"
"    /**\n"
"     * Validate the password of the user for the Passport password grant.\n"
"     */\n"
"    public function validateForPassportPasswordGrant(string $password): bool\n"
"    {\n"
"        return Hash::check($password, $this->password);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:747
#: ./docs/master/passport.md:747
msgctxt "P"
msgid "The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored. To enable the grant, call the `enableImplicitGrant` method in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:747
#: ./docs/9.x/passport.md:789
#: ./docs/10.x/passport.md:765
#: ./docs/11.x/passport.md:741
#: ./docs/master/passport.md:741
#~ msgctxt "P"
#~ msgid "<a name=\"implicit-grant-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:748
#: ./docs/9.x/passport.md:790
#: ./docs/10.x/passport.md:766
#: ./docs/11.x/passport.md:742
#: ./docs/master/passport.md:742
msgctxt "H2"
msgid "Implicit Grant Tokens"
msgstr ""

#: ./docs/11.x/passport.md:749
#: ./docs/master/passport.md:749
msgctxt "CODE"
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::enableImplicitGrant();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:750
#: ./docs/9.x/passport.md:793
#: ./docs/10.x/passport.md:769
#: ./docs/11.x/passport.md:745
#: ./docs/master/passport.md:745
msgctxt "P"
msgid "We no longer recommend using implicit grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/)."
msgstr ""

#: ./docs/8.x/passport.md:752
#: ./docs/9.x/passport.md:795
#: ./docs/10.x/passport.md:771
msgctxt "P"
msgid "The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored. To enable the grant, call the `enableImplicitGrant` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:754
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::enableImplicitGrant();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:768
#: ./docs/9.x/passport.md:809
#: ./docs/10.x/passport.md:781
#: ./docs/11.x/passport.md:757
#: ./docs/master/passport.md:757
msgctxt "P"
msgid "Once the grant has been enabled, developers may use their client ID to request an access token from your application. The consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""

#: ./docs/8.x/passport.md:770
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'token',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/10.x/passport.md:773
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::enableImplicitGrant();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:788
#: ./docs/9.x/passport.md:831
#: ./docs/10.x/passport.md:803
#: ./docs/11.x/passport.md:779
#: ./docs/master/passport.md:779
#~ msgctxt "P"
#~ msgid "<a name=\"client-credentials-grant-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:789
#: ./docs/9.x/passport.md:832
#: ./docs/10.x/passport.md:804
#: ./docs/11.x/passport.md:780
#: ./docs/master/passport.md:780
msgctxt "H2"
msgid "Client Credentials Grant Tokens"
msgstr ""

#: ./docs/11.x/passport.md:790
#: ./docs/master/passport.md:790
msgctxt "P"
msgid "Next, to use this grant type, register a middleware alias for the `CheckClientCredentials` middleware. You may define middleware aliases in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/8.x/passport.md:791
#: ./docs/9.x/passport.md:834
#: ./docs/10.x/passport.md:806
#: ./docs/11.x/passport.md:782
#: ./docs/master/passport.md:782
msgctxt "P"
msgid "The client credentials grant is suitable for machine-to-machine authentication. For example, you might use this grant in a scheduled job which is performing maintenance tasks over an API."
msgstr ""

#: ./docs/11.x/passport.md:792
#: ./docs/master/passport.md:792
msgctxt "CODE"
msgid "use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->alias([\n"
"        'client' => CheckClientCredentials::class\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/passport.md:793
#: ./docs/9.x/passport.md:836
#: ./docs/10.x/passport.md:808
#: ./docs/11.x/passport.md:784
#: ./docs/master/passport.md:784
msgctxt "P"
msgid "Before your application can issue tokens via the client credentials grant, you will need to create a client credentials grant client. You may do this using the `--client` option of the `passport:client` Artisan command:"
msgstr ""

#: ./docs/8.x/passport.md:795
#: ./docs/9.x/passport.md:838
#: ./docs/10.x/passport.md:810
#: ./docs/11.x/passport.md:786
#: ./docs/master/passport.md:786
msgctxt "CODE"
msgid "php artisan passport:client --client"
msgstr ""

#: ./docs/8.x/passport.md:797
#: ./docs/9.x/passport.md:842
msgctxt "P"
msgid "Next, to use this grant type, you need to add the `CheckClientCredentials` middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#: ./docs/9.x/passport.md:797
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::enableImplicitGrant();\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:799
#: ./docs/9.x/passport.md:844
msgctxt "CODE"
msgid "use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n\n"
"protected $routeMiddleware = [\n"
"    'client' => CheckClientCredentials::class,\n"
"];"
msgstr ""

#: ./docs/8.x/passport.md:805
#: ./docs/9.x/passport.md:850
#: ./docs/10.x/passport.md:822
#: ./docs/11.x/passport.md:800
#: ./docs/master/passport.md:800
msgctxt "P"
msgid "Then, attach the middleware to a route:"
msgstr ""

#: ./docs/8.x/passport.md:807
#: ./docs/9.x/passport.md:852
#: ./docs/10.x/passport.md:824
#: ./docs/11.x/passport.md:802
#: ./docs/master/passport.md:802
msgctxt "CODE"
msgid "Route::get('/orders', function (Request $request) {\n"
"    ...\n"
"})->middleware('client');"
msgstr ""

#: ./docs/8.x/passport.md:811
#: ./docs/9.x/passport.md:856
#: ./docs/10.x/passport.md:828
#: ./docs/11.x/passport.md:806
#: ./docs/master/passport.md:806
msgctxt "P"
msgid "To restrict access to the route to specific scopes, you may provide a comma-delimited list of the required scopes when attaching the `client` middleware to the route:"
msgstr ""

#: ./docs/9.x/passport.md:811
#: ./docs/10.x/passport.md:783
#: ./docs/11.x/passport.md:759
#: ./docs/master/passport.md:759
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/redirect', function (Request $request) {\n"
"    $request->session()->put('state', $state = Str::random(40));\n\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://third-party-app.com/callback',\n"
"        'response_type' => 'token',\n"
"        'scope' => '',\n"
"        'state' => $state,\n"
"        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/8.x/passport.md:813
#: ./docs/9.x/passport.md:858
#: ./docs/10.x/passport.md:830
#: ./docs/11.x/passport.md:808
#: ./docs/master/passport.md:808
msgctxt "CODE"
msgid "Route::get('/orders', function (Request $request) {\n"
"    ...\n"
"})->middleware('client:check-status,your-scope');"
msgstr ""

#: ./docs/10.x/passport.md:814
msgctxt "P"
msgid "Next, to use this grant type, you may add the `CheckClientCredentials` middleware to the `$middlewareAliases` property of your application's `app/Http/Kernel.php` file:"
msgstr ""

#: ./docs/10.x/passport.md:816
msgctxt "CODE"
msgid "use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n\n"
"protected $middlewareAliases = [\n"
"    'client' => CheckClientCredentials::class,\n"
"];"
msgstr ""

#: ./docs/8.x/passport.md:817
#: ./docs/9.x/passport.md:862
#: ./docs/10.x/passport.md:834
#: ./docs/11.x/passport.md:812
#: ./docs/master/passport.md:812
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:818
#: ./docs/9.x/passport.md:863
#: ./docs/10.x/passport.md:835
#: ./docs/11.x/passport.md:813
#: ./docs/master/passport.md:813
msgctxt "H3"
msgid "Retrieving Tokens"
msgstr ""

#: ./docs/8.x/passport.md:820
#: ./docs/9.x/passport.md:865
#: ./docs/10.x/passport.md:837
#: ./docs/11.x/passport.md:815
#: ./docs/master/passport.md:815
msgctxt "P"
msgid "To retrieve a token using this grant type, make a request to the `oauth/token` endpoint:"
msgstr ""

#: ./docs/8.x/passport.md:822
#: ./docs/9.x/passport.md:867
#: ./docs/10.x/passport.md:839
#: ./docs/11.x/passport.md:817
#: ./docs/master/passport.md:817
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"    'grant_type' => 'client_credentials',\n"
"    'client_id' => 'client-id',\n"
"    'client_secret' => 'client-secret',\n"
"    'scope' => 'your-scope',\n"
"]);\n\n"
"return $response->json()['access_token'];"
msgstr ""

#: ./docs/8.x/passport.md:833
#: ./docs/9.x/passport.md:878
#: ./docs/10.x/passport.md:850
#: ./docs/11.x/passport.md:828
#: ./docs/master/passport.md:828
#~ msgctxt "P"
#~ msgid "<a name=\"personal-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:834
#: ./docs/9.x/passport.md:879
#: ./docs/10.x/passport.md:851
#: ./docs/11.x/passport.md:829
#: ./docs/master/passport.md:829
msgctxt "H2"
msgid "Personal Access Tokens"
msgstr ""

#: ./docs/8.x/passport.md:836
#: ./docs/9.x/passport.md:881
#: ./docs/10.x/passport.md:853
#: ./docs/11.x/passport.md:831
#: ./docs/master/passport.md:831
msgctxt "P"
msgid "Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow. Allowing users to issue tokens to themselves via your application's UI can be useful for allowing users to experiment with your API or may serve as a simpler approach to issuing access tokens in general."
msgstr ""

#: ./docs/8.x/passport.md:838
#: ./docs/9.x/passport.md:884
#: ./docs/10.x/passport.md:856
#: ./docs/11.x/passport.md:834
#: ./docs/master/passport.md:834
msgctxt "P"
msgid "If your application is primarily using Passport to issue personal access tokens, consider using [Laravel Sanctum](/docs/{{version}}/sanctum), Laravel's light-weight first-party library for issuing API access tokens."
msgstr ""

#: ./docs/8.x/passport.md:840
#: ./docs/9.x/passport.md:886
#: ./docs/10.x/passport.md:858
#: ./docs/11.x/passport.md:836
#: ./docs/master/passport.md:836
#~ msgctxt "P"
#~ msgid "<a name=\"creating-a-personal-access-client\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:841
#: ./docs/9.x/passport.md:887
msgctxt "H3"
msgid "Creating A Personal Access Client"
msgstr ""

#: ./docs/8.x/passport.md:843
#: ./docs/9.x/passport.md:889
#: ./docs/10.x/passport.md:861
#: ./docs/11.x/passport.md:839
#: ./docs/master/passport.md:839
msgctxt "P"
msgid "Before your application can issue personal access tokens, you will need to create a personal access client. You may do this by executing the `passport:client` Artisan command with the `--personal` option. If you have already run the `passport:install` command, you do not need to run this command:"
msgstr ""

#: ./docs/8.x/passport.md:845
#: ./docs/9.x/passport.md:891
#: ./docs/10.x/passport.md:863
#: ./docs/11.x/passport.md:841
#: ./docs/master/passport.md:841
msgctxt "CODE"
msgid "php artisan passport:client --personal"
msgstr ""

#: ./docs/8.x/passport.md:847
#: ./docs/9.x/passport.md:895
#: ./docs/10.x/passport.md:867
#: ./docs/11.x/passport.md:845
#: ./docs/master/passport.md:845
msgctxt "P"
msgid "After creating your personal access client, place the client's ID and plain-text secret value in your application's `.env` file:"
msgstr ""

#: ./docs/8.x/passport.md:849
#: ./docs/9.x/passport.md:897
#: ./docs/10.x/passport.md:869
#: ./docs/11.x/passport.md:847
#: ./docs/master/passport.md:847
msgctxt "CODE: bash"
msgid "PASSPORT_PERSONAL_ACCESS_CLIENT_ID=\"client-id-value\"\n"
"PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=\"unhashed-client-secret-value\""
msgstr ""

#: ./docs/8.x/passport.md:854
#: ./docs/9.x/passport.md:902
#: ./docs/10.x/passport.md:874
#: ./docs/11.x/passport.md:852
#: ./docs/master/passport.md:852
#~ msgctxt "P"
#~ msgid "<a name=\"managing-personal-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:855
#: ./docs/9.x/passport.md:903
#: ./docs/10.x/passport.md:875
#: ./docs/11.x/passport.md:853
#: ./docs/master/passport.md:853
msgctxt "H3"
msgid "Managing Personal Access Tokens"
msgstr ""

#: ./docs/8.x/passport.md:857
#: ./docs/9.x/passport.md:905
#: ./docs/10.x/passport.md:877
#: ./docs/11.x/passport.md:855
#: ./docs/master/passport.md:855
msgctxt "P"
msgid "Once you have created a personal access client, you may issue tokens for a given user using the `createToken` method on the `App\\Models\\User` model instance. The `createToken` method accepts the name of the token as its first argument and an optional array of [scopes](#token-scopes) as its second argument:"
msgstr ""

#: ./docs/10.x/passport.md:859
#: ./docs/11.x/passport.md:837
#: ./docs/master/passport.md:837
msgctxt "H3"
msgid "Creating a Personal Access Client"
msgstr ""

#: ./docs/8.x/passport.md:859
#: ./docs/9.x/passport.md:907
#: ./docs/10.x/passport.md:879
#: ./docs/11.x/passport.md:857
#: ./docs/master/passport.md:857
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"// Creating a token without scopes...\n"
"$token = $user->createToken('Token Name')->accessToken;\n\n"
"// Creating a token with scopes...\n"
"$token = $user->createToken('My Token', ['place-orders'])->accessToken;"
msgstr ""

#: ./docs/8.x/passport.md:869
#: ./docs/9.x/passport.md:917
#: ./docs/10.x/passport.md:889
#: ./docs/11.x/passport.md:867
#: ./docs/master/passport.md:867
#~ msgctxt "P"
#~ msgid "<a name=\"personal-access-tokens-json-api\"></a>"
#~ msgstr ""

#: ./docs/11.x/passport.md:870
msgctxt "P"
msgid "Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a dashboard for managing personal access tokens. Below, we'll review all of the API endpoints for managing personal access tokens. For convenience, we'll use [Axios](https://github.com/axios/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#: ./docs/8.x/passport.md:872
#: ./docs/9.x/passport.md:920
#: ./docs/10.x/passport.md:892
#: ./docs/master/passport.md:870
msgctxt "P"
msgid "Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a dashboard for managing personal access tokens. Below, we'll review all of the API endpoints for managing personal access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#: ./docs/8.x/passport.md:876
#: ./docs/9.x/passport.md:924
#: ./docs/10.x/passport.md:896
#: ./docs/11.x/passport.md:874
#: ./docs/master/passport.md:874
#~ msgctxt "P"
#~ msgid "<a name=\"get-oauthscopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:877
#: ./docs/9.x/passport.md:925
#: ./docs/10.x/passport.md:897
#: ./docs/11.x/passport.md:875
#: ./docs/master/passport.md:875
msgctxt "H4"
msgid "`GET /oauth/scopes`"
msgstr ""

#: ./docs/8.x/passport.md:879
#: ./docs/9.x/passport.md:927
#: ./docs/10.x/passport.md:899
#: ./docs/11.x/passport.md:877
#: ./docs/master/passport.md:877
msgctxt "P"
msgid "This route returns all of the [scopes](#token-scopes) defined for your application. You may use this route to list the scopes a user may assign to a personal access token:"
msgstr ""

#: ./docs/8.x/passport.md:881
#: ./docs/9.x/passport.md:929
#: ./docs/10.x/passport.md:901
#: ./docs/11.x/passport.md:879
#: ./docs/master/passport.md:879
msgctxt "CODE"
msgid "axios.get('/oauth/scopes')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:886
#: ./docs/9.x/passport.md:936
#: ./docs/10.x/passport.md:908
#: ./docs/11.x/passport.md:886
#: ./docs/master/passport.md:886
#~ msgctxt "P"
#~ msgid "<a name=\"get-oauthpersonal-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:887
#: ./docs/9.x/passport.md:937
#: ./docs/10.x/passport.md:909
#: ./docs/11.x/passport.md:887
#: ./docs/master/passport.md:887
msgctxt "H4"
msgid "`GET /oauth/personal-access-tokens`"
msgstr ""

#: ./docs/8.x/passport.md:889
#: ./docs/9.x/passport.md:939
#: ./docs/10.x/passport.md:911
#: ./docs/11.x/passport.md:889
#: ./docs/master/passport.md:889
msgctxt "P"
msgid "This route returns all of the personal access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they may edit or revoke them:"
msgstr ""

#: ./docs/8.x/passport.md:891
#: ./docs/9.x/passport.md:941
#: ./docs/10.x/passport.md:913
#: ./docs/11.x/passport.md:891
#: ./docs/master/passport.md:891
msgctxt "CODE"
msgid "axios.get('/oauth/personal-access-tokens')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:896
#: ./docs/9.x/passport.md:948
#: ./docs/10.x/passport.md:920
#: ./docs/11.x/passport.md:898
#: ./docs/master/passport.md:898
#~ msgctxt "P"
#~ msgid "<a name=\"post-oauthpersonal-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:897
#: ./docs/9.x/passport.md:949
#: ./docs/10.x/passport.md:921
#: ./docs/11.x/passport.md:899
#: ./docs/master/passport.md:899
msgctxt "H4"
msgid "`POST /oauth/personal-access-tokens`"
msgstr ""

#: ./docs/8.x/passport.md:899
#: ./docs/9.x/passport.md:951
#: ./docs/10.x/passport.md:923
#: ./docs/11.x/passport.md:901
#: ./docs/master/passport.md:901
msgctxt "P"
msgid "This route creates new personal access tokens. It requires two pieces of data: the token's `name` and the `scopes` that should be assigned to the token:"
msgstr ""

#: ./docs/8.x/passport.md:901
#: ./docs/9.x/passport.md:953
#: ./docs/10.x/passport.md:925
#: ./docs/11.x/passport.md:903
#: ./docs/master/passport.md:903
msgctxt "CODE"
msgid "const data = {\n"
"    name: 'Token Name',\n"
"    scopes: []\n"
"};\n\n"
"axios.post('/oauth/personal-access-tokens', data)\n"
"    .then(response => {\n"
"        console.log(response.data.accessToken);\n"
"    })\n"
"    .catch (response => {\n"
"        // List errors on response...\n"
"    });"
msgstr ""

#: ./docs/8.x/passport.md:914
#: ./docs/9.x/passport.md:968
#: ./docs/10.x/passport.md:940
#: ./docs/11.x/passport.md:918
#: ./docs/master/passport.md:918
#~ msgctxt "P"
#~ msgid "<a name=\"delete-oauthpersonal-access-tokenstoken-id\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:915
#: ./docs/9.x/passport.md:969
#: ./docs/10.x/passport.md:941
#: ./docs/11.x/passport.md:919
#: ./docs/master/passport.md:919
msgctxt "H4"
msgid "`DELETE /oauth/personal-access-tokens/{token-id}`"
msgstr ""

#: ./docs/8.x/passport.md:917
#: ./docs/9.x/passport.md:971
#: ./docs/10.x/passport.md:943
#: ./docs/11.x/passport.md:921
#: ./docs/master/passport.md:921
msgctxt "P"
msgid "This route may be used to revoke personal access tokens:"
msgstr ""

#: ./docs/8.x/passport.md:919
#: ./docs/9.x/passport.md:973
#: ./docs/10.x/passport.md:945
#: ./docs/11.x/passport.md:923
#: ./docs/master/passport.md:923
msgctxt "CODE"
msgid "axios.delete('/oauth/personal-access-tokens/' + tokenId);"
msgstr ""

#: ./docs/8.x/passport.md:921
#: ./docs/9.x/passport.md:977
#: ./docs/10.x/passport.md:949
#: ./docs/11.x/passport.md:927
#: ./docs/master/passport.md:927
#~ msgctxt "P"
#~ msgid "<a name=\"protecting-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:922
#: ./docs/9.x/passport.md:978
#: ./docs/10.x/passport.md:950
#: ./docs/11.x/passport.md:928
#: ./docs/master/passport.md:928
msgctxt "H2"
msgid "Protecting Routes"
msgstr ""

#: ./docs/8.x/passport.md:924
#: ./docs/9.x/passport.md:980
#: ./docs/10.x/passport.md:952
#: ./docs/11.x/passport.md:930
#: ./docs/master/passport.md:930
#~ msgctxt "P"
#~ msgid "<a name=\"via-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:925
#: ./docs/9.x/passport.md:981
#: ./docs/10.x/passport.md:953
#: ./docs/11.x/passport.md:931
#: ./docs/master/passport.md:931
msgctxt "H3"
msgid "Via Middleware"
msgstr ""

#: ./docs/8.x/passport.md:927
#: ./docs/9.x/passport.md:983
#: ./docs/10.x/passport.md:955
#: ./docs/11.x/passport.md:933
#: ./docs/master/passport.md:933
msgctxt "P"
msgid "Passport includes an [authentication guard](/docs/{{version}}/authentication#adding-custom-guards) that will validate access tokens on incoming requests. Once you have configured the `api` guard to use the `passport` driver, you only need to specify the `auth:api` middleware on any routes that should require a valid access token:"
msgstr ""

#: ./docs/8.x/passport.md:929
#: ./docs/9.x/passport.md:985
msgctxt "CODE"
msgid "Route::get('/user', function () {\n"
"    //\n"
"})->middleware('auth:api');"
msgstr ""

#: ./docs/8.x/passport.md:933
#: ./docs/9.x/passport.md:990
#: ./docs/10.x/passport.md:962
#: ./docs/11.x/passport.md:940
#: ./docs/master/passport.md:940
msgctxt "P"
msgid "If you are using the [client credentials grant](#client-credentials-grant-tokens), you should use [the `client` middleware](#client-credentials-grant-tokens) to protect your routes instead of the `auth:api` middleware."
msgstr ""

#: ./docs/8.x/passport.md:935
#: ./docs/9.x/passport.md:992
#: ./docs/10.x/passport.md:964
#: ./docs/11.x/passport.md:942
#: ./docs/master/passport.md:942
#~ msgctxt "P"
#~ msgid "<a name=\"multiple-authentication-guards\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:936
#: ./docs/9.x/passport.md:993
#: ./docs/10.x/passport.md:965
#: ./docs/11.x/passport.md:943
#: ./docs/master/passport.md:943
msgctxt "H4"
msgid "Multiple Authentication Guards"
msgstr ""

#: ./docs/8.x/passport.md:938
#: ./docs/9.x/passport.md:995
#: ./docs/10.x/passport.md:967
#: ./docs/11.x/passport.md:945
#: ./docs/master/passport.md:945
msgctxt "P"
msgid "If your application authenticates different types of users that perhaps use entirely different Eloquent models, you will likely need to define a guard configuration for each user provider type in your application. This allows you to protect requests intended for specific user providers. For example, given the following guard configuration the `config/auth.php` configuration file:"
msgstr ""

#: ./docs/8.x/passport.md:940
#: ./docs/9.x/passport.md:997
#: ./docs/10.x/passport.md:969
#: ./docs/11.x/passport.md:947
#: ./docs/master/passport.md:947
msgctxt "CODE"
msgid "'api' => [\n"
"    'driver' => 'passport',\n"
"    'provider' => 'users',\n"
"],\n\n"
"'api-customers' => [\n"
"    'driver' => 'passport',\n"
"    'provider' => 'customers',\n"
"],"
msgstr ""

#: ./docs/8.x/passport.md:950
#: ./docs/9.x/passport.md:1007
#: ./docs/10.x/passport.md:979
#: ./docs/11.x/passport.md:957
#: ./docs/master/passport.md:957
msgctxt "P"
msgid "The following route will utilize the `api-customers` guard, which uses the `customers` user provider, to authenticate incoming requests:"
msgstr ""

#: ./docs/8.x/passport.md:952
#: ./docs/9.x/passport.md:1009
msgctxt "CODE"
msgid "Route::get('/customer', function () {\n"
"    //\n"
"})->middleware('auth:api-customers');"
msgstr ""

#: ./docs/8.x/passport.md:956
#: ./docs/9.x/passport.md:1014
#: ./docs/10.x/passport.md:986
#: ./docs/11.x/passport.md:964
#: ./docs/master/passport.md:964
msgctxt "P"
msgid "For more information on using multiple user providers with Passport, please consult the [password grant documentation](#customizing-the-user-provider)."
msgstr ""

#: ./docs/10.x/passport.md:957
#: ./docs/11.x/passport.md:935
#: ./docs/master/passport.md:935
msgctxt "CODE"
msgid "Route::get('/user', function () {\n"
"    // ...\n"
"})->middleware('auth:api');"
msgstr ""

#: ./docs/8.x/passport.md:958
#: ./docs/9.x/passport.md:1016
#: ./docs/10.x/passport.md:988
#: ./docs/11.x/passport.md:966
#: ./docs/master/passport.md:966
#~ msgctxt "P"
#~ msgid "<a name=\"passing-the-access-token\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:959
#: ./docs/9.x/passport.md:1017
msgctxt "H3"
msgid "Passing The Access Token"
msgstr ""

#: ./docs/8.x/passport.md:961
#: ./docs/9.x/passport.md:1019
#: ./docs/10.x/passport.md:991
#: ./docs/11.x/passport.md:969
#: ./docs/master/passport.md:969
msgctxt "P"
msgid "When calling routes that are protected by Passport, your application's API consumers should specify their access token as a `Bearer` token in the `Authorization` header of their request. For example, when using the Guzzle HTTP library:"
msgstr ""

#: ./docs/8.x/passport.md:963
#: ./docs/9.x/passport.md:1021
#: ./docs/10.x/passport.md:993
#: ./docs/11.x/passport.md:971
#: ./docs/master/passport.md:971
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Http;\n\n"
"$response = Http::withHeaders([\n"
"    'Accept' => 'application/json',\n"
"    'Authorization' => 'Bearer '.$accessToken,\n"
"])->get('https://passport-app.test/api/user');\n\n"
"return $response->json();"
msgstr ""

#: ./docs/8.x/passport.md:972
#: ./docs/9.x/passport.md:1030
#: ./docs/10.x/passport.md:1002
#: ./docs/11.x/passport.md:980
#: ./docs/master/passport.md:980
#~ msgctxt "P"
#~ msgid "<a name=\"token-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:973
#: ./docs/9.x/passport.md:1031
#: ./docs/10.x/passport.md:1003
#: ./docs/11.x/passport.md:981
#: ./docs/master/passport.md:981
msgctxt "H2"
msgid "Token Scopes"
msgstr ""

#: ./docs/8.x/passport.md:975
#: ./docs/9.x/passport.md:1033
#: ./docs/10.x/passport.md:1005
#: ./docs/11.x/passport.md:983
#: ./docs/master/passport.md:983
msgctxt "P"
msgid "Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. For example, if you are building an e-commerce application, not all API consumers will need the ability to place orders. Instead, you may allow the consumers to only request authorization to access order shipment statuses. In other words, scopes allow your application's users to limit the actions a third-party application can perform on their behalf."
msgstr ""

#: ./docs/8.x/passport.md:977
#: ./docs/9.x/passport.md:1035
#: ./docs/10.x/passport.md:1007
#: ./docs/11.x/passport.md:985
#: ./docs/master/passport.md:985
#~ msgctxt "P"
#~ msgid "<a name=\"defining-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:978
#: ./docs/9.x/passport.md:1036
#: ./docs/10.x/passport.md:1008
#: ./docs/11.x/passport.md:986
#: ./docs/master/passport.md:986
msgctxt "H3"
msgid "Defining Scopes"
msgstr ""

#: ./docs/8.x/passport.md:980
#: ./docs/9.x/passport.md:1038
#: ./docs/10.x/passport.md:1010
msgctxt "P"
msgid "You may define your API's scopes using the `Passport::tokensCan` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class. The `tokensCan` method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:"
msgstr ""

#: ./docs/10.x/passport.md:981
#: ./docs/11.x/passport.md:959
#: ./docs/master/passport.md:959
msgctxt "CODE"
msgid "Route::get('/customer', function () {\n"
"    // ...\n"
"})->middleware('auth:api-customers');"
msgstr ""

#: ./docs/8.x/passport.md:982
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:988
#: ./docs/master/passport.md:988
msgctxt "P"
msgid "You may define your API's scopes using the `Passport::tokensCan` method in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class. The `tokensCan` method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:"
msgstr ""

#: ./docs/10.x/passport.md:989
#: ./docs/11.x/passport.md:967
#: ./docs/master/passport.md:967
msgctxt "H3"
msgid "Passing the Access Token"
msgstr ""

#: ./docs/11.x/passport.md:990
#: ./docs/master/passport.md:990
msgctxt "CODE"
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:999
#: ./docs/9.x/passport.md:1055
#: ./docs/10.x/passport.md:1023
#: ./docs/11.x/passport.md:1001
#: ./docs/master/passport.md:1001
#~ msgctxt "P"
#~ msgid "<a name=\"default-scope\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1000
#: ./docs/9.x/passport.md:1056
#: ./docs/10.x/passport.md:1024
#: ./docs/11.x/passport.md:1002
#: ./docs/master/passport.md:1002
msgctxt "H3"
msgid "Default Scope"
msgstr ""

#: ./docs/8.x/passport.md:1002
#: ./docs/9.x/passport.md:1058
#: ./docs/10.x/passport.md:1026
msgctxt "P"
msgid "If a client does not request any specific scopes, you may configure your Passport server to attach default scope(s) to the token using the `setDefaultScope` method. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/11.x/passport.md:1004
#: ./docs/master/passport.md:1004
msgctxt "P"
msgid "If a client does not request any specific scopes, you may configure your Passport server to attach default scope(s) to the token using the `setDefaultScope` method. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:1004
#: ./docs/9.x/passport.md:1060
#: ./docs/10.x/passport.md:1028
#: ./docs/11.x/passport.md:1006
#: ./docs/master/passport.md:1006
msgctxt "CODE"
msgid "use Laravel\\Passport\\Passport;\n\n"
"Passport::tokensCan([\n"
"    'place-orders' => 'Place orders',\n"
"    'check-status' => 'Check order status',\n"
"]);\n\n"
"Passport::setDefaultScope([\n"
"    'check-status',\n"
"    'place-orders',\n"
"]);"
msgstr ""

#: ./docs/10.x/passport.md:1012
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:1016
#: ./docs/9.x/passport.md:1075
#: ./docs/10.x/passport.md:1043
#: ./docs/11.x/passport.md:1021
#: ./docs/master/passport.md:1021
#~ msgctxt "P"
#~ msgid "<a name=\"assigning-scopes-to-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1017
#: ./docs/9.x/passport.md:1076
msgctxt "H3"
msgid "Assigning Scopes To Tokens"
msgstr ""

#: ./docs/8.x/passport.md:1019
#: ./docs/9.x/passport.md:1078
#: ./docs/10.x/passport.md:1046
#: ./docs/11.x/passport.md:1024
#: ./docs/master/passport.md:1024
#~ msgctxt "P"
#~ msgid "<a name=\"when-requesting-authorization-codes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1020
#: ./docs/9.x/passport.md:1079
#: ./docs/10.x/passport.md:1047
#: ./docs/11.x/passport.md:1025
#: ./docs/master/passport.md:1025
msgctxt "H4"
msgid "When Requesting Authorization Codes"
msgstr ""

#: ./docs/8.x/passport.md:1022
#: ./docs/9.x/passport.md:1081
#: ./docs/10.x/passport.md:1049
#: ./docs/11.x/passport.md:1027
#: ./docs/master/passport.md:1027
msgctxt "P"
msgid "When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the `scope` query string parameter. The `scope` parameter should be a space-delimited list of scopes:"
msgstr ""

#: ./docs/8.x/passport.md:1024
#: ./docs/9.x/passport.md:1083
#: ./docs/10.x/passport.md:1051
#: ./docs/11.x/passport.md:1029
#: ./docs/master/passport.md:1029
msgctxt "CODE"
msgid "Route::get('/redirect', function () {\n"
"    $query = http_build_query([\n"
"        'client_id' => 'client-id',\n"
"        'redirect_uri' => 'http://example.com/callback',\n"
"        'response_type' => 'code',\n"
"        'scope' => 'place-orders check-status',\n"
"    ]);\n\n"
"    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"});"
msgstr ""

#: ./docs/8.x/passport.md:1035
#: ./docs/9.x/passport.md:1094
#: ./docs/10.x/passport.md:1062
#: ./docs/11.x/passport.md:1040
#: ./docs/master/passport.md:1040
#~ msgctxt "P"
#~ msgid "<a name=\"when-issuing-personal-access-tokens\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1036
#: ./docs/9.x/passport.md:1095
#: ./docs/10.x/passport.md:1063
#: ./docs/11.x/passport.md:1041
#: ./docs/master/passport.md:1041
msgctxt "H4"
msgid "When Issuing Personal Access Tokens"
msgstr ""

#: ./docs/8.x/passport.md:1038
#: ./docs/9.x/passport.md:1097
#: ./docs/10.x/passport.md:1065
#: ./docs/11.x/passport.md:1043
#: ./docs/master/passport.md:1043
msgctxt "P"
msgid "If you are issuing personal access tokens using the `App\\Models\\User` model's `createToken` method, you may pass the array of desired scopes as the second argument to the method:"
msgstr ""

#: ./docs/8.x/passport.md:1040
#: ./docs/9.x/passport.md:1099
#: ./docs/10.x/passport.md:1067
#: ./docs/11.x/passport.md:1045
#: ./docs/master/passport.md:1045
msgctxt "CODE"
msgid "$token = $user->createToken('My Token', ['place-orders'])->accessToken;"
msgstr ""

#: ./docs/9.x/passport.md:1040
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:1042
#: ./docs/9.x/passport.md:1101
#: ./docs/10.x/passport.md:1069
#: ./docs/11.x/passport.md:1047
#: ./docs/master/passport.md:1047
#~ msgctxt "P"
#~ msgid "<a name=\"checking-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1043
#: ./docs/9.x/passport.md:1102
#: ./docs/10.x/passport.md:1070
#: ./docs/11.x/passport.md:1048
#: ./docs/master/passport.md:1048
msgctxt "H3"
msgid "Checking Scopes"
msgstr ""

#: ./docs/10.x/passport.md:1044
#: ./docs/11.x/passport.md:1022
#: ./docs/master/passport.md:1022
msgctxt "H3"
msgid "Assigning Scopes to Tokens"
msgstr ""

#: ./docs/8.x/passport.md:1045
#: ./docs/9.x/passport.md:1104
msgctxt "P"
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#: ./docs/8.x/passport.md:1047
#: ./docs/9.x/passport.md:1106
#: ./docs/10.x/passport.md:1074
msgctxt "CODE"
msgid "'scopes' => \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n"
"'scope' => \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,"
msgstr ""

#: ./docs/11.x/passport.md:1050
#: ./docs/master/passport.md:1050
msgctxt "P"
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, define the following middleware aliases in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/8.x/passport.md:1050
#: ./docs/9.x/passport.md:1109
#: ./docs/10.x/passport.md:1077
#: ./docs/11.x/passport.md:1062
#: ./docs/master/passport.md:1062
#~ msgctxt "P"
#~ msgid "<a name=\"check-for-all-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1051
#: ./docs/9.x/passport.md:1110
#: ./docs/10.x/passport.md:1078
#: ./docs/11.x/passport.md:1063
#: ./docs/master/passport.md:1063
msgctxt "H4"
msgid "Check For All Scopes"
msgstr ""

#: ./docs/11.x/passport.md:1052
#: ./docs/master/passport.md:1052
msgctxt "CODE"
msgid "use Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope;\n"
"use Laravel\\Passport\\Http\\Middleware\\CheckScopes;\n\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->alias([\n"
"        'scopes' => CheckScopes::class,\n"
"        'scope' => CheckForAnyScope::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/passport.md:1053
#: ./docs/9.x/passport.md:1112
#: ./docs/10.x/passport.md:1080
#: ./docs/11.x/passport.md:1065
#: ./docs/master/passport.md:1065
msgctxt "P"
msgid "The `scopes` middleware may be assigned to a route to verify that the incoming request's access token has all of the listed scopes:"
msgstr ""

#: ./docs/8.x/passport.md:1055
#: ./docs/9.x/passport.md:1114
#: ./docs/10.x/passport.md:1082
#: ./docs/11.x/passport.md:1067
#: ./docs/master/passport.md:1067
msgctxt "CODE"
msgid "Route::get('/orders', function () {\n"
"    // Access token has both \"check-status\" and \"place-orders\" scopes...\n"
"})->middleware(['auth:api', 'scopes:check-status,place-orders']);"
msgstr ""

#: ./docs/8.x/passport.md:1059
#: ./docs/9.x/passport.md:1118
#: ./docs/10.x/passport.md:1086
#: ./docs/11.x/passport.md:1071
#: ./docs/master/passport.md:1071
#~ msgctxt "P"
#~ msgid "<a name=\"check-for-any-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1060
#: ./docs/9.x/passport.md:1119
msgctxt "H4"
msgid "Check For Any Scopes"
msgstr ""

#: ./docs/8.x/passport.md:1062
#: ./docs/9.x/passport.md:1121
#: ./docs/10.x/passport.md:1089
#: ./docs/11.x/passport.md:1074
#: ./docs/master/passport.md:1074
msgctxt "P"
msgid "The `scope` middleware may be assigned to a route to verify that the incoming request's access token has *at least one* of the listed scopes:"
msgstr ""

#: ./docs/8.x/passport.md:1064
#: ./docs/9.x/passport.md:1123
#: ./docs/10.x/passport.md:1091
#: ./docs/11.x/passport.md:1076
#: ./docs/master/passport.md:1076
msgctxt "CODE"
msgid "Route::get('/orders', function () {\n"
"    // Access token has either \"check-status\" or \"place-orders\" scope...\n"
"})->middleware(['auth:api', 'scope:check-status,place-orders']);"
msgstr ""

#: ./docs/8.x/passport.md:1068
#: ./docs/9.x/passport.md:1127
#: ./docs/10.x/passport.md:1095
#: ./docs/11.x/passport.md:1080
#: ./docs/master/passport.md:1080
#~ msgctxt "P"
#~ msgid "<a name=\"checking-scopes-on-a-token-instance\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1069
#: ./docs/9.x/passport.md:1128
msgctxt "H4"
msgid "Checking Scopes On A Token Instance"
msgstr ""

#: ./docs/8.x/passport.md:1071
#: ./docs/9.x/passport.md:1130
#: ./docs/10.x/passport.md:1098
#: ./docs/11.x/passport.md:1083
#: ./docs/master/passport.md:1083
msgctxt "P"
msgid "Once an access token authenticated request has entered your application, you may still check if the token has a given scope using the `tokenCan` method on the authenticated `App\\Models\\User` instance:"
msgstr ""

#: ./docs/10.x/passport.md:1072
msgctxt "P"
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the `$middlewareAliases` property of your `app/Http/Kernel.php` file:"
msgstr ""

#: ./docs/8.x/passport.md:1073
#: ./docs/9.x/passport.md:1132
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/orders', function (Request $request) {\n"
"    if ($request->user()->tokenCan('place-orders')) {\n"
"        //\n"
"    }\n"
"});"
msgstr ""

#: ./docs/9.x/passport.md:1073
#: ./docs/10.x/passport.md:1041
#: ./docs/11.x/passport.md:1019
#: ./docs/master/passport.md:1019
msgctxt "P"
msgid "Passport's default scopes do not apply to personal access tokens that are generated by the user."
msgstr ""

#: ./docs/8.x/passport.md:1081
#: ./docs/9.x/passport.md:1140
#: ./docs/10.x/passport.md:1108
#: ./docs/11.x/passport.md:1093
#: ./docs/master/passport.md:1093
#~ msgctxt "P"
#~ msgid "<a name=\"additional-scope-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1082
#: ./docs/9.x/passport.md:1141
#: ./docs/10.x/passport.md:1109
#: ./docs/11.x/passport.md:1094
#: ./docs/master/passport.md:1094
msgctxt "H4"
msgid "Additional Scope Methods"
msgstr ""

#: ./docs/8.x/passport.md:1084
#: ./docs/9.x/passport.md:1143
#: ./docs/10.x/passport.md:1111
#: ./docs/11.x/passport.md:1096
#: ./docs/master/passport.md:1096
msgctxt "P"
msgid "The `scopeIds` method will return an array of all defined IDs / names:"
msgstr ""

#: ./docs/8.x/passport.md:1086
#: ./docs/9.x/passport.md:1145
#: ./docs/10.x/passport.md:1113
#: ./docs/11.x/passport.md:1098
#: ./docs/master/passport.md:1098
msgctxt "CODE"
msgid "use Laravel\\Passport\\Passport;\n\n"
"Passport::scopeIds();"
msgstr ""

#: ./docs/10.x/passport.md:1087
#: ./docs/11.x/passport.md:1072
#: ./docs/master/passport.md:1072
msgctxt "H4"
msgid "Check for Any Scopes"
msgstr ""

#: ./docs/8.x/passport.md:1090
#: ./docs/9.x/passport.md:1149
#: ./docs/10.x/passport.md:1117
#: ./docs/11.x/passport.md:1102
#: ./docs/master/passport.md:1102
msgctxt "P"
msgid "The `scopes` method will return an array of all defined scopes as instances of `Laravel\\Passport\\Scope`:"
msgstr ""

#: ./docs/8.x/passport.md:1092
#: ./docs/9.x/passport.md:1151
#: ./docs/10.x/passport.md:1119
#: ./docs/11.x/passport.md:1104
#: ./docs/master/passport.md:1104
msgctxt "CODE"
msgid "Passport::scopes();"
msgstr ""

#: ./docs/8.x/passport.md:1094
#: ./docs/9.x/passport.md:1153
#: ./docs/10.x/passport.md:1121
#: ./docs/11.x/passport.md:1106
#: ./docs/master/passport.md:1106
msgctxt "P"
msgid "The `scopesFor` method will return an array of `Laravel\\Passport\\Scope` instances matching the given IDs / names:"
msgstr ""

#: ./docs/10.x/passport.md:1096
#: ./docs/11.x/passport.md:1081
#: ./docs/master/passport.md:1081
msgctxt "H4"
msgid "Checking Scopes on a Token Instance"
msgstr ""

#: ./docs/8.x/passport.md:1096
#: ./docs/9.x/passport.md:1155
#: ./docs/10.x/passport.md:1123
#: ./docs/11.x/passport.md:1108
#: ./docs/master/passport.md:1108
msgctxt "CODE"
msgid "Passport::scopesFor(['place-orders', 'check-status']);"
msgstr ""

#: ./docs/8.x/passport.md:1098
#: ./docs/9.x/passport.md:1157
#: ./docs/10.x/passport.md:1125
#: ./docs/11.x/passport.md:1110
#: ./docs/master/passport.md:1110
msgctxt "P"
msgid "You may determine if a given scope has been defined using the `hasScope` method:"
msgstr ""

#: ./docs/10.x/passport.md:1100
#: ./docs/11.x/passport.md:1085
#: ./docs/master/passport.md:1085
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/orders', function (Request $request) {\n"
"    if ($request->user()->tokenCan('place-orders')) {\n"
"        // ...\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/passport.md:1100
#: ./docs/9.x/passport.md:1159
#: ./docs/10.x/passport.md:1127
#: ./docs/11.x/passport.md:1112
#: ./docs/master/passport.md:1112
msgctxt "CODE"
msgid "Passport::hasScope('place-orders');"
msgstr ""

#: ./docs/8.x/passport.md:1102
#: ./docs/9.x/passport.md:1161
#: ./docs/10.x/passport.md:1129
#: ./docs/11.x/passport.md:1114
#: ./docs/master/passport.md:1114
#~ msgctxt "P"
#~ msgid "<a name=\"consuming-your-api-with-javascript\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1103
#: ./docs/9.x/passport.md:1162
#: ./docs/10.x/passport.md:1130
#: ./docs/11.x/passport.md:1115
#: ./docs/master/passport.md:1115
msgctxt "H2"
msgid "Consuming Your API With JavaScript"
msgstr ""

#: ./docs/8.x/passport.md:1105
#: ./docs/9.x/passport.md:1164
#: ./docs/10.x/passport.md:1132
#: ./docs/11.x/passport.md:1117
#: ./docs/master/passport.md:1117
msgctxt "P"
msgid "When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach to API development allows your own application to consume the same API that you are sharing with the world. The same API may be consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package managers."
msgstr ""

#: ./docs/8.x/passport.md:1107
#: ./docs/9.x/passport.md:1166
#: ./docs/10.x/passport.md:1134
msgctxt "P"
msgid "Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you. All you need to do is add the `CreateFreshApiToken` middleware to your `web` middleware group in your `app/Http/Kernel.php` file:"
msgstr ""

#: ./docs/8.x/passport.md:1109
#: ./docs/9.x/passport.md:1168
#: ./docs/10.x/passport.md:1136
msgctxt "CODE"
msgid "'web' => [\n"
"    // Other middleware...\n"
"    \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n"
"],"
msgstr ""

#: ./docs/8.x/passport.md:1114
#: ./docs/9.x/passport.md:1174
#: ./docs/10.x/passport.md:1142
#: ./docs/11.x/passport.md:1130
#: ./docs/master/passport.md:1130
msgctxt "P"
msgid "You should ensure that the `CreateFreshApiToken` middleware is the last middleware listed in your middleware stack."
msgstr ""

#: ./docs/8.x/passport.md:1116
#: ./docs/9.x/passport.md:1176
#: ./docs/10.x/passport.md:1144
#: ./docs/11.x/passport.md:1132
#: ./docs/master/passport.md:1132
msgctxt "P"
msgid "This middleware will attach a `laravel_token` cookie to your outgoing responses. This cookie contains an encrypted JWT that Passport will use to authenticate API requests from your JavaScript application. The JWT has a lifetime equal to your `session.lifetime` configuration value. Now, since the browser will automatically send the cookie with all subsequent requests, you may make requests to your application's API without explicitly passing an access token:"
msgstr ""

#: ./docs/8.x/passport.md:1118
#: ./docs/9.x/passport.md:1178
#: ./docs/10.x/passport.md:1146
#: ./docs/11.x/passport.md:1134
#: ./docs/master/passport.md:1134
msgctxt "CODE"
msgid "axios.get('/api/user')\n"
"    .then(response => {\n"
"        console.log(response.data);\n"
"    });"
msgstr ""

#: ./docs/11.x/passport.md:1119
#: ./docs/master/passport.md:1119
msgctxt "P"
msgid "Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you. All you need to do is append the `CreateFreshApiToken` middleware to the `web` middleware group in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/passport.md:1121
#: ./docs/master/passport.md:1121
msgctxt "CODE"
msgid "use Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken;\n\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->web(append: [\n"
"        CreateFreshApiToken::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/passport.md:1123
#: ./docs/9.x/passport.md:1183
#: ./docs/10.x/passport.md:1151
#: ./docs/11.x/passport.md:1139
#: ./docs/master/passport.md:1139
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-cookie-name\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1124
#: ./docs/9.x/passport.md:1184
msgctxt "H4"
msgid "Customizing The Cookie Name"
msgstr ""

#: ./docs/8.x/passport.md:1126
#: ./docs/9.x/passport.md:1186
#: ./docs/10.x/passport.md:1154
msgctxt "P"
msgid "If needed, you can customize the `laravel_token` cookie's name using the `Passport::cookie` method. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:1128
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::routes();\n\n"
"    Passport::cookie('custom_name');\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:1142
#: ./docs/master/passport.md:1142
msgctxt "P"
msgid "If needed, you can customize the `laravel_token` cookie's name using the `Passport::cookie` method. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:1142
#: ./docs/9.x/passport.md:1200
#: ./docs/10.x/passport.md:1164
#: ./docs/11.x/passport.md:1152
#: ./docs/master/passport.md:1152
#~ msgctxt "P"
#~ msgid "<a name=\"csrf-protection\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1143
#: ./docs/9.x/passport.md:1201
#: ./docs/10.x/passport.md:1165
#: ./docs/11.x/passport.md:1153
#: ./docs/master/passport.md:1153
msgctxt "H4"
msgid "CSRF Protection"
msgstr ""

#: ./docs/11.x/passport.md:1144
#: ./docs/master/passport.md:1144
msgctxt "CODE"
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::cookie('custom_name');\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:1145
#: ./docs/9.x/passport.md:1203
#: ./docs/10.x/passport.md:1167
#: ./docs/11.x/passport.md:1155
#: ./docs/master/passport.md:1155
msgctxt "P"
msgid "When using this method of authentication, you will need to ensure a valid CSRF token header is included in your requests. The default Laravel JavaScript scaffolding includes an Axios instance, which will automatically use the encrypted `XSRF-TOKEN` cookie value to send an `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""

#: ./docs/8.x/passport.md:1147
#: ./docs/9.x/passport.md:1206
#: ./docs/10.x/passport.md:1170
#: ./docs/11.x/passport.md:1158
#: ./docs/master/passport.md:1158
msgctxt "P"
msgid "If you choose to send the `X-CSRF-TOKEN` header instead of `X-XSRF-TOKEN`, you will need to use the unencrypted token provided by `csrf_token()`."
msgstr ""

#: ./docs/8.x/passport.md:1149
#: ./docs/9.x/passport.md:1208
#: ./docs/10.x/passport.md:1172
#: ./docs/11.x/passport.md:1160
#: ./docs/master/passport.md:1160
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1150
#: ./docs/9.x/passport.md:1209
#: ./docs/10.x/passport.md:1173
#: ./docs/11.x/passport.md:1161
#: ./docs/master/passport.md:1161
msgctxt "H2"
msgid "Events"
msgstr ""

#: ./docs/10.x/passport.md:1152
#: ./docs/11.x/passport.md:1140
#: ./docs/master/passport.md:1140
msgctxt "H4"
msgid "Customizing the Cookie Name"
msgstr ""

#: ./docs/8.x/passport.md:1152
#: ./docs/9.x/passport.md:1211
#: ./docs/10.x/passport.md:1175
msgctxt "P"
msgid "Passport raises events when issuing access tokens and refresh tokens. You may use these events to prune or revoke other access tokens in your database. If you would like, you may attach listeners to these events in your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#: ./docs/8.x/passport.md:1154
#: ./docs/9.x/passport.md:1213
#: ./docs/10.x/passport.md:1177
msgctxt "CODE"
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Laravel\\Passport\\Events\\AccessTokenCreated' => [\n"
"        'App\\Listeners\\RevokeOldTokens',\n"
"    ],\n\n"
"    'Laravel\\Passport\\Events\\RefreshTokenCreated' => [\n"
"        'App\\Listeners\\PruneOldTokens',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/passport.md:1156
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Passport::cookie('custom_name');\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:1163
#: ./docs/master/passport.md:1163
msgctxt "P"
msgid "Passport raises events when issuing access tokens and refresh tokens. You may [listen for these events](/docs/{{version}}/events) to prune or revoke other access tokens in your database:"
msgstr ""

#: ./docs/8.x/passport.md:1169
#: ./docs/9.x/passport.md:1228
#: ./docs/10.x/passport.md:1192
#: ./docs/11.x/passport.md:1174
#: ./docs/master/passport.md:1170
#~ msgctxt "P"
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

#: ./docs/8.x/passport.md:1170
#: ./docs/9.x/passport.md:1229
#: ./docs/10.x/passport.md:1193
#: ./docs/11.x/passport.md:1175
#: ./docs/master/passport.md:1171
msgctxt "H2"
msgid "Testing"
msgstr ""

#: ./docs/8.x/passport.md:1172
#: ./docs/9.x/passport.md:1231
#: ./docs/10.x/passport.md:1195
#: ./docs/11.x/passport.md:1177
#: ./docs/master/passport.md:1173
msgctxt "P"
msgid "Passport's `actingAs` method may be used to specify the currently authenticated user as well as its scopes. The first argument given to the `actingAs` method is the user instance and the second is an array of scopes that should be granted to the user's token:"
msgstr ""

#: ./docs/8.x/passport.md:1174
#: ./docs/9.x/passport.md:1233
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_servers_can_be_created()\n"
"{\n"
"    Passport::actingAs(\n"
"        User::factory()->create(),\n"
"        ['create-servers']\n"
"    );\n\n"
"    $response = $this->post('/api/create-server');\n\n"
"    $response->assertStatus(201);\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:1179
#: ./docs/master/passport.md:1175
msgctxt "CODE: php tab=Pest"
msgid "use App\\Models\\User;\n"
"use Laravel\\Passport\\Passport;\n\n"
"test('servers can be created', function () {\n"
"    Passport::actingAs(\n"
"        User::factory()->create(),\n"
"        ['create-servers']\n"
"    );\n\n"
"    $response = $this->post('/api/create-server');\n\n"
"    $response->assertStatus(201);\n"
"});"
msgstr ""

#: ./docs/9.x/passport.md:1188
msgctxt "CODE"
msgid "/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Passport::cookie('custom_name');\n"
"}"
msgstr ""

#: ./docs/8.x/passport.md:1189
#: ./docs/9.x/passport.md:1248
#: ./docs/10.x/passport.md:1212
#: ./docs/11.x/passport.md:1212
#: ./docs/master/passport.md:1208
msgctxt "P"
msgid "Passport's `actingAsClient` method may be used to specify the currently authenticated client as well as its scopes. The first argument given to the `actingAsClient` method is the client instance and the second is an array of scopes that should be granted to the client's token:"
msgstr ""

#: ./docs/8.x/passport.md:1191
#: ./docs/9.x/passport.md:1250
msgctxt "CODE"
msgid "use Laravel\\Passport\\Client;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_orders_can_be_retrieved()\n"
"{\n"
"    Passport::actingAsClient(\n"
"        Client::factory()->create(),\n"
"        ['check-status']\n"
"    );\n\n"
"    $response = $this->get('/api/orders');\n\n"
"    $response->assertStatus(200);\n"
"}"
msgstr ""

#: ./docs/10.x/passport.md:1197
#: ./docs/11.x/passport.md:1195
#: ./docs/master/passport.md:1191
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_servers_can_be_created(): void\n"
"{\n"
"    Passport::actingAs(\n"
"        User::factory()->create(),\n"
"        ['create-servers']\n"
"    );\n\n"
"    $response = $this->post('/api/create-server');\n\n"
"    $response->assertStatus(201);\n"
"}"
msgstr ""

#: ./docs/10.x/passport.md:1214
#: ./docs/11.x/passport.md:1230
#: ./docs/master/passport.md:1226
msgctxt "CODE"
msgid "use Laravel\\Passport\\Client;\n"
"use Laravel\\Passport\\Passport;\n\n"
"public function test_orders_can_be_retrieved(): void\n"
"{\n"
"    Passport::actingAsClient(\n"
"        Client::factory()->create(),\n"
"        ['check-status']\n"
"    );\n\n"
"    $response = $this->get('/api/orders');\n\n"
"    $response->assertStatus(200);\n"
"}"
msgstr ""

#: ./docs/11.x/passport.md:1214
#: ./docs/master/passport.md:1210
msgctxt "CODE: php tab=Pest"
msgid "use Laravel\\Passport\\Client;\n"
"use Laravel\\Passport\\Passport;\n\n"
"test('orders can be retrieved', function () {\n"
"    Passport::actingAsClient(\n"
"        Client::factory()->create(),\n"
"        ['check-status']\n"
"    );\n\n"
"    $response = $this->get('/api/orders');\n\n"
"    $response->assertStatus(200);\n"
"});"
msgstr ""

