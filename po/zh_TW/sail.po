msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:27\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/sail.pot\n"
"X-Crowdin-File-ID: 143\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

# H1
#: ./docs/8.x/sail.md:1
#: ./docs/9.x/sail.md:1
#: ./docs/10.x/sail.md:1
#: ./docs/11.x/sail.md:1
#: ./docs/master/sail.md:1
msgid "Laravel Sail"
msgstr "Laravel Sail"

# P
#: ./docs/8.x/sail.md:3
#: ./docs/9.x/sail.md:3
#: ./docs/10.x/sail.md:3
#: ./docs/11.x/sail.md:3
#: ./docs/master/sail.md:3
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# P
#: ./docs/10.x/sail.md:4
#: ./docs/11.x/sail.md:4
#: ./docs/master/sail.md:4
msgid "[Installation and Setup](#installation)"
msgstr ""

# P
#: ./docs/8.x/sail.md:4
#: ./docs/9.x/sail.md:4
msgid "[Installation & Setup](#installation)"
msgstr "[安裝與設定](#installation)"

# P
#: ./docs/8.x/sail.md:5
#: ./docs/9.x/sail.md:5
#: ./docs/10.x/sail.md:5
#: ./docs/11.x/sail.md:5
#: ./docs/master/sail.md:5
msgid "[Installing Sail Into Existing Applications](#installing-sail-into-existing-applications)"
msgstr "[將 Sail 安裝至現有專案](#installing-sail-into-existing-applications)"

# P
#: ./docs/11.x/sail.md:6
msgid "[Rebuilding Sail Images](#rebuilding-sail-images)"
msgstr ""

# P
#: ./docs/8.x/sail.md:6
msgid "[Configuring A Bash Alias](#configuring-a-bash-alias)"
msgstr "[設定 Bash Alias](#configuring-a-bash-alias)"

# P
#: ./docs/9.x/sail.md:6
#: ./docs/10.x/sail.md:6
#: ./docs/11.x/sail.md:7
#: ./docs/master/sail.md:6
msgid "[Configuring A Shell Alias](#configuring-a-shell-alias)"
msgstr "[設定 Shell Alias](#configuring-a-shell-alias)"

# P
#: ./docs/10.x/sail.md:7
#: ./docs/11.x/sail.md:8
#: ./docs/master/sail.md:7
msgid "[Starting and Stopping Sail](#starting-and-stopping-sail)"
msgstr ""

# P
#: ./docs/8.x/sail.md:7
#: ./docs/9.x/sail.md:7
msgid "[Starting & Stopping Sail](#starting-and-stopping-sail)"
msgstr "[啟動與停止 Sail](#starting-and-stopping-sail)"

# P
#: ./docs/8.x/sail.md:8
#: ./docs/9.x/sail.md:8
#: ./docs/10.x/sail.md:8
#: ./docs/11.x/sail.md:9
#: ./docs/master/sail.md:8
msgid "[Executing Commands](#executing-sail-commands)"
msgstr "[執行指令](#executing-sail-commands)"

# P
#: ./docs/8.x/sail.md:9
#: ./docs/9.x/sail.md:9
#: ./docs/10.x/sail.md:9
#: ./docs/11.x/sail.md:10
#: ./docs/master/sail.md:9
msgid "[Executing PHP Commands](#executing-php-commands)"
msgstr "[執行 PHP 指令](#executing-php-commands)"

# P
#: ./docs/8.x/sail.md:10
#: ./docs/9.x/sail.md:10
#: ./docs/10.x/sail.md:10
#: ./docs/11.x/sail.md:11
#: ./docs/master/sail.md:10
msgid "[Executing Composer Commands](#executing-composer-commands)"
msgstr "[執行 Composer 指令](#executing-composer-commands)"

# P
#: ./docs/8.x/sail.md:11
#: ./docs/9.x/sail.md:11
#: ./docs/10.x/sail.md:11
#: ./docs/11.x/sail.md:12
#: ./docs/master/sail.md:11
msgid "[Executing Artisan Commands](#executing-artisan-commands)"
msgstr "[執行 Artisan 指令](#executing-artisan-commands)"

# P
#: ./docs/8.x/sail.md:12
#: ./docs/9.x/sail.md:12
#: ./docs/10.x/sail.md:12
#: ./docs/11.x/sail.md:13
#: ./docs/master/sail.md:12
msgid "[Executing Node / NPM Commands](#executing-node-npm-commands)"
msgstr "[執行 Node 與 NPM 指令](#executing-node-npm-commands)"

# P
#: ./docs/8.x/sail.md:13
#: ./docs/9.x/sail.md:13
#: ./docs/10.x/sail.md:13
#: ./docs/11.x/sail.md:14
#: ./docs/master/sail.md:13
msgid "[Interacting With Databases](#interacting-with-sail-databases)"
msgstr "[使用資料庫](#interacting-with-sail-databases)"

# P
#: ./docs/8.x/sail.md:14
#: ./docs/9.x/sail.md:14
#: ./docs/10.x/sail.md:14
#: ./docs/11.x/sail.md:15
#: ./docs/master/sail.md:14
msgid "[MySQL](#mysql)"
msgstr "[MySQL](#mysql)"

# P
#: ./docs/8.x/sail.md:15
#: ./docs/9.x/sail.md:15
#: ./docs/10.x/sail.md:15
#: ./docs/11.x/sail.md:17
#: ./docs/master/sail.md:15
msgid "[Redis](#redis)"
msgstr "[Redis](#redis)"

# P
#: ./docs/10.x/sail.md:16
#: ./docs/11.x/sail.md:18
#: ./docs/master/sail.md:16
msgid "[Meilisearch](#meilisearch)"
msgstr "[Meilisearch](#meilisearch)"

# P
#: ./docs/11.x/sail.md:16
msgid "[MongoDB](#mongodb)"
msgstr ""

# P
#: ./docs/8.x/sail.md:16
#: ./docs/9.x/sail.md:16
msgid "[MeiliSearch](#meilisearch)"
msgstr "[MeiliSearch](#meilisearch)"

# P
#: ./docs/10.x/sail.md:17
#: ./docs/11.x/sail.md:19
#: ./docs/master/sail.md:17
msgid "[Typesense](#typesense)"
msgstr ""

# P
#: ./docs/8.x/sail.md:17
#: ./docs/9.x/sail.md:17
#: ./docs/10.x/sail.md:18
#: ./docs/11.x/sail.md:20
#: ./docs/master/sail.md:18
msgid "[File Storage](#file-storage)"
msgstr "[檔案儲存](#file-storage)"

# P
#: ./docs/8.x/sail.md:18
#: ./docs/9.x/sail.md:18
#: ./docs/10.x/sail.md:19
#: ./docs/11.x/sail.md:21
#: ./docs/master/sail.md:19
msgid "[Running Tests](#running-tests)"
msgstr "[執行測試](#running-tests)"

# P
#: ./docs/8.x/sail.md:19
#: ./docs/9.x/sail.md:19
#: ./docs/10.x/sail.md:20
#: ./docs/11.x/sail.md:22
#: ./docs/master/sail.md:20
msgid "[Laravel Dusk](#laravel-dusk)"
msgstr "[Laravel Dusk](#laravel-dusk)"

# P
#: ./docs/8.x/sail.md:20
#: ./docs/9.x/sail.md:20
#: ./docs/10.x/sail.md:21
#: ./docs/11.x/sail.md:23
#: ./docs/master/sail.md:21
msgid "[Previewing Emails](#previewing-emails)"
msgstr "[預覽 E-Mail](#previewing-emails)"

# P
#: ./docs/8.x/sail.md:21
#: ./docs/9.x/sail.md:21
#: ./docs/10.x/sail.md:22
#: ./docs/11.x/sail.md:24
#: ./docs/master/sail.md:22
msgid "[Container CLI](#sail-container-cli)"
msgstr "[Container CLI](#sail-container-cli)"

# P
#: ./docs/8.x/sail.md:22
#: ./docs/9.x/sail.md:22
#: ./docs/10.x/sail.md:23
#: ./docs/11.x/sail.md:25
#: ./docs/master/sail.md:23
msgid "[PHP Versions](#sail-php-versions)"
msgstr "[PHP 版本](#sail-php-versions)"

# P
#: ./docs/8.x/sail.md:23
#: ./docs/9.x/sail.md:23
#: ./docs/10.x/sail.md:24
#: ./docs/11.x/sail.md:26
#: ./docs/master/sail.md:24
msgid "[Node Versions](#sail-node-versions)"
msgstr "[Node 版本](#sail-node-versions)"

# P
#: ./docs/8.x/sail.md:24
#: ./docs/9.x/sail.md:24
#: ./docs/10.x/sail.md:25
#: ./docs/11.x/sail.md:27
#: ./docs/master/sail.md:25
msgid "[Sharing Your Site](#sharing-your-site)"
msgstr "[共享網站](#sharing-your-site)"

# P
#: ./docs/8.x/sail.md:25
#: ./docs/9.x/sail.md:25
#: ./docs/10.x/sail.md:26
#: ./docs/11.x/sail.md:28
#: ./docs/master/sail.md:26
msgid "[Debugging With Xdebug](#debugging-with-xdebug)"
msgstr "[使用 Xdebug 來進行除錯](#debugging-with-xdebug)"

# P
#: ./docs/8.x/sail.md:26
#: ./docs/9.x/sail.md:26
#: ./docs/10.x/sail.md:27
#: ./docs/11.x/sail.md:29
#: ./docs/master/sail.md:27
msgid "[Xdebug CLI Usage](#xdebug-cli-usage)"
msgstr "[使用 Xdebug CLI](#xdebug-cli-usage)"

# P
#: ./docs/8.x/sail.md:27
#: ./docs/9.x/sail.md:27
#: ./docs/10.x/sail.md:28
#: ./docs/11.x/sail.md:30
#: ./docs/master/sail.md:28
msgid "[Xdebug Browser Usage](#xdebug-browser-usage)"
msgstr "[使用 Xdebug Browser](#xdebug-browser-usage)"

# P
#: ./docs/8.x/sail.md:28
#: ./docs/9.x/sail.md:28
#: ./docs/10.x/sail.md:29
#: ./docs/11.x/sail.md:31
#: ./docs/master/sail.md:29
msgid "[Customization](#sail-customization)"
msgstr "[自定](#sail-customization)"

# P
#: ./docs/8.x/sail.md:30
#: ./docs/9.x/sail.md:30
#: ./docs/10.x/sail.md:31
#: ./docs/11.x/sail.md:33
#: ./docs/master/sail.md:31
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:31
#: ./docs/9.x/sail.md:31
#: ./docs/10.x/sail.md:32
#: ./docs/11.x/sail.md:34
#: ./docs/master/sail.md:32
msgid "Introduction"
msgstr "簡介"

# P
#: ./docs/8.x/sail.md:33
#: ./docs/9.x/sail.md:33
#: ./docs/10.x/sail.md:34
#: ./docs/11.x/sail.md:36
#: ./docs/master/sail.md:34
msgid "[Laravel Sail](https://github.com/laravel/sail) is a light-weight command-line interface for interacting with Laravel's default Docker development environment. Sail provides a great starting point for building a Laravel application using PHP, MySQL, and Redis without requiring prior Docker experience."
msgstr "[Laravel Sail](https://github.com/laravel/sail) 是一個輕量的命令列介面，可用來操作 Laravel 預設的 Docker 開發環境。對於使用 PHP、MySQL 與 Redis 來建立 Laravel 專案，Sail 是一個不錯的入門選項，且不需預先具備有關 Docker 的知識。"

# P
#: ./docs/8.x/sail.md:35
#: ./docs/9.x/sail.md:35
#: ./docs/10.x/sail.md:36
#: ./docs/11.x/sail.md:38
#: ./docs/master/sail.md:36
msgid "At its heart, Sail is the `docker-compose.yml` file and the `sail` script that is stored at the root of your project. The `sail` script provides a CLI with convenient methods for interacting with the Docker containers defined by the `docker-compose.yml` file."
msgstr "Sail 的核心是保存在專案根目錄的 `docker-compose.yml` 檔案與 `sail` Script 檔。`sail` Script 檔提供了一個有許多方便方法的 CLI 介面，能操作由 `docker-compose.yml` 檔案所定義的 Docker Container。"

# P
#: ./docs/8.x/sail.md:37
#: ./docs/9.x/sail.md:37
#: ./docs/10.x/sail.md:38
#: ./docs/11.x/sail.md:40
#: ./docs/master/sail.md:38
msgid "Laravel Sail is supported on macOS, Linux, and Windows (via [WSL2](https://docs.microsoft.com/en-us/windows/wsl/about))."
msgstr "Laravel Sail 支援 macOS、Linux、與 Windows (通過 [WSL2](https://docs.microsoft.com/zh-tw/windows/wsl/about))。"

# P
#: ./docs/8.x/sail.md:39
#: ./docs/9.x/sail.md:39
#: ./docs/10.x/sail.md:40
#: ./docs/11.x/sail.md:42
#: ./docs/master/sail.md:40
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:40
#: ./docs/9.x/sail.md:40
msgid "Installation & Setup"
msgstr "安裝與設定"

# H2
#: ./docs/10.x/sail.md:41
#: ./docs/11.x/sail.md:43
#: ./docs/master/sail.md:41
msgid "Installation and Setup"
msgstr ""

# P
#: ./docs/8.x/sail.md:42
#: ./docs/9.x/sail.md:42
msgid "Laravel Sail is automatically installed with all new Laravel applications so you may start using it immediately. To learn how to create a new Laravel application, please consult Laravel's [installation documentation](/docs/{{version}}/installation) for your operating system. During installation, you will be asked to choose which Sail supported services your application will be interacting with."
msgstr "Laravel Sail 已自動安裝到新的 Laravel 專案中，因此你可以馬上開始使用 Sail。若要瞭解如何建立新的 Laravel 專案，請參考 Laravel 的[安裝說明文件](/docs/{{version}}/installation)中對應你的作業系統的部分。在安裝時，Sail 會詢問你的專案要用到哪些 Sail 支援的服務。"

# P
#: ./docs/10.x/sail.md:43
#: ./docs/11.x/sail.md:45
#: ./docs/master/sail.md:43
msgid "Laravel Sail is automatically installed with all new Laravel applications so you may start using it immediately. To learn how to create a new Laravel application, please consult Laravel's [installation documentation](/docs/{{version}}/installation#docker-installation-using-sail) for your operating system. During installation, you will be asked to choose which Sail supported services your application will be interacting with."
msgstr ""

# P
#: ./docs/8.x/sail.md:44
#: ./docs/9.x/sail.md:44
#: ./docs/10.x/sail.md:45
#: ./docs/11.x/sail.md:47
#: ./docs/master/sail.md:45
#~ msgid "<a name=\"installing-sail-into-existing-applications\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:45
#: ./docs/9.x/sail.md:45
#: ./docs/10.x/sail.md:46
#: ./docs/11.x/sail.md:48
#: ./docs/master/sail.md:46
msgid "Installing Sail Into Existing Applications"
msgstr "將 Sail 安裝到現有的專案"

# P
#: ./docs/8.x/sail.md:47
#: ./docs/9.x/sail.md:47
#: ./docs/10.x/sail.md:48
#: ./docs/11.x/sail.md:50
#: ./docs/master/sail.md:48
msgid "If you are interested in using Sail with an existing Laravel application, you may simply install Sail using the Composer package manager. Of course, these steps assume that your existing local development environment allows you to install Composer dependencies:"
msgstr "若想在現有的 Laravel 專案中安裝 Sail，只需要使用 Composer 套件管理員安裝 Sail 即可。當然，這個步驟假設你已經有假設好本機開發環境，才能安裝 Composer 套件："

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:49
#: ./docs/9.x/sail.md:49
#: ./docs/10.x/sail.md:50
#: ./docs/11.x/sail.md:52
#: ./docs/master/sail.md:50
msgid "composer require laravel/sail --dev"
msgstr ""

# P
#: ./docs/8.x/sail.md:51
#: ./docs/9.x/sail.md:53
msgid "After Sail has been installed, you may run the `sail:install` Artisan command. This command will publish Sail's `docker-compose.yml` file to the root of your application:"
msgstr "安裝好 Sail 後，可以執行 `sail:install` Artisan 指令。這個指令會將 Sail 的 `docker-compose.yml` 檔案安裝到專案根目錄："

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:53
#: ./docs/9.x/sail.md:55
#: ./docs/10.x/sail.md:56
#: ./docs/11.x/sail.md:58
#: ./docs/master/sail.md:56
msgid "php artisan sail:install"
msgstr ""

# P
#: ./docs/10.x/sail.md:54
#: ./docs/11.x/sail.md:56
#: ./docs/master/sail.md:54
msgid "After Sail has been installed, you may run the `sail:install` Artisan command. This command will publish Sail's `docker-compose.yml` file to the root of your application and modify your `.env` file with the required environment variables in order to connect to the Docker services:"
msgstr ""

# P
#: ./docs/8.x/sail.md:55
#: ./docs/9.x/sail.md:59
#: ./docs/10.x/sail.md:60
#: ./docs/11.x/sail.md:62
#: ./docs/master/sail.md:60
msgid "Finally, you may start Sail. To continue learning how to use Sail, please continue reading the remainder of this documentation:"
msgstr "最後，可啟動 Sail。若要繼續瞭解有關如何使用 Sail 的資訊，請繼續閱讀本說明文件中剩下的部分："

# CODE
# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:57
#: ./docs/8.x/sail.md:71
#: ./docs/9.x/sail.md:61
#: ./docs/9.x/sail.md:88
#: ./docs/10.x/sail.md:62
#: ./docs/10.x/sail.md:92
#: ./docs/11.x/sail.md:64
#: ./docs/11.x/sail.md:107
#: ./docs/master/sail.md:62
#: ./docs/master/sail.md:92
msgid "./vendor/bin/sail up"
msgstr ""

# P
#: ./docs/8.x/sail.md:59
#: ./docs/9.x/sail.md:74
#: ./docs/10.x/sail.md:78
#: ./docs/11.x/sail.md:80
#: ./docs/master/sail.md:78
#~ msgid "<a name=\"using-devcontainers\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/sail.md:60
#: ./docs/9.x/sail.md:75
#: ./docs/10.x/sail.md:79
#: ./docs/11.x/sail.md:81
#: ./docs/master/sail.md:79
msgid "Using Devcontainers"
msgstr "使用 Devcontainer"

# P
#: ./docs/8.x/sail.md:62
#: ./docs/9.x/sail.md:77
#: ./docs/10.x/sail.md:81
#: ./docs/11.x/sail.md:83
#: ./docs/master/sail.md:81
msgid "If you would like to develop within a [Devcontainer](https://code.visualstudio.com/docs/remote/containers), you may provide the `--devcontainer` option to the `sail:install` command. The `--devcontainer` option will instruct the `sail:install` command to publish a default `.devcontainer/devcontainer.json ` file to the root of your application:"
msgstr "若要使用 [Devcontainer](https://code.visualstudio.com/docs/remote/containers) 來開發，可在執行 `sail:install` 指令時提供 `--devcontainer` 選項。`--devcontainer` 選項會讓 `sail:install` 指令將一個預設的 `.devcontainer/devcontainer.json` 檔案安裝到專案根目錄下："

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:64
#: ./docs/9.x/sail.md:79
#: ./docs/10.x/sail.md:83
#: ./docs/11.x/sail.md:85
#: ./docs/master/sail.md:83
msgid "php artisan sail:install --devcontainer"
msgstr ""

# P
#: ./docs/9.x/sail.md:65
#: ./docs/10.x/sail.md:69
#: ./docs/11.x/sail.md:71
#: ./docs/master/sail.md:69
#~ msgid "<a name=\"adding-additional-services\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/sail.md:66
#~ msgid "<a name=\"configuring-a-bash-alias\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/sail.md:66
#: ./docs/10.x/sail.md:70
#: ./docs/11.x/sail.md:72
#: ./docs/master/sail.md:70
msgid "Adding Additional Services"
msgstr "新增額外服務"

# P
#: ./docs/10.x/sail.md:67
#: ./docs/11.x/sail.md:69
#: ./docs/master/sail.md:67
msgid "If you are using Docker Desktop for Linux, you should use the `default` Docker context by executing the following command: `docker context use default`."
msgstr ""

# H3
#: ./docs/8.x/sail.md:67
msgid "Configuring A Bash Alias"
msgstr "設定 Bash Alias"

# P
#: ./docs/9.x/sail.md:68
#: ./docs/10.x/sail.md:72
#: ./docs/11.x/sail.md:74
#: ./docs/master/sail.md:72
msgid "If you would like to add an additional service to your existing Sail installation, you may run the `sail:add` Artisan command:"
msgstr "若想在現有的 Sail 專案中加上更多服務，可以執行 `sail:add` Artisan 指令："

# P
#: ./docs/8.x/sail.md:69
#: ./docs/9.x/sail.md:86
#: ./docs/10.x/sail.md:90
#: ./docs/11.x/sail.md:105
#: ./docs/master/sail.md:90
msgid "By default, Sail commands are invoked using the `vendor/bin/sail` script that is included with all new Laravel applications:"
msgstr "預設情況下，Sail 指令是使用 `vendor/bin/sail` Script 檔來呼叫的。該 Script 檔包含在所有新安裝的 Laravel 專案內："

# CODE: shell
#: ./docs/9.x/sail.md:70
#: ./docs/10.x/sail.md:74
#: ./docs/11.x/sail.md:76
#: ./docs/master/sail.md:74
msgid "php artisan sail:add"
msgstr ""

# P
#: ./docs/8.x/sail.md:75
msgid "However, instead of repeatedly typing `vendor/bin/sail` to execute Sail commands, you may wish to configure a Bash alias that allows you to execute Sail's commands more easily:"
msgstr "不過，我們可以設定 Bash Alias 以更輕鬆地執行 Sail 指令，而不需要一直重複鍵入 `vendor/bin/sail`："

# CODE: bash
#: ./docs/8.x/sail.md:77
msgid "alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'"
msgstr ""

# P
#: ./docs/8.x/sail.md:81
msgid "Once the Bash alias has been configured, you may execute Sail commands by simply typing `sail`. The remainder of this documentation's examples will assume that you have configured this alias:"
msgstr "設定好 Bash Alias 後，只要鍵入 `sail` 就可執行 Sail 指令。此說明文件剩下的部分都假設你已設定好此 Alias："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:83
#: ./docs/8.x/sail.md:94
#: ./docs/9.x/sail.md:102
#: ./docs/9.x/sail.md:113
#: ./docs/10.x/sail.md:106
#: ./docs/10.x/sail.md:117
#: ./docs/11.x/sail.md:121
#: ./docs/11.x/sail.md:132
#: ./docs/master/sail.md:106
#: ./docs/master/sail.md:117
msgid "sail up"
msgstr ""

# P
#: ./docs/9.x/sail.md:83
#: ./docs/10.x/sail.md:87
#: ./docs/11.x/sail.md:102
#: ./docs/master/sail.md:87
#~ msgid "<a name=\"configuring-a-shell-alias\"></a>"
#~ msgstr ""

# H3
#: ./docs/9.x/sail.md:84
#: ./docs/10.x/sail.md:88
#: ./docs/11.x/sail.md:103
#: ./docs/master/sail.md:88
msgid "Configuring A Shell Alias"
msgstr "設定 Shell Alias"

# P
#: ./docs/8.x/sail.md:87
#: ./docs/9.x/sail.md:106
#: ./docs/10.x/sail.md:110
#: ./docs/11.x/sail.md:125
#: ./docs/master/sail.md:110
#~ msgid "<a name=\"starting-and-stopping-sail\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:88
#: ./docs/9.x/sail.md:107
msgid "Starting & Stopping Sail"
msgstr "啟動與停止 Sail"

# P
#: ./docs/11.x/sail.md:89
#~ msgid "<a name=\"rebuilding-sail-images\"></a>"
#~ msgstr ""

# H3
#: ./docs/11.x/sail.md:90
msgid "Rebuilding Sail Images"
msgstr ""

# P
#: ./docs/8.x/sail.md:90
#: ./docs/9.x/sail.md:109
#: ./docs/10.x/sail.md:113
#: ./docs/11.x/sail.md:128
#: ./docs/master/sail.md:113
msgid "Laravel Sail's `docker-compose.yml` file defines a variety of Docker containers that work together to help you build Laravel applications. Each of these containers is an entry within the `services` configuration of your `docker-compose.yml` file. The `laravel.test` container is the primary application container that will be serving your application."
msgstr "Laravel Sail 的 `docker-compose.yml` 中定義了數個 Docker Container，這些 Container 會互相配合來協助你製作 Laravel 專案。在 `docker-compose.yml` 檔案中，`services` 設定內的每一格項目都是一個 Container。`laravel.test` Container 是專案的主要 Container，用來執行你的專案："

# P
#: ./docs/11.x/sail.md:92
msgid "Sometimes you may want to completely rebuild your Sail images to ensure all of the image's packages and software are up to date. You may accomplish this using the `build` command:"
msgstr ""

# P
#: ./docs/8.x/sail.md:92
#: ./docs/9.x/sail.md:111
#: ./docs/10.x/sail.md:115
#: ./docs/11.x/sail.md:130
#: ./docs/master/sail.md:115
msgid "Before starting Sail, you should ensure that no other web servers or databases are running on your local computer. To start all of the Docker containers defined in your application's `docker-compose.yml` file, you should execute the `up` command:"
msgstr "啟動 Sail 後，請確定你的本機電腦上沒有執行其他 ^[Web Server](網頁伺服器)或資料庫。若要啟動所有 `docker-compose.yml` 檔案中的 Docker Container，請執行 `up` 指令："

# P
#: ./docs/9.x/sail.md:92
#: ./docs/10.x/sail.md:96
#: ./docs/11.x/sail.md:111
#: ./docs/master/sail.md:96
msgid "However, instead of repeatedly typing `vendor/bin/sail` to execute Sail commands, you may wish to configure a shell alias that allows you to execute Sail's commands more easily:"
msgstr "不過，我們可以設定 Shell Alias 以更輕鬆地執行 Sail 指令，而不需要一直重複鍵入 `vendor/bin/sail`："

# CODE: shell
#: ./docs/11.x/sail.md:94
msgid ""
"docker compose down -v\n"
"\n"
"sail build --no-cache\n"
"\n"
"sail up"
msgstr ""

# CODE: shell
#: ./docs/9.x/sail.md:94
msgid "alias sail='[ -f sail ] && sh sail || sh vendor/bin/sail'"
msgstr ""

# CODE: shell
#: ./docs/10.x/sail.md:98
#: ./docs/11.x/sail.md:113
#: ./docs/master/sail.md:98
msgid "alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'"
msgstr ""

# P
#: ./docs/8.x/sail.md:98
#: ./docs/9.x/sail.md:117
#: ./docs/10.x/sail.md:121
#: ./docs/11.x/sail.md:136
#: ./docs/master/sail.md:121
msgid "To start all of the Docker containers in the background, you may start Sail in \"detached\" mode:"
msgstr "若要在背景啟動所有 Docker Container，可使用「分離模式 (Detached Mode)」啟動 Sail："

# P
#: ./docs/9.x/sail.md:98
#: ./docs/10.x/sail.md:102
#: ./docs/11.x/sail.md:117
#: ./docs/master/sail.md:102
msgid "To make sure this is always available, you may add this to your shell configuration file in your home directory, such as `~/.zshrc` or `~/.bashrc`, and then restart your shell."
msgstr "為了確保此 Alias 設定總是有效，可以將此設定加到你的家目錄中的 Shell 設定檔內。如 `~/.zshrc` 或 `~/.bashrc`，接著重新啟動 Shell。"

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:100
#: ./docs/9.x/sail.md:119
#: ./docs/10.x/sail.md:123
#: ./docs/11.x/sail.md:138
#: ./docs/master/sail.md:123
msgid "sail up -d"
msgstr ""

# P
#: ./docs/9.x/sail.md:100
#: ./docs/10.x/sail.md:104
#: ./docs/11.x/sail.md:119
#: ./docs/master/sail.md:104
msgid "Once the shell alias has been configured, you may execute Sail commands by simply typing `sail`. The remainder of this documentation's examples will assume that you have configured this alias:"
msgstr "設定好 Shell Alias 後，只要鍵入 `sail` 就可執行 Sail 指令。此說明文件剩下的部分都假設你已設定好此 Alias："

# P
#: ./docs/8.x/sail.md:104
#: ./docs/9.x/sail.md:123
#: ./docs/10.x/sail.md:127
#: ./docs/11.x/sail.md:142
#: ./docs/master/sail.md:127
msgid "Once the application's containers have been started, you may access the project in your web browser at: [http://localhost](http://localhost)."
msgstr ""

# P
#: ./docs/8.x/sail.md:106
#: ./docs/9.x/sail.md:125
#: ./docs/10.x/sail.md:129
#: ./docs/11.x/sail.md:144
#: ./docs/master/sail.md:129
msgid "To stop all of the containers, you may simply press Control + C to stop the container's execution. Or, if the containers are running in the background, you may use the `stop` command:"
msgstr "若要停止所有 Container，只需要按 Ctrl + C 來停止執行 Container 即可。如果 Container 是在背景執行，可使用 `stop` 指令："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:108
#: ./docs/9.x/sail.md:127
#: ./docs/10.x/sail.md:131
#: ./docs/11.x/sail.md:146
#: ./docs/master/sail.md:131
msgid "sail stop"
msgstr ""

# H2
#: ./docs/10.x/sail.md:111
#: ./docs/11.x/sail.md:126
#: ./docs/master/sail.md:111
msgid "Starting and Stopping Sail"
msgstr ""

# P
#: ./docs/8.x/sail.md:112
#: ./docs/9.x/sail.md:131
#: ./docs/10.x/sail.md:135
#: ./docs/11.x/sail.md:150
#: ./docs/master/sail.md:135
#~ msgid "<a name=\"executing-sail-commands\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:113
#: ./docs/9.x/sail.md:132
#: ./docs/10.x/sail.md:136
#: ./docs/11.x/sail.md:151
#: ./docs/master/sail.md:136
msgid "Executing Commands"
msgstr "執行指令"

# P
#: ./docs/8.x/sail.md:115
#: ./docs/9.x/sail.md:134
#: ./docs/10.x/sail.md:138
#: ./docs/11.x/sail.md:153
#: ./docs/master/sail.md:138
msgid "When using Laravel Sail, your application is executing within a Docker container and is isolated from your local computer. However, Sail provides a convenient way to run various commands against your application such as arbitrary PHP commands, Artisan commands, Composer commands, and Node / NPM commands."
msgstr "在使用 Laravel Sail 時，你的專案會被放在 Docker Container 內執行，並與你的本機電腦隔離。不過，Sail 提供了一個方便的方法，可讓你針對你的專案執行各種指令，如：執行任意 PHP 指令、Artisan 指令、Node 與 NPM 指令等。"

# P
#: ./docs/8.x/sail.md:117
#: ./docs/9.x/sail.md:136
#: ./docs/10.x/sail.md:140
#: ./docs/11.x/sail.md:155
#: ./docs/master/sail.md:140
msgid "**When reading the Laravel documentation, you will often see references to Composer, Artisan, and Node / NPM commands that do not reference Sail.** Those examples assume that these tools are installed on your local computer. If you are using Sail for your local Laravel development environment, you should execute those commands using Sail:"
msgstr "**在閱讀 Laravel 的說明文件時，有時候會看到一些沒有提到 Sail 的 Composer、Artisan、Node 或 NPM 指令**。這些範例假設這些工具是安裝在你的本機電腦上。使用 Laravel Sail 作為本機開發環境時，應使用 Sail 來執行這些指令："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:119
#: ./docs/9.x/sail.md:138
#: ./docs/10.x/sail.md:142
#: ./docs/11.x/sail.md:157
#: ./docs/master/sail.md:142
msgid ""
"# Running Artisan commands locally...\n"
"php artisan queue:work\n"
"\n"
"# Running Artisan commands within Laravel Sail...\n"
"sail artisan queue:work"
msgstr ""

# P
#: ./docs/8.x/sail.md:127
#: ./docs/9.x/sail.md:146
#: ./docs/10.x/sail.md:150
#: ./docs/11.x/sail.md:165
#: ./docs/master/sail.md:150
#~ msgid "<a name=\"executing-php-commands\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:128
#: ./docs/9.x/sail.md:147
#: ./docs/10.x/sail.md:151
#: ./docs/11.x/sail.md:166
#: ./docs/master/sail.md:151
msgid "Executing PHP Commands"
msgstr "執行 PHP 指令"

# P
#: ./docs/8.x/sail.md:130
#: ./docs/9.x/sail.md:149
#: ./docs/10.x/sail.md:153
#: ./docs/11.x/sail.md:168
#: ./docs/master/sail.md:153
msgid "PHP commands may be executed using the `php` command. Of course, these commands will execute using the PHP version that is configured for your application. To learn more about the PHP versions available to Laravel Sail, consult the [PHP version documentation](#sail-php-versions):"
msgstr "可以使用 `php` 指令來執行 PHP 指令。當然，這些指令會使用你的專案所設定的 PHP 版本來執行。有關 Laravel Sail 中可用的 PHP 版本，請參考 [PHP 版本的說明文件](#sail-php-versions)："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:132
#: ./docs/9.x/sail.md:151
#: ./docs/10.x/sail.md:155
#: ./docs/11.x/sail.md:170
#: ./docs/master/sail.md:155
msgid ""
"sail php --version\n"
"\n"
"sail php script.php"
msgstr ""

# P
#: ./docs/8.x/sail.md:138
#: ./docs/9.x/sail.md:157
#: ./docs/10.x/sail.md:161
#: ./docs/11.x/sail.md:176
#: ./docs/master/sail.md:161
#~ msgid "<a name=\"executing-composer-commands\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:139
#: ./docs/9.x/sail.md:158
#: ./docs/10.x/sail.md:162
#: ./docs/11.x/sail.md:177
#: ./docs/master/sail.md:162
msgid "Executing Composer Commands"
msgstr "執行 Composer 指令"

# P
#: ./docs/8.x/sail.md:141
#: ./docs/9.x/sail.md:160
#: ./docs/10.x/sail.md:164
msgid "Composer commands may be executed using the `composer` command. Laravel Sail's application container includes a Composer 2.x installation:"
msgstr "Composer 指令可使用 `composer` 指令執行。Laravel Sail 的應用程式 Container 中包含了 Composer 2.x："

# CODE: nothing
# CODE: shell
#: ./docs/8.x/sail.md:143
#: ./docs/9.x/sail.md:162
#: ./docs/10.x/sail.md:166
#: ./docs/11.x/sail.md:181
#: ./docs/master/sail.md:166
msgid "sail composer require laravel/sanctum"
msgstr ""

# P
#: ./docs/8.x/sail.md:147
#: ./docs/9.x/sail.md:166
#: ./docs/10.x/sail.md:170
#: ./docs/11.x/sail.md:185
#: ./docs/master/sail.md:170
#~ msgid "<a name=\"installing-composer-dependencies-for-existing-projects\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/sail.md:148
#: ./docs/9.x/sail.md:167
msgid "Installing Composer Dependencies For Existing Applications"
msgstr "為現有專案安裝 Composer 相依性套件"

# P
#: ./docs/8.x/sail.md:150
#: ./docs/9.x/sail.md:169
#: ./docs/10.x/sail.md:173
#: ./docs/11.x/sail.md:188
#: ./docs/master/sail.md:173
msgid "If you are developing an application with a team, you may not be the one that initially creates the Laravel application. Therefore, none of the application's Composer dependencies, including Sail, will be installed after you clone the application's repository to your local computer."
msgstr "若與團隊一起開發專案，則讀者可能不是最初新建 Laravel 專案的人。因此，當你將專案的存放庫 Clone 到本機電腦上時，專案中包含 Sail 在內的所有 Composer 相依性套件都還未安裝。"

# P
#: ./docs/8.x/sail.md:152
#: ./docs/9.x/sail.md:171
#: ./docs/10.x/sail.md:175
#: ./docs/11.x/sail.md:190
#: ./docs/master/sail.md:175
msgid "You may install the application's dependencies by navigating to the application's directory and executing the following command. This command uses a small Docker container containing PHP and Composer to install the application's dependencies:"
msgstr "打開專案目錄並執行下列指令即可安裝專案的相依性套件。這個指令會使用一個包含 PHP 與 Composer 的小型 Docker Container 來安裝專案的相依性套件："

# CODE: nothing
#: ./docs/8.x/sail.md:154
msgid ""
"docker run --rm \\\n"
"    -u \"$(id -u):$(id -g)\" \\\n"
"    -v $(pwd):/var/www/html \\\n"
"    -w /var/www/html \\\n"
"    laravelsail/php81-composer:latest \\\n"
"    composer install --ignore-platform-reqs"
msgstr ""

# P
#: ./docs/8.x/sail.md:163
msgid "When using the `laravelsail/phpXX-composer` image, you should use the same version of PHP that you plan to use for your application (`74`, `80`, or `81`)."
msgstr "使用 `laravelsail/phpXX-composer` ^[Image](映像) 時，請使用與你的專案相同的 PHP 版本 (`74`, `80`, `81`)。"

# P
#: ./docs/8.x/sail.md:165
#: ./docs/9.x/sail.md:184
#: ./docs/10.x/sail.md:188
#: ./docs/11.x/sail.md:203
#: ./docs/master/sail.md:188
#~ msgid "<a name=\"executing-artisan-commands\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:166
#: ./docs/9.x/sail.md:185
#: ./docs/10.x/sail.md:189
#: ./docs/11.x/sail.md:204
#: ./docs/master/sail.md:189
msgid "Executing Artisan Commands"
msgstr "執行 Artisan 指令"

# P
#: ./docs/8.x/sail.md:168
#: ./docs/9.x/sail.md:187
#: ./docs/10.x/sail.md:191
#: ./docs/11.x/sail.md:206
#: ./docs/master/sail.md:191
msgid "Laravel Artisan commands may be executed using the `artisan` command:"
msgstr "可使用 `artisan 指令來執行 Laravel Artisan 指令："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:170
#: ./docs/9.x/sail.md:189
#: ./docs/10.x/sail.md:193
#: ./docs/11.x/sail.md:208
#: ./docs/master/sail.md:193
msgid "sail artisan queue:work"
msgstr ""

# H4
#: ./docs/10.x/sail.md:171
#: ./docs/11.x/sail.md:186
#: ./docs/master/sail.md:171
msgid "Installing Composer Dependencies for Existing Applications"
msgstr ""

# CODE: shell
#: ./docs/9.x/sail.md:173
msgid ""
"docker run --rm \\\n"
"    -u \"$(id -u):$(id -g)\" \\\n"
"    -v \"$(pwd):/var/www/html\" \\\n"
"    -w /var/www/html \\\n"
"    laravelsail/php82-composer:latest \\\n"
"    composer install --ignore-platform-reqs"
msgstr ""

# P
#: ./docs/8.x/sail.md:174
#: ./docs/9.x/sail.md:193
#: ./docs/10.x/sail.md:197
#: ./docs/11.x/sail.md:212
#: ./docs/master/sail.md:197
#~ msgid "<a name=\"executing-node-npm-commands\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:175
#: ./docs/9.x/sail.md:194
#: ./docs/10.x/sail.md:198
#: ./docs/11.x/sail.md:213
#: ./docs/master/sail.md:198
msgid "Executing Node / NPM Commands"
msgstr "執行 Node 與 NPM 指令"

# CODE: shell
#: ./docs/10.x/sail.md:177
#: ./docs/11.x/sail.md:192
#: ./docs/master/sail.md:177
msgid ""
"docker run --rm \\\n"
"    -u \"$(id -u):$(id -g)\" \\\n"
"    -v \"$(pwd):/var/www/html\" \\\n"
"    -w /var/www/html \\\n"
"    laravelsail/php83-composer:latest \\\n"
"    composer install --ignore-platform-reqs"
msgstr ""

# P
#: ./docs/8.x/sail.md:177
#: ./docs/9.x/sail.md:196
#: ./docs/10.x/sail.md:200
#: ./docs/11.x/sail.md:215
#: ./docs/master/sail.md:200
msgid "Node commands may be executed using the `node` command while NPM commands may be executed using the `npm` command:"
msgstr "可使用 `node` 指令來執行 Node 指令，而 `npm` 指令可用來執行 NPM 指令："

# P
#: ./docs/11.x/sail.md:179
#: ./docs/master/sail.md:164
msgid "Composer commands may be executed using the `composer` command. Laravel Sail's application container includes a Composer installation:"
msgstr ""

# CODE: nothing
#: ./docs/8.x/sail.md:179
msgid ""
"sail node --version\n"
"\n"
"sail npm run prod"
msgstr ""

# P
#: ./docs/9.x/sail.md:182
msgid "When using the `laravelsail/phpXX-composer` image, you should use the same version of PHP that you plan to use for your application (`74`, `80`, `81`, or `82`)."
msgstr "使用 `laravelsail/phpXX-composer` ^[Image](映像) 時，請使用與你的專案相同的 PHP 版本 (`74`, `80`, `81`, `82`)。"

# P
#: ./docs/8.x/sail.md:185
#: ./docs/9.x/sail.md:204
#: ./docs/10.x/sail.md:208
#: ./docs/11.x/sail.md:223
#: ./docs/master/sail.md:208
msgid "If you wish, you may use Yarn instead of NPM:"
msgstr "若有需要，除了 NPM 外也可使用 Yarn："

# P
#: ./docs/10.x/sail.md:186
#: ./docs/11.x/sail.md:201
#: ./docs/master/sail.md:186
msgid "When using the `laravelsail/phpXX-composer` image, you should use the same version of PHP that you plan to use for your application (`80`, `81`, `82`, or `83`)."
msgstr ""

# CODE: nothing
# CODE: shell
#: ./docs/8.x/sail.md:187
#: ./docs/9.x/sail.md:206
#: ./docs/10.x/sail.md:210
#: ./docs/11.x/sail.md:225
#: ./docs/master/sail.md:210
msgid "sail yarn"
msgstr ""

# P
#: ./docs/8.x/sail.md:191
#: ./docs/9.x/sail.md:210
#: ./docs/10.x/sail.md:214
#: ./docs/11.x/sail.md:229
#: ./docs/master/sail.md:214
#~ msgid "<a name=\"interacting-with-sail-databases\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:192
#: ./docs/9.x/sail.md:211
#: ./docs/10.x/sail.md:215
#: ./docs/11.x/sail.md:230
#: ./docs/master/sail.md:215
msgid "Interacting With Databases"
msgstr "使用資料庫"

# P
#: ./docs/8.x/sail.md:194
#: ./docs/9.x/sail.md:213
#: ./docs/10.x/sail.md:217
#: ./docs/11.x/sail.md:232
#: ./docs/master/sail.md:217
#~ msgid "<a name=\"mysql\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:195
#: ./docs/9.x/sail.md:214
#: ./docs/10.x/sail.md:218
#: ./docs/11.x/sail.md:233
#: ./docs/master/sail.md:218
msgid "MySQL"
msgstr "MySQL"

# P
#: ./docs/8.x/sail.md:197
msgid "As you may have noticed, your application's `docker-compose.yml` file contains an entry for a MySQL container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your database is persisted even when stopping and restarting your containers. In addition, when the MySQL container is starting, it will ensure a database exists whose name matches the value of your `DB_DATABASE` environment variable."
msgstr "讀者可能已經注意到，專案的 `docker-compose.yml` 中有包含 MySQL Container 的設定。這個 Container 使用 [Docker Volume](https://docs.docker.com/storage/volumes/)，這樣一來就算停止或重新啟動 Container，保存在資料庫中的資料也不會不見。此外，開啟 MySQL Container 時，該 Container 卻確保 `DB_DATABASE` 環境變數所設定的資料庫存在。"

# CODE: shell
#: ./docs/9.x/sail.md:198
#: ./docs/10.x/sail.md:202
#: ./docs/11.x/sail.md:217
#: ./docs/master/sail.md:202
msgid ""
"sail node --version\n"
"\n"
"sail npm run dev"
msgstr ""

# P
#: ./docs/8.x/sail.md:199
#: ./docs/9.x/sail.md:220
#: ./docs/10.x/sail.md:224
#: ./docs/11.x/sail.md:239
#: ./docs/master/sail.md:224
msgid "Once you have started your containers, you may connect to the MySQL instance within your application by setting your `DB_HOST` environment variable within your application's `.env` file to `mysql`."
msgstr "啟動 Container 後，可以在專案的 `.env` 檔案中將 `DB_HOST` 環境變數設為 `mysql` 來讓網站連線到 MySQL 實體。"

# P
#: ./docs/8.x/sail.md:201
msgid "To connect to your application's MySQL database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the MySQL database is accessible at `localhost` port 3306."
msgstr "若要從本機電腦連線到專案的 MySQL 資料庫，可以使用如 [TablePlus](https://tableplus.com) 等的圖形化資料庫管理程式。預設情況下，可以使用 `localhost` 的 3306 連接埠來存取 MySQL 資料庫。"

# P
#: ./docs/8.x/sail.md:203
#: ./docs/9.x/sail.md:224
#: ./docs/10.x/sail.md:228
#: ./docs/11.x/sail.md:260
#: ./docs/master/sail.md:228
#~ msgid "<a name=\"redis\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:204
#: ./docs/9.x/sail.md:225
#: ./docs/10.x/sail.md:229
#: ./docs/11.x/sail.md:261
#: ./docs/master/sail.md:229
msgid "Redis"
msgstr "Redis"

# P
#: ./docs/8.x/sail.md:206
#: ./docs/9.x/sail.md:227
#: ./docs/10.x/sail.md:231
#: ./docs/11.x/sail.md:263
#: ./docs/master/sail.md:231
msgid "Your application's `docker-compose.yml` file also contains an entry for a [Redis](https://redis.io) container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your Redis data is persisted even when stopping and restarting your containers. Once you have started your containers, you may connect to the Redis instance within your application by setting your `REDIS_HOST` environment variable within your application's `.env` file to `redis`."
msgstr "專案的 `docker-compose.yml` 檔案中也包含了 [Redis](https://redis.io) Container 的設定。這個 Container 使用了 [Docker volume](https://docs.docker.com/storage/volumes/)，這樣一來即使停止或重新啟動 Container，保存在 Redis 裡的資料也不會不見。啟動 Container 後，只要將 `.env` 檔中的 `REDIS_HOST` 環境變數設為 `redis`，就可讓網站連線到 Redis 實體。"

# P
#: ./docs/8.x/sail.md:208
#: ./docs/9.x/sail.md:229
#: ./docs/10.x/sail.md:233
#: ./docs/11.x/sail.md:265
#: ./docs/master/sail.md:233
msgid "To connect to your application's Redis database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the Redis database is accessible at `localhost` port 6379."
msgstr "若要從本機電腦連線到專案的 Redis 資料庫，可以使用如 [TablePlus](https://tableplus.com) 等的圖形化資料庫管理程式。預設情況下，可以使用 `localhost` 的 6379 連接埠來存取 Redis 資料庫。"

# P
#: ./docs/8.x/sail.md:210
#: ./docs/9.x/sail.md:231
#: ./docs/10.x/sail.md:235
#: ./docs/11.x/sail.md:267
#: ./docs/master/sail.md:235
#~ msgid "<a name=\"meilisearch\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:211
#: ./docs/9.x/sail.md:232
msgid "MeiliSearch"
msgstr "MeiliSearch"

# P
#: ./docs/8.x/sail.md:213
#: ./docs/9.x/sail.md:234
msgid "If you chose to install the [MeiliSearch](https://www.meilisearch.com) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this powerful search-engine that is [compatible](https://github.com/meilisearch/meilisearch-laravel-scout) with [Laravel Scout](/docs/{{version}}/scout). Once you have started your containers, you may connect to the MeiliSearch instance within your application by setting your `MEILISEARCH_HOST` environment variable to `http://meilisearch:7700`."
msgstr "若在安裝 Sail 時有選擇安裝 [MeiliSearch](https://www.meilisearch.com)，則專案的 `docker-compose.yml` 檔中也會包含 MeiliSearch 的設定。MeiliSearch 是一個強大的搜尋引擎，與 [Laravel Scout](/docs/{{version}}/scout) [相容](https://github.com/meilisearch/meilisearch-laravel-scout)。啟動 Container 後，只要將 `MEILISEARCH_HOST` 環境變數設為 `http://meilisearch:7700` 即可讓網站連線到 MeiliSearch 實體。"

# P
#: ./docs/8.x/sail.md:215
#: ./docs/9.x/sail.md:236
msgid "From your local machine, you may access MeiliSearch's web based administration panel by navigating to `http://localhost:7700` in your web browser."
msgstr "在本機上，只要在瀏覽器上打開 `http://localhost:7700`，就可存取 MeiliSearch 的網頁管理面板。"

# P
#: ./docs/9.x/sail.md:216
#: ./docs/10.x/sail.md:220
#: ./docs/11.x/sail.md:235
#: ./docs/master/sail.md:220
msgid "As you may have noticed, your application's `docker-compose.yml` file contains an entry for a MySQL container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your database is persisted even when stopping and restarting your containers."
msgstr "讀者可能已經注意到，專案的 `docker-compose.yml` 中有包含 MySQL Container 的設定。這個 Container 使用 [Docker Volume](https://docs.docker.com/storage/volumes/)，這樣一來就算停止或重新啟動 Container，保存在資料庫中的資料也不會不見。"

# P
#: ./docs/8.x/sail.md:217
#: ./docs/9.x/sail.md:238
#: ./docs/10.x/sail.md:256
#: ./docs/11.x/sail.md:288
#: ./docs/master/sail.md:256
#~ msgid "<a name=\"file-storage\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:218
#: ./docs/9.x/sail.md:239
#: ./docs/10.x/sail.md:257
#: ./docs/11.x/sail.md:289
#: ./docs/master/sail.md:257
msgid "File Storage"
msgstr "檔案儲存"

# P
#: ./docs/9.x/sail.md:218
#: ./docs/10.x/sail.md:222
#: ./docs/11.x/sail.md:237
#: ./docs/master/sail.md:222
msgid "In addition, the first time the MySQL container starts, it will create two databases for you. The first database is named using the value of your `DB_DATABASE` environment variable and is for your local development. The second is a dedicated testing database named `testing` and will ensure that your tests do not interfere with your development data."
msgstr "此外，第一次啟動 MySQL Container 時，該 Container 會幫你建立兩個資料庫。第一個資料庫會使用 `DB_DATABASE` 環境變數所設定的名稱，作為本機開發之用。第二個資料庫是專門用來測試的，名稱為 `test`，用來確保測試時不會影響到開發資料。"

# P
#: ./docs/8.x/sail.md:220
#: ./docs/9.x/sail.md:241
#: ./docs/10.x/sail.md:259
#: ./docs/11.x/sail.md:291
#: ./docs/master/sail.md:259
msgid "If you plan to use Amazon S3 to store files while running your application in its production environment, you may wish to install the [MinIO](https://min.io) service when installing Sail. MinIO provides an S3 compatible API that you may use to develop locally using Laravel's `s3` file storage driver without creating \"test\" storage buckets in your production S3 environment. If you choose to install MinIO while installing Sail, a MinIO configuration section will be added to your application's `docker-compose.yml` file."
msgstr "若打算在正式環境使用 Amazon S3 來儲存檔案，則建議在安裝 Sail 時安裝 [MinIO](https://min.io) 服務。MinIO 提供了與 S3 相容的 API，讓你可以在本機開發時不用在正式的 S3 環境上建立測試用的 Bucket，就能使用 Laravel 的 `s3` 檔案儲存 Driver。若在安裝 Sail 時有選擇安裝 MinIO，則 `docker-compose.yml` 檔案中就會有 MinIO 相關的設定。"

# P
#: ./docs/8.x/sail.md:222
#: ./docs/9.x/sail.md:243
#: ./docs/10.x/sail.md:261
#: ./docs/11.x/sail.md:293
#: ./docs/master/sail.md:261
msgid "By default, your application's `filesystems` configuration file already contains a disk configuration for the `s3` disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as MinIO by simply modifying the associated environment variables that control its configuration. For example, when using MinIO, your filesystem environment variable configuration should be defined as follows:"
msgstr "預設情況下，專案中的 `filesystems` 設定檔內已經有包含 `s3` Disk 的設定了。除了通過此 Disk 來使用 Amazon S3 外，只要修改該設定相關的環境變數，就可以通過這個 Disk 來使用任何如 MinIO 等 S3 相容的檔案儲存服務。舉例來說，使用 MinIO 時，應像這樣定義 ^[Filesystem](檔案系統) 環境變數："

# P
#: ./docs/9.x/sail.md:222
#: ./docs/10.x/sail.md:226
#: ./docs/11.x/sail.md:241
#: ./docs/master/sail.md:226
msgid "To connect to your application's MySQL database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the MySQL database is accessible at `localhost` port 3306 and the access credentials correspond to the values of your `DB_USERNAME` and `DB_PASSWORD` environment variables. Or, you may connect as the `root` user, which also utilizes the value of your `DB_PASSWORD` environment variable as its password."
msgstr "若要從本機上連線到專案的 MySQL 資料庫，可使用圖形化的資料庫管理工具，如 [TablePlus](https://tableplus.com)。預設情況下，可以在 `localhost` 的 3306 連接埠上存取 MySQL 資料庫，而帳號密碼則對應到 `DB_USERNAME` 與 `DB_PASSWORD` 環境變數。或者，也可以使用 `root` 使用者來連線，其密碼一樣是 `DB_PASSWORD` 環境變數值。"

# CODE: ini
#: ./docs/8.x/sail.md:224
msgid ""
"FILESYSTEM_DRIVER=s3\n"
"AWS_ACCESS_KEY_ID=sail\n"
"AWS_SECRET_ACCESS_KEY=password\n"
"AWS_DEFAULT_REGION=us-east-1\n"
"AWS_BUCKET=local\n"
"AWS_ENDPOINT=http://minio:9000\n"
"AWS_USE_PATH_STYLE_ENDPOINT=true"
msgstr ""

# P
#: ./docs/8.x/sail.md:234
#: ./docs/9.x/sail.md:266
#: ./docs/10.x/sail.md:284
#: ./docs/11.x/sail.md:316
#: ./docs/master/sail.md:284
#~ msgid "<a name=\"running-tests\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:235
#: ./docs/9.x/sail.md:267
#: ./docs/10.x/sail.md:285
#: ./docs/11.x/sail.md:317
#: ./docs/master/sail.md:285
msgid "Running Tests"
msgstr "執行測試"

# H3
#: ./docs/10.x/sail.md:236
#: ./docs/11.x/sail.md:268
#: ./docs/master/sail.md:236
msgid "Meilisearch"
msgstr "Meilisearch"

# P
#: ./docs/8.x/sail.md:237
#: ./docs/9.x/sail.md:269
#: ./docs/10.x/sail.md:287
msgid "Laravel provides amazing testing support out of the box, and you may use Sail's `test` command to run your applications [feature and unit tests](/docs/{{version}}/testing). Any CLI options that are accepted by PHPUnit may also be passed to the `test` command:"
msgstr "Laravel 內建了許多測試輔助功能。可以使用 Sail 的 `test` 指令來執行專案的 [Feature Test 與 Unit Test](/docs/{{version}}/testing)。可以傳入任何 PHPUnit 支援的 CLI 選項給 `test` 指令："

# P
#: ./docs/10.x/sail.md:238
#: ./docs/master/sail.md:238
msgid "If you chose to install the [Meilisearch](https://www.meilisearch.com) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this powerful search-engine that is [compatible](https://github.com/meilisearch/meilisearch-laravel-scout) with [Laravel Scout](/docs/{{version}}/scout). Once you have started your containers, you may connect to the Meilisearch instance within your application by setting your `MEILISEARCH_HOST` environment variable to `http://meilisearch:7700`."
msgstr "若在安裝 Sail 時有選擇安裝 [Meilisearch](https://www.meilisearch.com)，則專案的 `docker-compose.yml` 檔中也會包含 Meilisearch 的設定。Meilisearch 是一個強大的搜尋引擎，與 [Laravel Scout](/docs/{{version}}/scout) [相容](https://github.com/meilisearch/meilisearch-laravel-scout)。啟動 Container 後，只要將 `MEILISEARCH_HOST` 環境變數設為 `http://meilisearch:7700` 即可讓網站連線到 Meilisearch 實體。"

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:239
#: ./docs/9.x/sail.md:271
#: ./docs/10.x/sail.md:289
#: ./docs/11.x/sail.md:321
#: ./docs/master/sail.md:289
msgid ""
"sail test\n"
"\n"
"sail test --group orders"
msgstr ""

# P
#: ./docs/10.x/sail.md:240
#: ./docs/11.x/sail.md:272
#: ./docs/master/sail.md:240
msgid "From your local machine, you may access Meilisearch's web based administration panel by navigating to `http://localhost:7700` in your web browser."
msgstr "在本機上，只要在瀏覽器上打開 `http://localhost:7700`，就可存取 Meilisearch 的網頁管理面板。"

# P
#: ./docs/10.x/sail.md:242
#: ./docs/11.x/sail.md:274
#: ./docs/master/sail.md:242
#~ msgid "<a name=\"typesense\"></a>"
#~ msgstr ""

# H3
#: ./docs/10.x/sail.md:243
#: ./docs/11.x/sail.md:275
#: ./docs/master/sail.md:243
msgid "Typesense"
msgstr ""

# P
#: ./docs/11.x/sail.md:243
#~ msgid "<a name=\"mongodb\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/sail.md:243
#: ./docs/9.x/sail.md:277
#: ./docs/10.x/sail.md:295
#: ./docs/11.x/sail.md:327
#: ./docs/master/sail.md:295
msgid "The Sail `test` command is equivalent to running the `test` Artisan command:"
msgstr "Sail 的 `test` 指令與執行 `test` Artisan 指令相同："

# H3
#: ./docs/11.x/sail.md:244
msgid "MongoDB"
msgstr ""

# P
#: ./docs/10.x/sail.md:245
#: ./docs/master/sail.md:245
msgid "If you chose to install the [Typesense](https://typesense.org) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this lightning fast, open-source search-engine that is natively integrated with [Laravel Scout](/docs/{{version}}/scout#typesense). Once you have started your containers, you may connect to the Typesense instance within your application by setting the following environment variables:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:245
#: ./docs/9.x/sail.md:279
#: ./docs/10.x/sail.md:297
#: ./docs/11.x/sail.md:329
#: ./docs/master/sail.md:297
msgid "sail artisan test"
msgstr ""

# CODE: ini
#: ./docs/9.x/sail.md:245
#: ./docs/10.x/sail.md:263
#: ./docs/11.x/sail.md:295
#: ./docs/master/sail.md:263
msgid ""
"FILESYSTEM_DISK=s3\n"
"AWS_ACCESS_KEY_ID=sail\n"
"AWS_SECRET_ACCESS_KEY=password\n"
"AWS_DEFAULT_REGION=us-east-1\n"
"AWS_BUCKET=local\n"
"AWS_ENDPOINT=http://minio:9000\n"
"AWS_USE_PATH_STYLE_ENDPOINT=true"
msgstr ""

# P
#: ./docs/11.x/sail.md:246
msgid "If you chose to install the [MongoDB](https://www.mongodb.com/) service when installing Sail, your application's `docker-compose.yml` file contains an entry for a [MongoDB Atlas Local](https://www.mongodb.com/docs/atlas/cli/current/atlas-cli-local-cloud/) container which provides the MongoDB document database with Atlas features like [Search Indexes](https://www.mongodb.com/docs/atlas/atlas-search/). This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your database is persisted even when stopping and restarting your containers."
msgstr ""

# CODE: ini
#: ./docs/10.x/sail.md:247
#: ./docs/11.x/sail.md:279
#: ./docs/master/sail.md:247
msgid ""
"TYPESENSE_HOST=typesense\n"
"TYPESENSE_PORT=8108\n"
"TYPESENSE_PROTOCOL=http\n"
"TYPESENSE_API_KEY=xyz"
msgstr ""

# P
#: ./docs/8.x/sail.md:247
#: ./docs/9.x/sail.md:289
#: ./docs/10.x/sail.md:307
#: ./docs/11.x/sail.md:339
#: ./docs/master/sail.md:307
#~ msgid "<a name=\"laravel-dusk\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/sail.md:248
msgid "Once you have started your containers, you may connect to the MongoDB instance within your application by setting your `MONGODB_URI` environment variable within your application's `.env` file to `mongodb://mongodb:27017`. Authentication is disabled by default, but you can set the `MONGODB_USERNAME` and `MONGODB_PASSWORD` environment variables to enable authentication before starting the `mongodb` container. Then, add the credentials to the connection string:"
msgstr ""

# H3
#: ./docs/8.x/sail.md:248
#: ./docs/9.x/sail.md:290
#: ./docs/10.x/sail.md:308
#: ./docs/11.x/sail.md:340
#: ./docs/master/sail.md:308
msgid "Laravel Dusk"
msgstr "Laravel Dusk"

# CODE: ini
#: ./docs/11.x/sail.md:250
msgid ""
"MONGODB_USERNAME=user\n"
"MONGODB_PASSWORD=laravel\n"
"MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017"
msgstr ""

# P
#: ./docs/8.x/sail.md:250
#: ./docs/9.x/sail.md:292
#: ./docs/10.x/sail.md:310
#: ./docs/11.x/sail.md:342
#: ./docs/master/sail.md:310
msgid "[Laravel Dusk](/docs/{{version}}/dusk) provides an expressive, easy-to-use browser automation and testing API. Thanks to Sail, you may run these tests without ever installing Selenium or other tools on your local computer. To get started, uncomment the Selenium service in your application's `docker-compose.yml` file:"
msgstr "[Laravel Dusk](/docs/{{version}}/dusk) 提供了豐富且簡單易用的瀏覽器自動化與測試 API。多虧有 Sail，我們不需要在本機電腦上安裝 Selenium 或其他工具，就能執行這些 Dusk 測試。若要開始使用 Dusk，請先在專案的 `docker-compose.yml` 檔案中將 Slenium 服務取消註解："

# CODE: yaml
#: ./docs/8.x/sail.md:252
#: ./docs/9.x/sail.md:294
msgid ""
"selenium:\n"
"    image: 'selenium/standalone-chrome'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail"
msgstr ""

# P
#: ./docs/10.x/sail.md:254
#: ./docs/11.x/sail.md:286
#: ./docs/master/sail.md:254
msgid "From your local machine, you may access Typesense's API via `http://localhost:8108`."
msgstr ""

# P
#: ./docs/9.x/sail.md:255
#: ./docs/10.x/sail.md:273
#: ./docs/11.x/sail.md:305
#: ./docs/master/sail.md:273
msgid "In order for Laravel's Flysystem integration to generate proper URLs when using MinIO, you should define the `AWS_URL` environment variable so that it matches your application's local URL and includes the bucket name in the URL path:"
msgstr "為了讓 Laravel 的 Flysystem 整合在使用 MinIO 時整合正確的 URL，請定義 `AWS_URL` 環境變數，並設定適用於專案本機 URL 的值，且該值應在 URL 路徑內包含 Bucket 名稱："

# P
#: ./docs/11.x/sail.md:256
msgid "For seamless integration of MongoDB with your application, you can install the [official package maintained by MongoDB](https://www.mongodb.com/docs/drivers/php/laravel-mongodb/)."
msgstr ""

# CODE: ini
#: ./docs/9.x/sail.md:257
#: ./docs/10.x/sail.md:275
#: ./docs/11.x/sail.md:307
#: ./docs/master/sail.md:275
msgid "AWS_URL=http://localhost:9000/local"
msgstr ""

# P
#: ./docs/11.x/sail.md:258
msgid "To connect to your application's MongoDB database from your local machine, you may use a graphical interface such as [Compass](https://www.mongodb.com/products/tools/compass). By default, the MongoDB database is accessible at `localhost` port `27017`."
msgstr ""

# P
#: ./docs/8.x/sail.md:261
#: ./docs/9.x/sail.md:303
#: ./docs/10.x/sail.md:323
#: ./docs/11.x/sail.md:355
#: ./docs/master/sail.md:323
msgid "Next, ensure that the `laravel.test` service in your application's `docker-compose.yml` file has a `depends_on` entry for `selenium`:"
msgstr "接著，請確保專案的 `docker-compose.yml` 檔案中，`laravel.test` 服務的 `depends_on` 欄位中有 `selenium`："

# P
#: ./docs/9.x/sail.md:261
#: ./docs/10.x/sail.md:279
#: ./docs/11.x/sail.md:311
#: ./docs/master/sail.md:279
msgid "You may create buckets via the MinIO console, which is available at `http://localhost:8900`. The default username for the MinIO console is `sail` while the default password is `password`."
msgstr "可以使用 MinIO Console 來建立 Bucket。MinIO Console 可從 `http://localhost:8900` 開啟。MinIO Console 預設的使用者名稱是 `sail`，預設密碼為 `password`。"

# CODE: yaml
#: ./docs/8.x/sail.md:263
#: ./docs/9.x/sail.md:305
#: ./docs/10.x/sail.md:325
#: ./docs/11.x/sail.md:357
#: ./docs/master/sail.md:325
msgid ""
"depends_on:\n"
"    - mysql\n"
"    - redis\n"
"    - selenium"
msgstr ""

# P
#: ./docs/9.x/sail.md:264
#: ./docs/10.x/sail.md:282
#: ./docs/11.x/sail.md:314
#: ./docs/master/sail.md:282
msgid "Generating temporary storage URLs via the `temporaryUrl` method is not supported when using MinIO."
msgstr "使用 MinIO 時，不支援通過 `temporaryUrl` 方法來產生臨時儲存空間 URL。"

# P
#: ./docs/11.x/sail.md:270
msgid "If you chose to install the [Meilisearch](https://www.meilisearch.com) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this powerful search engine that is integrated with [Laravel Scout](/docs/{{version}}/scout). Once you have started your containers, you may connect to the Meilisearch instance within your application by setting your `MEILISEARCH_HOST` environment variable to `http://meilisearch:7700`."
msgstr ""

# P
#: ./docs/8.x/sail.md:270
#: ./docs/9.x/sail.md:312
#: ./docs/10.x/sail.md:332
#: ./docs/11.x/sail.md:364
#: ./docs/master/sail.md:332
msgid "Finally, you may run your Dusk test suite by starting Sail and running the `dusk` command:"
msgstr "最後，只要啟動 Sail 並執行 `dusk` 指令，就能執行 Dusk 的測試套件："

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:272
#: ./docs/9.x/sail.md:314
#: ./docs/10.x/sail.md:334
#: ./docs/11.x/sail.md:366
#: ./docs/master/sail.md:334
msgid "sail dusk"
msgstr ""

# P
#: ./docs/8.x/sail.md:274
#: ./docs/9.x/sail.md:318
#: ./docs/10.x/sail.md:338
#: ./docs/11.x/sail.md:370
#: ./docs/master/sail.md:338
#~ msgid "<a name=\"selenium-on-apple-silicon\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/sail.md:275
#: ./docs/9.x/sail.md:319
msgid "Selenium On Apple Silicon"
msgstr "在 Apple Silicon 上的 Selenium"

# P
#: ./docs/11.x/sail.md:277
msgid "If you chose to install the [Typesense](https://typesense.org) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this lightning fast, open-source search engine that is natively integrated with [Laravel Scout](/docs/{{version}}/scout#typesense). Once you have started your containers, you may connect to the Typesense instance within your application by setting the following environment variables:"
msgstr ""

# P
#: ./docs/8.x/sail.md:277
#: ./docs/9.x/sail.md:321
#: ./docs/10.x/sail.md:341
#: ./docs/master/sail.md:341
msgid "If your local machine contains an Apple Silicon chip, your `selenium` service must use the `seleniarm/standalone-chromium` image:"
msgstr "如果你的本機設備為 Apple Silicon 晶片，則 `selenium` 服務必須使用 `seleniarm/standalone-chromium` Image："

# CODE: yaml
#: ./docs/8.x/sail.md:279
#: ./docs/9.x/sail.md:323
msgid ""
"selenium:\n"
"    image: 'seleniarm/standalone-chromium'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail"
msgstr ""

# P
#: ./docs/9.x/sail.md:283
#: ./docs/10.x/sail.md:301
#: ./docs/11.x/sail.md:333
#: ./docs/master/sail.md:301
msgid "By default, Sail will create a dedicated `testing` database so that your tests do not interfere with the current state of your database. In a default Laravel installation, Sail will also configure your `phpunit.xml` file to use this database when executing your tests:"
msgstr "預設情況下，Sail 會建立一個專門的 `testing` 資料庫，以避免測試時影響到目前資料庫的狀態。在預設的 Laravel 專案中，Sail 也會調整 `phpunit.xml` 檔的設定，以在執行測試時使用這個資料庫："

# CODE: xml
#: ./docs/9.x/sail.md:285
#: ./docs/10.x/sail.md:303
#: ./docs/11.x/sail.md:335
#: ./docs/master/sail.md:303
msgid "<env name=\"DB_DATABASE\" value=\"testing\"/>"
msgstr ""

# P
#: ./docs/8.x/sail.md:288
#: ./docs/9.x/sail.md:332
#: ./docs/10.x/sail.md:354
#: ./docs/11.x/sail.md:386
#: ./docs/master/sail.md:354
#~ msgid "<a name=\"previewing-emails\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:289
#: ./docs/9.x/sail.md:333
#: ./docs/10.x/sail.md:355
#: ./docs/11.x/sail.md:387
#: ./docs/master/sail.md:355
msgid "Previewing Emails"
msgstr "預覽 E-Mail"

# P
#: ./docs/8.x/sail.md:291
msgid "Laravel Sail's default `docker-compose.yml` file contains a service entry for [MailHog](https://github.com/mailhog/MailHog). MailHog intercepts emails sent by your application during local development and provides a convenient web interface so that you can preview your email messages in your browser. When using Sail, MailHog's default host is `mailhog` and is available via port 1025:"
msgstr "Laravel Sail 的預設 `docker-compose.yml` 檔案中包含了 [MailHog](https://github.com/mailhog/MailHog) 服務。MailHog 會在本機開發過程中攔截你的專案所寄出的所有 E-Mail，並提供一個方便的 Web 界面可供你在瀏覽器中預覽這些 E-Mail 訊息。使用 Sail 時，MailHog 的預設主機名稱為 `mailhog`，且可在連接埠 1025 上使用："

# CODE: bash
#: ./docs/8.x/sail.md:293
msgid ""
"MAIL_HOST=mailhog\n"
"MAIL_PORT=1025\n"
"MAIL_ENCRYPTION=null"
msgstr ""

# P
#: ./docs/8.x/sail.md:299
msgid "When Sail is running, you may access the MailHog web interface at: [http://localhost:8025](http://localhost:8025)"
msgstr ""

# P
#: ./docs/8.x/sail.md:301
#: ./docs/9.x/sail.md:345
#: ./docs/10.x/sail.md:367
#: ./docs/11.x/sail.md:399
#: ./docs/master/sail.md:367
#~ msgid "<a name=\"sail-container-cli\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:302
#: ./docs/9.x/sail.md:346
#: ./docs/10.x/sail.md:368
#: ./docs/11.x/sail.md:400
#: ./docs/master/sail.md:368
msgid "Container CLI"
msgstr "Container CLI"

# P
#: ./docs/8.x/sail.md:304
#: ./docs/9.x/sail.md:348
#: ./docs/10.x/sail.md:370
#: ./docs/master/sail.md:370
msgid "Sometimes you may wish to start a Bash session within your application's container. You may use the `shell` command to connect to your application's container, allowing you to inspect its files and installed services as well execute arbitrary shell commands within the container:"
msgstr "有時候，我們可能會需要在專案的 Container 內開啟 Bash 工作階段。可以使用 `shell` 指令來連線到專案的 Container 中，讓我們能檢視其中的檔案與所安裝的服務，並可在 Container 中執行任意 Shell 指令："

# CODE: nothing
# CODE: shell
#: ./docs/8.x/sail.md:306
#: ./docs/9.x/sail.md:350
#: ./docs/10.x/sail.md:372
#: ./docs/11.x/sail.md:404
#: ./docs/master/sail.md:372
msgid ""
"sail shell\n"
"\n"
"sail root-shell"
msgstr ""

# CODE: yaml
#: ./docs/10.x/sail.md:312
#: ./docs/11.x/sail.md:344
#: ./docs/master/sail.md:312
msgid ""
"selenium:\n"
"    image: 'selenium/standalone-chrome'\n"
"    extra_hosts:\n"
"      - 'host.docker.internal:host-gateway'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail"
msgstr ""

# P
#: ./docs/8.x/sail.md:312
#: ./docs/9.x/sail.md:356
#: ./docs/10.x/sail.md:378
#: ./docs/11.x/sail.md:410
#: ./docs/master/sail.md:378
msgid "To start a new [Laravel Tinker](https://github.com/laravel/tinker) session, you may execute the `tinker` command:"
msgstr "若要啟動新的 [Laravel Tinker](https://github.com/laravel/tinker) 工作階段，可執行 `tinker` 指令："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:314
#: ./docs/9.x/sail.md:358
#: ./docs/10.x/sail.md:380
#: ./docs/11.x/sail.md:412
#: ./docs/master/sail.md:380
msgid "sail tinker"
msgstr ""

# P
#: ./docs/8.x/sail.md:318
#: ./docs/9.x/sail.md:362
#: ./docs/10.x/sail.md:384
#: ./docs/11.x/sail.md:416
#: ./docs/master/sail.md:384
#~ msgid "<a name=\"sail-php-versions\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/sail.md:319
#: ./docs/master/sail.md:287
msgid "Laravel provides amazing testing support out of the box, and you may use Sail's `test` command to run your applications [feature and unit tests](/docs/{{version}}/testing). Any CLI options that are accepted by Pest / PHPUnit may also be passed to the `test` command:"
msgstr ""

# H2
#: ./docs/8.x/sail.md:319
#: ./docs/9.x/sail.md:363
#: ./docs/10.x/sail.md:385
#: ./docs/11.x/sail.md:417
#: ./docs/master/sail.md:385
msgid "PHP Versions"
msgstr "PHP 版本"

# P
#: ./docs/8.x/sail.md:321
msgid "Sail currently supports serving your application via PHP 8.1, PHP 8.0, or PHP 7.4. The default PHP version used by Sail is currently PHP 8.1. To change the PHP version that is used to serve your application, you should update the `build` definition of the `laravel.test` container in your application's `docker-compose.yml` file:"
msgstr "Sail 目前支援使用 PHP 8.1、PHP 8.0、或 PHP 7.4 來執行你的專案。目前 Sail 所使用的預設 PHP 版本為 PHP 8.1。若要修改專案使用的 PHP 版本，請更新 `docker-compose.yml` 檔案中 `laravel.test` Container 的 `build` 定義："

# CODE: yaml
#: ./docs/8.x/sail.md:323
msgid ""
"# PHP 8.1\n"
"context: ./vendor/laravel/sail/runtimes/8.1\n"
"\n"
"# PHP 8.0\n"
"context: ./vendor/laravel/sail/runtimes/8.0\n"
"\n"
"# PHP 7.4\n"
"context: ./vendor/laravel/sail/runtimes/7.4"
msgstr ""

# P
#: ./docs/8.x/sail.md:334
#: ./docs/9.x/sail.md:381
#: ./docs/10.x/sail.md:403
#: ./docs/11.x/sail.md:438
#: ./docs/master/sail.md:403
msgid "In addition, you may wish to update your `image` name to reflect the version of PHP being used by your application. This option is also defined in your application's `docker-compose.yml` file:"
msgstr "此外，也可更新 `image` 的名稱，以反應專案所使用的 PHP 版本。`image` 名稱的設定在專案的 `docker-compose.yml` 檔內："

# P
#: ./docs/9.x/sail.md:335
#: ./docs/10.x/sail.md:357
#: ./docs/11.x/sail.md:389
#: ./docs/master/sail.md:357
msgid "Laravel Sail's default `docker-compose.yml` file contains a service entry for [Mailpit](https://github.com/axllent/mailpit). Mailpit intercepts emails sent by your application during local development and provides a convenient web interface so that you can preview your email messages in your browser. When using Sail, Mailpit's default host is `mailpit` and is available via port 1025:"
msgstr "Laravel Sail 的預設 `docker-compose.yml` 檔案中包含了 [Mailpit](https://github.com/axllent/mailpit) 服務。Mailpit 會在本機開發過程中攔截你的專案所寄出的所有 E-Mail，並提供一個方便的 Web 界面可供你在瀏覽器中預覽這些 E-Mail 訊息。使用 Sail 時，Mailpit 的預設主機名稱為 `mailpit`，且可在連接埠 1025 上使用："

# CODE: yaml
#: ./docs/8.x/sail.md:336
#: ./docs/9.x/sail.md:383
#: ./docs/10.x/sail.md:405
msgid "image: sail-8.1/app"
msgstr ""

# CODE: ini
#: ./docs/9.x/sail.md:337
#: ./docs/10.x/sail.md:359
#: ./docs/11.x/sail.md:391
#: ./docs/master/sail.md:359
msgid ""
"MAIL_HOST=mailpit\n"
"MAIL_PORT=1025\n"
"MAIL_ENCRYPTION=null"
msgstr ""

# H4
#: ./docs/10.x/sail.md:339
#: ./docs/11.x/sail.md:371
#: ./docs/master/sail.md:339
msgid "Selenium on Apple Silicon"
msgstr ""

# P
#: ./docs/8.x/sail.md:340
#: ./docs/8.x/sail.md:358
#: ./docs/9.x/sail.md:387
#: ./docs/9.x/sail.md:407
#: ./docs/10.x/sail.md:409
#: ./docs/10.x/sail.md:429
#: ./docs/11.x/sail.md:444
#: ./docs/11.x/sail.md:464
#: ./docs/master/sail.md:409
#: ./docs/master/sail.md:429
msgid "After updating your application's `docker-compose.yml` file, you should rebuild your container images:"
msgstr "更新好專案的 `docker-compose.yml` 後，請重新建置 Container Image："

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:342
#: ./docs/8.x/sail.md:360
#: ./docs/9.x/sail.md:389
#: ./docs/9.x/sail.md:409
#: ./docs/10.x/sail.md:411
#: ./docs/10.x/sail.md:431
#: ./docs/11.x/sail.md:446
#: ./docs/11.x/sail.md:466
#: ./docs/master/sail.md:411
#: ./docs/master/sail.md:431
msgid ""
"sail build --no-cache\n"
"\n"
"sail up"
msgstr ""

# CODE: yaml
#: ./docs/10.x/sail.md:343
#: ./docs/master/sail.md:343
msgid ""
"selenium:\n"
"    image: 'seleniarm/standalone-chromium'\n"
"    extra_hosts:\n"
"        - 'host.docker.internal:host-gateway'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail"
msgstr ""

# P
#: ./docs/9.x/sail.md:343
#: ./docs/10.x/sail.md:365
#: ./docs/11.x/sail.md:397
#: ./docs/master/sail.md:365
msgid "When Sail is running, you may access the Mailpit web interface at: [http://localhost:8025](http://localhost:8025)"
msgstr ""

# P
#: ./docs/8.x/sail.md:346
#: ./docs/9.x/sail.md:395
#: ./docs/10.x/sail.md:417
#: ./docs/11.x/sail.md:452
#: ./docs/master/sail.md:417
#~ msgid "<a name=\"sail-node-versions\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:347
#: ./docs/9.x/sail.md:396
#: ./docs/10.x/sail.md:418
#: ./docs/11.x/sail.md:453
#: ./docs/master/sail.md:418
msgid "Node Versions"
msgstr "Node 版本"

# P
#: ./docs/8.x/sail.md:349
msgid "Sail installs Node 16 by default. To change the Node version that is installed when building your images, you may update the `build.args` definition of the `laravel.test` service in your application's `docker-compose.yml` file:"
msgstr "預設情況下 Sail 會安裝 Node 16.若要更改建置 Image 時使用的 Node 版本，請更新專案中 `docker-compose.yml` 檔案內 `laravel.test` 服務的 `build.args` 定義："

# CODE: yaml
#: ./docs/8.x/sail.md:351
#: ./docs/9.x/sail.md:400
msgid ""
"build:\n"
"    args:\n"
"        WWWGROUP: '${WWWGROUP}'\n"
"        NODE_VERSION: '14'"
msgstr ""

# P
#: ./docs/8.x/sail.md:364
#: ./docs/9.x/sail.md:415
#: ./docs/10.x/sail.md:437
#: ./docs/11.x/sail.md:472
#: ./docs/master/sail.md:437
#~ msgid "<a name=\"sharing-your-site\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:365
#: ./docs/9.x/sail.md:416
#: ./docs/10.x/sail.md:438
#: ./docs/11.x/sail.md:473
#: ./docs/master/sail.md:438
msgid "Sharing Your Site"
msgstr "共享網站"

# P
#: ./docs/9.x/sail.md:365
msgid "Sail currently supports serving your application via PHP 8.2, 8.1, PHP 8.0, or PHP 7.4. The default PHP version used by Sail is currently PHP 8.2. To change the PHP version that is used to serve your application, you should update the `build` definition of the `laravel.test` container in your application's `docker-compose.yml` file:"
msgstr "Sail 目前支援使用 PHP 8.2、8.1、PHP 8.0、或 PHP 7.4 來執行你的專案。目前 Sail 所使用的預設 PHP 版本為 PHP 8.2。若要修改專案使用的 PHP 版本，請更新 `docker-compose.yml` 檔案中 `laravel.test` Container 的 `build` 定義："

# P
#: ./docs/8.x/sail.md:367
#: ./docs/9.x/sail.md:418
#: ./docs/10.x/sail.md:440
#: ./docs/11.x/sail.md:475
#: ./docs/master/sail.md:440
msgid "Sometimes you may need to share your site publicly in order to preview your site for a colleague or to test webhook integrations with your application. To share your site, you may use the `share` command. After executing this command, you will be issued a random `laravel-sail.site` URL that you may use to access your application:"
msgstr "有時候，我們需要公開地共享我們的網站，好讓同事能預覽網站，或是能測試專案中的 Webhook 整合。若要共享網站，可以使用 `share` 指令。執行該指令後，會分配一個隨機的 `laravel-sail.site` 網址能讓你存取你的網站："

# CODE: yaml
#: ./docs/9.x/sail.md:367
msgid ""
"# PHP 8.2\n"
"context: ./vendor/laravel/sail/runtimes/8.2\n"
"\n"
"# PHP 8.1\n"
"context: ./vendor/laravel/sail/runtimes/8.1\n"
"\n"
"# PHP 8.0\n"
"context: ./vendor/laravel/sail/runtimes/8.0\n"
"\n"
"# PHP 7.4\n"
"context: ./vendor/laravel/sail/runtimes/7.4"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:369
#: ./docs/9.x/sail.md:420
#: ./docs/10.x/sail.md:442
#: ./docs/11.x/sail.md:477
#: ./docs/master/sail.md:442
msgid "sail share"
msgstr ""

# P
#: ./docs/8.x/sail.md:371
#: ./docs/9.x/sail.md:424
#: ./docs/10.x/sail.md:446
msgid "When sharing your site via the `share` command, you should configure your application's trusted proxies within the `TrustProxies` middleware. Otherwise, URL generation helpers such as `url` and `route` will be unable to determine the correct HTTP host that should be used during URL generation:"
msgstr "在使用 `share` 指令共享網站時，應設定在 `TrustProxies` Middleware 中設定專案的 Trusted Proxies。否則，如 `url` 或 `route` 等產生 URL 用的輔助函式在產生 URL 時將無法判正確的 HTTP 主機名稱："

# P
#: ./docs/11.x/sail.md:373
msgid "If your local machine contains an Apple Silicon chip, your `selenium` service must use the `selenium/standalone-chromium` image:"
msgstr ""

# CODE
#: ./docs/8.x/sail.md:373
#: ./docs/9.x/sail.md:426
#: ./docs/10.x/sail.md:448
msgid ""
"/**\n"
" * The trusted proxies for this application.\n"
" *\n"
" * @var array|string|null\n"
" */\n"
"protected $proxies = '*';"
msgstr ""

# CODE: yaml
#: ./docs/11.x/sail.md:375
msgid ""
"selenium:\n"
"    image: 'selenium/standalone-chromium'\n"
"    extra_hosts:\n"
"        - 'host.docker.internal:host-gateway'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail"
msgstr ""

# P
#: ./docs/8.x/sail.md:380
#: ./docs/9.x/sail.md:433
#: ./docs/10.x/sail.md:455
#: ./docs/11.x/sail.md:487
#: ./docs/master/sail.md:454
msgid "If you would like to choose the subdomain for your shared site, you may provide the `subdomain` option when executing the `share` command:"
msgstr "若要選擇共享網站時使用的子網域，可在執行 `share` 指令時提供 `subdomain` 選項："

# CODE
# CODE: shell
#: ./docs/8.x/sail.md:382
#: ./docs/9.x/sail.md:435
#: ./docs/10.x/sail.md:457
#: ./docs/11.x/sail.md:489
#: ./docs/master/sail.md:456
msgid "sail share --subdomain=my-sail-site"
msgstr ""

# P
#: ./docs/8.x/sail.md:384
#: ./docs/9.x/sail.md:440
#: ./docs/10.x/sail.md:462
#: ./docs/11.x/sail.md:494
#: ./docs/master/sail.md:461
msgid "The `share` command is powered by [Expose](https://github.com/beyondcode/expose), an open source tunneling service by [BeyondCode](https://beyondco.de)."
msgstr "`share` 指令由 [Expose](https://github.com/beyondcode/expose) 驅動。Expose 是由 [BeyondCode](https://beyondco.de) 提供的，開放原始碼的通道 (Tunneling) 服務。"

# P
#: ./docs/8.x/sail.md:386
#: ./docs/9.x/sail.md:442
#: ./docs/10.x/sail.md:464
#: ./docs/11.x/sail.md:496
#: ./docs/master/sail.md:463
#~ msgid "<a name=\"debugging-with-xdebug\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/sail.md:387
#: ./docs/master/sail.md:387
msgid "Sail currently supports serving your application via PHP 8.3, 8.2, 8.1, or PHP 8.0. The default PHP version used by Sail is currently PHP 8.3. To change the PHP version that is used to serve your application, you should update the `build` definition of the `laravel.test` container in your application's `docker-compose.yml` file:"
msgstr ""

# H2
#: ./docs/8.x/sail.md:387
#: ./docs/9.x/sail.md:443
#: ./docs/10.x/sail.md:465
#: ./docs/11.x/sail.md:497
#: ./docs/master/sail.md:464
msgid "Debugging With Xdebug"
msgstr "使用 Xdebug 進行除錯"

# CODE: yaml
#: ./docs/10.x/sail.md:389
#: ./docs/master/sail.md:389
msgid ""
"# PHP 8.3\n"
"context: ./vendor/laravel/sail/runtimes/8.3\n"
"\n"
"# PHP 8.2\n"
"context: ./vendor/laravel/sail/runtimes/8.2\n"
"\n"
"# PHP 8.1\n"
"context: ./vendor/laravel/sail/runtimes/8.1\n"
"\n"
"# PHP 8.0\n"
"context: ./vendor/laravel/sail/runtimes/8.0"
msgstr ""

# P
#: ./docs/8.x/sail.md:389
#: ./docs/9.x/sail.md:445
#: ./docs/10.x/sail.md:467
#: ./docs/11.x/sail.md:499
#: ./docs/master/sail.md:466
msgid "Laravel Sail's Docker configuration includes support for [Xdebug](https://xdebug.org/), a popular and powerful debugger for PHP. In order to enable Xdebug, you will need to add a few variables to your application's `.env` file to [configure Xdebug](https://xdebug.org/docs/step_debug#mode). To enable Xdebug you must set the appropriate mode(s) before starting Sail:"
msgstr "Laravel Sail 的 Docker 設定中也包含了對 [Xdebug](https://xdebug.org/) 的支援。Xdebug 是一個常用且強大的 PHP 除錯工具。若要啟用 Xdebug，需要先在專案的 `.env` 檔中加上一些變數來[設定 Xdebug](https://xdebug.org/docs/step_debug#mode)。若要啟用 Xdebug，必須在啟動 Sail 前先設定適當的模式 (Mode)："

# CODE: ini
#: ./docs/8.x/sail.md:391
msgid "SAIL_XDEBUG_MODE=develop,debug"
msgstr ""

# H4
#: ./docs/8.x/sail.md:395
#: ./docs/9.x/sail.md:451
#: ./docs/10.x/sail.md:473
#: ./docs/11.x/sail.md:505
#: ./docs/master/sail.md:472
msgid "Linux Host IP Configuration"
msgstr "Linux 主機的 IP 設定"

# P
#: ./docs/8.x/sail.md:397
msgid "Internally, the `XDEBUG_CONFIG` environment variable is defined as `client_host=host.docker.internal` so that Xdebug will be properly configured for Mac and Windows (WSL2). If your local machine is running Linux, you will need to manually define this environment variable."
msgstr "在 Laravel Sail 中，`XDEBUG_CONFIG` 環境變數被設定為 `client_host=host.docker.internal`，好讓 Xdebug 能在 Mac 與 Windows (WSL2) 下被正確設定。如果你的本機裝置使用 Linux，則需要手動定義這個環境變數。"

# P
#: ./docs/9.x/sail.md:398
msgid "Sail installs Node 18 by default. To change the Node version that is installed when building your images, you may update the `build.args` definition of the `laravel.test` service in your application's `docker-compose.yml` file:"
msgstr "預設情況下 Sail 會安裝 Node 18。若要更改建置 Image 時使用的 Node 版本，請更新專案中 `docker-compose.yml` 檔案內 `laravel.test` 服務的 `build.args` 定義："

# P
#: ./docs/8.x/sail.md:399
#: ./docs/9.x/sail.md:455
#: ./docs/10.x/sail.md:477
#: ./docs/master/sail.md:476
msgid "First, you should determine the correct host IP address to add to the environment variable by running the following command. Typically, the `<container-name>` should be the name of the container that serves your application and often ends with `_laravel.test_1`:"
msgstr "首先，需要先執行下列指令來判斷要加到環境變數中的正確主機 IP 位址。一般來說，`<container-name>` 應為你的專案使用的 Container 名稱，通常以 `_laravel.test_1` 結尾："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:401
#: ./docs/9.x/sail.md:457
#: ./docs/10.x/sail.md:479
#: ./docs/master/sail.md:478
msgid "docker inspect -f {{range.NetworkSettings.Networks}}{{.Gateway}}{{end}} <container-name>"
msgstr ""

# P
#: ./docs/11.x/sail.md:402
msgid "Sometimes you may wish to start a Bash session within your application's container. You may use the `shell` command to connect to your application's container, allowing you to inspect its files and installed services as well as execute arbitrary shell commands within the container:"
msgstr ""

# P
#: ./docs/8.x/sail.md:405
#: ./docs/9.x/sail.md:461
#: ./docs/10.x/sail.md:483
#: ./docs/master/sail.md:482
msgid "Once you have obtained the correct host IP address, you should define the `SAIL_XDEBUG_CONFIG` variable within your application's `.env` file:"
msgstr "取得正確的主機 IP 後，請在專案的 `.env` 檔中定義 `SAIL_XDEBUG_CONFIG` 變數："

# CODE: ini
#: ./docs/8.x/sail.md:407
#: ./docs/9.x/sail.md:463
#: ./docs/10.x/sail.md:485
#: ./docs/master/sail.md:484
msgid "SAIL_XDEBUG_CONFIG=\"client_host=<host-ip-address>\""
msgstr ""

# P
#: ./docs/8.x/sail.md:411
#: ./docs/9.x/sail.md:467
#: ./docs/10.x/sail.md:489
#: ./docs/11.x/sail.md:531
#: ./docs/master/sail.md:488
#~ msgid "<a name=\"xdebug-cli-usage\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:412
#: ./docs/9.x/sail.md:468
#: ./docs/10.x/sail.md:490
#: ./docs/11.x/sail.md:532
#: ./docs/master/sail.md:489
msgid "Xdebug CLI Usage"
msgstr "使用 Xdebug CLI"

# P
#: ./docs/8.x/sail.md:414
#: ./docs/9.x/sail.md:470
#: ./docs/10.x/sail.md:492
#: ./docs/11.x/sail.md:534
#: ./docs/master/sail.md:491
msgid "A `sail debug` command may be used to start a debugging session when running an Artisan command:"
msgstr "`sail debug` 指令可用來在執行 Artisan 指令時啟動除錯工作階段："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:416
#: ./docs/9.x/sail.md:472
#: ./docs/10.x/sail.md:494
#: ./docs/11.x/sail.md:536
#: ./docs/master/sail.md:493
msgid ""
"# Run an Artisan command without Xdebug...\n"
"sail artisan migrate\n"
"\n"
"# Run an Artisan command with Xdebug...\n"
"sail debug migrate"
msgstr ""

# P
#: ./docs/11.x/sail.md:419
msgid "Sail currently supports serving your application via PHP 8.4, 8.3, 8.2, 8.1, or PHP 8.0. The default PHP version used by Sail is currently PHP 8.3. To change the PHP version that is used to serve your application, you should update the `build` definition of the `laravel.test` container in your application's `docker-compose.yml` file:"
msgstr ""

# P
#: ./docs/10.x/sail.md:420
#: ./docs/11.x/sail.md:455
#: ./docs/master/sail.md:420
msgid "Sail installs Node 20 by default. To change the Node version that is installed when building your images, you may update the `build.args` definition of the `laravel.test` service in your application's `docker-compose.yml` file:"
msgstr "預設情況下 Sail 會安裝 Node 20。若要更改建置 Image 時使用的 Node 版本，請更新專案中 `docker-compose.yml` 檔案內 `laravel.test` 服務的 `build.args` 定義："

# CODE: yaml
#: ./docs/11.x/sail.md:421
msgid ""
"# PHP 8.4\n"
"context: ./vendor/laravel/sail/runtimes/8.4\n"
"\n"
"# PHP 8.3\n"
"context: ./vendor/laravel/sail/runtimes/8.3\n"
"\n"
"# PHP 8.2\n"
"context: ./vendor/laravel/sail/runtimes/8.2\n"
"\n"
"# PHP 8.1\n"
"context: ./vendor/laravel/sail/runtimes/8.1\n"
"\n"
"# PHP 8.0\n"
"context: ./vendor/laravel/sail/runtimes/8.0"
msgstr ""

# CODE: yaml
#: ./docs/10.x/sail.md:422
#: ./docs/11.x/sail.md:457
#: ./docs/master/sail.md:422
msgid ""
"build:\n"
"    args:\n"
"        WWWGROUP: '${WWWGROUP}'\n"
"        NODE_VERSION: '18'"
msgstr ""

# P
#: ./docs/8.x/sail.md:424
#: ./docs/9.x/sail.md:480
#: ./docs/10.x/sail.md:502
#: ./docs/11.x/sail.md:544
#: ./docs/master/sail.md:501
#~ msgid "<a name=\"xdebug-browser-usage\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/sail.md:425
#: ./docs/9.x/sail.md:481
#: ./docs/10.x/sail.md:503
#: ./docs/11.x/sail.md:545
#: ./docs/master/sail.md:502
msgid "Xdebug Browser Usage"
msgstr "使用 Xdebug Browser"

# P
#: ./docs/8.x/sail.md:427
#: ./docs/9.x/sail.md:483
#: ./docs/10.x/sail.md:505
#: ./docs/11.x/sail.md:547
#: ./docs/master/sail.md:504
msgid "To debug your application while interacting with the application via a web browser, follow the [instructions provided by Xdebug](https://xdebug.org/docs/step_debug#web-application) for initiating an Xdebug session from the web browser."
msgstr "若要在通過 Web 瀏覽器瀏覽網站時對網站進行除錯，請依照[Xdebug 所提供的說明](https://xdebug.org/docs/step_debug#web-application)來在 Web 瀏覽器中啟動 Xdebug 工作階段。"

# P
#: ./docs/8.x/sail.md:429
#: ./docs/9.x/sail.md:485
#: ./docs/10.x/sail.md:507
#: ./docs/master/sail.md:506
msgid "If you're using PhpStorm, please review JetBrain's documentation regarding [zero-configuration debugging](https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html)."
msgstr "若使用 PhpStorm，請參考 JetBrains 的[零設定除錯](https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html)說明文件。"

# P
#: ./docs/8.x/sail.md:431
#: ./docs/9.x/sail.md:488
#: ./docs/10.x/sail.md:510
#: ./docs/11.x/sail.md:552
#: ./docs/master/sail.md:509
msgid "Laravel Sail relies on `artisan serve` to serve your application. The `artisan serve` command only accepts the `XDEBUG_CONFIG` and `XDEBUG_MODE` variables as of Laravel version 8.53.0. Older versions of Laravel (8.52.0 and below) do not support these variables and will not accept debug connections."
msgstr "Laravel Sail 仰賴 `artisan serve` 來執行網站。只有在 8.53.0 版之後的 Laravel 中，`artisan serve` 指令才會接受 `XDEBUG_CONFIG` 與 `XDEBUG_MODE` 變數。舊版的 Laravel (8.52.0 版以前) 不接受這些變數，且不會接受除錯連線。"

# P
#: ./docs/8.x/sail.md:433
#: ./docs/9.x/sail.md:490
#: ./docs/10.x/sail.md:512
#: ./docs/11.x/sail.md:554
#: ./docs/master/sail.md:511
#~ msgid "<a name=\"sail-customization\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/sail.md:434
#: ./docs/9.x/sail.md:491
#: ./docs/10.x/sail.md:513
#: ./docs/11.x/sail.md:555
#: ./docs/master/sail.md:512
msgid "Customization"
msgstr "自定"

# P
#: ./docs/8.x/sail.md:436
#: ./docs/9.x/sail.md:493
#: ./docs/10.x/sail.md:515
#: ./docs/11.x/sail.md:557
#: ./docs/master/sail.md:514
msgid "Since Sail is just Docker, you are free to customize nearly everything about it. To publish Sail's own Dockerfiles, you may execute the `sail:publish` command:"
msgstr "由於 Sail 就是 Docker，因此你幾乎可以對 Sail 中的任何部分進行自定。若要安裝 Sail 的 Dockerfile，可執行 `sail:publish` 指令："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:438
#: ./docs/9.x/sail.md:495
#: ./docs/10.x/sail.md:517
#: ./docs/11.x/sail.md:559
#: ./docs/master/sail.md:516
msgid "sail artisan sail:publish"
msgstr ""

# CODE: yaml
#: ./docs/11.x/sail.md:440
#: ./docs/master/sail.md:405
msgid "image: sail-8.2/app"
msgstr ""

# P
#: ./docs/8.x/sail.md:442
#: ./docs/9.x/sail.md:499
#: ./docs/10.x/sail.md:521
#: ./docs/11.x/sail.md:563
#: ./docs/master/sail.md:520
msgid "After running this command, the Dockerfiles and other configuration files used by Laravel Sail will be placed within a `docker` directory in your application's root directory. After customizing your Sail installation, you may wish to change the image name for the application container in your application's `docker-compose.yml` file. After doing so, rebuild your application's containers using the `build` command. Assigning a unique name to the application image is particularly important if you are using Sail to develop multiple Laravel applications on a single machine:"
msgstr "執行該指令後，Laravel Sail 所使用的 Dockerfile 與其他設定檔會被放到專案根目錄中的 `docker` 目錄下。調整了 Sail 設定後，你可能會想在 `docker-compose.yml` 中更改專案 Container 所使用的 Image 名稱。之後，請使用 `build` 指令來重新建置專案的 Image。如果你在同一台裝置上開發多個 Laravel 專案，那麼請務必為 Image 設定不重複的名稱："

# CODE: bash
# CODE: shell
#: ./docs/8.x/sail.md:444
#: ./docs/9.x/sail.md:501
#: ./docs/10.x/sail.md:523
#: ./docs/11.x/sail.md:565
#: ./docs/master/sail.md:522
msgid "sail build --no-cache"
msgstr ""

# CODE: ini
#: ./docs/9.x/sail.md:447
#: ./docs/10.x/sail.md:469
#: ./docs/11.x/sail.md:501
#: ./docs/master/sail.md:468
msgid "SAIL_XDEBUG_MODE=develop,debug,coverage"
msgstr ""

# CODE
#: ./docs/master/sail.md:448
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustProxies(at: [\n"
"        '*',\n"
"    ]);\n"
"})"
msgstr ""

# P
#: ./docs/9.x/sail.md:453
#: ./docs/10.x/sail.md:475
#: ./docs/master/sail.md:474
msgid "Internally, the `XDEBUG_CONFIG` environment variable is defined as `client_host=host.docker.internal` so that Xdebug will be properly configured for Mac and Windows (WSL2). If your local machine is running Linux, you should ensure that you are running Docker Engine 17.06.0+ and Compose 1.16.0+. Otherwise, you will need to manually define this environment variable as shown below."
msgstr "在 Laravel Sail 中，`XDEBUG_CONFIG` 環境變數被設定為 `client_host=host.docker.internal`，好讓 Xdebug 能在 Mac 與 Windows (WSL2) 下被正確設定。如果你的本機裝置使用 Linux，請確保使用 17.06.0 版或更新的 Docker Engine 以及 1.16.0 版或更新的 Composer。否則，就需要像下面這樣手動定義環境變數："

# P
#: ./docs/11.x/sail.md:481
#: ./docs/master/sail.md:446
msgid "When sharing your site via the `share` command, you should configure your application's trusted proxies using the `trustProxies` middleware method in your application's `bootstrap/app.php` file. Otherwise, URL generation helpers such as `url` and `route` will be unable to determine the correct HTTP host that should be used during URL generation:"
msgstr ""

# CODE
#: ./docs/11.x/sail.md:483
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustProxies(at: '*');\n"
"})"
msgstr ""

# P
#: ./docs/11.x/sail.md:507
msgid "Internally, the `XDEBUG_CONFIG` environment variable is defined as `client_host=host.docker.internal` so that Xdebug will be properly configured for Mac and Windows (WSL2). If your local machine is running Linux and you're using Docker 20.10+, `host.docker.internal` is available, and no manual configuration is required."
msgstr ""

# P
#: ./docs/11.x/sail.md:509
msgid "For Docker versions older than 20.10, `host.docker.internal` is not supported on Linux, and you will need to manually define the host IP. To do this, configure a static IP for your container by defining a custom network in your `docker-compose.yml` file:"
msgstr ""

# CODE: yaml
#: ./docs/11.x/sail.md:511
msgid ""
"networks:\n"
"  custom_network:\n"
"    ipam:\n"
"      config:\n"
"        - subnet: 172.20.0.0/16\n"
"\n"
"services:\n"
"  laravel.test:\n"
"    networks:\n"
"      custom_network:\n"
"        ipv4_address: 172.20.0.2"
msgstr ""

# P
#: ./docs/11.x/sail.md:525
msgid "Once you have set the static IP, define the SAIL_XDEBUG_CONFIG variable within your application's .env file:"
msgstr ""

# CODE: ini
#: ./docs/11.x/sail.md:527
msgid "SAIL_XDEBUG_CONFIG=\"client_host=172.20.0.2\""
msgstr ""

# P
#: ./docs/11.x/sail.md:549
msgid "If you're using PhpStorm, please review JetBrains' documentation regarding [zero-configuration debugging](https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html)."
msgstr ""
