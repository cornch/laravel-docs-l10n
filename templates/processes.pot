#
msgid ""
msgstr ""

#: docs/10.x/processes.md:block 1 (header)
msgid "Processes"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Invoking Processes](#invoking-processes)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Process Options](#process-options)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Process Output](#process-output)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Asynchronous Processes](#asynchronous-processes)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Process IDs & Signals](#process-ids-and-signals)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Asynchronous Process Output](#asynchronous-process-output)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Concurrent Processes](#concurrent-processes)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Naming Pool Processes](#naming-pool-processes)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Pool Process IDs & Signals](#pool-process-ids-and-signals)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Testing](#testing)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Faking Processes](#faking-processes)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Faking Specific Processes](#faking-specific-processes)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Faking Process Sequences](#faking-process-sequences)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Faking Asynchronous Process Lifecycles](#faking-asynchronous-process-lifecycles)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#: docs/10.x/processes.md:block 2 (unordered list)
msgid "[Preventing Stray Processes](#preventing-stray-processes)"
msgstr ""

#: docs/10.x/processes.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/processes.md:block 5 (paragraph)
msgid "Laravel provides an expressive, minimal API around the [Symfony Process component](https://symfony.com/doc/current/components/process.html), allowing you to conveniently invoke external processes from your Laravel application. Laravel's process features are focused on the most common use cases and a wonderful developer experience."
msgstr ""

#: docs/10.x/processes.md:block 7 (header)
msgid "Invoking Processes"
msgstr ""

#: docs/10.x/processes.md:block 8 (paragraph)
msgid "To invoke a process, you may use the `run` and `start` methods offered by the `Process` facade. The `run` method will invoke a process and wait for the process to finish executing, while the `start` method is used for asynchronous process execution. We'll examine both approaches within this documentation. First, let's examine how to invoke a basic, synchronous process and inspect its result:"
msgstr ""

#: docs/10.x/processes.md:block 9 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"$result = Process::run('ls -la');\n"
"\n"
"return $result->output();\n"
msgstr ""

#: docs/10.x/processes.md:block 10 (paragraph)
msgid "Of course, the `Illuminate\\Contracts\\Process\\ProcessResult` instance returned by the `run` method offers a variety of helpful methods that may be used to inspect the process result:"
msgstr ""

#: docs/10.x/processes.md:block 11 (code)
msgid ""
"$result = Process::run('ls -la');\n"
"\n"
"$result->successful();\n"
"$result->failed();\n"
"$result->exitCode();\n"
"$result->output();\n"
"$result->errorOutput();\n"
msgstr ""

#: docs/10.x/processes.md:block 13 (header)
msgid "Throwing Exceptions"
msgstr ""

#: docs/10.x/processes.md:block 14 (paragraph)
msgid "If you have a process result and would like to throw an instance of `Illuminate\\Process\\Exceptions\\ProcessFailedException` if the exit code is greater than zero (thus indicating failure), you may use the `throw` and `throwIf` methods. If the process did not fail, the process result instance will be returned:"
msgstr ""

#: docs/10.x/processes.md:block 15 (code)
msgid ""
"$result = Process::run('ls -la')->throw();\n"
"\n"
"$result = Process::run('ls -la')->throwIf($condition);\n"
msgstr ""

#: docs/10.x/processes.md:block 17 (header)
msgid "Process Options"
msgstr ""

#: docs/10.x/processes.md:block 18 (paragraph)
msgid "Of course, you may need to customize the behavior of a process before invoking it. Thankfully, Laravel allows you to tweak a variety of process features, such as the working directory, timeout, and environment variables."
msgstr ""

#: docs/10.x/processes.md:block 20 (header)
msgid "Working Directory Path"
msgstr ""

#: docs/10.x/processes.md:block 21 (paragraph)
msgid "You may use the `path` method to specify the working directory of the process. If this method is not invoked, the process will inherit the working directory of the currently executing PHP script:"
msgstr ""

#: docs/10.x/processes.md:block 22 (code)
msgid "$result = Process::path(__DIR__)->run('ls -la');\n"
msgstr ""

#: docs/10.x/processes.md:block 24 (header)
msgid "Timeouts"
msgstr ""

#: docs/10.x/processes.md:block 25 (paragraph)
msgid "By default, processes will throw an instance of `Illuminate\\Process\\Exceptions\\ProcessTimedOutException` after executing for more than 60 seconds. However, you can customize this behavior via the `timeout` method:"
msgstr ""

#: docs/10.x/processes.md:block 26 (code)
msgid "$result = Process::timeout(120)->run('bash import.sh');\n"
msgstr ""

#: docs/10.x/processes.md:block 27 (paragraph)
msgid "Or, if you would like to disable the process timeout entirely, you may invoke the `forever` method:"
msgstr ""

#: docs/10.x/processes.md:block 28 (code)
msgid "$result = Process::forever()->run('bash import.sh');\n"
msgstr ""

#: docs/10.x/processes.md:block 29 (paragraph)
msgid "The `idleTimeout` method may be used to specify the maximum number of seconds the process may run without returning any output:"
msgstr ""

#: docs/10.x/processes.md:block 30 (code)
msgid "$result = Process::timeout(60)->idleTimeout(30)->run('bash import.sh');\n"
msgstr ""

#: docs/10.x/processes.md:block 32 (header)
msgid "Environment Variables"
msgstr ""

#: docs/10.x/processes.md:block 33 (paragraph)
msgid "Environment variables may be provided to the process via the `env` method. The invoked process will also inherit all of the environment variables defined by your system:"
msgstr ""

#: docs/10.x/processes.md:block 34 (code)
msgid ""
"$result = Process::forever()\n"
"            ->env(['IMPORT_PATH' => __DIR__])\n"
"            ->run('bash import.sh');\n"
msgstr ""

#: docs/10.x/processes.md:block 35 (paragraph)
msgid "If you wish to remove an inherited environment variable from the invoked process, you may provide that environment variable with a value of `false`:"
msgstr ""

#: docs/10.x/processes.md:block 36 (code)
msgid ""
"$result = Process::forever()\n"
"            ->env(['LOAD_PATH' => false])\n"
"            ->run('bash import.sh');\n"
msgstr ""

#: docs/10.x/processes.md:block 38 (header)
msgid "TTY Mode"
msgstr ""

#: docs/10.x/processes.md:block 39 (paragraph)
msgid "The `tty` method may be used to enable TTY mode for your process. TTY mode connects the input and output of the process to the input and output of your program, allowing your process to open an editor like Vim or Nano as a process:"
msgstr ""

#: docs/10.x/processes.md:block 40 (code)
msgid "Process::forever()->tty()->run('vim');\n"
msgstr ""

#: docs/10.x/processes.md:block 42 (header)
msgid "Process Output"
msgstr ""

#: docs/10.x/processes.md:block 43 (paragraph)
msgid "As previously discussed, process output may be accessed using the `output` (stdout) and `errorOutput` (stderr) methods on a process result:"
msgstr ""

#: docs/10.x/processes.md:block 44 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"$result = Process::run('ls -la');\n"
"\n"
"echo $result->output();\n"
"echo $result->errorOutput();\n"
msgstr ""

#: docs/10.x/processes.md:block 45 (paragraph)
msgid "However, output may also be gathered in real-time by passing a closure as the second argument to the `run` method. The closure will receive two arguments: the \"type\" of output (`stdout` or `stderr`) and the output string itself:"
msgstr ""

#: docs/10.x/processes.md:block 46 (code)
msgid ""
"$result = Process::run('ls -la', function (string $type, string $output) {\n"
"    echo $output;\n"
"});\n"
msgstr ""

#: docs/10.x/processes.md:block 47 (paragraph)
msgid "Laravel also offers the `seeInOutput` and `seeInErrorOutput` methods, which provide a convenient way to determine if a given string was contained in the process' output:"
msgstr ""

#: docs/10.x/processes.md:block 48 (code)
msgid ""
"if (Process::run('ls -la')->seeInOutput('laravel')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/processes.md:block 50 (header)
msgid "Disabling Process Output"
msgstr ""

#: docs/10.x/processes.md:block 51 (paragraph)
msgid "If your process is writing a significant amount of output that you are not interested in, you can conserve memory by disabling output retrieval entirely. To accomplish this, invoke the `quietly` method while building the process:"
msgstr ""

#: docs/10.x/processes.md:block 52 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"$result = Process::quietly()->run('bash import.sh');\n"
msgstr ""

#: docs/10.x/processes.md:block 54 (header)
msgid "Asynchronous Processes"
msgstr ""

#: docs/10.x/processes.md:block 55 (paragraph)
msgid "While the `run` method invokes processes synchronously, the `start` method may be used to invoke a process asynchronously. This allows your application to continue performing other tasks while the process runs in the background. Once the process has been invoked, you may utilize the `running` method to determine if the process is still running:"
msgstr ""

#: docs/10.x/processes.md:block 56 (code)
msgid ""
"$process = Process::timeout(120)->start('bash import.sh');\n"
"\n"
"while ($process->running()) {\n"
"    // ...\n"
"}\n"
"\n"
"$result = $process->wait();\n"
msgstr ""

#: docs/10.x/processes.md:block 57 (paragraph)
msgid "As you may have noticed, you may invoke the `wait` method to wait until the process is finished executing and retrieve the process result instance:"
msgstr ""

#: docs/10.x/processes.md:block 58 (code)
msgid ""
"$process = Process::timeout(120)->start('bash import.sh');\n"
"\n"
"// ...\n"
"\n"
"$result = $process->wait();\n"
msgstr ""

#: docs/10.x/processes.md:block 60 (header)
msgid "Process IDs & Signals"
msgstr ""

#: docs/10.x/processes.md:block 61 (paragraph)
msgid "The `pid` method may be used to retrieve the operating system assigned process ID of the running process:"
msgstr ""

#: docs/10.x/processes.md:block 62 (code)
msgid ""
"$process = Process::start('bash import.sh');\n"
"\n"
"return $process->pid();\n"
msgstr ""

#: docs/10.x/processes.md:block 63 (paragraph)
msgid "You may use the `signal` method to send a \"signal\" to the running process. A list of predefined signal constants can be found within the [PHP documentation](https://www.php.net/manual/en/pcntl.constants.php):"
msgstr ""

#: docs/10.x/processes.md:block 64 (code)
msgid "$process->signal(SIGUSR2);\n"
msgstr ""

#: docs/10.x/processes.md:block 66 (header)
msgid "Asynchronous Process Output"
msgstr ""

#: docs/10.x/processes.md:block 67 (paragraph)
msgid "While an asynchronous process is running, you may access its entire current output using the `output` and `errorOutput` methods; however, you may utilize the `latestOutput` and `latestErrorOutput` to access the output from the process that has occurred since the output was last retrieved:"
msgstr ""

#: docs/10.x/processes.md:block 68 (code)
msgid ""
"$process = Process::timeout(120)->start('bash import.sh');\n"
"\n"
"while ($process->running()) {\n"
"    echo $process->latestOutput();\n"
"    echo $process->latestErrorOutput();\n"
"\n"
"    sleep(1);\n"
"}\n"
msgstr ""

#: docs/10.x/processes.md:block 69 (paragraph)
msgid "Like the `run` method, output may also be gathered in real-time from asynchronous processes by passing a closure as the second argument to the `start` method. The closure will receive two arguments: the \"type\" of output (`stdout` or `stderr`) and the output string itself:"
msgstr ""

#: docs/10.x/processes.md:block 70 (code)
msgid ""
"$process = Process::start('bash import.sh', function (string $type, string $output) {\n"
"    echo $output;\n"
"});\n"
"\n"
"$result = $process->wait();\n"
msgstr ""

#: docs/10.x/processes.md:block 72 (header)
msgid "Concurrent Processes"
msgstr ""

#: docs/10.x/processes.md:block 73 (paragraph)
msgid "Laravel also makes it a breeze to manage a pool of concurrent, asynchronous processes, allowing you to easily execute many tasks simultaneously. To get started, invoke the `pool` method, which accepts a closure that receives an instance of `Illuminate\\Process\\Pool`."
msgstr ""

#: docs/10.x/processes.md:block 74 (paragraph)
msgid "Within this closure, you may define the processes that belong to the pool. Once a process pool is started via the `start` method, you may access the [collection](/docs/{{version}}/collections) of running processes via the `running` method:"
msgstr ""

#: docs/10.x/processes.md:block 75 (code)
msgid ""
"use Illuminate\\Process\\Pool;\n"
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"$pool = Process::pool(function (Pool $pool) {\n"
"    $pool->path(__DIR__)->command('bash import-1.sh');\n"
"    $pool->path(__DIR__)->command('bash import-2.sh');\n"
"    $pool->path(__DIR__)->command('bash import-3.sh');\n"
"})->start(function (string $type, string $output, int $key) {\n"
"    // ...\n"
"});\n"
"\n"
"while ($pool->running()->isNotEmpty()) {\n"
"    // ...\n"
"}\n"
"\n"
"$results = $pool->wait();\n"
msgstr ""

#: docs/10.x/processes.md:block 76 (paragraph)
msgid "As you can see, you may wait for all of the pool processes to finish executing and resolve their results via the `wait` method. The `wait` method returns an array accessible object that allows you to access the process result instance of each process in the pool by its key:"
msgstr ""

#: docs/10.x/processes.md:block 77 (code)
msgid ""
"$results = $pool->wait();\n"
"\n"
"echo $results[0]->output();\n"
msgstr ""

#: docs/10.x/processes.md:block 78 (paragraph)
msgid "Or, for convenience, the `concurrently` method may be used to start an asynchronous process pool and immediately wait on its results. This can provide particularly expressive syntax when combined with PHP's array destructuring capabilities:"
msgstr ""

#: docs/10.x/processes.md:block 79 (code)
msgid ""
"[$first, $second, $third] = Process::concurrently(function (Pool $pool) {\n"
"    $pool->path(__DIR__)->command('ls -la');\n"
"    $pool->path(app_path())->command('ls -la');\n"
"    $pool->path(storage_path())->command('ls -la');\n"
"});\n"
"\n"
"echo $first->output();\n"
msgstr ""

#: docs/10.x/processes.md:block 81 (header)
msgid "Naming Pool Processes"
msgstr ""

#: docs/10.x/processes.md:block 82 (paragraph)
msgid "Accessing process pool results via a numeric key is not very expressive; therefore, Laravel allows you to assign string keys to each process within a pool via the `as` method. This key will also be passed to the closure provided to the `start` method, allowing you to determine which process the output belongs to:"
msgstr ""

#: docs/10.x/processes.md:block 83 (code)
msgid ""
"$pool = Process::pool(function (Pool $pool) {\n"
"    $pool->as('first')->command('bash import-1.sh');\n"
"    $pool->as('second')->command('bash import-2.sh');\n"
"    $pool->as('third')->command('bash import-3.sh');\n"
"})->start(function (string $type, string $output, string $key) {\n"
"    // ...\n"
"});\n"
"\n"
"$results = $pool->wait();\n"
"\n"
"return $results['first']->output();\n"
msgstr ""

#: docs/10.x/processes.md:block 85 (header)
msgid "Pool Process IDs & Signals"
msgstr ""

#: docs/10.x/processes.md:block 86 (paragraph)
msgid "Since the process pool's `running` method provides a collection of all invoked processes within the pool, you may easily access the underlying pool process IDs:"
msgstr ""

#: docs/10.x/processes.md:block 87 (code)
msgid "$processIds = $pool->running()->each->pid();\n"
msgstr ""

#: docs/10.x/processes.md:block 88 (paragraph)
msgid "And, for convenience, you may invoke the `signal` method on a process pool to send a signal to every process within the pool:"
msgstr ""

#: docs/10.x/processes.md:block 89 (code)
msgid "$pool->signal(SIGUSR2);\n"
msgstr ""

#: docs/10.x/processes.md:block 91 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/processes.md:block 92 (paragraph)
msgid "Many Laravel services provide functionality to help you easily and expressively write tests, and Laravel's process service is no exception. The `Process` facade's `fake` method allows you to instruct Laravel to return stubbed / dummy results when processes are invoked."
msgstr ""

#: docs/10.x/processes.md:block 94 (header)
msgid "Faking Processes"
msgstr ""

#: docs/10.x/processes.md:block 95 (paragraph)
msgid "To explore Laravel's ability to fake processes, let's imagine a route that invokes a process:"
msgstr ""

#: docs/10.x/processes.md:block 96 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/import', function () {\n"
"    Process::run('bash import.sh');\n"
"\n"
"    return 'Import complete!';\n"
"});\n"
msgstr ""

#: docs/10.x/processes.md:block 97 (paragraph)
msgid "When testing this route, we can instruct Laravel to return a fake, successful process result for every invoked process by calling the `fake` method on the `Process` facade with no arguments. In addition, we can even [assert](#available-assertions) that a given process was \"ran\":"
msgstr ""

#: docs/10.x/processes.md:block 98 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use Illuminate\\Process\\PendingProcess;\n"
"use Illuminate\\Contracts\\Process\\ProcessResult;\n"
"use Illuminate\\Support\\Facades\\Process;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_process_is_invoked(): void\n"
"    {\n"
"        Process::fake();\n"
"\n"
"        $response = $this->get('/');\n"
"\n"
"        // Simple process assertion...\n"
"        Process::assertRan('bash import.sh');\n"
"\n"
"        // Or, inspecting the process configuration...\n"
"        Process::assertRan(function (PendingProcess $process, ProcessResult $result) {\n"
"            return $process->command === 'bash import.sh' &&\n"
"                   $process->timeout === 60;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/processes.md:block 99 (paragraph)
msgid "As discussed, invoking the `fake` method on the `Process` facade will instruct Laravel to always return a successful process result with no output. However, you may easily specify the output and exit code for faked processes using the `Process` facade's `result` method:"
msgstr ""

#: docs/10.x/processes.md:block 100 (code)
msgid ""
"Process::fake([\n"
"    '*' => Process::result(\n"
"        output: 'Test output',\n"
"        errorOutput: 'Test error output',\n"
"        exitCode: 1,\n"
"    ),\n"
"]);\n"
msgstr ""

#: docs/10.x/processes.md:block 102 (header)
msgid "Faking Specific Processes"
msgstr ""

#: docs/10.x/processes.md:block 103 (paragraph)
msgid "As you may have noticed in a previous example, the `Process` facade allows you to specify different fake results per process by passing an array to the `fake` method."
msgstr ""

#: docs/10.x/processes.md:block 104 (paragraph)
msgid "The array's keys should represent command patterns that you wish to fake and their associated results. The `*` character may be used as a wildcard character. Any process commands that have not been faked will actually be invoked. You may use the `Process` facade's `result` method to construct stub / fake results for these commands:"
msgstr ""

#: docs/10.x/processes.md:block 105 (code)
msgid ""
"Process::fake([\n"
"    'cat *' => Process::result(\n"
"        output: 'Test \"cat\" output',\n"
"    ),\n"
"    'ls *' => Process::result(\n"
"        output: 'Test \"ls\" output',\n"
"    ),\n"
"]);\n"
msgstr ""

#: docs/10.x/processes.md:block 106 (paragraph)
msgid "If you do not need to customize the exit code or error output of a faked process, you may find it more convenient to specify the fake process results as simple strings:"
msgstr ""

#: docs/10.x/processes.md:block 107 (code)
msgid ""
"Process::fake([\n"
"    'cat *' => 'Test \"cat\" output',\n"
"    'ls *' => 'Test \"ls\" output',\n"
"]);\n"
msgstr ""

#: docs/10.x/processes.md:block 109 (header)
msgid "Faking Process Sequences"
msgstr ""

#: docs/10.x/processes.md:block 110 (paragraph)
msgid "If the code you are testing invokes multiple processes with the same command, you may wish to assign a different fake process result to each process invocation. You may accomplish this via the `Process` facade's `sequence` method:"
msgstr ""

#: docs/10.x/processes.md:block 111 (code)
msgid ""
"Process::fake([\n"
"    'ls *' => Process::sequence()\n"
"                ->push(Process::result('First invocation'))\n"
"                ->push(Process::result('Second invocation')),\n"
"]);\n"
msgstr ""

#: docs/10.x/processes.md:block 113 (header)
msgid "Faking Asynchronous Process Lifecycles"
msgstr ""

#: docs/10.x/processes.md:block 114 (paragraph)
msgid "Thus far, we have primarily discussed faking processes which are invoked synchronously using the `run` method. However, if you are attempting to test code that interacts with asynchronous processes invoked via `start`, you may need a more sophisticated approach to describing your fake processes."
msgstr ""

#: docs/10.x/processes.md:block 115 (paragraph)
msgid "For example, let's imagine the following route which interacts with an asynchronous process:"
msgstr ""

#: docs/10.x/processes.md:block 116 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Log;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/import', function () {\n"
"    $process = Process::start('bash import.sh');\n"
"\n"
"    while ($process->running()) {\n"
"        Log::info($process->latestOutput());\n"
"        Log::info($process->latestErrorOutput());\n"
"    }\n"
"\n"
"    return 'Done';\n"
"});\n"
msgstr ""

#: docs/10.x/processes.md:block 117 (paragraph)
msgid "To properly fake this process, we need to be able to describe how many times the `running` method should return `true`. In addition, we may want to specify multiple lines of output that should be returned in sequence. To accomplish this, we can use the `Process` facade's `describe` method:"
msgstr ""

#: docs/10.x/processes.md:block 118 (code)
msgid ""
"Process::fake([\n"
"    'bash import.sh' => Process::describe()\n"
"            ->output('First line of standard output')\n"
"            ->errorOutput('First line of error output')\n"
"            ->output('Second line of standard output')\n"
"            ->exitCode(0)\n"
"            ->iterations(3),\n"
"]);\n"
msgstr ""

#: docs/10.x/processes.md:block 119 (paragraph)
msgid "Let's dig into the example above. Using the `output` and `errorOutput` methods, we may specify multiple lines of output that will be returned in sequence. The `exitCode` method may be used to specify the final exit code of the fake process. Finally, the `iterations` method may be used to specify how many times the `running` method should return `true`."
msgstr ""

#: docs/10.x/processes.md:block 121 (header)
msgid "Available Assertions"
msgstr ""

#: docs/10.x/processes.md:block 122 (paragraph)
msgid "As [previously discussed](#faking-processes), Laravel provides several process assertions for your feature tests. We'll discuss each of these assertions below."
msgstr ""

#: docs/10.x/processes.md:block 124 (header)
msgid "assertRan"
msgstr ""

#: docs/10.x/processes.md:block 125 (paragraph)
msgid "Assert that a given process was invoked:"
msgstr ""

#: docs/10.x/processes.md:block 126 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"Process::assertRan('ls -la');\n"
msgstr ""

#: docs/10.x/processes.md:block 127 (paragraph)
msgid "The `assertRan` method also accepts a closure, which will receive an instance of a process and a process result, allowing you to inspect the process' configured options. If this closure returns `true`, the assertion will \"pass\":"
msgstr ""

#: docs/10.x/processes.md:block 128 (code)
msgid ""
"Process::assertRan(fn ($process, $result) =>\n"
"    $process->command === 'ls -la' &&\n"
"    $process->path === __DIR__ &&\n"
"    $process->timeout === 60\n"
");\n"
msgstr ""

#: docs/10.x/processes.md:block 129 (paragraph)
msgid "The `$process` passed to the `assertRan` closure is an instance of `Illuminate\\Process\\PendingProcess`, while the `$result` is an instance of `Illuminate\\Contracts\\Process\\ProcessResult`."
msgstr ""

#: docs/10.x/processes.md:block 131 (header)
msgid "assertDidntRun"
msgstr ""

#: docs/10.x/processes.md:block 132 (paragraph)
msgid "Assert that a given process was not invoked:"
msgstr ""

#: docs/10.x/processes.md:block 133 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"Process::assertDidntRun('ls -la');\n"
msgstr ""

#: docs/10.x/processes.md:block 134 (paragraph)
msgid "Like the `assertRan` method, the `assertDidntRun` method also accepts a closure, which will receive an instance of a process and a process result, allowing you to inspect the process' configured options. If this closure returns `true`, the assertion will \"fail\":"
msgstr ""

#: docs/10.x/processes.md:block 135 (code)
msgid ""
"Process::assertDidntRun(fn (PendingProcess $process, ProcessResult $result) =>\n"
"    $process->command === 'ls -la'\n"
");\n"
msgstr ""

#: docs/10.x/processes.md:block 137 (header)
msgid "assertRanTimes"
msgstr ""

#: docs/10.x/processes.md:block 138 (paragraph)
msgid "Assert that a given process was invoked a given number of times:"
msgstr ""

#: docs/10.x/processes.md:block 139 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"Process::assertRanTimes('ls -la', times: 3);\n"
msgstr ""

#: docs/10.x/processes.md:block 140 (paragraph)
msgid "The `assertRanTimes` method also accepts a closure, which will receive an instance of a process and a process result, allowing you to inspect the process' configured options. If this closure returns `true` and the process was invoked the specified number of times, the assertion will \"pass\":"
msgstr ""

#: docs/10.x/processes.md:block 141 (code)
msgid ""
"Process::assertRanTimes(function (PendingProcess $process, ProcessResult $result) {\n"
"    return $process->command === 'ls -la';\n"
"}, times: 3);\n"
msgstr ""

#: docs/10.x/processes.md:block 143 (header)
msgid "Preventing Stray Processes"
msgstr ""

#: docs/10.x/processes.md:block 144 (paragraph)
msgid "If you would like to ensure that all invoked processes have been faked throughout your individual test or complete test suite, you can call the `preventStrayProcesses` method. After calling this method, any processes that do not have a corresponding fake result will throw an exception rather than starting an actual process:"
msgstr ""

#: docs/10.x/processes.md:block 145 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"Process::preventStrayProcesses();\n"
"\n"
"Process::fake([\n"
"    'ls *' => 'Test output...',\n"
"]);\n"
"\n"
"// Fake response is returned...\n"
"Process::run('ls -la');\n"
"\n"
"// An exception is thrown...\n"
"Process::run('bash import.sh');\n"
msgstr ""

#: docs/master/processes.md:block 10 (paragraph)
msgid "Of course, the `Illuminate\\Contracts\\Console\\Process\\ProcessResult` instance returned by the `run` method offers a variety of helpful methods that may be used to inspect the process result:"
msgstr ""

#: docs/master/processes.md:block 14 (paragraph)
msgid "If you have a process result and would like to throw an instance of `Illuminate\\Console\\Process\\Exceptions\\ProcessFailedException` if the exit code is greater than zero (thus indicating failure), you may use the `throw` and `throwIf` methods. If the process did not fail, the process result instance will be returned:"
msgstr ""

#: docs/master/processes.md:block 25 (paragraph)
msgid "By default, processes will throw an instance of `Illuminate\\Console\\Process\\Exceptions\\ProcessTimedOutException` after executing for more than 60 seconds. However, you can customize this behavior via the `timeout` method:"
msgstr ""

#: docs/master/processes.md:block 73 (paragraph)
msgid "Laravel also makes it a breeze to manage a pool of concurrent, asynchronous processes, allowing you to easily execute many tasks simultaneously. To get started, invoke the `pool` method, which accepts a closure that receives an instance of `Illuminate\\Console\\Process\\Pool`."
msgstr ""

#: docs/master/processes.md:block 75 (code)
msgid ""
"use Illuminate\\Console\\Process\\Pool;\n"
"use Illuminate\\Support\\Facades\\Process;\n"
"\n"
"$pool = Process::pool(function (Pool $pool) {\n"
"    $pool->path(__DIR__)->command('bash import-1.sh');\n"
"    $pool->path(__DIR__)->command('bash import-2.sh');\n"
"    $pool->path(__DIR__)->command('bash import-3.sh');\n"
"})->start(function (string $type, string $output, int $key) {\n"
"    // ...\n"
"});\n"
"\n"
"while ($pool->running()->isNotEmpty()) {\n"
"    // ...\n"
"}\n"
"\n"
"$results = $pool->wait();\n"
msgstr ""

#: docs/master/processes.md:block 98 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use Illuminate\\Console\\Process\\PendingProcess;\n"
"use Illuminate\\Contracts\\Console\\Process\\ProcessResult;\n"
"use Illuminate\\Support\\Facades\\Process;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_process_is_invoked(): void\n"
"    {\n"
"        Process::fake();\n"
"\n"
"        $response = $this->get('/');\n"
"\n"
"        // Simple process assertion...\n"
"        Process::assertRan('bash import.sh');\n"
"\n"
"        // Or, inspecting the process configuration...\n"
"        Process::assertRan(function (PendingProcess $process, ProcessResult $result) {\n"
"            return $process->command === 'bash import.sh' &&\n"
"                   $process->timeout === 60;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/processes.md:block 129 (paragraph)
msgid "The `$process` passed to the `assertRan` closure is an instance of `Illuminate\\Console\\Process\\PendingProcess`, while the `$result` is an instance of `Illuminate\\Contracts\\Console\\Process\\ProcessResult`."
msgstr ""
