# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-28 10:57+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/routing.md:1
#, no-wrap
msgid "Routing"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:29
#, no-wrap
msgid ""
"- [Basic Routing](#basic-routing)\n"
"    - [Redirect Routes](#redirect-routes)\n"
"    - [View Routes](#view-routes)\n"
"- [Route Parameters](#route-parameters)\n"
"    - [Required Parameters](#required-parameters)\n"
"    - [Optional Parameters](#parameters-optional-parameters)\n"
"    - [Regular Expression "
"Constraints](#parameters-regular-expression-constraints)\n"
"- [Named Routes](#named-routes)\n"
"- [Route Groups](#route-groups)\n"
"    - [Middleware](#route-group-middleware)\n"
"    - [Controllers](#route-group-controllers)\n"
"    - [Subdomain Routing](#route-group-subdomain-routing)\n"
"    - [Route Prefixes](#route-group-prefixes)\n"
"    - [Route Name Prefixes](#route-group-name-prefixes)\n"
"- [Route Model Binding](#route-model-binding)\n"
"    - [Implicit Binding](#implicit-binding)\n"
"    - [Implicit Enum Binding](#implicit-enum-binding)\n"
"    - [Explicit Binding](#explicit-binding)\n"
"- [Fallback Routes](#fallback-routes)\n"
"- [Rate Limiting](#rate-limiting)\n"
"    - [Defining Rate Limiters](#defining-rate-limiters)\n"
"    - [Attaching Rate Limiters To "
"Routes](#attaching-rate-limiters-to-routes)\n"
"- [Form Method Spoofing](#form-method-spoofing)\n"
"- [Accessing The Current Route](#accessing-the-current-route)\n"
"- [Cross-Origin Resource Sharing (CORS)](#cors)\n"
"- [Route Caching](#route-caching)\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:31
#, no-wrap
msgid "<a name=\"basic-routing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:31
#, no-wrap
msgid "Basic Routing"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:34
msgid ""
"The most basic Laravel routes accept a URI and a closure, providing a very "
"simple and expressive method of defining routes and behavior without "
"complicated routing configuration files:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:36 docs/master/routing.md:727
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:40
#, no-wrap
msgid ""
"    Route::get('/greeting', function () {\n"
"        return 'Hello World';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:42
#, no-wrap
msgid "<a name=\"the-default-route-files\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:42
#, no-wrap
msgid "The Default Route Files"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:45
msgid ""
"All Laravel routes are defined in your route files, which are located in the "
"`routes` directory. These files are automatically loaded by your "
"application's `App\\Providers\\RouteServiceProvider`. The `routes/web.php` "
"file defines routes that are for your web interface. These routes are "
"assigned the `web` middleware group, which provides features like session "
"state and CSRF protection. The routes in `routes/api.php` are stateless and "
"are assigned the `api` middleware group."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:47
msgid ""
"For most applications, you will begin by defining routes in your "
"`routes/web.php` file. The routes defined in `routes/web.php` may be "
"accessed by entering the defined route's URL in your browser. For example, "
"you may access the following route by navigating to "
"`http://example.com/user` in your browser:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:49
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:51
#, no-wrap
msgid "    Route::get('/user', [UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:53
msgid ""
"Routes defined in the `routes/api.php` file are nested within a route group "
"by the `RouteServiceProvider`. Within this group, the `/api` URI prefix is "
"automatically applied so you do not need to manually apply it to every route "
"in the file. You may modify the prefix and other route group options by "
"modifying your `RouteServiceProvider` class."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:55
#, no-wrap
msgid "<a name=\"available-router-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:55
#, no-wrap
msgid "Available Router Methods"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:58
msgid "The router allows you to register routes that respond to any HTTP verb:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:65
#, no-wrap
msgid ""
"    Route::get($uri, $callback);\n"
"    Route::post($uri, $callback);\n"
"    Route::put($uri, $callback);\n"
"    Route::patch($uri, $callback);\n"
"    Route::delete($uri, $callback);\n"
"    Route::options($uri, $callback);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:67
msgid ""
"Sometimes you may need to register a route that responds to multiple HTTP "
"verbs. You may do so using the `match` method. Or, you may even register a "
"route that responds to all HTTP verbs using the `any` method:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:71
#, no-wrap
msgid ""
"    Route::match(['get', 'post'], '/', function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:75
#, no-wrap
msgid ""
"    Route::any('/', function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:77
#, no-wrap
msgid ""
"> {tip} When defining multiple routes that share the same URI, routes using "
"the `get`, `post`, `put`, `patch`, `delete`, and `options` methods should be "
"defined before routes using the `any`, `match`, and `redirect` methods. This "
"ensures the incoming request is matched with the correct route.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:79
#, no-wrap
msgid "<a name=\"dependency-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:79
#, no-wrap
msgid "Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:82
msgid ""
"You may type-hint any dependencies required by your route in your route's "
"callback signature. The declared dependencies will automatically be resolved "
"and injected into the callback by the Laravel [service "
"container](/docs/{{version}}/container). For example, you may type-hint the "
"`Illuminate\\Http\\Request` class to have the current HTTP request "
"automatically injected into your route callback:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:84 docs/master/routing.md:153
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:88
#, no-wrap
msgid ""
"    Route::get('/users', function (Request $request) {\n"
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:90
#, no-wrap
msgid "<a name=\"csrf-protection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:90
#, no-wrap
msgid "CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:93
msgid ""
"Remember, any HTML forms pointing to `POST`, `PUT`, `PATCH`, or `DELETE` "
"routes that are defined in the `web` routes file should include a CSRF token "
"field. Otherwise, the request will be rejected. You can read more about CSRF "
"protection in the [CSRF documentation](/docs/{{version}}/csrf):"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:98
#, no-wrap
msgid ""
"    <form method=\"POST\" action=\"/profile\">\n"
"        @csrf\n"
"        ...\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:100
#, no-wrap
msgid "<a name=\"redirect-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:100
#, no-wrap
msgid "Redirect Routes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:103
msgid ""
"If you are defining a route that redirects to another URI, you may use the "
"`Route::redirect` method. This method provides a convenient shortcut so that "
"you do not have to define a full route or controller for performing a simple "
"redirect:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:105
#, no-wrap
msgid "    Route::redirect('/here', '/there');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:107
msgid ""
"By default, `Route::redirect` returns a `302` status code. You may customize "
"the status code using the optional third parameter:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:109
#, no-wrap
msgid "    Route::redirect('/here', '/there', 301);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:111
msgid ""
"Or, you may use the `Route::permanentRedirect` method to return a `301` "
"status code:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:113
#, no-wrap
msgid "    Route::permanentRedirect('/here', '/there');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:115
#, no-wrap
msgid ""
"> {note} When using route parameters in redirect routes, the following "
"parameters are reserved by Laravel and cannot be used: `destination` and "
"`status`.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:117
#, no-wrap
msgid "<a name=\"view-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:117
#, no-wrap
msgid "View Routes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:120
msgid ""
"If your route only needs to return a [view](/docs/{{version}}/views), you "
"may use the `Route::view` method. Like the `redirect` method, this method "
"provides a simple shortcut so that you do not have to define a full route or "
"controller. The `view` method accepts a URI as its first argument and a view "
"name as its second argument. In addition, you may provide an array of data "
"to pass to the view as an optional third argument:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:122
#, no-wrap
msgid "    Route::view('/welcome', 'welcome');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:124
#, no-wrap
msgid "    Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:126
#, no-wrap
msgid ""
"> {note} When using route parameters in view routes, the following "
"parameters are reserved by Laravel and cannot be used: `view`, `data`, "
"`status`, and `headers`.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:128
#, no-wrap
msgid "<a name=\"route-parameters\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:128
#, no-wrap
msgid "Route Parameters"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:131
#, no-wrap
msgid "<a name=\"required-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:131
#, no-wrap
msgid "Required Parameters"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:134
msgid ""
"Sometimes you will need to capture segments of the URI within your "
"route. For example, you may need to capture a user's ID from the URL. You "
"may do so by defining route parameters:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:138
#, no-wrap
msgid ""
"    Route::get('/user/{id}', function ($id) {\n"
"        return 'User '.$id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:140
msgid "You may define as many route parameters as required by your route:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:144
#, no-wrap
msgid ""
"    Route::get('/posts/{post}/comments/{comment}', function ($postId, "
"$commentId) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:146
msgid ""
"Route parameters are always encased within `{}` braces and should consist of "
"alphabetic characters. Underscores (`_`) are also acceptable within route "
"parameter names. Route parameters are injected into route callbacks / "
"controllers based on their order - the names of the route callback / "
"controller arguments do not matter."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:148
#, no-wrap
msgid "<a name=\"parameters-and-dependency-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:148
#, no-wrap
msgid "Parameters & Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:151
msgid ""
"If your route has dependencies that you would like the Laravel service "
"container to automatically inject into your route's callback, you should "
"list your route parameters after your dependencies:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:157
#, no-wrap
msgid ""
"    Route::get('/user/{id}', function (Request $request, $id) {\n"
"        return 'User '.$id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:159
#, no-wrap
msgid "<a name=\"parameters-optional-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:159
#, no-wrap
msgid "Optional Parameters"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:162
msgid ""
"Occasionally you may need to specify a route parameter that may not always "
"be present in the URI. You may do so by placing a `?` mark after the "
"parameter name. Make sure to give the route's corresponding variable a "
"default value:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:166
#, no-wrap
msgid ""
"    Route::get('/user/{name?}', function ($name = null) {\n"
"        return $name;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:170
#, no-wrap
msgid ""
"    Route::get('/user/{name?}', function ($name = 'John') {\n"
"        return $name;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:172
#, no-wrap
msgid "<a name=\"parameters-regular-expression-constraints\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:172
#, no-wrap
msgid "Regular Expression Constraints"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:175
msgid ""
"You may constrain the format of your route parameters using the `where` "
"method on a route instance. The `where` method accepts the name of the "
"parameter and a regular expression defining how the parameter should be "
"constrained:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:179
#, no-wrap
msgid ""
"    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->where('name', '[A-Za-z]+');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:183
#, no-wrap
msgid ""
"    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->where('id', '[0-9]+');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:187
#, no-wrap
msgid ""
"    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:189
msgid ""
"For convenience, some commonly used regular expression patterns have helper "
"methods that allow you to quickly add pattern constraints to your routes:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:193
#, no-wrap
msgid ""
"    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->whereNumber('id')->whereAlpha('name');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:197
#, no-wrap
msgid ""
"    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->whereAlphaNumeric('name');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:201
#, no-wrap
msgid ""
"    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->whereUuid('id');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:203
msgid ""
"If the incoming request does not match the route pattern constraints, a 404 "
"HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:205
#, no-wrap
msgid "<a name=\"parameters-global-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:205
#, no-wrap
msgid "Global Constraints"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:208
msgid ""
"If you would like a route parameter to always be constrained by a given "
"regular expression, you may use the `pattern` method. You should define "
"these patterns in the `boot` method of your "
"`App\\Providers\\RouteServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:218
#, no-wrap
msgid ""
"    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::pattern('id', '[0-9]+');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:220
msgid ""
"Once the pattern has been defined, it is automatically applied to all routes "
"using that parameter name:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:224
#, no-wrap
msgid ""
"    Route::get('/user/{id}', function ($id) {\n"
"        // Only executed if {id} is numeric...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:226
#, no-wrap
msgid "<a name=\"parameters-encoded-forward-slashes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:226
#, no-wrap
msgid "Encoded Forward Slashes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:229
msgid ""
"The Laravel routing component allows all characters except `/` to be present "
"within route parameter values. You must explicitly allow `/` to be part of "
"your placeholder using a `where` condition regular expression:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:233
#, no-wrap
msgid ""
"    Route::get('/search/{search}', function ($search) {\n"
"        return $search;\n"
"    })->where('search', '.*');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:235
#, no-wrap
msgid ""
"> {note} Encoded forward slashes are only supported within the last route "
"segment.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:237
#, no-wrap
msgid "<a name=\"named-routes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:237
#, no-wrap
msgid "Named Routes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:240
msgid ""
"Named routes allow the convenient generation of URLs or redirects for "
"specific routes. You may specify a name for a route by chaining the `name` "
"method onto the route definition:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:244
#, no-wrap
msgid ""
"    Route::get('/user/profile', function () {\n"
"        //\n"
"    })->name('profile');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:246
msgid "You may also specify route names for controller actions:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:251
#, no-wrap
msgid ""
"    Route::get(\n"
"        '/user/profile',\n"
"        [UserProfileController::class, 'show']\n"
"    )->name('profile');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:253
#, no-wrap
msgid "> {note} Route names should always be unique.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:255
#, no-wrap
msgid "<a name=\"generating-urls-to-named-routes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:255
#, no-wrap
msgid "Generating URLs To Named Routes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:258
msgid ""
"Once you have assigned a name to a given route, you may use the route's name "
"when generating URLs or redirects via Laravel's `route` and `redirect` "
"helper functions:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:261
#, no-wrap
msgid ""
"    // Generating URLs...\n"
"    $url = route('profile');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:264
#, no-wrap
msgid ""
"    // Generating Redirects...\n"
"    return redirect()->route('profile');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:266
msgid ""
"If the named route defines parameters, you may pass the parameters as the "
"second argument to the `route` function. The given parameters will "
"automatically be inserted into the generated URL in their correct positions:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:270 docs/master/routing.md:278
#, no-wrap
msgid ""
"    Route::get('/user/{id}/profile', function ($id) {\n"
"        //\n"
"    })->name('profile');\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:272
#, no-wrap
msgid "    $url = route('profile', ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:274
msgid ""
"If you pass additional parameters in the array, those key / value pairs will "
"automatically be added to the generated URL's query string:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:280
#, no-wrap
msgid "    $url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:282
#, no-wrap
msgid "    // /user/1/profile?photos=yes\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:284
#, no-wrap
msgid ""
"> {tip} Sometimes, you may wish to specify request-wide default values for "
"URL parameters, such as the current locale. To accomplish this, you may use "
"the [`URL::defaults` method](/docs/{{version}}/urls#default-values).\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:286
#, no-wrap
msgid "<a name=\"inspecting-the-current-route\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:286
#, no-wrap
msgid "Inspecting The Current Route"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:289
msgid ""
"If you would like to determine if the current request was routed to a given "
"named route, you may use the `named` method on a Route instance. For "
"example, you may check the current route name from a route middleware:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:302
#, no-wrap
msgid ""
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->route()->named('profile')) {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:305
#, no-wrap
msgid ""
"        return $next($request);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:307
#, no-wrap
msgid "<a name=\"route-groups\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:307
#, no-wrap
msgid "Route Groups"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:310
msgid ""
"Route groups allow you to share route attributes, such as middleware, across "
"a large number of routes without needing to define those attributes on each "
"individual route."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:312
msgid ""
"Nested groups attempt to intelligently \"merge\" attributes with their "
"parent group. Middleware and `where` conditions are merged while names and "
"prefixes are appended. Namespace delimiters and slashes in URI prefixes are "
"automatically added where appropriate."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:314
#, no-wrap
msgid "<a name=\"route-group-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:314
#, no-wrap
msgid "Middleware"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:317
msgid ""
"To assign [middleware](/docs/{{version}}/middleware) to all routes within a "
"group, you may use the `middleware` method before defining the "
"group. Middleware are executed in the order they are listed in the array:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:322
#, no-wrap
msgid ""
"    Route::middleware(['first', 'second'])->group(function () {\n"
"        Route::get('/', function () {\n"
"            // Uses first & second middleware...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:327
#, no-wrap
msgid ""
"        Route::get('/user/profile', function () {\n"
"            // Uses first & second middleware...\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:329
#, no-wrap
msgid "<a name=\"route-group-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:329
#, no-wrap
msgid "Controllers"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:332
msgid ""
"If a group of routes all utilize the same "
"[controller](/docs/{{version}}/controllers), you may use the `controller` "
"method to define the common controller for all of the routes within the "
"group. Then, when defining the routes, you only need to provide the "
"controller method that they invoke:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:334
#, no-wrap
msgid "    use App\\Http\\Controllers\\OrderController;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:339
#, no-wrap
msgid ""
"    Route::controller(OrderController::class)->group(function () {\n"
"        Route::get('/orders/{id}', 'show');\n"
"        Route::post('/orders', 'store');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:341
#, no-wrap
msgid "<a name=\"route-group-subdomain-routing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:341
#, no-wrap
msgid "Subdomain Routing"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:344
msgid ""
"Route groups may also be used to handle subdomain routing. Subdomains may be "
"assigned route parameters just like route URIs, allowing you to capture a "
"portion of the subdomain for usage in your route or controller. The "
"subdomain may be specified by calling the `domain` method before defining "
"the group:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:350
#, no-wrap
msgid ""
"    Route::domain('{account}.example.com')->group(function () {\n"
"        Route::get('user/{id}', function ($account, $id) {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:352
#, no-wrap
msgid ""
"> {note} In order to ensure your subdomain routes are reachable, you should "
"register subdomain routes before registering root domain routes. This will "
"prevent root domain routes from overwriting subdomain routes which have the "
"same URI path.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:354
#, no-wrap
msgid "<a name=\"route-group-prefixes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:354
#, no-wrap
msgid "Route Prefixes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:357
msgid ""
"The `prefix` method may be used to prefix each route in the group with a "
"given URI. For example, you may want to prefix all route URIs within the "
"group with `admin`:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:363
#, no-wrap
msgid ""
"    Route::prefix('admin')->group(function () {\n"
"        Route::get('/users', function () {\n"
"            // Matches The \"/admin/users\" URL\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:365
#, no-wrap
msgid "<a name=\"route-group-name-prefixes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:365
#, no-wrap
msgid "Route Name Prefixes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:368
msgid ""
"The `name` method may be used to prefix each route name in the group with a "
"given string. For example, you may want to prefix all of the grouped route's "
"names with `admin`. The given string is prefixed to the route name exactly "
"as it is specified, so we will be sure to provide the trailing `.` character "
"in the prefix:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:374
#, no-wrap
msgid ""
"    Route::name('admin.')->group(function () {\n"
"        Route::get('/users', function () {\n"
"            // Route assigned name \"admin.users\"...\n"
"        })->name('users');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:376
#, no-wrap
msgid "<a name=\"route-model-binding\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:376
#, no-wrap
msgid "Route Model Binding"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:379
msgid ""
"When injecting a model ID to a route or controller action, you will often "
"query the database to retrieve the model that corresponds to that "
"ID. Laravel route model binding provides a convenient way to automatically "
"inject the model instances directly into your routes. For example, instead "
"of injecting a user's ID, you can inject the entire `User` model instance "
"that matches the given ID."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:381
#, no-wrap
msgid "<a name=\"implicit-binding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:381
#, no-wrap
msgid "Implicit Binding"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:384
msgid ""
"Laravel automatically resolves Eloquent models defined in routes or "
"controller actions whose type-hinted variable names match a route segment "
"name. For example:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:386 docs/master/routing.md:413 docs/master/routing.md:539
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:390
#, no-wrap
msgid ""
"    Route::get('/users/{user}', function (User $user) {\n"
"        return $user->email;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:392
msgid ""
"Since the `$user` variable is type-hinted as the `App\\Models\\User` "
"Eloquent model and the variable name matches the `{user}` URI segment, "
"Laravel will automatically inject the model instance that has an ID matching "
"the corresponding value from the request URI. If a matching model instance "
"is not found in the database, a 404 HTTP response will automatically be "
"generated."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:394
msgid ""
"Of course, implicit binding is also possible when using controller "
"methods. Again, note the `{user}` URI segment matches the `$user` variable "
"in the controller which contains an `App\\Models\\User` type-hint:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:397
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\UserController;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:400
#, no-wrap
msgid ""
"    // Route definition...\n"
"    Route::get('/users/{user}', [UserController::class, 'show']);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:406
#, no-wrap
msgid ""
"    // Controller method definition...\n"
"    public function show(User $user)\n"
"    {\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:408
#, no-wrap
msgid "<a name=\"implicit-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:408
#, no-wrap
msgid "Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:411
msgid ""
"Typically, implicit model binding will not retrieve models that have been "
"[soft deleted](/docs/{{version}}/eloquent#soft-deleting). However, you may "
"instruct the implicit binding to retrieve these models by chaining the "
"`withTrashed` method onto your route's definition:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:417
#, no-wrap
msgid ""
"    Route::get('/users/{user}', function (User $user) {\n"
"        return $user->email;\n"
"    })->withTrashed();\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:420
#, no-wrap
msgid ""
"<a name=\"customizing-the-key\"></a>\n"
"<a name=\"customizing-the-default-key-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:420
#, no-wrap
msgid "Customizing The Key"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:423
msgid ""
"Sometimes you may wish to resolve Eloquent models using a column other than "
"`id`. To do so, you may specify the column in the route parameter "
"definition:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:425
#, no-wrap
msgid "    use App\\Models\\Post;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:429
#, no-wrap
msgid ""
"    Route::get('/posts/{post:slug}', function (Post $post) {\n"
"        return $post;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:431
msgid ""
"If you would like model binding to always use a database column other than "
"`id` when retrieving a given model class, you may override the "
"`getRouteKeyName` method on the Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:441
#, no-wrap
msgid ""
"    /**\n"
"     * Get the route key for the model.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function getRouteKeyName()\n"
"    {\n"
"        return 'slug';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:443
#, no-wrap
msgid "<a name=\"implicit-model-binding-scoping\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:443
#, no-wrap
msgid "Custom Keys & Scoping"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:446
msgid ""
"When implicitly binding multiple Eloquent models in a single route "
"definition, you may wish to scope the second Eloquent model such that it "
"must be a child of the previous Eloquent model. For example, consider this "
"route definition that retrieves a blog post by slug for a specific user:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:449 docs/master/routing.md:460
#, no-wrap
msgid ""
"    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:453
#, no-wrap
msgid ""
"    Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post "
"$post) {\n"
"        return $post;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:455
msgid ""
"When using a custom keyed implicit binding as a nested route parameter, "
"Laravel will automatically scope the query to retrieve the nested model by "
"its parent using conventions to guess the relationship name on the "
"parent. In this case, it will be assumed that the `User` model has a "
"relationship named `posts` (the plural form of the route parameter name) "
"which can be used to retrieve the `Post` model."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:457
msgid ""
"If you wish, you may instruct Laravel to scope \"child\" bindings even when "
"a custom key is not provided. To do so, you may invoke the `scopeBindings` "
"method when defining your route:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:464
#, no-wrap
msgid ""
"    Route::get('/users/{user}/posts/{post}', function (User $user, Post "
"$post) {\n"
"        return $post;\n"
"    })->scopeBindings();\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:466
msgid ""
"Or, you may instruct an entire group of route definitions to use scoped "
"bindings:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:472
#, no-wrap
msgid ""
"    Route::scopeBindings()->group(function () {\n"
"        Route::get('/users/{user}/posts/{post}', function (User $user, Post "
"$post) {\n"
"            return $post;\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:474
#, no-wrap
msgid "<a name=\"customizing-missing-model-behavior\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:474
#, no-wrap
msgid "Customizing Missing Model Behavior"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:477
msgid ""
"Typically, a 404 HTTP response will be generated if an implicitly bound "
"model is not found. However, you may customize this behavior by calling the "
"`missing` method when defining your route. The `missing` method accepts a "
"closure that will be invoked if an implicitly bound model can not be found:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:481
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\LocationsController;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:487
#, no-wrap
msgid ""
"    Route::get('/locations/{location:slug}', [LocationsController::class, "
"'show'])\n"
"            ->name('locations.view')\n"
"            ->missing(function (Request $request) {\n"
"                return Redirect::route('locations.index');\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:489
#, no-wrap
msgid "<a name=\"implicit-enum-binding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:489
#, no-wrap
msgid "Implicit Enum Binding"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:492
msgid ""
"PHP 8.1 introduced support for "
"[Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To "
"compliment this feature, Laravel allows you to type-hint an Enum on your "
"route definition and Laravel will only invoke the route if that route "
"segment corresponds to a valid Enum value. Otherwise, a 404 HTTP response "
"will be returned automatically. For example, given the following Enum:"
msgstr ""

#. type: Code fence info string
#: docs/master/routing.md:493 docs/master/routing.md:507
#, no-wrap
msgid "php"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:493
#, no-wrap
msgid ""
"<?php\n"
"\n"
"namespace App\\Enums;\n"
"\n"
"enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:506
msgid ""
"You may define a route that will only be invoked if the `{category}` route "
"segment is `fruits` or `people`. Otherwise, Laravel will return a 404 HTTP "
"response:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:507
#, no-wrap
msgid ""
"use App\\Enums\\Category;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:517
#, no-wrap
msgid "<a name=\"explicit-binding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:517
#, no-wrap
msgid "Explicit Binding"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:520
msgid ""
"You are not required to use Laravel's implicit, convention based model "
"resolution in order to use model binding. You can also explicitly define how "
"route parameters correspond to models. To register an explicit binding, use "
"the router's `model` method to specify the class for a given parameter. You "
"should define your explicit model bindings at the beginning of the `boot` "
"method of your `RouteServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:523 docs/master/routing.md:555
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:532
#, no-wrap
msgid ""
"    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::model('user', User::class);\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:535 docs/master/routing.md:569
#, no-wrap
msgid ""
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:537
msgid "Next, define a route that contains a `{user}` parameter:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:543
#, no-wrap
msgid ""
"    Route::get('/users/{user}', function (User $user) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:545
msgid ""
"Since we have bound all `{user}` parameters to the `App\\Models\\User` "
"model, an instance of that class will be injected into the route. So, for "
"example, a request to `users/1` will inject the `User` instance from the "
"database which has an ID of `1`."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:547
msgid ""
"If a matching model instance is not found in the database, a 404 HTTP "
"response will be automatically generated."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:549
#, no-wrap
msgid "<a name=\"customizing-the-resolution-logic\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:549
#, no-wrap
msgid "Customizing The Resolution Logic"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:552
msgid ""
"If you wish to define your own model binding resolution logic, you may use "
"the `Route::bind` method. The closure you pass to the `bind` method will "
"receive the value of the URI segment and should return the instance of the "
"class that should be injected into the route. Again, this customization "
"should take place in the `boot` method of your application's "
"`RouteServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:566
#, no-wrap
msgid ""
"    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::bind('user', function ($value) {\n"
"            return User::where('name', $value)->firstOrFail();\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:571
msgid ""
"Alternatively, you may override the `resolveRouteBinding` method on your "
"Eloquent model. This method will receive the value of the URI segment and "
"should return the instance of the class that should be injected into the "
"route:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:583
#, no-wrap
msgid ""
"    /**\n"
"     * Retrieve the model for a bound value.\n"
"     *\n"
"     * @param  mixed  $value\n"
"     * @param  string|null  $field\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
"     */\n"
"    public function resolveRouteBinding($value, $field = null)\n"
"    {\n"
"        return $this->where('name', $value)->firstOrFail();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:585
msgid ""
"If a route is utilizing [implicit binding "
"scoping](#implicit-model-binding-scoping), the `resolveChildRouteBinding` "
"method will be used to resolve the child binding of the parent model:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:598
#, no-wrap
msgid ""
"    /**\n"
"     * Retrieve the child model for a bound value.\n"
"     *\n"
"     * @param  string  $childType\n"
"     * @param  mixed  $value\n"
"     * @param  string|null  $field\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
"     */\n"
"    public function resolveChildRouteBinding($childType, $value, $field)\n"
"    {\n"
"        return parent::resolveChildRouteBinding($childType, $value, "
"$field);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:600
#, no-wrap
msgid "<a name=\"fallback-routes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:600
#, no-wrap
msgid "Fallback Routes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:603
msgid ""
"Using the `Route::fallback` method, you may define a route that will be "
"executed when no other route matches the incoming request. Typically, "
"unhandled requests will automatically render a \"404\" page via your "
"application's exception handler. However, since you would typically define "
"the `fallback` route within your `routes/web.php` file, all middleware in "
"the `web` middleware group will apply to the route. You are free to add "
"additional middleware to this route as needed:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:607
#, no-wrap
msgid ""
"    Route::fallback(function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:609
#, no-wrap
msgid ""
"> {note} The fallback route should always be the last route registered by "
"your application.\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:611
#, no-wrap
msgid "<a name=\"rate-limiting\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:611
#, no-wrap
msgid "Rate Limiting"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:614
#, no-wrap
msgid "<a name=\"defining-rate-limiters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:614
#, no-wrap
msgid "Defining Rate Limiters"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:617
msgid ""
"Laravel includes powerful and customizable rate limiting services that you "
"may utilize to restrict the amount of traffic for a given route or group of "
"routes. To get started, you should define rate limiter configurations that "
"meet your application's needs. Typically, this should be done within the "
"`configureRateLimiting` method of your application's "
"`App\\Providers\\RouteServiceProvider` class."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:619
msgid ""
"Rate limiters are defined using the `RateLimiter` facade's `for` method. The "
"`for` method accepts a rate limiter name and a closure that returns the "
"limit configuration that should apply to routes that are assigned to the "
"rate limiter. Limit configuration are instances of the "
"`Illuminate\\Cache\\RateLimiting\\Limit` class. This class contains helpful "
"\"builder\" methods so that you can quickly define your limit. The rate "
"limiter name may be any string you wish:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:622
#, no-wrap
msgid ""
"    use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"    use Illuminate\\Support\\Facades\\RateLimiter;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:634
#, no-wrap
msgid ""
"    /**\n"
"     * Configure the rate limiters for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function configureRateLimiting()\n"
"    {\n"
"        RateLimiter::for('global', function (Request $request) {\n"
"            return Limit::perMinute(1000);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:636
msgid ""
"If the incoming request exceeds the specified rate limit, a response with a "
"429 HTTP status code will automatically be returned by Laravel. If you would "
"like to define your own response that should be returned by a rate limit, "
"you may use the `response` method:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:642
#, no-wrap
msgid ""
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000)->response(function () {\n"
"            return response('Custom response...', 429);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:644
msgid ""
"Since rate limiter callbacks receive the incoming HTTP request instance, you "
"may build the appropriate rate limit dynamically based on the incoming "
"request or authenticated user:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:650
#, no-wrap
msgid ""
"    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:652
#, no-wrap
msgid "<a name=\"segmenting-rate-limits\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:652
#, no-wrap
msgid "Segmenting Rate Limits"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:655
msgid ""
"Sometimes you may wish to segment rate limits by some arbitrary value. For "
"example, you may wish to allow users to access a given route 100 times per "
"minute per IP address. To accomplish this, you may use the `by` method when "
"building your rate limit:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:661
#, no-wrap
msgid ""
"    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100)->by($request->ip());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:663
msgid ""
"To illustrate this feature using another example, we can limit access to the "
"route to 100 times per minute per authenticated user ID or 10 times per "
"minute per IP address for guests:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:669
#, no-wrap
msgid ""
"    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()\n"
"                    ? Limit::perMinute(100)->by($request->user()->id)\n"
"                    : Limit::perMinute(10)->by($request->ip());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:671
#, no-wrap
msgid "<a name=\"multiple-rate-limits\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:671
#, no-wrap
msgid "Multiple Rate Limits"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:674
msgid ""
"If needed, you may return an array of rate limits for a given rate limiter "
"configuration. Each rate limit will be evaluated for the route based on the "
"order they are placed within the array:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:681
#, no-wrap
msgid ""
"    RateLimiter::for('login', function (Request $request) {\n"
"        return [\n"
"            Limit::perMinute(500),\n"
"            Limit::perMinute(3)->by($request->input('email')),\n"
"        ];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:683
#, no-wrap
msgid "<a name=\"attaching-rate-limiters-to-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/routing.md:683
#, no-wrap
msgid "Attaching Rate Limiters To Routes"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:686
msgid ""
"Rate limiters may be attached to routes or route groups using the `throttle` "
"[middleware](/docs/{{version}}/middleware). The throttle middleware accepts "
"the name of the rate limiter you wish to assign to the route:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:691
#, no-wrap
msgid ""
"    Route::middleware(['throttle:uploads'])->group(function () {\n"
"        Route::post('/audio', function () {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:696
#, no-wrap
msgid ""
"        Route::post('/video', function () {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:698
#, no-wrap
msgid "<a name=\"throttling-with-redis\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/routing.md:698
#, no-wrap
msgid "Throttling With Redis"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:701
msgid ""
"Typically, the `throttle` middleware is mapped to the "
"`Illuminate\\Routing\\Middleware\\ThrottleRequests` class. This mapping is "
"defined in your application's HTTP kernel (`App\\Http\\Kernel`). However, if "
"you are using Redis as your application's cache driver, you may wish to "
"change this mapping to use the "
"`Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` class. This "
"class is more efficient at managing rate limiting using Redis:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:703
#, no-wrap
msgid ""
"    'throttle' => "
"\\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:705
#, no-wrap
msgid "<a name=\"form-method-spoofing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:705
#, no-wrap
msgid "Form Method Spoofing"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:708
msgid ""
"HTML forms do not support `PUT`, `PATCH`, or `DELETE` actions. So, when "
"defining `PUT`, `PATCH`, or `DELETE` routes that are called from an HTML "
"form, you will need to add a hidden `_method` field to the form. The value "
"sent with the `_method` field will be used as the HTTP request method:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:713
#, no-wrap
msgid ""
"    <form action=\"/example\" method=\"POST\">\n"
"        <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n"
"        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() "
"}}\">\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:715
msgid ""
"For convenience, you may use the `@method` [Blade "
"directive](/docs/{{version}}/blade) to generate the `_method` input field:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:720
#, no-wrap
msgid ""
"    <form action=\"/example\" method=\"POST\">\n"
"        @method('PUT')\n"
"        @csrf\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:722
#, no-wrap
msgid "<a name=\"accessing-the-current-route\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:722
#, no-wrap
msgid "Accessing The Current Route"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:725
msgid ""
"You may use the `current`, `currentRouteName`, and `currentRouteAction` "
"methods on the `Route` facade to access information about the route handling "
"the incoming request:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:731
#, no-wrap
msgid ""
"    $route = Route::current(); // Illuminate\\Routing\\Route\n"
"    $name = Route::currentRouteName(); // string\n"
"    $action = Route::currentRouteAction(); // string\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:733
msgid ""
"You may refer to the API documentation for both the [underlying class of the "
"Route "
"facade](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html) "
"and [Route "
"instance](https://laravel.com/api/{{version}}/Illuminate/Routing/Route.html) "
"to review all of the methods that are available on the router and route "
"classes."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:735
#, no-wrap
msgid "<a name=\"cors\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:735
#, no-wrap
msgid "Cross-Origin Resource Sharing (CORS)"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:738
msgid ""
"Laravel can automatically respond to CORS `OPTIONS` HTTP requests with "
"values that you configure. All CORS settings may be configured in your "
"application's `config/cors.php` configuration file. The `OPTIONS` requests "
"will automatically be handled by the `HandleCors` "
"[middleware](/docs/{{version}}/middleware) that is included by default in "
"your global middleware stack. Your global middleware stack is located in "
"your application's HTTP kernel (`App\\Http\\Kernel`)."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:740
#, no-wrap
msgid ""
"> {tip} For more information on CORS and CORS headers, please consult the "
"[MDN web documentation on "
"CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers).\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:742
#, no-wrap
msgid "<a name=\"route-caching\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/routing.md:742
#, no-wrap
msgid "Route Caching"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:745
msgid ""
"When deploying your application to production, you should take advantage of "
"Laravel's route cache. Using the route cache will drastically decrease the "
"amount of time it takes to register all of your application's routes. To "
"generate a route cache, execute the `route:cache` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:747
#, no-wrap
msgid "    php artisan route:cache\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:749
msgid ""
"After running this command, your cached routes file will be loaded on every "
"request. Remember, if you add any new routes you will need to generate a "
"fresh route cache. Because of this, you should only run the `route:cache` "
"command during your project's deployment."
msgstr ""

#. type: Plain text
#: docs/master/routing.md:751
msgid "You may use the `route:clear` command to clear the route cache:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:752
#, no-wrap
msgid "    php artisan route:clear\n"
msgstr ""
