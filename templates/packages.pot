#
msgid ""
msgstr ""

#: docs/8.x/packages.md:block 1 (header)
msgid "Package Development"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[A Note On Facades](#a-note-on-facades)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Package Discovery](#package-discovery)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Service Providers](#service-providers)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Resources](#resources)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Migrations](#migrations)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Routes](#routes)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Translations](#translations)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Views](#views)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[View Components](#view-components)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Commands](#commands)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Public Assets](#public-assets)"
msgstr ""

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Publishing File Groups](#publishing-file-groups)"
msgstr ""

#: docs/8.x/packages.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/packages.md:block 5 (paragraph)
msgid "Packages are the primary way of adding functionality to Laravel. Packages might be anything from a great way to work with dates like [Carbon](https://github.com/briannesbitt/Carbon) or a package that allows you to associate files with Eloquent models like Spatie's [Laravel Media Library](https://github.com/spatie/laravel-medialibrary)."
msgstr ""

#: docs/8.x/packages.md:block 6 (paragraph)
msgid "There are different types of packages. Some packages are stand-alone, meaning they work with any PHP framework. Carbon and PHPUnit are examples of stand-alone packages. Any of these packages may be used with Laravel by requiring them in your `composer.json` file."
msgstr ""

#: docs/8.x/packages.md:block 7 (paragraph)
msgid "On the other hand, other packages are specifically intended for use with Laravel. These packages may have routes, controllers, views, and configuration specifically intended to enhance a Laravel application. This guide primarily covers the development of those packages that are Laravel specific."
msgstr ""

#: docs/8.x/packages.md:block 8 (paragraph)
msgid "<a name=\"a-note-on-facades\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 9 (header)
msgid "A Note On Facades"
msgstr ""

#: docs/8.x/packages.md:block 10 (paragraph)
msgid "When writing a Laravel application, it generally does not matter if you use contracts or facades since both provide essentially equal levels of testability. However, when writing packages, your package will not typically have access to all of Laravel's testing helpers. If you would like to be able to write your package tests as if the package were installed inside a typical Laravel application, you may use the [Orchestral Testbench](https://github.com/orchestral/testbench) package."
msgstr ""

#: docs/8.x/packages.md:block 11 (paragraph)
msgid "<a name=\"package-discovery\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 12 (header)
msgid "Package Discovery"
msgstr ""

#: docs/8.x/packages.md:block 13 (paragraph)
msgid "In a Laravel application's `config/app.php` configuration file, the `providers` option defines a list of service providers that should be loaded by Laravel. When someone installs your package, you will typically want your service provider to be included in this list. Instead of requiring users to manually add your service provider to the list, you may define the provider in the `extra` section of your package's `composer.json` file. In addition to service providers, you may also list any [facades](/docs/{{version}}/facades) you would like to be registered:"
msgstr ""

#: docs/8.x/packages.md:block 14 (code)
msgid ""
"\"extra\": {\n"
"    \"laravel\": {\n"
"        \"providers\": [\n"
"            \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n"
"        ],\n"
"        \"aliases\": {\n"
"            \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n"
"        }\n"
"    }\n"
"},\n"
msgstr ""

#: docs/8.x/packages.md:block 15 (paragraph)
msgid "Once your package has been configured for discovery, Laravel will automatically register its service providers and facades when it is installed, creating a convenient installation experience for your package's users."
msgstr ""

#: docs/8.x/packages.md:block 16 (paragraph)
msgid "<a name=\"opting-out-of-package-discovery\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 17 (header)
msgid "Opting Out Of Package Discovery"
msgstr ""

#: docs/8.x/packages.md:block 18 (paragraph)
msgid "If you are the consumer of a package and would like to disable package discovery for a package, you may list the package name in the `extra` section of your application's `composer.json` file:"
msgstr ""

#: docs/8.x/packages.md:block 19 (code)
msgid ""
"\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"barryvdh/laravel-debugbar\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr ""

#: docs/8.x/packages.md:block 20 (paragraph)
msgid "You may disable package discovery for all packages using the `*` character inside of your application's `dont-discover` directive:"
msgstr ""

#: docs/8.x/packages.md:block 21 (code)
msgid ""
"\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"*\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr ""

#: docs/8.x/packages.md:block 22 (paragraph)
msgid "<a name=\"service-providers\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 23 (header)
msgid "Service Providers"
msgstr ""

#: docs/8.x/packages.md:block 24 (paragraph)
msgid "[Service providers](/docs/{{version}}/providers) are the connection point between your package and Laravel. A service provider is responsible for binding things into Laravel's [service container](/docs/{{version}}/container) and informing Laravel where to load package resources such as views, configuration, and localization files."
msgstr ""

#: docs/8.x/packages.md:block 25 (paragraph)
msgid "A service provider extends the `Illuminate\\Support\\ServiceProvider` class and contains two methods: `register` and `boot`. The base `ServiceProvider` class is located in the `illuminate/support` Composer package, which you should add to your own package's dependencies. To learn more about the structure and purpose of service providers, check out [their documentation](/docs/{{version}}/providers)."
msgstr ""

#: docs/8.x/packages.md:block 26 (paragraph)
msgid "<a name=\"resources\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 27 (header)
msgid "Resources"
msgstr ""

#: docs/8.x/packages.md:block 28 (paragraph)
msgid "<a name=\"configuration\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 29 (header)
msgid "Configuration"
msgstr ""

#: docs/8.x/packages.md:block 30 (paragraph)
msgid "Typically, you will need to publish your package's configuration file to the application's `config` directory. This will allow users of your package to easily override your default configuration options. To allow your configuration files to be published, call the `publishes` method from the `boot` method of your service provider:"
msgstr ""

#: docs/8.x/packages.md:block 31 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../config/courier.php' => config_path('courier.php'),\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 32 (paragraph)
msgid "Now, when users of your package execute Laravel's `vendor:publish` command, your file will be copied to the specified publish location. Once your configuration has been published, its values may be accessed like any other configuration file:"
msgstr ""

#: docs/8.x/packages.md:block 33 (code)
msgid "$value = config('courier.option');\n"
msgstr ""

#: docs/8.x/packages.md:block 34 (quote)
msgid "{note} You should not define closures in your configuration files. They can not be serialized correctly when users execute the `config:cache` Artisan command."
msgstr ""

#: docs/8.x/packages.md:block 35 (paragraph)
msgid "<a name=\"default-package-configuration\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 36 (header)
msgid "Default Package Configuration"
msgstr ""

#: docs/8.x/packages.md:block 37 (paragraph)
msgid "You may also merge your own package configuration file with the application's published copy. This will allow your users to define only the options they actually want to override in the published copy of the configuration file. To merge the configuration file values, use the `mergeConfigFrom` method within your service provider's `register` method."
msgstr ""

#: docs/8.x/packages.md:block 38 (paragraph)
msgid "The `mergeConfigFrom` method accepts the path to your package's configuration file as its first argument and the name of the application's copy of the configuration file as its second argument:"
msgstr ""

#: docs/8.x/packages.md:block 39 (code)
msgid ""
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->mergeConfigFrom(\n"
"        __DIR__.'/../config/courier.php', 'courier'\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 40 (quote)
msgid "{note} This method only merges the first level of the configuration array. If your users partially define a multi-dimensional configuration array, the missing options will not be merged."
msgstr ""

#: docs/8.x/packages.md:block 41 (paragraph)
msgid "<a name=\"routes\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 42 (header)
msgid "Routes"
msgstr ""

#: docs/8.x/packages.md:block 43 (paragraph)
msgid "If your package contains routes, you may load them using the `loadRoutesFrom` method. This method will automatically determine if the application's routes are cached and will not load your routes file if the routes have already been cached:"
msgstr ""

#: docs/8.x/packages.md:block 44 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 45 (paragraph)
msgid "<a name=\"migrations\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 46 (header)
msgid "Migrations"
msgstr ""

#: docs/8.x/packages.md:block 47 (paragraph)
msgid "If your package contains [database migrations](/docs/{{version}}/migrations), you may use the `loadMigrationsFrom` method to inform Laravel how to load them. The `loadMigrationsFrom` method accepts the path to your package's migrations as its only argument:"
msgstr ""

#: docs/8.x/packages.md:block 48 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadMigrationsFrom(__DIR__.'/../database/migrations');\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 49 (paragraph)
msgid "Once your package's migrations have been registered, they will automatically be run when the `php artisan migrate` command is executed. You do not need to export them to the application's `database/migrations` directory."
msgstr ""

#: docs/8.x/packages.md:block 50 (paragraph)
msgid "<a name=\"translations\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 51 (header)
msgid "Translations"
msgstr ""

#: docs/8.x/packages.md:block 52 (paragraph)
msgid "If your package contains [translation files](/docs/{{version}}/localization), you may use the `loadTranslationsFrom` method to inform Laravel how to load them. For example, if your package is named `courier`, you should add the following to your service provider's `boot` method:"
msgstr ""

#: docs/8.x/packages.md:block 53 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 54 (paragraph)
msgid "Package translations are referenced using the `package::file.line` syntax convention. So, you may load the `courier` package's `welcome` line from the `messages` file like so:"
msgstr ""

#: docs/8.x/packages.md:block 55 (code)
msgid "echo trans('courier::messages.welcome');\n"
msgstr ""

#: docs/8.x/packages.md:block 56 (paragraph)
msgid "<a name=\"publishing-translations\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 57 (header)
msgid "Publishing Translations"
msgstr ""

#: docs/8.x/packages.md:block 58 (paragraph)
msgid "If you would like to publish your package's translations to the application's `resources/lang/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the `courier` package, you may do the following:"
msgstr ""

#: docs/8.x/packages.md:block 59 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
"\n"
"    $this->publishes([\n"
"        __DIR__.'/../resources/lang' => resource_path('lang/vendor/courier'),\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 60 (paragraph)
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's translations will be published to the specified publish location."
msgstr ""

#: docs/8.x/packages.md:block 61 (paragraph)
msgid "<a name=\"views\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 62 (header)
msgid "Views"
msgstr ""

#: docs/8.x/packages.md:block 63 (paragraph)
msgid "To register your package's [views](/docs/{{version}}/views) with Laravel, you need to tell Laravel where the views are located. You may do this using the service provider's `loadViewsFrom` method. The `loadViewsFrom` method accepts two arguments: the path to your view templates and your package's name. For example, if your package's name is `courier`, you would add the following to your service provider's `boot` method:"
msgstr ""

#: docs/8.x/packages.md:block 64 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 65 (paragraph)
msgid "Package views are referenced using the `package::view` syntax convention. So, once your view path is registered in a service provider, you may load the `dashboard` view from the `courier` package like so:"
msgstr ""

#: docs/8.x/packages.md:block 66 (code)
msgid ""
"Route::get('/dashboard', function () {\n"
"    return view('courier::dashboard');\n"
"});\n"
msgstr ""

#: docs/8.x/packages.md:block 67 (paragraph)
msgid "<a name=\"overriding-package-views\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 68 (header)
msgid "Overriding Package Views"
msgstr ""

#: docs/8.x/packages.md:block 69 (paragraph)
msgid "When you use the `loadViewsFrom` method, Laravel actually registers two locations for your views: the application's `resources/views/vendor` directory and the directory you specify. So, using the `courier` package as an example, Laravel will first check if a custom version of the view has been placed in the `resources/views/vendor/courier` directory by the developer. Then, if the view has not been customized, Laravel will search the package view directory you specified in your call to `loadViewsFrom`. This makes it easy for package users to customize / override your package's views."
msgstr ""

#: docs/8.x/packages.md:block 70 (paragraph)
msgid "<a name=\"publishing-views\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 71 (header)
msgid "Publishing Views"
msgstr ""

#: docs/8.x/packages.md:block 72 (paragraph)
msgid "If you would like to make your views available for publishing to the application's `resources/views/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package view paths and their desired publish locations:"
msgstr ""

#: docs/8.x/packages.md:block 73 (code)
msgid ""
"/**\n"
" * Bootstrap the package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
"\n"
"    $this->publishes([\n"
"        __DIR__.'/../resources/views' => resource_path('views/vendor/courier'),\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 74 (paragraph)
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's views will be copied to the specified publish location."
msgstr ""

#: docs/8.x/packages.md:block 75 (paragraph)
msgid "<a name=\"view-components\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 76 (header)
msgid "View Components"
msgstr ""

#: docs/8.x/packages.md:block 77 (paragraph)
msgid "If your package contains [view components](/docs/{{version}}/blade#components), you may use the `loadViewComponentsAs` method to inform Laravel how to load them. The `loadViewComponentsAs` method accepts two arguments: the tag prefix for your view components and an array of your view component class names. For example, if your package's prefix is `courier` and you have `Alert` and `Button` view components, you would add the following to your service provider's `boot` method:"
msgstr ""

#: docs/8.x/packages.md:block 78 (code)
msgid ""
"use Courier\\Components\\Alert;\n"
"use Courier\\Components\\Button;\n"
"\n"
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewComponentsAs('courier', [\n"
"        Alert::class,\n"
"        Button::class,\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 79 (paragraph)
msgid "Once your view components are registered in a service provider, you may reference them in your view like so:"
msgstr ""

#: docs/8.x/packages.md:block 80 (code)
msgid ""
"<x-courier-alert />\n"
"\n"
"<x-courier-button />\n"
msgstr ""

#: docs/8.x/packages.md:block 81 (paragraph)
msgid "<a name=\"anonymous-components\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 82 (header)
msgid "Anonymous Components"
msgstr ""

#: docs/8.x/packages.md:block 83 (paragraph)
msgid "If your package contains anonymous components, they must be placed within a `components` directory of your package's \"views\" directory (as specified by `loadViewsFrom`). Then, you may render them by prefixing the component name with the package's view namespace:"
msgstr ""

#: docs/8.x/packages.md:block 84 (code)
msgid "<x-courier::alert />\n"
msgstr ""

#: docs/8.x/packages.md:block 85 (paragraph)
msgid "<a name=\"commands\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 86 (header)
msgid "Commands"
msgstr ""

#: docs/8.x/packages.md:block 87 (paragraph)
msgid "To register your package's Artisan commands with Laravel, you may use the `commands` method. This method expects an array of command class names. Once the commands have been registered, you may execute them using the [Artisan CLI](/docs/{{version}}/artisan):"
msgstr ""

#: docs/8.x/packages.md:block 88 (code)
msgid ""
"use Courier\\Console\\Commands\\InstallCommand;\n"
"use Courier\\Console\\Commands\\NetworkCommand;\n"
"\n"
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->runningInConsole()) {\n"
"        $this->commands([\n"
"            InstallCommand::class,\n"
"            NetworkCommand::class,\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 89 (paragraph)
msgid "<a name=\"public-assets\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 90 (header)
msgid "Public Assets"
msgstr ""

#: docs/8.x/packages.md:block 91 (paragraph)
msgid "Your package may have assets such as JavaScript, CSS, and images. To publish these assets to the application's `public` directory, use the service provider's `publishes` method. In this example, we will also add a `public` asset group tag, which may be used to easily publish groups of related assets:"
msgstr ""

#: docs/8.x/packages.md:block 92 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../public' => public_path('vendor/courier'),\n"
"    ], 'public');\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 93 (paragraph)
msgid "Now, when your package's users execute the `vendor:publish` command, your assets will be copied to the specified publish location. Since users will typically need to overwrite the assets every time the package is updated, you may use the `--force` flag:"
msgstr ""

#: docs/8.x/packages.md:block 94 (code)
msgid "php artisan vendor:publish --tag=public --force\n"
msgstr ""

#: docs/8.x/packages.md:block 95 (paragraph)
msgid "<a name=\"publishing-file-groups\"></a>"
msgstr ""

#: docs/8.x/packages.md:block 96 (header)
msgid "Publishing File Groups"
msgstr ""

#: docs/8.x/packages.md:block 97 (paragraph)
msgid "You may want to publish groups of package assets and resources separately. For instance, you might want to allow your users to publish your package's configuration files without being forced to publish your package's assets. You may do this by \"tagging\" them when calling the `publishes` method from a package's service provider. For example, let's use tags to define two publish groups for the `courier` package (`courier-config` and `courier-migrations`) in the `boot` method of the package's service provider:"
msgstr ""

#: docs/8.x/packages.md:block 98 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../config/package.php' => config_path('package.php')\n"
"    ], 'courier-config');\n"
"\n"
"    $this->publishes([\n"
"        __DIR__.'/../database/migrations/' => database_path('migrations')\n"
"    ], 'courier-migrations');\n"
"}\n"
msgstr ""

#: docs/8.x/packages.md:block 99 (paragraph)
msgid "Now your users may publish these groups separately by referencing their tag when executing the `vendor:publish` command:"
msgstr ""

#: docs/8.x/packages.md:block 100 (code)
msgid "php artisan vendor:publish --tag=courier-config\n"
msgstr ""

#: docs/9.x/packages.md:block 53 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n"
"}\n"
msgstr ""

#: docs/9.x/packages.md:block 58 (paragraph)
msgid "If you would like to publish your package's translations to the application's `lang/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the `courier` package, you may do the following:"
msgstr ""

#: docs/9.x/packages.md:block 59 (code)
msgid ""
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n"
"\n"
"    $this->publishes([\n"
"        __DIR__.'/../lang' => $this->app->langPath('vendor/courier'),\n"
"    ]);\n"
"}\n"
msgstr ""
