msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/errors.pot\n"
"X-Crowdin-File-ID: 67\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 06:47\n"

#: ./docs/8.x/errors.md:1
#: ./docs/9.x/errors.md:1
#: ./docs/10.x/errors.md:1
#: ./docs/11.x/errors.md:1
#: ./docs/master/errors.md:1
msgctxt "H1"
msgid "Error Handling"
msgstr ""

#: ./docs/8.x/errors.md:3
#: ./docs/9.x/errors.md:3
#: ./docs/10.x/errors.md:3
#: ./docs/11.x/errors.md:3
#: ./docs/master/errors.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/errors.md:4
#: ./docs/9.x/errors.md:4
#: ./docs/10.x/errors.md:4
#: ./docs/11.x/errors.md:4
#: ./docs/master/errors.md:4
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/11.x/errors.md:5
#: ./docs/master/errors.md:5
msgctxt "P"
msgid "[Handling Exceptions](#handling-exceptions)"
msgstr ""

#: ./docs/8.x/errors.md:5
#: ./docs/9.x/errors.md:5
#: ./docs/10.x/errors.md:5
msgctxt "P"
msgid "[The Exception Handler](#the-exception-handler)"
msgstr ""

#: ./docs/8.x/errors.md:6
#: ./docs/9.x/errors.md:6
#: ./docs/10.x/errors.md:6
#: ./docs/11.x/errors.md:6
#: ./docs/master/errors.md:6
msgctxt "P"
msgid "[Reporting Exceptions](#reporting-exceptions)"
msgstr ""

#: ./docs/8.x/errors.md:7
#: ./docs/9.x/errors.md:8
msgctxt "P"
msgid "[Ignoring Exceptions By Type](#ignoring-exceptions-by-type)"
msgstr ""

#: ./docs/9.x/errors.md:7
#: ./docs/10.x/errors.md:7
#: ./docs/11.x/errors.md:7
#: ./docs/master/errors.md:7
msgctxt "P"
msgid "[Exception Log Levels](#exception-log-levels)"
msgstr ""

#: ./docs/10.x/errors.md:8
#: ./docs/11.x/errors.md:8
#: ./docs/master/errors.md:8
msgctxt "P"
msgid "[Ignoring Exceptions by Type](#ignoring-exceptions-by-type)"
msgstr ""

#: ./docs/8.x/errors.md:8
#: ./docs/9.x/errors.md:9
#: ./docs/10.x/errors.md:9
#: ./docs/11.x/errors.md:9
#: ./docs/master/errors.md:9
msgctxt "P"
msgid "[Rendering Exceptions](#rendering-exceptions)"
msgstr ""

#: ./docs/8.x/errors.md:9
#: ./docs/9.x/errors.md:10
msgctxt "P"
msgid "[Reportable & Renderable Exceptions](#renderable-exceptions)"
msgstr ""

#: ./docs/10.x/errors.md:10
#: ./docs/11.x/errors.md:10
#: ./docs/master/errors.md:10
msgctxt "P"
msgid "[Reportable and Renderable Exceptions](#renderable-exceptions)"
msgstr ""

#: ./docs/8.x/errors.md:10
msgctxt "P"
msgid "[Mapping Exceptions By Type](#mapping-exceptions-by-type)"
msgstr ""

#: ./docs/10.x/errors.md:11
#: ./docs/11.x/errors.md:11
#: ./docs/master/errors.md:11
msgctxt "P"
msgid "[Throttling Reported Exceptions](#throttling-reported-exceptions)"
msgstr ""

#: ./docs/8.x/errors.md:11
#: ./docs/9.x/errors.md:11
#: ./docs/10.x/errors.md:12
#: ./docs/11.x/errors.md:12
#: ./docs/master/errors.md:12
msgctxt "P"
msgid "[HTTP Exceptions](#http-exceptions)"
msgstr ""

#: ./docs/8.x/errors.md:12
#: ./docs/9.x/errors.md:12
#: ./docs/10.x/errors.md:13
#: ./docs/11.x/errors.md:13
#: ./docs/master/errors.md:13
msgctxt "P"
msgid "[Custom HTTP Error Pages](#custom-http-error-pages)"
msgstr ""

#: ./docs/8.x/errors.md:14
#: ./docs/9.x/errors.md:14
#: ./docs/10.x/errors.md:15
#: ./docs/11.x/errors.md:15
#: ./docs/master/errors.md:15
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:15
#: ./docs/9.x/errors.md:15
#: ./docs/10.x/errors.md:16
#: ./docs/11.x/errors.md:16
#: ./docs/master/errors.md:16
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/errors.md:17
#: ./docs/9.x/errors.md:17
#: ./docs/10.x/errors.md:18
msgctxt "P"
msgid "When you start a new Laravel project, error and exception handling is already configured for you. The `App\\Exceptions\\Handler` class is where all exceptions thrown by your application are logged and then rendered to the user. We'll dive deeper into this class throughout this documentation."
msgstr ""

#: ./docs/11.x/errors.md:18
#: ./docs/master/errors.md:18
msgctxt "P"
msgid "When you start a new Laravel project, error and exception handling is already configured for you; however, at any point, you may use the `withExceptions` method in your application's `bootstrap/app.php` to manage how exceptions are reported and rendered by your application."
msgstr ""

#: ./docs/8.x/errors.md:19
#: ./docs/9.x/errors.md:19
#: ./docs/10.x/errors.md:20
#: ./docs/11.x/errors.md:22
#: ./docs/master/errors.md:22
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/11.x/errors.md:20
#: ./docs/master/errors.md:20
msgctxt "P"
msgid "The `$exceptions` object provided to the `withExceptions` closure is an instance of `Illuminate\\Foundation\\Configuration\\Exceptions` and is responsible for managing exception handling in your application. We'll dive deeper into this object throughout this documentation."
msgstr ""

#: ./docs/8.x/errors.md:20
#: ./docs/9.x/errors.md:20
#: ./docs/10.x/errors.md:21
#: ./docs/11.x/errors.md:23
#: ./docs/master/errors.md:23
msgctxt "H2"
msgid "Configuration"
msgstr ""

#: ./docs/8.x/errors.md:22
#: ./docs/9.x/errors.md:22
#: ./docs/10.x/errors.md:23
#: ./docs/11.x/errors.md:25
#: ./docs/master/errors.md:25
msgctxt "P"
msgid "The `debug` option in your `config/app.php` configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the `APP_DEBUG` environment variable, which is stored in your `.env` file."
msgstr ""

#: ./docs/8.x/errors.md:24
#: ./docs/9.x/errors.md:24
#: ./docs/10.x/errors.md:25
#: ./docs/11.x/errors.md:27
#: ./docs/master/errors.md:27
msgctxt "P"
msgid "During local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the value is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr ""

#: ./docs/8.x/errors.md:26
#: ./docs/9.x/errors.md:26
#: ./docs/10.x/errors.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"the-exception-handler\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:27
#: ./docs/9.x/errors.md:27
#: ./docs/10.x/errors.md:28
msgctxt "H2"
msgid "The Exception Handler"
msgstr ""

#: ./docs/11.x/errors.md:29
#: ./docs/master/errors.md:29
#~ msgctxt "P"
#~ msgid "<a name=\"handling-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:29
#: ./docs/9.x/errors.md:29
#: ./docs/10.x/errors.md:30
#: ./docs/11.x/errors.md:32
#: ./docs/master/errors.md:32
#~ msgctxt "P"
#~ msgid "<a name=\"reporting-exceptions\"></a>"
#~ msgstr ""

#: ./docs/11.x/errors.md:30
#: ./docs/master/errors.md:30
msgctxt "H2"
msgid "Handling Exceptions"
msgstr ""

#: ./docs/8.x/errors.md:30
#: ./docs/9.x/errors.md:30
#: ./docs/10.x/errors.md:31
#: ./docs/11.x/errors.md:33
#: ./docs/master/errors.md:33
msgctxt "H3"
msgid "Reporting Exceptions"
msgstr ""

#: ./docs/8.x/errors.md:32
#: ./docs/9.x/errors.md:32
msgctxt "P"
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com) or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#: ./docs/10.x/errors.md:33
msgctxt "P"
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com), or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#: ./docs/8.x/errors.md:34
#: ./docs/9.x/errors.md:34
msgctxt "P"
msgid "For example, if you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will deduce what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#: ./docs/10.x/errors.md:35
msgctxt "P"
msgid "If you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will determine what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#: ./docs/11.x/errors.md:35
#: ./docs/master/errors.md:35
msgctxt "P"
msgid "In Laravel, exception reporting is used to log exceptions or send them to an external service [Sentry](https://github.com/getsentry/sentry-laravel) or [Flare](https://flareapp.io). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#: ./docs/8.x/errors.md:36
#: ./docs/9.x/errors.md:36
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:37
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:37
#: ./docs/master/errors.md:37
msgctxt "P"
msgid "If you need to report different types of exceptions in different ways, you may use the `report` exception method in your application's `bootstrap/app.php` to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will determine what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#: ./docs/11.x/errors.md:39
#: ./docs/master/errors.md:39
msgctxt "CODE"
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->report(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    });\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:45
#: ./docs/master/errors.md:45
msgctxt "P"
msgid "When you register a custom exception reporting callback using the `report` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr ""

#: ./docs/11.x/errors.md:47
#: ./docs/master/errors.md:47
msgctxt "CODE"
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->report(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    })->stop();\n\n"
"    $exceptions->report(function (InvalidOrderException $e) {\n"
"        return false;\n"
"    });\n"
"})"
msgstr ""

#: ./docs/8.x/errors.md:50
#: ./docs/9.x/errors.md:50
#: ./docs/10.x/errors.md:49
msgctxt "P"
msgid "When you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr ""

#: ./docs/10.x/errors.md:51
msgctxt "CODE"
msgid "$this->reportable(function (InvalidOrderException $e) {\n"
"    // ...\n"
"})->stop();\n\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});"
msgstr ""

#: ./docs/8.x/errors.md:52
#: ./docs/9.x/errors.md:52
msgctxt "CODE"
msgid "$this->reportable(function (InvalidOrderException $e) {\n"
"    //\n"
"})->stop();\n\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});"
msgstr ""

#: ./docs/8.x/errors.md:60
#: ./docs/9.x/errors.md:61
#: ./docs/10.x/errors.md:60
#: ./docs/11.x/errors.md:58
#: ./docs/master/errors.md:58
msgctxt "P"
msgid "To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)."
msgstr ""

#: ./docs/8.x/errors.md:62
#: ./docs/9.x/errors.md:63
#: ./docs/10.x/errors.md:62
#: ./docs/11.x/errors.md:60
#: ./docs/master/errors.md:60
#~ msgctxt "P"
#~ msgid "<a name=\"global-log-context\"></a>"
#~ msgstr ""

#: ./docs/11.x/errors.md:63
#: ./docs/master/errors.md:63
msgctxt "P"
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data using the `context` exception method in your application's `bootstrap/app.php` file. This information will be included in every exception's log message written by your application:"
msgstr ""

#: ./docs/8.x/errors.md:63
#: ./docs/9.x/errors.md:64
#: ./docs/10.x/errors.md:63
#: ./docs/11.x/errors.md:61
#: ./docs/master/errors.md:61
msgctxt "H4"
msgid "Global Log Context"
msgstr ""

#: ./docs/10.x/errors.md:65
msgctxt "P"
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by defining a `context` method on your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr ""

#: ./docs/11.x/errors.md:65
#: ./docs/master/errors.md:65
msgctxt "CODE"
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->context(fn () => [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/errors.md:65
#: ./docs/9.x/errors.md:66
msgctxt "P"
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by overriding the `context` method of your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr ""

#: ./docs/10.x/errors.md:67
msgctxt "CODE"
msgid "/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"protected function context(): array\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/errors.md:67
#: ./docs/9.x/errors.md:68
msgctxt "CODE"
msgid "/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function context()\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/errors.md:79
#: ./docs/9.x/errors.md:80
#: ./docs/10.x/errors.md:79
#: ./docs/11.x/errors.md:71
#: ./docs/master/errors.md:71
#~ msgctxt "P"
#~ msgid "<a name=\"exception-log-context\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:80
#: ./docs/9.x/errors.md:81
#: ./docs/10.x/errors.md:80
#: ./docs/11.x/errors.md:72
#: ./docs/master/errors.md:72
msgctxt "H4"
msgid "Exception Log Context"
msgstr ""

#: ./docs/10.x/errors.md:82
#: ./docs/11.x/errors.md:74
#: ./docs/master/errors.md:74
msgctxt "P"
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr ""

#: ./docs/8.x/errors.md:82
#: ./docs/9.x/errors.md:83
msgctxt "P"
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's custom exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr ""

#: ./docs/10.x/errors.md:84
#: ./docs/11.x/errors.md:76
#: ./docs/master/errors.md:76
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function context(): array\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/errors.md:84
#: ./docs/9.x/errors.md:85
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function context()\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:100
#: ./docs/master/errors.md:100
msgctxt "P"
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception without rendering an error page to the user:"
msgstr ""

#: ./docs/8.x/errors.md:105
#: ./docs/9.x/errors.md:106
#: ./docs/10.x/errors.md:105
#: ./docs/11.x/errors.md:97
#: ./docs/master/errors.md:97
#~ msgctxt "P"
#~ msgid "<a name=\"the-report-helper\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:106
#: ./docs/9.x/errors.md:107
#: ./docs/10.x/errors.md:106
#: ./docs/11.x/errors.md:98
#: ./docs/master/errors.md:98
msgctxt "H4"
msgid "The `report` Helper"
msgstr ""

#: ./docs/8.x/errors.md:108
#: ./docs/9.x/errors.md:109
#: ./docs/10.x/errors.md:108
msgctxt "P"
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception via the exception handler without rendering an error page to the user:"
msgstr ""

#: ./docs/10.x/errors.md:110
#: ./docs/11.x/errors.md:102
#: ./docs/master/errors.md:102
msgctxt "CODE"
msgid "public function isValid(string $value): bool\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n\n"
"        return false;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/errors.md:110
#: ./docs/9.x/errors.md:111
msgctxt "CODE"
msgid "public function isValid($value)\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n\n"
"        return false;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:118
#: ./docs/master/errors.md:118
msgctxt "P"
msgid "If you would like to ensure that a single instance of an exception is only ever reported once, you may invoke the `dontReportDuplicates` exception method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/errors.md:120
#: ./docs/master/errors.md:120
msgctxt "CODE"
msgid "->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->dontReportDuplicates();\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:121
#: ./docs/11.x/errors.md:113
#: ./docs/master/errors.md:113
#~ msgctxt "P"
#~ msgid "<a name=\"deduplicating-reported-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:121
#: ./docs/9.x/errors.md:143
#: ./docs/10.x/errors.md:184
#: ./docs/11.x/errors.md:157
#: ./docs/master/errors.md:157
#~ msgctxt "P"
#~ msgid "<a name=\"ignoring-exceptions-by-type\"></a>"
#~ msgstr ""

#: ./docs/10.x/errors.md:122
#: ./docs/11.x/errors.md:114
#: ./docs/master/errors.md:114
msgctxt "H4"
msgid "Deduplicating Reported Exceptions"
msgstr ""

#: ./docs/8.x/errors.md:122
#: ./docs/9.x/errors.md:144
msgctxt "H3"
msgid "Ignoring Exceptions By Type"
msgstr ""

#: ./docs/9.x/errors.md:122
#: ./docs/10.x/errors.md:163
#: ./docs/11.x/errors.md:141
#: ./docs/master/errors.md:141
#~ msgctxt "P"
#~ msgid "<a name=\"exception-log-levels\"></a>"
#~ msgstr ""

#: ./docs/9.x/errors.md:123
#: ./docs/10.x/errors.md:164
#: ./docs/11.x/errors.md:142
#: ./docs/master/errors.md:142
msgctxt "H3"
msgid "Exception Log Levels"
msgstr ""

#: ./docs/10.x/errors.md:124
#: ./docs/11.x/errors.md:116
#: ./docs/master/errors.md:116
msgctxt "P"
msgid "If you are using the `report` function throughout your application, you may occasionally report the same exception multiple times, creating duplicate entries in your logs."
msgstr ""

#: ./docs/8.x/errors.md:124
#: ./docs/9.x/errors.md:146
msgctxt "P"
msgid "When building your application, there will be some types of exceptions you simply want to ignore and never report. Your application's exception handler contains a `$dontReport` property which is initialized to an empty array. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: ./docs/9.x/errors.md:125
#: ./docs/10.x/errors.md:166
#: ./docs/11.x/errors.md:144
#: ./docs/master/errors.md:144
msgctxt "P"
msgid "When messages are written to your application's [logs](/docs/{{version}}/logging), the messages are written at a specified [log level](/docs/{{version}}/logging#log-levels), which indicates the severity or importance of the message being logged."
msgstr ""

#: ./docs/10.x/errors.md:126
msgctxt "P"
msgid "If you would like to ensure that a single instance of an exception is only ever reported once, you may set the `$withoutDuplicates` property to `true` within your application's `App\\Exceptions\\Handler` class:"
msgstr ""

#: ./docs/8.x/errors.md:126
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * A list of the exception types that should not be reported.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];"
msgstr ""

#: ./docs/9.x/errors.md:127
#: ./docs/10.x/errors.md:168
msgctxt "P"
msgid "As noted above, even when you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application; however, since the log level can sometimes influence the channels on which a message is logged, you may wish to configure the log level that certain exceptions are logged at."
msgstr ""

#: ./docs/10.x/errors.md:128
msgctxt "CODE: php"
msgid "namespace App\\Exceptions;\n\n"
"use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n\n"
"class Handler extends ExceptionHandler\n"
"{\n"
"    /**\n"
"     * Indicates that an exception instance should only be reported once.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $withoutDuplicates = true;\n\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/errors.md:129
msgctxt "P"
msgid "To accomplish this, you may define an array of exception types and their associated log levels within the `$levels` property of your application's exception handler:"
msgstr ""

#: ./docs/9.x/errors.md:131
#: ./docs/10.x/errors.md:172
msgctxt "CODE"
msgid "use PDOException;\n"
"use Psr\\Log\\LogLevel;\n\n"
"/**\n"
" * A list of exception types with their corresponding custom log levels.\n"
" *\n"
" * @var array<class-string<\\Throwable>, \\Psr\\Log\\LogLevel::*>\n"
" */\n"
"protected $levels = [\n"
"    PDOException::class => LogLevel::CRITICAL,\n"
"];"
msgstr ""

#: ./docs/8.x/errors.md:137
#: ./docs/9.x/errors.md:160
msgctxt "P"
msgid "Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens."
msgstr ""

#: ./docs/8.x/errors.md:139
#: ./docs/9.x/errors.md:162
#: ./docs/10.x/errors.md:214
#: ./docs/11.x/errors.md:194
#: ./docs/master/errors.md:178
#~ msgctxt "P"
#~ msgid "<a name=\"rendering-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:140
#: ./docs/9.x/errors.md:163
#: ./docs/10.x/errors.md:215
#: ./docs/11.x/errors.md:195
#: ./docs/master/errors.md:179
msgctxt "H3"
msgid "Rendering Exceptions"
msgstr ""

#: ./docs/8.x/errors.md:142
#: ./docs/9.x/errors.md:165
msgctxt "P"
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this via the `renderable` method of your exception handler."
msgstr ""

#: ./docs/8.x/errors.md:144
#: ./docs/9.x/errors.md:167
msgctxt "P"
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will deduce what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#: ./docs/10.x/errors.md:146
#: ./docs/11.x/errors.md:124
#: ./docs/master/errors.md:124
msgctxt "P"
msgid "Now, when the `report` helper is called with the same instance of an exception, only the first call will be reported:"
msgstr ""

#: ./docs/11.x/errors.md:146
#: ./docs/master/errors.md:146
msgctxt "P"
msgid "As noted above, even when you register a custom exception reporting callback using the `report` method, Laravel will still log the exception using the default logging configuration for the application; however, since the log level can sometimes influence the channels on which a message is logged, you may wish to configure the log level that certain exceptions are logged at."
msgstr ""

#: ./docs/8.x/errors.md:146
#: ./docs/9.x/errors.md:169
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:148
#: ./docs/11.x/errors.md:126
#: ./docs/master/errors.md:126
msgctxt "CODE: php"
msgid "$original = new RuntimeException('Whoops!');\n\n"
"report($original); // reported\n\n"
"try {\n"
"    throw $original;\n"
"} catch (Throwable $caught) {\n"
"    report($caught); // ignored\n"
"}\n\n"
"report($original); // ignored\n"
"report($caught); // ignored"
msgstr ""

#: ./docs/11.x/errors.md:148
#: ./docs/master/errors.md:148
msgctxt "P"
msgid "To accomplish this, you may use the `level` exception method in your application's `bootstrap/app.php` file. This method receives the exception type as its first argument and the log level as its second argument:"
msgstr ""

#: ./docs/9.x/errors.md:148
#: ./docs/10.x/errors.md:189
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"/**\n"
" * A list of the exception types that are not reported.\n"
" *\n"
" * @var array<int, class-string<\\Throwable>>\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];"
msgstr ""

#: ./docs/11.x/errors.md:150
#: ./docs/master/errors.md:150
msgctxt "CODE"
msgid "use PDOException;\n"
"use Psr\\Log\\LogLevel;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->level(PDOException::class, LogLevel::CRITICAL);\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:160
msgctxt "P"
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, you may use the `dontReport` exception method in your application's `bootstrap/app.php` file. Any class provided to this method will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: ./docs/8.x/errors.md:160
#: ./docs/9.x/errors.md:183
#: ./docs/10.x/errors.md:234
msgctxt "P"
msgid "You may also use the `renderable` method to override the rendering behavior for built-in Laravel or Symfony exceptions such as `NotFoundHttpException`. If the closure given to the `renderable` method does not return a value, Laravel's default exception rendering will be utilized:"
msgstr ""

#: ./docs/master/errors.md:160
msgctxt "P"
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, you may use the `dontReport` exception method in your application's `boostrap/app.php` file. Any class provided to this method will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: ./docs/11.x/errors.md:162
#: ./docs/master/errors.md:162
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->dontReport([\n"
"        InvalidOrderException::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/errors.md:162
#: ./docs/9.x/errors.md:185
msgctxt "CODE"
msgid "use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:170
msgctxt "P"
msgid "To accomplish this, you may define a `$levels` property on your application's exception handler. This property should contain an array of exception types and their associated log levels:"
msgstr ""

#: ./docs/11.x/errors.md:170
msgctxt "P"
msgid "Alternatively, you may simply \"mark\" an exception class with the `Illuminate\\Contracts\\Debug\\ShouldntReport` interface. When an exception is marked with this interface, it will never be reported by Laravel's exception handler:"
msgstr ""

#: ./docs/master/errors.md:170
msgctxt "P"
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may use the `stopIgnoring` exception method in your application's `boostrap/app.php` file:"
msgstr ""

#: ./docs/11.x/errors.md:172
msgctxt "CODE: php"
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n"
"use Illuminate\\Contracts\\Debug\\ShouldntReport;\n\n"
"class PodcastProcessingException extends Exception implements ShouldntReport\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/errors.md:180
#: ./docs/9.x/errors.md:203
#: ./docs/10.x/errors.md:253
#: ./docs/11.x/errors.md:262
#: ./docs/master/errors.md:246
#~ msgctxt "P"
#~ msgid "<a name=\"renderable-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:181
#: ./docs/9.x/errors.md:204
msgctxt "H3"
msgid "Reportable & Renderable Exceptions"
msgstr ""

#: ./docs/master/errors.md:181
msgctxt "P"
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by using the `render` exception method in your application's `boostrap/app.php` file."
msgstr ""

#: ./docs/8.x/errors.md:183
#: ./docs/9.x/errors.md:206
msgctxt "P"
msgid "Instead of type-checking exceptions in the exception handler's `register` method, you may define `report` and `render` methods directly on your custom exceptions. When these methods exist, they will be automatically called by the framework:"
msgstr ""

#: ./docs/10.x/errors.md:185
#: ./docs/11.x/errors.md:158
#: ./docs/master/errors.md:158
msgctxt "H3"
msgid "Ignoring Exceptions by Type"
msgstr ""

#: ./docs/8.x/errors.md:185
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(...);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/master/errors.md:185
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->render(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:186
msgctxt "P"
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may use the `stopIgnoring` exception method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/10.x/errors.md:187
msgctxt "P"
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, define a `$dontReport` property on your application's exception handler. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: ./docs/11.x/errors.md:188
#: ./docs/master/errors.md:172
msgctxt "CODE"
msgid "use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->stopIgnoring(HttpException::class);\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:197
msgctxt "P"
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by using the `render` exception method in your application's `bootstrap/app.php` file."
msgstr ""

#: ./docs/11.x/errors.md:199
#: ./docs/master/errors.md:183
msgctxt "P"
msgid "The closure passed to the `render` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will determine what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#: ./docs/10.x/errors.md:200
msgctxt "P"
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may invoke the `stopIgnoring` method within your exception handler's `register` method:"
msgstr ""

#: ./docs/11.x/errors.md:201
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->render(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', status: 500);\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:202
msgctxt "CODE"
msgid "use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->stopIgnoring(HttpException::class);\n\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/errors.md:208
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:210
#: ./docs/master/errors.md:194
msgctxt "P"
msgid "You may also use the `render` method to override the rendering behavior for built-in Laravel or Symfony exceptions such as `NotFoundHttpException`. If the closure given to the `render` method does not return a value, Laravel's default exception rendering will be utilized:"
msgstr ""

#: ./docs/11.x/errors.md:212
#: ./docs/master/errors.md:196
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->render(function (NotFoundHttpException $e, Request $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/master/errors.md:212
msgctxt "P"
msgid "When rendering an exception, Laravel will automatically determine if the exception should be rendered as an HTML or JSON response based on the `Content-Type` header of the request. If you would like to customize how Laravel determines whether to render HTML or JSON exception responses, you may utilize the `shouldRenderJsonWhen` method:"
msgstr ""

#: ./docs/8.x/errors.md:215
#: ./docs/9.x/errors.md:238
#: ./docs/10.x/errors.md:285
#: ./docs/11.x/errors.md:294
#: ./docs/master/errors.md:278
msgctxt "P"
msgid "If your exception extends an exception that is already renderable, such as a built-in Laravel or Symfony exception, you may return `false` from the exception's `render` method to render the exception's default HTTP response:"
msgstr ""

#: ./docs/10.x/errors.md:217
msgctxt "P"
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by invoking the `renderable` method within your exception handler."
msgstr ""

#: ./docs/8.x/errors.md:217
#: ./docs/9.x/errors.md:240
msgctxt "CODE"
msgid "/**\n"
" * Render the exception into an HTTP response.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function render($request)\n"
"{\n"
"    // Determine if the exception needs custom rendering...\n\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:219
msgctxt "P"
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will determine what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#: ./docs/10.x/errors.md:221
msgctxt "CODE"
msgid "use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:225
#: ./docs/master/errors.md:209
#~ msgctxt "P"
#~ msgid "<a name=\"rendering-exceptions-as-json\"></a>"
#~ msgstr ""

#: ./docs/11.x/errors.md:226
#: ./docs/master/errors.md:210
msgctxt "H4"
msgid "Rendering Exceptions as JSON"
msgstr ""

#: ./docs/11.x/errors.md:228
msgctxt "P"
msgid "When rendering an exception, Laravel will automatically determine if the exception should be rendered as an HTML or JSON response based on the `Accept` header of the request. If you would like to customize how Laravel determines whether to render HTML or JSON exception responses, you may utilize the `shouldRenderJsonWhen` method:"
msgstr ""

#: ./docs/11.x/errors.md:230
#: ./docs/master/errors.md:214
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->shouldRenderJsonWhen(function (Request $request, Throwable $e) {\n"
"        if ($request->is('admin/*')) {\n"
"            return true;\n"
"        }\n\n"
"        return $request->expectsJson();\n"
"    });\n"
"})"
msgstr ""

#: ./docs/8.x/errors.md:230
#: ./docs/9.x/errors.md:253
#: ./docs/10.x/errors.md:300
#: ./docs/11.x/errors.md:309
#: ./docs/master/errors.md:293
msgctxt "P"
msgid "If your exception contains custom reporting logic that is only necessary when certain conditions are met, you may need to instruct Laravel to sometimes report the exception using the default exception handling configuration. To accomplish this, you may return `false` from the exception's `report` method:"
msgstr ""

#: ./docs/8.x/errors.md:232
#: ./docs/9.x/errors.md:255
msgctxt "CODE"
msgid "/**\n"
" * Report the exception.\n"
" *\n"
" * @return bool|null\n"
" */\n"
"public function report()\n"
"{\n"
"    // Determine if the exception needs custom reporting...\n\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:236
msgctxt "CODE"
msgid "use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, Request $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:243
#: ./docs/master/errors.md:227
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-exception-response\"></a>"
#~ msgstr ""

#: ./docs/11.x/errors.md:244
#: ./docs/master/errors.md:228
msgctxt "H4"
msgid "Customizing the Exception Response"
msgstr ""

#: ./docs/8.x/errors.md:244
#: ./docs/9.x/errors.md:268
#: ./docs/10.x/errors.md:318
#: ./docs/11.x/errors.md:327
#: ./docs/master/errors.md:311
msgctxt "P"
msgid "You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container)."
msgstr ""

#: ./docs/11.x/errors.md:246
#: ./docs/master/errors.md:230
msgctxt "P"
msgid "Rarely, you may need to customize the entire HTTP response rendered by Laravel's exception handler. To accomplish this, you may register a response customization closure using the `respond` method:"
msgstr ""

#: ./docs/8.x/errors.md:246
#~ msgctxt "P"
#~ msgid "<a name=\"mapping-exceptions-by-type\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:247
msgctxt "H3"
msgid "Mapping Exceptions By Type"
msgstr ""

#: ./docs/11.x/errors.md:248
#: ./docs/master/errors.md:232
msgctxt "CODE"
msgid "use Symfony\\Component\\HttpFoundation\\Response;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->respond(function (Response $response) {\n"
"        if ($response->getStatusCode() === 419) {\n"
"            return back()->with([\n"
"                'message' => 'The page expired, please try again.',\n"
"            ]);\n"
"        }\n\n"
"        return $response;\n"
"    });\n"
"})"
msgstr ""

#: ./docs/8.x/errors.md:249
msgctxt "P"
msgid "Sometimes, third-party libraries used by your application may throw exceptions that you wish to make [renderable](#renderable-exceptions), but are unable to do so because you do not have control over the definitions of third-party exceptions."
msgstr ""

#: ./docs/master/errors.md:249
msgctxt "P"
msgid "Instead of defining custom reporting and rendering behavior in your application's `boostrap/app.php` file, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr ""

#: ./docs/8.x/errors.md:251
msgctxt "P"
msgid "Thankfully, Laravel allows you to conveniently map these exceptions to other exception types that you manage within your application. To accomplish this, call the `map` method from your exception handler's `register` method:"
msgstr ""

#: ./docs/8.x/errors.md:253
msgctxt "CODE"
msgid "use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->map(Exception::class, FilesystemException::class);\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:254
#: ./docs/11.x/errors.md:263
#: ./docs/master/errors.md:247
msgctxt "H3"
msgid "Reportable and Renderable Exceptions"
msgstr ""

#: ./docs/10.x/errors.md:256
msgctxt "P"
msgid "Instead of defining custom reporting and rendering behavior in your exception handler's `register` method, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr ""

#: ./docs/10.x/errors.md:258
#: ./docs/11.x/errors.md:267
#: ./docs/master/errors.md:251
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Exceptions;\n\n"
"use Exception;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     */\n"
"    public function report(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     */\n"
"    public function render(Request $request): Response\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:265
msgctxt "P"
msgid "Instead of defining custom reporting and rendering behavior in your application's `bootstrap/app.php` file, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr ""

#: ./docs/8.x/errors.md:266
msgctxt "P"
msgid "If you would like more control over the creation of the target exception, you may pass a closure to the `map` method:"
msgstr ""

#: ./docs/8.x/errors.md:268
msgctxt "CODE"
msgid "use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n\n"
"$this->map(fn (Exception $e) => new FilesystemException($e));"
msgstr ""

#: ./docs/8.x/errors.md:273
#: ./docs/9.x/errors.md:270
#: ./docs/10.x/errors.md:416
#: ./docs/11.x/errors.md:405
#: ./docs/master/errors.md:390
#~ msgctxt "P"
#~ msgid "<a name=\"http-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:274
#: ./docs/9.x/errors.md:271
#: ./docs/10.x/errors.md:417
#: ./docs/11.x/errors.md:406
#: ./docs/master/errors.md:391
msgctxt "H2"
msgid "HTTP Exceptions"
msgstr ""

#: ./docs/8.x/errors.md:276
#: ./docs/9.x/errors.md:273
msgctxt "P"
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr ""

#: ./docs/8.x/errors.md:278
#: ./docs/9.x/errors.md:275
#: ./docs/10.x/errors.md:421
#: ./docs/11.x/errors.md:410
#: ./docs/master/errors.md:395
msgctxt "CODE"
msgid "abort(404);"
msgstr ""

#: ./docs/8.x/errors.md:280
#: ./docs/9.x/errors.md:277
#: ./docs/10.x/errors.md:423
#: ./docs/11.x/errors.md:412
#: ./docs/master/errors.md:397
#~ msgctxt "P"
#~ msgid "<a name=\"custom-http-error-pages\"></a>"
#~ msgstr ""

#: ./docs/8.x/errors.md:281
#: ./docs/9.x/errors.md:278
#: ./docs/10.x/errors.md:424
#: ./docs/11.x/errors.md:413
#: ./docs/master/errors.md:398
msgctxt "H3"
msgid "Custom HTTP Error Pages"
msgstr ""

#: ./docs/8.x/errors.md:283
#: ./docs/9.x/errors.md:280
msgctxt "P"
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, if you wish to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered on all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr ""

#: ./docs/8.x/errors.md:285
#: ./docs/9.x/errors.md:282
#: ./docs/10.x/errors.md:428
#: ./docs/11.x/errors.md:417
#: ./docs/master/errors.md:402
msgctxt "CODE"
msgid "<h2>{{ $exception->getMessage() }}</h2>"
msgstr ""

#: ./docs/10.x/errors.md:287
#: ./docs/11.x/errors.md:296
#: ./docs/master/errors.md:280
msgctxt "CODE"
msgid "/**\n"
" * Render the exception into an HTTP response.\n"
" */\n"
"public function render(Request $request): Response|bool\n"
"{\n"
"    if (/** Determine if the exception needs custom rendering */) {\n\n"
"        return response(/* ... */);\n"
"    }\n\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/8.x/errors.md:287
#: ./docs/9.x/errors.md:284
#: ./docs/10.x/errors.md:430
#: ./docs/11.x/errors.md:419
#: ./docs/master/errors.md:404
msgctxt "P"
msgid "You may publish Laravel's default error page templates using the `vendor:publish` Artisan command. Once the templates have been published, you may customize them to your liking:"
msgstr ""

#: ./docs/8.x/errors.md:289
#: ./docs/9.x/errors.md:286
#: ./docs/10.x/errors.md:432
#: ./docs/11.x/errors.md:421
#: ./docs/master/errors.md:406
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=laravel-errors"
msgstr ""

#: ./docs/9.x/errors.md:290
#: ./docs/10.x/errors.md:436
#: ./docs/11.x/errors.md:425
#: ./docs/master/errors.md:410
#~ msgctxt "P"
#~ msgid "<a name=\"fallback-http-error-pages\"></a>"
#~ msgstr ""

#: ./docs/9.x/errors.md:291
#: ./docs/10.x/errors.md:437
#: ./docs/11.x/errors.md:426
#: ./docs/master/errors.md:411
msgctxt "H4"
msgid "Fallback HTTP Error Pages"
msgstr ""

#: ./docs/9.x/errors.md:293
#: ./docs/10.x/errors.md:439
#: ./docs/11.x/errors.md:428
#: ./docs/master/errors.md:413
msgctxt "P"
msgid "You may also define a \"fallback\" error page for a given series of HTTP status codes. This page will be rendered if there is not a corresponding page for the specific HTTP status code that occurred. To accomplish this, define a `4xx.blade.php` template and a `5xx.blade.php` template in your application's `resources/views/errors` directory."
msgstr ""

#: ./docs/10.x/errors.md:302
#: ./docs/11.x/errors.md:311
#: ./docs/master/errors.md:295
msgctxt "CODE"
msgid "/**\n"
" * Report the exception.\n"
" */\n"
"public function report(): bool\n"
"{\n"
"    if (/** Determine if the exception needs custom reporting */) {\n\n"
"        // ...\n\n"
"        return true;\n"
"    }\n\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:320
#: ./docs/11.x/errors.md:329
#: ./docs/master/errors.md:313
#~ msgctxt "P"
#~ msgid "<a name=\"throttling-reported-exceptions\"></a>"
#~ msgstr ""

#: ./docs/master/errors.md:320
msgctxt "CODE"
msgid "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        return Lottery::odds(1, 1000);\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:321
#: ./docs/11.x/errors.md:330
#: ./docs/master/errors.md:314
msgctxt "H3"
msgid "Throttling Reported Exceptions"
msgstr ""

#: ./docs/10.x/errors.md:323
#: ./docs/11.x/errors.md:332
#: ./docs/master/errors.md:316
msgctxt "P"
msgid "If your application reports a very large number of exceptions, you may want to throttle how many exceptions are actually logged or sent to your application's external error tracking service."
msgstr ""

#: ./docs/10.x/errors.md:325
msgctxt "P"
msgid "To take a random sample rate of exceptions, you can return a `Lottery` instance from your exception handler's `throttle` method. If your `App\\Exceptions\\Handler` class does not contain this method, you may simply add it to the class:"
msgstr ""

#: ./docs/10.x/errors.md:327
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return Lottery::odds(1, 1000);\n"
"}"
msgstr ""

#: ./docs/master/errors.md:331
msgctxt "CODE"
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        if ($e instanceof ApiMonitoringException) {\n"
"            return Lottery::odds(1, 1000);\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:334
#: ./docs/master/errors.md:318
msgctxt "P"
msgid "To take a random sample rate of exceptions, you may use the `throttle` exception method in your application's `bootstrap/app.php` file. The `throttle` method receives a closure that should return a `Lottery` instance:"
msgstr ""

#: ./docs/11.x/errors.md:336
msgctxt "CODE"
msgid "use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        return Lottery::odds(1, 1000);\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:340
#: ./docs/11.x/errors.md:345
#: ./docs/master/errors.md:329
msgctxt "P"
msgid "It is also possible to conditionally sample based on the exception type. If you would like to only sample instances of a specific exception class, you may return a `Lottery` instance only for that class:"
msgstr ""

#: ./docs/10.x/errors.md:342
msgctxt "CODE: php"
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof ApiMonitoringException) {\n"
"        return Lottery::odds(1, 1000);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/master/errors.md:345
msgctxt "CODE"
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300);\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:347
msgctxt "CODE"
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        if ($e instanceof ApiMonitoringException) {\n"
"            return Lottery::odds(1, 1000);\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:358
#: ./docs/11.x/errors.md:359
#: ./docs/master/errors.md:343
msgctxt "P"
msgid "You may also rate limit exceptions logged or sent to an external error tracking service by returning a `Limit` instance instead of a `Lottery`. This is useful if you want to protect against sudden bursts of exceptions flooding your logs, for example, when a third-party service used by your application is down:"
msgstr ""

#: ./docs/master/errors.md:359
msgctxt "CODE"
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300)->by($e->getMessage());\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:360
msgctxt "CODE: php"
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:361
msgctxt "CODE"
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300);\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/master/errors.md:374
msgctxt "CODE"
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable Throwable) {\n"
"        return match (true) {\n"
"            $e instanceof BroadcastException => Limit::perMinute(300),\n"
"            $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"            default => Limit::none(),\n"
"        };\n"
"    });\n"
"})"
msgstr ""

#: ./docs/11.x/errors.md:375
msgctxt "CODE"
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        if ($e instanceof BroadcastException) {\n"
"            return Limit::perMinute(300)->by($e->getMessage());\n"
"        }\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:376
#: ./docs/11.x/errors.md:373
#: ./docs/master/errors.md:357
msgctxt "P"
msgid "By default, limits will use the exception's class as the rate limit key. You can customize this by specifying your own key using the `by` method on the `Limit`:"
msgstr ""

#: ./docs/10.x/errors.md:378
msgctxt "CODE: php"
msgid "use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300)->by($e->getMessage());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/errors.md:389
msgctxt "CODE"
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"->withExceptions(function (Exceptions $exceptions) {\n"
"    $exceptions->throttle(function (Throwable $e) {\n"
"        return match (true) {\n"
"            $e instanceof BroadcastException => Limit::perMinute(300),\n"
"            $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"            default => Limit::none(),\n"
"        };\n"
"    });\n"
"})"
msgstr ""

#: ./docs/10.x/errors.md:394
#: ./docs/11.x/errors.md:387
#: ./docs/master/errors.md:372
msgctxt "P"
msgid "Of course, you may return a mixture of `Lottery` and `Limit` instances for different exceptions:"
msgstr ""

#: ./docs/10.x/errors.md:396
msgctxt "CODE: php"
msgid "use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return match (true) {\n"
"        $e instanceof BroadcastException => Limit::perMinute(300),\n"
"        $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"        default => Limit::none(),\n"
"    };\n"
"}"
msgstr ""

#: ./docs/10.x/errors.md:419
#: ./docs/11.x/errors.md:408
#: ./docs/master/errors.md:393
msgctxt "P"
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401), or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr ""

#: ./docs/10.x/errors.md:426
#: ./docs/11.x/errors.md:415
#: ./docs/master/errors.md:400
msgctxt "P"
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered for all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr ""

#: ./docs/11.x/errors.md:430
msgctxt "P"
msgid "When defining fallback error pages, the fallback pages will not affect `404`, `500`, and `503` error responses since Laravel has internal, dedicated pages for these status codes. To customize the pages rendered for these status codes, you should define a custom error page for each of them individually."
msgstr ""

