# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 14:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/queries.md:1
#, no-wrap
msgid "Database: Query Builder"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:34
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:34
#, no-wrap
msgid ""
"- [Running Database Queries](#running-database-queries)\n"
"    - [Chunking Results](#chunking-results)\n"
"    - [Streaming Results Lazily](#streaming-results-lazily)\n"
"    - [Aggregates](#aggregates)\n"
"- [Select Statements](#select-statements)\n"
"- [Raw Expressions](#raw-expressions)\n"
"- [Joins](#joins)\n"
"- [Unions](#unions)\n"
"- [Basic Where Clauses](#basic-where-clauses)\n"
"    - [Where Clauses](#where-clauses)\n"
"    - [Or Where Clauses](#or-where-clauses)\n"
"    - [JSON Where Clauses](#json-where-clauses)\n"
"    - [Additional Where Clauses](#additional-where-clauses)\n"
"    - [Logical Grouping](#logical-grouping)\n"
"- [Advanced Where Clauses](#advanced-where-clauses)\n"
"    - [Where Exists Clauses](#where-exists-clauses)\n"
"    - [Subquery Where Clauses](#subquery-where-clauses)\n"
"- [Ordering, Grouping, Limit & "
"Offset](#ordering-grouping-limit-and-offset)\n"
"    - [Ordering](#ordering)\n"
"    - [Grouping](#grouping)\n"
"    - [Limit & Offset](#limit-and-offset)\n"
"- [Conditional Clauses](#conditional-clauses)\n"
"- [Insert Statements](#insert-statements)\n"
"    - [Upserts](#upserts)\n"
"- [Update Statements](#update-statements)\n"
"    - [Updating JSON Columns](#updating-json-columns)\n"
"    - [Increment & Decrement](#increment-and-decrement)\n"
"- [Delete Statements](#delete-statements)\n"
"- [Pessimistic Locking](#pessimistic-locking)\n"
"- [Debugging](#debugging)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:36
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:36
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:39
msgid ""
"Laravel's database query builder provides a convenient, fluent interface to "
"creating and running database queries. It can be used to perform most "
"database operations in your application and works perfectly with all of "
"Laravel's supported database systems."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:41
msgid ""
"The Laravel query builder uses PDO parameter binding to protect your "
"application against SQL injection attacks. There is no need to clean or "
"sanitize strings passed to the query builder as query bindings."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:43
#, no-wrap
msgid ""
"> {note} PDO does not support binding column names. Therefore, you should "
"never allow user input to dictate the column names referenced by your "
"queries, including \"order by\" columns.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:45
#, no-wrap
msgid "<a name=\"running-database-queries\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:45
#, no-wrap
msgid "Running Database Queries"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:48
#, no-wrap
msgid "<a name=\"retrieving-all-rows-from-a-table\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:48
#, no-wrap
msgid "Retrieving All Rows From A Table"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:51
msgid ""
"You may use the `table` method provided by the `DB` facade to begin a "
"query. The `table` method returns a fluent query builder instance for the "
"given table, allowing you to chain more constraints onto the query and then "
"finally retrieve the results of the query using the `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:53
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:55
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:58
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:69
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all of the application's users.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $users = DB::table('users')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:73
#, no-wrap
msgid ""
"            return view('user.index', ['users' => $users]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:75
msgid ""
"The `get` method returns an `Illuminate\\Support\\Collection` instance "
"containing the results of the query where each result is an instance of the "
"PHP `stdClass` object. You may access each column's value by accessing the "
"column as a property of the object:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:77 docs/8.x/queries.md:109 docs/8.x/queries.md:130 docs/8.x/queries.md:190 docs/8.x/queries.md:223 docs/8.x/queries.md:313 docs/8.x/queries.md:383
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:79
#, no-wrap
msgid "    $users = DB::table('users')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:83
#, no-wrap
msgid ""
"    foreach ($users as $user) {\n"
"        echo $user->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:85
#, no-wrap
msgid ""
"> {tip} Laravel collections provide a variety of extremely powerful methods "
"for mapping and reducing data. For more information on Laravel collections, "
"check out the [collection documentation](/docs/{{version}}/collections).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:87
#, no-wrap
msgid "<a name=\"retrieving-a-single-row-column-from-a-table\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:87
#, no-wrap
msgid "Retrieving A Single Row / Column From A Table"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:90
msgid ""
"If you just need to retrieve a single row from a database table, you may use "
"the `DB` facade's `first` method. This method will return a single "
"`stdClass` object:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:92
#, no-wrap
msgid "    $user = DB::table('users')->where('name', 'John')->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:94
#, no-wrap
msgid "    return $user->email;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:96
msgid ""
"If you don't need an entire row, you may extract a single value from a "
"record using the `value` method. This method will return the value of the "
"column directly:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:98
#, no-wrap
msgid "    $email = DB::table('users')->where('name', 'John')->value('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:100
msgid "To retrieve a single row by its `id` column value, use the `find` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:102
#, no-wrap
msgid "    $user = DB::table('users')->find(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:104
#, no-wrap
msgid "<a name=\"retrieving-a-list-of-column-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:104
#, no-wrap
msgid "Retrieving A List Of Column Values"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:107
msgid ""
"If you would like to retrieve an `Illuminate\\Support\\Collection` instance "
"containing the values of a single column, you may use the `pluck` method. In "
"this example, we'll retrieve a collection of user titles:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:111
#, no-wrap
msgid "    $titles = DB::table('users')->pluck('title');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:115
#, no-wrap
msgid ""
"    foreach ($titles as $title) {\n"
"        echo $title;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:117
#, no-wrap
msgid ""
" You may specify the column that the resulting collection should use as its "
"keys by providing a second argument to the `pluck` method:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:119
#, no-wrap
msgid "    $titles = DB::table('users')->pluck('title', 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:123
#, no-wrap
msgid ""
"    foreach ($titles as $name => $title) {\n"
"        echo $title;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:125
#, no-wrap
msgid "<a name=\"chunking-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:125
#, no-wrap
msgid "Chunking Results"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:128
msgid ""
"If you need to work with thousands of database records, consider using the "
"`chunk` method provided by the `DB` facade. This method retrieves a small "
"chunk of results at a time and feeds each chunk into a closure for "
"processing. For example, let's retrieve the entire `users` table in chunks "
"of 100 records at a time:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:136
#, no-wrap
msgid ""
"    DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"        foreach ($users as $user) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:138
msgid ""
"You may stop further chunks from being processed by returning `false` from "
"the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:141
#, no-wrap
msgid ""
"    DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"        // Process the records...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:144
#, no-wrap
msgid ""
"        return false;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:146
msgid ""
"If you are updating database records while chunking results, your chunk "
"results could change in unexpected ways. If you plan to update the retrieved "
"records while chunking, it is always best to use the `chunkById` method "
"instead. This method will automatically paginate the results based on the "
"record's primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:155
#, no-wrap
msgid ""
"    DB::table('users')->where('active', false)\n"
"        ->chunkById(100, function ($users) {\n"
"            foreach ($users as $user) {\n"
"                DB::table('users')\n"
"                    ->where('id', $user->id)\n"
"                    ->update(['active' => true]);\n"
"            }\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:157
#, no-wrap
msgid ""
"> {note} When updating or deleting records inside the chunk callback, any "
"changes to the primary key or foreign keys could affect the chunk "
"query. This could potentially result in records not being included in the "
"chunked results.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:159
#, no-wrap
msgid "<a name=\"streaming-results-lazily\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:159
#, no-wrap
msgid "Streaming Results Lazily"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:162
msgid ""
"The `lazy` method works similarly to [the `chunk` method](#chunking-results) "
"in the sense that it executes the query in chunks. However, instead of "
"passing each chunk into a callback, the `lazy()` method returns a "
"[`LazyCollection`](/docs/{{version}}/collections#lazy-collections), which "
"lets you interact with the results as a single stream:"
msgstr ""

#. type: Code fence info string
#: docs/8.x/queries.md:163 docs/8.x/queries.md:173
#, no-wrap
msgid "php"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:163
#, no-wrap
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->lazy()->each(function ($user) {\n"
"    //\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:172
msgid ""
"Once again, if you plan to update the retrieved records while iterating over "
"them, it is best to use the `lazyById` method instead. This method will "
"automatically paginate the results based on the record's primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:173
#, no-wrap
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->lazyById()->each(function ($user) {\n"
"        DB::table('users')\n"
"            ->where('id', $user->id)\n"
"            ->update(['active' => true]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:183
#, no-wrap
msgid ""
"> {note} When updating or deleting records while iterating over them, any "
"changes to the primary key or foreign keys could affect the chunk "
"query. This could potentially result in records not being included in the "
"results.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:185
#, no-wrap
msgid "<a name=\"aggregates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:185
#, no-wrap
msgid "Aggregates"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:188
msgid ""
"The query builder also provides a variety of methods for retrieving "
"aggregate values like `count`, `max`, `min`, `avg`, and `sum`. You may call "
"any of these methods after constructing your query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:192
#, no-wrap
msgid "    $users = DB::table('users')->count();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:194
#, no-wrap
msgid "    $price = DB::table('orders')->max('price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:196
msgid ""
"Of course, you may combine these methods with other clauses to fine-tune how "
"your aggregate value is calculated:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:200
#, no-wrap
msgid ""
"    $price = DB::table('orders')\n"
"                    ->where('finalized', 1)\n"
"                    ->avg('price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:202
#, no-wrap
msgid "<a name=\"determining-if-records-exist\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:202
#, no-wrap
msgid "Determining If Records Exist"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:205
msgid ""
"Instead of using the `count` method to determine if any records exist that "
"match your query's constraints, you may use the `exists` and `doesntExist` "
"methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:209
#, no-wrap
msgid ""
"    if (DB::table('orders')->where('finalized', 1)->exists()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:213
#, no-wrap
msgid ""
"    if (DB::table('orders')->where('finalized', 1)->doesntExist()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:215
#, no-wrap
msgid "<a name=\"select-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:215
#, no-wrap
msgid "Select Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:218
#, no-wrap
msgid "<a name=\"specifying-a-select-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:218
#, no-wrap
msgid "Specifying A Select Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:221
msgid ""
"You may not always want to select all columns from a database table. Using "
"the `select` method, you can specify a custom \"select\" clause for the "
"query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:227
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->select('name', 'email as user_email')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:229
msgid ""
"The `distinct` method allows you to force the query to return distinct "
"results:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:231
#, no-wrap
msgid "    $users = DB::table('users')->distinct()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:233
msgid ""
"If you already have a query builder instance and you wish to add a column to "
"its existing select clause, you may use the `addSelect` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:235
#, no-wrap
msgid "    $query = DB::table('users')->select('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:237
#, no-wrap
msgid "    $users = $query->addSelect('age')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:239
#, no-wrap
msgid "<a name=\"raw-expressions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:239
#, no-wrap
msgid "Raw Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:242
msgid ""
"Sometimes you may need to insert an arbitrary string into a query. To create "
"a raw string expression, you may use the `raw` method provided by the `DB` "
"facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:248
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                 ->select(DB::raw('count(*) as user_count, status'))\n"
"                 ->where('status', '<>', 1)\n"
"                 ->groupBy('status')\n"
"                 ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:250
#, no-wrap
msgid ""
"> {note} Raw statements will be injected into the query as strings, so you "
"should be extremely careful to avoid creating SQL injection "
"vulnerabilities.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:252
#, no-wrap
msgid "<a name=\"raw-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:252
#, no-wrap
msgid "Raw Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:255
msgid ""
"Instead of using the `DB::raw` method, you may also use the following "
"methods to insert a raw expression into various parts of your "
"query. **Remember, Laravel can not guarantee that any query using raw "
"expressions is protected against SQL injection vulnerabilities.**"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:257
#, no-wrap
msgid "<a name=\"selectraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:257
#, no-wrap
msgid "`selectRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:260
msgid ""
"The `selectRaw` method can be used in place of "
"`addSelect(DB::raw(...))`. This method accepts an optional array of bindings "
"as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:264
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->selectRaw('price * ? as price_with_tax', [1.0825])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:266
#, no-wrap
msgid "<a name=\"whereraw-orwhereraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:266
#, no-wrap
msgid "`whereRaw / orWhereRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:269
msgid ""
"The `whereRaw` and `orWhereRaw` methods can be used to inject a raw "
"\"where\" clause into your query. These methods accept an optional array of "
"bindings as their second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:273
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->whereRaw('price > IF(state = \"TX\", ?, 100)', "
"[200])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:275
#, no-wrap
msgid "<a name=\"havingraw-orhavingraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:275
#, no-wrap
msgid "`havingRaw / orHavingRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:278
msgid ""
"The `havingRaw` and `orHavingRaw` methods may be used to provide a raw "
"string as the value of the \"having\" clause. These methods accept an "
"optional array of bindings as their second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:284
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->select('department', DB::raw('SUM(price) as "
"total_sales'))\n"
"                    ->groupBy('department')\n"
"                    ->havingRaw('SUM(price) > ?', [2500])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:286
#, no-wrap
msgid "<a name=\"orderbyraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:286
#, no-wrap
msgid "`orderByRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:289
msgid ""
"The `orderByRaw` method may be used to provide a raw string as the value of "
"the \"order by\" clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:293
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->orderByRaw('updated_at - created_at DESC')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:295
#, no-wrap
msgid "<a name=\"groupbyraw\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:295
#, no-wrap
msgid "`groupByRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:298
msgid ""
"The `groupByRaw` method may be used to provide a raw string as the value of "
"the `group by` clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:303
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->select('city', 'state')\n"
"                    ->groupByRaw('city, state')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:305
#, no-wrap
msgid "<a name=\"joins\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:305
#, no-wrap
msgid "Joins"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:308
#, no-wrap
msgid "<a name=\"inner-join-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:308
#, no-wrap
msgid "Inner Join Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:311
msgid ""
"The query builder may also be used to add join clauses to your queries. To "
"perform a basic \"inner join\", you may use the `join` method on a query "
"builder instance. The first argument passed to the `join` method is the name "
"of the table you need to join to, while the remaining arguments specify the "
"column constraints for the join. You may even join multiple tables in a "
"single query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:319
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->join('contacts', 'users.id', '=', 'contacts.user_id')\n"
"                ->join('orders', 'users.id', '=', 'orders.user_id')\n"
"                ->select('users.*', 'contacts.phone', 'orders.price')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:321
#, no-wrap
msgid "<a name=\"left-join-right-join-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:321
#, no-wrap
msgid "Left Join / Right Join Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:324
msgid ""
"If you would like to perform a \"left join\" or \"right join\" instead of an "
"\"inner join\", use the `leftJoin` or `rightJoin` methods. These methods "
"have the same signature as the `join` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:328
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:332
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:334
#, no-wrap
msgid "<a name=\"cross-join-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:334
#, no-wrap
msgid "Cross Join Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:337
msgid ""
"You may use the `crossJoin` method to perform a \"cross join\". Cross joins "
"generate a cartesian product between the first table and the joined table:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:341
#, no-wrap
msgid ""
"    $sizes = DB::table('sizes')\n"
"                ->crossJoin('colors')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:343
#, no-wrap
msgid "<a name=\"advanced-join-clauses\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:343
#, no-wrap
msgid "Advanced Join Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:346
msgid ""
"You may also specify more advanced join clauses. To get started, pass a "
"closure as the second argument to the `join` method. The closure will "
"receive a `Illuminate\\Database\\Query\\JoinClause` instance which allows "
"you to specify constraints on the \"join\" clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:352
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->join('contacts', function ($join) {\n"
"                $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n"
"            })\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:354
msgid ""
"If you would like to use a \"where\" clause on your joins, you may use the "
"`where` and `orWhere` methods provided by the `JoinClause` instance. Instead "
"of comparing two columns, these methods will compare the column against a "
"value:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:361
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->join('contacts', function ($join) {\n"
"                $join->on('users.id', '=', 'contacts.user_id')\n"
"                     ->where('contacts.user_id', '>', 5);\n"
"            })\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:363
#, no-wrap
msgid "<a name=\"subquery-joins\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:363
#, no-wrap
msgid "Subquery Joins"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:366
msgid ""
"You may use the `joinSub`, `leftJoinSub`, and `rightJoinSub` methods to join "
"a query to a subquery. Each of these methods receives three arguments: the "
"subquery, its table alias, and a closure that defines the related "
"columns. In this example, we will retrieve a collection of users where each "
"user record also contains the `created_at` timestamp of the user's most "
"recently published blog post:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:371
#, no-wrap
msgid ""
"    $latestPosts = DB::table('posts')\n"
"                       ->select('user_id', DB::raw('MAX(created_at) as "
"last_post_created_at'))\n"
"                       ->where('is_published', true)\n"
"                       ->groupBy('user_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:376
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"            ->joinSub($latestPosts, 'latest_posts', function ($join) {\n"
"                $join->on('users.id', '=', 'latest_posts.user_id');\n"
"            })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:378
#, no-wrap
msgid "<a name=\"unions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:378
#, no-wrap
msgid "Unions"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:381
msgid ""
"The query builder also provides a convenient method to \"union\" two or more "
"queries together. For example, you may create an initial query and use the "
"`union` method to union it with more queries:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:386
#, no-wrap
msgid ""
"    $first = DB::table('users')\n"
"                ->whereNull('first_name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:391
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->whereNull('last_name')\n"
"                ->union($first)\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:393
msgid ""
"In addition to the `union` method, the query builder provides a `unionAll` "
"method. Queries that are combined using the `unionAll` method will not have "
"their duplicate results removed. The `unionAll` method has the same method "
"signature as the `union` method."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:395
#, no-wrap
msgid "<a name=\"basic-where-clauses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:395
#, no-wrap
msgid "Basic Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:398
#, no-wrap
msgid "<a name=\"where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:398
#, no-wrap
msgid "Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:401
msgid ""
"You may use the query builder's `where` method to add \"where\" clauses to "
"the query. The most basic call to the `where` method requires three "
"arguments. The first argument is the name of the column. The second argument "
"is an operator, which can be any of the database's supported operators. The "
"third argument is the value to compare against the column's value."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:403
msgid ""
"For example, the following query retrieves users where the value of the "
"`votes` column is equal to `100` and the value of the `age` column is "
"greater than `35`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:408
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('votes', '=', 100)\n"
"                    ->where('age', '>', 35)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:410
msgid ""
"For convenience, if you want to verify that a column is `=` to a given "
"value, you may pass the value as the second argument to the `where` "
"method. Laravel will assume you would like to use the `=` operator:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:412
#, no-wrap
msgid "    $users = DB::table('users')->where('votes', 100)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:414
msgid ""
"As previously mentioned, you may use any operator that is supported by your "
"database system:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:418
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('votes', '>=', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:422
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('votes', '<>', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:426
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('name', 'like', 'T%')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:428
msgid ""
"You may also pass an array of conditions to the `where` function. Each "
"element of the array should be an array containing the three arguments "
"typically passed to the `where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:433
#, no-wrap
msgid ""
"    $users = DB::table('users')->where([\n"
"        ['status', '=', '1'],\n"
"        ['subscribed', '<>', '1'],\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:435
#, no-wrap
msgid "<a name=\"or-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:435
#, no-wrap
msgid "Or Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:438
msgid ""
"When chaining together calls to the query builder's `where` method, the "
"\"where\" clauses will be joined together using the `and` operator. However, "
"you may use the `orWhere` method to join a clause to the query using the "
"`or` operator. The `orWhere` method accepts the same arguments as the "
"`where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:443
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->where('votes', '>', 100)\n"
"                        ->orWhere('name', 'John')\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:445
msgid ""
"If you need to group an \"or\" condition within parentheses, you may pass a "
"closure as the first argument to the `orWhere` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:453
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->where('votes', '>', 100)\n"
"                ->orWhere(function($query) {\n"
"                    $query->where('name', 'Abigail')\n"
"                          ->where('votes', '>', 50);\n"
"                })\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:455
msgid "The example above will produce the following SQL:"
msgstr ""

#. type: Code fence info string
#: docs/8.x/queries.md:456 docs/8.x/queries.md:611 docs/8.x/queries.md:635
#, no-wrap
msgid "sql"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:456
#, no-wrap
msgid "select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:461 docs/8.x/queries.md:616
#, no-wrap
msgid ""
"> {note} You should always group `orWhere` calls in order to avoid "
"unexpected behavior when global scopes are applied.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:463
#, no-wrap
msgid "<a name=\"json-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:463
#, no-wrap
msgid "JSON Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:466
#, no-wrap
msgid ""
"Laravel also supports querying JSON column types on databases that provide "
"support for JSON column types. Currently, this includes MySQL 5.7+, "
"PostgreSQL, SQL Server 2016, and SQLite 3.9.0 (with the [JSON1 "
"extension](https://www.sqlite.org/json1.html)). To query a JSON column, use "
"the `->` operator:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:470
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('preferences->dining->meal', 'salad')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:472
msgid ""
"You may use `whereJsonContains` to query JSON arrays. This feature is not "
"supported by the SQLite database:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:476
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonContains('options->languages', 'en')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:478
msgid ""
"If your application uses the MySQL or PostgreSQL databases, you may pass an "
"array of values to the `whereJsonContains` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:482
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonContains('options->languages', ['en', "
"'de'])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:484
msgid "You may use `whereJsonLength` method to query JSON arrays by their length:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:488
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonLength('options->languages', 0)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:492
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonLength('options->languages', '>', 1)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:494
#, no-wrap
msgid "<a name=\"additional-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:494
#, no-wrap
msgid "Additional Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:497
#, no-wrap
msgid "**whereBetween / orWhereBetween**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:499
msgid ""
"The `whereBetween` method verifies that a column's value is between two "
"values:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:503
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->whereBetween('votes', [1, 100])\n"
"               ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:505
#, no-wrap
msgid "**whereNotBetween / orWhereNotBetween**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:507
msgid ""
"The `whereNotBetween` method verifies that a column's value lies outside of "
"two values:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:511
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->whereNotBetween('votes', [1, 100])\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:513
#, no-wrap
msgid "**whereIn / whereNotIn / orWhereIn / orWhereNotIn**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:515
msgid ""
"The `whereIn` method verifies that a given column's value is contained "
"within the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:519
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->whereIn('id', [1, 2, 3])\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:521
msgid ""
"The `whereNotIn` method verifies that the given column's value is not "
"contained in the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:525
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->whereNotIn('id', [1, 2, 3])\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:527
#, no-wrap
msgid ""
"> {note} If you are adding a large array of integer bindings to your query, "
"the `whereIntegerInRaw` or `whereIntegerNotInRaw` methods may be used to "
"greatly reduce your memory usage.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:529
#, no-wrap
msgid "**whereNull / whereNotNull / orWhereNull / orWhereNotNull**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:531
msgid ""
"The `whereNull` method verifies that the value of the given column is "
"`NULL`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:535
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereNull('updated_at')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:537
msgid "The `whereNotNull` method verifies that the column's value is not `NULL`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:541
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereNotNull('updated_at')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:543
#, no-wrap
msgid "**whereDate / whereMonth / whereDay / whereYear / whereTime**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:545
msgid ""
"The `whereDate` method may be used to compare a column's value against a "
"date:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:549
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereDate('created_at', '2016-12-31')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:551
msgid ""
"The `whereMonth` method may be used to compare a column's value against a "
"specific month:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:555
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereMonth('created_at', '12')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:557
msgid ""
"The `whereDay` method may be used to compare a column's value against a "
"specific day of the month:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:561
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereDay('created_at', '31')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:563
msgid ""
"The `whereYear` method may be used to compare a column's value against a "
"specific year:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:567
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereYear('created_at', '2016')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:569
msgid ""
"The `whereTime` method may be used to compare a column's value against a "
"specific time:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:573
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereTime('created_at', '=', '11:20:45')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:575
#, no-wrap
msgid "**whereColumn / orWhereColumn**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:577
msgid "The `whereColumn` method may be used to verify that two columns are equal:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:581
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereColumn('first_name', 'last_name')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:583
msgid "You may also pass a comparison operator to the `whereColumn` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:587
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereColumn('updated_at', '>', 'created_at')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:589
msgid ""
"You may also pass an array of column comparisons to the `whereColumn` "
"method. These conditions will be joined using the `and` operator:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:595
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereColumn([\n"
"                        ['first_name', '=', 'last_name'],\n"
"                        ['updated_at', '>', 'created_at'],\n"
"                    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:597
#, no-wrap
msgid "<a name=\"logical-grouping\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:597
#, no-wrap
msgid "Logical Grouping"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:600
msgid ""
"Sometimes you may need to group several \"where\" clauses within parentheses "
"in order to achieve your query's desired logical grouping. In fact, you "
"should generally always group calls to the `orWhere` method in parentheses "
"in order to avoid unexpected query behavior. To accomplish this, you may "
"pass a closure to the `where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:608
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->where('name', '=', 'John')\n"
"               ->where(function ($query) {\n"
"                   $query->where('votes', '>', 100)\n"
"                         ->orWhere('title', '=', 'Admin');\n"
"               })\n"
"               ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:610
msgid ""
"As you can see, passing a closure into the `where` method instructs the "
"query builder to begin a constraint group. The closure will receive a query "
"builder instance which you can use to set the constraints that should be "
"contained within the parenthesis group. The example above will produce the "
"following SQL:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:611
#, no-wrap
msgid ""
"select * from users where name = 'John' and (votes > 100 or title = "
"'Admin')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:618
#, no-wrap
msgid "<a name=\"advanced-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:618
#, no-wrap
msgid "Advanced Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:621
#, no-wrap
msgid "<a name=\"where-exists-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:621
#, no-wrap
msgid "Where Exists Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:624
msgid ""
"The `whereExists` method allows you to write \"where exists\" SQL "
"clauses. The `whereExists` method accepts a closure which will receive a "
"query builder instance, allowing you to define the query that should be "
"placed inside of the \"exists\" clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:632
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->whereExists(function ($query) {\n"
"                   $query->select(DB::raw(1))\n"
"                         ->from('orders')\n"
"                         ->whereColumn('orders.user_id', 'users.id');\n"
"               })\n"
"               ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:634
msgid "The query above will produce the following SQL:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:635
#, no-wrap
msgid ""
"select * from users\n"
"where exists (\n"
"    select 1\n"
"    from orders\n"
"    where orders.user_id = users.id\n"
")\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:645
#, no-wrap
msgid "<a name=\"subquery-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:645
#, no-wrap
msgid "Subquery Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:648
msgid ""
"Sometimes you may need to construct a \"where\" clause that compares the "
"results of a subquery to a given value. You may accomplish this by passing a "
"closure and a value to the `where` method. For example, the following query "
"will retrieve all users who have a recent \"membership\" of a given type;"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:650
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:658
#, no-wrap
msgid ""
"    $users = User::where(function ($query) {\n"
"        $query->select('type')\n"
"            ->from('membership')\n"
"            ->whereColumn('membership.user_id', 'users.id')\n"
"            ->orderByDesc('membership.start_date')\n"
"            ->limit(1);\n"
"    }, 'Pro')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:660
msgid ""
"Or, you may need to construct a \"where\" clause that compares a column to "
"the results of a subquery. You may accomplish this by passing a column, "
"operator, and closure to the `where` method. For example, the following "
"query will retrieve all income records where the amount is less than "
"average;"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:662
#, no-wrap
msgid "    use App\\Models\\Income;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:666
#, no-wrap
msgid ""
"    $incomes = Income::where('amount', '<', function ($query) {\n"
"        $query->selectRaw('avg(i.amount)')->from('incomes as i');\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:668
#, no-wrap
msgid "<a name=\"ordering-grouping-limit-and-offset\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:668
#, no-wrap
msgid "Ordering, Grouping, Limit & Offset"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:671
#, no-wrap
msgid "<a name=\"ordering\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:671
#, no-wrap
msgid "Ordering"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:674
#, no-wrap
msgid "<a name=\"orderby\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:674
#, no-wrap
msgid "The `orderBy` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:677
msgid ""
"The `orderBy` method allows you to sort the results of the query by a given "
"column. The first argument accepted by the `orderBy` method should be the "
"column you wish to sort by, while the second argument determines the "
"direction of the sort and may be either `asc` or `desc`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:681
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->orderBy('name', 'desc')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:683
msgid ""
"To sort by multiple columns, you may simply invoke `orderBy` as many times "
"as necessary:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:688
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->orderBy('name', 'desc')\n"
"                    ->orderBy('email', 'asc')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:690
#, no-wrap
msgid "<a name=\"latest-oldest\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:690
#, no-wrap
msgid "The `latest` & `oldest` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:693
msgid ""
"The `latest` and `oldest` methods allow you to easily order results by "
"date. By default, the result will be ordered by the table's `created_at` "
"column. Or, you may pass the column name that you wish to sort by:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:697
#, no-wrap
msgid ""
"    $user = DB::table('users')\n"
"                    ->latest()\n"
"                    ->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:699
#, no-wrap
msgid "<a name=\"random-ordering\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:699
#, no-wrap
msgid "Random Ordering"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:702
msgid ""
"The `inRandomOrder` method may be used to sort the query results "
"randomly. For example, you may use this method to fetch a random user:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:706
#, no-wrap
msgid ""
"    $randomUser = DB::table('users')\n"
"                    ->inRandomOrder()\n"
"                    ->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:708
#, no-wrap
msgid "<a name=\"removing-existing-orderings\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:708
#, no-wrap
msgid "Removing Existing Orderings"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:711
msgid ""
"The `reorder` method removes all of the \"order by\" clauses that have "
"previously been applied to the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:713 docs/8.x/queries.md:719
#, no-wrap
msgid "    $query = DB::table('users')->orderBy('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:715
#, no-wrap
msgid "    $unorderedUsers = $query->reorder()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:717
msgid ""
"You may pass a column and direction when calling the `reorder` method in "
"order to remove all existing \"order by\" clauses and apply an entirely new "
"order to the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:721
#, no-wrap
msgid "    $usersOrderedByEmail = $query->reorder('email', 'desc')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:723
#, no-wrap
msgid "<a name=\"grouping\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:723
#, no-wrap
msgid "Grouping"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:726
#, no-wrap
msgid "<a name=\"groupby-having\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:726
#, no-wrap
msgid "The `groupBy` & `having` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:729
msgid ""
"As you might expect, the `groupBy` and `having` methods may be used to group "
"the query results. The `having` method's signature is similar to that of the "
"`where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:734
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->groupBy('account_id')\n"
"                    ->having('account_id', '>', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:736
msgid ""
"You may pass multiple arguments to the `groupBy` method to group by multiple "
"columns:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:741
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->groupBy('first_name', 'status')\n"
"                    ->having('account_id', '>', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:743
msgid ""
"To build more advanced `having` statements, see the "
"[`havingRaw`](#raw-methods) method."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:745
#, no-wrap
msgid "<a name=\"limit-and-offset\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:745
#, no-wrap
msgid "Limit & Offset"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:748
#, no-wrap
msgid "<a name=\"skip-take\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:748
#, no-wrap
msgid "The `skip` & `take` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:751
msgid ""
"You may use the `skip` and `take` methods to limit the number of results "
"returned from the query or to skip a given number of results in the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:753
#, no-wrap
msgid "    $users = DB::table('users')->skip(10)->take(5)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:755
msgid ""
"Alternatively, you may use the `limit` and `offset` methods. These methods "
"are functionally equivalent to the `take` and `skip` methods, respectively:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:760
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->offset(10)\n"
"                    ->limit(5)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:762
#, no-wrap
msgid "<a name=\"conditional-clauses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:762
#, no-wrap
msgid "Conditional Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:765
msgid ""
"Sometimes you may want certain query clauses to apply to a query based on "
"another condition. For instance, you may only want to apply a `where` "
"statement if a given input value is present on the incoming HTTP "
"request. You may accomplish this using the `when` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:767
#, no-wrap
msgid "    $role = $request->input('role');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:773
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->when($role, function ($query, $role) {\n"
"                        return $query->where('role_id', $role);\n"
"                    })\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:775
msgid ""
"The `when` method only executes the given closure when the first argument is "
"`true`. If the first argument is `false`, the closure will not be "
"executed. So, in the example above, the closure given to the `when` method "
"will only be invoked if the `role` field is present on the incoming request "
"and evaluates to `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:777
msgid ""
"You may pass another closure as the third argument to the `when` "
"method. This closure will only execute if the first argument evaluates as "
"`false`. To illustrate how this feature may be used, we will use it to "
"configure the default ordering of a query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:779
#, no-wrap
msgid "    $sortByVotes = $request->input('sort_by_votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:787
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->when($sortByVotes, function ($query, $sortByVotes) {\n"
"                        return $query->orderBy('votes');\n"
"                    }, function ($query) {\n"
"                        return $query->orderBy('name');\n"
"                    })\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:789
#, no-wrap
msgid "<a name=\"insert-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:789
#, no-wrap
msgid "Insert Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:792
msgid ""
"The query builder also provides an `insert` method that may be used to "
"insert records into the database table. The `insert` method accepts an array "
"of column names and values:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:797
#, no-wrap
msgid ""
"    DB::table('users')->insert([\n"
"        'email' => 'kayla@example.com',\n"
"        'votes' => 0\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:799
msgid ""
"You may insert several records at once by passing an array of arrays. Each "
"array represents a record that should be inserted into the table:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:804
#, no-wrap
msgid ""
"    DB::table('users')->insert([\n"
"        ['email' => 'picard@example.com', 'votes' => 0],\n"
"        ['email' => 'janeway@example.com', 'votes' => 0],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:806
msgid ""
"The `insertOrIgnore` method will ignore duplicate record errors while "
"inserting records into the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:811
#, no-wrap
msgid ""
"    DB::table('users')->insertOrIgnore([\n"
"        ['id' => 1, 'email' => 'sisko@example.com'],\n"
"        ['id' => 2, 'email' => 'archer@example.com'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:813
#, no-wrap
msgid "<a name=\"auto-incrementing-ids\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:813
#, no-wrap
msgid "Auto-Incrementing IDs"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:816
msgid ""
"If the table has an auto-incrementing id, use the `insertGetId` method to "
"insert a record and then retrieve the ID:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:820
#, no-wrap
msgid ""
"    $id = DB::table('users')->insertGetId(\n"
"        ['email' => 'john@example.com', 'votes' => 0]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:822
#, no-wrap
msgid ""
"> {note} When using PostgreSQL the `insertGetId` method expects the "
"auto-incrementing column to be named `id`. If you would like to retrieve the "
"ID from a different \"sequence\", you may pass the column name as the second "
"parameter to the `insertGetId` method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:824
#, no-wrap
msgid "<a name=\"upserts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:824
#, no-wrap
msgid "Upserts"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:827
msgid ""
"The `upsert` method will insert records that do not exist and update the "
"records that already exist with new values that you may specify. The "
"method's first argument consists of the values to insert or update, while "
"the second argument lists the column(s) that uniquely identify records "
"within the associated table. The method's third and final argument is an "
"array of columns that should be updated if a matching record already exists "
"in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:832
#, no-wrap
msgid ""
"    DB::table('flights')->upsert([\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => "
"99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => "
"150]\n"
"    ], ['departure', 'destination'], ['price']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:834
msgid ""
"In the example above, Laravel will attempt to insert two records. If a "
"record already exists with the same `departure` and `destination` column "
"values, Laravel will update that record's `price` column."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:836
#, no-wrap
msgid ""
"> {note} All databases except SQL Server require the columns in the second "
"argument of the `upsert` method to have a \"primary\" or \"unique\" "
"index. In addition, the MySQL database driver ignores the second argument of "
"the `upsert` method and always uses the \"primary\" and \"unique\" indexes "
"of the table to detect existing records.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:838
#, no-wrap
msgid "<a name=\"update-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:838
#, no-wrap
msgid "Update Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:841
msgid ""
"In addition to inserting records into the database, the query builder can "
"also update existing records using the `update` method. The `update` method, "
"like the `insert` method, accepts an array of column and value pairs "
"indicating the columns to be updated. You may constrain the `update` query "
"using `where` clauses:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:845
#, no-wrap
msgid ""
"    $affected = DB::table('users')\n"
"                  ->where('id', 1)\n"
"                  ->update(['votes' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:847
#, no-wrap
msgid "<a name=\"update-or-insert\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:847
#, no-wrap
msgid "Update Or Insert"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:850
msgid ""
"Sometimes you may want to update an existing record in the database or "
"create it if no matching record exists. In this scenario, the "
"`updateOrInsert` method may be used. The `updateOrInsert` method accepts two "
"arguments: an array of conditions by which to find the record, and an array "
"of column and value pairs indicating the columns to be updated."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:852
msgid ""
"The `updateOrInsert` method will attempt to locate a matching database "
"record using the first argument's column and value pairs. If the record "
"exists, it will be updated with the values in the second argument. If the "
"record can not be found, a new record will be inserted with the merged "
"attributes of both arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:858
#, no-wrap
msgid ""
"    DB::table('users')\n"
"        ->updateOrInsert(\n"
"            ['email' => 'john@example.com', 'name' => 'John'],\n"
"            ['votes' => '2']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:860
#, no-wrap
msgid "<a name=\"updating-json-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:860
#, no-wrap
msgid "Updating JSON Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:863
#, no-wrap
msgid ""
"When updating a JSON column, you should use `->` syntax to update the "
"appropriate key in the JSON object. This operation is supported on MySQL "
"5.7+ and PostgreSQL 9.5+:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:867
#, no-wrap
msgid ""
"    $affected = DB::table('users')\n"
"                  ->where('id', 1)\n"
"                  ->update(['options->enabled' => true]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:869
#, no-wrap
msgid "<a name=\"increment-and-decrement\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:869
#, no-wrap
msgid "Increment & Decrement"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:872
msgid ""
"The query builder also provides convenient methods for incrementing or "
"decrementing the value of a given column. Both of these methods accept at "
"least one argument: the column to modify. A second argument may be provided "
"to specify the amount by which the column should be incremented or "
"decremented:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:874
#, no-wrap
msgid "    DB::table('users')->increment('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:876
#, no-wrap
msgid "    DB::table('users')->increment('votes', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:878
#, no-wrap
msgid "    DB::table('users')->decrement('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:880
#, no-wrap
msgid "    DB::table('users')->decrement('votes', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:882
msgid "You may also specify additional columns to update during the operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:884
#, no-wrap
msgid "    DB::table('users')->increment('votes', 1, ['name' => 'John']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:886
#, no-wrap
msgid "<a name=\"delete-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:886
#, no-wrap
msgid "Delete Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:889
msgid ""
"The query builder's `delete` method may be used to delete records from the "
"table. You may constrain `delete` statements by adding \"where\" clauses "
"before calling the `delete` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:891
#, no-wrap
msgid "    DB::table('users')->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:893
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:895
msgid ""
"If you wish to truncate an entire table, which will remove all records from "
"the table and reset the auto-incrementing ID to zero, you may use the "
"`truncate` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:897
#, no-wrap
msgid "    DB::table('users')->truncate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:899
#, no-wrap
msgid "<a name=\"table-truncation-and-postgresql\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:899
#, no-wrap
msgid "Table Truncation & PostgreSQL"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:902
msgid ""
"When truncating a PostgreSQL database, the `CASCADE` behavior will be "
"applied. This means that all foreign key related records in other tables "
"will be deleted as well."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:904
#, no-wrap
msgid "<a name=\"pessimistic-locking\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:904
#, no-wrap
msgid "Pessimistic Locking"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:907
msgid ""
"The query builder also includes a few functions to help you achieve "
"\"pessimistic locking\" when executing your `select` statements. To execute "
"a statement with a \"shared lock\", you may call the `sharedLock` method. A "
"shared lock prevents the selected rows from being modified until your "
"transaction is committed:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:912
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->sharedLock()\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:914
msgid ""
"Alternatively, you may use the `lockForUpdate` method. A \"for update\" lock "
"prevents the selected records from being modified or from being selected "
"with another shared lock:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:919
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->lockForUpdate()\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:921
#, no-wrap
msgid "<a name=\"debugging\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:921
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:924
msgid ""
"You may use the `dd` and `dump` methods while building a query to dump the "
"current query bindings and SQL. The `dd` method will display the debug "
"information and then stop executing the request. The `dump` method will "
"display the debug information but allow the request to continue executing:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:926
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->dd();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:927
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->dump();\n"
msgstr ""
