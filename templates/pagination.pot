#
msgid ""
msgstr ""

#: docs/8.x/pagination.md:block 1 (header)
msgid "Database: Pagination"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Basic Usage](#basic-usage)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Paginating Query Builder Results](#paginating-query-builder-results)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Paginating Eloquent Results](#paginating-eloquent-results)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Cursor Pagination](#cursor-pagination)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Manually Creating A Paginator](#manually-creating-a-paginator)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Customizing Pagination URLs](#customizing-pagination-urls)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Displaying Pagination Results](#displaying-pagination-results)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Adjusting The Pagination Link Window](#adjusting-the-pagination-link-window)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Converting Results To JSON](#converting-results-to-json)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Customizing The Pagination View](#customizing-the-pagination-view)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Using Bootstrap](#using-bootstrap)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Paginator and LengthAwarePaginator Instance Methods](#paginator-instance-methods)"
msgstr ""

#: docs/8.x/pagination.md:block 2 (unordered list)
msgid "[Cursor Paginator Instance Methods](#cursor-paginator-instance-methods)"
msgstr ""

#: docs/8.x/pagination.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/pagination.md:block 5 (paragraph)
msgid "In other frameworks, pagination can be very painful. We hope Laravel's approach to pagination will be a breath of fresh air. Laravel's paginator is integrated with the [query builder](/docs/{{version}}/queries) and [Eloquent ORM](/docs/{{version}}/eloquent) and provides convenient, easy-to-use pagination of database records with zero configuration."
msgstr ""

#: docs/8.x/pagination.md:block 6 (paragraph)
msgid "By default, the HTML generated by the paginator is compatible with the [Tailwind CSS framework](https://tailwindcss.com/); however, Bootstrap pagination support is also available."
msgstr ""

#: docs/8.x/pagination.md:block 7 (paragraph)
msgid "<a name=\"tailwind-jit\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 8 (header)
msgid "Tailwind JIT"
msgstr ""

#: docs/8.x/pagination.md:block 9 (paragraph)
msgid "If you are using Laravel's default Tailwind pagination views and the Tailwind JIT engine, you should ensure your application's `tailwind.config.js` file's `content` key references Laravel's pagination views so that their Tailwind classes are not purged:"
msgstr ""

#: docs/8.x/pagination.md:block 10 (code)
msgid ""
"content: [\n"
"    './resources/**/*.blade.php',\n"
"    './resources/**/*.js',\n"
"    './resources/**/*.vue',\n"
"    './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',\n"
"],\n"
msgstr ""

#: docs/8.x/pagination.md:block 11 (paragraph)
msgid "<a name=\"basic-usage\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 12 (header)
msgid "Basic Usage"
msgstr ""

#: docs/8.x/pagination.md:block 13 (paragraph)
msgid "<a name=\"paginating-query-builder-results\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 14 (header)
msgid "Paginating Query Builder Results"
msgstr ""

#: docs/8.x/pagination.md:block 15 (paragraph)
msgid "There are several ways to paginate items. The simplest is by using the `paginate` method on the [query builder](/docs/{{version}}/queries) or an [Eloquent query](/docs/{{version}}/eloquent). The `paginate` method automatically takes care of setting the query's \"limit\" and \"offset\" based on the current page being viewed by the user. By default, the current page is detected by the value of the `page` query string argument on the HTTP request. This value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator."
msgstr ""

#: docs/8.x/pagination.md:block 16 (paragraph)
msgid "In this example, the only argument passed to the `paginate` method is the number of items you would like displayed \"per page\". In this case, let's specify that we would like to display `15` items per page:"
msgstr ""

#: docs/8.x/pagination.md:block 17 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show all application users.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        return view('user.index', [\n"
"            'users' => DB::table('users')->paginate(15)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/pagination.md:block 18 (paragraph)
msgid "<a name=\"simple-pagination\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 19 (header)
msgid "Simple Pagination"
msgstr ""

#: docs/8.x/pagination.md:block 20 (paragraph)
msgid "The `paginate` method counts the total number of records matched by the query before retrieving the records from the database. This is done so that the paginator knows how many pages of records there are in total. However, if you do not plan to show the total number of pages in your application's UI then the record count query is unnecessary."
msgstr ""

#: docs/8.x/pagination.md:block 21 (paragraph)
msgid "Therefore, if you only need to display simple \"Next\" and \"Previous\" links in your application's UI, you may use the `simplePaginate` method to perform a single, efficient query:"
msgstr ""

#: docs/8.x/pagination.md:block 22 (code)
msgid "$users = DB::table('users')->simplePaginate(15);\n"
msgstr ""

#: docs/8.x/pagination.md:block 23 (paragraph)
msgid "<a name=\"paginating-eloquent-results\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 24 (header)
msgid "Paginating Eloquent Results"
msgstr ""

#: docs/8.x/pagination.md:block 25 (paragraph)
msgid "You may also paginate [Eloquent](/docs/{{version}}/eloquent) queries. In this example, we will paginate the `App\\Models\\User` model and indicate that we plan to display 15 records per page. As you can see, the syntax is nearly identical to paginating query builder results:"
msgstr ""

#: docs/8.x/pagination.md:block 26 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::paginate(15);\n"
msgstr ""

#: docs/8.x/pagination.md:block 27 (paragraph)
msgid "Of course, you may call the `paginate` method after setting other constraints on the query, such as `where` clauses:"
msgstr ""

#: docs/8.x/pagination.md:block 28 (code)
msgid "$users = User::where('votes', '>', 100)->paginate(15);\n"
msgstr ""

#: docs/8.x/pagination.md:block 29 (paragraph)
msgid "You may also use the `simplePaginate` method when paginating Eloquent models:"
msgstr ""

#: docs/8.x/pagination.md:block 30 (code)
msgid "$users = User::where('votes', '>', 100)->simplePaginate(15);\n"
msgstr ""

#: docs/8.x/pagination.md:block 31 (paragraph)
msgid "Similarly, you may use the `cursorPaginate` method to cursor paginate Eloquent models:"
msgstr ""

#: docs/8.x/pagination.md:block 32 (code)
msgid "$users = User::where('votes', '>', 100)->cursorPaginate(15);\n"
msgstr ""

#: docs/8.x/pagination.md:block 33 (paragraph)
msgid "<a name=\"multiple-paginator-instances-per-page\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 34 (header)
msgid "Multiple Paginator Instances Per Page"
msgstr ""

#: docs/8.x/pagination.md:block 35 (paragraph)
msgid "Sometimes you may need to render two separate paginators on a single screen that is rendered by your application. However, if both paginator instances use the `page` query string parameter to store the current page, the two paginator's will conflict. To resolve this conflict, you may pass the name of the query string parameter you wish to use to store the paginator's current page via the third argument provided to the `paginate`, `simplePaginate`, and `cursorPaginate` methods:"
msgstr ""

#: docs/8.x/pagination.md:block 36 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('votes', '>', 100)->paginate(\n"
"    $perPage = 15, $columns = ['*'], $pageName = 'users'\n"
");\n"
msgstr ""

#: docs/8.x/pagination.md:block 37 (paragraph)
msgid "<a name=\"cursor-pagination\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 38 (header)
msgid "Cursor Pagination"
msgstr ""

#: docs/8.x/pagination.md:block 39 (paragraph)
msgid "While `paginate` and `simplePaginate` create queries using the SQL \"offset\" clause, cursor pagination works by constructing \"where\" clauses that compare the values of the ordered columns contained in the query, providing the most efficient database performance available amongst all of Laravel's pagination methods. This method of pagination is particularly well-suited for large data-sets and \"infinite\" scrolling user interfaces."
msgstr ""

#: docs/8.x/pagination.md:block 40 (paragraph)
msgid "Unlike offset based pagination, which includes a page number in the query string of the URLs generated by the paginator, cursor based pagination places a \"cursor\" string in the query string. The cursor is an encoded string containing the location that the next paginated query should start paginating and the direction that it should paginate:"
msgstr ""

#: docs/8.x/pagination.md:block 41 (code)
msgid "http://localhost/users?cursor=eyJpZCI6MTUsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0\n"
msgstr ""

#: docs/8.x/pagination.md:block 42 (paragraph)
msgid "You may create a cursor based paginator instance via the `cursorPaginate` method offered by the query builder. This method returns an instance of `Illuminate\\Pagination\\CursorPaginator`:"
msgstr ""

#: docs/8.x/pagination.md:block 43 (code)
msgid "$users = DB::table('users')->orderBy('id')->cursorPaginate(15);\n"
msgstr ""

#: docs/8.x/pagination.md:block 44 (paragraph)
msgid "Once you have retrieved a cursor paginator instance, you may [display the pagination results](#displaying-pagination-results) as you typically would when using the `paginate` and `simplePaginate` methods. For more information on the instance methods offered by the cursor paginator, please consult the [cursor paginator instance method documentation](#cursor-paginator-instance-methods)."
msgstr ""

#: docs/8.x/pagination.md:block 45 (quote)
msgid "{note} Your query must contain an \"order by\" clause in order to take advantage of cursor pagination."
msgstr ""

#: docs/8.x/pagination.md:block 46 (paragraph)
msgid "<a name=\"cursor-vs-offset-pagination\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 47 (header)
msgid "Cursor vs. Offset Pagination"
msgstr ""

#: docs/8.x/pagination.md:block 48 (paragraph)
msgid "To illustrate the differences between offset pagination and cursor pagination, let's examine some example SQL queries. Both of the following queries will both display the \"second page\" of results for a `users` table ordered by `id`:"
msgstr ""

#: docs/8.x/pagination.md:block 49 (code)
msgid ""
"# Offset Pagination...\n"
"select * from users order by id asc limit 15 offset 15;\n"
"\n"
"# Cursor Pagination...\n"
"select * from users where id > 15 order by id asc limit 15;\n"
msgstr ""

#: docs/8.x/pagination.md:block 50 (paragraph)
msgid "The cursor pagination query offers the following advantages over offset pagination:"
msgstr ""

#: docs/8.x/pagination.md:block 51 (unordered list)
msgid "For large data-sets, cursor pagination will offer better performance if the \"order by\" columns are indexed. This is because the \"offset\" clause scans through all previously matched data."
msgstr ""

#: docs/8.x/pagination.md:block 51 (unordered list)
msgid "For data-sets with frequent writes, offset pagination may skip records or show duplicates if results have been recently added to or deleted from the page a user is currently viewing."
msgstr ""

#: docs/8.x/pagination.md:block 52 (paragraph)
msgid "However, cursor pagination has the following limitations:"
msgstr ""

#: docs/8.x/pagination.md:block 53 (unordered list)
msgid "Like `simplePaginate`, cursor pagination can only be used to display \"Next\" and \"Previous\" links and does not support generating links with page numbers."
msgstr ""

#: docs/8.x/pagination.md:block 53 (unordered list)
msgid "It requires that the ordering is based on at least one unique column or a combination of columns that are unique. Columns with `null` values are not supported."
msgstr ""

#: docs/8.x/pagination.md:block 53 (unordered list)
msgid "Query expressions in \"order by\" clauses are supported only if they are aliased and added to the \"select\" clause as well."
msgstr ""

#: docs/8.x/pagination.md:block 54 (paragraph)
msgid "<a name=\"manually-creating-a-paginator\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 55 (header)
msgid "Manually Creating A Paginator"
msgstr ""

#: docs/8.x/pagination.md:block 56 (paragraph)
msgid "Sometimes you may wish to create a pagination instance manually, passing it an array of items that you already have in memory. You may do so by creating either an `Illuminate\\Pagination\\Paginator`, `Illuminate\\Pagination\\LengthAwarePaginator` or `Illuminate\\Pagination\\CursorPaginator` instance, depending on your needs."
msgstr ""

#: docs/8.x/pagination.md:block 57 (paragraph)
msgid "The `Paginator` and `CursorPaginator` classes do not need to know the total number of items in the result set; however, because of this, these classes do not have methods for retrieving the index of the last page. The `LengthAwarePaginator` accepts almost the same arguments as the `Paginator`; however, it requires a count of the total number of items in the result set."
msgstr ""

#: docs/8.x/pagination.md:block 58 (paragraph)
msgid "In other words, the `Paginator` corresponds to the `simplePaginate` method on the query builder, the `CursorPaginator` corresponds to the `cursorPaginate` method, and the `LengthAwarePaginator` corresponds to the `paginate` method."
msgstr ""

#: docs/8.x/pagination.md:block 59 (quote)
msgid "{note} When manually creating a paginator instance, you should manually \"slice\" the array of results you pass to the paginator. If you're unsure how to do this, check out the [array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP function."
msgstr ""

#: docs/8.x/pagination.md:block 60 (paragraph)
msgid "<a name=\"customizing-pagination-urls\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 61 (header)
msgid "Customizing Pagination URLs"
msgstr ""

#: docs/8.x/pagination.md:block 62 (paragraph)
msgid "By default, links generated by the paginator will match the current request's URI. However, the paginator's `withPath` method allows you to customize the URI used by the paginator when generating links. For example, if you want the paginator to generate links like `http://example.com/admin/users?page=N`, you should pass `/admin/users` to the `withPath` method:"
msgstr ""

#: docs/8.x/pagination.md:block 63 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n"
"\n"
"    $users->withPath('/admin/users');\n"
"\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/pagination.md:block 64 (paragraph)
msgid "<a name=\"appending-query-string-values\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 65 (header)
msgid "Appending Query String Values"
msgstr ""

#: docs/8.x/pagination.md:block 66 (paragraph)
msgid "You may append to the query string of pagination links using the `appends` method. For example, to append `sort=votes` to each pagination link, you should make the following call to `appends`:"
msgstr ""

#: docs/8.x/pagination.md:block 67 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n"
"\n"
"    $users->appends(['sort' => 'votes']);\n"
"\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/pagination.md:block 68 (paragraph)
msgid "You may use the `withQueryString` method if you would like to append all of the current request's query string values to the pagination links:"
msgstr ""

#: docs/8.x/pagination.md:block 69 (code)
msgid "$users = User::paginate(15)->withQueryString();\n"
msgstr ""

#: docs/8.x/pagination.md:block 70 (paragraph)
msgid "<a name=\"appending-hash-fragments\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 71 (header)
msgid "Appending Hash Fragments"
msgstr ""

#: docs/8.x/pagination.md:block 72 (paragraph)
msgid "If you need to append a \"hash fragment\" to URLs generated by the paginator, you may use the `fragment` method. For example, to append `#users` to the end of each pagination link, you should invoke the `fragment` method like so:"
msgstr ""

#: docs/8.x/pagination.md:block 73 (code)
msgid "$users = User::paginate(15)->fragment('users');\n"
msgstr ""

#: docs/8.x/pagination.md:block 74 (paragraph)
msgid "<a name=\"displaying-pagination-results\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 75 (header)
msgid "Displaying Pagination Results"
msgstr ""

#: docs/8.x/pagination.md:block 76 (paragraph)
msgid "When calling the `paginate` method, you will receive an instance of `Illuminate\\Pagination\\LengthAwarePaginator`, while calling the `simplePaginate` method returns an instance of `Illuminate\\Pagination\\Paginator`. And, finally, calling the `cursorPaginate` method returns an instance of `Illuminate\\Pagination\\CursorPaginator`."
msgstr ""

#: docs/8.x/pagination.md:block 77 (paragraph)
msgid "These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array. So, once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade):"
msgstr ""

#: docs/8.x/pagination.md:block 78 (code)
msgid ""
"<div class=\"container\">\n"
"    @foreach ($users as $user)\n"
"        {{ $user->name }}\n"
"    @endforeach\n"
"</div>\n"
"\n"
"{{ $users->links() }}\n"
msgstr ""

#: docs/8.x/pagination.md:block 79 (paragraph)
msgid "The `links` method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper `page` query string variable. Remember, the HTML generated by the `links` method is compatible with the [Tailwind CSS framework](https://tailwindcss.com)."
msgstr ""

#: docs/8.x/pagination.md:block 80 (paragraph)
msgid "<a name=\"adjusting-the-pagination-link-window\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 81 (header)
msgid "Adjusting The Pagination Link Window"
msgstr ""

#: docs/8.x/pagination.md:block 82 (paragraph)
msgid "When the paginator displays pagination links, the current page number is displayed as well as links for the three pages before and after the current page. Using the `onEachSide` method, you may control how many additional links are displayed on each side of the current page within the middle, sliding window of links generated by the paginator:"
msgstr ""

#: docs/8.x/pagination.md:block 83 (code)
msgid "{{ $users->onEachSide(5)->links() }}\n"
msgstr ""

#: docs/8.x/pagination.md:block 84 (paragraph)
msgid "<a name=\"converting-results-to-json\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 85 (header)
msgid "Converting Results To JSON"
msgstr ""

#: docs/8.x/pagination.md:block 86 (paragraph)
msgid "The Laravel paginator classes implement the `Illuminate\\Contracts\\Support\\Jsonable` Interface contract and expose the `toJson` method, so it's very easy to convert your pagination results to JSON. You may also convert a paginator instance to JSON by returning it from a route or controller action:"
msgstr ""

#: docs/8.x/pagination.md:block 87 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users', function () {\n"
"    return User::paginate();\n"
"});\n"
msgstr ""

#: docs/8.x/pagination.md:block 88 (paragraph)
msgid "The JSON from the paginator will include meta information such as `total`, `current_page`, `last_page`, and more. The result records are available via the `data` key in the JSON array. Here is an example of the JSON created by returning a paginator instance from a route:"
msgstr ""

#: docs/8.x/pagination.md:block 89 (code)
msgid ""
"{\n"
"   \"total\": 50,\n"
"   \"per_page\": 15,\n"
"   \"current_page\": 1,\n"
"   \"last_page\": 4,\n"
"   \"first_page_url\": \"http://laravel.app?page=1\",\n"
"   \"last_page_url\": \"http://laravel.app?page=4\",\n"
"   \"next_page_url\": \"http://laravel.app?page=2\",\n"
"   \"prev_page_url\": null,\n"
"   \"path\": \"http://laravel.app\",\n"
"   \"from\": 1,\n"
"   \"to\": 15,\n"
"   \"data\":[\n"
"        {\n"
"            // Record...\n"
"        },\n"
"        {\n"
"            // Record...\n"
"        }\n"
"   ]\n"
"}\n"
msgstr ""

#: docs/8.x/pagination.md:block 90 (paragraph)
msgid "<a name=\"customizing-the-pagination-view\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 91 (header)
msgid "Customizing The Pagination View"
msgstr ""

#: docs/8.x/pagination.md:block 92 (paragraph)
msgid "By default, the views rendered to display the pagination links are compatible with the [Tailwind CSS](https://tailwindcss.com) framework. However, if you are not using Tailwind, you are free to define your own views to render these links. When calling the `links` method on a paginator instance, you may pass the view name as the first argument to the method:"
msgstr ""

#: docs/8.x/pagination.md:block 93 (code)
msgid ""
"{{ $paginator->links('view.name') }}\n"
"\n"
"// Passing additional data to the view...\n"
"{{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"
msgstr ""

#: docs/8.x/pagination.md:block 94 (paragraph)
msgid "However, the easiest way to customize the pagination views is by exporting them to your `resources/views/vendor` directory using the `vendor:publish` command:"
msgstr ""

#: docs/8.x/pagination.md:block 95 (code)
msgid "php artisan vendor:publish --tag=laravel-pagination\n"
msgstr ""

#: docs/8.x/pagination.md:block 96 (paragraph)
msgid "This command will place the views in your application's `resources/views/vendor/pagination` directory. The `tailwind.blade.php` file within this directory corresponds to the default pagination view. You may edit this file to modify the pagination HTML."
msgstr ""

#: docs/8.x/pagination.md:block 97 (paragraph)
msgid "If you would like to designate a different file as the default pagination view, you may invoke the paginator's `defaultView` and `defaultSimpleView` methods within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/8.x/pagination.md:block 98 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::defaultView('view-name');\n"
"\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/pagination.md:block 99 (paragraph)
msgid "<a name=\"using-bootstrap\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 100 (header)
msgid "Using Bootstrap"
msgstr ""

#: docs/8.x/pagination.md:block 101 (paragraph)
msgid "Laravel includes pagination views built using [Bootstrap CSS](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrap` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/8.x/pagination.md:block 102 (code)
msgid ""
"use Illuminate\\Pagination\\Paginator;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrap();\n"
"}\n"
msgstr ""

#: docs/8.x/pagination.md:block 103 (paragraph)
msgid "<a name=\"paginator-instance-methods\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 104 (header)
msgid "Paginator / LengthAwarePaginator Instance Methods"
msgstr ""

#: docs/8.x/pagination.md:block 105 (paragraph)
msgid "Each paginator instance provides additional pagination information via the following methods:"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Method"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Description"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->count()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the number of items for the current page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->currentPage()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the current page number."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->firstItem()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the result number of the first item in the results."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->getOptions()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the paginator options."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->getUrlRange($start, $end)`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Create a range of pagination URLs."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->hasPages()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Determine if there are enough items to split into multiple pages."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->hasMorePages()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Determine if there are more items in the data store."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->items()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the items for the current page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->lastItem()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the result number of the last item in the results."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->lastPage()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the page number of the last available page. (Not available when using `simplePaginate`)."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->nextPageUrl()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the URL for the next page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->onFirstPage()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Determine if the paginator is on the first page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->perPage()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "The number of items to be shown per page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->previousPageUrl()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the URL for the previous page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->total()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Determine the total number of matching items in the data store. (Not available when using `simplePaginate`)."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->url($page)`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the URL for a given page number."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->getPageName()`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Get the query string variable used to store the page."
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "`$paginator->setPageName($name)`"
msgstr ""

#: docs/8.x/pagination.md:block 106 (table)
msgid "Set the query string variable used to store the page."
msgstr ""

#: docs/8.x/pagination.md:block 107 (paragraph)
msgid "<a name=\"cursor-paginator-instance-methods\"></a>"
msgstr ""

#: docs/8.x/pagination.md:block 108 (header)
msgid "Cursor Paginator Instance Methods"
msgstr ""

#: docs/8.x/pagination.md:block 109 (paragraph)
msgid "Each cursor paginator instance provides additional pagination information via the following methods:"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "`$paginator->cursor()`"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "Get the current cursor instance."
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "`$paginator->getCursorName()`"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "Get the query string variable used to store the cursor."
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "`$paginator->nextCursor()`"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "Get the cursor instance for the next set of items."
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "`$paginator->previousCursor()`"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "Get the cursor instance for the previous set of items."
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "`$paginator->setCursorName()`"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "Set the query string variable used to store the cursor."
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "`$paginator->url($cursor)`"
msgstr ""

#: docs/8.x/pagination.md:block 110 (table)
msgid "Get the URL for a given cursor instance."
msgstr ""

#: docs/9.x/pagination.md:block 93 (code)
msgid ""
"{{ $paginator->links('view.name') }}\n"
"\n"
"<!-- Passing additional data to the view... -->\n"
"{{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"
msgstr ""

#: docs/9.x/pagination.md:block 98 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::defaultView('view-name');\n"
"\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/pagination.md:block 101 (paragraph)
msgid "Laravel includes pagination views built using [Bootstrap CSS](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrapFour` or `useBootstrapFive` methods within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/9.x/pagination.md:block 102 (code)
msgid ""
"use Illuminate\\Pagination\\Paginator;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"    Paginator::useBootstrapFour();\n"
"}\n"
msgstr ""
