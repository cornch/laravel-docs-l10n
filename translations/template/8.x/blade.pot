# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-12 16:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/blade.md:1
#, no-wrap
msgid "Blade Templates"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:39
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:39
#, no-wrap
msgid ""
"- [Displaying Data](#displaying-data)\n"
"    - [HTML Entity Encoding](#html-entity-encoding)\n"
"    - [Blade & JavaScript Frameworks](#blade-and-javascript-frameworks)\n"
"- [Blade Directives](#blade-directives)\n"
"    - [If Statements](#if-statements)\n"
"    - [Switch Statements](#switch-statements)\n"
"    - [Loops](#loops)\n"
"    - [The Loop Variable](#the-loop-variable)\n"
"    - [Conditional Classes](#conditional-classes)\n"
"    - [Including Subviews](#including-subviews)\n"
"    - [The `@once` Directive](#the-once-directive)\n"
"    - [Raw PHP](#raw-php)\n"
"    - [Comments](#comments)\n"
"- [Components](#components)\n"
"    - [Rendering Components](#rendering-components)\n"
"    - [Passing Data To Components](#passing-data-to-components)\n"
"    - [Component Attributes](#component-attributes)\n"
"    - [Reserved Keywords](#reserved-keywords)\n"
"    - [Slots](#slots)\n"
"    - [Inline Component Views](#inline-component-views)\n"
"    - [Anonymous Components](#anonymous-components)\n"
"    - [Dynamic Components](#dynamic-components)\n"
"    - [Manually Registering Components](#manually-registering-components)\n"
"- [Building Layouts](#building-layouts)\n"
"    - [Layouts Using Components](#layouts-using-components)\n"
"    - [Layouts Using Template "
"Inheritance](#layouts-using-template-inheritance)\n"
"- [Forms](#forms)\n"
"    - [CSRF Field](#csrf-field)\n"
"    - [Method Field](#method-field)\n"
"    - [Validation Errors](#validation-errors)\n"
"- [Stacks](#stacks)\n"
"- [Service Injection](#service-injection)\n"
"- [Extending Blade](#extending-blade)\n"
"    - [Custom Echo Handlers](#custom-echo-handlers)\n"
"    - [Custom If Statements](#custom-if-statements)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:41
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:41
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:44
msgid ""
"Blade is the simple, yet powerful templating engine that is included with "
"Laravel. Unlike some PHP templating engines, Blade does not restrict you "
"from using plain PHP code in your templates. In fact, all Blade templates "
"are compiled into plain PHP code and cached until they are modified, meaning "
"Blade adds essentially zero overhead to your application. Blade template "
"files use the `.blade.php` file extension and are typically stored in the "
"`resources/views` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:46
msgid ""
"Blade views may be returned from routes or controller using the global "
"`view` helper. Of course, as mentioned in the documentation on "
"[views](/docs/{{version}}/views), data may be passed to the Blade view using "
"the `view` helper's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:50
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'Finn']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:52
#, no-wrap
msgid ""
"> {tip} Before digging deeper into Blade, make sure to read the Laravel "
"[view documentation](/docs/{{version}}/views).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:54
#, no-wrap
msgid "<a name=\"displaying-data\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:54
#, no-wrap
msgid "Displaying Data"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:57
msgid ""
"You may display data that is passed to your Blade views by wrapping the "
"variable in curly braces. For example, given the following route:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:61
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        return view('welcome', ['name' => 'Samantha']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:63
msgid "You may display the contents of the `name` variable like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:65
#, no-wrap
msgid "    Hello, {{ $name }}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:67
#, no-wrap
msgid ""
"> {tip} Blade's `{{ }}` echo statements are automatically sent through PHP's "
"`htmlspecialchars` function to prevent XSS attacks.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:69
msgid ""
"You are not limited to displaying the contents of the variables passed to "
"the view. You may also echo the results of any PHP function. In fact, you "
"can put any PHP code you wish inside of a Blade echo statement:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:71
#, no-wrap
msgid "    The current UNIX timestamp is {{ time() }}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:73
#, no-wrap
msgid "<a name=\"rendering-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:73
#, no-wrap
msgid "Rendering JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:76
msgid ""
"Sometimes you may pass an array to your view with the intention of rendering "
"it as JSON in order to initialize a JavaScript variable. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:80
#, no-wrap
msgid ""
"    <script>\n"
"        var app = <?php echo json_encode($array); ?>;\n"
"    </script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:82
msgid ""
"However, instead of manually calling `json_encode`, you may use the `@json` "
"Blade directive. The `@json` directive accepts the same arguments as PHP's "
"`json_encode` function. By default, the `@json` directive calls the "
"`json_encode` function with the `JSON_HEX_TAG`, `JSON_HEX_APOS`, "
"`JSON_HEX_AMP`, and `JSON_HEX_QUOT` flags:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:85
#, no-wrap
msgid ""
"    <script>\n"
"        var app = @json($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:88
#, no-wrap
msgid ""
"        var app = @json($array, JSON_PRETTY_PRINT);\n"
"    </script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:90
#, no-wrap
msgid ""
"> {note} You should only use the `@json` directive to render existing "
"variables as JSON. The Blade templating is based on regular expressions and "
"attempts to pass a complex expression to the directive may cause unexpected "
"failures.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:92
#, no-wrap
msgid "<a name=\"html-entity-encoding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:92
#, no-wrap
msgid "HTML Entity Encoding"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:95
msgid ""
"By default, Blade (and the Laravel `e` helper) will double encode HTML "
"entities. If you would like to disable double encoding, call the "
"`Blade::withoutDoubleEncoding` method from the `boot` method of your "
"`AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:97 docs/8.x/blade.md:547 docs/8.x/blade.md:710 docs/8.x/blade.md:1325
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:99 docs/8.x/blade.md:1327
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:102 docs/8.x/blade.md:1330
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Blade;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:115
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Blade::withoutDoubleEncoding();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:117
#, no-wrap
msgid "<a name=\"displaying-unescaped-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:117
#, no-wrap
msgid "Displaying Unescaped Data"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:120
msgid ""
"By default, Blade `{{ }}` statements are automatically sent through PHP's "
"`htmlspecialchars` function to prevent XSS attacks. If you do not want your "
"data to be escaped, you may use the following syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:122
#, no-wrap
msgid "    Hello, {!! $name !!}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:124
#, no-wrap
msgid ""
"> {note} Be very careful when echoing content that is supplied by users of "
"your application. You should typically use the escaped, double curly brace "
"syntax to prevent XSS attacks when displaying user supplied data.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:126
#, no-wrap
msgid "<a name=\"blade-and-javascript-frameworks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:126
#, no-wrap
msgid "Blade & JavaScript Frameworks"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:129
msgid ""
"Since many JavaScript frameworks also use \"curly\" braces to indicate a "
"given expression should be displayed in the browser, you may use the `@` "
"symbol to inform the Blade rendering engine an expression should remain "
"untouched. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:131
#, no-wrap
msgid "    <h1>Laravel</h1>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:133
#, no-wrap
msgid "    Hello, @{{ name }}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:135
msgid ""
"In this example, the `@` symbol will be removed by Blade; however, `{{ name "
"}}` expression will remain untouched by the Blade engine, allowing it to be "
"rendered by your JavaScript framework."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:137
msgid "The `@` symbol may also be used to escape Blade directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:140
#, no-wrap
msgid ""
"    {{-- Blade template --}}\n"
"    @@json()\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:143
#, no-wrap
msgid ""
"    <!-- HTML output -->\n"
"    @json()\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:145
#, no-wrap
msgid "<a name=\"the-at-verbatim-directive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:145
#, no-wrap
msgid "The `@verbatim` Directive"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:148
msgid ""
"If you are displaying JavaScript variables in a large portion of your "
"template, you may wrap the HTML in the `@verbatim` directive so that you do "
"not have to prefix each Blade echo statement with an `@` symbol:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:154
#, no-wrap
msgid ""
"    @verbatim\n"
"        <div class=\"container\">\n"
"            Hello, {{ name }}.\n"
"        </div>\n"
"    @endverbatim\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:156
#, no-wrap
msgid "<a name=\"blade-directives\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:156
#, no-wrap
msgid "Blade Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:159
msgid ""
"In addition to template inheritance and displaying data, Blade also provides "
"convenient shortcuts for common PHP control structures, such as conditional "
"statements and loops. These shortcuts provide a very clean, terse way of "
"working with PHP control structures while also remaining familiar to their "
"PHP counterparts."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:161
#, no-wrap
msgid "<a name=\"if-statements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:161
#, no-wrap
msgid "If Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:164
msgid ""
"You may construct `if` statements using the `@if`, `@elseif`, `@else`, and "
"`@endif` directives. These directives function identically to their PHP "
"counterparts:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:172
#, no-wrap
msgid ""
"    @if (count($records) === 1)\n"
"        I have one record!\n"
"    @elseif (count($records) > 1)\n"
"        I have multiple records!\n"
"    @else\n"
"        I don't have any records!\n"
"    @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:174
msgid "For convenience, Blade also provides an `@unless` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:178
#, no-wrap
msgid ""
"    @unless (Auth::check())\n"
"        You are not signed in.\n"
"    @endunless\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:180
msgid ""
"In addition to the conditional directives already discussed, the `@isset` "
"and `@empty` directives may be used as convenient shortcuts for their "
"respective PHP functions:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:184
#, no-wrap
msgid ""
"    @isset($records)\n"
"        // $records is defined and is not null...\n"
"    @endisset\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:188
#, no-wrap
msgid ""
"    @empty($records)\n"
"        // $records is \"empty\"...\n"
"    @endempty\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:190
#, no-wrap
msgid "<a name=\"authentication-directives\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:190
#, no-wrap
msgid "Authentication Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:193
msgid ""
"The `@auth` and `@guest` directives may be used to quickly determine if the "
"current user is [authenticated](/docs/{{version}}/authentication) or is a "
"guest:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:197
#, no-wrap
msgid ""
"    @auth\n"
"        // The user is authenticated...\n"
"    @endauth\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:201
#, no-wrap
msgid ""
"    @guest\n"
"        // The user is not authenticated...\n"
"    @endguest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:203
msgid ""
"If needed, you may specify the authentication guard that should be checked "
"when using the `@auth` and `@guest` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:207
#, no-wrap
msgid ""
"    @auth('admin')\n"
"        // The user is authenticated...\n"
"    @endauth\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:211
#, no-wrap
msgid ""
"    @guest('admin')\n"
"        // The user is not authenticated...\n"
"    @endguest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:213
#, no-wrap
msgid "<a name=\"environment-directives\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:213
#, no-wrap
msgid "Environment Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:216
msgid ""
"You may check if the application is running in the production environment "
"using the `@production` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:220
#, no-wrap
msgid ""
"    @production\n"
"        // Production specific content...\n"
"    @endproduction\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:222
msgid ""
"Or, you may determine if the application is running in a specific "
"environment using the `@env` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:226
#, no-wrap
msgid ""
"    @env('staging')\n"
"        // The application is running in \"staging\"...\n"
"    @endenv\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:230
#, no-wrap
msgid ""
"    @env(['staging', 'production'])\n"
"        // The application is running in \"staging\" or \"production\"...\n"
"    @endenv\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:232
#, no-wrap
msgid "<a name=\"section-directives\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:232
#, no-wrap
msgid "Section Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:235
msgid ""
"You may determine if a template inheritance section has content using the "
"`@hasSection` directive:"
msgstr ""

#. type: Code fence info string
#: docs/8.x/blade.md:236 docs/8.x/blade.md:248 docs/8.x/blade.md:391 docs/8.x/blade.md:594 docs/8.x/blade.md:762 docs/8.x/blade.md:861 docs/8.x/blade.md:871 docs/8.x/blade.md:879 docs/8.x/blade.md:891 docs/8.x/blade.md:906 docs/8.x/blade.md:921 docs/8.x/blade.md:1081 docs/8.x/blade.md:1101 docs/8.x/blade.md:1113 docs/8.x/blade.md:1145 docs/8.x/blade.md:1173 docs/8.x/blade.md:1207 docs/8.x/blade.md:1220 docs/8.x/blade.md:1233 docs/8.x/blade.md:1247 docs/8.x/blade.md:1257 docs/8.x/blade.md:1274 docs/8.x/blade.md:1282 docs/8.x/blade.md:1292 docs/8.x/blade.md:1309 docs/8.x/blade.md:1386 docs/8.x/blade.md:1411
#, no-wrap
msgid "html"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:236
#, no-wrap
msgid ""
"@hasSection('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @yield('navigation')\n"
"    </div>\n"
"\n"
"    <div class=\"clearfix\"></div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:247
msgid ""
"You may use the `sectionMissing` directive to determine if a section does "
"not have content:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:248
#, no-wrap
msgid ""
"@sectionMissing('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @include('default-navigation')\n"
"    </div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:257
#, no-wrap
msgid "<a name=\"switch-statements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:257
#, no-wrap
msgid "Switch Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:260
msgid ""
"Switch statements can be constructed using the `@switch`, `@case`, `@break`, "
"`@default` and `@endswitch` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:265
#, no-wrap
msgid ""
"    @switch($i)\n"
"        @case(1)\n"
"            First case...\n"
"            @break\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:269
#, no-wrap
msgid ""
"        @case(2)\n"
"            Second case...\n"
"            @break\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:273
#, no-wrap
msgid ""
"        @default\n"
"            Default case...\n"
"    @endswitch\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:275
#, no-wrap
msgid "<a name=\"loops\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:275
#, no-wrap
msgid "Loops"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:278
msgid ""
"In addition to conditional statements, Blade provides simple directives for "
"working with PHP's loop structures. Again, each of these directives "
"functions identically to their PHP counterparts:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:282
#, no-wrap
msgid ""
"    @for ($i = 0; $i < 10; $i++)\n"
"        The current value is {{ $i }}\n"
"    @endfor\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:286
#, no-wrap
msgid ""
"    @foreach ($users as $user)\n"
"        <p>This is user {{ $user->id }}</p>\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:292
#, no-wrap
msgid ""
"    @forelse ($users as $user)\n"
"        <li>{{ $user->name }}</li>\n"
"    @empty\n"
"        <p>No users</p>\n"
"    @endforelse\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:296
#, no-wrap
msgid ""
"    @while (true)\n"
"        <p>I'm looping forever.</p>\n"
"    @endwhile\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:298
#, no-wrap
msgid ""
"> {tip} When looping, you may use the [loop variable](#the-loop-variable) to "
"gain valuable information about the loop, such as whether you are in the "
"first or last iteration through the loop.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:300
msgid ""
"When using loops you may also end the loop or skip the current iteration "
"using the `@continue` and `@break` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:305
#, no-wrap
msgid ""
"    @foreach ($users as $user)\n"
"        @if ($user->type == 1)\n"
"            @continue\n"
"        @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:307 docs/8.x/blade.md:319
#, no-wrap
msgid "        <li>{{ $user->name }}</li>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:312
#, no-wrap
msgid ""
"        @if ($user->number == 5)\n"
"            @break\n"
"        @endif\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:314
msgid ""
"You may also include the continuation or break condition within the "
"directive declaration:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:317
#, no-wrap
msgid ""
"    @foreach ($users as $user)\n"
"        @continue($user->type == 1)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:322
#, no-wrap
msgid ""
"        @break($user->number == 5)\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:324
#, no-wrap
msgid "<a name=\"the-loop-variable\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:324
#, no-wrap
msgid "The Loop Variable"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:327
msgid ""
"When looping, a `$loop` variable will be available inside of your loop. This "
"variable provides access to some useful bits of information such as the "
"current loop index and whether this is the first or last iteration through "
"the loop:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:332
#, no-wrap
msgid ""
"    @foreach ($users as $user)\n"
"        @if ($loop->first)\n"
"            This is the first iteration.\n"
"        @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:336
#, no-wrap
msgid ""
"        @if ($loop->last)\n"
"            This is the last iteration.\n"
"        @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:339
#, no-wrap
msgid ""
"        <p>This is user {{ $user->id }}</p>\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:341
msgid ""
"If you are in a nested loop, you may access the parent loop's `$loop` "
"variable via the `parent` property:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:349
#, no-wrap
msgid ""
"    @foreach ($users as $user)\n"
"        @foreach ($user->posts as $post)\n"
"            @if ($loop->parent->first)\n"
"                This is the first iteration of the parent loop.\n"
"            @endif\n"
"        @endforeach\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:351
msgid "The `$loop` variable also contains a variety of other useful properties:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:364
#, no-wrap
msgid ""
"Property  | Description\n"
"------------- | -------------\n"
"`$loop->index`  |  The index of the current loop iteration (starts at 0).\n"
"`$loop->iteration`  |  The current loop iteration (starts at 1).\n"
"`$loop->remaining`  |  The iterations remaining in the loop.\n"
"`$loop->count`  |  The total number of items in the array being iterated.\n"
"`$loop->first`  |  Whether this is the first iteration through the loop.\n"
"`$loop->last`  |  Whether this is the last iteration through the loop.\n"
"`$loop->even`  |  Whether this is an even iteration through the loop.\n"
"`$loop->odd`  |  Whether this is an odd iteration through the loop.\n"
"`$loop->depth`  |  The nesting level of the current loop.\n"
"`$loop->parent`  |  When in a nested loop, the parent's loop variable.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:366
#, no-wrap
msgid "<a name=\"conditional-classes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:366
#, no-wrap
msgid "Conditional Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:369
msgid ""
"The `@class` directive conditionally compiles a CSS class string. The "
"directive accepts an array of classes where the array key contains the class "
"or classes you wish to add, while the value is a boolean expression. If the "
"array element has a numeric key, it will always be included in the rendered "
"class list:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:374
#, no-wrap
msgid ""
"    @php\n"
"        $isActive = false;\n"
"        $hasError = true;\n"
"    @endphp\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:381
#, no-wrap
msgid ""
"    <span @class([\n"
"        'p-4',\n"
"        'font-bold' => $isActive,\n"
"        'text-gray-500' => ! $isActive,\n"
"        'bg-red' => $hasError,\n"
"    ])></span>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:383
#, no-wrap
msgid "    <span class=\"p-4 text-gray-500 bg-red\"></span>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:385
#, no-wrap
msgid "<a name=\"including-subviews\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:385
#, no-wrap
msgid "Including Subviews"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:388
#, no-wrap
msgid ""
"> {tip} While you're free to use the `@include` directive, Blade "
"[components](#components) provide similar functionality and offer several "
"benefits over the `@include` directive such as data and attribute binding.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:390
msgid ""
"Blade's `@include` directive allows you to include a Blade view from within "
"another view. All variables that are available to the parent view will be "
"made available to the included view:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:391
#, no-wrap
msgid ""
"<div>\n"
"    @include('shared.errors')\n"
"\n"
"    <form>\n"
"        <!-- Form Contents -->\n"
"    </form>\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:402
msgid ""
"Even though the included view will inherit all data available in the parent "
"view, you may also pass an array of additional data that should be made "
"available to the included view:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:404
#, no-wrap
msgid "    @include('view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:406
msgid ""
"If you attempt to `@include` a view which does not exist, Laravel will throw "
"an error. If you would like to include a view that may or may not be "
"present, you should use the `@includeIf` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:408
#, no-wrap
msgid "    @includeIf('view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:410
msgid ""
"If you would like to `@include` a view if a given boolean expression "
"evaluates to `true` or `false`, you may use the `@includeWhen` and "
"`@includeUnless` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:412
#, no-wrap
msgid "    @includeWhen($boolean, 'view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:414
#, no-wrap
msgid "    @includeUnless($boolean, 'view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:416
msgid ""
"To include the first view that exists from a given array of views, you may "
"use the `includeFirst` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:418
#, no-wrap
msgid "    @includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:420
#, no-wrap
msgid ""
"> {note} You should avoid using the `__DIR__` and `__FILE__` constants in "
"your Blade views, since they will refer to the location of the cached, "
"compiled view.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:422
#, no-wrap
msgid "<a name=\"rendering-views-for-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:422
#, no-wrap
msgid "Rendering Views For Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:425
msgid ""
"You may combine loops and includes into one line with Blade's `@each` "
"directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:427
#, no-wrap
msgid "    @each('view.name', $jobs, 'job')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:429
msgid ""
"The `@each` directive's first argument is the view to render for each "
"element in the array or collection. The second argument is the array or "
"collection you wish to iterate over, while the third argument is the "
"variable name that will be assigned to the current iteration within the "
"view. So, for example, if you are iterating over an array of `jobs`, "
"typically you will want to access each job as a `job` variable within the "
"view. The array key for the current iteration will be available as the `key` "
"variable within the view."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:431
msgid ""
"You may also pass a fourth argument to the `@each` directive. This argument "
"determines the view that will be rendered if the given array is empty."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:433
#, no-wrap
msgid "    @each('view.name', $jobs, 'job', 'view.empty')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:435
#, no-wrap
msgid ""
"> {note} Views rendered via `@each` do not inherit the variables from the "
"parent view. If the child view requires these variables, you should use the "
"`@foreach` and `@include` directives instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:437
#, no-wrap
msgid "<a name=\"the-once-directive\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:437
#, no-wrap
msgid "The `@once` Directive"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:440
msgid ""
"The `@once` directive allows you to define a portion of the template that "
"will only be evaluated once per rendering cycle. This may be useful for "
"pushing a given piece of JavaScript into the page's header using "
"[stacks](#stacks). For example, if you are rendering a given "
"[component](#components) within a loop, you may wish to only push the "
"JavaScript to the header the first time the component is rendered:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:448
#, no-wrap
msgid ""
"    @once\n"
"        @push('scripts')\n"
"            <script>\n"
"                // Your custom JavaScript...\n"
"            </script>\n"
"        @endpush\n"
"    @endonce\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:450
#, no-wrap
msgid "<a name=\"raw-php\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:450
#, no-wrap
msgid "Raw PHP"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:453
msgid ""
"In some situations, it's useful to embed PHP code into your views. You can "
"use the Blade `@php` directive to execute a block of plain PHP within your "
"template:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:457
#, no-wrap
msgid ""
"    @php\n"
"        $counter = 1;\n"
"    @endphp\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:459
#, no-wrap
msgid "<a name=\"comments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:459
#, no-wrap
msgid "Comments"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:462
msgid ""
"Blade also allows you to define comments in your views. However, unlike HTML "
"comments, Blade comments are not included in the HTML returned by your "
"application:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:464
#, no-wrap
msgid "    {{-- This comment will not be present in the rendered HTML --}}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:466
#, no-wrap
msgid "<a name=\"components\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:466
#, no-wrap
msgid "Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:469
msgid ""
"Components and slots provide similar benefits to sections, layouts, and "
"includes; however, some may find the mental model of components and slots "
"easier to understand. There are two approaches to writing components: class "
"based components and anonymous components."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:471
msgid ""
"To create a class based component, you may use the `make:component` Artisan "
"command. To illustrate how to use components, we will create a simple "
"`Alert` component. The `make:component` command will place the component in "
"the `App\\View\\Components` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:473
#, no-wrap
msgid "    php artisan make:component Alert\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:475
msgid ""
"The `make:component` command will also create a view template for the "
"component. The view will be placed in the `resources/views/components` "
"directory. When writing components for your own application, components are "
"automatically discovered within the `app/View/Components` directory and "
"`resources/views/components` directory, so no further component registration "
"is typically required."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:477
msgid "You may also create components within subdirectories:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:479
#, no-wrap
msgid "    php artisan make:component Forms/Input\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:481
msgid ""
"The command above will create an `Input` component in the "
"`App\\View\\Components\\Forms` directory and the view will be placed in the "
"`resources/views/components/forms` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:483
#, no-wrap
msgid "<a name=\"manually-registering-package-components\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:483
#, no-wrap
msgid "Manually Registering Package Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:486 docs/8.x/blade.md:1025
msgid ""
"When writing components for your own application, components are "
"automatically discovered within the `app/View/Components` directory and "
"`resources/views/components` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:488
msgid ""
"However, if you are building a package that utilizes Blade components, you "
"will need to manually register your component class and its HTML tag "
"alias. You should typically register your components in the `boot` method of "
"your package's service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:490 docs/8.x/blade.md:506 docs/8.x/blade.md:1050 docs/8.x/blade.md:1396
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Blade;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:498
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap your package's services.\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::component('package-alert', Alert::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:500 docs/8.x/blade.md:1042
msgid ""
"Once your component has been registered, it may be rendered using its tag "
"alias:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:502 docs/8.x/blade.md:1044
#, no-wrap
msgid "    <x-package-alert/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:504 docs/8.x/blade.md:1048
msgid ""
"Alternatively, you may use the `componentNamespace` method to autoload "
"component classes by convention. For example, a `Nightshade` package might "
"have `Calendar` and `ColorPicker` components that reside within the "
"`Package\\Views\\Components` namespace:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:516 docs/8.x/blade.md:1060
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap your package's services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::componentNamespace('Nightshade\\\\Views\\\\Components', "
"'nightshade');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:518 docs/8.x/blade.md:1062
msgid ""
"This will allow the usage of package components by their vendor namespace "
"using the `package-name::` syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:521 docs/8.x/blade.md:1065
#, no-wrap
msgid ""
"    <x-nightshade::calendar />\n"
"    <x-nightshade::color-picker />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:523 docs/8.x/blade.md:1067
msgid ""
"Blade will automatically detect the class that's linked to this component by "
"pascal-casing the component name. Subdirectories are also supported using "
"\"dot\" notation."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:525
#, no-wrap
msgid "<a name=\"rendering-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:525
#, no-wrap
msgid "Rendering Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:528
msgid ""
"To display a component, you may use a Blade component tag within one of your "
"Blade templates. Blade component tags start with the string `x-` followed by "
"the kebab case name of the component class:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:530 docs/8.x/blade.md:988
#, no-wrap
msgid "    <x-alert/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:532
#, no-wrap
msgid "    <x-user-profile/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:534
msgid ""
"If the component class is nested deeper within the `App\\View\\Components` "
"directory, you may use the `.` character to indicate directory nesting. For "
"example, if we assume a component is located at "
"`App\\View\\Components\\Inputs\\Button.php`, we may render it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:536 docs/8.x/blade.md:992
#, no-wrap
msgid "    <x-inputs.button/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:538
#, no-wrap
msgid "<a name=\"passing-data-to-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:538
#, no-wrap
msgid "Passing Data To Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:541
msgid ""
"You may pass data to Blade components using HTML attributes. Hard-coded, "
"primitive values may be passed to the component using simple HTML attribute "
"strings. PHP expressions and variables should be passed to the component via "
"attributes that use the `:` character as a prefix:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:543
#, no-wrap
msgid "    <x-alert type=\"error\" :message=\"$message\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:545
msgid ""
"You should define the component's required data in its class "
"constructor. All public properties on a component will automatically be made "
"available to the component's view. It is not necessary to pass the data to "
"the view from the component's `render` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:549 docs/8.x/blade.md:712
#, no-wrap
msgid "    namespace App\\View\\Components;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:551 docs/8.x/blade.md:714
#, no-wrap
msgid "    use Illuminate\\View\\Component;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:560 docs/8.x/blade.md:723
#, no-wrap
msgid ""
"    class Alert extends Component\n"
"    {\n"
"        /**\n"
"         * The alert type.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public $type;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:567
#, no-wrap
msgid ""
"        /**\n"
"         * The alert message.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public $message;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:580
#, no-wrap
msgid ""
"        /**\n"
"         * Create the component instance.\n"
"         *\n"
"         * @param  string  $type\n"
"         * @param  string  $message\n"
"         * @return void\n"
"         */\n"
"        public function __construct($type, $message)\n"
"        {\n"
"            $this->type = $type;\n"
"            $this->message = $message;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:591
#, no-wrap
msgid ""
"        /**\n"
"         * Get the view / contents that represent the component.\n"
"         *\n"
"         * @return \\Illuminate\\View\\View|\\Closure|string\n"
"         */\n"
"        public function render()\n"
"        {\n"
"            return view('components.alert');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:593
msgid ""
"When your component is rendered, you may display the contents of your "
"component's public variables by echoing the variables by name:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:594
#, no-wrap
msgid ""
"<div class=\"alert alert-{{ $type }}\">\n"
"    {{ $message }}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:601
#, no-wrap
msgid "<a name=\"casing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:601
#, no-wrap
msgid "Casing"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:604
msgid ""
"Component constructor arguments should be specified using `camelCase`, while "
"`kebab-case` should be used when referencing the argument names in your HTML "
"attributes. For example, given the following component constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:615
#, no-wrap
msgid ""
"    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  string  $alertType\n"
"     * @return void\n"
"     */\n"
"    public function __construct($alertType)\n"
"    {\n"
"        $this->alertType = $alertType;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:617
msgid "The `$alertType` argument may be provided to the component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:619
#, no-wrap
msgid "    <x-alert alert-type=\"danger\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:621
#, no-wrap
msgid "<a name=\"escaping-attribute-rendering\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:621
#, no-wrap
msgid "Escaping Attribute Rendering"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:624
msgid ""
"Since some JavaScript frameworks such as Alpine.js also use colon-prefixed "
"attributes, you may use a double colon (`::`) prefix to inform Blade that "
"the attribute is not a PHP expression. For example, given the following "
"component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:628
#, no-wrap
msgid ""
"    <x-button ::class=\"{ danger: isDeleting }\">\n"
"        Submit\n"
"    </x-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:630
msgid "The following HTML will be rendered by Blade:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:634
#, no-wrap
msgid ""
"    <button :class=\"{ danger: isDeleting }\">\n"
"        Submit\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:636
#, no-wrap
msgid "<a name=\"component-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:636
#, no-wrap
msgid "Component Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:639
msgid ""
"In addition to public variables being available to your component template, "
"any public methods on the component may be invoked. For example, imagine a "
"component that has an `isSelected` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:650
#, no-wrap
msgid ""
"    /**\n"
"     * Determine if the given option is the currently selected option.\n"
"     *\n"
"     * @param  string  $option\n"
"     * @return bool\n"
"     */\n"
"    public function isSelected($option)\n"
"    {\n"
"        return $option === $this->selected;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:652
msgid ""
"You may execute this method from your component template by invoking the "
"variable matching the name of the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:656
#, no-wrap
msgid ""
"    <option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} "
"value=\"{{ $value }}\">\n"
"        {{ $label }}\n"
"    </option>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:658
#, no-wrap
msgid "<a name=\"using-attributes-slots-within-component-class\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:658
#, no-wrap
msgid "Accessing Attributes & Slots Within Component Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:661
msgid ""
"Blade components also allow you to access the component name, attributes, "
"and slot inside the class's render method. However, in order to access this "
"data, you should return a closure from your component's `render` method. The "
"closure will receive a `$data` array as its only argument. This array will "
"contain several elements that provide information about the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:673
#, no-wrap
msgid ""
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return function (array $data) {\n"
"            // $data['componentName'];\n"
"            // $data['attributes'];\n"
"            // $data['slot'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:677
#, no-wrap
msgid ""
"            return '<div>Components content</div>';\n"
"        };\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:679
#, no-wrap
msgid ""
"The `componentName` is equal to the name used in the HTML tag after the `x-` "
"prefix. So `<x-alert />`'s `componentName` will be `alert`. The `attributes` "
"element will contain all of the attributes that were present on the HTML "
"tag. The `slot` element is an `Illuminate\\Support\\HtmlString` instance "
"with the contents of the component's slot.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:681
msgid ""
"The closure should return a string. If the returned string corresponds to an "
"existing view, that view will be rendered; otherwise, the returned string "
"will be evaluated as an inline Blade view."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:683
#, no-wrap
msgid "<a name=\"additional-dependencies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:683
#, no-wrap
msgid "Additional Dependencies"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:686
msgid ""
"If your component requires dependencies from Laravel's [service "
"container](/docs/{{version}}/container), you may list them before any of the "
"component's data attributes and they will automatically be injected by the "
"container:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:688
#, no-wrap
msgid "    use App\\Services\\AlertCreator\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:703
#, no-wrap
msgid ""
"    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  \\App\\Services\\AlertCreator  $creator\n"
"     * @param  string  $type\n"
"     * @param  string  $message\n"
"     * @return void\n"
"     */\n"
"    public function __construct(AlertCreator $creator, $type, $message)\n"
"    {\n"
"        $this->creator = $creator;\n"
"        $this->type = $type;\n"
"        $this->message = $message;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:705
#, no-wrap
msgid "<a name=\"hiding-attributes-and-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:705
#, no-wrap
msgid "Hiding Attributes / Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:708
msgid ""
"If you would like to prevent some public methods or properties from being "
"exposed as variables to your component template, you may add them to an "
"`$except` array property on your component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:731
#, no-wrap
msgid ""
"        /**\n"
"         * The properties / methods that should not be exposed to the "
"component template.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $except = ['type'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:733
#, no-wrap
msgid "<a name=\"component-attributes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:733
#, no-wrap
msgid "Component Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:736
msgid ""
"We've already examined how to pass data attributes to a component; however, "
"sometimes you may need to specify additional HTML attributes, such as "
"`class`, that are not part of the data required for a component to "
"function. Typically, you want to pass these additional attributes down to "
"the root element of the component template. For example, imagine we want to "
"render an `alert` component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:738
#, no-wrap
msgid "    <x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:740
msgid ""
"All of the attributes that are not part of the component's constructor will "
"automatically be added to the component's \"attribute bag\". This attribute "
"bag is automatically made available to the component via the `$attributes` "
"variable. All of the attributes may be rendered within the component by "
"echoing this variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:744
#, no-wrap
msgid ""
"    <div {{ $attributes }}>\n"
"        <!-- Component content -->\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:746
#, no-wrap
msgid ""
"> {note} Using directives such as `@env` within component tags is not "
"supported at this time. For example, `<x-alert "
":live=\"@env('production')\"/>` will not be compiled.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:748
#, no-wrap
msgid "<a name=\"default-merged-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:748
#, no-wrap
msgid "Default / Merged Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:751
msgid ""
"Sometimes you may need to specify default values for attributes or merge "
"additional values into some of the component's attributes. To accomplish "
"this, you may use the attribute bag's `merge` method. This method is "
"particularly useful for defining a set of default CSS classes that should "
"always be applied to a component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:755 docs/8.x/blade.md:1007
#, no-wrap
msgid ""
"    <div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"        {{ $message }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:757
msgid "If we assume this component is utilized like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:759 docs/8.x/blade.md:1011
#, no-wrap
msgid "    <x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:761
msgid "The final, rendered HTML of the component will appear like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:762
#, no-wrap
msgid ""
"<div class=\"alert alert-error mb-4\">\n"
"    <!-- Contents of the $message variable -->\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:769
#, no-wrap
msgid "<a name=\"conditionally-merge-classes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:769
#, no-wrap
msgid "Conditionally Merge Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:772
msgid ""
"Sometimes you may wish to merge classes if a given condition is `true`. You "
"can accomplish this via the `class` method, which accepts an array of "
"classes where the array key contains the class or classes you wish to add, "
"while the value is a boolean expression. If the array element has a numeric "
"key, it will always be included in the rendered class list:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:776
#, no-wrap
msgid ""
"    <div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n"
"        {{ $message }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:778
msgid ""
"If you need to merge other attributes onto your component, you can chain the "
"`merge` method onto the `class` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:782
#, no-wrap
msgid ""
"    <button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) "
"}}>\n"
"        {{ $slot }}\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:784
#, no-wrap
msgid ""
"> {tip} If you need to conditionally compile classes on other HTML elements "
"that shouldn't receive merged attributes, you can use the [`@class` "
"directive](#conditional-classes).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:786
#, no-wrap
msgid "<a name=\"non-class-attribute-merging\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:786
#, no-wrap
msgid "Non-Class Attribute Merging"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:789
msgid ""
"When merging attributes that are not `class` attributes, the values provided "
"to the `merge` method will be considered the \"default\" values of the "
"attribute. However, unlike the `class` attribute, these attributes will not "
"be merged with injected attribute values. Instead, they will be "
"overwritten. For example, a `button` component's implementation may look "
"like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:793
#, no-wrap
msgid ""
"    <button {{ $attributes->merge(['type' => 'button']) }}>\n"
"        {{ $slot }}\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:795
msgid ""
"To render the button component with a custom `type`, it may be specified "
"when consuming the component. If no type is specified, the `button` type "
"will be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:799
#, no-wrap
msgid ""
"    <x-button type=\"submit\">\n"
"        Submit\n"
"    </x-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:801
msgid "The rendered HTML of the `button` component in this example would be:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:805
#, no-wrap
msgid ""
"    <button type=\"submit\">\n"
"        Submit\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:807
msgid ""
"If you would like an attribute other than `class` to have its default value "
"and injected values joined together, you may use the `prepends` method. In "
"this example, the `data-controller` attribute will always begin with "
"`profile-controller` and any additional injected `data-controller` values "
"will be placed after this default value:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:811
#, no-wrap
msgid ""
"    <div {{ $attributes->merge(['data-controller' => "
"$attributes->prepends('profile-controller')]) }}>\n"
"        {{ $slot }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:813
#, no-wrap
msgid "<a name=\"filtering-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:813
#, no-wrap
msgid "Retrieving & Filtering Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:816
msgid ""
"You may filter attributes using the `filter` method. This method accepts a "
"closure which should return `true` if you wish to retain the attribute in "
"the attribute bag:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:818
#, no-wrap
msgid "    {{ $attributes->filter(fn ($value, $key) => $key == 'foo') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:820
msgid ""
"For convenience, you may use the `whereStartsWith` method to retrieve all "
"attributes whose keys begin with a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:822
#, no-wrap
msgid "    {{ $attributes->whereStartsWith('wire:model') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:824
msgid ""
"Conversely, the `whereDoesntStartWith` method may be used to exclude all "
"attributes whose keys begin with a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:826
#, no-wrap
msgid "    {{ $attributes->whereDoesntStartWith('wire:model') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:828
msgid ""
"Using the `first` method, you may render the first attribute in a given "
"attribute bag:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:830
#, no-wrap
msgid "    {{ $attributes->whereStartsWith('wire:model')->first() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:832
msgid ""
"If you would like to check if an attribute is present on the component, you "
"may use the `has` method. This method accepts the attribute name as its only "
"argument and returns a boolean indicating whether or not the attribute is "
"present:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:836
#, no-wrap
msgid ""
"    @if ($attributes->has('class'))\n"
"        <div>Class attribute is present</div>\n"
"    @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:838
msgid "You may retrieve a specific attribute's value using the `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:840
#, no-wrap
msgid "    {{ $attributes->get('class') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:842
#, no-wrap
msgid "<a name=\"reserved-keywords\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:842
#, no-wrap
msgid "Reserved Keywords"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:845
msgid ""
"By default, some keywords are reserved for Blade's internal use in order to "
"render components. The following keywords cannot be defined as public "
"properties or method names within your components:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:855
#, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- `data`\n"
"- `render`\n"
"- `resolveView`\n"
"- `shouldRender`\n"
"- `view`\n"
"- `withAttributes`\n"
"- `withName`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:857
#, no-wrap
msgid "<a name=\"slots\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:857
#, no-wrap
msgid "Slots"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:860
msgid ""
"You will often need to pass additional content to your component via "
"\"slots\". Component slots are rendered by echoing the `$slot` variable. To "
"explore this concept, let's imagine that an `alert` component has the "
"following markup:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:861
#, no-wrap
msgid ""
"<!-- /resources/views/components/alert.blade.php -->\n"
"\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:870
msgid "We may pass content to the `slot` by injecting content into the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:871
#, no-wrap
msgid ""
"<x-alert>\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:878
msgid ""
"Sometimes a component may need to render multiple different slots in "
"different locations within the component. Let's modify our alert component "
"to allow for the injection of a \"title\" slot:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:879
#, no-wrap
msgid ""
"<!-- /resources/views/components/alert.blade.php -->\n"
"\n"
"<span class=\"alert-title\">{{ $title }}</span>\n"
"\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:890
msgid ""
"You may define the content of the named slot using the `x-slot` tag. Any "
"content not within an explicit `x-slot` tag will be passed to the component "
"in the `$slot` variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:891
#, no-wrap
msgid ""
"<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:902
#, no-wrap
msgid "<a name=\"scoped-slots\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:902
#, no-wrap
msgid "Scoped Slots"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:905
msgid ""
"If you have used a JavaScript framework such as Vue, you may be familiar "
"with \"scoped slots\", which allow you to access data or methods from the "
"component within your slot. You may achieve similar behavior in Laravel by "
"defining public methods or properties on your component and accessing the "
"component within your slot via the `$component` variable. In this example, "
"we will assume that the `x-alert` component has a public `formatAlert` "
"method defined on its component class:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:906
#, no-wrap
msgid ""
"<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:917
#, no-wrap
msgid "<a name=\"slot-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:917
#, no-wrap
msgid "Slot Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:920
msgid ""
"Like Blade components, you may assign additional "
"[attributes](#component-attributes) to slots such as CSS class names:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:921
#, no-wrap
msgid ""
"<x-card class=\"shadow-sm\">\n"
"    <x-slot name=\"heading\" class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n"
"\n"
"    Content\n"
"\n"
"    <x-slot name=\"footer\" class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:936
msgid ""
"To interact with slot attributes, you may access the `attributes` property "
"of the slot's variable. For more information on how to interact with "
"attributes, please consult the documentation on [component "
"attributes](#component-attributes):"
msgstr ""

#. type: Code fence info string
#: docs/8.x/blade.md:937
#, no-wrap
msgid "php"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:937
#, no-wrap
msgid ""
"@props([\n"
"    'heading',\n"
"    'footer',\n"
"])\n"
"\n"
"<div {{ $attributes->class(['border']) }}>\n"
"    <h1 {{ $heading->attributes->class(['text-lg']) }}>\n"
"        {{ $heading }}\n"
"    </h1>\n"
"\n"
"    {{ $slot }}\n"
"\n"
"    <footer {{ $footer->attributes->class(['text-gray-700']) }}>\n"
"        {{ $footer }}\n"
"    </footer>\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:957
#, no-wrap
msgid "<a name=\"inline-component-views\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:957
#, no-wrap
msgid "Inline Component Views"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:960
msgid ""
"For very small components, it may feel cumbersome to manage both the "
"component class and the component's view template. For this reason, you may "
"return the component's markup directly from the `render` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:974
#, no-wrap
msgid ""
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return <<<'blade'\n"
"            <div class=\"alert alert-danger\">\n"
"                {{ $slot }}\n"
"            </div>\n"
"        blade;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:976
#, no-wrap
msgid "<a name=\"generating-inline-view-components\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:976
#, no-wrap
msgid "Generating Inline View Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:979
msgid ""
"To create a component that renders an inline view, you may use the `inline` "
"option when executing the `make:component` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:981
#, no-wrap
msgid "    php artisan make:component Alert --inline\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:983
#, no-wrap
msgid "<a name=\"anonymous-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:983
#, no-wrap
msgid "Anonymous Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:986
msgid ""
"Similar to inline components, anonymous components provide a mechanism for "
"managing a component via a single file. However, anonymous components "
"utilize a single view file and have no associated class. To define an "
"anonymous component, you only need to place a Blade template within your "
"`resources/views/components` directory. For example, assuming you have "
"defined a component at `resources/views/components/alert.blade.php`, you may "
"simply render it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:990
msgid ""
"You may use the `.` character to indicate if a component is nested deeper "
"inside the `components` directory. For example, assuming the component is "
"defined at `resources/views/components/inputs/button.blade.php`, you may "
"render it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:994
#, no-wrap
msgid "<a name=\"data-properties-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:994
#, no-wrap
msgid "Data Properties / Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:997
msgid ""
"Since anonymous components do not have any associated class, you may wonder "
"how you may differentiate which data should be passed to the component as "
"variables and which attributes should be placed in the component's "
"[attribute bag](#component-attributes)."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:999
msgid ""
"You may specify which attributes should be considered data variables using "
"the `@props` directive at the top of your component's Blade template. All "
"other attributes on the component will be available via the component's "
"attribute bag. If you wish to give a data variable a default value, you may "
"specify the variable's name as the array key and the default value as the "
"array value:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1001
#, no-wrap
msgid "    <!-- /resources/views/components/alert.blade.php -->\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1003
#, no-wrap
msgid "    @props(['type' => 'info', 'message'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1009
msgid "Given the component definition above, we may render the component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1013
#, no-wrap
msgid "<a name=\"dynamic-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1013
#, no-wrap
msgid "Dynamic Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1016
msgid ""
"Sometimes you may need to render a component but not know which component "
"should be rendered until runtime. In this situation, you may use Laravel's "
"built-in `dynamic-component` component to render the component based on a "
"runtime value or variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1018
#, no-wrap
msgid "    <x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1020
#, no-wrap
msgid "<a name=\"manually-registering-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1020
#, no-wrap
msgid "Manually Registering Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1023
#, no-wrap
msgid ""
"> {note} The following documentation on manually registering components is "
"primarily applicable to those who are writing Laravel packages that include "
"view components. If you are not writing a package, this portion of the "
"component documentation may not be relevant to you.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1027
msgid ""
"However, if you are building a package that utilizes Blade components or "
"placing components in non-conventional directories, you will need to "
"manually register your component class and its HTML tag alias so that "
"Laravel knows where to find the component. You should typically register "
"your components in the `boot` method of your package's service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1030
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Blade;\n"
"    use VendorPackage\\View\\Components\\AlertComponent;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1040
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap your package's services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::component('package-alert', AlertComponent::class);\n"
"    }\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1045
#, no-wrap
msgid "Autoloading Package Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1069
#, no-wrap
msgid "<a name=\"building-layouts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1069
#, no-wrap
msgid "Building Layouts"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1072
#, no-wrap
msgid "<a name=\"layouts-using-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1072
#, no-wrap
msgid "Layouts Using Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1075
msgid ""
"Most web applications maintain the same general layout across various "
"pages. It would be incredibly cumbersome and hard to maintain our "
"application if we had to repeat the entire layout HTML in every view we "
"create. Thankfully, it's convenient to define this layout as a single [Blade "
"component](#components) and then use it throughout our application."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1077
#, no-wrap
msgid "<a name=\"defining-the-layout-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1077
#, no-wrap
msgid "Defining The Layout Component"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1080
msgid ""
"For example, imagine we are building a \"todo\" list application. We might "
"define a `layout` component that looks like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1081
#, no-wrap
msgid ""
"<!-- resources/views/components/layout.blade.php -->\n"
"\n"
"<html>\n"
"    <head>\n"
"        <title>{{ $title ?? 'Todo Manager' }}</title>\n"
"    </head>\n"
"    <body>\n"
"        <h1>Todos</h1>\n"
"        <hr/>\n"
"        {{ $slot }}\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1097
#, no-wrap
msgid "<a name=\"applying-the-layout-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1097
#, no-wrap
msgid "Applying The Layout Component"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1100
msgid ""
"Once the `layout` component has been defined, we may create a Blade view "
"that utilizes the component. In this example, we will define a simple view "
"that displays our task list:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1101
#, no-wrap
msgid ""
"<!-- resources/views/tasks.blade.php -->\n"
"\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1112
msgid ""
"Remember, content that is injected into a component will be supplied to the "
"default `$slot` variable within our `layout` component. As you may have "
"noticed, our `layout` also respects a `$title` slot if one is provided; "
"otherwise, a default title is shown. We may inject a custom title from our "
"task list view using the standard slot syntax discussed in the [component "
"documentation](#components):"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1113
#, no-wrap
msgid ""
"<!-- resources/views/tasks.blade.php -->\n"
"\n"
"<x-layout>\n"
"    <x-slot name=\"title\">\n"
"        Custom Title\n"
"    </x-slot>\n"
"\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1128
msgid ""
"Now that we have defined our layout and task list views, we just need to "
"return the `task` view from a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1130
#, no-wrap
msgid "    use App\\Models\\Task;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1134
#, no-wrap
msgid ""
"    Route::get('/tasks', function () {\n"
"        return view('tasks', ['tasks' => Task::all()]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1136
#, no-wrap
msgid "<a name=\"layouts-using-template-inheritance\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1136
#, no-wrap
msgid "Layouts Using Template Inheritance"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1139
#, no-wrap
msgid "<a name=\"defining-a-layout\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1139
#, no-wrap
msgid "Defining A Layout"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1142
msgid ""
"Layouts may also be created via \"template inheritance\". This was the "
"primary way of building applications prior to the introduction of "
"[components](#components)."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1144
msgid ""
"To get started, let's take a look at a simple example. First, we will "
"examine a page layout. Since most web applications maintain the same general "
"layout across various pages, it's convenient to define this layout as a "
"single Blade view:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1145
#, no-wrap
msgid ""
"<!-- resources/views/layouts/app.blade.php -->\n"
"\n"
"<html>\n"
"    <head>\n"
"        <title>App Name - @yield('title')</title>\n"
"    </head>\n"
"    <body>\n"
"        @section('sidebar')\n"
"            This is the master sidebar.\n"
"        @show\n"
"\n"
"        <div class=\"container\">\n"
"            @yield('content')\n"
"        </div>\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1165
msgid ""
"As you can see, this file contains typical HTML mark-up. However, take note "
"of the `@section` and `@yield` directives. The `@section` directive, as the "
"name implies, defines a section of content, while the `@yield` directive is "
"used to display the contents of a given section."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1167
msgid ""
"Now that we have defined a layout for our application, let's define a child "
"page that inherits the layout."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1169
#, no-wrap
msgid "<a name=\"extending-a-layout\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1169
#, no-wrap
msgid "Extending A Layout"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1172
msgid ""
"When defining a child view, use the `@extends` Blade directive to specify "
"which layout the child view should \"inherit\". Views which extend a Blade "
"layout may inject content into the layout's sections using `@section` "
"directives. Remember, as seen in the example above, the contents of these "
"sections will be displayed in the layout using `@yield`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1173
#, no-wrap
msgid ""
"<!-- resources/views/child.blade.php -->\n"
"\n"
"@extends('layouts.app')\n"
"\n"
"@section('title', 'Page Title')\n"
"\n"
"@section('sidebar')\n"
"    @@parent\n"
"\n"
"    <p>This is appended to the master sidebar.</p>\n"
"@endsection\n"
"\n"
"@section('content')\n"
"    <p>This is my body content.</p>\n"
"@endsection\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1192
msgid ""
"In this example, the `sidebar` section is utilizing the `@@parent` directive "
"to append (rather than overwriting) content to the layout's sidebar. The "
"`@@parent` directive will be replaced by the content of the layout when the "
"view is rendered."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1194
#, no-wrap
msgid ""
"> {tip} Contrary to the previous example, this `sidebar` section ends with "
"`@endsection` instead of `@show`. The `@endsection` directive will only "
"define a section while `@show` will define and **immediately yield** the "
"section.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1196
msgid ""
"The `@yield` directive also accepts a default value as its second "
"parameter. This value will be rendered if the section being yielded is "
"undefined:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1198
#, no-wrap
msgid "    @yield('content', 'Default content')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1200
#, no-wrap
msgid "<a name=\"forms\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1200
#, no-wrap
msgid "Forms"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1203
#, no-wrap
msgid "<a name=\"csrf-field\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1203
#, no-wrap
msgid "CSRF Field"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1206
msgid ""
"Anytime you define an HTML form in your application, you should include a "
"hidden CSRF token field in the form so that [the CSRF "
"protection](/docs/{{version}}/csrf) middleware can validate the request. You "
"may use the `@csrf` Blade directive to generate the token field:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1207
#, no-wrap
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"\n"
"    ...\n"
"</form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1216
#, no-wrap
msgid "<a name=\"method-field\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1216
#, no-wrap
msgid "Method Field"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1219
msgid ""
"Since HTML forms can't make `PUT`, `PATCH`, or `DELETE` requests, you will "
"need to add a hidden `_method` field to spoof these HTTP verbs. The "
"`@method` Blade directive can create this field for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1220
#, no-wrap
msgid ""
"<form action=\"/foo/bar\" method=\"POST\">\n"
"    @method('PUT')\n"
"\n"
"    ...\n"
"</form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1229
#, no-wrap
msgid "<a name=\"validation-errors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1229
#, no-wrap
msgid "Validation Errors"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1232
msgid ""
"The `@error` directive may be used to quickly check if [validation error "
"messages](/docs/{{version}}/validation#quick-displaying-the-validation-errors) "
"exist for a given attribute. Within an `@error` directive, you may echo the "
"`$message` variable to display the error message:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1233
#, no-wrap
msgid ""
"<!-- /resources/views/post/create.blade.php -->\n"
"\n"
"<label for=\"title\">Post Title</label>\n"
"\n"
"<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid "
"@enderror\">\n"
"\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1246
msgid ""
"Since the `@error` directive compiles to an \"if\" statement, you may use "
"the `@else` directive to render content when there is not an error for an "
"attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1247
#, no-wrap
msgid ""
"<!-- /resources/views/auth.blade.php -->\n"
"\n"
"<label for=\"email\">Email address</label>\n"
"\n"
"<input id=\"email\" type=\"email\" class=\"@error('email') is-invalid @else "
"is-valid @enderror\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1256
msgid ""
"You may pass [the name of a specific error "
"bag](/docs/{{version}}/validation#named-error-bags) as the second parameter "
"to the `@error` directive to retrieve validation error messages on pages "
"containing multiple forms:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1257
#, no-wrap
msgid ""
"<!-- /resources/views/auth.blade.php -->\n"
"\n"
"<label for=\"email\">Email address</label>\n"
"\n"
"<input id=\"email\" type=\"email\" class=\"@error('email', 'login') "
"is-invalid @enderror\">\n"
"\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1270
#, no-wrap
msgid "<a name=\"stacks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1270
#, no-wrap
msgid "Stacks"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1273
msgid ""
"Blade allows you to push to named stacks which can be rendered somewhere "
"else in another view or layout. This can be particularly useful for "
"specifying any JavaScript libraries required by your child views:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1274
#, no-wrap
msgid ""
"@push('scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endpush\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1281
msgid ""
"You may push to a stack as many times as needed. To render the complete "
"stack contents, pass the name of the stack to the `@stack` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1282
#, no-wrap
msgid ""
"<head>\n"
"    <!-- Head Contents -->\n"
"\n"
"    @stack('scripts')\n"
"</head>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1291
msgid ""
"If you would like to prepend content onto the beginning of a stack, you "
"should use the `@prepend` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1292
#, no-wrap
msgid ""
"@push('scripts')\n"
"    This will be second...\n"
"@endpush\n"
"\n"
"// Later...\n"
"\n"
"@prepend('scripts')\n"
"    This will be first...\n"
"@endprepend\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1305
#, no-wrap
msgid "<a name=\"service-injection\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1305
#, no-wrap
msgid "Service Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1308
msgid ""
"The `@inject` directive may be used to retrieve a service from the Laravel "
"[service container](/docs/{{version}}/container). The first argument passed "
"to `@inject` is the name of the variable the service will be placed into, "
"while the second argument is the class or interface name of the service you "
"wish to resolve:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1309
#, no-wrap
msgid ""
"@inject('metrics', 'App\\Services\\MetricsService')\n"
"\n"
"<div>\n"
"    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1318
#, no-wrap
msgid "<a name=\"extending-blade\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1318
#, no-wrap
msgid "Extending Blade"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1321
msgid ""
"Blade allows you to define your own custom directives using the `directive` "
"method. When the Blade compiler encounters the custom directive, it will "
"call the provided callback with the expression that the directive contains."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1323
msgid ""
"The following example creates a `@datetime($var)` directive which formats a "
"given `$var`, which should be an instance of `DateTime`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1342
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1355
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Blade::directive('datetime', function ($expression) {\n"
"                return \"<?php echo ($expression)->format('m/d/Y H:i'); "
"?>\";\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1357
msgid ""
"As you can see, we will chain the `format` method onto whatever expression "
"is passed into the directive. So, in this example, the final PHP generated "
"by this directive will be:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1359
#, no-wrap
msgid "    <?php echo ($var)->format('m/d/Y H:i'); ?>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1361
#, no-wrap
msgid ""
"> {note} After updating the logic of a Blade directive, you will need to "
"delete all of the cached Blade views. The cached Blade views may be removed "
"using the `view:clear` Artisan command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1363
#, no-wrap
msgid "<a name=\"custom-echo-handlers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1363
#, no-wrap
msgid "Custom Echo Handlers"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1366
msgid ""
"If you attempt to \"echo\" an object using Blade, the object's `__toString` "
"method will be invoked. The "
"[`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) "
"method is one of PHP's built-in \"magic methods\". However, sometimes you "
"may not have control over the `__toString` method of a given class, such as "
"when the class that you are interacting with belongs to a third-party "
"library."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1368
msgid ""
"In these cases, Blade allows you to register a custom echo handler for that "
"particular type of object. To accomplish this, you should invoke Blade's "
"`stringable` method. The `stringable` method accepts a closure. This closure "
"should type-hint the type of object that it is responsible for "
"rendering. Typically, the `stringable` method should be invoked within the "
"`boot` method of your application's `AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1371
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Blade;\n"
"    use Money\\Money;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1383
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::stringable(function (Money $money) {\n"
"            return $money->formatTo('en_GB');\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1385
msgid ""
"Once your custom echo handler has been defined, you may simply echo the "
"object in your Blade template:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1386
#, no-wrap
msgid "Cost: {{ $money }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1391
#, no-wrap
msgid "<a name=\"custom-if-statements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1391
#, no-wrap
msgid "Custom If Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1394
msgid ""
"Programming a custom directive is sometimes more complex than necessary when "
"defining simple, custom conditional statements. For that reason, Blade "
"provides a `Blade::if` method which allows you to quickly define custom "
"conditional directives using closures. For example, let's define a custom "
"conditional that checks the configured default \"disk\" for the "
"application. We may do this in the `boot` method of our "
"`AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1408
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::if('disk', function ($value) {\n"
"            return config('filesystems.default') === $value;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1410
msgid ""
"Once the custom conditional has been defined, you can use it within your "
"templates:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1411
#, no-wrap
msgid ""
"@disk('local')\n"
"    <!-- The application is using the local disk... -->\n"
"@elsedisk('s3')\n"
"    <!-- The application is using the s3 disk... -->\n"
"@else\n"
"    <!-- The application is using some other disk... -->\n"
"@enddisk\n"
"\n"
"@unlessdisk('local')\n"
"    <!-- The application is not using the local disk... -->\n"
"@enddisk\n"
msgstr ""
