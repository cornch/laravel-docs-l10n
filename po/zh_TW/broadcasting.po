msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:17\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/broadcasting.pot\n"
"X-Crowdin-File-ID: 19\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/broadcasting.md:1
#: ./docs/9.x/broadcasting.md:1
#: ./docs/10.x/broadcasting.md:1
#: ./docs/11.x/broadcasting.md:1
#: ./docs/master/broadcasting.md:1
msgctxt "H1"
msgid "Broadcasting"
msgstr "廣播 - Broadcast"

#: ./docs/8.x/broadcasting.md:3
#: ./docs/9.x/broadcasting.md:3
#: ./docs/10.x/broadcasting.md:3
#: ./docs/11.x/broadcasting.md:3
#: ./docs/master/broadcasting.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: ./docs/8.x/broadcasting.md:4
#: ./docs/9.x/broadcasting.md:4
#: ./docs/10.x/broadcasting.md:4
#: ./docs/11.x/broadcasting.md:4
#: ./docs/master/broadcasting.md:4
msgctxt "P"
msgid "[Server Side Installation](#server-side-installation)"
msgstr "[伺服器端安裝](#server-side-installation)"

#: ./docs/8.x/broadcasting.md:5
#: ./docs/9.x/broadcasting.md:5
#: ./docs/10.x/broadcasting.md:5
#: ./docs/11.x/broadcasting.md:5
#: ./docs/master/broadcasting.md:5
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

#: ./docs/10.x/broadcasting.md:6
#: ./docs/11.x/broadcasting.md:6
#: ./docs/master/broadcasting.md:6
msgctxt "P"
msgid "[Reverb](#reverb)"
msgstr ""

#: ./docs/8.x/broadcasting.md:6
#: ./docs/9.x/broadcasting.md:6
#: ./docs/10.x/broadcasting.md:7
#: ./docs/11.x/broadcasting.md:7
#: ./docs/master/broadcasting.md:7
msgctxt "P"
msgid "[Pusher Channels](#pusher-channels)"
msgstr "[Pusher Channels](#pusher-channels)"

#: ./docs/8.x/broadcasting.md:7
#: ./docs/9.x/broadcasting.md:7
#: ./docs/10.x/broadcasting.md:8
#: ./docs/11.x/broadcasting.md:8
#: ./docs/master/broadcasting.md:8
msgctxt "P"
msgid "[Ably](#ably)"
msgstr "[Ably](#ably)"

#: ./docs/8.x/broadcasting.md:8
#: ./docs/9.x/broadcasting.md:8
#: ./docs/10.x/broadcasting.md:9
msgctxt "P"
msgid "[Open Source Alternatives](#open-source-alternatives)"
msgstr "[開放原始碼替代](#open-source-alternatives)"

#: ./docs/8.x/broadcasting.md:9
#: ./docs/9.x/broadcasting.md:9
#: ./docs/10.x/broadcasting.md:10
#: ./docs/11.x/broadcasting.md:9
#: ./docs/master/broadcasting.md:9
msgctxt "P"
msgid "[Client Side Installation](#client-side-installation)"
msgstr "[用戶端安裝](#client-side-installation)"

#: ./docs/8.x/broadcasting.md:10
#: ./docs/9.x/broadcasting.md:10
#: ./docs/10.x/broadcasting.md:12
#: ./docs/11.x/broadcasting.md:11
#: ./docs/master/broadcasting.md:11
msgctxt "P"
msgid "[Pusher Channels](#client-pusher-channels)"
msgstr "[Pusher Channels](#client-pusher-channels)"

#: ./docs/10.x/broadcasting.md:11
#: ./docs/11.x/broadcasting.md:10
#: ./docs/master/broadcasting.md:10
msgctxt "P"
msgid "[Reverb](#client-reverb)"
msgstr ""

#: ./docs/8.x/broadcasting.md:11
#: ./docs/9.x/broadcasting.md:11
#: ./docs/10.x/broadcasting.md:13
#: ./docs/11.x/broadcasting.md:12
#: ./docs/master/broadcasting.md:12
msgctxt "P"
msgid "[Ably](#client-ably)"
msgstr "[Ably](#client-ably)"

#: ./docs/8.x/broadcasting.md:12
#: ./docs/9.x/broadcasting.md:12
#: ./docs/10.x/broadcasting.md:14
#: ./docs/11.x/broadcasting.md:13
#: ./docs/master/broadcasting.md:13
msgctxt "P"
msgid "[Concept Overview](#concept-overview)"
msgstr "[概念概覽](#concept-overview)"

#: ./docs/8.x/broadcasting.md:13
#: ./docs/9.x/broadcasting.md:13
msgctxt "P"
msgid "[Using An Example Application](#using-example-application)"
msgstr "[使用現有的應用程式](#using-example-application)"

#: ./docs/8.x/broadcasting.md:14
#: ./docs/9.x/broadcasting.md:14
#: ./docs/10.x/broadcasting.md:16
#: ./docs/11.x/broadcasting.md:15
#: ./docs/master/broadcasting.md:15
msgctxt "P"
msgid "[Defining Broadcast Events](#defining-broadcast-events)"
msgstr "[定義 Broadcast 事件](#defining-broadcast-events)"

#: ./docs/10.x/broadcasting.md:15
#: ./docs/11.x/broadcasting.md:14
#: ./docs/master/broadcasting.md:14
msgctxt "P"
msgid "[Using an Example Application](#using-example-application)"
msgstr ""

#: ./docs/8.x/broadcasting.md:15
#: ./docs/9.x/broadcasting.md:15
#: ./docs/10.x/broadcasting.md:17
#: ./docs/11.x/broadcasting.md:16
#: ./docs/master/broadcasting.md:16
msgctxt "P"
msgid "[Broadcast Name](#broadcast-name)"
msgstr "[Broadcast 名稱](#broadcast-name)"

#: ./docs/8.x/broadcasting.md:16
#: ./docs/9.x/broadcasting.md:16
#: ./docs/10.x/broadcasting.md:18
#: ./docs/11.x/broadcasting.md:17
#: ./docs/master/broadcasting.md:17
msgctxt "P"
msgid "[Broadcast Data](#broadcast-data)"
msgstr "[Broadcast 資料](#broadcast-data)"

#: ./docs/8.x/broadcasting.md:17
#: ./docs/9.x/broadcasting.md:17
#: ./docs/10.x/broadcasting.md:19
#: ./docs/11.x/broadcasting.md:18
#: ./docs/master/broadcasting.md:18
msgctxt "P"
msgid "[Broadcast Queue](#broadcast-queue)"
msgstr "[Broadcast 佇列](#broadcast-queue)"

#: ./docs/8.x/broadcasting.md:18
#: ./docs/9.x/broadcasting.md:18
#: ./docs/10.x/broadcasting.md:20
#: ./docs/11.x/broadcasting.md:19
#: ./docs/master/broadcasting.md:19
msgctxt "P"
msgid "[Broadcast Conditions](#broadcast-conditions)"
msgstr "[Broadcast 條件](#broadcast-conditions)"

#: ./docs/8.x/broadcasting.md:19
#: ./docs/9.x/broadcasting.md:19
msgctxt "P"
msgid "[Broadcasting & Database Transactions](#broadcasting-and-database-transactions)"
msgstr "[Broadcast 與資料庫 Transaction](#broadcasting-and-database-transactions)"

#: ./docs/8.x/broadcasting.md:20
#: ./docs/9.x/broadcasting.md:20
#: ./docs/10.x/broadcasting.md:22
#: ./docs/11.x/broadcasting.md:21
#: ./docs/master/broadcasting.md:21
msgctxt "P"
msgid "[Authorizing Channels](#authorizing-channels)"
msgstr "[授權頻道](#authorizing-channels)"

#: ./docs/10.x/broadcasting.md:21
#: ./docs/11.x/broadcasting.md:20
#: ./docs/master/broadcasting.md:20
msgctxt "P"
msgid "[Broadcasting and Database Transactions](#broadcasting-and-database-transactions)"
msgstr ""

#: ./docs/8.x/broadcasting.md:21
#: ./docs/9.x/broadcasting.md:21
#: ./docs/10.x/broadcasting.md:23
#: ./docs/master/broadcasting.md:22
msgctxt "P"
msgid "[Defining Authorization Routes](#defining-authorization-routes)"
msgstr "[定義授權路由](#defining-authorization-routes)"

#: ./docs/8.x/broadcasting.md:22
#: ./docs/9.x/broadcasting.md:22
#: ./docs/10.x/broadcasting.md:24
#: ./docs/11.x/broadcasting.md:22
#: ./docs/master/broadcasting.md:23
msgctxt "P"
msgid "[Defining Authorization Callbacks](#defining-authorization-callbacks)"
msgstr "[定義授權回呼](#defining-authorization-callbacks)"

#: ./docs/8.x/broadcasting.md:23
#: ./docs/9.x/broadcasting.md:23
#: ./docs/10.x/broadcasting.md:25
#: ./docs/11.x/broadcasting.md:23
#: ./docs/master/broadcasting.md:24
msgctxt "P"
msgid "[Defining Channel Classes](#defining-channel-classes)"
msgstr "[定義頻道類別](#defining-channel-classes)"

#: ./docs/8.x/broadcasting.md:24
#: ./docs/9.x/broadcasting.md:24
#: ./docs/10.x/broadcasting.md:26
#: ./docs/11.x/broadcasting.md:24
#: ./docs/master/broadcasting.md:25
msgctxt "P"
msgid "[Broadcasting Events](#broadcasting-events)"
msgstr "[Broadcast 事件](#broadcasting-events)"

#: ./docs/8.x/broadcasting.md:25
#: ./docs/9.x/broadcasting.md:25
msgctxt "P"
msgid "[Only To Others](#only-to-others)"
msgstr "[僅限其他](#only-to-others)"

#: ./docs/8.x/broadcasting.md:26
#: ./docs/9.x/broadcasting.md:26
msgctxt "P"
msgid "[Customizing The Connection](#customizing-the-connection)"
msgstr "[自訂連線](#customizing-the-connection)"

#: ./docs/10.x/broadcasting.md:27
#: ./docs/11.x/broadcasting.md:25
#: ./docs/master/broadcasting.md:26
msgctxt "P"
msgid "[Only to Others](#only-to-others)"
msgstr ""

#: ./docs/11.x/broadcasting.md:27
msgctxt "P"
msgid "[Anonymous Events](#anonymous-events)"
msgstr ""

#: ./docs/8.x/broadcasting.md:27
#: ./docs/9.x/broadcasting.md:27
#: ./docs/10.x/broadcasting.md:29
#: ./docs/11.x/broadcasting.md:28
#: ./docs/master/broadcasting.md:28
msgctxt "P"
msgid "[Receiving Broadcasts](#receiving-broadcasts)"
msgstr "[接收 Broadcast](#receiving-broadcasts)"

#: ./docs/10.x/broadcasting.md:28
#: ./docs/11.x/broadcasting.md:26
#: ./docs/master/broadcasting.md:27
msgctxt "P"
msgid "[Customizing the Connection](#customizing-the-connection)"
msgstr ""

#: ./docs/8.x/broadcasting.md:28
#: ./docs/9.x/broadcasting.md:28
msgctxt "P"
msgid "[Listening For Events](#listening-for-events)"
msgstr "[監聽事件](#listening-for-events)"

#: ./docs/8.x/broadcasting.md:29
#: ./docs/9.x/broadcasting.md:29
msgctxt "P"
msgid "[Leaving A Channel](#leaving-a-channel)"
msgstr "[離開頻道](#leaving-a-channel)"

#: ./docs/10.x/broadcasting.md:30
#: ./docs/11.x/broadcasting.md:29
#: ./docs/master/broadcasting.md:29
msgctxt "P"
msgid "[Listening for Events](#listening-for-events)"
msgstr ""

#: ./docs/8.x/broadcasting.md:30
#: ./docs/9.x/broadcasting.md:30
#: ./docs/10.x/broadcasting.md:32
#: ./docs/11.x/broadcasting.md:31
#: ./docs/master/broadcasting.md:31
msgctxt "P"
msgid "[Namespaces](#namespaces)"
msgstr "[Namespace](#namespaces)"

#: ./docs/10.x/broadcasting.md:31
#: ./docs/11.x/broadcasting.md:30
#: ./docs/master/broadcasting.md:30
msgctxt "P"
msgid "[Leaving a Channel](#leaving-a-channel)"
msgstr ""

#: ./docs/8.x/broadcasting.md:31
#: ./docs/9.x/broadcasting.md:31
#: ./docs/10.x/broadcasting.md:33
#: ./docs/11.x/broadcasting.md:32
#: ./docs/master/broadcasting.md:32
msgctxt "P"
msgid "[Presence Channels](#presence-channels)"
msgstr "[Presence 頻道](#presence-channels)"

#: ./docs/8.x/broadcasting.md:32
#: ./docs/9.x/broadcasting.md:32
#: ./docs/10.x/broadcasting.md:34
#: ./docs/11.x/broadcasting.md:33
#: ./docs/master/broadcasting.md:33
msgctxt "P"
msgid "[Authorizing Presence Channels](#authorizing-presence-channels)"
msgstr "[授權 Precense 頻道](#authorizing-presence-channels)"

#: ./docs/8.x/broadcasting.md:33
#: ./docs/9.x/broadcasting.md:33
#: ./docs/10.x/broadcasting.md:35
#: ./docs/11.x/broadcasting.md:34
#: ./docs/master/broadcasting.md:34
msgctxt "P"
msgid "[Joining Presence Channels](#joining-presence-channels)"
msgstr "[加入 Presence 頻道](#joining-presence-channels)"

#: ./docs/8.x/broadcasting.md:34
#: ./docs/9.x/broadcasting.md:34
msgctxt "P"
msgid "[Broadcasting To Presence Channels](#broadcasting-to-presence-channels)"
msgstr "[廣播至 Presence 頻道](#broadcasting-to-presence-channels)"

#: ./docs/8.x/broadcasting.md:35
#: ./docs/9.x/broadcasting.md:35
#: ./docs/10.x/broadcasting.md:37
#: ./docs/11.x/broadcasting.md:36
#: ./docs/master/broadcasting.md:36
msgctxt "P"
msgid "[Model Broadcasting](#model-broadcasting)"
msgstr "[廣播 Model](#model-broadcasting)"

#: ./docs/10.x/broadcasting.md:36
#: ./docs/11.x/broadcasting.md:35
#: ./docs/master/broadcasting.md:35
msgctxt "P"
msgid "[Broadcasting to Presence Channels](#broadcasting-to-presence-channels)"
msgstr ""

#: ./docs/8.x/broadcasting.md:36
#: ./docs/9.x/broadcasting.md:36
#: ./docs/10.x/broadcasting.md:38
#: ./docs/11.x/broadcasting.md:37
#: ./docs/master/broadcasting.md:37
msgctxt "P"
msgid "[Model Broadcasting Conventions](#model-broadcasting-conventions)"
msgstr "[廣播 Model 的慣例](#model-broadcasting-conventions)"

#: ./docs/8.x/broadcasting.md:37
#: ./docs/9.x/broadcasting.md:37
msgctxt "P"
msgid "[Listening For Model Broadcasts](#listening-for-model-broadcasts)"
msgstr "[監聽 Model Broadcast](#listening-for-model-broadcasts)"

#: ./docs/8.x/broadcasting.md:38
#: ./docs/9.x/broadcasting.md:38
#: ./docs/10.x/broadcasting.md:40
#: ./docs/11.x/broadcasting.md:39
#: ./docs/master/broadcasting.md:39
msgctxt "P"
msgid "[Client Events](#client-events)"
msgstr "[用戶端事件](#client-events)"

#: ./docs/10.x/broadcasting.md:39
#: ./docs/11.x/broadcasting.md:38
#: ./docs/master/broadcasting.md:38
msgctxt "P"
msgid "[Listening for Model Broadcasts](#listening-for-model-broadcasts)"
msgstr ""

#: ./docs/8.x/broadcasting.md:39
#: ./docs/9.x/broadcasting.md:39
#: ./docs/10.x/broadcasting.md:41
#: ./docs/11.x/broadcasting.md:40
#: ./docs/master/broadcasting.md:40
msgctxt "P"
msgid "[Notifications](#notifications)"
msgstr "[通知](#notifications)"

#: ./docs/8.x/broadcasting.md:41
#: ./docs/9.x/broadcasting.md:41
#: ./docs/10.x/broadcasting.md:43
#: ./docs/11.x/broadcasting.md:42
#: ./docs/master/broadcasting.md:42
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:42
#: ./docs/9.x/broadcasting.md:42
#: ./docs/10.x/broadcasting.md:44
#: ./docs/11.x/broadcasting.md:43
#: ./docs/master/broadcasting.md:43
msgctxt "H2"
msgid "Introduction"
msgstr "簡介"

#: ./docs/8.x/broadcasting.md:44
#: ./docs/9.x/broadcasting.md:44
#: ./docs/10.x/broadcasting.md:46
#: ./docs/11.x/broadcasting.md:45
#: ./docs/master/broadcasting.md:45
msgctxt "P"
msgid "In many modern web applications, WebSockets are used to implement realtime, live-updating user interfaces. When some data is updated on the server, a message is typically sent over a WebSocket connection to be handled by the client. WebSockets provide a more efficient alternative to continually polling your application's server for data changes that should be reflected in your UI."
msgstr "在許多現代 Web App 中，都使用了 WebSocket 來提供即時更新的 UI。當某個資料在伺服器上被更新，通常會通過 WebSocket 連線來將一個訊息傳送給用戶端做處理。比起不斷從伺服器上拉取資料並反應到 UI 上，WebSocket 提供是更有效率的方案。"

#: ./docs/8.x/broadcasting.md:46
#: ./docs/9.x/broadcasting.md:46
msgctxt "P"
msgid "For example, imagine your application is able to export a user's data to a CSV file and email it to them. However, creating this CSV file takes several minutes so you choose to create and mail the CSV within a [queued job](/docs/{{version}}/queues). When the CSV has been created and mailed to the user, we can use event broadcasting to dispatch a `App\\Events\\UserDataExported` event that is received by our application's JavaScript. Once the event is received, we can display a message to the user that their CSV has been emailed to them without them ever needing to refresh the page."
msgstr "舉例來說，假設我們的 App 可以將使用者資料匯出為 CSV 檔並以電子郵件寄出。不過，建立 CSV 檔需要數分鐘的事件，因此我們選擇將建立與寄送 CSV 檔的程式放在[佇列任務](/docs/{{version}}/queues)中。當 CSV 當建立完畢並寄給使用者後，我們可以使用「事件廣播」來將 `App\\Events\\UserDataExported` 事件分派給應用程式的 JavaScript。收到事件後，使用者就能在不重新整理的情況下看到一個訊息，表示我們已將 CSV 檔寄送出去。"

#: ./docs/10.x/broadcasting.md:48
#: ./docs/11.x/broadcasting.md:47
#: ./docs/master/broadcasting.md:47
msgctxt "P"
msgid "For example, imagine your application is able to export a user's data to a CSV file and email it to them. However, creating this CSV file takes several minutes so you choose to create and mail the CSV within a [queued job](/docs/{{version}}/queues). When the CSV has been created and mailed to the user, we can use event broadcasting to dispatch an `App\\Events\\UserDataExported` event that is received by our application's JavaScript. Once the event is received, we can display a message to the user that their CSV has been emailed to them without them ever needing to refresh the page."
msgstr "舉例來說，假設我們的 App 可以將使用者資料匯出為 CSV 檔並以電子郵件寄出。不過，建立 CSV 檔需要數分鐘的事件，因此我們選擇將建立與寄送 CSV 檔的程式放在[佇列任務](/docs/{{version}}/queues)中。當 CSV 當建立完畢並寄給使用者後，我們可以使用「事件廣播」來將 `App\\Events\\UserDataExported` 事件分派給應用程式的 JavaScript。收到事件後，使用者就能在不重新整理的情況下看到一個訊息，表示我們已將 CSV 檔寄送出去。"

#: ./docs/8.x/broadcasting.md:48
#: ./docs/9.x/broadcasting.md:48
#: ./docs/10.x/broadcasting.md:50
#: ./docs/11.x/broadcasting.md:49
#: ./docs/master/broadcasting.md:49
msgctxt "P"
msgid "To assist you in building these types of features, Laravel makes it easy to \"broadcast\" your server-side Laravel [events](/docs/{{version}}/events) over a WebSocket connection. Broadcasting your Laravel events allows you to share the same event names and data between your server-side Laravel application and your client-side JavaScript application."
msgstr "為了協助你製作這種類型的功能，Laravel 讓你能簡單地將伺服器端 Laravel [事件](/docs/{{version}}/events)通過 WebSocket 連線來「廣播」出去。通過廣播 Laravel 事件，就可以在伺服器端 Laravel 程式與用戶端 JavaScript 程式間共享相同的事件名稱與資料。"

#: ./docs/8.x/broadcasting.md:50
#: ./docs/9.x/broadcasting.md:50
#: ./docs/10.x/broadcasting.md:52
#: ./docs/11.x/broadcasting.md:51
#: ./docs/master/broadcasting.md:51
msgctxt "P"
msgid "The core concepts behind broadcasting are simple: clients connect to named channels on the frontend, while your Laravel application broadcasts events to these channels on the backend. These events can contain any additional data you wish to make available to the frontend."
msgstr "「廣播」背後的核心概念很簡單：用戶端會在前端連線到一個有名稱的頻道，而後端 Laravel 網站則會將事件廣播給這些頻道。這些事件可以包含任何你想讓前端存取的額外資料。"

#: ./docs/8.x/broadcasting.md:52
#: ./docs/9.x/broadcasting.md:52
#: ./docs/10.x/broadcasting.md:54
#: ./docs/11.x/broadcasting.md:53
#: ./docs/master/broadcasting.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"supported-drivers\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:53
#: ./docs/9.x/broadcasting.md:53
#: ./docs/10.x/broadcasting.md:55
#: ./docs/11.x/broadcasting.md:54
#: ./docs/master/broadcasting.md:54
msgctxt "H4"
msgid "Supported Drivers"
msgstr "支援的 Driver"

#: ./docs/8.x/broadcasting.md:55
msgctxt "P"
msgid "By default, Laravel includes two server-side broadcasting drivers for you to choose from: [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.io). However, community driven packages such as [laravel-websockets](https://beyondco.de/docs/laravel-websockets/getting-started/introduction) and [soketi](https://docs.soketi.app/) provide additional broadcasting drivers that do not require commercial broadcasting providers."
msgstr "預設情況下，Laravel 包含了兩個伺服器端廣播 Driver 可供選擇：[Pusher Channels](https://pusher.com/channels) 與 [Ably](https://ably.io)。不過，也有如 [laravel-websockets](https://beyondco.de/docs/laravel-websockets/getting-started/introduction) 與 [soketi](https://docs.soketi.app/) 這樣由社群開發的套件提供不需要商業 Broadcast Provider 的額外 Broadcast Driver。"

#: ./docs/9.x/broadcasting.md:55
msgctxt "P"
msgid "By default, Laravel includes two server-side broadcasting drivers for you to choose from: [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.com). However, community driven packages such as [laravel-websockets](https://beyondco.de/docs/laravel-websockets/getting-started/introduction) and [soketi](https://docs.soketi.app/) provide additional broadcasting drivers that do not require commercial broadcasting providers."
msgstr "預設情況下，Laravel 包含了兩個伺服器端廣播 Driver 可供選擇：[Pusher Channels](https://pusher.com/channels) 與 [Ably](https://ably.com)。不過，也有如 [laravel-websockets](https://beyondco.de/docs/laravel-websockets/getting-started/introduction) 與 [soketi](https://docs.soketi.app/) 這樣由社群開發的套件提供不需要商業 Broadcast Provider 的額外 Broadcast Driver。"

#: ./docs/10.x/broadcasting.md:57
#: ./docs/11.x/broadcasting.md:56
#: ./docs/master/broadcasting.md:56
msgctxt "P"
msgid "By default, Laravel includes three server-side broadcasting drivers for you to choose from: [Laravel Reverb](https://reverb.laravel.com), [Pusher Channels](https://pusher.com/channels), and [Ably](https://ably.com)."
msgstr ""

#: ./docs/8.x/broadcasting.md:57
#: ./docs/9.x/broadcasting.md:58
#: ./docs/10.x/broadcasting.md:60
#: ./docs/11.x/broadcasting.md:59
#: ./docs/master/broadcasting.md:59
msgctxt "P"
msgid "Before diving into event broadcasting, make sure you have read Laravel's documentation on [events and listeners](/docs/{{version}}/events)."
msgstr "在深入探討事件廣播前，請先確保你已閱讀有關 [事件與監聽程式](/docs/{{version}}/events)的 Laravel 說明文件。"

#: ./docs/8.x/broadcasting.md:59
#: ./docs/9.x/broadcasting.md:60
#: ./docs/10.x/broadcasting.md:62
#: ./docs/11.x/broadcasting.md:61
#: ./docs/master/broadcasting.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"server-side-installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:60
#: ./docs/9.x/broadcasting.md:61
#: ./docs/10.x/broadcasting.md:63
#: ./docs/11.x/broadcasting.md:62
#: ./docs/master/broadcasting.md:62
msgctxt "H2"
msgid "Server Side Installation"
msgstr "伺服器端安裝"

#: ./docs/8.x/broadcasting.md:62
#: ./docs/9.x/broadcasting.md:63
#: ./docs/10.x/broadcasting.md:65
#: ./docs/11.x/broadcasting.md:64
#: ./docs/master/broadcasting.md:64
msgctxt "P"
msgid "To get started using Laravel's event broadcasting, we need to do some configuration within the Laravel application as well as install a few packages."
msgstr "若要開始使用 Laravel 的事件廣播，我們需要在 Laravel 專案中做一些設定以及安裝一些套件。"

#: ./docs/8.x/broadcasting.md:64
#: ./docs/9.x/broadcasting.md:65
#: ./docs/10.x/broadcasting.md:67
#: ./docs/11.x/broadcasting.md:66
#: ./docs/master/broadcasting.md:66
msgctxt "P"
msgid "Event broadcasting is accomplished by a server-side broadcasting driver that broadcasts your Laravel events so that Laravel Echo (a JavaScript library) can receive them within the browser client. Don't worry - we'll walk through each part of the installation process step-by-step."
msgstr "事件廣播是通過伺服器端的廣播 Driver 將 Laravel 事件廣播出去，讓 Laravel Echo (一個 JavaScript 套件) 可以在瀏覽器用戶端內接收這個事件。別擔心 —— 我們會一步一步地介紹安裝過程的每一部分。"

#: ./docs/8.x/broadcasting.md:66
#: ./docs/9.x/broadcasting.md:67
#: ./docs/10.x/broadcasting.md:69
#: ./docs/11.x/broadcasting.md:68
#: ./docs/master/broadcasting.md:68
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:67
#: ./docs/8.x/broadcasting.md:658
#: ./docs/9.x/broadcasting.md:68
#: ./docs/9.x/broadcasting.md:697
#: ./docs/10.x/broadcasting.md:70
#: ./docs/10.x/broadcasting.md:759
#: ./docs/11.x/broadcasting.md:69
#: ./docs/11.x/broadcasting.md:722
#: ./docs/master/broadcasting.md:69
#: ./docs/master/broadcasting.md:779
msgctxt "H3"
msgid "Configuration"
msgstr "設定"

#: ./docs/8.x/broadcasting.md:69
#: ./docs/9.x/broadcasting.md:70
#: ./docs/10.x/broadcasting.md:72
msgctxt "P"
msgid "All of your application's event broadcasting configuration is stored in the `config/broadcasting.php` configuration file. Laravel supports several broadcast drivers out of the box: [Pusher Channels](https://pusher.com/channels), [Redis](/docs/{{version}}/redis), and a `log` driver for local development and debugging. Additionally, a `null` driver is included which allows you to totally disable broadcasting during testing. A configuration example is included for each of these drivers in the `config/broadcasting.php` configuration file."
msgstr "專案中，所有關於事件廣播的設定都放在 `config/boradcasting.php` 設定檔中。Laravel 內建支援多個 Broadcast Driver：[Pusher Channels](https://pusher.com/channels)、[Redis](/docs/{{version}}/redis)、以及一個用於本機開發與偵錯的 `log` Driver。此外，也包含了一個可以在測試期間完全禁用廣播的 `null` Driver。`config/boradcasting.php` 設定中包含了各個 Driver 的設定範例。"

#: ./docs/11.x/broadcasting.md:71
msgctxt "P"
msgid "All of your application's event broadcasting configuration is stored in the `config/broadcasting.php` configuration file. Don't worry if this directory does not exist in your application; it will be created when you run the `install:broadcasting` Artisan command."
msgstr ""

#: ./docs/8.x/broadcasting.md:71
#: ./docs/9.x/broadcasting.md:72
#: ./docs/10.x/broadcasting.md:74
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-service-provider\"></a>"
#~ msgstr ""

#: ./docs/master/broadcasting.md:71
msgctxt "P"
msgid "All of your application's event broadcasting configuration is stored in the `config/broadcasting.php` configuration file. Laravel supports several broadcast drivers out of the box: [Laravel Reverb](/docs/{{version}}/reverb), [Pusher Channels](https://pusher.com/channels), [Ably](https://ably.com), and a `log` driver for local development and debugging. Additionally, a `null` driver is included which allows you to totally disable broadcasting during testing. A configuration example is included for each of these drivers in the `config/broadcasting.php` configuration file."
msgstr ""

#: ./docs/8.x/broadcasting.md:72
#: ./docs/9.x/broadcasting.md:73
#: ./docs/10.x/broadcasting.md:75
msgctxt "H4"
msgid "Broadcast Service Provider"
msgstr "Broadcast Service Provider"

#: ./docs/11.x/broadcasting.md:73
msgctxt "P"
msgid "Laravel supports several broadcast drivers out of the box: [Laravel Reverb](/docs/{{version}}/reverb), [Pusher Channels](https://pusher.com/channels), [Ably](https://ably.com), and a `log` driver for local development and debugging. Additionally, a `null` driver is included which allows you to disable broadcasting during testing. A configuration example is included for each of these drivers in the `config/broadcasting.php` configuration file."
msgstr ""

#: ./docs/8.x/broadcasting.md:74
#: ./docs/9.x/broadcasting.md:75
#: ./docs/10.x/broadcasting.md:77
msgctxt "P"
msgid "Before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In new Laravel applications, you only need to uncomment this provider in the `providers` array of your `config/app.php` configuration file. This `BroadcastServiceProvider` contains the code necessary to register the broadcast authorization routes and callbacks."
msgstr "在廣播任何事件以前，需要先註冊 `App\\Providers\\BroadcastServiceProvider`。在新安裝的 Laravel 專案中，只需要在 `config/app.php` 設定檔內的 `providers` 陣列中取消註解這個 Provider 即可。這個 `BroadcastServiceProvider` 包含了要註冊廣播授權路由以及回呼所需的程式碼。"

#: ./docs/11.x/broadcasting.md:75
#: ./docs/master/broadcasting.md:73
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/11.x/broadcasting.md:76
#: ./docs/master/broadcasting.md:74
msgctxt "H4"
msgid "Installation"
msgstr ""

#: ./docs/8.x/broadcasting.md:76
#: ./docs/9.x/broadcasting.md:77
#: ./docs/10.x/broadcasting.md:79
#: ./docs/11.x/broadcasting.md:86
#: ./docs/master/broadcasting.md:84
#~ msgctxt "P"
#~ msgid "<a name=\"queue-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:77
#: ./docs/9.x/broadcasting.md:78
#: ./docs/10.x/broadcasting.md:80
#: ./docs/11.x/broadcasting.md:87
#: ./docs/master/broadcasting.md:85
msgctxt "H4"
msgid "Queue Configuration"
msgstr "設定佇列"

#: ./docs/11.x/broadcasting.md:78
#: ./docs/master/broadcasting.md:76
msgctxt "P"
msgid "By default, broadcasting is not enabled in new Laravel applications. You may enable broadcasting using the `install:broadcasting` Artisan command:"
msgstr ""

#: ./docs/8.x/broadcasting.md:79
#: ./docs/9.x/broadcasting.md:80
#: ./docs/10.x/broadcasting.md:82
msgctxt "P"
msgid "You will also need to configure and run a [queue worker](/docs/{{version}}/queues). All event broadcasting is done via queued jobs so that the response time of your application is not seriously affected by events being broadcast."
msgstr "也需要註冊並執行一個[佇列背景工作角色](/docs/{{version}}/queues)。所有的事件廣播都是通過佇列任務來完成的，這樣一來在事件被廣播的過程所需的事件才不會對網站的回應時間有太大的影響。"

#: ./docs/11.x/broadcasting.md:80
#: ./docs/master/broadcasting.md:78
msgctxt "CODE: shell"
msgid "php artisan install:broadcasting"
msgstr ""

#: ./docs/8.x/broadcasting.md:81
#: ./docs/9.x/broadcasting.md:82
#: ./docs/10.x/broadcasting.md:101
#: ./docs/11.x/broadcasting.md:108
#: ./docs/master/broadcasting.md:123
#~ msgctxt "P"
#~ msgid "<a name=\"pusher-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:82
#: ./docs/8.x/broadcasting.md:142
#: ./docs/9.x/broadcasting.md:83
#: ./docs/9.x/broadcasting.md:155
#: ./docs/10.x/broadcasting.md:102
#: ./docs/10.x/broadcasting.md:209
#: ./docs/11.x/broadcasting.md:109
#: ./docs/11.x/broadcasting.md:206
#: ./docs/master/broadcasting.md:124
#: ./docs/master/broadcasting.md:221
#: ./docs/master/broadcasting.md:260
msgctxt "H3"
msgid "Pusher Channels"
msgstr "Pusher Channels"

#: ./docs/master/broadcasting.md:82
msgctxt "P"
msgid "The `install:broadcasting` command will create a `routes/channels.php` file where you may register your application's broadcast authorization routes and callbacks."
msgstr ""

#: ./docs/10.x/broadcasting.md:84
#: ./docs/11.x/broadcasting.md:91
#: ./docs/master/broadcasting.md:89
#: ./docs/master/broadcasting.md:106
#~ msgctxt "P"
#~ msgid "<a name=\"reverb\"></a>"
#~ msgstr ""

#: ./docs/11.x/broadcasting.md:84
msgctxt "P"
msgid "The `install:broadcasting` command will create the `config/broadcasting.php` configuration file. In addition, the command will create the `routes/channels.php` file where you may register your application's broadcast authorization routes and callbacks."
msgstr ""

#: ./docs/8.x/broadcasting.md:84
#: ./docs/9.x/broadcasting.md:85
#: ./docs/10.x/broadcasting.md:104
#: ./docs/11.x/broadcasting.md:111
#: ./docs/master/broadcasting.md:126
msgctxt "P"
msgid "If you plan to broadcast your events using [Pusher Channels](https://pusher.com/channels), you should install the Pusher Channels PHP SDK using the Composer package manager:"
msgstr "若有打算要使用 [Pusher Channels](https://pusher.com/channels)，那麼應通過 Composer 套件管理員來安裝 Pusher Channels 的 PHP SDK："

#: ./docs/10.x/broadcasting.md:85
#: ./docs/10.x/broadcasting.md:172
#: ./docs/11.x/broadcasting.md:92
#: ./docs/11.x/broadcasting.md:169
#: ./docs/master/broadcasting.md:90
#: ./docs/master/broadcasting.md:107
#: ./docs/master/broadcasting.md:184
msgctxt "H3"
msgid "Reverb"
msgstr ""

#: ./docs/8.x/broadcasting.md:86
#: ./docs/9.x/broadcasting.md:87
#: ./docs/10.x/broadcasting.md:106
#: ./docs/11.x/broadcasting.md:113
#: ./docs/master/broadcasting.md:128
msgctxt "CODE"
msgid "composer require pusher/pusher-php-server"
msgstr ""

#: ./docs/10.x/broadcasting.md:87
msgctxt "P"
msgid "You may install Reverb using the Composer package manager:"
msgstr ""

#: ./docs/8.x/broadcasting.md:88
#: ./docs/9.x/broadcasting.md:91
#: ./docs/10.x/broadcasting.md:110
msgctxt "P"
msgid "Next, you should configure your Pusher Channels credentials in the `config/broadcasting.php` configuration file. An example Pusher Channels configuration is already included in this file, allowing you to quickly specify your key, secret, and application ID. Typically, these values should be set via the `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_ID` [environment variables](/docs/{{version}}/configuration#environment-configuration):"
msgstr "接著，應在 `config/broadcasting.php` 設定檔中設定 Pusher Channels 的憑證。該檔案中已經有包含了一個範例的 Pusher Channels 設定，讓你可以快速指定你的 Key, Secret 以及 Application ID。通常來說，這些值應該要通過 `PUSHER_APP_KEY`, `PUSHER_APP_SECRET` 與 `PUSHER_APP_ID` [環境變數](/docs/{{version}}/configuration#environment-configuration) 來設定："

#: ./docs/10.x/broadcasting.md:89
#: ./docs/11.x/broadcasting.md:96
msgctxt "CODE: sh"
msgid "composer require laravel/reverb"
msgstr ""

#: ./docs/11.x/broadcasting.md:89
#: ./docs/master/broadcasting.md:87
msgctxt "P"
msgid "Before broadcasting any events, you should first configure and run a [queue worker](/docs/{{version}}/queues). All event broadcasting is done via queued jobs so that the response time of your application is not seriously affected by events being broadcast."
msgstr ""

#: ./docs/8.x/broadcasting.md:90
#: ./docs/9.x/broadcasting.md:93
#: ./docs/10.x/broadcasting.md:112
msgctxt "CODE"
msgid ""
"PUSHER_APP_ID=your-pusher-app-id\n"
"PUSHER_APP_KEY=your-pusher-key\n"
"PUSHER_APP_SECRET=your-pusher-secret\n"
"PUSHER_APP_CLUSTER=mt1"
msgstr ""

#: ./docs/master/broadcasting.md:92
msgctxt "P"
msgid "When running the `install:broadcasting` command, you will be prompted to install [Laravel Reverb](/docs/{{version}}/reverb). Of course, you may also install Reverb manually using the Composer package manager. Since Reverb is currently in beta, you will need to explicitly install the beta release:"
msgstr ""

#: ./docs/10.x/broadcasting.md:93
#: ./docs/master/broadcasting.md:115
msgctxt "P"
msgid "Once the package is installed, you may run Reverb's installation command to publish the configuration, update your applications's broadcasting configuration, and add Reverb's required environment variables:"
msgstr ""

#: ./docs/11.x/broadcasting.md:94
msgctxt "P"
msgid "When running the `install:broadcasting` command, you will be prompted to install [Laravel Reverb](/docs/{{version}}/reverb). Of course, you may also install Reverb manually using the Composer package manager."
msgstr ""

#: ./docs/master/broadcasting.md:94
#: ./docs/master/broadcasting.md:111
msgctxt "CODE: sh"
msgid "composer require laravel/reverb:@beta"
msgstr ""

#: ./docs/10.x/broadcasting.md:95
#: ./docs/11.x/broadcasting.md:102
#: ./docs/master/broadcasting.md:100
#: ./docs/master/broadcasting.md:117
msgctxt "CODE: sh"
msgid "php artisan reverb:install"
msgstr ""

#: ./docs/8.x/broadcasting.md:95
#: ./docs/9.x/broadcasting.md:100
#: ./docs/10.x/broadcasting.md:119
#: ./docs/11.x/broadcasting.md:129
#: ./docs/master/broadcasting.md:144
msgctxt "P"
msgid "The `config/broadcasting.php` file's `pusher` configuration also allows you to specify additional `options` that are supported by Channels, such as the cluster."
msgstr "`config/broadcasting.php` 檔的 `pusher` 設定能讓你指定 Channels 所支援的額外選項 `options`，如簇集 (Cluster)。"

#: ./docs/8.x/broadcasting.md:97
#: ./docs/9.x/broadcasting.md:102
#: ./docs/10.x/broadcasting.md:121
msgctxt "P"
msgid "Next, you will need to change your broadcast driver to `pusher` in your `.env` file:"
msgstr "接著，需要在 `.env` 檔中更改你的 Broadcast Driver 為 `pusher`："

#: ./docs/10.x/broadcasting.md:99
#: ./docs/11.x/broadcasting.md:106
#: ./docs/master/broadcasting.md:104
#: ./docs/master/broadcasting.md:121
msgctxt "P"
msgid "You can find detailed Reverb installation and usage instructions in the [Reverb documentation](/docs/{{version}}/reverb)."
msgstr ""

#: ./docs/8.x/broadcasting.md:99
#: ./docs/9.x/broadcasting.md:104
#: ./docs/10.x/broadcasting.md:123
msgctxt "CODE"
msgid "BROADCAST_DRIVER=pusher"
msgstr ""

#: ./docs/11.x/broadcasting.md:100
#: ./docs/master/broadcasting.md:98
msgctxt "P"
msgid "Once the package is installed, you may run Reverb's installation command to publish the configuration, add Reverb's required environment variables, and enable event broadcasting in your application:"
msgstr ""

#: ./docs/8.x/broadcasting.md:101
#: ./docs/8.x/broadcasting.md:123
#: ./docs/9.x/broadcasting.md:108
#: ./docs/9.x/broadcasting.md:136
#: ./docs/10.x/broadcasting.md:127
#: ./docs/10.x/broadcasting.md:158
#: ./docs/11.x/broadcasting.md:137
#: ./docs/11.x/broadcasting.md:163
#: ./docs/master/broadcasting.md:152
#: ./docs/master/broadcasting.md:178
msgctxt "P"
msgid "Finally, you are ready to install and configure [Laravel Echo](#client-side-installation), which will receive the broadcast events on the client-side."
msgstr "最後，就可以安裝並設定 [Laravel Echo](#client-side-installable)。Laravel Echo 會在用戶端上接收廣播事件。"

#: ./docs/8.x/broadcasting.md:103
#: ./docs/9.x/broadcasting.md:110
#: ./docs/10.x/broadcasting.md:129
#~ msgctxt "P"
#~ msgid "<a name=\"pusher-compatible-open-source-alternatives\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:104
#: ./docs/9.x/broadcasting.md:111
#: ./docs/10.x/broadcasting.md:130
msgctxt "H4"
msgid "Open Source Pusher Alternatives"
msgstr "開放原始碼的 Pusher 替代"

#: ./docs/8.x/broadcasting.md:106
#: ./docs/9.x/broadcasting.md:113
msgctxt "P"
msgid "The [laravel-websockets](https://github.com/beyondcode/laravel-websockets) and [soketi](https://docs.soketi.app/) packages provide Pusher compatible WebSocket servers for Laravel. These packages allow you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using these packages, please consult our documentation on [open source alternatives](#open-source-alternatives)."
msgstr "[laravel-websockets](https://github.com/beyondcode/laravel-websockets) 與 [soketi](https://docs.soketi.app/) 套件提供了用於 Laravel 的 Pusher 相同 WebSocket 伺服器。使用這些套件就能在不依賴商業 WebSocket Provider 的情況下使用完整的 Laravel Broadcasting 功能。有關安裝這些套件的更多資訊，請參考我們的[開放原始碼替代](#open-source-alternatives)說明文件。"

#: ./docs/8.x/broadcasting.md:108
#: ./docs/9.x/broadcasting.md:115
#: ./docs/10.x/broadcasting.md:134
#: ./docs/11.x/broadcasting.md:139
#: ./docs/master/broadcasting.md:154
#~ msgctxt "P"
#~ msgid "<a name=\"ably\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:109
#: ./docs/8.x/broadcasting.md:189
#: ./docs/9.x/broadcasting.md:116
#: ./docs/9.x/broadcasting.md:209
#: ./docs/10.x/broadcasting.md:135
#: ./docs/10.x/broadcasting.md:263
#: ./docs/11.x/broadcasting.md:140
#: ./docs/11.x/broadcasting.md:281
#: ./docs/master/broadcasting.md:155
#: ./docs/master/broadcasting.md:335
msgctxt "H3"
msgid "Ably"
msgstr "Ably"

#: ./docs/master/broadcasting.md:109
msgctxt "P"
msgid "You may install Reverb using the Composer package manager. Since Reverb is currently in beta, you will need to explicitly install the beta release:"
msgstr ""

#: ./docs/8.x/broadcasting.md:111
msgctxt "P"
msgid "If you plan to broadcast your events using [Ably](https://ably.io), you should install the Ably PHP SDK using the Composer package manager:"
msgstr "若有打算要使用 [Ably](https://ably.io)，那麼應通過 Composer 套件管理員來安裝 Ably 的 PHP SDK："

#: ./docs/8.x/broadcasting.md:113
#: ./docs/9.x/broadcasting.md:120
#: ./docs/10.x/broadcasting.md:142
#: ./docs/11.x/broadcasting.md:147
#: ./docs/master/broadcasting.md:162
msgctxt "CODE"
msgid "composer require ably/ably-php"
msgstr ""

#: ./docs/8.x/broadcasting.md:115
#: ./docs/9.x/broadcasting.md:124
#: ./docs/10.x/broadcasting.md:146
#: ./docs/11.x/broadcasting.md:151
#: ./docs/master/broadcasting.md:166
msgctxt "P"
msgid "Next, you should configure your Ably credentials in the `config/broadcasting.php` configuration file. An example Ably configuration is already included in this file, allowing you to quickly specify your key. Typically, this value should be set via the `ABLY_KEY` [environment variable](/docs/{{version}}/configuration#environment-configuration):"
msgstr "接著，應在 `config/broadcasting.php` 設定檔中設定 Pusher Channels 的憑證。該檔案中已經有包含了一個範例的 Ably 設定，讓你可以快速指定你的金鑰。通常來說，這個值應該要通過 `ABLY_KEY` [環境變數](/docs/{{version}}/configuration#environment-configuration) 來設定："

#: ./docs/11.x/broadcasting.md:117
#: ./docs/master/broadcasting.md:132
msgctxt "P"
msgid "Next, you should configure your Pusher Channels credentials in the `config/broadcasting.php` configuration file. An example Pusher Channels configuration is already included in this file, allowing you to quickly specify your key, secret, and application ID. Typically, you should configure your Pusher Channels credentials in your application's `.env` file:"
msgstr ""

#: ./docs/8.x/broadcasting.md:117
#: ./docs/9.x/broadcasting.md:126
#: ./docs/10.x/broadcasting.md:148
#: ./docs/11.x/broadcasting.md:153
#: ./docs/master/broadcasting.md:168
msgctxt "CODE"
msgid "ABLY_KEY=your-ably-key"
msgstr ""

#: ./docs/9.x/broadcasting.md:118
#: ./docs/10.x/broadcasting.md:140
#: ./docs/11.x/broadcasting.md:145
#: ./docs/master/broadcasting.md:160
msgctxt "P"
msgid "If you plan to broadcast your events using [Ably](https://ably.com), you should install the Ably PHP SDK using the Composer package manager:"
msgstr "若有打算要使用 [Ably](https://ably.com)，則請使用 Composer 套件管理員來安裝 Ably 的 PHP SDK："

#: ./docs/11.x/broadcasting.md:119
#: ./docs/master/broadcasting.md:134
msgctxt "CODE: ini"
msgid ""
"PUSHER_APP_ID=\"your-pusher-app-id\"\n"
"PUSHER_APP_KEY=\"your-pusher-key\"\n"
"PUSHER_APP_SECRET=\"your-pusher-secret\"\n"
"PUSHER_HOST=\n"
"PUSHER_PORT=443\n"
"PUSHER_SCHEME=\"https\"\n"
"PUSHER_APP_CLUSTER=\"mt1\""
msgstr ""

#: ./docs/8.x/broadcasting.md:119
#: ./docs/9.x/broadcasting.md:130
#: ./docs/10.x/broadcasting.md:152
msgctxt "P"
msgid "Next, you will need to change your broadcast driver to `ably` in your `.env` file:"
msgstr "接著，需要在 `.env` 檔中更改你的 Broadcast Driver 為 `ably`："

#: ./docs/8.x/broadcasting.md:121
#: ./docs/9.x/broadcasting.md:132
#: ./docs/10.x/broadcasting.md:154
msgctxt "CODE"
msgid "BROADCAST_DRIVER=ably"
msgstr ""

#: ./docs/8.x/broadcasting.md:125
#: ./docs/9.x/broadcasting.md:138
#: ./docs/10.x/broadcasting.md:160
#~ msgctxt "P"
#~ msgid "<a name=\"open-source-alternatives\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:126
#: ./docs/9.x/broadcasting.md:139
#: ./docs/10.x/broadcasting.md:161
msgctxt "H3"
msgid "Open Source Alternatives"
msgstr "開放原始碼替代"

#: ./docs/8.x/broadcasting.md:128
#: ./docs/9.x/broadcasting.md:141
#~ msgctxt "P"
#~ msgid "<a name=\"open-source-alternatives-php\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:129
#: ./docs/9.x/broadcasting.md:142
msgctxt "H4"
msgid "PHP"
msgstr "PHP"

#: ./docs/11.x/broadcasting.md:131
#: ./docs/master/broadcasting.md:146
msgctxt "P"
msgid "Then, set the `BROADCAST_CONNECTION` environment variable to `pusher` in your application's `.env` file:"
msgstr ""

#: ./docs/8.x/broadcasting.md:131
#: ./docs/9.x/broadcasting.md:144
msgctxt "P"
msgid "The [laravel-websockets](https://github.com/beyondcode/laravel-websockets) package is a pure PHP, Pusher compatible WebSocket package for Laravel. This package allows you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using this package, please consult its [official documentation](https://beyondco.de/docs/laravel-websockets)."
msgstr "[laravel-websockets](https://github.com/beyondcode/laravel-websockets) 套件是一個純 PHP、適用於 Laravel 的 Pusher 相容 WebSocket 套件。這個套件能讓你使用 Laravel 廣播的全部功能，而無需商業 WebSocket Provider。有關安裝與使用該套件的更多資訊，請參考其[官方說明文件](https://beyondco.de/docs/laravel-websockets)。"

#: ./docs/10.x/broadcasting.md:132
msgctxt "P"
msgid "[soketi](https://docs.soketi.app/) provides a Pusher compatible WebSocket server for Laravel, allowing you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using open source packages for broadcasting, please consult our documentation on [open source alternatives](#open-source-alternatives)."
msgstr ""

#: ./docs/11.x/broadcasting.md:133
#: ./docs/master/broadcasting.md:148
msgctxt "CODE: ini"
msgid "BROADCAST_CONNECTION=pusher"
msgstr ""

#: ./docs/8.x/broadcasting.md:133
#: ./docs/9.x/broadcasting.md:146
#: ./docs/10.x/broadcasting.md:163
#~ msgctxt "P"
#~ msgid "<a name=\"open-source-alternatives-node\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:134
#: ./docs/9.x/broadcasting.md:147
#: ./docs/10.x/broadcasting.md:164
msgctxt "H4"
msgid "Node"
msgstr "Node"

#: ./docs/8.x/broadcasting.md:136
#: ./docs/9.x/broadcasting.md:149
#: ./docs/10.x/broadcasting.md:166
msgctxt "P"
msgid "[Soketi](https://github.com/soketi/soketi) is a Node based, Pusher compatible WebSocket server for Laravel. Under the hood, Soketi utilizes µWebSockets.js for extreme scalability and speed. This package allows you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using this package, please consult its [official documentation](https://docs.soketi.app/)."
msgstr "[Soketi](https://github.com/soketi/soketi) 套件是一個基於 Node、適用於 Laravel 的 Pusher 相容 WebSocket 伺服器。從底層來看，Soketi 使用了 µWebSockets.js 來獲得最佳可擴充性與速度。Sketi 能讓你在不需仰賴商業 WebSocket Provider 的情況下使用 Laravel 廣播的全部功能。有關安裝與使用 Sketi 的更多資訊，請參考其[官方說明文件](https://docs.soketi.app)。"

#: ./docs/10.x/broadcasting.md:138
#: ./docs/10.x/broadcasting.md:266
#: ./docs/11.x/broadcasting.md:143
#: ./docs/11.x/broadcasting.md:284
#: ./docs/master/broadcasting.md:158
#: ./docs/master/broadcasting.md:338
msgctxt "P"
msgid "The documentation below discusses how to use Ably in \"Pusher compatibility\" mode. However, the Ably team recommends and maintains a broadcaster and Echo client that is able to take advantage of the unique capabilities offered by Ably. For more information on using the Ably maintained drivers, please [consult Ably's Laravel broadcaster documentation](https://github.com/ably/laravel-broadcaster)."
msgstr "下方的說明文件討論了如何在「Pusher 相容模式 (Pusher Compatibility)」下使用 Ably。不過，Ably 團隊推薦並維護了一個 Broadcaster 程式，以及一個可使用 Ably 特別功能的 Echo 用戶端。更多有關使用 Ably 維護的 Driver 的資訊，請[參考 Ably 的 Laravel Broadcaster 說明文件 (英語)](https://github.com/ably/laravel-broadcaster)。"

#: ./docs/8.x/broadcasting.md:138
#: ./docs/9.x/broadcasting.md:151
#: ./docs/10.x/broadcasting.md:168
#: ./docs/11.x/broadcasting.md:165
#: ./docs/master/broadcasting.md:180
#~ msgctxt "P"
#~ msgid "<a name=\"client-side-installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:139
#: ./docs/9.x/broadcasting.md:152
#: ./docs/10.x/broadcasting.md:169
#: ./docs/11.x/broadcasting.md:166
#: ./docs/master/broadcasting.md:181
msgctxt "H2"
msgid "Client Side Installation"
msgstr "用戶端安裝"

#: ./docs/8.x/broadcasting.md:141
#: ./docs/9.x/broadcasting.md:154
#: ./docs/10.x/broadcasting.md:208
#: ./docs/11.x/broadcasting.md:205
#: ./docs/master/broadcasting.md:220
#: ./docs/master/broadcasting.md:259
#~ msgctxt "P"
#~ msgid "<a name=\"client-pusher-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:144
#: ./docs/9.x/broadcasting.md:157
#: ./docs/10.x/broadcasting.md:211
msgctxt "P"
msgid "[Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package since we will be using the Pusher Channels broadcaster:"
msgstr "[Laravel Echo](https://github.com/laravel/echo) 是一個 JavaScript 套件，能讓你免於煩惱如何訂閱頻道與監聽來自伺服器端 Broadcasting Driver 的事件廣播。我們可以通過 NPM 套件管理員來安裝 Echo。在這個例子中，因為我們會使用 Pusher Channels Boradcaster，因此我們也會安裝 `pusher-js`："

#: ./docs/8.x/broadcasting.md:146
#: ./docs/8.x/broadcasting.md:195
#: ./docs/9.x/broadcasting.md:159
#: ./docs/9.x/broadcasting.md:215
#: ./docs/10.x/broadcasting.md:176
#: ./docs/10.x/broadcasting.md:213
#: ./docs/10.x/broadcasting.md:272
#: ./docs/11.x/broadcasting.md:173
#: ./docs/11.x/broadcasting.md:212
#: ./docs/11.x/broadcasting.md:290
#: ./docs/master/broadcasting.md:188
#: ./docs/master/broadcasting.md:227
#: ./docs/master/broadcasting.md:266
#: ./docs/master/broadcasting.md:344
msgctxt "CODE: bash"
msgid "npm install --save-dev laravel-echo pusher-js"
msgstr ""

#: ./docs/8.x/broadcasting.md:150
#: ./docs/9.x/broadcasting.md:163
#: ./docs/10.x/broadcasting.md:217
msgctxt "P"
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file - you simply need to uncomment it:"
msgstr "安裝好 Echo 後，就可以在網站的 JavaScript 中建立一個新的 Echo 實體。要建立新 Echo 實體最好的地方就是在 Laravel 附帶的 `resources/js/bootstrap.js` 檔案最尾端。預設情況下，這個檔案內已經包含了一個範例的 Echo 設定，只需要將其取消註解即可："

#: ./docs/8.x/broadcasting.md:152
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"window.Pusher = require('pusher-js');\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: process.env.MIX_PUSHER_APP_KEY,\n"
"    cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n"
"    forceTLS: true\n"
"});"
msgstr ""

#: ./docs/11.x/broadcasting.md:157
#: ./docs/master/broadcasting.md:172
msgctxt "P"
msgid "Then, set the `BROADCAST_CONNECTION` environment variable to `ably` in your application's `.env` file:"
msgstr ""

#: ./docs/11.x/broadcasting.md:159
#: ./docs/master/broadcasting.md:174
msgctxt "CODE: ini"
msgid "BROADCAST_CONNECTION=ably"
msgstr ""

#: ./docs/8.x/broadcasting.md:165
#: ./docs/8.x/broadcasting.md:220
#: ./docs/9.x/broadcasting.md:179
#: ./docs/9.x/broadcasting.md:241
#: ./docs/10.x/broadcasting.md:233
#: ./docs/10.x/broadcasting.md:298
msgctxt "P"
msgid "Once you have uncommented and adjusted the Echo configuration according to your needs, you may compile your application's assets:"
msgstr "取消註解並依照需求調整好 Echo 設定後，就可以編譯專案素材："

#: ./docs/9.x/broadcasting.md:165
#: ./docs/10.x/broadcasting.md:219
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"import Pusher from 'pusher-js';\n"
"\n"
"window.Pusher = Pusher;\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: import.meta.env.VITE_PUSHER_APP_KEY,\n"
"    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n"
"    forceTLS: true\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:167
#: ./docs/8.x/broadcasting.md:222
#: ./docs/9.x/broadcasting.md:181
#: ./docs/9.x/broadcasting.md:243
#: ./docs/10.x/broadcasting.md:300
#: ./docs/11.x/broadcasting.md:318
#: ./docs/master/broadcasting.md:372
msgctxt "CODE"
msgid "npm run dev"
msgstr ""

#: ./docs/8.x/broadcasting.md:169
#: ./docs/8.x/broadcasting.md:224
msgctxt "P"
msgid "To learn more about compiling your application's JavaScript assets, please consult the documentation on [Laravel Mix](/docs/{{version}}/mix)."
msgstr ""

#: ./docs/10.x/broadcasting.md:171
#: ./docs/11.x/broadcasting.md:168
#: ./docs/master/broadcasting.md:183
#~ msgctxt "P"
#~ msgid "<a name=\"client-reverb\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:171
#: ./docs/9.x/broadcasting.md:188
#: ./docs/10.x/broadcasting.md:242
#: ./docs/11.x/broadcasting.md:260
#: ./docs/master/broadcasting.md:314
#~ msgctxt "P"
#~ msgid "<a name=\"using-an-existing-client-instance\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:172
#: ./docs/9.x/broadcasting.md:189
msgctxt "H4"
msgid "Using An Existing Client Instance"
msgstr "使用現有的用戶端實體"

#: ./docs/10.x/broadcasting.md:174
#: ./docs/11.x/broadcasting.md:171
#: ./docs/master/broadcasting.md:186
msgctxt "P"
msgid "[Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package since Reverb utilizes the Pusher protocol for WebSocket subscriptions, channels, and messages:"
msgstr ""

#: ./docs/8.x/broadcasting.md:174
#: ./docs/9.x/broadcasting.md:191
#: ./docs/10.x/broadcasting.md:245
#: ./docs/11.x/broadcasting.md:263
#: ./docs/master/broadcasting.md:317
msgctxt "P"
msgid "If you already have a pre-configured Pusher Channels client instance that you would like Echo to utilize, you may pass it to Echo via the `client` configuration option:"
msgstr "若已經有預先設定好的 Pusher Channels 用戶端實體，並想讓 Echo 使用的話，可以將其傳入 Echo 的 `client` 設定選項："

#: ./docs/8.x/broadcasting.md:176
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"const client = require('pusher-js');\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: 'your-pusher-channels-key',\n"
"    client: client\n"
"});"
msgstr ""

#: ./docs/10.x/broadcasting.md:180
#: ./docs/11.x/broadcasting.md:177
#: ./docs/master/broadcasting.md:192
msgctxt "P"
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file - you simply need to uncomment it and update the `broadcaster` configuration option to `reverb`:"
msgstr ""

#: ./docs/10.x/broadcasting.md:182
#: ./docs/11.x/broadcasting.md:179
#: ./docs/master/broadcasting.md:194
#: ./docs/master/broadcasting.md:233
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"import Pusher from 'pusher-js';\n"
"window.Pusher = Pusher;\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'reverb',\n"
"    key: import.meta.env.VITE_REVERB_APP_KEY,\n"
"    wsHost: import.meta.env.VITE_REVERB_HOST,\n"
"    wsPort: import.meta.env.VITE_REVERB_PORT,\n"
"    wssPort: import.meta.env.VITE_REVERB_PORT,\n"
"    forceTLS: (import.meta.env.VITE_REVERB_SCHEME ?? 'https') === 'https',\n"
"    enabledTransports: ['ws', 'wss'],\n"
"});"
msgstr ""

#: ./docs/9.x/broadcasting.md:186
#: ./docs/9.x/broadcasting.md:248
#: ./docs/10.x/broadcasting.md:240
#: ./docs/10.x/broadcasting.md:305
#: ./docs/11.x/broadcasting.md:258
#: ./docs/11.x/broadcasting.md:323
#: ./docs/master/broadcasting.md:257
#: ./docs/master/broadcasting.md:312
#: ./docs/master/broadcasting.md:377
msgctxt "P"
msgid "To learn more about compiling your application's JavaScript assets, please consult the documentation on [Vite](/docs/{{version}}/vite)."
msgstr "要瞭解更多有關編譯應用程式 JavaScript 素材的資訊，請參考 [Vite](/docs/{{version}}/vite) 中的說明文件。"

#: ./docs/8.x/broadcasting.md:188
#: ./docs/9.x/broadcasting.md:208
#: ./docs/10.x/broadcasting.md:262
#: ./docs/11.x/broadcasting.md:280
#: ./docs/master/broadcasting.md:334
#~ msgctxt "P"
#~ msgid "<a name=\"client-ably\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:191
#: ./docs/9.x/broadcasting.md:211
#: ./docs/10.x/broadcasting.md:268
msgctxt "P"
msgid "[Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package."
msgstr "[Laravel Echo](https://github.com/laravel/echo) 是一個 JavaScript 套件，能讓你免於煩惱如何訂閱頻道與監聽來自伺服器端 Broadcasting Driver 的事件廣播。我們可以通過 NPM 套件管理員來安裝 Echo。在這個例子中，我們也會安裝 `pusher-js`："

#: ./docs/8.x/broadcasting.md:193
#: ./docs/9.x/broadcasting.md:213
#: ./docs/10.x/broadcasting.md:270
msgctxt "P"
msgid "You may wonder why we would install the `pusher-js` JavaScript library even though we are using Ably to broadcast our events. Thankfully, Ably includes a Pusher compatibility mode which lets us use the Pusher protocol when listening for events in our client-side application:"
msgstr "你可能會很困惑，為什麼我們明明是要用 Ably 來廣播事件，卻安裝了 `pusher-js` JavaScript 函式庫。謝天謝地，Ably 有個 Pusher 相容模式，可以讓我們在用戶端程式內監聽事件的時候使用 Pusher 協定："

#: ./docs/9.x/broadcasting.md:193
#: ./docs/10.x/broadcasting.md:247
#: ./docs/11.x/broadcasting.md:265
#: ./docs/master/broadcasting.md:319
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"import Pusher from 'pusher-js';\n"
"\n"
"const options = {\n"
"    broadcaster: 'pusher',\n"
"    key: 'your-pusher-channels-key'\n"
"}\n"
"\n"
"window.Echo = new Echo({\n"
"    ...options,\n"
"    client: new Pusher(options.key, options)\n"
"});"
msgstr ""

#: ./docs/10.x/broadcasting.md:199
#: ./docs/11.x/broadcasting.md:196
#: ./docs/master/broadcasting.md:211
msgctxt "P"
msgid "Next, you should compile your application's assets:"
msgstr ""

#: ./docs/8.x/broadcasting.md:199
#: ./docs/9.x/broadcasting.md:219
#: ./docs/10.x/broadcasting.md:276
#: ./docs/11.x/broadcasting.md:294
#: ./docs/master/broadcasting.md:348
msgctxt "P"
msgid "**Before continuing, you should enable Pusher protocol support in your Ably application settings. You may enable this feature within the \"Protocol Adapter Settings\" portion of your Ably application's settings dashboard.**"
msgstr "**在繼續之前，應先在 Ably 應用程式設定中啟用 Pusher 通訊協定。可以在 Ably 應用程式設定面板中的「Protocol Adapter Settings」這個部分內啟用此功能。**"

#: ./docs/10.x/broadcasting.md:201
#: ./docs/10.x/broadcasting.md:235
#: ./docs/11.x/broadcasting.md:198
#: ./docs/11.x/broadcasting.md:253
#: ./docs/master/broadcasting.md:213
#: ./docs/master/broadcasting.md:252
#: ./docs/master/broadcasting.md:307
msgctxt "CODE: shell"
msgid "npm run build"
msgstr ""

#: ./docs/8.x/broadcasting.md:201
#: ./docs/9.x/broadcasting.md:221
#: ./docs/10.x/broadcasting.md:278
msgctxt "P"
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file; however, the default configuration in the `bootstrap.js` file is intended for Pusher. You may copy the configuration below to transition your configuration to Ably:"
msgstr "安裝好 Echo 後，就可以在網站的 JavaScript 中建立一個新的 Echo 實體。要建立新 Echo 實體最好的地方就是在 Laravel 附帶的 `resources/js/bootstrap.js` 檔案最尾端。預設情況下，這個檔案內已經包含了一個範例的 Echo 設定。不過，`bootstrap.js` 檔案中預設的範例是給 Pusher 用的。可以複製下列設定來將你的設定檔改成使用 Ably："

#: ./docs/8.x/broadcasting.md:203
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"window.Pusher = require('pusher-js');\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: process.env.MIX_ABLY_PUBLIC_KEY,\n"
"    wsHost: 'realtime-pusher.ably.io',\n"
"    wsPort: 443,\n"
"    disableStats: true,\n"
"    encrypted: true,\n"
"});"
msgstr ""

#: ./docs/10.x/broadcasting.md:206
#: ./docs/11.x/broadcasting.md:203
#: ./docs/master/broadcasting.md:218
msgctxt "P"
msgid "The Laravel Echo `reverb` broadcaster requires laravel-echo v1.16.0+."
msgstr ""

#: ./docs/11.x/broadcasting.md:208
#: ./docs/11.x/broadcasting.md:286
#: ./docs/master/broadcasting.md:223
#: ./docs/master/broadcasting.md:262
#: ./docs/master/broadcasting.md:340
msgctxt "P"
msgid "[Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. Echo also leverages the `pusher-js` NPM package to implement the Pusher protocol for WebSocket subscriptions, channels, and messages."
msgstr ""

#: ./docs/11.x/broadcasting.md:210
#: ./docs/11.x/broadcasting.md:288
#: ./docs/master/broadcasting.md:225
#: ./docs/master/broadcasting.md:264
#: ./docs/master/broadcasting.md:342
msgctxt "P"
msgid "The `install:broadcasting` Artisan command automatically installs the `laravel-echo` and `pusher-js` packages for you; however, you may also install these packages manually via NPM:"
msgstr ""

#: ./docs/11.x/broadcasting.md:216
#: ./docs/master/broadcasting.md:270
msgctxt "P"
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. The `install:broadcasting` command creates an Echo configuration file at `resources/js/echo.js`; however, the default configuration in this file is intended for Laravel Reverb. You may copy the configuration below to transition your configuration to Pusher:"
msgstr ""

#: ./docs/11.x/broadcasting.md:218
#: ./docs/master/broadcasting.md:272
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"import Pusher from 'pusher-js';\n"
"window.Pusher = Pusher;\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: import.meta.env.VITE_PUSHER_APP_KEY,\n"
"    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n"
"    forceTLS: true\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:218
msgctxt "P"
msgid "Note that our Ably Echo configuration references a `MIX_ABLY_PUBLIC_KEY` environment variable. This variable's value should be your Ably public key. Your public key is the portion of your Ably key that occurs before the `:` character."
msgstr "請注意，Ably Echo 設定中參考了 `MIX_ABLY_PUBLIC_KEY` 環境變數。這個環境變數應為 Ably 的公開金鑰。公開金鑰就是 Ably 金鑰中出現在 `:` 字元之前的部分。"

#: ./docs/9.x/broadcasting.md:223
#: ./docs/10.x/broadcasting.md:280
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"import Pusher from 'pusher-js';\n"
"\n"
"window.Pusher = Pusher;\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: import.meta.env.VITE_ABLY_PUBLIC_KEY,\n"
"    wsHost: 'realtime-pusher.ably.io',\n"
"    wsPort: 443,\n"
"    disableStats: true,\n"
"    encrypted: true,\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:226
#: ./docs/9.x/broadcasting.md:250
#: ./docs/10.x/broadcasting.md:307
#: ./docs/11.x/broadcasting.md:325
#: ./docs/master/broadcasting.md:379
#~ msgctxt "P"
#~ msgid "<a name=\"concept-overview\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:227
#: ./docs/9.x/broadcasting.md:251
#: ./docs/10.x/broadcasting.md:308
#: ./docs/11.x/broadcasting.md:326
#: ./docs/master/broadcasting.md:380
msgctxt "H2"
msgid "Concept Overview"
msgstr "概念概覽"

#: ./docs/8.x/broadcasting.md:229
msgctxt "P"
msgid "Laravel's event broadcasting allows you to broadcast your server-side Laravel events to your client-side JavaScript application using a driver-based approach to WebSockets. Currently, Laravel ships with [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.io) drivers. The events may be easily consumed on the client-side using the [Laravel Echo](#client-side-installation) JavaScript package."
msgstr "Laravel 的事件廣播功能能讓你以基於 Driver 的方法來將伺服器端的 Laravel 事件通過 WebSockets 廣播到用戶端 JavaScript 上。目前，Laravel 隨附了 [Pusher Channels](https://pusher.com/channels) 與 [Ably](https://ably.io) 兩個 Driver。可以在用戶端使用 [Laravel Echo](#client-side-installation) JavaScript 套件來輕鬆取得事件。"

#: ./docs/8.x/broadcasting.md:231
#: ./docs/9.x/broadcasting.md:255
#: ./docs/10.x/broadcasting.md:312
#: ./docs/11.x/broadcasting.md:330
#: ./docs/master/broadcasting.md:384
msgctxt "P"
msgid "Events are broadcast over \"channels\", which may be specified as public or private. Any visitor to your application may subscribe to a public channel without any authentication or authorization; however, in order to subscribe to a private channel, a user must be authenticated and authorized to listen on that channel."
msgstr "事件是通過「頻道 (Channel)」進行廣播的，頻道可以被設為公共或私有。任何網站的瀏覽者都可以在不登入或經過授權的情況下訂閱公開頻道。不過，如果要訂閱私有頻道，就必須要登入並經過授權才可以監聽該頻道。"

#: ./docs/master/broadcasting.md:231
msgctxt "P"
msgid "Once `laravel-echo` and `pusher-js` are installed, you are ready to create a fresh Echo instance in your application's JavaScript. The `install:broadcasting` Artisan command creates a `resources/js/echo.js` file that handles this for you:"
msgstr ""

#: ./docs/11.x/broadcasting.md:232
#: ./docs/master/broadcasting.md:286
msgctxt "P"
msgid "Next, you should define the appropriate values for the Pusher environment variables in your application's `.env` file. If these variables do not already exist in your `.env` file, you should add them:"
msgstr ""

#: ./docs/8.x/broadcasting.md:233
#: ./docs/9.x/broadcasting.md:258
#: ./docs/10.x/broadcasting.md:315
msgctxt "P"
msgid "If you would like to explore open source alternatives to Pusher, check out the [open source alternatives](#open-source-alternatives)."
msgstr "若想瞭解更多 Pusher 的開放原始碼替代品，請參考[開放原始碼替代](#open-source-alternatives)一節。"

#: ./docs/11.x/broadcasting.md:234
#: ./docs/master/broadcasting.md:288
msgctxt "CODE: ini"
msgid ""
"PUSHER_APP_ID=\"your-pusher-app-id\"\n"
"PUSHER_APP_KEY=\"your-pusher-key\"\n"
"PUSHER_APP_SECRET=\"your-pusher-secret\"\n"
"PUSHER_HOST=\n"
"PUSHER_PORT=443\n"
"PUSHER_SCHEME=\"https\"\n"
"PUSHER_APP_CLUSTER=\"mt1\"\n"
"\n"
"VITE_APP_NAME=\"${APP_NAME}\"\n"
"VITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\n"
"VITE_PUSHER_HOST=\"${PUSHER_HOST}\"\n"
"VITE_PUSHER_PORT=\"${PUSHER_PORT}\"\n"
"VITE_PUSHER_SCHEME=\"${PUSHER_SCHEME}\"\n"
"VITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\""
msgstr ""

#: ./docs/8.x/broadcasting.md:235
#: ./docs/9.x/broadcasting.md:260
#: ./docs/10.x/broadcasting.md:317
#: ./docs/11.x/broadcasting.md:332
#: ./docs/master/broadcasting.md:386
#~ msgctxt "P"
#~ msgid "<a name=\"using-example-application\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:236
#: ./docs/9.x/broadcasting.md:261
msgctxt "H3"
msgid "Using An Example Application"
msgstr "使用範例專案"

#: ./docs/8.x/broadcasting.md:238
#: ./docs/9.x/broadcasting.md:263
#: ./docs/10.x/broadcasting.md:320
#: ./docs/11.x/broadcasting.md:335
#: ./docs/master/broadcasting.md:389
msgctxt "P"
msgid "Before diving into each component of event broadcasting, let's take a high level overview using an e-commerce store as an example."
msgstr "在深入探討事件廣播的各個元件之前，我們先來用網路商店當作例子，以高階的角度來個概覽。"

#: ./docs/9.x/broadcasting.md:239
#: ./docs/10.x/broadcasting.md:296
msgctxt "P"
msgid "Note that our Ably Echo configuration references a `VITE_ABLY_PUBLIC_KEY` environment variable. This variable's value should be your Ably public key. Your public key is the portion of your Ably key that occurs before the `:` character."
msgstr "請注意，Ably Echo 設定中參考了 `VITE_ABLY_PUBLIC_KEY` 環境變數。這個環境變數應為 Ably 的公開金鑰。公開金鑰就是 Ably 金鑰中出現在 `:` 字元之前的部分。"

#: ./docs/8.x/broadcasting.md:240
#: ./docs/9.x/broadcasting.md:265
msgctxt "P"
msgid "In our application, let's assume we have a page that allows users to view the shipping status for their orders. Let's also assume that a `OrderShipmentStatusUpdated` event is fired when a shipping status update is processed by the application:"
msgstr "在我們的專案中，先來假設有個能讓使用者檢視訂單配送狀態的頁面。另外，也假設當網站處理到配送狀態更新的時候會觸發 `OrderShipmentStatusUpdated` 事件："

#: ./docs/8.x/broadcasting.md:242
#: ./docs/8.x/broadcasting.md:633
#: ./docs/9.x/broadcasting.md:267
#: ./docs/9.x/broadcasting.md:669
#: ./docs/10.x/broadcasting.md:324
#: ./docs/10.x/broadcasting.md:731
#: ./docs/11.x/broadcasting.md:339
#: ./docs/11.x/broadcasting.md:694
#: ./docs/master/broadcasting.md:393
#: ./docs/master/broadcasting.md:751
msgctxt "CODE"
msgid ""
"use App\\Events\\OrderShipmentStatusUpdated;\n"
"\n"
"OrderShipmentStatusUpdated::dispatch($order);"
msgstr ""

#: ./docs/10.x/broadcasting.md:243
#: ./docs/11.x/broadcasting.md:261
#: ./docs/master/broadcasting.md:315
msgctxt "H4"
msgid "Using an Existing Client Instance"
msgstr ""

#: ./docs/8.x/broadcasting.md:246
#: ./docs/9.x/broadcasting.md:271
#: ./docs/10.x/broadcasting.md:328
#: ./docs/11.x/broadcasting.md:343
#: ./docs/master/broadcasting.md:397
#~ msgctxt "P"
#~ msgid "<a name=\"the-shouldbroadcast-interface\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:247
#: ./docs/9.x/broadcasting.md:272
#: ./docs/10.x/broadcasting.md:329
#: ./docs/11.x/broadcasting.md:344
#: ./docs/master/broadcasting.md:398
msgctxt "H4"
msgid "The `ShouldBroadcast` Interface"
msgstr "`ShouldBroadcast` 介面"

#: ./docs/8.x/broadcasting.md:249
#: ./docs/9.x/broadcasting.md:274
#: ./docs/10.x/broadcasting.md:331
#: ./docs/11.x/broadcasting.md:346
#: ./docs/master/broadcasting.md:400
msgctxt "P"
msgid "When a user is viewing one of their orders, we don't want them to have to refresh the page to view status updates. Instead, we want to broadcast the updates to the application as they are created. So, we need to mark the `OrderShipmentStatusUpdated` event with the `ShouldBroadcast` interface. This will instruct Laravel to broadcast the event when it is fired:"
msgstr "我們並不希望使用者在檢視某個訂單的時候還需要重新整理整個頁面才能看到狀態更新；我們希望在訂單更新建立的時候就能廣播給專案。因此，我們需要將 `OrderShipmentStatusUpdated` 事件標上 `ShouldBroadcast` 介面。通過加上該介面，就能告訴 Laravel 要在該事件被觸發時將其廣播出去："

#: ./docs/master/broadcasting.md:250
msgctxt "P"
msgid "Next, you only need to compile your application's assets:"
msgstr ""

#: ./docs/11.x/broadcasting.md:251
#: ./docs/master/broadcasting.md:305
msgctxt "P"
msgid "Once you have adjusted the Echo configuration according to your application's needs, you may compile your application's assets:"
msgstr ""

#: ./docs/8.x/broadcasting.md:251
#: ./docs/9.x/broadcasting.md:276
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"{\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Order\n"
"     */\n"
"    public $order;\n"
"}"
msgstr ""

#: ./docs/9.x/broadcasting.md:253
#: ./docs/10.x/broadcasting.md:310
#: ./docs/11.x/broadcasting.md:328
#: ./docs/master/broadcasting.md:382
msgctxt "P"
msgid "Laravel's event broadcasting allows you to broadcast your server-side Laravel events to your client-side JavaScript application using a driver-based approach to WebSockets. Currently, Laravel ships with [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.com) drivers. The events may be easily consumed on the client-side using the [Laravel Echo](#client-side-installation) JavaScript package."
msgstr "Laravel 的事件廣播功能能讓你以基於 Driver 的方法來將伺服器端的 Laravel 事件通過 WebSockets 廣播到用戶端 JavaScript 上。目前，Laravel 隨附了 [Pusher Channels](https://pusher.com/channels) 與 [Ably](https://ably.com) 兩個 Driver。可以在用戶端使用 [Laravel Echo](#client-side-installation) JavaScript 套件來輕鬆取得事件。"

#: ./docs/8.x/broadcasting.md:273
#: ./docs/9.x/broadcasting.md:298
#: ./docs/10.x/broadcasting.md:354
#: ./docs/11.x/broadcasting.md:369
#: ./docs/master/broadcasting.md:423
msgctxt "P"
msgid "The `ShouldBroadcast` interface requires our event to define a `broadcastOn` method. This method is responsible for returning the channels that the event should broadcast on. An empty stub of this method is already defined on generated event classes, so we only need to fill in its details. We only want the creator of the order to be able to view status updates, so we will broadcast the event on a private channel that is tied to the order:"
msgstr "`ShouldBroadcast` 介面需要我們在事件中定義一個 `broadcastOn` 方法。這個方法需要回傳該事件廣播的頻道。產生的事件類別當中已經棒我們加上了一個空白的 Stub，因此我們只需要填寫詳情就好了。我們只希望建立該訂單的使用者檢視狀態更新，因此我們會將事件放在該訂單的私有頻道上廣播："

#: ./docs/8.x/broadcasting.md:275
#: ./docs/9.x/broadcasting.md:300
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the channels the event should broadcast on.\n"
" *\n"
" * @return \\Illuminate\\Broadcasting\\PrivateChannel\n"
" */\n"
"public function broadcastOn()\n"
"{\n"
"    return new PrivateChannel('orders.'.$this->order->id);\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:285
#: ./docs/9.x/broadcasting.md:310
#: ./docs/10.x/broadcasting.md:384
#: ./docs/11.x/broadcasting.md:399
#: ./docs/master/broadcasting.md:453
#~ msgctxt "P"
#~ msgid "<a name=\"example-application-authorizing-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:286
#: ./docs/8.x/broadcasting.md:493
#: ./docs/9.x/broadcasting.md:311
#: ./docs/9.x/broadcasting.md:521
#: ./docs/10.x/broadcasting.md:385
#: ./docs/10.x/broadcasting.md:580
#: ./docs/11.x/broadcasting.md:400
#: ./docs/11.x/broadcasting.md:595
#: ./docs/master/broadcasting.md:454
#: ./docs/master/broadcasting.md:649
msgctxt "H4"
msgid "Authorizing Channels"
msgstr "授權頻道"

#: ./docs/8.x/broadcasting.md:288
#: ./docs/9.x/broadcasting.md:313
#: ./docs/10.x/broadcasting.md:387
#: ./docs/11.x/broadcasting.md:402
#: ./docs/master/broadcasting.md:456
msgctxt "P"
msgid "Remember, users must be authorized to listen on private channels. We may define our channel authorization rules in our application's `routes/channels.php` file. In this example, we need to verify that any user attempting to listen on the private `orders.1` channel is actually the creator of the order:"
msgstr "請記得，使用者必須要經過授權才能監聽私有頻道。我們可以在 `routes/channels.php` 檔中定義頻道權限規則。在此例子中，我們需要認證嘗試監聽私有頻道 `orders.1` 的使用者是否為該訂單實際的建立人："

#: ./docs/8.x/broadcasting.md:290
#: ./docs/9.x/broadcasting.md:315
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"Broadcast::channel('orders.{orderId}', function ($user, $orderId) {\n"
"    return $user->id === Order::findOrNew($orderId)->user_id;\n"
"});"
msgstr ""

#: ./docs/11.x/broadcasting.md:296
#: ./docs/master/broadcasting.md:350
msgctxt "P"
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. The `install:broadcasting` command creates an Echo configuration file at `resources/js/echo.js`; however, the default configuration in this file is intended for Laravel Reverb. You may copy the configuration below to transition your configuration to Ably:"
msgstr ""

#: ./docs/8.x/broadcasting.md:296
#: ./docs/8.x/broadcasting.md:553
#: ./docs/9.x/broadcasting.md:321
#: ./docs/9.x/broadcasting.md:585
#: ./docs/10.x/broadcasting.md:396
#: ./docs/10.x/broadcasting.md:646
#: ./docs/11.x/broadcasting.md:411
#: ./docs/11.x/broadcasting.md:612
#: ./docs/master/broadcasting.md:465
#: ./docs/master/broadcasting.md:666
msgctxt "P"
msgid "The `channel` method accepts two arguments: the name of the channel and a callback which returns `true` or `false` indicating whether the user is authorized to listen on the channel."
msgstr "`channel` 方法接收 2 個引數：頻道的名稱，以及會回傳 `true` 與 `false` 的回呼。這個回呼用來判斷使用者是否已授權監聽此頻道。"

#: ./docs/11.x/broadcasting.md:298
#: ./docs/master/broadcasting.md:352
msgctxt "CODE: js"
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"import Pusher from 'pusher-js';\n"
"window.Pusher = Pusher;\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: import.meta.env.VITE_ABLY_PUBLIC_KEY,\n"
"    wsHost: 'realtime-pusher.ably.io',\n"
"    wsPort: 443,\n"
"    disableStats: true,\n"
"    encrypted: true,\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:298
#: ./docs/8.x/broadcasting.md:555
#: ./docs/9.x/broadcasting.md:323
#: ./docs/9.x/broadcasting.md:587
#: ./docs/10.x/broadcasting.md:398
#: ./docs/10.x/broadcasting.md:648
#: ./docs/11.x/broadcasting.md:413
#: ./docs/11.x/broadcasting.md:614
#: ./docs/master/broadcasting.md:467
#: ./docs/master/broadcasting.md:668
msgctxt "P"
msgid "All authorization callbacks receive the currently authenticated user as their first argument and any additional wildcard parameters as their subsequent arguments. In this example, we are using the `{orderId}` placeholder to indicate that the \"ID\" portion of the channel name is a wildcard."
msgstr "所有的授權回呼都會收到目前登入使用者作為其第一個引數，而接下來的引數則是其他額外的萬用字元參數。在這個例子中，我們使用了 `{orderId}` 預留位置來標示頻道名稱中的「ID」部分是萬用字元。"

#: ./docs/8.x/broadcasting.md:300
#: ./docs/9.x/broadcasting.md:325
#: ./docs/10.x/broadcasting.md:400
#: ./docs/11.x/broadcasting.md:415
#: ./docs/master/broadcasting.md:469
#~ msgctxt "P"
#~ msgid "<a name=\"listening-for-event-broadcasts\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:301
#: ./docs/9.x/broadcasting.md:326
msgctxt "H4"
msgid "Listening For Event Broadcasts"
msgstr "監聽事件廣播"

#: ./docs/8.x/broadcasting.md:303
#: ./docs/9.x/broadcasting.md:328
#: ./docs/10.x/broadcasting.md:403
#: ./docs/11.x/broadcasting.md:418
#: ./docs/master/broadcasting.md:472
msgctxt "P"
msgid "Next, all that remains is to listen for the event in our JavaScript application. We can do this using [Laravel Echo](#client-side-installation). First, we'll use the `private` method to subscribe to the private channel. Then, we may use the `listen` method to listen for the `OrderShipmentStatusUpdated` event. By default, all of the event's public properties will be included on the broadcast event:"
msgstr "接著，剩下的工作就是在 JavaScript 程式碼內監聽事件了。我們可以使用 [Laravel Echo](#client-side-installation)。首先，我們要先用 `private` 方法來監聽私有頻道。接著，可以監聽「`listen`」`OrderShipmentStatusUpdated` 事件。預設情況下，該事件的所有公共屬性都會被包含在廣播事件內："

#: ./docs/8.x/broadcasting.md:305
#: ./docs/9.x/broadcasting.md:330
#: ./docs/10.x/broadcasting.md:405
#: ./docs/11.x/broadcasting.md:420
#: ./docs/master/broadcasting.md:474
msgctxt "CODE: js"
msgid ""
"Echo.private(`orders.${orderId}`)\n"
"    .listen('OrderShipmentStatusUpdated', (e) => {\n"
"        console.log(e.order);\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:312
#: ./docs/9.x/broadcasting.md:337
#: ./docs/10.x/broadcasting.md:412
#: ./docs/11.x/broadcasting.md:427
#: ./docs/master/broadcasting.md:481
#~ msgctxt "P"
#~ msgid "<a name=\"defining-broadcast-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:313
#: ./docs/9.x/broadcasting.md:338
#: ./docs/10.x/broadcasting.md:413
#: ./docs/11.x/broadcasting.md:428
#: ./docs/master/broadcasting.md:482
msgctxt "H2"
msgid "Defining Broadcast Events"
msgstr "定義廣播事件"

#: ./docs/11.x/broadcasting.md:314
#: ./docs/master/broadcasting.md:368
msgctxt "P"
msgid "You may have noticed our Ably Echo configuration references a `VITE_ABLY_PUBLIC_KEY` environment variable. This variable's value should be your Ably public key. Your public key is the portion of your Ably key that occurs before the `:` character."
msgstr ""

#: ./docs/8.x/broadcasting.md:315
#: ./docs/9.x/broadcasting.md:340
#: ./docs/10.x/broadcasting.md:415
#: ./docs/11.x/broadcasting.md:430
#: ./docs/master/broadcasting.md:484
msgctxt "P"
msgid "To inform Laravel that a given event should be broadcast, you must implement the `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` interface on the event class. This interface is already imported into all event classes generated by the framework so you may easily add it to any of your events."
msgstr "為了告訴 Laravel 應廣播某個給定的事件，我們必須要在事件類別上實作 `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` 介面。在所有產生出來的事件類別上，框架已經幫你引入這個介面了，因此你可以輕鬆地將該介面加至任何事件上。"

#: ./docs/11.x/broadcasting.md:316
#: ./docs/master/broadcasting.md:370
msgctxt "P"
msgid "Once you have adjusted the Echo configuration according to your needs, you may compile your application's assets:"
msgstr ""

#: ./docs/8.x/broadcasting.md:317
#: ./docs/9.x/broadcasting.md:342
#: ./docs/10.x/broadcasting.md:417
#: ./docs/11.x/broadcasting.md:432
#: ./docs/master/broadcasting.md:486
msgctxt "P"
msgid "The `ShouldBroadcast` interface requires you to implement a single method: `broadcastOn`. The `broadcastOn` method should return a channel or array of channels that the event should broadcast on. The channels should be instances of `Channel`, `PrivateChannel`, or `PresenceChannel`. Instances of `Channel` represent public channels that any user may subscribe to, while `PrivateChannels` and `PresenceChannels` represent private channels that require [channel authorization](#authorizing-channels):"
msgstr "`ShouldBroadcast` 介面只要求實作單一方法：`broadcastOn`。`broadcastOn` 方法應回傳一個頻道，或是一個包含頻道的陣列。這些頻道是事件要進行廣播的頻道。頻道應為 `Channel`, `PrivateChannel` 或 `PresenceChannel` 的實體。`Channel` 的實體代表任何使用者都能監聽的公共頻道，而 `PrivateChannel` 與 `PresenceChannels` 代表需要進行[頻道授權](#authorizing-channels)的私有頻道："

#: ./docs/10.x/broadcasting.md:318
#: ./docs/11.x/broadcasting.md:333
#: ./docs/master/broadcasting.md:387
msgctxt "H3"
msgid "Using an Example Application"
msgstr ""

#: ./docs/8.x/broadcasting.md:319
#: ./docs/9.x/broadcasting.md:344
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class ServerCreated implements ShouldBroadcast\n"
"{\n"
"    use SerializesModels;\n"
"\n"
"    /**\n"
"     * The user that created the server.\n"
"     *\n"
"     * @var \\App\\Models\\User\n"
"     */\n"
"    public $user;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function __construct(User $user)\n"
"    {\n"
"        $this->user = $user;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the channels the event should broadcast on.\n"
"     *\n"
"     * @return Channel|array\n"
"     */\n"
"    public function broadcastOn()\n"
"    {\n"
"        return new PrivateChannel('user.'.$this->user->id);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:322
#: ./docs/11.x/broadcasting.md:337
#: ./docs/master/broadcasting.md:391
msgctxt "P"
msgid "In our application, let's assume we have a page that allows users to view the shipping status for their orders. Let's also assume that an `OrderShipmentStatusUpdated` event is fired when a shipping status update is processed by the application:"
msgstr ""

#: ./docs/10.x/broadcasting.md:333
#: ./docs/11.x/broadcasting.md:348
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"{\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:356
#: ./docs/11.x/broadcasting.md:371
#: ./docs/master/broadcasting.md:425
msgctxt "CODE"
msgid ""
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"\n"
"/**\n"
" * Get the channel the event should broadcast on.\n"
" */\n"
"public function broadcastOn(): Channel\n"
"{\n"
"    return new PrivateChannel('orders.'.$this->order->id);\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:364
#: ./docs/9.x/broadcasting.md:389
#: ./docs/10.x/broadcasting.md:455
#: ./docs/11.x/broadcasting.md:470
#: ./docs/master/broadcasting.md:524
msgctxt "P"
msgid "After implementing the `ShouldBroadcast` interface, you only need to [fire the event](/docs/{{version}}/events) as you normally would. Once the event has been fired, a [queued job](/docs/{{version}}/queues) will automatically broadcast the event using your specified broadcast driver."
msgstr "實作完 `ShouldBroadcast` 介面後，只需要像平常一樣[觸發事件](/docs/{{version}}/events)即可。事件被觸發後，[佇列任務](/docs/{{version}}/queues)會自動通過指定的 Broadcast Driver 來廣播事件。"

#: ./docs/8.x/broadcasting.md:366
#: ./docs/9.x/broadcasting.md:391
#: ./docs/10.x/broadcasting.md:457
#: ./docs/11.x/broadcasting.md:472
#: ./docs/master/broadcasting.md:526
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-name\"></a>"
#~ msgstr ""

#: ./docs/10.x/broadcasting.md:367
#: ./docs/11.x/broadcasting.md:382
#: ./docs/master/broadcasting.md:436
msgctxt "P"
msgid "If you wish the event to broadcast on multiple channels, you may return an `array` instead:"
msgstr "若想要讓 Event 被 Broadcast 到多個 Channel，可以回傳一組 `array`："

#: ./docs/8.x/broadcasting.md:367
#: ./docs/9.x/broadcasting.md:392
#: ./docs/10.x/broadcasting.md:458
#: ./docs/11.x/broadcasting.md:473
#: ./docs/master/broadcasting.md:527
msgctxt "H3"
msgid "Broadcast Name"
msgstr "Broadcast 名稱"

#: ./docs/10.x/broadcasting.md:369
#: ./docs/11.x/broadcasting.md:384
#: ./docs/master/broadcasting.md:438
msgctxt "CODE"
msgid ""
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"\n"
"/**\n"
" * Get the channels the event should broadcast on.\n"
" *\n"
" * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n"
" */\n"
"public function broadcastOn(): array\n"
"{\n"
"    return [\n"
"        new PrivateChannel('orders.'.$this->order->id),\n"
"        // ...\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:369
#: ./docs/9.x/broadcasting.md:394
#: ./docs/10.x/broadcasting.md:460
#: ./docs/11.x/broadcasting.md:475
#: ./docs/master/broadcasting.md:529
msgctxt "P"
msgid "By default, Laravel will broadcast the event using the event's class name. However, you may customize the broadcast name by defining a `broadcastAs` method on the event:"
msgstr "預設情況下，Laravel 會使用事件的類別名來進行廣播。不過，也可以在事件上定義 `broadcastAs` 方法來自訂 Broadcast 名稱："

#: ./docs/8.x/broadcasting.md:371
#: ./docs/9.x/broadcasting.md:396
msgctxt "CODE"
msgid ""
"/**\n"
" * The event's broadcast name.\n"
" *\n"
" * @return string\n"
" */\n"
"public function broadcastAs()\n"
"{\n"
"    return 'server.created';\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:381
#: ./docs/9.x/broadcasting.md:406
#: ./docs/10.x/broadcasting.md:470
#: ./docs/11.x/broadcasting.md:485
#: ./docs/master/broadcasting.md:539
msgctxt "P"
msgid "If you customize the broadcast name using the `broadcastAs` method, you should make sure to register your listener with a leading `.` character. This will instruct Echo to not prepend the application's namespace to the event:"
msgstr "若使用 `broadcastAs` 方法來自訂 Broadcast 名稱，則應確保註冊監聽程式時有加上前置 `.` 字元。加上該前置字元可用來告訴 Echo 不要在事件前方加上專案的命名空間："

#: ./docs/8.x/broadcasting.md:383
#: ./docs/9.x/broadcasting.md:408
#: ./docs/10.x/broadcasting.md:472
#: ./docs/11.x/broadcasting.md:487
#: ./docs/master/broadcasting.md:541
msgctxt "CODE"
msgid ""
".listen('.server.created', function (e) {\n"
"    ....\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:387
#: ./docs/9.x/broadcasting.md:412
#: ./docs/10.x/broadcasting.md:476
#: ./docs/11.x/broadcasting.md:491
#: ./docs/master/broadcasting.md:545
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-data\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:388
#: ./docs/9.x/broadcasting.md:413
#: ./docs/10.x/broadcasting.md:477
#: ./docs/11.x/broadcasting.md:492
#: ./docs/master/broadcasting.md:546
msgctxt "H3"
msgid "Broadcast Data"
msgstr "Broadcast 資料"

#: ./docs/10.x/broadcasting.md:389
#: ./docs/11.x/broadcasting.md:404
#: ./docs/master/broadcasting.md:458
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"use App\\Models\\User;\n"
"\n"
"Broadcast::channel('orders.{orderId}', function (User $user, int $orderId) {\n"
"    return $user->id === Order::findOrNew($orderId)->user_id;\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:390
#: ./docs/9.x/broadcasting.md:415
#: ./docs/10.x/broadcasting.md:479
#: ./docs/11.x/broadcasting.md:494
#: ./docs/master/broadcasting.md:548
msgctxt "P"
msgid "When an event is broadcast, all of its `public` properties are automatically serialized and broadcast as the event's payload, allowing you to access any of its public data from your JavaScript application. So, for example, if your event has a single public `$user` property that contains an Eloquent model, the event's broadcast payload would be:"
msgstr "廣播事件時，事件所有的 `public` 屬性都會被自動序列化，並作為事件的 Payload 進行廣播，讓你能在 JavaScript 程式碼中存取事件的所有公共資料。因此，舉例來說，假設我們的事件有一個 public `$user` 屬性，其中包含了 Eloquent Model，那麼事件的 Broadcast Payload 會是："

#: ./docs/8.x/broadcasting.md:392
#: ./docs/9.x/broadcasting.md:417
#: ./docs/10.x/broadcasting.md:481
#: ./docs/11.x/broadcasting.md:496
#: ./docs/master/broadcasting.md:550
msgctxt "CODE"
msgid ""
"{\n"
"    \"user\": {\n"
"        \"id\": 1,\n"
"        \"name\": \"Patrick Stewart\"\n"
"        ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:400
#: ./docs/9.x/broadcasting.md:427
#: ./docs/10.x/broadcasting.md:491
#: ./docs/11.x/broadcasting.md:506
#: ./docs/master/broadcasting.md:560
msgctxt "P"
msgid "However, if you wish to have more fine-grained control over your broadcast payload, you may add a `broadcastWith` method to your event. This method should return the array of data that you wish to broadcast as the event payload:"
msgstr "不過，若想對 Broadcast Payload 進一步地控制，可以在事件內加上一個 `broadcastWith` 方法。這個方法應回傳一個陣列，包含要作為事件 Payload 使用的資料："

#: ./docs/10.x/broadcasting.md:401
#: ./docs/11.x/broadcasting.md:416
#: ./docs/master/broadcasting.md:470
msgctxt "H4"
msgid "Listening for Event Broadcasts"
msgstr ""

#: ./docs/8.x/broadcasting.md:402
#: ./docs/9.x/broadcasting.md:429
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the data to broadcast.\n"
" *\n"
" * @return array\n"
" */\n"
"public function broadcastWith()\n"
"{\n"
"    return ['id' => $this->user->id];\n"
"}"
msgstr ""

#: ./docs/master/broadcasting.md:402
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"{\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Order\n"
"     */\n"
"    public $order;\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:412
#: ./docs/9.x/broadcasting.md:439
#: ./docs/10.x/broadcasting.md:503
#: ./docs/11.x/broadcasting.md:518
#: ./docs/master/broadcasting.md:572
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-queue\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:413
#: ./docs/9.x/broadcasting.md:440
#: ./docs/10.x/broadcasting.md:504
#: ./docs/11.x/broadcasting.md:519
#: ./docs/master/broadcasting.md:573
msgctxt "H3"
msgid "Broadcast Queue"
msgstr "Broadcast 佇列"

#: ./docs/8.x/broadcasting.md:415
#: ./docs/9.x/broadcasting.md:442
#: ./docs/10.x/broadcasting.md:506
#: ./docs/11.x/broadcasting.md:521
#: ./docs/master/broadcasting.md:575
msgctxt "P"
msgid "By default, each broadcast event is placed on the default queue for the default queue connection specified in your `queue.php` configuration file. You may customize the queue connection and name used by the broadcaster by defining `connection` and `queue` properties on your event class:"
msgstr "預設情況下，所有的廣播事件都會使用 `queue.php` 設定檔中的預設佇列連連。可以通過在事件類別內定義 `queue` 屬性來自訂 Broadcaster 要使用的佇列連線名稱："

#: ./docs/8.x/broadcasting.md:417
#: ./docs/9.x/broadcasting.md:444
#: ./docs/10.x/broadcasting.md:508
#: ./docs/11.x/broadcasting.md:523
#: ./docs/master/broadcasting.md:577
msgctxt "CODE"
msgid ""
"/**\n"
" * The name of the queue connection to use when broadcasting the event.\n"
" *\n"
" * @var string\n"
" */\n"
"public $connection = 'redis';\n"
"\n"
"/**\n"
" * The name of the queue on which to place the broadcasting job.\n"
" *\n"
" * @var string\n"
" */\n"
"public $queue = 'default';"
msgstr ""

#: ./docs/10.x/broadcasting.md:419
#: ./docs/11.x/broadcasting.md:434
#: ./docs/master/broadcasting.md:488
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class ServerCreated implements ShouldBroadcast\n"
"{\n"
"    use SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     */\n"
"    public function __construct(\n"
"        public User $user,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Get the channels the event should broadcast on.\n"
"     *\n"
"     * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n"
"     */\n"
"    public function broadcastOn(): array\n"
"    {\n"
"        return [\n"
"            new PrivateChannel('user.'.$this->user->id),\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:431
#: ./docs/9.x/broadcasting.md:458
#: ./docs/10.x/broadcasting.md:522
#: ./docs/11.x/broadcasting.md:537
#: ./docs/master/broadcasting.md:591
msgctxt "P"
msgid "Alternatively, you may customize the queue name by defining a `broadcastQueue` method on your event:"
msgstr "或者，你也可以通過在事件中定義 `broadcastQueue` 方法來自訂佇列名稱："

#: ./docs/8.x/broadcasting.md:433
#: ./docs/9.x/broadcasting.md:460
msgctxt "CODE"
msgid ""
"/**\n"
" * The name of the queue on which to place the broadcasting job.\n"
" *\n"
" * @return string\n"
" */\n"
"public function broadcastQueue()\n"
"{\n"
"    return 'default';\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:443
#: ./docs/9.x/broadcasting.md:470
#: ./docs/10.x/broadcasting.md:532
#: ./docs/11.x/broadcasting.md:547
#: ./docs/master/broadcasting.md:601
msgctxt "P"
msgid "If you would like to broadcast your event using the `sync` queue instead of the default queue driver, you can implement the `ShouldBroadcastNow` interface instead of `ShouldBroadcast`:"
msgstr "若像使用 `sync` 佇列來代替預設的佇列 Driver，可以使用 `ShouldBroadcastNow` 來代替 `ShouldBroadcast` 進行實作："

#: ./docs/8.x/broadcasting.md:445
#: ./docs/9.x/broadcasting.md:472
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcastNow\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:454
#: ./docs/9.x/broadcasting.md:481
#: ./docs/10.x/broadcasting.md:543
#: ./docs/11.x/broadcasting.md:558
#: ./docs/master/broadcasting.md:612
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-conditions\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:455
#: ./docs/9.x/broadcasting.md:482
#: ./docs/10.x/broadcasting.md:544
#: ./docs/11.x/broadcasting.md:559
#: ./docs/master/broadcasting.md:613
msgctxt "H3"
msgid "Broadcast Conditions"
msgstr "Broadcast 條件"

#: ./docs/8.x/broadcasting.md:457
#: ./docs/9.x/broadcasting.md:484
#: ./docs/10.x/broadcasting.md:546
#: ./docs/11.x/broadcasting.md:561
#: ./docs/master/broadcasting.md:615
msgctxt "P"
msgid "Sometimes you want to broadcast your event only if a given condition is true. You may define these conditions by adding a `broadcastWhen` method to your event class:"
msgstr "有時候我們可能只想在滿足給定條件的時候才廣播事件。可以通過在事件類別上新增 `broadcastWhen` 方法來在其中定義這些條件："

#: ./docs/8.x/broadcasting.md:459
#: ./docs/9.x/broadcasting.md:486
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine if this event should broadcast.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function broadcastWhen()\n"
"{\n"
"    return $this->order->value > 100;\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:462
#: ./docs/11.x/broadcasting.md:477
#: ./docs/master/broadcasting.md:531
msgctxt "CODE"
msgid ""
"/**\n"
" * The event's broadcast name.\n"
" */\n"
"public function broadcastAs(): string\n"
"{\n"
"    return 'server.created';\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:469
#: ./docs/9.x/broadcasting.md:496
#: ./docs/10.x/broadcasting.md:556
#: ./docs/11.x/broadcasting.md:571
#: ./docs/master/broadcasting.md:625
#~ msgctxt "P"
#~ msgid "<a name=\"broadcasting-and-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:470
#: ./docs/9.x/broadcasting.md:497
msgctxt "H4"
msgid "Broadcasting & Database Transactions"
msgstr "Broadcast 與資料庫 Transaction"

#: ./docs/8.x/broadcasting.md:472
#: ./docs/9.x/broadcasting.md:499
#: ./docs/10.x/broadcasting.md:559
#: ./docs/11.x/broadcasting.md:574
#: ./docs/master/broadcasting.md:628
msgctxt "P"
msgid "When broadcast events are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your event depends on these models, unexpected errors can occur when the job that broadcasts the event is processed."
msgstr "當廣播事件是在資料庫 Transaction 內分派的時候，這個事件可能會在資料庫 Transaction 被 Commit 前被佇列進行處理了。發生這種情況時，在資料庫 Transaction 期間對 Model 或資料庫記錄所做出的更新可能都還未反應到資料庫內。另外，所有在 Transaction 期間新增的 Model 或資料庫記錄也可能還未出現在資料庫內。若事件有依賴這些 Model 的話，在處理廣播事件的任務時可能會出現未預期的錯誤。"

#: ./docs/8.x/broadcasting.md:474
#: ./docs/9.x/broadcasting.md:501
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular broadcast event should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the event class:"
msgstr "若佇列連線的 `after_commit` 設定選項是 `false`，那麼就可以通過在事件類別上定義 `$afterCommit` 屬性來標示出特定的廣播事件應在資料庫 Transaction 被 Commit 後才可進行分派："

#: ./docs/8.x/broadcasting.md:476
#: ./docs/9.x/broadcasting.md:503
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class ServerCreated implements ShouldBroadcast\n"
"{\n"
"    use SerializesModels;\n"
"\n"
"    public $afterCommit = true;\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:490
#: ./docs/9.x/broadcasting.md:518
#: ./docs/10.x/broadcasting.md:577
#: ./docs/11.x/broadcasting.md:592
#: ./docs/master/broadcasting.md:646
msgctxt "P"
msgid "To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr "要瞭解更多有關這類問題的解決方法，請參考有關[佇列任務與資料庫 Transaction](/docs/{{version}}/queues#jobs-and-database-transactions) 有關的說明文件。"

#: ./docs/8.x/broadcasting.md:492
#: ./docs/9.x/broadcasting.md:520
#: ./docs/10.x/broadcasting.md:579
#: ./docs/11.x/broadcasting.md:594
#: ./docs/master/broadcasting.md:648
#~ msgctxt "P"
#~ msgid "<a name=\"authorizing-channels\"></a>"
#~ msgstr ""

#: ./docs/10.x/broadcasting.md:493
#: ./docs/11.x/broadcasting.md:508
#: ./docs/master/broadcasting.md:562
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the data to broadcast.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function broadcastWith(): array\n"
"{\n"
"    return ['id' => $this->user->id];\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:495
#: ./docs/9.x/broadcasting.md:523
#: ./docs/10.x/broadcasting.md:582
msgctxt "P"
msgid "Private channels require you to authorize that the currently authenticated user can actually listen on the channel. This is accomplished by making an HTTP request to your Laravel application with the channel name and allowing your application to determine if the user can listen on that channel. When using [Laravel Echo](#client-side-installation), the HTTP request to authorize subscriptions to private channels will be made automatically; however, you do need to define the proper routes to respond to these requests."
msgstr "使用私有頻道，則需要將目前已登入的使用者授權為可監聽該頻道。要授權使用者，需要向 Laravel 端傳送一個包含頻道名稱的 HTTP 請求來讓網站判斷使用者能否監聽該頻道。使用 [Laravel Echo](#client-side-installation) 時，會自動建立用於授權訂閱私有頻道的 HTTP 請求。不過，我們還是需要定義適當的路由來回應這些請求。"

#: ./docs/8.x/broadcasting.md:497
#: ./docs/9.x/broadcasting.md:525
#: ./docs/10.x/broadcasting.md:584
#~ msgctxt "P"
#~ msgid "<a name=\"defining-authorization-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:498
#: ./docs/9.x/broadcasting.md:526
#: ./docs/10.x/broadcasting.md:585
msgctxt "H3"
msgid "Defining Authorization Routes"
msgstr "定義授權路由"

#: ./docs/8.x/broadcasting.md:500
#: ./docs/9.x/broadcasting.md:528
#: ./docs/10.x/broadcasting.md:587
msgctxt "P"
msgid "Thankfully, Laravel makes it easy to define the routes to respond to channel authorization requests. In the `App\\Providers\\BroadcastServiceProvider` included with your Laravel application, you will see a call to the `Broadcast::routes` method. This method will register the `/broadcasting/auth` route to handle authorization requests:"
msgstr "好佳在，在 Laravel 中定義回應頻道授權請求的路由非常容易。在 Laravel 中隨附的 `App\\Providers\\BroadcastServiceProvider` 內，可以看到一個 `Broadcast::routes` 方法的呼叫。這個方法會註冊 `/broadcasting/auth` 路由來處理授權請求："

#: ./docs/8.x/broadcasting.md:502
#: ./docs/9.x/broadcasting.md:530
#: ./docs/10.x/broadcasting.md:589
msgctxt "CODE"
msgid "Broadcast::routes();"
msgstr ""

#: ./docs/8.x/broadcasting.md:504
#: ./docs/9.x/broadcasting.md:532
#: ./docs/10.x/broadcasting.md:591
msgctxt "P"
msgid "The `Broadcast::routes` method will automatically place its routes within the `web` middleware group; however, you may pass an array of route attributes to the method if you would like to customize the assigned attributes:"
msgstr "`Broadcast::routes` 方法會自動將其中的路由放置於 `web` Middleware 群組內。不過，若想自訂指派的屬性，也可以傳入包含路由屬性的陣列："

#: ./docs/8.x/broadcasting.md:506
#: ./docs/9.x/broadcasting.md:534
#: ./docs/10.x/broadcasting.md:593
msgctxt "CODE"
msgid "Broadcast::routes($attributes);"
msgstr ""

#: ./docs/8.x/broadcasting.md:508
#: ./docs/9.x/broadcasting.md:536
#: ./docs/10.x/broadcasting.md:595
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-authorization-endpoint\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:509
#: ./docs/9.x/broadcasting.md:537
msgctxt "H4"
msgid "Customizing The Authorization Endpoint"
msgstr "自訂授權 Endpoint"

#: ./docs/8.x/broadcasting.md:511
#: ./docs/9.x/broadcasting.md:539
#: ./docs/10.x/broadcasting.md:598
msgctxt "P"
msgid "By default, Echo will use the `/broadcasting/auth` endpoint to authorize channel access. However, you may specify your own authorization endpoint by passing the `authEndpoint` configuration option to your Echo instance:"
msgstr "預設情況下，Echo 會使用 `/broadcasting/auth` Endpoint 來授權頻道存取。不過，也可以通過將 `authEndpoint` 設定選項傳給 Echo 實體來指定你自己的授權 Endpoint："

#: ./docs/8.x/broadcasting.md:513
#: ./docs/9.x/broadcasting.md:541
#: ./docs/10.x/broadcasting.md:600
msgctxt "CODE"
msgid ""
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    // ...\n"
"    authEndpoint: '/custom/endpoint/auth'\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:519
#: ./docs/9.x/broadcasting.md:549
#: ./docs/10.x/broadcasting.md:608
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-authorization-request\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:520
#: ./docs/9.x/broadcasting.md:550
msgctxt "H4"
msgid "Customizing The Authorization Request"
msgstr "自訂授權 Request"

#: ./docs/8.x/broadcasting.md:522
#: ./docs/9.x/broadcasting.md:552
#: ./docs/10.x/broadcasting.md:611
msgctxt "P"
msgid "You can customize how Laravel Echo performs authorization requests by providing a custom authorizer when initializing Echo:"
msgstr "我們可以自訂 Laravel Echo 要如何執行授權請求。只需要在初始化 Echo 時提供一個自訂授權程式即可："

#: ./docs/10.x/broadcasting.md:524
#: ./docs/11.x/broadcasting.md:539
#: ./docs/master/broadcasting.md:593
msgctxt "CODE"
msgid ""
"/**\n"
" * The name of the queue on which to place the broadcasting job.\n"
" */\n"
"public function broadcastQueue(): string\n"
"{\n"
"    return 'default';\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:524
msgctxt "CODE"
msgid ""
"window.Echo = new Echo({\n"
"    // ...\n"
"    authorizer: (channel, options) => {\n"
"        return {\n"
"            authorize: (socketId, callback) => {\n"
"                axios.post('/api/broadcasting/auth', {\n"
"                    socket_id: socketId,\n"
"                    channel_name: channel.name\n"
"                })\n"
"                .then(response => {\n"
"                    callback(false, response.data);\n"
"                })\n"
"                .catch(error => {\n"
"                    callback(true, error);\n"
"                });\n"
"            }\n"
"        };\n"
"    },\n"
"})"
msgstr ""

#: ./docs/10.x/broadcasting.md:534
#: ./docs/11.x/broadcasting.md:549
#: ./docs/master/broadcasting.md:603
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcastNow\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:544
#: ./docs/9.x/broadcasting.md:576
#: ./docs/10.x/broadcasting.md:635
#: ./docs/11.x/broadcasting.md:601
#: ./docs/master/broadcasting.md:655
#~ msgctxt "P"
#~ msgid "<a name=\"defining-authorization-callbacks\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:545
#: ./docs/9.x/broadcasting.md:577
#: ./docs/10.x/broadcasting.md:636
#: ./docs/11.x/broadcasting.md:602
#: ./docs/master/broadcasting.md:656
msgctxt "H3"
msgid "Defining Authorization Callbacks"
msgstr "定義授權回呼"

#: ./docs/8.x/broadcasting.md:547
#: ./docs/9.x/broadcasting.md:579
#: ./docs/10.x/broadcasting.md:638
msgctxt "P"
msgid "Next, we need to define the logic that will actually determine if the currently authenticated user can listen to a given channel. This is done in the `routes/channels.php` file that is included with your application. In this file, you may use the `Broadcast::channel` method to register channel authorization callbacks:"
msgstr "接著，我們需要定義實際上用來判斷目前登入使用者是否能監聽給定頻道的邏輯。這個定義放在專案內`routes/channels.php` 檔案中。在這個檔案中，可以使用 `Broadcast::channel` 方法來註冊頻道授權回呼："

#: ./docs/10.x/broadcasting.md:548
#: ./docs/11.x/broadcasting.md:563
#: ./docs/master/broadcasting.md:617
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine if this event should broadcast.\n"
" */\n"
"public function broadcastWhen(): bool\n"
"{\n"
"    return $this->order->value > 100;\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:549
#: ./docs/9.x/broadcasting.md:581
msgctxt "CODE"
msgid ""
"Broadcast::channel('orders.{orderId}', function ($user, $orderId) {\n"
"    return $user->id === Order::findOrNew($orderId)->user_id;\n"
"});"
msgstr ""

#: ./docs/9.x/broadcasting.md:554
#: ./docs/10.x/broadcasting.md:613
msgctxt "CODE: js"
msgid ""
"window.Echo = new Echo({\n"
"    // ...\n"
"    authorizer: (channel, options) => {\n"
"        return {\n"
"            authorize: (socketId, callback) => {\n"
"                axios.post('/api/broadcasting/auth', {\n"
"                    socket_id: socketId,\n"
"                    channel_name: channel.name\n"
"                })\n"
"                .then(response => {\n"
"                    callback(null, response.data);\n"
"                })\n"
"                .catch(error => {\n"
"                    callback(error);\n"
"                });\n"
"            }\n"
"        };\n"
"    },\n"
"})"
msgstr ""

#: ./docs/10.x/broadcasting.md:557
#: ./docs/11.x/broadcasting.md:572
#: ./docs/master/broadcasting.md:626
msgctxt "H4"
msgid "Broadcasting and Database Transactions"
msgstr ""

#: ./docs/8.x/broadcasting.md:557
#: ./docs/9.x/broadcasting.md:589
#: ./docs/10.x/broadcasting.md:656
#: ./docs/11.x/broadcasting.md:622
#: ./docs/master/broadcasting.md:676
#~ msgctxt "P"
#~ msgid "<a name=\"authorization-callback-model-binding\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:558
#: ./docs/9.x/broadcasting.md:590
#: ./docs/10.x/broadcasting.md:657
#: ./docs/11.x/broadcasting.md:623
#: ./docs/master/broadcasting.md:677
msgctxt "H4"
msgid "Authorization Callback Model Binding"
msgstr "授權回呼的 Model "

#: ./docs/8.x/broadcasting.md:560
#: ./docs/9.x/broadcasting.md:592
#: ./docs/10.x/broadcasting.md:659
#: ./docs/11.x/broadcasting.md:625
#: ./docs/master/broadcasting.md:679
msgctxt "P"
msgid "Just like HTTP routes, channel routes may also take advantage of implicit and explicit [route model binding](/docs/{{version}}/routing#route-model-binding). For example, instead of receiving a string or numeric order ID, you may request an actual `Order` model instance:"
msgstr "就像 HTTP 路由一樣，頻道路由也能使用顯式或隱式[路由 Model ](/docs/{{version}}/routing#route-model-binding)的功能。舉例來說，可以不接收字串或數字的 Order ID，而要求實際的 `Order` Model 實體："

#: ./docs/10.x/broadcasting.md:561
#: ./docs/11.x/broadcasting.md:576
#: ./docs/master/broadcasting.md:630
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular broadcast event should be dispatched after all open database transactions have been committed by implementing the `ShouldDispatchAfterCommit` interface on the event class:"
msgstr "即使佇列連線的 `after_commit` 設定選項被設為 `false`，還是可以通過在 Event 類別上實作 `ShouldDispatchAfterCommit` 介面來讓 Laravel 知道要在所有開啟的資料庫 Transaction 被 Commit 後廣播該 Event："

#: ./docs/8.x/broadcasting.md:562
#: ./docs/9.x/broadcasting.md:594
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"\n"
"Broadcast::channel('orders.{order}', function ($user, Order $order) {\n"
"    return $user->id === $order->user_id;\n"
"});"
msgstr ""

#: ./docs/10.x/broadcasting.md:563
#: ./docs/11.x/broadcasting.md:578
#: ./docs/master/broadcasting.md:632
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Contracts\\Events\\ShouldDispatchAfterCommit;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class ServerCreated implements ShouldBroadcast, ShouldDispatchAfterCommit\n"
"{\n"
"    use SerializesModels;\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:568
#: ./docs/9.x/broadcasting.md:601
#: ./docs/10.x/broadcasting.md:669
#: ./docs/11.x/broadcasting.md:635
#: ./docs/master/broadcasting.md:689
msgctxt "P"
msgid "Unlike HTTP route model binding, channel model binding does not support automatic [implicit model binding scoping](/docs/{{version}}/routing#implicit-model-binding-scoping). However, this is rarely a problem because most channels can be scoped based on a single model's unique, primary key."
msgstr "與 HTTP 路由 Model 綁定不同，頻道的 Model 綁定不支援自動[為隱式 Model 綁定加上作用域]。不過，通常來說這不會造成問題，因為大部分的頻道都可以被放置與單一 Model 的獨立主鍵作用域內。"

#: ./docs/8.x/broadcasting.md:570
#: ./docs/9.x/broadcasting.md:603
#: ./docs/10.x/broadcasting.md:671
#: ./docs/11.x/broadcasting.md:637
#: ./docs/master/broadcasting.md:691
#~ msgctxt "P"
#~ msgid "<a name=\"authorization-callback-authentication\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:571
#: ./docs/9.x/broadcasting.md:604
#: ./docs/10.x/broadcasting.md:672
#: ./docs/11.x/broadcasting.md:638
#: ./docs/master/broadcasting.md:692
msgctxt "H4"
msgid "Authorization Callback Authentication"
msgstr "授權回呼認證"

#: ./docs/8.x/broadcasting.md:573
#: ./docs/9.x/broadcasting.md:606
#: ./docs/10.x/broadcasting.md:674
#: ./docs/11.x/broadcasting.md:640
#: ./docs/master/broadcasting.md:694
msgctxt "P"
msgid "Private and presence broadcast channels authenticate the current user via your application's default authentication guard. If the user is not authenticated, channel authorization is automatically denied and the authorization callback is never executed. However, you may assign multiple, custom guards that should authenticate the incoming request if necessary:"
msgstr "私有與 Presence 廣播頻道會通過專案預設的認證 Guard 來認證目前的使用者。若使用者未登入，則頻道認證會自動拒絕，且授權回呼永遠不會被執行。不過，若有需要，也可以指定多個自訂 Guard 來認證連入請求："

#: ./docs/8.x/broadcasting.md:575
#: ./docs/9.x/broadcasting.md:608
#: ./docs/10.x/broadcasting.md:676
#: ./docs/11.x/broadcasting.md:642
#: ./docs/master/broadcasting.md:696
msgctxt "CODE"
msgid ""
"Broadcast::channel('channel', function () {\n"
"    // ...\n"
"}, ['guards' => ['web', 'admin']]);"
msgstr ""

#: ./docs/8.x/broadcasting.md:579
#: ./docs/9.x/broadcasting.md:612
#: ./docs/10.x/broadcasting.md:680
#: ./docs/11.x/broadcasting.md:646
#: ./docs/master/broadcasting.md:700
#~ msgctxt "P"
#~ msgid "<a name=\"defining-channel-classes\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:580
#: ./docs/9.x/broadcasting.md:613
#: ./docs/10.x/broadcasting.md:681
#: ./docs/11.x/broadcasting.md:647
#: ./docs/master/broadcasting.md:701
msgctxt "H3"
msgid "Defining Channel Classes"
msgstr "定義 Channel 類別"

#: ./docs/8.x/broadcasting.md:582
#: ./docs/9.x/broadcasting.md:615
#: ./docs/10.x/broadcasting.md:683
#: ./docs/11.x/broadcasting.md:649
#: ./docs/master/broadcasting.md:703
msgctxt "P"
msgid "If your application is consuming many different channels, your `routes/channels.php` file could become bulky. So, instead of using closures to authorize channels, you may use channel classes. To generate a channel class, use the `make:channel` Artisan command. This command will place a new channel class in the `App/Broadcasting` directory."
msgstr "若你的專案會使用到許多不同的頻道，則 `routes/channels.php` 可能會變得很肥大。因此，比起使用閉包來授權頻道，我們可以改用頻道類別。要建立頻道類別，請使用 `make:channel` Artisan 指令。這個指令會在 `app/Broadcasting` 目錄內放置一個新的頻道類別。"

#: ./docs/8.x/broadcasting.md:584
#: ./docs/9.x/broadcasting.md:617
#: ./docs/10.x/broadcasting.md:685
#: ./docs/11.x/broadcasting.md:651
#: ./docs/master/broadcasting.md:705
msgctxt "CODE"
msgid "php artisan make:channel OrderChannel"
msgstr ""

#: ./docs/8.x/broadcasting.md:586
#: ./docs/9.x/broadcasting.md:621
#: ./docs/10.x/broadcasting.md:689
#: ./docs/11.x/broadcasting.md:655
#: ./docs/master/broadcasting.md:709
msgctxt "P"
msgid "Next, register your channel in your `routes/channels.php` file:"
msgstr "接著，在 `routes/channels.php` 檔案內註冊頻道："

#: ./docs/8.x/broadcasting.md:588
#: ./docs/9.x/broadcasting.md:623
#: ./docs/10.x/broadcasting.md:691
#: ./docs/11.x/broadcasting.md:657
#: ./docs/master/broadcasting.md:711
msgctxt "CODE"
msgid ""
"use App\\Broadcasting\\OrderChannel;\n"
"\n"
"Broadcast::channel('orders.{order}', OrderChannel::class);"
msgstr ""

#: ./docs/8.x/broadcasting.md:592
#: ./docs/9.x/broadcasting.md:627
#: ./docs/10.x/broadcasting.md:695
#: ./docs/11.x/broadcasting.md:661
#: ./docs/master/broadcasting.md:715
msgctxt "P"
msgid "Finally, you may place the authorization logic for your channel in the channel class' `join` method. This `join` method will house the same logic you would have typically placed in your channel authorization closure. You may also take advantage of channel model binding:"
msgstr "最後，可以將頻道的授權邏輯放在頻道類別的 `join` 方法內。這個 `join` 方法用來放置與平常放在頻道授權閉包相同的邏輯。也可以使用頻道 Model 綁定："

#: ./docs/8.x/broadcasting.md:594
#: ./docs/9.x/broadcasting.md:629
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Broadcasting;\n"
"\n"
"use App\\Models\\Order;\n"
"use App\\Models\\User;\n"
"\n"
"class OrderChannel\n"
"{\n"
"    /**\n"
"     * Create a new channel instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Authenticate the user's access to the channel.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return array|bool\n"
"     */\n"
"    public function join(User $user, Order $order)\n"
"    {\n"
"        return $user->id === $order->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:596
msgctxt "H4"
msgid "Customizing the Authorization Endpoint"
msgstr ""

#: ./docs/11.x/broadcasting.md:597
#: ./docs/master/broadcasting.md:651
msgctxt "P"
msgid "Private channels require you to authorize that the currently authenticated user can actually listen on the channel. This is accomplished by making an HTTP request to your Laravel application with the channel name and allowing your application to determine if the user can listen on that channel. When using [Laravel Echo](#client-side-installation), the HTTP request to authorize subscriptions to private channels will be made automatically."
msgstr ""

#: ./docs/11.x/broadcasting.md:599
#: ./docs/master/broadcasting.md:653
msgctxt "P"
msgid "When broadcasting is enabled, Laravel automatically registers the `/broadcasting/auth` route to handle authorization requests. The `/broadcasting/auth` route is automatically placed within the `web` middleware group."
msgstr ""

#: ./docs/11.x/broadcasting.md:604
#: ./docs/master/broadcasting.md:658
msgctxt "P"
msgid "Next, we need to define the logic that will actually determine if the currently authenticated user can listen to a given channel. This is done in the `routes/channels.php` file that was created by the `install:broadcasting` Artisan command. In this file, you may use the `Broadcast::channel` method to register channel authorization callbacks:"
msgstr ""

#: ./docs/10.x/broadcasting.md:609
msgctxt "H4"
msgid "Customizing the Authorization Request"
msgstr ""

#: ./docs/8.x/broadcasting.md:626
#: ./docs/9.x/broadcasting.md:662
#: ./docs/10.x/broadcasting.md:724
#: ./docs/11.x/broadcasting.md:687
#: ./docs/master/broadcasting.md:744
msgctxt "P"
msgid "Like many other classes in Laravel, channel classes will automatically be resolved by the [service container](/docs/{{version}}/container). So, you may type-hint any dependencies required by your channel in its constructor."
msgstr "與 Laravel 內其他類別一樣，頻道類別也會自動由 [Service Container](/docs/{{version}}/container) 解析。因此，我們可以在頻道的建構函式上對任何所需要的依賴進行型別提示。"

#: ./docs/8.x/broadcasting.md:628
#: ./docs/9.x/broadcasting.md:664
#: ./docs/10.x/broadcasting.md:726
#: ./docs/11.x/broadcasting.md:689
#: ./docs/master/broadcasting.md:746
#~ msgctxt "P"
#~ msgid "<a name=\"broadcasting-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:629
#: ./docs/9.x/broadcasting.md:665
#: ./docs/10.x/broadcasting.md:727
#: ./docs/11.x/broadcasting.md:690
#: ./docs/master/broadcasting.md:747
msgctxt "H2"
msgid "Broadcasting Events"
msgstr "廣播事件"

#: ./docs/8.x/broadcasting.md:631
#: ./docs/9.x/broadcasting.md:667
#: ./docs/10.x/broadcasting.md:729
#: ./docs/11.x/broadcasting.md:692
#: ./docs/master/broadcasting.md:749
msgctxt "P"
msgid "Once you have defined an event and marked it with the `ShouldBroadcast` interface, you only need to fire the event using the event's dispatch method. The event dispatcher will notice that the event is marked with the `ShouldBroadcast` interface and will queue the event for broadcasting:"
msgstr "定義好事件並將其以 `ShouldBroadcast` 介面進行標示後，我們只需要使用 dispatch 方法來觸發事件即可。事件觸發程式會注意到這個事件有被標註為 `ShouldBroadcast` 介面，並將事件放入佇列以進行廣播："

#: ./docs/8.x/broadcasting.md:637
#: ./docs/9.x/broadcasting.md:673
#: ./docs/10.x/broadcasting.md:735
#: ./docs/11.x/broadcasting.md:698
#: ./docs/master/broadcasting.md:755
#~ msgctxt "P"
#~ msgid "<a name=\"only-to-others\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:638
#: ./docs/9.x/broadcasting.md:674
msgctxt "H3"
msgid "Only To Others"
msgstr "僅限其他"

#: ./docs/10.x/broadcasting.md:640
#: ./docs/11.x/broadcasting.md:606
#: ./docs/master/broadcasting.md:660
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"Broadcast::channel('orders.{orderId}', function (User $user, int $orderId) {\n"
"    return $user->id === Order::findOrNew($orderId)->user_id;\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:640
#: ./docs/9.x/broadcasting.md:676
#: ./docs/10.x/broadcasting.md:738
#: ./docs/11.x/broadcasting.md:701
#: ./docs/master/broadcasting.md:758
msgctxt "P"
msgid "When building an application that utilizes event broadcasting, you may occasionally need to broadcast an event to all subscribers to a given channel except for the current user. You may accomplish this using the `broadcast` helper and the `toOthers` method:"
msgstr "在建立一個有使用到事件廣播的專案時，我們可能會需要將某個事件廣播給除了目前使用者以外的所有頻道訂閱者。可以通過 `broadcast` 輔助函式以及 `toOthers` 方法來完成："

#: ./docs/8.x/broadcasting.md:642
#: ./docs/9.x/broadcasting.md:678
#: ./docs/10.x/broadcasting.md:740
#: ./docs/11.x/broadcasting.md:703
#: ./docs/master/broadcasting.md:760
msgctxt "CODE"
msgid ""
"use App\\Events\\OrderShipmentStatusUpdated;\n"
"\n"
"broadcast(new OrderShipmentStatusUpdated($update))->toOthers();"
msgstr ""

#: ./docs/8.x/broadcasting.md:646
#: ./docs/9.x/broadcasting.md:682
#: ./docs/10.x/broadcasting.md:744
#: ./docs/11.x/broadcasting.md:707
#: ./docs/master/broadcasting.md:764
msgctxt "P"
msgid "To better understand when you may want to use the `toOthers` method, let's imagine a task list application where a user may create a new task by entering a task name. To create a task, your application might make a request to a `/task` URL which broadcasts the task's creation and returns a JSON representation of the new task. When your JavaScript application receives the response from the end-point, it might directly insert the new task into its task list like so:"
msgstr "為了幫助你更容易理解什麼時候會需要用到 `toOthers` 方法，我們來假設有個任務清單 App。在這個 App 中，使用者可以輸入任務名稱來新增任務。為了建立任務，這個 App 可能會向 `/task` URL 發起一個請求，該請求會將任務的建立廣播出去，並回傳代表新任務的 JSON。當 JavaScript 端從這個 End-point 收到回覆後，就可以直接將新任務插入到任務清單內。像這樣："

#: ./docs/8.x/broadcasting.md:648
#: ./docs/9.x/broadcasting.md:684
#: ./docs/10.x/broadcasting.md:746
#: ./docs/11.x/broadcasting.md:709
#: ./docs/master/broadcasting.md:766
msgctxt "CODE"
msgid ""
"axios.post('/task', task)\n"
"    .then((response) => {\n"
"        this.tasks.push(response.data);\n"
"    });"
msgstr ""

#: ./docs/10.x/broadcasting.md:650
#: ./docs/11.x/broadcasting.md:616
#: ./docs/master/broadcasting.md:670
msgctxt "P"
msgid "You may view a list of your application's broadcast authorization callbacks using the `channel:list` Artisan command:"
msgstr "可以使用 `channel:list` Artisan 指令來檢視專案中所有 Broadcast 身分驗證回呼的列表："

#: ./docs/10.x/broadcasting.md:652
#: ./docs/11.x/broadcasting.md:618
#: ./docs/master/broadcasting.md:672
msgctxt "CODE: shell"
msgid "php artisan channel:list"
msgstr ""

#: ./docs/8.x/broadcasting.md:653
#: ./docs/9.x/broadcasting.md:691
#: ./docs/10.x/broadcasting.md:753
#: ./docs/11.x/broadcasting.md:716
#: ./docs/master/broadcasting.md:773
msgctxt "P"
msgid "However, remember that we also broadcast the task's creation. If your JavaScript application is also listening for this event in order to add tasks to the task list, you will have duplicate tasks in your list: one from the end-point and one from the broadcast. You may solve this by using the `toOthers` method to instruct the broadcaster to not broadcast the event to the current user."
msgstr "不過，提醒一下，我們也會將任務的建立廣播出去。如果 JavaScript 端也會監聽這個事件來將任務新增到任務清單上，那麼列表上就會有重複的任務：一個是從 End-point 回傳回來的，另一個則是從監聽事件來的。我們可以通過使用 `toOthers` 方法來告訴廣播程式不要將該事件廣播給目前的使用者。"

#: ./docs/8.x/broadcasting.md:655
#: ./docs/9.x/broadcasting.md:694
#: ./docs/10.x/broadcasting.md:756
#: ./docs/11.x/broadcasting.md:719
#: ./docs/master/broadcasting.md:776
msgctxt "P"
msgid "Your event must use the `Illuminate\\Broadcasting\\InteractsWithSockets` trait in order to call the `toOthers` method."
msgstr "若要呼叫 `toOthers` 方法，該事件必須要 use `Illuminate\\Broadcasting\\InteractsWithSockets` Trait。"

#: ./docs/8.x/broadcasting.md:657
#: ./docs/9.x/broadcasting.md:696
#: ./docs/10.x/broadcasting.md:758
#: ./docs/11.x/broadcasting.md:721
#: ./docs/master/broadcasting.md:778
#~ msgctxt "P"
#~ msgid "<a name=\"only-to-others-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:660
#: ./docs/9.x/broadcasting.md:699
msgctxt "P"
msgid "When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using a global [Axios](https://github.com/mzabriskie/axios) instance to make HTTP requests from your JavaScript application, the socket ID will automatically be attached to every outgoing request as a `X-Socket-ID` header. Then, when you call the `toOthers` method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID."
msgstr "初始化 Laravel Echo 實體時，會指派一個 Socket ID 給這個連線。若是使用全域的 [Axios](https://github.com/mzabriskie/axios) 實體來在 JavaScript 端建立 HTTP 連線，則 Socket ID 會以 `X-Socket-ID` 標頭被自動附加到每個外連請求上。接著，當呼叫 `toOthers` 方法時，Laravel 會從標頭內拆出這個 Socket ID，並告知廣播程式不要廣播給有該 Socket ID 的連線。"

#: ./docs/10.x/broadcasting.md:661
#: ./docs/11.x/broadcasting.md:627
#: ./docs/master/broadcasting.md:681
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"use App\\Models\\User;\n"
"\n"
"Broadcast::channel('orders.{order}', function (User $user, Order $order) {\n"
"    return $user->id === $order->user_id;\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:662
#: ./docs/9.x/broadcasting.md:701
#: ./docs/10.x/broadcasting.md:763
#: ./docs/11.x/broadcasting.md:726
#: ./docs/master/broadcasting.md:783
msgctxt "P"
msgid "If you are not using a global Axios instance, you will need to manually configure your JavaScript application to send the `X-Socket-ID` header with all outgoing requests. You may retrieve the socket ID using the `Echo.socketId` method:"
msgstr "若你未使用全域 Axios 實體，則需要手動設定 JavaScript 端來在所有外連請求上傳送 `X-Socket-ID` 標頭。可以通過 `Echo.socketId` 方法來取得 Socket ID："

#: ./docs/11.x/broadcasting.md:663
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Broadcasting;\n"
"\n"
"use App\\Models\\Order;\n"
"use App\\Models\\User;\n"
"\n"
"class OrderChannel\n"
"{\n"
"    /**\n"
"     * Create a new channel instance.\n"
"     */\n"
"    public function __construct() {}\n"
"\n"
"    /**\n"
"     * Authenticate the user's access to the channel.\n"
"     */\n"
"    public function join(User $user, Order $order): array|bool\n"
"    {\n"
"        return $user->id === $order->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:664
#: ./docs/9.x/broadcasting.md:703
#: ./docs/10.x/broadcasting.md:765
#: ./docs/11.x/broadcasting.md:728
#: ./docs/master/broadcasting.md:785
msgctxt "CODE"
msgid "var socketId = Echo.socketId();"
msgstr ""

#: ./docs/8.x/broadcasting.md:666
#: ./docs/9.x/broadcasting.md:707
#: ./docs/10.x/broadcasting.md:769
#: ./docs/11.x/broadcasting.md:732
#: ./docs/master/broadcasting.md:789
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-connection\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:667
#: ./docs/9.x/broadcasting.md:708
msgctxt "H3"
msgid "Customizing The Connection"
msgstr "自訂連線"

#: ./docs/8.x/broadcasting.md:669
#: ./docs/9.x/broadcasting.md:710
#: ./docs/10.x/broadcasting.md:772
#: ./docs/11.x/broadcasting.md:735
#: ./docs/master/broadcasting.md:792
msgctxt "P"
msgid "If your application interacts with multiple broadcast connections and you want to broadcast an event using a broadcaster other than your default, you may specify which connection to push an event to using the `via` method:"
msgstr "若你的專案與許多不同的廣播連線互動時，如果我們想使用預設廣播程式以外的特定廣播程式來廣播事件，則可以使用 `via` 方法來指定要將事件推送給哪個連線："

#: ./docs/8.x/broadcasting.md:671
#: ./docs/9.x/broadcasting.md:712
#: ./docs/10.x/broadcasting.md:774
#: ./docs/11.x/broadcasting.md:737
#: ./docs/master/broadcasting.md:794
msgctxt "CODE"
msgid ""
"use App\\Events\\OrderShipmentStatusUpdated;\n"
"\n"
"broadcast(new OrderShipmentStatusUpdated($update))->via('pusher');"
msgstr ""

#: ./docs/8.x/broadcasting.md:675
#: ./docs/9.x/broadcasting.md:716
#: ./docs/10.x/broadcasting.md:778
#: ./docs/11.x/broadcasting.md:741
#: ./docs/master/broadcasting.md:798
msgctxt "P"
msgid "Alternatively, you may specify the event's broadcast connection by calling the `broadcastVia` method within the event's constructor. However, before doing so, you should ensure that the event class uses the `InteractsWithBroadcasting` trait:"
msgstr "或者，也可以通過在事件的建構函式 (Constructor) 內呼叫 `broadcastVia` 方法來指定事件的廣播連線。不過，這麼做的時候，請先確保這個事件類別有使用 `InteractsWithBroadcasting` Trait："

#: ./docs/8.x/broadcasting.md:677
#: ./docs/9.x/broadcasting.md:718
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithBroadcasting;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"{\n"
"    use InteractsWithBroadcasting;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->broadcastVia('pusher');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:697
#: ./docs/master/broadcasting.md:717
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Broadcasting;\n"
"\n"
"use App\\Models\\Order;\n"
"use App\\Models\\User;\n"
"\n"
"class OrderChannel\n"
"{\n"
"    /**\n"
"     * Create a new channel instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Authenticate the user's access to the channel.\n"
"     */\n"
"    public function join(User $user, Order $order): array|bool\n"
"    {\n"
"        return $user->id === $order->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:704
#: ./docs/9.x/broadcasting.md:745
#: ./docs/10.x/broadcasting.md:805
#: ./docs/11.x/broadcasting.md:827
#: ./docs/master/broadcasting.md:825
#~ msgctxt "P"
#~ msgid "<a name=\"receiving-broadcasts\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:705
#: ./docs/9.x/broadcasting.md:746
#: ./docs/10.x/broadcasting.md:806
#: ./docs/11.x/broadcasting.md:828
#: ./docs/master/broadcasting.md:826
msgctxt "H2"
msgid "Receiving Broadcasts"
msgstr "接收廣播"

#: ./docs/8.x/broadcasting.md:707
#: ./docs/9.x/broadcasting.md:748
#: ./docs/10.x/broadcasting.md:808
#: ./docs/11.x/broadcasting.md:830
#: ./docs/master/broadcasting.md:828
#~ msgctxt "P"
#~ msgid "<a name=\"listening-for-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:708
#: ./docs/9.x/broadcasting.md:749
msgctxt "H3"
msgid "Listening For Events"
msgstr "監聽事件"

#: ./docs/8.x/broadcasting.md:710
#: ./docs/9.x/broadcasting.md:751
#: ./docs/10.x/broadcasting.md:811
#: ./docs/11.x/broadcasting.md:833
#: ./docs/master/broadcasting.md:831
msgctxt "P"
msgid "Once you have [installed and instantiated Laravel Echo](#client-side-installation), you are ready to start listening for events that are broadcast from your Laravel application. First, use the `channel` method to retrieve an instance of a channel, then call the `listen` method to listen for a specified event:"
msgstr "[安裝並設定好 Laravel Echo](#client-side-installation) 後，就可以開始監聽來自 Laravel 端廣播的事件了。首先，使用 `channel` 方法來取得頻道的實體，然後呼叫 `listen` 方法來監聽某個特定的事件："

#: ./docs/8.x/broadcasting.md:712
#: ./docs/9.x/broadcasting.md:753
#: ./docs/10.x/broadcasting.md:813
#: ./docs/11.x/broadcasting.md:835
#: ./docs/master/broadcasting.md:833
msgctxt "CODE: js"
msgid ""
"Echo.channel(`orders.${this.order.id}`)\n"
"    .listen('OrderShipmentStatusUpdated', (e) => {\n"
"        console.log(e.order.name);\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:719
#: ./docs/9.x/broadcasting.md:760
#: ./docs/10.x/broadcasting.md:820
#: ./docs/11.x/broadcasting.md:842
#: ./docs/master/broadcasting.md:840
msgctxt "P"
msgid "If you would like to listen for events on a private channel, use the `private` method instead. You may continue to chain calls to the `listen` method to listen for multiple events on a single channel:"
msgstr "若想監聽私有頻道，可使用 `private` 方法來代替。可以繼續在 `listen` 方法後方串上其他的呼叫來在單一頻道上監聽多個事件："

#: ./docs/8.x/broadcasting.md:721
msgctxt "CODE: js"
msgid ""
"Echo.private(`orders.${this.order.id}`)\n"
"    .listen(...)\n"
"    .listen(...)\n"
"    .listen(...);"
msgstr ""

#: ./docs/11.x/broadcasting.md:724
msgctxt "P"
msgid "When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using a global [Axios](https://github.com/axios/axios) instance to make HTTP requests from your JavaScript application, the socket ID will automatically be attached to every outgoing request as an `X-Socket-ID` header. Then, when you call the `toOthers` method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID."
msgstr ""

#: ./docs/8.x/broadcasting.md:728
#: ./docs/9.x/broadcasting.md:769
#: ./docs/10.x/broadcasting.md:829
#: ./docs/11.x/broadcasting.md:851
#: ./docs/master/broadcasting.md:849
#~ msgctxt "P"
#~ msgid "<a name=\"stop-listening-for-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:729
#: ./docs/9.x/broadcasting.md:770
msgctxt "H4"
msgid "Stop Listening For Events"
msgstr "停止監聽事件"

#: ./docs/8.x/broadcasting.md:731
#: ./docs/9.x/broadcasting.md:772
#: ./docs/10.x/broadcasting.md:832
#: ./docs/11.x/broadcasting.md:854
#: ./docs/master/broadcasting.md:852
msgctxt "P"
msgid "If you would like to stop listening to a given event without [leaving the channel](#leaving-a-channel), you may use the `stopListening` method:"
msgstr "若想在不[離開頻道](#leaving-a-channel)的情況下停止監聽給定的事件，可以使用 `stopListening` 方法："

#: ./docs/8.x/broadcasting.md:733
#: ./docs/9.x/broadcasting.md:774
#: ./docs/10.x/broadcasting.md:834
#: ./docs/11.x/broadcasting.md:856
#: ./docs/master/broadcasting.md:854
msgctxt "CODE: js"
msgid ""
"Echo.private(`orders.${this.order.id}`)\n"
"    .stopListening('OrderShipmentStatusUpdated')"
msgstr ""

#: ./docs/10.x/broadcasting.md:736
#: ./docs/11.x/broadcasting.md:699
#: ./docs/master/broadcasting.md:756
msgctxt "H3"
msgid "Only to Others"
msgstr ""

#: ./docs/8.x/broadcasting.md:738
#: ./docs/9.x/broadcasting.md:779
#: ./docs/10.x/broadcasting.md:839
#: ./docs/11.x/broadcasting.md:861
#: ./docs/master/broadcasting.md:859
#~ msgctxt "P"
#~ msgid "<a name=\"leaving-a-channel\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:739
#: ./docs/9.x/broadcasting.md:780
msgctxt "H3"
msgid "Leaving A Channel"
msgstr "離開頻道"

#: ./docs/8.x/broadcasting.md:741
#: ./docs/9.x/broadcasting.md:782
#: ./docs/10.x/broadcasting.md:842
#: ./docs/11.x/broadcasting.md:864
#: ./docs/master/broadcasting.md:862
msgctxt "P"
msgid "To leave a channel, you may call the `leaveChannel` method on your Echo instance:"
msgstr "若要離開頻道，可以在 Echo 實體上呼叫 `leaveChannel` 方法："

#: ./docs/8.x/broadcasting.md:743
#: ./docs/9.x/broadcasting.md:784
#: ./docs/10.x/broadcasting.md:844
#: ./docs/11.x/broadcasting.md:866
#: ./docs/master/broadcasting.md:864
msgctxt "CODE: js"
msgid "Echo.leaveChannel(`orders.${this.order.id}`);"
msgstr ""

#: ./docs/8.x/broadcasting.md:747
#: ./docs/9.x/broadcasting.md:788
#: ./docs/10.x/broadcasting.md:848
#: ./docs/11.x/broadcasting.md:870
#: ./docs/master/broadcasting.md:868
msgctxt "P"
msgid "If you would like to leave a channel and also its associated private and presence channels, you may call the `leave` method:"
msgstr "若要離開頻道以及其關聯的私有與 Presence 頻道，可以呼叫 `leave` 方法："

#: ./docs/8.x/broadcasting.md:749
#: ./docs/9.x/broadcasting.md:790
#: ./docs/10.x/broadcasting.md:850
#: ./docs/11.x/broadcasting.md:872
#: ./docs/master/broadcasting.md:870
msgctxt "CODE: js"
msgid "Echo.leave(`orders.${this.order.id}`);"
msgstr ""

#: ./docs/8.x/broadcasting.md:752
#: ./docs/9.x/broadcasting.md:793
#: ./docs/10.x/broadcasting.md:853
#: ./docs/11.x/broadcasting.md:875
#: ./docs/master/broadcasting.md:873
#~ msgctxt "P"
#~ msgid "<a name=\"namespaces\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:753
#: ./docs/9.x/broadcasting.md:794
#: ./docs/10.x/broadcasting.md:854
#: ./docs/11.x/broadcasting.md:876
#: ./docs/master/broadcasting.md:874
msgctxt "H3"
msgid "Namespaces"
msgstr "命名空間 (Namespace)"

#: ./docs/8.x/broadcasting.md:755
#: ./docs/9.x/broadcasting.md:796
#: ./docs/10.x/broadcasting.md:856
#: ./docs/11.x/broadcasting.md:878
#: ./docs/master/broadcasting.md:876
msgctxt "P"
msgid "You may have noticed in the examples above that we did not specify the full `App\\Events` namespace for the event classes. This is because Echo will automatically assume the events are located in the `App\\Events` namespace. However, you may configure the root namespace when you instantiate Echo by passing a `namespace` configuration option:"
msgstr "你可能已經注意到，我們並沒有為事件類別指定完整的 `App\\Events` 命名空間。這是因為，Echo 會自動假設事件都放在 `App\\Events` 命名空間下。不過，我們可以在初始化 Echo 時傳入 `namespace` 設定選項來設定要使用的根命名空間："

#: ./docs/8.x/broadcasting.md:757
#: ./docs/9.x/broadcasting.md:798
#: ./docs/10.x/broadcasting.md:858
#: ./docs/11.x/broadcasting.md:880
#: ./docs/master/broadcasting.md:878
msgctxt "CODE: js"
msgid ""
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    // ...\n"
"    namespace: 'App.Other.Namespace'\n"
"});"
msgstr ""

#: ./docs/10.x/broadcasting.md:761
#: ./docs/master/broadcasting.md:781
msgctxt "P"
msgid "When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using a global [Axios](https://github.com/mzabriskie/axios) instance to make HTTP requests from your JavaScript application, the socket ID will automatically be attached to every outgoing request as an `X-Socket-ID` header. Then, when you call the `toOthers` method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID."
msgstr ""

#: ./docs/9.x/broadcasting.md:762
#: ./docs/10.x/broadcasting.md:822
#: ./docs/11.x/broadcasting.md:844
#: ./docs/master/broadcasting.md:842
msgctxt "CODE: js"
msgid ""
"Echo.private(`orders.${this.order.id}`)\n"
"    .listen(/* ... */)\n"
"    .listen(/* ... */)\n"
"    .listen(/* ... */);"
msgstr ""

#: ./docs/8.x/broadcasting.md:765
#: ./docs/9.x/broadcasting.md:806
#: ./docs/10.x/broadcasting.md:866
#: ./docs/11.x/broadcasting.md:888
#: ./docs/master/broadcasting.md:886
msgctxt "P"
msgid "Alternatively, you may prefix event classes with a `.` when subscribing to them using Echo. This will allow you to always specify the fully-qualified class name:"
msgstr "除了在初始化時設定以外，也可以在使用 Echo 訂閱事件時在事件類別的名稱前加上一個前置 `.`。這樣一來，就可以隨時使用完整的類別名稱："

#: ./docs/8.x/broadcasting.md:767
#: ./docs/9.x/broadcasting.md:808
msgctxt "CODE: js"
msgid ""
"Echo.channel('orders')\n"
"    .listen('.Namespace\\\\Event\\\\Class', (e) => {\n"
"        //\n"
"    });"
msgstr ""

#: ./docs/11.x/broadcasting.md:768
#~ msgctxt "P"
#~ msgid "<a name=\"anonymous-events\"></a>"
#~ msgstr ""

#: ./docs/11.x/broadcasting.md:769
msgctxt "H3"
msgid "Anonymous Events"
msgstr ""

#: ./docs/10.x/broadcasting.md:770
#: ./docs/11.x/broadcasting.md:733
#: ./docs/master/broadcasting.md:790
msgctxt "H3"
msgid "Customizing the Connection"
msgstr ""

#: ./docs/11.x/broadcasting.md:771
msgctxt "P"
msgid "Sometimes, you may want to broadcast a simple event to your application's frontend without creating a dedicated event class. To accommodate this, the `Broadcast` facade allows you to broadcast \"anonymous events\":"
msgstr ""

#: ./docs/11.x/broadcasting.md:773
msgctxt "CODE: php"
msgid "Broadcast::on('orders.'.$order->id)->send();"
msgstr ""

#: ./docs/8.x/broadcasting.md:774
#: ./docs/9.x/broadcasting.md:815
#: ./docs/10.x/broadcasting.md:875
#: ./docs/11.x/broadcasting.md:897
#: ./docs/master/broadcasting.md:895
#~ msgctxt "P"
#~ msgid "<a name=\"presence-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:775
#: ./docs/9.x/broadcasting.md:816
#: ./docs/10.x/broadcasting.md:876
#: ./docs/11.x/broadcasting.md:898
#: ./docs/master/broadcasting.md:896
msgctxt "H2"
msgid "Presence Channels"
msgstr "Presence 頻道"

#: ./docs/11.x/broadcasting.md:777
msgctxt "P"
msgid "The example above will broadcast the following event:"
msgstr ""

#: ./docs/8.x/broadcasting.md:777
#: ./docs/9.x/broadcasting.md:818
#: ./docs/10.x/broadcasting.md:878
#: ./docs/11.x/broadcasting.md:900
#: ./docs/master/broadcasting.md:898
msgctxt "P"
msgid "Presence channels build on the security of private channels while exposing the additional feature of awareness of who is subscribed to the channel. This makes it easy to build powerful, collaborative application features such as notifying users when another user is viewing the same page or listing the inhabitants of a chat room."
msgstr "Presence 頻道擁有私有頻道的安全性，且會提供該頻道的訂閱者等額外資訊。這樣一來便能輕鬆地建立強大的協作 App 功能，如提示目前使用者由其他人正在檢視相同頁面，或是列出聊天室中的使用者狀態。"

#: ./docs/11.x/broadcasting.md:779
msgctxt "CODE: json"
msgid ""
"{\n"
"    \"event\": \"AnonymousEvent\",\n"
"    \"data\": \"[]\",\n"
"    \"channel\": \"orders.1\"\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:779
#: ./docs/9.x/broadcasting.md:820
#: ./docs/10.x/broadcasting.md:880
#: ./docs/11.x/broadcasting.md:902
#: ./docs/master/broadcasting.md:900
#~ msgctxt "P"
#~ msgid "<a name=\"authorizing-presence-channels\"></a>"
#~ msgstr ""

#: ./docs/10.x/broadcasting.md:780
#: ./docs/11.x/broadcasting.md:743
#: ./docs/master/broadcasting.md:800
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\InteractsWithBroadcasting;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Broadcasting\\PresenceChannel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"{\n"
"    use InteractsWithBroadcasting;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->broadcastVia('pusher');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:780
#: ./docs/9.x/broadcasting.md:821
#: ./docs/10.x/broadcasting.md:881
#: ./docs/11.x/broadcasting.md:903
#: ./docs/master/broadcasting.md:901
msgctxt "H3"
msgid "Authorizing Presence Channels"
msgstr "授權 Presence 頻道"

#: ./docs/8.x/broadcasting.md:782
#: ./docs/9.x/broadcasting.md:823
#: ./docs/10.x/broadcasting.md:883
#: ./docs/11.x/broadcasting.md:905
#: ./docs/master/broadcasting.md:903
msgctxt "P"
msgid "All presence channels are also private channels; therefore, users must be [authorized to access them](#authorizing-channels). However, when defining authorization callbacks for presence channels, you will not return `true` if the user is authorized to join the channel. Instead, you should return an array of data about the user."
msgstr "所有的 Presence 頻道也同時是私有頻道。因此，使用者必須要[經過授權以存取頻道](#authorizing-channels)。不過，在為 Presence 頻道定義授權回呼時，若要授權使用者加入頻道，則不應回傳 `true`，而應回傳包含有關其他使用者資訊的陣列。"

#: ./docs/8.x/broadcasting.md:784
#: ./docs/9.x/broadcasting.md:825
#: ./docs/10.x/broadcasting.md:885
#: ./docs/11.x/broadcasting.md:907
#: ./docs/master/broadcasting.md:905
msgctxt "P"
msgid "The data returned by the authorization callback will be made available to the presence channel event listeners in your JavaScript application. If the user is not authorized to join the presence channel, you should return `false` or `null`:"
msgstr "由授權回呼回傳的資料可以在 JavaScript 端中的 Presence 頻道事件監聽程式中使用。若使用者未被授權加入 Presence 頻道，則應回傳 `false` 或 `null`："

#: ./docs/8.x/broadcasting.md:786
#: ./docs/9.x/broadcasting.md:827
msgctxt "CODE"
msgid ""
"Broadcast::channel('chat.{roomId}', function ($user, $roomId) {\n"
"    if ($user->canJoinRoom($roomId)) {\n"
"        return ['id' => $user->id, 'name' => $user->name];\n"
"    }\n"
"});"
msgstr ""

#: ./docs/11.x/broadcasting.md:787
msgctxt "P"
msgid "Using the `as` and `with` methods, you may customize the event's name and data:"
msgstr ""

#: ./docs/11.x/broadcasting.md:789
msgctxt "CODE: php"
msgid ""
"Broadcast::on('orders.'.$order->id)\n"
"    ->as('OrderPlaced')\n"
"    ->with($order)\n"
"    ->send();"
msgstr ""

#: ./docs/8.x/broadcasting.md:792
#: ./docs/9.x/broadcasting.md:833
#: ./docs/10.x/broadcasting.md:895
#: ./docs/11.x/broadcasting.md:917
#: ./docs/master/broadcasting.md:915
#~ msgctxt "P"
#~ msgid "<a name=\"joining-presence-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:793
#: ./docs/9.x/broadcasting.md:834
#: ./docs/10.x/broadcasting.md:896
#: ./docs/11.x/broadcasting.md:918
#: ./docs/master/broadcasting.md:916
msgctxt "H3"
msgid "Joining Presence Channels"
msgstr "加入 Presence 頻道"

#: ./docs/8.x/broadcasting.md:795
#: ./docs/9.x/broadcasting.md:836
#: ./docs/10.x/broadcasting.md:898
#: ./docs/11.x/broadcasting.md:920
#: ./docs/master/broadcasting.md:918
msgctxt "P"
msgid "To join a presence channel, you may use Echo's `join` method. The `join` method will return a `PresenceChannel` implementation which, along with exposing the `listen` method, allows you to subscribe to the `here`, `joining`, and `leaving` events."
msgstr "若要加入 Presence 頻道，可以使用 Echo 的 `join` 方法。`join` 方法會與所暴露的 `listen` 方法一起回傳一個 `PresenceChannel` 的實作，這樣一來你就能訂閱 `here`, `joining` 以及 `leaving` 事件。"

#: ./docs/11.x/broadcasting.md:796
msgctxt "P"
msgid "The example above will broadcast an event like the following:"
msgstr ""

#: ./docs/8.x/broadcasting.md:797
#: ./docs/9.x/broadcasting.md:838
msgctxt "CODE"
msgid ""
"Echo.join(`chat.${roomId}`)\n"
"    .here((users) => {\n"
"        //\n"
"    })\n"
"    .joining((user) => {\n"
"        console.log(user.name);\n"
"    })\n"
"    .leaving((user) => {\n"
"        console.log(user.name);\n"
"    })\n"
"    .error((error) => {\n"
"        console.error(error);\n"
"    });"
msgstr ""

#: ./docs/11.x/broadcasting.md:798
msgctxt "CODE: json"
msgid ""
"{\n"
"    \"event\": \"OrderPlaced\",\n"
"    \"data\": \"{ id: 1, total: 100 }\",\n"
"    \"channel\": \"orders.1\"\n"
"}"
msgstr ""

#: ./docs/11.x/broadcasting.md:806
msgctxt "P"
msgid "If you would like to broadcast the anonymous event on a private or presence channel, you may utilize the `private` and `presence` methods:"
msgstr ""

#: ./docs/11.x/broadcasting.md:808
msgctxt "CODE: php"
msgid ""
"Broadcast::private('orders.'.$order->id)->send();\n"
"Broadcast::presence('channels.'.$channel->id)->send();"
msgstr ""

#: ./docs/10.x/broadcasting.md:809
#: ./docs/11.x/broadcasting.md:831
#: ./docs/master/broadcasting.md:829
msgctxt "H3"
msgid "Listening for Events"
msgstr ""

#: ./docs/8.x/broadcasting.md:811
#: ./docs/9.x/broadcasting.md:854
msgctxt "P"
msgid "The `here` callback will be executed immediately once the channel is joined successfully, and will receive an array containing the user information for all of the other users currently subscribed to the channel. The `joining` method will be executed when a new user joins a channel, while the `leaving` method will be executed when a user leaves the channel. The `error` method will be executed when the authentication endpoint returns a HTTP status code other than 200 or if there is a problem parsing the returned JSON."
msgstr "`here` 回呼會在成功加入頻道後被立即執行，並會收到包含所有其他目前訂閱該頻道的使用者資訊。`joining` 方法會在有新使用者加入頻道時被執行，而 `leaving` 則會在有使用者離開時被執行。`error` 方法會在認證 Endpoint 回傳除了 200 以外的 HTTP 狀態時、或是解析回傳的 JSON 時有問題時被執行。"

#: ./docs/11.x/broadcasting.md:813
msgctxt "P"
msgid "Broadcasting an anonymous event using the `send` method dispatches the event to your application's [queue](/docs/{{version}}/queues) for processing. However, if you would like to broadcast the event immediately, you may use the `sendNow` method:"
msgstr ""

#: ./docs/8.x/broadcasting.md:813
#: ./docs/9.x/broadcasting.md:856
#: ./docs/10.x/broadcasting.md:918
#: ./docs/11.x/broadcasting.md:940
#: ./docs/master/broadcasting.md:938
#~ msgctxt "P"
#~ msgid "<a name=\"broadcasting-to-presence-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:814
#: ./docs/9.x/broadcasting.md:857
msgctxt "H3"
msgid "Broadcasting To Presence Channels"
msgstr "廣播至 Presence 頻道"

#: ./docs/11.x/broadcasting.md:815
msgctxt "CODE: php"
msgid "Broadcast::on('orders.'.$order->id)->sendNow();"
msgstr ""

#: ./docs/8.x/broadcasting.md:816
#: ./docs/9.x/broadcasting.md:859
#: ./docs/10.x/broadcasting.md:921
#: ./docs/11.x/broadcasting.md:943
#: ./docs/master/broadcasting.md:941
msgctxt "P"
msgid "Presence channels may receive events just like public or private channels. Using the example of a chatroom, we may want to broadcast `NewMessage` events to the room's presence channel. To do so, we'll return an instance of `PresenceChannel` from the event's `broadcastOn` method:"
msgstr "Presence 頻道可以像公用或私有頻道一樣接收事件。以聊天室為例，我們可能像廣播 `NewMessage` 事件至聊天室的 Presence 頻道。為此，我們可以在事件的 `broadcastOn` 方法內回傳一個 `PresenceChannel` 的實體："

#: ./docs/8.x/broadcasting.md:818
#: ./docs/9.x/broadcasting.md:861
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the channels the event should broadcast on.\n"
" *\n"
" * @return Channel|array\n"
" */\n"
"public function broadcastOn()\n"
"{\n"
"    return new PresenceChannel('room.'.$this->message->room_id);\n"
"}"
msgstr ""

#: ./docs/11.x/broadcasting.md:819
msgctxt "P"
msgid "To broadcast the event to all channel subscribers except the currently authenticated user, you can invoke the `toOthers` method:"
msgstr ""

#: ./docs/11.x/broadcasting.md:821
msgctxt "CODE: php"
msgid ""
"Broadcast::on('orders.'.$order->id)\n"
"    ->toOthers()\n"
"    ->send();"
msgstr ""

#: ./docs/8.x/broadcasting.md:828
#: ./docs/9.x/broadcasting.md:871
#: ./docs/10.x/broadcasting.md:935
#: ./docs/11.x/broadcasting.md:957
#: ./docs/master/broadcasting.md:955
msgctxt "P"
msgid "As with other events, you may use the `broadcast` helper and the `toOthers` method to exclude the current user from receiving the broadcast:"
msgstr "與其他事件一樣，可以使用 `broadcast` 輔助函式與 `toOthers` 方法來排除目前使用者接收該 Broadcast："

#: ./docs/10.x/broadcasting.md:830
#: ./docs/11.x/broadcasting.md:852
#: ./docs/master/broadcasting.md:850
msgctxt "H4"
msgid "Stop Listening for Events"
msgstr ""

#: ./docs/8.x/broadcasting.md:830
#: ./docs/9.x/broadcasting.md:873
#: ./docs/10.x/broadcasting.md:937
#: ./docs/11.x/broadcasting.md:959
#: ./docs/master/broadcasting.md:957
msgctxt "CODE"
msgid ""
"broadcast(new NewMessage($message));\n"
"\n"
"broadcast(new NewMessage($message))->toOthers();"
msgstr ""

#: ./docs/8.x/broadcasting.md:834
#: ./docs/9.x/broadcasting.md:877
#: ./docs/10.x/broadcasting.md:941
#: ./docs/11.x/broadcasting.md:963
#: ./docs/master/broadcasting.md:961
msgctxt "P"
msgid "As typical of other types of events, you may listen for events sent to presence channels using Echo's `listen` method:"
msgstr "與其他一般的事件一樣，也可以使用 Echo 的 `listen` 方法來監聽傳送到 Presence 頻道的事件："

#: ./docs/8.x/broadcasting.md:836
msgctxt "CODE"
msgid ""
"Echo.join(`chat.${roomId}`)\n"
"    .here(...)\n"
"    .joining(...)\n"
"    .leaving(...)\n"
"    .listen('NewMessage', (e) => {\n"
"        //\n"
"    });"
msgstr ""

#: ./docs/10.x/broadcasting.md:840
#: ./docs/11.x/broadcasting.md:862
#: ./docs/master/broadcasting.md:860
msgctxt "H3"
msgid "Leaving a Channel"
msgstr ""

#: ./docs/8.x/broadcasting.md:844
#: ./docs/9.x/broadcasting.md:889
#: ./docs/10.x/broadcasting.md:953
#: ./docs/11.x/broadcasting.md:975
#: ./docs/master/broadcasting.md:973
#~ msgctxt "P"
#~ msgid "<a name=\"model-broadcasting\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:845
#: ./docs/9.x/broadcasting.md:890
#: ./docs/10.x/broadcasting.md:954
#: ./docs/11.x/broadcasting.md:976
#: ./docs/master/broadcasting.md:974
msgctxt "H2"
msgid "Model Broadcasting"
msgstr "Model 廣播"

#: ./docs/8.x/broadcasting.md:847
#: ./docs/9.x/broadcasting.md:893
#: ./docs/10.x/broadcasting.md:957
#: ./docs/11.x/broadcasting.md:979
#: ./docs/master/broadcasting.md:977
msgctxt "P"
msgid "Before reading the following documentation about model broadcasting, we recommend you become familiar with the general concepts of Laravel's model broadcasting services as well as how to manually create and listen to broadcast events."
msgstr "在進一步閱讀有關 Model 廣播的說明文件前，我們建議讀者先瞭解有關 Laravel 的 Model 廣播服務以及如何手動建立並監聽廣播時間的一般概念。"

#: ./docs/8.x/broadcasting.md:849
#: ./docs/9.x/broadcasting.md:895
#: ./docs/10.x/broadcasting.md:959
#: ./docs/11.x/broadcasting.md:981
#: ./docs/master/broadcasting.md:979
msgctxt "P"
msgid "It is common to broadcast events when your application's [Eloquent models](/docs/{{version}}/eloquent) are created, updated, or deleted. Of course, this can easily be accomplished by manually [defining custom events for Eloquent model state changes](/docs/{{version}}/eloquent#events) and marking those events with the `ShouldBroadcast` interface."
msgstr "在專案的 [Eloquent Model](/docs/{{version}}/eloquent) 被建立、更新、或刪除時，我們常常會廣播事件。當然，我們可以手動[為 Eloquent Model 的狀態更改定義自訂事件](/docs/{{version}}/eloquent#events)並將這些事件標記為 `ShouldBroadcast` 來輕鬆達成："

#: ./docs/8.x/broadcasting.md:851
#: ./docs/9.x/broadcasting.md:897
#: ./docs/10.x/broadcasting.md:961
#: ./docs/11.x/broadcasting.md:983
#: ./docs/master/broadcasting.md:981
msgctxt "P"
msgid "However, if you are not using these events for any other purposes in your application, it can be cumbersome to create event classes for the sole purpose of broadcasting them. To remedy this, Laravel allows you to indicate that an Eloquent model should automatically broadcast its state changes."
msgstr "不過，我們讓事件在專案中負責其他功能，那麼如果只建立一個用來廣播的事件就很麻煩。為了解決這個問題，再 Laravel 中，我們可以讓 Eloquent Model 自動將其狀態更改廣播出去："

#: ./docs/8.x/broadcasting.md:853
msgctxt "P"
msgid "To get started, your Eloquent model should use the `Illuminate\\Database\\Eloquent\\BroadcastsEvents` trait. In addition, the model should define a `broadcastsOn` method, which will return an array of channels that the model's events should broadcast on:"
msgstr "要開始設定自動廣播，應在 Eloquent Model 上使用 `Illuminate\\Database\\Eloquent\\BroadcastsEvents` Trait。此外，該 Model 應定義一個 `broadcastsOn` 方法，並在其中回傳一組包含頻道名稱的陣列，以供 Model 事件廣播："

#: ./docs/8.x/broadcasting.md:855
#: ./docs/9.x/broadcasting.md:901
msgctxt "CODE: php"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Database\\Eloquent\\BroadcastsEvents;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use BroadcastsEvents, HasFactory;\n"
"\n"
"    /**\n"
"     * Get the user that the post belongs to.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the channels that model events should broadcast on.\n"
"     *\n"
"     * @param  string  $event\n"
"     * @return \\Illuminate\\Broadcasting\\Channel|array\n"
"     */\n"
"    public function broadcastOn($event)\n"
"    {\n"
"        return [$this, $this->user];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:868
#: ./docs/11.x/broadcasting.md:890
#: ./docs/master/broadcasting.md:888
msgctxt "CODE: js"
msgid ""
"Echo.channel('orders')\n"
"    .listen('.Namespace\\\\Event\\\\Class', (e) => {\n"
"        // ...\n"
"    });"
msgstr ""

#: ./docs/9.x/broadcasting.md:879
msgctxt "CODE: js"
msgid ""
"Echo.join(`chat.${roomId}`)\n"
"    .here(/* ... */)\n"
"    .joining(/* ... */)\n"
"    .leaving(/* ... */)\n"
"    .listen('NewMessage', (e) => {\n"
"        //\n"
"    });"
msgstr ""

#: ./docs/10.x/broadcasting.md:887
#: ./docs/11.x/broadcasting.md:909
#: ./docs/master/broadcasting.md:907
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"Broadcast::channel('chat.{roomId}', function (User $user, int $roomId) {\n"
"    if ($user->canJoinRoom($roomId)) {\n"
"        return ['id' => $user->id, 'name' => $user->name];\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/broadcasting.md:890
#: ./docs/9.x/broadcasting.md:936
#: ./docs/10.x/broadcasting.md:1001
#: ./docs/11.x/broadcasting.md:1023
#: ./docs/master/broadcasting.md:1021
msgctxt "P"
msgid "Once your model includes this trait and defines its broadcast channels, it will begin automatically broadcasting events when a model instance is created, updated, deleted, trashed, or restored."
msgstr "再 Model 中包含該 Trait 並定義好廣播頻道後，當 Model 實體被建立、更新、刪除、軟刪除、或是取消軟刪除後自動廣播事件。"

#: ./docs/8.x/broadcasting.md:892
#: ./docs/9.x/broadcasting.md:938
#: ./docs/10.x/broadcasting.md:1003
#: ./docs/11.x/broadcasting.md:1025
#: ./docs/master/broadcasting.md:1023
msgctxt "P"
msgid "In addition, you may have noticed that the `broadcastOn` method receives a string `$event` argument. This argument contains the type of event that has occurred on the model and will have a value of `created`, `updated`, `deleted`, `trashed`, or `restored`. By inspecting the value of this variable, you may determine which channels (if any) the model should broadcast to for a particular event:"
msgstr "此外，讀者可能已經發現，`broadcastOn` 方法接收了一個字串的 `$event` 引述。這個引述包含了 Model 上所發生的事件，其值為 `created`, `updated`, `deleted`, `trashed`, 或 `restored`。只要檢查這個變數的值，就可以用來判斷對於特定事件要廣播道哪個頻道（若有的話）："

#: ./docs/8.x/broadcasting.md:894
#: ./docs/9.x/broadcasting.md:940
msgctxt "CODE: php"
msgid ""
"/**\n"
" * Get the channels that model events should broadcast on.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Broadcasting\\Channel|array\n"
" */\n"
"public function broadcastOn($event)\n"
"{\n"
"    return match ($event) {\n"
"        'deleted' => [],\n"
"        default => [$this, $this->user],\n"
"    };\n"
"}"
msgstr ""

#: ./docs/9.x/broadcasting.md:899
#: ./docs/10.x/broadcasting.md:963
#: ./docs/11.x/broadcasting.md:985
#: ./docs/master/broadcasting.md:983
msgctxt "P"
msgid "To get started, your Eloquent model should use the `Illuminate\\Database\\Eloquent\\BroadcastsEvents` trait. In addition, the model should define a `broadcastOn` method, which will return an array of channels that the model's events should broadcast on:"
msgstr "要開始設定自動廣播，應在 Eloquent Model 上使用 `Illuminate\\Database\\Eloquent\\BroadcastsEvents` Trait。此外，該 Model 應定義一個 `broadcastOn` 方法，並在其中回傳一組包含頻道名稱的陣列，以供 Model 事件廣播："

#: ./docs/10.x/broadcasting.md:900
#: ./docs/11.x/broadcasting.md:922
#: ./docs/master/broadcasting.md:920
msgctxt "CODE: js"
msgid ""
"Echo.join(`chat.${roomId}`)\n"
"    .here((users) => {\n"
"        // ...\n"
"    })\n"
"    .joining((user) => {\n"
"        console.log(user.name);\n"
"    })\n"
"    .leaving((user) => {\n"
"        console.log(user.name);\n"
"    })\n"
"    .error((error) => {\n"
"        console.error(error);\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:910
#: ./docs/9.x/broadcasting.md:956
#: ./docs/10.x/broadcasting.md:1020
#: ./docs/11.x/broadcasting.md:1042
#: ./docs/master/broadcasting.md:1040
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-model-broadcasting-event-creation\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:911
#: ./docs/9.x/broadcasting.md:957
#: ./docs/10.x/broadcasting.md:1021
#: ./docs/11.x/broadcasting.md:1043
#: ./docs/master/broadcasting.md:1041
msgctxt "H4"
msgid "Customizing Model Broadcasting Event Creation"
msgstr "自訂 Model 廣播的事件建立"

#: ./docs/8.x/broadcasting.md:913
#: ./docs/9.x/broadcasting.md:959
#: ./docs/10.x/broadcasting.md:1023
#: ./docs/11.x/broadcasting.md:1045
#: ./docs/master/broadcasting.md:1043
msgctxt "P"
msgid "Occasionally, you may wish to customize how Laravel creates the underlying model broadcasting event. You may accomplish this by defining a `newBroadcastableEvent` method on your Eloquent model. This method should return an `Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred` instance:"
msgstr "有時候，我們可能會想自訂 Laravel 要如何建立 Model 廣播時使用的事件。為此，我們可以通過在 Eloquent Model 上定義一個 `newBroadcastableEvent` 來達成。該方法應回傳 `Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred` 實體："

#: ./docs/8.x/broadcasting.md:915
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred\n"
"\n"
"/**\n"
" * Create a new broadcastable model event for the model.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred\n"
" */\n"
"protected function newBroadcastableEvent($event)\n"
"{\n"
"    return (new BroadcastableModelEventOccurred(\n"
"        $this, $event\n"
"    ))->dontBroadcastToCurrentUser();\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:916
#: ./docs/11.x/broadcasting.md:938
#: ./docs/master/broadcasting.md:936
msgctxt "P"
msgid "The `here` callback will be executed immediately once the channel is joined successfully, and will receive an array containing the user information for all of the other users currently subscribed to the channel. The `joining` method will be executed when a new user joins a channel, while the `leaving` method will be executed when a user leaves the channel. The `error` method will be executed when the authentication endpoint returns an HTTP status code other than 200 or if there is a problem parsing the returned JSON."
msgstr ""

#: ./docs/10.x/broadcasting.md:919
#: ./docs/11.x/broadcasting.md:941
#: ./docs/master/broadcasting.md:939
msgctxt "H3"
msgid "Broadcasting to Presence Channels"
msgstr ""

#: ./docs/10.x/broadcasting.md:923
#: ./docs/11.x/broadcasting.md:945
#: ./docs/master/broadcasting.md:943
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the channels the event should broadcast on.\n"
" *\n"
" * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n"
" */\n"
"public function broadcastOn(): array\n"
"{\n"
"    return [\n"
"        new PresenceChannel('chat.'.$this->message->room_id),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:932
#: ./docs/9.x/broadcasting.md:978
#: ./docs/10.x/broadcasting.md:1039
#: ./docs/11.x/broadcasting.md:1061
#: ./docs/master/broadcasting.md:1059
#~ msgctxt "P"
#~ msgid "<a name=\"model-broadcasting-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:933
#: ./docs/9.x/broadcasting.md:979
#: ./docs/10.x/broadcasting.md:1040
#: ./docs/11.x/broadcasting.md:1062
#: ./docs/master/broadcasting.md:1060
msgctxt "H3"
msgid "Model Broadcasting Conventions"
msgstr "Model 廣播慣例"

#: ./docs/8.x/broadcasting.md:935
#: ./docs/9.x/broadcasting.md:981
#: ./docs/10.x/broadcasting.md:1042
#: ./docs/11.x/broadcasting.md:1064
#: ./docs/master/broadcasting.md:1062
#~ msgctxt "P"
#~ msgid "<a name=\"model-broadcasting-channel-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:936
#: ./docs/9.x/broadcasting.md:982
#: ./docs/10.x/broadcasting.md:1043
#: ./docs/11.x/broadcasting.md:1065
#: ./docs/master/broadcasting.md:1063
msgctxt "H4"
msgid "Channel Conventions"
msgstr "頻道慣例"

#: ./docs/8.x/broadcasting.md:938
#: ./docs/9.x/broadcasting.md:984
#: ./docs/10.x/broadcasting.md:1045
#: ./docs/11.x/broadcasting.md:1067
#: ./docs/master/broadcasting.md:1065
msgctxt "P"
msgid "As you may have noticed, the `broadcastOn` method in the model example above did not return `Channel` instances. Instead, Eloquent models were returned directly. If an Eloquent model instance is returned by your model's `broadcastOn` method (or is contained in an array returned by the method), Laravel will automatically instantiate a private channel instance for the model using the model's class name and primary key identifier as the channel name."
msgstr "讀者可能已經發現，在上方的 Model 範例中，`broadcastOn` 方法並沒有回傳 `Channel` 實體，而是直接回傳 Eloquent Model。若 Model 的 `broadcastOn` 方法回傳的是 Model 實體 (或是包含 Model 實體的陣列)，則 Laravel 會使用該 Model 的類別名稱與主索引鍵識別元作為頻道名稱，自動為該 Model 初始化一個私人頻道。"

#: ./docs/8.x/broadcasting.md:940
#: ./docs/9.x/broadcasting.md:986
msgctxt "P"
msgid "So, an `App\\Models\\User` model with an `id` of `1` would be converted into a `Illuminate\\Broadcasting\\PrivateChannel` instance with a name of `App.Models.User.1`. Of course, in addition to returning Eloquent model instances from your model's `broadcastOn` method, you may return complete `Channel` instances in order to have full control over the model's channel names:"
msgstr "因此，`id` 為 `1` 的 `App\\Models\\User` Model 會被轉換為一個名稱是 `App.Models.User.1` 的 `Illuminate\\Broadcasting\\PrivateChannel` 實體。當然，除了從 Model 的 `broadcastOn` 方法內回傳 Eloquent Model 實體外，也可以回傳一個完整的 `Channel` 實體來取得對 Model 的頻道名稱的完整控制權："

#: ./docs/8.x/broadcasting.md:942
#: ./docs/9.x/broadcasting.md:988
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"\n"
"/**\n"
" * Get the channels that model events should broadcast on.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Broadcasting\\Channel|array\n"
" */\n"
"public function broadcastOn($event)\n"
"{\n"
"    return [new PrivateChannel('user.'.$this->id)];\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:943
#: ./docs/11.x/broadcasting.md:965
#: ./docs/master/broadcasting.md:963
msgctxt "CODE: js"
msgid ""
"Echo.join(`chat.${roomId}`)\n"
"    .here(/* ... */)\n"
"    .joining(/* ... */)\n"
"    .leaving(/* ... */)\n"
"    .listen('NewMessage', (e) => {\n"
"        // ...\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:957
#: ./docs/9.x/broadcasting.md:1003
#: ./docs/10.x/broadcasting.md:1065
#: ./docs/11.x/broadcasting.md:1087
#: ./docs/master/broadcasting.md:1085
msgctxt "P"
msgid "If you plan to explicitly return a channel instance from your model's `broadcastOn` method, you may pass an Eloquent model instance to the channel's constructor. When doing so, Laravel will use the model channel conventions discussed above to convert the Eloquent model into a channel name string:"
msgstr "若有打算要從 Model 的 `broadcastOn` 方法內明顯回傳頻道實體，則可以將 Eloquent Model 實體傳入該頻道的建構函式。這樣一來，Laravel 就可以通過剛才提到的 Model 頻道慣例來將 Eloquent Model 轉換為頻道名稱字串："

#: ./docs/8.x/broadcasting.md:959
#: ./docs/9.x/broadcasting.md:1005
#: ./docs/10.x/broadcasting.md:1067
#: ./docs/11.x/broadcasting.md:1089
#: ./docs/master/broadcasting.md:1087
msgctxt "CODE: php"
msgid "return [new Channel($this->user)];"
msgstr ""

#: ./docs/9.x/broadcasting.md:961
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred;\n"
"\n"
"/**\n"
" * Create a new broadcastable model event for the model.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred\n"
" */\n"
"protected function newBroadcastableEvent($event)\n"
"{\n"
"    return (new BroadcastableModelEventOccurred(\n"
"        $this, $event\n"
"    ))->dontBroadcastToCurrentUser();\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:963
#: ./docs/9.x/broadcasting.md:1009
msgctxt "P"
msgid "If you need to determine the channel name of a model, you may call the `broadcastChannel` method on any model instance. For example, this method returns the string `App.Models.User.1` for a `App\\Models\\User` model with an `id` of `1`:"
msgstr "若想判斷某個 Model 的頻道名稱，可以在任何 Model 實體上呼叫 `broadcastChannel` 方法。舉例來說，對於一個 `id` 為 `1` 的 `App\\Models\\User` Model，該方法會回傳一個字串 `App.Models.User.1`："

#: ./docs/10.x/broadcasting.md:965
#: ./docs/11.x/broadcasting.md:987
#: ./docs/master/broadcasting.md:985
msgctxt "CODE: php"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Database\\Eloquent\\BroadcastsEvents;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use BroadcastsEvents, HasFactory;\n"
"\n"
"    /**\n"
"     * Get the user that the post belongs to.\n"
"     */\n"
"    public function user(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(User::class);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the channels that model events should broadcast on.\n"
"     *\n"
"     * @return array<int, \\Illuminate\\Broadcasting\\Channel|\\Illuminate\\Database\\Eloquent\\Model>\n"
"     */\n"
"    public function broadcastOn(string $event): array\n"
"    {\n"
"        return [$this, $this->user];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:965
#: ./docs/9.x/broadcasting.md:1011
#: ./docs/10.x/broadcasting.md:1073
#: ./docs/11.x/broadcasting.md:1095
#: ./docs/master/broadcasting.md:1093
msgctxt "CODE: php"
msgid "$user->broadcastChannel()"
msgstr ""

#: ./docs/8.x/broadcasting.md:969
#: ./docs/9.x/broadcasting.md:1015
#: ./docs/10.x/broadcasting.md:1077
#: ./docs/11.x/broadcasting.md:1099
#: ./docs/master/broadcasting.md:1097
#~ msgctxt "P"
#~ msgid "<a name=\"model-broadcasting-event-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:970
#: ./docs/9.x/broadcasting.md:1016
#: ./docs/10.x/broadcasting.md:1078
#: ./docs/11.x/broadcasting.md:1100
#: ./docs/master/broadcasting.md:1098
msgctxt "H4"
msgid "Event Conventions"
msgstr "事件慣例"

#: ./docs/8.x/broadcasting.md:972
#: ./docs/9.x/broadcasting.md:1018
#: ./docs/10.x/broadcasting.md:1080
#: ./docs/11.x/broadcasting.md:1102
#: ./docs/master/broadcasting.md:1100
msgctxt "P"
msgid "Since model broadcast events are not associated with an \"actual\" event within your application's `App\\Events` directory, they are assigned a name and a payload based on conventions. Laravel's convention is to broadcast the event using the class name of the model (not including the namespace) and the name of the model event that triggered the broadcast."
msgstr "由於 Model 廣播事件並不與專案的 `App\\Events` 目錄內的「真實」事件有關，這些事件只會依據慣例來指派名稱與 Payload (裝載)。Laravel 的慣例就是使用 Model 的類別名稱 (不含 Namespace) 與觸發廣播的 Model 事件來廣播。"

#: ./docs/8.x/broadcasting.md:974
#: ./docs/9.x/broadcasting.md:1020
#: ./docs/10.x/broadcasting.md:1082
#: ./docs/11.x/broadcasting.md:1104
#: ./docs/master/broadcasting.md:1102
msgctxt "P"
msgid "So, for example, an update to the `App\\Models\\Post` model would broadcast an event to your client-side application as `PostUpdated` with the following payload:"
msgstr "因此，對 `App\\Models\\Post` Model 進行更新，會將 `PostUpdated` 事件與下列 Payload 廣播到用戶端："

#: ./docs/8.x/broadcasting.md:976
#: ./docs/9.x/broadcasting.md:1022
#: ./docs/10.x/broadcasting.md:1084
#: ./docs/11.x/broadcasting.md:1106
#: ./docs/master/broadcasting.md:1104
msgctxt "CODE"
msgid ""
"{\n"
"    \"model\": {\n"
"        \"id\": 1,\n"
"        \"title\": \"My first post\"\n"
"        ...\n"
"    },\n"
"    ...\n"
"    \"socket\": \"someSocketId\",\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:986
#: ./docs/9.x/broadcasting.md:1034
#: ./docs/10.x/broadcasting.md:1096
#: ./docs/11.x/broadcasting.md:1118
#: ./docs/master/broadcasting.md:1116
msgctxt "P"
msgid "The deletion of the `App\\Models\\User` model would broadcast an event named `UserDeleted`."
msgstr "刪除 `App\\Models\\Post` Model 時廣播的事件名稱會是 `UserDeleted`。"

#: ./docs/8.x/broadcasting.md:988
#: ./docs/9.x/broadcasting.md:1036
#: ./docs/10.x/broadcasting.md:1098
#: ./docs/11.x/broadcasting.md:1120
#: ./docs/master/broadcasting.md:1118
msgctxt "P"
msgid "If you would like, you may define a custom broadcast name and payload by adding a `broadcastAs` and `broadcastWith` method to your model. These methods receive the name of the model event / operation that is occurring, allowing you to customize the event's name and payload for each model operation. If `null` is returned from the `broadcastAs` method, Laravel will use the model broadcasting event name conventions discussed above when broadcasting the event:"
msgstr "若有需要，也可以通過在 Model 中新增一個 `broadcastAs` 與 `broadcastWith` 方法來自訂廣播的名稱與 Payload。這些方法會收到目前發生的 Model 事件或動作，好讓我們能為不同的 Model 動作自訂事件名稱與 Payload。若在 `broadcastAs` 方法中回傳 `null`，則 Laravel 會使用上方討論過的 Model 廣播事件名稱的慣例來廣播這個事件："

#: ./docs/8.x/broadcasting.md:990
#: ./docs/9.x/broadcasting.md:1038
msgctxt "CODE: php"
msgid ""
"/**\n"
" * The model event's broadcast name.\n"
" *\n"
" * @param  string  $event\n"
" * @return string|null\n"
" */\n"
"public function broadcastAs($event)\n"
"{\n"
"    return match ($event) {\n"
"        'created' => 'post.created',\n"
"        default => null,\n"
"    };\n"
"}\n"
"\n"
"/**\n"
" * Get the data to broadcast for the model.\n"
" *\n"
" * @param  string  $event\n"
" * @return array\n"
" */\n"
"public function broadcastWith($event)\n"
"{\n"
"    return match ($event) {\n"
"        'created' => ['title' => $this->title],\n"
"        default => ['model' => $this],\n"
"    };\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:1005
#: ./docs/11.x/broadcasting.md:1027
#: ./docs/master/broadcasting.md:1025
msgctxt "CODE: php"
msgid ""
"/**\n"
" * Get the channels that model events should broadcast on.\n"
" *\n"
" * @return array<string, array<int, \\Illuminate\\Broadcasting\\Channel|\\Illuminate\\Database\\Eloquent\\Model>>\n"
" */\n"
"public function broadcastOn(string $event): array\n"
"{\n"
"    return match ($event) {\n"
"        'deleted' => [],\n"
"        default => [$this, $this->user],\n"
"    };\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:1020
#: ./docs/9.x/broadcasting.md:1068
#: ./docs/10.x/broadcasting.md:1126
#: ./docs/11.x/broadcasting.md:1148
#: ./docs/master/broadcasting.md:1146
#~ msgctxt "P"
#~ msgid "<a name=\"listening-for-model-broadcasts\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:1021
#: ./docs/9.x/broadcasting.md:1069
msgctxt "H3"
msgid "Listening For Model Broadcasts"
msgstr "監聽 Model 廣播"

#: ./docs/8.x/broadcasting.md:1023
#: ./docs/9.x/broadcasting.md:1071
#: ./docs/10.x/broadcasting.md:1129
#: ./docs/11.x/broadcasting.md:1151
#: ./docs/master/broadcasting.md:1149
msgctxt "P"
msgid "Once you have added the `BroadcastsEvents` trait to your model and defined your model's `broadcastOn` method, you are ready to start listening for broadcasted model events within your client-side application. Before getting started, you may wish to consult the complete documentation on [listening for events](#listening-for-events)."
msgstr "在 Model 中新增好 `BroadcastsEvents` Trait 並定義好 Model 的 `broadcastOn` 方法後，就可以開始在用戶端中監聽廣播出來的 Model 事件了。在開始前，建議你先閱讀有關[監聽事件](#listening-for-events)的完整說明文件。"

#: ./docs/10.x/broadcasting.md:1025
#: ./docs/11.x/broadcasting.md:1047
#: ./docs/master/broadcasting.md:1045
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred;\n"
"\n"
"/**\n"
" * Create a new broadcastable model event for the model.\n"
" */\n"
"protected function newBroadcastableEvent(string $event): BroadcastableModelEventOccurred\n"
"{\n"
"    return (new BroadcastableModelEventOccurred(\n"
"        $this, $event\n"
"    ))->dontBroadcastToCurrentUser();\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:1025
#: ./docs/9.x/broadcasting.md:1073
#: ./docs/10.x/broadcasting.md:1131
#: ./docs/11.x/broadcasting.md:1153
#: ./docs/master/broadcasting.md:1151
msgctxt "P"
msgid "First, use the `private` method to retrieve an instance of a channel, then call the `listen` method to listen for a specified event. Typically, the channel name given to the `private` method should correspond to Laravel's [model broadcasting conventions](#model-broadcasting-conventions)."
msgstr "首先，使用 `private` 方法來取得 Channel 實體，然後呼叫 `listen` 方法來監聽特定的事件。一般來說，傳給 `private` 方法的頻道名稱應與 Laravel 的 [Model 廣播慣例](#model-broadcasting-conventions)相對應。"

#: ./docs/8.x/broadcasting.md:1027
#: ./docs/9.x/broadcasting.md:1075
#: ./docs/10.x/broadcasting.md:1133
#: ./docs/11.x/broadcasting.md:1155
#: ./docs/master/broadcasting.md:1153
msgctxt "P"
msgid "Once you have obtained a channel instance, you may use the `listen` method to listen for a particular event. Since model broadcast events are not associated with an \"actual\" event within your application's `App\\Events` directory, the [event name](#model-broadcasting-event-conventions) must be prefixed with a `.` to indicate it does not belong to a particular namespace. Each model broadcast event has a `model` property which contains all of the broadcastable properties of the model:"
msgstr "取得 Channel 實體後，就可以使用 `listen` 方法來監聽特定的事件。由於 Model 廣播事件並不與專案中 `App\\Events` 目錄下的「真實事件」互相關聯，因此，[事件名稱](#model-broadcasting-event-conventions)前應加上一個 `.` 字元，以標識其不屬於特定的命名空間。每個 Model 廣播事件都有一個 `model` 屬性，其中包含了 Model 中所有可廣播的屬性："

#: ./docs/8.x/broadcasting.md:1029
#: ./docs/9.x/broadcasting.md:1077
#: ./docs/10.x/broadcasting.md:1135
#: ./docs/11.x/broadcasting.md:1157
#: ./docs/master/broadcasting.md:1155
msgctxt "CODE: js"
msgid ""
"Echo.private(`App.Models.User.${this.user.id}`)\n"
"    .listen('.PostUpdated', (e) => {\n"
"        console.log(e.model);\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:1036
#: ./docs/9.x/broadcasting.md:1084
#: ./docs/10.x/broadcasting.md:1142
#: ./docs/11.x/broadcasting.md:1164
#: ./docs/master/broadcasting.md:1162
#~ msgctxt "P"
#~ msgid "<a name=\"client-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:1037
#: ./docs/9.x/broadcasting.md:1085
#: ./docs/10.x/broadcasting.md:1143
#: ./docs/11.x/broadcasting.md:1165
#: ./docs/master/broadcasting.md:1163
msgctxt "H2"
msgid "Client Events"
msgstr "用戶端事件"

#: ./docs/8.x/broadcasting.md:1039
#: ./docs/9.x/broadcasting.md:1088
#: ./docs/10.x/broadcasting.md:1146
#: ./docs/11.x/broadcasting.md:1168
#: ./docs/master/broadcasting.md:1166
msgctxt "P"
msgid "When using [Pusher Channels](https://pusher.com/channels), you must enable the \"Client Events\" option in the \"App Settings\" section of your [application dashboard](https://dashboard.pusher.com/) in order to send client events."
msgstr "在使用 [Pusher Channels](https://pusher.com/channels) 時，可以在 [Application Dashboard](https://dashboard.pusher.com/) 內啟用「App Settings」中的「Client Event」，以傳送用戶端事件。"

#: ./docs/8.x/broadcasting.md:1041
#: ./docs/9.x/broadcasting.md:1090
#: ./docs/10.x/broadcasting.md:1148
#: ./docs/11.x/broadcasting.md:1170
#: ./docs/master/broadcasting.md:1168
msgctxt "P"
msgid "Sometimes you may wish to broadcast an event to other connected clients without hitting your Laravel application at all. This can be particularly useful for things like \"typing\" notifications, where you want to alert users of your application that another user is typing a message on a given screen."
msgstr "有時候我們可能會想將事件直接廣播給其他連線的用戶端，而不經由 Laravel 端。特別像是如顯示「正在輸入」等通知時，我們只是想告訴使用者網站內的其他使用者正在特定畫面上輸入。"

#: ./docs/8.x/broadcasting.md:1043
#: ./docs/9.x/broadcasting.md:1092
#: ./docs/10.x/broadcasting.md:1150
#: ./docs/11.x/broadcasting.md:1172
#: ./docs/master/broadcasting.md:1170
msgctxt "P"
msgid "To broadcast client events, you may use Echo's `whisper` method:"
msgstr "若要廣播用戶端事件，可以使用 Echo 的 `whisper` 方法："

#: ./docs/8.x/broadcasting.md:1045
#: ./docs/9.x/broadcasting.md:1094
#: ./docs/10.x/broadcasting.md:1152
#: ./docs/11.x/broadcasting.md:1174
#: ./docs/master/broadcasting.md:1172
msgctxt "CODE"
msgid ""
"Echo.private(`chat.${roomId}`)\n"
"    .whisper('typing', {\n"
"        name: this.user.name\n"
"    });"
msgstr ""

#: ./docs/10.x/broadcasting.md:1047
#: ./docs/11.x/broadcasting.md:1069
#: ./docs/master/broadcasting.md:1067
msgctxt "P"
msgid "So, an `App\\Models\\User` model with an `id` of `1` would be converted into an `Illuminate\\Broadcasting\\PrivateChannel` instance with a name of `App.Models.User.1`. Of course, in addition to returning Eloquent model instances from your model's `broadcastOn` method, you may return complete `Channel` instances in order to have full control over the model's channel names:"
msgstr ""

#: ./docs/10.x/broadcasting.md:1049
#: ./docs/11.x/broadcasting.md:1071
#: ./docs/master/broadcasting.md:1069
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"\n"
"/**\n"
" * Get the channels that model events should broadcast on.\n"
" *\n"
" * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n"
" */\n"
"public function broadcastOn(string $event): array\n"
"{\n"
"    return [\n"
"        new PrivateChannel('user.'.$this->id)\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/broadcasting.md:1050
#: ./docs/9.x/broadcasting.md:1101
#: ./docs/10.x/broadcasting.md:1159
#: ./docs/11.x/broadcasting.md:1181
#: ./docs/master/broadcasting.md:1179
msgctxt "P"
msgid "To listen for client events, you may use the `listenForWhisper` method:"
msgstr "若要監聽用戶端事件，可以使用 `listenForWhisper` 方法："

#: ./docs/8.x/broadcasting.md:1052
#: ./docs/9.x/broadcasting.md:1103
#: ./docs/10.x/broadcasting.md:1161
#: ./docs/11.x/broadcasting.md:1183
#: ./docs/master/broadcasting.md:1181
msgctxt "CODE"
msgid ""
"Echo.private(`chat.${roomId}`)\n"
"    .listenForWhisper('typing', (e) => {\n"
"        console.log(e.name);\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:1057
#: ./docs/9.x/broadcasting.md:1110
#: ./docs/10.x/broadcasting.md:1168
#: ./docs/11.x/broadcasting.md:1190
#: ./docs/master/broadcasting.md:1188
#~ msgctxt "P"
#~ msgid "<a name=\"notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/broadcasting.md:1058
#: ./docs/9.x/broadcasting.md:1111
#: ./docs/10.x/broadcasting.md:1169
#: ./docs/11.x/broadcasting.md:1191
#: ./docs/master/broadcasting.md:1189
msgctxt "H2"
msgid "Notifications"
msgstr "通知"

#: ./docs/8.x/broadcasting.md:1060
#: ./docs/9.x/broadcasting.md:1113
#: ./docs/10.x/broadcasting.md:1171
#: ./docs/11.x/broadcasting.md:1193
#: ./docs/master/broadcasting.md:1191
msgctxt "P"
msgid "By pairing event broadcasting with [notifications](/docs/{{version}}/notifications), your JavaScript application may receive new notifications as they occur without needing to refresh the page. Before getting started, be sure to read over the documentation on using [the broadcast notification channel](/docs/{{version}}/notifications#broadcast-notifications)."
msgstr "只要將事件廣播與 [通知](/docs/{{version}}/notifications) 一起使用，JavaScript 端就可以在不重新整理的情況下接收新通知。在開始前，請先閱讀有關[廣播通知頻道](/docs/{{version}}/notifications#broadcast-notifications)的說明文件。"

#: ./docs/8.x/broadcasting.md:1062
#: ./docs/9.x/broadcasting.md:1115
#: ./docs/10.x/broadcasting.md:1173
#: ./docs/11.x/broadcasting.md:1195
#: ./docs/master/broadcasting.md:1193
msgctxt "P"
msgid "Once you have configured a notification to use the broadcast channel, you may listen for the broadcast events using Echo's `notification` method. Remember, the channel name should match the class name of the entity receiving the notifications:"
msgstr "設定讓通知使用廣播頻道後，就可以使用 Echo 的 `notification` 方法來接收廣播。請記住，頻道的名稱應與接收通知的使用者類別名稱相符："

#: ./docs/8.x/broadcasting.md:1064
#: ./docs/9.x/broadcasting.md:1117
#: ./docs/10.x/broadcasting.md:1175
#: ./docs/11.x/broadcasting.md:1197
#: ./docs/master/broadcasting.md:1195
msgctxt "CODE"
msgid ""
"Echo.private(`App.Models.User.${userId}`)\n"
"    .notification((notification) => {\n"
"        console.log(notification.type);\n"
"    });"
msgstr ""

#: ./docs/8.x/broadcasting.md:1069
#: ./docs/9.x/broadcasting.md:1124
#: ./docs/10.x/broadcasting.md:1182
msgctxt "P"
msgid "In this example, all notifications sent to `App\\Models\\User` instances via the `broadcast` channel would be received by the callback. A channel authorization callback for the `App.Models.User.{id}` channel is included in the default `BroadcastServiceProvider` that ships with the Laravel framework."
msgstr "在此範例中，所有通過 `broadcast` 頻道傳送給 `App\\Models\\User` 實體的通知都會被該回呼收到。用於 `App.Models.User.{id}` 的頻道授權回呼包含在 Laravel 框架附帶的 `BroadcastServiceProvider` 內。"

#: ./docs/10.x/broadcasting.md:1071
#: ./docs/11.x/broadcasting.md:1093
#: ./docs/master/broadcasting.md:1091
msgctxt "P"
msgid "If you need to determine the channel name of a model, you may call the `broadcastChannel` method on any model instance. For example, this method returns the string `App.Models.User.1` for an `App\\Models\\User` model with an `id` of `1`:"
msgstr "若想判斷某個 Model 的頻道名稱，可以在任何 Model 實體上呼叫 `broadcastChannel` 方法。舉例來說，對於一個 `id` 為 `1` 的 `App\\Models\\User` Model，該方法會回傳一個字串 `App.Models.User.1`："

#: ./docs/10.x/broadcasting.md:1100
#: ./docs/11.x/broadcasting.md:1122
#: ./docs/master/broadcasting.md:1120
msgctxt "CODE: php"
msgid ""
"/**\n"
" * The model event's broadcast name.\n"
" */\n"
"public function broadcastAs(string $event): string|null\n"
"{\n"
"    return match ($event) {\n"
"        'created' => 'post.created',\n"
"        default => null,\n"
"    };\n"
"}\n"
"\n"
"/**\n"
" * Get the data to broadcast for the model.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function broadcastWith(string $event): array\n"
"{\n"
"    return match ($event) {\n"
"        'created' => ['title' => $this->title],\n"
"        default => ['model' => $this],\n"
"    };\n"
"}"
msgstr ""

#: ./docs/10.x/broadcasting.md:1127
#: ./docs/11.x/broadcasting.md:1149
#: ./docs/master/broadcasting.md:1147
msgctxt "H3"
msgid "Listening for Model Broadcasts"
msgstr ""

#: ./docs/11.x/broadcasting.md:1204
#: ./docs/master/broadcasting.md:1202
msgctxt "P"
msgid "In this example, all notifications sent to `App\\Models\\User` instances via the `broadcast` channel would be received by the callback. A channel authorization callback for the `App.Models.User.{id}` channel is included in your application's `routes/channels.php` file."
msgstr ""
