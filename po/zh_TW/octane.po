msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/octane.pot\n"
"X-Crowdin-File-ID: 111\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-07-02 15:50\n"

#: docs/10.x/octane.md:block 1 (header)
msgid "Laravel Octane"
msgstr "Laravel Octane"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr "[安裝](#installation)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Server Prerequisites](#server-prerequisites)"
msgstr "[伺服器前置需求](#driver-prerequisites)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[RoadRunner](#roadrunner)"
msgstr "[RoadRunner](#roadrunner)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Swoole](#swoole)"
msgstr "[Swoole](#swoole)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Serving Your Application](#serving-your-application)"
msgstr "[處理你的網站](#serving-your-application)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Serving Your Application Via HTTPS](#serving-your-application-via-https)"
msgstr "[通過 HTTPS 來處理你的網站](#serving-your-application-via-https)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Serving Your Application Via Nginx](#serving-your-application-via-nginx)"
msgstr "[通過 Nginx 來處理你的網站](#serving-your-application-via-nginx)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Watching For File Changes](#watching-for-file-changes)"
msgstr "[監控檔案更改](#watching-for-file-changes)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Specifying The Worker Count](#specifying-the-worker-count)"
msgstr "[指定 Worker 的數量](#specifying-the-worker-count)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Specifying The Max Request Count](#specifying-the-max-request-count)"
msgstr "[指定最大 Request 數](#specifying-the-max-request-count)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Reloading The Workers](#reloading-the-workers)"
msgstr "[重新載入 Worker](#reloading-the-workers)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Stopping The Server](#stopping-the-server)"
msgstr "[停止伺服器](#stopping-the-server)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Dependency Injection & Octane](#dependency-injection-and-octane)"
msgstr "[相依性插入與 Octane](#dependency-injection-and-octane)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Container Injection](#container-injection)"
msgstr "[插入 Container](#container-injection)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Request Injection](#request-injection)"
msgstr "[插入 Request](#request-injection)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Configuration Repository Injection](#configuration-repository-injection)"
msgstr "[插入 Configuration Repository](#configuration-repository-injection)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Managing Memory Leaks](#managing-memory-leaks)"
msgstr "[管理 Memory Leak](#managing-memory-leaks)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Concurrent Tasks](#concurrent-tasks)"
msgstr "[併行的任務](#concurrent-tasks)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Ticks & Intervals](#ticks-and-intervals)"
msgstr "[Tick 與 Interval](#ticks-and-intervals)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[The Octane Cache](#the-octane-cache)"
msgstr "[Octane 的 Cache](#the-octane-cache)"

#: docs/10.x/octane.md:block 2 (unordered list)
msgid "[Tables](#tables)"
msgstr "[資料表](#tables)"

#: docs/10.x/octane.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/octane.md:block 5 (paragraph)
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [Open Swoole](https://openswoole.com/), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr "[Laravel Octane](https://github.com/laravel/octane) 通過高效能得網頁伺服器，如 [Open Swoole](https://openswoole.com/)、[Swoole](https://github.com/swoole/swoole-src) 與 [RoadRunner](https://roadrunner.dev) 來增強你的網站效能。Octane 會一次性載入你的專案，將專案保存在記憶體中，然後以超音速般的超快速度將 Request 傳給專案。"

#: docs/10.x/octane.md:block 7 (header)
msgid "Installation"
msgstr "安裝"

#: docs/10.x/octane.md:block 8 (paragraph)
msgid "Octane may be installed via the Composer package manager:"
msgstr "可以使用 Composer 套件管理員來安裝 Octane："

#: docs/10.x/octane.md:block 9 (code)
msgid "composer require laravel/octane\n"
msgstr "composer require laravel/octane\n"

#: docs/10.x/octane.md:block 10 (paragraph)
msgid "After installing Octane, you may execute the `octane:install` Artisan command, which will install Octane's configuration file into your application:"
msgstr "安裝好 Octane 後，就可以執行 `octane:install` Artisan 指令來安裝 Octane 的設定檔到專案中："

#: docs/10.x/octane.md:block 11 (code)
msgid "php artisan octane:install\n"
msgstr "php artisan octane:install\n"

#: docs/10.x/octane.md:block 13 (header)
msgid "Server Prerequisites"
msgstr "伺服器的前置需求"

#: docs/10.x/octane.md:block 14 (quote)
msgid "**Warning** Laravel Octane requires [PHP 8.1+](https://php.net/releases/)."
msgstr "**Warning** Laravel Octane 需要 [PHP 8.1 或之後的版本](https://php.net/releases)。"

#: docs/10.x/octane.md:block 16 (header)
msgid "RoadRunner"
msgstr "RoadRunner"

#: docs/10.x/octane.md:block 17 (paragraph)
msgid "[RoadRunner](https://roadrunner.dev) is powered by the RoadRunner binary, which is built using Go. The first time you start a RoadRunner based Octane server, Octane will offer to download and install the RoadRunner binary for you."
msgstr "[RoadRunner](https://roadrunner.dev) 是由 Go 製作的 RoadRunner 執行檔所驅動。初次啟動基於 RoadRunner 的 Octane Server 時，Octane 會為你下載與安裝 RoadRunner 執行檔。"

#: docs/10.x/octane.md:block 19 (header)
msgid "RoadRunner Via Laravel Sail"
msgstr "通過 Laravel Sail 的 RoadRunner"

#: docs/10.x/octane.md:block 20 (paragraph)
msgid "If you plan to develop your application using [Laravel Sail](/docs/{{version}}/sail), you should run the following commands to install Octane and RoadRunner:"
msgstr "若你打算使用 [Laravel Sail](/docs/{{version}}/sail) 來開發專案，請執行下列指令來安裝 Octane 與 RoadRunner："

#: docs/10.x/octane.md:block 21 (code)
msgid "./vendor/bin/sail up\n\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner\n"
msgstr "./vendor/bin/sail up\n\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner\n"

#: docs/10.x/octane.md:block 22 (paragraph)
msgid "Next, you should start a Sail shell and use the `rr` executable to retrieve the latest Linux based build of the RoadRunner binary:"
msgstr "接著，請開啟 Sail Shell，並使用 `rr` 執行檔來取得 RoadRunner 的最新版 Linux 執行檔："

#: docs/10.x/octane.md:block 23 (code)
msgid "./vendor/bin/sail shell\n\n"
"# Within the Sail shell...\n"
"./vendor/bin/rr get-binary\n"
msgstr "./vendor/bin/sail shell\n\n"
"# 在 Sail Shell 中...\n"
"./vendor/bin/rr get-binary\n"

#: docs/10.x/octane.md:block 24 (paragraph)
msgid "After installing the RoadRunner binary, you may exit your Sail shell session. You will now need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr "安裝好 RoadRunner 執行檔後，就可退出 Sail 的 Shell 工作階段。接著我們需要調整 Sail 所使用的 `supervisor.conf` 檔案來讓網站保持執行。要開始調整 `supervisor.conf` 檔案，請執行 `sail:publish` Artisan 指令："

#: docs/10.x/octane.md:block 25 (code)
msgid "./vendor/bin/sail artisan sail:publish\n"
msgstr "./vendor/bin/sail artisan sail:publish\n"

#: docs/10.x/octane.md:block 26 (paragraph)
msgid "Next, update the `command` directive of your application's `docker/supervisord.conf` file so that Sail serves your application using Octane instead of the PHP development server:"
msgstr "接著，請更新專案中 `docker/supervisord.conf` 檔案內的 `command` 指示詞，讓 Sail 使用 Octane 而不是 PHP 開發伺服器來執行你的網站："

#: docs/10.x/octane.md:block 27 (code)
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=80\n"
msgstr "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=80\n"

#: docs/10.x/octane.md:block 28 (paragraph)
msgid "Finally, ensure the `rr` binary is executable and build your Sail images:"
msgstr "最後，請確認 `rr` 二進位檔案是否具有可執行權限，並 ^[Build](建置) 你的 Sail ^[Image](映像)："

#: docs/10.x/octane.md:block 29 (code)
msgid "chmod +x ./rr\n\n"
"./vendor/bin/sail build --no-cache\n"
msgstr "chmod +x ./rr\n\n"
"./vendor/bin/sail build --no-cache\n"

#: docs/10.x/octane.md:block 31 (header)
msgid "Swoole"
msgstr "Swoole"

#: docs/10.x/octane.md:block 32 (paragraph)
msgid "If you plan to use the Swoole application server to serve your Laravel Octane application, you must install the Swoole PHP extension. Typically, this can be done via PECL:"
msgstr "若要使用 Swoole 應用程式伺服器來處理你的 Laravel Octane 網站，需要先安裝 Swoole PHP 擴充套件。一般來說，可以使用 PECL 來安裝："

#: docs/10.x/octane.md:block 33 (code)
msgid "pecl install swoole\n"
msgstr "pecl install swoole\n"

#: docs/10.x/octane.md:block 35 (header)
msgid "Open Swoole"
msgstr "開啟 Swoole"

#: docs/10.x/octane.md:block 36 (paragraph)
msgid "If you want to use the Open Swoole application server to serve your Laravel Octane application, you must install the Open Swoole PHP extension. Typically, this can be done via PECL:"
msgstr "若要使用 Open Swoole 應用程式伺服器來處理你的 Laravel Octane 網站，需要先安裝 Open Swoole PHP 擴充套件。一般來說，可以使用 PECL 來安裝："

#: docs/10.x/octane.md:block 37 (code)
msgid "pecl install openswoole\n"
msgstr "pecl install openswoole\n"

#: docs/10.x/octane.md:block 38 (paragraph)
msgid "Using Laravel Octane with Open Swoole grants the same functionality provided by Swoole, such as concurrent tasks, ticks, and intervals."
msgstr "以 Open Swoole 來使用 Laravel Octane 時所提供的功能與以 Swoole 來使用 Laravel Octane 相同，如併行的任務、Tick 與 Interval 等。"

#: docs/10.x/octane.md:block 40 (header)
msgid "Swoole Via Laravel Sail"
msgstr "通過 Laravel Sail 來使用 Swoole"

#: docs/10.x/octane.md:block 41 (quote)
msgid "**Warning** Before serving an Octane application via Sail, ensure you have the latest version of Laravel Sail and execute `./vendor/bin/sail build --no-cache` within your application's root directory."
msgstr "**Warning** 在使用 Sail 來處理 Octane 網站前，請確認是否使用最新版的 Laravel Sail，並在專案的根目錄中執行 `./vendor/bin/sail build --no-cache`。"

#: docs/10.x/octane.md:block 42 (paragraph)
msgid "Alternatively, you may develop your Swoole based Octane application using [Laravel Sail](/docs/{{version}}/sail), the official Docker based development environment for Laravel. Laravel Sail includes the Swoole extension by default. However, you will still need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr "或者，也可以使用 [Laravel Sail](/docs/{{version}}/sail) —— Laravel 官方所提供的 Docker 開發環境 —— 來開發基於 Swoole 的 Octane 網站。Laravel Sail 預設已包含了 Swoole 擴充套件，但我們需要先調整 Sail\n"
"所使用的 `supervisor.conf` 檔案，才能讓你的網站保持執行。若要開始調整 `supervisor.conf` 檔案，請執行 `sail:publish` Artisan 指令："

#: docs/10.x/octane.md:block 45 (code)
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\n"
msgstr "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\n"

#: docs/10.x/octane.md:block 46 (paragraph)
msgid "Finally, build your Sail images:"
msgstr "最後，請 ^[Build](建置) 你的 Sail ^[Image](映像)："

#: docs/10.x/octane.md:block 47 (code)
msgid "./vendor/bin/sail build --no-cache\n"
msgstr "./vendor/bin/sail build --no-cache\n"

#: docs/10.x/octane.md:block 49 (header)
msgid "Swoole Configuration"
msgstr "Swoole 設定"

#: docs/10.x/octane.md:block 50 (paragraph)
msgid "Swoole supports a few additional configuration options that you may add to your `octane` configuration file if necessary. Because they rarely need to be modified, these options are not included in the default configuration file:"
msgstr "若由需要，Swoole 還支援多個可以加到 `octane` 設定檔中的額外設定選項。由於這些選項通常不會被修改，因此在預設的設定檔中並未包含："

#: docs/10.x/octane.md:block 51 (code)
msgid "'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"],\n"
msgstr "'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"],\n"

#: docs/10.x/octane.md:block 53 (header)
msgid "Serving Your Application"
msgstr "處理你的網站"

#: docs/10.x/octane.md:block 54 (paragraph)
msgid "The Octane server can be started via the `octane:start` Artisan command. By default, this command will utilize the server specified by the `server` configuration option of your application's `octane` configuration file:"
msgstr "可以通過 `octane:start` Artisan 指令來啟動 Octane Server。預設情況下，這個指令會使用專案中 `octane` 設定檔內 `server` 設定選項所指定的伺服器："

#: docs/10.x/octane.md:block 55 (code)
msgid "php artisan octane:start\n"
msgstr "php artisan octane:start\n"

#: docs/10.x/octane.md:block 56 (paragraph)
msgid "By default, Octane will start the server on port 8000, so you may access your application in a web browser via `http://localhost:8000`."
msgstr "預設情況下，Octane 會在 8000 ^[Port](連接埠) 上啟動伺服器，因此我們可以在瀏覽器上通過 `http://localhost:8000` 來存取網站："

#: docs/10.x/octane.md:block 58 (header)
msgid "Serving Your Application Via HTTPS"
msgstr "通過 HTTPS 來處理你的網站"

#: docs/10.x/octane.md:block 59 (paragraph)
msgid "By default, applications running via Octane generate links prefixed with `http://`. The `OCTANE_HTTPS` environment variable, used within your application's `config/octane.php` configuration file, can be set to `true` when serving your application via HTTPS. When this configuration value is set to `true`, Octane will instruct Laravel to prefix all generated links with `https://`:"
msgstr "預設情況下。Octane 會產生 `http://` 開頭的連結。在專案內的 `config/octane.php` 中，使用到了 `OCTANE_HTTPS` 這個環境變數。使用 HTTPS 來處理網站時，請將該環境變數設為 `true`，以讓 Octane 來告訴 Laravel 所有產生的連結都要以 `https://` 開頭："

#: docs/10.x/octane.md:block 60 (code)
msgid "'https' => env('OCTANE_HTTPS', false),\n"
msgstr "'https' => env('OCTANE_HTTPS', false),\n"

#: docs/10.x/octane.md:block 62 (header)
msgid "Serving Your Application Via Nginx"
msgstr "通過 Nginx 來處理你的網站"

#: docs/10.x/octane.md:block 63 (quote)
msgid "**Note** If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel Octane application, check out [Laravel Forge](https://forge.laravel.com)."
msgstr "**Note** 若你還未準備好自行管理伺服器設定，或不擅長設定各種執行大型 Laravel Octane 專案所需要的設定，請參考看看 [Laravel Forge](https://forge.laravel.com)。"

#: docs/10.x/octane.md:block 64 (paragraph)
msgid "In production environments, you should serve your Octane application behind a traditional web server such as a Nginx or Apache. Doing so will allow the web server to serve your static assets such as images and stylesheets, as well as manage your SSL certificate termination."
msgstr "在正式環境中，請在傳統的網頁伺服器 —— 如 Nginx 或 Apache —— 後處理你的 Octane 網站。這樣一來，網站伺服器就可負責處理如圖片或 CSS 等的靜態網站，或是管理 SSL 憑證等。"

#: docs/10.x/octane.md:block 65 (paragraph)
msgid "In the Nginx configuration example below, Nginx will serve the site's static assets and proxy requests to the Octane server that is running on port 8000:"
msgstr "在下方的 Nginx 設定檔中，Nginx 會負責處理網站的靜態資源，並將 Request ^[Proxy](代理) 到 8000 ^[Port](連接埠) 上所執行的 Octane 伺服器："

#: docs/10.x/octane.md:block 66 (code)
msgid "map $http_upgrade $connection_upgrade {\n"
"    default upgrade;\n"
"    ''      close;\n"
"}\n\n"
"server {\n"
"    listen 80;\n"
"    listen [::]:80;\n"
"    server_name domain.com;\n"
"    server_tokens off;\n"
"    root /home/forge/domain.com/public;\n\n"
"    index index.php;\n\n"
"    charset utf-8;\n\n"
"    location /index.php {\n"
"        try_files /not_exists @octane;\n"
"    }\n\n"
"    location / {\n"
"        try_files $uri $uri/ @octane;\n"
"    }\n\n"
"    location = /favicon.ico { access_log off; log_not_found off; }\n"
"    location = /robots.txt  { access_log off; log_not_found off; }\n\n"
"    access_log off;\n"
"    error_log  /var/log/nginx/domain.com-error.log error;\n\n"
"    error_page 404 /index.php;\n\n"
"    location @octane {\n"
"        set $suffix \"\";\n\n"
"        if ($uri = /index.php) {\n"
"            set $suffix ?$query_string;\n"
"        }\n\n"
"        proxy_http_version 1.1;\n"
"        proxy_set_header Host $http_host;\n"
"        proxy_set_header Scheme $scheme;\n"
"        proxy_set_header SERVER_PORT $server_port;\n"
"        proxy_set_header REMOTE_ADDR $remote_addr;\n"
"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
"        proxy_set_header Upgrade $http_upgrade;\n"
"        proxy_set_header Connection $connection_upgrade;\n\n"
"        proxy_pass http://127.0.0.1:8000$suffix;\n"
"    }\n"
"}\n"
msgstr "map $http_upgrade $connection_upgrade {\n"
"    default upgrade;\n"
"    ''      close;\n"
"}\n\n"
"server {\n"
"    listen 80;\n"
"    listen [::]:80;\n"
"    server_name domain.com;\n"
"    server_tokens off;\n"
"    root /home/forge/domain.com/public;\n\n"
"    index index.php;\n\n"
"    charset utf-8;\n\n"
"    location /index.php {\n"
"        try_files /not_exists @octane;\n"
"    }\n\n"
"    location / {\n"
"        try_files $uri $uri/ @octane;\n"
"    }\n\n"
"    location = /favicon.ico { access_log off; log_not_found off; }\n"
"    location = /robots.txt  { access_log off; log_not_found off; }\n\n"
"    access_log off;\n"
"    error_log  /var/log/nginx/domain.com-error.log error;\n\n"
"    error_page 404 /index.php;\n\n"
"    location @octane {\n"
"        set $suffix \"\";\n\n"
"        if ($uri = /index.php) {\n"
"            set $suffix ?$query_string;\n"
"        }\n\n"
"        proxy_http_version 1.1;\n"
"        proxy_set_header Host $http_host;\n"
"        proxy_set_header Scheme $scheme;\n"
"        proxy_set_header SERVER_PORT $server_port;\n"
"        proxy_set_header REMOTE_ADDR $remote_addr;\n"
"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
"        proxy_set_header Upgrade $http_upgrade;\n"
"        proxy_set_header Connection $connection_upgrade;\n\n"
"        proxy_pass http://127.0.0.1:8000$suffix;\n"
"    }\n"
"}\n"

#: docs/10.x/octane.md:block 68 (header)
msgid "Watching For File Changes"
msgstr "監控檔案修改"

#: docs/10.x/octane.md:block 69 (paragraph)
msgid "Since your application is loaded in memory once when the Octane server starts, any changes to your application's files will not be reflected when you refresh your browser. For example, route definitions added to your `routes/web.php` file will not be reflected until the server is restarted. For convenience, you may use the `--watch` flag to instruct Octane to automatically restart the server on any file changes within your application:"
msgstr "由於你的網站會在 Octane 伺服器啟動當下就被載入到記憶體內，因此，在瀏覽器上重新整理，並不會反映出你對網站所作出的修改。舉例來說，除非重新啟動 Octane 伺服器，不然在 `routes/web.php` 檔內所新增的 Route 定義並不會被反映出來。為了方便開發，可以使用 `--watch` ^[Flag](旗標) 來讓 Octane 在偵測到專案內有任何檔案修改時自動重新啟動伺服器："

#: docs/10.x/octane.md:block 70 (code)
msgid "php artisan octane:start --watch\n"
msgstr "php artisan octane:start --watch\n"

#: docs/10.x/octane.md:block 71 (paragraph)
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:"
msgstr "在使用此功能前，請先確認本機開發環境上是否有安裝 [Node](https://nodejs.org)。此外，也需要在專案中安裝 [Chokidar](https://github.com/paulmillr/chokidar) 檔案監控套件："

#: docs/10.x/octane.md:block 72 (code)
msgid "npm install --save-dev chokidar\n"
msgstr "npm install --save-dev chokidar\n"

#: docs/10.x/octane.md:block 73 (paragraph)
msgid "You may configure the directories and files that should be watched using the `watch` configuration option within your application's `config/octane.php` configuration file."
msgstr "可以在專案內的 `config/octane.php` 設定檔中，使用 `watch` 設定選項來設定要監控哪些目錄與檔案。"

#: docs/10.x/octane.md:block 75 (header)
msgid "Specifying The Worker Count"
msgstr "指定 Worker 的數量"

#: docs/10.x/octane.md:block 76 (paragraph)
msgid "By default, Octane will start an application request worker for each CPU core provided by your machine. These workers will then be used to serve incoming HTTP requests as they enter your application. You may manually specify how many workers you would like to start using the `--workers` option when invoking the `octane:start` command:"
msgstr "預設情況下，Octane 會依照你裝置的 CPU 核心數量來啟動相應的 Worker 數。啟動之後，當連入的 HTTP Request 進入你的網站時，就會由這些 Worker 來負責處理。可以在執行 `octane:start` 指令時，使用 `--workers` 選項來手動指定要啟動多少個 Worker："

#: docs/10.x/octane.md:block 77 (code)
msgid "php artisan octane:start --workers=4\n"
msgstr "php artisan octane:start --workers=4\n"

#: docs/10.x/octane.md:block 78 (paragraph)
msgid "If you are using the Swoole application server, you may also specify how many [\"task workers\"](#concurrent-tasks) you wish to start:"
msgstr "使用 Swoole 應用程式伺服器時，還可以指定要啟動多少個「[Task Worker](#concurrent-tasks)」："

#: docs/10.x/octane.md:block 79 (code)
msgid "php artisan octane:start --workers=4 --task-workers=6\n"
msgstr "php artisan octane:start --workers=4 --task-workers=6\n"

#: docs/10.x/octane.md:block 81 (header)
msgid "Specifying The Max Request Count"
msgstr "指定最大 Request 數"

#: docs/10.x/octane.md:block 82 (paragraph)
msgid "To help prevent stray memory leaks, Octane gracefully restarts any worker once it has handled 500 requests. To adjust this number, you may use the `--max-requests` option:"
msgstr "為了協助避免造成 Memory Leak，Octane 會在任何 Worker 處理 500 個 Request 後將其柔性重新啟動 (Gracefully Restart)。若要調整此數值，可使用 `--max-requests` 選項："

#: docs/10.x/octane.md:block 83 (code)
msgid "php artisan octane:start --max-requests=250\n"
msgstr "php artisan octane:start --max-requests=250\n"

#: docs/10.x/octane.md:block 85 (header)
msgid "Reloading The Workers"
msgstr "重新載入 Worker"

#: docs/10.x/octane.md:block 86 (paragraph)
msgid "You may gracefully restart the Octane server's application workers using the `octane:reload` command. Typically, this should be done after deployment so that your newly deployed code is loaded into memory and is used to serve to subsequent requests:"
msgstr "可以使用 `octane:reload` 指令來柔性重啟 Octane 伺服器的應用程式 Worker。一般來說，該指令應在部屬完成後使用，以將新部署的程式碼載入至記憶體當中，並用於處理接下來的 Request："

#: docs/10.x/octane.md:block 87 (code)
msgid "php artisan octane:reload\n"
msgstr "php artisan octane:reload\n"

#: docs/10.x/octane.md:block 89 (header)
msgid "Stopping The Server"
msgstr "停止伺服器"

#: docs/10.x/octane.md:block 90 (paragraph)
msgid "You may stop the Octane server using the `octane:stop` Artisan command:"
msgstr "可使用 `octane:stop` Artisan 指令以停止 Octane 伺服器："

#: docs/10.x/octane.md:block 91 (code)
msgid "php artisan octane:stop\n"
msgstr "php artisan octane:stop\n"

#: docs/10.x/octane.md:block 93 (header)
msgid "Checking The Server Status"
msgstr "檢查伺服器狀態"

#: docs/10.x/octane.md:block 94 (paragraph)
msgid "You may check the current status of the Octane server using the `octane:status` Artisan command:"
msgstr "可使用 `octane:status` Artisan 指令來檢查目前的 Octane 伺服器狀態："

#: docs/10.x/octane.md:block 95 (code)
msgid "php artisan octane:status\n"
msgstr "php artisan octane:status\n"

#: docs/10.x/octane.md:block 97 (header)
msgid "Dependency Injection & Octane"
msgstr "相依性插入與 Octane"

#: docs/10.x/octane.md:block 98 (paragraph)
msgid "Since Octane boots your application once and keeps it in memory while serving requests, there are a few caveats you should consider while building your application. For example, the `register` and `boot` methods of your application's service providers will only be executed once when the request worker initially boots. On subsequent requests, the same application instance will be reused."
msgstr ""

#: docs/10.x/octane.md:block 99 (paragraph)
msgid "In light of this, you should take special care when injecting the application service container or request into any object's constructor. By doing so, that object may have a stale version of the container or request on subsequent requests."
msgstr ""

#: docs/10.x/octane.md:block 100 (paragraph)
msgid "Octane will automatically handle resetting any first-party framework state between requests. However, Octane does not always know how to reset the global state created by your application. Therefore, you should be aware of how to build your application in a way that is Octane friendly. Below, we will discuss the most common situations that may cause problems while using Octane."
msgstr ""

#: docs/10.x/octane.md:block 102 (header)
msgid "Container Injection"
msgstr ""

#: docs/10.x/octane.md:block 103 (paragraph)
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire application service container into an object that is bound as a singleton:"
msgstr ""

#: docs/10.x/octane.md:block 104 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app);\n"
"    });\n"
"}\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app);\n"
"    });\n"
"}\n"

#: docs/10.x/octane.md:block 105 (paragraph)
msgid "In this example, if the `Service` instance is resolved during the application boot process, the container will be injected into the service and that same container will be held by the `Service` instance on subsequent requests. This **may** not be a problem for your particular application; however, it can lead to the container unexpectedly missing bindings that were added later in the boot cycle or by a subsequent request."
msgstr ""

#: docs/10.x/octane.md:block 106 (paragraph)
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a container resolver closure into the service that always resolves the current container instance:"
msgstr ""

#: docs/10.x/octane.md:block 107 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app);\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app);\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});\n"

#: docs/10.x/octane.md:block 108 (paragraph)
msgid "The global `app` helper and the `Container::getInstance()` method will always return the latest version of the application container."
msgstr ""

#: docs/10.x/octane.md:block 110 (header)
msgid "Request Injection"
msgstr ""

#: docs/10.x/octane.md:block 111 (paragraph)
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire request instance into an object that is bound as a singleton:"
msgstr ""

#: docs/10.x/octane.md:block 112 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}\n"

#: docs/10.x/octane.md:block 113 (paragraph)
msgid "In this example, if the `Service` instance is resolved during the application boot process, the HTTP request will be injected into the service and that same request will be held by the `Service` instance on subsequent requests. Therefore, all headers, input, and query string data will be incorrect, as well as all other request data."
msgstr ""

#: docs/10.x/octane.md:block 114 (paragraph)
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a request resolver closure into the service that always resolves the current request instance. Or, the most recommended approach is simply to pass the specific request information your object needs to one of the object's methods at runtime:"
msgstr ""

#: docs/10.x/octane.md:block 115 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app['request']);\n"
"});\n\n"
"$this->app->singleton(Service::class, function (Application $app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n\n"
"// Or...\n\n"
"$service->method($request->input('name'));\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app['request']);\n"
"});\n\n"
"$this->app->singleton(Service::class, function (Application $app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n\n"
"// 或者...\n\n"
"$service->method($request->input('name'));\n"

#: docs/10.x/octane.md:block 116 (paragraph)
msgid "The global `request` helper will always return the request the application is currently handling and is therefore safe to use within your application."
msgstr ""

#: docs/10.x/octane.md:block 117 (quote)
msgid "**Warning** It is acceptable to type-hint the `Illuminate\\Http\\Request` instance on your controller methods and route closures."
msgstr ""

#: docs/10.x/octane.md:block 119 (header)
msgid "Configuration Repository Injection"
msgstr ""

#: docs/10.x/octane.md:block 120 (paragraph)
msgid "In general, you should avoid injecting the configuration repository instance into the constructors of other objects. For example, the following binding injects the configuration repository into an object that is bound as a singleton:"
msgstr ""

#: docs/10.x/octane.md:block 121 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}\n"

#: docs/10.x/octane.md:block 122 (paragraph)
msgid "In this example, if the configuration values change between requests, that service will not have access to the new values because it's depending on the original repository instance."
msgstr ""

#: docs/10.x/octane.md:block 123 (paragraph)
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a configuration repository resolver closure to the class:"
msgstr ""

#: docs/10.x/octane.md:block 124 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app->make('config'));\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app->make('config'));\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});\n"

#: docs/10.x/octane.md:block 125 (paragraph)
msgid "The global `config` will always return the latest version of the configuration repository and is therefore safe to use within your application."
msgstr ""

#: docs/10.x/octane.md:block 127 (header)
msgid "Managing Memory Leaks"
msgstr ""

#: docs/10.x/octane.md:block 128 (paragraph)
msgid "Remember, Octane keeps your application in memory between requests; therefore, adding data to a statically maintained array will result in a memory leak. For example, the following controller has a memory leak since each request to the application will continue to add data to the static `$data` array:"
msgstr ""

#: docs/10.x/octane.md:block 129 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle an incoming request.\n"
" */\n"
"public function index(Request $request): array\n"
"{\n"
"    Service::$data[] = Str::random(10);\n\n"
"    return [\n"
"        // ...\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/octane.md:block 130 (paragraph)
msgid "While building your application, you should take special care to avoid creating these types of memory leaks. It is recommended that you monitor your application's memory usage during local development to ensure you are not introducing new memory leaks into your application."
msgstr ""

#: docs/10.x/octane.md:block 132 (header)
msgid "Concurrent Tasks"
msgstr ""

#: docs/10.x/octane.md:block 133 (quote)
msgid "**Warning** This feature requires [Swoole](#swoole)."
msgstr ""

#: docs/10.x/octane.md:block 134 (paragraph)
msgid "When using Swoole, you may execute operations concurrently via light-weight background tasks. You may accomplish this using Octane's `concurrently` method. You may combine this method with PHP array destructuring to retrieve the results of each operation:"
msgstr ""

#: docs/10.x/octane.md:block 135 (code)
msgid "use App\\User;\n"
"use App\\Server;\n"
"use Laravel\\Octane\\Facades\\Octane;\n\n"
"[$users, $servers] = Octane::concurrently([\n"
"    fn () => User::all(),\n"
"    fn () => Server::all(),\n"
"]);\n"
msgstr "use App\\User;\n"
"use App\\Server;\n"
"use Laravel\\Octane\\Facades\\Octane;\n\n"
"[$users, $servers] = Octane::concurrently([\n"
"    fn () => User::all(),\n"
"    fn () => Server::all(),\n"
"]);\n"

#: docs/10.x/octane.md:block 136 (paragraph)
msgid "Concurrent tasks processed by Octane utilize Swoole's \"task workers\", and execute within an entirely different process than the incoming request. The amount of workers available to process concurrent tasks is determined by the `--task-workers` directive on the `octane:start` command:"
msgstr ""

#: docs/10.x/octane.md:block 138 (paragraph)
msgid "When invoking the `concurrently` method, you should not provide more than 1024 tasks due to limitations imposed by Swoole's task system."
msgstr ""

#: docs/10.x/octane.md:block 140 (header)
msgid "Ticks & Intervals"
msgstr ""

#: docs/10.x/octane.md:block 142 (paragraph)
msgid "When using Swoole, you may register \"tick\" operations that will be executed every specified number of seconds. You may register \"tick\" callbacks via the `tick` method. The first argument provided to the `tick` method should be a string that represents the name of the ticker. The second argument should be a callable that will be invoked at the specified interval."
msgstr ""

#: docs/10.x/octane.md:block 143 (paragraph)
msgid "In this example, we will register a closure to be invoked every 10 seconds. Typically, the `tick` method should be called within the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/10.x/octane.md:block 144 (code)
msgid "Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10);\n"
msgstr "Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10);\n"

#: docs/10.x/octane.md:block 145 (paragraph)
msgid "Using the `immediate` method, you may instruct Octane to immediately invoke the tick callback when the Octane server initially boots, and every N seconds thereafter:"
msgstr ""

#: docs/10.x/octane.md:block 146 (code)
msgid "Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10)\n"
"        ->immediate();\n"
msgstr "Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10)\n"
"        ->immediate();\n"

#: docs/10.x/octane.md:block 148 (header)
msgid "The Octane Cache"
msgstr ""

#: docs/10.x/octane.md:block 150 (paragraph)
msgid "When using Swoole, you may leverage the Octane cache driver, which provides read and write speeds of up to 2 million operations per second. Therefore, this cache driver is an excellent choice for applications that need extreme read / write speeds from their caching layer."
msgstr ""

#: docs/10.x/octane.md:block 151 (paragraph)
msgid "This cache driver is powered by [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). All data stored in the cache is available to all workers on the server. However, the cached data will be flushed when the server is restarted:"
msgstr ""

#: docs/10.x/octane.md:block 152 (code)
msgid "Cache::store('octane')->put('framework', 'Laravel', 30);\n"
msgstr "Cache::store('octane')->put('framework', 'Laravel', 30);\n"

#: docs/10.x/octane.md:block 153 (quote)
msgid "**Note** The maximum number of entries allowed in the Octane cache may be defined in your application's `octane` configuration file."
msgstr ""

#: docs/10.x/octane.md:block 155 (header)
msgid "Cache Intervals"
msgstr ""

#: docs/10.x/octane.md:block 156 (paragraph)
msgid "In addition to the typical methods provided by Laravel's cache system, the Octane cache driver features interval based caches. These caches are automatically refreshed at the specified interval and should be registered within the `boot` method of one of your application's service providers. For example, the following cache will be refreshed every five seconds:"
msgstr ""

#: docs/10.x/octane.md:block 157 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5);\n"
msgstr "use Illuminate\\Support\\Str;\n\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5);\n"

#: docs/10.x/octane.md:block 159 (header)
msgid "Tables"
msgstr ""

#: docs/10.x/octane.md:block 161 (paragraph)
msgid "When using Swoole, you may define and interact with your own arbitrary [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). Swoole tables provide extreme performance throughput and the data in these tables can be accessed by all workers on the server. However, the data within them will be lost when the server is restarted."
msgstr ""

#: docs/10.x/octane.md:block 162 (paragraph)
msgid "Tables should be defined within the `tables` configuration array of your application's `octane` configuration file. An example table that allows a maximum of 1000 rows is already configured for you. The maximum size of string columns may be configured by specifying the column size after the column type as seen below:"
msgstr ""

#: docs/10.x/octane.md:block 163 (code)
msgid "'tables' => [\n"
"    'example:1000' => [\n"
"        'name' => 'string:1000',\n"
"        'votes' => 'int',\n"
"    ],\n"
"],\n"
msgstr "'tables' => [\n"
"    'example:1000' => [\n"
"        'name' => 'string:1000',\n"
"        'votes' => 'int',\n"
"    ],\n"
"],\n"

#: docs/10.x/octane.md:block 164 (paragraph)
msgid "To access a table, you may use the `Octane::table` method:"
msgstr ""

#: docs/10.x/octane.md:block 165 (code)
msgid "use Laravel\\Octane\\Facades\\Octane;\n\n"
"Octane::table('example')->set('uuid', [\n"
"    'name' => 'Nuno Maduro',\n"
"    'votes' => 1000,\n"
"]);\n\n"
"return Octane::table('example')->get('uuid');\n"
msgstr "use Laravel\\Octane\\Facades\\Octane;\n\n"
"Octane::table('example')->set('uuid', [\n"
"    'name' => 'Nuno Maduro',\n"
"    'votes' => 1000,\n"
"]);\n\n"
"return Octane::table('example')->get('uuid');\n"

#: docs/10.x/octane.md:block 166 (quote)
msgid "**Warning** The column types supported by Swoole tables are: `string`, `int`, and `float`."
msgstr ""

#: docs/8.x/octane.md:block 5 (paragraph)
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [Open Swoole](https://swoole.co.uk), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr "[Laravel Octane](https://github.com/laravel/octane) 通過高效能得網頁伺服器，如 [Open Swoole](https://swoole.co.uk/)、[Swoole](https://github.com/swoole/swoole-src) 與 [RoadRunner](https://roadrunner.dev) 來增強你的網站效能。Octane 會一次性載入你的專案，將專案保存在記憶體中，然後以超音速般的超快速度將 Request 傳給專案。"

#: docs/8.x/octane.md:block 14 (quote)
msgid "{note} Laravel Octane requires [PHP 8.0+](https://php.net/releases/)."
msgstr "{note} Laravel Octane 需要 [PHP 8.0 或之後的版本](https://php.net/releases)。"

#: docs/8.x/octane.md:block 27 (code)
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=8000\n"
msgstr "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=8000\n"

#: docs/8.x/octane.md:block 36 (quote)
msgid "{note} Before serving an Octane application via Sail, ensure you have the latest version of Laravel Sail and execute `./vendor/bin/sail build --no-cache` within your application's root directory."
msgstr "{note} 在使用 Sail 來處理 Octane 網站前，請確認是否使用最新版的 Laravel Sail，並在專案的根目錄中執行 `./vendor/bin/sail build --no-cache`。"

#: docs/8.x/octane.md:block 46 (code)
msgid "'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"];\n"
msgstr "'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"];\n"

#: docs/8.x/octane.md:block 58 (quote)
msgid "{tip} If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel Octane application, check out [Laravel Forge](https://forge.laravel.com)."
msgstr "{tip} 若你還未準備好自行管理伺服器設定，或不擅長設定各種執行大型 Laravel Octane 專案所需要的設定，請參考看看 [Laravel Forge](https://forge.laravel.com)。"

#: docs/8.x/octane.md:block 66 (paragraph)
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:library:"
msgstr ""

#: docs/8.x/octane.md:block 77 (paragraph)
msgid "To help prevent stray memory leaks, Octane can gracefully restart a worker once it has handled a given number of requests. To instruct Octane to do this, you may use the `--max-requests` option:"
msgstr ""

#: docs/8.x/octane.md:block 99 (code)
msgid "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app);\n"
"    });\n"
"}\n"
msgstr "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app);\n"
"    });\n"
"}\n"

#: docs/8.x/octane.md:block 102 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app);\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app);\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});\n"

#: docs/8.x/octane.md:block 107 (code)
msgid "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}\n"
msgstr "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}\n"

#: docs/8.x/octane.md:block 110 (code)
msgid "use App\\Service;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app['request']);\n"
"});\n\n"
"$this->app->singleton(Service::class, function ($app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n\n"
"// Or...\n\n"
"$service->method($request->input('name'));\n"
msgstr "use App\\Service;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app['request']);\n"
"});\n\n"
"$this->app->singleton(Service::class, function ($app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n\n"
"// 或者...\n\n"
"$service->method($request->input('name'));\n"

#: docs/8.x/octane.md:block 112 (quote)
msgid "{note} It is acceptable to type-hint the `Illuminate\\Http\\Request` instance on your controller methods and route closures."
msgstr ""

#: docs/8.x/octane.md:block 116 (code)
msgid "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}\n"
msgstr "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}\n"

#: docs/8.x/octane.md:block 119 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app->make('config'));\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app->make('config'));\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});\n"

#: docs/8.x/octane.md:block 124 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return void\n"
" */\n"
"public function index(Request $request)\n"
"{\n"
"    Service::$data[] = Str::random(10);\n\n"
"    // ...\n"
"}\n"
msgstr "use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return void\n"
" */\n"
"public function index(Request $request)\n"
"{\n"
"    Service::$data[] = Str::random(10);\n\n"
"    // ...\n"
"}\n"

#: docs/8.x/octane.md:block 128 (quote)
msgid "{note} This feature requires [Swoole](#swoole)."
msgstr ""

#: docs/8.x/octane.md:block 147 (quote)
msgid "{tip} The maximum number of entries allowed in the Octane cache may be defined in your application's `octane` configuration file."
msgstr ""

#: docs/8.x/octane.md:block 151 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5)\n"
msgstr "use Illuminate\\Support\\Str;\n\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5)\n"

#: docs/8.x/octane.md:block 160 (quote)
msgid "{note} The column types supported by Swoole tables are: `string`, `int`, and `float`."
msgstr ""

#: docs/9.x/octane.md:block 14 (quote)
msgid "**Warning** Laravel Octane requires [PHP 8.0+](https://php.net/releases/)."
msgstr "**Warning** Laravel Octane 需要 [PHP 8.0 或之後的版本](https://php.net/releases)。"

