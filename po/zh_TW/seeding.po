msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/seeding.pot\n"
"X-Crowdin-File-ID: 151\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-02-11 10:28\n"

#: docs/10.x/seeding.md:block 1 (header)
msgid "Database: Seeding"
msgstr "資料庫：Seeding"

#: docs/10.x/seeding.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/seeding.md:block 2 (unordered list)
msgid "[Writing Seeders](#writing-seeders)"
msgstr "[撰寫 Seeders](#writing-seeders)"

#: docs/10.x/seeding.md:block 2 (unordered list)
msgid "[Using Model Factories](#using-model-factories)"
msgstr "[使用 Model Factory](#using-model-factories)"

#: docs/10.x/seeding.md:block 2 (unordered list)
msgid "[Calling Additional Seeders](#calling-additional-seeders)"
msgstr "[呼叫其他 Seeder](#calling-additional-seeders)"

#: docs/10.x/seeding.md:block 2 (unordered list)
msgid "[Muting Model Events](#muting-model-events)"
msgstr "[靜音 Model Events](#muting-model-events)"

#: docs/10.x/seeding.md:block 2 (unordered list)
msgid "[Running Seeders](#running-seeders)"
msgstr "[執行 Seeder](#running-seeders)"

#: docs/10.x/seeding.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/seeding.md:block 5 (paragraph)
msgid "Laravel includes the ability to seed your database with data using seed classes. All seed classes are stored in the `database/seeders` directory. By default, a `DatabaseSeeder` class is defined for you. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order."
msgstr "在 Laravel 中，我們可以使用 Seed 類別來為資料庫提供初始資料。Seed 類別存放在 `database/seeders` 目錄中。預設情況下，Laravel 中已定義了一個 `DatabaseSeeder` 類別。在這個類別中，我們可以呼叫 `call` 方法來執行其他 Seed 類別，好讓我們能控制資料填充的順序。"

#: docs/10.x/seeding.md:block 6 (quote)
msgid "**Note** [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled during database seeding."
msgstr "**Note** 在進行 Seeder 時，會自動禁用[大量賦值保護](/docs/{{version}}/eloquent#mass-assignment)。"

#: docs/10.x/seeding.md:block 8 (header)
msgid "Writing Seeders"
msgstr "撰寫 Seeder"

#: docs/10.x/seeding.md:block 9 (paragraph)
msgid "To generate a seeder, execute the `make:seeder` [Artisan command](/docs/{{version}}/artisan). All seeders generated by the framework will be placed in the `database/seeders` directory:"
msgstr "若要產生 Seeder，請執行 `make:seeder` [Artisan 指令](/docs/{{version}}/artisan)。Laravel 所產生的所有 Seeder 都會放在 `database/seeders` 目錄下："

#: docs/10.x/seeding.md:block 10 (code)
msgid "php artisan make:seeder UserSeeder\n"
msgstr "php artisan make:seeder UserSeeder\n"

#: docs/10.x/seeding.md:block 11 (paragraph)
msgid "A seeder class only contains one method by default: `run`. This method is called when the `db:seed` [Artisan command](/docs/{{version}}/artisan) is executed. Within the `run` method, you may insert data into your database however you wish. You may use the [query builder](/docs/{{version}}/queries) to manually insert data or you may use [Eloquent model factories](/docs/{{version}}/eloquent-factories)."
msgstr "Seeder 類別中預設只包含了一個方法：`run`。執行 `db:seed` [Artisan 指令](/docs/{{version}}/artisan) 時，會呼叫該方法。在 `run` 方法中，我們可以任意將資料寫入資料庫內。我們可以使用 [Query Builder](/docs/{{version}}/queries) 來手動寫入資料，或是使用 [Eloquent Model Factory](/docs/{{version}}/eloquent-factories) 來寫入資料。"

#: docs/10.x/seeding.md:block 12 (paragraph)
msgid "As an example, let's modify the default `DatabaseSeeder` class and add a database insert statement to the `run` method:"
msgstr "來看看一個範例，讓我們來修改預設的 `DatabaseSeeder` 類別，並在 `run` 方法內新增一個資料庫 Insert 陳述式："

#: docs/10.x/seeding.md:block 13 (code)
msgid "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Illuminate\\Support\\Str;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Run the database seeders.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        DB::table('users')->insert([\n"
"            'name' => Str::random(10),\n"
"            'email' => Str::random(10).'@gmail.com',\n"
"            'password' => Hash::make('password'),\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Illuminate\\Support\\Str;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Run the database seeders.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        DB::table('users')->insert([\n"
"            'name' => Str::random(10),\n"
"            'email' => Str::random(10).'@gmail.com',\n"
"            'password' => Hash::make('password'),\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/10.x/seeding.md:block 14 (quote)
msgid "**Note** You may type-hint any dependencies you need within the `run` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr "**Note** 在 `run` 方法的簽章 (Signature) 中，我們可以 ^[Type-Hint](型別提示) 任何需要的相依性。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動解析 Type-Hint 中的相依性。"

#: docs/10.x/seeding.md:block 16 (header)
msgid "Using Model Factories"
msgstr "使用 Model Factory"

#: docs/10.x/seeding.md:block 17 (paragraph)
msgid "Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use [model factories](/docs/{{version}}/eloquent-factories) to conveniently generate large amounts of database records. First, review the [model factory documentation](/docs/{{version}}/eloquent-factories) to learn how to define your factories."
msgstr "當然，手動為每個要填入的 Model 指定屬性值是很麻煩的。我們不需要這麼做，而可以使用 [Model Factory](/docs/{{version}}/eloquent-factories) 來方便地產生大量資料。首先，請先看看 [Model Factory 的說明文件](/docs/{{version}}/eloquent-factories)以瞭解如何定義 Factory。"

#: docs/10.x/seeding.md:block 18 (paragraph)
msgid "For example, let's create 50 users that each has one related post:"
msgstr "舉例來說，我們先來建立 50 個使用者，其中每個使用者都有 1 篇關聯的貼文："

#: docs/10.x/seeding.md:block 19 (code)
msgid "use App\\Models\\User;\n\n"
"/**\n"
" * Run the database seeders.\n"
" */\n"
"public function run(): void\n"
"{\n"
"    User::factory()\n"
"            ->count(50)\n"
"            ->hasPosts(1)\n"
"            ->create();\n"
"}\n"
msgstr "use App\\Models\\User;\n\n"
"/**\n"
" * Run the database seeders.\n"
" */\n"
"public function run(): void\n"
"{\n"
"    User::factory()\n"
"            ->count(50)\n"
"            ->hasPosts(1)\n"
"            ->create();\n"
"}\n"

#: docs/10.x/seeding.md:block 21 (header)
msgid "Calling Additional Seeders"
msgstr "呼叫其他 Seeder"

#: docs/10.x/seeding.md:block 22 (paragraph)
msgid "Within the `DatabaseSeeder` class, you may use the `call` method to execute additional seed classes. Using the `call` method allows you to break up your database seeding into multiple files so that no single seeder class becomes too large. The `call` method accepts an array of seeder classes that should be executed:"
msgstr "在 `DatabaseSeeder` 類別中，我們可以使用 `call` 方法來執行其他 Seed 類別。使用 `call` 方法，我們就可以將資料填充的城市拆分成多個檔案，以避免單一 Seeder 類別過於肥大。`call` 方法接受一組要執行的 Seeder 類別名稱陣列："

#: docs/10.x/seeding.md:block 23 (code)
msgid "/**\n"
" * Run the database seeders.\n"
" */\n"
"public function run(): void\n"
"{\n"
"    $this->call([\n"
"        UserSeeder::class,\n"
"        PostSeeder::class,\n"
"        CommentSeeder::class,\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Run the database seeders.\n"
" */\n"
"public function run(): void\n"
"{\n"
"    $this->call([\n"
"        UserSeeder::class,\n"
"        PostSeeder::class,\n"
"        CommentSeeder::class,\n"
"    ]);\n"
"}\n"

#: docs/10.x/seeding.md:block 25 (header)
msgid "Muting Model Events"
msgstr "靜音 Model Event"

#: docs/10.x/seeding.md:block 26 (paragraph)
msgid "While running seeds, you may want to prevent models from dispatching events. You may achieve this using the `WithoutModelEvents` trait. When used, the `WithoutModelEvents` trait ensures no model events are dispatched, even if additional seed classes are executed via the `call` method:"
msgstr "在進行資料填充時，我們可能會想讓 Model 不要分派 Event。若要防止 Model 分派 Event，可使用 `WithoutModelEvent` Trait。使用 `WithoutModelEvents` Trait 時，該 Trait 會確保 Model 不要分派 Event，且也會套用到使用 `call` 方法執行的 Seed 類別上："

#: docs/10.x/seeding.md:block 27 (code)
msgid "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    use WithoutModelEvents;\n\n"
"    /**\n"
"     * Run the database seeders.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    use WithoutModelEvents;\n\n"
"    /**\n"
"     * Run the database seeders.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/10.x/seeding.md:block 29 (header)
msgid "Running Seeders"
msgstr "執行 Seeder"

#: docs/10.x/seeding.md:block 30 (paragraph)
msgid "You may execute the `db:seed` Artisan command to seed your database. By default, the `db:seed` command runs the `Database\\Seeders\\DatabaseSeeder` class, which may in turn invoke other seed classes. However, you may use the `--class` option to specify a specific seeder class to run individually:"
msgstr "我們可以執行 `db:seed` Artisan 指令來填充資料庫。預設情況下，`db:seed` 指令會執行 `Database\\Seeders\\DatabaseSeeder` 類別，在該類別內可以進一步叫用其他 Seed 類別。不過，我們也可以使用 `--class` 選項來個別指定要執行的 Seeder 類別："

#: docs/10.x/seeding.md:block 31 (code)
msgid "php artisan db:seed\n\n"
"php artisan db:seed --class=UserSeeder\n"
msgstr "php artisan db:seed\n\n"
"php artisan db:seed --class=UserSeeder\n"

#: docs/10.x/seeding.md:block 32 (paragraph)
msgid "You may also seed your database using the `migrate:fresh` command in combination with the `--seed` option, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database. The `--seeder` option may be used to specify a specific seeder to run:"
msgstr "我們也可以使用 `migrate:fresh` 指令，並搭配 `--seed` 選項來填充資料。該指令會刪除所有資料表，並重新執行所有的 Migration。若有需要完全重建資料庫，就很適合使用這個指令。`--seeder` 選項可用來指定執行特定的 Seeder："

#: docs/10.x/seeding.md:block 33 (code)
msgid "php artisan migrate:fresh --seed\n\n"
"php artisan migrate:fresh --seed --seeder=UserSeeder \n"
msgstr "php artisan migrate:fresh --seed\n\n"
"php artisan migrate:fresh --seed --seeder=UserSeeder \n"

#: docs/10.x/seeding.md:block 35 (header)
msgid "Forcing Seeders To Run In Production"
msgstr "在正式環境中強制執行 Seeder"

#: docs/10.x/seeding.md:block 36 (paragraph)
msgid "Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed in the `production` environment. To force the seeders to run without a prompt, use the `--force` flag:"
msgstr "有些資料填充的動作是可能會導致資料被修改或消失。為了避免在正式環境資料庫中執行資料填充指令，因此在 `production` 環境中執行 Seeder 時，會出現提示要求確認。若要強制 Seeder 而不跳出提示，請使用 `--force` 旗標："

#: docs/10.x/seeding.md:block 37 (code)
msgid "php artisan db:seed --force\n"
msgstr "php artisan db:seed --force\n"

#: docs/8.x/seeding.md:block 6 (quote)
msgid "{tip} [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled during database seeding."
msgstr "{tip} 在進行 Seeding 時，會自動禁用[大量賦值保護](/docs/{{version}}/eloquent#mass-assignment)。"

#: docs/8.x/seeding.md:block 11 (paragraph)
msgid "A seeder class only contains one method by default: `run`. This method is called when the `db:seed` [Artisan command](/docs/{{version}}/artisan) is executed. Within the `run` method, you may insert data into your database however you wish. You may use the [query builder](/docs/{{version}}/queries) to manually insert data or you may use [Eloquent model factories](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr "Seeder 類別中預設只包含了一個方法：`run`。執行 `db:seed` [Artisan 指令](/docs/{{version}}/artisan) 時，會呼叫該方法。在 `run` 方法中，我們可以任意將資料寫入資料庫內。我們可以使用 [Query Builder](/docs/{{version}}/queries) 來手動寫入資料，或是使用 [Eloquent Model Factory](/docs/{{version}}/database-testing#defining-model-factories) 來寫入資料。"

#: docs/8.x/seeding.md:block 13 (code)
msgid "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Illuminate\\Support\\Str;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        DB::table('users')->insert([\n"
"            'name' => Str::random(10),\n"
"            'email' => Str::random(10).'@gmail.com',\n"
"            'password' => Hash::make('password'),\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Illuminate\\Support\\Str;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        DB::table('users')->insert([\n"
"            'name' => Str::random(10),\n"
"            'email' => Str::random(10).'@gmail.com',\n"
"            'password' => Hash::make('password'),\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/8.x/seeding.md:block 14 (quote)
msgid "{tip} You may type-hint any dependencies you need within the `run` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr "{tip} 在 `run` 方法的^[簽章](Signature) 中，我們可以 ^[Type-Hint](型別提示) 任何需要的相依性。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動解析 Type-Hint 中的相依性。"

#: docs/8.x/seeding.md:block 17 (paragraph)
msgid "Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use [model factories](/docs/{{version}}/database-testing#defining-model-factories) to conveniently generate large amounts of database records. First, review the [model factory documentation](/docs/{{version}}/database-testing#defining-model-factories) to learn how to define your factories."
msgstr "當然，手動為每個要填入的 Model 指定屬性值是很麻煩的。我們不需要這麼做，而可以使用 [Model Factory](/docs/{{version}}/database-testing#defining-model-factories) 來方便地產生大量資料。首先，請先看看 [Model Factory 的說明文件](/docs/{{version}}/database-testing#defining-model-factories)以瞭解如何定義 Factory。"

#: docs/8.x/seeding.md:block 19 (code)
msgid "use App\\Models\\User;\n\n"
"/**\n"
" * Run the database seeders.\n"
" *\n"
" * @return void\n"
" */\n"
"public function run()\n"
"{\n"
"    User::factory()\n"
"            ->count(50)\n"
"            ->hasPosts(1)\n"
"            ->create();\n"
"}\n"
msgstr "use App\\Models\\User;\n\n"
"/**\n"
" * Run the database seeders.\n"
" *\n"
" * @return void\n"
" */\n"
"public function run()\n"
"{\n"
"    User::factory()\n"
"            ->count(50)\n"
"            ->hasPosts(1)\n"
"            ->create();\n"
"}\n"

#: docs/8.x/seeding.md:block 23 (code)
msgid "/**\n"
" * Run the database seeders.\n"
" *\n"
" * @return void\n"
" */\n"
"public function run()\n"
"{\n"
"    $this->call([\n"
"        UserSeeder::class,\n"
"        PostSeeder::class,\n"
"        CommentSeeder::class,\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Run the database seeders.\n"
" *\n"
" * @return void\n"
" */\n"
"public function run()\n"
"{\n"
"    $this->call([\n"
"        UserSeeder::class,\n"
"        PostSeeder::class,\n"
"        CommentSeeder::class,\n"
"    ]);\n"
"}\n"

#: docs/8.x/seeding.md:block 28 (paragraph)
msgid "You may also seed your database using the `migrate:fresh` command in combination with the `--seed` option, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database:"
msgstr "我們也可以使用 `migrate:fresh` 指令，並搭配 `--seed` 選項來填充資料。該指令會刪除所有資料表，並重新執行所有的 Migration。若有需要完全重建資料庫，就很適合使用這個指令："

#: docs/8.x/seeding.md:block 29 (code)
msgid "php artisan migrate:fresh --seed\n"
msgstr "php artisan migrate:fresh --seed\n"

#: docs/9.x/seeding.md:block 27 (code)
msgid "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    use WithoutModelEvents;\n\n"
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use Illuminate\\Database\\Seeder;\n"
"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    use WithoutModelEvents;\n\n"
"    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"        ]);\n"
"    }\n"
"}\n"

