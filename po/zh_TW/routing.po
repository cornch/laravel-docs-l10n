msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-02-01 07:23\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/routing.pot\n"
"X-Crowdin-File-ID: 141\n"

# File: docs/8.x/routing.md, line: 1
# File: docs/master/routing.md, line: 1
#. type: Title #
#, no-wrap
msgid "Routing"
msgstr "路由"

# File: docs/8.x/routing.md, line: 28
#. type: Plain text
#, no-wrap
msgid "- [Basic Routing](#basic-routing)\n"
"    - [Redirect Routes](#redirect-routes)\n"
"    - [View Routes](#view-routes)\n"
"- [Route Parameters](#route-parameters)\n"
"    - [Required Parameters](#required-parameters)\n"
"    - [Optional Parameters](#parameters-optional-parameters)\n"
"    - [Regular Expression Constraints](#parameters-regular-expression-constraints)\n"
"- [Named Routes](#named-routes)\n"
"- [Route Groups](#route-groups)\n"
"    - [Middleware](#route-group-middleware)\n"
"    - [Controllers](#route-group-controllers)\n"
"    - [Subdomain Routing](#route-group-subdomain-routing)\n"
"    - [Route Prefixes](#route-group-prefixes)\n"
"    - [Route Name Prefixes](#route-group-name-prefixes)\n"
"- [Route Model Binding](#route-model-binding)\n"
"    - [Implicit Binding](#implicit-binding)\n"
"    - [Explicit Binding](#explicit-binding)\n"
"- [Fallback Routes](#fallback-routes)\n"
"- [Rate Limiting](#rate-limiting)\n"
"    - [Defining Rate Limiters](#defining-rate-limiters)\n"
"    - [Attaching Rate Limiters To Routes](#attaching-rate-limiters-to-routes)\n"
"- [Form Method Spoofing](#form-method-spoofing)\n"
"- [Accessing The Current Route](#accessing-the-current-route)\n"
"- [Cross-Origin Resource Sharing (CORS)](#cors)\n"
"- [Route Caching](#route-caching)\n"
msgstr "- [基本路由](#basic-routing)\n"
"    - [重新導向的 Route](#redirect-routes)\n"
"    - [View 的 Route](#view-routes)\n"
"- [Route 參數](#route-parameters)\n"
"    - [必填參數](#required-parameters)\n"
"    - [可選參數](#parameters-optional-parameters)\n"
"    - [正規表示式條件限制](#parameters-regular-expression-constraints)\n"
"- [命名 Route](#named-routes)\n"
"- [Route 群組](#route-groups)\n"
"    - [Middleware](#route-group-middleware)\n"
"    - [Controller](#route-group-controllers)\n"
"    - [子網域路由](#route-group-subdomain-routing)\n"
"    - [Route 前置詞](#route-group-prefixes)\n"
"    - [Route 名稱的前置詞](#route-group-name-prefixes)\n"
"- [Route Model 繫結](#route-model-binding)\n"
"    - [隱式繫結](#implicit-binding)\n"
"    - [顯式繫結](#explicit-binding)\n"
"- [遞補 Route](#fallback-routes)\n"
"- [頻率限制](#rate-limiting)\n"
"    - [定義 Rate Limiter (頻率限制程式)](#defining-rate-limiters)\n"
"    - [將 Rate Limiter 附加到 Route 上](#attaching-rate-limiters-to-routes)\n"
"- [表單方法的變更](#form-method-spoofing)\n"
"- [存取目前的 Route](#accessing-the-current-route)\n"
"- [跨原始來源資源共用 (CORS, Cross-Origin Resource Sharing)](#cors)\n"
"- [快取 Route](#route-caching)\n"

# File: docs/8.x/routing.md, line: 30
# File: docs/master/routing.md, line: 31
#. type: Plain text
#, no-wrap
msgid "<a name=\"basic-routing\"></a>\n"
msgstr "<a name=\"basic-routing\"></a>\n"

# File: docs/8.x/routing.md, line: 30
# File: docs/master/routing.md, line: 31
#. type: Title ##
#, no-wrap
msgid "Basic Routing"
msgstr "基礎路由"

# File: docs/8.x/routing.md, line: 33
# File: docs/master/routing.md, line: 34
#. type: Plain text
msgid "The most basic Laravel routes accept a URI and a closure, providing a very simple and expressive method of defining routes and behavior without complicated routing configuration files:"
msgstr "最基礎的 Laravel Route (路由) 就是接受一個 URI 與一個閉包，我們可以使用簡單直觀的方法來定義 Route 與其行為，而不需複雜 Route 設定檔："

# File: docs/8.x/routing.md, line: 35
# File: docs/8.x/routing.md, line: 698
# File: docs/master/routing.md, line: 36
# File: docs/master/routing.md, line: 727
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Route;\n"
msgstr "    use Illuminate\\Support\\Facades\\Route;\n"

# File: docs/8.x/routing.md, line: 39
# File: docs/master/routing.md, line: 40
#. type: Plain text
#, no-wrap
msgid "    Route::get('/greeting', function () {\n"
"        return 'Hello World';\n"
"    });\n"
msgstr "    Route::get('/greeting', function () {\n"
"        return 'Hello World';\n"
"    });\n"

# File: docs/8.x/routing.md, line: 41
# File: docs/master/routing.md, line: 42
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-default-route-files\"></a>\n"
msgstr "<a name=\"the-default-route-files\"></a>\n"

# File: docs/8.x/routing.md, line: 41
# File: docs/master/routing.md, line: 42
#. type: Title ####
#, no-wrap
msgid "The Default Route Files"
msgstr "預設的 Route 檔案"

# File: docs/8.x/routing.md, line: 44
# File: docs/master/routing.md, line: 45
#. type: Plain text
msgid "All Laravel routes are defined in your route files, which are located in the `routes` directory. These files are automatically loaded by your application's `App\\Providers\\RouteServiceProvider`. The `routes/web.php` file defines routes that are for your web interface. These routes are assigned the `web` middleware group, which provides features like session state and CSRF protection. The routes in `routes/api.php` are stateless and are assigned the `api` middleware group."
msgstr "Laravel 中所有的 Route 都在 Route 檔案中定義，這些檔案位在 `routes` 目錄下。這些檔案會由專案中的 `App\\Providers\\RouteServiceProvider` 自動載入。`routes/web.php` 檔案中定義了網頁介面的 Route。這些 Route 被指派到 `web` Middleware 群組中，該 Middleware 群組提供了一些如 Session 狀態與 CSRF 保護等功能。`routes/api.php` 是無狀態的 (Stateless)，裡面的 Route 會被指派給 `api` Middleware 群組。"

# File: docs/8.x/routing.md, line: 46
# File: docs/master/routing.md, line: 47
#. type: Plain text
msgid "For most applications, you will begin by defining routes in your `routes/web.php` file. The routes defined in `routes/web.php` may be accessed by entering the defined route's URL in your browser. For example, you may access the following route by navigating to `http://example.com/user` in your browser:"
msgstr "對於大多數的程式來說，我們會在 `routes/web.php` 檔案中定義 Route。我們可以在瀏覽器中打開 Route 定義的 URL 來存取 `routes/web.php` 中定義的路由。舉例來說，我們可以在瀏覽器中打開 `http://example.com/user` 來存取下來路由："

# File: docs/8.x/routing.md, line: 48
# File: docs/master/routing.md, line: 49
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr "    use App\\Http\\Controllers\\UserController;\n"

# File: docs/8.x/routing.md, line: 50
# File: docs/master/routing.md, line: 51
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user', [UserController::class, 'index']);\n"
msgstr "    Route::get('/user', [UserController::class, 'index']);\n"

# File: docs/8.x/routing.md, line: 52
# File: docs/master/routing.md, line: 53
#. type: Plain text
msgid "Routes defined in the `routes/api.php` file are nested within a route group by the `RouteServiceProvider`. Within this group, the `/api` URI prefix is automatically applied so you do not need to manually apply it to every route in the file. You may modify the prefix and other route group options by modifying your `RouteServiceProvider` class."
msgstr "`routes/api.php` 檔案中定義的 Route 放在巢狀放置在 `RouteServiceProvider` 中的 Route 群組內。在這個群組中，Laravel 會自動加上 `/api` URI 前置詞 (Prefix)，因此在這個檔案中，我們不需手動在所有 Route 前方加上 `/api`。我們也可以修改 `RouteServiceProvider` 類別來修改這個前置詞以及其他一些 Route 群組的選項。"

# File: docs/8.x/routing.md, line: 54
# File: docs/master/routing.md, line: 55
#. type: Plain text
#, no-wrap
msgid "<a name=\"available-router-methods\"></a>\n"
msgstr "<a name=\"available-router-methods\"></a>\n"

# File: docs/8.x/routing.md, line: 54
# File: docs/master/routing.md, line: 55
#. type: Title ####
#, no-wrap
msgid "Available Router Methods"
msgstr "可用的 Router 方法"

# File: docs/8.x/routing.md, line: 57
# File: docs/master/routing.md, line: 58
#. type: Plain text
msgid "The router allows you to register routes that respond to any HTTP verb:"
msgstr "使用 Router 就能讓我們註冊能回應任何 HTTP 動詞的 Route："

# File: docs/8.x/routing.md, line: 64
# File: docs/master/routing.md, line: 65
#. type: Plain text
#, no-wrap
msgid "    Route::get($uri, $callback);\n"
"    Route::post($uri, $callback);\n"
"    Route::put($uri, $callback);\n"
"    Route::patch($uri, $callback);\n"
"    Route::delete($uri, $callback);\n"
"    Route::options($uri, $callback);\n"
msgstr "    Route::get($uri, $callback);\n"
"    Route::post($uri, $callback);\n"
"    Route::put($uri, $callback);\n"
"    Route::patch($uri, $callback);\n"
"    Route::delete($uri, $callback);\n"
"    Route::options($uri, $callback);\n"

# File: docs/8.x/routing.md, line: 66
# File: docs/master/routing.md, line: 67
#. type: Plain text
msgid "Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the `match` method. Or, you may even register a route that responds to all HTTP verbs using the `any` method:"
msgstr "有時候，我們可能需要註冊一個能回應多個 HTTP 動詞的 Route。這時可以使用 `match` 方法。或者，我們甚至可以使用 `any` 方法來註冊一個回應所有 HTTP 動詞的 Route："

# File: docs/8.x/routing.md, line: 70
# File: docs/master/routing.md, line: 71
#. type: Plain text
#, no-wrap
msgid "    Route::match(['get', 'post'], '/', function () {\n"
"        //\n"
"    });\n"
msgstr "    Route::match(['get', 'post'], '/', function () {\n"
"        //\n"
"    });\n"

# File: docs/8.x/routing.md, line: 74
# File: docs/master/routing.md, line: 75
#. type: Plain text
#, no-wrap
msgid "    Route::any('/', function () {\n"
"        //\n"
"    });\n"
msgstr "    Route::any('/', function () {\n"
"        //\n"
"    });\n"

# File: docs/8.x/routing.md, line: 76
# File: docs/master/routing.md, line: 77
#. type: Plain text
#, no-wrap
msgid "> {tip} When defining multiple routes that share the same URI, routes using the `get`, `post`, `put`, `patch`, `delete`, and `options` methods should be defined before routes using the `any`, `match`, and `redirect` methods. This ensures the incoming request is matched with the correct route.\n"
msgstr "> {tip} 註冊多個共享同 URI 的 Route 時，應將這些 `any`, `match`, 與 `redirect` 方法的 Route 定義在 `get`, `post`, `put`, `patch`, `delete`, 與 `options` 方法定義之前。這樣一來可以確保連入的 Request 被配對到正確的 Route 上。\n"

# File: docs/8.x/routing.md, line: 78
# File: docs/master/routing.md, line: 79
#. type: Plain text
#, no-wrap
msgid "<a name=\"dependency-injection\"></a>\n"
msgstr "<a name=\"dependency-injection\"></a>\n"

# File: docs/8.x/routing.md, line: 78
# File: docs/master/routing.md, line: 79
#. type: Title ####
#, no-wrap
msgid "Dependency Injection"
msgstr "相依性插入"

# File: docs/8.x/routing.md, line: 81
# File: docs/master/routing.md, line: 82
#. type: Plain text
msgid "You may type-hint any dependencies required by your route in your route's callback signature. The declared dependencies will automatically be resolved and injected into the callback by the Laravel [service container](/docs/{{version}}/container). For example, you may type-hint the `Illuminate\\Http\\Request` class to have the current HTTP request automatically injected into your route callback:"
msgstr "可以在 Route 的回呼簽章 (Signature) 上型別提示 (Type-Hint) 任何 Route 所需的相依性。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動解析並插入所定義的相依性。舉例來說，我們可以型別提示 `Illuminate\\Http\\Request` 並自動插入到 Route 回呼中，該類別代表目前的 HTTP Request："

# File: docs/8.x/routing.md, line: 83
# File: docs/8.x/routing.md, line: 152
# File: docs/master/routing.md, line: 84
# File: docs/master/routing.md, line: 153
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr "    use Illuminate\\Http\\Request;\n"

# File: docs/8.x/routing.md, line: 87
# File: docs/master/routing.md, line: 88
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users', function (Request $request) {\n"
"        // ...\n"
"    });\n"
msgstr "    Route::get('/users', function (Request $request) {\n"
"        // ...\n"
"    });\n"

# File: docs/8.x/routing.md, line: 89
# File: docs/master/routing.md, line: 90
#. type: Plain text
#, no-wrap
msgid "<a name=\"csrf-protection\"></a>\n"
msgstr "<a name=\"csrf-protection\"></a>\n"

# File: docs/8.x/routing.md, line: 89
# File: docs/master/routing.md, line: 90
#. type: Title ####
#, no-wrap
msgid "CSRF Protection"
msgstr "CSRF 保護"

# File: docs/8.x/routing.md, line: 92
# File: docs/master/routing.md, line: 93
#. type: Plain text
msgid "Remember, any HTML forms pointing to `POST`, `PUT`, `PATCH`, or `DELETE` routes that are defined in the `web` routes file should include a CSRF token field. Otherwise, the request will be rejected. You can read more about CSRF protection in the [CSRF documentation](/docs/{{version}}/csrf):"
msgstr "請記得，當 HTML 表單指向 `web` Route 檔的 `POST`, `PUT`, `PATCH`, 與 `DELETE` Route 時，都應包含一個 CSRF 權杖欄位。若未包含權杖欄位，則該 Request 會被拒絕。更多有關 CSRF 保護的資訊可以參考 [CSRF 說明文件](/docs/{{version}}/csrf)："

# File: docs/8.x/routing.md, line: 97
# File: docs/master/routing.md, line: 98
#. type: Plain text
#, no-wrap
msgid "    <form method=\"POST\" action=\"/profile\">\n"
"        @csrf\n"
"        ...\n"
"    </form>\n"
msgstr "    <form method=\"POST\" action=\"/profile\">\n"
"        @csrf\n"
"        ...\n"
"    </form>\n"

# File: docs/8.x/routing.md, line: 99
# File: docs/master/routing.md, line: 100
#. type: Plain text
#, no-wrap
msgid "<a name=\"redirect-routes\"></a>\n"
msgstr "<a name=\"redirect-routes\"></a>\n"

# File: docs/8.x/routing.md, line: 99
# File: docs/master/routing.md, line: 100
#. type: Title ###
#, no-wrap
msgid "Redirect Routes"
msgstr "重新導向的 Route"

# File: docs/8.x/routing.md, line: 102
# File: docs/master/routing.md, line: 103
#. type: Plain text
msgid "If you are defining a route that redirects to another URI, you may use the `Route::redirect` method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:"
msgstr "若想定義可以重新導向到另一個 URI 的 Route，可以使用 `Route::redirect` 方法。這個方法提供了一個方便的捷徑，讓你不需要為了簡單的重新導向定義完整的 Route 或 Controller："

# File: docs/8.x/routing.md, line: 104
# File: docs/master/routing.md, line: 105
#. type: Plain text
#, no-wrap
msgid "    Route::redirect('/here', '/there');\n"
msgstr "    Route::redirect('/here', '/there');\n"

# File: docs/8.x/routing.md, line: 106
# File: docs/master/routing.md, line: 107
#. type: Plain text
msgid "By default, `Route::redirect` returns a `302` status code. You may customize the status code using the optional third parameter:"
msgstr "預設情況下，`Route::redirect` 回傳 `302` 狀態碼。我們可以使用可選的第三個參數來自訂狀態碼："

# File: docs/8.x/routing.md, line: 108
# File: docs/master/routing.md, line: 109
#. type: Plain text
#, no-wrap
msgid "    Route::redirect('/here', '/there', 301);\n"
msgstr "    Route::redirect('/here', '/there', 301);\n"

# File: docs/8.x/routing.md, line: 110
# File: docs/master/routing.md, line: 111
#. type: Plain text
msgid "Or, you may use the `Route::permanentRedirect` method to return a `301` status code:"
msgstr "或者，我們也可以使用 `Route::permanentRedirect` 方法來回傳 `301` 狀態碼："

# File: docs/8.x/routing.md, line: 112
# File: docs/master/routing.md, line: 113
#. type: Plain text
#, no-wrap
msgid "    Route::permanentRedirect('/here', '/there');\n"
msgstr "    Route::permanentRedirect('/here', '/there');\n"

# File: docs/8.x/routing.md, line: 114
# File: docs/master/routing.md, line: 115
#. type: Plain text
#, no-wrap
msgid "> {note} When using route parameters in redirect routes, the following parameters are reserved by Laravel and cannot be used: `destination` and `status`.\n"
msgstr "> {note} 在重新導向 Route 中使用 Route 參數時，有幾個參數名稱是 Laravel 的保留字，無法使用：`destination` 與 `status`。\n"

# File: docs/8.x/routing.md, line: 116
# File: docs/master/routing.md, line: 117
#. type: Plain text
#, no-wrap
msgid "<a name=\"view-routes\"></a>\n"
msgstr "<a name=\"view-routes\"></a>\n"

# File: docs/8.x/routing.md, line: 116
# File: docs/master/routing.md, line: 117
#. type: Title ###
#, no-wrap
msgid "View Routes"
msgstr "View 的 Route"

# File: docs/8.x/routing.md, line: 119
# File: docs/master/routing.md, line: 120
#. type: Plain text
msgid "If your route only needs to return a [view](/docs/{{version}}/views), you may use the `Route::view` method. Like the `redirect` method, this method provides a simple shortcut so that you do not have to define a full route or controller. The `view` method accepts a URI as its first argument and a view name as its second argument. In addition, you may provide an array of data to pass to the view as an optional third argument:"
msgstr "若某個 Route 只需要回傳一個 [View](/docs/{{version}}/views)，則可以使用 `Route::view` 方法。與 `redirect` 方法類似，這個方法提供了一個簡單的捷徑，能讓我們不需定義完整的 Route 或 Controller。`view` 方法接受一個 URI 作為其第一個引數，而第二個引數則是 View 的名稱。此外，也可以提供一組陣列，其中包含要傳給 View 的資料，並作為可選的第三個引數傳入："

# File: docs/8.x/routing.md, line: 121
# File: docs/master/routing.md, line: 122
#. type: Plain text
#, no-wrap
msgid "    Route::view('/welcome', 'welcome');\n"
msgstr "    Route::view('/welcome', 'welcome');\n"

# File: docs/8.x/routing.md, line: 123
# File: docs/master/routing.md, line: 124
#. type: Plain text
#, no-wrap
msgid "    Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\n"
msgstr "    Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\n"

# File: docs/8.x/routing.md, line: 125
# File: docs/master/routing.md, line: 126
#. type: Plain text
#, no-wrap
msgid "> {note} When using route parameters in view routes, the following parameters are reserved by Laravel and cannot be used: `view`, `data`, `status`, and `headers`.\n"
msgstr "> {note} 在 View 的 Route 中使用 Route 參數時，有幾個參數名稱是 Laravel 的保留字，無法使用：`view`、`data`、`status`、`header`。\n"

# File: docs/8.x/routing.md, line: 127
# File: docs/master/routing.md, line: 128
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-parameters\"></a>\n"
msgstr "<a name=\"route-parameters\"></a>\n"

# File: docs/8.x/routing.md, line: 127
# File: docs/master/routing.md, line: 128
#. type: Title ##
#, no-wrap
msgid "Route Parameters"
msgstr "Route 參數"

# File: docs/8.x/routing.md, line: 130
# File: docs/master/routing.md, line: 131
#. type: Plain text
#, no-wrap
msgid "<a name=\"required-parameters\"></a>\n"
msgstr "<a name=\"required-parameters\"></a>\n"

# File: docs/8.x/routing.md, line: 130
# File: docs/master/routing.md, line: 131
#. type: Title ###
#, no-wrap
msgid "Required Parameters"
msgstr "必填參數"

# File: docs/8.x/routing.md, line: 133
# File: docs/master/routing.md, line: 134
#. type: Plain text
msgid "Sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:"
msgstr "在 Route 中，有時候我們會想從 URI 中擷取一個片段。舉例來說，我們可能會需要從 URI 中擷取出使用者的 ID。為此，我們可以定義 Route 參數："

# File: docs/8.x/routing.md, line: 137
# File: docs/master/routing.md, line: 138
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        return 'User '.$id;\n"
"    });\n"
msgstr "    Route::get('/user/{id}', function ($id) {\n"
"        return 'User '.$id;\n"
"    });\n"

# File: docs/8.x/routing.md, line: 139
# File: docs/master/routing.md, line: 140
#. type: Plain text
msgid "You may define as many route parameters as required by your route:"
msgstr "根據 Route 的需求，我們可以定義不限數量的 Route 參數："

# File: docs/8.x/routing.md, line: 143
# File: docs/master/routing.md, line: 144
#. type: Plain text
#, no-wrap
msgid "    Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n"
"        //\n"
"    });\n"
msgstr "    Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n"
"        //\n"
"    });\n"

# File: docs/8.x/routing.md, line: 145
# File: docs/master/routing.md, line: 146
#. type: Plain text
msgid "Route parameters are always encased within `{}` braces and should consist of alphabetic characters. Underscores (`_`) are also acceptable within route parameter names. Route parameters are injected into route callbacks / controllers based on their order - the names of the route callback / controller arguments do not matter."
msgstr "Route 參數必須要包裝在 `{}` 大括號中，且只能使用字母。在 Route 參數名稱中也可以使用 (`_`)。Route 參數會依照順序插入到 Route 的回呼或 Controller 上 —— Route 的回呼或 Controller 中的名稱並不影響。"

# File: docs/8.x/routing.md, line: 147
# File: docs/master/routing.md, line: 148
#. type: Plain text
#, no-wrap
msgid "<a name=\"parameters-and-dependency-injection\"></a>\n"
msgstr "<a name=\"parameters-and-dependency-injection\"></a>\n"

# File: docs/8.x/routing.md, line: 147
# File: docs/master/routing.md, line: 148
#. type: Title ####
#, no-wrap
msgid "Parameters & Dependency Injection"
msgstr "參數與相依性插入"

# File: docs/8.x/routing.md, line: 150
# File: docs/master/routing.md, line: 151
#. type: Plain text
msgid "If your route has dependencies that you would like the Laravel service container to automatically inject into your route's callback, you should list your route parameters after your dependencies:"
msgstr "若你的 Route 有使用讓 Laravel Service Container 自動插入到 Route 回呼的相依性的話，請將 Route 參數列在相依性之後："

# File: docs/8.x/routing.md, line: 156
# File: docs/master/routing.md, line: 157
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}', function (Request $request, $id) {\n"
"        return 'User '.$id;\n"
"    });\n"
msgstr "    Route::get('/user/{id}', function (Request $request, $id) {\n"
"        return 'User '.$id;\n"
"    });\n"

# File: docs/8.x/routing.md, line: 158
# File: docs/master/routing.md, line: 159
#. type: Plain text
#, no-wrap
msgid "<a name=\"parameters-optional-parameters\"></a>\n"
msgstr "<a name=\"parameters-optional-parameters\"></a>\n"

# File: docs/8.x/routing.md, line: 158
# File: docs/master/routing.md, line: 159
#. type: Title ###
#, no-wrap
msgid "Optional Parameters"
msgstr "可選的參數"

# File: docs/8.x/routing.md, line: 161
# File: docs/master/routing.md, line: 162
#. type: Plain text
msgid "Occasionally you may need to specify a route parameter that may not always be present in the URI. You may do so by placing a `?` mark after the parameter name. Make sure to give the route's corresponding variable a default value:"
msgstr "有時候，我們可能會讓某個 Route 參數不需要出現在每個 URI 上。為此，我們可以在參數名稱後方放置一個 `?` 符號。請先確定這個 Route 中對應的變數有預設值："

# File: docs/8.x/routing.md, line: 165
# File: docs/master/routing.md, line: 166
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{name?}', function ($name = null) {\n"
"        return $name;\n"
"    });\n"
msgstr "    Route::get('/user/{name?}', function ($name = null) {\n"
"        return $name;\n"
"    });\n"

# File: docs/8.x/routing.md, line: 169
# File: docs/master/routing.md, line: 170
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{name?}', function ($name = 'John') {\n"
"        return $name;\n"
"    });\n"
msgstr "    Route::get('/user/{name?}', function ($name = 'John') {\n"
"        return $name;\n"
"    });\n"

# File: docs/8.x/routing.md, line: 171
# File: docs/master/routing.md, line: 172
#. type: Plain text
#, no-wrap
msgid "<a name=\"parameters-regular-expression-constraints\"></a>\n"
msgstr "<a name=\"parameters-regular-expression-constraints\"></a>\n"

# File: docs/8.x/routing.md, line: 171
# File: docs/master/routing.md, line: 172
#. type: Title ###
#, no-wrap
msgid "Regular Expression Constraints"
msgstr "正規表示式條件"

# File: docs/8.x/routing.md, line: 174
# File: docs/master/routing.md, line: 175
#. type: Plain text
msgid "You may constrain the format of your route parameters using the `where` method on a route instance. The `where` method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:"
msgstr "可以在 Route 實體上使用 `where` 方法來規定 Route 參數的格式。`where` 方法接受一個參數名稱、以及一個用來規範參數格式的正規表示式："

# File: docs/8.x/routing.md, line: 178
# File: docs/master/routing.md, line: 179
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->where('name', '[A-Za-z]+');\n"
msgstr "    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->where('name', '[A-Za-z]+');\n"

# File: docs/8.x/routing.md, line: 182
# File: docs/master/routing.md, line: 183
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->where('id', '[0-9]+');\n"
msgstr "    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->where('id', '[0-9]+');\n"

# File: docs/8.x/routing.md, line: 186
# File: docs/master/routing.md, line: 187
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n"
msgstr "    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n"

# File: docs/8.x/routing.md, line: 188
# File: docs/master/routing.md, line: 189
#. type: Plain text
msgid "For convenience, some commonly used regular expression patterns have helper methods that allow you to quickly add pattern constraints to your routes:"
msgstr "為了方便起見，一些常用的正規式都有輔助方法，可以讓你快速將這些格式套用到 Route 上："

# File: docs/8.x/routing.md, line: 192
# File: docs/master/routing.md, line: 193
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->whereNumber('id')->whereAlpha('name');\n"
msgstr "    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->whereNumber('id')->whereAlpha('name');\n"

# File: docs/8.x/routing.md, line: 196
# File: docs/master/routing.md, line: 197
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->whereAlphaNumeric('name');\n"
msgstr "    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->whereAlphaNumeric('name');\n"

# File: docs/8.x/routing.md, line: 200
# File: docs/master/routing.md, line: 201
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->whereUuid('id');\n"
msgstr "    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->whereUuid('id');\n"

# File: docs/8.x/routing.md, line: 202
# File: docs/master/routing.md, line: 203
#. type: Plain text
msgid "If the incoming request does not match the route pattern constraints, a 404 HTTP response will be returned."
msgstr "若連入 Request 不符合 Route 的格式限制，則會回傳 404 HTTP Response。"

# File: docs/8.x/routing.md, line: 204
# File: docs/master/routing.md, line: 205
#. type: Plain text
#, no-wrap
msgid "<a name=\"parameters-global-constraints\"></a>\n"
msgstr "<a name=\"parameters-global-constraints\"></a>\n"

# File: docs/8.x/routing.md, line: 204
# File: docs/master/routing.md, line: 205
#. type: Title ####
#, no-wrap
msgid "Global Constraints"
msgstr "全域條件限制"

# File: docs/8.x/routing.md, line: 207
# File: docs/master/routing.md, line: 208
#. type: Plain text
msgid "If you would like a route parameter to always be constrained by a given regular expression, you may use the `pattern` method. You should define these patterns in the `boot` method of your `App\\Providers\\RouteServiceProvider` class:"
msgstr "若想以某個正規式規範所有相同的 Route 參數，可以使用 `pattern` 方法。可以在專案的 `App\\Providers\\RouteServiceProvider` 類別中 `boot` 方法內定義這些格式："

# File: docs/8.x/routing.md, line: 217
# File: docs/master/routing.md, line: 218
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::pattern('id', '[0-9]+');\n"
"    }\n"
msgstr "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::pattern('id', '[0-9]+');\n"
"    }\n"

# File: docs/8.x/routing.md, line: 219
# File: docs/master/routing.md, line: 220
#. type: Plain text
msgid "Once the pattern has been defined, it is automatically applied to all routes using that parameter name:"
msgstr "定義好之後，這個規則會自動套用到有使用這個參數名稱的 Route："

# File: docs/8.x/routing.md, line: 223
# File: docs/master/routing.md, line: 224
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        // Only executed if {id} is numeric...\n"
"    });\n"
msgstr "    Route::get('/user/{id}', function ($id) {\n"
"        // Only executed if {id} is numeric...\n"
"    });\n"

# File: docs/8.x/routing.md, line: 225
# File: docs/master/routing.md, line: 226
#. type: Plain text
#, no-wrap
msgid "<a name=\"parameters-encoded-forward-slashes\"></a>\n"
msgstr "<a name=\"parameters-encoded-forward-slashes\"></a>\n"

# File: docs/8.x/routing.md, line: 225
# File: docs/master/routing.md, line: 226
#. type: Title ####
#, no-wrap
msgid "Encoded Forward Slashes"
msgstr "編碼斜線"

# File: docs/8.x/routing.md, line: 228
# File: docs/master/routing.md, line: 229
#. type: Plain text
msgid "The Laravel routing component allows all characters except `/` to be present within route parameter values. You must explicitly allow `/` to be part of your placeholder using a `where` condition regular expression:"
msgstr "Laravel 的路由元件能接受除了 `/` 外的所有字元出現在 Route 的參數值內。請使用 `where` 正規表示式條件來顯式允許 `/` 出現在預留位置中："

# File: docs/8.x/routing.md, line: 232
# File: docs/master/routing.md, line: 233
#. type: Plain text
#, no-wrap
msgid "    Route::get('/search/{search}', function ($search) {\n"
"        return $search;\n"
"    })->where('search', '.*');\n"
msgstr "    Route::get('/search/{search}', function ($search) {\n"
"        return $search;\n"
"    })->where('search', '.*');\n"

# File: docs/8.x/routing.md, line: 234
# File: docs/master/routing.md, line: 235
#. type: Plain text
#, no-wrap
msgid "> {note} Encoded forward slashes are only supported within the last route segment.\n"
msgstr "> {note} 只有最後一個 Route 片段才支援編碼斜線。\n"

# File: docs/8.x/routing.md, line: 236
# File: docs/master/routing.md, line: 237
#. type: Plain text
#, no-wrap
msgid "<a name=\"named-routes\"></a>\n"
msgstr "<a name=\"named-routes\"></a>\n"

# File: docs/8.x/routing.md, line: 236
# File: docs/master/routing.md, line: 237
#. type: Title ##
#, no-wrap
msgid "Named Routes"
msgstr "命名的 Route"

# File: docs/8.x/routing.md, line: 239
# File: docs/master/routing.md, line: 240
#. type: Plain text
msgid "Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the `name` method onto the route definition:"
msgstr ""

# File: docs/8.x/routing.md, line: 243
# File: docs/master/routing.md, line: 244
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/profile', function () {\n"
"        //\n"
"    })->name('profile');\n"
msgstr ""

# File: docs/8.x/routing.md, line: 245
# File: docs/master/routing.md, line: 246
#. type: Plain text
msgid "You may also specify route names for controller actions:"
msgstr ""

# File: docs/8.x/routing.md, line: 250
# File: docs/master/routing.md, line: 251
#. type: Plain text
#, no-wrap
msgid "    Route::get(\n"
"        '/user/profile',\n"
"        [UserProfileController::class, 'show']\n"
"    )->name('profile');\n"
msgstr ""

# File: docs/8.x/routing.md, line: 252
# File: docs/master/routing.md, line: 253
#. type: Plain text
#, no-wrap
msgid "> {note} Route names should always be unique.\n"
msgstr ""

# File: docs/8.x/routing.md, line: 254
# File: docs/master/routing.md, line: 255
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-urls-to-named-routes\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 254
# File: docs/master/routing.md, line: 255
#. type: Title ####
#, no-wrap
msgid "Generating URLs To Named Routes"
msgstr ""

# File: docs/8.x/routing.md, line: 257
# File: docs/master/routing.md, line: 258
#. type: Plain text
msgid "Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via Laravel's `route` and `redirect` helper functions:"
msgstr ""

# File: docs/8.x/routing.md, line: 260
# File: docs/master/routing.md, line: 261
#. type: Plain text
#, no-wrap
msgid "    // Generating URLs...\n"
"    $url = route('profile');\n"
msgstr ""

# File: docs/8.x/routing.md, line: 263
# File: docs/master/routing.md, line: 264
#. type: Plain text
#, no-wrap
msgid "    // Generating Redirects...\n"
"    return redirect()->route('profile');\n"
msgstr ""

# File: docs/8.x/routing.md, line: 265
# File: docs/master/routing.md, line: 266
#. type: Plain text
msgid "If the named route defines parameters, you may pass the parameters as the second argument to the `route` function. The given parameters will automatically be inserted into the generated URL in their correct positions:"
msgstr ""

# File: docs/8.x/routing.md, line: 269
# File: docs/8.x/routing.md, line: 277
# File: docs/master/routing.md, line: 270
# File: docs/master/routing.md, line: 278
#. type: Plain text
#, no-wrap
msgid "    Route::get('/user/{id}/profile', function ($id) {\n"
"        //\n"
"    })->name('profile');\n"
msgstr ""

# File: docs/8.x/routing.md, line: 271
# File: docs/master/routing.md, line: 272
#. type: Plain text
#, no-wrap
msgid "    $url = route('profile', ['id' => 1]);\n"
msgstr ""

# File: docs/8.x/routing.md, line: 273
# File: docs/master/routing.md, line: 274
#. type: Plain text
msgid "If you pass additional parameters in the array, those key / value pairs will automatically be added to the generated URL's query string:"
msgstr ""

# File: docs/8.x/routing.md, line: 279
# File: docs/master/routing.md, line: 280
#. type: Plain text
#, no-wrap
msgid "    $url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
msgstr ""

# File: docs/8.x/routing.md, line: 281
# File: docs/master/routing.md, line: 282
#. type: Plain text
#, no-wrap
msgid "    // /user/1/profile?photos=yes\n"
msgstr ""

# File: docs/8.x/routing.md, line: 283
# File: docs/master/routing.md, line: 284
#. type: Plain text
#, no-wrap
msgid "> {tip} Sometimes, you may wish to specify request-wide default values for URL parameters, such as the current locale. To accomplish this, you may use the [`URL::defaults` method](/docs/{{version}}/urls#default-values).\n"
msgstr ""

# File: docs/8.x/routing.md, line: 285
# File: docs/master/routing.md, line: 286
#. type: Plain text
#, no-wrap
msgid "<a name=\"inspecting-the-current-route\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 285
# File: docs/master/routing.md, line: 286
#. type: Title ####
#, no-wrap
msgid "Inspecting The Current Route"
msgstr ""

# File: docs/8.x/routing.md, line: 288
# File: docs/master/routing.md, line: 289
#. type: Plain text
msgid "If you would like to determine if the current request was routed to a given named route, you may use the `named` method on a Route instance. For example, you may check the current route name from a route middleware:"
msgstr ""

# File: docs/8.x/routing.md, line: 301
# File: docs/master/routing.md, line: 302
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->route()->named('profile')) {\n"
"            //\n"
"        }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 304
# File: docs/master/routing.md, line: 305
#. type: Plain text
#, no-wrap
msgid "        return $next($request);\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 306
# File: docs/master/routing.md, line: 307
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-groups\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 306
# File: docs/master/routing.md, line: 307
#. type: Title ##
#, no-wrap
msgid "Route Groups"
msgstr ""

# File: docs/8.x/routing.md, line: 309
# File: docs/master/routing.md, line: 310
#. type: Plain text
msgid "Route groups allow you to share route attributes, such as middleware, across a large number of routes without needing to define those attributes on each individual route."
msgstr ""

# File: docs/8.x/routing.md, line: 311
# File: docs/master/routing.md, line: 312
#. type: Plain text
msgid "Nested groups attempt to intelligently \"merge\" attributes with their parent group. Middleware and `where` conditions are merged while names and prefixes are appended. Namespace delimiters and slashes in URI prefixes are automatically added where appropriate."
msgstr ""

# File: docs/8.x/routing.md, line: 313
# File: docs/master/routing.md, line: 314
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-group-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 313
# File: docs/master/routing.md, line: 314
#. type: Title ###
#, no-wrap
msgid "Middleware"
msgstr ""

# File: docs/8.x/routing.md, line: 316
# File: docs/master/routing.md, line: 317
#. type: Plain text
msgid "To assign [middleware](/docs/{{version}}/middleware) to all routes within a group, you may use the `middleware` method before defining the group. Middleware are executed in the order they are listed in the array:"
msgstr ""

# File: docs/8.x/routing.md, line: 321
# File: docs/master/routing.md, line: 322
#. type: Plain text
#, no-wrap
msgid "    Route::middleware(['first', 'second'])->group(function () {\n"
"        Route::get('/', function () {\n"
"            // Uses first & second middleware...\n"
"        });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 326
# File: docs/master/routing.md, line: 327
#. type: Plain text
#, no-wrap
msgid "        Route::get('/user/profile', function () {\n"
"            // Uses first & second middleware...\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 328
# File: docs/master/routing.md, line: 329
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-group-controllers\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 328
# File: docs/master/routing.md, line: 329
#. type: Title ###
#, no-wrap
msgid "Controllers"
msgstr ""

# File: docs/8.x/routing.md, line: 331
# File: docs/master/routing.md, line: 332
#. type: Plain text
msgid "If a group of routes all utilize the same [controller](/docs/{{version}}/controllers), you may use the `controller` method to define the common controller for all of the routes within the group. Then, when defining the routes, you only need to provide the controller method that they invoke:"
msgstr ""

# File: docs/8.x/routing.md, line: 333
# File: docs/master/routing.md, line: 334
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\OrderController;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 338
# File: docs/master/routing.md, line: 339
#. type: Plain text
#, no-wrap
msgid "    Route::controller(OrderController::class)->group(function () {\n"
"        Route::get('/orders/{id}', 'show');\n"
"        Route::post('/orders', 'store');\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 340
# File: docs/master/routing.md, line: 341
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-group-subdomain-routing\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 340
# File: docs/master/routing.md, line: 341
#. type: Title ###
#, no-wrap
msgid "Subdomain Routing"
msgstr ""

# File: docs/8.x/routing.md, line: 343
# File: docs/master/routing.md, line: 344
#. type: Plain text
msgid "Route groups may also be used to handle subdomain routing. Subdomains may be assigned route parameters just like route URIs, allowing you to capture a portion of the subdomain for usage in your route or controller. The subdomain may be specified by calling the `domain` method before defining the group:"
msgstr ""

# File: docs/8.x/routing.md, line: 349
# File: docs/master/routing.md, line: 350
#. type: Plain text
#, no-wrap
msgid "    Route::domain('{account}.example.com')->group(function () {\n"
"        Route::get('user/{id}', function ($account, $id) {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 351
# File: docs/master/routing.md, line: 352
#. type: Plain text
#, no-wrap
msgid "> {note} In order to ensure your subdomain routes are reachable, you should register subdomain routes before registering root domain routes. This will prevent root domain routes from overwriting subdomain routes which have the same URI path.\n"
msgstr ""

# File: docs/8.x/routing.md, line: 353
# File: docs/master/routing.md, line: 354
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-group-prefixes\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 353
# File: docs/master/routing.md, line: 354
#. type: Title ###
#, no-wrap
msgid "Route Prefixes"
msgstr ""

# File: docs/8.x/routing.md, line: 356
# File: docs/master/routing.md, line: 357
#. type: Plain text
msgid "The `prefix` method may be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with `admin`:"
msgstr ""

# File: docs/8.x/routing.md, line: 362
# File: docs/master/routing.md, line: 363
#. type: Plain text
#, no-wrap
msgid "    Route::prefix('admin')->group(function () {\n"
"        Route::get('/users', function () {\n"
"            // Matches The \"/admin/users\" URL\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 364
# File: docs/master/routing.md, line: 365
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-group-name-prefixes\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 364
# File: docs/master/routing.md, line: 365
#. type: Title ###
#, no-wrap
msgid "Route Name Prefixes"
msgstr ""

# File: docs/8.x/routing.md, line: 367
# File: docs/master/routing.md, line: 368
#. type: Plain text
msgid "The `name` method may be used to prefix each route name in the group with a given string. For example, you may want to prefix all of the grouped route's names with `admin`. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing `.` character in the prefix:"
msgstr ""

# File: docs/8.x/routing.md, line: 373
# File: docs/master/routing.md, line: 374
#. type: Plain text
#, no-wrap
msgid "    Route::name('admin.')->group(function () {\n"
"        Route::get('/users', function () {\n"
"            // Route assigned name \"admin.users\"...\n"
"        })->name('users');\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 375
# File: docs/master/routing.md, line: 376
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-model-binding\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 375
# File: docs/master/routing.md, line: 376
#. type: Title ##
#, no-wrap
msgid "Route Model Binding"
msgstr ""

# File: docs/8.x/routing.md, line: 378
# File: docs/master/routing.md, line: 379
#. type: Plain text
msgid "When injecting a model ID to a route or controller action, you will often query the database to retrieve the model that corresponds to that ID. Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes. For example, instead of injecting a user's ID, you can inject the entire `User` model instance that matches the given ID."
msgstr ""

# File: docs/8.x/routing.md, line: 380
# File: docs/master/routing.md, line: 381
#. type: Plain text
#, no-wrap
msgid "<a name=\"implicit-binding\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 380
# File: docs/master/routing.md, line: 381
#. type: Title ###
#, no-wrap
msgid "Implicit Binding"
msgstr ""

# File: docs/8.x/routing.md, line: 383
# File: docs/master/routing.md, line: 384
#. type: Plain text
msgid "Laravel automatically resolves Eloquent models defined in routes or controller actions whose type-hinted variable names match a route segment name. For example:"
msgstr ""

# File: docs/8.x/routing.md, line: 385
# File: docs/8.x/routing.md, line: 412
# File: docs/8.x/routing.md, line: 510
# File: docs/master/routing.md, line: 386
# File: docs/master/routing.md, line: 413
# File: docs/master/routing.md, line: 539
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 389
# File: docs/master/routing.md, line: 390
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}', function (User $user) {\n"
"        return $user->email;\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 391
# File: docs/master/routing.md, line: 392
#. type: Plain text
msgid "Since the `$user` variable is type-hinted as the `App\\Models\\User` Eloquent model and the variable name matches the `{user}` URI segment, Laravel will automatically inject the model instance that has an ID matching the corresponding value from the request URI. If a matching model instance is not found in the database, a 404 HTTP response will automatically be generated."
msgstr ""

# File: docs/8.x/routing.md, line: 393
# File: docs/master/routing.md, line: 394
#. type: Plain text
msgid "Of course, implicit binding is also possible when using controller methods. Again, note the `{user}` URI segment matches the `$user` variable in the controller which contains an `App\\Models\\User` type-hint:"
msgstr ""

# File: docs/8.x/routing.md, line: 396
# File: docs/master/routing.md, line: 397
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
"    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 399
# File: docs/master/routing.md, line: 400
#. type: Plain text
#, no-wrap
msgid "    // Route definition...\n"
"    Route::get('/users/{user}', [UserController::class, 'show']);\n"
msgstr ""

# File: docs/8.x/routing.md, line: 405
# File: docs/master/routing.md, line: 406
#. type: Plain text
#, no-wrap
msgid "    // Controller method definition...\n"
"    public function show(User $user)\n"
"    {\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 407
# File: docs/master/routing.md, line: 408
#. type: Plain text
#, no-wrap
msgid "<a name=\"implicit-soft-deleted-models\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 407
# File: docs/master/routing.md, line: 408
#. type: Title ####
#, no-wrap
msgid "Soft Deleted Models"
msgstr ""

# File: docs/8.x/routing.md, line: 410
# File: docs/master/routing.md, line: 411
#. type: Plain text
msgid "Typically, implicit model binding will not retrieve models that have been [soft deleted](/docs/{{version}}/eloquent#soft-deleting). However, you may instruct the implicit binding to retrieve these models by chaining the `withTrashed` method onto your route's definition:"
msgstr ""

# File: docs/8.x/routing.md, line: 416
# File: docs/master/routing.md, line: 417
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}', function (User $user) {\n"
"        return $user->email;\n"
"    })->withTrashed();\n"
msgstr ""

# File: docs/8.x/routing.md, line: 419
# File: docs/master/routing.md, line: 420
#. type: Plain text
#, no-wrap
msgid "<a name=\"customizing-the-key\"></a>\n"
"<a name=\"customizing-the-default-key-name\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 419
# File: docs/master/routing.md, line: 420
#. type: Title ####
#, no-wrap
msgid "Customizing The Key"
msgstr ""

# File: docs/8.x/routing.md, line: 422
# File: docs/master/routing.md, line: 423
#. type: Plain text
msgid "Sometimes you may wish to resolve Eloquent models using a column other than `id`. To do so, you may specify the column in the route parameter definition:"
msgstr ""

# File: docs/8.x/routing.md, line: 424
# File: docs/master/routing.md, line: 425
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Post;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 428
# File: docs/master/routing.md, line: 429
#. type: Plain text
#, no-wrap
msgid "    Route::get('/posts/{post:slug}', function (Post $post) {\n"
"        return $post;\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 430
# File: docs/master/routing.md, line: 431
#. type: Plain text
msgid "If you would like model binding to always use a database column other than `id` when retrieving a given model class, you may override the `getRouteKeyName` method on the Eloquent model:"
msgstr ""

# File: docs/8.x/routing.md, line: 440
# File: docs/master/routing.md, line: 441
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the route key for the model.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function getRouteKeyName()\n"
"    {\n"
"        return 'slug';\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 442
# File: docs/master/routing.md, line: 443
#. type: Plain text
#, no-wrap
msgid "<a name=\"implicit-model-binding-scoping\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 442
# File: docs/master/routing.md, line: 443
#. type: Title ####
#, no-wrap
msgid "Custom Keys & Scoping"
msgstr ""

# File: docs/8.x/routing.md, line: 445
# File: docs/master/routing.md, line: 446
#. type: Plain text
msgid "When implicitly binding multiple Eloquent models in a single route definition, you may wish to scope the second Eloquent model such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr ""

# File: docs/8.x/routing.md, line: 448
# File: docs/8.x/routing.md, line: 459
# File: docs/master/routing.md, line: 449
# File: docs/master/routing.md, line: 460
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 452
# File: docs/master/routing.md, line: 453
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 454
# File: docs/master/routing.md, line: 455
#. type: Plain text
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. In this case, it will be assumed that the `User` model has a relationship named `posts` (the plural form of the route parameter name) which can be used to retrieve the `Post` model."
msgstr ""

# File: docs/8.x/routing.md, line: 456
# File: docs/master/routing.md, line: 457
#. type: Plain text
msgid "If you wish, you may instruct Laravel to scope \"child\" bindings even when a custom key is not provided. To do so, you may invoke the `scopeBindings` method when defining your route:"
msgstr ""

# File: docs/8.x/routing.md, line: 463
# File: docs/master/routing.md, line: 464
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    })->scopeBindings();\n"
msgstr ""

# File: docs/8.x/routing.md, line: 465
# File: docs/master/routing.md, line: 466
#. type: Plain text
msgid "Or, you may instruct an entire group of route definitions to use scoped bindings:"
msgstr ""

# File: docs/8.x/routing.md, line: 471
# File: docs/master/routing.md, line: 472
#. type: Plain text
#, no-wrap
msgid "    Route::scopeBindings()->group(function () {\n"
"        Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"            return $post;\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 473
# File: docs/master/routing.md, line: 474
#. type: Plain text
#, no-wrap
msgid "<a name=\"customizing-missing-model-behavior\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 473
# File: docs/master/routing.md, line: 474
#. type: Title ####
#, no-wrap
msgid "Customizing Missing Model Behavior"
msgstr ""

# File: docs/8.x/routing.md, line: 476
# File: docs/master/routing.md, line: 477
#. type: Plain text
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound model is not found. However, you may customize this behavior by calling the `missing` method when defining your route. The `missing` method accepts a closure that will be invoked if an implicitly bound model can not be found:"
msgstr ""

# File: docs/8.x/routing.md, line: 480
# File: docs/master/routing.md, line: 481
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\LocationsController;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 486
# File: docs/master/routing.md, line: 487
#. type: Plain text
#, no-wrap
msgid "    Route::get('/locations/{location:slug}', [LocationsController::class, 'show'])\n"
"            ->name('locations.view')\n"
"            ->missing(function (Request $request) {\n"
"                return Redirect::route('locations.index');\n"
"            });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 488
# File: docs/master/routing.md, line: 517
#. type: Plain text
#, no-wrap
msgid "<a name=\"explicit-binding\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 488
# File: docs/master/routing.md, line: 517
#. type: Title ###
#, no-wrap
msgid "Explicit Binding"
msgstr ""

# File: docs/8.x/routing.md, line: 491
# File: docs/master/routing.md, line: 520
#. type: Plain text
msgid "You are not required to use Laravel's implicit, convention based model resolution in order to use model binding. You can also explicitly define how route parameters correspond to models. To register an explicit binding, use the router's `model` method to specify the class for a given parameter. You should define your explicit model bindings at the beginning of the `boot` method of your `RouteServiceProvider` class:"
msgstr ""

# File: docs/8.x/routing.md, line: 494
# File: docs/8.x/routing.md, line: 526
# File: docs/master/routing.md, line: 523
# File: docs/master/routing.md, line: 555
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 503
# File: docs/master/routing.md, line: 532
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::model('user', User::class);\n"
msgstr ""

# File: docs/8.x/routing.md, line: 506
# File: docs/8.x/routing.md, line: 540
# File: docs/master/routing.md, line: 535
# File: docs/master/routing.md, line: 569
#. type: Plain text
#, no-wrap
msgid "        // ...\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 508
# File: docs/master/routing.md, line: 537
#. type: Plain text
msgid "Next, define a route that contains a `{user}` parameter:"
msgstr ""

# File: docs/8.x/routing.md, line: 514
# File: docs/master/routing.md, line: 543
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}', function (User $user) {\n"
"        //\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 516
# File: docs/master/routing.md, line: 545
#. type: Plain text
msgid "Since we have bound all `{user}` parameters to the `App\\Models\\User` model, an instance of that class will be injected into the route. So, for example, a request to `users/1` will inject the `User` instance from the database which has an ID of `1`."
msgstr ""

# File: docs/8.x/routing.md, line: 518
# File: docs/master/routing.md, line: 547
#. type: Plain text
msgid "If a matching model instance is not found in the database, a 404 HTTP response will be automatically generated."
msgstr ""

# File: docs/8.x/routing.md, line: 520
# File: docs/master/routing.md, line: 549
#. type: Plain text
#, no-wrap
msgid "<a name=\"customizing-the-resolution-logic\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 520
# File: docs/master/routing.md, line: 549
#. type: Title ####
#, no-wrap
msgid "Customizing The Resolution Logic"
msgstr ""

# File: docs/8.x/routing.md, line: 523
# File: docs/master/routing.md, line: 552
#. type: Plain text
msgid "If you wish to define your own model binding resolution logic, you may use the `Route::bind` method. The closure you pass to the `bind` method will receive the value of the URI segment and should return the instance of the class that should be injected into the route. Again, this customization should take place in the `boot` method of your application's `RouteServiceProvider`:"
msgstr ""

# File: docs/8.x/routing.md, line: 537
# File: docs/master/routing.md, line: 566
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::bind('user', function ($value) {\n"
"            return User::where('name', $value)->firstOrFail();\n"
"        });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 542
# File: docs/master/routing.md, line: 571
#. type: Plain text
msgid "Alternatively, you may override the `resolveRouteBinding` method on your Eloquent model. This method will receive the value of the URI segment and should return the instance of the class that should be injected into the route:"
msgstr ""

# File: docs/8.x/routing.md, line: 554
# File: docs/master/routing.md, line: 583
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Retrieve the model for a bound value.\n"
"     *\n"
"     * @param  mixed  $value\n"
"     * @param  string|null  $field\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
"     */\n"
"    public function resolveRouteBinding($value, $field = null)\n"
"    {\n"
"        return $this->where('name', $value)->firstOrFail();\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 556
# File: docs/master/routing.md, line: 585
#. type: Plain text
msgid "If a route is utilizing [implicit binding scoping](#implicit-model-binding-scoping), the `resolveChildRouteBinding` method will be used to resolve the child binding of the parent model:"
msgstr ""

# File: docs/8.x/routing.md, line: 569
# File: docs/master/routing.md, line: 598
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Retrieve the child model for a bound value.\n"
"     *\n"
"     * @param  string  $childType\n"
"     * @param  mixed  $value\n"
"     * @param  string|null  $field\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
"     */\n"
"    public function resolveChildRouteBinding($childType, $value, $field)\n"
"    {\n"
"        return parent::resolveChildRouteBinding($childType, $value, $field);\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 571
# File: docs/master/routing.md, line: 600
#. type: Plain text
#, no-wrap
msgid "<a name=\"fallback-routes\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 571
# File: docs/master/routing.md, line: 600
#. type: Title ##
#, no-wrap
msgid "Fallback Routes"
msgstr ""

# File: docs/8.x/routing.md, line: 574
# File: docs/master/routing.md, line: 603
#. type: Plain text
msgid "Using the `Route::fallback` method, you may define a route that will be executed when no other route matches the incoming request. Typically, unhandled requests will automatically render a \"404\" page via your application's exception handler. However, since you would typically define the `fallback` route within your `routes/web.php` file, all middleware in the `web` middleware group will apply to the route. You are free to add additional middleware to this route as needed:"
msgstr ""

# File: docs/8.x/routing.md, line: 578
# File: docs/master/routing.md, line: 607
#. type: Plain text
#, no-wrap
msgid "    Route::fallback(function () {\n"
"        //\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 580
# File: docs/master/routing.md, line: 609
#. type: Plain text
#, no-wrap
msgid "> {note} The fallback route should always be the last route registered by your application.\n"
msgstr ""

# File: docs/8.x/routing.md, line: 582
# File: docs/master/routing.md, line: 611
#. type: Plain text
#, no-wrap
msgid "<a name=\"rate-limiting\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 582
# File: docs/master/routing.md, line: 611
#. type: Title ##
#, no-wrap
msgid "Rate Limiting"
msgstr ""

# File: docs/8.x/routing.md, line: 585
# File: docs/master/routing.md, line: 614
#. type: Plain text
#, no-wrap
msgid "<a name=\"defining-rate-limiters\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 585
# File: docs/master/routing.md, line: 614
#. type: Title ###
#, no-wrap
msgid "Defining Rate Limiters"
msgstr ""

# File: docs/8.x/routing.md, line: 588
# File: docs/master/routing.md, line: 617
#. type: Plain text
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs. Typically, this should be done within the `configureRateLimiting` method of your application's `App\\Providers\\RouteServiceProvider` class."
msgstr ""

# File: docs/8.x/routing.md, line: 590
# File: docs/master/routing.md, line: 619
#. type: Plain text
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned to the rate limiter. Limit configuration are instances of the `Illuminate\\Cache\\RateLimiting\\Limit` class. This class contains helpful \"builder\" methods so that you can quickly define your limit. The rate limiter name may be any string you wish:"
msgstr ""

# File: docs/8.x/routing.md, line: 593
# File: docs/master/routing.md, line: 622
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"    use Illuminate\\Support\\Facades\\RateLimiter;\n"
msgstr ""

# File: docs/8.x/routing.md, line: 605
# File: docs/master/routing.md, line: 634
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Configure the rate limiters for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function configureRateLimiting()\n"
"    {\n"
"        RateLimiter::for('global', function (Request $request) {\n"
"            return Limit::perMinute(1000);\n"
"        });\n"
"    }\n"
msgstr ""

# File: docs/8.x/routing.md, line: 607
# File: docs/master/routing.md, line: 636
#. type: Plain text
msgid "If the incoming request exceeds the specified rate limit, a response with a 429 HTTP status code will automatically be returned by Laravel. If you would like to define your own response that should be returned by a rate limit, you may use the `response` method:"
msgstr ""

# File: docs/8.x/routing.md, line: 613
# File: docs/master/routing.md, line: 642
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000)->response(function () {\n"
"            return response('Custom response...', 429);\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 615
# File: docs/master/routing.md, line: 644
#. type: Plain text
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr ""

# File: docs/8.x/routing.md, line: 621
# File: docs/master/routing.md, line: 650
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100);\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 623
# File: docs/master/routing.md, line: 652
#. type: Plain text
#, no-wrap
msgid "<a name=\"segmenting-rate-limits\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 623
# File: docs/master/routing.md, line: 652
#. type: Title ####
#, no-wrap
msgid "Segmenting Rate Limits"
msgstr ""

# File: docs/8.x/routing.md, line: 626
# File: docs/master/routing.md, line: 655
#. type: Plain text
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr ""

# File: docs/8.x/routing.md, line: 632
# File: docs/master/routing.md, line: 661
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100)->by($request->ip());\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 634
# File: docs/master/routing.md, line: 663
#. type: Plain text
msgid "To illustrate this feature using another example, we can limit access to the route to 100 times per minute per authenticated user ID or 10 times per minute per IP address for guests:"
msgstr ""

# File: docs/8.x/routing.md, line: 640
# File: docs/master/routing.md, line: 669
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()\n"
"                    ? Limit::perMinute(100)->by($request->user()->id)\n"
"                    : Limit::perMinute(10)->by($request->ip());\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 642
# File: docs/master/routing.md, line: 671
#. type: Plain text
#, no-wrap
msgid "<a name=\"multiple-rate-limits\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 642
# File: docs/master/routing.md, line: 671
#. type: Title ####
#, no-wrap
msgid "Multiple Rate Limits"
msgstr ""

# File: docs/8.x/routing.md, line: 645
# File: docs/master/routing.md, line: 674
#. type: Plain text
msgid "If needed, you may return an array of rate limits for a given rate limiter configuration. Each rate limit will be evaluated for the route based on the order they are placed within the array:"
msgstr ""

# File: docs/8.x/routing.md, line: 652
# File: docs/master/routing.md, line: 681
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('login', function (Request $request) {\n"
"        return [\n"
"            Limit::perMinute(500),\n"
"            Limit::perMinute(3)->by($request->input('email')),\n"
"        ];\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 654
# File: docs/master/routing.md, line: 683
#. type: Plain text
#, no-wrap
msgid "<a name=\"attaching-rate-limiters-to-routes\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 654
# File: docs/master/routing.md, line: 683
#. type: Title ###
#, no-wrap
msgid "Attaching Rate Limiters To Routes"
msgstr ""

# File: docs/8.x/routing.md, line: 657
# File: docs/master/routing.md, line: 686
#. type: Plain text
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr ""

# File: docs/8.x/routing.md, line: 662
# File: docs/master/routing.md, line: 691
#. type: Plain text
#, no-wrap
msgid "    Route::middleware(['throttle:uploads'])->group(function () {\n"
"        Route::post('/audio', function () {\n"
"            //\n"
"        });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 667
# File: docs/master/routing.md, line: 696
#. type: Plain text
#, no-wrap
msgid "        Route::post('/video', function () {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/routing.md, line: 669
# File: docs/master/routing.md, line: 698
#. type: Plain text
#, no-wrap
msgid "<a name=\"throttling-with-redis\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 669
# File: docs/master/routing.md, line: 698
#. type: Title ####
#, no-wrap
msgid "Throttling With Redis"
msgstr ""

# File: docs/8.x/routing.md, line: 672
# File: docs/master/routing.md, line: 701
#. type: Plain text
msgid "Typically, the `throttle` middleware is mapped to the `Illuminate\\Routing\\Middleware\\ThrottleRequests` class. This mapping is defined in your application's HTTP kernel (`App\\Http\\Kernel`). However, if you are using Redis as your application's cache driver, you may wish to change this mapping to use the `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` class. This class is more efficient at managing rate limiting using Redis:"
msgstr ""

# File: docs/8.x/routing.md, line: 674
# File: docs/master/routing.md, line: 703
#. type: Plain text
#, no-wrap
msgid "    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
msgstr ""

# File: docs/8.x/routing.md, line: 676
# File: docs/master/routing.md, line: 705
#. type: Plain text
#, no-wrap
msgid "<a name=\"form-method-spoofing\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 676
# File: docs/master/routing.md, line: 705
#. type: Title ##
#, no-wrap
msgid "Form Method Spoofing"
msgstr ""

# File: docs/8.x/routing.md, line: 679
# File: docs/master/routing.md, line: 708
#. type: Plain text
msgid "HTML forms do not support `PUT`, `PATCH`, or `DELETE` actions. So, when defining `PUT`, `PATCH`, or `DELETE` routes that are called from an HTML form, you will need to add a hidden `_method` field to the form. The value sent with the `_method` field will be used as the HTTP request method:"
msgstr ""

# File: docs/8.x/routing.md, line: 684
# File: docs/master/routing.md, line: 713
#. type: Plain text
#, no-wrap
msgid "    <form action=\"/example\" method=\"POST\">\n"
"        <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n"
"        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n"
"    </form>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 686
# File: docs/master/routing.md, line: 715
#. type: Plain text
msgid "For convenience, you may use the `@method` [Blade directive](/docs/{{version}}/blade) to generate the `_method` input field:"
msgstr ""

# File: docs/8.x/routing.md, line: 691
# File: docs/master/routing.md, line: 720
#. type: Plain text
#, no-wrap
msgid "    <form action=\"/example\" method=\"POST\">\n"
"        @method('PUT')\n"
"        @csrf\n"
"    </form>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 693
# File: docs/master/routing.md, line: 722
#. type: Plain text
#, no-wrap
msgid "<a name=\"accessing-the-current-route\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 693
# File: docs/master/routing.md, line: 722
#. type: Title ##
#, no-wrap
msgid "Accessing The Current Route"
msgstr ""

# File: docs/8.x/routing.md, line: 696
# File: docs/master/routing.md, line: 725
#. type: Plain text
msgid "You may use the `current`, `currentRouteName`, and `currentRouteAction` methods on the `Route` facade to access information about the route handling the incoming request:"
msgstr ""

# File: docs/8.x/routing.md, line: 702
# File: docs/master/routing.md, line: 731
#. type: Plain text
#, no-wrap
msgid "    $route = Route::current(); // Illuminate\\Routing\\Route\n"
"    $name = Route::currentRouteName(); // string\n"
"    $action = Route::currentRouteAction(); // string\n"
msgstr ""

# File: docs/8.x/routing.md, line: 704
# File: docs/master/routing.md, line: 733
#. type: Plain text
msgid "You may refer to the API documentation for both the [underlying class of the Route facade](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html) and [Route instance](https://laravel.com/api/{{version}}/Illuminate/Routing/Route.html) to review all of the methods that are available on the router and route classes."
msgstr ""

# File: docs/8.x/routing.md, line: 706
# File: docs/master/routing.md, line: 735
#. type: Plain text
#, no-wrap
msgid "<a name=\"cors\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 706
# File: docs/master/routing.md, line: 735
#. type: Title ##
#, no-wrap
msgid "Cross-Origin Resource Sharing (CORS)"
msgstr ""

# File: docs/8.x/routing.md, line: 709
# File: docs/master/routing.md, line: 738
#. type: Plain text
msgid "Laravel can automatically respond to CORS `OPTIONS` HTTP requests with values that you configure. All CORS settings may be configured in your application's `config/cors.php` configuration file. The `OPTIONS` requests will automatically be handled by the `HandleCors` [middleware](/docs/{{version}}/middleware) that is included by default in your global middleware stack. Your global middleware stack is located in your application's HTTP kernel (`App\\Http\\Kernel`)."
msgstr ""

# File: docs/8.x/routing.md, line: 711
# File: docs/master/routing.md, line: 740
#. type: Plain text
#, no-wrap
msgid "> {tip} For more information on CORS and CORS headers, please consult the [MDN web documentation on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers).\n"
msgstr ""

# File: docs/8.x/routing.md, line: 713
# File: docs/master/routing.md, line: 742
#. type: Plain text
#, no-wrap
msgid "<a name=\"route-caching\"></a>\n"
msgstr ""

# File: docs/8.x/routing.md, line: 713
# File: docs/master/routing.md, line: 742
#. type: Title ##
#, no-wrap
msgid "Route Caching"
msgstr ""

# File: docs/8.x/routing.md, line: 716
# File: docs/master/routing.md, line: 745
#. type: Plain text
msgid "When deploying your application to production, you should take advantage of Laravel's route cache. Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. To generate a route cache, execute the `route:cache` Artisan command:"
msgstr ""

# File: docs/8.x/routing.md, line: 718
# File: docs/master/routing.md, line: 747
#. type: Plain text
#, no-wrap
msgid "    php artisan route:cache\n"
msgstr ""

# File: docs/8.x/routing.md, line: 720
# File: docs/master/routing.md, line: 749
#. type: Plain text
msgid "After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes you will need to generate a fresh route cache. Because of this, you should only run the `route:cache` command during your project's deployment."
msgstr ""

# File: docs/8.x/routing.md, line: 722
# File: docs/master/routing.md, line: 751
#. type: Plain text
msgid "You may use the `route:clear` command to clear the route cache:"
msgstr ""

# File: docs/8.x/routing.md, line: 723
# File: docs/master/routing.md, line: 752
#. type: Plain text
#, no-wrap
msgid "    php artisan route:clear\n"
msgstr ""

# File: docs/master/routing.md, line: 29
#. type: Plain text
#, no-wrap
msgid "- [Basic Routing](#basic-routing)\n"
"    - [Redirect Routes](#redirect-routes)\n"
"    - [View Routes](#view-routes)\n"
"- [Route Parameters](#route-parameters)\n"
"    - [Required Parameters](#required-parameters)\n"
"    - [Optional Parameters](#parameters-optional-parameters)\n"
"    - [Regular Expression Constraints](#parameters-regular-expression-constraints)\n"
"- [Named Routes](#named-routes)\n"
"- [Route Groups](#route-groups)\n"
"    - [Middleware](#route-group-middleware)\n"
"    - [Controllers](#route-group-controllers)\n"
"    - [Subdomain Routing](#route-group-subdomain-routing)\n"
"    - [Route Prefixes](#route-group-prefixes)\n"
"    - [Route Name Prefixes](#route-group-name-prefixes)\n"
"- [Route Model Binding](#route-model-binding)\n"
"    - [Implicit Binding](#implicit-binding)\n"
"    - [Implicit Enum Binding](#implicit-enum-binding)\n"
"    - [Explicit Binding](#explicit-binding)\n"
"- [Fallback Routes](#fallback-routes)\n"
"- [Rate Limiting](#rate-limiting)\n"
"    - [Defining Rate Limiters](#defining-rate-limiters)\n"
"    - [Attaching Rate Limiters To Routes](#attaching-rate-limiters-to-routes)\n"
"- [Form Method Spoofing](#form-method-spoofing)\n"
"- [Accessing The Current Route](#accessing-the-current-route)\n"
"- [Cross-Origin Resource Sharing (CORS)](#cors)\n"
"- [Route Caching](#route-caching)\n"
msgstr ""

# File: docs/master/routing.md, line: 489
#. type: Plain text
#, no-wrap
msgid "<a name=\"implicit-enum-binding\"></a>\n"
msgstr ""

# File: docs/master/routing.md, line: 489
#. type: Title ###
#, no-wrap
msgid "Implicit Enum Binding"
msgstr ""

# File: docs/master/routing.md, line: 492
#. type: Plain text
msgid "PHP 8.1 introduced support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To compliment this feature, Laravel allows you to type-hint an Enum on your route definition and Laravel will only invoke the route if that route segment corresponds to a valid Enum value. Otherwise, a 404 HTTP response will be returned automatically. For example, given the following Enum:"
msgstr ""

# File: docs/master/routing.md, line: 493
# File: docs/master/routing.md, line: 507
#. type: Code fence info string
#, no-wrap
msgid "php"
msgstr ""

# File: docs/master/routing.md, line: 493
#. type: Plain text
#, no-wrap
msgid "<?php\n\n"
"namespace App\\Enums;\n\n"
"enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"
msgstr ""

# File: docs/master/routing.md, line: 506
#. type: Plain text
msgid "You may define a route that will only be invoked if the `{category}` route segment is `fruits` or `people`. Otherwise, Laravel will return a 404 HTTP response:"
msgstr ""

# File: docs/master/routing.md, line: 507
#. type: Plain text
#, no-wrap
msgid "use App\\Enums\\Category;\n"
"use Illuminate\\Support\\Facades\\Route;\n\n"
"Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"
msgstr ""

