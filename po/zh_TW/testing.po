msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/testing.pot\n"
"X-Crowdin-File-ID: 163\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-09-09 05:22\n"

#: docs/8.x/testing.md:block 1 (header)
msgid "Testing: Getting Started"
msgstr "測試：入門"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Environment](#environment)"
msgstr "[環境](#environment)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Creating Tests](#creating-tests)"
msgstr "[建立測試](#creating-tests)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Running Tests](#running-tests)"
msgstr "[執行測試](#running-tests)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Running Tests In Parallel](#running-tests-in-parallel)"
msgstr "[平行執行測試](#running-tests-in-parallel)"

#: docs/8.x/testing.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/testing.md:block 5 (paragraph)
msgid "Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr "Laravel 在設計時就已將測試考慮進去。而且，Laravel 有內建 PHPUnit 支援，且 Laravel 還隨附了一個已設定好可在專案內使用的 `phpunit.xml` 。在 Laravel 中，也有許多方便的輔助函式，能讓我們精準地對專案進行測試。"

#: docs/8.x/testing.md:block 6 (paragraph)
msgid "By default, your application's `tests` directory contains two directories: `Feature` and `Unit`. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests within your \"Unit\" test directory do not boot your Laravel application and therefore are unable to access your application's database or other framework services."
msgstr "預設情況下，專案的 `tests` 目錄內包含了兩個目錄：`Feature` 與 `Unit`。^[Unit Test](單元測試) 是專注於測試一些小部分、與其他部分獨立的程式碼。其實，單元測試可能會只專注於測試單一方法。在「Unit」測試目錄下的測試不會啟用 Laravel 專案，因此無法存取專案的資料庫或其他 Laravel 的服務。"

#: docs/8.x/testing.md:block 7 (paragraph)
msgid "Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint. **Generally, most of your tests should be feature tests. These types of tests provide the most confidence that your system as a whole is functioning as intended.**"
msgstr "^[Feature Test](功能測試)可用來測試較大部分的程式碼 —— 測試各個物件要如何互相使用、測試 JSON Endpoint 的完整 HTTP Request 等。**一般來說，大多數的測試應該都是 Feature Test。使用 Feature Test 有助於確保整體系統如期運作。**"

#: docs/8.x/testing.md:block 8 (paragraph)
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/phpunit` or `php artisan test` commands to run your tests."
msgstr "在 `Feature` 與 `Unit` 測試目錄下都有提供了一個 `ExampleTest.php` 檔。安裝好新的 Laravel 專案後，執行 `vendor/bin/phpunit` 或 `php artisan test` 指令即可執行測試。"

#: docs/8.x/testing.md:block 10 (header)
msgid "Environment"
msgstr "環境"

#: docs/8.x/testing.md:block 11 (paragraph)
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver while testing, meaning no session or cache data will be persisted while testing."
msgstr "執行測試時，Laravel 會自動依照 `phpunit.xml` 檔內定義的環境變數來將[設定環境](/docs/{{version}}/configuration#environment-configuration)設為 `testing`。在測試期間，Laravel 也會自動將 Session 與 Cache 設為 `array` Driver，以不保存測試期間的 Session 或 Cache 資料。"

#: docs/8.x/testing.md:block 12 (paragraph)
msgid "You are free to define other testing environment configuration values as necessary. The `testing` environment variables may be configured in your application's `phpunit.xml` file, but make sure to clear your configuration cache using the `config:clear` Artisan command before running your tests!"
msgstr "若有需要，也可以自行定義其他的測試環境設定值。`testing` 環境變數可以在專案的 `phpunit.xml` 檔案中修改。不過，在執行測試前，請記得使用 `config:clear` Artisan 指令來清除設定快取！"

#: docs/8.x/testing.md:block 14 (header)
msgid "The `.env.testing` Environment File"
msgstr "`.env.testing` 環境檔"

#: docs/8.x/testing.md:block 15 (paragraph)
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr "除此之外，也可以也可以在專案根目錄上建立一個 `.env.testing` 檔案。在執行 PHPUnit 測試或使用 `--env=testing` 選項執行 Artisan 指令時，會使用這個檔案來代替 `.env` 檔案。"

#: docs/8.x/testing.md:block 17 (header)
msgid "The `CreatesApplication` Trait"
msgstr "`CreatesApplication` Trait"

#: docs/8.x/testing.md:block 18 (paragraph)
msgid "Laravel includes a `CreatesApplication` trait that is applied to your application's base `TestCase` class. This trait contains a `createApplication` method that bootstraps the Laravel application before running your tests. It's important that you leave this trait at its original location as some features, such as Laravel's parallel testing feature, depend on it."
msgstr "Laravel 中包含了一個 `CreatesApplication` Trait。在專案的基礎 `TestCase` 類別中有套用這個 Trait。`CreatesApplication` 裡包含了一個 `createApplication` 方法，用來在執行測試前啟動 Laravel 程式。需注意要將該 Trait 保留在原位，因為某些 Laravel 的功能 —— 如平行測試 —— 需要仰賴於該 Trait。"

#: docs/8.x/testing.md:block 20 (header)
msgid "Creating Tests"
msgstr "建立測試"

#: docs/8.x/testing.md:block 21 (paragraph)
msgid "To create a new test case, use the `make:test` Artisan command. By default, tests will be placed in the `tests/Feature` directory:"
msgstr "若要建立新測試例，請使用 `make:test` Artisan 指令。預設情況下，測試會被放在 `tests/Feature` 目錄下："

#: docs/8.x/testing.md:block 22 (code)
msgid "php artisan make:test UserTest\n"
msgstr "php artisan make:test UserTest\n"

#: docs/8.x/testing.md:block 23 (paragraph)
msgid "If you would like to create a test within the `tests/Unit` directory, you may use the `--unit` option when executing the `make:test` command:"
msgstr "若要在 `tests/Unit` 目錄下建立測試，可在執行 `make:test` 指令時使用 `--unit` 選項："

#: docs/8.x/testing.md:block 24 (code)
msgid "php artisan make:test UserTest --unit\n"
msgstr "php artisan make:test UserTest --unit\n"

#: docs/8.x/testing.md:block 25 (paragraph)
msgid "If you would like to create a [Pest PHP](https://pestphp.com) test, you may provide the `--pest` option to the `make:test` command:"
msgstr "若要建立 [Pest PHP](https://pestphp.com) 測試，可在 `make:test` 指令上使用 `--pest` 選項："

#: docs/8.x/testing.md:block 26 (code)
msgid "php artisan make:test UserTest --pest\n"
"php artisan make:test UserTest --unit --pest\n"
msgstr "php artisan make:test UserTest --pest\n"
"php artisan make:test UserTest --unit --pest\n"

#: docs/8.x/testing.md:block 27 (quote)
msgid "{tip} Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr "{tip} 可以[安裝 Stub](/docs/{{version}}/artisan#stub-customization) 來自訂測試的 Stub。"

#: docs/8.x/testing.md:block 28 (paragraph)
msgid "Once the test has been generated, you may define test methods as you normally would using [PHPUnit](https://phpunit.de). To run your tests, execute the `vendor/bin/phpunit` or `php artisan test` command from your terminal:"
msgstr "產生好測試後，即可如平常使用 [PHPUnit](https://phpunit.de) 一般來定義測試方法。若要執行測試，請在終端機內執行 `vendor/bin/phpunit` 或 `php artisan test` 指令："

#: docs/8.x/testing.md:block 29 (code)
msgid "<?php\n\n"
"namespace Tests\\Unit;\n\n"
"use PHPUnit\\Framework\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests\\Unit;\n\n"
"use PHPUnit\\Framework\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}\n"

#: docs/8.x/testing.md:block 30 (quote)
msgid "{note} If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class."
msgstr "{note} 若有自行在測試類別內定義 `setUp` / `tearDown` 方法，請記得呼叫上層類別內對應的 `parent::setUp()` / `parent::tearDown()` 方法。"

#: docs/8.x/testing.md:block 32 (header)
msgid "Running Tests"
msgstr "執行測試"

#: docs/8.x/testing.md:block 33 (paragraph)
msgid "As mentioned previously, once you've written tests, you may run them using `phpunit`:"
msgstr "就像剛才提到的，寫好測試後，可使用 `phpunit` 來執行測試："

#: docs/8.x/testing.md:block 34 (code)
msgid "./vendor/bin/phpunit\n"
msgstr "./vendor/bin/phpunit\n"

#: docs/8.x/testing.md:block 35 (paragraph)
msgid "In addition to the `phpunit` command, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr "除了 `phpunit` 指令外，我們也可以使用 `test` Artisan 指令來執行測試。Artisan 的測試執行程式會提供較多輸出的測試報告，以讓我們能更輕鬆地進行開發與偵錯："

#: docs/8.x/testing.md:block 36 (code)
msgid "php artisan test\n"
msgstr "php artisan test\n"

#: docs/8.x/testing.md:block 37 (paragraph)
msgid "Any arguments that can be passed to the `phpunit` command may also be passed to the Artisan `test` command:"
msgstr "所有可傳給 `phpunit` 指令的引數都可傳給 Artisan `test` 指令："

#: docs/8.x/testing.md:block 38 (code)
msgid "php artisan test --testsuite=Feature --stop-on-failure\n"
msgstr "php artisan test --testsuite=Feature --stop-on-failure\n"

#: docs/8.x/testing.md:block 40 (header)
msgid "Running Tests In Parallel"
msgstr "平行執行測試"

#: docs/8.x/testing.md:block 41 (paragraph)
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, ensure your application depends on version `^5.3` or greater of the `nunomaduro/collision` package. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr "預設情況下，Laravel 與 PHPUnit 會依照順序在單一處理程序內執行我們的測試。不過，我們也可以同時以多個處理程序來執行測試，以大幅降低執行測試所需的時間。若要以多個處理程序執行測試，請先檢查專案是否有使用 `^5.3` 或更新版的 `nunomaduro/collision` 套件。接著，請在執行 `test` Artisan 指令時使用 `--parallel` 選項："

#: docs/8.x/testing.md:block 42 (code)
msgid "php artisan test --parallel\n"
msgstr "php artisan test --parallel\n"

#: docs/8.x/testing.md:block 43 (paragraph)
msgid "By default, Laravel will create as many processes as there are available CPU cores on your machine. However, you may adjust the number of processes using the `--processes` option:"
msgstr "預設情況下，Laravel 會以機器上可用的 CPU 核心數來建立處理程序。不過，我們也可以使用 `--processes` 選項來調整處理程序的數量："

#: docs/8.x/testing.md:block 44 (code)
msgid "php artisan test --parallel --processes=4\n"
msgstr "php artisan test --parallel --processes=4\n"

#: docs/8.x/testing.md:block 45 (quote)
msgid "{note} When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr "{note} 平行執行測試時，可能無法使用部分 PHPUnit 的選項 (如 `--do-not-cache-result`)。"

#: docs/8.x/testing.md:block 47 (header)
msgid "Parallel Testing & Databases"
msgstr "平行測試與資料庫"

#: docs/8.x/testing.md:block 48 (paragraph)
msgid "Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr "Laravel 會自動為每個執行測試的平行處理程序建立並 Migrate 測試資料庫。Laravel 會使用每個處理程序都不同的處理程序 Token 來作為資料庫的前置詞。舉例來說，若有兩個平行的測試處理程序，則 Laravel 會建立並使用 `your_db_test_1` 與 `your_db_test_2` 測試資料庫。"

#: docs/8.x/testing.md:block 49 (paragraph)
msgid "By default, test databases persist between calls to the `test` Artisan command so that they can be used again by subsequent `test` invocations. However, you may re-create them using the `--recreate-databases` option:"
msgstr "預設情況下，在不同的 `test` Artisan 指令間，會共用相同的測試資料庫，以在連續呼叫 `test` 指令時使用這些資料庫。不過，我們也可以使用 `--create-databases` 選項來重新建立測試資料庫："

#: docs/8.x/testing.md:block 50 (code)
msgid "php artisan test --parallel --recreate-databases\n"
msgstr "php artisan test --parallel --recreate-databases\n"

#: docs/8.x/testing.md:block 52 (header)
msgid "Parallel Testing Hooks"
msgstr "平行測試的 Hook"

#: docs/8.x/testing.md:block 53 (paragraph)
msgid "Occasionally, you may need to prepare certain resources used by your application's tests so they may be safely used by multiple test processes."
msgstr "有時候，我們會需要為一些專案所使用的特定資源做準備，好讓我們能在多個測試處理程序中使用這些資源。"

#: docs/8.x/testing.md:block 54 (paragraph)
msgid "Using the `ParallelTesting` facade, you may specify code to be executed on the `setUp` and `tearDown` of a process or test case. The given closures receive the `$token` and `$testCase` variables that contain the process token and the current test case, respectively:"
msgstr "只要使用 `ParallelTesting` Facade，就可指定要在處理程序或測試例的 `setUp` 或 `tearDown` 內要執行的特定程式碼。給定的閉包會收到 `$token` 與 `$testCase` 變數，著兩個變數中分別包含了處理程序的 Token，以及目前的測試例："

#: docs/8.x/testing.md:block 55 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        ParallelTesting::setUpProcess(function ($token) {\n"
"            // ...\n"
"        });\n\n"
"        ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n\n"
"        ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n\n"
"        ParallelTesting::tearDownProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        ParallelTesting::setUpProcess(function ($token) {\n"
"            // ...\n"
"        });\n\n"
"        ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n\n"
"        ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n\n"
"        ParallelTesting::tearDownProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/testing.md:block 57 (header)
msgid "Accessing The Parallel Testing Token"
msgstr "存取平行測試的 Token"

#: docs/8.x/testing.md:block 58 (paragraph)
msgid "If you would like to access to current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr "若想從測試程式碼中的任何地方存取目前平行處理程序的「Token」，我們可以使用 `token` 方法。對於各個測試處理程序來說，平行處理程序的「Token」是一個不重複的字串，可用來在多個平行測試處理程序上為資源分段。舉例來說，Laravel 會自動將該 Token 放在各個由平行測試處理程序所建立的測試資料庫名稱後方："

#: docs/8.x/testing.md:block 59 (code)
msgid "$token = ParallelTesting::token();\n"
msgstr "$token = ParallelTesting::token();\n"

#: docs/9.x/testing.md:block 2 (unordered list)
msgid "[Reporting Test Coverage](#reporting-test-coverage)"
msgstr "[回報測試覆蓋率](#reporting-test-coverage)"

#: docs/9.x/testing.md:block 27 (quote)
msgid "**Note** Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr "**Note** 可以[安裝 Stub](/docs/{{version}}/artisan#stub-customization) 來自訂測試的 Stub。"

#: docs/9.x/testing.md:block 30 (quote)
msgid "**Warning** If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class."
msgstr "**Warning** 若有自行在測試類別內定義 `setUp` / `tearDown` 方法，請記得呼叫上層類別內對應的 `parent::setUp()` / `parent::tearDown()` 方法。"

#: docs/9.x/testing.md:block 45 (quote)
msgid "**Warning** When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr "**Warning** 平行執行測試時，可能無法使用部分 PHPUnit 的選項 (如 `--do-not-cache-result`)。"

#: docs/9.x/testing.md:block 58 (paragraph)
msgid "If you would like to access the current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr "若想從測試程式碼中的任何地方存取目前平行處理程序的「Token」，我們可以使用 `token` 方法。對於各個測試處理程序來說，平行處理程序的「Token」是一個不重複的字串，可用來在多個平行測試處理程序上為資源分段。舉例來說，Laravel 會自動將該 Token 放在各個由平行測試處理程序所建立的測試資料庫名稱後方："

#: docs/9.x/testing.md:block 61 (header)
msgid "Reporting Test Coverage"
msgstr "回報測試覆蓋率"

#: docs/9.x/testing.md:block 62 (quote)
msgid "**Warning** This feature requires [Xdebug](https://xdebug.org) or [PCOV](https://pecl.php.net/package/pcov)."
msgstr "**Warning** 要使用該功能，需安裝 [Xdebug](https://xdebug.org) 或 [PCOV](https://pecl.php.net/package/pcov)。"

#: docs/9.x/testing.md:block 63 (paragraph)
msgid "When running your application tests, you may want to determine whether your test cases are actually covering the application code and how much application code is used when running your tests. To accomplish this, you may provide the `--coverage` option when invoking the `test` command:"
msgstr "在執行專案測試時，我們可能會想判斷測試例是否有實際涵蓋到專案的程式碼、或是想知道在執行測試時到底使用到專案中多少的程式碼。若要瞭解測試覆蓋率，可在叫用 `test` 指令時提供 `--coverage` 選項："

#: docs/9.x/testing.md:block 64 (code)
msgid "php artisan test --coverage\n"
msgstr "php artisan test --coverage\n"

#: docs/9.x/testing.md:block 66 (header)
msgid "Enforcing A Minimum Coverage Threshold"
msgstr "強制最低覆蓋率門檻"

#: docs/9.x/testing.md:block 67 (paragraph)
msgid "You may use the `--min` option to define a minimum test coverage threshold for your application. The test suite will fail if this threshold is not met:"
msgstr "可使用 `--min` 選項來為專案定義最低測試覆蓋率門檻。若未符合該門檻，測試套件會執行失敗："

#: docs/9.x/testing.md:block 68 (code)
msgid "php artisan test --coverage --min=80.3\n"
msgstr "php artisan test --coverage --min=80.3\n"

#: docs/master/testing.md:block 62 (quote)
msgid "{note} This feature requires [Xdebug](https://xdebug.org) or [PCOV](https://pecl.php.net/package/pcov)."
msgstr "{note} 要使用該功能，需安裝 [Xdebug](https://xdebug.org) 或 [PCOV](https://pecl.php.net/package/pcov)。"

