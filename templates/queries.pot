msgid ""
msgstr ""

#: ./docs/8.x/queries.md:1
#: ./docs/9.x/queries.md:1
#: ./docs/10.x/queries.md:1
#: ./docs/11.x/queries.md:1
#: ./docs/master/queries.md:1
msgid "Database: Query Builder"
msgstr ""

#: ./docs/8.x/queries.md:3
#: ./docs/9.x/queries.md:3
#: ./docs/10.x/queries.md:3
#: ./docs/11.x/queries.md:3
#: ./docs/master/queries.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/queries.md:4
#: ./docs/9.x/queries.md:4
#: ./docs/10.x/queries.md:4
#: ./docs/11.x/queries.md:4
#: ./docs/master/queries.md:4
msgid "[Running Database Queries](#running-database-queries)"
msgstr ""

#: ./docs/8.x/queries.md:5
#: ./docs/9.x/queries.md:5
#: ./docs/10.x/queries.md:5
#: ./docs/11.x/queries.md:5
#: ./docs/master/queries.md:5
msgid "[Chunking Results](#chunking-results)"
msgstr ""

#: ./docs/8.x/queries.md:6
#: ./docs/9.x/queries.md:6
#: ./docs/10.x/queries.md:6
#: ./docs/11.x/queries.md:6
#: ./docs/master/queries.md:6
msgid "[Streaming Results Lazily](#streaming-results-lazily)"
msgstr ""

#: ./docs/8.x/queries.md:7
#: ./docs/9.x/queries.md:7
#: ./docs/10.x/queries.md:7
#: ./docs/11.x/queries.md:7
#: ./docs/master/queries.md:7
msgid "[Aggregates](#aggregates)"
msgstr ""

#: ./docs/8.x/queries.md:8
#: ./docs/9.x/queries.md:8
#: ./docs/10.x/queries.md:8
#: ./docs/11.x/queries.md:8
#: ./docs/master/queries.md:8
msgid "[Select Statements](#select-statements)"
msgstr ""

#: ./docs/8.x/queries.md:9
#: ./docs/9.x/queries.md:9
#: ./docs/10.x/queries.md:9
#: ./docs/11.x/queries.md:9
#: ./docs/master/queries.md:9
msgid "[Raw Expressions](#raw-expressions)"
msgstr ""

#: ./docs/8.x/queries.md:10
#: ./docs/9.x/queries.md:10
#: ./docs/10.x/queries.md:10
#: ./docs/11.x/queries.md:10
#: ./docs/master/queries.md:10
msgid "[Joins](#joins)"
msgstr ""

#: ./docs/8.x/queries.md:11
#: ./docs/9.x/queries.md:11
#: ./docs/10.x/queries.md:11
#: ./docs/11.x/queries.md:11
#: ./docs/master/queries.md:11
msgid "[Unions](#unions)"
msgstr ""

#: ./docs/8.x/queries.md:12
#: ./docs/9.x/queries.md:12
#: ./docs/10.x/queries.md:12
#: ./docs/11.x/queries.md:12
#: ./docs/master/queries.md:12
msgid "[Basic Where Clauses](#basic-where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:13
#: ./docs/9.x/queries.md:13
#: ./docs/10.x/queries.md:13
#: ./docs/11.x/queries.md:13
#: ./docs/master/queries.md:13
msgid "[Where Clauses](#where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:14
#: ./docs/9.x/queries.md:14
#: ./docs/10.x/queries.md:14
#: ./docs/11.x/queries.md:14
#: ./docs/master/queries.md:14
msgid "[Or Where Clauses](#or-where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:15
#: ./docs/9.x/queries.md:16
#: ./docs/10.x/queries.md:17
#: ./docs/11.x/queries.md:17
#: ./docs/master/queries.md:17
msgid "[JSON Where Clauses](#json-where-clauses)"
msgstr ""

#: ./docs/9.x/queries.md:15
#: ./docs/10.x/queries.md:15
#: ./docs/11.x/queries.md:15
#: ./docs/master/queries.md:15
msgid "[Where Not Clauses](#where-not-clauses)"
msgstr ""

#: ./docs/10.x/queries.md:16
#: ./docs/master/queries.md:16
msgid "[Where Any / All Clauses](#where-any-all-clauses)"
msgstr ""

#: ./docs/11.x/queries.md:16
msgid "[Where Any / All / None Clauses](#where-any-all-none-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:16
#: ./docs/9.x/queries.md:17
#: ./docs/10.x/queries.md:18
#: ./docs/11.x/queries.md:18
#: ./docs/master/queries.md:18
msgid "[Additional Where Clauses](#additional-where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:17
#: ./docs/9.x/queries.md:18
#: ./docs/10.x/queries.md:19
#: ./docs/11.x/queries.md:19
#: ./docs/master/queries.md:19
msgid "[Logical Grouping](#logical-grouping)"
msgstr ""

#: ./docs/8.x/queries.md:18
#: ./docs/9.x/queries.md:19
#: ./docs/10.x/queries.md:20
#: ./docs/11.x/queries.md:20
#: ./docs/master/queries.md:20
msgid "[Advanced Where Clauses](#advanced-where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:19
#: ./docs/9.x/queries.md:20
#: ./docs/10.x/queries.md:21
#: ./docs/11.x/queries.md:21
#: ./docs/master/queries.md:21
msgid "[Where Exists Clauses](#where-exists-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:20
#: ./docs/9.x/queries.md:21
#: ./docs/10.x/queries.md:22
#: ./docs/11.x/queries.md:22
#: ./docs/master/queries.md:22
msgid "[Subquery Where Clauses](#subquery-where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:21
#: ./docs/9.x/queries.md:23
msgid "[Ordering, Grouping, Limit & Offset](#ordering-grouping-limit-and-offset)"
msgstr ""

#: ./docs/8.x/queries.md:22
#: ./docs/9.x/queries.md:24
#: ./docs/10.x/queries.md:25
#: ./docs/11.x/queries.md:25
#: ./docs/master/queries.md:25
msgid "[Ordering](#ordering)"
msgstr ""

#: ./docs/9.x/queries.md:22
#: ./docs/10.x/queries.md:23
#: ./docs/11.x/queries.md:23
#: ./docs/master/queries.md:23
msgid "[Full Text Where Clauses](#full-text-where-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:23
#: ./docs/9.x/queries.md:25
#: ./docs/10.x/queries.md:26
#: ./docs/11.x/queries.md:26
#: ./docs/master/queries.md:26
msgid "[Grouping](#grouping)"
msgstr ""

#: ./docs/10.x/queries.md:24
#: ./docs/11.x/queries.md:24
#: ./docs/master/queries.md:24
msgid "[Ordering, Grouping, Limit and Offset](#ordering-grouping-limit-and-offset)"
msgstr ""

#: ./docs/8.x/queries.md:24
#: ./docs/9.x/queries.md:26
msgid "[Limit & Offset](#limit-and-offset)"
msgstr ""

#: ./docs/8.x/queries.md:25
#: ./docs/9.x/queries.md:27
#: ./docs/10.x/queries.md:28
#: ./docs/11.x/queries.md:28
#: ./docs/master/queries.md:28
msgid "[Conditional Clauses](#conditional-clauses)"
msgstr ""

#: ./docs/8.x/queries.md:26
#: ./docs/9.x/queries.md:28
#: ./docs/10.x/queries.md:29
#: ./docs/11.x/queries.md:29
#: ./docs/master/queries.md:29
msgid "[Insert Statements](#insert-statements)"
msgstr ""

#: ./docs/10.x/queries.md:27
#: ./docs/11.x/queries.md:27
#: ./docs/master/queries.md:27
msgid "[Limit and Offset](#limit-and-offset)"
msgstr ""

#: ./docs/8.x/queries.md:27
#: ./docs/9.x/queries.md:29
#: ./docs/10.x/queries.md:30
#: ./docs/11.x/queries.md:30
#: ./docs/master/queries.md:30
msgid "[Upserts](#upserts)"
msgstr ""

#: ./docs/8.x/queries.md:28
#: ./docs/9.x/queries.md:30
#: ./docs/10.x/queries.md:31
#: ./docs/11.x/queries.md:31
#: ./docs/master/queries.md:31
msgid "[Update Statements](#update-statements)"
msgstr ""

#: ./docs/8.x/queries.md:29
#: ./docs/9.x/queries.md:31
#: ./docs/10.x/queries.md:32
#: ./docs/11.x/queries.md:32
#: ./docs/master/queries.md:32
msgid "[Updating JSON Columns](#updating-json-columns)"
msgstr ""

#: ./docs/8.x/queries.md:30
#: ./docs/9.x/queries.md:32
msgid "[Increment & Decrement](#increment-and-decrement)"
msgstr ""

#: ./docs/8.x/queries.md:31
#: ./docs/9.x/queries.md:33
#: ./docs/10.x/queries.md:34
#: ./docs/11.x/queries.md:34
#: ./docs/master/queries.md:34
msgid "[Delete Statements](#delete-statements)"
msgstr ""

#: ./docs/8.x/queries.md:32
#: ./docs/9.x/queries.md:34
#: ./docs/10.x/queries.md:35
#: ./docs/11.x/queries.md:35
#: ./docs/master/queries.md:35
msgid "[Pessimistic Locking](#pessimistic-locking)"
msgstr ""

#: ./docs/10.x/queries.md:33
#: ./docs/11.x/queries.md:33
#: ./docs/master/queries.md:33
msgid "[Increment and Decrement](#increment-and-decrement)"
msgstr ""

#: ./docs/8.x/queries.md:33
#: ./docs/9.x/queries.md:35
#: ./docs/10.x/queries.md:36
#: ./docs/11.x/queries.md:36
#: ./docs/master/queries.md:36
msgid "[Debugging](#debugging)"
msgstr ""

#: ./docs/8.x/queries.md:35
#: ./docs/9.x/queries.md:37
#: ./docs/10.x/queries.md:38
#: ./docs/11.x/queries.md:38
#: ./docs/master/queries.md:38
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:36
#: ./docs/9.x/queries.md:38
#: ./docs/10.x/queries.md:39
#: ./docs/11.x/queries.md:39
#: ./docs/master/queries.md:39
msgid "Introduction"
msgstr ""

#: ./docs/8.x/queries.md:38
#: ./docs/9.x/queries.md:40
#: ./docs/10.x/queries.md:41
#: ./docs/11.x/queries.md:41
#: ./docs/master/queries.md:41
msgid "Laravel's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application and works perfectly with all of Laravel's supported database systems."
msgstr ""

#: ./docs/8.x/queries.md:40
#: ./docs/9.x/queries.md:42
#: ./docs/10.x/queries.md:43
#: ./docs/11.x/queries.md:43
#: ./docs/master/queries.md:43
msgid "The Laravel query builder uses PDO parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings."
msgstr ""

#: ./docs/8.x/queries.md:42
#: ./docs/8.x/queries.md:434
#: ./docs/9.x/queries.md:45
#: ./docs/9.x/queries.md:442
#: ./docs/10.x/queries.md:46
#: ./docs/10.x/queries.md:462
#: ./docs/11.x/queries.md:46
#: ./docs/11.x/queries.md:480
#: ./docs/master/queries.md:46
#: ./docs/master/queries.md:462
msgid "PDO does not support binding column names. Therefore, you should never allow user input to dictate the column names referenced by your queries, including \"order by\" columns."
msgstr ""

#: ./docs/8.x/queries.md:44
#: ./docs/9.x/queries.md:47
#: ./docs/10.x/queries.md:48
#: ./docs/11.x/queries.md:48
#: ./docs/master/queries.md:48
#~ msgctxt "P"
#~ msgid "<a name=\"running-database-queries\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:45
#: ./docs/9.x/queries.md:48
#: ./docs/10.x/queries.md:49
#: ./docs/11.x/queries.md:49
#: ./docs/master/queries.md:49
msgid "Running Database Queries"
msgstr ""

#: ./docs/8.x/queries.md:47
#: ./docs/9.x/queries.md:50
#: ./docs/10.x/queries.md:51
#: ./docs/11.x/queries.md:51
#: ./docs/master/queries.md:51
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-all-rows-from-a-table\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:48
#: ./docs/9.x/queries.md:51
msgid "Retrieving All Rows From A Table"
msgstr ""

#: ./docs/8.x/queries.md:50
#: ./docs/9.x/queries.md:53
#: ./docs/10.x/queries.md:54
#: ./docs/11.x/queries.md:54
#: ./docs/master/queries.md:54
msgid "You may use the `table` method provided by the `DB` facade to begin a query. The `table` method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve the results of the query using the `get` method:"
msgstr ""

#: ./docs/10.x/queries.md:52
#: ./docs/11.x/queries.md:52
#: ./docs/master/queries.md:52
msgid "Retrieving All Rows From a Table"
msgstr ""

#: ./docs/8.x/queries.md:52
#: ./docs/9.x/queries.md:55
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show a list of all of the application's users.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        $users = DB::table('users')->get();\n"
"\n"
"        return view('user.index', ['users' => $users]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/queries.md:56
#: ./docs/11.x/queries.md:56
#: ./docs/master/queries.md:56
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show a list of all of the application's users.\n"
"     */\n"
"    public function index(): View\n"
"    {\n"
"        $users = DB::table('users')->get();\n"
"\n"
"        return view('user.index', ['users' => $users]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/queries.md:74
#: ./docs/9.x/queries.md:77
#: ./docs/10.x/queries.md:76
#: ./docs/11.x/queries.md:76
#: ./docs/master/queries.md:76
msgid "The `get` method returns an `Illuminate\\Support\\Collection` instance containing the results of the query where each result is an instance of the PHP `stdClass` object. You may access each column's value by accessing the column as a property of the object:"
msgstr ""

#: ./docs/8.x/queries.md:76
#: ./docs/9.x/queries.md:79
#: ./docs/10.x/queries.md:78
#: ./docs/11.x/queries.md:78
#: ./docs/master/queries.md:78
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')->get();\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->name;\n"
"}"
msgstr ""

#: ./docs/8.x/queries.md:84
#: ./docs/9.x/queries.md:88
#: ./docs/10.x/queries.md:87
#: ./docs/11.x/queries.md:87
#: ./docs/master/queries.md:87
msgid "Laravel collections provide a variety of extremely powerful methods for mapping and reducing data. For more information on Laravel collections, check out the [collection documentation](/docs/{{version}}/collections)."
msgstr ""

#: ./docs/8.x/queries.md:86
#: ./docs/9.x/queries.md:90
#: ./docs/10.x/queries.md:89
#: ./docs/11.x/queries.md:89
#: ./docs/master/queries.md:89
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-a-single-row-column-from-a-table\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:87
#: ./docs/9.x/queries.md:91
msgid "Retrieving A Single Row / Column From A Table"
msgstr ""

#: ./docs/8.x/queries.md:89
#: ./docs/9.x/queries.md:93
#: ./docs/10.x/queries.md:92
#: ./docs/11.x/queries.md:92
#: ./docs/master/queries.md:92
msgid "If you just need to retrieve a single row from a database table, you may use the `DB` facade's `first` method. This method will return a single `stdClass` object:"
msgstr ""

#: ./docs/10.x/queries.md:90
#: ./docs/11.x/queries.md:90
#: ./docs/master/queries.md:90
msgid "Retrieving a Single Row / Column From a Table"
msgstr ""

#: ./docs/8.x/queries.md:91
#: ./docs/9.x/queries.md:95
#: ./docs/10.x/queries.md:94
#: ./docs/11.x/queries.md:94
#: ./docs/master/queries.md:94
msgid ""
"$user = DB::table('users')->where('name', 'John')->first();\n"
"\n"
"return $user->email;"
msgstr ""

#: ./docs/8.x/queries.md:95
#: ./docs/9.x/queries.md:99
#: ./docs/10.x/queries.md:98
#: ./docs/11.x/queries.md:102
#: ./docs/master/queries.md:98
msgid "If you don't need an entire row, you may extract a single value from a record using the `value` method. This method will return the value of the column directly:"
msgstr ""

#: ./docs/8.x/queries.md:97
#: ./docs/9.x/queries.md:101
#: ./docs/10.x/queries.md:100
#: ./docs/11.x/queries.md:104
#: ./docs/master/queries.md:100
msgid "$email = DB::table('users')->where('name', 'John')->value('email');"
msgstr ""

#: ./docs/11.x/queries.md:98
msgid "If you would like to retrieve a single row from a database table, but throw an `Illuminate\\Database\\RecordNotFoundException` if no matching row is found, you may use the `firstOrFail` method. If the `RecordNotFoundException` is not caught, a 404 HTTP response is automatically sent back to the client:"
msgstr ""

#: ./docs/8.x/queries.md:99
#: ./docs/9.x/queries.md:103
#: ./docs/10.x/queries.md:102
#: ./docs/11.x/queries.md:106
#: ./docs/master/queries.md:102
msgid "To retrieve a single row by its `id` column value, use the `find` method:"
msgstr ""

#: ./docs/11.x/queries.md:100
msgid "$user = DB::table('users')->where('name', 'John')->firstOrFail();"
msgstr ""

#: ./docs/8.x/queries.md:101
#: ./docs/9.x/queries.md:105
#: ./docs/10.x/queries.md:104
#: ./docs/11.x/queries.md:108
#: ./docs/master/queries.md:104
msgid "$user = DB::table('users')->find(3);"
msgstr ""

#: ./docs/8.x/queries.md:103
#: ./docs/9.x/queries.md:107
#: ./docs/10.x/queries.md:106
#: ./docs/11.x/queries.md:110
#: ./docs/master/queries.md:106
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-a-list-of-column-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:104
#: ./docs/9.x/queries.md:108
msgid "Retrieving A List Of Column Values"
msgstr ""

#: ./docs/8.x/queries.md:106
#: ./docs/9.x/queries.md:110
#: ./docs/10.x/queries.md:109
#: ./docs/11.x/queries.md:113
#: ./docs/master/queries.md:109
msgid "If you would like to retrieve an `Illuminate\\Support\\Collection` instance containing the values of a single column, you may use the `pluck` method. In this example, we'll retrieve a collection of user titles:"
msgstr ""

#: ./docs/10.x/queries.md:107
#: ./docs/11.x/queries.md:111
#: ./docs/master/queries.md:107
msgid "Retrieving a List of Column Values"
msgstr ""

#: ./docs/8.x/queries.md:108
#: ./docs/9.x/queries.md:112
#: ./docs/10.x/queries.md:111
#: ./docs/11.x/queries.md:115
#: ./docs/master/queries.md:111
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$titles = DB::table('users')->pluck('title');\n"
"\n"
"foreach ($titles as $title) {\n"
"    echo $title;\n"
"}"
msgstr ""

#: ./docs/8.x/queries.md:116
#: ./docs/9.x/queries.md:120
#: ./docs/10.x/queries.md:119
#: ./docs/11.x/queries.md:123
#: ./docs/master/queries.md:119
msgid "You may specify the column that the resulting collection should use as its keys by providing a second argument to the `pluck` method:"
msgstr ""

#: ./docs/8.x/queries.md:118
#: ./docs/9.x/queries.md:122
#: ./docs/10.x/queries.md:121
#: ./docs/11.x/queries.md:125
#: ./docs/master/queries.md:121
msgid ""
"$titles = DB::table('users')->pluck('title', 'name');\n"
"\n"
"foreach ($titles as $name => $title) {\n"
"    echo $title;\n"
"}"
msgstr ""

#: ./docs/8.x/queries.md:124
#: ./docs/9.x/queries.md:128
#: ./docs/10.x/queries.md:127
#: ./docs/11.x/queries.md:131
#: ./docs/master/queries.md:127
#~ msgctxt "P"
#~ msgid "<a name=\"chunking-results\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:125
#: ./docs/9.x/queries.md:129
#: ./docs/10.x/queries.md:128
#: ./docs/11.x/queries.md:132
#: ./docs/master/queries.md:128
msgid "Chunking Results"
msgstr ""

#: ./docs/8.x/queries.md:127
#: ./docs/9.x/queries.md:131
#: ./docs/10.x/queries.md:130
#: ./docs/11.x/queries.md:134
#: ./docs/master/queries.md:130
msgid "If you need to work with thousands of database records, consider using the `chunk` method provided by the `DB` facade. This method retrieves a small chunk of results at a time and feeds each chunk into a closure for processing. For example, let's retrieve the entire `users` table in chunks of 100 records at a time:"
msgstr ""

#: ./docs/8.x/queries.md:129
#: ./docs/9.x/queries.md:133
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"    foreach ($users as $user) {\n"
"        //\n"
"    }\n"
"});"
msgstr ""

#: ./docs/10.x/queries.md:132
#: ./docs/11.x/queries.md:136
#: ./docs/master/queries.md:132
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->chunk(100, function (Collection $users) {\n"
"    foreach ($users as $user) {\n"
"        // ...\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/queries.md:137
#: ./docs/9.x/queries.md:141
#: ./docs/10.x/queries.md:141
#: ./docs/11.x/queries.md:145
#: ./docs/master/queries.md:141
msgid "You may stop further chunks from being processed by returning `false` from the closure:"
msgstr ""

#: ./docs/8.x/queries.md:139
#: ./docs/9.x/queries.md:143
msgid ""
"DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"    // Process the records...\n"
"\n"
"    return false;\n"
"});"
msgstr ""

#: ./docs/10.x/queries.md:143
#: ./docs/11.x/queries.md:147
#: ./docs/master/queries.md:143
msgid ""
"DB::table('users')->orderBy('id')->chunk(100, function (Collection $users) {\n"
"    // Process the records...\n"
"\n"
"    return false;\n"
"});"
msgstr ""

#: ./docs/8.x/queries.md:145
#: ./docs/9.x/queries.md:149
#: ./docs/10.x/queries.md:149
#: ./docs/11.x/queries.md:153
#: ./docs/master/queries.md:149
msgid "If you are updating database records while chunking results, your chunk results could change in unexpected ways. If you plan to update the retrieved records while chunking, it is always best to use the `chunkById` method instead. This method will automatically paginate the results based on the record's primary key:"
msgstr ""

#: ./docs/8.x/queries.md:147
#: ./docs/9.x/queries.md:151
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->chunkById(100, function ($users) {\n"
"        foreach ($users as $user) {\n"
"            DB::table('users')\n"
"                ->where('id', $user->id)\n"
"                ->update(['active' => true]);\n"
"        }\n"
"    });"
msgstr ""

#: ./docs/10.x/queries.md:151
#: ./docs/11.x/queries.md:155
#: ./docs/master/queries.md:151
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->chunkById(100, function (Collection $users) {\n"
"        foreach ($users as $user) {\n"
"            DB::table('users')\n"
"                ->where('id', $user->id)\n"
"                ->update(['active' => true]);\n"
"        }\n"
"    });"
msgstr ""

#: ./docs/8.x/queries.md:156
#: ./docs/9.x/queries.md:161
#: ./docs/10.x/queries.md:161
#: ./docs/11.x/queries.md:179
#: ./docs/master/queries.md:161
msgid "When updating or deleting records inside the chunk callback, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results."
msgstr ""

#: ./docs/8.x/queries.md:158
#: ./docs/9.x/queries.md:163
#: ./docs/10.x/queries.md:163
#: ./docs/11.x/queries.md:181
#: ./docs/master/queries.md:163
#~ msgctxt "P"
#~ msgid "<a name=\"streaming-results-lazily\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:159
#: ./docs/9.x/queries.md:164
#: ./docs/10.x/queries.md:164
#: ./docs/11.x/queries.md:182
#: ./docs/master/queries.md:164
msgid "Streaming Results Lazily"
msgstr ""

#: ./docs/8.x/queries.md:161
#: ./docs/9.x/queries.md:166
#: ./docs/10.x/queries.md:166
#: ./docs/11.x/queries.md:184
#: ./docs/master/queries.md:166
msgid "The `lazy` method works similarly to [the `chunk` method](#chunking-results) in the sense that it executes the query in chunks. However, instead of passing each chunk into a callback, the `lazy()` method returns a [`LazyCollection`](/docs/{{version}}/collections#lazy-collections), which lets you interact with the results as a single stream:"
msgstr ""

#: ./docs/8.x/queries.md:163
#: ./docs/9.x/queries.md:168
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->lazy()->each(function ($user) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/11.x/queries.md:164
msgid "Since the `chunkById` and `lazyById` methods add their own \"where\" conditions to the query being executed, you should typically [logically group](#logical-grouping) your own conditions within a closure:"
msgstr ""

#: ./docs/11.x/queries.md:166
msgid ""
"DB::table('users')->where(function ($query) {\n"
"    $query->where('credits', 1)->orWhere('credits', 2);\n"
"})->chunkById(100, function (Collection $users) {\n"
"    foreach ($users as $user) {\n"
"        DB::table('users')\n"
"          ->where('id', $user->id)\n"
"          ->update(['credits' => 3]);\n"
"    }\n"
"});"
msgstr ""

#: ./docs/10.x/queries.md:168
#: ./docs/11.x/queries.md:186
#: ./docs/master/queries.md:168
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->lazy()->each(function (object $user) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/queries.md:171
#: ./docs/9.x/queries.md:176
#: ./docs/10.x/queries.md:176
#: ./docs/11.x/queries.md:194
#: ./docs/master/queries.md:176
msgid "Once again, if you plan to update the retrieved records while iterating over them, it is best to use the `lazyById` or `lazyByIdDesc` methods instead. These methods will automatically paginate the results based on the record's primary key:"
msgstr ""

#: ./docs/8.x/queries.md:173
#: ./docs/9.x/queries.md:178
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->lazyById()->each(function ($user) {\n"
"        DB::table('users')\n"
"            ->where('id', $user->id)\n"
"            ->update(['active' => true]);\n"
"    });"
msgstr ""

#: ./docs/10.x/queries.md:178
#: ./docs/11.x/queries.md:196
#: ./docs/master/queries.md:178
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->lazyById()->each(function (object $user) {\n"
"        DB::table('users')\n"
"            ->where('id', $user->id)\n"
"            ->update(['active' => true]);\n"
"    });"
msgstr ""

#: ./docs/8.x/queries.md:182
#: ./docs/9.x/queries.md:188
#: ./docs/10.x/queries.md:188
#: ./docs/11.x/queries.md:206
#: ./docs/master/queries.md:188
msgid "When updating or deleting records while iterating over them, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the results."
msgstr ""

#: ./docs/8.x/queries.md:184
#: ./docs/9.x/queries.md:190
#: ./docs/10.x/queries.md:190
#: ./docs/11.x/queries.md:208
#: ./docs/master/queries.md:190
#~ msgctxt "P"
#~ msgid "<a name=\"aggregates\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:185
#: ./docs/9.x/queries.md:191
#: ./docs/10.x/queries.md:191
#: ./docs/11.x/queries.md:209
#: ./docs/master/queries.md:191
msgid "Aggregates"
msgstr ""

#: ./docs/8.x/queries.md:187
#: ./docs/9.x/queries.md:193
#: ./docs/10.x/queries.md:193
#: ./docs/11.x/queries.md:211
#: ./docs/master/queries.md:193
msgid "The query builder also provides a variety of methods for retrieving aggregate values like `count`, `max`, `min`, `avg`, and `sum`. You may call any of these methods after constructing your query:"
msgstr ""

#: ./docs/8.x/queries.md:189
#: ./docs/9.x/queries.md:195
#: ./docs/10.x/queries.md:195
#: ./docs/11.x/queries.md:213
#: ./docs/master/queries.md:195
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')->count();\n"
"\n"
"$price = DB::table('orders')->max('price');"
msgstr ""

#: ./docs/8.x/queries.md:195
#: ./docs/9.x/queries.md:201
#: ./docs/10.x/queries.md:201
#: ./docs/11.x/queries.md:219
#: ./docs/master/queries.md:201
msgid "Of course, you may combine these methods with other clauses to fine-tune how your aggregate value is calculated:"
msgstr ""

#: ./docs/8.x/queries.md:197
#: ./docs/9.x/queries.md:203
#: ./docs/10.x/queries.md:203
#: ./docs/11.x/queries.md:221
#: ./docs/master/queries.md:203
msgid ""
"$price = DB::table('orders')\n"
"                ->where('finalized', 1)\n"
"                ->avg('price');"
msgstr ""

#: ./docs/8.x/queries.md:201
#: ./docs/9.x/queries.md:207
#: ./docs/10.x/queries.md:207
#: ./docs/11.x/queries.md:225
#: ./docs/master/queries.md:207
#~ msgctxt "P"
#~ msgid "<a name=\"determining-if-records-exist\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:202
#: ./docs/9.x/queries.md:208
msgid "Determining If Records Exist"
msgstr ""

#: ./docs/8.x/queries.md:204
#: ./docs/9.x/queries.md:210
#: ./docs/10.x/queries.md:210
#: ./docs/11.x/queries.md:228
#: ./docs/master/queries.md:210
msgid "Instead of using the `count` method to determine if any records exist that match your query's constraints, you may use the `exists` and `doesntExist` methods:"
msgstr ""

#: ./docs/8.x/queries.md:206
#: ./docs/9.x/queries.md:212
#: ./docs/10.x/queries.md:212
#: ./docs/11.x/queries.md:230
#: ./docs/master/queries.md:212
msgid ""
"if (DB::table('orders')->where('finalized', 1)->exists()) {\n"
"    // ...\n"
"}\n"
"\n"
"if (DB::table('orders')->where('finalized', 1)->doesntExist()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/queries.md:208
#: ./docs/11.x/queries.md:226
#: ./docs/master/queries.md:208
msgid "Determining if Records Exist"
msgstr ""

#: ./docs/8.x/queries.md:214
#: ./docs/9.x/queries.md:220
#: ./docs/10.x/queries.md:220
#: ./docs/11.x/queries.md:238
#: ./docs/master/queries.md:220
#~ msgctxt "P"
#~ msgid "<a name=\"select-statements\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:215
#: ./docs/9.x/queries.md:221
#: ./docs/10.x/queries.md:221
#: ./docs/11.x/queries.md:239
#: ./docs/master/queries.md:221
msgid "Select Statements"
msgstr ""

#: ./docs/8.x/queries.md:217
#: ./docs/9.x/queries.md:223
#: ./docs/10.x/queries.md:223
#: ./docs/11.x/queries.md:241
#: ./docs/master/queries.md:223
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-a-select-clause\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:218
#: ./docs/9.x/queries.md:224
msgid "Specifying A Select Clause"
msgstr ""

#: ./docs/8.x/queries.md:220
#: ./docs/9.x/queries.md:226
#: ./docs/10.x/queries.md:226
#: ./docs/11.x/queries.md:244
#: ./docs/master/queries.md:226
msgid "You may not always want to select all columns from a database table. Using the `select` method, you can specify a custom \"select\" clause for the query:"
msgstr ""

#: ./docs/8.x/queries.md:222
#: ./docs/9.x/queries.md:228
#: ./docs/10.x/queries.md:228
#: ./docs/11.x/queries.md:246
#: ./docs/master/queries.md:228
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')\n"
"            ->select('name', 'email as user_email')\n"
"            ->get();"
msgstr ""

#: ./docs/10.x/queries.md:224
#: ./docs/11.x/queries.md:242
#: ./docs/master/queries.md:224
msgid "Specifying a Select Clause"
msgstr ""

#: ./docs/8.x/queries.md:228
#: ./docs/9.x/queries.md:234
#: ./docs/10.x/queries.md:234
#: ./docs/11.x/queries.md:252
#: ./docs/master/queries.md:234
msgid "The `distinct` method allows you to force the query to return distinct results:"
msgstr ""

#: ./docs/8.x/queries.md:230
#: ./docs/9.x/queries.md:236
#: ./docs/10.x/queries.md:236
#: ./docs/11.x/queries.md:254
#: ./docs/master/queries.md:236
msgid "$users = DB::table('users')->distinct()->get();"
msgstr ""

#: ./docs/8.x/queries.md:232
#: ./docs/9.x/queries.md:238
#: ./docs/10.x/queries.md:238
#: ./docs/11.x/queries.md:256
#: ./docs/master/queries.md:238
msgid "If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the `addSelect` method:"
msgstr ""

#: ./docs/8.x/queries.md:234
#: ./docs/9.x/queries.md:240
#: ./docs/10.x/queries.md:240
#: ./docs/11.x/queries.md:258
#: ./docs/master/queries.md:240
msgid ""
"$query = DB::table('users')->select('name');\n"
"\n"
"$users = $query->addSelect('age')->get();"
msgstr ""

#: ./docs/8.x/queries.md:238
#: ./docs/9.x/queries.md:244
#: ./docs/10.x/queries.md:244
#: ./docs/11.x/queries.md:262
#: ./docs/master/queries.md:244
#~ msgctxt "P"
#~ msgid "<a name=\"raw-expressions\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:239
#: ./docs/9.x/queries.md:245
#: ./docs/10.x/queries.md:245
#: ./docs/11.x/queries.md:263
#: ./docs/master/queries.md:245
msgid "Raw Expressions"
msgstr ""

#: ./docs/8.x/queries.md:241
#: ./docs/9.x/queries.md:247
#: ./docs/10.x/queries.md:247
#: ./docs/11.x/queries.md:265
#: ./docs/master/queries.md:247
msgid "Sometimes you may need to insert an arbitrary string into a query. To create a raw string expression, you may use the `raw` method provided by the `DB` facade:"
msgstr ""

#: ./docs/8.x/queries.md:243
#: ./docs/9.x/queries.md:249
#: ./docs/10.x/queries.md:249
#: ./docs/11.x/queries.md:267
#: ./docs/master/queries.md:249
msgid ""
"$users = DB::table('users')\n"
"             ->select(DB::raw('count(*) as user_count, status'))\n"
"             ->where('status', '<>', 1)\n"
"             ->groupBy('status')\n"
"             ->get();"
msgstr ""

#: ./docs/8.x/queries.md:249
#: ./docs/9.x/queries.md:256
#: ./docs/10.x/queries.md:256
#: ./docs/11.x/queries.md:274
#: ./docs/master/queries.md:256
msgid "Raw statements will be injected into the query as strings, so you should be extremely careful to avoid creating SQL injection vulnerabilities."
msgstr ""

#: ./docs/8.x/queries.md:251
#: ./docs/9.x/queries.md:258
#: ./docs/10.x/queries.md:258
#: ./docs/11.x/queries.md:276
#: ./docs/master/queries.md:258
#~ msgctxt "P"
#~ msgid "<a name=\"raw-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:252
#: ./docs/9.x/queries.md:259
#: ./docs/10.x/queries.md:259
#: ./docs/11.x/queries.md:277
#: ./docs/master/queries.md:259
msgid "Raw Methods"
msgstr ""

#: ./docs/8.x/queries.md:254
#: ./docs/9.x/queries.md:261
#: ./docs/10.x/queries.md:261
#: ./docs/master/queries.md:261
msgid "Instead of using the `DB::raw` method, you may also use the following methods to insert a raw expression into various parts of your query. **Remember, Laravel can not guarantee that any query using raw expressions is protected against SQL injection vulnerabilities.**"
msgstr ""

#: ./docs/8.x/queries.md:256
#: ./docs/9.x/queries.md:263
#: ./docs/10.x/queries.md:263
#: ./docs/11.x/queries.md:281
#: ./docs/master/queries.md:263
#~ msgctxt "P"
#~ msgid "<a name=\"selectraw\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:257
#: ./docs/9.x/queries.md:264
#: ./docs/10.x/queries.md:264
#: ./docs/11.x/queries.md:282
#: ./docs/master/queries.md:264
msgid "`selectRaw`"
msgstr ""

#: ./docs/8.x/queries.md:259
msgid "The `selectRaw` method can be used in place of `addSelect(DB::raw(...))`. This method accepts an optional array of bindings as its second argument:"
msgstr ""

#: ./docs/8.x/queries.md:261
#: ./docs/9.x/queries.md:268
#: ./docs/10.x/queries.md:268
#: ./docs/11.x/queries.md:286
#: ./docs/master/queries.md:268
msgid ""
"$orders = DB::table('orders')\n"
"                ->selectRaw('price * ? as price_with_tax', [1.0825])\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:265
#: ./docs/9.x/queries.md:272
#: ./docs/10.x/queries.md:272
#: ./docs/11.x/queries.md:290
#: ./docs/master/queries.md:272
#~ msgctxt "P"
#~ msgid "<a name=\"whereraw-orwhereraw\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:266
#: ./docs/9.x/queries.md:273
#: ./docs/10.x/queries.md:273
#: ./docs/11.x/queries.md:291
#: ./docs/master/queries.md:273
msgid "`whereRaw / orWhereRaw`"
msgstr ""

#: ./docs/9.x/queries.md:266
#: ./docs/10.x/queries.md:266
#: ./docs/11.x/queries.md:284
#: ./docs/master/queries.md:266
msgid "The `selectRaw` method can be used in place of `addSelect(DB::raw(/* ... */))`. This method accepts an optional array of bindings as its second argument:"
msgstr ""

#: ./docs/8.x/queries.md:268
#: ./docs/9.x/queries.md:275
#: ./docs/10.x/queries.md:275
#: ./docs/11.x/queries.md:293
#: ./docs/master/queries.md:275
msgid "The `whereRaw` and `orWhereRaw` methods can be used to inject a raw \"where\" clause into your query. These methods accept an optional array of bindings as their second argument:"
msgstr ""

#: ./docs/8.x/queries.md:270
#: ./docs/9.x/queries.md:277
#: ./docs/10.x/queries.md:277
#: ./docs/11.x/queries.md:295
#: ./docs/master/queries.md:277
msgid ""
"$orders = DB::table('orders')\n"
"                ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:274
#: ./docs/9.x/queries.md:281
#: ./docs/10.x/queries.md:281
#: ./docs/11.x/queries.md:299
#: ./docs/master/queries.md:281
#~ msgctxt "P"
#~ msgid "<a name=\"havingraw-orhavingraw\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:275
#: ./docs/9.x/queries.md:282
#: ./docs/10.x/queries.md:282
#: ./docs/11.x/queries.md:300
#: ./docs/master/queries.md:282
msgid "`havingRaw / orHavingRaw`"
msgstr ""

#: ./docs/8.x/queries.md:277
#: ./docs/9.x/queries.md:284
#: ./docs/10.x/queries.md:284
#: ./docs/11.x/queries.md:302
#: ./docs/master/queries.md:284
msgid "The `havingRaw` and `orHavingRaw` methods may be used to provide a raw string as the value of the \"having\" clause. These methods accept an optional array of bindings as their second argument:"
msgstr ""

#: ./docs/11.x/queries.md:279
msgid "Instead of using the `DB::raw` method, you may also use the following methods to insert a raw expression into various parts of your query. **Remember, Laravel cannot guarantee that any query using raw expressions is protected against SQL injection vulnerabilities.**"
msgstr ""

#: ./docs/8.x/queries.md:279
#: ./docs/9.x/queries.md:286
#: ./docs/10.x/queries.md:286
#: ./docs/11.x/queries.md:304
#: ./docs/master/queries.md:286
msgid ""
"$orders = DB::table('orders')\n"
"                ->select('department', DB::raw('SUM(price) as total_sales'))\n"
"                ->groupBy('department')\n"
"                ->havingRaw('SUM(price) > ?', [2500])\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:285
#: ./docs/9.x/queries.md:292
#: ./docs/10.x/queries.md:292
#: ./docs/11.x/queries.md:310
#: ./docs/master/queries.md:292
#~ msgctxt "P"
#~ msgid "<a name=\"orderbyraw\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:286
#: ./docs/9.x/queries.md:293
#: ./docs/10.x/queries.md:293
#: ./docs/11.x/queries.md:311
#: ./docs/master/queries.md:293
msgid "`orderByRaw`"
msgstr ""

#: ./docs/8.x/queries.md:288
#: ./docs/9.x/queries.md:295
#: ./docs/10.x/queries.md:295
#: ./docs/11.x/queries.md:313
#: ./docs/master/queries.md:295
msgid "The `orderByRaw` method may be used to provide a raw string as the value of the \"order by\" clause:"
msgstr ""

#: ./docs/8.x/queries.md:290
#: ./docs/9.x/queries.md:297
#: ./docs/10.x/queries.md:297
#: ./docs/11.x/queries.md:315
#: ./docs/master/queries.md:297
msgid ""
"$orders = DB::table('orders')\n"
"                ->orderByRaw('updated_at - created_at DESC')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:294
#: ./docs/9.x/queries.md:301
#: ./docs/10.x/queries.md:301
#: ./docs/11.x/queries.md:319
#: ./docs/master/queries.md:301
#~ msgctxt "P"
#~ msgid "<a name=\"groupbyraw\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:295
#: ./docs/9.x/queries.md:302
#: ./docs/10.x/queries.md:302
#: ./docs/11.x/queries.md:320
#: ./docs/master/queries.md:302
msgid "`groupByRaw`"
msgstr ""

#: ./docs/8.x/queries.md:297
#: ./docs/9.x/queries.md:304
#: ./docs/10.x/queries.md:304
#: ./docs/11.x/queries.md:322
#: ./docs/master/queries.md:304
msgid "The `groupByRaw` method may be used to provide a raw string as the value of the `group by` clause:"
msgstr ""

#: ./docs/8.x/queries.md:299
#: ./docs/9.x/queries.md:306
#: ./docs/10.x/queries.md:306
#: ./docs/11.x/queries.md:324
#: ./docs/master/queries.md:306
msgid ""
"$orders = DB::table('orders')\n"
"                ->select('city', 'state')\n"
"                ->groupByRaw('city, state')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:304
#: ./docs/9.x/queries.md:311
#: ./docs/10.x/queries.md:311
#: ./docs/11.x/queries.md:329
#: ./docs/master/queries.md:311
#~ msgctxt "P"
#~ msgid "<a name=\"joins\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:305
#: ./docs/9.x/queries.md:312
#: ./docs/10.x/queries.md:312
#: ./docs/11.x/queries.md:330
#: ./docs/master/queries.md:312
msgid "Joins"
msgstr ""

#: ./docs/8.x/queries.md:307
#: ./docs/9.x/queries.md:314
#: ./docs/10.x/queries.md:314
#: ./docs/11.x/queries.md:332
#: ./docs/master/queries.md:314
#~ msgctxt "P"
#~ msgid "<a name=\"inner-join-clause\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:308
#: ./docs/9.x/queries.md:315
#: ./docs/10.x/queries.md:315
#: ./docs/11.x/queries.md:333
#: ./docs/master/queries.md:315
msgid "Inner Join Clause"
msgstr ""

#: ./docs/8.x/queries.md:310
#: ./docs/9.x/queries.md:317
#: ./docs/10.x/queries.md:317
#: ./docs/11.x/queries.md:335
#: ./docs/master/queries.md:317
msgid "The query builder may also be used to add join clauses to your queries. To perform a basic \"inner join\", you may use the `join` method on a query builder instance. The first argument passed to the `join` method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. You may even join multiple tables in a single query:"
msgstr ""

#: ./docs/8.x/queries.md:312
#: ./docs/9.x/queries.md:319
#: ./docs/10.x/queries.md:319
#: ./docs/11.x/queries.md:337
#: ./docs/master/queries.md:319
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')\n"
"            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n"
"            ->join('orders', 'users.id', '=', 'orders.user_id')\n"
"            ->select('users.*', 'contacts.phone', 'orders.price')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:320
#: ./docs/9.x/queries.md:327
#: ./docs/10.x/queries.md:327
#: ./docs/11.x/queries.md:345
#: ./docs/master/queries.md:327
#~ msgctxt "P"
#~ msgid "<a name=\"left-join-right-join-clause\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:321
#: ./docs/9.x/queries.md:328
#: ./docs/10.x/queries.md:328
#: ./docs/11.x/queries.md:346
#: ./docs/master/queries.md:328
msgid "Left Join / Right Join Clause"
msgstr ""

#: ./docs/8.x/queries.md:323
#: ./docs/9.x/queries.md:330
#: ./docs/10.x/queries.md:330
#: ./docs/11.x/queries.md:348
#: ./docs/master/queries.md:330
msgid "If you would like to perform a \"left join\" or \"right join\" instead of an \"inner join\", use the `leftJoin` or `rightJoin` methods. These methods have the same signature as the `join` method:"
msgstr ""

#: ./docs/8.x/queries.md:325
#: ./docs/9.x/queries.md:332
#: ./docs/10.x/queries.md:332
#: ./docs/11.x/queries.md:350
#: ./docs/master/queries.md:332
msgid ""
"$users = DB::table('users')\n"
"            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"            ->get();\n"
"\n"
"$users = DB::table('users')\n"
"            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:333
#: ./docs/9.x/queries.md:340
#: ./docs/10.x/queries.md:340
#: ./docs/11.x/queries.md:358
#: ./docs/master/queries.md:340
#~ msgctxt "P"
#~ msgid "<a name=\"cross-join-clause\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:334
#: ./docs/9.x/queries.md:341
#: ./docs/10.x/queries.md:341
#: ./docs/11.x/queries.md:359
#: ./docs/master/queries.md:341
msgid "Cross Join Clause"
msgstr ""

#: ./docs/8.x/queries.md:336
#: ./docs/9.x/queries.md:343
#: ./docs/10.x/queries.md:343
#: ./docs/11.x/queries.md:361
#: ./docs/master/queries.md:343
msgid "You may use the `crossJoin` method to perform a \"cross join\". Cross joins generate a cartesian product between the first table and the joined table:"
msgstr ""

#: ./docs/8.x/queries.md:338
#: ./docs/9.x/queries.md:345
#: ./docs/10.x/queries.md:345
#: ./docs/11.x/queries.md:363
#: ./docs/master/queries.md:345
msgid ""
"$sizes = DB::table('sizes')\n"
"            ->crossJoin('colors')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:342
#: ./docs/9.x/queries.md:349
#: ./docs/10.x/queries.md:349
#: ./docs/11.x/queries.md:367
#: ./docs/master/queries.md:349
#~ msgctxt "P"
#~ msgid "<a name=\"advanced-join-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:343
#: ./docs/9.x/queries.md:350
#: ./docs/10.x/queries.md:350
#: ./docs/11.x/queries.md:368
#: ./docs/master/queries.md:350
msgid "Advanced Join Clauses"
msgstr ""

#: ./docs/8.x/queries.md:345
#: ./docs/9.x/queries.md:352
#: ./docs/10.x/queries.md:352
#: ./docs/11.x/queries.md:370
#: ./docs/master/queries.md:352
msgid "You may also specify more advanced join clauses. To get started, pass a closure as the second argument to the `join` method. The closure will receive a `Illuminate\\Database\\Query\\JoinClause` instance which allows you to specify constraints on the \"join\" clause:"
msgstr ""

#: ./docs/8.x/queries.md:347
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function ($join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n"
"        })\n"
"        ->get();"
msgstr ""

#: ./docs/8.x/queries.md:353
#: ./docs/9.x/queries.md:360
#: ./docs/10.x/queries.md:360
#: ./docs/11.x/queries.md:378
#: ./docs/master/queries.md:360
msgid "If you would like to use a \"where\" clause on your joins, you may use the `where` and `orWhere` methods provided by the `JoinClause` instance. Instead of comparing two columns, these methods will compare the column against a value:"
msgstr ""

#: ./docs/10.x/queries.md:354
#: ./docs/11.x/queries.md:372
#: ./docs/master/queries.md:354
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function (JoinClause $join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')->orOn(/* ... */);\n"
"        })\n"
"        ->get();"
msgstr ""

#: ./docs/9.x/queries.md:354
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function ($join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')->orOn(/* ... */);\n"
"        })\n"
"        ->get();"
msgstr ""

#: ./docs/8.x/queries.md:355
#: ./docs/9.x/queries.md:362
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function ($join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')\n"
"                 ->where('contacts.user_id', '>', 5);\n"
"        })\n"
"        ->get();"
msgstr ""

#: ./docs/10.x/queries.md:362
#: ./docs/11.x/queries.md:380
#: ./docs/master/queries.md:362
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function (JoinClause $join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')\n"
"                 ->where('contacts.user_id', '>', 5);\n"
"        })\n"
"        ->get();"
msgstr ""

#: ./docs/8.x/queries.md:362
#: ./docs/9.x/queries.md:369
#: ./docs/10.x/queries.md:369
#: ./docs/11.x/queries.md:387
#: ./docs/master/queries.md:369
#~ msgctxt "P"
#~ msgid "<a name=\"subquery-joins\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:363
#: ./docs/9.x/queries.md:370
#: ./docs/10.x/queries.md:370
#: ./docs/11.x/queries.md:388
#: ./docs/master/queries.md:370
msgid "Subquery Joins"
msgstr ""

#: ./docs/8.x/queries.md:365
#: ./docs/9.x/queries.md:372
#: ./docs/10.x/queries.md:372
#: ./docs/11.x/queries.md:390
#: ./docs/master/queries.md:372
msgid "You may use the `joinSub`, `leftJoinSub`, and `rightJoinSub` methods to join a query to a subquery. Each of these methods receives three arguments: the subquery, its table alias, and a closure that defines the related columns. In this example, we will retrieve a collection of users where each user record also contains the `created_at` timestamp of the user's most recently published blog post:"
msgstr ""

#: ./docs/8.x/queries.md:367
#: ./docs/9.x/queries.md:374
msgid ""
"$latestPosts = DB::table('posts')\n"
"                   ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n"
"                   ->where('is_published', true)\n"
"                   ->groupBy('user_id');\n"
"\n"
"$users = DB::table('users')\n"
"        ->joinSub($latestPosts, 'latest_posts', function ($join) {\n"
"            $join->on('users.id', '=', 'latest_posts.user_id');\n"
"        })->get();"
msgstr ""

#: ./docs/10.x/queries.md:374
#: ./docs/11.x/queries.md:392
#: ./docs/master/queries.md:374
msgid ""
"$latestPosts = DB::table('posts')\n"
"                   ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n"
"                   ->where('is_published', true)\n"
"                   ->groupBy('user_id');\n"
"\n"
"$users = DB::table('users')\n"
"        ->joinSub($latestPosts, 'latest_posts', function (JoinClause $join) {\n"
"            $join->on('users.id', '=', 'latest_posts.user_id');\n"
"        })->get();"
msgstr ""

#: ./docs/8.x/queries.md:377
#: ./docs/9.x/queries.md:384
#: ./docs/10.x/queries.md:404
#: ./docs/11.x/queries.md:422
#: ./docs/master/queries.md:404
#~ msgctxt "P"
#~ msgid "<a name=\"unions\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:378
#: ./docs/9.x/queries.md:385
#: ./docs/10.x/queries.md:405
#: ./docs/11.x/queries.md:423
#: ./docs/master/queries.md:405
msgid "Unions"
msgstr ""

#: ./docs/8.x/queries.md:380
#: ./docs/9.x/queries.md:387
#: ./docs/10.x/queries.md:407
#: ./docs/11.x/queries.md:425
#: ./docs/master/queries.md:407
msgid "The query builder also provides a convenient method to \"union\" two or more queries together. For example, you may create an initial query and use the `union` method to union it with more queries:"
msgstr ""

#: ./docs/8.x/queries.md:382
#: ./docs/9.x/queries.md:389
#: ./docs/10.x/queries.md:409
#: ./docs/11.x/queries.md:427
#: ./docs/master/queries.md:409
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$first = DB::table('users')\n"
"            ->whereNull('first_name');\n"
"\n"
"$users = DB::table('users')\n"
"            ->whereNull('last_name')\n"
"            ->union($first)\n"
"            ->get();"
msgstr ""

#: ./docs/10.x/queries.md:384
#: ./docs/11.x/queries.md:402
#: ./docs/master/queries.md:384
#~ msgctxt "P"
#~ msgid "<a name=\"lateral-joins\"></a>"
#~ msgstr ""

#: ./docs/10.x/queries.md:385
#: ./docs/11.x/queries.md:403
#: ./docs/master/queries.md:385
msgid "Lateral Joins"
msgstr ""

#: ./docs/10.x/queries.md:388
#: ./docs/11.x/queries.md:406
#: ./docs/master/queries.md:388
msgid "Lateral joins are currently supported by PostgreSQL, MySQL >= 8.0.14, and SQL Server."
msgstr ""

#: ./docs/10.x/queries.md:390
#: ./docs/11.x/queries.md:408
#: ./docs/master/queries.md:390
msgid "You may use the `joinLateral` and `leftJoinLateral` methods to perform a \"lateral join\" with a subquery. Each of these methods receives two arguments: the subquery and its table alias. The join condition(s) should be specified within the `where` clause of the given subquery. Lateral joins are evaluated for each row and can reference columns outside the subquery."
msgstr ""

#: ./docs/10.x/queries.md:392
#: ./docs/11.x/queries.md:410
#: ./docs/master/queries.md:392
msgid "In this example, we will retrieve a collection of users as well as the user's three most recent blog posts. Each user can produce up to three rows in the result set: one for each of their most recent blog posts. The join condition is specified with a `whereColumn` clause within the subquery, referencing the current user row:"
msgstr ""

#: ./docs/8.x/queries.md:392
#: ./docs/9.x/queries.md:399
#: ./docs/10.x/queries.md:419
#: ./docs/11.x/queries.md:437
#: ./docs/master/queries.md:419
msgid "In addition to the `union` method, the query builder provides a `unionAll` method. Queries that are combined using the `unionAll` method will not have their duplicate results removed. The `unionAll` method has the same method signature as the `union` method."
msgstr ""

#: ./docs/10.x/queries.md:394
#: ./docs/11.x/queries.md:412
#: ./docs/master/queries.md:394
msgid ""
"$latestPosts = DB::table('posts')\n"
"                   ->select('id as post_id', 'title as post_title', 'created_at as post_created_at')\n"
"                   ->whereColumn('user_id', 'users.id')\n"
"                   ->orderBy('created_at', 'desc')\n"
"                   ->limit(3);\n"
"\n"
"$users = DB::table('users')\n"
"            ->joinLateral($latestPosts, 'latest_posts')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:394
#: ./docs/9.x/queries.md:401
#: ./docs/10.x/queries.md:421
#: ./docs/11.x/queries.md:439
#: ./docs/master/queries.md:421
#~ msgctxt "P"
#~ msgid "<a name=\"basic-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:395
#: ./docs/9.x/queries.md:402
#: ./docs/10.x/queries.md:422
#: ./docs/11.x/queries.md:440
#: ./docs/master/queries.md:422
msgid "Basic Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:397
#: ./docs/9.x/queries.md:404
#: ./docs/10.x/queries.md:424
#: ./docs/11.x/queries.md:442
#: ./docs/master/queries.md:424
#~ msgctxt "P"
#~ msgid "<a name=\"where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:398
#: ./docs/9.x/queries.md:405
#: ./docs/10.x/queries.md:425
#: ./docs/11.x/queries.md:443
#: ./docs/master/queries.md:425
msgid "Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:400
#: ./docs/9.x/queries.md:407
#: ./docs/10.x/queries.md:427
#: ./docs/11.x/queries.md:445
#: ./docs/master/queries.md:427
msgid "You may use the query builder's `where` method to add \"where\" clauses to the query. The most basic call to the `where` method requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database's supported operators. The third argument is the value to compare against the column's value."
msgstr ""

#: ./docs/8.x/queries.md:402
#: ./docs/9.x/queries.md:409
#: ./docs/10.x/queries.md:429
#: ./docs/11.x/queries.md:447
#: ./docs/master/queries.md:429
msgid "For example, the following query retrieves users where the value of the `votes` column is equal to `100` and the value of the `age` column is greater than `35`:"
msgstr ""

#: ./docs/8.x/queries.md:404
#: ./docs/9.x/queries.md:411
#: ./docs/10.x/queries.md:431
#: ./docs/11.x/queries.md:449
#: ./docs/master/queries.md:431
msgid ""
"$users = DB::table('users')\n"
"                ->where('votes', '=', 100)\n"
"                ->where('age', '>', 35)\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:409
#: ./docs/9.x/queries.md:416
#: ./docs/10.x/queries.md:436
#: ./docs/11.x/queries.md:454
#: ./docs/master/queries.md:436
msgid "For convenience, if you want to verify that a column is `=` to a given value, you may pass the value as the second argument to the `where` method. Laravel will assume you would like to use the `=` operator:"
msgstr ""

#: ./docs/8.x/queries.md:411
#: ./docs/9.x/queries.md:418
#: ./docs/10.x/queries.md:438
#: ./docs/11.x/queries.md:456
#: ./docs/master/queries.md:438
msgid "$users = DB::table('users')->where('votes', 100)->get();"
msgstr ""

#: ./docs/8.x/queries.md:413
#: ./docs/9.x/queries.md:420
#: ./docs/10.x/queries.md:440
#: ./docs/11.x/queries.md:458
#: ./docs/master/queries.md:440
msgid "As previously mentioned, you may use any operator that is supported by your database system:"
msgstr ""

#: ./docs/8.x/queries.md:415
#: ./docs/9.x/queries.md:422
#: ./docs/10.x/queries.md:442
#: ./docs/11.x/queries.md:460
#: ./docs/master/queries.md:442
msgid ""
"$users = DB::table('users')\n"
"                ->where('votes', '>=', 100)\n"
"                ->get();\n"
"\n"
"$users = DB::table('users')\n"
"                ->where('votes', '<>', 100)\n"
"                ->get();\n"
"\n"
"$users = DB::table('users')\n"
"                ->where('name', 'like', 'T%')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:427
#: ./docs/9.x/queries.md:434
#: ./docs/10.x/queries.md:454
#: ./docs/11.x/queries.md:472
#: ./docs/master/queries.md:454
msgid "You may also pass an array of conditions to the `where` function. Each element of the array should be an array containing the three arguments typically passed to the `where` method:"
msgstr ""

#: ./docs/8.x/queries.md:429
#: ./docs/9.x/queries.md:436
#: ./docs/10.x/queries.md:456
#: ./docs/11.x/queries.md:474
#: ./docs/master/queries.md:456
msgid ""
"$users = DB::table('users')->where([\n"
"    ['status', '=', '1'],\n"
"    ['subscribed', '<>', '1'],\n"
"])->get();"
msgstr ""

#: ./docs/8.x/queries.md:436
#: ./docs/9.x/queries.md:444
#: ./docs/10.x/queries.md:464
#: ./docs/11.x/queries.md:485
#: ./docs/master/queries.md:464
#~ msgctxt "P"
#~ msgid "<a name=\"or-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:437
#: ./docs/9.x/queries.md:445
#: ./docs/10.x/queries.md:465
#: ./docs/11.x/queries.md:486
#: ./docs/master/queries.md:465
msgid "Or Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:439
#: ./docs/9.x/queries.md:447
#: ./docs/10.x/queries.md:467
#: ./docs/11.x/queries.md:488
#: ./docs/master/queries.md:467
msgid "When chaining together calls to the query builder's `where` method, the \"where\" clauses will be joined together using the `and` operator. However, you may use the `orWhere` method to join a clause to the query using the `or` operator. The `orWhere` method accepts the same arguments as the `where` method:"
msgstr ""

#: ./docs/8.x/queries.md:441
#: ./docs/9.x/queries.md:449
#: ./docs/10.x/queries.md:469
#: ./docs/11.x/queries.md:490
#: ./docs/master/queries.md:469
msgid ""
"$users = DB::table('users')\n"
"                    ->where('votes', '>', 100)\n"
"                    ->orWhere('name', 'John')\n"
"                    ->get();"
msgstr ""

#: ./docs/8.x/queries.md:446
#: ./docs/9.x/queries.md:454
#: ./docs/10.x/queries.md:474
#: ./docs/11.x/queries.md:495
#: ./docs/master/queries.md:474
msgid "If you need to group an \"or\" condition within parentheses, you may pass a closure as the first argument to the `orWhere` method:"
msgstr ""

#: ./docs/8.x/queries.md:448
#: ./docs/9.x/queries.md:456
msgid ""
"$users = DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->orWhere(function($query) {\n"
"                $query->where('name', 'Abigail')\n"
"                      ->where('votes', '>', 50);\n"
"            })\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:456
#: ./docs/9.x/queries.md:464
#: ./docs/9.x/queries.md:571
#: ./docs/10.x/queries.md:484
#: ./docs/10.x/queries.md:638
#: ./docs/11.x/queries.md:505
#: ./docs/11.x/queries.md:689
#: ./docs/master/queries.md:484
#: ./docs/master/queries.md:638
msgid "The example above will produce the following SQL:"
msgstr ""

#: ./docs/8.x/queries.md:458
#: ./docs/9.x/queries.md:466
#: ./docs/10.x/queries.md:486
#: ./docs/11.x/queries.md:507
#: ./docs/master/queries.md:486
msgid "select * from users where votes > 100 or (name = 'Abigail' and votes > 50)"
msgstr ""

#: ./docs/8.x/queries.md:462
#: ./docs/8.x/queries.md:617
#: ./docs/9.x/queries.md:471
#: ./docs/9.x/queries.md:672
#: ./docs/10.x/queries.md:491
#: ./docs/10.x/queries.md:739
#: ./docs/11.x/queries.md:512
#: ./docs/11.x/queries.md:820
#: ./docs/master/queries.md:491
#: ./docs/master/queries.md:739
msgid "You should always group `orWhere` calls in order to avoid unexpected behavior when global scopes are applied."
msgstr ""

#: ./docs/8.x/queries.md:464
#: ./docs/9.x/queries.md:485
#: ./docs/10.x/queries.md:552
#: ./docs/11.x/queries.md:596
#: ./docs/master/queries.md:552
#~ msgctxt "P"
#~ msgid "<a name=\"json-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:465
#: ./docs/9.x/queries.md:486
#: ./docs/10.x/queries.md:553
#: ./docs/11.x/queries.md:597
#: ./docs/master/queries.md:553
msgid "JSON Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:467
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 5.7+, PostgreSQL, SQL Server 2016, and SQLite 3.9.0 (with the [JSON1 extension](https://www.sqlite.org/json1.html)). To query a JSON column, use the `->` operator:"
msgstr ""

#: ./docs/8.x/queries.md:469
#: ./docs/9.x/queries.md:490
#: ./docs/10.x/queries.md:557
#: ./docs/11.x/queries.md:601
#: ./docs/master/queries.md:557
msgid ""
"$users = DB::table('users')\n"
"                ->where('preferences->dining->meal', 'salad')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:473
msgid "You may use `whereJsonContains` to query JSON arrays. This feature is not supported by the SQLite database:"
msgstr ""

#: ./docs/9.x/queries.md:473
#: ./docs/10.x/queries.md:493
#: ./docs/11.x/queries.md:514
#: ./docs/master/queries.md:493
#~ msgctxt "P"
#~ msgid "<a name=\"where-not-clauses\"></a>"
#~ msgstr ""

#: ./docs/9.x/queries.md:474
#: ./docs/10.x/queries.md:494
#: ./docs/11.x/queries.md:515
#: ./docs/master/queries.md:494
msgid "Where Not Clauses"
msgstr ""

#: ./docs/8.x/queries.md:475
#: ./docs/9.x/queries.md:496
#: ./docs/10.x/queries.md:563
#: ./docs/11.x/queries.md:607
#: ./docs/master/queries.md:563
msgid ""
"$users = DB::table('users')\n"
"                ->whereJsonContains('options->languages', 'en')\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:476
#: ./docs/11.x/queries.md:497
#: ./docs/master/queries.md:476
msgid ""
"$users = DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->orWhere(function (Builder $query) {\n"
"                $query->where('name', 'Abigail')\n"
"                      ->where('votes', '>', 50);\n"
"            })\n"
"            ->get();"
msgstr ""

#: ./docs/9.x/queries.md:476
#: ./docs/10.x/queries.md:496
#: ./docs/11.x/queries.md:517
#: ./docs/master/queries.md:496
msgid "The `whereNot` and `orWhereNot` methods may be used to negate a given group of query constraints. For example, the following query excludes products that are on clearance or which have a price that is less than ten:"
msgstr ""

#: ./docs/9.x/queries.md:478
msgid ""
"$products = DB::table('products')\n"
"                ->whereNot(function ($query) {\n"
"                    $query->where('clearance', true)\n"
"                          ->orWhere('price', '<', 10);\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:479
#: ./docs/9.x/queries.md:500
#: ./docs/10.x/queries.md:567
#: ./docs/master/queries.md:567
msgid "If your application uses the MySQL or PostgreSQL databases, you may pass an array of values to the `whereJsonContains` method:"
msgstr ""

#: ./docs/8.x/queries.md:481
#: ./docs/9.x/queries.md:502
#: ./docs/10.x/queries.md:569
#: ./docs/11.x/queries.md:613
#: ./docs/master/queries.md:569
msgid ""
"$users = DB::table('users')\n"
"                ->whereJsonContains('options->languages', ['en', 'de'])\n"
"                ->get();"
msgstr ""

#: ./docs/11.x/queries.md:482
msgid ""
"[!WARNING]\n"
"MySQL and MariaDB automatically typecast strings to integers in string-number comparisons. In this process, non-numeric strings are converted to `0`, which can lead to unexpected results. For example, if your table has a `secret` column with a value of `aaa` and you run `User::where('secret', 0)`, that row will be returned. To avoid this, ensure all values are typecast to their appropriate types before using them in queries."
msgstr ""

#: ./docs/8.x/queries.md:485
#: ./docs/9.x/queries.md:506
#: ./docs/10.x/queries.md:573
#: ./docs/11.x/queries.md:617
#: ./docs/master/queries.md:573
msgid "You may use `whereJsonLength` method to query JSON arrays by their length:"
msgstr ""

#: ./docs/8.x/queries.md:487
#: ./docs/9.x/queries.md:508
#: ./docs/10.x/queries.md:575
#: ./docs/11.x/queries.md:619
#: ./docs/master/queries.md:575
msgid ""
"$users = DB::table('users')\n"
"                ->whereJsonLength('options->languages', 0)\n"
"                ->get();\n"
"\n"
"$users = DB::table('users')\n"
"                ->whereJsonLength('options->languages', '>', 1)\n"
"                ->get();"
msgstr ""

#: ./docs/9.x/queries.md:488
#: ./docs/10.x/queries.md:555
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 5.7+, PostgreSQL, SQL Server 2016, and SQLite 3.39.0 (with the [JSON1 extension](https://www.sqlite.org/json1.html)). To query a JSON column, use the `->` operator:"
msgstr ""

#: ./docs/9.x/queries.md:494
msgid "You may use `whereJsonContains` to query JSON arrays. This feature is not supported by SQLite database versions less than 3.38.0:"
msgstr ""

#: ./docs/8.x/queries.md:495
#: ./docs/9.x/queries.md:516
#: ./docs/10.x/queries.md:583
#: ./docs/11.x/queries.md:627
#: ./docs/master/queries.md:583
#~ msgctxt "P"
#~ msgid "<a name=\"additional-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:496
#: ./docs/9.x/queries.md:517
#: ./docs/10.x/queries.md:584
#: ./docs/11.x/queries.md:628
#: ./docs/master/queries.md:584
msgid "Additional Where Clauses"
msgstr ""

#: ./docs/10.x/queries.md:498
#: ./docs/11.x/queries.md:519
#: ./docs/master/queries.md:498
msgid ""
"$products = DB::table('products')\n"
"                ->whereNot(function (Builder $query) {\n"
"                    $query->where('clearance', true)\n"
"                          ->orWhere('price', '<', 10);\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:498
#: ./docs/9.x/queries.md:519
#: ./docs/10.x/queries.md:586
#: ./docs/11.x/queries.md:702
#: ./docs/master/queries.md:586
msgid "**whereBetween / orWhereBetween**"
msgstr ""

#: ./docs/8.x/queries.md:500
#: ./docs/9.x/queries.md:521
#: ./docs/10.x/queries.md:588
#: ./docs/11.x/queries.md:704
#: ./docs/master/queries.md:588
msgid "The `whereBetween` method verifies that a column's value is between two values:"
msgstr ""

#: ./docs/8.x/queries.md:502
#: ./docs/9.x/queries.md:523
#: ./docs/10.x/queries.md:590
#: ./docs/11.x/queries.md:706
#: ./docs/master/queries.md:590
msgid ""
"$users = DB::table('users')\n"
"           ->whereBetween('votes', [1, 100])\n"
"           ->get();"
msgstr ""

#: ./docs/10.x/queries.md:505
#: ./docs/master/queries.md:505
#~ msgctxt "P"
#~ msgid "<a name=\"where-any-all-clauses\"></a>"
#~ msgstr ""

#: ./docs/10.x/queries.md:506
#: ./docs/master/queries.md:506
msgid "Where Any / All Clauses"
msgstr ""

#: ./docs/8.x/queries.md:506
#: ./docs/9.x/queries.md:527
#: ./docs/10.x/queries.md:594
#: ./docs/11.x/queries.md:710
#: ./docs/master/queries.md:594
msgid "**whereNotBetween / orWhereNotBetween**"
msgstr ""

#: ./docs/10.x/queries.md:508
#: ./docs/11.x/queries.md:529
#: ./docs/master/queries.md:508
msgid "Sometimes you may need to apply the same query constraints to multiple columns. For example, you may want to retrieve all records where any columns in a given list are `LIKE` a given value. You may accomplish this using the `whereAny` method:"
msgstr ""

#: ./docs/8.x/queries.md:508
#: ./docs/9.x/queries.md:529
#: ./docs/10.x/queries.md:596
#: ./docs/11.x/queries.md:712
#: ./docs/master/queries.md:596
msgid "The `whereNotBetween` method verifies that a column's value lies outside of two values:"
msgstr ""

#: ./docs/10.x/queries.md:510
#: ./docs/master/queries.md:510
msgid ""
"$users = DB::table('users')\n"
"            ->where('active', true)\n"
"            ->whereAny([\n"
"                'name',\n"
"                'email',\n"
"                'phone',\n"
"            ], 'LIKE', 'Example%')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:510
#: ./docs/9.x/queries.md:531
#: ./docs/10.x/queries.md:598
#: ./docs/11.x/queries.md:714
#: ./docs/master/queries.md:598
msgid ""
"$users = DB::table('users')\n"
"                    ->whereNotBetween('votes', [1, 100])\n"
"                    ->get();"
msgstr ""

#: ./docs/8.x/queries.md:514
#: ./docs/9.x/queries.md:549
#: ./docs/10.x/queries.md:616
#: ./docs/11.x/queries.md:667
#: ./docs/master/queries.md:616
msgid "**whereIn / whereNotIn / orWhereIn / orWhereNotIn**"
msgstr ""

#: ./docs/8.x/queries.md:516
#: ./docs/9.x/queries.md:551
#: ./docs/10.x/queries.md:618
#: ./docs/11.x/queries.md:669
#: ./docs/master/queries.md:618
msgid "The `whereIn` method verifies that a given column's value is contained within the given array:"
msgstr ""

#: ./docs/8.x/queries.md:518
#: ./docs/9.x/queries.md:553
#: ./docs/10.x/queries.md:620
#: ./docs/11.x/queries.md:671
#: ./docs/master/queries.md:620
msgid ""
"$users = DB::table('users')\n"
"                    ->whereIn('id', [1, 2, 3])\n"
"                    ->get();"
msgstr ""

#: ./docs/10.x/queries.md:519
#: ./docs/10.x/queries.md:541
#: ./docs/11.x/queries.md:540
#: ./docs/11.x/queries.md:562
#: ./docs/11.x/queries.md:584
#: ./docs/master/queries.md:519
#: ./docs/master/queries.md:541
msgid "The query above will result in the following SQL:"
msgstr ""

#: ./docs/10.x/queries.md:521
#: ./docs/11.x/queries.md:542
#: ./docs/master/queries.md:521
msgid ""
"SELECT *\n"
"FROM users\n"
"WHERE active = true AND (\n"
"    name LIKE 'Example%' OR\n"
"    email LIKE 'Example%' OR\n"
"    phone LIKE 'Example%'\n"
")"
msgstr ""

#: ./docs/8.x/queries.md:522
#: ./docs/9.x/queries.md:557
#: ./docs/10.x/queries.md:624
#: ./docs/11.x/queries.md:675
#: ./docs/master/queries.md:624
msgid "The `whereNotIn` method verifies that the given column's value is not contained in the given array:"
msgstr ""

#: ./docs/8.x/queries.md:524
#: ./docs/9.x/queries.md:559
#: ./docs/10.x/queries.md:626
#: ./docs/11.x/queries.md:677
#: ./docs/master/queries.md:626
msgid ""
"$users = DB::table('users')\n"
"                    ->whereNotIn('id', [1, 2, 3])\n"
"                    ->get();"
msgstr ""

#: ./docs/11.x/queries.md:526
#~ msgctxt "P"
#~ msgid "<a name=\"where-any-all-none-clauses\"></a>"
#~ msgstr ""

#: ./docs/11.x/queries.md:527
msgid "Where Any / All / None Clauses"
msgstr ""

#: ./docs/8.x/queries.md:528
#: ./docs/9.x/queries.md:582
#: ./docs/10.x/queries.md:649
#: ./docs/11.x/queries.md:700
#: ./docs/master/queries.md:649
msgid "If you are adding a large array of integer bindings to your query, the `whereIntegerInRaw` or `whereIntegerNotInRaw` methods may be used to greatly reduce your memory usage."
msgstr ""

#: ./docs/8.x/queries.md:530
#: ./docs/9.x/queries.md:584
#: ./docs/10.x/queries.md:651
#: ./docs/11.x/queries.md:732
#: ./docs/master/queries.md:651
msgid "**whereNull / whereNotNull / orWhereNull / orWhereNotNull**"
msgstr ""

#: ./docs/10.x/queries.md:531
#: ./docs/11.x/queries.md:552
#: ./docs/master/queries.md:531
msgid "Similarly, the `whereAll` method may be used to retrieve records where all of the given columns match a given constraint:"
msgstr ""

#: ./docs/11.x/queries.md:531
msgid ""
"$users = DB::table('users')\n"
"            ->where('active', true)\n"
"            ->whereAny([\n"
"                'name',\n"
"                'email',\n"
"                'phone',\n"
"            ], 'like', 'Example%')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:532
#: ./docs/9.x/queries.md:586
#: ./docs/10.x/queries.md:653
#: ./docs/11.x/queries.md:734
#: ./docs/master/queries.md:653
msgid "The `whereNull` method verifies that the value of the given column is `NULL`:"
msgstr ""

#: ./docs/10.x/queries.md:533
#: ./docs/master/queries.md:533
msgid ""
"$posts = DB::table('posts')\n"
"            ->where('published', true)\n"
"            ->whereAll([\n"
"                'title',\n"
"                'content',\n"
"            ], 'LIKE', '%Laravel%')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:534
#: ./docs/9.x/queries.md:588
#: ./docs/10.x/queries.md:655
#: ./docs/11.x/queries.md:736
#: ./docs/master/queries.md:655
msgid ""
"$users = DB::table('users')\n"
"                ->whereNull('updated_at')\n"
"                ->get();"
msgstr ""

#: ./docs/9.x/queries.md:535
#: ./docs/10.x/queries.md:602
#: ./docs/11.x/queries.md:718
#: ./docs/master/queries.md:602
msgid "**whereBetweenColumns / whereNotBetweenColumns / orWhereBetweenColumns / orWhereNotBetweenColumns**"
msgstr ""

#: ./docs/9.x/queries.md:537
#: ./docs/10.x/queries.md:604
#: ./docs/11.x/queries.md:720
#: ./docs/master/queries.md:604
msgid "The `whereBetweenColumns` method verifies that a column's value is between the two values of two columns in the same table row:"
msgstr ""

#: ./docs/8.x/queries.md:538
#: ./docs/9.x/queries.md:592
#: ./docs/10.x/queries.md:659
#: ./docs/11.x/queries.md:740
#: ./docs/master/queries.md:659
msgid "The `whereNotNull` method verifies that the column's value is not `NULL`:"
msgstr ""

#: ./docs/9.x/queries.md:539
#: ./docs/10.x/queries.md:606
#: ./docs/11.x/queries.md:722
#: ./docs/master/queries.md:606
msgid ""
"$patients = DB::table('patients')\n"
"                       ->whereBetweenColumns('weight', ['minimum_allowed_weight', 'maximum_allowed_weight'])\n"
"                       ->get();"
msgstr ""

#: ./docs/8.x/queries.md:540
#: ./docs/9.x/queries.md:594
#: ./docs/10.x/queries.md:661
#: ./docs/11.x/queries.md:742
#: ./docs/master/queries.md:661
msgid ""
"$users = DB::table('users')\n"
"                ->whereNotNull('updated_at')\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:543
#: ./docs/11.x/queries.md:564
#: ./docs/master/queries.md:543
msgid ""
"SELECT *\n"
"FROM posts\n"
"WHERE published = true AND (\n"
"    title LIKE '%Laravel%' AND\n"
"    content LIKE '%Laravel%'\n"
")"
msgstr ""

#: ./docs/9.x/queries.md:543
#: ./docs/10.x/queries.md:610
#: ./docs/11.x/queries.md:726
#: ./docs/master/queries.md:610
msgid "The `whereNotBetweenColumns` method verifies that a column's value lies outside the two values of two columns in the same table row:"
msgstr ""

#: ./docs/8.x/queries.md:544
#: ./docs/9.x/queries.md:598
#: ./docs/10.x/queries.md:665
#: ./docs/11.x/queries.md:746
#: ./docs/master/queries.md:665
msgid "**whereDate / whereMonth / whereDay / whereYear / whereTime**"
msgstr ""

#: ./docs/9.x/queries.md:545
#: ./docs/10.x/queries.md:612
#: ./docs/11.x/queries.md:728
#: ./docs/master/queries.md:612
msgid ""
"$patients = DB::table('patients')\n"
"                       ->whereNotBetweenColumns('weight', ['minimum_allowed_weight', 'maximum_allowed_weight'])\n"
"                       ->get();"
msgstr ""

#: ./docs/8.x/queries.md:546
#: ./docs/9.x/queries.md:600
#: ./docs/10.x/queries.md:667
#: ./docs/11.x/queries.md:748
#: ./docs/master/queries.md:667
msgid "The `whereDate` method may be used to compare a column's value against a date:"
msgstr ""

#: ./docs/8.x/queries.md:548
#: ./docs/9.x/queries.md:602
#: ./docs/10.x/queries.md:669
#: ./docs/11.x/queries.md:750
#: ./docs/master/queries.md:669
msgid ""
"$users = DB::table('users')\n"
"                ->whereDate('created_at', '2016-12-31')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:552
#: ./docs/9.x/queries.md:606
#: ./docs/10.x/queries.md:673
#: ./docs/11.x/queries.md:754
#: ./docs/master/queries.md:673
msgid "The `whereMonth` method may be used to compare a column's value against a specific month:"
msgstr ""

#: ./docs/11.x/queries.md:554
msgid ""
"$posts = DB::table('posts')\n"
"            ->where('published', true)\n"
"            ->whereAll([\n"
"                'title',\n"
"                'content',\n"
"            ], 'like', '%Laravel%')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:554
#: ./docs/9.x/queries.md:608
#: ./docs/10.x/queries.md:675
#: ./docs/11.x/queries.md:756
#: ./docs/master/queries.md:675
msgid ""
"$users = DB::table('users')\n"
"                ->whereMonth('created_at', '12')\n"
"                ->get();"
msgstr ""

#: ./docs/master/queries.md:555
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 8.0+, PostgreSQL 12.0+, SQL Server 2017+, and SQLite 3.39.0+ (with the [JSON1 extension](https://www.sqlite.org/json1.html)). To query a JSON column, use the `->` operator:"
msgstr ""

#: ./docs/8.x/queries.md:558
#: ./docs/9.x/queries.md:612
#: ./docs/10.x/queries.md:679
#: ./docs/11.x/queries.md:760
#: ./docs/master/queries.md:679
msgid "The `whereDay` method may be used to compare a column's value against a specific day of the month:"
msgstr ""

#: ./docs/8.x/queries.md:560
#: ./docs/9.x/queries.md:614
#: ./docs/10.x/queries.md:681
#: ./docs/11.x/queries.md:762
#: ./docs/master/queries.md:681
msgid ""
"$users = DB::table('users')\n"
"                ->whereDay('created_at', '31')\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:561
#: ./docs/11.x/queries.md:605
#: ./docs/master/queries.md:561
msgid "You may use `whereJsonContains` to query JSON arrays:"
msgstr ""

#: ./docs/9.x/queries.md:563
#: ./docs/10.x/queries.md:630
#: ./docs/11.x/queries.md:681
#: ./docs/master/queries.md:630
msgid "You may also provide a query object as the `whereIn` method's second argument:"
msgstr ""

#: ./docs/8.x/queries.md:564
#: ./docs/9.x/queries.md:618
#: ./docs/10.x/queries.md:685
#: ./docs/11.x/queries.md:766
#: ./docs/master/queries.md:685
msgid "The `whereYear` method may be used to compare a column's value against a specific year:"
msgstr ""

#: ./docs/9.x/queries.md:565
#: ./docs/10.x/queries.md:632
#: ./docs/11.x/queries.md:683
#: ./docs/master/queries.md:632
msgid ""
"$activeUsers = DB::table('users')->select('id')->where('is_active', 1);\n"
"\n"
"$users = DB::table('comments')\n"
"                    ->whereIn('user_id', $activeUsers)\n"
"                    ->get();"
msgstr ""

#: ./docs/8.x/queries.md:566
#: ./docs/9.x/queries.md:620
#: ./docs/10.x/queries.md:687
#: ./docs/11.x/queries.md:768
#: ./docs/master/queries.md:687
msgid ""
"$users = DB::table('users')\n"
"                ->whereYear('created_at', '2016')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:570
#: ./docs/9.x/queries.md:624
#: ./docs/10.x/queries.md:691
#: ./docs/11.x/queries.md:772
#: ./docs/master/queries.md:691
msgid "The `whereTime` method may be used to compare a column's value against a specific time:"
msgstr ""

#: ./docs/8.x/queries.md:572
#: ./docs/9.x/queries.md:626
#: ./docs/10.x/queries.md:693
#: ./docs/11.x/queries.md:774
#: ./docs/master/queries.md:693
msgid ""
"$users = DB::table('users')\n"
"                ->whereTime('created_at', '=', '11:20:45')\n"
"                ->get();"
msgstr ""

#: ./docs/11.x/queries.md:573
msgid "The `whereNone` method may be used to retrieve records where none of the given columns match a given constraint:"
msgstr ""

#: ./docs/9.x/queries.md:573
#: ./docs/10.x/queries.md:640
#: ./docs/11.x/queries.md:691
#: ./docs/master/queries.md:640
msgid ""
"select * from comments where user_id in (\n"
"    select id\n"
"    from users\n"
"    where is_active = 1\n"
")"
msgstr ""

#: ./docs/11.x/queries.md:575
msgid ""
"$posts = DB::table('albums')\n"
"            ->where('published', true)\n"
"            ->whereNone([\n"
"                'title',\n"
"                'lyrics',\n"
"                'tags',\n"
"            ], 'like', '%explicit%')\n"
"            ->get();"
msgstr ""

#: ./docs/8.x/queries.md:576
#: ./docs/9.x/queries.md:630
#: ./docs/10.x/queries.md:697
#: ./docs/11.x/queries.md:778
#: ./docs/master/queries.md:697
msgid "**whereColumn / orWhereColumn**"
msgstr ""

#: ./docs/8.x/queries.md:578
#: ./docs/9.x/queries.md:632
#: ./docs/10.x/queries.md:699
#: ./docs/11.x/queries.md:780
#: ./docs/master/queries.md:699
msgid "The `whereColumn` method may be used to verify that two columns are equal:"
msgstr ""

#: ./docs/8.x/queries.md:580
#: ./docs/9.x/queries.md:634
#: ./docs/10.x/queries.md:701
#: ./docs/11.x/queries.md:782
#: ./docs/master/queries.md:701
msgid ""
"$users = DB::table('users')\n"
"                ->whereColumn('first_name', 'last_name')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:584
#: ./docs/9.x/queries.md:638
#: ./docs/10.x/queries.md:705
#: ./docs/11.x/queries.md:786
#: ./docs/master/queries.md:705
msgid "You may also pass a comparison operator to the `whereColumn` method:"
msgstr ""

#: ./docs/11.x/queries.md:586
msgid ""
"SELECT *\n"
"FROM albums\n"
"WHERE published = true AND NOT (\n"
"    title LIKE '%explicit%' OR\n"
"    lyrics LIKE '%explicit%' OR\n"
"    tags LIKE '%explicit%'\n"
")"
msgstr ""

#: ./docs/8.x/queries.md:586
#: ./docs/9.x/queries.md:640
#: ./docs/10.x/queries.md:707
#: ./docs/11.x/queries.md:788
#: ./docs/master/queries.md:707
msgid ""
"$users = DB::table('users')\n"
"                ->whereColumn('updated_at', '>', 'created_at')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:590
#: ./docs/9.x/queries.md:644
#: ./docs/10.x/queries.md:711
#: ./docs/11.x/queries.md:792
#: ./docs/master/queries.md:711
msgid "You may also pass an array of column comparisons to the `whereColumn` method. These conditions will be joined using the `and` operator:"
msgstr ""

#: ./docs/8.x/queries.md:592
#: ./docs/9.x/queries.md:646
#: ./docs/10.x/queries.md:713
#: ./docs/11.x/queries.md:794
#: ./docs/master/queries.md:713
msgid ""
"$users = DB::table('users')\n"
"                ->whereColumn([\n"
"                    ['first_name', '=', 'last_name'],\n"
"                    ['updated_at', '>', 'created_at'],\n"
"                ])->get();"
msgstr ""

#: ./docs/8.x/queries.md:598
#: ./docs/9.x/queries.md:652
#: ./docs/10.x/queries.md:719
#: ./docs/11.x/queries.md:800
#: ./docs/master/queries.md:719
#~ msgctxt "P"
#~ msgid "<a name=\"logical-grouping\"></a>"
#~ msgstr ""

#: ./docs/11.x/queries.md:599
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MariaDB 10.3+, MySQL 8.0+, PostgreSQL 12.0+, SQL Server 2017+, and SQLite 3.39.0+. To query a JSON column, use the `->` operator:"
msgstr ""

#: ./docs/8.x/queries.md:599
#: ./docs/9.x/queries.md:653
#: ./docs/10.x/queries.md:720
#: ./docs/11.x/queries.md:801
#: ./docs/master/queries.md:720
msgid "Logical Grouping"
msgstr ""

#: ./docs/8.x/queries.md:601
#: ./docs/9.x/queries.md:655
#: ./docs/10.x/queries.md:722
#: ./docs/11.x/queries.md:803
#: ./docs/master/queries.md:722
msgid "Sometimes you may need to group several \"where\" clauses within parentheses in order to achieve your query's desired logical grouping. In fact, you should generally always group calls to the `orWhere` method in parentheses in order to avoid unexpected query behavior. To accomplish this, you may pass a closure to the `where` method:"
msgstr ""

#: ./docs/8.x/queries.md:603
#: ./docs/9.x/queries.md:657
msgid ""
"$users = DB::table('users')\n"
"           ->where('name', '=', 'John')\n"
"           ->where(function ($query) {\n"
"               $query->where('votes', '>', 100)\n"
"                     ->orWhere('title', '=', 'Admin');\n"
"           })\n"
"           ->get();"
msgstr ""

#: ./docs/11.x/queries.md:611
msgid "If your application uses the MariaDB, MySQL, or PostgreSQL databases, you may pass an array of values to the `whereJsonContains` method:"
msgstr ""

#: ./docs/8.x/queries.md:611
#: ./docs/9.x/queries.md:665
#: ./docs/10.x/queries.md:732
#: ./docs/11.x/queries.md:813
#: ./docs/master/queries.md:732
msgid "As you can see, passing a closure into the `where` method instructs the query builder to begin a constraint group. The closure will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:"
msgstr ""

#: ./docs/8.x/queries.md:613
#: ./docs/9.x/queries.md:667
#: ./docs/10.x/queries.md:734
#: ./docs/11.x/queries.md:815
#: ./docs/master/queries.md:734
msgid "select * from users where name = 'John' and (votes > 100 or title = 'Admin')"
msgstr ""

#: ./docs/8.x/queries.md:619
#: ./docs/9.x/queries.md:674
#: ./docs/10.x/queries.md:741
#: ./docs/11.x/queries.md:822
#: ./docs/master/queries.md:741
#~ msgctxt "P"
#~ msgid "<a name=\"advanced-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:620
#: ./docs/9.x/queries.md:675
#: ./docs/10.x/queries.md:742
#: ./docs/11.x/queries.md:823
#: ./docs/master/queries.md:742
msgid "Advanced Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:622
#: ./docs/9.x/queries.md:677
#: ./docs/10.x/queries.md:744
#: ./docs/11.x/queries.md:825
#: ./docs/master/queries.md:744
#~ msgctxt "P"
#~ msgid "<a name=\"where-exists-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:623
#: ./docs/9.x/queries.md:678
#: ./docs/10.x/queries.md:745
#: ./docs/11.x/queries.md:826
#: ./docs/master/queries.md:745
msgid "Where Exists Clauses"
msgstr ""

#: ./docs/8.x/queries.md:625
#: ./docs/9.x/queries.md:680
#: ./docs/10.x/queries.md:747
#: ./docs/11.x/queries.md:828
#: ./docs/master/queries.md:747
msgid "The `whereExists` method allows you to write \"where exists\" SQL clauses. The `whereExists` method accepts a closure which will receive a query builder instance, allowing you to define the query that should be placed inside of the \"exists\" clause:"
msgstr ""

#: ./docs/8.x/queries.md:627
#: ./docs/9.x/queries.md:682
msgid ""
"$users = DB::table('users')\n"
"           ->whereExists(function ($query) {\n"
"               $query->select(DB::raw(1))\n"
"                     ->from('orders')\n"
"                     ->whereColumn('orders.user_id', 'users.id');\n"
"           })\n"
"           ->get();"
msgstr ""

#: ./docs/11.x/queries.md:630
msgid "**whereLike / orWhereLike / whereNotLike / orWhereNotLike**"
msgstr ""

#: ./docs/11.x/queries.md:632
msgid "The `whereLike` method allows you to add \"LIKE\" clauses to your query for pattern matching. These methods provide a database-agnostic way of performing string matching queries, with the ability to toggle case-sensitivity. By default, string matching is case-insensitive:"
msgstr ""

#: ./docs/11.x/queries.md:634
msgid ""
"$users = DB::table('users')\n"
"           ->whereLike('name', '%John%')\n"
"           ->get();"
msgstr ""

#: ./docs/8.x/queries.md:635
#: ./docs/9.x/queries.md:690
msgid "The query above will produce the following SQL:"
msgstr ""

#: ./docs/8.x/queries.md:637
#: ./docs/9.x/queries.md:692
#: ./docs/10.x/queries.md:769
#: ./docs/11.x/queries.md:850
#: ./docs/master/queries.md:769
msgid ""
"select * from users\n"
"where exists (\n"
"    select 1\n"
"    from orders\n"
"    where orders.user_id = users.id\n"
")"
msgstr ""

#: ./docs/11.x/queries.md:638
msgid "You can enable a case-sensitive search via the `caseSensitive` argument:"
msgstr ""

#: ./docs/11.x/queries.md:640
msgid ""
"$users = DB::table('users')\n"
"           ->whereLike('name', '%John%', caseSensitive: true)\n"
"           ->get();"
msgstr ""

#: ./docs/11.x/queries.md:644
msgid "The `orWhereLike` method allows you to add an \"or\" clause with a LIKE condition:"
msgstr ""

#: ./docs/11.x/queries.md:646
msgid ""
"$users = DB::table('users')\n"
"           ->where('votes', '>', 100)\n"
"           ->orWhereLike('name', '%John%')\n"
"           ->get();"
msgstr ""

#: ./docs/8.x/queries.md:646
#: ./docs/9.x/queries.md:701
#: ./docs/10.x/queries.md:778
#: ./docs/11.x/queries.md:859
#: ./docs/master/queries.md:778
#~ msgctxt "P"
#~ msgid "<a name=\"subquery-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:647
#: ./docs/9.x/queries.md:702
#: ./docs/10.x/queries.md:779
#: ./docs/11.x/queries.md:860
#: ./docs/master/queries.md:779
msgid "Subquery Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:649
#: ./docs/9.x/queries.md:704
#: ./docs/10.x/queries.md:781
#: ./docs/11.x/queries.md:862
#: ./docs/master/queries.md:781
msgid "Sometimes you may need to construct a \"where\" clause that compares the results of a subquery to a given value. You may accomplish this by passing a closure and a value to the `where` method. For example, the following query will retrieve all users who have a recent \"membership\" of a given type;"
msgstr ""

#: ./docs/11.x/queries.md:651
msgid "The `whereNotLike` method allows you to add \"NOT LIKE\" clauses to your query:"
msgstr ""

#: ./docs/8.x/queries.md:651
#: ./docs/9.x/queries.md:706
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where(function ($query) {\n"
"    $query->select('type')\n"
"        ->from('membership')\n"
"        ->whereColumn('membership.user_id', 'users.id')\n"
"        ->orderByDesc('membership.start_date')\n"
"        ->limit(1);\n"
"}, 'Pro')->get();"
msgstr ""

#: ./docs/11.x/queries.md:653
msgid ""
"$users = DB::table('users')\n"
"           ->whereNotLike('name', '%John%')\n"
"           ->get();"
msgstr ""

#: ./docs/11.x/queries.md:657
msgid "Similarly, you can use `orWhereNotLike` to add an \"or\" clause with a NOT LIKE condition:"
msgstr ""

#: ./docs/11.x/queries.md:659
msgid ""
"$users = DB::table('users')\n"
"           ->where('votes', '>', 100)\n"
"           ->orWhereNotLike('name', '%John%')\n"
"           ->get();"
msgstr ""

#: ./docs/8.x/queries.md:661
#: ./docs/9.x/queries.md:716
#: ./docs/10.x/queries.md:794
#: ./docs/11.x/queries.md:875
#: ./docs/master/queries.md:794
msgid "Or, you may need to construct a \"where\" clause that compares a column to the results of a subquery. You may accomplish this by passing a column, operator, and closure to the `where` method. For example, the following query will retrieve all income records where the amount is less than average;"
msgstr ""

#: ./docs/8.x/queries.md:663
#: ./docs/9.x/queries.md:718
msgid ""
"use App\\Models\\Income;\n"
"\n"
"$incomes = Income::where('amount', '<', function ($query) {\n"
"    $query->selectRaw('avg(i.amount)')->from('incomes as i');\n"
"})->get();"
msgstr ""

#: ./docs/11.x/queries.md:665
msgid "The `whereLike` case-sensitive search option is currently not supported on SQL Server."
msgstr ""

#: ./docs/8.x/queries.md:669
#: ./docs/9.x/queries.md:736
#: ./docs/10.x/queries.md:815
#: ./docs/11.x/queries.md:896
#: ./docs/master/queries.md:815
#~ msgctxt "P"
#~ msgid "<a name=\"ordering-grouping-limit-and-offset\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:670
#: ./docs/9.x/queries.md:737
msgid "Ordering, Grouping, Limit & Offset"
msgstr ""

#: ./docs/8.x/queries.md:672
#: ./docs/9.x/queries.md:739
#: ./docs/10.x/queries.md:818
#: ./docs/11.x/queries.md:899
#: ./docs/master/queries.md:818
#~ msgctxt "P"
#~ msgid "<a name=\"ordering\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:673
#: ./docs/9.x/queries.md:740
#: ./docs/10.x/queries.md:819
#: ./docs/11.x/queries.md:900
#: ./docs/master/queries.md:819
msgid "Ordering"
msgstr ""

#: ./docs/8.x/queries.md:675
#: ./docs/9.x/queries.md:742
#: ./docs/10.x/queries.md:821
#: ./docs/11.x/queries.md:902
#: ./docs/master/queries.md:821
#~ msgctxt "P"
#~ msgid "<a name=\"orderby\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:676
#: ./docs/9.x/queries.md:743
#: ./docs/10.x/queries.md:822
#: ./docs/11.x/queries.md:903
#: ./docs/master/queries.md:822
msgid "The `orderBy` Method"
msgstr ""

#: ./docs/8.x/queries.md:678
#: ./docs/9.x/queries.md:745
#: ./docs/10.x/queries.md:824
#: ./docs/11.x/queries.md:905
#: ./docs/master/queries.md:824
msgid "The `orderBy` method allows you to sort the results of the query by a given column. The first argument accepted by the `orderBy` method should be the column you wish to sort by, while the second argument determines the direction of the sort and may be either `asc` or `desc`:"
msgstr ""

#: ./docs/8.x/queries.md:680
#: ./docs/9.x/queries.md:747
#: ./docs/10.x/queries.md:826
#: ./docs/11.x/queries.md:907
#: ./docs/master/queries.md:826
msgid ""
"$users = DB::table('users')\n"
"                ->orderBy('name', 'desc')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:684
#: ./docs/9.x/queries.md:751
#: ./docs/10.x/queries.md:830
#: ./docs/11.x/queries.md:911
#: ./docs/master/queries.md:830
msgid "To sort by multiple columns, you may simply invoke `orderBy` as many times as necessary:"
msgstr ""

#: ./docs/8.x/queries.md:686
#: ./docs/9.x/queries.md:753
#: ./docs/10.x/queries.md:832
#: ./docs/11.x/queries.md:913
#: ./docs/master/queries.md:832
msgid ""
"$users = DB::table('users')\n"
"                ->orderBy('name', 'desc')\n"
"                ->orderBy('email', 'asc')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:691
#: ./docs/9.x/queries.md:758
#: ./docs/10.x/queries.md:837
#: ./docs/11.x/queries.md:918
#: ./docs/master/queries.md:837
#~ msgctxt "P"
#~ msgid "<a name=\"latest-oldest\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:692
#: ./docs/9.x/queries.md:759
msgid "The `latest` & `oldest` Methods"
msgstr ""

#: ./docs/8.x/queries.md:694
#: ./docs/9.x/queries.md:761
#: ./docs/10.x/queries.md:840
#: ./docs/11.x/queries.md:921
#: ./docs/master/queries.md:840
msgid "The `latest` and `oldest` methods allow you to easily order results by date. By default, the result will be ordered by the table's `created_at` column. Or, you may pass the column name that you wish to sort by:"
msgstr ""

#: ./docs/8.x/queries.md:696
#: ./docs/9.x/queries.md:763
#: ./docs/10.x/queries.md:842
#: ./docs/11.x/queries.md:923
#: ./docs/master/queries.md:842
msgid ""
"$user = DB::table('users')\n"
"                ->latest()\n"
"                ->first();"
msgstr ""

#: ./docs/8.x/queries.md:700
#: ./docs/9.x/queries.md:767
#: ./docs/10.x/queries.md:846
#: ./docs/11.x/queries.md:927
#: ./docs/master/queries.md:846
#~ msgctxt "P"
#~ msgid "<a name=\"random-ordering\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:701
#: ./docs/9.x/queries.md:768
#: ./docs/10.x/queries.md:847
#: ./docs/11.x/queries.md:928
#: ./docs/master/queries.md:847
msgid "Random Ordering"
msgstr ""

#: ./docs/8.x/queries.md:703
#: ./docs/9.x/queries.md:770
#: ./docs/10.x/queries.md:849
#: ./docs/11.x/queries.md:930
#: ./docs/master/queries.md:849
msgid "The `inRandomOrder` method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:"
msgstr ""

#: ./docs/8.x/queries.md:705
#: ./docs/9.x/queries.md:772
#: ./docs/10.x/queries.md:851
#: ./docs/11.x/queries.md:932
#: ./docs/master/queries.md:851
msgid ""
"$randomUser = DB::table('users')\n"
"                ->inRandomOrder()\n"
"                ->first();"
msgstr ""

#: ./docs/8.x/queries.md:709
#: ./docs/9.x/queries.md:776
#: ./docs/10.x/queries.md:855
#: ./docs/11.x/queries.md:936
#: ./docs/master/queries.md:855
#~ msgctxt "P"
#~ msgid "<a name=\"removing-existing-orderings\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:710
#: ./docs/9.x/queries.md:777
#: ./docs/10.x/queries.md:856
#: ./docs/11.x/queries.md:937
#: ./docs/master/queries.md:856
msgid "Removing Existing Orderings"
msgstr ""

#: ./docs/8.x/queries.md:712
#: ./docs/9.x/queries.md:779
#: ./docs/10.x/queries.md:858
#: ./docs/11.x/queries.md:939
#: ./docs/master/queries.md:858
msgid "The `reorder` method removes all of the \"order by\" clauses that have previously been applied to the query:"
msgstr ""

#: ./docs/8.x/queries.md:714
#: ./docs/9.x/queries.md:781
#: ./docs/10.x/queries.md:860
#: ./docs/11.x/queries.md:941
#: ./docs/master/queries.md:860
msgid ""
"$query = DB::table('users')->orderBy('name');\n"
"\n"
"$unorderedUsers = $query->reorder()->get();"
msgstr ""

#: ./docs/8.x/queries.md:718
#: ./docs/9.x/queries.md:785
#: ./docs/10.x/queries.md:864
#: ./docs/11.x/queries.md:945
#: ./docs/master/queries.md:864
msgid "You may pass a column and direction when calling the `reorder` method in order to remove all existing \"order by\" clauses and apply an entirely new order to the query:"
msgstr ""

#: ./docs/8.x/queries.md:720
#: ./docs/9.x/queries.md:787
#: ./docs/10.x/queries.md:866
#: ./docs/11.x/queries.md:947
#: ./docs/master/queries.md:866
msgid ""
"$query = DB::table('users')->orderBy('name');\n"
"\n"
"$usersOrderedByEmail = $query->reorder('email', 'desc')->get();"
msgstr ""

#: ./docs/10.x/queries.md:724
#: ./docs/11.x/queries.md:805
#: ./docs/master/queries.md:724
msgid ""
"$users = DB::table('users')\n"
"           ->where('name', '=', 'John')\n"
"           ->where(function (Builder $query) {\n"
"               $query->where('votes', '>', 100)\n"
"                     ->orWhere('title', '=', 'Admin');\n"
"           })\n"
"           ->get();"
msgstr ""

#: ./docs/8.x/queries.md:724
#: ./docs/9.x/queries.md:791
#: ./docs/10.x/queries.md:870
#: ./docs/11.x/queries.md:951
#: ./docs/master/queries.md:870
#~ msgctxt "P"
#~ msgid "<a name=\"grouping\"></a>"
#~ msgstr ""

#: ./docs/9.x/queries.md:724
#: ./docs/10.x/queries.md:803
#: ./docs/11.x/queries.md:884
#: ./docs/master/queries.md:803
#~ msgctxt "P"
#~ msgid "<a name=\"full-text-where-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:725
#: ./docs/9.x/queries.md:792
#: ./docs/10.x/queries.md:871
#: ./docs/11.x/queries.md:952
#: ./docs/master/queries.md:871
msgid "Grouping"
msgstr ""

#: ./docs/9.x/queries.md:725
#: ./docs/10.x/queries.md:804
#: ./docs/11.x/queries.md:885
#: ./docs/master/queries.md:804
msgid "Full Text Where Clauses"
msgstr ""

#: ./docs/8.x/queries.md:727
#: ./docs/9.x/queries.md:794
#: ./docs/10.x/queries.md:873
#: ./docs/11.x/queries.md:954
#: ./docs/master/queries.md:873
#~ msgctxt "P"
#~ msgid "<a name=\"groupby-having\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:728
#: ./docs/9.x/queries.md:795
msgid "The `groupBy` & `having` Methods"
msgstr ""

#: ./docs/9.x/queries.md:728
#: ./docs/10.x/queries.md:807
#: ./docs/master/queries.md:807
msgid "Full text where clauses are currently supported by MySQL and PostgreSQL."
msgstr ""

#: ./docs/8.x/queries.md:730
#: ./docs/9.x/queries.md:797
#: ./docs/10.x/queries.md:876
#: ./docs/11.x/queries.md:957
#: ./docs/master/queries.md:876
msgid "As you might expect, the `groupBy` and `having` methods may be used to group the query results. The `having` method's signature is similar to that of the `where` method:"
msgstr ""

#: ./docs/9.x/queries.md:730
#: ./docs/10.x/queries.md:809
#: ./docs/master/queries.md:809
msgid "The `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MySQL:"
msgstr ""

#: ./docs/8.x/queries.md:732
#: ./docs/9.x/queries.md:799
#: ./docs/10.x/queries.md:878
#: ./docs/11.x/queries.md:959
#: ./docs/master/queries.md:878
msgid ""
"$users = DB::table('users')\n"
"                ->groupBy('account_id')\n"
"                ->having('account_id', '>', 100)\n"
"                ->get();"
msgstr ""

#: ./docs/9.x/queries.md:732
#: ./docs/10.x/queries.md:811
#: ./docs/11.x/queries.md:892
#: ./docs/master/queries.md:811
msgid ""
"$users = DB::table('users')\n"
"           ->whereFullText('bio', 'web developer')\n"
"           ->get();"
msgstr ""

#: ./docs/8.x/queries.md:737
#: ./docs/9.x/queries.md:804
#: ./docs/10.x/queries.md:883
#: ./docs/11.x/queries.md:964
#: ./docs/master/queries.md:883
msgid "You can use the `havingBetween` method to filter the results within a given range:"
msgstr ""

#: ./docs/8.x/queries.md:739
#: ./docs/9.x/queries.md:806
#: ./docs/10.x/queries.md:885
#: ./docs/11.x/queries.md:966
#: ./docs/master/queries.md:885
msgid ""
"$report = DB::table('orders')\n"
"                ->selectRaw('count(id) as number_of_orders, customer_id')\n"
"                ->groupBy('customer_id')\n"
"                ->havingBetween('number_of_orders', [5, 15])\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:745
#: ./docs/9.x/queries.md:812
#: ./docs/10.x/queries.md:891
#: ./docs/11.x/queries.md:972
#: ./docs/master/queries.md:891
msgid "You may pass multiple arguments to the `groupBy` method to group by multiple columns:"
msgstr ""

#: ./docs/8.x/queries.md:747
#: ./docs/9.x/queries.md:814
#: ./docs/10.x/queries.md:893
#: ./docs/11.x/queries.md:974
#: ./docs/master/queries.md:893
msgid ""
"$users = DB::table('users')\n"
"                ->groupBy('first_name', 'status')\n"
"                ->having('account_id', '>', 100)\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:749
#: ./docs/11.x/queries.md:830
#: ./docs/master/queries.md:749
msgid ""
"$users = DB::table('users')\n"
"           ->whereExists(function (Builder $query) {\n"
"               $query->select(DB::raw(1))\n"
"                     ->from('orders')\n"
"                     ->whereColumn('orders.user_id', 'users.id');\n"
"           })\n"
"           ->get();"
msgstr ""

#: ./docs/8.x/queries.md:752
#: ./docs/9.x/queries.md:819
#: ./docs/10.x/queries.md:898
#: ./docs/11.x/queries.md:979
#: ./docs/master/queries.md:898
msgid "To build more advanced `having` statements, see the [`havingRaw`](#raw-methods) method."
msgstr ""

#: ./docs/8.x/queries.md:754
#: ./docs/9.x/queries.md:821
#: ./docs/10.x/queries.md:900
#: ./docs/11.x/queries.md:981
#: ./docs/master/queries.md:900
#~ msgctxt "P"
#~ msgid "<a name=\"limit-and-offset\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:755
#: ./docs/9.x/queries.md:822
msgid "Limit & Offset"
msgstr ""

#: ./docs/10.x/queries.md:757
#: ./docs/11.x/queries.md:838
#: ./docs/master/queries.md:757
msgid "Alternatively, you may provide a query object to the `whereExists` method instead of a closure:"
msgstr ""

#: ./docs/8.x/queries.md:757
#: ./docs/9.x/queries.md:824
#: ./docs/10.x/queries.md:903
#: ./docs/11.x/queries.md:984
#: ./docs/master/queries.md:903
#~ msgctxt "P"
#~ msgid "<a name=\"skip-take\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:758
#: ./docs/9.x/queries.md:825
msgid "The `skip` & `take` Methods"
msgstr ""

#: ./docs/10.x/queries.md:759
#: ./docs/11.x/queries.md:840
#: ./docs/master/queries.md:759
msgid ""
"$orders = DB::table('orders')\n"
"                ->select(DB::raw(1))\n"
"                ->whereColumn('orders.user_id', 'users.id');\n"
"\n"
"$users = DB::table('users')\n"
"                    ->whereExists($orders)\n"
"                    ->get();"
msgstr ""

#: ./docs/8.x/queries.md:760
#: ./docs/9.x/queries.md:827
#: ./docs/10.x/queries.md:906
#: ./docs/11.x/queries.md:987
#: ./docs/master/queries.md:906
msgid "You may use the `skip` and `take` methods to limit the number of results returned from the query or to skip a given number of results in the query:"
msgstr ""

#: ./docs/8.x/queries.md:762
#: ./docs/9.x/queries.md:829
#: ./docs/10.x/queries.md:908
#: ./docs/11.x/queries.md:989
#: ./docs/master/queries.md:908
msgid "$users = DB::table('users')->skip(10)->take(5)->get();"
msgstr ""

#: ./docs/8.x/queries.md:764
#: ./docs/9.x/queries.md:831
#: ./docs/10.x/queries.md:910
#: ./docs/11.x/queries.md:991
#: ./docs/master/queries.md:910
msgid "Alternatively, you may use the `limit` and `offset` methods. These methods are functionally equivalent to the `take` and `skip` methods, respectively:"
msgstr ""

#: ./docs/8.x/queries.md:766
#: ./docs/9.x/queries.md:833
#: ./docs/10.x/queries.md:912
#: ./docs/11.x/queries.md:993
#: ./docs/master/queries.md:912
msgid ""
"$users = DB::table('users')\n"
"                ->offset(10)\n"
"                ->limit(5)\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:767
#: ./docs/11.x/queries.md:848
#: ./docs/master/queries.md:767
msgid "Both of the examples above will produce the following SQL:"
msgstr ""

#: ./docs/8.x/queries.md:771
#: ./docs/9.x/queries.md:838
#: ./docs/10.x/queries.md:917
#: ./docs/11.x/queries.md:998
#: ./docs/master/queries.md:917
#~ msgctxt "P"
#~ msgid "<a name=\"conditional-clauses\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:772
#: ./docs/9.x/queries.md:839
#: ./docs/10.x/queries.md:918
#: ./docs/11.x/queries.md:999
#: ./docs/master/queries.md:918
msgid "Conditional Clauses"
msgstr ""

#: ./docs/8.x/queries.md:774
#: ./docs/9.x/queries.md:841
#: ./docs/10.x/queries.md:920
#: ./docs/11.x/queries.md:1001
#: ./docs/master/queries.md:920
msgid "Sometimes you may want certain query clauses to apply to a query based on another condition. For instance, you may only want to apply a `where` statement if a given input value is present on the incoming HTTP request. You may accomplish this using the `when` method:"
msgstr ""

#: ./docs/8.x/queries.md:776
msgid ""
"$role = $request->input('role');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($role, function ($query, $role) {\n"
"                    return $query->where('role_id', $role);\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:783
#: ./docs/11.x/queries.md:864
#: ./docs/master/queries.md:783
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Query\\Builder;\n"
"\n"
"$users = User::where(function (Builder $query) {\n"
"    $query->select('type')\n"
"        ->from('membership')\n"
"        ->whereColumn('membership.user_id', 'users.id')\n"
"        ->orderByDesc('membership.start_date')\n"
"        ->limit(1);\n"
"}, 'Pro')->get();"
msgstr ""

#: ./docs/8.x/queries.md:784
#: ./docs/9.x/queries.md:851
#: ./docs/10.x/queries.md:930
#: ./docs/11.x/queries.md:1011
#: ./docs/master/queries.md:930
msgid "The `when` method only executes the given closure when the first argument is `true`. If the first argument is `false`, the closure will not be executed. So, in the example above, the closure given to the `when` method will only be invoked if the `role` field is present on the incoming request and evaluates to `true`."
msgstr ""

#: ./docs/8.x/queries.md:786
#: ./docs/9.x/queries.md:853
#: ./docs/10.x/queries.md:932
#: ./docs/11.x/queries.md:1013
#: ./docs/master/queries.md:932
msgid "You may pass another closure as the third argument to the `when` method. This closure will only execute if the first argument evaluates as `false`. To illustrate how this feature may be used, we will use it to configure the default ordering of a query:"
msgstr ""

#: ./docs/8.x/queries.md:788
msgid ""
"$sortByVotes = $request->input('sort_by_votes');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($sortByVotes, function ($query, $sortByVotes) {\n"
"                    return $query->orderBy('votes');\n"
"                }, function ($query) {\n"
"                    return $query->orderBy('name');\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:796
#: ./docs/11.x/queries.md:877
#: ./docs/master/queries.md:796
msgid ""
"use App\\Models\\Income;\n"
"use Illuminate\\Database\\Query\\Builder;\n"
"\n"
"$incomes = Income::where('amount', '<', function (Builder $query) {\n"
"    $query->selectRaw('avg(i.amount)')->from('incomes as i');\n"
"})->get();"
msgstr ""

#: ./docs/8.x/queries.md:798
#: ./docs/9.x/queries.md:865
#: ./docs/10.x/queries.md:944
#: ./docs/11.x/queries.md:1025
#: ./docs/master/queries.md:944
#~ msgctxt "P"
#~ msgid "<a name=\"insert-statements\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:799
#: ./docs/9.x/queries.md:866
#: ./docs/10.x/queries.md:945
#: ./docs/11.x/queries.md:1026
#: ./docs/master/queries.md:945
msgid "Insert Statements"
msgstr ""

#: ./docs/8.x/queries.md:801
#: ./docs/9.x/queries.md:868
#: ./docs/10.x/queries.md:947
#: ./docs/11.x/queries.md:1028
#: ./docs/master/queries.md:947
msgid "The query builder also provides an `insert` method that may be used to insert records into the database table. The `insert` method accepts an array of column names and values:"
msgstr ""

#: ./docs/8.x/queries.md:803
#: ./docs/9.x/queries.md:870
#: ./docs/10.x/queries.md:949
#: ./docs/11.x/queries.md:1030
#: ./docs/master/queries.md:949
msgid ""
"DB::table('users')->insert([\n"
"    'email' => 'kayla@example.com',\n"
"    'votes' => 0\n"
"]);"
msgstr ""

#: ./docs/8.x/queries.md:808
#: ./docs/9.x/queries.md:875
#: ./docs/10.x/queries.md:954
#: ./docs/11.x/queries.md:1035
#: ./docs/master/queries.md:954
msgid "You may insert several records at once by passing an array of arrays. Each array represents a record that should be inserted into the table:"
msgstr ""

#: ./docs/8.x/queries.md:810
#: ./docs/9.x/queries.md:877
#: ./docs/10.x/queries.md:956
#: ./docs/11.x/queries.md:1037
#: ./docs/master/queries.md:956
msgid ""
"DB::table('users')->insert([\n"
"    ['email' => 'picard@example.com', 'votes' => 0],\n"
"    ['email' => 'janeway@example.com', 'votes' => 0],\n"
"]);"
msgstr ""

#: ./docs/8.x/queries.md:815
msgid "The `insertOrIgnore` method will ignore errors while inserting records into the database:"
msgstr ""

#: ./docs/10.x/queries.md:816
#: ./docs/11.x/queries.md:897
#: ./docs/master/queries.md:816
msgid "Ordering, Grouping, Limit and Offset"
msgstr ""

#: ./docs/8.x/queries.md:817
#: ./docs/9.x/queries.md:884
#: ./docs/10.x/queries.md:963
#: ./docs/11.x/queries.md:1044
#: ./docs/master/queries.md:963
msgid ""
"DB::table('users')->insertOrIgnore([\n"
"    ['id' => 1, 'email' => 'sisko@example.com'],\n"
"    ['id' => 2, 'email' => 'archer@example.com'],\n"
"]);"
msgstr ""

#: ./docs/8.x/queries.md:822
msgid "`insertOrIgnore` will ignore duplicate records and also may ignore other types of errors depending on the database engine. For example, `insertOrIgnore` will [bypass MySQL's strict mode](https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-effect-on-execution)."
msgstr ""

#: ./docs/8.x/queries.md:824
#: ./docs/9.x/queries.md:897
#: ./docs/10.x/queries.md:976
#: ./docs/11.x/queries.md:1057
#: ./docs/master/queries.md:976
#~ msgctxt "P"
#~ msgid "<a name=\"auto-incrementing-ids\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:825
#: ./docs/9.x/queries.md:898
#: ./docs/10.x/queries.md:977
#: ./docs/11.x/queries.md:1058
#: ./docs/master/queries.md:977
msgid "Auto-Incrementing IDs"
msgstr ""

#: ./docs/8.x/queries.md:827
#: ./docs/9.x/queries.md:900
#: ./docs/10.x/queries.md:979
#: ./docs/11.x/queries.md:1060
#: ./docs/master/queries.md:979
msgid "If the table has an auto-incrementing id, use the `insertGetId` method to insert a record and then retrieve the ID:"
msgstr ""

#: ./docs/8.x/queries.md:829
#: ./docs/9.x/queries.md:902
#: ./docs/10.x/queries.md:981
#: ./docs/11.x/queries.md:1062
#: ./docs/master/queries.md:981
msgid ""
"$id = DB::table('users')->insertGetId(\n"
"    ['email' => 'john@example.com', 'votes' => 0]\n"
");"
msgstr ""

#: ./docs/8.x/queries.md:833
#: ./docs/9.x/queries.md:907
#: ./docs/10.x/queries.md:986
#: ./docs/11.x/queries.md:1067
#: ./docs/master/queries.md:986
msgid "When using PostgreSQL the `insertGetId` method expects the auto-incrementing column to be named `id`. If you would like to retrieve the ID from a different \"sequence\", you may pass the column name as the second parameter to the `insertGetId` method."
msgstr ""

#: ./docs/8.x/queries.md:835
#: ./docs/9.x/queries.md:909
#: ./docs/10.x/queries.md:988
#: ./docs/11.x/queries.md:1069
#: ./docs/master/queries.md:988
#~ msgctxt "P"
#~ msgid "<a name=\"upserts\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:836
#: ./docs/9.x/queries.md:910
#: ./docs/10.x/queries.md:989
#: ./docs/11.x/queries.md:1070
#: ./docs/master/queries.md:989
msgid "Upserts"
msgstr ""

#: ./docs/10.x/queries.md:838
#: ./docs/11.x/queries.md:919
#: ./docs/master/queries.md:838
msgid "The `latest` and `oldest` Methods"
msgstr ""

#: ./docs/8.x/queries.md:838
#: ./docs/9.x/queries.md:912
#: ./docs/10.x/queries.md:991
#: ./docs/11.x/queries.md:1072
#: ./docs/master/queries.md:991
msgid "The `upsert` method will insert records that do not exist and update the records that already exist with new values that you may specify. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of columns that should be updated if a matching record already exists in the database:"
msgstr ""

#: ./docs/8.x/queries.md:840
msgid ""
"DB::table('flights')->upsert([\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"], ['departure', 'destination'], ['price']);"
msgstr ""

#: ./docs/9.x/queries.md:843
msgid ""
"$role = $request->input('role');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($role, function ($query, $role) {\n"
"                    $query->where('role_id', $role);\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:845
#: ./docs/9.x/queries.md:923
#: ./docs/10.x/queries.md:1002
#: ./docs/11.x/queries.md:1083
#: ./docs/master/queries.md:1002
msgid "In the example above, Laravel will attempt to insert two records. If a record already exists with the same `departure` and `destination` column values, Laravel will update that record's `price` column."
msgstr ""

#: ./docs/8.x/queries.md:847
#: ./docs/9.x/queries.md:926
#: ./docs/10.x/queries.md:1005
#: ./docs/master/queries.md:1005
msgid "All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MySQL database driver ignores the second argument of the `upsert` method and always uses the \"primary\" and \"unique\" indexes of the table to detect existing records."
msgstr ""

#: ./docs/8.x/queries.md:849
#: ./docs/9.x/queries.md:928
#: ./docs/10.x/queries.md:1007
#: ./docs/11.x/queries.md:1088
#: ./docs/master/queries.md:1007
#~ msgctxt "P"
#~ msgid "<a name=\"update-statements\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:850
#: ./docs/9.x/queries.md:929
#: ./docs/10.x/queries.md:1008
#: ./docs/11.x/queries.md:1089
#: ./docs/master/queries.md:1008
msgid "Update Statements"
msgstr ""

#: ./docs/8.x/queries.md:852
#: ./docs/9.x/queries.md:931
#: ./docs/10.x/queries.md:1010
#: ./docs/11.x/queries.md:1091
#: ./docs/master/queries.md:1010
msgid "In addition to inserting records into the database, the query builder can also update existing records using the `update` method. The `update` method, like the `insert` method, accepts an array of column and value pairs indicating the columns to be updated. The `update` method returns the number of affected rows. You may constrain the `update` query using `where` clauses:"
msgstr ""

#: ./docs/8.x/queries.md:854
#: ./docs/9.x/queries.md:933
#: ./docs/10.x/queries.md:1012
#: ./docs/11.x/queries.md:1093
#: ./docs/master/queries.md:1012
msgid ""
"$affected = DB::table('users')\n"
"              ->where('id', 1)\n"
"              ->update(['votes' => 1]);"
msgstr ""

#: ./docs/9.x/queries.md:855
msgid ""
"$sortByVotes = $request->input('sort_by_votes');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($sortByVotes, function ($query, $sortByVotes) {\n"
"                    $query->orderBy('votes');\n"
"                }, function ($query) {\n"
"                    $query->orderBy('name');\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:858
#: ./docs/9.x/queries.md:937
#: ./docs/10.x/queries.md:1016
#: ./docs/11.x/queries.md:1097
#: ./docs/master/queries.md:1016
#~ msgctxt "P"
#~ msgid "<a name=\"update-or-insert\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:859
#: ./docs/9.x/queries.md:938
msgid "Update Or Insert"
msgstr ""

#: ./docs/8.x/queries.md:861
#: ./docs/9.x/queries.md:940
#: ./docs/10.x/queries.md:1019
#: ./docs/11.x/queries.md:1100
#: ./docs/master/queries.md:1019
msgid "Sometimes you may want to update an existing record in the database or create it if no matching record exists. In this scenario, the `updateOrInsert` method may be used. The `updateOrInsert` method accepts two arguments: an array of conditions by which to find the record, and an array of column and value pairs indicating the columns to be updated."
msgstr ""

#: ./docs/8.x/queries.md:863
#: ./docs/9.x/queries.md:942
#: ./docs/10.x/queries.md:1021
#: ./docs/master/queries.md:1021
msgid "The `updateOrInsert` method will attempt to locate a matching database record using the first argument's column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record can not be found, a new record will be inserted with the merged attributes of both arguments:"
msgstr ""

#: ./docs/8.x/queries.md:865
#: ./docs/9.x/queries.md:944
#: ./docs/10.x/queries.md:1023
#: ./docs/11.x/queries.md:1104
#: ./docs/master/queries.md:1023
msgid ""
"DB::table('users')\n"
"    ->updateOrInsert(\n"
"        ['email' => 'john@example.com', 'name' => 'John'],\n"
"        ['votes' => '2']\n"
"    );"
msgstr ""

#: ./docs/8.x/queries.md:871
#: ./docs/9.x/queries.md:950
#: ./docs/10.x/queries.md:1029
#: ./docs/11.x/queries.md:1126
#: ./docs/master/queries.md:1029
#~ msgctxt "P"
#~ msgid "<a name=\"updating-json-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:872
#: ./docs/9.x/queries.md:951
#: ./docs/10.x/queries.md:1030
#: ./docs/11.x/queries.md:1127
#: ./docs/master/queries.md:1030
msgid "Updating JSON Columns"
msgstr ""

#: ./docs/10.x/queries.md:874
#: ./docs/11.x/queries.md:955
#: ./docs/master/queries.md:874
msgid "The `groupBy` and `having` Methods"
msgstr ""

#: ./docs/8.x/queries.md:874
#: ./docs/9.x/queries.md:953
#: ./docs/10.x/queries.md:1032
#: ./docs/master/queries.md:1032
msgid "When updating a JSON column, you should use `->` syntax to update the appropriate key in the JSON object. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+:"
msgstr ""

#: ./docs/8.x/queries.md:876
#: ./docs/9.x/queries.md:955
#: ./docs/10.x/queries.md:1034
#: ./docs/11.x/queries.md:1131
#: ./docs/master/queries.md:1034
msgid ""
"$affected = DB::table('users')\n"
"              ->where('id', 1)\n"
"              ->update(['options->enabled' => true]);"
msgstr ""

#: ./docs/8.x/queries.md:880
#: ./docs/9.x/queries.md:959
#: ./docs/10.x/queries.md:1038
#: ./docs/11.x/queries.md:1135
#: ./docs/master/queries.md:1038
#~ msgctxt "P"
#~ msgid "<a name=\"increment-and-decrement\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:881
#: ./docs/9.x/queries.md:960
msgid "Increment & Decrement"
msgstr ""

#: ./docs/9.x/queries.md:882
#: ./docs/10.x/queries.md:961
#: ./docs/11.x/queries.md:1042
#: ./docs/master/queries.md:961
msgid "The `insertOrIgnore` method will ignore errors while inserting records into the database. When using this method, you should be aware that duplicate record errors will be ignored and other types of errors may also be ignored depending on the database engine. For example, `insertOrIgnore` will [bypass MySQL's strict mode](https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-effect-on-execution):"
msgstr ""

#: ./docs/8.x/queries.md:883
#: ./docs/9.x/queries.md:962
#: ./docs/10.x/queries.md:1041
#: ./docs/11.x/queries.md:1138
#: ./docs/master/queries.md:1041
msgid "The query builder also provides convenient methods for incrementing or decrementing the value of a given column. Both of these methods accept at least one argument: the column to modify. A second argument may be provided to specify the amount by which the column should be incremented or decremented:"
msgstr ""

#: ./docs/8.x/queries.md:885
#: ./docs/9.x/queries.md:964
#: ./docs/10.x/queries.md:1043
#: ./docs/11.x/queries.md:1140
#: ./docs/master/queries.md:1043
msgid ""
"DB::table('users')->increment('votes');\n"
"\n"
"DB::table('users')->increment('votes', 5);\n"
"\n"
"DB::table('users')->decrement('votes');\n"
"\n"
"DB::table('users')->decrement('votes', 5);"
msgstr ""

#: ./docs/11.x/queries.md:888
msgid "Full text where clauses are currently supported by MariaDB, MySQL, and PostgreSQL."
msgstr ""

#: ./docs/9.x/queries.md:889
#: ./docs/10.x/queries.md:968
#: ./docs/11.x/queries.md:1049
#: ./docs/master/queries.md:968
msgid "The `insertUsing` method will insert new records into the table while using a subquery to determine the data that should be inserted:"
msgstr ""

#: ./docs/11.x/queries.md:890
msgid "The `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MariaDB or MySQL:"
msgstr ""

#: ./docs/9.x/queries.md:891
#: ./docs/10.x/queries.md:970
#: ./docs/11.x/queries.md:1051
#: ./docs/master/queries.md:970
msgid ""
"DB::table('pruned_users')->insertUsing([\n"
"    'id', 'name', 'email', 'email_verified_at'\n"
"], DB::table('users')->select(\n"
"    'id', 'name', 'email', 'email_verified_at'\n"
")->where('updated_at', '<=', now()->subMonth()));"
msgstr ""

#: ./docs/8.x/queries.md:893
msgid "You may also specify additional columns to update during the operation:"
msgstr ""

#: ./docs/8.x/queries.md:895
#: ./docs/9.x/queries.md:974
#: ./docs/10.x/queries.md:1053
#: ./docs/11.x/queries.md:1150
#: ./docs/master/queries.md:1053
msgid "DB::table('users')->increment('votes', 1, ['name' => 'John']);"
msgstr ""

#: ./docs/8.x/queries.md:897
#: ./docs/9.x/queries.md:983
#: ./docs/10.x/queries.md:1062
#: ./docs/11.x/queries.md:1159
#: ./docs/master/queries.md:1062
#~ msgctxt "P"
#~ msgid "<a name=\"delete-statements\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:898
#: ./docs/9.x/queries.md:984
#: ./docs/10.x/queries.md:1063
#: ./docs/11.x/queries.md:1160
#: ./docs/master/queries.md:1063
msgid "Delete Statements"
msgstr ""

#: ./docs/8.x/queries.md:900
#: ./docs/9.x/queries.md:986
#: ./docs/10.x/queries.md:1065
#: ./docs/11.x/queries.md:1162
#: ./docs/master/queries.md:1065
msgid "The query builder's `delete` method may be used to delete records from the table. The `delete` method returns the number of affected rows. You may constrain `delete` statements by adding \"where\" clauses before calling the `delete` method:"
msgstr ""

#: ./docs/10.x/queries.md:901
#: ./docs/11.x/queries.md:982
#: ./docs/master/queries.md:901
msgid "Limit and Offset"
msgstr ""

#: ./docs/8.x/queries.md:902
#: ./docs/9.x/queries.md:988
#: ./docs/10.x/queries.md:1067
#: ./docs/11.x/queries.md:1164
#: ./docs/master/queries.md:1067
msgid ""
"$deleted = DB::table('users')->delete();\n"
"\n"
"$deleted = DB::table('users')->where('votes', '>', 100)->delete();"
msgstr ""

#: ./docs/10.x/queries.md:904
#: ./docs/11.x/queries.md:985
#: ./docs/master/queries.md:904
msgid "The `skip` and `take` Methods"
msgstr ""

#: ./docs/8.x/queries.md:906
#: ./docs/9.x/queries.md:992
#: ./docs/10.x/queries.md:1071
#: ./docs/11.x/queries.md:1168
#: ./docs/master/queries.md:1071
msgid "If you wish to truncate an entire table, which will remove all records from the table and reset the auto-incrementing ID to zero, you may use the `truncate` method:"
msgstr ""

#: ./docs/8.x/queries.md:908
#: ./docs/9.x/queries.md:994
#: ./docs/10.x/queries.md:1073
#: ./docs/11.x/queries.md:1170
#: ./docs/master/queries.md:1073
msgid "DB::table('users')->truncate();"
msgstr ""

#: ./docs/8.x/queries.md:910
#: ./docs/9.x/queries.md:996
#: ./docs/10.x/queries.md:1075
#: ./docs/11.x/queries.md:1172
#: ./docs/master/queries.md:1075
#~ msgctxt "P"
#~ msgid "<a name=\"table-truncation-and-postgresql\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:911
#: ./docs/9.x/queries.md:997
msgid "Table Truncation & PostgreSQL"
msgstr ""

#: ./docs/8.x/queries.md:913
#: ./docs/9.x/queries.md:999
#: ./docs/10.x/queries.md:1078
#: ./docs/11.x/queries.md:1175
#: ./docs/master/queries.md:1078
msgid "When truncating a PostgreSQL database, the `CASCADE` behavior will be applied. This means that all foreign key related records in other tables will be deleted as well."
msgstr ""

#: ./docs/9.x/queries.md:914
#: ./docs/10.x/queries.md:993
#: ./docs/11.x/queries.md:1074
#: ./docs/master/queries.md:993
msgid ""
"DB::table('flights')->upsert(\n"
"    [\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"    ],\n"
"    ['departure', 'destination'],\n"
"    ['price']\n"
");"
msgstr ""

#: ./docs/8.x/queries.md:915
#: ./docs/9.x/queries.md:1001
#: ./docs/10.x/queries.md:1080
#: ./docs/11.x/queries.md:1177
#: ./docs/master/queries.md:1080
#~ msgctxt "P"
#~ msgid "<a name=\"pessimistic-locking\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:916
#: ./docs/9.x/queries.md:1002
#: ./docs/10.x/queries.md:1081
#: ./docs/11.x/queries.md:1178
#: ./docs/master/queries.md:1081
msgid "Pessimistic Locking"
msgstr ""

#: ./docs/8.x/queries.md:918
#: ./docs/9.x/queries.md:1004
#: ./docs/10.x/queries.md:1083
#: ./docs/11.x/queries.md:1180
#: ./docs/master/queries.md:1083
msgid "The query builder also includes a few functions to help you achieve \"pessimistic locking\" when executing your `select` statements. To execute a statement with a \"shared lock\", you may call the `sharedLock` method. A shared lock prevents the selected rows from being modified until your transaction is committed:"
msgstr ""

#: ./docs/8.x/queries.md:920
#: ./docs/9.x/queries.md:1006
#: ./docs/10.x/queries.md:1085
#: ./docs/11.x/queries.md:1182
#: ./docs/master/queries.md:1085
msgid ""
"DB::table('users')\n"
"        ->where('votes', '>', 100)\n"
"        ->sharedLock()\n"
"        ->get();"
msgstr ""

#: ./docs/10.x/queries.md:922
#: ./docs/master/queries.md:922
msgid ""
"$role = $request->string('role');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($role, function (Builder $query, string $role) {\n"
"                    $query->where('role_id', $role);\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:925
#: ./docs/9.x/queries.md:1011
#: ./docs/10.x/queries.md:1090
#: ./docs/11.x/queries.md:1187
#: ./docs/master/queries.md:1090
msgid "Alternatively, you may use the `lockForUpdate` method. A \"for update\" lock prevents the selected records from being modified or from being selected with another shared lock:"
msgstr ""

#: ./docs/8.x/queries.md:927
#: ./docs/9.x/queries.md:1013
#: ./docs/10.x/queries.md:1092
#: ./docs/11.x/queries.md:1189
#: ./docs/master/queries.md:1092
msgid ""
"DB::table('users')\n"
"        ->where('votes', '>', 100)\n"
"        ->lockForUpdate()\n"
"        ->get();"
msgstr ""

#: ./docs/8.x/queries.md:932
#: ./docs/9.x/queries.md:1018
#: ./docs/10.x/queries.md:1097
#: ./docs/11.x/queries.md:1194
#: ./docs/master/queries.md:1097
#~ msgctxt "P"
#~ msgid "<a name=\"debugging\"></a>"
#~ msgstr ""

#: ./docs/8.x/queries.md:933
#: ./docs/9.x/queries.md:1019
#: ./docs/10.x/queries.md:1098
#: ./docs/11.x/queries.md:1195
#: ./docs/master/queries.md:1098
msgid "Debugging"
msgstr ""

#: ./docs/10.x/queries.md:934
#: ./docs/11.x/queries.md:1015
#: ./docs/master/queries.md:934
msgid ""
"$sortByVotes = $request->boolean('sort_by_votes');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($sortByVotes, function (Builder $query, bool $sortByVotes) {\n"
"                    $query->orderBy('votes');\n"
"                }, function (Builder $query) {\n"
"                    $query->orderBy('name');\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/queries.md:935
#: ./docs/9.x/queries.md:1021
#: ./docs/10.x/queries.md:1100
#: ./docs/11.x/queries.md:1197
#: ./docs/master/queries.md:1100
msgid "You may use the `dd` and `dump` methods while building a query to dump the current query bindings and SQL. The `dd` method will display the debug information and then stop executing the request. The `dump` method will display the debug information but allow the request to continue executing:"
msgstr ""

#: ./docs/8.x/queries.md:937
#: ./docs/9.x/queries.md:1023
#: ./docs/10.x/queries.md:1102
#: ./docs/11.x/queries.md:1199
#: ./docs/master/queries.md:1102
msgid ""
"DB::table('users')->where('votes', '>', 100)->dd();\n"
"\n"
"DB::table('users')->where('votes', '>', 100)->dump();"
msgstr ""

#: ./docs/9.x/queries.md:972
#: ./docs/10.x/queries.md:1051
#: ./docs/11.x/queries.md:1148
#: ./docs/master/queries.md:1051
msgid "If needed, you may also specify additional columns to update during the increment or decrement operation:"
msgstr ""

#: ./docs/9.x/queries.md:976
#: ./docs/10.x/queries.md:1055
#: ./docs/11.x/queries.md:1152
#: ./docs/master/queries.md:1055
msgid "In addition, you may increment or decrement multiple columns at once using the `incrementEach` and `decrementEach` methods:"
msgstr ""

#: ./docs/9.x/queries.md:978
#: ./docs/10.x/queries.md:1057
#: ./docs/11.x/queries.md:1154
#: ./docs/master/queries.md:1057
msgid ""
"DB::table('users')->incrementEach([\n"
"    'votes' => 5,\n"
"    'balance' => 100,\n"
"]);"
msgstr ""

#: ./docs/11.x/queries.md:1003
msgid ""
"$role = $request->input('role');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($role, function (Builder $query, string $role) {\n"
"                    $query->where('role_id', $role);\n"
"                })\n"
"                ->get();"
msgstr ""

#: ./docs/10.x/queries.md:1017
#: ./docs/11.x/queries.md:1098
#: ./docs/master/queries.md:1017
msgid "Update or Insert"
msgstr ""

#: ./docs/10.x/queries.md:1039
#: ./docs/11.x/queries.md:1136
#: ./docs/master/queries.md:1039
msgid "Increment and Decrement"
msgstr ""

#: ./docs/10.x/queries.md:1076
#: ./docs/11.x/queries.md:1173
#: ./docs/master/queries.md:1076
msgid "Table Truncation and PostgreSQL"
msgstr ""

#: ./docs/11.x/queries.md:1086
msgid "All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MariaDB and MySQL database drivers ignore the second argument of the `upsert` method and always use the \"primary\" and \"unique\" indexes of the table to detect existing records."
msgstr ""

#: ./docs/11.x/queries.md:1102
msgid "The `updateOrInsert` method will attempt to locate a matching database record using the first argument's column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record cannot be found, a new record will be inserted with the merged attributes of both arguments:"
msgstr ""

#: ./docs/10.x/queries.md:1106
#: ./docs/11.x/queries.md:1203
#: ./docs/master/queries.md:1106
msgid "The `dumpRawSql` and `ddRawSql` methods may be invoked on a query to dump the query's SQL with all parameter bindings properly substituted:"
msgstr ""

#: ./docs/10.x/queries.md:1108
#: ./docs/11.x/queries.md:1205
#: ./docs/master/queries.md:1108
msgid ""
"DB::table('users')->where('votes', '>', 100)->dumpRawSql();\n"
"\n"
"DB::table('users')->where('votes', '>', 100)->ddRawSql();"
msgstr ""

#: ./docs/11.x/queries.md:1110
msgid "You may provide a closure to the `updateOrInsert` method to customize the attributes that are updated or inserted into the database based on the existence of a matching record:"
msgstr ""

#: ./docs/11.x/queries.md:1112
msgid ""
"DB::table('users')->updateOrInsert(\n"
"    ['user_id' => $user_id],\n"
"    fn ($exists) => $exists ? [\n"
"        'name' => $data['name'],\n"
"        'email' => $data['email'],\n"
"    ] : [\n"
"        'name' => $data['name'],\n"
"        'email' => $data['email'],\n"
"        'marketable' => true,\n"
"    ],\n"
");"
msgstr ""

#: ./docs/11.x/queries.md:1129
msgid "When updating a JSON column, you should use `->` syntax to update the appropriate key in the JSON object. This operation is supported on MariaDB 10.3+, MySQL 5.7+, and PostgreSQL 9.5+:"
msgstr ""
