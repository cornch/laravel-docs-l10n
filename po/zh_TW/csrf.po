msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2023-02-11 10:27\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/csrf.pot\n"
"X-Crowdin-File-ID: 39\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

# H1
#: ./docs/8.x/csrf.md:1
#: ./docs/9.x/csrf.md:1
#: ./docs/10.x/csrf.md:1
#: ./docs/11.x/csrf.md:1
#: ./docs/master/csrf.md:1
msgid "CSRF Protection"
msgstr "CSRF 保護"

# P
#: ./docs/8.x/csrf.md:3
#: ./docs/9.x/csrf.md:3
#: ./docs/10.x/csrf.md:3
#: ./docs/11.x/csrf.md:3
#: ./docs/master/csrf.md:3
msgid "[Introduction](#csrf-introduction)"
msgstr "[簡介](#csrf-introduction)"

# P
#: ./docs/8.x/csrf.md:4
#: ./docs/9.x/csrf.md:4
#: ./docs/10.x/csrf.md:4
#: ./docs/11.x/csrf.md:4
#: ./docs/master/csrf.md:4
msgid "[Preventing CSRF Requests](#preventing-csrf-requests)"
msgstr "[預防 CSRF Request](#preventing-csrf-requests)"

# P
#: ./docs/8.x/csrf.md:5
#: ./docs/9.x/csrf.md:5
#: ./docs/10.x/csrf.md:5
#: ./docs/11.x/csrf.md:5
#: ./docs/master/csrf.md:5
msgid "[Excluding URIs](#csrf-excluding-uris)"
msgstr "[排除 URI](#csrf-excluding-uris)"

# P
#: ./docs/8.x/csrf.md:6
#: ./docs/9.x/csrf.md:6
#: ./docs/10.x/csrf.md:6
#: ./docs/11.x/csrf.md:6
#: ./docs/master/csrf.md:6
msgid "[X-CSRF-Token](#csrf-x-csrf-token)"
msgstr "[X-CSRF-Token](#csrf-x-csrf-token)"

# P
#: ./docs/8.x/csrf.md:7
#: ./docs/9.x/csrf.md:7
#: ./docs/10.x/csrf.md:7
#: ./docs/11.x/csrf.md:7
#: ./docs/master/csrf.md:7
msgid "[X-XSRF-Token](#csrf-x-xsrf-token)"
msgstr "[X-XSRF-Token](#csrf-x-xsrf-token)"

# P
#: ./docs/8.x/csrf.md:9
#: ./docs/9.x/csrf.md:9
#: ./docs/10.x/csrf.md:9
#: ./docs/11.x/csrf.md:9
#: ./docs/master/csrf.md:9
#~ msgid "<a name=\"csrf-introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/csrf.md:10
#: ./docs/9.x/csrf.md:10
#: ./docs/10.x/csrf.md:10
#: ./docs/11.x/csrf.md:10
#: ./docs/master/csrf.md:10
msgid "Introduction"
msgstr "簡介"

# P
#: ./docs/8.x/csrf.md:12
#: ./docs/9.x/csrf.md:12
#: ./docs/10.x/csrf.md:12
#: ./docs/11.x/csrf.md:12
#: ./docs/master/csrf.md:12
msgid "Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user. Thankfully, Laravel makes it easy to protect your application from [cross-site request forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) attacks."
msgstr "CSRF (跨網站要求偽造，Cross-site Request Forgery) 是一種在通過登入使用者來進行未授權操作的惡意入侵方式。還好，Laravel 能讓你輕鬆保護網站免於遭受 [CSRF](https://zh.wikipedia.org/zh-tw/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0) 攻擊。"

# P
#: ./docs/8.x/csrf.md:14
#: ./docs/9.x/csrf.md:14
#: ./docs/10.x/csrf.md:14
#: ./docs/11.x/csrf.md:14
#: ./docs/master/csrf.md:14
#~ msgid "<a name=\"csrf-explanation\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/csrf.md:15
#: ./docs/11.x/csrf.md:15
#: ./docs/master/csrf.md:15
msgid "An Explanation of the Vulnerability"
msgstr ""

# H4
#: ./docs/8.x/csrf.md:15
#: ./docs/9.x/csrf.md:15
msgid "An Explanation Of The Vulnerability"
msgstr "CSRF 弱點說明"

# P
#: ./docs/8.x/csrf.md:17
#: ./docs/9.x/csrf.md:17
#: ./docs/10.x/csrf.md:17
#: ./docs/11.x/csrf.md:17
#: ./docs/master/csrf.md:17
msgid "In case you're not familiar with cross-site request forgeries, let's discuss an example of how this vulnerability can be exploited. Imagine your application has a `/user/email` route that accepts a `POST` request to change the authenticated user's email address. Most likely, this route expects an `email` input field to contain the email address the user would like to begin using."
msgstr "為避免讀者不熟悉 CSRF，我們來討論有關如何入侵該弱點的範例。假設專案中有個 `/user/email` 路由接受 `POST` 請求來修改登入使用者的 E-Mail 位址。顯然，這個路由預期有個 `email` 輸入欄位，其中包含了該使用者要使用的 E-Mail 位址。"

# P
#: ./docs/8.x/csrf.md:19
#: ./docs/9.x/csrf.md:19
#: ./docs/10.x/csrf.md:19
#: ./docs/11.x/csrf.md:19
#: ./docs/master/csrf.md:19
msgid "Without CSRF protection, a malicious website could create an HTML form that points to your application's `/user/email` route and submits the malicious user's own email address:"
msgstr "若沒有 CSRF 保護，某個惡意網站可以建立一個 HTML 表單指向網站的 `/user/email` 路由，並送出假的使用者 E-Mail 位址："

# CODE
# CODE: blade
#: ./docs/8.x/csrf.md:21
#: ./docs/9.x/csrf.md:21
#: ./docs/10.x/csrf.md:21
#: ./docs/11.x/csrf.md:21
#: ./docs/master/csrf.md:21
msgid ""
"<form action=\"https://your-application.com/user/email\" method=\"POST\">\n"
"    <input type=\"email\" value=\"malicious-email@example.com\">\n"
"</form>\n"
"\n"
"<script>\n"
"    document.forms[0].submit();\n"
"</script>"
msgstr ""

# P
#: ./docs/8.x/csrf.md:29
#: ./docs/9.x/csrf.md:31
#: ./docs/10.x/csrf.md:31
#: ./docs/11.x/csrf.md:31
#: ./docs/master/csrf.md:31
msgid "If the malicious website automatically submits the form when the page is loaded, the malicious user only needs to lure an unsuspecting user of your application to visit their website and their email address will be changed in your application."
msgstr " 若這個惡意網站在頁面載入後自動送出該表單，則惡意使用者只需要誘拐某個不經意的使用者瀏覽惡意網站，該使用者的 E-Mail 位址就會被修改。"

# P
#: ./docs/8.x/csrf.md:31
#: ./docs/9.x/csrf.md:33
#: ./docs/10.x/csrf.md:33
#: ./docs/11.x/csrf.md:33
#: ./docs/master/csrf.md:33
msgid "To prevent this vulnerability, we need to inspect every incoming `POST`, `PUT`, `PATCH`, or `DELETE` request for a secret session value that the malicious application is unable to access."
msgstr "為了防止此一弱點，我們需要在所有連入的 `POST`, `PUT`, `PATCH` 或 `DELETE` 請求上檢查某個私密 Session 值，該 Session 值必須是惡意網站無法存取的。"

# P
#: ./docs/8.x/csrf.md:33
#: ./docs/9.x/csrf.md:35
#: ./docs/10.x/csrf.md:35
#: ./docs/11.x/csrf.md:35
#: ./docs/master/csrf.md:35
#~ msgid "<a name=\"preventing-csrf-requests\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/csrf.md:34
#: ./docs/9.x/csrf.md:36
#: ./docs/10.x/csrf.md:36
#: ./docs/11.x/csrf.md:36
#: ./docs/master/csrf.md:36
msgid "Preventing CSRF Requests"
msgstr "防止 CSRF 請求"

# P
#: ./docs/8.x/csrf.md:36
#: ./docs/9.x/csrf.md:38
#: ./docs/10.x/csrf.md:38
#: ./docs/11.x/csrf.md:38
#: ./docs/master/csrf.md:38
msgid "Laravel automatically generates a CSRF \"token\" for each active [user session](/docs/{{version}}/session) managed by the application. This token is used to verify that the authenticated user is the person actually making the requests to the application. Since this token is stored in the user's session and changes each time the session is regenerated, a malicious application is unable to access it."
msgstr "Laravel 會自動為每個有效的[使用者 Session](/docs/{{version}}/session) 產生一個由網站管理的 CSRF「權杖 (Token)」。該權杖會用來認證正在登入的使用者是否真的是實際發起該請求的使用者。由於該權杖儲存於使用者 Session 內，且會在每次 Session 重新產生的時候更改，因此惡意網站無法存取該權杖。"

# P
#: ./docs/8.x/csrf.md:38
#: ./docs/9.x/csrf.md:40
#: ./docs/10.x/csrf.md:40
#: ./docs/11.x/csrf.md:40
#: ./docs/master/csrf.md:40
msgid "The current session's CSRF token can be accessed via the request's session or via the `csrf_token` helper function:"
msgstr "可以通過請求的 Session 或是 `csrf_token` 輔助函式存取目前 Session 的 CSRF 權杖："

# CODE
#: ./docs/8.x/csrf.md:40
#: ./docs/9.x/csrf.md:42
#: ./docs/10.x/csrf.md:42
#: ./docs/11.x/csrf.md:42
#: ./docs/master/csrf.md:42
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/token', function (Request $request) {\n"
"    $token = $request->session()->token();\n"
"\n"
"    $token = csrf_token();\n"
"\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/csrf.md:50
#: ./docs/9.x/csrf.md:52
#: ./docs/10.x/csrf.md:52
#: ./docs/11.x/csrf.md:52
#: ./docs/master/csrf.md:52
msgid "Anytime you define a \"POST\", \"PUT\", \"PATCH\", or \"DELETE\" HTML form in your application, you should include a hidden CSRF `_token` field in the form so that the CSRF protection middleware can validate the request. For convenience, you may use the `@csrf` Blade directive to generate the hidden token input field:"
msgstr "定義 \"POST\", \"PUT\", \"PATCH\", 或是 \"DELETE\" 的 HTML 表單時，應在表單內包含一個隱藏的 CSRF `_token` 欄位以讓 CSRF 保護 Middleware 認證該請求。為了方便起見，可以使用 `@csrf` Blade 指示詞來產生這個隱藏的權杖輸入欄位："

# CODE
# CODE: blade
#: ./docs/8.x/csrf.md:52
#: ./docs/9.x/csrf.md:54
#: ./docs/10.x/csrf.md:54
#: ./docs/11.x/csrf.md:54
#: ./docs/master/csrf.md:54
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"\n"
"    <!-- Equivalent to... -->\n"
"    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n"
"</form>"
msgstr ""

# P
#: ./docs/8.x/csrf.md:59
#: ./docs/9.x/csrf.md:63
#: ./docs/10.x/csrf.md:63
msgid "The `App\\Http\\Middleware\\VerifyCsrfToken` [middleware](/docs/{{version}}/middleware), which is included in the `web` middleware group by default, will automatically verify that the token in the request input matches the token stored in the session. When these two tokens match, we know that the authenticated user is the one initiating the request."
msgstr "預設包含在 `web` Middleware 群組內的 `App\\Http\\Middleware\\VerifyCsrfToken` [Middleware](/docs/{{version}}/middleware) 會自動認證請求內的這個權杖是否符合儲存在 Session 內的權杖。若這兩個權杖相符，則我們就知道是登入使用者執行該請求的。"

# P
#: ./docs/8.x/csrf.md:61
#: ./docs/9.x/csrf.md:65
#: ./docs/10.x/csrf.md:65
#: ./docs/11.x/csrf.md:65
#: ./docs/master/csrf.md:65
#~ msgid "<a name=\"csrf-tokens-and-spas\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/csrf.md:62
#: ./docs/9.x/csrf.md:66
#: ./docs/10.x/csrf.md:66
#: ./docs/11.x/csrf.md:66
#: ./docs/master/csrf.md:66
msgid "CSRF Tokens & SPAs"
msgstr "CSRF 權杖與 SPA"

# P
#: ./docs/11.x/csrf.md:63
#: ./docs/master/csrf.md:63
msgid "The `Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken` [middleware](/docs/{{version}}/middleware), which is included in the `web` middleware group by default, will automatically verify that the token in the request input matches the token stored in the session. When these two tokens match, we know that the authenticated user is the one initiating the request."
msgstr ""

# P
#: ./docs/8.x/csrf.md:64
#: ./docs/11.x/csrf.md:68
msgid "If you are building an SPA that is utilizing Laravel as an API backend, you should consult the [Laravel Sanctum documentation](/docs/{{version}}/sanctum) for information on authenticating with your API and protecting against CSRF vulnerabilities."
msgstr "若正在建立使用 Laravel 作為 API 後端的 SPA，則可以考慮參考 [Laravel Sanctum 說明文件](/docs/{{version}}/sanctum)瞭解有關使用 API 認證與保護 CSRF 弱點的資訊。"

# P
#: ./docs/8.x/csrf.md:66
#: ./docs/9.x/csrf.md:70
#: ./docs/10.x/csrf.md:70
#: ./docs/11.x/csrf.md:70
#: ./docs/master/csrf.md:70
#~ msgid "<a name=\"csrf-excluding-uris\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/csrf.md:67
#: ./docs/9.x/csrf.md:71
#: ./docs/10.x/csrf.md:71
#: ./docs/11.x/csrf.md:71
#: ./docs/master/csrf.md:71
msgid "Excluding URIs From CSRF Protection"
msgstr "自 CSRF 保護內排除 URI"

# P
#: ./docs/9.x/csrf.md:68
#: ./docs/10.x/csrf.md:68
#: ./docs/master/csrf.md:68
msgid "If you are building a SPA that is utilizing Laravel as an API backend, you should consult the [Laravel Sanctum documentation](/docs/{{version}}/sanctum) for information on authenticating with your API and protecting against CSRF vulnerabilities."
msgstr "若正在建立使用 Laravel 作為 API 後端的 SPA，則可以考慮參考 [Laravel Sanctum 說明文件](/docs/{{version}}/sanctum)瞭解有關使用 API 認證與保護 CSRF 弱點的資訊。"

# P
#: ./docs/8.x/csrf.md:69
#: ./docs/9.x/csrf.md:73
#: ./docs/10.x/csrf.md:73
#: ./docs/11.x/csrf.md:73
#: ./docs/master/csrf.md:73
msgid "Sometimes you may wish to exclude a set of URIs from CSRF protection. For example, if you are using [Stripe](https://stripe.com) to process payments and are utilizing their webhook system, you will need to exclude your Stripe webhook handler route from CSRF protection since Stripe will not know what CSRF token to send to your routes."
msgstr "有時候，我們可能會想從 CSRF 保護內排除一些 URI。舉例來說，若正在使用 [Stripe](https://stripe.com) 來處理付款，並使用 Stripe 的 Webhook 系統，則需要將 Stripe Webhook 處理程式的路由從 CSRF 保護內排除，因為 Stripe 並不會知道要傳送什麼 CSRF 權杖給你的路由。"

# P
#: ./docs/8.x/csrf.md:71
#: ./docs/9.x/csrf.md:75
#: ./docs/10.x/csrf.md:75
msgid "Typically, you should place these kinds of routes outside of the `web` middleware group that the `App\\Providers\\RouteServiceProvider` applies to all routes in the `routes/web.php` file. However, you may also exclude the routes by adding their URIs to the `$except` property of the `VerifyCsrfToken` middleware:"
msgstr "通常來說，應將這類路由放在 `web` Middleware 群組外。`App\\Providers\\RouteServiceProvider` 會將所有 `routes/web.php` 內的路由都套用到 `web` Middleware 群組內。不過，也可以通過將這些要排除的 URI 新增到 `VerifyCsrfToken` Middleware 內的 `$except` 屬性來排除這些路由："

# CODE
#: ./docs/8.x/csrf.md:73
#: ./docs/9.x/csrf.md:77
#: ./docs/10.x/csrf.md:77
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;\n"
"\n"
"class VerifyCsrfToken extends Middleware\n"
"{\n"
"    /**\n"
"     * The URIs that should be excluded from CSRF verification.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = [\n"
"        'stripe/*',\n"
"        'http://example.com/foo/bar',\n"
"        'http://example.com/foo/*',\n"
"    ];\n"
"}"
msgstr ""

# P
#: ./docs/11.x/csrf.md:75
#: ./docs/master/csrf.md:75
msgid "Typically, you should place these kinds of routes outside of the `web` middleware group that Laravel applies to all routes in the `routes/web.php` file. However, you may also exclude specific routes by providing their URIs to the `validateCsrfTokens` method in your application's `bootstrap/app.php` file:"
msgstr ""

# CODE
#: ./docs/11.x/csrf.md:77
#: ./docs/master/csrf.md:77
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->validateCsrfTokens(except: [\n"
"        'stripe/*',\n"
"        'http://example.com/foo/bar',\n"
"        'http://example.com/foo/*',\n"
"    ]);\n"
"})"
msgstr ""

# P
#: ./docs/11.x/csrf.md:91
#: ./docs/master/csrf.md:91
msgid "In addition to checking for the CSRF token as a POST parameter, the `Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken` middleware, which is included in the `web` middleware group by default, will also check for the `X-CSRF-TOKEN` request header. You could, for example, store the token in an HTML `meta` tag:"
msgstr ""

# P
#: ./docs/8.x/csrf.md:93
#: ./docs/9.x/csrf.md:98
#: ./docs/10.x/csrf.md:98
#: ./docs/11.x/csrf.md:86
#: ./docs/master/csrf.md:86
msgid "For convenience, the CSRF middleware is automatically disabled for all routes when [running tests](/docs/{{version}}/testing)."
msgstr "為了方便起見，在[執行測試](/docs/{{version}}/testing)時會自動禁用所有路由的 CSRF Middleware。"

# P
#: ./docs/8.x/csrf.md:95
#: ./docs/9.x/csrf.md:100
#: ./docs/10.x/csrf.md:100
#: ./docs/11.x/csrf.md:88
#: ./docs/master/csrf.md:88
#~ msgid "<a name=\"csrf-x-csrf-token\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/csrf.md:96
#: ./docs/9.x/csrf.md:101
#: ./docs/10.x/csrf.md:101
#: ./docs/11.x/csrf.md:89
#: ./docs/master/csrf.md:89
msgid "X-CSRF-TOKEN"
msgstr "X-CSRF-TOKEN"

# P
#: ./docs/8.x/csrf.md:98
#: ./docs/9.x/csrf.md:103
#: ./docs/10.x/csrf.md:103
msgid "In addition to checking for the CSRF token as a POST parameter, the `App\\Http\\Middleware\\VerifyCsrfToken` middleware will also check for the `X-CSRF-TOKEN` request header. You could, for example, store the token in an HTML `meta` tag:"
msgstr "除了使用 POST 參數來檢查 CSRF 權杖外，`App\\Http\\Middleware\\VerifyCsrfToken` Middleware 也會檢查 `X-CSRF-TOKEN` 請求標頭。舉例來說，我們可以將該權杖儲存於 HTML `meta` 標籤內："

# CODE
# CODE: blade
#: ./docs/8.x/csrf.md:100
#: ./docs/9.x/csrf.md:105
#: ./docs/10.x/csrf.md:105
#: ./docs/11.x/csrf.md:93
#: ./docs/master/csrf.md:93
msgid "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">"
msgstr ""

# P
#: ./docs/8.x/csrf.md:102
#: ./docs/9.x/csrf.md:109
#: ./docs/10.x/csrf.md:109
#: ./docs/11.x/csrf.md:97
#: ./docs/master/csrf.md:97
msgid "Then, you can instruct a library like jQuery to automatically add the token to all request headers. This provides simple, convenient CSRF protection for your AJAX based applications using legacy JavaScript technology:"
msgstr "然後，可以讓如 jQuery 之類的函式庫自動將這個權杖加到所有請求標頭上。這樣就可為一些使用老舊 JavaScript 技術的 AJAX 程式提供簡單方便的 CSRF 保護："

# CODE
# CODE: js
#: ./docs/8.x/csrf.md:104
#: ./docs/9.x/csrf.md:111
#: ./docs/10.x/csrf.md:111
#: ./docs/11.x/csrf.md:99
#: ./docs/master/csrf.md:99
msgid ""
"$.ajaxSetup({\n"
"    headers: {\n"
"        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n"
"    }\n"
"});"
msgstr ""

# P
#: ./docs/8.x/csrf.md:110
#: ./docs/9.x/csrf.md:119
#: ./docs/10.x/csrf.md:119
#: ./docs/11.x/csrf.md:107
#: ./docs/master/csrf.md:107
#~ msgid "<a name=\"csrf-x-xsrf-token\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/csrf.md:111
#: ./docs/9.x/csrf.md:120
#: ./docs/10.x/csrf.md:120
#: ./docs/11.x/csrf.md:108
#: ./docs/master/csrf.md:108
msgid "X-XSRF-TOKEN"
msgstr "X-XSRF-TOKEN"

# P
#: ./docs/8.x/csrf.md:113
#: ./docs/9.x/csrf.md:122
#: ./docs/10.x/csrf.md:122
#: ./docs/11.x/csrf.md:110
#: ./docs/master/csrf.md:110
msgid "Laravel stores the current CSRF token in an encrypted `XSRF-TOKEN` cookie that is included with each response generated by the framework. You can use the cookie value to set the `X-XSRF-TOKEN` request header."
msgstr "Laravel 將目前的 CSRF 權杖儲存為加密的 `XSRF-TOKEN` Cookie，會被包含在所有又框架產生的回應內。可以使用這個 Cookie 值來設定 `X-XSRF-TOKEN` 請求標頭。"

# P
#: ./docs/8.x/csrf.md:115
#: ./docs/9.x/csrf.md:124
#: ./docs/10.x/csrf.md:124
#: ./docs/11.x/csrf.md:112
#: ./docs/master/csrf.md:112
msgid "This cookie is primarily sent as a developer convenience since some JavaScript frameworks and libraries, like Angular and Axios, automatically place its value in the `X-XSRF-TOKEN` header on same-origin requests."
msgstr "由於一些 JavaScript 框架如 Angular 與 Axios 會自動在同源請求時將該 Cookie 的值放在 `X-XSRF-TOKEN` 標頭內，該 Cookie 就是為了提供開發者方便而傳送的。"

# P
#: ./docs/8.x/csrf.md:117
#: ./docs/9.x/csrf.md:127
#: ./docs/10.x/csrf.md:127
#: ./docs/11.x/csrf.md:115
#: ./docs/master/csrf.md:115
msgid "By default, the `resources/js/bootstrap.js` file includes the Axios HTTP library which will automatically send the `X-XSRF-TOKEN` header for you."
msgstr "預設情況下，`resources/js/bootstrap.js` 檔案已包含了 Axios HTTP 函式庫，該函式庫會自動為你傳送 `X-XSRF-TOKEN` 標頭。"
