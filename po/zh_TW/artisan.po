msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-02-08 06:32+0000\n"
"PO-Revision-Date: 2022-02-08 07:13\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/artisan.pot\n"
"X-Crowdin-File-ID: 9\n"

# File: docs/8.x/artisan.md, line: 1
# File: docs/9.x/artisan.md, line: 1
# File: docs/master/artisan.md, line: 1
#. type: Title #
#, no-wrap
msgid "Artisan Console"
msgstr "Artisan 主控台"

# File: docs/8.x/artisan.md, line: 24
# File: docs/9.x/artisan.md, line: 24
# File: docs/master/artisan.md, line: 24
#. type: Plain text
#, no-wrap
msgid "- [Introduction](#introduction)\n"
"    - [Tinker (REPL)](#tinker)\n"
"- [Writing Commands](#writing-commands)\n"
"    - [Generating Commands](#generating-commands)\n"
"    - [Command Structure](#command-structure)\n"
"    - [Closure Commands](#closure-commands)\n"
"- [Defining Input Expectations](#defining-input-expectations)\n"
"    - [Arguments](#arguments)\n"
"    - [Options](#options)\n"
"    - [Input Arrays](#input-arrays)\n"
"    - [Input Descriptions](#input-descriptions)\n"
"- [Command I/O](#command-io)\n"
"    - [Retrieving Input](#retrieving-input)\n"
"    - [Prompting For Input](#prompting-for-input)\n"
"    - [Writing Output](#writing-output)\n"
"- [Registering Commands](#registering-commands)\n"
"- [Programmatically Executing Commands](#programmatically-executing-commands)\n"
"    - [Calling Commands From Other Commands](#calling-commands-from-other-commands)\n"
"- [Signal Handling](#signal-handling)\n"
"- [Stub Customization](#stub-customization)\n"
"- [Events](#events)\n"
msgstr "- [簡介](#introduction)\n"
"    - [Tinker (REPL)](#tinker)\n"
"- [撰寫指令](#writing-commands)\n"
"    - [產生指令](#generating-commands)\n"
"    - [指令架構](#command-structure)\n"
"    - [閉包指令](#closure-commands)\n"
"- [定義預期的輸入](#defining-input-expectations)\n"
"    - [引數](#arguments)\n"
"    - [選項](#options)\n"
"    - [輸入陣列](#input-arrays)\n"
"    - [輸入描述](#input-descriptions)\n"
"- [指令 I/O](#command-io)\n"
"    - [截取輸入](#retrieving-input)\n"
"    - [為輸入進行日式](#prompting-for-input)\n"
"    - [撰寫輸出](#writing-output)\n"
"- [註冊指令](#registering-commands)\n"
"- [通過程式碼執行指令](#programmatically-executing-commands)\n"
"    - [在其他指令內執行指令](#calling-commands-from-other-commands)\n"
"- [處理訊號](#signal-handling)\n"
"- [自定 Stub](#stub-customization)\n"
"- [事件](#events)\n"

# File: docs/8.x/artisan.md, line: 26
# File: docs/9.x/artisan.md, line: 26
# File: docs/master/artisan.md, line: 26
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/artisan.md, line: 26
# File: docs/9.x/artisan.md, line: 26
# File: docs/master/artisan.md, line: 26
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/artisan.md, line: 29
# File: docs/9.x/artisan.md, line: 29
# File: docs/master/artisan.md, line: 29
#. type: Plain text
msgid "Artisan is the command line interface included with Laravel. Artisan exists at the root of your application as the `artisan` script and provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the `list` command:"
msgstr "Artisan 是 Laravel 內所包含的指令列界面。Artisan 是放在專案根目錄的 `artisan` 工序指令，提供多種實用指令來幫你撰寫你的專案。若要檢視所有可用的 Artisan 指令，可以使用 `list` 指令："

# File: docs/8.x/artisan.md, line: 31
#. type: Plain text
#, no-wrap
msgid "    php artisan list\n"
msgstr "    php artisan list\n"

# File: docs/8.x/artisan.md, line: 33
# File: docs/9.x/artisan.md, line: 35
# File: docs/master/artisan.md, line: 35
#. type: Plain text
msgid "Every command also includes a \"help\" screen which displays and describes the command's available arguments and options. To view a help screen, precede the name of the command with `help`:"
msgstr "每個指令也包含了一個「help」畫面，用於顯示指令的說明以及可用的引數與選項。若要檢視輔助說明畫面，請在指令名稱的前面加上 `help`："

# File: docs/8.x/artisan.md, line: 35
#. type: Plain text
#, no-wrap
msgid "    php artisan help migrate\n"
msgstr "    php artisan help migrate\n"

# File: docs/8.x/artisan.md, line: 37
# File: docs/9.x/artisan.md, line: 41
# File: docs/master/artisan.md, line: 41
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-sail\"></a>\n"
msgstr "<a name=\"laravel-sail\"></a>\n"

# File: docs/8.x/artisan.md, line: 37
# File: docs/9.x/artisan.md, line: 41
# File: docs/master/artisan.md, line: 41
#. type: Title ####
#, no-wrap
msgid "Laravel Sail"
msgstr "Laravel Sail"

# File: docs/8.x/artisan.md, line: 40
# File: docs/9.x/artisan.md, line: 44
# File: docs/master/artisan.md, line: 44
#. type: Plain text
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail) as your local development environment, remember to use the `sail` command line to invoke Artisan commands. Sail will execute your Artisan commands within your application's Docker containers:"
msgstr "若使用 [Laravel Sail](/docs/{{version}}/sail) 作為本機開發環境，請記得使用 `sail` 指令列來叫用 Artisan 指令。Sail 會在專案的 Docker 容器內執行 Artisan 指令。"

# File: docs/8.x/artisan.md, line: 42
#. type: Plain text
#, no-wrap
msgid "    ./sail artisan list\n"
msgstr "    ./sail artisan list\n"

# File: docs/8.x/artisan.md, line: 44
# File: docs/9.x/artisan.md, line: 50
# File: docs/master/artisan.md, line: 50
#. type: Plain text
#, no-wrap
msgid "<a name=\"tinker\"></a>\n"
msgstr "<a name=\"tinker\"></a>\n"

# File: docs/8.x/artisan.md, line: 44
# File: docs/9.x/artisan.md, line: 50
# File: docs/master/artisan.md, line: 50
#. type: Title ###
#, no-wrap
msgid "Tinker (REPL)"
msgstr "Tinker (REPL)"

# File: docs/8.x/artisan.md, line: 47
# File: docs/9.x/artisan.md, line: 53
# File: docs/master/artisan.md, line: 53
#. type: Plain text
msgid "Laravel Tinker is a powerful REPL for the Laravel framework, powered by the [PsySH](https://github.com/bobthecow/psysh) package."
msgstr "Laravel Tinker 是用於 Laravel 框架的強大 REPL，由 [PsySH](https://github.com/bobthecow/psysh) 套件提供。"

# File: docs/8.x/artisan.md, line: 49
# File: docs/9.x/artisan.md, line: 55
# File: docs/master/artisan.md, line: 55
#. type: Plain text
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr "<a name=\"installation\"></a>\n"

# File: docs/8.x/artisan.md, line: 49
# File: docs/9.x/artisan.md, line: 55
# File: docs/master/artisan.md, line: 55
#. type: Title ####
#, no-wrap
msgid "Installation"
msgstr "安裝"

# File: docs/8.x/artisan.md, line: 52
# File: docs/9.x/artisan.md, line: 58
# File: docs/master/artisan.md, line: 58
#. type: Plain text
msgid "All Laravel applications include Tinker by default. However, you may install Tinker using Composer if you have previously removed it from your application:"
msgstr "所有的 Laravel 專案預設都包含了 Tinker。但若先前曾自專案內移除 Tinker，則可使用 Composer 來安裝："

# File: docs/8.x/artisan.md, line: 54
#. type: Plain text
#, no-wrap
msgid "    composer require laravel/tinker\n"
msgstr "    composer require laravel/tinker\n"

# File: docs/8.x/artisan.md, line: 56
# File: docs/9.x/artisan.md, line: 64
# File: docs/master/artisan.md, line: 64
#. type: Plain text
#, no-wrap
msgid "> {tip} Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!\n"
msgstr "> {tip} 想找個能與你的 Laravel 專案互動的圖形化 UI 嗎？試試 [Tinkerwell](https://tinkerwell.app) 吧！\n"

# File: docs/8.x/artisan.md, line: 58
# File: docs/9.x/artisan.md, line: 66
# File: docs/master/artisan.md, line: 66
#. type: Plain text
#, no-wrap
msgid "<a name=\"usage\"></a>\n"
msgstr "<a name=\"usage\"></a>\n"

# File: docs/8.x/artisan.md, line: 58
# File: docs/9.x/artisan.md, line: 66
# File: docs/master/artisan.md, line: 66
#. type: Title ####
#, no-wrap
msgid "Usage"
msgstr "使用"

# File: docs/8.x/artisan.md, line: 61
# File: docs/9.x/artisan.md, line: 69
# File: docs/master/artisan.md, line: 69
#. type: Plain text
msgid "Tinker allows you to interact with your entire Laravel application on the command line, including your Eloquent models, jobs, events, and more. To enter the Tinker environment, run the `tinker` Artisan command:"
msgstr "Tinker 可讓你在指令列內與完整的 Laravel 專案進行互動，包含 Eloquent Model、任務、事件…等。要進入 Tinker 環境，請執行 `tinker` Artisan 指令："

# File: docs/8.x/artisan.md, line: 63
#. type: Plain text
#, no-wrap
msgid "    php artisan tinker\n"
msgstr "    php artisan tinker\n"

# File: docs/8.x/artisan.md, line: 65
# File: docs/9.x/artisan.md, line: 75
# File: docs/master/artisan.md, line: 75
#. type: Plain text
msgid "You can publish Tinker's configuration file using the `vendor:publish` command:"
msgstr "可以通過 `vendor:publish` 指令來安裝 Tinker 的組態設定檔："

# File: docs/8.x/artisan.md, line: 67
#. type: Plain text
#, no-wrap
msgid "    php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr "    php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"

# File: docs/8.x/artisan.md, line: 69
# File: docs/9.x/artisan.md, line: 81
# File: docs/master/artisan.md, line: 81
#. type: Plain text
#, no-wrap
msgid "> {note} The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs.\n"
msgstr "> {note} `dispatch` 輔助函式與 `Dispatchable` 類別上的 `dispatch` 方法需要仰賴垃圾回收機制來將任務放進佇列中。因此，在使用 Tinker 時，應使用 `Bus::dispatch` 或 `Queue::push` 來分派任務。\n"

# File: docs/8.x/artisan.md, line: 71
# File: docs/9.x/artisan.md, line: 83
# File: docs/master/artisan.md, line: 83
#. type: Plain text
#, no-wrap
msgid "<a name=\"command-allow-list\"></a>\n"
msgstr "<a name=\"command-allow-list\"></a>\n"

# File: docs/8.x/artisan.md, line: 71
# File: docs/9.x/artisan.md, line: 83
# File: docs/master/artisan.md, line: 83
#. type: Title ####
#, no-wrap
msgid "Command Allow List"
msgstr "指令允許列表"

# File: docs/8.x/artisan.md, line: 74
# File: docs/9.x/artisan.md, line: 86
# File: docs/master/artisan.md, line: 86
#. type: Plain text
msgid "Tinker utilizes an \"allow\" list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` commands. If you would like to allow more commands you may add them to the `commands` array in your `tinker.php` configuration file:"
msgstr "Tinker 使用一個「allow」清單來判斷哪些 Artisan 指令可在其 Shell 內執行。預設情況下，可以執行 `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize` 以及 `up` 指令。若想允許更多指令，可以將要允許的指令加在 `tinker.php` 組態設定檔中的 `commands` 陣列內："

# File: docs/8.x/artisan.md, line: 78
# File: docs/9.x/artisan.md, line: 90
# File: docs/master/artisan.md, line: 90
#. type: Plain text
#, no-wrap
msgid "    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"
msgstr "    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"

# File: docs/8.x/artisan.md, line: 80
# File: docs/9.x/artisan.md, line: 92
# File: docs/master/artisan.md, line: 92
#. type: Plain text
#, no-wrap
msgid "<a name=\"classes-that-should-not-be-aliased\"></a>\n"
msgstr "<a name=\"classes-that-should-not-be-aliased\"></a>\n"

# File: docs/8.x/artisan.md, line: 80
# File: docs/9.x/artisan.md, line: 92
# File: docs/master/artisan.md, line: 92
#. type: Title ####
#, no-wrap
msgid "Classes That Should Not Be Aliased"
msgstr "不應以別名使用的類別"

# File: docs/8.x/artisan.md, line: 83
# File: docs/9.x/artisan.md, line: 95
# File: docs/master/artisan.md, line: 95
#. type: Plain text
msgid "Typically, Tinker automatically aliases classes as you interact with them in Tinker. However, you may wish to never alias some classes. You may accomplish this by listing the classes in the `dont_alias` array of your `tinker.php` configuration file:"
msgstr "一般來說，Tinker 會在使用過程中自動為類別加上別名。但有些類別可能不希望被設定別名。可以通過在 `tinker.php` 組態設定檔中的 `dont_alias` 陣列中列出這些不想被自動別名的類別來達成："

# File: docs/8.x/artisan.md, line: 87
# File: docs/9.x/artisan.md, line: 99
# File: docs/master/artisan.md, line: 99
#. type: Plain text
#, no-wrap
msgid "    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"
msgstr "    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"

# File: docs/8.x/artisan.md, line: 89
# File: docs/9.x/artisan.md, line: 101
# File: docs/master/artisan.md, line: 101
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-commands\"></a>\n"
msgstr "<a name=\"writing-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 89
# File: docs/9.x/artisan.md, line: 101
# File: docs/master/artisan.md, line: 101
#. type: Title ##
#, no-wrap
msgid "Writing Commands"
msgstr "撰寫指令"

# File: docs/8.x/artisan.md, line: 92
# File: docs/9.x/artisan.md, line: 104
# File: docs/master/artisan.md, line: 104
#. type: Plain text
msgid "In addition to the commands provided with Artisan, you may build your own custom commands. Commands are typically stored in the `app/Console/Commands` directory; however, you are free to choose your own storage location as long as your commands can be loaded by Composer."
msgstr "除了 Artisan 提供的指令外，也可以建制自己的自定指令。指令通常儲存於 `app/Console/Commands` 目錄內。但是，只要你的自定指令可以被 Composer 載入，也可以自行選擇儲存位置。"

# File: docs/8.x/artisan.md, line: 94
# File: docs/9.x/artisan.md, line: 106
# File: docs/master/artisan.md, line: 106
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-commands\"></a>\n"
msgstr "<a name=\"generating-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 94
# File: docs/9.x/artisan.md, line: 106
# File: docs/master/artisan.md, line: 106
#. type: Title ###
#, no-wrap
msgid "Generating Commands"
msgstr "產生指令"

# File: docs/8.x/artisan.md, line: 97
# File: docs/9.x/artisan.md, line: 109
# File: docs/master/artisan.md, line: 109
#. type: Plain text
msgid "To create a new command, you may use the `make:command` Artisan command. This command will create a new command class in the `app/Console/Commands` directory. Don't worry if this directory does not exist in your application - it will be created the first time you run the `make:command` Artisan command:"
msgstr "若要建立新指令，可以使用 `make:command` Artisan 指令。該指令會在 `app/Console/Commands` 目錄下建立一個新的指令類別。若你的專案中沒有這個資料夾，請別擔心——第一次執行 `make:command` Artisan 指令的時候會自動建立該資料夾："

# File: docs/8.x/artisan.md, line: 99
#. type: Plain text
#, no-wrap
msgid "    php artisan make:command SendEmails\n"
msgstr "    php artisan make:command SendEmails\n"

# File: docs/8.x/artisan.md, line: 101
# File: docs/9.x/artisan.md, line: 115
# File: docs/master/artisan.md, line: 115
#. type: Plain text
#, no-wrap
msgid "<a name=\"command-structure\"></a>\n"
msgstr "<a name=\"command-structure\"></a>\n"

# File: docs/8.x/artisan.md, line: 101
# File: docs/9.x/artisan.md, line: 115
# File: docs/master/artisan.md, line: 115
#. type: Title ###
#, no-wrap
msgid "Command Structure"
msgstr "指令結構"

# File: docs/8.x/artisan.md, line: 104
# File: docs/9.x/artisan.md, line: 118
# File: docs/master/artisan.md, line: 118
#. type: Plain text
msgid "After generating your command, you should define appropriate values for the `signature` and `description` properties of the class. These properties will be used when displaying your command on the `list` screen. The `signature` property also allows you to define [your command's input expectations](#defining-input-expectations). The `handle` method will be called when your command is executed. You may place your command logic in this method."
msgstr "產生指令後，應為類別的 `signature` 與 `description` 屬性定義適當的值。當在 `list` 畫面內顯示該指令時，就會用到這些屬性。`signature` 屬性可以用來定義 [指令預期的輸入](#defining-input-expectations)。`handle` 方法會在執行該指令時呼叫。可以將指令的邏輯放在該方法內。"

# File: docs/8.x/artisan.md, line: 106
# File: docs/9.x/artisan.md, line: 120
# File: docs/master/artisan.md, line: 120
#. type: Plain text
msgid "Let's take a look at an example command. Note that we are able to request any dependencies we need via the command's `handle` method. The Laravel [service container](/docs/{{version}}/container) will automatically inject all dependencies that are type-hinted in this method's signature:"
msgstr "來看看一個範例指令。請注意，我們可以通過指令的 `handle` 方法來要求任意的相依性。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動插入所有在方法簽章內有型別提示的相依性。"

# File: docs/8.x/artisan.md, line: 108
# File: docs/9.x/artisan.md, line: 122
# File: docs/master/artisan.md, line: 122
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/artisan.md, line: 110
# File: docs/9.x/artisan.md, line: 124
# File: docs/master/artisan.md, line: 124
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Console\\Commands;\n"
msgstr "    namespace App\\Console\\Commands;\n"

# File: docs/8.x/artisan.md, line: 114
# File: docs/9.x/artisan.md, line: 128
# File: docs/master/artisan.md, line: 128
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"
msgstr "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"

# File: docs/8.x/artisan.md, line: 123
# File: docs/9.x/artisan.md, line: 137
# File: docs/master/artisan.md, line: 137
#. type: Plain text
#, no-wrap
msgid "    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"
msgstr "    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"

# File: docs/8.x/artisan.md, line: 130
# File: docs/9.x/artisan.md, line: 144
# File: docs/master/artisan.md, line: 144
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"
msgstr "        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"

# File: docs/8.x/artisan.md, line: 140
# File: docs/9.x/artisan.md, line: 154
# File: docs/master/artisan.md, line: 154
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"
msgstr "        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"

# File: docs/8.x/artisan.md, line: 152
# File: docs/9.x/artisan.md, line: 166
# File: docs/master/artisan.md, line: 166
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 154
# File: docs/9.x/artisan.md, line: 168
# File: docs/master/artisan.md, line: 168
#. type: Plain text
#, no-wrap
msgid "> {tip} For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails.\n"
msgstr "> {tip} 為了提升程式碼重複使用率，最好保持主控台指令精簡，並將主要的內容都交給專案中其他服務來完成。在上方的例子中，可以注意到我們插入了一個服務類別 (Service Class) 來處理寄送 E-Mail 的這個「重責大任」。\n"

# File: docs/8.x/artisan.md, line: 156
# File: docs/9.x/artisan.md, line: 170
# File: docs/master/artisan.md, line: 170
#. type: Plain text
#, no-wrap
msgid "<a name=\"closure-commands\"></a>\n"
msgstr "<a name=\"closure-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 156
# File: docs/9.x/artisan.md, line: 170
# File: docs/master/artisan.md, line: 170
#. type: Title ###
#, no-wrap
msgid "Closure Commands"
msgstr "閉包指令"

# File: docs/8.x/artisan.md, line: 159
# File: docs/9.x/artisan.md, line: 173
# File: docs/master/artisan.md, line: 173
#. type: Plain text
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes. Within the `commands` method of your `app/Console/Kernel.php` file, Laravel loads the `routes/console.php` file:"
msgstr "基於閉包的指令提供了以類別定義主控台指令外的另一個選擇。就如同使用閉包來定義路由可用來代替控制器一樣，可以將指令閉包想象成是指令類別的代替。在 `app/Console/Kernel.php` 檔中的 `commands` 方法內，Laravel 載入了 `routes/console.php` 檔："

# File: docs/8.x/artisan.md, line: 169
# File: docs/9.x/artisan.md, line: 183
# File: docs/master/artisan.md, line: 183
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"
msgstr "    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 171
# File: docs/9.x/artisan.md, line: 185
# File: docs/master/artisan.md, line: 185
#. type: Plain text
msgid "Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr "這個檔案並沒有定義 HTTP 路由，而是定義從主控台「路由」進入專案的進入點。在該檔案內，可以通過 `Artisan::command` 方法來定義基於閉包的主控台指令。`command` 方法接受 2 個引數：[指令簽章](#defining-input-expectations)，以及一個用來接收指令引數與選項的閉包："

# File: docs/8.x/artisan.md, line: 175
# File: docs/9.x/artisan.md, line: 189
# File: docs/master/artisan.md, line: 189
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"
msgstr "    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 177
# File: docs/9.x/artisan.md, line: 191
# File: docs/master/artisan.md, line: 191
#. type: Plain text
msgid "The closure is bound to the underlying command instance, so you have full access to all of the helper methods you would typically be able to access on a full command class."
msgstr "這裡的閉包有綁定到該指令的基礎類別執行個體，因此可以像在完整的指令類別內一樣存取所有的輔助函式。"

# File: docs/8.x/artisan.md, line: 179
# File: docs/9.x/artisan.md, line: 193
# File: docs/master/artisan.md, line: 193
#. type: Plain text
#, no-wrap
msgid "<a name=\"type-hinting-dependencies\"></a>\n"
msgstr "<a name=\"type-hinting-dependencies\"></a>\n"

# File: docs/8.x/artisan.md, line: 179
# File: docs/9.x/artisan.md, line: 193
# File: docs/master/artisan.md, line: 193
#. type: Title ####
#, no-wrap
msgid "Type-Hinting Dependencies"
msgstr "對相依關係進行型別提示"

# File: docs/8.x/artisan.md, line: 182
# File: docs/9.x/artisan.md, line: 196
# File: docs/master/artisan.md, line: 196
#. type: Plain text
msgid "In addition to receiving your command's arguments and options, command closures may also type-hint additional dependencies that you would like resolved out of the [service container](/docs/{{version}}/container):"
msgstr "除了接收指令的引數與選項外，指令閉包也可以通過型別提示來向 [Service Container](/docs/{{version}}/container) 解析額外的相依關係。"

# File: docs/8.x/artisan.md, line: 185
# File: docs/9.x/artisan.md, line: 199
# File: docs/master/artisan.md, line: 199
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
msgstr "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"

# File: docs/8.x/artisan.md, line: 189
# File: docs/9.x/artisan.md, line: 203
# File: docs/master/artisan.md, line: 203
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"        $drip->send(User::find($user));\n"
"    });\n"
msgstr "    Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"        $drip->send(User::find($user));\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 191
# File: docs/9.x/artisan.md, line: 205
# File: docs/master/artisan.md, line: 205
#. type: Plain text
#, no-wrap
msgid "<a name=\"closure-command-descriptions\"></a>\n"
msgstr "<a name=\"closure-command-descriptions\"></a>\n"

# File: docs/8.x/artisan.md, line: 191
# File: docs/9.x/artisan.md, line: 205
# File: docs/master/artisan.md, line: 205
#. type: Title ####
#, no-wrap
msgid "Closure Command Descriptions"
msgstr "閉包指令描述"

# File: docs/8.x/artisan.md, line: 194
# File: docs/9.x/artisan.md, line: 208
# File: docs/master/artisan.md, line: 208
#. type: Plain text
msgid "When defining a closure based command, you may use the `purpose` method to add a description to the command. This description will be displayed when you run the `php artisan list` or `php artisan help` commands:"
msgstr "在定義基於閉包的指令時，可以使用 `purpose` 方法來為該指令加上描述。這段描述會在執行 `php artisan list` 或 `php artisan help` 指令時顯示："

# File: docs/8.x/artisan.md, line: 198
# File: docs/9.x/artisan.md, line: 212
# File: docs/master/artisan.md, line: 212
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function ($user) {\n"
"        // ...\n"
"    })->purpose('Send a marketing email to a user');\n"
msgstr "    Artisan::command('mail:send {user}', function ($user) {\n"
"        // ...\n"
"    })->purpose('Send a marketing email to a user');\n"

# File: docs/8.x/artisan.md, line: 200
# File: docs/9.x/artisan.md, line: 214
# File: docs/master/artisan.md, line: 214
#. type: Plain text
#, no-wrap
msgid "<a name=\"defining-input-expectations\"></a>\n"
msgstr "<a name=\"defining-input-expectations\"></a>\n"

# File: docs/8.x/artisan.md, line: 200
# File: docs/9.x/artisan.md, line: 214
# File: docs/master/artisan.md, line: 214
#. type: Title ##
#, no-wrap
msgid "Defining Input Expectations"
msgstr "定義預期的輸入"

# File: docs/8.x/artisan.md, line: 203
# File: docs/9.x/artisan.md, line: 217
# File: docs/master/artisan.md, line: 217
#. type: Plain text
msgid "When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the `signature` property on your commands. The `signature` property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax."
msgstr "在撰寫主控台指令時，常常會通過引數或選項來向使用者取得輸入。Laravel 通過指令的 `signature` 屬性來定義預期從使用者那取得的輸入，讓這個過程變得非常簡單。通過 `signature` 屬性，就能通過類似路由的格式來一次定義名稱、引數，以及選項。非常簡潔有力。"

# File: docs/8.x/artisan.md, line: 205
# File: docs/9.x/artisan.md, line: 219
# File: docs/master/artisan.md, line: 219
#. type: Plain text
#, no-wrap
msgid "<a name=\"arguments\"></a>\n"
msgstr "<a name=\"arguments\"></a>\n"

# File: docs/8.x/artisan.md, line: 205
# File: docs/9.x/artisan.md, line: 219
# File: docs/master/artisan.md, line: 219
#. type: Title ###
#, no-wrap
msgid "Arguments"
msgstr "引數"

# File: docs/8.x/artisan.md, line: 208
# File: docs/9.x/artisan.md, line: 222
# File: docs/master/artisan.md, line: 222
#. type: Plain text
msgid "All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one required argument: `user`:"
msgstr "所有由使用者提供的引數與選項都以大括號來包裝。在下列範例中的指令定義了一個必要的引數：`user`："

# File: docs/8.x/artisan.md, line: 215
# File: docs/9.x/artisan.md, line: 229
# File: docs/master/artisan.md, line: 229
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
msgstr "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"

# File: docs/8.x/artisan.md, line: 217
# File: docs/9.x/artisan.md, line: 231
# File: docs/master/artisan.md, line: 231
#. type: Plain text
msgid "You may also make arguments optional or define default values for arguments:"
msgstr "也可以將引數設為可選，或是定義引數的預設值："

# File: docs/8.x/artisan.md, line: 220
#. type: Plain text
#, no-wrap
msgid "    // Optional argument...\n"
"    mail:send {user?}\n"
msgstr "    // 可選引數…\n"
"    mail:send {user?}\n"

# File: docs/8.x/artisan.md, line: 223
#. type: Plain text
#, no-wrap
msgid "    // Optional argument with default value...\n"
"    mail:send {user=foo}\n"
msgstr "    // 有預設值的可選引數…\n"
"    mail:send {user=foo}\n"

# File: docs/8.x/artisan.md, line: 225
# File: docs/9.x/artisan.md, line: 239
# File: docs/master/artisan.md, line: 239
#. type: Plain text
#, no-wrap
msgid "<a name=\"options\"></a>\n"
msgstr "<a name=\"options\"></a>\n"

# File: docs/8.x/artisan.md, line: 225
# File: docs/9.x/artisan.md, line: 239
# File: docs/master/artisan.md, line: 239
#. type: Title ###
#, no-wrap
msgid "Options"
msgstr "選項"

# File: docs/8.x/artisan.md, line: 228
# File: docs/9.x/artisan.md, line: 242
# File: docs/master/artisan.md, line: 242
#. type: Plain text
msgid "Options, like arguments, are another form of user input. Options are prefixed by two hyphens (`--`) when they are provided via the command line. There are two types of options: those that receive a value and those that don't. Options that don't receive a value serve as a boolean \"switch\". Let's take a look at an example of this type of option:"
msgstr "選項就像引數一樣，是另一種形式的使用者輸入。選項在從指令列提供時，會加上兩個減號 (`--`) 作為前綴。有兩種類型的選項：一種可接收值，一種沒有接收值。沒有接收值的選項是一種布林「開關」功能。來看看一個使用這種類型選項的例子："

# File: docs/8.x/artisan.md, line: 235
# File: docs/9.x/artisan.md, line: 249
# File: docs/master/artisan.md, line: 249
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue}';\n"
msgstr "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue}';\n"

# File: docs/8.x/artisan.md, line: 237
# File: docs/9.x/artisan.md, line: 251
# File: docs/master/artisan.md, line: 251
#. type: Plain text
msgid "In this example, the `--queue` switch may be specified when calling the Artisan command. If the `--queue` switch is passed, the value of the option will be `true`. Otherwise, the value will be `false`:"
msgstr "在這個例子中，呼叫該 Artisan 指令時可以指定 `--queue` 開關。若有傳入 `--queue` 開關，則該選項的值會是 `true`。否則，該值為 `false`："

# File: docs/8.x/artisan.md, line: 239
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send 1 --queue\n"
msgstr "    php artisan mail:send 1 --queue\n"

# File: docs/8.x/artisan.md, line: 241
# File: docs/9.x/artisan.md, line: 257
# File: docs/master/artisan.md, line: 257
#. type: Plain text
#, no-wrap
msgid "<a name=\"options-with-values\"></a>\n"
msgstr "<a name=\"options-with-values\"></a>\n"

# File: docs/8.x/artisan.md, line: 241
# File: docs/9.x/artisan.md, line: 257
# File: docs/master/artisan.md, line: 257
#. type: Title ####
#, no-wrap
msgid "Options With Values"
msgstr "帶值的選項"

# File: docs/8.x/artisan.md, line: 244
# File: docs/9.x/artisan.md, line: 260
# File: docs/master/artisan.md, line: 260
#. type: Plain text
msgid "Next, let's take a look at an option that expects a value. If the user must specify a value for an option, you should suffix the option name with a `=` sign:"
msgstr "接下來，來看看有值的選項。若使用者必須為選項指定一個值，則應在選項名稱後方加上 `=` 符號："

# File: docs/8.x/artisan.md, line: 251
# File: docs/9.x/artisan.md, line: 267
# File: docs/master/artisan.md, line: 267
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue=}';\n"
msgstr "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue=}';\n"

# File: docs/8.x/artisan.md, line: 253
# File: docs/9.x/artisan.md, line: 269
# File: docs/master/artisan.md, line: 269
#. type: Plain text
msgid "In this example, the user may pass a value for the option like so. If the option is not specified when invoking the command, its value will be `null`:"
msgstr "在這個例子中，使用者可以傳入像這樣給選項帶入一個值。若在叫用該指令時未指定該選項，則其值為 `null`："

# File: docs/8.x/artisan.md, line: 255
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send 1 --queue=default\n"
msgstr "    php artisan mail:send 1 --queue=default\n"

# File: docs/8.x/artisan.md, line: 257
# File: docs/9.x/artisan.md, line: 275
# File: docs/master/artisan.md, line: 275
#. type: Plain text
msgid "You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:"
msgstr "可以通過在選項名稱後方加上預設值來為選項指派一個預設值。若使用者未傳入選項值，將會使用預設值："

# File: docs/8.x/artisan.md, line: 259
#. type: Plain text
#, no-wrap
msgid "    mail:send {user} {--queue=default}\n"
msgstr "    mail:send {user} {--queue=default}\n"

# File: docs/8.x/artisan.md, line: 261
# File: docs/9.x/artisan.md, line: 279
# File: docs/master/artisan.md, line: 279
#. type: Plain text
#, no-wrap
msgid "<a name=\"option-shortcuts\"></a>\n"
msgstr "<a name=\"option-shortcuts\"></a>\n"

# File: docs/8.x/artisan.md, line: 261
# File: docs/9.x/artisan.md, line: 279
# File: docs/master/artisan.md, line: 279
#. type: Title ####
#, no-wrap
msgid "Option Shortcuts"
msgstr "選項捷徑"

# File: docs/8.x/artisan.md, line: 264
# File: docs/9.x/artisan.md, line: 282
# File: docs/master/artisan.md, line: 282
#. type: Plain text
msgid "To assign a shortcut when defining an option, you may specify it before the option name and use the `|` character as a delimiter to separate the shortcut from the full option name:"
msgstr "若要在定義選項時指定捷徑，可以在選項名稱前加上其捷徑名稱，並使用 `|` 字元來區分捷徑名稱與完整的選項名稱："

# File: docs/8.x/artisan.md, line: 266
#. type: Plain text
#, no-wrap
msgid "    mail:send {user} {--Q|queue}\n"
msgstr "    mail:send {user} {--Q|queue}\n"

# File: docs/8.x/artisan.md, line: 268
# File: docs/9.x/artisan.md, line: 286
# File: docs/master/artisan.md, line: 286
#. type: Plain text
msgid "When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen:"
msgstr "在終端機內叫用指令時，應在選項捷徑前加上一個減號："

# File: docs/8.x/artisan.md, line: 270
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send 1 -Q\n"
msgstr "    php artisan mail:send 1 -Q\n"

# File: docs/8.x/artisan.md, line: 272
# File: docs/9.x/artisan.md, line: 292
# File: docs/master/artisan.md, line: 292
#. type: Plain text
#, no-wrap
msgid "<a name=\"input-arrays\"></a>\n"
msgstr "<a name=\"input-arrays\"></a>\n"

# File: docs/8.x/artisan.md, line: 272
# File: docs/9.x/artisan.md, line: 292
# File: docs/master/artisan.md, line: 292
#. type: Title ###
#, no-wrap
msgid "Input Arrays"
msgstr "輸入陣列"

# File: docs/8.x/artisan.md, line: 275
# File: docs/9.x/artisan.md, line: 295
# File: docs/master/artisan.md, line: 295
#. type: Plain text
msgid "If you would like to define arguments or options to expect multiple input values, you may use the `*` character. First, let's take a look at an example that specifies such an argument:"
msgstr "若想要定義預期有多個輸入值的引數或選項，則可以使用 `*` 字元。首先，來看看這樣設定引數的例子："

# File: docs/8.x/artisan.md, line: 277
#. type: Plain text
#, no-wrap
msgid "    mail:send {user*}\n"
msgstr "    mail:send {user*}\n"

# File: docs/8.x/artisan.md, line: 279
# File: docs/9.x/artisan.md, line: 299
# File: docs/master/artisan.md, line: 299
#. type: Plain text
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `foo` and `bar` as its values:"
msgstr "呼叫這個方法的時候，`user` 引數在指令列中可以按照順序傳入。舉例來說，下列指令會將 `user` 的值設為一個內容為 `foo` 與 `bar` 的陣列："

# File: docs/8.x/artisan.md, line: 281
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send foo bar\n"
msgstr "    php artisan mail:send foo bar\n"

# File: docs/8.x/artisan.md, line: 283
# File: docs/9.x/artisan.md, line: 305
# File: docs/master/artisan.md, line: 305
#. type: Plain text
msgid "This `*` character can be combined with an optional argument definition to allow zero or more instances of an argument:"
msgstr "`*` 字元可以與可選引數組合使用來定義，這樣一來可允許有 0 個或多個引數的實體："

# File: docs/8.x/artisan.md, line: 285
#. type: Plain text
#, no-wrap
msgid "    mail:send {user?*}\n"
msgstr "    mail:send {user?*}\n"

# File: docs/8.x/artisan.md, line: 287
# File: docs/9.x/artisan.md, line: 309
# File: docs/master/artisan.md, line: 309
#. type: Plain text
#, no-wrap
msgid "<a name=\"option-arrays\"></a>\n"
msgstr "<a name=\"option-arrays\"></a>\n"

# File: docs/8.x/artisan.md, line: 287
# File: docs/9.x/artisan.md, line: 309
# File: docs/master/artisan.md, line: 309
#. type: Title ####
#, no-wrap
msgid "Option Arrays"
msgstr "選項陣列"

# File: docs/8.x/artisan.md, line: 290
# File: docs/9.x/artisan.md, line: 312
# File: docs/master/artisan.md, line: 312
#. type: Plain text
msgid "When defining an option that expects multiple input values, each option value passed to the command should be prefixed with the option name:"
msgstr "定義預期有多個輸入值的選項時，每個傳入指令的選項值都應以選項名稱作為前綴："

# File: docs/8.x/artisan.md, line: 292
#. type: Plain text
#, no-wrap
msgid "    mail:send {user} {--id=*}\n"
msgstr "    mail:send {user} {--id=*}\n"

# File: docs/8.x/artisan.md, line: 294
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send --id=1 --id=2\n"
msgstr "    php artisan mail:send --id=1 --id=2\n"

# File: docs/8.x/artisan.md, line: 296
# File: docs/9.x/artisan.md, line: 322
# File: docs/master/artisan.md, line: 322
#. type: Plain text
#, no-wrap
msgid "<a name=\"input-descriptions\"></a>\n"
msgstr "<a name=\"input-descriptions\"></a>\n"

# File: docs/8.x/artisan.md, line: 296
# File: docs/9.x/artisan.md, line: 322
# File: docs/master/artisan.md, line: 322
#. type: Title ###
#, no-wrap
msgid "Input Descriptions"
msgstr "輸入描述"

# File: docs/8.x/artisan.md, line: 299
# File: docs/9.x/artisan.md, line: 325
# File: docs/master/artisan.md, line: 325
#. type: Plain text
msgid "You may assign descriptions to input arguments and options by separating the argument name from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:"
msgstr "可以通過以冒號 (`:`) 區分引數名與描述來為輸入引數或選項指定描述。若需要更多空間來定義指令的話，可以將定義拆分為多行："

# File: docs/8.x/artisan.md, line: 308
# File: docs/9.x/artisan.md, line: 334
# File: docs/master/artisan.md, line: 334
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send\n"
"                            {user : The ID of the user}\n"
"                            {--queue : Whether the job should be queued}';\n"
msgstr "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send\n"
"                            {user : The ID of the user}\n"
"                            {--queue : Whether the job should be queued}';\n"

# File: docs/8.x/artisan.md, line: 310
# File: docs/9.x/artisan.md, line: 336
# File: docs/master/artisan.md, line: 336
#. type: Plain text
#, no-wrap
msgid "<a name=\"command-io\"></a>\n"
msgstr "<a name=\"command-io\"></a>\n"

# File: docs/8.x/artisan.md, line: 310
# File: docs/9.x/artisan.md, line: 336
# File: docs/master/artisan.md, line: 336
#. type: Title ##
#, no-wrap
msgid "Command I/O"
msgstr "指令 I/O"

# File: docs/8.x/artisan.md, line: 313
# File: docs/9.x/artisan.md, line: 339
# File: docs/master/artisan.md, line: 339
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-input\"></a>\n"
msgstr "<a name=\"retrieving-input\"></a>\n"

# File: docs/8.x/artisan.md, line: 313
# File: docs/9.x/artisan.md, line: 339
# File: docs/master/artisan.md, line: 339
#. type: Title ###
#, no-wrap
msgid "Retrieving Input"
msgstr "截取輸入"

# File: docs/8.x/artisan.md, line: 316
# File: docs/9.x/artisan.md, line: 342
# File: docs/master/artisan.md, line: 342
#. type: Plain text
msgid "While your command is executing, you will likely need to access the values for the arguments and options accepted by your command. To do so, you may use the `argument` and `option` methods. If an argument or option does not exist, `null` will be returned:"
msgstr "指令執行時，我們通常需要存取這些指令所接收的引數與選項值。要截取這些值，可以使用 `argument` 與 `option` 方法。若引數或選項不存在，則會回傳 `null`："

# File: docs/8.x/artisan.md, line: 325
# File: docs/9.x/artisan.md, line: 351
# File: docs/master/artisan.md, line: 351
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return int\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $userId = $this->argument('user');\n"
msgstr "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return int\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $userId = $this->argument('user');\n"

# File: docs/8.x/artisan.md, line: 328
# File: docs/8.x/artisan.md, line: 588
# File: docs/9.x/artisan.md, line: 354
# File: docs/9.x/artisan.md, line: 614
# File: docs/master/artisan.md, line: 354
# File: docs/master/artisan.md, line: 614
#. type: Plain text
#, no-wrap
msgid "        //\n"
"    }\n"
msgstr "        //\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 330
# File: docs/9.x/artisan.md, line: 356
# File: docs/master/artisan.md, line: 356
#. type: Plain text
msgid "If you need to retrieve all of the arguments as an `array`, call the `arguments` method:"
msgstr "若要將所有引數截取為陣列，則可呼叫 `arguments` 方法："

# File: docs/8.x/artisan.md, line: 332
# File: docs/9.x/artisan.md, line: 358
# File: docs/master/artisan.md, line: 358
#. type: Plain text
#, no-wrap
msgid "    $arguments = $this->arguments();\n"
msgstr "    $arguments = $this->arguments();\n"

# File: docs/8.x/artisan.md, line: 334
# File: docs/9.x/artisan.md, line: 360
# File: docs/master/artisan.md, line: 360
#. type: Plain text
msgid "Options may be retrieved just as easily as arguments using the `option` method. To retrieve all of the options as an array, call the `options` method:"
msgstr "我們也可像截取引數一樣使用 `option` 方法來輕鬆地截取選項。若要將所有選項截取為陣列，請呼叫 `options` 方法："

# File: docs/8.x/artisan.md, line: 337
# File: docs/9.x/artisan.md, line: 363
# File: docs/master/artisan.md, line: 363
#. type: Plain text
#, no-wrap
msgid "    // Retrieve a specific option...\n"
"    $queueName = $this->option('queue');\n"
msgstr "    // 取得特定的選項…\n"
"    $queueName = $this->option('queue');\n"

# File: docs/8.x/artisan.md, line: 340
# File: docs/9.x/artisan.md, line: 366
# File: docs/master/artisan.md, line: 366
#. type: Plain text
#, no-wrap
msgid "    // Retrieve all options as an array...\n"
"    $options = $this->options();\n"
msgstr "    // 將所有選項作為陣列取得\n"
"    $options = $this->options();\n"

# File: docs/8.x/artisan.md, line: 342
# File: docs/9.x/artisan.md, line: 368
# File: docs/master/artisan.md, line: 368
#. type: Plain text
#, no-wrap
msgid "<a name=\"prompting-for-input\"></a>\n"
msgstr "<a name=\"prompting-for-input\"></a>\n"

# File: docs/8.x/artisan.md, line: 342
# File: docs/9.x/artisan.md, line: 368
# File: docs/master/artisan.md, line: 368
#. type: Title ###
#, no-wrap
msgid "Prompting For Input"
msgstr "為輸入進行提示"

# File: docs/8.x/artisan.md, line: 345
# File: docs/9.x/artisan.md, line: 371
# File: docs/master/artisan.md, line: 371
#. type: Plain text
msgid "In addition to displaying output, you may also ask the user to provide input during the execution of your command. The `ask` method will prompt the user with the given question, accept their input, and then return the user's input back to your command:"
msgstr "除了顯示輸出外，也可以在執行指令的過程中詢問使用者來提供輸入。`ask` 方法會提示使用者給定的問題，並接受使用者輸入，然後將使用者的輸入回傳至指令："

# File: docs/8.x/artisan.md, line: 355
# File: docs/9.x/artisan.md, line: 381
# File: docs/master/artisan.md, line: 381
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $name = $this->ask('What is your name?');\n"
"    }\n"
msgstr "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $name = $this->ask('What is your name?');\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 357
# File: docs/9.x/artisan.md, line: 383
# File: docs/master/artisan.md, line: 383
#. type: Plain text
msgid "The `secret` method is similar to `ask`, but the user's input will not be visible to them as they type in the console. This method is useful when asking for sensitive information such as passwords:"
msgstr "`secret` 方法與 `ask` 類似，但使用者在指令列輸入的過程中將看不到他們自己的輸入值。這個方法適用於像使用者詢問如密碼等機密資訊的時候："

# File: docs/8.x/artisan.md, line: 359
# File: docs/9.x/artisan.md, line: 385
# File: docs/master/artisan.md, line: 385
#. type: Plain text
#, no-wrap
msgid "    $password = $this->secret('What is the password?');\n"
msgstr "    $password = $this->secret('What is the password?');\n"

# File: docs/8.x/artisan.md, line: 361
# File: docs/9.x/artisan.md, line: 387
# File: docs/master/artisan.md, line: 387
#. type: Plain text
#, no-wrap
msgid "<a name=\"asking-for-confirmation\"></a>\n"
msgstr "<a name=\"asking-for-confirmation\"></a>\n"

# File: docs/8.x/artisan.md, line: 361
# File: docs/9.x/artisan.md, line: 387
# File: docs/master/artisan.md, line: 387
#. type: Title ####
#, no-wrap
msgid "Asking For Confirmation"
msgstr "要求確認"

# File: docs/8.x/artisan.md, line: 364
# File: docs/9.x/artisan.md, line: 390
# File: docs/master/artisan.md, line: 390
#. type: Plain text
msgid "If you need to ask the user for a simple \"yes or no\" confirmation, you may use the `confirm` method. By default, this method will return `false`. However, if the user enters `y` or `yes` in response to the prompt, the method will return `true`."
msgstr "若需要使用者回答簡單的「yes / no」的確認問題，可以使用 `confirm` 方法。預設情況下，這個方法會回傳 `false`，但若使用者在提示時輸入 `y` 或 `yes`，則該方法會回傳 `true`。"

# File: docs/8.x/artisan.md, line: 368
# File: docs/9.x/artisan.md, line: 394
# File: docs/master/artisan.md, line: 394
#. type: Plain text
#, no-wrap
msgid "    if ($this->confirm('Do you wish to continue?')) {\n"
"        //\n"
"    }\n"
msgstr "    if ($this->confirm('Do you wish to continue?')) {\n"
"        //\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 370
# File: docs/9.x/artisan.md, line: 396
# File: docs/master/artisan.md, line: 396
#. type: Plain text
msgid "If necessary, you may specify that the confirmation prompt should return `true` by default by passing `true` as the second argument to the `confirm` method:"
msgstr "若有必要，也可以通過將 `true` 傳入為 `confirm` 方法的第二個引數來指定讓確認提示預設回傳 `true`："

# File: docs/8.x/artisan.md, line: 374
# File: docs/9.x/artisan.md, line: 400
# File: docs/master/artisan.md, line: 400
#. type: Plain text
#, no-wrap
msgid "    if ($this->confirm('Do you wish to continue?', true)) {\n"
"        //\n"
"    }\n"
msgstr "    if ($this->confirm('Do you wish to continue?', true)) {\n"
"        //\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 376
# File: docs/9.x/artisan.md, line: 402
# File: docs/master/artisan.md, line: 402
#. type: Plain text
#, no-wrap
msgid "<a name=\"auto-completion\"></a>\n"
msgstr "<a name=\"auto-completion\"></a>\n"

# File: docs/8.x/artisan.md, line: 376
# File: docs/9.x/artisan.md, line: 402
# File: docs/master/artisan.md, line: 402
#. type: Title ####
#, no-wrap
msgid "Auto-Completion"
msgstr "自動補全"

# File: docs/8.x/artisan.md, line: 379
# File: docs/9.x/artisan.md, line: 405
# File: docs/master/artisan.md, line: 405
#. type: Plain text
msgid "The `anticipate` method can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr "`anticipate` 方法可以用來為可能的選項提供自動補全。不論自動補全提示了什麼，使用者一樣可以提供任意回答："

# File: docs/8.x/artisan.md, line: 381
# File: docs/9.x/artisan.md, line: 407
# File: docs/master/artisan.md, line: 407
#. type: Plain text
#, no-wrap
msgid "    $name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr "    $name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"

# File: docs/8.x/artisan.md, line: 383
# File: docs/9.x/artisan.md, line: 409
# File: docs/master/artisan.md, line: 409
#. type: Plain text
msgid "Alternatively, you may pass a closure as the second argument to the `anticipate` method. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far, and return an array of options for auto-completion:"
msgstr "另外，也可以將一個閉包傳給 `anticipate` 方法的第二個引數。這個閉包會在每次使用者輸入字元的時候被呼叫。該閉包應接受一個字串參數，其中包含了目前使用者的輸入值，並回傳用於自動補全的選項陣列："

# File: docs/8.x/artisan.md, line: 387
# File: docs/9.x/artisan.md, line: 413
# File: docs/master/artisan.md, line: 413
#. type: Plain text
#, no-wrap
msgid "    $name = $this->anticipate('What is your address?', function ($input) {\n"
"        // Return auto-completion options...\n"
"    });\n"
msgstr "    $name = $this->anticipate('What is your address?', function ($input) {\n"
"        // 在此回傳自動補全的選項...\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 389
# File: docs/9.x/artisan.md, line: 415
# File: docs/master/artisan.md, line: 415
#. type: Plain text
#, no-wrap
msgid "<a name=\"multiple-choice-questions\"></a>\n"
msgstr "<a name=\"multiple-choice-questions\"></a>\n"

# File: docs/8.x/artisan.md, line: 389
# File: docs/9.x/artisan.md, line: 415
# File: docs/master/artisan.md, line: 415
#. type: Title ####
#, no-wrap
msgid "Multiple Choice Questions"
msgstr "多重選擇問題"

# File: docs/8.x/artisan.md, line: 392
# File: docs/9.x/artisan.md, line: 418
# File: docs/master/artisan.md, line: 418
#. type: Plain text
msgid "If you need to give the user a predefined set of choices when asking a question, you may use the `choice` method. You may set the array index of the default value to be returned if no option is chosen by passing the index as the third argument to the method:"
msgstr "若需要在詢問問題時為提供使用者一組預先定義的選項，可以使用 `choice` 方法。也可以通過將預設選項的陣列索引傳給該方法的第三個參數，來指定沒有選擇任何選項時要回傳的預設值："

# File: docs/8.x/artisan.md, line: 398
# File: docs/9.x/artisan.md, line: 424
# File: docs/master/artisan.md, line: 424
#. type: Plain text
#, no-wrap
msgid "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex\n"
"    );\n"
msgstr "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex\n"
"    );\n"

# File: docs/8.x/artisan.md, line: 400
# File: docs/9.x/artisan.md, line: 426
# File: docs/master/artisan.md, line: 426
#. type: Plain text
msgid "In addition, the `choice` method accepts optional fourth and fifth arguments for determining the maximum number of attempts to select a valid response and whether multiple selections are permitted:"
msgstr "另外，`choice` 方法也接受第 4 個與第 5 個引數，這兩個引數分別是用來判斷選擇有效回答的最大嘗試次數，以及是否允許多重選擇："

# File: docs/8.x/artisan.md, line: 408
# File: docs/9.x/artisan.md, line: 434
# File: docs/master/artisan.md, line: 434
#. type: Plain text
#, no-wrap
msgid "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex,\n"
"        $maxAttempts = null,\n"
"        $allowMultipleSelections = false\n"
"    );\n"
msgstr "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex,\n"
"        $maxAttempts = null,\n"
"        $allowMultipleSelections = false\n"
"    );\n"

# File: docs/8.x/artisan.md, line: 410
# File: docs/9.x/artisan.md, line: 436
# File: docs/master/artisan.md, line: 436
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-output\"></a>\n"
msgstr "<a name=\"writing-output\"></a>\n"

# File: docs/8.x/artisan.md, line: 410
# File: docs/9.x/artisan.md, line: 436
# File: docs/master/artisan.md, line: 436
#. type: Title ###
#, no-wrap
msgid "Writing Output"
msgstr "撰寫輸出"

# File: docs/8.x/artisan.md, line: 413
# File: docs/9.x/artisan.md, line: 439
# File: docs/master/artisan.md, line: 439
#. type: Plain text
msgid "To send output to the console, you may use the `line`, `info`, `comment`, `question`, `warn`, and `error` methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let's display some general information to the user. Typically, the `info` method will display in the console as green colored text:"
msgstr "若要將輸出傳送至主控台，可以使用 `line`, `info`, `comment`, `question`, `warn` 與 `error` 方法。這幾個方法會依不同目的來使用適當的 ANSI 色彩。舉例來說，我們來顯示一些一般的資訊給使用者看。通常來說，`info` 方法會在主控台上顯示出綠色的文字："

# File: docs/8.x/artisan.md, line: 422
# File: docs/9.x/artisan.md, line: 448
# File: docs/master/artisan.md, line: 448
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"
msgstr "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"

# File: docs/8.x/artisan.md, line: 425
# File: docs/9.x/artisan.md, line: 451
# File: docs/master/artisan.md, line: 451
#. type: Plain text
#, no-wrap
msgid "        $this->info('The command was successful!');\n"
"    }\n"
msgstr "        $this->info('The command was successful!');\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 427
# File: docs/9.x/artisan.md, line: 453
# File: docs/master/artisan.md, line: 453
#. type: Plain text
msgid "To display an error message, use the `error` method. Error message text is typically displayed in red:"
msgstr "若要顯示錯誤訊息，可以使用 `error` 方法。錯誤訊息文字通常會以紅色顯示："

# File: docs/8.x/artisan.md, line: 429
# File: docs/9.x/artisan.md, line: 455
# File: docs/master/artisan.md, line: 455
#. type: Plain text
#, no-wrap
msgid "    $this->error('Something went wrong!');\n"
msgstr "    $this->error('Something went wrong!');\n"

# File: docs/8.x/artisan.md, line: 431
# File: docs/9.x/artisan.md, line: 457
# File: docs/master/artisan.md, line: 457
#. type: Plain text
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr "也可以使用 `line` 方法來顯示未標示色彩的純文字："

# File: docs/8.x/artisan.md, line: 433
# File: docs/9.x/artisan.md, line: 459
# File: docs/master/artisan.md, line: 459
#. type: Plain text
#, no-wrap
msgid "    $this->line('Display this on the screen');\n"
msgstr "    $this->line('Display this on the screen');\n"

# File: docs/8.x/artisan.md, line: 435
# File: docs/9.x/artisan.md, line: 461
# File: docs/master/artisan.md, line: 461
#. type: Plain text
msgid "You may use the `newLine` method to display a blank line:"
msgstr "可以使用 `newLine` 方法來顯示空行："

# File: docs/8.x/artisan.md, line: 438
# File: docs/9.x/artisan.md, line: 464
# File: docs/master/artisan.md, line: 464
#. type: Plain text
#, no-wrap
msgid "    // Write a single blank line...\n"
"    $this->newLine();\n"
msgstr "    // 寫入 1 行空行…\n"
"    $this->newLine();\n"

# File: docs/8.x/artisan.md, line: 441
# File: docs/9.x/artisan.md, line: 467
# File: docs/master/artisan.md, line: 467
#. type: Plain text
#, no-wrap
msgid "    // Write three blank lines...\n"
"    $this->newLine(3);\n"
msgstr "    // 寫入 3 行空行…\n"
"    $this->newLine(3);\n"

# File: docs/8.x/artisan.md, line: 443
# File: docs/9.x/artisan.md, line: 469
# File: docs/master/artisan.md, line: 469
#. type: Plain text
#, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr "<a name=\"tables\"></a>\n"

# File: docs/8.x/artisan.md, line: 443
# File: docs/9.x/artisan.md, line: 469
# File: docs/master/artisan.md, line: 469
#. type: Title ####
#, no-wrap
msgid "Tables"
msgstr "表格"

# File: docs/8.x/artisan.md, line: 447
# File: docs/9.x/artisan.md, line: 473
# File: docs/master/artisan.md, line: 473
#. type: Plain text
msgid "The `table` method makes it easy to correctly format multiple rows / columns of data. All you need to do is provide the column names and the data for the table and Laravel will automatically calculate the appropriate width and height of the table for you:"
msgstr "通過 `table` 方法可以很輕鬆地正確為多行列資料進行格式化。只需要提供表格的欄位名稱與表格的資料，Laravel 就會自動計算適當的表格寬高："

# File: docs/8.x/artisan.md, line: 449
# File: docs/8.x/artisan.md, line: 461
# File: docs/9.x/artisan.md, line: 475
# File: docs/9.x/artisan.md, line: 487
# File: docs/master/artisan.md, line: 475
# File: docs/master/artisan.md, line: 487
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr "    use App\\Models\\User;\n"

# File: docs/8.x/artisan.md, line: 454
# File: docs/9.x/artisan.md, line: 480
# File: docs/master/artisan.md, line: 480
#. type: Plain text
#, no-wrap
msgid "    $this->table(\n"
"        ['Name', 'Email'],\n"
"        User::all(['name', 'email'])->toArray()\n"
"    );\n"
msgstr "    $this->table(\n"
"        ['Name', 'Email'],\n"
"        User::all(['name', 'email'])->toArray()\n"
"    );\n"

# File: docs/8.x/artisan.md, line: 456
# File: docs/9.x/artisan.md, line: 482
# File: docs/master/artisan.md, line: 482
#. type: Plain text
#, no-wrap
msgid "<a name=\"progress-bars\"></a>\n"
msgstr "<a name=\"progress-bars\"></a>\n"

# File: docs/8.x/artisan.md, line: 456
# File: docs/9.x/artisan.md, line: 482
# File: docs/master/artisan.md, line: 482
#. type: Title ####
#, no-wrap
msgid "Progress Bars"
msgstr "進度列"

# File: docs/8.x/artisan.md, line: 459
# File: docs/9.x/artisan.md, line: 485
# File: docs/master/artisan.md, line: 485
#. type: Plain text
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `withProgressBar` method, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr "當有需要長時間執行的任務時，最好顯示一個能告訴使用者目前任務完成度的進度列。使用 `withProgressBar` 方法，Laravel 就會顯示出一個進度列，並在每次迭代過指定的迭代值時增加進度列的進度："

# File: docs/8.x/artisan.md, line: 465
# File: docs/9.x/artisan.md, line: 491
# File: docs/master/artisan.md, line: 491
#. type: Plain text
#, no-wrap
msgid "    $users = $this->withProgressBar(User::all(), function ($user) {\n"
"        $this->performTask($user);\n"
"    });\n"
msgstr "    $users = $this->withProgressBar(User::all(), function ($user) {\n"
"        $this->performTask($user);\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 467
# File: docs/9.x/artisan.md, line: 493
# File: docs/master/artisan.md, line: 493
#. type: Plain text
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar after processing each item:"
msgstr "有時候，我們可能需要手動控制進度列何時需要增加。首先，我們先定義整個過程所需要迭代的次數。接著，在每個項目處理完後增加進度："

# File: docs/8.x/artisan.md, line: 469
# File: docs/9.x/artisan.md, line: 495
# File: docs/master/artisan.md, line: 495
#. type: Plain text
#, no-wrap
msgid "    $users = App\\Models\\User::all();\n"
msgstr "    $users = App\\Models\\User::all();\n"

# File: docs/8.x/artisan.md, line: 471
# File: docs/9.x/artisan.md, line: 497
# File: docs/master/artisan.md, line: 497
#. type: Plain text
#, no-wrap
msgid "    $bar = $this->output->createProgressBar(count($users));\n"
msgstr "    $bar = $this->output->createProgressBar(count($users));\n"

# File: docs/8.x/artisan.md, line: 473
# File: docs/9.x/artisan.md, line: 499
# File: docs/master/artisan.md, line: 499
#. type: Plain text
#, no-wrap
msgid "    $bar->start();\n"
msgstr "    $bar->start();\n"

# File: docs/8.x/artisan.md, line: 476
# File: docs/9.x/artisan.md, line: 502
# File: docs/master/artisan.md, line: 502
#. type: Plain text
#, no-wrap
msgid "    foreach ($users as $user) {\n"
"        $this->performTask($user);\n"
msgstr "    foreach ($users as $user) {\n"
"        $this->performTask($user);\n"

# File: docs/8.x/artisan.md, line: 479
# File: docs/9.x/artisan.md, line: 505
# File: docs/master/artisan.md, line: 505
#. type: Plain text
#, no-wrap
msgid "        $bar->advance();\n"
"    }\n"
msgstr "        $bar->advance();\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 481
# File: docs/9.x/artisan.md, line: 507
# File: docs/master/artisan.md, line: 507
#. type: Plain text
#, no-wrap
msgid "    $bar->finish();\n"
msgstr "    $bar->finish();\n"

# File: docs/8.x/artisan.md, line: 483
# File: docs/9.x/artisan.md, line: 509
# File: docs/master/artisan.md, line: 509
#. type: Plain text
#, no-wrap
msgid "> {tip} For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html).\n"
msgstr "> {tip} 有關更進階的選項，請參考 [Symfony Progress Bar 元件說明文件](https://symfony.com/doc/current/components/console/helpers/progressbar.html).\n"

# File: docs/8.x/artisan.md, line: 485
# File: docs/9.x/artisan.md, line: 511
# File: docs/master/artisan.md, line: 511
#. type: Plain text
#, no-wrap
msgid "<a name=\"registering-commands\"></a>\n"
msgstr "<a name=\"registering-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 485
# File: docs/9.x/artisan.md, line: 511
# File: docs/master/artisan.md, line: 511
#. type: Title ##
#, no-wrap
msgid "Registering Commands"
msgstr "註冊指令"

# File: docs/8.x/artisan.md, line: 488
# File: docs/9.x/artisan.md, line: 514
# File: docs/master/artisan.md, line: 514
#. type: Plain text
msgid "All of your console commands are registered within your application's `App\\Console\\Kernel` class, which is your application's \"console kernel\". Within the `commands` method of this class, you will see a call to the kernel's `load` method. The `load` method will scan the `app/Console/Commands` directory and automatically register each command it contains with Artisan. You are even free to make additional calls to the `load` method to scan other directories for Artisan commands:"
msgstr "所有主控台指令都在 `App\\Console\\Kernel` 類別內自動註冊。該類別為專案的「主控台核心」。在該類別的 `commands` 方法內，可以看到一個核心 `load` 方法的呼叫。`load` 方法會掃描 `app/Console/Commands` 目錄並自動向 Artisan 註冊其中的各個指令。你也可以在 `load` 方法中加上額外的呼叫來掃描其他目錄中的 Artisan 指令："

# File: docs/8.x/artisan.md, line: 498
# File: docs/9.x/artisan.md, line: 524
# File: docs/master/artisan.md, line: 524
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        $this->load(__DIR__.'/Commands');\n"
"        $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
msgstr "    /**\n"
"     * Register the commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        $this->load(__DIR__.'/Commands');\n"
"        $this->load(__DIR__.'/../Domain/Orders/Commands');\n"

# File: docs/8.x/artisan.md, line: 501
# File: docs/9.x/artisan.md, line: 527
# File: docs/master/artisan.md, line: 527
#. type: Plain text
#, no-wrap
msgid "        // ...\n"
"    }\n"
msgstr "        // ...\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 503
# File: docs/9.x/artisan.md, line: 529
# File: docs/master/artisan.md, line: 529
#. type: Plain text
msgid "If necessary, you may manually register commands by adding the command's class name to a `$commands` property within your `App\\Console\\Kernel` class. If this property is not already defined on your kernel, you should define it manually. When Artisan boots, all the commands listed in this property will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan:"
msgstr "若有需要的話，也可以通過將指令的類別名稱加至 `App\\Console\\Kernel` 類別的 `$commands` 屬性來手動註冊指令。若該屬性不存在，你可以手動建立。當 Artisan 啟動時，列在該屬性上的所有指令都會由 [Service Container](/docs/{{version}}/container) 進行解析，並向 Artisan 註冊："

# File: docs/8.x/artisan.md, line: 507
# File: docs/9.x/artisan.md, line: 533
# File: docs/master/artisan.md, line: 533
#. type: Plain text
#, no-wrap
msgid "    protected $commands = [\n"
"        Commands\\SendEmails::class\n"
"    ];\n"
msgstr "    protected $commands = [\n"
"        Commands\\SendEmails::class\n"
"    ];\n"

# File: docs/8.x/artisan.md, line: 509
# File: docs/9.x/artisan.md, line: 535
# File: docs/master/artisan.md, line: 535
#. type: Plain text
#, no-wrap
msgid "<a name=\"programmatically-executing-commands\"></a>\n"
msgstr "<a name=\"programmatically-executing-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 509
# File: docs/9.x/artisan.md, line: 535
# File: docs/master/artisan.md, line: 535
#. type: Title ##
#, no-wrap
msgid "Programmatically Executing Commands"
msgstr "通過程式碼執行指令"

# File: docs/8.x/artisan.md, line: 512
# File: docs/9.x/artisan.md, line: 538
# File: docs/master/artisan.md, line: 538
#. type: Plain text
msgid "Sometimes you may wish to execute an Artisan command outside of the CLI. For example, you may wish to execute an Artisan command from a route or controller. You may use the `call` method on the `Artisan` facade to accomplish this. The `call` method accepts either the command's signature name or class name as its first argument, and an array of command parameters as the second argument. The exit code will be returned:"
msgstr "有時候可能需要在 CLI 以外的地方執行 Artisan 指令。舉例來說，你可能會想在路由或控制器內執行 Artisan 指令。可以使用 `Artisan` Facade 的 `call` 方法來完成這一目標。可以傳入指令的簽章名稱或類別名稱給 `call` 方法的第一個引數，而指令的參數則可以陣列傳為第二個引數。指令的結束代碼（Exit Code）會被回傳："

# File: docs/8.x/artisan.md, line: 514
# File: docs/8.x/artisan.md, line: 533
# File: docs/8.x/artisan.md, line: 555
# File: docs/9.x/artisan.md, line: 540
# File: docs/9.x/artisan.md, line: 559
# File: docs/9.x/artisan.md, line: 581
# File: docs/master/artisan.md, line: 540
# File: docs/master/artisan.md, line: 559
# File: docs/master/artisan.md, line: 581
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Artisan;\n"
msgstr "    use Illuminate\\Support\\Facades\\Artisan;\n"

# File: docs/8.x/artisan.md, line: 519
# File: docs/9.x/artisan.md, line: 545
# File: docs/master/artisan.md, line: 545
#. type: Plain text
#, no-wrap
msgid "    Route::post('/user/{user}/mail', function ($user) {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr "    Route::post('/user/{user}/mail', function ($user) {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"

# File: docs/8.x/artisan.md, line: 522
# File: docs/8.x/artisan.md, line: 563
# File: docs/9.x/artisan.md, line: 548
# File: docs/9.x/artisan.md, line: 589
# File: docs/master/artisan.md, line: 548
# File: docs/master/artisan.md, line: 589
#. type: Plain text
#, no-wrap
msgid "        //\n"
"    });\n"
msgstr "        //\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 524
# File: docs/9.x/artisan.md, line: 550
# File: docs/master/artisan.md, line: 550
#. type: Plain text
msgid "Alternatively, you may pass the entire Artisan command to the `call` method as a string:"
msgstr "或者，也可以將整個 Artisan 指令作為字串傳給 `call` 方法："

# File: docs/8.x/artisan.md, line: 526
# File: docs/9.x/artisan.md, line: 552
# File: docs/master/artisan.md, line: 552
#. type: Plain text
#, no-wrap
msgid "    Artisan::call('mail:send 1 --queue=default');\n"
msgstr "    Artisan::call('mail:send 1 --queue=default');\n"

# File: docs/8.x/artisan.md, line: 528
# File: docs/9.x/artisan.md, line: 554
# File: docs/master/artisan.md, line: 554
#. type: Plain text
#, no-wrap
msgid "<a name=\"passing-array-values\"></a>\n"
msgstr "<a name=\"passing-array-values\"></a>\n"

# File: docs/8.x/artisan.md, line: 528
# File: docs/9.x/artisan.md, line: 554
# File: docs/master/artisan.md, line: 554
#. type: Title ####
#, no-wrap
msgid "Passing Array Values"
msgstr "傳入陣列值"

# File: docs/8.x/artisan.md, line: 531
# File: docs/9.x/artisan.md, line: 557
# File: docs/master/artisan.md, line: 557
#. type: Plain text
msgid "If your command defines an option that accepts an array, you may pass an array of values to that option:"
msgstr "若指令有定義接受陣列的選項，則可將陣列傳給該選項："

# File: docs/8.x/artisan.md, line: 539
# File: docs/9.x/artisan.md, line: 565
# File: docs/master/artisan.md, line: 565
#. type: Plain text
#, no-wrap
msgid "    Route::post('/mail', function () {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            '--id' => [5, 13]\n"
"        ]);\n"
"    });\n"
msgstr "    Route::post('/mail', function () {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            '--id' => [5, 13]\n"
"        ]);\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 541
# File: docs/9.x/artisan.md, line: 567
# File: docs/master/artisan.md, line: 567
#. type: Plain text
#, no-wrap
msgid "<a name=\"passing-boolean-values\"></a>\n"
msgstr "<a name=\"passing-boolean-values\"></a>\n"

# File: docs/8.x/artisan.md, line: 541
# File: docs/9.x/artisan.md, line: 567
# File: docs/master/artisan.md, line: 567
#. type: Title ####
#, no-wrap
msgid "Passing Boolean Values"
msgstr "傳入布林值"

# File: docs/8.x/artisan.md, line: 544
# File: docs/9.x/artisan.md, line: 570
# File: docs/master/artisan.md, line: 570
#. type: Plain text
msgid "If you need to specify the value of an option that does not accept string values, such as the `--force` flag on the `migrate:refresh` command, you should pass `true` or `false` as the value of the option:"
msgstr "若有需要為不接受字串值的選項指定值，如 `migrate:refresh` 指令的 `--force` 旗標，則可以為該選項傳入 `true` 或 `false`："

# File: docs/8.x/artisan.md, line: 548
# File: docs/9.x/artisan.md, line: 574
# File: docs/master/artisan.md, line: 574
#. type: Plain text
#, no-wrap
msgid "    $exitCode = Artisan::call('migrate:refresh', [\n"
"        '--force' => true,\n"
"    ]);\n"
msgstr "    $exitCode = Artisan::call('migrate:refresh', [\n"
"        '--force' => true,\n"
"    ]);\n"

# File: docs/8.x/artisan.md, line: 550
# File: docs/9.x/artisan.md, line: 576
# File: docs/master/artisan.md, line: 576
#. type: Plain text
#, no-wrap
msgid "<a name=\"queueing-artisan-commands\"></a>\n"
msgstr "<a name=\"queueing-artisan-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 550
# File: docs/9.x/artisan.md, line: 576
# File: docs/master/artisan.md, line: 576
#. type: Title ####
#, no-wrap
msgid "Queueing Artisan Commands"
msgstr "將 Artisan 指令放入佇列"

# File: docs/8.x/artisan.md, line: 553
# File: docs/9.x/artisan.md, line: 579
# File: docs/master/artisan.md, line: 579
#. type: Plain text
msgid "Using the `queue` method on the `Artisan` facade, you may even queue Artisan commands so they are processed in the background by your [queue workers](/docs/{{version}}/queues). Before using this method, make sure you have configured your queue and are running a queue listener:"
msgstr "只需要使用 `Artisan` Facade 的 `queue` 方法，就可以將 Artisan 指令放入佇列執行，這樣這個指令就會在 [佇列背景工作角色](/docs/{{version}}/queues) 內背景執行。在使用該方法前，請先確認是否已設定好佇列，且有執行佇列監聽程式："

# File: docs/8.x/artisan.md, line: 560
# File: docs/9.x/artisan.md, line: 586
# File: docs/master/artisan.md, line: 586
#. type: Plain text
#, no-wrap
msgid "    Route::post('/user/{user}/mail', function ($user) {\n"
"        Artisan::queue('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr "    Route::post('/user/{user}/mail', function ($user) {\n"
"        Artisan::queue('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"

# File: docs/8.x/artisan.md, line: 565
# File: docs/9.x/artisan.md, line: 591
# File: docs/master/artisan.md, line: 591
#. type: Plain text
msgid "Using the `onConnection` and `onQueue` methods, you may specify the connection or queue the Artisan command should be dispatched to:"
msgstr "可以使用 `onConnection` 與 `onQueue` 方法來指定 Artisan 指令應分派到哪個連線或佇列上："

# File: docs/8.x/artisan.md, line: 569
# File: docs/9.x/artisan.md, line: 595
# File: docs/master/artisan.md, line: 595
#. type: Plain text
#, no-wrap
msgid "    Artisan::queue('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ])->onConnection('redis')->onQueue('commands');\n"
msgstr "    Artisan::queue('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ])->onConnection('redis')->onQueue('commands');\n"

# File: docs/8.x/artisan.md, line: 571
# File: docs/9.x/artisan.md, line: 597
# File: docs/master/artisan.md, line: 597
#. type: Plain text
#, no-wrap
msgid "<a name=\"calling-commands-from-other-commands\"></a>\n"
msgstr "<a name=\"calling-commands-from-other-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 571
# File: docs/9.x/artisan.md, line: 597
# File: docs/master/artisan.md, line: 597
#. type: Title ###
#, no-wrap
msgid "Calling Commands From Other Commands"
msgstr "在其他指令內執行指令"

# File: docs/8.x/artisan.md, line: 574
# File: docs/9.x/artisan.md, line: 600
# File: docs/master/artisan.md, line: 600
#. type: Plain text
msgid "Sometimes you may wish to call other commands from an existing Artisan command. You may do so using the `call` method. This `call` method accepts the command name and an array of command arguments / options:"
msgstr "有時候可能需要在現有 Artisan 指令內執行另一個指令。可以通過呼叫 `call` 方法來完成。`call` 方法接受指令名稱與指令的引數與選項："

# File: docs/8.x/artisan.md, line: 585
# File: docs/9.x/artisan.md, line: 611
# File: docs/master/artisan.md, line: 611
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $this->call('mail:send', [\n"
"            'user' => 1, '--queue' => 'default'\n"
"        ]);\n"
msgstr "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $this->call('mail:send', [\n"
"            'user' => 1, '--queue' => 'default'\n"
"        ]);\n"

# File: docs/8.x/artisan.md, line: 590
# File: docs/9.x/artisan.md, line: 616
# File: docs/master/artisan.md, line: 616
#. type: Plain text
msgid "If you would like to call another console command and suppress all of its output, you may use the `callSilently` method. The `callSilently` method has the same signature as the `call` method:"
msgstr "若有需要呼叫另一個主控台指令並忽略其所有輸出，則可使用 `callSilently` 方法。`callSilently` 方法的簽章與 `call` 方法相同："

# File: docs/8.x/artisan.md, line: 594
# File: docs/9.x/artisan.md, line: 620
# File: docs/master/artisan.md, line: 620
#. type: Plain text
#, no-wrap
msgid "    $this->callSilently('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
msgstr "    $this->callSilently('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"

# File: docs/8.x/artisan.md, line: 596
# File: docs/9.x/artisan.md, line: 622
# File: docs/master/artisan.md, line: 622
#. type: Plain text
#, no-wrap
msgid "<a name=\"signal-handling\"></a>\n"
msgstr "<a name=\"signal-handling\"></a>\n"

# File: docs/8.x/artisan.md, line: 596
# File: docs/9.x/artisan.md, line: 622
# File: docs/master/artisan.md, line: 622
#. type: Title ##
#, no-wrap
msgid "Signal Handling"
msgstr "處理訊號"

# File: docs/8.x/artisan.md, line: 599
# File: docs/9.x/artisan.md, line: 625
# File: docs/master/artisan.md, line: 625
#. type: Plain text
msgid "The Symfony Console component, which powers the Artisan console, allows you to indicate which process signals (if any) your command handles. For example, you may indicate that your command handles the `SIGINT` and `SIGTERM` signals."
msgstr "驅動 Artisan 主控台的 Symfony Console 能夠設定指令能處理那些處理程序訊號（若有的話）。舉例來說，你可能會想要讓指令能處理 `SIGINT` 與 `SIGTERM` 訊號。"

# File: docs/8.x/artisan.md, line: 601
# File: docs/9.x/artisan.md, line: 627
# File: docs/master/artisan.md, line: 627
#. type: Plain text
msgid "To get started, you should implement the `Symfony\\Component\\Console\\Command\\SignalableCommandInterface` interface on your Artisan command class. This interface requires you to define two methods: `getSubscribedSignals` and `handleSignal`:"
msgstr "要開始處理訊號，請先在 Artisan 指令類別上實作 `Symfony\\Component\\Console\\Command\\SignalableCommandInterface` 介面。這個介面要求要定義兩個方法：`getSubscribedSignals` 與 `handleSignal` ："

# File: docs/8.x/artisan.md, line: 602
# File: docs/9.x/artisan.md, line: 628
# File: docs/master/artisan.md, line: 628
#. type: Code fence info string
#, no-wrap
msgid "php"
msgstr "php"

# File: docs/8.x/artisan.md, line: 602
# File: docs/9.x/artisan.md, line: 628
# File: docs/master/artisan.md, line: 628
#. type: Plain text
#, no-wrap
msgid "<?php\n\n"
"use Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\n\n"
"class StartServer extends Command implements SignalableCommandInterface\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the list of signals handled by the command.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function getSubscribedSignals(): array\n"
"    {\n"
"        return [SIGINT, SIGTERM];\n"
"    }\n\n"
"    /**\n"
"     * Handle an incoming signal.\n"
"     *\n"
"     * @param  int  $signal\n"
"     * @return void\n"
"     */\n"
"    public function handleSignal(int $signal): void\n"
"    {\n"
"        if ($signal === SIGINT) {\n"
"            $this->stopServer();\n\n"
"            return;\n"
"        }\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"use Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\n\n"
"class StartServer extends Command implements SignalableCommandInterface\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the list of signals handled by the command.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function getSubscribedSignals(): array\n"
"    {\n"
"        return [SIGINT, SIGTERM];\n"
"    }\n\n"
"    /**\n"
"     * Handle an incoming signal.\n"
"     *\n"
"     * @param  int  $signal\n"
"     * @return void\n"
"     */\n"
"    public function handleSignal(int $signal): void\n"
"    {\n"
"        if ($signal === SIGINT) {\n"
"            $this->stopServer();\n\n"
"            return;\n"
"        }\n"
"    }\n"
"}\n"

# File: docs/8.x/artisan.md, line: 639
# File: docs/9.x/artisan.md, line: 665
# File: docs/master/artisan.md, line: 665
#. type: Plain text
msgid "As you might expect, the `getSubscribedSignals` method should return an array of the signals that your command can handle, while the `handleSignal` method receives the signal and can respond accordingly."
msgstr "你可能已經看得出來，`getSubscribedSignals` 應回傳一個包含所有指令能處理訊號的陣列，而 `handleSignal` 則接收訊號並根據訊號進行回應。"

# File: docs/8.x/artisan.md, line: 641
# File: docs/9.x/artisan.md, line: 667
# File: docs/master/artisan.md, line: 667
#. type: Plain text
#, no-wrap
msgid "<a name=\"stub-customization\"></a>\n"
msgstr "<a name=\"stub-customization\"></a>\n"

# File: docs/8.x/artisan.md, line: 641
# File: docs/9.x/artisan.md, line: 667
# File: docs/master/artisan.md, line: 667
#. type: Title ##
#, no-wrap
msgid "Stub Customization"
msgstr "自定 Stub"

# File: docs/8.x/artisan.md, line: 644
# File: docs/9.x/artisan.md, line: 670
# File: docs/master/artisan.md, line: 670
#. type: Plain text
msgid "The Artisan console's `make` commands are used to create a variety of classes, such as controllers, jobs, migrations, and tests. These classes are generated using \"stub\" files that are populated with values based on your input. However, you may want to make small changes to files generated by Artisan. To accomplish this, you may use the `stub:publish` command to publish the most common stubs to your application so that you can customize them:"
msgstr "Artisan 主控台的 `make` 指令可以用來建立各種類別，如控制器、任務、資料庫遷移，以及測試。這些類別都是使用「Stub (虛設常式)」來產生的，Stub 會依據給定的輸入來填入不同的值。不過，你可能會想對這些 Artisan 產生的檔案做一些微調。要修改這些 Stub，可以通過 `stub:publish` 指令來將這些最常見的 Stub 安裝到專案中，如此一來就能自定這些 Stub："

# File: docs/8.x/artisan.md, line: 646
#. type: Plain text
#, no-wrap
msgid "    php artisan stub:publish\n"
msgstr "    php artisan stub:publish\n"

# File: docs/8.x/artisan.md, line: 648
# File: docs/9.x/artisan.md, line: 676
# File: docs/master/artisan.md, line: 676
#. type: Plain text
msgid "The published stubs will be located within a `stubs` directory in the root of your application. Any changes you make to these stubs will be reflected when you generate their corresponding classes using Artisan's `make` commands."
msgstr "安裝的 Stub 會被放在專案根目錄的 `stubs` 目錄中。對這些 Stub 做出的任何改動都會反應到使用 Artisan 的 `make` 指令所產生的對應類別上。"

# File: docs/8.x/artisan.md, line: 650
# File: docs/9.x/artisan.md, line: 678
# File: docs/master/artisan.md, line: 678
#. type: Plain text
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr "<a name=\"events\"></a>\n"

# File: docs/8.x/artisan.md, line: 650
# File: docs/9.x/artisan.md, line: 678
# File: docs/master/artisan.md, line: 678
#. type: Title ##
#, no-wrap
msgid "Events"
msgstr "事件"

# File: docs/8.x/artisan.md, line: 652
# File: docs/9.x/artisan.md, line: 680
# File: docs/master/artisan.md, line: 680
#. type: Plain text
msgid "Artisan dispatches three events when running commands: `Illuminate\\Console\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting`, and `Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` event is dispatched immediately when Artisan starts running. Next, the `CommandStarting` event is dispatched immediately before a command runs. Finally, the `CommandFinished` event is dispatched once a command finishes executing."
msgstr "Artisan 會在執行指令的時候分派三個事件： `Illuminate\\Console\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting` 與 `Illuminate\\Console\\Events\\CommandFinished`。`ArtisanStarting` 事件會在 Artisan 開始執行後馬上被分派。接著，`CommandStarting` 事件會在指令開始執行前的瞬間被分派。最後，`CommandFinished` 事件會在指令完成執行後被分派。"

# File: docs/9.x/artisan.md, line: 30
# File: docs/9.x/artisan.md, line: 36
# File: docs/9.x/artisan.md, line: 45
# File: docs/9.x/artisan.md, line: 59
# File: docs/9.x/artisan.md, line: 70
# File: docs/9.x/artisan.md, line: 76
# File: docs/9.x/artisan.md, line: 110
# File: docs/9.x/artisan.md, line: 252
# File: docs/9.x/artisan.md, line: 270
# File: docs/9.x/artisan.md, line: 287
# File: docs/9.x/artisan.md, line: 300
# File: docs/9.x/artisan.md, line: 317
# File: docs/9.x/artisan.md, line: 671
# File: docs/master/artisan.md, line: 30
# File: docs/master/artisan.md, line: 36
# File: docs/master/artisan.md, line: 45
# File: docs/master/artisan.md, line: 59
# File: docs/master/artisan.md, line: 70
# File: docs/master/artisan.md, line: 76
# File: docs/master/artisan.md, line: 110
# File: docs/master/artisan.md, line: 252
# File: docs/master/artisan.md, line: 270
# File: docs/master/artisan.md, line: 287
# File: docs/master/artisan.md, line: 300
# File: docs/master/artisan.md, line: 317
# File: docs/master/artisan.md, line: 671
#. type: Code fence info string
#, no-wrap
msgid "shell"
msgstr "shell"

# File: docs/9.x/artisan.md, line: 30
# File: docs/master/artisan.md, line: 30
#. type: Plain text
#, no-wrap
msgid "php artisan list\n"
msgstr "php artisan list\n"

# File: docs/9.x/artisan.md, line: 36
# File: docs/master/artisan.md, line: 36
#. type: Plain text
#, no-wrap
msgid "php artisan help migrate\n"
msgstr "php artisan help migrate\n"

# File: docs/9.x/artisan.md, line: 45
# File: docs/master/artisan.md, line: 45
#. type: Plain text
#, no-wrap
msgid "./sail artisan list\n"
msgstr "./sail artisan list\n"

# File: docs/9.x/artisan.md, line: 59
# File: docs/master/artisan.md, line: 59
#. type: Plain text
#, no-wrap
msgid "composer require laravel/tinker\n"
msgstr "composer require laravel/tinker\n"

# File: docs/9.x/artisan.md, line: 70
# File: docs/master/artisan.md, line: 70
#. type: Plain text
#, no-wrap
msgid "php artisan tinker\n"
msgstr "php artisan tinker\n"

# File: docs/9.x/artisan.md, line: 76
# File: docs/master/artisan.md, line: 76
#. type: Plain text
#, no-wrap
msgid "php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr "php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"

# File: docs/9.x/artisan.md, line: 110
# File: docs/master/artisan.md, line: 110
#. type: Plain text
#, no-wrap
msgid "php artisan make:command SendEmails\n"
msgstr "php artisan make:command SendEmails\n"

# File: docs/9.x/artisan.md, line: 234
# File: docs/master/artisan.md, line: 234
#. type: Plain text
#, no-wrap
msgid "    // Optional argument...\n"
"    'mail:send {user?}'\n"
msgstr "    // 可選的引數...\n"
"    'mail:send {user?}'\n"

# File: docs/9.x/artisan.md, line: 237
# File: docs/master/artisan.md, line: 237
#. type: Plain text
#, no-wrap
msgid "    // Optional argument with default value...\n"
"    'mail:send {user=foo}'\n"
msgstr "    // 有預設值的可選引數...\n"
"    'mail:send {user=foo}'\n"

# File: docs/9.x/artisan.md, line: 252
# File: docs/master/artisan.md, line: 252
#. type: Plain text
#, no-wrap
msgid "php artisan mail:send 1 --queue\n"
msgstr "php artisan mail:send 1 --queue\n"

# File: docs/9.x/artisan.md, line: 270
# File: docs/master/artisan.md, line: 270
#. type: Plain text
#, no-wrap
msgid "php artisan mail:send 1 --queue=default\n"
msgstr "php artisan mail:send 1 --queue=default\n"

# File: docs/9.x/artisan.md, line: 277
# File: docs/master/artisan.md, line: 277
#. type: Plain text
#, no-wrap
msgid "    'mail:send {user} {--queue=default}'\n"
msgstr "    'mail:send {user} {--queue=default}'\n"

# File: docs/9.x/artisan.md, line: 284
# File: docs/master/artisan.md, line: 284
#. type: Plain text
#, no-wrap
msgid "    'mail:send {user} {--Q|queue}'\n"
msgstr "    'mail:send {user} {--Q|queue}'\n"

# File: docs/9.x/artisan.md, line: 287
# File: docs/master/artisan.md, line: 287
#. type: Plain text
#, no-wrap
msgid "php artisan mail:send 1 -Q\n"
msgstr "php artisan mail:send 1 -Q\n"

# File: docs/9.x/artisan.md, line: 297
# File: docs/master/artisan.md, line: 297
#. type: Plain text
#, no-wrap
msgid "    'mail:send {user*}'\n"
msgstr "    'mail:send {user*}'\n"

# File: docs/9.x/artisan.md, line: 300
# File: docs/master/artisan.md, line: 300
#. type: Plain text
#, no-wrap
msgid "php artisan mail:send foo bar\n"
msgstr "php artisan mail:send foo bar\n"

# File: docs/9.x/artisan.md, line: 307
# File: docs/master/artisan.md, line: 307
#. type: Plain text
#, no-wrap
msgid "    'mail:send {user?*}'\n"
msgstr "    'mail:send {user?*}'\n"

# File: docs/9.x/artisan.md, line: 314
# File: docs/master/artisan.md, line: 314
#. type: Plain text
#, no-wrap
msgid "    'mail:send {user} {--id=*}'\n"
msgstr "    'mail:send {user} {--id=*}'\n"

# File: docs/9.x/artisan.md, line: 316
# File: docs/master/artisan.md, line: 316
#. type: Plain text
msgid "Such a command may be invoked by passing multiple `--id` arguments:"
msgstr "可以通過傳入多個 `-id` 引數來叫用這樣的指令："

# File: docs/9.x/artisan.md, line: 317
# File: docs/master/artisan.md, line: 317
#. type: Plain text
#, no-wrap
msgid "php artisan mail:send --id=1 --id=2\n"
msgstr "php artisan mail:send --id=1 --id=2\n"

# File: docs/9.x/artisan.md, line: 671
# File: docs/master/artisan.md, line: 671
#. type: Plain text
#, no-wrap
msgid "php artisan stub:publish\n"
msgstr "php artisan stub:publish\n"

