#
msgid ""
msgstr ""

#: docs/10.x/verification.md:block 1 (header)
msgid "Email Verification"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Model Preparation](#model-preparation)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Database Preparation](#database-preparation)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Routing](#verification-routing)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[The Email Verification Notice](#the-email-verification-notice)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[The Email Verification Handler](#the-email-verification-handler)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Resending The Verification Email](#resending-the-verification-email)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Protecting Routes](#protecting-routes)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Customization](#customization)"
msgstr ""

#: docs/10.x/verification.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/10.x/verification.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/verification.md:block 5 (paragraph)
msgid "Many web applications require users to verify their email addresses before using the application. Rather than forcing you to re-implement this feature by hand for each application you create, Laravel provides convenient built-in services for sending and verifying email verification requests."
msgstr ""

#: docs/10.x/verification.md:block 6 (quote)
msgid "**Note** Want to get started fast? Install one of the [Laravel application starter kits](/docs/{{version}}/starter-kits) in a fresh Laravel application. The starter kits will take care of scaffolding your entire authentication system, including email verification support."
msgstr ""

#: docs/10.x/verification.md:block 8 (header)
msgid "Model Preparation"
msgstr ""

#: docs/10.x/verification.md:block 9 (paragraph)
msgid "Before getting started, verify that your `App\\Models\\User` model implements the `Illuminate\\Contracts\\Auth\\MustVerifyEmail` contract:"
msgstr ""

#: docs/10.x/verification.md:block 10 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable implements MustVerifyEmail\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/verification.md:block 11 (paragraph)
msgid "Once this interface has been added to your model, newly registered users will automatically be sent an email containing an email verification link. As you can see by examining your application's `App\\Providers\\EventServiceProvider`, Laravel already contains a `SendEmailVerificationNotification` [listener](/docs/{{version}}/events) that is attached to the `Illuminate\\Auth\\Events\\Registered` event. This event listener will send the email verification link to the user."
msgstr ""

#: docs/10.x/verification.md:block 12 (paragraph)
msgid "If you are manually implementing registration within your application instead of using [a starter kit](/docs/{{version}}/starter-kits), you should ensure that you are dispatching the `Illuminate\\Auth\\Events\\Registered` event after a user's registration is successful:"
msgstr ""

#: docs/10.x/verification.md:block 13 (code)
msgid ""
"use Illuminate\\Auth\\Events\\Registered;\n"
"\n"
"event(new Registered($user));\n"
msgstr ""

#: docs/10.x/verification.md:block 15 (header)
msgid "Database Preparation"
msgstr ""

#: docs/10.x/verification.md:block 16 (paragraph)
msgid "Next, your `users` table must contain an `email_verified_at` column to store the date and time that the user's email address was verified. By default, the `users` table migration included with the Laravel framework already includes this column. So, all you need to do is run your database migrations:"
msgstr ""

#: docs/10.x/verification.md:block 17 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/verification.md:block 19 (header)
msgid "Routing"
msgstr ""

#: docs/10.x/verification.md:block 20 (paragraph)
msgid "To properly implement email verification, three routes will need to be defined. First, a route will be needed to display a notice to the user that they should click the email verification link in the verification email that Laravel sent them after registration."
msgstr ""

#: docs/10.x/verification.md:block 21 (paragraph)
msgid "Second, a route will be needed to handle requests generated when the user clicks the email verification link in the email."
msgstr ""

#: docs/10.x/verification.md:block 22 (paragraph)
msgid "Third, a route will be needed to resend a verification link if the user accidentally loses the first verification link."
msgstr ""

#: docs/10.x/verification.md:block 24 (header)
msgid "The Email Verification Notice"
msgstr ""

#: docs/10.x/verification.md:block 25 (paragraph)
msgid "As mentioned previously, a route should be defined that will return a view instructing the user to click the email verification link that was emailed to them by Laravel after registration. This view will be displayed to users when they try to access other parts of the application without verifying their email address first. Remember, the link is automatically emailed to the user as long as your `App\\Models\\User` model implements the `MustVerifyEmail` interface:"
msgstr ""

#: docs/10.x/verification.md:block 26 (code)
msgid ""
"Route::get('/email/verify', function () {\n"
"    return view('auth.verify-email');\n"
"})->middleware('auth')->name('verification.notice');\n"
msgstr ""

#: docs/10.x/verification.md:block 27 (paragraph)
msgid "The route that returns the email verification notice should be named `verification.notice`. It is important that the route is assigned this exact name since the `verified` middleware [included with Laravel](#protecting-routes) will automatically redirect to this route name if a user has not verified their email address."
msgstr ""

#: docs/10.x/verification.md:block 28 (quote)
msgid "**Note** When manually implementing email verification, you are required to define the contents of the verification notice view yourself. If you would like scaffolding that includes all necessary authentication and verification views, check out the [Laravel application starter kits](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/10.x/verification.md:block 30 (header)
msgid "The Email Verification Handler"
msgstr ""

#: docs/10.x/verification.md:block 31 (paragraph)
msgid "Next, we need to define a route that will handle requests generated when the user clicks the email verification link that was emailed to them. This route should be named `verification.verify` and be assigned the `auth` and `signed` middlewares:"
msgstr ""

#: docs/10.x/verification.md:block 32 (code)
msgid ""
"use Illuminate\\Foundation\\Auth\\EmailVerificationRequest;\n"
"\n"
"Route::get('/email/verify/{id}/{hash}', function (EmailVerificationRequest $request) {\n"
"    $request->fulfill();\n"
"\n"
"    return redirect('/home');\n"
"})->middleware(['auth', 'signed'])->name('verification.verify');\n"
msgstr ""

#: docs/10.x/verification.md:block 33 (paragraph)
msgid "Before moving on, let's take a closer look at this route. First, you'll notice we are using an `EmailVerificationRequest` request type instead of the typical `Illuminate\\Http\\Request` instance. The `EmailVerificationRequest` is a [form request](/docs/{{version}}/validation#form-request-validation) that is included with Laravel. This request will automatically take care of validating the request's `id` and `hash` parameters."
msgstr ""

#: docs/10.x/verification.md:block 34 (paragraph)
msgid "Next, we can proceed directly to calling the `fulfill` method on the request. This method will call the `markEmailAsVerified` method on the authenticated user and dispatch the `Illuminate\\Auth\\Events\\Verified` event. The `markEmailAsVerified` method is available to the default `App\\Models\\User` model via the `Illuminate\\Foundation\\Auth\\User` base class. Once the user's email address has been verified, you may redirect them wherever you wish."
msgstr ""

#: docs/10.x/verification.md:block 36 (header)
msgid "Resending The Verification Email"
msgstr ""

#: docs/10.x/verification.md:block 37 (paragraph)
msgid "Sometimes a user may misplace or accidentally delete the email address verification email. To accommodate this, you may wish to define a route to allow the user to request that the verification email be resent. You may then make a request to this route by placing a simple form submission button within your [verification notice view](#the-email-verification-notice):"
msgstr ""

#: docs/10.x/verification.md:block 38 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/email/verification-notification', function (Request $request) {\n"
"    $request->user()->sendEmailVerificationNotification();\n"
"\n"
"    return back()->with('message', 'Verification link sent!');\n"
"})->middleware(['auth', 'throttle:6,1'])->name('verification.send');\n"
msgstr ""

#: docs/10.x/verification.md:block 40 (header)
msgid "Protecting Routes"
msgstr ""

#: docs/10.x/verification.md:block 41 (paragraph)
msgid "[Route middleware](/docs/{{version}}/middleware) may be used to only allow verified users to access a given route. Laravel ships with a `verified` middleware alias, which is an alias for the `Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified` class. Since this middleware is already registered in your application's HTTP kernel, all you need to do is attach the middleware to a route definition. Typically, this middleware is paired with the `auth` middleware:"
msgstr ""

#: docs/10.x/verification.md:block 42 (code)
msgid ""
"Route::get('/profile', function () {\n"
"    // Only verified users may access this route...\n"
"})->middleware(['auth', 'verified']);\n"
msgstr ""

#: docs/10.x/verification.md:block 43 (paragraph)
msgid "If an unverified user attempts to access a route that has been assigned this middleware, they will automatically be redirected to the `verification.notice` [named route](/docs/{{version}}/routing#named-routes)."
msgstr ""

#: docs/10.x/verification.md:block 45 (header)
msgid "Customization"
msgstr ""

#: docs/10.x/verification.md:block 47 (header)
msgid "Verification Email Customization"
msgstr ""

#: docs/10.x/verification.md:block 48 (paragraph)
msgid "Although the default email verification notification should satisfy the requirements of most applications, Laravel allows you to customize how the email verification mail message is constructed."
msgstr ""

#: docs/10.x/verification.md:block 49 (paragraph)
msgid "To get started, pass a closure to the `toMailUsing` method provided by the `Illuminate\\Auth\\Notifications\\VerifyEmail` notification. The closure will receive the notifiable model instance that is receiving the notification as well as the signed email verification URL that the user must visit to verify their email address. The closure should return an instance of `Illuminate\\Notifications\\Messages\\MailMessage`. Typically, you should call the `toMailUsing` method from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#: docs/10.x/verification.md:block 50 (code)
msgid ""
"use Illuminate\\Auth\\Notifications\\VerifyEmail;\n"
"use Illuminate\\Notifications\\Messages\\MailMessage;\n"
"\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    // ...\n"
"\n"
"    VerifyEmail::toMailUsing(function (object $notifiable, string $url) {\n"
"        return (new MailMessage)\n"
"            ->subject('Verify Email Address')\n"
"            ->line('Click the button below to verify your email address.')\n"
"            ->action('Verify Email Address', $url);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/verification.md:block 51 (quote)
msgid "**Note** To learn more about mail notifications, please consult the [mail notification documentation](/docs/{{version}}/notifications#mail-notifications)."
msgstr ""

#: docs/10.x/verification.md:block 53 (header)
msgid "Events"
msgstr ""

#: docs/10.x/verification.md:block 54 (paragraph)
msgid "When using the [Laravel application starter kits](/docs/{{version}}/starter-kits), Laravel dispatches [events](/docs/{{version}}/events) during the email verification process. If you are manually handling email verification for your application, you may wish to manually dispatch these events after verification is completed. You may attach listeners to these events in your application's `EventServiceProvider`:"
msgstr ""

#: docs/10.x/verification.md:block 55 (code)
msgid ""
"use App\\Listeners\\LogVerifiedUser;\n"
"use Illuminate\\Auth\\Events\\Verified;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    Verified::class => [\n"
"        LogVerifiedUser::class,\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/8.x/verification.md:block 6 (quote)
msgid "{tip} Want to get started fast? Install one of the [Laravel application starter kits](/docs/{{version}}/starter-kits) in a fresh Laravel application. The starter kits will take care of scaffolding your entire authentication system, including email verification support."
msgstr ""

#: docs/8.x/verification.md:block 28 (quote)
msgid "{tip} When manually implementing email verification, you are required to define the contents of the verification notice view yourself. If you would like scaffolding that includes all necessary authentication and verification views, check out the [Laravel application starter kits](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/8.x/verification.md:block 41 (paragraph)
msgid "[Route middleware](/docs/{{version}}/middleware) may be used to only allow verified users to access a given route. Laravel ships with a `verified` middleware, which references the `Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified` class. Since this middleware is already registered in your application's HTTP kernel, all you need to do is attach the middleware to a route definition:"
msgstr ""

#: docs/8.x/verification.md:block 42 (code)
msgid ""
"Route::get('/profile', function () {\n"
"    // Only verified users may access this route...\n"
"})->middleware('verified');\n"
msgstr ""

#: docs/8.x/verification.md:block 50 (code)
msgid ""
"use Illuminate\\Auth\\Notifications\\VerifyEmail;\n"
"use Illuminate\\Notifications\\Messages\\MailMessage;\n"
"\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    // ...\n"
"\n"
"    VerifyEmail::toMailUsing(function ($notifiable, $url) {\n"
"        return (new MailMessage)\n"
"            ->subject('Verify Email Address')\n"
"            ->line('Click the button below to verify your email address.')\n"
"            ->action('Verify Email Address', $url);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/verification.md:block 51 (quote)
msgid "{tip} To learn more about mail notifications, please consult the [mail notification documentation](/docs/{{version}}/notifications#mail-notifications)."
msgstr ""

#: docs/8.x/verification.md:block 55 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Auth\\Events\\Verified' => [\n"
"        'App\\Listeners\\LogVerifiedUser',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/9.x/verification.md:block 41 (paragraph)
msgid "[Route middleware](/docs/{{version}}/middleware) may be used to only allow verified users to access a given route. Laravel ships with a `verified` middleware, which references the `Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified` class. Since this middleware is already registered in your application's HTTP kernel, all you need to do is attach the middleware to a route definition. Typically, this middleware is paired with the `auth` middleware:"
msgstr ""
