# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Cornch <cornch@cornch.dev>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title #
#: docs/8.x/migrations.md:1
#, no-wrap
msgid "Database: Migrations"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Generating Migrations](#generating-migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Squashing Migrations](#squashing-migrations)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Migration Structure](#migration-structure)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Running Migrations](#running-migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Rolling Back Migrations](#rolling-back-migrations)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Tables](#tables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Creating Tables](#creating-tables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Updating Tables](#updating-tables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Renaming / Dropping Tables](#renaming-and-dropping-tables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Columns](#columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Creating Columns](#creating-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Available Column Types](#available-column-types)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Column Modifiers](#column-modifiers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Modifying Columns](#modifying-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Dropping Columns](#dropping-columns)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24
msgid "[Indexes](#indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Creating Indexes](#creating-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Renaming Indexes](#renaming-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Dropping Indexes](#dropping-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24
msgid "[Foreign Key Constraints](#foreign-key-constraints)"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:26
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:26
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:29
msgid ""
"Migrations are like version control for your database, allowing your team to "
"define and share the application's database schema definition. If you have "
"ever had to tell a teammate to manually add a column to their local database "
"schema after pulling in your changes from source control, you've faced the "
"problem that database migrations solve."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:31
msgid ""
"The Laravel `Schema` [facade](/docs/{{version}}/facades) provides database "
"agnostic support for creating and manipulating tables across all of "
"Laravel's supported database systems. Typically, migrations will use this "
"facade to create and modify database tables and columns."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:33
#, no-wrap
msgid "<a name=\"generating-migrations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:33
#, no-wrap
msgid "Generating Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:36
msgid ""
"You may use the `make:migration` [Artisan command](/docs/{{version}}/"
"artisan) to generate a database migration. The new migration will be placed "
"in your `database/migrations` directory. Each migration filename contains a "
"timestamp that allows Laravel to determine the order of the migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:38
#, no-wrap
msgid "    php artisan make:migration create_flights_table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:40
msgid ""
"Laravel will use the name of the migration to attempt to guess the name of "
"the table and whether or not the migration will be creating a new table. If "
"Laravel is able to determine the table name from the migration name, Laravel "
"will pre-fill the generated migration file with the specified table. "
"Otherwise, you may simply specify the table in the migration file manually."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:42
msgid ""
"If you would like to specify a custom path for the generated migration, you "
"may use the `--path` option when executing the `make:migration` command. The "
"given path should be relative to your application's base path."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:44
#, no-wrap
msgid "> {tip} Migration stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:46
#, no-wrap
msgid "<a name=\"squashing-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:46
#, no-wrap
msgid "Squashing Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:49
msgid ""
"As you build your application, you may accumulate more and more migrations "
"over time. This can lead to your `database/migrations` directory becoming "
"bloated with potentially hundreds of migrations. If you would like, you may "
"\"squash\" your migrations into a single SQL file. To get started, execute "
"the `schema:dump` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:51
#, no-wrap
msgid "    php artisan schema:dump\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:54
#, no-wrap
msgid ""
"    // Dump the current database schema and prune all existing migrations...\n"
"    php artisan schema:dump --prune\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:56
msgid ""
"When you execute this command, Laravel will write a \"schema\" file to your "
"application's `database/schema` directory. Now, when you attempt to migrate "
"your database and no other migrations have been executed, Laravel will "
"execute the schema file's SQL statements first. After executing the schema "
"file's statements, Laravel will execute any remaining migrations that were "
"not part of the schema dump."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:58
msgid ""
"You should commit your database schema file to source control so that other "
"new developers on your team may quickly create your application's initial "
"database structure."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:60
#, no-wrap
msgid "> {note} Migration squashing is only available for the MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client. Schema dumps may not be restored to in-memory SQLite databases.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:62
#, no-wrap
msgid "<a name=\"migration-structure\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:62
#, no-wrap
msgid "Migration Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:65
msgid ""
"A migration class contains two methods: `up` and `down`. The `up` method is "
"used to add new tables, columns, or indexes to your database, while the "
"`down` method should reverse the operations performed by the `up` method."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:67
msgid ""
"Within both of these methods, you may use the Laravel schema builder to "
"expressively create and modify tables. To learn about all of the methods "
"available on the `Schema` builder, [check out its documentation](#creating-"
"tables). For example, the following migration creates a `flights` table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:69 docs/8.x/migrations.md:846
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:73
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Migrations\\Migration;\n"
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:90
#, no-wrap
msgid ""
"    class CreateFlightsTable extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->string('name');\n"
"                $table->string('airline');\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:101
#, no-wrap
msgid ""
"        /**\n"
"         * Reverse the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function down()\n"
"        {\n"
"            Schema::drop('flights');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:103
#, no-wrap
msgid "<a name=\"setting-the-migration-connection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:103
#, no-wrap
msgid "Setting The Migration Connection"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:106
msgid ""
"If your migration will be interacting with a database connection other than "
"your application's default database connection, you should set the `"
"$connection` property of your migration:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:113
#, no-wrap
msgid ""
"    /**\n"
"     * The database connection that should be used by the migration.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'pgsql';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:123
#, no-wrap
msgid ""
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:125
#, no-wrap
msgid "<a name=\"running-migrations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:125
#, no-wrap
msgid "Running Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:128
msgid ""
"To run all of your outstanding migrations, execute the `migrate` Artisan "
"command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:130
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:132
msgid ""
"If you would like to see which migrations have run thus far, you may use the "
"`migrate:status` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:134
#, no-wrap
msgid "    php artisan migrate:status\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:136
#, no-wrap
msgid "<a name=\"forcing-migrations-to-run-in-production\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:136
#, no-wrap
msgid "Forcing Migrations To Run In Production"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:139
msgid ""
"Some migration operations are destructive, which means they may cause you to "
"lose data. In order to protect you from running these commands against your "
"production database, you will be prompted for confirmation before the "
"commands are executed. To force the commands to run without a prompt, use "
"the `--force` flag:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:141
#, no-wrap
msgid "    php artisan migrate --force\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:143
#, no-wrap
msgid "<a name=\"rolling-back-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:143
#, no-wrap
msgid "Rolling Back Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:146
msgid ""
"To roll back the latest migration operation, you may use the `rollback` "
"Artisan command. This command rolls back the last \"batch\" of migrations, "
"which may include multiple migration files:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:148
#, no-wrap
msgid "    php artisan migrate:rollback\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:150
msgid ""
"You may roll back a limited number of migrations by providing the `step` "
"option to the `rollback` command. For example, the following command will "
"roll back the last five migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:152
#, no-wrap
msgid "    php artisan migrate:rollback --step=5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:154
msgid ""
"The `migrate:reset` command will roll back all of your application's "
"migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:156
#, no-wrap
msgid "    php artisan migrate:reset\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:158
#, no-wrap
msgid "<a name=\"roll-back-migrate-using-a-single-command\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:158
#, no-wrap
msgid "Roll Back & Migrate Using A Single Command"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:161
msgid ""
"The `migrate:refresh` command will roll back all of your migrations and then "
"execute the `migrate` command. This command effectively re-creates your "
"entire database:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:163
#, no-wrap
msgid "    php artisan migrate:refresh\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:166
#, no-wrap
msgid ""
"    // Refresh the database and run all database seeds...\n"
"    php artisan migrate:refresh --seed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:168
msgid ""
"You may roll back and re-migrate a limited number of migrations by providing "
"the `step` option to the `refresh` command. For example, the following "
"command will roll back and re-migrate the last five migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:170
#, no-wrap
msgid "    php artisan migrate:refresh --step=5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:172
#, no-wrap
msgid "<a name=\"drop-all-tables-migrate\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:172
#, no-wrap
msgid "Drop All Tables & Migrate"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:175
msgid ""
"The `migrate:fresh` command will drop all tables from the database and then "
"execute the `migrate` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:177
#, no-wrap
msgid "    php artisan migrate:fresh\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:179
#, no-wrap
msgid "    php artisan migrate:fresh --seed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:181
#, no-wrap
msgid "> {note} The `migrate:fresh` command will drop all database tables regardless of their prefix. This command should be used with caution when developing on a database that is shared with other applications.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:183
#, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:183
#, no-wrap
msgid "Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:186
#, no-wrap
msgid "<a name=\"creating-tables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:186
#, no-wrap
msgid "Creating Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:189
msgid ""
"To create a new database table, use the `create` method on the `Schema` "
"facade. The `create` method accepts two arguments: the first is the name of "
"the table, while the second is a closure which receives a `Blueprint` object "
"that may be used to define the new table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:192 docs/8.x/migrations.md:256
#: docs/8.x/migrations.md:291 docs/8.x/migrations.md:814
#: docs/8.x/migrations.md:975 docs/8.x/migrations.md:1056
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:199
#, no-wrap
msgid ""
"    Schema::create('users', function (Blueprint $table) {\n"
"        $table->id();\n"
"        $table->string('name');\n"
"        $table->string('email');\n"
"        $table->timestamps();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:201
msgid ""
"When creating the table, you may use any of the schema builder's [column "
"methods](#creating-columns) to define the table's columns."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:203
#, no-wrap
msgid "<a name=\"checking-for-table-column-existence\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:203
#, no-wrap
msgid "Checking For Table / Column Existence"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:206
msgid ""
"You may check for the existence of a table or column using the `hasTable` "
"and `hasColumn` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:210
#, no-wrap
msgid ""
"    if (Schema::hasTable('users')) {\n"
"        // The \"users\" table exists...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:214
#, no-wrap
msgid ""
"    if (Schema::hasColumn('users', 'email')) {\n"
"        // The \"users\" table exists and has an \"email\" column...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:216
#, no-wrap
msgid "<a name=\"database-connection-table-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:216
#, no-wrap
msgid "Database Connection & Table Options"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:219
msgid ""
"If you want to perform a schema operation on a database connection that is "
"not your application's default connection, use the `connection` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:223
#, no-wrap
msgid ""
"    Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n"
"        $table->id();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:225
msgid ""
"In addition, a few other properties and methods may be used to define other "
"aspects of the table's creation. The `engine` property may be used to "
"specify the table's storage engine when using MySQL:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:228
#, no-wrap
msgid ""
"    Schema::create('users', function (Blueprint $table) {\n"
"        $table->engine = 'InnoDB';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:231 docs/8.x/migrations.md:240
#: docs/8.x/migrations.md:248
#, no-wrap
msgid ""
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:233
msgid ""
"The `charset` and `collation` properties may be used to specify the "
"character set and collation for the created table when using MySQL:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:237
#, no-wrap
msgid ""
"    Schema::create('users', function (Blueprint $table) {\n"
"        $table->charset = 'utf8mb4';\n"
"        $table->collation = 'utf8mb4_unicode_ci';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:242
msgid ""
"The `temporary` method may be used to indicate that the table should be "
"\"temporary\". Temporary tables are only visible to the current connection's "
"database session and are dropped automatically when the connection is closed:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:245
#, no-wrap
msgid ""
"    Schema::create('calculations', function (Blueprint $table) {\n"
"        $table->temporary();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:250
#, no-wrap
msgid "<a name=\"updating-tables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:250
#, no-wrap
msgid "Updating Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:253
msgid ""
"The `table` method on the `Schema` facade may be used to update existing "
"tables. Like the `create` method, the `table` method accepts two arguments: "
"the name of the table and a closure that receives a `Blueprint` instance you "
"may use to add columns or indexes to the table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:260 docs/8.x/migrations.md:295
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->integer('votes');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:262
#, no-wrap
msgid "<a name=\"renaming-and-dropping-tables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:262
#, no-wrap
msgid "Renaming / Dropping Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:265
msgid "To rename an existing database table, use the `rename` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:267 docs/8.x/migrations.md:1011
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:269
#, no-wrap
msgid "    Schema::rename($from, $to);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:271
msgid ""
"To drop an existing table, you may use the `drop` or `dropIfExists` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:273
#, no-wrap
msgid "    Schema::drop('users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:275
#, no-wrap
msgid "    Schema::dropIfExists('users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:277
#, no-wrap
msgid "<a name=\"renaming-tables-with-foreign-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:277
#, no-wrap
msgid "Renaming Tables With Foreign Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:280
msgid ""
"Before renaming a table, you should verify that any foreign key constraints "
"on the table have an explicit name in your migration files instead of "
"letting Laravel assign a convention based name. Otherwise, the foreign key "
"constraint name will refer to the old table name."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:282
#, no-wrap
msgid "<a name=\"columns\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:282
#, no-wrap
msgid "Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:285
#, no-wrap
msgid "<a name=\"creating-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:285
#, no-wrap
msgid "Creating Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:288
msgid ""
"The `table` method on the `Schema` facade may be used to update existing "
"tables. Like the `create` method, the `table` method accepts two arguments: "
"the name of the table and a closure that receives an `Illuminate\\Database"
"\\Schema\\Blueprint` instance you may use to add columns to the table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:297
#, no-wrap
msgid "<a name=\"available-column-types\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:297
#, no-wrap
msgid "Available Column Types"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:300
msgid ""
"The schema builder blueprint offers a variety of methods that correspond to "
"the different types of columns you can add to your database tables. Each of "
"the available methods are listed in the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:306
#, no-wrap
msgid ""
"<style>\n"
"    #collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:311
#, no-wrap
msgid ""
"    #collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:375
#, no-wrap
msgid ""
"<div id=\"collection-method-list\" markdown=\"1\">\n"
"[bigIncrements](#column-method-bigIncrements)\n"
"[bigInteger](#column-method-bigInteger)\n"
"[binary](#column-method-binary)\n"
"[boolean](#column-method-boolean)\n"
"[char](#column-method-char)\n"
"[dateTimeTz](#column-method-dateTimeTz)\n"
"[dateTime](#column-method-dateTime)\n"
"[date](#column-method-date)\n"
"[decimal](#column-method-decimal)\n"
"[double](#column-method-double)\n"
"[enum](#column-method-enum)\n"
"[float](#column-method-float)\n"
"[foreignId](#column-method-foreignId)\n"
"[geometryCollection](#column-method-geometryCollection)\n"
"[geometry](#column-method-geometry)\n"
"[id](#column-method-id)\n"
"[increments](#column-method-increments)\n"
"[integer](#column-method-integer)\n"
"[ipAddress](#column-method-ipAddress)\n"
"[json](#column-method-json)\n"
"[jsonb](#column-method-jsonb)\n"
"[lineString](#column-method-lineString)\n"
"[longText](#column-method-longText)\n"
"[macAddress](#column-method-macAddress)\n"
"[mediumIncrements](#column-method-mediumIncrements)\n"
"[mediumInteger](#column-method-mediumInteger)\n"
"[mediumText](#column-method-mediumText)\n"
"[morphs](#column-method-morphs)\n"
"[multiLineString](#column-method-multiLineString)\n"
"[multiPoint](#column-method-multiPoint)\n"
"[multiPolygon](#column-method-multiPolygon)\n"
"[nullableMorphs](#column-method-nullableMorphs)\n"
"[nullableTimestamps](#column-method-nullableTimestamps)\n"
"[nullableUuidMorphs](#column-method-nullableUuidMorphs)\n"
"[point](#column-method-point)\n"
"[polygon](#column-method-polygon)\n"
"[rememberToken](#column-method-rememberToken)\n"
"[set](#column-method-set)\n"
"[smallIncrements](#column-method-smallIncrements)\n"
"[smallInteger](#column-method-smallInteger)\n"
"[softDeletesTz](#column-method-softDeletesTz)\n"
"[softDeletes](#column-method-softDeletes)\n"
"[string](#column-method-string)\n"
"[text](#column-method-text)\n"
"[timeTz](#column-method-timeTz)\n"
"[time](#column-method-time)\n"
"[timestampTz](#column-method-timestampTz)\n"
"[timestamp](#column-method-timestamp)\n"
"[timestampsTz](#column-method-timestampsTz)\n"
"[timestamps](#column-method-timestamps)\n"
"[tinyIncrements](#column-method-tinyIncrements)\n"
"[tinyInteger](#column-method-tinyInteger)\n"
"[unsignedBigInteger](#column-method-unsignedBigInteger)\n"
"[unsignedDecimal](#column-method-unsignedDecimal)\n"
"[unsignedInteger](#column-method-unsignedInteger)\n"
"[unsignedMediumInteger](#column-method-unsignedMediumInteger)\n"
"[unsignedSmallInteger](#column-method-unsignedSmallInteger)\n"
"[unsignedTinyInteger](#column-method-unsignedTinyInteger)\n"
"[uuidMorphs](#column-method-uuidMorphs)\n"
"[uuid](#column-method-uuid)\n"
"[year](#column-method-year)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:377
#, no-wrap
msgid "<a name=\"column-method-bigIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:377
#, no-wrap
msgid "`bigIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:380
msgid ""
"The `bigIncrements` method creates an auto-incrementing `UNSIGNED BIGINT` "
"(primary key) equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:382
#, no-wrap
msgid "    $table->bigIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:384
#, no-wrap
msgid "<a name=\"column-method-bigInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:384
#, no-wrap
msgid "`bigInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:387
msgid "The `bigInteger` method creates a `BIGINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:389
#, no-wrap
msgid "    $table->bigInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:391
#, no-wrap
msgid "<a name=\"column-method-binary\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:391
#, no-wrap
msgid "`binary()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:394
msgid "The `binary` method creates a `BLOB` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:396
#, no-wrap
msgid "    $table->binary('photo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:398
#, no-wrap
msgid "<a name=\"column-method-boolean\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:398
#, no-wrap
msgid "`boolean()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:401
msgid "The `boolean` method creates a `BOOLEAN` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:403
#, no-wrap
msgid "    $table->boolean('confirmed');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:405
#, no-wrap
msgid "<a name=\"column-method-char\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:405
#, no-wrap
msgid "`char()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:408
msgid ""
"The `char` method creates a `CHAR` equivalent column with of a given length:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:410
#, no-wrap
msgid "    $table->char('name', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:412
#, no-wrap
msgid "<a name=\"column-method-dateTimeTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:412
#, no-wrap
msgid "`dateTimeTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:415
msgid ""
"The `dateTimeTz` method creates a `DATETIME` (with timezone) equivalent "
"column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:417
#, no-wrap
msgid "    $table->dateTimeTz('created_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:419
#, no-wrap
msgid "<a name=\"column-method-dateTime\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:419
#, no-wrap
msgid "`dateTime()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:422
msgid ""
"The `dateTime` method creates a `DATETIME` equivalent column with an "
"optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:424
#, no-wrap
msgid "    $table->dateTime('created_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:426
#, no-wrap
msgid "<a name=\"column-method-date\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:426
#, no-wrap
msgid "`date()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:429
msgid "The `date` method creates a `DATE` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:431
#, no-wrap
msgid "    $table->date('created_at');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:433
#, no-wrap
msgid "<a name=\"column-method-decimal\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:433
#, no-wrap
msgid "`decimal()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:436
msgid ""
"The `decimal` method creates a `DECIMAL` equivalent column with the given "
"precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:438
#, no-wrap
msgid "    $table->decimal('amount', $precision = 8, $scale = 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:440
#, no-wrap
msgid "<a name=\"column-method-double\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:440
#, no-wrap
msgid "`double()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:443
msgid ""
"The `double` method creates a `DOUBLE` equivalent column with the given "
"precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:445
#, no-wrap
msgid "    $table->double('amount', 8, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:447
#, no-wrap
msgid "<a name=\"column-method-enum\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:447
#, no-wrap
msgid "`enum()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:450
msgid ""
"The `enum` method creates a `ENUM` equivalent column with the given valid "
"values:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:452
#, no-wrap
msgid "    $table->enum('difficulty', ['easy', 'hard']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:454
#, no-wrap
msgid "<a name=\"column-method-float\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:454
#, no-wrap
msgid "`float()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:457
msgid ""
"The `float` method creates a `FLOAT` equivalent column with the given "
"precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:459
#, no-wrap
msgid "    $table->float('amount', 8, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:461
#, no-wrap
msgid "<a name=\"column-method-foreignId\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:461
#, no-wrap
msgid "`foreignId()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:464
msgid "The `foreignId` method is an alias of the `unsignedBigInteger` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:466
#, no-wrap
msgid "    $table->foreignId('user_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:468
#, no-wrap
msgid "<a name=\"column-method-geometryCollection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:468
#, no-wrap
msgid "`geometryCollection()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:471
msgid ""
"The `geometryCollection` method creates a `GEOMETRYCOLLECTION` equivalent "
"column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:473
#, no-wrap
msgid "    $table->geometryCollection('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:475
#, no-wrap
msgid "<a name=\"column-method-geometry\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:475
#, no-wrap
msgid "`geometry()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:478
msgid "The `geometry` method creates a `GEOMETRY` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:480
#, no-wrap
msgid "    $table->geometry('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:482
#, no-wrap
msgid "<a name=\"column-method-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:482
#, no-wrap
msgid "`id()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:485
msgid ""
"The `id` method is an alias of the `bigIncrements` method. By default, the "
"method will create an `id` column; however, you may pass a column name if "
"you would like to assign a different name to the column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:487
#, no-wrap
msgid "    $table->id();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:489
#, no-wrap
msgid "<a name=\"column-method-increments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:489
#, no-wrap
msgid "`increments()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:492
msgid ""
"The `increments` method creates an auto-incrementing `UNSIGNED INTEGER` "
"equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:494
#, no-wrap
msgid "    $table->increments('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:496
#, no-wrap
msgid "<a name=\"column-method-integer\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:496
#, no-wrap
msgid "`integer()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:499
msgid "The `integer` method creates an `INTEGER` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:501
#, no-wrap
msgid "    $table->integer('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:503
#, no-wrap
msgid "<a name=\"column-method-ipAddress\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:503
#, no-wrap
msgid "`ipAddress()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:506
msgid "The `ipAddress` method creates an `INTEGER` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:508
#, no-wrap
msgid "    $table->ipAddress('visitor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:510
#, no-wrap
msgid "<a name=\"column-method-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:510
#, no-wrap
msgid "`json()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:513
msgid "The `json` method creates a `JSON` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:515
#, no-wrap
msgid "    $table->json('options');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:517
#, no-wrap
msgid "<a name=\"column-method-jsonb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:517
#, no-wrap
msgid "`jsonb()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:520
msgid "The `jsonb` method creates a `JSONB` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:522
#, no-wrap
msgid "    $table->jsonb('options');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:524
#, no-wrap
msgid "<a name=\"column-method-lineString\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:524
#, no-wrap
msgid "`lineString()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:527
msgid "The `lineString` method creates a `LINESTRING` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:529
#, no-wrap
msgid "    $table->lineString('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:531
#, no-wrap
msgid "<a name=\"column-method-longText\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:531
#, no-wrap
msgid "`longText()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:534
msgid "The `longText` method creates a `LONGTEXT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:536
#, no-wrap
msgid "    $table->longText('description');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:538
#, no-wrap
msgid "<a name=\"column-method-macAddress\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:538
#, no-wrap
msgid "`macAddress()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:541
msgid ""
"The `macAddress` method creates a column that is intended to hold a MAC "
"address. Some database systems, such as PostgreSQL, have a dedicated column "
"type for this type of data. Other database systems will use a string "
"equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:543
#, no-wrap
msgid "    $table->macAddress('device');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:545
#, no-wrap
msgid "<a name=\"column-method-mediumIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:545
#, no-wrap
msgid "`mediumIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:548
msgid ""
"The `mediumIncrements` method creates an auto-incrementing `UNSIGNED "
"MEDIUMINT` equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:550
#, no-wrap
msgid "    $table->mediumIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:552
#, no-wrap
msgid "<a name=\"column-method-mediumInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:552
#, no-wrap
msgid "`mediumInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:555
msgid "The `mediumInteger` method creates a `MEDIUMINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:557
#, no-wrap
msgid "    $table->mediumInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:559
#, no-wrap
msgid "<a name=\"column-method-mediumText\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:559
#, no-wrap
msgid "`mediumText()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:562
msgid "The `mediumText` method creates a `MEDIUMTEXT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:564
#, no-wrap
msgid "    $table->mediumText('description');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:566
#, no-wrap
msgid "<a name=\"column-method-morphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:566
#, no-wrap
msgid "`morphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:569
msgid ""
"The `morphs` method is a convenience method that adds a `{column}_id` "
"`UNSIGNED BIGINT` equivalent column and a `{column}_type` `VARCHAR` "
"equivalent column."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:571
msgid ""
"This method is intended to be used when defining the columns necessary for a "
"polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-"
"relationships). In the following example, `taggable_id` and `taggable_type` "
"columns would be created:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:573
#, no-wrap
msgid "    $table->morphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:575
#, no-wrap
msgid "<a name=\"column-method-multiLineString\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:575
#, no-wrap
msgid "`multiLineString()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:578
msgid ""
"The `multiLineString` method creates a `MULTILINESTRING` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:580
#, no-wrap
msgid "    $table->multiLineString('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:582
#, no-wrap
msgid "<a name=\"column-method-multiPoint\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:582
#, no-wrap
msgid "`multiPoint()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:585
msgid "The `multiPoint` method creates a `MULTIPOINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:587
#, no-wrap
msgid "    $table->multiPoint('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:589
#, no-wrap
msgid "<a name=\"column-method-multiPolygon\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:589
#, no-wrap
msgid "`multiPolygon()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:592
msgid "The `multiPolygon` method creates a `MULTIPOLYGON` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:594
#, no-wrap
msgid "    $table->multiPolygon('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:596
#, no-wrap
msgid "<a name=\"column-method-nullableTimestamps\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:596
#, no-wrap
msgid "`nullableTimestamps()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:599
msgid ""
"The method is similar to the [timestamps](#column-method-timestamps) method; "
"however, the column that is created will be \"nullable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:601
#, no-wrap
msgid "    $table->nullableTimestamps(0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:603
#, no-wrap
msgid "<a name=\"column-method-nullableMorphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:603
#, no-wrap
msgid "`nullableMorphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:606
msgid ""
"The method is similar to the [morphs](#column-method-morphs) method; "
"however, the columns that are created will be \"nullable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:608
#, no-wrap
msgid "    $table->nullableMorphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:610
#, no-wrap
msgid "<a name=\"column-method-nullableUuidMorphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:610
#, no-wrap
msgid "`nullableUuidMorphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:613
msgid ""
"The method is similar to the [uuidMorphs](#column-method-uuidMorphs) method; "
"however, the columns that are created will be \"nullable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:615
#, no-wrap
msgid "    $table->nullableUuidMorphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:617
#, no-wrap
msgid "<a name=\"column-method-point\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:617
#, no-wrap
msgid "`point()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:620
msgid "The `point` method creates a `POINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:622
#, no-wrap
msgid "    $table->point('position');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:624
#, no-wrap
msgid "<a name=\"column-method-polygon\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:624
#, no-wrap
msgid "`polygon()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:627
msgid "The `polygon` method creates a `POLYGON` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:629
#, no-wrap
msgid "    $table->polygon('position');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:631
#, no-wrap
msgid "<a name=\"column-method-rememberToken\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:631
#, no-wrap
msgid "`rememberToken()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:634
msgid ""
"The `rememberToken` method creates a nullable, `VARCHAR(100)` equivalent "
"column that is intended to store the current \"remember me\" [authentication "
"token](/docs/{{version}}/authentication#remembering-users):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:636
#, no-wrap
msgid "    $table->rememberToken();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:638
#, no-wrap
msgid "<a name=\"column-method-set\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:638
#, no-wrap
msgid "`set()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:641
msgid ""
"The `set` method creates a `SET` equivalent column with the given list of "
"valid values:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:643
#, no-wrap
msgid "    $table->set('flavors', ['strawberry', 'vanilla']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:645
#, no-wrap
msgid "<a name=\"column-method-smallIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:645
#, no-wrap
msgid "`smallIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:648
msgid ""
"The `smallIncrements` method creates an auto-incrementing `UNSIGNED "
"SMALLINT` equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:650
#, no-wrap
msgid "    $table->smallIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:652
#, no-wrap
msgid "<a name=\"column-method-smallInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:652
#, no-wrap
msgid "`smallInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:655
msgid "The `smallInteger` method creates a `SMALLINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:657
#, no-wrap
msgid "    $table->smallInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:659
#, no-wrap
msgid "<a name=\"column-method-softDeletesTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:659
#, no-wrap
msgid "`softDeletesTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:662
msgid ""
"The `softDeletesTz` method adds a nullable `deleted_at` `TIMESTAMP` (with "
"timezone) equivalent column with an optional precision (total digits). This "
"column is intended to store the `deleted_at` timestamp needed for Eloquent's "
"\"soft delete\" functionality:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:664
#, no-wrap
msgid "    $table->softDeletesTz($column = 'deleted_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:666
#, no-wrap
msgid "<a name=\"column-method-softDeletes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:666
#, no-wrap
msgid "`softDeletes()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:669
msgid ""
"The `softDeletes` method adds a nullable `deleted_at` `TIMESTAMP` equivalent "
"column with an optional precision (total digits). This column is intended to "
"store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" "
"functionality:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:671
#, no-wrap
msgid "    $table->softDeletes($column = 'deleted_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:673
#, no-wrap
msgid "<a name=\"column-method-string\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:673
#, no-wrap
msgid "`string()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:676
msgid ""
"The `string` method creates a `VARCHAR` equivalent column of the given "
"length:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:678
#, no-wrap
msgid "    $table->string('name', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:680
#, no-wrap
msgid "<a name=\"column-method-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:680
#, no-wrap
msgid "`text()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:683
msgid "The `text` method creates a `TEXT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:685
#, no-wrap
msgid "    $table->text('description');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:687
#, no-wrap
msgid "<a name=\"column-method-timeTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:687
#, no-wrap
msgid "`timeTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:690
msgid ""
"The `timeTz` method creates a `TIME` (with timezone) equivalent column with "
"an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:692
#, no-wrap
msgid "    $table->timeTz('sunrise', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:694
#, no-wrap
msgid "<a name=\"column-method-time\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:694
#, no-wrap
msgid "`time()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:697
msgid ""
"The `time` method creates a `TIME` equivalent column with an optional "
"precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:699
#, no-wrap
msgid "    $table->time('sunrise', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:701
#, no-wrap
msgid "<a name=\"column-method-timestampTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:701
#, no-wrap
msgid "`timestampTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:704
msgid ""
"The `timestampTz` method creates a `TIMESTAMP` (with timezone) equivalent "
"column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:706
#, no-wrap
msgid "    $table->timestampTz('added_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:708
#, no-wrap
msgid "<a name=\"column-method-timestamp\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:708
#, no-wrap
msgid "`timestamp()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:711
msgid ""
"The `timestamp` method creates a `TIMESTAMP` equivalent column with an "
"optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:713
#, no-wrap
msgid "    $table->timestamp('added_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:715
#, no-wrap
msgid "<a name=\"column-method-timestampsTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:715
#, no-wrap
msgid "`timestampsTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:718
msgid ""
"The `timestampsTz` method creates `created_at` and `updated_at` `TIMESTAMP` "
"(with timezone) equivalent columns with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:720
#, no-wrap
msgid "    $table->timestampsTz($precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:722
#, no-wrap
msgid "<a name=\"column-method-timestamps\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:722
#, no-wrap
msgid "`timestamps()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:725
msgid ""
"The `timestamps` method creates `created_at` and `updated_at` `TIMESTAMP` "
"equivalent columns with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:727
#, no-wrap
msgid "    $table->timestamps($precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:729
#, no-wrap
msgid "<a name=\"column-method-tinyIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:729
#, no-wrap
msgid "`tinyIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:732
msgid ""
"The `tinyIncrements` method creates an auto-incrementing `UNSIGNED TINYINT` "
"equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:734
#, no-wrap
msgid "    $table->tinyIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:736
#, no-wrap
msgid "<a name=\"column-method-tinyInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:736
#, no-wrap
msgid "`tinyInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:739
msgid "The `tinyInteger` method creates a `TINYINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:741
#, no-wrap
msgid "    $table->tinyInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:743
#, no-wrap
msgid "<a name=\"column-method-unsignedBigInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:743
#, no-wrap
msgid "`unsignedBigInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:746
msgid ""
"The `unsignedBigInteger` method creates an `UNSIGNED BIGINT` equivalent "
"column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:748
#, no-wrap
msgid "    $table->unsignedBigInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:750
#, no-wrap
msgid "<a name=\"column-method-unsignedDecimal\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:750
#, no-wrap
msgid "`unsignedDecimal()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:753
msgid ""
"The `unsignedDecimal` method creates an `UNSIGNED DECIMAL` equivalent column "
"with an optional precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:755
#, no-wrap
msgid "    $table->unsignedDecimal('amount', $precision = 8, $scale = 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:757
#, no-wrap
msgid "<a name=\"column-method-unsignedInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:757
#, no-wrap
msgid "`unsignedInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:760
msgid ""
"The `unsignedInteger` method creates an `UNSIGNED INTEGER` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:762
#, no-wrap
msgid "    $table->unsignedInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:764
#, no-wrap
msgid "<a name=\"column-method-unsignedMediumInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:764
#, no-wrap
msgid "`unsignedMediumInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:767
msgid ""
"The `unsignedMediumInteger` method creates an `UNSIGNED MEDIUMINT` "
"equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:769
#, no-wrap
msgid "    $table->unsignedMediumInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:771
#, no-wrap
msgid "<a name=\"column-method-unsignedSmallInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:771
#, no-wrap
msgid "`unsignedSmallInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:774
msgid ""
"The `unsignedSmallInteger` method creates an `UNSIGNED SMALLINT` equivalent "
"column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:776
#, no-wrap
msgid "    $table->unsignedSmallInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:778
#, no-wrap
msgid "<a name=\"column-method-unsignedTinyInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:778
#, no-wrap
msgid "`unsignedTinyInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:781
msgid ""
"The `unsignedTinyInteger` method creates an `UNSIGNED TINYINT` equivalent "
"column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:783
#, no-wrap
msgid "    $table->unsignedTinyInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:785
#, no-wrap
msgid "<a name=\"column-method-uuidMorphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:785
#, no-wrap
msgid "`uuidMorphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:788
msgid ""
"The `uuidMorphs` method is a convenience method that adds a `{column}_id` "
"`CHAR(36)` equivalent column and a `{column}_type` `VARCHAR` equivalent "
"column."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:790
msgid ""
"This method is intended to be used when defining the columns necessary for a "
"polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-"
"relationships) that use UUID identifiers. In the following example, "
"`taggable_id` and `taggable_type` columns would be created:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:792
#, no-wrap
msgid "    $table->uuidMorphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:794
#, no-wrap
msgid "<a name=\"column-method-uuid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:794
#, no-wrap
msgid "`uuid()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:797
msgid "The `uuid` method creates a `UUID` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:799
#, no-wrap
msgid "    $table->uuid('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:801
#, no-wrap
msgid "<a name=\"column-method-year\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:801
#, no-wrap
msgid "`year()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:804
msgid "The `year` method creates a `YEAR` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:806
#, no-wrap
msgid "    $table->year('birth_year');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:808
#, no-wrap
msgid "<a name=\"column-modifiers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:808
#, no-wrap
msgid "Column Modifiers"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:811
msgid ""
"In addition to the column types listed above, there are several column "
"\"modifiers\" you may use when adding a column to a database table. For "
"example, to make the column \"nullable\", you may use the `nullable` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:818
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('email')->nullable();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:820
msgid ""
"The following table contains all of the available column modifiers. This "
"list does not include [index modifiers](#creating-indexes):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:839
#, no-wrap
msgid ""
"Modifier  |  Description\n"
"--------  |  -----------\n"
"`->after('column')`  |  Place the column \"after\" another column (MySQL).\n"
"`->autoIncrement()`  |  Set INTEGER columns as auto-incrementing (primary key).\n"
"`->charset('utf8mb4')`  |  Specify a character set for the column (MySQL).\n"
"`->collation('utf8mb4_unicode_ci')`  |  Specify a collation for the column (MySQL/PostgreSQL/SQL Server).\n"
"`->comment('my comment')`  |  Add a comment to a column (MySQL/PostgreSQL).\n"
"`->default($value)`  |  Specify a \"default\" value for the column.\n"
"`->first()`  |  Place the column \"first\" in the table (MySQL).\n"
"`->from($integer)`  |  Set the starting value of an auto-incrementing field (MySQL / PostgreSQL).\n"
"`->nullable($value = true)`  |  Allow NULL values to be inserted into the column.\n"
"`->storedAs($expression)`  |  Create a stored generated column (MySQL).\n"
"`->unsigned()`  |  Set INTEGER columns as UNSIGNED (MySQL).\n"
"`->useCurrent()`  |  Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value.\n"
"`->useCurrentOnUpdate()`  |  Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated.\n"
"`->virtualAs($expression)`  |  Create a virtual generated column (MySQL).\n"
"`->generatedAs($expression)`  |  Create an identity column with specified sequence options (PostgreSQL).\n"
"`->always()`  |  Defines the precedence of sequence values over input for an identity column (PostgreSQL).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:841
#, no-wrap
msgid "<a name=\"default-expressions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:841
#, no-wrap
msgid "Default Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:844
msgid ""
"The `default` modifier accepts a value or an `Illuminate\\Database\\Query"
"\\Expression` instance. Using an `Expression` instance will prevent Laravel "
"from wrapping the value in quotes and allow you to use database specific "
"functions. One situation where this is particularly useful is when you need "
"to assign default values to JSON columns:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:851
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Schema;\n"
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Database\\Query\\Expression;\n"
"    use Illuminate\\Database\\Migrations\\Migration;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:868
#, no-wrap
msgid ""
"    class CreateFlightsTable extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:870
#, no-wrap
msgid "> {note} Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:872
#, no-wrap
msgid "<a name=\"column-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:872
#, no-wrap
msgid "Column Order"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:875
msgid ""
"When using the MySQL database, the `after` method may be used to add columns "
"after an existing column in the schema:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:881
#, no-wrap
msgid ""
"    $table->after('password', function ($table) {\n"
"        $table->string('address_line1');\n"
"        $table->string('address_line2');\n"
"        $table->string('city');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:883
#, no-wrap
msgid "<a name=\"modifying-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:883
#, no-wrap
msgid "Modifying Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:886
#, no-wrap
msgid "<a name=\"prerequisites\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:886
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:889
msgid ""
"Before modifying a column, you must install the `doctrine/dbal` package "
"using the Composer package manager. The Doctrine DBAL library is used to "
"determine the current state of the column and to create the SQL queries "
"needed to make the requested changes to your column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:891
#, no-wrap
msgid "    composer require doctrine/dbal\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:893
msgid ""
"If you plan to modify columns created using the `timestamp` method, you must "
"also add the following configuration to your application's `config/database."
"php` configuration file:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/migrations.md:894
#, no-wrap
msgid ""
"use Illuminate\\Database\\DBAL\\TimestampType;\n"
"\n"
"'dbal' => [\n"
"    'types' => [\n"
"        'timestamp' => TimestampType::class,\n"
"    ],\n"
"],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:905
#, no-wrap
msgid "> {note} If your application is using Microsoft SQL Server, please ensure that you install `doctrine/dbal:^3.0`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:907
#, no-wrap
msgid "<a name=\"updating-column-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:907
#, no-wrap
msgid "Updating Column Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:910
msgid ""
"The `change` method allows you to modify the type and attributes of existing "
"columns. For example, you may wish to increase the size of a `string` "
"column. To see the `change` method in action, let's increase the size of the "
"`name` column from 25 to 50. To accomplish this, we simply define the new "
"state of the column and then call the `change` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:914
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('name', 50)->change();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:916
msgid "We could also modify a column to be nullable:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:920
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('name', 50)->nullable()->change();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:922
#, no-wrap
msgid "> {note} The following column types can be modified: `bigInteger`, `binary`, `boolean`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`.  To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:924
#, no-wrap
msgid "<a name=\"renaming-columns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:924
#, no-wrap
msgid "Renaming Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:927
msgid ""
"To rename a column, you may use the `renameColumn` method provided by the "
"schema builder blueprint. Before renaming a column, ensure that you have "
"installed the `doctrine/dbal` library via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:931
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->renameColumn('from', 'to');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:933
#, no-wrap
msgid "> {note} Renaming an `enum` column is not currently supported.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:935
#, no-wrap
msgid "<a name=\"dropping-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:935
#, no-wrap
msgid "Dropping Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:938
msgid ""
"To drop a column, you may use the `dropColumn` method on the schema builder "
"blueprint. If your application is utilizing an SQLite database, you must "
"install the `doctrine/dbal` package via the Composer package manager before "
"the `dropColumn` method may be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:942
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->dropColumn('votes');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:944
msgid ""
"You may drop multiple columns from a table by passing an array of column "
"names to the `dropColumn` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:948
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->dropColumn(['votes', 'avatar', 'location']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:950
#, no-wrap
msgid "> {note} Dropping or modifying multiple columns within a single migration while using an SQLite database is not supported.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:952
#, no-wrap
msgid "<a name=\"available-command-aliases\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:952
#, no-wrap
msgid "Available Command Aliases"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:955
msgid ""
"Laravel provides several convenient methods related to dropping common types "
"of columns. Each of these methods is described in the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:964
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->dropMorphs('morphable');`  |  Drop the `morphable_id` and `morphable_type` columns.\n"
"`$table->dropRememberToken();`  |  Drop the `remember_token` column.\n"
"`$table->dropSoftDeletes();`  |  Drop the `deleted_at` column.\n"
"`$table->dropSoftDeletesTz();`  |  Alias of `dropSoftDeletes()` method.\n"
"`$table->dropTimestamps();`  |  Drop the `created_at` and `updated_at` columns.\n"
"`$table->dropTimestampsTz();` |  Alias of `dropTimestamps()` method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:966
#, no-wrap
msgid "<a name=\"indexes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:966
#, no-wrap
msgid "Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:969
#, no-wrap
msgid "<a name=\"creating-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:969
#, no-wrap
msgid "Creating Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:972
msgid ""
"The Laravel schema builder supports several types of indexes. The following "
"example creates a new `email` column and specifies that its values should be "
"unique. To create the index, we can chain the `unique` method onto the "
"column definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:979
#, no-wrap
msgid ""
"    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('email')->unique();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:981
msgid ""
"Alternatively, you may create the index after defining the column. To do so, "
"you should call the `unique` method on the schema builder blueprint. This "
"method accepts the name of the column that should receive a unique index:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:983
#, no-wrap
msgid "    $table->unique('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:985
msgid ""
"You may even pass an array of columns to an index method to create a "
"compound (or composite) index:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:987
#, no-wrap
msgid "    $table->index(['account_id', 'created_at']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:989
msgid ""
"When creating an index, Laravel will automatically generate an index name "
"based on the table, column names, and the index type, but you may pass a "
"second argument to the method to specify the index name yourself:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:991
#, no-wrap
msgid "    $table->unique('email', 'unique_email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:993
#, no-wrap
msgid "<a name=\"available-index-types\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:993
#, no-wrap
msgid "Available Index Types"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:996
msgid ""
"Laravel's schema builder blueprint class provides methods for creating each "
"type of index supported by Laravel. Each index method accepts an optional "
"second argument to specify the name of the index. If omitted, the name will "
"be derived from the names of the table and column(s) used for the index, as "
"well as the index type. Each of the available index methods is described in "
"the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1004
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->primary('id');`  |  Adds a primary key.\n"
"`$table->primary(['id', 'parent_id']);`  |  Adds composite keys.\n"
"`$table->unique('email');`  |  Adds a unique index.\n"
"`$table->index('state');`  |  Adds an index.\n"
"`$table->spatialIndex('location');`  |  Adds a spatial index (except SQLite).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1006
#, no-wrap
msgid "<a name=\"index-lengths-mysql-mariadb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:1006
#, no-wrap
msgid "Index Lengths & MySQL / MariaDB"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1009
msgid ""
"By default, Laravel uses the `utf8mb4` character set. If you are running a "
"version of MySQL older than the 5.7.7 release or MariaDB older than the "
"10.2.2 release, you may need to manually configure the default string length "
"generated by migrations in order for MySQL to create indexes for them. You "
"may configure the default string length by calling the `Schema::"
"defaultStringLength` method within the `boot` method of your `App\\Providers"
"\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1021
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Schema::defaultStringLength(191);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1023
msgid ""
"Alternatively, you may enable the `innodb_large_prefix` option for your "
"database. Refer to your database's documentation for instructions on how to "
"properly enable this option."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1025
#, no-wrap
msgid "<a name=\"renaming-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:1025
#, no-wrap
msgid "Renaming Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1028
msgid ""
"To rename an index, you may use the `renameIndex` method provided by the "
"schema builder blueprint. This method accepts the current index name as its "
"first argument and the desired name as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1030
#, no-wrap
msgid "    $table->renameIndex('from', 'to')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1032
#, no-wrap
msgid "<a name=\"dropping-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:1032
#, no-wrap
msgid "Dropping Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1035
msgid ""
"To drop an index, you must specify the index's name. By default, Laravel "
"automatically assigns an index name based on the table name, the name of the "
"indexed column, and the index type. Here are some examples:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1042
#, no-wrap
msgid ""
"Command  |  Description\n"
"-------  |  -----------\n"
"`$table->dropPrimary('users_id_primary');`  |  Drop a primary key from the \"users\" table.\n"
"`$table->dropUnique('users_email_unique');`  |  Drop a unique index from the \"users\" table.\n"
"`$table->dropIndex('geo_state_index');`  |  Drop a basic index from the \"geo\" table.\n"
"`$table->dropSpatialIndex('geo_location_spatialindex');`  |  Drop a spatial index from the \"geo\" table  (except SQLite).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1044
msgid ""
"If you pass an array of columns into a method that drops indexes, the "
"conventional index name will be generated based on the table name, columns, "
"and index type:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1048
#, no-wrap
msgid ""
"    Schema::table('geo', function (Blueprint $table) {\n"
"        $table->dropIndex(['state']); // Drops index 'geo_state_index'\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1050
#, no-wrap
msgid "<a name=\"foreign-key-constraints\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:1050
#, no-wrap
msgid "Foreign Key Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1053
msgid ""
"Laravel also provides support for creating foreign key constraints, which "
"are used to force referential integrity at the database level. For example, "
"let's define a `user_id` column on the `posts` table that references the "
"`id` column on a `users` table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1059
#, no-wrap
msgid ""
"    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->unsignedBigInteger('user_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1062
#, no-wrap
msgid ""
"        $table->foreign('user_id')->references('id')->on('users');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1064
msgid ""
"Since this syntax is rather verbose, Laravel provides additional, terser "
"methods that use conventions to provide a better developer experience. The "
"example above can be rewritten like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1068
#, no-wrap
msgid ""
"    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->foreignId('user_id')->constrained();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1070
msgid ""
"The `foreignId` method is an alias for `unsignedBigInteger` while the "
"`constrained` method will use conventions to determine the table and column "
"name being referenced. If your table name does not match Laravel's "
"conventions, you may specify the table name by passing it as an argument to "
"the `constrained` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1074
#, no-wrap
msgid ""
"    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->foreignId('user_id')->constrained('users');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1077
msgid ""
"You may also specify the desired action for the \"on delete\" and \"on update"
"\" properties of the constraint:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1082
#, no-wrap
msgid ""
"    $table->foreignId('user_id')\n"
"          ->constrained()\n"
"          ->onUpdate('cascade')\n"
"          ->onDelete('cascade');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1084
msgid ""
"Any additional [column modifiers](#column-modifiers) must be called before "
"the `constrained` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1088
#, no-wrap
msgid ""
"    $table->foreignId('user_id')\n"
"          ->nullable()\n"
"          ->constrained();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1090
#, no-wrap
msgid "<a name=\"dropping-foreign-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:1090
#, no-wrap
msgid "Dropping Foreign Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1093
msgid ""
"To drop a foreign key, you may use the `dropForeign` method, passing the "
"name of the foreign key constraint to be deleted as an argument. Foreign key "
"constraints use the same naming convention as indexes. In other words, the "
"foreign key constraint name is based on the name of the table and the "
"columns in the constraint, followed by a \"\\_foreign\" suffix:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1095
#, no-wrap
msgid "    $table->dropForeign('posts_user_id_foreign');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1097
msgid ""
"Alternatively, you may pass an array containing the column name that holds "
"the foreign key to the `dropForeign` method. The array will be converted to "
"a foreign key constraint name using Laravel's constraint naming conventions:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1099
#, no-wrap
msgid "    $table->dropForeign(['user_id']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1101
#, no-wrap
msgid "<a name=\"toggling-foreign-key-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:1101
#, no-wrap
msgid "Toggling Foreign Key Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1104
msgid ""
"You may enable or disable foreign key constraints within your migrations by "
"using the following methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1106
#, no-wrap
msgid "    Schema::enableForeignKeyConstraints();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1108
#, no-wrap
msgid "    Schema::disableForeignKeyConstraints();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1109
#, no-wrap
msgid "> {note} SQLite disables foreign key constraints by default. When using SQLite, make sure to [enable foreign key support](/docs/{{version}}/database#configuration) in your database configuration before attempting to create them in your migrations. In addition, SQLite only supports foreign keys upon creation of the table and [not when tables are altered](https://www.sqlite.org/omitted.html).\n"
msgstr ""

#, no-wrap
#~ msgid "Laravel Fortify"
#~ msgstr "Laravel Fortify"

#~ msgid "[What Is Fortify?](#what-is-fortify)"
#~ msgstr "[什麼是 Fortify？](#what-is-fortify)"

#~ msgid "[When Should I Use Fortify?](#when-should-i-use-fortify)"
#~ msgstr "[什麼時候該用 Fortify？](#when-should-i-use-fortify)"
