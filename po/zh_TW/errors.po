msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-02-08 06:32+0000\n"
"PO-Revision-Date: 2022-02-08 06:38\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/errors.pot\n"
"X-Crowdin-File-ID: 67\n"

# File: docs/8.x/errors.md, line: 1
# File: docs/9.x/errors.md, line: 1
# File: docs/master/errors.md, line: 1
#. type: Title #
#, no-wrap
msgid "Error Handling"
msgstr "錯誤處理"

# File: docs/8.x/errors.md, line: 12
# File: docs/9.x/errors.md, line: 12
# File: docs/master/errors.md, line: 12
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# File: docs/8.x/errors.md, line: 12
# File: docs/9.x/errors.md, line: 12
# File: docs/master/errors.md, line: 12
#. type: Bullet: '- '
msgid "[Configuration](#configuration)"
msgstr "[組態設定](#configuration)"

# File: docs/8.x/errors.md, line: 12
# File: docs/9.x/errors.md, line: 12
# File: docs/master/errors.md, line: 12
#. type: Plain text
#, no-wrap
msgid "- [The Exception Handler](#the-exception-handler)\n"
"    - [Reporting Exceptions](#reporting-exceptions)\n"
"    - [Ignoring Exceptions By Type](#ignoring-exceptions-by-type)\n"
"    - [Rendering Exceptions](#rendering-exceptions)\n"
"    - [Reportable & Renderable Exceptions](#renderable-exceptions)\n"
"- [HTTP Exceptions](#http-exceptions)\n"
"    - [Custom HTTP Error Pages](#custom-http-error-pages)\n"
msgstr "- [例外處理常式](#the-exception-handler)\n"
"    - [回報例外](#reporting-exceptions)\n"
"    - [依據類型來忽略例外](#ignoring-exceptions-by-type)\n"
"    - [轉譯例外](#rendering-exceptions)\n"
"    - [Reportable 與 Renderable 的例外](#renderable-exceptions)\n"
"- [HTTP 例外](#http-exceptions)\n"
"    - [自訂 HTTP 錯誤頁面](#custom-http-error-pages)\n"

# File: docs/8.x/errors.md, line: 14
# File: docs/9.x/errors.md, line: 14
# File: docs/master/errors.md, line: 14
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/errors.md, line: 14
# File: docs/9.x/errors.md, line: 14
# File: docs/master/errors.md, line: 14
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/errors.md, line: 17
# File: docs/9.x/errors.md, line: 17
# File: docs/master/errors.md, line: 17
#. type: Plain text
msgid "When you start a new Laravel project, error and exception handling is already configured for you. The `App\\Exceptions\\Handler` class is where all exceptions thrown by your application are logged and then rendered to the user. We'll dive deeper into this class throughout this documentation."
msgstr "在開始新的 Laravel 專案時，Laravel 已經先幫你設定好錯誤與 ^[Exception Handler](例外處理常式)。在你的專案中^[擲回](Throw)的所有 Exception 都會由 `App\\Exceptions\\Handler` 負責紀錄 ^[Log](日誌) 並轉譯給使用者。我們會在這篇說明文件中深入瞭解這個類別。"

# File: docs/8.x/errors.md, line: 19
# File: docs/9.x/errors.md, line: 19
# File: docs/master/errors.md, line: 19
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr "<a name=\"configuration\"></a>\n"

# File: docs/8.x/errors.md, line: 19
# File: docs/9.x/errors.md, line: 19
# File: docs/master/errors.md, line: 19
#. type: Title ##
#, no-wrap
msgid "Configuration"
msgstr "組態設定"

# File: docs/8.x/errors.md, line: 22
# File: docs/9.x/errors.md, line: 22
# File: docs/master/errors.md, line: 22
#. type: Plain text
msgid "The `debug` option in your `config/app.php` configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the `APP_DEBUG` environment variable, which is stored in your `.env` file."
msgstr "`config/app.php` 組態設定檔中的 `debug` 選項用來判斷錯誤在實際顯示給使用者時要包含多少資訊。預設情況下，這個選項被設為依照 `APP_DEBUG` 環境變數值，該環境變數儲存於 `.env` 檔內。"

# File: docs/8.x/errors.md, line: 24
# File: docs/9.x/errors.md, line: 24
# File: docs/master/errors.md, line: 24
#. type: Plain text
msgid "During local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the value is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr "在本機上開發時，應將 `APP_DEBUG` 環境變數設為 `true`。 **在正式環境上，這個值一定要是 `false`。若在正式環境上將該值設為 `true`，則會有將機敏設定值暴露給應用程式終端使用者的風險。**"

# File: docs/8.x/errors.md, line: 26
# File: docs/9.x/errors.md, line: 26
# File: docs/master/errors.md, line: 26
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-exception-handler\"></a>\n"
msgstr "<a name=\"the-exception-handler\"></a>\n"

# File: docs/8.x/errors.md, line: 26
# File: docs/9.x/errors.md, line: 26
# File: docs/master/errors.md, line: 26
#. type: Title ##
#, no-wrap
msgid "The Exception Handler"
msgstr "Exception Handler"

# File: docs/8.x/errors.md, line: 29
# File: docs/9.x/errors.md, line: 29
# File: docs/master/errors.md, line: 29
#. type: Plain text
#, no-wrap
msgid "<a name=\"reporting-exceptions\"></a>\n"
msgstr "<a name=\"reporting-exceptions\"></a>\n"

# File: docs/8.x/errors.md, line: 29
# File: docs/9.x/errors.md, line: 29
# File: docs/master/errors.md, line: 29
#. type: Title ###
#, no-wrap
msgid "Reporting Exceptions"
msgstr "回報 Exception"

# File: docs/8.x/errors.md, line: 32
# File: docs/9.x/errors.md, line: 32
# File: docs/master/errors.md, line: 32
#. type: Plain text
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com) or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr "所有的 Exception 都由 `App\\Exceptions\\Handler` 類別負責處理。該類別中包含了一個 `register` 方法，可用來註冊所有自訂的 Exception 回報與轉譯回呼。我們來詳細看看其中各個概念。「回報 Exception」就是指將例外紀錄到 ^[Log](日誌)，或是傳送到如 [Flare](https://flareapp.io)、[Bugsnag](https://bugsnag.com)、[Sentry](https://github.com/getsentry/sentry-laravel)⋯⋯等外部服務。預設情況下，Laravel 會使用專案的[Log](/docs/{{version}}/logging) 組態設定來紀錄 Exception。不過，我們也可以隨意調整 Exception 要如何紀錄。"

# File: docs/8.x/errors.md, line: 34
# File: docs/9.x/errors.md, line: 34
# File: docs/master/errors.md, line: 34
#. type: Plain text
msgid "For example, if you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will deduce what type of exception the closure reports by examining the type-hint of the closure:"
msgstr "舉例來說，如果想以不同的方式回報不同類型的 Exception，可以使用 `reportable` 方法來註冊一個閉包。這個閉包會在給定類型的 Exception 需要回報時被呼叫。Laravel 會自動使用該閉包的^[型別提示](Type-Hint)來推導該閉包接受什麼類型的 Exception："

# File: docs/8.x/errors.md, line: 36
# File: docs/8.x/errors.md, line: 126
# File: docs/8.x/errors.md, line: 146
# File: docs/9.x/errors.md, line: 36
# File: docs/9.x/errors.md, line: 126
# File: docs/9.x/errors.md, line: 146
# File: docs/master/errors.md, line: 36
# File: docs/master/errors.md, line: 126
# File: docs/master/errors.md, line: 146
#. type: Plain text
#, no-wrap
msgid "    use App\\Exceptions\\InvalidOrderException;\n"
msgstr "    use App\\Exceptions\\InvalidOrderException;\n"

# File: docs/8.x/errors.md, line: 48
# File: docs/9.x/errors.md, line: 48
# File: docs/master/errors.md, line: 48
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->reportable(function (InvalidOrderException $e) {\n"
"            //\n"
"        });\n"
"    }\n"
msgstr "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->reportable(function (InvalidOrderException $e) {\n"
"            //\n"
"        });\n"
"    }\n"

# File: docs/8.x/errors.md, line: 50
# File: docs/9.x/errors.md, line: 50
# File: docs/master/errors.md, line: 50
#. type: Plain text
msgid "When you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr "使用 `reportable` 方法定義自訂的 Exception 回報回呼時，Laravel 還是會使用專案的預設 Log 設定來紀錄例外。若想停止將 Exception ^[傳播](Propagation)給預設的日誌 Stack，請在定義回報回呼時使用 `stop` 方法，或是在該回呼內回傳 `false`："

# File: docs/8.x/errors.md, line: 54
# File: docs/9.x/errors.md, line: 54
# File: docs/master/errors.md, line: 54
#. type: Plain text
#, no-wrap
msgid "    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    })->stop();\n"
msgstr "    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    })->stop();\n"

# File: docs/8.x/errors.md, line: 58
# File: docs/9.x/errors.md, line: 58
# File: docs/master/errors.md, line: 58
#. type: Plain text
#, no-wrap
msgid "    $this->reportable(function (InvalidOrderException $e) {\n"
"        return false;\n"
"    });\n"
msgstr "    $this->reportable(function (InvalidOrderException $e) {\n"
"        return false;\n"
"    });\n"

# File: docs/8.x/errors.md, line: 60
# File: docs/9.x/errors.md, line: 60
# File: docs/master/errors.md, line: 60
#. type: Plain text
#, no-wrap
msgid "> {tip} To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions).\n"
msgstr "> {tip} 若要為給定的例外自訂 Exception 回報，可使用 [Reportable 的例外](/docs/{{version}}/errors#renderable-exceptions)。\n"

# File: docs/8.x/errors.md, line: 62
# File: docs/9.x/errors.md, line: 62
# File: docs/master/errors.md, line: 62
#. type: Plain text
#, no-wrap
msgid "<a name=\"global-log-context\"></a>\n"
msgstr "<a name=\"global-log-context\"></a>\n"

# File: docs/8.x/errors.md, line: 62
# File: docs/9.x/errors.md, line: 62
# File: docs/master/errors.md, line: 62
#. type: Title ####
#, no-wrap
msgid "Global Log Context"
msgstr "全域 Log 上下文"

# File: docs/8.x/errors.md, line: 65
# File: docs/9.x/errors.md, line: 65
# File: docs/master/errors.md, line: 65
#. type: Plain text
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by overriding the `context` method of your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr "當有目前使用者 ID 的時候，Laravel 會自動將使用者 ID 加到所有的例外 Log 訊息，以作為^[上下文](Context)資料。可以複寫專案中 `App\\Exceptions\\Handler` 類別的 `context` 來定義你自己的全域上下文資料。這個資料會被包含在專案輸出的所有例外 Log 訊息中："

# File: docs/8.x/errors.md, line: 77
# File: docs/9.x/errors.md, line: 77
# File: docs/master/errors.md, line: 77
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the default context variables for logging.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    protected function context()\n"
"    {\n"
"        return array_merge(parent::context(), [\n"
"            'foo' => 'bar',\n"
"        ]);\n"
"    }\n"
msgstr "    /**\n"
"     * Get the default context variables for logging.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    protected function context()\n"
"    {\n"
"        return array_merge(parent::context(), [\n"
"            'foo' => 'bar',\n"
"        ]);\n"
"    }\n"

# File: docs/8.x/errors.md, line: 79
# File: docs/9.x/errors.md, line: 79
# File: docs/master/errors.md, line: 79
#. type: Plain text
#, no-wrap
msgid "<a name=\"exception-log-context\"></a>\n"
msgstr "<a name=\"exception-log-context\"></a>\n"

# File: docs/8.x/errors.md, line: 79
# File: docs/9.x/errors.md, line: 79
# File: docs/master/errors.md, line: 79
#. type: Title ####
#, no-wrap
msgid "Exception Log Context"
msgstr "Exception Log 的上下文"

# File: docs/8.x/errors.md, line: 82
# File: docs/9.x/errors.md, line: 82
# File: docs/master/errors.md, line: 82
#. type: Plain text
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's custom exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr "為所有 Log 訊息都新增額外的上下文可能會很實用，但有些特別的 Exception 可能會有一些獨特的上下文，而我們也想將這類上下文加到 Log 上。只要在我們的其中一個自訂 Exception 中定義一個 `context` 方法，就可以指定與該 Exception 相關的資料，將這些資料包含到例外的 Log 中："

# File: docs/8.x/errors.md, line: 84
# File: docs/8.x/errors.md, line: 185
# File: docs/9.x/errors.md, line: 84
# File: docs/9.x/errors.md, line: 185
# File: docs/master/errors.md, line: 84
# File: docs/master/errors.md, line: 185
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/errors.md, line: 86
# File: docs/8.x/errors.md, line: 187
# File: docs/9.x/errors.md, line: 86
# File: docs/9.x/errors.md, line: 187
# File: docs/master/errors.md, line: 86
# File: docs/master/errors.md, line: 187
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Exceptions;\n"
msgstr "    namespace App\\Exceptions;\n"

# File: docs/8.x/errors.md, line: 88
# File: docs/8.x/errors.md, line: 189
# File: docs/9.x/errors.md, line: 88
# File: docs/9.x/errors.md, line: 189
# File: docs/master/errors.md, line: 88
# File: docs/master/errors.md, line: 189
#. type: Plain text
#, no-wrap
msgid "    use Exception;\n"
msgstr "    use Exception;\n"

# File: docs/8.x/errors.md, line: 92
# File: docs/9.x/errors.md, line: 92
# File: docs/master/errors.md, line: 92
#. type: Plain text
#, no-wrap
msgid "    class InvalidOrderException extends Exception\n"
"    {\n"
"        // ...\n"
msgstr "    class InvalidOrderException extends Exception\n"
"    {\n"
"        // ...\n"

# File: docs/8.x/errors.md, line: 103
# File: docs/9.x/errors.md, line: 103
# File: docs/master/errors.md, line: 103
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Get the exception's context information.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function context()\n"
"        {\n"
"            return ['order_id' => $this->orderId];\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Get the exception's context information.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function context()\n"
"        {\n"
"            return ['order_id' => $this->orderId];\n"
"        }\n"
"    }\n"

# File: docs/8.x/errors.md, line: 105
# File: docs/9.x/errors.md, line: 105
# File: docs/master/errors.md, line: 105
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-report-helper\"></a>\n"
msgstr "<a name=\"the-report-helper\"></a>\n"

# File: docs/8.x/errors.md, line: 105
# File: docs/9.x/errors.md, line: 105
# File: docs/master/errors.md, line: 105
#. type: Title ####
#, no-wrap
msgid "The `report` Helper"
msgstr "`report` 輔助函式"

# File: docs/8.x/errors.md, line: 108
# File: docs/9.x/errors.md, line: 108
# File: docs/master/errors.md, line: 108
#. type: Plain text
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception via the exception handler without rendering an error page to the user:"
msgstr "有時候，我們可能會想回報某個 Exception，但又想繼續執行目前的 Request。使用 `report` 輔助函式，就能輕鬆地在不轉譯出錯誤頁面的情況下使用 Exception Handler 來回報這個 Exception："

# File: docs/8.x/errors.md, line: 115
# File: docs/9.x/errors.md, line: 115
# File: docs/master/errors.md, line: 115
#. type: Plain text
#, no-wrap
msgid "    public function isValid($value)\n"
"    {\n"
"        try {\n"
"            // Validate the value...\n"
"        } catch (Throwable $e) {\n"
"            report($e);\n"
msgstr "    public function isValid($value)\n"
"    {\n"
"        try {\n"
"            // Validate the value...\n"
"        } catch (Throwable $e) {\n"
"            report($e);\n"

# File: docs/8.x/errors.md, line: 119
# File: docs/9.x/errors.md, line: 119
# File: docs/master/errors.md, line: 119
#. type: Plain text
#, no-wrap
msgid "            return false;\n"
"        }\n"
"    }\n"
msgstr "            return false;\n"
"        }\n"
"    }\n"

# File: docs/8.x/errors.md, line: 121
# File: docs/9.x/errors.md, line: 121
# File: docs/master/errors.md, line: 121
#. type: Plain text
#, no-wrap
msgid "<a name=\"ignoring-exceptions-by-type\"></a>\n"
msgstr "<a name=\"ignoring-exceptions-by-type\"></a>\n"

# File: docs/8.x/errors.md, line: 121
# File: docs/9.x/errors.md, line: 121
# File: docs/master/errors.md, line: 121
#. type: Title ###
#, no-wrap
msgid "Ignoring Exceptions By Type"
msgstr "以類型忽略例外"

# File: docs/8.x/errors.md, line: 124
# File: docs/9.x/errors.md, line: 124
# File: docs/master/errors.md, line: 124
#. type: Plain text
msgid "When building your application, there will be some types of exceptions you simply want to ignore and never report. Your application's exception handler contains a `$dontReport` property which is initialized to an empty array. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr "在製作專案時，我們可能會想忽略一些類型的 Exception，讓這些 Exception 永遠不要被回報。在專案中的 Exception Handler 中包含了一個 `$dontReport` 屬性，該屬性被初始化為空陣列。只要將任何類別加到該屬性中，這些類別就不會被回報。不過，還是可以為這些類別定義自訂的轉譯邏輯："

# File: docs/8.x/errors.md, line: 135
# File: docs/9.x/errors.md, line: 135
# File: docs/master/errors.md, line: 135
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * A list of the exception types that should not be reported.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dontReport = [\n"
"        InvalidOrderException::class,\n"
"    ];\n"
msgstr "    /**\n"
"     * A list of the exception types that should not be reported.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dontReport = [\n"
"        InvalidOrderException::class,\n"
"    ];\n"

# File: docs/8.x/errors.md, line: 137
# File: docs/9.x/errors.md, line: 137
# File: docs/master/errors.md, line: 137
#. type: Plain text
#, no-wrap
msgid "> {tip} Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens.\n"
msgstr "> {tip} 在 Laravel 內部，Laravel 已經預先幫你忽略了一些類型的錯誤。如：產生 404 HTTP「找不到」錯誤的 Exception、還有因為無效 CSRF Token 產生的 419 HTTP Response。\n"

# File: docs/8.x/errors.md, line: 139
# File: docs/9.x/errors.md, line: 139
# File: docs/master/errors.md, line: 139
#. type: Plain text
#, no-wrap
msgid "<a name=\"rendering-exceptions\"></a>\n"
msgstr "<a name=\"rendering-exceptions\"></a>\n"

# File: docs/8.x/errors.md, line: 139
# File: docs/9.x/errors.md, line: 139
# File: docs/master/errors.md, line: 139
#. type: Title ###
#, no-wrap
msgid "Rendering Exceptions"
msgstr "轉譯 Exception"

# File: docs/8.x/errors.md, line: 142
# File: docs/9.x/errors.md, line: 142
# File: docs/master/errors.md, line: 142
#. type: Plain text
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this via the `renderable` method of your exception handler."
msgstr "預設情況下，Laravel 的 Exception Handler 會幫你把 Exception 轉成 HTTP Response。不過，我們也可以自由地為某個類型的 Exception 註冊自訂^[轉譯閉包](Rendering Closure)。只要使用 Exception Handler 的 `renderable` 方法，就註冊轉譯閉包。"

# File: docs/8.x/errors.md, line: 144
# File: docs/9.x/errors.md, line: 144
# File: docs/master/errors.md, line: 144
#. type: Plain text
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will deduce what type of exception the closure renders by examining the type-hint of the closure:"
msgstr "傳給 `renderable` 方法的閉包應回傳一個 `Illuminate\\Http\\Response` 的實體。可以使用 `response` 輔助函式來產生該實體。Laravel 會依照該閉包的型別提示來判斷這個閉包能轉移哪種類型的 Exception："

# File: docs/8.x/errors.md, line: 158
# File: docs/9.x/errors.md, line: 158
# File: docs/master/errors.md, line: 158
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->renderable(function (InvalidOrderException $e, $request) {\n"
"            return response()->view('errors.invalid-order', [], 500);\n"
"        });\n"
"    }\n"
msgstr "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->renderable(function (InvalidOrderException $e, $request) {\n"
"            return response()->view('errors.invalid-order', [], 500);\n"
"        });\n"
"    }\n"

# File: docs/8.x/errors.md, line: 160
# File: docs/9.x/errors.md, line: 160
# File: docs/master/errors.md, line: 160
#. type: Plain text
msgid "You may also use the `renderable` method to override the rendering behavior for built-in Laravel or Symfony exceptions such as `NotFoundHttpException`. If the closure given to the `renderable` method does not return a value, Laravel's default exception rendering will be utilized:"
msgstr "也可以使用 `renderable` 方法來複寫 Laravel 或 Symfony 內建 Exception 的轉移行外。如：`NotFoundHttpException`。若傳給 `renderable` 方法的閉包未回傳任何值，則會使用 Laravel 的預設 Exception 轉譯："

# File: docs/8.x/errors.md, line: 162
# File: docs/9.x/errors.md, line: 162
# File: docs/master/errors.md, line: 162
#. type: Plain text
#, no-wrap
msgid "    use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n"
msgstr "    use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n"

# File: docs/8.x/errors.md, line: 178
# File: docs/9.x/errors.md, line: 178
# File: docs/master/errors.md, line: 178
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->renderable(function (NotFoundHttpException $e, $request) {\n"
"            if ($request->is('api/*')) {\n"
"                return response()->json([\n"
"                    'message' => 'Record not found.'\n"
"                ], 404);\n"
"            }\n"
"        });\n"
"    }\n"
msgstr "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->renderable(function (NotFoundHttpException $e, $request) {\n"
"            if ($request->is('api/*')) {\n"
"                return response()->json([\n"
"                    'message' => 'Record not found.'\n"
"                ], 404);\n"
"            }\n"
"        });\n"
"    }\n"

# File: docs/8.x/errors.md, line: 180
# File: docs/9.x/errors.md, line: 180
# File: docs/master/errors.md, line: 180
#. type: Plain text
#, no-wrap
msgid "<a name=\"renderable-exceptions\"></a>\n"
msgstr "<a name=\"renderable-exceptions\"></a>\n"

# File: docs/8.x/errors.md, line: 180
# File: docs/9.x/errors.md, line: 180
# File: docs/master/errors.md, line: 180
#. type: Title ###
#, no-wrap
msgid "Reportable & Renderable Exceptions"
msgstr "^[可回報](Reportable)與^[可轉譯](Renderable)的 Exception"

# File: docs/8.x/errors.md, line: 183
# File: docs/9.x/errors.md, line: 183
# File: docs/master/errors.md, line: 183
#. type: Plain text
msgid "Instead of type-checking exceptions in the exception handler's `register` method, you may define `report` and `render` methods directly on your custom exceptions. When these methods exist, they will be automatically called by the framework:"
msgstr "除了在 Exception Handler 的 `register` 方法上設定 Exception 的類型外，我們還可以直接在我們的自訂 Exception 上定義 `report` 與 `render` 方法。當這些方法存在時，Laravel 會自動呼叫這些方法："

# File: docs/8.x/errors.md, line: 201
# File: docs/9.x/errors.md, line: 201
# File: docs/master/errors.md, line: 201
#. type: Plain text
#, no-wrap
msgid "    class InvalidOrderException extends Exception\n"
"    {\n"
"        /**\n"
"         * Report the exception.\n"
"         *\n"
"         * @return bool|null\n"
"         */\n"
"        public function report()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr "    class InvalidOrderException extends Exception\n"
"    {\n"
"        /**\n"
"         * Report the exception.\n"
"         *\n"
"         * @return bool|null\n"
"         */\n"
"        public function report()\n"
"        {\n"
"            //\n"
"        }\n"

# File: docs/8.x/errors.md, line: 213
# File: docs/9.x/errors.md, line: 213
# File: docs/master/errors.md, line: 213
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Render the exception into an HTTP response.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function render($request)\n"
"        {\n"
"            return response(...);\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Render the exception into an HTTP response.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function render($request)\n"
"        {\n"
"            return response(...);\n"
"        }\n"
"    }\n"

# File: docs/8.x/errors.md, line: 215
# File: docs/9.x/errors.md, line: 215
# File: docs/master/errors.md, line: 215
#. type: Plain text
msgid "If your exception extends an exception that is already renderable, such as a built-in Laravel or Symfony exception, you may return `false` from the exception's `render` method to render the exception's default HTTP response:"
msgstr "若你的 Exception 繼承的 Exception 已經是^[可轉譯的](Renderable)了 (如 Laravel 或 Symfony 內建的 Exception)，可在該 Exception 的 `render` 方法內回傳 `false` 來轉譯某個 Exception 的預設 HTTP Response："

# File: docs/8.x/errors.md, line: 225
# File: docs/9.x/errors.md, line: 225
# File: docs/master/errors.md, line: 225
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        // Determine if the exception needs custom rendering...\n"
msgstr "    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        // Determine if the exception needs custom rendering...\n"

# File: docs/8.x/errors.md, line: 228
# File: docs/8.x/errors.md, line: 242
# File: docs/9.x/errors.md, line: 228
# File: docs/9.x/errors.md, line: 242
# File: docs/master/errors.md, line: 228
# File: docs/master/errors.md, line: 242
#. type: Plain text
#, no-wrap
msgid "        return false;\n"
"    }\n"
msgstr "        return false;\n"
"    }\n"

# File: docs/8.x/errors.md, line: 230
# File: docs/9.x/errors.md, line: 230
# File: docs/master/errors.md, line: 230
#. type: Plain text
msgid "If your exception contains custom reporting logic that is only necessary when certain conditions are met, you may need to instruct Laravel to sometimes report the exception using the default exception handling configuration. To accomplish this, you may return `false` from the exception's `report` method:"
msgstr "若你的 Exception 中包含了只有在特定情況下才會使用的自訂回報邏輯，則可讓 Laravel 在某些時候使用預設的 Exception 處理設定來回報這個 Exception。若要這麼做，請在該 Exception 的 `report` 方法內回傳 `false`："

# File: docs/8.x/errors.md, line: 239
# File: docs/9.x/errors.md, line: 239
# File: docs/master/errors.md, line: 239
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        // Determine if the exception needs custom reporting...\n"
msgstr "    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        // Determine if the exception needs custom reporting...\n"

# File: docs/8.x/errors.md, line: 244
# File: docs/9.x/errors.md, line: 244
# File: docs/master/errors.md, line: 244
#. type: Plain text
#, no-wrap
msgid "> {tip} You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container).\n"
msgstr "> {tip} 可以在 `report` 方法中型別提示任何的^[相依性](Dependency)。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動插入這些相依性。\n"

# File: docs/8.x/errors.md, line: 246
# File: docs/9.x/errors.md, line: 246
# File: docs/master/errors.md, line: 246
#. type: Plain text
#, no-wrap
msgid "<a name=\"http-exceptions\"></a>\n"
msgstr "<a name=\"http-exceptions\"></a>\n"

# File: docs/8.x/errors.md, line: 246
# File: docs/9.x/errors.md, line: 246
# File: docs/master/errors.md, line: 246
#. type: Title ##
#, no-wrap
msgid "HTTP Exceptions"
msgstr "HTTP Exception"

# File: docs/8.x/errors.md, line: 249
# File: docs/9.x/errors.md, line: 249
# File: docs/master/errors.md, line: 249
#. type: Plain text
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr "有的 Exception 是用來描述伺服器的 HTTP 錯誤代碼。例如，這些 Exception 可能是：「找不到頁面」錯誤 (404)、「未經授權」錯誤 (401)⋯⋯等，甚至是開發人員造成的 500 錯誤。在你的程式中的任何地點內，若要產生這種 Response，可使用 `abort` ^[輔助函式](Helper)："

# File: docs/8.x/errors.md, line: 251
# File: docs/9.x/errors.md, line: 251
# File: docs/master/errors.md, line: 251
#. type: Plain text
#, no-wrap
msgid "    abort(404);\n"
msgstr "    abort(404);\n"

# File: docs/8.x/errors.md, line: 253
# File: docs/9.x/errors.md, line: 253
# File: docs/master/errors.md, line: 253
#. type: Plain text
#, no-wrap
msgid "<a name=\"custom-http-error-pages\"></a>\n"
msgstr "<a name=\"custom-http-error-pages\"></a>\n"

# File: docs/8.x/errors.md, line: 253
# File: docs/9.x/errors.md, line: 253
# File: docs/master/errors.md, line: 253
#. type: Title ###
#, no-wrap
msgid "Custom HTTP Error Pages"
msgstr "自訂 HTTP 錯誤頁面"

# File: docs/8.x/errors.md, line: 256
# File: docs/9.x/errors.md, line: 256
# File: docs/master/errors.md, line: 256
#. type: Plain text
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, if you wish to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered on all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr "在 Laravel 中，要給各種 HTTP 狀態碼顯示自訂錯誤頁非常容易。舉例來說，若要自訂 404 HTTP 狀態碼的錯誤頁面，請建立 `resources/views/errors/404.blade.php` View 樣板。程式中只要產生 404 錯誤，就會轉譯這個 View。在該目錄中的 View 應以對應的 HTTP 狀態碼來命名。由 `abort` 函式產生的 `Symfony\\Component\\HttpKernel\\Exception\\HttpException` 實體會以 `$exception` 變數傳給該 View："

# File: docs/8.x/errors.md, line: 258
# File: docs/9.x/errors.md, line: 258
# File: docs/master/errors.md, line: 258
#. type: Plain text
#, no-wrap
msgid "    <h2>{{ $exception->getMessage() }}</h2>\n"
msgstr "    <h2>{{ $exception->getMessage() }}</h2>\n"

# File: docs/8.x/errors.md, line: 260
# File: docs/9.x/errors.md, line: 260
# File: docs/master/errors.md, line: 260
#. type: Plain text
msgid "You may publish Laravel's default error page templates using the `vendor:publish` Artisan command. Once the templates have been published, you may customize them to your liking:"
msgstr "可以使用 `vendor:publish` Artisan 指令來將 Laravel 的預設錯誤頁樣板^[安裝](Publish)到專案內。安裝好樣板後，就可以隨意自訂這些樣板："

# File: docs/8.x/errors.md, line: 261
#. type: Plain text
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-errors\n"
msgstr "    php artisan vendor:publish --tag=laravel-errors\n"

# File: docs/9.x/errors.md, line: 261
# File: docs/master/errors.md, line: 261
#. type: Code fence info string
#, no-wrap
msgid "shell"
msgstr ""

# File: docs/9.x/errors.md, line: 261
# File: docs/master/errors.md, line: 261
#. type: Plain text
#, no-wrap
msgid "php artisan vendor:publish --tag=laravel-errors\n"
msgstr ""

# File: docs/9.x/errors.md, line: 266
# File: docs/master/errors.md, line: 266
#. type: Plain text
#, no-wrap
msgid "<a name=\"fallback-http-error-pages\"></a>\n"
msgstr "<a name=\"fallback-http-error-pages\"></a>\n"

# File: docs/9.x/errors.md, line: 266
# File: docs/master/errors.md, line: 266
#. type: Title ####
#, no-wrap
msgid "Fallback HTTP Error Pages"
msgstr "^[遞補](Fallback)的 HTTP 錯誤頁"

# File: docs/9.x/errors.md, line: 268
# File: docs/master/errors.md, line: 268
#. type: Plain text
msgid "You may also define a \"fallback\" error page for a given series of HTTP status codes. This page will be rendered if there is not a corresponding page for the specific HTTP status code that occurred. To accomplish this, define a `4xx.blade.php` template and a `5xx.blade.php` template in your application's `resources/views/errors` directory."
msgstr "可以為給定的一系列 HTTP 狀態碼定義一個「遞補的」錯誤頁面。當發生的 HTTP 狀態碼沒有對應頁面時，就會轉譯這個遞補的頁面。若要使用遞補頁面，請在專案的 `resources/views/errors` 目錄下定義一個 `4xx.blade.php` 樣板與 `5xx.blade.php` 樣板。"

