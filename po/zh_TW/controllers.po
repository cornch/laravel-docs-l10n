msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/controllers.pot\n"
"X-Crowdin-File-ID: 37\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-08-06 05:46\n"

#: docs/8.x/controllers.md:block 1 (header)
msgid "Controllers"
msgstr "控制器 - Controller"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Writing Controllers](#writing-controllers)"
msgstr "[撰寫 Controller](#writing-controllers)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Basic Controllers](#basic-controllers)"
msgstr "[「Controller」基礎](#basic-controllers)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Single Action Controllers](#single-action-controllers)"
msgstr "[單一動作的 Controller](#single-action-controllers)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Controller Middleware](#controller-middleware)"
msgstr "[Controller Middleware](#controller-middleware)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Resource Controllers](#resource-controllers)"
msgstr "[Resource Controller](#resource-controllers)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Partial Resource Routes](#restful-partial-resource-routes)"
msgstr "[部分的 Resource Route](#restful-partial-resource-routes)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Nested Resources](#restful-nested-resources)"
msgstr "[巢狀 Resource](#restful-nested-resources)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Naming Resource Routes](#restful-naming-resource-routes)"
msgstr "[命名 Resource Route](#restful-naming-resource-routes)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Naming Resource Route Parameters](#restful-naming-resource-route-parameters)"
msgstr "[命名 Resource Route 的參數](#restful-naming-resource-route-parameters)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Scoping Resource Routes](#restful-scoping-resource-routes)"
msgstr "[限制範圍的 Resource Route](#restful-scoping-resource-routes)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Localizing Resource URIs](#restful-localizing-resource-uris)"
msgstr "[本土化 Resource URI](#restful-localizing-resource-uris)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Supplementing Resource Controllers](#restful-supplementing-resource-controllers)"
msgstr "[補充 Resource Controller](#restful-supplementing-resource-controllers)"

#: docs/8.x/controllers.md:block 2 (unordered list)
msgid "[Dependency Injection & Controllers](#dependency-injection-and-controllers)"
msgstr "[相依性插入與 Controller](#dependency-injection-and-controllers)"

#: docs/8.x/controllers.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/controllers.md:block 5 (paragraph)
msgid "Instead of defining all of your request handling logic as closures in your route files, you may wish to organize this behavior using \"controller\" classes. Controllers can group related request handling logic into a single class. For example, a `UserController` class might handle all incoming requests related to users, including showing, creating, updating, and deleting users. By default, controllers are stored in the `app/Http/Controllers` directory."
msgstr "比起在路由檔案中使用閉包來定義所有的請求處理邏輯，你可能會想使用「Controller」類別來管理這個行為。Controller 可以將相關的請求處理邏輯放在單一類別內。舉例來說，`UserController` 類別可以處理所有有關使用者的連入請求，包含顯示、建立、更新與刪除使用者。預設情況下，Controller 存放在 `app/Http/Controllers` 目錄下。"

#: docs/8.x/controllers.md:block 7 (header)
msgid "Writing Controllers"
msgstr "撰寫 Controller"

#: docs/8.x/controllers.md:block 9 (header)
msgid "Basic Controllers"
msgstr "基礎 Controller"

#: docs/8.x/controllers.md:block 10 (paragraph)
msgid "Let's take a look at an example of a basic controller. Note that the controller extends the base controller class included with Laravel: `App\\Http\\Controllers\\Controller`:"
msgstr "來看看一個基礎 Controller 的例子。請注意，該 Controller 繼承了包含在 Laravel 內的基礎 Controller 類別：`App\\Http\\Controllers\\Controller`："

#: docs/8.x/controllers.md:block 11 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for a given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\View\\View\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        return view('user.profile', [\n"
"            'user' => User::findOrFail($id)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for a given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\View\\View\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        return view('user.profile', [\n"
"            'user' => User::findOrFail($id)\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/8.x/controllers.md:block 12 (paragraph)
msgid "You can define a route to this controller method like so:"
msgstr "可以像這樣定義連結到這個 Controller 的路由："

#: docs/8.x/controllers.md:block 13 (code)
msgid "use App\\Http\\Controllers\\UserController;\n\n"
"Route::get('/user/{id}', [UserController::class, 'show']);\n"
msgstr "use App\\Http\\Controllers\\UserController;\n\n"
"Route::get('/user/{id}', [UserController::class, 'show']);\n"

#: docs/8.x/controllers.md:block 14 (paragraph)
msgid "When an incoming request matches the specified route URI, the `show` method on the `App\\Http\\Controllers\\UserController` class will be invoked and the route parameters will be passed to the method."
msgstr "當有連入請求符合這個路由 URI 時，將叫用 `App\\Http\\Controllers\\UserController` 類別的 `show` 方法，且 route 參數會被傳入這個方法內。"

#: docs/8.x/controllers.md:block 15 (quote)
msgid "{tip} Controllers are not **required** to extend a base class. However, you will not have access to convenient features such as the `middleware` and `authorize` methods."
msgstr "{tip} Controller 並**不一定**要有繼承基礎類別。不過，若不繼承基礎 Controller 的話將無法使用一些如 `middleware` 或 `authorize` 方法等方便的功能。"

#: docs/8.x/controllers.md:block 17 (header)
msgid "Single Action Controllers"
msgstr "單一動作的 Controller"

#: docs/8.x/controllers.md:block 18 (paragraph)
msgid "If a controller action is particularly complex, you might find it convenient to dedicate an entire controller class to that single action. To accomplish this, you may define a single `__invoke` method within the controller:"
msgstr "若某個 Controller 動作特別複雜，則可以將這個動作放到獨立的 Controller 類別。為此，可在該 Controller 內定義一個單一的 `__invoke` 方法："

#: docs/8.x/controllers.md:block 19 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n\n"
"class ProvisionServer extends Controller\n"
"{\n"
"    /**\n"
"     * Provision a new web server.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function __invoke()\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n\n"
"class ProvisionServer extends Controller\n"
"{\n"
"    /**\n"
"     * Provision a new web server.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function __invoke()\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"

#: docs/8.x/controllers.md:block 20 (paragraph)
msgid "When registering routes for single action controllers, you do not need to specify a controller method. Instead, you may simply pass the name of the controller to the router:"
msgstr "當為單一動作的 Controller 註冊路由時，不需要指定 Controller 方法。只需要傳入該 Controller 的名稱給 Router 即可："

#: docs/8.x/controllers.md:block 21 (code)
msgid "use App\\Http\\Controllers\\ProvisionServer;\n\n"
"Route::post('/server', ProvisionServer::class);\n"
msgstr "use App\\Http\\Controllers\\ProvisionServer;\n\n"
"Route::post('/server', ProvisionServer::class);\n"

#: docs/8.x/controllers.md:block 22 (paragraph)
msgid "You may generate an invokable controller by using the `--invokable` option of the `make:controller` Artisan command:"
msgstr "可以通過 `make:controller` Artisan 指令的 `--invokable` 選項來建立可被叫用的 Controller："

#: docs/8.x/controllers.md:block 23 (code)
msgid "php artisan make:controller ProvisionServer --invokable\n"
msgstr "php artisan make:controller ProvisionServer --invokable\n"

#: docs/8.x/controllers.md:block 24 (quote)
msgid "{tip} Controller stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr "{tip} Controller 的 Stub 可通過[發佈 Stub](/docs/{{version}}/artisan#stub-customization) 來自定。"

#: docs/8.x/controllers.md:block 26 (header)
msgid "Controller Middleware"
msgstr "Controller Middleware"

#: docs/8.x/controllers.md:block 27 (paragraph)
msgid "[Middleware](/docs/{{version}}/middleware) may be assigned to the controller's routes in your route files:"
msgstr "可在路由檔案中指派 [Middleware](/docs/{{version}}/middleware) 給 Controller 的路由："

#: docs/8.x/controllers.md:block 28 (code)
msgid "Route::get('profile', [UserController::class, 'show'])->middleware('auth');\n"
msgstr "Route::get('profile', [UserController::class, 'show'])->middleware('auth');\n"

#: docs/8.x/controllers.md:block 29 (paragraph)
msgid "Or, you may find it convenient to specify middleware within your controller's constructor. Using the `middleware` method within your controller's constructor, you can assign middleware to the controller's actions:"
msgstr "或者，你可能會覺得在 Controller 的建構函式內指定 Middleware 比較方便。在 Controller 的建構函式內使用 `middleware` 方法，就能指派 Middleware 給該 Controller 的動作："

#: docs/8.x/controllers.md:block 30 (code)
msgid "class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Instantiate a new controller instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->middleware('auth');\n"
"        $this->middleware('log')->only('index');\n"
"        $this->middleware('subscribed')->except('store');\n"
"    }\n"
"}\n"
msgstr "class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Instantiate a new controller instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->middleware('auth');\n"
"        $this->middleware('log')->only('index');\n"
"        $this->middleware('subscribed')->except('store');\n"
"    }\n"
"}\n"

#: docs/8.x/controllers.md:block 31 (paragraph)
msgid "Controllers also allow you to register middleware using a closure. This provides a convenient way to define an inline middleware for a single controller without defining an entire middleware class:"
msgstr "Controller 也能讓你使用閉包來註冊 Middleware。這樣便提供了一種方便的方式來為單一 Controller 定義內崁 Middleware 而無需定義整個 Middleware 類別："

#: docs/8.x/controllers.md:block 32 (code)
msgid "$this->middleware(function ($request, $next) {\n"
"    return $next($request);\n"
"});\n"
msgstr "$this->middleware(function ($request, $next) {\n"
"    return $next($request);\n"
"});\n"

#: docs/8.x/controllers.md:block 34 (header)
msgid "Resource Controllers"
msgstr "資源 Controller"

#: docs/8.x/controllers.md:block 35 (paragraph)
msgid "If you think of each Eloquent model in your application as a \"resource\", it is typical to perform the same sets of actions against each resource in your application. For example, imagine your application contains a `Photo` model and a `Movie` model. It is likely that users can create, read, update, or delete these resources."
msgstr "若將專案內的各個 Eloquent Model 當作是「資源」，則我們通常會在專案中對各個資源進行同一系列的動作。舉例來說，假設專案中有個 `Photo` Model 與 `Movie` Model。則使用者應該可以建立 (Create)、檢視 (Read)、更新 (Update)、或刪除 (Delete) 這些資源。"

#: docs/8.x/controllers.md:block 36 (paragraph)
msgid "Because of this common use case, Laravel resource routing assigns the typical create, read, update, and delete (\"CRUD\") routes to a controller with a single line of code. To get started, we can use the `make:controller` Artisan command's `--resource` option to quickly create a controller to handle these actions:"
msgstr "由於這個常見的使用情況，Laravel 資源路由可將常見的建立 (Create)、讀取 (Read)、更新 (Update) 與刪除 (Delete) (即「CRUD」) 通過單行程式碼來指派路由。要開始建立資源路由，可使用 `make:controller` Artisan 指令的 `--resource` 選項來快速建立處理這些動作的 Controller："

#: docs/8.x/controllers.md:block 37 (code)
msgid "php artisan make:controller PhotoController --resource\n"
msgstr "php artisan make:controller PhotoController --resource\n"

#: docs/8.x/controllers.md:block 38 (paragraph)
msgid "This command will generate a controller at `app/Http/Controllers/PhotoController.php`. The controller will contain a method for each of the available resource operations. Next, you may register a resource route that points to the controller:"
msgstr "這個指令會在 `app/Http/Controllers/PhotoController.php` 下產生一個 Controller。該 Controller 會包含用於各個可用資源操作的方法。接著，可以註冊一個指向該 Controller 的資源路由："

#: docs/8.x/controllers.md:block 39 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::resource('photos', PhotoController::class);\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::resource('photos', PhotoController::class);\n"

#: docs/8.x/controllers.md:block 40 (paragraph)
msgid "This single route declaration creates multiple routes to handle a variety of actions on the resource. The generated controller will already have methods stubbed for each of these actions. Remember, you can always get a quick overview of your application's routes by running the `route:list` Artisan command."
msgstr "這一個路由定義會建立多個路由來處理對該資源的數種動作。剛才產生的 Controller 已經預先有了用於這幾個動作的方法了。請記得，你可以隨時通過執行 `route:list` Artisan 指令來快速檢視專案的路由。"

#: docs/8.x/controllers.md:block 41 (paragraph)
msgid "You may even register many resource controllers at once by passing an array to the `resources` method:"
msgstr "也可以通過傳入陣列給 `resources` 方法來一次註冊多個資源 Controller："

#: docs/8.x/controllers.md:block 42 (code)
msgid "Route::resources([\n"
"    'photos' => PhotoController::class,\n"
"    'posts' => PostController::class,\n"
"]);\n"
msgstr "Route::resources([\n"
"    'photos' => PhotoController::class,\n"
"    'posts' => PostController::class,\n"
"]);\n"

#: docs/8.x/controllers.md:block 44 (header)
msgid "Actions Handled By Resource Controller"
msgstr "由資源 Controller 處理的動作"

#: docs/8.x/controllers.md:block 45 (table)
msgid "Verb"
msgstr "動詞"

#: docs/8.x/controllers.md:block 45 (table)
msgid "URI"
msgstr "URI"

#: docs/8.x/controllers.md:block 45 (table)
msgid "Action"
msgstr "動作"

#: docs/8.x/controllers.md:block 45 (table)
msgid "Route Name"
msgstr "Route 名稱"

#: docs/8.x/controllers.md:block 45 (table)
msgid "GET"
msgstr "GET"

#: docs/8.x/controllers.md:block 45 (table)
msgid "`/photos`"
msgstr "`/photos`"

#: docs/8.x/controllers.md:block 45 (table)
msgid "index"
msgstr "index"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.index"
msgstr "photos.index"

#: docs/8.x/controllers.md:block 45 (table)
msgid "`/photos/create`"
msgstr "`/photos/create`"

#: docs/8.x/controllers.md:block 45 (table)
msgid "create"
msgstr "create"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.create"
msgstr "photos.create"

#: docs/8.x/controllers.md:block 45 (table)
msgid "POST"
msgstr "POST"

#: docs/8.x/controllers.md:block 45 (table)
msgid "store"
msgstr "store"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.store"
msgstr "photos.store"

#: docs/8.x/controllers.md:block 45 (table)
msgid "`/photos/{photo}`"
msgstr "`/photos/{photo}`"

#: docs/8.x/controllers.md:block 45 (table)
msgid "show"
msgstr "show"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.show"
msgstr "photos.show"

#: docs/8.x/controllers.md:block 45 (table)
msgid "`/photos/{photo}/edit`"
msgstr "`/photos/{photo}/edit`"

#: docs/8.x/controllers.md:block 45 (table)
msgid "edit"
msgstr "edit"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.edit"
msgstr "photos.edit"

#: docs/8.x/controllers.md:block 45 (table)
msgid "PUT/PATCH"
msgstr "PUT/PATCH"

#: docs/8.x/controllers.md:block 45 (table)
msgid "update"
msgstr "update"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.update"
msgstr "photos.update"

#: docs/8.x/controllers.md:block 45 (table)
msgid "DELETE"
msgstr "DELETE"

#: docs/8.x/controllers.md:block 45 (table)
msgid "destroy"
msgstr "destroy"

#: docs/8.x/controllers.md:block 45 (table)
msgid "photos.destroy"
msgstr "photos.destroy"

#: docs/8.x/controllers.md:block 47 (header)
msgid "Customizing Missing Model Behavior"
msgstr "自訂找不到 Model 的行為"

#: docs/8.x/controllers.md:block 48 (paragraph)
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound resource model is not found. However, you may customize this behavior by calling the `missing` method when defining your resource route. The `missing` method accepts a closure that will be invoked if an implicitly bound model can not be found for any of the resource's routes:"
msgstr "通常來說，若找不到隱式繫結的資源 Model 時會產生一個 404 HTTP 回應。不過，可以在定義資源路由時通過呼叫 `missing` 方法來自訂這個行為。`missing` 方法接受一個閉包，該閉包會在任何資源的路由上找不到隱式繫結的 Model 時被叫用："

#: docs/8.x/controllers.md:block 49 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Redirect;\n\n"
"Route::resource('photos', PhotoController::class)\n"
"        ->missing(function (Request $request) {\n"
"            return Redirect::route('photos.index');\n"
"        });\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Redirect;\n\n"
"Route::resource('photos', PhotoController::class)\n"
"        ->missing(function (Request $request) {\n"
"            return Redirect::route('photos.index');\n"
"        });\n"

#: docs/8.x/controllers.md:block 51 (header)
msgid "Specifying The Resource Model"
msgstr "指定資源 Model"

#: docs/8.x/controllers.md:block 52 (paragraph)
msgid "If you are using [route model binding](/docs/{{version}}/routing#route-model-binding) and would like the resource controller's methods to type-hint a model instance, you may use the `--model` option when generating the controller:"
msgstr "若使用了[路由 Model 繫結](/docs/{{version}}/routing#route-model-binding)，且想型別提示資源 Controller 的方法，可以在產生 Controller 時使用 `--model` 選項："

#: docs/8.x/controllers.md:block 53 (code)
msgid "php artisan make:controller PhotoController --model=Photo --resource\n"
msgstr "php artisan make:controller PhotoController --model=Photo --resource\n"

#: docs/8.x/controllers.md:block 55 (header)
msgid "Generating Form Requests"
msgstr "產生 Form Request"

#: docs/8.x/controllers.md:block 56 (paragraph)
msgid "You may provide the `--requests` option when generating a resource controller to instruct Artisan to generate [form request classes](/docs/{{version}}/validation#form-request-validation) for the controller's storage and update methods:"
msgstr "可以在產生資源 Controller 時提供 `--requests` 選項來告訴 Artisan 要產生用於 Controller 中 storage 與 update 方法的 [Form Request 類別](/docs/{{version}}/validation#form-request-validation)："

#: docs/8.x/controllers.md:block 57 (code)
msgid "php artisan make:controller PhotoController --model=Photo --resource --requests\n"
msgstr "php artisan make:controller PhotoController --model=Photo --resource --requests\n"

#: docs/8.x/controllers.md:block 59 (header)
msgid "Partial Resource Routes"
msgstr "部分資源路由"

#: docs/8.x/controllers.md:block 60 (paragraph)
msgid "When declaring a resource route, you may specify a subset of actions the controller should handle instead of the full set of default actions:"
msgstr "宣告資源路由時，比起宣告全部的預設動作，也可以只宣告該 Controller 要處理的一部分動作："

#: docs/8.x/controllers.md:block 61 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::resource('photos', PhotoController::class)->only([\n"
"    'index', 'show'\n"
"]);\n\n"
"Route::resource('photos', PhotoController::class)->except([\n"
"    'create', 'store', 'update', 'destroy'\n"
"]);\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::resource('photos', PhotoController::class)->only([\n"
"    'index', 'show'\n"
"]);\n\n"
"Route::resource('photos', PhotoController::class)->except([\n"
"    'create', 'store', 'update', 'destroy'\n"
"]);\n"

#: docs/8.x/controllers.md:block 63 (header)
msgid "API Resource Routes"
msgstr "API 資源路由"

#: docs/8.x/controllers.md:block 64 (paragraph)
msgid "When declaring resource routes that will be consumed by APIs, you will commonly want to exclude routes that present HTML templates such as `create` and `edit`. For convenience, you may use the `apiResource` method to automatically exclude these two routes:"
msgstr "在會被 API 使用的資源路由時，我們通常會想排除用來顯示 HTML 樣板的路由，如 `create` 與 `edit`。為了方便起見，可以使用 `apiResource` 方法來自動排除這兩個路由："

#: docs/8.x/controllers.md:block 65 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::apiResource('photos', PhotoController::class);\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::apiResource('photos', PhotoController::class);\n"

#: docs/8.x/controllers.md:block 66 (paragraph)
msgid "You may register many API resource controllers at once by passing an array to the `apiResources` method:"
msgstr "也可以通過傳入陣列給 `apiResources` 方法來一次註冊多個 API 資源 Controller："

#: docs/8.x/controllers.md:block 67 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n"
"use App\\Http\\Controllers\\PostController;\n\n"
"Route::apiResources([\n"
"    'photos' => PhotoController::class,\n"
"    'posts' => PostController::class,\n"
"]);\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n"
"use App\\Http\\Controllers\\PostController;\n\n"
"Route::apiResources([\n"
"    'photos' => PhotoController::class,\n"
"    'posts' => PostController::class,\n"
"]);\n"

#: docs/8.x/controllers.md:block 68 (paragraph)
msgid "To quickly generate an API resource controller that does not include the `create` or `edit` methods, use the `--api` switch when executing the `make:controller` command:"
msgstr "若要快速建立不包含 `create` 或 `edit` 方法的 API 資源路由，請在執行 `make:contorller` 指令時使用 `--api` 開關："

#: docs/8.x/controllers.md:block 69 (code)
msgid "php artisan make:controller PhotoController --api\n"
msgstr "php artisan make:controller PhotoController --api\n"

#: docs/8.x/controllers.md:block 71 (header)
msgid "Nested Resources"
msgstr "巢狀資源"

#: docs/8.x/controllers.md:block 72 (paragraph)
msgid "Sometimes you may need to define routes to a nested resource. For example, a photo resource may have multiple comments that may be attached to the photo. To nest the resource controllers, you may use \"dot\" notation in your route declaration:"
msgstr "有時候我們會需要為巢狀資源定義路由。舉例來說，某個照片資源可能會有多個附加到該照片的留言。要巢狀嵌套資源 Controller，我們可以在路由定義上使用「點」標記法："

#: docs/8.x/controllers.md:block 73 (code)
msgid "use App\\Http\\Controllers\\PhotoCommentController;\n\n"
"Route::resource('photos.comments', PhotoCommentController::class);\n"
msgstr "use App\\Http\\Controllers\\PhotoCommentController;\n\n"
"Route::resource('photos.comments', PhotoCommentController::class);\n"

#: docs/8.x/controllers.md:block 74 (paragraph)
msgid "This route will register a nested resource that may be accessed with URIs like the following:"
msgstr "該路由會註冊一個巢狀資源，可使用像這樣的 URI 來存取："

#: docs/8.x/controllers.md:block 75 (code)
msgid "/photos/{photo}/comments/{comment}\n"
msgstr "/photos/{photo}/comments/{comment}\n"

#: docs/8.x/controllers.md:block 77 (header)
msgid "Scoping Nested Resources"
msgstr "限定範圍的巢狀資源"

#: docs/8.x/controllers.md:block 78 (paragraph)
msgid "Laravel's [implicit model binding](/docs/{{version}}/routing#implicit-model-binding-scoping) feature can automatically scope nested bindings such that the resolved child model is confirmed to belong to the parent model. By using the `scoped` method when defining your nested resource, you may enable automatic scoping as well as instruct Laravel which field the child resource should be retrieved by. For more information on how to accomplish this, please see the documentation on [scoping resource routes](#restful-scoping-resource-routes)."
msgstr "Laravel 的[隱式 Model 繫結](/docs/{{version}}/routing#implicit-model-binding-scoping)功能可自動限制巢狀繫結的範圍，讓要被解析的子 Model 可被限制在屬於其上層 Model。只要在定義巢狀資源時使用 `scoped` 方法，就可以開啟自動範圍限制，並告訴 Laravel 應使用子資源的哪個欄位來取得。更多有關此的資訊，請參考[限制資源路由的範圍](#restful-scoping-resource-routes)的說明文件。"

#: docs/8.x/controllers.md:block 80 (header)
msgid "Shallow Nesting"
msgstr "淺層巢狀"

#: docs/8.x/controllers.md:block 81 (paragraph)
msgid "Often, it is not entirely necessary to have both the parent and the child IDs within a URI since the child ID is already a unique identifier. When using unique identifiers such as auto-incrementing primary keys to identify your models in URI segments, you may choose to use \"shallow nesting\":"
msgstr "通常，在 URI 中並不需要同時擁有上層 Model 與子 Model 的 ID，因為子 ID 已經是唯一的識別子了。若要在使用唯一如自動遞增的主鍵這樣的識別子來在 URI 區段中識別 Model，可使用「淺層巢狀 (Shallow Nesting)」："

#: docs/8.x/controllers.md:block 82 (code)
msgid "use App\\Http\\Controllers\\CommentController;\n\n"
"Route::resource('photos.comments', CommentController::class)->shallow();\n"
msgstr "use App\\Http\\Controllers\\CommentController;\n\n"
"Route::resource('photos.comments', CommentController::class)->shallow();\n"

#: docs/8.x/controllers.md:block 83 (paragraph)
msgid "This route definition will define the following routes:"
msgstr "這個路由定義會定義下列路由："

#: docs/8.x/controllers.md:block 84 (table)
msgid "`/photos/{photo}/comments`"
msgstr "`/photos/{photo}/comments`"

#: docs/8.x/controllers.md:block 84 (table)
msgid "photos.comments.index"
msgstr "photos.comments.index"

#: docs/8.x/controllers.md:block 84 (table)
msgid "`/photos/{photo}/comments/create`"
msgstr "`/photos/{photo}/comments/create`"

#: docs/8.x/controllers.md:block 84 (table)
msgid "photos.comments.create"
msgstr "photos.comments.create"

#: docs/8.x/controllers.md:block 84 (table)
msgid "photos.comments.store"
msgstr "photos.comments.store"

#: docs/8.x/controllers.md:block 84 (table)
msgid "`/comments/{comment}`"
msgstr "`/comments/{comment}`"

#: docs/8.x/controllers.md:block 84 (table)
msgid "comments.show"
msgstr "comments.show"

#: docs/8.x/controllers.md:block 84 (table)
msgid "`/comments/{comment}/edit`"
msgstr "`/comments/{comment}/edit`"

#: docs/8.x/controllers.md:block 84 (table)
msgid "comments.edit"
msgstr "comments.edit"

#: docs/8.x/controllers.md:block 84 (table)
msgid "comments.update"
msgstr "comments.update"

#: docs/8.x/controllers.md:block 84 (table)
msgid "comments.destroy"
msgstr "comments.destroy"

#: docs/8.x/controllers.md:block 86 (header)
msgid "Naming Resource Routes"
msgstr "命名資源路由"

#: docs/8.x/controllers.md:block 87 (paragraph)
msgid "By default, all resource controller actions have a route name; however, you can override these names by passing a `names` array with your desired route names:"
msgstr "預設情況下，所有的資源 Controller 動作都有對應的路由名稱。不過，可以通過將包含欲使用的路由名稱的陣列傳入 `names` 來複寫這些名稱："

#: docs/8.x/controllers.md:block 88 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::resource('photos', PhotoController::class)->names([\n"
"    'create' => 'photos.build'\n"
"]);\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n\n"
"Route::resource('photos', PhotoController::class)->names([\n"
"    'create' => 'photos.build'\n"
"]);\n"

#: docs/8.x/controllers.md:block 90 (header)
msgid "Naming Resource Route Parameters"
msgstr "命名資源路由參數"

#: docs/8.x/controllers.md:block 91 (paragraph)
msgid "By default, `Route::resource` will create the route parameters for your resource routes based on the \"singularized\" version of the resource name. You can easily override this on a per resource basis using the `parameters` method. The array passed into the `parameters` method should be an associative array of resource names and parameter names:"
msgstr "預設情況下，`Route::resource` 會為依照「單數化 (Singularized)」的資源名稱來為資源路由建立路由參數。可以輕鬆地通過 `parameters` 方法來對個別資源複寫資源名稱。傳入 `parameters` 的陣列應為一個包含資源名稱與參數名稱的關聯式陣列："

#: docs/8.x/controllers.md:block 92 (code)
msgid "use App\\Http\\Controllers\\AdminUserController;\n\n"
"Route::resource('users', AdminUserController::class)->parameters([\n"
"    'users' => 'admin_user'\n"
"]);\n"
msgstr "use App\\Http\\Controllers\\AdminUserController;\n\n"
"Route::resource('users', AdminUserController::class)->parameters([\n"
"    'users' => 'admin_user'\n"
"]);\n"

#: docs/8.x/controllers.md:block 93 (paragraph)
msgid "The example above generates the following URI for the resource's `show` route:"
msgstr " 上述範例會為資源的 `show` 路由產生下列 URI："

#: docs/8.x/controllers.md:block 94 (code)
msgid "/users/{admin_user}\n"
msgstr "/users/{admin_user}\n"

#: docs/8.x/controllers.md:block 96 (header)
msgid "Scoping Resource Routes"
msgstr "限制資源路由的範圍"

#: docs/8.x/controllers.md:block 97 (paragraph)
msgid "Laravel's [scoped implicit model binding](/docs/{{version}}/routing#implicit-model-binding-scoping) feature can automatically scope nested bindings such that the resolved child model is confirmed to belong to the parent model. By using the `scoped` method when defining your nested resource, you may enable automatic scoping as well as instruct Laravel which field the child resource should be retrieved by:"
msgstr "Laravel 的[限定範圍的隱式 Model 繫結](/docs/{{version}}/routing#implicit-model-binding-scoping)功能可自動限制巢狀繫結的範圍，讓要被解析的子 Model 可被限制在屬於其上層 Model。只要在定義巢狀資源時使用 `scoped` 方法，就可以開啟自動範圍限制，並告訴 Laravel 應使用子資源的哪個欄位來取得："

#: docs/8.x/controllers.md:block 98 (code)
msgid "use App\\Http\\Controllers\\PhotoCommentController;\n\n"
"Route::resource('photos.comments', PhotoCommentController::class)->scoped([\n"
"    'comment' => 'slug',\n"
"]);\n"
msgstr "use App\\Http\\Controllers\\PhotoCommentController;\n\n"
"Route::resource('photos.comments', PhotoCommentController::class)->scoped([\n"
"    'comment' => 'slug',\n"
"]);\n"

#: docs/8.x/controllers.md:block 99 (paragraph)
msgid "This route will register a scoped nested resource that may be accessed with URIs like the following:"
msgstr "該路由會註冊一個限定範圍的巢狀資源，可使用像這樣的 URI 來存取："

#: docs/8.x/controllers.md:block 100 (code)
msgid "/photos/{photo}/comments/{comment:slug}\n"
msgstr "/photos/{photo}/comments/{comment:slug}\n"

#: docs/8.x/controllers.md:block 101 (paragraph)
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. In this case, it will be assumed that the `Photo` model has a relationship named `comments` (the plural of the route parameter name) which can be used to retrieve the `Comment` model."
msgstr "當使用自訂鍵值的隱式繫結作為巢狀路由參數時，Laravel 會自動以慣例推測其上層 Model 上的關聯名稱來將限制巢狀 Model 的查詢範圍。在這個例子中，Laravel 會假設 `Photo` Model 有個名為 `comments` 的關聯 (即路由參數名稱的複數形)，該關聯將用於取得 `Comment` Model。"

#: docs/8.x/controllers.md:block 103 (header)
msgid "Localizing Resource URIs"
msgstr "本地化資源 URI"

#: docs/8.x/controllers.md:block 104 (paragraph)
msgid "By default, `Route::resource` will create resource URIs using English verbs. If you need to localize the `create` and `edit` action verbs, you may use the `Route::resourceVerbs` method. This may be done at the beginning of the `boot` method within your application's `App\\Providers\\RouteServiceProvider`:"
msgstr "預設情況下，`Route::resource` 會使用英語的動詞來建立資源 URI。若有需要本地化 `create` 與 `action` 動作的動詞，可以使用 `Route::resourceVerbs` 方法。這可以放在專案的 `App\\Providers\\RouteServiceProvider` 中之 `boot` 方法開頭。"

#: docs/8.x/controllers.md:block 105 (code)
msgid "/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::resourceVerbs([\n"
"        'create' => 'crear',\n"
"        'edit' => 'editar',\n"
"    ]);\n\n"
"    // ...\n"
"}\n"
msgstr "/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::resourceVerbs([\n"
"        'create' => 'crear',\n"
"        'edit' => 'editar',\n"
"    ]);\n\n"
"    // ...\n"
"}\n"

#: docs/8.x/controllers.md:block 106 (paragraph)
msgid "Once the verbs have been customized, a resource route registration such as `Route::resource('fotos', PhotoController::class)` will produce the following URIs:"
msgstr "自訂完動詞後，使用如 `Route::resource('fotos', PhotoController::class)` 註冊的資源路由就會產生下列 URI："

#: docs/8.x/controllers.md:block 107 (code)
msgid "/fotos/crear\n\n"
"/fotos/{foto}/editar\n"
msgstr "/fotos/crear\n\n"
"/fotos/{foto}/editar\n"

#: docs/8.x/controllers.md:block 109 (header)
msgid "Supplementing Resource Controllers"
msgstr "補充資源 Controller"

#: docs/8.x/controllers.md:block 110 (paragraph)
msgid "If you need to add additional routes to a resource controller beyond the default set of resource routes, you should define those routes before your call to the `Route::resource` method; otherwise, the routes defined by the `resource` method may unintentionally take precedence over your supplemental routes:"
msgstr "若有需要為某個資源 Controller 增加除了預設資源路由以外的額外路由，則應在呼叫 `Route::resource` 方法前先定義這些路由。否則，又 `resource` 方法定義的路由可能會不可預期地取代所擴充的路由："

#: docs/8.x/controllers.md:block 111 (code)
msgid "use App\\Http\\Controller\\PhotoController;\n\n"
"Route::get('/photos/popular', [PhotoController::class, 'popular']);\n"
"Route::resource('photos', PhotoController::class);\n"
msgstr "use App\\Http\\Controller\\PhotoController;\n\n"
"Route::get('/photos/popular', [PhotoController::class, 'popular']);\n"
"Route::resource('photos', PhotoController::class);\n"

#: docs/8.x/controllers.md:block 112 (quote)
msgid "{tip} Remember to keep your controllers focused. If you find yourself routinely needing methods outside of the typical set of resource actions, consider splitting your controller into two, smaller controllers."
msgstr "{tip} 請記得要保持 Controller 的功能專一。若發現常常需要使用除了一般資源動作以外的方法，請考慮將 Controller 拆分成兩個、更小的 Controller。"

#: docs/8.x/controllers.md:block 114 (header)
msgid "Dependency Injection & Controllers"
msgstr "依賴注入與 Controller"

#: docs/8.x/controllers.md:block 116 (header)
msgid "Constructor Injection"
msgstr "建構函式注入"

#: docs/8.x/controllers.md:block 117 (paragraph)
msgid "The Laravel [service container](/docs/{{version}}/container) is used to resolve all Laravel controllers. As a result, you are able to type-hint any dependencies your controller may need in its constructor. The declared dependencies will automatically be resolved and injected into the controller instance:"
msgstr "Laravel 的 [Service Container](/docs/{{version}}/container) 會被用來解析所有的 Laravel Controller。因此，可以在 Controller 的建構函式內型別提示所有 Controller 所需要的依賴。所宣告的依賴會被自動解析並插入到 Controller 實體上："

#: docs/8.x/controllers.md:block 118 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"}\n"

#: docs/8.x/controllers.md:block 120 (header)
msgid "Method Injection"
msgstr "方法注入"

#: docs/8.x/controllers.md:block 121 (paragraph)
msgid "In addition to constructor injection, you may also type-hint dependencies on your controller's methods. A common use-case for method injection is injecting the `Illuminate\\Http\\Request` instance into your controller methods:"
msgstr "除了注入到建構函式內，也可以在 Controller 的方法上型別提示依賴。常見的使用情況是將 `Illuminate\\Http\\Request` 實體注入到 Controller 方法內："

#: docs/8.x/controllers.md:block 122 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $name = $request->name;\n\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $name = $request->name;\n\n"
"        //\n"
"    }\n"
"}\n"

#: docs/8.x/controllers.md:block 123 (paragraph)
msgid "If your controller method is also expecting input from a route parameter, list your route arguments after your other dependencies. For example, if your route is defined like so:"
msgstr "若 Controller 方法也預期會從路由參數取得輸入，則請將路由引數放在其他依賴之後。舉例來說，若路由是像這樣定義："

#: docs/8.x/controllers.md:block 124 (code)
msgid "use App\\Http\\Controllers\\UserController;\n\n"
"Route::put('/user/{id}', [UserController::class, 'update']);\n"
msgstr "use App\\Http\\Controllers\\UserController;\n\n"
"Route::put('/user/{id}', [UserController::class, 'update']);\n"

#: docs/8.x/controllers.md:block 125 (paragraph)
msgid "You may still type-hint the `Illuminate\\Http\\Request` and access your `id` parameter by defining your controller method as follows:"
msgstr "還是可以像這樣定義 Controller 方法來型別提示 `Illuminate\\Http\\Request` 並取得 `id` 參數："

#: docs/8.x/controllers.md:block 126 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  string  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, $id)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Illuminate\\Http\\Request;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  string  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, $id)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"

#: docs/9.x/controllers.md:block 15 (quote)
msgid "**Note** Controllers are not **required** to extend a base class. However, you will not have access to convenient features such as the `middleware` and `authorize` methods."
msgstr ""

#: docs/9.x/controllers.md:block 24 (quote)
msgid "**Note** Controller stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr ""

#: docs/9.x/controllers.md:block 104 (paragraph)
msgid "By default, `Route::resource` will create resource URIs using English verbs and plural rules. If you need to localize the `create` and `edit` action verbs, you may use the `Route::resourceVerbs` method. This may be done at the beginning of the `boot` method within your application's `App\\Providers\\RouteServiceProvider`:"
msgstr ""

#: docs/9.x/controllers.md:block 106 (paragraph)
msgid "Laravel's pluralizer supports [several different languages which you may configure based on your needs](/docs/{{version}}/localization#pluralization-language). Once the verbs and pluralization language have been customized, a resource route registration such as `Route::resource('publicacion', PublicacionController::class)` will produce the following URIs:"
msgstr ""

#: docs/9.x/controllers.md:block 107 (code)
msgid "/publicacion/crear\n\n"
"/publicacion/{publicaciones}/editar\n"
msgstr ""

#: docs/9.x/controllers.md:block 112 (quote)
msgid "**Note** Remember to keep your controllers focused. If you find yourself routinely needing methods outside of the typical set of resource actions, consider splitting your controller into two, smaller controllers."
msgstr ""

