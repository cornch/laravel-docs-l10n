msgid ""
msgstr ""

#: ./docs/8.x/octane.md:1
#: ./docs/9.x/octane.md:1
#: ./docs/10.x/octane.md:1
#: ./docs/11.x/octane.md:1
#: ./docs/master/octane.md:1
msgid "Laravel Octane"
msgstr ""

#: ./docs/8.x/octane.md:3
#: ./docs/9.x/octane.md:3
#: ./docs/10.x/octane.md:3
#: ./docs/11.x/octane.md:3
#: ./docs/master/octane.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/octane.md:4
#: ./docs/9.x/octane.md:4
#: ./docs/10.x/octane.md:4
#: ./docs/11.x/octane.md:4
#: ./docs/master/octane.md:4
msgid "[Installation](#installation)"
msgstr ""

#: ./docs/8.x/octane.md:5
#: ./docs/9.x/octane.md:5
#: ./docs/10.x/octane.md:5
#: ./docs/11.x/octane.md:5
#: ./docs/master/octane.md:5
msgid "[Server Prerequisites](#server-prerequisites)"
msgstr ""

#: ./docs/10.x/octane.md:6
#: ./docs/11.x/octane.md:6
#: ./docs/master/octane.md:6
msgid "[FrankenPHP](#frankenphp)"
msgstr ""

#: ./docs/8.x/octane.md:6
#: ./docs/9.x/octane.md:6
#: ./docs/10.x/octane.md:7
#: ./docs/11.x/octane.md:7
#: ./docs/master/octane.md:7
msgid "[RoadRunner](#roadrunner)"
msgstr ""

#: ./docs/8.x/octane.md:7
#: ./docs/9.x/octane.md:7
#: ./docs/10.x/octane.md:8
#: ./docs/11.x/octane.md:8
#: ./docs/master/octane.md:8
msgid "[Swoole](#swoole)"
msgstr ""

#: ./docs/8.x/octane.md:8
#: ./docs/9.x/octane.md:8
#: ./docs/10.x/octane.md:9
#: ./docs/11.x/octane.md:9
#: ./docs/master/octane.md:9
msgid "[Serving Your Application](#serving-your-application)"
msgstr ""

#: ./docs/8.x/octane.md:9
#: ./docs/9.x/octane.md:9
msgid "[Serving Your Application Via HTTPS](#serving-your-application-via-https)"
msgstr ""

#: ./docs/10.x/octane.md:10
#: ./docs/11.x/octane.md:10
#: ./docs/master/octane.md:10
msgid "[Serving Your Application via HTTPS](#serving-your-application-via-https)"
msgstr ""

#: ./docs/8.x/octane.md:10
#: ./docs/9.x/octane.md:10
msgid "[Serving Your Application Via Nginx](#serving-your-application-via-nginx)"
msgstr ""

#: ./docs/10.x/octane.md:11
#: ./docs/11.x/octane.md:11
#: ./docs/master/octane.md:11
msgid "[Serving Your Application via Nginx](#serving-your-application-via-nginx)"
msgstr ""

#: ./docs/8.x/octane.md:11
#: ./docs/9.x/octane.md:11
msgid "[Watching For File Changes](#watching-for-file-changes)"
msgstr ""

#: ./docs/10.x/octane.md:12
#: ./docs/11.x/octane.md:12
#: ./docs/master/octane.md:12
msgid "[Watching for File Changes](#watching-for-file-changes)"
msgstr ""

#: ./docs/8.x/octane.md:12
#: ./docs/9.x/octane.md:12
msgid "[Specifying The Worker Count](#specifying-the-worker-count)"
msgstr ""

#: ./docs/10.x/octane.md:13
#: ./docs/11.x/octane.md:13
#: ./docs/master/octane.md:13
msgid "[Specifying the Worker Count](#specifying-the-worker-count)"
msgstr ""

#: ./docs/8.x/octane.md:13
#: ./docs/9.x/octane.md:13
msgid "[Specifying The Max Request Count](#specifying-the-max-request-count)"
msgstr ""

#: ./docs/10.x/octane.md:14
#: ./docs/11.x/octane.md:14
#: ./docs/master/octane.md:14
msgid "[Specifying the Max Request Count](#specifying-the-max-request-count)"
msgstr ""

#: ./docs/8.x/octane.md:14
#: ./docs/9.x/octane.md:14
msgid "[Reloading The Workers](#reloading-the-workers)"
msgstr ""

#: ./docs/10.x/octane.md:15
#: ./docs/11.x/octane.md:15
#: ./docs/master/octane.md:15
msgid "[Reloading the Workers](#reloading-the-workers)"
msgstr ""

#: ./docs/8.x/octane.md:15
#: ./docs/9.x/octane.md:15
msgid "[Stopping The Server](#stopping-the-server)"
msgstr ""

#: ./docs/10.x/octane.md:16
#: ./docs/11.x/octane.md:16
#: ./docs/master/octane.md:16
msgid "[Stopping the Server](#stopping-the-server)"
msgstr ""

#: ./docs/8.x/octane.md:16
#: ./docs/9.x/octane.md:16
msgid "[Dependency Injection & Octane](#dependency-injection-and-octane)"
msgstr ""

#: ./docs/10.x/octane.md:17
#: ./docs/11.x/octane.md:17
#: ./docs/master/octane.md:17
msgid "[Dependency Injection and Octane](#dependency-injection-and-octane)"
msgstr ""

#: ./docs/8.x/octane.md:17
#: ./docs/9.x/octane.md:17
#: ./docs/10.x/octane.md:18
#: ./docs/11.x/octane.md:18
#: ./docs/master/octane.md:18
msgid "[Container Injection](#container-injection)"
msgstr ""

#: ./docs/8.x/octane.md:18
#: ./docs/9.x/octane.md:18
#: ./docs/10.x/octane.md:19
#: ./docs/11.x/octane.md:19
#: ./docs/master/octane.md:19
msgid "[Request Injection](#request-injection)"
msgstr ""

#: ./docs/8.x/octane.md:19
#: ./docs/9.x/octane.md:19
#: ./docs/10.x/octane.md:20
#: ./docs/11.x/octane.md:20
#: ./docs/master/octane.md:20
msgid "[Configuration Repository Injection](#configuration-repository-injection)"
msgstr ""

#: ./docs/8.x/octane.md:20
#: ./docs/9.x/octane.md:20
#: ./docs/10.x/octane.md:21
#: ./docs/11.x/octane.md:21
#: ./docs/master/octane.md:21
msgid "[Managing Memory Leaks](#managing-memory-leaks)"
msgstr ""

#: ./docs/8.x/octane.md:21
#: ./docs/9.x/octane.md:21
#: ./docs/10.x/octane.md:22
#: ./docs/11.x/octane.md:22
#: ./docs/master/octane.md:22
msgid "[Concurrent Tasks](#concurrent-tasks)"
msgstr ""

#: ./docs/8.x/octane.md:22
#: ./docs/9.x/octane.md:22
msgid "[Ticks & Intervals](#ticks-and-intervals)"
msgstr ""

#: ./docs/10.x/octane.md:23
#: ./docs/11.x/octane.md:23
#: ./docs/master/octane.md:23
msgid "[Ticks and Intervals](#ticks-and-intervals)"
msgstr ""

#: ./docs/8.x/octane.md:23
#: ./docs/9.x/octane.md:23
#: ./docs/10.x/octane.md:24
#: ./docs/11.x/octane.md:24
#: ./docs/master/octane.md:24
msgid "[The Octane Cache](#the-octane-cache)"
msgstr ""

#: ./docs/8.x/octane.md:24
#: ./docs/9.x/octane.md:24
#: ./docs/10.x/octane.md:25
#: ./docs/11.x/octane.md:25
#: ./docs/master/octane.md:25
msgid "[Tables](#tables)"
msgstr ""

#: ./docs/8.x/octane.md:26
#: ./docs/9.x/octane.md:26
#: ./docs/10.x/octane.md:27
#: ./docs/11.x/octane.md:27
#: ./docs/master/octane.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:27
#: ./docs/9.x/octane.md:27
#: ./docs/10.x/octane.md:28
#: ./docs/11.x/octane.md:28
#: ./docs/master/octane.md:28
msgid "Introduction"
msgstr ""

#: ./docs/8.x/octane.md:29
#: ./docs/9.x/octane.md:29
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [Open Swoole](https://swoole.co.uk), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr ""

#: ./docs/10.x/octane.md:30
#: ./docs/11.x/octane.md:30
#: ./docs/master/octane.md:30
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [FrankenPHP](https://frankenphp.dev/), [Open Swoole](https://openswoole.com/), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr ""

#: ./docs/8.x/octane.md:31
#: ./docs/9.x/octane.md:31
#: ./docs/10.x/octane.md:32
#: ./docs/11.x/octane.md:32
#: ./docs/master/octane.md:32
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:32
#: ./docs/9.x/octane.md:32
#: ./docs/10.x/octane.md:33
#: ./docs/11.x/octane.md:33
#: ./docs/master/octane.md:33
msgid "Installation"
msgstr ""

#: ./docs/8.x/octane.md:34
#: ./docs/9.x/octane.md:34
#: ./docs/10.x/octane.md:35
#: ./docs/11.x/octane.md:35
#: ./docs/master/octane.md:35
msgid "Octane may be installed via the Composer package manager:"
msgstr ""

#: ./docs/8.x/octane.md:36
#: ./docs/9.x/octane.md:36
#: ./docs/10.x/octane.md:37
#: ./docs/11.x/octane.md:37
#: ./docs/master/octane.md:37
msgid "composer require laravel/octane"
msgstr ""

#: ./docs/8.x/octane.md:40
#: ./docs/9.x/octane.md:40
#: ./docs/10.x/octane.md:41
#: ./docs/11.x/octane.md:41
#: ./docs/master/octane.md:41
msgid "After installing Octane, you may execute the `octane:install` Artisan command, which will install Octane's configuration file into your application:"
msgstr ""

#: ./docs/8.x/octane.md:42
#: ./docs/9.x/octane.md:42
#: ./docs/10.x/octane.md:43
#: ./docs/11.x/octane.md:43
#: ./docs/master/octane.md:43
msgid "php artisan octane:install"
msgstr ""

#: ./docs/8.x/octane.md:46
#: ./docs/9.x/octane.md:46
#: ./docs/10.x/octane.md:47
#: ./docs/11.x/octane.md:47
#: ./docs/master/octane.md:47
#~ msgctxt "P"
#~ msgid "<a name=\"server-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:47
#: ./docs/9.x/octane.md:47
#: ./docs/10.x/octane.md:48
#: ./docs/11.x/octane.md:48
#: ./docs/master/octane.md:48
msgid "Server Prerequisites"
msgstr ""

#: ./docs/8.x/octane.md:49
#: ./docs/9.x/octane.md:50
msgid "Laravel Octane requires [PHP 8.0+](https://php.net/releases/)."
msgstr ""

#: ./docs/10.x/octane.md:51
#: ./docs/11.x/octane.md:51
#: ./docs/master/octane.md:51
msgid "Laravel Octane requires [PHP 8.1+](https://php.net/releases/)."
msgstr ""

#: ./docs/8.x/octane.md:51
#: ./docs/9.x/octane.md:52
#: ./docs/10.x/octane.md:143
#: ./docs/11.x/octane.md:142
#: ./docs/master/octane.md:143
#~ msgctxt "P"
#~ msgid "<a name=\"roadrunner\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:52
#: ./docs/9.x/octane.md:53
#: ./docs/10.x/octane.md:144
#: ./docs/11.x/octane.md:143
#: ./docs/master/octane.md:144
msgid "RoadRunner"
msgstr ""

#: ./docs/10.x/octane.md:53
#: ./docs/11.x/octane.md:53
#: ./docs/master/octane.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"frankenphp\"></a>"
#~ msgstr ""

#: ./docs/10.x/octane.md:54
#: ./docs/11.x/octane.md:54
#: ./docs/master/octane.md:54
msgid "FrankenPHP"
msgstr ""

#: ./docs/8.x/octane.md:54
#: ./docs/9.x/octane.md:55
#: ./docs/10.x/octane.md:146
#: ./docs/11.x/octane.md:145
#: ./docs/master/octane.md:146
msgid "[RoadRunner](https://roadrunner.dev) is powered by the RoadRunner binary, which is built using Go. The first time you start a RoadRunner based Octane server, Octane will offer to download and install the RoadRunner binary for you."
msgstr ""

#: ./docs/11.x/octane.md:56
msgid "[FrankenPHP](https://frankenphp.dev) is a PHP application server, written in Go, that supports modern web features like early hints, Brotli, and Zstandard compression. When you install Octane and choose FrankenPHP as your server, Octane will automatically download and install the FrankenPHP binary for you."
msgstr ""

#: ./docs/8.x/octane.md:56
#: ./docs/9.x/octane.md:57
#: ./docs/10.x/octane.md:148
#: ./docs/11.x/octane.md:147
#: ./docs/master/octane.md:148
#~ msgctxt "P"
#~ msgid "<a name=\"roadrunner-via-laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/10.x/octane.md:57
#: ./docs/master/octane.md:57
msgid "FrankenPHP's Octane integration is in beta and should be used with caution in production."
msgstr ""

#: ./docs/8.x/octane.md:57
#: ./docs/9.x/octane.md:58
msgid "RoadRunner Via Laravel Sail"
msgstr ""

#: ./docs/10.x/octane.md:59
#: ./docs/master/octane.md:59
msgid "[FrankenPHP](https://frankenphp.dev) is a PHP application server, written in Go, that supports modern web features like early hints and Zstandard compression. When you install Octane and choose FrankenPHP as your server, Octane will automatically download and install the FrankenPHP binary for you."
msgstr ""

#: ./docs/8.x/octane.md:59
#: ./docs/9.x/octane.md:60
#: ./docs/10.x/octane.md:151
#: ./docs/11.x/octane.md:150
#: ./docs/master/octane.md:151
msgid "If you plan to develop your application using [Laravel Sail](/docs/{{version}}/sail), you should run the following commands to install Octane and RoadRunner:"
msgstr ""

#: ./docs/10.x/octane.md:61
#: ./docs/11.x/octane.md:58
#: ./docs/master/octane.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"frankenphp-via-laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:61
#: ./docs/9.x/octane.md:62
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner"
msgstr ""

#: ./docs/10.x/octane.md:62
#: ./docs/11.x/octane.md:59
#: ./docs/master/octane.md:62
msgid "FrankenPHP via Laravel Sail"
msgstr ""

#: ./docs/10.x/octane.md:64
#: ./docs/11.x/octane.md:61
#: ./docs/master/octane.md:64
msgid "If you plan to develop your application using [Laravel Sail](/docs/{{version}}/sail), you should run the following commands to install Octane and FrankenPHP:"
msgstr ""

#: ./docs/10.x/octane.md:66
#: ./docs/11.x/octane.md:63
#: ./docs/master/octane.md:66
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane"
msgstr ""

#: ./docs/8.x/octane.md:67
#: ./docs/9.x/octane.md:68
#: ./docs/10.x/octane.md:159
#: ./docs/11.x/octane.md:158
#: ./docs/master/octane.md:159
msgid "Next, you should start a Sail shell and use the `rr` executable to retrieve the latest Linux based build of the RoadRunner binary:"
msgstr ""

#: ./docs/8.x/octane.md:69
#: ./docs/9.x/octane.md:70
#: ./docs/10.x/octane.md:161
#: ./docs/11.x/octane.md:160
#: ./docs/master/octane.md:161
msgid ""
"./vendor/bin/sail shell\n"
"\n"
"# Within the Sail shell...\n"
"./vendor/bin/rr get-binary"
msgstr ""

#: ./docs/10.x/octane.md:72
#: ./docs/11.x/octane.md:69
#: ./docs/master/octane.md:72
msgid "Next, you should use the `octane:install` Artisan command to install the FrankenPHP binary:"
msgstr ""

#: ./docs/10.x/octane.md:74
#: ./docs/11.x/octane.md:71
#: ./docs/master/octane.md:74
msgid "./vendor/bin/sail artisan octane:install --server=frankenphp"
msgstr ""

#: ./docs/8.x/octane.md:76
#: ./docs/9.x/octane.md:77
msgid "After installing the RoadRunner binary, you may exit your Sail shell session. You will now need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr ""

#: ./docs/11.x/octane.md:77
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=frankenphp --host=0.0.0.0 --admin-port=2019 --port='${APP_PORT:-80}'\" # [tl! add]\n"
"      XDG_CONFIG_HOME:  /var/www/html/config # [tl! add]\n"
"      XDG_DATA_HOME:  /var/www/html/data # [tl! add]"
msgstr ""

#: ./docs/10.x/octane.md:78
#: ./docs/11.x/octane.md:75
#: ./docs/master/octane.md:78
msgid "Finally, add a `SUPERVISOR_PHP_COMMAND` environment variable to the `laravel.test` service definition in your application's `docker-compose.yml` file. This environment variable will contain the command that Sail will use to serve your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/8.x/octane.md:78
#: ./docs/8.x/octane.md:112
#: ./docs/9.x/octane.md:79
#: ./docs/9.x/octane.md:114
msgid "./vendor/bin/sail artisan sail:publish"
msgstr ""

#: ./docs/10.x/octane.md:80
#: ./docs/master/octane.md:80
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=frankenphp --host=0.0.0.0 --admin-port=2019 --port=80\" # [tl! add]\n"
"      XDG_CONFIG_HOME:  /var/www/html/config # [tl! add]\n"
"      XDG_DATA_HOME:  /var/www/html/data # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:82
#: ./docs/8.x/octane.md:116
#: ./docs/9.x/octane.md:83
#: ./docs/9.x/octane.md:118
msgid "Next, update the `command` directive of your application's `docker/supervisord.conf` file so that Sail serves your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/8.x/octane.md:84
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=8000"
msgstr ""

#: ./docs/9.x/octane.md:85
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=80"
msgstr ""

#: ./docs/8.x/octane.md:88
#: ./docs/9.x/octane.md:89
#: ./docs/10.x/octane.md:177
#: ./docs/11.x/octane.md:176
#: ./docs/master/octane.md:177
msgid "Finally, ensure the `rr` binary is executable and build your Sail images:"
msgstr ""

#: ./docs/10.x/octane.md:89
#: ./docs/11.x/octane.md:86
#: ./docs/master/octane.md:89
msgid "To enable HTTPS, HTTP/2, and HTTP/3, apply these modifications instead:"
msgstr ""

#: ./docs/8.x/octane.md:90
#: ./docs/9.x/octane.md:91
#: ./docs/10.x/octane.md:179
#: ./docs/11.x/octane.md:178
#: ./docs/master/octane.md:179
msgid ""
"chmod +x ./rr\n"
"\n"
"./vendor/bin/sail build --no-cache"
msgstr ""

#: ./docs/10.x/octane.md:91
#: ./docs/11.x/octane.md:88
#: ./docs/master/octane.md:91
msgid ""
"services:\n"
"  laravel.test:\n"
"    ports:\n"
"        - '${APP_PORT:-80}:80'\n"
"        - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'\n"
"        - '443:443' # [tl! add]\n"
"        - '443:443/udp' # [tl! add]\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --host=localhost --port=443 --admin-port=2019 --https\" # [tl! add]\n"
"      XDG_CONFIG_HOME:  /var/www/html/config # [tl! add]\n"
"      XDG_DATA_HOME:  /var/www/html/data # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:96
#: ./docs/9.x/octane.md:97
#: ./docs/10.x/octane.md:185
#: ./docs/11.x/octane.md:184
#: ./docs/master/octane.md:185
#~ msgctxt "P"
#~ msgid "<a name=\"swoole\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:97
#: ./docs/9.x/octane.md:98
#: ./docs/10.x/octane.md:186
#: ./docs/11.x/octane.md:185
#: ./docs/master/octane.md:186
msgid "Swoole"
msgstr ""

#: ./docs/8.x/octane.md:99
#: ./docs/9.x/octane.md:100
#: ./docs/10.x/octane.md:188
#: ./docs/11.x/octane.md:187
#: ./docs/master/octane.md:188
msgid "If you plan to use the Swoole application server to serve your Laravel Octane application, you must install the Swoole PHP extension. Typically, this can be done via PECL:"
msgstr ""

#: ./docs/8.x/octane.md:101
#: ./docs/9.x/octane.md:102
#: ./docs/10.x/octane.md:190
#: ./docs/11.x/octane.md:189
#: ./docs/master/octane.md:190
msgid "pecl install swoole"
msgstr ""

#: ./docs/10.x/octane.md:105
#: ./docs/11.x/octane.md:102
#: ./docs/master/octane.md:105
msgid "Typically, you should access your FrankenPHP Sail application via `https://localhost`, as using `https://127.0.0.1` requires additional configuration and is [discouraged](https://frankenphp.dev/docs/known-issues/#using-https127001-with-docker)."
msgstr ""

#: ./docs/8.x/octane.md:105
#: ./docs/9.x/octane.md:106
#: ./docs/10.x/octane.md:205
#: ./docs/11.x/octane.md:204
#: ./docs/master/octane.md:205
#~ msgctxt "P"
#~ msgid "<a name=\"swoole-via-laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:106
#: ./docs/9.x/octane.md:107
msgid "Swoole Via Laravel Sail"
msgstr ""

#: ./docs/10.x/octane.md:107
#: ./docs/11.x/octane.md:104
#: ./docs/master/octane.md:107
#~ msgctxt "P"
#~ msgid "<a name=\"frankenphp-via-docker\"></a>"
#~ msgstr ""

#: ./docs/11.x/octane.md:107
msgid "Using FrankenPHP's official Docker images can offer improved performance and the use of additional extensions not included with static installations of FrankenPHP. In addition, the official Docker images provide support for running FrankenPHP on platforms it doesn't natively support, such as Windows. FrankenPHP's official Docker images are suitable for both local development and production usage."
msgstr ""

#: ./docs/10.x/octane.md:108
#: ./docs/11.x/octane.md:105
#: ./docs/master/octane.md:108
msgid "FrankenPHP via Docker"
msgstr ""

#: ./docs/8.x/octane.md:108
#: ./docs/9.x/octane.md:110
#: ./docs/10.x/octane.md:209
#: ./docs/11.x/octane.md:208
#: ./docs/master/octane.md:209
msgid "Before serving an Octane application via Sail, ensure you have the latest version of Laravel Sail and execute `./vendor/bin/sail build --no-cache` within your application's root directory."
msgstr ""

#: ./docs/10.x/octane.md:110
#: ./docs/master/octane.md:110
msgid "Using FrankenPHP's official Docker images can offer improved performance and the use additional extensions not included with static installations of FrankenPHP. In addition, the official Docker images provide support for running FrankenPHP on platforms it doesn't natively support, such as Windows. FrankenPHP's official Docker images are suitable for both local development and production usage."
msgstr ""

#: ./docs/8.x/octane.md:110
#: ./docs/9.x/octane.md:112
msgid "Alternatively, you may develop your Swoole based Octane application using [Laravel Sail](/docs/{{version}}/sail), the official Docker based development environment for Laravel. Laravel Sail includes the Swoole extension by default. However, you will still need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr ""

#: ./docs/10.x/octane.md:112
#: ./docs/11.x/octane.md:109
#: ./docs/master/octane.md:112
msgid "You may use the following Dockerfile as a starting point for containerizing your FrankenPHP powered Laravel application:"
msgstr ""

#: ./docs/10.x/octane.md:114
#: ./docs/11.x/octane.md:111
#: ./docs/master/octane.md:114
msgid ""
"FROM dunglas/frankenphp\n"
"\n"
"RUN install-php-extensions \\\n"
"    pcntl\n"
"    # Add other PHP extensions here...\n"
"\n"
"COPY . /app\n"
"\n"
"ENTRYPOINT [\"php\", \"artisan\", \"octane:frankenphp\"]"
msgstr ""

#: ./docs/8.x/octane.md:118
#: ./docs/9.x/octane.md:120
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80"
msgstr ""

#: ./docs/8.x/octane.md:122
#: ./docs/9.x/octane.md:124
#: ./docs/10.x/octane.md:222
#: ./docs/11.x/octane.md:221
#: ./docs/master/octane.md:222
msgid "Finally, build your Sail images:"
msgstr ""

#: ./docs/8.x/octane.md:124
#: ./docs/9.x/octane.md:126
#: ./docs/10.x/octane.md:224
#: ./docs/11.x/octane.md:223
#: ./docs/master/octane.md:224
msgid "./vendor/bin/sail build --no-cache"
msgstr ""

#: ./docs/11.x/octane.md:125
msgid ""
"# compose.yaml\n"
"services:\n"
"  frankenphp:\n"
"    build:\n"
"      context: .\n"
"    entrypoint: php artisan octane:frankenphp --workers=1 --max-requests=1\n"
"    ports:\n"
"      - \"8000:8000\"\n"
"    volumes:\n"
"      - .:/app"
msgstr ""

#: ./docs/10.x/octane.md:126
#: ./docs/11.x/octane.md:123
#: ./docs/master/octane.md:126
msgid "Then, during development, you may utilize the following Docker Compose file to run your application:"
msgstr ""

#: ./docs/10.x/octane.md:128
#: ./docs/master/octane.md:128
msgid ""
"# compose.yaml\n"
"services:\n"
"  frankenphp:\n"
"    build:\n"
"      context: .\n"
"    entrypoint: php artisan octane:frankenphp --max-requests=1\n"
"    ports:\n"
"      - \"8000:8000\"\n"
"    volumes:\n"
"      - .:/app"
msgstr ""

#: ./docs/8.x/octane.md:128
#: ./docs/9.x/octane.md:130
#: ./docs/10.x/octane.md:228
#: ./docs/11.x/octane.md:227
#: ./docs/master/octane.md:228
#~ msgctxt "P"
#~ msgid "<a name=\"swoole-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:129
#: ./docs/9.x/octane.md:131
#: ./docs/10.x/octane.md:229
#: ./docs/11.x/octane.md:228
#: ./docs/master/octane.md:229
msgid "Swoole Configuration"
msgstr ""

#: ./docs/8.x/octane.md:131
#: ./docs/9.x/octane.md:133
#: ./docs/10.x/octane.md:231
#: ./docs/11.x/octane.md:230
#: ./docs/master/octane.md:231
msgid "Swoole supports a few additional configuration options that you may add to your `octane` configuration file if necessary. Because they rarely need to be modified, these options are not included in the default configuration file:"
msgstr ""

#: ./docs/8.x/octane.md:133
msgid ""
"'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/9.x/octane.md:135
#: ./docs/10.x/octane.md:233
#: ./docs/11.x/octane.md:232
#: ./docs/master/octane.md:233
msgid ""
"'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/octane.md:138
msgid "If the `--log-level` option is explicitly passed to the `php artisan octane:start` command, Octane will use FrankenPHP's native logger and, unless configured differently, will produce structured JSON logs."
msgstr ""

#: ./docs/10.x/octane.md:141
#: ./docs/11.x/octane.md:140
#: ./docs/master/octane.md:141
msgid "You may consult [the official FrankenPHP documentation](https://frankenphp.dev/docs/docker/) for more information on running FrankenPHP with Docker."
msgstr ""

#: ./docs/8.x/octane.md:142
#: ./docs/9.x/octane.md:144
#: ./docs/10.x/octane.md:242
#: ./docs/11.x/octane.md:241
#: ./docs/master/octane.md:242
#~ msgctxt "P"
#~ msgid "<a name=\"serving-your-application\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:143
#: ./docs/9.x/octane.md:145
#: ./docs/10.x/octane.md:243
#: ./docs/11.x/octane.md:242
#: ./docs/master/octane.md:243
msgid "Serving Your Application"
msgstr ""

#: ./docs/8.x/octane.md:145
#: ./docs/9.x/octane.md:147
#: ./docs/10.x/octane.md:245
#: ./docs/11.x/octane.md:244
#: ./docs/master/octane.md:245
msgid "The Octane server can be started via the `octane:start` Artisan command. By default, this command will utilize the server specified by the `server` configuration option of your application's `octane` configuration file:"
msgstr ""

#: ./docs/8.x/octane.md:147
#: ./docs/9.x/octane.md:149
#: ./docs/10.x/octane.md:247
#: ./docs/11.x/octane.md:246
#: ./docs/master/octane.md:247
msgid "php artisan octane:start"
msgstr ""

#: ./docs/10.x/octane.md:149
#: ./docs/11.x/octane.md:148
#: ./docs/master/octane.md:149
msgid "RoadRunner via Laravel Sail"
msgstr ""

#: ./docs/8.x/octane.md:151
#: ./docs/9.x/octane.md:153
#: ./docs/10.x/octane.md:251
#: ./docs/11.x/octane.md:250
#: ./docs/master/octane.md:251
msgid "By default, Octane will start the server on port 8000, so you may access your application in a web browser via `http://localhost:8000`."
msgstr ""

#: ./docs/11.x/octane.md:152
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner-cli spiral/roadrunner-http"
msgstr ""

#: ./docs/10.x/octane.md:153
#: ./docs/master/octane.md:153
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner-cli spiral/roadrunner-http "
msgstr ""

#: ./docs/8.x/octane.md:153
#: ./docs/9.x/octane.md:155
#: ./docs/10.x/octane.md:253
#: ./docs/11.x/octane.md:252
#: ./docs/master/octane.md:253
#~ msgctxt "P"
#~ msgid "<a name=\"serving-your-application-via-https\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:154
#: ./docs/9.x/octane.md:156
msgid "Serving Your Application Via HTTPS"
msgstr ""

#: ./docs/8.x/octane.md:156
#: ./docs/9.x/octane.md:158
#: ./docs/10.x/octane.md:256
#: ./docs/11.x/octane.md:255
#: ./docs/master/octane.md:256
msgid "By default, applications running via Octane generate links prefixed with `http://`. The `OCTANE_HTTPS` environment variable, used within your application's `config/octane.php` configuration file, can be set to `true` when serving your application via HTTPS. When this configuration value is set to `true`, Octane will instruct Laravel to prefix all generated links with `https://`:"
msgstr ""

#: ./docs/8.x/octane.md:158
#: ./docs/9.x/octane.md:160
#: ./docs/10.x/octane.md:258
#: ./docs/11.x/octane.md:257
#: ./docs/master/octane.md:258
msgid "'https' => env('OCTANE_HTTPS', false),"
msgstr ""

#: ./docs/8.x/octane.md:162
#: ./docs/9.x/octane.md:164
#: ./docs/10.x/octane.md:262
#: ./docs/11.x/octane.md:261
#: ./docs/master/octane.md:262
#~ msgctxt "P"
#~ msgid "<a name=\"serving-your-application-via-nginx\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:163
#: ./docs/9.x/octane.md:165
msgid "Serving Your Application Via Nginx"
msgstr ""

#: ./docs/8.x/octane.md:165
#: ./docs/9.x/octane.md:168
#: ./docs/10.x/octane.md:266
#: ./docs/11.x/octane.md:265
#: ./docs/master/octane.md:266
msgid "If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel Octane application, check out [Laravel Forge](https://forge.laravel.com)."
msgstr ""

#: ./docs/8.x/octane.md:167
#: ./docs/9.x/octane.md:170
msgid "In production environments, you should serve your Octane application behind a traditional web server such as a Nginx or Apache. Doing so will allow the web server to serve your static assets such as images and stylesheets, as well as manage your SSL certificate termination."
msgstr ""

#: ./docs/10.x/octane.md:168
#: ./docs/11.x/octane.md:167
#: ./docs/master/octane.md:168
msgid "Then, add a `SUPERVISOR_PHP_COMMAND` environment variable to the `laravel.test` service definition in your application's `docker-compose.yml` file. This environment variable will contain the command that Sail will use to serve your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/11.x/octane.md:169
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port='${APP_PORT:-80}'\" # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:169
#: ./docs/9.x/octane.md:172
#: ./docs/10.x/octane.md:270
#: ./docs/11.x/octane.md:269
#: ./docs/master/octane.md:270
msgid "In the Nginx configuration example below, Nginx will serve the site's static assets and proxy requests to the Octane server that is running on port 8000:"
msgstr ""

#: ./docs/10.x/octane.md:170
#: ./docs/master/octane.md:170
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=80\" # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:171
#: ./docs/9.x/octane.md:174
#: ./docs/10.x/octane.md:272
#: ./docs/11.x/octane.md:271
#: ./docs/master/octane.md:272
msgid ""
"map $http_upgrade $connection_upgrade {\n"
"    default upgrade;\n"
"    ''      close;\n"
"}\n"
"\n"
"server {\n"
"    listen 80;\n"
"    listen [::]:80;\n"
"    server_name domain.com;\n"
"    server_tokens off;\n"
"    root /home/forge/domain.com/public;\n"
"\n"
"    index index.php;\n"
"\n"
"    charset utf-8;\n"
"\n"
"    location /index.php {\n"
"        try_files /not_exists @octane;\n"
"    }\n"
"\n"
"    location / {\n"
"        try_files $uri $uri/ @octane;\n"
"    }\n"
"\n"
"    location = /favicon.ico { access_log off; log_not_found off; }\n"
"    location = /robots.txt  { access_log off; log_not_found off; }\n"
"\n"
"    access_log off;\n"
"    error_log  /var/log/nginx/domain.com-error.log error;\n"
"\n"
"    error_page 404 /index.php;\n"
"\n"
"    location @octane {\n"
"        set $suffix \"\";\n"
"\n"
"        if ($uri = /index.php) {\n"
"            set $suffix ?$query_string;\n"
"        }\n"
"\n"
"        proxy_http_version 1.1;\n"
"        proxy_set_header Host $http_host;\n"
"        proxy_set_header Scheme $scheme;\n"
"        proxy_set_header SERVER_PORT $server_port;\n"
"        proxy_set_header REMOTE_ADDR $remote_addr;\n"
"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
"        proxy_set_header Upgrade $http_upgrade;\n"
"        proxy_set_header Connection $connection_upgrade;\n"
"\n"
"        proxy_pass http://127.0.0.1:8000$suffix;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:194
#: ./docs/11.x/octane.md:193
#: ./docs/master/octane.md:194
#~ msgctxt "P"
#~ msgid "<a name=\"openswoole\"></a>"
#~ msgstr ""

#: ./docs/10.x/octane.md:195
#: ./docs/11.x/octane.md:194
#: ./docs/master/octane.md:195
msgid "Open Swoole"
msgstr ""

#: ./docs/10.x/octane.md:197
#: ./docs/11.x/octane.md:196
#: ./docs/master/octane.md:197
msgid "If you want to use the Open Swoole application server to serve your Laravel Octane application, you must install the Open Swoole PHP extension. Typically, this can be done via PECL:"
msgstr ""

#: ./docs/10.x/octane.md:199
#: ./docs/11.x/octane.md:198
#: ./docs/master/octane.md:199
msgid "pecl install openswoole"
msgstr ""

#: ./docs/10.x/octane.md:203
#: ./docs/11.x/octane.md:202
#: ./docs/master/octane.md:203
msgid "Using Laravel Octane with Open Swoole grants the same functionality provided by Swoole, such as concurrent tasks, ticks, and intervals."
msgstr ""

#: ./docs/10.x/octane.md:206
#: ./docs/11.x/octane.md:205
#: ./docs/master/octane.md:206
msgid "Swoole via Laravel Sail"
msgstr ""

#: ./docs/10.x/octane.md:211
#: ./docs/11.x/octane.md:210
#: ./docs/master/octane.md:211
msgid "Alternatively, you may develop your Swoole based Octane application using [Laravel Sail](/docs/{{version}}/sail), the official Docker based development environment for Laravel. Laravel Sail includes the Swoole extension by default. However, you will still need to adjust the `docker-compose.yml` file used by Sail."
msgstr ""

#: ./docs/10.x/octane.md:213
#: ./docs/11.x/octane.md:212
#: ./docs/master/octane.md:213
msgid "To get started, add a `SUPERVISOR_PHP_COMMAND` environment variable to the `laravel.test` service definition in your application's `docker-compose.yml` file. This environment variable will contain the command that Sail will use to serve your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/11.x/octane.md:214
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port='${APP_PORT:-80}'\" # [tl! add]"
msgstr ""

#: ./docs/10.x/octane.md:215
#: ./docs/master/octane.md:215
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\" # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:225
#: ./docs/9.x/octane.md:228
#: ./docs/10.x/octane.md:326
#: ./docs/11.x/octane.md:325
#: ./docs/master/octane.md:326
#~ msgctxt "P"
#~ msgid "<a name=\"watching-for-file-changes\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:226
#: ./docs/9.x/octane.md:229
msgid "Watching For File Changes"
msgstr ""

#: ./docs/8.x/octane.md:228
#: ./docs/9.x/octane.md:231
#: ./docs/10.x/octane.md:329
#: ./docs/11.x/octane.md:328
#: ./docs/master/octane.md:329
msgid "Since your application is loaded in memory once when the Octane server starts, any changes to your application's files will not be reflected when you refresh your browser. For example, route definitions added to your `routes/web.php` file will not be reflected until the server is restarted. For convenience, you may use the `--watch` flag to instruct Octane to automatically restart the server on any file changes within your application:"
msgstr ""

#: ./docs/8.x/octane.md:230
#: ./docs/9.x/octane.md:233
#: ./docs/10.x/octane.md:331
#: ./docs/11.x/octane.md:330
#: ./docs/master/octane.md:331
msgid "php artisan octane:start --watch"
msgstr ""

#: ./docs/8.x/octane.md:234
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:library:"
msgstr ""

#: ./docs/8.x/octane.md:236
#: ./docs/9.x/octane.md:239
#: ./docs/10.x/octane.md:337
#: ./docs/11.x/octane.md:336
#: ./docs/master/octane.md:337
msgid "npm install --save-dev chokidar"
msgstr ""

#: ./docs/9.x/octane.md:237
#: ./docs/10.x/octane.md:335
#: ./docs/11.x/octane.md:334
#: ./docs/master/octane.md:335
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:"
msgstr ""

#: ./docs/8.x/octane.md:240
#: ./docs/9.x/octane.md:243
#: ./docs/10.x/octane.md:341
#: ./docs/11.x/octane.md:340
#: ./docs/master/octane.md:341
msgid "You may configure the directories and files that should be watched using the `watch` configuration option within your application's `config/octane.php` configuration file."
msgstr ""

#: ./docs/8.x/octane.md:242
#: ./docs/9.x/octane.md:245
#: ./docs/10.x/octane.md:343
#: ./docs/11.x/octane.md:342
#: ./docs/master/octane.md:343
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-the-worker-count\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:243
#: ./docs/9.x/octane.md:246
msgid "Specifying The Worker Count"
msgstr ""

#: ./docs/8.x/octane.md:245
#: ./docs/9.x/octane.md:248
#: ./docs/10.x/octane.md:346
#: ./docs/11.x/octane.md:345
#: ./docs/master/octane.md:346
msgid "By default, Octane will start an application request worker for each CPU core provided by your machine. These workers will then be used to serve incoming HTTP requests as they enter your application. You may manually specify how many workers you would like to start using the `--workers` option when invoking the `octane:start` command:"
msgstr ""

#: ./docs/8.x/octane.md:247
#: ./docs/9.x/octane.md:250
#: ./docs/10.x/octane.md:348
#: ./docs/11.x/octane.md:347
#: ./docs/master/octane.md:348
msgid "php artisan octane:start --workers=4"
msgstr ""

#: ./docs/8.x/octane.md:251
#: ./docs/9.x/octane.md:254
#: ./docs/10.x/octane.md:352
#: ./docs/11.x/octane.md:351
#: ./docs/master/octane.md:352
msgid "If you are using the Swoole application server, you may also specify how many [\"task workers\"](#concurrent-tasks) you wish to start:"
msgstr ""

#: ./docs/8.x/octane.md:253
#: ./docs/8.x/octane.md:473
#: ./docs/9.x/octane.md:256
#: ./docs/9.x/octane.md:478
#: ./docs/10.x/octane.md:354
#: ./docs/10.x/octane.md:575
#: ./docs/11.x/octane.md:353
#: ./docs/11.x/octane.md:574
#: ./docs/master/octane.md:354
#: ./docs/master/octane.md:575
msgid "php artisan octane:start --workers=4 --task-workers=6"
msgstr ""

#: ./docs/10.x/octane.md:254
#: ./docs/11.x/octane.md:253
#: ./docs/master/octane.md:254
msgid "Serving Your Application via HTTPS"
msgstr ""

#: ./docs/8.x/octane.md:257
#: ./docs/9.x/octane.md:260
#: ./docs/10.x/octane.md:358
#: ./docs/11.x/octane.md:357
#: ./docs/master/octane.md:358
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-the-max-request-count\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:258
#: ./docs/9.x/octane.md:261
msgid "Specifying The Max Request Count"
msgstr ""

#: ./docs/8.x/octane.md:260
msgid "To help prevent stray memory leaks, Octane can gracefully restart a worker once it has handled a given number of requests. To instruct Octane to do this, you may use the `--max-requests` option:"
msgstr ""

#: ./docs/8.x/octane.md:262
#: ./docs/9.x/octane.md:265
#: ./docs/10.x/octane.md:363
#: ./docs/11.x/octane.md:362
#: ./docs/master/octane.md:363
msgid "php artisan octane:start --max-requests=250"
msgstr ""

#: ./docs/10.x/octane.md:263
#: ./docs/11.x/octane.md:262
#: ./docs/master/octane.md:263
msgid "Serving Your Application via Nginx"
msgstr ""

#: ./docs/9.x/octane.md:263
#: ./docs/10.x/octane.md:361
#: ./docs/11.x/octane.md:360
#: ./docs/master/octane.md:361
msgid "To help prevent stray memory leaks, Octane gracefully restarts any worker once it has handled 500 requests. To adjust this number, you may use the `--max-requests` option:"
msgstr ""

#: ./docs/8.x/octane.md:266
#: ./docs/9.x/octane.md:269
#: ./docs/10.x/octane.md:367
#: ./docs/11.x/octane.md:366
#: ./docs/master/octane.md:367
#~ msgctxt "P"
#~ msgid "<a name=\"reloading-the-workers\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:267
#: ./docs/9.x/octane.md:270
msgid "Reloading The Workers"
msgstr ""

#: ./docs/10.x/octane.md:268
#: ./docs/11.x/octane.md:267
#: ./docs/master/octane.md:268
msgid "In production environments, you should serve your Octane application behind a traditional web server such as Nginx or Apache. Doing so will allow the web server to serve your static assets such as images and stylesheets, as well as manage your SSL certificate termination."
msgstr ""

#: ./docs/8.x/octane.md:269
#: ./docs/9.x/octane.md:272
#: ./docs/10.x/octane.md:370
#: ./docs/11.x/octane.md:369
#: ./docs/master/octane.md:370
msgid "You may gracefully restart the Octane server's application workers using the `octane:reload` command. Typically, this should be done after deployment so that your newly deployed code is loaded into memory and is used to serve to subsequent requests:"
msgstr ""

#: ./docs/8.x/octane.md:271
#: ./docs/9.x/octane.md:274
#: ./docs/10.x/octane.md:372
#: ./docs/11.x/octane.md:371
#: ./docs/master/octane.md:372
msgid "php artisan octane:reload"
msgstr ""

#: ./docs/8.x/octane.md:275
#: ./docs/9.x/octane.md:278
#: ./docs/10.x/octane.md:376
#: ./docs/11.x/octane.md:375
#: ./docs/master/octane.md:376
#~ msgctxt "P"
#~ msgid "<a name=\"stopping-the-server\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:276
#: ./docs/9.x/octane.md:279
msgid "Stopping The Server"
msgstr ""

#: ./docs/8.x/octane.md:278
#: ./docs/9.x/octane.md:281
#: ./docs/10.x/octane.md:379
#: ./docs/11.x/octane.md:378
#: ./docs/master/octane.md:379
msgid "You may stop the Octane server using the `octane:stop` Artisan command:"
msgstr ""

#: ./docs/8.x/octane.md:280
#: ./docs/9.x/octane.md:283
#: ./docs/10.x/octane.md:381
#: ./docs/11.x/octane.md:380
#: ./docs/master/octane.md:381
msgid "php artisan octane:stop"
msgstr ""

#: ./docs/8.x/octane.md:284
#: ./docs/9.x/octane.md:287
#: ./docs/10.x/octane.md:385
#: ./docs/11.x/octane.md:384
#: ./docs/master/octane.md:385
#~ msgctxt "P"
#~ msgid "<a name=\"checking-the-server-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:285
#: ./docs/9.x/octane.md:288
msgid "Checking The Server Status"
msgstr ""

#: ./docs/8.x/octane.md:287
#: ./docs/9.x/octane.md:290
#: ./docs/10.x/octane.md:388
#: ./docs/11.x/octane.md:387
#: ./docs/master/octane.md:388
msgid "You may check the current status of the Octane server using the `octane:status` Artisan command:"
msgstr ""

#: ./docs/8.x/octane.md:289
#: ./docs/9.x/octane.md:292
#: ./docs/10.x/octane.md:390
#: ./docs/11.x/octane.md:389
#: ./docs/master/octane.md:390
msgid "php artisan octane:status"
msgstr ""

#: ./docs/8.x/octane.md:293
#: ./docs/9.x/octane.md:296
#: ./docs/10.x/octane.md:394
#: ./docs/11.x/octane.md:393
#: ./docs/master/octane.md:394
#~ msgctxt "P"
#~ msgid "<a name=\"dependency-injection-and-octane\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:294
#: ./docs/9.x/octane.md:297
msgid "Dependency Injection & Octane"
msgstr ""

#: ./docs/8.x/octane.md:296
#: ./docs/9.x/octane.md:299
#: ./docs/10.x/octane.md:397
#: ./docs/11.x/octane.md:396
#: ./docs/master/octane.md:397
msgid "Since Octane boots your application once and keeps it in memory while serving requests, there are a few caveats you should consider while building your application. For example, the `register` and `boot` methods of your application's service providers will only be executed once when the request worker initially boots. On subsequent requests, the same application instance will be reused."
msgstr ""

#: ./docs/8.x/octane.md:298
#: ./docs/9.x/octane.md:301
#: ./docs/10.x/octane.md:399
#: ./docs/11.x/octane.md:398
#: ./docs/master/octane.md:399
msgid "In light of this, you should take special care when injecting the application service container or request into any object's constructor. By doing so, that object may have a  stale version of the container or request on subsequent requests."
msgstr ""

#: ./docs/8.x/octane.md:300
#: ./docs/9.x/octane.md:303
#: ./docs/10.x/octane.md:401
#: ./docs/11.x/octane.md:400
#: ./docs/master/octane.md:401
msgid "Octane will automatically handle resetting any first-party framework state between requests. However, Octane does not always know how to reset the global state created by your application. Therefore, you should be aware of how to build your application in a way that is Octane friendly. Below, we will discuss the most common situations that may cause problems while using Octane."
msgstr ""

#: ./docs/8.x/octane.md:302
#: ./docs/9.x/octane.md:305
#: ./docs/10.x/octane.md:403
#: ./docs/11.x/octane.md:402
#: ./docs/master/octane.md:403
#~ msgctxt "P"
#~ msgid "<a name=\"container-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:303
#: ./docs/9.x/octane.md:306
#: ./docs/10.x/octane.md:404
#: ./docs/11.x/octane.md:403
#: ./docs/master/octane.md:404
msgid "Container Injection"
msgstr ""

#: ./docs/8.x/octane.md:305
#: ./docs/9.x/octane.md:308
#: ./docs/10.x/octane.md:406
#: ./docs/11.x/octane.md:405
#: ./docs/master/octane.md:406
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire application service container into an object that is bound as a singleton:"
msgstr ""

#: ./docs/8.x/octane.md:307
#: ./docs/9.x/octane.md:310
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:323
#: ./docs/9.x/octane.md:326
#: ./docs/10.x/octane.md:423
#: ./docs/11.x/octane.md:422
#: ./docs/master/octane.md:423
msgid "In this example, if the `Service` instance is resolved during the application boot process, the container will be injected into the service and that same container will be held by the `Service` instance on subsequent requests. This **may** not be a problem for your particular application; however, it can lead to the container unexpectedly missing bindings that were added later in the boot cycle or by a subsequent request."
msgstr ""

#: ./docs/8.x/octane.md:325
#: ./docs/9.x/octane.md:328
#: ./docs/10.x/octane.md:425
#: ./docs/11.x/octane.md:424
#: ./docs/master/octane.md:425
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a container resolver closure into the service that always resolves the current container instance:"
msgstr ""

#: ./docs/10.x/octane.md:327
#: ./docs/11.x/octane.md:326
#: ./docs/master/octane.md:327
msgid "Watching for File Changes"
msgstr ""

#: ./docs/8.x/octane.md:327
#: ./docs/9.x/octane.md:330
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:340
#: ./docs/9.x/octane.md:343
#: ./docs/10.x/octane.md:441
#: ./docs/11.x/octane.md:440
#: ./docs/master/octane.md:441
msgid "The global `app` helper and the `Container::getInstance()` method will always return the latest version of the application container."
msgstr ""

#: ./docs/8.x/octane.md:342
#: ./docs/9.x/octane.md:345
#: ./docs/10.x/octane.md:443
#: ./docs/11.x/octane.md:442
#: ./docs/master/octane.md:443
#~ msgctxt "P"
#~ msgid "<a name=\"request-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:343
#: ./docs/9.x/octane.md:346
#: ./docs/10.x/octane.md:444
#: ./docs/11.x/octane.md:443
#: ./docs/master/octane.md:444
msgid "Request Injection"
msgstr ""

#: ./docs/10.x/octane.md:344
#: ./docs/11.x/octane.md:343
#: ./docs/master/octane.md:344
msgid "Specifying the Worker Count"
msgstr ""

#: ./docs/8.x/octane.md:345
#: ./docs/9.x/octane.md:348
#: ./docs/10.x/octane.md:446
#: ./docs/11.x/octane.md:445
#: ./docs/master/octane.md:446
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire request instance into an object that is bound as a singleton:"
msgstr ""

#: ./docs/8.x/octane.md:347
#: ./docs/9.x/octane.md:350
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:359
#: ./docs/11.x/octane.md:358
#: ./docs/master/octane.md:359
msgid "Specifying the Max Request Count"
msgstr ""

#: ./docs/8.x/octane.md:363
#: ./docs/9.x/octane.md:366
#: ./docs/10.x/octane.md:463
#: ./docs/11.x/octane.md:462
#: ./docs/master/octane.md:463
msgid "In this example, if the `Service` instance is resolved during the application boot process, the HTTP request will be injected into the service and that same request will be held by the `Service` instance on subsequent requests. Therefore, all headers, input, and query string data will be incorrect, as well as all other request data."
msgstr ""

#: ./docs/8.x/octane.md:365
#: ./docs/9.x/octane.md:368
#: ./docs/10.x/octane.md:465
#: ./docs/11.x/octane.md:464
#: ./docs/master/octane.md:465
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a request resolver closure into the service that always resolves the current request instance. Or, the most recommended approach is simply to pass the specific request information your object needs to one of the object's methods at runtime:"
msgstr ""

#: ./docs/8.x/octane.md:367
#: ./docs/9.x/octane.md:370
msgid ""
"use App\\Service;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app['request']);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function ($app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n"
"\n"
"// Or...\n"
"\n"
"$service->method($request->input('name'));"
msgstr ""

#: ./docs/10.x/octane.md:368
#: ./docs/11.x/octane.md:367
#: ./docs/master/octane.md:368
msgid "Reloading the Workers"
msgstr ""

#: ./docs/10.x/octane.md:377
#: ./docs/11.x/octane.md:376
#: ./docs/master/octane.md:377
msgid "Stopping the Server"
msgstr ""

#: ./docs/8.x/octane.md:383
#: ./docs/9.x/octane.md:386
#: ./docs/10.x/octane.md:484
#: ./docs/11.x/octane.md:483
#: ./docs/master/octane.md:484
msgid "The global `request` helper will always return the request the application is currently handling and is therefore safe to use within your application."
msgstr ""

#: ./docs/8.x/octane.md:385
#: ./docs/9.x/octane.md:389
#: ./docs/10.x/octane.md:487
#: ./docs/11.x/octane.md:486
#: ./docs/master/octane.md:487
msgid "It is acceptable to type-hint the `Illuminate\\Http\\Request` instance on your controller methods and route closures."
msgstr ""

#: ./docs/10.x/octane.md:386
#: ./docs/11.x/octane.md:385
#: ./docs/master/octane.md:386
msgid "Checking the Server Status"
msgstr ""

#: ./docs/8.x/octane.md:387
#: ./docs/9.x/octane.md:391
#: ./docs/10.x/octane.md:489
#: ./docs/11.x/octane.md:488
#: ./docs/master/octane.md:489
#~ msgctxt "P"
#~ msgid "<a name=\"configuration-repository-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:388
#: ./docs/9.x/octane.md:392
#: ./docs/10.x/octane.md:490
#: ./docs/11.x/octane.md:489
#: ./docs/master/octane.md:490
msgid "Configuration Repository Injection"
msgstr ""

#: ./docs/8.x/octane.md:390
#: ./docs/9.x/octane.md:394
#: ./docs/10.x/octane.md:492
#: ./docs/11.x/octane.md:491
#: ./docs/master/octane.md:492
msgid "In general, you should avoid injecting the configuration repository instance into the constructors of other objects. For example, the following binding injects the configuration repository into an object that is bound as a singleton:"
msgstr ""

#: ./docs/8.x/octane.md:392
#: ./docs/9.x/octane.md:396
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:395
#: ./docs/11.x/octane.md:394
#: ./docs/master/octane.md:395
msgid "Dependency Injection and Octane"
msgstr ""

#: ./docs/10.x/octane.md:408
#: ./docs/11.x/octane.md:407
#: ./docs/master/octane.md:408
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:408
#: ./docs/9.x/octane.md:412
#: ./docs/10.x/octane.md:509
#: ./docs/11.x/octane.md:508
#: ./docs/master/octane.md:509
msgid "In this example, if the configuration values change between requests, that service will not have access to the new values because it's depending on the original repository instance."
msgstr ""

#: ./docs/8.x/octane.md:410
#: ./docs/9.x/octane.md:414
#: ./docs/10.x/octane.md:511
#: ./docs/11.x/octane.md:510
#: ./docs/master/octane.md:511
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a configuration repository resolver closure to the class:"
msgstr ""

#: ./docs/8.x/octane.md:412
#: ./docs/9.x/octane.md:416
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app->make('config'));\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:425
#: ./docs/9.x/octane.md:429
#: ./docs/10.x/octane.md:527
#: ./docs/11.x/octane.md:526
#: ./docs/master/octane.md:527
msgid "The global `config` will always return the latest version of the configuration repository and is therefore safe to use within your application."
msgstr ""

#: ./docs/10.x/octane.md:427
#: ./docs/11.x/octane.md:426
#: ./docs/master/octane.md:427
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:427
#: ./docs/9.x/octane.md:431
#: ./docs/10.x/octane.md:529
#: ./docs/11.x/octane.md:528
#: ./docs/master/octane.md:529
#~ msgctxt "P"
#~ msgid "<a name=\"managing-memory-leaks\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:428
#: ./docs/9.x/octane.md:432
#: ./docs/10.x/octane.md:530
#: ./docs/11.x/octane.md:529
#: ./docs/master/octane.md:530
msgid "Managing Memory Leaks"
msgstr ""

#: ./docs/8.x/octane.md:430
#: ./docs/9.x/octane.md:434
#: ./docs/10.x/octane.md:532
#: ./docs/11.x/octane.md:531
#: ./docs/master/octane.md:532
msgid "Remember, Octane keeps your application in memory between requests; therefore, adding data to a statically maintained array will result in a memory leak. For example, the following controller has a memory leak since each request to the application will continue to add data to the static `$data` array:"
msgstr ""

#: ./docs/8.x/octane.md:432
#: ./docs/9.x/octane.md:436
msgid ""
"use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return void\n"
" */\n"
"public function index(Request $request)\n"
"{\n"
"    Service::$data[] = Str::random(10);\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:448
#: ./docs/11.x/octane.md:447
#: ./docs/master/octane.md:448
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:451
#: ./docs/9.x/octane.md:455
#: ./docs/10.x/octane.md:552
#: ./docs/11.x/octane.md:551
#: ./docs/master/octane.md:552
msgid "While building your application, you should take special care to avoid creating these types of memory leaks. It is recommended that you monitor your application's memory usage during local development to ensure you are not introducing new memory leaks into your application."
msgstr ""

#: ./docs/8.x/octane.md:453
#: ./docs/9.x/octane.md:457
#: ./docs/10.x/octane.md:554
#: ./docs/11.x/octane.md:553
#: ./docs/master/octane.md:554
#~ msgctxt "P"
#~ msgid "<a name=\"concurrent-tasks\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:454
#: ./docs/9.x/octane.md:458
#: ./docs/10.x/octane.md:555
#: ./docs/11.x/octane.md:554
#: ./docs/master/octane.md:555
msgid "Concurrent Tasks"
msgstr ""

#: ./docs/8.x/octane.md:456
#: ./docs/8.x/octane.md:480
#: ./docs/8.x/octane.md:502
#: ./docs/8.x/octane.md:530
#: ./docs/9.x/octane.md:461
#: ./docs/9.x/octane.md:488
#: ./docs/9.x/octane.md:511
#: ./docs/9.x/octane.md:541
#: ./docs/10.x/octane.md:558
#: ./docs/10.x/octane.md:585
#: ./docs/10.x/octane.md:608
#: ./docs/10.x/octane.md:638
#: ./docs/11.x/octane.md:557
#: ./docs/11.x/octane.md:584
#: ./docs/11.x/octane.md:607
#: ./docs/11.x/octane.md:637
#: ./docs/master/octane.md:558
#: ./docs/master/octane.md:585
#: ./docs/master/octane.md:608
#: ./docs/master/octane.md:638
msgid "This feature requires [Swoole](#swoole)."
msgstr ""

#: ./docs/8.x/octane.md:458
#: ./docs/9.x/octane.md:463
#: ./docs/10.x/octane.md:560
#: ./docs/11.x/octane.md:559
#: ./docs/master/octane.md:560
msgid "When using Swoole, you may execute operations concurrently via light-weight background tasks. You may accomplish this using Octane's `concurrently` method. You may combine this method with PHP array destructuring to retrieve the results of each operation:"
msgstr ""

#: ./docs/8.x/octane.md:460
#: ./docs/9.x/octane.md:465
#: ./docs/10.x/octane.md:562
#: ./docs/11.x/octane.md:561
#: ./docs/master/octane.md:562
msgid ""
"use App\\Models\\User;\n"
"use App\\Models\\Server;\n"
"use Laravel\\Octane\\Facades\\Octane;\n"
"\n"
"[$users, $servers] = Octane::concurrently([\n"
"    fn () => User::all(),\n"
"    fn () => Server::all(),\n"
"]);"
msgstr ""

#: ./docs/10.x/octane.md:467
#: ./docs/11.x/octane.md:466
#: ./docs/master/octane.md:467
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app['request']);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function (Application $app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n"
"\n"
"// Or...\n"
"\n"
"$service->method($request->input('name'));"
msgstr ""

#: ./docs/8.x/octane.md:471
#: ./docs/9.x/octane.md:476
#: ./docs/10.x/octane.md:573
#: ./docs/11.x/octane.md:572
#: ./docs/master/octane.md:573
msgid "Concurrent tasks processed by Octane utilize Swoole's \"task workers\", and execute within an entirely different process than the incoming request. The amount of workers available to process concurrent tasks is determined by the `--task-workers` directive on the `octane:start` command:"
msgstr ""

#: ./docs/8.x/octane.md:477
#: ./docs/9.x/octane.md:484
#: ./docs/10.x/octane.md:581
#: ./docs/11.x/octane.md:580
#: ./docs/master/octane.md:581
#~ msgctxt "P"
#~ msgid "<a name=\"ticks-and-intervals\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:478
#: ./docs/9.x/octane.md:485
msgid "Ticks & Intervals"
msgstr ""

#: ./docs/8.x/octane.md:482
#: ./docs/9.x/octane.md:490
#: ./docs/10.x/octane.md:587
#: ./docs/11.x/octane.md:586
#: ./docs/master/octane.md:587
msgid "When using Swoole, you may register \"tick\" operations that will be executed every specified number of seconds. You may register \"tick\" callbacks via the `tick` method. The first argument provided to the `tick` method should be a string that represents the name of the ticker. The second argument should be a callable that will be invoked at the specified interval."
msgstr ""

#: ./docs/9.x/octane.md:482
#: ./docs/10.x/octane.md:579
#: ./docs/11.x/octane.md:578
#: ./docs/master/octane.md:579
msgid "When invoking the `concurrently` method, you should not provide more than 1024 tasks due to limitations imposed by Swoole's task system."
msgstr ""

#: ./docs/8.x/octane.md:484
#: ./docs/9.x/octane.md:492
#: ./docs/10.x/octane.md:589
#: ./docs/11.x/octane.md:588
#: ./docs/master/octane.md:589
msgid "In this example, we will register a closure to be invoked every 10 seconds. Typically, the `tick` method should be called within the `boot` method of one of your application's service providers:"
msgstr ""

#: ./docs/8.x/octane.md:486
#: ./docs/9.x/octane.md:494
#: ./docs/10.x/octane.md:591
#: ./docs/11.x/octane.md:590
#: ./docs/master/octane.md:591
msgid ""
"Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10);"
msgstr ""

#: ./docs/8.x/octane.md:491
#: ./docs/9.x/octane.md:499
#: ./docs/10.x/octane.md:596
#: ./docs/11.x/octane.md:595
#: ./docs/master/octane.md:596
msgid "Using the `immediate` method, you may instruct Octane to immediately invoke the tick callback when the Octane server initially boots, and every N seconds thereafter:"
msgstr ""

#: ./docs/8.x/octane.md:493
#: ./docs/9.x/octane.md:501
#: ./docs/10.x/octane.md:598
#: ./docs/11.x/octane.md:597
#: ./docs/master/octane.md:598
msgid ""
"Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10)\n"
"        ->immediate();"
msgstr ""

#: ./docs/10.x/octane.md:494
#: ./docs/11.x/octane.md:493
#: ./docs/master/octane.md:494
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:499
#: ./docs/9.x/octane.md:507
#: ./docs/10.x/octane.md:604
#: ./docs/11.x/octane.md:603
#: ./docs/master/octane.md:604
#~ msgctxt "P"
#~ msgid "<a name=\"the-octane-cache\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:500
#: ./docs/9.x/octane.md:508
#: ./docs/10.x/octane.md:605
#: ./docs/11.x/octane.md:604
#: ./docs/master/octane.md:605
msgid "The Octane Cache"
msgstr ""

#: ./docs/8.x/octane.md:504
#: ./docs/9.x/octane.md:513
#: ./docs/10.x/octane.md:610
#: ./docs/11.x/octane.md:609
#: ./docs/master/octane.md:610
msgid "When using Swoole, you may leverage the Octane cache driver, which provides read and write speeds of up to 2 million operations per second. Therefore, this cache driver is an excellent choice for applications that need extreme read / write speeds from their caching layer."
msgstr ""

#: ./docs/8.x/octane.md:506
#: ./docs/9.x/octane.md:515
#: ./docs/10.x/octane.md:612
#: ./docs/11.x/octane.md:611
#: ./docs/master/octane.md:612
msgid "This cache driver is powered by [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). All data stored in the cache is available to all workers on the server. However, the cached data will be flushed when the server is restarted:"
msgstr ""

#: ./docs/8.x/octane.md:508
#: ./docs/9.x/octane.md:517
#: ./docs/10.x/octane.md:614
#: ./docs/11.x/octane.md:613
#: ./docs/master/octane.md:614
msgid "Cache::store('octane')->put('framework', 'Laravel', 30);"
msgstr ""

#: ./docs/8.x/octane.md:512
#: ./docs/9.x/octane.md:522
#: ./docs/10.x/octane.md:619
#: ./docs/11.x/octane.md:618
#: ./docs/master/octane.md:619
msgid "The maximum number of entries allowed in the Octane cache may be defined in your application's `octane` configuration file."
msgstr ""

#: ./docs/10.x/octane.md:513
#: ./docs/11.x/octane.md:512
#: ./docs/master/octane.md:513
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app->make('config'));\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:514
#: ./docs/9.x/octane.md:524
#: ./docs/10.x/octane.md:621
#: ./docs/11.x/octane.md:620
#: ./docs/master/octane.md:621
#~ msgctxt "P"
#~ msgid "<a name=\"cache-intervals\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:515
#: ./docs/9.x/octane.md:525
#: ./docs/10.x/octane.md:622
#: ./docs/11.x/octane.md:621
#: ./docs/master/octane.md:622
msgid "Cache Intervals"
msgstr ""

#: ./docs/8.x/octane.md:517
#: ./docs/9.x/octane.md:527
#: ./docs/10.x/octane.md:624
#: ./docs/11.x/octane.md:623
#: ./docs/master/octane.md:624
msgid "In addition to the typical methods provided by Laravel's cache system, the Octane cache driver features interval based caches. These caches are automatically refreshed at the specified interval and should be registered within the `boot` method of one of your application's service providers. For example, the following cache will be refreshed every five seconds:"
msgstr ""

#: ./docs/8.x/octane.md:519
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5)"
msgstr ""

#: ./docs/8.x/octane.md:527
#: ./docs/9.x/octane.md:537
#: ./docs/10.x/octane.md:634
#: ./docs/11.x/octane.md:633
#: ./docs/master/octane.md:634
#~ msgctxt "P"
#~ msgid "<a name=\"tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:528
#: ./docs/9.x/octane.md:538
#: ./docs/10.x/octane.md:635
#: ./docs/11.x/octane.md:634
#: ./docs/master/octane.md:635
msgid "Tables"
msgstr ""

#: ./docs/9.x/octane.md:529
#: ./docs/10.x/octane.md:626
#: ./docs/11.x/octane.md:625
#: ./docs/master/octane.md:626
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5);"
msgstr ""

#: ./docs/8.x/octane.md:532
#: ./docs/9.x/octane.md:543
#: ./docs/10.x/octane.md:640
#: ./docs/11.x/octane.md:639
#: ./docs/master/octane.md:640
msgid "When using Swoole, you may define and interact with your own arbitrary [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). Swoole tables provide extreme performance throughput and the data in these tables can be accessed by all workers on the server. However, the data within them will be lost when the server is restarted."
msgstr ""

#: ./docs/10.x/octane.md:534
#: ./docs/11.x/octane.md:533
#: ./docs/master/octane.md:534
msgid ""
"use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" */\n"
"public function index(Request $request): array\n"
"{\n"
"    Service::$data[] = Str::random(10);\n"
"\n"
"    return [\n"
"        // ...\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:534
#: ./docs/9.x/octane.md:545
#: ./docs/10.x/octane.md:642
#: ./docs/11.x/octane.md:641
#: ./docs/master/octane.md:642
msgid "Tables should be defined within the `tables` configuration array of your application's `octane` configuration file. An example table that allows a maximum of 1000 rows is already configured for you. The maximum size of string columns may be configured by specifying the column size after the column type as seen below:"
msgstr ""

#: ./docs/8.x/octane.md:536
#: ./docs/9.x/octane.md:547
#: ./docs/10.x/octane.md:644
#: ./docs/11.x/octane.md:643
#: ./docs/master/octane.md:644
msgid ""
"'tables' => [\n"
"    'example:1000' => [\n"
"        'name' => 'string:1000',\n"
"        'votes' => 'int',\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/octane.md:545
#: ./docs/9.x/octane.md:556
#: ./docs/10.x/octane.md:653
#: ./docs/11.x/octane.md:652
#: ./docs/master/octane.md:653
msgid "To access a table, you may use the `Octane::table` method:"
msgstr ""

#: ./docs/8.x/octane.md:547
#: ./docs/9.x/octane.md:558
#: ./docs/10.x/octane.md:655
#: ./docs/11.x/octane.md:654
#: ./docs/master/octane.md:655
msgid ""
"use Laravel\\Octane\\Facades\\Octane;\n"
"\n"
"Octane::table('example')->set('uuid', [\n"
"    'name' => 'Nuno Maduro',\n"
"    'votes' => 1000,\n"
"]);\n"
"\n"
"return Octane::table('example')->get('uuid');"
msgstr ""

#: ./docs/8.x/octane.md:558
#: ./docs/9.x/octane.md:570
#: ./docs/10.x/octane.md:667
#: ./docs/11.x/octane.md:666
#: ./docs/master/octane.md:667
msgid "The column types supported by Swoole tables are: `string`, `int`, and `float`."
msgstr ""

#: ./docs/10.x/octane.md:582
#: ./docs/11.x/octane.md:581
#: ./docs/master/octane.md:582
msgid "Ticks and Intervals"
msgstr ""
