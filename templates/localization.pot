#
msgid ""
msgstr ""

#: docs/8.x/localization.md:block 1 (header)
msgid "Localization"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Configuring The Locale](#configuring-the-locale)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Defining Translation Strings](#defining-translation-strings)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Using Short Keys](#using-short-keys)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Using Translation Strings As Keys](#using-translation-strings-as-keys)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Retrieving Translation Strings](#retrieving-translation-strings)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Replacing Parameters In Translation Strings](#replacing-parameters-in-translation-strings)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Pluralization](#pluralization)"
msgstr ""

#: docs/8.x/localization.md:block 2 (unordered list)
msgid "[Overriding Package Language Files](#overriding-package-language-files)"
msgstr ""

#: docs/8.x/localization.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/localization.md:block 5 (paragraph)
msgid "Laravel's localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application."
msgstr ""

#: docs/8.x/localization.md:block 6 (paragraph)
msgid "Laravel provides two ways to manage translation strings. First, language strings may be stored in files within the `resources/lang` directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr ""

#: docs/8.x/localization.md:block 7 (code)
msgid ""
"/resources\n"
"    /lang\n"
"        /en\n"
"            messages.php\n"
"        /es\n"
"            messages.php\n"
msgstr ""

#: docs/8.x/localization.md:block 8 (paragraph)
msgid "Or, translation strings may be defined within JSON files that are placed within the `resources/lang` directory. When taking this approach, each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for application's that have a large number of translatable strings:"
msgstr ""

#: docs/8.x/localization.md:block 9 (code)
msgid ""
"/resources\n"
"    /lang\n"
"        en.json\n"
"        es.json\n"
msgstr ""

#: docs/8.x/localization.md:block 10 (paragraph)
msgid "We'll discuss each approach to managing translation strings within this documentation."
msgstr ""

#: docs/8.x/localization.md:block 12 (header)
msgid "Configuring The Locale"
msgstr ""

#: docs/8.x/localization.md:block 13 (paragraph)
msgid "The default language for your application is stored in the `config/app.php` configuration file's `locale` configuration option. You are free to modify this value to suit the needs of your application."
msgstr ""

#: docs/8.x/localization.md:block 14 (paragraph)
msgid "You may modify the default language for a single HTTP request at runtime using the `setLocale` method provided by the `App` facade:"
msgstr ""

#: docs/8.x/localization.md:block 15 (code)
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"Route::get('/greeting/{locale}', function ($locale) {\n"
"    if (! in_array($locale, ['en', 'es', 'fr'])) {\n"
"        abort(400);\n"
"    }\n"
"\n"
"    App::setLocale($locale);\n"
"\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/localization.md:block 16 (paragraph)
msgid "You may configure a \"fallback language\", which will be used when the active language does not contain a given translation string. Like the default language, the fallback language is also configured in the `config/app.php` configuration file:"
msgstr ""

#: docs/8.x/localization.md:block 17 (code)
msgid "'fallback_locale' => 'en',\n"
msgstr ""

#: docs/8.x/localization.md:block 19 (header)
msgid "Determining The Current Locale"
msgstr ""

#: docs/8.x/localization.md:block 20 (paragraph)
msgid "You may use the `currentLocale` and `isLocale` methods on the `App` facade to determine the current locale or check if the locale is a given value:"
msgstr ""

#: docs/8.x/localization.md:block 21 (code)
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$locale = App::currentLocale();\n"
"\n"
"if (App::isLocale('en')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/localization.md:block 23 (header)
msgid "Defining Translation Strings"
msgstr ""

#: docs/8.x/localization.md:block 25 (header)
msgid "Using Short Keys"
msgstr ""

#: docs/8.x/localization.md:block 26 (paragraph)
msgid "Typically, translation strings are stored in files within the `resources/lang` directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr ""

#: docs/8.x/localization.md:block 28 (paragraph)
msgid "All language files return an array of keyed strings. For example:"
msgstr ""

#: docs/8.x/localization.md:block 29 (code)
msgid ""
"<?php\n"
"\n"
"// resources/lang/en/messages.php\n"
"\n"
"return [\n"
"    'welcome' => 'Welcome to our application!',\n"
"];\n"
msgstr ""

#: docs/8.x/localization.md:block 30 (quote)
msgid "{note} For languages that differ by territory, you should name the language directories according to the ISO 15897. For example, \"en_GB\" should be used for British English rather than \"en-gb\"."
msgstr ""

#: docs/8.x/localization.md:block 32 (header)
msgid "Using Translation Strings As Keys"
msgstr ""

#: docs/8.x/localization.md:block 33 (paragraph)
msgid "For applications with a large number of translatable strings, defining every string with a \"short key\" can become confusing when referencing the keys in your views and it is cumbersome to continually invent keys for every translation string supported by your application."
msgstr ""

#: docs/8.x/localization.md:block 34 (paragraph)
msgid "For this reason, Laravel also provides support for defining translation strings using the \"default\" translation of the string as the key. Translation files that use translation strings as keys are stored as JSON files in the `resources/lang` directory. For example, if your application has a Spanish translation, you should create a `resources/lang/es.json` file:"
msgstr ""

#: docs/8.x/localization.md:block 35 (code)
msgid ""
"{\n"
"    \"I love programming.\": \"Me encanta programar.\"\n"
"}\n"
msgstr ""

#: docs/8.x/localization.md:block 36 (header)
msgid "Key / File Conflicts"
msgstr ""

#: docs/8.x/localization.md:block 37 (paragraph)
msgid "You should not define translation string keys that conflict with other translation filenames. For example, translating `__('Action')` for the \"NL\" locale while a `nl/action.php` file exists but a `nl.json` file does not exist will result in the translator returning the contents of `nl/action.php`."
msgstr ""

#: docs/8.x/localization.md:block 39 (header)
msgid "Retrieving Translation Strings"
msgstr ""

#: docs/8.x/localization.md:block 40 (paragraph)
msgid "You may retrieve translation strings from your language files using the `__` helper function. If you are using \"short keys\" to define your translation strings, you should pass the file that contains the key and the key itself to the `__` function using \"dot\" syntax. For example, let's retrieve the `welcome` translation string from the `resources/lang/en/messages.php` language file:"
msgstr ""

#: docs/8.x/localization.md:block 41 (code)
msgid "echo __('messages.welcome');\n"
msgstr ""

#: docs/8.x/localization.md:block 42 (paragraph)
msgid "If the specified translation string does not exist, the `__` function will return the translation string key. So, using the example above, the `__` function would return `messages.welcome` if the translation string does not exist."
msgstr ""

#: docs/8.x/localization.md:block 43 (paragraph)
msgid "If you are using your [default translation strings as your translation keys](#using-translation-strings-as-keys), you should pass the default translation of your string to the `__` function;"
msgstr ""

#: docs/8.x/localization.md:block 44 (code)
msgid "echo __('I love programming.');\n"
msgstr ""

#: docs/8.x/localization.md:block 45 (paragraph)
msgid "Again, if the translation string does not exist, the `__` function will return the translation string key that it was given."
msgstr ""

#: docs/8.x/localization.md:block 46 (paragraph)
msgid "If you are using the [Blade templating engine](/docs/{{version}}/blade), you may use the `{{ }}` echo syntax to display the translation string:"
msgstr ""

#: docs/8.x/localization.md:block 47 (code)
msgid "{{ __('messages.welcome') }}\n"
msgstr ""

#: docs/8.x/localization.md:block 49 (header)
msgid "Replacing Parameters In Translation Strings"
msgstr ""

#: docs/8.x/localization.md:block 50 (paragraph)
msgid "If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a `:`. For example, you may define a welcome message with a placeholder name:"
msgstr ""

#: docs/8.x/localization.md:block 51 (code)
msgid "'welcome' => 'Welcome, :name',\n"
msgstr ""

#: docs/8.x/localization.md:block 52 (paragraph)
msgid "To replace the placeholders when retrieving a translation string, you may pass an array of replacements as the second argument to the `__` function:"
msgstr ""

#: docs/8.x/localization.md:block 53 (code)
msgid "echo __('messages.welcome', ['name' => 'dayle']);\n"
msgstr ""

#: docs/8.x/localization.md:block 54 (paragraph)
msgid "If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:"
msgstr ""

#: docs/8.x/localization.md:block 55 (code)
msgid ""
"'welcome' => 'Welcome, :NAME', // Welcome, DAYLE\n"
"'goodbye' => 'Goodbye, :Name', // Goodbye, Dayle\n"
msgstr ""

#: docs/8.x/localization.md:block 57 (header)
msgid "Pluralization"
msgstr ""

#: docs/8.x/localization.md:block 58 (paragraph)
msgid "Pluralization is a complex problem, as different languages have a variety of complex rules for pluralization; however, Laravel can help you translate strings differently based on pluralization rules that you define. Using a `|` character, you may distinguish singular and plural forms of a string:"
msgstr ""

#: docs/8.x/localization.md:block 59 (code)
msgid "'apples' => 'There is one apple|There are many apples',\n"
msgstr ""

#: docs/8.x/localization.md:block 60 (paragraph)
msgid "Of course, pluralization is also supported when using [translation strings as keys](#using-translation-strings-as-keys):"
msgstr ""

#: docs/8.x/localization.md:block 61 (code)
msgid ""
"{\n"
"    \"There is one apple|There are many apples\": \"Hay una manzana|Hay muchas manzanas\"\n"
"}\n"
msgstr ""

#: docs/8.x/localization.md:block 62 (paragraph)
msgid "You may even create more complex pluralization rules which specify translation strings for multiple ranges of values:"
msgstr ""

#: docs/8.x/localization.md:block 63 (code)
msgid "'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',\n"
msgstr ""

#: docs/8.x/localization.md:block 64 (paragraph)
msgid "After defining a translation string that has pluralization options, you may use the `trans_choice` function to retrieve the line for a given \"count\". In this example, since the count is greater than one, the plural form of the translation string is returned:"
msgstr ""

#: docs/8.x/localization.md:block 65 (code)
msgid "echo trans_choice('messages.apples', 10);\n"
msgstr ""

#: docs/8.x/localization.md:block 66 (paragraph)
msgid "You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the `trans_choice` function:"
msgstr ""

#: docs/8.x/localization.md:block 67 (code)
msgid ""
"'minutes_ago' => '{1} :value minute ago|[2,*] :value minutes ago',\n"
"\n"
"echo trans_choice('time.minutes_ago', 5, ['value' => 5]);\n"
msgstr ""

#: docs/8.x/localization.md:block 68 (paragraph)
msgid "If you would like to display the integer value that was passed to the `trans_choice` function, you may use the built-in `:count` placeholder:"
msgstr ""

#: docs/8.x/localization.md:block 69 (code)
msgid "'apples' => '{0} There are none|{1} There is one|[2,*] There are :count',\n"
msgstr ""

#: docs/8.x/localization.md:block 71 (header)
msgid "Overriding Package Language Files"
msgstr ""

#: docs/8.x/localization.md:block 72 (paragraph)
msgid "Some packages may ship with their own language files. Instead of changing the package's core files to tweak these lines, you may override them by placing files in the `resources/lang/vendor/{package}/{locale}` directory."
msgstr ""

#: docs/8.x/localization.md:block 73 (paragraph)
msgid "So, for example, if you need to override the English translation strings in `messages.php` for a package named `skyrim/hearthfire`, you should place a language file at: `resources/lang/vendor/hearthfire/en/messages.php`. Within this file, you should only define the translation strings you wish to override. Any translation strings you don't override will still be loaded from the package's original language files."
msgstr ""

#: docs/9.x/localization.md:block 2 (unordered list)
msgid "[Pluralization Language](#pluralization-language)"
msgstr ""

#: docs/9.x/localization.md:block 6 (paragraph)
msgid "Laravel provides two ways to manage translation strings. First, language strings may be stored in files within the `lang` directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr ""

#: docs/9.x/localization.md:block 7 (code)
msgid ""
"/lang\n"
"    /en\n"
"        messages.php\n"
"    /es\n"
"        messages.php\n"
msgstr ""

#: docs/9.x/localization.md:block 8 (paragraph)
msgid "Or, translation strings may be defined within JSON files that are placed within the `lang` directory. When taking this approach, each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for applications that have a large number of translatable strings:"
msgstr ""

#: docs/9.x/localization.md:block 9 (code)
msgid ""
"/lang\n"
"    en.json\n"
"    es.json\n"
msgstr ""

#: docs/9.x/localization.md:block 23 (header)
msgid "Pluralization Language"
msgstr ""

#: docs/9.x/localization.md:block 24 (paragraph)
msgid "You may instruct Laravel's \"pluralizer\", which is used by Eloquent and other portions of the framework to convert singular strings to plural strings, to use a language other than English. This may be accomplished by invoking the `useLanguage` method within the `boot` method of one of your application's service providers. The pluralizer's currently supported languages are: `french`, `norwegian-bokmal`, `portuguese`, `spanish`, and `turkish`:"
msgstr ""

#: docs/9.x/localization.md:block 25 (code)
msgid ""
"use Illuminate\\Support\\Pluralizer;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Pluralizer::useLanguage('spanish');     \n"
"\n"
"    // ...     \n"
"}\n"
msgstr ""

#: docs/9.x/localization.md:block 26 (quote)
msgid "**Warning** If you customize the pluralizer's language, you should explicitly define your Eloquent model's [table names](/docs/{{version}}/eloquent#table-names)."
msgstr ""

#: docs/9.x/localization.md:block 31 (paragraph)
msgid "Typically, translation strings are stored in files within the `lang` directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr ""

#: docs/9.x/localization.md:block 34 (code)
msgid ""
"<?php\n"
"\n"
"// lang/en/messages.php\n"
"\n"
"return [\n"
"    'welcome' => 'Welcome to our application!',\n"
"];\n"
msgstr ""

#: docs/9.x/localization.md:block 35 (quote)
msgid "**Warning** For languages that differ by territory, you should name the language directories according to the ISO 15897. For example, \"en_GB\" should be used for British English rather than \"en-gb\"."
msgstr ""

#: docs/9.x/localization.md:block 39 (paragraph)
msgid "For this reason, Laravel also provides support for defining translation strings using the \"default\" translation of the string as the key. Translation files that use translation strings as keys are stored as JSON files in the `lang` directory. For example, if your application has a Spanish translation, you should create a `lang/es.json` file:"
msgstr ""

#: docs/9.x/localization.md:block 45 (paragraph)
msgid "You may retrieve translation strings from your language files using the `__` helper function. If you are using \"short keys\" to define your translation strings, you should pass the file that contains the key and the key itself to the `__` function using \"dot\" syntax. For example, let's retrieve the `welcome` translation string from the `lang/en/messages.php` language file:"
msgstr ""

#: docs/9.x/localization.md:block 77 (paragraph)
msgid "Some packages may ship with their own language files. Instead of changing the package's core files to tweak these lines, you may override them by placing files in the `lang/vendor/{package}/{locale}` directory."
msgstr ""

#: docs/9.x/localization.md:block 78 (paragraph)
msgid "So, for example, if you need to override the English translation strings in `messages.php` for a package named `skyrim/hearthfire`, you should place a language file at: `lang/vendor/hearthfire/en/messages.php`. Within this file, you should only define the translation strings you wish to override. Any translation strings you don't override will still be loaded from the package's original language files."
msgstr ""

#: docs/master/localization.md:block 15 (code)
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"Route::get('/greeting/{locale}', function (string $locale) {\n"
"    if (! in_array($locale, ['en', 'es', 'fr'])) {\n"
"        abort(400);\n"
"    }\n"
"\n"
"    App::setLocale($locale);\n"
"\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/master/localization.md:block 21 (code)
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$locale = App::currentLocale();\n"
"\n"
"if (App::isLocale('en')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/master/localization.md:block 25 (code)
msgid ""
"use Illuminate\\Support\\Pluralizer;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Pluralizer::useLanguage('spanish');     \n"
"\n"
"    // ...     \n"
"}\n"
msgstr ""
