msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:27\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/mail.pot\n"
"X-Crowdin-File-ID: 99\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/mail.md:1
#: ./docs/9.x/mail.md:1
#: ./docs/10.x/mail.md:1
#: ./docs/11.x/mail.md:1
#: ./docs/master/mail.md:1
msgctxt "H1"
msgid "Mail"
msgstr "郵件"

#: ./docs/8.x/mail.md:3
#: ./docs/9.x/mail.md:3
#: ./docs/10.x/mail.md:3
#: ./docs/11.x/mail.md:3
#: ./docs/master/mail.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: ./docs/8.x/mail.md:4
#: ./docs/9.x/mail.md:4
#: ./docs/10.x/mail.md:4
#: ./docs/11.x/mail.md:4
#: ./docs/master/mail.md:4
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

#: ./docs/8.x/mail.md:5
#: ./docs/9.x/mail.md:5
#: ./docs/10.x/mail.md:5
#: ./docs/11.x/mail.md:5
#: ./docs/master/mail.md:5
msgctxt "P"
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr "[Driver 前置需求](#driver-prerequisites)"

#: ./docs/8.x/mail.md:6
#: ./docs/9.x/mail.md:6
#: ./docs/10.x/mail.md:6
#: ./docs/11.x/mail.md:6
#: ./docs/master/mail.md:6
msgctxt "P"
msgid "[Failover Configuration](#failover-configuration)"
msgstr "[Failover 設定](#failover-configuration)"

#: ./docs/10.x/mail.md:7
#: ./docs/11.x/mail.md:7
#: ./docs/master/mail.md:7
msgctxt "P"
msgid "[Round Robin Configuration](#round-robin-configuration)"
msgstr ""

#: ./docs/8.x/mail.md:7
#: ./docs/9.x/mail.md:7
#: ./docs/10.x/mail.md:8
#: ./docs/11.x/mail.md:8
#: ./docs/master/mail.md:8
msgctxt "P"
msgid "[Generating Mailables](#generating-mailables)"
msgstr "[產生 Mailable](#generating-mailables)"

#: ./docs/8.x/mail.md:8
#: ./docs/9.x/mail.md:8
#: ./docs/10.x/mail.md:9
#: ./docs/11.x/mail.md:9
#: ./docs/master/mail.md:9
msgctxt "P"
msgid "[Writing Mailables](#writing-mailables)"
msgstr "[撰寫 Mailable](#writing-mailables)"

#: ./docs/8.x/mail.md:9
#: ./docs/9.x/mail.md:9
msgctxt "P"
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr "[設定寄件人](#configuring-the-sender)"

#: ./docs/10.x/mail.md:10
#: ./docs/11.x/mail.md:10
#: ./docs/master/mail.md:10
msgctxt "P"
msgid "[Configuring the Sender](#configuring-the-sender)"
msgstr ""

#: ./docs/8.x/mail.md:10
#: ./docs/9.x/mail.md:10
msgctxt "P"
msgid "[Configuring The View](#configuring-the-view)"
msgstr "[設定 View](#configuring-the-view)"

#: ./docs/10.x/mail.md:11
#: ./docs/11.x/mail.md:11
#: ./docs/master/mail.md:11
msgctxt "P"
msgid "[Configuring the View](#configuring-the-view)"
msgstr ""

#: ./docs/8.x/mail.md:11
#: ./docs/9.x/mail.md:11
#: ./docs/10.x/mail.md:12
#: ./docs/11.x/mail.md:12
#: ./docs/master/mail.md:12
msgctxt "P"
msgid "[View Data](#view-data)"
msgstr "[View 資料](#view-data)"

#: ./docs/8.x/mail.md:12
#: ./docs/9.x/mail.md:12
#: ./docs/10.x/mail.md:13
#: ./docs/11.x/mail.md:13
#: ./docs/master/mail.md:13
msgctxt "P"
msgid "[Attachments](#attachments)"
msgstr "[附加檔案](#attachments)"

#: ./docs/8.x/mail.md:13
#: ./docs/9.x/mail.md:13
#: ./docs/10.x/mail.md:14
#: ./docs/11.x/mail.md:14
#: ./docs/master/mail.md:14
msgctxt "P"
msgid "[Inline Attachments](#inline-attachments)"
msgstr "[內嵌的附加檔案](#inline-attachments)"

#: ./docs/8.x/mail.md:14
msgctxt "P"
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr "[自訂 SwiftMailer 訊息](#customizing-the-swiftmailer-message)"

#: ./docs/9.x/mail.md:14
#: ./docs/10.x/mail.md:15
#: ./docs/11.x/mail.md:15
#: ./docs/master/mail.md:15
msgctxt "P"
msgid "[Attachable Objects](#attachable-objects)"
msgstr "[可附加的物件](#attachable-objects)"

#: ./docs/8.x/mail.md:15
#: ./docs/9.x/mail.md:18
#: ./docs/10.x/mail.md:19
#: ./docs/11.x/mail.md:19
#: ./docs/master/mail.md:19
msgctxt "P"
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr "[Markdown 的 Mailable](#markdown-mailables)"

#: ./docs/9.x/mail.md:15
#: ./docs/10.x/mail.md:16
#: ./docs/11.x/mail.md:16
#: ./docs/master/mail.md:16
msgctxt "P"
msgid "[Headers](#headers)"
msgstr "[標頭 (Header)](#headers)"

#: ./docs/8.x/mail.md:16
#: ./docs/9.x/mail.md:19
#: ./docs/10.x/mail.md:20
#: ./docs/11.x/mail.md:20
#: ./docs/master/mail.md:20
msgctxt "P"
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr "[產生 Markdown 的 Mailable](#generating-markdown-mailables)"

#: ./docs/9.x/mail.md:16
msgctxt "P"
msgid "[Tags & Metadata](#tags-and-metadata)"
msgstr "[Tag 與詮釋資料](#tags-and-metadata)"

#: ./docs/10.x/mail.md:17
#: ./docs/11.x/mail.md:17
#: ./docs/master/mail.md:17
msgctxt "P"
msgid "[Tags and Metadata](#tags-and-metadata)"
msgstr ""

#: ./docs/8.x/mail.md:17
#: ./docs/9.x/mail.md:20
#: ./docs/10.x/mail.md:21
#: ./docs/11.x/mail.md:21
#: ./docs/master/mail.md:21
msgctxt "P"
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr "[撰寫 Markdown 訊息](#writing-markdown-messages)"

#: ./docs/9.x/mail.md:17
msgctxt "P"
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr "[自訂 Symfony 訊息](#customizing-the-symfony-message)"

#: ./docs/10.x/mail.md:18
#: ./docs/11.x/mail.md:18
#: ./docs/master/mail.md:18
msgctxt "P"
msgid "[Customizing the Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: ./docs/8.x/mail.md:18
#: ./docs/9.x/mail.md:21
msgctxt "P"
msgid "[Customizing The Components](#customizing-the-components)"
msgstr "[自定元件](#customizing-the-components)"

#: ./docs/8.x/mail.md:19
#: ./docs/9.x/mail.md:22
#: ./docs/10.x/mail.md:23
#: ./docs/11.x/mail.md:23
#: ./docs/master/mail.md:23
msgctxt "P"
msgid "[Sending Mail](#sending-mail)"
msgstr "[傳送郵件](#sending-mail)"

#: ./docs/8.x/mail.md:20
#: ./docs/9.x/mail.md:23
#: ./docs/10.x/mail.md:24
#: ./docs/11.x/mail.md:24
#: ./docs/master/mail.md:24
msgctxt "P"
msgid "[Queueing Mail](#queueing-mail)"
msgstr "[將郵件放入佇列](#queueing-mail)"

#: ./docs/8.x/mail.md:21
#: ./docs/9.x/mail.md:24
#: ./docs/10.x/mail.md:25
#: ./docs/11.x/mail.md:25
#: ./docs/master/mail.md:25
msgctxt "P"
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr "[轉譯 Mailable](#rendering-mailables)"

#: ./docs/10.x/mail.md:22
#: ./docs/11.x/mail.md:22
#: ./docs/master/mail.md:22
msgctxt "P"
msgid "[Customizing the Components](#customizing-the-components)"
msgstr ""

#: ./docs/8.x/mail.md:22
#: ./docs/9.x/mail.md:25
msgctxt "P"
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr "[在瀏覽器中預覽 Mailable](#previewing-mailables-in-the-browser)"

#: ./docs/8.x/mail.md:23
#: ./docs/9.x/mail.md:26
#: ./docs/10.x/mail.md:27
#: ./docs/11.x/mail.md:27
#: ./docs/master/mail.md:27
msgctxt "P"
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr "[本土化 Mailable](#localizing-mailables)"

#: ./docs/8.x/mail.md:24
#: ./docs/9.x/mail.md:27
msgctxt "P"
msgid "[Testing Mailables](#testing-mailables)"
msgstr "[測試 Mailable](#testing-mailables)"

#: ./docs/8.x/mail.md:25
#: ./docs/9.x/mail.md:28
msgctxt "P"
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr "[郵件與本機開發](#mail-and-local-development)"

#: ./docs/10.x/mail.md:26
#: ./docs/11.x/mail.md:26
#: ./docs/master/mail.md:26
msgctxt "P"
msgid "[Previewing Mailables in the Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: ./docs/8.x/mail.md:26
#: ./docs/9.x/mail.md:29
#: ./docs/10.x/mail.md:32
#: ./docs/11.x/mail.md:32
#: ./docs/master/mail.md:32
msgctxt "P"
msgid "[Events](#events)"
msgstr "[事件](#events)"

#: ./docs/10.x/mail.md:28
#: ./docs/11.x/mail.md:28
#: ./docs/master/mail.md:28
msgctxt "P"
msgid "[Testing](#testing-mailables)"
msgstr "[測試](#testing-mailables)"

#: ./docs/8.x/mail.md:28
#: ./docs/9.x/mail.md:33
#: ./docs/10.x/mail.md:36
#: ./docs/11.x/mail.md:36
#: ./docs/master/mail.md:36
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/10.x/mail.md:29
#: ./docs/11.x/mail.md:29
#: ./docs/master/mail.md:29
msgctxt "P"
msgid "[Testing Mailable Content](#testing-mailable-content)"
msgstr "[測試 Mailable 的內容](#testing-mailable-content)"

#: ./docs/8.x/mail.md:29
#: ./docs/9.x/mail.md:34
#: ./docs/10.x/mail.md:37
#: ./docs/11.x/mail.md:37
#: ./docs/master/mail.md:37
msgctxt "H2"
msgid "Introduction"
msgstr "簡介"

#: ./docs/10.x/mail.md:30
#: ./docs/11.x/mail.md:30
#: ./docs/master/mail.md:30
msgctxt "P"
msgid "[Testing Mailable Sending](#testing-mailable-sending)"
msgstr "[測試 Mailable 的寄送](#testing-mailable-sending)"

#: ./docs/9.x/mail.md:30
#: ./docs/10.x/mail.md:33
#: ./docs/11.x/mail.md:33
#: ./docs/master/mail.md:33
msgctxt "P"
msgid "[Custom Transports](#custom-transports)"
msgstr "[自訂 Transport](#custom-transports)"

#: ./docs/10.x/mail.md:31
#: ./docs/11.x/mail.md:31
#: ./docs/master/mail.md:31
msgctxt "P"
msgid "[Mail and Local Development](#mail-and-local-development)"
msgstr ""

#: ./docs/8.x/mail.md:31
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr "傳送郵件不會很複雜。Laravel 提供簡潔的 API，並由熱門的 [SwiftMailer](https://swiftmailer.symfony.com/) 函式庫驅動。Laravel 與 SwiftMailer 提供使用 SMTP、Mailgun、Postmark、Amazon SES、`sendmail` 等方式寄信的 Driver，可讓我們使用偏好的本機或雲端服務來快速開始傳送郵件。"

#: ./docs/9.x/mail.md:31
#: ./docs/10.x/mail.md:34
#: ./docs/11.x/mail.md:34
#: ./docs/master/mail.md:34
msgctxt "P"
msgid "[Additional Symfony Transports](#additional-symfony-transports)"
msgstr "[額外的 Symfony Transport](#additional-symfony-transports)"

#: ./docs/8.x/mail.md:33
#: ./docs/9.x/mail.md:38
#: ./docs/10.x/mail.md:41
#: ./docs/11.x/mail.md:41
#: ./docs/master/mail.md:41
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:34
#: ./docs/9.x/mail.md:39
#: ./docs/10.x/mail.md:42
#: ./docs/11.x/mail.md:42
#: ./docs/master/mail.md:42
msgctxt "H3"
msgid "Configuration"
msgstr "設定"

#: ./docs/8.x/mail.md:36
#: ./docs/9.x/mail.md:41
#: ./docs/10.x/mail.md:44
#: ./docs/11.x/mail.md:44
#: ./docs/master/mail.md:44
msgctxt "P"
msgid "Laravel's email services may be configured via your application's `config/mail.php` configuration file. Each mailer configured within this file may have its own unique configuration and even its own unique \"transport\", allowing your application to use different email services to send certain email messages. For example, your application might use Postmark to send transactional emails while using Amazon SES to send bulk emails."
msgstr "可以使用專案的 `config/mail.php` 設定檔來設定 Laravel 的郵件服務。在這個檔案中，每個 ^[Mailer](郵件傳送程式) 都可以有不同的設定，甚至還可以設定不同的「Transport」設定，這樣我們就可以在程式中使用不同的電子郵件服務來寄送不同的訊息。舉例來說，我們可以使用 Postmark 來寄送交易電子郵件，並使用 Amazon SES 來傳送大量寄送的電子郵件。"

#: ./docs/9.x/mail.md:36
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr "傳送郵件不會很複雜。Laravel 提供簡潔的 API，並由熱門的 [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html/) 驅動。Laravel 與 Symfony Mailer 提供使用 SMTP、Mailgun、Postmark、Amazon SES、`sendmail` 等方式寄信的 Driver，可讓我們使用偏好的本機或雲端服務來快速開始傳送郵件。"

#: ./docs/8.x/mail.md:38
#: ./docs/9.x/mail.md:43
#: ./docs/10.x/mail.md:46
#: ./docs/11.x/mail.md:46
#: ./docs/master/mail.md:46
msgctxt "P"
msgid "Within your `mail` configuration file, you will find a `mailers` configuration array. This array contains a sample configuration entry for each of the major mail drivers / transports supported by Laravel, while the `default` configuration value determines which mailer will be used by default when your application needs to send an email message."
msgstr "在 `mail` 設定檔中，可以看到一個 `mailers` 設定陣列。這個陣列中包含了 Laravel 支援的各個主要郵件 Driver / Transport 範例設定，而其中 `default` 設定值用來判斷專案預設要使用哪個 Mailer 來傳送電子郵件訊息。"

#: ./docs/10.x/mail.md:39
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.2/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr "傳送郵件不會很複雜。Laravel 提供簡潔的 API，並由熱門的 [Symfony Mailer](https://symfony.com/doc/6.2/mailer.html/) 驅動。Laravel 與 Symfony Mailer 提供使用 SMTP、Mailgun、Postmark、Amazon SES、`sendmail` 等方式寄信的 Driver，可讓我們使用偏好的本機或雲端服務來快速開始傳送郵件。"

#: ./docs/11.x/mail.md:39
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/7.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Resend, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/master/mail.md:39
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/7.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/8.x/mail.md:40
#: ./docs/9.x/mail.md:45
#: ./docs/10.x/mail.md:48
#: ./docs/11.x/mail.md:48
#: ./docs/master/mail.md:48
#~ msgctxt "P"
#~ msgid "<a name=\"driver-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:41
#: ./docs/9.x/mail.md:46
#: ./docs/10.x/mail.md:49
#: ./docs/11.x/mail.md:49
#: ./docs/master/mail.md:49
msgctxt "H3"
msgid "Driver / Transport Prerequisites"
msgstr "Driver / Transport 的前置要求"

#: ./docs/8.x/mail.md:43
msgctxt "P"
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers. All of the API based drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:"
msgstr "如 Mailgun 與 Postmark 等基於 API 的 Driver 在寄送郵件時通常會比 SMTP 伺服器來得簡單快速。若可能的話，我們建議你從這幾個 Driver 中選一個使用。這些基於 API 的 Driver 都要求要有 Guzzle HTTP 函式庫，可以通過 Composer 套件管理員來安裝 Guzzle HTTP 函式庫："

#: ./docs/8.x/mail.md:45
msgctxt "CODE"
msgid "composer require guzzlehttp/guzzle"
msgstr ""

#: ./docs/8.x/mail.md:47
#: ./docs/9.x/mail.md:50
#: ./docs/10.x/mail.md:53
#: ./docs/11.x/mail.md:53
#: ./docs/master/mail.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"mailgun-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:48
#: ./docs/9.x/mail.md:51
#: ./docs/10.x/mail.md:54
#: ./docs/11.x/mail.md:54
#: ./docs/master/mail.md:54
msgctxt "H4"
msgid "Mailgun Driver"
msgstr "Mailgun Driver"

#: ./docs/9.x/mail.md:48
msgctxt "P"
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr "如 Mailgun 或 Postmark 等基於 API 的 Driver 與使用 SMTP 伺服器寄送郵件比起來通常會比較簡單快速。若可能的話，我們推薦儘量使用這類 Driver。"

#: ./docs/8.x/mail.md:50
msgctxt "P"
msgid "To use the Mailgun driver, first install the Guzzle HTTP library. Then, set the `default` option in your `config/mail.php` configuration file to `mailgun`. Next, verify that your `config/services.php` configuration file contains the following options:"
msgstr "若要使用 Mailgun Driver，請先安裝 Guzzle HTTP 函式庫。接著，在 `config/mail.php` 設定檔中將 `default` 選項設為 `mailgun`。接著，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: ./docs/10.x/mail.md:51
#: ./docs/master/mail.md:51
msgctxt "P"
msgid "The API based drivers such as Mailgun, Postmark, and MailerSend are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr "如 Mailgun、Postmark，與 MailerSend 等基於 API 的 Driver 與使用 SMTP 伺服器寄送郵件比起來通常會比較簡單快速。若可能的話，我們推薦儘量使用這類 Driver。"

#: ./docs/11.x/mail.md:51
msgctxt "P"
msgid "The API based drivers such as Mailgun, Postmark, Resend, and MailerSend are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: ./docs/8.x/mail.md:52
#: ./docs/9.x/mail.md:61
msgctxt "CODE"
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:53
#: ./docs/10.x/mail.md:56
#: ./docs/11.x/mail.md:56
#: ./docs/master/mail.md:56
msgctxt "P"
msgid "To use the Mailgun driver, install Symfony's Mailgun Mailer transport via Composer:"
msgstr "若要使用 Mailgun Driver，請使用 Composer 安裝 Symfony 的 Mailgun Mailer Transport："

#: ./docs/9.x/mail.md:55
#: ./docs/10.x/mail.md:58
#: ./docs/11.x/mail.md:58
#: ./docs/master/mail.md:58
msgctxt "CODE: shell"
msgid "composer require symfony/mailgun-mailer symfony/http-client"
msgstr ""

#: ./docs/8.x/mail.md:57
#: ./docs/9.x/mail.md:66
#: ./docs/10.x/mail.md:70
#: ./docs/11.x/mail.md:80
#: ./docs/master/mail.md:80
msgctxt "P"
msgid "If you are not using the United States [Mailgun region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), you may define your region's endpoint in the `services` configuration file:"
msgstr "若你使用的 [Mailgun 地區](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions)不是美國的話，請在 `services` 設定檔中定義該地區的 Endpoint："

#: ./docs/8.x/mail.md:59
#: ./docs/9.x/mail.md:68
#: ./docs/10.x/mail.md:72
msgctxt "CODE"
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:59
#: ./docs/10.x/mail.md:62
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請在 `config/mail.php` 設定檔中將 `default` 選項設為 `mailgun`。設定好預設 Mailer 後，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: ./docs/11.x/mail.md:62
#: ./docs/master/mail.md:62
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun` and add the following configuration array to your array of `mailers`:"
msgstr ""

#: ./docs/10.x/mail.md:64
msgctxt "CODE"
msgid ""
"'mailgun' => [\n"
"    'transport' => 'mailgun',\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:64
#: ./docs/master/mail.md:64
msgctxt "CODE"
msgid ""
"'mailgun' => [\n"
"    'transport' => 'mailgun',\n"
"    // 'client' => [\n"
"    //     'timeout' => 5,\n"
"    // ],\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:65
#: ./docs/9.x/mail.md:74
#: ./docs/10.x/mail.md:78
#: ./docs/11.x/mail.md:89
#: ./docs/master/mail.md:89
#~ msgctxt "P"
#~ msgid "<a name=\"postmark-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:66
#: ./docs/9.x/mail.md:75
#: ./docs/10.x/mail.md:79
#: ./docs/11.x/mail.md:90
#: ./docs/master/mail.md:90
msgctxt "H4"
msgid "Postmark Driver"
msgstr "Postmark Driver"

#: ./docs/8.x/mail.md:68
msgctxt "P"
msgid "To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:"
msgstr "若要使用 Postmark Driver，請使用 Composer 安裝 Postmark 的 SwiftMailer Transport："

#: ./docs/8.x/mail.md:70
msgctxt "CODE"
msgid "composer require wildbit/swiftmailer-postmark"
msgstr ""

#: ./docs/11.x/mail.md:71
#: ./docs/master/mail.md:71
msgctxt "P"
msgid "After configuring your application's default mailer, add the following options to your `config/services.php` configuration file:"
msgstr ""

#: ./docs/8.x/mail.md:72
msgctxt "P"
msgid "Next, install the Guzzle HTTP library and set the `default` option in your `config/mail.php` configuration file to `postmark`. Finally, verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請安裝 Guzzle HTTP 函式庫。然後，在 `config/mail.php` 設定檔中將 `default` 選項設為 `postmark`。最後，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: ./docs/11.x/mail.md:73
#: ./docs/master/mail.md:73
msgctxt "CODE"
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),\n"
"    'scheme' => 'https',\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:74
#: ./docs/9.x/mail.md:85
#: ./docs/10.x/mail.md:89
#: ./docs/11.x/mail.md:100
#: ./docs/master/mail.md:100
msgctxt "CODE"
msgid ""
"'postmark' => [\n"
"    'token' => env('POSTMARK_TOKEN'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:77
#: ./docs/10.x/mail.md:81
#: ./docs/master/mail.md:92
msgctxt "P"
msgid "To use the Postmark driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr "若要使用 Postmark Driver，請使用 Composer 安裝 Symfony 的 Postmark Mailer Transport："

#: ./docs/8.x/mail.md:78
#: ./docs/9.x/mail.md:89
#: ./docs/10.x/mail.md:93
#: ./docs/11.x/mail.md:104
#: ./docs/master/mail.md:104
msgctxt "P"
msgid "If you would like to specify the Postmark message stream that should be used by a given mailer, you may add the `message_stream_id` configuration option to the mailer's configuration array. This configuration array can be found in your application's `config/mail.php` configuration file:"
msgstr "若想為給定 Mailer 指定 Postmark ^[訊息串流](Message Stream)，請在該 Mailer 的設定陣列中加上 `message_stream_id` 設定選項。該設定陣列可在 `config/mail.php` 設定檔中找到："

#: ./docs/9.x/mail.md:79
#: ./docs/10.x/mail.md:83
#: ./docs/11.x/mail.md:94
#: ./docs/master/mail.md:94
msgctxt "CODE: shell"
msgid "composer require symfony/postmark-mailer symfony/http-client"
msgstr ""

#: ./docs/8.x/mail.md:80
#: ./docs/9.x/mail.md:91
#: ./docs/10.x/mail.md:95
msgctxt "CODE"
msgid ""
"'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:82
#: ./docs/master/mail.md:82
msgctxt "CODE"
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"    'scheme' => 'https',\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:83
#: ./docs/10.x/mail.md:87
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請在 `config/mail.php` 設定檔中將 `default` 選項設為 `postmark`。設定好預設 Mailer 後，請確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: ./docs/8.x/mail.md:85
#: ./docs/9.x/mail.md:96
#: ./docs/10.x/mail.md:100
#: ./docs/11.x/mail.md:114
#: ./docs/master/mail.md:114
msgctxt "P"
msgid "This way you are also able to set up multiple Postmark mailers with different message streams."
msgstr "這樣一來，我們就能設定多個 Postmark Mailer，並給不同 Mailer 設定不同的訊息串流。"

#: ./docs/8.x/mail.md:87
#: ./docs/9.x/mail.md:98
#: ./docs/10.x/mail.md:102
#: ./docs/11.x/mail.md:131
#: ./docs/master/mail.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"ses-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:88
#: ./docs/9.x/mail.md:99
#: ./docs/10.x/mail.md:103
#: ./docs/11.x/mail.md:132
#: ./docs/master/mail.md:117
msgctxt "H4"
msgid "SES Driver"
msgstr "SES Driver"

#: ./docs/8.x/mail.md:90
#: ./docs/9.x/mail.md:101
#: ./docs/10.x/mail.md:105
#: ./docs/11.x/mail.md:134
#: ./docs/master/mail.md:119
msgctxt "P"
msgid "To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library via the Composer package manager:"
msgstr "若要使用 Amazon SES Driver，必須先安裝 PHP 版的 Amazon SDK。可使用 Composer 套件管理員來安裝這個函式庫："

#: ./docs/11.x/mail.md:92
msgctxt "P"
msgid "To use the [Postmark](https://postmarkapp.com/) driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr ""

#: ./docs/8.x/mail.md:92
#: ./docs/9.x/mail.md:103
#: ./docs/10.x/mail.md:107
#: ./docs/11.x/mail.md:136
#: ./docs/master/mail.md:121
msgctxt "CODE: bash"
msgid "composer require aws/aws-sdk-php"
msgstr ""

#: ./docs/8.x/mail.md:96
#: ./docs/9.x/mail.md:107
#: ./docs/10.x/mail.md:111
#: ./docs/11.x/mail.md:140
#: ./docs/master/mail.md:125
msgctxt "P"
msgid "Next, set the `default` option in your `config/mail.php` configuration file to `ses` and verify that your `config/services.php` configuration file contains the following options:"
msgstr "接著，請在 `config/mail.php` 設定檔中將 `default` 選項設為 `ses`，然後確認一下 `config/services.php` 設定檔中是否包含下列選項："

#: ./docs/11.x/mail.md:98
#: ./docs/master/mail.md:98
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, ensure that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/8.x/mail.md:98
#: ./docs/9.x/mail.md:109
#: ./docs/10.x/mail.md:113
#: ./docs/11.x/mail.md:142
#: ./docs/master/mail.md:127
msgctxt "CODE"
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:104
#: ./docs/9.x/mail.md:115
#: ./docs/10.x/mail.md:119
#: ./docs/11.x/mail.md:148
#: ./docs/master/mail.md:133
msgctxt "P"
msgid "To utilize AWS [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html) via a session token, you may add a `token` key to your application's SES configuration:"
msgstr "若要通過 Session Token 使用 AWS 的 [Temporary Credential](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html)，請在專案的 SES 設定中加上 `token` 索引鍵："

#: ./docs/11.x/mail.md:106
#: ./docs/master/mail.md:106
msgctxt "CODE"
msgid ""
"'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"    // 'client' => [\n"
"    //     'timeout' => 5,\n"
"    // ],\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:106
#: ./docs/9.x/mail.md:117
#: ./docs/10.x/mail.md:121
#: ./docs/11.x/mail.md:150
#: ./docs/master/mail.md:135
msgctxt "CODE"
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'token' => env('AWS_SESSION_TOKEN'),\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:113
msgctxt "P"
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr "若想定義要讓 Laravel 在寄送郵件時要傳給 AWS SDK 之 `SendRawEmail` 方法的[額外的選項](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail)，可在 `ses` 設定中定義一個 `options` 陣列："

#: ./docs/8.x/mail.md:115
msgctxt "CODE"
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'Tags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"resend-driver\"></a>"
#~ msgstr ""

#: ./docs/11.x/mail.md:117
msgctxt "H4"
msgid "Resend Driver"
msgstr ""

#: ./docs/11.x/mail.md:119
msgctxt "P"
msgid "To use the [Resend](https://resend.com/) driver, install Resend's PHP SDK via Composer:"
msgstr ""

#: ./docs/11.x/mail.md:121
msgctxt "CODE: shell"
msgid "composer require resend/resend-php"
msgstr ""

#: ./docs/9.x/mail.md:124
#: ./docs/10.x/mail.md:128
#: ./docs/11.x/mail.md:173
#: ./docs/master/mail.md:142
msgctxt "P"
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail) that Laravel should pass to the AWS SDK's `SendEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr "若想定義要讓 Laravel 在寄送郵件時要傳給 AWS SDK 之 `SendEmail` 方法的[額外的選項](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail)，可在 `ses` 設定中定義一個 `options` 陣列："

#: ./docs/11.x/mail.md:125
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `resend`. After configuring your application's default mailer, ensure that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/9.x/mail.md:126
#: ./docs/10.x/mail.md:130
#: ./docs/11.x/mail.md:175
#: ./docs/master/mail.md:144
msgctxt "CODE"
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'EmailTags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:127
msgctxt "CODE"
msgid ""
"'resend' => [\n"
"    'key' => env('RESEND_KEY'),\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:127
#: ./docs/9.x/mail.md:138
#: ./docs/10.x/mail.md:163
#: ./docs/11.x/mail.md:216
#: ./docs/master/mail.md:177
#~ msgctxt "P"
#~ msgid "<a name=\"failover-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:128
#: ./docs/9.x/mail.md:139
#: ./docs/10.x/mail.md:164
#: ./docs/11.x/mail.md:217
#: ./docs/master/mail.md:178
msgctxt "H3"
msgid "Failover Configuration"
msgstr "Failover 設定"

#: ./docs/8.x/mail.md:130
#: ./docs/9.x/mail.md:141
#: ./docs/10.x/mail.md:166
#: ./docs/11.x/mail.md:219
#: ./docs/master/mail.md:180
msgctxt "P"
msgid "Sometimes, an external service you have configured to send your application's mail may be down. In these cases, it can be useful to define one or more backup mail delivery configurations that will be used in case your primary delivery driver is down."
msgstr "有時候，我們設定要用來寄送郵件的外部服務可能沒辦法用。因為這種情況，所以最好定義一個或多個備用的郵件寄送設定，以免主要寄送 Driver 無法使用。"

#: ./docs/8.x/mail.md:132
#: ./docs/9.x/mail.md:143
msgctxt "P"
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which mail drivers should be chosen for delivery:"
msgstr "若要定義備用 Mailer，請在 `mail` 設定檔中定義一個使用 `failover` Transport的 Mailer。`failover` Mailer的設定值呢列應包含一個 `mailers` 的陣列，並在其中參照用來寄送郵件之各個 Driver 的順序："

#: ./docs/8.x/mail.md:134
#: ./docs/9.x/mail.md:145
#: ./docs/10.x/mail.md:170
#: ./docs/11.x/mail.md:223
#: ./docs/master/mail.md:184
msgctxt "CODE"
msgid ""
"'mailers' => [\n"
"    'failover' => [\n"
"        'transport' => 'failover',\n"
"        'mailers' => [\n"
"            'postmark',\n"
"            'mailgun',\n"
"            'sendmail',\n"
"        ],\n"
"    ],\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/10.x/mail.md:142
#: ./docs/11.x/mail.md:187
#: ./docs/master/mail.md:156
#~ msgctxt "P"
#~ msgid "<a name=\"mailersend-driver\"></a>"
#~ msgstr ""

#: ./docs/10.x/mail.md:143
#: ./docs/11.x/mail.md:188
#: ./docs/master/mail.md:157
msgctxt "H4"
msgid "MailerSend Driver"
msgstr "MailerSend Driver"

#: ./docs/10.x/mail.md:145
#: ./docs/11.x/mail.md:190
#: ./docs/master/mail.md:159
msgctxt "P"
msgid "[MailerSend](https://www.mailersend.com/), a transactional email and SMS service, maintains their own API based mail driver for Laravel. The package containing the driver may be installed via the Composer package manager:"
msgstr "[MailerSend](https://www.mailersend.com/)，是一個交易式 (Transactional) 的 Email 與簡訊服務。MailerSend 自行維護了用於 Laravel 的、基於 API 的 Mail Driver。可以使用 Composer 套件管理員來安裝包含 MailerSend Driver 的套件："

#: ./docs/10.x/mail.md:147
#: ./docs/11.x/mail.md:192
#: ./docs/master/mail.md:161
msgctxt "CODE: shell"
msgid "composer require mailersend/laravel-driver"
msgstr ""

#: ./docs/8.x/mail.md:147
#: ./docs/9.x/mail.md:158
#: ./docs/10.x/mail.md:183
#: ./docs/11.x/mail.md:236
#: ./docs/master/mail.md:197
msgctxt "P"
msgid "Once your failover mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr "定義好 Failover Mailer 後，請將 `mail` 設定檔中的 `default` 設定索引鍵設為該 Failover Mailer 的名稱，以將其設為預設 Mailer。"

#: ./docs/8.x/mail.md:149
#: ./docs/9.x/mail.md:160
#: ./docs/10.x/mail.md:185
#: ./docs/11.x/mail.md:238
#: ./docs/master/mail.md:199
msgctxt "CODE"
msgid "'default' => env('MAIL_MAILER', 'failover'),"
msgstr ""

#: ./docs/10.x/mail.md:151
#: ./docs/11.x/mail.md:196
#: ./docs/master/mail.md:165
msgctxt "P"
msgid "Once the package is installed, add the `MAILERSEND_API_KEY` environment variable to your application's `.env` file. In addition, the `MAIL_MAILER` environment variable should be defined as `mailersend`:"
msgstr "安裝好套件後，請在專案的 `.env` 檔案中新增 `MAILERSEND_API_KEY` 環境變數。此外，頁請將 `MAIL_MAILER` 環境變數定義為 `mailersend`："

#: ./docs/8.x/mail.md:151
#: ./docs/9.x/mail.md:162
#: ./docs/10.x/mail.md:210
#: ./docs/11.x/mail.md:263
#: ./docs/master/mail.md:224
#~ msgctxt "P"
#~ msgid "<a name=\"generating-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:152
#: ./docs/9.x/mail.md:163
#: ./docs/10.x/mail.md:211
#: ./docs/11.x/mail.md:264
#: ./docs/master/mail.md:225
msgctxt "H2"
msgid "Generating Mailables"
msgstr "產生 Mailable"

#: ./docs/10.x/mail.md:153
#: ./docs/11.x/mail.md:198
#: ./docs/master/mail.md:167
msgctxt "CODE: shell"
msgid ""
"MAIL_MAILER=mailersend\n"
"MAIL_FROM_ADDRESS=app@yourdomain.com\n"
"MAIL_FROM_NAME=\"App Name\"\n"
"\n"
"MAILERSEND_API_KEY=your-api-key"
msgstr ""

#: ./docs/8.x/mail.md:154
#: ./docs/9.x/mail.md:165
#: ./docs/10.x/mail.md:213
#: ./docs/11.x/mail.md:266
#: ./docs/master/mail.md:227
msgctxt "P"
msgid "When building Laravel applications, each type of email sent by your application is represented as a \"mailable\" class. These classes are stored in the `app/Mail` directory. Don't worry if you don't see this directory in your application, since it will be generated for you when you create your first mailable class using the `make:mail` Artisan command:"
msgstr "在撰寫 Laravel 專案時，程式所寄出的所有郵件都以「Mailable」類別的形式呈現。這些類別保存在 `app/Mail` 目錄中。若沒看到這個目錄，請別擔心。使用 `make:mail` Artisan 指令初次建立 Mailable 類別時會自動產生該目錄："

#: ./docs/8.x/mail.md:156
#: ./docs/9.x/mail.md:167
#: ./docs/10.x/mail.md:215
#: ./docs/11.x/mail.md:268
#: ./docs/master/mail.md:229
msgctxt "CODE"
msgid "php artisan make:mail OrderShipped"
msgstr ""

#: ./docs/11.x/mail.md:157
msgctxt "P"
msgid "To interact with SES's [subscription management features](https://docs.aws.amazon.com/ses/latest/dg/sending-email-subscription-management.html), you may return the `X-Ses-List-Management-Options` header in the array returned by the [`headers`](#headers) method of a mail message:"
msgstr ""

#: ./docs/8.x/mail.md:158
#: ./docs/9.x/mail.md:171
#: ./docs/10.x/mail.md:219
#: ./docs/11.x/mail.md:272
#: ./docs/master/mail.md:233
#~ msgctxt "P"
#~ msgid "<a name=\"writing-mailables\"></a>"
#~ msgstr ""

#: ./docs/11.x/mail.md:159
msgctxt "CODE: php"
msgid ""
"/**\n"
" * Get the message headers.\n"
" */\n"
"public function headers(): Headers\n"
"{\n"
"    return new Headers(\n"
"        text: [\n"
"            'X-Ses-List-Management-Options' => 'contactListName=MyContactList;topicName=MyTopic',\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:159
#: ./docs/9.x/mail.md:172
#: ./docs/10.x/mail.md:220
#: ./docs/11.x/mail.md:273
#: ./docs/master/mail.md:234
msgctxt "H2"
msgid "Writing Mailables"
msgstr "撰寫 Mailable"

#: ./docs/10.x/mail.md:161
#: ./docs/11.x/mail.md:214
#: ./docs/master/mail.md:175
msgctxt "P"
msgid "To learn more about MailerSend, including how to use hosted templates, consult the [MailerSend driver documentation](https://github.com/mailersend/mailersend-laravel-driver#usage)."
msgstr "欲瞭解更多有關 MailerSend 的資訊，包含如何使用 Hosted Template (託管的樣板)，請參考 [MailerSend Driver 的說明文件](https://github.com/mailersend/mailersend-laravel-driver#usage)。"

#: ./docs/8.x/mail.md:161
msgctxt "P"
msgid "Once you have generated a mailable class, open it up so we can explore its contents. First, note that all of a mailable class' configuration is done in the `build` method. Within this method, you may call various methods such as `from`, `subject`, `view`, and `attach` to configure the email's presentation and delivery."
msgstr "產生好 Mailable 類別後，請打開該類別，我們來看看裡面的內容。首先，可以注意到所有的 Mailable 類別都在 `build` 方法內進行設定。在該方法中，可呼叫如 `form`、`view`、`attach` 等方法來設定 E-Mail 的顯示方式與寄送設定。"

#: ./docs/8.x/mail.md:163
msgctxt "P"
msgid "You may type-hint dependencies on the mailable's `build` method. The Laravel [service container](/docs/{{version}}/container) automatically injects these dependencies."
msgstr ""

#: ./docs/8.x/mail.md:165
#: ./docs/9.x/mail.md:178
#: ./docs/10.x/mail.md:226
#: ./docs/11.x/mail.md:279
#: ./docs/master/mail.md:240
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-the-sender\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:166
#: ./docs/9.x/mail.md:179
msgctxt "H3"
msgid "Configuring The Sender"
msgstr "設定寄件人"

#: ./docs/10.x/mail.md:168
#: ./docs/11.x/mail.md:221
#: ./docs/master/mail.md:182
msgctxt "P"
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which configured mailers should be chosen for delivery:"
msgstr ""

#: ./docs/8.x/mail.md:168
#~ msgctxt "P"
#~ msgid "<a name=\"using-the-from-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:169
msgctxt "H4"
msgid "Using The `from` Method"
msgstr "使用 `from` 方法"

#: ./docs/8.x/mail.md:171
msgctxt "P"
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may use the `from` method within your mailable class' `build` method:"
msgstr "首先，我們先來看看如何設定寄件人。或者，換句話說，也就是郵件要「^[從](From)」誰那裡寄出。要設定寄件人，有兩種方法。第一種方法，我們可以在 Mailable 類別的 `build` 方法內使用 `from` 方法來設定："

#: ./docs/8.x/mail.md:173
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com', 'Example')\n"
"                ->view('emails.orders.shipped');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:174
#: ./docs/10.x/mail.md:222
#: ./docs/11.x/mail.md:275
#: ./docs/master/mail.md:236
msgctxt "P"
msgid "Once you have generated a mailable class, open it up so we can explore its contents. Mailable class configuration is done in several methods, including the `envelope`, `content`, and `attachments` methods."
msgstr "產生 Mailable 類別後，請先開啟該類別，讓我們來看看該類別的內容。Mailable 類別可通過多個方法來進行設定，包含 `envelope`、`content`、與 `attachments` 方法。"

#: ./docs/9.x/mail.md:176
#: ./docs/10.x/mail.md:224
#: ./docs/11.x/mail.md:277
#: ./docs/master/mail.md:238
msgctxt "P"
msgid "The `envelope` method returns an `Illuminate\\Mail\\Mailables\\Envelope` object that defines the subject and, sometimes, the recipients of the message. The `content` method returns an `Illuminate\\Mail\\Mailables\\Content` object that defines the [Blade template](/docs/{{version}}/blade) that will be used to generate the message content."
msgstr "`evelope` 方法回傳 `Illuminate\\Mail\\Mailables\\Envelope` 物件，用來定義標題，而有的時候也會用來定義收件者與訊息。`content` 方法回傳 `Illuminate\\Mail\\Mailables\\Content` 物件，該物件定義用來產生訊息內容的 [Blade 樣板](/docs/{{version}}/blade)。"

#: ./docs/9.x/mail.md:181
#: ./docs/10.x/mail.md:229
#: ./docs/11.x/mail.md:282
#: ./docs/master/mail.md:243
#~ msgctxt "P"
#~ msgid "<a name=\"using-the-envelope\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:182
msgctxt "H4"
msgid "Using The Envelope"
msgstr "使用 Evelope"

#: ./docs/8.x/mail.md:184
#: ./docs/9.x/mail.md:212
#: ./docs/10.x/mail.md:258
#: ./docs/11.x/mail.md:311
#: ./docs/master/mail.md:272
#~ msgctxt "P"
#~ msgid "<a name=\"using-a-global-from-address\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:184
#: ./docs/10.x/mail.md:232
#: ./docs/11.x/mail.md:285
#: ./docs/master/mail.md:246
msgctxt "P"
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may specify the \"from\" address on your message's envelope:"
msgstr "首先，我們先來看看如何設定寄件人。或者，換句話說，也就是郵件要「從 (From)」誰那裡寄出。要設定寄件人，有兩種方法。第一種方法，我們可以在訊息的 Evelope 上指定「from」位址："

#: ./docs/8.x/mail.md:185
#: ./docs/9.x/mail.md:213
msgctxt "H4"
msgid "Using A Global `from` Address"
msgstr "使用全域的 `from` 位址"

#: ./docs/9.x/mail.md:186
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Address;\n"
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"        subject: 'Order Shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:187
#: ./docs/11.x/mail.md:240
#: ./docs/master/mail.md:201
#~ msgctxt "P"
#~ msgid "<a name=\"round-robin-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:187
#: ./docs/9.x/mail.md:215
msgctxt "P"
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to call the `from` method in each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr "不過，若你的專案中所有的郵件都使用相同的寄件人位址，在每個產生的 Mailable 類別內都呼叫 `from` 方法會很麻煩。比起在每個 Mailable 內呼叫 `from` 方法，我們可以在 `config/mail.php` 設定檔中指定一個全域的「from」位址。若 Mailable 類別內沒有指定「from」位址，就會使用這個全域的位址："

#: ./docs/10.x/mail.md:188
#: ./docs/11.x/mail.md:241
#: ./docs/master/mail.md:202
msgctxt "H3"
msgid "Round Robin Configuration"
msgstr ""

#: ./docs/8.x/mail.md:189
#: ./docs/9.x/mail.md:217
msgctxt "CODE"
msgid "'from' => ['address' => 'example@example.com', 'name' => 'App Name'],"
msgstr ""

#: ./docs/10.x/mail.md:190
#: ./docs/11.x/mail.md:243
#: ./docs/master/mail.md:204
msgctxt "P"
msgid "The `roundrobin` transport allows you to distribute your mailing workload across multiple mailers. To get started, define a mailer within your application's `mail` configuration file that uses the `roundrobin` transport. The configuration array for your application's `roundrobin` mailer should contain an array of `mailers` that reference which configured mailers should be used for delivery:"
msgstr ""

#: ./docs/8.x/mail.md:191
#: ./docs/9.x/mail.md:219
#: ./docs/10.x/mail.md:268
#: ./docs/11.x/mail.md:321
#: ./docs/master/mail.md:282
msgctxt "P"
msgid "In addition, you may define a global \"reply_to\" address within your `config/mail.php` configuration file:"
msgstr "​此外，也可以在 `config/mail.php` 設定檔中定義一個全域的「reply_to」位址："

#: ./docs/10.x/mail.md:192
#: ./docs/11.x/mail.md:245
#: ./docs/master/mail.md:206
msgctxt "CODE"
msgid ""
"'mailers' => [\n"
"    'roundrobin' => [\n"
"        'transport' => 'roundrobin',\n"
"        'mailers' => [\n"
"            'ses',\n"
"            'postmark',\n"
"        ],\n"
"    ],\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:193
#: ./docs/9.x/mail.md:221
#: ./docs/10.x/mail.md:270
#: ./docs/11.x/mail.md:323
#: ./docs/master/mail.md:284
msgctxt "CODE"
msgid "'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],"
msgstr ""

#: ./docs/8.x/mail.md:195
#: ./docs/9.x/mail.md:223
#: ./docs/10.x/mail.md:272
#: ./docs/11.x/mail.md:325
#: ./docs/master/mail.md:286
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-the-view\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:196
#: ./docs/9.x/mail.md:224
msgctxt "H3"
msgid "Configuring The View"
msgstr "​設定 View"

#: ./docs/8.x/mail.md:198
msgctxt "P"
msgid "Within a mailable class' `build` method, you may use the `view` method to specify which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr "在 Mailable 類別的 `build` 方法中，可以使用 `view` 方法來指定在轉譯郵件內容時欲使用哪個樣板。由於一般來說大部分郵件都是使用 [Blade 樣板]來轉譯內容的，因此在建立郵件內容時，我們就可以使用 [Blade 樣板引擎](/docs/{{version}}/blade)的完整功能與便利："

#: ./docs/8.x/mail.md:200
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:202
#: ./docs/10.x/mail.md:248
#: ./docs/11.x/mail.md:301
#: ./docs/master/mail.md:262
msgctxt "P"
msgid "If you would like, you may also specify a `replyTo` address:"
msgstr "若有需要的話，可以指定 `replyTo` 位址："

#: ./docs/10.x/mail.md:204
#: ./docs/11.x/mail.md:257
#: ./docs/master/mail.md:218
msgctxt "P"
msgid "Once your round robin mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr ""

#: ./docs/9.x/mail.md:204
#: ./docs/10.x/mail.md:250
#: ./docs/11.x/mail.md:303
#: ./docs/master/mail.md:264
msgctxt "CODE"
msgid ""
"return new Envelope(\n"
"    from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"    replyTo: [\n"
"        new Address('taylor@example.com', 'Taylor Otwell'),\n"
"    ],\n"
"    subject: 'Order Shipped',\n"
");"
msgstr ""

#: ./docs/10.x/mail.md:206
#: ./docs/11.x/mail.md:259
#: ./docs/master/mail.md:220
msgctxt "CODE"
msgid "'default' => env('MAIL_MAILER', 'roundrobin'),"
msgstr ""

#: ./docs/11.x/mail.md:206
msgctxt "P"
msgid "Finally, add MailerSend to the `mailers` array in your application's `config/mail.php` configuration file:"
msgstr ""

#: ./docs/10.x/mail.md:208
#: ./docs/11.x/mail.md:261
#: ./docs/master/mail.md:222
msgctxt "P"
msgid "The round robin transport selects a random mailer from the list of configured mailers and then switches to the next available mailer for each subsequent email. In contrast to `failover` transport, which helps to achieve *[high availability](https://en.wikipedia.org/wiki/High_availability)*, the `roundrobin` transport provides *[load balancing](https://en.wikipedia.org/wiki/Load_balancing_(computing))*."
msgstr ""

#: ./docs/11.x/mail.md:208
msgctxt "CODE: php"
msgid ""
"'mailersend' => [\n"
"    'transport' => 'mailersend',\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:210
#: ./docs/9.x/mail.md:241
#: ./docs/10.x/mail.md:288
#: ./docs/11.x/mail.md:341
#: ./docs/master/mail.md:302
msgctxt "P"
msgid "You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr "可以建立一個 `resources/views/emails` 目錄來放置所有的郵件樣板。不過，不一定要放在這個目錄，可以隨意放在 `resources/views` 目錄下。"

#: ./docs/8.x/mail.md:212
#: ./docs/9.x/mail.md:243
#: ./docs/10.x/mail.md:290
#: ./docs/11.x/mail.md:343
#: ./docs/master/mail.md:304
#~ msgctxt "P"
#~ msgid "<a name=\"plain-text-emails\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:213
#: ./docs/9.x/mail.md:244
#: ./docs/10.x/mail.md:291
#: ./docs/11.x/mail.md:344
#: ./docs/master/mail.md:305
msgctxt "H4"
msgid "Plain Text Emails"
msgstr "純文字郵件"

#: ./docs/8.x/mail.md:215
msgctxt "P"
msgid "If you would like to define a plain-text version of your email, you may use the `text` method. Like the `view` method, the `text` method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr "若想為郵件定義純文字版本，可使用 `text` 方法。與 `view` 方法一樣，`text` 方法接受一個用來轉譯郵件內容的樣板名稱。可以同時為郵件定義 HTML 與純文字版本："

#: ./docs/8.x/mail.md:217
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->text('emails.orders.shipped_plain');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:226
msgctxt "P"
msgid "Within a mailable class' `content` method, you may define the `view`, or which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr "在 Mailable 類別的 `content` 方法中，可以定義 `view`，或者，可以說在 `content` 方法中指定轉譯郵件內容時要使用哪個樣板。由於一般來說大部分郵件都是使用 [Blade 樣板]來轉譯內容的，因此在建立郵件內容時，我們就可以使用 [Blade 樣板引擎](/docs/{{version}}/blade)的完整功能與便利："

#: ./docs/10.x/mail.md:227
#: ./docs/11.x/mail.md:280
#: ./docs/master/mail.md:241
msgctxt "H3"
msgid "Configuring the Sender"
msgstr ""

#: ./docs/8.x/mail.md:228
#: ./docs/9.x/mail.md:268
#: ./docs/10.x/mail.md:313
#: ./docs/11.x/mail.md:366
#: ./docs/master/mail.md:327
#~ msgctxt "P"
#~ msgid "<a name=\"view-data\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:228
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        view: 'emails.orders.shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:229
#: ./docs/9.x/mail.md:269
#: ./docs/10.x/mail.md:314
#: ./docs/11.x/mail.md:367
#: ./docs/master/mail.md:328
msgctxt "H3"
msgid "View Data"
msgstr "View 資料"

#: ./docs/10.x/mail.md:230
#: ./docs/11.x/mail.md:283
#: ./docs/master/mail.md:244
msgctxt "H4"
msgid "Using the Envelope"
msgstr ""

#: ./docs/8.x/mail.md:231
#: ./docs/9.x/mail.md:271
#: ./docs/10.x/mail.md:316
#: ./docs/11.x/mail.md:369
#: ./docs/master/mail.md:330
#~ msgctxt "P"
#~ msgid "<a name=\"via-public-properties\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:232
#: ./docs/9.x/mail.md:272
#: ./docs/10.x/mail.md:317
#: ./docs/11.x/mail.md:370
#: ./docs/master/mail.md:331
msgctxt "H4"
msgid "Via Public Properties"
msgstr "使用公開屬性"

#: ./docs/10.x/mail.md:234
#: ./docs/11.x/mail.md:287
#: ./docs/master/mail.md:248
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Address;\n"
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"        subject: 'Order Shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:234
#: ./docs/9.x/mail.md:274
msgctxt "P"
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class' constructor and set that data to public properties defined on the class:"
msgstr "一般來說，在轉譯 HTML 版本的郵件時，我們會需要將資料傳入 View 來在其中使用。要將資料傳入 View 有兩種方法。第一種方法，即是在 Mailable 類別裡的公用變數，在 View 裡面可以直接使用。因此，舉例來說，我們可以將資料傳入 Mailable 類別的 ^[Constructor](建構函式) 內，然後將資料設為該類別中定義的公用變數："

#: ./docs/8.x/mail.md:236
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:246
#: ./docs/10.x/mail.md:293
#: ./docs/11.x/mail.md:346
#: ./docs/master/mail.md:307
msgctxt "P"
msgid "If you would like to define a plain-text version of your email, you may specify the plain-text template when creating the message's `Content` definition. Like the `view` parameter, the `text` parameter should be a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr "若想為郵件定義純文字版本，可以在定義訊息的 `Content` 時使用 `text` 方法。與 `view` 參數類似，`text` 參數應為用來轉譯 E-Mail 內容的樣板名稱。可以同時為訊息定義 HTML 與純文字的版本："

#: ./docs/9.x/mail.md:248
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        view: 'emails.orders.shipped',\n"
"        text: 'emails.orders.shipped-text'\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:259
#: ./docs/11.x/mail.md:312
#: ./docs/master/mail.md:273
msgctxt "H4"
msgid "Using a Global `from` Address"
msgstr ""

#: ./docs/10.x/mail.md:261
#: ./docs/11.x/mail.md:314
#: ./docs/master/mail.md:275
msgctxt "P"
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to add it to each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr "不過，若你的專案中所有的郵件都使用相同的寄件人位址，在每個產生的 Mailable 類別內都呼叫 `from` 方法會很麻煩。比起在每個 Mailable 內呼叫 `from` 方法，我們可以在 `config/mail.php` 設定檔中指定一個全域的「from」位址。若 Mailable 類別內沒有指定「from」位址，就會使用這個全域的位址："

#: ./docs/9.x/mail.md:261
#: ./docs/10.x/mail.md:306
#: ./docs/11.x/mail.md:359
#: ./docs/master/mail.md:320
msgctxt "P"
msgid "For clarity, the `html` parameter may be used as an alias of the `view` parameter:"
msgstr "為了讓程式碼更清除，可以使用 `html` 參數。這個參數是 `view` 參數的別名："

#: ./docs/10.x/mail.md:263
#: ./docs/11.x/mail.md:316
#: ./docs/master/mail.md:277
msgctxt "CODE"
msgid ""
"'from' => [\n"
"    'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),\n"
"    'name' => env('MAIL_FROM_NAME', 'Example'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:263
msgctxt "CODE"
msgid ""
"return new Content(\n"
"    html: 'emails.orders.shipped',\n"
"    text: 'emails.orders.shipped-text'\n"
");"
msgstr ""

#: ./docs/10.x/mail.md:273
#: ./docs/11.x/mail.md:326
#: ./docs/master/mail.md:287
msgctxt "H3"
msgid "Configuring the View"
msgstr ""

#: ./docs/10.x/mail.md:275
#: ./docs/11.x/mail.md:328
#: ./docs/master/mail.md:289
msgctxt "P"
msgid "Within a mailable class's `content` method, you may define the `view`, or which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr "在 Mailable 類別的 `content` 方法中，可以定義 `view`，或者，可以說在 `content` 方法中指定轉譯郵件內容時要使用哪個樣板。由於一般來說大部分郵件都是使用 [Blade 樣板]來轉譯內容的，因此在建立郵件內容時，我們就可以使用 [Blade 樣板引擎](/docs/{{version}}/blade)的完整功能與便利："

#: ./docs/9.x/mail.md:276
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Mailables\\Content\n"
"     */\n"
"    public function content()\n"
"    {\n"
"        return new Content(\n"
"            view: 'emails.orders.shipped',\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:277
#: ./docs/11.x/mail.md:330
#: ./docs/master/mail.md:291
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        view: 'mail.orders.shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:278
#: ./docs/9.x/mail.md:321
#: ./docs/10.x/mail.md:353
#: ./docs/11.x/mail.md:406
#: ./docs/master/mail.md:367
msgctxt "P"
msgid "Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr "將資料設為公用變數後，在 View 中就自動可以使用該資料。因此在 Blade 樣板中，我們可以像存取其他資料一樣存取這些資料："

#: ./docs/8.x/mail.md:280
#: ./docs/9.x/mail.md:323
#: ./docs/10.x/mail.md:355
#: ./docs/11.x/mail.md:408
#: ./docs/master/mail.md:369
msgctxt "CODE"
msgid ""
"<div>\n"
"    Price: {{ $order->price }}\n"
"</div>"
msgstr ""

#: ./docs/8.x/mail.md:284
#~ msgctxt "P"
#~ msgid "<a name=\"via-the-with-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:285
msgctxt "H4"
msgid "Via The `with` Method:"
msgstr "通過 `with` 方法："

#: ./docs/8.x/mail.md:287
msgctxt "P"
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `with` method. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template. Then, when calling the `with` method, pass an array of data that you wish to make available to the template:"
msgstr "若想在資料被傳給樣板前自訂其格式，可使用 `with` 方法來手動傳入資料。一般來說，我們還是會使用 Mailable 類別的 Constroctor 來傳入資料。不過，我們可以將該資料設為 `protected` 或 `private` 屬性，這樣樣板中才不會有這些資料。接著，呼叫 `with` 方法，傳入欲在樣板中使用的資料："

#: ./docs/8.x/mail.md:289
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->with([\n"
"                        'orderName' => $this->order->name,\n"
"                        'orderPrice' => $this->order->price,\n"
"                    ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:295
#: ./docs/11.x/mail.md:348
#: ./docs/master/mail.md:309
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        view: 'mail.orders.shipped',\n"
"        text: 'mail.orders.shipped-text'\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:308
#: ./docs/11.x/mail.md:361
#: ./docs/master/mail.md:322
msgctxt "CODE"
msgid ""
"return new Content(\n"
"    html: 'mail.orders.shipped',\n"
"    text: 'mail.orders.shipped-text'\n"
");"
msgstr ""

#: ./docs/10.x/mail.md:319
#: ./docs/11.x/mail.md:372
#: ./docs/master/mail.md:333
msgctxt "P"
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class's constructor and set that data to public properties defined on the class:"
msgstr "一般來說，在轉譯 HTML 版本的郵件時，我們會需要將資料傳入 View 來在其中使用。要將資料傳入 View 有兩種方法。第一種方法，即是在 Mailable 類別裡的公用變數，在 View 裡面可以直接使用。因此，舉例來說，我們可以將資料傳入 Mailable 類別的 ^[Constructor](建構函式) 內，然後將資料設為該類別中定義的公用變數："

#: ./docs/10.x/mail.md:321
#: ./docs/11.x/mail.md:374
#: ./docs/master/mail.md:335
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct(\n"
"        public Order $order,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     */\n"
"    public function content(): Content\n"
"    {\n"
"        return new Content(\n"
"            view: 'mail.orders.shipped',\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:327
#: ./docs/10.x/mail.md:359
#: ./docs/11.x/mail.md:412
#: ./docs/master/mail.md:373
#~ msgctxt "P"
#~ msgid "<a name=\"via-the-with-parameter\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:328
msgctxt "H4"
msgid "Via The `with` Parameter:"
msgstr "通過 `with` 參數："

#: ./docs/9.x/mail.md:330
msgctxt "P"
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `Content` definition's `with` parameter. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template:"
msgstr "若想在資料被傳給樣板前自訂其格式，可使用 `Content` 定義的 `with` 參數來手動將資料傳給 View。一般來說，我們還是會使用 Mailable 類別的 Constroctor 來傳入資料。不過，我們可以將該資料設為 `protected` 或 `private` 屬性，這樣這些資料才不會被自動暴露到樣板中："

#: ./docs/9.x/mail.md:332
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Mailables\\Content\n"
"     */\n"
"    public function content()\n"
"    {\n"
"        return new Content(\n"
"            view: 'emails.orders.shipped',\n"
"            with: [\n"
"                'orderName' => $this->order->name,\n"
"                'orderPrice' => $this->order->price,\n"
"            ],\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:335
#: ./docs/9.x/mail.md:381
#: ./docs/10.x/mail.md:400
#: ./docs/11.x/mail.md:453
#: ./docs/master/mail.md:414
msgctxt "P"
msgid "Once the data has been passed to the `with` method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr "使用 `with` 方法傳入資料後，在 View 中就自動可以使用該資料。因此在 Blade 樣板中，我們可以像存取其他資料一樣存取這些資料："

#: ./docs/8.x/mail.md:337
#: ./docs/9.x/mail.md:383
#: ./docs/10.x/mail.md:402
#: ./docs/11.x/mail.md:455
#: ./docs/master/mail.md:416
msgctxt "CODE"
msgid ""
"<div>\n"
"    Price: {{ $orderPrice }}\n"
"</div>"
msgstr ""

#: ./docs/8.x/mail.md:341
#: ./docs/9.x/mail.md:387
#: ./docs/10.x/mail.md:406
#: ./docs/11.x/mail.md:459
#: ./docs/master/mail.md:420
#~ msgctxt "P"
#~ msgid "<a name=\"attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:342
#: ./docs/9.x/mail.md:388
#: ./docs/10.x/mail.md:407
#: ./docs/11.x/mail.md:460
#: ./docs/master/mail.md:421
msgctxt "H3"
msgid "Attachments"
msgstr "附加檔案"

#: ./docs/8.x/mail.md:344
msgctxt "P"
msgid "To add attachments to an email, use the `attach` method within the mailable class' `build` method. The `attach` method accepts the full path to the file as its first argument:"
msgstr "若要將檔案附加至 E-Mail，請使用 Mailable 類別 `build` 方法中的 `attach` 方法。`attach` 方法接受檔案的完整路徑作為其第一個引數："

#: ./docs/8.x/mail.md:346
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:357
msgctxt "P"
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr "將檔案附加至訊息時，也可傳入一個陣列給 `attach` 方法來指定要顯示的檔案名稱與 / 或 MIME 類型："

#: ./docs/8.x/mail.md:359
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:360
#: ./docs/11.x/mail.md:413
#: ./docs/master/mail.md:374
msgctxt "H4"
msgid "Via the `with` Parameter:"
msgstr ""

#: ./docs/10.x/mail.md:362
#: ./docs/11.x/mail.md:415
#: ./docs/master/mail.md:376
msgctxt "P"
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `Content` definition's `with` parameter. Typically, you will still pass data via the mailable class's constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template:"
msgstr "若想在資料被傳給樣板前自訂其格式，可使用 `Content` 定義的 `with` 參數來手動將資料傳給 View。一般來說，我們還是會使用 Mailable 類別的 Constroctor 來傳入資料。不過，我們可以將該資料設為 `protected` 或 `private` 屬性，這樣這些資料才不會被自動暴露到樣板中："

#: ./docs/10.x/mail.md:364
#: ./docs/11.x/mail.md:417
#: ./docs/master/mail.md:378
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected Order $order,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     */\n"
"    public function content(): Content\n"
"    {\n"
"        return new Content(\n"
"            view: 'mail.orders.shipped',\n"
"            with: [\n"
"                'orderName' => $this->order->name,\n"
"                'orderPrice' => $this->order->price,\n"
"            ],\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:373
#: ./docs/9.x/mail.md:422
#: ./docs/10.x/mail.md:441
#: ./docs/11.x/mail.md:494
#: ./docs/master/mail.md:455
#~ msgctxt "P"
#~ msgid "<a name=\"attaching-files-from-disk\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:374
#: ./docs/9.x/mail.md:423
#: ./docs/10.x/mail.md:442
#: ./docs/11.x/mail.md:495
#: ./docs/master/mail.md:456
msgctxt "H4"
msgid "Attaching Files From Disk"
msgstr "從 Disk 中附加檔案"

#: ./docs/8.x/mail.md:376
msgctxt "P"
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `attachFromStorage` method:"
msgstr "若有儲存在[檔案系統 Disk](/docs/{{version}}/filesystem)中的檔案，可使用 `attachFromStorage` 方法來將其附加至郵件中："

#: ./docs/8.x/mail.md:378
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:389
msgctxt "P"
msgid "If necessary, you may specify the file's attachment name and additional options using the second and third arguments to the `attachFromStorage` method:"
msgstr "若有需要，可使用 `attachFromStorage` 方法的第三與第四個引數來指定檔案名稱與其他額外的選項："

#: ./docs/9.x/mail.md:390
#: ./docs/10.x/mail.md:409
#: ./docs/11.x/mail.md:462
#: ./docs/master/mail.md:423
msgctxt "P"
msgid "To add attachments to an email, you will add attachments to the array returned by the message's `attachments` method. First, you may add an attachment by providing a file path to the `fromPath` method provided by the `Attachment` class:"
msgstr "若要將附件加到 E-Mail 中，可以在訊息的 `attachments` 方法所回傳的陣列內加上附件。首先，我們需要將附件的檔案路徑提供給 `Attachment` 類別的 `fromPath` 方法來加上附件："

#: ./docs/8.x/mail.md:391
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                   'mime' => 'application/pdf'\n"
"               ]);\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:392
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Attachment;\n"
"\n"
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:404
msgctxt "P"
msgid "The `attachFromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr "若想指定預設以外的 Disk，可使用 `attachFromStorageDisk` 方法："

#: ./docs/8.x/mail.md:406
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorageDisk('s3', '/path/to/file');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:406
#: ./docs/10.x/mail.md:425
#: ./docs/11.x/mail.md:478
#: ./docs/master/mail.md:439
msgctxt "P"
msgid "When attaching files to a message, you may also specify the display name and / or MIME type for the attachment using the `as` and `withMime` methods:"
msgstr "將檔案附加至訊息時，也可以使用 `as` 與 `withMime` 方法來指定附件的顯示名稱與／或 MIME 型別："

#: ./docs/9.x/mail.md:408
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:411
#: ./docs/11.x/mail.md:464
#: ./docs/master/mail.md:425
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Attachment;\n"
"\n"
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:417
#: ./docs/9.x/mail.md:471
#: ./docs/10.x/mail.md:490
#: ./docs/11.x/mail.md:543
#: ./docs/master/mail.md:504
#~ msgctxt "P"
#~ msgid "<a name=\"raw-data-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:418
#: ./docs/9.x/mail.md:472
#: ./docs/10.x/mail.md:491
#: ./docs/11.x/mail.md:544
#: ./docs/master/mail.md:505
msgctxt "H4"
msgid "Raw Data Attachments"
msgstr "原始資料附加檔案"

#: ./docs/8.x/mail.md:420
msgctxt "P"
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `attachData` method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:"
msgstr "可使用 `attachData` 方法來以位元組原始字串的形式作為附件附加。舉例來說，我們可能會在記憶體內產生 PDF，然後想在不寫入 Disk 的情況下將其附加到郵件上。`attachData` 方法接受原始資料位元組作為其第一個引數，檔案名稱為其第二個引數，然後是一組選項陣列作為其第三個引數："

#: ./docs/8.x/mail.md:422
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:425
#: ./docs/10.x/mail.md:444
#: ./docs/11.x/mail.md:497
#: ./docs/master/mail.md:458
msgctxt "P"
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `fromStorage` attachment method:"
msgstr "若有儲存在[檔案系統 Disk](/docs/{{version}}/filesystem)中的檔案，可使用 `fromStorage` 方法來將其附加至郵件中："

#: ./docs/10.x/mail.md:427
#: ./docs/11.x/mail.md:480
#: ./docs/master/mail.md:441
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:427
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:435
#: ./docs/9.x/mail.md:489
#: ./docs/10.x/mail.md:508
#: ./docs/11.x/mail.md:561
#: ./docs/master/mail.md:522
#~ msgctxt "P"
#~ msgid "<a name=\"inline-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:436
#: ./docs/9.x/mail.md:490
#: ./docs/10.x/mail.md:509
#: ./docs/11.x/mail.md:562
#: ./docs/master/mail.md:523
msgctxt "H3"
msgid "Inline Attachments"
msgstr "內嵌的附加檔案"

#: ./docs/8.x/mail.md:438
#: ./docs/9.x/mail.md:492
#: ./docs/10.x/mail.md:511
#: ./docs/11.x/mail.md:564
#: ./docs/master/mail.md:525
msgctxt "P"
msgid "Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails. To embed an inline image, use the `embed` method on the `$message` variable within your email template. Laravel automatically makes the `$message` variable available to all of your email templates, so you don't need to worry about passing it in manually:"
msgstr "一般來說，要把圖片內嵌到郵件裡面是很麻煩的。不過，Laravel 提供了一個方便的方法可以將圖片附加到郵件裡。若要內嵌圖片，請使用郵件樣板內 `$message` 變數中的 `embed` 方法。Laravel 會自動為所有的郵件樣板提供這個 `$message` 變數，所以我們不需要手動傳入："

#: ./docs/9.x/mail.md:439
#: ./docs/10.x/mail.md:458
#: ./docs/11.x/mail.md:511
#: ./docs/master/mail.md:472
msgctxt "P"
msgid "Of course, you may also specify the attachment's name and MIME type:"
msgstr "當然，也可以指定附件的名稱與 MIME 型別："

#: ./docs/8.x/mail.md:440
#: ./docs/9.x/mail.md:494
#: ./docs/10.x/mail.md:513
#: ./docs/11.x/mail.md:566
#: ./docs/master/mail.md:527
msgctxt "CODE"
msgid ""
"<body>\n"
"    Here is an image:\n"
"\n"
"    <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"</body>"
msgstr ""

#: ./docs/9.x/mail.md:441
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:446
#: ./docs/11.x/mail.md:499
#: ./docs/master/mail.md:460
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:446
#: ./docs/9.x/mail.md:503
#: ./docs/10.x/mail.md:522
#: ./docs/11.x/mail.md:575
#: ./docs/master/mail.md:536
msgctxt "P"
msgid "The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr "`$message` 變數無法在純文字訊息樣板中使用，因為純文字樣板無法使用內嵌的附加檔案。"

#: ./docs/8.x/mail.md:448
#: ./docs/9.x/mail.md:505
#: ./docs/10.x/mail.md:524
#: ./docs/11.x/mail.md:577
#: ./docs/master/mail.md:538
#~ msgctxt "P"
#~ msgid "<a name=\"embedding-raw-data-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:449
#: ./docs/9.x/mail.md:506
#: ./docs/10.x/mail.md:525
#: ./docs/11.x/mail.md:578
#: ./docs/master/mail.md:539
msgctxt "H4"
msgid "Embedding Raw Data Attachments"
msgstr "內嵌原始資料附件"

#: ./docs/8.x/mail.md:451
#: ./docs/9.x/mail.md:508
#: ./docs/10.x/mail.md:527
#: ./docs/11.x/mail.md:580
#: ./docs/master/mail.md:541
msgctxt "P"
msgid "If you already have a raw image data string you wish to embed into an email template, you may call the `embedData` method on the `$message` variable. When calling the `embedData` method, you will need to provide a filename that should be assigned to the embedded image:"
msgstr "若有欲嵌入到郵件樣板中的原始圖片字串，可呼叫 `$message` 變數上的 `embedData` 方法。呼叫 `embedData` 方法時，請提供一個欲設定給嵌入圖片的檔案名稱："

#: ./docs/8.x/mail.md:453
#: ./docs/9.x/mail.md:510
#: ./docs/10.x/mail.md:529
#: ./docs/11.x/mail.md:582
#: ./docs/master/mail.md:543
msgctxt "CODE"
msgid ""
"<body>\n"
"    Here is an image from raw data:\n"
"\n"
"    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"</body>"
msgstr ""

#: ./docs/9.x/mail.md:455
#: ./docs/10.x/mail.md:474
#: ./docs/11.x/mail.md:527
#: ./docs/master/mail.md:488
msgctxt "P"
msgid "The `fromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr "若想指定非預設的 Disk，可使用 `fromStorageDisk` 方法："

#: ./docs/9.x/mail.md:457
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:459
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-swiftmailer-message\"></a>"
#~ msgstr ""

#: ./docs/10.x/mail.md:460
#: ./docs/11.x/mail.md:513
#: ./docs/master/mail.md:474
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:460
msgctxt "H3"
msgid "Customizing The SwiftMailer Message"
msgstr "自訂 SwiftMailer 訊息"

#: ./docs/8.x/mail.md:462
msgctxt "P"
msgid "The `withSwiftMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the SwiftMailer message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr "`Mailable` 基礎類別的 `withSwiftMessage` 方法可讓我們註冊一個閉包，在傳送訊息前會以 SwiftMailer 實體叫用該閉包。這樣我們就有機會在郵件被送出前深度自訂該訊息："

#: ./docs/8.x/mail.md:464
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n"
"\n"
"    $this->withSwiftMessage(function ($message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n"
"\n"
"    return $this;\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:474
#: ./docs/10.x/mail.md:493
#: ./docs/11.x/mail.md:546
#: ./docs/master/mail.md:507
msgctxt "P"
msgid "The `fromData` attachment method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `fromData` method accepts a closure which resolves the raw data bytes as well as the name that the attachment should be assigned:"
msgstr "可使用 `fromData` 方法來將位元組原始字串 (Raw String of Bytes) 形式的值作為附件附加。舉例來說，我們可能會在記憶體內產生 PDF，然後想在不寫入 Disk 的情況下將其附加到郵件上。`fromData` 方法需傳入一個閉包，Laravel 會使用該閉包用來取得原始資料字串，以及附加檔案的名稱："

#: ./docs/10.x/mail.md:476
#: ./docs/11.x/mail.md:529
#: ./docs/master/mail.md:490
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:476
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:482
#: ./docs/9.x/mail.md:653
#: ./docs/10.x/mail.md:666
#: ./docs/11.x/mail.md:719
#: ./docs/master/mail.md:680
#~ msgctxt "P"
#~ msgid "<a name=\"markdown-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:483
#: ./docs/9.x/mail.md:654
#: ./docs/10.x/mail.md:667
#: ./docs/11.x/mail.md:720
#: ./docs/master/mail.md:681
msgctxt "H2"
msgid "Markdown Mailables"
msgstr "Markdown 的 Mailer"

#: ./docs/8.x/mail.md:485
#: ./docs/9.x/mail.md:656
#: ./docs/10.x/mail.md:669
#: ./docs/11.x/mail.md:722
#: ./docs/master/mail.md:683
msgctxt "P"
msgid "Markdown mailable messages allow you to take advantage of the pre-built templates and components of [mail notifications](/docs/{{version}}/notifications#mail-notifications) in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr "Markdown Mailer 訊息可讓我們在 Mailable 內使用內建樣板與 [Mail Notification](/docs/{{version}}/notifications#mail-notifications) 的元件。由於使用 Markdown 來撰寫訊息，因此 Laravel 就可為這些郵件轉譯出漂亮的回應式 HTML 樣板，並自動轉譯出純文字版本的郵件。"

#: ./docs/8.x/mail.md:487
#: ./docs/9.x/mail.md:658
#: ./docs/10.x/mail.md:671
#: ./docs/11.x/mail.md:724
#: ./docs/master/mail.md:685
#~ msgctxt "P"
#~ msgid "<a name=\"generating-markdown-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:488
#: ./docs/9.x/mail.md:659
#: ./docs/10.x/mail.md:672
#: ./docs/11.x/mail.md:725
#: ./docs/master/mail.md:686
msgctxt "H3"
msgid "Generating Markdown Mailables"
msgstr "產生 Markdown 的 Malable"

#: ./docs/8.x/mail.md:490
#: ./docs/9.x/mail.md:661
#: ./docs/10.x/mail.md:674
#: ./docs/11.x/mail.md:727
#: ./docs/master/mail.md:688
msgctxt "P"
msgid "To generate a mailable with a corresponding Markdown template, you may use the `--markdown` option of the `make:mail` Artisan command:"
msgstr "若要產生有對應 Markdown 樣板的 Mailable，請使用 `make:mail` Artisan 指令的 `--markdown` 選項："

#: ./docs/8.x/mail.md:492
#: ./docs/9.x/mail.md:663
msgctxt "CODE"
msgid "php artisan make:mail OrderShipped --markdown=emails.orders.shipped"
msgstr ""

#: ./docs/8.x/mail.md:494
msgctxt "P"
msgid "Then, when configuring the mailable within its `build` method, call the `markdown` method instead of the `view` method. The `markdown` method accepts the name of the Markdown template and an optional array of data to make available to the template:"
msgstr "接著，在 `build` 方法內設定 Mailable 時，不呼叫 `view` 方法，而是改呼叫 `markdown` 方法。`makrdown` 方法接受 Markdown 樣板的名稱，以及一組用來提供給樣板的可選資料陣列："

#: ./docs/10.x/mail.md:495
#: ./docs/11.x/mail.md:548
#: ./docs/master/mail.md:509
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:496
msgctxt "CODE"
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com')\n"
"                ->markdown('emails.orders.shipped', [\n"
"                    'url' => $this->orderUrl,\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:509
#: ./docs/9.x/mail.md:686
#: ./docs/10.x/mail.md:697
#: ./docs/11.x/mail.md:750
#: ./docs/master/mail.md:711
#~ msgctxt "P"
#~ msgid "<a name=\"writing-markdown-messages\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:510
#: ./docs/9.x/mail.md:687
#: ./docs/10.x/mail.md:698
#: ./docs/11.x/mail.md:751
#: ./docs/master/mail.md:712
msgctxt "H3"
msgid "Writing Markdown Messages"
msgstr "撰寫 Markdown 訊息"

#: ./docs/8.x/mail.md:512
#: ./docs/9.x/mail.md:689
#: ./docs/10.x/mail.md:700
#: ./docs/11.x/mail.md:753
#: ./docs/master/mail.md:714
msgctxt "P"
msgid "Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel's pre-built email UI components:"
msgstr "Markdown 的 Markdown 使用 Blade 元件與 Markdown 格式的組合，讓我們能輕鬆地使用 Laravel 內建的 E-Mail UI 元件來建立訊息："

#: ./docs/8.x/mail.md:514
msgctxt "CODE"
msgid ""
"@component('mail::message')\n"
"# Order Shipped\n"
"\n"
"Your order has been shipped!\n"
"\n"
"@component('mail::button', ['url' => $url])\n"
"View Order\n"
"@endcomponent\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent"
msgstr ""

#: ./docs/9.x/mail.md:518
#: ./docs/10.x/mail.md:537
#: ./docs/11.x/mail.md:590
#: ./docs/master/mail.md:551
#~ msgctxt "P"
#~ msgid "<a name=\"attachable-objects\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:519
#: ./docs/10.x/mail.md:538
#: ./docs/11.x/mail.md:591
#: ./docs/master/mail.md:552
msgctxt "H3"
msgid "Attachable Objects"
msgstr "可附加的物件"

#: ./docs/9.x/mail.md:521
#: ./docs/10.x/mail.md:540
#: ./docs/11.x/mail.md:593
#: ./docs/master/mail.md:554
msgctxt "P"
msgid "While attaching files to messages via simple string paths is often sufficient, in many cases the attachable entities within your application are represented by classes. For example, if your application is attaching a photo to a message, your application may also have a `Photo` model that represents that photo. When that is the case, wouldn't it be convenient to simply pass the `Photo` model to the `attach` method? Attachable objects allow you to do just that."
msgstr "雖然一般來說，以簡單的字串路徑來將檔案附加到訊息上通常就夠了。但很多情況下，在專案中，可附加的物件都是以類別形式存在的。舉例來說，若要將照片附加到訊息中，則專案內可能有一個用來代表該照片的 `Photo` Model`。 這時，若可以直接將 `Photo` Model 附加到 `attach` 方法上不是很方便嗎？使用可附加的物件，就可以輕鬆達成。"

#: ./docs/9.x/mail.md:523
#: ./docs/10.x/mail.md:542
#: ./docs/11.x/mail.md:595
#: ./docs/master/mail.md:556
msgctxt "P"
msgid "To get started, implement the `Illuminate\\Contracts\\Mail\\Attachable` interface on the object that will be attachable to messages. This interface dictates that your class defines a `toMailAttachment` method that returns an `Illuminate\\Mail\\Attachment` instance:"
msgstr "若要開始定義可附加物件，請在要被附加到訊息的物件上實作 `Illuminate\\Contracts\\Mail\\Attachable` 介面。該介面會要求這個類別定義 `toMailAttachment`，且該方法應回傳 `Illuminate\\Mail\\Attachment` 實體："

#: ./docs/9.x/mail.md:525
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Contracts\\Mail\\Attachable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Mail\\Attachment;\n"
"\n"
"class Photo extends Model implements Attachable\n"
"{\n"
"    /**\n"
"     * Get the attachable representation of the model.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Attachment\n"
"     */\n"
"    public function toMailAttachment()\n"
"    {\n"
"        return Attachment::fromPath('/path/to/file');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:527
#: ./docs/9.x/mail.md:707
#: ./docs/10.x/mail.md:718
#: ./docs/11.x/mail.md:771
#: ./docs/master/mail.md:732
msgctxt "P"
msgid "Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr "在撰寫 Markdown 郵件時請不要增加縮排。依據 Markdown 標準，Markdown 解析程式會將縮排的內容轉譯為程式碼區塊。"

#: ./docs/8.x/mail.md:529
#: ./docs/9.x/mail.md:709
#: ./docs/10.x/mail.md:720
#: ./docs/11.x/mail.md:773
#: ./docs/master/mail.md:734
#~ msgctxt "P"
#~ msgid "<a name=\"button-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:530
#: ./docs/9.x/mail.md:710
#: ./docs/10.x/mail.md:721
#: ./docs/11.x/mail.md:774
#: ./docs/master/mail.md:735
msgctxt "H4"
msgid "Button Component"
msgstr "Button 元件"

#: ./docs/8.x/mail.md:532
#: ./docs/9.x/mail.md:712
#: ./docs/10.x/mail.md:723
#: ./docs/11.x/mail.md:776
#: ./docs/master/mail.md:737
msgctxt "P"
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `success`, and `error`. You may add as many button components to a message as you wish:"
msgstr "Button 元件轉譯一個置中的按鈕連結。這個元件接受兩個引數，一個是 `url` 網址，另一個則是可選的 `color` 顏色。支援的顏色有 `primary`、`success`、`error`。在訊息中可以加上不限數量的 Button 元件："

#: ./docs/8.x/mail.md:534
msgctxt "CODE"
msgid ""
"@component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"View Order\n"
"@endcomponent"
msgstr ""

#: ./docs/8.x/mail.md:538
#: ./docs/9.x/mail.md:720
#: ./docs/10.x/mail.md:731
#: ./docs/11.x/mail.md:784
#: ./docs/master/mail.md:745
#~ msgctxt "P"
#~ msgid "<a name=\"panel-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:539
#: ./docs/9.x/mail.md:721
#: ./docs/10.x/mail.md:732
#: ./docs/11.x/mail.md:785
#: ./docs/master/mail.md:746
msgctxt "H4"
msgid "Panel Component"
msgstr "Panel 元件"

#: ./docs/8.x/mail.md:541
#: ./docs/9.x/mail.md:723
#: ./docs/10.x/mail.md:734
#: ./docs/11.x/mail.md:787
#: ./docs/master/mail.md:748
msgctxt "P"
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:"
msgstr "Panel 元件將給定的文字區塊轉譯在一個面板中，面板的底色與訊息中其他部分的背景色稍有不同。我們可以使用 Panel 元件來讓給定區塊的文字較為醒目："

#: ./docs/8.x/mail.md:543
msgctxt "CODE"
msgid ""
"@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent"
msgstr ""

#: ./docs/10.x/mail.md:544
#: ./docs/11.x/mail.md:597
#: ./docs/master/mail.md:558
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Contracts\\Mail\\Attachable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Mail\\Attachment;\n"
"\n"
"class Photo extends Model implements Attachable\n"
"{\n"
"    /**\n"
"     * Get the attachable representation of the model.\n"
"     */\n"
"    public function toMailAttachment(): Attachment\n"
"    {\n"
"        return Attachment::fromPath('/path/to/file');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:546
#: ./docs/10.x/mail.md:563
#: ./docs/11.x/mail.md:616
#: ./docs/master/mail.md:577
msgctxt "P"
msgid "Once you have defined your attachable object, you may return an instance of that object from the `attachments` method when building an email message:"
msgstr "定義好可附加的物件後，就可以在建立 E-Mail 訊息時從 `attachments` 方法中回傳該物件的實體："

#: ./docs/8.x/mail.md:547
#: ./docs/9.x/mail.md:731
#: ./docs/10.x/mail.md:742
#: ./docs/11.x/mail.md:795
#: ./docs/master/mail.md:756
#~ msgctxt "P"
#~ msgid "<a name=\"table-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:548
#: ./docs/9.x/mail.md:732
#: ./docs/10.x/mail.md:743
#: ./docs/11.x/mail.md:796
#: ./docs/master/mail.md:757
msgctxt "H4"
msgid "Table Component"
msgstr "Table 元件"

#: ./docs/9.x/mail.md:548
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [$this->photo];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:550
#: ./docs/9.x/mail.md:734
#: ./docs/10.x/mail.md:745
#: ./docs/11.x/mail.md:798
#: ./docs/master/mail.md:759
msgctxt "P"
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr "Table 元件可讓我們將 Markdown 表格轉為 HTML 表格。該元件接受一個 Markdown 表格作為其內容。支援使用預設的 Markdown 表格對其格式來對其表格欄位："

#: ./docs/8.x/mail.md:552
msgctxt "CODE"
msgid ""
"@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent"
msgstr ""

#: ./docs/9.x/mail.md:558
#: ./docs/10.x/mail.md:575
#: ./docs/11.x/mail.md:628
#: ./docs/master/mail.md:589
msgctxt "P"
msgid "Of course, attachment data may be stored on a remote file storage service such as Amazon S3. So, Laravel also allows you to generate attachment instances from data that is stored on one of your application's [filesystem disks](/docs/{{version}}/filesystem):"
msgstr "當然，要附加的資料也可能存放在如 Amazon S3 之類的遠端檔案儲存服務上。因此，在 Laravel 中，我們可以從存放在專案[檔案系統磁碟](/docs/{{version}}/filesystem)上的資料來產生附件實體："

#: ./docs/8.x/mail.md:559
#: ./docs/9.x/mail.md:745
#: ./docs/10.x/mail.md:756
#: ./docs/11.x/mail.md:809
#: ./docs/master/mail.md:770
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-components\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:560
#: ./docs/9.x/mail.md:746
msgctxt "H3"
msgid "Customizing The Components"
msgstr "自訂元件"

#: ./docs/9.x/mail.md:560
#: ./docs/10.x/mail.md:577
#: ./docs/11.x/mail.md:630
#: ./docs/master/mail.md:591
msgctxt "CODE"
msgid ""
"// Create an attachment from a file on your default disk...\n"
"return Attachment::fromStorage($this->path);\n"
"\n"
"// Create an attachment from a file on a specific disk...\n"
"return Attachment::fromStorageDisk('backblaze', $this->path);"
msgstr ""

#: ./docs/8.x/mail.md:562
#: ./docs/9.x/mail.md:748
#: ./docs/10.x/mail.md:759
#: ./docs/11.x/mail.md:812
#: ./docs/master/mail.md:773
msgctxt "P"
msgid "You may export all of the Markdown mail components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr "可以將所有的 Markdown 郵件元件匯出到專案內來自訂這些元件。若要匯出元件，請使用 `vendor:publish` Artisan  指令來^[安裝](Publish) `laravel-mail` 素材標籤："

#: ./docs/8.x/mail.md:564
#: ./docs/9.x/mail.md:750
#: ./docs/10.x/mail.md:761
#: ./docs/11.x/mail.md:814
#: ./docs/master/mail.md:775
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=laravel-mail"
msgstr ""

#: ./docs/10.x/mail.md:565
#: ./docs/11.x/mail.md:618
#: ./docs/master/mail.md:579
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [$this->photo];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:566
#: ./docs/9.x/mail.md:754
#: ./docs/10.x/mail.md:765
#: ./docs/11.x/mail.md:818
#: ./docs/master/mail.md:779
msgctxt "P"
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr "這個指令會將 Markdown 郵件元件安裝到 `resources/views/vendor/mail` 目錄下。`mail` 目錄會包含 `html` 與 `text` 目錄，這些目錄中包含了所有可用元件對應的呈現方式。可以隨意自訂這些元件。"

#: ./docs/9.x/mail.md:566
#: ./docs/10.x/mail.md:583
#: ./docs/11.x/mail.md:636
#: ./docs/master/mail.md:597
msgctxt "P"
msgid "In addition, you may create attachment instances via data that you have in memory. To accomplish this, provide a closure to the `fromData` method. The closure should return the raw data that represents the attachment:"
msgstr "此外，也可以使用記憶體中的資料來建立附件實體。若要從記憶體中建立，請傳入一個閉包給 `fromData` 方法。該閉包應回傳代表該附件的原始資料："

#: ./docs/8.x/mail.md:568
#: ./docs/9.x/mail.md:756
#: ./docs/10.x/mail.md:767
#: ./docs/11.x/mail.md:820
#: ./docs/master/mail.md:781
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-css\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:568
#: ./docs/10.x/mail.md:585
#: ./docs/11.x/mail.md:638
#: ./docs/master/mail.md:599
msgctxt "CODE"
msgid "return Attachment::fromData(fn () => $this->content, 'Photo Name');"
msgstr ""

#: ./docs/8.x/mail.md:569
#: ./docs/9.x/mail.md:757
msgctxt "H4"
msgid "Customizing The CSS"
msgstr "自訂 CSS"

#: ./docs/9.x/mail.md:570
#: ./docs/10.x/mail.md:587
#: ./docs/11.x/mail.md:640
#: ./docs/master/mail.md:601
msgctxt "P"
msgid "Laravel also provides additional methods that you may use to customize your attachments. For example, you may use the `as` and `withMime` methods to customize the file's name and MIME type:"
msgstr "Laravel 也提供了一些額外的方法，讓我們可以自訂附件。舉例來說，可以使用 `as` 與 `withMime` 方法來自訂檔案名稱與 MIME 型別："

#: ./docs/8.x/mail.md:571
#: ./docs/9.x/mail.md:759
#: ./docs/10.x/mail.md:770
#: ./docs/11.x/mail.md:823
#: ./docs/master/mail.md:784
msgctxt "P"
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be converted to inline CSS styles within the HTML representations of your Markdown mail messages."
msgstr "匯出元件後，`resources/views/vendor/mail/html/themes` 目錄下會包含一個 `default.css` 檔案。可以自訂這個檔案內的 CSS。這些樣式在 Markdown 郵件訊息的 HTML 呈現上會自動被轉換為內嵌的 CSS 樣式："

#: ./docs/9.x/mail.md:572
#: ./docs/10.x/mail.md:589
#: ./docs/11.x/mail.md:642
#: ./docs/master/mail.md:603
msgctxt "CODE"
msgid ""
"return Attachment::fromPath('/path/to/file')\n"
"        ->as('Photo Name')\n"
"        ->withMime('image/jpeg');"
msgstr ""

#: ./docs/8.x/mail.md:573
#: ./docs/9.x/mail.md:761
#: ./docs/10.x/mail.md:772
#: ./docs/11.x/mail.md:825
#: ./docs/master/mail.md:786
msgctxt "P"
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of your application's `config/mail.php` configuration file to match the name of your new theme."
msgstr "若想為 Laravel Markdown 元件製作一個全新的主題，可在 `html/themes` 目錄下放置一個 CSS 檔。命名好 CSS 檔並保存後，請修改專案 `config/mail.php` 設定檔中的 `theme` 選項為該新主題的名稱： "

#: ./docs/8.x/mail.md:575
#: ./docs/9.x/mail.md:763
#: ./docs/10.x/mail.md:774
#: ./docs/11.x/mail.md:827
#: ./docs/master/mail.md:788
msgctxt "P"
msgid "To customize the theme for an individual mailable, you may set the `$theme` property of the mailable class to the name of the theme that should be used when sending that mailable."
msgstr "若要為個別 Mailable 自訂主題，可在 Mailable 類別上將 `$theme` 屬性設為傳送該 Mailable 時要使用的主題名稱："

#: ./docs/9.x/mail.md:576
#: ./docs/10.x/mail.md:593
#: ./docs/11.x/mail.md:646
#: ./docs/master/mail.md:607
#~ msgctxt "P"
#~ msgid "<a name=\"headers\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:577
#: ./docs/9.x/mail.md:765
#: ./docs/10.x/mail.md:776
#: ./docs/11.x/mail.md:829
#: ./docs/master/mail.md:790
#~ msgctxt "P"
#~ msgid "<a name=\"sending-mail\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:577
#: ./docs/10.x/mail.md:594
#: ./docs/11.x/mail.md:647
#: ./docs/master/mail.md:608
msgctxt "H3"
msgid "Headers"
msgstr "標頭 (Header)"

#: ./docs/8.x/mail.md:578
#: ./docs/9.x/mail.md:766
#: ./docs/10.x/mail.md:777
#: ./docs/11.x/mail.md:830
#: ./docs/master/mail.md:791
msgctxt "H2"
msgid "Sending Mail"
msgstr "傳送郵件"

#: ./docs/9.x/mail.md:579
#: ./docs/10.x/mail.md:596
#: ./docs/11.x/mail.md:649
#: ./docs/master/mail.md:610
msgctxt "P"
msgid "Sometimes you may need to attach additional headers to the outgoing message. For instance, you may need to set a custom `Message-Id` or other arbitrary text headers."
msgstr "有時候，我們會需要在連外訊息中加上額外的標頭。舉例來說，我們可能會需要設定自定的 `Message-Id` 或其他任意的文字標頭。"

#: ./docs/8.x/mail.md:580
#: ./docs/9.x/mail.md:768
#: ./docs/10.x/mail.md:779
#: ./docs/11.x/mail.md:832
#: ./docs/master/mail.md:793
msgctxt "P"
msgid "To send a message, use the `to` method on the `Mail` [facade](/docs/{{version}}/facades). The `to` method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their `email` and `name` properties when determining the email's recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the `send` method:"
msgstr "若要傳送郵件，請使用 `Mail` Facade` 上的 `to` 方法。可傳入電子郵件位址、使用者實體、或是一組包含使用者的 Collection 給 `to` 方法。若傳入物件或一組包含物件的 Collection，則 Mailer 在判斷收件人時會自動使用這些物件的 `email` 與 `name` 屬性來判斷。因此，請確認這些物件上是否有這兩個屬性。指定好收件人後，就可傳入 Mailable 類別的實體給 `send` 方法："

#: ./docs/9.x/mail.md:581
#: ./docs/10.x/mail.md:598
#: ./docs/11.x/mail.md:651
#: ./docs/master/mail.md:612
msgctxt "P"
msgid "To accomplish this, define a `headers` method on your mailable. The `headers` method should return an `Illuminate\\Mail\\Mailables\\Headers` instance. This class accepts `messageId`, `references`, and `text` parameters. Of course, you may provide only the parameters you need for your particular message:"
msgstr "若要設定標頭，請在 Mailable 內定義一個 `headers` 方法。`headers` 方法應回傳 `Illuminate\\Mail\\Mailables\\Headers` 實體。該類別接受 `messageId`、`references`、與 `text` 參數。當然，我們只需要提供該訊息所需要的參數即可："

#: ./docs/8.x/mail.md:582
#: ./docs/9.x/mail.md:770
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Ship the order...\n"
"\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:583
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Headers;\n"
"\n"
"/**\n"
" * Get the message headers.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Headers\n"
" */\n"
"public function headers()\n"
"{\n"
"    return new Headers(\n"
"        messageId: 'custom-message-id@example.com',\n"
"        references: ['previous-message@example.com'],\n"
"        text: [\n"
"            'X-Custom-Header' => 'Custom Value',\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:600
#: ./docs/11.x/mail.md:653
#: ./docs/master/mail.md:614
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Headers;\n"
"\n"
"/**\n"
" * Get the message headers.\n"
" */\n"
"public function headers(): Headers\n"
"{\n"
"    return new Headers(\n"
"        messageId: 'custom-message-id@example.com',\n"
"        references: ['previous-message@example.com'],\n"
"        text: [\n"
"            'X-Custom-Header' => 'Custom Value',\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:601
#: ./docs/10.x/mail.md:616
#: ./docs/11.x/mail.md:669
#: ./docs/master/mail.md:630
#~ msgctxt "P"
#~ msgid "<a name=\"tags-and-metadata\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:602
msgctxt "H3"
msgid "Tags & Metadata"
msgstr "Tag 與詮釋資料"

#: ./docs/9.x/mail.md:604
#: ./docs/10.x/mail.md:619
#: ./docs/11.x/mail.md:672
#: ./docs/master/mail.md:633
msgctxt "P"
msgid "Some third-party email providers such as Mailgun and Postmark support message \"tags\" and \"metadata\", which may be used to group and track emails sent by your application. You may add tags and metadata to an email message via your `Envelope` definition:"
msgstr "有的第三方 E-Mail 提供商，如 Mailgun 或 Postmark 等，支援訊息的「Tag」與「詮釋資料 (Metadata)」，使用 Tag 與詮釋資料，就可以對專案所送出的 E-Mail 進行分組與追蹤。可以通過 `Evelope` 定義來為 E-Mail 訊息加上 Tag 與詮釋資料："

#: ./docs/9.x/mail.md:606
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        tags: ['shipment'],\n"
"        metadata: [\n"
"            'order_id' => $this->order->id,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:610
#: ./docs/9.x/mail.md:798
#: ./docs/10.x/mail.md:809
#: ./docs/11.x/mail.md:862
#: ./docs/master/mail.md:823
msgctxt "P"
msgid "You are not limited to just specifying the \"to\" recipients when sending a message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by chaining their respective methods together:"
msgstr "傳送訊息時，除了「to」方法能用來指定收件人外，還可以指定「^[CC](副本)」與「^[BCC](密件副本)」收件人。可將「to」、「cc」、「bcc」等方法串聯使用，以指定這些方法對應的收件人："

#: ./docs/8.x/mail.md:612
#: ./docs/9.x/mail.md:800
#: ./docs/10.x/mail.md:811
#: ./docs/11.x/mail.md:864
#: ./docs/master/mail.md:825
msgctxt "CODE"
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->send(new OrderShipped($order));"
msgstr ""

#: ./docs/10.x/mail.md:617
#: ./docs/11.x/mail.md:670
#: ./docs/master/mail.md:631
msgctxt "H3"
msgid "Tags and Metadata"
msgstr ""

#: ./docs/8.x/mail.md:617
#: ./docs/9.x/mail.md:805
#: ./docs/10.x/mail.md:816
#: ./docs/11.x/mail.md:869
#: ./docs/master/mail.md:830
#~ msgctxt "P"
#~ msgid "<a name=\"looping-over-recipients\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:618
#: ./docs/9.x/mail.md:806
#: ./docs/10.x/mail.md:817
#: ./docs/11.x/mail.md:870
#: ./docs/master/mail.md:831
msgctxt "H4"
msgid "Looping Over Recipients"
msgstr "在收件人中迴圈"

#: ./docs/8.x/mail.md:620
#: ./docs/9.x/mail.md:808
#: ./docs/10.x/mail.md:819
#: ./docs/11.x/mail.md:872
#: ./docs/master/mail.md:833
msgctxt "P"
msgid "Occasionally, you may need to send a mailable to a list of recipients by iterating over an array of recipients / email addresses. However, since the `to` method appends email addresses to the mailable's list of recipients, each iteration through the loop will send another email to every previous recipient. Therefore, you should always re-create the mailable instance for each recipient:"
msgstr "有時候，我們會需要迭代一組收件人或 E-Mail 位址的陣列來將 Mailable 傳送給多個收件人。不過，因為 `to` 方法會將 E-Mail 位址加到 Mailable 的收件人列表上，因此每次循環都會將該郵件再傳送給之前的收件人一次。所以，每個收件人都需要重新建立一個新的 Mailable 實體："

#: ./docs/10.x/mail.md:621
#: ./docs/11.x/mail.md:674
#: ./docs/master/mail.md:635
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        tags: ['shipment'],\n"
"        metadata: [\n"
"            'order_id' => $this->order->id,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:622
#: ./docs/9.x/mail.md:810
#: ./docs/10.x/mail.md:821
#: ./docs/11.x/mail.md:874
#: ./docs/master/mail.md:835
msgctxt "CODE"
msgid ""
"foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"    Mail::to($recipient)->send(new OrderShipped($order));\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:624
#: ./docs/10.x/mail.md:639
#: ./docs/master/mail.md:653
msgctxt "P"
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/en/latest/user_manual.html#tagging-1) and [metadata](https://documentation.mailgun.com/en/latest/user_manual.html#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr "若使用 Mailgun Driver，請參考 Mailgun 說明文件中有關 [Tag](https://documentation.mailgun.com/en/latest/user_manual.html#tagging-1) 與[詮釋資料](https://documentation.mailgun.com/en/latest/user_manual.html#attaching-data-to-messages)的更多資訊。同樣地，也請參考 Postmark 說明文件中有關 [Tag](https://postmarkapp.com/blog/tags-support-for-smtp) 與[詮釋資料](https://postmarkapp.com/support/article/1125-custom-metadata-faq)的更多資料。"

#: ./docs/8.x/mail.md:626
#: ./docs/9.x/mail.md:814
#: ./docs/10.x/mail.md:825
#: ./docs/11.x/mail.md:878
#: ./docs/master/mail.md:839
#~ msgctxt "P"
#~ msgid "<a name=\"sending-mail-via-a-specific-mailer\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:626
#: ./docs/10.x/mail.md:641
#: ./docs/11.x/mail.md:694
#: ./docs/master/mail.md:655
msgctxt "P"
msgid "If your application is using Amazon SES to send emails, you should use the `metadata` method to attach [SES \"tags\"](https://docs.aws.amazon.com/ses/latest/APIReference/API_MessageTag.html) to the message."
msgstr "若使用 Amazon SES 來寄送 E-Mail，則可使用 `metadata` 方法來將  [SES「Tag」](https://docs.aws.amazon.com/ses/latest/APIReference/API_MessageTag.html)附加到訊息上。"

#: ./docs/8.x/mail.md:627
#: ./docs/9.x/mail.md:815
msgctxt "H4"
msgid "Sending Mail Via A Specific Mailer"
msgstr "使用指定的 Mailer 來傳送郵件"

#: ./docs/9.x/mail.md:628
#: ./docs/10.x/mail.md:643
#: ./docs/11.x/mail.md:696
#: ./docs/master/mail.md:657
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-symfony-message\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:629
#: ./docs/9.x/mail.md:817
#: ./docs/10.x/mail.md:828
#: ./docs/11.x/mail.md:881
#: ./docs/master/mail.md:842
msgctxt "P"
msgid "By default, Laravel will send email using the mailer configured as the `default` mailer in your application's `mail` configuration file. However, you may use the `mailer` method to send a message using a specific mailer configuration:"
msgstr "預設情況下，Laravel 會使用專案 `mail` 設定中設為 `default` 的 Mailaer 來寄送郵件。不過，也可以使用 `mailer` 方法來特定的 Mailer 設定傳送訊息："

#: ./docs/9.x/mail.md:629
msgctxt "H3"
msgid "Customizing The Symfony Message"
msgstr "自訂 Symfony Message"

#: ./docs/8.x/mail.md:631
#: ./docs/9.x/mail.md:819
#: ./docs/10.x/mail.md:830
#: ./docs/11.x/mail.md:883
#: ./docs/master/mail.md:844
msgctxt "CODE"
msgid ""
"Mail::mailer('postmark')\n"
"        ->to($request->user())\n"
"        ->send(new OrderShipped($order));"
msgstr ""

#: ./docs/9.x/mail.md:631
#: ./docs/10.x/mail.md:646
#: ./docs/11.x/mail.md:699
#: ./docs/master/mail.md:660
msgctxt "P"
msgid "Laravel's mail capabilities are powered by Symfony Mailer. Laravel allows you to register custom callbacks that will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is sent. To accomplish this, define a `using` parameter on your `Envelope` definition:"
msgstr "Laravel 的郵件是使用 Symfony Mailer 驅動的。在 Laravel 中，我們可以註冊一個在寄送訊息前會被呼叫的回呼，該回呼會收到 Symfony Message 實體。這樣，我們就能在郵件被寄送前深度自定訊息。若要註冊這個回呼，可以在 `Evelope` 實體上定義一個 `using` 參數："

#: ./docs/9.x/mail.md:633
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        using: [\n"
"            function (Email $message) {\n"
"                // ...\n"
"            },\n"
"        ]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:635
#: ./docs/9.x/mail.md:823
#: ./docs/10.x/mail.md:834
#: ./docs/11.x/mail.md:887
#: ./docs/master/mail.md:848
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-mail\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:636
#: ./docs/9.x/mail.md:824
#: ./docs/10.x/mail.md:835
#: ./docs/11.x/mail.md:888
#: ./docs/master/mail.md:849
msgctxt "H3"
msgid "Queueing Mail"
msgstr "將郵件放入佇列"

#: ./docs/8.x/mail.md:638
#: ./docs/9.x/mail.md:826
#: ./docs/10.x/mail.md:837
#: ./docs/11.x/mail.md:890
#: ./docs/master/mail.md:851
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-a-mail-message\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:639
#: ./docs/9.x/mail.md:827
msgctxt "H4"
msgid "Queueing A Mail Message"
msgstr "將郵件訊息放入佇列"

#: ./docs/8.x/mail.md:641
#: ./docs/9.x/mail.md:829
#: ./docs/10.x/mail.md:840
#: ./docs/11.x/mail.md:893
#: ./docs/master/mail.md:854
msgctxt "P"
msgid "Since sending email messages can negatively impact the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in [unified queue API](/docs/{{version}}/queues). To queue a mail message, use the `queue` method on the `Mail` facade after specifying the message's recipients:"
msgstr "由於傳送郵件訊息可能對程式的 Response 時間造成負面影響，因此許多開發人員都選擇將郵件訊息放入陣列來在背景執行。在 Laravel 中，使用內建的[統一佇列 API](/docs/{{version}}/queues)，就能輕鬆地將郵件放入佇列。若要將郵件訊息放入佇列，請在指定好收件人後使用 `Mail` Facade 的 `queue` 方法："

#: ./docs/8.x/mail.md:643
#: ./docs/9.x/mail.md:831
#: ./docs/10.x/mail.md:842
#: ./docs/11.x/mail.md:895
#: ./docs/master/mail.md:856
msgctxt "CODE"
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue(new OrderShipped($order));"
msgstr ""

#: ./docs/10.x/mail.md:644
#: ./docs/11.x/mail.md:697
#: ./docs/master/mail.md:658
msgctxt "H3"
msgid "Customizing the Symfony Message"
msgstr ""

#: ./docs/10.x/mail.md:648
#: ./docs/11.x/mail.md:701
#: ./docs/master/mail.md:662
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        using: [\n"
"            function (Email $message) {\n"
"                // ...\n"
"            },\n"
"        ]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:648
#: ./docs/9.x/mail.md:836
#: ./docs/10.x/mail.md:847
#: ./docs/11.x/mail.md:900
#: ./docs/master/mail.md:861
msgctxt "P"
msgid "This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to [configure your queues](/docs/{{version}}/queues) before using this feature."
msgstr "這個方法會自動將任務推入佇列，這樣訊息就會在背景傳送。在使用這個功能前，會需要先[設定佇列](/docs/{{version}}/queues)。"

#: ./docs/8.x/mail.md:650
#: ./docs/9.x/mail.md:838
#: ./docs/10.x/mail.md:849
#: ./docs/11.x/mail.md:902
#: ./docs/master/mail.md:863
#~ msgctxt "P"
#~ msgid "<a name=\"delayed-message-queueing\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:651
#: ./docs/9.x/mail.md:839
#: ./docs/10.x/mail.md:850
#: ./docs/11.x/mail.md:903
#: ./docs/master/mail.md:864
msgctxt "H4"
msgid "Delayed Message Queueing"
msgstr "延遲訊息佇列"

#: ./docs/8.x/mail.md:653
#: ./docs/9.x/mail.md:841
#: ./docs/10.x/mail.md:852
#: ./docs/11.x/mail.md:905
#: ./docs/master/mail.md:866
msgctxt "P"
msgid "If you wish to delay the delivery of a queued email message, you may use the `later` method. As its first argument, the `later` method accepts a `DateTime` instance indicating when the message should be sent:"
msgstr "若想延遲傳送某個佇列訊息，可使用 `later` 方法。`later` 方法的第一個引數是 `DateTime` 實體，用來表示該訊息何時寄出："

#: ./docs/8.x/mail.md:655
#: ./docs/9.x/mail.md:843
#: ./docs/10.x/mail.md:854
#: ./docs/11.x/mail.md:907
#: ./docs/master/mail.md:868
msgctxt "CODE"
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->later(now()->addMinutes(10), new OrderShipped($order));"
msgstr ""

#: ./docs/8.x/mail.md:660
#: ./docs/9.x/mail.md:848
#: ./docs/10.x/mail.md:859
#: ./docs/11.x/mail.md:912
#: ./docs/master/mail.md:873
#~ msgctxt "P"
#~ msgid "<a name=\"pushing-to-specific-queues\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:661
#: ./docs/9.x/mail.md:849
msgctxt "H4"
msgid "Pushing To Specific Queues"
msgstr "推入指定的佇列"

#: ./docs/8.x/mail.md:663
#: ./docs/9.x/mail.md:851
#: ./docs/10.x/mail.md:862
#: ./docs/11.x/mail.md:915
#: ./docs/master/mail.md:876
msgctxt "P"
msgid "Since all mailable classes generated using the `make:mail` command make use of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and `onConnection` methods on any mailable class instance, allowing you to specify the connection and queue name for the message:"
msgstr "由於所有使用 `make:mail` 指令產生的 Mailable 類別都使用 `Illiminate\\Bus\\Queuable` Trait，因此我們可以在任何一個 Mailable 類別實體上呼叫 `onQueue` 與 `onConnection` 方法，可讓我們指定該訊息要使用的佇列名稱："

#: ./docs/8.x/mail.md:665
#: ./docs/9.x/mail.md:853
#: ./docs/10.x/mail.md:864
#: ./docs/11.x/mail.md:917
#: ./docs/master/mail.md:878
msgctxt "CODE"
msgid ""
"$message = (new OrderShipped($order))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('emails');\n"
"\n"
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue($message);"
msgstr ""

#: ./docs/9.x/mail.md:667
#: ./docs/10.x/mail.md:680
#: ./docs/11.x/mail.md:733
#: ./docs/master/mail.md:694
msgctxt "P"
msgid "Then, when configuring the mailable `Content` definition within its `content` method, use the `markdown` parameter instead of the `view` parameter:"
msgstr "接著，在 `content` 方法中設定 Mailable 的 `Content` 定義時，請將 `view` 參數改成 `markdown` 參數："

#: ./docs/9.x/mail.md:669
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Content;\n"
"\n"
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        markdown: 'emails.orders.shipped',\n"
"        with: [\n"
"            'url' => $this->orderUrl,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:674
#: ./docs/9.x/mail.md:862
#: ./docs/10.x/mail.md:873
#: ./docs/11.x/mail.md:926
#: ./docs/master/mail.md:887
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-by-default\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:675
#: ./docs/9.x/mail.md:863
msgctxt "H4"
msgid "Queueing By Default"
msgstr "預設佇列"

#: ./docs/10.x/mail.md:676
#: ./docs/11.x/mail.md:729
#: ./docs/master/mail.md:690
msgctxt "CODE: shell"
msgid "php artisan make:mail OrderShipped --markdown=mail.orders.shipped"
msgstr ""

#: ./docs/8.x/mail.md:677
#: ./docs/9.x/mail.md:865
#: ./docs/10.x/mail.md:876
#: ./docs/11.x/mail.md:929
#: ./docs/master/mail.md:890
msgctxt "P"
msgid "If you have mailable classes that you want to always be queued, you may implement the `ShouldQueue` contract on the class. Now, even if you call the `send` method when mailing, the mailable will still be queued since it implements the contract:"
msgstr "若有想要永遠放入佇列的 Mailable 類別，可在該類別上實作 `ShouldQueue` Contract。接著，即使使用 `send` 方法來寄送郵件，由於該 Mailable 有實作 `ShouldQueue` Contract，因此還是會被放入佇列："

#: ./docs/8.x/mail.md:679
#: ./docs/9.x/mail.md:867
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:682
#: ./docs/11.x/mail.md:735
#: ./docs/master/mail.md:696
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Content;\n"
"\n"
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        markdown: 'mail.orders.shipped',\n"
"        with: [\n"
"            'url' => $this->orderUrl,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:686
#: ./docs/9.x/mail.md:874
#: ./docs/10.x/mail.md:885
#: ./docs/11.x/mail.md:938
#: ./docs/master/mail.md:899
#~ msgctxt "P"
#~ msgid "<a name=\"queued-mailables-and-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:687
#: ./docs/9.x/mail.md:875
msgctxt "H4"
msgid "Queued Mailables & Database Transactions"
msgstr "佇列的 Mailable 與資料庫 Transaction"

#: ./docs/8.x/mail.md:689
#: ./docs/9.x/mail.md:877
#: ./docs/10.x/mail.md:888
#: ./docs/11.x/mail.md:941
#: ./docs/master/mail.md:902
msgctxt "P"
msgid "When queued mailables are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your mailable depends on these models, unexpected errors can occur when the job that sends the queued mailable is processed."
msgstr "當佇列 Mailable 是在資料庫 Transaction 內^[分派](Dispatch)的時候，這個 Mailable 可能會在資料庫 Transaction 被 Commit 前就被佇列進行處理了。發生這種情況時，在資料庫 Transaction 期間對 Model 或資料庫記錄所做出的更新可能都還未反應到資料庫內。另外，所有在 Transaction 期間新增的 Model 或資料庫記錄也可能還未出現在資料庫內。若 Mailable 有使用這些 Model 的話，在處理該佇列 Mailable 的任務時可能會出現未預期的錯誤。"

#: ./docs/8.x/mail.md:691
#: ./docs/9.x/mail.md:879
#: ./docs/10.x/mail.md:890
#: ./docs/11.x/mail.md:943
#: ./docs/master/mail.md:904
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued mailable should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the mail message:"
msgstr "若佇列的 `after_commit` 選項設為 `false`，則我們還是可以通過在寄送郵件訊息前呼叫 `afterCommit` 方法來表示出該 Mailable 應在所有資料庫 Transaction 都被 Commit 後才分派："

#: ./docs/9.x/mail.md:691
#: ./docs/10.x/mail.md:702
#: ./docs/11.x/mail.md:755
#: ./docs/master/mail.md:716
msgctxt "CODE: blade"
msgid ""
"<x-mail::message>\n"
"# Order Shipped\n"
"\n"
"Your order has been shipped!\n"
"\n"
"<x-mail::button :url=\"$url\">\n"
"View Order\n"
"</x-mail::button>\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"</x-mail::message>"
msgstr ""

#: ./docs/11.x/mail.md:692
msgctxt "P"
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#tagging) and [metadata](https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr ""

#: ./docs/8.x/mail.md:693
#: ./docs/9.x/mail.md:881
#: ./docs/10.x/mail.md:892
#: ./docs/11.x/mail.md:945
#: ./docs/master/mail.md:906
msgctxt "CODE"
msgid ""
"Mail::to($request->user())->send(\n"
"    (new OrderShipped($order))->afterCommit()\n"
");"
msgstr ""

#: ./docs/8.x/mail.md:697
#: ./docs/9.x/mail.md:885
#: ./docs/10.x/mail.md:896
#: ./docs/11.x/mail.md:949
#: ./docs/master/mail.md:910
msgctxt "P"
msgid "Alternatively, you may call the `afterCommit` method from your mailable's constructor:"
msgstr "或者，也可以在 Mailable 的 Constructor 上呼叫 `afterCommit` 方法："

#: ./docs/8.x/mail.md:699
#: ./docs/9.x/mail.md:887
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:714
#: ./docs/10.x/mail.md:725
#: ./docs/11.x/mail.md:778
#: ./docs/master/mail.md:739
msgctxt "CODE: blade"
msgid ""
"<x-mail::button :url=\"$url\" color=\"success\">\n"
"View Order\n"
"</x-mail::button>"
msgstr ""

#: ./docs/8.x/mail.md:723
#: ./docs/9.x/mail.md:912
#: ./docs/10.x/mail.md:921
#: ./docs/11.x/mail.md:974
#: ./docs/master/mail.md:935
msgctxt "P"
msgid "To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr "要瞭解更多有關這類問題的解決方法，請參考有關[佇列任務與資料庫 Transaction](/docs/{{version}}/queues#jobs-and-database-transactions) 有關的說明文件。"

#: ./docs/8.x/mail.md:725
#: ./docs/9.x/mail.md:914
#: ./docs/10.x/mail.md:923
#: ./docs/11.x/mail.md:976
#: ./docs/master/mail.md:937
#~ msgctxt "P"
#~ msgid "<a name=\"rendering-mailables\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:725
#: ./docs/10.x/mail.md:736
#: ./docs/11.x/mail.md:789
#: ./docs/master/mail.md:750
msgctxt "CODE: blade"
msgid ""
"<x-mail::panel>\n"
"This is the panel content.\n"
"</x-mail::panel>"
msgstr ""

#: ./docs/8.x/mail.md:726
#: ./docs/9.x/mail.md:915
#: ./docs/10.x/mail.md:924
#: ./docs/11.x/mail.md:977
#: ./docs/master/mail.md:938
msgctxt "H2"
msgid "Rendering Mailables"
msgstr "轉譯 Mailable"

#: ./docs/8.x/mail.md:728
#: ./docs/9.x/mail.md:917
#: ./docs/10.x/mail.md:926
#: ./docs/11.x/mail.md:979
#: ./docs/master/mail.md:940
msgctxt "P"
msgid "Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the `render` method of the mailable. This method will return the evaluated HTML content of the mailable as a string:"
msgstr "有時候我們會想在不寄送 Mailable 的情況下截取其 HTML 內容。若要截取其內容，可呼叫 Mailable 的 `render` 方法。該方法會以字串回傳該 Mailable 的 HTML 取值內容："

#: ./docs/8.x/mail.md:730
#: ./docs/9.x/mail.md:919
#: ./docs/10.x/mail.md:928
#: ./docs/11.x/mail.md:981
#: ./docs/master/mail.md:942
msgctxt "CODE"
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\Invoice;\n"
"\n"
"$invoice = Invoice::find(1);\n"
"\n"
"return (new InvoicePaid($invoice))->render();"
msgstr ""

#: ./docs/9.x/mail.md:736
#: ./docs/10.x/mail.md:747
#: ./docs/master/mail.md:761
msgctxt "CODE: blade"
msgid ""
"<x-mail::table>\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"</x-mail::table>"
msgstr ""

#: ./docs/8.x/mail.md:737
#: ./docs/9.x/mail.md:926
#: ./docs/10.x/mail.md:935
#: ./docs/11.x/mail.md:988
#: ./docs/master/mail.md:949
#~ msgctxt "P"
#~ msgid "<a name=\"previewing-mailables-in-the-browser\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:738
#: ./docs/9.x/mail.md:927
msgctxt "H3"
msgid "Previewing Mailables In The Browser"
msgstr "在瀏覽器內預覽 Mailable"

#: ./docs/8.x/mail.md:740
#: ./docs/9.x/mail.md:929
#: ./docs/10.x/mail.md:938
#: ./docs/11.x/mail.md:991
#: ./docs/master/mail.md:952
msgctxt "P"
msgid "When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr "在設計 Mailable 樣板時，若能像普通的 Blade 樣板一樣在瀏覽器中預覽轉譯後的 Mailable 該有多方便。因為這樣，在 Laravel 中，可以直接在 Route 閉包或 Controller 中回傳任何的 Mailable。若回傳 Mailable，則會轉譯該 Mailable 並顯示在瀏覽器上，讓我們不需將其寄到真實的電子郵件上也能快速檢視其設計："

#: ./docs/8.x/mail.md:742
#: ./docs/9.x/mail.md:931
#: ./docs/10.x/mail.md:940
#: ./docs/11.x/mail.md:993
#: ./docs/master/mail.md:954
msgctxt "CODE"
msgid ""
"Route::get('/mailable', function () {\n"
"    $invoice = App\\Models\\Invoice::find(1);\n"
"\n"
"    return new App\\Mail\\InvoicePaid($invoice);\n"
"});"
msgstr ""

#: ./docs/8.x/mail.md:748
msgctxt "P"
msgid "[Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [MailHog](https://github.com/mailhog/MailHog) or [HELO](https://usehelo.com)."
msgstr ""

#: ./docs/8.x/mail.md:750
#: ./docs/9.x/mail.md:940
#: ./docs/10.x/mail.md:946
#: ./docs/11.x/mail.md:999
#: ./docs/master/mail.md:960
#~ msgctxt "P"
#~ msgid "<a name=\"localizing-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:751
#: ./docs/9.x/mail.md:941
#: ./docs/10.x/mail.md:947
#: ./docs/11.x/mail.md:1000
#: ./docs/master/mail.md:961
msgctxt "H2"
msgid "Localizing Mailables"
msgstr "本土化 Mailable"

#: ./docs/8.x/mail.md:753
#: ./docs/9.x/mail.md:943
#: ./docs/10.x/mail.md:949
#: ./docs/11.x/mail.md:1002
#: ./docs/master/mail.md:963
msgctxt "P"
msgid "Laravel allows you to send mailables in a locale other than the request's current locale, and will even remember this locale if the mail is queued."
msgstr "在 Laravel 中，可以使用與 Request 中不同的語系設定來傳送郵件，且在郵件被放入佇列後依然會使用所設定的語系。"

#: ./docs/8.x/mail.md:755
#: ./docs/9.x/mail.md:945
#: ./docs/10.x/mail.md:951
#: ./docs/11.x/mail.md:1004
#: ./docs/master/mail.md:965
msgctxt "P"
msgid "To accomplish this, the `Mail` facade offers a `locale` method to set the desired language. The application will change into this locale when the mailable's template is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr "若要設定語系，請使用 `Mail` Facade 提供的 `locale` 方法來設定要使用的語言。在轉譯 Mailable 樣板時，程式會先進入這個語系中，轉譯完畢後再回到之前的語系："

#: ./docs/10.x/mail.md:757
#: ./docs/11.x/mail.md:810
#: ./docs/master/mail.md:771
msgctxt "H3"
msgid "Customizing the Components"
msgstr ""

#: ./docs/8.x/mail.md:757
#: ./docs/9.x/mail.md:947
#: ./docs/10.x/mail.md:953
#: ./docs/11.x/mail.md:1006
#: ./docs/master/mail.md:967
msgctxt "CODE"
msgid ""
"Mail::to($request->user())->locale('es')->send(\n"
"    new OrderShipped($order)\n"
");"
msgstr ""

#: ./docs/8.x/mail.md:761
#: ./docs/9.x/mail.md:951
#: ./docs/10.x/mail.md:957
#: ./docs/11.x/mail.md:1010
#: ./docs/master/mail.md:971
#~ msgctxt "P"
#~ msgid "<a name=\"user-preferred-locales\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:762
#: ./docs/9.x/mail.md:952
#: ./docs/10.x/mail.md:958
#: ./docs/11.x/mail.md:1011
#: ./docs/master/mail.md:972
msgctxt "H3"
msgid "User Preferred Locales"
msgstr "使用者偏好的語系"

#: ./docs/8.x/mail.md:764
#: ./docs/9.x/mail.md:954
#: ./docs/10.x/mail.md:960
#: ./docs/11.x/mail.md:1013
#: ./docs/master/mail.md:974
msgctxt "P"
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:"
msgstr "有時候，我們的程式會儲存每個使用者偏好的語言。只要在一個或多個 Model 上實作 `HasLocalePreference` Contract，就可以讓 Laravel 在寄送郵件時使用這些儲存的語系："

#: ./docs/8.x/mail.md:766
#: ./docs/9.x/mail.md:956
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:768
#: ./docs/11.x/mail.md:821
#: ./docs/master/mail.md:782
msgctxt "H4"
msgid "Customizing the CSS"
msgstr ""

#: ./docs/10.x/mail.md:781
#: ./docs/11.x/mail.md:834
#: ./docs/master/mail.md:795
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Ship the order...\n"
"\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"\n"
"        return redirect('/orders');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:781
#: ./docs/9.x/mail.md:971
#: ./docs/10.x/mail.md:975
#: ./docs/11.x/mail.md:1028
#: ./docs/master/mail.md:989
msgctxt "P"
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr "實作好該介面後，向該 Model 寄送 Mailable 或通知時，Laravel 會自動使用偏好的語系。因此，使用該介面時不需呼叫 `locale` 方法："

#: ./docs/8.x/mail.md:783
#: ./docs/9.x/mail.md:973
#: ./docs/10.x/mail.md:977
#: ./docs/11.x/mail.md:1030
#: ./docs/master/mail.md:991
msgctxt "CODE"
msgid "Mail::to($request->user())->send(new OrderShipped($order));"
msgstr ""

#: ./docs/8.x/mail.md:785
#: ./docs/9.x/mail.md:975
#: ./docs/10.x/mail.md:979
#: ./docs/11.x/mail.md:1032
#: ./docs/master/mail.md:993
#~ msgctxt "P"
#~ msgid "<a name=\"testing-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:786
#: ./docs/9.x/mail.md:976
msgctxt "H2"
msgid "Testing Mailables"
msgstr "測試 Mailable"

#: ./docs/8.x/mail.md:788
msgctxt "P"
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr "Laravel 提供了多種可測試 Mailable 是否包含於其內容的方便方法。這些方法是：`assertSeeInHtml`、`assertDontSeeInHtml`、`assertSeeInText`、`assertDontSeeInText`。"

#: ./docs/8.x/mail.md:790
#: ./docs/9.x/mail.md:980
#: ./docs/10.x/mail.md:987
#: ./docs/11.x/mail.md:1040
#: ./docs/master/mail.md:1001
msgctxt "P"
msgid "As you might expect, the \"HTML\" assertions assert that the HTML version of your mailable contains a given string, while the \"text\" assertions assert that the plain-text version of your mailable contains a given string:"
msgstr "就和預期的一樣，有「HTML」的^ [Assertion](判斷提示) 判斷 HTML 版本的 Mailable 是否包含給定字串，而「Text」版本的 Assertion 則判斷純文字版本的 Mailable 是否包含給定字串："

#: ./docs/8.x/mail.md:792
msgctxt "CODE"
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInText('Invoice Paid');\n"
"}"
msgstr ""

#: ./docs/11.x/mail.md:800
msgctxt "CODE: blade"
msgid ""
"<x-mail::table>\n"
"| Laravel       | Table         | Example       |\n"
"| ------------- | :-----------: | ------------: |\n"
"| Col 2 is      | Centered      | $10           |\n"
"| Col 3 is      | Right-Aligned | $20           |\n"
"</x-mail::table>"
msgstr ""

#: ./docs/8.x/mail.md:808
#: ./docs/9.x/mail.md:1014
#: ./docs/10.x/mail.md:1021
#: ./docs/11.x/mail.md:1109
#: ./docs/master/mail.md:1070
#~ msgctxt "P"
#~ msgid "<a name=\"testing-mailable-sending\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:809
#: ./docs/9.x/mail.md:1015
#: ./docs/10.x/mail.md:1022
#: ./docs/11.x/mail.md:1110
#: ./docs/master/mail.md:1071
msgctxt "H4"
msgid "Testing Mailable Sending"
msgstr "測試 Mailable 的寄送"

#: ./docs/8.x/mail.md:811
#: ./docs/9.x/mail.md:1017
msgctxt "P"
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test that mailables were sent, check out our documentation on the [Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr "在測試郵件是否有寄給特定使用者時，我們建議與 Mailable 的內容分開測試。若要瞭解如何測試郵件是否有寄出，請參考有關 [Mail 模擬](/docs/{{version}}/mocking#mail-fake)的說明文件。"

#: ./docs/8.x/mail.md:813
#: ./docs/9.x/mail.md:1019
#: ./docs/10.x/mail.md:1117
#: ./docs/11.x/mail.md:1247
#: ./docs/master/mail.md:1196
#~ msgctxt "P"
#~ msgid "<a name=\"mail-and-local-development\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:814
#: ./docs/9.x/mail.md:1020
msgctxt "H2"
msgid "Mail & Local Development"
msgstr "郵件與本機開發"

#: ./docs/8.x/mail.md:816
#: ./docs/9.x/mail.md:1022
#: ./docs/10.x/mail.md:1120
#: ./docs/11.x/mail.md:1250
#: ./docs/master/mail.md:1199
msgctxt "P"
msgid "When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to \"disable\" the actual sending of emails during local development."
msgstr "在開發有寄送郵件的程式時，我們通常都不會想實際將郵件寄到真實的 E-Mail 位址上。Laravel 提供了數種數種方法來在本機上開發時「禁用」郵件的實際傳送。"

#: ./docs/8.x/mail.md:818
#: ./docs/9.x/mail.md:1024
#: ./docs/10.x/mail.md:1122
#: ./docs/11.x/mail.md:1252
#: ./docs/master/mail.md:1201
#~ msgctxt "P"
#~ msgid "<a name=\"log-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:819
#: ./docs/9.x/mail.md:1025
#: ./docs/10.x/mail.md:1123
#: ./docs/11.x/mail.md:1253
#: ./docs/master/mail.md:1202
msgctxt "H4"
msgid "Log Driver"
msgstr "Log Driver"

#: ./docs/8.x/mail.md:821
#: ./docs/9.x/mail.md:1027
#: ./docs/10.x/mail.md:1125
#: ./docs/11.x/mail.md:1255
#: ./docs/master/mail.md:1204
msgctxt "P"
msgid "Instead of sending your emails, the `log` mail driver will write all email messages to your log files for inspection. Typically, this driver would only be used during local development. For more information on configuring your application per environment, check out the [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr "`log` 郵件 Driver 不會實際寄送電子郵件，而是將所有電子郵件訊息寫入日誌檔以供檢查。一般來說，Log Driver 只會在開發環境上使用。有關一找不同環境設定專案的方法，請參考[設定的說明文件](/docs/{{version}}/configuration#environment-configuration)。"

#: ./docs/8.x/mail.md:823
#: ./docs/9.x/mail.md:1029
#: ./docs/10.x/mail.md:1127
#: ./docs/11.x/mail.md:1257
#: ./docs/master/mail.md:1206
#~ msgctxt "P"
#~ msgid "<a name=\"mailtrap\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:824
msgctxt "H4"
msgid "HELO / Mailtrap / MailHog"
msgstr "HELO / Mailtrap / MailHog"

#: ./docs/10.x/mail.md:826
#: ./docs/11.x/mail.md:879
#: ./docs/master/mail.md:840
msgctxt "H4"
msgid "Sending Mail via a Specific Mailer"
msgstr ""

#: ./docs/8.x/mail.md:826
#: ./docs/9.x/mail.md:1032
#: ./docs/10.x/mail.md:1130
#: ./docs/11.x/mail.md:1260
#: ./docs/master/mail.md:1209
msgctxt "P"
msgid "Alternatively, you may use a service like [HELO](https://usehelo.com) or [Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email messages to a \"dummy\" mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap's message viewer."
msgstr "或者，也可以使用如 [HELO](https://usehelo.com) 或 [Mailtrap](https://mailtrap.io) 這類服務搭配 `smtp` Driver 來將電子郵件寄送到一個「模擬的」收件夾，並像在真的郵件用戶端一樣檢視這些郵件。這種做法的好處就是可以在 Mailtrap 的訊息檢視工具中實際檢視寄出的郵件。"

#: ./docs/8.x/mail.md:828
msgctxt "P"
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail is running, you may access the MailHog interface at: `http://localhost:8025`."
msgstr "若使用 [Laravel Sail](/docs/{{version}}/sail),，則可使用 [MailHog](https://github.com/mailhog/MailHog) 來預覽訊息。當 Sail 有在執行時，可在 `http://localhost:8025` 上存取 MailHog 的界面。"

#: ./docs/8.x/mail.md:830
#: ./docs/9.x/mail.md:1036
#: ./docs/10.x/mail.md:1134
#: ./docs/11.x/mail.md:1264
#: ./docs/master/mail.md:1213
#~ msgctxt "P"
#~ msgid "<a name=\"using-a-global-to-address\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:831
#: ./docs/9.x/mail.md:1037
msgctxt "H4"
msgid "Using A Global `to` Address"
msgstr "使用全域的 `to` 位址"

#: ./docs/8.x/mail.md:833
#: ./docs/9.x/mail.md:1039
#: ./docs/10.x/mail.md:1137
#: ./docs/11.x/mail.md:1267
#: ./docs/master/mail.md:1216
msgctxt "P"
msgid "Finally, you may specify a global \"to\" address by invoking the `alwaysTo` method offered by the `Mail` facade. Typically, this method should be called from the `boot` method of one of your application's service providers:"
msgstr "最後一種方法，就是我們可以叫用 `Mail` Facade 提供的 `alwaysTo` 方法指定一個全域的「to」位址。一般來說，應在專案的其中一個 Service Provider 內 `boot` 方法中呼叫這個方法："

#: ./docs/8.x/mail.md:835
#: ./docs/9.x/mail.md:1041
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:838
#: ./docs/11.x/mail.md:891
#: ./docs/master/mail.md:852
msgctxt "H4"
msgid "Queueing a Mail Message"
msgstr ""

#: ./docs/8.x/mail.md:849
#: ./docs/9.x/mail.md:1055
#: ./docs/10.x/mail.md:1151
#: ./docs/11.x/mail.md:1281
#: ./docs/master/mail.md:1230
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:850
#: ./docs/9.x/mail.md:1056
#: ./docs/10.x/mail.md:1152
#: ./docs/11.x/mail.md:1282
#: ./docs/master/mail.md:1231
msgctxt "H2"
msgid "Events"
msgstr "事件"

#: ./docs/8.x/mail.md:852
#: ./docs/9.x/mail.md:1058
#: ./docs/10.x/mail.md:1154
msgctxt "P"
msgid "Laravel fires two events during the process of sending mail messages. The `MessageSending` event is fired prior to a message being sent, while the `MessageSent` event is fired after a message has been sent. Remember, these events are fired when the mail is being *sent*, not when it is queued. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr "在處理郵件訊息寄送時，Laravel 會觸發兩個事件。`MessageSending` 事件會在寄出郵件前觸發，而`MessageSent` 事件則會在訊息寄出後觸發。請記得，這些事件都是在 *寄送* 郵件的時候出發的，而不是在放入佇列時觸發。可以在 `App\\Providers\\EventServiceProvider` Service Provider 上為這些 Event 註冊 Listener："

#: ./docs/8.x/mail.md:854
msgctxt "CODE"
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"        'App\\Listeners\\LogSendingMessage',\n"
"    ],\n"
"    'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"        'App\\Listeners\\LogSentMessage',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/mail.md:860
#: ./docs/11.x/mail.md:913
#: ./docs/master/mail.md:874
msgctxt "H4"
msgid "Pushing to Specific Queues"
msgstr ""

#: ./docs/10.x/mail.md:874
#: ./docs/11.x/mail.md:927
#: ./docs/master/mail.md:888
msgctxt "H4"
msgid "Queueing by Default"
msgstr ""

#: ./docs/10.x/mail.md:878
#: ./docs/11.x/mail.md:931
#: ./docs/master/mail.md:892
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:886
#: ./docs/11.x/mail.md:939
#: ./docs/master/mail.md:900
msgctxt "H4"
msgid "Queued Mailables and Database Transactions"
msgstr ""

#: ./docs/10.x/mail.md:898
#: ./docs/11.x/mail.md:951
#: ./docs/master/mail.md:912
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:936
#: ./docs/11.x/mail.md:989
#: ./docs/master/mail.md:950
msgctxt "H3"
msgid "Previewing Mailables in the Browser"
msgstr ""

#: ./docs/9.x/mail.md:938
msgctxt "P"
msgid "[Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [Mailpit](https://github.com/axllent/mailpit) or [HELO](https://usehelo.com)."
msgstr "在瀏覽器中預覽 Mailable 時，不會轉譯[內嵌的附件](#inline-attachments)。若要瀏覽有內嵌附件的 Mailable，請將郵件傳送到如 [Mailpit](https://github.com/axllent/mailpit) 或 [HELO](https://usehelo.com) 之類的郵件測試程式。"

#: ./docs/10.x/mail.md:962
#: ./docs/11.x/mail.md:1015
#: ./docs/master/mail.md:976
msgctxt "CODE"
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     */\n"
"    public function preferredLocale(): string\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:978
#: ./docs/10.x/mail.md:985
#: ./docs/11.x/mail.md:1038
#: ./docs/master/mail.md:999
msgctxt "P"
msgid "Laravel provides a variety of methods for inspecting your mailable's structure. In addition, Laravel provides several convenient methods for testing that your mailable contains the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInOrderInHtml`, `assertSeeInText`, `assertDontSeeInText`, `assertSeeInOrderInText`, `assertHasAttachment`, `assertHasAttachedData`, `assertHasAttachmentFromStorage`, and `assertHasAttachmentFromStorageDisk`."
msgstr "Laravel 提供了各種可用來檢查 Mailable 結構的方法。此外，Laravel 還提供了多種方便的方法，可讓你測試 Mailable 是否包含預期的內容。這些測試方法有：`assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInOrderInHtml`, `assertSeeInText`, `assertDontSeeInText`, `assertSeeInOrderInText`, `assertHasAttachment`, `assertHasAttachedData`, `assertHasAttachmentFromStorage`, 與 `assertHasAttachmentFromStorageDisk`。"

#: ./docs/10.x/mail.md:980
#: ./docs/11.x/mail.md:1033
#: ./docs/master/mail.md:994
msgctxt "H2"
msgid "Testing"
msgstr "測試"

#: ./docs/10.x/mail.md:982
#: ./docs/11.x/mail.md:1035
#: ./docs/master/mail.md:996
#~ msgctxt "P"
#~ msgid "<a name=\"testing-mailable-content\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:982
msgctxt "CODE"
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:983
#: ./docs/11.x/mail.md:1036
#: ./docs/master/mail.md:997
msgctxt "H3"
msgid "Testing Mailable Content"
msgstr "測試 Mailable 的內容"

#: ./docs/10.x/mail.md:989
#: ./docs/11.x/mail.md:1075
#: ./docs/master/mail.md:1036
msgctxt "CODE"
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content(): void\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:1024
#: ./docs/11.x/mail.md:1112
#: ./docs/master/mail.md:1073
msgctxt "P"
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. Typically, the content of mailables is not relevant to the code you are testing, and it is sufficient to simply assert that Laravel was instructed to send a given mailable."
msgstr "我們建議將 Mailable 內容與 Mailable 是否已寄送給特定使用者的測試分開來進行。一般來說，Mailable 的內容通常與要測試的程式碼不相關，因此只需要判斷 Laravel 是否有寄送給定的 Mailable 即可。"

#: ./docs/10.x/mail.md:1026
#: ./docs/11.x/mail.md:1114
#: ./docs/master/mail.md:1075
msgctxt "P"
msgid "You may use the `Mail` facade's `fake` method to prevent mail from being sent. After calling the `Mail` facade's `fake` method, you may then assert that mailables were instructed to be sent to users and even inspect the data the mailables received:"
msgstr "可以使用 `Mail` Facade 的 `fake` 方法來防止郵件被寄出。呼叫 `Mail` Facade 的 `fake` 方法後，就可以判斷 Mailable 是否有被寄送給使用者，並檢查 Mailable 中的資料："

#: ./docs/10.x/mail.md:1028
#: ./docs/master/mail.md:1105
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Mail::fake();\n"
"\n"
"        // Perform order shipping...\n"
"\n"
"        // Assert that no mailables were sent...\n"
"        Mail::assertNothingSent();\n"
"\n"
"        // Assert that a mailable was sent...\n"
"        Mail::assertSent(OrderShipped::class);\n"
"\n"
"        // Assert a mailable was sent twice...\n"
"        Mail::assertSent(OrderShipped::class, 2);\n"
"\n"
"        // Assert a mailable was not sent...\n"
"        Mail::assertNotSent(AnotherMailable::class);\n"
"\n"
"        // Assert 3 total mailables were sent...\n"
"        Mail::assertSentCount(3);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1030
#: ./docs/10.x/mail.md:1128
#: ./docs/11.x/mail.md:1258
#: ./docs/master/mail.md:1207
msgctxt "H4"
msgid "HELO / Mailtrap / Mailpit"
msgstr "HELO / Mailtrap / Mailpit"

#: ./docs/9.x/mail.md:1034
#: ./docs/10.x/mail.md:1132
#: ./docs/11.x/mail.md:1262
#: ./docs/master/mail.md:1211
msgctxt "P"
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [Mailpit](https://github.com/axllent/mailpit). When Sail is running, you may access the Mailpit interface at: `http://localhost:8025`."
msgstr "若使用 [Laravel Sail](/docs/{{version}}/sail),，則可使用 [Mailpit](https://github.com/axllent/mailpit) 來預覽訊息。當 Sail 有在執行時，可在 `http://localhost:8025` 上存取 Mailpit  的界面。"

#: ./docs/11.x/mail.md:1042
#: ./docs/master/mail.md:1003
msgctxt "CODE: php tab=Pest"
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"test('mailable content', function () {\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"});"
msgstr ""

#: ./docs/9.x/mail.md:1060
#: ./docs/10.x/mail.md:1156
msgctxt "CODE"
msgid ""
"use App\\Listeners\\LogSendingMessage;\n"
"use App\\Listeners\\LogSentMessage;\n"
"use Illuminate\\Mail\\Events\\MessageSending;\n"
"use Illuminate\\Mail\\Events\\MessageSent;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    MessageSending::class => [\n"
"        LogSendingMessage::class,\n"
"    ],\n"
"\n"
"    MessageSent::class => [\n"
"        LogSentMessage::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/mail.md:1061
#: ./docs/11.x/mail.md:1191
#: ./docs/master/mail.md:1140
msgctxt "P"
msgid "If you are queueing mailables for delivery in the background, you should use the `assertQueued` method instead of `assertSent`:"
msgstr "若要將 Mailable 放在佇列中以在背景寄送，請使用 `assertQueued` 方法來代替 `assertSent` 方法："

#: ./docs/10.x/mail.md:1063
#: ./docs/11.x/mail.md:1193
#: ./docs/master/mail.md:1142
msgctxt "CODE"
msgid ""
"Mail::assertQueued(OrderShipped::class);\n"
"Mail::assertNotQueued(OrderShipped::class);\n"
"Mail::assertNothingQueued();\n"
"Mail::assertQueuedCount(3);"
msgstr ""

#: ./docs/10.x/mail.md:1068
#: ./docs/11.x/mail.md:1198
#: ./docs/master/mail.md:1147
msgctxt "P"
msgid "You may pass a closure to the `assertSent`, `assertNotSent`, `assertQueued`, or `assertNotQueued` methods in order to assert that a mailable was sent that passes a given \"truth test\". If at least one mailable was sent that passes the given truth test then the assertion will be successful:"
msgstr "可以傳入一個閉包給 `assertSent`、`assertNotSent`、`assertQueued`、`assertNotQueued` 方法來判斷 Mailable 是否通過給定的「真值測試 (Truth Test)」。若至少有一個寄出的 Mailable 通過給定的真值測試，則該 Assertion 會被視為成功："

#: ./docs/10.x/mail.md:1070
#: ./docs/11.x/mail.md:1200
#: ./docs/master/mail.md:1149
msgctxt "CODE"
msgid ""
"Mail::assertSent(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});"
msgstr ""

#: ./docs/10.x/mail.md:1074
#: ./docs/11.x/mail.md:1204
#: ./docs/master/mail.md:1153
msgctxt "P"
msgid "When calling the `Mail` facade's assertion methods, the mailable instance accepted by the provided closure exposes helpful methods for examining the mailable:"
msgstr "呼叫 `Mail` Facade 的 Assertion 方法時，所提供的閉包內收到的 Mailable 實體上有一些實用的方法，可用來檢查 Mailable："

#: ./docs/10.x/mail.md:1076
#: ./docs/11.x/mail.md:1206
#: ./docs/master/mail.md:1155
msgctxt "CODE"
msgid ""
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($user) {\n"
"    return $mail->hasTo($user->email) &&\n"
"           $mail->hasCc('...') &&\n"
"           $mail->hasBcc('...') &&\n"
"           $mail->hasReplyTo('...') &&\n"
"           $mail->hasFrom('...') &&\n"
"           $mail->hasSubject('...');\n"
"});"
msgstr ""

#: ./docs/master/mail.md:1077
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"test('orders can be shipped', function () {\n"
"    Mail::fake();\n"
"\n"
"    // Perform order shipping...\n"
"\n"
"    // Assert that no mailables were sent...\n"
"    Mail::assertNothingSent();\n"
"\n"
"    // Assert that a mailable was sent...\n"
"    Mail::assertSent(OrderShipped::class);\n"
"\n"
"    // Assert a mailable was sent twice...\n"
"    Mail::assertSent(OrderShipped::class, 2);\n"
"\n"
"    // Assert a mailable was not sent...\n"
"    Mail::assertNotSent(AnotherMailable::class);\n"
"\n"
"    // Assert 3 total mailables were sent...\n"
"    Mail::assertSentCount(3);\n"
"});"
msgstr ""

#: ./docs/9.x/mail.md:1080
#: ./docs/10.x/mail.md:1176
#: ./docs/11.x/mail.md:1300
#: ./docs/master/mail.md:1249
#~ msgctxt "P"
#~ msgid "<a name=\"custom-transports\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:1081
#: ./docs/10.x/mail.md:1177
#: ./docs/11.x/mail.md:1301
#: ./docs/master/mail.md:1250
msgctxt "H2"
msgid "Custom Transports"
msgstr "自訂 Transport"

#: ./docs/9.x/mail.md:1083
#: ./docs/10.x/mail.md:1179
#: ./docs/11.x/mail.md:1303
#: ./docs/master/mail.md:1252
msgctxt "P"
msgid "Laravel includes a variety of mail transports; however, you may wish to write your own transports to deliver email via other services that Laravel does not support out of the box. To get started, define a class that extends the `Symfony\\Component\\Mailer\\Transport\\AbstractTransport` class. Then, implement the `doSend` and `__toString()` methods on your transport:"
msgstr "Laravel 中包含了許多的 Mail Transport。不過，有時候我們可能會需要撰寫自己的 Transport 來使用 Laravel 預設未支援的其他服務來寄送郵件。要開始撰寫 Transport，請先定義一個繼承了`Symfony\\Component\\Mailer\\Transport\\AbstractTransport` 的類別。接著，請在該 Transport 上實作 `doSend` 與 `__toString()` 方法："

#: ./docs/10.x/mail.md:1085
#: ./docs/11.x/mail.md:1215
#: ./docs/master/mail.md:1164
msgctxt "P"
msgid "The mailable instance also includes several helpful methods for examining the attachments on a mailable:"
msgstr "Mailable 實體也包含了多個實用方法，可用來檢查 Mailable 上的附件："

#: ./docs/9.x/mail.md:1085
msgctxt "CODE"
msgid ""
"use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n"
"\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * The Mailchimp API client.\n"
"     *\n"
"     * @var \\MailchimpTransactional\\ApiClient\n"
"     */\n"
"    protected $client;\n"
"\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     *\n"
"     * @param  \\MailchimpTransactional\\ApiClient  $client\n"
"     * @return void\n"
"     */\n"
"    public function __construct(ApiClient $client)\n"
"    {\n"
"        parent::__construct();\n"
"        \n"
"        $this->client = $client;\n"
"    }\n"
"\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n"
"\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function ($email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:1087
#: ./docs/11.x/mail.md:1217
#: ./docs/master/mail.md:1166
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Mailables\\Attachment;\n"
"\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf')\n"
"    );\n"
"});\n"
"\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"    );\n"
"});\n"
"\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($pdfData) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromData(fn () => $pdfData, 'name.pdf')\n"
"    );\n"
"});"
msgstr ""

#: ./docs/10.x/mail.md:1109
#: ./docs/11.x/mail.md:1239
#: ./docs/master/mail.md:1188
msgctxt "P"
msgid "You may have noticed that there are two methods for asserting that mail was not sent: `assertNotSent` and `assertNotQueued`. Sometimes you may wish to assert that no mail was sent **or** queued. To accomplish this, you may use the `assertNothingOutgoing` and `assertNotOutgoing` methods:"
msgstr "讀者可能已經注意到，總共有兩個方法可用來檢查郵件是否未被送出：`assertNotSent`、`assertNotQueued`。有時候，我們可能會希望判斷沒有任何郵件被寄出，**而且** 也沒有任何郵件被放入佇列。若要判斷是否沒有郵件被寄出或放入佇列，可使用 `assertNothingOutgoing` 與 `assertNotOutgoing` 方法："

#: ./docs/10.x/mail.md:1111
#: ./docs/11.x/mail.md:1241
#: ./docs/master/mail.md:1190
msgctxt "CODE"
msgid ""
"Mail::assertNothingOutgoing();\n"
"\n"
"Mail::assertNotOutgoing(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});"
msgstr ""

#: ./docs/11.x/mail.md:1116
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"test('orders can be shipped', function () {\n"
"    Mail::fake();\n"
"\n"
"    // Perform order shipping...\n"
"\n"
"    // Assert that no mailables were sent...\n"
"    Mail::assertNothingSent();\n"
"\n"
"    // Assert that a mailable was sent...\n"
"    Mail::assertSent(OrderShipped::class);\n"
"\n"
"    // Assert a mailable was sent twice...\n"
"    Mail::assertSent(OrderShipped::class, 2);\n"
"\n"
"    // Assert a mailable was sent to an email address...\n"
"    Mail::assertSent(OrderShipped::class, 'example@laravel.com');\n"
"\n"
"    // Assert a mailable was sent to multiple email addresses...\n"
"    Mail::assertSent(OrderShipped::class, ['example@laravel.com', '...']);\n"
"\n"
"    // Assert a mailable was not sent...\n"
"    Mail::assertNotSent(AnotherMailable::class);\n"
"\n"
"    // Assert 3 total mailables were sent...\n"
"    Mail::assertSentCount(3);\n"
"});"
msgstr ""

#: ./docs/10.x/mail.md:1118
#: ./docs/11.x/mail.md:1248
#: ./docs/master/mail.md:1197
msgctxt "H2"
msgid "Mail and Local Development"
msgstr ""

#: ./docs/10.x/mail.md:1135
#: ./docs/11.x/mail.md:1265
#: ./docs/master/mail.md:1214
msgctxt "H4"
msgid "Using a Global `to` Address"
msgstr ""

#: ./docs/10.x/mail.md:1139
#: ./docs/11.x/mail.md:1269
#: ./docs/master/mail.md:1218
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1140
#: ./docs/10.x/mail.md:1224
#: ./docs/11.x/mail.md:1348
#: ./docs/master/mail.md:1297
msgctxt "P"
msgid "Once you've defined your custom transport, you may register it via the `extend` method provided by the `Mail` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider` service provider. A `$config` argument will be passed to the closure provided to the `extend` method. This argument will contain the configuration array defined for the mailer in the application's `config/mail.php` configuration file:"
msgstr "定義好自訂 Transport 後，就可以使用 `Mail` Facade 的 `extend` 方法來註冊這個 Transport。一般來說，應在 `AppServiceProvider` Service Provider 中 `boot` 方法內註冊這個 Transport。傳給 `extend` 方法的閉包會收到一個 `$config` 引數。這個引數中會包含在專案 `config/mail.php` 內定義給該方法的設定陣列："

#: ./docs/9.x/mail.md:1142
msgctxt "CODE"
msgid ""
"use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(/* ... */);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/mail.md:1150
msgctxt "CODE: php tab=PHPUnit"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Mail::fake();\n"
"\n"
"        // Perform order shipping...\n"
"\n"
"        // Assert that no mailables were sent...\n"
"        Mail::assertNothingSent();\n"
"\n"
"        // Assert that a mailable was sent...\n"
"        Mail::assertSent(OrderShipped::class);\n"
"\n"
"        // Assert a mailable was sent twice...\n"
"        Mail::assertSent(OrderShipped::class, 2);\n"
"\n"
"        // Assert a mailable was sent to an email address...\n"
"        Mail::assertSent(OrderShipped::class, 'example@laravel.com');\n"
"\n"
"        // Assert a mailable was sent to multiple email addresses...\n"
"        Mail::assertSent(OrderShipped::class, ['example@laravel.com', '...']);\n"
"\n"
"        // Assert a mailable was not sent...\n"
"        Mail::assertNotSent(AnotherMailable::class);\n"
"\n"
"        // Assert 3 total mailables were sent...\n"
"        Mail::assertSentCount(3);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1157
#: ./docs/10.x/mail.md:1239
#: ./docs/11.x/mail.md:1363
#: ./docs/master/mail.md:1312
msgctxt "P"
msgid "Once your custom transport has been defined and registered, you may create a mailer definition within your application's `config/mail.php` configuration file that utilizes the new transport:"
msgstr "定義並註冊好自訂 Transport 後，就可以在專案 `config/mail.php` 設定檔內建立一個使用這個新 Transport 的 Mailer 定義："

#: ./docs/9.x/mail.md:1159
#: ./docs/10.x/mail.md:1241
#: ./docs/11.x/mail.md:1365
#: ./docs/master/mail.md:1314
msgctxt "CODE"
msgid ""
"'mailchimp' => [\n"
"    'transport' => 'mailchimp',\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:1164
#: ./docs/10.x/mail.md:1246
#: ./docs/11.x/mail.md:1370
#: ./docs/master/mail.md:1319
#~ msgctxt "P"
#~ msgid "<a name=\"additional-symfony-transports\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:1165
#: ./docs/10.x/mail.md:1247
#: ./docs/11.x/mail.md:1371
#: ./docs/master/mail.md:1320
msgctxt "H3"
msgid "Additional Symfony Transports"
msgstr "額外的 Symfony Transport"

#: ./docs/9.x/mail.md:1167
msgctxt "P"
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Sendinblue\" Symfony mailer:"
msgstr "Laravel 支援一些像是 Mailgun 與 Postmark 等現有 Symfony 維護的 Mail Transport。不過，有時候我們可能會需要讓 Laravel 也支援其他由 Symfony 維護的 Transport。若要讓 Laravel 支援這些 Transport，只要使用 Composer 安裝這些 Symfony Mailer，然後再向 Laravel 註冊這個 Transport。舉例來說，我們可以安裝並註冊「Sendinblue」Symfony Mailer："

#: ./docs/9.x/mail.md:1169
msgctxt "CODE: none"
msgid "composer require symfony/sendinblue-mailer symfony/http-client"
msgstr ""

#: ./docs/9.x/mail.md:1173
msgctxt "P"
msgid "Once the Sendinblue mailer package has been installed, you may add an entry for your Sendinblue API credentials to your application's `services` configuration file:"
msgstr "安裝好 Sendinblue Mailer 套件後，就可以在專案的 `services` 設定檔中加上 Sendinblue 的 API 認證："

#: ./docs/9.x/mail.md:1175
msgctxt "CODE"
msgid ""
"'sendinblue' => [\n"
"    'key' => 'your-api-key',\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:1179
#: ./docs/10.x/mail.md:1261
#: ./docs/11.x/mail.md:1385
#: ./docs/master/mail.md:1334
msgctxt "P"
msgid "Next, you may use the `Mail` facade's `extend` method to register the transport with Laravel. Typically, this should be done within the `boot` method of a service provider:"
msgstr "接著，使用 `Mail` Facade 的 `extend` 方法來向 Laravel 註冊這個 Transport。一般來說，應在某個 Service Provider 內註冊一個 `boot` 方法："

#: ./docs/10.x/mail.md:1181
#: ./docs/11.x/mail.md:1305
#: ./docs/master/mail.md:1254
msgctxt "CODE"
msgid ""
"use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\Address;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n"
"\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected ApiClient $client,\n"
"    ) {\n"
"        parent::__construct();\n"
"    }\n"
"\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n"
"\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function (Address $email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1181
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Sendinblue\\Transport\\SendinblueTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('sendinblue', function () {\n"
"        return (new SendinblueTransportFactory)->create(\n"
"            new Dsn(\n"
"                'sendinblue+api',\n"
"                'default',\n"
"                config('services.sendinblue.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1203
#: ./docs/10.x/mail.md:1283
#: ./docs/11.x/mail.md:1407
#: ./docs/master/mail.md:1356
msgctxt "P"
msgid "Once your transport has been registered, you may create a mailer definition within your application's config/mail.php configuration file that utilizes the new transport:"
msgstr "註冊好 Transport 後，就可以在專案的 config/mail.php 設定檔中建立一個使用這個新 Transport 的 Mailer 定義："

#: ./docs/9.x/mail.md:1205
msgctxt "CODE"
msgid ""
"'sendinblue' => [\n"
"    'transport' => 'sendinblue',\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/10.x/mail.md:1226
#: ./docs/11.x/mail.md:1350
#: ./docs/master/mail.md:1299
msgctxt "CODE"
msgid ""
"use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(/* ... */);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:1249
#: ./docs/11.x/mail.md:1373
#: ./docs/master/mail.md:1322
msgctxt "P"
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Brevo\" (formerly \"Sendinblue\") Symfony mailer:"
msgstr "Laravel 支援一些像是 Mailgun 與 Postmark 等現有 Symfony 維護的 Mail Transport。不過，有時候我們可能會需要讓 Laravel 也支援其他由 Symfony 維護的 Transport。若要讓 Laravel 支援這些 Transport，只要使用 Composer 安裝這些 Symfony Mailer，然後再向 Laravel 註冊這個 Transport。舉例來說，我們可以安裝並註冊「Brevo」(前身為「Sendinblue」) Symfony Mailer："

#: ./docs/10.x/mail.md:1251
#: ./docs/11.x/mail.md:1375
#: ./docs/master/mail.md:1324
msgctxt "CODE: none"
msgid "composer require symfony/brevo-mailer symfony/http-client"
msgstr ""

#: ./docs/10.x/mail.md:1255
#: ./docs/11.x/mail.md:1379
#: ./docs/master/mail.md:1328
msgctxt "P"
msgid "Once the Brevo mailer package has been installed, you may add an entry for your Brevo API credentials to your application's `services` configuration file:"
msgstr "安裝好 Brevo Mailer 套件後，就可以在專案的 `services` 設定檔中加上 Brevo 的 API 認證："

#: ./docs/10.x/mail.md:1257
#: ./docs/11.x/mail.md:1381
#: ./docs/master/mail.md:1330
msgctxt "CODE"
msgid ""
"'brevo' => [\n"
"    'key' => 'your-api-key',\n"
"],"
msgstr ""

#: ./docs/10.x/mail.md:1263
#: ./docs/11.x/mail.md:1387
#: ./docs/master/mail.md:1336
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Brevo\\Transport\\BrevoTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Mail::extend('brevo', function () {\n"
"        return (new BrevoTransportFactory)->create(\n"
"            new Dsn(\n"
"                'brevo+api',\n"
"                'default',\n"
"                config('services.brevo.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/mail.md:1284
#: ./docs/master/mail.md:1233
msgctxt "P"
msgid "Laravel dispatches two events while sending mail messages. The `MessageSending` event is dispatched prior to a message being sent, while the `MessageSent` event is dispatched after a message has been sent. Remember, these events are dispatched when the mail is being *sent*, not when it is queued. You may create [event listeners](/docs/{{version}}/events) for these events within your application:"
msgstr ""

#: ./docs/10.x/mail.md:1285
#: ./docs/11.x/mail.md:1409
#: ./docs/master/mail.md:1358
msgctxt "CODE"
msgid ""
"'brevo' => [\n"
"    'transport' => 'brevo',\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:1286
#: ./docs/master/mail.md:1235
msgctxt "CODE"
msgid ""
"use Illuminate\\Mail\\Events\\MessageSending;\n"
"// use Illuminate\\Mail\\Events\\MessageSent;\n"
"\n"
"class LogMessage\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(MessageSending $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""
