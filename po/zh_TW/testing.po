msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/testing.pot\n"
"X-Crowdin-File-ID: 163\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-04-28 14:52\n"

#: docs/8.x/testing.md:block 1 (header)
msgid "Testing: Getting Started"
msgstr "測試：入門"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Environment](#environment)"
msgstr "[環境](#environment)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Creating Tests](#creating-tests)"
msgstr "[建立測試](#creating-tests)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Running Tests](#running-tests)"
msgstr "[執行測試](#running-tests)"

#: docs/8.x/testing.md:block 2 (unordered list)
msgid "[Running Tests In Parallel](#running-tests-in-parallel)"
msgstr "[平行執行測試](#running-tests-in-parallel)"

#: docs/8.x/testing.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/testing.md:block 5 (paragraph)
msgid "Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr ""

#: docs/8.x/testing.md:block 6 (paragraph)
msgid "By default, your application's `tests` directory contains two directories: `Feature` and `Unit`. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests within your \"Unit\" test directory do not boot your Laravel application and therefore are unable to access your application's database or other framework services."
msgstr ""

#: docs/8.x/testing.md:block 7 (paragraph)
msgid "Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint. **Generally, most of your tests should be feature tests. These types of tests provide the most confidence that your system as a whole is functioning as intended.**"
msgstr ""

#: docs/8.x/testing.md:block 8 (paragraph)
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/phpunit` or `php artisan test` commands to run your tests."
msgstr ""

#: docs/8.x/testing.md:block 10 (header)
msgid "Environment"
msgstr ""

#: docs/8.x/testing.md:block 11 (paragraph)
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver while testing, meaning no session or cache data will be persisted while testing."
msgstr ""

#: docs/8.x/testing.md:block 12 (paragraph)
msgid "You are free to define other testing environment configuration values as necessary. The `testing` environment variables may be configured in your application's `phpunit.xml` file, but make sure to clear your configuration cache using the `config:clear` Artisan command before running your tests!"
msgstr ""

#: docs/8.x/testing.md:block 14 (header)
msgid "The `.env.testing` Environment File"
msgstr ""

#: docs/8.x/testing.md:block 15 (paragraph)
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr ""

#: docs/8.x/testing.md:block 17 (header)
msgid "The `CreatesApplication` Trait"
msgstr ""

#: docs/8.x/testing.md:block 18 (paragraph)
msgid "Laravel includes a `CreatesApplication` trait that is applied to your application's base `TestCase` class. This trait contains a `createApplication` method that bootstraps the Laravel application before running your tests. It's important that you leave this trait at its original location as some features, such as Laravel's parallel testing feature, depend on it."
msgstr ""

#: docs/8.x/testing.md:block 20 (header)
msgid "Creating Tests"
msgstr ""

#: docs/8.x/testing.md:block 21 (paragraph)
msgid "To create a new test case, use the `make:test` Artisan command. By default, tests will be placed in the `tests/Feature` directory:"
msgstr ""

#: docs/8.x/testing.md:block 22 (code)
msgid "php artisan make:test UserTest\n"
msgstr ""

#: docs/8.x/testing.md:block 23 (paragraph)
msgid "If you would like to create a test within the `tests/Unit` directory, you may use the `--unit` option when executing the `make:test` command:"
msgstr ""

#: docs/8.x/testing.md:block 24 (code)
msgid "php artisan make:test UserTest --unit\n"
msgstr ""

#: docs/8.x/testing.md:block 25 (paragraph)
msgid "If you would like to create a [Pest PHP](https://pestphp.com) test, you may provide the `--pest` option to the `make:test` command:"
msgstr ""

#: docs/8.x/testing.md:block 26 (code)
msgid "php artisan make:test UserTest --pest\n"
"php artisan make:test UserTest --unit --pest\n"
msgstr ""

#: docs/8.x/testing.md:block 27 (quote)
msgid "{tip} Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr ""

#: docs/8.x/testing.md:block 28 (paragraph)
msgid "Once the test has been generated, you may define test methods as you normally would using [PHPUnit](https://phpunit.de). To run your tests, execute the `vendor/bin/phpunit` or `php artisan test` command from your terminal:"
msgstr ""

#: docs/8.x/testing.md:block 29 (code)
msgid "<?php\n\n"
"namespace Tests\\Unit;\n\n"
"use PHPUnit\\Framework\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/testing.md:block 30 (quote)
msgid "{note} If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class."
msgstr ""

#: docs/8.x/testing.md:block 32 (header)
msgid "Running Tests"
msgstr ""

#: docs/8.x/testing.md:block 33 (paragraph)
msgid "As mentioned previously, once you've written tests, you may run them using `phpunit`:"
msgstr ""

#: docs/8.x/testing.md:block 34 (code)
msgid "./vendor/bin/phpunit\n"
msgstr ""

#: docs/8.x/testing.md:block 35 (paragraph)
msgid "In addition to the `phpunit` command, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr ""

#: docs/8.x/testing.md:block 36 (code)
msgid "php artisan test\n"
msgstr ""

#: docs/8.x/testing.md:block 37 (paragraph)
msgid "Any arguments that can be passed to the `phpunit` command may also be passed to the Artisan `test` command:"
msgstr ""

#: docs/8.x/testing.md:block 38 (code)
msgid "php artisan test --testsuite=Feature --stop-on-failure\n"
msgstr ""

#: docs/8.x/testing.md:block 40 (header)
msgid "Running Tests In Parallel"
msgstr ""

#: docs/8.x/testing.md:block 41 (paragraph)
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, ensure your application depends on version `^5.3` or greater of the `nunomaduro/collision` package. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#: docs/8.x/testing.md:block 42 (code)
msgid "php artisan test --parallel\n"
msgstr ""

#: docs/8.x/testing.md:block 43 (paragraph)
msgid "By default, Laravel will create as many processes as there are available CPU cores on your machine. However, you may adjust the number of processes using the `--processes` option:"
msgstr ""

#: docs/8.x/testing.md:block 44 (code)
msgid "php artisan test --parallel --processes=4\n"
msgstr ""

#: docs/8.x/testing.md:block 45 (quote)
msgid "{note} When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr ""

#: docs/8.x/testing.md:block 47 (header)
msgid "Parallel Testing & Databases"
msgstr ""

#: docs/8.x/testing.md:block 48 (paragraph)
msgid "Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr ""

#: docs/8.x/testing.md:block 49 (paragraph)
msgid "By default, test databases persist between calls to the `test` Artisan command so that they can be used again by subsequent `test` invocations. However, you may re-create them using the `--recreate-databases` option:"
msgstr ""

#: docs/8.x/testing.md:block 50 (code)
msgid "php artisan test --parallel --recreate-databases\n"
msgstr ""

#: docs/8.x/testing.md:block 52 (header)
msgid "Parallel Testing Hooks"
msgstr ""

#: docs/8.x/testing.md:block 53 (paragraph)
msgid "Occasionally, you may need to prepare certain resources used by your application's tests so they may be safely used by multiple test processes."
msgstr ""

#: docs/8.x/testing.md:block 54 (paragraph)
msgid "Using the `ParallelTesting` facade, you may specify code to be executed on the `setUp` and `tearDown` of a process or test case. The given closures receive the `$token` and `$testCase` variables that contain the process token and the current test case, respectively:"
msgstr ""

#: docs/8.x/testing.md:block 55 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        ParallelTesting::setUpProcess(function ($token) {\n"
"            // ...\n"
"        });\n\n"
"        ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n\n"
"        ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n\n"
"        ParallelTesting::tearDownProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/testing.md:block 57 (header)
msgid "Accessing The Parallel Testing Token"
msgstr ""

#: docs/8.x/testing.md:block 58 (paragraph)
msgid "If you would like to access to current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr ""

#: docs/8.x/testing.md:block 59 (code)
msgid "$token = ParallelTesting::token();\n"
msgstr ""

#: docs/9.x/testing.md:block 2 (unordered list)
msgid "[Reporting Test Coverage](#reporting-test-coverage)"
msgstr ""

#: docs/9.x/testing.md:block 58 (paragraph)
msgid "If you would like to access the current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr ""

#: docs/9.x/testing.md:block 61 (header)
msgid "Reporting Test Coverage"
msgstr ""

#: docs/9.x/testing.md:block 62 (quote)
msgid "{note} This feature requires [Xdebug](https://xdebug.org) or [PCOV](https://pecl.php.net/package/pcov)."
msgstr ""

#: docs/9.x/testing.md:block 63 (paragraph)
msgid "When running your application tests, you may want to determine whether your test cases are actually covering the application code and how much application code is used when running your tests. To accomplish this, you may provide the `--coverage` option when invoking the `test` command:"
msgstr ""

#: docs/9.x/testing.md:block 64 (code)
msgid "php artisan test --coverage\n"
msgstr ""

#: docs/9.x/testing.md:block 66 (header)
msgid "Enforcing A Minimum Coverage Threshold"
msgstr ""

#: docs/9.x/testing.md:block 67 (paragraph)
msgid "You may use the `--min` option to define a minimum test coverage threshold for your application. The test suite will fail if this threshold is not met:"
msgstr ""

#: docs/9.x/testing.md:block 68 (code)
msgid "php artisan test --coverage --min=80.3\n"
msgstr ""

