#
msgid ""
msgstr ""

#: docs/10.x/helpers.md:block 1 (header)
msgid "Helpers"
msgstr ""

#: docs/10.x/helpers.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/helpers.md:block 2 (unordered list)
msgid "[Available Methods](#available-methods)"
msgstr ""

#: docs/10.x/helpers.md:block 2 (unordered list)
msgid "[Other Utilities](#other-utilities)"
msgstr ""

#: docs/10.x/helpers.md:block 2 (unordered list)
msgid "[Benchmarking](#benchmarking)"
msgstr ""

#: docs/10.x/helpers.md:block 2 (unordered list)
msgid "[Lottery](#lottery)"
msgstr ""

#: docs/10.x/helpers.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/helpers.md:block 5 (paragraph)
msgid "Laravel includes a variety of global \"helper\" PHP functions. Many of these functions are used by the framework itself; however, you are free to use them in your own applications if you find them convenient."
msgstr ""

#: docs/10.x/helpers.md:block 7 (header)
msgid "Available Methods"
msgstr ""

#: docs/10.x/helpers.md:block 10 (header)
msgid "Arrays & Objects"
msgstr ""

#: docs/10.x/helpers.md:block 12 (paragraph)
msgid "[Arr::accessible](#method-array-accessible) [Arr::add](#method-array-add) [Arr::collapse](#method-array-collapse) [Arr::crossJoin](#method-array-crossjoin) [Arr::divide](#method-array-divide) [Arr::dot](#method-array-dot) [Arr::except](#method-array-except) [Arr::exists](#method-array-exists) [Arr::first](#method-array-first) [Arr::flatten](#method-array-flatten) [Arr::forget](#method-array-forget) [Arr::get](#method-array-get) [Arr::has](#method-array-has) [Arr::hasAny](#method-array-hasany) [Arr::isAssoc](#method-array-isassoc) [Arr::isList](#method-array-islist) [Arr::join](#method-array-join) [Arr::keyBy](#method-array-keyby) [Arr::last](#method-array-last) [Arr::map](#method-array-map) [Arr::only](#method-array-only) [Arr::pluck](#method-array-pluck) [Arr::prepend](#method-array-prepend) [Arr::prependKeysWith](#method-array-prependkeyswith) [Arr::pull](#method-array-pull) [Arr::query](#method-array-query) [Arr::random](#method-array-random) [Arr::set](#method-array-set) [Arr::shuffle](#method-array-shuffle) [Arr::sort](#method-array-sort) [Arr::sortDesc](#method-array-sort-desc) [Arr::sortRecursive](#method-array-sort-recursive) [Arr::toCssClasses](#method-array-to-css-classes) [Arr::undot](#method-array-undot) [Arr::where](#method-array-where) [Arr::whereNotNull](#method-array-where-not-null) [Arr::wrap](#method-array-wrap) [data_fill](#method-data-fill) [data_get](#method-data-get) [data_set](#method-data-set) [head](#method-head) [last](#method-last)"
msgstr ""

#: docs/10.x/helpers.md:block 15 (header)
msgid "Paths"
msgstr ""

#: docs/10.x/helpers.md:block 17 (paragraph)
msgid "[app_path](#method-app-path) [base_path](#method-base-path) [config_path](#method-config-path) [database_path](#method-database-path) [lang_path](#method-lang-path) [mix](#method-mix) [public_path](#method-public-path) [resource_path](#method-resource-path) [storage_path](#method-storage-path)"
msgstr ""

#: docs/10.x/helpers.md:block 20 (header)
msgid "Strings"
msgstr ""

#: docs/10.x/helpers.md:block 22 (paragraph)
msgid "[__](#method-__) [class_basename](#method-class-basename) [e](#method-e) [preg_replace_array](#method-preg-replace-array) [Str::after](#method-str-after) [Str::afterLast](#method-str-after-last) [Str::ascii](#method-str-ascii) [Str::before](#method-str-before) [Str::beforeLast](#method-str-before-last) [Str::between](#method-str-between) [Str::betweenFirst](#method-str-between-first) [Str::camel](#method-camel-case) [Str::contains](#method-str-contains) [Str::containsAll](#method-str-contains-all) [Str::endsWith](#method-ends-with) [Str::excerpt](#method-excerpt) [Str::finish](#method-str-finish) [Str::headline](#method-str-headline) [Str::inlineMarkdown](#method-str-inline-markdown) [Str::is](#method-str-is) [Str::isAscii](#method-str-is-ascii) [Str::isJson](#method-str-is-json) [Str::isUlid](#method-str-is-ulid) [Str::isUuid](#method-str-is-uuid) [Str::kebab](#method-kebab-case) [Str::lcfirst](#method-str-lcfirst) [Str::length](#method-str-length) [Str::limit](#method-str-limit) [Str::lower](#method-str-lower) [Str::markdown](#method-str-markdown) [Str::mask](#method-str-mask) [Str::orderedUuid](#method-str-ordered-uuid) [Str::padBoth](#method-str-padboth) [Str::padLeft](#method-str-padleft) [Str::padRight](#method-str-padright) [Str::plural](#method-str-plural) [Str::pluralStudly](#method-str-plural-studly) [Str::random](#method-str-random) [Str::remove](#method-str-remove) [Str::replace](#method-str-replace) [Str::replaceArray](#method-str-replace-array) [Str::replaceFirst](#method-str-replace-first) [Str::replaceLast](#method-str-replace-last) [Str::reverse](#method-str-reverse) [Str::singular](#method-str-singular) [Str::slug](#method-str-slug) [Str::snake](#method-snake-case) [Str::squish](#method-str-squish) [Str::start](#method-str-start) [Str::startsWith](#method-starts-with) [Str::studly](#method-studly-case) [Str::substr](#method-str-substr) [Str::substrCount](#method-str-substrcount) [Str::substrReplace](#method-str-substrreplace) [Str::swap](#method-str-swap) [Str::title](#method-title-case) [Str::toHtmlString](#method-str-to-html-string) [Str::ucfirst](#method-str-ucfirst) [Str::ucsplit](#method-str-ucsplit) [Str::upper](#method-str-upper) [Str::ulid](#method-str-ulid) [Str::uuid](#method-str-uuid) [Str::wordCount](#method-str-word-count) [Str::words](#method-str-words) [str](#method-str) [trans](#method-trans) [trans_choice](#method-trans-choice)"
msgstr ""

#: docs/10.x/helpers.md:block 25 (header)
msgid "Fluent Strings"
msgstr ""

#: docs/10.x/helpers.md:block 27 (paragraph)
msgid "[after](#method-fluent-str-after) [afterLast](#method-fluent-str-after-last) [append](#method-fluent-str-append) [ascii](#method-fluent-str-ascii) [basename](#method-fluent-str-basename) [before](#method-fluent-str-before) [beforeLast](#method-fluent-str-before-last) [between](#method-fluent-str-between) [betweenFirst](#method-fluent-str-between-first) [camel](#method-fluent-str-camel) [classBasename](#method-fluent-str-class-basename) [contains](#method-fluent-str-contains) [containsAll](#method-fluent-str-contains-all) [dirname](#method-fluent-str-dirname) [endsWith](#method-fluent-str-ends-with) [excerpt](#method-fluent-str-excerpt) [exactly](#method-fluent-str-exactly) [explode](#method-fluent-str-explode) [finish](#method-fluent-str-finish) [headline](#method-fluent-str-headline) [inlineMarkdown](#method-fluent-str-inline-markdown) [is](#method-fluent-str-is) [isAscii](#method-fluent-str-is-ascii) [isEmpty](#method-fluent-str-is-empty) [isNotEmpty](#method-fluent-str-is-not-empty) [isJson](#method-fluent-str-is-json) [isUlid](#method-fluent-str-is-ulid) [isUuid](#method-fluent-str-is-uuid) [kebab](#method-fluent-str-kebab) [lcfirst](#method-fluent-str-lcfirst) [length](#method-fluent-str-length) [limit](#method-fluent-str-limit) [lower](#method-fluent-str-lower) [ltrim](#method-fluent-str-ltrim) [markdown](#method-fluent-str-markdown) [mask](#method-fluent-str-mask) [match](#method-fluent-str-match) [matchAll](#method-fluent-str-match-all) [newLine](#method-fluent-str-new-line) [padBoth](#method-fluent-str-padboth) [padLeft](#method-fluent-str-padleft) [padRight](#method-fluent-str-padright) [pipe](#method-fluent-str-pipe) [plural](#method-fluent-str-plural) [prepend](#method-fluent-str-prepend) [remove](#method-fluent-str-remove) [replace](#method-fluent-str-replace) [replaceArray](#method-fluent-str-replace-array) [replaceFirst](#method-fluent-str-replace-first) [replaceLast](#method-fluent-str-replace-last) [replaceMatches](#method-fluent-str-replace-matches) [rtrim](#method-fluent-str-rtrim) [scan](#method-fluent-str-scan) [singular](#method-fluent-str-singular) [slug](#method-fluent-str-slug) [snake](#method-fluent-str-snake) [split](#method-fluent-str-split) [squish](#method-fluent-str-squish) [start](#method-fluent-str-start) [startsWith](#method-fluent-str-starts-with) [studly](#method-fluent-str-studly) [substr](#method-fluent-str-substr) [substrReplace](#method-fluent-str-substrreplace) [swap](#method-fluent-str-swap) [tap](#method-fluent-str-tap) [test](#method-fluent-str-test) [title](#method-fluent-str-title) [trim](#method-fluent-str-trim) [ucfirst](#method-fluent-str-ucfirst) [ucsplit](#method-fluent-str-ucsplit) [upper](#method-fluent-str-upper) [when](#method-fluent-str-when) [whenContains](#method-fluent-str-when-contains) [whenContainsAll](#method-fluent-str-when-contains-all) [whenEmpty](#method-fluent-str-when-empty) [whenNotEmpty](#method-fluent-str-when-not-empty) [whenStartsWith](#method-fluent-str-when-starts-with) [whenEndsWith](#method-fluent-str-when-ends-with) [whenExactly](#method-fluent-str-when-exactly) [whenNotExactly](#method-fluent-str-when-not-exactly) [whenIs](#method-fluent-str-when-is) [whenIsAscii](#method-fluent-str-when-is-ascii) [whenIsUlid](#method-fluent-str-when-is-ulid) [whenIsUuid](#method-fluent-str-when-is-uuid) [whenTest](#method-fluent-str-when-test) [wordCount](#method-fluent-str-word-count) [words](#method-fluent-str-words)"
msgstr ""

#: docs/10.x/helpers.md:block 30 (header)
msgid "URLs"
msgstr ""

#: docs/10.x/helpers.md:block 32 (paragraph)
msgid "[action](#method-action) [asset](#method-asset) [route](#method-route) [secure_asset](#method-secure-asset) [secure_url](#method-secure-url) [to_route](#method-to-route) [url](#method-url)"
msgstr ""

#: docs/10.x/helpers.md:block 35 (header)
msgid "Miscellaneous"
msgstr ""

#: docs/10.x/helpers.md:block 37 (paragraph)
msgid "[abort](#method-abort) [abort_if](#method-abort-if) [abort_unless](#method-abort-unless) [app](#method-app) [auth](#method-auth) [back](#method-back) [bcrypt](#method-bcrypt) [blank](#method-blank) [broadcast](#method-broadcast) [cache](#method-cache) [class_uses_recursive](#method-class-uses-recursive) [collect](#method-collect) [config](#method-config) [cookie](#method-cookie) [csrf_field](#method-csrf-field) [csrf_token](#method-csrf-token) [decrypt](#method-decrypt) [dd](#method-dd) [dispatch](#method-dispatch) [dump](#method-dump) [encrypt](#method-encrypt) [env](#method-env) [event](#method-event) [fake](#method-fake) [filled](#method-filled) [info](#method-info) [logger](#method-logger) [method_field](#method-method-field) [now](#method-now) [old](#method-old) [optional](#method-optional) [policy](#method-policy) [redirect](#method-redirect) [report](#method-report) [report_if](#method-report-if) [report_unless](#method-report-unless) [request](#method-request) [rescue](#method-rescue) [resolve](#method-resolve) [response](#method-response) [retry](#method-retry) [session](#method-session) [tap](#method-tap) [throw_if](#method-throw-if) [throw_unless](#method-throw-unless) [today](#method-today) [trait_uses_recursive](#method-trait-uses-recursive) [transform](#method-transform) [validator](#method-validator) [value](#method-value) [view](#method-view) [with](#method-with)"
msgstr ""

#: docs/10.x/helpers.md:block 40 (header)
msgid "Method Listing"
msgstr ""

#: docs/10.x/helpers.md:block 45 (header)
msgid "`Arr::accessible()` {.collection-method .first-collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 46 (paragraph)
msgid "The `Arr::accessible` method determines if the given value is array accessible:"
msgstr ""

#: docs/10.x/helpers.md:block 47 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"use Illuminate\\Support\\Collection;\n"
"\n"
"$isAccessible = Arr::accessible(['a' => 1, 'b' => 2]);\n"
"\n"
"// true\n"
"\n"
"$isAccessible = Arr::accessible(new Collection);\n"
"\n"
"// true\n"
"\n"
"$isAccessible = Arr::accessible('abc');\n"
"\n"
"// false\n"
"\n"
"$isAccessible = Arr::accessible(new stdClass);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 49 (header)
msgid "`Arr::add()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 50 (paragraph)
msgid "The `Arr::add` method adds a given key / value pair to an array if the given key doesn't already exist in the array or is set to `null`:"
msgstr ""

#: docs/10.x/helpers.md:block 51 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = Arr::add(['name' => 'Desk'], 'price', 100);\n"
"\n"
"// ['name' => 'Desk', 'price' => 100]\n"
"\n"
"$array = Arr::add(['name' => 'Desk', 'price' => null], 'price', 100);\n"
"\n"
"// ['name' => 'Desk', 'price' => 100]\n"
msgstr ""

#: docs/10.x/helpers.md:block 53 (header)
msgid "`Arr::collapse()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 54 (paragraph)
msgid "The `Arr::collapse` method collapses an array of arrays into a single array:"
msgstr ""

#: docs/10.x/helpers.md:block 55 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = Arr::collapse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n"
"\n"
"// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
msgstr ""

#: docs/10.x/helpers.md:block 57 (header)
msgid "`Arr::crossJoin()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 58 (paragraph)
msgid "The `Arr::crossJoin` method cross joins the given arrays, returning a Cartesian product with all possible permutations:"
msgstr ""

#: docs/10.x/helpers.md:block 59 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$matrix = Arr::crossJoin([1, 2], ['a', 'b']);\n"
"\n"
"/*\n"
"    [\n"
"        [1, 'a'],\n"
"        [1, 'b'],\n"
"        [2, 'a'],\n"
"        [2, 'b'],\n"
"    ]\n"
"*/\n"
"\n"
"$matrix = Arr::crossJoin([1, 2], ['a', 'b'], ['I', 'II']);\n"
"\n"
"/*\n"
"    [\n"
"        [1, 'a', 'I'],\n"
"        [1, 'a', 'II'],\n"
"        [1, 'b', 'I'],\n"
"        [1, 'b', 'II'],\n"
"        [2, 'a', 'I'],\n"
"        [2, 'a', 'II'],\n"
"        [2, 'b', 'I'],\n"
"        [2, 'b', 'II'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 61 (header)
msgid "`Arr::divide()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 62 (paragraph)
msgid "The `Arr::divide` method returns two arrays: one containing the keys and the other containing the values of the given array:"
msgstr ""

#: docs/10.x/helpers.md:block 63 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"[$keys, $values] = Arr::divide(['name' => 'Desk']);\n"
"\n"
"// $keys: ['name']\n"
"\n"
"// $values: ['Desk']\n"
msgstr ""

#: docs/10.x/helpers.md:block 65 (header)
msgid "`Arr::dot()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 66 (paragraph)
msgid "The `Arr::dot` method flattens a multi-dimensional array into a single level array that uses \"dot\" notation to indicate depth:"
msgstr ""

#: docs/10.x/helpers.md:block 67 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"$flattened = Arr::dot($array);\n"
"\n"
"// ['products.desk.price' => 100]\n"
msgstr ""

#: docs/10.x/helpers.md:block 69 (header)
msgid "`Arr::except()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 70 (paragraph)
msgid "The `Arr::except` method removes the given key / value pairs from an array:"
msgstr ""

#: docs/10.x/helpers.md:block 71 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['name' => 'Desk', 'price' => 100];\n"
"\n"
"$filtered = Arr::except($array, ['price']);\n"
"\n"
"// ['name' => 'Desk']\n"
msgstr ""

#: docs/10.x/helpers.md:block 73 (header)
msgid "`Arr::exists()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 74 (paragraph)
msgid "The `Arr::exists` method checks that the given key exists in the provided array:"
msgstr ""

#: docs/10.x/helpers.md:block 75 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['name' => 'John Doe', 'age' => 17];\n"
"\n"
"$exists = Arr::exists($array, 'name');\n"
"\n"
"// true\n"
"\n"
"$exists = Arr::exists($array, 'salary');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 77 (header)
msgid "`Arr::first()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 78 (paragraph)
msgid "The `Arr::first` method returns the first element of an array passing a given truth test:"
msgstr ""

#: docs/10.x/helpers.md:block 79 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [100, 200, 300];\n"
"\n"
"$first = Arr::first($array, function (int $value, int $key) {\n"
"    return $value >= 150;\n"
"});\n"
"\n"
"// 200\n"
msgstr ""

#: docs/10.x/helpers.md:block 80 (paragraph)
msgid "A default value may also be passed as the third parameter to the method. This value will be returned if no value passes the truth test:"
msgstr ""

#: docs/10.x/helpers.md:block 81 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$first = Arr::first($array, $callback, $default);\n"
msgstr ""

#: docs/10.x/helpers.md:block 83 (header)
msgid "`Arr::flatten()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 84 (paragraph)
msgid "The `Arr::flatten` method flattens a multi-dimensional array into a single level array:"
msgstr ""

#: docs/10.x/helpers.md:block 85 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['name' => 'Joe', 'languages' => ['PHP', 'Ruby']];\n"
"\n"
"$flattened = Arr::flatten($array);\n"
"\n"
"// ['Joe', 'PHP', 'Ruby']\n"
msgstr ""

#: docs/10.x/helpers.md:block 87 (header)
msgid "`Arr::forget()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 88 (paragraph)
msgid "The `Arr::forget` method removes a given key / value pair from a deeply nested array using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 89 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"Arr::forget($array, 'products.desk');\n"
"\n"
"// ['products' => []]\n"
msgstr ""

#: docs/10.x/helpers.md:block 91 (header)
msgid "`Arr::get()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 92 (paragraph)
msgid "The `Arr::get` method retrieves a value from a deeply nested array using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 93 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"$price = Arr::get($array, 'products.desk.price');\n"
"\n"
"// 100\n"
msgstr ""

#: docs/10.x/helpers.md:block 94 (paragraph)
msgid "The `Arr::get` method also accepts a default value, which will be returned if the specified key is not present in the array:"
msgstr ""

#: docs/10.x/helpers.md:block 95 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$discount = Arr::get($array, 'products.desk.discount', 0);\n"
"\n"
"// 0\n"
msgstr ""

#: docs/10.x/helpers.md:block 97 (header)
msgid "`Arr::has()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 98 (paragraph)
msgid "The `Arr::has` method checks whether a given item or items exists in an array using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 99 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['product' => ['name' => 'Desk', 'price' => 100]];\n"
"\n"
"$contains = Arr::has($array, 'product.name');\n"
"\n"
"// true\n"
"\n"
"$contains = Arr::has($array, ['product.price', 'product.discount']);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 101 (header)
msgid "`Arr::hasAny()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 102 (paragraph)
msgid "The `Arr::hasAny` method checks whether any item in a given set exists in an array using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 103 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['product' => ['name' => 'Desk', 'price' => 100]];\n"
"\n"
"$contains = Arr::hasAny($array, 'product.name');\n"
"\n"
"// true\n"
"\n"
"$contains = Arr::hasAny($array, ['product.name', 'product.discount']);\n"
"\n"
"// true\n"
"\n"
"$contains = Arr::hasAny($array, ['category', 'product.discount']);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 105 (header)
msgid "`Arr::isAssoc()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 106 (paragraph)
msgid "The `Arr::isAssoc` method returns `true` if the given array is an associative array. An array is considered \"associative\" if it doesn't have sequential numerical keys beginning with zero:"
msgstr ""

#: docs/10.x/helpers.md:block 107 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$isAssoc = Arr::isAssoc(['product' => ['name' => 'Desk', 'price' => 100]]);\n"
"\n"
"// true\n"
"\n"
"$isAssoc = Arr::isAssoc([1, 2, 3]);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 109 (header)
msgid "`Arr::isList()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 110 (paragraph)
msgid "The `Arr::isList` method returns `true` if the given array's keys are sequential integers beginning from zero:"
msgstr ""

#: docs/10.x/helpers.md:block 111 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$isList = Arr::isList(['foo', 'bar', 'baz']);\n"
"\n"
"// true\n"
"\n"
"$isList = Arr::isList(['product' => ['name' => 'Desk', 'price' => 100]]);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 113 (header)
msgid "`Arr::join()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 114 (paragraph)
msgid "The `Arr::join` method joins array elements with a string. Using this method's second argument, you may also specify the joining string for the final element of the array:"
msgstr ""

#: docs/10.x/helpers.md:block 115 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['Tailwind', 'Alpine', 'Laravel', 'Livewire'];\n"
"\n"
"$joined = Arr::join($array, ', ');\n"
"\n"
"// Tailwind, Alpine, Laravel, Livewire\n"
"\n"
"$joined = Arr::join($array, ', ', ' and ');\n"
"\n"
"// Tailwind, Alpine, Laravel and Livewire\n"
msgstr ""

#: docs/10.x/helpers.md:block 117 (header)
msgid "`Arr::keyBy()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 118 (paragraph)
msgid "The `Arr::keyBy` method keys the array by the given key. If multiple items have the same key, only the last one will appear in the new array:"
msgstr ""

#: docs/10.x/helpers.md:block 119 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"];\n"
"\n"
"$keyed = Arr::keyBy($array, 'product_id');\n"
"\n"
"/*\n"
"    [\n"
"        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 121 (header)
msgid "`Arr::last()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 122 (paragraph)
msgid "The `Arr::last` method returns the last element of an array passing a given truth test:"
msgstr ""

#: docs/10.x/helpers.md:block 123 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [100, 200, 300, 110];\n"
"\n"
"$last = Arr::last($array, function (int $value, int $key) {\n"
"    return $value >= 150;\n"
"});\n"
"\n"
"// 300\n"
msgstr ""

#: docs/10.x/helpers.md:block 124 (paragraph)
msgid "A default value may be passed as the third argument to the method. This value will be returned if no value passes the truth test:"
msgstr ""

#: docs/10.x/helpers.md:block 125 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$last = Arr::last($array, $callback, $default);\n"
msgstr ""

#: docs/10.x/helpers.md:block 127 (header)
msgid "`Arr::map()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 128 (paragraph)
msgid "The `Arr::map` method iterates through the array and passes each value and key to the given callback. The array value is replaced by the value returned by the callback:"
msgstr ""

#: docs/10.x/helpers.md:block 129 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['first' => 'james', 'last' => 'kirk'];\n"
"\n"
"$mapped = Arr::map($array, function (string $value, string $key) {\n"
"    return ucfirst($value);\n"
"});\n"
"\n"
"// ['first' => 'James', 'last' => 'Kirk']\n"
msgstr ""

#: docs/10.x/helpers.md:block 131 (header)
msgid "`Arr::only()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 132 (paragraph)
msgid "The `Arr::only` method returns only the specified key / value pairs from the given array:"
msgstr ""

#: docs/10.x/helpers.md:block 133 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['name' => 'Desk', 'price' => 100, 'orders' => 10];\n"
"\n"
"$slice = Arr::only($array, ['name', 'price']);\n"
"\n"
"// ['name' => 'Desk', 'price' => 100]\n"
msgstr ""

#: docs/10.x/helpers.md:block 135 (header)
msgid "`Arr::pluck()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 136 (paragraph)
msgid "The `Arr::pluck` method retrieves all of the values for a given key from an array:"
msgstr ""

#: docs/10.x/helpers.md:block 137 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['developer' => ['id' => 1, 'name' => 'Taylor']],\n"
"    ['developer' => ['id' => 2, 'name' => 'Abigail']],\n"
"];\n"
"\n"
"$names = Arr::pluck($array, 'developer.name');\n"
"\n"
"// ['Taylor', 'Abigail']\n"
msgstr ""

#: docs/10.x/helpers.md:block 138 (paragraph)
msgid "You may also specify how you wish the resulting list to be keyed:"
msgstr ""

#: docs/10.x/helpers.md:block 139 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$names = Arr::pluck($array, 'developer.name', 'developer.id');\n"
"\n"
"// [1 => 'Taylor', 2 => 'Abigail']\n"
msgstr ""

#: docs/10.x/helpers.md:block 141 (header)
msgid "`Arr::prepend()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 142 (paragraph)
msgid "The `Arr::prepend` method will push an item onto the beginning of an array:"
msgstr ""

#: docs/10.x/helpers.md:block 143 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['one', 'two', 'three', 'four'];\n"
"\n"
"$array = Arr::prepend($array, 'zero');\n"
"\n"
"// ['zero', 'one', 'two', 'three', 'four']\n"
msgstr ""

#: docs/10.x/helpers.md:block 144 (paragraph)
msgid "If needed, you may specify the key that should be used for the value:"
msgstr ""

#: docs/10.x/helpers.md:block 145 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['price' => 100];\n"
"\n"
"$array = Arr::prepend($array, 'Desk', 'name');\n"
"\n"
"// ['name' => 'Desk', 'price' => 100]\n"
msgstr ""

#: docs/10.x/helpers.md:block 147 (header)
msgid "`Arr::prependKeysWith()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 148 (paragraph)
msgid "The `Arr::prependKeysWith` prepends all key names of an associative array with the given prefix:"
msgstr ""

#: docs/10.x/helpers.md:block 149 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    'name' => 'Desk',\n"
"    'price' => 100,\n"
"];\n"
"\n"
"$keyed = Arr::prependKeysWith($array, 'product.');\n"
"\n"
"/*\n"
"    [\n"
"        'product.name' => 'Desk',\n"
"        'product.price' => 100,\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 151 (header)
msgid "`Arr::pull()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 152 (paragraph)
msgid "The `Arr::pull` method returns and removes a key / value pair from an array:"
msgstr ""

#: docs/10.x/helpers.md:block 153 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['name' => 'Desk', 'price' => 100];\n"
"\n"
"$name = Arr::pull($array, 'name');\n"
"\n"
"// $name: Desk\n"
"\n"
"// $array: ['price' => 100]\n"
msgstr ""

#: docs/10.x/helpers.md:block 154 (paragraph)
msgid "A default value may be passed as the third argument to the method. This value will be returned if the key doesn't exist:"
msgstr ""

#: docs/10.x/helpers.md:block 155 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$value = Arr::pull($array, $key, $default);\n"
msgstr ""

#: docs/10.x/helpers.md:block 157 (header)
msgid "`Arr::query()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 158 (paragraph)
msgid "The `Arr::query` method converts the array into a query string:"
msgstr ""

#: docs/10.x/helpers.md:block 159 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    'name' => 'Taylor',\n"
"    'order' => [\n"
"        'column' => 'created_at',\n"
"        'direction' => 'desc'\n"
"    ]\n"
"];\n"
"\n"
"Arr::query($array);\n"
"\n"
"// name=Taylor&order[column]=created_at&order[direction]=desc\n"
msgstr ""

#: docs/10.x/helpers.md:block 161 (header)
msgid "`Arr::random()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 162 (paragraph)
msgid "The `Arr::random` method returns a random value from an array:"
msgstr ""

#: docs/10.x/helpers.md:block 163 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [1, 2, 3, 4, 5];\n"
"\n"
"$random = Arr::random($array);\n"
"\n"
"// 4 - (retrieved randomly)\n"
msgstr ""

#: docs/10.x/helpers.md:block 164 (paragraph)
msgid "You may also specify the number of items to return as an optional second argument. Note that providing this argument will return an array even if only one item is desired:"
msgstr ""

#: docs/10.x/helpers.md:block 165 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$items = Arr::random($array, 2);\n"
"\n"
"// [2, 5] - (retrieved randomly)\n"
msgstr ""

#: docs/10.x/helpers.md:block 167 (header)
msgid "`Arr::set()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 168 (paragraph)
msgid "The `Arr::set` method sets a value within a deeply nested array using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 169 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"Arr::set($array, 'products.desk.price', 200);\n"
"\n"
"// ['products' => ['desk' => ['price' => 200]]]\n"
msgstr ""

#: docs/10.x/helpers.md:block 171 (header)
msgid "`Arr::shuffle()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 172 (paragraph)
msgid "The `Arr::shuffle` method randomly shuffles the items in the array:"
msgstr ""

#: docs/10.x/helpers.md:block 173 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = Arr::shuffle([1, 2, 3, 4, 5]);\n"
"\n"
"// [3, 2, 5, 1, 4] - (generated randomly)\n"
msgstr ""

#: docs/10.x/helpers.md:block 175 (header)
msgid "`Arr::sort()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 176 (paragraph)
msgid "The `Arr::sort` method sorts an array by its values:"
msgstr ""

#: docs/10.x/helpers.md:block 177 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['Desk', 'Table', 'Chair'];\n"
"\n"
"$sorted = Arr::sort($array);\n"
"\n"
"// ['Chair', 'Desk', 'Table']\n"
msgstr ""

#: docs/10.x/helpers.md:block 178 (paragraph)
msgid "You may also sort the array by the results of a given closure:"
msgstr ""

#: docs/10.x/helpers.md:block 179 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['name' => 'Desk'],\n"
"    ['name' => 'Table'],\n"
"    ['name' => 'Chair'],\n"
"];\n"
"\n"
"$sorted = array_values(Arr::sort($array, function (array $value) {\n"
"    return $value['name'];\n"
"}));\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair'],\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Table'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 181 (header)
msgid "`Arr::sortDesc()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 182 (paragraph)
msgid "The `Arr::sortDesc` method sorts an array in descending order by its values:"
msgstr ""

#: docs/10.x/helpers.md:block 183 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['Desk', 'Table', 'Chair'];\n"
"\n"
"$sorted = Arr::sortDesc($array);\n"
"\n"
"// ['Table', 'Desk', 'Chair']\n"
msgstr ""

#: docs/10.x/helpers.md:block 185 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['name' => 'Desk'],\n"
"    ['name' => 'Table'],\n"
"    ['name' => 'Chair'],\n"
"];\n"
"\n"
"$sorted = array_values(Arr::sortDesc($array, function (array $value) {\n"
"    return $value['name'];\n"
"}));\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Table'],\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Chair'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 187 (header)
msgid "`Arr::sortRecursive()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 188 (paragraph)
msgid "The `Arr::sortRecursive` method recursively sorts an array using the `sort` function for numerically indexed sub-arrays and the `ksort` function for associative sub-arrays:"
msgstr ""

#: docs/10.x/helpers.md:block 189 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['Roman', 'Taylor', 'Li'],\n"
"    ['PHP', 'Ruby', 'JavaScript'],\n"
"    ['one' => 1, 'two' => 2, 'three' => 3],\n"
"];\n"
"\n"
"$sorted = Arr::sortRecursive($array);\n"
"\n"
"/*\n"
"    [\n"
"        ['JavaScript', 'PHP', 'Ruby'],\n"
"        ['one' => 1, 'three' => 3, 'two' => 2],\n"
"        ['Li', 'Roman', 'Taylor'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 191 (header)
msgid "`Arr::toCssClasses()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 192 (paragraph)
msgid "The `Arr::toCssClasses` conditionally compiles a CSS class string. The method accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr ""

#: docs/10.x/helpers.md:block 193 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$isActive = false;\n"
"$hasError = true;\n"
"\n"
"$array = ['p-4', 'font-bold' => $isActive, 'bg-red' => $hasError];\n"
"\n"
"$classes = Arr::toCssClasses($array);\n"
"\n"
"/*\n"
"    'p-4 bg-red'\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 194 (paragraph)
msgid "This method powers Laravel's functionality allowing [merging classes with a Blade component's attribute bag](/docs/{{version}}/blade#conditionally-merge-classes) as well as the `@class` [Blade directive](/docs/{{version}}/blade#conditional-classes)."
msgstr ""

#: docs/10.x/helpers.md:block 196 (header)
msgid "`Arr::undot()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 197 (paragraph)
msgid "The `Arr::undot` method expands a single-dimensional array that uses \"dot\" notation into a multi-dimensional array:"
msgstr ""

#: docs/10.x/helpers.md:block 198 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    'user.name' => 'Kevin Malone',\n"
"    'user.occupation' => 'Accountant',\n"
"];\n"
"\n"
"$array = Arr::undot($array);\n"
"\n"
"// ['user' => ['name' => 'Kevin Malone', 'occupation' => 'Accountant']]\n"
msgstr ""

#: docs/10.x/helpers.md:block 200 (header)
msgid "`Arr::where()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 201 (paragraph)
msgid "The `Arr::where` method filters an array using the given closure:"
msgstr ""

#: docs/10.x/helpers.md:block 202 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [100, '200', 300, '400', 500];\n"
"\n"
"$filtered = Arr::where($array, function (string|int $value, int $key) {\n"
"    return is_string($value);\n"
"});\n"
"\n"
"// [1 => '200', 3 => '400']\n"
msgstr ""

#: docs/10.x/helpers.md:block 204 (header)
msgid "`Arr::whereNotNull()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 205 (paragraph)
msgid "The `Arr::whereNotNull` method removes all `null` values from the given array:"
msgstr ""

#: docs/10.x/helpers.md:block 206 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [0, null];\n"
"\n"
"$filtered = Arr::whereNotNull($array);\n"
"\n"
"// [0 => 0]\n"
msgstr ""

#: docs/10.x/helpers.md:block 208 (header)
msgid "`Arr::wrap()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 209 (paragraph)
msgid "The `Arr::wrap` method wraps the given value in an array. If the given value is already an array it will be returned without modification:"
msgstr ""

#: docs/10.x/helpers.md:block 210 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$string = 'Laravel';\n"
"\n"
"$array = Arr::wrap($string);\n"
"\n"
"// ['Laravel']\n"
msgstr ""

#: docs/10.x/helpers.md:block 211 (paragraph)
msgid "If the given value is `null`, an empty array will be returned:"
msgstr ""

#: docs/10.x/helpers.md:block 212 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = Arr::wrap(null);\n"
"\n"
"// []\n"
msgstr ""

#: docs/10.x/helpers.md:block 214 (header)
msgid "`data_fill()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 215 (paragraph)
msgid "The `data_fill` function sets a missing value within a nested array or object using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 216 (code)
msgid ""
"$data = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"data_fill($data, 'products.desk.price', 200);\n"
"\n"
"// ['products' => ['desk' => ['price' => 100]]]\n"
"\n"
"data_fill($data, 'products.desk.discount', 10);\n"
"\n"
"// ['products' => ['desk' => ['price' => 100, 'discount' => 10]]]\n"
msgstr ""

#: docs/10.x/helpers.md:block 217 (paragraph)
msgid "This function also accepts asterisks as wildcards and will fill the target accordingly:"
msgstr ""

#: docs/10.x/helpers.md:block 218 (code)
msgid ""
"$data = [\n"
"    'products' => [\n"
"        ['name' => 'Desk 1', 'price' => 100],\n"
"        ['name' => 'Desk 2'],\n"
"    ],\n"
"];\n"
"\n"
"data_fill($data, 'products.*.price', 200);\n"
"\n"
"/*\n"
"    [\n"
"        'products' => [\n"
"            ['name' => 'Desk 1', 'price' => 100],\n"
"            ['name' => 'Desk 2', 'price' => 200],\n"
"        ],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 220 (header)
msgid "`data_get()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 221 (paragraph)
msgid "The `data_get` function retrieves a value from a nested array or object using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 222 (code)
msgid ""
"$data = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"$price = data_get($data, 'products.desk.price');\n"
"\n"
"// 100\n"
msgstr ""

#: docs/10.x/helpers.md:block 223 (paragraph)
msgid "The `data_get` function also accepts a default value, which will be returned if the specified key is not found:"
msgstr ""

#: docs/10.x/helpers.md:block 224 (code)
msgid ""
"$discount = data_get($data, 'products.desk.discount', 0);\n"
"\n"
"// 0\n"
msgstr ""

#: docs/10.x/helpers.md:block 225 (paragraph)
msgid "The function also accepts wildcards using asterisks, which may target any key of the array or object:"
msgstr ""

#: docs/10.x/helpers.md:block 226 (code)
msgid ""
"$data = [\n"
"    'product-one' => ['name' => 'Desk 1', 'price' => 100],\n"
"    'product-two' => ['name' => 'Desk 2', 'price' => 150],\n"
"];\n"
"\n"
"data_get($data, '*.name');\n"
"\n"
"// ['Desk 1', 'Desk 2'];\n"
msgstr ""

#: docs/10.x/helpers.md:block 228 (header)
msgid "`data_set()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 229 (paragraph)
msgid "The `data_set` function sets a value within a nested array or object using \"dot\" notation:"
msgstr ""

#: docs/10.x/helpers.md:block 230 (code)
msgid ""
"$data = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"data_set($data, 'products.desk.price', 200);\n"
"\n"
"// ['products' => ['desk' => ['price' => 200]]]\n"
msgstr ""

#: docs/10.x/helpers.md:block 231 (paragraph)
msgid "This function also accepts wildcards using asterisks and will set values on the target accordingly:"
msgstr ""

#: docs/10.x/helpers.md:block 232 (code)
msgid ""
"$data = [\n"
"    'products' => [\n"
"        ['name' => 'Desk 1', 'price' => 100],\n"
"        ['name' => 'Desk 2', 'price' => 150],\n"
"    ],\n"
"];\n"
"\n"
"data_set($data, 'products.*.price', 200);\n"
"\n"
"/*\n"
"    [\n"
"        'products' => [\n"
"            ['name' => 'Desk 1', 'price' => 200],\n"
"            ['name' => 'Desk 2', 'price' => 200],\n"
"        ],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/10.x/helpers.md:block 233 (paragraph)
msgid "By default, any existing values are overwritten. If you wish to only set a value if it doesn't exist, you may pass `false` as the fourth argument to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 234 (code)
msgid ""
"$data = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"data_set($data, 'products.desk.price', 200, overwrite: false);\n"
"\n"
"// ['products' => ['desk' => ['price' => 100]]]\n"
msgstr ""

#: docs/10.x/helpers.md:block 236 (header)
msgid "`head()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 237 (paragraph)
msgid "The `head` function returns the first element in the given array:"
msgstr ""

#: docs/10.x/helpers.md:block 238 (code)
msgid ""
"$array = [100, 200, 300];\n"
"\n"
"$first = head($array);\n"
"\n"
"// 100\n"
msgstr ""

#: docs/10.x/helpers.md:block 240 (header)
msgid "`last()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 241 (paragraph)
msgid "The `last` function returns the last element in the given array:"
msgstr ""

#: docs/10.x/helpers.md:block 242 (code)
msgid ""
"$array = [100, 200, 300];\n"
"\n"
"$last = last($array);\n"
"\n"
"// 300\n"
msgstr ""

#: docs/10.x/helpers.md:block 246 (header)
msgid "`app_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 247 (paragraph)
msgid "The `app_path` function returns the fully qualified path to your application's `app` directory. You may also use the `app_path` function to generate a fully qualified path to a file relative to the application directory:"
msgstr ""

#: docs/10.x/helpers.md:block 248 (code)
msgid ""
"$path = app_path();\n"
"\n"
"$path = app_path('Http/Controllers/Controller.php');\n"
msgstr ""

#: docs/10.x/helpers.md:block 250 (header)
msgid "`base_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 251 (paragraph)
msgid "The `base_path` function returns the fully qualified path to your application's root directory. You may also use the `base_path` function to generate a fully qualified path to a given file relative to the project root directory:"
msgstr ""

#: docs/10.x/helpers.md:block 252 (code)
msgid ""
"$path = base_path();\n"
"\n"
"$path = base_path('vendor/bin');\n"
msgstr ""

#: docs/10.x/helpers.md:block 254 (header)
msgid "`config_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 255 (paragraph)
msgid "The `config_path` function returns the fully qualified path to your application's `config` directory. You may also use the `config_path` function to generate a fully qualified path to a given file within the application's configuration directory:"
msgstr ""

#: docs/10.x/helpers.md:block 256 (code)
msgid ""
"$path = config_path();\n"
"\n"
"$path = config_path('app.php');\n"
msgstr ""

#: docs/10.x/helpers.md:block 258 (header)
msgid "`database_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 259 (paragraph)
msgid "The `database_path` function returns the fully qualified path to your application's `database` directory. You may also use the `database_path` function to generate a fully qualified path to a given file within the database directory:"
msgstr ""

#: docs/10.x/helpers.md:block 260 (code)
msgid ""
"$path = database_path();\n"
"\n"
"$path = database_path('factories/UserFactory.php');\n"
msgstr ""

#: docs/10.x/helpers.md:block 262 (header)
msgid "`lang_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 263 (paragraph)
msgid "The `lang_path` function returns the fully qualified path to your application's `lang` directory. You may also use the `lang_path` function to generate a fully qualified path to a given file within the directory:"
msgstr ""

#: docs/10.x/helpers.md:block 264 (code)
msgid ""
"$path = lang_path();\n"
"\n"
"$path = lang_path('en/messages.php');\n"
msgstr ""

#: docs/10.x/helpers.md:block 265 (quote)
msgid "**Note** By default, the Laravel application skeleton does not include the `lang` directory. If you would like to customize Laravel's language files, you may publish them via the `lang:publish` Artisan command."
msgstr ""

#: docs/10.x/helpers.md:block 267 (header)
msgid "`mix()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 268 (paragraph)
msgid "The `mix` function returns the path to a [versioned Mix file](/docs/{{version}}/mix):"
msgstr ""

#: docs/10.x/helpers.md:block 269 (code)
msgid "$path = mix('css/app.css');\n"
msgstr ""

#: docs/10.x/helpers.md:block 271 (header)
msgid "`public_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 272 (paragraph)
msgid "The `public_path` function returns the fully qualified path to your application's `public` directory. You may also use the `public_path` function to generate a fully qualified path to a given file within the public directory:"
msgstr ""

#: docs/10.x/helpers.md:block 273 (code)
msgid ""
"$path = public_path();\n"
"\n"
"$path = public_path('css/app.css');\n"
msgstr ""

#: docs/10.x/helpers.md:block 275 (header)
msgid "`resource_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 276 (paragraph)
msgid "The `resource_path` function returns the fully qualified path to your application's `resources` directory. You may also use the `resource_path` function to generate a fully qualified path to a given file within the resources directory:"
msgstr ""

#: docs/10.x/helpers.md:block 277 (code)
msgid ""
"$path = resource_path();\n"
"\n"
"$path = resource_path('sass/app.scss');\n"
msgstr ""

#: docs/10.x/helpers.md:block 279 (header)
msgid "`storage_path()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 280 (paragraph)
msgid "The `storage_path` function returns the fully qualified path to your application's `storage` directory. You may also use the `storage_path` function to generate a fully qualified path to a given file within the storage directory:"
msgstr ""

#: docs/10.x/helpers.md:block 281 (code)
msgid ""
"$path = storage_path();\n"
"\n"
"$path = storage_path('app/file.txt');\n"
msgstr ""

#: docs/10.x/helpers.md:block 285 (header)
msgid "`__()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 286 (paragraph)
msgid "The `__` function translates the given translation string or translation key using your [language files](/docs/{{version}}/localization):"
msgstr ""

#: docs/10.x/helpers.md:block 287 (code)
msgid ""
"echo __('Welcome to our application');\n"
"\n"
"echo __('messages.welcome');\n"
msgstr ""

#: docs/10.x/helpers.md:block 288 (paragraph)
msgid "If the specified translation string or key does not exist, the `__` function will return the given value. So, using the example above, the `__` function would return `messages.welcome` if that translation key does not exist."
msgstr ""

#: docs/10.x/helpers.md:block 290 (header)
msgid "`class_basename()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 291 (paragraph)
msgid "The `class_basename` function returns the class name of the given class with the class's namespace removed:"
msgstr ""

#: docs/10.x/helpers.md:block 292 (code)
msgid ""
"$class = class_basename('Foo\\Bar\\Baz');\n"
"\n"
"// Baz\n"
msgstr ""

#: docs/10.x/helpers.md:block 294 (header)
msgid "`e()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 295 (paragraph)
msgid "The `e` function runs PHP's `htmlspecialchars` function with the `double_encode` option set to `true` by default:"
msgstr ""

#: docs/10.x/helpers.md:block 296 (code)
msgid ""
"echo e('<html>foo</html>');\n"
"\n"
"// &lt;html&gt;foo&lt;/html&gt;\n"
msgstr ""

#: docs/10.x/helpers.md:block 298 (header)
msgid "`preg_replace_array()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 299 (paragraph)
msgid "The `preg_replace_array` function replaces a given pattern in the string sequentially using an array:"
msgstr ""

#: docs/10.x/helpers.md:block 300 (code)
msgid ""
"$string = 'The event will take place between :start and :end';\n"
"\n"
"$replaced = preg_replace_array('/:[a-z_]+/', ['8:30', '9:00'], $string);\n"
"\n"
"// The event will take place between 8:30 and 9:00\n"
msgstr ""

#: docs/10.x/helpers.md:block 302 (header)
msgid "`Str::after()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 303 (paragraph)
msgid "The `Str::after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/helpers.md:block 304 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::after('This is my name', 'This is');\n"
"\n"
"// ' my name'\n"
msgstr ""

#: docs/10.x/helpers.md:block 306 (header)
msgid "`Str::afterLast()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 307 (paragraph)
msgid "The `Str::afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/helpers.md:block 308 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::afterLast('App\\Http\\Controllers\\Controller', '\\\\');\n"
"\n"
"// 'Controller'\n"
msgstr ""

#: docs/10.x/helpers.md:block 310 (header)
msgid "`Str::ascii()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 311 (paragraph)
msgid "The `Str::ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#: docs/10.x/helpers.md:block 312 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::ascii('û');\n"
"\n"
"// 'u'\n"
msgstr ""

#: docs/10.x/helpers.md:block 314 (header)
msgid "`Str::before()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 315 (paragraph)
msgid "The `Str::before` method returns everything before the given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 316 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::before('This is my name', 'my name');\n"
"\n"
"// 'This is '\n"
msgstr ""

#: docs/10.x/helpers.md:block 318 (header)
msgid "`Str::beforeLast()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 319 (paragraph)
msgid "The `Str::beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 320 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::beforeLast('This is my name', 'is');\n"
"\n"
"// 'This '\n"
msgstr ""

#: docs/10.x/helpers.md:block 322 (header)
msgid "`Str::between()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 323 (paragraph)
msgid "The `Str::between` method returns the portion of a string between two values:"
msgstr ""

#: docs/10.x/helpers.md:block 324 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::between('This is my name', 'This', 'name');\n"
"\n"
"// ' is my '\n"
msgstr ""

#: docs/10.x/helpers.md:block 326 (header)
msgid "`Str::betweenFirst()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 327 (paragraph)
msgid "The `Str::betweenFirst` method returns the smallest possible portion of a string between two values:"
msgstr ""

#: docs/10.x/helpers.md:block 328 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::betweenFirst('[a] bc [d]', '[', ']');\n"
"\n"
"// 'a'\n"
msgstr ""

#: docs/10.x/helpers.md:block 330 (header)
msgid "`Str::camel()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 331 (paragraph)
msgid "The `Str::camel` method converts the given string to `camelCase`:"
msgstr ""

#: docs/10.x/helpers.md:block 332 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::camel('foo_bar');\n"
"\n"
"// fooBar\n"
msgstr ""

#: docs/10.x/helpers.md:block 334 (header)
msgid "`Str::contains()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 335 (paragraph)
msgid "The `Str::contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#: docs/10.x/helpers.md:block 336 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::contains('This is my name', 'my');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 337 (paragraph)
msgid "You may also pass an array of values to determine if the given string contains any of the values in the array:"
msgstr ""

#: docs/10.x/helpers.md:block 338 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::contains('This is my name', ['my', 'foo']);\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 340 (header)
msgid "`Str::containsAll()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 341 (paragraph)
msgid "The `Str::containsAll` method determines if the given string contains all of the values in a given array:"
msgstr ""

#: docs/10.x/helpers.md:block 342 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$containsAll = Str::containsAll('This is my name', ['my', 'name']);\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 344 (header)
msgid "`Str::endsWith()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 345 (paragraph)
msgid "The `Str::endsWith` method determines if the given string ends with the given value:"
msgstr ""

#: docs/10.x/helpers.md:block 346 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::endsWith('This is my name', 'name');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 347 (paragraph)
msgid "You may also pass an array of values to determine if the given string ends with any of the values in the array:"
msgstr ""

#: docs/10.x/helpers.md:block 348 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::endsWith('This is my name', ['name', 'foo']);\n"
"\n"
"// true\n"
"\n"
"$result = Str::endsWith('This is my name', ['this', 'foo']);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 350 (header)
msgid "`Str::excerpt()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 351 (paragraph)
msgid "The `Str::excerpt` method extracts an excerpt from a given string that matches the first instance of a phrase within that string:"
msgstr ""

#: docs/10.x/helpers.md:block 352 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::excerpt('This is my name', 'my', [\n"
"    'radius' => 3\n"
"]);\n"
"\n"
"// '...is my na...'\n"
msgstr ""

#: docs/10.x/helpers.md:block 353 (paragraph)
msgid "The `radius` option, which defaults to `100`, allows you to define the number of characters that should appear on each side of the truncated string."
msgstr ""

#: docs/10.x/helpers.md:block 354 (paragraph)
msgid "In addition, you may use the `omission` option to define the string that will be prepended and appended to the truncated string:"
msgstr ""

#: docs/10.x/helpers.md:block 355 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::excerpt('This is my name', 'name', [\n"
"    'radius' => 3,\n"
"    'omission' => '(...) '\n"
"]);\n"
"\n"
"// '(...) my name'\n"
msgstr ""

#: docs/10.x/helpers.md:block 357 (header)
msgid "`Str::finish()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 358 (paragraph)
msgid "The `Str::finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#: docs/10.x/helpers.md:block 359 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::finish('this/string', '/');\n"
"\n"
"// this/string/\n"
"\n"
"$adjusted = Str::finish('this/string/', '/');\n"
"\n"
"// this/string/\n"
msgstr ""

#: docs/10.x/helpers.md:block 361 (header)
msgid "`Str::headline()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 362 (paragraph)
msgid "The `Str::headline` method will convert strings delimited by casing, hyphens, or underscores into a space delimited string with each word's first letter capitalized:"
msgstr ""

#: docs/10.x/helpers.md:block 363 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$headline = Str::headline('steve_jobs');\n"
"\n"
"// Steve Jobs\n"
"\n"
"$headline = Str::headline('EmailNotificationSent');\n"
"\n"
"// Email Notification Sent\n"
msgstr ""

#: docs/10.x/helpers.md:block 365 (header)
msgid "`Str::inlineMarkdown()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 366 (paragraph)
msgid "The `Str::inlineMarkdown` method converts GitHub flavored Markdown into inline HTML using [CommonMark](https://commonmark.thephpleague.com/). However, unlike the `markdown` method, it does not wrap all generated HTML in a block-level element:"
msgstr ""

#: docs/10.x/helpers.md:block 367 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::inlineMarkdown('**Laravel**');\n"
"\n"
"// <strong>Laravel</strong>\n"
msgstr ""

#: docs/10.x/helpers.md:block 369 (header)
msgid "`Str::is()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 370 (paragraph)
msgid "The `Str::is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values:"
msgstr ""

#: docs/10.x/helpers.md:block 371 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$matches = Str::is('foo*', 'foobar');\n"
"\n"
"// true\n"
"\n"
"$matches = Str::is('baz*', 'foobar');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 373 (header)
msgid "`Str::isAscii()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 374 (paragraph)
msgid "The `Str::isAscii` method determines if a given string is 7 bit ASCII:"
msgstr ""

#: docs/10.x/helpers.md:block 375 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isAscii = Str::isAscii('Taylor');\n"
"\n"
"// true\n"
"\n"
"$isAscii = Str::isAscii('ü');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 377 (header)
msgid "`Str::isJson()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 378 (paragraph)
msgid "The `Str::isJson` method determines if the given string is valid JSON:"
msgstr ""

#: docs/10.x/helpers.md:block 379 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::isJson('[1,2,3]');\n"
"\n"
"// true\n"
"\n"
"$result = Str::isJson('{\"first\": \"John\", \"last\": \"Doe\"}');\n"
"\n"
"// true\n"
"\n"
"$result = Str::isJson('{first: \"John\", last: \"Doe\"}');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 381 (header)
msgid "`Str::isUlid()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 382 (paragraph)
msgid "The `Str::isUlid` method determines if the given string is a valid ULID:"
msgstr ""

#: docs/10.x/helpers.md:block 383 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isUlid = Str::isUlid('01gd6r360bp37zj17nxb55yv40');\n"
"\n"
"// true\n"
"\n"
"$isUlid = Str::isUlid('laravel');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 385 (header)
msgid "`Str::isUuid()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 386 (paragraph)
msgid "The `Str::isUuid` method determines if the given string is a valid UUID:"
msgstr ""

#: docs/10.x/helpers.md:block 387 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$isUuid = Str::isUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de');\n"
"\n"
"// true\n"
"\n"
"$isUuid = Str::isUuid('laravel');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 389 (header)
msgid "`Str::kebab()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 390 (paragraph)
msgid "The `Str::kebab` method converts the given string to `kebab-case`:"
msgstr ""

#: docs/10.x/helpers.md:block 391 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::kebab('fooBar');\n"
"\n"
"// foo-bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 393 (header)
msgid "`Str::lcfirst()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 394 (paragraph)
msgid "The `Str::lcfirst` method returns the given string with the first character lowercased:"
msgstr ""

#: docs/10.x/helpers.md:block 395 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::lcfirst('Foo Bar');\n"
"\n"
"// foo Bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 397 (header)
msgid "`Str::length()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 398 (paragraph)
msgid "The `Str::length` method returns the length of the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 399 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$length = Str::length('Laravel');\n"
"\n"
"// 7\n"
msgstr ""

#: docs/10.x/helpers.md:block 401 (header)
msgid "`Str::limit()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 402 (paragraph)
msgid "The `Str::limit` method truncates the given string to the specified length:"
msgstr ""

#: docs/10.x/helpers.md:block 403 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);\n"
"\n"
"// The quick brown fox...\n"
msgstr ""

#: docs/10.x/helpers.md:block 404 (paragraph)
msgid "You may pass a third argument to the method to change the string that will be appended to the end of the truncated string:"
msgstr ""

#: docs/10.x/helpers.md:block 405 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n"
"\n"
"// The quick brown fox (...)\n"
msgstr ""

#: docs/10.x/helpers.md:block 407 (header)
msgid "`Str::lower()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 408 (paragraph)
msgid "The `Str::lower` method converts the given string to lowercase:"
msgstr ""

#: docs/10.x/helpers.md:block 409 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::lower('LARAVEL');\n"
"\n"
"// laravel\n"
msgstr ""

#: docs/10.x/helpers.md:block 411 (header)
msgid "`Str::markdown()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 412 (paragraph)
msgid "The `Str::markdown` method converts GitHub flavored Markdown into HTML using [CommonMark](https://commonmark.thephpleague.com/):"
msgstr ""

#: docs/10.x/helpers.md:block 413 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::markdown('# Laravel');\n"
"\n"
"// <h1>Laravel</h1>\n"
"\n"
"$html = Str::markdown('# Taylor <b>Otwell</b>', [\n"
"    'html_input' => 'strip',\n"
"]);\n"
"\n"
"// <h1>Taylor Otwell</h1>\n"
msgstr ""

#: docs/10.x/helpers.md:block 415 (header)
msgid "`Str::mask()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 416 (paragraph)
msgid "The `Str::mask` method masks a portion of a string with a repeated character, and may be used to obfuscate segments of strings such as email addresses and phone numbers:"
msgstr ""

#: docs/10.x/helpers.md:block 417 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::mask('taylor@example.com', '*', 3);\n"
"\n"
"// tay***************\n"
msgstr ""

#: docs/10.x/helpers.md:block 418 (paragraph)
msgid "If needed, you provide a negative number as the third argument to the `mask` method, which will instruct the method to begin masking at the given distance from the end of the string:"
msgstr ""

#: docs/10.x/helpers.md:block 419 (code)
msgid ""
"$string = Str::mask('taylor@example.com', '*', -15, 3);\n"
"\n"
"// tay***@example.com\n"
msgstr ""

#: docs/10.x/helpers.md:block 421 (header)
msgid "`Str::orderedUuid()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 422 (paragraph)
msgid "The `Str::orderedUuid` method generates a \"timestamp first\" UUID that may be efficiently stored in an indexed database column. Each UUID that is generated using this method will be sorted after UUIDs previously generated using the method:"
msgstr ""

#: docs/10.x/helpers.md:block 423 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return (string) Str::orderedUuid();\n"
msgstr ""

#: docs/10.x/helpers.md:block 425 (header)
msgid "`Str::padBoth()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 426 (paragraph)
msgid "The `Str::padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches a desired length:"
msgstr ""

#: docs/10.x/helpers.md:block 427 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::padBoth('James', 10, '_');\n"
"\n"
"// '__James___'\n"
"\n"
"$padded = Str::padBoth('James', 10);\n"
"\n"
"// '  James   '\n"
msgstr ""

#: docs/10.x/helpers.md:block 429 (header)
msgid "`Str::padLeft()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 430 (paragraph)
msgid "The `Str::padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches a desired length:"
msgstr ""

#: docs/10.x/helpers.md:block 431 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::padLeft('James', 10, '-=');\n"
"\n"
"// '-=-=-James'\n"
"\n"
"$padded = Str::padLeft('James', 10);\n"
"\n"
"// '     James'\n"
msgstr ""

#: docs/10.x/helpers.md:block 433 (header)
msgid "`Str::padRight()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 434 (paragraph)
msgid "The `Str::padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches a desired length:"
msgstr ""

#: docs/10.x/helpers.md:block 435 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::padRight('James', 10, '-');\n"
"\n"
"// 'James-----'\n"
"\n"
"$padded = Str::padRight('James', 10);\n"
"\n"
"// 'James     '\n"
msgstr ""

#: docs/10.x/helpers.md:block 437 (header)
msgid "`Str::plural()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 438 (paragraph)
msgid "The `Str::plural` method converts a singular word string to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/helpers.md:block 439 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::plural('car');\n"
"\n"
"// cars\n"
"\n"
"$plural = Str::plural('child');\n"
"\n"
"// children\n"
msgstr ""

#: docs/10.x/helpers.md:block 440 (paragraph)
msgid "You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:"
msgstr ""

#: docs/10.x/helpers.md:block 441 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::plural('child', 2);\n"
"\n"
"// children\n"
"\n"
"$singular = Str::plural('child', 1);\n"
"\n"
"// child\n"
msgstr ""

#: docs/10.x/helpers.md:block 443 (header)
msgid "`Str::pluralStudly()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 444 (paragraph)
msgid "The `Str::pluralStudly` method converts a singular word string formatted in studly caps case to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/helpers.md:block 445 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::pluralStudly('VerifiedHuman');\n"
"\n"
"// VerifiedHumans\n"
"\n"
"$plural = Str::pluralStudly('UserFeedback');\n"
"\n"
"// UserFeedback\n"
msgstr ""

#: docs/10.x/helpers.md:block 447 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::pluralStudly('VerifiedHuman', 2);\n"
"\n"
"// VerifiedHumans\n"
"\n"
"$singular = Str::pluralStudly('VerifiedHuman', 1);\n"
"\n"
"// VerifiedHuman\n"
msgstr ""

#: docs/10.x/helpers.md:block 449 (header)
msgid "`Str::random()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 450 (paragraph)
msgid "The `Str::random` method generates a random string of the specified length. This function uses PHP's `random_bytes` function:"
msgstr ""

#: docs/10.x/helpers.md:block 451 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$random = Str::random(40);\n"
msgstr ""

#: docs/10.x/helpers.md:block 453 (header)
msgid "`Str::remove()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 454 (paragraph)
msgid "The `Str::remove` method removes the given value or array of values from the string:"
msgstr ""

#: docs/10.x/helpers.md:block 455 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'Peter Piper picked a peck of pickled peppers.';\n"
"\n"
"$removed = Str::remove('e', $string);\n"
"\n"
"// Ptr Pipr pickd a pck of pickld ppprs.\n"
msgstr ""

#: docs/10.x/helpers.md:block 456 (paragraph)
msgid "You may also pass `false` as a third argument to the `remove` method to ignore case when removing strings."
msgstr ""

#: docs/10.x/helpers.md:block 458 (header)
msgid "`Str::replace()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 459 (paragraph)
msgid "The `Str::replace` method replaces a given string within the string:"
msgstr ""

#: docs/10.x/helpers.md:block 460 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'Laravel 8.x';\n"
"\n"
"$replaced = Str::replace('8.x', '9.x', $string);\n"
"\n"
"// Laravel 9.x\n"
msgstr ""

#: docs/10.x/helpers.md:block 462 (header)
msgid "`Str::replaceArray()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 463 (paragraph)
msgid "The `Str::replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#: docs/10.x/helpers.md:block 464 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'The event will take place between ? and ?';\n"
"\n"
"$replaced = Str::replaceArray('?', ['8:30', '9:00'], $string);\n"
"\n"
"// The event will take place between 8:30 and 9:00\n"
msgstr ""

#: docs/10.x/helpers.md:block 466 (header)
msgid "`Str::replaceFirst()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 467 (paragraph)
msgid "The `Str::replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 468 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceFirst('the', 'a', 'the quick brown fox jumps over the lazy dog');\n"
"\n"
"// a quick brown fox jumps over the lazy dog\n"
msgstr ""

#: docs/10.x/helpers.md:block 470 (header)
msgid "`Str::replaceLast()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 471 (paragraph)
msgid "The `Str::replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 472 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::replaceLast('the', 'a', 'the quick brown fox jumps over the lazy dog');\n"
"\n"
"// the quick brown fox jumps over a lazy dog\n"
msgstr ""

#: docs/10.x/helpers.md:block 474 (header)
msgid "`Str::reverse()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 475 (paragraph)
msgid "The `Str::reverse` method reverses the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 476 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$reversed = Str::reverse('Hello World');\n"
"\n"
"// dlroW olleH\n"
msgstr ""

#: docs/10.x/helpers.md:block 478 (header)
msgid "`Str::singular()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 479 (paragraph)
msgid "The `Str::singular` method converts a string to its singular form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/helpers.md:block 480 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$singular = Str::singular('cars');\n"
"\n"
"// car\n"
"\n"
"$singular = Str::singular('children');\n"
"\n"
"// child\n"
msgstr ""

#: docs/10.x/helpers.md:block 482 (header)
msgid "`Str::slug()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 483 (paragraph)
msgid "The `Str::slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 484 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slug = Str::slug('Laravel 5 Framework', '-');\n"
"\n"
"// laravel-5-framework\n"
msgstr ""

#: docs/10.x/helpers.md:block 486 (header)
msgid "`Str::snake()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 487 (paragraph)
msgid "The `Str::snake` method converts the given string to `snake_case`:"
msgstr ""

#: docs/10.x/helpers.md:block 488 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::snake('fooBar');\n"
"\n"
"// foo_bar\n"
"\n"
"$converted = Str::snake('fooBar', '-');\n"
"\n"
"// foo-bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 490 (header)
msgid "`Str::squish()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 491 (paragraph)
msgid "The `Str::squish` method removes all extraneous white space from a string, including extraneous white space between words:"
msgstr ""

#: docs/10.x/helpers.md:block 492 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::squish('    laravel    framework    ');\n"
"\n"
"// laravel framework\n"
msgstr ""

#: docs/10.x/helpers.md:block 494 (header)
msgid "`Str::start()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 495 (paragraph)
msgid "The `Str::start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#: docs/10.x/helpers.md:block 496 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::start('this/string', '/');\n"
"\n"
"// /this/string\n"
"\n"
"$adjusted = Str::start('/this/string', '/');\n"
"\n"
"// /this/string\n"
msgstr ""

#: docs/10.x/helpers.md:block 498 (header)
msgid "`Str::startsWith()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 499 (paragraph)
msgid "The `Str::startsWith` method determines if the given string begins with the given value:"
msgstr ""

#: docs/10.x/helpers.md:block 500 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::startsWith('This is my name', 'This');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 501 (paragraph)
msgid "If an array of possible values is passed, the `startsWith` method will return `true` if the string begins with any of the given values:"
msgstr ""

#: docs/10.x/helpers.md:block 502 (code)
msgid ""
"$result = Str::startsWith('This is my name', ['This', 'That', 'There']);\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 504 (header)
msgid "`Str::studly()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 505 (paragraph)
msgid "The `Str::studly` method converts the given string to `StudlyCase`:"
msgstr ""

#: docs/10.x/helpers.md:block 506 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::studly('foo_bar');\n"
"\n"
"// FooBar\n"
msgstr ""

#: docs/10.x/helpers.md:block 508 (header)
msgid "`Str::substr()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 509 (paragraph)
msgid "The `Str::substr` method returns the portion of string specified by the start and length parameters:"
msgstr ""

#: docs/10.x/helpers.md:block 510 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::substr('The Laravel Framework', 4, 7);\n"
"\n"
"// Laravel\n"
msgstr ""

#: docs/10.x/helpers.md:block 512 (header)
msgid "`Str::substrCount()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 513 (paragraph)
msgid "The `Str::substrCount` method returns the number of occurrences of a given value in the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 514 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$count = Str::substrCount('If you like ice cream, you will like snow cones.', 'like');\n"
"\n"
"// 2\n"
msgstr ""

#: docs/10.x/helpers.md:block 516 (header)
msgid "`Str::substrReplace()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 517 (paragraph)
msgid "The `Str::substrReplace` method replaces text within a portion of a string, starting at the position specified by the third argument and replacing the number of characters specified by the fourth argument. Passing `0` to the method's fourth argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: docs/10.x/helpers.md:block 518 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::substrReplace('1300', ':', 2);\n"
"// 13:\n"
"\n"
"$result = Str::substrReplace('1300', ':', 2, 0);\n"
"// 13:00\n"
msgstr ""

#: docs/10.x/helpers.md:block 520 (header)
msgid "`Str::swap()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 521 (paragraph)
msgid "The `Str::swap` method replaces multiple values in the given string using PHP's `strtr` function:"
msgstr ""

#: docs/10.x/helpers.md:block 522 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::swap([\n"
"    'Tacos' => 'Burritos',\n"
"    'great' => 'fantastic',\n"
"], 'Tacos are great!');\n"
"\n"
"// Burritos are fantastic!\n"
msgstr ""

#: docs/10.x/helpers.md:block 524 (header)
msgid "`Str::title()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 525 (paragraph)
msgid "The `Str::title` method converts the given string to `Title Case`:"
msgstr ""

#: docs/10.x/helpers.md:block 526 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::title('a nice title uses the correct case');\n"
"\n"
"// A Nice Title Uses The Correct Case\n"
msgstr ""

#: docs/10.x/helpers.md:block 528 (header)
msgid "`Str::toHtmlString()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 529 (paragraph)
msgid "The `Str::toHtmlString` method converts the string instance to an instance of `Illuminate\\Support\\HtmlString`, which may be displayed in Blade templates:"
msgstr ""

#: docs/10.x/helpers.md:block 530 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$htmlString = Str::of('Nuno Maduro')->toHtmlString();\n"
msgstr ""

#: docs/10.x/helpers.md:block 532 (header)
msgid "`Str::ucfirst()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 533 (paragraph)
msgid "The `Str::ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#: docs/10.x/helpers.md:block 534 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::ucfirst('foo bar');\n"
"\n"
"// Foo bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 536 (header)
msgid "`Str::ucsplit()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 537 (paragraph)
msgid "The `Str::ucsplit` method splits the given string into an array by uppercase characters:"
msgstr ""

#: docs/10.x/helpers.md:block 538 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$segments = Str::ucsplit('FooBar');\n"
"\n"
"// [0 => 'Foo', 1 => 'Bar']\n"
msgstr ""

#: docs/10.x/helpers.md:block 540 (header)
msgid "`Str::upper()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 541 (paragraph)
msgid "The `Str::upper` method converts the given string to uppercase:"
msgstr ""

#: docs/10.x/helpers.md:block 542 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::upper('laravel');\n"
"\n"
"// LARAVEL\n"
msgstr ""

#: docs/10.x/helpers.md:block 544 (header)
msgid "`Str::ulid()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 545 (paragraph)
msgid "The `Str::ulid` method generates a ULID:"
msgstr ""

#: docs/10.x/helpers.md:block 546 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return (string) Str::ulid();\n"
"\n"
"// 01gd6r360bp37zj17nxb55yv40\n"
msgstr ""

#: docs/10.x/helpers.md:block 548 (header)
msgid "`Str::uuid()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 549 (paragraph)
msgid "The `Str::uuid` method generates a UUID (version 4):"
msgstr ""

#: docs/10.x/helpers.md:block 550 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return (string) Str::uuid();\n"
msgstr ""

#: docs/10.x/helpers.md:block 552 (header)
msgid "`Str::wordCount()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 553 (paragraph)
msgid "The `Str::wordCount` method returns the number of words that a string contains:"
msgstr ""

#: docs/10.x/helpers.md:block 554 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::wordCount('Hello, world!'); // 2\n"
msgstr ""

#: docs/10.x/helpers.md:block 556 (header)
msgid "`Str::words()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 557 (paragraph)
msgid "The `Str::words` method limits the number of words in a string. An additional string may be passed to this method via its third argument to specify which string should be appended to the end of the truncated string:"
msgstr ""

#: docs/10.x/helpers.md:block 558 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"return Str::words('Perfectly balanced, as all things should be.', 3, ' >>>');\n"
"\n"
"// Perfectly balanced, as >>>\n"
msgstr ""

#: docs/10.x/helpers.md:block 560 (header)
msgid "`str()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 561 (paragraph)
msgid "The `str` function returns a new `Illuminate\\Support\\Stringable` instance of the given string. This function is equivalent to the `Str::of` method:"
msgstr ""

#: docs/10.x/helpers.md:block 562 (code)
msgid ""
"$string = str('Taylor')->append(' Otwell');\n"
"\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/10.x/helpers.md:block 563 (paragraph)
msgid "If no argument is provided to the `str` function, the function returns an instance of `Illuminate\\Support\\Str`:"
msgstr ""

#: docs/10.x/helpers.md:block 564 (code)
msgid ""
"$snake = str()->snake('FooBar');\n"
"\n"
"// 'foo_bar'\n"
msgstr ""

#: docs/10.x/helpers.md:block 566 (header)
msgid "`trans()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 567 (paragraph)
msgid "The `trans` function translates the given translation key using your [language files](/docs/{{version}}/localization):"
msgstr ""

#: docs/10.x/helpers.md:block 568 (code)
msgid "echo trans('messages.welcome');\n"
msgstr ""

#: docs/10.x/helpers.md:block 569 (paragraph)
msgid "If the specified translation key does not exist, the `trans` function will return the given key. So, using the example above, the `trans` function would return `messages.welcome` if the translation key does not exist."
msgstr ""

#: docs/10.x/helpers.md:block 571 (header)
msgid "`trans_choice()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 572 (paragraph)
msgid "The `trans_choice` function translates the given translation key with inflection:"
msgstr ""

#: docs/10.x/helpers.md:block 573 (code)
msgid "echo trans_choice('messages.notifications', $unreadCount);\n"
msgstr ""

#: docs/10.x/helpers.md:block 574 (paragraph)
msgid "If the specified translation key does not exist, the `trans_choice` function will return the given key. So, using the example above, the `trans_choice` function would return `messages.notifications` if the translation key does not exist."
msgstr ""

#: docs/10.x/helpers.md:block 577 (paragraph)
msgid "Fluent strings provide a more fluent, object-oriented interface for working with string values, allowing you to chain multiple string operations together using a more readable syntax compared to traditional string operations."
msgstr ""

#: docs/10.x/helpers.md:block 579 (header)
msgid "`after` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 580 (paragraph)
msgid "The `after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/helpers.md:block 581 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('This is my name')->after('This is');\n"
"\n"
"// ' my name'\n"
msgstr ""

#: docs/10.x/helpers.md:block 583 (header)
msgid "`afterLast` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 584 (paragraph)
msgid "The `afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/helpers.md:block 585 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('App\\Http\\Controllers\\Controller')->afterLast('\\\\');\n"
"\n"
"// 'Controller'\n"
msgstr ""

#: docs/10.x/helpers.md:block 587 (header)
msgid "`append` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 588 (paragraph)
msgid "The `append` method appends the given values to the string:"
msgstr ""

#: docs/10.x/helpers.md:block 589 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Taylor')->append(' Otwell');\n"
"\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/10.x/helpers.md:block 591 (header)
msgid "`ascii` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 592 (paragraph)
msgid "The `ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#: docs/10.x/helpers.md:block 593 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('ü')->ascii();\n"
"\n"
"// 'u'\n"
msgstr ""

#: docs/10.x/helpers.md:block 595 (header)
msgid "`basename` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 596 (paragraph)
msgid "The `basename` method will return the trailing name component of the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 597 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz')->basename();\n"
"\n"
"// 'baz'\n"
msgstr ""

#: docs/10.x/helpers.md:block 598 (paragraph)
msgid "If needed, you may provide an \"extension\" that will be removed from the trailing component:"
msgstr ""

#: docs/10.x/helpers.md:block 599 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz.jpg')->basename('.jpg');\n"
"\n"
"// 'baz'\n"
msgstr ""

#: docs/10.x/helpers.md:block 601 (header)
msgid "`before` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 602 (paragraph)
msgid "The `before` method returns everything before the given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 603 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('This is my name')->before('my name');\n"
"\n"
"// 'This is '\n"
msgstr ""

#: docs/10.x/helpers.md:block 605 (header)
msgid "`beforeLast` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 606 (paragraph)
msgid "The `beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 607 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slice = Str::of('This is my name')->beforeLast('is');\n"
"\n"
"// 'This '\n"
msgstr ""

#: docs/10.x/helpers.md:block 609 (header)
msgid "`between` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 610 (paragraph)
msgid "The `between` method returns the portion of a string between two values:"
msgstr ""

#: docs/10.x/helpers.md:block 611 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('This is my name')->between('This', 'name');\n"
"\n"
"// ' is my '\n"
msgstr ""

#: docs/10.x/helpers.md:block 613 (header)
msgid "`betweenFirst` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 614 (paragraph)
msgid "The `betweenFirst` method returns the smallest possible portion of a string between two values:"
msgstr ""

#: docs/10.x/helpers.md:block 615 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('[a] bc [d]')->betweenFirst('[', ']');\n"
"\n"
"// 'a'\n"
msgstr ""

#: docs/10.x/helpers.md:block 617 (header)
msgid "`camel` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 618 (paragraph)
msgid "The `camel` method converts the given string to `camelCase`:"
msgstr ""

#: docs/10.x/helpers.md:block 619 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('foo_bar')->camel();\n"
"\n"
"// fooBar\n"
msgstr ""

#: docs/10.x/helpers.md:block 621 (header)
msgid "`classBasename` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 622 (paragraph)
msgid "The `classBasename` method returns the class name of the given class with the class's namespace removed:"
msgstr ""

#: docs/10.x/helpers.md:block 623 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$class = Str::of('Foo\\Bar\\Baz')->classBasename();\n"
"\n"
"// Baz\n"
msgstr ""

#: docs/10.x/helpers.md:block 625 (header)
msgid "`contains` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 626 (paragraph)
msgid "The `contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#: docs/10.x/helpers.md:block 627 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::of('This is my name')->contains('my');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 629 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$contains = Str::of('This is my name')->contains(['my', 'foo']);\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 631 (header)
msgid "`containsAll` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 632 (paragraph)
msgid "The `containsAll` method determines if the given string contains all of the values in the given array:"
msgstr ""

#: docs/10.x/helpers.md:block 633 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$containsAll = Str::of('This is my name')->containsAll(['my', 'name']);\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 635 (header)
msgid "`dirname` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 636 (paragraph)
msgid "The `dirname` method returns the parent directory portion of the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 637 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz')->dirname();\n"
"\n"
"// '/foo/bar'\n"
msgstr ""

#: docs/10.x/helpers.md:block 638 (paragraph)
msgid "If necessary, you may specify how many directory levels you wish to trim from the string:"
msgstr ""

#: docs/10.x/helpers.md:block 639 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('/foo/bar/baz')->dirname(2);\n"
"\n"
"// '/foo'\n"
msgstr ""

#: docs/10.x/helpers.md:block 641 (header)
msgid "`excerpt` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 642 (paragraph)
msgid "The `excerpt` method extracts an excerpt from the string that matches the first instance of a phrase within that string:"
msgstr ""

#: docs/10.x/helpers.md:block 643 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::of('This is my name')->excerpt('my', [\n"
"    'radius' => 3\n"
"]);\n"
"\n"
"// '...is my na...'\n"
msgstr ""

#: docs/10.x/helpers.md:block 645 (paragraph)
msgid "In addition, you may use the `omission` option to change the string that will be prepended and appended to the truncated string:"
msgstr ""

#: docs/10.x/helpers.md:block 646 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$excerpt = Str::of('This is my name')->excerpt('name', [\n"
"    'radius' => 3,\n"
"    'omission' => '(...) '\n"
"]);\n"
"\n"
"// '(...) my name'\n"
msgstr ""

#: docs/10.x/helpers.md:block 648 (header)
msgid "`endsWith` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 649 (paragraph)
msgid "The `endsWith` method determines if the given string ends with the given value:"
msgstr ""

#: docs/10.x/helpers.md:block 650 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('This is my name')->endsWith('name');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 652 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('This is my name')->endsWith(['name', 'foo']);\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('This is my name')->endsWith(['this', 'foo']);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 654 (header)
msgid "`exactly` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 655 (paragraph)
msgid "The `exactly` method determines if the given string is an exact match with another string:"
msgstr ""

#: docs/10.x/helpers.md:block 656 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('Laravel')->exactly('Laravel');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 658 (header)
msgid "`explode` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 659 (paragraph)
msgid "The `explode` method splits the string by the given delimiter and returns a collection containing each section of the split string:"
msgstr ""

#: docs/10.x/helpers.md:block 660 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$collection = Str::of('foo bar baz')->explode(' ');\n"
"\n"
"// collect(['foo', 'bar', 'baz'])\n"
msgstr ""

#: docs/10.x/helpers.md:block 662 (header)
msgid "`finish` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 663 (paragraph)
msgid "The `finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#: docs/10.x/helpers.md:block 664 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::of('this/string')->finish('/');\n"
"\n"
"// this/string/\n"
"\n"
"$adjusted = Str::of('this/string/')->finish('/');\n"
"\n"
"// this/string/\n"
msgstr ""

#: docs/10.x/helpers.md:block 666 (header)
msgid "`headline` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 667 (paragraph)
msgid "The `headline` method will convert strings delimited by casing, hyphens, or underscores into a space delimited string with each word's first letter capitalized:"
msgstr ""

#: docs/10.x/helpers.md:block 668 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$headline = Str::of('taylor_otwell')->headline();\n"
"\n"
"// Taylor Otwell\n"
"\n"
"$headline = Str::of('EmailNotificationSent')->headline();\n"
"\n"
"// Email Notification Sent\n"
msgstr ""

#: docs/10.x/helpers.md:block 670 (header)
msgid "`inlineMarkdown` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 671 (paragraph)
msgid "The `inlineMarkdown` method converts GitHub flavored Markdown into inline HTML using [CommonMark](https://commonmark.thephpleague.com/). However, unlike the `markdown` method, it does not wrap all generated HTML in a block-level element:"
msgstr ""

#: docs/10.x/helpers.md:block 672 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::of('**Laravel**')->inlineMarkdown();\n"
"\n"
"// <strong>Laravel</strong>\n"
msgstr ""

#: docs/10.x/helpers.md:block 674 (header)
msgid "`is` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 675 (paragraph)
msgid "The `is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values"
msgstr ""

#: docs/10.x/helpers.md:block 676 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$matches = Str::of('foobar')->is('foo*');\n"
"\n"
"// true\n"
"\n"
"$matches = Str::of('foobar')->is('baz*');\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 678 (header)
msgid "`isAscii` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 679 (paragraph)
msgid "The `isAscii` method determines if a given string is an ASCII string:"
msgstr ""

#: docs/10.x/helpers.md:block 680 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('Taylor')->isAscii();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('ü')->isAscii();\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 682 (header)
msgid "`isEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 683 (paragraph)
msgid "The `isEmpty` method determines if the given string is empty:"
msgstr ""

#: docs/10.x/helpers.md:block 684 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('  ')->trim()->isEmpty();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Laravel')->trim()->isEmpty();\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 686 (header)
msgid "`isNotEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 687 (paragraph)
msgid "The `isNotEmpty` method determines if the given string is not empty:"
msgstr ""

#: docs/10.x/helpers.md:block 688 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('  ')->trim()->isNotEmpty();\n"
"\n"
"// false\n"
"\n"
"$result = Str::of('Laravel')->trim()->isNotEmpty();\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 690 (header)
msgid "`isJson` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 691 (paragraph)
msgid "The `isJson` method determines if a given string is valid JSON:"
msgstr ""

#: docs/10.x/helpers.md:block 692 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('[1,2,3]')->isJson();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('{\"first\": \"John\", \"last\": \"Doe\"}')->isJson();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('{first: \"John\", last: \"Doe\"}')->isJson();\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 694 (header)
msgid "`isUlid` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 695 (paragraph)
msgid "The `isUlid` method determines if a given string is a ULID:"
msgstr ""

#: docs/10.x/helpers.md:block 696 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('01gd6r360bp37zj17nxb55yv40')->isUlid();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Taylor')->isUlid();\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 698 (header)
msgid "`isUuid` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 699 (paragraph)
msgid "The `isUuid` method determines if a given string is a UUID:"
msgstr ""

#: docs/10.x/helpers.md:block 700 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('5ace9ab9-e9cf-4ec6-a19d-5881212a452c')->isUuid();\n"
"\n"
"// true\n"
"\n"
"$result = Str::of('Taylor')->isUuid();\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 702 (header)
msgid "`kebab` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 703 (paragraph)
msgid "The `kebab` method converts the given string to `kebab-case`:"
msgstr ""

#: docs/10.x/helpers.md:block 704 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('fooBar')->kebab();\n"
"\n"
"// foo-bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 706 (header)
msgid "`lcfirst` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 707 (paragraph)
msgid "The `lcfirst` method returns the given string with the first character lowercased:"
msgstr ""

#: docs/10.x/helpers.md:block 708 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Foo Bar')->lcfirst();\n"
"\n"
"// foo Bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 710 (header)
msgid "`length` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 711 (paragraph)
msgid "The `length` method returns the length of the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 712 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$length = Str::of('Laravel')->length();\n"
"\n"
"// 7\n"
msgstr ""

#: docs/10.x/helpers.md:block 714 (header)
msgid "`limit` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 715 (paragraph)
msgid "The `limit` method truncates the given string to the specified length:"
msgstr ""

#: docs/10.x/helpers.md:block 716 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20);\n"
"\n"
"// The quick brown fox...\n"
msgstr ""

#: docs/10.x/helpers.md:block 717 (paragraph)
msgid "You may also pass a second argument to change the string that will be appended to the end of the truncated string:"
msgstr ""

#: docs/10.x/helpers.md:block 718 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20, ' (...)');\n"
"\n"
"// The quick brown fox (...)\n"
msgstr ""

#: docs/10.x/helpers.md:block 720 (header)
msgid "`lower` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 721 (paragraph)
msgid "The `lower` method converts the given string to lowercase:"
msgstr ""

#: docs/10.x/helpers.md:block 722 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('LARAVEL')->lower();\n"
"\n"
"// 'laravel'\n"
msgstr ""

#: docs/10.x/helpers.md:block 724 (header)
msgid "`ltrim` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 725 (paragraph)
msgid "The `ltrim` method trims the left side of the string:"
msgstr ""

#: docs/10.x/helpers.md:block 726 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  Laravel  ')->ltrim();\n"
"\n"
"// 'Laravel  '\n"
"\n"
"$string = Str::of('/Laravel/')->ltrim('/');\n"
"\n"
"// 'Laravel/'\n"
msgstr ""

#: docs/10.x/helpers.md:block 728 (header)
msgid "`markdown` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 729 (paragraph)
msgid "The `markdown` method converts GitHub flavored Markdown into HTML:"
msgstr ""

#: docs/10.x/helpers.md:block 730 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$html = Str::of('# Laravel')->markdown();\n"
"\n"
"// <h1>Laravel</h1>\n"
"\n"
"$html = Str::of('# Taylor <b>Otwell</b>')->markdown([\n"
"    'html_input' => 'strip',\n"
"]);\n"
"\n"
"// <h1>Taylor Otwell</h1>\n"
msgstr ""

#: docs/10.x/helpers.md:block 732 (header)
msgid "`mask` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 733 (paragraph)
msgid "The `mask` method masks a portion of a string with a repeated character, and may be used to obfuscate segments of strings such as email addresses and phone numbers:"
msgstr ""

#: docs/10.x/helpers.md:block 734 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('taylor@example.com')->mask('*', 3);\n"
"\n"
"// tay***************\n"
msgstr ""

#: docs/10.x/helpers.md:block 735 (paragraph)
msgid "If needed, you may provide negative numbers as the third or fourth argument to the `mask` method, which will instruct the method to begin masking at the given distance from the end of the string:"
msgstr ""

#: docs/10.x/helpers.md:block 736 (code)
msgid ""
"$string = Str::of('taylor@example.com')->mask('*', -15, 3);\n"
"\n"
"// tay***@example.com\n"
"\n"
"$string = Str::of('taylor@example.com')->mask('*', 4, -4);\n"
"\n"
"// tayl**********.com\n"
msgstr ""

#: docs/10.x/helpers.md:block 738 (header)
msgid "`match` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 739 (paragraph)
msgid "The `match` method will return the portion of a string that matches a given regular expression pattern:"
msgstr ""

#: docs/10.x/helpers.md:block 740 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('foo bar')->match('/bar/');\n"
"\n"
"// 'bar'\n"
"\n"
"$result = Str::of('foo bar')->match('/foo (.*)/');\n"
"\n"
"// 'bar'\n"
msgstr ""

#: docs/10.x/helpers.md:block 742 (header)
msgid "`matchAll` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 743 (paragraph)
msgid "The `matchAll` method will return a collection containing the portions of a string that match a given regular expression pattern:"
msgstr ""

#: docs/10.x/helpers.md:block 744 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('bar foo bar')->matchAll('/bar/');\n"
"\n"
"// collect(['bar', 'bar'])\n"
msgstr ""

#: docs/10.x/helpers.md:block 745 (paragraph)
msgid "If you specify a matching group within the expression, Laravel will return a collection of that group's matches:"
msgstr ""

#: docs/10.x/helpers.md:block 746 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('bar fun bar fly')->matchAll('/f(\\w*)/');\n"
"\n"
"// collect(['un', 'ly']);\n"
msgstr ""

#: docs/10.x/helpers.md:block 747 (paragraph)
msgid "If no matches are found, an empty collection will be returned."
msgstr ""

#: docs/10.x/helpers.md:block 749 (header)
msgid "`newLine` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 750 (paragraph)
msgid "The `newLine` method appends an \"end of line\" character to a string:"
msgstr ""

#: docs/10.x/helpers.md:block 751 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('Laravel')->newLine()->append('Framework');\n"
"\n"
"// 'Laravel\n"
"//  Framework'\n"
msgstr ""

#: docs/10.x/helpers.md:block 753 (header)
msgid "`padBoth` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 754 (paragraph)
msgid "The `padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches the desired length:"
msgstr ""

#: docs/10.x/helpers.md:block 755 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('James')->padBoth(10, '_');\n"
"\n"
"// '__James___'\n"
"\n"
"$padded = Str::of('James')->padBoth(10);\n"
"\n"
"// '  James   '\n"
msgstr ""

#: docs/10.x/helpers.md:block 757 (header)
msgid "`padLeft` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 758 (paragraph)
msgid "The `padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches the desired length:"
msgstr ""

#: docs/10.x/helpers.md:block 759 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('James')->padLeft(10, '-=');\n"
"\n"
"// '-=-=-James'\n"
"\n"
"$padded = Str::of('James')->padLeft(10);\n"
"\n"
"// '     James'\n"
msgstr ""

#: docs/10.x/helpers.md:block 761 (header)
msgid "`padRight` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 762 (paragraph)
msgid "The `padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches the desired length:"
msgstr ""

#: docs/10.x/helpers.md:block 763 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$padded = Str::of('James')->padRight(10, '-');\n"
"\n"
"// 'James-----'\n"
"\n"
"$padded = Str::of('James')->padRight(10);\n"
"\n"
"// 'James     '\n"
msgstr ""

#: docs/10.x/helpers.md:block 765 (header)
msgid "`pipe` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 766 (paragraph)
msgid "The `pipe` method allows you to transform the string by passing its current value to the given callable:"
msgstr ""

#: docs/10.x/helpers.md:block 767 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$hash = Str::of('Laravel')->pipe('md5')->prepend('Checksum: ');\n"
"\n"
"// 'Checksum: a5c95b86291ea299fcbe64458ed12702'\n"
"\n"
"$closure = Str::of('foo')->pipe(function (Stringable $str) {\n"
"    return 'bar';\n"
"});\n"
"\n"
"// 'bar'\n"
msgstr ""

#: docs/10.x/helpers.md:block 769 (header)
msgid "`plural` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 770 (paragraph)
msgid "The `plural` method converts a singular word string to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/helpers.md:block 771 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::of('car')->plural();\n"
"\n"
"// cars\n"
"\n"
"$plural = Str::of('child')->plural();\n"
"\n"
"// children\n"
msgstr ""

#: docs/10.x/helpers.md:block 773 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$plural = Str::of('child')->plural(2);\n"
"\n"
"// children\n"
"\n"
"$plural = Str::of('child')->plural(1);\n"
"\n"
"// child\n"
msgstr ""

#: docs/10.x/helpers.md:block 775 (header)
msgid "`prepend` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 776 (paragraph)
msgid "The `prepend` method prepends the given values onto the string:"
msgstr ""

#: docs/10.x/helpers.md:block 777 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Framework')->prepend('Laravel ');\n"
"\n"
"// Laravel Framework\n"
msgstr ""

#: docs/10.x/helpers.md:block 779 (header)
msgid "`remove` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 780 (paragraph)
msgid "The `remove` method removes the given value or array of values from the string:"
msgstr ""

#: docs/10.x/helpers.md:block 781 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Arkansas is quite beautiful!')->remove('quite');\n"
"\n"
"// Arkansas is beautiful!\n"
msgstr ""

#: docs/10.x/helpers.md:block 782 (paragraph)
msgid "You may also pass `false` as a second parameter to ignore case when removing strings."
msgstr ""

#: docs/10.x/helpers.md:block 784 (header)
msgid "`replace` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 785 (paragraph)
msgid "The `replace` method replaces a given string within the string:"
msgstr ""

#: docs/10.x/helpers.md:block 786 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('Laravel 6.x')->replace('6.x', '7.x');\n"
"\n"
"// Laravel 7.x\n"
msgstr ""

#: docs/10.x/helpers.md:block 788 (header)
msgid "`replaceArray` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 789 (paragraph)
msgid "The `replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#: docs/10.x/helpers.md:block 790 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = 'The event will take place between ? and ?';\n"
"\n"
"$replaced = Str::of($string)->replaceArray('?', ['8:30', '9:00']);\n"
"\n"
"// The event will take place between 8:30 and 9:00\n"
msgstr ""

#: docs/10.x/helpers.md:block 792 (header)
msgid "`replaceFirst` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 793 (paragraph)
msgid "The `replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 794 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceFirst('the', 'a');\n"
"\n"
"// a quick brown fox jumps over the lazy dog\n"
msgstr ""

#: docs/10.x/helpers.md:block 796 (header)
msgid "`replaceLast` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 797 (paragraph)
msgid "The `replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/helpers.md:block 798 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceLast('the', 'a');\n"
"\n"
"// the quick brown fox jumps over a lazy dog\n"
msgstr ""

#: docs/10.x/helpers.md:block 800 (header)
msgid "`replaceMatches` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 801 (paragraph)
msgid "The `replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string:"
msgstr ""

#: docs/10.x/helpers.md:block 802 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('(+1) 501-555-1000')->replaceMatches('/[^A-Za-z0-9]++/', '')\n"
"\n"
"// '15015551000'\n"
msgstr ""

#: docs/10.x/helpers.md:block 803 (paragraph)
msgid "The `replaceMatches` method also accepts a closure that will be invoked with each portion of the string matching the given pattern, allowing you to perform the replacement logic within the closure and return the replaced value:"
msgstr ""

#: docs/10.x/helpers.md:block 804 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$replaced = Str::of('123')->replaceMatches('/\\d/', function (Stringable $match) {\n"
"    return '['.$match[0].']';\n"
"});\n"
"\n"
"// '[1][2][3]'\n"
msgstr ""

#: docs/10.x/helpers.md:block 806 (header)
msgid "`rtrim` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 807 (paragraph)
msgid "The `rtrim` method trims the right side of the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 808 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  Laravel  ')->rtrim();\n"
"\n"
"// '  Laravel'\n"
"\n"
"$string = Str::of('/Laravel/')->rtrim('/');\n"
"\n"
"// '/Laravel'\n"
msgstr ""

#: docs/10.x/helpers.md:block 810 (header)
msgid "`scan` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 811 (paragraph)
msgid "The `scan` method parses input from a string into a collection according to a format supported by the [`sscanf` PHP function](https://www.php.net/manual/en/function.sscanf.php):"
msgstr ""

#: docs/10.x/helpers.md:block 812 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$collection = Str::of('filename.jpg')->scan('%[^.].%s');\n"
"\n"
"// collect(['filename', 'jpg'])\n"
msgstr ""

#: docs/10.x/helpers.md:block 814 (header)
msgid "`singular` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 815 (paragraph)
msgid "The `singular` method converts a string to its singular form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/helpers.md:block 816 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$singular = Str::of('cars')->singular();\n"
"\n"
"// car\n"
"\n"
"$singular = Str::of('children')->singular();\n"
"\n"
"// child\n"
msgstr ""

#: docs/10.x/helpers.md:block 818 (header)
msgid "`slug` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 819 (paragraph)
msgid "The `slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 820 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$slug = Str::of('Laravel Framework')->slug('-');\n"
"\n"
"// laravel-framework\n"
msgstr ""

#: docs/10.x/helpers.md:block 822 (header)
msgid "`snake` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 823 (paragraph)
msgid "The `snake` method converts the given string to `snake_case`:"
msgstr ""

#: docs/10.x/helpers.md:block 824 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('fooBar')->snake();\n"
"\n"
"// foo_bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 826 (header)
msgid "`split` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 827 (paragraph)
msgid "The `split` method splits a string into a collection using a regular expression:"
msgstr ""

#: docs/10.x/helpers.md:block 828 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$segments = Str::of('one, two, three')->split('/[\\s,]+/');\n"
"\n"
"// collect([\"one\", \"two\", \"three\"])\n"
msgstr ""

#: docs/10.x/helpers.md:block 830 (header)
msgid "`squish` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 831 (paragraph)
msgid "The `squish` method removes all extraneous white space from a string, including extraneous white space between words:"
msgstr ""

#: docs/10.x/helpers.md:block 832 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('    laravel    framework    ')->squish();\n"
"\n"
"// laravel framework\n"
msgstr ""

#: docs/10.x/helpers.md:block 834 (header)
msgid "`start` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 835 (paragraph)
msgid "The `start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#: docs/10.x/helpers.md:block 836 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::of('this/string')->start('/');\n"
"\n"
"// /this/string\n"
"\n"
"$adjusted = Str::of('/this/string')->start('/');\n"
"\n"
"// /this/string\n"
msgstr ""

#: docs/10.x/helpers.md:block 838 (header)
msgid "`startsWith` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 839 (paragraph)
msgid "The `startsWith` method determines if the given string begins with the given value:"
msgstr ""

#: docs/10.x/helpers.md:block 840 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('This is my name')->startsWith('This');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 842 (header)
msgid "`studly` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 843 (paragraph)
msgid "The `studly` method converts the given string to `StudlyCase`:"
msgstr ""

#: docs/10.x/helpers.md:block 844 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('foo_bar')->studly();\n"
"\n"
"// FooBar\n"
msgstr ""

#: docs/10.x/helpers.md:block 846 (header)
msgid "`substr` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 847 (paragraph)
msgid "The `substr` method returns the portion of the string specified by the given start and length parameters:"
msgstr ""

#: docs/10.x/helpers.md:block 848 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Laravel Framework')->substr(8);\n"
"\n"
"// Framework\n"
"\n"
"$string = Str::of('Laravel Framework')->substr(8, 5);\n"
"\n"
"// Frame\n"
msgstr ""

#: docs/10.x/helpers.md:block 850 (header)
msgid "`substrReplace` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 851 (paragraph)
msgid "The `substrReplace` method replaces text within a portion of a string, starting at the position specified by the second argument and replacing the number of characters specified by the third argument. Passing `0` to the method's third argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: docs/10.x/helpers.md:block 852 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('1300')->substrReplace(':', 2);\n"
"\n"
"// 13:\n"
"\n"
"$string = Str::of('The Framework')->substrReplace(' Laravel', 3, 0);\n"
"\n"
"// The Laravel Framework\n"
msgstr ""

#: docs/10.x/helpers.md:block 854 (header)
msgid "`swap` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 855 (paragraph)
msgid "The `swap` method replaces multiple values in the string using PHP's `strtr` function:"
msgstr ""

#: docs/10.x/helpers.md:block 856 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Tacos are great!')\n"
"    ->swap([\n"
"        'Tacos' => 'Burritos',\n"
"        'great' => 'fantastic',\n"
"    ]);\n"
"\n"
"// Burritos are fantastic!\n"
msgstr ""

#: docs/10.x/helpers.md:block 858 (header)
msgid "`tap` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 859 (paragraph)
msgid "The `tap` method passes the string to the given closure, allowing you to examine and interact with the string while not affecting the string itself. The original string is returned by the `tap` method regardless of what is returned by the closure:"
msgstr ""

#: docs/10.x/helpers.md:block 860 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('Laravel')\n"
"    ->append(' Framework')\n"
"    ->tap(function (Stringable $string) {\n"
"        dump('String after append: '.$string);\n"
"    })\n"
"    ->upper();\n"
"\n"
"// LARAVEL FRAMEWORK\n"
msgstr ""

#: docs/10.x/helpers.md:block 862 (header)
msgid "`test` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 863 (paragraph)
msgid "The `test` method determines if a string matches the given regular expression pattern:"
msgstr ""

#: docs/10.x/helpers.md:block 864 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::of('Laravel Framework')->test('/Laravel/');\n"
"\n"
"// true\n"
msgstr ""

#: docs/10.x/helpers.md:block 866 (header)
msgid "`title` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 867 (paragraph)
msgid "The `title` method converts the given string to `Title Case`:"
msgstr ""

#: docs/10.x/helpers.md:block 868 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$converted = Str::of('a nice title uses the correct case')->title();\n"
"\n"
"// A Nice Title Uses The Correct Case\n"
msgstr ""

#: docs/10.x/helpers.md:block 870 (header)
msgid "`trim` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 871 (paragraph)
msgid "The `trim` method trims the given string:"
msgstr ""

#: docs/10.x/helpers.md:block 872 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  Laravel  ')->trim();\n"
"\n"
"// 'Laravel'\n"
"\n"
"$string = Str::of('/Laravel/')->trim('/');\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/helpers.md:block 874 (header)
msgid "`ucfirst` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 875 (paragraph)
msgid "The `ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#: docs/10.x/helpers.md:block 876 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('foo bar')->ucfirst();\n"
"\n"
"// Foo bar\n"
msgstr ""

#: docs/10.x/helpers.md:block 878 (header)
msgid "`ucsplit` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 879 (paragraph)
msgid "The `ucsplit` method splits the given string into a collection by uppercase characters:"
msgstr ""

#: docs/10.x/helpers.md:block 880 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Foo Bar')->ucsplit();\n"
"\n"
"// collect(['Foo', 'Bar'])\n"
msgstr ""

#: docs/10.x/helpers.md:block 882 (header)
msgid "`upper` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 883 (paragraph)
msgid "The `upper` method converts the given string to uppercase:"
msgstr ""

#: docs/10.x/helpers.md:block 884 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$adjusted = Str::of('laravel')->upper();\n"
"\n"
"// LARAVEL\n"
msgstr ""

#: docs/10.x/helpers.md:block 886 (header)
msgid "`when` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 887 (paragraph)
msgid "The `when` method invokes the given closure if a given condition is `true`. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 888 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('Taylor')\n"
"                ->when(true, function (Stringable $string) {\n"
"                    return $string->append(' Otwell');\n"
"                });\n"
"\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/10.x/helpers.md:block 889 (paragraph)
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the condition parameter evaluates to `false`."
msgstr ""

#: docs/10.x/helpers.md:block 891 (header)
msgid "`whenContains` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 892 (paragraph)
msgid "The `whenContains` method invokes the given closure if the string contains the given value. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 893 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains('tony', function (Stringable $string) {\n"
"                return $string->title();\n"
"            });\n"
"\n"
"// 'Tony Stark'\n"
msgstr ""

#: docs/10.x/helpers.md:block 894 (paragraph)
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the string does not contain the given value."
msgstr ""

#: docs/10.x/helpers.md:block 896 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains(['tony', 'hulk'], function (Stringable $string) {\n"
"                return $string->title();\n"
"            });\n"
"\n"
"// Tony Stark\n"
msgstr ""

#: docs/10.x/helpers.md:block 898 (header)
msgid "`whenContainsAll` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 899 (paragraph)
msgid "The `whenContainsAll` method invokes the given closure if the string contains all of the given sub-strings. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 900 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('tony stark')\n"
"                ->whenContainsAll(['tony', 'stark'], function (Stringable $string) {\n"
"                    return $string->title();\n"
"                });\n"
"\n"
"// 'Tony Stark'\n"
msgstr ""

#: docs/10.x/helpers.md:block 903 (header)
msgid "`whenEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 904 (paragraph)
msgid "The `whenEmpty` method invokes the given closure if the string is empty. If the closure returns a value, that value will also be returned by the `whenEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#: docs/10.x/helpers.md:block 905 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('  ')->whenEmpty(function (Stringable $string) {\n"
"    return $string->trim()->prepend('Laravel');\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/helpers.md:block 907 (header)
msgid "`whenNotEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 908 (paragraph)
msgid "The `whenNotEmpty` method invokes the given closure if the string is not empty. If the closure returns a value, that value will also be returned by the `whenNotEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#: docs/10.x/helpers.md:block 909 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('Framework')->whenNotEmpty(function (Stringable $string) {\n"
"    return $string->prepend('Laravel ');\n"
"});\n"
"\n"
"// 'Laravel Framework'\n"
msgstr ""

#: docs/10.x/helpers.md:block 911 (header)
msgid "`whenStartsWith` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 912 (paragraph)
msgid "The `whenStartsWith` method invokes the given closure if the string starts with the given sub-string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 913 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('disney world')->whenStartsWith('disney', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Disney World'\n"
msgstr ""

#: docs/10.x/helpers.md:block 915 (header)
msgid "`whenEndsWith` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 916 (paragraph)
msgid "The `whenEndsWith` method invokes the given closure if the string ends with the given sub-string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 917 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('disney world')->whenEndsWith('world', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Disney World'\n"
msgstr ""

#: docs/10.x/helpers.md:block 919 (header)
msgid "`whenExactly` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 920 (paragraph)
msgid "The `whenExactly` method invokes the given closure if the string exactly matches the given string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 921 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('laravel')->whenExactly('laravel', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/helpers.md:block 923 (header)
msgid "`whenNotExactly` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 924 (paragraph)
msgid "The `whenNotExactly` method invokes the given closure if the string does not exactly match the given string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 925 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('framework')->whenNotExactly('laravel', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Framework'\n"
msgstr ""

#: docs/10.x/helpers.md:block 927 (header)
msgid "`whenIs` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 928 (paragraph)
msgid "The `whenIs` method invokes the given closure if the string matches a given pattern. Asterisks may be used as wildcard values. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 929 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('foo/bar')->whenIs('foo/*', function (Stringable $string) {\n"
"    return $string->append('/baz');\n"
"});\n"
"\n"
"// 'foo/bar/baz'\n"
msgstr ""

#: docs/10.x/helpers.md:block 931 (header)
msgid "`whenIsAscii` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 932 (paragraph)
msgid "The `whenIsAscii` method invokes the given closure if the string is 7 bit ASCII. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 933 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('laravel')->whenIsAscii(function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/helpers.md:block 935 (header)
msgid "`whenIsUlid` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 936 (paragraph)
msgid "The `whenIsUlid` method invokes the given closure if the string is a valid ULID. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 937 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('01gd6r360bp37zj17nxb55yv40')->whenIsUlid(function (Stringable $string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// '01gd6r36'\n"
msgstr ""

#: docs/10.x/helpers.md:block 939 (header)
msgid "`whenIsUuid` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 940 (paragraph)
msgid "The `whenIsUuid` method invokes the given closure if the string is a valid UUID. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 941 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('a0a2a2d2-0b87-4a18-83f2-2529882be2de')->whenIsUuid(function (Stringable $string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// 'a0a2a2d2'\n"
msgstr ""

#: docs/10.x/helpers.md:block 943 (header)
msgid "`whenTest` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 944 (paragraph)
msgid "The `whenTest` method invokes the given closure if the string matches the given regular expression. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/helpers.md:block 945 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n"
"\n"
"$string = Str::of('laravel framework')->whenTest('/laravel/', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel Framework'\n"
msgstr ""

#: docs/10.x/helpers.md:block 947 (header)
msgid "`wordCount` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 948 (paragraph)
msgid "The `wordCount` method returns the number of words that a string contains:"
msgstr ""

#: docs/10.x/helpers.md:block 949 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Str::of('Hello, world!')->wordCount(); // 2\n"
msgstr ""

#: docs/10.x/helpers.md:block 951 (header)
msgid "`words` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 952 (paragraph)
msgid "The `words` method limits the number of words in a string. If necessary, you may specify an additional string that will be appended to the truncated string:"
msgstr ""

#: docs/10.x/helpers.md:block 953 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Perfectly balanced, as all things should be.')->words(3, ' >>>');\n"
"\n"
"// Perfectly balanced, as >>>\n"
msgstr ""

#: docs/10.x/helpers.md:block 957 (header)
msgid "`action()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 958 (paragraph)
msgid "The `action` function generates a URL for the given controller action:"
msgstr ""

#: docs/10.x/helpers.md:block 959 (code)
msgid ""
"use App\\Http\\Controllers\\HomeController;\n"
"\n"
"$url = action([HomeController::class, 'index']);\n"
msgstr ""

#: docs/10.x/helpers.md:block 960 (paragraph)
msgid "If the method accepts route parameters, you may pass them as the second argument to the method:"
msgstr ""

#: docs/10.x/helpers.md:block 961 (code)
msgid "$url = action([UserController::class, 'profile'], ['id' => 1]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 963 (header)
msgid "`asset()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 964 (paragraph)
msgid "The `asset` function generates a URL for an asset using the current scheme of the request (HTTP or HTTPS):"
msgstr ""

#: docs/10.x/helpers.md:block 965 (code)
msgid "$url = asset('img/photo.jpg');\n"
msgstr ""

#: docs/10.x/helpers.md:block 966 (paragraph)
msgid "You can configure the asset URL host by setting the `ASSET_URL` variable in your `.env` file. This can be useful if you host your assets on an external service like Amazon S3 or another CDN:"
msgstr ""

#: docs/10.x/helpers.md:block 967 (code)
msgid ""
"// ASSET_URL=http://example.com/assets\n"
"\n"
"$url = asset('img/photo.jpg'); // http://example.com/assets/img/photo.jpg\n"
msgstr ""

#: docs/10.x/helpers.md:block 969 (header)
msgid "`route()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 970 (paragraph)
msgid "The `route` function generates a URL for a given [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#: docs/10.x/helpers.md:block 971 (code)
msgid "$url = route('route.name');\n"
msgstr ""

#: docs/10.x/helpers.md:block 972 (paragraph)
msgid "If the route accepts parameters, you may pass them as the second argument to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 973 (code)
msgid "$url = route('route.name', ['id' => 1]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 974 (paragraph)
msgid "By default, the `route` function generates an absolute URL. If you wish to generate a relative URL, you may pass `false` as the third argument to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 975 (code)
msgid "$url = route('route.name', ['id' => 1], false);\n"
msgstr ""

#: docs/10.x/helpers.md:block 977 (header)
msgid "`secure_asset()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 978 (paragraph)
msgid "The `secure_asset` function generates a URL for an asset using HTTPS:"
msgstr ""

#: docs/10.x/helpers.md:block 979 (code)
msgid "$url = secure_asset('img/photo.jpg');\n"
msgstr ""

#: docs/10.x/helpers.md:block 981 (header)
msgid "`secure_url()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 982 (paragraph)
msgid "The `secure_url` function generates a fully qualified HTTPS URL to the given path. Additional URL segments may be passed in the function's second argument:"
msgstr ""

#: docs/10.x/helpers.md:block 983 (code)
msgid ""
"$url = secure_url('user/profile');\n"
"\n"
"$url = secure_url('user/profile', [1]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 985 (header)
msgid "`to_route()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 986 (paragraph)
msgid "The `to_route` function generates a [redirect HTTP response](/docs/{{version}}/responses#redirects) for a given [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#: docs/10.x/helpers.md:block 987 (code)
msgid "return to_route('users.show', ['user' => 1]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 988 (paragraph)
msgid "If necessary, you may pass the HTTP status code that should be assigned to the redirect and any additional response headers as the third and fourth arguments to the `to_route` method:"
msgstr ""

#: docs/10.x/helpers.md:block 989 (code)
msgid "return to_route('users.show', ['user' => 1], 302, ['X-Framework' => 'Laravel']);\n"
msgstr ""

#: docs/10.x/helpers.md:block 991 (header)
msgid "`url()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 992 (paragraph)
msgid "The `url` function generates a fully qualified URL to the given path:"
msgstr ""

#: docs/10.x/helpers.md:block 993 (code)
msgid ""
"$url = url('user/profile');\n"
"\n"
"$url = url('user/profile', [1]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 994 (paragraph)
msgid "If no path is provided, an `Illuminate\\Routing\\UrlGenerator` instance is returned:"
msgstr ""

#: docs/10.x/helpers.md:block 995 (code)
msgid ""
"$current = url()->current();\n"
"\n"
"$full = url()->full();\n"
"\n"
"$previous = url()->previous();\n"
msgstr ""

#: docs/10.x/helpers.md:block 999 (header)
msgid "`abort()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1000 (paragraph)
msgid "The `abort` function throws [an HTTP exception](/docs/{{version}}/errors#http-exceptions) which will be rendered by the [exception handler](/docs/{{version}}/errors#the-exception-handler):"
msgstr ""

#: docs/10.x/helpers.md:block 1001 (code)
msgid "abort(403);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1002 (paragraph)
msgid "You may also provide the exception's message and custom HTTP response headers that should be sent to the browser:"
msgstr ""

#: docs/10.x/helpers.md:block 1003 (code)
msgid "abort(403, 'Unauthorized.', $headers);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1005 (header)
msgid "`abort_if()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1006 (paragraph)
msgid "The `abort_if` function throws an HTTP exception if a given boolean expression evaluates to `true`:"
msgstr ""

#: docs/10.x/helpers.md:block 1007 (code)
msgid "abort_if(! Auth::user()->isAdmin(), 403);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1008 (paragraph)
msgid "Like the `abort` method, you may also provide the exception's response text as the third argument and an array of custom response headers as the fourth argument to the function."
msgstr ""

#: docs/10.x/helpers.md:block 1010 (header)
msgid "`abort_unless()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1011 (paragraph)
msgid "The `abort_unless` function throws an HTTP exception if a given boolean expression evaluates to `false`:"
msgstr ""

#: docs/10.x/helpers.md:block 1012 (code)
msgid "abort_unless(Auth::user()->isAdmin(), 403);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1015 (header)
msgid "`app()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1016 (paragraph)
msgid "The `app` function returns the [service container](/docs/{{version}}/container) instance:"
msgstr ""

#: docs/10.x/helpers.md:block 1017 (code)
msgid "$container = app();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1018 (paragraph)
msgid "You may pass a class or interface name to resolve it from the container:"
msgstr ""

#: docs/10.x/helpers.md:block 1019 (code)
msgid "$api = app('HelpSpot\\API');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1021 (header)
msgid "`auth()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1022 (paragraph)
msgid "The `auth` function returns an [authenticator](/docs/{{version}}/authentication) instance. You may use it as an alternative to the `Auth` facade:"
msgstr ""

#: docs/10.x/helpers.md:block 1023 (code)
msgid "$user = auth()->user();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1024 (paragraph)
msgid "If needed, you may specify which guard instance you would like to access:"
msgstr ""

#: docs/10.x/helpers.md:block 1025 (code)
msgid "$user = auth('admin')->user();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1027 (header)
msgid "`back()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1028 (paragraph)
msgid "The `back` function generates a [redirect HTTP response](/docs/{{version}}/responses#redirects) to the user's previous location:"
msgstr ""

#: docs/10.x/helpers.md:block 1029 (code)
msgid ""
"return back($status = 302, $headers = [], $fallback = '/');\n"
"\n"
"return back();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1031 (header)
msgid "`bcrypt()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1032 (paragraph)
msgid "The `bcrypt` function [hashes](/docs/{{version}}/hashing) the given value using Bcrypt. You may use this function as an alternative to the `Hash` facade:"
msgstr ""

#: docs/10.x/helpers.md:block 1033 (code)
msgid "$password = bcrypt('my-secret-password');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1035 (header)
msgid "`blank()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1036 (paragraph)
msgid "The `blank` function determines whether the given value is \"blank\":"
msgstr ""

#: docs/10.x/helpers.md:block 1037 (code)
msgid ""
"blank('');\n"
"blank('   ');\n"
"blank(null);\n"
"blank(collect());\n"
"\n"
"// true\n"
"\n"
"blank(0);\n"
"blank(true);\n"
"blank(false);\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 1038 (paragraph)
msgid "For the inverse of `blank`, see the [`filled`](#method-filled) method."
msgstr ""

#: docs/10.x/helpers.md:block 1040 (header)
msgid "`broadcast()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1041 (paragraph)
msgid "The `broadcast` function [broadcasts](/docs/{{version}}/broadcasting) the given [event](/docs/{{version}}/events) to its listeners:"
msgstr ""

#: docs/10.x/helpers.md:block 1042 (code)
msgid ""
"broadcast(new UserRegistered($user));\n"
"\n"
"broadcast(new UserRegistered($user))->toOthers();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1044 (header)
msgid "`cache()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1045 (paragraph)
msgid "The `cache` function may be used to get values from the [cache](/docs/{{version}}/cache). If the given key does not exist in the cache, an optional default value will be returned:"
msgstr ""

#: docs/10.x/helpers.md:block 1046 (code)
msgid ""
"$value = cache('key');\n"
"\n"
"$value = cache('key', 'default');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1047 (paragraph)
msgid "You may add items to the cache by passing an array of key / value pairs to the function. You should also pass the number of seconds or duration the cached value should be considered valid:"
msgstr ""

#: docs/10.x/helpers.md:block 1048 (code)
msgid ""
"cache(['key' => 'value'], 300);\n"
"\n"
"cache(['key' => 'value'], now()->addSeconds(10));\n"
msgstr ""

#: docs/10.x/helpers.md:block 1050 (header)
msgid "`class_uses_recursive()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1051 (paragraph)
msgid "The `class_uses_recursive` function returns all traits used by a class, including traits used by all of its parent classes:"
msgstr ""

#: docs/10.x/helpers.md:block 1052 (code)
msgid "$traits = class_uses_recursive(App\\Models\\User::class);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1054 (header)
msgid "`collect()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1055 (paragraph)
msgid "The `collect` function creates a [collection](/docs/{{version}}/collections) instance from the given value:"
msgstr ""

#: docs/10.x/helpers.md:block 1056 (code)
msgid "$collection = collect(['taylor', 'abigail']);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1058 (header)
msgid "`config()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1059 (paragraph)
msgid "The `config` function gets the value of a [configuration](/docs/{{version}}/configuration) variable. The configuration values may be accessed using \"dot\" syntax, which includes the name of the file and the option you wish to access. A default value may be specified and is returned if the configuration option does not exist:"
msgstr ""

#: docs/10.x/helpers.md:block 1060 (code)
msgid ""
"$value = config('app.timezone');\n"
"\n"
"$value = config('app.timezone', $default);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1061 (paragraph)
msgid "You may set configuration variables at runtime by passing an array of key / value pairs. However, note that this function only affects the configuration value for the current request and does not update your actual configuration values:"
msgstr ""

#: docs/10.x/helpers.md:block 1062 (code)
msgid "config(['app.debug' => true]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1064 (header)
msgid "`cookie()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1065 (paragraph)
msgid "The `cookie` function creates a new [cookie](/docs/{{version}}/requests#cookies) instance:"
msgstr ""

#: docs/10.x/helpers.md:block 1066 (code)
msgid "$cookie = cookie('name', 'value', $minutes);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1068 (header)
msgid "`csrf_field()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1069 (paragraph)
msgid "The `csrf_field` function generates an HTML `hidden` input field containing the value of the CSRF token. For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr ""

#: docs/10.x/helpers.md:block 1070 (code)
msgid "{{ csrf_field() }}\n"
msgstr ""

#: docs/10.x/helpers.md:block 1072 (header)
msgid "`csrf_token()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1073 (paragraph)
msgid "The `csrf_token` function retrieves the value of the current CSRF token:"
msgstr ""

#: docs/10.x/helpers.md:block 1074 (code)
msgid "$token = csrf_token();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1076 (header)
msgid "`decrypt()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1077 (paragraph)
msgid "The `decrypt` function [decrypts](/docs/{{version}}/encryption) the given value. You may use this function as an alternative to the `Crypt` facade:"
msgstr ""

#: docs/10.x/helpers.md:block 1078 (code)
msgid "$password = decrypt($value);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1080 (header)
msgid "`dd()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1081 (paragraph)
msgid "The `dd` function dumps the given variables and ends execution of the script:"
msgstr ""

#: docs/10.x/helpers.md:block 1082 (code)
msgid ""
"dd($value);\n"
"\n"
"dd($value1, $value2, $value3, ...);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1083 (paragraph)
msgid "If you do not want to halt the execution of your script, use the [`dump`](#method-dump) function instead."
msgstr ""

#: docs/10.x/helpers.md:block 1085 (header)
msgid "`dispatch()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1086 (paragraph)
msgid "The `dispatch` function pushes the given [job](/docs/{{version}}/queues#creating-jobs) onto the Laravel [job queue](/docs/{{version}}/queues):"
msgstr ""

#: docs/10.x/helpers.md:block 1087 (code)
msgid "dispatch(new App\\Jobs\\SendEmails);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1089 (header)
msgid "`dump()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1090 (paragraph)
msgid "The `dump` function dumps the given variables:"
msgstr ""

#: docs/10.x/helpers.md:block 1091 (code)
msgid ""
"dump($value);\n"
"\n"
"dump($value1, $value2, $value3, ...);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1092 (paragraph)
msgid "If you want to stop executing the script after dumping the variables, use the [`dd`](#method-dd) function instead."
msgstr ""

#: docs/10.x/helpers.md:block 1094 (header)
msgid "`encrypt()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1095 (paragraph)
msgid "The `encrypt` function [encrypts](/docs/{{version}}/encryption) the given value. You may use this function as an alternative to the `Crypt` facade:"
msgstr ""

#: docs/10.x/helpers.md:block 1096 (code)
msgid "$secret = encrypt('my-secret-value');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1098 (header)
msgid "`env()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1099 (paragraph)
msgid "The `env` function retrieves the value of an [environment variable](/docs/{{version}}/configuration#environment-configuration) or returns a default value:"
msgstr ""

#: docs/10.x/helpers.md:block 1100 (code)
msgid ""
"$env = env('APP_ENV');\n"
"\n"
"$env = env('APP_ENV', 'production');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1101 (quote)
msgid "**Warning** If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded and all calls to the `env` function will return `null`."
msgstr ""

#: docs/10.x/helpers.md:block 1103 (header)
msgid "`event()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1104 (paragraph)
msgid "The `event` function dispatches the given [event](/docs/{{version}}/events) to its listeners:"
msgstr ""

#: docs/10.x/helpers.md:block 1105 (code)
msgid "event(new UserRegistered($user));\n"
msgstr ""

#: docs/10.x/helpers.md:block 1107 (header)
msgid "`fake()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1108 (paragraph)
msgid "The `fake` function resolves a [Faker](https://github.com/FakerPHP/Faker) singleton from the container, which can be useful when creating fake data in model factories, database seeding, tests, and prototyping views:"
msgstr ""

#: docs/10.x/helpers.md:block 1109 (code)
msgid ""
"@for($i = 0; $i < 10; $i++)\n"
"    <dl>\n"
"        <dt>Name</dt>\n"
"        <dd>{{ fake()->name() }}</dd>\n"
"\n"
"        <dt>Email</dt>\n"
"        <dd>{{ fake()->unique()->safeEmail() }}</dd>\n"
"    </dl>\n"
"@endfor\n"
msgstr ""

#: docs/10.x/helpers.md:block 1110 (paragraph)
msgid "By default, the `fake` function will utilize the `app.faker_locale` configuration option in your `config/app.php` configuration file; however, you may also specify the locale by passing it to the `fake` function. Each locale will resolve an individual singleton:"
msgstr ""

#: docs/10.x/helpers.md:block 1111 (code)
msgid "fake('nl_NL')->name()\n"
msgstr ""

#: docs/10.x/helpers.md:block 1113 (header)
msgid "`filled()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1114 (paragraph)
msgid "The `filled` function determines whether the given value is not \"blank\":"
msgstr ""

#: docs/10.x/helpers.md:block 1115 (code)
msgid ""
"filled(0);\n"
"filled(true);\n"
"filled(false);\n"
"\n"
"// true\n"
"\n"
"filled('');\n"
"filled('   ');\n"
"filled(null);\n"
"filled(collect());\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 1116 (paragraph)
msgid "For the inverse of `filled`, see the [`blank`](#method-blank) method."
msgstr ""

#: docs/10.x/helpers.md:block 1118 (header)
msgid "`info()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1119 (paragraph)
msgid "The `info` function will write information to your application's [log](/docs/{{version}}/logging):"
msgstr ""

#: docs/10.x/helpers.md:block 1120 (code)
msgid "info('Some helpful information!');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1121 (paragraph)
msgid "An array of contextual data may also be passed to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 1122 (code)
msgid "info('User login attempt failed.', ['id' => $user->id]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1124 (header)
msgid "`logger()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1125 (paragraph)
msgid "The `logger` function can be used to write a `debug` level message to the [log](/docs/{{version}}/logging):"
msgstr ""

#: docs/10.x/helpers.md:block 1126 (code)
msgid "logger('Debug message');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1128 (code)
msgid "logger('User has logged in.', ['id' => $user->id]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1129 (paragraph)
msgid "A [logger](/docs/{{version}}/errors#logging) instance will be returned if no value is passed to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 1130 (code)
msgid "logger()->error('You are not allowed here.');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1132 (header)
msgid "`method_field()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1133 (paragraph)
msgid "The `method_field` function generates an HTML `hidden` input field containing the spoofed value of the form's HTTP verb. For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr ""

#: docs/10.x/helpers.md:block 1134 (code)
msgid ""
"<form method=\"POST\">\n"
"    {{ method_field('DELETE') }}\n"
"</form>\n"
msgstr ""

#: docs/10.x/helpers.md:block 1136 (header)
msgid "`now()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1137 (paragraph)
msgid "The `now` function creates a new `Illuminate\\Support\\Carbon` instance for the current time:"
msgstr ""

#: docs/10.x/helpers.md:block 1138 (code)
msgid "$now = now();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1140 (header)
msgid "`old()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1141 (paragraph)
msgid "The `old` function [retrieves](/docs/{{version}}/requests#retrieving-input) an [old input](/docs/{{version}}/requests#old-input) value flashed into the session:"
msgstr ""

#: docs/10.x/helpers.md:block 1142 (code)
msgid ""
"$value = old('value');\n"
"\n"
"$value = old('value', 'default');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1143 (paragraph)
msgid "Since the \"default value\" provided as the second argument to the `old` function is often an attribute of an Eloquent model, Laravel allows you to simply pass the entire Eloquent model as the second argument to the `old` function. When doing so, Laravel will assume the first argument provided to the `old` function is the name of the Eloquent attribute that should be considered the \"default value\":"
msgstr ""

#: docs/10.x/helpers.md:block 1144 (code)
msgid ""
"{{ old('name', $user->name) }}\n"
"\n"
"// Is equivalent to...\n"
"\n"
"{{ old('name', $user) }}\n"
msgstr ""

#: docs/10.x/helpers.md:block 1146 (header)
msgid "`optional()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1147 (paragraph)
msgid "The `optional` function accepts any argument and allows you to access properties or call methods on that object. If the given object is `null`, properties and methods will return `null` instead of causing an error:"
msgstr ""

#: docs/10.x/helpers.md:block 1148 (code)
msgid ""
"return optional($user->address)->street;\n"
"\n"
"{!! old('name', optional($user)->name) !!}\n"
msgstr ""

#: docs/10.x/helpers.md:block 1149 (paragraph)
msgid "The `optional` function also accepts a closure as its second argument. The closure will be invoked if the value provided as the first argument is not null:"
msgstr ""

#: docs/10.x/helpers.md:block 1150 (code)
msgid ""
"return optional(User::find($id), function (User $user) {\n"
"    return $user->name;\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1152 (header)
msgid "`policy()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1153 (paragraph)
msgid "The `policy` method retrieves a [policy](/docs/{{version}}/authorization#creating-policies) instance for a given class:"
msgstr ""

#: docs/10.x/helpers.md:block 1154 (code)
msgid "$policy = policy(App\\Models\\User::class);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1156 (header)
msgid "`redirect()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1157 (paragraph)
msgid "The `redirect` function returns a [redirect HTTP response](/docs/{{version}}/responses#redirects), or returns the redirector instance if called with no arguments:"
msgstr ""

#: docs/10.x/helpers.md:block 1158 (code)
msgid ""
"return redirect($to = null, $status = 302, $headers = [], $https = null);\n"
"\n"
"return redirect('/home');\n"
"\n"
"return redirect()->route('route.name');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1160 (header)
msgid "`report()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1161 (paragraph)
msgid "The `report` function will report an exception using your [exception handler](/docs/{{version}}/errors#the-exception-handler):"
msgstr ""

#: docs/10.x/helpers.md:block 1162 (code)
msgid "report($e);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1163 (paragraph)
msgid "The `report` function also accepts a string as an argument. When a string is given to the function, the function will create an exception with the given string as its message:"
msgstr ""

#: docs/10.x/helpers.md:block 1164 (code)
msgid "report('Something went wrong.');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1166 (header)
msgid "`report_if()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1167 (paragraph)
msgid "The `report_if` function will report an exception using your [exception handler](/docs/{{version}}/errors#the-exception-handler) if the given condition is `true`:"
msgstr ""

#: docs/10.x/helpers.md:block 1168 (code)
msgid ""
"report_if($shouldReport, $e);\n"
"\n"
"report_if($shouldReport, 'Something went wrong.');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1170 (header)
msgid "`report_unless()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1171 (paragraph)
msgid "The `report_unless` function will report an exception using your [exception handler](/docs/{{version}}/errors#the-exception-handler) if the given condition is `false`:"
msgstr ""

#: docs/10.x/helpers.md:block 1172 (code)
msgid ""
"report_unless($reportingDisabled, $e);\n"
"\n"
"report_unless($reportingDisabled, 'Something went wrong.');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1174 (header)
msgid "`request()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1175 (paragraph)
msgid "The `request` function returns the current [request](/docs/{{version}}/requests) instance or obtains an input field's value from the current request:"
msgstr ""

#: docs/10.x/helpers.md:block 1176 (code)
msgid ""
"$request = request();\n"
"\n"
"$value = request('key', $default);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1178 (header)
msgid "`rescue()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1179 (paragraph)
msgid "The `rescue` function executes the given closure and catches any exceptions that occur during its execution. All exceptions that are caught will be sent to your [exception handler](/docs/{{version}}/errors#the-exception-handler); however, the request will continue processing:"
msgstr ""

#: docs/10.x/helpers.md:block 1180 (code)
msgid ""
"return rescue(function () {\n"
"    return $this->method();\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1181 (paragraph)
msgid "You may also pass a second argument to the `rescue` function. This argument will be the \"default\" value that should be returned if an exception occurs while executing the closure:"
msgstr ""

#: docs/10.x/helpers.md:block 1182 (code)
msgid ""
"return rescue(function () {\n"
"    return $this->method();\n"
"}, false);\n"
"\n"
"return rescue(function () {\n"
"    return $this->method();\n"
"}, function () {\n"
"    return $this->failure();\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1184 (header)
msgid "`resolve()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1185 (paragraph)
msgid "The `resolve` function resolves a given class or interface name to an instance using the [service container](/docs/{{version}}/container):"
msgstr ""

#: docs/10.x/helpers.md:block 1186 (code)
msgid "$api = resolve('HelpSpot\\API');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1188 (header)
msgid "`response()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1189 (paragraph)
msgid "The `response` function creates a [response](/docs/{{version}}/responses) instance or obtains an instance of the response factory:"
msgstr ""

#: docs/10.x/helpers.md:block 1190 (code)
msgid ""
"return response('Hello World', 200, $headers);\n"
"\n"
"return response()->json(['foo' => 'bar'], 200, $headers);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1192 (header)
msgid "`retry()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1193 (paragraph)
msgid "The `retry` function attempts to execute the given callback until the given maximum attempt threshold is met. If the callback does not throw an exception, its return value will be returned. If the callback throws an exception, it will automatically be retried. If the maximum attempt count is exceeded, the exception will be thrown:"
msgstr ""

#: docs/10.x/helpers.md:block 1194 (code)
msgid ""
"return retry(5, function () {\n"
"    // Attempt 5 times while resting 100ms between attempts...\n"
"}, 100);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1195 (paragraph)
msgid "If you would like to manually calculate the number of milliseconds to sleep between attempts, you may pass a closure as the third argument to the `retry` function:"
msgstr ""

#: docs/10.x/helpers.md:block 1196 (code)
msgid ""
"use Exception;\n"
"\n"
"return retry(5, function () {\n"
"    // ...\n"
"}, function (int $attempt, Exception $exception) {\n"
"    return $attempt * 100;\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1197 (paragraph)
msgid "For convenience, you may provide an array as the first argument to the `retry` function. This array will be used to determine how many milliseconds to sleep between subsequent attempts:"
msgstr ""

#: docs/10.x/helpers.md:block 1198 (code)
msgid ""
"return retry([100, 200], function () {\n"
"    // Sleep for 100ms on first retry, 200ms on second retry...\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1199 (paragraph)
msgid "To only retry under specific conditions, you may pass a closure as the fourth argument to the `retry` function:"
msgstr ""

#: docs/10.x/helpers.md:block 1200 (code)
msgid ""
"use Exception;\n"
"\n"
"return retry(5, function () {\n"
"    // ...\n"
"}, 100, function (Exception $exception) {\n"
"    return $exception instanceof RetryException;\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1202 (header)
msgid "`session()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1203 (paragraph)
msgid "The `session` function may be used to get or set [session](/docs/{{version}}/session) values:"
msgstr ""

#: docs/10.x/helpers.md:block 1204 (code)
msgid "$value = session('key');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1205 (paragraph)
msgid "You may set values by passing an array of key / value pairs to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 1206 (code)
msgid "session(['chairs' => 7, 'instruments' => 3]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1207 (paragraph)
msgid "The session store will be returned if no value is passed to the function:"
msgstr ""

#: docs/10.x/helpers.md:block 1208 (code)
msgid ""
"$value = session()->get('key');\n"
"\n"
"session()->put('key', $value);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1210 (header)
msgid "`tap()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1211 (paragraph)
msgid "The `tap` function accepts two arguments: an arbitrary `$value` and a closure. The `$value` will be passed to the closure and then be returned by the `tap` function. The return value of the closure is irrelevant:"
msgstr ""

#: docs/10.x/helpers.md:block 1212 (code)
msgid ""
"$user = tap(User::first(), function (User $user) {\n"
"    $user->name = 'taylor';\n"
"\n"
"    $user->save();\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1213 (paragraph)
msgid "If no closure is passed to the `tap` function, you may call any method on the given `$value`. The return value of the method you call will always be `$value`, regardless of what the method actually returns in its definition. For example, the Eloquent `update` method typically returns an integer. However, we can force the method to return the model itself by chaining the `update` method call through the `tap` function:"
msgstr ""

#: docs/10.x/helpers.md:block 1214 (code)
msgid ""
"$user = tap($user)->update([\n"
"    'name' => $name,\n"
"    'email' => $email,\n"
"]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1215 (paragraph)
msgid "To add a `tap` method to a class, you may add the `Illuminate\\Support\\Traits\\Tappable` trait to the class. The `tap` method of this trait accepts a Closure as its only argument. The object instance itself will be passed to the Closure and then be returned by the `tap` method:"
msgstr ""

#: docs/10.x/helpers.md:block 1216 (code)
msgid ""
"return $user->tap(function (User $user) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/helpers.md:block 1218 (header)
msgid "`throw_if()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1219 (paragraph)
msgid "The `throw_if` function throws the given exception if a given boolean expression evaluates to `true`:"
msgstr ""

#: docs/10.x/helpers.md:block 1220 (code)
msgid ""
"throw_if(! Auth::user()->isAdmin(), AuthorizationException::class);\n"
"\n"
"throw_if(\n"
"    ! Auth::user()->isAdmin(),\n"
"    AuthorizationException::class,\n"
"    'You are not allowed to access this page.'\n"
");\n"
msgstr ""

#: docs/10.x/helpers.md:block 1222 (header)
msgid "`throw_unless()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1223 (paragraph)
msgid "The `throw_unless` function throws the given exception if a given boolean expression evaluates to `false`:"
msgstr ""

#: docs/10.x/helpers.md:block 1224 (code)
msgid ""
"throw_unless(Auth::user()->isAdmin(), AuthorizationException::class);\n"
"\n"
"throw_unless(\n"
"    Auth::user()->isAdmin(),\n"
"    AuthorizationException::class,\n"
"    'You are not allowed to access this page.'\n"
");\n"
msgstr ""

#: docs/10.x/helpers.md:block 1226 (header)
msgid "`today()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1227 (paragraph)
msgid "The `today` function creates a new `Illuminate\\Support\\Carbon` instance for the current date:"
msgstr ""

#: docs/10.x/helpers.md:block 1228 (code)
msgid "$today = today();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1230 (header)
msgid "`trait_uses_recursive()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1231 (paragraph)
msgid "The `trait_uses_recursive` function returns all traits used by a trait:"
msgstr ""

#: docs/10.x/helpers.md:block 1232 (code)
msgid "$traits = trait_uses_recursive(\\Illuminate\\Notifications\\Notifiable::class);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1234 (header)
msgid "`transform()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1235 (paragraph)
msgid "The `transform` function executes a closure on a given value if the value is not [blank](#method-blank) and then returns the return value of the closure:"
msgstr ""

#: docs/10.x/helpers.md:block 1236 (code)
msgid ""
"$callback = function (int $value) {\n"
"    return $value * 2;\n"
"};\n"
"\n"
"$result = transform(5, $callback);\n"
"\n"
"// 10\n"
msgstr ""

#: docs/10.x/helpers.md:block 1237 (paragraph)
msgid "A default value or closure may be passed as the third argument to the function. This value will be returned if the given value is blank:"
msgstr ""

#: docs/10.x/helpers.md:block 1238 (code)
msgid ""
"$result = transform(null, $callback, 'The value is blank');\n"
"\n"
"// The value is blank\n"
msgstr ""

#: docs/10.x/helpers.md:block 1240 (header)
msgid "`validator()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1241 (paragraph)
msgid "The `validator` function creates a new [validator](/docs/{{version}}/validation) instance with the given arguments. You may use it as an alternative to the `Validator` facade:"
msgstr ""

#: docs/10.x/helpers.md:block 1242 (code)
msgid "$validator = validator($data, $rules, $messages);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1244 (header)
msgid "`value()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1245 (paragraph)
msgid "The `value` function returns the value it is given. However, if you pass a closure to the function, the closure will be executed and its returned value will be returned:"
msgstr ""

#: docs/10.x/helpers.md:block 1246 (code)
msgid ""
"$result = value(true);\n"
"\n"
"// true\n"
"\n"
"$result = value(function () {\n"
"    return false;\n"
"});\n"
"\n"
"// false\n"
msgstr ""

#: docs/10.x/helpers.md:block 1247 (paragraph)
msgid "Additional arguments may be passed to the `value` function. If the first argument is a closure then the additional parameters will be passed to the closure as arguments, otherwise they will be ignored:"
msgstr ""

#: docs/10.x/helpers.md:block 1248 (code)
msgid ""
"$result = value(function (string $name) {\n"
"    return $name;\n"
"}, 'Taylor');\n"
"\n"
"// 'Taylor'\n"
msgstr ""

#: docs/10.x/helpers.md:block 1250 (header)
msgid "`view()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1251 (paragraph)
msgid "The `view` function retrieves a [view](/docs/{{version}}/views) instance:"
msgstr ""

#: docs/10.x/helpers.md:block 1252 (code)
msgid "return view('auth.login');\n"
msgstr ""

#: docs/10.x/helpers.md:block 1254 (header)
msgid "`with()` {.collection-method}"
msgstr ""

#: docs/10.x/helpers.md:block 1255 (paragraph)
msgid "The `with` function returns the value it is given. If a closure is passed as the second argument to the function, the closure will be executed and its returned value will be returned:"
msgstr ""

#: docs/10.x/helpers.md:block 1256 (code)
msgid ""
"$callback = function (mixed $value) {\n"
"    return is_numeric($value) ? $value * 2 : 0;\n"
"};\n"
"\n"
"$result = with(5, $callback);\n"
"\n"
"// 10\n"
"\n"
"$result = with(null, $callback);\n"
"\n"
"// 0\n"
"\n"
"$result = with(5, null);\n"
"\n"
"// 5\n"
msgstr ""

#: docs/10.x/helpers.md:block 1258 (header)
msgid "Other Utilities"
msgstr ""

#: docs/10.x/helpers.md:block 1260 (header)
msgid "Benchmarking"
msgstr ""

#: docs/10.x/helpers.md:block 1261 (paragraph)
msgid "Sometimes you may wish to quickly test the performance of certain parts of your application. On those occasions, you may utilize the `Benchmark` support class to measure the number of milliseconds it takes for the given callbacks to complete:"
msgstr ""

#: docs/10.x/helpers.md:block 1262 (code)
msgid ""
"<?php\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Benchmark;\n"
"\n"
"Benchmark::dd(fn () => User::find(1)); // 0.1 ms\n"
"\n"
"Benchmark::dd([\n"
"    'Scenario 1' => fn () => User::count(), // 0.5 ms\n"
"    'Scenario 2' => fn () => User::all()->count(), // 20.0 ms\n"
"]);\n"
msgstr ""

#: docs/10.x/helpers.md:block 1263 (paragraph)
msgid "By default, the given callbacks will be executed once (one iteration), and their duration will be displayed in the browser / console."
msgstr ""

#: docs/10.x/helpers.md:block 1264 (paragraph)
msgid "To invoke a callback more than once, you may specify the number of iterations that the callback should be invoked as the second argument to the method. When executing a callback more than once, the `Benchmark` class will return the average amount of milliseconds it took to execute the callback across all iterations:"
msgstr ""

#: docs/10.x/helpers.md:block 1265 (code)
msgid "Benchmark::dd(fn () => User::count(), iterations: 10); // 0.5 ms\n"
msgstr ""

#: docs/10.x/helpers.md:block 1267 (header)
msgid "Lottery"
msgstr ""

#: docs/10.x/helpers.md:block 1268 (paragraph)
msgid "Laravel's lottery class may be used to execute callbacks based on a set of given odds. This can be particularly useful when you only want to execute code for a percentage of your incoming requests:"
msgstr ""

#: docs/10.x/helpers.md:block 1269 (code)
msgid ""
"use Illuminate\\Support\\Lottery;\n"
"\n"
"Lottery::odds(1, 20)\n"
"    ->winner(fn () => $user->won())\n"
"    ->loser(fn () => $user->lost())\n"
"    ->choose();\n"
msgstr ""

#: docs/10.x/helpers.md:block 1270 (paragraph)
msgid "You may combine Laravel's lottery class with other Laravel features. For example, you may wish to only report a small percentage of slow queries to your exception handler. And, since the lottery class is callable, we may pass an instance of the class into any method that accepts callables:"
msgstr ""

#: docs/10.x/helpers.md:block 1271 (code)
msgid ""
"use Carbon\\CarbonInterval;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\Lottery;\n"
"\n"
"DB::whenQueryingForLongerThan(\n"
"    CarbonInterval::seconds(2),\n"
"    Lottery::odds(1, 100)->winner(fn () => report('Querying > 2 seconds.')),\n"
");\n"
msgstr ""

#: docs/10.x/helpers.md:block 1273 (header)
msgid "Testing Lotteries"
msgstr ""

#: docs/10.x/helpers.md:block 1274 (paragraph)
msgid "Laravel provides some simple methods to allow you to easily test your application's lottery invocations:"
msgstr ""

#: docs/10.x/helpers.md:block 1275 (code)
msgid ""
"// Lottery will always win...\n"
"Lottery::alwaysWin();\n"
"\n"
"// Lottery will always lose...\n"
"Lottery::alwaysLose();\n"
"\n"
"// Lottery will win then lose, and finally return to normal behavior...\n"
"Lottery::fix([true, false]);\n"
"\n"
"// Lottery will return to normal behavior...\n"
"Lottery::determineResultsNormally();\n"
msgstr ""

#: docs/8.x/helpers.md:block 12 (paragraph)
msgid "[Arr::accessible](#method-array-accessible) [Arr::add](#method-array-add) [Arr::collapse](#method-array-collapse) [Arr::crossJoin](#method-array-crossjoin) [Arr::divide](#method-array-divide) [Arr::dot](#method-array-dot) [Arr::except](#method-array-except) [Arr::exists](#method-array-exists) [Arr::first](#method-array-first) [Arr::flatten](#method-array-flatten) [Arr::forget](#method-array-forget) [Arr::get](#method-array-get) [Arr::has](#method-array-has) [Arr::hasAny](#method-array-hasany) [Arr::isAssoc](#method-array-isassoc) [Arr::last](#method-array-last) [Arr::only](#method-array-only) [Arr::pluck](#method-array-pluck) [Arr::prepend](#method-array-prepend) [Arr::pull](#method-array-pull) [Arr::query](#method-array-query) [Arr::random](#method-array-random) [Arr::set](#method-array-set) [Arr::shuffle](#method-array-shuffle) [Arr::sort](#method-array-sort) [Arr::sortRecursive](#method-array-sort-recursive) [Arr::toCssClasses](#method-array-to-css-classes) [Arr::undot](#method-array-undot) [Arr::where](#method-array-where) [Arr::whereNotNull](#method-array-where-not-null) [Arr::wrap](#method-array-wrap) [data_fill](#method-data-fill) [data_get](#method-data-get) [data_set](#method-data-set) [head](#method-head) [last](#method-last)"
msgstr ""

#: docs/8.x/helpers.md:block 17 (paragraph)
msgid "[app_path](#method-app-path) [base_path](#method-base-path) [config_path](#method-config-path) [database_path](#method-database-path) [mix](#method-mix) [public_path](#method-public-path) [resource_path](#method-resource-path) [storage_path](#method-storage-path)"
msgstr ""

#: docs/8.x/helpers.md:block 22 (paragraph)
msgid "[__](#method-__) [class_basename](#method-class-basename) [e](#method-e) [preg_replace_array](#method-preg-replace-array) [Str::after](#method-str-after) [Str::afterLast](#method-str-after-last) [Str::ascii](#method-str-ascii) [Str::before](#method-str-before) [Str::beforeLast](#method-str-before-last) [Str::between](#method-str-between) [Str::camel](#method-camel-case) [Str::contains](#method-str-contains) [Str::containsAll](#method-str-contains-all) [Str::endsWith](#method-ends-with) [Str::finish](#method-str-finish) [Str::headline](#method-str-headline) [Str::is](#method-str-is) [Str::isAscii](#method-str-is-ascii) [Str::isUuid](#method-str-is-uuid) [Str::kebab](#method-kebab-case) [Str::length](#method-str-length) [Str::limit](#method-str-limit) [Str::lower](#method-str-lower) [Str::markdown](#method-str-markdown) [Str::mask](#method-str-mask) [Str::orderedUuid](#method-str-ordered-uuid) [Str::padBoth](#method-str-padboth) [Str::padLeft](#method-str-padleft) [Str::padRight](#method-str-padright) [Str::plural](#method-str-plural) [Str::pluralStudly](#method-str-plural-studly) [Str::random](#method-str-random) [Str::remove](#method-str-remove) [Str::replace](#method-str-replace) [Str::replaceArray](#method-str-replace-array) [Str::replaceFirst](#method-str-replace-first) [Str::replaceLast](#method-str-replace-last) [Str::reverse](#method-str-reverse) [Str::singular](#method-str-singular) [Str::slug](#method-str-slug) [Str::snake](#method-snake-case) [Str::start](#method-str-start) [Str::startsWith](#method-starts-with) [Str::studly](#method-studly-case) [Str::substr](#method-str-substr) [Str::substrCount](#method-str-substrcount) [Str::substrReplace](#method-str-substrreplace) [Str::title](#method-title-case) [Str::toHtmlString](#method-str-to-html-string) [Str::ucfirst](#method-str-ucfirst) [Str::upper](#method-str-upper) [Str::uuid](#method-str-uuid) [Str::wordCount](#method-str-word-count) [Str::words](#method-str-words) [trans](#method-trans) [trans_choice](#method-trans-choice)"
msgstr ""

#: docs/8.x/helpers.md:block 27 (paragraph)
msgid "[after](#method-fluent-str-after) [afterLast](#method-fluent-str-after-last) [append](#method-fluent-str-append) [ascii](#method-fluent-str-ascii) [basename](#method-fluent-str-basename) [before](#method-fluent-str-before) [beforeLast](#method-fluent-str-before-last) [between](#method-fluent-str-between) [camel](#method-fluent-str-camel) [contains](#method-fluent-str-contains) [containsAll](#method-fluent-str-contains-all) [dirname](#method-fluent-str-dirname) [endsWith](#method-fluent-str-ends-with) [exactly](#method-fluent-str-exactly) [explode](#method-fluent-str-explode) [finish](#method-fluent-str-finish) [is](#method-fluent-str-is) [isAscii](#method-fluent-str-is-ascii) [isEmpty](#method-fluent-str-is-empty) [isNotEmpty](#method-fluent-str-is-not-empty) [isUuid](#method-fluent-str-is-uuid) [kebab](#method-fluent-str-kebab) [length](#method-fluent-str-length) [limit](#method-fluent-str-limit) [lower](#method-fluent-str-lower) [ltrim](#method-fluent-str-ltrim) [markdown](#method-fluent-str-markdown) [mask](#method-fluent-str-mask) [match](#method-fluent-str-match) [matchAll](#method-fluent-str-match-all) [padBoth](#method-fluent-str-padboth) [padLeft](#method-fluent-str-padleft) [padRight](#method-fluent-str-padright) [pipe](#method-fluent-str-pipe) [plural](#method-fluent-str-plural) [prepend](#method-fluent-str-prepend) [remove](#method-fluent-str-remove) [replace](#method-fluent-str-replace) [replaceArray](#method-fluent-str-replace-array) [replaceFirst](#method-fluent-str-replace-first) [replaceLast](#method-fluent-str-replace-last) [replaceMatches](#method-fluent-str-replace-matches) [rtrim](#method-fluent-str-rtrim) [scan](#method-fluent-str-scan) [singular](#method-fluent-str-singular) [slug](#method-fluent-str-slug) [snake](#method-fluent-str-snake) [split](#method-fluent-str-split) [start](#method-fluent-str-start) [startsWith](#method-fluent-str-starts-with) [studly](#method-fluent-str-studly) [substr](#method-fluent-str-substr) [substrReplace](#method-fluent-str-substrreplace) [tap](#method-fluent-str-tap) [test](#method-fluent-str-test) [title](#method-fluent-str-title) [trim](#method-fluent-str-trim) [ucfirst](#method-fluent-str-ucfirst) [upper](#method-fluent-str-upper) [when](#method-fluent-str-when) [whenContains](#method-fluent-str-when-contains) [whenContainsAll](#method-fluent-str-when-contains-all) [whenEmpty](#method-fluent-str-when-empty) [whenNotEmpty](#method-fluent-str-when-not-empty) [whenStartsWith](#method-fluent-str-when-starts-with) [whenEndsWith](#method-fluent-str-when-ends-with) [whenExactly](#method-fluent-str-when-exactly) [whenIs](#method-fluent-str-when-is) [whenIsAscii](#method-fluent-str-when-is-ascii) [whenIsUuid](#method-fluent-str-when-is-uuid) [whenTest](#method-fluent-str-when-test) [wordCount](#method-fluent-str-word-count) [words](#method-fluent-str-words)"
msgstr ""

#: docs/8.x/helpers.md:block 32 (paragraph)
msgid "[action](#method-action) [asset](#method-asset) [route](#method-route) [secure_asset](#method-secure-asset) [secure_url](#method-secure-url) [url](#method-url)"
msgstr ""

#: docs/8.x/helpers.md:block 37 (paragraph)
msgid "[abort](#method-abort) [abort_if](#method-abort-if) [abort_unless](#method-abort-unless) [app](#method-app) [auth](#method-auth) [back](#method-back) [bcrypt](#method-bcrypt) [blank](#method-blank) [broadcast](#method-broadcast) [cache](#method-cache) [class_uses_recursive](#method-class-uses-recursive) [collect](#method-collect) [config](#method-config) [cookie](#method-cookie) [csrf_field](#method-csrf-field) [csrf_token](#method-csrf-token) [dd](#method-dd) [dispatch](#method-dispatch) [dump](#method-dump) [env](#method-env) [event](#method-event) [filled](#method-filled) [info](#method-info) [logger](#method-logger) [method_field](#method-method-field) [now](#method-now) [old](#method-old) [optional](#method-optional) [policy](#method-policy) [redirect](#method-redirect) [report](#method-report) [request](#method-request) [rescue](#method-rescue) [resolve](#method-resolve) [response](#method-response) [retry](#method-retry) [session](#method-session) [tap](#method-tap) [throw_if](#method-throw-if) [throw_unless](#method-throw-unless) [today](#method-today) [trait_uses_recursive](#method-trait-uses-recursive) [transform](#method-transform) [validator](#method-validator) [value](#method-value) [view](#method-view) [with](#method-with)"
msgstr ""

#: docs/8.x/helpers.md:block 79 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [100, 200, 300];\n"
"\n"
"$first = Arr::first($array, function ($value, $key) {\n"
"    return $value >= 150;\n"
"});\n"
"\n"
"// 200\n"
msgstr ""

#: docs/8.x/helpers.md:block 106 (paragraph)
msgid "The `Arr::isAssoc` returns `true` if the given array is an associative array. An array is considered \"associative\" if it doesn't have sequential numerical keys beginning with zero:"
msgstr ""

#: docs/8.x/helpers.md:block 111 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [100, 200, 300, 110];\n"
"\n"
"$last = Arr::last($array, function ($value, $key) {\n"
"    return $value >= 150;\n"
"});\n"
"\n"
"// 300\n"
msgstr ""

#: docs/8.x/helpers.md:block 159 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['name' => 'Desk'],\n"
"    ['name' => 'Table'],\n"
"    ['name' => 'Chair'],\n"
"];\n"
"\n"
"$sorted = array_values(Arr::sort($array, function ($value) {\n"
"    return $value['name'];\n"
"}));\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair'],\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Table'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/helpers.md:block 176 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [100, '200', 300, '400', 500];\n"
"\n"
"$filtered = Arr::where($array, function ($value, $key) {\n"
"    return is_string($value);\n"
"});\n"
"\n"
"// [1 => '200', 3 => '400']\n"
msgstr ""

#: docs/8.x/helpers.md:block 208 (code)
msgid ""
"$data = ['products' => ['desk' => ['price' => 100]]];\n"
"\n"
"data_set($data, 'products.desk.price', 200, $overwrite = false);\n"
"\n"
"// ['products' => ['desk' => ['price' => 100]]]\n"
msgstr ""

#: docs/8.x/helpers.md:block 255 (paragraph)
msgid "The `__` function translates the given translation string or translation key using your [localization files](/docs/{{version}}/localization):"
msgstr ""

#: docs/8.x/helpers.md:block 354 (paragraph)
msgid "The `Str::markdown` method converts GitHub flavored Markdown into HTML:"
msgstr ""

#: docs/8.x/helpers.md:block 380 (paragraph)
msgid "The `Str::plural` method converts a singular word string to its plural form. This function currently only supports the English language:"
msgstr ""

#: docs/8.x/helpers.md:block 386 (paragraph)
msgid "The `Str::pluralStudly` method converts a singular word string formatted in studly caps case to its plural form. This function currently only supports the English language:"
msgstr ""

#: docs/8.x/helpers.md:block 421 (paragraph)
msgid "The `Str::singular` method converts a string to its singular form. This function currently only supports the English language:"
msgstr ""

#: docs/8.x/helpers.md:block 456 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$result = Str::substrReplace('1300', ':', 2); \n"
"// 13:\n"
"\n"
"$result = Str::substrReplace('1300', ':', 2, 0); \n"
"// 13:00\n"
msgstr ""

#: docs/8.x/helpers.md:block 487 (paragraph)
msgid "The `trans` function translates the given translation key using your [localization files](/docs/{{version}}/localization):"
msgstr ""

#: docs/8.x/helpers.md:block 621 (code)
msgid ""
"$string = Str::of('taylor@example.com')->mask('*', -15, 3);\n"
"\n"
"// tay***@example.com\n"
msgstr ""

#: docs/8.x/helpers.md:block 648 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$hash = Str::of('Laravel')->pipe('md5')->prepend('Checksum: ');\n"
"\n"
"// 'Checksum: a5c95b86291ea299fcbe64458ed12702'\n"
"\n"
"$closure = Str::of('foo')->pipe(function ($str) {\n"
"    return 'bar';\n"
"});\n"
"\n"
"// 'bar'\n"
msgstr ""

#: docs/8.x/helpers.md:block 651 (paragraph)
msgid "The `plural` method converts a singular word string to its plural form. This function currently only supports the English language:"
msgstr ""

#: docs/8.x/helpers.md:block 685 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$replaced = Str::of('123')->replaceMatches('/\\d/', function ($match) {\n"
"    return '['.$match[0].']';\n"
"});\n"
"\n"
"// '[1][2][3]'\n"
msgstr ""

#: docs/8.x/helpers.md:block 696 (paragraph)
msgid "The `singular` method converts a string to its singular form. This function currently only supports the English language:"
msgstr ""

#: docs/8.x/helpers.md:block 728 (paragraph)
msgid "The `substrReplace` method replaces text within a portion of a string, starting at the position specified by the third argument and replacing the number of characters specified by the fourth argument. Passing `0` to the method's fourth argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: docs/8.x/helpers.md:block 733 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Laravel')\n"
"    ->append(' Framework')\n"
"    ->tap(function ($string) {\n"
"        dump('String after append: ' . $string);\n"
"    })\n"
"    ->upper();\n"
"\n"
"// LARAVEL FRAMEWORK\n"
msgstr ""

#: docs/8.x/helpers.md:block 757 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Taylor')\n"
"                ->when(true, function ($string) {\n"
"                    return $string->append(' Otwell');\n"
"                });\n"
"\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/8.x/helpers.md:block 762 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains('tony', function ($string) {\n"
"                return $string->title();\n"
"            });\n"
"\n"
"// 'Tony Stark'\n"
msgstr ""

#: docs/8.x/helpers.md:block 765 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains(['tony', 'hulk'], function ($string) {\n"
"                return $string->title();\n"
"            });\n"
"\n"
"// Tony Stark\n"
msgstr ""

#: docs/8.x/helpers.md:block 769 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('tony stark')\n"
"                ->whenContainsAll(['tony', 'stark'], function ($string) {\n"
"                    return $string->title();\n"
"                });\n"
"\n"
"// 'Tony Stark'\n"
msgstr ""

#: docs/8.x/helpers.md:block 774 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('  ')->whenEmpty(function ($string) {\n"
"    return $string->trim()->prepend('Laravel');\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/8.x/helpers.md:block 778 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Framework')->whenNotEmpty(function ($string) {\n"
"    return $string->prepend('Laravel ');\n"
"});\n"
"\n"
"// 'Laravel Framework'\n"
msgstr ""

#: docs/8.x/helpers.md:block 782 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('disney world')->whenStartsWith('disney', function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Disney World'\n"
msgstr ""

#: docs/8.x/helpers.md:block 786 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('disney world')->whenEndsWith('world', function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Disney World'\n"
msgstr ""

#: docs/8.x/helpers.md:block 790 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('laravel')->whenExactly('laravel', function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/8.x/helpers.md:block 794 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('foo/bar')->whenIs('foo/*', function ($string) {\n"
"    return $string->append('/baz');\n"
"});\n"
"\n"
"// 'foo/bar/baz'\n"
msgstr ""

#: docs/8.x/helpers.md:block 798 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('foo/bar')->whenIsAscii('laravel', function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/8.x/helpers.md:block 802 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('foo/bar')->whenIsUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de', function ($string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// 'a0a2a2d2'\n"
msgstr ""

#: docs/8.x/helpers.md:block 806 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('laravel framework')->whenTest('/laravel/', function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel Framework'\n"
msgstr ""

#: docs/8.x/helpers.md:block 948 (quote)
msgid "{note} If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded and all calls to the `env` function will return `null`."
msgstr ""

#: docs/8.x/helpers.md:block 989 (code)
msgid ""
"return optional(User::find($id), function ($user) {\n"
"    return $user->name;\n"
"});\n"
msgstr ""

#: docs/8.x/helpers.md:block 1025 (code)
msgid ""
"return retry(5, function () {\n"
"    // Attempt 5 times while resting 100ms in between attempts...\n"
"}, 100);\n"
msgstr ""

#: docs/8.x/helpers.md:block 1026 (paragraph)
msgid "If you would like to manually calculate the number of milliseconds to sleep in between attempts, you may pass a closure as the third argument to the `retry` function:"
msgstr ""

#: docs/8.x/helpers.md:block 1027 (code)
msgid ""
"return retry(5, function () {\n"
"    // ...\n"
"}, function ($attempt) {\n"
"    return $attempt * 100;\n"
"});\n"
msgstr ""

#: docs/8.x/helpers.md:block 1029 (code)
msgid ""
"return retry(5, function () {\n"
"    // ...\n"
"}, 100, function ($exception) {\n"
"    return $exception instanceof RetryException;\n"
"});\n"
msgstr ""

#: docs/8.x/helpers.md:block 1041 (code)
msgid ""
"$user = tap(User::first(), function ($user) {\n"
"    $user->name = 'taylor';\n"
"\n"
"    $user->save();\n"
"});\n"
msgstr ""

#: docs/8.x/helpers.md:block 1045 (code)
msgid ""
"return $user->tap(function ($user) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/helpers.md:block 1065 (code)
msgid ""
"$callback = function ($value) {\n"
"    return $value * 2;\n"
"};\n"
"\n"
"$result = transform(5, $callback);\n"
"\n"
"// 10\n"
msgstr ""

#: docs/8.x/helpers.md:block 1083 (code)
msgid ""
"$callback = function ($value) {\n"
"    return is_numeric($value) ? $value * 2 : 0;\n"
"};\n"
"\n"
"$result = with(5, $callback);\n"
"\n"
"// 10\n"
"\n"
"$result = with(null, $callback);\n"
"\n"
"// 0\n"
"\n"
"$result = with(5, null);\n"
"\n"
"// 5\n"
msgstr ""

#: docs/9.x/helpers.md:block 129 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = ['first' => 'james', 'last' => 'kirk'];\n"
"\n"
"$mapped = Arr::map($array, function ($value, $key) {\n"
"    return ucfirst($value);\n"
"});\n"
"\n"
"// ['first' => 'James', 'last' => 'Kirk']\n"
msgstr ""

#: docs/9.x/helpers.md:block 185 (code)
msgid ""
"use Illuminate\\Support\\Arr;\n"
"\n"
"$array = [\n"
"    ['name' => 'Desk'],\n"
"    ['name' => 'Table'],\n"
"    ['name' => 'Chair'],\n"
"];\n"
"\n"
"$sorted = array_values(Arr::sortDesc($array, function ($value) {\n"
"    return $value['name'];\n"
"}));\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Table'],\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Chair'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/9.x/helpers.md:block 859 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('Laravel')\n"
"    ->append(' Framework')\n"
"    ->tap(function ($string) {\n"
"        dump('String after append: '.$string);\n"
"    })\n"
"    ->upper();\n"
"\n"
"// LARAVEL FRAMEWORK\n"
msgstr ""

#: docs/9.x/helpers.md:block 924 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('framework')->whenNotExactly('laravel', function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Framework'\n"
msgstr ""

#: docs/9.x/helpers.md:block 932 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('laravel')->whenIsAscii(function ($string) {\n"
"    return $string->title();\n"
"});\n"
"\n"
"// 'Laravel'\n"
msgstr ""

#: docs/9.x/helpers.md:block 936 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('01gd6r360bp37zj17nxb55yv40')->whenIsUlid(function ($string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// '01gd6r36'\n"
msgstr ""

#: docs/9.x/helpers.md:block 940 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"$string = Str::of('a0a2a2d2-0b87-4a18-83f2-2529882be2de')->whenIsUuid(function ($string) {\n"
"    return $string->substr(0, 8);\n"
"});\n"
"\n"
"// 'a0a2a2d2'\n"
msgstr ""

#: docs/9.x/helpers.md:block 1195 (code)
msgid ""
"return retry(5, function () {\n"
"    // ...\n"
"}, function ($attempt, $exception) {\n"
"    return $attempt * 100;\n"
"});\n"
msgstr ""

#: docs/9.x/helpers.md:block 1247 (code)
msgid ""
"$result = value(function ($name) {\n"
"    return $parameter;\n"
"}, 'Taylor');\n"
"\n"
"// 'Taylor'\n"
msgstr ""
