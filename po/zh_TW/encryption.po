msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/encryption.pot\n"
"X-Crowdin-File-ID: 63\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-01-25 07:02\n"

#: docs/8.x/encryption.md:block 1 (header)
msgid "Encryption"
msgstr "加密"

#: docs/8.x/encryption.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/encryption.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

#: docs/8.x/encryption.md:block 2 (unordered list)
msgid "[Using The Encrypter](#using-the-encrypter)"
msgstr "[使用 Encrypter](#using-the-encrypter)"

#: docs/8.x/encryption.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/encryption.md:block 5 (paragraph)
msgid "Laravel's encryption services provide a simple, convenient interface for encrypting and decrypting text via OpenSSL using AES-256 and AES-128 encryption. All of Laravel's encrypted values are signed using a message authentication code (MAC) so that their underlying value can not be modified or tampered with once encrypted."
msgstr "Laravel 的加密服務提供一個簡單且方便的介面，可讓我們通過 OpenSSL 使用 AES-256 或 AES-128 加密方法來加解密文字。Laravel 中所有的加密資訊都使用訊息驗證碼 (MAC, Message Authentication Code) 簽名，因此一旦經過加密，底層的值將無法被修改或竄改。"

#: docs/8.x/encryption.md:block 7 (header)
msgid "Configuration"
msgstr "設定"

#: docs/8.x/encryption.md:block 8 (paragraph)
msgid "Before using Laravel's encrypter, you must set the `key` configuration option in your `config/app.php` configuration file. This configuration value is driven by the `APP_KEY` environment variable. You should use the `php artisan key:generate` command to generate this variable's value since the `key:generate` command will use PHP's secure random bytes generator to build a cryptographically secure key for your application. Typically, the value of the `APP_KEY` environment variable will be generated for you during [Laravel's installation](/docs/{{version}}/installation)."
msgstr "在開始使用 Laravel 的 Encrypter 前，我們必須先在 `config/app.php` 設定檔中設定 `key`。這個設定以 `APP_KEY` 環境變數提供，我們可以使用 `php artisan key:generate` 指令來產生這個變數值。`key:generate` 指令會使用 PHP 的安全隨機位元組產生器來為你的專案建立密碼學上安全的密鑰。一般來說，`APP_KEY` 環境變數會在 [Laravel 的安裝過程](/docs/{{version}}/installation)中就為你產生好了。"

#: docs/8.x/encryption.md:block 10 (header)
msgid "Using The Encrypter"
msgstr "使用加密程式"

#: docs/8.x/encryption.md:block 12 (header)
msgid "Encrypting A Value"
msgstr "加密"

#: docs/8.x/encryption.md:block 13 (paragraph)
msgid "You may encrypt a value using the `encryptString` method provided by the `Crypt` facade. All encrypted values are encrypted using OpenSSL and the AES-256-CBC cipher. Furthermore, all encrypted values are signed with a message authentication code (MAC). The integrated message authentication code will prevent the decryption of any values that have been tampered with by malicious users:"
msgstr "可以使用 `Crypt` Facade 提供的 `encryptString` 方法來加密。所有加密的值都使用 OpenSSL 與 AES-256-CBC Cipher 來加密。此外，所有加密的值都使用訊息驗證碼 (MAC, Message Authentiation Code) 簽名。整個在內的 MAC 可以防止我們去解謎任何由惡意使用者修改過的值："

#: docs/8.x/encryption.md:block 14 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Crypt;\n\n"
"class DigitalOceanTokenController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a DigitalOcean API token for the user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function storeSecret(Request $request)\n"
"    {\n"
"        $request->user()->fill([\n"
"            'token' => Crypt::encryptString($request->token),\n"
"        ])->save();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Crypt;\n\n"
"class DigitalOceanTokenController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a DigitalOcean API token for the user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function storeSecret(Request $request)\n"
"    {\n"
"        $request->user()->fill([\n"
"            'token' => Crypt::encryptString($request->token),\n"
"        ])->save();\n"
"    }\n"
"}\n"

#: docs/8.x/encryption.md:block 16 (header)
msgid "Decrypting A Value"
msgstr "解密"

#: docs/8.x/encryption.md:block 17 (paragraph)
msgid "You may decrypt values using the `decryptString` method provided by the `Crypt` facade. If the value can not be properly decrypted, such as when the message authentication code is invalid, an `Illuminate\\Contracts\\Encryption\\DecryptException` will be thrown:"
msgstr "可以使用 `Crypt` Facade 提供的 `decryptString` 方法來解密值。若該值無法被正確解密，如 MAC 無效等情況，則會擲回 `Illuminate\\Contracts\\Encryption\\DecryptException`："

#: docs/8.x/encryption.md:block 18 (code)
msgid "use Illuminate\\Contracts\\Encryption\\DecryptException;\n"
"use Illuminate\\Support\\Facades\\Crypt;\n\n"
"try {\n"
"    $decrypted = Crypt::decryptString($encryptedValue);\n"
"} catch (DecryptException $e) {\n"
"    //\n"
"}\n"
msgstr "use Illuminate\\Contracts\\Encryption\\DecryptException;\n"
"use Illuminate\\Support\\Facades\\Crypt;\n\n"
"try {\n"
"    $decrypted = Crypt::decryptString($encryptedValue);\n"
"} catch (DecryptException $e) {\n"
"    //\n"
"}\n"

#: docs/master/encryption.md:block 14 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Illuminate\\Support\\Facades\\Crypt;\n\n"
"class DigitalOceanTokenController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a DigitalOcean API token for the user.\n"
"     */\n"
"    public function storeSecret(Request $request): Response\n"
"    {\n"
"        $request->user()->fill([\n"
"            'token' => Crypt::encryptString($request->token),\n"
"        ])->save();\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/encryption.md:block 18 (code)
msgid "use Illuminate\\Contracts\\Encryption\\DecryptException;\n"
"use Illuminate\\Support\\Facades\\Crypt;\n\n"
"try {\n"
"    $decrypted = Crypt::decryptString($encryptedValue);\n"
"} catch (DecryptException $e) {\n"
"    // ...\n"
"}\n"
msgstr ""

