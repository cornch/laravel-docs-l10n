# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-27 11:56+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/sanctum.md:1
#, no-wrap
msgid "Laravel Sanctum"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:23
#, no-wrap
msgid ""
"- [Introduction](#introduction)\n"
"    - [How It Works](#how-it-works)\n"
"- [Installation](#installation)\n"
"- [Configuration](#configuration)\n"
"    - [Overriding Default Models](#overriding-default-models)\n"
"- [API Token Authentication](#api-token-authentication)\n"
"    - [Issuing API Tokens](#issuing-api-tokens)\n"
"    - [Token Abilities](#token-abilities)\n"
"    - [Protecting Routes](#protecting-routes)\n"
"    - [Revoking Tokens](#revoking-tokens)\n"
"- [SPA Authentication](#spa-authentication)\n"
"    - [Configuration](#spa-configuration)\n"
"    - [Authenticating](#spa-authenticating)\n"
"    - [Protecting Routes](#protecting-spa-routes)\n"
"    - [Authorizing Private Broadcast "
"Channels](#authorizing-private-broadcast-channels)\n"
"- [Mobile Application Authentication](#mobile-application-authentication)\n"
"    - [Issuing API Tokens](#issuing-mobile-api-tokens)\n"
"    - [Protecting Routes](#protecting-mobile-api-routes)\n"
"    - [Revoking Tokens](#revoking-mobile-api-tokens)\n"
"- [Testing](#testing)\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:25
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/sanctum.md:25
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:28
msgid ""
"Laravel Sanctum provides a featherweight authentication system for SPAs "
"(single page applications), mobile applications, and simple, token based "
"APIs. Sanctum allows each user of your application to generate multiple API "
"tokens for their account. These tokens may be granted abilities / scopes "
"which specify which actions the tokens are allowed to perform."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:30
#, no-wrap
msgid "<a name=\"how-it-works\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:30
#, no-wrap
msgid "How It Works"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:33
msgid ""
"Laravel Sanctum exists to solve two separate problems. Let's discuss each "
"before digging deeper into the library."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:35
#, no-wrap
msgid "<a name=\"how-it-works-api-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:35
#, no-wrap
msgid "API Tokens"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:38
msgid ""
"First, Sanctum is a simple package you may use to issue API tokens to your "
"users without the complication of OAuth. This feature is inspired by GitHub "
"and other applications which issue \"personal access tokens\". For example, "
"imagine the \"account settings\" of your application has a screen where a "
"user may generate an API token for their account. You may use Sanctum to "
"generate and manage those tokens. These tokens typically have a very long "
"expiration time (years), but may be manually revoked by the user at anytime."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:40
msgid ""
"Laravel Sanctum offers this feature by storing user API tokens in a single "
"database table and authenticating incoming HTTP requests via the "
"`Authorization` header which should contain a valid API token."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:42
#, no-wrap
msgid "<a name=\"how-it-works-spa-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/sanctum.md:42 docs/master/sanctum.md:202
#, no-wrap
msgid "SPA Authentication"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:45
msgid ""
"Second, Sanctum exists to offer a simple way to authenticate single page "
"applications (SPAs) that need to communicate with a Laravel powered "
"API. These SPAs might exist in the same repository as your Laravel "
"application or might be an entirely separate repository, such as a SPA "
"created using Vue CLI or a Next.js application."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:47
msgid ""
"For this feature, Sanctum does not use tokens of any kind. Instead, Sanctum "
"uses Laravel's built-in cookie based session authentication "
"services. Typically, Sanctum utilizes Laravel's `web` authentication guard "
"to accomplish this. This provides the benefits of CSRF protection, session "
"authentication, as well as protects against leakage of the authentication "
"credentials via XSS."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:49
msgid ""
"Sanctum will only attempt to authenticate using cookies when the incoming "
"request originates from your own SPA frontend. When Sanctum examines an "
"incoming HTTP request, it will first check for an authentication cookie and, "
"if none is present, Sanctum will then examine the `Authorization` header for "
"a valid API token."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:51
#, no-wrap
msgid ""
"> {tip} It is perfectly fine to use Sanctum only for API token "
"authentication or only for SPA authentication. Just because you use Sanctum "
"does not mean you are required to use both features it offers.\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:53
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/sanctum.md:53
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:56
msgid "You may install Laravel Sanctum via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:58
#, no-wrap
msgid "    composer require laravel/sanctum\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:60
msgid ""
"Next, you should publish the Sanctum configuration and migration files using "
"the `vendor:publish` Artisan command. The `sanctum` configuration file will "
"be placed in your application's `config` directory:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:62
#, no-wrap
msgid ""
"    php artisan vendor:publish "
"--provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:64
msgid ""
"Finally, you should run your database migrations. Sanctum will create one "
"database table in which to store API tokens:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:66
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:68
msgid ""
"Next, if you plan to utilize Sanctum to authenticate an SPA, you should add "
"Sanctum's middleware to your `api` middleware group within your "
"application's `app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:74
#, no-wrap
msgid ""
"    'api' => [\n"
"        "
"\\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:76
#, no-wrap
msgid "<a name=\"migration-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:76
#, no-wrap
msgid "Migration Customization"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:79
msgid ""
"If you are not going to use Sanctum's default migrations, you should call "
"the `Sanctum::ignoreMigrations` method in the `register` method of your "
"`App\\Providers\\AppServiceProvider` class. You may export the default "
"migrations by executing the following command: `php artisan vendor:publish "
"--tag=sanctum-migrations`"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:81
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:81 docs/master/sanctum.md:211
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:84
#, no-wrap
msgid "<a name=\"overriding-default-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:84
#, no-wrap
msgid "Overriding Default Models"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:87
msgid ""
"Although not typically required, you are free to extend the "
"`PersonalAccessToken` model used internally by Sanctum:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:89
#, no-wrap
msgid ""
"    use Laravel\\Sanctum\\PersonalAccessToken as "
"SanctumPersonalAccessToken;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:94
#, no-wrap
msgid ""
"    class PersonalAccessToken extends SanctumPersonalAccessToken\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:96
msgid ""
"Then, you may instruct Sanctum to use your custom model via the "
"`usePersonalAccessTokenModel` method provided by Sanctum. Typically, you "
"should call this method in the `boot` method of one of your application's "
"service providers:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:99
#, no-wrap
msgid ""
"    use App\\Models\\Passport\\PersonalAccessToken;\n"
"    use Laravel\\Sanctum\\Sanctum;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:109
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Sanctum::usePersonalAccessTokenModel(PersonalAccessToken::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:111
#, no-wrap
msgid "<a name=\"api-token-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/sanctum.md:111
#, no-wrap
msgid "API Token Authentication"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:114
#, no-wrap
msgid ""
"> {tip} You should not use API tokens to authenticate your own first-party "
"SPA. Instead, use Sanctum's built-in [SPA authentication "
"features](#spa-authentication).\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:116
#, no-wrap
msgid "<a name=\"issuing-api-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:116 docs/master/sanctum.md:322
#, no-wrap
msgid "Issuing API Tokens"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:119
msgid ""
"Sanctum allows you to issue API tokens / personal access tokens that may be "
"used to authenticate API requests to your application. When making requests "
"using API tokens, the token should be included in the `Authorization` header "
"as a `Bearer` token."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:121
msgid ""
"To begin issuing tokens for users, your User model should use the "
"`Laravel\\Sanctum\\HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:123
#, no-wrap
msgid "    use Laravel\\Sanctum\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:128
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, HasFactory, Notifiable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:130
msgid ""
"To issue a token, you may use the `createToken` method. The `createToken` "
"method returns a `Laravel\\Sanctum\\NewAccessToken` instance. API tokens are "
"hashed using SHA-256 hashing before being stored in your database, but you "
"may access the plain-text value of the token using the `plainTextToken` "
"property of the `NewAccessToken` instance. You should display this value to "
"the user immediately after the token has been created:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:132 docs/master/sanctum.md:182 docs/master/sanctum.md:279
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:135
#, no-wrap
msgid ""
"    Route::post('/tokens/create', function (Request $request) {\n"
"        $token = $request->user()->createToken($request->token_name);\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:138
#, no-wrap
msgid ""
"        return ['token' => $token->plainTextToken];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:140
msgid ""
"You may access all of the user's tokens using the `tokens` Eloquent "
"relationship provided by the `HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:144
#, no-wrap
msgid ""
"    foreach ($user->tokens as $token) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:146
#, no-wrap
msgid "<a name=\"token-abilities\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:146
#, no-wrap
msgid "Token Abilities"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:149
msgid ""
"Sanctum allows you to assign \"abilities\" to tokens. Abilities serve a "
"similar purpose as OAuth's \"scopes\". You may pass an array of string "
"abilities as the second argument to the `createToken` method:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:151
#, no-wrap
msgid ""
"    return $user->createToken('token-name', "
"['server:update'])->plainTextToken;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:153
msgid ""
"When handling an incoming request authenticated by Sanctum, you may "
"determine if the token has a given ability using the `tokenCan` method:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:157
#, no-wrap
msgid ""
"    if ($user->tokenCan('server:update')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:159
#, no-wrap
msgid "<a name=\"first-party-ui-initiated-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:159
#, no-wrap
msgid "First-Party UI Initiated Requests"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:162
msgid ""
"For convenience, the `tokenCan` method will always return `true` if the "
"incoming authenticated request was from your first-party SPA and you are "
"using Sanctum's built-in [SPA authentication](#spa-authentication)."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:164
msgid ""
"However, this does not necessarily mean that your application has to allow "
"the user to perform the action. Typically, your application's [authorization "
"policies](/docs/{{version}}/authorization#creating-policies) will determine "
"if the token has been granted the permission to perform the abilities as "
"well as check that the user instance itself should be allowed to perform the "
"action."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:166
msgid ""
"For example, if we imagine an application that manages servers, this might "
"mean checking that token is authorized to update servers **and** that the "
"server belongs to the user:"
msgstr ""

#. type: Code fence info string
#: docs/master/sanctum.md:167
#, no-wrap
msgid "php"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:167
#, no-wrap
msgid ""
"return $request->user()->id === $server->user_id &&\n"
"       $request->user()->tokenCan('server:update')\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:173
msgid ""
"At first, allowing the `tokenCan` method to be called and always return "
"`true` for first-party UI initiated requests may seem strange; however, it "
"is convenient to be able to always assume an API token is available and can "
"be inspected via the `tokenCan` method. By taking this approach, you may "
"always call the `tokenCan` method within your application's authorizations "
"policies without worrying about whether the request was triggered from your "
"application's UI or was initiated by one of your API's third-party "
"consumers."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:175
#, no-wrap
msgid "<a name=\"protecting-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:175 docs/master/sanctum.md:274 docs/master/sanctum.md:356
#, no-wrap
msgid "Protecting Routes"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:178
msgid ""
"To protect routes so that all incoming requests must be authenticated, you "
"should attach the `sanctum` authentication guard to your protected routes "
"within your `routes/web.php` and `routes/api.php` route files. This guard "
"will ensure that incoming requests are authenticated as either stateful, "
"cookie authenticated requests or contain a valid API token header if the "
"request is from a third party."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:180
msgid ""
"You may be wondering why we suggest that you authenticate the routes within "
"your application's `routes/web.php` file using the `sanctum` "
"guard. Remember, Sanctum will first attempt to authenticate incoming "
"requests using Laravel's typical session authentication cookie. If that "
"cookie is not present then Sanctum will attempt to authenticate the request "
"using a token in the request's `Authorization` header. In addition, "
"authenticating all requests using Sanctum ensures that we may always call "
"the `tokenCan` method on the currently authenticated user instance:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:186 docs/master/sanctum.md:283 docs/master/sanctum.md:363
#, no-wrap
msgid ""
"    Route::middleware('auth:sanctum')->get('/user', function (Request "
"$request) {\n"
"        return $request->user();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:188
#, no-wrap
msgid "<a name=\"revoking-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:188 docs/master/sanctum.md:365
#, no-wrap
msgid "Revoking Tokens"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:191
msgid ""
"You may \"revoke\" tokens by deleting them from your database using the "
"`tokens` relationship that is provided by the "
"`Laravel\\Sanctum\\HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:194 docs/master/sanctum.md:371
#, no-wrap
msgid ""
"    // Revoke all tokens...\n"
"    $user->tokens()->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:197
#, no-wrap
msgid ""
"    // Revoke the token that was used to authenticate the current "
"request...\n"
"    $request->user()->currentAccessToken()->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:200 docs/master/sanctum.md:374
#, no-wrap
msgid ""
"    // Revoke a specific token...\n"
"    $user->tokens()->where('id', $tokenId)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:202
#, no-wrap
msgid "<a name=\"spa-authentication\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:205
msgid ""
"Sanctum also exists to provide a simple method of authenticating single page "
"applications (SPAs) that need to communicate with a Laravel powered "
"API. These SPAs might exist in the same repository as your Laravel "
"application or might be an entirely separate repository."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:207
msgid ""
"For this feature, Sanctum does not use tokens of any kind. Instead, Sanctum "
"uses Laravel's built-in cookie based session authentication services. This "
"approach to authentication provides the benefits of CSRF protection, session "
"authentication, as well as protects against leakage of the authentication "
"credentials via XSS."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:209
#, no-wrap
msgid ""
"> {note} In order to authenticate, your SPA and API must share the same "
"top-level domain. However, they may be placed on different subdomains.\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:211
#, no-wrap
msgid "<a name=\"spa-configuration\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:214
#, no-wrap
msgid "<a name=\"configuring-your-first-party-domains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:214
#, no-wrap
msgid "Configuring Your First-Party Domains"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:217
msgid ""
"First, you should configure which domains your SPA will be making requests "
"from. You may configure these domains using the `stateful` configuration "
"option in your `sanctum` configuration file. This configuration setting "
"determines which domains will maintain \"stateful\" authentication using "
"Laravel session cookies when making requests to your API."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:219
#, no-wrap
msgid ""
"> {note} If you are accessing your application via a URL that includes a "
"port (`127.0.0.1:8000`), you should ensure that you include the port number "
"with the domain.\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:221
#, no-wrap
msgid "<a name=\"sanctum-middleware\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:221
#, no-wrap
msgid "Sanctum Middleware"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:224
msgid ""
"Next, you should add Sanctum's middleware to your `api` middleware group "
"within your `app/Http/Kernel.php` file. This middleware is responsible for "
"ensuring that incoming requests from your SPA can authenticate using "
"Laravel's session cookies, while still allowing requests from third parties "
"or mobile applications to authenticate using API tokens:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:226
#, no-wrap
msgid ""
"    use "
"Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:232
#, no-wrap
msgid ""
"    'api' => [\n"
"        EnsureFrontendRequestsAreStateful::class,\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:234
#, no-wrap
msgid "<a name=\"cors-and-cookies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:234
#, no-wrap
msgid "CORS & Cookies"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:237
msgid ""
"If you are having trouble authenticating with your application from an SPA "
"that executes on a separate subdomain, you have likely misconfigured your "
"CORS (Cross-Origin Resource Sharing) or session cookie settings."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:239
msgid ""
"You should ensure that your application's CORS configuration is returning "
"the `Access-Control-Allow-Credentials` header with a value of `True`. This "
"may be accomplished by setting the `supports_credentials` option within your "
"application's `config/cors.php` configuration file to `true`."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:241
msgid ""
"In addition, you should enable the `withCredentials` option on your "
"application's global `axios` instance. Typically, this should be performed "
"in your `resources/js/bootstrap.js` file. If you are not using Axios to make "
"HTTP requests from your frontend, you should perform the equivalent "
"configuration on your own HTTP client:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:243
#, no-wrap
msgid "    axios.defaults.withCredentials = true;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:245
msgid ""
"Finally, you should ensure your application's session cookie domain "
"configuration supports any subdomain of your root domain. You may accomplish "
"this by prefixing the domain with a leading `.` within your application's "
"`config/session.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:247
#, no-wrap
msgid "    'domain' => '.domain.com',\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:249
#, no-wrap
msgid "<a name=\"spa-authenticating\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:249
#, no-wrap
msgid "Authenticating"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:252
#, no-wrap
msgid "<a name=\"csrf-protection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:252
#, no-wrap
msgid "CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:255
msgid ""
"To authenticate your SPA, your SPA's \"login\" page should first make a "
"request to the `/sanctum/csrf-cookie` endpoint to initialize CSRF protection "
"for the application:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:259
#, no-wrap
msgid ""
"    axios.get('/sanctum/csrf-cookie').then(response => {\n"
"        // Login...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:261
msgid ""
"During this request, Laravel will set an `XSRF-TOKEN` cookie containing the "
"current CSRF token. This token should then be passed in an `X-XSRF-TOKEN` "
"header on subsequent requests, which some HTTP client libraries like Axios "
"and the Angular HttpClient will do automatically for you. If your JavaScript "
"HTTP library does not set the value for you, you will need to manually set "
"the `X-XSRF-TOKEN` header to match the value of the `XSRF-TOKEN` cookie that "
"is set by this route."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:263
#, no-wrap
msgid "<a name=\"logging-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/sanctum.md:263
#, no-wrap
msgid "Logging In"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:266
msgid ""
"Once CSRF protection has been initialized, you should make a `POST` request "
"to your Laravel application's `/login` route. This `/login` route may be "
"[implemented "
"manually](/docs/{{version}}/authentication#authenticating-users) or using a "
"headless authentication package like [Laravel "
"Fortify](/docs/{{version}}/fortify)."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:268
msgid ""
"If the login request is successful, you will be authenticated and subsequent "
"requests to your application's routes will automatically be authenticated "
"via the session cookie that the Laravel application issued to your "
"client. In addition, since your application already made a request to the "
"`/sanctum/csrf-cookie` route, subsequent requests should automatically "
"receive CSRF protection as long as your JavaScript HTTP client sends the "
"value of the `XSRF-TOKEN` cookie in the `X-XSRF-TOKEN` header."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:270
msgid ""
"Of course, if your user's session expires due to lack of activity, "
"subsequent requests to the Laravel application may receive 401 or 419 HTTP "
"error response. In this case, you should redirect the user to your SPA's "
"login page."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:272
#, no-wrap
msgid ""
"> {note} You are free to write your own `/login` endpoint; however, you "
"should ensure that it authenticates the user using the standard, [session "
"based authentication services that Laravel "
"provides](/docs/{{version}}/authentication#authenticating-users). Typically, "
"this means using the `web` authentication guard.\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:274
#, no-wrap
msgid "<a name=\"protecting-spa-routes\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:277
msgid ""
"To protect routes so that all incoming requests must be authenticated, you "
"should attach the `sanctum` authentication guard to your API routes within "
"your `routes/api.php` file. This guard will ensure that incoming requests "
"are authenticated as either a stateful authenticated requests from your SPA "
"or contain a valid API token header if the request is from a third party:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:285
#, no-wrap
msgid "<a name=\"authorizing-private-broadcast-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/sanctum.md:285
#, no-wrap
msgid "Authorizing Private Broadcast Channels"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:288
msgid ""
"If your SPA needs to authenticate with [private / presence broadcast "
"channels](/docs/{{version}}/broadcasting#authorizing-channels), you should "
"place the `Broadcast::routes` method call within your `routes/api.php` file:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:290
#, no-wrap
msgid "    Broadcast::routes(['middleware' => ['auth:sanctum']]);\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:292
msgid ""
"Next, in order for Pusher's authorization requests to succeed, you will need "
"to provide a custom Pusher `authorizer` when initializing [Laravel "
"Echo](/docs/{{version}}/broadcasting#installing-laravel-echo). This allows "
"your application to configure Pusher to use the `axios` instance that is "
"[properly configured for cross-domain requests](#cors-and-cookies):"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:315
#, no-wrap
msgid ""
"    window.Echo = new Echo({\n"
"        broadcaster: \"pusher\",\n"
"        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n"
"        encrypted: true,\n"
"        key: process.env.MIX_PUSHER_APP_KEY,\n"
"        authorizer: (channel, options) => {\n"
"            return {\n"
"                authorize: (socketId, callback) => {\n"
"                    axios.post('/api/broadcasting/auth', {\n"
"                        socket_id: socketId,\n"
"                        channel_name: channel.name\n"
"                    })\n"
"                    .then(response => {\n"
"                        callback(false, response.data);\n"
"                    })\n"
"                    .catch(error => {\n"
"                        callback(true, error);\n"
"                    });\n"
"                }\n"
"            };\n"
"        },\n"
"    })\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:317
#, no-wrap
msgid "<a name=\"mobile-application-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/sanctum.md:317
#, no-wrap
msgid "Mobile Application Authentication"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:320
msgid ""
"You may also use Sanctum tokens to authenticate your mobile application's "
"requests to your API. The process for authenticating mobile application "
"requests is similar to authenticating third-party API requests; however, "
"there are small differences in how you will issue the API tokens."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:322
#, no-wrap
msgid "<a name=\"issuing-mobile-api-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:325
msgid ""
"To get started, create a route that accepts the user's email / username, "
"password, and device name, then exchanges those credentials for a new "
"Sanctum token. The \"device name\" given to this endpoint is for "
"informational purposes and may be any value you wish. In general, the device "
"name value should be a name the user would recognize, such as \"Nuno's "
"iPhone 12\"."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:327
msgid ""
"Typically, you will make a request to the token endpoint from your mobile "
"application's \"login\" screen. The endpoint will return the plain-text API "
"token which may then be stored on the mobile device and used to make "
"additional API requests:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:332
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Validation\\ValidationException;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:339
#, no-wrap
msgid ""
"    Route::post('/sanctum/token', function (Request $request) {\n"
"        $request->validate([\n"
"            'email' => 'required|email',\n"
"            'password' => 'required',\n"
"            'device_name' => 'required',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:341
#, no-wrap
msgid "        $user = User::where('email', $request->email)->first();\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:347
#, no-wrap
msgid ""
"        if (! $user || ! Hash::check($request->password, $user->password)) "
"{\n"
"            throw ValidationException::withMessages([\n"
"                'email' => ['The provided credentials are incorrect.'],\n"
"            ]);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:350
#, no-wrap
msgid ""
"        return $user->createToken($request->device_name)->plainTextToken;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:352
msgid ""
"When the mobile application uses the token to make an API request to your "
"application, it should pass the token in the `Authorization` header as a "
"`Bearer` token."
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:354
#, no-wrap
msgid ""
"> {tip} When issuing tokens for a mobile application, you are also free to "
"specify [token abilities](#token-abilities)\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:356
#, no-wrap
msgid "<a name=\"protecting-mobile-api-routes\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:359
msgid ""
"As previously documented, you may protect routes so that all incoming "
"requests must be authenticated by attaching the `sanctum` authentication "
"guard to the routes:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:365
#, no-wrap
msgid "<a name=\"revoking-mobile-api-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:368
msgid ""
"To allow users to revoke API tokens issued to mobile devices, you may list "
"them by name, along with a \"Revoke\" button, within an \"account settings\" "
"portion of your web application's UI. When the user clicks the \"Revoke\" "
"button, you can delete the token from the database. Remember, you can access "
"a user's API tokens via the `tokens` relationship provided by the "
"`Laravel\\Sanctum\\HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:376
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/sanctum.md:376
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:379
msgid ""
"While testing, the `Sanctum::actingAs` method may be used to authenticate a "
"user and specify which abilities should be granted to their token:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:382
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Laravel\\Sanctum\\Sanctum;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:389
#, no-wrap
msgid ""
"    public function test_task_list_can_be_retrieved()\n"
"    {\n"
"        Sanctum::actingAs(\n"
"            User::factory()->create(),\n"
"            ['view-tasks']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:391
#, no-wrap
msgid "        $response = $this->get('/api/task');\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:394
#, no-wrap
msgid ""
"        $response->assertOk();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:396
msgid ""
"If you would like to grant all abilities to the token, you should include "
"`*` in the ability list provided to the `actingAs` method:"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:400
#, no-wrap
msgid ""
"    Sanctum::actingAs(\n"
"        User::factory()->create(),\n"
"        ['*']\n"
"    );\n"
msgstr ""
