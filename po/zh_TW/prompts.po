msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/prompts.pot\n"
"X-Crowdin-File-ID: 190\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-06-30 08:27\n"

#: docs/10.x/prompts.md:block 1 (header)
msgid "Prompts"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Available Prompts](#available-prompts)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Text](#text)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Password](#password)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Confirm](#confirm)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Select](#select)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Multi-select](#multiselect)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Suggest](#suggest)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Search](#search)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Multi-search](#multisearch)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Informational Messages](#informational-messages)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Tables](#tables)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Spin](#spin)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Progress Bar](#progress)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Terminal Considerations](#terminal-considerations)"
msgstr ""

#: docs/10.x/prompts.md:block 2 (unordered list)
msgid "[Unsupported Environments & Fallbacks](#fallbacks)"
msgstr ""

#: docs/10.x/prompts.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/prompts.md:block 5 (paragraph)
msgid "[Laravel Prompts](https://github.com/laravel/prompts) is a PHP package for adding beautiful and user-friendly forms to your command-line applications, with browser-like features including placeholder text and validation."
msgstr ""

#: docs/10.x/prompts.md:block 7 (paragraph)
msgid "Laravel Prompts is perfect for accepting user input in your [Artisan console commands](/docs/{{version}}/artisan#writing-commands), but it may also be used in any command-line PHP project."
msgstr ""

#: docs/10.x/prompts.md:block 8 (quote)
msgid "**Note** Laravel Prompts supports macOS, Linux, and Windows with WSL. For more information, please see our documentation on [unsupported environments & fallbacks](#fallbacks)."
msgstr ""

#: docs/10.x/prompts.md:block 10 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/prompts.md:block 11 (paragraph)
msgid "Laravel Prompts is already included with the latest release of Laravel."
msgstr ""

#: docs/10.x/prompts.md:block 12 (paragraph)
msgid "Laravel Prompts may also be installed in your other PHP projects by using the Composer package manager:"
msgstr ""

#: docs/10.x/prompts.md:block 13 (code)
msgid "composer require laravel/prompts\n"
msgstr ""

#: docs/10.x/prompts.md:block 15 (header)
msgid "Available Prompts"
msgstr ""

#: docs/10.x/prompts.md:block 17 (header)
msgid "Text"
msgstr ""

#: docs/10.x/prompts.md:block 18 (paragraph)
msgid "The `text` function will prompt the user with the given question, accept their input, and then return it:"
msgstr ""

#: docs/10.x/prompts.md:block 19 (code)
msgid "use function Laravel\\Prompts\\text;\n\n"
"$name = text('What is your name?');\n"
msgstr ""

#: docs/10.x/prompts.md:block 20 (paragraph)
msgid "You may also include placeholder text, a default value, and an informational hint:"
msgstr ""

#: docs/10.x/prompts.md:block 21 (code)
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    default: $user?->name,\n"
"    hint: 'This will be displayed on your profile.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 23 (header)
msgid "Required Values"
msgstr ""

#: docs/10.x/prompts.md:block 24 (paragraph)
msgid "If you require a value to be entered, you may pass the `required` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 25 (code)
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    required: true\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 26 (paragraph)
msgid "If you would like to customize the validation message, you may also pass a string:"
msgstr ""

#: docs/10.x/prompts.md:block 27 (code)
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    required: 'Your name is required.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 29 (header)
msgid "Additional Validation"
msgstr ""

#: docs/10.x/prompts.md:block 30 (paragraph)
msgid "Finally, if you would like to perform additional validation logic, you may pass a closure to the `validate` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 31 (code)
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 3 => 'The name must be at least 3 characters.',\n"
"        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n"
"        default => null\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 32 (paragraph)
msgid "The closure will receive the value that has been entered and may return an error message, or `null` if the validation passes."
msgstr ""

#: docs/10.x/prompts.md:block 34 (header)
msgid "Password"
msgstr ""

#: docs/10.x/prompts.md:block 35 (paragraph)
msgid "The `password` function is similar to the `text` function, but the user's input will be masked as they type in the console. This is useful when asking for sensitive information such as passwords:"
msgstr ""

#: docs/10.x/prompts.md:block 36 (code)
msgid "use function Laravel\\Prompts\\password;\n\n"
"$password = password('What is your password?');\n"
msgstr ""

#: docs/10.x/prompts.md:block 37 (paragraph)
msgid "You may also include placeholder text and an informational hint:"
msgstr ""

#: docs/10.x/prompts.md:block 38 (code)
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    placeholder: 'password',\n"
"    hint: 'Minimum 8 characters.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 42 (code)
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    required: true\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 44 (code)
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    required: 'The password is required.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 48 (code)
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 8 => 'The password must be at least 8 characters.',\n"
"        default => null\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 51 (header)
msgid "Confirm"
msgstr ""

#: docs/10.x/prompts.md:block 52 (paragraph)
msgid "If you need to ask the user for a \"yes or no\" confirmation, you may use the `confirm` function. Users may use the arrow keys or press `y` or `n` to select their response. This function will return either `true` or `false`."
msgstr ""

#: docs/10.x/prompts.md:block 53 (code)
msgid "use function Laravel\\Prompts\\confirm;\n\n"
"$confirmed = confirm('Do you accept the terms?');\n"
msgstr ""

#: docs/10.x/prompts.md:block 54 (paragraph)
msgid "You may also include a default value, customized wording for the \"Yes\" and \"No\" labels, and an informational hint:"
msgstr ""

#: docs/10.x/prompts.md:block 55 (code)
msgid "$confirmed = confirm(\n"
"    label: 'Do you accept the terms?',\n"
"    default: false,\n"
"    yes: 'I accept',\n"
"    no: 'I decline',\n"
"    hint: 'The terms must be accepted to continue.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 57 (header)
msgid "Requiring \"Yes\""
msgstr ""

#: docs/10.x/prompts.md:block 58 (paragraph)
msgid "If necessary, you may require your users to select \"Yes\" by passing the `required` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 59 (code)
msgid "$confirmed = confirm(\n"
"    label: 'Do you accept the terms?',\n"
"    required: true\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 61 (code)
msgid "$confirmed = confirm(\n"
"    label: 'Do you accept the terms?',\n"
"    required: 'You must accept the terms to continue.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 63 (header)
msgid "Select"
msgstr ""

#: docs/10.x/prompts.md:block 64 (paragraph)
msgid "If you need the user to select from a predefined set of choices, you may use the `select` function:"
msgstr ""

#: docs/10.x/prompts.md:block 65 (code)
msgid "use function Laravel\\Prompts\\select;\n\n"
"$role = select(\n"
"    'What role should the user have?',\n"
"    ['Member', 'Contributor', 'Owner'],\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 66 (paragraph)
msgid "You may also specify the default choice and an informational hint:"
msgstr ""

#: docs/10.x/prompts.md:block 67 (code)
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: ['Member', 'Contributor', 'Owner'],\n"
"    default: 'Owner',\n"
"    hint: 'The role may be changed at any time.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 68 (paragraph)
msgid "You may also pass an associative array to the `options` argument to have the selected key returned instead of its value:"
msgstr ""

#: docs/10.x/prompts.md:block 69 (code)
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: [\n"
"        'member' => 'Member',\n"
"        'contributor' => 'Contributor',\n"
"        'owner' => 'Owner'\n"
"    ],\n"
"    default: 'owner'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 70 (paragraph)
msgid "Up to five options will be displayed before the list begins to scroll. You may customize this by passing the `scroll` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 71 (code)
msgid "$role = select(\n"
"    label: 'Which category would you like to assign?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    scroll: 10\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 73 (header)
msgid "Validation"
msgstr ""

#: docs/10.x/prompts.md:block 74 (paragraph)
msgid "Unlike other prompt functions, the `select` function doesn't accept the `required` argument because it is not possible to select nothing. However, you may pass a closure to the `validate` argument if you need to present an option but prevent it from being selected:"
msgstr ""

#: docs/10.x/prompts.md:block 75 (code)
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: [\n"
"        'member' => 'Member',\n"
"        'contributor' => 'Contributor',\n"
"        'owner' => 'Owner'\n"
"    ],\n"
"    validate: fn (string $value) =>\n"
"        $value === 'owner' && User::where('role', 'owner')->exists()\n"
"            ? 'An owner already exists.'\n"
"            : null\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 76 (paragraph)
msgid "If the `options` argument is an associative array, then the closure will receive the selected key, otherwise it will receive the selected value. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: docs/10.x/prompts.md:block 78 (header)
msgid "Multi-select"
msgstr ""

#: docs/10.x/prompts.md:block 79 (paragraph)
msgid "If you need to the user to be able to select multiple options, you may use the `multiselect` function:"
msgstr ""

#: docs/10.x/prompts.md:block 80 (code)
msgid "use function Laravel\\Prompts\\multiselect;\n\n"
"$permissions = multiselect(\n"
"    'What permissions should be assigned?',\n"
"    ['Read', 'Create', 'Update', 'Delete']\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 81 (paragraph)
msgid "You may also specify default choices and an informational hint:"
msgstr ""

#: docs/10.x/prompts.md:block 82 (code)
msgid "use function Laravel\\Prompts\\multiselect;\n\n"
"$permissions = multiselect(\n"
"    label: 'What permissions should be assigned?',\n"
"    options: ['Read', 'Create', 'Update', 'Delete'],\n"
"    default: ['Read', 'Create'],\n"
"    hint: 'Permissions may be updated at any time.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 83 (paragraph)
msgid "You may also pass an associative array to the `options` argument to return the selected options' keys instead of their values:"
msgstr ""

#: docs/10.x/prompts.md:block 84 (code)
msgid "$permissions = multiselect(\n"
"    label: 'What permissions should be assigned?',\n"
"    options: [\n"
"        'read' => 'Read',\n"
"        'create' => 'Create',\n"
"        'update' => 'Update',\n"
"        'delete' => 'Delete'\n"
"    ],\n"
"    default: ['read', 'create']\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 86 (code)
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    scroll: 10\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 88 (header)
msgid "Requiring a Value"
msgstr ""

#: docs/10.x/prompts.md:block 89 (paragraph)
msgid "By default, the user may select zero or more options. You may pass the `required` argument to enforce one or more options instead:"
msgstr ""

#: docs/10.x/prompts.md:block 90 (code)
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    required: true,\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 91 (paragraph)
msgid "If you would like to customize the validation message, you may provide a string to the `required` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 92 (code)
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    required: 'You must select at least one category',\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 95 (paragraph)
msgid "You may pass a closure to the `validate` argument if you need to present an option but prevent it from being selected:"
msgstr ""

#: docs/10.x/prompts.md:block 96 (code)
msgid "$permissions = select(\n"
"    label: 'What permissions should the user have?',\n"
"    options: [\n"
"        'read' => 'Read',\n"
"        'create' => 'Create',\n"
"        'update' => 'Update',\n"
"        'delete' => 'Delete'\n"
"    ],\n"
"    validate: fn (array $values) => ! in_array('read', $values)\n"
"        ? 'All users require the read permission.'\n"
"        : null\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 97 (paragraph)
msgid "If the `options` argument is an associative array then the closure will receive the selected keys, otherwise it will receive the selected values. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: docs/10.x/prompts.md:block 99 (header)
msgid "Suggest"
msgstr ""

#: docs/10.x/prompts.md:block 100 (paragraph)
msgid "The `suggest` function can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr ""

#: docs/10.x/prompts.md:block 101 (code)
msgid "use function Laravel\\Prompts\\suggest;\n\n"
"$name = suggest('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr ""

#: docs/10.x/prompts.md:block 102 (paragraph)
msgid "Alternatively, you may pass a closure as the second argument to the `suggest` function. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far and return an array of options for auto-completion:"
msgstr ""

#: docs/10.x/prompts.md:block 103 (code)
msgid "$name = suggest(\n"
"    'What is your name?',\n"
"    fn ($value) => collect(['Taylor', 'Dayle'])\n"
"        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n"
")\n"
msgstr ""

#: docs/10.x/prompts.md:block 105 (code)
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    placeholder: 'E.g. Taylor',\n"
"    default: $user?->name,\n"
"    hint: 'This will be displayed on your profile.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 109 (code)
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    required: true\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 111 (code)
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    required: 'Your name is required.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 115 (code)
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 3 => 'The name must be at least 3 characters.',\n"
"        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n"
"        default => null\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 118 (header)
msgid "Search"
msgstr ""

#: docs/10.x/prompts.md:block 119 (paragraph)
msgid "If you have a lot of options for the user to select from, the `search` function allows the user to type a search query to filter the results before using the arrow keys to select an option:"
msgstr ""

#: docs/10.x/prompts.md:block 120 (code)
msgid "use function Laravel\\Prompts\\search;\n\n"
"$id = search(\n"
"    'Search for the user that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : []\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 121 (paragraph)
msgid "The closure will receive the text that has been typed by the user so far and must return an array of options. If you return an associative array then the selected option's key will be returned, otherwise its value will be returned instead."
msgstr ""

#: docs/10.x/prompts.md:block 123 (code)
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    hint: 'The user will receive an email immediately.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 125 (code)
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    scroll: 10\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 128 (paragraph)
msgid "If you would like to perform additional validation logic, you may pass a closure to the `validate` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 129 (code)
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    validate: function (int|string $value) {\n"
"        $user = User::findOrFail($value);\n\n"
"        if ($user->opted_out) {\n"
"            return 'This user has opted-out of receiving mail.';\n"
"        }\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 130 (paragraph)
msgid "If the `options` closure returns an associative array, then the closure will receive the selected key, otherwise, it will receive the selected value. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: docs/10.x/prompts.md:block 132 (header)
msgid "Multi-search"
msgstr ""

#: docs/10.x/prompts.md:block 133 (paragraph)
msgid "If you have a lot of searchable options and need the user to be able to select multiple items, the `multisearch` function allows the user to type a search query to filter the results before using the arrow keys and space-bar to select options:"
msgstr ""

#: docs/10.x/prompts.md:block 134 (code)
msgid "use function Laravel\\Prompts\\multisearch;\n\n"
"$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : []\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 135 (paragraph)
msgid "The closure will receive the text that has been typed by the user so far and must return an array of options. If you return an associative array then the selected options' keys will be returned; otherwise, their values will be returned instead."
msgstr ""

#: docs/10.x/prompts.md:block 137 (code)
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    hint: 'The user will receive an email immediately.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 138 (paragraph)
msgid "Up to five options will be displayed before the list begins to scroll. You may customize this by providing the `scroll` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 139 (code)
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    scroll: 10\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 143 (code)
msgid "$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    required: true,\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 144 (paragraph)
msgid "If you would like to customize the validation message, you may also provide a string to the `required` argument:"
msgstr ""

#: docs/10.x/prompts.md:block 145 (code)
msgid "$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    required: 'You must select at least one user.'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 149 (code)
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    validate: function (array $values) {\n"
"        $optedOut = User::where('name', 'like', '%a%')->findMany($values);\n\n"
"        if ($optedOut->isNotEmpty()) {\n"
"            return $optedOut->pluck('name')->join(', ', ', and ').' have opted out.';\n"
"        }\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 150 (paragraph)
msgid "If the `options` closure returns an associative array, then the closure will receive the selected keys; otherwise, it will receive the selected values. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: docs/10.x/prompts.md:block 152 (header)
msgid "Informational Messages"
msgstr ""

#: docs/10.x/prompts.md:block 153 (paragraph)
msgid "The `note`, `info`, `warning`, `error`, and `alert` functions may be used to display informational messages:"
msgstr ""

#: docs/10.x/prompts.md:block 154 (code)
msgid "use function Laravel\\Prompts\\info;\n\n"
"info('Package installed successfully.');\n"
msgstr ""

#: docs/10.x/prompts.md:block 156 (header)
msgid "Tables"
msgstr ""

#: docs/10.x/prompts.md:block 157 (paragraph)
msgid "The `table` function makes it easy to display multiple rows and columns of data. All you need to do is provide the column names and the data for the table:"
msgstr ""

#: docs/10.x/prompts.md:block 158 (code)
msgid "use function Laravel\\Prompts\\table;\n\n"
"table(\n"
"    ['Name', 'Email'],\n"
"    User::all(['name', 'email'])\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 160 (header)
msgid "Spin"
msgstr ""

#: docs/10.x/prompts.md:block 161 (paragraph)
msgid "The `spin` function displays a spinner along with an optional message while executing a specified callback. It serves to indicate ongoing processes and returns the callback's results upon completion:"
msgstr ""

#: docs/10.x/prompts.md:block 162 (code)
msgid "use function Laravel\\Prompts\\spin;\n\n"
"$response = spin(\n"
"    fn () => Http::get('http://example.com'),\n"
"    'Fetching response...'\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 163 (quote)
msgid "**Warning** The `spin` function requires the `pcntl` PHP extension to animate the spinner. When this extension is not available, a static version of the spinner will appear instead."
msgstr ""

#: docs/10.x/prompts.md:block 165 (header)
msgid "Progress Bars"
msgstr ""

#: docs/10.x/prompts.md:block 166 (paragraph)
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `progress` function, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr ""

#: docs/10.x/prompts.md:block 167 (code)
msgid "use function Laravel\\Prompts\\progress;\n\n"
"$users = progress(\n"
"    label: 'Updating users',\n"
"    steps: User::all(),\n"
"    callback: fn ($user) => $this->performTask($user),\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 168 (paragraph)
msgid "The `progress` function acts like a map function and will return an array containing the return value of each iteration of your callback."
msgstr ""

#: docs/10.x/prompts.md:block 169 (paragraph)
msgid "The callback may also accept the `\\Laravel\\Prompts\\Progress` instance, allowing you to modify the label and hint on each iteration:"
msgstr ""

#: docs/10.x/prompts.md:block 170 (code)
msgid "$users = progress(\n"
"    label: 'Updating users',\n"
"    steps: User::all(),\n"
"    callback: function ($user, $progress) {\n"
"        $progress\n"
"            ->label(\"Updating {$user->name}\")\n"
"            ->hint(\"Created on {$user->created_at}\");\n\n"
"        return $this->performTask($user);\n"
"    },\n"
"    hint: 'This may take some time.',\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 171 (paragraph)
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar via the `advance` method after processing each item:"
msgstr ""

#: docs/10.x/prompts.md:block 172 (code)
msgid "$progress = progress(label: 'Updating users', steps: 10);\n\n"
"$users = User::all();\n\n"
"$progress->start();\n\n"
"foreach ($users as $user) {\n"
"    $this->performTask($user);\n\n"
"    $progress->advance();\n"
"}\n\n"
"$progress->finish();\n"
msgstr ""

#: docs/10.x/prompts.md:block 174 (header)
msgid "Terminal Considerations"
msgstr ""

#: docs/10.x/prompts.md:block 176 (header)
msgid "Terminal Width"
msgstr ""

#: docs/10.x/prompts.md:block 177 (paragraph)
msgid "If the length of any label, option, or validation message exceeds the number of \"columns\" in the user's terminal, it will be automatically truncated to fit. Consider minimizing the length of these strings if your users may be using narrower terminals. A typically safe maximum length is 74 characters to support an 80-character terminal."
msgstr ""

#: docs/10.x/prompts.md:block 179 (header)
msgid "Terminal Height"
msgstr ""

#: docs/10.x/prompts.md:block 180 (paragraph)
msgid "For any prompts that accept the `scroll` argument, the configured value will automatically be reduced to fit the height of the user's terminal, including space for a validation message."
msgstr ""

#: docs/10.x/prompts.md:block 182 (header)
msgid "Unsupported Environments & Fallbacks"
msgstr ""

#: docs/10.x/prompts.md:block 183 (paragraph)
msgid "Laravel Prompts supports macOS, Linux, and Windows with WSL. Due to limitations in the Windows version of PHP, it is not currently possible to use Laravel Prompts on Windows outside of WSL."
msgstr ""

#: docs/10.x/prompts.md:block 184 (paragraph)
msgid "For this reason, Laravel Prompts supports falling back to an alternative implementation such as the [Symfony Console Question Helper](https://symfony.com/doc/current/components/console/helpers/questionhelper.html)."
msgstr ""

#: docs/10.x/prompts.md:block 185 (quote)
msgid "**Note** When using Laravel Prompts with the Laravel framework, fallbacks for each prompt have been configured for you and will be automatically enabled in unsupported environments."
msgstr ""

#: docs/10.x/prompts.md:block 187 (header)
msgid "Fallback Conditions"
msgstr ""

#: docs/10.x/prompts.md:block 188 (paragraph)
msgid "If you are not using Laravel or need to customize when the fallback behavior is used, you may pass a boolean to the `fallbackWhen` static method on the `Prompt` class:"
msgstr ""

#: docs/10.x/prompts.md:block 189 (code)
msgid "use Laravel\\Prompts\\Prompt;\n\n"
"Prompt::fallbackWhen(\n"
"    ! $input->isInteractive() || windows_os() || app()->runningUnitTests()\n"
");\n"
msgstr ""

#: docs/10.x/prompts.md:block 191 (header)
msgid "Fallback Behavior"
msgstr ""

#: docs/10.x/prompts.md:block 192 (paragraph)
msgid "If you are not using Laravel or need to customize the fallback behavior, you may pass a closure to the `fallbackUsing` static method on each prompt class:"
msgstr ""

#: docs/10.x/prompts.md:block 193 (code)
msgid "use Laravel\\Prompts\\TextPrompt;\n"
"use Symfony\\Component\\Console\\Question\\Question;\n"
"use Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n"
"TextPrompt::fallbackUsing(function (TextPrompt $prompt) use ($input, $output) {\n"
"    $question = (new Question($prompt->label, $prompt->default ?: null))\n"
"        ->setValidator(function ($answer) use ($prompt) {\n"
"            if ($prompt->required && $answer === null) {\n"
"                throw new \\RuntimeException(is_string($prompt->required) ? $prompt->required : 'Required.');\n"
"            }\n\n"
"            if ($prompt->validate) {\n"
"                $error = ($prompt->validate)($answer ?? '');\n\n"
"                if ($error) {\n"
"                    throw new \\RuntimeException($error);\n"
"                }\n"
"            }\n\n"
"            return $answer;\n"
"        });\n\n"
"    return (new SymfonyStyle($input, $output))\n"
"        ->askQuestion($question);\n"
"});\n"
msgstr ""

#: docs/10.x/prompts.md:block 194 (paragraph)
msgid "Fallbacks must be configured individually for each prompt class. The closure will receive an instance of the prompt class and must return an appropriate type for the prompt."
msgstr ""

