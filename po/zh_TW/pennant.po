msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/pennant.pot\n"
"X-Crowdin-File-ID: 183\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-11-05 13:30\n"

#: docs/10.x/pennant.md:block 1 (header)
msgid "Laravel Pennant"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Defining Features](#defining-features)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Class Based Features](#class-based-features)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Checking Features](#checking-features)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Conditional Execution](#conditional-execution)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[The `HasFeatures` Trait](#the-has-features-trait)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Blade Directive](#blade-directive)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Middleware](#middleware)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[In-Memory Cache](#in-memory-cache)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Scope](#scope)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Specifying The Scope](#specifying-the-scope)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Default Scope](#default-scope)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Nullable Scope](#nullable-scope)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Identifying Scope](#identifying-scope)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Serializing Scope](#serializing-scope)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Rich Feature Values](#rich-feature-values)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Retrieving Multiple Features](#retrieving-multiple-features)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Eager Loading](#eager-loading)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Updating Values](#updating-values)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Bulk Updates](#bulk-updates)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Purging Features](#purging-features)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Testing](#testing)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Adding Custom Pennant Drivers](#adding-custom-pennant-drivers)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Implementing The Driver](#implementing-the-driver)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Registering The Driver](#registering-the-driver)"
msgstr ""

#: docs/10.x/pennant.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/10.x/pennant.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/pennant.md:block 5 (paragraph)
msgid "[Laravel Pennant](https://github.com/laravel/pennant) is a simple and light-weight feature flag package - without the cruft. Feature flags enable you to incrementally roll out new application features with confidence, A/B test new interface designs, complement a trunk-based development strategy, and much more."
msgstr ""

#: docs/10.x/pennant.md:block 7 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/pennant.md:block 8 (paragraph)
msgid "First, install Pennant into your project using the Composer package manager:"
msgstr ""

#: docs/10.x/pennant.md:block 9 (code)
msgid "composer require laravel/pennant\n"
msgstr ""

#: docs/10.x/pennant.md:block 10 (paragraph)
msgid "Next, you should publish the Pennant configuration and migration files using the `vendor:publish` Artisan command:"
msgstr ""

#: docs/10.x/pennant.md:block 11 (code)
msgid "php artisan vendor:publish --provider=\"Laravel\\Pennant\\PennantServiceProvider\"\n"
msgstr ""

#: docs/10.x/pennant.md:block 12 (paragraph)
msgid "Finally, you should run your application's database migrations. This will create a `features` table that Pennant uses to power its `database` driver:"
msgstr ""

#: docs/10.x/pennant.md:block 13 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/pennant.md:block 15 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/pennant.md:block 16 (paragraph)
msgid "After publishing Pennant's assets, its configuration file will be located at `config/pennant.php`. This configuration file allows you to specify the default storage mechanism that will be used by Pennant to store resolved feature flag values."
msgstr ""

#: docs/10.x/pennant.md:block 17 (paragraph)
msgid "Pennant includes support for storing resolved feature flag values in an in-memory array via the `array` driver. Or, Pennant can store resolved feature flag values persistently in a relational database via the `database` driver, which is the default storage mechanism used by Pennant."
msgstr ""

#: docs/10.x/pennant.md:block 19 (header)
msgid "Defining Features"
msgstr ""

#: docs/10.x/pennant.md:block 20 (paragraph)
msgid "To define a feature, you may use the `define` method offered by the `Feature` facade. You will need to provide a name for the feature, as well as a closure that will be invoked to resolve the feature's initial value."
msgstr ""

#: docs/10.x/pennant.md:block 21 (paragraph)
msgid "Typically, features are defined in a service provider using the `Feature` facade. The closure will receive the \"scope\" for the feature check. Most commonly, the scope is the currently authenticated user. In this example, we will define a feature for incrementally rolling out a new API to our application's users:"
msgstr ""

#: docs/10.x/pennant.md:block 22 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Feature::define('new-api', fn (User $user) => match (true) {\n"
"            $user->isInternalTeamMember() => true,\n"
"            $user->isHighTrafficCustomer() => false,\n"
"            default => Lottery::odds(1 / 100),\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 23 (paragraph)
msgid "As you can see, we have the following rules for our feature:"
msgstr ""

#: docs/10.x/pennant.md:block 24 (unordered list)
msgid "All internal team members should be using the new API."
msgstr ""

#: docs/10.x/pennant.md:block 24 (unordered list)
msgid "Any high traffic customers should not be using the new API."
msgstr ""

#: docs/10.x/pennant.md:block 24 (unordered list)
msgid "Otherwise, the feature should be randomly assigned to users with a 1 in 100 chance of being active."
msgstr ""

#: docs/10.x/pennant.md:block 25 (paragraph)
msgid "The first time the `new-api` feature is checked for a given user, the result of the closure will be stored by the storage driver. The next time the feature is checked against the same user, the value will be retrieved from storage and the closure will not be invoked."
msgstr ""

#: docs/10.x/pennant.md:block 26 (paragraph)
msgid "For convenience, if a feature definition only returns a lottery, you may omit the closure completely:"
msgstr ""

#: docs/10.x/pennant.md:block 27 (code)
msgid "Feature::define('site-redesign', Lottery::odds(1, 1000));\n"
msgstr ""

#: docs/10.x/pennant.md:block 29 (header)
msgid "Class Based Features"
msgstr ""

#: docs/10.x/pennant.md:block 30 (paragraph)
msgid "Pennant also allows you to define class based features. Unlike closure based feature definitions, there is no need to register a class based feature in a service provider. To create a class based feature, you may invoke the `pennant:feature` Artisan command. By default the feature class will be placed in your application's `app/Features` directory:"
msgstr ""

#: docs/10.x/pennant.md:block 31 (code)
msgid "php artisan pennant:feature NewApi\n"
msgstr ""

#: docs/10.x/pennant.md:block 32 (paragraph)
msgid "When writing a feature class, you only need to define a `resolve` method, which will be invoked to resolve the feature's initial value for a given scope. Again, the scope will typically be the currently authenticated user:"
msgstr ""

#: docs/10.x/pennant.md:block 33 (code)
msgid "<?php\n\n"
"namespace App\\Features;\n\n"
"use Illuminate\\Support\\Lottery;\n\n"
"class NewApi\n"
"{\n"
"    /**\n"
"     * Resolve the feature's initial value.\n"
"     */\n"
"    public function resolve(User $user): mixed\n"
"    {\n"
"        return match (true) {\n"
"            $user->isInternalTeamMember() => true,\n"
"            $user->isHighTrafficCustomer() => false,\n"
"            default => Lottery::odds(1 / 100),\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 34 (quote)
msgid "**Note** Feature classes are resolved via the [container](/docs/{{version}}/container), so you may inject dependencies into the feature class's constructor when needed."
msgstr ""

#: docs/10.x/pennant.md:block 36 (header)
msgid "Checking Features"
msgstr ""

#: docs/10.x/pennant.md:block 37 (paragraph)
msgid "To determine if a feature is active, you may use the `active` method on the `Feature` facade. By default, features are checked against the currently authenticated user:"
msgstr ""

#: docs/10.x/pennant.md:block 38 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class PodcastController\n"
"{\n"
"    /**\n"
"     * Display a listing of the resource.\n"
"     */\n"
"    public function index(Request $request): Response\n"
"    {\n"
"        return Feature::active('new-api')\n"
"                ? $this->resolveNewApiResponse($request)\n"
"                : $this->resolveLegacyApiResponse($request);\n"
"    }\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 39 (paragraph)
msgid "Although features are checked against the currently authenticated user by default, you may easily check the feature against another user or [scope](#scope). To accomplish this, use the `for` method offered by the `Feature` facade:"
msgstr ""

#: docs/10.x/pennant.md:block 40 (code)
msgid "return Feature::for($user)->active('new-api')\n"
"        ? $this->resolveNewApiResponse($request)\n"
"        : $this->resolveLegacyApiResponse($request);\n"
msgstr ""

#: docs/10.x/pennant.md:block 41 (paragraph)
msgid "Pennant also offers some additional convenience methods that may prove useful when determining if a feature is active or not:"
msgstr ""

#: docs/10.x/pennant.md:block 42 (code)
msgid "// Determine if all of the given features are active...\n"
"Feature::allAreActive(['new-api', 'site-redesign']);\n\n"
"// Determine if any of the given features are active...\n"
"Feature::someAreActive(['new-api', 'site-redesign']);\n\n"
"// Determine if a feature is inactive...\n"
"Feature::inactive('new-api');\n\n"
"// Determine if all of the given features are inactive...\n"
"Feature::allAreInactive(['new-api', 'site-redesign']);\n\n"
"// Determine if any of the given features are inactive...\n"
"Feature::someAreInactive(['new-api', 'site-redesign']);\n"
msgstr ""

#: docs/10.x/pennant.md:block 43 (quote)
msgid "**Note** When using Pennant outside of an HTTP context, such as in an Artisan command or a queued job, you should typically [explicitly specify the feature's scope](#specifying-the-scope). Alternatively, you may define a [default scope](#default-scope) that accounts for both authenticated HTTP contexts and unauthenticated contexts."
msgstr ""

#: docs/10.x/pennant.md:block 45 (header)
msgid "Checking Class Based Features"
msgstr ""

#: docs/10.x/pennant.md:block 46 (paragraph)
msgid "For class based features, you should provide the class name when checking the feature:"
msgstr ""

#: docs/10.x/pennant.md:block 47 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Features\\NewApi;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class PodcastController\n"
"{\n"
"    /**\n"
"     * Display a listing of the resource.\n"
"     */\n"
"    public function index(Request $request): Response\n"
"    {\n"
"        return Feature::active(NewApi::class)\n"
"                ? $this->resolveNewApiResponse($request)\n"
"                : $this->resolveLegacyApiResponse($request);\n"
"    }\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 49 (header)
msgid "Conditional Execution"
msgstr ""

#: docs/10.x/pennant.md:block 50 (paragraph)
msgid "The `when` method may be used to fluently execute a given closure if a feature is active. Additionally, a second closure may be provided and will be executed if the feature is inactive:"
msgstr ""

#: docs/10.x/pennant.md:block 51 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Features\\NewApi;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class PodcastController\n"
"{\n"
"    /**\n"
"     * Display a listing of the resource.\n"
"     */\n"
"    public function index(Request $request): Response\n"
"    {\n"
"        return Feature::when(NewApi::class,\n"
"            fn () => $this->resolveNewApiResponse($request),\n"
"            fn () => $this->resolveLegacyApiResponse($request),\n"
"        );\n"
"    }\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 52 (paragraph)
msgid "The `unless` method serves as the inverse of the `when` method, executing the first closure if the feature is inactive:"
msgstr ""

#: docs/10.x/pennant.md:block 53 (code)
msgid "return Feature::unless(NewApi::class,\n"
"    fn () => $this->resolveLegacyApiResponse($request),\n"
"    fn () => $this->resolveNewApiResponse($request),\n"
");\n"
msgstr ""

#: docs/10.x/pennant.md:block 55 (header)
msgid "The `HasFeatures` Trait"
msgstr ""

#: docs/10.x/pennant.md:block 56 (paragraph)
msgid "Pennant's `HasFeatures` trait may be added to your application's `User` model (or any other model that has features) to provide a fluent, convenient way to check features directly from the model:"
msgstr ""

#: docs/10.x/pennant.md:block 57 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Laravel\\Pennant\\Concerns\\HasFeatures;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use HasFeatures;\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 58 (paragraph)
msgid "Once the trait has been added to your model, you may easily check features by invoking the `features` method:"
msgstr ""

#: docs/10.x/pennant.md:block 59 (code)
msgid "if ($user->features()->active('new-api')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 60 (paragraph)
msgid "Of course, the `features` method provides access to many other convenient methods for interacting with features:"
msgstr ""

#: docs/10.x/pennant.md:block 61 (code)
msgid "// Values...\n"
"$value = $user->features()->value('purchase-button')\n"
"$values = $user->features()->values(['new-api', 'purchase-button']);\n\n"
"// State...\n"
"$user->features()->active('new-api');\n"
"$user->features()->allAreActive(['new-api', 'server-api']);\n"
"$user->features()->someAreActive(['new-api', 'server-api']);\n\n"
"$user->features()->inactive('new-api');\n"
"$user->features()->allAreInactive(['new-api', 'server-api']);\n"
"$user->features()->someAreInactive(['new-api', 'server-api']);\n\n"
"// Conditional execution...\n"
"$user->features()->when('new-api',\n"
"    fn () => /* ... */,\n"
"    fn () => /* ... */,\n"
");\n\n"
"$user->features()->unless('new-api',\n"
"    fn () => /* ... */,\n"
"    fn () => /* ... */,\n"
");\n"
msgstr ""

#: docs/10.x/pennant.md:block 63 (header)
msgid "Blade Directive"
msgstr ""

#: docs/10.x/pennant.md:block 64 (paragraph)
msgid "To make checking features in Blade a seamless experience, Pennant offers a `@feature` directive:"
msgstr ""

#: docs/10.x/pennant.md:block 65 (code)
msgid "@feature('site-redesign')\n"
"    <!-- 'site-redesign' is active -->\n"
"@else\n"
"    <!-- 'site-redesign' is inactive -->\n"
"@endfeature\n"
msgstr ""

#: docs/10.x/pennant.md:block 67 (header)
msgid "Middleware"
msgstr ""

#: docs/10.x/pennant.md:block 68 (paragraph)
msgid "Pennant also includes a [middleware](/docs/{{version}}/middleware) that may be used to verify the currently authenticated user has access to a feature before a route is even invoked. You may assign the middleware to a route and specify the features that are required to access the route. If any of the specified features are inactive for the currently authenticated user, a `400 Bad Request` HTTP response will be returned by the route. Multiple features may be passed to the static `using` method."
msgstr ""

#: docs/10.x/pennant.md:block 69 (code)
msgid "use Illuminate\\Support\\Facades\\Route;\n"
"use Laravel\\Pennant\\Middleware\\EnsureFeaturesAreActive;\n\n"
"Route::get('/api/servers', function () {\n"
"    // ...\n"
"})->middleware(EnsureFeaturesAreActive::using('new-api', 'servers-api'));\n"
msgstr ""

#: docs/10.x/pennant.md:block 71 (header)
msgid "Customizing The Response"
msgstr ""

#: docs/10.x/pennant.md:block 72 (paragraph)
msgid "If you would like to customize the response that is returned by the middleware when one of the listed features is inactive, you may use the `whenInactive` method provided by the `EnsureFeaturesAreActive` middleware. Typically, this method should be invoked within the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/10.x/pennant.md:block 73 (code)
msgid "use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Laravel\\Pennant\\Middleware\\EnsureFeaturesAreActive;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    EnsureFeaturesAreActive::whenInactive(\n"
"        function (Request $request, array $features) {\n"
"            return new Response(status: 403);\n"
"        }\n"
"    );\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 75 (header)
msgid "In-Memory Cache"
msgstr ""

#: docs/10.x/pennant.md:block 76 (paragraph)
msgid "When checking a feature, Pennant will create an in-memory cache of the result. If you are using the `database` driver, this means that re-checking the same feature flag within a single request will not trigger additional database queries. This also ensures that the feature has a consistent result for the duration of the request."
msgstr ""

#: docs/10.x/pennant.md:block 77 (paragraph)
msgid "If you need to manually flush the in-memory cache, you may use the `flushCache` method offered by the `Feature` facade:"
msgstr ""

#: docs/10.x/pennant.md:block 78 (code)
msgid "Feature::flushCache();\n"
msgstr ""

#: docs/10.x/pennant.md:block 80 (header)
msgid "Scope"
msgstr ""

#: docs/10.x/pennant.md:block 82 (header)
msgid "Specifying The Scope"
msgstr ""

#: docs/10.x/pennant.md:block 83 (paragraph)
msgid "As discussed, features are typically checked against the currently authenticated user. However, this may not always suit your needs. Therefore, it is possible to specify the scope you would like to check a given feature against via the `Feature` facade's `for` method:"
msgstr ""

#: docs/10.x/pennant.md:block 85 (paragraph)
msgid "Of course, feature scopes are not limited to \"users\". Imagine you have built a new billing experience that you are rolling out to entire teams rather than individual users. Perhaps you would like the oldest teams to have a slower rollout than the newer teams. Your feature resolution closure might look something like the following:"
msgstr ""

#: docs/10.x/pennant.md:block 86 (code)
msgid "use App\\Models\\Team;\n"
"use Carbon\\Carbon;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"Feature::define('billing-v2', function (Team $team) {\n"
"    if ($team->created_at->isAfter(new Carbon('1st Jan, 2023'))) {\n"
"        return true;\n"
"    }\n\n"
"    if ($team->created_at->isAfter(new Carbon('1st Jan, 2019'))) {\n"
"        return Lottery::odds(1 / 100);\n"
"    }\n\n"
"    return Lottery::odds(1 / 1000);\n"
"});\n"
msgstr ""

#: docs/10.x/pennant.md:block 87 (paragraph)
msgid "You will notice that the closure we have defined is not expecting a `User`, but is instead expecting a `Team` model. To determine if this feature is active for a user's team, you should pass the team to the `for` method offered by the `Feature` facade:"
msgstr ""

#: docs/10.x/pennant.md:block 88 (code)
msgid "if (Feature::for($user->team)->active('billing-v2')) {\n"
"    return redirect()->to('/billing/v2');\n"
"}\n\n"
"// ...\n"
msgstr ""

#: docs/10.x/pennant.md:block 90 (header)
msgid "Default Scope"
msgstr ""

#: docs/10.x/pennant.md:block 91 (paragraph)
msgid "It is also possible to customize the default scope Pennant uses to check features. For example, maybe all of your features are checked against the currently authenticated user's team instead of the user. Instead of having to call `Feature::for($user->team)` every time you check a feature, you may instead specify the team as the default scope. Typically, this should be done in one of your application's service providers:"
msgstr ""

#: docs/10.x/pennant.md:block 92 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Auth;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Feature::resolveScopeUsing(fn ($driver) => Auth::user()?->team);\n\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 93 (paragraph)
msgid "If no scope is explicitly provided via the `for` method, the feature check will now use the currently authenticated user's team as the default scope:"
msgstr ""

#: docs/10.x/pennant.md:block 94 (code)
msgid "Feature::active('billing-v2');\n\n"
"// Is now equivalent to...\n\n"
"Feature::for($user->team)->active('billing-v2');\n"
msgstr ""

#: docs/10.x/pennant.md:block 96 (header)
msgid "Nullable Scope"
msgstr ""

#: docs/10.x/pennant.md:block 97 (paragraph)
msgid "If the scope you provide when checking a feature is `null` and the feature's definition does not support `null` via a nullable type or by including `null` in a union type, Pennant will automatically return `false` as the feature's result value."
msgstr ""

#: docs/10.x/pennant.md:block 98 (paragraph)
msgid "So, if the scope you are passing to a feature is potentially `null` and you want the feature's value resolver to be invoked, you should account for that in your feature's definition. A `null` scope may occur if you check a feature within an Artisan command, queued job, or unauthenticated route. Since there is usually not an authenticated user in these contexts, the default scope will be `null`."
msgstr ""

#: docs/10.x/pennant.md:block 99 (paragraph)
msgid "If you do not always [explicitly specify your feature scope](#specifying-the-scope) then you should ensure the scope's type is \"nullable\" and handle the `null` scope value within your feature definition logic:"
msgstr ""

#: docs/10.x/pennant.md:block 100 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"Feature::define('new-api', fn (User $user) => match (true) {// [tl! remove]\n"
"Feature::define('new-api', fn (User|null $user) => match (true) {// [tl! add]\n"
"    $user === null => true,// [tl! add]\n"
"    $user->isInternalTeamMember() => true,\n"
"    $user->isHighTrafficCustomer() => false,\n"
"    default => Lottery::odds(1 / 100),\n"
"});\n"
msgstr ""

#: docs/10.x/pennant.md:block 102 (header)
msgid "Identifying Scope"
msgstr ""

#: docs/10.x/pennant.md:block 103 (paragraph)
msgid "Pennant's built-in `array` and `database` storage drivers know how to properly store scope identifiers for all PHP data types as well as Eloquent models. However, if your application utilizes a third-party Pennant driver, that driver may not know how to properly store an identifier for an Eloquent model or other custom types in your application."
msgstr ""

#: docs/10.x/pennant.md:block 104 (paragraph)
msgid "In light of this, Pennant allows you to format scope values for storage by implementing the `FeatureScopeable` contract on the objects in your application that are used as Pennant scopes."
msgstr ""

#: docs/10.x/pennant.md:block 105 (paragraph)
msgid "For example, imagine you are using two different feature drivers in a single application: the built-in `database` driver and a third-party \"Flag Rocket\" driver. The \"Flag Rocket\" driver does not know how to properly store an Eloquent model. Instead, it requires a `FlagRocketUser` instance. By implementing the `toFeatureIdentifier` defined by the `FeatureScopeable` contract, we can customize the storable scope value provided to each driver used by our application:"
msgstr ""

#: docs/10.x/pennant.md:block 106 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use FlagRocket\\FlagRocketUser;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Pennant\\Contracts\\FeatureScopeable;\n\n"
"class User extends Model implements FeatureScopeable\n"
"{\n"
"    /**\n"
"     * Cast the object to a feature scope identifier for the given driver.\n"
"     */\n"
"    public function toFeatureIdentifier(string $driver): mixed\n"
"    {\n"
"        return match($driver) {\n"
"            'database' => $this,\n"
"            'flag-rocket' => FlagRocketUser::fromId($this->flag_rocket_id),\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 108 (header)
msgid "Serializing Scope"
msgstr ""

#: docs/10.x/pennant.md:block 109 (paragraph)
msgid "By default, Pennant will use a fully qualified class name when storing a feature associated with an Eloquent model. If you are already using an [Eloquent morph map](/docs/{{version}}/eloquent-relationships#custom-polymorphic-types), you may choose to have Pennant also use the morph map to decouple the stored feature from your application structure."
msgstr ""

#: docs/10.x/pennant.md:block 110 (paragraph)
msgid "To achieve this, after defining your Eloquent morph map in a service provider, you may invoke the `Feature` facade's `useMorphMap` method:"
msgstr ""

#: docs/10.x/pennant.md:block 111 (code)
msgid "use Illuminate\\Database\\Eloquent\\Relations\\Relation;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"Relation::enforceMorphMap([\n"
"    'post' => 'App\\Models\\Post',\n"
"    'video' => 'App\\Models\\Video',\n"
"]);\n\n"
"Feature::useMorphMap();\n"
msgstr ""

#: docs/10.x/pennant.md:block 113 (header)
msgid "Rich Feature Values"
msgstr ""

#: docs/10.x/pennant.md:block 114 (paragraph)
msgid "Until now, we have primarily shown features as being in a binary state, meaning they are either \"active\" or \"inactive\", but Pennant also allows you to store rich values as well."
msgstr ""

#: docs/10.x/pennant.md:block 115 (paragraph)
msgid "For example, imagine you are testing three new colors for the \"Buy now\" button of your application. Instead of returning `true` or `false` from the feature definition, you may instead return a string:"
msgstr ""

#: docs/10.x/pennant.md:block 116 (code)
msgid "use Illuminate\\Support\\Arr;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"Feature::define('purchase-button', fn (User $user) => Arr::random([\n"
"    'blue-sapphire',\n"
"    'seafoam-green',\n"
"    'tart-orange',\n"
"]));\n"
msgstr ""

#: docs/10.x/pennant.md:block 117 (paragraph)
msgid "You may retrieve the value of the `purchase-button` feature using the `value` method:"
msgstr ""

#: docs/10.x/pennant.md:block 118 (code)
msgid "$color = Feature::value('purchase-button');\n"
msgstr ""

#: docs/10.x/pennant.md:block 119 (paragraph)
msgid "Pennant's included Blade directive also makes it easy to conditionally render content based on the current value of the feature:"
msgstr ""

#: docs/10.x/pennant.md:block 120 (code)
msgid "@feature('purchase-button', 'blue-sapphire')\n"
"    <!-- 'blue-sapphire' is active -->\n"
"@elsefeature('purchase-button', 'seafoam-green')\n"
"    <!-- 'seafoam-green' is active -->\n"
"@elsefeature('purchase-button', 'tart-orange')\n"
"    <!-- 'tart-orange' is active -->\n"
"@endfeature\n"
msgstr ""

#: docs/10.x/pennant.md:block 121 (quote)
msgid "**Note** When using rich values, it is important to know that a feature is considered \"active\" when it has any value other than `false`."
msgstr ""

#: docs/10.x/pennant.md:block 122 (paragraph)
msgid "When calling the [conditional `when`](#conditional-execution) method, the feature's rich value will be provided to the first closure:"
msgstr ""

#: docs/10.x/pennant.md:block 123 (code)
msgid "Feature::when('purchase-button',\n"
"    fn ($color) => /* ... */,\n"
"    fn () => /* ... */,\n"
");\n"
msgstr ""

#: docs/10.x/pennant.md:block 124 (paragraph)
msgid "Likewise, when calling the conditional `unless` method, the feature's rich value will be provided to the optional second closure:"
msgstr ""

#: docs/10.x/pennant.md:block 125 (code)
msgid "Feature::unless('purchase-button',\n"
"    fn () => /* ... */,\n"
"    fn ($color) => /* ... */,\n"
");\n"
msgstr ""

#: docs/10.x/pennant.md:block 127 (header)
msgid "Retrieving Multiple Features"
msgstr ""

#: docs/10.x/pennant.md:block 128 (paragraph)
msgid "The `values` method allows the retrieval of multiple features for a given scope:"
msgstr ""

#: docs/10.x/pennant.md:block 129 (code)
msgid "Feature::values(['billing-v2', 'purchase-button']);\n\n"
"// [\n"
"//     'billing-v2' => false,\n"
"//     'purchase-button' => 'blue-sapphire',\n"
"// ]\n"
msgstr ""

#: docs/10.x/pennant.md:block 130 (paragraph)
msgid "Or, you may use the `all` method to retrieve the values of all defined features for a given scope:"
msgstr ""

#: docs/10.x/pennant.md:block 131 (code)
msgid "Feature::all();\n\n"
"// [\n"
"//     'billing-v2' => false,\n"
"//     'purchase-button' => 'blue-sapphire',\n"
"//     'site-redesign' => true,\n"
"// ]\n"
msgstr ""

#: docs/10.x/pennant.md:block 132 (paragraph)
msgid "However, class based features are dynamically registered and are not known by Pennant until they are explicitly checked. This means your application's class based features may not appear in the results returned by the `all` method if they have not already been checked during the current request."
msgstr ""

#: docs/10.x/pennant.md:block 133 (paragraph)
msgid "If you would like to ensure that feature classes are always included when using the `all` method, you may use Pennant's feature discovery capabilities. To get started, invoke the `discover` method in one of your application's service providers:"
msgstr ""

#: docs/10.x/pennant.md:block 134 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Feature::discover();\n\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 135 (paragraph)
msgid "The `discover` method will register all of the feature classes in your application's `app/Features` directory. The `all` method will now include these classes in its results, regardless of whether they have been checked during the current request:"
msgstr ""

#: docs/10.x/pennant.md:block 136 (code)
msgid "Feature::all();\n\n"
"// [\n"
"//     'App\\Features\\NewApi' => true,\n"
"//     'billing-v2' => false,\n"
"//     'purchase-button' => 'blue-sapphire',\n"
"//     'site-redesign' => true,\n"
"// ]\n"
msgstr ""

#: docs/10.x/pennant.md:block 138 (header)
msgid "Eager Loading"
msgstr ""

#: docs/10.x/pennant.md:block 139 (paragraph)
msgid "Although Pennant keeps an in-memory cache of all resolved features for a single request, it is still possible to encounter performance issues. To alleviate this, Pennant offers the ability to eager load feature values."
msgstr ""

#: docs/10.x/pennant.md:block 140 (paragraph)
msgid "To illustrate this, imagine that we are checking if a feature is active within a loop:"
msgstr ""

#: docs/10.x/pennant.md:block 141 (code)
msgid "use Laravel\\Pennant\\Feature;\n\n"
"foreach ($users as $user) {\n"
"    if (Feature::for($user)->active('notifications-beta')) {\n"
"        $user->notify(new RegistrationSuccess);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 142 (paragraph)
msgid "Assuming we are using the database driver, this code will execute a database query for every user in the loop - executing potentially hundreds of queries. However, using Pennant's `load` method, we can remove this potential performance bottleneck by eager loading the feature values for a collection of users or scopes:"
msgstr ""

#: docs/10.x/pennant.md:block 143 (code)
msgid "Feature::for($users)->load(['notifications-beta']);\n\n"
"foreach ($users as $user) {\n"
"    if (Feature::for($user)->active('notifications-beta')) {\n"
"        $user->notify(new RegistrationSuccess);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 144 (paragraph)
msgid "To load feature values only when they have not already been loaded, you may use the `loadMissing` method:"
msgstr ""

#: docs/10.x/pennant.md:block 145 (code)
msgid "Feature::for($users)->loadMissing([\n"
"    'new-api',\n"
"    'purchase-button',\n"
"    'notifications-beta',\n"
"]);\n"
msgstr ""

#: docs/10.x/pennant.md:block 147 (header)
msgid "Updating Values"
msgstr ""

#: docs/10.x/pennant.md:block 148 (paragraph)
msgid "When a feature's value is resolved for the first time, the underlying driver will store the result in storage. This is often necessary to ensure a consistent experience for your users across requests. However, at times, you may want to manually update the feature's stored value."
msgstr ""

#: docs/10.x/pennant.md:block 149 (paragraph)
msgid "To accomplish this, you may use the `activate` and `deactivate` methods to toggle a feature \"on\" or \"off\":"
msgstr ""

#: docs/10.x/pennant.md:block 150 (code)
msgid "use Laravel\\Pennant\\Feature;\n\n"
"// Activate the feature for the default scope...\n"
"Feature::activate('new-api');\n\n"
"// Deactivate the feature for the given scope...\n"
"Feature::for($user->team)->deactivate('billing-v2');\n"
msgstr ""

#: docs/10.x/pennant.md:block 151 (paragraph)
msgid "It is also possible to manually set a rich value for a feature by providing a second argument to the `activate` method:"
msgstr ""

#: docs/10.x/pennant.md:block 152 (code)
msgid "Feature::activate('purchase-button', 'seafoam-green');\n"
msgstr ""

#: docs/10.x/pennant.md:block 153 (paragraph)
msgid "To instruct Pennant to forget the stored value for a feature, you may use the `forget` method. When the feature is checked again, Pennant will resolve the feature's value from its feature definition:"
msgstr ""

#: docs/10.x/pennant.md:block 154 (code)
msgid "Feature::forget('purchase-button');\n"
msgstr ""

#: docs/10.x/pennant.md:block 156 (header)
msgid "Bulk Updates"
msgstr ""

#: docs/10.x/pennant.md:block 157 (paragraph)
msgid "To update stored feature values in bulk, you may use the `activateForEveryone` and `deactivateForEveryone` methods."
msgstr ""

#: docs/10.x/pennant.md:block 158 (paragraph)
msgid "For example, imagine you are now confident in the `new-api` feature's stability and have landed on the best `'purchase-button'` color for your checkout flow - you can update the stored value for all users accordingly:"
msgstr ""

#: docs/10.x/pennant.md:block 159 (code)
msgid "use Laravel\\Pennant\\Feature;\n\n"
"Feature::activateForEveryone('new-api');\n\n"
"Feature::activateForEveryone('purchase-button', 'seafoam-green');\n"
msgstr ""

#: docs/10.x/pennant.md:block 160 (paragraph)
msgid "Alternatively, you may deactivate the feature for all users:"
msgstr ""

#: docs/10.x/pennant.md:block 161 (code)
msgid "Feature::deactivateForEveryone('new-api');\n"
msgstr ""

#: docs/10.x/pennant.md:block 162 (quote)
msgid "**Note** This will only update the resolved feature values that have been stored by Pennant's storage driver. You will also need to update the feature definition in your application."
msgstr ""

#: docs/10.x/pennant.md:block 164 (header)
msgid "Purging Features"
msgstr ""

#: docs/10.x/pennant.md:block 165 (paragraph)
msgid "Sometimes, it can be useful to purge an entire feature from storage. This is typically necessary if you have removed the feature from your application or you have made adjustments to the feature's definition that you would like to rollout to all users."
msgstr ""

#: docs/10.x/pennant.md:block 166 (paragraph)
msgid "You may remove all stored values for a feature using the `purge` method:"
msgstr ""

#: docs/10.x/pennant.md:block 167 (code)
msgid "// Purging a single feature...\n"
"Feature::purge('new-api');\n\n"
"// Purging multiple features...\n"
"Feature::purge(['new-api', 'purchase-button']);\n"
msgstr ""

#: docs/10.x/pennant.md:block 168 (paragraph)
msgid "If you would like to purge *all* features from storage, you may invoke the `purge` method without any arguments:"
msgstr ""

#: docs/10.x/pennant.md:block 169 (code)
msgid "Feature::purge();\n"
msgstr ""

#: docs/10.x/pennant.md:block 170 (paragraph)
msgid "As it can be useful to purge features as part of your application's deployment pipeline, Pennant includes a `pennant:purge` Artisan command:"
msgstr ""

#: docs/10.x/pennant.md:block 171 (code)
msgid "php artisan pennant:purge new-api\n\n"
"php artisan pennant:purge new-api purchase-button\n"
msgstr ""

#: docs/10.x/pennant.md:block 173 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/pennant.md:block 174 (paragraph)
msgid "When testing code that interacts with feature flags, the easiest way to control the feature flag's returned value in your tests is to simply re-define the feature. For example, imagine you have the following feature defined in one of your application's service provider:"
msgstr ""

#: docs/10.x/pennant.md:block 175 (code)
msgid "use Illuminate\\Support\\Arr;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"Feature::define('purchase-button', fn () => Arr::random([\n"
"    'blue-sapphire',\n"
"    'seafoam-green',\n"
"    'tart-orange',\n"
"]));\n"
msgstr ""

#: docs/10.x/pennant.md:block 176 (paragraph)
msgid "To modify the feature's returned value in your tests, you may re-define the feature at the beginning of the test. The following test will always pass, even though the `Arr::random()` implementation is still present in the service provider:"
msgstr ""

#: docs/10.x/pennant.md:block 177 (code)
msgid "use Laravel\\Pennant\\Feature;\n\n"
"public function test_it_can_control_feature_values()\n"
"{\n"
"    Feature::define('purchase-button', 'seafoam-green');\n\n"
"    $this->assertSame('seafoam-green', Feature::value('purchase-button'));\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 178 (paragraph)
msgid "The same approach may be used for class based features:"
msgstr ""

#: docs/10.x/pennant.md:block 179 (code)
msgid "use App\\Features\\NewApi;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"public function test_it_can_control_feature_values()\n"
"{\n"
"    Feature::define(NewApi::class, true);\n\n"
"    $this->assertTrue(Feature::value(NewApi::class));\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 180 (paragraph)
msgid "If your feature is returning a `Lottery` instance, there are a handful of useful [testing helpers available](/docs/{{version}}/helpers#testing-lotteries)."
msgstr ""

#: docs/10.x/pennant.md:block 182 (header)
msgid "Store Configuration"
msgstr ""

#: docs/10.x/pennant.md:block 183 (paragraph)
msgid "You may configure the store that Pennant will use during testing by defining the `PENNANT_STORE` environment variable in your application's `phpunit.xml` file:"
msgstr ""

#: docs/10.x/pennant.md:block 184 (code)
msgid "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<phpunit colors=\"true\">\n"
"    <!-- ... -->\n"
"    <php>\n"
"        <env name=\"PENNANT_STORE\" value=\"array\"/>\n"
"        <!-- ... -->\n"
"    </php>\n"
"</phpunit>\n"
msgstr ""

#: docs/10.x/pennant.md:block 186 (header)
msgid "Adding Custom Pennant Drivers"
msgstr ""

#: docs/10.x/pennant.md:block 188 (header)
msgid "Implementing The Driver"
msgstr ""

#: docs/10.x/pennant.md:block 189 (paragraph)
msgid "If none of Pennant's existing storage drivers fit your application's needs, you may write your own storage driver. Your custom driver should implement the `Laravel\\Pennant\\Contracts\\Driver` interface:"
msgstr ""

#: docs/10.x/pennant.md:block 190 (code)
msgid "<?php\n\n"
"namespace App\\Extensions;\n\n"
"use Laravel\\Pennant\\Contracts\\Driver;\n\n"
"class RedisFeatureDriver implements Driver\n"
"{\n"
"    public function define(string $feature, callable $resolver): void {}\n"
"    public function defined(): array {}\n"
"    public function getAll(array $features): array {}\n"
"    public function get(string $feature, mixed $scope): mixed {}\n"
"    public function set(string $feature, mixed $scope, mixed $value): void {}\n"
"    public function setForAllScopes(string $feature, mixed $value): void {}\n"
"    public function delete(string $feature, mixed $scope): void {}\n"
"    public function purge(array|null $features): void {}\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 191 (paragraph)
msgid "Now, we just need to implement each of these methods using a Redis connection. For an example of how to implement each of these methods, take a look at the `Laravel\\Pennant\\Drivers\\DatabaseDriver` in the [Pennant source code](https://github.com/laravel/pennant/blob/1.x/src/Drivers/DatabaseDriver.php)"
msgstr ""

#: docs/10.x/pennant.md:block 192 (quote)
msgid "**Note** Laravel does not ship with a directory to contain your extensions. You are free to place them anywhere you like. In this example, we have created an `Extensions` directory to house the `RedisFeatureDriver`."
msgstr ""

#: docs/10.x/pennant.md:block 194 (header)
msgid "Registering The Driver"
msgstr ""

#: docs/10.x/pennant.md:block 195 (paragraph)
msgid "Once your driver has been implemented, you are ready to register it with Laravel. To add additional drivers to Pennant, you may use the `extend` method provided by the `Feature` facade. You should call the `extend` method from the `boot` method of one of your application's [service provider](/docs/{{version}}/providers):"
msgstr ""

#: docs/10.x/pennant.md:block 196 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Extensions\\RedisFeatureDriver;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Pennant\\Feature;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Feature::extend('redis', function (Application $app) {\n"
"            return new RedisFeatureDriver($app->make('redis'), $app->make('events'), []);\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 197 (paragraph)
msgid "Once the driver has been registered, you may use the `redis` driver in your application's `config/pennant.php` configuration file:"
msgstr ""

#: docs/10.x/pennant.md:block 198 (code)
msgid "'stores' => [\n\n"
"    'redis' => [\n"
"        'driver' => 'redis',\n"
"        'connection' => null,\n"
"    ],\n\n"
"    // ...\n\n"
"],\n"
msgstr ""

#: docs/10.x/pennant.md:block 200 (header)
msgid "Events"
msgstr ""

#: docs/10.x/pennant.md:block 201 (paragraph)
msgid "Pennant dispatches a variety of events that can be useful when tracking feature flags throughout your application."
msgstr ""

#: docs/10.x/pennant.md:block 202 (header)
msgid "`Laravel\\Pennant\\Events\\RetrievingKnownFeature`"
msgstr ""

#: docs/10.x/pennant.md:block 203 (paragraph)
msgid "This event is dispatched the first time a known feature is retrieved during a request for a specific scope. This event can be useful to create and track metrics against the feature flags that are being used throughout your application."
msgstr ""

#: docs/10.x/pennant.md:block 204 (header)
msgid "`Laravel\\Pennant\\Events\\RetrievingUnknownFeature`"
msgstr ""

#: docs/10.x/pennant.md:block 205 (paragraph)
msgid "This event is dispatched the first time an unknown feature is retrieved during a request for a specific scope. This event can be useful if you have intended to remove a feature flag, but may have accidentally left some stray references to it throughout your application."
msgstr ""

#: docs/10.x/pennant.md:block 206 (paragraph)
msgid "For example, you may find it useful to listen for this event and `report` or throw an exception when it occurs:"
msgstr ""

#: docs/10.x/pennant.md:block 207 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Laravel\\Pennant\\Events\\RetrievingUnknownFeature;\n\n"
"class EventServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any other events for your application.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Event::listen(function (RetrievingUnknownFeature $event) {\n"
"            report(\"Resolving unknown feature [{$event->feature}].\");\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/pennant.md:block 208 (header)
msgid "`Laravel\\Pennant\\Events\\DynamicallyDefiningFeature`"
msgstr ""

#: docs/10.x/pennant.md:block 209 (paragraph)
msgid "This event is dispatched when a class based feature is being dynamically checked for the first time during a request."
msgstr ""

#: docs/master/pennant.md:block 5 (paragraph)
msgid "[Laravel Pennant](https://github.com/laravel/pennant) is a simple and lightweight feature flag package - without the cruft. Feature flags enable you to incrementally roll out new application features with confidence, A/B test new interface designs, compliment a trunk-based development strategy, and much more."
msgstr ""

#: docs/master/pennant.md:block 68 (paragraph)
msgid "Pennant also includes a [middleware](/docs/{{version}}/middleware) that may be used to verify the currently authenticated user has access to a feature before a route is even invoked. To get started, you should add a middleware alias for the `EnsureFeaturesAreActive` middleware to your application's `app/Http/Kernel.php` file:"
msgstr ""

#: docs/master/pennant.md:block 69 (code)
msgid "use Laravel\\Pennant\\Middleware\\EnsureFeaturesAreActive;\n\n"
"protected $middlewareAliases = [\n"
"    // ...\n"
"    'features' => EnsureFeaturesAreActive::class,\n"
"];\n"
msgstr ""

#: docs/master/pennant.md:block 70 (paragraph)
msgid "Next, you may assign the middleware to a route and specify the features that are required to access the route. If any of the specified features are inactive for the currently authenticated user, a `400 Bad Request` HTTP response will be returned by the route. Multiple features may be specified using a comma-delimited list:"
msgstr ""

#: docs/master/pennant.md:block 71 (code)
msgid "Route::get('/api/servers', function () {\n"
"    // ...\n"
"})->middleware(['features:new-api,servers-api']);\n"
msgstr ""

#: docs/master/pennant.md:block 99 (paragraph)
msgid "If the scope you are passing to a feature is potentially `null`, you should account for that in your feature's definition. A `null` scope may occur if you check a feature within an Artisan command, queued job, or unauthenticated route. Since there is usually not an authenticated user in these contexts, the default scope will be `null`."
msgstr ""

#: docs/master/pennant.md:block 100 (paragraph)
msgid "If you do not always [explictly specify your feature scope](#specifying-the-scope) then you should ensure the scope's type is \"nullable\" and handle the `null` scope value within your feature definition logic:"
msgstr ""

