# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 15:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/notifications.md:1
#, no-wrap
msgid "Notifications"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48
msgid "[Generating Notifications](#generating-notifications)"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:48
#, no-wrap
msgid ""
"- [Sending Notifications](#sending-notifications)\n"
"    - [Using The Notifiable Trait](#using-the-notifiable-trait)\n"
"    - [Using The Notification Facade](#using-the-notification-facade)\n"
"    - [Specifying Delivery Channels](#specifying-delivery-channels)\n"
"    - [Queueing Notifications](#queueing-notifications)\n"
"    - [On-Demand Notifications](#on-demand-notifications)\n"
"- [Mail Notifications](#mail-notifications)\n"
"    - [Formatting Mail Messages](#formatting-mail-messages)\n"
"    - [Customizing The Sender](#customizing-the-sender)\n"
"    - [Customizing The Recipient](#customizing-the-recipient)\n"
"    - [Customizing The Subject](#customizing-the-subject)\n"
"    - [Customizing The Mailer](#customizing-the-mailer)\n"
"    - [Customizing The Templates](#customizing-the-templates)\n"
"    - [Attachments](#mail-attachments)\n"
"    - [Using Mailables](#using-mailables)\n"
"    - [Previewing Mail Notifications](#previewing-mail-notifications)\n"
"- [Markdown Mail Notifications](#markdown-mail-notifications)\n"
"    - [Generating The Message](#generating-the-message)\n"
"    - [Writing The Message](#writing-the-message)\n"
"    - [Customizing The Components](#customizing-the-components)\n"
"- [Database Notifications](#database-notifications)\n"
"    - [Prerequisites](#database-prerequisites)\n"
"    - [Formatting Database "
"Notifications](#formatting-database-notifications)\n"
"    - [Accessing The Notifications](#accessing-the-notifications)\n"
"    - [Marking Notifications As Read](#marking-notifications-as-read)\n"
"- [Broadcast Notifications](#broadcast-notifications)\n"
"    - [Prerequisites](#broadcast-prerequisites)\n"
"    - [Formatting Broadcast "
"Notifications](#formatting-broadcast-notifications)\n"
"    - [Listening For Notifications](#listening-for-notifications)\n"
"- [SMS Notifications](#sms-notifications)\n"
"    - [Prerequisites](#sms-prerequisites)\n"
"    - [Formatting SMS Notifications](#formatting-sms-notifications)\n"
"    - [Formatting Shortcode "
"Notifications](#formatting-shortcode-notifications)\n"
"    - [Customizing The \"From\" Number](#customizing-the-from-number)\n"
"    - [Routing SMS Notifications](#routing-sms-notifications)\n"
"- [Slack Notifications](#slack-notifications)\n"
"    - [Prerequisites](#slack-prerequisites)\n"
"    - [Formatting Slack Notifications](#formatting-slack-notifications)\n"
"    - [Slack Attachments](#slack-attachments)\n"
"    - [Routing Slack Notifications](#routing-slack-notifications)\n"
"- [Localizing Notifications](#localizing-notifications)\n"
"- [Notification Events](#notification-events)\n"
"- [Custom Channels](#custom-channels)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:50
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:50
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:53
msgid ""
"In addition to support for [sending email](/docs/{{version}}/mail), Laravel "
"provides support for sending notifications across a variety of delivery "
"channels, including email, SMS (via "
"[Vonage](https://www.vonage.com/communications-apis/), formerly known as "
"Nexmo), and [Slack](https://slack.com). In addition, a variety of [community "
"built notification "
"channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) "
"have been created to send notification over dozens of different channels! "
"Notifications may also be stored in a database so they may be displayed in "
"your web interface."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:55
msgid ""
"Typically, notifications should be short, informational messages that notify "
"users of something that occurred in your application. For example, if you "
"are writing a billing application, you might send an \"Invoice Paid\" "
"notification to your users via the email and SMS channels."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:57
#, no-wrap
msgid "<a name=\"generating-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:57
#, no-wrap
msgid "Generating Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:60
msgid ""
"In Laravel, each notification is represented by a single class that is "
"typically stored in the `app/Notifications` directory. Don't worry if you "
"don't see this directory in your application - it will be created for you "
"when you run the `make:notification` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:62
#, no-wrap
msgid "    php artisan make:notification InvoicePaid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:64
msgid ""
"This command will place a fresh notification class in your "
"`app/Notifications` directory. Each notification class contains a `via` "
"method and a variable number of message building methods, such as `toMail` "
"or `toDatabase`, that convert the notification to a message tailored for "
"that particular channel."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:66
#, no-wrap
msgid "<a name=\"sending-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:66
#, no-wrap
msgid "Sending Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:69
#, no-wrap
msgid "<a name=\"using-the-notifiable-trait\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:69
#, no-wrap
msgid "Using The Notifiable Trait"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:72
msgid ""
"Notifications may be sent in two ways: using the `notify` method of the "
"`Notifiable` trait or using the `Notification` "
"[facade](/docs/{{version}}/facades). The `Notifiable` trait is included on "
"your application's `App\\Models\\User` model by default:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:74 docs/8.x/notifications.md:130 docs/8.x/notifications.md:201 docs/8.x/notifications.md:339 docs/8.x/notifications.md:803 docs/8.x/notifications.md:927 docs/8.x/notifications.md:1094 docs/8.x/notifications.md:1197 docs/8.x/notifications.md:1222
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:76 docs/8.x/notifications.md:341 docs/8.x/notifications.md:805 docs/8.x/notifications.md:929 docs/8.x/notifications.md:1096
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:79 docs/8.x/notifications.md:344 docs/8.x/notifications.md:932 docs/8.x/notifications.md:1099
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:84
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use Notifiable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:86
msgid ""
"The `notify` method that is provided by this trait expects to receive a "
"notification instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:88
#, no-wrap
msgid "    use App\\Notifications\\InvoicePaid;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:90 docs/8.x/notifications.md:147 docs/8.x/notifications.md:1154
#, no-wrap
msgid "    $user->notify(new InvoicePaid($invoice));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:92
#, no-wrap
msgid ""
"> {tip} Remember, you may use the `Notifiable` trait on any of your "
"models. You are not limited to only including it on your `User` model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:94
#, no-wrap
msgid "<a name=\"using-the-notification-facade\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:94
#, no-wrap
msgid "Using The Notification Facade"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:97
msgid ""
"Alternatively, you may send notifications via the `Notification` "
"[facade](/docs/{{version}}/facades). This approach is useful when you need "
"to send a notification to multiple notifiable entities such as a collection "
"of users. To send notifications using the facade, pass all of the notifiable "
"entities and the notification instance to the `send` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:99
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:101
#, no-wrap
msgid "    Notification::send($users, new InvoicePaid($invoice));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:103
#, no-wrap
msgid "<a name=\"specifying-delivery-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:103
#, no-wrap
msgid "Specifying Delivery Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:106
msgid ""
"Every notification class has a `via` method that determines on which "
"channels the notification will be delivered. Notifications may be sent on "
"the `mail`, `database`, `broadcast`, `nexmo`, and `slack` channels."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:108
#, no-wrap
msgid ""
"> {tip} If you would like to use other delivery channels such as Telegram or "
"Pusher, check out the community driven [Laravel Notification Channels "
"website](http://laravel-notification-channels.com).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:110
msgid ""
"The `via` method receives a `$notifiable` instance, which will be an "
"instance of the class to which the notification is being sent. You may use "
"`$notifiable` to determine which channels the notification should be "
"delivered on:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:121
#, no-wrap
msgid ""
"    /**\n"
"     * Get the notification's delivery channels.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array\n"
"     */\n"
"    public function via($notifiable)\n"
"    {\n"
"        return $notifiable->prefers_sms ? ['nexmo'] : ['mail', "
"'database'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:123
#, no-wrap
msgid "<a name=\"queueing-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:123
#, no-wrap
msgid "Queueing Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:126
#, no-wrap
msgid ""
"> {note} Before queueing notifications you should configure your queue and "
"[start a worker](/docs/{{version}}/queues).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:128
msgid ""
"Sending notifications can take time, especially if the channel needs to make "
"an external API call to deliver the notification. To speed up your "
"application's response time, let your notification be queued by adding the "
"`ShouldQueue` interface and `Queueable` trait to your class. The interface "
"and trait are already imported for all notifications generated using the "
"`make:notification` command, so you may immediately add them to your "
"notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:132 docs/8.x/notifications.md:203 docs/8.x/notifications.md:1224
#, no-wrap
msgid "    namespace App\\Notifications;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:136 docs/8.x/notifications.md:207
#, no-wrap
msgid ""
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Notifications\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:140 docs/8.x/notifications.md:211
#, no-wrap
msgid ""
"    class InvoicePaid extends Notification implements ShouldQueue\n"
"    {\n"
"        use Queueable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:143
#, no-wrap
msgid ""
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:145
msgid ""
"Once the `ShouldQueue` interface has been added to your notification, you "
"may send the notification like normal. Laravel will detect the `ShouldQueue` "
"interface on the class and automatically queue the delivery of the "
"notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:149
msgid ""
"If you would like to delay the delivery of the notification, you may chain "
"the `delay` method onto your notification instantiation:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:151
#, no-wrap
msgid "    $delay = now()->addMinutes(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:153
#, no-wrap
msgid "    $user->notify((new InvoicePaid($invoice))->delay($delay));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:155
msgid ""
"You may pass an array to the `delay` method to specify the delay amount for "
"specific channels:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:160
#, no-wrap
msgid ""
"    $user->notify((new InvoicePaid($invoice))->delay([\n"
"        'mail' => now()->addMinutes(5),\n"
"        'sms' => now()->addMinutes(10),\n"
"    ]));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:162
msgid ""
"When queueing notifications, a queued job will be created for each recipient "
"and channel combination. For example, six jobs will be dispatched to the "
"queue if your notification has three recipients and two channels."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:164
#, no-wrap
msgid "<a name=\"customizing-the-notification-queue-connection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:164
#, no-wrap
msgid "Customizing The Notification Queue Connection"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:167
msgid ""
"By default, queued notifications will be queued using your application's "
"default queue connection. If you would like to specify a different "
"connection that should be used for a particular notification, you may define "
"a `$connection` property on the notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:174
#, no-wrap
msgid ""
"    /**\n"
"     * The name of the queue connection to use when queueing the "
"notification.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $connection = 'redis';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:176
#, no-wrap
msgid "<a name=\"customizing-notification-channel-queues\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:176
#, no-wrap
msgid "Customizing Notification Channel Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:179
msgid ""
"If you would like to specify a specific queue that should be used for each "
"notification channel supported by the notification, you may define a "
"`viaQueues` method on your notification. This method should return an array "
"of channel name / queue name pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:192
#, no-wrap
msgid ""
"    /**\n"
"     * Determine which queues should be used for each notification "
"channel.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function viaQueues()\n"
"    {\n"
"        return [\n"
"            'mail' => 'mail-queue',\n"
"            'slack' => 'slack-queue',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:194
#, no-wrap
msgid "<a name=\"queued-notifications-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:194
#, no-wrap
msgid "Queued Notifications & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:197
msgid ""
"When queued notifications are dispatched within database transactions, they "
"may be processed by the queue before the database transaction has "
"committed. When this happens, any updates you have made to models or "
"database records during the database transaction may not yet be reflected in "
"the database. In addition, any models or database records created within the "
"transaction may not exist in the database. If your notification depends on "
"these models, unexpected errors can occur when the job that sends the queued "
"notification is processed."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:199
msgid ""
"If your queue connection's `after_commit` configuration option is set to "
"`false`, you may still indicate that a particular queued notification should "
"be dispatched after all open database transactions have been committed by "
"defining an `$afterCommit` property on the notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:214
#, no-wrap
msgid ""
"        public $afterCommit = true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:216
#, no-wrap
msgid ""
"> {tip} To learn more about working around these issues, please review the "
"documentation regarding [queued jobs and database "
"transactions](/docs/{{version}}/queues#jobs-and-database-transactions).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:218
#, no-wrap
msgid "<a name=\"on-demand-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:218
#, no-wrap
msgid "On-Demand Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:221
msgid ""
"Sometimes you may need to send a notification to someone who is not stored "
"as a \"user\" of your application. Using the `Notification` facade's `route` "
"method, you may specify ad-hoc notification routing information before "
"sending the notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:226
#, no-wrap
msgid ""
"    Notification::route('mail', 'taylor@example.com')\n"
"                ->route('nexmo', '5555555555')\n"
"                ->route('slack', 'https://hooks.slack.com/services/...')\n"
"                ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:228
#, no-wrap
msgid "<a name=\"mail-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:228
#, no-wrap
msgid "Mail Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:231
#, no-wrap
msgid "<a name=\"formatting-mail-messages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:231
#, no-wrap
msgid "Formatting Mail Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:234
msgid ""
"If a notification supports being sent as an email, you should define a "
"`toMail` method on the notification class. This method will receive a "
"`$notifiable` entity and should return an "
"`Illuminate\\Notifications\\Messages\\MailMessage` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:236
msgid ""
"The `MailMessage` class contains a few simple methods to help you build "
"transactional email messages. Mail messages may contain lines of text as "
"well as a \"call to action\". Let's take a look at an example `toMail` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:246 docs/8.x/notifications.md:562
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        $url = url('/invoice/'.$this->invoice->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:253
#, no-wrap
msgid ""
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->line('One of your invoices has been paid!')\n"
"                    ->action('View Invoice', $url)\n"
"                    ->line('Thank you for using our application!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:255
#, no-wrap
msgid ""
"> {tip} Note we are using `$this->invoice->id` in our `toMail` method. You "
"may pass any data your notification needs to generate its message into the "
"notification's constructor.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:257
msgid ""
"In this example, we register a greeting, a line of text, a call to action, "
"and then another line of text. These methods provided by the `MailMessage` "
"object make it simple and fast to format small transactional emails. The "
"mail channel will then translate the message components into a beautiful, "
"responsive HTML email template with a plain-text counterpart. Here is an "
"example of an email generated by the `mail` channel:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:259
#, no-wrap
msgid "<img src=\"https://laravel.com/img/docs/notification-example-2.png\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:261
#, no-wrap
msgid ""
"> {tip} When sending mail notifications, be sure to set the `name` "
"configuration option in your `config/app.php` configuration file. This value "
"will be used in the header and footer of your mail notification messages.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:263
#, no-wrap
msgid "<a name=\"other-mail-notification-formatting-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:263
#, no-wrap
msgid "Other Mail Notification Formatting Options"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:266
msgid ""
"Instead of defining the \"lines\" of text in the notification class, you may "
"use the `view` method to specify a custom template that should be used to "
"render the notification email:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:279
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)->view(\n"
"            'emails.name', ['invoice' => $this->invoice]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:281
msgid ""
"You may specify a plain-text view for the mail message by passing the view "
"name as the second element of an array that is given to the `view` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:295
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)->view(\n"
"            ['emails.name.html', 'emails.name.plain'],\n"
"            ['invoice' => $this->invoice]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:297
#, no-wrap
msgid "<a name=\"error-messages\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:297
#, no-wrap
msgid "Error Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:300
msgid ""
"Some notifications inform users of errors, such as a failed invoice "
"payment. You may indicate that a mail message is regarding an error by "
"calling the `error` method when building your message. When using the "
"`error` method on a mail message, the call to action button will be red "
"instead of black:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:314
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Message\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->error()\n"
"                    ->subject('Notification Subject')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:316
#, no-wrap
msgid "<a name=\"customizing-the-sender\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:316
#, no-wrap
msgid "Customizing The Sender"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:319
msgid ""
"By default, the email's sender / from address is defined in the "
"`config/mail.php` configuration file. However, you may specify the from "
"address for a specific notification using the `from` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:332
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->from('barrett@example.com', 'Barrett Blair')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:334
#, no-wrap
msgid "<a name=\"customizing-the-recipient\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:334
#, no-wrap
msgid "Customizing The Recipient"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:337
msgid ""
"When sending notifications via the `mail` channel, the notification system "
"will automatically look for an `email` property on your notifiable "
"entity. You may customize which email address is used to deliver the "
"notification by defining a `routeNotificationForMail` method on the "
"notifiable entity:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:348 docs/8.x/notifications.md:813 docs/8.x/notifications.md:936 docs/8.x/notifications.md:1103
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:359
#, no-wrap
msgid ""
"        /**\n"
"         * Route notifications for the mail channel.\n"
"         *\n"
"         * @param  \\Illuminate\\Notifications\\Notification  "
"$notification\n"
"         * @return array|string\n"
"         */\n"
"        public function routeNotificationForMail($notification)\n"
"        {\n"
"            // Return email address only...\n"
"            return $this->email_address;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:364
#, no-wrap
msgid ""
"            // Return email address and name...\n"
"            return [$this->email_address => $this->name];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:366
#, no-wrap
msgid "<a name=\"customizing-the-subject\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:366
#, no-wrap
msgid "Customizing The Subject"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:369
msgid ""
"By default, the email's subject is the class name of the notification "
"formatted to \"Title Case\". So, if your notification class is named "
"`InvoicePaid`, the email's subject will be `Invoice Paid`. If you would like "
"to specify a different subject for the message, you may call the `subject` "
"method when building your message:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:382
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->subject('Notification Subject')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:384
#, no-wrap
msgid "<a name=\"customizing-the-mailer\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:384
#, no-wrap
msgid "Customizing The Mailer"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:387
msgid ""
"By default, the email notification will be sent using the default mailer "
"defined in the `config/mail.php` configuration file. However, you may "
"specify a different mailer at runtime by calling the `mailer` method when "
"building your message:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:400
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->mailer('postmark')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:402
#, no-wrap
msgid "<a name=\"customizing-the-templates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:402
#, no-wrap
msgid "Customizing The Templates"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:405
msgid ""
"You can modify the HTML and plain-text template used by mail notifications "
"by publishing the notification package's resources. After running this "
"command, the mail notification templates will be located in the "
"`resources/views/vendor/notifications` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:407
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-notifications\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:409
#, no-wrap
msgid "<a name=\"mail-attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:409
#, no-wrap
msgid "Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:412
msgid ""
"To add attachments to an email notification, use the `attach` method while "
"building your message. The `attach` method accepts the absolute path to the "
"file as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:425
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->attach('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:427
msgid ""
"When attaching files to a message, you may also specify the display name and "
"/ or MIME type by passing an `array` as the second argument to the `attach` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:443
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->attach('/path/to/file', [\n"
"                        'as' => 'name.pdf',\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:445
msgid ""
"Unlike attaching files in mailable objects, you may not attach a file "
"directly from a storage disk using `attachFromStorage`. You should rather "
"use the `attach` method with an absolute path to the file on the storage "
"disk. Alternatively, you could return a "
"[mailable](/docs/{{version}}/mail#generating-mailables) from the `toMail` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:447 docs/8.x/notifications.md:487
#, no-wrap
msgid "    use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:460
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return Mailable\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new InvoicePaidMailable($this->invoice))\n"
"                    ->to($notifiable->email)\n"
"                    ->attachFromStorage('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:462
#, no-wrap
msgid "<a name=\"raw-data-attachments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:462
#, no-wrap
msgid "Raw Data Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:465
msgid ""
"The `attachData` method may be used to attach a raw string of bytes as an "
"attachment. When calling the `attachData` method, you should provide the "
"filename that should be assigned to the attachment:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:480
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->attachData($this->pdf, 'name.pdf', [\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:482
#, no-wrap
msgid "<a name=\"using-mailables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:482
#, no-wrap
msgid "Using Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:485
msgid ""
"If needed, you may return a full [mailable object](/docs/{{version}}/mail) "
"from your notification's `toMail` method. When returning a `Mailable` "
"instead of a `MailMessage`, you will need to specify the message recipient "
"using the mailable object's `to` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:499
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return Mailable\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new InvoicePaidMailable($this->invoice))\n"
"                    ->to($notifiable->email);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:501
#, no-wrap
msgid "<a name=\"mailables-and-on-demand-notifications\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:501
#, no-wrap
msgid "Mailables & On-Demand Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:504
msgid ""
"If you are sending an [on-demand notification](#on-demand-notifications), "
"the `$notifiable` instance given to the `toMail` method will be an instance "
"of `Illuminate\\Notifications\\AnonymousNotifiable`, which offers a "
"`routeNotificationFor` method that may be used to retrieve the email address "
"the on-demand notification should be sent to:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:507
#, no-wrap
msgid ""
"    use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"    use Illuminate\\Notifications\\AnonymousNotifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:519
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return Mailable\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        $address = $notifiable instanceof AnonymousNotifiable\n"
"                ? $notifiable->routeNotificationFor('mail')\n"
"                : $notifiable->email;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:523
#, no-wrap
msgid ""
"        return (new InvoicePaidMailable($this->invoice))\n"
"                    ->to($address);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:525
#, no-wrap
msgid "<a name=\"previewing-mail-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:525
#, no-wrap
msgid "Previewing Mail Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:528
msgid ""
"When designing a mail notification template, it is convenient to quickly "
"preview the rendered mail message in your browser like a typical Blade "
"template. For this reason, Laravel allows you to return any mail message "
"generated by a mail notification directly from a route closure or "
"controller. When a `MailMessage` is returned, it will be rendered and "
"displayed in the browser, allowing you to quickly preview its design without "
"needing to send it to an actual email address:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:531
#, no-wrap
msgid ""
"    use App\\Models\\Invoice;\n"
"    use App\\Notifications\\InvoicePaid;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:534
#, no-wrap
msgid ""
"    Route::get('/notification', function () {\n"
"        $invoice = Invoice::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:538
#, no-wrap
msgid ""
"        return (new InvoicePaid($invoice))\n"
"                    ->toMail($invoice->user);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:540
#, no-wrap
msgid "<a name=\"markdown-mail-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:540
#, no-wrap
msgid "Markdown Mail Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:543
msgid ""
"Markdown mail notifications allow you to take advantage of the pre-built "
"templates of mail notifications, while giving you more freedom to write "
"longer, customized messages. Since the messages are written in Markdown, "
"Laravel is able to render beautiful, responsive HTML templates for the "
"messages while also automatically generating a plain-text counterpart."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:545
#, no-wrap
msgid "<a name=\"generating-the-message\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:545
#, no-wrap
msgid "Generating The Message"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:548
msgid ""
"To generate a notification with a corresponding Markdown template, you may "
"use the `--markdown` option of the `make:notification` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:550
#, no-wrap
msgid "    php artisan make:notification InvoicePaid --markdown=mail.invoice.paid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:552
msgid ""
"Like all other mail notifications, notifications that use Markdown templates "
"should define a `toMail` method on their notification class. However, "
"instead of using the `line` and `action` methods to construct the "
"notification, use the `markdown` method to specify the name of the Markdown "
"template that should be used. An array of data you wish to make available to "
"the template may be passed as the method's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:567
#, no-wrap
msgid ""
"        return (new MailMessage)\n"
"                    ->subject('Invoice Paid')\n"
"                    ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:569
#, no-wrap
msgid "<a name=\"writing-the-message\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:569
#, no-wrap
msgid "Writing The Message"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:572
msgid ""
"Markdown mail notifications use a combination of Blade components and "
"Markdown syntax which allow you to easily construct notifications while "
"leveraging Laravel's pre-crafted notification components:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:575
#, no-wrap
msgid ""
"    @component('mail::message')\n"
"    # Invoice Paid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:577
#, no-wrap
msgid "    Your invoice has been paid!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:581
#, no-wrap
msgid ""
"    @component('mail::button', ['url' => $url])\n"
"    View Invoice\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:585
#, no-wrap
msgid ""
"    Thanks,<br>\n"
"    {{ config('app.name') }}\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:587
#, no-wrap
msgid "<a name=\"button-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:587
#, no-wrap
msgid "Button Component"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:590
msgid ""
"The button component renders a centered button link. The component accepts "
"two arguments, a `url` and an optional `color`. Supported colors are "
"`primary`, `green`, and `red`. You may add as many button components to a "
"notification as you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:594
#, no-wrap
msgid ""
"    @component('mail::button', ['url' => $url, 'color' => 'green'])\n"
"    View Invoice\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:596
#, no-wrap
msgid "<a name=\"panel-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:596
#, no-wrap
msgid "Panel Component"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:599
msgid ""
"The panel component renders the given block of text in a panel that has a "
"slightly different background color than the rest of the notification. This "
"allows you to draw attention to a given block of text:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:603
#, no-wrap
msgid ""
"    @component('mail::panel')\n"
"    This is the panel content.\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:605
#, no-wrap
msgid "<a name=\"table-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:605
#, no-wrap
msgid "Table Component"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:608
msgid ""
"The table component allows you to transform a Markdown table into an HTML "
"table. The component accepts the Markdown table as its content. Table column "
"alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:615
#, no-wrap
msgid ""
"    @component('mail::table')\n"
"    | Laravel       | Table         | Example  |\n"
"    | ------------- |:-------------:| --------:|\n"
"    | Col 2 is      | Centered      | $10      |\n"
"    | Col 3 is      | Right-Aligned | $20      |\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:617
#, no-wrap
msgid "<a name=\"customizing-the-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:617
#, no-wrap
msgid "Customizing The Components"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:620
msgid ""
"You may export all of the Markdown notification components to your own "
"application for customization. To export the components, use the "
"`vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:622
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:624
msgid ""
"This command will publish the Markdown mail components to the "
"`resources/views/vendor/mail` directory. The `mail` directory will contain "
"an `html` and a `text` directory, each containing their respective "
"representations of every available component. You are free to customize "
"these components however you like."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:626
#, no-wrap
msgid "<a name=\"customizing-the-css\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:626
#, no-wrap
msgid "Customizing The CSS"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:629
msgid ""
"After exporting the components, the "
"`resources/views/vendor/mail/html/themes` directory will contain a "
"`default.css` file. You may customize the CSS in this file and your styles "
"will automatically be in-lined within the HTML representations of your "
"Markdown notifications."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:631
msgid ""
"If you would like to build an entirely new theme for Laravel's Markdown "
"components, you may place a CSS file within the `html/themes` "
"directory. After naming and saving your CSS file, update the `theme` option "
"of the `mail` configuration file to match the name of your new theme."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:633
msgid ""
"To customize the theme for an individual notification, you may call the "
"`theme` method while building the notification's mail message. The `theme` "
"method accepts the name of the theme that should be used when sending the "
"notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:647
#, no-wrap
msgid ""
"    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->theme('invoice')\n"
"                    ->subject('Invoice Paid')\n"
"                    ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:649
#, no-wrap
msgid "<a name=\"database-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:649
#, no-wrap
msgid "Database Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:652
#, no-wrap
msgid "<a name=\"database-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:652 docs/8.x/notifications.md:736 docs/8.x/notifications.md:829 docs/8.x/notifications.md:953
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:655
msgid ""
"The `database` notification channel stores the notification information in a "
"database table. This table will contain information such as the notification "
"type as well as a JSON data structure that describes the notification."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:657
msgid ""
"You can query the table to display the notifications in your application's "
"user interface. But, before you can do that, you will need to create a "
"database table to hold your notifications. You may use the "
"`notifications:table` command to generate a "
"[migration](/docs/{{version}}/migrations) with the proper table schema:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:659
#, no-wrap
msgid "    php artisan notifications:table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:661
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:663
#, no-wrap
msgid "<a name=\"formatting-database-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:663
#, no-wrap
msgid "Formatting Database Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:666
msgid ""
"If a notification supports being stored in a database table, you should "
"define a `toDatabase` or `toArray` method on the notification class. This "
"method will receive a `$notifiable` entity and should return a plain PHP "
"array. The returned array will be encoded as JSON and stored in the `data` "
"column of your `notifications` table. Let's take a look at an example "
"`toArray` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:680
#, no-wrap
msgid ""
"    /**\n"
"     * Get the array representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array\n"
"     */\n"
"    public function toArray($notifiable)\n"
"    {\n"
"        return [\n"
"            'invoice_id' => $this->invoice->id,\n"
"            'amount' => $this->invoice->amount,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:682
#, no-wrap
msgid "<a name=\"todatabase-vs-toarray\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:682
#, no-wrap
msgid "`toDatabase` Vs. `toArray`"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:685
msgid ""
"The `toArray` method is also used by the `broadcast` channel to determine "
"which data to broadcast to your JavaScript powered frontend. If you would "
"like to have two different array representations for the `database` and "
"`broadcast` channels, you should define a `toDatabase` method instead of a "
"`toArray` method."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:687
#, no-wrap
msgid "<a name=\"accessing-the-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:687
#, no-wrap
msgid "Accessing The Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:690
msgid ""
"Once notifications are stored in the database, you need a convenient way to "
"access them from your notifiable entities. The "
"`Illuminate\\Notifications\\Notifiable` trait, which is included on "
"Laravel's default `App\\Models\\User` model, includes a `notifications` "
"[Eloquent relationship](/docs/{{version}}/eloquent-relationships) that "
"returns the notifications for the entity. To fetch notifications, you may "
"access this method like any other Eloquent relationship. By default, "
"notifications will be sorted by the `created_at` timestamp with the most "
"recent notifications at the beginning of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:692 docs/8.x/notifications.md:700 docs/8.x/notifications.md:713 docs/8.x/notifications.md:725
#, no-wrap
msgid "    $user = App\\Models\\User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:696
#, no-wrap
msgid ""
"    foreach ($user->notifications as $notification) {\n"
"        echo $notification->type;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:698
msgid ""
"If you want to retrieve only the \"unread\" notifications, you may use the "
"`unreadNotifications` relationship. Again, these notifications will be "
"sorted by the `created_at` timestamp with the most recent notifications at "
"the beginning of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:704
#, no-wrap
msgid ""
"    foreach ($user->unreadNotifications as $notification) {\n"
"        echo $notification->type;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:706
#, no-wrap
msgid ""
"> {tip} To access your notifications from your JavaScript client, you should "
"define a notification controller for your application which returns the "
"notifications for a notifiable entity, such as the current user. You may "
"then make an HTTP request to that controller's URL from your JavaScript "
"client.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:708
#, no-wrap
msgid "<a name=\"marking-notifications-as-read\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:708
#, no-wrap
msgid "Marking Notifications As Read"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:711
msgid ""
"Typically, you will want to mark a notification as \"read\" when a user "
"views it. The `Illuminate\\Notifications\\Notifiable` trait provides a "
"`markAsRead` method, which updates the `read_at` column on the "
"notification's database record:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:717
#, no-wrap
msgid ""
"    foreach ($user->unreadNotifications as $notification) {\n"
"        $notification->markAsRead();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:719
msgid ""
"However, instead of looping through each notification, you may use the "
"`markAsRead` method directly on a collection of notifications:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:721
#, no-wrap
msgid "    $user->unreadNotifications->markAsRead();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:723
msgid ""
"You may also use a mass-update query to mark all of the notifications as "
"read without retrieving them from the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:727
#, no-wrap
msgid "    $user->unreadNotifications()->update(['read_at' => now()]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:729
msgid "You may `delete` the notifications to remove them from the table entirely:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:731
#, no-wrap
msgid "    $user->notifications()->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:733
#, no-wrap
msgid "<a name=\"broadcast-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:733
#, no-wrap
msgid "Broadcast Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:736
#, no-wrap
msgid "<a name=\"broadcast-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:739
msgid ""
"Before broadcasting notifications, you should configure and be familiar with "
"Laravel's [event broadcasting](/docs/{{version}}/broadcasting) "
"services. Event broadcasting provides a way to react to server-side Laravel "
"events from your JavaScript powered frontend."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:741
#, no-wrap
msgid "<a name=\"formatting-broadcast-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:741
#, no-wrap
msgid "Formatting Broadcast Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:744
msgid ""
"The `broadcast` channel broadcasts notifications using Laravel's [event "
"broadcasting](/docs/{{version}}/broadcasting) services, allowing your "
"JavaScript powered frontend to catch notifications in realtime. If a "
"notification supports broadcasting, you can define a `toBroadcast` method on "
"the notification class. This method will receive a `$notifiable` entity and "
"should return a `BroadcastMessage` instance. If the `toBroadcast` method "
"does not exist, the `toArray` method will be used to gather the data that "
"should be broadcast. The returned data will be encoded as JSON and broadcast "
"to your JavaScript powered frontend. Let's take a look at an example "
"`toBroadcast` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:746 docs/8.x/notifications.md:776
#, no-wrap
msgid "    use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:760
#, no-wrap
msgid ""
"    /**\n"
"     * Get the broadcastable representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return BroadcastMessage\n"
"     */\n"
"    public function toBroadcast($notifiable)\n"
"    {\n"
"        return new BroadcastMessage([\n"
"            'invoice_id' => $this->invoice->id,\n"
"            'amount' => $this->invoice->amount,\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:762
#, no-wrap
msgid "<a name=\"broadcast-queue-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:762
#, no-wrap
msgid "Broadcast Queue Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:765
msgid ""
"All broadcast notifications are queued for broadcasting. If you would like "
"to configure the queue connection or queue name that is used to queue the "
"broadcast operation, you may use the `onConnection` and `onQueue` methods of "
"the `BroadcastMessage`:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:769
#, no-wrap
msgid ""
"    return (new BroadcastMessage($data))\n"
"                    ->onConnection('sqs')\n"
"                    ->onQueue('broadcasts');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:771
#, no-wrap
msgid "<a name=\"customizing-the-notification-type\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:771
#, no-wrap
msgid "Customizing The Notification Type"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:774
msgid ""
"In addition to the data you specify, all broadcast notifications also have a "
"`type` field containing the full class name of the notification. If you "
"would like to customize the notification `type`, you may define a "
"`broadcastType` method on the notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:786
#, no-wrap
msgid ""
"    /**\n"
"     * Get the type of the notification being broadcast.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function broadcastType()\n"
"    {\n"
"        return 'broadcast.message';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:788
#, no-wrap
msgid "<a name=\"listening-for-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:788
#, no-wrap
msgid "Listening For Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:791
msgid ""
"Notifications will broadcast on a private channel formatted using a "
"`{notifiable}.{id}` convention. So, if you are sending a notification to an "
"`App\\Models\\User` instance with an ID of `1`, the notification will be "
"broadcast on the `App.Models.User.1` private channel. When using [Laravel "
"Echo](/docs/{{version}}/broadcasting), you may easily listen for "
"notifications on a channel using the `notification` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:796
#, no-wrap
msgid ""
"    Echo.private('App.Models.User.' + userId)\n"
"        .notification((notification) => {\n"
"            console.log(notification.type);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:798
#, no-wrap
msgid "<a name=\"customizing-the-notification-channel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:798
#, no-wrap
msgid "Customizing The Notification Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:801
msgid ""
"If you would like to customize which channel that an entity's broadcast "
"notifications are broadcast on, you may define a "
"`receivesBroadcastNotificationsOn` method on the notifiable entity:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:809
#, no-wrap
msgid ""
"    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:824
#, no-wrap
msgid ""
"        /**\n"
"         * The channels the user receives notification broadcasts on.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function receivesBroadcastNotificationsOn()\n"
"        {\n"
"            return 'users.'.$this->id;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:826
#, no-wrap
msgid "<a name=\"sms-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:826
#, no-wrap
msgid "SMS Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:829
#, no-wrap
msgid "<a name=\"sms-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:832
msgid ""
"Sending SMS notifications in Laravel is powered by "
"[Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can "
"send notifications via Vonage, you need to install the "
"`laravel/nexmo-notification-channel` and `nexmo/laravel` Composer packages"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:834
#, no-wrap
msgid "    composer require laravel/nexmo-notification-channel nexmo/laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:836
msgid ""
"The `nexmo/laravel` package includes [its own configuration "
"file](https://github.com/Nexmo/nexmo-laravel/blob/master/config/nexmo.php). "
"However, you are not required to export this configuration file to your own "
"application. You can simply use the `NEXMO_KEY` and `NEXMO_SECRET` "
"environment variables to set your Vonage public and secret key."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:838
msgid ""
"Next, you will need to add a `nexmo` configuration entry to your "
"`config/services.php` configuration file. You may copy the example "
"configuration below to get started:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:842
#, no-wrap
msgid ""
"    'nexmo' => [\n"
"        'sms_from' => '15556666666',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:844
msgid ""
"The `sms_from` option is the phone number that your SMS messages will be "
"sent from. You should generate a phone number for your application in the "
"Vonage control panel."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:846
#, no-wrap
msgid "<a name=\"formatting-sms-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:846
#, no-wrap
msgid "Formatting SMS Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:849
msgid ""
"If a notification supports being sent as an SMS, you should define a "
"`toNexmo` method on the notification class. This method will receive a "
"`$notifiable` entity and should return an "
"`Illuminate\\Notifications\\Messages\\NexmoMessage` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:861
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Vonage / SMS representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
"     */\n"
"    public function toNexmo($notifiable)\n"
"    {\n"
"        return (new NexmoMessage)\n"
"                    ->content('Your SMS message content');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:863
#, no-wrap
msgid "<a name=\"unicode-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:863
#, no-wrap
msgid "Unicode Content"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:866
msgid ""
"If your SMS message will contain unicode characters, you should call the "
"`unicode` method when constructing the `NexmoMessage` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:879
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Vonage / SMS representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
"     */\n"
"    public function toNexmo($notifiable)\n"
"    {\n"
"        return (new NexmoMessage)\n"
"                    ->content('Your unicode message')\n"
"                    ->unicode();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:881
#, no-wrap
msgid "<a name=\"formatting-shortcode-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:881
#, no-wrap
msgid "Formatting Shortcode Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:884
msgid ""
"Laravel also supports sending shortcode notifications, which are pre-defined "
"message templates in your Vonage account. To send a shortcode SMS "
"notification, you should define a `toShortcode` method on your notification "
"class. From within this method, you may return an array specifying the type "
"of notification (`alert`, `2fa`, or `marketing`) as well as the custom "
"values that will populate the template:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:900
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Vonage / Shortcode representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array\n"
"     */\n"
"    public function toShortcode($notifiable)\n"
"    {\n"
"        return [\n"
"            'type' => 'alert',\n"
"            'custom' => [\n"
"                'code' => 'ABC123',\n"
"            ];\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:902
#, no-wrap
msgid ""
"> {tip} Like [routing SMS Notifications](#routing-sms-notifications), you "
"should implement the `routeNotificationForShortcode` method on your "
"notifiable model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:904
#, no-wrap
msgid "<a name=\"customizing-the-from-number\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:904
#, no-wrap
msgid "Customizing The \"From\" Number"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:907
msgid ""
"If you would like to send some notifications from a phone number that is "
"different from the phone number specified in your `config/services.php` "
"file, you may call the `from` method on a `NexmoMessage` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:920
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Vonage / SMS representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return NexmoMessage\n"
"     */\n"
"    public function toNexmo($notifiable)\n"
"    {\n"
"        return (new NexmoMessage)\n"
"                    ->content('Your SMS message content')\n"
"                    ->from('15554443333');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:922
#, no-wrap
msgid "<a name=\"routing-sms-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:922
#, no-wrap
msgid "Routing SMS Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:925
msgid ""
"To route Vonage notifications to the proper phone number, define a "
"`routeNotificationForNexmo` method on your notifiable entity:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:948
#, no-wrap
msgid ""
"        /**\n"
"         * Route notifications for the Nexmo channel.\n"
"         *\n"
"         * @param  \\Illuminate\\Notifications\\Notification  "
"$notification\n"
"         * @return string\n"
"         */\n"
"        public function routeNotificationForNexmo($notification)\n"
"        {\n"
"            return $this->phone_number;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:950
#, no-wrap
msgid "<a name=\"slack-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:950
#, no-wrap
msgid "Slack Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:953
#, no-wrap
msgid "<a name=\"slack-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:956
msgid ""
"Before you can send notifications via Slack, you must install the Slack "
"notification channel via Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:958
#, no-wrap
msgid "    composer require laravel/slack-notification-channel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:960
msgid ""
"You will also need to configure an [\"Incoming "
"Webhook\"](https://slack.com/apps/A0F7XDUAZ-incoming-webhooks) integration "
"for your Slack team. This integration will provide you with a URL you may "
"use when [routing Slack notifications](#routing-slack-notifications)."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:962
#, no-wrap
msgid "<a name=\"formatting-slack-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:962
#, no-wrap
msgid "Formatting Slack Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:965
msgid ""
"If a notification supports being sent as a Slack message, you should define "
"a `toSlack` method on the notification class. This method will receive a "
"`$notifiable` entity and should return an "
"`Illuminate\\Notifications\\Messages\\SlackMessage` instance. Slack messages "
"may contain text content as well as an \"attachment\" that formats "
"additional text or an array of fields. Let's take a look at a basic "
"`toSlack` example:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:977
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->content('One of your invoices has been paid!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:979
#, no-wrap
msgid "<a name=\"customizing-the-sender-recipient\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:979
#, no-wrap
msgid "Customizing The Sender & Recipient"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:982
msgid ""
"You may use the `from` and `to` methods to customize the sender and "
"recipient. The `from` method accepts a username and emoji identifier, while "
"the `to` method accepts a channel or username:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:996
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->from('Ghost', ':ghost:')\n"
"                    ->to('#bots')\n"
"                    ->content('This will be sent to #bots');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:998
msgid "You may also use an image as your from \"logo\" instead of an emoji:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1012
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->from('Laravel')\n"
"                    ->image('https://laravel.com/img/favicon/favicon.ico')\n"
"                    ->content('This will display the Laravel logo next to "
"the message');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1014
#, no-wrap
msgid "<a name=\"slack-attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:1014
#, no-wrap
msgid "Slack Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1017
msgid ""
"You may also add \"attachments\" to Slack messages. Attachments provide "
"richer formatting options than simple text messages. In this example, we "
"will send an error notification about an exception that occurred in an "
"application, including a link to view more details about the exception:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1027
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        $url = url('/exceptions/'.$this->exception->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1036
#, no-wrap
msgid ""
"        return (new SlackMessage)\n"
"                    ->error()\n"
"                    ->content('Whoops! Something went wrong.')\n"
"                    ->attachment(function ($attachment) use ($url) {\n"
"                        $attachment->title('Exception: File Not Found', "
"$url)\n"
"                                   ->content('File [background.jpg] was not "
"found.');\n"
"                    });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1038
msgid ""
"Attachments also allow you to specify an array of data that should be "
"presented to the user. The given data will be presented in a table-style "
"format for easy reading:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1048
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        $url = url('/invoices/'.$this->invoice->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1062
#, no-wrap
msgid ""
"        return (new SlackMessage)\n"
"                    ->success()\n"
"                    ->content('One of your invoices has been paid!')\n"
"                    ->attachment(function ($attachment) use ($url) {\n"
"                        $attachment->title('Invoice 1322', $url)\n"
"                                   ->fields([\n"
"                                        'Title' => 'Server Expenses',\n"
"                                        'Amount' => '$1,234',\n"
"                                        'Via' => 'American Express',\n"
"                                        'Was Overdue' => ':-1:',\n"
"                                    ]);\n"
"                    });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1064
#, no-wrap
msgid "<a name=\"markdown-attachment-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:1064
#, no-wrap
msgid "Markdown Attachment Content"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1067
msgid ""
"If some of your attachment fields contain Markdown, you may use the "
"`markdown` method to instruct Slack to parse and display the given "
"attachment fields as Markdown formatted text. The values accepted by this "
"method are: `pretext`, `text`, and / or `fields`. For more information about "
"Slack attachment formatting, check out the [Slack API "
"documentation](https://api.slack.com/docs/message-formatting#message_formatting):"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1077
#, no-wrap
msgid ""
"    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        $url = url('/exceptions/'.$this->exception->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1087
#, no-wrap
msgid ""
"        return (new SlackMessage)\n"
"                    ->error()\n"
"                    ->content('Whoops! Something went wrong.')\n"
"                    ->attachment(function ($attachment) use ($url) {\n"
"                        $attachment->title('Exception: File Not Found', "
"$url)\n"
"                                   ->content('File [background.jpg] was *not "
"found*.')\n"
"                                   ->markdown(['text']);\n"
"                    });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1089
#, no-wrap
msgid "<a name=\"routing-slack-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:1089
#, no-wrap
msgid "Routing Slack Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1092
msgid ""
"To route Slack notifications to the proper Slack team and channel, define a "
"`routeNotificationForSlack` method on your notifiable entity. This should "
"return the webhook URL to which the notification should be "
"delivered. Webhook URLs may be generated by adding an \"Incoming Webhook\" "
"service to your Slack team:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1115
#, no-wrap
msgid ""
"        /**\n"
"         * Route notifications for the Slack channel.\n"
"         *\n"
"         * @param  \\Illuminate\\Notifications\\Notification  "
"$notification\n"
"         * @return string\n"
"         */\n"
"        public function routeNotificationForSlack($notification)\n"
"        {\n"
"            return 'https://hooks.slack.com/services/...';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1117
#, no-wrap
msgid "<a name=\"localizing-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:1117
#, no-wrap
msgid "Localizing Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1120
msgid ""
"Laravel allows you to send notifications in a locale other than the HTTP "
"request's current locale, and will even remember this locale if the "
"notification is queued."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1122
msgid ""
"To accomplish this, the `Illuminate\\Notifications\\Notification` class "
"offers a `locale` method to set the desired language. The application will "
"change into this locale when the notification is being evaluated and then "
"revert back to the previous locale when evaluation is complete:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1124
#, no-wrap
msgid "    $user->notify((new InvoicePaid($invoice))->locale('es'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1126
msgid ""
"Localization of multiple notifiable entries may also be achieved via the "
"`Notification` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1130
#, no-wrap
msgid ""
"    Notification::locale('es')->send(\n"
"        $users, new InvoicePaid($invoice)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1132
#, no-wrap
msgid "<a name=\"user-preferred-locales\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:1132
#, no-wrap
msgid "User Preferred Locales"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1135
msgid ""
"Sometimes, applications store each user's preferred locale. By implementing "
"the `HasLocalePreference` contract on your notifiable model, you may "
"instruct Laravel to use this stored locale when sending a notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1137
#, no-wrap
msgid "    use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1150
#, no-wrap
msgid ""
"    class User extends Model implements HasLocalePreference\n"
"    {\n"
"        /**\n"
"         * Get the user's preferred locale.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function preferredLocale()\n"
"        {\n"
"            return $this->locale;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1152
msgid ""
"Once you have implemented the interface, Laravel will automatically use the "
"preferred locale when sending notifications and mailables to the "
"model. Therefore, there is no need to call the `locale` method when using "
"this interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1156
#, no-wrap
msgid "<a name=\"notification-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:1156
#, no-wrap
msgid "Notification Events"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1159
msgid ""
"When a notification is sent, the "
"`Illuminate\\Notifications\\Events\\NotificationSent` "
"[event](/docs/{{version}}/events) is fired by the notification system. This "
"contains the \"notifiable\" entity and the notification instance itself. You "
"may register listeners for this event in your `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1170
#, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Notifications\\Events\\NotificationSent' => [\n"
"            'App\\Listeners\\LogNotification',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1172
#, no-wrap
msgid ""
"> {tip} After registering listeners in your `EventServiceProvider`, use the "
"`event:generate` Artisan command to quickly generate listener classes.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1174
msgid ""
"Within an event listener, you may access the `notifiable`, `notification`, "
"and `channel` properties on the event to learn more about the notification "
"recipient or the notification itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1188
#, no-wrap
msgid ""
"    /**\n"
"     * Handle the event.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Events\\NotificationSent  "
"$event\n"
"     * @return void\n"
"     */\n"
"    public function handle(NotificationSent $event)\n"
"    {\n"
"        // $event->channel\n"
"        // $event->notifiable\n"
"        // $event->notification\n"
"        // $event->response\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1190
#, no-wrap
msgid "<a name=\"custom-channels\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:1190
#, no-wrap
msgid "Custom Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1193
msgid ""
"Laravel ships with a handful of notification channels, but you may want to "
"write your own drivers to deliver notifications via other channels. Laravel "
"makes it simple. To get started, define a class that contains a `send` "
"method. The method should receive two arguments: a `$notifiable` and a "
"`$notification`."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1195
msgid ""
"Within the `send` method, you may call methods on the notification to "
"retrieve a message object understood by your channel and then send the "
"notification to the `$notifiable` instance however you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1199
#, no-wrap
msgid "    namespace App\\Channels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1201
#, no-wrap
msgid "    use Illuminate\\Notifications\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1214
#, no-wrap
msgid ""
"    class VoiceChannel\n"
"    {\n"
"        /**\n"
"         * Send the given notification.\n"
"         *\n"
"         * @param  mixed  $notifiable\n"
"         * @param  \\Illuminate\\Notifications\\Notification  "
"$notification\n"
"         * @return void\n"
"         */\n"
"        public function send($notifiable, Notification $notification)\n"
"        {\n"
"            $message = $notification->toVoice($notifiable);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1218
#, no-wrap
msgid ""
"            // Send notification to the $notifiable instance...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1220
msgid ""
"Once your notification channel class has been defined, you may return the "
"class name from the `via` method of any of your notifications. In this "
"example, the `toVoice` method of your notification can return whatever "
"object you choose to represent voice messages. For example, you might define "
"your own `VoiceMessage` class to represent these messages:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1230
#, no-wrap
msgid ""
"    use App\\Channels\\Messages\\VoiceMessage;\n"
"    use App\\Channels\\VoiceChannel;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Notifications\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1234
#, no-wrap
msgid ""
"    class InvoicePaid extends Notification\n"
"    {\n"
"        use Queueable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1245
#, no-wrap
msgid ""
"        /**\n"
"         * Get the notification channels.\n"
"         *\n"
"         * @param  mixed  $notifiable\n"
"         * @return array|string\n"
"         */\n"
"        public function via($notifiable)\n"
"        {\n"
"            return [VoiceChannel::class];\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1256
#, no-wrap
msgid ""
"        /**\n"
"         * Get the voice representation of the notification.\n"
"         *\n"
"         * @param  mixed  $notifiable\n"
"         * @return VoiceMessage\n"
"         */\n"
"        public function toVoice($notifiable)\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""
