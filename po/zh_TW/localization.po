msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2023-02-11 12:59\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/localization.pot\n"
"X-Crowdin-File-ID: 95\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

# H1
#: ./docs/8.x/localization.md:1
#: ./docs/9.x/localization.md:1
#: ./docs/10.x/localization.md:1
#: ./docs/11.x/localization.md:1
#: ./docs/master/localization.md:1
msgid "Localization"
msgstr "本土化"

# P
#: ./docs/8.x/localization.md:3
#: ./docs/9.x/localization.md:3
#: ./docs/10.x/localization.md:3
#: ./docs/11.x/localization.md:3
#: ./docs/master/localization.md:3
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# P
#: ./docs/10.x/localization.md:4
#: ./docs/11.x/localization.md:4
#: ./docs/master/localization.md:4
msgid "[Publishing the Language Files](#publishing-the-language-files)"
msgstr ""

# P
#: ./docs/8.x/localization.md:4
#: ./docs/9.x/localization.md:4
msgid "[Configuring The Locale](#configuring-the-locale)"
msgstr "[設定語系](#configuring-the-locale)"

# P
#: ./docs/10.x/localization.md:5
#: ./docs/11.x/localization.md:5
#: ./docs/master/localization.md:5
msgid "[Configuring the Locale](#configuring-the-locale)"
msgstr ""

# P
#: ./docs/8.x/localization.md:5
#: ./docs/9.x/localization.md:6
#: ./docs/10.x/localization.md:7
#: ./docs/11.x/localization.md:7
#: ./docs/master/localization.md:7
msgid "[Defining Translation Strings](#defining-translation-strings)"
msgstr "[定義翻譯字串](#defining-translation-strings)"

# P
#: ./docs/9.x/localization.md:5
#: ./docs/10.x/localization.md:6
#: ./docs/11.x/localization.md:6
#: ./docs/master/localization.md:6
msgid "[Pluralization Language](#pluralization-language)"
msgstr "[複數化語言](#pluralization-language)"

# P
#: ./docs/8.x/localization.md:6
#: ./docs/9.x/localization.md:7
#: ./docs/10.x/localization.md:8
#: ./docs/11.x/localization.md:8
#: ./docs/master/localization.md:8
msgid "[Using Short Keys](#using-short-keys)"
msgstr "[使用短的索引鍵](#using-short-keys)"

# P
#: ./docs/8.x/localization.md:7
#: ./docs/9.x/localization.md:8
msgid "[Using Translation Strings As Keys](#using-translation-strings-as-keys)"
msgstr "[使用翻譯字串作為索引鍵](#using-translation-strings-as-keys)"

# P
#: ./docs/8.x/localization.md:8
#: ./docs/9.x/localization.md:9
#: ./docs/10.x/localization.md:10
#: ./docs/11.x/localization.md:10
#: ./docs/master/localization.md:10
msgid "[Retrieving Translation Strings](#retrieving-translation-strings)"
msgstr "[取得翻譯字串](#retrieving-translation-strings)"

# P
#: ./docs/10.x/localization.md:9
#: ./docs/11.x/localization.md:9
#: ./docs/master/localization.md:9
msgid "[Using Translation Strings as Keys](#using-translation-strings-as-keys)"
msgstr ""

# P
#: ./docs/8.x/localization.md:9
#: ./docs/9.x/localization.md:10
msgid "[Replacing Parameters In Translation Strings](#replacing-parameters-in-translation-strings)"
msgstr "[在翻譯字串中取代參數](#replacing-parameters-in-translation-strings)"

# P
#: ./docs/8.x/localization.md:10
#: ./docs/9.x/localization.md:11
#: ./docs/10.x/localization.md:12
#: ./docs/11.x/localization.md:12
#: ./docs/master/localization.md:12
msgid "[Pluralization](#pluralization)"
msgstr "[單複數的處理](#pluralization)"

# P
#: ./docs/10.x/localization.md:11
#: ./docs/11.x/localization.md:11
#: ./docs/master/localization.md:11
msgid "[Replacing Parameters in Translation Strings](#replacing-parameters-in-translation-strings)"
msgstr ""

# P
#: ./docs/8.x/localization.md:11
#: ./docs/9.x/localization.md:12
#: ./docs/10.x/localization.md:13
#: ./docs/11.x/localization.md:13
#: ./docs/master/localization.md:13
msgid "[Overriding Package Language Files](#overriding-package-language-files)"
msgstr "[覆寫套件的語系檔](#overriding-package-language-files)"

# P
#: ./docs/8.x/localization.md:13
#: ./docs/9.x/localization.md:14
#: ./docs/10.x/localization.md:15
#: ./docs/11.x/localization.md:15
#: ./docs/master/localization.md:15
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/localization.md:14
#: ./docs/9.x/localization.md:15
#: ./docs/10.x/localization.md:16
#: ./docs/11.x/localization.md:16
#: ./docs/master/localization.md:16
msgid "Introduction"
msgstr "簡介"

# P
#: ./docs/8.x/localization.md:16
#: ./docs/9.x/localization.md:17
#: ./docs/10.x/localization.md:21
#: ./docs/11.x/localization.md:21
#: ./docs/master/localization.md:21
msgid "Laravel's localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application."
msgstr "Laravel 的本土化 (Localization, L10N) 功能可讓我們方便地在多個語系中取得字串，讓我們的程式能更簡單地支援多種語言。"

# P
#: ./docs/8.x/localization.md:18
msgid "Laravel provides two ways to manage translation strings. First, language strings may be stored in files within the `resources/lang` directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr "Laravel 提供了兩種管理翻譯字串的方法。第一種方式，就是將翻譯字串保存在 `resources/lang` 目錄內。在這個目錄中，可以為程式要支援的每一個語言都建立一個子目錄。這也是 Laravel 管理如表單驗證錯誤訊息等內建功能翻譯字串的方式："

# P
#: ./docs/10.x/localization.md:19
#: ./docs/11.x/localization.md:19
#: ./docs/master/localization.md:19
msgid "By default, the Laravel application skeleton does not include the `lang` directory. If you would like to customize Laravel's language files, you may publish them via the `lang:publish` Artisan command."
msgstr "預設情況下，Laravel 專案的 Skeleton 中未包含 `lang` 目錄。若想自定 Laravel 的語系檔，可以使用 `lang:publish` Artisan 指令來安裝語系檔："

# P
#: ./docs/9.x/localization.md:19
msgid "Laravel provides two ways to manage translation strings. First, language strings may be stored in files within the `lang` directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr "Laravel 提供了兩種管理翻譯字串的方法。第一種方式，就是將翻譯字串保存在 `lang` 目錄內。在這個目錄中，可以為程式要支援的每一個語言都建立一個子目錄。這也是 Laravel 管理如表單驗證錯誤訊息等內建功能翻譯字串的方式："

# CODE
#: ./docs/8.x/localization.md:20
#: ./docs/8.x/localization.md:80
msgid ""
"/resources\n"
"    /lang\n"
"        /en\n"
"            messages.php\n"
"        /es\n"
"            messages.php"
msgstr ""

# CODE
#: ./docs/9.x/localization.md:21
#: ./docs/9.x/localization.md:101
#: ./docs/10.x/localization.md:25
#: ./docs/10.x/localization.md:112
#: ./docs/11.x/localization.md:25
#: ./docs/11.x/localization.md:110
#: ./docs/master/localization.md:25
#: ./docs/master/localization.md:110
msgid ""
"/lang\n"
"    /en\n"
"        messages.php\n"
"    /es\n"
"        messages.php"
msgstr ""

# P
#: ./docs/10.x/localization.md:23
#: ./docs/11.x/localization.md:23
#: ./docs/master/localization.md:23
msgid "Laravel provides two ways to manage translation strings. First, language strings may be stored in files within the application's `lang` directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr "Laravel 提供了兩種管理翻譯字串的方法。第一種方式，就是將翻譯字串保存在專案的 `lang` 目錄內。在這個目錄中，可以為程式要支援的每一個語言都建立一個子目錄。這也是 Laravel 管理如表單驗證錯誤訊息等內建功能翻譯字串的方式："

# P
#: ./docs/8.x/localization.md:27
msgid "Or, translation strings may be defined within JSON files that are placed within the `resources/lang` directory. When taking this approach, each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for application's that have a large number of translatable strings:"
msgstr "第二種方式，是將翻譯字串定義在 `resources/lang` 目錄下的 JSON 檔中。用這種方式時，要支援的每個語言在該目錄中都有一個對應的 JSON 檔。若專案沒有太多要翻譯的字串的話，建議使用這種做法："

# P
#: ./docs/9.x/localization.md:27
#: ./docs/10.x/localization.md:31
#: ./docs/11.x/localization.md:31
#: ./docs/master/localization.md:31
msgid "Or, translation strings may be defined within JSON files that are placed within the `lang` directory. When taking this approach, each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for applications that have a large number of translatable strings:"
msgstr "第二種方式，是將翻譯字串定義在 `lang` 目錄下的 JSON 檔中。用這種方式時，要支援的每個語言在該目錄中都有一個對應的 JSON 檔。若專案沒有太多要翻譯的字串的話，建議使用這種做法："

# CODE
#: ./docs/8.x/localization.md:29
msgid ""
"/resources\n"
"    /lang\n"
"        en.json\n"
"        es.json"
msgstr ""

# CODE
#: ./docs/9.x/localization.md:29
#: ./docs/10.x/localization.md:33
#: ./docs/11.x/localization.md:33
#: ./docs/master/localization.md:33
msgid ""
"/lang\n"
"    en.json\n"
"    es.json"
msgstr ""

# P
#: ./docs/8.x/localization.md:34
#: ./docs/9.x/localization.md:33
#: ./docs/10.x/localization.md:37
#: ./docs/11.x/localization.md:37
#: ./docs/master/localization.md:37
msgid "We'll discuss each approach to managing translation strings within this documentation."
msgstr "在本文件中，我們稍候會討論各種管理翻譯字串的方法。"

# P
#: ./docs/8.x/localization.md:36
#: ./docs/9.x/localization.md:35
#: ./docs/10.x/localization.md:48
#: ./docs/11.x/localization.md:48
#: ./docs/master/localization.md:48
#~ msgid "<a name=\"configuring-the-locale\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/localization.md:37
#: ./docs/9.x/localization.md:36
msgid "Configuring The Locale"
msgstr "設定語系"

# P
#: ./docs/10.x/localization.md:39
#: ./docs/11.x/localization.md:39
#: ./docs/master/localization.md:39
#~ msgid "<a name=\"publishing-the-language-files\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/localization.md:39
#: ./docs/9.x/localization.md:38
#: ./docs/10.x/localization.md:51
msgid "The default language for your application is stored in the `config/app.php` configuration file's `locale` configuration option. You are free to modify this value to suit the needs of your application."
msgstr "專案的預設語系設定在 `config/app.php` 設定檔的 `locale` 設定選項中。可以自由修改這個值為合適的設定。"

# H3
#: ./docs/10.x/localization.md:40
#: ./docs/11.x/localization.md:40
#: ./docs/master/localization.md:40
msgid "Publishing the Language Files"
msgstr ""

# P
#: ./docs/8.x/localization.md:41
#: ./docs/9.x/localization.md:40
#: ./docs/10.x/localization.md:53
#: ./docs/11.x/localization.md:55
#: ./docs/master/localization.md:55
msgid "You may modify the default language for a single HTTP request at runtime using the `setLocale` method provided by the `App` facade:"
msgstr "也可以在執行階段使用 `App` Facade 提供的 `setLocale` 方法來為單一 HTTP Request 設定預設語系："

# P
#: ./docs/10.x/localization.md:42
#: ./docs/11.x/localization.md:42
#: ./docs/master/localization.md:42
msgid "By default, the Laravel application skeleton does not include the `lang` directory. If you would like to customize Laravel's language files or create your own, you should scaffold the `lang` directory via the `lang:publish` Artisan command. The `lang:publish` command will create the `lang` directory in your application and publish the default set of language files used by Laravel:"
msgstr "預設情況下，Laravel 專案的 Skeleton 中未包含 `lang` 目錄。若想自定 Laravel 的語系檔，或是想自行建立語系檔，可使用 `lang:publish` Artisan 指令來 Scaffold `lang` 目錄。`lang:publish` 指令會在專案中建立 `lang` 目錄，並安裝 Laravel 預設使用的語系檔："

# CODE
#: ./docs/8.x/localization.md:43
#: ./docs/9.x/localization.md:42
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"Route::get('/greeting/{locale}', function ($locale) {\n"
"    if (! in_array($locale, ['en', 'es', 'fr'])) {\n"
"        abort(400);\n"
"    }\n"
"\n"
"    App::setLocale($locale);\n"
"\n"
"    //\n"
"});"
msgstr ""

# CODE: shell
#: ./docs/10.x/localization.md:44
#: ./docs/11.x/localization.md:44
#: ./docs/master/localization.md:44
msgid "php artisan lang:publish"
msgstr ""

# H3
#: ./docs/10.x/localization.md:49
#: ./docs/11.x/localization.md:49
#: ./docs/master/localization.md:49
msgid "Configuring the Locale"
msgstr ""

# P
#: ./docs/11.x/localization.md:51
#: ./docs/master/localization.md:51
msgid "The default language for your application is stored in the `config/app.php` configuration file's `locale` configuration option, which is typically set using the `APP_LOCALE` environment variable. You are free to modify this value to suit the needs of your application."
msgstr ""

# P
#: ./docs/11.x/localization.md:53
#: ./docs/master/localization.md:53
msgid "You may also configure a \"fallback language\", which will be used when the default language does not contain a given translation string. Like the default language, the fallback language is also configured in the `config/app.php` configuration file, and its value is typically set using the `APP_FALLBACK_LOCALE` environment variable."
msgstr ""

# CODE
#: ./docs/10.x/localization.md:55
#: ./docs/11.x/localization.md:57
#: ./docs/master/localization.md:57
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"Route::get('/greeting/{locale}', function (string $locale) {\n"
"    if (! in_array($locale, ['en', 'es', 'fr'])) {\n"
"        abort(400);\n"
"    }\n"
"\n"
"    App::setLocale($locale);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/localization.md:55
#: ./docs/9.x/localization.md:54
#: ./docs/10.x/localization.md:67
msgid "You may configure a \"fallback language\", which will be used when the active language does not contain a given translation string. Like the default language, the fallback language is also configured in the `config/app.php` configuration file:"
msgstr "也可以設定一個「遞補語系」，當目前語系中找不到給定的翻譯字串時，就會使用遞補語系。遞補語系跟預設語系一樣，在 `config/app.php` 設定檔中設定："

# CODE
#: ./docs/8.x/localization.md:57
#: ./docs/9.x/localization.md:56
#: ./docs/10.x/localization.md:69
msgid "'fallback_locale' => 'en',"
msgstr ""

# P
#: ./docs/8.x/localization.md:59
#: ./docs/9.x/localization.md:58
#: ./docs/10.x/localization.md:71
#: ./docs/11.x/localization.md:69
#: ./docs/master/localization.md:69
#~ msgid "<a name=\"determining-the-current-locale\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/localization.md:60
#: ./docs/9.x/localization.md:59
msgid "Determining The Current Locale"
msgstr "判斷目前的語系"

# P
#: ./docs/8.x/localization.md:62
#: ./docs/9.x/localization.md:61
#: ./docs/10.x/localization.md:74
#: ./docs/11.x/localization.md:72
#: ./docs/master/localization.md:72
msgid "You may use the `currentLocale` and `isLocale` methods on the `App` facade to determine the current locale or check if the locale is a given value:"
msgstr "可使用 `App` Facade  上的 `currentLocale` 與  `isLocale` 方法來判斷目前的語系，或是確認目前語系是否為給定值："

# CODE
#: ./docs/8.x/localization.md:64
#: ./docs/9.x/localization.md:63
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$locale = App::currentLocale();\n"
"\n"
"if (App::isLocale('en')) {\n"
"    //\n"
"}"
msgstr ""

# P
#: ./docs/9.x/localization.md:71
#: ./docs/10.x/localization.md:84
#: ./docs/11.x/localization.md:82
#: ./docs/master/localization.md:82
#~ msgid "<a name=\"pluralization-language\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/localization.md:72
#: ./docs/11.x/localization.md:70
#: ./docs/master/localization.md:70
msgid "Determining the Current Locale"
msgstr ""

# P
#: ./docs/8.x/localization.md:72
#: ./docs/9.x/localization.md:93
#: ./docs/10.x/localization.md:104
#: ./docs/11.x/localization.md:102
#: ./docs/master/localization.md:102
#~ msgid "<a name=\"defining-translation-strings\"></a>"
#~ msgstr ""

# H3
#: ./docs/9.x/localization.md:72
#: ./docs/10.x/localization.md:85
#: ./docs/11.x/localization.md:83
#: ./docs/master/localization.md:83
msgid "Pluralization Language"
msgstr "複數化 (Pluralization) 語言"

# H2
#: ./docs/8.x/localization.md:73
#: ./docs/9.x/localization.md:94
#: ./docs/10.x/localization.md:105
#: ./docs/11.x/localization.md:103
#: ./docs/master/localization.md:103
msgid "Defining Translation Strings"
msgstr "定義翻譯字串"

# P
#: ./docs/9.x/localization.md:74
#: ./docs/10.x/localization.md:87
#: ./docs/11.x/localization.md:85
#: ./docs/master/localization.md:85
msgid "You may instruct Laravel's \"pluralizer\", which is used by Eloquent and other portions of the framework to convert singular strings to plural strings, to use a language other than English. This may be accomplished by invoking the `useLanguage` method within the `boot` method of one of your application's service providers. The pluralizer's currently supported languages are: `french`, `norwegian-bokmal`, `portuguese`, `spanish`, and `turkish`:"
msgstr "在 Laravel 中，Eloquent 等地方會使用「複數化程式 (Pluralizer)」來將單數字串轉為複數字串。我們可以讓這個複數化程式使用英文以外的語言。若要讓複數化程式使用英文以外的語言，請在專案的其中一個 Service Provider 中 `boot` 方法內叫用 `useLanguage` 方法。複數化程式目前支援的語言有：法文 `french`、書面挪威語 `norwegian-bokmal`、葡萄牙文 `portuguese`、西班牙文 `spanish`、與土耳其文 `turkish`："

# P
#: ./docs/8.x/localization.md:75
#: ./docs/9.x/localization.md:96
#: ./docs/10.x/localization.md:107
#: ./docs/11.x/localization.md:105
#: ./docs/master/localization.md:105
#~ msgid "<a name=\"using-short-keys\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/localization.md:76
#: ./docs/11.x/localization.md:74
#: ./docs/master/localization.md:74
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$locale = App::currentLocale();\n"
"\n"
"if (App::isLocale('en')) {\n"
"    // ...\n"
"}"
msgstr ""

# H3
#: ./docs/8.x/localization.md:76
#: ./docs/9.x/localization.md:97
#: ./docs/10.x/localization.md:108
#: ./docs/11.x/localization.md:106
#: ./docs/master/localization.md:106
msgid "Using Short Keys"
msgstr "使用短的索引鍵"

# CODE
#: ./docs/9.x/localization.md:76
msgid ""
"use Illuminate\\Support\\Pluralizer;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Pluralizer::useLanguage('spanish');     \n"
"\n"
"    // ...     \n"
"}"
msgstr ""

# P
#: ./docs/8.x/localization.md:78
msgid "Typically, translation strings are stored in files within the `resources/lang` directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr "一般來說，翻譯字串都保存在 `resources/lang` 目錄內。在這個目錄中，專案要支援的每一個語言都應有一個子目錄。這也是 Laravel 管理如表單驗證錯誤訊息等內建功能翻譯字串的方式："

# CODE
#: ./docs/11.x/localization.md:87
msgid ""
"use Illuminate\\Support\\Pluralizer;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Pluralizer::useLanguage('spanish');\n"
"\n"
"    // ...\n"
"}"
msgstr ""

# P
#: ./docs/8.x/localization.md:87
#: ./docs/9.x/localization.md:107
#: ./docs/10.x/localization.md:118
#: ./docs/11.x/localization.md:116
#: ./docs/master/localization.md:116
msgid "All language files return an array of keyed strings. For example:"
msgstr "所有的語系檔都回傳一個有字串索引鍵的陣列。如："

# CODE
#: ./docs/10.x/localization.md:89
#: ./docs/master/localization.md:87
msgid ""
"use Illuminate\\Support\\Pluralizer;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Pluralizer::useLanguage('spanish');     \n"
"\n"
"    // ...     \n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/localization.md:89
msgid ""
"<?php\n"
"\n"
"// resources/lang/en/messages.php\n"
"\n"
"return [\n"
"    'welcome' => 'Welcome to our application!',\n"
"];"
msgstr ""

# P
#: ./docs/9.x/localization.md:91
#: ./docs/10.x/localization.md:102
#: ./docs/11.x/localization.md:100
#: ./docs/master/localization.md:100
msgid "If you customize the pluralizer's language, you should explicitly define your Eloquent model's [table names](/docs/{{version}}/eloquent#table-names)."
msgstr "若自訂了複數化程式的語言，則請顯式定義 Eloquent Model 的[資料表名稱](/docs/{{version}}/eloquent#table-names)。"

# P
#: ./docs/8.x/localization.md:97
#: ./docs/9.x/localization.md:118
#: ./docs/10.x/localization.md:129
#: ./docs/11.x/localization.md:127
#: ./docs/master/localization.md:127
msgid "For languages that differ by territory, you should name the language directories according to the ISO 15897. For example, \"en_GB\" should be used for British English rather than \"en-gb\"."
msgstr "對於會因國家或地區而有所區別的語系，請依照 ISO 15897 命名語系檔目錄。舉例來說，英式英語應使用「en_GB」而非「en-gb」。"

# P
#: ./docs/8.x/localization.md:99
#: ./docs/9.x/localization.md:120
#: ./docs/10.x/localization.md:131
#: ./docs/11.x/localization.md:129
#: ./docs/master/localization.md:129
#~ msgid "<a name=\"using-translation-strings-as-keys\"></a>"
#~ msgstr ""

# P
#: ./docs/9.x/localization.md:99
#: ./docs/10.x/localization.md:110
#: ./docs/11.x/localization.md:108
#: ./docs/master/localization.md:108
msgid "Typically, translation strings are stored in files within the `lang` directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr "一般來說，翻譯字串都保存在 `lang` 目錄內。在這個目錄中，專案要支援的每一個語言都應有一個子目錄。這也是 Laravel 管理如表單驗證錯誤訊息等內建功能翻譯字串的方式："

# H3
#: ./docs/8.x/localization.md:100
#: ./docs/9.x/localization.md:121
msgid "Using Translation Strings As Keys"
msgstr "使用翻譯字串作為索引鍵"

# P
#: ./docs/8.x/localization.md:102
#: ./docs/9.x/localization.md:123
#: ./docs/10.x/localization.md:134
#: ./docs/11.x/localization.md:132
#: ./docs/master/localization.md:132
msgid "For applications with a large number of translatable strings, defining every string with a \"short key\" can become confusing when referencing the keys in your views and it is cumbersome to continually invent keys for every translation string supported by your application."
msgstr "對於有大量可翻譯字串的專案，若將每個字串都定義為「短索引鍵」，在 View 中參照這些索引鍵的時候很容易造成混謠，且要為每個翻譯字串都想一組索引鍵也很麻煩。"

# P
#: ./docs/8.x/localization.md:104
msgid "For this reason, Laravel also provides support for defining translation strings using the \"default\" translation of the string as the key. Translation files that use translation strings as keys are stored as JSON files in the `resources/lang` directory. For example, if your application has a Spanish translation, you should create a `resources/lang/es.json` file:"
msgstr "因此，Laravel 提供了使用「預設」翻譯作為翻譯字串索引鍵的支援。使用翻譯字串作為索引鍵的語系檔保存在 `lang` 目錄下的 JSON 檔中。舉例來說，若我們的專案有西班牙語翻譯，就可建立一個像這樣的 `lang/es.json` 檔："

# CODE: js
# CODE: json
#: ./docs/8.x/localization.md:106
#: ./docs/9.x/localization.md:127
#: ./docs/10.x/localization.md:138
#: ./docs/11.x/localization.md:136
#: ./docs/master/localization.md:136
msgid ""
"{\n"
"    \"I love programming.\": \"Me encanta programar.\"\n"
"}"
msgstr ""

# CODE
#: ./docs/9.x/localization.md:109
#: ./docs/10.x/localization.md:120
#: ./docs/11.x/localization.md:118
#: ./docs/master/localization.md:118
msgid ""
"<?php\n"
"\n"
"// lang/en/messages.php\n"
"\n"
"return [\n"
"    'welcome' => 'Welcome to our application!',\n"
"];"
msgstr ""

# H4
#: ./docs/8.x/localization.md:112
#: ./docs/9.x/localization.md:133
#: ./docs/10.x/localization.md:144
#: ./docs/11.x/localization.md:142
#: ./docs/master/localization.md:142
msgid "Key / File Conflicts"
msgstr "索引鍵 / 檔案的衝突"

# P
#: ./docs/8.x/localization.md:114
#: ./docs/9.x/localization.md:135
msgid "You should not define translation string keys that conflict with other translation filenames. For example, translating `__('Action')` for the \"NL\" locale while a `nl/action.php` file exists but a `nl.json` file does not exist will result in the translator returning the contents of `nl/action.php`."
msgstr "請不要定義與其他語系檔名衝突的翻譯字串。舉例來說，為荷蘭語「NL」翻譯 `__('Action')` 時，若有 `nl/action.php` 檔案但 `nl.json` 檔不存在時，翻譯程式就會回傳 `nl/action.php` 的內容。"

# P
#: ./docs/8.x/localization.md:116
#: ./docs/9.x/localization.md:137
#: ./docs/10.x/localization.md:148
#: ./docs/11.x/localization.md:146
#: ./docs/master/localization.md:146
#~ msgid "<a name=\"retrieving-translation-strings\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/localization.md:117
#: ./docs/9.x/localization.md:138
#: ./docs/10.x/localization.md:149
#: ./docs/11.x/localization.md:147
#: ./docs/master/localization.md:147
msgid "Retrieving Translation Strings"
msgstr "取得翻譯字串"

# P
#: ./docs/8.x/localization.md:119
msgid "You may retrieve translation strings from your language files using the `__` helper function. If you are using \"short keys\" to define your translation strings, you should pass the file that contains the key and the key itself to the `__` function using \"dot\" syntax. For example, let's retrieve the `welcome` translation string from the `resources/lang/en/messages.php` language file:"
msgstr "可以使用 `__` 輔助函式來從語系檔中取得翻譯字串。若使用「短索引鍵」來定義翻譯字串的話，請使用「點 (.)」標記法來傳入包含該索引鍵的檔案、以及該索引鍵。舉例來說，我們來從 `resources/lang/en/messages.php` 語系檔中取得 `welcome` 翻譯字串："

# CODE
#: ./docs/8.x/localization.md:121
#: ./docs/9.x/localization.md:142
#: ./docs/10.x/localization.md:153
#: ./docs/11.x/localization.md:151
#: ./docs/master/localization.md:151
msgid "echo __('messages.welcome');"
msgstr ""

# P
#: ./docs/8.x/localization.md:123
#: ./docs/9.x/localization.md:144
#: ./docs/10.x/localization.md:155
#: ./docs/11.x/localization.md:153
#: ./docs/master/localization.md:153
msgid "If the specified translation string does not exist, the `__` function will return the translation string key. So, using the example above, the `__` function would return `messages.welcome` if the translation string does not exist."
msgstr "若指定的翻譯字串不存在時，`__` 函式會回傳給定的字串索引值。因此，在上述範例中，若 `messages.welcome` 索引鍵不存在，`__` 函式會回傳 `messages.welcome`。"

# P
#: ./docs/8.x/localization.md:125
#: ./docs/9.x/localization.md:146
#: ./docs/10.x/localization.md:157
#: ./docs/11.x/localization.md:155
#: ./docs/master/localization.md:155
msgid "If you are using your [default translation strings as your translation keys](#using-translation-strings-as-keys), you should pass the default translation of your string to the `__` function;"
msgstr "若使用[預設翻譯字串作為翻譯索引鍵](#using-translation-strings-as-keys)，則請傳入預設翻譯字串給 `__` 函式："

# P
#: ./docs/9.x/localization.md:125
msgid "For this reason, Laravel also provides support for defining translation strings using the \"default\" translation of the string as the key. Translation files that use translation strings as keys are stored as JSON files in the `lang` directory. For example, if your application has a Spanish translation, you should create a `lang/es.json` file:"
msgstr "因此，Laravel 提供了使用「預設」翻譯作為翻譯字串索引鍵的支援。使用翻譯字串作為索引鍵的語系檔保存在 `lang` 目錄下的 JSON 檔中。舉例來說，若我們的專案有西班牙語翻譯，就可建立一個像這樣的 `lang/es.json` 檔："

# CODE
#: ./docs/8.x/localization.md:127
#: ./docs/9.x/localization.md:148
#: ./docs/10.x/localization.md:159
#: ./docs/11.x/localization.md:157
#: ./docs/master/localization.md:157
msgid "echo __('I love programming.');"
msgstr ""

# P
#: ./docs/8.x/localization.md:129
#: ./docs/9.x/localization.md:150
#: ./docs/10.x/localization.md:161
#: ./docs/11.x/localization.md:159
#: ./docs/master/localization.md:159
msgid "Again, if the translation string does not exist, the `__` function will return the translation string key that it was given."
msgstr "同樣地，若翻譯字串不存在，`__` 函式會回傳給定的翻譯字串索引鍵。"

# P
#: ./docs/8.x/localization.md:131
#: ./docs/9.x/localization.md:152
#: ./docs/10.x/localization.md:163
#: ./docs/11.x/localization.md:161
#: ./docs/master/localization.md:161
msgid "If you are using the [Blade templating engine](/docs/{{version}}/blade), you may use the `{{ }}` echo syntax to display the translation string:"
msgstr "若使用[Blade 樣板引擎](/docs/{{version}}/blade)，可使用 `{{ }}` Echo 語法來顯示翻譯字串："

# H3
#: ./docs/10.x/localization.md:132
#: ./docs/11.x/localization.md:130
#: ./docs/master/localization.md:130
msgid "Using Translation Strings as Keys"
msgstr ""

# CODE
#: ./docs/8.x/localization.md:133
#: ./docs/9.x/localization.md:154
#: ./docs/10.x/localization.md:165
#: ./docs/11.x/localization.md:163
#: ./docs/master/localization.md:163
msgid "{{ __('messages.welcome') }}"
msgstr ""

# P
#: ./docs/8.x/localization.md:135
#: ./docs/9.x/localization.md:156
#: ./docs/10.x/localization.md:167
#: ./docs/11.x/localization.md:165
#: ./docs/master/localization.md:165
#~ msgid "<a name=\"replacing-parameters-in-translation-strings\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/localization.md:136
#: ./docs/11.x/localization.md:134
#: ./docs/master/localization.md:134
msgid "For this reason, Laravel also provides support for defining translation strings using the \"default\" translation of the string as the key. Language files that use translation strings as keys are stored as JSON files in the `lang` directory. For example, if your application has a Spanish translation, you should create a `lang/es.json` file:"
msgstr "因此，Laravel 提供了使用「預設」翻譯作為翻譯字串索引鍵的支援。使用翻譯字串作為索引鍵的語系檔保存在 `lang` 目錄下的 JSON 檔中。舉例來說，若我們的專案有西班牙語翻譯，就可建立一個像這樣的 `lang/es.json` 檔："

# H3
#: ./docs/8.x/localization.md:136
#: ./docs/9.x/localization.md:157
msgid "Replacing Parameters In Translation Strings"
msgstr "在翻譯字串中取代參數"

# P
#: ./docs/8.x/localization.md:138
#: ./docs/9.x/localization.md:159
#: ./docs/10.x/localization.md:170
#: ./docs/11.x/localization.md:168
#: ./docs/master/localization.md:168
msgid "If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a `:`. For example, you may define a welcome message with a placeholder name:"
msgstr "若有需要的話，也可以在翻譯字串中定義^[預留位置](Placeholder)。所有的預留位置都以 `:` 字元作前置詞。舉例來說，我們可以定義一個有預留位置的歡迎訊息："

# CODE
#: ./docs/8.x/localization.md:140
#: ./docs/9.x/localization.md:161
#: ./docs/10.x/localization.md:172
#: ./docs/11.x/localization.md:170
#: ./docs/master/localization.md:170
msgid "'welcome' => 'Welcome, :name',"
msgstr ""

# P
#: ./docs/9.x/localization.md:140
#: ./docs/10.x/localization.md:151
#: ./docs/11.x/localization.md:149
#: ./docs/master/localization.md:149
msgid "You may retrieve translation strings from your language files using the `__` helper function. If you are using \"short keys\" to define your translation strings, you should pass the file that contains the key and the key itself to the `__` function using \"dot\" syntax. For example, let's retrieve the `welcome` translation string from the `lang/en/messages.php` language file:"
msgstr "可以使用 `__` 輔助函式來從語系檔中取得翻譯字串。若使用「短索引鍵」來定義翻譯字串的話，請使用「點 (.)」標記法來傳入包含該索引鍵的檔案、以及該索引鍵。舉例來說，我們來從 `lang/en/messages.php` 語系檔中取得 `welcome` 翻譯字串："

# P
#: ./docs/8.x/localization.md:142
#: ./docs/9.x/localization.md:163
#: ./docs/10.x/localization.md:174
#: ./docs/11.x/localization.md:172
#: ./docs/master/localization.md:172
msgid "To replace the placeholders when retrieving a translation string, you may pass an array of replacements as the second argument to the `__` function:"
msgstr "取得翻譯字串時若要取代這個預留位置，可傳入一組取代用陣列作為 `__` 函式的第二個引數："

# CODE
#: ./docs/8.x/localization.md:144
#: ./docs/9.x/localization.md:165
#: ./docs/10.x/localization.md:176
#: ./docs/11.x/localization.md:174
#: ./docs/master/localization.md:174
msgid "echo __('messages.welcome', ['name' => 'dayle']);"
msgstr ""

# P
#: ./docs/10.x/localization.md:146
#: ./docs/11.x/localization.md:144
#: ./docs/master/localization.md:144
msgid "You should not define translation string keys that conflict with other translation filenames. For example, translating `__('Action')` for the \"NL\" locale while a `nl/action.php` file exists but a `nl.json` file does not exist will result in the translator returning the entire contents of `nl/action.php`."
msgstr "請不要定義與其他語系檔名衝突的翻譯字串。舉例來說，為荷蘭語「NL」翻譯 `__('Action')` 時，若有 `nl/action.php` 檔案但 `nl.json` 檔不存在時，翻譯程式就會回傳整個 `nl/action.php` 的內容。"

# P
#: ./docs/8.x/localization.md:146
#: ./docs/9.x/localization.md:167
#: ./docs/10.x/localization.md:178
#: ./docs/11.x/localization.md:176
#: ./docs/master/localization.md:176
msgid "If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:"
msgstr "若預留位置只包含大寫字母，或是首字母大寫，則翻譯字串值也會依照相應的方法調整大小寫："

# CODE
#: ./docs/8.x/localization.md:148
#: ./docs/9.x/localization.md:169
#: ./docs/10.x/localization.md:180
#: ./docs/11.x/localization.md:178
#: ./docs/master/localization.md:178
msgid ""
"'welcome' => 'Welcome, :NAME', // Welcome, DAYLE\n"
"'goodbye' => 'Goodbye, :Name', // Goodbye, Dayle"
msgstr ""

# P
#: ./docs/8.x/localization.md:151
#: ./docs/9.x/localization.md:194
#: ./docs/10.x/localization.md:203
#: ./docs/11.x/localization.md:201
#: ./docs/master/localization.md:201
#~ msgid "<a name=\"pluralization\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/localization.md:152
#: ./docs/9.x/localization.md:195
#: ./docs/10.x/localization.md:204
#: ./docs/11.x/localization.md:202
#: ./docs/master/localization.md:202
msgid "Pluralization"
msgstr "複數化"

# P
#: ./docs/8.x/localization.md:154
#: ./docs/9.x/localization.md:197
#: ./docs/10.x/localization.md:206
#: ./docs/11.x/localization.md:204
#: ./docs/master/localization.md:204
msgid "Pluralization is a complex problem, as different languages have a variety of complex rules for pluralization; however, Laravel can help you translate strings differently based on pluralization rules that you define. Using a `|` character, you may distinguish singular and plural forms of a string:"
msgstr "複數是一個很複雜的問題，因為不同的語言有各種不同的複雜複數規則。不過，Laravel 可以讓你依據定義的複數化規則來有不同的翻譯字串。使用 `|` 字串就可以區分字串的單數與複數形："

# CODE
#: ./docs/8.x/localization.md:156
#: ./docs/9.x/localization.md:199
#: ./docs/10.x/localization.md:208
#: ./docs/11.x/localization.md:206
#: ./docs/master/localization.md:206
msgid "'apples' => 'There is one apple|There are many apples',"
msgstr ""

# P
#: ./docs/8.x/localization.md:158
#: ./docs/9.x/localization.md:201
#: ./docs/10.x/localization.md:210
#: ./docs/11.x/localization.md:208
#: ./docs/master/localization.md:208
msgid "Of course, pluralization is also supported when using [translation strings as keys](#using-translation-strings-as-keys):"
msgstr "當然，使用[翻譯字串作為索引鍵](#using-translation-strings-as-keys)時也支援複數化："

# CODE: js
# CODE: json
#: ./docs/8.x/localization.md:160
#: ./docs/9.x/localization.md:203
#: ./docs/10.x/localization.md:212
#: ./docs/11.x/localization.md:210
#: ./docs/master/localization.md:210
msgid ""
"{\n"
"    \"There is one apple|There are many apples\": \"Hay una manzana|Hay muchas manzanas\"\n"
"}"
msgstr ""

# P
#: ./docs/8.x/localization.md:166
#: ./docs/9.x/localization.md:209
#: ./docs/10.x/localization.md:218
#: ./docs/11.x/localization.md:216
#: ./docs/master/localization.md:216
msgid "You may even create more complex pluralization rules which specify translation strings for multiple ranges of values:"
msgstr "也可以為不同的值指定不同翻譯字串以建立更複雜的複數化規則："

# H3
#: ./docs/10.x/localization.md:168
#: ./docs/11.x/localization.md:166
#: ./docs/master/localization.md:166
msgid "Replacing Parameters in Translation Strings"
msgstr ""

# CODE
#: ./docs/8.x/localization.md:168
#: ./docs/9.x/localization.md:211
#: ./docs/10.x/localization.md:220
#: ./docs/11.x/localization.md:218
#: ./docs/master/localization.md:218
msgid "'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',"
msgstr ""

# P
#: ./docs/8.x/localization.md:170
#: ./docs/9.x/localization.md:213
#: ./docs/10.x/localization.md:222
#: ./docs/11.x/localization.md:220
#: ./docs/master/localization.md:220
msgid "After defining a translation string that has pluralization options, you may use the `trans_choice` function to retrieve the line for a given \"count\". In this example, since the count is greater than one, the plural form of the translation string is returned:"
msgstr "定義有複數化選項的翻譯字串後，可使用 `trans_choice` 函式來取得給定「數目」的字串。在這個例子中，由於給定數目大於 1，所以會回傳該翻譯字串的複數形："

# CODE
#: ./docs/8.x/localization.md:172
#: ./docs/9.x/localization.md:215
#: ./docs/10.x/localization.md:224
#: ./docs/11.x/localization.md:222
#: ./docs/master/localization.md:222
msgid "echo trans_choice('messages.apples', 10);"
msgstr ""

# P
#: ./docs/9.x/localization.md:172
#: ./docs/10.x/localization.md:183
#: ./docs/11.x/localization.md:181
#: ./docs/master/localization.md:181
#~ msgid "<a name=\"object-replacement-formatting\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/localization.md:173
#: ./docs/10.x/localization.md:184
#: ./docs/11.x/localization.md:182
#: ./docs/master/localization.md:182
msgid "Object Replacement Formatting"
msgstr "物件取代格式"

# P
#: ./docs/8.x/localization.md:174
#: ./docs/9.x/localization.md:217
#: ./docs/10.x/localization.md:226
#: ./docs/11.x/localization.md:224
#: ./docs/master/localization.md:224
msgid "You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the `trans_choice` function:"
msgstr "也可以在複數化字串中定義預留位置屬性。可以在 `trans_choice` 的第三個引數上傳入陣列來取代預留位置："

# P
#: ./docs/9.x/localization.md:175
#: ./docs/10.x/localization.md:186
#: ./docs/11.x/localization.md:184
#: ./docs/master/localization.md:184
msgid "If you attempt to provide an object as a translation placeholder, the object's `__toString` method will be invoked. The [`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) method is one of PHP's built-in \"magic methods\". However, sometimes you may not have control over the `__toString` method of a given class, such as when the class that you are interacting with belongs to a third-party library."
msgstr "若在預留位置上嘗試提供物件時，則會呼叫該物件的 `__toString` 方法。[`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) 方法是 PHP 的其中一個「魔法方法」。不過，有的時候我們可能無法控制給定類別的 `__toString` 方法，如：來自第三方函式庫的類別。"

# CODE
#: ./docs/8.x/localization.md:176
#: ./docs/9.x/localization.md:219
#: ./docs/10.x/localization.md:228
#: ./docs/11.x/localization.md:226
#: ./docs/master/localization.md:226
msgid ""
"'minutes_ago' => '{1} :value minute ago|[2,*] :value minutes ago',\n"
"\n"
"echo trans_choice('time.minutes_ago', 5, ['value' => 5]);"
msgstr ""

# P
#: ./docs/9.x/localization.md:177
#: ./docs/10.x/localization.md:188
#: ./docs/11.x/localization.md:186
#: ./docs/master/localization.md:186
msgid "In these cases, Laravel allows you to register a custom formatting handler for that particular type of object. To accomplish this, you should invoke the translator's `stringable` method. The `stringable` method accepts a closure, which should type-hint the type of object that it is responsible for formatting. Typically, the `stringable` method should be invoked within the `boot` method of your application's `AppServiceProvider` class:"
msgstr "因此，在 Laravel 中，我們可以針對特定類型的物件註冊自訂的格式處理常式。若要自定格式處理常式，請呼叫 Translator 的 `stringable` 方法。`stringable` 方法接受一個閉包，請在該閉包的型別提示 (Type-hint) 中指定其負責格式化的物件。一般情況下來說，應在專案的 `AppServiceProvider` 類別中 `boot` 方法內呼叫這個 `stringable` 方法："

# CODE
#: ./docs/9.x/localization.md:179
msgid ""
"use Illuminate\\Support\\Facades\\Lang;\n"
"use Money\\Money;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Lang::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}"
msgstr ""

# P
#: ./docs/8.x/localization.md:180
#: ./docs/9.x/localization.md:223
#: ./docs/10.x/localization.md:232
#: ./docs/11.x/localization.md:230
#: ./docs/master/localization.md:230
msgid "If you would like to display the integer value that was passed to the `trans_choice` function, you may use the built-in `:count` placeholder:"
msgstr "若想顯示傳入 `trans_choice` 函式的整數值，可使用內建的 `:count` 預留位置："

# CODE
#: ./docs/8.x/localization.md:182
#: ./docs/9.x/localization.md:225
#: ./docs/10.x/localization.md:234
#: ./docs/11.x/localization.md:232
#: ./docs/master/localization.md:232
msgid "'apples' => '{0} There are none|{1} There is one|[2,*] There are :count',"
msgstr ""

# P
#: ./docs/8.x/localization.md:184
#: ./docs/9.x/localization.md:227
#: ./docs/10.x/localization.md:236
#: ./docs/11.x/localization.md:234
#: ./docs/master/localization.md:234
#~ msgid "<a name=\"overriding-package-language-files\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/localization.md:185
#: ./docs/9.x/localization.md:228
#: ./docs/10.x/localization.md:237
#: ./docs/11.x/localization.md:235
#: ./docs/master/localization.md:235
msgid "Overriding Package Language Files"
msgstr "覆寫套件的語系檔"

# P
#: ./docs/8.x/localization.md:187
msgid "Some packages may ship with their own language files. Instead of changing the package's core files to tweak these lines, you may override them by placing files in the `resources/lang/vendor/{package}/{locale}` directory."
msgstr "有的套件中包含了套件自己的語系檔。除了直接修改套件的檔案來更改語系檔內容外，還可以在 `resources/lang/vendor/{package}/{locale}` 目錄內放置檔案來覆寫這些語系檔。"

# P
#: ./docs/8.x/localization.md:189
msgid "So, for example, if you need to override the English translation strings in `messages.php` for a package named `skyrim/hearthfire`, you should place a language file at: `resources/lang/vendor/hearthfire/en/messages.php`. Within this file, you should only define the translation strings you wish to override. Any translation strings you don't override will still be loaded from the package's original language files."
msgstr "舉例來說，若想為 `skyrim/hearthfire` 套件覆寫的 `messages.php` 內的英文翻譯，我們可以在 `resources/lang/vendor/hearthfire/en/messages.php` 中放置一個語系檔。在這個的檔案內，我們只需要定義要覆寫的翻譯字串即可。未覆寫的翻譯字串會從該套件的原始語系檔中載入。"

# CODE
#: ./docs/10.x/localization.md:190
#: ./docs/11.x/localization.md:188
#: ./docs/master/localization.md:188
msgid ""
"use Illuminate\\Support\\Facades\\Lang;\n"
"use Money\\Money;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Lang::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}"
msgstr ""

# P
#: ./docs/9.x/localization.md:230
#: ./docs/10.x/localization.md:239
#: ./docs/11.x/localization.md:237
#: ./docs/master/localization.md:237
msgid "Some packages may ship with their own language files. Instead of changing the package's core files to tweak these lines, you may override them by placing files in the `lang/vendor/{package}/{locale}` directory."
msgstr "有的套件中包含了套件自己的語系檔。除了直接修改套件的檔案來更改語系檔內容外，還可以在 `lang/vendor/{package}/{locale}` 目錄內放置檔案來覆寫這些語系檔。"

# P
#: ./docs/9.x/localization.md:232
#: ./docs/10.x/localization.md:241
#: ./docs/11.x/localization.md:239
#: ./docs/master/localization.md:239
msgid "So, for example, if you need to override the English translation strings in `messages.php` for a package named `skyrim/hearthfire`, you should place a language file at: `lang/vendor/hearthfire/en/messages.php`. Within this file, you should only define the translation strings you wish to override. Any translation strings you don't override will still be loaded from the package's original language files."
msgstr "舉例來說，若想為 `skyrim/hearthfire` 套件覆寫的 `messages.php` 內的英文翻譯，我們可以在 `lang/vendor/hearthfire/en/messages.php` 中放置一個語系檔。在這個的檔案內，我們只需要定義要覆寫的翻譯字串即可。未覆寫的翻譯字串會從該套件的原始語系檔中載入。"
