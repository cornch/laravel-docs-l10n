msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/cashier-paddle.pot\n"
"X-Crowdin-File-ID: 23\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-06-30 08:17\n"

#: docs/10.x/cashier-paddle.md:block 1 (header)
msgid "Laravel Cashier (Paddle)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Upgrading Cashier](#upgrading-cashier)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Paddle Sandbox](#paddle-sandbox)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Database Migrations](#database-migrations)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Billable Model](#billable-model)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[API Keys](#api-keys)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Paddle JS](#paddle-js)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Currency Configuration](#currency-configuration)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Overriding Default Models](#overriding-default-models)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Core Concepts](#core-concepts)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Pay Links](#pay-links)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Inline Checkout](#inline-checkout)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[User Identification](#user-identification)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Prices](#prices)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Customers](#customers)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Customer Defaults](#customer-defaults)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Subscriptions](#subscriptions)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Creating Subscriptions](#creating-subscriptions)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Checking Subscription Status](#checking-subscription-status)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Subscription Single Charges](#subscription-single-charges)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Updating Payment Information](#updating-payment-information)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Changing Plans](#changing-plans)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Subscription Quantity](#subscription-quantity)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Subscription Modifiers](#subscription-modifiers)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Multiple Subscriptions](#multiple-subscriptions)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Pausing Subscriptions](#pausing-subscriptions)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Cancelling Subscriptions](#cancelling-subscriptions)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Subscription Trials](#subscription-trials)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[With Payment Method Up Front](#with-payment-method-up-front)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Without Payment Method Up Front](#without-payment-method-up-front)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Handling Paddle Webhooks](#handling-paddle-webhooks)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Defining Webhook Event Handlers](#defining-webhook-event-handlers)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Verifying Webhook Signatures](#verifying-webhook-signatures)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Single Charges](#single-charges)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Simple Charge](#simple-charge)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Charging Products](#charging-products)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Refunding Orders](#refunding-orders)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Receipts](#receipts)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Past & Upcoming Payments](#past-and-upcoming-payments)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Handling Failed Payments](#handling-failed-payments)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 2 (unordered list)
msgid "[Testing](#testing)"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 5 (quote)
msgid "**Warning** At this time, Cashier Paddle only supports Paddle Classic, which is not available to new Paddle customers unless you contact Paddle support."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 6 (paragraph)
msgid "[Laravel Cashier Paddle](https://github.com/laravel/cashier-paddle) provides an expressive, fluent interface to [Paddle's](https://paddle.com) subscription billing services. It handles almost all of the boilerplate subscription billing code you are dreading. In addition to basic subscription management, Cashier can handle: coupons, swapping subscription, subscription \"quantities\", cancellation grace periods, and more."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 7 (paragraph)
msgid "While working with Cashier we recommend you also review Paddle's [user guides](https://developer.paddle.com/guides) and [API documentation](https://developer.paddle.com/api-reference)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 9 (header)
msgid "Upgrading Cashier"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 10 (paragraph)
msgid "When upgrading to a new version of Cashier, it's important that you carefully review [the upgrade guide](https://github.com/laravel/cashier-paddle/blob/master/UPGRADE.md)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 12 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 13 (paragraph)
msgid "First, install the Cashier package for Paddle using the Composer package manager:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 14 (code)
msgid "composer require laravel/cashier-paddle\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 15 (quote)
msgid "**Warning** To ensure Cashier properly handles all Paddle events, remember to [set up Cashier's webhook handling](#handling-paddle-webhooks)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 17 (header)
msgid "Paddle Sandbox"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 18 (paragraph)
msgid "During local and staging development, you should [register a Paddle Sandbox account](https://developer.paddle.com/getting-started/sandbox). This account will give you a sandboxed environment to test and develop your applications without making actual payments. You may use Paddle's [test card numbers](https://developer.paddle.com/getting-started/sandbox#test-cards) to simulate various payment scenarios."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 19 (paragraph)
msgid "When using the Paddle Sandbox environment, you should set the `PADDLE_SANDBOX` environment variable to `true` within your application's `.env` file:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 20 (code)
msgid "PADDLE_SANDBOX=true\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 21 (paragraph)
msgid "After you have finished developing your application you may [apply for a Paddle vendor account](https://paddle.com). Before your application is placed into production, Paddle will need to approve your application's domain."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 23 (header)
msgid "Database Migrations"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 24 (paragraph)
msgid "The Cashier service provider registers its own database migration directory, so remember to migrate your database after installing the package. The Cashier migrations will create a new `customers` table. In addition, a new `subscriptions` table will be created to store all of your customer's subscriptions. Finally, a new `receipts` table will be created to store all of your application's receipt information:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 25 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 26 (paragraph)
msgid "If you need to overwrite the migrations that are included with Cashier, you can publish them using the `vendor:publish` Artisan command:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 27 (code)
msgid "php artisan vendor:publish --tag=\"cashier-migrations\"\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 28 (paragraph)
msgid "If you would like to prevent Cashier's migrations from running entirely, you may use the `ignoreMigrations` provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 29 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Cashier::ignoreMigrations();\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 31 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 33 (header)
msgid "Billable Model"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 34 (paragraph)
msgid "Before using Cashier, you must add the `Billable` trait to your user model definition. This trait provides various methods to allow you to perform common billing tasks, such as creating subscriptions, applying coupons and updating payment method information:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 35 (code)
msgid "use Laravel\\Paddle\\Billable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Billable;\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 36 (paragraph)
msgid "If you have billable entities that are not users, you may also add the trait to those classes:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 37 (code)
msgid "use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Paddle\\Billable;\n\n"
"class Team extends Model\n"
"{\n"
"    use Billable;\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 39 (header)
msgid "API Keys"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 40 (paragraph)
msgid "Next, you should configure your Paddle keys in your application's `.env` file. You can retrieve your Paddle API keys from the Paddle control panel:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 41 (code)
msgid "PADDLE_VENDOR_ID=your-paddle-vendor-id\n"
"PADDLE_VENDOR_AUTH_CODE=your-paddle-vendor-auth-code\n"
"PADDLE_PUBLIC_KEY=\"your-paddle-public-key\"\n"
"PADDLE_SANDBOX=true\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 42 (paragraph)
msgid "The `PADDLE_SANDBOX` environment variable should be set to `true` when you are using [Paddle's Sandbox environment](#paddle-sandbox). The `PADDLE_SANDBOX` variable should be set to `false` if you are deploying your application to production and are using Paddle's live vendor environment."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 44 (header)
msgid "Paddle JS"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 45 (paragraph)
msgid "Paddle relies on its own JavaScript library to initiate the Paddle checkout widget. You can load the JavaScript library by placing the `@paddleJS` Blade directive right before your application layout's closing `</head>` tag:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 46 (code)
msgid "<head>\n"
"    ...\n\n"
"    @paddleJS\n"
"</head>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 48 (header)
msgid "Currency Configuration"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 49 (paragraph)
msgid "The default Cashier currency is United States Dollars (USD). You can change the default currency by defining a `CASHIER_CURRENCY` environment variable within your application's `.env` file:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 50 (code)
msgid "CASHIER_CURRENCY=EUR\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 51 (paragraph)
msgid "In addition to configuring Cashier's currency, you may also specify a locale to be used when formatting money values for display on invoices. Internally, Cashier utilizes [PHP's `NumberFormatter` class](https://www.php.net/manual/en/class.numberformatter.php) to set the currency locale:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 52 (code)
msgid "CASHIER_CURRENCY_LOCALE=nl_BE\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 53 (quote)
msgid "**Warning** In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 55 (header)
msgid "Overriding Default Models"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 56 (paragraph)
msgid "You are free to extend the models used internally by Cashier by defining your own model and extending the corresponding Cashier model:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 57 (code)
msgid "use Laravel\\Paddle\\Subscription as CashierSubscription;\n\n"
"class Subscription extends CashierSubscription\n"
"{\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 58 (paragraph)
msgid "After defining your model, you may instruct Cashier to use your custom model via the `Laravel\\Paddle\\Cashier` class. Typically, you should inform Cashier about your custom models in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 59 (code)
msgid "use App\\Models\\Cashier\\Receipt;\n"
"use App\\Models\\Cashier\\Subscription;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::useReceiptModel(Receipt::class);\n"
"    Cashier::useSubscriptionModel(Subscription::class);\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 61 (header)
msgid "Core Concepts"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 63 (header)
msgid "Pay Links"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 64 (paragraph)
msgid "Paddle lacks an extensive CRUD API to perform subscription state changes. Therefore, most interactions with Paddle are done through its [checkout widget](https://developer.paddle.com/guides/how-tos/checkout/paddle-checkout). Before we can display the checkout widget, we must generate a \"pay link\" using Cashier. A \"pay link\" will inform the checkout widget of the billing operation we wish to perform:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 65 (code)
msgid "use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/subscribe', function (Request $request) {\n"
"    $payLink = $request->user()->newSubscription('default', $premium = 34567)\n"
"        ->returnTo(route('home'))\n"
"        ->create();\n\n"
"    return view('billing', ['payLink' => $payLink]);\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 66 (paragraph)
msgid "Cashier includes a `paddle-button` [Blade component](/docs/{{version}}/blade#components). We may pass the pay link URL to this component as a \"prop\". When this button is clicked, Paddle's checkout widget will be displayed:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 67 (code)
msgid "<x-paddle-button :url=\"$payLink\" class=\"px-8 py-4\">\n"
"    Subscribe\n"
"</x-paddle-button>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 68 (paragraph)
msgid "By default, this will display a button with the standard Paddle styling. You can remove all Paddle styling by adding the `data-theme=\"none\"` attribute to the component:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 69 (code)
msgid "<x-paddle-button :url=\"$payLink\" class=\"px-8 py-4\" data-theme=\"none\">\n"
"    Subscribe\n"
"</x-paddle-button>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 70 (paragraph)
msgid "The Paddle checkout widget is asynchronous. Once the user creates or updates a subscription within the widget, Paddle will send your application webhooks so that you may properly update the subscription state in our own database. Therefore, it's important that you properly [set up webhooks](#handling-paddle-webhooks) to accommodate for state changes from Paddle."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 71 (paragraph)
msgid "For more information on pay links, you may review [the Paddle API documentation on pay link generation](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 72 (quote)
msgid "**Warning** After a subscription state change, the delay for receiving the corresponding webhook is typically minimal but you should account for this in your application by considering that your user's subscription might not be immediately available after completing the checkout."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 74 (header)
msgid "Manually Rendering Pay Links"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 75 (paragraph)
msgid "You may also manually render a pay link without using Laravel's built-in Blade components. To get started, generate the pay link URL as demonstrated in previous examples:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 76 (code)
msgid "$payLink = $request->user()->newSubscription('default', $premium = 34567)\n"
"    ->returnTo(route('home'))\n"
"    ->create();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 77 (paragraph)
msgid "Next, simply attach the pay link URL to an `a` element in your HTML:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 78 (code)
msgid "<a href=\"#!\" class=\"ml-4 paddle_button\" data-override=\"{{ $payLink }}\">\n"
"    Paddle Checkout\n"
"</a>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 80 (header)
msgid "Payments Requiring Additional Confirmation"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 81 (paragraph)
msgid "Sometimes additional verification is required in order to confirm and process a payment. When this happens, Paddle will present a payment confirmation screen. Payment confirmation screens presented by Paddle or Cashier may be tailored to a specific bank or card issuer's payment flow and can include additional card confirmation, a temporary small charge, separate device authentication, or other forms of verification."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 83 (header)
msgid "Inline Checkout"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 84 (paragraph)
msgid "If you don't want to make use of Paddle's \"overlay\" style checkout widget, Paddle also provides the option to display the widget inline. While this approach does not allow you to adjust any of the checkout's HTML fields, it allows you to embed the widget within your application."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 85 (paragraph)
msgid "To make it easy for you to get started with inline checkout, Cashier includes a `paddle-checkout` Blade component. To get started, you should [generate a pay link](#pay-links) and pass the pay link to the component's `override` attribute:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 86 (code)
msgid "<x-paddle-checkout :override=\"$payLink\" class=\"w-full\" />\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 87 (paragraph)
msgid "To adjust the height of the inline checkout component, you may pass the `height` attribute to the Blade component:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 88 (code)
msgid "<x-paddle-checkout :override=\"$payLink\" class=\"w-full\" height=\"500\" />\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 90 (header)
msgid "Inline Checkout Without Pay Links"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 91 (paragraph)
msgid "Alternatively, you may customize the widget with custom options instead of using a pay link:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 92 (code)
msgid "@php\n"
"$options = [\n"
"    'product' => $productId,\n"
"    'title' => 'Product Title',\n"
"];\n"
"@endphp\n\n"
"<x-paddle-checkout :options=\"$options\" class=\"w-full\" />\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 93 (paragraph)
msgid "Please consult Paddle's [guide on Inline Checkout](https://developer.paddle.com/guides/how-tos/checkout/inline-checkout) as well as their [parameter reference](https://developer.paddle.com/reference/paddle-js/parameters) for further details on the inline checkout's available options."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 94 (quote)
msgid "**Warning** If you would like to also use the `passthrough` option when specifying custom options, you should provide a key / value array as its value. Cashier will automatically handle converting the array to a JSON string. In addition, the `customer_id` passthrough option is reserved for internal Cashier usage."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 96 (header)
msgid "Manually Rendering An Inline Checkout"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 97 (paragraph)
msgid "You may also manually render an inline checkout without using Laravel's built-in Blade components. To get started, generate the pay link URL [as demonstrated in previous examples](#pay-links)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 98 (paragraph)
msgid "Next, you may use Paddle.js to initialize the checkout. To keep this example simple, we will demonstrate this using [Alpine.js](https://github.com/alpinejs/alpine); however, you are free to translate this example to your own frontend stack:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 99 (code)
msgid "<div class=\"paddle-checkout\" x-data=\"{}\" x-init=\"\n"
"    Paddle.Checkout.open({\n"
"        override: {{ $payLink }},\n"
"        method: 'inline',\n"
"        frameTarget: 'paddle-checkout',\n"
"        frameInitialHeight: 366,\n"
"        frameStyle: 'width: 100%; background-color: transparent; border: none;'\n"
"    });\n"
"\">\n"
"</div>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 101 (header)
msgid "User Identification"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 102 (paragraph)
msgid "In contrast to Stripe, Paddle users are unique across all of Paddle, not unique per Paddle account. Because of this, Paddle's API's do not currently provide a method to update a user's details such as their email address. When generating pay links, Paddle identifies users using the `customer_email` parameter. When creating a subscription, Paddle will try to match the user provided email to an existing Paddle user."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 103 (paragraph)
msgid "In light of this behavior, there are some important things to keep in mind when using Cashier and Paddle. First, you should be aware that even though subscriptions in Cashier are tied to the same application user, **they could be tied to different users within Paddle's internal systems**. Secondly, each subscription has its own connected payment method information and could also have different email addresses within Paddle's internal systems (depending on which email was assigned to the user when the subscription was created)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 104 (paragraph)
msgid "Therefore, when displaying subscriptions you should always inform the user which email address or payment method information is connected to the subscription on a per-subscription basis. Retrieving this information can be done with the following methods provided by the `Laravel\\Paddle\\Subscription` model:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 105 (code)
msgid "$subscription = $user->subscription('default');\n\n"
"$subscription->paddleEmail();\n"
"$subscription->paymentMethod();\n"
"$subscription->cardBrand();\n"
"$subscription->cardLastFour();\n"
"$subscription->cardExpirationDate();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 106 (paragraph)
msgid "There is currently no way to modify a user's email address through the Paddle API. When a user wants to update their email address within Paddle, the only way for them to do so is to contact Paddle customer support. When communicating with Paddle, they need to provide the `paddleEmail` value of the subscription to assist Paddle in updating the correct user."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 108 (header)
msgid "Prices"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 109 (paragraph)
msgid "Paddle allows you to customize prices per currency, essentially allowing you to configure different prices for different countries. Cashier Paddle allows you to retrieve all of the prices for a given product using the `productPrices` method. This method accepts the product IDs of the products you wish to retrieve prices for:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 110 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"$prices = Cashier::productPrices([123, 456]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 111 (paragraph)
msgid "The currency will be determined based on the IP address of the request; however, you may optionally provide a specific country to retrieve prices for:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 112 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"$prices = Cashier::productPrices([123, 456], ['customer_country' => 'BE']);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 113 (paragraph)
msgid "After retrieving the prices you may display them however you wish:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 114 (code)
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - {{ $price->price()->gross() }}</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 115 (paragraph)
msgid "You may also display the net price (excludes tax) and display the tax amount separately:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 116 (code)
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - {{ $price->price()->net() }} (+ {{ $price->price()->tax() }} tax)</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 117 (paragraph)
msgid "If you retrieved prices for subscription plans you can display their initial and recurring price separately:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 118 (code)
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - Initial: {{ $price->initialPrice()->gross() }} - Recurring: {{ $price->recurringPrice()->gross() }}</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 119 (paragraph)
msgid "For more information, [check Paddle's API documentation on prices](https://developer.paddle.com/api-reference/checkout-api/prices/getprices)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 121 (header)
msgid "Customers"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 122 (paragraph)
msgid "If a user is already a customer and you would like to display the prices that apply to that customer, you may do so by retrieving the prices directly from the customer instance:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 123 (code)
msgid "use App\\Models\\User;\n\n"
"$prices = User::find(1)->productPrices([123, 456]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 124 (paragraph)
msgid "Internally, Cashier will use the user's [`paddleCountry` method](#customer-defaults) to retrieve the prices in their currency. So, for example, a user living in the United States will see prices in USD while a user in Belgium will see prices in EUR. If no matching currency can be found the default currency of the product will be used. You can customize all prices of a product or subscription plan in the Paddle control panel."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 126 (header)
msgid "Coupons"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 127 (paragraph)
msgid "You may also choose to display prices after a coupon reduction. When calling the `productPrices` method, coupons may be passed as a comma delimited string:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 128 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"$prices = Cashier::productPrices([123, 456], [\n"
"    'coupons' => 'SUMMERSALE,20PERCENTOFF'\n"
"]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 129 (paragraph)
msgid "Then, display the calculated prices using the `price` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 131 (paragraph)
msgid "You may display the original listed prices (without coupon discounts) using the `listPrice` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 132 (code)
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - {{ $price->listPrice()->gross() }}</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 133 (quote)
msgid "**Warning** When using the prices API, Paddle only allows applying coupons to one-time purchase products and not to subscription plans."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 137 (header)
msgid "Customer Defaults"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 138 (paragraph)
msgid "Cashier allows you to define some useful defaults for your customers when creating pay links. Setting these defaults allow you to pre-fill a customer's email address, country, and postal code so that they can immediately move on to the payment portion of the checkout widget. You can set these defaults by overriding the following methods on your billable model:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 139 (code)
msgid "/**\n"
" * Get the customer's email address to associate with Paddle.\n"
" */\n"
"public function paddleEmail(): string|null\n"
"{\n"
"    return $this->email;\n"
"}\n\n"
"/**\n"
" * Get the customer's country to associate with Paddle.\n"
" *\n"
" * This needs to be a 2 letter code. See the link below for supported countries.\n"
" *\n"
" * @link https://developer.paddle.com/reference/platform-parameters/supported-countries\n"
" */\n"
"public function paddleCountry(): string|null\n"
"{\n"
"    // ...\n"
"}\n\n"
"/**\n"
" * Get the customer's postal code to associate with Paddle.\n"
" *\n"
" * See the link below for countries which require this.\n"
" *\n"
" * @link https://developer.paddle.com/reference/platform-parameters/supported-countries#countries-requiring-postcode\n"
" */\n"
"public function paddlePostcode(): string|null\n"
"{\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 140 (paragraph)
msgid "These defaults will be used for every action in Cashier that generates a [pay link](#pay-links)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 142 (header)
msgid "Subscriptions"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 144 (header)
msgid "Creating Subscriptions"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 145 (paragraph)
msgid "To create a subscription, first retrieve an instance of your billable model from your database, which typically will be an instance of `App\\Models\\User`. Once you have retrieved the model instance, you may use the `newSubscription` method to create the model's subscription pay link:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 146 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/subscribe', function (Request $request) {\n"
"    $payLink = $request->user()->newSubscription('default', $premium = 12345)\n"
"        ->returnTo(route('home'))\n"
"        ->create();\n\n"
"    return view('billing', ['payLink' => $payLink]);\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 147 (paragraph)
msgid "The first argument passed to the `newSubscription` method should be the internal name of the subscription. If your application only offers a single subscription, you might call this `default` or `primary`. This subscription name is only for internal application usage and is not meant to be shown to users. In addition, it should not contain spaces and it should never be changed after creating the subscription. The second argument given to the `newSubscription` method is the specific plan the user is subscribing to. This value should correspond to the plan's identifier in Paddle. The `returnTo` method accepts a URL that your user will be redirected to after they successfully complete the checkout."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 148 (paragraph)
msgid "The `create` method will create a pay link which you can use to generate a payment button. The payment button can be generated using the `paddle-button` [Blade component](/docs/{{version}}/blade#components) that is included with Cashier Paddle:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 150 (paragraph)
msgid "After the user has finished their checkout, a `subscription_created` webhook will be dispatched from Paddle. Cashier will receive this webhook and setup the subscription for your customer. In order to make sure all webhooks are properly received and handled by your application, ensure you have properly [setup webhook handling](#handling-paddle-webhooks)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 152 (header)
msgid "Additional Details"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 153 (paragraph)
msgid "If you would like to specify additional customer or subscription details, you may do so by passing them as an array of key / value pairs to the `create` method. To learn more about the additional fields supported by Paddle, check out Paddle's documentation on [generating pay links](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink):"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 154 (code)
msgid "$payLink = $user->newSubscription('default', $monthly = 12345)\n"
"    ->returnTo(route('home'))\n"
"    ->create([\n"
"        'vat_number' => $vatNumber,\n"
"    ]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 157 (paragraph)
msgid "If you would like to apply a coupon when creating the subscription, you may use the `withCoupon` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 158 (code)
msgid "$payLink = $user->newSubscription('default', $monthly = 12345)\n"
"    ->returnTo(route('home'))\n"
"    ->withCoupon('code')\n"
"    ->create();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 160 (header)
msgid "Metadata"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 161 (paragraph)
msgid "You can also pass an array of metadata using the `withMetadata` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 162 (code)
msgid "$payLink = $user->newSubscription('default', $monthly = 12345)\n"
"    ->returnTo(route('home'))\n"
"    ->withMetadata(['key' => 'value'])\n"
"    ->create();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 163 (quote)
msgid "**Warning** When providing metadata, please avoid using `subscription_name` as a metadata key. This key is reserved for internal use by Cashier."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 165 (header)
msgid "Checking Subscription Status"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 166 (paragraph)
msgid "Once a user is subscribed to your application, you may check their subscription status using a variety of convenient methods. First, the `subscribed` method returns `true` if the user has an active subscription, even if the subscription is currently within its trial period:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 167 (code)
msgid "if ($user->subscribed('default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 168 (paragraph)
msgid "The `subscribed` method also makes a great candidate for a [route middleware](/docs/{{version}}/middleware), allowing you to filter access to routes and controllers based on the user's subscription status:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 169 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('billing');\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 170 (paragraph)
msgid "If you would like to determine if a user is still within their trial period, you may use the `onTrial` method. This method can be useful for determining if you should display a warning to the user that they are still on their trial period:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 171 (code)
msgid "if ($user->subscription('default')->onTrial()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 172 (paragraph)
msgid "The `subscribedToPlan` method may be used to determine if the user is subscribed to a given plan based on a given Paddle plan ID. In this example, we will determine if the user's `default` subscription is actively subscribed to the monthly plan:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 173 (code)
msgid "if ($user->subscribedToPlan($monthly = 12345, 'default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 174 (paragraph)
msgid "The `recurring` method may be used to determine if the user is currently subscribed and is no longer within their trial period:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 175 (code)
msgid "if ($user->subscription('default')->recurring()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 177 (header)
msgid "Cancelled Subscription Status"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 178 (paragraph)
msgid "To determine if the user was once an active subscriber but has cancelled their subscription, you may use the `cancelled` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 179 (code)
msgid "if ($user->subscription('default')->cancelled()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 180 (paragraph)
msgid "You may also determine if a user has cancelled their subscription, but are still on their \"grace period\" until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their \"grace period\" until March 10th. Note that the `subscribed` method still returns `true` during this time:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 181 (code)
msgid "if ($user->subscription('default')->onGracePeriod()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 182 (paragraph)
msgid "To determine if the user has cancelled their subscription and is no longer within their \"grace period\", you may use the `ended` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 183 (code)
msgid "if ($user->subscription('default')->ended()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 185 (header)
msgid "Past Due Status"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 186 (paragraph)
msgid "If a payment fails for a subscription, it will be marked as `past_due`. When your subscription is in this state it will not be active until the customer has updated their payment information. You may determine if a subscription is past due using the `pastDue` method on the subscription instance:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 187 (code)
msgid "if ($user->subscription('default')->pastDue()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 188 (paragraph)
msgid "When a subscription is past due, you should instruct the user to [update their payment information](#updating-payment-information). You may configure how past due subscriptions are handled in your [Paddle subscription settings](https://vendors.paddle.com/subscription-settings)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 189 (paragraph)
msgid "If you would like subscriptions to still be considered active when they are `past_due`, you may use the `keepPastDueSubscriptionsActive` method provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 190 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 191 (quote)
msgid "**Warning** When a subscription is in a `past_due` state it cannot be changed until payment information has been updated. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in a `past_due` state."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 193 (header)
msgid "Subscription Scopes"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 194 (paragraph)
msgid "Most subscription states are also available as query scopes so that you may easily query your database for subscriptions that are in a given state:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 195 (code)
msgid "// Get all active subscriptions...\n"
"$subscriptions = Subscription::query()->active()->get();\n\n"
"// Get all of the cancelled subscriptions for a user...\n"
"$subscriptions = $user->subscriptions()->cancelled()->get();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 196 (paragraph)
msgid "A complete list of available scopes is available below:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 197 (code)
msgid "Subscription::query()->active();\n"
"Subscription::query()->onTrial();\n"
"Subscription::query()->notOnTrial();\n"
"Subscription::query()->pastDue();\n"
"Subscription::query()->recurring();\n"
"Subscription::query()->ended();\n"
"Subscription::query()->paused();\n"
"Subscription::query()->notPaused();\n"
"Subscription::query()->onPausedGracePeriod();\n"
"Subscription::query()->notOnPausedGracePeriod();\n"
"Subscription::query()->cancelled();\n"
"Subscription::query()->notCancelled();\n"
"Subscription::query()->onGracePeriod();\n"
"Subscription::query()->notOnGracePeriod();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 199 (header)
msgid "Subscription Single Charges"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 200 (paragraph)
msgid "Subscription single charges allow you to charge subscribers with a one-time charge on top of their subscriptions:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 201 (code)
msgid "$response = $user->subscription('default')->charge(12.99, 'Support Add-on');\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 202 (paragraph)
msgid "In contrast to [single charges](#single-charges), this method will immediately charge the customer's stored payment method for the subscription. The charge amount should always be defined in the currency of the subscription."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 204 (header)
msgid "Updating Payment Information"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 205 (paragraph)
msgid "Paddle always saves a payment method per subscription. If you want to update the default payment method for a subscription, you should first generate a subscription \"update URL\" using the `updateUrl` method on the subscription model:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 206 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$updateUrl = $user->subscription('default')->updateUrl();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 207 (paragraph)
msgid "Then, you may use the generated URL in combination with Cashier's provided `paddle-button` Blade component to allow the user to initiate the Paddle widget and update their payment information:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 208 (code)
msgid "<x-paddle-button :url=\"$updateUrl\" class=\"px-8 py-4\">\n"
"    Update Card\n"
"</x-paddle-button>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 209 (paragraph)
msgid "When a user has finished updating their information, a `subscription_updated` webhook will be dispatched by Paddle and the subscription details will be updated in your application's database."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 211 (header)
msgid "Changing Plans"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 212 (paragraph)
msgid "After a user has subscribed to your application, they may occasionally want to change to a new subscription plan. To update the subscription plan for a user, you should pass the Paddle plan's identifier to the subscription's `swap` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 213 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->subscription('default')->swap($premium = 34567);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 214 (paragraph)
msgid "If you would like to swap plans and immediately invoice the user instead of waiting for their next billing cycle, you may use the `swapAndInvoice` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 215 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->swapAndInvoice($premium = 34567);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 216 (quote)
msgid "**Warning** Plans may not be swapped when a trial is active. For additional information regarding this limitation, please see the [Paddle documentation](https://developer.paddle.com/api-reference/subscription-api/users/updateuser#usage-notes)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 218 (header)
msgid "Prorations"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 219 (paragraph)
msgid "By default, Paddle prorates charges when swapping between plans. The `noProrate` method may be used to update the subscriptions without prorating the charges:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 220 (code)
msgid "$user->subscription('default')->noProrate()->swap($premium = 34567);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 222 (header)
msgid "Subscription Quantity"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 223 (paragraph)
msgid "Sometimes subscriptions are affected by \"quantity\". For example, a project management application might charge $10 per month per project. To easily increment or decrement your subscription's quantity, use the `incrementQuantity` and `decrementQuantity` methods:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 224 (code)
msgid "$user = User::find(1);\n\n"
"$user->subscription('default')->incrementQuantity();\n\n"
"// Add five to the subscription's current quantity...\n"
"$user->subscription('default')->incrementQuantity(5);\n\n"
"$user->subscription('default')->decrementQuantity();\n\n"
"// Subtract five from the subscription's current quantity...\n"
"$user->subscription('default')->decrementQuantity(5);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 225 (paragraph)
msgid "Alternatively, you may set a specific quantity using the `updateQuantity` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 226 (code)
msgid "$user->subscription('default')->updateQuantity(10);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 227 (paragraph)
msgid "The `noProrate` method may be used to update the subscription's quantity without prorating the charges:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 228 (code)
msgid "$user->subscription('default')->noProrate()->updateQuantity(10);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 230 (header)
msgid "Subscription Modifiers"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 231 (paragraph)
msgid "Subscription modifiers allow you to implement [metered billing](https://developer.paddle.com/guides/how-tos/subscriptions/metered-billing#using-subscription-price-modifiers) or extend subscriptions with add-ons."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 232 (paragraph)
msgid "For example, you might want to offer a \"Premium Support\" add-on with your standard subscription. You can create this modifier like so:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 233 (code)
msgid "$modifier = $user->subscription('default')->newModifier(12.99)->create();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 234 (paragraph)
msgid "The example above will add a $12.99 add-on to the subscription. By default, this charge will recur on every interval you have configured for the subscription. If you would like, you can add a readable description to the modifier using the modifier's `description` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 235 (code)
msgid "$modifier = $user->subscription('default')->newModifier(12.99)\n"
"    ->description('Premium Support')\n"
"    ->create();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 236 (paragraph)
msgid "To illustrate how to implement metered billing using modifiers, imagine your application charges per SMS message sent by the user. First, you should create a $0 plan in your Paddle dashboard. Once the user has been subscribed to this plan, you can add modifiers representing each individual charge to the subscription:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 237 (code)
msgid "$modifier = $user->subscription('default')->newModifier(0.99)\n"
"    ->description('New text message')\n"
"    ->oneTime()\n"
"    ->create();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 238 (paragraph)
msgid "As you can see, we invoked the `oneTime` method when creating this modifier. This method will ensure the modifier is only charged once and does not recur every billing interval."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 240 (header)
msgid "Retrieving Modifiers"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 241 (paragraph)
msgid "You may retrieve a list of all modifiers for a subscription via the `modifiers` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 242 (code)
msgid "$modifiers = $user->subscription('default')->modifiers();\n\n"
"foreach ($modifiers as $modifier) {\n"
"    $modifier->amount(); // $0.99\n"
"    $modifier->description; // New text message.\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 244 (header)
msgid "Deleting Modifiers"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 245 (paragraph)
msgid "Modifiers may be deleted by invoking the `delete` method on a `Laravel\\Paddle\\Modifier` instance:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 246 (code)
msgid "$modifier->delete();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 248 (header)
msgid "Multiple Subscriptions"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 249 (paragraph)
msgid "Paddle allows your customers to have multiple subscriptions simultaneously. For example, you may run a gym that offers a swimming subscription and a weight-lifting subscription, and each subscription may have different pricing. Of course, customers should be able to subscribe to either or both plans."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 250 (paragraph)
msgid "When your application creates subscriptions, you may provide the name of the subscription to the `newSubscription` method. The name may be any string that represents the type of subscription the user is initiating:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 251 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::post('/swimming/subscribe', function (Request $request) {\n"
"    $request->user()\n"
"        ->newSubscription('swimming', $swimmingMonthly = 12345)\n"
"        ->create($request->paymentMethodId);\n\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 252 (paragraph)
msgid "In this example, we initiated a monthly swimming subscription for the customer. However, they may want to swap to a yearly subscription at a later time. When adjusting the customer's subscription, we can simply swap the price on the `swimming` subscription:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 253 (code)
msgid "$user->subscription('swimming')->swap($swimmingYearly = 34567);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 254 (paragraph)
msgid "Of course, you may also cancel the subscription entirely:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 255 (code)
msgid "$user->subscription('swimming')->cancel();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 257 (header)
msgid "Pausing Subscriptions"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 258 (paragraph)
msgid "To pause a subscription, call the `pause` method on the user's subscription:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 259 (code)
msgid "$user->subscription('default')->pause();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 260 (paragraph)
msgid "When a subscription is paused, Cashier will automatically set the `paused_from` column in your database. This column is used to know when the `paused` method should begin returning `true`. For example, if a customer pauses a subscription on March 1st, but the subscription was not scheduled to recur until March 5th, the `paused` method will continue to return `false` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 261 (paragraph)
msgid "You may determine if a user has paused their subscription but are still on their \"grace period\" using the `onPausedGracePeriod` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 262 (code)
msgid "if ($user->subscription('default')->onPausedGracePeriod()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 263 (paragraph)
msgid "To resume a paused a subscription, you may call the `unpause` method on the user's subscription:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 264 (code)
msgid "$user->subscription('default')->unpause();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 265 (quote)
msgid "**Warning** A subscription cannot be modified while it is paused. If you want to swap to a different plan or update quantities you must resume the subscription first."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 267 (header)
msgid "Cancelling Subscriptions"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 268 (paragraph)
msgid "To cancel a subscription, call the `cancel` method on the user's subscription:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 269 (code)
msgid "$user->subscription('default')->cancel();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 270 (paragraph)
msgid "When a subscription is cancelled, Cashier will automatically set the `ends_at` column in your database. This column is used to know when the `subscribed` method should begin returning `false`. For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the `subscribed` method will continue to return `true` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 271 (paragraph)
msgid "You may determine if a user has cancelled their subscription but are still on their \"grace period\" using the `onGracePeriod` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 273 (paragraph)
msgid "If you wish to cancel a subscription immediately, you may call the `cancelNow` method on the user's subscription:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 274 (code)
msgid "$user->subscription('default')->cancelNow();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 275 (quote)
msgid "**Warning** Paddle's subscriptions cannot be resumed after cancellation. If your customer wishes to resume their subscription, they will have to subscribe to a new subscription."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 277 (header)
msgid "Subscription Trials"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 279 (header)
msgid "With Payment Method Up Front"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 280 (quote)
msgid "**Warning** While trialing and collecting payment method details up front, Paddle prevents any subscription changes such as swapping plans or updating quantities. If you want to allow a customer to swap plans during a trial the subscription must be cancelled and recreated."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 281 (paragraph)
msgid "If you would like to offer trial periods to your customers while still collecting payment method information up front, you should use the `trialDays` method when creating your subscription pay links:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 282 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/subscribe', function (Request $request) {\n"
"    $payLink = $request->user()->newSubscription('default', $monthly = 12345)\n"
"                ->returnTo(route('home'))\n"
"                ->trialDays(10)\n"
"                ->create();\n\n"
"    return view('billing', ['payLink' => $payLink]);\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 283 (paragraph)
msgid "This method will set the trial period ending date on the subscription record within your application's database, as well as instruct Paddle to not begin billing the customer until after this date."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 284 (quote)
msgid "**Warning** If the customer's subscription is not cancelled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 285 (paragraph)
msgid "You may determine if the user is within their trial period using either the `onTrial` method of the user instance or the `onTrial` method of the subscription instance. The two examples below are equivalent:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 286 (code)
msgid "if ($user->onTrial('default')) {\n"
"    // ...\n"
"}\n\n"
"if ($user->subscription('default')->onTrial()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 287 (paragraph)
msgid "To determine if an existing trial has expired, you may use the `hasExpiredTrial` methods:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 288 (code)
msgid "if ($user->hasExpiredTrial('default')) {\n"
"    // ...\n"
"}\n\n"
"if ($user->subscription('default')->hasExpiredTrial()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 290 (header)
msgid "Defining Trial Days In Paddle / Cashier"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 291 (paragraph)
msgid "You may choose to define how many trial days your plan's receive in the Paddle dashboard or always pass them explicitly using Cashier. If you choose to define your plan's trial days in Paddle you should be aware that new subscriptions, including new subscriptions for a customer that had a subscription in the past, will always receive a trial period unless you explicitly call the `trialDays(0)` method."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 293 (header)
msgid "Without Payment Method Up Front"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 294 (paragraph)
msgid "If you would like to offer trial periods without collecting the user's payment method information up front, you may set the `trial_ends_at` column on the customer record attached to your user to your desired trial ending date. This is typically done during user registration:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 295 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::create([\n"
"    // ...\n"
"]);\n\n"
"$user->createAsCustomer([\n"
"    'trial_ends_at' => now()->addDays(10)\n"
"]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 296 (paragraph)
msgid "Cashier refers to this type of trial as a \"generic trial\", since it is not attached to any existing subscription. The `onTrial` method on the `User` instance will return `true` if the current date is not past the value of `trial_ends_at`:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 297 (code)
msgid "if ($user->onTrial()) {\n"
"    // User is within their trial period...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 298 (paragraph)
msgid "Once you are ready to create an actual subscription for the user, you may use the `newSubscription` method as usual:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 299 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/subscribe', function (Request $request) {\n"
"    $payLink = $user->newSubscription('default', $monthly = 12345)\n"
"        ->returnTo(route('home'))\n"
"        ->create();\n\n"
"    return view('billing', ['payLink' => $payLink]);\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 300 (paragraph)
msgid "To retrieve the user's trial ending date, you may use the `trialEndsAt` method. This method will return a Carbon date instance if a user is on a trial or `null` if they aren't. You may also pass an optional subscription name parameter if you would like to get the trial ending date for a specific subscription other than the default one:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 301 (code)
msgid "if ($user->onTrial()) {\n"
"    $trialEndsAt = $user->trialEndsAt('main');\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 302 (paragraph)
msgid "You may use the `onGenericTrial` method if you wish to know specifically that the user is within their \"generic\" trial period and has not created an actual subscription yet:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 303 (code)
msgid "if ($user->onGenericTrial()) {\n"
"    // User is within their \"generic\" trial period...\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 304 (quote)
msgid "**Warning** There is no way to extend or modify a trial period on a Paddle subscription after it has been created."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 306 (header)
msgid "Handling Paddle Webhooks"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 307 (paragraph)
msgid "Paddle can notify your application of a variety of events via webhooks. By default, a route that points to Cashier's webhook controller is registered by the Cashier service provider. This controller will handle all incoming webhook requests."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 308 (paragraph)
msgid "By default, this controller will automatically handle cancelling subscriptions that have too many failed charges ([as defined by your Paddle dunning settings](https://vendors.paddle.com/recover-settings#dunning-form-id)), subscription updates, and payment method changes; however, as we'll soon discover, you can extend this controller to handle any Paddle webhook event you like."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 309 (paragraph)
msgid "To ensure your application can handle Paddle webhooks, be sure to [configure the webhook URL in the Paddle control panel](https://vendors.paddle.com/alerts-webhooks). By default, Cashier's webhook controller responds to the `/paddle/webhook` URL path. The full list of all webhooks you should enable in the Paddle control panel are:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 310 (unordered list)
msgid "Subscription Created"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 310 (unordered list)
msgid "Subscription Updated"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 310 (unordered list)
msgid "Subscription Cancelled"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 310 (unordered list)
msgid "Payment Succeeded"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 310 (unordered list)
msgid "Subscription Payment Succeeded"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 311 (quote)
msgid "**Warning** Make sure you protect incoming requests with Cashier's included [webhook signature verification](/docs/{{version}}/cashier-paddle#verifying-webhook-signatures) middleware."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 313 (header)
msgid "Webhooks & CSRF Protection"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 314 (paragraph)
msgid "Since Paddle webhooks need to bypass Laravel's [CSRF protection](/docs/{{version}}/csrf), be sure to list the URI as an exception in your `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list the route outside of the `web` middleware group:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 315 (code)
msgid "protected $except = [\n"
"    'paddle/*',\n"
"];\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 317 (header)
msgid "Webhooks & Local Development"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 318 (paragraph)
msgid "For Paddle to be able to send your application webhooks during local development, you will need to expose your application via a site sharing service such as [Ngrok](https://ngrok.com/) or [Expose](https://expose.dev/docs/introduction). If you are developing your application locally using [Laravel Sail](/docs/{{version}}/sail), you may use Sail's [site sharing command](/docs/{{version}}/sail#sharing-your-site)."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 320 (header)
msgid "Defining Webhook Event Handlers"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 321 (paragraph)
msgid "Cashier automatically handles subscription cancellation on failed charges and other common Paddle webhooks. However, if you have additional webhook events you would like to handle, you may do so by listening to the following events that are dispatched by Cashier:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 322 (unordered list)
msgid "`Laravel\\Paddle\\Events\\WebhookReceived`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 322 (unordered list)
msgid "`Laravel\\Paddle\\Events\\WebhookHandled`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 323 (paragraph)
msgid "Both events contain the full payload of the Paddle webhook. For example, if you wish to handle the `invoice.payment_succeeded` webhook, you may register a [listener](/docs/{{version}}/events#defining-listeners) that will handle the event:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 324 (code)
msgid "<?php\n\n"
"namespace App\\Listeners;\n\n"
"use Laravel\\Paddle\\Events\\WebhookReceived;\n\n"
"class PaddleEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Paddle webhooks.\n"
"     */\n"
"    public function handle(WebhookReceived $event): void\n"
"    {\n"
"        if ($event->payload['alert_name'] === 'payment_succeeded') {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 325 (paragraph)
msgid "Once your listener has been defined, you may register it within your application's `EventServiceProvider`:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 326 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Listeners\\PaddleEventListener;\n"
"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
"use Laravel\\Paddle\\Events\\WebhookReceived;\n\n"
"class EventServiceProvider extends ServiceProvider\n"
"{\n"
"    protected $listen = [\n"
"        WebhookReceived::class => [\n"
"            PaddleEventListener::class,\n"
"        ],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 327 (paragraph)
msgid "Cashier also emit events dedicated to the type of the received webhook. In addition to the full payload from Paddle, they also contain the relevant models that were used to process the webhook such as the billable model, the subscription, or the receipt:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 329 (unordered list)
msgid "`Laravel\\Paddle\\Events\\PaymentSucceeded`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 329 (unordered list)
msgid "`Laravel\\Paddle\\Events\\SubscriptionPaymentSucceeded`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 329 (unordered list)
msgid "`Laravel\\Paddle\\Events\\SubscriptionCreated`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 329 (unordered list)
msgid "`Laravel\\Paddle\\Events\\SubscriptionUpdated`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 329 (unordered list)
msgid "`Laravel\\Paddle\\Events\\SubscriptionCancelled`"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 331 (paragraph)
msgid "You can also override the default, built-in webhook route by defining the `CASHIER_WEBHOOK` environment variable in your application's `.env` file. This value should be the full URL to your webhook route and needs to match the URL set in your Paddle control panel:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 332 (code)
msgid "CASHIER_WEBHOOK=https://example.com/my-paddle-webhook-url\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 334 (header)
msgid "Verifying Webhook Signatures"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 335 (paragraph)
msgid "To secure your webhooks, you may use [Paddle's webhook signatures](https://developer.paddle.com/webhook-reference/verifying-webhooks). For convenience, Cashier automatically includes a middleware which validates that the incoming Paddle webhook request is valid."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 336 (paragraph)
msgid "To enable webhook verification, ensure that the `PADDLE_PUBLIC_KEY` environment variable is defined in your application's `.env` file. The public key may be retrieved from your Paddle account dashboard."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 338 (header)
msgid "Single Charges"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 340 (header)
msgid "Simple Charge"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 341 (paragraph)
msgid "If you would like to make a one-time charge against a customer, you may use the `charge` method on a billable model instance to generate a pay link for the charge. The `charge` method accepts the charge amount (float) as its first argument and a charge description as its second argument:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 342 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/store', function (Request $request) {\n"
"    return view('store', [\n"
"        'payLink' => $user->charge(12.99, 'Action Figure')\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 343 (paragraph)
msgid "After generating the pay link, you may use Cashier's provided `paddle-button` Blade component to allow the user to initiate the Paddle widget and complete the charge:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 344 (code)
msgid "<x-paddle-button :url=\"$payLink\" class=\"px-8 py-4\">\n"
"    Buy\n"
"</x-paddle-button>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 345 (paragraph)
msgid "The `charge` method accepts an array as its third argument, allowing you to pass any options you wish to the underlying Paddle pay link creation. Please consult [the Paddle documentation](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink) to learn more about the options available to you when creating charges:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 346 (code)
msgid "$payLink = $user->charge(12.99, 'Action Figure', [\n"
"    'custom_option' => $value,\n"
"]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 347 (paragraph)
msgid "Charges happen in the currency specified in the `cashier.currency` configuration option. By default, this is set to USD. You may override the default currency by defining the `CASHIER_CURRENCY` environment variable in your application's `.env` file:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 349 (paragraph)
msgid "You can also [override prices per currency](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink#price-overrides) using Paddle's dynamic pricing matching system. To do so, pass an array of prices instead of a fixed amount:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 350 (code)
msgid "$payLink = $user->charge([\n"
"    'USD:19.99',\n"
"    'EUR:15.99',\n"
"], 'Action Figure');\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 352 (header)
msgid "Charging Products"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 353 (paragraph)
msgid "If you would like to make a one-time charge against a specific product configured within Paddle, you may use the `chargeProduct` method on a billable model instance to generate a pay link:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 354 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/store', function (Request $request) {\n"
"    return view('store', [\n"
"        'payLink' => $request->user()->chargeProduct($productId = 123)\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 355 (paragraph)
msgid "Then, you may provide the pay link to the `paddle-button` component to allow the user to initialize the Paddle widget:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 357 (paragraph)
msgid "The `chargeProduct` method accepts an array as its second argument, allowing you to pass any options you wish to the underlying Paddle pay link creation. Please consult [the Paddle documentation](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink) regarding the options that are available to you when creating charges:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 358 (code)
msgid "$payLink = $user->chargeProduct($productId, [\n"
"    'custom_option' => $value,\n"
"]);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 360 (header)
msgid "Refunding Orders"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 361 (paragraph)
msgid "If you need to refund a Paddle order, you may use the `refund` method. This method accepts the Paddle order ID as its first argument. You may retrieve the receipts for a given billable model using the `receipts` method:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 362 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$receipt = $user->receipts()->first();\n\n"
"$refundRequestId = $user->refund($receipt->order_id);\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 363 (paragraph)
msgid "You may optionally specify a specific amount to refund as well as a reason for the refund:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 364 (code)
msgid "$receipt = $user->receipts()->first();\n\n"
"$refundRequestId = $user->refund(\n"
"    $receipt->order_id, 5.00, 'Unused product time'\n"
");\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 365 (quote)
msgid "**Note** You can use the `$refundRequestId` as a reference for the refund when contacting Paddle support."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 367 (header)
msgid "Receipts"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 368 (paragraph)
msgid "You may easily retrieve an array of a billable model's receipts via the `receipts` property:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 369 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$receipts = $user->receipts;\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 370 (paragraph)
msgid "When listing the receipts for the customer, you may use the receipt instance's methods to display the relevant receipt information. For example, you may wish to list every receipt in a table, allowing the user to easily download any of the receipts:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 371 (code)
msgid "<table>\n"
"    @foreach ($receipts as $receipt)\n"
"        <tr>\n"
"            <td>{{ $receipt->paid_at->toFormattedDateString() }}</td>\n"
"            <td>{{ $receipt->amount() }}</td>\n"
"            <td><a href=\"{{ $receipt->receipt_url }}\" target=\"_blank\">Download</a></td>\n"
"        </tr>\n"
"    @endforeach\n"
"</table>\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 373 (header)
msgid "Past & Upcoming Payments"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 374 (paragraph)
msgid "You may use the `lastPayment` and `nextPayment` methods to retrieve and display a customer's past or upcoming payments for recurring subscriptions:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 375 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$subscription = $user->subscription('default');\n\n"
"$lastPayment = $subscription->lastPayment();\n"
"$nextPayment = $subscription->nextPayment();\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 376 (paragraph)
msgid "Both of these methods will return an instance of `Laravel\\Paddle\\Payment`; however, `nextPayment` will return `null` when the billing cycle has ended (such as when a subscription has been cancelled):"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 377 (code)
msgid "Next payment: {{ $nextPayment->amount() }} due on {{ $nextPayment->date()->format('d/m/Y') }}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 379 (header)
msgid "Handling Failed Payments"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 380 (paragraph)
msgid "Subscription payments fail for various reasons, such as expired cards or a card having insufficient funds. When this happens, we recommend that you let Paddle handle payment failures for you. Specifically, you may [setup Paddle's automatic billing emails](https://vendors.paddle.com/subscription-settings) in your Paddle dashboard."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 381 (paragraph)
msgid "Alternatively, you can perform more precise customization by [listening](/docs/{{version}}/events) for the `subscription_payment_failed` Paddle event via the `WebhookReceived` event dispatched by Cashier. You should also ensure the \"Subscription Payment Failed\" option is enabled in the Webhook settings of your Paddle dashboard:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 382 (code)
msgid "<?php\n\n"
"namespace App\\Listeners;\n\n"
"use Laravel\\Paddle\\Events\\WebhookReceived;\n\n"
"class PaddleEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Paddle webhooks.\n"
"     */\n"
"    public function handle(WebhookReceived $event): void\n"
"    {\n"
"        if ($event->payload['alert_name'] === 'subscription_payment_failed') {\n"
"            // Handle the failed subscription payment...\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 383 (paragraph)
msgid "Once your listener has been defined, you should register it within your application's `EventServiceProvider`:"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 386 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/cashier-paddle.md:block 387 (paragraph)
msgid "While testing, you should manually test your billing flow to make sure your integration works as expected."
msgstr ""

#: docs/10.x/cashier-paddle.md:block 388 (paragraph)
msgid "For automated tests, including those executed within a CI environment, you may use [Laravel's HTTP Client](/docs/{{version}}/http-client#testing) to fake HTTP calls made to Paddle. Although this does not test the actual responses from Paddle, it does provide a way to test your application without actually calling Paddle's API."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 6 (paragraph)
msgid "While working with Cashier we recommend you also review Paddle's [user guides](https://developer.paddle.com/guides) and [API documentation](https://developer.paddle.com/api-reference/intro)."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 14 (quote)
msgid "{note} To ensure Cashier properly handles all Paddle events, remember to [set up Cashier's webhook handling](#handling-paddle-webhooks)."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 19 (paragraph)
msgid "PADDLE_SANDBOX=true"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 20 (paragraph)
msgid "After you have finished developing your application you may [apply for a Paddle vendor account](https://paddle.com)."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 28 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::ignoreMigrations();\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 52 (quote)
msgid "{note} In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 58 (code)
msgid "use App\\Models\\Cashier\\Receipt;\n"
"use App\\Models\\Cashier\\Subscription;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::useReceiptModel(Receipt::class);\n"
"    Cashier::useSubscriptionModel(Subscription::class);\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 71 (quote)
msgid "{note} After a subscription state change, the delay for receiving the corresponding webhook is typically minimal but you should account for this in your application by considering that your user's subscription might not be immediately available after completing the checkout."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 91 (code)
msgid "$options = [\n"
"    'product' => $productId,\n"
"    'title' => 'Product Title',\n"
"];\n\n"
"<x-paddle-checkout :options=\"$options\" class=\"w-full\" />\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 93 (quote)
msgid "{note} If you would like to also use the `passthrough` option when specifying custom options, you should provide a key / value array as its value. Cashier will automatically handle converting the array to a JSON string. In addition, the `customer_id` passthrough option is reserved for internal Cashier usage."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 132 (quote)
msgid "{note} When using the prices API, Paddle only allows applying coupons to one-time purchase products and not to subscription plans."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 138 (code)
msgid "/**\n"
" * Get the customer's email address to associate with Paddle.\n"
" *\n"
" * @return string|null\n"
" */\n"
"public function paddleEmail()\n"
"{\n"
"    return $this->email;\n"
"}\n\n"
"/**\n"
" * Get the customer's country to associate with Paddle.\n"
" *\n"
" * This needs to be a 2 letter code. See the link below for supported countries.\n"
" *\n"
" * @return string|null\n"
" * @link https://developer.paddle.com/reference/platform-parameters/supported-countries\n"
" */\n"
"public function paddleCountry()\n"
"{\n"
"    //\n"
"}\n\n"
"/**\n"
" * Get the customer's postal code to associate with Paddle.\n"
" *\n"
" * See the link below for countries which require this.\n"
" *\n"
" * @return string|null\n"
" * @link https://developer.paddle.com/reference/platform-parameters/supported-countries#countries-requiring-postcode\n"
" */\n"
"public function paddlePostcode()\n"
"{\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 144 (paragraph)
msgid "To create a subscription, first retrieve an instance of your billable model, which typically will be an instance of `App\\Models\\User`. Once you have retrieved the model instance, you may use the `newSubscription` method to create the model's subscription pay link:"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 145 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/user/subscribe', function (Request $request) {\n"
"    $payLink = $user->newSubscription('default', $premium = 12345)\n"
"        ->returnTo(route('home'))\n"
"        ->create();\n\n"
"    return view('billing', ['payLink' => $payLink]);\n"
"});\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 162 (quote)
msgid "{note} When providing metadata, please avoid using `subscription_name` as a metadata key. This key is reserved for internal use by Cashier."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 166 (code)
msgid "if ($user->subscribed('default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 168 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('billing');\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 170 (code)
msgid "if ($user->subscription('default')->onTrial()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 172 (code)
msgid "if ($user->subscribedToPlan($monthly = 12345, 'default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 173 (paragraph)
msgid "By passing an array to the `subscribedToPlan` method, you may determine if the user's `default` subscription is actively subscribed to the monthly or the yearly plan:"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 174 (code)
msgid "if ($user->subscribedToPlan([$monthly = 12345, $yearly = 54321], 'default')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 176 (code)
msgid "if ($user->subscription('default')->recurring()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 180 (code)
msgid "if ($user->subscription('default')->cancelled()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 182 (code)
msgid "if ($user->subscription('default')->onGracePeriod()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 184 (code)
msgid "if ($user->subscription('default')->ended()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 188 (code)
msgid "if ($user->subscription('default')->pastDue()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 191 (code)
msgid "use Laravel\\Paddle\\Cashier;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 192 (quote)
msgid "{note} When a subscription is in a `past_due` state it cannot be changed until payment information has been updated. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in a `past_due` state."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 217 (quote)
msgid "{note} Plans may not be swapped when a trial is active. For additional information regarding this limitation, please see the [Paddle documentation](https://developer.paddle.com/api-reference/subscription-api/users/updateuser#usage-notes)."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 220 (paragraph)
msgid "By default, Paddle prorates charges when swapping between plans. The `noProrate` method may be used to update the subscription's without prorating the charges:"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 254 (code)
msgid "if ($user->subscription('default')->onPausedGracePeriod()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 257 (quote)
msgid "{note} A subscription cannot be modified while it is paused. If you want to swap to a different plan or update quantities you must resume the subscription first."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 267 (quote)
msgid "{note} Paddle's subscriptions cannot be resumed after cancellation. If your customer wishes to resume their subscription, they will have to subscribe to a new subscription."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 272 (quote)
msgid "{note} While trialing and collecting payment method details up front, Paddle prevents any subscription changes such as swapping plans or updating quantities. If you want to allow a customer to swap plans during a trial the subscription must be cancelled and recreated."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 276 (quote)
msgid "{note} If the customer's subscription is not cancelled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 278 (code)
msgid "if ($user->onTrial('default')) {\n"
"    //\n"
"}\n\n"
"if ($user->subscription('default')->onTrial()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 294 (quote)
msgid "{note} There is no way to extend or modify a trial period on a Paddle subscription after it has been created."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 298 (paragraph)
msgid "By default, this controller will automatically handle cancelling subscriptions that have too many failed charges ([as defined by your Paddle subscription settings](https://vendors.paddle.com/subscription-settings)), subscription updates, and payment method changes; however, as we'll soon discover, you can extend this controller to handle any Paddle webhook event you like."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 301 (quote)
msgid "{note} Make sure you protect incoming requests with Cashier's included [webhook signature verification](/docs/{{version}}/cashier-paddle#verifying-webhook-signatures) middleware."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 314 (code)
msgid "<?php\n\n"
"namespace App\\Listeners;\n\n"
"use Laravel\\Paddle\\Events\\WebhookReceived;\n\n"
"class PaddleEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Paddle webhooks.\n"
"     *\n"
"     * @param  \\Laravel\\Paddle\\Events\\WebhookReceived  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(WebhookReceived $event)\n"
"    {\n"
"        if ($event->payload['alert_name'] === 'payment_succeeded') {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 355 (quote)
msgid "{tip} You can use the `$refundRequestId` as a reference for the refund when contacting Paddle support."
msgstr ""

#: docs/8.x/cashier-paddle.md:block 371 (paragraph)
msgid "Alternatively, you can perform more precise customization by catching the [`subscription_payment_failed`](https://developer.paddle.com/webhook-reference/subscription-alerts/subscription-payment-failed) webhook and enabling the \"Subscription Payment Failed\" option in the Webhook settings of your Paddle dashboard:"
msgstr ""

#: docs/8.x/cashier-paddle.md:block 372 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Laravel\\Paddle\\Http\\Controllers\\WebhookController as CashierController;\n\n"
"class WebhookController extends CashierController\n"
"{\n"
"    /**\n"
"     * Handle subscription payment failed.\n"
"     *\n"
"     * @param  array  $payload\n"
"     * @return void\n"
"     */\n"
"    public function handleSubscriptionPaymentFailed($payload)\n"
"    {\n"
"        // Handle the failed subscription payment...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/cashier-paddle.md:block 289 (code)
msgid "if ($user->hasExpiredTrial('default')) {\n"
"    //\n"
"}\n\n"
"if ($user->subscription('default')->hasExpiredTrial()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/9.x/cashier-paddle.md:block 383 (code)
msgid "<?php\n\n"
"namespace App\\Listeners;\n\n"
"use Laravel\\Paddle\\Events\\WebhookReceived;\n\n"
"class PaddleEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Paddle webhooks.\n"
"     *\n"
"     * @param  \\Laravel\\Paddle\\Events\\WebhookReceived  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(WebhookReceived $event)\n"
"    {\n"
"        if ($event->payload['alert_name'] === 'subscription_payment_failed') {\n"
"            // Handle the failed subscription payment...\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/cashier-paddle.md:block 174 (code)
msgid "if ($user->subscribedToPlan([$monthly = 12345, $yearly = 54321], 'default')) {\n"
"    // ...\n"
"}\n"
msgstr ""

