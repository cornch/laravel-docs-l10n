msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 05:46\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/console-tests.pot\n"
"X-Crowdin-File-ID: 29\n"

# File: docs/8.x/console-tests.md, line: 1
# File: docs/master/console-tests.md, line: 1
#. type: Title #
#, no-wrap
msgid "Console Tests"
msgstr ""

# File: docs/8.x/console-tests.md, line: 6
# File: docs/master/console-tests.md, line: 6
#. type: Plain text
msgid "- [Introduction](#introduction)  - [Success / Failure Expectations](#success-failure-expectations)  - [Input / Output Expectations](#input-output-expectations)"
msgstr ""

# File: docs/8.x/console-tests.md, line: 8
# File: docs/master/console-tests.md, line: 8
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 8
# File: docs/master/console-tests.md, line: 8
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr ""

# File: docs/8.x/console-tests.md, line: 11
# File: docs/master/console-tests.md, line: 11
#. type: Plain text
msgid "In addition to simplifying HTTP testing, Laravel provides a simple API for testing your application's [custom console commands](/docs/{{version}}/artisan)."
msgstr ""

# File: docs/8.x/console-tests.md, line: 13
# File: docs/master/console-tests.md, line: 13
#. type: Plain text
#, no-wrap
msgid "<a name=\"success-failure-expectations\"></a>\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 13
# File: docs/master/console-tests.md, line: 13
#. type: Title ##
#, no-wrap
msgid "Success / Failure Expectations"
msgstr ""

# File: docs/8.x/console-tests.md, line: 16
# File: docs/master/console-tests.md, line: 16
#. type: Plain text
msgid "To get started, let's explore how to make assertions regarding an Artisan command's exit code. To accomplish this, we will use the `artisan` method to invoke an Artisan command from our test. Then, we will use the `assertExitCode` method to assert that the command completed with a given exit code:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 26
# File: docs/master/console-tests.md, line: 26
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Test a console command.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_console_command()\n"
"    {\n"
"        $this->artisan('inspire')->assertExitCode(0);\n"
"    }\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 28
# File: docs/master/console-tests.md, line: 28
#. type: Plain text
msgid "You may use the `assertNotExitCode` method to assert that the command did not exit with a given exit code:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 30
# File: docs/master/console-tests.md, line: 30
#. type: Plain text
#, no-wrap
msgid "    $this->artisan('inspire')->assertNotExitCode(1);\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 32
# File: docs/master/console-tests.md, line: 32
#. type: Plain text
msgid "Of course, all terminal commands typically exit with a status code of `0` when they are successful and a non-zero exit code when they are not successful. Therefore, for convenience, you may utilize the `assertSuccessful` and `assertFailed` assertions to assert that a given command exited with a successful exit code or not:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 34
# File: docs/master/console-tests.md, line: 34
#. type: Plain text
#, no-wrap
msgid "    $this->artisan('inspire')->assertSuccessful();\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 36
# File: docs/master/console-tests.md, line: 36
#. type: Plain text
#, no-wrap
msgid "    $this->artisan('inspire')->assertFailed();\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 38
# File: docs/master/console-tests.md, line: 38
#. type: Plain text
#, no-wrap
msgid "<a name=\"input-output-expectations\"></a>\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 38
# File: docs/master/console-tests.md, line: 38
#. type: Title ##
#, no-wrap
msgid "Input / Output Expectations"
msgstr ""

# File: docs/8.x/console-tests.md, line: 41
# File: docs/master/console-tests.md, line: 41
#. type: Plain text
msgid "Laravel allows you to easily \"mock\" user input for your console commands using the `expectsQuestion` method. In addition, you may specify the exit code and text that you expect to be output by the console command using the `assertExitCode` and `expectsOutput` methods. For example, consider the following console command:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 44
# File: docs/master/console-tests.md, line: 44
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('question', function () {\n"
"        $name = $this->ask('What is your name?');\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 50
# File: docs/master/console-tests.md, line: 50
#. type: Plain text
#, no-wrap
msgid "        $language = $this->choice('Which language do you prefer?', [\n"
"            'PHP',\n"
"            'Ruby',\n"
"            'Python',\n"
"        ]);\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 53
# File: docs/master/console-tests.md, line: 53
#. type: Plain text
#, no-wrap
msgid "        $this->line('Your name is '.$name.' and you prefer '.$language.'.');\n"
"    });\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 55
# File: docs/master/console-tests.md, line: 55
#. type: Plain text
msgid "You may test this command with the following test which utilizes the `expectsQuestion`, `expectsOutput`, `doesntExpectOutput`, and `assertExitCode` methods:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 70
# File: docs/master/console-tests.md, line: 70
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Test a console command.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_console_command()\n"
"    {\n"
"        $this->artisan('question')\n"
"             ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"             ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"             ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"             ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"             ->assertExitCode(0);\n"
"    }\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 72
# File: docs/master/console-tests.md, line: 72
#. type: Plain text
#, no-wrap
msgid "<a name=\"confirmation-expectations\"></a>\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 72
# File: docs/master/console-tests.md, line: 72
#. type: Title ####
#, no-wrap
msgid "Confirmation Expectations"
msgstr ""

# File: docs/8.x/console-tests.md, line: 75
# File: docs/master/console-tests.md, line: 75
#. type: Plain text
msgid "When writing a command which expects confirmation in the form of a \"yes\" or \"no\" answer, you may utilize the `expectsConfirmation` method:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 79
# File: docs/master/console-tests.md, line: 79
#. type: Plain text
#, no-wrap
msgid "    $this->artisan('module:import')\n"
"        ->expectsConfirmation('Do you really wish to run this command?', 'no')\n"
"        ->assertExitCode(1);\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 81
# File: docs/master/console-tests.md, line: 81
#. type: Plain text
#, no-wrap
msgid "<a name=\"table-expectations\"></a>\n"
msgstr ""

# File: docs/8.x/console-tests.md, line: 81
# File: docs/master/console-tests.md, line: 81
#. type: Title ####
#, no-wrap
msgid "Table Expectations"
msgstr ""

# File: docs/8.x/console-tests.md, line: 84
# File: docs/master/console-tests.md, line: 84
#. type: Plain text
msgid "If your command displays a table of information using Artisan's `table` method, it can be cumbersome to write output expectations for the entire table. Instead, you may use the `expectsTable` method. This method accepts the table's headers as its first argument and the table's data as its second argument:"
msgstr ""

# File: docs/8.x/console-tests.md, line: 92
# File: docs/master/console-tests.md, line: 92
#. type: Plain text
#, no-wrap
msgid "    $this->artisan('users:all')\n"
"        ->expectsTable([\n"
"            'ID',\n"
"            'Email',\n"
"        ], [\n"
"            [1, 'taylor@example.com'],\n"
"            [2, 'abigail@example.com'],\n"
"        ]);\n"
msgstr ""

