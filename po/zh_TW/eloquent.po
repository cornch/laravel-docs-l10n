msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/eloquent.pot\n"
"X-Crowdin-File-ID: 61\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-04-18 09:23\n"

#: docs/8.x/eloquent.md:block 1 (header)
msgid "Eloquent: Getting Started"
msgstr "Eloquent：入門"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Generating Model Classes](#generating-model-classes)"
msgstr "[產生 Model 類別](#generating-model-classes)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Eloquent Model Conventions](#eloquent-model-conventions)"
msgstr "[Eloquent Model 慣例](#eloquent-model-conventions)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Table Names](#table-names)"
msgstr "[資料表名稱](#table-names)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Primary Keys](#primary-keys)"
msgstr "[主索引鍵 (Primary Key)](#primary-keys)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Timestamps](#timestamps)"
msgstr "[時戳](#timestamps)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Database Connections](#database-connections)"
msgstr "[資料庫連線](#database-connections)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Default Attribute Values](#default-attribute-values)"
msgstr "[預設的屬性值](#default-attribute-values)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Retrieving Models](#retrieving-models)"
msgstr "[取得 Model](#retrieving-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Collections](#collections)"
msgstr "[Collection](#collections)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Chunking Results](#chunking-results)"
msgstr "[將結果分段](#chunking-results)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Streaming Results Lazily](#streaming-results-lazily)"
msgstr "[延遲的查詢結果資料流](#streaming-results-lazily)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Cursors](#cursors)"
msgstr "[指標](#cursors)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Advanced Subqueries](#advanced-subqueries)"
msgstr "[進階子查詢](#advanced-subqueries)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Retrieving Single Models / Aggregates](#retrieving-single-models)"
msgstr "[取得單一 Model 或彙總的結果](#retrieving-single-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Retrieving Or Creating Models](#retrieving-or-creating-models)"
msgstr "[取得或建立 Model](#retrieving-or-creating-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Retrieving Aggregates](#retrieving-aggregates)"
msgstr "[取得彙總值](#retrieving-aggregates)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Inserting & Updating Models](#inserting-and-updating-models)"
msgstr "[插入或更新 Model](#inserting-and-updating-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Inserts](#inserts)"
msgstr "[插入 - Insert](#inserts)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Updates](#updates)"
msgstr "[更新 - Update](#updates)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Mass Assignment](#mass-assignment)"
msgstr "[大量賦值 (Mass Assignment)](#mass-assignment)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Upserts](#upserts)"
msgstr "[更新插入 - Upsert](#upserts)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Deleting Models](#deleting-models)"
msgstr "[刪除 Model](#deleting-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Soft Deleting](#soft-deleting)"
msgstr "[軟刪除](#soft-deleting)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Querying Soft Deleted Models](#querying-soft-deleted-models)"
msgstr "[查詢軟刪除的 Model](#querying-soft-deleted-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Pruning Models](#pruning-models)"
msgstr "[剪除 (Prune) Model](#pruning-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Replicating Models](#replicating-models)"
msgstr "[複製 (Replicate) Model](#replicating-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Query Scopes](#query-scopes)"
msgstr "[Query Scope](#query-scopes)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Global Scopes](#global-scopes)"
msgstr "[全域的 Scope](#global-scopes)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Local Scopes](#local-scopes)"
msgstr "[區域 Scopes](#local-scopes)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Comparing Models](#comparing-models)"
msgstr "[比較 Model](#comparing-models)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr "[事件](#events)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Using Closures](#events-using-closures)"
msgstr "[使用閉包](#events-using-closures)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Observers](#observers)"
msgstr "[Observer](#observers)"

#: docs/8.x/eloquent.md:block 2 (unordered list)
msgid "[Muting Events](#muting-events)"
msgstr "[靜音事件](#muting-events)"

#: docs/8.x/eloquent.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/eloquent.md:block 5 (paragraph)
msgid "Laravel includes Eloquent, an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using Eloquent, each database table has a corresponding \"Model\" that is used to interact with that table. In addition to retrieving records from the database table, Eloquent models allow you to insert, update, and delete records from the table as well."
msgstr "Laravel 中包含了 Eloquent。Eloquent 是一個物件關聯對映 (ORM, Object-Relational Mapper)，能讓開發人員以更愉快的方式與資料庫互動。在使用 Eloquent 時，每個資料表都會有一個對應的「Model」，我們可以使用這個 Model 來與中聯辦互動。除了從資料表中取得資料外，通過 Eloquent Model，我們還能進行插入、更新、與刪除的動作。"

#: docs/8.x/eloquent.md:block 6 (quote)
msgid "{tip} Before getting started, be sure to configure a database connection in your application's `config/database.php` configuration file. For more information on configuring your database, check out [the database configuration documentation](/docs/{{version}}/database#configuration)."
msgstr "{tip} 在開始之前，請先確定是否有在 `config/database.php` 組態設定檔中設定好資料庫連線。更多有關設定資料庫則資訊，請參考[資料庫組態設定說明文件](/docs/{{version}}/database#configuration)。"

#: docs/8.x/eloquent.md:block 8 (header)
msgid "Generating Model Classes"
msgstr "產生 Model 類別"

#: docs/8.x/eloquent.md:block 9 (paragraph)
msgid "To get started, let's create an Eloquent model. Models typically live in the `app\\Models` directory and extend the `Illuminate\\Database\\Eloquent\\Model` class. You may use the `make:model` [Artisan command](/docs/{{version}}/artisan) to generate a new model:"
msgstr "我們先來建立 Eloquent Model。一般來說，Model 都放在 `app\\Models` 目錄內，並繼承 `Illuminate\\Database\\Eloquent\\Model` 類別。我們可以使用 `make:model` [Artisan 指令](/docs/{{version}}/artisan)來產生新 Model："

#: docs/8.x/eloquent.md:block 10 (code)
msgid "php artisan make:model Flight\n"
msgstr "php artisan make:model Flight\n"

#: docs/8.x/eloquent.md:block 11 (paragraph)
msgid "If you would like to generate a [database migration](/docs/{{version}}/migrations) when you generate the model, you may use the `--migration` or `-m` option:"
msgstr "若想在產生 Model 時一併產生[資料庫 Migration](/docs/{{version}}/migrations)，可使用 `--migration` 或 `-m` 選項："

#: docs/8.x/eloquent.md:block 12 (code)
msgid "php artisan make:model Flight --migration\n"
msgstr "php artisan make:model Flight --migration\n"

#: docs/8.x/eloquent.md:block 13 (paragraph)
msgid "You may generate various other types of classes when generating a model, such as factories, seeders, policies, controllers, and form requests. In addition, these options may be combined to create multiple classes at once:"
msgstr "在產生 Model 時，也能產生許多其他類型的類別，如 Factory、Seeder、Policy、Controller、Form Request⋯等。此外，我們也能組合多個選項來一次產生多個類別："

#: docs/8.x/eloquent.md:block 14 (code)
msgid "# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n\n"
"# Generate a model, FlightController resource class, and form request classes...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n\n"
"# Generate a model and a FlightPolicy class...\n"
"php artisan make:model Flight --policy\n\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n\n"
"# Shortcut to generate a model, migration, factory, seeder, policy, controller, and form requests...\n"
"php artisan make:model Flight --all\n\n"
"# Generate a pivot model...\n"
"php artisan make:model Member --pivot\n"
msgstr "# 產生 Model 與一個 FlightFactory 類別...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n\n"
"# 產生 Model 與一個 FlightSeeder 類別...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n\n"
"# 產生 Model 與一個 FlightController 類別...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n\n"
"# 產生 Model、FlightController 資源類別、以及 Form Request 類別...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n\n"
"# 產生 Model 與一個 FlightPolicy 類別...\n"
"php artisan make:model Flight --policy\n\n"
"# 產生 Migration、Factory、Seeder、與 Controller...\n"
"php artisan make:model Flight -mfsc\n\n"
"# 產生 Model、Migration、Factory、Seeder、Policy、Controller、與 Form Requests...\n"
"php artisan make:model Flight --all\n\n"
"# 產生樞紐 Model...\n"
"php artisan make:model Member --pivot\n"

#: docs/8.x/eloquent.md:block 16 (header)
msgid "Eloquent Model Conventions"
msgstr "Eloquent Model 慣例"

#: docs/8.x/eloquent.md:block 17 (paragraph)
msgid "Models generated by the `make:model` command will be placed in the `app/Models` directory. Let's examine a basic model class and discuss some of Eloquent's key conventions:"
msgstr "使用 `make:model` 指令產生的 Model 會被放在 `app/Models` 目錄中。我們來看看一個基礎的 Model 類別，並討論一些 Eloquent 的重要慣例："

#: docs/8.x/eloquent.md:block 18 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    //\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 20 (header)
msgid "Table Names"
msgstr "資料表名稱"

#: docs/8.x/eloquent.md:block 21 (paragraph)
msgid "After glancing at the example above, you may have noticed that we did not tell Eloquent which database table corresponds to our `Flight` model. By convention, the \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the `Flight` model stores records in the `flights` table, while an `AirTrafficController` model would store records in an `air_traffic_controllers` table."
msgstr "看一眼上方的範例後，讀者應該已經發現，我們並沒有告訴 Eloquent，我們的 `Flight` Model 要對應到哪個資料表。依照慣例，除非有特別指定，否則 Eloquent 會將類別名稱的複數形式改為「蛇行命名法 (snake_case)」來當作表名。因此，在這個例子中，Eloquent 會假設 `Flight` Model 將資料儲存在 `flights` 資料表中，而 `AirTrafficController` Model 則會儲存在 `air_traffic_controllers` 資料表中。"

#: docs/8.x/eloquent.md:block 22 (paragraph)
msgid "If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by defining a `table` property on the model:"
msgstr "若你的 Model 對應的資料表不符合這個管理，可以手動在 Model 上定義 `table` 屬性來指定 Model 的表名："

#: docs/8.x/eloquent.md:block 23 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The table associated with the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $table = 'my_flights';\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The table associated with the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $table = 'my_flights';\n"
"}\n"

#: docs/8.x/eloquent.md:block 25 (header)
msgid "Primary Keys"
msgstr "主索引鍵 - Primary Key"

#: docs/8.x/eloquent.md:block 26 (paragraph)
msgid "Eloquent will also assume that each model's corresponding database table has a primary key column named `id`. If necessary, you may define a protected `$primaryKey` property on your model to specify a different column that serves as your model's primary key:"
msgstr "Eloquent 會假設每個 Model 對應的資料表都有一個名為 `id` 的主索引鍵欄位。若有需要的話，可以在 Model 上定義一個 protected `$primaryKey` 屬性來指定不同的欄位作為 Model 的主索引鍵："

#: docs/8.x/eloquent.md:block 27 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The primary key associated with the table.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $primaryKey = 'flight_id';\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The primary key associated with the table.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $primaryKey = 'flight_id';\n"
"}\n"

#: docs/8.x/eloquent.md:block 28 (paragraph)
msgid "In addition, Eloquent assumes that the primary key is an incrementing integer value, which means that Eloquent will automatically cast the primary key to an integer. If you wish to use a non-incrementing or a non-numeric primary key you must define a public `$incrementing` property on your model that is set to `false`:"
msgstr "此外，Eloquent 還會假設主索引鍵是一個遞增 (Incrementing) 的整數值。這表示，Eloquent 會自動將主索引鍵的型別轉換為整數 (Integer)。若想使用非遞增或非數字的主索引鍵，則應在 Model 上定義一個 public `$incrementing` 屬性，並將其值設為 `false`："

#: docs/8.x/eloquent.md:block 29 (code)
msgid "<?php\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * Indicates if the model's ID is auto-incrementing.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $incrementing = false;\n"
"}\n"
msgstr "<?php\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * Indicates if the model's ID is auto-incrementing.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $incrementing = false;\n"
"}\n"

#: docs/8.x/eloquent.md:block 30 (paragraph)
msgid "If your model's primary key is not an integer, you should define a protected `$keyType` property on your model. This property should have a value of `string`:"
msgstr "若 Model 的主索引件不是正數，則應在 Model 上定義一個 protected `$keyType` 屬性。該屬性的值應為 `string`："

#: docs/8.x/eloquent.md:block 31 (code)
msgid "<?php\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The data type of the auto-incrementing ID.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $keyType = 'string';\n"
"}\n"
msgstr "<?php\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The data type of the auto-incrementing ID.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $keyType = 'string';\n"
"}\n"

#: docs/8.x/eloquent.md:block 33 (header)
msgid "\"Composite\" Primary Keys"
msgstr "「組合式 (Composite)」主索引鍵"

#: docs/8.x/eloquent.md:block 34 (paragraph)
msgid "Eloquent requires each model to have at least one uniquely identifying \"ID\" that can serve as its primary key. \"Composite\" primary keys are not supported by Eloquent models. However, you are free to add additional multi-column, unique indexes to your database tables in addition to the table's uniquely identifying primary key."
msgstr "在 Eloquent 中，每個 Model 都必須要有至少一個不重複的識別用「ID」作為其主索引鍵。Eloquent Model 不支援「組合式」的主索引鍵。不過，除了不重複的識別用主索引鍵以外，你可以自由在資料表中新增額外的多欄位、不重複索引。"

#: docs/8.x/eloquent.md:block 36 (header)
msgid "Timestamps"
msgstr "時戳 - Timestamps"

#: docs/8.x/eloquent.md:block 37 (paragraph)
msgid "By default, Eloquent expects `created_at` and `updated_at` columns to exist on your model's corresponding database table. Eloquent will automatically set these column's values when models are created or updated. If you do not want these columns to be automatically managed by Eloquent, you should define a `$timestamps` property on your model with a value of `false`:"
msgstr "預設情況下，Eloquent 會預期 Model 所對應的資料表中有 `expected_at` 與 `updated_at` 欄位。在建立或更新 Model 時，Eloquent 會自動設定這些欄位的值。若不想要 Eloquent 自動處理這些欄位，可在 Model 上定義一個 `$timestamps` 屬性，並將其值設為 `false`："

#: docs/8.x/eloquent.md:block 38 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * Indicates if the model should be timestamped.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $timestamps = false;\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * Indicates if the model should be timestamped.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $timestamps = false;\n"
"}\n"

#: docs/8.x/eloquent.md:block 39 (paragraph)
msgid "If you need to customize the format of your model's timestamps, set the `$dateFormat` property on your model. This property determines how date attributes are stored in the database as well as their format when the model is serialized to an array or JSON:"
msgstr "若需要自訂 Model 時戳的格式，可在 Model 上設定 `$dateFormat` 屬性。這個屬性會用來決定儲存在資料庫中的日期格式，以及 Model 被序列化為陣列或 JSON 時使用的各式："

#: docs/8.x/eloquent.md:block 40 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The storage format of the model's date columns.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $dateFormat = 'U';\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The storage format of the model's date columns.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $dateFormat = 'U';\n"
"}\n"

#: docs/8.x/eloquent.md:block 41 (paragraph)
msgid "If you need to customize the names of the columns used to store the timestamps, you may define `CREATED_AT` and `UPDATED_AT` constants on your model:"
msgstr "若有需要自訂用來儲存時戳的欄位名稱，可在 Model 上定義 `CREATED_AT` 與 `UPDATED_AT` 常數："

#: docs/8.x/eloquent.md:block 42 (code)
msgid "<?php\n\n"
"class Flight extends Model\n"
"{\n"
"    const CREATED_AT = 'creation_date';\n"
"    const UPDATED_AT = 'updated_date';\n"
"}\n"
msgstr "<?php\n\n"
"class Flight extends Model\n"
"{\n"
"    const CREATED_AT = 'creation_date';\n"
"    const UPDATED_AT = 'updated_date';\n"
"}\n"

#: docs/8.x/eloquent.md:block 44 (header)
msgid "Database Connections"
msgstr "資料庫連線"

#: docs/8.x/eloquent.md:block 45 (paragraph)
msgid "By default, all Eloquent models will use the default database connection that is configured for your application. If you would like to specify a different connection that should be used when interacting with a particular model, you should define a `$connection` property on the model:"
msgstr "預設情況下，Eloquent Model 會使用專案設定的預設資料庫連線。若想為特定 Model 指定不同的資料庫連線，可在 Model 上定義一個 `$connection` 屬性："

#: docs/8.x/eloquent.md:block 46 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The database connection that should be used by the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'sqlite';\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The database connection that should be used by the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'sqlite';\n"
"}\n"

#: docs/8.x/eloquent.md:block 48 (header)
msgid "Default Attribute Values"
msgstr "預設的屬性值"

#: docs/8.x/eloquent.md:block 49 (paragraph)
msgid "By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an `$attributes` property on your model:"
msgstr "預設情況下，新初始化的 Model 實體不會包含任何屬性值。若為 Model 上的一些屬性定義預設值，可在 Model 上定義一個 `$attributes` 屬性："

#: docs/8.x/eloquent.md:block 50 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The model's default values for attributes.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $attributes = [\n"
"        'delayed' => false,\n"
"    ];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The model's default values for attributes.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $attributes = [\n"
"        'delayed' => false,\n"
"    ];\n"
"}\n"

#: docs/8.x/eloquent.md:block 52 (header)
msgid "Retrieving Models"
msgstr "取得 Model"

#: docs/8.x/eloquent.md:block 53 (paragraph)
msgid "Once you have created a model and [its associated database table](/docs/{{version}}/migrations#writing-migrations), you are ready to start retrieving data from your database. You can think of each Eloquent model as a powerful [query builder](/docs/{{version}}/queries) allowing you to fluently query the database table associated with the model. The model's `all` method will retrieve all of the records from the model's associated database table:"
msgstr "建立好 Model 與[相關的資料表](/docs/{{version}}/migrations#writing-migrations)後，就可以從資料庫中取得資料了。可以將 Eloquent Model 當成一個強大的 [Query Builder](/docs/{{version}}/queries)，能讓你流暢的查詢與該 Model 所關聯的資料表。Model 的 `all` 方法可以從 Model 關聯的資料表中取得所有紀錄："

#: docs/8.x/eloquent.md:block 54 (code)
msgid "use App\\Models\\Flight;\n\n"
"foreach (Flight::all() as $flight) {\n"
"    echo $flight->name;\n"
"}\n"
msgstr "use App\\Models\\Flight;\n\n"
"foreach (Flight::all() as $flight) {\n"
"    echo $flight->name;\n"
"}\n"

#: docs/8.x/eloquent.md:block 56 (header)
msgid "Building Queries"
msgstr "建立查詢"

#: docs/8.x/eloquent.md:block 57 (paragraph)
msgid "The Eloquent `all` method will return all of the results in the model's table. However, since each Eloquent model serves as a [query builder](/docs/{{version}}/queries), you may add additional constraints to queries and then invoke the `get` method to retrieve the results:"
msgstr "Eloquent 的 `all` 方法會回傳 Model 資料表中的所有紀錄。不過，由於每個 Eloquent Model 也都有 [Query Builder](/docs/{{version}}/queries) 的功能，因此你可以隨意加上額外的查詢條件，然後再叫用 `get` 方法來取得結果："

#: docs/8.x/eloquent.md:block 58 (code)
msgid "$flights = Flight::where('active', 1)\n"
"               ->orderBy('name')\n"
"               ->take(10)\n"
"               ->get();\n"
msgstr "$flights = Flight::where('active', 1)\n"
"               ->orderBy('name')\n"
"               ->take(10)\n"
"               ->get();\n"

#: docs/8.x/eloquent.md:block 59 (quote)
msgid "{tip} Since Eloquent models are query builders, you should review all of the methods provided by Laravel's [query builder](/docs/{{version}}/queries). You may use any of these methods when writing your Eloquent queries."
msgstr "{tip} 由於 Eloquent Model 是 Query Builder，因此讀者因先看看 Laravel 的 [Query Builder](/docs/{{version}}/queries) 中所提供的方法。在撰寫 Eloquent 查詢時，可以使用這些方法中所有的方法。"

#: docs/8.x/eloquent.md:block 61 (header)
msgid "Refreshing Models"
msgstr "重新整理 Model"

#: docs/8.x/eloquent.md:block 62 (paragraph)
msgid "If you already have an instance of an Eloquent model that was retrieved from the database, you can \"refresh\" the model using the `fresh` and `refresh` methods. The `fresh` method will re-retrieve the model from the database. The existing model instance will not be affected:"
msgstr "若已經從資料庫中取得 Eloquent Model 的實體，則可以使用 `fresh` 與 `refresh` 方法來「重新整理」Model。`fresh` 方法會從資料庫中重新取得 Model。現有的 Model 實體將不受影響："

#: docs/8.x/eloquent.md:block 63 (code)
msgid "$flight = Flight::where('number', 'FR 900')->first();\n\n"
"$freshFlight = $flight->fresh();\n"
msgstr "$flight = Flight::where('number', 'FR 900')->first();\n\n"
"$freshFlight = $flight->fresh();\n"

#: docs/8.x/eloquent.md:block 64 (paragraph)
msgid "The `refresh` method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:"
msgstr "`refresh` 方法會使用資料庫中最新的資料庫來重新填寫現有的 Model。此外，該 Model 中所有已載入的關聯也會被重新載入："

#: docs/8.x/eloquent.md:block 65 (code)
msgid "$flight = Flight::where('number', 'FR 900')->first();\n\n"
"$flight->number = 'FR 456';\n\n"
"$flight->refresh();\n\n"
"$flight->number; // \"FR 900\"\n"
msgstr "$flight = Flight::where('number', 'FR 900')->first();\n\n"
"$flight->number = 'FR 456';\n\n"
"$flight->refresh();\n\n"
"$flight->number; // \"FR 900\"\n"

#: docs/8.x/eloquent.md:block 67 (header)
msgid "Collections"
msgstr "Collection"

#: docs/8.x/eloquent.md:block 68 (paragraph)
msgid "As we have seen, Eloquent methods like `all` and `get` retrieve multiple records from the database. However, these methods don't return a plain PHP array. Instead, an instance of `Illuminate\\Database\\Eloquent\\Collection` is returned."
msgstr "如同我們看到的，`all` 或 `get` 等 Eloquent 方法會從資料庫中取得多筆紀錄。不過，這些方法並不是回傳一般的 PHP 陣列，而是回傳一個 `Illuminate\\Database\\Eloquent\\Collection` 的實體。"

#: docs/8.x/eloquent.md:block 69 (paragraph)
msgid "The Eloquent `Collection` class extends Laravel's base `Illuminate\\Support\\Collection` class, which provides a [variety of helpful methods](/docs/{{version}}/collections#available-methods) for interacting with data collections. For example, the `reject` method may be used to remove models from a collection based on the results of an invoked closure:"
msgstr "Eloquent 的 `Collection` 類別繼承自 Laravel 的基礎 `Illuminate\\Support\\Collection` 類別。對於要與一組資料互動，這個類別提供了[許多實用的方法](/docs/{{version}}/collections#available-methods)。舉例來說，使用 `reject` 方法，可以按照閉包的叫用結果來將一些 Model 從 Collection 中移除："

#: docs/8.x/eloquent.md:block 70 (code)
msgid "$flights = Flight::where('destination', 'Paris')->get();\n\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});\n"
msgstr "$flights = Flight::where('destination', 'Paris')->get();\n\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});\n"

#: docs/8.x/eloquent.md:block 71 (paragraph)
msgid "In addition to the methods provided by Laravel's base collection class, the Eloquent collection class provides [a few extra methods](/docs/{{version}}/eloquent-collections#available-methods) that are specifically intended for interacting with collections of Eloquent models."
msgstr "除了 Laravel 的基礎 Collection 類別中提供的方法外，為了與包含 Eloquent Model 的 Collection\n"
"互動，Eloquent Collection 也特別提供了[一些額外的方法](/docs/{{version}}/eloquent-collections#available-methods)。"

#: docs/8.x/eloquent.md:block 72 (paragraph)
msgid "Since all of Laravel's collections implement PHP's iterable interfaces, you may loop over collections as if they were an array:"
msgstr "由於所有的 Laravel Collection 都實作了 PHP 的 Iterable 介面，因此我們可以把 Collection 當作陣列一樣迭代："

#: docs/8.x/eloquent.md:block 73 (code)
msgid "foreach ($flights as $flight) {\n"
"    echo $flight->name;\n"
"}\n"
msgstr "foreach ($flights as $flight) {\n"
"    echo $flight->name;\n"
"}\n"

#: docs/8.x/eloquent.md:block 75 (header)
msgid "Chunking Results"
msgstr "將查詢結果分段"

#: docs/8.x/eloquent.md:block 76 (paragraph)
msgid "Your application may run out of memory if you attempt to load tens of thousands of Eloquent records via the `all` or `get` methods. Instead of using these methods, the `chunk` method may be used to process large numbers of models more efficiently."
msgstr "如果嘗試使用 `all` 或 `get` 方法來取得幾萬筆 Eloquent 紀錄，那麼你的程式可能會記憶體不足。除了使用這些方法外，可以使用 `chunk` 方法來更有效率地處理大量的 Model："

#: docs/8.x/eloquent.md:block 77 (paragraph)
msgid "The `chunk` method will retrieve a subset of Eloquent models, passing them to a closure for processing. Since only the current chunk of Eloquent models is retrieved at a time, the `chunk` method will provide significantly reduced memory usage when working with a large number of models:"
msgstr "`chunk` 方法會取得一部分的 Eloquent Model，然後將這些 Model 傳入用於處理的閉包中。由於一次只會取得目前這個部分的 Eloquent Model，因此在處理大量 Model 時，`chunk` 方法會顯著地降低記憶體的使用："

#: docs/8.x/eloquent.md:block 78 (code)
msgid "use App\\Models\\Flight;\n\n"
"Flight::chunk(200, function ($flights) {\n"
"    foreach ($flights as $flight) {\n"
"        //\n"
"    }\n"
"});\n"
msgstr "use App\\Models\\Flight;\n\n"
"Flight::chunk(200, function ($flights) {\n"
"    foreach ($flights as $flight) {\n"
"        //\n"
"    }\n"
"});\n"

#: docs/8.x/eloquent.md:block 79 (paragraph)
msgid "The first argument passed to the `chunk` method is the number of records you wish to receive per \"chunk\". The closure passed as the second argument will be invoked for each chunk that is retrieved from the database. A database query will be executed to retrieve each chunk of records passed to the closure."
msgstr "傳給 `chunk` 方法的第一個引數代表每個「Chunk (分段)」要取得的紀錄。每次從資料庫中取得一組片段後，就會叫用作為第二個引數傳入的閉包。每取得一組傳入閉包的片段，就會執行一次資料庫查詢。"

#: docs/8.x/eloquent.md:block 80 (paragraph)
msgid "If you are filtering the results of the `chunk` method based on a column that you will also be updating while iterating over the results, you should use the `chunkById` method. Using the `chunk` method in these scenarios could lead to unexpected and inconsistent results. Internally, the `chunkById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr "若使用 `chunk` 方法時有過濾資料，在迭代結果的時候會更新這個欄位，則應使用 `chunkById` 方法。若在這種情況下使用 `chunk` 可能會取得未預期的結果或是不一致的結果。在 `chunkById` 方法內部，會取得 `id` 欄位值大於前一個分段中最後一個 Model 的 Model："

#: docs/8.x/eloquent.md:block 81 (code)
msgid "Flight::where('departed', true)\n"
"    ->chunkById(200, function ($flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, $column = 'id');\n"
msgstr "Flight::where('departed', true)\n"
"    ->chunkById(200, function ($flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, $column = 'id');\n"

#: docs/8.x/eloquent.md:block 83 (header)
msgid "Streaming Results Lazily"
msgstr "延遲的查詢結果資料流"

#: docs/8.x/eloquent.md:block 84 (paragraph)
msgid "The `lazy` method works similarly to [the `chunk` method](#chunking-results) in the sense that, behind the scenes, it executes the query in chunks. However, instead of passing each chunk directly into a callback as is, the `lazy` method returns a flattened [`LazyCollection`](/docs/{{version}}/collections#lazy-collections) of Eloquent models, which lets you interact with the results as a single stream:"
msgstr "`lazy` 方法與 [`chunk` 方法](#chunking-results) 的原理類似，都是以分段的方式執行查詢。不過，`lazy` 方法不是直接把每個分段傳入回呼中，而是回傳一個包含 Eloquent Model 的扁平 (Flattened) [`LazyCollection`](/docs/{{version}}/collections#lazy-collections)，使用這個 LazyCollection，就可以以單一資料流的方式與查詢結果互動："

#: docs/8.x/eloquent.md:block 85 (code)
msgid "use App\\Models\\Flight;\n\n"
"foreach (Flight::lazy() as $flight) {\n"
"    //\n"
"}\n"
msgstr "use App\\Models\\Flight;\n\n"
"foreach (Flight::lazy() as $flight) {\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 86 (paragraph)
msgid "If you are filtering the results of the `lazy` method based on a column that you will also be updating while iterating over the results, you should use the `lazyById` method. Internally, the `lazyById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr "若使用 `lazy` 方法時有過濾資料，在迭代結果的時候會更新這個欄位，則應使用 `lazyById` 方法。在 `lazyById` 方法內部，會取得 `id` 欄位值大於前一個分段中最後一個 Model 的 Model："

#: docs/8.x/eloquent.md:block 87 (code)
msgid "Flight::where('departed', true)\n"
"    ->lazyById(200, $column = 'id')\n"
"    ->each->update(['departed' => false]);\n"
msgstr "Flight::where('departed', true)\n"
"    ->lazyById(200, $column = 'id')\n"
"    ->each->update(['departed' => false]);\n"

#: docs/8.x/eloquent.md:block 88 (paragraph)
msgid "You may filter the results based on the descending order of the `id` using the `lazyByIdDesc` method."
msgstr "可以使用 `lazyByIdDesc` 以依據 `id` 的降冪排序來過濾查詢結果。"

#: docs/8.x/eloquent.md:block 90 (header)
msgid "Cursors"
msgstr "指標 - Cursor"

#: docs/8.x/eloquent.md:block 91 (paragraph)
msgid "Similar to the `lazy` method, the `cursor` method may be used to significantly reduce your application's memory consumption when iterating through tens of thousands of Eloquent model records."
msgstr "與 `lazy` 方法類似，`cursor` 方法也可用來在疊檯數千筆 Eloquent Model 時顯著降低程式的記憶體使用量。"

#: docs/8.x/eloquent.md:block 92 (paragraph)
msgid "The `cursor` method will only execute a single database query; however, the individual Eloquent models will not be hydrated until they are actually iterated over. Therefore, only one Eloquent model is kept in memory at any given time while iterating over the cursor."
msgstr "`cursor` 方法只會執行一筆資料庫查詢。不過，直到個別 Eloquent Model 被迭代到以前，這些 Model 都不會被解凍 (Hydrated)。因此，Cursor 的每次迭代時，記憶體內一次都只會有一個 Eloquent Model。"

#: docs/8.x/eloquent.md:block 93 (quote)
msgid "{note} Since the `cursor` method only ever holds a single Eloquent model in memory at a time, it cannot eager load relationships. If you need to eager load relationships, consider using [the `lazy` method](#streaming-results-lazily) instead."
msgstr "{note} 由於 `cursor` 方法一次只會將一個 Eloquent Model 放在記憶體內，因此我們沒有辦法對關聯做積極式載入。若想積極式載入關聯，請考慮使用 [`lazy` 方法](#streaming-results-lazily) 代替。"

#: docs/8.x/eloquent.md:block 94 (paragraph)
msgid "Internally, the `cursor` method uses PHP [generators](https://www.php.net/manual/en/language.generators.overview.php) to implement this functionality:"
msgstr "`cursor` 方法在其內部使用了 PHP 的 [Generator](https://www.php.net/manual/en/language.generators.overview.php) 來實作此功能："

#: docs/8.x/eloquent.md:block 95 (code)
msgid "use App\\Models\\Flight;\n\n"
"foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"    //\n"
"}\n"
msgstr "use App\\Models\\Flight;\n\n"
"foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 96 (paragraph)
msgid "The `cursor` returns an `Illuminate\\Support\\LazyCollection` instance. [Lazy collections](/docs/{{version}}/collections#lazy-collections) allow you to use many of the collection methods available on typical Laravel collections while only loading a single model into memory at a time:"
msgstr "`cursor` 會回傳一個 `Illuminate\\Support\\LazyCollection` 實體。使用 [Lazy collection](/docs/{{version}}/collections#lazy-collections)，能讓我們使用許多一般 Laravel Collection 中的方法，但一次只需要將一筆 Model 載入記憶體即可："

#: docs/8.x/eloquent.md:block 97 (code)
msgid "use App\\Models\\User;\n\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}\n"
msgstr "use App\\Models\\User;\n\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}\n"

#: docs/8.x/eloquent.md:block 98 (paragraph)
msgid "Although the `cursor` method uses far less memory than a regular query (by only holding a single Eloquent model in memory at a time), it will still eventually run out of memory. This is [due to PHP's PDO driver internally caching all raw query results in its buffer](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php). If you're dealing with a very large number of Eloquent records, consider using [the `lazy` method](#streaming-results-lazily) instead."
msgstr "雖然 `cursor` 方法比起一般查詢使用較少記憶體 (因為記憶體內一次只會有一筆 Eloquent Model)，但最終還是由可能會記憶體不足。這是[因為 PHP 的 PDO Driver 會自動在內部將所有的查詢結果都快取在其緩衝區 (Buffer) 上](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php)。所以，若要處理非常大量的 Eloquent 紀錄，請考慮使用 [`lazy` 方法](#streaming-results-lazily)替代。"

#: docs/8.x/eloquent.md:block 100 (header)
msgid "Advanced Subqueries"
msgstr "進階子查詢"

#: docs/8.x/eloquent.md:block 102 (header)
msgid "Subquery Selects"
msgstr "子查詢 Select"

#: docs/8.x/eloquent.md:block 103 (paragraph)
msgid "Eloquent also offers advanced subquery support, which allows you to pull information from related tables in a single query. For example, let's imagine that we have a table of flight `destinations` and a table of `flights` to destinations. The `flights` table contains an `arrived_at` column which indicates when the flight arrived at the destination."
msgstr "Eloquent 也提供了進階子查詢的支援，能讓你在單一查詢內從其他相關的資料表中取得資料。舉例來說，假設我們有張班機目的地的 `destinations` 資料表，以及一張由前往該目的地班機的 `flights` 資料表。`flights` 資料表中包含了顯示班機抵達目的地時間的 `arrived_at` 欄位。"

#: docs/8.x/eloquent.md:block 104 (paragraph)
msgid "Using the subquery functionality available to the query builder's `select` and `addSelect` methods, we can select all of the `destinations` and the name of the flight that most recently arrived at that destination using a single query:"
msgstr "使用 Query Builder 的 `select` 與 `addSelect` 方法中的子查詢功能，我們就能使用單一查詢來選擇所有目的地 `destinations` 以及最近抵達該目的地的航班名稱："

#: docs/8.x/eloquent.md:block 105 (code)
msgid "use App\\Models\\Destination;\n"
"use App\\Models\\Flight;\n\n"
"return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"    ->whereColumn('destination_id', 'destinations.id')\n"
"    ->orderByDesc('arrived_at')\n"
"    ->limit(1)\n"
"])->get();\n"
msgstr "use App\\Models\\Destination;\n"
"use App\\Models\\Flight;\n\n"
"return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"    ->whereColumn('destination_id', 'destinations.id')\n"
"    ->orderByDesc('arrived_at')\n"
"    ->limit(1)\n"
"])->get();\n"

#: docs/8.x/eloquent.md:block 107 (header)
msgid "Subquery Ordering"
msgstr "子查詢排序"

#: docs/8.x/eloquent.md:block 108 (paragraph)
msgid "In addition, the query builder's `orderBy` function supports subqueries. Continuing to use our flight example, we may use this functionality to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single database query:"
msgstr "此外，Query Builder 的 `orderBy` 功能也支援子查詢。繼續使用剛才的航班範例，我們可以使用這個功能來按照最後班機抵達目的地的時間來為所有目的地進行排序。同樣，我們只需要單一資料庫查詢就可以完成："

#: docs/8.x/eloquent.md:block 109 (code)
msgid "return Destination::orderByDesc(\n"
"    Flight::select('arrived_at')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
")->get();\n"
msgstr "return Destination::orderByDesc(\n"
"    Flight::select('arrived_at')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
")->get();\n"

#: docs/8.x/eloquent.md:block 111 (header)
msgid "Retrieving Single Models / Aggregates"
msgstr "取得單一 Model 或彙總"

#: docs/8.x/eloquent.md:block 112 (paragraph)
msgid "In addition to retrieving all of the records matching a given query, you may also retrieve single records using the `find`, `first`, or `firstWhere` methods. Instead of returning a collection of models, these methods return a single model instance:"
msgstr "除了取得所有符合給定查詢的紀錄外，我們也可以使用 `find`, `first`, 或 `firstWhere` 方法來取得單一紀錄。這些方法不會回傳一組包含 Model 的 Collection，而只會回傳單一 Model："

#: docs/8.x/eloquent.md:block 113 (code)
msgid "use App\\Models\\Flight;\n\n"
"// Retrieve a model by its primary key...\n"
"$flight = Flight::find(1);\n\n"
"// Retrieve the first model matching the query constraints...\n"
"$flight = Flight::where('active', 1)->first();\n\n"
"// Alternative to retrieving the first model matching the query constraints...\n"
"$flight = Flight::firstWhere('active', 1);\n"
msgstr "use App\\Models\\Flight;\n\n"
"// 使用主索引鍵 (Primary Key) 來取得 Model...\n"
"$flight = Flight::find(1);\n\n"
"// 取得符合查詢條件的第一個 Model...\n"
"$flight = Flight::where('active', 1)->first();\n\n"
"// 另一種取得符合查詢條件的第一個 Model 的方法...\n"
"$flight = Flight::firstWhere('active', 1);\n"

#: docs/8.x/eloquent.md:block 114 (paragraph)
msgid "Sometimes you may wish to retrieve the first result of a query or perform some other action if no results are found. The `firstOr` method will return the first result matching the query or, if no results are found, execute the given closure. The value returned by the closure will be considered the result of the `firstOr` method:"
msgstr "有時候，我們可能會想取得查詢的第一筆結果，並在沒有符合的查詢結果時執行一些其他的操作。`firstOr` 方法會回傳第一筆符合該查詢的結果，並在沒有找到相符結果時執行給定的閉包。該閉包的回傳值會被當作 `firstOr` 方法的結果："

#: docs/8.x/eloquent.md:block 115 (code)
msgid "$model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"    // ...\n"
"});\n"
msgstr "$model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"    // ...\n"
"});\n"

#: docs/8.x/eloquent.md:block 117 (header)
msgid "Not Found Exceptions"
msgstr "找不到的例外"

#: docs/8.x/eloquent.md:block 118 (paragraph)
msgid "Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The `findOrFail` and `firstOrFail` methods will retrieve the first result of the query; however, if no result is found, an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` will be thrown:"
msgstr "有時候，我們可能會想在找不到 Model 時擲回一個例外。這種行為特別適用於路由或 Controller 中。`findOrFail` 或 `firstOrFail` 方法會取得查詢的第一筆結果。不過，若找不到結果，會擲回 `Illuminate\\Database\\Eloquent\\ModelNotFoundException`："

#: docs/8.x/eloquent.md:block 119 (code)
msgid "$flight = Flight::findOrFail(1);\n\n"
"$flight = Flight::where('legs', '>', 3)->firstOrFail();\n"
msgstr "$flight = Flight::findOrFail(1);\n\n"
"$flight = Flight::where('legs', '>', 3)->firstOrFail();\n"

#: docs/8.x/eloquent.md:block 120 (paragraph)
msgid "If the `ModelNotFoundException` is not caught, a 404 HTTP response is automatically sent back to the client:"
msgstr "若未攔截 (Catch) `ModelNotFoundException`，則會自動回傳 404 HTTP 回應給用戶端："

#: docs/8.x/eloquent.md:block 121 (code)
msgid "use App\\Models\\Flight;\n\n"
"Route::get('/api/flights/{id}', function ($id) {\n"
"    return Flight::findOrFail($id);\n"
"});\n"
msgstr "use App\\Models\\Flight;\n\n"
"Route::get('/api/flights/{id}', function ($id) {\n"
"    return Flight::findOrFail($id);\n"
"});\n"

#: docs/8.x/eloquent.md:block 123 (header)
msgid "Retrieving Or Creating Models"
msgstr "取得或建立 Model"

#: docs/8.x/eloquent.md:block 124 (paragraph)
msgid "The `firstOrCreate` method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the attributes resulting from merging the first array argument with the optional second array argument:"
msgstr "`firstOrCreate` 方法會嘗試使用給定的欄位 / 值配對組來取得資料庫紀錄。若資料庫中找不到該 Model，則會將第一個第一個陣列引述與第二個可選的陣列引數合併後插入資料庫："

#: docs/8.x/eloquent.md:block 125 (paragraph)
msgid "The `firstOrNew` method, like `firstOrCreate`, will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by `firstOrNew` has not yet been persisted to the database. You will need to manually call the `save` method to persist it:"
msgstr "`firstOrNew` 方法與 `firstOrCreate` 方法類似，會嘗試在資料庫中尋找符合給定屬性的紀錄。不過，若找不到 Model，則會回傳新的 Model 實體。請注意，`firstOrNew` 回傳的 Model 還未被儲存在資料庫中，應手動呼叫 `save` 方法來保存："

#: docs/8.x/eloquent.md:block 126 (code)
msgid "use App\\Models\\Flight;\n\n"
"// Retrieve flight by name or create it if it doesn't exist...\n"
"$flight = Flight::firstOrCreate([\n"
"    'name' => 'London to Paris'\n"
"]);\n\n"
"// Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\n"
"$flight = Flight::firstOrCreate(\n"
"    ['name' => 'London to Paris'],\n"
"    ['delayed' => 1, 'arrival_time' => '11:30']\n"
");\n\n"
"// Retrieve flight by name or instantiate a new Flight instance...\n"
"$flight = Flight::firstOrNew([\n"
"    'name' => 'London to Paris'\n"
"]);\n\n"
"// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n"
"$flight = Flight::firstOrNew(\n"
"    ['name' => 'Tokyo to Sydney'],\n"
"    ['delayed' => 1, 'arrival_time' => '11:30']\n"
");\n"
msgstr "use App\\Models\\Flight;\n\n"
"// 依照名稱取得航班，若不存在時則建立該航班...\n"
"$flight = Flight::firstOrCreate([\n"
"    'name' => 'London to Paris'\n"
"]);\n\n"
"// 依照名稱取得該航班，若不存在，則使用該名稱、誤點時間、抵達時間等資料來建立航班...\n"
"$flight = Flight::firstOrCreate(\n"
"    ['name' => 'London to Paris'],\n"
"    ['delayed' => 1, 'arrival_time' => '11:30']\n"
");\n\n"
"// 依照名稱取得航班，或是初始化一個新的 Flight 實體...\n"
"$flight = Flight::firstOrNew([\n"
"    'name' => 'London to Paris'\n"
"]);\n\n"
"// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n"
"$flight = Flight::firstOrNew(\n"
"    ['name' => 'Tokyo to Sydney'],\n"
"    ['delayed' => 1, 'arrival_time' => '11:30']\n"
");\n"

#: docs/8.x/eloquent.md:block 128 (header)
msgid "Retrieving Aggregates"
msgstr "取得彙總值 (Aggregate)"

#: docs/8.x/eloquent.md:block 129 (paragraph)
msgid "When interacting with Eloquent models, you may also use the `count`, `sum`, `max`, and other [aggregate methods](/docs/{{version}}/queries#aggregates) provided by the Laravel [query builder](/docs/{{version}}/queries). As you might expect, these methods return a scalar value instead of an Eloquent model instance:"
msgstr "在與 Eloquent Model 互動時，我們也可以使用 `count`、`sum`、`max`⋯等其他由 Laravel [Query Builder](/docs/{{version}}/queries) 提供的[彙總方法](/docs/{{version}}/queries#aggregates)。如同讀者預期的一樣，這些方法會回傳純量值 (Scalar Value)，而非 Eloquent Model 實體："

#: docs/8.x/eloquent.md:block 130 (code)
msgid "$count = Flight::where('active', 1)->count();\n\n"
"$max = Flight::where('active', 1)->max('price');\n"
msgstr "$count = Flight::where('active', 1)->count();\n\n"
"$max = Flight::where('active', 1)->max('price');\n"

#: docs/8.x/eloquent.md:block 132 (header)
msgid "Inserting & Updating Models"
msgstr "插入與更新 Model"

#: docs/8.x/eloquent.md:block 134 (header)
msgid "Inserts"
msgstr "插入 - Insert"

#: docs/8.x/eloquent.md:block 135 (paragraph)
msgid "Of course, when using Eloquent, we don't only need to retrieve models from the database. We also need to insert new records. Thankfully, Eloquent makes it simple. To insert a new record into the database, you should instantiate a new model instance and set attributes on the model. Then, call the `save` method on the model instance:"
msgstr "當然，在使用 Eloquent 時，我們的需求不只有從資料庫中取得資料，我們也需要能插入新紀錄。所幸，在 Eloquent 中要插入資料非常簡單。要將新紀錄插入資料庫，請初始化一個新的 Model 實體，並在 Model 上設定屬性。然後，在 Model 實體上呼叫 `save` 方法："

#: docs/8.x/eloquent.md:block 136 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Flight;\n"
"use Illuminate\\Http\\Request;\n\n"
"class FlightController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new flight in the database.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        // Validate the request...\n\n"
"        $flight = new Flight;\n\n"
"        $flight->name = $request->name;\n\n"
"        $flight->save();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Flight;\n"
"use Illuminate\\Http\\Request;\n\n"
"class FlightController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new flight in the database.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        // Validate the request...\n\n"
"        $flight = new Flight;\n\n"
"        $flight->name = $request->name;\n\n"
"        $flight->save();\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 137 (paragraph)
msgid "In this example, we assign the `name` field from the incoming HTTP request to the `name` attribute of the `App\\Models\\Flight` model instance. When we call the `save` method, a record will be inserted into the database. The model's `created_at` and `updated_at` timestamps will automatically be set when the `save` method is called, so there is no need to set them manually."
msgstr "在這個範例中，我們將來自連入 HTTP 請求的 `name` 欄位賦值給 `App\\Models\\Flight` Model 實體的 `name` 屬性。呼叫 `save` 方法後，就會將一筆紀錄插入到資料庫中。在呼叫 `save` 方法時，會自動設定 `created_at` 與 `updated_at` 時戳，因此我們不需要手動設定這些欄位。"

#: docs/8.x/eloquent.md:block 138 (paragraph)
msgid "Alternatively, you may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the `create` method:"
msgstr "或者，我們也可以使用 `create` 來通過單一 PHP 陳述式「保存」新 Model。`create` 方法會回傳插入的 Model 實體："

#: docs/8.x/eloquent.md:block 139 (code)
msgid "use App\\Models\\Flight;\n\n"
"$flight = Flight::create([\n"
"    'name' => 'London to Paris',\n"
"]);\n"
msgstr "use App\\Models\\Flight;\n\n"
"$flight = Flight::create([\n"
"    'name' => 'London to Paris',\n"
"]);\n"

#: docs/8.x/eloquent.md:block 140 (paragraph)
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default. To learn more about mass assignment, please consult the [mass assignment documentation](#mass-assignment)."
msgstr "不過，在使用 `create` 方法時，應在 Model 類別上設定好 `fillable` 或 `guarded` 屬性。由於所有的 Eloquent Model 預設都有針對大量賦值弱點 (Mass Assignment Vulnerability) 進行保護，因此必須設定這些屬性。要瞭解更多有關大量賦值的資訊，請參考[大量賦值說明文件](#mass-assignment)。"

#: docs/8.x/eloquent.md:block 142 (header)
msgid "Updates"
msgstr "更新 - Update"

#: docs/8.x/eloquent.md:block 143 (paragraph)
msgid "The `save` method may also be used to update models that already exist in the database. To update a model, you should retrieve it and set any attributes you wish to update. Then, you should call the model's `save` method. Again, the `updated_at` timestamp will automatically be updated, so there is no need to manually set its value:"
msgstr "`save` 方法也可用來更新已存在於資料庫的 Model。要更新 Model，應先取得這個 Model，然後設定要更新的屬性。接著，呼叫 Model 的 `save` 方法。同樣，`updated_at` 時戳會自動更新，無須手動設定："

#: docs/8.x/eloquent.md:block 144 (code)
msgid "use App\\Models\\Flight;\n\n"
"$flight = Flight::find(1);\n\n"
"$flight->name = 'Paris to London';\n\n"
"$flight->save();\n"
msgstr "use App\\Models\\Flight;\n\n"
"$flight = Flight::find(1);\n\n"
"$flight->name = 'Paris to London';\n\n"
"$flight->save();\n"

#: docs/8.x/eloquent.md:block 146 (header)
msgid "Mass Updates"
msgstr "批次更新"

#: docs/8.x/eloquent.md:block 147 (paragraph)
msgid "Updates can also be performed against models that match a given query. In this example, all flights that are `active` and have a `destination` of `San Diego` will be marked as delayed:"
msgstr "也可以更新符合給定查詢的 Model。在這個範例中，設為 `active` 且 `destination` 為 `San Diego` 的航班會被標記為誤點 (Delayed)："

#: docs/8.x/eloquent.md:block 148 (code)
msgid "Flight::where('active', 1)\n"
"      ->where('destination', 'San Diego')\n"
"      ->update(['delayed' => 1]);\n"
msgstr "Flight::where('active', 1)\n"
"      ->where('destination', 'San Diego')\n"
"      ->update(['delayed' => 1]);\n"

#: docs/8.x/eloquent.md:block 149 (paragraph)
msgid "The `update` method expects an array of column and value pairs representing the columns that should be updated. The `update` method returns the number of affected rows."
msgstr "`update` 方法預期一組包含欄位與值的陣列，用來代表要更新的欄位。`update` 方法會回傳受影響的行數。"

#: docs/8.x/eloquent.md:block 150 (quote)
msgid "{note} When issuing a mass update via Eloquent, the `saving`, `saved`, `updating`, and `updated` model events will not be fired for the updated models. This is because the models are never actually retrieved when issuing a mass update."
msgstr "{note} 在使用 Eloquent 進行批次更新時，將不會引發 `saving`、`saved`、`updating`、`updated` 等 Model 事件。這是因為，在批次更新時並不會實際取得這些 Model。"

#: docs/8.x/eloquent.md:block 152 (header)
msgid "Examining Attribute Changes"
msgstr "檢驗屬性的更改"

#: docs/8.x/eloquent.md:block 153 (paragraph)
msgid "Eloquent provides the `isDirty`, `isClean`, and `wasChanged` methods to examine the internal state of your model and determine how its attributes have changed from when the model was originally retrieved."
msgstr "Eloquent 提供了 `isDirty`、`isClean`、`wasChanged` 等方法，用以檢驗 Model 的內部狀態，並判斷自取得 Model 以來其屬性的更改。"

#: docs/8.x/eloquent.md:block 154 (paragraph)
msgid "The `isDirty` method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name to the `isDirty` method to determine if a particular attribute is dirty. The `isClean` will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"
msgstr "`isDirty` 方法判斷自取得 Model 以來，Model 中是否有任何的屬性經過修改。可以傳入一個屬性名稱給 `isDirty` 方法來判斷某個特定的屬性是否有被更改 (Dirty)。`isClean` 則用來判斷某個屬性是否從取得 Model 以來都沒有被更改過。這個方法同樣也接受一個可選的屬性引數："

#: docs/8.x/eloquent.md:block 155 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->isDirty(); // true\n"
"$user->isDirty('title'); // true\n"
"$user->isDirty('first_name'); // false\n\n"
"$user->isClean(); // false\n"
"$user->isClean('title'); // false\n"
"$user->isClean('first_name'); // true\n\n"
"$user->save();\n\n"
"$user->isDirty(); // false\n"
"$user->isClean(); // true\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->isDirty(); // true\n"
"$user->isDirty('title'); // true\n"
"$user->isDirty('first_name'); // false\n\n"
"$user->isClean(); // false\n"
"$user->isClean('title'); // false\n"
"$user->isClean('first_name'); // true\n\n"
"$user->save();\n\n"
"$user->isDirty(); // false\n"
"$user->isClean(); // true\n"

#: docs/8.x/eloquent.md:block 156 (paragraph)
msgid "The `wasChanged` method determines if any attributes were changed when the model was last saved within the current request cycle. If needed, you may pass an attribute name to see if a particular attribute was changed:"
msgstr "`wasChanged` 方法用來判斷在目前的請求週期內，自動上次保存 Model 後，是否有任何屬性經過修改。若有需要的話，也可以傳入一個屬性名稱來判斷某個特定的屬性是否經過修改："

#: docs/8.x/eloquent.md:block 157 (code)
msgid "$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->save();\n\n"
"$user->wasChanged(); // true\n"
"$user->wasChanged('title'); // true\n"
"$user->wasChanged('first_name'); // false\n"
msgstr "$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->save();\n\n"
"$user->wasChanged(); // true\n"
"$user->wasChanged('title'); // true\n"
"$user->wasChanged('first_name'); // false\n"

#: docs/8.x/eloquent.md:block 158 (paragraph)
msgid "The `getOriginal` method returns an array containing the original attributes of the model regardless of any changes to the model since it was retrieved. If needed, you may pass a specific attribute name to get the original value of a particular attribute:"
msgstr "`getOriginal` 方法則回傳一個包含 Model 原始屬性的陣列，無論取得 Model 後是否有進行任何修改。若有需要，我們也可以傳入一個屬性名稱來取得某個特定屬性的原始值："

#: docs/8.x/eloquent.md:block 159 (code)
msgid "$user = User::find(1);\n\n"
"$user->name; // John\n"
"$user->email; // john@example.com\n\n"
"$user->name = \"Jack\";\n"
"$user->name; // Jack\n\n"
"$user->getOriginal('name'); // John\n"
"$user->getOriginal(); // Array of original attributes...\n"
msgstr "$user = User::find(1);\n\n"
"$user->name; // John\n"
"$user->email; // john@example.com\n\n"
"$user->name = \"Jack\";\n"
"$user->name; // Jack\n\n"
"$user->getOriginal('name'); // John\n"
"$user->getOriginal(); // 原始屬性的陣列...\n"

#: docs/8.x/eloquent.md:block 161 (header)
msgid "Mass Assignment"
msgstr "大量賦值"

#: docs/8.x/eloquent.md:block 162 (paragraph)
msgid "You may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the method:"
msgstr "我們也可以使用 `create` 來通過單一 PHP 陳述式「保存」新 Model。`create` 方法會回傳插入的 Model 實體："

#: docs/8.x/eloquent.md:block 164 (paragraph)
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default."
msgstr "不過，在使用 `create` 方法時，應在 Model 類別上設定好 `fillable` 或 `guarded` 屬性。由於所有的 Eloquent Model 預設都有針對大量賦值弱點 (Mass Assignment Vulnerability) 進行保護，因此必須設定這些屬性。"

#: docs/8.x/eloquent.md:block 165 (paragraph)
msgid "A mass assignment vulnerability occurs when a user passes an unexpected HTTP request field and that field changes a column in your database that you did not expect. For example, a malicious user might send an `is_admin` parameter through an HTTP request, which is then passed to your model's `create` method, allowing the user to escalate themselves to an administrator."
msgstr "當使用者傳入一個未預期的 HTTP 請求欄位，且該欄位會更改開發人員未預期的資料庫欄位時，就會導致大量賦值弱點。舉例來說，惡意使用者可能會通過 HTTP 請求傳入一個 `is_admin` 屬性，而該屬性可能會傳入 Model 的 `create` 方法，進一步導致使用者能自行將自己的權限提升未管理員。"

#: docs/8.x/eloquent.md:block 166 (paragraph)
msgid "So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the `$fillable` property on the model. For example, let's make the `name` attribute of our `Flight` model mass assignable:"
msgstr "因此，要開始使用大量賦值，應先定義哪些 Model 屬性能被大量複製。可以使用 Model 上的 `$fillable` 屬性來達成。舉例來說，我們來設定讓 `Flight` Model 的 `name` 屬性可被大量複製："

#: docs/8.x/eloquent.md:block 167 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $fillable = ['name'];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $fillable = ['name'];\n"
"}\n"

#: docs/8.x/eloquent.md:block 168 (paragraph)
msgid "Once you have specified which attributes are mass assignable, you may use the `create` method to insert a new record in the database. The `create` method returns the newly created model instance:"
msgstr "指定好哪些屬性能被大量賦值後，就可以使用 `create` 方法來插入新紀錄到資料庫中。`create` 方法會回傳新建立的 Model 實體："

#: docs/8.x/eloquent.md:block 169 (code)
msgid "$flight = Flight::create(['name' => 'London to Paris']);\n"
msgstr "$flight = Flight::create(['name' => 'London to Paris']);\n"

#: docs/8.x/eloquent.md:block 170 (paragraph)
msgid "If you already have a model instance, you may use the `fill` method to populate it with an array of attributes:"
msgstr "若已有 Model 實體，則可以使用 `fill` 方法來以一組包含屬性的陣列來修改這個 Model 實體："

#: docs/8.x/eloquent.md:block 171 (code)
msgid "$flight->fill(['name' => 'Amsterdam to Frankfurt']);\n"
msgstr "$flight->fill(['name' => 'Amsterdam to Frankfurt']);\n"

#: docs/8.x/eloquent.md:block 173 (header)
msgid "Mass Assignment & JSON Columns"
msgstr "大量複製與 JSON 欄位"

#: docs/8.x/eloquent.md:block 174 (paragraph)
msgid "When assigning JSON columns, each column's mass assignable key must be specified in your model's `$fillable` array. For security, Laravel does not support updating nested JSON attributes when using the `guarded` property:"
msgstr "在為 JSON 欄位賦值時，應在 Model 的 `$fillable` 陣列中指定所有可大量複製的欄位。基於安全性考量，Laravel 並不支援在使用 `guarded` 屬性時更新巢狀 JSON 屬性："

#: docs/8.x/eloquent.md:block 175 (code)
msgid "/**\n"
" * The attributes that are mass assignable.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $fillable = [\n"
"    'options->enabled',\n"
"];\n"
msgstr "/**\n"
" * The attributes that are mass assignable.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $fillable = [\n"
"    'options->enabled',\n"
"];\n"

#: docs/8.x/eloquent.md:block 177 (header)
msgid "Allowing Mass Assignment"
msgstr "允許大量賦值"

#: docs/8.x/eloquent.md:block 178 (paragraph)
msgid "If you would like to make all of your attributes mass assignable, you may define your model's `$guarded` property as an empty array. If you choose to unguard your model, you should take special care to always hand-craft the arrays passed to Eloquent's `fill`, `create`, and `update` methods:"
msgstr "若想讓所有的屬性都可被大量賦值，則可將 `$guarded` 屬性設為空真理。若要取消保護 Model，則應特別注意，且應只將手動設定的陣列傳給 Eloquent 的 `fill`、`create`、`update` 等方法："

#: docs/8.x/eloquent.md:block 179 (code)
msgid "/**\n"
" * The attributes that aren't mass assignable.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $guarded = [];\n"
msgstr "/**\n"
" * The attributes that aren't mass assignable.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $guarded = [];\n"

#: docs/8.x/eloquent.md:block 181 (header)
msgid "Upserts"
msgstr "更新插入 - Upsert"

#: docs/8.x/eloquent.md:block 182 (paragraph)
msgid "Occasionally, you may need to update an existing model or create a new model if no matching model exists. Like the `firstOrCreate` method, the `updateOrCreate` method persists the model, so there's no need to manually call the `save` method."
msgstr "有時候，我們可能需要更新現有的 Model，或是當沒有符合的 Model 存在時建立一個新的 Model。與 `firstOrCreate` 方法類似，`updateOrCreate` 方法可將 Model 保存在資料庫中，因此我們不需手動呼叫 `save` 方法。"

#: docs/8.x/eloquent.md:block 183 (paragraph)
msgid "In the example below, if a flight exists with a `departure` location of `Oakland` and a `destination` location of `San Diego`, its `price` and `discounted` columns will be updated. If no such flight exists, a new flight will be created which has the attributes resulting from merging the first argument array with the second argument array:"
msgstr "在下方的範例中，若有 `depature` 位置為 `Oakland` 且 `destination` 位置為 `San Diego` 的航班，會更新其 `price` 與 `discounted` 欄位。若沒有找到符合的航班，則會將第一個引數的陣列與第二個引數的陣列合併，並用來建立一個新的航班："

#: docs/8.x/eloquent.md:block 184 (code)
msgid "$flight = Flight::updateOrCreate(\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n"
"    ['price' => 99, 'discounted' => 1]\n"
");\n"
msgstr "$flight = Flight::updateOrCreate(\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n"
"    ['price' => 99, 'discounted' => 1]\n"
");\n"

#: docs/8.x/eloquent.md:block 185 (paragraph)
msgid "If you would like to perform multiple \"upserts\" in a single query, then you should use the `upsert` method instead. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of the columns that should be updated if a matching record already exists in the database. The `upsert` method will automatically set the `created_at` and `updated_at` timestamps if timestamps are enabled on the model:"
msgstr "若想在單一查詢內執行多個「Upsert」，則應使用 `upsert` 方法作為替代。該方法的第一個引數為用來插入或更新的值，而第二個引數則列出用來在相關資料表上識別出紀錄唯一性的欄位。該方法的第三個與最後一個引數是一組包含欄位的陣列，這些欄位是在資料庫中有相符紀錄時會更新的欄位。若 Model 上有啟用時戳，則 `upsert` 方法會自動設定 `created_at` 與 `updated_at` 時戳："

#: docs/8.x/eloquent.md:block 186 (code)
msgid "Flight::upsert([\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"], ['departure', 'destination'], ['price']);\n"
msgstr "Flight::upsert([\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"], ['departure', 'destination'], ['price']);\n"

#: docs/8.x/eloquent.md:block 188 (header)
msgid "Deleting Models"
msgstr "刪除 Model"

#: docs/8.x/eloquent.md:block 189 (paragraph)
msgid "To delete a model, you may call the `delete` method on the model instance:"
msgstr "若要刪除 Model，則可以在 Model 實體上呼叫 `delete` 方法："

#: docs/8.x/eloquent.md:block 190 (code)
msgid "use App\\Models\\Flight;\n\n"
"$flight = Flight::find(1);\n\n"
"$flight->delete();\n"
msgstr "use App\\Models\\Flight;\n\n"
"$flight = Flight::find(1);\n\n"
"$flight->delete();\n"

#: docs/8.x/eloquent.md:block 191 (paragraph)
msgid "You may call the `truncate` method to delete all of the model's associated database records. The `truncate` operation will also reset any auto-incrementing IDs on the model's associated table:"
msgstr "可以呼叫 `truncate` 方法來刪除與 Model 相關的所有資料庫紀錄。`truncate` 行動也會重設該 Model 資料表上所有的自動遞增 (Auto-Incrementing) ID 欄位："

#: docs/8.x/eloquent.md:block 192 (code)
msgid "Flight::truncate();\n"
msgstr "Flight::truncate();\n"

#: docs/8.x/eloquent.md:block 194 (header)
msgid "Deleting An Existing Model By Its Primary Key"
msgstr "以主索引鍵來刪除現存的 Model"

#: docs/8.x/eloquent.md:block 195 (paragraph)
msgid "In the example above, we are retrieving the model from the database before calling the `delete` method. However, if you know the primary key of the model, you may delete the model without explicitly retrieving it by calling the `destroy` method. In addition to accepting the single primary key, the `destroy` method will accept multiple primary keys, an array of primary keys, or a [collection](/docs/{{version}}/collections) of primary keys:"
msgstr "在上方的範例中，在呼叫 `delete` 方法前，我們先從資料庫中取得了這個 Model。若你已經知道某個 Model 的主索引鍵，則可以呼叫 `destroy` 方法來在不顯式取得 Model 的情況下刪除該 Model。除了接受單一主索引鍵外，`destroy` 方法還能接受多個主索引鍵、一組包含主索引鍵的陣列、一組包含主索引鍵的 [Collection](/docs/{{version}}/collections)等："

#: docs/8.x/eloquent.md:block 196 (code)
msgid "Flight::destroy(1);\n\n"
"Flight::destroy(1, 2, 3);\n\n"
"Flight::destroy([1, 2, 3]);\n\n"
"Flight::destroy(collect([1, 2, 3]));\n"
msgstr "Flight::destroy(1);\n\n"
"Flight::destroy(1, 2, 3);\n\n"
"Flight::destroy([1, 2, 3]);\n\n"
"Flight::destroy(collect([1, 2, 3]));\n"

#: docs/8.x/eloquent.md:block 197 (quote)
msgid "{note} The `destroy` method loads each model individually and calls the `delete` method so that the `deleting` and `deleted` events are properly dispatched for each model."
msgstr "{note} `destroy` 方法會先載入個別 Model，然後再呼叫其 `delete` 方法。因此，每個 Model 的 `deleting` 與 `deleted` 事件都會被正確分派。"

#: docs/8.x/eloquent.md:block 199 (header)
msgid "Deleting Models Using Queries"
msgstr "使用查詢來刪除 Model"

#: docs/8.x/eloquent.md:block 200 (paragraph)
msgid "Of course, you may build an Eloquent query to delete all models matching your query's criteria. In this example, we will delete all flights that are marked as inactive. Like mass updates, mass deletes will not dispatch model events for the models that are deleted:"
msgstr "當然，我們也可以建立一個 Eloquent 查詢來刪除所有符合查詢條件的 Model。在這個範例中，我們會刪除所有被標記為 Inactive 的航班。與批次更新類似，批次刪除也不會為要刪除的 Model 分派 Model 事件："

#: docs/8.x/eloquent.md:block 201 (code)
msgid "$deleted = Flight::where('active', 0)->delete();\n"
msgstr "$deleted = Flight::where('active', 0)->delete();\n"

#: docs/8.x/eloquent.md:block 202 (quote)
msgid "{note} When executing a mass delete statement via Eloquent, the `deleting` and `deleted` model events will not be dispatched for the deleted models. This is because the models are never actually retrieved when executing the delete statement."
msgstr "{note} 使用 Eloquent 執行批次刪除時，將不會為被刪除的 Model 指派 `deleting` 與 `deleted` Model 事件。這是因為在執行刪除陳述式時，我們並不會真的取得這些 Model。"

#: docs/8.x/eloquent.md:block 204 (header)
msgid "Soft Deleting"
msgstr "軟刪除"

#: docs/8.x/eloquent.md:block 205 (paragraph)
msgid "In addition to actually removing records from your database, Eloquent can also \"soft delete\" models. When models are soft deleted, they are not actually removed from your database. Instead, a `deleted_at` attribute is set on the model indicating the date and time at which the model was \"deleted\". To enable soft deletes for a model, add the `Illuminate\\Database\\Eloquent\\SoftDeletes` trait to the model:"
msgstr "除了從資料庫中真正將資料刪除外，Eloquent 也可以「軟刪除」Model。當 Model 被軟刪除後，這些資料並不會真的被從資料庫內移除，而是會在 Model 上設定一個 `deleted_at` 屬性，代表 Model 被「刪除」的日期與時間。若要為 Model 啟用軟刪除，請將 `Illuminate\\Database\\Eloquent\\SoftDeletes` Trait 加到 Model 上："

#: docs/8.x/eloquent.md:block 206 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\SoftDeletes;\n\n"
"class Flight extends Model\n"
"{\n"
"    use SoftDeletes;\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\SoftDeletes;\n\n"
"class Flight extends Model\n"
"{\n"
"    use SoftDeletes;\n"
"}\n"

#: docs/8.x/eloquent.md:block 207 (quote)
msgid "{tip} The `SoftDeletes` trait will automatically cast the `deleted_at` attribute to a `DateTime` / `Carbon` instance for you."
msgstr "{tip} `SoftDeletes` Trait 會自動將 `deleted_at` 屬性型別轉換為 `DateTime` 或 `Carbon`。"

#: docs/8.x/eloquent.md:block 208 (paragraph)
msgid "You should also add the `deleted_at` column to your database table. The Laravel [schema builder](/docs/{{version}}/migrations) contains a helper method to create this column:"
msgstr "也應將 `deleted_at` 欄位加到資料表上。Laravel 的 [Schema Builder](/docs/{{version}}/migrations) 中有一個用來建立該欄位的輔助方法："

#: docs/8.x/eloquent.md:block 209 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('flights', function (Blueprint $table) {\n"
"    $table->softDeletes();\n"
"});\n\n"
"Schema::table('flights', function (Blueprint $table) {\n"
"    $table->dropSoftDeletes();\n"
"});\n"
msgstr "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('flights', function (Blueprint $table) {\n"
"    $table->softDeletes();\n"
"});\n\n"
"Schema::table('flights', function (Blueprint $table) {\n"
"    $table->dropSoftDeletes();\n"
"});\n"

#: docs/8.x/eloquent.md:block 210 (paragraph)
msgid "Now, when you call the `delete` method on the model, the `deleted_at` column will be set to the current date and time. However, the model's database record will be left in the table. When querying a model that uses soft deletes, the soft deleted models will automatically be excluded from all query results."
msgstr "現在，在 Model 上呼叫 `delete` 方法時，會自動將 `deleted_at` 欄位的值設為目前的日期與時間，而 Model 的資料庫紀錄將保留在資料表內。查詢有軟刪除的 Model 時，查詢結果中將自動排除所有被軟刪除的 Model。"

#: docs/8.x/eloquent.md:block 211 (paragraph)
msgid "To determine if a given model instance has been soft deleted, you may use the `trashed` method:"
msgstr "若要判斷某個 Model 實體是否已被軟刪除，可以使用 `trashed` 方法："

#: docs/8.x/eloquent.md:block 212 (code)
msgid "if ($flight->trashed()) {\n"
"    //\n"
"}\n"
msgstr "if ($flight->trashed()) {\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 214 (header)
msgid "Restoring Soft Deleted Models"
msgstr "恢復軟刪除的 Model"

#: docs/8.x/eloquent.md:block 215 (paragraph)
msgid "Sometimes you may wish to \"un-delete\" a soft deleted model. To restore a soft deleted model, you may call the `restore` method on a model instance. The `restore` method will set the model's `deleted_at` column to `null`:"
msgstr "有時候，我們會想「取消刪除」某個軟刪除的 Model。若要恢復軟刪除的 Model，可以在 Model 實體上呼叫 `restore` 方法。`restore` 方法會將 `deleted_at` 欄位設為 `null`："

#: docs/8.x/eloquent.md:block 216 (code)
msgid "$flight->restore();\n"
msgstr "$flight->restore();\n"

#: docs/8.x/eloquent.md:block 217 (paragraph)
msgid "You may also use the `restore` method in a query to restore multiple models. Again, like other \"mass\" operations, this will not dispatch any model events for the models that are restored:"
msgstr "可以在查詢中使用 `restore` 方法來恢復多個 Model。跟其他「批次」行動一樣，這個方法並不會為恢復的 Model 分派任何 Model 事件："

#: docs/8.x/eloquent.md:block 218 (code)
msgid "Flight::withTrashed()\n"
"        ->where('airline_id', 1)\n"
"        ->restore();\n"
msgstr "Flight::withTrashed()\n"
"        ->where('airline_id', 1)\n"
"        ->restore();\n"

#: docs/8.x/eloquent.md:block 219 (paragraph)
msgid "The `restore` method may also be used when building [relationship](/docs/{{version}}/eloquent-relationships) queries:"
msgstr "在建立[關聯](/docs/{{version}}/eloquent-relationships)查詢時，也可以使用 `restore` 方法："

#: docs/8.x/eloquent.md:block 220 (code)
msgid "$flight->history()->restore();\n"
msgstr "$flight->history()->restore();\n"

#: docs/8.x/eloquent.md:block 222 (header)
msgid "Permanently Deleting Models"
msgstr "永久刪除 Model"

#: docs/8.x/eloquent.md:block 223 (paragraph)
msgid "Sometimes you may need to truly remove a model from your database. You may use the `forceDelete` method to permanently remove a soft deleted model from the database table:"
msgstr "有時候，我們會想將某個 Model 真正地從資料庫中刪除。可以使用 `forceDelete` 方法來將某個軟刪除的 Model 從資料表中永久移除："

#: docs/8.x/eloquent.md:block 224 (code)
msgid "$flight->forceDelete();\n"
msgstr "$flight->forceDelete();\n"

#: docs/8.x/eloquent.md:block 225 (paragraph)
msgid "You may also use the `forceDelete` method when building Eloquent relationship queries:"
msgstr "建立 Eloquent 關聯查詢時也可以使用 `forceDelete` 方法："

#: docs/8.x/eloquent.md:block 226 (code)
msgid "$flight->history()->forceDelete();\n"
msgstr "$flight->history()->forceDelete();\n"

#: docs/8.x/eloquent.md:block 228 (header)
msgid "Querying Soft Deleted Models"
msgstr "查詢軟刪除的 Model"

#: docs/8.x/eloquent.md:block 230 (header)
msgid "Including Soft Deleted Models"
msgstr "包含軟刪除的 Model"

#: docs/8.x/eloquent.md:block 231 (paragraph)
msgid "As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to be included in a query's results by calling the `withTrashed` method on the query:"
msgstr "前面也提到過，查詢結果中會自動排除已軟刪除的 Model。不過，我們通過在查詢上呼叫 `withTrashed` 來強制將已軟刪除的 Model 包含在查詢結果中："

#: docs/8.x/eloquent.md:block 232 (code)
msgid "use App\\Models\\Flight;\n\n"
"$flights = Flight::withTrashed()\n"
"                ->where('account_id', 1)\n"
"                ->get();\n"
msgstr "use App\\Models\\Flight;\n\n"
"$flights = Flight::withTrashed()\n"
"                ->where('account_id', 1)\n"
"                ->get();\n"

#: docs/8.x/eloquent.md:block 233 (paragraph)
msgid "The `withTrashed` method may also be called when building a [relationship](/docs/{{version}}/eloquent-relationships) query:"
msgstr "在建立[關聯](/docs/{{version}}/eloquent-relationships)查詢時，也可以呼叫 `withTrashed` 方法："

#: docs/8.x/eloquent.md:block 234 (code)
msgid "$flight->history()->withTrashed()->get();\n"
msgstr "$flight->history()->withTrashed()->get();\n"

#: docs/8.x/eloquent.md:block 236 (header)
msgid "Retrieving Only Soft Deleted Models"
msgstr "只取得被軟刪除的 Model"

#: docs/8.x/eloquent.md:block 237 (paragraph)
msgid "The `onlyTrashed` method will retrieve **only** soft deleted models:"
msgstr "`onlyTrashed` 方法 **只會** 取得被軟刪除的 Model："

#: docs/8.x/eloquent.md:block 238 (code)
msgid "$flights = Flight::onlyTrashed()\n"
"                ->where('airline_id', 1)\n"
"                ->get();\n"
msgstr "$flights = Flight::onlyTrashed()\n"
"                ->where('airline_id', 1)\n"
"                ->get();\n"

#: docs/8.x/eloquent.md:block 240 (header)
msgid "Pruning Models"
msgstr "修剪 (Prune) Model"

#: docs/8.x/eloquent.md:block 241 (paragraph)
msgid "Sometimes you may want to periodically delete models that are no longer needed. To accomplish this, you may add the `Illuminate\\Database\\Eloquent\\Prunable` or `Illuminate\\Database\\Eloquent\\MassPrunable` trait to the models you would like to periodically prune. After adding one of the traits to the model, implement a `prunable` method which returns an Eloquent query builder that resolves the models that are no longer needed:"
msgstr "有時候，我們可能會想定期刪除未使用的 Model。為此，我們可以使將 `Illuminate\\Database\\Eloquent\\Prunable` 或 `Illuminate\\Database\\Eloquent\\MassPrunable` Trait 加到要定期修剪的 Model 上。將其中一個 Trait 加到 Model\n"
"上後，請實作一個會回傳 Eloquent Query Builder 的 `prunable` 方法。這個 Query Builder 應解析出不再需要的 Model："

#: docs/8.x/eloquent.md:block 242 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Prunable;\n\n"
"class Flight extends Model\n"
"{\n"
"    use Prunable;\n\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function prunable()\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Prunable;\n\n"
"class Flight extends Model\n"
"{\n"
"    use Prunable;\n\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function prunable()\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 243 (paragraph)
msgid "When marking models as `Prunable`, you may also define a `pruning` method on the model. This method will be called before the model is deleted. This method can be useful for deleting any additional resources associated with the model, such as stored files, before the model is permanently removed from the database:"
msgstr "將 Model 標記為 `Prunable` 後，也可以在 Model 上定義一個 `pruning` 方法。這個方法會在 Model 被刪除後呼叫。該方法適用於想在 Model 被從資料庫內永久刪除前先刪除與這個 Model 相關的資源（如已保存的檔案等）時："

#: docs/8.x/eloquent.md:block 244 (code)
msgid "/**\n"
" * Prepare the model for pruning.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function pruning()\n"
"{\n"
"    //\n"
"}\n"
msgstr "/**\n"
" * Prepare the model for pruning.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function pruning()\n"
"{\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 245 (paragraph)
msgid "After configuring your prunable model, you should schedule the `model:prune` Artisan command in your application's `App\\Console\\Kernel` class. You are free to choose the appropriate interval at which this command should be run:"
msgstr "設定好 Prunable Model 後，應在專案的 `App\\Console\\Kernel` 類別內排程執行 `model:prune` Artisan 指令。可以隨意為這個指令設定適當的執行間隔："

#: docs/8.x/eloquent.md:block 246 (code)
msgid "/**\n"
" * Define the application's command schedule.\n"
" *\n"
" * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
" * @return void\n"
" */\n"
"protected function schedule(Schedule $schedule)\n"
"{\n"
"    $schedule->command('model:prune')->daily();\n"
"}\n"
msgstr "/**\n"
" * Define the application's command schedule.\n"
" *\n"
" * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
" * @return void\n"
" */\n"
"protected function schedule(Schedule $schedule)\n"
"{\n"
"    $schedule->command('model:prune')->daily();\n"
"}\n"

#: docs/8.x/eloquent.md:block 247 (paragraph)
msgid "Behind the scenes, the `model:prune` command will automatically detect \"Prunable\" models within your application's `app/Models` directory. If your models are in a different location, you may use the `--model` option to specify the model class names:"
msgstr "在 `model:prune` 中，會自動在專案 `app/Models` 目錄內的「Prunable」Model。若 Model 放在不同的位置，可使用 `--model` 選項來指定 Model 的類別名稱："

#: docs/8.x/eloquent.md:block 248 (code)
msgid "$schedule->command('model:prune', [\n"
"    '--model' => [Address::class, Flight::class],\n"
"])->daily();\n"
msgstr "$schedule->command('model:prune', [\n"
"    '--model' => [Address::class, Flight::class],\n"
"])->daily();\n"

#: docs/8.x/eloquent.md:block 249 (paragraph)
msgid "If you wish to exclude certain models from being pruned while pruning all other detected models, you may use the `--except` option:"
msgstr "若想排除一些 Model 不被修剪，只修剪其他 Model 的話，可以使用 `--except` 選項："

#: docs/8.x/eloquent.md:block 250 (code)
msgid "$schedule->command('model:prune', [\n"
"    '--except' => [Address::class, Flight::class],\n"
"])->daily();\n"
msgstr "$schedule->command('model:prune', [\n"
"    '--except' => [Address::class, Flight::class],\n"
"])->daily();\n"

#: docs/8.x/eloquent.md:block 251 (paragraph)
msgid "You may test your `prunable` query by executing the `model:prune` command with the `--pretend` option. When pretending, the `model:prune` command will simply report how many records would be pruned if the command were to actually run:"
msgstr "可以通過以 `--pretend` 選項執行 `model:prune` 指令來測試 `prunable` 查詢。在模擬修剪時，`model:prune` 指令只會回報如果真的執行的時候，有多少筆紀錄會被刪除："

#: docs/8.x/eloquent.md:block 252 (code)
msgid "php artisan model:prune --pretend\n"
msgstr "php artisan model:prune --pretend\n"

#: docs/8.x/eloquent.md:block 253 (quote)
msgid "{note} Soft deleting models will be permanently deleted (`forceDelete`) if they match the prunable query."
msgstr "{note} 若軟刪除的 Model 符合修剪查詢地條件，則會被永久性地刪除 (`forceDelete`)。"

#: docs/8.x/eloquent.md:block 255 (header)
msgid "Mass Pruning"
msgstr "大量修剪"

#: docs/8.x/eloquent.md:block 256 (paragraph)
msgid "When models are marked with the `Illuminate\\Database\\Eloquent\\MassPrunable` trait, models are deleted from the database using mass-deletion queries. Therefore, the `pruning` method will not be invoked, nor will the `deleting` and `deleted` model events be dispatched. This is because the models are never actually retrieved before deletion, thus making the pruning process much more efficient:"
msgstr "如果 Model 被 `Illuminate\\Database\\Eloquent\\MassPrunable` Trait 標記，則這些 Model 會使用批次刪除查詢來從資料庫裡刪除。因此，將不會叫用 `pruning` 方法，也不會分派 `deleting` 與 `deleted` Model 事件。這是因為，在刪除前我們不會真的把 Model 抓回來，也因此整個修剪的過程會更有效率一點："

#: docs/8.x/eloquent.md:block 257 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\MassPrunable;\n\n"
"class Flight extends Model\n"
"{\n"
"    use MassPrunable;\n\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function prunable()\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\MassPrunable;\n\n"
"class Flight extends Model\n"
"{\n"
"    use MassPrunable;\n\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function prunable()\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 259 (header)
msgid "Replicating Models"
msgstr "複製 Model"

#: docs/8.x/eloquent.md:block 260 (paragraph)
msgid "You may create an unsaved copy of an existing model instance using the `replicate` method. This method is particularly useful when you have model instances that share many of the same attributes:"
msgstr "我們可以使用 `replicate` 方法來為現有的 Model 實體建立一個未保存的拷貝。這個方法特別適用於當有多個 Model 實體共享了許多相同屬性的時候："

#: docs/8.x/eloquent.md:block 261 (code)
msgid "use App\\Models\\Address;\n\n"
"$shipping = Address::create([\n"
"    'type' => 'shipping',\n"
"    'line_1' => '123 Example Street',\n"
"    'city' => 'Victorville',\n"
"    'state' => 'CA',\n"
"    'postcode' => '90001',\n"
"]);\n\n"
"$billing = $shipping->replicate()->fill([\n"
"    'type' => 'billing'\n"
"]);\n\n"
"$billing->save();\n"
msgstr "use App\\Models\\Address;\n\n"
"$shipping = Address::create([\n"
"    'type' => 'shipping',\n"
"    'line_1' => '123 Example Street',\n"
"    'city' => 'Victorville',\n"
"    'state' => 'CA',\n"
"    'postcode' => '90001',\n"
"]);\n\n"
"$billing = $shipping->replicate()->fill([\n"
"    'type' => 'billing'\n"
"]);\n\n"
"$billing->save();\n"

#: docs/8.x/eloquent.md:block 262 (paragraph)
msgid "To exclude one or more attributes from being replicated to the new model, you may pass an array to the `replicate` method:"
msgstr "若要將一個或多個屬性從複製出來的新 Model 中移除，可以傳入一個陣列給 `replicate` 方法："

#: docs/8.x/eloquent.md:block 263 (code)
msgid "$flight = Flight::create([\n"
"    'destination' => 'LAX',\n"
"    'origin' => 'LHR',\n"
"    'last_flown' => '2020-03-04 11:00:00',\n"
"    'last_pilot_id' => 747,\n"
"]);\n\n"
"$flight = $flight->replicate([\n"
"    'last_flown',\n"
"    'last_pilot_id'\n"
"]);\n"
msgstr "$flight = Flight::create([\n"
"    'destination' => 'LAX',\n"
"    'origin' => 'LHR',\n"
"    'last_flown' => '2020-03-04 11:00:00',\n"
"    'last_pilot_id' => 747,\n"
"]);\n\n"
"$flight = $flight->replicate([\n"
"    'last_flown',\n"
"    'last_pilot_id'\n"
"]);\n"

#: docs/8.x/eloquent.md:block 265 (header)
msgid "Query Scopes"
msgstr "查詢 Scope"

#: docs/8.x/eloquent.md:block 267 (header)
msgid "Global Scopes"
msgstr "全域 Scope"

#: docs/8.x/eloquent.md:block 268 (paragraph)
msgid "Global scopes allow you to add constraints to all queries for a given model. Laravel's own [soft delete](#soft-deleting) functionality utilizes global scopes to only retrieve \"non-deleted\" models from the database. Writing your own global scopes can provide a convenient, easy way to make sure every query for a given model receives certain constraints."
msgstr "使用全域 Scope，就可以將某個查詢條件套用到給定 Model 的所有查詢上。Laravel 本身的[軟刪除](#soft-deleting)功能就使用了全域 Scope 來只從資料庫中取得「非刪除」的 Model。撰寫你自己的全域 Scope，就可以方便、簡單地確保給定 Model 中的所有查詢都有相同的查詢條件。"

#: docs/8.x/eloquent.md:block 270 (header)
msgid "Writing Global Scopes"
msgstr "撰寫全域 Scope"

#: docs/8.x/eloquent.md:block 271 (paragraph)
msgid "Writing a global scope is simple. First, define a class that implements the `Illuminate\\Database\\Eloquent\\Scope` interface. Laravel does not have a conventional location where you should place scope classes, so you are free to place this class in any directory that you wish."
msgstr "撰寫全域 Scope 很簡單。首先，定義一個實作 `Illuminate\\Database\\Eloquent\\Scope` 介面的類別。Laravel 並沒有指定 Scope 類別放置位置的慣例，因此可以隨意將這個類別放在任意目錄內。"

#: docs/8.x/eloquent.md:block 272 (paragraph)
msgid "The `Scope` interface requires you to implement one method: `apply`. The `apply` method may add `where` constraints or other types of clauses to the query as needed:"
msgstr "`Scope` 介面要求我們實作一個方法：`apply`。`apply` 方法可以按照需求在查詢上加入 `where` 條件或其他類型的子句："

#: docs/8.x/eloquent.md:block 273 (code)
msgid "<?php\n\n"
"namespace App\\Scopes;\n\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Scope;\n\n"
"class AncientScope implements Scope\n"
"{\n"
"    /**\n"
"     * Apply the scope to a given Eloquent query builder.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @return void\n"
"     */\n"
"    public function apply(Builder $builder, Model $model)\n"
"    {\n"
"        $builder->where('created_at', '<', now()->subYears(2000));\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Scopes;\n\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Scope;\n\n"
"class AncientScope implements Scope\n"
"{\n"
"    /**\n"
"     * Apply the scope to a given Eloquent query builder.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @return void\n"
"     */\n"
"    public function apply(Builder $builder, Model $model)\n"
"    {\n"
"        $builder->where('created_at', '<', now()->subYears(2000));\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 274 (quote)
msgid "{tip} If your global scope is adding columns to the select clause of the query, you should use the `addSelect` method instead of `select`. This will prevent the unintentional replacement of the query's existing select clause."
msgstr "{tip} 若你的全域 Scope 由將欄位加到查詢的 Select 子句中，請使用 `addSelect` 而不是 `select`。這樣可以避免我們不小心把查詢上原本就有的 Select 子句覆蓋掉。"

#: docs/8.x/eloquent.md:block 276 (header)
msgid "Applying Global Scopes"
msgstr "套用全域 Scope"

#: docs/8.x/eloquent.md:block 277 (paragraph)
msgid "To assign a global scope to a model, you should override the model's `booted` method and invoke the model's `addGlobalScope` method. The `addGlobalScope` method accepts an instance of your scope as its only argument:"
msgstr "若要將全域 Scope 指派給 Model，應先複寫該 Model 的 `booted` 方法，並呼叫 Model 的 `addGlobalScope` 方法。`addGlobalScope` 方法接受一個 Scope 實體作為其唯一的引數："

#: docs/8.x/eloquent.md:block 278 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Scopes\\AncientScope;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope(new AncientScope);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Scopes\\AncientScope;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope(new AncientScope);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 279 (paragraph)
msgid "After adding the scope in the example above to the `App\\Models\\User` model, a call to the `User::all()` method will execute the following SQL query:"
msgstr "將上述範例中的 Scope 加到 `App\\Models\\User` Model 後，呼叫 `User::all()` 方法會執行下列 SQL 查詢："

#: docs/8.x/eloquent.md:block 280 (code)
msgid "select * from `users` where `created_at` < 0021-02-18 00:00:00\n"
msgstr "select * from `users` where `created_at` < 0021-02-18 00:00:00\n"

#: docs/8.x/eloquent.md:block 282 (header)
msgid "Anonymous Global Scopes"
msgstr "匿名全域 Scope"

#: docs/8.x/eloquent.md:block 283 (paragraph)
msgid "Eloquent also allows you to define global scopes using closures, which is particularly useful for simple scopes that do not warrant a separate class of their own. When defining a global scope using a closure, you should provide a scope name of your own choosing as the first argument to the `addGlobalScope` method:"
msgstr "在 Eloquent 中，我們也可以使用閉包來定義全域 Scope。使用閉包來定義特別適用於一些簡單而不需要獨立拆分成 Class 的 Scope。使用閉包定義全域 Scope 時，應先設定一個自訂的 Scope 名稱作為第一個引數傳給 `addGlobalScope` 方法："

#: docs/8.x/eloquent.md:block 284 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope('ancient', function (Builder $builder) {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope('ancient', function (Builder $builder) {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 286 (header)
msgid "Removing Global Scopes"
msgstr "移除全域 Scope"

#: docs/8.x/eloquent.md:block 287 (paragraph)
msgid "If you would like to remove a global scope for a given query, you may use the `withoutGlobalScope` method. This method accepts the class name of the global scope as its only argument:"
msgstr "若想在給定查詢內移除全域 Scope，可以使用 `withoutGlobalScope` 方法。這個方法接受全域 Scope 的類別名稱作為其唯一的引數："

#: docs/8.x/eloquent.md:block 288 (code)
msgid "User::withoutGlobalScope(AncientScope::class)->get();\n"
msgstr "User::withoutGlobalScope(AncientScope::class)->get();\n"

#: docs/8.x/eloquent.md:block 289 (paragraph)
msgid "Or, if you defined the global scope using a closure, you should pass the string name that you assigned to the global scope:"
msgstr "或者，若使用閉包定義全域 Scope，則可傳入自訂的字串名稱："

#: docs/8.x/eloquent.md:block 290 (code)
msgid "User::withoutGlobalScope('ancient')->get();\n"
msgstr "User::withoutGlobalScope('ancient')->get();\n"

#: docs/8.x/eloquent.md:block 291 (paragraph)
msgid "If you would like to remove several or even all of the query's global scopes, you may use the `withoutGlobalScopes` method:"
msgstr "若想移除多個或全部的查詢全域 Scope，可以使用 `withoutGlobalScopes` 方法："

#: docs/8.x/eloquent.md:block 292 (code)
msgid "// Remove all of the global scopes...\n"
"User::withoutGlobalScopes()->get();\n\n"
"// Remove some of the global scopes...\n"
"User::withoutGlobalScopes([\n"
"    FirstScope::class, SecondScope::class\n"
"])->get();\n"
msgstr "// 移除所有的全域 Scope...\n"
"User::withoutGlobalScopes()->get();\n\n"
"// 移除部分的全域 Scope...\n"
"User::withoutGlobalScopes([\n"
"    FirstScope::class, SecondScope::class\n"
"])->get();\n"

#: docs/8.x/eloquent.md:block 294 (header)
msgid "Local Scopes"
msgstr "區域 Scope"

#: docs/8.x/eloquent.md:block 295 (paragraph)
msgid "Local scopes allow you to define common sets of query constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`."
msgstr "使用區域 Scope，我們就可以定義一組通用的查詢條件，並可在專案內簡單地重複使用。舉例來說，我們可能會需要頻繁的找出所有「熱門」的使用者。若要定義 Scope，只需要定義一個有 `scope` 前置詞的 Eloquent Model 方法即可。"

#: docs/8.x/eloquent.md:block 296 (paragraph)
msgid "Scopes should always return the same query builder instance or `void`:"
msgstr "Scope 應回傳相同的 Query Builder 實體或 `void`："

#: docs/8.x/eloquent.md:block 297 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include popular users.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function scopePopular($query)\n"
"    {\n"
"        return $query->where('votes', '>', 100);\n"
"    }\n\n"
"    /**\n"
"     * Scope a query to only include active users.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return void\n"
"     */\n"
"    public function scopeActive($query)\n"
"    {\n"
"        $query->where('active', 1);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include popular users.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function scopePopular($query)\n"
"    {\n"
"        return $query->where('votes', '>', 100);\n"
"    }\n\n"
"    /**\n"
"     * Scope a query to only include active users.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return void\n"
"     */\n"
"    public function scopeActive($query)\n"
"    {\n"
"        $query->where('active', 1);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 299 (header)
msgid "Utilizing A Local Scope"
msgstr "使用區域 Scope"

#: docs/8.x/eloquent.md:block 300 (paragraph)
msgid "Once the scope has been defined, you may call the scope methods when querying the model. However, you should not include the `scope` prefix when calling the method. You can even chain calls to various scopes:"
msgstr "定義好 Scope 後，就可以在查詢 Model 時呼叫這個 Scope 方法。不過，在呼叫時不應包含 `scope` 前置詞。我們甚至還能串連呼叫多個 Scope："

#: docs/8.x/eloquent.md:block 301 (code)
msgid "use App\\Models\\User;\n\n"
"$users = User::popular()->active()->orderBy('created_at')->get();\n"
msgstr "use App\\Models\\User;\n\n"
"$users = User::popular()->active()->orderBy('created_at')->get();\n"

#: docs/8.x/eloquent.md:block 302 (paragraph)
msgid "Combining multiple Eloquent model scopes via an `or` query operator may require the use of closures to achieve the correct [logical grouping](/docs/{{version}}/queries#logical-grouping):"
msgstr "在使用 `or` 查詢運算子來組合多個 Eloquent Model Scope 時，可能會需要使用閉包來取得正確的[邏輯性分組](/docs/{{version}}/queries#logical-grouping)："

#: docs/8.x/eloquent.md:block 303 (code)
msgid "$users = User::popular()->orWhere(function (Builder $query) {\n"
"    $query->active();\n"
"})->get();\n"
msgstr "$users = User::popular()->orWhere(function (Builder $query) {\n"
"    $query->active();\n"
"})->get();\n"

#: docs/8.x/eloquent.md:block 304 (paragraph)
msgid "However, since this can be cumbersome, Laravel provides a \"higher order\" `orWhere` method that allows you to fluently chain scopes together without the use of closures:"
msgstr "不過，因為這麼做可能會很麻煩，因此 Laravel 提供了一個「高階的 (Higher Order)」`orWhere` 方法來讓我們能流暢地將各個 Scope 串連在一起，毋需使用閉包："

#: docs/8.x/eloquent.md:block 305 (code)
msgid "$users = App\\Models\\User::popular()->orWhere->active()->get();\n"
msgstr "$users = App\\Models\\User::popular()->orWhere->active()->get();\n"

#: docs/8.x/eloquent.md:block 307 (header)
msgid "Dynamic Scopes"
msgstr "動態 Scope"

#: docs/8.x/eloquent.md:block 308 (paragraph)
msgid "Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope method's signature. Scope parameters should be defined after the `$query` parameter:"
msgstr "有時候，我們可能會想定義一些接受參數的 Scope。要定義接受參數的 Scope，只需要在 Scope 方法的簽章上加上額外的參數即可。所有 Scope 地參數的應定義在 `$query` 引數後："

#: docs/8.x/eloquent.md:block 309 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include users of a given type.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @param  mixed  $type\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function scopeOfType($query, $type)\n"
"    {\n"
"        return $query->where('type', $type);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include users of a given type.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @param  mixed  $type\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function scopeOfType($query, $type)\n"
"    {\n"
"        return $query->where('type', $type);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 310 (paragraph)
msgid "Once the expected arguments have been added to your scope method's signature, you may pass the arguments when calling the scope:"
msgstr "將預期的引數加到 Scope 方法的簽章後，就可以在呼叫該 Scope 時傳入這些引數："

#: docs/8.x/eloquent.md:block 311 (code)
msgid "$users = User::ofType('admin')->get();\n"
msgstr "$users = User::ofType('admin')->get();\n"

#: docs/8.x/eloquent.md:block 313 (header)
msgid "Comparing Models"
msgstr "比較 Model"

#: docs/8.x/eloquent.md:block 314 (paragraph)
msgid "Sometimes you may need to determine if two models are the \"same\" or not. The `is` and `isNot` methods may be used to quickly verify two models have the same primary key, table, and database connection or not:"
msgstr "有時候，我們可能需要判斷某兩個 Model 是否是「相同」的。`is` 與 `isNot` 方法可用來快速檢驗兩個 Model 是否有相同的主索引鍵、相同的資料表、以及相同的資料庫連線："

#: docs/8.x/eloquent.md:block 315 (code)
msgid "if ($post->is($anotherPost)) {\n"
"    //\n"
"}\n\n"
"if ($post->isNot($anotherPost)) {\n"
"    //\n"
"}\n"
msgstr "if ($post->is($anotherPost)) {\n"
"    //\n"
"}\n\n"
"if ($post->isNot($anotherPost)) {\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 316 (paragraph)
msgid "The `is` and `isNot` methods are also available when using the `belongsTo`, `hasOne`, `morphTo`, and `morphOne` [relationships](/docs/{{version}}/eloquent-relationships). This method is particularly helpful when you would like to compare a related model without issuing a query to retrieve that model:"
msgstr "使用 `belongsTo`、`hasOne`、`morphTo`、`morphOne` 等[關聯](/docs/{{version}}/eloquent-relationships)時，也可使用 `is` 與 `isNot` 方法。這個方法特別適用於想在不實際執行查詢來取得 Model 的情況下比較關聯的 Model 時："

#: docs/8.x/eloquent.md:block 317 (code)
msgid "if ($post->author()->is($user)) {\n"
"    //\n"
"}\n"
msgstr "if ($post->author()->is($user)) {\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent.md:block 319 (header)
msgid "Events"
msgstr "事件"

#: docs/8.x/eloquent.md:block 320 (quote)
msgid "{tip} Want to broadcast your Eloquent events directly to your client-side application? Check out Laravel's [model event broadcasting](/docs/{{version}}/broadcasting#model-broadcasting)."
msgstr "{tip} 想要直接將 Eloquent 事件廣播給前端嗎？請參考一下 Laravel 的 [Model 事件廣播](/docs/{{version}}/broadcasting#model-broadcasting)。"

#: docs/8.x/eloquent.md:block 321 (paragraph)
msgid "Eloquent models dispatch several events, allowing you to hook into the following moments in a model's lifecycle: `retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `restoring`, `restored`, and `replicating`."
msgstr "Eloquent Model 會分派數種事件，能讓我們在 Model 生命週期中的下列時刻進行攔截 (Hook)：`retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `restoring`, `restored`, 與 `replicating`。"

#: docs/8.x/eloquent.md:block 322 (paragraph)
msgid "The `retrieved` event will dispatch when an existing model is retrieved from the database. When a new model is saved for the first time, the `creating` and `created` events will dispatch. The `updating` / `updated` events will dispatch when an existing model is modified and the `save` method is called. The `saving` / `saved` events will dispatch when a model is created or updated - even if the model's attributes have not been changed. Event names ending with `-ing` are dispatched before any changes to the model are persisted, while events ending with `-ed` are dispatched after the changes to the model are persisted."
msgstr "`retrieved` 事件會在現有 Model 從資料庫內取得後被分派。當新 Model 首次保存後，會分派 `creating` 與 `created` 事件。`updating` 與 `updated` 事件會在現有 Model 被修改並呼叫了 `save` 方法時被分派。`saving` 與 `saved` 事件會在 Model 被建立或更新後分派 —— 即使未對 Model 的屬性做任何更改。以 `-ing` 結尾的事件會在保存任何 Model 改動前被分派，而以 `-id` 結尾的事件則會在 Model 保存後被分派。"

#: docs/8.x/eloquent.md:block 323 (paragraph)
msgid "To start listening to model events, define a `$dispatchesEvents` property on your Eloquent model. This property maps various points of the Eloquent model's lifecycle to your own [event classes](/docs/{{version}}/events). Each model event class should expect to receive an instance of the affected model via its constructor:"
msgstr "若要開始監聽 Model 事件，請在 Eloquent Model 中定義一個 `$dispatchesEvents` 屬性。該屬性會將 Eloquent Model 生命週期中的數個時間點影射到你自己的[事件類別](/docs/{{version}}/events)上。每個 Model 事件類別應預期會在其建構函式 (Constructor) 中收到一個受影響 Model 的實體："

#: docs/8.x/eloquent.md:block 324 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Events\\UserDeleted;\n"
"use App\\Events\\UserSaved;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * The event map for the model.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dispatchesEvents = [\n"
"        'saved' => UserSaved::class,\n"
"        'deleted' => UserDeleted::class,\n"
"    ];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Events\\UserDeleted;\n"
"use App\\Events\\UserSaved;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * The event map for the model.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dispatchesEvents = [\n"
"        'saved' => UserSaved::class,\n"
"        'deleted' => UserDeleted::class,\n"
"    ];\n"
"}\n"

#: docs/8.x/eloquent.md:block 325 (paragraph)
msgid "After defining and mapping your Eloquent events, you may use [event listeners](/docs/{{version}}/events#defining-listeners) to handle the events."
msgstr "定義好 Eloquent 事件並設定好影射後，就可以使用[事件監聽程式](/docs/{{version}}/events#defining-listeners)來監聽事件。"

#: docs/8.x/eloquent.md:block 326 (quote)
msgid "{note} When issuing a mass update or delete query via Eloquent, the `saved`, `updated`, `deleting`, and `deleted` model events will not be dispatched for the affected models. This is because the models are never actually retrieved when performing mass updates or deletes."
msgstr "{note} 在使用 Eloquent 進行批次更新或批次刪除查詢時，將不會引發 `saving`、`saved`、`updating`、`updated` 等 Model 事件。這是因為，在批次更新或批次刪除時並不會實際取得這些 Model。"

#: docs/8.x/eloquent.md:block 328 (header)
msgid "Using Closures"
msgstr "使用閉包"

#: docs/8.x/eloquent.md:block 329 (paragraph)
msgid "Instead of using custom event classes, you may register closures that execute when various model events are dispatched. Typically, you should register these closures in the `booted` method of your model:"
msgstr "比起使用自訂的事件類別，我們也可以註冊一些會在 Model 事件分派時被執行的閉包。一般來說，應在 Model 的 `booted` 方法內定義這些閉包："

#: docs/8.x/eloquent.md:block 330 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::created(function ($user) {\n"
"            //\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::created(function ($user) {\n"
"            //\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 331 (paragraph)
msgid "If needed, you may utilize [queueable anonymous event listeners](/docs/{{version}}/events#queuable-anonymous-event-listeners) when registering model events. This will instruct Laravel to execute the model event listener in the background using your application's [queue](/docs/{{version}}/queues):"
msgstr "若有需要，也可以在註冊 Model 事件時使用[可佇列的匿名事件監聽程式](/docs/{{version}}/events#queuable-anonymous-event-listeners)。這樣可以讓 Laravel 使用專案的[佇列](/docs/{{version}}/queues)來在背景執行 Model 事件監聽程式："

#: docs/8.x/eloquent.md:block 332 (code)
msgid "use function Illuminate\\Events\\queueable;\n\n"
"static::created(queueable(function ($user) {\n"
"    //\n"
"}));\n"
msgstr "use function Illuminate\\Events\\queueable;\n\n"
"static::created(queueable(function ($user) {\n"
"    //\n"
"}));\n"

#: docs/8.x/eloquent.md:block 334 (header)
msgid "Observers"
msgstr "觀察程式 - Observer"

#: docs/8.x/eloquent.md:block 336 (header)
msgid "Defining Observers"
msgstr "定義 Observer"

#: docs/8.x/eloquent.md:block 337 (paragraph)
msgid "If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observer classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the affected model as their only argument. The `make:observer` Artisan command is the easiest way to create a new observer class:"
msgstr "若想在某個 Model 上監聽許多的事件，則可以使用 Observer 來把所有的監聽程式都放到單一類別內。Observer 類別內的方法名稱應對應欲監聽的 Eloquent 事件。這些方法都會收到受影響的 Model 作為其唯一引數。要建立新 Observer 最簡單的方法就是使用 `make:observer` Artisan 指令："

#: docs/8.x/eloquent.md:block 338 (code)
msgid "php artisan make:observer UserObserver --model=User\n"
msgstr "php artisan make:observer UserObserver --model=User\n"

#: docs/8.x/eloquent.md:block 339 (paragraph)
msgid "This command will place the new observer in your `App/Observers` directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:"
msgstr "這個指令會將新的 Observer 放在 `App/Observers` 目錄中。若這個目錄不存在，則 Artisan 會自動建立。剛建立好的 Observer 會長這樣："

#: docs/8.x/eloquent.md:block 340 (code)
msgid "<?php\n\n"
"namespace App\\Observers;\n\n"
"use App\\Models\\User;\n\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function updated(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function deleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function forceDeleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Observers;\n\n"
"use App\\Models\\User;\n\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function updated(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function deleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function forceDeleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 341 (paragraph)
msgid "To register an observer, you need to call the `observe` method on the model you wish to observe. You may register observers in the `boot` method of your application's `App\\Providers\\EventServiceProvider` service provider:"
msgstr "若要註冊 Observer，則需要在要觀察 (Observe) 的 Model 上呼叫 `observe` 方法。可以在專案的 `App\\Providers\\EventServiceProvider` Service Provider 中的 `boot` 方法內註冊這些 Observer。"

#: docs/8.x/eloquent.md:block 342 (code)
msgid "use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n\n"
"/**\n"
" * Register any events for your application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    User::observe(UserObserver::class);\n"
"}\n"
msgstr "use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n\n"
"/**\n"
" * Register any events for your application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    User::observe(UserObserver::class);\n"
"}\n"

#: docs/8.x/eloquent.md:block 343 (quote)
msgid "{tip} There are additional events an observer can listen to, such as `saving` and `retrieved`. These events are described within the [events](#events) documentation."
msgstr "{tip} Observer 還能監聽一些額外的事件，如 `saving` 與 `retrieved`。這些事件都在[事件](#events)一節內討論過。"

#: docs/8.x/eloquent.md:block 345 (header)
msgid "Observers & Database Transactions"
msgstr "Observer 與資料庫 Transaction"

#: docs/8.x/eloquent.md:block 346 (paragraph)
msgid "When models are being created within a database transaction, you may want to instruct an observer to only execute its event handlers after the database transaction is committed. You may accomplish this by defining an `$afterCommit` property on the observer. If a database transaction is not in progress, the event handlers will execute immediately:"
msgstr "若 Model 是在資料庫 Transaction 內建立的，則我們可能會想讓 Observer 只在資料庫 Transaction 被 Commit 後才執行其事件處理常式。為此，可以在 Observer 上定義一個 `$afterCommit` 屬性。若沒有在執行資料庫 Transaction，則事件監聽常式會立即執行："

#: docs/8.x/eloquent.md:block 347 (code)
msgid "<?php\n\n"
"namespace App\\Observers;\n\n"
"use App\\Models\\User;\n\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle events after all transactions are committed.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $afterCommit = true;\n\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Observers;\n\n"
"use App\\Models\\User;\n\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle events after all transactions are committed.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $afterCommit = true;\n\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent.md:block 349 (header)
msgid "Muting Events"
msgstr "靜音事件"

#: docs/8.x/eloquent.md:block 350 (paragraph)
msgid "You may occasionally need to temporarily \"mute\" all events fired by a model. You may achieve this using the `withoutEvents` method. The `withoutEvents` method accepts a closure as its only argument. Any code executed within this closure will not dispatch model events, and any value returned by the closure will be returned by the `withoutEvents` method:"
msgstr "有時候，我們可能會想暫時「靜音」某個 Model 所觸發的所有事件。我們可以使用 `withoutEvents` 方法來達成。`withoutEvents` 方法接受一個閉包作為其單一引數。在這個閉包內執行的任何程式碼都不會派發出 Model 事件，而任何由該閉包回傳的值都會被 `withoutEvents` 方法回傳："

#: docs/8.x/eloquent.md:block 351 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::withoutEvents(function () use () {\n"
"    User::findOrFail(1)->delete();\n\n"
"    return User::find(2);\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::withoutEvents(function () use () {\n"
"    User::findOrFail(1)->delete();\n\n"
"    return User::find(2);\n"
"});\n"

#: docs/8.x/eloquent.md:block 353 (header)
msgid "Saving A Single Model Without Events"
msgstr "在不觸發事件的情況下保存單一 Model"

#: docs/8.x/eloquent.md:block 354 (paragraph)
msgid "Sometimes you may wish to \"save\" a given model without dispatching any events. You may accomplish this using the `saveQuietly` method:"
msgstr "有時候，我們可能會想在不分派任何事件的情況下「保存」某個 Model。我們可以使用 `saveQuietly` 方法來達成："

#: docs/8.x/eloquent.md:block 355 (code)
msgid "$user = User::findOrFail(1);\n\n"
"$user->name = 'Victoria Faith';\n\n"
"$user->saveQuietly();\n"
msgstr "$user = User::findOrFail(1);\n\n"
"$user->name = 'Victoria Faith';\n\n"
"$user->saveQuietly();\n"

#: docs/9.x/eloquent.md:block 2 (unordered list)
msgid "[Chunk Using Lazy Collections](#chunking-using-lazy-collections)"
msgstr "[使用 Lazy Collection 來將查詢結果分段](#chunking-using-lazy-collections)"

#: docs/9.x/eloquent.md:block 83 (header)
msgid "Chunking Using Lazy Collections"
msgstr "使用 Lazy Collection 來將查詢結果分段"

#: docs/9.x/eloquent.md:block 93 (quote)
msgid "{note} Since the `cursor` method only ever holds a single Eloquent model in memory at a time, it cannot eager load relationships. If you need to eager load relationships, consider using [the `lazy` method](#chunking-using-lazy-collections) instead."
msgstr "{note} 由於 `cursor` 方法一次只會將一個 Eloquent Model 放在記憶體內，因此我們沒有辦法對關聯做積極式載入。若想積極式載入關聯，請考慮使用 [`lazy` 方法](#chunking-using-lazy-collections) 代替。"

#: docs/9.x/eloquent.md:block 98 (paragraph)
msgid "Although the `cursor` method uses far less memory than a regular query (by only holding a single Eloquent model in memory at a time), it will still eventually run out of memory. This is [due to PHP's PDO driver internally caching all raw query results in its buffer](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php). If you're dealing with a very large number of Eloquent records, consider using [the `lazy` method](#chunking-using-lazy-collections) instead."
msgstr "雖然 `cursor` 方法比起一般查詢使用較少記憶體 (因為記憶體內一次只會有一筆 Eloquent Model)，但最終還是由可能會記憶體不足。這是[因為 PHP 的 PDO Driver 會自動在內部將所有的查詢結果都快取在其緩衝區 (Buffer) 上](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php)。所以，若要處理非常大量的 Eloquent 紀錄，請考慮使用 [`lazy` 方法]#chunking-using-lazy-collections)替代。"

#: docs/9.x/eloquent.md:block 154 (paragraph)
msgid "The `isDirty` method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name or an array of attributes to the `isDirty` method to determine if any of the attributes are \"dirty\". The `isClean` method will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"
msgstr "`isDirty` 方法判斷自取得 Model 以來，Model 中是否有任何的屬性經過修改。可以傳入一個屬性名稱或是一組屬性陣列給 `isDirty` 方法來判斷這些屬性是否有被更改 (Dirty)。`isClean` 方法則用來判斷某個屬性是否從取得 Model 以來都沒有被更改過。這個方法同樣也接受一個可選的屬性引數："

#: docs/9.x/eloquent.md:block 155 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->isDirty(); // true\n"
"$user->isDirty('title'); // true\n"
"$user->isDirty('first_name'); // false\n"
"$user->isDirty(['first_name', 'title']); // true\n\n"
"$user->isClean(); // false\n"
"$user->isClean('title'); // false\n"
"$user->isClean('first_name'); // true\n"
"$user->isClean(['first_name', 'title']); // false\n\n"
"$user->save();\n\n"
"$user->isDirty(); // false\n"
"$user->isClean(); // true\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->isDirty(); // true\n"
"$user->isDirty('title'); // true\n"
"$user->isDirty('first_name'); // false\n"
"$user->isDirty(['first_name', 'title']); // true\n\n"
"$user->isClean(); // false\n"
"$user->isClean('title'); // false\n"
"$user->isClean('first_name'); // true\n"
"$user->isClean(['first_name', 'title']); // false\n\n"
"$user->save();\n\n"
"$user->isDirty(); // false\n"
"$user->isClean(); // true\n"

#: docs/9.x/eloquent.md:block 157 (code)
msgid "$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->save();\n\n"
"$user->wasChanged(); // true\n"
"$user->wasChanged('title'); // true\n"
"$user->wasChanged(['title', 'slug']); // true\n"
"$user->wasChanged('first_name'); // false\n"
"$user->wasChanged(['first_name', 'title']); // true\n"
msgstr "$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n\n"
"$user->title = 'Painter';\n\n"
"$user->save();\n\n"
"$user->wasChanged(); // true\n"
"$user->wasChanged('title'); // true\n"
"$user->wasChanged(['title', 'slug']); // true\n"
"$user->wasChanged('first_name'); // false\n"
"$user->wasChanged(['first_name', 'title']); // true\n"

#: docs/9.x/eloquent.md:block 187 (quote)
msgid "{note} All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MySQL database driver ignores the second argument of the `upsert` method and always uses the \"primary\" and \"unique\" indexes of the table to detect existing records."
msgstr "{note} 除了 SQL Server 以外，所有的資料庫都要求 `upsert` 方法第二個引數中的欄位必須有「Primary」或「Unique」索引。此外，MySQL 資料庫 Driver 會忽略 `upsert` 方法的第二個引數，該 Driver 只會使用該資料表的「Primary」與「Unique」索引來判斷現有的記錄。"

#: docs/9.x/eloquent.md:block 322 (paragraph)
msgid "Eloquent models dispatch several events, allowing you to hook into the following moments in a model's lifecycle: `retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `trashed`, `forceDeleted`, `restoring`, `restored`, and `replicating`."
msgstr "Eloquent Model 會分派數種事件，能讓我們在 Model 生命週期中的下列時刻進行攔截 (Hook)：`retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `trashed`, `forceDeleted`, `restoring`, `restored`, 與 `replicating`。"

#: docs/9.x/eloquent.md:block 341 (code)
msgid "<?php\n\n"
"namespace App\\Observers;\n\n"
"use App\\Models\\User;\n\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function updated(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function deleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"    \n"
"    /**\n"
"     * Handle the User \"restored\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function restored(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function forceDeleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Observers;\n\n"
"use App\\Models\\User;\n\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function updated(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function deleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"    \n"
"    /**\n"
"     * Handle the User \"restored\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function restored(User $user)\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function forceDeleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"

#: docs/9.x/eloquent.md:block 344 (paragraph)
msgid "Alternatively, you may list your observers within an `$observers` property of your applications' `App\\Providers\\EventServiceProvider` class:"
msgstr "或者，我們也可以在專案的 `App\\Providers\\EventServiceProvider` 類別內的 `$observers` 屬性內列出所有 Observer："

#: docs/9.x/eloquent.md:block 345 (code)
msgid "use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n\n"
"/**\n"
" * The model observers for your application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $observers = [\n"
"    User::class => [UserObserver::class],\n"
"];\n"
msgstr "use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n\n"
"/**\n"
" * The model observers for your application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $observers = [\n"
"    User::class => [UserObserver::class],\n"
"];\n"

