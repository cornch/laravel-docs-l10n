#
msgid ""
msgstr ""

#: docs/10.x/validation.md:block 1 (header)
msgid "Validation"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validation Quickstart](#validation-quickstart)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Defining The Routes](#quick-defining-the-routes)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Creating The Controller](#quick-creating-the-controller)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Writing The Validation Logic](#quick-writing-the-validation-logic)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Displaying The Validation Errors](#quick-displaying-the-validation-errors)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Repopulating Forms](#repopulating-forms)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[A Note On Optional Fields](#a-note-on-optional-fields)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validation Error Response Format](#validation-error-response-format)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Form Request Validation](#form-request-validation)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Creating Form Requests](#creating-form-requests)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Authorizing Form Requests](#authorizing-form-requests)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Customizing The Error Messages](#customizing-the-error-messages)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Preparing Input For Validation](#preparing-input-for-validation)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Manually Creating Validators](#manually-creating-validators)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Automatic Redirection](#automatic-redirection)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Named Error Bags](#named-error-bags)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Customizing The Error Messages](#manual-customizing-the-error-messages)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Performing Additional Validation](#performing-additional-validation)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Working With Validated Input](#working-with-validated-input)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Working With Error Messages](#working-with-error-messages)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Specifying Custom Messages In Language Files](#specifying-custom-messages-in-language-files)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Specifying Attributes In Language Files](#specifying-attribute-in-language-files)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Specifying Values In Language Files](#specifying-values-in-language-files)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Available Validation Rules](#available-validation-rules)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Conditionally Adding Rules](#conditionally-adding-rules)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Arrays](#validating-arrays)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Nested Array Input](#validating-nested-array-input)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Error Message Indexes & Positions](#error-message-indexes-and-positions)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Files](#validating-files)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Passwords](#validating-passwords)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Custom Validation Rules](#custom-validation-rules)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Using Rule Objects](#using-rule-objects)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Using Closures](#using-closures)"
msgstr ""

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Implicit Rules](#implicit-rules)"
msgstr ""

#: docs/10.x/validation.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/validation.md:block 5 (paragraph)
msgid "Laravel provides several different approaches to validate your application's incoming data. It is most common to use the `validate` method available on all incoming HTTP requests. However, we will discuss other approaches to validation as well."
msgstr ""

#: docs/10.x/validation.md:block 6 (paragraph)
msgid "Laravel includes a wide variety of convenient validation rules that you may apply to data, even providing the ability to validate if values are unique in a given database table. We'll cover each of these validation rules in detail so that you are familiar with all of Laravel's validation features."
msgstr ""

#: docs/10.x/validation.md:block 8 (header)
msgid "Validation Quickstart"
msgstr ""

#: docs/10.x/validation.md:block 9 (paragraph)
msgid "To learn about Laravel's powerful validation features, let's look at a complete example of validating a form and displaying the error messages back to the user. By reading this high-level overview, you'll be able to gain a good general understanding of how to validate incoming request data using Laravel:"
msgstr ""

#: docs/10.x/validation.md:block 11 (header)
msgid "Defining The Routes"
msgstr ""

#: docs/10.x/validation.md:block 12 (paragraph)
msgid "First, let's assume we have the following routes defined in our `routes/web.php` file:"
msgstr ""

#: docs/10.x/validation.md:block 13 (code)
msgid ""
"use App\\Http\\Controllers\\PostController;\n"
"\n"
"Route::get('/post/create', [PostController::class, 'create']);\n"
"Route::post('/post', [PostController::class, 'store']);\n"
msgstr ""

#: docs/10.x/validation.md:block 14 (paragraph)
msgid "The `GET` route will display a form for the user to create a new blog post, while the `POST` route will store the new blog post in the database."
msgstr ""

#: docs/10.x/validation.md:block 16 (header)
msgid "Creating The Controller"
msgstr ""

#: docs/10.x/validation.md:block 17 (paragraph)
msgid "Next, let's take a look at a simple controller that handles incoming requests to these routes. We'll leave the `store` method empty for now:"
msgstr ""

#: docs/10.x/validation.md:block 18 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     */\n"
"    public function create(): View\n"
"    {\n"
"        return view('post.create');\n"
"    }\n"
"\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        // Validate and store the blog post...\n"
"\n"
"        $post = /** ... */\n"
"\n"
"        return to_route('post.show', ['post' => $post->id]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 20 (header)
msgid "Writing The Validation Logic"
msgstr ""

#: docs/10.x/validation.md:block 21 (paragraph)
msgid "Now we are ready to fill in our `store` method with the logic to validate the new blog post. To do this, we will use the `validate` method provided by the `Illuminate\\Http\\Request` object. If the validation rules pass, your code will keep executing normally; however, if validation fails, an `Illuminate\\Validation\\ValidationException` exception will be thrown and the proper error response will automatically be sent back to the user."
msgstr ""

#: docs/10.x/validation.md:block 22 (paragraph)
msgid "If validation fails during a traditional HTTP request, a redirect response to the previous URL will be generated. If the incoming request is an XHR request, a [JSON response containing the validation error messages](#validation-error-response-format) will be returned."
msgstr ""

#: docs/10.x/validation.md:block 23 (paragraph)
msgid "To get a better understanding of the `validate` method, let's jump back into the `store` method:"
msgstr ""

#: docs/10.x/validation.md:block 24 (code)
msgid ""
"/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(Request $request): RedirectResponse\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n"
"\n"
"    // The blog post is valid...\n"
"\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 25 (paragraph)
msgid "As you can see, the validation rules are passed into the `validate` method. Don't worry - all available validation rules are [documented](#available-validation-rules). Again, if the validation fails, the proper response will automatically be generated. If the validation passes, our controller will continue executing normally."
msgstr ""

#: docs/10.x/validation.md:block 26 (paragraph)
msgid "Alternatively, validation rules may be specified as arrays of rules instead of a single `|` delimited string:"
msgstr ""

#: docs/10.x/validation.md:block 27 (code)
msgid ""
"$validatedData = $request->validate([\n"
"    'title' => ['required', 'unique:posts', 'max:255'],\n"
"    'body' => ['required'],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 28 (paragraph)
msgid "In addition, you may use the `validateWithBag` method to validate a request and store any error messages within a [named error bag](#named-error-bags):"
msgstr ""

#: docs/10.x/validation.md:block 29 (code)
msgid ""
"$validatedData = $request->validateWithBag('post', [\n"
"    'title' => ['required', 'unique:posts', 'max:255'],\n"
"    'body' => ['required'],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 31 (header)
msgid "Stopping On First Validation Failure"
msgstr ""

#: docs/10.x/validation.md:block 32 (paragraph)
msgid "Sometimes you may wish to stop running validation rules on an attribute after the first validation failure. To do so, assign the `bail` rule to the attribute:"
msgstr ""

#: docs/10.x/validation.md:block 33 (code)
msgid ""
"$request->validate([\n"
"    'title' => 'bail|required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 34 (paragraph)
msgid "In this example, if the `unique` rule on the `title` attribute fails, the `max` rule will not be checked. Rules will be validated in the order they are assigned."
msgstr ""

#: docs/10.x/validation.md:block 36 (header)
msgid "A Note On Nested Attributes"
msgstr ""

#: docs/10.x/validation.md:block 37 (paragraph)
msgid "If the incoming HTTP request contains \"nested\" field data, you may specify these fields in your validation rules using \"dot\" syntax:"
msgstr ""

#: docs/10.x/validation.md:block 38 (code)
msgid ""
"$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'author.name' => 'required',\n"
"    'author.description' => 'required',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 39 (paragraph)
msgid "On the other hand, if your field name contains a literal period, you can explicitly prevent this from being interpreted as \"dot\" syntax by escaping the period with a backslash:"
msgstr ""

#: docs/10.x/validation.md:block 40 (code)
msgid ""
"$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'v1\\.0' => 'required',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 42 (header)
msgid "Displaying The Validation Errors"
msgstr ""

#: docs/10.x/validation.md:block 43 (paragraph)
msgid "So, what if the incoming request fields do not pass the given validation rules? As mentioned previously, Laravel will automatically redirect the user back to their previous location. In addition, all of the validation errors and [request input](/docs/{{version}}/requests#retrieving-old-input) will automatically be [flashed to the session](/docs/{{version}}/session#flash-data)."
msgstr ""

#: docs/10.x/validation.md:block 44 (paragraph)
msgid "An `$errors` variable is shared with all of your application's views by the `Illuminate\\View\\Middleware\\ShareErrorsFromSession` middleware, which is provided by the `web` middleware group. When this middleware is applied an `$errors` variable will always be available in your views, allowing you to conveniently assume the `$errors` variable is always defined and can be safely used. The `$errors` variable will be an instance of `Illuminate\\Support\\MessageBag`. For more information on working with this object, [check out its documentation](#working-with-error-messages)."
msgstr ""

#: docs/10.x/validation.md:block 45 (paragraph)
msgid "So, in our example, the user will be redirected to our controller's `create` method when validation fails, allowing us to display the error messages in the view:"
msgstr ""

#: docs/10.x/validation.md:block 46 (code)
msgid ""
"<!-- /resources/views/post/create.blade.php -->\n"
"\n"
"<h1>Create Post</h1>\n"
"\n"
"@if ($errors->any())\n"
"    <div class=\"alert alert-danger\">\n"
"        <ul>\n"
"            @foreach ($errors->all() as $error)\n"
"                <li>{{ $error }}</li>\n"
"            @endforeach\n"
"        </ul>\n"
"    </div>\n"
"@endif\n"
"\n"
"<!-- Create Post Form -->\n"
msgstr ""

#: docs/10.x/validation.md:block 48 (header)
msgid "Customizing The Error Messages"
msgstr ""

#: docs/10.x/validation.md:block 49 (paragraph)
msgid "Laravel's built-in validation rules each have an error message that is located in your application's `lang/en/validation.php` file. If your application does not have a `lang` directory, you may instruct Laravel to create it using the `lang:publish` Artisan command."
msgstr ""

#: docs/10.x/validation.md:block 50 (paragraph)
msgid "Within the `lang/en/validation.php` file, you will find a translation entry for each validation rule. You are free to change or modify these messages based on the needs of your application."
msgstr ""

#: docs/10.x/validation.md:block 51 (paragraph)
msgid "In addition, you may copy this file to another language directory to translate the messages for your application's language. To learn more about Laravel localization, check out the complete [localization documentation](/docs/{{version}}/localization)."
msgstr ""

#: docs/10.x/validation.md:block 52 (quote)
msgid "**Warning** By default, the Laravel application skeleton does not include the `lang` directory. If you would like to customize Laravel's language files, you may publish them via the `lang:publish` Artisan command."
msgstr ""

#: docs/10.x/validation.md:block 54 (header)
msgid "XHR Requests & Validation"
msgstr ""

#: docs/10.x/validation.md:block 55 (paragraph)
msgid "In this example, we used a traditional form to send data to the application. However, many applications receive XHR requests from a JavaScript powered frontend. When using the `validate` method during an XHR request, Laravel will not generate a redirect response. Instead, Laravel generates a [JSON response containing all of the validation errors](#validation-error-response-format). This JSON response will be sent with a 422 HTTP status code."
msgstr ""

#: docs/10.x/validation.md:block 57 (header)
msgid "The `@error` Directive"
msgstr ""

#: docs/10.x/validation.md:block 58 (paragraph)
msgid "You may use the `@error` [Blade](/docs/{{version}}/blade) directive to quickly determine if validation error messages exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr ""

#: docs/10.x/validation.md:block 59 (code)
msgid ""
"<!-- /resources/views/post/create.blade.php -->\n"
"\n"
"<label for=\"title\">Post Title</label>\n"
"\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    name=\"title\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n"
"\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#: docs/10.x/validation.md:block 60 (paragraph)
msgid "If you are using [named error bags](#named-error-bags), you may pass the name of the error bag as the second argument to the `@error` directive:"
msgstr ""

#: docs/10.x/validation.md:block 61 (code)
msgid "<input ... class=\"@error('title', 'post') is-invalid @enderror\">\n"
msgstr ""

#: docs/10.x/validation.md:block 63 (header)
msgid "Repopulating Forms"
msgstr ""

#: docs/10.x/validation.md:block 64 (paragraph)
msgid "When Laravel generates a redirect response due to a validation error, the framework will automatically [flash all of the request's input to the session](/docs/{{version}}/session#flash-data). This is done so that you may conveniently access the input during the next request and repopulate the form that the user attempted to submit."
msgstr ""

#: docs/10.x/validation.md:block 65 (paragraph)
msgid "To retrieve flashed input from the previous request, invoke the `old` method on an instance of `Illuminate\\Http\\Request`. The `old` method will pull the previously flashed input data from the [session](/docs/{{version}}/session):"
msgstr ""

#: docs/10.x/validation.md:block 66 (code)
msgid "$title = $request->old('title');\n"
msgstr ""

#: docs/10.x/validation.md:block 67 (paragraph)
msgid "Laravel also provides a global `old` helper. If you are displaying old input within a [Blade template](/docs/{{version}}/blade), it is more convenient to use the `old` helper to repopulate the form. If no old input exists for the given field, `null` will be returned:"
msgstr ""

#: docs/10.x/validation.md:block 68 (code)
msgid "<input type=\"text\" name=\"title\" value=\"{{ old('title') }}\">\n"
msgstr ""

#: docs/10.x/validation.md:block 70 (header)
msgid "A Note On Optional Fields"
msgstr ""

#: docs/10.x/validation.md:block 71 (paragraph)
msgid "By default, Laravel includes the `TrimStrings` and `ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware are listed in the stack by the `App\\Http\\Kernel` class. Because of this, you will often need to mark your \"optional\" request fields as `nullable` if you do not want the validator to consider `null` values as invalid. For example:"
msgstr ""

#: docs/10.x/validation.md:block 72 (code)
msgid ""
"$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"    'publish_at' => 'nullable|date',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 73 (paragraph)
msgid "In this example, we are specifying that the `publish_at` field may be either `null` or a valid date representation. If the `nullable` modifier is not added to the rule definition, the validator would consider `null` an invalid date."
msgstr ""

#: docs/10.x/validation.md:block 75 (header)
msgid "Validation Error Response Format"
msgstr ""

#: docs/10.x/validation.md:block 76 (paragraph)
msgid "When your application throws a `Illuminate\\Validation\\ValidationException` exception and the incoming HTTP request is expecting a JSON response, Laravel will automatically format the error messages for you and return a `422 Unprocessable Entity` HTTP response."
msgstr ""

#: docs/10.x/validation.md:block 77 (paragraph)
msgid "Below, you can review an example of the JSON response format for validation errors. Note that nested error keys are flattened into \"dot\" notation format:"
msgstr ""

#: docs/10.x/validation.md:block 78 (code)
msgid ""
"{\n"
"    \"message\": \"The team name must be a string. (and 4 more errors)\",\n"
"    \"errors\": {\n"
"        \"team_name\": [\n"
"            \"The team name must be a string.\",\n"
"            \"The team name must be at least 1 characters.\"\n"
"        ],\n"
"        \"authorization.role\": [\n"
"            \"The selected authorization.role is invalid.\"\n"
"        ],\n"
"        \"users.0.email\": [\n"
"            \"The users.0.email field is required.\"\n"
"        ],\n"
"        \"users.2.email\": [\n"
"            \"The users.2.email must be a valid email address.\"\n"
"        ]\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 80 (header)
msgid "Form Request Validation"
msgstr ""

#: docs/10.x/validation.md:block 82 (header)
msgid "Creating Form Requests"
msgstr ""

#: docs/10.x/validation.md:block 83 (paragraph)
msgid "For more complex validation scenarios, you may wish to create a \"form request\". Form requests are custom request classes that encapsulate their own validation and authorization logic. To create a form request class, you may use the `make:request` Artisan CLI command:"
msgstr ""

#: docs/10.x/validation.md:block 84 (code)
msgid "php artisan make:request StorePostRequest\n"
msgstr ""

#: docs/10.x/validation.md:block 85 (paragraph)
msgid "The generated form request class will be placed in the `app/Http/Requests` directory. If this directory does not exist, it will be created when you run the `make:request` command. Each form request generated by Laravel has two methods: `authorize` and `rules`."
msgstr ""

#: docs/10.x/validation.md:block 86 (paragraph)
msgid "As you might have guessed, the `authorize` method is responsible for determining if the currently authenticated user can perform the action represented by the request, while the `rules` method returns the validation rules that should apply to the request's data:"
msgstr ""

#: docs/10.x/validation.md:block 87 (code)
msgid ""
"/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array<string, \\Illuminate\\Contracts\\Validation\\Rule|array|string>\n"
" */\n"
"public function rules(): array\n"
"{\n"
"    return [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 88 (quote)
msgid "**Note** You may type-hint any dependencies you require within the `rules` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/10.x/validation.md:block 89 (paragraph)
msgid "So, how are the validation rules evaluated? All you need to do is type-hint the request on your controller method. The incoming form request is validated before the controller method is called, meaning you do not need to clutter your controller with any validation logic:"
msgstr ""

#: docs/10.x/validation.md:block 90 (code)
msgid ""
"/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(StorePostRequest $request): RedirectResponse\n"
"{\n"
"    // The incoming request is valid...\n"
"\n"
"    // Retrieve the validated input data...\n"
"    $validated = $request->validated();\n"
"\n"
"    // Retrieve a portion of the validated input data...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n"
"\n"
"    // Store the blog post...\n"
"\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 91 (paragraph)
msgid "If validation fails, a redirect response will be generated to send the user back to their previous location. The errors will also be flashed to the session so they are available for display. If the request was an XHR request, an HTTP response with a 422 status code will be returned to the user including a [JSON representation of the validation errors](#validation-error-response-format)."
msgstr ""

#: docs/10.x/validation.md:block 92 (quote)
msgid "**Note** Need to add real-time form request validation to your Inertia powered Laravel frontend? Check out [Laravel Precognition](/docs/{{version}}/precognition)."
msgstr ""

#: docs/10.x/validation.md:block 94 (header)
msgid "Performing Additional Validation"
msgstr ""

#: docs/10.x/validation.md:block 95 (paragraph)
msgid "Sometimes you need to perform additional validation after your initial validation is complete. You can accomplish this using the form request's `after` method."
msgstr ""

#: docs/10.x/validation.md:block 96 (paragraph)
msgid "The `after` method should return an array of callables or closures which will be invoked after validation is complete. The given callables will receive an `Illuminate\\Validation\\Validator` instance, allowing you to raise additional error messages if necessary:"
msgstr ""

#: docs/10.x/validation.md:block 97 (code)
msgid ""
"use Illuminate\\Validation\\Validator;\n"
"\n"
"/**\n"
" * Get the \"after\" validation callables for the request.\n"
" */\n"
"public function after(): array\n"
"{\n"
"    return [\n"
"        function (Validator $validator) {\n"
"            if ($this->somethingElseIsInvalid()) {\n"
"                $validator->errors()->add(\n"
"                    'field',\n"
"                    'Something is wrong with this field!'\n"
"                );\n"
"            }\n"
"        }\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 98 (paragraph)
msgid "As noted, the array returned by the `after` method may also contain invokable classes. The `__invoke` method of these classes will receive an `Illuminate\\Validation\\Validator` instance:"
msgstr ""

#: docs/10.x/validation.md:block 99 (code)
msgid ""
"use App\\Validation\\ValidateShippingTime;\n"
"use App\\Validation\\ValidateUserStatus;\n"
"use Illuminate\\Validation\\Validator;\n"
"\n"
"/**\n"
" * Get the \"after\" validation callables for the request.\n"
" */\n"
"public function after(): array\n"
"{\n"
"    return [\n"
"        new ValidateUserStatus,\n"
"        new ValidateShippingTime,\n"
"        function (Validator $validator) {\n"
"            //\n"
"        }\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 101 (header)
msgid "Stopping On The First Validation Failure"
msgstr ""

#: docs/10.x/validation.md:block 102 (paragraph)
msgid "By adding a `stopOnFirstFailure` property to your request class, you may inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr ""

#: docs/10.x/validation.md:block 103 (code)
msgid ""
"/**\n"
" * Indicates if the validator should stop on the first rule failure.\n"
" *\n"
" * @var bool\n"
" */\n"
"protected $stopOnFirstFailure = true;\n"
msgstr ""

#: docs/10.x/validation.md:block 105 (header)
msgid "Customizing The Redirect Location"
msgstr ""

#: docs/10.x/validation.md:block 106 (paragraph)
msgid "As previously discussed, a redirect response will be generated to send the user back to their previous location when form request validation fails. However, you are free to customize this behavior. To do so, define a `$redirect` property on your form request:"
msgstr ""

#: docs/10.x/validation.md:block 107 (code)
msgid ""
"/**\n"
" * The URI that users should be redirected to if validation fails.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $redirect = '/dashboard';\n"
msgstr ""

#: docs/10.x/validation.md:block 108 (paragraph)
msgid "Or, if you would like to redirect users to a named route, you may define a `$redirectRoute` property instead:"
msgstr ""

#: docs/10.x/validation.md:block 109 (code)
msgid ""
"/**\n"
" * The route that users should be redirected to if validation fails.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $redirectRoute = 'dashboard';\n"
msgstr ""

#: docs/10.x/validation.md:block 111 (header)
msgid "Authorizing Form Requests"
msgstr ""

#: docs/10.x/validation.md:block 112 (paragraph)
msgid "The form request class also contains an `authorize` method. Within this method, you may determine if the authenticated user actually has the authority to update a given resource. For example, you may determine if a user actually owns a blog comment they are attempting to update. Most likely, you will interact with your [authorization gates and policies](/docs/{{version}}/authorization) within this method:"
msgstr ""

#: docs/10.x/validation.md:block 113 (code)
msgid ""
"use App\\Models\\Comment;\n"
"\n"
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" */\n"
"public function authorize(): bool\n"
"{\n"
"    $comment = Comment::find($this->route('comment'));\n"
"\n"
"    return $comment && $this->user()->can('update', $comment);\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 114 (paragraph)
msgid "Since all form requests extend the base Laravel request class, we may use the `user` method to access the currently authenticated user. Also, note the call to the `route` method in the example above. This method grants you access to the URI parameters defined on the route being called, such as the `{comment}` parameter in the example below:"
msgstr ""

#: docs/10.x/validation.md:block 115 (code)
msgid "Route::post('/comment/{comment}');\n"
msgstr ""

#: docs/10.x/validation.md:block 116 (paragraph)
msgid "Therefore, if your application is taking advantage of [route model binding](/docs/{{version}}/routing#route-model-binding), your code may be made even more succinct by accessing the resolved model as a property of the request:"
msgstr ""

#: docs/10.x/validation.md:block 117 (code)
msgid "return $this->user()->can('update', $this->comment);\n"
msgstr ""

#: docs/10.x/validation.md:block 118 (paragraph)
msgid "If the `authorize` method returns `false`, an HTTP response with a 403 status code will automatically be returned and your controller method will not execute."
msgstr ""

#: docs/10.x/validation.md:block 119 (paragraph)
msgid "If you plan to handle authorization logic for the request in another part of your application, you may simply return `true` from the `authorize` method:"
msgstr ""

#: docs/10.x/validation.md:block 120 (code)
msgid ""
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" */\n"
"public function authorize(): bool\n"
"{\n"
"    return true;\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 121 (quote)
msgid "**Note** You may type-hint any dependencies you need within the `authorize` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/10.x/validation.md:block 124 (paragraph)
msgid "You may customize the error messages used by the form request by overriding the `messages` method. This method should return an array of attribute / rule pairs and their corresponding error messages:"
msgstr ""

#: docs/10.x/validation.md:block 125 (code)
msgid ""
"/**\n"
" * Get the error messages for the defined validation rules.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function messages(): array\n"
"{\n"
"    return [\n"
"        'title.required' => 'A title is required',\n"
"        'body.required' => 'A message is required',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 127 (header)
msgid "Customizing The Validation Attributes"
msgstr ""

#: docs/10.x/validation.md:block 128 (paragraph)
msgid "Many of Laravel's built-in validation rule error messages contain an `:attribute` placeholder. If you would like the `:attribute` placeholder of your validation message to be replaced with a custom attribute name, you may specify the custom names by overriding the `attributes` method. This method should return an array of attribute / name pairs:"
msgstr ""

#: docs/10.x/validation.md:block 129 (code)
msgid ""
"/**\n"
" * Get custom attributes for validator errors.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function attributes(): array\n"
"{\n"
"    return [\n"
"        'email' => 'email address',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 131 (header)
msgid "Preparing Input For Validation"
msgstr ""

#: docs/10.x/validation.md:block 132 (paragraph)
msgid "If you need to prepare or sanitize any data from the request before you apply your validation rules, you may use the `prepareForValidation` method:"
msgstr ""

#: docs/10.x/validation.md:block 133 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Prepare the data for validation.\n"
" */\n"
"protected function prepareForValidation(): void\n"
"{\n"
"    $this->merge([\n"
"        'slug' => Str::slug($this->slug),\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 134 (paragraph)
msgid "Likewise, if you need to normalize any request data after validation is complete, you may use the `passedValidation` method:"
msgstr ""

#: docs/10.x/validation.md:block 135 (code)
msgid ""
"/**\n"
" * Handle a passed validation attempt.\n"
" */\n"
"protected function passedValidation(): void\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 137 (header)
msgid "Manually Creating Validators"
msgstr ""

#: docs/10.x/validation.md:block 138 (paragraph)
msgid "If you do not want to use the `validate` method on the request, you may create a validator instance manually using the `Validator` [facade](/docs/{{version}}/facades). The `make` method on the facade generates a new validator instance:"
msgstr ""

#: docs/10.x/validation.md:block 139 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n"
"\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n"
"\n"
"        // Retrieve the validated input...\n"
"        $validated = $validator->validated();\n"
"\n"
"        // Retrieve a portion of the validated input...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n"
"\n"
"        // Store the blog post...\n"
"\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 140 (paragraph)
msgid "The first argument passed to the `make` method is the data under validation. The second argument is an array of the validation rules that should be applied to the data."
msgstr ""

#: docs/10.x/validation.md:block 141 (paragraph)
msgid "After determining whether the request validation failed, you may use the `withErrors` method to flash the error messages to the session. When using this method, the `$errors` variable will automatically be shared with your views after redirection, allowing you to easily display them back to the user. The `withErrors` method accepts a validator, a `MessageBag`, or a PHP `array`."
msgstr ""

#: docs/10.x/validation.md:block 143 (paragraph)
msgid "The `stopOnFirstFailure` method will inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr ""

#: docs/10.x/validation.md:block 144 (code)
msgid ""
"if ($validator->stopOnFirstFailure()->fails()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 146 (header)
msgid "Automatic Redirection"
msgstr ""

#: docs/10.x/validation.md:block 147 (paragraph)
msgid "If you would like to create a validator instance manually but still take advantage of the automatic redirection offered by the HTTP request's `validate` method, you may call the `validate` method on an existing validator instance. If validation fails, the user will automatically be redirected or, in the case of an XHR request, a [JSON response will be returned](#validation-error-response-format):"
msgstr ""

#: docs/10.x/validation.md:block 148 (code)
msgid ""
"Validator::make($request->all(), [\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"])->validate();\n"
msgstr ""

#: docs/10.x/validation.md:block 149 (paragraph)
msgid "You may use the `validateWithBag` method to store the error messages in a [named error bag](#named-error-bags) if validation fails:"
msgstr ""

#: docs/10.x/validation.md:block 150 (code)
msgid ""
"Validator::make($request->all(), [\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"])->validateWithBag('post');\n"
msgstr ""

#: docs/10.x/validation.md:block 152 (header)
msgid "Named Error Bags"
msgstr ""

#: docs/10.x/validation.md:block 153 (paragraph)
msgid "If you have multiple forms on a single page, you may wish to name the `MessageBag` containing the validation errors, allowing you to retrieve the error messages for a specific form. To achieve this, pass a name as the second argument to `withErrors`:"
msgstr ""

#: docs/10.x/validation.md:block 154 (code)
msgid "return redirect('register')->withErrors($validator, 'login');\n"
msgstr ""

#: docs/10.x/validation.md:block 155 (paragraph)
msgid "You may then access the named `MessageBag` instance from the `$errors` variable:"
msgstr ""

#: docs/10.x/validation.md:block 156 (code)
msgid "{{ $errors->login->first('email') }}\n"
msgstr ""

#: docs/10.x/validation.md:block 159 (paragraph)
msgid "If needed, you may provide custom error messages that a validator instance should use instead of the default error messages provided by Laravel. There are several ways to specify custom messages. First, you may pass the custom messages as the third argument to the `Validator::make` method:"
msgstr ""

#: docs/10.x/validation.md:block 160 (code)
msgid ""
"$validator = Validator::make($input, $rules, $messages = [\n"
"    'required' => 'The :attribute field is required.',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 161 (paragraph)
msgid "In this example, the `:attribute` placeholder will be replaced by the actual name of the field under validation. You may also utilize other placeholders in validation messages. For example:"
msgstr ""

#: docs/10.x/validation.md:block 162 (code)
msgid ""
"$messages = [\n"
"    'same' => 'The :attribute and :other must match.',\n"
"    'size' => 'The :attribute must be exactly :size.',\n"
"    'between' => 'The :attribute value :input is not between :min - :max.',\n"
"    'in' => 'The :attribute must be one of the following types: :values',\n"
"];\n"
msgstr ""

#: docs/10.x/validation.md:block 164 (header)
msgid "Specifying A Custom Message For A Given Attribute"
msgstr ""

#: docs/10.x/validation.md:block 165 (paragraph)
msgid "Sometimes you may wish to specify a custom error message only for a specific attribute. You may do so using \"dot\" notation. Specify the attribute's name first, followed by the rule:"
msgstr ""

#: docs/10.x/validation.md:block 166 (code)
msgid ""
"$messages = [\n"
"    'email.required' => 'We need to know your email address!',\n"
"];\n"
msgstr ""

#: docs/10.x/validation.md:block 168 (header)
msgid "Specifying Custom Attribute Values"
msgstr ""

#: docs/10.x/validation.md:block 169 (paragraph)
msgid "Many of Laravel's built-in error messages include an `:attribute` placeholder that is replaced with the name of the field or attribute under validation. To customize the values used to replace these placeholders for specific fields, you may pass an array of custom attributes as the fourth argument to the `Validator::make` method:"
msgstr ""

#: docs/10.x/validation.md:block 170 (code)
msgid ""
"$validator = Validator::make($input, $rules, $messages, [\n"
"    'email' => 'email address',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 173 (paragraph)
msgid "Sometimes you need to perform additional validation after your initial validation is complete. You can accomplish this using the validator's `after` method. The `after` method accepts a closure or an array of callables which will be invoked after validation is complete. The given callables will receive an `Illuminate\\Validation\\Validator` instance, allowing you to raise additional error messages if necessary:"
msgstr ""

#: docs/10.x/validation.md:block 174 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$validator = Validator::make(/* ... */);\n"
"\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n"
"\n"
"if ($validator->fails()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 175 (paragraph)
msgid "As noted, the `after` method also accepts an array of callables, which is particularly convenient if your \"after validation\" logic is encapsulated in invokable classes, which will receive an `Illuminate\\Validation\\Validator` instance via their `__invoke` method:"
msgstr ""

#: docs/10.x/validation.md:block 176 (code)
msgid ""
"use App\\Validation\\ValidateShippingTime;\n"
"use App\\Validation\\ValidateUserStatus;\n"
"\n"
"$validator->after([\n"
"    new ValidateUserStatus,\n"
"    new ValidateShippingTime,\n"
"    function ($validator) {\n"
"        // ...\n"
"    },\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 178 (header)
msgid "Working With Validated Input"
msgstr ""

#: docs/10.x/validation.md:block 179 (paragraph)
msgid "After validating incoming request data using a form request or a manually created validator instance, you may wish to retrieve the incoming request data that actually underwent validation. This can be accomplished in several ways. First, you may call the `validated` method on a form request or validator instance. This method returns an array of the data that was validated:"
msgstr ""

#: docs/10.x/validation.md:block 180 (code)
msgid ""
"$validated = $request->validated();\n"
"\n"
"$validated = $validator->validated();\n"
msgstr ""

#: docs/10.x/validation.md:block 181 (paragraph)
msgid "Alternatively, you may call the `safe` method on a form request or validator instance. This method returns an instance of `Illuminate\\Support\\ValidatedInput`. This object exposes `only`, `except`, and `all` methods to retrieve a subset of the validated data or the entire array of validated data:"
msgstr ""

#: docs/10.x/validation.md:block 182 (code)
msgid ""
"$validated = $request->safe()->only(['name', 'email']);\n"
"\n"
"$validated = $request->safe()->except(['name', 'email']);\n"
"\n"
"$validated = $request->safe()->all();\n"
msgstr ""

#: docs/10.x/validation.md:block 183 (paragraph)
msgid "In addition, the `Illuminate\\Support\\ValidatedInput` instance may be iterated over and accessed like an array:"
msgstr ""

#: docs/10.x/validation.md:block 184 (code)
msgid ""
"// Validated data may be iterated...\n"
"foreach ($request->safe() as $key => $value) {\n"
"    // ...\n"
"}\n"
"\n"
"// Validated data may be accessed as an array...\n"
"$validated = $request->safe();\n"
"\n"
"$email = $validated['email'];\n"
msgstr ""

#: docs/10.x/validation.md:block 185 (paragraph)
msgid "If you would like to add additional fields to the validated data, you may call the `merge` method:"
msgstr ""

#: docs/10.x/validation.md:block 186 (code)
msgid "$validated = $request->safe()->merge(['name' => 'Taylor Otwell']);\n"
msgstr ""

#: docs/10.x/validation.md:block 187 (paragraph)
msgid "If you would like to retrieve the validated data as a [collection](/docs/{{version}}/collections) instance, you may call the `collect` method:"
msgstr ""

#: docs/10.x/validation.md:block 188 (code)
msgid "$collection = $request->safe()->collect();\n"
msgstr ""

#: docs/10.x/validation.md:block 190 (header)
msgid "Working With Error Messages"
msgstr ""

#: docs/10.x/validation.md:block 191 (paragraph)
msgid "After calling the `errors` method on a `Validator` instance, you will receive an `Illuminate\\Support\\MessageBag` instance, which has a variety of convenient methods for working with error messages. The `$errors` variable that is automatically made available to all views is also an instance of the `MessageBag` class."
msgstr ""

#: docs/10.x/validation.md:block 193 (header)
msgid "Retrieving The First Error Message For A Field"
msgstr ""

#: docs/10.x/validation.md:block 194 (paragraph)
msgid "To retrieve the first error message for a given field, use the `first` method:"
msgstr ""

#: docs/10.x/validation.md:block 195 (code)
msgid ""
"$errors = $validator->errors();\n"
"\n"
"echo $errors->first('email');\n"
msgstr ""

#: docs/10.x/validation.md:block 197 (header)
msgid "Retrieving All Error Messages For A Field"
msgstr ""

#: docs/10.x/validation.md:block 198 (paragraph)
msgid "If you need to retrieve an array of all the messages for a given field, use the `get` method:"
msgstr ""

#: docs/10.x/validation.md:block 199 (code)
msgid ""
"foreach ($errors->get('email') as $message) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 200 (paragraph)
msgid "If you are validating an array form field, you may retrieve all of the messages for each of the array elements using the `*` character:"
msgstr ""

#: docs/10.x/validation.md:block 201 (code)
msgid ""
"foreach ($errors->get('attachments.*') as $message) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 203 (header)
msgid "Retrieving All Error Messages For All Fields"
msgstr ""

#: docs/10.x/validation.md:block 204 (paragraph)
msgid "To retrieve an array of all messages for all fields, use the `all` method:"
msgstr ""

#: docs/10.x/validation.md:block 205 (code)
msgid ""
"foreach ($errors->all() as $message) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 207 (header)
msgid "Determining If Messages Exist For A Field"
msgstr ""

#: docs/10.x/validation.md:block 208 (paragraph)
msgid "The `has` method may be used to determine if any error messages exist for a given field:"
msgstr ""

#: docs/10.x/validation.md:block 209 (code)
msgid ""
"if ($errors->has('email')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 211 (header)
msgid "Specifying Custom Messages In Language Files"
msgstr ""

#: docs/10.x/validation.md:block 217 (header)
msgid "Custom Messages For Specific Attributes"
msgstr ""

#: docs/10.x/validation.md:block 218 (paragraph)
msgid "You may customize the error messages used for specified attribute and rule combinations within your application's validation language files. To do so, add your message customizations to the `custom` array of your application's `lang/xx/validation.php` language file:"
msgstr ""

#: docs/10.x/validation.md:block 219 (code)
msgid ""
"'custom' => [\n"
"    'email' => [\n"
"        'required' => 'We need to know your email address!',\n"
"        'max' => 'Your email address is too long!'\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/validation.md:block 221 (header)
msgid "Specifying Attributes In Language Files"
msgstr ""

#: docs/10.x/validation.md:block 222 (paragraph)
msgid "Many of Laravel's built-in error messages include an `:attribute` placeholder that is replaced with the name of the field or attribute under validation. If you would like the `:attribute` portion of your validation message to be replaced with a custom value, you may specify the custom attribute name in the `attributes` array of your `lang/xx/validation.php` language file:"
msgstr ""

#: docs/10.x/validation.md:block 223 (code)
msgid ""
"'attributes' => [\n"
"    'email' => 'email address',\n"
"],\n"
msgstr ""

#: docs/10.x/validation.md:block 226 (header)
msgid "Specifying Values In Language Files"
msgstr ""

#: docs/10.x/validation.md:block 227 (paragraph)
msgid "Some of Laravel's built-in validation rule error messages contain a `:value` placeholder that is replaced with the current value of the request attribute. However, you may occasionally need the `:value` portion of your validation message to be replaced with a custom representation of the value. For example, consider the following rule that specifies that a credit card number is required if the `payment_type` has a value of `cc`:"
msgstr ""

#: docs/10.x/validation.md:block 228 (code)
msgid ""
"Validator::make($request->all(), [\n"
"    'credit_card_number' => 'required_if:payment_type,cc'\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 229 (paragraph)
msgid "If this validation rule fails, it will produce the following error message:"
msgstr ""

#: docs/10.x/validation.md:block 230 (code)
msgid "The credit card number field is required when payment type is cc.\n"
msgstr ""

#: docs/10.x/validation.md:block 231 (paragraph)
msgid "Instead of displaying `cc` as the payment type value, you may specify a more user-friendly value representation in your `lang/xx/validation.php` language file by defining a `values` array:"
msgstr ""

#: docs/10.x/validation.md:block 232 (code)
msgid ""
"'values' => [\n"
"    'payment_type' => [\n"
"        'cc' => 'credit card'\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/validation.md:block 234 (paragraph)
msgid "After defining this value, the validation rule will produce the following error message:"
msgstr ""

#: docs/10.x/validation.md:block 235 (code)
msgid "The credit card number field is required when payment type is credit card.\n"
msgstr ""

#: docs/10.x/validation.md:block 237 (header)
msgid "Available Validation Rules"
msgstr ""

#: docs/10.x/validation.md:block 238 (paragraph)
msgid "Below is a list of all available validation rules and their function:"
msgstr ""

#: docs/10.x/validation.md:block 241 (paragraph)
msgid "[Accepted](#rule-accepted) [Accepted If](#rule-accepted-if) [Active URL](#rule-active-url) [After (Date)](#rule-after) [After Or Equal (Date)](#rule-after-or-equal) [Alpha](#rule-alpha) [Alpha Dash](#rule-alpha-dash) [Alpha Numeric](#rule-alpha-num) [Array](#rule-array) [Ascii](#rule-ascii) [Bail](#rule-bail) [Before (Date)](#rule-before) [Before Or Equal (Date)](#rule-before-or-equal) [Between](#rule-between) [Boolean](#rule-boolean) [Confirmed](#rule-confirmed) [Current Password](#rule-current-password) [Date](#rule-date) [Date Equals](#rule-date-equals) [Date Format](#rule-date-format) [Decimal](#rule-decimal) [Declined](#rule-declined) [Declined If](#rule-declined-if) [Different](#rule-different) [Digits](#rule-digits) [Digits Between](#rule-digits-between) [Dimensions (Image Files)](#rule-dimensions) [Distinct](#rule-distinct) [Doesnt Start With](#rule-doesnt-start-with) [Doesnt End With](#rule-doesnt-end-with) [Email](#rule-email) [Ends With](#rule-ends-with) [Enum](#rule-enum) [Exclude](#rule-exclude) [Exclude If](#rule-exclude-if) [Exclude Unless](#rule-exclude-unless) [Exclude With](#rule-exclude-with) [Exclude Without](#rule-exclude-without) [Exists (Database)](#rule-exists) [File](#rule-file) [Filled](#rule-filled) [Greater Than](#rule-gt) [Greater Than Or Equal](#rule-gte) [Image (File)](#rule-image) [In](#rule-in) [In Array](#rule-in-array) [Integer](#rule-integer) [IP Address](#rule-ip) [JSON](#rule-json) [Less Than](#rule-lt) [Less Than Or Equal](#rule-lte) [Lowercase](#rule-lowercase) [MAC Address](#rule-mac) [Max](#rule-max) [Max Digits](#rule-max-digits) [MIME Types](#rule-mimetypes) [MIME Type By File Extension](#rule-mimes) [Min](#rule-min) [Min Digits](#rule-min-digits) [Missing](#rule-missing) [Missing If](#rule-missing-if) [Missing Unless](#rule-missing-unless) [Missing With](#rule-missing-with) [Missing With All](#rule-missing-with-all) [Multiple Of](#rule-multiple-of) [Not In](#rule-not-in) [Not Regex](#rule-not-regex) [Nullable](#rule-nullable) [Numeric](#rule-numeric) [Password](#rule-password) [Present](#rule-present) [Prohibited](#rule-prohibited) [Prohibited If](#rule-prohibited-if) [Prohibited Unless](#rule-prohibited-unless) [Prohibits](#rule-prohibits) [Regular Expression](#rule-regex) [Required](#rule-required) [Required If](#rule-required-if) [Required If Accepted](#rule-required-if-accepted) [Required Unless](#rule-required-unless) [Required With](#rule-required-with) [Required With All](#rule-required-with-all) [Required Without](#rule-required-without) [Required Without All](#rule-required-without-all) [Required Array Keys](#rule-required-array-keys) [Same](#rule-same) [Size](#rule-size) [Sometimes](#validating-when-present) [Starts With](#rule-starts-with) [String](#rule-string) [Timezone](#rule-timezone) [Unique (Database)](#rule-unique) [Uppercase](#rule-uppercase) [URL](#rule-url) [ULID](#rule-ulid) [UUID](#rule-uuid)"
msgstr ""

#: docs/10.x/validation.md:block 244 (header)
msgid "accepted"
msgstr ""

#: docs/10.x/validation.md:block 245 (paragraph)
msgid "The field under validation must be `\"yes\"`, `\"on\"`, `1`, or `true`. This is useful for validating \"Terms of Service\" acceptance or similar fields."
msgstr ""

#: docs/10.x/validation.md:block 247 (header)
msgid "accepted_if:anotherfield,value,..."
msgstr ""

#: docs/10.x/validation.md:block 248 (paragraph)
msgid "The field under validation must be `\"yes\"`, `\"on\"`, `1`, or `true` if another field under validation is equal to a specified value. This is useful for validating \"Terms of Service\" acceptance or similar fields."
msgstr ""

#: docs/10.x/validation.md:block 250 (header)
msgid "active_url"
msgstr ""

#: docs/10.x/validation.md:block 251 (paragraph)
msgid "The field under validation must have a valid A or AAAA record according to the `dns_get_record` PHP function. The hostname of the provided URL is extracted using the `parse_url` PHP function before being passed to `dns_get_record`."
msgstr ""

#: docs/10.x/validation.md:block 253 (header)
msgid "after:*date*"
msgstr ""

#: docs/10.x/validation.md:block 254 (paragraph)
msgid "The field under validation must be a value after a given date. The dates will be passed into the `strtotime` PHP function in order to be converted to a valid `DateTime` instance:"
msgstr ""

#: docs/10.x/validation.md:block 255 (code)
msgid "'start_date' => 'required|date|after:tomorrow'\n"
msgstr ""

#: docs/10.x/validation.md:block 256 (paragraph)
msgid "Instead of passing a date string to be evaluated by `strtotime`, you may specify another field to compare against the date:"
msgstr ""

#: docs/10.x/validation.md:block 257 (code)
msgid "'finish_date' => 'required|date|after:start_date'\n"
msgstr ""

#: docs/10.x/validation.md:block 259 (header)
msgid "after_or_equal:*date*"
msgstr ""

#: docs/10.x/validation.md:block 260 (paragraph)
msgid "The field under validation must be a value after or equal to the given date. For more information, see the [after](#rule-after) rule."
msgstr ""

#: docs/10.x/validation.md:block 262 (header)
msgid "alpha"
msgstr ""

#: docs/10.x/validation.md:block 263 (paragraph)
msgid "The field under validation must be entirely Unicode alphabetic characters contained in [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=) and [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=)."
msgstr ""

#: docs/10.x/validation.md:block 264 (paragraph)
msgid "To restrict this validation rule to characters in the ASCII range (`a-z` and `A-Z`), you may provide the `ascii` option to the validation rule:"
msgstr ""

#: docs/10.x/validation.md:block 265 (code)
msgid "'username' => 'alpha:ascii',\n"
msgstr ""

#: docs/10.x/validation.md:block 267 (header)
msgid "alpha_dash"
msgstr ""

#: docs/10.x/validation.md:block 268 (paragraph)
msgid "The field under validation must be entirely Unicode alpha-numeric characters contained in [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=), [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=), [`\\p{N}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AN%3A%5D&g=&i=), as well as ASCII dashes (`-`) and ASCII underscores (`_`)."
msgstr ""

#: docs/10.x/validation.md:block 270 (code)
msgid "'username' => 'alpha_dash:ascii',\n"
msgstr ""

#: docs/10.x/validation.md:block 272 (header)
msgid "alpha_num"
msgstr ""

#: docs/10.x/validation.md:block 273 (paragraph)
msgid "The field under validation must be entirely Unicode alpha-numeric characters contained in [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=), [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=), and [`\\p{N}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AN%3A%5D&g=&i=)."
msgstr ""

#: docs/10.x/validation.md:block 275 (code)
msgid "'username' => 'alpha_num:ascii',\n"
msgstr ""

#: docs/10.x/validation.md:block 277 (header)
msgid "array"
msgstr ""

#: docs/10.x/validation.md:block 278 (paragraph)
msgid "The field under validation must be a PHP `array`."
msgstr ""

#: docs/10.x/validation.md:block 279 (paragraph)
msgid "When additional values are provided to the `array` rule, each key in the input array must be present within the list of values provided to the rule. In the following example, the `admin` key in the input array is invalid since it is not contained in the list of values provided to the `array` rule:"
msgstr ""

#: docs/10.x/validation.md:block 280 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$input = [\n"
"    'user' => [\n"
"        'name' => 'Taylor Otwell',\n"
"        'username' => 'taylorotwell',\n"
"        'admin' => true,\n"
"    ],\n"
"];\n"
"\n"
"Validator::make($input, [\n"
"    'user' => 'array:name,username',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 281 (paragraph)
msgid "In general, you should always specify the array keys that are allowed to be present within your array."
msgstr ""

#: docs/10.x/validation.md:block 283 (header)
msgid "ascii"
msgstr ""

#: docs/10.x/validation.md:block 284 (paragraph)
msgid "The field under validation must be entirely 7-bit ASCII characters."
msgstr ""

#: docs/10.x/validation.md:block 286 (header)
msgid "bail"
msgstr ""

#: docs/10.x/validation.md:block 287 (paragraph)
msgid "Stop running validation rules for the field after the first validation failure."
msgstr ""

#: docs/10.x/validation.md:block 288 (paragraph)
msgid "While the `bail` rule will only stop validating a specific field when it encounters a validation failure, the `stopOnFirstFailure` method will inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr ""

#: docs/10.x/validation.md:block 291 (header)
msgid "before:*date*"
msgstr ""

#: docs/10.x/validation.md:block 292 (paragraph)
msgid "The field under validation must be a value preceding the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance. In addition, like the [`after`](#rule-after) rule, the name of another field under validation may be supplied as the value of `date`."
msgstr ""

#: docs/10.x/validation.md:block 294 (header)
msgid "before_or_equal:*date*"
msgstr ""

#: docs/10.x/validation.md:block 295 (paragraph)
msgid "The field under validation must be a value preceding or equal to the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance. In addition, like the [`after`](#rule-after) rule, the name of another field under validation may be supplied as the value of `date`."
msgstr ""

#: docs/10.x/validation.md:block 297 (header)
msgid "between:*min*,*max*"
msgstr ""

#: docs/10.x/validation.md:block 298 (paragraph)
msgid "The field under validation must have a size between the given *min* and *max* (inclusive). Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 300 (header)
msgid "boolean"
msgstr ""

#: docs/10.x/validation.md:block 301 (paragraph)
msgid "The field under validation must be able to be cast as a boolean. Accepted input are `true`, `false`, `1`, `0`, `\"1\"`, and `\"0\"`."
msgstr ""

#: docs/10.x/validation.md:block 303 (header)
msgid "confirmed"
msgstr ""

#: docs/10.x/validation.md:block 304 (paragraph)
msgid "The field under validation must have a matching field of `{field}_confirmation`. For example, if the field under validation is `password`, a matching `password_confirmation` field must be present in the input."
msgstr ""

#: docs/10.x/validation.md:block 306 (header)
msgid "current_password"
msgstr ""

#: docs/10.x/validation.md:block 307 (paragraph)
msgid "The field under validation must match the authenticated user's password. You may specify an [authentication guard](/docs/{{version}}/authentication) using the rule's first parameter:"
msgstr ""

#: docs/10.x/validation.md:block 308 (code)
msgid "'password' => 'current_password:api'\n"
msgstr ""

#: docs/10.x/validation.md:block 310 (header)
msgid "date"
msgstr ""

#: docs/10.x/validation.md:block 311 (paragraph)
msgid "The field under validation must be a valid, non-relative date according to the `strtotime` PHP function."
msgstr ""

#: docs/10.x/validation.md:block 313 (header)
msgid "date_equals:*date*"
msgstr ""

#: docs/10.x/validation.md:block 314 (paragraph)
msgid "The field under validation must be equal to the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance."
msgstr ""

#: docs/10.x/validation.md:block 316 (header)
msgid "date_format:*format*,..."
msgstr ""

#: docs/10.x/validation.md:block 317 (paragraph)
msgid "The field under validation must match one of the given *formats*. You should use **either** `date` or `date_format` when validating a field, not both. This validation rule supports all formats supported by PHP's [DateTime](https://www.php.net/manual/en/class.datetime.php) class."
msgstr ""

#: docs/10.x/validation.md:block 319 (header)
msgid "decimal:*min*,*max*"
msgstr ""

#: docs/10.x/validation.md:block 320 (paragraph)
msgid "The field under validation must be numeric and must contain the specified number of decimal places:"
msgstr ""

#: docs/10.x/validation.md:block 321 (code)
msgid ""
"// Must have exactly two decimal places (9.99)...\n"
"'price' => 'decimal:2'\n"
"\n"
"// Must have between 2 and 4 decimal places...\n"
"'price' => 'decimal:2,4'\n"
msgstr ""

#: docs/10.x/validation.md:block 323 (header)
msgid "declined"
msgstr ""

#: docs/10.x/validation.md:block 324 (paragraph)
msgid "The field under validation must be `\"no\"`, `\"off\"`, `0`, or `false`."
msgstr ""

#: docs/10.x/validation.md:block 326 (header)
msgid "declined_if:anotherfield,value,..."
msgstr ""

#: docs/10.x/validation.md:block 327 (paragraph)
msgid "The field under validation must be `\"no\"`, `\"off\"`, `0`, or `false` if another field under validation is equal to a specified value."
msgstr ""

#: docs/10.x/validation.md:block 329 (header)
msgid "different:*field*"
msgstr ""

#: docs/10.x/validation.md:block 330 (paragraph)
msgid "The field under validation must have a different value than *field*."
msgstr ""

#: docs/10.x/validation.md:block 332 (header)
msgid "digits:*value*"
msgstr ""

#: docs/10.x/validation.md:block 333 (paragraph)
msgid "The integer under validation must have an exact length of *value*."
msgstr ""

#: docs/10.x/validation.md:block 335 (header)
msgid "digits_between:*min*,*max*"
msgstr ""

#: docs/10.x/validation.md:block 336 (paragraph)
msgid "The integer validation must have a length between the given *min* and *max*."
msgstr ""

#: docs/10.x/validation.md:block 338 (header)
msgid "dimensions"
msgstr ""

#: docs/10.x/validation.md:block 339 (paragraph)
msgid "The file under validation must be an image meeting the dimension constraints as specified by the rule's parameters:"
msgstr ""

#: docs/10.x/validation.md:block 340 (code)
msgid "'avatar' => 'dimensions:min_width=100,min_height=200'\n"
msgstr ""

#: docs/10.x/validation.md:block 341 (paragraph)
msgid "Available constraints are: *min_width*, *max_width*, *min_height*, *max_height*, *width*, *height*, *ratio*."
msgstr ""

#: docs/10.x/validation.md:block 342 (paragraph)
msgid "A *ratio* constraint should be represented as width divided by height. This can be specified either by a fraction like `3/2` or a float like `1.5`:"
msgstr ""

#: docs/10.x/validation.md:block 343 (code)
msgid "'avatar' => 'dimensions:ratio=3/2'\n"
msgstr ""

#: docs/10.x/validation.md:block 344 (paragraph)
msgid "Since this rule requires several arguments, you may use the `Rule::dimensions` method to fluently construct the rule:"
msgstr ""

#: docs/10.x/validation.md:block 345 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'avatar' => [\n"
"        'required',\n"
"        Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 347 (header)
msgid "distinct"
msgstr ""

#: docs/10.x/validation.md:block 348 (paragraph)
msgid "When validating arrays, the field under validation must not have any duplicate values:"
msgstr ""

#: docs/10.x/validation.md:block 349 (code)
msgid "'foo.*.id' => 'distinct'\n"
msgstr ""

#: docs/10.x/validation.md:block 350 (paragraph)
msgid "Distinct uses loose variable comparisons by default. To use strict comparisons, you may add the `strict` parameter to your validation rule definition:"
msgstr ""

#: docs/10.x/validation.md:block 351 (code)
msgid "'foo.*.id' => 'distinct:strict'\n"
msgstr ""

#: docs/10.x/validation.md:block 352 (paragraph)
msgid "You may add `ignore_case` to the validation rule's arguments to make the rule ignore capitalization differences:"
msgstr ""

#: docs/10.x/validation.md:block 353 (code)
msgid "'foo.*.id' => 'distinct:ignore_case'\n"
msgstr ""

#: docs/10.x/validation.md:block 355 (header)
msgid "doesnt_start_with:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 356 (paragraph)
msgid "The field under validation must not start with one of the given values."
msgstr ""

#: docs/10.x/validation.md:block 358 (header)
msgid "doesnt_end_with:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 359 (paragraph)
msgid "The field under validation must not end with one of the given values."
msgstr ""

#: docs/10.x/validation.md:block 361 (header)
msgid "email"
msgstr ""

#: docs/10.x/validation.md:block 362 (paragraph)
msgid "The field under validation must be formatted as an email address. This validation rule utilizes the [`egulias/email-validator`](https://github.com/egulias/EmailValidator) package for validating the email address. By default, the `RFCValidation` validator is applied, but you can apply other validation styles as well:"
msgstr ""

#: docs/10.x/validation.md:block 363 (code)
msgid "'email' => 'email:rfc,dns'\n"
msgstr ""

#: docs/10.x/validation.md:block 364 (paragraph)
msgid "The example above will apply the `RFCValidation` and `DNSCheckValidation` validations. Here's a full list of validation styles you can apply:"
msgstr ""

#: docs/10.x/validation.md:block 366 (unordered list)
msgid "`rfc`: `RFCValidation`"
msgstr ""

#: docs/10.x/validation.md:block 366 (unordered list)
msgid "`strict`: `NoRFCWarningsValidation`"
msgstr ""

#: docs/10.x/validation.md:block 366 (unordered list)
msgid "`dns`: `DNSCheckValidation`"
msgstr ""

#: docs/10.x/validation.md:block 366 (unordered list)
msgid "`spoof`: `SpoofCheckValidation`"
msgstr ""

#: docs/10.x/validation.md:block 366 (unordered list)
msgid "`filter`: `FilterEmailValidation`"
msgstr ""

#: docs/10.x/validation.md:block 366 (unordered list)
msgid "`filter_unicode`: `FilterEmailValidation::unicode()`"
msgstr ""

#: docs/10.x/validation.md:block 368 (paragraph)
msgid "The `filter` validator, which uses PHP's `filter_var` function, ships with Laravel and was Laravel's default email validation behavior prior to Laravel version 5.8."
msgstr ""

#: docs/10.x/validation.md:block 369 (quote)
msgid "**Warning** The `dns` and `spoof` validators require the PHP `intl` extension."
msgstr ""

#: docs/10.x/validation.md:block 371 (header)
msgid "ends_with:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 372 (paragraph)
msgid "The field under validation must end with one of the given values."
msgstr ""

#: docs/10.x/validation.md:block 374 (header)
msgid "enum"
msgstr ""

#: docs/10.x/validation.md:block 375 (paragraph)
msgid "The `Enum` rule is a class based rule that validates whether the field under validation contains a valid enum value. The `Enum` rule accepts the name of the enum as its only constructor argument:"
msgstr ""

#: docs/10.x/validation.md:block 376 (code)
msgid ""
"use App\\Enums\\ServerStatus;\n"
"use Illuminate\\Validation\\Rules\\Enum;\n"
"\n"
"$request->validate([\n"
"    'status' => [new Enum(ServerStatus::class)],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 378 (header)
msgid "exclude"
msgstr ""

#: docs/10.x/validation.md:block 379 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods."
msgstr ""

#: docs/10.x/validation.md:block 381 (header)
msgid "exclude_if:*anotherfield*,*value*"
msgstr ""

#: docs/10.x/validation.md:block 382 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the *anotherfield* field is equal to *value*."
msgstr ""

#: docs/10.x/validation.md:block 383 (paragraph)
msgid "If complex conditional exclusion logic is required, you may utilize the `Rule::excludeIf` method. This method accepts a boolean or a closure. When given a closure, the closure should return `true` or `false` to indicate if the field under validation should be excluded:"
msgstr ""

#: docs/10.x/validation.md:block 384 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::excludeIf($request->user()->is_admin),\n"
"]);\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 386 (header)
msgid "exclude_unless:*anotherfield*,*value*"
msgstr ""

#: docs/10.x/validation.md:block 387 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods unless *anotherfield*'s field is equal to *value*. If *value* is `null` (`exclude_unless:name,null`), the field under validation will be excluded unless the comparison field is `null` or the comparison field is missing from the request data."
msgstr ""

#: docs/10.x/validation.md:block 389 (header)
msgid "exclude_with:*anotherfield*"
msgstr ""

#: docs/10.x/validation.md:block 390 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the *anotherfield* field is present."
msgstr ""

#: docs/10.x/validation.md:block 392 (header)
msgid "exclude_without:*anotherfield*"
msgstr ""

#: docs/10.x/validation.md:block 393 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the *anotherfield* field is not present."
msgstr ""

#: docs/10.x/validation.md:block 395 (header)
msgid "exists:*table*,*column*"
msgstr ""

#: docs/10.x/validation.md:block 396 (paragraph)
msgid "The field under validation must exist in a given database table."
msgstr ""

#: docs/10.x/validation.md:block 398 (header)
msgid "Basic Usage Of Exists Rule"
msgstr ""

#: docs/10.x/validation.md:block 399 (code)
msgid "'state' => 'exists:states'\n"
msgstr ""

#: docs/10.x/validation.md:block 400 (paragraph)
msgid "If the `column` option is not specified, the field name will be used. So, in this case, the rule will validate that the `states` database table contains a record with a `state` column value matching the request's `state` attribute value."
msgstr ""

#: docs/10.x/validation.md:block 402 (header)
msgid "Specifying A Custom Column Name"
msgstr ""

#: docs/10.x/validation.md:block 403 (paragraph)
msgid "You may explicitly specify the database column name that should be used by the validation rule by placing it after the database table name:"
msgstr ""

#: docs/10.x/validation.md:block 404 (code)
msgid "'state' => 'exists:states,abbreviation'\n"
msgstr ""

#: docs/10.x/validation.md:block 405 (paragraph)
msgid "Occasionally, you may need to specify a specific database connection to be used for the `exists` query. You can accomplish this by prepending the connection name to the table name:"
msgstr ""

#: docs/10.x/validation.md:block 406 (code)
msgid "'email' => 'exists:connection.staff,email'\n"
msgstr ""

#: docs/10.x/validation.md:block 407 (paragraph)
msgid "Instead of specifying the table name directly, you may specify the Eloquent model which should be used to determine the table name:"
msgstr ""

#: docs/10.x/validation.md:block 408 (code)
msgid "'user_id' => 'exists:App\\Models\\User,id'\n"
msgstr ""

#: docs/10.x/validation.md:block 409 (paragraph)
msgid "If you would like to customize the query executed by the validation rule, you may use the `Rule` class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the `|` character to delimit them:"
msgstr ""

#: docs/10.x/validation.md:block 410 (code)
msgid ""
"use Illuminate\\Database\\Query\\Builder;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::exists('staff')->where(function (Builder $query) {\n"
"            return $query->where('account_id', 1);\n"
"        }),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 411 (paragraph)
msgid "You may explicitly specify the database column name that should be used by the `exists` rule generated by the `Rule::exists` method by providing the column name as the second argument to the `exists` method:"
msgstr ""

#: docs/10.x/validation.md:block 412 (code)
msgid "'state' => Rule::exists('states', 'abbreviation'),\n"
msgstr ""

#: docs/10.x/validation.md:block 414 (header)
msgid "file"
msgstr ""

#: docs/10.x/validation.md:block 415 (paragraph)
msgid "The field under validation must be a successfully uploaded file."
msgstr ""

#: docs/10.x/validation.md:block 417 (header)
msgid "filled"
msgstr ""

#: docs/10.x/validation.md:block 418 (paragraph)
msgid "The field under validation must not be empty when it is present."
msgstr ""

#: docs/10.x/validation.md:block 420 (header)
msgid "gt:*field*"
msgstr ""

#: docs/10.x/validation.md:block 421 (paragraph)
msgid "The field under validation must be greater than the given *field* or *value*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 423 (header)
msgid "gte:*field*"
msgstr ""

#: docs/10.x/validation.md:block 424 (paragraph)
msgid "The field under validation must be greater than or equal to the given *field* or *value*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 426 (header)
msgid "image"
msgstr ""

#: docs/10.x/validation.md:block 427 (paragraph)
msgid "The file under validation must be an image (jpg, jpeg, png, bmp, gif, svg, or webp)."
msgstr ""

#: docs/10.x/validation.md:block 429 (header)
msgid "in:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 430 (paragraph)
msgid "The field under validation must be included in the given list of values. Since this rule often requires you to `implode` an array, the `Rule::in` method may be used to fluently construct the rule:"
msgstr ""

#: docs/10.x/validation.md:block 431 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'zones' => [\n"
"        'required',\n"
"        Rule::in(['first-zone', 'second-zone']),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 432 (paragraph)
msgid "When the `in` rule is combined with the `array` rule, each value in the input array must be present within the list of values provided to the `in` rule. In the following example, the `LAS` airport code in the input array is invalid since it is not contained in the list of airports provided to the `in` rule:"
msgstr ""

#: docs/10.x/validation.md:block 433 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"$input = [\n"
"    'airports' => ['NYC', 'LAS'],\n"
"];\n"
"\n"
"Validator::make($input, [\n"
"    'airports' => [\n"
"        'required',\n"
"        'array',\n"
"    ],\n"
"    'airports.*' => Rule::in(['NYC', 'LIT']),\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 435 (header)
msgid "in_array:*anotherfield*.*"
msgstr ""

#: docs/10.x/validation.md:block 436 (paragraph)
msgid "The field under validation must exist in *anotherfield*'s values."
msgstr ""

#: docs/10.x/validation.md:block 438 (header)
msgid "integer"
msgstr ""

#: docs/10.x/validation.md:block 439 (paragraph)
msgid "The field under validation must be an integer."
msgstr ""

#: docs/10.x/validation.md:block 440 (quote)
msgid "**Warning** This validation rule does not verify that the input is of the \"integer\" variable type, only that the input is of a type accepted by PHP's `FILTER_VALIDATE_INT` rule. If you need to validate the input as being a number please use this rule in combination with [the `numeric` validation rule](#rule-numeric)."
msgstr ""

#: docs/10.x/validation.md:block 442 (header)
msgid "ip"
msgstr ""

#: docs/10.x/validation.md:block 443 (paragraph)
msgid "The field under validation must be an IP address."
msgstr ""

#: docs/10.x/validation.md:block 445 (header)
msgid "ipv4"
msgstr ""

#: docs/10.x/validation.md:block 446 (paragraph)
msgid "The field under validation must be an IPv4 address."
msgstr ""

#: docs/10.x/validation.md:block 448 (header)
msgid "ipv6"
msgstr ""

#: docs/10.x/validation.md:block 449 (paragraph)
msgid "The field under validation must be an IPv6 address."
msgstr ""

#: docs/10.x/validation.md:block 451 (header)
msgid "json"
msgstr ""

#: docs/10.x/validation.md:block 452 (paragraph)
msgid "The field under validation must be a valid JSON string."
msgstr ""

#: docs/10.x/validation.md:block 454 (header)
msgid "lt:*field*"
msgstr ""

#: docs/10.x/validation.md:block 455 (paragraph)
msgid "The field under validation must be less than the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 457 (header)
msgid "lte:*field*"
msgstr ""

#: docs/10.x/validation.md:block 458 (paragraph)
msgid "The field under validation must be less than or equal to the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 460 (header)
msgid "lowercase"
msgstr ""

#: docs/10.x/validation.md:block 461 (paragraph)
msgid "The field under validation must be lowercase."
msgstr ""

#: docs/10.x/validation.md:block 463 (header)
msgid "mac_address"
msgstr ""

#: docs/10.x/validation.md:block 464 (paragraph)
msgid "The field under validation must be a MAC address."
msgstr ""

#: docs/10.x/validation.md:block 466 (header)
msgid "max:*value*"
msgstr ""

#: docs/10.x/validation.md:block 467 (paragraph)
msgid "The field under validation must be less than or equal to a maximum *value*. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 469 (header)
msgid "max_digits:*value*"
msgstr ""

#: docs/10.x/validation.md:block 470 (paragraph)
msgid "The integer under validation must have a maximum length of *value*."
msgstr ""

#: docs/10.x/validation.md:block 472 (header)
msgid "mimetypes:*text/plain*,..."
msgstr ""

#: docs/10.x/validation.md:block 473 (paragraph)
msgid "The file under validation must match one of the given MIME types:"
msgstr ""

#: docs/10.x/validation.md:block 474 (code)
msgid "'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n"
msgstr ""

#: docs/10.x/validation.md:block 475 (paragraph)
msgid "To determine the MIME type of the uploaded file, the file's contents will be read and the framework will attempt to guess the MIME type, which may be different from the client's provided MIME type."
msgstr ""

#: docs/10.x/validation.md:block 477 (header)
msgid "mimes:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 478 (paragraph)
msgid "The file under validation must have a MIME type corresponding to one of the listed extensions."
msgstr ""

#: docs/10.x/validation.md:block 480 (header)
msgid "Basic Usage Of MIME Rule"
msgstr ""

#: docs/10.x/validation.md:block 481 (code)
msgid "'photo' => 'mimes:jpg,bmp,png'\n"
msgstr ""

#: docs/10.x/validation.md:block 482 (paragraph)
msgid "Even though you only need to specify the extensions, this rule actually validates the MIME type of the file by reading the file's contents and guessing its MIME type. A full listing of MIME types and their corresponding extensions may be found at the following location:"
msgstr ""

#: docs/10.x/validation.md:block 483 (paragraph)
msgid "<https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types>"
msgstr ""

#: docs/10.x/validation.md:block 485 (header)
msgid "min:*value*"
msgstr ""

#: docs/10.x/validation.md:block 486 (paragraph)
msgid "The field under validation must have a minimum *value*. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#: docs/10.x/validation.md:block 488 (header)
msgid "min_digits:*value*"
msgstr ""

#: docs/10.x/validation.md:block 489 (paragraph)
msgid "The integer under validation must have a minimum length of *value*."
msgstr ""

#: docs/10.x/validation.md:block 491 (header)
msgid "multiple_of:*value*"
msgstr ""

#: docs/10.x/validation.md:block 492 (paragraph)
msgid "The field under validation must be a multiple of *value*."
msgstr ""

#: docs/10.x/validation.md:block 494 (header)
msgid "missing"
msgstr ""

#: docs/10.x/validation.md:block 495 (paragraph)
msgid "The field under validation must not be present in the input data."
msgstr ""

#: docs/10.x/validation.md:block 497 (header)
msgid "missing_if:*anotherfield*,*value*,..."
msgstr ""

#: docs/10.x/validation.md:block 498 (paragraph)
msgid "The field under validation must not be present if the *anotherfield* field is equal to any *value*."
msgstr ""

#: docs/10.x/validation.md:block 500 (header)
msgid "missing_unless:*anotherfield*,*value*"
msgstr ""

#: docs/10.x/validation.md:block 501 (paragraph)
msgid "The field under validation must not be present unless the *anotherfield* field is equal to any *value*."
msgstr ""

#: docs/10.x/validation.md:block 503 (header)
msgid "missing_with:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 504 (paragraph)
msgid "The field under validation must not be present *only if* any of the other specified fields are present."
msgstr ""

#: docs/10.x/validation.md:block 506 (header)
msgid "missing_with_all:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 507 (paragraph)
msgid "The field under validation must not be present *only if* all of the other specified fields are present."
msgstr ""

#: docs/10.x/validation.md:block 509 (header)
msgid "not_in:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 510 (paragraph)
msgid "The field under validation must not be included in the given list of values. The `Rule::notIn` method may be used to fluently construct the rule:"
msgstr ""

#: docs/10.x/validation.md:block 511 (code)
msgid ""
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'toppings' => [\n"
"        'required',\n"
"        Rule::notIn(['sprinkles', 'cherries']),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 513 (header)
msgid "not_regex:*pattern*"
msgstr ""

#: docs/10.x/validation.md:block 514 (paragraph)
msgid "The field under validation must not match the given regular expression."
msgstr ""

#: docs/10.x/validation.md:block 515 (paragraph)
msgid "Internally, this rule uses the PHP `preg_match` function. The pattern specified should obey the same formatting required by `preg_match` and thus also include valid delimiters. For example: `'email' => 'not_regex:/^.+$/i'`."
msgstr ""

#: docs/10.x/validation.md:block 516 (quote)
msgid "**Warning** When using the `regex` / `not_regex` patterns, it may be necessary to specify your validation rules using an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr ""

#: docs/10.x/validation.md:block 518 (header)
msgid "nullable"
msgstr ""

#: docs/10.x/validation.md:block 519 (paragraph)
msgid "The field under validation may be `null`."
msgstr ""

#: docs/10.x/validation.md:block 521 (header)
msgid "numeric"
msgstr ""

#: docs/10.x/validation.md:block 522 (paragraph)
msgid "The field under validation must be [numeric](https://www.php.net/manual/en/function.is-numeric.php)."
msgstr ""

#: docs/10.x/validation.md:block 524 (header)
msgid "password"
msgstr ""

#: docs/10.x/validation.md:block 525 (paragraph)
msgid "The field under validation must match the authenticated user's password."
msgstr ""

#: docs/10.x/validation.md:block 526 (quote)
msgid "**Warning** This rule was renamed to `current_password` with the intention of removing it in Laravel 9. Please use the [Current Password](#rule-current-password) rule instead."
msgstr ""

#: docs/10.x/validation.md:block 528 (header)
msgid "present"
msgstr ""

#: docs/10.x/validation.md:block 529 (paragraph)
msgid "The field under validation must exist in the input data."
msgstr ""

#: docs/10.x/validation.md:block 531 (header)
msgid "prohibited"
msgstr ""

#: docs/10.x/validation.md:block 532 (paragraph)
msgid "The field under validation must be missing or empty. A field is \"empty\" if it meets one of the following criteria:"
msgstr ""

#: docs/10.x/validation.md:block 534 (unordered list)
msgid "The value is `null`."
msgstr ""

#: docs/10.x/validation.md:block 534 (unordered list)
msgid "The value is an empty string."
msgstr ""

#: docs/10.x/validation.md:block 534 (unordered list)
msgid "The value is an empty array or empty `Countable` object."
msgstr ""

#: docs/10.x/validation.md:block 534 (unordered list)
msgid "The value is an uploaded file with an empty path."
msgstr ""

#: docs/10.x/validation.md:block 537 (header)
msgid "prohibited_if:*anotherfield*,*value*,..."
msgstr ""

#: docs/10.x/validation.md:block 538 (paragraph)
msgid "The field under validation must be missing or empty if the *anotherfield* field is equal to any *value*. A field is \"empty\" if it meets one of the following criteria:"
msgstr ""

#: docs/10.x/validation.md:block 542 (paragraph)
msgid "If complex conditional prohibition logic is required, you may utilize the `Rule::prohibitedIf` method. This method accepts a boolean or a closure. When given a closure, the closure should return `true` or `false` to indicate if the field under validation should be prohibited:"
msgstr ""

#: docs/10.x/validation.md:block 543 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n"
"]);\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 545 (header)
msgid "prohibited_unless:*anotherfield*,*value*,..."
msgstr ""

#: docs/10.x/validation.md:block 546 (paragraph)
msgid "The field under validation must be missing or empty unless the *anotherfield* field is equal to any *value*. A field is \"empty\" if it meets one of the following criteria:"
msgstr ""

#: docs/10.x/validation.md:block 551 (header)
msgid "prohibits:*anotherfield*,..."
msgstr ""

#: docs/10.x/validation.md:block 552 (paragraph)
msgid "If the field under validation is not missing or empty, all fields in *anotherfield* must be missing or empty. A field is \"empty\" if it meets one of the following criteria:"
msgstr ""

#: docs/10.x/validation.md:block 557 (header)
msgid "regex:*pattern*"
msgstr ""

#: docs/10.x/validation.md:block 558 (paragraph)
msgid "The field under validation must match the given regular expression."
msgstr ""

#: docs/10.x/validation.md:block 559 (paragraph)
msgid "Internally, this rule uses the PHP `preg_match` function. The pattern specified should obey the same formatting required by `preg_match` and thus also include valid delimiters. For example: `'email' => 'regex:/^.+@.+$/i'`."
msgstr ""

#: docs/10.x/validation.md:block 560 (quote)
msgid "**Warning** When using the `regex` / `not_regex` patterns, it may be necessary to specify rules in an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr ""

#: docs/10.x/validation.md:block 562 (header)
msgid "required"
msgstr ""

#: docs/10.x/validation.md:block 563 (paragraph)
msgid "The field under validation must be present in the input data and not empty. A field is \"empty\" if it meets one of the following criteria:"
msgstr ""

#: docs/10.x/validation.md:block 565 (unordered list)
msgid "The value is an uploaded file with no path."
msgstr ""

#: docs/10.x/validation.md:block 568 (header)
msgid "required_if:*anotherfield*,*value*,..."
msgstr ""

#: docs/10.x/validation.md:block 569 (paragraph)
msgid "The field under validation must be present and not empty if the *anotherfield* field is equal to any *value*."
msgstr ""

#: docs/10.x/validation.md:block 570 (paragraph)
msgid "If you would like to construct a more complex condition for the `required_if` rule, you may use the `Rule::requiredIf` method. This method accepts a boolean or a closure. When passed a closure, the closure should return `true` or `false` to indicate if the field under validation is required:"
msgstr ""

#: docs/10.x/validation.md:block 571 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"]);\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf(fn () => $request->user()->is_admin),\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 573 (header)
msgid "required_if_accepted:_anotherfield,..."
msgstr ""

#: docs/10.x/validation.md:block 574 (paragraph)
msgid "The field under validation must be present and not empty if the *anotherfield* field is equal to `yes`, `on`, `1`, `\"1\"`, `true`, or `\"true\"`."
msgstr ""

#: docs/10.x/validation.md:block 576 (header)
msgid "required_unless:*anotherfield*,*value*,..."
msgstr ""

#: docs/10.x/validation.md:block 577 (paragraph)
msgid "The field under validation must be present and not empty unless the *anotherfield* field is equal to any *value*. This also means *anotherfield* must be present in the request data unless *value* is `null`. If *value* is `null` (`required_unless:name,null`), the field under validation will be required unless the comparison field is `null` or the comparison field is missing from the request data."
msgstr ""

#: docs/10.x/validation.md:block 579 (header)
msgid "required_with:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 580 (paragraph)
msgid "The field under validation must be present and not empty *only if* any of the other specified fields are present and not empty."
msgstr ""

#: docs/10.x/validation.md:block 582 (header)
msgid "required_with_all:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 583 (paragraph)
msgid "The field under validation must be present and not empty *only if* all of the other specified fields are present and not empty."
msgstr ""

#: docs/10.x/validation.md:block 585 (header)
msgid "required_without:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 586 (paragraph)
msgid "The field under validation must be present and not empty *only when* any of the other specified fields are empty or not present."
msgstr ""

#: docs/10.x/validation.md:block 588 (header)
msgid "required_without_all:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 589 (paragraph)
msgid "The field under validation must be present and not empty *only when* all of the other specified fields are empty or not present."
msgstr ""

#: docs/10.x/validation.md:block 591 (header)
msgid "required_array_keys:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 592 (paragraph)
msgid "The field under validation must be an array and must contain at least the specified keys."
msgstr ""

#: docs/10.x/validation.md:block 594 (header)
msgid "same:*field*"
msgstr ""

#: docs/10.x/validation.md:block 595 (paragraph)
msgid "The given *field* must match the field under validation."
msgstr ""

#: docs/10.x/validation.md:block 597 (header)
msgid "size:*value*"
msgstr ""

#: docs/10.x/validation.md:block 598 (paragraph)
msgid "The field under validation must have a size matching the given *value*. For string data, *value* corresponds to the number of characters. For numeric data, *value* corresponds to a given integer value (the attribute must also have the `numeric` or `integer` rule). For an array, *size* corresponds to the `count` of the array. For files, *size* corresponds to the file size in kilobytes. Let's look at some examples:"
msgstr ""

#: docs/10.x/validation.md:block 599 (code)
msgid ""
"// Validate that a string is exactly 12 characters long...\n"
"'title' => 'size:12';\n"
"\n"
"// Validate that a provided integer equals 10...\n"
"'seats' => 'integer|size:10';\n"
"\n"
"// Validate that an array has exactly 5 elements...\n"
"'tags' => 'array|size:5';\n"
"\n"
"// Validate that an uploaded file is exactly 512 kilobytes...\n"
"'image' => 'file|size:512';\n"
msgstr ""

#: docs/10.x/validation.md:block 601 (header)
msgid "starts_with:*foo*,*bar*,..."
msgstr ""

#: docs/10.x/validation.md:block 602 (paragraph)
msgid "The field under validation must start with one of the given values."
msgstr ""

#: docs/10.x/validation.md:block 604 (header)
msgid "string"
msgstr ""

#: docs/10.x/validation.md:block 605 (paragraph)
msgid "The field under validation must be a string. If you would like to allow the field to also be `null`, you should assign the `nullable` rule to the field."
msgstr ""

#: docs/10.x/validation.md:block 607 (header)
msgid "timezone"
msgstr ""

#: docs/10.x/validation.md:block 608 (paragraph)
msgid "The field under validation must be a valid timezone identifier according to the `DateTimeZone::listIdentifiers` method."
msgstr ""

#: docs/10.x/validation.md:block 609 (paragraph)
msgid "The arguments [accepted by the `DateTimeZone::listIdentifiers` method](https://www.php.net/manual/en/datetimezone.listidentifiers.php) may also be provided to this validation rule:"
msgstr ""

#: docs/10.x/validation.md:block 610 (code)
msgid ""
"'timezone' => 'required|timezone:all';\n"
"\n"
"'timezone' => 'required|timezone:Africa';\n"
"\n"
"'timezone' => 'required|timezone:per_country,US';\n"
msgstr ""

#: docs/10.x/validation.md:block 612 (header)
msgid "unique:*table*,*column*"
msgstr ""

#: docs/10.x/validation.md:block 613 (paragraph)
msgid "The field under validation must not exist within the given database table."
msgstr ""

#: docs/10.x/validation.md:block 614 (paragraph)
msgid "**Specifying A Custom Table / Column Name:**"
msgstr ""

#: docs/10.x/validation.md:block 616 (code)
msgid "'email' => 'unique:App\\Models\\User,email_address'\n"
msgstr ""

#: docs/10.x/validation.md:block 617 (paragraph)
msgid "The `column` option may be used to specify the field's corresponding database column. If the `column` option is not specified, the name of the field under validation will be used."
msgstr ""

#: docs/10.x/validation.md:block 618 (code)
msgid "'email' => 'unique:users,email_address'\n"
msgstr ""

#: docs/10.x/validation.md:block 619 (paragraph)
msgid "**Specifying A Custom Database Connection**"
msgstr ""

#: docs/10.x/validation.md:block 620 (paragraph)
msgid "Occasionally, you may need to set a custom connection for database queries made by the Validator. To accomplish this, you may prepend the connection name to the table name:"
msgstr ""

#: docs/10.x/validation.md:block 621 (code)
msgid "'email' => 'unique:connection.users,email_address'\n"
msgstr ""

#: docs/10.x/validation.md:block 622 (paragraph)
msgid "**Forcing A Unique Rule To Ignore A Given ID:**"
msgstr ""

#: docs/10.x/validation.md:block 623 (paragraph)
msgid "Sometimes, you may wish to ignore a given ID during unique validation. For example, consider an \"update profile\" screen that includes the user's name, email address, and location. You will probably want to verify that the email address is unique. However, if the user only changes the name field and not the email field, you do not want a validation error to be thrown because the user is already the owner of the email address in question."
msgstr ""

#: docs/10.x/validation.md:block 624 (paragraph)
msgid "To instruct the validator to ignore the user's ID, we'll use the `Rule` class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the `|` character to delimit the rules:"
msgstr ""

#: docs/10.x/validation.md:block 625 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::unique('users')->ignore($user->id),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 626 (quote)
msgid "**Warning** You should never pass any user controlled request input into the `ignore` method. Instead, you should only pass a system generated unique ID such as an auto-incrementing ID or UUID from an Eloquent model instance. Otherwise, your application will be vulnerable to an SQL injection attack."
msgstr ""

#: docs/10.x/validation.md:block 627 (paragraph)
msgid "Instead of passing the model key's value to the `ignore` method, you may also pass the entire model instance. Laravel will automatically extract the key from the model:"
msgstr ""

#: docs/10.x/validation.md:block 628 (code)
msgid "Rule::unique('users')->ignore($user)\n"
msgstr ""

#: docs/10.x/validation.md:block 629 (paragraph)
msgid "If your table uses a primary key column name other than `id`, you may specify the name of the column when calling the `ignore` method:"
msgstr ""

#: docs/10.x/validation.md:block 630 (code)
msgid "Rule::unique('users')->ignore($user->id, 'user_id')\n"
msgstr ""

#: docs/10.x/validation.md:block 631 (paragraph)
msgid "By default, the `unique` rule will check the uniqueness of the column matching the name of the attribute being validated. However, you may pass a different column name as the second argument to the `unique` method:"
msgstr ""

#: docs/10.x/validation.md:block 632 (code)
msgid "Rule::unique('users', 'email_address')->ignore($user->id)\n"
msgstr ""

#: docs/10.x/validation.md:block 633 (paragraph)
msgid "**Adding Additional Where Clauses:**"
msgstr ""

#: docs/10.x/validation.md:block 634 (paragraph)
msgid "You may specify additional query conditions by customizing the query using the `where` method. For example, let's add a query condition that scopes the query to only search records that have an `account_id` column value of `1`:"
msgstr ""

#: docs/10.x/validation.md:block 635 (code)
msgid "'email' => Rule::unique('users')->where(fn (Builder $query) => $query->where('account_id', 1))\n"
msgstr ""

#: docs/10.x/validation.md:block 637 (header)
msgid "uppercase"
msgstr ""

#: docs/10.x/validation.md:block 638 (paragraph)
msgid "The field under validation must be uppercase."
msgstr ""

#: docs/10.x/validation.md:block 640 (header)
msgid "url"
msgstr ""

#: docs/10.x/validation.md:block 641 (paragraph)
msgid "The field under validation must be a valid URL."
msgstr ""

#: docs/10.x/validation.md:block 642 (paragraph)
msgid "If you would like to specify the URL protocols that should be considered valid, you may pass the protocols as validation rule parameters:"
msgstr ""

#: docs/10.x/validation.md:block 643 (code)
msgid ""
"'url' => 'url:http,https',\n"
"\n"
"'game' => 'url:minecraft,steam',\n"
msgstr ""

#: docs/10.x/validation.md:block 645 (header)
msgid "ulid"
msgstr ""

#: docs/10.x/validation.md:block 646 (paragraph)
msgid "The field under validation must be a valid [Universally Unique Lexicographically Sortable Identifier](https://github.com/ulid/spec) (ULID)."
msgstr ""

#: docs/10.x/validation.md:block 648 (header)
msgid "uuid"
msgstr ""

#: docs/10.x/validation.md:block 649 (paragraph)
msgid "The field under validation must be a valid RFC 4122 (version 1, 3, 4, or 5) universally unique identifier (UUID)."
msgstr ""

#: docs/10.x/validation.md:block 651 (header)
msgid "Conditionally Adding Rules"
msgstr ""

#: docs/10.x/validation.md:block 653 (header)
msgid "Skipping Validation When Fields Have Certain Values"
msgstr ""

#: docs/10.x/validation.md:block 654 (paragraph)
msgid "You may occasionally wish to not validate a given field if another field has a given value. You may accomplish this using the `exclude_if` validation rule. In this example, the `appointment_date` and `doctor_name` fields will not be validated if the `has_appointment` field has a value of `false`:"
msgstr ""

#: docs/10.x/validation.md:block 655 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$validator = Validator::make($data, [\n"
"    'has_appointment' => 'required|boolean',\n"
"    'appointment_date' => 'exclude_if:has_appointment,false|required|date',\n"
"    'doctor_name' => 'exclude_if:has_appointment,false|required|string',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 656 (paragraph)
msgid "Alternatively, you may use the `exclude_unless` rule to not validate a given field unless another field has a given value:"
msgstr ""

#: docs/10.x/validation.md:block 657 (code)
msgid ""
"$validator = Validator::make($data, [\n"
"    'has_appointment' => 'required|boolean',\n"
"    'appointment_date' => 'exclude_unless:has_appointment,true|required|date',\n"
"    'doctor_name' => 'exclude_unless:has_appointment,true|required|string',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 659 (header)
msgid "Validating When Present"
msgstr ""

#: docs/10.x/validation.md:block 660 (paragraph)
msgid "In some situations, you may wish to run validation checks against a field **only** if that field is present in the data being validated. To quickly accomplish this, add the `sometimes` rule to your rule list:"
msgstr ""

#: docs/10.x/validation.md:block 661 (code)
msgid ""
"$v = Validator::make($data, [\n"
"    'email' => 'sometimes|required|email',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 662 (paragraph)
msgid "In the example above, the `email` field will only be validated if it is present in the `$data` array."
msgstr ""

#: docs/10.x/validation.md:block 663 (quote)
msgid "**Note** If you are attempting to validate a field that should always be present but may be empty, check out [this note on optional fields](#a-note-on-optional-fields)."
msgstr ""

#: docs/10.x/validation.md:block 665 (header)
msgid "Complex Conditional Validation"
msgstr ""

#: docs/10.x/validation.md:block 666 (paragraph)
msgid "Sometimes you may wish to add validation rules based on more complex conditional logic. For example, you may wish to require a given field only if another field has a greater value than 100. Or, you may need two fields to have a given value only when another field is present. Adding these validation rules doesn't have to be a pain. First, create a `Validator` instance with your *static rules* that never change:"
msgstr ""

#: docs/10.x/validation.md:block 667 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'email' => 'required|email',\n"
"    'games' => 'required|numeric',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 668 (paragraph)
msgid "Let's assume our web application is for game collectors. If a game collector registers with our application and they own more than 100 games, we want them to explain why they own so many games. For example, perhaps they run a game resale shop, or maybe they just enjoy collecting games. To conditionally add this requirement, we can use the `sometimes` method on the `Validator` instance."
msgstr ""

#: docs/10.x/validation.md:block 669 (code)
msgid ""
"use Illuminate\\Support\\Fluent;\n"
"\n"
"$validator->sometimes('reason', 'required|max:500', function (Fluent $input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr ""

#: docs/10.x/validation.md:block 670 (paragraph)
msgid "The first argument passed to the `sometimes` method is the name of the field we are conditionally validating. The second argument is a list of the rules we want to add. If the closure passed as the third argument returns `true`, the rules will be added. This method makes it a breeze to build complex conditional validations. You may even add conditional validations for several fields at once:"
msgstr ""

#: docs/10.x/validation.md:block 671 (code)
msgid ""
"$validator->sometimes(['reason', 'cost'], 'required', function (Fluent $input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr ""

#: docs/10.x/validation.md:block 672 (quote)
msgid "**Note** The `$input` parameter passed to your closure will be an instance of `Illuminate\\Support\\Fluent` and may be used to access your input and files under validation."
msgstr ""

#: docs/10.x/validation.md:block 674 (header)
msgid "Complex Conditional Array Validation"
msgstr ""

#: docs/10.x/validation.md:block 675 (paragraph)
msgid "Sometimes you may want to validate a field based on another field in the same nested array whose index you do not know. In these situations, you may allow your closure to receive a second argument which will be the current individual item in the array being validated:"
msgstr ""

#: docs/10.x/validation.md:block 676 (code)
msgid ""
"$input = [\n"
"    'channels' => [\n"
"        [\n"
"            'type' => 'email',\n"
"            'address' => 'abigail@example.com',\n"
"        ],\n"
"        [\n"
"            'type' => 'url',\n"
"            'address' => 'https://example.com',\n"
"        ],\n"
"    ],\n"
"];\n"
"\n"
"$validator->sometimes('channels.*.address', 'email', function (Fluent $input, Fluent $item) {\n"
"    return $item->type === 'email';\n"
"});\n"
"\n"
"$validator->sometimes('channels.*.address', 'url', function (Fluent $input, Fluent $item) {\n"
"    return $item->type !== 'email';\n"
"});\n"
msgstr ""

#: docs/10.x/validation.md:block 677 (paragraph)
msgid "Like the `$input` parameter passed to the closure, the `$item` parameter is an instance of `Illuminate\\Support\\Fluent` when the attribute data is an array; otherwise, it is a string."
msgstr ""

#: docs/10.x/validation.md:block 679 (header)
msgid "Validating Arrays"
msgstr ""

#: docs/10.x/validation.md:block 680 (paragraph)
msgid "As discussed in the [`array` validation rule documentation](#rule-array), the `array` rule accepts a list of allowed array keys. If any additional keys are present within the array, validation will fail:"
msgstr ""

#: docs/10.x/validation.md:block 682 (paragraph)
msgid "In general, you should always specify the array keys that are allowed to be present within your array. Otherwise, the validator's `validate` and `validated` methods will return all of the validated data, including the array and all of its keys, even if those keys were not validated by other nested array validation rules."
msgstr ""

#: docs/10.x/validation.md:block 684 (header)
msgid "Validating Nested Array Input"
msgstr ""

#: docs/10.x/validation.md:block 685 (paragraph)
msgid "Validating nested array based form input fields doesn't have to be a pain. You may use \"dot notation\" to validate attributes within an array. For example, if the incoming HTTP request contains a `photos[profile]` field, you may validate it like so:"
msgstr ""

#: docs/10.x/validation.md:block 686 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'photos.profile' => 'required|image',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 687 (paragraph)
msgid "You may also validate each element of an array. For example, to validate that each email in a given array input field is unique, you may do the following:"
msgstr ""

#: docs/10.x/validation.md:block 688 (code)
msgid ""
"$validator = Validator::make($request->all(), [\n"
"    'person.*.email' => 'email|unique:users',\n"
"    'person.*.first_name' => 'required_with:person.*.last_name',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 689 (paragraph)
msgid "Likewise, you may use the `*` character when specifying [custom validation messages in your language files](#custom-messages-for-specific-attributes), making it a breeze to use a single validation message for array based fields:"
msgstr ""

#: docs/10.x/validation.md:block 690 (code)
msgid ""
"'custom' => [\n"
"    'person.*.email' => [\n"
"        'unique' => 'Each person must have a unique email address',\n"
"    ]\n"
"],\n"
msgstr ""

#: docs/10.x/validation.md:block 692 (header)
msgid "Accessing Nested Array Data"
msgstr ""

#: docs/10.x/validation.md:block 693 (paragraph)
msgid "Sometimes you may need to access the value for a given nested array element when assigning validation rules to the attribute. You may accomplish this using the `Rule::forEach` method. The `forEach` method accepts a closure that will be invoked for each iteration of the array attribute under validation and will receive the attribute's value and explicit, fully-expanded attribute name. The closure should return an array of rules to assign to the array element:"
msgstr ""

#: docs/10.x/validation.md:block 694 (code)
msgid ""
"use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function (string|null $value, string $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 696 (header)
msgid "Error Message Indexes & Positions"
msgstr ""

#: docs/10.x/validation.md:block 697 (paragraph)
msgid "When validating arrays, you may want to reference the index or position of a particular item that failed validation within the error message displayed by your application. To accomplish this, you may include the `:index` (starts from `0`) and `:position` (starts from `1`) placeholders within your [custom validation message](#manual-customizing-the-error-messages):"
msgstr ""

#: docs/10.x/validation.md:block 698 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$input = [\n"
"    'photos' => [\n"
"        [\n"
"            'name' => 'BeachVacation.jpg',\n"
"            'description' => 'A photo of my beach vacation!',\n"
"        ],\n"
"        [\n"
"            'name' => 'GrandCanyon.jpg',\n"
"            'description' => '',\n"
"        ],\n"
"    ],\n"
"];\n"
"\n"
"Validator::validate($input, [\n"
"    'photos.*.description' => 'required',\n"
"], [\n"
"    'photos.*.description.required' => 'Please describe photo #:position.',\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 699 (paragraph)
msgid "Given the example above, validation will fail and the user will be presented with the following error of *\"Please describe photo #2.\"*"
msgstr ""

#: docs/10.x/validation.md:block 700 (paragraph)
msgid "If necessary, you may reference more deeply nested indexes and positions via `second-index`, `second-position`, `third-index`, `third-position`, etc."
msgstr ""

#: docs/10.x/validation.md:block 701 (code)
msgid "'photos.*.attributes.*.string' => 'Invalid attribute for photo #:second-position.',\n"
msgstr ""

#: docs/10.x/validation.md:block 703 (header)
msgid "Validating Files"
msgstr ""

#: docs/10.x/validation.md:block 704 (paragraph)
msgid "Laravel provides a variety of validation rules that may be used to validate uploaded files, such as `mimes`, `image`, `min`, and `max`. While you are free to specify these rules individually when validating files, Laravel also offers a fluent file validation rule builder that you may find convenient:"
msgstr ""

#: docs/10.x/validation.md:block 705 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\File;\n"
"\n"
"Validator::validate($input, [\n"
"    'attachment' => [\n"
"        'required',\n"
"        File::types(['mp3', 'wav'])\n"
"            ->min(1024)\n"
"            ->max(12 * 1024),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 706 (paragraph)
msgid "If your application accepts images uploaded by your users, you may use the `File` rule's `image` constructor method to indicate that the uploaded file should be an image. In addition, the `dimensions` rule may be used to limit the dimensions of the image:"
msgstr ""

#: docs/10.x/validation.md:block 707 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"use Illuminate\\Validation\\Rules\\File;\n"
"\n"
"Validator::validate($input, [\n"
"    'photo' => [\n"
"        'required',\n"
"        File::image()\n"
"            ->min(1024)\n"
"            ->max(12 * 1024)\n"
"            ->dimensions(Rule::dimensions()->maxWidth(1000)->maxHeight(500)),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 708 (quote)
msgid "**Note** More information regarding validating image dimensions may be found in the [dimension rule documentation](#rule-dimensions)."
msgstr ""

#: docs/10.x/validation.md:block 710 (header)
msgid "File Sizes"
msgstr ""

#: docs/10.x/validation.md:block 711 (paragraph)
msgid "For convenience, minimum and maximum file sizes may be specified as a string with a suffix indicating the file size units. The `kb`, `mb`, `gb`, and `tb` suffixes are supported:"
msgstr ""

#: docs/10.x/validation.md:block 712 (code)
msgid ""
"File::image()\n"
"    ->min('1kb')\n"
"    ->max('10mb')\n"
msgstr ""

#: docs/10.x/validation.md:block 714 (header)
msgid "File Types"
msgstr ""

#: docs/10.x/validation.md:block 715 (paragraph)
msgid "Even though you only need to specify the extensions when invoking the `types` method, this method actually validates the MIME type of the file by reading the file's contents and guessing its MIME type. A full listing of MIME types and their corresponding extensions may be found at the following location:"
msgstr ""

#: docs/10.x/validation.md:block 718 (header)
msgid "Validating Passwords"
msgstr ""

#: docs/10.x/validation.md:block 719 (paragraph)
msgid "To ensure that passwords have an adequate level of complexity, you may use Laravel's `Password` rule object:"
msgstr ""

#: docs/10.x/validation.md:block 720 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\Password;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'password' => ['required', 'confirmed', Password::min(8)],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 721 (paragraph)
msgid "The `Password` rule object allows you to easily customize the password complexity requirements for your application, such as specifying that passwords require at least one letter, number, symbol, or characters with mixed casing:"
msgstr ""

#: docs/10.x/validation.md:block 722 (code)
msgid ""
"// Require at least 8 characters...\n"
"Password::min(8)\n"
"\n"
"// Require at least one letter...\n"
"Password::min(8)->letters()\n"
"\n"
"// Require at least one uppercase and one lowercase letter...\n"
"Password::min(8)->mixedCase()\n"
"\n"
"// Require at least one number...\n"
"Password::min(8)->numbers()\n"
"\n"
"// Require at least one symbol...\n"
"Password::min(8)->symbols()\n"
msgstr ""

#: docs/10.x/validation.md:block 723 (paragraph)
msgid "In addition, you may ensure that a password has not been compromised in a public password data breach leak using the `uncompromised` method:"
msgstr ""

#: docs/10.x/validation.md:block 724 (code)
msgid "Password::min(8)->uncompromised()\n"
msgstr ""

#: docs/10.x/validation.md:block 725 (paragraph)
msgid "Internally, the `Password` rule object uses the [k-Anonymity](https://en.wikipedia.org/wiki/K-anonymity) model to determine if a password has been leaked via the [haveibeenpwned.com](https://haveibeenpwned.com) service without sacrificing the user's privacy or security."
msgstr ""

#: docs/10.x/validation.md:block 726 (paragraph)
msgid "By default, if a password appears at least once in a data leak, it will be considered compromised. You can customize this threshold using the first argument of the `uncompromised` method:"
msgstr ""

#: docs/10.x/validation.md:block 727 (code)
msgid ""
"// Ensure the password appears less than 3 times in the same data leak...\n"
"Password::min(8)->uncompromised(3);\n"
msgstr ""

#: docs/10.x/validation.md:block 728 (paragraph)
msgid "Of course, you may chain all the methods in the examples above:"
msgstr ""

#: docs/10.x/validation.md:block 729 (code)
msgid ""
"Password::min(8)\n"
"    ->letters()\n"
"    ->mixedCase()\n"
"    ->numbers()\n"
"    ->symbols()\n"
"    ->uncompromised()\n"
msgstr ""

#: docs/10.x/validation.md:block 731 (header)
msgid "Defining Default Password Rules"
msgstr ""

#: docs/10.x/validation.md:block 732 (paragraph)
msgid "You may find it convenient to specify the default validation rules for passwords in a single location of your application. You can easily accomplish this using the `Password::defaults` method, which accepts a closure. The closure given to the `defaults` method should return the default configuration of the Password rule. Typically, the `defaults` rule should be called within the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/10.x/validation.md:block 733 (code)
msgid ""
"use Illuminate\\Validation\\Rules\\Password;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Password::defaults(function () {\n"
"        $rule = Password::min(8);\n"
"\n"
"        return $this->app->isProduction()\n"
"                    ? $rule->mixedCase()->uncompromised()\n"
"                    : $rule;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 734 (paragraph)
msgid "Then, when you would like to apply the default rules to a particular password undergoing validation, you may invoke the `defaults` method with no arguments:"
msgstr ""

#: docs/10.x/validation.md:block 735 (code)
msgid "'password' => ['required', Password::defaults()],\n"
msgstr ""

#: docs/10.x/validation.md:block 736 (paragraph)
msgid "Occasionally, you may want to attach additional validation rules to your default password validation rules. You may use the `rules` method to accomplish this:"
msgstr ""

#: docs/10.x/validation.md:block 737 (code)
msgid ""
"use App\\Rules\\ZxcvbnRule;\n"
"\n"
"Password::defaults(function () {\n"
"    $rule = Password::min(8)->rules([new ZxcvbnRule]);\n"
"\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/validation.md:block 739 (header)
msgid "Custom Validation Rules"
msgstr ""

#: docs/10.x/validation.md:block 741 (header)
msgid "Using Rule Objects"
msgstr ""

#: docs/10.x/validation.md:block 742 (paragraph)
msgid "Laravel provides a variety of helpful validation rules; however, you may wish to specify some of your own. One method of registering custom validation rules is using rule objects. To generate a new rule object, you may use the `make:rule` Artisan command. Let's use this command to generate a rule that verifies a string is uppercase. Laravel will place the new rule in the `app/Rules` directory. If this directory does not exist, Laravel will create it when you execute the Artisan command to create your rule:"
msgstr ""

#: docs/10.x/validation.md:block 743 (code)
msgid "php artisan make:rule Uppercase\n"
msgstr ""

#: docs/10.x/validation.md:block 744 (paragraph)
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains a single method: `validate`. This method receives the attribute name, its value, and a callback that should be invoked on failure with the validation error message:"
msgstr ""

#: docs/10.x/validation.md:block 745 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n"
"\n"
"class Uppercase implements ValidationRule\n"
"{\n"
"    /**\n"
"     * Run the validation rule.\n"
"     */\n"
"    public function validate(string $attribute, mixed $value, Closure $fail): void\n"
"    {\n"
"        if (strtoupper($value) !== $value) {\n"
"            $fail('The :attribute must be uppercase.');\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 746 (paragraph)
msgid "Once the rule has been defined, you may attach it to a validator by passing an instance of the rule object with your other validation rules:"
msgstr ""

#: docs/10.x/validation.md:block 747 (code)
msgid ""
"use App\\Rules\\Uppercase;\n"
"\n"
"$request->validate([\n"
"    'name' => ['required', 'string', new Uppercase],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 748 (header)
msgid "Translating Validation Messages"
msgstr ""

#: docs/10.x/validation.md:block 749 (paragraph)
msgid "Instead of providing a literal error message to the `$fail` closure, you may also provide a [translation string key](/docs/{{version}}/localization) and instruct Laravel to translate the error message:"
msgstr ""

#: docs/10.x/validation.md:block 750 (code)
msgid ""
"if (strtoupper($value) !== $value) {\n"
"    $fail('validation.uppercase')->translate();\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 751 (paragraph)
msgid "If necessary, you may provide placeholder replacements and the preferred language as the first and second arguments to the `translate` method:"
msgstr ""

#: docs/10.x/validation.md:block 752 (code)
msgid ""
"$fail('validation.location')->translate([\n"
"    'value' => $this->value,\n"
"], 'fr')\n"
msgstr ""

#: docs/10.x/validation.md:block 753 (header)
msgid "Accessing Additional Data"
msgstr ""

#: docs/10.x/validation.md:block 754 (paragraph)
msgid "If your custom validation rule class needs to access all of the other data undergoing validation, your rule class may implement the `Illuminate\\Contracts\\Validation\\DataAwareRule` interface. This interface requires your class to define a `setData` method. This method will automatically be invoked by Laravel (before validation proceeds) with all of the data under validation:"
msgstr ""

#: docs/10.x/validation.md:block 755 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n"
"\n"
"class Uppercase implements DataAwareRule, ValidationRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array<string, mixed>\n"
"     */\n"
"    protected $data = [];\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array<string, mixed>  $data\n"
"     */\n"
"    public function setData(array $data): static\n"
"    {\n"
"        $this->data = $data;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 756 (paragraph)
msgid "Or, if your validation rule requires access to the validator instance performing the validation, you may implement the `ValidatorAwareRule` interface:"
msgstr ""

#: docs/10.x/validation.md:block 757 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n"
"use Illuminate\\Validation\\Validator;\n"
"\n"
"class Uppercase implements ValidationRule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the current validator.\n"
"     */\n"
"    public function setValidator(Validator $validator): static\n"
"    {\n"
"        $this->validator = $validator;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/validation.md:block 759 (header)
msgid "Using Closures"
msgstr ""

#: docs/10.x/validation.md:block 760 (paragraph)
msgid "If you only need the functionality of a custom rule once throughout your application, you may use a closure instead of a rule object. The closure receives the attribute's name, the attribute's value, and a `$fail` callback that should be called if validation fails:"
msgstr ""

#: docs/10.x/validation.md:block 761 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Closure;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function (string $attribute, mixed $value, Closure $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail(\"The {$attribute} is invalid.\");\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/10.x/validation.md:block 763 (header)
msgid "Implicit Rules"
msgstr ""

#: docs/10.x/validation.md:block 764 (paragraph)
msgid "By default, when an attribute being validated is not present or contains an empty string, normal validation rules, including custom rules, are not run. For example, the [`unique`](#rule-unique) rule will not be run against an empty string:"
msgstr ""

#: docs/10.x/validation.md:block 765 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$rules = ['name' => 'unique:users,name'];\n"
"\n"
"$input = ['name' => ''];\n"
"\n"
"Validator::make($input, $rules)->passes(); // true\n"
msgstr ""

#: docs/10.x/validation.md:block 766 (paragraph)
msgid "For a custom rule to run even when an attribute is empty, the rule must imply that the attribute is required. To quickly generate a new implicit rule object, you may use the `make:rule` Artisan command with the `--implicit` option:"
msgstr ""

#: docs/10.x/validation.md:block 767 (code)
msgid "php artisan make:rule Uppercase --implicit\n"
msgstr ""

#: docs/10.x/validation.md:block 768 (quote)
msgid "**Warning** An \"implicit\" rule only *implies* that the attribute is required. Whether it actually invalidates a missing or empty attribute is up to you."
msgstr ""

#: docs/8.x/validation.md:block 2 (unordered list)
msgid "[After Validation Hook](#after-validation-hook)"
msgstr ""

#: docs/8.x/validation.md:block 2 (unordered list)
msgid "[Excluding Unvalidated Array Keys](#excluding-unvalidated-array-keys)"
msgstr ""

#: docs/8.x/validation.md:block 18 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View\n"
"     */\n"
"    public function create()\n"
"    {\n"
"        return view('post.create');\n"
"    }\n"
"\n"
"    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        // Validate and store the blog post...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 22 (paragraph)
msgid "If validation fails during a traditional HTTP request, a redirect response to the previous URL will be generated. If the incoming request is an XHR request, a JSON response containing the validation error messages will be returned."
msgstr ""

#: docs/8.x/validation.md:block 24 (code)
msgid ""
"/**\n"
" * Store a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function store(Request $request)\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n"
"\n"
"    // The blog post is valid...\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 49 (paragraph)
msgid "Laravel's built-in validation rules each has an error message that is located in your application's `resources/lang/en/validation.php` file. Within this file, you will find a translation entry for each validation rule. You are free to change or modify these messages based on the needs of your application."
msgstr ""

#: docs/8.x/validation.md:block 50 (paragraph)
msgid "In addition, you may copy this file to another translation language directory to translate the messages for your application's language. To learn more about Laravel localization, check out the complete [localization documentation](/docs/{{version}}/localization)."
msgstr ""

#: docs/8.x/validation.md:block 53 (paragraph)
msgid "In this example, we used a traditional form to send data to the application. However, many applications receive XHR requests from a JavaScript powered frontend. When using the `validate` method during an XHR request, Laravel will not generate a redirect response. Instead, Laravel generates a JSON response containing all of the validation errors. This JSON response will be sent with a 422 HTTP status code."
msgstr ""

#: docs/8.x/validation.md:block 57 (code)
msgid ""
"<!-- /resources/views/post/create.blade.php -->\n"
"\n"
"<label for=\"title\">Post Title</label>\n"
"\n"
"<input id=\"title\" type=\"text\" name=\"title\" class=\"@error('title') is-invalid @enderror\">\n"
"\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#: docs/8.x/validation.md:block 80 (code)
msgid ""
"/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array\n"
" */\n"
"public function rules()\n"
"{\n"
"    return [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 81 (quote)
msgid "{tip} You may type-hint any dependencies you require within the `rules` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/8.x/validation.md:block 83 (code)
msgid ""
"/**\n"
" * Store a new blog post.\n"
" *\n"
" * @param  \\App\\Http\\Requests\\StorePostRequest  $request\n"
" * @return Illuminate\\Http\\Response\n"
" */\n"
"public function store(StorePostRequest $request)\n"
"{\n"
"    // The incoming request is valid...\n"
"\n"
"    // Retrieve the validated input data...\n"
"    $validated = $request->validated();\n"
"\n"
"    // Retrieve a portion of the validated input data...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 84 (paragraph)
msgid "If validation fails, a redirect response will be generated to send the user back to their previous location. The errors will also be flashed to the session so they are available for display. If the request was an XHR request, an HTTP response with a 422 status code will be returned to the user including a JSON representation of the validation errors."
msgstr ""

#: docs/8.x/validation.md:block 86 (header)
msgid "Adding After Hooks To Form Requests"
msgstr ""

#: docs/8.x/validation.md:block 87 (paragraph)
msgid "If you would like to add an \"after\" validation hook to a form request, you may use the `withValidator` method. This method receives the fully constructed validator, allowing you to call any of its methods before the validation rules are actually evaluated:"
msgstr ""

#: docs/8.x/validation.md:block 88 (code)
msgid ""
"/**\n"
" * Configure the validator instance.\n"
" *\n"
" * @param  \\Illuminate\\Validation\\Validator  $validator\n"
" * @return void\n"
" */\n"
"public function withValidator($validator)\n"
"{\n"
"    $validator->after(function ($validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 90 (header)
msgid "Stopping On First Validation Failure Attribute"
msgstr ""

#: docs/8.x/validation.md:block 102 (code)
msgid ""
"use App\\Models\\Comment;\n"
"\n"
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function authorize()\n"
"{\n"
"    $comment = Comment::find($this->route('comment'));\n"
"\n"
"    return $comment && $this->user()->can('update', $comment);\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 109 (code)
msgid ""
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function authorize()\n"
"{\n"
"    return true;\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 110 (quote)
msgid "{tip} You may type-hint any dependencies you need within the `authorize` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/8.x/validation.md:block 114 (code)
msgid ""
"/**\n"
" * Get the error messages for the defined validation rules.\n"
" *\n"
" * @return array\n"
" */\n"
"public function messages()\n"
"{\n"
"    return [\n"
"        'title.required' => 'A title is required',\n"
"        'body.required' => 'A message is required',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 118 (code)
msgid ""
"/**\n"
" * Get custom attributes for validator errors.\n"
" *\n"
" * @return array\n"
" */\n"
"public function attributes()\n"
"{\n"
"    return [\n"
"        'email' => 'email address',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 122 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Prepare the data for validation.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function prepareForValidation()\n"
"{\n"
"    $this->merge([\n"
"        'slug' => Str::slug($this->slug),\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 126 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  Request  $request\n"
"     * @return Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n"
"\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n"
"\n"
"        // Retrieve the validated input...\n"
"        $validated = $validator->validated();\n"
"\n"
"        // Retrieve a portion of the validated input...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n"
"\n"
"        // Store the blog post...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 134 (paragraph)
msgid "If you would like to create a validator instance manually but still take advantage of the automatic redirection offered by the HTTP request's `validate` method, you may call the `validate` method on an existing validator instance. If validation fails, the user will automatically be redirected or, in the case of an XHR request, a JSON response will be returned:"
msgstr ""

#: docs/8.x/validation.md:block 159 (header)
msgid "After Validation Hook"
msgstr ""

#: docs/8.x/validation.md:block 160 (paragraph)
msgid "You may also attach callbacks to be run after validation is completed. This allows you to easily perform further validation and even add more error messages to the message collection. To get started, call the `after` method on a validator instance:"
msgstr ""

#: docs/8.x/validation.md:block 161 (code)
msgid ""
"$validator = Validator::make(...);\n"
"\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n"
"\n"
"if ($validator->fails()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 169 (code)
msgid ""
"// Validated data may be iterated...\n"
"foreach ($request->safe() as $key => $value) {\n"
"    //\n"
"}\n"
"\n"
"// Validated data may be accessed as an array...\n"
"$validated = $request->safe();\n"
"\n"
"$email = $validated['email'];\n"
msgstr ""

#: docs/8.x/validation.md:block 184 (code)
msgid ""
"foreach ($errors->get('email') as $message) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 186 (code)
msgid ""
"foreach ($errors->get('attachments.*') as $message) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 190 (code)
msgid ""
"foreach ($errors->all() as $message) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 194 (code)
msgid ""
"if ($errors->has('email')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 201 (paragraph)
msgid "You may customize the error messages used for specified attribute and rule combinations within your application's validation language files. To do so, add your message customizations to the `custom` array of your application's `resources/lang/xx/validation.php` language file:"
msgstr ""

#: docs/8.x/validation.md:block 205 (paragraph)
msgid "Many of Laravel's built-in error messages include an `:attribute` placeholder that is replaced with the name of the field or attribute under validation. If you would like the `:attribute` portion of your validation message to be replaced with a custom value, you may specify the custom attribute name in the `attributes` array of your `resources/lang/xx/validation.php` language file:"
msgstr ""

#: docs/8.x/validation.md:block 213 (paragraph)
msgid "Instead of displaying `cc` as the payment type value, you may specify a more user-friendly value representation in your `resources/lang/xx/validation.php` language file by defining a `values` array:"
msgstr ""

#: docs/8.x/validation.md:block 222 (paragraph)
msgid "[Accepted](#rule-accepted) [Accepted If](#rule-accepted-if) [Active URL](#rule-active-url) [After (Date)](#rule-after) [After Or Equal (Date)](#rule-after-or-equal) [Alpha](#rule-alpha) [Alpha Dash](#rule-alpha-dash) [Alpha Numeric](#rule-alpha-num) [Array](#rule-array) [Bail](#rule-bail) [Before (Date)](#rule-before) [Before Or Equal (Date)](#rule-before-or-equal) [Between](#rule-between) [Boolean](#rule-boolean) [Confirmed](#rule-confirmed) [Current Password](#rule-current-password) [Date](#rule-date) [Date Equals](#rule-date-equals) [Date Format](#rule-date-format) [Declined](#rule-declined) [Declined If](#rule-declined-if) [Different](#rule-different) [Digits](#rule-digits) [Digits Between](#rule-digits-between) [Dimensions (Image Files)](#rule-dimensions) [Distinct](#rule-distinct) [Email](#rule-email) [Ends With](#rule-ends-with) [Enum](#rule-enum) [Exclude](#rule-exclude) [Exclude If](#rule-exclude-if) [Exclude Unless](#rule-exclude-unless) [Exclude Without](#rule-exclude-without) [Exists (Database)](#rule-exists) [File](#rule-file) [Filled](#rule-filled) [Greater Than](#rule-gt) [Greater Than Or Equal](#rule-gte) [Image (File)](#rule-image) [In](#rule-in) [In Array](#rule-in-array) [Integer](#rule-integer) [IP Address](#rule-ip) [MAC Address](#rule-mac) [JSON](#rule-json) [Less Than](#rule-lt) [Less Than Or Equal](#rule-lte) [Max](#rule-max) [MIME Types](#rule-mimetypes) [MIME Type By File Extension](#rule-mimes) [Min](#rule-min) [Multiple Of](#multiple-of) [Not In](#rule-not-in) [Not Regex](#rule-not-regex) [Nullable](#rule-nullable) [Numeric](#rule-numeric) [Password](#rule-password) [Present](#rule-present) [Prohibited](#rule-prohibited) [Prohibited If](#rule-prohibited-if) [Prohibited Unless](#rule-prohibited-unless) [Prohibits](#rule-prohibits) [Regular Expression](#rule-regex) [Required](#rule-required) [Required If](#rule-required-if) [Required Unless](#rule-required-unless) [Required With](#rule-required-with) [Required With All](#rule-required-with-all) [Required Without](#rule-required-without) [Required Without All](#rule-required-without-all) [Same](#rule-same) [Size](#rule-size) [Sometimes](#validating-when-present) [Starts With](#rule-starts-with) [String](#rule-string) [Timezone](#rule-timezone) [Unique (Database)](#rule-unique) [URL](#rule-url) [UUID](#rule-uuid)"
msgstr ""

#: docs/8.x/validation.md:block 244 (paragraph)
msgid "The field under validation must be entirely alphabetic characters."
msgstr ""

#: docs/8.x/validation.md:block 247 (paragraph)
msgid "The field under validation may have alpha-numeric characters, as well as dashes and underscores."
msgstr ""

#: docs/8.x/validation.md:block 250 (paragraph)
msgid "The field under validation must be entirely alpha-numeric characters."
msgstr ""

#: docs/8.x/validation.md:block 255 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$input = [\n"
"    'user' => [\n"
"        'name' => 'Taylor Otwell',\n"
"        'username' => 'taylorotwell',\n"
"        'admin' => true,\n"
"    ],\n"
"];\n"
"\n"
"Validator::make($input, [\n"
"    'user' => 'array:username,locale',\n"
"]);\n"
msgstr ""

#: docs/8.x/validation.md:block 257 (paragraph)
msgid "If you would like, you may instruct Laravel's validator to never include unvalidated array keys in the \"validated\" data it returns, even if you use the `array` rule without specifying a list of allowed keys. To accomplish this, you may call the validator's `excludeUnvalidatedArrayKeys` method in the `boot` method of your application's `AppServiceProvider`. After doing so, the validator will include array keys in the \"validated\" data it returns only when those keys were specifically validated by [nested array rules](#validating-arrays):"
msgstr ""

#: docs/8.x/validation.md:block 258 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Validator::excludeUnvalidatedArrayKeys();\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 272 (paragraph)
msgid "The field under validation must have a size between the given *min* and *max*. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#: docs/8.x/validation.md:block 290 (header)
msgid "date_format:*format*"
msgstr ""

#: docs/8.x/validation.md:block 291 (paragraph)
msgid "The field under validation must match the given *format*. You should use **either** `date` or `date_format` when validating a field, not both. This validation rule supports all formats supported by PHP's [DateTime](https://www.php.net/manual/en/class.datetime.php) class."
msgstr ""

#: docs/8.x/validation.md:block 303 (paragraph)
msgid "The field under validation must be *numeric* and must have an exact length of *value*."
msgstr ""

#: docs/8.x/validation.md:block 306 (paragraph)
msgid "The field under validation must be *numeric* and must have a length between the given *min* and *max*."
msgstr ""

#: docs/8.x/validation.md:block 333 (quote)
msgid "{note} The `dns` and `spoof` validators require the PHP `intl` extension."
msgstr ""

#: docs/8.x/validation.md:block 341 (quote)
msgid "{note} Enums are only available on PHP 8.1+."
msgstr ""

#: docs/8.x/validation.md:block 370 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::exists('staff')->where(function ($query) {\n"
"            return $query->where('account_id', 1);\n"
"        }),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/8.x/validation.md:block 379 (paragraph)
msgid "The field under validation must be greater than the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#: docs/8.x/validation.md:block 382 (paragraph)
msgid "The field under validation must be greater than or equal to the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#: docs/8.x/validation.md:block 391 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"$input = [\n"
"    'airports' => ['NYC', 'LAS'],\n"
"];\n"
"\n"
"Validator::make($input, [\n"
"    'airports' => [\n"
"        'required',\n"
"        'array',\n"
"        Rule::in(['NYC', 'LIT']),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/8.x/validation.md:block 398 (quote)
msgid "{note} This validation rule does not verify that the input is of the \"integer\" variable type, only that the input is of a type accepted by PHP's `FILTER_VALIDATE_INT` rule. If you need to validate the input as being a number please use this rule in combination with [the `numeric` validation rule](#rule-numeric)."
msgstr ""

#: docs/8.x/validation.md:block 442 (quote)
msgid "{note} The [`bcmath` PHP extension](https://www.php.net/manual/en/book.bc.php) is required in order to use the `multiple_of` rule."
msgstr ""

#: docs/8.x/validation.md:block 451 (quote)
msgid "{note} When using the `regex` / `not_regex` patterns, it may be necessary to specify your validation rules using an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr ""

#: docs/8.x/validation.md:block 461 (quote)
msgid "{note} This rule was renamed to `current_password` with the intention of removing it in Laravel 9. Please use the [Current Password](#rule-current-password) rule instead."
msgstr ""

#: docs/8.x/validation.md:block 464 (paragraph)
msgid "The field under validation must be present in the input data but can be empty."
msgstr ""

#: docs/8.x/validation.md:block 467 (paragraph)
msgid "The field under validation must be empty or not present."
msgstr ""

#: docs/8.x/validation.md:block 470 (paragraph)
msgid "The field under validation must be empty or not present if the *anotherfield* field is equal to any *value*."
msgstr ""

#: docs/8.x/validation.md:block 473 (paragraph)
msgid "The field under validation must be empty or not present unless the *anotherfield* field is equal to any *value*."
msgstr ""

#: docs/8.x/validation.md:block 476 (paragraph)
msgid "If the field under validation is present, no fields in *anotherfield* can be present, even if empty."
msgstr ""

#: docs/8.x/validation.md:block 481 (quote)
msgid "{note} When using the `regex` / `not_regex` patterns, it may be necessary to specify rules in an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr ""

#: docs/8.x/validation.md:block 484 (paragraph)
msgid "The field under validation must be present in the input data and not empty. A field is considered \"empty\" if one of the following conditions are true:"
msgstr ""

#: docs/8.x/validation.md:block 492 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"]);\n"
"\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf(function () use ($request) {\n"
"        return $request->user()->is_admin;\n"
"    }),\n"
"]);\n"
msgstr ""

#: docs/8.x/validation.md:block 523 (paragraph)
msgid "The field under validation must be a valid timezone identifier according to the `timezone_identifiers_list` PHP function."
msgstr ""

#: docs/8.x/validation.md:block 539 (quote)
msgid "{note} You should never pass any user controlled request input into the `ignore` method. Instead, you should only pass a system generated unique ID such as an auto-incrementing ID or UUID from an Eloquent model instance. Otherwise, your application will be vulnerable to an SQL injection attack."
msgstr ""

#: docs/8.x/validation.md:block 545 (code)
msgid "Rule::unique('users', 'email_address')->ignore($user->id),\n"
msgstr ""

#: docs/8.x/validation.md:block 548 (code)
msgid ""
"'email' => Rule::unique('users')->where(function ($query) {\n"
"    return $query->where('account_id', 1);\n"
"})\n"
msgstr ""

#: docs/8.x/validation.md:block 568 (quote)
msgid "{tip} If you are attempting to validate a field that should always be present but may be empty, check out [this note on optional fields](#a-note-on-optional-fields)."
msgstr ""

#: docs/8.x/validation.md:block 574 (code)
msgid ""
"$validator->sometimes('reason', 'required|max:500', function ($input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr ""

#: docs/8.x/validation.md:block 576 (code)
msgid ""
"$validator->sometimes(['reason', 'cost'], 'required', function ($input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr ""

#: docs/8.x/validation.md:block 577 (quote)
msgid "{tip} The `$input` parameter passed to your closure will be an instance of `Illuminate\\Support\\Fluent` and may be used to access your input and files under validation."
msgstr ""

#: docs/8.x/validation.md:block 581 (code)
msgid ""
"$input = [\n"
"    'channels' => [\n"
"        [\n"
"            'type' => 'email',\n"
"            'address' => 'abigail@example.com',\n"
"        ],\n"
"        [\n"
"            'type' => 'url',\n"
"            'address' => 'https://example.com',\n"
"        ],\n"
"    ],\n"
"];\n"
"\n"
"$validator->sometimes('channels.*.address', 'email', function ($input, $item) {\n"
"    return $item->type === 'email';\n"
"});\n"
"\n"
"$validator->sometimes('channels.*.address', 'url', function ($input, $item) {\n"
"    return $item->type !== 'email';\n"
"});\n"
msgstr ""

#: docs/8.x/validation.md:block 589 (header)
msgid "Excluding Unvalidated Array Keys"
msgstr ""

#: docs/8.x/validation.md:block 616 (code)
msgid ""
"use Illuminate\\Validation\\Rules\\Password;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Password::defaults(function () {\n"
"        $rule = Password::min(8);\n"
"\n"
"        return $this->app->isProduction()\n"
"                    ? $rule->mixedCase()->uncompromised()\n"
"                    : $rule;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 627 (paragraph)
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains two methods: `passes` and `message`. The `passes` method receives the attribute value and name, and should return `true` or `false` depending on whether the attribute value is valid or not. The `message` method should return the validation error message that should be used when validation fails:"
msgstr ""

#: docs/8.x/validation.md:block 628 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"\n"
"class Uppercase implements Rule\n"
"{\n"
"    /**\n"
"     * Determine if the validation rule passes.\n"
"     *\n"
"     * @param  string  $attribute\n"
"     * @param  mixed  $value\n"
"     * @return bool\n"
"     */\n"
"    public function passes($attribute, $value)\n"
"    {\n"
"        return strtoupper($value) === $value;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the validation error message.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function message()\n"
"    {\n"
"        return 'The :attribute must be uppercase.';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 629 (paragraph)
msgid "You may call the `trans` helper from your `message` method if you would like to return an error message from your translation files:"
msgstr ""

#: docs/8.x/validation.md:block 630 (code)
msgid ""
"/**\n"
" * Get the validation error message.\n"
" *\n"
" * @return string\n"
" */\n"
"public function message()\n"
"{\n"
"    return trans('validation.uppercase');\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 635 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"\n"
"class Uppercase implements Rule, DataAwareRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $data = [];\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData($data)\n"
"    {\n"
"        $this->data = $data;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 637 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n"
"\n"
"class Uppercase implements Rule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the current validator.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return $this\n"
"     */\n"
"    public function setValidator($validator)\n"
"    {\n"
"        $this->validator = $validator;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/validation.md:block 641 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function ($attribute, $value, $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail('The '.$attribute.' is invalid.');\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/8.x/validation.md:block 646 (paragraph)
msgid "For a custom rule to run even when an attribute is empty, the rule must imply that the attribute is required. To create an \"implicit\" rule, implement the `Illuminate\\Contracts\\Validation\\ImplicitRule` interface. This interface serves as a \"marker interface\" for the validator; therefore, it does not contain any additional methods you need to implement beyond the methods required by the typical `Rule` interface."
msgstr ""

#: docs/8.x/validation.md:block 647 (paragraph)
msgid "To generate a new implicit rule object, you may use the `make:rule` Artisan command with the `--implicit` option :"
msgstr ""

#: docs/8.x/validation.md:block 648 (code)
msgid " php artisan make:rule Uppercase --implicit\n"
msgstr ""

#: docs/8.x/validation.md:block 649 (quote)
msgid "{note} An \"implicit\" rule only *implies* that the attribute is required. Whether it actually invalidates a missing or empty attribute is up to you."
msgstr ""

#: docs/9.x/validation.md:block 49 (paragraph)
msgid "Laravel's built-in validation rules each have an error message that is located in your application's `lang/en/validation.php` file. Within this file, you will find a translation entry for each validation rule. You are free to change or modify these messages based on the needs of your application."
msgstr ""

#: docs/9.x/validation.md:block 129 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle a passed validation attempt.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function passedValidation()\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"
msgstr ""

#: docs/9.x/validation.md:block 168 (code)
msgid ""
"$validator = Validator::make(/* ... */);\n"
"\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n"
"\n"
"if ($validator->fails()) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/9.x/validation.md:block 229 (paragraph)
msgid "[Accepted](#rule-accepted) [Accepted If](#rule-accepted-if) [Active URL](#rule-active-url) [After (Date)](#rule-after) [After Or Equal (Date)](#rule-after-or-equal) [Alpha](#rule-alpha) [Alpha Dash](#rule-alpha-dash) [Alpha Numeric](#rule-alpha-num) [Array](#rule-array) [Ascii](#rule-ascii) [Bail](#rule-bail) [Before (Date)](#rule-before) [Before Or Equal (Date)](#rule-before-or-equal) [Between](#rule-between) [Boolean](#rule-boolean) [Confirmed](#rule-confirmed) [Current Password](#rule-current-password) [Date](#rule-date) [Date Equals](#rule-date-equals) [Date Format](#rule-date-format) [Decimal](#rule-decimal) [Declined](#rule-declined) [Declined If](#rule-declined-if) [Different](#rule-different) [Digits](#rule-digits) [Digits Between](#rule-digits-between) [Dimensions (Image Files)](#rule-dimensions) [Distinct](#rule-distinct) [Doesnt Start With](#rule-doesnt-start-with) [Doesnt End With](#rule-doesnt-end-with) [Email](#rule-email) [Ends With](#rule-ends-with) [Enum](#rule-enum) [Exclude](#rule-exclude) [Exclude If](#rule-exclude-if) [Exclude Unless](#rule-exclude-unless) [Exclude With](#rule-exclude-with) [Exclude Without](#rule-exclude-without) [Exists (Database)](#rule-exists) [File](#rule-file) [Filled](#rule-filled) [Greater Than](#rule-gt) [Greater Than Or Equal](#rule-gte) [Image (File)](#rule-image) [In](#rule-in) [In Array](#rule-in-array) [Integer](#rule-integer) [IP Address](#rule-ip) [JSON](#rule-json) [Less Than](#rule-lt) [Less Than Or Equal](#rule-lte) [Lowercase](#rule-lowercase) [MAC Address](#rule-mac) [Max](#rule-max) [Max Digits](#rule-max-digits) [MIME Types](#rule-mimetypes) [MIME Type By File Extension](#rule-mimes) [Min](#rule-min) [Min Digits](#rule-min-digits) [Missing](#rule-missing) [Missing If](#rule-missing-if) [Missing Unless](#rule-missing-unless) [Missing With](#rule-missing-with) [Missing With All](#rule-missing-with-all) [Multiple Of](#rule-multiple-of) [Not In](#rule-not-in) [Not Regex](#rule-not-regex) [Nullable](#rule-nullable) [Numeric](#rule-numeric) [Password](#rule-password) [Present](#rule-present) [Prohibited](#rule-prohibited) [Prohibited If](#rule-prohibited-if) [Prohibited Unless](#rule-prohibited-unless) [Prohibits](#rule-prohibits) [Regular Expression](#rule-regex) [Required](#rule-required) [Required If](#rule-required-if) [Required Unless](#rule-required-unless) [Required With](#rule-required-with) [Required With All](#rule-required-with-all) [Required Without](#rule-required-without) [Required Without All](#rule-required-without-all) [Required Array Keys](#rule-required-array-keys) [Same](#rule-same) [Size](#rule-size) [Sometimes](#validating-when-present) [Starts With](#rule-starts-with) [String](#rule-string) [Timezone](#rule-timezone) [Unique (Database)](#rule-unique) [Uppercase](#rule-uppercase) [URL](#rule-url) [ULID](#rule-ulid) [UUID](#rule-uuid)"
msgstr ""

#: docs/9.x/validation.md:block 365 (quote)
msgid "**Warning** Enums are only available on PHP 8.1+."
msgstr ""

#: docs/9.x/validation.md:block 619 (code)
msgid "'email' => Rule::unique('users')->where(fn ($query) => $query->where('account_id', 1))\n"
msgstr ""

#: docs/9.x/validation.md:block 676 (code)
msgid ""
"use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function ($value, $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"
msgstr ""

#: docs/9.x/validation.md:block 687 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\File;\n"
"\n"
"Validator::validate($input, [\n"
"    'photo' => [\n"
"        'required',\n"
"        File::image()\n"
"            ->min(1024)\n"
"            ->max(12 * 1024)\n"
"            ->dimensions(Rule::dimensions()->maxWidth(1000)->maxHeight(500)),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/9.x/validation.md:block 719 (code)
msgid "php artisan make:rule Uppercase --invokable\n"
msgstr ""

#: docs/9.x/validation.md:block 720 (paragraph)
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains a single method: `__invoke`. This method receives the attribute name, its value, and a callback that should be invoked on failure with the validation error message:"
msgstr ""

#: docs/9.x/validation.md:block 721 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n"
"\n"
"class Uppercase implements InvokableRule\n"
"{\n"
"    /**\n"
"     * Run the validation rule.\n"
"     *\n"
"     * @param  string  $attribute\n"
"     * @param  mixed  $value\n"
"     * @param  \\Closure  $fail\n"
"     * @return void\n"
"     */\n"
"    public function __invoke($attribute, $value, $fail)\n"
"    {\n"
"        if (strtoupper($value) !== $value) {\n"
"            $fail('The :attribute must be uppercase.');\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/validation.md:block 731 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n"
"\n"
"class Uppercase implements DataAwareRule, InvokableRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $data = [];\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData($data)\n"
"    {\n"
"        $this->data = $data;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/validation.md:block 733 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n"
"\n"
"class Uppercase implements InvokableRule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the current validator.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return $this\n"
"     */\n"
"    public function setValidator($validator)\n"
"    {\n"
"        $this->validator = $validator;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/validation.md:block 743 (code)
msgid "php artisan make:rule Uppercase --invokable --implicit\n"
msgstr ""

#: docs/master/validation.md:block 18 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     */\n"
"    public function create(): View\n"
"    {\n"
"        return view('post.create');\n"
"    }\n"
"\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        // Validate and store the blog post...\n"
"\n"
"        $post = /** ... */\n"
"\n"
"        return to_route('post.show', ['post' => $post->id]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 24 (code)
msgid ""
"/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(Request $request): Response\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n"
"\n"
"    // The blog post is valid...\n"
"\n"
"    return response()->noContent();\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 89 (code)
msgid ""
"/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(StorePostRequest $request): Response\n"
"{\n"
"    // The incoming request is valid...\n"
"\n"
"    // Retrieve the validated input data...\n"
"    $validated = $request->validated();\n"
"\n"
"    // Retrieve a portion of the validated input data...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n"
"\n"
"    // Store the blog post...\n"
"\n"
"    return response()->noContent();\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 94 (code)
msgid ""
"use Illuminate\\Validation\\Validator;\n"
"\n"
"/**\n"
" * Configure the validator instance.\n"
" */\n"
"public function withValidator(Validator $validator): void\n"
"{\n"
"    $validator->after(function (Validator $validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 130 (code)
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle a passed validation attempt.\n"
" */\n"
"protected function passedValidation(): void\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 134 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): Response\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n"
"\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n"
"\n"
"        // Retrieve the validated input...\n"
"        $validated = $validator->validated();\n"
"\n"
"        // Retrieve a portion of the validated input...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n"
"\n"
"        // Store the blog post...\n"
"\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 169 (code)
msgid ""
"use Illuminate\\Support\\Facades;\n"
"use Illuminate\\Validation\\Validator;\n"
"\n"
"$validator = Facades\\Validator::make(/* ... */);\n"
"\n"
"$validator->after(function (Validator $validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n"
"\n"
"if ($validator->fails()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 613 (code)
msgid ""
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::unique('users')->ignore($user->id),\n"
"    ],\n"
"]);\n"
msgstr ""

#: docs/master/validation.md:block 735 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Rules;\n"
"\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n"
"\n"
"class Uppercase implements DataAwareRule, ValidationRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array<string, mixed>\n"
"     */\n"
"    protected $data = [];\n"
"\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array<string, mixed>  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData(array $data): static\n"
"    {\n"
"        $this->data = $data;\n"
"\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/validation.md:block 741 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function (string $attribute, mixed $value, Closure $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail(\"The {$attribute} is invalid.\");\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"
msgstr ""
