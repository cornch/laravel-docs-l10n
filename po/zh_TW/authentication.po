msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-02-08 06:32+0000\n"
"PO-Revision-Date: 2022-02-08 07:13\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/authentication.pot\n"
"X-Crowdin-File-ID: 11\n"

# File: docs/8.x/authentication.md, line: 1
# File: docs/9.x/authentication.md, line: 1
# File: docs/master/authentication.md, line: 1
#. type: Title #
#, no-wrap
msgid "Authentication"
msgstr "認證"

# File: docs/8.x/authentication.md, line: 30
# File: docs/9.x/authentication.md, line: 30
# File: docs/master/authentication.md, line: 30
#. type: Plain text
#, no-wrap
msgid "- [Introduction](#introduction)\n"
"    - [Starter Kits](#starter-kits)\n"
"    - [Database Considerations](#introduction-database-considerations)\n"
"    - [Ecosystem Overview](#ecosystem-overview)\n"
"- [Authentication Quickstart](#authentication-quickstart)\n"
"    - [Install A Starter Kit](#install-a-starter-kit)\n"
"    - [Retrieving The Authenticated User](#retrieving-the-authenticated-user)\n"
"    - [Protecting Routes](#protecting-routes)\n"
"    - [Login Throttling](#login-throttling)\n"
"- [Manually Authenticating Users](#authenticating-users)\n"
"    - [Remembering Users](#remembering-users)\n"
"    - [Other Authentication Methods](#other-authentication-methods)\n"
"- [HTTP Basic Authentication](#http-basic-authentication)\n"
"    - [Stateless HTTP Basic Authentication](#stateless-http-basic-authentication)\n"
"- [Logging Out](#logging-out)\n"
"    - [Invalidating Sessions On Other Devices](#invalidating-sessions-on-other-devices)\n"
"- [Password Confirmation](#password-confirmation)\n"
"    - [Configuration](#password-confirmation-configuration)\n"
"    - [Routing](#password-confirmation-routing)\n"
"    - [Protecting Routes](#password-confirmation-protecting-routes)\n"
"- [Adding Custom Guards](#adding-custom-guards)\n"
"    - [Closure Request Guards](#closure-request-guards)\n"
"- [Adding Custom User Providers](#adding-custom-user-providers)\n"
"    - [The User Provider Contract](#the-user-provider-contract)\n"
"    - [The Authenticatable Contract](#the-authenticatable-contract)\n"
"- [Social Authentication](/docs/{{version}}/socialite)\n"
"- [Events](#events)\n"
msgstr "- [簡介](#introduction)\n"
"    - [入門套件](#starter-kits)\n"
"    - [資料庫考量](#introduction-database-considerations)\n"
"    - [生態鏈概覽](#ecosystem-overview)\n"
"- [「認證」快速入門](#authentication-quickstart)\n"
"    - [安裝一個入門套件](#install-a-starter-kit)\n"
"    - [取得已登入的使用者](#retrieving-the-authenticated-user)\n"
"    - [保護路由](#protecting-routes)\n"
"    - [登入頻率限制](#login-throttling)\n"
"- [手動認證使用者](#authenticating-users)\n"
"    - [記住使用者](#remembering-users)\n"
"    - [手動認證使用者](#other-authentication-methods)\n"
"- [HTTP 基本認證](#http-basic-authentication)\n"
"    - [Stateless HTTP 基本認證](#stateless-http-basic-authentication)\n"
"- [登出](#logging-out)\n"
"    - [無效化其他裝置上的 Session](#invalidating-sessions-on-other-devices)\n"
"- [密碼確認](#password-confirmation)\n"
"    - [組態設定](#password-confirmation-configuration)\n"
"    - [路由](#password-confirmation-routing)\n"
"    - [保護路由](#password-confirmation-protecting-routes)\n"
"- [新增自定 Guard](#adding-custom-guards)\n"
"    - [閉包請求 Guard](#closure-request-guards)\n"
"- [新增自定 User Providers](#adding-custom-user-providers)\n"
"    - [User Provider Contract](#the-user-provider-contract)\n"
"    - [Authenticatable Contract](#the-authenticatable-contract)\n"
"- [社群登入](/docs/{{version}}/socialite)\n"
"- [事件](#events)\n"

# File: docs/8.x/authentication.md, line: 32
# File: docs/9.x/authentication.md, line: 32
# File: docs/master/authentication.md, line: 32
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/authentication.md, line: 32
# File: docs/9.x/authentication.md, line: 32
# File: docs/master/authentication.md, line: 32
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/authentication.md, line: 35
# File: docs/9.x/authentication.md, line: 35
# File: docs/master/authentication.md, line: 35
#. type: Plain text
msgid "Many web applications provide a way for their users to authenticate with the application and \"login\". Implementing this feature in web applications can be a complex and potentially risky endeavor. For this reason, Laravel strives to give you the tools you need to implement authentication quickly, securely, and easily."
msgstr "許多網頁 App 都提供了讓使用者向 App 認證以及「登入」的功能。在網頁 App 上實作這些功能可能會很複雜，而且可能會有些風險。為此，Laravel 竭力為你提供了用於快速、安全、且簡單地實作認證功能的工具。"

# File: docs/8.x/authentication.md, line: 37
# File: docs/9.x/authentication.md, line: 37
# File: docs/master/authentication.md, line: 37
#. type: Plain text
msgid "At its core, Laravel's authentication facilities are made up of \"guards\" and \"providers\". Guards define how users are authenticated for each request. For example, Laravel ships with a `session` guard which maintains state using session storage and cookies."
msgstr "在 Laravel 的核心中，認證功能是通過「Guard」與「Provider」來提供的。Guard 用來定義使用者在每個請求上是如何被認證的。舉例來說，Laravel 附帶了一個 `session` Guard，會通過 Session 儲存空間與 Cookie 來維護認證狀態。"

# File: docs/8.x/authentication.md, line: 39
# File: docs/9.x/authentication.md, line: 39
# File: docs/master/authentication.md, line: 39
#. type: Plain text
msgid "Providers define how users are retrieved from your persistent storage. Laravel ships with support for retrieving users using [Eloquent](/docs/{{version}}/eloquent) and the database query builder. However, you are free to define additional providers as needed for your application."
msgstr "Provider 則定義了要如何從長期儲存空間內取得使用者。Laravel 內建支援使用 [Eloquent](/docs/{{version}}/eloquent) 或資料庫 Query Builder 來取得使用者。不過，你也可以自行依據需求額外定義其他 Provider。"

# File: docs/8.x/authentication.md, line: 41
# File: docs/9.x/authentication.md, line: 41
# File: docs/master/authentication.md, line: 41
#. type: Plain text
msgid "Your application's authentication configuration file is located at `config/auth.php`. This file contains several well-documented options for tweaking the behavior of Laravel's authentication services."
msgstr "你的專案的認證組態設定檔位於 `config/auth.php` 內。該檔案包含了多個有文件說明的選項，可以調整 Laravel 認證服務的行為。"

# File: docs/8.x/authentication.md, line: 43
# File: docs/9.x/authentication.md, line: 43
# File: docs/master/authentication.md, line: 43
#. type: Plain text
#, no-wrap
msgid "> {tip} Guards and providers should not be confused with \"roles\" and \"permissions\". To learn more about authorizing user actions via permissions, please refer to the [authorization](/docs/{{version}}/authorization) documentation.\n"
msgstr "> {tip} Guard 與 Provider 與「角色」以及「權限」不同，不應溷肴。要瞭解如何依照權限來授權使用者的方法，請參考 [授權](/docs/{{version}}/authorization) 說明文件。\n"

# File: docs/8.x/authentication.md, line: 45
# File: docs/9.x/authentication.md, line: 45
# File: docs/master/authentication.md, line: 45
#. type: Plain text
#, no-wrap
msgid "<a name=\"starter-kits\"></a>\n"
msgstr "<a name=\"starter-kits\"></a>\n"

# File: docs/8.x/authentication.md, line: 45
# File: docs/9.x/authentication.md, line: 45
# File: docs/master/authentication.md, line: 45
#. type: Title ###
#, no-wrap
msgid "Starter Kits"
msgstr "入門套件"

# File: docs/8.x/authentication.md, line: 48
# File: docs/9.x/authentication.md, line: 48
# File: docs/master/authentication.md, line: 48
#. type: Plain text
msgid "Want to get started fast? Install a [Laravel application starter kit](/docs/{{version}}/starter-kits) in a fresh Laravel application. After migrating your database, navigate your browser to `/register` or any other URL that is assigned to your application. The starter kits will take care of scaffolding your entire authentication system!"
msgstr "想要快速入門嗎？請在全新的 Laravel 專案內安裝一個 [Laravel 專案入門套件](docs/{{version}}/starter-kits)。完成資料庫遷移後，在瀏覽器上開啟 `/register` 或其他任何設定給應用程式的 URL。這些入門套件會幫你搞定整個認證系統的 Scaffolding。"

# File: docs/8.x/authentication.md, line: 50
# File: docs/9.x/authentication.md, line: 50
# File: docs/master/authentication.md, line: 50
#. type: Plain text
#, no-wrap
msgid "**Even if you choose not to use a starter kit in your final Laravel application, installing the [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze) starter kit can be a wonderful opportunity to learn how to implement all of Laravel's authentication functionality in an actual Laravel project.** Since Laravel Breeze creates authentication controllers, routes, and views for you, you can examine the code within these files to learn how Laravel's authentication features may be implemented.\n"
msgstr "**就算最後不會在 Laravel 專案上使用任何一種入門套件，安裝 [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze) 入門套件也是個學習如何在實際 Laravel 專案上實作所有 Laravel 認證功能的好機會。** 由於 Laravel Breeze 會為你建立好認證 Controller、路由、以及 View，因此可以通過閱讀這些檔案的程式碼來學習可如何實作 Laravel 的認證功能。\n"

# File: docs/8.x/authentication.md, line: 52
# File: docs/9.x/authentication.md, line: 52
# File: docs/master/authentication.md, line: 52
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction-database-considerations\"></a>\n"
msgstr "<a name=\"introduction-database-considerations\"></a>\n"

# File: docs/8.x/authentication.md, line: 52
# File: docs/9.x/authentication.md, line: 52
# File: docs/master/authentication.md, line: 52
#. type: Title ###
#, no-wrap
msgid "Database Considerations"
msgstr "資料庫選擇"

# File: docs/8.x/authentication.md, line: 55
# File: docs/9.x/authentication.md, line: 55
# File: docs/master/authentication.md, line: 55
#. type: Plain text
msgid "By default, Laravel includes an `App\\Models\\User` [Eloquent model](/docs/{{version}}/eloquent) in your `app/Models` directory. This model may be used with the default Eloquent authentication driver. If your application is not using Eloquent, you may use the `database` authentication provider which uses the Laravel query builder."
msgstr "預設情況下，Laravel 在 `app/Models` 資料夾中包含了一個 `App\\Models\\User` [Eloquent Model](/docs/{{version}}/eloquent)。這個 Model 可以用在預設的 Eloquent 登入 Driver 上。若你的專案不使用 Eloquent，則可以使用 `database` 認證 Provider，該 Provider 使用 Laravel 的 Query Builder。"

# File: docs/8.x/authentication.md, line: 57
# File: docs/9.x/authentication.md, line: 57
# File: docs/master/authentication.md, line: 57
#. type: Plain text
msgid "When building the database schema for the `App\\Models\\User` model, make sure the password column is at least 60 characters in length. Of course, the `users` table migration that is included in new Laravel applications already creates a column that exceeds this length."
msgstr "為 `App\\Models\\User` 模型建立資料庫結構時，請確保密碼欄位的長度至少有 60 個字元。當然，在新建立的 Laravel 專案中， `users` 資料表遷移檔已經建立了超過這個長度的欄位。"

# File: docs/8.x/authentication.md, line: 59
# File: docs/9.x/authentication.md, line: 59
# File: docs/master/authentication.md, line: 59
#. type: Plain text
msgid "Also, you should verify that your `users` (or equivalent) table contains a nullable, string `remember_token` column of 100 characters. This column will be used to store a token for users that select the \"remember me\" option when logging into your application. Again, the default `users` table migration that is included in new Laravel applications already contains this column."
msgstr "另外，也請求確保 `users`（或其相應的）資料表有包含一個 Nullable、100 字元的 `remember_token` 字串欄位。該欄位會用來在使用者登入時勾選「記住我」選項時使用。同樣地，在新建立的 Laravel 專案中，`users` 資料表遷移檔已經有包含了這個欄位。"

# File: docs/8.x/authentication.md, line: 61
# File: docs/9.x/authentication.md, line: 61
# File: docs/master/authentication.md, line: 61
#. type: Plain text
#, no-wrap
msgid "<a name=\"ecosystem-overview\"></a>\n"
msgstr "<a name=\"ecosystem-overview\"></a>\n"

# File: docs/8.x/authentication.md, line: 61
# File: docs/9.x/authentication.md, line: 61
# File: docs/master/authentication.md, line: 61
#. type: Title ###
#, no-wrap
msgid "Ecosystem Overview"
msgstr "生態鏈概覽"

# File: docs/8.x/authentication.md, line: 64
# File: docs/9.x/authentication.md, line: 64
# File: docs/master/authentication.md, line: 64
#. type: Plain text
msgid "Laravel offers several packages related to authentication. Before continuing, we'll review the general authentication ecosystem in Laravel and discuss each package's intended purpose."
msgstr "Laravel 提供了多個有關認證的套件。在繼續之前，我們先來看看這些 Laravel 中的一般認證生態鏈，並討論各個套件預設的目的。"

# File: docs/8.x/authentication.md, line: 66
# File: docs/9.x/authentication.md, line: 66
# File: docs/master/authentication.md, line: 66
#. type: Plain text
msgid "First, consider how authentication works. When using a web browser, a user will provide their username and password via a login form. If these credentials are correct, the application will store information about the authenticated user in the user's [session](/docs/{{version}}/session). A cookie issued to the browser contains the session ID so that subsequent requests to the application can associate the user with the correct session. After the session cookie is received, the application will retrieve the session data based on the session ID, note that the authentication information has been stored in the session, and will consider the user as \"authenticated\"."
msgstr "首先，我們先來看看認證是怎麼運作的。在使用網頁瀏覽器時，使用者會通過登入表格來提供他們的使用者名稱以及密碼。若帳號密碼正確，則網站會將已認證使用者的資訊儲存在使用者的 [Session](/docs/{{version}}/session) 中。Cookie 會傳給瀏覽器，其中包含了 Session ID。這樣一來，我們就可以通過正確的 Session 來將接下來向網站發起的請求與使用者連結起來。收到 Session Cookie 後，網站會依據 Session ID 來取得 Session 資料。請注意，由於認證資訊已經被保存在 Session 中了，所以該使用者將被視為「已認證」。"

# File: docs/8.x/authentication.md, line: 68
# File: docs/9.x/authentication.md, line: 68
# File: docs/master/authentication.md, line: 68
#. type: Plain text
msgid "When a remote service needs to authenticate to access an API, cookies are not typically used for authentication because there is no web browser. Instead, the remote service sends an API token to the API on each request. The application may validate the incoming token against a table of valid API tokens and \"authenticate\" the request as being performed by the user associated with that API token."
msgstr "當遠端服務需要認證來存取 API 時，通常不會在認證上使用 Cookie，因為這種情況下並沒有網頁瀏覽器。取而代之地，遠端服務會在每個請求時帶上 API 權杖。網站可以通過將傳入的權杖與包含了有效 API 憑證的資料表進行比對來「認證」該請求，並將其視為是有與 API 權杖管理的使用者所進行的操作。"

# File: docs/8.x/authentication.md, line: 70
# File: docs/9.x/authentication.md, line: 70
# File: docs/master/authentication.md, line: 70
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravels-built-in-browser-authentication-services\"></a>\n"
msgstr "<a name=\"laravels-built-in-browser-authentication-services\"></a>\n"

# File: docs/8.x/authentication.md, line: 70
# File: docs/9.x/authentication.md, line: 70
# File: docs/master/authentication.md, line: 70
#. type: Title ####
#, no-wrap
msgid "Laravel's Built-in Browser Authentication Services"
msgstr "Laravel 的內建瀏覽器認證服務"

# File: docs/8.x/authentication.md, line: 73
# File: docs/9.x/authentication.md, line: 73
# File: docs/master/authentication.md, line: 73
#. type: Plain text
msgid "Laravel includes built-in authentication and session services which are typically accessed via the `Auth` and `Session` facades. These features provide cookie-based authentication for requests that are initiated from web browsers. They provide methods that allow you to verify a user's credentials and authenticate the user. In addition, these services will automatically store the proper authentication data in the user's session and issue the user's session cookie. A discussion of how to use these services is contained within this documentation."
msgstr "Laravel 的內建認證與 Session 服務通常會通過 `Auth` 與 `Session` Facade 來存取。這些功能為從瀏覽器發起的請求提供了基於 Cookie 的認證功能。這些功能也提供了能認證使用者憑證與認證使用者的方法。此外，這些服務也會自動將正確的資料儲存在使用者的 Session 內，並為使用者核發 Session Cookie。本文件中包含了如何使用這些服務的討論。"

# File: docs/8.x/authentication.md, line: 75
# File: docs/9.x/authentication.md, line: 75
# File: docs/master/authentication.md, line: 75
#. type: Plain text
#, no-wrap
msgid "**Application Starter Kits**\n"
msgstr "**專案入門套件**\n"

# File: docs/8.x/authentication.md, line: 77
# File: docs/9.x/authentication.md, line: 77
# File: docs/master/authentication.md, line: 77
#. type: Plain text
msgid "As discussed in this documentation, you can interact with these authentication services manually to build your application's own authentication layer. However, to help you get started more quickly, we have released [free packages](/docs/{{version}}/starter-kits) that provide robust, modern scaffolding of the entire authentication layer. These packages are [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze), [Laravel Jetstream](/docs/{{version}}/starter-kits#laravel-jetstream), and [Laravel Fortify](/docs/{{version}}/fortify)."
msgstr "我們剛才也在本文中討論過，你可以通過手動操作這些認證服務來為專案建立一套「認證層」。但，為了讓你可以更快入門，我們也釋出了[一些免費套件](/docs/{{version}}/starter-kits)來提供更快速且現代化的完整認證層 Scaffolding：[Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze), [Laravel Jetstream](/docs/{{version}}/starter-kits#laravel-jetstream)，與 [Laravel Fortify](/docs/{{version}}/fortify)。"

# File: docs/8.x/authentication.md, line: 79
# File: docs/9.x/authentication.md, line: 79
# File: docs/master/authentication.md, line: 79
#. type: Plain text
msgid "_Laravel Breeze_ is a simple, minimal implementation of all of Laravel's authentication features, including login, registration, password reset, email verification, and password confirmation. Laravel Breeze's view layer is comprised of simple [Blade templates](/docs/{{version}}/blade) styled with [Tailwind CSS](https://tailwindcss.com). To get started, check out the documentation on Laravel's [application starter kits](/docs/{{version}}/starter-kits)."
msgstr "**Laravel Breeze** 是一個簡單且最小化實作出所有 Laravel 認證功能的套件，包含登入、註冊、密碼重設、電子郵件認證、以及密碼確認。Laravel Breeze 的檢視器層是通過簡單的 [Blade 樣板](/docs/{{version}}/blade) 搭配 [Tailwind CSS](https://tailwindcss.com) 提供樣式組合而成的。若要瞭解有關 Laravel Breeze，請參考 Laravel 的[專案入門套件](/docs/{{version}}/starter-kits)說明文件。"

# File: docs/8.x/authentication.md, line: 81
# File: docs/9.x/authentication.md, line: 81
# File: docs/master/authentication.md, line: 81
#. type: Plain text
msgid "_Laravel Fortify_ is a headless authentication backend for Laravel that implements many of the features found in this documentation, including cookie-based authentication as well as other features such as two-factor authentication and email verification. Fortify provides the authentication backend for Laravel Jetstream or may be used independently in combination with [Laravel Sanctum](/docs/{{version}}/sanctum) to provide authentication for an SPA that needs to authenticate with Laravel."
msgstr "**Laravel Fortify** 是一種用於 Laravel 的 Headless (無周邊) 認證後端。Laravel Fortify 實作了許多可在此說明文件中找到的功能，包含基於 Cookie 的認證以及其他如二步驟認證與電子郵件認證等功能。Fortify 也為 Laravel Jetstream 提供了認證後端。或者，也可以通過與 [Laravel Sanctum](/docs/{{version}}/sanctum) 組合使用來為需要在 Laravel 中進行認證的 SPA (Single Page Application，單一頁面應用程式) 提供認證功能。"

# File: docs/8.x/authentication.md, line: 83
# File: docs/9.x/authentication.md, line: 83
# File: docs/master/authentication.md, line: 83
#. type: Plain text
msgid "_[Laravel Jetstream](https://jetstream.laravel.com)_ is a robust application starter kit that consumes and exposes Laravel Fortify's authentication services with a beautiful, modern UI powered by [Tailwind CSS](https://tailwindcss.com), [Livewire](https://laravel-livewire.com), and / or [Inertia.js](https://inertiajs.com). Laravel Jetstream includes optional support for two-factor authentication, team support, browser session management, profile management, and built-in integration with [Laravel Sanctum](/docs/{{version}}/sanctum) to offer API token authentication. Laravel's API authentication offerings are discussed below."
msgstr "**[Laravel Jetstream](https://jetstream.laravel.com)** 是一個強大的入門套件，該套件使用者 Laravel Fortify 的認證服務，並將其通過 [Tailwind CSS](https://tailwindcss.com), [Livewire](https://laravel-livewire.com)，與／或 [Inertia.js](https://inertiajs.com) 來提供美麗且現代的 UI。Laravel Jetstream 也提供了對二步驟認證、團隊功能、瀏覽器期程管理、個人檔案管理、以及內建 [Laravel Sanctum](/docs/{{version}}/sunctum) 整合來提供 API 權杖認證的可選支援。我們稍後會討論 Laravel 提供的 API 認證功能。"

# File: docs/8.x/authentication.md, line: 85
# File: docs/9.x/authentication.md, line: 85
# File: docs/master/authentication.md, line: 85
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravels-api-authentication-services\"></a>\n"
msgstr "<a name=\"laravels-api-authentication-services\"></a>\n"

# File: docs/8.x/authentication.md, line: 85
# File: docs/9.x/authentication.md, line: 85
# File: docs/master/authentication.md, line: 85
#. type: Title ####
#, no-wrap
msgid "Laravel's API Authentication Services"
msgstr "Laravel 的 API 認證服務"

# File: docs/8.x/authentication.md, line: 88
# File: docs/9.x/authentication.md, line: 88
# File: docs/master/authentication.md, line: 88
#. type: Plain text
msgid "Laravel provides two optional packages to assist you in managing API tokens and authenticating requests made with API tokens: [Passport](/docs/{{version}}/passport) and [Sanctum](/docs/{{version}}/sanctum). Please note that these libraries and Laravel's built-in cookie based authentication libraries are not mutually exclusive. These libraries primarily focus on API token authentication while the built-in authentication services focus on cookie based browser authentication. Many applications will use both Laravel's built-in cookie based authentication services and one of Laravel's API authentication packages."
msgstr "Laravel 提供了兩個可選的套件來協助你管理 API 權杖以及認證以 API 權杖建立的請求：[Passport](/docs/{{version}}/passport) 與 [Sanctum](/docs/{{version}}/sanctum)。請注意，這些函式庫與 Laravel 內建的基於 Cookie 的認證函式庫並不互相衝突。這些函式庫的重點都是在提供 API 進行權杖認證，而內建的認證服務則著重於基於 Cookie 的瀏覽器認證。許多網站都會同時使用 Laravel 內建的基於 Cookie 的認證服務，以及其中一種 Laravel 的 API 認證套件。"

# File: docs/8.x/authentication.md, line: 90
# File: docs/9.x/authentication.md, line: 90
# File: docs/master/authentication.md, line: 90
#. type: Plain text
#, no-wrap
msgid "**Passport**\n"
msgstr "**Passport**\n"

# File: docs/8.x/authentication.md, line: 92
# File: docs/9.x/authentication.md, line: 92
# File: docs/master/authentication.md, line: 92
#. type: Plain text
msgid "Passport is an OAuth2 authentication provider, offering a variety of OAuth2 \"grant types\" which allow you to issue various types of tokens. In general, this is a robust and complex package for API authentication. However, most applications do not require the complex features offered by the OAuth2 spec, which can be confusing for both users and developers. In addition, developers have been historically confused about how to authenticate SPA applications or mobile applications using OAuth2 authentication providers like Passport."
msgstr "Passport 是一個 OAuth2 認證 Provider，提供了多種 OAuth2 的「Grant Type」來讓你簽發各種不同的權杖。通常來說，對於 API 認證來說 Passport 是一個很強大很複雜的套件。但，大多數的網站並不需要 OAuth2 規格所提供的那些複雜的功能。這些功能只會讓使用者與開發人員都搞不清楚要怎麼用。而且，很多開發人員都搞不懂要怎麽樣使用 Passport 這樣的 OAuth2 認證 Provider 來認證 SPA App 或手機 App。"

# File: docs/8.x/authentication.md, line: 94
# File: docs/9.x/authentication.md, line: 94
# File: docs/master/authentication.md, line: 94
#. type: Plain text
#, no-wrap
msgid "**Sanctum**\n"
msgstr "**Sanctum**\n"

# File: docs/8.x/authentication.md, line: 96
# File: docs/9.x/authentication.md, line: 96
# File: docs/master/authentication.md, line: 96
#. type: Plain text
msgid "In response to the complexity of OAuth2 and developer confusion, we set out to build a simpler, more streamlined authentication package that could handle both first-party web requests from a web browser and API requests via tokens. This goal was realized with the release of [Laravel Sanctum](/docs/{{version}}/sanctum), which should be considered the preferred and recommended authentication package for applications that will be offering a first-party web UI in addition to an API, or will be powered by a single-page application (SPA) that exists separately from the backend Laravel application, or applications that offer a mobile client."
msgstr "為了處理 OAuth2 很複雜的問題以及解決開發者的困惑，我們希望建立一種更簡單、更精簡的認證套件。這個套件不但要可以處理來自網頁瀏覽器的第一方網頁請求，也要可以處理通過權杖發起的 API 請求。我們在 [Laravel Sanctum](/docs/{{version}}/sanctum) 中解決了這些問題。對於「有提供第一方 Web UI 的 API」、「有獨立 Laravel 後端的 SPA」、或是「有提供手機 App 的網站」，Laravel Sanctum 目前是我們推薦與建議的認證套件。"

# File: docs/8.x/authentication.md, line: 98
# File: docs/9.x/authentication.md, line: 98
# File: docs/master/authentication.md, line: 98
#. type: Plain text
msgid "Laravel Sanctum is a hybrid web / API authentication package that can manage your application's entire authentication process. This is possible because when Sanctum based applications receive a request, Sanctum will first determine if the request includes a session cookie that references an authenticated session. Sanctum accomplishes this by calling Laravel's built-in authentication services which we discussed earlier. If the request is not being authenticated via a session cookie, Sanctum will inspect the request for an API token. If an API token is present, Sanctum will authenticate the request using that token. To learn more about this process, please consult Sanctum's [\"how it works\"](/docs/{{version}}/sanctum#how-it-works) documentation."
msgstr "Laravel Sanctum 混合了網頁認證與 API 認證，可以用來處理整個網站的認證流程。怎麼做到的呢？當使用 Sanctum 的網站收到請求後，Sanctum 會先判斷該請求是否有包含了認證 Session 的 Session Cookie。Sanctum 是通過呼叫我們稍早討論過的 Laravel 內建認證服務來達成此一功能的。若該請求的 Session Cookie 未被認證過，則 Sanctum 接著會檢查請求的 API 權杖。若有找到 API 權杖，則 Sanctum 會使用該權杖來認證請求。要瞭解更多有關此一流程的資訊，請參考 Sanctum 的[「運作方式」](/docs/{{version}}/sanctum#how-it-works)說明文件。"

# File: docs/8.x/authentication.md, line: 100
# File: docs/9.x/authentication.md, line: 100
# File: docs/master/authentication.md, line: 100
#. type: Plain text
msgid "Laravel Sanctum is the API package we have chosen to include with the [Laravel Jetstream](https://jetstream.laravel.com) application starter kit because we believe it is the best fit for the majority of web application's authentication needs."
msgstr "Laravel Sanctum 是我們在 [Laravel Jetstream](https://jetstream.laravel.com) 專案入門套件中選擇的 API 套件，因為我們認為該套件最符合大多數網頁 App 的認證需求。"

# File: docs/8.x/authentication.md, line: 102
# File: docs/9.x/authentication.md, line: 102
# File: docs/master/authentication.md, line: 102
#. type: Plain text
#, no-wrap
msgid "<a name=\"summary-choosing-your-stack\"></a>\n"
msgstr "<a name=\"summary-choosing-your-stack\"></a>\n"

# File: docs/8.x/authentication.md, line: 102
# File: docs/9.x/authentication.md, line: 102
# File: docs/master/authentication.md, line: 102
#. type: Title ####
#, no-wrap
msgid "Summary & Choosing Your Stack"
msgstr "總結與選擇你的 Stack"

# File: docs/8.x/authentication.md, line: 105
# File: docs/9.x/authentication.md, line: 105
# File: docs/master/authentication.md, line: 105
#. type: Plain text
msgid "In summary, if your application will be accessed using a browser and you are building a monolithic Laravel application, your application will use Laravel's built-in authentication services."
msgstr "總結一下，若你的專案會通過瀏覽器來存取，而且你只會製作單一一個 Laravel 專案，則應使用 Laravel 的內建認證服務。"

# File: docs/8.x/authentication.md, line: 107
# File: docs/9.x/authentication.md, line: 107
# File: docs/master/authentication.md, line: 107
#. type: Plain text
msgid "Next, if your application offers an API that will be consumed by third parties, you will choose between [Passport](/docs/{{version}}/passport) or [Sanctum](/docs/{{version}}/sanctum) to provide API token authentication for your application. In general, Sanctum should be preferred when possible since it is a simple, complete solution for API authentication, SPA authentication, and mobile authentication, including support for \"scopes\" or \"abilities\"."
msgstr "若你的專案中包含了會被第三方使用的 API，則應選擇 [Passport](/docs/{{version}}/passport) 或 [Sanctum](/docs/{{version}}/sanctum) 來為專案提供 API 權杖認證。一般來說，應該儘量先選擇 Sanctum，因為 Sanctum 對 API 認證、SPA 認證、以及行動裝置認證來說是最簡單且完整的解決方案，而且也支援「範圍 (Scope)」與「權限 (Ability)」。"

# File: docs/8.x/authentication.md, line: 109
# File: docs/9.x/authentication.md, line: 109
# File: docs/master/authentication.md, line: 109
#. type: Plain text
msgid "If you are building a single-page application (SPA) that will be powered by a Laravel backend, you should use [Laravel Sanctum](/docs/{{version}}/sanctum). When using Sanctum, you will either need to [manually implement your own backend authentication routes](#authenticating-users) or utilize [Laravel Fortify](/docs/{{version}}/fortify) as a headless authentication backend service that provides routes and controllers for features such as registration, password reset, email verification, and more."
msgstr "如果你正在製作由 Laravel 提供後端的 SPA，則應該使用 [Laravel Sanctum](/docs/{{version}}/sanctum)。在使用 Sanctum 時，會需要[手動實作你自己的認證路由後端](#authenticating-users)，或是使用 [Laravel Fortify](/docs/{{version}}/fortify) 來作為 Headless 的認證後端服務，來為註冊、密碼重設、電子郵件認證等功能提供路由與 Controller。"

# File: docs/8.x/authentication.md, line: 111
# File: docs/9.x/authentication.md, line: 111
# File: docs/master/authentication.md, line: 111
#. type: Plain text
msgid "Passport may be chosen when your application absolutely needs all of the features provided by the OAuth2 specification."
msgstr "當你的專案真的需要所有 OAuth2 規格所提供的功能時，就可以選擇使用 Passport。"

# File: docs/8.x/authentication.md, line: 113
# File: docs/9.x/authentication.md, line: 113
# File: docs/master/authentication.md, line: 113
#. type: Plain text
msgid "And, if you would like to get started quickly, we are pleased to recommend [Laravel Jetstream](https://jetstream.laravel.com) as a quick way to start a new Laravel application that already uses our preferred authentication stack of Laravel's built-in authentication services and Laravel Sanctum."
msgstr "此外，若想要快速入門，我們誠摯推薦你使用 [Laravel Jetstream](https://jetstream.laravel.com) 來作為快速建立新 Laravel 專案的方法。Laravel Jetstream 已經使用了我們偏好的認證 Stack —— 使用 Laravel 的內建認證服務與 Laravel Sanctum。"

# File: docs/8.x/authentication.md, line: 115
# File: docs/9.x/authentication.md, line: 115
# File: docs/master/authentication.md, line: 115
#. type: Plain text
#, no-wrap
msgid "<a name=\"authentication-quickstart\"></a>\n"
msgstr "<a name=\"authentication-quickstart\"></a>\n"

# File: docs/8.x/authentication.md, line: 115
# File: docs/9.x/authentication.md, line: 115
# File: docs/master/authentication.md, line: 115
#. type: Title ##
#, no-wrap
msgid "Authentication Quickstart"
msgstr "「認證」快速入門"

# File: docs/8.x/authentication.md, line: 118
# File: docs/9.x/authentication.md, line: 118
# File: docs/master/authentication.md, line: 118
#. type: Plain text
#, no-wrap
msgid "> {note} This portion of the documentation discusses authenticating users via the [Laravel application starter kits](/docs/{{version}}/starter-kits), which includes UI scaffolding to help you get started quickly. If you would like to integrate with Laravel's authentication systems directly, check out the documentation on [manually authenticating users](#authenticating-users).\n"
msgstr "> {note} 這部分的文件會討論通過 [Laravel 專案入門套件](/docs/{{version}}/starter-kits) 來認證使用者，這些入門套件包含了能協助你快速開始的 UI Scaffolding。若你想要直接與 Laravel 的認證系統整合，請參考[手動認證使用者](#authenticating-users)內的說明文件。\n"

# File: docs/8.x/authentication.md, line: 120
# File: docs/9.x/authentication.md, line: 120
# File: docs/master/authentication.md, line: 120
#. type: Plain text
#, no-wrap
msgid "<a name=\"install-a-starter-kit\"></a>\n"
msgstr "<a name=\"install-a-starter-kit\"></a>\n"

# File: docs/8.x/authentication.md, line: 120
# File: docs/9.x/authentication.md, line: 120
# File: docs/master/authentication.md, line: 120
#. type: Title ###
#, no-wrap
msgid "Install A Starter Kit"
msgstr "安裝一種入門套件"

# File: docs/8.x/authentication.md, line: 123
# File: docs/9.x/authentication.md, line: 123
# File: docs/master/authentication.md, line: 123
#. type: Plain text
msgid "First, you should [install a Laravel application starter kit](/docs/{{version}}/starter-kits). Our current starter kits, Laravel Breeze and Laravel Jetstream, offer beautifully designed starting points for incorporating authentication into your fresh Laravel application."
msgstr "首先，需要[安裝一個 Laravel 專案入門套件](/docs/{{version}}/starter-kits)。我們目前的入門套件 —— Laravel Breeze 與 Laravel Jetstream —— 都是讓你的 Laravel 新專案有個美觀設計的起始點。"

# File: docs/8.x/authentication.md, line: 125
# File: docs/9.x/authentication.md, line: 125
# File: docs/master/authentication.md, line: 125
#. type: Plain text
msgid "Laravel Breeze is a minimal, simple implementation of all of Laravel's authentication features, including login, registration, password reset, email verification, and password confirmation. Laravel Breeze's view layer is made up of simple [Blade templates](/docs/{{version}}/blade) styled with [Tailwind CSS](https://tailwindcss.com). Breeze also offers an [Inertia](https://inertiajs.com) based scaffolding option using Vue or React."
msgstr "Laravel Breeze 是一個簡單且最小化實作出所有 Laravel 認證功能的套件，包含登入、註冊、密碼重設、電子郵件認證、以及密碼確認。Laravel Breeze 的檢視器層是通過簡單的 [Blade 樣板](/docs/{{version}}/blade) 搭配 [Tailwind CSS](https://tailwindcss.com) 提供樣式組合而成的。Breeze 也提供了一個使用 Vue 或 React 的基於 [Inertia](https://inertiajs.com) 的 Scaffolding 選項。"

# File: docs/8.x/authentication.md, line: 127
# File: docs/9.x/authentication.md, line: 127
# File: docs/master/authentication.md, line: 127
#. type: Plain text
msgid "[Laravel Jetstream](https://jetstream.laravel.com) is a more robust application starter kit that includes support for scaffolding your application with [Livewire](https://laravel-livewire.com) or [Inertia.js and Vue](https://inertiajs.com). In addition, Jetstream features optional support for two-factor authentication, teams, profile management, browser session management, API support via [Laravel Sanctum](/docs/{{version}}/sanctum), account deletion, and more."
msgstr "[Laravel Jetstream](https://jetstream.laravel.com) 是一個更複雜的專案入門套件，其中包含了使用 [Livewire](https://laravel-livewire.com) 或 [Inertia.js 與 Vue](https://inertiajs.com) 來對應用程式 Scaffolding 的支援。此外，Jetstream 也提供了對二步驟認證、團隊、個人檔案管理、瀏覽器啟程管理、通過 [Laravel Sanctum](/docs/{{version}}/sanctum) 提供的 API 支援、帳號刪除…等功能的可選支援。"

# File: docs/8.x/authentication.md, line: 129
# File: docs/9.x/authentication.md, line: 129
# File: docs/master/authentication.md, line: 129
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-the-authenticated-user\"></a>\n"
msgstr "<a name=\"retrieving-the-authenticated-user\"></a>\n"

# File: docs/8.x/authentication.md, line: 129
# File: docs/9.x/authentication.md, line: 129
# File: docs/master/authentication.md, line: 129
#. type: Title ###
#, no-wrap
msgid "Retrieving The Authenticated User"
msgstr "取得已登入的使用者"

# File: docs/8.x/authentication.md, line: 132
# File: docs/9.x/authentication.md, line: 132
# File: docs/master/authentication.md, line: 132
#. type: Plain text
msgid "After installing an authentication starter kit and allowing users to register and authenticate with your application, you will often need to interact with the currently authenticated user. While handling an incoming request, you may access the authenticated user via the `Auth` facade's `user` method:"
msgstr "安裝完認證入門套件並讓使用者在網站內註冊與認證後，我們通常需要與目前已登入的使用者進行互動。在處理連入請求時，我們可以通過 `Auth` Facade 的 `user` 方法來存取已登入的使用者："

# File: docs/8.x/authentication.md, line: 134
# File: docs/8.x/authentication.md, line: 169
# File: docs/8.x/authentication.md, line: 296
# File: docs/8.x/authentication.md, line: 310
# File: docs/8.x/authentication.md, line: 370
# File: docs/8.x/authentication.md, line: 436
# File: docs/9.x/authentication.md, line: 134
# File: docs/9.x/authentication.md, line: 169
# File: docs/9.x/authentication.md, line: 296
# File: docs/9.x/authentication.md, line: 310
# File: docs/9.x/authentication.md, line: 372
# File: docs/9.x/authentication.md, line: 438
# File: docs/master/authentication.md, line: 134
# File: docs/master/authentication.md, line: 169
# File: docs/master/authentication.md, line: 296
# File: docs/master/authentication.md, line: 310
# File: docs/master/authentication.md, line: 372
# File: docs/master/authentication.md, line: 438
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr "    use Illuminate\\Support\\Facades\\Auth;\n"

# File: docs/8.x/authentication.md, line: 137
# File: docs/9.x/authentication.md, line: 137
# File: docs/master/authentication.md, line: 137
#. type: Plain text
#, no-wrap
msgid "    // Retrieve the currently authenticated user...\n"
"    $user = Auth::user();\n"
msgstr "    // 取得目前登入的使用者...\n"
"    $user = Auth::user();\n"

# File: docs/8.x/authentication.md, line: 140
# File: docs/9.x/authentication.md, line: 140
# File: docs/master/authentication.md, line: 140
#. type: Plain text
#, no-wrap
msgid "    // Retrieve the currently authenticated user's ID...\n"
"    $id = Auth::id();\n"
msgstr "    // 取得目前登入使用者的 ID...\n"
"    $id = Auth::id();\n"

# File: docs/8.x/authentication.md, line: 142
# File: docs/9.x/authentication.md, line: 142
# File: docs/master/authentication.md, line: 142
#. type: Plain text
msgid "Alternatively, once a user is authenticated, you may access the authenticated user via an `Illuminate\\Http\\Request` instance. Remember, type-hinted classes will automatically be injected into your controller methods. By type-hinting the `Illuminate\\Http\\Request` object, you may gain convenient access to the authenticated user from any controller method in your application via the request's `user` method:"
msgstr "另外，使用者認證後，也可以通過 `Illuminate\\Http\\Request` 實體來存取已登入的使用者。請記得，有型別提示的類別會自動被插入到 Controller 方法內。只要型別提示 `Illuminate\\Http\\Request` 物件，就可以方便地通過 Request 的 `user` 方法來在任何 Controller 方法內存取已登入的使用者："

# File: docs/8.x/authentication.md, line: 144
# File: docs/8.x/authentication.md, line: 225
# File: docs/8.x/authentication.md, line: 366
# File: docs/8.x/authentication.md, line: 509
# File: docs/8.x/authentication.md, line: 583
# File: docs/8.x/authentication.md, line: 634
# File: docs/8.x/authentication.md, line: 662
# File: docs/9.x/authentication.md, line: 144
# File: docs/9.x/authentication.md, line: 225
# File: docs/9.x/authentication.md, line: 368
# File: docs/9.x/authentication.md, line: 511
# File: docs/9.x/authentication.md, line: 585
# File: docs/9.x/authentication.md, line: 636
# File: docs/9.x/authentication.md, line: 664
# File: docs/master/authentication.md, line: 144
# File: docs/master/authentication.md, line: 225
# File: docs/master/authentication.md, line: 368
# File: docs/master/authentication.md, line: 511
# File: docs/master/authentication.md, line: 585
# File: docs/master/authentication.md, line: 636
# File: docs/master/authentication.md, line: 664
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/authentication.md, line: 146
# File: docs/8.x/authentication.md, line: 227
# File: docs/9.x/authentication.md, line: 146
# File: docs/9.x/authentication.md, line: 227
# File: docs/master/authentication.md, line: 146
# File: docs/master/authentication.md, line: 227
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr "    namespace App\\Http\\Controllers;\n"

# File: docs/8.x/authentication.md, line: 148
# File: docs/9.x/authentication.md, line: 148
# File: docs/master/authentication.md, line: 148
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr "    use Illuminate\\Http\\Request;\n"

# File: docs/8.x/authentication.md, line: 162
# File: docs/9.x/authentication.md, line: 162
# File: docs/master/authentication.md, line: 162
#. type: Plain text
#, no-wrap
msgid "    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the flight information for an existing flight.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            // $request->user()\n"
"        }\n"
"    }\n"
msgstr "    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * 為現有航班更新航班資訊。\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            // $request->user()\n"
"        }\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 164
# File: docs/9.x/authentication.md, line: 164
# File: docs/master/authentication.md, line: 164
#. type: Plain text
#, no-wrap
msgid "<a name=\"determining-if-the-current-user-is-authenticated\"></a>\n"
msgstr "<a name=\"determining-if-the-current-user-is-authenticated\"></a>\n"

# File: docs/8.x/authentication.md, line: 164
# File: docs/9.x/authentication.md, line: 164
# File: docs/master/authentication.md, line: 164
#. type: Title ####
#, no-wrap
msgid "Determining If The Current User Is Authenticated"
msgstr "判斷目前使用者是否已認證"

# File: docs/8.x/authentication.md, line: 167
# File: docs/9.x/authentication.md, line: 167
# File: docs/master/authentication.md, line: 167
#. type: Plain text
msgid "To determine if the user making the incoming HTTP request is authenticated, you may use the `check` method on the `Auth` facade. This method will return `true` if the user is authenticated:"
msgstr "若要判斷建立連入 HTTP 請求的使用者是否已登入，可以使用 `Auth` Facade 的 `check` 方法。該方法會在使用者已登入的時候回傳 `true`："

# File: docs/8.x/authentication.md, line: 173
# File: docs/9.x/authentication.md, line: 173
# File: docs/master/authentication.md, line: 173
#. type: Plain text
#, no-wrap
msgid "    if (Auth::check()) {\n"
"        // The user is logged in...\n"
"    }\n"
msgstr "    if (Auth::check()) {\n"
"        // 使用者已登入…\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 175
# File: docs/9.x/authentication.md, line: 175
# File: docs/master/authentication.md, line: 175
#. type: Plain text
#, no-wrap
msgid "> {tip} Even though it is possible to determine if a user is authenticated using the `check` method, you will typically use a middleware to verify that the user is authenticated before allowing the user access to certain routes / controllers. To learn more about this, check out the documentation on [protecting routes](/docs/{{version}}/authentication#protecting-routes).\n"
msgstr "> {tip} 雖然可以通過使用 `check` 方法來判斷使用者是否已登入，但通常可以使用 Middleware 來在使用者存取特定路由或 Controller 前認證該使用者是否已登入。有關更多詳情，請參考 [保護路由](/docs/{{version}}/authentication#protecting-routes) 內的說明文件。\n"

# File: docs/8.x/authentication.md, line: 177
# File: docs/9.x/authentication.md, line: 177
# File: docs/master/authentication.md, line: 177
#. type: Plain text
#, no-wrap
msgid "<a name=\"protecting-routes\"></a>\n"
msgstr "<a name=\"protecting-routes\"></a>\n"

# File: docs/8.x/authentication.md, line: 177
# File: docs/8.x/authentication.md, line: 491
# File: docs/9.x/authentication.md, line: 177
# File: docs/9.x/authentication.md, line: 493
# File: docs/master/authentication.md, line: 177
# File: docs/master/authentication.md, line: 493
#. type: Title ###
#, no-wrap
msgid "Protecting Routes"
msgstr "保護路由"

# File: docs/8.x/authentication.md, line: 180
# File: docs/9.x/authentication.md, line: 180
# File: docs/master/authentication.md, line: 180
#. type: Plain text
msgid "[Route middleware](/docs/{{version}}/middleware) can be used to only allow authenticated users to access a given route. Laravel ships with an `auth` middleware, which references the `Illuminate\\Auth\\Middleware\\Authenticate` class. Since this middleware is already registered in your application's HTTP kernel, all you need to do is attach the middleware to a route definition:"
msgstr "[路由 Middleware](/docs/{{version}}/middleware) 可以用來只允許已認證的使用者存取指定的路由。Laravel 內建了一個 `auth` Middleware，這個 Middleware為 `Illuminate\\Auth\\Middleware\\Authenticate` 類別。由於該 Middleware已預先在專案中的 HTTP Kernel 內註冊好了，所以只需要在路由定義內加上這個 Middleware 即可："

# File: docs/8.x/authentication.md, line: 184
# File: docs/9.x/authentication.md, line: 184
# File: docs/master/authentication.md, line: 184
#. type: Plain text
#, no-wrap
msgid "    Route::get('/flights', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth');\n"
msgstr "    Route::get('/flights', function () {\n"
"        // 只有已登入的使用者才能存取此路由…\n"
"    })->middleware('auth');\n"

# File: docs/8.x/authentication.md, line: 186
# File: docs/9.x/authentication.md, line: 186
# File: docs/master/authentication.md, line: 186
#. type: Plain text
#, no-wrap
msgid "<a name=\"redirecting-unauthenticated-users\"></a>\n"
msgstr "<a name=\"redirecting-unauthenticated-users\"></a>\n"

# File: docs/8.x/authentication.md, line: 186
# File: docs/9.x/authentication.md, line: 186
# File: docs/master/authentication.md, line: 186
#. type: Title ####
#, no-wrap
msgid "Redirecting Unauthenticated Users"
msgstr "重新導向未登入的使用者"

# File: docs/8.x/authentication.md, line: 189
# File: docs/9.x/authentication.md, line: 189
# File: docs/master/authentication.md, line: 189
#. type: Plain text
msgid "When the `auth` middleware detects an unauthenticated user, it will redirect the user to the `login` [named route](/docs/{{version}}/routing#named-routes). You may modify this behavior by updating the `redirectTo` function in your application's `app/Http/Middleware/Authenticate.php` file:"
msgstr "當 `auth` Middleware 偵測到未登入的使用者，`auth` Middleware 會將使用者重新導向到 `login` 這個[帶名稱的路由](/docs/{{version}}/routing#named-routes)上。可以通過更新專案中 `app/Http/Middleware/Authenticate.php` 檔案內的 `redirectTo` 方法來更改此一行為。"

# File: docs/8.x/authentication.md, line: 200
# File: docs/9.x/authentication.md, line: 200
# File: docs/master/authentication.md, line: 200
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the path the user should be redirected to.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return string\n"
"     */\n"
"    protected function redirectTo($request)\n"
"    {\n"
"        return route('login');\n"
"    }\n"
msgstr "    /**\n"
"     * 取得使用者應被重新導向的路徑。\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return string\n"
"     */\n"
"    protected function redirectTo($request)\n"
"    {\n"
"        return route('login');\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 202
# File: docs/9.x/authentication.md, line: 202
# File: docs/master/authentication.md, line: 202
#. type: Plain text
#, no-wrap
msgid "<a name=\"specifying-a-guard\"></a>\n"
msgstr "<a name=\"specifying-a-guard\"></a>\n"

# File: docs/8.x/authentication.md, line: 202
# File: docs/9.x/authentication.md, line: 202
# File: docs/master/authentication.md, line: 202
#. type: Title ####
#, no-wrap
msgid "Specifying A Guard"
msgstr "指定 Guard"

# File: docs/8.x/authentication.md, line: 205
# File: docs/9.x/authentication.md, line: 205
# File: docs/master/authentication.md, line: 205
#. type: Plain text
msgid "When attaching the `auth` middleware to a route, you may also specify which \"guard\" should be used to authenticate the user. The guard specified should correspond to one of the keys in the `guards` array of your `auth.php` configuration file:"
msgstr "在將 `auth` 中間層加到路由時，可以指定要使用哪個「Guard」來認證使用者。可以通過指定 `auth.php` 組態設定檔中 `guards` 陣列內對應的鍵值來指定 Guard："

# File: docs/8.x/authentication.md, line: 209
# File: docs/9.x/authentication.md, line: 209
# File: docs/master/authentication.md, line: 209
#. type: Plain text
#, no-wrap
msgid "    Route::get('/flights', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth:admin');\n"
msgstr "    Route::get('/flights', function () {\n"
"        // 只有已登入使用者才可存取此路由…\n"
"    })->middleware('auth:admin');\n"

# File: docs/8.x/authentication.md, line: 211
# File: docs/9.x/authentication.md, line: 211
# File: docs/master/authentication.md, line: 211
#. type: Plain text
#, no-wrap
msgid "<a name=\"login-throttling\"></a>\n"
msgstr "<a name=\"login-throttling\"></a>\n"

# File: docs/8.x/authentication.md, line: 211
# File: docs/9.x/authentication.md, line: 211
# File: docs/master/authentication.md, line: 211
#. type: Title ###
#, no-wrap
msgid "Login Throttling"
msgstr "登入頻率限制"

# File: docs/8.x/authentication.md, line: 214
# File: docs/9.x/authentication.md, line: 214
# File: docs/master/authentication.md, line: 214
#. type: Plain text
msgid "If you are using the Laravel Breeze or Laravel Jetstream [starter kits](/docs/{{version}}/starter-kits), rate limiting will automatically be applied to login attempts. By default, the user will not be able to login for one minute if they fail to provide the correct credentials after several attempts. The throttling is unique to the user's username / email address and their IP address."
msgstr "若使用 Laravel Breeze 或 Laravel Jetstream [入門套件](/docs/{{version}}/starter-kits)，會自動將頻率限制套用到登入限制上。預設情況下，若使用者嘗試了數次仍未提供正確的帳號密碼，則將在一分鐘之內都無法登入。登入限制是基於每個使用者的使用者名稱或電子郵件，以及其 IP 位址來區分的。"

# File: docs/8.x/authentication.md, line: 216
# File: docs/9.x/authentication.md, line: 216
# File: docs/master/authentication.md, line: 216
#. type: Plain text
#, no-wrap
msgid "> {tip} If you would like to rate limit other routes in your application, check out the [rate limiting documentation](/docs/{{version}}/routing#rate-limiting).\n"
msgstr "> {tip} 若想在專案中的其他路由上提供頻率限制，請參考[頻率限制說明文件](/docs/{{version}}/routing#rate-limiting)。\n"

# File: docs/8.x/authentication.md, line: 218
# File: docs/9.x/authentication.md, line: 218
# File: docs/master/authentication.md, line: 218
#. type: Plain text
#, no-wrap
msgid "<a name=\"authenticating-users\"></a>\n"
msgstr "<a name=\"authenticating-users\"></a>\n"

# File: docs/8.x/authentication.md, line: 218
# File: docs/9.x/authentication.md, line: 218
# File: docs/master/authentication.md, line: 218
#. type: Title ##
#, no-wrap
msgid "Manually Authenticating Users"
msgstr "手動認證使用者"

# File: docs/8.x/authentication.md, line: 221
# File: docs/9.x/authentication.md, line: 221
# File: docs/master/authentication.md, line: 221
#. type: Plain text
msgid "You are not required to use the authentication scaffolding included with Laravel's [application starter kits](/docs/{{version}}/starter-kits). If you choose not to use this scaffolding, you will need to manage user authentication using the Laravel authentication classes directly. Don't worry, it's a cinch!"
msgstr "不一定要使用 Laravel [專案入門套件](/docs/{{version}}/starter-kits) 內包含的認證 Scaffolding。若決定不使用這些 Scaffolding 的話，就需要直接使用 Laravel 的認證類別來處理使用者認證。別擔心，這只是小菜一碟！"

# File: docs/8.x/authentication.md, line: 223
# File: docs/9.x/authentication.md, line: 223
# File: docs/master/authentication.md, line: 223
#. type: Plain text
msgid "We will access Laravel's authentication services via the `Auth` [facade](/docs/{{version}}/facades), so we'll need to make sure to import the `Auth` facade at the top of the class. Next, let's check out the `attempt` method. The `attempt` method is normally used to handle authentication attempts from your application's \"login\" form. If authentication is successful, you should regenerate the user's [session](/docs/{{version}}/session) to prevent [session fixation](https://en.wikipedia.org/wiki/Session_fixation):"
msgstr "我們會通過 `Auth` [Facade](/docs/{{version}}/facades) 來存取 Laravel 的認證服務。因此，我們需要確保有在該類別的最上方引入 `Auth` Facade。接著，還要確認一下我們的 `attempt` 方法。這個 `attempt` 方法通常會用來處理來自網站「登入」表單的認證嘗試。若成功認證，則應該重新產生使用者的 [session](/docs/{{version}}/session) 來防止 [Session Fixation (英語)](https://en.wikipedia.org/wiki/Session_fixation)："

# File: docs/8.x/authentication.md, line: 230
# File: docs/8.x/authentication.md, line: 402
# File: docs/9.x/authentication.md, line: 230
# File: docs/9.x/authentication.md, line: 404
# File: docs/master/authentication.md, line: 230
# File: docs/master/authentication.md, line: 404
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"

# File: docs/8.x/authentication.md, line: 245
# File: docs/9.x/authentication.md, line: 245
# File: docs/master/authentication.md, line: 245
#. type: Plain text
#, no-wrap
msgid "    class LoginController extends Controller\n"
"    {\n"
"        /**\n"
"         * Handle an authentication attempt.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function authenticate(Request $request)\n"
"        {\n"
"            $credentials = $request->validate([\n"
"                'email' => ['required', 'email'],\n"
"                'password' => ['required'],\n"
"            ]);\n"
msgstr "    class LoginController extends Controller\n"
"    {\n"
"        /**\n"
"         * Handle an authentication attempt.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function authenticate(Request $request)\n"
"        {\n"
"            $credentials = $request->validate([\n"
"                'email' => ['required', 'email'],\n"
"                'password' => ['required'],\n"
"            ]);\n"

# File: docs/8.x/authentication.md, line: 248
# File: docs/9.x/authentication.md, line: 248
# File: docs/master/authentication.md, line: 248
#. type: Plain text
#, no-wrap
msgid "            if (Auth::attempt($credentials)) {\n"
"                $request->session()->regenerate();\n"
msgstr "            if (Auth::attempt($credentials)) {\n"
"                $request->session()->regenerate();\n"

# File: docs/8.x/authentication.md, line: 251
# File: docs/9.x/authentication.md, line: 251
# File: docs/master/authentication.md, line: 251
#. type: Plain text
#, no-wrap
msgid "                return redirect()->intended('dashboard');\n"
"            }\n"
msgstr "                return redirect()->intended('dashboard');\n"
"            }\n"

# File: docs/8.x/authentication.md, line: 257
# File: docs/9.x/authentication.md, line: 257
# File: docs/master/authentication.md, line: 257
#. type: Plain text
#, no-wrap
msgid "            return back()->withErrors([\n"
"                'email' => 'The provided credentials do not match our records.',\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr "            return back()->withErrors([\n"
"                'email' => 'The provided credentials do not match our records.',\n"
"            ]);\n"
"        }\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 259
# File: docs/9.x/authentication.md, line: 259
# File: docs/master/authentication.md, line: 259
#. type: Plain text
msgid "The `attempt` method accepts an array of key / value pairs as its first argument. The values in the array will be used to find the user in your database table. So, in the example above, the user will be retrieved by the value of the `email` column. If the user is found, the hashed password stored in the database will be compared with the `password` value passed to the method via the array. You should not hash the incoming request's `password` value, since the framework will automatically hash the value before comparing it to the hashed password in the database. An authenticated session will be started for the user if the two hashed passwords match."
msgstr "`attempt` 方法接收包含了索引鍵／值配對的陣列作為其第一個引數。陣列中的值會被用來在資料庫資料表中尋找使用者。因此，在上方的範例中，使用者會依照 `email` 欄位中的值來取得。若找到該使用者，則會將資料庫中儲存的密碼雜湊跟陣列中的 `password` 值進行比對。請不要將連入請求的 `password` 進行雜湊，因為框架會自動在與資料庫中雜湊密碼比對時自動對齊進行雜湊。當兩個雜湊密碼相符合時，將開始該使用者的認證 Session。"

# File: docs/8.x/authentication.md, line: 261
# File: docs/9.x/authentication.md, line: 261
# File: docs/master/authentication.md, line: 261
#. type: Plain text
msgid "Remember, Laravel's authentication services will retrieve users from your database based on your authentication guard's \"provider\" configuration. In the default `config/auth.php` configuration file, the Eloquent user provider is specified and it is instructed to use the `App\\Models\\User` model when retrieving users. You may change these values within your configuration file based on the needs of your application."
msgstr "請記得，Laravel 的認證服務會依據認證 Guard 的「provider」組態設定來從資料庫中取得使用者。預設的 `config/auth.php` 組態設定檔中使用了 Eloquent User Provider，並使用 `App\\Models\\User` Model 來取得使用者。可以依照專案需求來在設定檔中更改這些值。"

# File: docs/8.x/authentication.md, line: 263
# File: docs/9.x/authentication.md, line: 263
# File: docs/master/authentication.md, line: 263
#. type: Plain text
msgid "The `attempt` method will return `true` if authentication was successful. Otherwise, `false` will be returned."
msgstr "當認證成功後，`attempt` 方法會回傳 `true`。否則，會回傳 `false`。"

# File: docs/8.x/authentication.md, line: 265
# File: docs/9.x/authentication.md, line: 265
# File: docs/master/authentication.md, line: 265
#. type: Plain text
msgid "The `intended` method provided by Laravel's redirector will redirect the user to the URL they were attempting to access before being intercepted by the authentication middleware. A fallback URI may be given to this method in case the intended destination is not available."
msgstr "Laravel 的重新導向程式中提供的 `intended` 方法可以用來將使用者導向到他們被認證中間層攔截存取前正在嘗試存取的 URL。可以提供一個遞補的 URI 給該方法，以免沒有預期的目的地。"

# File: docs/8.x/authentication.md, line: 267
# File: docs/9.x/authentication.md, line: 267
# File: docs/master/authentication.md, line: 267
#. type: Plain text
#, no-wrap
msgid "<a name=\"specifying-additional-conditions\"></a>\n"
msgstr "<a name=\"specifying-additional-conditions\"></a>\n"

# File: docs/8.x/authentication.md, line: 267
# File: docs/9.x/authentication.md, line: 267
# File: docs/master/authentication.md, line: 267
#. type: Title ####
#, no-wrap
msgid "Specifying Additional Conditions"
msgstr "指定額外條件"

# File: docs/8.x/authentication.md, line: 270
# File: docs/9.x/authentication.md, line: 270
# File: docs/master/authentication.md, line: 270
#. type: Plain text
msgid "If you wish, you may also add extra query conditions to the authentication query in addition to the user's email and password. To accomplish this, we may simply add the query conditions to the array passed to the `attempt` method. For example, we may verify that the user is marked as \"active\":"
msgstr "若有需要的話，也可以在認證查詢上指定除了使用者的電子郵件與密碼外的額外查詢條件。為此，只需要將查詢條件加到傳給 `attempt` 方法的陣列中即可。如，我們可以認證使用者有被標示為「啟用」："

# File: docs/8.x/authentication.md, line: 274
# File: docs/9.x/authentication.md, line: 274
# File: docs/master/authentication.md, line: 274
#. type: Plain text
#, no-wrap
msgid "    if (Auth::attempt(['email' => $email, 'password' => $password, 'active' => 1])) {\n"
"        // Authentication was successful...\n"
"    }\n"
msgstr "    if (Auth::attempt(['email' => $email, 'password' => $password, 'active' => 1])) {\n"
"        // Authentication was successful...\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 276
# File: docs/9.x/authentication.md, line: 276
# File: docs/master/authentication.md, line: 276
#. type: Plain text
#, no-wrap
msgid "> {note} In these examples, `email` is not a required option, it is merely used as an example. You should use whatever column name corresponds to a \"username\" in your database table.\n"
msgstr "> {note} 在這些例子中，`email` 都不是必填的選項，只是拿來當作例子。你可以使用任何在資料庫中相當於「使用者名稱」的欄位。\n"

# File: docs/8.x/authentication.md, line: 278
# File: docs/9.x/authentication.md, line: 278
# File: docs/master/authentication.md, line: 278
#. type: Plain text
#, no-wrap
msgid "<a name=\"accessing-specific-guard-instances\"></a>\n"
msgstr "<a name=\"accessing-specific-guard-instances\"></a>\n"

# File: docs/8.x/authentication.md, line: 278
# File: docs/9.x/authentication.md, line: 278
# File: docs/master/authentication.md, line: 278
#. type: Title ####
#, no-wrap
msgid "Accessing Specific Guard Instances"
msgstr "存取特定 Guard 實體"

# File: docs/8.x/authentication.md, line: 281
# File: docs/9.x/authentication.md, line: 281
# File: docs/master/authentication.md, line: 281
#. type: Plain text
msgid "Via the `Auth` facade's `guard` method, you may specify which guard instance you would like to utilize when authenticating the user. This allows you to manage authentication for separate parts of your application using entirely separate authenticatable models or user tables."
msgstr "通過 `Auth` Facade 的 `guard` 方法，可以指定使用者登入時要使用哪個 Guard 實體。如此一來便能為專案中不同部分的登入功能使用不同的 Authenticatable Model 或使用者資料表。"

# File: docs/8.x/authentication.md, line: 283
# File: docs/9.x/authentication.md, line: 283
# File: docs/master/authentication.md, line: 283
#. type: Plain text
msgid "The guard name passed to the `guard` method should correspond to one of the guards configured in your `auth.php` configuration file:"
msgstr "傳如 `guard` 方法的 Guard 名稱應為 `auth.php` 組態設定檔中設定的其中一個 Guard 名稱："

# File: docs/8.x/authentication.md, line: 287
# File: docs/9.x/authentication.md, line: 287
# File: docs/master/authentication.md, line: 287
#. type: Plain text
#, no-wrap
msgid "    if (Auth::guard('admin')->attempt($credentials)) {\n"
"        // ...\n"
"    }\n"
msgstr "    if (Auth::guard('admin')->attempt($credentials)) {\n"
"        // ...\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 289
# File: docs/9.x/authentication.md, line: 289
# File: docs/master/authentication.md, line: 289
#. type: Plain text
#, no-wrap
msgid "<a name=\"remembering-users\"></a>\n"
msgstr "<a name=\"remembering-users\"></a>\n"

# File: docs/8.x/authentication.md, line: 289
# File: docs/9.x/authentication.md, line: 289
# File: docs/master/authentication.md, line: 289
#. type: Title ###
#, no-wrap
msgid "Remembering Users"
msgstr "記住使用者"

# File: docs/8.x/authentication.md, line: 292
# File: docs/9.x/authentication.md, line: 292
# File: docs/master/authentication.md, line: 292
#. type: Plain text
msgid "Many web applications provide a \"remember me\" checkbox on their login form. If you would like to provide \"remember me\" functionality in your application, you may pass a boolean value as the second argument to the `attempt` method."
msgstr "許多網站的登入表單內都有一個「記住我」勾選框。若想為你的網站提供「記住我」功能，可以傳入布林值給 `attempt` 方法的第二個引數。"

# File: docs/8.x/authentication.md, line: 294
# File: docs/9.x/authentication.md, line: 294
# File: docs/master/authentication.md, line: 294
#. type: Plain text
msgid "When this value is `true`, Laravel will keep the user authenticated indefinitely or until they manually logout. Your `users` table must include the string `remember_token` column, which will be used to store the \"remember me\" token. The `users` table migration included with new Laravel applications already includes this column:"
msgstr "當該值為 `true` 時，Laravel 會永久儲存使用者的登入狀態，直到使用者手動登出。你的 `users` 資料表必須包含 `remember_token` 字串欄位，該欄位用來儲存「記住我」權杖。在新的 Laravel 專案中，`users` 資料表的 Migration 已包含了此欄位："

# File: docs/8.x/authentication.md, line: 300
# File: docs/9.x/authentication.md, line: 300
# File: docs/master/authentication.md, line: 300
#. type: Plain text
#, no-wrap
msgid "    if (Auth::attempt(['email' => $email, 'password' => $password], $remember)) {\n"
"        // The user is being remembered...\n"
"    }\n"
msgstr "    if (Auth::attempt(['email' => $email, 'password' => $password], $remember)) {\n"
"        // 已記住使用者…\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 302
# File: docs/9.x/authentication.md, line: 302
# File: docs/master/authentication.md, line: 302
#. type: Plain text
#, no-wrap
msgid "<a name=\"other-authentication-methods\"></a>\n"
msgstr "<a name=\"other-authentication-methods\"></a>\n"

# File: docs/8.x/authentication.md, line: 302
# File: docs/9.x/authentication.md, line: 302
# File: docs/master/authentication.md, line: 302
#. type: Title ###
#, no-wrap
msgid "Other Authentication Methods"
msgstr "其他認證方法"

# File: docs/8.x/authentication.md, line: 305
# File: docs/9.x/authentication.md, line: 305
# File: docs/master/authentication.md, line: 305
#. type: Plain text
#, no-wrap
msgid "<a name=\"authenticate-a-user-instance\"></a>\n"
msgstr "<a name=\"authenticate-a-user-instance\"></a>\n"

# File: docs/8.x/authentication.md, line: 305
# File: docs/9.x/authentication.md, line: 305
# File: docs/master/authentication.md, line: 305
#. type: Title ####
#, no-wrap
msgid "Authenticate A User Instance"
msgstr "認證使用者實體"

# File: docs/8.x/authentication.md, line: 308
# File: docs/9.x/authentication.md, line: 308
# File: docs/master/authentication.md, line: 308
#. type: Plain text
msgid "If you need to set an existing user instance as the currently authenticated user, you may pass the user instance to the `Auth` facade's `login` method. The given user instance must be an implementation of the `Illuminate\\Contracts\\Auth\\Authenticatable` [contract](/docs/{{version}}/contracts). The `App\\Models\\User` model included with Laravel already implements this interface. This method of authentication is useful when you already have a valid user instance, such as directly after a user registers with your application:"
msgstr "若需要將目前已認證使用者設為一個現有的使用者實體，可以將該實體傳入 `Auth` Facade 的 `login` 方法內。給定的使用者實體必須要實作 `Illuminate\\Contracts\\Auth\\Authenticatable` [Contract](/docs/{{version}}/contracts)。Laravel 中的 `App\\Models\\User` Model 已經實作了這個介面。這種認證的方法適用與已有有效使用者實體的情況，如使用者在網站上註冊之後："

# File: docs/8.x/authentication.md, line: 312
# File: docs/9.x/authentication.md, line: 312
# File: docs/master/authentication.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    Auth::login($user);\n"
msgstr "    Auth::login($user);\n"

# File: docs/8.x/authentication.md, line: 314
# File: docs/9.x/authentication.md, line: 314
# File: docs/master/authentication.md, line: 314
#. type: Plain text
msgid "You may pass a boolean value as the second argument to the `login` method. This value indicates if \"remember me\" functionality is desired for the authenticated session. Remember, this means that the session will be authenticated indefinitely or until the user manually logs out of the application:"
msgstr "可以將布林值傳入 `login` 方法的第二個引數。這個布林值會用來判斷該登入 Session 是否可套用「記住我」功能。請記得，啟用該功能就表示這個 Session 將永久可用，直到使用者手動登出："

# File: docs/8.x/authentication.md, line: 316
# File: docs/9.x/authentication.md, line: 316
# File: docs/master/authentication.md, line: 316
#. type: Plain text
#, no-wrap
msgid "    Auth::login($user, $remember = true);\n"
msgstr "    Auth::login($user, $remember = true);\n"

# File: docs/8.x/authentication.md, line: 318
# File: docs/9.x/authentication.md, line: 318
# File: docs/master/authentication.md, line: 318
#. type: Plain text
msgid "If needed, you may specify an authentication guard before calling the `login` method:"
msgstr "若有需要，可以在呼叫 `login` 方法前指定一個認證 Guard："

# File: docs/8.x/authentication.md, line: 320
# File: docs/9.x/authentication.md, line: 320
# File: docs/master/authentication.md, line: 320
#. type: Plain text
#, no-wrap
msgid "    Auth::guard('admin')->login($user);\n"
msgstr "    Auth::guard('admin')->login($user);\n"

# File: docs/8.x/authentication.md, line: 322
# File: docs/9.x/authentication.md, line: 322
# File: docs/master/authentication.md, line: 322
#. type: Plain text
#, no-wrap
msgid "<a name=\"authenticate-a-user-by-id\"></a>\n"
msgstr "<a name=\"authenticate-a-user-by-id\"></a>\n"

# File: docs/8.x/authentication.md, line: 322
# File: docs/9.x/authentication.md, line: 322
# File: docs/master/authentication.md, line: 322
#. type: Title ####
#, no-wrap
msgid "Authenticate A User By ID"
msgstr "通過 ID 認證使用者"

# File: docs/8.x/authentication.md, line: 325
# File: docs/9.x/authentication.md, line: 325
# File: docs/master/authentication.md, line: 325
#. type: Plain text
msgid "To authenticate a user using their database record's primary key, you may use the `loginUsingId` method. This method accepts the primary key of the user you wish to authenticate:"
msgstr "若要使用資料庫中的主索引鍵 (Primary Key) 來認證使用者，可以使用 `loginUsingId` 方法。該方法接受要用來認證使用者的主索引鍵值："

# File: docs/8.x/authentication.md, line: 327
# File: docs/9.x/authentication.md, line: 327
# File: docs/master/authentication.md, line: 327
#. type: Plain text
#, no-wrap
msgid "    Auth::loginUsingId(1);\n"
msgstr "    Auth::loginUsingId(1);\n"

# File: docs/8.x/authentication.md, line: 329
# File: docs/9.x/authentication.md, line: 329
# File: docs/master/authentication.md, line: 329
#. type: Plain text
msgid "You may pass a boolean value as the second argument to the `loginUsingId` method. This value indicates if \"remember me\" functionality is desired for the authenticated session. Remember, this means that the session will be authenticated indefinitely or until the user manually logs out of the application:"
msgstr "可以將布林值傳入 `loginUsingId` 方法的第二個引數。這個布林值會用來判斷該登入 Session 是否可套用「記住我」功能。請記得，啟用該功能就標示該 Session 將永久可用，直到使用者手動登出："

# File: docs/8.x/authentication.md, line: 331
# File: docs/9.x/authentication.md, line: 331
# File: docs/master/authentication.md, line: 331
#. type: Plain text
#, no-wrap
msgid "    Auth::loginUsingId(1, $remember = true);\n"
msgstr "    Auth::loginUsingId(1, $remember = true);\n"

# File: docs/8.x/authentication.md, line: 333
# File: docs/9.x/authentication.md, line: 333
# File: docs/master/authentication.md, line: 333
#. type: Plain text
#, no-wrap
msgid "<a name=\"authenticate-a-user-once\"></a>\n"
msgstr "<a name=\"authenticate-a-user-once\"></a>\n"

# File: docs/8.x/authentication.md, line: 333
# File: docs/9.x/authentication.md, line: 333
# File: docs/master/authentication.md, line: 333
#. type: Title ####
#, no-wrap
msgid "Authenticate A User Once"
msgstr "僅認證使用者一次"

# File: docs/8.x/authentication.md, line: 336
# File: docs/9.x/authentication.md, line: 336
# File: docs/master/authentication.md, line: 336
#. type: Plain text
msgid "You may use the `once` method to authenticate a user with the application for a single request. No sessions or cookies will be utilized when calling this method:"
msgstr "可以使用 `once` 方法來只在單一請求內認證使用者。呼叫此方法時不會使用到 Session 或 Cookie："

# File: docs/8.x/authentication.md, line: 340
# File: docs/9.x/authentication.md, line: 340
# File: docs/master/authentication.md, line: 340
#. type: Plain text
#, no-wrap
msgid "    if (Auth::once($credentials)) {\n"
"        //\n"
"    }\n"
msgstr "    if (Auth::once($credentials)) {\n"
"        //\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 342
# File: docs/9.x/authentication.md, line: 342
# File: docs/master/authentication.md, line: 342
#. type: Plain text
#, no-wrap
msgid "<a name=\"http-basic-authentication\"></a>\n"
msgstr "<a name=\"http-basic-authentication\"></a>\n"

# File: docs/8.x/authentication.md, line: 342
# File: docs/9.x/authentication.md, line: 342
# File: docs/master/authentication.md, line: 342
#. type: Title ##
#, no-wrap
msgid "HTTP Basic Authentication"
msgstr "HTTP 基本認證"

# File: docs/8.x/authentication.md, line: 345
# File: docs/9.x/authentication.md, line: 345
# File: docs/master/authentication.md, line: 345
#. type: Plain text
msgid "[HTTP Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) provides a quick way to authenticate users of your application without setting up a dedicated \"login\" page. To get started, attach the `auth.basic` [middleware](/docs/{{version}}/middleware) to a route. The `auth.basic` middleware is included with the Laravel framework, so you do not need to define it:"
msgstr "[HTTP 基本認證](https://zh.wikipedia.org/zh-tw/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81)提供了一種不需要設定專屬「登入」頁面而快速認證專案中使用者的方法。要進行 HTTP 基本認證，請將 `auth.basic` [Middleware](/docs/{{version}}/middleware) 加到路由上。`auth.basic` Middleware 已包含在 Laravel 框架內，不需要自行定義："

# File: docs/8.x/authentication.md, line: 349
# File: docs/9.x/authentication.md, line: 349
# File: docs/master/authentication.md, line: 349
#. type: Plain text
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth.basic');\n"
msgstr "    Route::get('/profile', function () {\n"
"        // 只有已登入的使用者可以存取此路由…\n"
"    })->middleware('auth.basic');\n"

# File: docs/8.x/authentication.md, line: 351
# File: docs/9.x/authentication.md, line: 351
# File: docs/master/authentication.md, line: 351
#. type: Plain text
msgid "Once the middleware has been attached to the route, you will automatically be prompted for credentials when accessing the route in your browser. By default, the `auth.basic` middleware will assume the `email` column on your `users` database table is the user's \"username\"."
msgstr "將該 Middleware 加到路由上後，在瀏覽器上存取該路由時會自動被提示帳號密碼。預設情況下，`auth.basic` 中間層會假設 `email` 欄位是 `users` 資料表中的使用者「帳號」欄位。"

# File: docs/8.x/authentication.md, line: 353
# File: docs/9.x/authentication.md, line: 353
# File: docs/master/authentication.md, line: 353
#. type: Plain text
#, no-wrap
msgid "<a name=\"a-note-on-fastcgi\"></a>\n"
msgstr "<a name=\"a-note-on-fastcgi\"></a>\n"

# File: docs/8.x/authentication.md, line: 353
# File: docs/9.x/authentication.md, line: 353
# File: docs/master/authentication.md, line: 353
#. type: Title ####
#, no-wrap
msgid "A Note On FastCGI"
msgstr "FastCGI 備註"

# File: docs/8.x/authentication.md, line: 356
# File: docs/9.x/authentication.md, line: 356
# File: docs/master/authentication.md, line: 356
#. type: Plain text
msgid "If you are using PHP FastCGI and Apache to serve your Laravel application, HTTP Basic authentication may not work correctly. To correct these problems, the following lines may be added to your application's `.htaccess` file:"
msgstr "若使用 PHP FastCGI 與 Apache 來執行 Laravel 專案，則 HTTP 基本認證可能不會正確運作。要修正這個問題，請將下列幾行加到專案的 `.htaccess` 檔中："

# File: docs/8.x/authentication.md, line: 359
#. type: Plain text
#, no-wrap
msgid "    RewriteCond %{HTTP:Authorization} ^(.+)$\n"
"    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n"
msgstr "    RewriteCond %{HTTP:Authorization} ^(.+)$\n"
"    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n"

# File: docs/8.x/authentication.md, line: 361
# File: docs/9.x/authentication.md, line: 363
# File: docs/master/authentication.md, line: 363
#. type: Plain text
#, no-wrap
msgid "<a name=\"stateless-http-basic-authentication\"></a>\n"
msgstr "<a name=\"stateless-http-basic-authentication\"></a>\n"

# File: docs/8.x/authentication.md, line: 361
# File: docs/9.x/authentication.md, line: 363
# File: docs/master/authentication.md, line: 363
#. type: Title ###
#, no-wrap
msgid "Stateless HTTP Basic Authentication"
msgstr "無周邊 HTTP 基本認證"

# File: docs/8.x/authentication.md, line: 364
# File: docs/9.x/authentication.md, line: 366
# File: docs/master/authentication.md, line: 366
#. type: Plain text
msgid "You may also use HTTP Basic Authentication without setting a user identifier cookie in the session. This is primarily helpful if you choose to use HTTP Authentication to authenticate requests to your application's API. To accomplish this, [define a middleware](/docs/{{version}}/middleware) that calls the `onceBasic` method. If no response is returned by the `onceBasic` method, the request may be passed further into the application:"
msgstr "也可以於不在 Session 內寫入可識別使用者 Cookie 的情況下使用 HTTP 基本認證。這個作法通常適用於想通過 HTTP 認證來認證網站 API 請求時。為此，請先[定義一個 Middleware](/docs/{{version}}/middleware)，並在該 Middleware 中呼叫 `onceBasic` 方法。若 `onceBasic` 方法無回傳值，則該請求才會接著被傳遞到專案中："

# File: docs/8.x/authentication.md, line: 368
# File: docs/9.x/authentication.md, line: 370
# File: docs/master/authentication.md, line: 370
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr "    namespace App\\Http\\Middleware;\n"

# File: docs/8.x/authentication.md, line: 384
# File: docs/9.x/authentication.md, line: 386
# File: docs/master/authentication.md, line: 386
#. type: Plain text
#, no-wrap
msgid "    class AuthenticateOnceWithBasicAuth\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, $next)\n"
"        {\n"
"            return Auth::onceBasic() ?: $next($request);\n"
"        }\n"
msgstr "    class AuthenticateOnceWithBasicAuth\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, $next)\n"
"        {\n"
"            return Auth::onceBasic() ?: $next($request);\n"
"        }\n"

# File: docs/8.x/authentication.md, line: 386
# File: docs/9.x/authentication.md, line: 388
# File: docs/master/authentication.md, line: 388
#. type: Plain text
#, no-wrap
msgid "    }\n"
msgstr "    }\n"

# File: docs/8.x/authentication.md, line: 388
# File: docs/9.x/authentication.md, line: 390
# File: docs/master/authentication.md, line: 390
#. type: Plain text
msgid "Next, [register the route middleware](/docs/{{version}}/middleware#registering-middleware) and attach it to a route:"
msgstr "接著，請[註冊路由 Middleware](/docs/{{version}}/middleware#registering-middleware)，並將其附加到路由上："

# File: docs/8.x/authentication.md, line: 392
# File: docs/9.x/authentication.md, line: 394
# File: docs/master/authentication.md, line: 394
#. type: Plain text
#, no-wrap
msgid "    Route::get('/api/user', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth.basic.once');\n"
msgstr "    Route::get('/api/user', function () {\n"
"        // 只有已登入使用者才能存取此路由…\n"
"    })->middleware('auth.basic.once');\n"

# File: docs/8.x/authentication.md, line: 394
# File: docs/9.x/authentication.md, line: 396
# File: docs/master/authentication.md, line: 396
#. type: Plain text
#, no-wrap
msgid "<a name=\"logging-out\"></a>\n"
msgstr "<a name=\"logging-out\"></a>\n"

# File: docs/8.x/authentication.md, line: 394
# File: docs/9.x/authentication.md, line: 396
# File: docs/master/authentication.md, line: 396
#. type: Title ##
#, no-wrap
msgid "Logging Out"
msgstr "登出"

# File: docs/8.x/authentication.md, line: 397
# File: docs/9.x/authentication.md, line: 399
# File: docs/master/authentication.md, line: 399
#. type: Plain text
msgid "To manually log users out of your application, you may use the `logout` method provided by the `Auth` facade. This will remove the authentication information from the user's session so that subsequent requests are not authenticated."
msgstr "若要手動將使用者登出網站，可以使用 `Auth` Facade 提供的 `logout` 方法。該方法會從使用者的 Session 中將認證資訊移除，如此一來，接下來的請求都會是已登出的狀態。"

# File: docs/8.x/authentication.md, line: 399
# File: docs/9.x/authentication.md, line: 401
# File: docs/master/authentication.md, line: 401
#. type: Plain text
msgid "In addition to calling the `logout` method, it is recommended that you invalidate the user's session and regenerate their [CSRF token](/docs/{{version}}/csrf). After logging the user out, you would typically redirect the user to the root of your application:"
msgstr "除了呼叫 `logout` 方法外，也建議將使用者的 Session 無效化，並為使用者重新產生 [CSRF 權杖](/docs/{{version}}/csrf)。登出使用者後，我們通常會將使用者重新導向回網站根目錄："

# File: docs/8.x/authentication.md, line: 412
# File: docs/9.x/authentication.md, line: 414
# File: docs/master/authentication.md, line: 414
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Log the user out of the application.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function logout(Request $request)\n"
"    {\n"
"        Auth::logout();\n"
msgstr "    /**\n"
"     * Log the user out of the application.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function logout(Request $request)\n"
"    {\n"
"        Auth::logout();\n"

# File: docs/8.x/authentication.md, line: 414
# File: docs/9.x/authentication.md, line: 416
# File: docs/master/authentication.md, line: 416
#. type: Plain text
#, no-wrap
msgid "        $request->session()->invalidate();\n"
msgstr "        $request->session()->invalidate();\n"

# File: docs/8.x/authentication.md, line: 416
# File: docs/9.x/authentication.md, line: 418
# File: docs/master/authentication.md, line: 418
#. type: Plain text
#, no-wrap
msgid "        $request->session()->regenerateToken();\n"
msgstr "        $request->session()->regenerateToken();\n"

# File: docs/8.x/authentication.md, line: 419
# File: docs/9.x/authentication.md, line: 421
# File: docs/master/authentication.md, line: 421
#. type: Plain text
#, no-wrap
msgid "        return redirect('/');\n"
"    }\n"
msgstr "        return redirect('/');\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 421
# File: docs/9.x/authentication.md, line: 423
# File: docs/master/authentication.md, line: 423
#. type: Plain text
#, no-wrap
msgid "<a name=\"invalidating-sessions-on-other-devices\"></a>\n"
msgstr "<a name=\"invalidating-sessions-on-other-devices\"></a>\n"

# File: docs/8.x/authentication.md, line: 421
# File: docs/9.x/authentication.md, line: 423
# File: docs/master/authentication.md, line: 423
#. type: Title ###
#, no-wrap
msgid "Invalidating Sessions On Other Devices"
msgstr "將其他裝置上的 Session 無效化"

# File: docs/8.x/authentication.md, line: 424
# File: docs/9.x/authentication.md, line: 426
# File: docs/master/authentication.md, line: 426
#. type: Plain text
msgid "Laravel also provides a mechanism for invalidating and \"logging out\" a user's sessions that are active on other devices without invalidating the session on their current device. This feature is typically utilized when a user is changing or updating their password and you would like to invalidate sessions on other devices while keeping the current device authenticated."
msgstr "Laravel 也提供了另一個機制，可以用來在不影響目前裝置上 Session 的情況下將使用者在其他裝置的 Session 無效化並登出使用者。該功能通常適用於使用者更改密碼、或是想將其他 Session 無效化但想讓目前裝置保持認證的情況。"

# File: docs/8.x/authentication.md, line: 426
# File: docs/9.x/authentication.md, line: 428
# File: docs/master/authentication.md, line: 428
#. type: Plain text
msgid "Before getting started, you should make sure that the `Illuminate\\Session\\Middleware\\AuthenticateSession` middleware is present and un-commented in your `App\\Http\\Kernel` class' `web` middleware group:"
msgstr "在開始前，請先確保 `Illuminate\\Session\\Middleware\\AuthenticateSession` Middleware 有出現在 `App\\Http\\Kernel` 類別的 `web` Middleware 群組中，並且未被註解掉："

# File: docs/8.x/authentication.md, line: 432
# File: docs/9.x/authentication.md, line: 434
# File: docs/master/authentication.md, line: 434
#. type: Plain text
#, no-wrap
msgid "    'web' => [\n"
"        // ...\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        // ...\n"
"    ],\n"
msgstr "    'web' => [\n"
"        // ...\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        // ...\n"
"    ],\n"

# File: docs/8.x/authentication.md, line: 434
# File: docs/9.x/authentication.md, line: 436
# File: docs/master/authentication.md, line: 436
#. type: Plain text
msgid "Then, you may use the `logoutOtherDevices` method provided by the `Auth` facade. This method requires the user to confirm their current password, which your application should accept through an input form:"
msgstr "接著，可以使用 `Auth` Facade 提供的 `logoutOtherDevices` 方法。該方法會需要使用者確認目前密碼，而你的網站應通過一個輸入表單來接收密碼："

# File: docs/8.x/authentication.md, line: 438
# File: docs/9.x/authentication.md, line: 440
# File: docs/master/authentication.md, line: 440
#. type: Plain text
#, no-wrap
msgid "    Auth::logoutOtherDevices($currentPassword);\n"
msgstr "    Auth::logoutOtherDevices($currentPassword);\n"

# File: docs/8.x/authentication.md, line: 440
# File: docs/9.x/authentication.md, line: 442
# File: docs/master/authentication.md, line: 442
#. type: Plain text
msgid "When the `logoutOtherDevices` method is invoked, the user's other sessions will be invalidated entirely, meaning they will be \"logged out\" of all guards they were previously authenticated by."
msgstr "當 `logoutOtherDevices` 方法被叫用後，使用者的其他 Session 將被立即無效化。這代表，使用者會被從其他所有已認證過的 Guard 中被「登出」。"

# File: docs/8.x/authentication.md, line: 442
# File: docs/9.x/authentication.md, line: 444
# File: docs/master/authentication.md, line: 444
#. type: Plain text
#, no-wrap
msgid "<a name=\"password-confirmation\"></a>\n"
msgstr "<a name=\"password-confirmation\"></a>\n"

# File: docs/8.x/authentication.md, line: 442
# File: docs/9.x/authentication.md, line: 444
# File: docs/master/authentication.md, line: 444
#. type: Title ##
#, no-wrap
msgid "Password Confirmation"
msgstr "密碼確認"

# File: docs/8.x/authentication.md, line: 445
# File: docs/9.x/authentication.md, line: 447
# File: docs/master/authentication.md, line: 447
#. type: Plain text
msgid "While building your application, you may occasionally have actions that should require the user to confirm their password before the action is performed or before the user is redirected to a sensitive area of the application. Laravel includes built-in middleware to make this process a breeze. Implementing this feature will require you to define two routes: one route to display a view asking the user to confirm their password and another route to confirm that the password is valid and redirect the user to their intended destination."
msgstr "在製作網站時，有時可能會需要使用者在執行某個操作前、或是在使用者被重新導向到網站機敏區域前要求使用者確認密碼。Laravel 提供了一個內建的 Middleware 來讓這個過程變得很輕鬆。要實作這項功能會需要定義兩個路由：一個用於顯示並要求使用者確認密碼的路由，另一個則用於確認密碼有效並將使用者重新導向至預期目的地的路由。"

# File: docs/8.x/authentication.md, line: 447
# File: docs/9.x/authentication.md, line: 449
# File: docs/master/authentication.md, line: 449
#. type: Plain text
#, no-wrap
msgid "> {tip} The following documentation discusses how to integrate with Laravel's password confirmation features directly; however, if you would like to get started more quickly, the [Laravel application starter kits](/docs/{{version}}/starter-kits) include support for this feature!\n"
msgstr "> {tip} 下列說明文件討論了如何直接整合 Laravel 的密碼認證功能。但若你想更快速地入門，[Laravel 專案入門套件](/docs/{{version}}/starter-kits)內已內建支援這個功能！\n"

# File: docs/8.x/authentication.md, line: 449
# File: docs/9.x/authentication.md, line: 451
# File: docs/master/authentication.md, line: 451
#. type: Plain text
#, no-wrap
msgid "<a name=\"password-confirmation-configuration\"></a>\n"
msgstr "<a name=\"password-confirmation-configuration\"></a>\n"

# File: docs/8.x/authentication.md, line: 449
# File: docs/9.x/authentication.md, line: 451
# File: docs/master/authentication.md, line: 451
#. type: Title ###
#, no-wrap
msgid "Configuration"
msgstr "組態設定"

# File: docs/8.x/authentication.md, line: 452
# File: docs/9.x/authentication.md, line: 454
# File: docs/master/authentication.md, line: 454
#. type: Plain text
msgid "After confirming their password, a user will not be asked to confirm their password again for three hours. However, you may configure the length of time before the user is re-prompted for their password by changing the value of the `password_timeout` configuration value within your application's `config/auth.php` configuration file."
msgstr "確認使用者密碼後，接下來的三小時內就不會再次向使用者詢問密碼了。但是，只需要更改專案中 `config/auth.php` 組態設定檔的 `password_timeout` 設定，就可以調整要重新詢問使用者密碼的時間長度。"

# File: docs/8.x/authentication.md, line: 454
# File: docs/9.x/authentication.md, line: 456
# File: docs/master/authentication.md, line: 456
#. type: Plain text
#, no-wrap
msgid "<a name=\"password-confirmation-routing\"></a>\n"
msgstr "<a name=\"password-confirmation-routing\"></a>\n"

# File: docs/8.x/authentication.md, line: 454
# File: docs/9.x/authentication.md, line: 456
# File: docs/master/authentication.md, line: 456
#. type: Title ###
#, no-wrap
msgid "Routing"
msgstr "路由"

# File: docs/8.x/authentication.md, line: 457
# File: docs/9.x/authentication.md, line: 459
# File: docs/master/authentication.md, line: 459
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-password-confirmation-form\"></a>\n"
msgstr "<a name=\"the-password-confirmation-form\"></a>\n"

# File: docs/8.x/authentication.md, line: 457
# File: docs/9.x/authentication.md, line: 459
# File: docs/master/authentication.md, line: 459
#. type: Title ####
#, no-wrap
msgid "The Password Confirmation Form"
msgstr "密碼確認表單"

# File: docs/8.x/authentication.md, line: 460
# File: docs/9.x/authentication.md, line: 462
# File: docs/master/authentication.md, line: 462
#. type: Plain text
msgid "First, we will define a route to display a view that requests the user to confirm their password:"
msgstr "首先，我們先定義用來顯示要求使用者確認密碼的路由："

# File: docs/8.x/authentication.md, line: 464
# File: docs/9.x/authentication.md, line: 466
# File: docs/master/authentication.md, line: 466
#. type: Plain text
#, no-wrap
msgid "    Route::get('/confirm-password', function () {\n"
"        return view('auth.confirm-password');\n"
"    })->middleware('auth')->name('password.confirm');\n"
msgstr "    Route::get('/confirm-password', function () {\n"
"        return view('auth.confirm-password');\n"
"    })->middleware('auth')->name('password.confirm');\n"

# File: docs/8.x/authentication.md, line: 466
# File: docs/9.x/authentication.md, line: 468
# File: docs/master/authentication.md, line: 468
#. type: Plain text
msgid "As you might expect, the view that is returned by this route should have a form containing a `password` field. In addition, feel free to include text within the view that explains that the user is entering a protected area of the application and must confirm their password."
msgstr "跟我們預期的一樣，這個路由所回傳的 View 內應有一個含有 `password` 欄位的表單。此外，我們也可以隨意在該 View 中加上文字說明，來告訴使用者他們正在進入網站中受保護的區域，必須要輸入密碼來進行確認。"

# File: docs/8.x/authentication.md, line: 468
# File: docs/9.x/authentication.md, line: 470
# File: docs/master/authentication.md, line: 470
#. type: Plain text
#, no-wrap
msgid "<a name=\"confirming-the-password\"></a>\n"
msgstr "<a name=\"confirming-the-password\"></a>\n"

# File: docs/8.x/authentication.md, line: 468
# File: docs/9.x/authentication.md, line: 470
# File: docs/master/authentication.md, line: 470
#. type: Title ####
#, no-wrap
msgid "Confirming The Password"
msgstr "確認密碼"

# File: docs/8.x/authentication.md, line: 471
# File: docs/9.x/authentication.md, line: 473
# File: docs/master/authentication.md, line: 473
#. type: Plain text
msgid "Next, we will define a route that will handle the form request from the \"confirm password\" view. This route will be responsible for validating the password and redirecting the user to their intended destination:"
msgstr "接著，我們來定義要處理來自「確認密碼」View 傳來的表單請求的路由。該路由會負責認證使用者的密碼，並將使用者重新導向至原本預定的目的地。"

# File: docs/8.x/authentication.md, line: 475
# File: docs/9.x/authentication.md, line: 477
# File: docs/master/authentication.md, line: 477
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"

# File: docs/8.x/authentication.md, line: 482
# File: docs/9.x/authentication.md, line: 484
# File: docs/master/authentication.md, line: 484
#. type: Plain text
#, no-wrap
msgid "    Route::post('/confirm-password', function (Request $request) {\n"
"        if (! Hash::check($request->password, $request->user()->password)) {\n"
"            return back()->withErrors([\n"
"                'password' => ['The provided password does not match our records.']\n"
"            ]);\n"
"        }\n"
msgstr "    Route::post('/confirm-password', function (Request $request) {\n"
"        if (! Hash::check($request->password, $request->user()->password)) {\n"
"            return back()->withErrors([\n"
"                'password' => ['The provided password does not match our records.']\n"
"            ]);\n"
"        }\n"

# File: docs/8.x/authentication.md, line: 484
# File: docs/9.x/authentication.md, line: 486
# File: docs/master/authentication.md, line: 486
#. type: Plain text
#, no-wrap
msgid "        $request->session()->passwordConfirmed();\n"
msgstr "        $request->session()->passwordConfirmed();\n"

# File: docs/8.x/authentication.md, line: 487
# File: docs/9.x/authentication.md, line: 489
# File: docs/master/authentication.md, line: 489
#. type: Plain text
#, no-wrap
msgid "        return redirect()->intended();\n"
"    })->middleware(['auth', 'throttle:6,1']);\n"
msgstr "        return redirect()->intended();\n"
"    })->middleware(['auth', 'throttle:6,1']);\n"

# File: docs/8.x/authentication.md, line: 489
# File: docs/9.x/authentication.md, line: 491
# File: docs/master/authentication.md, line: 491
#. type: Plain text
msgid "Before moving on, let's examine this route in more detail. First, the request's `password` field is determined to actually match the authenticated user's password. If the password is valid, we need to inform Laravel's session that the user has confirmed their password. The `passwordConfirmed` method will set a timestamp in the user's session that Laravel can use to determine when the user last confirmed their password. Finally, we can redirect the user to their intended destination."
msgstr "在繼續之前，來更仔細地看看這個路由。首先，會判斷請求的 `password` 是否真的符合已認證使用者的密碼。若密碼有效，則我們會通知 Laravel 的 Session 該使用者已確認密碼了。`passwordConfirmed` 方法會在使用者的 Session 上設定一個時間戳記，這樣 Laravel 便能判斷使用者上次確認密碼是什麼時候。最後，我們將使用者重新導向至原本預定的目的地。"

# File: docs/8.x/authentication.md, line: 491
# File: docs/9.x/authentication.md, line: 493
# File: docs/master/authentication.md, line: 493
#. type: Plain text
#, no-wrap
msgid "<a name=\"password-confirmation-protecting-routes\"></a>\n"
msgstr "<a name=\"password-confirmation-protecting-routes\"></a>\n"

# File: docs/8.x/authentication.md, line: 494
# File: docs/9.x/authentication.md, line: 496
# File: docs/master/authentication.md, line: 496
#. type: Plain text
msgid "You should ensure that any route that performs an action which requires recent password confirmation is assigned the `password.confirm` middleware. This middleware is included with the default installation of Laravel and will automatically store the user's intended destination in the session so that the user may be redirected to that location after confirming their password. After storing the user's intended destination in the session, the middleware will redirect the user to the `password.confirm` [named route](/docs/{{version}}/routing#named-routes):"
msgstr "任何有需要確保最近認證過密碼操作的路由都應設定 `password.confirm` 中間層。該中間層已包含在預設 Laravel 安裝內，且會自動將使用者預定的目的地保存在 Session 內。因此，使用者在確認密碼後會被重新導向之該頁面。將使用者預定的目的地保存在 Session 後，該中間層會將使用者重新導向之 `password.confirm` 這個[命名路由](/docs/{{version}}/routing#named-routes)："

# File: docs/8.x/authentication.md, line: 498
# File: docs/9.x/authentication.md, line: 500
# File: docs/master/authentication.md, line: 500
#. type: Plain text
#, no-wrap
msgid "    Route::get('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"
msgstr "    Route::get('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"

# File: docs/8.x/authentication.md, line: 502
# File: docs/9.x/authentication.md, line: 504
# File: docs/master/authentication.md, line: 504
#. type: Plain text
#, no-wrap
msgid "    Route::post('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"
msgstr "    Route::post('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"

# File: docs/8.x/authentication.md, line: 504
# File: docs/9.x/authentication.md, line: 506
# File: docs/master/authentication.md, line: 506
#. type: Plain text
#, no-wrap
msgid "<a name=\"adding-custom-guards\"></a>\n"
msgstr "<a name=\"adding-custom-guards\"></a>\n"

# File: docs/8.x/authentication.md, line: 504
# File: docs/9.x/authentication.md, line: 506
# File: docs/master/authentication.md, line: 506
#. type: Title ##
#, no-wrap
msgid "Adding Custom Guards"
msgstr "新增自定 Guard"

# File: docs/8.x/authentication.md, line: 507
# File: docs/9.x/authentication.md, line: 509
# File: docs/master/authentication.md, line: 509
#. type: Plain text
msgid "You may define your own authentication guards using the `extend` method on the `Auth` facade. You should place your call to the `extend` method within a [service provider](/docs/{{version}}/providers). Since Laravel already ships with an `AuthServiceProvider`, we can place the code in that provider:"
msgstr "可以通過 `Auth` Facade 中的 `extend` 方法來定義你自己的認證 Guard。`extend` 方法的呼叫應放置於一個 [Service Provider](/docs/{{version}}/providers) 內。由於 Laravel 預設已附帶了 `AuthServiceProvider`，因此我們可以將程式碼放在這個 Provider 中："

# File: docs/8.x/authentication.md, line: 511
# File: docs/8.x/authentication.md, line: 585
# File: docs/9.x/authentication.md, line: 513
# File: docs/9.x/authentication.md, line: 587
# File: docs/master/authentication.md, line: 513
# File: docs/master/authentication.md, line: 587
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr "    namespace App\\Providers;\n"

# File: docs/8.x/authentication.md, line: 515
# File: docs/9.x/authentication.md, line: 517
# File: docs/master/authentication.md, line: 517
#. type: Plain text
#, no-wrap
msgid "    use App\\Services\\Auth\\JwtGuard;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr "    use App\\Services\\Auth\\JwtGuard;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"

# File: docs/8.x/authentication.md, line: 526
# File: docs/8.x/authentication.md, line: 600
# File: docs/9.x/authentication.md, line: 528
# File: docs/9.x/authentication.md, line: 602
# File: docs/master/authentication.md, line: 528
# File: docs/master/authentication.md, line: 602
#. type: Plain text
#, no-wrap
msgid "    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr "    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"

# File: docs/8.x/authentication.md, line: 529
# File: docs/9.x/authentication.md, line: 531
# File: docs/master/authentication.md, line: 531
#. type: Plain text
#, no-wrap
msgid "            Auth::extend('jwt', function ($app, $name, array $config) {\n"
"                // Return an instance of Illuminate\\Contracts\\Auth\\Guard...\n"
msgstr "            Auth::extend('jwt', function ($app, $name, array $config) {\n"
"                // 回傳一個 Illuminate\\Contracts\\Auth\\Guard 的實體…\n"

# File: docs/8.x/authentication.md, line: 534
# File: docs/9.x/authentication.md, line: 536
# File: docs/master/authentication.md, line: 536
#. type: Plain text
#, no-wrap
msgid "                return new JwtGuard(Auth::createUserProvider($config['provider']));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr "                return new JwtGuard(Auth::createUserProvider($config['provider']));\n"
"            });\n"
"        }\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 536
# File: docs/9.x/authentication.md, line: 538
# File: docs/master/authentication.md, line: 538
#. type: Plain text
msgid "As you can see in the example above, the callback passed to the `extend` method should return an implementation of `Illuminate\\Contracts\\Auth\\Guard`. This interface contains a few methods you will need to implement to define a custom guard. Once your custom guard has been defined, you may reference the guard in the `guards` configuration of your `auth.php` configuration file:"
msgstr "如同在上方範例中看到的一樣，傳給 `extend` 方法的閉包應回傳 `Illuminate\\Contracts\\Auth\\Guard` 的實作。\n"
"`Illuminate\\Contracts\\Auth\\Guard` 這個介面中有一些定義自定 Guard 所需要實作的方法。定義好自定 Guard 後，就能在 `auth.php` 組態設定檔中的 `guards` 設定來參照自定 Guard。"

# File: docs/8.x/authentication.md, line: 543
# File: docs/9.x/authentication.md, line: 545
# File: docs/master/authentication.md, line: 545
#. type: Plain text
#, no-wrap
msgid "    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'jwt',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr "    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'jwt',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"

# File: docs/8.x/authentication.md, line: 545
# File: docs/9.x/authentication.md, line: 547
# File: docs/master/authentication.md, line: 547
#. type: Plain text
#, no-wrap
msgid "<a name=\"closure-request-guards\"></a>\n"
msgstr "<a name=\"closure-request-guards\"></a>\n"

# File: docs/8.x/authentication.md, line: 545
# File: docs/9.x/authentication.md, line: 547
# File: docs/master/authentication.md, line: 547
#. type: Title ###
#, no-wrap
msgid "Closure Request Guards"
msgstr "閉包請求 Guard"

# File: docs/8.x/authentication.md, line: 548
# File: docs/9.x/authentication.md, line: 550
# File: docs/master/authentication.md, line: 550
#. type: Plain text
msgid "The simplest way to implement a custom, HTTP request based authentication system is by using the `Auth::viaRequest` method. This method allows you to quickly define your authentication process using a single closure."
msgstr "要實作一個基於 HTTP 請求的自定認證系統最簡單的方法，就是通過 `Auth::viaRequest`。通過此方法就可以用單一閉包來快速定義認證流程。"

# File: docs/8.x/authentication.md, line: 550
# File: docs/9.x/authentication.md, line: 552
# File: docs/master/authentication.md, line: 552
#. type: Plain text
msgid "To get started, call the `Auth::viaRequest` method within the `boot` method of your `AuthServiceProvider`. The `viaRequest` method accepts an authentication driver name as its first argument. This name can be any string that describes your custom guard. The second argument passed to the method should be a closure that receives the incoming HTTP request and returns a user instance or, if authentication fails, `null`:"
msgstr "要開始定義自定 Guard，先在 `AuthServiceProvider` 中的 `boot` 方法內呼叫 `Auth::viaRequest` 方法。`viaRequest` 方法的第一個引數為認證 Driver 的名稱。這個 Driver 名稱可以是用來描述該自定 Guard 的一個任意字串。傳入該方法的第二個引數則應為接收連入 HTTP 請求的閉包，該閉包應在認證成功時回傳使用者實體、認證失敗時回傳 `null`。"

# File: docs/8.x/authentication.md, line: 554
# File: docs/9.x/authentication.md, line: 556
# File: docs/master/authentication.md, line: 556
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr "    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"

# File: docs/8.x/authentication.md, line: 563
# File: docs/9.x/authentication.md, line: 565
# File: docs/master/authentication.md, line: 565
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
msgstr "    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"

# File: docs/8.x/authentication.md, line: 568
# File: docs/9.x/authentication.md, line: 570
# File: docs/master/authentication.md, line: 570
#. type: Plain text
#, no-wrap
msgid "        Auth::viaRequest('custom-token', function (Request $request) {\n"
"            return User::where('token', $request->token)->first();\n"
"        });\n"
"    }\n"
msgstr "        Auth::viaRequest('custom-token', function (Request $request) {\n"
"            return User::where('token', $request->token)->first();\n"
"        });\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 570
# File: docs/9.x/authentication.md, line: 572
# File: docs/master/authentication.md, line: 572
#. type: Plain text
msgid "Once your custom authentication driver has been defined, you may configure it as a driver within the `guards` configuration of your `auth.php` configuration file:"
msgstr "定義好自定認證 Driver 後，可以將其設定在 `auth.php` 組態設定檔中的 `guards` 設定。"

# File: docs/8.x/authentication.md, line: 576
# File: docs/9.x/authentication.md, line: 578
# File: docs/master/authentication.md, line: 578
#. type: Plain text
#, no-wrap
msgid "    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'custom-token',\n"
"        ],\n"
"    ],\n"
msgstr "    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'custom-token',\n"
"        ],\n"
"    ],\n"

# File: docs/8.x/authentication.md, line: 578
# File: docs/9.x/authentication.md, line: 580
# File: docs/master/authentication.md, line: 580
#. type: Plain text
#, no-wrap
msgid "<a name=\"adding-custom-user-providers\"></a>\n"
msgstr "<a name=\"adding-custom-user-providers\"></a>\n"

# File: docs/8.x/authentication.md, line: 578
# File: docs/9.x/authentication.md, line: 580
# File: docs/master/authentication.md, line: 580
#. type: Title ##
#, no-wrap
msgid "Adding Custom User Providers"
msgstr "新增自定 User Provider"

# File: docs/8.x/authentication.md, line: 581
# File: docs/9.x/authentication.md, line: 583
# File: docs/master/authentication.md, line: 583
#. type: Plain text
msgid "If you are not using a traditional relational database to store your users, you will need to extend Laravel with your own authentication user provider. We will use the `provider` method on the `Auth` facade to define a custom user provider. The user provider resolver should return an implementation of `Illuminate\\Contracts\\Auth\\UserProvider`:"
msgstr "若你不是使用傳統關聯式資料庫來儲存使用者，就需要擴充 Laravel 來新增自定的認證 User Provider。接下來我們會用 `Auth` Facade 的 `provider` 方法來定義自定 User Provider。這個 User Provider 的解析程式應回傳一個 `Illuminate\\Contracts\\Auth\\UserProvider` 的實作："

# File: docs/8.x/authentication.md, line: 589
# File: docs/9.x/authentication.md, line: 591
# File: docs/master/authentication.md, line: 591
#. type: Plain text
#, no-wrap
msgid "    use App\\Extensions\\MongoUserProvider;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr "    use App\\Extensions\\MongoUserProvider;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"

# File: docs/8.x/authentication.md, line: 603
# File: docs/9.x/authentication.md, line: 605
# File: docs/master/authentication.md, line: 605
#. type: Plain text
#, no-wrap
msgid "            Auth::provider('mongo', function ($app, array $config) {\n"
"                // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\n"
msgstr "            Auth::provider('mongo', function ($app, array $config) {\n"
"                // 回傳一個 Illuminate\\Contracts\\Auth\\UserProvider 的實體...\n"

# File: docs/8.x/authentication.md, line: 608
# File: docs/9.x/authentication.md, line: 610
# File: docs/master/authentication.md, line: 610
#. type: Plain text
#, no-wrap
msgid "                return new MongoUserProvider($app->make('mongo.connection'));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr "                return new MongoUserProvider($app->make('mongo.connection'));\n"
"            });\n"
"        }\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 610
# File: docs/9.x/authentication.md, line: 612
# File: docs/master/authentication.md, line: 612
#. type: Plain text
msgid "After you have registered the provider using the `provider` method, you may switch to the new user provider in your `auth.php` configuration file. First, define a `provider` that uses your new driver:"
msgstr "通過 `provider` 方法註冊好 Provider 後，即可在 `auth.php` 組態設定檔內更改為新的 User Provider。首先，先定義使用這個新 Driver 的 `provider`："

# File: docs/8.x/authentication.md, line: 616
# File: docs/9.x/authentication.md, line: 618
# File: docs/master/authentication.md, line: 618
#. type: Plain text
#, no-wrap
msgid "    'providers' => [\n"
"        'users' => [\n"
"            'driver' => 'mongo',\n"
"        ],\n"
"    ],\n"
msgstr "    'providers' => [\n"
"        'users' => [\n"
"            'driver' => 'mongo',\n"
"        ],\n"
"    ],\n"

# File: docs/8.x/authentication.md, line: 618
# File: docs/9.x/authentication.md, line: 620
# File: docs/master/authentication.md, line: 620
#. type: Plain text
msgid "Finally, you may reference this provider in your `guards` configuration:"
msgstr "最後，就能在 `guards` 設定中參照這個 Provider："

# File: docs/8.x/authentication.md, line: 625
# File: docs/9.x/authentication.md, line: 627
# File: docs/master/authentication.md, line: 627
#. type: Plain text
#, no-wrap
msgid "    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr "    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"

# File: docs/8.x/authentication.md, line: 627
# File: docs/9.x/authentication.md, line: 629
# File: docs/master/authentication.md, line: 629
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-user-provider-contract\"></a>\n"
msgstr "<a name=\"the-user-provider-contract\"></a>\n"

# File: docs/8.x/authentication.md, line: 627
# File: docs/9.x/authentication.md, line: 629
# File: docs/master/authentication.md, line: 629
#. type: Title ###
#, no-wrap
msgid "The User Provider Contract"
msgstr "User Provider Contract"

# File: docs/8.x/authentication.md, line: 630
# File: docs/9.x/authentication.md, line: 632
# File: docs/master/authentication.md, line: 632
#. type: Plain text
msgid "`Illuminate\\Contracts\\Auth\\UserProvider` implementations are responsible for fetching an `Illuminate\\Contracts\\Auth\\Authenticatable` implementation out of a persistent storage system, such as MySQL, MongoDB, etc. These two interfaces allow the Laravel authentication mechanisms to continue functioning regardless of how the user data is stored or what type of class is used to represent the authenticated user:"
msgstr "`Illuminate\\Contracts\\Auth\\UserProvider` 的實作應負責從持續性儲存系統 (如 MySQL、MongoDB…等) 中取出 `Illuminate\\Contracts\\Auth\\Authenticatable` 的實作。有了這兩個介面，不論我們如何儲存使用者資料、不論我們使用什麼類型的 Class 來代表已登入使用者，Laravel 的認證機制都能繼續運作："

# File: docs/8.x/authentication.md, line: 632
# File: docs/9.x/authentication.md, line: 634
# File: docs/master/authentication.md, line: 634
#. type: Plain text
msgid "Let's take a look at the `Illuminate\\Contracts\\Auth\\UserProvider` contract:"
msgstr "我們來看看 `Illuminate\\Contracts\\Auth\\UserProvider` Contract："

# File: docs/8.x/authentication.md, line: 636
# File: docs/8.x/authentication.md, line: 664
# File: docs/9.x/authentication.md, line: 638
# File: docs/9.x/authentication.md, line: 666
# File: docs/master/authentication.md, line: 638
# File: docs/master/authentication.md, line: 666
#. type: Plain text
#, no-wrap
msgid "    namespace Illuminate\\Contracts\\Auth;\n"
msgstr "    namespace Illuminate\\Contracts\\Auth;\n"

# File: docs/8.x/authentication.md, line: 645
# File: docs/9.x/authentication.md, line: 647
# File: docs/master/authentication.md, line: 647
#. type: Plain text
#, no-wrap
msgid "    interface UserProvider\n"
"    {\n"
"        public function retrieveById($identifier);\n"
"        public function retrieveByToken($identifier, $token);\n"
"        public function updateRememberToken(Authenticatable $user, $token);\n"
"        public function retrieveByCredentials(array $credentials);\n"
"        public function validateCredentials(Authenticatable $user, array $credentials);\n"
"    }\n"
msgstr "    interface UserProvider\n"
"    {\n"
"        public function retrieveById($identifier);\n"
"        public function retrieveByToken($identifier, $token);\n"
"        public function updateRememberToken(Authenticatable $user, $token);\n"
"        public function retrieveByCredentials(array $credentials);\n"
"        public function validateCredentials(Authenticatable $user, array $credentials);\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 647
# File: docs/9.x/authentication.md, line: 649
# File: docs/master/authentication.md, line: 649
#. type: Plain text
msgid "The `retrieveById` function typically receives a key representing the user, such as an auto-incrementing ID from a MySQL database. The `Authenticatable` implementation matching the ID should be retrieved and returned by the method."
msgstr "`retrieveById` 方法通常會接受一個代表使用者的索引鍵，如 MySQL 資料庫中的 Auto-Increment ID。該方法應回傳一個符合該 ID 的 `Authenticatable` 實作。"

# File: docs/8.x/authentication.md, line: 649
# File: docs/9.x/authentication.md, line: 651
# File: docs/master/authentication.md, line: 651
#. type: Plain text
msgid "The `retrieveByToken` function retrieves a user by their unique `$identifier` and \"remember me\" `$token`, typically stored in a database column like `remember_token`. As with the previous method, the `Authenticatable` implementation with a matching token value should be returned by this method."
msgstr "`retrieveByToken` 方法通過每個使用者獨立的 `$identifier` 以及一個在資料庫中通常存在 `remember_token` 欄位的「記住我」權杖 `$token` 來取得使用者。與上個方法類似，這個方法應回傳一個符合該權杖的 `Authenticatable` 。"

# File: docs/8.x/authentication.md, line: 651
# File: docs/9.x/authentication.md, line: 653
# File: docs/master/authentication.md, line: 653
#. type: Plain text
msgid "The `updateRememberToken` method updates the `$user` instance's `remember_token` with the new `$token`. A fresh token is assigned to users on a successful \"remember me\" authentication attempt or when the user is logging out."
msgstr "`updateRememberToken` 方法將 `$user` 實體的 `remember_token` 更新為新的 `$token` 。當有勾選「記住我」的登入認證成功、或使用者登出後，會指派新的權杖給使用者。"

# File: docs/8.x/authentication.md, line: 653
# File: docs/9.x/authentication.md, line: 655
# File: docs/master/authentication.md, line: 655
#. type: Plain text
msgid "The `retrieveByCredentials` method receives the array of credentials passed to the `Auth::attempt` method when attempting to authenticate with an application. The method should then \"query\" the underlying persistent storage for the user matching those credentials. Typically, this method will run a query with a \"where\" condition that searches for a user record with a \"username\" matching the value of `$credentials['username']`. The method should return an implementation of `Authenticatable`. **This method should not attempt to do any password validation or authentication.**"
msgstr "`retrieveByCredentials` 方法接受一個包含登入憑證的陣列。該陣列是在使用者嘗試登入時傳給 `Auth::attempt` 的憑證。接著該方法內可以向對應的持續性儲存空間以這組憑證進行「查詢」。通常來說，這個方法會執行一個「where」條件句，來搜尋「username」符合 `$credentials['username']` 的使用者記錄。該方法應回傳 `Authenticatable` 的實作。**不應在該方法內認證密碼或進行登入。**"

# File: docs/8.x/authentication.md, line: 655
# File: docs/9.x/authentication.md, line: 657
# File: docs/master/authentication.md, line: 657
#. type: Plain text
#, no-wrap
msgid "The `validateCredentials` method should compare the given `$user` with the `$credentials` to authenticate the user. For example, this method will typically use the `Hash::check` method to compare the value of `$user->getAuthPassword()` to the value of `$credentials['password']`. This method should return `true` or `false` indicating whether the password is valid.\n"
msgstr "`validateCredentials` 方法應負責使用 `$credentials` 來比對給定的 `$user` 以認證使用者。舉例來說，該方法通常會使用 `Hash::check` 方法來比對 `$user->getAuthPassword()` 與 `$credentials['password']` 的值。該方法應回傳 `true` 或 `false` 來標示密碼是否有效。\n"

# File: docs/8.x/authentication.md, line: 657
# File: docs/9.x/authentication.md, line: 659
# File: docs/master/authentication.md, line: 659
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-authenticatable-contract\"></a>\n"
msgstr "<a name=\"the-authenticatable-contract\"></a>\n"

# File: docs/8.x/authentication.md, line: 657
# File: docs/9.x/authentication.md, line: 659
# File: docs/master/authentication.md, line: 659
#. type: Title ###
#, no-wrap
msgid "The Authenticatable Contract"
msgstr "Authenticatable Contract"

# File: docs/8.x/authentication.md, line: 660
# File: docs/9.x/authentication.md, line: 662
# File: docs/master/authentication.md, line: 662
#. type: Plain text
msgid "Now that we have explored each of the methods on the `UserProvider`, let's take a look at the `Authenticatable` contract. Remember, user providers should return implementations of this interface from the `retrieveById`, `retrieveByToken`, and `retrieveByCredentials` methods:"
msgstr "現在我們已經看過 `UserProvider` 內的各個方法了。接著來看看 `Authenticatable` Contract。請記住，User Provider 應在 `retrieveById`, `retrieveByToken` 以及 `retrieveByCredentials` 方法內回傳該介面的實作："

# File: docs/8.x/authentication.md, line: 674
# File: docs/9.x/authentication.md, line: 676
# File: docs/master/authentication.md, line: 676
#. type: Plain text
#, no-wrap
msgid "    interface Authenticatable\n"
"    {\n"
"        public function getAuthIdentifierName();\n"
"        public function getAuthIdentifier();\n"
"        public function getAuthPassword();\n"
"        public function getRememberToken();\n"
"        public function setRememberToken($value);\n"
"        public function getRememberTokenName();\n"
"    }\n"
msgstr "    interface Authenticatable\n"
"    {\n"
"        public function getAuthIdentifierName();\n"
"        public function getAuthIdentifier();\n"
"        public function getAuthPassword();\n"
"        public function getRememberToken();\n"
"        public function setRememberToken($value);\n"
"        public function getRememberTokenName();\n"
"    }\n"

# File: docs/8.x/authentication.md, line: 676
# File: docs/9.x/authentication.md, line: 678
# File: docs/master/authentication.md, line: 678
#. type: Plain text
msgid "This interface is simple. The `getAuthIdentifierName` method should return the name of the \"primary key\" field of the user and the `getAuthIdentifier` method should return the \"primary key\" of the user. When using a MySQL back-end, this would likely be the auto-incrementing primary key assigned to the user record. The `getAuthPassword` method should return the user's hashed password."
msgstr "這個介面很簡單。`getAuthIdentifierName` 應回傳使用者「主索引鍵 (Primary Key)」欄位的名稱，而 `getAuthIdentifier` 則回傳使用者的「主索引鍵」。當使用 MySQL 後端時，主索引鍵通常就是指派給使用者記錄的自動遞增 (Auto-Increment) 主索引鍵。"

# File: docs/8.x/authentication.md, line: 678
# File: docs/9.x/authentication.md, line: 680
# File: docs/master/authentication.md, line: 680
#. type: Plain text
msgid "This interface allows the authentication system to work with any \"user\" class, regardless of what ORM or storage abstraction layer you are using. By default, Laravel includes a `App\\Models\\User` class in the `app/Models` directory which implements this interface."
msgstr "有了這個介面，不論使用什麼 ORM 或儲存抽象層，認證系統都能與任何的「使用者」Class 搭配使用。預設情況下，Laravel 在 `app/Models` 目錄內包含了一個 `App\\Models\\User` Class，`App\\Models\\User` 就實作了這個介面。"

# File: docs/8.x/authentication.md, line: 680
# File: docs/9.x/authentication.md, line: 682
# File: docs/master/authentication.md, line: 682
#. type: Plain text
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr "<a name=\"events\"></a>\n"

# File: docs/8.x/authentication.md, line: 680
# File: docs/9.x/authentication.md, line: 682
# File: docs/master/authentication.md, line: 682
#. type: Title ##
#, no-wrap
msgid "Events"
msgstr "事件"

# File: docs/8.x/authentication.md, line: 683
# File: docs/9.x/authentication.md, line: 685
# File: docs/master/authentication.md, line: 685
#. type: Plain text
msgid "Laravel dispatches a variety of [events](/docs/{{version}}/events) during the authentication process. You may attach listeners to these events in your `EventServiceProvider`:"
msgstr "Laravel 會在認證的過程中分派數個 [事件](/docs/{{version}}/events)。可以在 `EventServiceProvider` 內為這些事件附加監聽程式。"

# File: docs/8.x/authentication.md, line: 693
# File: docs/9.x/authentication.md, line: 695
# File: docs/master/authentication.md, line: 695
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Auth\\Events\\Registered' => [\n"
"            'App\\Listeners\\LogRegisteredUser',\n"
"        ],\n"
msgstr "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Auth\\Events\\Registered' => [\n"
"            'App\\Listeners\\LogRegisteredUser',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 697
# File: docs/9.x/authentication.md, line: 699
# File: docs/master/authentication.md, line: 699
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Attempting' => [\n"
"            'App\\Listeners\\LogAuthenticationAttempt',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Attempting' => [\n"
"            'App\\Listeners\\LogAuthenticationAttempt',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 701
# File: docs/9.x/authentication.md, line: 703
# File: docs/master/authentication.md, line: 703
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Authenticated' => [\n"
"            'App\\Listeners\\LogAuthenticated',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Authenticated' => [\n"
"            'App\\Listeners\\LogAuthenticated',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 705
# File: docs/9.x/authentication.md, line: 707
# File: docs/master/authentication.md, line: 707
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Login' => [\n"
"            'App\\Listeners\\LogSuccessfulLogin',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Login' => [\n"
"            'App\\Listeners\\LogSuccessfulLogin',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 709
# File: docs/9.x/authentication.md, line: 711
# File: docs/master/authentication.md, line: 711
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Failed' => [\n"
"            'App\\Listeners\\LogFailedLogin',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Failed' => [\n"
"            'App\\Listeners\\LogFailedLogin',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 713
# File: docs/9.x/authentication.md, line: 715
# File: docs/master/authentication.md, line: 715
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Validated' => [\n"
"            'App\\Listeners\\LogValidated',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Validated' => [\n"
"            'App\\Listeners\\LogValidated',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 717
# File: docs/9.x/authentication.md, line: 719
# File: docs/master/authentication.md, line: 719
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Verified' => [\n"
"            'App\\Listeners\\LogVerified',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Verified' => [\n"
"            'App\\Listeners\\LogVerified',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 721
# File: docs/9.x/authentication.md, line: 723
# File: docs/master/authentication.md, line: 723
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Logout' => [\n"
"            'App\\Listeners\\LogSuccessfulLogout',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Logout' => [\n"
"            'App\\Listeners\\LogSuccessfulLogout',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 725
# File: docs/9.x/authentication.md, line: 727
# File: docs/master/authentication.md, line: 727
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\CurrentDeviceLogout' => [\n"
"            'App\\Listeners\\LogCurrentDeviceLogout',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\CurrentDeviceLogout' => [\n"
"            'App\\Listeners\\LogCurrentDeviceLogout',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 729
# File: docs/9.x/authentication.md, line: 731
# File: docs/master/authentication.md, line: 731
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\OtherDeviceLogout' => [\n"
"            'App\\Listeners\\LogOtherDeviceLogout',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\OtherDeviceLogout' => [\n"
"            'App\\Listeners\\LogOtherDeviceLogout',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 733
# File: docs/9.x/authentication.md, line: 735
# File: docs/master/authentication.md, line: 735
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Lockout' => [\n"
"            'App\\Listeners\\LogLockout',\n"
"        ],\n"
msgstr "        'Illuminate\\Auth\\Events\\Lockout' => [\n"
"            'App\\Listeners\\LogLockout',\n"
"        ],\n"

# File: docs/8.x/authentication.md, line: 737
# File: docs/9.x/authentication.md, line: 739
# File: docs/master/authentication.md, line: 739
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\PasswordReset' => [\n"
"            'App\\Listeners\\LogPasswordReset',\n"
"        ],\n"
"    ];\n"
msgstr "        'Illuminate\\Auth\\Events\\PasswordReset' => [\n"
"            'App\\Listeners\\LogPasswordReset',\n"
"        ],\n"
"    ];\n"

# File: docs/9.x/authentication.md, line: 357
# File: docs/master/authentication.md, line: 357
#. type: Code fence info string
#, no-wrap
msgid "apache"
msgstr "apache"

# File: docs/9.x/authentication.md, line: 357
# File: docs/master/authentication.md, line: 357
#. type: Plain text
#, no-wrap
msgid "RewriteCond %{HTTP:Authorization} ^(.+)$\n"
"RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n"
msgstr "RewriteCond %{HTTP:Authorization} ^(.+)$\n"
"RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n"

