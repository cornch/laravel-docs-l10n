msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/blade.pot\n"
"X-Crowdin-File-ID: 17\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 08:38\n"

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "Property"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "Description"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->index`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "The index of the current loop iteration (starts at 0)."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->iteration`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "The current loop iteration (starts at 1)."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->remaining`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "The iterations remaining in the loop."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->count`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "The total number of items in the array being iterated."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->first`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "Whether this is the first iteration through the loop."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->last`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "Whether this is the last iteration through the loop."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->even`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "Whether this is an even iteration through the loop."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->odd`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "Whether this is an odd iteration through the loop."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->depth`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "The nesting level of the current loop."
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "`$loop->parent`"
msgstr ""

# TD
#: ./docs/8.x/blade.md
#: ./docs/9.x/blade.md
#: ./docs/10.x/blade.md
#: ./docs/11.x/blade.md
#: ./docs/master/blade.md
msgid "When in a nested loop, the parent's loop variable."
msgstr ""

# H1
#: ./docs/8.x/blade.md:1
#: ./docs/9.x/blade.md:1
#: ./docs/10.x/blade.md:1
#: ./docs/11.x/blade.md:1
#: ./docs/master/blade.md:1
msgid "Blade Templates"
msgstr ""

# P
#: ./docs/8.x/blade.md:3
#: ./docs/9.x/blade.md:3
#: ./docs/10.x/blade.md:3
#: ./docs/11.x/blade.md:3
#: ./docs/master/blade.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/blade.md:4
#: ./docs/9.x/blade.md:5
#: ./docs/10.x/blade.md:5
#: ./docs/11.x/blade.md:5
#: ./docs/master/blade.md:5
msgid "[Displaying Data](#displaying-data)"
msgstr ""

# P
#: ./docs/9.x/blade.md:4
#: ./docs/10.x/blade.md:4
#: ./docs/11.x/blade.md:4
#: ./docs/master/blade.md:4
msgid "[Supercharging Blade With Livewire](#supercharging-blade-with-livewire)"
msgstr ""

# P
#: ./docs/8.x/blade.md:5
#: ./docs/9.x/blade.md:6
#: ./docs/10.x/blade.md:6
#: ./docs/11.x/blade.md:6
#: ./docs/master/blade.md:6
msgid "[HTML Entity Encoding](#html-entity-encoding)"
msgstr ""

# P
#: ./docs/8.x/blade.md:6
#: ./docs/9.x/blade.md:7
msgid "[Blade & JavaScript Frameworks](#blade-and-javascript-frameworks)"
msgstr ""

# P
#: ./docs/10.x/blade.md:7
#: ./docs/11.x/blade.md:7
#: ./docs/master/blade.md:7
msgid "[Blade and JavaScript Frameworks](#blade-and-javascript-frameworks)"
msgstr ""

# P
#: ./docs/8.x/blade.md:7
#: ./docs/9.x/blade.md:8
#: ./docs/10.x/blade.md:8
#: ./docs/11.x/blade.md:8
#: ./docs/master/blade.md:8
msgid "[Blade Directives](#blade-directives)"
msgstr ""

# P
#: ./docs/8.x/blade.md:8
#: ./docs/9.x/blade.md:9
#: ./docs/10.x/blade.md:9
#: ./docs/11.x/blade.md:9
#: ./docs/master/blade.md:9
msgid "[If Statements](#if-statements)"
msgstr ""

# P
#: ./docs/8.x/blade.md:9
#: ./docs/9.x/blade.md:10
#: ./docs/10.x/blade.md:10
#: ./docs/11.x/blade.md:10
#: ./docs/master/blade.md:10
msgid "[Switch Statements](#switch-statements)"
msgstr ""

# P
#: ./docs/8.x/blade.md:10
#: ./docs/9.x/blade.md:11
#: ./docs/10.x/blade.md:11
#: ./docs/11.x/blade.md:11
#: ./docs/master/blade.md:11
msgid "[Loops](#loops)"
msgstr ""

# P
#: ./docs/8.x/blade.md:11
#: ./docs/9.x/blade.md:12
#: ./docs/10.x/blade.md:12
#: ./docs/11.x/blade.md:12
#: ./docs/master/blade.md:12
msgid "[The Loop Variable](#the-loop-variable)"
msgstr ""

# P
#: ./docs/8.x/blade.md:12
#: ./docs/9.x/blade.md:13
#: ./docs/10.x/blade.md:13
#: ./docs/11.x/blade.md:13
#: ./docs/master/blade.md:13
msgid "[Conditional Classes](#conditional-classes)"
msgstr ""

# P
#: ./docs/8.x/blade.md:13
#: ./docs/9.x/blade.md:15
#: ./docs/10.x/blade.md:15
#: ./docs/11.x/blade.md:15
#: ./docs/master/blade.md:15
msgid "[Including Subviews](#including-subviews)"
msgstr ""

# P
#: ./docs/8.x/blade.md:14
#: ./docs/9.x/blade.md:16
#: ./docs/10.x/blade.md:16
#: ./docs/11.x/blade.md:16
#: ./docs/master/blade.md:16
msgid "[The `@once` Directive](#the-once-directive)"
msgstr ""

# P
#: ./docs/9.x/blade.md:14
#: ./docs/10.x/blade.md:14
#: ./docs/11.x/blade.md:14
#: ./docs/master/blade.md:14
msgid "[Additional Attributes](#additional-attributes)"
msgstr ""

# P
#: ./docs/8.x/blade.md:15
#: ./docs/9.x/blade.md:17
#: ./docs/10.x/blade.md:17
#: ./docs/11.x/blade.md:17
#: ./docs/master/blade.md:17
msgid "[Raw PHP](#raw-php)"
msgstr ""

# P
#: ./docs/8.x/blade.md:16
#: ./docs/9.x/blade.md:18
#: ./docs/10.x/blade.md:18
#: ./docs/11.x/blade.md:18
#: ./docs/master/blade.md:18
msgid "[Comments](#comments)"
msgstr ""

# P
#: ./docs/8.x/blade.md:17
#: ./docs/9.x/blade.md:19
#: ./docs/10.x/blade.md:19
#: ./docs/11.x/blade.md:19
#: ./docs/master/blade.md:19
msgid "[Components](#components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:18
#: ./docs/9.x/blade.md:20
#: ./docs/10.x/blade.md:20
#: ./docs/11.x/blade.md:20
#: ./docs/master/blade.md:20
msgid "[Rendering Components](#rendering-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:19
#: ./docs/9.x/blade.md:21
msgid "[Passing Data To Components](#passing-data-to-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:20
#: ./docs/9.x/blade.md:22
#: ./docs/10.x/blade.md:22
#: ./docs/11.x/blade.md:23
#: ./docs/master/blade.md:22
msgid "[Component Attributes](#component-attributes)"
msgstr ""

# P
#: ./docs/10.x/blade.md:21
#: ./docs/11.x/blade.md:22
#: ./docs/master/blade.md:21
msgid "[Passing Data to Components](#passing-data-to-components)"
msgstr ""

# P
#: ./docs/11.x/blade.md:21
msgid "[Index Components](#index-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:21
#: ./docs/9.x/blade.md:23
#: ./docs/10.x/blade.md:23
#: ./docs/11.x/blade.md:24
#: ./docs/master/blade.md:23
msgid "[Reserved Keywords](#reserved-keywords)"
msgstr ""

# P
#: ./docs/8.x/blade.md:22
#: ./docs/9.x/blade.md:24
#: ./docs/10.x/blade.md:24
#: ./docs/11.x/blade.md:25
#: ./docs/master/blade.md:24
msgid "[Slots](#slots)"
msgstr ""

# P
#: ./docs/8.x/blade.md:23
#: ./docs/9.x/blade.md:25
#: ./docs/10.x/blade.md:25
#: ./docs/11.x/blade.md:26
#: ./docs/master/blade.md:25
msgid "[Inline Component Views](#inline-component-views)"
msgstr ""

# P
#: ./docs/8.x/blade.md:24
#: ./docs/9.x/blade.md:28
#: ./docs/10.x/blade.md:28
#: ./docs/11.x/blade.md:29
#: ./docs/master/blade.md:28
msgid "[Anonymous Components](#anonymous-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:25
#: ./docs/9.x/blade.md:26
#: ./docs/10.x/blade.md:26
#: ./docs/11.x/blade.md:27
#: ./docs/master/blade.md:26
msgid "[Dynamic Components](#dynamic-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:26
#: ./docs/9.x/blade.md:27
#: ./docs/10.x/blade.md:27
#: ./docs/11.x/blade.md:28
#: ./docs/master/blade.md:27
msgid "[Manually Registering Components](#manually-registering-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:27
#: ./docs/9.x/blade.md:33
#: ./docs/10.x/blade.md:33
#: ./docs/11.x/blade.md:34
#: ./docs/master/blade.md:33
msgid "[Building Layouts](#building-layouts)"
msgstr ""

# P
#: ./docs/8.x/blade.md:28
#: ./docs/9.x/blade.md:34
#: ./docs/10.x/blade.md:34
#: ./docs/11.x/blade.md:35
#: ./docs/master/blade.md:34
msgid "[Layouts Using Components](#layouts-using-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:29
#: ./docs/9.x/blade.md:35
#: ./docs/10.x/blade.md:35
#: ./docs/11.x/blade.md:36
#: ./docs/master/blade.md:35
msgid "[Layouts Using Template Inheritance](#layouts-using-template-inheritance)"
msgstr ""

# P
#: ./docs/9.x/blade.md:29
#: ./docs/10.x/blade.md:29
#: ./docs/11.x/blade.md:30
#: ./docs/master/blade.md:29
msgid "[Anonymous Index Components](#anonymous-index-components)"
msgstr ""

# P
#: ./docs/8.x/blade.md:30
#: ./docs/9.x/blade.md:36
#: ./docs/10.x/blade.md:36
#: ./docs/11.x/blade.md:37
#: ./docs/master/blade.md:36
msgid "[Forms](#forms)"
msgstr ""

# P
#: ./docs/9.x/blade.md:30
#: ./docs/10.x/blade.md:30
#: ./docs/11.x/blade.md:31
#: ./docs/master/blade.md:30
msgid "[Data Properties / Attributes](#data-properties-attributes)"
msgstr ""

# P
#: ./docs/8.x/blade.md:31
#: ./docs/9.x/blade.md:37
#: ./docs/10.x/blade.md:37
#: ./docs/11.x/blade.md:38
#: ./docs/master/blade.md:37
msgid "[CSRF Field](#csrf-field)"
msgstr ""

# P
#: ./docs/9.x/blade.md:31
#: ./docs/10.x/blade.md:31
#: ./docs/11.x/blade.md:32
#: ./docs/master/blade.md:31
msgid "[Accessing Parent Data](#accessing-parent-data)"
msgstr ""

# P
#: ./docs/8.x/blade.md:32
#: ./docs/9.x/blade.md:38
#: ./docs/10.x/blade.md:38
#: ./docs/11.x/blade.md:39
#: ./docs/master/blade.md:38
msgid "[Method Field](#method-field)"
msgstr ""

# P
#: ./docs/9.x/blade.md:32
#: ./docs/10.x/blade.md:32
#: ./docs/11.x/blade.md:33
#: ./docs/master/blade.md:32
msgid "[Anonymous Components Paths](#anonymous-component-paths)"
msgstr ""

# P
#: ./docs/8.x/blade.md:33
#: ./docs/9.x/blade.md:39
#: ./docs/10.x/blade.md:39
#: ./docs/11.x/blade.md:40
#: ./docs/master/blade.md:39
msgid "[Validation Errors](#validation-errors)"
msgstr ""

# P
#: ./docs/8.x/blade.md:34
#: ./docs/9.x/blade.md:40
#: ./docs/10.x/blade.md:40
#: ./docs/11.x/blade.md:41
#: ./docs/master/blade.md:40
msgid "[Stacks](#stacks)"
msgstr ""

# P
#: ./docs/8.x/blade.md:35
#: ./docs/9.x/blade.md:41
#: ./docs/10.x/blade.md:41
#: ./docs/11.x/blade.md:42
#: ./docs/master/blade.md:41
msgid "[Service Injection](#service-injection)"
msgstr ""

# P
#: ./docs/8.x/blade.md:36
#: ./docs/9.x/blade.md:44
#: ./docs/10.x/blade.md:44
#: ./docs/11.x/blade.md:45
#: ./docs/master/blade.md:44
msgid "[Extending Blade](#extending-blade)"
msgstr ""

# P
#: ./docs/8.x/blade.md:37
#: ./docs/9.x/blade.md:45
#: ./docs/10.x/blade.md:45
#: ./docs/11.x/blade.md:46
#: ./docs/master/blade.md:45
msgid "[Custom Echo Handlers](#custom-echo-handlers)"
msgstr ""

# P
#: ./docs/8.x/blade.md:38
#: ./docs/9.x/blade.md:46
#: ./docs/10.x/blade.md:46
#: ./docs/11.x/blade.md:47
#: ./docs/master/blade.md:46
msgid "[Custom If Statements](#custom-if-statements)"
msgstr ""

# P
#: ./docs/8.x/blade.md:40
#: ./docs/9.x/blade.md:48
#: ./docs/10.x/blade.md:48
#: ./docs/11.x/blade.md:49
#: ./docs/master/blade.md:48
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/blade.md:41
#: ./docs/9.x/blade.md:49
#: ./docs/10.x/blade.md:49
#: ./docs/11.x/blade.md:50
#: ./docs/master/blade.md:49
msgid "Introduction"
msgstr ""

# P
#: ./docs/9.x/blade.md:42
#: ./docs/10.x/blade.md:42
#: ./docs/11.x/blade.md:43
#: ./docs/master/blade.md:42
msgid "[Rendering Inline Blade Templates](#rendering-inline-blade-templates)"
msgstr ""

# P
#: ./docs/8.x/blade.md:43
#: ./docs/9.x/blade.md:51
#: ./docs/10.x/blade.md:51
#: ./docs/11.x/blade.md:52
#: ./docs/master/blade.md:51
msgid "Blade is the simple, yet powerful templating engine that is included with Laravel. Unlike some PHP templating engines, Blade does not restrict you from using plain PHP code in your templates. In fact, all Blade templates are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade template files use the `.blade.php` file extension and are typically stored in the `resources/views` directory."
msgstr ""

# P
#: ./docs/9.x/blade.md:43
#: ./docs/10.x/blade.md:43
#: ./docs/11.x/blade.md:44
#: ./docs/master/blade.md:43
msgid "[Rendering Blade Fragments](#rendering-blade-fragments)"
msgstr ""

# P
#: ./docs/8.x/blade.md:45
msgid "Blade views may be returned from routes or controller using the global `view` helper. Of course, as mentioned in the documentation on [views](/docs/{{version}}/views), data may be passed to the Blade view using the `view` helper's second argument:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:47
#: ./docs/9.x/blade.md:55
#: ./docs/10.x/blade.md:55
#: ./docs/11.x/blade.md:56
#: ./docs/master/blade.md:55
msgid "Route::get('/', function () {\n"
"    return view('greeting', ['name' => 'Finn']);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/blade.md:51
msgid "Want to take your Blade templates to the next level and build dynamic interfaces with ease? Check out [Laravel Livewire](https://laravel-livewire.com)."
msgstr ""

# P
#: ./docs/8.x/blade.md:53
#: ./docs/9.x/blade.md:64
#: ./docs/10.x/blade.md:64
#: ./docs/11.x/blade.md:65
#: ./docs/master/blade.md:64
#~ msgid "<a name=\"displaying-data\"></a>"
#~ msgstr ""

# P
#: ./docs/9.x/blade.md:53
#: ./docs/10.x/blade.md:53
#: ./docs/11.x/blade.md:54
#: ./docs/master/blade.md:53
msgid "Blade views may be returned from routes or controllers using the global `view` helper. Of course, as mentioned in the documentation on [views](/docs/{{version}}/views), data may be passed to the Blade view using the `view` helper's second argument:"
msgstr ""

# H2
#: ./docs/8.x/blade.md:54
#: ./docs/9.x/blade.md:65
#: ./docs/10.x/blade.md:65
#: ./docs/11.x/blade.md:66
#: ./docs/master/blade.md:65
msgid "Displaying Data"
msgstr ""

# P
#: ./docs/8.x/blade.md:56
#: ./docs/9.x/blade.md:67
#: ./docs/10.x/blade.md:67
#: ./docs/11.x/blade.md:68
#: ./docs/master/blade.md:67
msgid "You may display data that is passed to your Blade views by wrapping the variable in curly braces. For example, given the following route:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:58
#: ./docs/9.x/blade.md:69
#: ./docs/10.x/blade.md:69
#: ./docs/11.x/blade.md:70
#: ./docs/master/blade.md:69
msgid "Route::get('/', function () {\n"
"    return view('welcome', ['name' => 'Samantha']);\n"
"});"
msgstr ""

# P
#: ./docs/9.x/blade.md:59
#: ./docs/10.x/blade.md:59
#: ./docs/11.x/blade.md:60
#: ./docs/master/blade.md:59
#~ msgid "<a name=\"supercharging-blade-with-livewire\"></a>"
#~ msgstr ""

# H3
#: ./docs/9.x/blade.md:60
#: ./docs/10.x/blade.md:60
#: ./docs/11.x/blade.md:61
#: ./docs/master/blade.md:60
msgid "Supercharging Blade With Livewire"
msgstr ""

# P
#: ./docs/10.x/blade.md:62
#: ./docs/11.x/blade.md:63
#: ./docs/master/blade.md:62
msgid "Want to take your Blade templates to the next level and build dynamic interfaces with ease? Check out [Laravel Livewire](https://livewire.laravel.com). Livewire allows you to write Blade components that are augmented with dynamic functionality that would typically only be possible via frontend frameworks like React or Vue, providing a great approach to building modern, reactive frontends without the complexities, client-side rendering, or build steps of many JavaScript frameworks."
msgstr ""

# P
#: ./docs/8.x/blade.md:62
#: ./docs/9.x/blade.md:73
#: ./docs/10.x/blade.md:73
#: ./docs/11.x/blade.md:74
#: ./docs/master/blade.md:73
msgid "You may display the contents of the `name` variable like so:"
msgstr ""

# P
#: ./docs/9.x/blade.md:62
msgid "Want to take your Blade templates to the next level and build dynamic interfaces with ease? Check out [Laravel Livewire](https://laravel-livewire.com). Livewire allows you to write Blade components that are augmented with dynamic functionality that would typically only be possible via frontend frameworks like React or Vue, providing a great approach to building modern, reactive frontends without the complexities, client-side rendering, or build steps of many JavaScript frameworks."
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:64
#: ./docs/9.x/blade.md:75
#: ./docs/10.x/blade.md:75
#: ./docs/11.x/blade.md:76
#: ./docs/master/blade.md:75
msgid "Hello, {{ $name }}."
msgstr ""

# P
#: ./docs/8.x/blade.md:66
#: ./docs/9.x/blade.md:80
#: ./docs/10.x/blade.md:80
#: ./docs/11.x/blade.md:81
#: ./docs/master/blade.md:80
msgid "Blade's `{{ }}` echo statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks."
msgstr ""

# P
#: ./docs/8.x/blade.md:68
#: ./docs/9.x/blade.md:82
#: ./docs/10.x/blade.md:82
#: ./docs/11.x/blade.md:83
#: ./docs/master/blade.md:82
msgid "You are not limited to displaying the contents of the variables passed to the view. You may also echo the results of any PHP function. In fact, you can put any PHP code you wish inside of a Blade echo statement:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:70
#: ./docs/9.x/blade.md:84
#: ./docs/10.x/blade.md:84
#: ./docs/11.x/blade.md:85
#: ./docs/master/blade.md:84
msgid "The current UNIX timestamp is {{ time() }}."
msgstr ""

# P
#: ./docs/8.x/blade.md:72
#: ./docs/9.x/blade.md:88
#: ./docs/10.x/blade.md:88
#: ./docs/11.x/blade.md:89
#: ./docs/master/blade.md:88
#~ msgid "<a name=\"html-entity-encoding\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:73
#: ./docs/9.x/blade.md:89
#: ./docs/10.x/blade.md:89
#: ./docs/11.x/blade.md:90
#: ./docs/master/blade.md:89
msgid "HTML Entity Encoding"
msgstr ""

# P
#: ./docs/8.x/blade.md:75
#: ./docs/9.x/blade.md:91
msgid "By default, Blade (and the Laravel `e` helper) will double encode HTML entities. If you would like to disable double encoding, call the `Blade::withoutDoubleEncoding` method from the `boot` method of your `AppServiceProvider`:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:77
#: ./docs/9.x/blade.md:93
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::withoutDoubleEncoding();\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/10.x/blade.md:91
#: ./docs/11.x/blade.md:92
#: ./docs/master/blade.md:91
msgid "By default, Blade (and the Laravel `e` function) will double encode HTML entities. If you would like to disable double encoding, call the `Blade::withoutDoubleEncoding` method from the `boot` method of your `AppServiceProvider`:"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:93
#: ./docs/11.x/blade.md:94
#: ./docs/master/blade.md:93
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Blade::withoutDoubleEncoding();\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:97
#: ./docs/9.x/blade.md:113
#: ./docs/10.x/blade.md:111
#: ./docs/11.x/blade.md:112
#: ./docs/master/blade.md:111
#~ msgid "<a name=\"displaying-unescaped-data\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:98
#: ./docs/9.x/blade.md:114
#: ./docs/10.x/blade.md:112
#: ./docs/11.x/blade.md:113
#: ./docs/master/blade.md:112
msgid "Displaying Unescaped Data"
msgstr ""

# P
#: ./docs/8.x/blade.md:100
#: ./docs/9.x/blade.md:116
#: ./docs/10.x/blade.md:114
#: ./docs/11.x/blade.md:115
#: ./docs/master/blade.md:114
msgid "By default, Blade `{{ }}` statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks. If you do not want your data to be escaped, you may use the following syntax:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:102
#: ./docs/9.x/blade.md:118
#: ./docs/10.x/blade.md:116
#: ./docs/11.x/blade.md:117
#: ./docs/master/blade.md:116
msgid "Hello, {!! $name !!}."
msgstr ""

# P
#: ./docs/8.x/blade.md:104
#: ./docs/9.x/blade.md:123
#: ./docs/10.x/blade.md:121
#: ./docs/11.x/blade.md:122
#: ./docs/master/blade.md:121
msgid "Be very careful when echoing content that is supplied by users of your application. You should typically use the escaped, double curly brace syntax to prevent XSS attacks when displaying user supplied data."
msgstr ""

# P
#: ./docs/8.x/blade.md:106
#: ./docs/9.x/blade.md:125
#: ./docs/10.x/blade.md:123
#: ./docs/11.x/blade.md:124
#: ./docs/master/blade.md:123
#~ msgid "<a name=\"blade-and-javascript-frameworks\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:107
#: ./docs/9.x/blade.md:126
msgid "Blade & JavaScript Frameworks"
msgstr ""

# P
#: ./docs/8.x/blade.md:109
#: ./docs/9.x/blade.md:128
#: ./docs/10.x/blade.md:126
#: ./docs/11.x/blade.md:127
#: ./docs/master/blade.md:126
msgid "Since many JavaScript frameworks also use \"curly\" braces to indicate a given expression should be displayed in the browser, you may use the `@` symbol to inform the Blade rendering engine an expression should remain untouched. For example:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:111
#: ./docs/9.x/blade.md:130
#: ./docs/10.x/blade.md:128
#: ./docs/11.x/blade.md:129
#: ./docs/master/blade.md:128
msgid "<h1>Laravel</h1>\n\n"
"Hello, @{{ name }}."
msgstr ""

# P
#: ./docs/8.x/blade.md:115
#: ./docs/9.x/blade.md:136
#: ./docs/10.x/blade.md:134
#: ./docs/11.x/blade.md:135
#: ./docs/master/blade.md:134
msgid "In this example, the `@` symbol will be removed by Blade; however, `{{ name }}` expression will remain untouched by the Blade engine, allowing it to be rendered by your JavaScript framework."
msgstr ""

# P
#: ./docs/8.x/blade.md:117
#: ./docs/9.x/blade.md:138
#: ./docs/10.x/blade.md:136
#: ./docs/11.x/blade.md:137
#: ./docs/master/blade.md:136
msgid "The `@` symbol may also be used to escape Blade directives:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:119
#: ./docs/9.x/blade.md:140
#: ./docs/10.x/blade.md:138
#: ./docs/11.x/blade.md:139
#: ./docs/master/blade.md:138
msgid "{{-- Blade template --}}\n"
"@@if()\n\n"
"<!-- HTML output -->\n"
"@if()"
msgstr ""

# H3
#: ./docs/10.x/blade.md:124
#: ./docs/11.x/blade.md:125
#: ./docs/master/blade.md:124
msgid "Blade and JavaScript Frameworks"
msgstr ""

# P
#: ./docs/8.x/blade.md:125
#: ./docs/9.x/blade.md:148
#: ./docs/10.x/blade.md:146
#: ./docs/11.x/blade.md:147
#: ./docs/master/blade.md:146
#~ msgid "<a name=\"rendering-json\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:126
#: ./docs/9.x/blade.md:149
#: ./docs/10.x/blade.md:147
#: ./docs/11.x/blade.md:148
#: ./docs/master/blade.md:147
msgid "Rendering JSON"
msgstr ""

# P
#: ./docs/8.x/blade.md:128
#: ./docs/9.x/blade.md:151
#: ./docs/10.x/blade.md:149
#: ./docs/11.x/blade.md:150
#: ./docs/master/blade.md:149
msgid "Sometimes you may pass an array to your view with the intention of rendering it as JSON in order to initialize a JavaScript variable. For example:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:130
#: ./docs/9.x/blade.md:153
#: ./docs/10.x/blade.md:151
#: ./docs/11.x/blade.md:152
#: ./docs/master/blade.md:151
msgid "<script>\n"
"    var app = <?php echo json_encode($array); ?>;\n"
"</script>"
msgstr ""

# P
#: ./docs/8.x/blade.md:134
#: ./docs/9.x/blade.md:159
#: ./docs/10.x/blade.md:157
#: ./docs/11.x/blade.md:158
#: ./docs/master/blade.md:157
msgid "However, instead of manually calling `json_encode`, you may use the `Illuminate\\Support\\Js::from` method directive. The `from` method accepts the same arguments as PHP's `json_encode` function; however, it will ensure that the resulting JSON is properly escaped for inclusion within HTML quotes. The `from` method will return a string `JSON.parse` JavaScript statement that will convert the given object or array into a valid JavaScript object:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:136
#: ./docs/9.x/blade.md:161
#: ./docs/10.x/blade.md:159
#: ./docs/11.x/blade.md:160
#: ./docs/master/blade.md:159
msgid "<script>\n"
"    var app = {{ Illuminate\\Support\\Js::from($array) }};\n"
"</script>"
msgstr ""

# P
#: ./docs/8.x/blade.md:140
#: ./docs/9.x/blade.md:167
#: ./docs/10.x/blade.md:165
#: ./docs/11.x/blade.md:166
#: ./docs/master/blade.md:165
msgid "The latest versions of the Laravel application skeleton include a `Js` facade, which provides convenient access to this functionality within your Blade templates:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:142
#: ./docs/9.x/blade.md:169
#: ./docs/10.x/blade.md:167
#: ./docs/11.x/blade.md:168
#: ./docs/master/blade.md:167
msgid "<script>\n"
"    var app = {{ Js::from($array) }};\n"
"</script>"
msgstr ""

# P
#: ./docs/8.x/blade.md:146
#: ./docs/9.x/blade.md:176
#: ./docs/10.x/blade.md:174
#: ./docs/11.x/blade.md:175
#: ./docs/master/blade.md:174
msgid "You should only use the `Js::from` method to render existing variables as JSON. The Blade templating is based on regular expressions and attempts to pass a complex expression to the directive may cause unexpected failures."
msgstr ""

# P
#: ./docs/8.x/blade.md:148
#: ./docs/9.x/blade.md:178
#: ./docs/10.x/blade.md:176
#: ./docs/11.x/blade.md:177
#: ./docs/master/blade.md:176
#~ msgid "<a name=\"the-at-verbatim-directive\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:149
#: ./docs/9.x/blade.md:179
#: ./docs/10.x/blade.md:177
#: ./docs/11.x/blade.md:178
#: ./docs/master/blade.md:177
msgid "The `@verbatim` Directive"
msgstr ""

# P
#: ./docs/8.x/blade.md:151
#: ./docs/9.x/blade.md:181
#: ./docs/10.x/blade.md:179
#: ./docs/11.x/blade.md:180
#: ./docs/master/blade.md:179
msgid "If you are displaying JavaScript variables in a large portion of your template, you may wrap the HTML in the `@verbatim` directive so that you do not have to prefix each Blade echo statement with an `@` symbol:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:153
#: ./docs/9.x/blade.md:183
#: ./docs/10.x/blade.md:181
#: ./docs/11.x/blade.md:182
#: ./docs/master/blade.md:181
msgid "@verbatim\n"
"    <div class=\"container\">\n"
"        Hello, {{ name }}.\n"
"    </div>\n"
"@endverbatim"
msgstr ""

# P
#: ./docs/8.x/blade.md:159
#: ./docs/9.x/blade.md:191
#: ./docs/10.x/blade.md:189
#: ./docs/11.x/blade.md:190
#: ./docs/master/blade.md:189
#~ msgid "<a name=\"blade-directives\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/blade.md:160
#: ./docs/9.x/blade.md:192
#: ./docs/10.x/blade.md:190
#: ./docs/11.x/blade.md:191
#: ./docs/master/blade.md:190
msgid "Blade Directives"
msgstr ""

# P
#: ./docs/8.x/blade.md:162
#: ./docs/9.x/blade.md:194
#: ./docs/10.x/blade.md:192
#: ./docs/11.x/blade.md:193
#: ./docs/master/blade.md:192
msgid "In addition to template inheritance and displaying data, Blade also provides convenient shortcuts for common PHP control structures, such as conditional statements and loops. These shortcuts provide a very clean, terse way of working with PHP control structures while also remaining familiar to their PHP counterparts."
msgstr ""

# P
#: ./docs/8.x/blade.md:164
#: ./docs/9.x/blade.md:196
#: ./docs/10.x/blade.md:194
#: ./docs/11.x/blade.md:195
#: ./docs/master/blade.md:194
#~ msgid "<a name=\"if-statements\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:165
#: ./docs/9.x/blade.md:197
#: ./docs/10.x/blade.md:195
#: ./docs/11.x/blade.md:196
#: ./docs/master/blade.md:195
msgid "If Statements"
msgstr ""

# P
#: ./docs/8.x/blade.md:167
#: ./docs/9.x/blade.md:199
#: ./docs/10.x/blade.md:197
#: ./docs/11.x/blade.md:198
#: ./docs/master/blade.md:197
msgid "You may construct `if` statements using the `@if`, `@elseif`, `@else`, and `@endif` directives. These directives function identically to their PHP counterparts:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:169
#: ./docs/9.x/blade.md:201
#: ./docs/10.x/blade.md:199
#: ./docs/11.x/blade.md:200
#: ./docs/master/blade.md:199
msgid "@if (count($records) === 1)\n"
"    I have one record!\n"
"@elseif (count($records) > 1)\n"
"    I have multiple records!\n"
"@else\n"
"    I don't have any records!\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:177
#: ./docs/9.x/blade.md:211
#: ./docs/10.x/blade.md:209
#: ./docs/11.x/blade.md:210
#: ./docs/master/blade.md:209
msgid "For convenience, Blade also provides an `@unless` directive:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:179
#: ./docs/9.x/blade.md:213
#: ./docs/10.x/blade.md:211
#: ./docs/11.x/blade.md:212
#: ./docs/master/blade.md:211
msgid "@unless (Auth::check())\n"
"    You are not signed in.\n"
"@endunless"
msgstr ""

# P
#: ./docs/8.x/blade.md:183
#: ./docs/9.x/blade.md:219
#: ./docs/10.x/blade.md:217
#: ./docs/11.x/blade.md:218
#: ./docs/master/blade.md:217
msgid "In addition to the conditional directives already discussed, the `@isset` and `@empty` directives may be used as convenient shortcuts for their respective PHP functions:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:185
#: ./docs/9.x/blade.md:221
#: ./docs/10.x/blade.md:219
#: ./docs/11.x/blade.md:220
#: ./docs/master/blade.md:219
msgid "@isset($records)\n"
"    // $records is defined and is not null...\n"
"@endisset\n\n"
"@empty($records)\n"
"    // $records is \"empty\"...\n"
"@endempty"
msgstr ""

# P
#: ./docs/8.x/blade.md:193
#: ./docs/9.x/blade.md:231
#: ./docs/10.x/blade.md:229
#: ./docs/11.x/blade.md:230
#: ./docs/master/blade.md:229
#~ msgid "<a name=\"authentication-directives\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:194
#: ./docs/9.x/blade.md:232
#: ./docs/10.x/blade.md:230
#: ./docs/11.x/blade.md:231
#: ./docs/master/blade.md:230
msgid "Authentication Directives"
msgstr ""

# P
#: ./docs/8.x/blade.md:196
#: ./docs/9.x/blade.md:234
#: ./docs/10.x/blade.md:232
#: ./docs/11.x/blade.md:233
#: ./docs/master/blade.md:232
msgid "The `@auth` and `@guest` directives may be used to quickly determine if the current user is [authenticated](/docs/{{version}}/authentication) or is a guest:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:198
#: ./docs/9.x/blade.md:236
#: ./docs/10.x/blade.md:234
#: ./docs/11.x/blade.md:235
#: ./docs/master/blade.md:234
msgid "@auth\n"
"    // The user is authenticated...\n"
"@endauth\n\n"
"@guest\n"
"    // The user is not authenticated...\n"
"@endguest"
msgstr ""

# P
#: ./docs/8.x/blade.md:206
#: ./docs/9.x/blade.md:246
#: ./docs/10.x/blade.md:244
#: ./docs/11.x/blade.md:245
#: ./docs/master/blade.md:244
msgid "If needed, you may specify the authentication guard that should be checked when using the `@auth` and `@guest` directives:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:208
#: ./docs/9.x/blade.md:248
#: ./docs/10.x/blade.md:246
#: ./docs/11.x/blade.md:247
#: ./docs/master/blade.md:246
msgid "@auth('admin')\n"
"    // The user is authenticated...\n"
"@endauth\n\n"
"@guest('admin')\n"
"    // The user is not authenticated...\n"
"@endguest"
msgstr ""

# P
#: ./docs/8.x/blade.md:216
#: ./docs/9.x/blade.md:258
#: ./docs/10.x/blade.md:256
#: ./docs/11.x/blade.md:257
#: ./docs/master/blade.md:256
#~ msgid "<a name=\"environment-directives\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:217
#: ./docs/9.x/blade.md:259
#: ./docs/10.x/blade.md:257
#: ./docs/11.x/blade.md:258
#: ./docs/master/blade.md:257
msgid "Environment Directives"
msgstr ""

# P
#: ./docs/8.x/blade.md:219
#: ./docs/9.x/blade.md:261
#: ./docs/10.x/blade.md:259
#: ./docs/11.x/blade.md:260
#: ./docs/master/blade.md:259
msgid "You may check if the application is running in the production environment using the `@production` directive:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:221
#: ./docs/9.x/blade.md:263
#: ./docs/10.x/blade.md:261
#: ./docs/11.x/blade.md:262
#: ./docs/master/blade.md:261
msgid "@production\n"
"    // Production specific content...\n"
"@endproduction"
msgstr ""

# P
#: ./docs/8.x/blade.md:225
#: ./docs/9.x/blade.md:269
#: ./docs/10.x/blade.md:267
#: ./docs/11.x/blade.md:268
#: ./docs/master/blade.md:267
msgid "Or, you may determine if the application is running in a specific environment using the `@env` directive:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:227
#: ./docs/9.x/blade.md:271
#: ./docs/10.x/blade.md:269
#: ./docs/11.x/blade.md:270
#: ./docs/master/blade.md:269
msgid "@env('staging')\n"
"    // The application is running in \"staging\"...\n"
"@endenv\n\n"
"@env(['staging', 'production'])\n"
"    // The application is running in \"staging\" or \"production\"...\n"
"@endenv"
msgstr ""

# P
#: ./docs/8.x/blade.md:235
#: ./docs/9.x/blade.md:281
#: ./docs/10.x/blade.md:279
#: ./docs/11.x/blade.md:280
#: ./docs/master/blade.md:279
#~ msgid "<a name=\"section-directives\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:236
#: ./docs/9.x/blade.md:282
#: ./docs/10.x/blade.md:280
#: ./docs/11.x/blade.md:281
#: ./docs/master/blade.md:280
msgid "Section Directives"
msgstr ""

# P
#: ./docs/8.x/blade.md:238
#: ./docs/9.x/blade.md:284
#: ./docs/10.x/blade.md:282
#: ./docs/11.x/blade.md:283
#: ./docs/master/blade.md:282
msgid "You may determine if a template inheritance section has content using the `@hasSection` directive:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:240
#: ./docs/9.x/blade.md:286
#: ./docs/10.x/blade.md:284
#: ./docs/11.x/blade.md:285
#: ./docs/master/blade.md:284
msgid "@hasSection('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @yield('navigation')\n"
"    </div>\n\n"
"    <div class=\"clearfix\"></div>\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:250
#: ./docs/10.x/blade.md:294
#: ./docs/11.x/blade.md:295
#: ./docs/master/blade.md:294
msgid "You may use the `sectionMissing` directive to determine if a section does not have content:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:252
#: ./docs/9.x/blade.md:298
#: ./docs/10.x/blade.md:296
#: ./docs/11.x/blade.md:297
#: ./docs/master/blade.md:296
msgid "@sectionMissing('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @include('default-navigation')\n"
"    </div>\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:260
#: ./docs/9.x/blade.md:306
#: ./docs/10.x/blade.md:317
#: ./docs/11.x/blade.md:318
#: ./docs/master/blade.md:317
#~ msgid "<a name=\"switch-statements\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:261
#: ./docs/9.x/blade.md:307
#: ./docs/10.x/blade.md:318
#: ./docs/11.x/blade.md:319
#: ./docs/master/blade.md:318
msgid "Switch Statements"
msgstr ""

# P
#: ./docs/8.x/blade.md:263
#: ./docs/9.x/blade.md:309
#: ./docs/10.x/blade.md:320
#: ./docs/11.x/blade.md:321
#: ./docs/master/blade.md:320
msgid "Switch statements can be constructed using the `@switch`, `@case`, `@break`, `@default` and `@endswitch` directives:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:265
#: ./docs/9.x/blade.md:311
#: ./docs/10.x/blade.md:322
#: ./docs/11.x/blade.md:323
#: ./docs/master/blade.md:322
msgid "@switch($i)\n"
"    @case(1)\n"
"        First case...\n"
"        @break\n\n"
"    @case(2)\n"
"        Second case...\n"
"        @break\n\n"
"    @default\n"
"        Default case...\n"
"@endswitch"
msgstr ""

# P
#: ./docs/8.x/blade.md:278
#: ./docs/9.x/blade.md:326
#: ./docs/10.x/blade.md:337
#: ./docs/11.x/blade.md:338
#: ./docs/master/blade.md:337
#~ msgid "<a name=\"loops\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:279
#: ./docs/9.x/blade.md:327
#: ./docs/10.x/blade.md:338
#: ./docs/11.x/blade.md:339
#: ./docs/master/blade.md:338
msgid "Loops"
msgstr ""

# P
#: ./docs/8.x/blade.md:281
#: ./docs/9.x/blade.md:329
#: ./docs/10.x/blade.md:340
#: ./docs/11.x/blade.md:341
#: ./docs/master/blade.md:340
msgid "In addition to conditional statements, Blade provides simple directives for working with PHP's loop structures. Again, each of these directives functions identically to their PHP counterparts:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:283
#: ./docs/9.x/blade.md:331
#: ./docs/10.x/blade.md:342
#: ./docs/11.x/blade.md:343
#: ./docs/master/blade.md:342
msgid "@for ($i = 0; $i < 10; $i++)\n"
"    The current value is {{ $i }}\n"
"@endfor\n\n"
"@foreach ($users as $user)\n"
"    <p>This is user {{ $user->id }}</p>\n"
"@endforeach\n\n"
"@forelse ($users as $user)\n"
"    <li>{{ $user->name }}</li>\n"
"@empty\n"
"    <p>No users</p>\n"
"@endforelse\n\n"
"@while (true)\n"
"    <p>I'm looping forever.</p>\n"
"@endwhile"
msgstr ""

# P
#: ./docs/9.x/blade.md:296
msgid "You may use the `@sectionMissing` directive to determine if a section does not have content:"
msgstr ""

# P
#: ./docs/8.x/blade.md:301
#: ./docs/9.x/blade.md:352
#: ./docs/10.x/blade.md:363
#: ./docs/11.x/blade.md:364
#: ./docs/master/blade.md:363
msgid "While iterating through a `foreach` loop, you may use the [loop variable](#the-loop-variable) to gain valuable information about the loop, such as whether you are in the first or last iteration through the loop."
msgstr ""

# P
#: ./docs/8.x/blade.md:303
msgid "When using loops you may also end the loop or skip the current iteration using the `@continue` and `@break` directives:"
msgstr ""

# P
#: ./docs/10.x/blade.md:304
#: ./docs/11.x/blade.md:305
#: ./docs/master/blade.md:304
#~ msgid "<a name=\"session-directives\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/blade.md:305
#: ./docs/11.x/blade.md:306
#: ./docs/master/blade.md:305
msgid "Session Directives"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:305
#: ./docs/9.x/blade.md:356
#: ./docs/10.x/blade.md:367
#: ./docs/11.x/blade.md:368
#: ./docs/master/blade.md:367
msgid "@foreach ($users as $user)\n"
"    @if ($user->type == 1)\n"
"        @continue\n"
"    @endif\n\n"
"    <li>{{ $user->name }}</li>\n\n"
"    @if ($user->number == 5)\n"
"        @break\n"
"    @endif\n"
"@endforeach"
msgstr ""

# P
#: ./docs/10.x/blade.md:307
#: ./docs/11.x/blade.md:308
#: ./docs/master/blade.md:307
msgid "The `@session` directive may be used to determine if a [session](/docs/{{version}}/session) value exists. If the session value exists, the template contents within the `@session` and `@endsession` directives will be evaluated. Within the `@session` directive's contents, you may echo the `$value` variable to display the session value:"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:309
#: ./docs/11.x/blade.md:310
#: ./docs/master/blade.md:309
msgid "@session('status')\n"
"    <div class=\"p-4 bg-green-100\">\n"
"        {{ $value }}\n"
"    </div>\n"
"@endsession"
msgstr ""

# P
#: ./docs/8.x/blade.md:317
#: ./docs/9.x/blade.md:370
#: ./docs/10.x/blade.md:381
#: ./docs/11.x/blade.md:382
#: ./docs/master/blade.md:381
msgid "You may also include the continuation or break condition within the directive declaration:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:319
#: ./docs/9.x/blade.md:372
#: ./docs/10.x/blade.md:383
#: ./docs/11.x/blade.md:384
#: ./docs/master/blade.md:383
msgid "@foreach ($users as $user)\n"
"    @continue($user->type == 1)\n\n"
"    <li>{{ $user->name }}</li>\n\n"
"    @break($user->number == 5)\n"
"@endforeach"
msgstr ""

# P
#: ./docs/8.x/blade.md:327
#: ./docs/9.x/blade.md:382
#: ./docs/10.x/blade.md:393
#: ./docs/11.x/blade.md:394
#: ./docs/master/blade.md:393
#~ msgid "<a name=\"the-loop-variable\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:328
#: ./docs/9.x/blade.md:383
#: ./docs/10.x/blade.md:394
#: ./docs/11.x/blade.md:395
#: ./docs/master/blade.md:394
msgid "The Loop Variable"
msgstr ""

# P
#: ./docs/8.x/blade.md:330
#: ./docs/9.x/blade.md:385
#: ./docs/10.x/blade.md:396
#: ./docs/11.x/blade.md:397
#: ./docs/master/blade.md:396
msgid "While iterating through a `foreach` loop, a `$loop` variable will be available inside of your loop. This variable provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:332
#: ./docs/9.x/blade.md:387
#: ./docs/10.x/blade.md:398
#: ./docs/11.x/blade.md:399
#: ./docs/master/blade.md:398
msgid "@foreach ($users as $user)\n"
"    @if ($loop->first)\n"
"        This is the first iteration.\n"
"    @endif\n\n"
"    @if ($loop->last)\n"
"        This is the last iteration.\n"
"    @endif\n\n"
"    <p>This is user {{ $user->id }}</p>\n"
"@endforeach"
msgstr ""

# P
#: ./docs/8.x/blade.md:344
#: ./docs/9.x/blade.md:401
#: ./docs/10.x/blade.md:412
#: ./docs/11.x/blade.md:413
#: ./docs/master/blade.md:412
msgid "If you are in a nested loop, you may access the parent loop's `$loop` variable via the `parent` property:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:346
#: ./docs/9.x/blade.md:403
#: ./docs/10.x/blade.md:414
#: ./docs/11.x/blade.md:415
#: ./docs/master/blade.md:414
msgid "@foreach ($users as $user)\n"
"    @foreach ($user->posts as $post)\n"
"        @if ($loop->parent->first)\n"
"            This is the first iteration of the parent loop.\n"
"        @endif\n"
"    @endforeach\n"
"@endforeach"
msgstr ""

# P
#: ./docs/8.x/blade.md:354
#: ./docs/9.x/blade.md:413
#: ./docs/10.x/blade.md:424
#: ./docs/11.x/blade.md:425
#: ./docs/master/blade.md:424
msgid "The `$loop` variable also contains a variety of other useful properties:"
msgstr ""

# P
#: ./docs/9.x/blade.md:354
#: ./docs/10.x/blade.md:365
#: ./docs/11.x/blade.md:366
#: ./docs/master/blade.md:365
msgid "When using loops you may also skip the current iteration or end the loop using the `@continue` and `@break` directives:"
msgstr ""

# P
#: ./docs/8.x/blade.md:369
#: ./docs/9.x/blade.md:428
#: ./docs/10.x/blade.md:439
#: ./docs/11.x/blade.md:444
#: ./docs/master/blade.md:439
#~ msgid "<a name=\"conditional-classes\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:370
msgid "Conditional Classes"
msgstr ""

# P
#: ./docs/8.x/blade.md:372
#: ./docs/9.x/blade.md:431
#: ./docs/10.x/blade.md:442
#: ./docs/11.x/blade.md:447
#: ./docs/master/blade.md:442
msgid "The `@class` directive conditionally compiles a CSS class string. The directive accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:374
#: ./docs/9.x/blade.md:433
#: ./docs/10.x/blade.md:444
#: ./docs/11.x/blade.md:449
#: ./docs/master/blade.md:444
msgid "@php\n"
"    $isActive = false;\n"
"    $hasError = true;\n"
"@endphp\n\n"
"<span @class([\n"
"    'p-4',\n"
"    'font-bold' => $isActive,\n"
"    'text-gray-500' => ! $isActive,\n"
"    'bg-red' => $hasError,\n"
"])></span>\n\n"
"<span class=\"p-4 text-gray-500 bg-red\"></span>"
msgstr ""

# P
#: ./docs/8.x/blade.md:388
#: ./docs/9.x/blade.md:512
#: ./docs/10.x/blade.md:523
#: ./docs/11.x/blade.md:534
#: ./docs/master/blade.md:523
#~ msgid "<a name=\"including-subviews\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:389
#: ./docs/9.x/blade.md:513
#: ./docs/10.x/blade.md:524
#: ./docs/11.x/blade.md:535
#: ./docs/master/blade.md:524
msgid "Including Subviews"
msgstr ""

# P
#: ./docs/8.x/blade.md:391
#: ./docs/9.x/blade.md:516
#: ./docs/10.x/blade.md:527
#: ./docs/11.x/blade.md:538
#: ./docs/master/blade.md:527
msgid "While you're free to use the `@include` directive, Blade [components](#components) provide similar functionality and offer several benefits over the `@include` directive such as data and attribute binding."
msgstr ""

# P
#: ./docs/8.x/blade.md:393
#: ./docs/9.x/blade.md:518
#: ./docs/10.x/blade.md:529
#: ./docs/11.x/blade.md:540
#: ./docs/master/blade.md:529
msgid "Blade's `@include` directive allows you to include a Blade view from within another view. All variables that are available to the parent view will be made available to the included view:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:395
#: ./docs/9.x/blade.md:520
#: ./docs/10.x/blade.md:531
#: ./docs/11.x/blade.md:542
#: ./docs/master/blade.md:531
msgid "<div>\n"
"    @include('shared.errors')\n\n"
"    <form>\n"
"        <!-- Form Contents -->\n"
"    </form>\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:405
#: ./docs/9.x/blade.md:530
#: ./docs/10.x/blade.md:541
#: ./docs/11.x/blade.md:552
#: ./docs/master/blade.md:541
msgid "Even though the included view will inherit all data available in the parent view, you may also pass an array of additional data that should be made available to the included view:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:407
#: ./docs/9.x/blade.md:532
#: ./docs/10.x/blade.md:543
#: ./docs/11.x/blade.md:554
#: ./docs/master/blade.md:543
msgid "@include('view.name', ['status' => 'complete'])"
msgstr ""

# P
#: ./docs/8.x/blade.md:409
#: ./docs/9.x/blade.md:536
#: ./docs/10.x/blade.md:547
#: ./docs/11.x/blade.md:558
#: ./docs/master/blade.md:547
msgid "If you attempt to `@include` a view which does not exist, Laravel will throw an error. If you would like to include a view that may or may not be present, you should use the `@includeIf` directive:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:411
#: ./docs/9.x/blade.md:538
#: ./docs/10.x/blade.md:549
#: ./docs/11.x/blade.md:560
#: ./docs/master/blade.md:549
msgid "@includeIf('view.name', ['status' => 'complete'])"
msgstr ""

# P
#: ./docs/8.x/blade.md:413
#: ./docs/9.x/blade.md:542
#: ./docs/10.x/blade.md:553
#: ./docs/11.x/blade.md:564
#: ./docs/master/blade.md:553
msgid "If you would like to `@include` a view if a given boolean expression evaluates to `true` or `false`, you may use the `@includeWhen` and `@includeUnless` directives:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:415
#: ./docs/9.x/blade.md:544
#: ./docs/10.x/blade.md:555
#: ./docs/11.x/blade.md:566
#: ./docs/master/blade.md:555
msgid "@includeWhen($boolean, 'view.name', ['status' => 'complete'])\n\n"
"@includeUnless($boolean, 'view.name', ['status' => 'complete'])"
msgstr ""

# P
#: ./docs/8.x/blade.md:419
#: ./docs/10.x/blade.md:561
#: ./docs/11.x/blade.md:572
#: ./docs/master/blade.md:561
msgid "To include the first view that exists from a given array of views, you may use the `includeFirst` directive:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:421
#: ./docs/9.x/blade.md:552
#: ./docs/10.x/blade.md:563
#: ./docs/11.x/blade.md:574
#: ./docs/master/blade.md:563
msgid "@includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])"
msgstr ""

# P
#: ./docs/8.x/blade.md:423
#: ./docs/9.x/blade.md:557
#: ./docs/10.x/blade.md:568
#: ./docs/11.x/blade.md:579
#: ./docs/master/blade.md:568
msgid "You should avoid using the `__DIR__` and `__FILE__` constants in your Blade views, since they will refer to the location of the cached, compiled view."
msgstr ""

# P
#: ./docs/8.x/blade.md:425
#: ./docs/9.x/blade.md:559
#: ./docs/10.x/blade.md:570
#: ./docs/11.x/blade.md:581
#: ./docs/master/blade.md:570
#~ msgid "<a name=\"rendering-views-for-collections\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:426
#: ./docs/9.x/blade.md:560
msgid "Rendering Views For Collections"
msgstr ""

# P
#: ./docs/8.x/blade.md:428
#: ./docs/9.x/blade.md:562
#: ./docs/10.x/blade.md:573
#: ./docs/11.x/blade.md:584
#: ./docs/master/blade.md:573
msgid "You may combine loops and includes into one line with Blade's `@each` directive:"
msgstr ""

# H3
#: ./docs/9.x/blade.md:429
#: ./docs/10.x/blade.md:440
#: ./docs/11.x/blade.md:445
#: ./docs/master/blade.md:440
msgid "Conditional Classes & Styles"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:430
#: ./docs/9.x/blade.md:564
#: ./docs/10.x/blade.md:575
#: ./docs/11.x/blade.md:586
#: ./docs/master/blade.md:575
msgid "@each('view.name', $jobs, 'job')"
msgstr ""

# P
#: ./docs/8.x/blade.md:432
#: ./docs/9.x/blade.md:568
#: ./docs/10.x/blade.md:579
#: ./docs/11.x/blade.md:590
#: ./docs/master/blade.md:579
msgid "The `@each` directive's first argument is the view to render for each element in the array or collection. The second argument is the array or collection you wish to iterate over, while the third argument is the variable name that will be assigned to the current iteration within the view. So, for example, if you are iterating over an array of `jobs`, typically you will want to access each job as a `job` variable within the view. The array key for the current iteration will be available as the `key` variable within the view."
msgstr ""

# P
#: ./docs/8.x/blade.md:434
#: ./docs/9.x/blade.md:570
#: ./docs/10.x/blade.md:581
#: ./docs/11.x/blade.md:592
#: ./docs/master/blade.md:581
msgid "You may also pass a fourth argument to the `@each` directive. This argument determines the view that will be rendered if the given array is empty."
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:436
#: ./docs/9.x/blade.md:572
#: ./docs/10.x/blade.md:583
#: ./docs/11.x/blade.md:594
#: ./docs/master/blade.md:583
msgid "@each('view.name', $jobs, 'job', 'view.empty')"
msgstr ""

# P
#: ./docs/8.x/blade.md:438
#: ./docs/9.x/blade.md:577
#: ./docs/10.x/blade.md:588
#: ./docs/11.x/blade.md:599
#: ./docs/master/blade.md:588
msgid "Views rendered via `@each` do not inherit the variables from the parent view. If the child view requires these variables, you should use the `@foreach` and `@include` directives instead."
msgstr ""

# P
#: ./docs/8.x/blade.md:440
#: ./docs/9.x/blade.md:579
#: ./docs/10.x/blade.md:590
#: ./docs/11.x/blade.md:601
#: ./docs/master/blade.md:590
#~ msgid "<a name=\"the-once-directive\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:441
#: ./docs/9.x/blade.md:580
#: ./docs/10.x/blade.md:591
#: ./docs/11.x/blade.md:602
#: ./docs/master/blade.md:591
msgid "The `@once` Directive"
msgstr ""

# P
#: ./docs/8.x/blade.md:443
#: ./docs/9.x/blade.md:582
#: ./docs/10.x/blade.md:593
#: ./docs/11.x/blade.md:604
#: ./docs/master/blade.md:593
msgid "The `@once` directive allows you to define a portion of the template that will only be evaluated once per rendering cycle. This may be useful for pushing a given piece of JavaScript into the page's header using [stacks](#stacks). For example, if you are rendering a given [component](#components) within a loop, you may wish to only push the JavaScript to the header the first time the component is rendered:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:445
#: ./docs/9.x/blade.md:584
#: ./docs/10.x/blade.md:595
#: ./docs/11.x/blade.md:606
#: ./docs/master/blade.md:595
msgid "@once\n"
"    @push('scripts')\n"
"        <script>\n"
"            // Your custom JavaScript...\n"
"        </script>\n"
"    @endpush\n"
"@endonce"
msgstr ""

# P
#: ./docs/9.x/blade.md:449
#: ./docs/10.x/blade.md:460
#: ./docs/11.x/blade.md:465
#: ./docs/master/blade.md:460
msgid "Likewise, the `@style` directive may be used to conditionally add inline CSS styles to an HTML element:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:451
#: ./docs/10.x/blade.md:462
#: ./docs/11.x/blade.md:467
#: ./docs/master/blade.md:462
msgid "@php\n"
"    $isActive = true;\n"
"@endphp\n\n"
"<span @style([\n"
"    'background-color: red',\n"
"    'font-weight: bold' => $isActive,\n"
"])></span>\n\n"
"<span style=\"background-color: red; font-weight: bold;\"></span>"
msgstr ""

# P
#: ./docs/8.x/blade.md:453
#: ./docs/9.x/blade.md:604
#: ./docs/10.x/blade.md:615
#: ./docs/11.x/blade.md:626
#: ./docs/master/blade.md:615
#~ msgid "<a name=\"raw-php\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:454
#: ./docs/9.x/blade.md:605
#: ./docs/10.x/blade.md:616
#: ./docs/11.x/blade.md:627
#: ./docs/master/blade.md:616
msgid "Raw PHP"
msgstr ""

# P
#: ./docs/8.x/blade.md:456
#: ./docs/9.x/blade.md:607
#: ./docs/10.x/blade.md:618
#: ./docs/11.x/blade.md:629
#: ./docs/master/blade.md:618
msgid "In some situations, it's useful to embed PHP code into your views. You can use the Blade `@php` directive to execute a block of plain PHP within your template:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:458
#: ./docs/9.x/blade.md:609
#: ./docs/10.x/blade.md:620
#: ./docs/11.x/blade.md:631
#: ./docs/master/blade.md:620
msgid "@php\n"
"    $counter = 1;\n"
"@endphp"
msgstr ""

# P
#: ./docs/8.x/blade.md:462
#: ./docs/9.x/blade.md:621
#: ./docs/10.x/blade.md:638
#: ./docs/11.x/blade.md:649
#: ./docs/master/blade.md:638
#~ msgid "<a name=\"comments\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:463
#: ./docs/9.x/blade.md:622
#: ./docs/10.x/blade.md:639
#: ./docs/11.x/blade.md:650
#: ./docs/master/blade.md:639
msgid "Comments"
msgstr ""

# P
#: ./docs/9.x/blade.md:464
#: ./docs/10.x/blade.md:475
#: ./docs/11.x/blade.md:480
#: ./docs/master/blade.md:475
#~ msgid "<a name=\"additional-attributes\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/blade.md:465
#: ./docs/9.x/blade.md:624
#: ./docs/10.x/blade.md:641
#: ./docs/11.x/blade.md:652
#: ./docs/master/blade.md:641
msgid "Blade also allows you to define comments in your views. However, unlike HTML comments, Blade comments are not included in the HTML returned by your application:"
msgstr ""

# H3
#: ./docs/9.x/blade.md:465
#: ./docs/10.x/blade.md:476
#: ./docs/11.x/blade.md:481
#: ./docs/master/blade.md:476
msgid "Additional Attributes"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:467
#: ./docs/9.x/blade.md:626
#: ./docs/10.x/blade.md:643
#: ./docs/11.x/blade.md:654
#: ./docs/master/blade.md:643
msgid "{{-- This comment will not be present in the rendered HTML --}}"
msgstr ""

# P
#: ./docs/9.x/blade.md:467
#: ./docs/10.x/blade.md:478
#: ./docs/11.x/blade.md:483
#: ./docs/master/blade.md:478
msgid "For convenience, you may use the `@checked` directive to easily indicate if a given HTML checkbox input is \"checked\". This directive will echo `checked` if the provided condition evaluates to `true`:"
msgstr ""

# P
#: ./docs/8.x/blade.md:469
#: ./docs/9.x/blade.md:630
#: ./docs/10.x/blade.md:647
#: ./docs/11.x/blade.md:658
#: ./docs/master/blade.md:647
#~ msgid "<a name=\"components\"></a>"
#~ msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:469
#: ./docs/10.x/blade.md:480
#: ./docs/master/blade.md:480
msgid "<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />"
msgstr ""

# H2
#: ./docs/8.x/blade.md:470
#: ./docs/9.x/blade.md:631
#: ./docs/10.x/blade.md:648
#: ./docs/11.x/blade.md:659
#: ./docs/master/blade.md:648
msgid "Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:472
#: ./docs/9.x/blade.md:633
#: ./docs/10.x/blade.md:650
#: ./docs/11.x/blade.md:661
#: ./docs/master/blade.md:650
msgid "Components and slots provide similar benefits to sections, layouts, and includes; however, some may find the mental model of components and slots easier to understand. There are two approaches to writing components: class based components and anonymous components."
msgstr ""

# P
#: ./docs/8.x/blade.md:474
#: ./docs/9.x/blade.md:635
#: ./docs/10.x/blade.md:652
#: ./docs/11.x/blade.md:663
#: ./docs/master/blade.md:652
msgid "To create a class based component, you may use the `make:component` Artisan command. To illustrate how to use components, we will create a simple `Alert` component. The `make:component` command will place the component in the `app/View/Components` directory:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/blade.md:476
#: ./docs/9.x/blade.md:637
#: ./docs/10.x/blade.md:654
#: ./docs/11.x/blade.md:665
#: ./docs/master/blade.md:654
msgid "php artisan make:component Alert"
msgstr ""

# P
#: ./docs/9.x/blade.md:476
#: ./docs/10.x/blade.md:487
#: ./docs/11.x/blade.md:494
#: ./docs/master/blade.md:487
msgid "Likewise, the `@selected` directive may be used to indicate if a given select option should be \"selected\":"
msgstr ""

# P
#: ./docs/8.x/blade.md:478
#: ./docs/9.x/blade.md:641
#: ./docs/10.x/blade.md:658
#: ./docs/11.x/blade.md:669
#: ./docs/master/blade.md:658
msgid "The `make:component` command will also create a view template for the component. The view will be placed in the `resources/views/components` directory. When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory, so no further component registration is typically required."
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:478
#: ./docs/10.x/blade.md:489
#: ./docs/11.x/blade.md:496
#: ./docs/master/blade.md:489
msgid "<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>"
msgstr ""

# P
#: ./docs/8.x/blade.md:480
#: ./docs/9.x/blade.md:643
#: ./docs/10.x/blade.md:660
#: ./docs/11.x/blade.md:671
#: ./docs/master/blade.md:660
msgid "You may also create components within subdirectories:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/blade.md:482
#: ./docs/9.x/blade.md:645
#: ./docs/10.x/blade.md:662
#: ./docs/11.x/blade.md:673
#: ./docs/master/blade.md:662
msgid "php artisan make:component Forms/Input"
msgstr ""

# P
#: ./docs/8.x/blade.md:484
#: ./docs/9.x/blade.md:649
#: ./docs/10.x/blade.md:666
#: ./docs/11.x/blade.md:677
#: ./docs/master/blade.md:666
msgid "The command above will create an `Input` component in the `app/View/Components/Forms` directory and the view will be placed in the `resources/views/components/forms` directory."
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:485
msgid "<input\n"
"    type=\"checkbox\"\n"
"    name=\"active\"\n"
"    value=\"active\"\n"
"    @checked(old('active', $user->active))\n"
"/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:486
#: ./docs/9.x/blade.md:659
#: ./docs/10.x/blade.md:676
#: ./docs/11.x/blade.md:687
#: ./docs/master/blade.md:676
#~ msgid "<a name=\"manually-registering-package-components\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:487
#: ./docs/9.x/blade.md:660
#: ./docs/10.x/blade.md:677
#: ./docs/11.x/blade.md:688
#: ./docs/master/blade.md:677
msgid "Manually Registering Package Components"
msgstr ""

# P
#: ./docs/9.x/blade.md:488
#: ./docs/10.x/blade.md:499
#: ./docs/11.x/blade.md:506
#: ./docs/master/blade.md:499
msgid "Additionally, the `@disabled` directive may be used to indicate if a given element should be \"disabled\":"
msgstr ""

# P
#: ./docs/8.x/blade.md:489
#: ./docs/8.x/blade.md:1089
#: ./docs/9.x/blade.md:662
#: ./docs/9.x/blade.md:1245
#: ./docs/10.x/blade.md:679
#: ./docs/10.x/blade.md:1277
#: ./docs/11.x/blade.md:690
#: ./docs/11.x/blade.md:1317
#: ./docs/master/blade.md:679
#: ./docs/master/blade.md:1277
msgid "When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory."
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:490
#: ./docs/10.x/blade.md:501
#: ./docs/11.x/blade.md:508
#: ./docs/master/blade.md:501
msgid "<button type=\"submit\" @disabled($errors->isNotEmpty())>Submit</button>"
msgstr ""

# P
#: ./docs/8.x/blade.md:491
#: ./docs/9.x/blade.md:664
#: ./docs/10.x/blade.md:681
#: ./docs/11.x/blade.md:692
#: ./docs/master/blade.md:681
msgid "However, if you are building a package that utilizes Blade components, you will need to manually register your component class and its HTML tag alias. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:493
#: ./docs/9.x/blade.md:666
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', Alert::class);\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:494
#: ./docs/10.x/blade.md:505
#: ./docs/11.x/blade.md:512
#: ./docs/master/blade.md:505
msgid "Moreover, the `@readonly` directive may be used to indicate if a given element should be \"readonly\":"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:496
#: ./docs/10.x/blade.md:507
#: ./docs/master/blade.md:507
msgid "<input type=\"email\"\n"
"        name=\"email\"\n"
"        value=\"email@laravel.com\"\n"
"        @readonly($user->isNotAdmin()) />"
msgstr ""

# P
#: ./docs/8.x/blade.md:503
#: ./docs/8.x/blade.md:1106
#: ./docs/9.x/blade.md:676
#: ./docs/9.x/blade.md:1262
#: ./docs/10.x/blade.md:693
#: ./docs/10.x/blade.md:1292
#: ./docs/11.x/blade.md:704
#: ./docs/11.x/blade.md:1332
#: ./docs/master/blade.md:693
#: ./docs/master/blade.md:1292
msgid "Once your component has been registered, it may be rendered using its tag alias:"
msgstr ""

# P
#: ./docs/9.x/blade.md:503
#: ./docs/10.x/blade.md:514
#: ./docs/11.x/blade.md:523
#: ./docs/master/blade.md:514
msgid "In addition, the `@required` directive may be used to indicate if a given element should be \"required\":"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:505
#: ./docs/8.x/blade.md:1108
#: ./docs/9.x/blade.md:678
#: ./docs/9.x/blade.md:1264
#: ./docs/10.x/blade.md:695
#: ./docs/10.x/blade.md:1294
#: ./docs/11.x/blade.md:706
#: ./docs/11.x/blade.md:1334
#: ./docs/master/blade.md:695
#: ./docs/master/blade.md:1294
msgid "<x-package-alert/>"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:505
#: ./docs/10.x/blade.md:516
#: ./docs/master/blade.md:516
msgid "<input type=\"text\"\n"
"        name=\"title\"\n"
"        value=\"title\"\n"
"        @required($user->isAdmin()) />"
msgstr ""

# P
#: ./docs/8.x/blade.md:507
#: ./docs/8.x/blade.md:1112
#: ./docs/9.x/blade.md:682
#: ./docs/9.x/blade.md:1270
#: ./docs/10.x/blade.md:699
#: ./docs/10.x/blade.md:1300
#: ./docs/11.x/blade.md:710
#: ./docs/11.x/blade.md:1340
#: ./docs/master/blade.md:699
#: ./docs/master/blade.md:1300
msgid "Alternatively, you may use the `componentNamespace` method to autoload component classes by convention. For example, a `Nightshade` package might have `Calendar` and `ColorPicker` components that reside within the `Package\\Views\\Components` namespace:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:509
#: ./docs/8.x/blade.md:1114
#: ./docs/9.x/blade.md:684
#: ./docs/9.x/blade.md:1272
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"}"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:514
msgid "<input\n"
"    type=\"email\"\n"
"    name=\"email\"\n"
"    value=\"email@laravel.com\"\n"
"    @readonly($user->isNotAdmin())\n"
"/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:521
#: ./docs/8.x/blade.md:1126
#: ./docs/9.x/blade.md:696
#: ./docs/9.x/blade.md:1284
#: ./docs/10.x/blade.md:711
#: ./docs/10.x/blade.md:1312
#: ./docs/11.x/blade.md:722
#: ./docs/11.x/blade.md:1352
#: ./docs/master/blade.md:711
#: ./docs/master/blade.md:1312
msgid "This will allow the usage of package components by their vendor namespace using the `package-name::` syntax:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:523
#: ./docs/8.x/blade.md:1128
#: ./docs/9.x/blade.md:698
#: ./docs/9.x/blade.md:1286
#: ./docs/10.x/blade.md:713
#: ./docs/10.x/blade.md:1314
#: ./docs/11.x/blade.md:724
#: ./docs/11.x/blade.md:1354
#: ./docs/master/blade.md:713
#: ./docs/master/blade.md:1314
msgid "<x-nightshade::calendar />\n"
"<x-nightshade::color-picker />"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:525
msgid "<input\n"
"    type=\"text\"\n"
"    name=\"title\"\n"
"    value=\"title\"\n"
"    @required($user->isAdmin())\n"
"/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:526
#: ./docs/8.x/blade.md:1131
#: ./docs/9.x/blade.md:703
#: ./docs/9.x/blade.md:1291
#: ./docs/10.x/blade.md:718
#: ./docs/10.x/blade.md:1319
#: ./docs/11.x/blade.md:729
#: ./docs/11.x/blade.md:1359
#: ./docs/master/blade.md:718
#: ./docs/master/blade.md:1319
msgid "Blade will automatically detect the class that's linked to this component by pascal-casing the component name. Subdirectories are also supported using \"dot\" notation."
msgstr ""

# P
#: ./docs/8.x/blade.md:528
#: ./docs/9.x/blade.md:705
#: ./docs/10.x/blade.md:720
#: ./docs/11.x/blade.md:731
#: ./docs/master/blade.md:720
#~ msgid "<a name=\"rendering-components\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:529
#: ./docs/9.x/blade.md:706
#: ./docs/10.x/blade.md:721
#: ./docs/11.x/blade.md:732
#: ./docs/master/blade.md:721
msgid "Rendering Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:531
#: ./docs/9.x/blade.md:708
#: ./docs/10.x/blade.md:723
#: ./docs/11.x/blade.md:734
#: ./docs/master/blade.md:723
msgid "To display a component, you may use a Blade component tag within one of your Blade templates. Blade component tags start with the string `x-` followed by the kebab case name of the component class:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:533
#: ./docs/9.x/blade.md:710
#: ./docs/10.x/blade.md:725
#: ./docs/11.x/blade.md:736
#: ./docs/master/blade.md:725
msgid "<x-alert/>\n\n"
"<x-user-profile/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:537
#: ./docs/9.x/blade.md:716
#: ./docs/10.x/blade.md:731
#: ./docs/11.x/blade.md:742
#: ./docs/master/blade.md:731
msgid "If the component class is nested deeper within the `app/View/Components` directory, you may use the `.` character to indicate directory nesting. For example, if we assume a component is located at `app/View/Components/Inputs/Button.php`, we may render it like so:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:539
#: ./docs/8.x/blade.md:997
#: ./docs/9.x/blade.md:718
#: ./docs/9.x/blade.md:1304
#: ./docs/10.x/blade.md:733
#: ./docs/10.x/blade.md:1332
#: ./docs/11.x/blade.md:744
#: ./docs/11.x/blade.md:1372
#: ./docs/master/blade.md:733
#: ./docs/master/blade.md:1332
msgid "<x-inputs.button/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:541
#: ./docs/9.x/blade.md:722
#: ./docs/10.x/blade.md:749
#: ./docs/11.x/blade.md:780
#: ./docs/master/blade.md:749
#~ msgid "<a name=\"passing-data-to-components\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:542
#: ./docs/9.x/blade.md:723
msgid "Passing Data To Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:544
#: ./docs/9.x/blade.md:725
#: ./docs/10.x/blade.md:752
#: ./docs/11.x/blade.md:783
#: ./docs/master/blade.md:752
msgid "You may pass data to Blade components using HTML attributes. Hard-coded, primitive values may be passed to the component using simple HTML attribute strings. PHP expressions and variables should be passed to the component via attributes that use the `:` character as a prefix:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:546
#: ./docs/9.x/blade.md:727
#: ./docs/10.x/blade.md:754
#: ./docs/11.x/blade.md:785
#: ./docs/master/blade.md:754
msgid "<x-alert type=\"error\" :message=\"$message\"/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:548
msgid "You should define the component's required data in its class constructor. All public properties on a component will automatically be made available to the component's view. It is not necessary to pass the data to the view from the component's `render` method:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:550
#: ./docs/9.x/blade.md:733
msgid "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n\n"
"    /**\n"
"     * The alert message.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $message;\n\n"
"    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  string  $type\n"
"     * @param  string  $message\n"
"     * @return void\n"
"     */\n"
"    public function __construct($type, $message)\n"
"    {\n"
"        $this->type = $type;\n"
"        $this->message = $message;\n"
"    }\n\n"
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return view('components.alert');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:550
msgid "To include the first view that exists from a given array of views, you may use the `@includeFirst` directive:"
msgstr ""

# H4
#: ./docs/10.x/blade.md:571
#: ./docs/11.x/blade.md:582
#: ./docs/master/blade.md:571
msgid "Rendering Views for Collections"
msgstr ""

# P
#: ./docs/9.x/blade.md:594
#: ./docs/10.x/blade.md:605
#: ./docs/11.x/blade.md:616
#: ./docs/master/blade.md:605
msgid "Since the `@once` directive is often used in conjunction with the `@push` or `@prepend` directives, the `@pushOnce` and `@prependOnce` directives are available for your convenience:"
msgstr ""

# P
#: ./docs/8.x/blade.md:596
#: ./docs/9.x/blade.md:779
#: ./docs/10.x/blade.md:786
#: ./docs/11.x/blade.md:817
#: ./docs/master/blade.md:786
msgid "When your component is rendered, you may display the contents of your component's public variables by echoing the variables by name:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:596
#: ./docs/10.x/blade.md:607
#: ./docs/11.x/blade.md:618
#: ./docs/master/blade.md:607
msgid "@pushOnce('scripts')\n"
"    <script>\n"
"        // Your custom JavaScript...\n"
"    </script>\n"
"@endPushOnce"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:598
#: ./docs/9.x/blade.md:781
#: ./docs/10.x/blade.md:788
#: ./docs/11.x/blade.md:819
#: ./docs/master/blade.md:788
msgid "<div class=\"alert alert-{{ $type }}\">\n"
"    {{ $message }}\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:604
#: ./docs/9.x/blade.md:787
#: ./docs/10.x/blade.md:794
#: ./docs/11.x/blade.md:825
#: ./docs/master/blade.md:794
#~ msgid "<a name=\"casing\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:605
#: ./docs/9.x/blade.md:788
#: ./docs/10.x/blade.md:795
#: ./docs/11.x/blade.md:826
#: ./docs/master/blade.md:795
msgid "Casing"
msgstr ""

# P
#: ./docs/8.x/blade.md:607
#: ./docs/9.x/blade.md:790
#: ./docs/10.x/blade.md:797
#: ./docs/11.x/blade.md:828
#: ./docs/master/blade.md:797
msgid "Component constructor arguments should be specified using `camelCase`, while `kebab-case` should be used when referencing the argument names in your HTML attributes. For example, given the following component constructor:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:609
#: ./docs/9.x/blade.md:792
msgid "/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  string  $alertType\n"
" * @return void\n"
" */\n"
"public function __construct($alertType)\n"
"{\n"
"    $this->alertType = $alertType;\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:615
msgid "If you only need to write a single PHP statement, you can include the statement within the `@php` directive:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:617
msgid "@php($counter = 1)"
msgstr ""

# P
#: ./docs/8.x/blade.md:620
#: ./docs/9.x/blade.md:803
#: ./docs/10.x/blade.md:806
#: ./docs/11.x/blade.md:837
#: ./docs/master/blade.md:806
msgid "The `$alertType` argument may be provided to the component like so:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:622
#: ./docs/9.x/blade.md:805
#: ./docs/10.x/blade.md:808
#: ./docs/11.x/blade.md:839
#: ./docs/master/blade.md:808
msgid "<x-alert alert-type=\"danger\" />"
msgstr ""

# P
#: ./docs/8.x/blade.md:624
#: ./docs/9.x/blade.md:822
#: ./docs/10.x/blade.md:825
#: ./docs/11.x/blade.md:856
#: ./docs/master/blade.md:825
#~ msgid "<a name=\"escaping-attribute-rendering\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:625
#: ./docs/9.x/blade.md:823
#: ./docs/10.x/blade.md:826
#: ./docs/11.x/blade.md:857
#: ./docs/master/blade.md:826
msgid "Escaping Attribute Rendering"
msgstr ""

# P
#: ./docs/10.x/blade.md:626
#: ./docs/11.x/blade.md:637
#: ./docs/master/blade.md:626
msgid "Or, if you only need to use PHP to import a class, you may use the `@use` directive:"
msgstr ""

# P
#: ./docs/8.x/blade.md:627
#: ./docs/9.x/blade.md:825
#: ./docs/10.x/blade.md:828
#: ./docs/11.x/blade.md:859
#: ./docs/master/blade.md:828
msgid "Since some JavaScript frameworks such as Alpine.js also use colon-prefixed attributes, you may use a double colon (`::`) prefix to inform Blade that the attribute is not a PHP expression. For example, given the following component:"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:628
#: ./docs/11.x/blade.md:639
#: ./docs/master/blade.md:628
msgid "@use('App\\Models\\Flight')"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:629
#: ./docs/9.x/blade.md:827
#: ./docs/10.x/blade.md:830
#: ./docs/11.x/blade.md:861
#: ./docs/master/blade.md:830
msgid "<x-button ::class=\"{ danger: isDeleting }\">\n"
"    Submit\n"
"</x-button>"
msgstr ""

# P
#: ./docs/10.x/blade.md:632
#: ./docs/11.x/blade.md:643
#: ./docs/master/blade.md:632
msgid "A second argument may be provided to the `@use` directive to alias the imported class:"
msgstr ""

# P
#: ./docs/8.x/blade.md:633
#: ./docs/9.x/blade.md:833
#: ./docs/10.x/blade.md:836
#: ./docs/11.x/blade.md:867
#: ./docs/master/blade.md:836
msgid "The following HTML will be rendered by Blade:"
msgstr ""

# CODE: php
#: ./docs/10.x/blade.md:634
#: ./docs/11.x/blade.md:645
#: ./docs/master/blade.md:634
msgid "@use('App\\Models\\Flight', 'FlightModel')"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:635
#: ./docs/9.x/blade.md:835
#: ./docs/10.x/blade.md:838
#: ./docs/11.x/blade.md:869
#: ./docs/master/blade.md:838
msgid "<button :class=\"{ danger: isDeleting }\">\n"
"    Submit\n"
"</button>"
msgstr ""

# P
#: ./docs/8.x/blade.md:639
#: ./docs/9.x/blade.md:841
#: ./docs/10.x/blade.md:844
#: ./docs/11.x/blade.md:875
#: ./docs/master/blade.md:844
#~ msgid "<a name=\"component-methods\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:640
#: ./docs/9.x/blade.md:842
#: ./docs/10.x/blade.md:845
#: ./docs/11.x/blade.md:876
#: ./docs/master/blade.md:845
msgid "Component Methods"
msgstr ""

# P
#: ./docs/8.x/blade.md:642
#: ./docs/9.x/blade.md:844
#: ./docs/10.x/blade.md:847
#: ./docs/11.x/blade.md:878
#: ./docs/master/blade.md:847
msgid "In addition to public variables being available to your component template, any public methods on the component may be invoked. For example, imagine a component that has an `isSelected` method:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:644
#: ./docs/9.x/blade.md:846
msgid "/**\n"
" * Determine if the given option is the currently selected option.\n"
" *\n"
" * @param  string  $option\n"
" * @return bool\n"
" */\n"
"public function isSelected($option)\n"
"{\n"
"    return $option === $this->selected;\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:651
#: ./docs/10.x/blade.md:668
#: ./docs/11.x/blade.md:679
#: ./docs/master/blade.md:668
msgid "If you would like to create an anonymous component (a component with only a Blade template and no class), you may use the `--view` flag when invoking the `make:component` command:"
msgstr ""

# CODE: shell
#: ./docs/9.x/blade.md:653
#: ./docs/10.x/blade.md:670
#: ./docs/11.x/blade.md:681
#: ./docs/master/blade.md:670
msgid "php artisan make:component forms.input --view"
msgstr ""

# P
#: ./docs/8.x/blade.md:655
#: ./docs/9.x/blade.md:857
#: ./docs/10.x/blade.md:857
#: ./docs/11.x/blade.md:888
#: ./docs/master/blade.md:857
msgid "You may execute this method from your component template by invoking the variable matching the name of the method:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:657
msgid "<option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n"
"    {{ $label }}\n"
"</option>"
msgstr ""

# P
#: ./docs/9.x/blade.md:657
#: ./docs/10.x/blade.md:674
#: ./docs/11.x/blade.md:685
#: ./docs/master/blade.md:674
msgid "The command above will create a Blade file at `resources/views/components/forms/input.blade.php` which can be rendered as a component via `<x-forms.input />`."
msgstr ""

# P
#: ./docs/8.x/blade.md:661
#: ./docs/9.x/blade.md:865
#: ./docs/10.x/blade.md:865
#: ./docs/11.x/blade.md:896
#: ./docs/master/blade.md:865
#~ msgid "<a name=\"using-attributes-slots-within-component-class\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:662
#: ./docs/9.x/blade.md:866
msgid "Accessing Attributes & Slots Within Component Classes"
msgstr ""

# P
#: ./docs/8.x/blade.md:664
#: ./docs/9.x/blade.md:868
#: ./docs/10.x/blade.md:868
#: ./docs/master/blade.md:868
msgid "Blade components also allow you to access the component name, attributes, and slot inside the class's render method. However, in order to access this data, you should return a closure from your component's `render` method. The closure will receive a `$data` array as its only argument. This array will contain several elements that provide information about the component:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:666
#: ./docs/9.x/blade.md:870
msgid "/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return function (array $data) {\n"
"        // $data['componentName'];\n"
"        // $data['attributes'];\n"
"        // $data['slot'];\n\n"
"        return '<div>Components content</div>';\n"
"    };\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:682
#: ./docs/9.x/blade.md:886
#: ./docs/10.x/blade.md:886
#: ./docs/11.x/blade.md:926
#: ./docs/master/blade.md:886
msgid "The `componentName` is equal to the name used in the HTML tag after the `x-` prefix. So `<x-alert />`'s `componentName` will be `alert`. The `attributes` element will contain all of the attributes that were present on the HTML tag. The `slot` element is an `Illuminate\\Support\\HtmlString` instance with the contents of the component's slot."
msgstr ""

# CODE
#: ./docs/10.x/blade.md:683
#: ./docs/11.x/blade.md:694
#: ./docs/master/blade.md:683
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Blade::component('package-alert', Alert::class);\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:684
#: ./docs/9.x/blade.md:888
#: ./docs/10.x/blade.md:888
#: ./docs/11.x/blade.md:928
#: ./docs/master/blade.md:888
msgid "The closure should return a string. If the returned string corresponds to an existing view, that view will be rendered; otherwise, the returned string will be evaluated as an inline Blade view."
msgstr ""

# P
#: ./docs/8.x/blade.md:686
#: ./docs/9.x/blade.md:890
#: ./docs/10.x/blade.md:890
#: ./docs/11.x/blade.md:930
#: ./docs/master/blade.md:890
#~ msgid "<a name=\"additional-dependencies\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:687
#: ./docs/9.x/blade.md:891
#: ./docs/10.x/blade.md:891
#: ./docs/11.x/blade.md:931
#: ./docs/master/blade.md:891
msgid "Additional Dependencies"
msgstr ""

# P
#: ./docs/8.x/blade.md:689
#: ./docs/9.x/blade.md:893
#: ./docs/10.x/blade.md:893
#: ./docs/11.x/blade.md:933
#: ./docs/master/blade.md:893
msgid "If your component requires dependencies from Laravel's [service container](/docs/{{version}}/container), you may list them before any of the component's data attributes and they will automatically be injected by the container:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:691
msgid "use App\\Services\\AlertCreator\n\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:701
#: ./docs/10.x/blade.md:1302
#: ./docs/11.x/blade.md:712
#: ./docs/11.x/blade.md:1342
#: ./docs/master/blade.md:701
#: ./docs/master/blade.md:1302
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:708
#: ./docs/9.x/blade.md:914
#: ./docs/10.x/blade.md:908
#: ./docs/11.x/blade.md:948
#: ./docs/master/blade.md:908
#~ msgid "<a name=\"hiding-attributes-and-methods\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:709
#: ./docs/9.x/blade.md:915
#: ./docs/10.x/blade.md:909
#: ./docs/11.x/blade.md:949
#: ./docs/master/blade.md:909
msgid "Hiding Attributes / Methods"
msgstr ""

# P
#: ./docs/8.x/blade.md:711
#: ./docs/9.x/blade.md:917
#: ./docs/10.x/blade.md:911
#: ./docs/11.x/blade.md:951
#: ./docs/master/blade.md:911
msgid "If you would like to prevent some public methods or properties from being exposed as variables to your component template, you may add them to an `$except` array property on your component:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:713
#: ./docs/9.x/blade.md:919
msgid "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n\n"
"    /**\n"
"     * The properties / methods that should not be exposed to the component template.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = ['type'];\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:731
#: ./docs/10.x/blade.md:758
#: ./docs/11.x/blade.md:789
#: ./docs/master/blade.md:758
msgid "You should define all of the component's data attributes in its class constructor. All public properties on a component will automatically be made available to the component's view. It is not necessary to pass the data to the view from the component's `render` method:"
msgstr ""

# P
#: ./docs/8.x/blade.md:736
#: ./docs/9.x/blade.md:942
#: ./docs/10.x/blade.md:936
#: ./docs/11.x/blade.md:976
#: ./docs/master/blade.md:936
#~ msgid "<a name=\"component-attributes\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/blade.md:737
#: ./docs/11.x/blade.md:748
#: ./docs/master/blade.md:737
msgid "If you would like to conditionally render your component, you may define a `shouldRender` method on your component class. If the `shouldRender` method returns `false` the component will not be rendered:"
msgstr ""

# H3
#: ./docs/8.x/blade.md:737
#: ./docs/9.x/blade.md:943
#: ./docs/10.x/blade.md:937
#: ./docs/11.x/blade.md:977
#: ./docs/master/blade.md:937
msgid "Component Attributes"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:739
#: ./docs/11.x/blade.md:750
#: ./docs/master/blade.md:739
msgid "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Whether the component should be rendered\n"
" */\n"
"public function shouldRender(): bool\n"
"{\n"
"    return Str::length($this->message) > 0;\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:739
#: ./docs/9.x/blade.md:945
#: ./docs/10.x/blade.md:939
#: ./docs/11.x/blade.md:979
#: ./docs/master/blade.md:939
msgid "We've already examined how to pass data attributes to a component; however, sometimes you may need to specify additional HTML attributes, such as `class`, that are not part of the data required for a component to function. Typically, you want to pass these additional attributes down to the root element of the component template. For example, imagine we want to render an `alert` component like so:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:741
#: ./docs/9.x/blade.md:947
#: ./docs/10.x/blade.md:941
#: ./docs/11.x/blade.md:981
#: ./docs/master/blade.md:941
msgid "<x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:743
#: ./docs/9.x/blade.md:951
#: ./docs/10.x/blade.md:945
#: ./docs/11.x/blade.md:985
#: ./docs/master/blade.md:945
msgid "All of the attributes that are not part of the component's constructor will automatically be added to the component's \"attribute bag\". This attribute bag is automatically made available to the component via the `$attributes` variable. All of the attributes may be rendered within the component by echoing this variable:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:745
#: ./docs/9.x/blade.md:953
#: ./docs/10.x/blade.md:947
#: ./docs/11.x/blade.md:987
#: ./docs/master/blade.md:947
msgid "<div {{ $attributes }}>\n"
"    <!-- Component content -->\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:749
#: ./docs/9.x/blade.md:960
#: ./docs/10.x/blade.md:954
#: ./docs/11.x/blade.md:994
#: ./docs/master/blade.md:954
msgid "Using directives such as `@env` within component tags is not supported at this time. For example, `<x-alert :live=\"@env('production')\"/>` will not be compiled."
msgstr ""

# H3
#: ./docs/10.x/blade.md:750
#: ./docs/11.x/blade.md:781
#: ./docs/master/blade.md:750
msgid "Passing Data to Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:751
#: ./docs/9.x/blade.md:962
#: ./docs/10.x/blade.md:956
#: ./docs/11.x/blade.md:996
#: ./docs/master/blade.md:956
#~ msgid "<a name=\"default-merged-attributes\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:752
#: ./docs/9.x/blade.md:963
#: ./docs/10.x/blade.md:957
#: ./docs/11.x/blade.md:997
#: ./docs/master/blade.md:957
msgid "Default / Merged Attributes"
msgstr ""

# P
#: ./docs/8.x/blade.md:754
#: ./docs/9.x/blade.md:965
#: ./docs/10.x/blade.md:959
#: ./docs/11.x/blade.md:999
#: ./docs/master/blade.md:959
msgid "Sometimes you may need to specify default values for attributes or merge additional values into some of the component's attributes. To accomplish this, you may use the attribute bag's `merge` method. This method is particularly useful for defining a set of default CSS classes that should always be applied to a component:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:756
#: ./docs/9.x/blade.md:967
#: ./docs/10.x/blade.md:961
#: ./docs/11.x/blade.md:1001
#: ./docs/master/blade.md:961
msgid "<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:760
#: ./docs/11.x/blade.md:791
#: ./docs/master/blade.md:760
msgid "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n"
"use Illuminate\\View\\View;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * Create the component instance.\n"
"     */\n"
"    public function __construct(\n"
"        public string $type,\n"
"        public string $message,\n"
"    ) {}\n\n"
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     */\n"
"    public function render(): View\n"
"    {\n"
"        return view('components.alert');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/11.x/blade.md:760
#~ msgid "<a name=\"index-components\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/blade.md:760
#: ./docs/9.x/blade.md:973
#: ./docs/10.x/blade.md:967
#: ./docs/11.x/blade.md:1007
#: ./docs/master/blade.md:967
msgid "If we assume this component is utilized like so:"
msgstr ""

# H3
#: ./docs/11.x/blade.md:761
msgid "Index Components"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:762
#: ./docs/8.x/blade.md:1045
#: ./docs/9.x/blade.md:975
#: ./docs/9.x/blade.md:1356
#: ./docs/10.x/blade.md:969
#: ./docs/10.x/blade.md:1384
#: ./docs/11.x/blade.md:1009
#: ./docs/11.x/blade.md:1424
#: ./docs/master/blade.md:969
#: ./docs/master/blade.md:1384
msgid "<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>"
msgstr ""

# P
#: ./docs/11.x/blade.md:763
msgid "Sometimes components are part of a component group and you may wish to group the related components within a single directory. For example, imagine a \"card\" component with the following class structure:"
msgstr ""

# P
#: ./docs/8.x/blade.md:764
#: ./docs/9.x/blade.md:979
#: ./docs/10.x/blade.md:973
#: ./docs/11.x/blade.md:1013
#: ./docs/master/blade.md:973
msgid "The final, rendered HTML of the component will appear like the following:"
msgstr ""

# CODE: none
#: ./docs/11.x/blade.md:765
msgid "App\\Views\\Components\\Card\\Card\n"
"App\\Views\\Components\\Card\\Header\n"
"App\\Views\\Components\\Card\\Body"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:766
#: ./docs/9.x/blade.md:981
#: ./docs/10.x/blade.md:975
#: ./docs/11.x/blade.md:1015
#: ./docs/master/blade.md:975
msgid "<div class=\"alert alert-error mb-4\">\n"
"    <!-- Contents of the $message variable -->\n"
"</div>"
msgstr ""

# P
#: ./docs/11.x/blade.md:771
msgid "Since the root `Card` component is nested within a `Card` directory, you might expect that you would need to render the component via `<x-card.card>`. However, when a component's file name matches the name of the component's directory, Laravel automatically assumes that component is the \"root\" component and allows you to render the component without repeating the directory name:"
msgstr ""

# P
#: ./docs/8.x/blade.md:772
#: ./docs/9.x/blade.md:987
#: ./docs/10.x/blade.md:981
#: ./docs/11.x/blade.md:1021
#: ./docs/master/blade.md:981
#~ msgid "<a name=\"conditionally-merge-classes\"></a>"
#~ msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:773
msgid "<x-card>\n"
"    <x-card.header>...</x-card.header>\n"
"    <x-card.body>...</x-card.body>\n"
"</x-card>"
msgstr ""

# H4
#: ./docs/8.x/blade.md:773
#: ./docs/9.x/blade.md:988
#: ./docs/10.x/blade.md:982
#: ./docs/11.x/blade.md:1022
#: ./docs/master/blade.md:982
msgid "Conditionally Merge Classes"
msgstr ""

# P
#: ./docs/8.x/blade.md:775
#: ./docs/9.x/blade.md:990
#: ./docs/10.x/blade.md:984
#: ./docs/11.x/blade.md:1024
#: ./docs/master/blade.md:984
msgid "Sometimes you may wish to merge classes if a given condition is `true`. You can accomplish this via the `class` method, which accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:777
#: ./docs/9.x/blade.md:992
#: ./docs/10.x/blade.md:986
#: ./docs/11.x/blade.md:1026
#: ./docs/master/blade.md:986
msgid "<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n"
"    {{ $message }}\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:781
#: ./docs/9.x/blade.md:998
#: ./docs/10.x/blade.md:992
#: ./docs/11.x/blade.md:1032
#: ./docs/master/blade.md:992
msgid "If you need to merge other attributes onto your component, you can chain the `merge` method onto the `class` method:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:783
#: ./docs/9.x/blade.md:1000
#: ./docs/10.x/blade.md:994
#: ./docs/11.x/blade.md:1034
#: ./docs/master/blade.md:994
msgid "<button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>"
msgstr ""

# P
#: ./docs/8.x/blade.md:787
#: ./docs/9.x/blade.md:1007
#: ./docs/10.x/blade.md:1001
#: ./docs/11.x/blade.md:1041
#: ./docs/master/blade.md:1001
msgid "If you need to conditionally compile classes on other HTML elements that shouldn't receive merged attributes, you can use the [`@class` directive](#conditional-classes)."
msgstr ""

# P
#: ./docs/8.x/blade.md:789
#: ./docs/9.x/blade.md:1009
#: ./docs/10.x/blade.md:1003
#: ./docs/11.x/blade.md:1043
#: ./docs/master/blade.md:1003
#~ msgid "<a name=\"non-class-attribute-merging\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:790
#: ./docs/9.x/blade.md:1010
#: ./docs/10.x/blade.md:1004
#: ./docs/11.x/blade.md:1044
#: ./docs/master/blade.md:1004
msgid "Non-Class Attribute Merging"
msgstr ""

# P
#: ./docs/8.x/blade.md:792
#: ./docs/9.x/blade.md:1012
#: ./docs/10.x/blade.md:1006
#: ./docs/11.x/blade.md:1046
#: ./docs/master/blade.md:1006
msgid "When merging attributes that are not `class` attributes, the values provided to the `merge` method will be considered the \"default\" values of the attribute. However, unlike the `class` attribute, these attributes will not be merged with injected attribute values. Instead, they will be overwritten. For example, a `button` component's implementation may look like the following:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:794
#: ./docs/9.x/blade.md:1014
#: ./docs/10.x/blade.md:1008
#: ./docs/11.x/blade.md:1048
#: ./docs/master/blade.md:1008
msgid "<button {{ $attributes->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>"
msgstr ""

# P
#: ./docs/8.x/blade.md:798
#: ./docs/9.x/blade.md:1020
#: ./docs/10.x/blade.md:1014
#: ./docs/11.x/blade.md:1054
#: ./docs/master/blade.md:1014
msgid "To render the button component with a custom `type`, it may be specified when consuming the component. If no type is specified, the `button` type will be used:"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:799
#: ./docs/11.x/blade.md:830
#: ./docs/master/blade.md:799
msgid "/**\n"
" * Create the component instance.\n"
" */\n"
"public function __construct(\n"
"    public string $alertType,\n"
") {}"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:800
#: ./docs/9.x/blade.md:1022
#: ./docs/10.x/blade.md:1016
#: ./docs/11.x/blade.md:1056
#: ./docs/master/blade.md:1016
msgid "<x-button type=\"submit\">\n"
"    Submit\n"
"</x-button>"
msgstr ""

# P
#: ./docs/8.x/blade.md:804
#: ./docs/9.x/blade.md:1028
#: ./docs/10.x/blade.md:1022
#: ./docs/11.x/blade.md:1062
#: ./docs/master/blade.md:1022
msgid "The rendered HTML of the `button` component in this example would be:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:806
#: ./docs/9.x/blade.md:1030
#: ./docs/10.x/blade.md:1024
#: ./docs/11.x/blade.md:1064
#: ./docs/master/blade.md:1024
msgid "<button type=\"submit\">\n"
"    Submit\n"
"</button>"
msgstr ""

# P
#: ./docs/9.x/blade.md:809
#: ./docs/10.x/blade.md:812
#: ./docs/11.x/blade.md:843
#: ./docs/master/blade.md:812
#~ msgid "<a name=\"short-attribute-syntax\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/blade.md:810
#: ./docs/9.x/blade.md:1036
#: ./docs/10.x/blade.md:1030
#: ./docs/11.x/blade.md:1070
#: ./docs/master/blade.md:1030
msgid "If you would like an attribute other than `class` to have its default value and injected values joined together, you may use the `prepends` method. In this example, the `data-controller` attribute will always begin with `profile-controller` and any additional injected `data-controller` values will be placed after this default value:"
msgstr ""

# H4
#: ./docs/9.x/blade.md:810
#: ./docs/10.x/blade.md:813
#: ./docs/11.x/blade.md:844
#: ./docs/master/blade.md:813
msgid "Short Attribute Syntax"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:812
#: ./docs/9.x/blade.md:1038
#: ./docs/10.x/blade.md:1032
#: ./docs/11.x/blade.md:1072
#: ./docs/master/blade.md:1032
msgid "<div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>\n"
"    {{ $slot }}\n"
"</div>"
msgstr ""

# P
#: ./docs/9.x/blade.md:812
#: ./docs/10.x/blade.md:815
#: ./docs/11.x/blade.md:846
#: ./docs/master/blade.md:815
msgid "When passing attributes to components, you may also use a \"short attribute\" syntax. This is often convenient since attribute names frequently match the variable names they correspond to:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:814
#: ./docs/10.x/blade.md:817
#: ./docs/11.x/blade.md:848
#: ./docs/master/blade.md:817
msgid "{{-- Short attribute syntax... --}}\n"
"<x-profile :$userId :$name />\n\n"
"{{-- Is equivalent to... --}}\n"
"<x-profile :user-id=\"$userId\" :name=\"$name\" />"
msgstr ""

# P
#: ./docs/8.x/blade.md:816
#: ./docs/9.x/blade.md:1044
#: ./docs/10.x/blade.md:1038
#: ./docs/11.x/blade.md:1078
#: ./docs/master/blade.md:1038
#~ msgid "<a name=\"filtering-attributes\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:817
#: ./docs/9.x/blade.md:1045
msgid "Retrieving & Filtering Attributes"
msgstr ""

# P
#: ./docs/8.x/blade.md:819
#: ./docs/9.x/blade.md:1047
#: ./docs/10.x/blade.md:1041
#: ./docs/11.x/blade.md:1081
#: ./docs/master/blade.md:1041
msgid "You may filter attributes using the `filter` method. This method accepts a closure which should return `true` if you wish to retain the attribute in the attribute bag:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:821
#: ./docs/9.x/blade.md:1049
msgid "{{ $attributes->filter(fn ($value, $key) => $key == 'foo') }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:823
#: ./docs/9.x/blade.md:1053
#: ./docs/10.x/blade.md:1047
#: ./docs/11.x/blade.md:1087
#: ./docs/master/blade.md:1047
msgid "For convenience, you may use the `whereStartsWith` method to retrieve all attributes whose keys begin with a given string:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:825
#: ./docs/9.x/blade.md:1055
#: ./docs/10.x/blade.md:1049
#: ./docs/11.x/blade.md:1089
#: ./docs/master/blade.md:1049
msgid "{{ $attributes->whereStartsWith('wire:model') }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:827
#: ./docs/9.x/blade.md:1059
#: ./docs/10.x/blade.md:1053
#: ./docs/11.x/blade.md:1093
#: ./docs/master/blade.md:1053
msgid "Conversely, the `whereDoesntStartWith` method may be used to exclude all attributes whose keys begin with a given string:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:829
#: ./docs/9.x/blade.md:1061
#: ./docs/10.x/blade.md:1055
#: ./docs/11.x/blade.md:1095
#: ./docs/master/blade.md:1055
msgid "{{ $attributes->whereDoesntStartWith('wire:model') }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:831
#: ./docs/9.x/blade.md:1065
#: ./docs/10.x/blade.md:1059
#: ./docs/11.x/blade.md:1099
#: ./docs/master/blade.md:1059
msgid "Using the `first` method, you may render the first attribute in a given attribute bag:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:833
#: ./docs/9.x/blade.md:1067
#: ./docs/10.x/blade.md:1061
#: ./docs/11.x/blade.md:1101
#: ./docs/master/blade.md:1061
msgid "{{ $attributes->whereStartsWith('wire:model')->first() }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:835
#: ./docs/9.x/blade.md:1071
#: ./docs/10.x/blade.md:1065
#: ./docs/11.x/blade.md:1105
#: ./docs/master/blade.md:1065
msgid "If you would like to check if an attribute is present on the component, you may use the `has` method. This method accepts the attribute name as its only argument and returns a boolean indicating whether or not the attribute is present:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:837
#: ./docs/9.x/blade.md:1073
#: ./docs/10.x/blade.md:1067
#: ./docs/11.x/blade.md:1107
#: ./docs/master/blade.md:1067
msgid "@if ($attributes->has('class'))\n"
"    <div>Class attribute is present</div>\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:841
#: ./docs/9.x/blade.md:1079
#: ./docs/10.x/blade.md:1089
#: ./docs/11.x/blade.md:1129
#: ./docs/master/blade.md:1089
msgid "You may retrieve a specific attribute's value using the `get` method:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:843
#: ./docs/9.x/blade.md:1081
#: ./docs/10.x/blade.md:1091
#: ./docs/11.x/blade.md:1131
#: ./docs/master/blade.md:1091
msgid "{{ $attributes->get('class') }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:845
#: ./docs/9.x/blade.md:1085
#: ./docs/10.x/blade.md:1095
#: ./docs/11.x/blade.md:1135
#: ./docs/master/blade.md:1095
#~ msgid "<a name=\"reserved-keywords\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:846
#: ./docs/9.x/blade.md:1086
#: ./docs/10.x/blade.md:1096
#: ./docs/11.x/blade.md:1136
#: ./docs/master/blade.md:1096
msgid "Reserved Keywords"
msgstr ""

# P
#: ./docs/8.x/blade.md:848
#: ./docs/9.x/blade.md:1088
#: ./docs/10.x/blade.md:1098
#: ./docs/11.x/blade.md:1138
#: ./docs/master/blade.md:1098
msgid "By default, some keywords are reserved for Blade's internal use in order to render components. The following keywords cannot be defined as public properties or method names within your components:"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:849
#: ./docs/11.x/blade.md:880
#: ./docs/master/blade.md:849
msgid "/**\n"
" * Determine if the given option is the currently selected option.\n"
" */\n"
"public function isSelected(string $option): bool\n"
"{\n"
"    return $option === $this->selected;\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:852
#: ./docs/9.x/blade.md:1092
#: ./docs/10.x/blade.md:1102
#: ./docs/11.x/blade.md:1142
#: ./docs/master/blade.md:1102
msgid "`data`"
msgstr ""

# P
#: ./docs/8.x/blade.md:853
#: ./docs/9.x/blade.md:1093
#: ./docs/10.x/blade.md:1103
#: ./docs/11.x/blade.md:1143
#: ./docs/master/blade.md:1103
msgid "`render`"
msgstr ""

# P
#: ./docs/8.x/blade.md:854
#: ./docs/9.x/blade.md:1094
#: ./docs/10.x/blade.md:1104
#: ./docs/11.x/blade.md:1144
#: ./docs/master/blade.md:1104
msgid "`resolveView`"
msgstr ""

# P
#: ./docs/8.x/blade.md:855
#: ./docs/9.x/blade.md:1095
#: ./docs/10.x/blade.md:1105
#: ./docs/11.x/blade.md:1145
#: ./docs/master/blade.md:1105
msgid "`shouldRender`"
msgstr ""

# P
#: ./docs/8.x/blade.md:856
#: ./docs/9.x/blade.md:1096
#: ./docs/10.x/blade.md:1106
#: ./docs/11.x/blade.md:1146
#: ./docs/master/blade.md:1106
msgid "`view`"
msgstr ""

# P
#: ./docs/8.x/blade.md:857
#: ./docs/9.x/blade.md:1097
#: ./docs/10.x/blade.md:1107
#: ./docs/11.x/blade.md:1147
#: ./docs/master/blade.md:1107
msgid "`withAttributes`"
msgstr ""

# P
#: ./docs/8.x/blade.md:858
#: ./docs/9.x/blade.md:1098
#: ./docs/10.x/blade.md:1108
#: ./docs/11.x/blade.md:1148
#: ./docs/master/blade.md:1108
msgid "`withName`"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:859
#: ./docs/10.x/blade.md:859
#: ./docs/11.x/blade.md:890
#: ./docs/master/blade.md:859
msgid "<option {{ $isSelected($value) ? 'selected' : '' }} value=\"{{ $value }}\">\n"
"    {{ $label }}\n"
"</option>"
msgstr ""

# P
#: ./docs/8.x/blade.md:862
#: ./docs/9.x/blade.md:1102
#: ./docs/10.x/blade.md:1112
#: ./docs/11.x/blade.md:1152
#: ./docs/master/blade.md:1112
#~ msgid "<a name=\"slots\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:863
#: ./docs/9.x/blade.md:1103
#: ./docs/10.x/blade.md:1113
#: ./docs/11.x/blade.md:1153
#: ./docs/master/blade.md:1113
msgid "Slots"
msgstr ""

# P
#: ./docs/8.x/blade.md:865
#: ./docs/9.x/blade.md:1105
#: ./docs/10.x/blade.md:1115
#: ./docs/11.x/blade.md:1155
#: ./docs/master/blade.md:1115
msgid "You will often need to pass additional content to your component via \"slots\". Component slots are rendered by echoing the `$slot` variable. To explore this concept, let's imagine that an `alert` component has the following markup:"
msgstr ""

# H4
#: ./docs/10.x/blade.md:866
#: ./docs/11.x/blade.md:897
#: ./docs/master/blade.md:866
msgid "Accessing Attributes and Slots Within Component Classes"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:867
#: ./docs/9.x/blade.md:1107
#: ./docs/10.x/blade.md:1117
#: ./docs/11.x/blade.md:1157
#: ./docs/master/blade.md:1117
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:870
#: ./docs/master/blade.md:870
msgid "use Closure;\n\n"
"/**\n"
" * Get the view / contents that represent the component.\n"
" */\n"
"public function render(): Closure\n"
"{\n"
"    return function (array $data) {\n"
"        // $data['componentName'];\n"
"        // $data['attributes'];\n"
"        // $data['slot'];\n\n"
"        return '<div>Components content</div>';\n"
"    };\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:875
#: ./docs/9.x/blade.md:1115
#: ./docs/10.x/blade.md:1125
#: ./docs/11.x/blade.md:1165
#: ./docs/master/blade.md:1125
msgid "We may pass content to the `slot` by injecting content into the component:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:877
#: ./docs/9.x/blade.md:1117
#: ./docs/10.x/blade.md:1127
#: ./docs/11.x/blade.md:1167
#: ./docs/master/blade.md:1127
msgid "<x-alert>\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>"
msgstr ""

# P
#: ./docs/8.x/blade.md:883
#: ./docs/9.x/blade.md:1123
#: ./docs/10.x/blade.md:1133
#: ./docs/11.x/blade.md:1173
#: ./docs/master/blade.md:1133
msgid "Sometimes a component may need to render multiple different slots in different locations within the component. Let's modify our alert component to allow for the injection of a \"title\" slot:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:885
#: ./docs/9.x/blade.md:1125
#: ./docs/10.x/blade.md:1135
#: ./docs/11.x/blade.md:1175
#: ./docs/master/blade.md:1135
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<span class=\"alert-title\">{{ $title }}</span>\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>"
msgstr ""

# CODE: php
#: ./docs/10.x/blade.md:895
#: ./docs/11.x/blade.md:935
#: ./docs/master/blade.md:895
msgid "use App\\Services\\AlertCreator;\n\n"
"/**\n"
" * Create the component instance.\n"
" */\n"
"public function __construct(\n"
"    public AlertCreator $creator,\n"
"    public string $type,\n"
"    public string $message,\n"
") {}"
msgstr ""

# P
#: ./docs/8.x/blade.md:895
#: ./docs/9.x/blade.md:1135
#: ./docs/10.x/blade.md:1145
#: ./docs/11.x/blade.md:1185
#: ./docs/master/blade.md:1145
msgid "You may define the content of the named slot using the `x-slot` tag. Any content not within an explicit `x-slot` tag will be passed to the component in the `$slot` variable:"
msgstr ""

# CODE: php
#: ./docs/9.x/blade.md:895
msgid "use App\\Services\\AlertCreator;\n\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:897
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>"
msgstr ""

# P
#: ./docs/11.x/blade.md:899
msgid "Blade components also allow you to access the component name, attributes, and slot inside the class's render method. However, in order to access this data, you should return a closure from your component's `render` method:"
msgstr ""

# CODE
#: ./docs/11.x/blade.md:901
msgid "use Closure;\n\n"
"/**\n"
" * Get the view / contents that represent the component.\n"
" */\n"
"public function render(): Closure\n"
"{\n"
"    return function () {\n"
"        return '<div {{ $attributes }}>Components content</div>';\n"
"    };\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:907
#: ./docs/9.x/blade.md:1147
#: ./docs/10.x/blade.md:1179
#: ./docs/11.x/blade.md:1219
#: ./docs/master/blade.md:1179
#~ msgid "<a name=\"scoped-slots\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:908
#: ./docs/9.x/blade.md:1148
#: ./docs/10.x/blade.md:1180
#: ./docs/11.x/blade.md:1220
#: ./docs/master/blade.md:1180
msgid "Scoped Slots"
msgstr ""

# P
#: ./docs/8.x/blade.md:910
#: ./docs/9.x/blade.md:1150
#: ./docs/10.x/blade.md:1182
#: ./docs/11.x/blade.md:1222
#: ./docs/master/blade.md:1182
msgid "If you have used a JavaScript framework such as Vue, you may be familiar with \"scoped slots\", which allow you to access data or methods from the component within your slot. You may achieve similar behavior in Laravel by defining public methods or properties on your component and accessing the component within your slot via the `$component` variable. In this example, we will assume that the `x-alert` component has a public `formatAlert` method defined on its component class:"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:912
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:913
#: ./docs/11.x/blade.md:953
#: ./docs/master/blade.md:913
msgid "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The properties / methods that should not be exposed to the component template.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = ['type'];\n\n"
"    /**\n"
"     * Create the component instance.\n"
"     */\n"
"    public function __construct(\n"
"        public string $type,\n"
"    ) {}\n"
"}"
msgstr ""

# P
#: ./docs/11.x/blade.md:913
msgid "The closure returned by your component's `render` method may also receive a `$data` array as its only argument. This array will contain several elements that provide information about the component:"
msgstr ""

# CODE
#: ./docs/11.x/blade.md:915
msgid "return function (array $data) {\n"
"    // $data['componentName'];\n"
"    // $data['attributes'];\n"
"    // $data['slot'];\n\n"
"    return '<div {{ $attributes }}>Components content</div>';\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:922
#: ./docs/9.x/blade.md:1162
#: ./docs/10.x/blade.md:1194
#: ./docs/11.x/blade.md:1234
#: ./docs/master/blade.md:1194
#~ msgid "<a name=\"slot-attributes\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:923
#: ./docs/9.x/blade.md:1163
#: ./docs/10.x/blade.md:1195
#: ./docs/11.x/blade.md:1235
#: ./docs/master/blade.md:1195
msgid "Slot Attributes"
msgstr ""

# P
#: ./docs/11.x/blade.md:924
msgid "The elements in the `$data` array should never be directly embedded into the Blade string returned by your `render` method, as doing so could allow remote code execution via malicious attribute content."
msgstr ""

# P
#: ./docs/8.x/blade.md:925
#: ./docs/9.x/blade.md:1165
#: ./docs/10.x/blade.md:1197
#: ./docs/11.x/blade.md:1237
#: ./docs/master/blade.md:1197
msgid "Like Blade components, you may assign additional [attributes](#component-attributes) to slots such as CSS class names:"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:927
msgid "<x-card class=\"shadow-sm\">\n"
"    <x-slot name=\"heading\" class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n\n"
"    Content\n\n"
"    <x-slot name=\"footer\" class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>"
msgstr ""

# P
#: ./docs/8.x/blade.md:941
#: ./docs/9.x/blade.md:1181
#: ./docs/10.x/blade.md:1213
#: ./docs/11.x/blade.md:1253
#: ./docs/master/blade.md:1213
msgid "To interact with slot attributes, you may access the `attributes` property of the slot's variable. For more information on how to interact with attributes, please consult the documentation on [component attributes](#component-attributes):"
msgstr ""

# CODE: php
# CODE: blade
#: ./docs/8.x/blade.md:943
#: ./docs/9.x/blade.md:1183
#: ./docs/10.x/blade.md:1215
#: ./docs/11.x/blade.md:1255
#: ./docs/master/blade.md:1215
msgid "@props([\n"
"    'heading',\n"
"    'footer',\n"
"])\n\n"
"<div {{ $attributes->class(['border']) }}>\n"
"    <h1 {{ $heading->attributes->class(['text-lg']) }}>\n"
"        {{ $heading }}\n"
"    </h1>\n\n"
"    {{ $slot }}\n\n"
"    <footer {{ $footer->attributes->class(['text-gray-700']) }}>\n"
"        {{ $footer }}\n"
"    </footer>\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:962
#: ./docs/9.x/blade.md:1202
#: ./docs/10.x/blade.md:1234
#: ./docs/11.x/blade.md:1274
#: ./docs/master/blade.md:1234
#~ msgid "<a name=\"inline-component-views\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:963
#: ./docs/9.x/blade.md:1203
#: ./docs/10.x/blade.md:1235
#: ./docs/11.x/blade.md:1275
#: ./docs/master/blade.md:1235
msgid "Inline Component Views"
msgstr ""

# P
#: ./docs/8.x/blade.md:965
#: ./docs/9.x/blade.md:1205
#: ./docs/10.x/blade.md:1237
#: ./docs/11.x/blade.md:1277
#: ./docs/master/blade.md:1237
msgid "For very small components, it may feel cumbersome to manage both the component class and the component's view template. For this reason, you may return the component's markup directly from the `render` method:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:967
#: ./docs/9.x/blade.md:1207
msgid "/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return <<<'blade'\n"
"        <div class=\"alert alert-danger\">\n"
"            {{ $slot }}\n"
"        </div>\n"
"    blade;\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:981
#: ./docs/9.x/blade.md:1221
#: ./docs/10.x/blade.md:1251
#: ./docs/11.x/blade.md:1291
#: ./docs/master/blade.md:1251
#~ msgid "<a name=\"generating-inline-view-components\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:982
#: ./docs/9.x/blade.md:1222
#: ./docs/10.x/blade.md:1252
#: ./docs/11.x/blade.md:1292
#: ./docs/master/blade.md:1252
msgid "Generating Inline View Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:984
#: ./docs/9.x/blade.md:1224
#: ./docs/10.x/blade.md:1254
#: ./docs/11.x/blade.md:1294
#: ./docs/master/blade.md:1254
msgid "To create a component that renders an inline view, you may use the `inline` option when executing the `make:component` command:"
msgstr ""

# CODE
# CODE: shell
#: ./docs/8.x/blade.md:986
#: ./docs/9.x/blade.md:1226
#: ./docs/10.x/blade.md:1256
#: ./docs/11.x/blade.md:1296
#: ./docs/master/blade.md:1256
msgid "php artisan make:component Alert --inline"
msgstr ""

# P
#: ./docs/8.x/blade.md:988
#: ./docs/9.x/blade.md:1293
#: ./docs/10.x/blade.md:1321
#: ./docs/11.x/blade.md:1361
#: ./docs/master/blade.md:1321
#~ msgid "<a name=\"anonymous-components\"></a>"
#~ msgstr ""

# H3
# H2
#: ./docs/8.x/blade.md:989
#: ./docs/9.x/blade.md:1294
#: ./docs/10.x/blade.md:1322
#: ./docs/11.x/blade.md:1362
#: ./docs/master/blade.md:1322
msgid "Anonymous Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:991
#: ./docs/9.x/blade.md:1296
#: ./docs/10.x/blade.md:1324
#: ./docs/11.x/blade.md:1364
#: ./docs/master/blade.md:1324
msgid "Similar to inline components, anonymous components provide a mechanism for managing a component via a single file. However, anonymous components utilize a single view file and have no associated class. To define an anonymous component, you only need to place a Blade template within your `resources/views/components` directory. For example, assuming you have defined a component at `resources/views/components/alert.blade.php`, you may simply render it like so:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:993
#: ./docs/9.x/blade.md:1298
#: ./docs/10.x/blade.md:1326
#: ./docs/11.x/blade.md:1366
#: ./docs/master/blade.md:1326
msgid "<x-alert/>"
msgstr ""

# P
#: ./docs/8.x/blade.md:995
#: ./docs/9.x/blade.md:1302
#: ./docs/10.x/blade.md:1330
#: ./docs/11.x/blade.md:1370
#: ./docs/master/blade.md:1330
msgid "You may use the `.` character to indicate if a component is nested deeper inside the `components` directory. For example, assuming the component is defined at `resources/views/components/inputs/button.blade.php`, you may render it like so:"
msgstr ""

# P
#: ./docs/8.x/blade.md:999
#: ./docs/9.x/blade.md:1308
#: ./docs/10.x/blade.md:1336
#: ./docs/11.x/blade.md:1376
#: ./docs/master/blade.md:1336
#~ msgid "<a name=\"anonymous-index-components\"></a>"
#~ msgstr ""

# H4
# H3
#: ./docs/8.x/blade.md:1000
#: ./docs/9.x/blade.md:1309
#: ./docs/10.x/blade.md:1337
#: ./docs/11.x/blade.md:1377
#: ./docs/master/blade.md:1337
msgid "Anonymous Index Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:1002
#: ./docs/9.x/blade.md:1311
#: ./docs/10.x/blade.md:1339
#: ./docs/11.x/blade.md:1379
#: ./docs/master/blade.md:1339
msgid "Sometimes, when a component is made up of many Blade templates, you may wish to group the given component's templates within a single directory. For example, imagine an \"accordion\" component with the following directory structure:"
msgstr ""

# CODE: none
#: ./docs/8.x/blade.md:1004
#: ./docs/9.x/blade.md:1313
#: ./docs/10.x/blade.md:1341
#: ./docs/11.x/blade.md:1381
#: ./docs/master/blade.md:1341
msgid "/resources/views/components/accordion.blade.php\n"
"/resources/views/components/accordion/item.blade.php"
msgstr ""

# P
#: ./docs/8.x/blade.md:1009
#: ./docs/9.x/blade.md:1318
#: ./docs/10.x/blade.md:1346
#: ./docs/11.x/blade.md:1386
#: ./docs/master/blade.md:1346
msgid "This directory structure allows you to render the accordion component and its item like so:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1011
#: ./docs/9.x/blade.md:1320
#: ./docs/10.x/blade.md:1348
#: ./docs/11.x/blade.md:1388
#: ./docs/master/blade.md:1348
msgid "<x-accordion>\n"
"    <x-accordion.item>\n"
"        ...\n"
"    </x-accordion.item>\n"
"</x-accordion>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1019
#: ./docs/9.x/blade.md:1328
#: ./docs/10.x/blade.md:1356
#: ./docs/11.x/blade.md:1396
#: ./docs/master/blade.md:1356
msgid "However, in order to render the accordion component via `x-accordion`, we were forced to place the \"index\" accordion component template in the `resources/views/components` directory instead of nesting it within the `accordion` directory with the other accordion related templates."
msgstr ""

# P
#: ./docs/8.x/blade.md:1021
#: ./docs/9.x/blade.md:1330
#: ./docs/10.x/blade.md:1358
#: ./docs/master/blade.md:1358
msgid "Thankfully, Blade allows you to place an `index.blade.php` file within a component's template directory. When an `index.blade.php` template exists for the component, it will be rendered as the \"root\" node of the component. So, we can continue to use the same Blade syntax given in the example above; however, we will adjust our directory structure like so:"
msgstr ""

# CODE: none
#: ./docs/8.x/blade.md:1023
#: ./docs/9.x/blade.md:1332
#: ./docs/10.x/blade.md:1360
#: ./docs/master/blade.md:1360
msgid "/resources/views/components/accordion/index.blade.php\n"
"/resources/views/components/accordion/item.blade.php"
msgstr ""

# P
#: ./docs/8.x/blade.md:1028
#: ./docs/9.x/blade.md:1337
#: ./docs/10.x/blade.md:1365
#: ./docs/11.x/blade.md:1405
#: ./docs/master/blade.md:1365
#~ msgid "<a name=\"data-properties-attributes\"></a>"
#~ msgstr ""

# H4
# H3
#: ./docs/8.x/blade.md:1029
#: ./docs/9.x/blade.md:1338
#: ./docs/10.x/blade.md:1366
#: ./docs/11.x/blade.md:1406
#: ./docs/master/blade.md:1366
msgid "Data Properties / Attributes"
msgstr ""

# P
#: ./docs/8.x/blade.md:1031
#: ./docs/9.x/blade.md:1340
#: ./docs/10.x/blade.md:1368
#: ./docs/11.x/blade.md:1408
#: ./docs/master/blade.md:1368
msgid "Since anonymous components do not have any associated class, you may wonder how you may differentiate which data should be passed to the component as variables and which attributes should be placed in the component's [attribute bag](#component-attributes)."
msgstr ""

# P
#: ./docs/8.x/blade.md:1033
#: ./docs/9.x/blade.md:1342
#: ./docs/10.x/blade.md:1370
#: ./docs/11.x/blade.md:1410
#: ./docs/master/blade.md:1370
msgid "You may specify which attributes should be considered data variables using the `@props` directive at the top of your component's Blade template. All other attributes on the component will be available via the component's attribute bag. If you wish to give a data variable a default value, you may specify the variable's name as the array key and the default value as the array value:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:1035
#: ./docs/9.x/blade.md:1344
#: ./docs/10.x/blade.md:1372
#: ./docs/11.x/blade.md:1412
#: ./docs/master/blade.md:1372
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"@props(['type' => 'info', 'message'])\n\n"
"<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>"
msgstr ""

# H4
#: ./docs/10.x/blade.md:1039
#: ./docs/11.x/blade.md:1079
#: ./docs/master/blade.md:1039
msgid "Retrieving and Filtering Attributes"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:1043
#: ./docs/11.x/blade.md:1083
#: ./docs/master/blade.md:1043
msgid "{{ $attributes->filter(fn (string $value, string $key) => $key == 'foo') }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:1043
#: ./docs/9.x/blade.md:1354
#: ./docs/10.x/blade.md:1382
#: ./docs/11.x/blade.md:1422
#: ./docs/master/blade.md:1382
msgid "Given the component definition above, we may render the component like so:"
msgstr ""

# P
#: ./docs/8.x/blade.md:1047
#: ./docs/9.x/blade.md:1360
#: ./docs/10.x/blade.md:1388
#: ./docs/11.x/blade.md:1428
#: ./docs/master/blade.md:1388
#~ msgid "<a name=\"accessing-parent-data\"></a>"
#~ msgstr ""

# H4
# H3
#: ./docs/8.x/blade.md:1048
#: ./docs/9.x/blade.md:1361
#: ./docs/10.x/blade.md:1389
#: ./docs/11.x/blade.md:1429
#: ./docs/master/blade.md:1389
msgid "Accessing Parent Data"
msgstr ""

# P
#: ./docs/8.x/blade.md:1050
#: ./docs/9.x/blade.md:1363
#: ./docs/10.x/blade.md:1391
#: ./docs/11.x/blade.md:1431
#: ./docs/master/blade.md:1391
msgid "Sometimes you may want to access data from a parent component inside a child component. In these cases, you may use the `@aware` directive. For example, imagine we are building a complex menu component consisting of a parent `<x-menu>` and child `<x-menu.item>`:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:1052
#: ./docs/9.x/blade.md:1365
#: ./docs/10.x/blade.md:1393
#: ./docs/11.x/blade.md:1433
#: ./docs/master/blade.md:1393
msgid "<x-menu color=\"purple\">\n"
"    <x-menu.item>...</x-menu.item>\n"
"    <x-menu.item>...</x-menu.item>\n"
"</x-menu>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1057
#: ./docs/9.x/blade.md:1372
#: ./docs/10.x/blade.md:1400
#: ./docs/11.x/blade.md:1440
#: ./docs/master/blade.md:1400
msgid "The `<x-menu>` component may have an implementation like the following:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:1059
#: ./docs/9.x/blade.md:1374
#: ./docs/10.x/blade.md:1402
#: ./docs/11.x/blade.md:1442
#: ./docs/master/blade.md:1402
msgid "<!-- /resources/views/components/menu/index.blade.php -->\n\n"
"@props(['color' => 'gray'])\n\n"
"<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>\n"
"    {{ $slot }}\n"
"</ul>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1067
#: ./docs/9.x/blade.md:1384
#: ./docs/10.x/blade.md:1412
#: ./docs/11.x/blade.md:1452
#: ./docs/master/blade.md:1412
msgid "Because the `color` prop was only passed into the parent (`<x-menu>`), it won't be available inside `<x-menu.item>`. However, if we use the `@aware` directive, we can make it available inside `<x-menu.item>` as well:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:1069
#: ./docs/9.x/blade.md:1386
#: ./docs/10.x/blade.md:1414
#: ./docs/11.x/blade.md:1454
#: ./docs/master/blade.md:1414
msgid "<!-- /resources/views/components/menu/item.blade.php -->\n\n"
"@aware(['color' => 'gray'])\n\n"
"<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>\n"
"    {{ $slot }}\n"
"</li>"
msgstr ""

# P
#: ./docs/10.x/blade.md:1073
#: ./docs/11.x/blade.md:1113
#: ./docs/master/blade.md:1073
msgid "If an array is passed to the `has` method, the method will determine if all of the given attributes are present on the component:"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:1075
#: ./docs/11.x/blade.md:1115
#: ./docs/master/blade.md:1075
msgid "@if ($attributes->has(['name', 'class']))\n"
"    <div>All of the attributes are present</div>\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:1077
#: ./docs/9.x/blade.md:1230
#: ./docs/10.x/blade.md:1260
#: ./docs/11.x/blade.md:1300
#: ./docs/master/blade.md:1260
#~ msgid "<a name=\"dynamic-components\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1078
#: ./docs/9.x/blade.md:1231
#: ./docs/10.x/blade.md:1261
#: ./docs/11.x/blade.md:1301
#: ./docs/master/blade.md:1261
msgid "Dynamic Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:1080
#: ./docs/9.x/blade.md:1233
#: ./docs/10.x/blade.md:1263
#: ./docs/11.x/blade.md:1303
#: ./docs/master/blade.md:1263
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr ""

# P
#: ./docs/10.x/blade.md:1081
#: ./docs/11.x/blade.md:1121
#: ./docs/master/blade.md:1081
msgid "The `hasAny` method may be used to determine if any of the given attributes are present on the component:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:1082
#: ./docs/9.x/blade.md:1235
msgid "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:1083
#: ./docs/11.x/blade.md:1123
#: ./docs/master/blade.md:1083
msgid "@if ($attributes->hasAny(['href', ':href', 'v-bind:href']))\n"
"    <div>One of the attributes is present</div>\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:1084
#: ./docs/9.x/blade.md:1239
#: ./docs/10.x/blade.md:1271
#: ./docs/11.x/blade.md:1311
#: ./docs/master/blade.md:1271
#~ msgid "<a name=\"manually-registering-components\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1085
#: ./docs/9.x/blade.md:1240
#: ./docs/10.x/blade.md:1272
#: ./docs/11.x/blade.md:1312
#: ./docs/master/blade.md:1272
msgid "Manually Registering Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:1087
#: ./docs/9.x/blade.md:1243
#: ./docs/10.x/blade.md:1275
#: ./docs/11.x/blade.md:1315
#: ./docs/master/blade.md:1275
msgid "The following documentation on manually registering components is primarily applicable to those who are writing Laravel packages that include view components. If you are not writing a package, this portion of the component documentation may not be relevant to you."
msgstr ""

# P
#: ./docs/8.x/blade.md:1091
#: ./docs/9.x/blade.md:1247
#: ./docs/10.x/blade.md:1279
#: ./docs/11.x/blade.md:1319
#: ./docs/master/blade.md:1279
msgid "However, if you are building a package that utilizes Blade components or placing components in non-conventional directories, you will need to manually register your component class and its HTML tag alias so that Laravel knows where to find the component. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:1093
#: ./docs/9.x/blade.md:1249
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use VendorPackage\\View\\Components\\AlertComponent;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', AlertComponent::class);\n"
"}"
msgstr ""

# H4
#: ./docs/8.x/blade.md:1110
#: ./docs/9.x/blade.md:1268
#: ./docs/10.x/blade.md:1298
#: ./docs/11.x/blade.md:1338
#: ./docs/master/blade.md:1298
msgid "Autoloading Package Components"
msgstr ""

# P
#: ./docs/8.x/blade.md:1133
#: ./docs/9.x/blade.md:1432
#: ./docs/10.x/blade.md:1458
#: ./docs/11.x/blade.md:1498
#: ./docs/master/blade.md:1458
#~ msgid "<a name=\"building-layouts\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/blade.md:1134
#: ./docs/9.x/blade.md:1433
#: ./docs/10.x/blade.md:1459
#: ./docs/11.x/blade.md:1499
#: ./docs/master/blade.md:1459
msgid "Building Layouts"
msgstr ""

# P
#: ./docs/8.x/blade.md:1136
#: ./docs/9.x/blade.md:1435
#: ./docs/10.x/blade.md:1461
#: ./docs/11.x/blade.md:1501
#: ./docs/master/blade.md:1461
#~ msgid "<a name=\"layouts-using-components\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1137
#: ./docs/9.x/blade.md:1436
#: ./docs/10.x/blade.md:1462
#: ./docs/11.x/blade.md:1502
#: ./docs/master/blade.md:1462
msgid "Layouts Using Components"
msgstr ""

# CODE: xml
#: ./docs/9.x/blade.md:1137
#: ./docs/10.x/blade.md:1147
#: ./docs/11.x/blade.md:1187
#: ./docs/master/blade.md:1147
msgid "<x-alert>\n"
"    <x-slot:title>\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1139
#: ./docs/9.x/blade.md:1438
#: ./docs/10.x/blade.md:1464
#: ./docs/11.x/blade.md:1504
#: ./docs/master/blade.md:1464
msgid "Most web applications maintain the same general layout across various pages. It would be incredibly cumbersome and hard to maintain our application if we had to repeat the entire layout HTML in every view we create. Thankfully, it's convenient to define this layout as a single [Blade component](#components) and then use it throughout our application."
msgstr ""

# P
#: ./docs/8.x/blade.md:1141
#: ./docs/9.x/blade.md:1440
#: ./docs/10.x/blade.md:1466
#: ./docs/11.x/blade.md:1506
#: ./docs/master/blade.md:1466
#~ msgid "<a name=\"defining-the-layout-component\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:1142
#: ./docs/9.x/blade.md:1441
msgid "Defining The Layout Component"
msgstr ""

# P
#: ./docs/8.x/blade.md:1144
#: ./docs/9.x/blade.md:1443
#: ./docs/10.x/blade.md:1469
#: ./docs/11.x/blade.md:1509
#: ./docs/master/blade.md:1469
msgid "For example, imagine we are building a \"todo\" list application. We might define a `layout` component that looks like the following:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1146
#: ./docs/9.x/blade.md:1445
#: ./docs/10.x/blade.md:1471
#: ./docs/11.x/blade.md:1511
#: ./docs/master/blade.md:1471
msgid "<!-- resources/views/components/layout.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>{{ $title ?? 'Todo Manager' }}</title>\n"
"    </head>\n"
"    <body>\n"
"        <h1>Todos</h1>\n"
"        <hr/>\n"
"        {{ $slot }}\n"
"    </body>\n"
"</html>"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1152
#: ./docs/10.x/blade.md:1184
#: ./docs/11.x/blade.md:1224
#: ./docs/master/blade.md:1184
msgid "<x-alert>\n"
"    <x-slot:title>\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>"
msgstr ""

# P
#: ./docs/10.x/blade.md:1157
#: ./docs/11.x/blade.md:1197
#: ./docs/master/blade.md:1157
msgid "You may invoke a slot's `isEmpty` method to determine if the slot contains content:"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:1159
#: ./docs/11.x/blade.md:1199
#: ./docs/master/blade.md:1159
msgid "<span class=\"alert-title\">{{ $title }}</span>\n\n"
"<div class=\"alert alert-danger\">\n"
"    @if ($slot->isEmpty())\n"
"        This is default content if the slot is empty.\n"
"    @else\n"
"        {{ $slot }}\n"
"    @endif\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1161
#: ./docs/9.x/blade.md:1460
#: ./docs/10.x/blade.md:1486
#: ./docs/11.x/blade.md:1526
#: ./docs/master/blade.md:1486
#~ msgid "<a name=\"applying-the-layout-component\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:1162
#: ./docs/9.x/blade.md:1461
msgid "Applying The Layout Component"
msgstr ""

# P
#: ./docs/8.x/blade.md:1164
#: ./docs/9.x/blade.md:1463
#: ./docs/10.x/blade.md:1489
#: ./docs/11.x/blade.md:1529
#: ./docs/master/blade.md:1489
msgid "Once the `layout` component has been defined, we may create a Blade view that utilizes the component. In this example, we will define a simple view that displays our task list:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1166
#: ./docs/9.x/blade.md:1465
#: ./docs/10.x/blade.md:1491
#: ./docs/master/blade.md:1491
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>"
msgstr ""

# CODE: xml
#: ./docs/9.x/blade.md:1167
#: ./docs/10.x/blade.md:1199
#: ./docs/11.x/blade.md:1239
#: ./docs/master/blade.md:1199
msgid "<x-card class=\"shadow-sm\">\n"
"    <x-slot:heading class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n\n"
"    Content\n\n"
"    <x-slot:footer class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>"
msgstr ""

# P
#: ./docs/10.x/blade.md:1171
#: ./docs/11.x/blade.md:1211
#: ./docs/master/blade.md:1171
msgid "Additionally, the `hasActualContent` method may be used to determine if the slot contains any \"actual\" content that is not an HTML comment:"
msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:1173
#: ./docs/11.x/blade.md:1213
#: ./docs/master/blade.md:1173
msgid "@if ($slot->hasActualContent())\n"
"    The scope has non-comment content.\n"
"@endif"
msgstr ""

# P
#: ./docs/8.x/blade.md:1176
#: ./docs/9.x/blade.md:1475
#: ./docs/10.x/blade.md:1501
#: ./docs/11.x/blade.md:1541
#: ./docs/master/blade.md:1501
msgid "Remember, content that is injected into a component will be supplied to the default `$slot` variable within our `layout` component. As you may have noticed, our `layout` also respects a `$title` slot if one is provided; otherwise, a default title is shown. We may inject a custom title from our task list view using the standard slot syntax discussed in the [component documentation](#components):"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:1178
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot name=\"title\">\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1192
#: ./docs/9.x/blade.md:1491
#: ./docs/10.x/blade.md:1517
#: ./docs/11.x/blade.md:1557
#: ./docs/master/blade.md:1517
msgid "Now that we have defined our layout and task list views, we just need to return the `task` view from a route:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:1194
#: ./docs/9.x/blade.md:1493
#: ./docs/10.x/blade.md:1519
#: ./docs/11.x/blade.md:1559
#: ./docs/master/blade.md:1519
msgid "use App\\Models\\Task;\n\n"
"Route::get('/tasks', function () {\n"
"    return view('tasks', ['tasks' => Task::all()]);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/blade.md:1200
#: ./docs/9.x/blade.md:1499
#: ./docs/10.x/blade.md:1525
#: ./docs/11.x/blade.md:1565
#: ./docs/master/blade.md:1525
#~ msgid "<a name=\"layouts-using-template-inheritance\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1201
#: ./docs/9.x/blade.md:1500
#: ./docs/10.x/blade.md:1526
#: ./docs/11.x/blade.md:1566
#: ./docs/master/blade.md:1526
msgid "Layouts Using Template Inheritance"
msgstr ""

# P
#: ./docs/8.x/blade.md:1203
#: ./docs/9.x/blade.md:1502
#: ./docs/10.x/blade.md:1528
#: ./docs/11.x/blade.md:1568
#: ./docs/master/blade.md:1528
#~ msgid "<a name=\"defining-a-layout\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:1204
#: ./docs/9.x/blade.md:1503
msgid "Defining A Layout"
msgstr ""

# P
#: ./docs/8.x/blade.md:1206
#: ./docs/9.x/blade.md:1505
#: ./docs/10.x/blade.md:1531
#: ./docs/11.x/blade.md:1571
#: ./docs/master/blade.md:1531
msgid "Layouts may also be created via \"template inheritance\". This was the primary way of building applications prior to the introduction of [components](#components)."
msgstr ""

# P
#: ./docs/8.x/blade.md:1208
#: ./docs/9.x/blade.md:1507
#: ./docs/10.x/blade.md:1533
#: ./docs/11.x/blade.md:1573
#: ./docs/master/blade.md:1533
msgid "To get started, let's take a look at a simple example. First, we will examine a page layout. Since most web applications maintain the same general layout across various pages, it's convenient to define this layout as a single Blade view:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1210
#: ./docs/9.x/blade.md:1509
#: ./docs/10.x/blade.md:1535
#: ./docs/11.x/blade.md:1575
#: ./docs/master/blade.md:1535
msgid "<!-- resources/views/layouts/app.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>App Name - @yield('title')</title>\n"
"    </head>\n"
"    <body>\n"
"        @section('sidebar')\n"
"            This is the master sidebar.\n"
"        @show\n\n"
"        <div class=\"container\">\n"
"            @yield('content')\n"
"        </div>\n"
"    </body>\n"
"</html>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1229
#: ./docs/9.x/blade.md:1528
#: ./docs/10.x/blade.md:1554
#: ./docs/11.x/blade.md:1594
#: ./docs/master/blade.md:1554
msgid "As you can see, this file contains typical HTML mark-up. However, take note of the `@section` and `@yield` directives. The `@section` directive, as the name implies, defines a section of content, while the `@yield` directive is used to display the contents of a given section."
msgstr ""

# P
#: ./docs/8.x/blade.md:1231
#: ./docs/9.x/blade.md:1530
#: ./docs/10.x/blade.md:1556
#: ./docs/11.x/blade.md:1596
#: ./docs/master/blade.md:1556
msgid "Now that we have defined a layout for our application, let's define a child page that inherits the layout."
msgstr ""

# P
#: ./docs/8.x/blade.md:1233
#: ./docs/9.x/blade.md:1532
#: ./docs/10.x/blade.md:1558
#: ./docs/11.x/blade.md:1598
#: ./docs/master/blade.md:1558
#~ msgid "<a name=\"extending-a-layout\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/blade.md:1234
#: ./docs/9.x/blade.md:1533
msgid "Extending A Layout"
msgstr ""

# P
#: ./docs/8.x/blade.md:1236
#: ./docs/9.x/blade.md:1535
#: ./docs/10.x/blade.md:1561
#: ./docs/11.x/blade.md:1601
#: ./docs/master/blade.md:1561
msgid "When defining a child view, use the `@extends` Blade directive to specify which layout the child view should \"inherit\". Views which extend a Blade layout may inject content into the layout's sections using `@section` directives. Remember, as seen in the example above, the contents of these sections will be displayed in the layout using `@yield`:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1238
#: ./docs/9.x/blade.md:1537
#: ./docs/10.x/blade.md:1563
#: ./docs/11.x/blade.md:1603
#: ./docs/master/blade.md:1563
msgid "<!-- resources/views/child.blade.php -->\n\n"
"@extends('layouts.app')\n\n"
"@section('title', 'Page Title')\n\n"
"@section('sidebar')\n"
"    @@parent\n\n"
"    <p>This is appended to the master sidebar.</p>\n"
"@endsection\n\n"
"@section('content')\n"
"    <p>This is my body content.</p>\n"
"@endsection"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:1239
#: ./docs/11.x/blade.md:1279
#: ./docs/master/blade.md:1239
msgid "/**\n"
" * Get the view / contents that represent the component.\n"
" */\n"
"public function render(): string\n"
"{\n"
"    return <<<'blade'\n"
"        <div class=\"alert alert-danger\">\n"
"            {{ $slot }}\n"
"        </div>\n"
"    blade;\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:1256
#: ./docs/9.x/blade.md:1555
#: ./docs/10.x/blade.md:1581
#: ./docs/11.x/blade.md:1621
#: ./docs/master/blade.md:1581
msgid "In this example, the `sidebar` section is utilizing the `@@parent` directive to append (rather than overwriting) content to the layout's sidebar. The `@@parent` directive will be replaced by the content of the layout when the view is rendered."
msgstr ""

# P
#: ./docs/8.x/blade.md:1258
#: ./docs/9.x/blade.md:1558
#: ./docs/10.x/blade.md:1584
#: ./docs/11.x/blade.md:1624
#: ./docs/master/blade.md:1584
msgid "Contrary to the previous example, this `sidebar` section ends with `@endsection` instead of `@show`. The `@endsection` directive will only define a section while `@show` will define and **immediately yield** the section."
msgstr ""

# P
#: ./docs/8.x/blade.md:1260
#: ./docs/9.x/blade.md:1560
#: ./docs/10.x/blade.md:1586
#: ./docs/11.x/blade.md:1626
#: ./docs/master/blade.md:1586
msgid "The `@yield` directive also accepts a default value as its second parameter. This value will be rendered if the section being yielded is undefined:"
msgstr ""

# CODE
# CODE: blade
#: ./docs/8.x/blade.md:1262
#: ./docs/9.x/blade.md:1562
#: ./docs/10.x/blade.md:1588
#: ./docs/11.x/blade.md:1628
#: ./docs/master/blade.md:1588
msgid "@yield('content', 'Default content')"
msgstr ""

# P
#: ./docs/8.x/blade.md:1264
#: ./docs/9.x/blade.md:1566
#: ./docs/10.x/blade.md:1592
#: ./docs/11.x/blade.md:1632
#: ./docs/master/blade.md:1592
#~ msgid "<a name=\"forms\"></a>"
#~ msgstr ""

# CODE: blade
#: ./docs/10.x/blade.md:1265
#: ./docs/11.x/blade.md:1305
#: ./docs/master/blade.md:1265
msgid "// $componentName = \"secondary-button\";\n\n"
"<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />"
msgstr ""

# H2
#: ./docs/8.x/blade.md:1265
#: ./docs/9.x/blade.md:1567
#: ./docs/10.x/blade.md:1593
#: ./docs/11.x/blade.md:1633
#: ./docs/master/blade.md:1593
msgid "Forms"
msgstr ""

# P
#: ./docs/8.x/blade.md:1267
#: ./docs/9.x/blade.md:1569
#: ./docs/10.x/blade.md:1595
#: ./docs/11.x/blade.md:1635
#: ./docs/master/blade.md:1595
#~ msgid "<a name=\"csrf-field\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1268
#: ./docs/9.x/blade.md:1570
#: ./docs/10.x/blade.md:1596
#: ./docs/11.x/blade.md:1636
#: ./docs/master/blade.md:1596
msgid "CSRF Field"
msgstr ""

# P
#: ./docs/8.x/blade.md:1270
#: ./docs/9.x/blade.md:1572
#: ./docs/10.x/blade.md:1598
#: ./docs/11.x/blade.md:1638
#: ./docs/master/blade.md:1598
msgid "Anytime you define an HTML form in your application, you should include a hidden CSRF token field in the form so that [the CSRF protection](/docs/{{version}}/csrf) middleware can validate the request. You may use the `@csrf` Blade directive to generate the token field:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1272
#: ./docs/9.x/blade.md:1574
#: ./docs/10.x/blade.md:1600
#: ./docs/11.x/blade.md:1640
#: ./docs/master/blade.md:1600
msgid "<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n\n"
"    ...\n"
"</form>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1280
#: ./docs/9.x/blade.md:1582
#: ./docs/10.x/blade.md:1608
#: ./docs/11.x/blade.md:1648
#: ./docs/master/blade.md:1608
#~ msgid "<a name=\"method-field\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/blade.md:1281
#: ./docs/11.x/blade.md:1321
#: ./docs/master/blade.md:1281
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use VendorPackage\\View\\Components\\AlertComponent;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Blade::component('package-alert', AlertComponent::class);\n"
"}"
msgstr ""

# H3
#: ./docs/8.x/blade.md:1281
#: ./docs/9.x/blade.md:1583
#: ./docs/10.x/blade.md:1609
#: ./docs/11.x/blade.md:1649
#: ./docs/master/blade.md:1609
msgid "Method Field"
msgstr ""

# P
#: ./docs/8.x/blade.md:1283
#: ./docs/9.x/blade.md:1585
#: ./docs/10.x/blade.md:1611
#: ./docs/11.x/blade.md:1651
#: ./docs/master/blade.md:1611
msgid "Since HTML forms can't make `PUT`, `PATCH`, or `DELETE` requests, you will need to add a hidden `_method` field to spoof these HTTP verbs. The `@method` Blade directive can create this field for you:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1285
#: ./docs/9.x/blade.md:1587
#: ./docs/10.x/blade.md:1613
#: ./docs/11.x/blade.md:1653
#: ./docs/master/blade.md:1613
msgid "<form action=\"/foo/bar\" method=\"POST\">\n"
"    @method('PUT')\n\n"
"    ...\n"
"</form>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1293
#: ./docs/9.x/blade.md:1595
#: ./docs/10.x/blade.md:1621
#: ./docs/11.x/blade.md:1661
#: ./docs/master/blade.md:1621
#~ msgid "<a name=\"validation-errors\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1294
#: ./docs/9.x/blade.md:1596
#: ./docs/10.x/blade.md:1622
#: ./docs/11.x/blade.md:1662
#: ./docs/master/blade.md:1622
msgid "Validation Errors"
msgstr ""

# P
#: ./docs/8.x/blade.md:1296
#: ./docs/9.x/blade.md:1598
#: ./docs/10.x/blade.md:1624
#: ./docs/11.x/blade.md:1664
#: ./docs/master/blade.md:1624
msgid "The `@error` directive may be used to quickly check if [validation error messages](/docs/{{version}}/validation#quick-displaying-the-validation-errors) exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:1298
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror"
msgstr ""

# P
#: ./docs/8.x/blade.md:1310
#: ./docs/9.x/blade.md:1614
#: ./docs/10.x/blade.md:1640
#: ./docs/11.x/blade.md:1682
#: ./docs/master/blade.md:1640
msgid "Since the `@error` directive compiles to an \"if\" statement, you may use the `@else` directive to render content when there is not an error for an attribute:"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:1312
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email') is-invalid @else is-valid @enderror\">"
msgstr ""

# P
#: ./docs/8.x/blade.md:1320
#: ./docs/9.x/blade.md:1626
#: ./docs/10.x/blade.md:1652
#: ./docs/11.x/blade.md:1696
#: ./docs/master/blade.md:1652
msgid "You may pass [the name of a specific error bag](/docs/{{version}}/validation#named-error-bags) as the second parameter to the `@error` directive to retrieve validation error messages on pages containing multiple forms:"
msgstr ""

# CODE: html
#: ./docs/8.x/blade.md:1322
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror"
msgstr ""

# P
#: ./docs/8.x/blade.md:1334
#: ./docs/9.x/blade.md:1642
#: ./docs/10.x/blade.md:1668
#: ./docs/11.x/blade.md:1714
#: ./docs/master/blade.md:1668
#~ msgid "<a name=\"stacks\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/blade.md:1335
#: ./docs/9.x/blade.md:1643
#: ./docs/10.x/blade.md:1669
#: ./docs/11.x/blade.md:1715
#: ./docs/master/blade.md:1669
msgid "Stacks"
msgstr ""

# P
#: ./docs/8.x/blade.md:1337
#: ./docs/9.x/blade.md:1645
#: ./docs/10.x/blade.md:1671
#: ./docs/11.x/blade.md:1717
#: ./docs/master/blade.md:1671
msgid "Blade allows you to push to named stacks which can be rendered somewhere else in another view or layout. This can be particularly useful for specifying any JavaScript libraries required by your child views:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1339
#: ./docs/9.x/blade.md:1647
#: ./docs/10.x/blade.md:1673
#: ./docs/11.x/blade.md:1719
#: ./docs/master/blade.md:1673
msgid "@push('scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endpush"
msgstr ""

# P
#: ./docs/8.x/blade.md:1345
#: ./docs/9.x/blade.md:1661
#: ./docs/10.x/blade.md:1687
#: ./docs/11.x/blade.md:1733
#: ./docs/master/blade.md:1687
msgid "You may push to a stack as many times as needed. To render the complete stack contents, pass the name of the stack to the `@stack` directive:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1347
#: ./docs/9.x/blade.md:1663
#: ./docs/10.x/blade.md:1689
#: ./docs/11.x/blade.md:1735
#: ./docs/master/blade.md:1689
msgid "<head>\n"
"    <!-- Head Contents -->\n\n"
"    @stack('scripts')\n"
"</head>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1355
#: ./docs/9.x/blade.md:1671
#: ./docs/10.x/blade.md:1697
#: ./docs/11.x/blade.md:1743
#: ./docs/master/blade.md:1697
msgid "If you would like to prepend content onto the beginning of a stack, you should use the `@prepend` directive:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1357
#: ./docs/9.x/blade.md:1673
#: ./docs/10.x/blade.md:1699
#: ./docs/11.x/blade.md:1745
#: ./docs/master/blade.md:1699
msgid "@push('scripts')\n"
"    This will be second...\n"
"@endpush\n\n"
"// Later...\n\n"
"@prepend('scripts')\n"
"    This will be first...\n"
"@endprepend"
msgstr ""

# P
#: ./docs/8.x/blade.md:1369
#: ./docs/9.x/blade.md:1685
#: ./docs/10.x/blade.md:1711
#: ./docs/11.x/blade.md:1757
#: ./docs/master/blade.md:1711
#~ msgid "<a name=\"service-injection\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/blade.md:1370
#: ./docs/9.x/blade.md:1686
#: ./docs/10.x/blade.md:1712
#: ./docs/11.x/blade.md:1758
#: ./docs/master/blade.md:1712
msgid "Service Injection"
msgstr ""

# P
#: ./docs/8.x/blade.md:1372
#: ./docs/9.x/blade.md:1688
#: ./docs/10.x/blade.md:1714
#: ./docs/11.x/blade.md:1760
#: ./docs/master/blade.md:1714
msgid "The `@inject` directive may be used to retrieve a service from the Laravel [service container](/docs/{{version}}/container). The first argument passed to `@inject` is the name of the variable the service will be placed into, while the second argument is the class or interface name of the service you wish to resolve:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1374
#: ./docs/9.x/blade.md:1690
#: ./docs/10.x/blade.md:1716
#: ./docs/11.x/blade.md:1762
#: ./docs/master/blade.md:1716
msgid "@inject('metrics', 'App\\Services\\MetricsService')\n\n"
"<div>\n"
"    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n"
"</div>"
msgstr ""

# P
#: ./docs/8.x/blade.md:1382
#: ./docs/9.x/blade.md:1760
#: ./docs/10.x/blade.md:1786
#: ./docs/11.x/blade.md:1832
#: ./docs/master/blade.md:1786
#~ msgid "<a name=\"extending-blade\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/blade.md:1383
#: ./docs/9.x/blade.md:1761
#: ./docs/10.x/blade.md:1787
#: ./docs/11.x/blade.md:1833
#: ./docs/master/blade.md:1787
msgid "Extending Blade"
msgstr ""

# P
#: ./docs/8.x/blade.md:1385
#: ./docs/9.x/blade.md:1763
#: ./docs/10.x/blade.md:1789
#: ./docs/11.x/blade.md:1835
#: ./docs/master/blade.md:1789
msgid "Blade allows you to define your own custom directives using the `directive` method. When the Blade compiler encounters the custom directive, it will call the provided callback with the expression that the directive contains."
msgstr ""

# P
#: ./docs/8.x/blade.md:1387
#: ./docs/9.x/blade.md:1765
#: ./docs/10.x/blade.md:1791
#: ./docs/11.x/blade.md:1837
#: ./docs/master/blade.md:1791
msgid "The following example creates a `@datetime($var)` directive which formats a given `$var`, which should be an instance of `DateTime`:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:1389
#: ./docs/9.x/blade.md:1767
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::directive('datetime', function ($expression) {\n"
"            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:1397
#: ./docs/10.x/blade.md:1425
#: ./docs/master/blade.md:1425
msgid "The `@aware` directive can not access parent data that is not explicitly passed to the parent component via HTML attributes. Default `@props` values that are not explicitly passed to the parent component can not be accessed by the `@aware` directive."
msgstr ""

# P
#: ./docs/11.x/blade.md:1398
msgid "Thankfully, Blade allows you to place a file matching the component's directory name within the component's directory itself. When this template exists, it can be rendered as the \"root\" element of the component even though it is nested within a directory. So, we can continue to use the same Blade syntax given in the example above; however, we will adjust our directory structure like so:"
msgstr ""

# P
#: ./docs/9.x/blade.md:1399
#: ./docs/10.x/blade.md:1427
#: ./docs/11.x/blade.md:1467
#: ./docs/master/blade.md:1427
#~ msgid "<a name=\"anonymous-component-paths\"></a>"
#~ msgstr ""

# CODE: none
#: ./docs/11.x/blade.md:1400
msgid "/resources/views/components/accordion/accordion.blade.php\n"
"/resources/views/components/accordion/item.blade.php"
msgstr ""

# H3
#: ./docs/9.x/blade.md:1400
#: ./docs/10.x/blade.md:1428
#: ./docs/11.x/blade.md:1468
#: ./docs/master/blade.md:1428
msgid "Anonymous Component Paths"
msgstr ""

# P
#: ./docs/9.x/blade.md:1402
#: ./docs/10.x/blade.md:1430
#: ./docs/11.x/blade.md:1470
#: ./docs/master/blade.md:1430
msgid "As previously discussed, anonymous components are typically defined by placing a Blade template within your `resources/views/components` directory. However, you may occasionally want to register other anonymous component paths with Laravel in addition to the default path."
msgstr ""

# P
#: ./docs/9.x/blade.md:1404
#: ./docs/10.x/blade.md:1432
#: ./docs/11.x/blade.md:1472
#: ./docs/master/blade.md:1432
msgid "The `anonymousComponentPath` method accepts the \"path\" to the anonymous component location as its first argument and an optional \"namespace\" that components should be placed under as its second argument. Typically, this method should be called from the `boot` method of one of your application's [service providers](/docs/{{version}}/providers):"
msgstr ""

# CODE
#: ./docs/9.x/blade.md:1406
msgid "/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::anonymousComponentPath(__DIR__.'/../components');\n"
"}"
msgstr ""

# P
#: ./docs/9.x/blade.md:1416
#: ./docs/10.x/blade.md:1442
#: ./docs/11.x/blade.md:1482
#: ./docs/master/blade.md:1442
msgid "When component paths are registered without a specified prefix as in the example above, they may be rendered in your Blade components without a corresponding prefix as well. For example, if a `panel.blade.php` component exists in the path registered above, it may be rendered like so:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1418
#: ./docs/10.x/blade.md:1444
#: ./docs/11.x/blade.md:1484
#: ./docs/master/blade.md:1444
msgid "<x-panel />"
msgstr ""

# P
#: ./docs/8.x/blade.md:1421
#: ./docs/9.x/blade.md:1799
#: ./docs/10.x/blade.md:1821
#: ./docs/11.x/blade.md:1867
#: ./docs/master/blade.md:1821
msgid "As you can see, we will chain the `format` method onto whatever expression is passed into the directive. So, in this example, the final PHP generated by this directive will be:"
msgstr ""

# P
#: ./docs/9.x/blade.md:1422
#: ./docs/10.x/blade.md:1448
#: ./docs/11.x/blade.md:1488
#: ./docs/master/blade.md:1448
msgid "Prefix \"namespaces\" may be provided as the second argument to the `anonymousComponentPath` method:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:1423
#: ./docs/9.x/blade.md:1801
#: ./docs/10.x/blade.md:1823
#: ./docs/11.x/blade.md:1869
#: ./docs/master/blade.md:1823
msgid "<?php echo ($var)->format('m/d/Y H:i'); ?>"
msgstr ""

# CODE
#: ./docs/9.x/blade.md:1424
#: ./docs/10.x/blade.md:1450
#: ./docs/11.x/blade.md:1490
#: ./docs/master/blade.md:1450
msgid "Blade::anonymousComponentPath(__DIR__.'/../components', 'dashboard');"
msgstr ""

# P
#: ./docs/8.x/blade.md:1425
#: ./docs/9.x/blade.md:1804
#: ./docs/10.x/blade.md:1826
#: ./docs/11.x/blade.md:1872
#: ./docs/master/blade.md:1826
msgid "After updating the logic of a Blade directive, you will need to delete all of the cached Blade views. The cached Blade views may be removed using the `view:clear` Artisan command."
msgstr ""

# P
#: ./docs/9.x/blade.md:1426
#: ./docs/10.x/blade.md:1452
#: ./docs/11.x/blade.md:1492
#: ./docs/master/blade.md:1452
msgid "When a prefix is provided, components within that \"namespace\" may be rendered by prefixing to the component's namespace to the component name when the component is rendered:"
msgstr ""

# P
#: ./docs/8.x/blade.md:1427
#: ./docs/9.x/blade.md:1806
#: ./docs/10.x/blade.md:1828
#: ./docs/11.x/blade.md:1874
#: ./docs/master/blade.md:1828
#~ msgid "<a name=\"custom-echo-handlers\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1428
#: ./docs/9.x/blade.md:1807
#: ./docs/10.x/blade.md:1829
#: ./docs/11.x/blade.md:1875
#: ./docs/master/blade.md:1829
msgid "Custom Echo Handlers"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1428
#: ./docs/10.x/blade.md:1454
#: ./docs/11.x/blade.md:1494
#: ./docs/master/blade.md:1454
msgid "<x-dashboard::panel />"
msgstr ""

# P
#: ./docs/8.x/blade.md:1430
#: ./docs/9.x/blade.md:1809
#: ./docs/10.x/blade.md:1831
#: ./docs/11.x/blade.md:1877
#: ./docs/master/blade.md:1831
msgid "If you attempt to \"echo\" an object using Blade, the object's `__toString` method will be invoked. The [`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) method is one of PHP's built-in \"magic methods\". However, sometimes you may not have control over the `__toString` method of a given class, such as when the class that you are interacting with belongs to a third-party library."
msgstr ""

# P
#: ./docs/8.x/blade.md:1432
#: ./docs/9.x/blade.md:1811
#: ./docs/10.x/blade.md:1833
#: ./docs/11.x/blade.md:1879
#: ./docs/master/blade.md:1833
msgid "In these cases, Blade allows you to register a custom echo handler for that particular type of object. To accomplish this, you should invoke Blade's `stringable` method. The `stringable` method accepts a closure. This closure should type-hint the type of object that it is responsible for rendering. Typically, the `stringable` method should be invoked within the `boot` method of your application's `AppServiceProvider` class:"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:1434
#: ./docs/11.x/blade.md:1474
#: ./docs/master/blade.md:1434
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Blade::anonymousComponentPath(__DIR__.'/../components');\n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:1434
#: ./docs/9.x/blade.md:1813
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use Money\\Money;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}"
msgstr ""

# P
#: ./docs/8.x/blade.md:1449
#: ./docs/9.x/blade.md:1828
#: ./docs/10.x/blade.md:1848
#: ./docs/11.x/blade.md:1894
#: ./docs/master/blade.md:1848
msgid "Once your custom echo handler has been defined, you may simply echo the object in your Blade template:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1451
#: ./docs/9.x/blade.md:1830
#: ./docs/10.x/blade.md:1850
#: ./docs/11.x/blade.md:1896
#: ./docs/master/blade.md:1850
msgid "Cost: {{ $money }}"
msgstr ""

# P
#: ./docs/8.x/blade.md:1455
#: ./docs/9.x/blade.md:1834
#: ./docs/10.x/blade.md:1854
#: ./docs/11.x/blade.md:1900
#: ./docs/master/blade.md:1854
#~ msgid "<a name=\"custom-if-statements\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/blade.md:1456
#: ./docs/9.x/blade.md:1835
#: ./docs/10.x/blade.md:1855
#: ./docs/11.x/blade.md:1901
#: ./docs/master/blade.md:1855
msgid "Custom If Statements"
msgstr ""

# P
#: ./docs/8.x/blade.md:1458
#: ./docs/9.x/blade.md:1837
#: ./docs/10.x/blade.md:1857
#: ./docs/11.x/blade.md:1903
#: ./docs/master/blade.md:1857
msgid "Programming a custom directive is sometimes more complex than necessary when defining simple, custom conditional statements. For that reason, Blade provides a `Blade::if` method which allows you to quickly define custom conditional directives using closures. For example, let's define a custom conditional that checks the configured default \"disk\" for the application. We may do this in the `boot` method of our `AppServiceProvider`:"
msgstr ""

# CODE
#: ./docs/8.x/blade.md:1460
#: ./docs/9.x/blade.md:1839
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::if('disk', function ($value) {\n"
"        return config('filesystems.default') === $value;\n"
"    });\n"
"}"
msgstr ""

# P
#: ./docs/11.x/blade.md:1465
msgid "The `@aware` directive cannot access parent data that is not explicitly passed to the parent component via HTML attributes. Default `@props` values that are not explicitly passed to the parent component cannot be accessed by the `@aware` directive."
msgstr ""

# H4
#: ./docs/10.x/blade.md:1467
#: ./docs/11.x/blade.md:1507
#: ./docs/master/blade.md:1467
msgid "Defining the Layout Component"
msgstr ""

# P
#: ./docs/8.x/blade.md:1474
#: ./docs/9.x/blade.md:1853
#: ./docs/10.x/blade.md:1871
#: ./docs/11.x/blade.md:1917
#: ./docs/master/blade.md:1871
msgid "Once the custom conditional has been defined, you can use it within your templates:"
msgstr ""

# CODE: html
# CODE: blade
#: ./docs/8.x/blade.md:1476
#: ./docs/9.x/blade.md:1855
#: ./docs/10.x/blade.md:1873
#: ./docs/11.x/blade.md:1919
#: ./docs/master/blade.md:1873
msgid "@disk('local')\n"
"    <!-- The application is using the local disk... -->\n"
"@elsedisk('s3')\n"
"    <!-- The application is using the s3 disk... -->\n"
"@else\n"
"    <!-- The application is using some other disk... -->\n"
"@enddisk\n\n"
"@unlessdisk('local')\n"
"    <!-- The application is not using the local disk... -->\n"
"@enddisk"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1477
#: ./docs/10.x/blade.md:1503
#: ./docs/master/blade.md:1503
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot:title>\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>"
msgstr ""

# H4
#: ./docs/10.x/blade.md:1487
#: ./docs/11.x/blade.md:1527
#: ./docs/master/blade.md:1487
msgid "Applying the Layout Component"
msgstr ""

# H4
#: ./docs/10.x/blade.md:1529
#: ./docs/11.x/blade.md:1569
#: ./docs/master/blade.md:1529
msgid "Defining a Layout"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:1531
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        <div>{{ $task }}</div>\n"
"    @endforeach\n"
"</x-layout>"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:1543
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot:title>\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        <div>{{ $task }}</div>\n"
"    @endforeach\n"
"</x-layout>"
msgstr ""

# H4
#: ./docs/10.x/blade.md:1559
#: ./docs/11.x/blade.md:1599
#: ./docs/master/blade.md:1559
msgid "Extending a Layout"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1600
#: ./docs/10.x/blade.md:1626
#: ./docs/master/blade.md:1626
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1616
#: ./docs/10.x/blade.md:1642
#: ./docs/master/blade.md:1642
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email') is-invalid @else is-valid @enderror\">"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1628
#: ./docs/10.x/blade.md:1654
#: ./docs/master/blade.md:1654
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror"
msgstr ""

# P
#: ./docs/9.x/blade.md:1653
#: ./docs/10.x/blade.md:1679
#: ./docs/11.x/blade.md:1725
#: ./docs/master/blade.md:1679
msgid "If you would like to `@push` content if a given boolean expression evaluates to `true`, you may use the `@pushIf` directive:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1655
#: ./docs/10.x/blade.md:1681
#: ./docs/11.x/blade.md:1727
#: ./docs/master/blade.md:1681
msgid "@pushIf($shouldPush, 'scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endPushIf"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:1666
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input\n"
"    id=\"title\"\n"
"    type=\"text\"\n"
"    class=\"@error('title') is-invalid @enderror\"\n"
"/>\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:1684
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input\n"
"    id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email') is-invalid @else is-valid @enderror\"\n"
"/>"
msgstr ""

# CODE: blade
#: ./docs/11.x/blade.md:1698
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input\n"
"    id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email', 'login') is-invalid @enderror\"\n"
"/>\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror"
msgstr ""

# P
#: ./docs/9.x/blade.md:1698
#: ./docs/10.x/blade.md:1724
#: ./docs/11.x/blade.md:1770
#: ./docs/master/blade.md:1724
#~ msgid "<a name=\"rendering-inline-blade-templates\"></a>"
#~ msgstr ""

# H2
#: ./docs/9.x/blade.md:1699
#: ./docs/10.x/blade.md:1725
#: ./docs/11.x/blade.md:1771
#: ./docs/master/blade.md:1725
msgid "Rendering Inline Blade Templates"
msgstr ""

# P
#: ./docs/9.x/blade.md:1701
#: ./docs/10.x/blade.md:1727
#: ./docs/11.x/blade.md:1773
#: ./docs/master/blade.md:1727
msgid "Sometimes you may need to transform a raw Blade template string into valid HTML. You may accomplish this using the `render` method provided by the `Blade` facade. The `render` method accepts the Blade template string and an optional array of data to provide to the template:"
msgstr ""

# CODE: php
#: ./docs/9.x/blade.md:1703
#: ./docs/10.x/blade.md:1729
#: ./docs/11.x/blade.md:1775
#: ./docs/master/blade.md:1729
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);"
msgstr ""

# P
#: ./docs/9.x/blade.md:1709
#: ./docs/10.x/blade.md:1735
#: ./docs/11.x/blade.md:1781
#: ./docs/master/blade.md:1735
msgid "Laravel renders inline Blade templates by writing them to the `storage/framework/views` directory. If you would like Laravel to remove these temporary files after rendering the Blade template, you may provide the `deleteCachedView` argument to the method:"
msgstr ""

# CODE: php
#: ./docs/9.x/blade.md:1711
#: ./docs/10.x/blade.md:1737
#: ./docs/11.x/blade.md:1783
#: ./docs/master/blade.md:1737
msgid "return Blade::render(\n"
"    'Hello, {{ $name }}',\n"
"    ['name' => 'Julian Bashir'],\n"
"    deleteCachedView: true\n"
");"
msgstr ""

# P
#: ./docs/9.x/blade.md:1719
#: ./docs/10.x/blade.md:1745
#: ./docs/11.x/blade.md:1791
#: ./docs/master/blade.md:1745
#~ msgid "<a name=\"rendering-blade-fragments\"></a>"
#~ msgstr ""

# H2
#: ./docs/9.x/blade.md:1720
#: ./docs/10.x/blade.md:1746
#: ./docs/11.x/blade.md:1792
#: ./docs/master/blade.md:1746
msgid "Rendering Blade Fragments"
msgstr ""

# P
#: ./docs/9.x/blade.md:1722
#: ./docs/10.x/blade.md:1748
#: ./docs/11.x/blade.md:1794
#: ./docs/master/blade.md:1748
msgid "When using frontend frameworks such as [Turbo](https://turbo.hotwired.dev/) and [htmx](https://htmx.org/), you may occasionally need to only return a portion of a Blade template within your HTTP response. Blade \"fragments\" allow you to do just that. To get started, place a portion of your Blade template within `@fragment` and `@endfragment` directives:"
msgstr ""

# CODE: blade
#: ./docs/9.x/blade.md:1724
#: ./docs/10.x/blade.md:1750
#: ./docs/11.x/blade.md:1796
#: ./docs/master/blade.md:1750
msgid "@fragment('user-list')\n"
"    <ul>\n"
"        @foreach ($users as $user)\n"
"            <li>{{ $user->name }}</li>\n"
"        @endforeach\n"
"    </ul>\n"
"@endfragment"
msgstr ""

# P
#: ./docs/9.x/blade.md:1734
#: ./docs/10.x/blade.md:1760
#: ./docs/11.x/blade.md:1806
#: ./docs/master/blade.md:1760
msgid "Then, when rendering the view that utilizes this template, you may invoke the `fragment` method to specify that only the specified fragment should be included in the outgoing HTTP response:"
msgstr ""

# CODE: php
#: ./docs/9.x/blade.md:1736
#: ./docs/10.x/blade.md:1762
#: ./docs/11.x/blade.md:1808
#: ./docs/master/blade.md:1762
msgid "return view('dashboard', ['users' => $users])->fragment('user-list');"
msgstr ""

# P
#: ./docs/9.x/blade.md:1740
#: ./docs/10.x/blade.md:1766
#: ./docs/11.x/blade.md:1812
#: ./docs/master/blade.md:1766
msgid "The `fragmentIf` method allows you to conditionally return a fragment of a view based on a given condition. Otherwise, the entire view will be returned:"
msgstr ""

# CODE: php
#: ./docs/9.x/blade.md:1742
#: ./docs/10.x/blade.md:1768
#: ./docs/11.x/blade.md:1814
#: ./docs/master/blade.md:1768
msgid "return view('dashboard', ['users' => $users])\n"
"    ->fragmentIf($request->hasHeader('HX-Request'), 'user-list');"
msgstr ""

# P
#: ./docs/9.x/blade.md:1747
#: ./docs/10.x/blade.md:1773
#: ./docs/11.x/blade.md:1819
#: ./docs/master/blade.md:1773
msgid "The `fragments` and `fragmentsIf` methods allow you to return multiple view fragments in the response. The fragments will be concatenated together:"
msgstr ""

# CODE: php
#: ./docs/9.x/blade.md:1749
#: ./docs/10.x/blade.md:1775
#: ./docs/11.x/blade.md:1821
#: ./docs/master/blade.md:1775
msgid "view('dashboard', ['users' => $users])\n"
"    ->fragments(['user-list', 'comment-list']);\n\n"
"view('dashboard', ['users' => $users])\n"
"    ->fragmentsIf(\n"
"        $request->hasHeader('HX-Request'),\n"
"        ['user-list', 'comment-list']\n"
"    );"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:1793
#: ./docs/11.x/blade.md:1839
#: ./docs/master/blade.md:1793
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Blade::directive('datetime', function (string $expression) {\n"
"            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:1835
#: ./docs/11.x/blade.md:1881
#: ./docs/master/blade.md:1835
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use Money\\Money;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Blade::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/blade.md:1859
#: ./docs/11.x/blade.md:1905
#: ./docs/master/blade.md:1859
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Blade::if('disk', function (string $value) {\n"
"        return config('filesystems.default') === $value;\n"
"    });\n"
"}"
msgstr ""

