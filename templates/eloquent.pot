msgid ""
msgstr ""

#: ./docs/8.x/eloquent.md:1
#: ./docs/9.x/eloquent.md:1
#: ./docs/10.x/eloquent.md:1
#: ./docs/11.x/eloquent.md:1
#: ./docs/master/eloquent.md:1
msgctxt "H1"
msgid "Eloquent: Getting Started"
msgstr ""

#: ./docs/8.x/eloquent.md:3
#: ./docs/9.x/eloquent.md:3
#: ./docs/10.x/eloquent.md:3
#: ./docs/11.x/eloquent.md:3
#: ./docs/master/eloquent.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/eloquent.md:4
#: ./docs/9.x/eloquent.md:4
#: ./docs/10.x/eloquent.md:4
#: ./docs/11.x/eloquent.md:4
#: ./docs/master/eloquent.md:4
msgctxt "P"
msgid "[Generating Model Classes](#generating-model-classes)"
msgstr ""

#: ./docs/8.x/eloquent.md:5
#: ./docs/9.x/eloquent.md:5
#: ./docs/10.x/eloquent.md:5
#: ./docs/11.x/eloquent.md:5
#: ./docs/master/eloquent.md:5
msgctxt "P"
msgid "[Eloquent Model Conventions](#eloquent-model-conventions)"
msgstr ""

#: ./docs/8.x/eloquent.md:6
#: ./docs/9.x/eloquent.md:6
#: ./docs/10.x/eloquent.md:6
#: ./docs/11.x/eloquent.md:6
#: ./docs/master/eloquent.md:6
msgctxt "P"
msgid "[Table Names](#table-names)"
msgstr ""

#: ./docs/8.x/eloquent.md:7
#: ./docs/9.x/eloquent.md:7
#: ./docs/10.x/eloquent.md:7
#: ./docs/11.x/eloquent.md:7
#: ./docs/master/eloquent.md:7
msgctxt "P"
msgid "[Primary Keys](#primary-keys)"
msgstr ""

#: ./docs/10.x/eloquent.md:8
#: ./docs/11.x/eloquent.md:8
#: ./docs/master/eloquent.md:8
msgctxt "P"
msgid "[UUID and ULID Keys](#uuid-and-ulid-keys)"
msgstr ""

#: ./docs/8.x/eloquent.md:8
#: ./docs/9.x/eloquent.md:9
#: ./docs/10.x/eloquent.md:9
#: ./docs/11.x/eloquent.md:9
#: ./docs/master/eloquent.md:9
msgctxt "P"
msgid "[Timestamps](#timestamps)"
msgstr ""

#: ./docs/9.x/eloquent.md:8
msgctxt "P"
msgid "[UUID & ULID Keys](#uuid-and-ulid-keys)"
msgstr ""

#: ./docs/8.x/eloquent.md:9
#: ./docs/9.x/eloquent.md:10
#: ./docs/10.x/eloquent.md:10
#: ./docs/11.x/eloquent.md:10
#: ./docs/master/eloquent.md:10
msgctxt "P"
msgid "[Database Connections](#database-connections)"
msgstr ""

#: ./docs/8.x/eloquent.md:10
#: ./docs/9.x/eloquent.md:11
#: ./docs/10.x/eloquent.md:11
#: ./docs/11.x/eloquent.md:11
#: ./docs/master/eloquent.md:11
msgctxt "P"
msgid "[Default Attribute Values](#default-attribute-values)"
msgstr ""

#: ./docs/8.x/eloquent.md:11
#: ./docs/9.x/eloquent.md:13
#: ./docs/10.x/eloquent.md:13
#: ./docs/11.x/eloquent.md:13
#: ./docs/master/eloquent.md:13
msgctxt "P"
msgid "[Retrieving Models](#retrieving-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:12
#: ./docs/9.x/eloquent.md:14
#: ./docs/10.x/eloquent.md:14
#: ./docs/11.x/eloquent.md:14
#: ./docs/master/eloquent.md:14
msgctxt "P"
msgid "[Collections](#collections)"
msgstr ""

#: ./docs/9.x/eloquent.md:12
#: ./docs/10.x/eloquent.md:12
#: ./docs/11.x/eloquent.md:12
#: ./docs/master/eloquent.md:12
msgctxt "P"
msgid "[Configuring Eloquent Strictness](#configuring-eloquent-strictness)"
msgstr ""

#: ./docs/8.x/eloquent.md:13
#: ./docs/9.x/eloquent.md:15
#: ./docs/10.x/eloquent.md:15
#: ./docs/11.x/eloquent.md:15
#: ./docs/master/eloquent.md:15
msgctxt "P"
msgid "[Chunking Results](#chunking-results)"
msgstr ""

#: ./docs/8.x/eloquent.md:14
msgctxt "P"
msgid "[Streaming Results Lazily](#streaming-results-lazily)"
msgstr ""

#: ./docs/8.x/eloquent.md:15
#: ./docs/9.x/eloquent.md:17
#: ./docs/10.x/eloquent.md:17
#: ./docs/11.x/eloquent.md:17
#: ./docs/master/eloquent.md:17
msgctxt "P"
msgid "[Cursors](#cursors)"
msgstr ""

#: ./docs/8.x/eloquent.md:16
#: ./docs/9.x/eloquent.md:18
#: ./docs/10.x/eloquent.md:18
#: ./docs/11.x/eloquent.md:18
#: ./docs/master/eloquent.md:18
msgctxt "P"
msgid "[Advanced Subqueries](#advanced-subqueries)"
msgstr ""

#: ./docs/9.x/eloquent.md:16
#: ./docs/10.x/eloquent.md:16
#: ./docs/11.x/eloquent.md:16
#: ./docs/master/eloquent.md:16
msgctxt "P"
msgid "[Chunk Using Lazy Collections](#chunking-using-lazy-collections)"
msgstr ""

#: ./docs/8.x/eloquent.md:17
#: ./docs/9.x/eloquent.md:19
#: ./docs/10.x/eloquent.md:19
#: ./docs/11.x/eloquent.md:19
#: ./docs/master/eloquent.md:19
msgctxt "P"
msgid "[Retrieving Single Models / Aggregates](#retrieving-single-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:18
#: ./docs/9.x/eloquent.md:20
msgctxt "P"
msgid "[Retrieving Or Creating Models](#retrieving-or-creating-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:19
#: ./docs/9.x/eloquent.md:21
#: ./docs/10.x/eloquent.md:21
#: ./docs/11.x/eloquent.md:21
#: ./docs/master/eloquent.md:21
msgctxt "P"
msgid "[Retrieving Aggregates](#retrieving-aggregates)"
msgstr ""

#: ./docs/10.x/eloquent.md:20
#: ./docs/11.x/eloquent.md:20
#: ./docs/master/eloquent.md:20
msgctxt "P"
msgid "[Retrieving or Creating Models](#retrieving-or-creating-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:20
#: ./docs/9.x/eloquent.md:22
msgctxt "P"
msgid "[Inserting & Updating Models](#inserting-and-updating-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:21
#: ./docs/9.x/eloquent.md:23
#: ./docs/10.x/eloquent.md:23
#: ./docs/11.x/eloquent.md:23
#: ./docs/master/eloquent.md:23
msgctxt "P"
msgid "[Inserts](#inserts)"
msgstr ""

#: ./docs/10.x/eloquent.md:22
#: ./docs/11.x/eloquent.md:22
#: ./docs/master/eloquent.md:22
msgctxt "P"
msgid "[Inserting and Updating Models](#inserting-and-updating-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:22
#: ./docs/9.x/eloquent.md:24
#: ./docs/10.x/eloquent.md:24
#: ./docs/11.x/eloquent.md:24
#: ./docs/master/eloquent.md:24
msgctxt "P"
msgid "[Updates](#updates)"
msgstr ""

#: ./docs/8.x/eloquent.md:23
#: ./docs/9.x/eloquent.md:25
#: ./docs/10.x/eloquent.md:25
#: ./docs/11.x/eloquent.md:25
#: ./docs/master/eloquent.md:25
msgctxt "P"
msgid "[Mass Assignment](#mass-assignment)"
msgstr ""

#: ./docs/8.x/eloquent.md:24
#: ./docs/9.x/eloquent.md:26
#: ./docs/10.x/eloquent.md:26
#: ./docs/11.x/eloquent.md:26
#: ./docs/master/eloquent.md:26
msgctxt "P"
msgid "[Upserts](#upserts)"
msgstr ""

#: ./docs/8.x/eloquent.md:25
#: ./docs/9.x/eloquent.md:27
#: ./docs/10.x/eloquent.md:27
#: ./docs/11.x/eloquent.md:27
#: ./docs/master/eloquent.md:27
msgctxt "P"
msgid "[Deleting Models](#deleting-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:26
#: ./docs/9.x/eloquent.md:28
#: ./docs/10.x/eloquent.md:28
#: ./docs/11.x/eloquent.md:28
#: ./docs/master/eloquent.md:28
msgctxt "P"
msgid "[Soft Deleting](#soft-deleting)"
msgstr ""

#: ./docs/8.x/eloquent.md:27
#: ./docs/9.x/eloquent.md:29
#: ./docs/10.x/eloquent.md:29
#: ./docs/11.x/eloquent.md:29
#: ./docs/master/eloquent.md:29
msgctxt "P"
msgid "[Querying Soft Deleted Models](#querying-soft-deleted-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:28
#: ./docs/9.x/eloquent.md:30
#: ./docs/10.x/eloquent.md:30
#: ./docs/11.x/eloquent.md:30
#: ./docs/master/eloquent.md:30
msgctxt "P"
msgid "[Pruning Models](#pruning-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:29
#: ./docs/9.x/eloquent.md:31
#: ./docs/10.x/eloquent.md:31
#: ./docs/11.x/eloquent.md:31
#: ./docs/master/eloquent.md:31
msgctxt "P"
msgid "[Replicating Models](#replicating-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:30
#: ./docs/9.x/eloquent.md:32
#: ./docs/10.x/eloquent.md:32
#: ./docs/11.x/eloquent.md:32
#: ./docs/master/eloquent.md:32
msgctxt "P"
msgid "[Query Scopes](#query-scopes)"
msgstr ""

#: ./docs/8.x/eloquent.md:31
#: ./docs/9.x/eloquent.md:33
#: ./docs/10.x/eloquent.md:33
#: ./docs/11.x/eloquent.md:33
#: ./docs/master/eloquent.md:33
msgctxt "P"
msgid "[Global Scopes](#global-scopes)"
msgstr ""

#: ./docs/8.x/eloquent.md:32
#: ./docs/9.x/eloquent.md:34
#: ./docs/10.x/eloquent.md:34
#: ./docs/11.x/eloquent.md:34
#: ./docs/master/eloquent.md:34
msgctxt "P"
msgid "[Local Scopes](#local-scopes)"
msgstr ""

#: ./docs/8.x/eloquent.md:33
#: ./docs/9.x/eloquent.md:35
#: ./docs/10.x/eloquent.md:35
#: ./docs/11.x/eloquent.md:35
#: ./docs/master/eloquent.md:35
msgctxt "P"
msgid "[Comparing Models](#comparing-models)"
msgstr ""

#: ./docs/8.x/eloquent.md:34
#: ./docs/9.x/eloquent.md:36
#: ./docs/10.x/eloquent.md:36
#: ./docs/11.x/eloquent.md:36
#: ./docs/master/eloquent.md:36
msgctxt "P"
msgid "[Events](#events)"
msgstr ""

#: ./docs/8.x/eloquent.md:35
#: ./docs/9.x/eloquent.md:37
#: ./docs/10.x/eloquent.md:37
#: ./docs/11.x/eloquent.md:37
#: ./docs/master/eloquent.md:37
msgctxt "P"
msgid "[Using Closures](#events-using-closures)"
msgstr ""

#: ./docs/8.x/eloquent.md:36
#: ./docs/9.x/eloquent.md:38
#: ./docs/10.x/eloquent.md:38
#: ./docs/11.x/eloquent.md:38
#: ./docs/master/eloquent.md:38
msgctxt "P"
msgid "[Observers](#observers)"
msgstr ""

#: ./docs/8.x/eloquent.md:37
#: ./docs/9.x/eloquent.md:39
#: ./docs/10.x/eloquent.md:39
#: ./docs/11.x/eloquent.md:39
#: ./docs/master/eloquent.md:39
msgctxt "P"
msgid "[Muting Events](#muting-events)"
msgstr ""

#: ./docs/8.x/eloquent.md:39
#: ./docs/9.x/eloquent.md:41
#: ./docs/10.x/eloquent.md:41
#: ./docs/11.x/eloquent.md:41
#: ./docs/master/eloquent.md:41
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:40
#: ./docs/9.x/eloquent.md:42
#: ./docs/10.x/eloquent.md:42
#: ./docs/11.x/eloquent.md:42
#: ./docs/master/eloquent.md:42
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/eloquent.md:42
#: ./docs/9.x/eloquent.md:44
#: ./docs/10.x/eloquent.md:44
#: ./docs/11.x/eloquent.md:44
#: ./docs/master/eloquent.md:44
msgctxt "P"
msgid "Laravel includes Eloquent, an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using Eloquent, each database table has a corresponding \"Model\" that is used to interact with that table. In addition to retrieving records from the database table, Eloquent models allow you to insert, update, and delete records from the table as well."
msgstr ""

#: ./docs/8.x/eloquent.md:44
#: ./docs/9.x/eloquent.md:47
#: ./docs/10.x/eloquent.md:47
#: ./docs/11.x/eloquent.md:47
#: ./docs/master/eloquent.md:47
msgctxt "P"
msgid "Before getting started, be sure to configure a database connection in your application's `config/database.php` configuration file. For more information on configuring your database, check out [the database configuration documentation](/docs/{{version}}/database#configuration)."
msgstr ""

#: ./docs/8.x/eloquent.md:46
#: ./docs/9.x/eloquent.md:53
#: ./docs/10.x/eloquent.md:53
#: ./docs/11.x/eloquent.md:53
#: ./docs/master/eloquent.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"generating-model-classes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:47
#: ./docs/9.x/eloquent.md:54
#: ./docs/10.x/eloquent.md:54
#: ./docs/11.x/eloquent.md:54
#: ./docs/master/eloquent.md:54
msgctxt "H2"
msgid "Generating Model Classes"
msgstr ""

#: ./docs/8.x/eloquent.md:49
#: ./docs/9.x/eloquent.md:56
#: ./docs/10.x/eloquent.md:56
#: ./docs/11.x/eloquent.md:56
#: ./docs/master/eloquent.md:56
msgctxt "P"
msgid "To get started, let's create an Eloquent model. Models typically live in the `app\\Models` directory and extend the `Illuminate\\Database\\Eloquent\\Model` class. You may use the `make:model` [Artisan command](/docs/{{version}}/artisan) to generate a new model:"
msgstr ""

#: ./docs/9.x/eloquent.md:49
#: ./docs/10.x/eloquent.md:49
#: ./docs/11.x/eloquent.md:49
#: ./docs/master/eloquent.md:49
msgctxt "H4"
msgid "Laravel Bootcamp"
msgstr ""

#: ./docs/10.x/eloquent.md:51
#: ./docs/11.x/eloquent.md:51
#: ./docs/master/eloquent.md:51
msgctxt "P"
msgid "If you're new to Laravel, feel free to jump into the [Laravel Bootcamp](https://bootcamp.laravel.com). The Laravel Bootcamp will walk you through building your first Laravel application using Eloquent. It's a great way to get a tour of everything that Laravel and Eloquent have to offer."
msgstr ""

#: ./docs/8.x/eloquent.md:51
#: ./docs/9.x/eloquent.md:58
#: ./docs/10.x/eloquent.md:58
#: ./docs/11.x/eloquent.md:58
#: ./docs/master/eloquent.md:58
msgctxt "CODE"
msgid "php artisan make:model Flight"
msgstr ""

#: ./docs/9.x/eloquent.md:51
msgctxt "P"
msgid "If you're new to Laravel, feel free to jump into the [Laravel Bootcamp](https://bootcamp.laravel.com). The Laravel Bootcamp will walk you through building your first Laravel application using Eloquent. It's a great way to get a tour of everything the Laravel and Eloquent have to offer."
msgstr ""

#: ./docs/8.x/eloquent.md:53
#: ./docs/9.x/eloquent.md:62
#: ./docs/10.x/eloquent.md:62
#: ./docs/11.x/eloquent.md:62
#: ./docs/master/eloquent.md:62
msgctxt "P"
msgid "If you would like to generate a [database migration](/docs/{{version}}/migrations) when you generate the model, you may use the `--migration` or `-m` option:"
msgstr ""

#: ./docs/8.x/eloquent.md:55
#: ./docs/9.x/eloquent.md:64
#: ./docs/10.x/eloquent.md:64
#: ./docs/11.x/eloquent.md:64
#: ./docs/master/eloquent.md:64
msgctxt "CODE"
msgid "php artisan make:model Flight --migration"
msgstr ""

#: ./docs/8.x/eloquent.md:57
#: ./docs/9.x/eloquent.md:68
#: ./docs/10.x/eloquent.md:68
#: ./docs/11.x/eloquent.md:68
#: ./docs/master/eloquent.md:68
msgctxt "P"
msgid "You may generate various other types of classes when generating a model, such as factories, seeders, policies, controllers, and form requests. In addition, these options may be combined to create multiple classes at once:"
msgstr ""

#: ./docs/8.x/eloquent.md:59
#: ./docs/9.x/eloquent.md:70
msgctxt "CODE: bash"
msgid ""
"# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n"
"\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n"
"\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n"
"\n"
"# Generate a model, FlightController resource class, and form request classes...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n"
"\n"
"# Generate a model and a FlightPolicy class...\n"
"php artisan make:model Flight --policy\n"
"\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n"
"\n"
"# Shortcut to generate a model, migration, factory, seeder, policy, controller, and form requests...\n"
"php artisan make:model Flight --all\n"
"\n"
"# Generate a pivot model...\n"
"php artisan make:model Member --pivot"
msgstr ""

#: ./docs/10.x/eloquent.md:70
msgctxt "CODE: shell"
msgid ""
"# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n"
"\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n"
"\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n"
"\n"
"# Generate a model, FlightController resource class, and form request classes...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n"
"\n"
"# Generate a model and a FlightPolicy class...\n"
"php artisan make:model Flight --policy\n"
"\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n"
"\n"
"# Shortcut to generate a model, migration, factory, seeder, policy, controller, and form requests...\n"
"php artisan make:model Flight --all\n"
"\n"
"# Generate a pivot model...\n"
"php artisan make:model Member --pivot\n"
"php artisan make:model Member -p"
msgstr ""

#: ./docs/11.x/eloquent.md:70
#: ./docs/master/eloquent.md:70
msgctxt "CODE: shell"
msgid ""
"# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n"
"\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n"
"\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n"
"\n"
"# Generate a model, FlightController resource class, and form request classes...\n"
"php artisan make:model Flight --controller --resource --requests\n"
"php artisan make:model Flight -crR\n"
"\n"
"# Generate a model and a FlightPolicy class...\n"
"php artisan make:model Flight --policy\n"
"\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n"
"\n"
"# Shortcut to generate a model, migration, factory, seeder, policy, controller, and form requests...\n"
"php artisan make:model Flight --all\n"
"php artisan make:model Flight -a\n"
"\n"
"# Generate a pivot model...\n"
"php artisan make:model Member --pivot\n"
"php artisan make:model Member -p"
msgstr ""

#: ./docs/8.x/eloquent.md:89
#: ./docs/9.x/eloquent.md:109
#: ./docs/10.x/eloquent.md:110
#: ./docs/11.x/eloquent.md:111
#: ./docs/master/eloquent.md:111
#~ msgctxt "P"
#~ msgid "<a name=\"eloquent-model-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:90
#: ./docs/9.x/eloquent.md:110
#: ./docs/10.x/eloquent.md:111
#: ./docs/11.x/eloquent.md:112
#: ./docs/master/eloquent.md:112
msgctxt "H2"
msgid "Eloquent Model Conventions"
msgstr ""

#: ./docs/8.x/eloquent.md:92
#: ./docs/9.x/eloquent.md:112
#: ./docs/10.x/eloquent.md:113
#: ./docs/11.x/eloquent.md:114
#: ./docs/master/eloquent.md:114
msgctxt "P"
msgid "Models generated by the `make:model` command will be placed in the `app/Models` directory. Let's examine a basic model class and discuss some of Eloquent's key conventions:"
msgstr ""

#: ./docs/8.x/eloquent.md:94
#: ./docs/9.x/eloquent.md:114
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:100
#: ./docs/10.x/eloquent.md:101
#: ./docs/11.x/eloquent.md:102
#: ./docs/master/eloquent.md:102
#~ msgctxt "P"
#~ msgid "<a name=\"inspecting-models\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:101
#: ./docs/10.x/eloquent.md:102
#: ./docs/11.x/eloquent.md:103
#: ./docs/master/eloquent.md:103
msgctxt "H4"
msgid "Inspecting Models"
msgstr ""

#: ./docs/9.x/eloquent.md:103
#: ./docs/10.x/eloquent.md:104
#: ./docs/11.x/eloquent.md:105
#: ./docs/master/eloquent.md:105
msgctxt "P"
msgid "Sometimes it can be difficult to determine all of a model's available attributes and relationships just by skimming its code. Instead, try the `model:show` Artisan command, which provides a convenient overview of all the model's attributes and relations:"
msgstr ""

#: ./docs/8.x/eloquent.md:105
#: ./docs/9.x/eloquent.md:125
#: ./docs/10.x/eloquent.md:126
#: ./docs/11.x/eloquent.md:127
#: ./docs/master/eloquent.md:127
#~ msgctxt "P"
#~ msgid "<a name=\"table-names\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:105
#: ./docs/10.x/eloquent.md:106
#: ./docs/11.x/eloquent.md:107
#: ./docs/master/eloquent.md:107
msgctxt "CODE: shell"
msgid "php artisan model:show Flight"
msgstr ""

#: ./docs/8.x/eloquent.md:106
#: ./docs/9.x/eloquent.md:126
#: ./docs/10.x/eloquent.md:127
#: ./docs/11.x/eloquent.md:128
#: ./docs/master/eloquent.md:128
msgctxt "H3"
msgid "Table Names"
msgstr ""

#: ./docs/8.x/eloquent.md:108
#: ./docs/9.x/eloquent.md:128
#: ./docs/10.x/eloquent.md:129
#: ./docs/11.x/eloquent.md:130
#: ./docs/master/eloquent.md:130
msgctxt "P"
msgid "After glancing at the example above, you may have noticed that we did not tell Eloquent which database table corresponds to our `Flight` model. By convention, the \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the `Flight` model stores records in the `flights` table, while an `AirTrafficController` model would store records in an `air_traffic_controllers` table."
msgstr ""

#: ./docs/8.x/eloquent.md:110
#: ./docs/9.x/eloquent.md:130
#: ./docs/10.x/eloquent.md:131
#: ./docs/11.x/eloquent.md:132
#: ./docs/master/eloquent.md:132
msgctxt "P"
msgid "If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by defining a `table` property on the model:"
msgstr ""

#: ./docs/8.x/eloquent.md:112
#: ./docs/9.x/eloquent.md:132
#: ./docs/10.x/eloquent.md:133
#: ./docs/11.x/eloquent.md:134
#: ./docs/master/eloquent.md:134
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The table associated with the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $table = 'my_flights';\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:115
#: ./docs/11.x/eloquent.md:116
#: ./docs/master/eloquent.md:116
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:128
#: ./docs/9.x/eloquent.md:148
#: ./docs/10.x/eloquent.md:149
#: ./docs/11.x/eloquent.md:150
#: ./docs/master/eloquent.md:150
#~ msgctxt "P"
#~ msgid "<a name=\"primary-keys\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:129
#: ./docs/9.x/eloquent.md:149
#: ./docs/10.x/eloquent.md:150
#: ./docs/11.x/eloquent.md:151
#: ./docs/master/eloquent.md:151
msgctxt "H3"
msgid "Primary Keys"
msgstr ""

#: ./docs/8.x/eloquent.md:131
#: ./docs/9.x/eloquent.md:151
#: ./docs/10.x/eloquent.md:152
#: ./docs/11.x/eloquent.md:153
#: ./docs/master/eloquent.md:153
msgctxt "P"
msgid "Eloquent will also assume that each model's corresponding database table has a primary key column named `id`. If necessary, you may define a protected `$primaryKey` property on your model to specify a different column that serves as your model's primary key:"
msgstr ""

#: ./docs/8.x/eloquent.md:133
#: ./docs/9.x/eloquent.md:153
#: ./docs/10.x/eloquent.md:154
#: ./docs/11.x/eloquent.md:155
#: ./docs/master/eloquent.md:155
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The primary key associated with the table.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $primaryKey = 'flight_id';\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:149
#: ./docs/9.x/eloquent.md:169
#: ./docs/10.x/eloquent.md:170
#: ./docs/11.x/eloquent.md:171
#: ./docs/master/eloquent.md:171
msgctxt "P"
msgid "In addition, Eloquent assumes that the primary key is an incrementing integer value, which means that Eloquent will automatically cast the primary key to an integer. If you wish to use a non-incrementing or a non-numeric primary key you must define a public `$incrementing` property on your model that is set to `false`:"
msgstr ""

#: ./docs/8.x/eloquent.md:151
#: ./docs/9.x/eloquent.md:171
#: ./docs/10.x/eloquent.md:172
#: ./docs/11.x/eloquent.md:173
#: ./docs/master/eloquent.md:173
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * Indicates if the model's ID is auto-incrementing.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $incrementing = false;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:163
#: ./docs/9.x/eloquent.md:183
#: ./docs/10.x/eloquent.md:184
#: ./docs/11.x/eloquent.md:185
#: ./docs/master/eloquent.md:185
msgctxt "P"
msgid "If your model's primary key is not an integer, you should define a protected `$keyType` property on your model. This property should have a value of `string`:"
msgstr ""

#: ./docs/8.x/eloquent.md:165
#: ./docs/9.x/eloquent.md:185
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The data type of the auto-incrementing ID.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $keyType = 'string';\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:177
#: ./docs/9.x/eloquent.md:197
#: ./docs/10.x/eloquent.md:198
#: ./docs/11.x/eloquent.md:199
#: ./docs/master/eloquent.md:199
#~ msgctxt "P"
#~ msgid "<a name=\"composite-primary-keys\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:178
#: ./docs/9.x/eloquent.md:198
#: ./docs/10.x/eloquent.md:199
#: ./docs/11.x/eloquent.md:200
#: ./docs/master/eloquent.md:200
msgctxt "H4"
msgid "\"Composite\" Primary Keys"
msgstr ""

#: ./docs/8.x/eloquent.md:180
#: ./docs/9.x/eloquent.md:200
#: ./docs/10.x/eloquent.md:201
#: ./docs/11.x/eloquent.md:202
#: ./docs/master/eloquent.md:202
msgctxt "P"
msgid "Eloquent requires each model to have at least one uniquely identifying \"ID\" that can serve as its primary key. \"Composite\" primary keys are not supported by Eloquent models. However, you are free to add additional multi-column, unique indexes to your database tables in addition to the table's uniquely identifying primary key."
msgstr ""

#: ./docs/8.x/eloquent.md:182
#: ./docs/9.x/eloquent.md:265
#: ./docs/10.x/eloquent.md:264
#: ./docs/11.x/eloquent.md:265
#: ./docs/master/eloquent.md:265
#~ msgctxt "P"
#~ msgid "<a name=\"timestamps\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:183
#: ./docs/9.x/eloquent.md:266
#: ./docs/10.x/eloquent.md:265
#: ./docs/11.x/eloquent.md:266
#: ./docs/master/eloquent.md:266
msgctxt "H3"
msgid "Timestamps"
msgstr ""

#: ./docs/8.x/eloquent.md:185
#: ./docs/9.x/eloquent.md:268
#: ./docs/10.x/eloquent.md:267
#: ./docs/11.x/eloquent.md:268
#: ./docs/master/eloquent.md:268
msgctxt "P"
msgid "By default, Eloquent expects `created_at` and `updated_at` columns to exist on your model's corresponding database table.  Eloquent will automatically set these column's values when models are created or updated. If you do not want these columns to be automatically managed by Eloquent, you should define a `$timestamps` property on your model with a value of `false`:"
msgstr ""

#: ./docs/10.x/eloquent.md:186
#: ./docs/11.x/eloquent.md:187
#: ./docs/master/eloquent.md:187
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The data type of the primary key ID.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $keyType = 'string';\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:187
#: ./docs/9.x/eloquent.md:270
#: ./docs/10.x/eloquent.md:269
#: ./docs/11.x/eloquent.md:270
#: ./docs/master/eloquent.md:270
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * Indicates if the model should be timestamped.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $timestamps = false;\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:202
#: ./docs/10.x/eloquent.md:203
#: ./docs/11.x/eloquent.md:204
#: ./docs/master/eloquent.md:204
#~ msgctxt "P"
#~ msgid "<a name=\"uuid-and-ulid-keys\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:203
#: ./docs/9.x/eloquent.md:286
#: ./docs/10.x/eloquent.md:285
#: ./docs/11.x/eloquent.md:286
#: ./docs/master/eloquent.md:286
msgctxt "P"
msgid "If you need to customize the format of your model's timestamps, set the `$dateFormat` property on your model. This property determines how date attributes are stored in the database as well as their format when the model is serialized to an array or JSON:"
msgstr ""

#: ./docs/9.x/eloquent.md:203
msgctxt "H3"
msgid "UUID & ULID Keys"
msgstr ""

#: ./docs/10.x/eloquent.md:204
#: ./docs/11.x/eloquent.md:205
#: ./docs/master/eloquent.md:205
msgctxt "H3"
msgid "UUID and ULID Keys"
msgstr ""

#: ./docs/8.x/eloquent.md:205
#: ./docs/9.x/eloquent.md:288
#: ./docs/10.x/eloquent.md:287
#: ./docs/11.x/eloquent.md:288
#: ./docs/master/eloquent.md:288
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The storage format of the model's date columns.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $dateFormat = 'U';\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:205
#: ./docs/10.x/eloquent.md:206
#: ./docs/11.x/eloquent.md:207
#: ./docs/master/eloquent.md:207
msgctxt "P"
msgid "Instead of using auto-incrementing integers as your Eloquent model's primary keys, you may choose to use UUIDs instead. UUIDs are universally unique alpha-numeric identifiers that are 36 characters long."
msgstr ""

#: ./docs/9.x/eloquent.md:207
#: ./docs/10.x/eloquent.md:208
#: ./docs/11.x/eloquent.md:209
#: ./docs/master/eloquent.md:209
msgctxt "P"
msgid "If you would like a model to use a UUID key instead of an auto-incrementing integer key, you may use the `Illuminate\\Database\\Eloquent\\Concerns\\HasUuids` trait on the model. Of course, you should ensure that the model has a [UUID equivalent primary key column](/docs/{{version}}/migrations#column-method-uuid):"
msgstr ""

#: ./docs/9.x/eloquent.md:209
#: ./docs/10.x/eloquent.md:210
#: ./docs/11.x/eloquent.md:211
#: ./docs/master/eloquent.md:211
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Eloquent\\Concerns\\HasUuids;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Article extends Model\n"
"{\n"
"    use HasUuids;\n"
"\n"
"    // ...\n"
"}\n"
"\n"
"$article = Article::create(['title' => 'Traveling to Europe']);\n"
"\n"
"$article->id; // \"8f8e8478-9035-4d23-b9a7-62f4d2612ce5\""
msgstr ""

#: ./docs/8.x/eloquent.md:221
#: ./docs/9.x/eloquent.md:304
#: ./docs/10.x/eloquent.md:303
#: ./docs/11.x/eloquent.md:304
#: ./docs/master/eloquent.md:304
msgctxt "P"
msgid "If you need to customize the names of the columns used to store the timestamps, you may define `CREATED_AT` and `UPDATED_AT` constants on your model:"
msgstr ""

#: ./docs/8.x/eloquent.md:223
#: ./docs/9.x/eloquent.md:306
#: ./docs/10.x/eloquent.md:305
#: ./docs/11.x/eloquent.md:306
#: ./docs/master/eloquent.md:306
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    const CREATED_AT = 'creation_date';\n"
"    const UPDATED_AT = 'updated_date';\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:223
msgctxt "P"
msgid "By default, The `HasUuids` trait will generate [\"ordered\" UUIDs](/docs/{{version}}/helpers#method-str-ordered-uuid) for your models. These UUIDs are more efficient for indexed database storage because they can be sorted lexicographically."
msgstr ""

#: ./docs/10.x/eloquent.md:224
#: ./docs/11.x/eloquent.md:225
#: ./docs/master/eloquent.md:225
msgctxt "P"
msgid "By default, The `HasUuids` trait will generate [\"ordered\" UUIDs](/docs/{{version}}/strings#method-str-ordered-uuid) for your models. These UUIDs are more efficient for indexed database storage because they can be sorted lexicographically."
msgstr ""

#: ./docs/9.x/eloquent.md:225
#: ./docs/10.x/eloquent.md:226
#: ./docs/11.x/eloquent.md:227
#: ./docs/master/eloquent.md:227
msgctxt "P"
msgid "You can override the UUID generation process for a given model by defining a `newUniqueId` method on the model. In addition, you may specify which columns should receive UUIDs by defining a `uniqueIds` method on the model:"
msgstr ""

#: ./docs/9.x/eloquent.md:227
msgctxt "CODE"
msgid ""
"use Ramsey\\Uuid\\Uuid;\n"
"\n"
"/**\n"
" * Generate a new UUID for the model.\n"
" *\n"
" * @return string\n"
" */\n"
"public function newUniqueId()\n"
"{\n"
"    return (string) Uuid::uuid4();\n"
"}\n"
"\n"
"/**\n"
" * Get the columns that should receive a unique identifier.\n"
" *\n"
" * @return array\n"
" */\n"
"public function uniqueIds()\n"
"{\n"
"    return ['id', 'discount_code'];\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:228
#: ./docs/11.x/eloquent.md:229
#: ./docs/master/eloquent.md:229
msgctxt "CODE"
msgid ""
"use Ramsey\\Uuid\\Uuid;\n"
"\n"
"/**\n"
" * Generate a new UUID for the model.\n"
" */\n"
"public function newUniqueId(): string\n"
"{\n"
"    return (string) Uuid::uuid4();\n"
"}\n"
"\n"
"/**\n"
" * Get the columns that should receive a unique identifier.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"public function uniqueIds(): array\n"
"{\n"
"    return ['id', 'discount_code'];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:231
#: ./docs/9.x/eloquent.md:318
#: ./docs/10.x/eloquent.md:317
#: ./docs/11.x/eloquent.md:318
#: ./docs/master/eloquent.md:318
#~ msgctxt "P"
#~ msgid "<a name=\"database-connections\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:232
#: ./docs/9.x/eloquent.md:319
#: ./docs/10.x/eloquent.md:318
#: ./docs/11.x/eloquent.md:319
#: ./docs/master/eloquent.md:319
msgctxt "H3"
msgid "Database Connections"
msgstr ""

#: ./docs/8.x/eloquent.md:234
#: ./docs/9.x/eloquent.md:321
#: ./docs/10.x/eloquent.md:320
#: ./docs/11.x/eloquent.md:321
#: ./docs/master/eloquent.md:321
msgctxt "P"
msgid "By default, all Eloquent models will use the default database connection that is configured for your application. If you would like to specify a different connection that should be used when interacting with a particular model, you should define a `$connection` property on the model:"
msgstr ""

#: ./docs/8.x/eloquent.md:236
#: ./docs/9.x/eloquent.md:323
#: ./docs/10.x/eloquent.md:322
#: ./docs/master/eloquent.md:323
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The database connection that should be used by the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'sqlite';\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:249
#: ./docs/10.x/eloquent.md:248
#: ./docs/11.x/eloquent.md:249
#: ./docs/master/eloquent.md:249
msgctxt "P"
msgid "If you wish, you may choose to utilize \"ULIDs\" instead of UUIDs. ULIDs are similar to UUIDs; however, they are only 26 characters in length. Like ordered UUIDs, ULIDs are lexicographically sortable for efficient database indexing. To utilize ULIDs, you should use the `Illuminate\\Database\\Eloquent\\Concerns\\HasUlids` trait on your model. You should also ensure that the model has a [ULID equivalent primary key column](/docs/{{version}}/migrations#column-method-ulid):"
msgstr ""

#: ./docs/9.x/eloquent.md:251
#: ./docs/10.x/eloquent.md:250
#: ./docs/11.x/eloquent.md:251
#: ./docs/master/eloquent.md:251
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Eloquent\\Concerns\\HasUlids;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Article extends Model\n"
"{\n"
"    use HasUlids;\n"
"\n"
"    // ...\n"
"}\n"
"\n"
"$article = Article::create(['title' => 'Traveling to Asia']);\n"
"\n"
"$article->id; // \"01gd4d3tgrrfqeda94gdbtdk5c\""
msgstr ""

#: ./docs/8.x/eloquent.md:252
#: ./docs/9.x/eloquent.md:339
#: ./docs/10.x/eloquent.md:338
#: ./docs/11.x/eloquent.md:339
#: ./docs/master/eloquent.md:339
#~ msgctxt "P"
#~ msgid "<a name=\"default-attribute-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:253
#: ./docs/9.x/eloquent.md:340
#: ./docs/10.x/eloquent.md:339
#: ./docs/11.x/eloquent.md:340
#: ./docs/master/eloquent.md:340
msgctxt "H3"
msgid "Default Attribute Values"
msgstr ""

#: ./docs/8.x/eloquent.md:255
msgctxt "P"
msgid "By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an `$attributes` property on your model:"
msgstr ""

#: ./docs/8.x/eloquent.md:257
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The model's default values for attributes.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $attributes = [\n"
"        'delayed' => false,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:275
#: ./docs/9.x/eloquent.md:405
#: ./docs/10.x/eloquent.md:387
#: ./docs/11.x/eloquent.md:388
#: ./docs/master/eloquent.md:388
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:276
#: ./docs/9.x/eloquent.md:406
#: ./docs/10.x/eloquent.md:388
#: ./docs/11.x/eloquent.md:389
#: ./docs/master/eloquent.md:389
msgctxt "H2"
msgid "Retrieving Models"
msgstr ""

#: ./docs/8.x/eloquent.md:278
#: ./docs/9.x/eloquent.md:408
#: ./docs/10.x/eloquent.md:390
#: ./docs/master/eloquent.md:391
msgctxt "P"
msgid "Once you have created a model and [its associated database table](/docs/{{version}}/migrations#writing-migrations), you are ready to start retrieving data from your database. You can think of each Eloquent model as a powerful [query builder](/docs/{{version}}/queries) allowing you to fluently query the database table associated with the model. The model's `all` method will retrieve all of the records from the model's associated database table:"
msgstr ""

#: ./docs/8.x/eloquent.md:280
#: ./docs/9.x/eloquent.md:410
#: ./docs/10.x/eloquent.md:392
#: ./docs/11.x/eloquent.md:393
#: ./docs/master/eloquent.md:393
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"foreach (Flight::all() as $flight) {\n"
"    echo $flight->name;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:286
#: ./docs/9.x/eloquent.md:416
#: ./docs/10.x/eloquent.md:398
#: ./docs/11.x/eloquent.md:399
#: ./docs/master/eloquent.md:399
#~ msgctxt "P"
#~ msgid "<a name=\"building-queries\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:287
#: ./docs/9.x/eloquent.md:417
#: ./docs/10.x/eloquent.md:399
#: ./docs/11.x/eloquent.md:400
#: ./docs/master/eloquent.md:400
msgctxt "H4"
msgid "Building Queries"
msgstr ""

#: ./docs/8.x/eloquent.md:289
#: ./docs/9.x/eloquent.md:419
#: ./docs/10.x/eloquent.md:401
#: ./docs/11.x/eloquent.md:402
#: ./docs/master/eloquent.md:402
msgctxt "P"
msgid "The Eloquent `all` method will return all of the results in the model's table. However, since each Eloquent model serves as a [query builder](/docs/{{version}}/queries), you may add additional constraints to queries and then invoke the `get` method to retrieve the results:"
msgstr ""

#: ./docs/8.x/eloquent.md:291
#: ./docs/9.x/eloquent.md:421
#: ./docs/10.x/eloquent.md:403
#: ./docs/11.x/eloquent.md:404
#: ./docs/master/eloquent.md:404
msgctxt "CODE"
msgid ""
"$flights = Flight::where('active', 1)\n"
"               ->orderBy('name')\n"
"               ->take(10)\n"
"               ->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:296
#: ./docs/9.x/eloquent.md:427
#: ./docs/10.x/eloquent.md:409
#: ./docs/11.x/eloquent.md:410
#: ./docs/master/eloquent.md:410
msgctxt "P"
msgid "Since Eloquent models are query builders, you should review all of the methods provided by Laravel's [query builder](/docs/{{version}}/queries). You may use any of these methods when writing your Eloquent queries."
msgstr ""

#: ./docs/8.x/eloquent.md:298
#: ./docs/9.x/eloquent.md:429
#: ./docs/10.x/eloquent.md:411
#: ./docs/11.x/eloquent.md:412
#: ./docs/master/eloquent.md:412
#~ msgctxt "P"
#~ msgid "<a name=\"refreshing-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:299
#: ./docs/9.x/eloquent.md:430
#: ./docs/10.x/eloquent.md:412
#: ./docs/11.x/eloquent.md:413
#: ./docs/master/eloquent.md:413
msgctxt "H4"
msgid "Refreshing Models"
msgstr ""

#: ./docs/8.x/eloquent.md:301
#: ./docs/9.x/eloquent.md:432
#: ./docs/10.x/eloquent.md:414
#: ./docs/11.x/eloquent.md:415
#: ./docs/master/eloquent.md:415
msgctxt "P"
msgid "If you already have an instance of an Eloquent model that was retrieved from the database, you can \"refresh\" the model using the `fresh` and `refresh` methods. The `fresh` method will re-retrieve the model from the database. The existing model instance will not be affected:"
msgstr ""

#: ./docs/8.x/eloquent.md:303
#: ./docs/9.x/eloquent.md:434
#: ./docs/10.x/eloquent.md:416
#: ./docs/11.x/eloquent.md:417
#: ./docs/master/eloquent.md:417
msgctxt "CODE"
msgid ""
"$flight = Flight::where('number', 'FR 900')->first();\n"
"\n"
"$freshFlight = $flight->fresh();"
msgstr ""

#: ./docs/8.x/eloquent.md:307
#: ./docs/9.x/eloquent.md:438
#: ./docs/10.x/eloquent.md:420
#: ./docs/11.x/eloquent.md:421
#: ./docs/master/eloquent.md:421
msgctxt "P"
msgid "The `refresh` method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:"
msgstr ""

#: ./docs/8.x/eloquent.md:309
#: ./docs/9.x/eloquent.md:440
#: ./docs/10.x/eloquent.md:422
#: ./docs/11.x/eloquent.md:423
#: ./docs/master/eloquent.md:423
msgctxt "CODE"
msgid ""
"$flight = Flight::where('number', 'FR 900')->first();\n"
"\n"
"$flight->number = 'FR 456';\n"
"\n"
"$flight->refresh();\n"
"\n"
"$flight->number; // \"FR 900\""
msgstr ""

#: ./docs/9.x/eloquent.md:314
#: ./docs/10.x/eloquent.md:313
#: ./docs/11.x/eloquent.md:314
#: ./docs/master/eloquent.md:314
msgctxt "P"
msgid "If you would like to perform model operations without the model having its `updated_at` timestamp modified, you may operate on the model within a closure given to the `withoutTimestamps` method:"
msgstr ""

#: ./docs/11.x/eloquent.md:316
msgctxt "CODE"
msgid "Model::withoutTimestamps(fn () => $post->increment('reads'));"
msgstr ""

#: ./docs/9.x/eloquent.md:316
#: ./docs/10.x/eloquent.md:315
#: ./docs/master/eloquent.md:316
msgctxt "CODE"
msgid "Model::withoutTimestamps(fn () => $post->increment(['reads']));"
msgstr ""

#: ./docs/8.x/eloquent.md:317
#: ./docs/9.x/eloquent.md:448
#: ./docs/10.x/eloquent.md:430
#: ./docs/11.x/eloquent.md:431
#: ./docs/master/eloquent.md:431
#~ msgctxt "P"
#~ msgid "<a name=\"collections\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:318
#: ./docs/9.x/eloquent.md:449
#: ./docs/10.x/eloquent.md:431
#: ./docs/11.x/eloquent.md:432
#: ./docs/master/eloquent.md:432
msgctxt "H3"
msgid "Collections"
msgstr ""

#: ./docs/8.x/eloquent.md:320
#: ./docs/9.x/eloquent.md:451
#: ./docs/10.x/eloquent.md:433
#: ./docs/11.x/eloquent.md:434
#: ./docs/master/eloquent.md:434
msgctxt "P"
msgid "As we have seen, Eloquent methods like `all` and `get` retrieve multiple records from the database. However, these methods don't return a plain PHP array. Instead, an instance of `Illuminate\\Database\\Eloquent\\Collection` is returned."
msgstr ""

#: ./docs/8.x/eloquent.md:322
#: ./docs/9.x/eloquent.md:453
#: ./docs/10.x/eloquent.md:435
#: ./docs/11.x/eloquent.md:436
#: ./docs/master/eloquent.md:436
msgctxt "P"
msgid "The Eloquent `Collection` class extends Laravel's base `Illuminate\\Support\\Collection` class, which provides a [variety of helpful methods](/docs/{{version}}/collections#available-methods) for interacting with data collections. For example, the `reject` method may be used to remove models from a collection based on the results of an invoked closure:"
msgstr ""

#: ./docs/11.x/eloquent.md:323
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The database connection that should be used by the model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'mysql';\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:324
#: ./docs/9.x/eloquent.md:455
msgctxt "CODE: php"
msgid ""
"$flights = Flight::where('destination', 'Paris')->get();\n"
"\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:332
#: ./docs/9.x/eloquent.md:463
#: ./docs/10.x/eloquent.md:445
#: ./docs/11.x/eloquent.md:446
#: ./docs/master/eloquent.md:446
msgctxt "P"
msgid "In addition to the methods provided by Laravel's base collection class, the Eloquent collection class provides [a few extra methods](/docs/{{version}}/eloquent-collections#available-methods) that are specifically intended for interacting with collections of Eloquent models."
msgstr ""

#: ./docs/8.x/eloquent.md:334
#: ./docs/9.x/eloquent.md:465
#: ./docs/10.x/eloquent.md:447
#: ./docs/11.x/eloquent.md:448
#: ./docs/master/eloquent.md:448
msgctxt "P"
msgid "Since all of Laravel's collections implement PHP's iterable interfaces, you may loop over collections as if they were an array:"
msgstr ""

#: ./docs/8.x/eloquent.md:336
#: ./docs/9.x/eloquent.md:467
#: ./docs/10.x/eloquent.md:449
#: ./docs/11.x/eloquent.md:450
#: ./docs/master/eloquent.md:450
msgctxt "CODE: php"
msgid ""
"foreach ($flights as $flight) {\n"
"    echo $flight->name;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:342
#: ./docs/9.x/eloquent.md:473
#: ./docs/10.x/eloquent.md:455
#: ./docs/11.x/eloquent.md:456
#: ./docs/master/eloquent.md:456
#~ msgctxt "P"
#~ msgid "<a name=\"chunking-results\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:342
#: ./docs/10.x/eloquent.md:341
#: ./docs/11.x/eloquent.md:342
#: ./docs/master/eloquent.md:342
msgctxt "P"
msgid "By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an `$attributes` property on your model. Attribute values placed in the `$attributes` array should be in their raw, \"storable\" format as if they were just read from the database:"
msgstr ""

#: ./docs/8.x/eloquent.md:343
#: ./docs/9.x/eloquent.md:474
#: ./docs/10.x/eloquent.md:456
#: ./docs/11.x/eloquent.md:457
#: ./docs/master/eloquent.md:457
msgctxt "H3"
msgid "Chunking Results"
msgstr ""

#: ./docs/9.x/eloquent.md:344
#: ./docs/10.x/eloquent.md:343
#: ./docs/11.x/eloquent.md:344
#: ./docs/master/eloquent.md:344
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The model's default values for attributes.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $attributes = [\n"
"        'options' => '[]',\n"
"        'delayed' => false,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:345
#: ./docs/9.x/eloquent.md:476
#: ./docs/10.x/eloquent.md:458
#: ./docs/11.x/eloquent.md:459
#: ./docs/master/eloquent.md:459
msgctxt "P"
msgid "Your application may run out of memory if you attempt to load tens of thousands of Eloquent records via the `all` or `get` methods. Instead of using these methods, the `chunk` method may be used to process large numbers of models more efficiently."
msgstr ""

#: ./docs/8.x/eloquent.md:347
#: ./docs/9.x/eloquent.md:478
#: ./docs/10.x/eloquent.md:460
#: ./docs/11.x/eloquent.md:461
#: ./docs/master/eloquent.md:461
msgctxt "P"
msgid "The `chunk` method will retrieve a subset of Eloquent models, passing them to a closure for processing. Since only the current chunk of Eloquent models is retrieved at a time, the `chunk` method will provide significantly reduced memory usage when working with a large number of models:"
msgstr ""

#: ./docs/8.x/eloquent.md:349
#: ./docs/9.x/eloquent.md:480
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"Flight::chunk(200, function ($flights) {\n"
"    foreach ($flights as $flight) {\n"
"        //\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:359
#: ./docs/9.x/eloquent.md:490
#: ./docs/10.x/eloquent.md:473
#: ./docs/11.x/eloquent.md:474
#: ./docs/master/eloquent.md:474
msgctxt "P"
msgid "The first argument passed to the `chunk` method is the number of records you wish to receive per \"chunk\". The closure passed as the second argument will be invoked for each chunk that is retrieved from the database. A database query will be executed to retrieve each chunk of records passed to the closure."
msgstr ""

#: ./docs/8.x/eloquent.md:361
#: ./docs/9.x/eloquent.md:492
#: ./docs/10.x/eloquent.md:475
#: ./docs/11.x/eloquent.md:476
#: ./docs/master/eloquent.md:476
msgctxt "P"
msgid "If you are filtering the results of the `chunk` method based on a column that you will also be updating while iterating over the results, you should use the `chunkById` method. Using the `chunk` method in these scenarios could lead to unexpected and inconsistent results. Internally, the `chunkById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr ""

#: ./docs/8.x/eloquent.md:363
#: ./docs/9.x/eloquent.md:494
msgctxt "CODE: php"
msgid ""
"Flight::where('departed', true)\n"
"    ->chunkById(200, function ($flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, $column = 'id');"
msgstr ""

#: ./docs/9.x/eloquent.md:363
#: ./docs/10.x/eloquent.md:362
#: ./docs/11.x/eloquent.md:363
#: ./docs/master/eloquent.md:363
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-eloquent-strictness\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:364
#: ./docs/10.x/eloquent.md:363
#: ./docs/11.x/eloquent.md:364
#: ./docs/master/eloquent.md:364
msgctxt "H3"
msgid "Configuring Eloquent Strictness"
msgstr ""

#: ./docs/9.x/eloquent.md:366
#: ./docs/10.x/eloquent.md:365
#: ./docs/11.x/eloquent.md:366
#: ./docs/master/eloquent.md:366
msgctxt "P"
msgid "Laravel offers several methods that allow you to configure Eloquent's behavior and \"strictness\" in a variety of situations."
msgstr ""

#: ./docs/9.x/eloquent.md:368
#: ./docs/10.x/eloquent.md:367
#: ./docs/11.x/eloquent.md:368
#: ./docs/master/eloquent.md:368
msgctxt "P"
msgid "First, the `preventLazyLoading` method accepts an optional boolean argument that indicates if lazy loading should be prevented. For example, you may wish to only disable lazy loading in non-production environments so that your production environment will continue to function normally even if a lazy loaded relationship is accidentally present in production code. Typically, this method should be invoked in the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/10.x/eloquent.md:369
#: ./docs/11.x/eloquent.md:370
#: ./docs/master/eloquent.md:370
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Model::preventLazyLoading(! $this->app->isProduction());\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:370
#~ msgctxt "P"
#~ msgid "<a name=\"streaming-results-lazily\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:370
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Model::preventLazyLoading(! $this->app->isProduction());\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:371
msgctxt "H3"
msgid "Streaming Results Lazily"
msgstr ""

#: ./docs/8.x/eloquent.md:373
#: ./docs/9.x/eloquent.md:504
#: ./docs/10.x/eloquent.md:487
#: ./docs/11.x/eloquent.md:501
#: ./docs/master/eloquent.md:488
msgctxt "P"
msgid "The `lazy` method works similarly to [the `chunk` method](#chunking-results) in the sense that, behind the scenes, it executes the query in chunks. However, instead of passing each chunk directly into a callback as is, the `lazy` method returns a flattened [`LazyCollection`](/docs/{{version}}/collections#lazy-collections) of Eloquent models, which lets you interact with the results as a single stream:"
msgstr ""

#: ./docs/8.x/eloquent.md:375
#: ./docs/9.x/eloquent.md:506
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"foreach (Flight::lazy() as $flight) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:383
#: ./docs/9.x/eloquent.md:514
#: ./docs/10.x/eloquent.md:497
#: ./docs/11.x/eloquent.md:511
#: ./docs/master/eloquent.md:498
msgctxt "P"
msgid "If you are filtering the results of the `lazy` method based on a column that you will also be updating while iterating over the results, you should use the `lazyById` method. Internally, the `lazyById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr ""

#: ./docs/9.x/eloquent.md:384
#: ./docs/10.x/eloquent.md:381
#: ./docs/11.x/eloquent.md:382
#: ./docs/master/eloquent.md:382
msgctxt "P"
msgid "Also, you may instruct Laravel to throw an exception when attempting to fill an unfillable attribute by invoking the `preventSilentlyDiscardingAttributes` method. This can help prevent unexpected errors during local development when attempting to set an attribute that has not been added to the model's `fillable` array:"
msgstr ""

#: ./docs/8.x/eloquent.md:385
#: ./docs/9.x/eloquent.md:516
#: ./docs/10.x/eloquent.md:499
#: ./docs/master/eloquent.md:500
msgctxt "CODE: php"
msgid ""
"Flight::where('departed', true)\n"
"    ->lazyById(200, $column = 'id')\n"
"    ->each->update(['departed' => false]);"
msgstr ""

#: ./docs/9.x/eloquent.md:386
#: ./docs/10.x/eloquent.md:383
#: ./docs/11.x/eloquent.md:384
#: ./docs/master/eloquent.md:384
msgctxt "CODE: php"
msgid "Model::preventSilentlyDiscardingAttributes(! $this->app->isProduction());"
msgstr ""

#: ./docs/9.x/eloquent.md:390
msgctxt "P"
msgid "Finally, you may instruct Eloquent to throw an exception if you attempt to access an attribute on a model when that attribute was not actually retrieved from the database or when the attribute does not exist. For example, this may occur when you forget to add an attribute to the `select` clause of an Eloquent query:"
msgstr ""

#: ./docs/11.x/eloquent.md:391
msgctxt "P"
msgid "Once you have created a model and [its associated database table](/docs/{{version}}/migrations#generating-migrations), you are ready to start retrieving data from your database. You can think of each Eloquent model as a powerful [query builder](/docs/{{version}}/queries) allowing you to fluently query the database table associated with the model. The model's `all` method will retrieve all of the records from the model's associated database table:"
msgstr ""

#: ./docs/8.x/eloquent.md:391
#: ./docs/9.x/eloquent.md:522
#: ./docs/10.x/eloquent.md:505
#: ./docs/11.x/eloquent.md:519
#: ./docs/master/eloquent.md:506
msgctxt "P"
msgid "You may filter the results based on the descending order of the `id` using the `lazyByIdDesc` method."
msgstr ""

#: ./docs/9.x/eloquent.md:392
msgctxt "CODE: php"
msgid "Model::preventAccessingMissingAttributes(! $this->app->isProduction());"
msgstr ""

#: ./docs/8.x/eloquent.md:393
#: ./docs/9.x/eloquent.md:524
#: ./docs/10.x/eloquent.md:507
#: ./docs/11.x/eloquent.md:521
#: ./docs/master/eloquent.md:508
#~ msgctxt "P"
#~ msgid "<a name=\"cursors\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:394
#: ./docs/9.x/eloquent.md:525
#: ./docs/10.x/eloquent.md:508
#: ./docs/11.x/eloquent.md:522
#: ./docs/master/eloquent.md:509
msgctxt "H3"
msgid "Cursors"
msgstr ""

#: ./docs/8.x/eloquent.md:396
#: ./docs/9.x/eloquent.md:527
#: ./docs/10.x/eloquent.md:510
#: ./docs/11.x/eloquent.md:524
#: ./docs/master/eloquent.md:511
msgctxt "P"
msgid "Similar to the `lazy` method, the `cursor` method may be used to significantly reduce your application's memory consumption when iterating through tens of thousands of Eloquent model records."
msgstr ""

#: ./docs/9.x/eloquent.md:396
#~ msgctxt "P"
#~ msgid "<a name=\"enabling-eloquent-strict-mode\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:397
msgctxt "H4"
msgid "Enabling Eloquent \"Strict Mode\""
msgstr ""

#: ./docs/8.x/eloquent.md:398
#: ./docs/9.x/eloquent.md:529
#: ./docs/10.x/eloquent.md:512
#: ./docs/11.x/eloquent.md:526
#: ./docs/master/eloquent.md:513
msgctxt "P"
msgid "The `cursor` method will only execute a single database query; however, the individual Eloquent models will not be hydrated until they are actually iterated over. Therefore, only one Eloquent model is kept in memory at any given time while iterating over the cursor."
msgstr ""

#: ./docs/9.x/eloquent.md:399
msgctxt "P"
msgid "For convenience, you may enable all three of the methods discussed above by simply invoking the `shouldBeStrict` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:400
msgctxt "P"
msgid "Since the `cursor` method only ever holds a single Eloquent model in memory at a time, it cannot eager load relationships. If you need to eager load relationships, consider using [the `lazy` method](#streaming-results-lazily) instead."
msgstr ""

#: ./docs/9.x/eloquent.md:401
msgctxt "CODE: php"
msgid "Model::shouldBeStrict(! $this->app->isProduction());"
msgstr ""

#: ./docs/8.x/eloquent.md:402
#: ./docs/9.x/eloquent.md:534
#: ./docs/10.x/eloquent.md:517
#: ./docs/11.x/eloquent.md:531
#: ./docs/master/eloquent.md:518
msgctxt "P"
msgid "Internally, the `cursor` method uses PHP [generators](https://www.php.net/manual/en/language.generators.overview.php) to implement this functionality:"
msgstr ""

#: ./docs/8.x/eloquent.md:404
#: ./docs/9.x/eloquent.md:536
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:412
#: ./docs/9.x/eloquent.md:544
#: ./docs/10.x/eloquent.md:527
#: ./docs/11.x/eloquent.md:541
#: ./docs/master/eloquent.md:528
msgctxt "P"
msgid "The `cursor` returns an `Illuminate\\Support\\LazyCollection` instance. [Lazy collections](/docs/{{version}}/collections#lazy-collections) allow you to use many of the collection methods available on typical Laravel collections while only loading a single model into memory at a time:"
msgstr ""

#: ./docs/8.x/eloquent.md:414
#: ./docs/9.x/eloquent.md:546
msgctxt "CODE: php"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:426
msgctxt "P"
msgid "Although the `cursor` method uses far less memory than a regular query (by only holding a single Eloquent model in memory at a time), it will still eventually run out of memory. This is [due to PHP's PDO driver internally caching all raw query results in its buffer](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php). If you're dealing with a very large number of Eloquent records, consider using [the `lazy` method](#streaming-results-lazily) instead."
msgstr ""

#: ./docs/8.x/eloquent.md:428
#: ./docs/9.x/eloquent.md:560
#: ./docs/10.x/eloquent.md:543
#: ./docs/11.x/eloquent.md:557
#: ./docs/master/eloquent.md:544
#~ msgctxt "P"
#~ msgid "<a name=\"advanced-subqueries\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:429
#: ./docs/9.x/eloquent.md:561
#: ./docs/10.x/eloquent.md:544
#: ./docs/11.x/eloquent.md:558
#: ./docs/master/eloquent.md:545
msgctxt "H3"
msgid "Advanced Subqueries"
msgstr ""

#: ./docs/8.x/eloquent.md:431
#: ./docs/9.x/eloquent.md:563
#: ./docs/10.x/eloquent.md:546
#: ./docs/11.x/eloquent.md:560
#: ./docs/master/eloquent.md:547
#~ msgctxt "P"
#~ msgid "<a name=\"subquery-selects\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:432
#: ./docs/9.x/eloquent.md:564
#: ./docs/10.x/eloquent.md:547
#: ./docs/11.x/eloquent.md:561
#: ./docs/master/eloquent.md:548
msgctxt "H4"
msgid "Subquery Selects"
msgstr ""

#: ./docs/8.x/eloquent.md:434
#: ./docs/9.x/eloquent.md:566
#: ./docs/10.x/eloquent.md:549
#: ./docs/11.x/eloquent.md:563
#: ./docs/master/eloquent.md:550
msgctxt "P"
msgid "Eloquent also offers advanced subquery support, which allows you to pull information from related tables in a single query. For example, let's imagine that we have a table of flight `destinations` and a table of `flights` to destinations. The `flights` table contains an `arrived_at` column which indicates when the flight arrived at the destination."
msgstr ""

#: ./docs/8.x/eloquent.md:436
#: ./docs/9.x/eloquent.md:568
#: ./docs/10.x/eloquent.md:551
#: ./docs/11.x/eloquent.md:565
#: ./docs/master/eloquent.md:552
msgctxt "P"
msgid "Using the subquery functionality available to the query builder's `select` and `addSelect` methods, we can select all of the `destinations` and the name of the flight that most recently arrived at that destination using a single query:"
msgstr ""

#: ./docs/10.x/eloquent.md:437
#: ./docs/11.x/eloquent.md:438
#: ./docs/master/eloquent.md:438
msgctxt "CODE: php"
msgid ""
"$flights = Flight::where('destination', 'Paris')->get();\n"
"\n"
"$flights = $flights->reject(function (Flight $flight) {\n"
"    return $flight->cancelled;\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:438
#: ./docs/9.x/eloquent.md:570
#: ./docs/10.x/eloquent.md:553
#: ./docs/11.x/eloquent.md:567
#: ./docs/master/eloquent.md:554
msgctxt "CODE"
msgid ""
"use App\\Models\\Destination;\n"
"use App\\Models\\Flight;\n"
"\n"
"return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"    ->whereColumn('destination_id', 'destinations.id')\n"
"    ->orderByDesc('arrived_at')\n"
"    ->limit(1)\n"
"])->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:447
#: ./docs/9.x/eloquent.md:579
#: ./docs/10.x/eloquent.md:562
#: ./docs/11.x/eloquent.md:576
#: ./docs/master/eloquent.md:563
#~ msgctxt "P"
#~ msgid "<a name=\"subquery-ordering\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:448
#: ./docs/9.x/eloquent.md:580
#: ./docs/10.x/eloquent.md:563
#: ./docs/11.x/eloquent.md:577
#: ./docs/master/eloquent.md:564
msgctxt "H4"
msgid "Subquery Ordering"
msgstr ""

#: ./docs/8.x/eloquent.md:450
#: ./docs/9.x/eloquent.md:582
#: ./docs/10.x/eloquent.md:565
#: ./docs/11.x/eloquent.md:579
#: ./docs/master/eloquent.md:566
msgctxt "P"
msgid "In addition, the query builder's `orderBy` function supports subqueries. Continuing to use our flight example, we may use this functionality to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single database query:"
msgstr ""

#: ./docs/8.x/eloquent.md:452
#: ./docs/9.x/eloquent.md:584
#: ./docs/10.x/eloquent.md:567
#: ./docs/11.x/eloquent.md:581
#: ./docs/master/eloquent.md:568
msgctxt "CODE"
msgid ""
"return Destination::orderByDesc(\n"
"    Flight::select('arrived_at')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
")->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:459
#: ./docs/9.x/eloquent.md:591
#: ./docs/10.x/eloquent.md:574
#: ./docs/11.x/eloquent.md:588
#: ./docs/master/eloquent.md:575
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-single-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:460
#: ./docs/9.x/eloquent.md:592
#: ./docs/10.x/eloquent.md:575
#: ./docs/11.x/eloquent.md:589
#: ./docs/master/eloquent.md:576
msgctxt "H2"
msgid "Retrieving Single Models / Aggregates"
msgstr ""

#: ./docs/10.x/eloquent.md:462
#: ./docs/11.x/eloquent.md:463
#: ./docs/master/eloquent.md:463
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Flight;\n"
"use Illuminate\\Database\\Eloquent\\Collection;\n"
"\n"
"Flight::chunk(200, function (Collection $flights) {\n"
"    foreach ($flights as $flight) {\n"
"        // ...\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:462
#: ./docs/9.x/eloquent.md:594
#: ./docs/10.x/eloquent.md:577
#: ./docs/11.x/eloquent.md:591
#: ./docs/master/eloquent.md:578
msgctxt "P"
msgid "In addition to retrieving all of the records matching a given query, you may also retrieve single records using the `find`, `first`, or `firstWhere` methods. Instead of returning a collection of models, these methods return a single model instance:"
msgstr ""

#: ./docs/8.x/eloquent.md:464
#: ./docs/9.x/eloquent.md:596
#: ./docs/10.x/eloquent.md:579
#: ./docs/11.x/eloquent.md:593
#: ./docs/master/eloquent.md:580
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"// Retrieve a model by its primary key...\n"
"$flight = Flight::find(1);\n"
"\n"
"// Retrieve the first model matching the query constraints...\n"
"$flight = Flight::where('active', 1)->first();\n"
"\n"
"// Alternative to retrieving the first model matching the query constraints...\n"
"$flight = Flight::firstWhere('active', 1);"
msgstr ""

#: ./docs/8.x/eloquent.md:475
msgctxt "P"
msgid "Sometimes you may wish to retrieve the first result of a query or perform some other action if no results are found. The `firstOr` method will return the first result matching the query or, if no results are found, execute the given closure. The value returned by the closure will be considered the result of the `firstOr` method:"
msgstr ""

#: ./docs/10.x/eloquent.md:477
#: ./docs/master/eloquent.md:478
msgctxt "CODE: php"
msgid ""
"Flight::where('departed', true)\n"
"    ->chunkById(200, function (Collection $flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, $column = 'id');"
msgstr ""

#: ./docs/8.x/eloquent.md:477
msgctxt "CODE"
msgid ""
"$model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/11.x/eloquent.md:478
msgctxt "CODE: php"
msgid ""
"Flight::where('departed', true)\n"
"    ->chunkById(200, function (Collection $flights) {\n"
"        $flights->each->update(['departed' => false]);\n"
"    }, column: 'id');"
msgstr ""

#: ./docs/8.x/eloquent.md:481
#: ./docs/9.x/eloquent.md:617
#: ./docs/10.x/eloquent.md:600
#: ./docs/11.x/eloquent.md:614
#: ./docs/master/eloquent.md:601
#~ msgctxt "P"
#~ msgid "<a name=\"not-found-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:482
#: ./docs/9.x/eloquent.md:618
#: ./docs/10.x/eloquent.md:601
#: ./docs/11.x/eloquent.md:615
#: ./docs/master/eloquent.md:602
msgctxt "H4"
msgid "Not Found Exceptions"
msgstr ""

#: ./docs/8.x/eloquent.md:484
#: ./docs/9.x/eloquent.md:620
#: ./docs/10.x/eloquent.md:603
#: ./docs/11.x/eloquent.md:617
#: ./docs/master/eloquent.md:604
msgctxt "P"
msgid "Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The `findOrFail` and `firstOrFail` methods will retrieve the first result of the query; however, if no result is found, an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` will be thrown:"
msgstr ""

#: ./docs/11.x/eloquent.md:485
msgctxt "P"
msgid "Since the `chunkById` and `lazyById` methods add their own \"where\" conditions to the query being executed, you should typically [logically group](/docs/{{version}}/queries#logical-grouping) your own conditions within a closure:"
msgstr ""

#: ./docs/8.x/eloquent.md:486
#: ./docs/9.x/eloquent.md:622
#: ./docs/10.x/eloquent.md:605
#: ./docs/11.x/eloquent.md:619
#: ./docs/master/eloquent.md:606
msgctxt "CODE"
msgid ""
"$flight = Flight::findOrFail(1);\n"
"\n"
"$flight = Flight::where('legs', '>', 3)->firstOrFail();"
msgstr ""

#: ./docs/11.x/eloquent.md:487
msgctxt "CODE: php"
msgid ""
"Flight::where(function ($query) {\n"
"    $query->where('delayed', true)->orWhere('cancelled', true);\n"
"})->chunkById(200, function (Collection $flights) {\n"
"    $flights->each->update([\n"
"        'departed' => false,\n"
"        'cancelled' => true\n"
"    ]);\n"
"}, column: 'id');"
msgstr ""

#: ./docs/10.x/eloquent.md:489
#: ./docs/11.x/eloquent.md:503
#: ./docs/master/eloquent.md:490
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"foreach (Flight::lazy() as $flight) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:490
#: ./docs/9.x/eloquent.md:626
#: ./docs/10.x/eloquent.md:609
#: ./docs/11.x/eloquent.md:623
#: ./docs/master/eloquent.md:610
msgctxt "P"
msgid "If the `ModelNotFoundException` is not caught, a 404 HTTP response is automatically sent back to the client:"
msgstr ""

#: ./docs/8.x/eloquent.md:492
#: ./docs/9.x/eloquent.md:628
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"Route::get('/api/flights/{id}', function ($id) {\n"
"    return Flight::findOrFail($id);\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:498
#: ./docs/9.x/eloquent.md:634
#: ./docs/10.x/eloquent.md:617
#: ./docs/11.x/eloquent.md:631
#: ./docs/master/eloquent.md:618
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-or-creating-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:499
#: ./docs/9.x/eloquent.md:635
msgctxt "H3"
msgid "Retrieving Or Creating Models"
msgstr ""

#: ./docs/8.x/eloquent.md:501
#: ./docs/9.x/eloquent.md:637
#: ./docs/10.x/eloquent.md:620
#: ./docs/master/eloquent.md:621
msgctxt "P"
msgid "The `firstOrCreate` method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the attributes resulting from merging the first array argument with the optional second array argument:"
msgstr ""

#: ./docs/9.x/eloquent.md:501
#: ./docs/10.x/eloquent.md:484
#: ./docs/11.x/eloquent.md:498
#: ./docs/master/eloquent.md:485
#~ msgctxt "P"
#~ msgid "<a name=\"chunking-using-lazy-collections\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:502
#: ./docs/10.x/eloquent.md:485
#: ./docs/11.x/eloquent.md:499
#: ./docs/master/eloquent.md:486
msgctxt "H3"
msgid "Chunking Using Lazy Collections"
msgstr ""

#: ./docs/8.x/eloquent.md:503
#: ./docs/9.x/eloquent.md:639
#: ./docs/10.x/eloquent.md:622
#: ./docs/11.x/eloquent.md:636
#: ./docs/master/eloquent.md:623
msgctxt "P"
msgid "The `firstOrNew` method, like `firstOrCreate`, will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by `firstOrNew` has not yet been persisted to the database. You will need to manually call the `save` method to persist it:"
msgstr ""

#: ./docs/8.x/eloquent.md:505
#: ./docs/9.x/eloquent.md:641
#: ./docs/10.x/eloquent.md:624
#: ./docs/11.x/eloquent.md:638
#: ./docs/master/eloquent.md:625
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"// Retrieve flight by name or create it if it doesn't exist...\n"
"$flight = Flight::firstOrCreate([\n"
"    'name' => 'London to Paris'\n"
"]);\n"
"\n"
"// Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\n"
"$flight = Flight::firstOrCreate(\n"
"    ['name' => 'London to Paris'],\n"
"    ['delayed' => 1, 'arrival_time' => '11:30']\n"
");\n"
"\n"
"// Retrieve flight by name or instantiate a new Flight instance...\n"
"$flight = Flight::firstOrNew([\n"
"    'name' => 'London to Paris'\n"
"]);\n"
"\n"
"// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n"
"$flight = Flight::firstOrNew(\n"
"    ['name' => 'Tokyo to Sydney'],\n"
"    ['delayed' => 1, 'arrival_time' => '11:30']\n"
");"
msgstr ""

#: ./docs/11.x/eloquent.md:513
msgctxt "CODE: php"
msgid ""
"Flight::where('departed', true)\n"
"    ->lazyById(200, column: 'id')\n"
"    ->each->update(['departed' => false]);"
msgstr ""

#: ./docs/10.x/eloquent.md:519
#: ./docs/11.x/eloquent.md:533
#: ./docs/master/eloquent.md:520
msgctxt "CODE: php"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:529
#: ./docs/11.x/eloquent.md:543
#: ./docs/master/eloquent.md:530
msgctxt "CODE: php"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::cursor()->filter(function (User $user) {\n"
"    return $user->id > 500;\n"
"});\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:529
#: ./docs/9.x/eloquent.md:665
#: ./docs/10.x/eloquent.md:648
#: ./docs/11.x/eloquent.md:662
#: ./docs/master/eloquent.md:649
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-aggregates\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:530
#: ./docs/9.x/eloquent.md:666
#: ./docs/10.x/eloquent.md:649
#: ./docs/11.x/eloquent.md:663
#: ./docs/master/eloquent.md:650
msgctxt "H3"
msgid "Retrieving Aggregates"
msgstr ""

#: ./docs/8.x/eloquent.md:532
#: ./docs/9.x/eloquent.md:668
#: ./docs/10.x/eloquent.md:651
#: ./docs/11.x/eloquent.md:665
#: ./docs/master/eloquent.md:652
msgctxt "P"
msgid "When interacting with Eloquent models, you may also use the `count`, `sum`, `max`, and other [aggregate methods](/docs/{{version}}/queries#aggregates) provided by the Laravel [query builder](/docs/{{version}}/queries). As you might expect, these methods return a scalar value instead of an Eloquent model instance:"
msgstr ""

#: ./docs/9.x/eloquent.md:532
#: ./docs/10.x/eloquent.md:515
#: ./docs/11.x/eloquent.md:529
#: ./docs/master/eloquent.md:516
msgctxt "P"
msgid "Since the `cursor` method only ever holds a single Eloquent model in memory at a time, it cannot eager load relationships. If you need to eager load relationships, consider using [the `lazy` method](#chunking-using-lazy-collections) instead."
msgstr ""

#: ./docs/8.x/eloquent.md:534
#: ./docs/9.x/eloquent.md:670
#: ./docs/10.x/eloquent.md:653
#: ./docs/11.x/eloquent.md:667
#: ./docs/master/eloquent.md:654
msgctxt "CODE"
msgid ""
"$count = Flight::where('active', 1)->count();\n"
"\n"
"$max = Flight::where('active', 1)->max('price');"
msgstr ""

#: ./docs/8.x/eloquent.md:538
#: ./docs/9.x/eloquent.md:674
#: ./docs/10.x/eloquent.md:657
#: ./docs/11.x/eloquent.md:671
#: ./docs/master/eloquent.md:658
#~ msgctxt "P"
#~ msgid "<a name=\"inserting-and-updating-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:539
#: ./docs/9.x/eloquent.md:675
msgctxt "H2"
msgid "Inserting & Updating Models"
msgstr ""

#: ./docs/8.x/eloquent.md:541
#: ./docs/9.x/eloquent.md:677
#: ./docs/10.x/eloquent.md:660
#: ./docs/11.x/eloquent.md:674
#: ./docs/master/eloquent.md:661
#~ msgctxt "P"
#~ msgid "<a name=\"inserts\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:542
#: ./docs/9.x/eloquent.md:678
#: ./docs/10.x/eloquent.md:661
#: ./docs/11.x/eloquent.md:675
#: ./docs/master/eloquent.md:662
msgctxt "H3"
msgid "Inserts"
msgstr ""

#: ./docs/8.x/eloquent.md:544
#: ./docs/9.x/eloquent.md:680
#: ./docs/10.x/eloquent.md:663
#: ./docs/11.x/eloquent.md:677
#: ./docs/master/eloquent.md:664
msgctxt "P"
msgid "Of course, when using Eloquent, we don't only need to retrieve models from the database. We also need to insert new records. Thankfully, Eloquent makes it simple. To insert a new record into the database, you should instantiate a new model instance and set attributes on the model. Then, call the `save` method on the model instance:"
msgstr ""

#: ./docs/8.x/eloquent.md:546
#: ./docs/9.x/eloquent.md:682
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Flight;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class FlightController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new flight in the database.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        // Validate the request...\n"
"\n"
"        $flight = new Flight;\n"
"\n"
"        $flight->name = $request->name;\n"
"\n"
"        $flight->save();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:558
#: ./docs/10.x/eloquent.md:541
#: ./docs/11.x/eloquent.md:555
#: ./docs/master/eloquent.md:542
msgctxt "P"
msgid "Although the `cursor` method uses far less memory than a regular query (by only holding a single Eloquent model in memory at a time), it will still eventually run out of memory. This is [due to PHP's PDO driver internally caching all raw query results in its buffer](https://www.php.net/manual/en/mysqlinfo.concepts.buffering.php). If you're dealing with a very large number of Eloquent records, consider using [the `lazy` method](#chunking-using-lazy-collections) instead."
msgstr ""

#: ./docs/8.x/eloquent.md:574
#: ./docs/9.x/eloquent.md:710
#: ./docs/10.x/eloquent.md:693
#: ./docs/11.x/eloquent.md:707
#: ./docs/master/eloquent.md:694
msgctxt "P"
msgid "In this example, we assign the `name` field from the incoming HTTP request to the `name` attribute of the `App\\Models\\Flight` model instance. When we call the `save` method, a record will be inserted into the database. The model's `created_at` and `updated_at` timestamps will automatically be set when the `save` method is called, so there is no need to set them manually."
msgstr ""

#: ./docs/8.x/eloquent.md:576
#: ./docs/9.x/eloquent.md:712
#: ./docs/10.x/eloquent.md:695
#: ./docs/11.x/eloquent.md:709
#: ./docs/master/eloquent.md:696
msgctxt "P"
msgid "Alternatively, you may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the `create` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:578
#: ./docs/8.x/eloquent.md:676
#: ./docs/9.x/eloquent.md:714
#: ./docs/9.x/eloquent.md:817
#: ./docs/10.x/eloquent.md:697
#: ./docs/10.x/eloquent.md:800
#: ./docs/11.x/eloquent.md:711
#: ./docs/11.x/eloquent.md:823
#: ./docs/master/eloquent.md:698
#: ./docs/master/eloquent.md:810
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"$flight = Flight::create([\n"
"    'name' => 'London to Paris',\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent.md:584
#: ./docs/9.x/eloquent.md:720
#: ./docs/10.x/eloquent.md:703
#: ./docs/11.x/eloquent.md:717
#: ./docs/master/eloquent.md:704
msgctxt "P"
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default. To learn more about mass assignment, please consult the [mass assignment documentation](#mass-assignment)."
msgstr ""

#: ./docs/8.x/eloquent.md:586
#: ./docs/9.x/eloquent.md:722
#: ./docs/10.x/eloquent.md:705
#: ./docs/11.x/eloquent.md:719
#: ./docs/master/eloquent.md:706
#~ msgctxt "P"
#~ msgid "<a name=\"updates\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:587
#: ./docs/9.x/eloquent.md:723
#: ./docs/10.x/eloquent.md:706
#: ./docs/11.x/eloquent.md:720
#: ./docs/master/eloquent.md:707
msgctxt "H3"
msgid "Updates"
msgstr ""

#: ./docs/8.x/eloquent.md:589
#: ./docs/9.x/eloquent.md:725
#: ./docs/10.x/eloquent.md:708
#: ./docs/11.x/eloquent.md:722
#: ./docs/master/eloquent.md:709
msgctxt "P"
msgid "The `save` method may also be used to update models that already exist in the database. To update a model, you should retrieve it and set any attributes you wish to update. Then, you should call the model's `save` method. Again, the `updated_at` timestamp will automatically be updated, so there is no need to manually set its value:"
msgstr ""

#: ./docs/8.x/eloquent.md:591
#: ./docs/9.x/eloquent.md:727
#: ./docs/10.x/eloquent.md:710
#: ./docs/11.x/eloquent.md:724
#: ./docs/master/eloquent.md:711
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"$flight = Flight::find(1);\n"
"\n"
"$flight->name = 'Paris to London';\n"
"\n"
"$flight->save();"
msgstr ""

#: ./docs/8.x/eloquent.md:599
#: ./docs/9.x/eloquent.md:735
#: ./docs/10.x/eloquent.md:718
#: ./docs/11.x/eloquent.md:741
#: ./docs/master/eloquent.md:728
#~ msgctxt "P"
#~ msgid "<a name=\"mass-updates\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:600
#: ./docs/9.x/eloquent.md:736
#: ./docs/10.x/eloquent.md:719
#: ./docs/11.x/eloquent.md:742
#: ./docs/master/eloquent.md:729
msgctxt "H4"
msgid "Mass Updates"
msgstr ""

#: ./docs/8.x/eloquent.md:602
#: ./docs/9.x/eloquent.md:738
#: ./docs/10.x/eloquent.md:721
#: ./docs/11.x/eloquent.md:744
#: ./docs/master/eloquent.md:731
msgctxt "P"
msgid "Updates can also be performed against models that match a given query. In this example, all flights that are `active` and have a `destination` of `San Diego` will be marked as delayed:"
msgstr ""

#: ./docs/8.x/eloquent.md:604
#: ./docs/9.x/eloquent.md:740
#: ./docs/10.x/eloquent.md:723
#: ./docs/11.x/eloquent.md:746
#: ./docs/master/eloquent.md:733
msgctxt "CODE"
msgid ""
"Flight::where('active', 1)\n"
"      ->where('destination', 'San Diego')\n"
"      ->update(['delayed' => 1]);"
msgstr ""

#: ./docs/9.x/eloquent.md:607
#: ./docs/10.x/eloquent.md:590
#: ./docs/11.x/eloquent.md:604
#: ./docs/master/eloquent.md:591
msgctxt "P"
msgid "Sometimes you may wish to perform some other action if no results are found. The `findOr` and `firstOr` methods will return a single model instance or, if no results are found, execute the given closure. The value returned by the closure will be considered the result of the method:"
msgstr ""

#: ./docs/8.x/eloquent.md:608
#: ./docs/9.x/eloquent.md:744
#: ./docs/10.x/eloquent.md:727
#: ./docs/11.x/eloquent.md:750
#: ./docs/master/eloquent.md:737
msgctxt "P"
msgid "The `update` method expects an array of column and value pairs representing the columns that should be updated. The `update` method returns the number of affected rows."
msgstr ""

#: ./docs/9.x/eloquent.md:609
#: ./docs/10.x/eloquent.md:592
#: ./docs/11.x/eloquent.md:606
#: ./docs/master/eloquent.md:593
msgctxt "CODE"
msgid ""
"$flight = Flight::findOr(1, function () {\n"
"    // ...\n"
"});\n"
"\n"
"$flight = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:610
#: ./docs/9.x/eloquent.md:747
#: ./docs/10.x/eloquent.md:730
#: ./docs/11.x/eloquent.md:753
#: ./docs/master/eloquent.md:740
msgctxt "P"
msgid "When issuing a mass update via Eloquent, the `saving`, `saved`, `updating`, and `updated` model events will not be fired for the updated models. This is because the models are never actually retrieved when issuing a mass update."
msgstr ""

#: ./docs/10.x/eloquent.md:611
#: ./docs/11.x/eloquent.md:625
#: ./docs/master/eloquent.md:612
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"Route::get('/api/flights/{id}', function (string $id) {\n"
"    return Flight::findOrFail($id);\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:612
#: ./docs/9.x/eloquent.md:749
#: ./docs/10.x/eloquent.md:732
#: ./docs/11.x/eloquent.md:755
#: ./docs/master/eloquent.md:742
#~ msgctxt "P"
#~ msgid "<a name=\"examining-attribute-changes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:613
#: ./docs/9.x/eloquent.md:750
#: ./docs/10.x/eloquent.md:733
#: ./docs/11.x/eloquent.md:756
#: ./docs/master/eloquent.md:743
msgctxt "H4"
msgid "Examining Attribute Changes"
msgstr ""

#: ./docs/8.x/eloquent.md:615
#: ./docs/9.x/eloquent.md:752
#: ./docs/10.x/eloquent.md:735
#: ./docs/11.x/eloquent.md:758
#: ./docs/master/eloquent.md:745
msgctxt "P"
msgid "Eloquent provides the `isDirty`, `isClean`, and `wasChanged` methods to examine the internal state of your model and determine how its attributes have changed from when the model was originally retrieved."
msgstr ""

#: ./docs/8.x/eloquent.md:617
msgctxt "P"
msgid "The `isDirty` method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name to the `isDirty` method to determine if a particular attribute is dirty. The `isClean` will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"
msgstr ""

#: ./docs/10.x/eloquent.md:618
#: ./docs/11.x/eloquent.md:632
#: ./docs/master/eloquent.md:619
msgctxt "H3"
msgid "Retrieving or Creating Models"
msgstr ""

#: ./docs/8.x/eloquent.md:619
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n"
"\n"
"$user->title = 'Painter';\n"
"\n"
"$user->isDirty(); // true\n"
"$user->isDirty('title'); // true\n"
"$user->isDirty('first_name'); // false\n"
"\n"
"$user->isClean(); // false\n"
"$user->isClean('title'); // false\n"
"$user->isClean('first_name'); // true\n"
"\n"
"$user->save();\n"
"\n"
"$user->isDirty(); // false\n"
"$user->isClean(); // true"
msgstr ""

#: ./docs/11.x/eloquent.md:634
msgctxt "P"
msgid "The `firstOrCreate` method will attempt to locate a database record using the given column / value pairs. If the model cannot be found in the database, a record will be inserted with the attributes resulting from merging the first array argument with the optional second array argument:"
msgstr ""

#: ./docs/8.x/eloquent.md:642
#: ./docs/9.x/eloquent.md:781
#: ./docs/10.x/eloquent.md:764
#: ./docs/11.x/eloquent.md:787
#: ./docs/master/eloquent.md:774
msgctxt "P"
msgid "The `wasChanged` method determines if any attributes were changed when the model was last saved within the current request cycle. If needed, you may pass an attribute name to see if a particular attribute was changed:"
msgstr ""

#: ./docs/8.x/eloquent.md:644
msgctxt "CODE"
msgid ""
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n"
"\n"
"$user->title = 'Painter';\n"
"\n"
"$user->save();\n"
"\n"
"$user->wasChanged(); // true\n"
"$user->wasChanged('title'); // true\n"
"$user->wasChanged('first_name'); // false"
msgstr ""

#: ./docs/10.x/eloquent.md:658
#: ./docs/11.x/eloquent.md:672
#: ./docs/master/eloquent.md:659
msgctxt "H2"
msgid "Inserting and Updating Models"
msgstr ""

#: ./docs/8.x/eloquent.md:658
#: ./docs/9.x/eloquent.md:799
#: ./docs/10.x/eloquent.md:782
#: ./docs/11.x/eloquent.md:805
#: ./docs/master/eloquent.md:792
msgctxt "P"
msgid "The `getOriginal` method returns an array containing the original attributes of the model regardless of any changes to the model since it was retrieved. If needed, you may pass a specific attribute name to get the original value of a particular attribute:"
msgstr ""

#: ./docs/8.x/eloquent.md:660
#: ./docs/9.x/eloquent.md:801
#: ./docs/10.x/eloquent.md:784
#: ./docs/11.x/eloquent.md:807
#: ./docs/master/eloquent.md:794
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->name; // John\n"
"$user->email; // john@example.com\n"
"\n"
"$user->name = \"Jack\";\n"
"$user->name; // Jack\n"
"\n"
"$user->getOriginal('name'); // John\n"
"$user->getOriginal(); // Array of original attributes..."
msgstr ""

#: ./docs/10.x/eloquent.md:665
#: ./docs/11.x/eloquent.md:679
#: ./docs/master/eloquent.md:666
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Flight;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class FlightController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new flight in the database.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        // Validate the request...\n"
"\n"
"        $flight = new Flight;\n"
"\n"
"        $flight->name = $request->name;\n"
"\n"
"        $flight->save();\n"
"\n"
"        return redirect('/flights');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:671
#: ./docs/9.x/eloquent.md:812
#: ./docs/10.x/eloquent.md:795
#: ./docs/11.x/eloquent.md:818
#: ./docs/master/eloquent.md:805
#~ msgctxt "P"
#~ msgid "<a name=\"mass-assignment\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:672
#: ./docs/9.x/eloquent.md:813
#: ./docs/10.x/eloquent.md:796
#: ./docs/11.x/eloquent.md:819
#: ./docs/master/eloquent.md:806
msgctxt "H3"
msgid "Mass Assignment"
msgstr ""

#: ./docs/8.x/eloquent.md:674
#: ./docs/9.x/eloquent.md:815
#: ./docs/10.x/eloquent.md:798
#: ./docs/11.x/eloquent.md:821
#: ./docs/master/eloquent.md:808
msgctxt "P"
msgid "You may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the method:"
msgstr ""

#: ./docs/8.x/eloquent.md:682
#: ./docs/9.x/eloquent.md:823
#: ./docs/10.x/eloquent.md:806
#: ./docs/11.x/eloquent.md:829
#: ./docs/master/eloquent.md:816
msgctxt "P"
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default."
msgstr ""

#: ./docs/8.x/eloquent.md:684
#: ./docs/9.x/eloquent.md:825
#: ./docs/10.x/eloquent.md:808
#: ./docs/11.x/eloquent.md:831
#: ./docs/master/eloquent.md:818
msgctxt "P"
msgid "A mass assignment vulnerability occurs when a user passes an unexpected HTTP request field and that field changes a column in your database that you did not expect. For example, a malicious user might send an `is_admin` parameter through an HTTP request, which is then passed to your model's `create` method, allowing the user to escalate themselves to an administrator."
msgstr ""

#: ./docs/8.x/eloquent.md:686
#: ./docs/9.x/eloquent.md:827
#: ./docs/10.x/eloquent.md:810
#: ./docs/11.x/eloquent.md:833
#: ./docs/master/eloquent.md:820
msgctxt "P"
msgid "So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the `$fillable` property on the model. For example, let's make the `name` attribute of our `Flight` model mass assignable:"
msgstr ""

#: ./docs/8.x/eloquent.md:688
#: ./docs/9.x/eloquent.md:829
#: ./docs/10.x/eloquent.md:812
#: ./docs/master/eloquent.md:822
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $fillable = ['name'];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:704
#: ./docs/9.x/eloquent.md:845
#: ./docs/10.x/eloquent.md:828
#: ./docs/11.x/eloquent.md:851
#: ./docs/master/eloquent.md:838
msgctxt "P"
msgid "Once you have specified which attributes are mass assignable, you may use the `create` method to insert a new record in the database. The `create` method returns the newly created model instance:"
msgstr ""

#: ./docs/8.x/eloquent.md:706
#: ./docs/9.x/eloquent.md:847
#: ./docs/10.x/eloquent.md:830
#: ./docs/11.x/eloquent.md:853
#: ./docs/master/eloquent.md:840
msgctxt "CODE"
msgid "$flight = Flight::create(['name' => 'London to Paris']);"
msgstr ""

#: ./docs/8.x/eloquent.md:708
#: ./docs/9.x/eloquent.md:849
#: ./docs/10.x/eloquent.md:832
#: ./docs/11.x/eloquent.md:855
#: ./docs/master/eloquent.md:842
msgctxt "P"
msgid "If you already have a model instance, you may use the `fill` method to populate it with an array of attributes:"
msgstr ""

#: ./docs/8.x/eloquent.md:710
#: ./docs/9.x/eloquent.md:851
#: ./docs/10.x/eloquent.md:834
#: ./docs/11.x/eloquent.md:857
#: ./docs/master/eloquent.md:844
msgctxt "CODE"
msgid "$flight->fill(['name' => 'Amsterdam to Frankfurt']);"
msgstr ""

#: ./docs/8.x/eloquent.md:712
#: ./docs/9.x/eloquent.md:853
#: ./docs/10.x/eloquent.md:836
#: ./docs/11.x/eloquent.md:859
#: ./docs/master/eloquent.md:846
#~ msgctxt "P"
#~ msgid "<a name=\"mass-assignment-json-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:713
#: ./docs/9.x/eloquent.md:854
msgctxt "H4"
msgid "Mass Assignment & JSON Columns"
msgstr ""

#: ./docs/8.x/eloquent.md:715
#: ./docs/9.x/eloquent.md:856
#: ./docs/10.x/eloquent.md:839
#: ./docs/11.x/eloquent.md:862
#: ./docs/master/eloquent.md:849
msgctxt "P"
msgid "When assigning JSON columns, each column's mass assignable key must be specified in your model's `$fillable` array. For security, Laravel does not support updating nested JSON attributes when using the `guarded` property:"
msgstr ""

#: ./docs/8.x/eloquent.md:717
#: ./docs/9.x/eloquent.md:858
#: ./docs/10.x/eloquent.md:841
#: ./docs/master/eloquent.md:851
msgctxt "CODE"
msgid ""
"/**\n"
" * The attributes that are mass assignable.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $fillable = [\n"
"    'options->enabled',\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent.md:726
#: ./docs/9.x/eloquent.md:867
#: ./docs/10.x/eloquent.md:850
#: ./docs/11.x/eloquent.md:873
#: ./docs/master/eloquent.md:860
#~ msgctxt "P"
#~ msgid "<a name=\"allowing-mass-assignment\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:727
#: ./docs/9.x/eloquent.md:868
#: ./docs/10.x/eloquent.md:851
#: ./docs/11.x/eloquent.md:874
#: ./docs/master/eloquent.md:861
msgctxt "H4"
msgid "Allowing Mass Assignment"
msgstr ""

#: ./docs/8.x/eloquent.md:729
#: ./docs/9.x/eloquent.md:870
#: ./docs/10.x/eloquent.md:853
#: ./docs/11.x/eloquent.md:876
#: ./docs/master/eloquent.md:863
msgctxt "P"
msgid "If you would like to make all of your attributes mass assignable, you may define your model's `$guarded` property as an empty array. If you choose to unguard your model, you should take special care to always hand-craft the arrays passed to Eloquent's `fill`, `create`, and `update` methods:"
msgstr ""

#: ./docs/8.x/eloquent.md:731
#: ./docs/9.x/eloquent.md:872
#: ./docs/10.x/eloquent.md:855
#: ./docs/master/eloquent.md:865
msgctxt "CODE"
msgid ""
"/**\n"
" * The attributes that aren't mass assignable.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $guarded = [];"
msgstr ""

#: ./docs/8.x/eloquent.md:738
#: ./docs/9.x/eloquent.md:898
#: ./docs/10.x/eloquent.md:879
#: ./docs/11.x/eloquent.md:902
#: ./docs/master/eloquent.md:889
#~ msgctxt "P"
#~ msgid "<a name=\"upserts\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:739
#: ./docs/9.x/eloquent.md:899
#: ./docs/10.x/eloquent.md:880
#: ./docs/11.x/eloquent.md:903
#: ./docs/master/eloquent.md:890
msgctxt "H3"
msgid "Upserts"
msgstr ""

#: ./docs/8.x/eloquent.md:741
#: ./docs/9.x/eloquent.md:901
#: ./docs/10.x/eloquent.md:882
#: ./docs/11.x/eloquent.md:732
#: ./docs/master/eloquent.md:719
msgctxt "P"
msgid "Occasionally, you may need to update an existing model or create a new model if no matching model exists. Like the `firstOrCreate` method, the `updateOrCreate` method persists the model, so there's no need to manually call the `save` method."
msgstr ""

#: ./docs/8.x/eloquent.md:743
#: ./docs/9.x/eloquent.md:903
#: ./docs/10.x/eloquent.md:884
#: ./docs/11.x/eloquent.md:734
#: ./docs/master/eloquent.md:721
msgctxt "P"
msgid "In the example below, if a flight exists with a `departure` location of `Oakland` and a `destination` location of `San Diego`, its `price` and `discounted` columns will be updated. If no such flight exists, a new flight will be created which has the attributes resulting from merging the first argument array with the second argument array:"
msgstr ""

#: ./docs/8.x/eloquent.md:745
#: ./docs/9.x/eloquent.md:905
#: ./docs/10.x/eloquent.md:886
#: ./docs/11.x/eloquent.md:736
#: ./docs/master/eloquent.md:723
msgctxt "CODE"
msgid ""
"$flight = Flight::updateOrCreate(\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n"
"    ['price' => 99, 'discounted' => 1]\n"
");"
msgstr ""

#: ./docs/8.x/eloquent.md:750
#: ./docs/9.x/eloquent.md:910
#: ./docs/10.x/eloquent.md:891
msgctxt "P"
msgid "If you would like to perform multiple \"upserts\" in a single query, then you should use the `upsert` method instead. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of the columns that should be updated if a matching record already exists in the database. The `upsert` method will automatically set the `created_at` and `updated_at` timestamps if timestamps are enabled on the model:"
msgstr ""

#: ./docs/8.x/eloquent.md:752
#: ./docs/9.x/eloquent.md:912
#: ./docs/10.x/eloquent.md:893
msgctxt "CODE"
msgid ""
"Flight::upsert([\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"], ['departure', 'destination'], ['price']);"
msgstr ""

#: ./docs/9.x/eloquent.md:754
#: ./docs/10.x/eloquent.md:737
#: ./docs/11.x/eloquent.md:760
#: ./docs/master/eloquent.md:747
msgctxt "P"
msgid "The `isDirty` method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name or an array of attributes to the `isDirty` method to determine if any of the attributes are \"dirty\". The `isClean` method will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"
msgstr ""

#: ./docs/9.x/eloquent.md:756
#: ./docs/10.x/eloquent.md:739
#: ./docs/11.x/eloquent.md:762
#: ./docs/master/eloquent.md:749
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n"
"\n"
"$user->title = 'Painter';\n"
"\n"
"$user->isDirty(); // true\n"
"$user->isDirty('title'); // true\n"
"$user->isDirty('first_name'); // false\n"
"$user->isDirty(['first_name', 'title']); // true\n"
"\n"
"$user->isClean(); // false\n"
"$user->isClean('title'); // false\n"
"$user->isClean('first_name'); // true\n"
"$user->isClean(['first_name', 'title']); // false\n"
"\n"
"$user->save();\n"
"\n"
"$user->isDirty(); // false\n"
"$user->isClean(); // true"
msgstr ""

#: ./docs/8.x/eloquent.md:757
#: ./docs/9.x/eloquent.md:920
#: ./docs/10.x/eloquent.md:901
#: ./docs/11.x/eloquent.md:915
#: ./docs/master/eloquent.md:902
#~ msgctxt "P"
#~ msgid "<a name=\"deleting-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:758
#: ./docs/9.x/eloquent.md:921
#: ./docs/10.x/eloquent.md:902
#: ./docs/11.x/eloquent.md:916
#: ./docs/master/eloquent.md:903
msgctxt "H2"
msgid "Deleting Models"
msgstr ""

#: ./docs/8.x/eloquent.md:760
#: ./docs/9.x/eloquent.md:923
#: ./docs/10.x/eloquent.md:904
#: ./docs/11.x/eloquent.md:918
#: ./docs/master/eloquent.md:905
msgctxt "P"
msgid "To delete a model, you may call the `delete` method on the model instance:"
msgstr ""

#: ./docs/8.x/eloquent.md:762
#: ./docs/9.x/eloquent.md:925
#: ./docs/10.x/eloquent.md:906
#: ./docs/11.x/eloquent.md:920
#: ./docs/master/eloquent.md:907
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"$flight = Flight::find(1);\n"
"\n"
"$flight->delete();"
msgstr ""

#: ./docs/8.x/eloquent.md:768
#: ./docs/9.x/eloquent.md:931
#: ./docs/10.x/eloquent.md:912
#: ./docs/11.x/eloquent.md:926
#: ./docs/master/eloquent.md:913
msgctxt "P"
msgid "You may call the `truncate` method to delete all of the model's associated database records. The `truncate` operation will also reset any auto-incrementing IDs on the model's associated table:"
msgstr ""

#: ./docs/8.x/eloquent.md:770
#: ./docs/9.x/eloquent.md:933
#: ./docs/10.x/eloquent.md:914
#: ./docs/11.x/eloquent.md:928
#: ./docs/master/eloquent.md:915
msgctxt "CODE"
msgid "Flight::truncate();"
msgstr ""

#: ./docs/8.x/eloquent.md:772
#: ./docs/9.x/eloquent.md:935
#: ./docs/10.x/eloquent.md:916
#: ./docs/11.x/eloquent.md:930
#: ./docs/master/eloquent.md:917
#~ msgctxt "P"
#~ msgid "<a name=\"deleting-an-existing-model-by-its-primary-key\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:773
#: ./docs/9.x/eloquent.md:936
msgctxt "H4"
msgid "Deleting An Existing Model By Its Primary Key"
msgstr ""

#: ./docs/8.x/eloquent.md:775
#: ./docs/9.x/eloquent.md:938
#: ./docs/10.x/eloquent.md:919
#: ./docs/11.x/eloquent.md:933
#: ./docs/master/eloquent.md:920
msgctxt "P"
msgid "In the example above, we are retrieving the model from the database before calling the `delete` method. However, if you know the primary key of the model, you may delete the model without explicitly retrieving it by calling the `destroy` method.  In addition to accepting the single primary key, the `destroy` method will accept multiple primary keys, an array of primary keys, or a [collection](/docs/{{version}}/collections) of primary keys:"
msgstr ""

#: ./docs/8.x/eloquent.md:777
#: ./docs/9.x/eloquent.md:940
#: ./docs/10.x/eloquent.md:921
#: ./docs/11.x/eloquent.md:935
#: ./docs/master/eloquent.md:922
msgctxt "CODE"
msgid ""
"Flight::destroy(1);\n"
"\n"
"Flight::destroy(1, 2, 3);\n"
"\n"
"Flight::destroy([1, 2, 3]);\n"
"\n"
"Flight::destroy(collect([1, 2, 3]));"
msgstr ""

#: ./docs/9.x/eloquent.md:783
#: ./docs/10.x/eloquent.md:766
#: ./docs/11.x/eloquent.md:789
#: ./docs/master/eloquent.md:776
msgctxt "CODE"
msgid ""
"$user = User::create([\n"
"    'first_name' => 'Taylor',\n"
"    'last_name' => 'Otwell',\n"
"    'title' => 'Developer',\n"
"]);\n"
"\n"
"$user->title = 'Painter';\n"
"\n"
"$user->save();\n"
"\n"
"$user->wasChanged(); // true\n"
"$user->wasChanged('title'); // true\n"
"$user->wasChanged(['title', 'slug']); // true\n"
"$user->wasChanged('first_name'); // false\n"
"$user->wasChanged(['first_name', 'title']); // true"
msgstr ""

#: ./docs/8.x/eloquent.md:785
#: ./docs/9.x/eloquent.md:949
#: ./docs/10.x/eloquent.md:930
#: ./docs/11.x/eloquent.md:948
#: ./docs/master/eloquent.md:931
msgctxt "P"
msgid "The `destroy` method loads each model individually and calls the `delete` method so that the `deleting` and `deleted` events are properly dispatched for each model."
msgstr ""

#: ./docs/8.x/eloquent.md:787
#: ./docs/9.x/eloquent.md:951
#: ./docs/10.x/eloquent.md:932
#: ./docs/11.x/eloquent.md:950
#: ./docs/master/eloquent.md:933
#~ msgctxt "P"
#~ msgid "<a name=\"deleting-models-using-queries\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:788
#: ./docs/9.x/eloquent.md:952
#: ./docs/10.x/eloquent.md:933
#: ./docs/11.x/eloquent.md:951
#: ./docs/master/eloquent.md:934
msgctxt "H4"
msgid "Deleting Models Using Queries"
msgstr ""

#: ./docs/8.x/eloquent.md:790
#: ./docs/9.x/eloquent.md:954
#: ./docs/10.x/eloquent.md:935
#: ./docs/11.x/eloquent.md:953
#: ./docs/master/eloquent.md:936
msgctxt "P"
msgid "Of course, you may build an Eloquent query to delete all models matching your query's criteria. In this example, we will delete all flights that are marked as inactive. Like mass updates, mass deletes will not dispatch model events for the models that are deleted:"
msgstr ""

#: ./docs/8.x/eloquent.md:792
#: ./docs/9.x/eloquent.md:956
#: ./docs/10.x/eloquent.md:937
#: ./docs/11.x/eloquent.md:955
#: ./docs/master/eloquent.md:938
msgctxt "CODE"
msgid "$deleted = Flight::where('active', 0)->delete();"
msgstr ""

#: ./docs/8.x/eloquent.md:794
#: ./docs/9.x/eloquent.md:959
#: ./docs/10.x/eloquent.md:940
#: ./docs/11.x/eloquent.md:958
#: ./docs/master/eloquent.md:941
msgctxt "P"
msgid "When executing a mass delete statement via Eloquent, the `deleting` and `deleted` model events will not be dispatched for the deleted models. This is because the models are never actually retrieved when executing the delete statement."
msgstr ""

#: ./docs/8.x/eloquent.md:796
#: ./docs/9.x/eloquent.md:961
#: ./docs/10.x/eloquent.md:942
#: ./docs/11.x/eloquent.md:960
#: ./docs/master/eloquent.md:943
#~ msgctxt "P"
#~ msgid "<a name=\"soft-deleting\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:797
#: ./docs/9.x/eloquent.md:962
#: ./docs/10.x/eloquent.md:943
#: ./docs/11.x/eloquent.md:961
#: ./docs/master/eloquent.md:944
msgctxt "H3"
msgid "Soft Deleting"
msgstr ""

#: ./docs/8.x/eloquent.md:799
#: ./docs/9.x/eloquent.md:964
#: ./docs/10.x/eloquent.md:945
#: ./docs/11.x/eloquent.md:963
#: ./docs/master/eloquent.md:946
msgctxt "P"
msgid "In addition to actually removing records from your database, Eloquent can also \"soft delete\" models. When models are soft deleted, they are not actually removed from your database. Instead, a `deleted_at` attribute is set on the model indicating the date and time at which the model was \"deleted\". To enable soft deletes for a model, add the `Illuminate\\Database\\Eloquent\\SoftDeletes` trait to the model:"
msgstr ""

#: ./docs/8.x/eloquent.md:801
#: ./docs/9.x/eloquent.md:966
#: ./docs/10.x/eloquent.md:947
#: ./docs/11.x/eloquent.md:965
#: ./docs/master/eloquent.md:948
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\SoftDeletes;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    use SoftDeletes;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:813
#: ./docs/9.x/eloquent.md:979
#: ./docs/10.x/eloquent.md:960
#: ./docs/11.x/eloquent.md:978
#: ./docs/master/eloquent.md:961
msgctxt "P"
msgid "The `SoftDeletes` trait will automatically cast the `deleted_at` attribute to a `DateTime` / `Carbon` instance for you."
msgstr ""

#: ./docs/8.x/eloquent.md:815
#: ./docs/9.x/eloquent.md:981
#: ./docs/10.x/eloquent.md:962
#: ./docs/11.x/eloquent.md:980
#: ./docs/master/eloquent.md:963
msgctxt "P"
msgid "You should also add the `deleted_at` column to your database table. The Laravel [schema builder](/docs/{{version}}/migrations) contains a helper method to create this column:"
msgstr ""

#: ./docs/8.x/eloquent.md:817
#: ./docs/9.x/eloquent.md:983
#: ./docs/10.x/eloquent.md:964
#: ./docs/11.x/eloquent.md:982
#: ./docs/master/eloquent.md:965
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"\n"
"Schema::table('flights', function (Blueprint $table) {\n"
"    $table->softDeletes();\n"
"});\n"
"\n"
"Schema::table('flights', function (Blueprint $table) {\n"
"    $table->dropSoftDeletes();\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent.md:828
#: ./docs/9.x/eloquent.md:994
#: ./docs/10.x/eloquent.md:975
#: ./docs/11.x/eloquent.md:993
#: ./docs/master/eloquent.md:976
msgctxt "P"
msgid "Now, when you call the `delete` method on the model, the `deleted_at` column will be set to the current date and time. However, the model's database record will be left in the table. When querying a model that uses soft deletes, the soft deleted models will automatically be excluded from all query results."
msgstr ""

#: ./docs/8.x/eloquent.md:830
#: ./docs/9.x/eloquent.md:996
#: ./docs/10.x/eloquent.md:977
#: ./docs/11.x/eloquent.md:995
#: ./docs/master/eloquent.md:978
msgctxt "P"
msgid "To determine if a given model instance has been soft deleted, you may use the `trashed` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:832
#: ./docs/9.x/eloquent.md:998
msgctxt "CODE"
msgid ""
"if ($flight->trashed()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:835
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array<int, string>\n"
"     */\n"
"    protected $fillable = ['name'];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:836
#: ./docs/9.x/eloquent.md:1002
#: ./docs/10.x/eloquent.md:983
#: ./docs/11.x/eloquent.md:1001
#: ./docs/master/eloquent.md:984
#~ msgctxt "P"
#~ msgid "<a name=\"restoring-soft-deleted-models\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent.md:837
#: ./docs/11.x/eloquent.md:860
#: ./docs/master/eloquent.md:847
msgctxt "H4"
msgid "Mass Assignment and JSON Columns"
msgstr ""

#: ./docs/8.x/eloquent.md:837
#: ./docs/9.x/eloquent.md:1003
#: ./docs/10.x/eloquent.md:984
#: ./docs/11.x/eloquent.md:1002
#: ./docs/master/eloquent.md:985
msgctxt "H4"
msgid "Restoring Soft Deleted Models"
msgstr ""

#: ./docs/8.x/eloquent.md:839
#: ./docs/9.x/eloquent.md:1005
#: ./docs/10.x/eloquent.md:986
#: ./docs/11.x/eloquent.md:1004
#: ./docs/master/eloquent.md:987
msgctxt "P"
msgid "Sometimes you may wish to \"un-delete\" a soft deleted model. To restore a soft deleted model, you may call the `restore` method on a model instance. The `restore` method will set the model's `deleted_at` column to `null`:"
msgstr ""

#: ./docs/8.x/eloquent.md:841
#: ./docs/9.x/eloquent.md:1007
#: ./docs/10.x/eloquent.md:988
#: ./docs/11.x/eloquent.md:1006
#: ./docs/master/eloquent.md:989
msgctxt "CODE"
msgid "$flight->restore();"
msgstr ""

#: ./docs/8.x/eloquent.md:843
#: ./docs/9.x/eloquent.md:1009
#: ./docs/10.x/eloquent.md:990
#: ./docs/11.x/eloquent.md:1008
#: ./docs/master/eloquent.md:991
msgctxt "P"
msgid "You may also use the `restore` method in a query to restore multiple models. Again, like other \"mass\" operations, this will not dispatch any model events for the models that are restored:"
msgstr ""

#: ./docs/8.x/eloquent.md:845
#: ./docs/9.x/eloquent.md:1011
#: ./docs/10.x/eloquent.md:992
#: ./docs/11.x/eloquent.md:1010
#: ./docs/master/eloquent.md:993
msgctxt "CODE"
msgid ""
"Flight::withTrashed()\n"
"        ->where('airline_id', 1)\n"
"        ->restore();"
msgstr ""

#: ./docs/8.x/eloquent.md:849
#: ./docs/9.x/eloquent.md:1015
#: ./docs/10.x/eloquent.md:996
#: ./docs/11.x/eloquent.md:1014
#: ./docs/master/eloquent.md:997
msgctxt "P"
msgid "The `restore` method may also be used when building [relationship](/docs/{{version}}/eloquent-relationships) queries:"
msgstr ""

#: ./docs/8.x/eloquent.md:851
#: ./docs/9.x/eloquent.md:1017
#: ./docs/10.x/eloquent.md:998
#: ./docs/11.x/eloquent.md:1016
#: ./docs/master/eloquent.md:999
msgctxt "CODE"
msgid "$flight->history()->restore();"
msgstr ""

#: ./docs/8.x/eloquent.md:853
#: ./docs/9.x/eloquent.md:1019
#: ./docs/10.x/eloquent.md:1000
#: ./docs/11.x/eloquent.md:1018
#: ./docs/master/eloquent.md:1001
#~ msgctxt "P"
#~ msgid "<a name=\"permanently-deleting-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:854
#: ./docs/9.x/eloquent.md:1020
#: ./docs/10.x/eloquent.md:1001
#: ./docs/11.x/eloquent.md:1019
#: ./docs/master/eloquent.md:1002
msgctxt "H4"
msgid "Permanently Deleting Models"
msgstr ""

#: ./docs/8.x/eloquent.md:856
#: ./docs/9.x/eloquent.md:1022
#: ./docs/10.x/eloquent.md:1003
#: ./docs/11.x/eloquent.md:1021
#: ./docs/master/eloquent.md:1004
msgctxt "P"
msgid "Sometimes you may need to truly remove a model from your database. You may use the `forceDelete` method to permanently remove a soft deleted model from the database table:"
msgstr ""

#: ./docs/8.x/eloquent.md:858
#: ./docs/9.x/eloquent.md:1024
#: ./docs/10.x/eloquent.md:1005
#: ./docs/11.x/eloquent.md:1023
#: ./docs/master/eloquent.md:1006
msgctxt "CODE"
msgid "$flight->forceDelete();"
msgstr ""

#: ./docs/8.x/eloquent.md:860
#: ./docs/9.x/eloquent.md:1026
#: ./docs/10.x/eloquent.md:1007
#: ./docs/11.x/eloquent.md:1025
#: ./docs/master/eloquent.md:1008
msgctxt "P"
msgid "You may also use the `forceDelete` method when building Eloquent relationship queries:"
msgstr ""

#: ./docs/8.x/eloquent.md:862
#: ./docs/9.x/eloquent.md:1028
#: ./docs/10.x/eloquent.md:1009
#: ./docs/11.x/eloquent.md:1027
#: ./docs/master/eloquent.md:1010
msgctxt "CODE"
msgid "$flight->history()->forceDelete();"
msgstr ""

#: ./docs/11.x/eloquent.md:864
msgctxt "CODE"
msgid ""
"/**\n"
" * The attributes that are mass assignable.\n"
" *\n"
" * @var array<int, string>\n"
" */\n"
"protected $fillable = [\n"
"    'options->enabled',\n"
"];"
msgstr ""

#: ./docs/8.x/eloquent.md:864
#: ./docs/9.x/eloquent.md:1030
#: ./docs/10.x/eloquent.md:1011
#: ./docs/11.x/eloquent.md:1029
#: ./docs/master/eloquent.md:1012
#~ msgctxt "P"
#~ msgid "<a name=\"querying-soft-deleted-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:865
#: ./docs/9.x/eloquent.md:1031
#: ./docs/10.x/eloquent.md:1012
#: ./docs/11.x/eloquent.md:1030
#: ./docs/master/eloquent.md:1013
msgctxt "H3"
msgid "Querying Soft Deleted Models"
msgstr ""

#: ./docs/8.x/eloquent.md:867
#: ./docs/9.x/eloquent.md:1033
#: ./docs/10.x/eloquent.md:1014
#: ./docs/11.x/eloquent.md:1032
#: ./docs/master/eloquent.md:1015
#~ msgctxt "P"
#~ msgid "<a name=\"including-soft-deleted-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:868
#: ./docs/9.x/eloquent.md:1034
#: ./docs/10.x/eloquent.md:1015
#: ./docs/11.x/eloquent.md:1033
#: ./docs/master/eloquent.md:1016
msgctxt "H4"
msgid "Including Soft Deleted Models"
msgstr ""

#: ./docs/10.x/eloquent.md:869
#: ./docs/11.x/eloquent.md:892
#: ./docs/master/eloquent.md:879
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Model::preventSilentlyDiscardingAttributes($this->app->isLocal());\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:870
#: ./docs/9.x/eloquent.md:1036
#: ./docs/10.x/eloquent.md:1017
#: ./docs/11.x/eloquent.md:1035
#: ./docs/master/eloquent.md:1018
msgctxt "P"
msgid "As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to be included in a query's results by calling the `withTrashed` method on the query:"
msgstr ""

#: ./docs/8.x/eloquent.md:872
#: ./docs/9.x/eloquent.md:1038
#: ./docs/10.x/eloquent.md:1019
#: ./docs/11.x/eloquent.md:1037
#: ./docs/master/eloquent.md:1020
msgctxt "CODE"
msgid ""
"use App\\Models\\Flight;\n"
"\n"
"$flights = Flight::withTrashed()\n"
"                ->where('account_id', 1)\n"
"                ->get();"
msgstr ""

#: ./docs/11.x/eloquent.md:878
msgctxt "CODE"
msgid ""
"/**\n"
" * The attributes that aren't mass assignable.\n"
" *\n"
" * @var array<string>|bool\n"
" */\n"
"protected $guarded = [];"
msgstr ""

#: ./docs/8.x/eloquent.md:878
#: ./docs/9.x/eloquent.md:1044
#: ./docs/10.x/eloquent.md:1025
#: ./docs/11.x/eloquent.md:1043
#: ./docs/master/eloquent.md:1026
msgctxt "P"
msgid "The `withTrashed` method may also be called when building a [relationship](/docs/{{version}}/eloquent-relationships) query:"
msgstr ""

#: ./docs/9.x/eloquent.md:879
#: ./docs/10.x/eloquent.md:862
#: ./docs/11.x/eloquent.md:885
#: ./docs/master/eloquent.md:872
#~ msgctxt "P"
#~ msgid "<a name=\"mass-assignment-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:880
#: ./docs/9.x/eloquent.md:1046
#: ./docs/10.x/eloquent.md:1027
#: ./docs/11.x/eloquent.md:1045
#: ./docs/master/eloquent.md:1028
msgctxt "CODE"
msgid "$flight->history()->withTrashed()->get();"
msgstr ""

#: ./docs/9.x/eloquent.md:880
#: ./docs/10.x/eloquent.md:863
#: ./docs/11.x/eloquent.md:886
#: ./docs/master/eloquent.md:873
msgctxt "H4"
msgid "Mass Assignment Exceptions"
msgstr ""

#: ./docs/8.x/eloquent.md:882
#: ./docs/9.x/eloquent.md:1048
#: ./docs/10.x/eloquent.md:1029
#: ./docs/11.x/eloquent.md:1047
#: ./docs/master/eloquent.md:1030
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-only-soft-deleted-models\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent.md:882
#: ./docs/10.x/eloquent.md:865
#: ./docs/11.x/eloquent.md:888
#: ./docs/master/eloquent.md:875
msgctxt "P"
msgid "By default, attributes that are not included in the `$fillable` array are silently discarded when performing mass-assignment operations. In production, this is expected behavior; however, during local development it can lead to confusion as to why model changes are not taking effect."
msgstr ""

#: ./docs/8.x/eloquent.md:883
#: ./docs/9.x/eloquent.md:1049
#: ./docs/10.x/eloquent.md:1030
#: ./docs/11.x/eloquent.md:1048
#: ./docs/master/eloquent.md:1031
msgctxt "H4"
msgid "Retrieving Only Soft Deleted Models"
msgstr ""

#: ./docs/9.x/eloquent.md:884
#: ./docs/10.x/eloquent.md:867
msgctxt "P"
msgid "If you wish, you may instruct Laravel to throw an exception when attempting to fill an unfillable attribute by invoking the `preventSilentlyDiscardingAttributes` method. Typically, this method should be invoked within the `boot` method of one of your application's service providers:"
msgstr ""

#: ./docs/8.x/eloquent.md:885
#: ./docs/9.x/eloquent.md:1051
#: ./docs/10.x/eloquent.md:1032
#: ./docs/11.x/eloquent.md:1050
#: ./docs/master/eloquent.md:1033
msgctxt "P"
msgid "The `onlyTrashed` method will retrieve **only** soft deleted models:"
msgstr ""

#: ./docs/9.x/eloquent.md:886
msgctxt "CODE"
msgid ""
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Model::preventSilentlyDiscardingAttributes($this->app->isLocal());\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:887
#: ./docs/9.x/eloquent.md:1053
#: ./docs/10.x/eloquent.md:1034
#: ./docs/11.x/eloquent.md:1052
#: ./docs/master/eloquent.md:1035
msgctxt "CODE"
msgid ""
"$flights = Flight::onlyTrashed()\n"
"                ->where('airline_id', 1)\n"
"                ->get();"
msgstr ""

#: ./docs/11.x/eloquent.md:890
#: ./docs/master/eloquent.md:877
msgctxt "P"
msgid "If you wish, you may instruct Laravel to throw an exception when attempting to fill an unfillable attribute by invoking the `preventSilentlyDiscardingAttributes` method. Typically, this method should be invoked in the `boot` method of your application's `AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/eloquent.md:891
#: ./docs/9.x/eloquent.md:1057
#: ./docs/10.x/eloquent.md:1038
#: ./docs/11.x/eloquent.md:1056
#: ./docs/master/eloquent.md:1039
#~ msgctxt "P"
#~ msgid "<a name=\"pruning-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:892
#: ./docs/9.x/eloquent.md:1058
#: ./docs/10.x/eloquent.md:1039
#: ./docs/11.x/eloquent.md:1057
#: ./docs/master/eloquent.md:1040
msgctxt "H2"
msgid "Pruning Models"
msgstr ""

#: ./docs/8.x/eloquent.md:894
#: ./docs/9.x/eloquent.md:1060
#: ./docs/10.x/eloquent.md:1041
#: ./docs/11.x/eloquent.md:1059
#: ./docs/master/eloquent.md:1042
msgctxt "P"
msgid "Sometimes you may want to periodically delete models that are no longer needed. To accomplish this, you may add the `Illuminate\\Database\\Eloquent\\Prunable` or `Illuminate\\Database\\Eloquent\\MassPrunable` trait to the models you would like to periodically prune. After adding one of the traits to the model, implement a `prunable` method which returns an Eloquent query builder that resolves the models that are no longer needed:"
msgstr ""

#: ./docs/8.x/eloquent.md:896
#: ./docs/9.x/eloquent.md:1062
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Prunable;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    use Prunable;\n"
"\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function prunable()\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:905
#: ./docs/master/eloquent.md:892
msgctxt "P"
msgid "Eloquent's `upsert` method may be used to update or create records in a single, atomic operation. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of the columns that should be updated if a matching record already exists in the database. The `upsert` method will automatically set the `created_at` and `updated_at` timestamps if timestamps are enabled on the model:"
msgstr ""

#: ./docs/11.x/eloquent.md:907
#: ./docs/master/eloquent.md:894
msgctxt "CODE"
msgid ""
"Flight::upsert([\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"], uniqueBy: ['departure', 'destination'], update: ['price']);"
msgstr ""

#: ./docs/11.x/eloquent.md:913
msgctxt "P"
msgid "All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MariaDB and MySQL database drivers ignore the second argument of the `upsert` method and always use the \"primary\" and \"unique\" indexes of the table to detect existing records."
msgstr ""

#: ./docs/10.x/eloquent.md:917
#: ./docs/11.x/eloquent.md:931
#: ./docs/master/eloquent.md:918
msgctxt "H4"
msgid "Deleting an Existing Model by its Primary Key"
msgstr ""

#: ./docs/8.x/eloquent.md:918
#: ./docs/9.x/eloquent.md:1084
#: ./docs/10.x/eloquent.md:1064
#: ./docs/11.x/eloquent.md:1082
#: ./docs/master/eloquent.md:1065
msgctxt "P"
msgid "When marking models as `Prunable`, you may also define a `pruning` method on the model. This method will be called before the model is deleted. This method can be useful for deleting any additional resources associated with the model, such as stored files, before the model is permanently removed from the database:"
msgstr ""

#: ./docs/9.x/eloquent.md:918
#: ./docs/10.x/eloquent.md:899
#: ./docs/master/eloquent.md:900
msgctxt "P"
msgid "All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MySQL database driver ignores the second argument of the `upsert` method and always uses the \"primary\" and \"unique\" indexes of the table to detect existing records."
msgstr ""

#: ./docs/8.x/eloquent.md:920
#: ./docs/9.x/eloquent.md:1086
msgctxt "CODE"
msgid ""
"/**\n"
" * Prepare the model for pruning.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function pruning()\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:930
#: ./docs/9.x/eloquent.md:1096
#: ./docs/10.x/eloquent.md:1074
msgctxt "P"
msgid "After configuring your prunable model, you should schedule the `model:prune` Artisan command in your application's `App\\Console\\Kernel` class. You are free to choose the appropriate interval at which this command should be run:"
msgstr ""

#: ./docs/8.x/eloquent.md:932
#: ./docs/9.x/eloquent.md:1098
msgctxt "CODE"
msgid ""
"/**\n"
" * Define the application's command schedule.\n"
" *\n"
" * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
" * @return void\n"
" */\n"
"protected function schedule(Schedule $schedule)\n"
"{\n"
"    $schedule->command('model:prune')->daily();\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:943
msgctxt "P"
msgid "If you are utilizing [soft deleting models](#soft-deleting), you may permanently delete models via the `forceDestroy` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:943
#: ./docs/9.x/eloquent.md:1109
#: ./docs/10.x/eloquent.md:1084
#: ./docs/11.x/eloquent.md:1098
#: ./docs/master/eloquent.md:1081
msgctxt "P"
msgid "Behind the scenes, the `model:prune` command will automatically detect \"Prunable\" models within your application's `app/Models` directory. If your models are in a different location, you may use the `--model` option to specify the model class names:"
msgstr ""

#: ./docs/11.x/eloquent.md:945
msgctxt "CODE"
msgid "Flight::forceDestroy(1);"
msgstr ""

#: ./docs/8.x/eloquent.md:945
#: ./docs/9.x/eloquent.md:1111
#: ./docs/10.x/eloquent.md:1086
msgctxt "CODE"
msgid ""
"$schedule->command('model:prune', [\n"
"    '--model' => [Address::class, Flight::class],\n"
"])->daily();"
msgstr ""

#: ./docs/8.x/eloquent.md:949
#: ./docs/9.x/eloquent.md:1115
#: ./docs/10.x/eloquent.md:1090
#: ./docs/11.x/eloquent.md:1104
#: ./docs/master/eloquent.md:1087
msgctxt "P"
msgid "If you wish to exclude certain models from being pruned while pruning all other detected models, you may use the `--except` option:"
msgstr ""

#: ./docs/8.x/eloquent.md:951
#: ./docs/9.x/eloquent.md:1117
#: ./docs/10.x/eloquent.md:1092
msgctxt "CODE"
msgid ""
"$schedule->command('model:prune', [\n"
"    '--except' => [Address::class, Flight::class],\n"
"])->daily();"
msgstr ""

#: ./docs/8.x/eloquent.md:955
#: ./docs/9.x/eloquent.md:1121
#: ./docs/10.x/eloquent.md:1096
#: ./docs/11.x/eloquent.md:1110
#: ./docs/master/eloquent.md:1093
msgctxt "P"
msgid "You may test your `prunable` query by executing the `model:prune` command with the `--pretend` option. When pretending, the `model:prune` command will simply report how many records would be pruned if the command were to actually run:"
msgstr ""

#: ./docs/8.x/eloquent.md:957
#: ./docs/9.x/eloquent.md:1123
#: ./docs/10.x/eloquent.md:1098
#: ./docs/11.x/eloquent.md:1112
#: ./docs/master/eloquent.md:1095
msgctxt "CODE"
msgid "php artisan model:prune --pretend"
msgstr ""

#: ./docs/8.x/eloquent.md:959
#: ./docs/9.x/eloquent.md:1128
#: ./docs/10.x/eloquent.md:1103
#: ./docs/11.x/eloquent.md:1117
#: ./docs/master/eloquent.md:1100
msgctxt "P"
msgid "Soft deleting models will be permanently deleted (`forceDelete`) if they match the prunable query."
msgstr ""

#: ./docs/8.x/eloquent.md:961
#: ./docs/9.x/eloquent.md:1130
#: ./docs/10.x/eloquent.md:1105
#: ./docs/11.x/eloquent.md:1119
#: ./docs/master/eloquent.md:1102
#~ msgctxt "P"
#~ msgid "<a name=\"mass-pruning\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:962
#: ./docs/9.x/eloquent.md:1131
#: ./docs/10.x/eloquent.md:1106
#: ./docs/11.x/eloquent.md:1120
#: ./docs/master/eloquent.md:1103
msgctxt "H4"
msgid "Mass Pruning"
msgstr ""

#: ./docs/8.x/eloquent.md:964
#: ./docs/9.x/eloquent.md:1133
#: ./docs/10.x/eloquent.md:1108
#: ./docs/11.x/eloquent.md:1122
#: ./docs/master/eloquent.md:1105
msgctxt "P"
msgid "When models are marked with the `Illuminate\\Database\\Eloquent\\MassPrunable` trait, models are deleted from the database using mass-deletion queries. Therefore, the `pruning` method will not be invoked, nor will the `deleting` and `deleted` model events be dispatched. This is because the models are never actually retrieved before deletion, thus making the pruning process much more efficient:"
msgstr ""

#: ./docs/8.x/eloquent.md:966
#: ./docs/9.x/eloquent.md:1135
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\MassPrunable;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    use MassPrunable;\n"
"\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function prunable()\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:979
#: ./docs/11.x/eloquent.md:997
#: ./docs/master/eloquent.md:980
msgctxt "CODE"
msgid ""
"if ($flight->trashed()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:988
#: ./docs/9.x/eloquent.md:1157
#: ./docs/10.x/eloquent.md:1131
#: ./docs/11.x/eloquent.md:1145
#: ./docs/master/eloquent.md:1128
#~ msgctxt "P"
#~ msgid "<a name=\"replicating-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:989
#: ./docs/9.x/eloquent.md:1158
#: ./docs/10.x/eloquent.md:1132
#: ./docs/11.x/eloquent.md:1146
#: ./docs/master/eloquent.md:1129
msgctxt "H2"
msgid "Replicating Models"
msgstr ""

#: ./docs/8.x/eloquent.md:991
#: ./docs/9.x/eloquent.md:1160
#: ./docs/10.x/eloquent.md:1134
#: ./docs/11.x/eloquent.md:1148
#: ./docs/master/eloquent.md:1131
msgctxt "P"
msgid "You may create an unsaved copy of an existing model instance using the `replicate` method. This method is particularly useful when you have model instances that share many of the same attributes:"
msgstr ""

#: ./docs/8.x/eloquent.md:993
#: ./docs/9.x/eloquent.md:1162
#: ./docs/10.x/eloquent.md:1136
#: ./docs/11.x/eloquent.md:1150
#: ./docs/master/eloquent.md:1133
msgctxt "CODE"
msgid ""
"use App\\Models\\Address;\n"
"\n"
"$shipping = Address::create([\n"
"    'type' => 'shipping',\n"
"    'line_1' => '123 Example Street',\n"
"    'city' => 'Victorville',\n"
"    'state' => 'CA',\n"
"    'postcode' => '90001',\n"
"]);\n"
"\n"
"$billing = $shipping->replicate()->fill([\n"
"    'type' => 'billing'\n"
"]);\n"
"\n"
"$billing->save();"
msgstr ""

#: ./docs/8.x/eloquent.md:1009
#: ./docs/9.x/eloquent.md:1178
#: ./docs/10.x/eloquent.md:1152
#: ./docs/11.x/eloquent.md:1166
#: ./docs/master/eloquent.md:1149
msgctxt "P"
msgid "To exclude one or more attributes from being replicated to the new model, you may pass an array to the `replicate` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:1011
#: ./docs/9.x/eloquent.md:1180
#: ./docs/10.x/eloquent.md:1154
#: ./docs/11.x/eloquent.md:1168
#: ./docs/master/eloquent.md:1151
msgctxt "CODE"
msgid ""
"$flight = Flight::create([\n"
"    'destination' => 'LAX',\n"
"    'origin' => 'LHR',\n"
"    'last_flown' => '2020-03-04 11:00:00',\n"
"    'last_pilot_id' => 747,\n"
"]);\n"
"\n"
"$flight = $flight->replicate([\n"
"    'last_flown',\n"
"    'last_pilot_id'\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent.md:1023
#: ./docs/9.x/eloquent.md:1192
#: ./docs/10.x/eloquent.md:1166
#: ./docs/11.x/eloquent.md:1180
#: ./docs/master/eloquent.md:1163
#~ msgctxt "P"
#~ msgid "<a name=\"query-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1024
#: ./docs/9.x/eloquent.md:1193
#: ./docs/10.x/eloquent.md:1167
#: ./docs/11.x/eloquent.md:1181
#: ./docs/master/eloquent.md:1164
msgctxt "H2"
msgid "Query Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1026
#: ./docs/9.x/eloquent.md:1195
#: ./docs/10.x/eloquent.md:1169
#: ./docs/11.x/eloquent.md:1183
#: ./docs/master/eloquent.md:1166
#~ msgctxt "P"
#~ msgid "<a name=\"global-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1027
#: ./docs/9.x/eloquent.md:1196
#: ./docs/10.x/eloquent.md:1170
#: ./docs/11.x/eloquent.md:1184
#: ./docs/master/eloquent.md:1167
msgctxt "H3"
msgid "Global Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1029
#: ./docs/9.x/eloquent.md:1198
#: ./docs/10.x/eloquent.md:1172
#: ./docs/11.x/eloquent.md:1186
#: ./docs/master/eloquent.md:1169
msgctxt "P"
msgid "Global scopes allow you to add constraints to all queries for a given model. Laravel's own [soft delete](#soft-deleting) functionality utilizes global scopes to only retrieve \"non-deleted\" models from the database. Writing your own global scopes can provide a convenient, easy way to make sure every query for a given model receives certain constraints."
msgstr ""

#: ./docs/8.x/eloquent.md:1031
#: ./docs/9.x/eloquent.md:1200
#: ./docs/10.x/eloquent.md:1183
#: ./docs/11.x/eloquent.md:1197
#: ./docs/master/eloquent.md:1180
#~ msgctxt "P"
#~ msgid "<a name=\"writing-global-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1032
#: ./docs/9.x/eloquent.md:1201
#: ./docs/10.x/eloquent.md:1184
#: ./docs/11.x/eloquent.md:1198
#: ./docs/master/eloquent.md:1181
msgctxt "H4"
msgid "Writing Global Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1034
#: ./docs/9.x/eloquent.md:1203
msgctxt "P"
msgid "Writing a global scope is simple. First, define a class that implements the `Illuminate\\Database\\Eloquent\\Scope` interface. Laravel does not have a conventional location where you should place scope classes, so you are free to place this class in any directory that you wish."
msgstr ""

#: ./docs/8.x/eloquent.md:1036
#: ./docs/9.x/eloquent.md:1205
msgctxt "P"
msgid "The `Scope` interface requires you to implement one method: `apply`. The `apply` method may add `where` constraints or other types of clauses to the query as needed:"
msgstr ""

#: ./docs/8.x/eloquent.md:1038
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Scopes;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Scope;\n"
"\n"
"class AncientScope implements Scope\n"
"{\n"
"    /**\n"
"     * Apply the scope to a given Eloquent query builder.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @return void\n"
"     */\n"
"    public function apply(Builder $builder, Model $model)\n"
"    {\n"
"        $builder->where('created_at', '<', now()->subYears(2000));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1043
#: ./docs/11.x/eloquent.md:1061
#: ./docs/master/eloquent.md:1044
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Prunable;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    use Prunable;\n"
"\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     */\n"
"    public function prunable(): Builder\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1061
#: ./docs/9.x/eloquent.md:1231
#: ./docs/10.x/eloquent.md:1208
#: ./docs/11.x/eloquent.md:1222
#: ./docs/master/eloquent.md:1205
msgctxt "P"
msgid "If your global scope is adding columns to the select clause of the query, you should use the `addSelect` method instead of `select`. This will prevent the unintentional replacement of the query's existing select clause."
msgstr ""

#: ./docs/8.x/eloquent.md:1063
#: ./docs/9.x/eloquent.md:1233
#: ./docs/10.x/eloquent.md:1210
#: ./docs/11.x/eloquent.md:1224
#: ./docs/master/eloquent.md:1207
#~ msgctxt "P"
#~ msgid "<a name=\"applying-global-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1064
#: ./docs/9.x/eloquent.md:1234
#: ./docs/10.x/eloquent.md:1211
#: ./docs/11.x/eloquent.md:1225
#: ./docs/master/eloquent.md:1208
msgctxt "H4"
msgid "Applying Global Scopes"
msgstr ""

#: ./docs/10.x/eloquent.md:1066
#: ./docs/11.x/eloquent.md:1084
#: ./docs/master/eloquent.md:1067
msgctxt "CODE"
msgid ""
"/**\n"
" * Prepare the model for pruning.\n"
" */\n"
"protected function pruning(): void\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1066
#: ./docs/9.x/eloquent.md:1236
msgctxt "P"
msgid "To assign a global scope to a model, you should override the model's `booted` method and invoke the model's `addGlobalScope` method. The `addGlobalScope` method accepts an instance of your scope as its only argument:"
msgstr ""

#: ./docs/8.x/eloquent.md:1068
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Scopes\\AncientScope;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope(new AncientScope);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1076
msgctxt "CODE"
msgid ""
"/**\n"
" * Define the application's command schedule.\n"
" */\n"
"protected function schedule(Schedule $schedule): void\n"
"{\n"
"    $schedule->command('model:prune')->daily();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1088
#: ./docs/9.x/eloquent.md:1258
#: ./docs/10.x/eloquent.md:1248
#: ./docs/11.x/eloquent.md:1262
#: ./docs/master/eloquent.md:1245
msgctxt "P"
msgid "After adding the scope in the example above to the `App\\Models\\User` model, a call to the `User::all()` method will execute the following SQL query:"
msgstr ""

#: ./docs/8.x/eloquent.md:1090
#: ./docs/9.x/eloquent.md:1260
#: ./docs/10.x/eloquent.md:1250
#: ./docs/11.x/eloquent.md:1264
#: ./docs/master/eloquent.md:1247
msgctxt "CODE: sql"
msgid "select * from `users` where `created_at` < 0021-02-18 00:00:00"
msgstr ""

#: ./docs/11.x/eloquent.md:1092
#: ./docs/master/eloquent.md:1075
msgctxt "P"
msgid "After configuring your prunable model, you should schedule the `model:prune` Artisan command in your application's `routes/console.php` file. You are free to choose the appropriate interval at which this command should be run:"
msgstr ""

#: ./docs/11.x/eloquent.md:1094
#: ./docs/master/eloquent.md:1077
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Schedule;\n"
"\n"
"Schedule::command('model:prune')->daily();"
msgstr ""

#: ./docs/8.x/eloquent.md:1094
#: ./docs/9.x/eloquent.md:1264
#: ./docs/10.x/eloquent.md:1254
#: ./docs/11.x/eloquent.md:1268
#: ./docs/master/eloquent.md:1251
#~ msgctxt "P"
#~ msgid "<a name=\"anonymous-global-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1095
#: ./docs/9.x/eloquent.md:1265
#: ./docs/10.x/eloquent.md:1255
#: ./docs/11.x/eloquent.md:1269
#: ./docs/master/eloquent.md:1252
msgctxt "H4"
msgid "Anonymous Global Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1097
#: ./docs/9.x/eloquent.md:1267
#: ./docs/10.x/eloquent.md:1257
#: ./docs/11.x/eloquent.md:1271
#: ./docs/master/eloquent.md:1254
msgctxt "P"
msgid "Eloquent also allows you to define global scopes using closures, which is particularly useful for simple scopes that do not warrant a separate class of their own. When defining a global scope using a closure, you should provide a scope name of your own choosing as the first argument to the `addGlobalScope` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:1099
#: ./docs/9.x/eloquent.md:1269
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope('ancient', function (Builder $builder) {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:1100
#: ./docs/master/eloquent.md:1083
msgctxt "CODE"
msgid ""
"Schedule::command('model:prune', [\n"
"    '--model' => [Address::class, Flight::class],\n"
"])->daily();"
msgstr ""

#: ./docs/11.x/eloquent.md:1106
#: ./docs/master/eloquent.md:1089
msgctxt "CODE"
msgid ""
"Schedule::command('model:prune', [\n"
"    '--except' => [Address::class, Flight::class],\n"
"])->daily();"
msgstr ""

#: ./docs/10.x/eloquent.md:1110
#: ./docs/11.x/eloquent.md:1124
#: ./docs/master/eloquent.md:1107
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\MassPrunable;\n"
"\n"
"class Flight extends Model\n"
"{\n"
"    use MassPrunable;\n"
"\n"
"    /**\n"
"     * Get the prunable model query.\n"
"     */\n"
"    public function prunable(): Builder\n"
"    {\n"
"        return static::where('created_at', '<=', now()->subMonth());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1121
#: ./docs/9.x/eloquent.md:1291
#: ./docs/10.x/eloquent.md:1279
#: ./docs/11.x/eloquent.md:1293
#: ./docs/master/eloquent.md:1276
#~ msgctxt "P"
#~ msgid "<a name=\"removing-global-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1122
#: ./docs/9.x/eloquent.md:1292
#: ./docs/10.x/eloquent.md:1280
#: ./docs/11.x/eloquent.md:1294
#: ./docs/master/eloquent.md:1277
msgctxt "H4"
msgid "Removing Global Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1124
#: ./docs/9.x/eloquent.md:1294
#: ./docs/10.x/eloquent.md:1282
#: ./docs/11.x/eloquent.md:1296
#: ./docs/master/eloquent.md:1279
msgctxt "P"
msgid "If you would like to remove a global scope for a given query, you may use the `withoutGlobalScope` method. This method accepts the class name of the global scope as its only argument:"
msgstr ""

#: ./docs/8.x/eloquent.md:1126
#: ./docs/9.x/eloquent.md:1296
#: ./docs/10.x/eloquent.md:1284
#: ./docs/11.x/eloquent.md:1298
#: ./docs/master/eloquent.md:1281
msgctxt "CODE"
msgid "User::withoutGlobalScope(AncientScope::class)->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:1128
#: ./docs/9.x/eloquent.md:1298
#: ./docs/10.x/eloquent.md:1286
#: ./docs/11.x/eloquent.md:1300
#: ./docs/master/eloquent.md:1283
msgctxt "P"
msgid "Or, if you defined the global scope using a closure, you should pass the string name that you assigned to the global scope:"
msgstr ""

#: ./docs/8.x/eloquent.md:1130
#: ./docs/9.x/eloquent.md:1300
#: ./docs/10.x/eloquent.md:1288
#: ./docs/11.x/eloquent.md:1302
#: ./docs/master/eloquent.md:1285
msgctxt "CODE"
msgid "User::withoutGlobalScope('ancient')->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:1132
#: ./docs/9.x/eloquent.md:1302
#: ./docs/10.x/eloquent.md:1290
#: ./docs/11.x/eloquent.md:1304
#: ./docs/master/eloquent.md:1287
msgctxt "P"
msgid "If you would like to remove several or even all of the query's global scopes, you may use the `withoutGlobalScopes` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:1134
#: ./docs/9.x/eloquent.md:1304
#: ./docs/10.x/eloquent.md:1292
#: ./docs/11.x/eloquent.md:1306
#: ./docs/master/eloquent.md:1289
msgctxt "CODE"
msgid ""
"// Remove all of the global scopes...\n"
"User::withoutGlobalScopes()->get();\n"
"\n"
"// Remove some of the global scopes...\n"
"User::withoutGlobalScopes([\n"
"    FirstScope::class, SecondScope::class\n"
"])->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:1142
#: ./docs/9.x/eloquent.md:1312
#: ./docs/10.x/eloquent.md:1300
#: ./docs/11.x/eloquent.md:1314
#: ./docs/master/eloquent.md:1297
#~ msgctxt "P"
#~ msgid "<a name=\"local-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1143
#: ./docs/9.x/eloquent.md:1313
#: ./docs/10.x/eloquent.md:1301
#: ./docs/11.x/eloquent.md:1315
#: ./docs/master/eloquent.md:1298
msgctxt "H3"
msgid "Local Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1145
#: ./docs/9.x/eloquent.md:1315
#: ./docs/10.x/eloquent.md:1303
#: ./docs/11.x/eloquent.md:1317
#: ./docs/master/eloquent.md:1300
msgctxt "P"
msgid "Local scopes allow you to define common sets of query constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`."
msgstr ""

#: ./docs/8.x/eloquent.md:1147
#: ./docs/9.x/eloquent.md:1317
#: ./docs/10.x/eloquent.md:1305
#: ./docs/11.x/eloquent.md:1319
#: ./docs/master/eloquent.md:1302
msgctxt "P"
msgid "Scopes should always return the same query builder instance or `void`:"
msgstr ""

#: ./docs/8.x/eloquent.md:1149
#: ./docs/9.x/eloquent.md:1319
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include popular users.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function scopePopular($query)\n"
"    {\n"
"        return $query->where('votes', '>', 100);\n"
"    }\n"
"\n"
"    /**\n"
"     * Scope a query to only include active users.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return void\n"
"     */\n"
"    public function scopeActive($query)\n"
"    {\n"
"        $query->where('active', 1);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1174
#: ./docs/11.x/eloquent.md:1188
#: ./docs/master/eloquent.md:1171
#~ msgctxt "P"
#~ msgid "<a name=\"generating-scopes\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent.md:1175
#: ./docs/11.x/eloquent.md:1189
#: ./docs/master/eloquent.md:1172
msgctxt "H4"
msgid "Generating Scopes"
msgstr ""

#: ./docs/10.x/eloquent.md:1177
#: ./docs/11.x/eloquent.md:1191
#: ./docs/master/eloquent.md:1174
msgctxt "P"
msgid "To generate a new global scope, you may invoke the `make:scope` Artisan command, which will place the generated scope in your application's `app/Models/Scopes` directory:"
msgstr ""

#: ./docs/10.x/eloquent.md:1179
#: ./docs/11.x/eloquent.md:1193
#: ./docs/master/eloquent.md:1176
msgctxt "CODE: shell"
msgid "php artisan make:scope AncientScope"
msgstr ""

#: ./docs/8.x/eloquent.md:1180
#: ./docs/9.x/eloquent.md:1350
#: ./docs/10.x/eloquent.md:1333
#: ./docs/11.x/eloquent.md:1347
#: ./docs/master/eloquent.md:1330
#~ msgctxt "P"
#~ msgid "<a name=\"utilizing-a-local-scope\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1181
#: ./docs/9.x/eloquent.md:1351
msgctxt "H4"
msgid "Utilizing A Local Scope"
msgstr ""

#: ./docs/8.x/eloquent.md:1183
#: ./docs/9.x/eloquent.md:1353
#: ./docs/10.x/eloquent.md:1336
#: ./docs/11.x/eloquent.md:1350
#: ./docs/master/eloquent.md:1333
msgctxt "P"
msgid "Once the scope has been defined, you may call the scope methods when querying the model. However, you should not include the `scope` prefix when calling the method. You can even chain calls to various scopes:"
msgstr ""

#: ./docs/8.x/eloquent.md:1185
#: ./docs/9.x/eloquent.md:1355
#: ./docs/10.x/eloquent.md:1338
#: ./docs/11.x/eloquent.md:1352
#: ./docs/master/eloquent.md:1335
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::popular()->active()->orderBy('created_at')->get();"
msgstr ""

#: ./docs/10.x/eloquent.md:1186
#: ./docs/11.x/eloquent.md:1200
#: ./docs/master/eloquent.md:1183
msgctxt "P"
msgid "Writing a global scope is simple. First, use the `make:scope` command to generate a class that implements the `Illuminate\\Database\\Eloquent\\Scope` interface. The `Scope` interface requires you to implement one method: `apply`. The `apply` method may add `where` constraints or other types of clauses to the query as needed:"
msgstr ""

#: ./docs/10.x/eloquent.md:1188
#: ./docs/11.x/eloquent.md:1202
#: ./docs/master/eloquent.md:1185
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models\\Scopes;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Scope;\n"
"\n"
"class AncientScope implements Scope\n"
"{\n"
"    /**\n"
"     * Apply the scope to a given Eloquent query builder.\n"
"     */\n"
"    public function apply(Builder $builder, Model $model): void\n"
"    {\n"
"        $builder->where('created_at', '<', now()->subYears(2000));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1189
#: ./docs/9.x/eloquent.md:1359
#: ./docs/10.x/eloquent.md:1342
#: ./docs/11.x/eloquent.md:1356
#: ./docs/master/eloquent.md:1339
msgctxt "P"
msgid "Combining multiple Eloquent model scopes via an `or` query operator may require the use of closures to achieve the correct [logical grouping](/docs/{{version}}/queries#logical-grouping):"
msgstr ""

#: ./docs/8.x/eloquent.md:1191
#: ./docs/9.x/eloquent.md:1361
#: ./docs/10.x/eloquent.md:1344
#: ./docs/11.x/eloquent.md:1358
#: ./docs/master/eloquent.md:1341
msgctxt "CODE"
msgid ""
"$users = User::popular()->orWhere(function (Builder $query) {\n"
"    $query->active();\n"
"})->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:1195
#: ./docs/9.x/eloquent.md:1365
#: ./docs/10.x/eloquent.md:1348
#: ./docs/11.x/eloquent.md:1362
#: ./docs/master/eloquent.md:1345
msgctxt "P"
msgid "However, since this can be cumbersome, Laravel provides a \"higher order\" `orWhere` method that allows you to fluently chain scopes together without the use of closures:"
msgstr ""

#: ./docs/8.x/eloquent.md:1197
#: ./docs/9.x/eloquent.md:1367
msgctxt "CODE"
msgid "$users = App\\Models\\User::popular()->orWhere->active()->get();"
msgstr ""

#: ./docs/8.x/eloquent.md:1199
#: ./docs/9.x/eloquent.md:1369
#: ./docs/10.x/eloquent.md:1352
#: ./docs/11.x/eloquent.md:1366
#: ./docs/master/eloquent.md:1349
#~ msgctxt "P"
#~ msgid "<a name=\"dynamic-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1200
#: ./docs/9.x/eloquent.md:1370
#: ./docs/10.x/eloquent.md:1353
#: ./docs/11.x/eloquent.md:1367
#: ./docs/master/eloquent.md:1350
msgctxt "H4"
msgid "Dynamic Scopes"
msgstr ""

#: ./docs/8.x/eloquent.md:1202
#: ./docs/9.x/eloquent.md:1372
#: ./docs/10.x/eloquent.md:1355
#: ./docs/11.x/eloquent.md:1369
#: ./docs/master/eloquent.md:1352
msgctxt "P"
msgid "Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope method's signature. Scope parameters should be defined after the `$query` parameter:"
msgstr ""

#: ./docs/8.x/eloquent.md:1204
#: ./docs/9.x/eloquent.md:1374
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include users of a given type.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @param  mixed  $type\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    public function scopeOfType($query, $type)\n"
"    {\n"
"        return $query->where('type', $type);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:1207
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models\\Scopes;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Scope;\n"
"\n"
"class AncientScope implements Scope\n"
"{\n"
"    /**\n"
"     * Apply the scope to a given Eloquent query builder.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @return void\n"
"     */\n"
"    public function apply(Builder $builder, Model $model)\n"
"    {\n"
"        $builder->where('created_at', '<', now()->subYears(2000));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1213
#: ./docs/11.x/eloquent.md:1227
#: ./docs/master/eloquent.md:1210
msgctxt "P"
msgid "To assign a global scope to a model, you may simply place the `ScopedBy` attribute on the model:"
msgstr ""

#: ./docs/10.x/eloquent.md:1215
#: ./docs/11.x/eloquent.md:1229
#: ./docs/master/eloquent.md:1212
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Models\\Scopes\\AncientScope;\n"
"use Illuminate\\Database\\Eloquent\\Attributes\\ScopedBy;\n"
"\n"
"#[ScopedBy([AncientScope::class])]\n"
"class User extends Model\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1225
#: ./docs/9.x/eloquent.md:1395
#: ./docs/10.x/eloquent.md:1375
#: ./docs/11.x/eloquent.md:1389
#: ./docs/master/eloquent.md:1372
msgctxt "P"
msgid "Once the expected arguments have been added to your scope method's signature, you may pass the arguments when calling the scope:"
msgstr ""

#: ./docs/8.x/eloquent.md:1227
#: ./docs/9.x/eloquent.md:1397
#: ./docs/10.x/eloquent.md:1377
#: ./docs/11.x/eloquent.md:1391
#: ./docs/master/eloquent.md:1374
msgctxt "CODE"
msgid "$users = User::ofType('admin')->get();"
msgstr ""

#: ./docs/10.x/eloquent.md:1228
#: ./docs/11.x/eloquent.md:1242
#: ./docs/master/eloquent.md:1225
msgctxt "P"
msgid "Or, you may manually register the global scope by overriding the model's `booted` method and invoke the model's `addGlobalScope` method. The `addGlobalScope` method accepts an instance of your scope as its only argument:"
msgstr ""

#: ./docs/8.x/eloquent.md:1229
#: ./docs/9.x/eloquent.md:1399
#: ./docs/10.x/eloquent.md:1379
#: ./docs/11.x/eloquent.md:1393
#: ./docs/master/eloquent.md:1376
#~ msgctxt "P"
#~ msgid "<a name=\"comparing-models\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent.md:1230
#: ./docs/11.x/eloquent.md:1244
#: ./docs/master/eloquent.md:1227
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Models\\Scopes\\AncientScope;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     */\n"
"    protected static function booted(): void\n"
"    {\n"
"        static::addGlobalScope(new AncientScope);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1230
#: ./docs/9.x/eloquent.md:1400
#: ./docs/10.x/eloquent.md:1380
#: ./docs/11.x/eloquent.md:1394
#: ./docs/master/eloquent.md:1377
msgctxt "H2"
msgid "Comparing Models"
msgstr ""

#: ./docs/8.x/eloquent.md:1232
#: ./docs/9.x/eloquent.md:1402
#: ./docs/10.x/eloquent.md:1382
#: ./docs/11.x/eloquent.md:1396
#: ./docs/master/eloquent.md:1379
msgctxt "P"
msgid "Sometimes you may need to determine if two models are the \"same\" or not. The `is` and `isNot` methods may be used to quickly verify two models have the same primary key, table, and database connection or not:"
msgstr ""

#: ./docs/8.x/eloquent.md:1234
#: ./docs/9.x/eloquent.md:1404
msgctxt "CODE"
msgid ""
"if ($post->is($anotherPost)) {\n"
"    //\n"
"}\n"
"\n"
"if ($post->isNot($anotherPost)) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:1238
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Models\\Scopes\\AncientScope;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::addGlobalScope(new AncientScope);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1242
#: ./docs/9.x/eloquent.md:1412
#: ./docs/10.x/eloquent.md:1392
#: ./docs/11.x/eloquent.md:1406
#: ./docs/master/eloquent.md:1389
msgctxt "P"
msgid "The `is` and `isNot` methods are also available when using the `belongsTo`, `hasOne`, `morphTo`, and `morphOne` [relationships](/docs/{{version}}/eloquent-relationships). This method is particularly helpful when you would like to compare a related model without issuing a query to retrieve that model:"
msgstr ""

#: ./docs/8.x/eloquent.md:1244
#: ./docs/9.x/eloquent.md:1414
msgctxt "CODE"
msgid ""
"if ($post->author()->is($user)) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1248
#: ./docs/9.x/eloquent.md:1418
#: ./docs/10.x/eloquent.md:1398
#: ./docs/11.x/eloquent.md:1412
#: ./docs/master/eloquent.md:1395
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1249
#: ./docs/9.x/eloquent.md:1419
#: ./docs/10.x/eloquent.md:1399
#: ./docs/11.x/eloquent.md:1413
#: ./docs/master/eloquent.md:1396
msgctxt "H2"
msgid "Events"
msgstr ""

#: ./docs/8.x/eloquent.md:1251
#: ./docs/9.x/eloquent.md:1422
#: ./docs/10.x/eloquent.md:1402
#: ./docs/11.x/eloquent.md:1416
#: ./docs/master/eloquent.md:1399
msgctxt "P"
msgid "Want to broadcast your Eloquent events directly to your client-side application? Check out Laravel's [model event broadcasting](/docs/{{version}}/broadcasting#model-broadcasting)."
msgstr ""

#: ./docs/8.x/eloquent.md:1253
msgctxt "P"
msgid "Eloquent models dispatch several events, allowing you to hook into the following moments in a model's lifecycle: `retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `restoring`, `restored`, and `replicating`."
msgstr ""

#: ./docs/8.x/eloquent.md:1255
#: ./docs/9.x/eloquent.md:1426
#: ./docs/10.x/eloquent.md:1406
#: ./docs/11.x/eloquent.md:1420
#: ./docs/master/eloquent.md:1403
msgctxt "P"
msgid "The `retrieved` event will dispatch when an existing model is retrieved from the database. When a new model is saved for the first time, the `creating` and `created` events will dispatch. The `updating` / `updated` events will dispatch when an existing model is modified and the `save` method is called. The `saving` / `saved` events will dispatch when a model is created or updated - even if the model's attributes have not been changed. Event names ending with `-ing` are dispatched before any changes to the model are persisted, while events ending with `-ed` are dispatched after the changes to the model are persisted."
msgstr ""

#: ./docs/8.x/eloquent.md:1257
#: ./docs/9.x/eloquent.md:1428
#: ./docs/10.x/eloquent.md:1408
#: ./docs/11.x/eloquent.md:1422
#: ./docs/master/eloquent.md:1405
msgctxt "P"
msgid "To start listening to model events, define a `$dispatchesEvents` property on your Eloquent model. This property maps various points of the Eloquent model's lifecycle to your own [event classes](/docs/{{version}}/events). Each model event class should expect to receive an instance of the affected model via its constructor:"
msgstr ""

#: ./docs/10.x/eloquent.md:1259
#: ./docs/11.x/eloquent.md:1273
#: ./docs/master/eloquent.md:1256
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     */\n"
"    protected static function booted(): void\n"
"    {\n"
"        static::addGlobalScope('ancient', function (Builder $builder) {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1259
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Events\\UserDeleted;\n"
"use App\\Events\\UserSaved;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * The event map for the model.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dispatchesEvents = [\n"
"        'saved' => UserSaved::class,\n"
"        'deleted' => UserDeleted::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1282
#: ./docs/9.x/eloquent.md:1454
#: ./docs/10.x/eloquent.md:1434
#: ./docs/11.x/eloquent.md:1448
#: ./docs/master/eloquent.md:1431
msgctxt "P"
msgid "After defining and mapping your Eloquent events, you may use [event listeners](/docs/{{version}}/events#defining-listeners) to handle the events."
msgstr ""

#: ./docs/8.x/eloquent.md:1284
#: ./docs/9.x/eloquent.md:1457
#: ./docs/10.x/eloquent.md:1437
#: ./docs/11.x/eloquent.md:1451
#: ./docs/master/eloquent.md:1434
msgctxt "P"
msgid "When issuing a mass update or delete query via Eloquent, the `saved`, `updated`, `deleting`, and `deleted` model events will not be dispatched for the affected models. This is because the models are never actually retrieved when performing mass updates or deletes."
msgstr ""

#: ./docs/8.x/eloquent.md:1286
#: ./docs/9.x/eloquent.md:1459
#: ./docs/10.x/eloquent.md:1439
#: ./docs/11.x/eloquent.md:1453
#: ./docs/master/eloquent.md:1436
#~ msgctxt "P"
#~ msgid "<a name=\"events-using-closures\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1287
#: ./docs/9.x/eloquent.md:1460
#: ./docs/10.x/eloquent.md:1440
#: ./docs/11.x/eloquent.md:1454
#: ./docs/master/eloquent.md:1437
msgctxt "H3"
msgid "Using Closures"
msgstr ""

#: ./docs/8.x/eloquent.md:1289
#: ./docs/9.x/eloquent.md:1462
#: ./docs/10.x/eloquent.md:1442
#: ./docs/11.x/eloquent.md:1456
#: ./docs/master/eloquent.md:1439
msgctxt "P"
msgid "Instead of using custom event classes, you may register closures that execute when various model events are dispatched. Typically, you should register these closures in the `booted` method of your model:"
msgstr ""

#: ./docs/8.x/eloquent.md:1291
#: ./docs/9.x/eloquent.md:1464
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::created(function ($user) {\n"
"            //\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1307
#: ./docs/11.x/eloquent.md:1321
#: ./docs/master/eloquent.md:1304
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include popular users.\n"
"     */\n"
"    public function scopePopular(Builder $query): void\n"
"    {\n"
"        $query->where('votes', '>', 100);\n"
"    }\n"
"\n"
"    /**\n"
"     * Scope a query to only include active users.\n"
"     */\n"
"    public function scopeActive(Builder $query): void\n"
"    {\n"
"        $query->where('active', 1);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1312
#: ./docs/9.x/eloquent.md:1485
#: ./docs/10.x/eloquent.md:1463
#: ./docs/11.x/eloquent.md:1477
#: ./docs/master/eloquent.md:1460
msgctxt "P"
msgid "If needed, you may utilize [queueable anonymous event listeners](/docs/{{version}}/events#queuable-anonymous-event-listeners) when registering model events. This will instruct Laravel to execute the model event listener in the background using your application's [queue](/docs/{{version}}/queues):"
msgstr ""

#: ./docs/8.x/eloquent.md:1314
#: ./docs/9.x/eloquent.md:1487
msgctxt "CODE"
msgid ""
"use function Illuminate\\Events\\queueable;\n"
"\n"
"static::created(queueable(function ($user) {\n"
"    //\n"
"}));"
msgstr ""

#: ./docs/8.x/eloquent.md:1320
#: ./docs/9.x/eloquent.md:1493
#: ./docs/10.x/eloquent.md:1471
#: ./docs/11.x/eloquent.md:1485
#: ./docs/master/eloquent.md:1468
#~ msgctxt "P"
#~ msgid "<a name=\"observers\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1321
#: ./docs/9.x/eloquent.md:1494
#: ./docs/10.x/eloquent.md:1472
#: ./docs/11.x/eloquent.md:1486
#: ./docs/master/eloquent.md:1469
msgctxt "H3"
msgid "Observers"
msgstr ""

#: ./docs/8.x/eloquent.md:1323
#: ./docs/9.x/eloquent.md:1496
#: ./docs/10.x/eloquent.md:1474
#: ./docs/11.x/eloquent.md:1488
#: ./docs/master/eloquent.md:1471
#~ msgctxt "P"
#~ msgid "<a name=\"defining-observers\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1324
#: ./docs/9.x/eloquent.md:1497
#: ./docs/10.x/eloquent.md:1475
#: ./docs/11.x/eloquent.md:1489
#: ./docs/master/eloquent.md:1472
msgctxt "H4"
msgid "Defining Observers"
msgstr ""

#: ./docs/8.x/eloquent.md:1326
#: ./docs/9.x/eloquent.md:1499
#: ./docs/10.x/eloquent.md:1477
#: ./docs/11.x/eloquent.md:1491
#: ./docs/master/eloquent.md:1474
msgctxt "P"
msgid "If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observer classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the affected model as their only argument. The `make:observer` Artisan command is the easiest way to create a new observer class:"
msgstr ""

#: ./docs/8.x/eloquent.md:1328
#: ./docs/9.x/eloquent.md:1501
#: ./docs/10.x/eloquent.md:1479
#: ./docs/11.x/eloquent.md:1493
#: ./docs/master/eloquent.md:1476
msgctxt "CODE"
msgid "php artisan make:observer UserObserver --model=User"
msgstr ""

#: ./docs/8.x/eloquent.md:1330
msgctxt "P"
msgid "This command will place the new observer in your `App/Observers` directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:"
msgstr ""

#: ./docs/8.x/eloquent.md:1332
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Observers;\n"
"\n"
"use App\\Models\\User;\n"
"\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function updated(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function deleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function forceDeleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1334
#: ./docs/11.x/eloquent.md:1348
#: ./docs/master/eloquent.md:1331
msgctxt "H4"
msgid "Utilizing a Local Scope"
msgstr ""

#: ./docs/10.x/eloquent.md:1350
#: ./docs/11.x/eloquent.md:1364
#: ./docs/master/eloquent.md:1347
msgctxt "CODE"
msgid "$users = User::popular()->orWhere->active()->get();"
msgstr ""

#: ./docs/10.x/eloquent.md:1357
#: ./docs/11.x/eloquent.md:1371
#: ./docs/master/eloquent.md:1354
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Scope a query to only include users of a given type.\n"
"     */\n"
"    public function scopeOfType(Builder $query, string $type): void\n"
"    {\n"
"        $query->where('type', $type);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1384
#: ./docs/11.x/eloquent.md:1398
#: ./docs/master/eloquent.md:1381
msgctxt "CODE"
msgid ""
"if ($post->is($anotherPost)) {\n"
"    // ...\n"
"}\n"
"\n"
"if ($post->isNot($anotherPost)) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1385
#: ./docs/9.x/eloquent.md:1571
msgctxt "P"
msgid "To register an observer, you need to call the `observe` method on the model you wish to observe. You may register observers in the `boot` method of your application's `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#: ./docs/8.x/eloquent.md:1387
#: ./docs/9.x/eloquent.md:1573
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n"
"\n"
"/**\n"
" * Register any events for your application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    User::observe(UserObserver::class);\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1394
#: ./docs/11.x/eloquent.md:1408
#: ./docs/master/eloquent.md:1391
msgctxt "CODE"
msgid ""
"if ($post->author()->is($user)) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1400
#: ./docs/9.x/eloquent.md:1601
#: ./docs/10.x/eloquent.md:1559
#: ./docs/11.x/eloquent.md:1573
#: ./docs/master/eloquent.md:1556
msgctxt "P"
msgid "There are additional events an observer can listen to, such as `saving` and `retrieved`. These events are described within the [events](#events) documentation."
msgstr ""

#: ./docs/8.x/eloquent.md:1402
#: ./docs/9.x/eloquent.md:1603
#: ./docs/10.x/eloquent.md:1561
#: ./docs/11.x/eloquent.md:1575
#: ./docs/master/eloquent.md:1558
#~ msgctxt "P"
#~ msgid "<a name=\"observers-and-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1403
#: ./docs/9.x/eloquent.md:1604
msgctxt "H4"
msgid "Observers & Database Transactions"
msgstr ""

#: ./docs/8.x/eloquent.md:1405
#: ./docs/9.x/eloquent.md:1606
msgctxt "P"
msgid "When models are being created within a database transaction, you may want to instruct an observer to only execute its event handlers after the database transaction is committed. You may accomplish this by defining an `$afterCommit` property on the observer. If a database transaction is not in progress, the event handlers will execute immediately:"
msgstr ""

#: ./docs/8.x/eloquent.md:1407
#: ./docs/9.x/eloquent.md:1608
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Observers;\n"
"\n"
"use App\\Models\\User;\n"
"\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle events after all transactions are committed.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $afterCommit = true;\n"
"\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:1424
#: ./docs/master/eloquent.md:1407
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Events\\UserDeleted;\n"
"use App\\Events\\UserSaved;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * The event map for the model.\n"
"     *\n"
"     * @var array<string, string>\n"
"     */\n"
"    protected $dispatchesEvents = [\n"
"        'saved' => UserSaved::class,\n"
"        'deleted' => UserDeleted::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:1424
#: ./docs/10.x/eloquent.md:1404
#: ./docs/11.x/eloquent.md:1418
#: ./docs/master/eloquent.md:1401
msgctxt "P"
msgid "Eloquent models dispatch several events, allowing you to hook into the following moments in a model's lifecycle: `retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `trashed`, `forceDeleting`, `forceDeleted`, `restoring`, `restored`, and `replicating`."
msgstr ""

#: ./docs/9.x/eloquent.md:1430
#: ./docs/10.x/eloquent.md:1410
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Events\\UserDeleted;\n"
"use App\\Events\\UserSaved;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * The event map for the model.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dispatchesEvents = [\n"
"        'saved' => UserSaved::class,\n"
"        'deleted' => UserDeleted::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1434
#: ./docs/9.x/eloquent.md:1635
#: ./docs/10.x/eloquent.md:1584
#: ./docs/11.x/eloquent.md:1598
#: ./docs/master/eloquent.md:1581
#~ msgctxt "P"
#~ msgid "<a name=\"muting-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1435
#: ./docs/9.x/eloquent.md:1636
#: ./docs/10.x/eloquent.md:1585
#: ./docs/11.x/eloquent.md:1599
#: ./docs/master/eloquent.md:1582
msgctxt "H3"
msgid "Muting Events"
msgstr ""

#: ./docs/8.x/eloquent.md:1437
#: ./docs/9.x/eloquent.md:1638
#: ./docs/10.x/eloquent.md:1587
#: ./docs/11.x/eloquent.md:1601
#: ./docs/master/eloquent.md:1584
msgctxt "P"
msgid "You may occasionally need to temporarily \"mute\" all events fired by a model. You may achieve this using the `withoutEvents` method. The `withoutEvents` method accepts a closure as its only argument. Any code executed within this closure will not dispatch model events, and any value returned by the closure will be returned by the `withoutEvents` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:1439
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::withoutEvents(function () use () {\n"
"    User::findOrFail(1)->delete();\n"
"\n"
"    return User::find(2);\n"
"});"
msgstr ""

#: ./docs/10.x/eloquent.md:1444
#: ./docs/11.x/eloquent.md:1458
#: ./docs/master/eloquent.md:1441
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     */\n"
"    protected static function booted(): void\n"
"    {\n"
"        static::created(function (User $user) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent.md:1447
#: ./docs/9.x/eloquent.md:1648
#: ./docs/10.x/eloquent.md:1597
#: ./docs/11.x/eloquent.md:1611
#: ./docs/master/eloquent.md:1594
#~ msgctxt "P"
#~ msgid "<a name=\"saving-a-single-model-without-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent.md:1448
#: ./docs/9.x/eloquent.md:1649
msgctxt "H4"
msgid "Saving A Single Model Without Events"
msgstr ""

#: ./docs/8.x/eloquent.md:1450
#: ./docs/9.x/eloquent.md:1651
#: ./docs/10.x/eloquent.md:1600
#: ./docs/11.x/eloquent.md:1614
#: ./docs/master/eloquent.md:1597
msgctxt "P"
msgid "Sometimes you may wish to \"save\" a given model without dispatching any events. You may accomplish this using the `saveQuietly` method:"
msgstr ""

#: ./docs/8.x/eloquent.md:1452
#: ./docs/9.x/eloquent.md:1653
#: ./docs/10.x/eloquent.md:1602
#: ./docs/11.x/eloquent.md:1616
#: ./docs/master/eloquent.md:1599
msgctxt "CODE"
msgid ""
"$user = User::findOrFail(1);\n"
"\n"
"$user->name = 'Victoria Faith';\n"
"\n"
"$user->saveQuietly();"
msgstr ""

#: ./docs/10.x/eloquent.md:1465
#: ./docs/11.x/eloquent.md:1479
#: ./docs/master/eloquent.md:1462
msgctxt "CODE"
msgid ""
"use function Illuminate\\Events\\queueable;\n"
"\n"
"static::created(queueable(function (User $user) {\n"
"    // ...\n"
"}));"
msgstr ""

#: ./docs/10.x/eloquent.md:1485
#: ./docs/master/eloquent.md:1482
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Observers;\n"
"\n"
"use App\\Models\\User;\n"
"\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     */\n"
"    public function created(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     */\n"
"    public function updated(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     */\n"
"    public function deleted(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"    \n"
"    /**\n"
"     * Handle the User \"restored\" event.\n"
"     */\n"
"    public function restored(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     */\n"
"    public function forceDeleted(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:1499
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Observers;\n"
"\n"
"use App\\Models\\User;\n"
"\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     */\n"
"    public function created(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     */\n"
"    public function updated(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     */\n"
"    public function deleted(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"restored\" event.\n"
"     */\n"
"    public function restored(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     */\n"
"    public function forceDeleted(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:1505
#: ./docs/10.x/eloquent.md:1483
#: ./docs/11.x/eloquent.md:1497
#: ./docs/master/eloquent.md:1480
msgctxt "P"
msgid "This command will place the new observer in your `app/Observers` directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:"
msgstr ""

#: ./docs/9.x/eloquent.md:1507
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Observers;\n"
"\n"
"use App\\Models\\User;\n"
"\n"
"class UserObserver\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function created(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"updated\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function updated(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"deleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function deleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"    \n"
"    /**\n"
"     * Handle the User \"restored\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function restored(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the User \"forceDeleted\" event.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return void\n"
"     */\n"
"    public function forceDeleted(User $user)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1534
#: ./docs/11.x/eloquent.md:1548
#: ./docs/master/eloquent.md:1531
msgctxt "P"
msgid "To register an observer, you may place the `ObservedBy` attribute on the corresponding model:"
msgstr ""

#: ./docs/10.x/eloquent.md:1536
#: ./docs/11.x/eloquent.md:1550
#: ./docs/master/eloquent.md:1533
msgctxt "CODE"
msgid ""
"use App\\Observers\\UserObserver;\n"
"use Illuminate\\Database\\Eloquent\\Attributes\\ObservedBy;\n"
"\n"
"#[ObservedBy([UserObserver::class])]\n"
"class User extends Authenticatable\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1545
msgctxt "P"
msgid "Or, you may manually register an observer by calling the `observe` method on the model you wish to observe. You may register observers in the `boot` method of your application's `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#: ./docs/10.x/eloquent.md:1547
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n"
"\n"
"/**\n"
" * Register any events for your application.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    User::observe(UserObserver::class);\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent.md:1559
#: ./docs/master/eloquent.md:1542
msgctxt "P"
msgid "Or, you may manually register an observer by invoking the `observe` method on the model you wish to observe. You may register observers in the `boot` method of your application's `AppServiceProvider` class:"
msgstr ""

#: ./docs/11.x/eloquent.md:1561
#: ./docs/master/eloquent.md:1544
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    User::observe(UserObserver::class);\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent.md:1562
#: ./docs/11.x/eloquent.md:1576
#: ./docs/master/eloquent.md:1559
msgctxt "H4"
msgid "Observers and Database Transactions"
msgstr ""

#: ./docs/10.x/eloquent.md:1564
#: ./docs/11.x/eloquent.md:1578
#: ./docs/master/eloquent.md:1561
msgctxt "P"
msgid "When models are being created within a database transaction, you may want to instruct an observer to only execute its event handlers after the database transaction is committed. You may accomplish this by implementing the `ShouldHandleEventsAfterCommit` interface on your observer. If a database transaction is not in progress, the event handlers will execute immediately:"
msgstr ""

#: ./docs/10.x/eloquent.md:1566
#: ./docs/11.x/eloquent.md:1580
#: ./docs/master/eloquent.md:1563
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Observers;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Contracts\\Events\\ShouldHandleEventsAfterCommit;\n"
"\n"
"class UserObserver implements ShouldHandleEventsAfterCommit\n"
"{\n"
"    /**\n"
"     * Handle the User \"created\" event.\n"
"     */\n"
"    public function created(User $user): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent.md:1586
msgctxt "P"
msgid "Alternatively, you may list your observers within an `$observers` property of your applications' `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#: ./docs/9.x/eloquent.md:1588
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use App\\Observers\\UserObserver;\n"
"\n"
"/**\n"
" * The model observers for your application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $observers = [\n"
"    User::class => [UserObserver::class],\n"
"];"
msgstr ""

#: ./docs/10.x/eloquent.md:1598
#: ./docs/11.x/eloquent.md:1612
#: ./docs/master/eloquent.md:1595
msgctxt "H4"
msgid "Saving a Single Model Without Events"
msgstr ""

#: ./docs/9.x/eloquent.md:1640
#: ./docs/10.x/eloquent.md:1589
#: ./docs/11.x/eloquent.md:1603
#: ./docs/master/eloquent.md:1586
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::withoutEvents(function () {\n"
"    User::findOrFail(1)->delete();\n"
"\n"
"    return User::find(2);\n"
"});"
msgstr ""

#: ./docs/9.x/eloquent.md:1659
#: ./docs/10.x/eloquent.md:1608
#: ./docs/11.x/eloquent.md:1622
#: ./docs/master/eloquent.md:1605
msgctxt "P"
msgid "You may also \"update\", \"delete\", \"soft delete\", \"restore\", and \"replicate\" a given model without dispatching any events:"
msgstr ""

#: ./docs/9.x/eloquent.md:1661
#: ./docs/10.x/eloquent.md:1610
#: ./docs/11.x/eloquent.md:1624
#: ./docs/master/eloquent.md:1607
msgctxt "CODE"
msgid ""
"$user->deleteQuietly();\n"
"$user->forceDeleteQuietly();\n"
"$user->restoreQuietly();"
msgstr ""
