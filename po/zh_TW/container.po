msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/container.pot\n"
"X-Crowdin-File-ID: 31\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-01-25 09:52\n"

#: docs/8.x/container.md:block 1 (header)
msgid "Service Container"
msgstr "Service Container"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Zero Configuration Resolution](#zero-configuration-resolution)"
msgstr "[不需設定的解析](#zero-configuration-resolution)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[When To Use The Container](#when-to-use-the-container)"
msgstr "[什麼時候該使用 Container](#when-to-use-the-container)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding](#binding)"
msgstr "[繫結 (Binding)](#binding)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Basics](#binding-basics)"
msgstr "[「繫結」基礎](#binding-basics)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Interfaces To Implementations](#binding-interfaces-to-implementations)"
msgstr "[將介面繫結至實作](#binding-interfaces-to-implementations)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Contextual Binding](#contextual-binding)"
msgstr "[基於上下文的繫結](#contextual-binding)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Primitives](#binding-primitives)"
msgstr "[繫結原生值](#binding-primitives)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Typed Variadics](#binding-typed-variadics)"
msgstr "[繫結有型別的 Variadic](#binding-typed-variadics)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Tagging](#tagging)"
msgstr "[標籤](#tagging)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Extending Bindings](#extending-bindings)"
msgstr "[擴充繫結](#extending-bindings)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Resolving](#resolving)"
msgstr "[解析](#resolving)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[The Make Method](#the-make-method)"
msgstr "[Make 方法](#the-make-method)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Automatic Injection](#automatic-injection)"
msgstr "[自動插入](#automatic-injection)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Method Invocation & Injection](#method-invocation-and-injection)"
msgstr "[叫用方法與插入](#method-invocation-and-injection)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Container Events](#container-events)"
msgstr "[Container 事件](#container-events)"

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[PSR-11](#psr-11)"
msgstr "[PSR-11](#psr-11)"

#: docs/8.x/container.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/container.md:block 5 (paragraph)
msgid "The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. Dependency injection is a fancy phrase that essentially means this: class dependencies are \"injected\" into the class via the constructor or, in some cases, \"setter\" methods."
msgstr "Laravel 的 Service Container 是用來管理類別依賴與進行依賴注入的一個有力工具。依賴注入只是個花俏的詞，基本上依賴注入就代表：類別的依賴是通過其建構函式來「注入」進類別的，或者，某些情況下是使用「Setter」方法。"

#: docs/8.x/container.md:block 6 (paragraph)
msgid "Let's look at a simple example:"
msgstr "來看看一個簡單的例子："

#: docs/8.x/container.md:block 7 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        $user = $this->users->find($id);\n\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        $user = $this->users->find($id);\n\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}\n"

#: docs/8.x/container.md:block 8 (paragraph)
msgid "In this example, the `UserController` needs to retrieve users from a data source. So, we will **inject** a service that is able to retrieve users. In this context, our `UserRepository` most likely uses [Eloquent](/docs/{{version}}/eloquent) to retrieve user information from the database. However, since the repository is injected, we are able to easily swap it out with another implementation. We are also able to easily \"mock\", or create a dummy implementation of the `UserRepository` when testing our application."
msgstr "在這個例子中，`UserController` 需要從某個資料來源取得使用者。因此，我們會將一個能取得使用者的服務（Service）**注入** 進去。在這個脈絡下，`UserRepository` 通常會使用 [Eloquent](/docs/{{version}}/eloquent) 來從資料庫內取得使用者資訊。不過，由於該 Repository 是注入進去的，因此我們可以很輕鬆地將其替換成其他實作。我們也可以很輕鬆地在測試專案時「模擬 (Mock)」或是建立一個 `UserRepository` 的假實作。"

#: docs/8.x/container.md:block 9 (paragraph)
msgid "A deep understanding of the Laravel service container is essential to building a powerful, large application, as well as for contributing to the Laravel core itself."
msgstr "要想建立強大的大型專案、或是參與貢獻 Laravel 核心，就必須要深入瞭解 Laravel 的 Service Container。"

#: docs/8.x/container.md:block 11 (header)
msgid "Zero Configuration Resolution"
msgstr "不需設定的解析"

#: docs/8.x/container.md:block 12 (paragraph)
msgid "If a class has no dependencies or only depends on other concrete classes (not interfaces), the container does not need to be instructed on how to resolve that class. For example, you may place the following code in your `routes/web.php` file:"
msgstr "若某個類別沒有依賴，或是只依賴其他實體類別 (即非介面的依賴)，就不需要告訴 Container 如何解析這個類別。舉例來說，可以在 `routes/web.php` 檔中加上下列程式碼："

#: docs/8.x/container.md:block 13 (code)
msgid "<?php\n\n"
"class Service\n"
"{\n"
"    //\n"
"}\n\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});\n"
msgstr "<?php\n\n"
"class Service\n"
"{\n"
"    //\n"
"}\n\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});\n"

#: docs/8.x/container.md:block 14 (paragraph)
msgid "In this example, hitting your application's `/` route will automatically resolve the `Service` class and inject it into your route's handler. This is game changing. It means you can develop your application and take advantage of dependency injection without worrying about bloated configuration files."
msgstr "在這個例子中，打開網站的 `/` 路由就會自動解析 `Service` 類別並將其注入路由的處理程式中。這是個顛覆性的方法。因為這表示不需要肥大的設定檔，就能通過依賴注入來進行開發。"

#: docs/8.x/container.md:block 15 (paragraph)
msgid "Thankfully, many of the classes you will be writing when building a Laravel application automatically receive their dependencies via the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). Once you taste the power of automatic and zero configuration dependency injection it feels impossible to develop without it."
msgstr "所幸，用 Laravel 撰寫專案時會寫到的許多類別都會自動通過 Container 來接收依賴，包含[Controller](/docs/{{version}}/controllers)、[事件監聽程式](/docs/{{version}}/events)、[Middleware](/docs/{{version}}/middleware) …等其他類別。此外，還可以在[佇列任務](/docs/{{version}}/queues) 的 `handle` 方法內型別提示依賴。一旦你試過自動與無需設定的依賴注入後，就很難不用依賴注入來開發了。"

#: docs/8.x/container.md:block 17 (header)
msgid "When To Use The Container"
msgstr "什麼時候要使用 Container"

#: docs/8.x/container.md:block 18 (paragraph)
msgid "Thanks to zero configuration resolution, you will often type-hint dependencies on routes, controllers, event listeners, and elsewhere without ever manually interacting with the container. For example, you might type-hint the `Illuminate\\Http\\Request` object on your route definition so that you can easily access the current request. Even though we never have to interact with the container to write this code, it is managing the injection of these dependencies behind the scenes:"
msgstr "多虧有不需設定的解析，通常只需要在路由、Controller、事件監聽程式等地方型別提示即可，不需手動與 Container 互動。舉例來說，可以在路由定義上型別提示 `Illuminate\\Http\\Request` 物件，就可輕鬆存取目前的請求。就算我們從來沒寫過與 Container 互動的程式碼，Container 依然能自動幫我們將這些依賴注入進去："

#: docs/8.x/container.md:block 19 (code)
msgid "use Illuminate\\Http\\Request;\n\n"
"Route::get('/', function (Request $request) {\n"
"    // ...\n"
"});\n"
msgstr "use Illuminate\\Http\\Request;\n\n"
"Route::get('/', function (Request $request) {\n"
"    // ...\n"
"});\n"

#: docs/8.x/container.md:block 20 (paragraph)
msgid "In many cases, thanks to automatic dependency injection and [facades](/docs/{{version}}/facades), you can build Laravel applications without **ever** manually binding or resolving anything from the container. **So, when would you ever manually interact with the container?** Let's examine two situations."
msgstr "在許多情況下，多虧有自動依賴注入以及 [Facades](/docs/{{version}}/facades)，我們 **完全** 不需要從 Container 上手動繫結或解析任何東西，就可以使用 Laravel 來進行專案開發。**那麼，什麼時候才會需要手動操作 Container 呢？** 讓我們來看看兩個情況。"

#: docs/8.x/container.md:block 21 (paragraph)
msgid "First, if you write a class that implements an interface and you wish to type-hint that interface on a route or class constructor, you must [tell the container how to resolve that interface](#binding-interfaces-to-implementations). Secondly, if you are [writing a Laravel package](/docs/{{version}}/packages) that you plan to share with other Laravel developers, you may need to bind your package's services into the container."
msgstr "首先，若寫了一個實作介面的類別，而希望能在路由或類別建構函式上型別提示這個介面，就必須要[告訴 Container 要如何解析該介面](#binding-interfaces-to-implementations)。再來，若是在[撰寫 Laravel 套件](/docs/{{version}}/packages)，並希望將該套件分享給其他 Laravel 開發者，則可能會需要將套件的服務繫結到 Container 上。"

#: docs/8.x/container.md:block 23 (header)
msgid "Binding"
msgstr "繫結 (Binding)"

#: docs/8.x/container.md:block 25 (header)
msgid "Binding Basics"
msgstr "「繫結」基礎"

#: docs/8.x/container.md:block 27 (header)
msgid "Simple Bindings"
msgstr "簡單繫結"

#: docs/8.x/container.md:block 28 (paragraph)
msgid "Almost all of your service container bindings will be registered within [service providers](/docs/{{version}}/providers), so most of these examples will demonstrate using the container in that context."
msgstr "幾乎所有的服務 Container 繫結都會註冊在 [Service Provider](/docs/{{version}}/providers) 上。因此，這裡大多數的範例都會在這個脈絡下展示使用 Container。"

#: docs/8.x/container.md:block 29 (paragraph)
msgid "Within a service provider, you always have access to the container via the `$this->app` property. We can register a binding using the `bind` method, passing the class or interface name that we wish to register along with a closure that returns an instance of the class:"
msgstr "在 Service Provider 中，總是能使用 `$this->app` 屬性來存取 Container。我們可以使用 `bind` 方法來註冊一個繫結，並將我們想註冊的類別或介面與用來回傳該類別實體的閉包一起傳入。"

#: docs/8.x/container.md:block 30 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$this->app->bind(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$this->app->bind(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"

#: docs/8.x/container.md:block 31 (paragraph)
msgid "Note that we receive the container itself as an argument to the resolver. We can then use the container to resolve sub-dependencies of the object we are building."
msgstr "請注意，我們會收到 Container 自己作為該解析程式的一個引數。我們可以接著使用該 Container 來解析我們正在建構的物件的其他子依賴。"

#: docs/8.x/container.md:block 32 (paragraph)
msgid "As mentioned, you will typically be interacting with the container within service providers; however, if you would like to interact with the container outside of a service provider, you may do so via the `App` [facade](/docs/{{version}}/facades):"
msgstr "就像之前提過的，我們通常會在 Service Provider 內操作 Container。不過，若想在 Service Provider 外操作 Container，則可以使用 `App` [Facade](/docs/{{version}}/facades)："

#: docs/8.x/container.md:block 33 (code)
msgid "use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"App::bind(Transistor::class, function ($app) {\n"
"    // ...\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"App::bind(Transistor::class, function ($app) {\n"
"    // ...\n"
"});\n"

#: docs/8.x/container.md:block 34 (quote)
msgid "{tip} There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection."
msgstr "{tip} 若類別沒有依賴任何介面，就不需要將其繫結到 Container 上。不需要告訴 Container 如何建構這些物件，因為這些物件可以通過 Reflection 自動被解析。"

#: docs/8.x/container.md:block 36 (header)
msgid "Binding A Singleton"
msgstr "建構單例 (Singleton)"

#: docs/8.x/container.md:block 37 (paragraph)
msgid "The `singleton` method binds a class or interface into the container that should only be resolved one time. Once a singleton binding is resolved, the same object instance will be returned on subsequent calls into the container:"
msgstr "`singleton` 方法可將一些只需要解析一次的類別或介面繫結至 Container 內，解析完單例繫結後，接下來呼叫 Container 都會回傳相同的物件實體："

#: docs/8.x/container.md:block 38 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$this->app->singleton(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$this->app->singleton(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"

#: docs/8.x/container.md:block 40 (header)
msgid "Binding Scoped Singletons"
msgstr "繫結限定作用範圍的單例"

#: docs/8.x/container.md:block 41 (paragraph)
msgid "The `scoped` method binds a class or interface into the container that should only be resolved one time within a given Laravel request / job lifecycle. While this method is similar to the `singleton` method, instances registered using the `scoped` method will be flushed whenever the Laravel application starts a new \"lifecycle\", such as when a [Laravel Octane](/docs/{{version}}/octane) worker processes a new request or when a Laravel [queue worker](/docs/{{version}}/queues) processes a new job:"
msgstr "`scoped` 方法用來將一些只在給定 Laravel 請求 / 任務生命週期中被解析一次的類別或介面繫結到 Container 中。雖然這個方法與 `singleton` 方法類似，不過使用 `scoped` 方法繫結的實體會在每次 Laravel 開始新「生命週期」時被清除，如：[Laravel Octane](/docs/{{version}}/octane) 背景工作角色處理新請求時，或是 Laravel [佇列背景工作角色](/docs/{{version}}/queues) 處理新任務時。"

#: docs/8.x/container.md:block 42 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$this->app->scoped(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$this->app->scoped(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"

#: docs/8.x/container.md:block 44 (header)
msgid "Binding Instances"
msgstr "繫結實體"

#: docs/8.x/container.md:block 45 (paragraph)
msgid "You may also bind an existing object instance into the container using the `instance` method. The given instance will always be returned on subsequent calls into the container:"
msgstr "也可以使用 `instance` 方法來將現有的物件實體繫結到 Container 上。接下來對 Container 的呼叫都會回傳給定的實體："

#: docs/8.x/container.md:block 46 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$service = new Transistor(new PodcastParser);\n\n"
"$this->app->instance(Transistor::class, $service);\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n\n"
"$service = new Transistor(new PodcastParser);\n\n"
"$this->app->instance(Transistor::class, $service);\n"

#: docs/8.x/container.md:block 48 (header)
msgid "Binding Interfaces To Implementations"
msgstr "將介面繫結至實作"

#: docs/8.x/container.md:block 49 (paragraph)
msgid "A very powerful feature of the service container is its ability to bind an interface to a given implementation. For example, let's assume we have an `EventPusher` interface and a `RedisEventPusher` implementation. Once we have coded our `RedisEventPusher` implementation of this interface, we can register it with the service container like so:"
msgstr "Service Container 其中一個非常強大的功能就是能將介面繫結到給定的實作上。舉例來說，假設我們有一個 `EventPusher` 介面，以及一個 `RedisEventPusher` 實作。寫好這個介面的 `RedisEventPusher` 實作程式後，我們就像這樣將其註冊到 Service Container 上："

#: docs/8.x/container.md:block 50 (code)
msgid "use App\\Contracts\\EventPusher;\n"
"use App\\Services\\RedisEventPusher;\n\n"
"$this->app->bind(EventPusher::class, RedisEventPusher::class);\n"
msgstr "use App\\Contracts\\EventPusher;\n"
"use App\\Services\\RedisEventPusher;\n\n"
"$this->app->bind(EventPusher::class, RedisEventPusher::class);\n"

#: docs/8.x/container.md:block 51 (paragraph)
msgid "This statement tells the container that it should inject the `RedisEventPusher` when a class needs an implementation of `EventPusher`. Now we can type-hint the `EventPusher` interface in the constructor of a class that is resolved by the container. Remember, controllers, event listeners, middleware, and various other types of classes within Laravel applications are always resolved using the container:"
msgstr "這個陳述式會告訴 Container 應在有類別需要 `EventPusher` 的實作時將 `RedisEventPusher` 注入進去。接著，我們可以在某個會被 Container 解析的類別之建構函式上型別提示 `EventPusher` 介面。請記得，Laravel 專案中的 Controller、事件監聽程式、Middleware、以及其他多種類型的類別都是使用 Container 來解析的："

#: docs/8.x/container.md:block 52 (code)
msgid "use App\\Contracts\\EventPusher;\n\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\App\\Contracts\\EventPusher  $pusher\n"
" * @return void\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}\n"
msgstr "use App\\Contracts\\EventPusher;\n\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\App\\Contracts\\EventPusher  $pusher\n"
" * @return void\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}\n"

#: docs/8.x/container.md:block 54 (header)
msgid "Contextual Binding"
msgstr "基於上下文的繫結"

#: docs/8.x/container.md:block 55 (paragraph)
msgid "Sometimes you may have two classes that utilize the same interface, but you wish to inject different implementations into each class. For example, two controllers may depend on different implementations of the `Illuminate\\Contracts\\Filesystem\\Filesystem` [contract](/docs/{{version}}/contracts). Laravel provides a simple, fluent interface for defining this behavior:"
msgstr "有時候，可能會有兩個類別使用相同的介面，但又想在各個類別上注入不同的實作。舉例來說，可能有兩個 Controller 依賴不同實作的 `Illuminate\\Contracts\\Filesystem\\Filesystem`  [Contract](/docs/{{version}}/contracts)。Laravel 提供了一個簡單但流暢的介面來定義這種行為："

#: docs/8.x/container.md:block 56 (code)
msgid "use App\\Http\\Controllers\\PhotoController;\n"
"use App\\Http\\Controllers\\UploadController;\n"
"use App\\Http\\Controllers\\VideoController;\n"
"use Illuminate\\Contracts\\Filesystem\\Filesystem;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"$this->app->when(PhotoController::class)\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('local');\n"
"          });\n\n"
"$this->app->when([VideoController::class, UploadController::class])\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('s3');\n"
"          });\n"
msgstr "use App\\Http\\Controllers\\PhotoController;\n"
"use App\\Http\\Controllers\\UploadController;\n"
"use App\\Http\\Controllers\\VideoController;\n"
"use Illuminate\\Contracts\\Filesystem\\Filesystem;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"$this->app->when(PhotoController::class)\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('local');\n"
"          });\n\n"
"$this->app->when([VideoController::class, UploadController::class])\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('s3');\n"
"          });\n"

#: docs/8.x/container.md:block 58 (header)
msgid "Binding Primitives"
msgstr "繫結原生型別"

#: docs/8.x/container.md:block 59 (paragraph)
msgid "Sometimes you may have a class that receives some injected classes, but also needs an injected primitive value such as an integer. You may easily use contextual binding to inject any value your class may need:"
msgstr "有時候可能會有類別要接收注入的類別，但同時也需要注入原生型別的值，如整數。可以輕鬆地使用基於上下文的繫結來注入任何類別所需的值："

#: docs/8.x/container.md:block 60 (code)
msgid "$this->app->when('App\\Http\\Controllers\\UserController')\n"
"          ->needs('$variableName')\n"
"          ->give($value);\n"
msgstr "$this->app->when('App\\Http\\Controllers\\UserController')\n"
"          ->needs('$variableName')\n"
"          ->give($value);\n"

#: docs/8.x/container.md:block 61 (paragraph)
msgid "Sometimes a class may depend on an array of [tagged](#tagging) instances. Using the `giveTagged` method, you may easily inject all of the container bindings with that tag:"
msgstr "有時候，某個類別可能會依賴一個包含[有標記](#tagging)實體的陣列。使用 `giveTagged` 方法，就可以輕鬆將所有有該標籤的 Container 繫結注入進去："

#: docs/8.x/container.md:block 62 (code)
msgid "$this->app->when(ReportAggregator::class)\n"
"    ->needs('$reports')\n"
"    ->giveTagged('reports');\n"
msgstr "$this->app->when(ReportAggregator::class)\n"
"    ->needs('$reports')\n"
"    ->giveTagged('reports');\n"

#: docs/8.x/container.md:block 63 (paragraph)
msgid "If you need to inject a value from one of your application's configuration files, you may use the `giveConfig` method:"
msgstr "若有需要注入來自專案設定檔的值，則可使用 `giveConfig` 方法："

#: docs/8.x/container.md:block 64 (code)
msgid "$this->app->when(ReportAggregator::class)\n"
"    ->needs('$timezone')\n"
"    ->giveConfig('app.timezone');\n"
msgstr "$this->app->when(ReportAggregator::class)\n"
"    ->needs('$timezone')\n"
"    ->giveConfig('app.timezone');\n"

#: docs/8.x/container.md:block 66 (header)
msgid "Binding Typed Variadics"
msgstr "繫結有型別提示的 Variadic 參數"

#: docs/8.x/container.md:block 67 (paragraph)
msgid "Occasionally, you may have a class that receives an array of typed objects using a variadic constructor argument:"
msgstr "有時候，某個類別可能會需要使用 Variadic 建構函式引數來接收一個包含型別提示物件的陣列："

#: docs/8.x/container.md:block 68 (code)
msgid "<?php\n\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n\n"
"    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\App\\Services\\Logger  $logger\n"
"     * @param  array  $filters\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n\n"
"    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\App\\Services\\Logger  $logger\n"
"     * @param  array  $filters\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}\n"

#: docs/8.x/container.md:block 69 (paragraph)
msgid "Using contextual binding, you may resolve this dependency by providing the `give` method with a closure that returns an array of resolved `Filter` instances:"
msgstr "若使用基於上下文的繫結，則可以提供一個閉包給 `give` 方法來解析這個依賴。該閉包應回傳解析好的 `Filter` 實體的陣列："

#: docs/8.x/container.md:block 70 (code)
msgid "$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function ($app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });\n"
msgstr "$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function ($app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });\n"

#: docs/8.x/container.md:block 71 (paragraph)
msgid "For convenience, you may also just provide an array of class names to be resolved by the container whenever `Firewall` needs `Filter` instances:"
msgstr "為了方便起見，當 `Firewall` 需要 `Filter` 實體的時候，也可以只提供一個包含要給 Container 解析的類別名稱的陣列："

#: docs/8.x/container.md:block 72 (code)
msgid "$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give([\n"
"              NullFilter::class,\n"
"              ProfanityFilter::class,\n"
"              TooLongFilter::class,\n"
"          ]);\n"
msgstr "$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give([\n"
"              NullFilter::class,\n"
"              ProfanityFilter::class,\n"
"              TooLongFilter::class,\n"
"          ]);\n"

#: docs/8.x/container.md:block 74 (header)
msgid "Variadic Tag Dependencies"
msgstr "Variadic 參數的標籤依賴"

#: docs/8.x/container.md:block 75 (paragraph)
msgid "Sometimes a class may have a variadic dependency that is type-hinted as a given class (`Report ...$reports`). Using the `needs` and `giveTagged` methods, you may easily inject all of the container bindings with that [tag](#tagging) for the given dependency:"
msgstr "有時候，某個類別可能會有型別提示為給定類別的 Variadic 參數 (`Report ...$reports`)。只要使用 `needs` 與 `giveTagged` 方法，就可以輕鬆將所有該[標籤](#tagging)的 Container 繫結注入進給定依賴："

#: docs/8.x/container.md:block 76 (code)
msgid "$this->app->when(ReportAggregator::class)\n"
"    ->needs(Report::class)\n"
"    ->giveTagged('reports');\n"
msgstr "$this->app->when(ReportAggregator::class)\n"
"    ->needs(Report::class)\n"
"    ->giveTagged('reports');\n"

#: docs/8.x/container.md:block 78 (header)
msgid "Tagging"
msgstr "標籤"

#: docs/8.x/container.md:block 79 (paragraph)
msgid "Occasionally, you may need to resolve all of a certain \"category\" of binding. For example, perhaps you are building a report analyzer that receives an array of many different `Report` interface implementations. After registering the `Report` implementations, you can assign them a tag using the `tag` method:"
msgstr "有時候，可能會需要解析特定「類別」的繫結。舉例來說，若是在製作一個報表解析程式，會接收含有不同 `Report` 介面實作的陣列。註冊好 `Report` 實作後，可以使用 `tag` 方法來標記這些實作："

#: docs/8.x/container.md:block 80 (code)
msgid "$this->app->bind(CpuReport::class, function () {\n"
"    //\n"
"});\n\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    //\n"
"});\n\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"
msgstr "$this->app->bind(CpuReport::class, function () {\n"
"    //\n"
"});\n\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    //\n"
"});\n\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"

#: docs/8.x/container.md:block 81 (paragraph)
msgid "Once the services have been tagged, you may easily resolve them all via the container's `tagged` method:"
msgstr "標記好服務後就可以輕鬆地通過 Container 的 `tagged` 方法來解析所有的這些服務："

#: docs/8.x/container.md:block 82 (code)
msgid "$this->app->bind(ReportAnalyzer::class, function ($app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});\n"
msgstr "$this->app->bind(ReportAnalyzer::class, function ($app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});\n"

#: docs/8.x/container.md:block 84 (header)
msgid "Extending Bindings"
msgstr "擴充繫結"

#: docs/8.x/container.md:block 85 (paragraph)
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts a closure, which should return the modified service, as its only argument. The closure receives the service being resolved and the container instance:"
msgstr "`extend` 方法能修改解析過的服務。舉例來說，當某個服務被解析後，可以執行額外的程式碼來修改或設定這個服務。`extend` 方法接收一個閉包，該閉包應回傳經過修改的服務，作為其唯一的引數。該閉包會接收經過解析的服務，以及 Container 實體："

#: docs/8.x/container.md:block 86 (code)
msgid "$this->app->extend(Service::class, function ($service, $app) {\n"
"    return new DecoratedService($service);\n"
"});\n"
msgstr "$this->app->extend(Service::class, function ($service, $app) {\n"
"    return new DecoratedService($service);\n"
"});\n"

#: docs/8.x/container.md:block 88 (header)
msgid "Resolving"
msgstr "解析"

#: docs/8.x/container.md:block 90 (header)
msgid "The `make` Method"
msgstr "`make` 方法"

#: docs/8.x/container.md:block 91 (paragraph)
msgid "You may use the `make` method to resolve a class instance from the container. The `make` method accepts the name of the class or interface you wish to resolve:"
msgstr "可以使用 `make` 方法來從 Container 中解析一個類別實體。`make` 方法接收欲解析的類別或介面名稱："

#: docs/8.x/container.md:block 92 (code)
msgid "use App\\Services\\Transistor;\n\n"
"$transistor = $this->app->make(Transistor::class);\n"
msgstr "use App\\Services\\Transistor;\n\n"
"$transistor = $this->app->make(Transistor::class);\n"

#: docs/8.x/container.md:block 93 (paragraph)
msgid "If some of your class' dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the `makeWith` method. For example, we may manually pass the `$id` constructor argument required by the `Transistor` service:"
msgstr "若該類別的某些依賴無法被 Container 解析，則可能需要將這些依賴以關聯式陣列傳入 `makeWith` 方法內。舉例來說，可以手動傳入 `Transistor` 服務所需要的 `$id` 建構函式引數："

#: docs/8.x/container.md:block 94 (code)
msgid "use App\\Services\\Transistor;\n\n"
"$transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);\n"
msgstr "use App\\Services\\Transistor;\n\n"
"$transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);\n"

#: docs/8.x/container.md:block 95 (paragraph)
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) to resolve a class instance from the container:"
msgstr "若不在 Service Provider 內，而是在專案中的某處無法存取 `$app` 變數的地方，就可以使用 `App` [Facade](/docs/{{version}}/facades) 來從 Container 內解析類別實體："

#: docs/8.x/container.md:block 96 (code)
msgid "use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$transistor = App::make(Transistor::class);\n"
msgstr "use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$transistor = App::make(Transistor::class);\n"

#: docs/8.x/container.md:block 97 (paragraph)
msgid "If you would like to have the Laravel container instance itself injected into a class that is being resolved by the container, you may type-hint the `Illuminate\\Container\\Container` class on your class' constructor:"
msgstr "若想將 Laravel Container 實體注入值 Container 正在解析的類別，則可以在該類別的建構函式中型別提示 `Illuminate\\Container\\Container` 類別："

#: docs/8.x/container.md:block 98 (code)
msgid "use Illuminate\\Container\\Container;\n\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\Illuminate\\Container\\Container  $container\n"
" * @return void\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}\n"
msgstr "use Illuminate\\Container\\Container;\n\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\Illuminate\\Container\\Container  $container\n"
" * @return void\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}\n"

#: docs/8.x/container.md:block 100 (header)
msgid "Automatic Injection"
msgstr "自動注入"

#: docs/8.x/container.md:block 101 (paragraph)
msgid "Alternatively, and importantly, you may type-hint the dependency in the constructor of a class that is resolved by the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). In practice, this is how most of your objects should be resolved by the container."
msgstr "此外，還有一點很重要的是，也可以在會由 Container 解析的類別之建構函式內對依賴進行型別提示。這類類別包含 [Controller](/docs/{{version}}/controllers)、[事件處理程式](/docs/{{version}}/events)、[Middleware](/docs/{{version}/middleware) …等。此外，也可以在[佇列任務](/docs/{{version}}/queues)的 `handle` 方法內對依賴進行型別提示。實務上來說，這也是大多數由 Container 解析物件的方法。"

#: docs/8.x/container.md:block 102 (paragraph)
msgid "For example, you may type-hint a repository defined by your application in a controller's constructor. The repository will automatically be resolved and injected into the class:"
msgstr "舉例來說，可以在某個 Controller 的建構函式內對一個 Repository 定義進行型別提示。該 Repository 會被自動解析並插入到該類別內："

#: docs/8.x/container.md:block 103 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"

#: docs/8.x/container.md:block 105 (header)
msgid "Method Invocation & Injection"
msgstr "方法叫用與注入"

#: docs/8.x/container.md:block 106 (paragraph)
msgid "Sometimes you may wish to invoke a method on an object instance while allowing the container to automatically inject that method's dependencies. For example, given the following class:"
msgstr "有時候我們可能會想在某個物件實體上叫用一個方法，並讓 Container 自動將該方法的相依內容注入進去。舉例來說，假設有下列類別："

#: docs/8.x/container.md:block 107 (code)
msgid "<?php\n\n"
"namespace App;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $repository\n"
"     * @return array\n"
"     */\n"
"    public function generate(UserRepository $repository)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $repository\n"
"     * @return array\n"
"     */\n"
"    public function generate(UserRepository $repository)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"

#: docs/8.x/container.md:block 108 (paragraph)
msgid "You may invoke the `generate` method via the container like so:"
msgstr "可以使用 Container 來像這樣叫用 `generate` 方法："

#: docs/8.x/container.md:block 109 (code)
msgid "use App\\UserReport;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$report = App::call([new UserReport, 'generate']);\n"
msgstr "use App\\UserReport;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$report = App::call([new UserReport, 'generate']);\n"

#: docs/8.x/container.md:block 110 (paragraph)
msgid "The `call` method accepts any PHP callable. The container's `call` method may even be used to invoke a closure while automatically injecting its dependencies:"
msgstr "`call` 方法接受任意 PHP Callable。Container 的 `call` 方法也可以用來在叫用時自動注入其相依性："

#: docs/8.x/container.md:block 111 (code)
msgid "use App\\Repositories\\UserRepository;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$result = App::call(function (UserRepository $repository) {\n"
"    // ...\n"
"});\n"
msgstr "use App\\Repositories\\UserRepository;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$result = App::call(function (UserRepository $repository) {\n"
"    // ...\n"
"});\n"

#: docs/8.x/container.md:block 113 (header)
msgid "Container Events"
msgstr "Container 事件"

#: docs/8.x/container.md:block 114 (paragraph)
msgid "The service container fires an event each time it resolves an object. You may listen to this event using the `resolving` method:"
msgstr "Service Container 會在每次解析物件後觸發一個事件。可以通過 `resolving` 方法來監聽這個事件："

#: docs/8.x/container.md:block 115 (code)
msgid "use App\\Services\\Transistor;\n\n"
"$this->app->resolving(Transistor::class, function ($transistor, $app) {\n"
"    // Called when container resolves objects of type \"Transistor\"...\n"
"});\n\n"
"$this->app->resolving(function ($object, $app) {\n"
"    // Called when container resolves object of any type...\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n\n"
"$this->app->resolving(Transistor::class, function ($transistor, $app) {\n"
"    // 當 Container 要解析「Transistor」物件時，會呼叫此閉包...\n"
"});\n\n"
"$this->app->resolving(function ($object, $app) {\n"
"    // 當 Container 要解析任何型別的物件時，會呼叫此閉包...\n"
"});\n"

#: docs/8.x/container.md:block 116 (paragraph)
msgid "As you can see, the object being resolved will be passed to the callback, allowing you to set any additional properties on the object before it is given to its consumer."
msgstr "如你所見，被解析的物件會被傳入該回呼內，讓你能在物件被交給要求者之前對物件設定額外的屬性。"

#: docs/8.x/container.md:block 118 (header)
msgid "PSR-11"
msgstr "PSR-11"

#: docs/8.x/container.md:block 119 (paragraph)
msgid "Laravel's service container implements the [PSR-11](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md) interface. Therefore, you may type-hint the PSR-11 container interface to obtain an instance of the Laravel container:"
msgstr "Laravel 的 Service Container 實作了 [PSR-11](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md) 介面。因此，可以型別提示 PSR-11 Container 介面來取得 Laravel Container 的實體："

#: docs/8.x/container.md:block 120 (code)
msgid "use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n\n"
"    //\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n\n"
"    //\n"
"});\n"

#: docs/8.x/container.md:block 121 (paragraph)
msgid "An exception is thrown if the given identifier can't be resolved. The exception will be an instance of `Psr\\Container\\NotFoundExceptionInterface` if the identifier was never bound. If the identifier was bound but was unable to be resolved, an instance of `Psr\\Container\\ContainerExceptionInterface` will be thrown."
msgstr "若給定的識別元無法被解析，則會擲回例外。若該識別元從未被繫結，則該例外為 `Psr\\Container\\NotFoundExceptionInterface` 的實體。若該識別元有被繫結過，但無法解析，則會擲回 `Psr\\Container\\ContainerExceptionInterface` 的實體。"

#: docs/9.x/container.md:block 34 (quote)
msgid "**Note** There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection."
msgstr "**Note** 若類別沒有依賴任何介面，就不需要將其繫結到 Container 上。不需要告訴 Container 如何建構這些物件，因為這些物件可以通過 Reflection 自動被解析。"

#: docs/9.x/container.md:block 60 (code)
msgid "use App\\Http\\Controllers\\UserController;\n\n"
"$this->app->when(UserController::class)\n"
"          ->needs('$variableName')\n"
"          ->give($value);\n"
msgstr "use App\\Http\\Controllers\\UserController;\n\n"
"$this->app->when(UserController::class)\n"
"          ->needs('$variableName')\n"
"          ->give($value);\n"

#: docs/9.x/container.md:block 85 (paragraph)
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts two arguments, the service class you're extending and a closure that should return the modified service. The closure receives the service being resolved and the container instance:"
msgstr "`extend` 方法能修改解析過的服務。舉例來說，當某個服務被解析後，可以執行額外的程式碼來修改或設定這個服務。`extend` 方法接受兩個引數，第一個印數為要擴充的 Service 類別，以及一個回傳經過修改服務的閉包。該閉包會接收經過解析的服務，以及 Container 實體："

#: docs/9.x/container.md:block 95 (paragraph)
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) or the `app` [helper](/docs/{{version}}/helpers#method-app) to resolve a class instance from the container:"
msgstr "若不在 Service Provider 內，而是在專案中某處無法存取 `$app` 變數的地方，可以使用 `App` [Facade](/docs/{{version}}/facades) 或 `app` [輔助函式](/docs/{{version}}/helpers#method-app) 來從 Container 內解析類別實體："

#: docs/9.x/container.md:block 96 (code)
msgid "use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$transistor = App::make(Transistor::class);\n\n"
"$transistor = app(Transistor::class);\n"
msgstr "use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"$transistor = App::make(Transistor::class);\n\n"
"$transistor = app(Transistor::class);\n"

#: docs/master/container.md:block 7 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"use Illuminate\\View\\View;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     */\n"
"    public function show(string $id): View\n"
"    {\n"
"        $user = $this->users->find($id);\n\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"use Illuminate\\View\\View;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     */\n"
"    public function show(string $id): View\n"
"    {\n"
"        $user = $this->users->find($id);\n\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}\n"

#: docs/master/container.md:block 13 (code)
msgid "<?php\n\n"
"class Service\n"
"{\n"
"    // ...\n"
"}\n\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});\n"
msgstr "<?php\n\n"
"class Service\n"
"{\n"
"    // ...\n"
"}\n\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});\n"

#: docs/master/container.md:block 30 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->bind(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"

#: docs/master/container.md:block 33 (code)
msgid "use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"App::bind(Transistor::class, function (Application $app) {\n"
"    // ...\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\Facades\\App;\n\n"
"App::bind(Transistor::class, function (Application $app) {\n"
"    // ...\n"
"});\n"

#: docs/master/container.md:block 38 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->singleton(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->singleton(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"

#: docs/master/container.md:block 42 (code)
msgid "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->scoped(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->scoped(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"

#: docs/master/container.md:block 52 (code)
msgid "use App\\Contracts\\EventPusher;\n\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}\n"
msgstr "use App\\Contracts\\EventPusher;\n\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}\n"

#: docs/master/container.md:block 68 (code)
msgid "<?php\n\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n\n"
"    /**\n"
"     * Create a new class instance.\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n\n"
"    /**\n"
"     * Create a new class instance.\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}\n"

#: docs/master/container.md:block 70 (code)
msgid "$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function (Application $app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });\n"
msgstr "$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function (Application $app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });\n"

#: docs/master/container.md:block 80 (code)
msgid "$this->app->bind(CpuReport::class, function () {\n"
"    // ...\n"
"});\n\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    // ...\n"
"});\n\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"
msgstr "$this->app->bind(CpuReport::class, function () {\n"
"    // ...\n"
"});\n\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    // ...\n"
"});\n\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"

#: docs/master/container.md:block 82 (code)
msgid "$this->app->bind(ReportAnalyzer::class, function (Application $app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});\n"
msgstr "$this->app->bind(ReportAnalyzer::class, function (Application $app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});\n"

#: docs/master/container.md:block 86 (code)
msgid "$this->app->extend(Service::class, function (Service $service, Application $app) {\n"
"    return new DecoratedService($service);\n"
"});\n"
msgstr "$this->app->extend(Service::class, function (Service $service, Application $app) {\n"
"    return new DecoratedService($service);\n"
"});\n"

#: docs/master/container.md:block 98 (code)
msgid "use Illuminate\\Container\\Container;\n\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}\n"
msgstr "use Illuminate\\Container\\Container;\n\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}\n"

#: docs/master/container.md:block 103 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     */\n"
"    public function show(string $id): User\n"
"    {\n"
"        $user = $this->users->findOrFail($id);\n\n"
"        return $user;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     */\n"
"    public function show(string $id): User\n"
"    {\n"
"        $user = $this->users->findOrFail($id);\n\n"
"        return $user;\n"
"    }\n"
"}\n"

#: docs/master/container.md:block 107 (code)
msgid "<?php\n\n"
"namespace App;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     */\n"
"    public function generate(UserRepository $repository): array\n"
"    {\n"
"        return [\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App;\n\n"
"use App\\Repositories\\UserRepository;\n\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     */\n"
"    public function generate(UserRepository $repository): array\n"
"    {\n"
"        return [\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}\n"

#: docs/master/container.md:block 115 (code)
msgid "use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->resolving(Transistor::class, function (Transistor $transistor, Application $app) {\n"
"    // Called when container resolves objects of type \"Transistor\"...\n"
"});\n\n"
"$this->app->resolving(function (mixed $object, Application $app) {\n"
"    // Called when container resolves object of any type...\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n\n"
"$this->app->resolving(Transistor::class, function (Transistor $transistor, Application $app) {\n"
"    // 當 Container 在解析型別為「Transistor」時會被呼叫...\n"
"});\n\n"
"$this->app->resolving(function (mixed $object, Application $app) {\n"
"    // 當 Container 在解析任意型別的物件時會呼叫...\n"
"});\n"

#: docs/master/container.md:block 120 (code)
msgid "use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n\n"
"    // ...\n"
"});\n"
msgstr "use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n\n"
"    // ...\n"
"});\n"

