msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 05:46\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/dusk.pot\n"
"X-Crowdin-File-ID: 49\n"

# File: docs/8.x/dusk.md, line: 1
# File: docs/master/dusk.md, line: 1
#. type: Title #
#, no-wrap
msgid "Laravel Dusk"
msgstr ""

# File: docs/8.x/dusk.md, line: 50
# File: docs/master/dusk.md, line: 50
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr ""

# File: docs/8.x/dusk.md, line: 50
# File: docs/master/dusk.md, line: 50
#. type: Plain text
#, no-wrap
msgid "- [Installation](#installation)\n"
"    - [Managing ChromeDriver Installations](#managing-chromedriver-installations)\n"
"    - [Using Other Browsers](#using-other-browsers)\n"
"- [Getting Started](#getting-started)\n"
"    - [Generating Tests](#generating-tests)\n"
"    - [Database Migrations](#migrations)\n"
"    - [Running Tests](#running-tests)\n"
"    - [Environment Handling](#environment-handling)\n"
"- [Browser Basics](#browser-basics)\n"
"    - [Creating Browsers](#creating-browsers)\n"
"    - [Navigation](#navigation)\n"
"    - [Resizing Browser Windows](#resizing-browser-windows)\n"
"    - [Browser Macros](#browser-macros)\n"
"    - [Authentication](#authentication)\n"
"    - [Cookies](#cookies)\n"
"    - [Executing JavaScript](#executing-javascript)\n"
"    - [Taking A Screenshot](#taking-a-screenshot)\n"
"    - [Storing Console Output To Disk](#storing-console-output-to-disk)\n"
"    - [Storing Page Source To Disk](#storing-page-source-to-disk)\n"
"- [Interacting With Elements](#interacting-with-elements)\n"
"    - [Dusk Selectors](#dusk-selectors)\n"
"    - [Text, Values, & Attributes](#text-values-and-attributes)\n"
"    - [Interacting With Forms](#interacting-with-forms)\n"
"    - [Attaching Files](#attaching-files)\n"
"    - [Pressing Buttons](#pressing-buttons)\n"
"    - [Clicking Links](#clicking-links)\n"
"    - [Using The Keyboard](#using-the-keyboard)\n"
"    - [Using The Mouse](#using-the-mouse)\n"
"    - [JavaScript Dialogs](#javascript-dialogs)\n"
"    - [Scoping Selectors](#scoping-selectors)\n"
"    - [Waiting For Elements](#waiting-for-elements)\n"
"    - [Scrolling An Element Into View](#scrolling-an-element-into-view)\n"
"- [Available Assertions](#available-assertions)\n"
"- [Pages](#pages)\n"
"    - [Generating Pages](#generating-pages)\n"
"    - [Configuring Pages](#configuring-pages)\n"
"    - [Navigating To Pages](#navigating-to-pages)\n"
"    - [Shorthand Selectors](#shorthand-selectors)\n"
"    - [Page Methods](#page-methods)\n"
"- [Components](#components)\n"
"    - [Generating Components](#generating-components)\n"
"    - [Using Components](#using-components)\n"
"- [Continuous Integration](#continuous-integration)\n"
"    - [Heroku CI](#running-tests-on-heroku-ci)\n"
"    - [Travis CI](#running-tests-on-travis-ci)\n"
"    - [GitHub Actions](#running-tests-on-github-actions)\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 52
# File: docs/master/dusk.md, line: 52
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 52
# File: docs/master/dusk.md, line: 52
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr ""

# File: docs/8.x/dusk.md, line: 55
# File: docs/master/dusk.md, line: 55
#. type: Plain text
msgid "[Laravel Dusk](https://github.com/laravel/dusk) provides an expressive, easy-to-use browser automation and testing API. By default, Dusk does not require you to install JDK or Selenium on your local computer. Instead, Dusk uses a standalone [ChromeDriver](https://sites.google.com/chromium.org/driver) installation. However, you are free to utilize any other Selenium compatible driver you wish."
msgstr ""

# File: docs/8.x/dusk.md, line: 57
# File: docs/master/dusk.md, line: 57
#. type: Plain text
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 57
# File: docs/master/dusk.md, line: 57
#. type: Title ##
#, no-wrap
msgid "Installation"
msgstr ""

# File: docs/8.x/dusk.md, line: 60
# File: docs/master/dusk.md, line: 60
#. type: Plain text
msgid "To get started, you should install [Google Chrome](https://www.google.com/chrome) and add the `laravel/dusk` Composer dependency to your project:"
msgstr ""

# File: docs/8.x/dusk.md, line: 62
# File: docs/master/dusk.md, line: 62
#. type: Plain text
#, no-wrap
msgid "    composer require --dev laravel/dusk\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 64
# File: docs/master/dusk.md, line: 64
#. type: Plain text
#, no-wrap
msgid "> {note} If you are manually registering Dusk's service provider, you should **never** register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 66
# File: docs/master/dusk.md, line: 66
#. type: Plain text
msgid "After installing the Dusk package, execute the `dusk:install` Artisan command. The `dusk:install` command will create a `tests/Browser` directory and an example Dusk test:"
msgstr ""

# File: docs/8.x/dusk.md, line: 68
# File: docs/master/dusk.md, line: 68
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk:install\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 70
# File: docs/master/dusk.md, line: 70
#. type: Plain text
msgid "Next, set the `APP_URL` environment variable in your application's `.env` file. This value should match the URL you use to access your application in a browser."
msgstr ""

# File: docs/8.x/dusk.md, line: 72
# File: docs/master/dusk.md, line: 72
#. type: Plain text
#, no-wrap
msgid "> {tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please also consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk).\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 74
# File: docs/master/dusk.md, line: 74
#. type: Plain text
#, no-wrap
msgid "<a name=\"managing-chromedriver-installations\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 74
# File: docs/master/dusk.md, line: 74
#. type: Title ###
#, no-wrap
msgid "Managing ChromeDriver Installations"
msgstr ""

# File: docs/8.x/dusk.md, line: 77
# File: docs/master/dusk.md, line: 77
#. type: Plain text
msgid "If you would like to install a different version of ChromeDriver than what is included with Laravel Dusk, you may use the `dusk:chrome-driver` command:"
msgstr ""

# File: docs/8.x/dusk.md, line: 80
# File: docs/master/dusk.md, line: 80
#. type: Plain text
#, no-wrap
msgid "    # Install the latest version of ChromeDriver for your OS...\n"
"    php artisan dusk:chrome-driver\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 83
# File: docs/master/dusk.md, line: 83
#. type: Plain text
#, no-wrap
msgid "    # Install a given version of ChromeDriver for your OS...\n"
"    php artisan dusk:chrome-driver 86\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 86
# File: docs/master/dusk.md, line: 86
#. type: Plain text
#, no-wrap
msgid "    # Install a given version of ChromeDriver for all supported OSs...\n"
"    php artisan dusk:chrome-driver --all\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 89
# File: docs/master/dusk.md, line: 89
#. type: Plain text
#, no-wrap
msgid "    # Install the version of ChromeDriver that matches the detected version of Chrome / Chromium for your OS...\n"
"    php artisan dusk:chrome-driver --detect\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 91
# File: docs/master/dusk.md, line: 91
#. type: Plain text
#, no-wrap
msgid "> {note} Dusk requires the `chromedriver` binaries to be executable. If you're having problems running Dusk, you should ensure the binaries are executable using the following command: `chmod -R 0755 vendor/laravel/dusk/bin/`.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 93
# File: docs/master/dusk.md, line: 93
#. type: Plain text
#, no-wrap
msgid "<a name=\"using-other-browsers\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 93
# File: docs/master/dusk.md, line: 93
#. type: Title ###
#, no-wrap
msgid "Using Other Browsers"
msgstr ""

# File: docs/8.x/dusk.md, line: 96
# File: docs/master/dusk.md, line: 96
#. type: Plain text
msgid "By default, Dusk uses Google Chrome and a standalone [ChromeDriver](https://sites.google.com/chromium.org/driver) installation to run your browser tests. However, you may start your own Selenium server and run your tests against any browser you wish."
msgstr ""

# File: docs/8.x/dusk.md, line: 98
# File: docs/master/dusk.md, line: 98
#. type: Plain text
msgid "To get started, open your `tests/DuskTestCase.php` file, which is the base Dusk test case for your application. Within this file, you can remove the call to the `startChromeDriver` method. This will stop Dusk from automatically starting the ChromeDriver:"
msgstr ""

# File: docs/8.x/dusk.md, line: 109
# File: docs/8.x/dusk.md, line: 187
# File: docs/master/dusk.md, line: 109
# File: docs/master/dusk.md, line: 187
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Prepare for Dusk test execution.\n"
"     *\n"
"     * @beforeClass\n"
"     * @return void\n"
"     */\n"
"    public static function prepare()\n"
"    {\n"
"        // static::startChromeDriver();\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 111
# File: docs/master/dusk.md, line: 111
#. type: Plain text
msgid "Next, you may modify the `driver` method to connect to the URL and port of your choice. In addition, you may modify the \"desired capabilities\" that should be passed to the WebDriver:"
msgstr ""

# File: docs/8.x/dusk.md, line: 123
# File: docs/master/dusk.md, line: 123
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Create the RemoteWebDriver instance.\n"
"     *\n"
"     * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
"     */\n"
"    protected function driver()\n"
"    {\n"
"        return RemoteWebDriver::create(\n"
"            'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n"
"        );\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 125
# File: docs/master/dusk.md, line: 125
#. type: Plain text
#, no-wrap
msgid "<a name=\"getting-started\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 125
# File: docs/master/dusk.md, line: 125
#. type: Title ##
#, no-wrap
msgid "Getting Started"
msgstr ""

# File: docs/8.x/dusk.md, line: 128
# File: docs/master/dusk.md, line: 128
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-tests\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 128
# File: docs/master/dusk.md, line: 128
#. type: Title ###
#, no-wrap
msgid "Generating Tests"
msgstr ""

# File: docs/8.x/dusk.md, line: 131
# File: docs/master/dusk.md, line: 131
#. type: Plain text
msgid "To generate a Dusk test, use the `dusk:make` Artisan command. The generated test will be placed in the `tests/Browser` directory:"
msgstr ""

# File: docs/8.x/dusk.md, line: 133
# File: docs/master/dusk.md, line: 133
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk:make LoginTest\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 135
# File: docs/master/dusk.md, line: 135
#. type: Plain text
#, no-wrap
msgid "<a name=\"migrations\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 135
# File: docs/master/dusk.md, line: 135
#. type: Title ###
#, no-wrap
msgid "Database Migrations"
msgstr ""

# File: docs/8.x/dusk.md, line: 138
# File: docs/master/dusk.md, line: 138
#. type: Plain text
msgid "Most of the tests you write will interact with pages that retrieve data from your application's database; however, your Dusk tests should never use the `RefreshDatabase `trait. The `RefreshDatabase` trait leverages database transactions which will not be applicable or available across HTTP requests. Instead, use the `DatabaseMigrations` trait, which re-migrates the database for each test:"
msgstr ""

# File: docs/8.x/dusk.md, line: 140
# File: docs/8.x/dusk.md, line: 218
# File: docs/8.x/dusk.md, line: 323
# File: docs/8.x/dusk.md, line: 1625
# File: docs/8.x/dusk.md, line: 1672
# File: docs/8.x/dusk.md, line: 1746
# File: docs/master/dusk.md, line: 140
# File: docs/master/dusk.md, line: 218
# File: docs/master/dusk.md, line: 323
# File: docs/master/dusk.md, line: 1625
# File: docs/master/dusk.md, line: 1672
# File: docs/master/dusk.md, line: 1746
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 142
# File: docs/8.x/dusk.md, line: 220
# File: docs/8.x/dusk.md, line: 1748
# File: docs/master/dusk.md, line: 142
# File: docs/master/dusk.md, line: 220
# File: docs/master/dusk.md, line: 1748
#. type: Plain text
#, no-wrap
msgid "    namespace Tests\\Browser;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 147
# File: docs/8.x/dusk.md, line: 225
# File: docs/master/dusk.md, line: 147
# File: docs/master/dusk.md, line: 225
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"    use Laravel\\Dusk\\Chrome;\n"
"    use Tests\\DuskTestCase;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 152
# File: docs/master/dusk.md, line: 152
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        use DatabaseMigrations;\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 154
# File: docs/master/dusk.md, line: 154
#. type: Plain text
#, no-wrap
msgid "> {note} SQLite in-memory databases may not be used when executing Dusk tests. Since the browser executes within its own process, it will not be able to access the in-memory databases of other processes.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 156
# File: docs/master/dusk.md, line: 156
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-tests\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 156
# File: docs/master/dusk.md, line: 156
#. type: Title ###
#, no-wrap
msgid "Running Tests"
msgstr ""

# File: docs/8.x/dusk.md, line: 159
# File: docs/master/dusk.md, line: 159
#. type: Plain text
msgid "To run your browser tests, execute the `dusk` Artisan command:"
msgstr ""

# File: docs/8.x/dusk.md, line: 161
# File: docs/master/dusk.md, line: 161
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 163
# File: docs/master/dusk.md, line: 163
#. type: Plain text
msgid "If you had test failures the last time you ran the `dusk` command, you may save time by re-running the failing tests first using the `dusk:fails` command:"
msgstr ""

# File: docs/8.x/dusk.md, line: 165
# File: docs/master/dusk.md, line: 165
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk:fails\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 167
# File: docs/master/dusk.md, line: 167
#. type: Plain text
msgid "The `dusk` command accepts any argument that is normally accepted by the PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group):"
msgstr ""

# File: docs/8.x/dusk.md, line: 169
# File: docs/master/dusk.md, line: 169
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk --group=foo\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 171
# File: docs/master/dusk.md, line: 171
#. type: Plain text
#, no-wrap
msgid "> {tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk).\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 173
# File: docs/master/dusk.md, line: 173
#. type: Plain text
#, no-wrap
msgid "<a name=\"manually-starting-chromedriver\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 173
# File: docs/master/dusk.md, line: 173
#. type: Title ####
#, no-wrap
msgid "Manually Starting ChromeDriver"
msgstr ""

# File: docs/8.x/dusk.md, line: 176
# File: docs/master/dusk.md, line: 176
#. type: Plain text
msgid "By default, Dusk will automatically attempt to start ChromeDriver. If this does not work for your particular system, you may manually start ChromeDriver before running the `dusk` command. If you choose to start ChromeDriver manually, you should comment out the following line of your `tests/DuskTestCase.php` file:"
msgstr ""

# File: docs/8.x/dusk.md, line: 189
# File: docs/master/dusk.md, line: 189
#. type: Plain text
msgid "In addition, if you start ChromeDriver on a port other than 9515, you should modify the `driver` method of the same class to reflect the correct port:"
msgstr ""

# File: docs/8.x/dusk.md, line: 201
# File: docs/master/dusk.md, line: 201
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Create the RemoteWebDriver instance.\n"
"     *\n"
"     * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
"     */\n"
"    protected function driver()\n"
"    {\n"
"        return RemoteWebDriver::create(\n"
"            'http://localhost:9515', DesiredCapabilities::chrome()\n"
"        );\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 203
# File: docs/master/dusk.md, line: 203
#. type: Plain text
#, no-wrap
msgid "<a name=\"environment-handling\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 203
# File: docs/master/dusk.md, line: 203
#. type: Title ###
#, no-wrap
msgid "Environment Handling"
msgstr ""

# File: docs/8.x/dusk.md, line: 206
# File: docs/master/dusk.md, line: 206
#. type: Plain text
msgid "To force Dusk to use its own environment file when running tests, create a `.env.dusk.{environment}` file in the root of your project. For example, if you will be initiating the `dusk` command from your `local` environment, you should create a `.env.dusk.local` file."
msgstr ""

# File: docs/8.x/dusk.md, line: 208
# File: docs/master/dusk.md, line: 208
#. type: Plain text
msgid "When running tests, Dusk will back-up your `.env` file and rename your Dusk environment to `.env`. Once the tests have completed, your `.env` file will be restored."
msgstr ""

# File: docs/8.x/dusk.md, line: 210
# File: docs/master/dusk.md, line: 210
#. type: Plain text
#, no-wrap
msgid "<a name=\"browser-basics\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 210
# File: docs/master/dusk.md, line: 210
#. type: Title ##
#, no-wrap
msgid "Browser Basics"
msgstr ""

# File: docs/8.x/dusk.md, line: 213
# File: docs/master/dusk.md, line: 213
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-browsers\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 213
# File: docs/master/dusk.md, line: 213
#. type: Title ###
#, no-wrap
msgid "Creating Browsers"
msgstr ""

# File: docs/8.x/dusk.md, line: 216
# File: docs/master/dusk.md, line: 216
#. type: Plain text
msgid "To get started, let's write a test that verifies we can log into our application. After generating a test, we can modify it to navigate to the login page, enter some credentials, and click the \"Login\" button. To create a browser instance, you may call the `browse` method from within your Dusk test:"
msgstr ""

# File: docs/8.x/dusk.md, line: 229
# File: docs/master/dusk.md, line: 229
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        use DatabaseMigrations;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 240
# File: docs/master/dusk.md, line: 240
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * A basic browser test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_example()\n"
"        {\n"
"            $user = User::factory()->create([\n"
"                'email' => 'taylor@laravel.com',\n"
"            ]);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 250
# File: docs/master/dusk.md, line: 250
#. type: Plain text
#, no-wrap
msgid "            $this->browse(function ($browser) use ($user) {\n"
"                $browser->visit('/login')\n"
"                        ->type('email', $user->email)\n"
"                        ->type('password', 'password')\n"
"                        ->press('Login')\n"
"                        ->assertPathIs('/home');\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 252
# File: docs/master/dusk.md, line: 252
#. type: Plain text
msgid "As you can see in the example above, the `browse` method accepts a closure. A browser instance will automatically be passed to this closure by Dusk and is the main object used to interact with and make assertions against your application."
msgstr ""

# File: docs/8.x/dusk.md, line: 254
# File: docs/master/dusk.md, line: 254
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-multiple-browsers\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 254
# File: docs/master/dusk.md, line: 254
#. type: Title ####
#, no-wrap
msgid "Creating Multiple Browsers"
msgstr ""

# File: docs/8.x/dusk.md, line: 257
# File: docs/master/dusk.md, line: 257
#. type: Plain text
msgid "Sometimes you may need multiple browsers in order to properly carry out a test. For example, multiple browsers may be needed to test a chat screen that interacts with websockets. To create multiple browsers, simply add more browser arguments to the signature of the closure given to the `browse` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 262
# File: docs/master/dusk.md, line: 262
#. type: Plain text
#, no-wrap
msgid "    $this->browse(function ($first, $second) {\n"
"        $first->loginAs(User::find(1))\n"
"              ->visit('/home')\n"
"              ->waitForText('Message');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 268
# File: docs/master/dusk.md, line: 268
#. type: Plain text
#, no-wrap
msgid "        $second->loginAs(User::find(2))\n"
"               ->visit('/home')\n"
"               ->waitForText('Message')\n"
"               ->type('message', 'Hey Taylor')\n"
"               ->press('Send');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 272
# File: docs/master/dusk.md, line: 272
#. type: Plain text
#, no-wrap
msgid "        $first->waitForText('Hey Taylor')\n"
"              ->assertSee('Jeffrey Way');\n"
"    });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 274
# File: docs/master/dusk.md, line: 274
#. type: Plain text
#, no-wrap
msgid "<a name=\"navigation\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 274
# File: docs/master/dusk.md, line: 274
#. type: Title ###
#, no-wrap
msgid "Navigation"
msgstr ""

# File: docs/8.x/dusk.md, line: 277
# File: docs/master/dusk.md, line: 277
#. type: Plain text
msgid "The `visit` method may be used to navigate to a given URI within your application:"
msgstr ""

# File: docs/8.x/dusk.md, line: 279
# File: docs/master/dusk.md, line: 279
#. type: Plain text
#, no-wrap
msgid "    $browser->visit('/login');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 281
# File: docs/master/dusk.md, line: 281
#. type: Plain text
msgid "You may use the `visitRoute` method to navigate to a [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

# File: docs/8.x/dusk.md, line: 283
# File: docs/master/dusk.md, line: 283
#. type: Plain text
#, no-wrap
msgid "    $browser->visitRoute('login');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 285
# File: docs/master/dusk.md, line: 285
#. type: Plain text
msgid "You may navigate \"back\" and \"forward\" using the `back` and `forward` methods:"
msgstr ""

# File: docs/8.x/dusk.md, line: 287
# File: docs/master/dusk.md, line: 287
#. type: Plain text
#, no-wrap
msgid "    $browser->back();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 289
# File: docs/master/dusk.md, line: 289
#. type: Plain text
#, no-wrap
msgid "    $browser->forward();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 291
# File: docs/master/dusk.md, line: 291
#. type: Plain text
msgid "You may use the `refresh` method to refresh the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 293
# File: docs/master/dusk.md, line: 293
#. type: Plain text
#, no-wrap
msgid "    $browser->refresh();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 295
# File: docs/master/dusk.md, line: 295
#. type: Plain text
#, no-wrap
msgid "<a name=\"resizing-browser-windows\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 295
# File: docs/master/dusk.md, line: 295
#. type: Title ###
#, no-wrap
msgid "Resizing Browser Windows"
msgstr ""

# File: docs/8.x/dusk.md, line: 298
# File: docs/master/dusk.md, line: 298
#. type: Plain text
msgid "You may use the `resize` method to adjust the size of the browser window:"
msgstr ""

# File: docs/8.x/dusk.md, line: 300
# File: docs/master/dusk.md, line: 300
#. type: Plain text
#, no-wrap
msgid "    $browser->resize(1920, 1080);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 302
# File: docs/master/dusk.md, line: 302
#. type: Plain text
msgid "The `maximize` method may be used to maximize the browser window:"
msgstr ""

# File: docs/8.x/dusk.md, line: 304
# File: docs/master/dusk.md, line: 304
#. type: Plain text
#, no-wrap
msgid "    $browser->maximize();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 306
# File: docs/master/dusk.md, line: 306
#. type: Plain text
msgid "The `fitContent` method will resize the browser window to match the size of its content:"
msgstr ""

# File: docs/8.x/dusk.md, line: 308
# File: docs/master/dusk.md, line: 308
#. type: Plain text
#, no-wrap
msgid "    $browser->fitContent();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 310
# File: docs/master/dusk.md, line: 310
#. type: Plain text
msgid "When a test fails, Dusk will automatically resize the browser to fit the content prior to taking a screenshot. You may disable this feature by calling the `disableFitOnFailure` method within your test:"
msgstr ""

# File: docs/8.x/dusk.md, line: 312
# File: docs/master/dusk.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    $browser->disableFitOnFailure();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 314
# File: docs/master/dusk.md, line: 314
#. type: Plain text
msgid "You may use the `move` method to move the browser window to a different position on your screen:"
msgstr ""

# File: docs/8.x/dusk.md, line: 316
# File: docs/master/dusk.md, line: 316
#. type: Plain text
#, no-wrap
msgid "    $browser->move($x = 100, $y = 100);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 318
# File: docs/master/dusk.md, line: 318
#. type: Plain text
#, no-wrap
msgid "<a name=\"browser-macros\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 318
# File: docs/master/dusk.md, line: 318
#. type: Title ###
#, no-wrap
msgid "Browser Macros"
msgstr ""

# File: docs/8.x/dusk.md, line: 321
# File: docs/master/dusk.md, line: 321
#. type: Plain text
msgid "If you would like to define a custom browser method that you can re-use in a variety of your tests, you may use the `macro` method on the `Browser` class. Typically, you should call this method from a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 325
# File: docs/master/dusk.md, line: 325
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 328
# File: docs/master/dusk.md, line: 328
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\ServiceProvider;\n"
"    use Laravel\\Dusk\\Browser;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 340
# File: docs/master/dusk.md, line: 340
#. type: Plain text
#, no-wrap
msgid "    class DuskServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register Dusk's browser macros.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Browser::macro('scrollToElement', function ($element = null) {\n"
"                $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 345
# File: docs/master/dusk.md, line: 345
#. type: Plain text
#, no-wrap
msgid "                return $this;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 347
# File: docs/master/dusk.md, line: 347
#. type: Plain text
msgid "The `macro` function accepts a name as its first argument, and a closure as its second. The macro's closure will be executed when calling the macro as a method on a `Browser` instance:"
msgstr ""

# File: docs/8.x/dusk.md, line: 353
# File: docs/master/dusk.md, line: 353
#. type: Plain text
#, no-wrap
msgid "    $this->browse(function ($browser) use ($user) {\n"
"        $browser->visit('/pay')\n"
"                ->scrollToElement('#credit-card-details')\n"
"                ->assertSee('Enter Credit Card Details');\n"
"    });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 355
# File: docs/master/dusk.md, line: 355
#. type: Plain text
#, no-wrap
msgid "<a name=\"authentication\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 355
# File: docs/master/dusk.md, line: 355
#. type: Title ###
#, no-wrap
msgid "Authentication"
msgstr ""

# File: docs/8.x/dusk.md, line: 358
# File: docs/master/dusk.md, line: 358
#. type: Plain text
msgid "Often, you will be testing pages that require authentication. You can use Dusk's `loginAs` method in order to avoid interacting with your application's login screen during every test. The `loginAs` method accepts a primary key associated with your authenticatable model or an authenticatable model instance:"
msgstr ""

# File: docs/8.x/dusk.md, line: 360
# File: docs/master/dusk.md, line: 360
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 365
# File: docs/master/dusk.md, line: 365
#. type: Plain text
#, no-wrap
msgid "    $this->browse(function ($browser) {\n"
"        $browser->loginAs(User::find(1))\n"
"              ->visit('/home');\n"
"    });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 367
# File: docs/master/dusk.md, line: 367
#. type: Plain text
#, no-wrap
msgid "> {note} After using the `loginAs` method, the user session will be maintained for all tests within the file.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 369
# File: docs/master/dusk.md, line: 369
#. type: Plain text
#, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 369
# File: docs/master/dusk.md, line: 369
#. type: Title ###
#, no-wrap
msgid "Cookies"
msgstr ""

# File: docs/8.x/dusk.md, line: 372
# File: docs/master/dusk.md, line: 372
#. type: Plain text
msgid "You may use the `cookie` method to get or set an encrypted cookie's value. By default, all of the cookies created by Laravel are encrypted:"
msgstr ""

# File: docs/8.x/dusk.md, line: 374
# File: docs/master/dusk.md, line: 374
#. type: Plain text
#, no-wrap
msgid "    $browser->cookie('name');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 376
# File: docs/master/dusk.md, line: 376
#. type: Plain text
#, no-wrap
msgid "    $browser->cookie('name', 'Taylor');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 378
# File: docs/master/dusk.md, line: 378
#. type: Plain text
msgid "You may use the `plainCookie` method to get or set an unencrypted cookie's value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 380
# File: docs/master/dusk.md, line: 380
#. type: Plain text
#, no-wrap
msgid "    $browser->plainCookie('name');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 382
# File: docs/master/dusk.md, line: 382
#. type: Plain text
#, no-wrap
msgid "    $browser->plainCookie('name', 'Taylor');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 384
# File: docs/master/dusk.md, line: 384
#. type: Plain text
msgid "You may use the `deleteCookie` method to delete the given cookie:"
msgstr ""

# File: docs/8.x/dusk.md, line: 386
# File: docs/master/dusk.md, line: 386
#. type: Plain text
#, no-wrap
msgid "    $browser->deleteCookie('name');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 388
# File: docs/master/dusk.md, line: 388
#. type: Plain text
#, no-wrap
msgid "<a name=\"executing-javascript\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 388
# File: docs/master/dusk.md, line: 388
#. type: Title ###
#, no-wrap
msgid "Executing JavaScript"
msgstr ""

# File: docs/8.x/dusk.md, line: 391
# File: docs/master/dusk.md, line: 391
#. type: Plain text
msgid "You may use the `script` method to execute arbitrary JavaScript statements within the browser:"
msgstr ""

# File: docs/8.x/dusk.md, line: 393
# File: docs/master/dusk.md, line: 393
#. type: Plain text
#, no-wrap
msgid "    $browser->script('document.documentElement.scrollTop = 0');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 398
# File: docs/master/dusk.md, line: 398
#. type: Plain text
#, no-wrap
msgid "    $browser->script([\n"
"        'document.body.scrollTop = 0',\n"
"        'document.documentElement.scrollTop = 0',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 400
# File: docs/master/dusk.md, line: 400
#. type: Plain text
#, no-wrap
msgid "    $output = $browser->script('return window.location.pathname');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 402
# File: docs/master/dusk.md, line: 402
#. type: Plain text
#, no-wrap
msgid "<a name=\"taking-a-screenshot\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 402
# File: docs/master/dusk.md, line: 402
#. type: Title ###
#, no-wrap
msgid "Taking A Screenshot"
msgstr ""

# File: docs/8.x/dusk.md, line: 405
# File: docs/master/dusk.md, line: 405
#. type: Plain text
msgid "You may use the `screenshot` method to take a screenshot and store it with the given filename. All screenshots will be stored within the `tests/Browser/screenshots` directory:"
msgstr ""

# File: docs/8.x/dusk.md, line: 407
# File: docs/master/dusk.md, line: 407
#. type: Plain text
#, no-wrap
msgid "    $browser->screenshot('filename');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 409
# File: docs/master/dusk.md, line: 409
#. type: Plain text
#, no-wrap
msgid "<a name=\"storing-console-output-to-disk\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 409
# File: docs/master/dusk.md, line: 409
#. type: Title ###
#, no-wrap
msgid "Storing Console Output To Disk"
msgstr ""

# File: docs/8.x/dusk.md, line: 412
# File: docs/master/dusk.md, line: 412
#. type: Plain text
msgid "You may use the `storeConsoleLog` method to write the current browser's console output to disk with the given filename. Console output will be stored within the `tests/Browser/console` directory:"
msgstr ""

# File: docs/8.x/dusk.md, line: 414
# File: docs/master/dusk.md, line: 414
#. type: Plain text
#, no-wrap
msgid "    $browser->storeConsoleLog('filename');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 416
# File: docs/master/dusk.md, line: 416
#. type: Plain text
#, no-wrap
msgid "<a name=\"storing-page-source-to-disk\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 416
# File: docs/master/dusk.md, line: 416
#. type: Title ###
#, no-wrap
msgid "Storing Page Source To Disk"
msgstr ""

# File: docs/8.x/dusk.md, line: 419
# File: docs/master/dusk.md, line: 419
#. type: Plain text
msgid "You may use the `storeSource` method to write the current page's source to disk with the given filename. The page source will be stored within the `tests/Browser/source` directory:"
msgstr ""

# File: docs/8.x/dusk.md, line: 421
# File: docs/master/dusk.md, line: 421
#. type: Plain text
#, no-wrap
msgid "    $browser->storeSource('filename');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 423
# File: docs/master/dusk.md, line: 423
#. type: Plain text
#, no-wrap
msgid "<a name=\"interacting-with-elements\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 423
# File: docs/master/dusk.md, line: 423
#. type: Title ##
#, no-wrap
msgid "Interacting With Elements"
msgstr ""

# File: docs/8.x/dusk.md, line: 426
# File: docs/master/dusk.md, line: 426
#. type: Plain text
#, no-wrap
msgid "<a name=\"dusk-selectors\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 426
# File: docs/master/dusk.md, line: 426
#. type: Title ###
#, no-wrap
msgid "Dusk Selectors"
msgstr ""

# File: docs/8.x/dusk.md, line: 429
# File: docs/master/dusk.md, line: 429
#. type: Plain text
msgid "Choosing good CSS selectors for interacting with elements is one of the hardest parts of writing Dusk tests. Over time, frontend changes can cause CSS selectors like the following to break your tests:"
msgstr ""

# File: docs/8.x/dusk.md, line: 431
# File: docs/8.x/dusk.md, line: 441
# File: docs/8.x/dusk.md, line: 1463
# File: docs/master/dusk.md, line: 431
# File: docs/master/dusk.md, line: 441
# File: docs/master/dusk.md, line: 1463
#. type: Plain text
#, no-wrap
msgid "    // HTML...\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 433
# File: docs/master/dusk.md, line: 433
#. type: Plain text
#, no-wrap
msgid "    <button>Login</button>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 435
# File: docs/8.x/dusk.md, line: 445
# File: docs/master/dusk.md, line: 435
# File: docs/master/dusk.md, line: 445
#. type: Plain text
#, no-wrap
msgid "    // Test...\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 437
# File: docs/master/dusk.md, line: 437
#. type: Plain text
#, no-wrap
msgid "    $browser->click('.login-page .container div > button');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 439
# File: docs/master/dusk.md, line: 439
#. type: Plain text
msgid "Dusk selectors allow you to focus on writing effective tests rather than remembering CSS selectors. To define a selector, add a `dusk` attribute to your HTML element. Then, when interacting with a Dusk browser, prefix the selector with `@` to manipulate the attached element within your test:"
msgstr ""

# File: docs/8.x/dusk.md, line: 443
# File: docs/master/dusk.md, line: 443
#. type: Plain text
#, no-wrap
msgid "    <button dusk=\"login-button\">Login</button>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 447
# File: docs/master/dusk.md, line: 447
#. type: Plain text
#, no-wrap
msgid "    $browser->click('@login-button');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 449
# File: docs/master/dusk.md, line: 449
#. type: Plain text
#, no-wrap
msgid "<a name=\"text-values-and-attributes\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 449
# File: docs/master/dusk.md, line: 449
#. type: Title ###
#, no-wrap
msgid "Text, Values, & Attributes"
msgstr ""

# File: docs/8.x/dusk.md, line: 452
# File: docs/master/dusk.md, line: 452
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-setting-values\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 452
# File: docs/master/dusk.md, line: 452
#. type: Title ####
#, no-wrap
msgid "Retrieving & Setting Values"
msgstr ""

# File: docs/8.x/dusk.md, line: 455
# File: docs/master/dusk.md, line: 455
#. type: Plain text
msgid "Dusk provides several methods for interacting with the current value, display text, and attributes of elements on the page. For example, to get the \"value\" of an element that matches a given CSS or Dusk selector, use the `value` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 458
# File: docs/master/dusk.md, line: 458
#. type: Plain text
#, no-wrap
msgid "    // Retrieve the value...\n"
"    $value = $browser->value('selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 461
# File: docs/master/dusk.md, line: 461
#. type: Plain text
#, no-wrap
msgid "    // Set the value...\n"
"    $browser->value('selector', 'value');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 463
# File: docs/master/dusk.md, line: 463
#. type: Plain text
msgid "You may use the `inputValue` method to get the \"value\" of an input element that has a given field name:"
msgstr ""

# File: docs/8.x/dusk.md, line: 465
# File: docs/master/dusk.md, line: 465
#. type: Plain text
#, no-wrap
msgid "    $value = $browser->inputValue('field');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 467
# File: docs/master/dusk.md, line: 467
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-text\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 467
# File: docs/master/dusk.md, line: 467
#. type: Title ####
#, no-wrap
msgid "Retrieving Text"
msgstr ""

# File: docs/8.x/dusk.md, line: 470
# File: docs/master/dusk.md, line: 470
#. type: Plain text
msgid "The `text` method may be used to retrieve the display text of an element that matches the given selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 472
# File: docs/master/dusk.md, line: 472
#. type: Plain text
#, no-wrap
msgid "    $text = $browser->text('selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 474
# File: docs/master/dusk.md, line: 474
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-attributes\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 474
# File: docs/master/dusk.md, line: 474
#. type: Title ####
#, no-wrap
msgid "Retrieving Attributes"
msgstr ""

# File: docs/8.x/dusk.md, line: 477
# File: docs/master/dusk.md, line: 477
#. type: Plain text
msgid "Finally, the `attribute` method may be used to retrieve the value of an attribute of an element matching the given selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 479
# File: docs/master/dusk.md, line: 479
#. type: Plain text
#, no-wrap
msgid "    $attribute = $browser->attribute('selector', 'value');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 481
# File: docs/master/dusk.md, line: 481
#. type: Plain text
#, no-wrap
msgid "<a name=\"interacting-with-forms\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 481
# File: docs/master/dusk.md, line: 481
#. type: Title ###
#, no-wrap
msgid "Interacting With Forms"
msgstr ""

# File: docs/8.x/dusk.md, line: 484
# File: docs/master/dusk.md, line: 484
#. type: Plain text
#, no-wrap
msgid "<a name=\"typing-values\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 484
# File: docs/master/dusk.md, line: 484
#. type: Title ####
#, no-wrap
msgid "Typing Values"
msgstr ""

# File: docs/8.x/dusk.md, line: 487
# File: docs/master/dusk.md, line: 487
#. type: Plain text
msgid "Dusk provides a variety of methods for interacting with forms and input elements. First, let's take a look at an example of typing text into an input field:"
msgstr ""

# File: docs/8.x/dusk.md, line: 489
# File: docs/master/dusk.md, line: 489
#. type: Plain text
#, no-wrap
msgid "    $browser->type('email', 'taylor@laravel.com');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 491
# File: docs/master/dusk.md, line: 491
#. type: Plain text
msgid "Note that, although the method accepts one if necessary, we are not required to pass a CSS selector into the `type` method. If a CSS selector is not provided, Dusk will search for an `input` or `textarea` field with the given `name` attribute."
msgstr ""

# File: docs/8.x/dusk.md, line: 493
# File: docs/master/dusk.md, line: 493
#. type: Plain text
msgid "To append text to a field without clearing its content, you may use the `append` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 496
# File: docs/master/dusk.md, line: 496
#. type: Plain text
#, no-wrap
msgid "    $browser->type('tags', 'foo')\n"
"            ->append('tags', ', bar, baz');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 498
# File: docs/master/dusk.md, line: 498
#. type: Plain text
msgid "You may clear the value of an input using the `clear` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 500
# File: docs/master/dusk.md, line: 500
#. type: Plain text
#, no-wrap
msgid "    $browser->clear('email');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 502
# File: docs/master/dusk.md, line: 502
#. type: Plain text
msgid "You can instruct Dusk to type slowly using the `typeSlowly` method. By default, Dusk will pause for 100 milliseconds between key presses. To customize the amount of time between key presses, you may pass the appropriate number of milliseconds as the third argument to the method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 504
# File: docs/master/dusk.md, line: 504
#. type: Plain text
#, no-wrap
msgid "    $browser->typeSlowly('mobile', '+1 (202) 555-5555');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 506
# File: docs/master/dusk.md, line: 506
#. type: Plain text
#, no-wrap
msgid "    $browser->typeSlowly('mobile', '+1 (202) 555-5555', 300);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 508
# File: docs/master/dusk.md, line: 508
#. type: Plain text
msgid "You may use the `appendSlowly` method to append text slowly:"
msgstr ""

# File: docs/8.x/dusk.md, line: 511
# File: docs/master/dusk.md, line: 511
#. type: Plain text
#, no-wrap
msgid "    $browser->type('tags', 'foo')\n"
"            ->appendSlowly('tags', ', bar, baz');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 513
# File: docs/master/dusk.md, line: 513
#. type: Plain text
#, no-wrap
msgid "<a name=\"dropdowns\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 513
# File: docs/master/dusk.md, line: 513
#. type: Title ####
#, no-wrap
msgid "Dropdowns"
msgstr ""

# File: docs/8.x/dusk.md, line: 516
# File: docs/master/dusk.md, line: 516
#. type: Plain text
msgid "To select a value available on a `select` element, you may use the `select` method. Like the `type` method, the `select` method does not require a full CSS selector. When passing a value to the `select` method, you should pass the underlying option value instead of the display text:"
msgstr ""

# File: docs/8.x/dusk.md, line: 518
# File: docs/master/dusk.md, line: 518
#. type: Plain text
#, no-wrap
msgid "    $browser->select('size', 'Large');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 520
# File: docs/master/dusk.md, line: 520
#. type: Plain text
msgid "You may select a random option by omitting the second argument:"
msgstr ""

# File: docs/8.x/dusk.md, line: 522
# File: docs/master/dusk.md, line: 522
#. type: Plain text
#, no-wrap
msgid "    $browser->select('size');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 524
# File: docs/master/dusk.md, line: 524
#. type: Plain text
msgid "By providing an array as the second argument to the `select` method, you can instruct the method to select multiple options:"
msgstr ""

# File: docs/8.x/dusk.md, line: 526
# File: docs/master/dusk.md, line: 526
#. type: Plain text
#, no-wrap
msgid "    $browser->select('categories', ['Art', 'Music']);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 528
# File: docs/master/dusk.md, line: 528
#. type: Plain text
#, no-wrap
msgid "<a name=\"checkboxes\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 528
# File: docs/master/dusk.md, line: 528
#. type: Title ####
#, no-wrap
msgid "Checkboxes"
msgstr ""

# File: docs/8.x/dusk.md, line: 531
# File: docs/master/dusk.md, line: 531
#. type: Plain text
msgid "To \"check\" a checkbox input, you may use the `check` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a checkbox with a matching `name` attribute:"
msgstr ""

# File: docs/8.x/dusk.md, line: 533
# File: docs/master/dusk.md, line: 533
#. type: Plain text
#, no-wrap
msgid "    $browser->check('terms');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 535
# File: docs/master/dusk.md, line: 535
#. type: Plain text
msgid "The `uncheck` method may be used to \"uncheck\" a checkbox input:"
msgstr ""

# File: docs/8.x/dusk.md, line: 537
# File: docs/master/dusk.md, line: 537
#. type: Plain text
#, no-wrap
msgid "    $browser->uncheck('terms');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 539
# File: docs/master/dusk.md, line: 539
#. type: Plain text
#, no-wrap
msgid "<a name=\"radio-buttons\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 539
# File: docs/master/dusk.md, line: 539
#. type: Title ####
#, no-wrap
msgid "Radio Buttons"
msgstr ""

# File: docs/8.x/dusk.md, line: 542
# File: docs/master/dusk.md, line: 542
#. type: Plain text
msgid "To \"select\" a `radio` input option, you may use the `radio` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `radio` input with matching `name` and `value` attributes:"
msgstr ""

# File: docs/8.x/dusk.md, line: 544
# File: docs/master/dusk.md, line: 544
#. type: Plain text
#, no-wrap
msgid "    $browser->radio('size', 'large');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 546
# File: docs/master/dusk.md, line: 546
#. type: Plain text
#, no-wrap
msgid "<a name=\"attaching-files\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 546
# File: docs/master/dusk.md, line: 546
#. type: Title ###
#, no-wrap
msgid "Attaching Files"
msgstr ""

# File: docs/8.x/dusk.md, line: 549
# File: docs/master/dusk.md, line: 549
#. type: Plain text
msgid "The `attach` method may be used to attach a file to a `file` input element. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `file` input with a matching `name` attribute:"
msgstr ""

# File: docs/8.x/dusk.md, line: 551
# File: docs/master/dusk.md, line: 551
#. type: Plain text
#, no-wrap
msgid "    $browser->attach('photo', __DIR__.'/photos/mountains.png');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 553
# File: docs/master/dusk.md, line: 553
#. type: Plain text
#, no-wrap
msgid "> {note} The attach function requires the `Zip` PHP extension to be installed and enabled on your server.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 555
# File: docs/master/dusk.md, line: 555
#. type: Plain text
#, no-wrap
msgid "<a name=\"pressing-buttons\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 555
# File: docs/master/dusk.md, line: 555
#. type: Title ###
#, no-wrap
msgid "Pressing Buttons"
msgstr ""

# File: docs/8.x/dusk.md, line: 558
# File: docs/master/dusk.md, line: 558
#. type: Plain text
msgid "The `press` method may be used to click a button element on the page. The first argument given to the `press` method may be either the display text of the button or a CSS / Dusk selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 560
# File: docs/master/dusk.md, line: 560
#. type: Plain text
#, no-wrap
msgid "    $browser->press('Login');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 562
# File: docs/master/dusk.md, line: 562
#. type: Plain text
msgid "When submitting forms, many application's disable the form's submission button after it is pressed and then re-enable the button when the form submission's HTTP request is complete. To press a button and wait for the button to be re-enabled, you may use the `pressAndWaitFor` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 565
# File: docs/master/dusk.md, line: 565
#. type: Plain text
#, no-wrap
msgid "    // Press the button and wait a maximum of 5 seconds for it to be enabled...\n"
"    $browser->pressAndWaitFor('Save');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 568
# File: docs/master/dusk.md, line: 568
#. type: Plain text
#, no-wrap
msgid "    // Press the button and wait a maximum of 1 second for it to be enabled...\n"
"    $browser->pressAndWaitFor('Save', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 570
# File: docs/master/dusk.md, line: 570
#. type: Plain text
#, no-wrap
msgid "<a name=\"clicking-links\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 570
# File: docs/master/dusk.md, line: 570
#. type: Title ###
#, no-wrap
msgid "Clicking Links"
msgstr ""

# File: docs/8.x/dusk.md, line: 573
# File: docs/master/dusk.md, line: 573
#. type: Plain text
msgid "To click a link, you may use the `clickLink` method on the browser instance. The `clickLink` method will click the link that has the given display text:"
msgstr ""

# File: docs/8.x/dusk.md, line: 575
# File: docs/master/dusk.md, line: 575
#. type: Plain text
#, no-wrap
msgid "    $browser->clickLink($linkText);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 577
# File: docs/master/dusk.md, line: 577
#. type: Plain text
msgid "You may use the `seeLink` method to determine if a link with the given display text is visible on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 581
# File: docs/master/dusk.md, line: 581
#. type: Plain text
#, no-wrap
msgid "    if ($browser->seeLink($linkText)) {\n"
"        // ...\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 583
# File: docs/master/dusk.md, line: 583
#. type: Plain text
#, no-wrap
msgid "> {note} These methods interact with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test's duration.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 585
# File: docs/master/dusk.md, line: 585
#. type: Plain text
#, no-wrap
msgid "<a name=\"using-the-keyboard\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 585
# File: docs/master/dusk.md, line: 585
#. type: Title ###
#, no-wrap
msgid "Using The Keyboard"
msgstr ""

# File: docs/8.x/dusk.md, line: 588
# File: docs/master/dusk.md, line: 588
#. type: Plain text
msgid "The `keys` method allows you to provide more complex input sequences to a given element than normally allowed by the `type` method. For example, you may instruct Dusk to hold modifier keys while entering values. In this example, the `shift` key will be held while `taylor` is entered into the element matching the given selector. After `taylor` is typed, `swift` will be typed without any modifier keys:"
msgstr ""

# File: docs/8.x/dusk.md, line: 590
# File: docs/master/dusk.md, line: 590
#. type: Plain text
#, no-wrap
msgid "    $browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 592
# File: docs/master/dusk.md, line: 592
#. type: Plain text
msgid "Another valuable use case for the `keys` method is sending a \"keyboard shortcut\" combination to the primary CSS selector for your application:"
msgstr ""

# File: docs/8.x/dusk.md, line: 594
# File: docs/master/dusk.md, line: 594
#. type: Plain text
#, no-wrap
msgid "    $browser->keys('.app', ['{command}', 'j']);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 596
# File: docs/master/dusk.md, line: 596
#. type: Plain text
#, no-wrap
msgid "> {tip} All modifier keys such as `{command}` are wrapped in `{}` characters, and match the constants defined in the `Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php).\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 598
# File: docs/master/dusk.md, line: 598
#. type: Plain text
#, no-wrap
msgid "<a name=\"using-the-mouse\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 598
# File: docs/master/dusk.md, line: 598
#. type: Title ###
#, no-wrap
msgid "Using The Mouse"
msgstr ""

# File: docs/8.x/dusk.md, line: 601
# File: docs/master/dusk.md, line: 601
#. type: Plain text
#, no-wrap
msgid "<a name=\"clicking-on-elements\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 601
# File: docs/master/dusk.md, line: 601
#. type: Title ####
#, no-wrap
msgid "Clicking On Elements"
msgstr ""

# File: docs/8.x/dusk.md, line: 604
# File: docs/master/dusk.md, line: 604
#. type: Plain text
msgid "The `click` method may be used to click on an element matching the given CSS or Dusk selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 606
# File: docs/master/dusk.md, line: 606
#. type: Plain text
#, no-wrap
msgid "    $browser->click('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 608
# File: docs/master/dusk.md, line: 608
#. type: Plain text
msgid "The `clickAtXPath` method may be used to click on an element matching the given XPath expression:"
msgstr ""

# File: docs/8.x/dusk.md, line: 610
# File: docs/master/dusk.md, line: 610
#. type: Plain text
#, no-wrap
msgid "    $browser->clickAtXPath('//div[@class = \"selector\"]');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 612
# File: docs/master/dusk.md, line: 612
#. type: Plain text
msgid "The `clickAtPoint` method may be used to click on the topmost element at a given pair of coordinates relative to the viewable area of the browser:"
msgstr ""

# File: docs/8.x/dusk.md, line: 614
# File: docs/master/dusk.md, line: 614
#. type: Plain text
#, no-wrap
msgid "    $browser->clickAtPoint($x = 0, $y = 0);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 616
# File: docs/master/dusk.md, line: 616
#. type: Plain text
msgid "The `doubleClick` method may be used to simulate the double click of a mouse:"
msgstr ""

# File: docs/8.x/dusk.md, line: 618
# File: docs/master/dusk.md, line: 618
#. type: Plain text
#, no-wrap
msgid "    $browser->doubleClick();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 620
# File: docs/master/dusk.md, line: 620
#. type: Plain text
msgid "The `rightClick` method may be used to simulate the right click of a mouse:"
msgstr ""

# File: docs/8.x/dusk.md, line: 622
# File: docs/master/dusk.md, line: 622
#. type: Plain text
#, no-wrap
msgid "    $browser->rightClick();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 624
# File: docs/master/dusk.md, line: 624
#. type: Plain text
#, no-wrap
msgid "    $browser->rightClick('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 626
# File: docs/master/dusk.md, line: 626
#. type: Plain text
msgid "The `clickAndHold` method may be used to simulate a mouse button being clicked and held down. A subsequent call to the `releaseMouse` method will undo this behavior and release the mouse button:"
msgstr ""

# File: docs/8.x/dusk.md, line: 630
# File: docs/master/dusk.md, line: 630
#. type: Plain text
#, no-wrap
msgid "    $browser->clickAndHold()\n"
"            ->pause(1000)\n"
"            ->releaseMouse();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 632
# File: docs/master/dusk.md, line: 632
#. type: Plain text
#, no-wrap
msgid "<a name=\"mouseover\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 632
# File: docs/master/dusk.md, line: 632
#. type: Title ####
#, no-wrap
msgid "Mouseover"
msgstr ""

# File: docs/8.x/dusk.md, line: 635
# File: docs/master/dusk.md, line: 635
#. type: Plain text
msgid "The `mouseover` method may be used when you need to move the mouse over an element matching the given CSS or Dusk selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 637
# File: docs/master/dusk.md, line: 637
#. type: Plain text
#, no-wrap
msgid "    $browser->mouseover('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 639
# File: docs/master/dusk.md, line: 639
#. type: Plain text
#, no-wrap
msgid "<a name=\"drag-drop\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 639
# File: docs/master/dusk.md, line: 639
#. type: Title ####
#, no-wrap
msgid "Drag & Drop"
msgstr ""

# File: docs/8.x/dusk.md, line: 642
# File: docs/master/dusk.md, line: 642
#. type: Plain text
msgid "The `drag` method may be used to drag an element matching the given selector to another element:"
msgstr ""

# File: docs/8.x/dusk.md, line: 644
# File: docs/master/dusk.md, line: 644
#. type: Plain text
#, no-wrap
msgid "    $browser->drag('.from-selector', '.to-selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 646
# File: docs/master/dusk.md, line: 646
#. type: Plain text
msgid "Or, you may drag an element in a single direction:"
msgstr ""

# File: docs/8.x/dusk.md, line: 651
# File: docs/master/dusk.md, line: 651
#. type: Plain text
#, no-wrap
msgid "    $browser->dragLeft('.selector', $pixels = 10);\n"
"    $browser->dragRight('.selector', $pixels = 10);\n"
"    $browser->dragUp('.selector', $pixels = 10);\n"
"    $browser->dragDown('.selector', $pixels = 10);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 653
# File: docs/master/dusk.md, line: 653
#. type: Plain text
msgid "Finally, you may drag an element by a given offset:"
msgstr ""

# File: docs/8.x/dusk.md, line: 655
# File: docs/master/dusk.md, line: 655
#. type: Plain text
#, no-wrap
msgid "    $browser->dragOffset('.selector', $x = 10, $y = 10);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 657
# File: docs/master/dusk.md, line: 657
#. type: Plain text
#, no-wrap
msgid "<a name=\"javascript-dialogs\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 657
# File: docs/master/dusk.md, line: 657
#. type: Title ###
#, no-wrap
msgid "JavaScript Dialogs"
msgstr ""

# File: docs/8.x/dusk.md, line: 660
# File: docs/master/dusk.md, line: 660
#. type: Plain text
msgid "Dusk provides various methods to interact with JavaScript Dialogs. For example, you may use the `waitForDialog` method to wait for a JavaScript dialog to appear. This method accepts an optional argument indicating how many seconds to wait for the dialog to appear:"
msgstr ""

# File: docs/8.x/dusk.md, line: 662
# File: docs/master/dusk.md, line: 662
#. type: Plain text
#, no-wrap
msgid "    $browser->waitForDialog($seconds = null);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 664
# File: docs/master/dusk.md, line: 664
#. type: Plain text
msgid "The `assertDialogOpened` method may be used to assert that a dialog has been displayed and contains the given message:"
msgstr ""

# File: docs/8.x/dusk.md, line: 666
# File: docs/master/dusk.md, line: 666
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDialogOpened('Dialog message');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 668
# File: docs/master/dusk.md, line: 668
#. type: Plain text
msgid "If the JavaScript dialog contains a prompt, you may use the `typeInDialog` method to type a value into the prompt:"
msgstr ""

# File: docs/8.x/dusk.md, line: 670
# File: docs/master/dusk.md, line: 670
#. type: Plain text
#, no-wrap
msgid "    $browser->typeInDialog('Hello World');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 672
# File: docs/master/dusk.md, line: 672
#. type: Plain text
msgid "To close an open JavaScript dialog by clicking the \"OK\" button, you may invoke the `acceptDialog` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 674
# File: docs/master/dusk.md, line: 674
#. type: Plain text
#, no-wrap
msgid "    $browser->acceptDialog();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 676
# File: docs/master/dusk.md, line: 676
#. type: Plain text
msgid "To close an open JavaScript dialog by clicking the \"Cancel\" button, you may invoke the `dismissDialog` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 678
# File: docs/master/dusk.md, line: 678
#. type: Plain text
#, no-wrap
msgid "    $browser->dismissDialog();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 680
# File: docs/master/dusk.md, line: 680
#. type: Plain text
#, no-wrap
msgid "<a name=\"scoping-selectors\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 680
# File: docs/master/dusk.md, line: 680
#. type: Title ###
#, no-wrap
msgid "Scoping Selectors"
msgstr ""

# File: docs/8.x/dusk.md, line: 683
# File: docs/master/dusk.md, line: 683
#. type: Plain text
msgid "Sometimes you may wish to perform several operations while scoping all of the operations within a given selector. For example, you may wish to assert that some text exists only within a table and then click a button within that table. You may use the `with` method to accomplish this. All operations performed within the closure given to the `with` method will be scoped to the original selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 688
# File: docs/master/dusk.md, line: 688
#. type: Plain text
#, no-wrap
msgid "    $browser->with('.table', function ($table) {\n"
"        $table->assertSee('Hello World')\n"
"              ->clickLink('Delete');\n"
"    });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 690
# File: docs/master/dusk.md, line: 690
#. type: Plain text
msgid "You may occasionally need to execute assertions outside of the current scope. You may use the `elsewhere` and `elsewhereWhenAvailable` methods to accomplish this:"
msgstr ""

# File: docs/8.x/dusk.md, line: 693
# File: docs/master/dusk.md, line: 693
#. type: Plain text
#, no-wrap
msgid "     $browser->with('.table', function ($table) {\n"
"        // Current scope is `body .table`...\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 698
# File: docs/master/dusk.md, line: 698
#. type: Plain text
#, no-wrap
msgid "        $browser->elsewhere('.page-title', function ($title) {\n"
"            // Current scope is `body .page-title`...\n"
"            $title->assertSee('Hello World');\n"
"        });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 704
# File: docs/master/dusk.md, line: 704
#. type: Plain text
#, no-wrap
msgid "        $browser->elsewhereWhenAvailable('.page-title', function ($title) {\n"
"            // Current scope is `body .page-title`...\n"
"            $title->assertSee('Hello World');\n"
"        });\n"
"     });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 706
# File: docs/master/dusk.md, line: 706
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-for-elements\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 706
# File: docs/master/dusk.md, line: 706
#. type: Title ###
#, no-wrap
msgid "Waiting For Elements"
msgstr ""

# File: docs/8.x/dusk.md, line: 709
# File: docs/master/dusk.md, line: 709
#. type: Plain text
msgid "When testing applications that use JavaScript extensively, it often becomes necessary to \"wait\" for certain elements or data to be available before proceeding with a test. Dusk makes this a cinch. Using a variety of methods, you may wait for elements to become visible on the page or even wait until a given JavaScript expression evaluates to `true`."
msgstr ""

# File: docs/8.x/dusk.md, line: 711
# File: docs/master/dusk.md, line: 711
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 711
# File: docs/master/dusk.md, line: 711
#. type: Title ####
#, no-wrap
msgid "Waiting"
msgstr ""

# File: docs/8.x/dusk.md, line: 714
# File: docs/master/dusk.md, line: 714
#. type: Plain text
msgid "If you just need to pause the test for a given number of milliseconds, use the `pause` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 716
# File: docs/master/dusk.md, line: 716
#. type: Plain text
#, no-wrap
msgid "    $browser->pause(1000);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 718
# File: docs/master/dusk.md, line: 718
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-for-selectors\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 718
# File: docs/master/dusk.md, line: 718
#. type: Title ####
#, no-wrap
msgid "Waiting For Selectors"
msgstr ""

# File: docs/8.x/dusk.md, line: 721
# File: docs/master/dusk.md, line: 721
#. type: Plain text
msgid "The `waitFor` method may be used to pause the execution of the test until the element matching the given CSS or Dusk selector is displayed on the page. By default, this will pause the test for a maximum of five seconds before throwing an exception. If necessary, you may pass a custom timeout threshold as the second argument to the method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 724
# File: docs/master/dusk.md, line: 724
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds for the selector...\n"
"    $browser->waitFor('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 727
# File: docs/master/dusk.md, line: 727
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second for the selector...\n"
"    $browser->waitFor('.selector', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 729
# File: docs/master/dusk.md, line: 729
#. type: Plain text
msgid "You may also wait until the element matching the given selector contains the given text:"
msgstr ""

# File: docs/8.x/dusk.md, line: 732
# File: docs/master/dusk.md, line: 732
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds for the selector to contain the given text...\n"
"    $browser->waitForTextIn('.selector', 'Hello World');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 735
# File: docs/master/dusk.md, line: 735
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second for the selector to contain the given text...\n"
"    $browser->waitForTextIn('.selector', 'Hello World', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 737
# File: docs/master/dusk.md, line: 737
#. type: Plain text
msgid "You may also wait until the element matching the given selector is missing from the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 740
# File: docs/master/dusk.md, line: 740
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds until the selector is missing...\n"
"    $browser->waitUntilMissing('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 743
# File: docs/master/dusk.md, line: 743
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second until the selector is missing...\n"
"    $browser->waitUntilMissing('.selector', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 745
# File: docs/master/dusk.md, line: 745
#. type: Plain text
msgid "Or, you may wait until the element matching the given selector is enabled or disabled:"
msgstr ""

# File: docs/8.x/dusk.md, line: 748
# File: docs/master/dusk.md, line: 748
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds until the selector is enabled...\n"
"    $browser->waitUntilEnabled('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 751
# File: docs/master/dusk.md, line: 751
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second until the selector is enabled...\n"
"    $browser->waitUntilEnabled('.selector', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 754
# File: docs/master/dusk.md, line: 754
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds until the selector is disabled...\n"
"    $browser->waitUntilDisabled('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 757
# File: docs/master/dusk.md, line: 757
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second until the selector is disabled...\n"
"    $browser->waitUntilDisabled('.selector', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 759
# File: docs/master/dusk.md, line: 759
#. type: Plain text
#, no-wrap
msgid "<a name=\"scoping-selectors-when-available\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 759
# File: docs/master/dusk.md, line: 759
#. type: Title ####
#, no-wrap
msgid "Scoping Selectors When Available"
msgstr ""

# File: docs/8.x/dusk.md, line: 762
# File: docs/master/dusk.md, line: 762
#. type: Plain text
msgid "Occasionally, you may wish to wait for an element to appear that matches a given selector and then interact with the element. For example, you may wish to wait until a modal window is available and then press the \"OK\" button within the modal. The `whenAvailable` method may be used to accomplish this. All element operations performed within the given closure will be scoped to the original selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 767
# File: docs/master/dusk.md, line: 767
#. type: Plain text
#, no-wrap
msgid "    $browser->whenAvailable('.modal', function ($modal) {\n"
"        $modal->assertSee('Hello World')\n"
"              ->press('OK');\n"
"    });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 769
# File: docs/master/dusk.md, line: 769
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-for-text\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 769
# File: docs/master/dusk.md, line: 769
#. type: Title ####
#, no-wrap
msgid "Waiting For Text"
msgstr ""

# File: docs/8.x/dusk.md, line: 772
# File: docs/master/dusk.md, line: 772
#. type: Plain text
msgid "The `waitForText` method may be used to wait until the given text is displayed on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 775
# File: docs/master/dusk.md, line: 775
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds for the text...\n"
"    $browser->waitForText('Hello World');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 778
# File: docs/master/dusk.md, line: 778
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second for the text...\n"
"    $browser->waitForText('Hello World', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 780
# File: docs/master/dusk.md, line: 780
#. type: Plain text
msgid "You may use the `waitUntilMissingText` method to wait until the displayed text has been removed from the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 783
# File: docs/master/dusk.md, line: 783
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds for the text to be removed...\n"
"    $browser->waitUntilMissingText('Hello World');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 786
# File: docs/master/dusk.md, line: 786
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second for the text to be removed...\n"
"    $browser->waitUntilMissingText('Hello World', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 788
# File: docs/master/dusk.md, line: 788
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-for-links\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 788
# File: docs/master/dusk.md, line: 788
#. type: Title ####
#, no-wrap
msgid "Waiting For Links"
msgstr ""

# File: docs/8.x/dusk.md, line: 791
# File: docs/master/dusk.md, line: 791
#. type: Plain text
msgid "The `waitForLink` method may be used to wait until the given link text is displayed on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 794
# File: docs/master/dusk.md, line: 794
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds for the link...\n"
"    $browser->waitForLink('Create');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 797
# File: docs/master/dusk.md, line: 797
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second for the link...\n"
"    $browser->waitForLink('Create', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 799
# File: docs/master/dusk.md, line: 799
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-on-the-page-location\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 799
# File: docs/master/dusk.md, line: 799
#. type: Title ####
#, no-wrap
msgid "Waiting On The Page Location"
msgstr ""

# File: docs/8.x/dusk.md, line: 802
# File: docs/master/dusk.md, line: 802
#. type: Plain text
#, no-wrap
msgid "When making a path assertion such as `$browser->assertPathIs('/home')`, the assertion can fail if `window.location.pathname` is being updated asynchronously. You may use the `waitForLocation` method to wait for the location to be a given value:\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 804
# File: docs/master/dusk.md, line: 804
#. type: Plain text
#, no-wrap
msgid "    $browser->waitForLocation('/secret');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 806
# File: docs/master/dusk.md, line: 806
#. type: Plain text
msgid "The `waitForLocation` method can also be used to wait for the current window location to be a fully qualified URL:"
msgstr ""

# File: docs/8.x/dusk.md, line: 808
# File: docs/master/dusk.md, line: 808
#. type: Plain text
#, no-wrap
msgid "    $browser->waitForLocation('https://example.com/path');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 810
# File: docs/master/dusk.md, line: 810
#. type: Plain text
msgid "You may also wait for a [named route's](/docs/{{version}}/routing#named-routes) location:"
msgstr ""

# File: docs/8.x/dusk.md, line: 812
# File: docs/master/dusk.md, line: 812
#. type: Plain text
#, no-wrap
msgid "    $browser->waitForRoute($routeName, $parameters);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 814
# File: docs/master/dusk.md, line: 814
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-for-page-reloads\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 814
# File: docs/master/dusk.md, line: 814
#. type: Title ####
#, no-wrap
msgid "Waiting for Page Reloads"
msgstr ""

# File: docs/8.x/dusk.md, line: 817
# File: docs/master/dusk.md, line: 817
#. type: Plain text
msgid "If you need to wait for a page to reload after performing an action, use the `waitForReload` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 819
# File: docs/8.x/dusk.md, line: 1629
# File: docs/master/dusk.md, line: 819
# File: docs/master/dusk.md, line: 1629
#. type: Plain text
#, no-wrap
msgid "    use Laravel\\Dusk\\Browser;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 824
# File: docs/master/dusk.md, line: 824
#. type: Plain text
#, no-wrap
msgid "    $browser->waitForReload(function (Browser $browser) {\n"
"        $browser->press('Submit');\n"
"    })\n"
"    ->assertSee('Success!');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 826
# File: docs/master/dusk.md, line: 826
#. type: Plain text
msgid "Since the need to wait for the page to reload typically occurs after clicking a button, you may use the `clickAndWaitForReload` method for convenience:"
msgstr ""

# File: docs/8.x/dusk.md, line: 829
# File: docs/master/dusk.md, line: 829
#. type: Plain text
#, no-wrap
msgid "    $browser->clickAndWaitForReload('.selector')\n"
"            ->assertSee('something');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 831
# File: docs/master/dusk.md, line: 831
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-on-javascript-expressions\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 831
# File: docs/master/dusk.md, line: 831
#. type: Title ####
#, no-wrap
msgid "Waiting On JavaScript Expressions"
msgstr ""

# File: docs/8.x/dusk.md, line: 834
# File: docs/master/dusk.md, line: 834
#. type: Plain text
msgid "Sometimes you may wish to pause the execution of a test until a given JavaScript expression evaluates to `true`. You may easily accomplish this using the `waitUntil` method. When passing an expression to this method, you do not need to include the `return` keyword or an ending semi-colon:"
msgstr ""

# File: docs/8.x/dusk.md, line: 837
# File: docs/master/dusk.md, line: 837
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of five seconds for the expression to be true...\n"
"    $browser->waitUntil('App.data.servers.length > 0');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 840
# File: docs/master/dusk.md, line: 840
#. type: Plain text
#, no-wrap
msgid "    // Wait a maximum of one second for the expression to be true...\n"
"    $browser->waitUntil('App.data.servers.length > 0', 1);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 842
# File: docs/master/dusk.md, line: 842
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-on-vue-expressions\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 842
# File: docs/master/dusk.md, line: 842
#. type: Title ####
#, no-wrap
msgid "Waiting On Vue Expressions"
msgstr ""

# File: docs/8.x/dusk.md, line: 845
# File: docs/master/dusk.md, line: 845
#. type: Plain text
msgid "The `waitUntilVue` and `waitUntilVueIsNot` methods may be used to wait until a [Vue component](https://vuejs.org) attribute has a given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 848
# File: docs/master/dusk.md, line: 848
#. type: Plain text
#, no-wrap
msgid "    // Wait until the component attribute contains the given value...\n"
"    $browser->waitUntilVue('user.name', 'Taylor', '@user');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 851
# File: docs/master/dusk.md, line: 851
#. type: Plain text
#, no-wrap
msgid "    // Wait until the component attribute doesn't contain the given value...\n"
"    $browser->waitUntilVueIsNot('user.name', null, '@user');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 853
# File: docs/master/dusk.md, line: 853
#. type: Plain text
#, no-wrap
msgid "<a name=\"waiting-with-a-callback\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 853
# File: docs/master/dusk.md, line: 853
#. type: Title ####
#, no-wrap
msgid "Waiting With A Callback"
msgstr ""

# File: docs/8.x/dusk.md, line: 856
# File: docs/master/dusk.md, line: 856
#. type: Plain text
msgid "Many of the \"wait\" methods in Dusk rely on the underlying `waitUsing` method. You may use this method directly to wait for a given closure to return `true`. The `waitUsing` method accepts the maximum number of seconds to wait, the interval at which the closure should be evaluated, the closure, and an optional failure message:"
msgstr ""

# File: docs/8.x/dusk.md, line: 860
# File: docs/master/dusk.md, line: 860
#. type: Plain text
#, no-wrap
msgid "    $browser->waitUsing(10, 1, function () use ($something) {\n"
"        return $something->isReady();\n"
"    }, \"Something wasn't ready in time.\");\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 862
# File: docs/master/dusk.md, line: 862
#. type: Plain text
#, no-wrap
msgid "<a name=\"scrolling-an-element-into-view\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 862
# File: docs/master/dusk.md, line: 862
#. type: Title ###
#, no-wrap
msgid "Scrolling An Element Into View"
msgstr ""

# File: docs/8.x/dusk.md, line: 865
# File: docs/master/dusk.md, line: 865
#. type: Plain text
msgid "Sometimes you may not be able to click on an element because it is outside of the viewable area of the browser. The `scrollIntoView` method will scroll the browser window until the element at the given selector is within the view:"
msgstr ""

# File: docs/8.x/dusk.md, line: 868
# File: docs/master/dusk.md, line: 868
#. type: Plain text
#, no-wrap
msgid "    $browser->scrollIntoView('.selector')\n"
"            ->click('.selector');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 870
# File: docs/master/dusk.md, line: 870
#. type: Plain text
#, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 870
# File: docs/master/dusk.md, line: 870
#. type: Title ##
#, no-wrap
msgid "Available Assertions"
msgstr ""

# File: docs/8.x/dusk.md, line: 873
# File: docs/master/dusk.md, line: 873
#. type: Plain text
msgid "Dusk provides a variety of assertions that you may make against your application. All of the available assertions are documented in the list below:"
msgstr ""

# File: docs/8.x/dusk.md, line: 879
# File: docs/master/dusk.md, line: 879
#. type: Plain text
#, no-wrap
msgid "<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 884
# File: docs/master/dusk.md, line: 884
#. type: Plain text
#, no-wrap
msgid "    .collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 960
# File: docs/master/dusk.md, line: 960
#. type: Plain text
#, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
"[assertTitle](#assert-title)\n"
"[assertTitleContains](#assert-title-contains)\n"
"[assertUrlIs](#assert-url-is)\n"
"[assertSchemeIs](#assert-scheme-is)\n"
"[assertSchemeIsNot](#assert-scheme-is-not)\n"
"[assertHostIs](#assert-host-is)\n"
"[assertHostIsNot](#assert-host-is-not)\n"
"[assertPortIs](#assert-port-is)\n"
"[assertPortIsNot](#assert-port-is-not)\n"
"[assertPathBeginsWith](#assert-path-begins-with)\n"
"[assertPathIs](#assert-path-is)\n"
"[assertPathIsNot](#assert-path-is-not)\n"
"[assertRouteIs](#assert-route-is)\n"
"[assertQueryStringHas](#assert-query-string-has)\n"
"[assertQueryStringMissing](#assert-query-string-missing)\n"
"[assertFragmentIs](#assert-fragment-is)\n"
"[assertFragmentBeginsWith](#assert-fragment-begins-with)\n"
"[assertFragmentIsNot](#assert-fragment-is-not)\n"
"[assertHasCookie](#assert-has-cookie)\n"
"[assertHasPlainCookie](#assert-has-plain-cookie)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertPlainCookieMissing](#assert-plain-cookie-missing)\n"
"[assertCookieValue](#assert-cookie-value)\n"
"[assertPlainCookieValue](#assert-plain-cookie-value)\n"
"[assertSee](#assert-see)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertSeeIn](#assert-see-in)\n"
"[assertDontSeeIn](#assert-dont-see-in)\n"
"[assertSeeAnythingIn](#assert-see-anything-in)\n"
"[assertSeeNothingIn](#assert-see-nothing-in)\n"
"[assertScript](#assert-script)\n"
"[assertSourceHas](#assert-source-has)\n"
"[assertSourceMissing](#assert-source-missing)\n"
"[assertSeeLink](#assert-see-link)\n"
"[assertDontSeeLink](#assert-dont-see-link)\n"
"[assertInputValue](#assert-input-value)\n"
"[assertInputValueIsNot](#assert-input-value-is-not)\n"
"[assertChecked](#assert-checked)\n"
"[assertNotChecked](#assert-not-checked)\n"
"[assertRadioSelected](#assert-radio-selected)\n"
"[assertRadioNotSelected](#assert-radio-not-selected)\n"
"[assertSelected](#assert-selected)\n"
"[assertNotSelected](#assert-not-selected)\n"
"[assertSelectHasOptions](#assert-select-has-options)\n"
"[assertSelectMissingOptions](#assert-select-missing-options)\n"
"[assertSelectHasOption](#assert-select-has-option)\n"
"[assertSelectMissingOption](#assert-select-missing-option)\n"
"[assertValue](#assert-value)\n"
"[assertValueIsNot](#assert-value-is-not)\n"
"[assertAttribute](#assert-attribute)\n"
"[assertAttributeContains](#assert-attribute-contains)\n"
"[assertAriaAttribute](#assert-aria-attribute)\n"
"[assertDataAttribute](#assert-data-attribute)\n"
"[assertVisible](#assert-visible)\n"
"[assertPresent](#assert-present)\n"
"[assertNotPresent](#assert-not-present)\n"
"[assertMissing](#assert-missing)\n"
"[assertInputPresent](#assert-input-present)\n"
"[assertInputMissing](#assert-input-missing)\n"
"[assertDialogOpened](#assert-dialog-opened)\n"
"[assertEnabled](#assert-enabled)\n"
"[assertDisabled](#assert-disabled)\n"
"[assertButtonEnabled](#assert-button-enabled)\n"
"[assertButtonDisabled](#assert-button-disabled)\n"
"[assertFocused](#assert-focused)\n"
"[assertNotFocused](#assert-not-focused)\n"
"[assertAuthenticated](#assert-authenticated)\n"
"[assertGuest](#assert-guest)\n"
"[assertAuthenticatedAs](#assert-authenticated-as)\n"
"[assertVue](#assert-vue)\n"
"[assertVueIsNot](#assert-vue-is-not)\n"
"[assertVueContains](#assert-vue-contains)\n"
"[assertVueDoesNotContain](#assert-vue-does-not-contain)\n"
"</div>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 962
# File: docs/master/dusk.md, line: 962
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-title\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 962
# File: docs/master/dusk.md, line: 962
#. type: Title ####
#, no-wrap
msgid "assertTitle"
msgstr ""

# File: docs/8.x/dusk.md, line: 965
# File: docs/master/dusk.md, line: 965
#. type: Plain text
msgid "Assert that the page title matches the given text:"
msgstr ""

# File: docs/8.x/dusk.md, line: 967
# File: docs/master/dusk.md, line: 967
#. type: Plain text
#, no-wrap
msgid "    $browser->assertTitle($title);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 969
# File: docs/master/dusk.md, line: 969
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-title-contains\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 969
# File: docs/master/dusk.md, line: 969
#. type: Title ####
#, no-wrap
msgid "assertTitleContains"
msgstr ""

# File: docs/8.x/dusk.md, line: 972
# File: docs/master/dusk.md, line: 972
#. type: Plain text
msgid "Assert that the page title contains the given text:"
msgstr ""

# File: docs/8.x/dusk.md, line: 974
# File: docs/master/dusk.md, line: 974
#. type: Plain text
#, no-wrap
msgid "    $browser->assertTitleContains($title);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 976
# File: docs/master/dusk.md, line: 976
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-url-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 976
# File: docs/master/dusk.md, line: 976
#. type: Title ####
#, no-wrap
msgid "assertUrlIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 979
# File: docs/master/dusk.md, line: 979
#. type: Plain text
msgid "Assert that the current URL (without the query string) matches the given string:"
msgstr ""

# File: docs/8.x/dusk.md, line: 981
# File: docs/master/dusk.md, line: 981
#. type: Plain text
#, no-wrap
msgid "    $browser->assertUrlIs($url);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 983
# File: docs/master/dusk.md, line: 983
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-scheme-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 983
# File: docs/master/dusk.md, line: 983
#. type: Title ####
#, no-wrap
msgid "assertSchemeIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 986
# File: docs/master/dusk.md, line: 986
#. type: Plain text
msgid "Assert that the current URL scheme matches the given scheme:"
msgstr ""

# File: docs/8.x/dusk.md, line: 988
# File: docs/master/dusk.md, line: 988
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSchemeIs($scheme);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 990
# File: docs/master/dusk.md, line: 990
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-scheme-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 990
# File: docs/master/dusk.md, line: 990
#. type: Title ####
#, no-wrap
msgid "assertSchemeIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 993
# File: docs/master/dusk.md, line: 993
#. type: Plain text
msgid "Assert that the current URL scheme does not match the given scheme:"
msgstr ""

# File: docs/8.x/dusk.md, line: 995
# File: docs/master/dusk.md, line: 995
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSchemeIsNot($scheme);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 997
# File: docs/master/dusk.md, line: 997
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-host-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 997
# File: docs/master/dusk.md, line: 997
#. type: Title ####
#, no-wrap
msgid "assertHostIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 1000
# File: docs/master/dusk.md, line: 1000
#. type: Plain text
msgid "Assert that the current URL host matches the given host:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1002
# File: docs/master/dusk.md, line: 1002
#. type: Plain text
#, no-wrap
msgid "    $browser->assertHostIs($host);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1004
# File: docs/master/dusk.md, line: 1004
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-host-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1004
# File: docs/master/dusk.md, line: 1004
#. type: Title ####
#, no-wrap
msgid "assertHostIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1007
# File: docs/master/dusk.md, line: 1007
#. type: Plain text
msgid "Assert that the current URL host does not match the given host:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1009
# File: docs/master/dusk.md, line: 1009
#. type: Plain text
#, no-wrap
msgid "    $browser->assertHostIsNot($host);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1011
# File: docs/master/dusk.md, line: 1011
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-port-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1011
# File: docs/master/dusk.md, line: 1011
#. type: Title ####
#, no-wrap
msgid "assertPortIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 1014
# File: docs/master/dusk.md, line: 1014
#. type: Plain text
msgid "Assert that the current URL port matches the given port:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1016
# File: docs/master/dusk.md, line: 1016
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPortIs($port);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1018
# File: docs/master/dusk.md, line: 1018
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-port-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1018
# File: docs/master/dusk.md, line: 1018
#. type: Title ####
#, no-wrap
msgid "assertPortIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1021
# File: docs/master/dusk.md, line: 1021
#. type: Plain text
msgid "Assert that the current URL port does not match the given port:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1023
# File: docs/master/dusk.md, line: 1023
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPortIsNot($port);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1025
# File: docs/master/dusk.md, line: 1025
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-path-begins-with\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1025
# File: docs/master/dusk.md, line: 1025
#. type: Title ####
#, no-wrap
msgid "assertPathBeginsWith"
msgstr ""

# File: docs/8.x/dusk.md, line: 1028
# File: docs/master/dusk.md, line: 1028
#. type: Plain text
msgid "Assert that the current URL path begins with the given path:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1030
# File: docs/master/dusk.md, line: 1030
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPathBeginsWith('/home');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1032
# File: docs/master/dusk.md, line: 1032
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-path-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1032
# File: docs/master/dusk.md, line: 1032
#. type: Title ####
#, no-wrap
msgid "assertPathIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 1035
# File: docs/master/dusk.md, line: 1035
#. type: Plain text
msgid "Assert that the current path matches the given path:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1037
# File: docs/master/dusk.md, line: 1037
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPathIs('/home');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1039
# File: docs/master/dusk.md, line: 1039
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-path-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1039
# File: docs/master/dusk.md, line: 1039
#. type: Title ####
#, no-wrap
msgid "assertPathIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1042
# File: docs/master/dusk.md, line: 1042
#. type: Plain text
msgid "Assert that the current path does not match the given path:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1044
# File: docs/master/dusk.md, line: 1044
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPathIsNot('/home');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1046
# File: docs/master/dusk.md, line: 1046
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-route-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1046
# File: docs/master/dusk.md, line: 1046
#. type: Title ####
#, no-wrap
msgid "assertRouteIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 1049
# File: docs/master/dusk.md, line: 1049
#. type: Plain text
msgid "Assert that the current URL matches the given [named route's](/docs/{{version}}/routing#named-routes) URL:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1051
# File: docs/master/dusk.md, line: 1051
#. type: Plain text
#, no-wrap
msgid "    $browser->assertRouteIs($name, $parameters);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1053
# File: docs/master/dusk.md, line: 1053
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-query-string-has\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1053
# File: docs/master/dusk.md, line: 1053
#. type: Title ####
#, no-wrap
msgid "assertQueryStringHas"
msgstr ""

# File: docs/8.x/dusk.md, line: 1056
# File: docs/master/dusk.md, line: 1056
#. type: Plain text
msgid "Assert that the given query string parameter is present:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1058
# File: docs/master/dusk.md, line: 1058
#. type: Plain text
#, no-wrap
msgid "    $browser->assertQueryStringHas($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1060
# File: docs/master/dusk.md, line: 1060
#. type: Plain text
msgid "Assert that the given query string parameter is present and has a given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1062
# File: docs/master/dusk.md, line: 1062
#. type: Plain text
#, no-wrap
msgid "    $browser->assertQueryStringHas($name, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1064
# File: docs/master/dusk.md, line: 1064
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-query-string-missing\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1064
# File: docs/master/dusk.md, line: 1064
#. type: Title ####
#, no-wrap
msgid "assertQueryStringMissing"
msgstr ""

# File: docs/8.x/dusk.md, line: 1067
# File: docs/master/dusk.md, line: 1067
#. type: Plain text
msgid "Assert that the given query string parameter is missing:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1069
# File: docs/master/dusk.md, line: 1069
#. type: Plain text
#, no-wrap
msgid "    $browser->assertQueryStringMissing($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1071
# File: docs/master/dusk.md, line: 1071
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-fragment-is\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1071
# File: docs/master/dusk.md, line: 1071
#. type: Title ####
#, no-wrap
msgid "assertFragmentIs"
msgstr ""

# File: docs/8.x/dusk.md, line: 1074
# File: docs/master/dusk.md, line: 1074
#. type: Plain text
msgid "Assert that the URL's current hash fragment matches the given fragment:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1076
# File: docs/master/dusk.md, line: 1076
#. type: Plain text
#, no-wrap
msgid "    $browser->assertFragmentIs('anchor');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1078
# File: docs/master/dusk.md, line: 1078
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-fragment-begins-with\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1078
# File: docs/master/dusk.md, line: 1078
#. type: Title ####
#, no-wrap
msgid "assertFragmentBeginsWith"
msgstr ""

# File: docs/8.x/dusk.md, line: 1081
# File: docs/master/dusk.md, line: 1081
#. type: Plain text
msgid "Assert that the URL's current hash fragment begins with the given fragment:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1083
# File: docs/master/dusk.md, line: 1083
#. type: Plain text
#, no-wrap
msgid "    $browser->assertFragmentBeginsWith('anchor');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1085
# File: docs/master/dusk.md, line: 1085
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-fragment-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1085
# File: docs/master/dusk.md, line: 1085
#. type: Title ####
#, no-wrap
msgid "assertFragmentIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1088
# File: docs/master/dusk.md, line: 1088
#. type: Plain text
msgid "Assert that the URL's current hash fragment does not match the given fragment:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1090
# File: docs/master/dusk.md, line: 1090
#. type: Plain text
#, no-wrap
msgid "    $browser->assertFragmentIsNot('anchor');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1092
# File: docs/master/dusk.md, line: 1092
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-has-cookie\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1092
# File: docs/master/dusk.md, line: 1092
#. type: Title ####
#, no-wrap
msgid "assertHasCookie"
msgstr ""

# File: docs/8.x/dusk.md, line: 1095
# File: docs/master/dusk.md, line: 1095
#. type: Plain text
msgid "Assert that the given encrypted cookie is present:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1097
# File: docs/master/dusk.md, line: 1097
#. type: Plain text
#, no-wrap
msgid "    $browser->assertHasCookie($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1099
# File: docs/master/dusk.md, line: 1099
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-has-plain-cookie\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1099
# File: docs/master/dusk.md, line: 1099
#. type: Title ####
#, no-wrap
msgid "assertHasPlainCookie"
msgstr ""

# File: docs/8.x/dusk.md, line: 1102
# File: docs/master/dusk.md, line: 1102
#. type: Plain text
msgid "Assert that the given unencrypted cookie is present:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1104
# File: docs/master/dusk.md, line: 1104
#. type: Plain text
#, no-wrap
msgid "    $browser->assertHasPlainCookie($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1106
# File: docs/master/dusk.md, line: 1106
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-cookie-missing\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1106
# File: docs/master/dusk.md, line: 1106
#. type: Title ####
#, no-wrap
msgid "assertCookieMissing"
msgstr ""

# File: docs/8.x/dusk.md, line: 1109
# File: docs/master/dusk.md, line: 1109
#. type: Plain text
msgid "Assert that the given encrypted cookie is not present:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1111
# File: docs/master/dusk.md, line: 1111
#. type: Plain text
#, no-wrap
msgid "    $browser->assertCookieMissing($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1113
# File: docs/master/dusk.md, line: 1113
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-plain-cookie-missing\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1113
# File: docs/master/dusk.md, line: 1113
#. type: Title ####
#, no-wrap
msgid "assertPlainCookieMissing"
msgstr ""

# File: docs/8.x/dusk.md, line: 1116
# File: docs/master/dusk.md, line: 1116
#. type: Plain text
msgid "Assert that the given unencrypted cookie is not present:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1118
# File: docs/master/dusk.md, line: 1118
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPlainCookieMissing($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1120
# File: docs/master/dusk.md, line: 1120
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-cookie-value\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1120
# File: docs/master/dusk.md, line: 1120
#. type: Title ####
#, no-wrap
msgid "assertCookieValue"
msgstr ""

# File: docs/8.x/dusk.md, line: 1123
# File: docs/master/dusk.md, line: 1123
#. type: Plain text
msgid "Assert that an encrypted cookie has a given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1125
# File: docs/master/dusk.md, line: 1125
#. type: Plain text
#, no-wrap
msgid "    $browser->assertCookieValue($name, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1127
# File: docs/master/dusk.md, line: 1127
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-plain-cookie-value\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1127
# File: docs/master/dusk.md, line: 1127
#. type: Title ####
#, no-wrap
msgid "assertPlainCookieValue"
msgstr ""

# File: docs/8.x/dusk.md, line: 1130
# File: docs/master/dusk.md, line: 1130
#. type: Plain text
msgid "Assert that an unencrypted cookie has a given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1132
# File: docs/master/dusk.md, line: 1132
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPlainCookieValue($name, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1134
# File: docs/master/dusk.md, line: 1134
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1134
# File: docs/master/dusk.md, line: 1134
#. type: Title ####
#, no-wrap
msgid "assertSee"
msgstr ""

# File: docs/8.x/dusk.md, line: 1137
# File: docs/master/dusk.md, line: 1137
#. type: Plain text
msgid "Assert that the given text is present on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1139
# File: docs/master/dusk.md, line: 1139
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSee($text);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1141
# File: docs/master/dusk.md, line: 1141
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-dont-see\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1141
# File: docs/master/dusk.md, line: 1141
#. type: Title ####
#, no-wrap
msgid "assertDontSee"
msgstr ""

# File: docs/8.x/dusk.md, line: 1144
# File: docs/master/dusk.md, line: 1144
#. type: Plain text
msgid "Assert that the given text is not present on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1146
# File: docs/master/dusk.md, line: 1146
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDontSee($text);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1148
# File: docs/master/dusk.md, line: 1148
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-in\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1148
# File: docs/master/dusk.md, line: 1148
#. type: Title ####
#, no-wrap
msgid "assertSeeIn"
msgstr ""

# File: docs/8.x/dusk.md, line: 1151
# File: docs/master/dusk.md, line: 1151
#. type: Plain text
msgid "Assert that the given text is present within the selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1153
# File: docs/master/dusk.md, line: 1153
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSeeIn($selector, $text);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1155
# File: docs/master/dusk.md, line: 1155
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-dont-see-in\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1155
# File: docs/master/dusk.md, line: 1155
#. type: Title ####
#, no-wrap
msgid "assertDontSeeIn"
msgstr ""

# File: docs/8.x/dusk.md, line: 1158
# File: docs/master/dusk.md, line: 1158
#. type: Plain text
msgid "Assert that the given text is not present within the selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1160
# File: docs/master/dusk.md, line: 1160
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDontSeeIn($selector, $text);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1162
# File: docs/master/dusk.md, line: 1162
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-anything-in\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1162
# File: docs/master/dusk.md, line: 1162
#. type: Title ####
#, no-wrap
msgid "assertSeeAnythingIn"
msgstr ""

# File: docs/8.x/dusk.md, line: 1165
# File: docs/master/dusk.md, line: 1165
#. type: Plain text
msgid "Assert that any text is present within the selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1167
# File: docs/master/dusk.md, line: 1167
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSeeAnythingIn($selector);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1169
# File: docs/master/dusk.md, line: 1169
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-nothing-in\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1169
# File: docs/master/dusk.md, line: 1169
#. type: Title ####
#, no-wrap
msgid "assertSeeNothingIn"
msgstr ""

# File: docs/8.x/dusk.md, line: 1172
# File: docs/master/dusk.md, line: 1172
#. type: Plain text
msgid "Assert that no text is present within the selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1174
# File: docs/master/dusk.md, line: 1174
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSeeNothingIn($selector);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1176
# File: docs/master/dusk.md, line: 1176
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-script\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1176
# File: docs/master/dusk.md, line: 1176
#. type: Title ####
#, no-wrap
msgid "assertScript"
msgstr ""

# File: docs/8.x/dusk.md, line: 1179
# File: docs/master/dusk.md, line: 1179
#. type: Plain text
msgid "Assert that the given JavaScript expression evaluates to the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1182
# File: docs/master/dusk.md, line: 1182
#. type: Plain text
#, no-wrap
msgid "    $browser->assertScript('window.isLoaded')\n"
"            ->assertScript('document.readyState', 'complete');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1184
# File: docs/master/dusk.md, line: 1184
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-source-has\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1184
# File: docs/master/dusk.md, line: 1184
#. type: Title ####
#, no-wrap
msgid "assertSourceHas"
msgstr ""

# File: docs/8.x/dusk.md, line: 1187
# File: docs/master/dusk.md, line: 1187
#. type: Plain text
msgid "Assert that the given source code is present on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1189
# File: docs/master/dusk.md, line: 1189
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSourceHas($code);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1191
# File: docs/master/dusk.md, line: 1191
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-source-missing\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1191
# File: docs/master/dusk.md, line: 1191
#. type: Title ####
#, no-wrap
msgid "assertSourceMissing"
msgstr ""

# File: docs/8.x/dusk.md, line: 1194
# File: docs/master/dusk.md, line: 1194
#. type: Plain text
msgid "Assert that the given source code is not present on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1196
# File: docs/master/dusk.md, line: 1196
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSourceMissing($code);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1198
# File: docs/master/dusk.md, line: 1198
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-link\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1198
# File: docs/master/dusk.md, line: 1198
#. type: Title ####
#, no-wrap
msgid "assertSeeLink"
msgstr ""

# File: docs/8.x/dusk.md, line: 1201
# File: docs/master/dusk.md, line: 1201
#. type: Plain text
msgid "Assert that the given link is present on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1203
# File: docs/master/dusk.md, line: 1203
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSeeLink($linkText);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1205
# File: docs/master/dusk.md, line: 1205
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-dont-see-link\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1205
# File: docs/master/dusk.md, line: 1205
#. type: Title ####
#, no-wrap
msgid "assertDontSeeLink"
msgstr ""

# File: docs/8.x/dusk.md, line: 1208
# File: docs/master/dusk.md, line: 1208
#. type: Plain text
msgid "Assert that the given link is not present on the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1210
# File: docs/master/dusk.md, line: 1210
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDontSeeLink($linkText);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1212
# File: docs/master/dusk.md, line: 1212
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-input-value\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1212
# File: docs/master/dusk.md, line: 1212
#. type: Title ####
#, no-wrap
msgid "assertInputValue"
msgstr ""

# File: docs/8.x/dusk.md, line: 1215
# File: docs/master/dusk.md, line: 1215
#. type: Plain text
msgid "Assert that the given input field has the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1217
# File: docs/master/dusk.md, line: 1217
#. type: Plain text
#, no-wrap
msgid "    $browser->assertInputValue($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1219
# File: docs/master/dusk.md, line: 1219
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-input-value-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1219
# File: docs/master/dusk.md, line: 1219
#. type: Title ####
#, no-wrap
msgid "assertInputValueIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1222
# File: docs/master/dusk.md, line: 1222
#. type: Plain text
msgid "Assert that the given input field does not have the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1224
# File: docs/master/dusk.md, line: 1224
#. type: Plain text
#, no-wrap
msgid "    $browser->assertInputValueIsNot($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1226
# File: docs/master/dusk.md, line: 1226
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-checked\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1226
# File: docs/master/dusk.md, line: 1226
#. type: Title ####
#, no-wrap
msgid "assertChecked"
msgstr ""

# File: docs/8.x/dusk.md, line: 1229
# File: docs/master/dusk.md, line: 1229
#. type: Plain text
msgid "Assert that the given checkbox is checked:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1231
# File: docs/master/dusk.md, line: 1231
#. type: Plain text
#, no-wrap
msgid "    $browser->assertChecked($field);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1233
# File: docs/master/dusk.md, line: 1233
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-not-checked\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1233
# File: docs/master/dusk.md, line: 1233
#. type: Title ####
#, no-wrap
msgid "assertNotChecked"
msgstr ""

# File: docs/8.x/dusk.md, line: 1236
# File: docs/master/dusk.md, line: 1236
#. type: Plain text
msgid "Assert that the given checkbox is not checked:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1238
# File: docs/master/dusk.md, line: 1238
#. type: Plain text
#, no-wrap
msgid "    $browser->assertNotChecked($field);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1240
# File: docs/master/dusk.md, line: 1240
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-radio-selected\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1240
# File: docs/master/dusk.md, line: 1240
#. type: Title ####
#, no-wrap
msgid "assertRadioSelected"
msgstr ""

# File: docs/8.x/dusk.md, line: 1243
# File: docs/master/dusk.md, line: 1243
#. type: Plain text
msgid "Assert that the given radio field is selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1245
# File: docs/master/dusk.md, line: 1245
#. type: Plain text
#, no-wrap
msgid "    $browser->assertRadioSelected($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1247
# File: docs/master/dusk.md, line: 1247
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-radio-not-selected\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1247
# File: docs/master/dusk.md, line: 1247
#. type: Title ####
#, no-wrap
msgid "assertRadioNotSelected"
msgstr ""

# File: docs/8.x/dusk.md, line: 1250
# File: docs/master/dusk.md, line: 1250
#. type: Plain text
msgid "Assert that the given radio field is not selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1252
# File: docs/master/dusk.md, line: 1252
#. type: Plain text
#, no-wrap
msgid "    $browser->assertRadioNotSelected($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1254
# File: docs/master/dusk.md, line: 1254
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-selected\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1254
# File: docs/master/dusk.md, line: 1254
#. type: Title ####
#, no-wrap
msgid "assertSelected"
msgstr ""

# File: docs/8.x/dusk.md, line: 1257
# File: docs/master/dusk.md, line: 1257
#. type: Plain text
msgid "Assert that the given dropdown has the given value selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1259
# File: docs/master/dusk.md, line: 1259
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSelected($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1261
# File: docs/master/dusk.md, line: 1261
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-not-selected\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1261
# File: docs/master/dusk.md, line: 1261
#. type: Title ####
#, no-wrap
msgid "assertNotSelected"
msgstr ""

# File: docs/8.x/dusk.md, line: 1264
# File: docs/master/dusk.md, line: 1264
#. type: Plain text
msgid "Assert that the given dropdown does not have the given value selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1266
# File: docs/master/dusk.md, line: 1266
#. type: Plain text
#, no-wrap
msgid "    $browser->assertNotSelected($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1268
# File: docs/master/dusk.md, line: 1268
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-select-has-options\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1268
# File: docs/master/dusk.md, line: 1268
#. type: Title ####
#, no-wrap
msgid "assertSelectHasOptions"
msgstr ""

# File: docs/8.x/dusk.md, line: 1271
# File: docs/master/dusk.md, line: 1271
#. type: Plain text
msgid "Assert that the given array of values are available to be selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1273
# File: docs/master/dusk.md, line: 1273
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSelectHasOptions($field, $values);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1275
# File: docs/master/dusk.md, line: 1275
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-select-missing-options\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1275
# File: docs/master/dusk.md, line: 1275
#. type: Title ####
#, no-wrap
msgid "assertSelectMissingOptions"
msgstr ""

# File: docs/8.x/dusk.md, line: 1278
# File: docs/master/dusk.md, line: 1278
#. type: Plain text
msgid "Assert that the given array of values are not available to be selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1280
# File: docs/master/dusk.md, line: 1280
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSelectMissingOptions($field, $values);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1282
# File: docs/master/dusk.md, line: 1282
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-select-has-option\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1282
# File: docs/master/dusk.md, line: 1282
#. type: Title ####
#, no-wrap
msgid "assertSelectHasOption"
msgstr ""

# File: docs/8.x/dusk.md, line: 1285
# File: docs/master/dusk.md, line: 1285
#. type: Plain text
msgid "Assert that the given value is available to be selected on the given field:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1287
# File: docs/master/dusk.md, line: 1287
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSelectHasOption($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1289
# File: docs/master/dusk.md, line: 1289
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-select-missing-option\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1289
# File: docs/master/dusk.md, line: 1289
#. type: Title ####
#, no-wrap
msgid "assertSelectMissingOption"
msgstr ""

# File: docs/8.x/dusk.md, line: 1292
# File: docs/master/dusk.md, line: 1292
#. type: Plain text
msgid "Assert that the given value is not available to be selected:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1294
# File: docs/master/dusk.md, line: 1294
#. type: Plain text
#, no-wrap
msgid "    $browser->assertSelectMissingOption($field, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1296
# File: docs/master/dusk.md, line: 1296
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-value\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1296
# File: docs/master/dusk.md, line: 1296
#. type: Title ####
#, no-wrap
msgid "assertValue"
msgstr ""

# File: docs/8.x/dusk.md, line: 1299
# File: docs/master/dusk.md, line: 1299
#. type: Plain text
msgid "Assert that the element matching the given selector has the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1301
# File: docs/master/dusk.md, line: 1301
#. type: Plain text
#, no-wrap
msgid "    $browser->assertValue($selector, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1303
# File: docs/master/dusk.md, line: 1303
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-value-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1303
# File: docs/master/dusk.md, line: 1303
#. type: Title ####
#, no-wrap
msgid "assertValueIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1306
# File: docs/master/dusk.md, line: 1306
#. type: Plain text
msgid "Assert that the element matching the given selector does not have the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1308
# File: docs/master/dusk.md, line: 1308
#. type: Plain text
#, no-wrap
msgid "    $browser->assertValueIsNot($selector, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1310
# File: docs/master/dusk.md, line: 1310
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-attribute\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1310
# File: docs/master/dusk.md, line: 1310
#. type: Title ####
#, no-wrap
msgid "assertAttribute"
msgstr ""

# File: docs/8.x/dusk.md, line: 1313
# File: docs/master/dusk.md, line: 1313
#. type: Plain text
msgid "Assert that the element matching the given selector has the given value in the provided attribute:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1315
# File: docs/master/dusk.md, line: 1315
#. type: Plain text
#, no-wrap
msgid "    $browser->assertAttribute($selector, $attribute, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1317
# File: docs/master/dusk.md, line: 1317
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-attribute-contains\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1317
# File: docs/master/dusk.md, line: 1317
#. type: Title ####
#, no-wrap
msgid "assertAttributeContains"
msgstr ""

# File: docs/8.x/dusk.md, line: 1320
# File: docs/master/dusk.md, line: 1320
#. type: Plain text
msgid "Assert that the element matching the given selector contains the given value in the provided attribute:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1322
# File: docs/master/dusk.md, line: 1322
#. type: Plain text
#, no-wrap
msgid "    $browser->assertAttributeContains($selector, $attribute, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1324
# File: docs/master/dusk.md, line: 1324
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-aria-attribute\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1324
# File: docs/master/dusk.md, line: 1324
#. type: Title ####
#, no-wrap
msgid "assertAriaAttribute"
msgstr ""

# File: docs/8.x/dusk.md, line: 1327
# File: docs/master/dusk.md, line: 1327
#. type: Plain text
msgid "Assert that the element matching the given selector has the given value in the provided aria attribute:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1329
# File: docs/master/dusk.md, line: 1329
#. type: Plain text
#, no-wrap
msgid "    $browser->assertAriaAttribute($selector, $attribute, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1331
# File: docs/master/dusk.md, line: 1331
#. type: Plain text
#, no-wrap
msgid "For example, given the markup `<button aria-label=\"Add\"></button>`, you may assert against the `aria-label` attribute like so:\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1333
# File: docs/master/dusk.md, line: 1333
#. type: Plain text
#, no-wrap
msgid "    $browser->assertAriaAttribute('button', 'label', 'Add')\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1335
# File: docs/master/dusk.md, line: 1335
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-data-attribute\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1335
# File: docs/master/dusk.md, line: 1335
#. type: Title ####
#, no-wrap
msgid "assertDataAttribute"
msgstr ""

# File: docs/8.x/dusk.md, line: 1338
# File: docs/master/dusk.md, line: 1338
#. type: Plain text
msgid "Assert that the element matching the given selector has the given value in the provided data attribute:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1340
# File: docs/master/dusk.md, line: 1340
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDataAttribute($selector, $attribute, $value);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1342
# File: docs/master/dusk.md, line: 1342
#. type: Plain text
#, no-wrap
msgid "For example, given the markup `<tr id=\"row-1\" data-content=\"attendees\"></tr>`, you may assert against the `data-label` attribute like so:\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1344
# File: docs/master/dusk.md, line: 1344
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDataAttribute('#row-1', 'content', 'attendees')\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1346
# File: docs/master/dusk.md, line: 1346
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-visible\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1346
# File: docs/master/dusk.md, line: 1346
#. type: Title ####
#, no-wrap
msgid "assertVisible"
msgstr ""

# File: docs/8.x/dusk.md, line: 1349
# File: docs/master/dusk.md, line: 1349
#. type: Plain text
msgid "Assert that the element matching the given selector is visible:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1351
# File: docs/master/dusk.md, line: 1351
#. type: Plain text
#, no-wrap
msgid "    $browser->assertVisible($selector);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1353
# File: docs/master/dusk.md, line: 1353
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-present\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1353
# File: docs/master/dusk.md, line: 1353
#. type: Title ####
#, no-wrap
msgid "assertPresent"
msgstr ""

# File: docs/8.x/dusk.md, line: 1356
# File: docs/master/dusk.md, line: 1356
#. type: Plain text
msgid "Assert that the element matching the given selector is present in the source:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1358
# File: docs/master/dusk.md, line: 1358
#. type: Plain text
#, no-wrap
msgid "    $browser->assertPresent($selector);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1360
# File: docs/master/dusk.md, line: 1360
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-not-present\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1360
# File: docs/master/dusk.md, line: 1360
#. type: Title ####
#, no-wrap
msgid "assertNotPresent"
msgstr ""

# File: docs/8.x/dusk.md, line: 1363
# File: docs/master/dusk.md, line: 1363
#. type: Plain text
msgid "Assert that the element matching the given selector is not present in the source:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1365
# File: docs/master/dusk.md, line: 1365
#. type: Plain text
#, no-wrap
msgid "    $browser->assertNotPresent($selector);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1367
# File: docs/master/dusk.md, line: 1367
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-missing\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1367
# File: docs/master/dusk.md, line: 1367
#. type: Title ####
#, no-wrap
msgid "assertMissing"
msgstr ""

# File: docs/8.x/dusk.md, line: 1370
# File: docs/master/dusk.md, line: 1370
#. type: Plain text
msgid "Assert that the element matching the given selector is not visible:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1372
# File: docs/master/dusk.md, line: 1372
#. type: Plain text
#, no-wrap
msgid "    $browser->assertMissing($selector);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1374
# File: docs/master/dusk.md, line: 1374
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-input-present\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1374
# File: docs/master/dusk.md, line: 1374
#. type: Title ####
#, no-wrap
msgid "assertInputPresent"
msgstr ""

# File: docs/8.x/dusk.md, line: 1377
# File: docs/master/dusk.md, line: 1377
#. type: Plain text
msgid "Assert that an input with the given name is present:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1379
# File: docs/master/dusk.md, line: 1379
#. type: Plain text
#, no-wrap
msgid "    $browser->assertInputPresent($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1381
# File: docs/master/dusk.md, line: 1381
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-input-missing\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1381
# File: docs/master/dusk.md, line: 1381
#. type: Title ####
#, no-wrap
msgid "assertInputMissing"
msgstr ""

# File: docs/8.x/dusk.md, line: 1384
# File: docs/master/dusk.md, line: 1384
#. type: Plain text
msgid "Assert that an input with the given name is not present in the source:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1386
# File: docs/master/dusk.md, line: 1386
#. type: Plain text
#, no-wrap
msgid "    $browser->assertInputMissing($name);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1388
# File: docs/master/dusk.md, line: 1388
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-dialog-opened\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1388
# File: docs/master/dusk.md, line: 1388
#. type: Title ####
#, no-wrap
msgid "assertDialogOpened"
msgstr ""

# File: docs/8.x/dusk.md, line: 1391
# File: docs/master/dusk.md, line: 1391
#. type: Plain text
msgid "Assert that a JavaScript dialog with the given message has been opened:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1393
# File: docs/master/dusk.md, line: 1393
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDialogOpened($message);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1395
# File: docs/master/dusk.md, line: 1395
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-enabled\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1395
# File: docs/master/dusk.md, line: 1395
#. type: Title ####
#, no-wrap
msgid "assertEnabled"
msgstr ""

# File: docs/8.x/dusk.md, line: 1398
# File: docs/master/dusk.md, line: 1398
#. type: Plain text
msgid "Assert that the given field is enabled:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1400
# File: docs/master/dusk.md, line: 1400
#. type: Plain text
#, no-wrap
msgid "    $browser->assertEnabled($field);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1402
# File: docs/master/dusk.md, line: 1402
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-disabled\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1402
# File: docs/master/dusk.md, line: 1402
#. type: Title ####
#, no-wrap
msgid "assertDisabled"
msgstr ""

# File: docs/8.x/dusk.md, line: 1405
# File: docs/master/dusk.md, line: 1405
#. type: Plain text
msgid "Assert that the given field is disabled:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1407
# File: docs/master/dusk.md, line: 1407
#. type: Plain text
#, no-wrap
msgid "    $browser->assertDisabled($field);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1409
# File: docs/master/dusk.md, line: 1409
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-button-enabled\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1409
# File: docs/master/dusk.md, line: 1409
#. type: Title ####
#, no-wrap
msgid "assertButtonEnabled"
msgstr ""

# File: docs/8.x/dusk.md, line: 1412
# File: docs/master/dusk.md, line: 1412
#. type: Plain text
msgid "Assert that the given button is enabled:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1414
# File: docs/master/dusk.md, line: 1414
#. type: Plain text
#, no-wrap
msgid "    $browser->assertButtonEnabled($button);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1416
# File: docs/master/dusk.md, line: 1416
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-button-disabled\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1416
# File: docs/master/dusk.md, line: 1416
#. type: Title ####
#, no-wrap
msgid "assertButtonDisabled"
msgstr ""

# File: docs/8.x/dusk.md, line: 1419
# File: docs/master/dusk.md, line: 1419
#. type: Plain text
msgid "Assert that the given button is disabled:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1421
# File: docs/master/dusk.md, line: 1421
#. type: Plain text
#, no-wrap
msgid "    $browser->assertButtonDisabled($button);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1423
# File: docs/master/dusk.md, line: 1423
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-focused\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1423
# File: docs/master/dusk.md, line: 1423
#. type: Title ####
#, no-wrap
msgid "assertFocused"
msgstr ""

# File: docs/8.x/dusk.md, line: 1426
# File: docs/master/dusk.md, line: 1426
#. type: Plain text
msgid "Assert that the given field is focused:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1428
# File: docs/master/dusk.md, line: 1428
#. type: Plain text
#, no-wrap
msgid "    $browser->assertFocused($field);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1430
# File: docs/master/dusk.md, line: 1430
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-not-focused\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1430
# File: docs/master/dusk.md, line: 1430
#. type: Title ####
#, no-wrap
msgid "assertNotFocused"
msgstr ""

# File: docs/8.x/dusk.md, line: 1433
# File: docs/master/dusk.md, line: 1433
#. type: Plain text
msgid "Assert that the given field is not focused:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1435
# File: docs/master/dusk.md, line: 1435
#. type: Plain text
#, no-wrap
msgid "    $browser->assertNotFocused($field);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1437
# File: docs/master/dusk.md, line: 1437
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-authenticated\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1437
# File: docs/master/dusk.md, line: 1437
#. type: Title ####
#, no-wrap
msgid "assertAuthenticated"
msgstr ""

# File: docs/8.x/dusk.md, line: 1440
# File: docs/master/dusk.md, line: 1440
#. type: Plain text
msgid "Assert that the user is authenticated:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1442
# File: docs/master/dusk.md, line: 1442
#. type: Plain text
#, no-wrap
msgid "    $browser->assertAuthenticated();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1444
# File: docs/master/dusk.md, line: 1444
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-guest\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1444
# File: docs/master/dusk.md, line: 1444
#. type: Title ####
#, no-wrap
msgid "assertGuest"
msgstr ""

# File: docs/8.x/dusk.md, line: 1447
# File: docs/master/dusk.md, line: 1447
#. type: Plain text
msgid "Assert that the user is not authenticated:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1449
# File: docs/master/dusk.md, line: 1449
#. type: Plain text
#, no-wrap
msgid "    $browser->assertGuest();\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1451
# File: docs/master/dusk.md, line: 1451
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-authenticated-as\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1451
# File: docs/master/dusk.md, line: 1451
#. type: Title ####
#, no-wrap
msgid "assertAuthenticatedAs"
msgstr ""

# File: docs/8.x/dusk.md, line: 1454
# File: docs/master/dusk.md, line: 1454
#. type: Plain text
msgid "Assert that the user is authenticated as the given user:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1456
# File: docs/master/dusk.md, line: 1456
#. type: Plain text
#, no-wrap
msgid "    $browser->assertAuthenticatedAs($user);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1458
# File: docs/master/dusk.md, line: 1458
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-vue\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1458
# File: docs/master/dusk.md, line: 1458
#. type: Title ####
#, no-wrap
msgid "assertVue"
msgstr ""

# File: docs/8.x/dusk.md, line: 1461
# File: docs/master/dusk.md, line: 1461
#. type: Plain text
msgid "Dusk even allows you to make assertions on the state of [Vue component](https://vuejs.org) data. For example, imagine your application contains the following Vue component:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1465
# File: docs/master/dusk.md, line: 1465
#. type: Plain text
#, no-wrap
msgid "    <profile dusk=\"profile-component\"></profile>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1467
# File: docs/master/dusk.md, line: 1467
#. type: Plain text
#, no-wrap
msgid "    // Component Definition...\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1470
# File: docs/master/dusk.md, line: 1470
#. type: Plain text
#, no-wrap
msgid "    Vue.component('profile', {\n"
"        template: '<div>{{ user.name }}</div>',\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1479
# File: docs/master/dusk.md, line: 1479
#. type: Plain text
#, no-wrap
msgid "        data: function () {\n"
"            return {\n"
"                user: {\n"
"                    name: 'Taylor'\n"
"                }\n"
"            };\n"
"        }\n"
"    });\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1481
# File: docs/master/dusk.md, line: 1481
#. type: Plain text
msgid "You may assert on the state of the Vue component like so:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1494
# File: docs/master/dusk.md, line: 1494
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * A basic Vue test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testVue()\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"        });\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1496
# File: docs/master/dusk.md, line: 1496
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-vue-is-not\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1496
# File: docs/master/dusk.md, line: 1496
#. type: Title ####
#, no-wrap
msgid "assertVueIsNot"
msgstr ""

# File: docs/8.x/dusk.md, line: 1499
# File: docs/master/dusk.md, line: 1499
#. type: Plain text
msgid "Assert that a given Vue component data property does not match the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1501
# File: docs/master/dusk.md, line: 1501
#. type: Plain text
#, no-wrap
msgid "    $browser->assertVueIsNot($property, $value, $componentSelector = null);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1503
# File: docs/master/dusk.md, line: 1503
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-vue-contains\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1503
# File: docs/master/dusk.md, line: 1503
#. type: Title ####
#, no-wrap
msgid "assertVueContains"
msgstr ""

# File: docs/8.x/dusk.md, line: 1506
# File: docs/master/dusk.md, line: 1506
#. type: Plain text
msgid "Assert that a given Vue component data property is an array and contains the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1508
# File: docs/master/dusk.md, line: 1508
#. type: Plain text
#, no-wrap
msgid "    $browser->assertVueContains($property, $value, $componentSelector = null);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1510
# File: docs/master/dusk.md, line: 1510
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-vue-does-not-contain\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1510
# File: docs/master/dusk.md, line: 1510
#. type: Title ####
#, no-wrap
msgid "assertVueDoesNotContain"
msgstr ""

# File: docs/8.x/dusk.md, line: 1513
# File: docs/master/dusk.md, line: 1513
#. type: Plain text
msgid "Assert that a given Vue component data property is an array and does not contain the given value:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1515
# File: docs/master/dusk.md, line: 1515
#. type: Plain text
#, no-wrap
msgid "    $browser->assertVueDoesNotContain($property, $value, $componentSelector = null);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1517
# File: docs/master/dusk.md, line: 1517
#. type: Plain text
#, no-wrap
msgid "<a name=\"pages\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1517
# File: docs/master/dusk.md, line: 1517
#. type: Title ##
#, no-wrap
msgid "Pages"
msgstr ""

# File: docs/8.x/dusk.md, line: 1520
# File: docs/master/dusk.md, line: 1520
#. type: Plain text
msgid "Sometimes, tests require several complicated actions to be performed in sequence. This can make your tests harder to read and understand. Dusk Pages allow you to define expressive actions that may then be performed on a given page via a single method. Pages also allow you to define short-cuts to common selectors for your application or for a single page."
msgstr ""

# File: docs/8.x/dusk.md, line: 1522
# File: docs/master/dusk.md, line: 1522
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-pages\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1522
# File: docs/master/dusk.md, line: 1522
#. type: Title ###
#, no-wrap
msgid "Generating Pages"
msgstr ""

# File: docs/8.x/dusk.md, line: 1525
# File: docs/master/dusk.md, line: 1525
#. type: Plain text
msgid "To generate a page object, execute the `dusk:page` Artisan command. All page objects will be placed in your application's `tests/Browser/Pages` directory:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1527
# File: docs/master/dusk.md, line: 1527
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk:page Login\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1529
# File: docs/master/dusk.md, line: 1529
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuring-pages\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1529
# File: docs/master/dusk.md, line: 1529
#. type: Title ###
#, no-wrap
msgid "Configuring Pages"
msgstr ""

# File: docs/8.x/dusk.md, line: 1532
# File: docs/master/dusk.md, line: 1532
#. type: Plain text
msgid "By default, pages have three methods: `url`, `assert`, and `elements`. We will discuss the `url` and `assert` methods now. The `elements` method will be [discussed in more detail below](#shorthand-selectors)."
msgstr ""

# File: docs/8.x/dusk.md, line: 1534
# File: docs/master/dusk.md, line: 1534
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-url-method\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1534
# File: docs/master/dusk.md, line: 1534
#. type: Title ####
#, no-wrap
msgid "The `url` Method"
msgstr ""

# File: docs/8.x/dusk.md, line: 1537
# File: docs/master/dusk.md, line: 1537
#. type: Plain text
msgid "The `url` method should return the path of the URL that represents the page. Dusk will use this URL when navigating to the page in the browser:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1547
# File: docs/master/dusk.md, line: 1547
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the URL for the page.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function url()\n"
"    {\n"
"        return '/login';\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1549
# File: docs/master/dusk.md, line: 1549
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-assert-method\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1549
# File: docs/master/dusk.md, line: 1549
#. type: Title ####
#, no-wrap
msgid "The `assert` Method"
msgstr ""

# File: docs/8.x/dusk.md, line: 1552
# File: docs/master/dusk.md, line: 1552
#. type: Plain text
msgid "The `assert` method may make any assertions necessary to verify that the browser is actually on the given page. It is not actually necessary to place anything within this method; however, you are free to make these assertions if you wish. These assertions will be run automatically when navigating to the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1562
# File: docs/master/dusk.md, line: 1562
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Assert that the browser is on the page.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function assert(Browser $browser)\n"
"    {\n"
"        $browser->assertPathIs($this->url());\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1564
# File: docs/master/dusk.md, line: 1564
#. type: Plain text
#, no-wrap
msgid "<a name=\"navigating-to-pages\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1564
# File: docs/master/dusk.md, line: 1564
#. type: Title ###
#, no-wrap
msgid "Navigating To Pages"
msgstr ""

# File: docs/8.x/dusk.md, line: 1567
# File: docs/master/dusk.md, line: 1567
#. type: Plain text
msgid "Once a page has been defined, you may navigate to it using the `visit` method:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1569
# File: docs/master/dusk.md, line: 1569
#. type: Plain text
#, no-wrap
msgid "    use Tests\\Browser\\Pages\\Login;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1571
# File: docs/master/dusk.md, line: 1571
#. type: Plain text
#, no-wrap
msgid "    $browser->visit(new Login);\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1573
# File: docs/master/dusk.md, line: 1573
#. type: Plain text
msgid "Sometimes you may already be on a given page and need to \"load\" the page's selectors and methods into the current test context. This is common when pressing a button and being redirected to a given page without explicitly navigating to it. In this situation, you may use the `on` method to load the page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1575
# File: docs/master/dusk.md, line: 1575
#. type: Plain text
#, no-wrap
msgid "    use Tests\\Browser\\Pages\\CreatePlaylist;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1580
# File: docs/master/dusk.md, line: 1580
#. type: Plain text
#, no-wrap
msgid "    $browser->visit('/dashboard')\n"
"            ->clickLink('Create Playlist')\n"
"            ->on(new CreatePlaylist)\n"
"            ->assertSee('@create');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1582
# File: docs/master/dusk.md, line: 1582
#. type: Plain text
#, no-wrap
msgid "<a name=\"shorthand-selectors\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1582
# File: docs/master/dusk.md, line: 1582
#. type: Title ###
#, no-wrap
msgid "Shorthand Selectors"
msgstr ""

# File: docs/8.x/dusk.md, line: 1585
# File: docs/master/dusk.md, line: 1585
#. type: Plain text
msgid "The `elements` method within page classes allows you to define quick, easy-to-remember shortcuts for any CSS selector on your page. For example, let's define a shortcut for the \"email\" input field of the application's login page:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1597
# File: docs/master/dusk.md, line: 1597
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the element shortcuts for the page.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function elements()\n"
"    {\n"
"        return [\n"
"            '@email' => 'input[name=email]',\n"
"        ];\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1599
# File: docs/master/dusk.md, line: 1599
#. type: Plain text
msgid "Once the shortcut has been defined, you may use the shorthand selector anywhere you would typically use a full CSS selector:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1601
# File: docs/master/dusk.md, line: 1601
#. type: Plain text
#, no-wrap
msgid "    $browser->type('@email', 'taylor@laravel.com');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1603
# File: docs/master/dusk.md, line: 1603
#. type: Plain text
#, no-wrap
msgid "<a name=\"global-shorthand-selectors\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1603
# File: docs/master/dusk.md, line: 1603
#. type: Title ####
#, no-wrap
msgid "Global Shorthand Selectors"
msgstr ""

# File: docs/8.x/dusk.md, line: 1606
# File: docs/master/dusk.md, line: 1606
#. type: Plain text
msgid "After installing Dusk, a base `Page` class will be placed in your `tests/Browser/Pages` directory. This class contains a `siteElements` method which may be used to define global shorthand selectors that should be available on every page throughout your application:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1618
# File: docs/master/dusk.md, line: 1618
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the global element shortcuts for the site.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public static function siteElements()\n"
"    {\n"
"        return [\n"
"            '@element' => '#selector',\n"
"        ];\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1620
# File: docs/master/dusk.md, line: 1620
#. type: Plain text
#, no-wrap
msgid "<a name=\"page-methods\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1620
# File: docs/master/dusk.md, line: 1620
#. type: Title ###
#, no-wrap
msgid "Page Methods"
msgstr ""

# File: docs/8.x/dusk.md, line: 1623
# File: docs/master/dusk.md, line: 1623
#. type: Plain text
msgid "In addition to the default methods defined on pages, you may define additional methods which may be used throughout your tests. For example, let's imagine we are building a music management application. A common action for one page of the application might be to create a playlist. Instead of re-writing the logic to create a playlist in each test, you may define a `createPlaylist` method on a page class:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1627
# File: docs/master/dusk.md, line: 1627
#. type: Plain text
#, no-wrap
msgid "    namespace Tests\\Browser\\Pages;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1633
# File: docs/master/dusk.md, line: 1633
#. type: Plain text
#, no-wrap
msgid "    class Dashboard extends Page\n"
"    {\n"
"        // Other page methods...\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1648
# File: docs/master/dusk.md, line: 1648
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Create a new playlist.\n"
"         *\n"
"         * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"         * @param  string  $name\n"
"         * @return void\n"
"         */\n"
"        public function createPlaylist(Browser $browser, $name)\n"
"        {\n"
"            $browser->type('name', $name)\n"
"                    ->check('share')\n"
"                    ->press('Create Playlist');\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1650
# File: docs/master/dusk.md, line: 1650
#. type: Plain text
msgid "Once the method has been defined, you may use it within any test that utilizes the page. The browser instance will automatically be passed as the first argument to custom page methods:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1652
# File: docs/master/dusk.md, line: 1652
#. type: Plain text
#, no-wrap
msgid "    use Tests\\Browser\\Pages\\Dashboard;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1656
# File: docs/master/dusk.md, line: 1656
#. type: Plain text
#, no-wrap
msgid "    $browser->visit(new Dashboard)\n"
"            ->createPlaylist('My Playlist')\n"
"            ->assertSee('My Playlist');\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1658
# File: docs/master/dusk.md, line: 1658
#. type: Plain text
#, no-wrap
msgid "<a name=\"components\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1658
# File: docs/master/dusk.md, line: 1658
#. type: Title ##
#, no-wrap
msgid "Components"
msgstr ""

# File: docs/8.x/dusk.md, line: 1661
# File: docs/master/dusk.md, line: 1661
#. type: Plain text
msgid "Components are similar to Dusk’s “page objects”, but are intended for pieces of UI and functionality that are re-used throughout your application, such as a navigation bar or notification window. As such, components are not bound to specific URLs."
msgstr ""

# File: docs/8.x/dusk.md, line: 1663
# File: docs/master/dusk.md, line: 1663
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-components\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1663
# File: docs/master/dusk.md, line: 1663
#. type: Title ###
#, no-wrap
msgid "Generating Components"
msgstr ""

# File: docs/8.x/dusk.md, line: 1666
# File: docs/master/dusk.md, line: 1666
#. type: Plain text
msgid "To generate a component, execute the `dusk:component` Artisan command. New components are placed in the `tests/Browser/Components` directory:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1668
# File: docs/master/dusk.md, line: 1668
#. type: Plain text
#, no-wrap
msgid "    php artisan dusk:component DatePicker\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1670
# File: docs/master/dusk.md, line: 1670
#. type: Plain text
msgid "As shown above, a \"date picker\" is an example of a component that might exist throughout your application on a variety of pages. It can become cumbersome to manually write the browser automation logic to select a date in dozens of tests throughout your test suite. Instead, we can define a Dusk component to represent the date picker, allowing us to encapsulate that logic within the component:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1674
# File: docs/master/dusk.md, line: 1674
#. type: Plain text
#, no-wrap
msgid "    namespace Tests\\Browser\\Components;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1677
# File: docs/master/dusk.md, line: 1677
#. type: Plain text
#, no-wrap
msgid "    use Laravel\\Dusk\\Browser;\n"
"    use Laravel\\Dusk\\Component as BaseComponent;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1689
# File: docs/master/dusk.md, line: 1689
#. type: Plain text
#, no-wrap
msgid "    class DatePicker extends BaseComponent\n"
"    {\n"
"        /**\n"
"         * Get the root selector for the component.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function selector()\n"
"        {\n"
"            return '.date-picker';\n"
"        }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1700
# File: docs/master/dusk.md, line: 1700
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Assert that the browser page contains the component.\n"
"         *\n"
"         * @param  Browser  $browser\n"
"         * @return void\n"
"         */\n"
"        public function assert(Browser $browser)\n"
"        {\n"
"            $browser->assertVisible($this->selector());\n"
"        }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1715
# File: docs/master/dusk.md, line: 1715
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Get the element shortcuts for the component.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function elements()\n"
"        {\n"
"            return [\n"
"                '@date-field' => 'input.datepicker-input',\n"
"                '@year-list' => 'div > div.datepicker-years',\n"
"                '@month-list' => 'div > div.datepicker-months',\n"
"                '@day-list' => 'div > div.datepicker-days',\n"
"            ];\n"
"        }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1739
# File: docs/master/dusk.md, line: 1739
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Select the given date.\n"
"         *\n"
"         * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"         * @param  int  $year\n"
"         * @param  int  $month\n"
"         * @param  int  $day\n"
"         * @return void\n"
"         */\n"
"        public function selectDate(Browser $browser, $year, $month, $day)\n"
"        {\n"
"            $browser->click('@date-field')\n"
"                    ->within('@year-list', function ($browser) use ($year) {\n"
"                        $browser->click($year);\n"
"                    })\n"
"                    ->within('@month-list', function ($browser) use ($month) {\n"
"                        $browser->click($month);\n"
"                    })\n"
"                    ->within('@day-list', function ($browser) use ($day) {\n"
"                        $browser->click($day);\n"
"                    });\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1741
# File: docs/master/dusk.md, line: 1741
#. type: Plain text
#, no-wrap
msgid "<a name=\"using-components\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1741
# File: docs/master/dusk.md, line: 1741
#. type: Title ###
#, no-wrap
msgid "Using Components"
msgstr ""

# File: docs/8.x/dusk.md, line: 1744
# File: docs/master/dusk.md, line: 1744
#. type: Plain text
msgid "Once the component has been defined, we can easily select a date within the date picker from any test. And, if the logic necessary to select a date changes, we only need to update the component:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1753
# File: docs/master/dusk.md, line: 1753
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"    use Laravel\\Dusk\\Browser;\n"
"    use Tests\\Browser\\Components\\DatePicker;\n"
"    use Tests\\DuskTestCase;\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1772
# File: docs/master/dusk.md, line: 1772
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        /**\n"
"         * A basic component test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function testBasicExample()\n"
"        {\n"
"            $this->browse(function (Browser $browser) {\n"
"                $browser->visit('/')\n"
"                        ->within(new DatePicker, function ($browser) {\n"
"                            $browser->selectDate(2019, 1, 30);\n"
"                        })\n"
"                        ->assertSee('January');\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1774
# File: docs/master/dusk.md, line: 1774
#. type: Plain text
#, no-wrap
msgid "<a name=\"continuous-integration\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1774
# File: docs/master/dusk.md, line: 1774
#. type: Title ##
#, no-wrap
msgid "Continuous Integration"
msgstr ""

# File: docs/8.x/dusk.md, line: 1777
# File: docs/master/dusk.md, line: 1777
#. type: Plain text
#, no-wrap
msgid "> {note} Most Dusk continuous integration configurations expect your Laravel application to be served using the built-in PHP development server on port 8000. Therefore, before continuing, you should ensure that your continuous integration environment has an `APP_URL` environment variable value of `http://127.0.0.1:8000`.\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1779
# File: docs/master/dusk.md, line: 1779
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-tests-on-heroku-ci\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1779
# File: docs/master/dusk.md, line: 1779
#. type: Title ###
#, no-wrap
msgid "Heroku CI"
msgstr ""

# File: docs/8.x/dusk.md, line: 1782
# File: docs/master/dusk.md, line: 1782
#. type: Plain text
msgid "To run Dusk tests on [Heroku CI](https://www.heroku.com/continuous-integration), add the following Google Chrome buildpack and scripts to your Heroku `app.json` file:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1797
# File: docs/master/dusk.md, line: 1797
#. type: Plain text
#, no-wrap
msgid "    {\n"
"      \"environments\": {\n"
"        \"test\": {\n"
"          \"buildpacks\": [\n"
"            { \"url\": \"heroku/php\" },\n"
"            { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n"
"          ],\n"
"          \"scripts\": {\n"
"            \"test-setup\": \"cp .env.testing .env\",\n"
"            \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &' && nohup bash -c 'php artisan serve --no-reload > /dev/null 2>&1 &' && php artisan dusk\"\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1799
# File: docs/master/dusk.md, line: 1799
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-tests-on-travis-ci\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1799
# File: docs/master/dusk.md, line: 1799
#. type: Title ###
#, no-wrap
msgid "Travis CI"
msgstr ""

# File: docs/8.x/dusk.md, line: 1802
# File: docs/master/dusk.md, line: 1802
#. type: Plain text
msgid "To run your Dusk tests on [Travis CI](https://travis-ci.org), use the following `.travis.yml` configuration. Since Travis CI is not a graphical environment, we will need to take some extra steps in order to launch a Chrome browser. In addition, we will use `php artisan serve` to launch PHP's built-in web server:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1804
# File: docs/master/dusk.md, line: 1804
#. type: Plain text
#, no-wrap
msgid "    language: php\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1807
# File: docs/master/dusk.md, line: 1807
#. type: Plain text
#, no-wrap
msgid "    php:\n"
"      - 7.3\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1810
# File: docs/master/dusk.md, line: 1810
#. type: Plain text
#, no-wrap
msgid "    addons:\n"
"      chrome: stable\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1816
# File: docs/master/dusk.md, line: 1816
#. type: Plain text
#, no-wrap
msgid "    install:\n"
"      - cp .env.testing .env\n"
"      - travis_retry composer install --no-interaction --prefer-dist\n"
"      - php artisan key:generate\n"
"      - php artisan dusk:chrome-driver\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1820
# File: docs/master/dusk.md, line: 1820
#. type: Plain text
#, no-wrap
msgid "    before_script:\n"
"      - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &\n"
"      - php artisan serve --no-reload &\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1823
# File: docs/master/dusk.md, line: 1823
#. type: Plain text
#, no-wrap
msgid "    script:\n"
"      - php artisan dusk\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1825
# File: docs/master/dusk.md, line: 1825
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-tests-on-github-actions\"></a>\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1825
# File: docs/master/dusk.md, line: 1825
#. type: Title ###
#, no-wrap
msgid "GitHub Actions"
msgstr ""

# File: docs/8.x/dusk.md, line: 1828
# File: docs/master/dusk.md, line: 1828
#. type: Plain text
msgid "If you are using [Github Actions](https://github.com/features/actions) to run your Dusk tests, you may use the following configuration file as a starting point. Like TravisCI, we will use the `php artisan serve` command to launch PHP's built-in web server:"
msgstr ""

# File: docs/8.x/dusk.md, line: 1832
# File: docs/master/dusk.md, line: 1832
#. type: Plain text
#, no-wrap
msgid "    name: CI\n"
"    on: [push]\n"
"    jobs:\n"
msgstr ""

# File: docs/8.x/dusk.md, line: 1868
# File: docs/master/dusk.md, line: 1868
#. type: Plain text
#, no-wrap
msgid "      dusk-php:\n"
"        runs-on: ubuntu-latest\n"
"        steps:\n"
"          - uses: actions/checkout@v2\n"
"          - name: Prepare The Environment\n"
"            run: cp .env.example .env\n"
"          - name: Create Database\n"
"            run: |\n"
"              sudo systemctl start mysql\n"
"              mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE 'my-database' character set UTF8mb4 collate utf8mb4_bin;\"\n"
"          - name: Install Composer Dependencies\n"
"            run: composer install --no-progress --prefer-dist --optimize-autoloader\n"
"          - name: Generate Application Key\n"
"            run: php artisan key:generate\n"
"          - name: Upgrade Chrome Driver\n"
"            run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d \" \" -f3 | cut -d \".\" -f1`\n"
"          - name: Start Chrome Driver\n"
"            run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"          - name: Run Laravel Server\n"
"            run: php artisan serve --no-reload &\n"
"          - name: Run Dusk Tests\n"
"            env:\n"
"              APP_URL: \"http://127.0.0.1:8000\"\n"
"            run: php artisan dusk\n"
"          - name: Upload Screenshots\n"
"            if: failure()\n"
"            uses: actions/upload-artifact@v2\n"
"            with:\n"
"              name: screenshots\n"
"              path: tests/Browser/screenshots\n"
"          - name: Upload Console Logs\n"
"            if: failure()\n"
"            uses: actions/upload-artifact@v2\n"
"            with:\n"
"              name: console\n"
"              path: tests/Browser/console\n"
msgstr ""

