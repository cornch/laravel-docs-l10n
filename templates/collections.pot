#
msgid ""
msgstr ""

#: docs/8.x/collections.md:block 1 (header)
msgid "Collections"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Creating Collections](#creating-collections)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Extending Collections](#extending-collections)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Available Methods](#available-methods)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Higher Order Messages](#higher-order-messages)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Lazy Collections](#lazy-collections)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Introduction](#lazy-collection-introduction)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Creating Lazy Collections](#creating-lazy-collections)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[The Enumerable Contract](#the-enumerable-contract)"
msgstr ""

#: docs/8.x/collections.md:block 2 (unordered list)
msgid "[Lazy Collection Methods](#lazy-collection-methods)"
msgstr ""

#: docs/8.x/collections.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/collections.md:block 5 (paragraph)
msgid "The `Illuminate\\Support\\Collection` class provides a fluent, convenient wrapper for working with arrays of data. For example, check out the following code. We'll use the `collect` helper to create a new collection instance from the array, run the `strtoupper` function on each element, and then remove all empty elements:"
msgstr ""

#: docs/8.x/collections.md:block 6 (code)
msgid ""
"$collection = collect(['taylor', 'abigail', null])->map(function ($name) {\n"
"    return strtoupper($name);\n"
"})->reject(function ($name) {\n"
"    return empty($name);\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 7 (paragraph)
msgid "As you can see, the `Collection` class allows you to chain its methods to perform fluent mapping and reducing of the underlying array. In general, collections are immutable, meaning every `Collection` method returns an entirely new `Collection` instance."
msgstr ""

#: docs/8.x/collections.md:block 8 (paragraph)
msgid "<a name=\"creating-collections\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 9 (header)
msgid "Creating Collections"
msgstr ""

#: docs/8.x/collections.md:block 10 (paragraph)
msgid "As mentioned above, the `collect` helper returns a new `Illuminate\\Support\\Collection` instance for the given array. So, creating a collection is as simple as:"
msgstr ""

#: docs/8.x/collections.md:block 11 (code)
msgid "$collection = collect([1, 2, 3]);\n"
msgstr ""

#: docs/8.x/collections.md:block 12 (quote)
msgid "{tip} The results of [Eloquent](/docs/{{version}}/eloquent) queries are always returned as `Collection` instances."
msgstr ""

#: docs/8.x/collections.md:block 13 (paragraph)
msgid "<a name=\"extending-collections\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 14 (header)
msgid "Extending Collections"
msgstr ""

#: docs/8.x/collections.md:block 15 (paragraph)
msgid "Collections are \"macroable\", which allows you to add additional methods to the `Collection` class at run time. The `Illuminate\\Support\\Collection` class' `macro` method accepts a closure that will be executed when your macro is called. The macro closure may access the collection's other methods via `$this`, just as if it were a real method of the collection class. For example, the following code adds a `toUpper` method to the `Collection` class:"
msgstr ""

#: docs/8.x/collections.md:block 16 (code)
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"Collection::macro('toUpper', function () {\n"
"    return $this->map(function ($value) {\n"
"        return Str::upper($value);\n"
"    });\n"
"});\n"
"\n"
"$collection = collect(['first', 'second']);\n"
"\n"
"$upper = $collection->toUpper();\n"
"\n"
"// ['FIRST', 'SECOND']\n"
msgstr ""

#: docs/8.x/collections.md:block 17 (paragraph)
msgid "Typically, you should declare collection macros in the `boot` method of a [service provider](/docs/{{version}}/providers)."
msgstr ""

#: docs/8.x/collections.md:block 18 (paragraph)
msgid "<a name=\"macro-arguments\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 19 (header)
msgid "Macro Arguments"
msgstr ""

#: docs/8.x/collections.md:block 20 (paragraph)
msgid "If necessary, you may define macros that accept additional arguments:"
msgstr ""

#: docs/8.x/collections.md:block 21 (code)
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Illuminate\\Support\\Facades\\Lang;\n"
"\n"
"Collection::macro('toLocale', function ($locale) {\n"
"    return $this->map(function ($value) use ($locale) {\n"
"        return Lang::get($value, [], $locale);\n"
"    });\n"
"});\n"
"\n"
"$collection = collect(['first', 'second']);\n"
"\n"
"$translated = $collection->toLocale('es');\n"
msgstr ""

#: docs/8.x/collections.md:block 22 (paragraph)
msgid "<a name=\"available-methods\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 23 (header)
msgid "Available Methods"
msgstr ""

#: docs/8.x/collections.md:block 24 (paragraph)
msgid "For the majority of the remaining collection documentation, we'll discuss each method available on the `Collection` class. Remember, all of these methods may be chained to fluently manipulate the underlying array. Furthermore, almost every method returns a new `Collection` instance, allowing you to preserve the original copy of the collection when necessary:"
msgstr ""

#: docs/8.x/collections.md:block 27 (paragraph)
msgid "[all](#method-all) [average](#method-average) [avg](#method-avg) [chunk](#method-chunk) [chunkWhile](#method-chunkwhile) [collapse](#method-collapse) [collect](#method-collect) [combine](#method-combine) [concat](#method-concat) [contains](#method-contains) [containsStrict](#method-containsstrict) [count](#method-count) [countBy](#method-countBy) [crossJoin](#method-crossjoin) [dd](#method-dd) [diff](#method-diff) [diffAssoc](#method-diffassoc) [diffKeys](#method-diffkeys) [doesntContain](#method-doesntcontain) [dump](#method-dump) [duplicates](#method-duplicates) [duplicatesStrict](#method-duplicatesstrict) [each](#method-each) [eachSpread](#method-eachspread) [every](#method-every) [except](#method-except) [filter](#method-filter) [first](#method-first) [firstWhere](#method-first-where) [flatMap](#method-flatmap) [flatten](#method-flatten) [flip](#method-flip) [forget](#method-forget) [forPage](#method-forpage) [get](#method-get) [groupBy](#method-groupby) [has](#method-has) [implode](#method-implode) [intersect](#method-intersect) [intersectByKeys](#method-intersectbykeys) [isEmpty](#method-isempty) [isNotEmpty](#method-isnotempty) [join](#method-join) [keyBy](#method-keyby) [keys](#method-keys) [last](#method-last) [macro](#method-macro) [make](#method-make) [map](#method-map) [mapInto](#method-mapinto) [mapSpread](#method-mapspread) [mapToGroups](#method-maptogroups) [mapWithKeys](#method-mapwithkeys) [max](#method-max) [median](#method-median) [merge](#method-merge) [mergeRecursive](#method-mergerecursive) [min](#method-min) [mode](#method-mode) [nth](#method-nth) [only](#method-only) [pad](#method-pad) [partition](#method-partition) [pipe](#method-pipe) [pipeInto](#method-pipeinto) [pipeThrough](#method-pipethrough) [pluck](#method-pluck) [pop](#method-pop) [prepend](#method-prepend) [pull](#method-pull) [push](#method-push) [put](#method-put) [random](#method-random) [range](#method-range) [reduce](#method-reduce) [reduceSpread](#method-reduce-spread) [reject](#method-reject) [replace](#method-replace) [replaceRecursive](#method-replacerecursive) [reverse](#method-reverse) [search](#method-search) [shift](#method-shift) [shuffle](#method-shuffle) [sliding](#method-sliding) [skip](#method-skip) [skipUntil](#method-skipuntil) [skipWhile](#method-skipwhile) [slice](#method-slice) [sole](#method-sole) [some](#method-some) [sort](#method-sort) [sortBy](#method-sortby) [sortByDesc](#method-sortbydesc) [sortDesc](#method-sortdesc) [sortKeys](#method-sortkeys) [sortKeysDesc](#method-sortkeysdesc) [sortKeysUsing](#method-sortkeysusing) [splice](#method-splice) [split](#method-split) [splitIn](#method-splitin) [sum](#method-sum) [take](#method-take) [takeUntil](#method-takeuntil) [takeWhile](#method-takewhile) [tap](#method-tap) [times](#method-times) [toArray](#method-toarray) [toJson](#method-tojson) [transform](#method-transform) [undot](#method-undot) [union](#method-union) [unique](#method-unique) [uniqueStrict](#method-uniquestrict) [unless](#method-unless) [unlessEmpty](#method-unlessempty) [unlessNotEmpty](#method-unlessnotempty) [unwrap](#method-unwrap) [values](#method-values) [when](#method-when) [whenEmpty](#method-whenempty) [whenNotEmpty](#method-whennotempty) [where](#method-where) [whereStrict](#method-wherestrict) [whereBetween](#method-wherebetween) [whereIn](#method-wherein) [whereInStrict](#method-whereinstrict) [whereInstanceOf](#method-whereinstanceof) [whereNotBetween](#method-wherenotbetween) [whereNotIn](#method-wherenotin) [whereNotInStrict](#method-wherenotinstrict) [whereNotNull](#method-wherenotnull) [whereNull](#method-wherenull) [wrap](#method-wrap) [zip](#method-zip)"
msgstr ""

#: docs/8.x/collections.md:block 29 (paragraph)
msgid "<a name=\"method-listing\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 30 (header)
msgid "Method Listing"
msgstr ""

#: docs/8.x/collections.md:block 32 (paragraph)
msgid "<a name=\"method-all\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 33 (header)
msgid "`all()` {.collection-method .first-collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 34 (paragraph)
msgid "The `all` method returns the underlying array represented by the collection:"
msgstr ""

#: docs/8.x/collections.md:block 35 (code)
msgid ""
"collect([1, 2, 3])->all();\n"
"\n"
"// [1, 2, 3]\n"
msgstr ""

#: docs/8.x/collections.md:block 36 (paragraph)
msgid "<a name=\"method-average\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 37 (header)
msgid "`average()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 38 (paragraph)
msgid "Alias for the [`avg`](#method-avg) method."
msgstr ""

#: docs/8.x/collections.md:block 39 (paragraph)
msgid "<a name=\"method-avg\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 40 (header)
msgid "`avg()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 41 (paragraph)
msgid "The `avg` method returns the [average value](https://en.wikipedia.org/wiki/Average) of a given key:"
msgstr ""

#: docs/8.x/collections.md:block 42 (code)
msgid ""
"$average = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 10],\n"
"    ['foo' => 20],\n"
"    ['foo' => 40]\n"
"])->avg('foo');\n"
"\n"
"// 20\n"
"\n"
"$average = collect([1, 1, 2, 4])->avg();\n"
"\n"
"// 2\n"
msgstr ""

#: docs/8.x/collections.md:block 43 (paragraph)
msgid "<a name=\"method-chunk\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 44 (header)
msgid "`chunk()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 45 (paragraph)
msgid "The `chunk` method breaks the collection into multiple, smaller collections of a given size:"
msgstr ""

#: docs/8.x/collections.md:block 46 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7]);\n"
"\n"
"$chunks = $collection->chunk(4);\n"
"\n"
"$chunks->all();\n"
"\n"
"// [[1, 2, 3, 4], [5, 6, 7]]\n"
msgstr ""

#: docs/8.x/collections.md:block 47 (paragraph)
msgid "This method is especially useful in [views](/docs/{{version}}/views) when working with a grid system such as [Bootstrap](https://getbootstrap.com/docs/4.1/layout/grid/). For example, imagine you have a collection of [Eloquent](/docs/{{version}}/eloquent) models you want to display in a grid:"
msgstr ""

#: docs/8.x/collections.md:block 48 (code)
msgid ""
"@foreach ($products->chunk(3) as $chunk)\n"
"    <div class=\"row\">\n"
"        @foreach ($chunk as $product)\n"
"            <div class=\"col-xs-4\">{{ $product->name }}</div>\n"
"        @endforeach\n"
"    </div>\n"
"@endforeach\n"
msgstr ""

#: docs/8.x/collections.md:block 49 (paragraph)
msgid "<a name=\"method-chunkwhile\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 50 (header)
msgid "`chunkWhile()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 51 (paragraph)
msgid "The `chunkWhile` method breaks the collection into multiple, smaller collections based on the evaluation of the given callback. The `$chunk` variable passed to the closure may be used to inspect the previous element:"
msgstr ""

#: docs/8.x/collections.md:block 52 (code)
msgid ""
"$collection = collect(str_split('AABBCCCD'));\n"
"\n"
"$chunks = $collection->chunkWhile(function ($value, $key, $chunk) {\n"
"    return $value === $chunk->last();\n"
"});\n"
"\n"
"$chunks->all();\n"
"\n"
"// [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]\n"
msgstr ""

#: docs/8.x/collections.md:block 53 (paragraph)
msgid "<a name=\"method-collapse\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 54 (header)
msgid "`collapse()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 55 (paragraph)
msgid "The `collapse` method collapses a collection of arrays into a single, flat collection:"
msgstr ""

#: docs/8.x/collections.md:block 56 (code)
msgid ""
"$collection = collect([\n"
"    [1, 2, 3],\n"
"    [4, 5, 6],\n"
"    [7, 8, 9],\n"
"]);\n"
"\n"
"$collapsed = $collection->collapse();\n"
"\n"
"$collapsed->all();\n"
"\n"
"// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
msgstr ""

#: docs/8.x/collections.md:block 57 (paragraph)
msgid "<a name=\"method-collect\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 58 (header)
msgid "`collect()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 59 (paragraph)
msgid "The `collect` method returns a new `Collection` instance with the items currently in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 60 (code)
msgid ""
"$collectionA = collect([1, 2, 3]);\n"
"\n"
"$collectionB = $collectionA->collect();\n"
"\n"
"$collectionB->all();\n"
"\n"
"// [1, 2, 3]\n"
msgstr ""

#: docs/8.x/collections.md:block 61 (paragraph)
msgid "The `collect` method is primarily useful for converting [lazy collections](#lazy-collections) into standard `Collection` instances:"
msgstr ""

#: docs/8.x/collections.md:block 62 (code)
msgid ""
"$lazyCollection = LazyCollection::make(function () {\n"
"    yield 1;\n"
"    yield 2;\n"
"    yield 3;\n"
"});\n"
"\n"
"$collection = $lazyCollection->collect();\n"
"\n"
"get_class($collection);\n"
"\n"
"// 'Illuminate\\Support\\Collection'\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3]\n"
msgstr ""

#: docs/8.x/collections.md:block 63 (quote)
msgid "{tip} The `collect` method is especially useful when you have an instance of `Enumerable` and need a non-lazy collection instance. Since `collect()` is part of the `Enumerable` contract, you can safely use it to get a `Collection` instance."
msgstr ""

#: docs/8.x/collections.md:block 64 (paragraph)
msgid "<a name=\"method-combine\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 65 (header)
msgid "`combine()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 66 (paragraph)
msgid "The `combine` method combines the values of the collection, as keys, with the values of another array or collection:"
msgstr ""

#: docs/8.x/collections.md:block 67 (code)
msgid ""
"$collection = collect(['name', 'age']);\n"
"\n"
"$combined = $collection->combine(['George', 29]);\n"
"\n"
"$combined->all();\n"
"\n"
"// ['name' => 'George', 'age' => 29]\n"
msgstr ""

#: docs/8.x/collections.md:block 68 (paragraph)
msgid "<a name=\"method-concat\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 69 (header)
msgid "`concat()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 70 (paragraph)
msgid "The `concat` method appends the given `array` or collection's values onto the end of another collection:"
msgstr ""

#: docs/8.x/collections.md:block 71 (code)
msgid ""
"$collection = collect(['John Doe']);\n"
"\n"
"$concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\n"
"\n"
"$concatenated->all();\n"
"\n"
"// ['John Doe', 'Jane Doe', 'Johnny Doe']\n"
msgstr ""

#: docs/8.x/collections.md:block 72 (paragraph)
msgid "<a name=\"method-contains\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 73 (header)
msgid "`contains()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 74 (paragraph)
msgid "The `contains` method determines whether the collection contains a given item. You may pass a closure to the `contains` method to determine if an element exists in the collection matching a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 75 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->contains(function ($value, $key) {\n"
"    return $value > 5;\n"
"});\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 76 (paragraph)
msgid "Alternatively, you may pass a string to the `contains` method to determine whether the collection contains a given item value:"
msgstr ""

#: docs/8.x/collections.md:block 77 (code)
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 100]);\n"
"\n"
"$collection->contains('Desk');\n"
"\n"
"// true\n"
"\n"
"$collection->contains('New York');\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 78 (paragraph)
msgid "You may also pass a key / value pair to the `contains` method, which will determine if the given pair exists in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 79 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"]);\n"
"\n"
"$collection->contains('product', 'Bookcase');\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 80 (paragraph)
msgid "The `contains` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`containsStrict`](#method-containsstrict) method to filter using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 81 (paragraph)
msgid "For the inverse of `contains`, see the [doesntContain](#method-doesntcontain) method."
msgstr ""

#: docs/8.x/collections.md:block 82 (paragraph)
msgid "<a name=\"method-containsstrict\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 83 (header)
msgid "`containsStrict()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 84 (paragraph)
msgid "This method has the same signature as the [`contains`](#method-contains) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 85 (quote)
msgid "{tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-contains)."
msgstr ""

#: docs/8.x/collections.md:block 86 (paragraph)
msgid "<a name=\"method-count\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 87 (header)
msgid "`count()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 88 (paragraph)
msgid "The `count` method returns the total number of items in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 89 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$collection->count();\n"
"\n"
"// 4\n"
msgstr ""

#: docs/8.x/collections.md:block 90 (paragraph)
msgid "<a name=\"method-countBy\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 91 (header)
msgid "`countBy()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 92 (paragraph)
msgid "The `countBy` method counts the occurrences of values in the collection. By default, the method counts the occurrences of every element, allowing you to count certain \"types\" of elements in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 93 (code)
msgid ""
"$collection = collect([1, 2, 2, 2, 3]);\n"
"\n"
"$counted = $collection->countBy();\n"
"\n"
"$counted->all();\n"
"\n"
"// [1 => 1, 2 => 3, 3 => 1]\n"
msgstr ""

#: docs/8.x/collections.md:block 94 (paragraph)
msgid "You pass a closure to the `countBy` method to count all items by a custom value:"
msgstr ""

#: docs/8.x/collections.md:block 95 (code)
msgid ""
"$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n"
"\n"
"$counted = $collection->countBy(function ($email) {\n"
"    return substr(strrchr($email, \"@\"), 1);\n"
"});\n"
"\n"
"$counted->all();\n"
"\n"
"// ['gmail.com' => 2, 'yahoo.com' => 1]\n"
msgstr ""

#: docs/8.x/collections.md:block 96 (paragraph)
msgid "<a name=\"method-crossjoin\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 97 (header)
msgid "`crossJoin()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 98 (paragraph)
msgid "The `crossJoin` method cross joins the collection's values among the given arrays or collections, returning a Cartesian product with all possible permutations:"
msgstr ""

#: docs/8.x/collections.md:block 99 (code)
msgid ""
"$collection = collect([1, 2]);\n"
"\n"
"$matrix = $collection->crossJoin(['a', 'b']);\n"
"\n"
"$matrix->all();\n"
"\n"
"/*\n"
"    [\n"
"        [1, 'a'],\n"
"        [1, 'b'],\n"
"        [2, 'a'],\n"
"        [2, 'b'],\n"
"    ]\n"
"*/\n"
"\n"
"$collection = collect([1, 2]);\n"
"\n"
"$matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n"
"\n"
"$matrix->all();\n"
"\n"
"/*\n"
"    [\n"
"        [1, 'a', 'I'],\n"
"        [1, 'a', 'II'],\n"
"        [1, 'b', 'I'],\n"
"        [1, 'b', 'II'],\n"
"        [2, 'a', 'I'],\n"
"        [2, 'a', 'II'],\n"
"        [2, 'b', 'I'],\n"
"        [2, 'b', 'II'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 100 (paragraph)
msgid "<a name=\"method-dd\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 101 (header)
msgid "`dd()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 102 (paragraph)
msgid "The `dd` method dumps the collection's items and ends execution of the script:"
msgstr ""

#: docs/8.x/collections.md:block 103 (code)
msgid ""
"$collection = collect(['John Doe', 'Jane Doe']);\n"
"\n"
"$collection->dd();\n"
"\n"
"/*\n"
"    Collection {\n"
"        #items: array:2 [\n"
"            0 => \"John Doe\"\n"
"            1 => \"Jane Doe\"\n"
"        ]\n"
"    }\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 104 (paragraph)
msgid "If you do not want to stop executing the script, use the [`dump`](#method-dump) method instead."
msgstr ""

#: docs/8.x/collections.md:block 105 (paragraph)
msgid "<a name=\"method-diff\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 106 (header)
msgid "`diff()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 107 (paragraph)
msgid "The `diff` method compares the collection against another collection or a plain PHP `array` based on its values. This method will return the values in the original collection that are not present in the given collection:"
msgstr ""

#: docs/8.x/collections.md:block 108 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$diff = $collection->diff([2, 4, 6, 8]);\n"
"\n"
"$diff->all();\n"
"\n"
"// [1, 3, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 109 (quote)
msgid "{tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-diff)."
msgstr ""

#: docs/8.x/collections.md:block 110 (paragraph)
msgid "<a name=\"method-diffassoc\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 111 (header)
msgid "`diffAssoc()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 112 (paragraph)
msgid "The `diffAssoc` method compares the collection against another collection or a plain PHP `array` based on its keys and values. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

#: docs/8.x/collections.md:block 113 (code)
msgid ""
"$collection = collect([\n"
"    'color' => 'orange',\n"
"    'type' => 'fruit',\n"
"    'remain' => 6,\n"
"]);\n"
"\n"
"$diff = $collection->diffAssoc([\n"
"    'color' => 'yellow',\n"
"    'type' => 'fruit',\n"
"    'remain' => 3,\n"
"    'used' => 6,\n"
"]);\n"
"\n"
"$diff->all();\n"
"\n"
"// ['color' => 'orange', 'remain' => 6]\n"
msgstr ""

#: docs/8.x/collections.md:block 114 (paragraph)
msgid "<a name=\"method-diffkeys\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 115 (header)
msgid "`diffKeys()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 116 (paragraph)
msgid "The `diffKeys` method compares the collection against another collection or a plain PHP `array` based on its keys. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

#: docs/8.x/collections.md:block 117 (code)
msgid ""
"$collection = collect([\n"
"    'one' => 10,\n"
"    'two' => 20,\n"
"    'three' => 30,\n"
"    'four' => 40,\n"
"    'five' => 50,\n"
"]);\n"
"\n"
"$diff = $collection->diffKeys([\n"
"    'two' => 2,\n"
"    'four' => 4,\n"
"    'six' => 6,\n"
"    'eight' => 8,\n"
"]);\n"
"\n"
"$diff->all();\n"
"\n"
"// ['one' => 10, 'three' => 30, 'five' => 50]\n"
msgstr ""

#: docs/8.x/collections.md:block 118 (paragraph)
msgid "<a name=\"method-doesntcontain\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 119 (header)
msgid "`doesntContain()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 120 (paragraph)
msgid "The `doesntContain` method determines whether the collection does not contain a given item. You may pass a closure to the `doesntContain` method to determine if an element does not exist in the collection matching a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 121 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->doesntContain(function ($value, $key) {\n"
"    return $value < 5;\n"
"});\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 122 (paragraph)
msgid "Alternatively, you may pass a string to the `doesntContain` method to determine whether the collection does not contain a given item value:"
msgstr ""

#: docs/8.x/collections.md:block 123 (code)
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 100]);\n"
"\n"
"$collection->doesntContain('Table');\n"
"\n"
"// true\n"
"\n"
"$collection->doesntContain('Desk');\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 124 (paragraph)
msgid "You may also pass a key / value pair to the `doesntContain` method, which will determine if the given pair does not exist in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 125 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"]);\n"
"\n"
"$collection->doesntContain('product', 'Bookcase');\n"
"\n"
"// true\n"
msgstr ""

#: docs/8.x/collections.md:block 126 (paragraph)
msgid "The `doesntContain` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value."
msgstr ""

#: docs/8.x/collections.md:block 127 (paragraph)
msgid "<a name=\"method-dump\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 128 (header)
msgid "`dump()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 129 (paragraph)
msgid "The `dump` method dumps the collection's items:"
msgstr ""

#: docs/8.x/collections.md:block 130 (code)
msgid ""
"$collection = collect(['John Doe', 'Jane Doe']);\n"
"\n"
"$collection->dump();\n"
"\n"
"/*\n"
"    Collection {\n"
"        #items: array:2 [\n"
"            0 => \"John Doe\"\n"
"            1 => \"Jane Doe\"\n"
"        ]\n"
"    }\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 131 (paragraph)
msgid "If you want to stop executing the script after dumping the collection, use the [`dd`](#method-dd) method instead."
msgstr ""

#: docs/8.x/collections.md:block 132 (paragraph)
msgid "<a name=\"method-duplicates\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 133 (header)
msgid "`duplicates()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 134 (paragraph)
msgid "The `duplicates` method retrieves and returns duplicate values from the collection:"
msgstr ""

#: docs/8.x/collections.md:block 135 (code)
msgid ""
"$collection = collect(['a', 'b', 'a', 'c', 'b']);\n"
"\n"
"$collection->duplicates();\n"
"\n"
"// [2 => 'a', 4 => 'b']\n"
msgstr ""

#: docs/8.x/collections.md:block 136 (paragraph)
msgid "If the collection contains arrays or objects, you can pass the key of the attributes that you wish to check for duplicate values:"
msgstr ""

#: docs/8.x/collections.md:block 137 (code)
msgid ""
"$employees = collect([\n"
"    ['email' => 'abigail@example.com', 'position' => 'Developer'],\n"
"    ['email' => 'james@example.com', 'position' => 'Designer'],\n"
"    ['email' => 'victoria@example.com', 'position' => 'Developer'],\n"
"]);\n"
"\n"
"$employees->duplicates('position');\n"
"\n"
"// [2 => 'Developer']\n"
msgstr ""

#: docs/8.x/collections.md:block 138 (paragraph)
msgid "<a name=\"method-duplicatesstrict\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 139 (header)
msgid "`duplicatesStrict()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 140 (paragraph)
msgid "This method has the same signature as the [`duplicates`](#method-duplicates) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 141 (paragraph)
msgid "<a name=\"method-each\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 142 (header)
msgid "`each()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 143 (paragraph)
msgid "The `each` method iterates over the items in the collection and passes each item to a closure:"
msgstr ""

#: docs/8.x/collections.md:block 144 (code)
msgid ""
"$collection->each(function ($item, $key) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 145 (paragraph)
msgid "If you would like to stop iterating through the items, you may return `false` from your closure:"
msgstr ""

#: docs/8.x/collections.md:block 146 (code)
msgid ""
"$collection->each(function ($item, $key) {\n"
"    if (/* condition */) {\n"
"        return false;\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 147 (paragraph)
msgid "<a name=\"method-eachspread\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 148 (header)
msgid "`eachSpread()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 149 (paragraph)
msgid "The `eachSpread` method iterates over the collection's items, passing each nested item value into the given callback:"
msgstr ""

#: docs/8.x/collections.md:block 150 (code)
msgid ""
"$collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n"
"\n"
"$collection->eachSpread(function ($name, $age) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 151 (paragraph)
msgid "You may stop iterating through the items by returning `false` from the callback:"
msgstr ""

#: docs/8.x/collections.md:block 152 (code)
msgid ""
"$collection->eachSpread(function ($name, $age) {\n"
"    return false;\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 153 (paragraph)
msgid "<a name=\"method-every\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 154 (header)
msgid "`every()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 155 (paragraph)
msgid "The `every` method may be used to verify that all elements of a collection pass a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 156 (code)
msgid ""
"collect([1, 2, 3, 4])->every(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 157 (paragraph)
msgid "If the collection is empty, the `every` method will return true:"
msgstr ""

#: docs/8.x/collections.md:block 158 (code)
msgid ""
"$collection = collect([]);\n"
"\n"
"$collection->every(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// true\n"
msgstr ""

#: docs/8.x/collections.md:block 159 (paragraph)
msgid "<a name=\"method-except\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 160 (header)
msgid "`except()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 161 (paragraph)
msgid "The `except` method returns all items in the collection except for those with the specified keys:"
msgstr ""

#: docs/8.x/collections.md:block 162 (code)
msgid ""
"$collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);\n"
"\n"
"$filtered = $collection->except(['price', 'discount']);\n"
"\n"
"$filtered->all();\n"
"\n"
"// ['product_id' => 1]\n"
msgstr ""

#: docs/8.x/collections.md:block 163 (paragraph)
msgid "For the inverse of `except`, see the [only](#method-only) method."
msgstr ""

#: docs/8.x/collections.md:block 164 (quote)
msgid "{tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-except)."
msgstr ""

#: docs/8.x/collections.md:block 165 (paragraph)
msgid "<a name=\"method-filter\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 166 (header)
msgid "`filter()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 167 (paragraph)
msgid "The `filter` method filters the collection using the given callback, keeping only those items that pass a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 168 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$filtered = $collection->filter(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"$filtered->all();\n"
"\n"
"// [3, 4]\n"
msgstr ""

#: docs/8.x/collections.md:block 169 (paragraph)
msgid "If no callback is supplied, all entries of the collection that are equivalent to `false` will be removed:"
msgstr ""

#: docs/8.x/collections.md:block 170 (code)
msgid ""
"$collection = collect([1, 2, 3, null, false, '', 0, []]);\n"
"\n"
"$collection->filter()->all();\n"
"\n"
"// [1, 2, 3]\n"
msgstr ""

#: docs/8.x/collections.md:block 171 (paragraph)
msgid "For the inverse of `filter`, see the [reject](#method-reject) method."
msgstr ""

#: docs/8.x/collections.md:block 172 (paragraph)
msgid "<a name=\"method-first\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 173 (header)
msgid "`first()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 174 (paragraph)
msgid "The `first` method returns the first element in the collection that passes a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 175 (code)
msgid ""
"collect([1, 2, 3, 4])->first(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"// 3\n"
msgstr ""

#: docs/8.x/collections.md:block 176 (paragraph)
msgid "You may also call the `first` method with no arguments to get the first element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

#: docs/8.x/collections.md:block 177 (code)
msgid ""
"collect([1, 2, 3, 4])->first();\n"
"\n"
"// 1\n"
msgstr ""

#: docs/8.x/collections.md:block 178 (paragraph)
msgid "<a name=\"method-first-where\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 179 (header)
msgid "`firstWhere()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 180 (paragraph)
msgid "The `firstWhere` method returns the first element in the collection with the given key / value pair:"
msgstr ""

#: docs/8.x/collections.md:block 181 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Regena', 'age' => null],\n"
"    ['name' => 'Linda', 'age' => 14],\n"
"    ['name' => 'Diego', 'age' => 23],\n"
"    ['name' => 'Linda', 'age' => 84],\n"
"]);\n"
"\n"
"$collection->firstWhere('name', 'Linda');\n"
"\n"
"// ['name' => 'Linda', 'age' => 14]\n"
msgstr ""

#: docs/8.x/collections.md:block 182 (paragraph)
msgid "You may also call the `firstWhere` method with a comparison operator:"
msgstr ""

#: docs/8.x/collections.md:block 183 (code)
msgid ""
"$collection->firstWhere('age', '>=', 18);\n"
"\n"
"// ['name' => 'Diego', 'age' => 23]\n"
msgstr ""

#: docs/8.x/collections.md:block 184 (paragraph)
msgid "Like the [where](#method-where) method, you may pass one argument to the `firstWhere` method. In this scenario, the `firstWhere` method will return the first item where the given item key's value is \"truthy\":"
msgstr ""

#: docs/8.x/collections.md:block 185 (code)
msgid ""
"$collection->firstWhere('age');\n"
"\n"
"// ['name' => 'Linda', 'age' => 14]\n"
msgstr ""

#: docs/8.x/collections.md:block 186 (paragraph)
msgid "<a name=\"method-flatmap\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 187 (header)
msgid "`flatMap()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 188 (paragraph)
msgid "The `flatMap` method iterates through the collection and passes each value to the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items. Then, the array is flattened by one level:"
msgstr ""

#: docs/8.x/collections.md:block 189 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Sally'],\n"
"    ['school' => 'Arkansas'],\n"
"    ['age' => 28]\n"
"]);\n"
"\n"
"$flattened = $collection->flatMap(function ($values) {\n"
"    return array_map('strtoupper', $values);\n"
"});\n"
"\n"
"$flattened->all();\n"
"\n"
"// ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];\n"
msgstr ""

#: docs/8.x/collections.md:block 190 (paragraph)
msgid "<a name=\"method-flatten\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 191 (header)
msgid "`flatten()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 192 (paragraph)
msgid "The `flatten` method flattens a multi-dimensional collection into a single dimension:"
msgstr ""

#: docs/8.x/collections.md:block 193 (code)
msgid ""
"$collection = collect([\n"
"    'name' => 'taylor',\n"
"    'languages' => [\n"
"        'php', 'javascript'\n"
"    ]\n"
"]);\n"
"\n"
"$flattened = $collection->flatten();\n"
"\n"
"$flattened->all();\n"
"\n"
"// ['taylor', 'php', 'javascript'];\n"
msgstr ""

#: docs/8.x/collections.md:block 194 (paragraph)
msgid "If necessary, you may pass the `flatten` method a \"depth\" argument:"
msgstr ""

#: docs/8.x/collections.md:block 195 (code)
msgid ""
"$collection = collect([\n"
"    'Apple' => [\n"
"        [\n"
"            'name' => 'iPhone 6S',\n"
"            'brand' => 'Apple'\n"
"        ],\n"
"    ],\n"
"    'Samsung' => [\n"
"        [\n"
"            'name' => 'Galaxy S7',\n"
"            'brand' => 'Samsung'\n"
"        ],\n"
"    ],\n"
"]);\n"
"\n"
"$products = $collection->flatten(1);\n"
"\n"
"$products->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6S', 'brand' => 'Apple'],\n"
"        ['name' => 'Galaxy S7', 'brand' => 'Samsung'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 196 (paragraph)
msgid "In this example, calling `flatten` without providing the depth would have also flattened the nested arrays, resulting in `['iPhone 6S', 'Apple', 'Galaxy S7', 'Samsung']`. Providing a depth allows you to specify the number of levels nested arrays will be flattened."
msgstr ""

#: docs/8.x/collections.md:block 197 (paragraph)
msgid "<a name=\"method-flip\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 198 (header)
msgid "`flip()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 199 (paragraph)
msgid "The `flip` method swaps the collection's keys with their corresponding values:"
msgstr ""

#: docs/8.x/collections.md:block 200 (code)
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$flipped = $collection->flip();\n"
"\n"
"$flipped->all();\n"
"\n"
"// ['taylor' => 'name', 'laravel' => 'framework']\n"
msgstr ""

#: docs/8.x/collections.md:block 201 (paragraph)
msgid "<a name=\"method-forget\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 202 (header)
msgid "`forget()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 203 (paragraph)
msgid "The `forget` method removes an item from the collection by its key:"
msgstr ""

#: docs/8.x/collections.md:block 204 (code)
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$collection->forget('name');\n"
"\n"
"$collection->all();\n"
"\n"
"// ['framework' => 'laravel']\n"
msgstr ""

#: docs/8.x/collections.md:block 205 (quote)
msgid "{note} Unlike most other collection methods, `forget` does not return a new modified collection; it modifies the collection it is called on."
msgstr ""

#: docs/8.x/collections.md:block 206 (paragraph)
msgid "<a name=\"method-forpage\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 207 (header)
msgid "`forPage()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 208 (paragraph)
msgid "The `forPage` method returns a new collection containing the items that would be present on a given page number. The method accepts the page number as its first argument and the number of items to show per page as its second argument:"
msgstr ""

#: docs/8.x/collections.md:block 209 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"\n"
"$chunk = $collection->forPage(2, 3);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [4, 5, 6]\n"
msgstr ""

#: docs/8.x/collections.md:block 210 (paragraph)
msgid "<a name=\"method-get\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 211 (header)
msgid "`get()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 212 (paragraph)
msgid "The `get` method returns the item at a given key. If the key does not exist, `null` is returned:"
msgstr ""

#: docs/8.x/collections.md:block 213 (code)
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$value = $collection->get('name');\n"
"\n"
"// taylor\n"
msgstr ""

#: docs/8.x/collections.md:block 214 (paragraph)
msgid "You may optionally pass a default value as the second argument:"
msgstr ""

#: docs/8.x/collections.md:block 215 (code)
msgid ""
"$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
"\n"
"$value = $collection->get('age', 34);\n"
"\n"
"// 34\n"
msgstr ""

#: docs/8.x/collections.md:block 216 (paragraph)
msgid "You may even pass a callback as the method's default value. The result of the callback will be returned if the specified key does not exist:"
msgstr ""

#: docs/8.x/collections.md:block 217 (code)
msgid ""
"$collection->get('email', function () {\n"
"    return 'taylor@example.com';\n"
"});\n"
"\n"
"// taylor@example.com\n"
msgstr ""

#: docs/8.x/collections.md:block 218 (paragraph)
msgid "<a name=\"method-groupby\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 219 (header)
msgid "`groupBy()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 220 (paragraph)
msgid "The `groupBy` method groups the collection's items by a given key:"
msgstr ""

#: docs/8.x/collections.md:block 221 (code)
msgid ""
"$collection = collect([\n"
"    ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"    ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"    ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"]);\n"
"\n"
"$grouped = $collection->groupBy('account_id');\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'account-x10' => [\n"
"            ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ],\n"
"        'account-x11' => [\n"
"            ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"        ],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 222 (paragraph)
msgid "Instead of passing a string `key`, you may pass a callback. The callback should return the value you wish to key the group by:"
msgstr ""

#: docs/8.x/collections.md:block 223 (code)
msgid ""
"$grouped = $collection->groupBy(function ($item, $key) {\n"
"    return substr($item['account_id'], -3);\n"
"});\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'x10' => [\n"
"            ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ],\n"
"        'x11' => [\n"
"            ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"        ],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 224 (paragraph)
msgid "Multiple grouping criteria may be passed as an array. Each array element will be applied to the corresponding level within a multi-dimensional array:"
msgstr ""

#: docs/8.x/collections.md:block 225 (code)
msgid ""
"$data = new Collection([\n"
"    10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"    20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"    30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"    40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"]);\n"
"\n"
"$result = $data->groupBy(['skill', function ($item) {\n"
"    return $item['roles'];\n"
"}], $preserveKeys = true);\n"
"\n"
"/*\n"
"[\n"
"    1 => [\n"
"        'Role_1' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        ],\n"
"        'Role_3' => [\n"
"            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        ],\n"
"    ],\n"
"    2 => [\n"
"        'Role_1' => [\n"
"            30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        ],\n"
"        'Role_2' => [\n"
"            40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"        ],\n"
"    ],\n"
"];\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 226 (paragraph)
msgid "<a name=\"method-has\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 227 (header)
msgid "`has()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 228 (paragraph)
msgid "The `has` method determines if a given key exists in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 229 (code)
msgid ""
"$collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n"
"\n"
"$collection->has('product');\n"
"\n"
"// true\n"
"\n"
"$collection->has(['product', 'amount']);\n"
"\n"
"// true\n"
"\n"
"$collection->has(['amount', 'price']);\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 230 (paragraph)
msgid "<a name=\"method-implode\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 231 (header)
msgid "`implode()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 232 (paragraph)
msgid "The `implode` method joins items in a collection. Its arguments depend on the type of items in the collection. If the collection contains arrays or objects, you should pass the key of the attributes you wish to join, and the \"glue\" string you wish to place between the values:"
msgstr ""

#: docs/8.x/collections.md:block 233 (code)
msgid ""
"$collection = collect([\n"
"    ['account_id' => 1, 'product' => 'Desk'],\n"
"    ['account_id' => 2, 'product' => 'Chair'],\n"
"]);\n"
"\n"
"$collection->implode('product', ', ');\n"
"\n"
"// Desk, Chair\n"
msgstr ""

#: docs/8.x/collections.md:block 234 (paragraph)
msgid "If the collection contains simple strings or numeric values, you should pass the \"glue\" as the only argument to the method:"
msgstr ""

#: docs/8.x/collections.md:block 235 (code)
msgid ""
"collect([1, 2, 3, 4, 5])->implode('-');\n"
"\n"
"// '1-2-3-4-5'\n"
msgstr ""

#: docs/8.x/collections.md:block 236 (paragraph)
msgid "<a name=\"method-intersect\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 237 (header)
msgid "`intersect()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 238 (paragraph)
msgid "The `intersect` method removes any values from the original collection that are not present in the given `array` or collection. The resulting collection will preserve the original collection's keys:"
msgstr ""

#: docs/8.x/collections.md:block 239 (code)
msgid ""
"$collection = collect(['Desk', 'Sofa', 'Chair']);\n"
"\n"
"$intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n"
"\n"
"$intersect->all();\n"
"\n"
"// [0 => 'Desk', 2 => 'Chair']\n"
msgstr ""

#: docs/8.x/collections.md:block 240 (quote)
msgid "{tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-intersect)."
msgstr ""

#: docs/8.x/collections.md:block 241 (paragraph)
msgid "<a name=\"method-intersectbykeys\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 242 (header)
msgid "`intersectByKeys()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 243 (paragraph)
msgid "The `intersectByKeys` method removes any keys and their corresponding values from the original collection that are not present in the given `array` or collection:"
msgstr ""

#: docs/8.x/collections.md:block 244 (code)
msgid ""
"$collection = collect([\n"
"    'serial' => 'UX301', 'type' => 'screen', 'year' => 2009,\n"
"]);\n"
"\n"
"$intersect = $collection->intersectByKeys([\n"
"    'reference' => 'UX404', 'type' => 'tab', 'year' => 2011,\n"
"]);\n"
"\n"
"$intersect->all();\n"
"\n"
"// ['type' => 'screen', 'year' => 2009]\n"
msgstr ""

#: docs/8.x/collections.md:block 245 (paragraph)
msgid "<a name=\"method-isempty\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 246 (header)
msgid "`isEmpty()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 247 (paragraph)
msgid "The `isEmpty` method returns `true` if the collection is empty; otherwise, `false` is returned:"
msgstr ""

#: docs/8.x/collections.md:block 248 (code)
msgid ""
"collect([])->isEmpty();\n"
"\n"
"// true\n"
msgstr ""

#: docs/8.x/collections.md:block 249 (paragraph)
msgid "<a name=\"method-isnotempty\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 250 (header)
msgid "`isNotEmpty()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 251 (paragraph)
msgid "The `isNotEmpty` method returns `true` if the collection is not empty; otherwise, `false` is returned:"
msgstr ""

#: docs/8.x/collections.md:block 252 (code)
msgid ""
"collect([])->isNotEmpty();\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 253 (paragraph)
msgid "<a name=\"method-join\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 254 (header)
msgid "`join()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 255 (paragraph)
msgid "The `join` method joins the collection's values with a string. Using this method's second argument, you may also specify how the final element should be appended to the string:"
msgstr ""

#: docs/8.x/collections.md:block 256 (code)
msgid ""
"collect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\n"
"collect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\n"
"collect(['a', 'b'])->join(', ', ' and '); // 'a and b'\n"
"collect(['a'])->join(', ', ' and '); // 'a'\n"
"collect([])->join(', ', ' and '); // ''\n"
msgstr ""

#: docs/8.x/collections.md:block 257 (paragraph)
msgid "<a name=\"method-keyby\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 258 (header)
msgid "`keyBy()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 259 (paragraph)
msgid "The `keyBy` method keys the collection by the given key. If multiple items have the same key, only the last one will appear in the new collection:"
msgstr ""

#: docs/8.x/collections.md:block 260 (code)
msgid ""
"$collection = collect([\n"
"    ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"]);\n"
"\n"
"$keyed = $collection->keyBy('product_id');\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 261 (paragraph)
msgid "You may also pass a callback to the method. The callback should return the value to key the collection by:"
msgstr ""

#: docs/8.x/collections.md:block 262 (code)
msgid ""
"$keyed = $collection->keyBy(function ($item) {\n"
"    return strtoupper($item['product_id']);\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 263 (paragraph)
msgid "<a name=\"method-keys\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 264 (header)
msgid "`keys()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 265 (paragraph)
msgid "The `keys` method returns all of the collection's keys:"
msgstr ""

#: docs/8.x/collections.md:block 266 (code)
msgid ""
"$collection = collect([\n"
"    'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"]);\n"
"\n"
"$keys = $collection->keys();\n"
"\n"
"$keys->all();\n"
"\n"
"// ['prod-100', 'prod-200']\n"
msgstr ""

#: docs/8.x/collections.md:block 267 (paragraph)
msgid "<a name=\"method-last\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 268 (header)
msgid "`last()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 269 (paragraph)
msgid "The `last` method returns the last element in the collection that passes a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 270 (code)
msgid ""
"collect([1, 2, 3, 4])->last(function ($value, $key) {\n"
"    return $value < 3;\n"
"});\n"
"\n"
"// 2\n"
msgstr ""

#: docs/8.x/collections.md:block 271 (paragraph)
msgid "You may also call the `last` method with no arguments to get the last element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

#: docs/8.x/collections.md:block 272 (code)
msgid ""
"collect([1, 2, 3, 4])->last();\n"
"\n"
"// 4\n"
msgstr ""

#: docs/8.x/collections.md:block 273 (paragraph)
msgid "<a name=\"method-macro\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 274 (header)
msgid "`macro()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 275 (paragraph)
msgid "The static `macro` method allows you to add methods to the `Collection` class at run time. Refer to the documentation on [extending collections](#extending-collections) for more information."
msgstr ""

#: docs/8.x/collections.md:block 276 (paragraph)
msgid "<a name=\"method-make\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 277 (header)
msgid "`make()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 278 (paragraph)
msgid "The static `make` method creates a new collection instance. See the [Creating Collections](#creating-collections) section."
msgstr ""

#: docs/8.x/collections.md:block 279 (paragraph)
msgid "<a name=\"method-map\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 280 (header)
msgid "`map()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 281 (paragraph)
msgid "The `map` method iterates through the collection and passes each value to the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

#: docs/8.x/collections.md:block 282 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$multiplied = $collection->map(function ($item, $key) {\n"
"    return $item * 2;\n"
"});\n"
"\n"
"$multiplied->all();\n"
"\n"
"// [2, 4, 6, 8, 10]\n"
msgstr ""

#: docs/8.x/collections.md:block 283 (quote)
msgid "{note} Like most other collection methods, `map` returns a new collection instance; it does not modify the collection it is called on. If you want to transform the original collection, use the [`transform`](#method-transform) method."
msgstr ""

#: docs/8.x/collections.md:block 284 (paragraph)
msgid "<a name=\"method-mapinto\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 285 (header)
msgid "`mapInto()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 286 (paragraph)
msgid "The `mapInto()` method iterates over the collection, creating a new instance of the given class by passing the value into the constructor:"
msgstr ""

#: docs/8.x/collections.md:block 287 (code)
msgid ""
"class Currency\n"
"{\n"
"    /**\n"
"     * Create a new currency instance.\n"
"     *\n"
"     * @param  string  $code\n"
"     * @return void\n"
"     */\n"
"    function __construct(string $code)\n"
"    {\n"
"        $this->code = $code;\n"
"    }\n"
"}\n"
"\n"
"$collection = collect(['USD', 'EUR', 'GBP']);\n"
"\n"
"$currencies = $collection->mapInto(Currency::class);\n"
"\n"
"$currencies->all();\n"
"\n"
"// [Currency('USD'), Currency('EUR'), Currency('GBP')]\n"
msgstr ""

#: docs/8.x/collections.md:block 288 (paragraph)
msgid "<a name=\"method-mapspread\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 289 (header)
msgid "`mapSpread()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 290 (paragraph)
msgid "The `mapSpread` method iterates over the collection's items, passing each nested item value into the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

#: docs/8.x/collections.md:block 291 (code)
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"\n"
"$chunks = $collection->chunk(2);\n"
"\n"
"$sequence = $chunks->mapSpread(function ($even, $odd) {\n"
"    return $even + $odd;\n"
"});\n"
"\n"
"$sequence->all();\n"
"\n"
"// [1, 5, 9, 13, 17]\n"
msgstr ""

#: docs/8.x/collections.md:block 292 (paragraph)
msgid "<a name=\"method-maptogroups\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 293 (header)
msgid "`mapToGroups()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 294 (paragraph)
msgid "The `mapToGroups` method groups the collection's items by the given closure. The closure should return an associative array containing a single key / value pair, thus forming a new collection of grouped values:"
msgstr ""

#: docs/8.x/collections.md:block 295 (code)
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'John Doe',\n"
"        'department' => 'Sales',\n"
"    ],\n"
"    [\n"
"        'name' => 'Jane Doe',\n"
"        'department' => 'Sales',\n"
"    ],\n"
"    [\n"
"        'name' => 'Johnny Doe',\n"
"        'department' => 'Marketing',\n"
"    ]\n"
"]);\n"
"\n"
"$grouped = $collection->mapToGroups(function ($item, $key) {\n"
"    return [$item['department'] => $item['name']];\n"
"});\n"
"\n"
"$grouped->all();\n"
"\n"
"/*\n"
"    [\n"
"        'Sales' => ['John Doe', 'Jane Doe'],\n"
"        'Marketing' => ['Johnny Doe'],\n"
"    ]\n"
"*/\n"
"\n"
"$grouped->get('Sales')->all();\n"
"\n"
"// ['John Doe', 'Jane Doe']\n"
msgstr ""

#: docs/8.x/collections.md:block 296 (paragraph)
msgid "<a name=\"method-mapwithkeys\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 297 (header)
msgid "`mapWithKeys()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 298 (paragraph)
msgid "The `mapWithKeys` method iterates through the collection and passes each value to the given callback. The callback should return an associative array containing a single key / value pair:"
msgstr ""

#: docs/8.x/collections.md:block 299 (code)
msgid ""
"$collection = collect([\n"
"    [\n"
"        'name' => 'John',\n"
"        'department' => 'Sales',\n"
"        'email' => 'john@example.com',\n"
"    ],\n"
"    [\n"
"        'name' => 'Jane',\n"
"        'department' => 'Marketing',\n"
"        'email' => 'jane@example.com',\n"
"    ]\n"
"]);\n"
"\n"
"$keyed = $collection->mapWithKeys(function ($item, $key) {\n"
"    return [$item['email'] => $item['name']];\n"
"});\n"
"\n"
"$keyed->all();\n"
"\n"
"/*\n"
"    [\n"
"        'john@example.com' => 'John',\n"
"        'jane@example.com' => 'Jane',\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 300 (paragraph)
msgid "<a name=\"method-max\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 301 (header)
msgid "`max()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 302 (paragraph)
msgid "The `max` method returns the maximum value of a given key:"
msgstr ""

#: docs/8.x/collections.md:block 303 (code)
msgid ""
"$max = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 20]\n"
"])->max('foo');\n"
"\n"
"// 20\n"
"\n"
"$max = collect([1, 2, 3, 4, 5])->max();\n"
"\n"
"// 5\n"
msgstr ""

#: docs/8.x/collections.md:block 304 (paragraph)
msgid "<a name=\"method-median\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 305 (header)
msgid "`median()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 306 (paragraph)
msgid "The `median` method returns the [median value](https://en.wikipedia.org/wiki/Median) of a given key:"
msgstr ""

#: docs/8.x/collections.md:block 307 (code)
msgid ""
"$median = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 10],\n"
"    ['foo' => 20],\n"
"    ['foo' => 40]\n"
"])->median('foo');\n"
"\n"
"// 15\n"
"\n"
"$median = collect([1, 1, 2, 4])->median();\n"
"\n"
"// 1.5\n"
msgstr ""

#: docs/8.x/collections.md:block 308 (paragraph)
msgid "<a name=\"method-merge\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 309 (header)
msgid "`merge()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 310 (paragraph)
msgid "The `merge` method merges the given array or collection with the original collection. If a string key in the given items matches a string key in the original collection, the given items's value will overwrite the value in the original collection:"
msgstr ""

#: docs/8.x/collections.md:block 311 (code)
msgid ""
"$collection = collect(['product_id' => 1, 'price' => 100]);\n"
"\n"
"$merged = $collection->merge(['price' => 200, 'discount' => false]);\n"
"\n"
"$merged->all();\n"
"\n"
"// ['product_id' => 1, 'price' => 200, 'discount' => false]\n"
msgstr ""

#: docs/8.x/collections.md:block 312 (paragraph)
msgid "If the given items's keys are numeric, the values will be appended to the end of the collection:"
msgstr ""

#: docs/8.x/collections.md:block 313 (code)
msgid ""
"$collection = collect(['Desk', 'Chair']);\n"
"\n"
"$merged = $collection->merge(['Bookcase', 'Door']);\n"
"\n"
"$merged->all();\n"
"\n"
"// ['Desk', 'Chair', 'Bookcase', 'Door']\n"
msgstr ""

#: docs/8.x/collections.md:block 314 (paragraph)
msgid "<a name=\"method-mergerecursive\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 315 (header)
msgid "`mergeRecursive()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 316 (paragraph)
msgid "The `mergeRecursive` method merges the given array or collection recursively with the original collection. If a string key in the given items matches a string key in the original collection, then the values for these keys are merged together into an array, and this is done recursively:"
msgstr ""

#: docs/8.x/collections.md:block 317 (code)
msgid ""
"$collection = collect(['product_id' => 1, 'price' => 100]);\n"
"\n"
"$merged = $collection->mergeRecursive([\n"
"    'product_id' => 2,\n"
"    'price' => 200,\n"
"    'discount' => false\n"
"]);\n"
"\n"
"$merged->all();\n"
"\n"
"// ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n"
msgstr ""

#: docs/8.x/collections.md:block 318 (paragraph)
msgid "<a name=\"method-min\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 319 (header)
msgid "`min()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 320 (paragraph)
msgid "The `min` method returns the minimum value of a given key:"
msgstr ""

#: docs/8.x/collections.md:block 321 (code)
msgid ""
"$min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n"
"\n"
"// 10\n"
"\n"
"$min = collect([1, 2, 3, 4, 5])->min();\n"
"\n"
"// 1\n"
msgstr ""

#: docs/8.x/collections.md:block 322 (paragraph)
msgid "<a name=\"method-mode\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 323 (header)
msgid "`mode()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 324 (paragraph)
msgid "The `mode` method returns the [mode value](https://en.wikipedia.org/wiki/Mode_(statistics)) of a given key:"
msgstr ""

#: docs/8.x/collections.md:block 325 (code)
msgid ""
"$mode = collect([\n"
"    ['foo' => 10],\n"
"    ['foo' => 10],\n"
"    ['foo' => 20],\n"
"    ['foo' => 40]\n"
"])->mode('foo');\n"
"\n"
"// [10]\n"
"\n"
"$mode = collect([1, 1, 2, 4])->mode();\n"
"\n"
"// [1]\n"
"\n"
"$mode = collect([1, 1, 2, 2])->mode();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 326 (paragraph)
msgid "<a name=\"method-nth\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 327 (header)
msgid "`nth()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 328 (paragraph)
msgid "The `nth` method creates a new collection consisting of every n-th element:"
msgstr ""

#: docs/8.x/collections.md:block 329 (code)
msgid ""
"$collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n"
"\n"
"$collection->nth(4);\n"
"\n"
"// ['a', 'e']\n"
msgstr ""

#: docs/8.x/collections.md:block 330 (paragraph)
msgid "You may optionally pass a starting offset as the second argument:"
msgstr ""

#: docs/8.x/collections.md:block 331 (code)
msgid ""
"$collection->nth(4, 1);\n"
"\n"
"// ['b', 'f']\n"
msgstr ""

#: docs/8.x/collections.md:block 332 (paragraph)
msgid "<a name=\"method-only\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 333 (header)
msgid "`only()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 334 (paragraph)
msgid "The `only` method returns the items in the collection with the specified keys:"
msgstr ""

#: docs/8.x/collections.md:block 335 (code)
msgid ""
"$collection = collect([\n"
"    'product_id' => 1,\n"
"    'name' => 'Desk',\n"
"    'price' => 100,\n"
"    'discount' => false\n"
"]);\n"
"\n"
"$filtered = $collection->only(['product_id', 'name']);\n"
"\n"
"$filtered->all();\n"
"\n"
"// ['product_id' => 1, 'name' => 'Desk']\n"
msgstr ""

#: docs/8.x/collections.md:block 336 (paragraph)
msgid "For the inverse of `only`, see the [except](#method-except) method."
msgstr ""

#: docs/8.x/collections.md:block 337 (quote)
msgid "{tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-only)."
msgstr ""

#: docs/8.x/collections.md:block 338 (paragraph)
msgid "<a name=\"method-pad\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 339 (header)
msgid "`pad()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 340 (paragraph)
msgid "The `pad` method will fill the array with the given value until the array reaches the specified size. This method behaves like the [array_pad](https://secure.php.net/manual/en/function.array-pad.php) PHP function."
msgstr ""

#: docs/8.x/collections.md:block 341 (paragraph)
msgid "To pad to the left, you should specify a negative size. No padding will take place if the absolute value of the given size is less than or equal to the length of the array:"
msgstr ""

#: docs/8.x/collections.md:block 342 (code)
msgid ""
"$collection = collect(['A', 'B', 'C']);\n"
"\n"
"$filtered = $collection->pad(5, 0);\n"
"\n"
"$filtered->all();\n"
"\n"
"// ['A', 'B', 'C', 0, 0]\n"
"\n"
"$filtered = $collection->pad(-5, 0);\n"
"\n"
"$filtered->all();\n"
"\n"
"// [0, 0, 'A', 'B', 'C']\n"
msgstr ""

#: docs/8.x/collections.md:block 343 (paragraph)
msgid "<a name=\"method-partition\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 344 (header)
msgid "`partition()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 345 (paragraph)
msgid "The `partition` method may be combined with PHP array destructuring to separate elements that pass a given truth test from those that do not:"
msgstr ""

#: docs/8.x/collections.md:block 346 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6]);\n"
"\n"
"[$underThree, $equalOrAboveThree] = $collection->partition(function ($i) {\n"
"    return $i < 3;\n"
"});\n"
"\n"
"$underThree->all();\n"
"\n"
"// [1, 2]\n"
"\n"
"$equalOrAboveThree->all();\n"
"\n"
"// [3, 4, 5, 6]\n"
msgstr ""

#: docs/8.x/collections.md:block 347 (paragraph)
msgid "<a name=\"method-pipe\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 348 (header)
msgid "`pipe()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 349 (paragraph)
msgid "The `pipe` method passes the collection to the given closure and returns the result of the executed closure:"
msgstr ""

#: docs/8.x/collections.md:block 350 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$piped = $collection->pipe(function ($collection) {\n"
"    return $collection->sum();\n"
"});\n"
"\n"
"// 6\n"
msgstr ""

#: docs/8.x/collections.md:block 351 (paragraph)
msgid "<a name=\"method-pipeinto\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 352 (header)
msgid "`pipeInto()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 353 (paragraph)
msgid "The `pipeInto` method creates a new instance of the given class and passes the collection into the constructor:"
msgstr ""

#: docs/8.x/collections.md:block 354 (code)
msgid ""
"class ResourceCollection\n"
"{\n"
"    /**\n"
"     * The Collection instance.\n"
"     */\n"
"    public $collection;\n"
"\n"
"    /**\n"
"     * Create a new ResourceCollection instance.\n"
"     *\n"
"     * @param  Collection  $collection\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Collection $collection)\n"
"    {\n"
"        $this->collection = $collection;\n"
"    }\n"
"}\n"
"\n"
"$collection = collect([1, 2, 3]);\n"
"\n"
"$resource = $collection->pipeInto(ResourceCollection::class);\n"
"\n"
"$resource->collection->all();\n"
"\n"
"// [1, 2, 3]\n"
msgstr ""

#: docs/8.x/collections.md:block 355 (paragraph)
msgid "<a name=\"method-pipethrough\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 356 (header)
msgid "`pipeThrough()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 357 (paragraph)
msgid "The `pipeThrough` method passes the collection to the given array of closures and returns the result of the executed closures:"
msgstr ""

#: docs/8.x/collections.md:block 358 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$result = $collection->pipeThrough([\n"
"    function ($collection) {\n"
"        return $collection->merge([4, 5]);\n"
"    },\n"
"    function ($collection) {\n"
"        return $collection->sum();\n"
"    },\n"
"]);\n"
"\n"
"// 15\n"
msgstr ""

#: docs/8.x/collections.md:block 359 (paragraph)
msgid "<a name=\"method-pluck\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 360 (header)
msgid "`pluck()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 361 (paragraph)
msgid "The `pluck` method retrieves all of the values for a given key:"
msgstr ""

#: docs/8.x/collections.md:block 362 (code)
msgid ""
"$collection = collect([\n"
"    ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"    ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('name');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['Desk', 'Chair']\n"
msgstr ""

#: docs/8.x/collections.md:block 363 (paragraph)
msgid "You may also specify how you wish the resulting collection to be keyed:"
msgstr ""

#: docs/8.x/collections.md:block 364 (code)
msgid ""
"$plucked = $collection->pluck('name', 'product_id');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n"
msgstr ""

#: docs/8.x/collections.md:block 365 (paragraph)
msgid "The `pluck` method also supports retrieving nested values using \"dot\" notation:"
msgstr ""

#: docs/8.x/collections.md:block 366 (code)
msgid ""
"$collection = collect([\n"
"    [\n"
"        'speakers' => [\n"
"            'first_day' => ['Rosa', 'Judith'],\n"
"            'second_day' => ['Angela', 'Kathleen'],\n"
"        ],\n"
"    ],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('speakers.first_day');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['Rosa', 'Judith']\n"
msgstr ""

#: docs/8.x/collections.md:block 367 (paragraph)
msgid "If duplicate keys exist, the last matching element will be inserted into the plucked collection:"
msgstr ""

#: docs/8.x/collections.md:block 368 (code)
msgid ""
"$collection = collect([\n"
"    ['brand' => 'Tesla',  'color' => 'red'],\n"
"    ['brand' => 'Pagani', 'color' => 'white'],\n"
"    ['brand' => 'Tesla',  'color' => 'black'],\n"
"    ['brand' => 'Pagani', 'color' => 'orange'],\n"
"]);\n"
"\n"
"$plucked = $collection->pluck('color', 'brand');\n"
"\n"
"$plucked->all();\n"
"\n"
"// ['Tesla' => 'black', 'Pagani' => 'orange']\n"
msgstr ""

#: docs/8.x/collections.md:block 369 (paragraph)
msgid "<a name=\"method-pop\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 370 (header)
msgid "`pop()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 371 (paragraph)
msgid "The `pop` method removes and returns the last item from the collection:"
msgstr ""

#: docs/8.x/collections.md:block 372 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->pop();\n"
"\n"
"// 5\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4]\n"
msgstr ""

#: docs/8.x/collections.md:block 373 (paragraph)
msgid "You may pass an integer to the `pop` method to remove and return multiple items from the end of a collection:"
msgstr ""

#: docs/8.x/collections.md:block 374 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->pop(3);\n"
"\n"
"// collect([5, 4, 3])\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 375 (paragraph)
msgid "<a name=\"method-prepend\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 376 (header)
msgid "`prepend()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 377 (paragraph)
msgid "The `prepend` method adds an item to the beginning of the collection:"
msgstr ""

#: docs/8.x/collections.md:block 378 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->prepend(0);\n"
"\n"
"$collection->all();\n"
"\n"
"// [0, 1, 2, 3, 4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 379 (paragraph)
msgid "You may also pass a second argument to specify the key of the prepended item:"
msgstr ""

#: docs/8.x/collections.md:block 380 (code)
msgid ""
"$collection = collect(['one' => 1, 'two' => 2]);\n"
"\n"
"$collection->prepend(0, 'zero');\n"
"\n"
"$collection->all();\n"
"\n"
"// ['zero' => 0, 'one' => 1, 'two' => 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 381 (paragraph)
msgid "<a name=\"method-pull\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 382 (header)
msgid "`pull()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 383 (paragraph)
msgid "The `pull` method removes and returns an item from the collection by its key:"
msgstr ""

#: docs/8.x/collections.md:block 384 (code)
msgid ""
"$collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);\n"
"\n"
"$collection->pull('name');\n"
"\n"
"// 'Desk'\n"
"\n"
"$collection->all();\n"
"\n"
"// ['product_id' => 'prod-100']\n"
msgstr ""

#: docs/8.x/collections.md:block 385 (paragraph)
msgid "<a name=\"method-push\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 386 (header)
msgid "`push()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 387 (paragraph)
msgid "The `push` method appends an item to the end of the collection:"
msgstr ""

#: docs/8.x/collections.md:block 388 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$collection->push(5);\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 389 (paragraph)
msgid "<a name=\"method-put\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 390 (header)
msgid "`put()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 391 (paragraph)
msgid "The `put` method sets the given key and value in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 392 (code)
msgid ""
"$collection = collect(['product_id' => 1, 'name' => 'Desk']);\n"
"\n"
"$collection->put('price', 100);\n"
"\n"
"$collection->all();\n"
"\n"
"// ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n"
msgstr ""

#: docs/8.x/collections.md:block 393 (paragraph)
msgid "<a name=\"method-random\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 394 (header)
msgid "`random()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 395 (paragraph)
msgid "The `random` method returns a random item from the collection:"
msgstr ""

#: docs/8.x/collections.md:block 396 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->random();\n"
"\n"
"// 4 - (retrieved randomly)\n"
msgstr ""

#: docs/8.x/collections.md:block 397 (paragraph)
msgid "You may pass an integer to `random` to specify how many items you would like to randomly retrieve. A collection of items is always returned when explicitly passing the number of items you wish to receive:"
msgstr ""

#: docs/8.x/collections.md:block 398 (code)
msgid ""
"$random = $collection->random(3);\n"
"\n"
"$random->all();\n"
"\n"
"// [2, 4, 5] - (retrieved randomly)\n"
msgstr ""

#: docs/8.x/collections.md:block 399 (paragraph)
msgid "If the collection instance has fewer items than requested, the `random` method will throw an `InvalidArgumentException`."
msgstr ""

#: docs/8.x/collections.md:block 400 (paragraph)
msgid "<a name=\"method-range\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 401 (header)
msgid "`range()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 402 (paragraph)
msgid "The `range` method returns a collection containing integers between the specified range:"
msgstr ""

#: docs/8.x/collections.md:block 403 (code)
msgid ""
"$collection = collect()->range(3, 6);\n"
"\n"
"$collection->all();\n"
"\n"
"// [3, 4, 5, 6]\n"
msgstr ""

#: docs/8.x/collections.md:block 404 (paragraph)
msgid "<a name=\"method-reduce\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 405 (header)
msgid "`reduce()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 406 (paragraph)
msgid "The `reduce` method reduces the collection to a single value, passing the result of each iteration into the subsequent iteration:"
msgstr ""

#: docs/8.x/collections.md:block 407 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$total = $collection->reduce(function ($carry, $item) {\n"
"    return $carry + $item;\n"
"});\n"
"\n"
"// 6\n"
msgstr ""

#: docs/8.x/collections.md:block 408 (paragraph)
msgid "The value for `$carry` on the first iteration is `null`; however, you may specify its initial value by passing a second argument to `reduce`:"
msgstr ""

#: docs/8.x/collections.md:block 409 (code)
msgid ""
"$collection->reduce(function ($carry, $item) {\n"
"    return $carry + $item;\n"
"}, 4);\n"
"\n"
"// 10\n"
msgstr ""

#: docs/8.x/collections.md:block 410 (paragraph)
msgid "The `reduce` method also passes array keys in associative collections to the given callback:"
msgstr ""

#: docs/8.x/collections.md:block 411 (code)
msgid ""
"$collection = collect([\n"
"    'usd' => 1400,\n"
"    'gbp' => 1200,\n"
"    'eur' => 1000,\n"
"]);\n"
"\n"
"$ratio = [\n"
"    'usd' => 1,\n"
"    'gbp' => 1.37,\n"
"    'eur' => 1.22,\n"
"];\n"
"\n"
"$collection->reduce(function ($carry, $value, $key) use ($ratio) {\n"
"    return $carry + ($value * $ratio[$key]);\n"
"});\n"
"\n"
"// 4264\n"
msgstr ""

#: docs/8.x/collections.md:block 412 (paragraph)
msgid "<a name=\"method-reduce-spread\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 413 (header)
msgid "`reduceSpread()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 414 (paragraph)
msgid "The `reduceSpread` method reduces the collection to an array of values, passing the results of each iteration into the subsequent iteration. This method is similar to the `reduce` method; however, it can accept multiple initial values:"
msgstr ""

#: docs/8.x/collections.md:block 415 (code)
msgid ""
"[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"        ->get()\n"
"        ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"            if ($creditsRemaining >= $image->creditsRequired()) {\n"
"                $batch->push($image);\n"
"\n"
"                $creditsRemaining -= $image->creditsRequired();\n"
"            }\n"
"\n"
"            return [$creditsRemaining, $batch];\n"
"        }, $creditsAvailable, collect());\n"
msgstr ""

#: docs/8.x/collections.md:block 416 (paragraph)
msgid "<a name=\"method-reject\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 417 (header)
msgid "`reject()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 418 (paragraph)
msgid "The `reject` method filters the collection using the given closure. The closure should return `true` if the item should be removed from the resulting collection:"
msgstr ""

#: docs/8.x/collections.md:block 419 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$filtered = $collection->reject(function ($value, $key) {\n"
"    return $value > 2;\n"
"});\n"
"\n"
"$filtered->all();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 420 (paragraph)
msgid "For the inverse of the `reject` method, see the [`filter`](#method-filter) method."
msgstr ""

#: docs/8.x/collections.md:block 421 (paragraph)
msgid "<a name=\"method-replace\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 422 (header)
msgid "`replace()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 423 (paragraph)
msgid "The `replace` method behaves similarly to `merge`; however, in addition to overwriting matching items that have string keys, the `replace` method will also overwrite items in the collection that have matching numeric keys:"
msgstr ""

#: docs/8.x/collections.md:block 424 (code)
msgid ""
"$collection = collect(['Taylor', 'Abigail', 'James']);\n"
"\n"
"$replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n"
"\n"
"$replaced->all();\n"
"\n"
"// ['Taylor', 'Victoria', 'James', 'Finn']\n"
msgstr ""

#: docs/8.x/collections.md:block 425 (paragraph)
msgid "<a name=\"method-replacerecursive\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 426 (header)
msgid "`replaceRecursive()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 427 (paragraph)
msgid "This method works like `replace`, but it will recur into arrays and apply the same replacement process to the inner values:"
msgstr ""

#: docs/8.x/collections.md:block 428 (code)
msgid ""
"$collection = collect([\n"
"    'Taylor',\n"
"    'Abigail',\n"
"    [\n"
"        'James',\n"
"        'Victoria',\n"
"        'Finn'\n"
"    ]\n"
"]);\n"
"\n"
"$replaced = $collection->replaceRecursive([\n"
"    'Charlie',\n"
"    2 => [1 => 'King']\n"
"]);\n"
"\n"
"$replaced->all();\n"
"\n"
"// ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n"
msgstr ""

#: docs/8.x/collections.md:block 429 (paragraph)
msgid "<a name=\"method-reverse\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 430 (header)
msgid "`reverse()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 431 (paragraph)
msgid "The `reverse` method reverses the order of the collection's items, preserving the original keys:"
msgstr ""

#: docs/8.x/collections.md:block 432 (code)
msgid ""
"$collection = collect(['a', 'b', 'c', 'd', 'e']);\n"
"\n"
"$reversed = $collection->reverse();\n"
"\n"
"$reversed->all();\n"
"\n"
"/*\n"
"    [\n"
"        4 => 'e',\n"
"        3 => 'd',\n"
"        2 => 'c',\n"
"        1 => 'b',\n"
"        0 => 'a',\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 433 (paragraph)
msgid "<a name=\"method-search\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 434 (header)
msgid "`search()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 435 (paragraph)
msgid "The `search` method searches the collection for the given value and returns its key if found. If the item is not found, `false` is returned:"
msgstr ""

#: docs/8.x/collections.md:block 436 (code)
msgid ""
"$collection = collect([2, 4, 6, 8]);\n"
"\n"
"$collection->search(4);\n"
"\n"
"// 1\n"
msgstr ""

#: docs/8.x/collections.md:block 437 (paragraph)
msgid "The search is done using a \"loose\" comparison, meaning a string with an integer value will be considered equal to an integer of the same value. To use \"strict\" comparison, pass `true` as the second argument to the method:"
msgstr ""

#: docs/8.x/collections.md:block 438 (code)
msgid ""
"collect([2, 4, 6, 8])->search('4', $strict = true);\n"
"\n"
"// false\n"
msgstr ""

#: docs/8.x/collections.md:block 439 (paragraph)
msgid "Alternatively, you may provide your own closure to search for the first item that passes a given truth test:"
msgstr ""

#: docs/8.x/collections.md:block 440 (code)
msgid ""
"collect([2, 4, 6, 8])->search(function ($item, $key) {\n"
"    return $item > 5;\n"
"});\n"
"\n"
"// 2\n"
msgstr ""

#: docs/8.x/collections.md:block 441 (paragraph)
msgid "<a name=\"method-shift\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 442 (header)
msgid "`shift()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 443 (paragraph)
msgid "The `shift` method removes and returns the first item from the collection:"
msgstr ""

#: docs/8.x/collections.md:block 444 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->shift();\n"
"\n"
"// 1\n"
"\n"
"$collection->all();\n"
"\n"
"// [2, 3, 4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 445 (paragraph)
msgid "You may pass an integer to the `shift` method to remove and return multiple items from the beginning of a collection:"
msgstr ""

#: docs/8.x/collections.md:block 446 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->shift(3);\n"
"\n"
"// collect([1, 2, 3])\n"
"\n"
"$collection->all();\n"
"\n"
"// [4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 447 (paragraph)
msgid "<a name=\"method-shuffle\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 448 (header)
msgid "`shuffle()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 449 (paragraph)
msgid "The `shuffle` method randomly shuffles the items in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 450 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$shuffled = $collection->shuffle();\n"
"\n"
"$shuffled->all();\n"
"\n"
"// [3, 2, 5, 1, 4] - (generated randomly)\n"
msgstr ""

#: docs/8.x/collections.md:block 451 (paragraph)
msgid "<a name=\"method-sliding\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 452 (header)
msgid "`sliding()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 453 (paragraph)
msgid "The `sliding` method returns a new collection of chunks representing a \"sliding window\" view of the items in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 454 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunks = $collection->sliding(2);\n"
"\n"
"$chunks->toArray();\n"
"\n"
"// [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
msgstr ""

#: docs/8.x/collections.md:block 455 (paragraph)
msgid "This is especially useful in conjunction with the [`eachSpread`](#method-eachspread) method:"
msgstr ""

#: docs/8.x/collections.md:block 456 (code)
msgid ""
"$transactions->sliding(2)->eachSpread(function ($previous, $current) {\n"
"    $current->total = $previous->total + $current->amount;\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 457 (paragraph)
msgid "You may optionally pass a second \"step\" value, which determines the distance between the first item of every chunk:"
msgstr ""

#: docs/8.x/collections.md:block 458 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunks = $collection->sliding(3, step: 2);\n"
"\n"
"$chunks->toArray();\n"
"\n"
"// [[1, 2, 3], [3, 4, 5]]\n"
msgstr ""

#: docs/8.x/collections.md:block 459 (paragraph)
msgid "<a name=\"method-skip\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 460 (header)
msgid "`skip()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 461 (paragraph)
msgid "The `skip` method returns a new collection, with the given number of elements removed from the beginning of the collection:"
msgstr ""

#: docs/8.x/collections.md:block 462 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"\n"
"$collection = $collection->skip(4);\n"
"\n"
"$collection->all();\n"
"\n"
"// [5, 6, 7, 8, 9, 10]\n"
msgstr ""

#: docs/8.x/collections.md:block 463 (paragraph)
msgid "<a name=\"method-skipuntil\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 464 (header)
msgid "`skipUntil()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 465 (paragraph)
msgid "The `skipUntil` method skips over items from the collection until the given callback returns `true` and then returns the remaining items in the collection as a new collection instance:"
msgstr ""

#: docs/8.x/collections.md:block 466 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipUntil(function ($item) {\n"
"    return $item >= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [3, 4]\n"
msgstr ""

#: docs/8.x/collections.md:block 467 (paragraph)
msgid "You may also pass a simple value to the `skipUntil` method to skip all items until the given value is found:"
msgstr ""

#: docs/8.x/collections.md:block 468 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipUntil(3);\n"
"\n"
"$subset->all();\n"
"\n"
"// [3, 4]\n"
msgstr ""

#: docs/8.x/collections.md:block 469 (quote)
msgid "{note} If the given value is not found or the callback never returns `true`, the `skipUntil` method will return an empty collection."
msgstr ""

#: docs/8.x/collections.md:block 470 (paragraph)
msgid "<a name=\"method-skipwhile\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 471 (header)
msgid "`skipWhile()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 472 (paragraph)
msgid "The `skipWhile` method skips over items from the collection while the given callback returns `true` and then returns the remaining items in the collection as a new collection:"
msgstr ""

#: docs/8.x/collections.md:block 473 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->skipWhile(function ($item) {\n"
"    return $item <= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [4]\n"
msgstr ""

#: docs/8.x/collections.md:block 474 (quote)
msgid "{note} If the callback never returns `false`, the `skipWhile` method will return an empty collection."
msgstr ""

#: docs/8.x/collections.md:block 475 (paragraph)
msgid "<a name=\"method-slice\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 476 (header)
msgid "`slice()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 477 (paragraph)
msgid "The `slice` method returns a slice of the collection starting at the given index:"
msgstr ""

#: docs/8.x/collections.md:block 478 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"\n"
"$slice = $collection->slice(4);\n"
"\n"
"$slice->all();\n"
"\n"
"// [5, 6, 7, 8, 9, 10]\n"
msgstr ""

#: docs/8.x/collections.md:block 479 (paragraph)
msgid "If you would like to limit the size of the returned slice, pass the desired size as the second argument to the method:"
msgstr ""

#: docs/8.x/collections.md:block 480 (code)
msgid ""
"$slice = $collection->slice(4, 2);\n"
"\n"
"$slice->all();\n"
"\n"
"// [5, 6]\n"
msgstr ""

#: docs/8.x/collections.md:block 481 (paragraph)
msgid "The returned slice will preserve keys by default. If you do not wish to preserve the original keys, you can use the [`values`](#method-values) method to reindex them."
msgstr ""

#: docs/8.x/collections.md:block 482 (paragraph)
msgid "<a name=\"method-sole\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 483 (header)
msgid "`sole()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 484 (paragraph)
msgid "The `sole` method returns the first element in the collection that passes a given truth test, but only if the truth test matches exactly one element:"
msgstr ""

#: docs/8.x/collections.md:block 485 (code)
msgid ""
"collect([1, 2, 3, 4])->sole(function ($value, $key) {\n"
"    return $value === 2;\n"
"});\n"
"\n"
"// 2\n"
msgstr ""

#: docs/8.x/collections.md:block 486 (paragraph)
msgid "You may also pass a key / value pair to the `sole` method, which will return the first element in the collection that matches the given pair, but only if it exactly one element matches:"
msgstr ""

#: docs/8.x/collections.md:block 487 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"]);\n"
"\n"
"$collection->sole('product', 'Chair');\n"
"\n"
"// ['product' => 'Chair', 'price' => 100]\n"
msgstr ""

#: docs/8.x/collections.md:block 488 (paragraph)
msgid "Alternatively, you may also call the `sole` method with no argument to get the first element in the collection if there is only one element:"
msgstr ""

#: docs/8.x/collections.md:block 489 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"]);\n"
"\n"
"$collection->sole();\n"
"\n"
"// ['product' => 'Desk', 'price' => 200]\n"
msgstr ""

#: docs/8.x/collections.md:block 490 (paragraph)
msgid "If there are no elements in the collection that should be returned by the `sole` method, an `\\Illuminate\\Collections\\ItemNotFoundException` exception will be thrown. If there is more than one element that should be returned, an `\\Illuminate\\Collections\\MultipleItemsFoundException` will be thrown."
msgstr ""

#: docs/8.x/collections.md:block 491 (paragraph)
msgid "<a name=\"method-some\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 492 (header)
msgid "`some()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 493 (paragraph)
msgid "Alias for the [`contains`](#method-contains) method."
msgstr ""

#: docs/8.x/collections.md:block 494 (paragraph)
msgid "<a name=\"method-sort\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 495 (header)
msgid "`sort()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 496 (paragraph)
msgid "The `sort` method sorts the collection. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

#: docs/8.x/collections.md:block 497 (code)
msgid ""
"$collection = collect([5, 3, 1, 2, 4]);\n"
"\n"
"$sorted = $collection->sort();\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"// [1, 2, 3, 4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 498 (paragraph)
msgid "If your sorting needs are more advanced, you may pass a callback to `sort` with your own algorithm. Refer to the PHP documentation on [`uasort`](https://secure.php.net/manual/en/function.uasort.php#refsect1-function.uasort-parameters), which is what the collection's `sort` method calls utilizes internally."
msgstr ""

#: docs/8.x/collections.md:block 499 (quote)
msgid "{tip} If you need to sort a collection of nested arrays or objects, see the [`sortBy`](#method-sortby) and [`sortByDesc`](#method-sortbydesc) methods."
msgstr ""

#: docs/8.x/collections.md:block 500 (paragraph)
msgid "<a name=\"method-sortby\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 501 (header)
msgid "`sortBy()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 502 (paragraph)
msgid "The `sortBy` method sorts the collection by the given key. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

#: docs/8.x/collections.md:block 503 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk', 'price' => 200],\n"
"    ['name' => 'Chair', 'price' => 100],\n"
"    ['name' => 'Bookcase', 'price' => 150],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy('price');\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair', 'price' => 100],\n"
"        ['name' => 'Bookcase', 'price' => 150],\n"
"        ['name' => 'Desk', 'price' => 200],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 504 (paragraph)
msgid "The `sortBy` method accepts [sort flags](https://www.php.net/manual/en/function.sort.php) as its second argument:"
msgstr ""

#: docs/8.x/collections.md:block 505 (code)
msgid ""
"$collection = collect([\n"
"    ['title' => 'Item 1'],\n"
"    ['title' => 'Item 12'],\n"
"    ['title' => 'Item 3'],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy('title', SORT_NATURAL);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['title' => 'Item 1'],\n"
"        ['title' => 'Item 3'],\n"
"        ['title' => 'Item 12'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 506 (paragraph)
msgid "Alternatively, you may pass your own closure to determine how to sort the collection's values:"
msgstr ""

#: docs/8.x/collections.md:block 507 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"    ['name' => 'Chair', 'colors' => ['Black']],\n"
"    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy(function ($product, $key) {\n"
"    return count($product['colors']);\n"
"});\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 508 (paragraph)
msgid "If you would like to sort your collection by multiple attributes, you may pass an array of sort operations to the `sortBy` method. Each sort operation should be an array consisting of the attribute that you wish to sort by and the direction of the desired sort:"
msgstr ""

#: docs/8.x/collections.md:block 509 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ['name' => 'Abigail Otwell', 'age' => 30],\n"
"    ['name' => 'Taylor Otwell', 'age' => 36],\n"
"    ['name' => 'Abigail Otwell', 'age' => 32],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy([\n"
"    ['name', 'asc'],\n"
"    ['age', 'desc'],\n"
"]);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 510 (paragraph)
msgid "When sorting a collection by multiple attributes, you may also provide closures that define each sort operation:"
msgstr ""

#: docs/8.x/collections.md:block 511 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ['name' => 'Abigail Otwell', 'age' => 30],\n"
"    ['name' => 'Taylor Otwell', 'age' => 36],\n"
"    ['name' => 'Abigail Otwell', 'age' => 32],\n"
"]);\n"
"\n"
"$sorted = $collection->sortBy([\n"
"    fn ($a, $b) => $a['name'] <=> $b['name'],\n"
"    fn ($a, $b) => $b['age'] <=> $a['age'],\n"
"]);\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 512 (paragraph)
msgid "<a name=\"method-sortbydesc\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 513 (header)
msgid "`sortByDesc()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 514 (paragraph)
msgid "This method has the same signature as the [`sortBy`](#method-sortby) method, but will sort the collection in the opposite order."
msgstr ""

#: docs/8.x/collections.md:block 515 (paragraph)
msgid "<a name=\"method-sortdesc\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 516 (header)
msgid "`sortDesc()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 517 (paragraph)
msgid "This method will sort the collection in the opposite order as the [`sort`](#method-sort) method:"
msgstr ""

#: docs/8.x/collections.md:block 518 (code)
msgid ""
"$collection = collect([5, 3, 1, 2, 4]);\n"
"\n"
"$sorted = $collection->sortDesc();\n"
"\n"
"$sorted->values()->all();\n"
"\n"
"// [5, 4, 3, 2, 1]\n"
msgstr ""

#: docs/8.x/collections.md:block 519 (paragraph)
msgid "Unlike `sort`, you may not pass a closure to `sortDesc`. Instead, you should use the [`sort`](#method-sort) method and invert your comparison."
msgstr ""

#: docs/8.x/collections.md:block 520 (paragraph)
msgid "<a name=\"method-sortkeys\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 521 (header)
msgid "`sortKeys()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 522 (paragraph)
msgid "The `sortKeys` method sorts the collection by the keys of the underlying associative array:"
msgstr ""

#: docs/8.x/collections.md:block 523 (code)
msgid ""
"$collection = collect([\n"
"    'id' => 22345,\n"
"    'first' => 'John',\n"
"    'last' => 'Doe',\n"
"]);\n"
"\n"
"$sorted = $collection->sortKeys();\n"
"\n"
"$sorted->all();\n"
"\n"
"/*\n"
"    [\n"
"        'first' => 'John',\n"
"        'id' => 22345,\n"
"        'last' => 'Doe',\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 524 (paragraph)
msgid "<a name=\"method-sortkeysdesc\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 525 (header)
msgid "`sortKeysDesc()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 526 (paragraph)
msgid "This method has the same signature as the [`sortKeys`](#method-sortkeys) method, but will sort the collection in the opposite order."
msgstr ""

#: docs/8.x/collections.md:block 527 (paragraph)
msgid "<a name=\"method-sortkeysusing\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 528 (header)
msgid "`sortKeysUsing()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 529 (paragraph)
msgid "The `sortKeysUsing` method sorts the collection by the keys of the underlying associative array using a callback:"
msgstr ""

#: docs/8.x/collections.md:block 530 (code)
msgid ""
"$collection = collect([\n"
"    'ID' => 22345,\n"
"    'first' => 'John',\n"
"    'last' => 'Doe',\n"
"]);\n"
"\n"
"$sorted = $collection->sortKeysUsing('strnatcasecmp');\n"
"\n"
"$sorted->all();\n"
"\n"
"/*\n"
"    [\n"
"        'first' => 'John',\n"
"        'ID' => 22345,\n"
"        'last' => 'Doe',\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 531 (paragraph)
msgid "The callback must be a comparison function that returns an integer less than, equal to, or greater than zero. For more information, refer to the PHP documentation on [`uksort`](https://www.php.net/manual/en/function.uksort.php#refsect1-function.uksort-parameters), which is the PHP function that `sortKeysUsing` method utilizes internally."
msgstr ""

#: docs/8.x/collections.md:block 532 (paragraph)
msgid "<a name=\"method-splice\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 533 (header)
msgid "`splice()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 534 (paragraph)
msgid "The `splice` method removes and returns a slice of items starting at the specified index:"
msgstr ""

#: docs/8.x/collections.md:block 535 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->splice(2);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [3, 4, 5]\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 536 (paragraph)
msgid "You may pass a second argument to limit the size of the resulting collection:"
msgstr ""

#: docs/8.x/collections.md:block 537 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->splice(2, 1);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [3]\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 538 (paragraph)
msgid "In addition, you may pass a third argument containing the new items to replace the items removed from the collection:"
msgstr ""

#: docs/8.x/collections.md:block 539 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->splice(2, 1, [10, 11]);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [3]\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 10, 11, 4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 540 (paragraph)
msgid "<a name=\"method-split\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 541 (header)
msgid "`split()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 542 (paragraph)
msgid "The `split` method breaks a collection into the given number of groups:"
msgstr ""

#: docs/8.x/collections.md:block 543 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$groups = $collection->split(3);\n"
"\n"
"$groups->all();\n"
"\n"
"// [[1, 2], [3, 4], [5]]\n"
msgstr ""

#: docs/8.x/collections.md:block 544 (paragraph)
msgid "<a name=\"method-splitin\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 545 (header)
msgid "`splitIn()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 546 (paragraph)
msgid "The `splitIn` method breaks a collection into the given number of groups, filling non-terminal groups completely before allocating the remainder to the final group:"
msgstr ""

#: docs/8.x/collections.md:block 547 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"\n"
"$groups = $collection->splitIn(3);\n"
"\n"
"$groups->all();\n"
"\n"
"// [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n"
msgstr ""

#: docs/8.x/collections.md:block 548 (paragraph)
msgid "<a name=\"method-sum\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 549 (header)
msgid "`sum()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 550 (paragraph)
msgid "The `sum` method returns the sum of all items in the collection:"
msgstr ""

#: docs/8.x/collections.md:block 551 (code)
msgid ""
"collect([1, 2, 3, 4, 5])->sum();\n"
"\n"
"// 15\n"
msgstr ""

#: docs/8.x/collections.md:block 552 (paragraph)
msgid "If the collection contains nested arrays or objects, you should pass a key that will be used to determine which values to sum:"
msgstr ""

#: docs/8.x/collections.md:block 553 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n"
"    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n"
"]);\n"
"\n"
"$collection->sum('pages');\n"
"\n"
"// 1272\n"
msgstr ""

#: docs/8.x/collections.md:block 554 (paragraph)
msgid "In addition, you may pass your own closure to determine which values of the collection to sum:"
msgstr ""

#: docs/8.x/collections.md:block 555 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Chair', 'colors' => ['Black']],\n"
"    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"]);\n"
"\n"
"$collection->sum(function ($product) {\n"
"    return count($product['colors']);\n"
"});\n"
"\n"
"// 6\n"
msgstr ""

#: docs/8.x/collections.md:block 556 (paragraph)
msgid "<a name=\"method-take\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 557 (header)
msgid "`take()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 558 (paragraph)
msgid "The `take` method returns a new collection with the specified number of items:"
msgstr ""

#: docs/8.x/collections.md:block 559 (code)
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->take(3);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [0, 1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 560 (paragraph)
msgid "You may also pass a negative integer to take the specified number of items from the end of the collection:"
msgstr ""

#: docs/8.x/collections.md:block 561 (code)
msgid ""
"$collection = collect([0, 1, 2, 3, 4, 5]);\n"
"\n"
"$chunk = $collection->take(-2);\n"
"\n"
"$chunk->all();\n"
"\n"
"// [4, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 562 (paragraph)
msgid "<a name=\"method-takeuntil\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 563 (header)
msgid "`takeUntil()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 564 (paragraph)
msgid "The `takeUntil` method returns items in the collection until the given callback returns `true`:"
msgstr ""

#: docs/8.x/collections.md:block 565 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeUntil(function ($item) {\n"
"    return $item >= 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 566 (paragraph)
msgid "You may also pass a simple value to the `takeUntil` method to get the items until the given value is found:"
msgstr ""

#: docs/8.x/collections.md:block 567 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeUntil(3);\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 568 (quote)
msgid "{note} If the given value is not found or the callback never returns `true`, the `takeUntil` method will return all items in the collection."
msgstr ""

#: docs/8.x/collections.md:block 569 (paragraph)
msgid "<a name=\"method-takewhile\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 570 (header)
msgid "`takeWhile()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 571 (paragraph)
msgid "The `takeWhile` method returns items in the collection until the given callback returns `false`:"
msgstr ""

#: docs/8.x/collections.md:block 572 (code)
msgid ""
"$collection = collect([1, 2, 3, 4]);\n"
"\n"
"$subset = $collection->takeWhile(function ($item) {\n"
"    return $item < 3;\n"
"});\n"
"\n"
"$subset->all();\n"
"\n"
"// [1, 2]\n"
msgstr ""

#: docs/8.x/collections.md:block 573 (quote)
msgid "{note} If the callback never returns `false`, the `takeWhile` method will return all items in the collection."
msgstr ""

#: docs/8.x/collections.md:block 574 (paragraph)
msgid "<a name=\"method-tap\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 575 (header)
msgid "`tap()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 576 (paragraph)
msgid "The `tap` method passes the collection to the given callback, allowing you to \"tap\" into the collection at a specific point and do something with the items while not affecting the collection itself. The collection is then returned by the `tap` method:"
msgstr ""

#: docs/8.x/collections.md:block 577 (code)
msgid ""
"collect([2, 4, 3, 1, 5])\n"
"    ->sort()\n"
"    ->tap(function ($collection) {\n"
"        Log::debug('Values after sorting', $collection->values()->all());\n"
"    })\n"
"    ->shift();\n"
"\n"
"// 1\n"
msgstr ""

#: docs/8.x/collections.md:block 578 (paragraph)
msgid "<a name=\"method-times\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 579 (header)
msgid "`times()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 580 (paragraph)
msgid "The static `times` method creates a new collection by invoking the given closure a specified number of times:"
msgstr ""

#: docs/8.x/collections.md:block 581 (code)
msgid ""
"$collection = Collection::times(10, function ($number) {\n"
"    return $number * 9;\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n"
msgstr ""

#: docs/8.x/collections.md:block 582 (paragraph)
msgid "<a name=\"method-toarray\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 583 (header)
msgid "`toArray()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 584 (paragraph)
msgid "The `toArray` method converts the collection into a plain PHP `array`. If the collection's values are [Eloquent](/docs/{{version}}/eloquent) models, the models will also be converted to arrays:"
msgstr ""

#: docs/8.x/collections.md:block 585 (code)
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 200]);\n"
"\n"
"$collection->toArray();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Desk', 'price' => 200],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 586 (quote)
msgid "{note} `toArray` also converts all of the collection's nested objects that are an instance of `Arrayable` to an array. If you want to get the raw array underlying the collection, use the [`all`](#method-all) method instead."
msgstr ""

#: docs/8.x/collections.md:block 587 (paragraph)
msgid "<a name=\"method-tojson\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 588 (header)
msgid "`toJson()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 589 (paragraph)
msgid "The `toJson` method converts the collection into a JSON serialized string:"
msgstr ""

#: docs/8.x/collections.md:block 590 (code)
msgid ""
"$collection = collect(['name' => 'Desk', 'price' => 200]);\n"
"\n"
"$collection->toJson();\n"
"\n"
"// '{\"name\":\"Desk\", \"price\":200}'\n"
msgstr ""

#: docs/8.x/collections.md:block 591 (paragraph)
msgid "<a name=\"method-transform\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 592 (header)
msgid "`transform()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 593 (paragraph)
msgid "The `transform` method iterates over the collection and calls the given callback with each item in the collection. The items in the collection will be replaced by the values returned by the callback:"
msgstr ""

#: docs/8.x/collections.md:block 594 (code)
msgid ""
"$collection = collect([1, 2, 3, 4, 5]);\n"
"\n"
"$collection->transform(function ($item, $key) {\n"
"    return $item * 2;\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [2, 4, 6, 8, 10]\n"
msgstr ""

#: docs/8.x/collections.md:block 595 (quote)
msgid "{note} Unlike most other collection methods, `transform` modifies the collection itself. If you wish to create a new collection instead, use the [`map`](#method-map) method."
msgstr ""

#: docs/8.x/collections.md:block 596 (paragraph)
msgid "<a name=\"method-undot\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 597 (header)
msgid "`undot()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 598 (paragraph)
msgid "The `undot` method expands a single-dimensional collection that uses \"dot\" notation into a multi-dimensional collection:"
msgstr ""

#: docs/8.x/collections.md:block 599 (code)
msgid ""
"$person = collect([\n"
"    'name.first_name' => 'Marie',\n"
"    'name.last_name' => 'Valentine',\n"
"    'address.line_1' => '2992 Eagle Drive',\n"
"    'address.line_2' => '',\n"
"    'address.suburb' => 'Detroit',\n"
"    'address.state' => 'MI',\n"
"    'address.postcode' => '48219'\n"
"])\n"
"\n"
"$person = $person->undot();\n"
"\n"
"$person->toArray();\n"
"\n"
"/*\n"
"    [\n"
"        \"name\" => [\n"
"            \"first_name\" => \"Marie\",\n"
"            \"last_name\" => \"Valentine\",\n"
"        ],\n"
"        \"address\" => [\n"
"            \"line_1\" => \"2992 Eagle Drive\",\n"
"            \"line_2\" => \"\",\n"
"            \"suburb\" => \"Detroit\",\n"
"            \"state\" => \"MI\",\n"
"            \"postcode\" => \"48219\",\n"
"        ],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 600 (paragraph)
msgid "<a name=\"method-union\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 601 (header)
msgid "`union()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 602 (paragraph)
msgid "The `union` method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection's values will be preferred:"
msgstr ""

#: docs/8.x/collections.md:block 603 (code)
msgid ""
"$collection = collect([1 => ['a'], 2 => ['b']]);\n"
"\n"
"$union = $collection->union([3 => ['c'], 1 => ['d']]);\n"
"\n"
"$union->all();\n"
"\n"
"// [1 => ['a'], 2 => ['b'], 3 => ['c']]\n"
msgstr ""

#: docs/8.x/collections.md:block 604 (paragraph)
msgid "<a name=\"method-unique\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 605 (header)
msgid "`unique()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 606 (paragraph)
msgid "The `unique` method returns all of the unique items in the collection. The returned collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

#: docs/8.x/collections.md:block 607 (code)
msgid ""
"$collection = collect([1, 1, 2, 2, 3, 4, 2]);\n"
"\n"
"$unique = $collection->unique();\n"
"\n"
"$unique->values()->all();\n"
"\n"
"// [1, 2, 3, 4]\n"
msgstr ""

#: docs/8.x/collections.md:block 608 (paragraph)
msgid "When dealing with nested arrays or objects, you may specify the key used to determine uniqueness:"
msgstr ""

#: docs/8.x/collections.md:block 609 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"    ['name' => 'iPhone 5', 'brand' => 'Apple', 'type' => 'phone'],\n"
"    ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"    ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"    ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"]);\n"
"\n"
"$unique = $collection->unique('brand');\n"
"\n"
"$unique->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 610 (paragraph)
msgid "Finally, you may also pass your own closure to the `unique` method to specify which value should determine an item's uniqueness:"
msgstr ""

#: docs/8.x/collections.md:block 611 (code)
msgid ""
"$unique = $collection->unique(function ($item) {\n"
"    return $item['brand'].$item['type'];\n"
"});\n"
"\n"
"$unique->values()->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 612 (paragraph)
msgid "The `unique` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`uniqueStrict`](#method-uniquestrict) method to filter using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 613 (quote)
msgid "{tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-unique)."
msgstr ""

#: docs/8.x/collections.md:block 614 (paragraph)
msgid "<a name=\"method-uniquestrict\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 615 (header)
msgid "`uniqueStrict()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 616 (paragraph)
msgid "This method has the same signature as the [`unique`](#method-unique) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 617 (paragraph)
msgid "<a name=\"method-unless\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 618 (header)
msgid "`unless()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 619 (paragraph)
msgid "The `unless` method will execute the given callback unless the first argument given to the method evaluates to `true`:"
msgstr ""

#: docs/8.x/collections.md:block 620 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->unless(true, function ($collection) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->unless(false, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 621 (paragraph)
msgid "A second callback may be passed to the `unless` method. The second callback will be executed when the first argument given to the `unless` method evaluates to `true`:"
msgstr ""

#: docs/8.x/collections.md:block 622 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->unless(true, function ($collection) {\n"
"    return $collection->push(4);\n"
"}, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 623 (paragraph)
msgid "For the inverse of `unless`, see the [`when`](#method-when) method."
msgstr ""

#: docs/8.x/collections.md:block 624 (paragraph)
msgid "<a name=\"method-unlessempty\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 625 (header)
msgid "`unlessEmpty()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 626 (paragraph)
msgid "Alias for the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

#: docs/8.x/collections.md:block 627 (paragraph)
msgid "<a name=\"method-unlessnotempty\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 628 (header)
msgid "`unlessNotEmpty()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 629 (paragraph)
msgid "Alias for the [`whenEmpty`](#method-whenempty) method."
msgstr ""

#: docs/8.x/collections.md:block 630 (paragraph)
msgid "<a name=\"method-unwrap\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 631 (header)
msgid "`unwrap()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 632 (paragraph)
msgid "The static `unwrap` method returns the collection's underlying items from the given value when applicable:"
msgstr ""

#: docs/8.x/collections.md:block 633 (code)
msgid ""
"Collection::unwrap(collect('John Doe'));\n"
"\n"
"// ['John Doe']\n"
"\n"
"Collection::unwrap(['John Doe']);\n"
"\n"
"// ['John Doe']\n"
"\n"
"Collection::unwrap('John Doe');\n"
"\n"
"// 'John Doe'\n"
msgstr ""

#: docs/8.x/collections.md:block 634 (paragraph)
msgid "<a name=\"method-values\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 635 (header)
msgid "`values()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 636 (paragraph)
msgid "The `values` method returns a new collection with the keys reset to consecutive integers:"
msgstr ""

#: docs/8.x/collections.md:block 637 (code)
msgid ""
"$collection = collect([\n"
"    10 => ['product' => 'Desk', 'price' => 200],\n"
"    11 => ['product' => 'Desk', 'price' => 200],\n"
"]);\n"
"\n"
"$values = $collection->values();\n"
"\n"
"$values->all();\n"
"\n"
"/*\n"
"    [\n"
"        0 => ['product' => 'Desk', 'price' => 200],\n"
"        1 => ['product' => 'Desk', 'price' => 200],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 638 (paragraph)
msgid "<a name=\"method-when\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 639 (header)
msgid "`when()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 640 (paragraph)
msgid "The `when` method will execute the given callback when the first argument given to the method evaluates to `true`:"
msgstr ""

#: docs/8.x/collections.md:block 641 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(true, function ($collection) {\n"
"    return $collection->push(4);\n"
"});\n"
"\n"
"$collection->when(false, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 4]\n"
msgstr ""

#: docs/8.x/collections.md:block 642 (paragraph)
msgid "A second callback may be passed to the `when` method. The second callback will be executed when the first argument given to the `when` method evaluates to `false`:"
msgstr ""

#: docs/8.x/collections.md:block 643 (code)
msgid ""
"$collection = collect([1, 2, 3]);\n"
"\n"
"$collection->when(false, function ($collection) {\n"
"    return $collection->push(4);\n"
"}, function ($collection) {\n"
"    return $collection->push(5);\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// [1, 2, 3, 5]\n"
msgstr ""

#: docs/8.x/collections.md:block 644 (paragraph)
msgid "For the inverse of `when`, see the [`unless`](#method-unless) method."
msgstr ""

#: docs/8.x/collections.md:block 645 (paragraph)
msgid "<a name=\"method-whenempty\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 646 (header)
msgid "`whenEmpty()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 647 (paragraph)
msgid "The `whenEmpty` method will execute the given callback when the collection is empty:"
msgstr ""

#: docs/8.x/collections.md:block 648 (code)
msgid ""
"$collection = collect(['Michael', 'Tom']);\n"
"\n"
"$collection->whenEmpty(function ($collection) {\n"
"    return $collection->push('Adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Michael', 'Tom']\n"
"\n"
"\n"
"$collection = collect();\n"
"\n"
"$collection->whenEmpty(function ($collection) {\n"
"    return $collection->push('Adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Adam']\n"
msgstr ""

#: docs/8.x/collections.md:block 649 (paragraph)
msgid "A second closure may be passed to the `whenEmpty` method that will be executed when the collection is not empty:"
msgstr ""

#: docs/8.x/collections.md:block 650 (code)
msgid ""
"$collection = collect(['Michael', 'Tom']);\n"
"\n"
"$collection->whenEmpty(function ($collection) {\n"
"    return $collection->push('Adam');\n"
"}, function ($collection) {\n"
"    return $collection->push('Taylor');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['Michael', 'Tom', 'Taylor']\n"
msgstr ""

#: docs/8.x/collections.md:block 651 (paragraph)
msgid "For the inverse of `whenEmpty`, see the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

#: docs/8.x/collections.md:block 652 (paragraph)
msgid "<a name=\"method-whennotempty\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 653 (header)
msgid "`whenNotEmpty()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 654 (paragraph)
msgid "The `whenNotEmpty` method will execute the given callback when the collection is not empty:"
msgstr ""

#: docs/8.x/collections.md:block 655 (code)
msgid ""
"$collection = collect(['michael', 'tom']);\n"
"\n"
"$collection->whenNotEmpty(function ($collection) {\n"
"    return $collection->push('adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['michael', 'tom', 'adam']\n"
"\n"
"\n"
"$collection = collect();\n"
"\n"
"$collection->whenNotEmpty(function ($collection) {\n"
"    return $collection->push('adam');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// []\n"
msgstr ""

#: docs/8.x/collections.md:block 656 (paragraph)
msgid "A second closure may be passed to the `whenNotEmpty` method that will be executed when the collection is empty:"
msgstr ""

#: docs/8.x/collections.md:block 657 (code)
msgid ""
"$collection = collect();\n"
"\n"
"$collection->whenNotEmpty(function ($collection) {\n"
"    return $collection->push('adam');\n"
"}, function ($collection) {\n"
"    return $collection->push('taylor');\n"
"});\n"
"\n"
"$collection->all();\n"
"\n"
"// ['taylor']\n"
msgstr ""

#: docs/8.x/collections.md:block 658 (paragraph)
msgid "For the inverse of `whenNotEmpty`, see the [`whenEmpty`](#method-whenempty) method."
msgstr ""

#: docs/8.x/collections.md:block 659 (paragraph)
msgid "<a name=\"method-where\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 660 (header)
msgid "`where()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 661 (paragraph)
msgid "The `where` method filters the collection by a given key / value pair:"
msgstr ""

#: docs/8.x/collections.md:block 662 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->where('price', 100);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 663 (paragraph)
msgid "The `where` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereStrict`](#method-wherestrict) method to filter using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 664 (paragraph)
msgid "Optionally, you may pass a comparison operator as the second parameter."
msgstr ""

#: docs/8.x/collections.md:block 665 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"    ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"    ['name' => 'Sue', 'deleted_at' => null],\n"
"]);\n"
"\n"
"$filtered = $collection->where('deleted_at', '!=', null);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"        ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 666 (paragraph)
msgid "<a name=\"method-wherestrict\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 667 (header)
msgid "`whereStrict()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 668 (paragraph)
msgid "This method has the same signature as the [`where`](#method-where) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 669 (paragraph)
msgid "<a name=\"method-wherebetween\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 670 (header)
msgid "`whereBetween()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 671 (paragraph)
msgid "The `whereBetween` method filters the collection by determining if a specified item value is within a given range:"
msgstr ""

#: docs/8.x/collections.md:block 672 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 80],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Pencil', 'price' => 30],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereBetween('price', [100, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 673 (paragraph)
msgid "<a name=\"method-wherein\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 674 (header)
msgid "`whereIn()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 675 (paragraph)
msgid "The `whereIn` method removes elements from the collection that do not have a specified item value that is contained within the given array:"
msgstr ""

#: docs/8.x/collections.md:block 676 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereIn('price', [150, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 677 (paragraph)
msgid "The `whereIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereInStrict`](#method-whereinstrict) method to filter using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 678 (paragraph)
msgid "<a name=\"method-whereinstrict\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 679 (header)
msgid "`whereInStrict()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 680 (paragraph)
msgid "This method has the same signature as the [`whereIn`](#method-wherein) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 681 (paragraph)
msgid "<a name=\"method-whereinstanceof\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 682 (header)
msgid "`whereInstanceOf()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 683 (paragraph)
msgid "The `whereInstanceOf` method filters the collection by a given class type:"
msgstr ""

#: docs/8.x/collections.md:block 684 (code)
msgid ""
"use App\\Models\\User;\n"
"use App\\Models\\Post;\n"
"\n"
"$collection = collect([\n"
"    new User,\n"
"    new User,\n"
"    new Post,\n"
"]);\n"
"\n"
"$filtered = $collection->whereInstanceOf(User::class);\n"
"\n"
"$filtered->all();\n"
"\n"
"// [App\\Models\\User, App\\Models\\User]\n"
msgstr ""

#: docs/8.x/collections.md:block 685 (paragraph)
msgid "<a name=\"method-wherenotbetween\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 686 (header)
msgid "`whereNotBetween()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 687 (paragraph)
msgid "The `whereNotBetween` method filters the collection by determining if a specified item value is outside of a given range:"
msgstr ""

#: docs/8.x/collections.md:block 688 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 80],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Pencil', 'price' => 30],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNotBetween('price', [100, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Chair', 'price' => 80],\n"
"        ['product' => 'Pencil', 'price' => 30],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 689 (paragraph)
msgid "<a name=\"method-wherenotin\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 690 (header)
msgid "`whereNotIn()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 691 (paragraph)
msgid "The `whereNotIn` method removes elements from the collection that have a specified item value that is contained within the given array:"
msgstr ""

#: docs/8.x/collections.md:block 692 (code)
msgid ""
"$collection = collect([\n"
"    ['product' => 'Desk', 'price' => 200],\n"
"    ['product' => 'Chair', 'price' => 100],\n"
"    ['product' => 'Bookcase', 'price' => 150],\n"
"    ['product' => 'Door', 'price' => 100],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNotIn('price', [150, 200]);\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 693 (paragraph)
msgid "The `whereNotIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereNotInStrict`](#method-wherenotinstrict) method to filter using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 694 (paragraph)
msgid "<a name=\"method-wherenotinstrict\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 695 (header)
msgid "`whereNotInStrict()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 696 (paragraph)
msgid "This method has the same signature as the [`whereNotIn`](#method-wherenotin) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#: docs/8.x/collections.md:block 697 (paragraph)
msgid "<a name=\"method-wherenotnull\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 698 (header)
msgid "`whereNotNull()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 699 (paragraph)
msgid "The `whereNotNull` method returns items from the collection where the given key is not `null`:"
msgstr ""

#: docs/8.x/collections.md:block 700 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk'],\n"
"    ['name' => null],\n"
"    ['name' => 'Bookcase'],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNotNull('name');\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Bookcase'],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 701 (paragraph)
msgid "<a name=\"method-wherenull\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 702 (header)
msgid "`whereNull()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 703 (paragraph)
msgid "The `whereNull` method returns items from the collection where the given key is `null`:"
msgstr ""

#: docs/8.x/collections.md:block 704 (code)
msgid ""
"$collection = collect([\n"
"    ['name' => 'Desk'],\n"
"    ['name' => null],\n"
"    ['name' => 'Bookcase'],\n"
"]);\n"
"\n"
"$filtered = $collection->whereNull('name');\n"
"\n"
"$filtered->all();\n"
"\n"
"/*\n"
"    [\n"
"        ['name' => null],\n"
"    ]\n"
"*/\n"
msgstr ""

#: docs/8.x/collections.md:block 705 (paragraph)
msgid "<a name=\"method-wrap\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 706 (header)
msgid "`wrap()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 707 (paragraph)
msgid "The static `wrap` method wraps the given value in a collection when applicable:"
msgstr ""

#: docs/8.x/collections.md:block 708 (code)
msgid ""
"use Illuminate\\Support\\Collection;\n"
"\n"
"$collection = Collection::wrap('John Doe');\n"
"\n"
"$collection->all();\n"
"\n"
"// ['John Doe']\n"
"\n"
"$collection = Collection::wrap(['John Doe']);\n"
"\n"
"$collection->all();\n"
"\n"
"// ['John Doe']\n"
"\n"
"$collection = Collection::wrap(collect('John Doe'));\n"
"\n"
"$collection->all();\n"
"\n"
"// ['John Doe']\n"
msgstr ""

#: docs/8.x/collections.md:block 709 (paragraph)
msgid "<a name=\"method-zip\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 710 (header)
msgid "`zip()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 711 (paragraph)
msgid "The `zip` method merges together the values of the given array with the values of the original collection at their corresponding index:"
msgstr ""

#: docs/8.x/collections.md:block 712 (code)
msgid ""
"$collection = collect(['Chair', 'Desk']);\n"
"\n"
"$zipped = $collection->zip([100, 200]);\n"
"\n"
"$zipped->all();\n"
"\n"
"// [['Chair', 100], ['Desk', 200]]\n"
msgstr ""

#: docs/8.x/collections.md:block 713 (paragraph)
msgid "<a name=\"higher-order-messages\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 714 (header)
msgid "Higher Order Messages"
msgstr ""

#: docs/8.x/collections.md:block 715 (paragraph)
msgid "Collections also provide support for \"higher order messages\", which are short-cuts for performing common actions on collections. The collection methods that provide higher order messages are: [`average`](#method-average), [`avg`](#method-avg), [`contains`](#method-contains), [`each`](#method-each), [`every`](#method-every), [`filter`](#method-filter), [`first`](#method-first), [`flatMap`](#method-flatmap), [`groupBy`](#method-groupby), [`keyBy`](#method-keyby), [`map`](#method-map), [`max`](#method-max), [`min`](#method-min), [`partition`](#method-partition), [`reject`](#method-reject), [`skipUntil`](#method-skipuntil), [`skipWhile`](#method-skipwhile), [`some`](#method-some), [`sortBy`](#method-sortby), [`sortByDesc`](#method-sortbydesc), [`sum`](#method-sum), [`takeUntil`](#method-takeuntil), [`takeWhile`](#method-takewhile), and [`unique`](#method-unique)."
msgstr ""

#: docs/8.x/collections.md:block 716 (paragraph)
msgid "Each higher order message can be accessed as a dynamic property on a collection instance. For instance, let's use the `each` higher order message to call a method on each object within a collection:"
msgstr ""

#: docs/8.x/collections.md:block 717 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('votes', '>', 500)->get();\n"
"\n"
"$users->each->markAsVip();\n"
msgstr ""

#: docs/8.x/collections.md:block 718 (paragraph)
msgid "Likewise, we can use the `sum` higher order message to gather the total number of \"votes\" for a collection of users:"
msgstr ""

#: docs/8.x/collections.md:block 719 (code)
msgid ""
"$users = User::where('group', 'Development')->get();\n"
"\n"
"return $users->sum->votes;\n"
msgstr ""

#: docs/8.x/collections.md:block 720 (paragraph)
msgid "<a name=\"lazy-collections\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 721 (header)
msgid "Lazy Collections"
msgstr ""

#: docs/8.x/collections.md:block 722 (paragraph)
msgid "<a name=\"lazy-collection-introduction\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 724 (quote)
msgid "{note} Before learning more about Laravel's lazy collections, take some time to familiarize yourself with [PHP generators](https://www.php.net/manual/en/language.generators.overview.php)."
msgstr ""

#: docs/8.x/collections.md:block 725 (paragraph)
msgid "To supplement the already powerful `Collection` class, the `LazyCollection` class leverages PHP's [generators](https://www.php.net/manual/en/language.generators.overview.php) to allow you to work with very large datasets while keeping memory usage low."
msgstr ""

#: docs/8.x/collections.md:block 726 (paragraph)
msgid "For example, imagine your application needs to process a multi-gigabyte log file while taking advantage of Laravel's collection methods to parse the logs. Instead of reading the entire file into memory at once, lazy collections may be used to keep only a small part of the file in memory at a given time:"
msgstr ""

#: docs/8.x/collections.md:block 727 (code)
msgid ""
"use App\\Models\\LogEntry;\n"
"use Illuminate\\Support\\LazyCollection;\n"
"\n"
"LazyCollection::make(function () {\n"
"    $handle = fopen('log.txt', 'r');\n"
"\n"
"    while (($line = fgets($handle)) !== false) {\n"
"        yield $line;\n"
"    }\n"
"})->chunk(4)->map(function ($lines) {\n"
"    return LogEntry::fromLines($lines);\n"
"})->each(function (LogEntry $logEntry) {\n"
"    // Process the log entry...\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 728 (paragraph)
msgid "Or, imagine you need to iterate through 10,000 Eloquent models. When using traditional Laravel collections, all 10,000 Eloquent models must be loaded into memory at the same time:"
msgstr ""

#: docs/8.x/collections.md:block 729 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::all()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 730 (paragraph)
msgid "However, the query builder's `cursor` method returns a `LazyCollection` instance. This allows you to still only run a single query against the database but also only keep one Eloquent model loaded in memory at a time. In this example, the `filter` callback is not executed until we actually iterate over each user individually, allowing for a drastic reduction in memory usage:"
msgstr ""

#: docs/8.x/collections.md:block 731 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::cursor()->filter(function ($user) {\n"
"    return $user->id > 500;\n"
"});\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->id;\n"
"}\n"
msgstr ""

#: docs/8.x/collections.md:block 732 (paragraph)
msgid "<a name=\"creating-lazy-collections\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 733 (header)
msgid "Creating Lazy Collections"
msgstr ""

#: docs/8.x/collections.md:block 734 (paragraph)
msgid "To create a lazy collection instance, you should pass a PHP generator function to the collection's `make` method:"
msgstr ""

#: docs/8.x/collections.md:block 735 (code)
msgid ""
"use Illuminate\\Support\\LazyCollection;\n"
"\n"
"LazyCollection::make(function () {\n"
"    $handle = fopen('log.txt', 'r');\n"
"\n"
"    while (($line = fgets($handle)) !== false) {\n"
"        yield $line;\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/collections.md:block 736 (paragraph)
msgid "<a name=\"the-enumerable-contract\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 737 (header)
msgid "The Enumerable Contract"
msgstr ""

#: docs/8.x/collections.md:block 738 (paragraph)
msgid "Almost all methods available on the `Collection` class are also available on the `LazyCollection` class. Both of these classes implement the `Illuminate\\Support\\Enumerable` contract, which defines the following methods:"
msgstr ""

#: docs/8.x/collections.md:block 740 (paragraph)
msgid "[all](#method-all) [average](#method-average) [avg](#method-avg) [chunk](#method-chunk) [chunkWhile](#method-chunkwhile) [collapse](#method-collapse) [collect](#method-collect) [combine](#method-combine) [concat](#method-concat) [contains](#method-contains) [containsStrict](#method-containsstrict) [count](#method-count) [countBy](#method-countBy) [crossJoin](#method-crossjoin) [dd](#method-dd) [diff](#method-diff) [diffAssoc](#method-diffassoc) [diffKeys](#method-diffkeys) [dump](#method-dump) [duplicates](#method-duplicates) [duplicatesStrict](#method-duplicatesstrict) [each](#method-each) [eachSpread](#method-eachspread) [every](#method-every) [except](#method-except) [filter](#method-filter) [first](#method-first) [firstWhere](#method-first-where) [flatMap](#method-flatmap) [flatten](#method-flatten) [flip](#method-flip) [forPage](#method-forpage) [get](#method-get) [groupBy](#method-groupby) [has](#method-has) [implode](#method-implode) [intersect](#method-intersect) [intersectByKeys](#method-intersectbykeys) [isEmpty](#method-isempty) [isNotEmpty](#method-isnotempty) [join](#method-join) [keyBy](#method-keyby) [keys](#method-keys) [last](#method-last) [macro](#method-macro) [make](#method-make) [map](#method-map) [mapInto](#method-mapinto) [mapSpread](#method-mapspread) [mapToGroups](#method-maptogroups) [mapWithKeys](#method-mapwithkeys) [max](#method-max) [median](#method-median) [merge](#method-merge) [mergeRecursive](#method-mergerecursive) [min](#method-min) [mode](#method-mode) [nth](#method-nth) [only](#method-only) [pad](#method-pad) [partition](#method-partition) [pipe](#method-pipe) [pluck](#method-pluck) [random](#method-random) [reduce](#method-reduce) [reject](#method-reject) [replace](#method-replace) [replaceRecursive](#method-replacerecursive) [reverse](#method-reverse) [search](#method-search) [shuffle](#method-shuffle) [skip](#method-skip) [slice](#method-slice) [some](#method-some) [sort](#method-sort) [sortBy](#method-sortby) [sortByDesc](#method-sortbydesc) [sortKeys](#method-sortkeys) [sortKeysDesc](#method-sortkeysdesc) [split](#method-split) [sum](#method-sum) [take](#method-take) [tap](#method-tap) [times](#method-times) [toArray](#method-toarray) [toJson](#method-tojson) [union](#method-union) [unique](#method-unique) [uniqueStrict](#method-uniquestrict) [unless](#method-unless) [unlessEmpty](#method-unlessempty) [unlessNotEmpty](#method-unlessnotempty) [unwrap](#method-unwrap) [values](#method-values) [when](#method-when) [whenEmpty](#method-whenempty) [whenNotEmpty](#method-whennotempty) [where](#method-where) [whereStrict](#method-wherestrict) [whereBetween](#method-wherebetween) [whereIn](#method-wherein) [whereInStrict](#method-whereinstrict) [whereInstanceOf](#method-whereinstanceof) [whereNotBetween](#method-wherenotbetween) [whereNotIn](#method-wherenotin) [whereNotInStrict](#method-wherenotinstrict) [wrap](#method-wrap) [zip](#method-zip)"
msgstr ""

#: docs/8.x/collections.md:block 742 (quote)
msgid "{note} Methods that mutate the collection (such as `shift`, `pop`, `prepend` etc.) are **not** available on the `LazyCollection` class."
msgstr ""

#: docs/8.x/collections.md:block 743 (paragraph)
msgid "<a name=\"lazy-collection-methods\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 744 (header)
msgid "Lazy Collection Methods"
msgstr ""

#: docs/8.x/collections.md:block 745 (paragraph)
msgid "In addition to the methods defined in the `Enumerable` contract, the `LazyCollection` class contains the following methods:"
msgstr ""

#: docs/8.x/collections.md:block 746 (paragraph)
msgid "<a name=\"method-takeUntilTimeout\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 747 (header)
msgid "`takeUntilTimeout()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 748 (paragraph)
msgid "The `takeUntilTimeout` method returns a new lazy collection that will enumerate values until the specified time. After that time, the collection will then stop enumerating:"
msgstr ""

#: docs/8.x/collections.md:block 749 (code)
msgid ""
"$lazyCollection = LazyCollection::times(INF)\n"
"    ->takeUntilTimeout(now()->addMinute());\n"
"\n"
"$lazyCollection->each(function ($number) {\n"
"    dump($number);\n"
"\n"
"    sleep(1);\n"
"});\n"
"\n"
"// 1\n"
"// 2\n"
"// ...\n"
"// 58\n"
"// 59\n"
msgstr ""

#: docs/8.x/collections.md:block 750 (paragraph)
msgid "To illustrate the usage of this method, imagine an application that submits invoices from the database using a cursor. You could define a [scheduled task](/docs/{{version}}/scheduling) that runs every 15 minutes and only processes invoices for a maximum of 14 minutes:"
msgstr ""

#: docs/8.x/collections.md:block 751 (code)
msgid ""
"use App\\Models\\Invoice;\n"
"use Illuminate\\Support\\Carbon;\n"
"\n"
"Invoice::pending()->cursor()\n"
"    ->takeUntilTimeout(\n"
"        Carbon::createFromTimestamp(LARAVEL_START)->add(14, 'minutes')\n"
"    )\n"
"    ->each(fn ($invoice) => $invoice->submit());\n"
msgstr ""

#: docs/8.x/collections.md:block 752 (paragraph)
msgid "<a name=\"method-tapEach\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 753 (header)
msgid "`tapEach()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 754 (paragraph)
msgid "While the `each` method calls the given callback for each item in the collection right away, the `tapEach` method only calls the given callback as the items are being pulled out of the list one by one:"
msgstr ""

#: docs/8.x/collections.md:block 755 (code)
msgid ""
"// Nothing has been dumped so far...\n"
"$lazyCollection = LazyCollection::times(INF)->tapEach(function ($value) {\n"
"    dump($value);\n"
"});\n"
"\n"
"// Three items are dumped...\n"
"$array = $lazyCollection->take(3)->all();\n"
"\n"
"// 1\n"
"// 2\n"
"// 3\n"
msgstr ""

#: docs/8.x/collections.md:block 756 (paragraph)
msgid "<a name=\"method-remember\"></a>"
msgstr ""

#: docs/8.x/collections.md:block 757 (header)
msgid "`remember()` {.collection-method}"
msgstr ""

#: docs/8.x/collections.md:block 758 (paragraph)
msgid "The `remember` method returns a new lazy collection that will remember any values that have already been enumerated and will not retrieve them again on subsequent collection enumerations:"
msgstr ""

#: docs/8.x/collections.md:block 759 (code)
msgid ""
"// No query has been executed yet...\n"
"$users = User::cursor()->remember();\n"
"\n"
"// The query is executed...\n"
"// The first 5 users are hydrated from the database...\n"
"$users->take(5)->all();\n"
"\n"
"// First 5 users come from the collection's cache...\n"
"// The rest are hydrated from the database...\n"
"$users->take(20)->all();\n"
msgstr ""

#: docs/9.x/collections.md:block 27 (paragraph)
msgid "[all](#method-all) [average](#method-average) [avg](#method-avg) [chunk](#method-chunk) [chunkWhile](#method-chunkwhile) [collapse](#method-collapse) [collect](#method-collect) [combine](#method-combine) [concat](#method-concat) [contains](#method-contains) [containsStrict](#method-containsstrict) [count](#method-count) [countBy](#method-countBy) [crossJoin](#method-crossjoin) [dd](#method-dd) [diff](#method-diff) [diffAssoc](#method-diffassoc) [diffKeys](#method-diffkeys) [doesntContain](#method-doesntcontain) [dump](#method-dump) [duplicates](#method-duplicates) [duplicatesStrict](#method-duplicatesstrict) [each](#method-each) [eachSpread](#method-eachspread) [every](#method-every) [except](#method-except) [filter](#method-filter) [first](#method-first) [firstWhere](#method-first-where) [flatMap](#method-flatmap) [flatten](#method-flatten) [flip](#method-flip) [forget](#method-forget) [forPage](#method-forpage) [get](#method-get) [groupBy](#method-groupby) [has](#method-has) [implode](#method-implode) [intersect](#method-intersect) [intersectByKeys](#method-intersectbykeys) [isEmpty](#method-isempty) [isNotEmpty](#method-isnotempty) [join](#method-join) [keyBy](#method-keyby) [keys](#method-keys) [last](#method-last) [macro](#method-macro) [make](#method-make) [map](#method-map) [mapInto](#method-mapinto) [mapSpread](#method-mapspread) [mapToGroups](#method-maptogroups) [mapWithKeys](#method-mapwithkeys) [max](#method-max) [median](#method-median) [merge](#method-merge) [mergeRecursive](#method-mergerecursive) [min](#method-min) [mode](#method-mode) [nth](#method-nth) [only](#method-only) [pad](#method-pad) [partition](#method-partition) [pipe](#method-pipe) [pipeInto](#method-pipeinto) [pipeThrough](#method-pipethrough) [pluck](#method-pluck) [pop](#method-pop) [prepend](#method-prepend) [pull](#method-pull) [push](#method-push) [put](#method-put) [random](#method-random) [range](#method-range) [reduce](#method-reduce) [reduceMany](#method-reduce-many) [reduceSpread](#method-reduce-spread) [reject](#method-reject) [replace](#method-replace) [replaceRecursive](#method-replacerecursive) [reverse](#method-reverse) [search](#method-search) [shift](#method-shift) [shuffle](#method-shuffle) [sliding](#method-sliding) [skip](#method-skip) [skipUntil](#method-skipuntil) [skipWhile](#method-skipwhile) [slice](#method-slice) [sole](#method-sole) [some](#method-some) [sort](#method-sort) [sortBy](#method-sortby) [sortByDesc](#method-sortbydesc) [sortDesc](#method-sortdesc) [sortKeys](#method-sortkeys) [sortKeysDesc](#method-sortkeysdesc) [sortKeysUsing](#method-sortkeysusing) [splice](#method-splice) [split](#method-split) [splitIn](#method-splitin) [sum](#method-sum) [take](#method-take) [takeUntil](#method-takeuntil) [takeWhile](#method-takewhile) [tap](#method-tap) [times](#method-times) [toArray](#method-toarray) [toJson](#method-tojson) [transform](#method-transform) [undot](#method-undot) [union](#method-union) [unique](#method-unique) [uniqueStrict](#method-uniquestrict) [unless](#method-unless) [unlessEmpty](#method-unlessempty) [unlessNotEmpty](#method-unlessnotempty) [unwrap](#method-unwrap) [values](#method-values) [when](#method-when) [whenEmpty](#method-whenempty) [whenNotEmpty](#method-whennotempty) [where](#method-where) [whereStrict](#method-wherestrict) [whereBetween](#method-wherebetween) [whereIn](#method-wherein) [whereInStrict](#method-whereinstrict) [whereInstanceOf](#method-whereinstanceof) [whereNotBetween](#method-wherenotbetween) [whereNotIn](#method-wherenotin) [whereNotInStrict](#method-wherenotinstrict) [whereNotNull](#method-wherenotnull) [whereNull](#method-wherenull) [wrap](#method-wrap) [zip](#method-zip)"
msgstr ""

#: docs/9.x/collections.md:block 72 (paragraph)
msgid "The `concat` method numerically reindexes keys for items concatenated onto the original collection. To maintain keys in associative collections, see the [merge](#method-merge) method."
msgstr ""

#: docs/9.x/collections.md:block 413 (paragraph)
msgid "<a name=\"method-reduce-many\"></a>"
msgstr ""

#: docs/9.x/collections.md:block 414 (header)
msgid "`reduceMany()` {.collection-method}"
msgstr ""

#: docs/9.x/collections.md:block 415 (paragraph)
msgid "The `reduceMany` method reduces the collection to an array of values, passing the results of each iteration into the subsequent iteration. This method is similar to the `reduce` method; however, it can accept multiple initial values:"
msgstr ""

#: docs/9.x/collections.md:block 416 (code)
msgid ""
"[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"    ->get()\n"
"    ->reduceMany(function ($creditsRemaining, $batch, $image) {\n"
"        if ($creditsRemaining >= $image->creditsRequired()) {\n"
"            $batch->push($image);\n"
"\n"
"            $creditsRemaining -= $image->creditsRequired();\n"
"        }\n"
"\n"
"        return [$creditsRemaining, $batch];\n"
"    }, $creditsAvailable, collect());\n"
msgstr ""

#: docs/9.x/collections.md:block 420 (code)
msgid ""
"[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"    ->get()\n"
"    ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"        if ($creditsRemaining >= $image->creditsRequired()) {\n"
"            $batch->push($image);\n"
"\n"
"            $creditsRemaining -= $image->creditsRequired();\n"
"        }\n"
"\n"
"        return [$creditsRemaining, $batch];\n"
"    }, $creditsAvailable, collect());\n"
msgstr ""
