#
msgid ""
msgstr ""

#: docs/8.x/database.md:block 1 (header)
msgid "Database: Getting Started"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Read & Write Connections](#read-and-write-connections)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Running SQL Queries](#running-queries)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Using Multiple Database Connections](#using-multiple-database-connections)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Listening For Query Events](#listening-for-query-events)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Database Transactions](#database-transactions)"
msgstr ""

#: docs/8.x/database.md:block 2 (unordered list)
msgid "[Connecting To The Database CLI](#connecting-to-the-database-cli)"
msgstr ""

#: docs/8.x/database.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/database.md:block 5 (paragraph)
msgid "Almost every modern web application interacts with a database. Laravel makes interacting with databases extremely simple across a variety of supported databases using raw SQL, a [fluent query builder](/docs/{{version}}/queries), and the [Eloquent ORM](/docs/{{version}}/eloquent). Currently, Laravel provides first-party support for five databases:"
msgstr ""

#: docs/8.x/database.md:block 7 (unordered list)
msgid "MariaDB 10.2+ ([Version Policy](https://mariadb.org/about/#maintenance-policy))"
msgstr ""

#: docs/8.x/database.md:block 7 (unordered list)
msgid "MySQL 5.7+ ([Version Policy](https://en.wikipedia.org/wiki/MySQL#Release_history))"
msgstr ""

#: docs/8.x/database.md:block 7 (unordered list)
msgid "PostgreSQL 9.6+ ([Version Policy](https://www.postgresql.org/support/versioning/))"
msgstr ""

#: docs/8.x/database.md:block 7 (unordered list)
msgid "SQLite 3.8.8+"
msgstr ""

#: docs/8.x/database.md:block 7 (unordered list)
msgid "SQL Server 2017+ ([Version Policy](https://docs.microsoft.com/en-us/lifecycle/products/?products=sql-server))"
msgstr ""

#: docs/8.x/database.md:block 10 (header)
msgid "Configuration"
msgstr ""

#: docs/8.x/database.md:block 11 (paragraph)
msgid "The configuration for Laravel's database services is located in your application's `config/database.php` configuration file. In this file, you may define all of your database connections, as well as specify which connection should be used by default. Most of the configuration options within this file are driven by the values of your application's environment variables. Examples for most of Laravel's supported database systems are provided in this file."
msgstr ""

#: docs/8.x/database.md:block 12 (paragraph)
msgid "By default, Laravel's sample [environment configuration](/docs/{{version}}/configuration#environment-configuration) is ready to use with [Laravel Sail](/docs/{{version}}/sail), which is a Docker configuration for developing Laravel applications on your local machine. However, you are free to modify your database configuration as needed for your local database."
msgstr ""

#: docs/8.x/database.md:block 14 (header)
msgid "SQLite Configuration"
msgstr ""

#: docs/8.x/database.md:block 15 (paragraph)
msgid "SQLite databases are contained within a single file on your filesystem. You can create a new SQLite database using the `touch` command in your terminal: `touch database/database.sqlite`. After the database has been created, you may easily configure your environment variables to point to this database by placing the absolute path to the database in the `DB_DATABASE` environment variable:"
msgstr ""

#: docs/8.x/database.md:block 16 (code)
msgid ""
"DB_CONNECTION=sqlite\n"
"DB_DATABASE=/absolute/path/to/database.sqlite\n"
msgstr ""

#: docs/8.x/database.md:block 17 (paragraph)
msgid "To enable foreign key constraints for SQLite connections, you should set the `DB_FOREIGN_KEYS` environment variable to `true`:"
msgstr ""

#: docs/8.x/database.md:block 18 (code)
msgid "DB_FOREIGN_KEYS=true\n"
msgstr ""

#: docs/8.x/database.md:block 20 (header)
msgid "Microsoft SQL Server Configuration"
msgstr ""

#: docs/8.x/database.md:block 21 (paragraph)
msgid "To use a Microsoft SQL Server database, you should ensure that you have the `sqlsrv` and `pdo_sqlsrv` PHP extensions installed as well as any dependencies they may require such as the Microsoft SQL ODBC driver."
msgstr ""

#: docs/8.x/database.md:block 23 (header)
msgid "Configuration Using URLs"
msgstr ""

#: docs/8.x/database.md:block 24 (paragraph)
msgid "Typically, database connections are configured using multiple configuration values such as `host`, `database`, `username`, `password`, etc. Each of these configuration values has its own corresponding environment variable. This means that when configuring your database connection information on a production server, you need to manage several environment variables."
msgstr ""

#: docs/8.x/database.md:block 25 (paragraph)
msgid "Some managed database providers such as AWS and Heroku provide a single database \"URL\" that contains all of the connection information for the database in a single string. An example database URL may look something like the following:"
msgstr ""

#: docs/8.x/database.md:block 26 (code)
msgid "mysql://root:password@127.0.0.1/forge?charset=UTF-8\n"
msgstr ""

#: docs/8.x/database.md:block 27 (paragraph)
msgid "These URLs typically follow a standard schema convention:"
msgstr ""

#: docs/8.x/database.md:block 28 (code)
msgid "driver://username:password@host:port/database?options\n"
msgstr ""

#: docs/8.x/database.md:block 29 (paragraph)
msgid "For convenience, Laravel supports these URLs as an alternative to configuring your database with multiple configuration options. If the `url` (or corresponding `DATABASE_URL` environment variable) configuration option is present, it will be used to extract the database connection and credential information."
msgstr ""

#: docs/8.x/database.md:block 31 (header)
msgid "Read & Write Connections"
msgstr ""

#: docs/8.x/database.md:block 32 (paragraph)
msgid "Sometimes you may wish to use one database connection for SELECT statements, and another for INSERT, UPDATE, and DELETE statements. Laravel makes this a breeze, and the proper connections will always be used whether you are using raw queries, the query builder, or the Eloquent ORM."
msgstr ""

#: docs/8.x/database.md:block 33 (paragraph)
msgid "To see how read / write connections should be configured, let's look at this example:"
msgstr ""

#: docs/8.x/database.md:block 34 (code)
msgid ""
"'mysql' => [\n"
"    'read' => [\n"
"        'host' => [\n"
"            '192.168.1.1',\n"
"            '196.168.1.2',\n"
"        ],\n"
"    ],\n"
"    'write' => [\n"
"        'host' => [\n"
"            '196.168.1.3',\n"
"        ],\n"
"    ],\n"
"    'sticky' => true,\n"
"    'driver' => 'mysql',\n"
"    'database' => 'database',\n"
"    'username' => 'root',\n"
"    'password' => '',\n"
"    'charset' => 'utf8mb4',\n"
"    'collation' => 'utf8mb4_unicode_ci',\n"
"    'prefix' => '',\n"
"],\n"
msgstr ""

#: docs/8.x/database.md:block 35 (paragraph)
msgid "Note that three keys have been added to the configuration array: `read`, `write` and `sticky`. The `read` and `write` keys have array values containing a single key: `host`. The rest of the database options for the `read` and `write` connections will be merged from the main `mysql` configuration array."
msgstr ""

#: docs/8.x/database.md:block 36 (paragraph)
msgid "You only need to place items in the `read` and `write` arrays if you wish to override the values from the main `mysql` array. So, in this case, `192.168.1.1` will be used as the host for the \"read\" connection, while `192.168.1.3` will be used for the \"write\" connection. The database credentials, prefix, character set, and all other options in the main `mysql` array will be shared across both connections. When multiple values exist in the `host` configuration array, a database host will be randomly chosen for each request."
msgstr ""

#: docs/8.x/database.md:block 38 (header)
msgid "The `sticky` Option"
msgstr ""

#: docs/8.x/database.md:block 39 (paragraph)
msgid "The `sticky` option is an *optional* value that can be used to allow the immediate reading of records that have been written to the database during the current request cycle. If the `sticky` option is enabled and a \"write\" operation has been performed against the database during the current request cycle, any further \"read\" operations will use the \"write\" connection. This ensures that any data written during the request cycle can be immediately read back from the database during that same request. It is up to you to decide if this is the desired behavior for your application."
msgstr ""

#: docs/8.x/database.md:block 41 (header)
msgid "Running SQL Queries"
msgstr ""

#: docs/8.x/database.md:block 42 (paragraph)
msgid "Once you have configured your database connection, you may run queries using the `DB` facade. The `DB` facade provides methods for each type of query: `select`, `update`, `insert`, `delete`, and `statement`."
msgstr ""

#: docs/8.x/database.md:block 44 (header)
msgid "Running A Select Query"
msgstr ""

#: docs/8.x/database.md:block 45 (paragraph)
msgid "To run a basic SELECT query, you may use the `select` method on the `DB` facade:"
msgstr ""

#: docs/8.x/database.md:block 46 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show a list of all of the application's users.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        $users = DB::select('select * from users where active = ?', [1]);\n"
"\n"
"        return view('user.index', ['users' => $users]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/database.md:block 47 (paragraph)
msgid "The first argument passed to the `select` method is the SQL query, while the second argument is any parameter bindings that need to be bound to the query. Typically, these are the values of the `where` clause constraints. Parameter binding provides protection against SQL injection."
msgstr ""

#: docs/8.x/database.md:block 48 (paragraph)
msgid "The `select` method will always return an `array` of results. Each result within the array will be a PHP `stdClass` object representing a record from the database:"
msgstr ""

#: docs/8.x/database.md:block 49 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::select('select * from users');\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->name;\n"
"}\n"
msgstr ""

#: docs/8.x/database.md:block 51 (header)
msgid "Using Named Bindings"
msgstr ""

#: docs/8.x/database.md:block 52 (paragraph)
msgid "Instead of using `?` to represent your parameter bindings, you may execute a query using named bindings:"
msgstr ""

#: docs/8.x/database.md:block 53 (code)
msgid "$results = DB::select('select * from users where id = :id', ['id' => 1]);\n"
msgstr ""

#: docs/8.x/database.md:block 55 (header)
msgid "Running An Insert Statement"
msgstr ""

#: docs/8.x/database.md:block 56 (paragraph)
msgid "To execute an `insert` statement, you may use the `insert` method on the `DB` facade. Like `select`, this method accepts the SQL query as its first argument and bindings as its second argument:"
msgstr ""

#: docs/8.x/database.md:block 57 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);\n"
msgstr ""

#: docs/8.x/database.md:block 59 (header)
msgid "Running An Update Statement"
msgstr ""

#: docs/8.x/database.md:block 60 (paragraph)
msgid "The `update` method should be used to update existing records in the database. The number of rows affected by the statement is returned by the method:"
msgstr ""

#: docs/8.x/database.md:block 61 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$affected = DB::update(\n"
"    'update users set votes = 100 where name = ?',\n"
"    ['Anita']\n"
");\n"
msgstr ""

#: docs/8.x/database.md:block 63 (header)
msgid "Running A Delete Statement"
msgstr ""

#: docs/8.x/database.md:block 64 (paragraph)
msgid "The `delete` method should be used to delete records from the database. Like `update`, the number of rows affected will be returned by the method:"
msgstr ""

#: docs/8.x/database.md:block 65 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$deleted = DB::delete('delete from users');\n"
msgstr ""

#: docs/8.x/database.md:block 67 (header)
msgid "Running A General Statement"
msgstr ""

#: docs/8.x/database.md:block 68 (paragraph)
msgid "Some database statements do not return any value. For these types of operations, you may use the `statement` method on the `DB` facade:"
msgstr ""

#: docs/8.x/database.md:block 69 (code)
msgid "DB::statement('drop table users');\n"
msgstr ""

#: docs/8.x/database.md:block 71 (header)
msgid "Running An Unprepared Statement"
msgstr ""

#: docs/8.x/database.md:block 72 (paragraph)
msgid "Sometimes you may want to execute an SQL statement without binding any values. You may use the `DB` facade's `unprepared` method to accomplish this:"
msgstr ""

#: docs/8.x/database.md:block 73 (code)
msgid "DB::unprepared('update users set votes = 100 where name = \"Dries\"');\n"
msgstr ""

#: docs/8.x/database.md:block 74 (quote)
msgid "{note} Since unprepared statements do not bind parameters, they may be vulnerable to SQL injection. You should never allow user controlled values within an unprepared statement."
msgstr ""

#: docs/8.x/database.md:block 76 (header)
msgid "Implicit Commits"
msgstr ""

#: docs/8.x/database.md:block 77 (paragraph)
msgid "When using the `DB` facade's `statement` and `unprepared` methods within transactions you must be careful to avoid statements that cause [implicit commits](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html). These statements will cause the database engine to indirectly commit the entire transaction, leaving Laravel unaware of the database's transaction level. An example of such a statement is creating a database table:"
msgstr ""

#: docs/8.x/database.md:block 78 (code)
msgid "DB::unprepared('create table a (col varchar(1) null)');\n"
msgstr ""

#: docs/8.x/database.md:block 79 (paragraph)
msgid "Please refer to the MySQL manual for [a list of all statements](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html) that trigger implicit commits."
msgstr ""

#: docs/8.x/database.md:block 81 (header)
msgid "Using Multiple Database Connections"
msgstr ""

#: docs/8.x/database.md:block 82 (paragraph)
msgid "If your application defines multiple connections in your `config/database.php` configuration file, you may access each connection via the `connection` method provided by the `DB` facade. The connection name passed to the `connection` method should correspond to one of the connections listed in your `config/database.php` configuration file or configured at runtime using the `config` helper:"
msgstr ""

#: docs/8.x/database.md:block 83 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::connection('sqlite')->select(...);\n"
msgstr ""

#: docs/8.x/database.md:block 84 (paragraph)
msgid "You may access the raw, underlying PDO instance of a connection using the `getPdo` method on a connection instance:"
msgstr ""

#: docs/8.x/database.md:block 85 (code)
msgid "$pdo = DB::connection()->getPdo();\n"
msgstr ""

#: docs/8.x/database.md:block 87 (header)
msgid "Listening For Query Events"
msgstr ""

#: docs/8.x/database.md:block 88 (paragraph)
msgid "If you would like to specify a closure that is invoked for each SQL query executed by your application, you may use the `DB` facade's `listen` method. This method can be useful for logging queries or debugging. You may register your query listener closure in the `boot` method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#: docs/8.x/database.md:block 89 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        DB::listen(function ($query) {\n"
"            // $query->sql;\n"
"            // $query->bindings;\n"
"            // $query->time;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/database.md:block 91 (header)
msgid "Database Transactions"
msgstr ""

#: docs/8.x/database.md:block 92 (paragraph)
msgid "You may use the `transaction` method provided by the `DB` facade to run a set of operations within a database transaction. If an exception is thrown within the transaction closure, the transaction will automatically be rolled back and the exception is re-thrown. If the closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the `transaction` method:"
msgstr ""

#: docs/8.x/database.md:block 93 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::transaction(function () {\n"
"    DB::update('update users set votes = 1');\n"
"\n"
"    DB::delete('delete from posts');\n"
"});\n"
msgstr ""

#: docs/8.x/database.md:block 95 (header)
msgid "Handling Deadlocks"
msgstr ""

#: docs/8.x/database.md:block 96 (paragraph)
msgid "The `transaction` method accepts an optional second argument which defines the number of times a transaction should be retried when a deadlock occurs. Once these attempts have been exhausted, an exception will be thrown:"
msgstr ""

#: docs/8.x/database.md:block 97 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::transaction(function () {\n"
"    DB::update('update users set votes = 1');\n"
"\n"
"    DB::delete('delete from posts');\n"
"}, 5);\n"
msgstr ""

#: docs/8.x/database.md:block 99 (header)
msgid "Manually Using Transactions"
msgstr ""

#: docs/8.x/database.md:block 100 (paragraph)
msgid "If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the `beginTransaction` method provided by the `DB` facade:"
msgstr ""

#: docs/8.x/database.md:block 101 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::beginTransaction();\n"
msgstr ""

#: docs/8.x/database.md:block 102 (paragraph)
msgid "You can rollback the transaction via the `rollBack` method:"
msgstr ""

#: docs/8.x/database.md:block 103 (code)
msgid "DB::rollBack();\n"
msgstr ""

#: docs/8.x/database.md:block 104 (paragraph)
msgid "Lastly, you can commit a transaction via the `commit` method:"
msgstr ""

#: docs/8.x/database.md:block 105 (code)
msgid "DB::commit();\n"
msgstr ""

#: docs/8.x/database.md:block 106 (quote)
msgid "{tip} The `DB` facade's transaction methods control the transactions for both the [query builder](/docs/{{version}}/queries) and [Eloquent ORM](/docs/{{version}}/eloquent)."
msgstr ""

#: docs/8.x/database.md:block 108 (header)
msgid "Connecting To The Database CLI"
msgstr ""

#: docs/8.x/database.md:block 109 (paragraph)
msgid "If you would like to connect to your database's CLI, you may use the `db` Artisan command:"
msgstr ""

#: docs/8.x/database.md:block 110 (code)
msgid "php artisan db\n"
msgstr ""

#: docs/8.x/database.md:block 111 (paragraph)
msgid "If needed, you may specify a database connection name to connect to a database connection that is not the default connection:"
msgstr ""

#: docs/8.x/database.md:block 112 (code)
msgid "php artisan db mysql\n"
msgstr ""

#: docs/9.x/database.md:block 2 (unordered list)
msgid "[Monitoring Cumulative Query Time](#monitoring-cumulative-query-time)"
msgstr ""

#: docs/9.x/database.md:block 7 (unordered list)
msgid "PostgreSQL 10.0+ ([Version Policy](https://www.postgresql.org/support/versioning/))"
msgstr ""

#: docs/9.x/database.md:block 51 (header)
msgid "Selecting Scalar Values"
msgstr ""

#: docs/9.x/database.md:block 52 (paragraph)
msgid "Sometimes your database query may result in a single, scalar value. Instead of being required to retrieve the query's scalar result from a record object, Laravel allows you to retrieve this value directly using the `scalar` method:"
msgstr ""

#: docs/9.x/database.md:block 53 (code)
msgid ""
"$burgers = DB::scalar(\n"
"    \"select count(case when food = 'burger' then 1 end) as burgers from menu\"\n"
");\n"
msgstr ""

#: docs/9.x/database.md:block 78 (quote)
msgid "**Warning** Since unprepared statements do not bind parameters, they may be vulnerable to SQL injection. You should never allow user controlled values within an unprepared statement."
msgstr ""

#: docs/9.x/database.md:block 87 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::connection('sqlite')->select(/* ... */);\n"
msgstr ""

#: docs/9.x/database.md:block 95 (header)
msgid "Monitoring Cumulative Query Time"
msgstr ""

#: docs/9.x/database.md:block 96 (paragraph)
msgid "A common performance bottleneck of modern web applications is the amount of time they spend querying databases. Thankfully, Laravel can invoke a closure or callback of your choice when it spends too much time querying the database during a single request. To get started, provide a query time threshold (in milliseconds) and closure to the `whenQueryingForLongerThan` method. You may invoke this method in the `boot` method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#: docs/9.x/database.md:block 97 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Database\\Connection;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        DB::whenQueryingForLongerThan(500, function (Connection $connection) {\n"
"            // Notify development team...\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/database.md:block 114 (quote)
msgid "**Note** The `DB` facade's transaction methods control the transactions for both the [query builder](/docs/{{version}}/queries) and [Eloquent ORM](/docs/{{version}}/eloquent)."
msgstr ""

#: docs/master/database.md:block 5 (paragraph)
msgid "Almost every modern web application interacts with a database. Laravel makes interacting with databases extremely simple across a variety of supported databases using raw SQL, a [fluent query builder](/docs/{{version}}/queries), and the [Eloquent ORM](/docs/{{version}}/eloquent). Currently, Laravel provides first-party support for four databases:"
msgstr ""
