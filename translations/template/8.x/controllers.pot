# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 14:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/controllers.md:1
#, no-wrap
msgid "Controllers"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/controllers.md:17
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:17
#, no-wrap
msgid ""
"- [Writing Controllers](#writing-controllers)\n"
"    - [Basic Controllers](#basic-controllers)\n"
"    - [Single Action Controllers](#single-action-controllers)\n"
"- [Controller Middleware](#controller-middleware)\n"
"- [Resource Controllers](#resource-controllers)\n"
"    - [Partial Resource Routes](#restful-partial-resource-routes)\n"
"    - [Nested Resources](#restful-nested-resources)\n"
"    - [Naming Resource Routes](#restful-naming-resource-routes)\n"
"    - [Naming Resource Route "
"Parameters](#restful-naming-resource-route-parameters)\n"
"    - [Scoping Resource Routes](#restful-scoping-resource-routes)\n"
"    - [Localizing Resource URIs](#restful-localizing-resource-uris)\n"
"    - [Supplementing Resource "
"Controllers](#restful-supplementing-resource-controllers)\n"
"- [Dependency Injection & "
"Controllers](#dependency-injection-and-controllers)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:19
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:19
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:22
msgid ""
"Instead of defining all of your request handling logic as closures in your "
"route files, you may wish to organize this behavior using \"controller\" "
"classes. Controllers can group related request handling logic into a single "
"class. For example, a `UserController` class might handle all incoming "
"requests related to users, including showing, creating, updating, and "
"deleting users. By default, controllers are stored in the "
"`app/Http/Controllers` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:24
#, no-wrap
msgid "<a name=\"writing-controllers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:24
#, no-wrap
msgid "Writing Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:27
#, no-wrap
msgid "<a name=\"basic-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:27
#, no-wrap
msgid "Basic Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:30
msgid ""
"Let's take a look at an example of a basic controller. Note that the "
"controller extends the base controller class included with Laravel: "
"`App\\Http\\Controllers\\Controller`:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:32 docs/8.x/controllers.md:70 docs/8.x/controllers.md:356 docs/8.x/controllers.md:386 docs/8.x/controllers.md:416
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:34 docs/8.x/controllers.md:72 docs/8.x/controllers.md:358 docs/8.x/controllers.md:388 docs/8.x/controllers.md:418
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:37 docs/8.x/controllers.md:75
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:53
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for a given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\View\\View\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            return view('user.profile', [\n"
"                'user' => User::findOrFail($id)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:55
msgid "You can define a route to this controller method like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:57 docs/8.x/controllers.md:410
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:59
#, no-wrap
msgid "    Route::get('/user/{id}', [UserController::class, 'show']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:61
msgid ""
"When an incoming request matches the specified route URI, the `show` method "
"on the `App\\Http\\Controllers\\UserController` class will be invoked and "
"the route parameters will be passed to the method."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:63
#, no-wrap
msgid ""
"> {tip} Controllers are not **required** to extend a base class. However, "
"you will not have access to convenient features such as the `middleware` and "
"`authorize` methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:65
#, no-wrap
msgid "<a name=\"single-action-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:65
#, no-wrap
msgid "Single Action Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:68
msgid ""
"If a controller action is particularly complex, you might find it convenient "
"to dedicate an entire controller class to that single action. To accomplish "
"this, you may define a single `__invoke` method within the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:88
#, no-wrap
msgid ""
"    class ProvisionServer extends Controller\n"
"    {\n"
"        /**\n"
"         * Provision a new web server.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function __invoke()\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:90
msgid ""
"When registering routes for single action controllers, you do not need to "
"specify a controller method. Instead, you may simply pass the name of the "
"controller to the router:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:92
#, no-wrap
msgid "    use App\\Http\\Controllers\\ProvisionServer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:94
#, no-wrap
msgid "    Route::post('/server', ProvisionServer::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:96
msgid ""
"You may generate an invokable controller by using the `--invokable` option "
"of the `make:controller` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:98
#, no-wrap
msgid "    php artisan make:controller ProvisionServer --invokable\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:100
#, no-wrap
msgid ""
"> {tip} Controller stubs may be customized using [stub "
"publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:102
#, no-wrap
msgid "<a name=\"controller-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:102
#, no-wrap
msgid "Controller Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:105
msgid ""
"[Middleware](/docs/{{version}}/middleware) may be assigned to the "
"controller's routes in your route files:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:107
#, no-wrap
msgid ""
"    Route::get('profile', [UserController::class, "
"'show'])->middleware('auth');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:109
msgid ""
"Or, you may find it convenient to specify middleware within your "
"controller's constructor. Using the `middleware` method within your "
"controller's constructor, you can assign middleware to the controller's "
"actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:124
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Instantiate a new controller instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            $this->middleware('auth');\n"
"            $this->middleware('log')->only('index');\n"
"            $this->middleware('subscribed')->except('store');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:126
msgid ""
"Controllers also allow you to register middleware using a closure. This "
"provides a convenient way to define an inline middleware for a single "
"controller without defining an entire middleware class:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:130
#, no-wrap
msgid ""
"    $this->middleware(function ($request, $next) {\n"
"        return $next($request);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:132
#, no-wrap
msgid "<a name=\"resource-controllers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:132
#, no-wrap
msgid "Resource Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:135
msgid ""
"If you think of each Eloquent model in your application as a \"resource\", "
"it is typical to perform the same sets of actions against each resource in "
"your application. For example, imagine your application contains a `Photo` "
"model and a `Movie` model. It is likely that users can create, read, update, "
"or delete these resources."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:137
msgid ""
"Because of this common use case, Laravel resource routing assigns the "
"typical create, read, update, and delete (\"CRUD\") routes to a controller "
"with a single line of code. To get started, we can use the `make:controller` "
"Artisan command's `--resource` option to quickly create a controller to "
"handle these actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:139
#, no-wrap
msgid "    php artisan make:controller PhotoController --resource\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:141
msgid ""
"This command will generate a controller at "
"`app/Http/Controllers/PhotoController.php`. The controller will contain a "
"method for each of the available resource operations. Next, you may register "
"a resource route that points to the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:143 docs/8.x/controllers.md:195 docs/8.x/controllers.md:210 docs/8.x/controllers.md:272
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:145
#, no-wrap
msgid "    Route::resource('photos', PhotoController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:147
msgid ""
"This single route declaration creates multiple routes to handle a variety of "
"actions on the resource. The generated controller will already have methods "
"stubbed for each of these actions. Remember, you can always get a quick "
"overview of your application's routes by running the `route:list` Artisan "
"command."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:149
msgid ""
"You may even register many resource controllers at once by passing an array "
"to the `resources` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:154
#, no-wrap
msgid ""
"    Route::resources([\n"
"        'photos' => PhotoController::class,\n"
"        'posts' => PostController::class,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:156
#, no-wrap
msgid "<a name=\"actions-handled-by-resource-controller\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:156
#, no-wrap
msgid "Actions Handled By Resource Controller"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:167
#, no-wrap
msgid ""
"Verb      | URI                    | Action       | Route Name\n"
"----------|------------------------|--------------|---------------------\n"
"GET       | `/photos`              | index        | photos.index\n"
"GET       | `/photos/create`       | create       | photos.create\n"
"POST      | `/photos`              | store        | photos.store\n"
"GET       | `/photos/{photo}`      | show         | photos.show\n"
"GET       | `/photos/{photo}/edit` | edit         | photos.edit\n"
"PUT/PATCH | `/photos/{photo}`      | update       | photos.update\n"
"DELETE    | `/photos/{photo}`      | destroy      | photos.destroy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:169
#, no-wrap
msgid "<a name=\"customizing-missing-model-behavior\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:169
#, no-wrap
msgid "Customizing Missing Model Behavior"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:172
msgid ""
"Typically, a 404 HTTP response will be generated if an implicitly bound "
"resource model is not found. However, you may customize this behavior by "
"calling the `missing` method when defining your resource route. The "
"`missing` method accepts a closure that will be invoked if an implicitly "
"bound model can not be found for any of the resource's routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:176
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\PhotoController;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:181
#, no-wrap
msgid ""
"    Route::resource('photos', PhotoController::class)\n"
"            ->missing(function (Request $request) {\n"
"                return Redirect::route('photos.index');\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:183
#, no-wrap
msgid "<a name=\"specifying-the-resource-model\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:183
#, no-wrap
msgid "Specifying The Resource Model"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:186
msgid ""
"If you are using [route model "
"binding](/docs/{{version}}/routing#route-model-binding) and would like the "
"resource controller's methods to type-hint a model instance, you may use the "
"`--model` option when generating the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:188
#, no-wrap
msgid "    php artisan make:controller PhotoController --resource --model=Photo\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:190
#, no-wrap
msgid "<a name=\"restful-partial-resource-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:190
#, no-wrap
msgid "Partial Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:193
msgid ""
"When declaring a resource route, you may specify a subset of actions the "
"controller should handle instead of the full set of default actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:199
#, no-wrap
msgid ""
"    Route::resource('photos', PhotoController::class)->only([\n"
"        'index', 'show'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:203
#, no-wrap
msgid ""
"    Route::resource('photos', PhotoController::class)->except([\n"
"        'create', 'store', 'update', 'destroy'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:205
#, no-wrap
msgid "<a name=\"api-resource-routes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:205
#, no-wrap
msgid "API Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:208
msgid ""
"When declaring resource routes that will be consumed by APIs, you will "
"commonly want to exclude routes that present HTML templates such as `create` "
"and `edit`. For convenience, you may use the `apiResource` method to "
"automatically exclude these two routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:212
#, no-wrap
msgid "    Route::apiResource('photos', PhotoController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:214
msgid ""
"You may register many API resource controllers at once by passing an array "
"to the `apiResources` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:217
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\PhotoController;\n"
"    use App\\Http\\Controllers\\PostController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:222
#, no-wrap
msgid ""
"    Route::apiResources([\n"
"        'photos' => PhotoController::class,\n"
"        'posts' => PostController::class,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:224
msgid ""
"To quickly generate an API resource controller that does not include the "
"`create` or `edit` methods, use the `--api` switch when executing the "
"`make:controller` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:226
#, no-wrap
msgid "    php artisan make:controller PhotoController --api\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:228
#, no-wrap
msgid "<a name=\"restful-nested-resources\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:228
#, no-wrap
msgid "Nested Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:231
msgid ""
"Sometimes you may need to define routes to a nested resource. For example, a "
"photo resource may have multiple comments that may be attached to the "
"photo. To nest the resource controllers, you may use \"dot\" notation in "
"your route declaration:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:233 docs/8.x/controllers.md:298
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoCommentController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:235
#, no-wrap
msgid "    Route::resource('photos.comments', PhotoCommentController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:237
msgid ""
"This route will register a nested resource that may be accessed with URIs "
"like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:239
#, no-wrap
msgid "    /photos/{photo}/comments/{comment}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:241
#, no-wrap
msgid "<a name=\"scoping-nested-resources\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:241
#, no-wrap
msgid "Scoping Nested Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:244
msgid ""
"Laravel's [implicit model "
"binding](/docs/{{version}}/routing#implicit-model-binding-scoping) feature "
"can automatically scope nested bindings such that the resolved child model "
"is confirmed to belong to the parent model. By using the `scoped` method "
"when defining your nested resource, you may enable automatic scoping as well "
"as instruct Laravel which field the child resource should be retrieved "
"by. For more information on how to accomplish this, please see the "
"documentation on [scoping resource "
"routes](#restful-scoping-resource-routes)."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:246
#, no-wrap
msgid "<a name=\"shallow-nesting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:246
#, no-wrap
msgid "Shallow Nesting"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:249
msgid ""
"Often, it is not entirely necessary to have both the parent and the child "
"IDs within a URI since the child ID is already a unique identifier. When "
"using unique identifiers such as auto-incrementing primary keys to identify "
"your models in URI segments, you may choose to use \"shallow nesting\":"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:251
#, no-wrap
msgid "    use App\\Http\\Controllers\\CommentController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:253
#, no-wrap
msgid ""
"    Route::resource('photos.comments', "
"CommentController::class)->shallow();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:255
msgid "This route definition will define the following routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:265
#, no-wrap
msgid ""
"Verb      | URI                               | Action       | Route Name\n"
"----------|-----------------------------------|--------------|---------------------\n"
"GET       | `/photos/{photo}/comments`        | index        | "
"photos.comments.index\n"
"GET       | `/photos/{photo}/comments/create` | create       | "
"photos.comments.create\n"
"POST      | `/photos/{photo}/comments`        | store        | "
"photos.comments.store\n"
"GET       | `/comments/{comment}`             | show         | "
"comments.show\n"
"GET       | `/comments/{comment}/edit`        | edit         | "
"comments.edit\n"
"PUT/PATCH | `/comments/{comment}`             | update       | "
"comments.update\n"
"DELETE    | `/comments/{comment}`             | destroy      | "
"comments.destroy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:267
#, no-wrap
msgid "<a name=\"restful-naming-resource-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:267
#, no-wrap
msgid "Naming Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:270
msgid ""
"By default, all resource controller actions have a route name; however, you "
"can override these names by passing a `names` array with your desired route "
"names:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:276
#, no-wrap
msgid ""
"    Route::resource('photos', PhotoController::class)->names([\n"
"        'create' => 'photos.build'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:278
#, no-wrap
msgid "<a name=\"restful-naming-resource-route-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:278
#, no-wrap
msgid "Naming Resource Route Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:281
msgid ""
"By default, `Route::resource` will create the route parameters for your "
"resource routes based on the \"singularized\" version of the resource "
"name. You can easily override this on a per resource basis using the "
"`parameters` method. The array passed into the `parameters` method should be "
"an associative array of resource names and parameter names:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:283
#, no-wrap
msgid "    use App\\Http\\Controllers\\AdminUserController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:287
#, no-wrap
msgid ""
"    Route::resource('users', AdminUserController::class)->parameters([\n"
"        'users' => 'admin_user'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:289
#, no-wrap
msgid ""
" The example above generates the following URI for the resource's `show` "
"route:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:291
#, no-wrap
msgid "    /users/{admin_user}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:293
#, no-wrap
msgid "<a name=\"restful-scoping-resource-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:293
#, no-wrap
msgid "Scoping Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:296
msgid ""
"Laravel's [scoped implicit model "
"binding](/docs/{{version}}/routing#implicit-model-binding-scoping) feature "
"can automatically scope nested bindings such that the resolved child model "
"is confirmed to belong to the parent model. By using the `scoped` method "
"when defining your nested resource, you may enable automatic scoping as well "
"as instruct Laravel which field the child resource should be retrieved by:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:302
#, no-wrap
msgid ""
"    Route::resource('photos.comments', "
"PhotoCommentController::class)->scoped([\n"
"        'comment' => 'slug',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:304
msgid ""
"This route will register a scoped nested resource that may be accessed with "
"URIs like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:306
#, no-wrap
msgid "    /photos/{photo}/comments/{comment:slug}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:308
msgid ""
"When using a custom keyed implicit binding as a nested route parameter, "
"Laravel will automatically scope the query to retrieve the nested model by "
"its parent using conventions to guess the relationship name on the "
"parent. In this case, it will be assumed that the `Photo` model has a "
"relationship named `comments` (the plural of the route parameter name) which "
"can be used to retrieve the `Comment` model."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:310
#, no-wrap
msgid "<a name=\"restful-localizing-resource-uris\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:310
#, no-wrap
msgid "Localizing Resource URIs"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:313
msgid ""
"By default, `Route::resource` will create resource URIs using English "
"verbs. If you need to localize the `create` and `edit` action verbs, you may "
"use the `Route::resourceVerbs` method. This may be done at the beginning of "
"the `boot` method within your application's "
"`App\\Providers\\RouteServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:325
#, no-wrap
msgid ""
"    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::resourceVerbs([\n"
"            'create' => 'crear',\n"
"            'edit' => 'editar',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:328
#, no-wrap
msgid ""
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:330
msgid ""
"Once the verbs have been customized, a resource route registration such as "
"`Route::resource('fotos', PhotoController::class)` will produce the "
"following URIs:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:332
#, no-wrap
msgid "    /fotos/crear\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:334
#, no-wrap
msgid "    /fotos/{foto}/editar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:336
#, no-wrap
msgid "<a name=\"restful-supplementing-resource-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:336
#, no-wrap
msgid "Supplementing Resource Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:339
msgid ""
"If you need to add additional routes to a resource controller beyond the "
"default set of resource routes, you should define those routes before your "
"call to the `Route::resource` method; otherwise, the routes defined by the "
"`resource` method may unintentionally take precedence over your supplemental "
"routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:341
#, no-wrap
msgid "    use App\\Http\\Controller\\PhotoController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:344
#, no-wrap
msgid ""
"    Route::get('/photos/popular', [PhotoController::class, 'popular']);\n"
"    Route::resource('photos', PhotoController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:346
#, no-wrap
msgid ""
"> {tip} Remember to keep your controllers focused. If you find yourself "
"routinely needing methods outside of the typical set of resource actions, "
"consider splitting your controller into two, smaller controllers.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:348
#, no-wrap
msgid "<a name=\"dependency-injection-and-controllers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:348
#, no-wrap
msgid "Dependency Injection & Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:351
#, no-wrap
msgid "<a name=\"constructor-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:351
#, no-wrap
msgid "Constructor Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:354
msgid ""
"The Laravel [service container](/docs/{{version}}/container) is used to "
"resolve all Laravel controllers. As a result, you are able to type-hint any "
"dependencies your controller may need in its constructor. The declared "
"dependencies will automatically be resolved and injected into the controller "
"instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:360
#, no-wrap
msgid "    use App\\Repositories\\UserRepository;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:367
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * The user repository instance.\n"
"         */\n"
"        protected $users;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:379
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new controller instance.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            $this->users = $users;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:381
#, no-wrap
msgid "<a name=\"method-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:381
#, no-wrap
msgid "Method Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:384
msgid ""
"In addition to constructor injection, you may also type-hint dependencies on "
"your controller's methods. A common use-case for method injection is "
"injecting the `Illuminate\\Http\\Request` instance into your controller "
"methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:390 docs/8.x/controllers.md:420
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:402
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:406
#, no-wrap
msgid ""
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:408
msgid ""
"If your controller method is also expecting input from a route parameter, "
"list your route arguments after your other dependencies. For example, if "
"your route is defined like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:412
#, no-wrap
msgid "    Route::put('/user/{id}', [UserController::class, 'update']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:414
msgid ""
"You may still type-hint the `Illuminate\\Http\\Request` and access your `id` "
"parameter by defining your controller method as follows:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:434
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the given user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  string  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request, $id)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""
