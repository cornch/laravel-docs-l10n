# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-13 00:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/octane.md:1
#, markdown-text, no-wrap
msgid "Laravel Octane"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Installation](#installation)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Server Prerequisites](#server-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[RoadRunner](#roadrunner)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Swoole](#swoole)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Serving Your Application](#serving-your-application)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Serving Your Application Via HTTPS](#serving-your-application-via-https)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Serving Your Application Via Nginx](#serving-your-application-via-nginx)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Watching For File Changes](#watching-for-file-changes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Specifying The Worker Count](#specifying-the-worker-count)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Specifying The Max Request Count](#specifying-the-max-request-count)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Reloading The Workers](#reloading-the-workers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Stopping The Server](#stopping-the-server)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Dependency Injection & Octane](#dependency-injection-and-octane)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Container Injection](#container-injection)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Request Injection](#request-injection)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Configuration Repository Injection](#configuration-repository-injection)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Managing Memory Leaks](#managing-memory-leaks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Concurrent Tasks](#concurrent-tasks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Ticks & Intervals](#ticks-and-intervals)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[The Octane Cache](#the-octane-cache)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/octane.md:25
#, markdown-text
msgid "[Tables](#tables)"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:27
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:27
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:30
#, markdown-text
msgid ""
"Laravel Octane supercharges your application's performance by serving your "
"application using high-powered application servers, including "
"[Swoole](https://swoole.co.uk) and "
"[RoadRunner](https://roadrunner.dev). Octane boots your application once, "
"keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:32
#, markdown-text, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:32
#, markdown-text, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:35
#, markdown-text
msgid "Octane may be installed via the Composer package manager:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:36
#, no-wrap
msgid "composer require laravel/octane\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:41
#, markdown-text
msgid ""
"After installing Octane, you may execute the `octane:install` Artisan "
"command, which will install Octane's configuration file into your "
"application:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:42
#, no-wrap
msgid "php artisan octane:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:47
#, markdown-text, no-wrap
msgid "<a name=\"server-prerequisites\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:47
#, markdown-text, no-wrap
msgid "Server Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:50
#, markdown-text, no-wrap
msgid "> {note} Laravel Octane requires [PHP 8.0+](https://php.net/releases/).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:52
#, markdown-text, no-wrap
msgid "<a name=\"roadrunner\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:52
#, markdown-text, no-wrap
msgid "RoadRunner"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:55
#, markdown-text
msgid ""
"[RoadRunner](https://roadrunner.dev) is powered by the RoadRunner binary, "
"which is built using Go. The first time you start a RoadRunner based Octane "
"server, Octane will offer to download and install the RoadRunner binary for "
"you."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:57
#, markdown-text, no-wrap
msgid "<a name=\"roadrunner-via-laravel-sail\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/octane.md:57
#, markdown-text, no-wrap
msgid "RoadRunner Via Laravel Sail"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:60
#, markdown-text
msgid ""
"If you plan to develop your application using [Laravel "
"Sail](/docs/{{version}}/sail), you should run the following commands to "
"install Octane and RoadRunner:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:61
#, no-wrap
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:68
#, markdown-text
msgid ""
"Next, you should start a Sail shell and use the `rr` executable to retrieve "
"the latest Linux based build of the RoadRunner binary:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:69
#, no-wrap
msgid ""
"./vendor/bin/sail shell\n"
"\n"
"# Within the Sail shell...\n"
"./vendor/bin/rr get-binary\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:77
#, markdown-text
msgid ""
"After installing the RoadRunner binary, you may exit your Sail shell "
"session. You will now need to adjust the `supervisor.conf` file used by Sail "
"to keep your application running. To get started, execute the `sail:publish` "
"Artisan command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:78 docs/8.x/octane.md:112
#, no-wrap
msgid "./vendor/bin/sail artisan sail:publish\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:83 docs/8.x/octane.md:117
#, markdown-text
msgid ""
"Next, update the `command` directive of your application's "
"`docker/supervisord.conf` file so that Sail serves your application using "
"Octane instead of the PHP development server:"
msgstr ""

#. type: Fenced code block (ini)
#: docs/8.x/octane.md:84
#, no-wrap
msgid ""
"command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan "
"octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 "
"--port=8000\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:89
#, markdown-text
msgid "Finally, ensure the `rr` binary is executable and build your Sail images:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:90
#, no-wrap
msgid ""
"chmod +x ./rr\n"
"\n"
"./vendor/bin/sail build --no-cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:97
#, markdown-text, no-wrap
msgid "<a name=\"swoole\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:97
#, markdown-text, no-wrap
msgid "Swoole"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:100
#, markdown-text
msgid ""
"If you plan to use the Swoole application server to serve your Laravel "
"Octane application, you must install the Swoole PHP extension. Typically, "
"this can be done via PECL:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:101
#, no-wrap
msgid "pecl install swoole\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:106
#, markdown-text, no-wrap
msgid "<a name=\"swoole-via-laravel-sail\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/octane.md:106
#, markdown-text, no-wrap
msgid "Swoole Via Laravel Sail"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:109
#, markdown-text, no-wrap
msgid ""
"> {note} Before serving an Octane application via Sail, ensure you have the "
"latest version of Laravel Sail and execute `./vendor/bin/sail build "
"--no-cache` within your application's root directory.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:111
#, markdown-text
msgid ""
"Alternatively, you may develop your Swoole based Octane application using "
"[Laravel Sail](/docs/{{version}}/sail), the official Docker based "
"development environment for Laravel. Laravel Sail includes the Swoole "
"extension by default. However, you will still need to adjust the "
"`supervisor.conf` file used by Sail to keep your application running. To get "
"started, execute the `sail:publish` Artisan command:"
msgstr ""

#. type: Fenced code block (ini)
#: docs/8.x/octane.md:118
#, no-wrap
msgid ""
"command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan "
"octane:start --server=swoole --host=0.0.0.0 --port=8000\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:123
#, markdown-text
msgid "Finally, build your Sail images:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:124
#, no-wrap
msgid "./vendor/bin/sail build --no-cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:129
#, markdown-text, no-wrap
msgid "<a name=\"serving-your-application\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:129
#, markdown-text, no-wrap
msgid "Serving Your Application"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:132
#, markdown-text
msgid ""
"The Octane server can be started via the `octane:start` Artisan command. By "
"default, this command will utilize the server specified by the `server` "
"configuration option of your application's `octane` configuration file:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:133
#, no-wrap
msgid "php artisan octane:start\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:138
#, markdown-text
msgid ""
"By default, Octane will start the server on port 8000, so you may access "
"your application in a web browser via `http://localhost:8000`."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:140
#, markdown-text, no-wrap
msgid "<a name=\"serving-your-application-via-https\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:140
#, markdown-text, no-wrap
msgid "Serving Your Application Via HTTPS"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:143
#, markdown-text
msgid ""
"By default, applications running via Octane generate links prefixed with "
"`http://`. The `OCTANE_HTTPS` environment variable, used within your "
"application's `config/octane.php` configuration file, can be set to `true` "
"when serving your application via HTTPS. When this configuration value is "
"set to `true`, Octane will instruct Laravel to prefix all generated links "
"with `https://`:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:144
#, no-wrap
msgid "'https' => env('OCTANE_HTTPS', false),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:149
#, markdown-text, no-wrap
msgid "<a name=\"serving-your-application-via-nginx\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:149
#, markdown-text, no-wrap
msgid "Serving Your Application Via Nginx"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:152
#, markdown-text, no-wrap
msgid ""
"> {tip} If you aren't quite ready to manage your own server configuration or "
"aren't comfortable configuring all of the various services needed to run a "
"robust Laravel Octane application, check out [Laravel "
"Forge](https://forge.laravel.com).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:154
#, markdown-text
msgid ""
"In production environments, you should serve your Octane application behind "
"a traditional web server such as a Nginx or Apache. Doing so will allow the "
"web server to serve your static assets such as images and stylesheets, as "
"well as manage your SSL certificate termination."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:156
#, markdown-text
msgid ""
"In the Nginx configuration example below file, Nginx will serve the site's "
"static assets and proxy requests to the Octane server that is running on "
"port 8000:"
msgstr ""

#. type: Fenced code block (conf)
#: docs/8.x/octane.md:157
#, no-wrap
msgid ""
"map $http_upgrade $connection_upgrade {\n"
"    default upgrade;\n"
"    ''      close;\n"
"}\n"
"\n"
"server {\n"
"    listen 80;\n"
"    listen [::]:80;\n"
"    server_name domain.com;\n"
"    server_tokens off;\n"
"    root /home/forge/domain.com/public;\n"
"\n"
"    index index.php;\n"
"\n"
"    charset utf-8;\n"
"\n"
"    location /index.php {\n"
"        try_files /not_exists @octane;\n"
"    }\n"
"\n"
"    location / {\n"
"        try_files $uri $uri/ @octane;\n"
"    }\n"
"\n"
"    location = /favicon.ico { access_log off; log_not_found off; }\n"
"    location = /robots.txt  { access_log off; log_not_found off; }\n"
"\n"
"    access_log off;\n"
"    error_log  /var/log/nginx/domain.com-error.log error;\n"
"\n"
"    error_page 404 /index.php;\n"
"\n"
"    location @octane {\n"
"        set $suffix \"\";\n"
"\n"
"        if ($uri = /index.php) {\n"
"            set $suffix ?$query_string;\n"
"        }\n"
"\n"
"        proxy_http_version 1.1;\n"
"        proxy_set_header Host $http_host;\n"
"        proxy_set_header Scheme $scheme;\n"
"        proxy_set_header SERVER_PORT $server_port;\n"
"        proxy_set_header REMOTE_ADDR $remote_addr;\n"
"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
"        proxy_set_header Upgrade $http_upgrade;\n"
"        proxy_set_header Connection $connection_upgrade;\n"
"\n"
"        proxy_pass http://127.0.0.1:8000$suffix;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:212
#, markdown-text, no-wrap
msgid "<a name=\"watching-for-file-changes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:212
#, markdown-text, no-wrap
msgid "Watching For File Changes"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:215
#, markdown-text
msgid ""
"Since your application is loaded in memory once when the Octane server "
"starts, any changes to your application's files will not be reflected when "
"you refresh your browser. For example, route definitions added to your "
"`routes/web.php` file will not be reflected until the server is "
"restarted. For convenience, you may use the `--watch` flag to instruct "
"Octane to automatically restart the server on any file changes within your "
"application:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:216
#, no-wrap
msgid "php artisan octane:start --watch\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:221
#, markdown-text
msgid ""
"Before using this feature, you should ensure that [Node](https://nodejs.org) "
"is installed within your local development environment. In addition, you "
"should install the [Chokidar](https://github.com/paulmillr/chokidar) "
"file-watching library within your project:library:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:222
#, no-wrap
msgid "npm install --save-dev chokidar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:227
#, markdown-text
msgid ""
"You may configure the directories and files that should be watched using the "
"`watch` configuration option within your application's `config/octane.php` "
"configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:229
#, markdown-text, no-wrap
msgid "<a name=\"specifying-the-worker-count\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:229
#, markdown-text, no-wrap
msgid "Specifying The Worker Count"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:232
#, markdown-text
msgid ""
"By default, Octane will start an application request worker for each CPU "
"core provided by your machine. These workers will then be used to serve "
"incoming HTTP requests as they enter your application. You may manually "
"specify how many workers you would like to start using the `--workers` "
"option when invoking the `octane:start` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:233
#, no-wrap
msgid "php artisan octane:start --workers=4\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:238
#, markdown-text
msgid ""
"If you are using the Swoole application server, you may also specify how "
"many [\"task workers\"](#concurrent-tasks) you wish to start:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:239 docs/8.x/octane.md:459
#, no-wrap
msgid "php artisan octane:start --workers=4 --task-workers=6\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:244
#, markdown-text, no-wrap
msgid "<a name=\"specifying-the-max-request-count\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:244
#, markdown-text, no-wrap
msgid "Specifying The Max Request Count"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:247
#, markdown-text
msgid ""
"To help prevent stray memory leaks, Octane can gracefully restart a worker "
"once it has handled a given number of requests. To instruct Octane to do "
"this, you may use the `--max-requests` option:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:248
#, no-wrap
msgid "php artisan octane:start --max-requests=250\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:253
#, markdown-text, no-wrap
msgid "<a name=\"reloading-the-workers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:253
#, markdown-text, no-wrap
msgid "Reloading The Workers"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:256
#, markdown-text
msgid ""
"You may gracefully restart the Octane server's application workers using the "
"`octane:reload` command. Typically, this should be done after deployment so "
"that your newly deployed code is loaded into memory and is used to serve to "
"subsequent requests:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:257
#, no-wrap
msgid "php artisan octane:reload\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:262
#, markdown-text, no-wrap
msgid "<a name=\"stopping-the-server\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:262
#, markdown-text, no-wrap
msgid "Stopping The Server"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:265
#, markdown-text
msgid "You may stop the Octane server using the `octane:stop` Artisan command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:266
#, no-wrap
msgid "php artisan octane:stop\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:271
#, markdown-text, no-wrap
msgid "<a name=\"checking-the-server-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/octane.md:271
#, markdown-text, no-wrap
msgid "Checking The Server Status"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:274
#, markdown-text
msgid ""
"You may check the current status of the Octane server using the "
"`octane:status` Artisan command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/octane.md:275
#, no-wrap
msgid "php artisan octane:status\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:280
#, markdown-text, no-wrap
msgid "<a name=\"dependency-injection-and-octane\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:280
#, markdown-text, no-wrap
msgid "Dependency Injection & Octane"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:283
#, markdown-text
msgid ""
"Since Octane boots your application once and keeps it in memory while "
"serving requests, there are a few caveats you should consider while building "
"your application. For example, the `register` and `boot` methods of your "
"application's service providers will only be executed once when the request "
"worker initially boots. On subsequent requests, the same application "
"instance will be reused."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:285
#, markdown-text
msgid ""
"In light of this, you should take special care when injecting the "
"application service container or request into any object's constructor. By "
"doing so, that object may have a stale version of the container or request "
"on subsequent requests."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:287
#, markdown-text
msgid ""
"Octane will automatically handle resetting any first-party framework state "
"between requests. However, Octane does not always know how to reset the "
"global state created by your application. Therefore, you should be aware of "
"how to build your application in a way that is Octane friendly. Below, we "
"will discuss the most common situations that may cause problems while using "
"Octane."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:289
#, markdown-text, no-wrap
msgid "<a name=\"container-injection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:289
#, markdown-text, no-wrap
msgid "Container Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:292
#, markdown-text
msgid ""
"In general, you should avoid injecting the application service container or "
"HTTP request instance into the constructors of other objects. For example, "
"the following binding injects the entire application service container into "
"an object that is bound as a singleton:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:293
#, no-wrap
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app);\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:310
#, markdown-text
msgid ""
"In this example, if the `Service` instance is resolved during the "
"application boot process, the container will be injected into the service "
"and that same container will be held by the `Service` instance on subsequent "
"requests. This **may** not be a problem for your particular application; "
"however, it can lead to the container unexpectedly missing bindings that "
"were added later in the boot cycle or by a subsequent request."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:312
#, markdown-text
msgid ""
"As a work-around, you could either stop registering the binding as a "
"singleton, or you could inject a container resolver closure into the service "
"that always resolves the current container instance:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:313
#, no-wrap
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:327
#, markdown-text
msgid ""
"The global `app` helper and the `Container::getInstance()` method will "
"always return the latest version of the application container."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:329
#, markdown-text, no-wrap
msgid "<a name=\"request-injection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:329
#, markdown-text, no-wrap
msgid "Request Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:332
#, markdown-text
msgid ""
"In general, you should avoid injecting the application service container or "
"HTTP request instance into the constructors of other objects. For example, "
"the following binding injects the entire request instance into an object "
"that is bound as a singleton:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:333
#, no-wrap
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:350
#, markdown-text
msgid ""
"In this example, if the `Service` instance is resolved during the "
"application boot process, the HTTP request will be injected into the service "
"and that same request will be held by the `Service` instance on subsequent "
"requests. Therefore, all headers, input, and query string data will be "
"incorrect, as well as all other request data."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:352
#, markdown-text
msgid ""
"As a work-around, you could either stop registering the binding as a "
"singleton, or you could inject a request resolver closure into the service "
"that always resolves the current request instance. Or, the most recommended "
"approach is simply to pass the specific request information your object "
"needs to one of the object's methods at runtime:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:353
#, no-wrap
msgid ""
"use App\\Service;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app['request']);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function ($app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n"
"\n"
"// Or...\n"
"\n"
"$service->method($request->input('name'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:370
#, markdown-text
msgid ""
"The global `request` helper will always return the request the application "
"is currently handling and is therefore safe to use within your application."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:372
#, markdown-text, no-wrap
msgid ""
"> {note} It is acceptable to type-hint the `Illuminate\\Http\\Request` "
"instance on your controller methods and route closures.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:374
#, markdown-text, no-wrap
msgid "<a name=\"configuration-repository-injection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:374
#, markdown-text, no-wrap
msgid "Configuration Repository Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:377
#, markdown-text
msgid ""
"In general, you should avoid injecting the configuration repository instance "
"into the constructors of other objects. For example, the following binding "
"injects the configuration repository into an object that is bound as a "
"singleton:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:378
#, no-wrap
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:395
#, markdown-text
msgid ""
"In this example, if the configuration values change between requests, that "
"service will not have access to the new values because it's depending on the "
"original repository instance."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:397
#, markdown-text
msgid ""
"As a work-around, you could either stop registering the binding as a "
"singleton, or you could inject a configuration repository resolver closure "
"to the class:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:398
#, no-wrap
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app->make('config'));\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:412
#, markdown-text
msgid ""
"The global `config` will always return the latest version of the "
"configuration repository and is therefore safe to use within your "
"application."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:414
#, markdown-text, no-wrap
msgid "<a name=\"managing-memory-leaks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:414
#, markdown-text, no-wrap
msgid "Managing Memory Leaks"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:417
#, markdown-text
msgid ""
"Remember, Octane keeps your application in memory between requests; "
"therefore, adding data to a statically maintained array will result in a "
"memory leak. For example, the following controller has a memory leak since "
"each request to the application will continue to add data to the static "
"`$data` array:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:418
#, no-wrap
msgid ""
"use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return void\n"
" */\n"
"public function index(Request $request)\n"
"{\n"
"    Service::$data[] = Str::random(10);\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:438
#, markdown-text
msgid ""
"While building your application, you should take special care to avoid "
"creating these types of memory leaks. It is recommended that you monitor "
"your application's memory usage during local development to ensure you are "
"not introducing new memory leaks into your application."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:440
#, markdown-text, no-wrap
msgid "<a name=\"concurrent-tasks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:440
#, markdown-text, no-wrap
msgid "Concurrent Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:443 docs/8.x/octane.md:467 docs/8.x/octane.md:489
#: docs/8.x/octane.md:517
#, markdown-text, no-wrap
msgid "> {note} This feature requires [Swoole](#swoole).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:445
#, markdown-text
msgid ""
"When using Swoole, you may execute operations concurrently via light-weight "
"background tasks. You may accomplish this using Octane's `concurrently` "
"method. You may combine this method with PHP array destructuring to retrieve "
"the results of each operation:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:446
#, no-wrap
msgid ""
"use App\\User;\n"
"use App\\Server;\n"
"use Laravel\\Octane\\Facades\\Octane;\n"
"\n"
"[$users, $servers] = Octane::concurrently([\n"
"    fn () => User::all(),\n"
"    fn () => Server::all(),\n"
"]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:458
#, markdown-text
msgid ""
"Concurrent tasks processed by Octane utilize Swoole's \"task workers\", and "
"execute within an entirely different process than the incoming request. The "
"amount of workers available to process concurrent tasks is determined by the "
"`--task-workers` directive on the `octane:start` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:464
#, markdown-text, no-wrap
msgid "<a name=\"ticks-and-intervals\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:464
#, markdown-text, no-wrap
msgid "Ticks & Intervals"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:469
#, markdown-text
msgid ""
"When using Swoole, you may register \"tick\" operations that will be "
"executed every specified number of seconds. You may register \"tick\" "
"callbacks via the `tick` method. The first argument provided to the `tick` "
"method should be a string that represents the name of the ticker. The second "
"argument should be a callable that will be invoked at the specified "
"interval."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:471
#, markdown-text
msgid ""
"In this example, we will register a closure to be invoked every 10 "
"seconds. Typically, the `tick` method should be called within the `boot` "
"method of one of your application's service providers:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:472
#, no-wrap
msgid ""
"Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:478
#, markdown-text
msgid ""
"Using the `immediate` method, you may instruct Octane to immediately invoke "
"the tick callback when the Octane server initially boots, and every N "
"seconds thereafter:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:479
#, no-wrap
msgid ""
"Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10)\n"
"        ->immediate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:486
#, markdown-text, no-wrap
msgid "<a name=\"the-octane-cache\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:486
#, markdown-text, no-wrap
msgid "The Octane Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:491
#, markdown-text
msgid ""
"When using Swoole, you may leverage the Octane cache driver, which provides "
"read and write speeds of up to 2 million operations per second. Therefore, "
"this cache driver is an excellent choice for applications that need extreme "
"read / write speeds from their caching layer."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:493
#, markdown-text
msgid ""
"This cache driver is powered by [Swoole "
"tables](https://www.swoole.co.uk/docs/modules/swoole-table). All data stored "
"in the cache is available to all workers on the server. However, the cached "
"data will be flushed when the server is restarted:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:494
#, no-wrap
msgid "Cache::store('octane')->put('framework', 'Laravel', 30);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:499
#, markdown-text, no-wrap
msgid ""
"> {tip} The maximum number of entries allowed in the Octane cache may be "
"defined in your application's `octane` configuration file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:501
#, markdown-text, no-wrap
msgid "<a name=\"cache-intervals\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/octane.md:501
#, markdown-text, no-wrap
msgid "Cache Intervals"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:504
#, markdown-text
msgid ""
"In addition to the typical methods provided by Laravel's cache system, the "
"Octane cache driver features interval based caches. These caches are "
"automatically refreshed at the specified interval and should be registered "
"within the `boot` method of one of your application's service providers. For "
"example, the following cache will be refreshed every five seconds:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:505
#, no-wrap
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:514
#, markdown-text, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/octane.md:514
#, markdown-text, no-wrap
msgid "Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:519
#, markdown-text
msgid ""
"When using Swoole, you may define and interact with your own arbitrary "
"[Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). Swoole "
"tables provide extreme performance throughput and the data in these tables "
"can be accessed by all workers on the server. However, the data within them "
"will be lost when the server is restarted."
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:521
#, markdown-text
msgid ""
"Tables should be defined within the `tables` configuration array of your "
"application's `octane` configuration file. An example table that allows a "
"maximum of 1000 rows is already configured for you. The maximum size of "
"string columns may be configured by specifying the column size after the "
"column type as seen below:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:522
#, no-wrap
msgid ""
"'tables' => [\n"
"    'example:1000' => [\n"
"        'name' => 'string:1000',\n"
"        'votes' => 'int',\n"
"    ],\n"
"],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:532
#, markdown-text
msgid "To access a table, you may use the `Octane::table` method:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/octane.md:533
#, no-wrap
msgid ""
"use Laravel\\Octane\\Facades\\Octane;\n"
"\n"
"Octane::table('example')->set('uuid', [\n"
"    'name' => 'Nuno Maduro',\n"
"    'votes' => 1000,\n"
"]);\n"
"\n"
"return Octane::table('example')->get('uuid');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/octane.md:545
#, markdown-text, no-wrap
msgid ""
"> {note} The column types supported by Swoole tables are: `string`, `int`, "
"and `float`.\n"
msgstr ""
