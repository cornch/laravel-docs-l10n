msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/pagination.pot\n"
"X-Crowdin-File-ID: 115\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-11-28 12:05\n"

#: docs/10.x/pagination.md:block 1 (header)
msgid "Database: Pagination"
msgstr "資料庫：分頁"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Basic Usage](#basic-usage)"
msgstr "[基礎用法](#basic-usage)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Paginating Query Builder Results](#paginating-query-builder-results)"
msgstr "[為 Query Builder 的結果分頁](#paginating-query-builder-results)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Paginating Eloquent Results](#paginating-eloquent-results)"
msgstr "[為 Eloquent 的結果分頁](#paginating-eloquent-results)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Cursor Pagination](#cursor-pagination)"
msgstr "[Cursor Pagination](#cursor-pagination)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Manually Creating A Paginator](#manually-creating-a-paginator)"
msgstr "[手動建立 Paginator](#manually-creating-a-paginator)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Customizing Pagination URLs](#customizing-pagination-urls)"
msgstr "[自訂 URL](#customizing-pagination-urls)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Displaying Pagination Results](#displaying-pagination-results)"
msgstr "[顯示 Pagination 的結果](#displaying-pagination-results)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Adjusting The Pagination Link Window](#adjusting-the-pagination-link-window)"
msgstr "[調整 Pagination Link Window](#adjusting-the-pagination-link-window)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Converting Results To JSON](#converting-results-to-json)"
msgstr "[將結果轉為 JSON](#converting-results-to-json)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Customizing The Pagination View](#customizing-the-pagination-view)"
msgstr "[自訂 Pagination 的 View](#customizing-the-pagination-view)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Using Bootstrap](#using-bootstrap)"
msgstr "[使用 Bootstrap](#using-bootstrap)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Paginator and LengthAwarePaginator Instance Methods](#paginator-instance-methods)"
msgstr "[Paginator 與 LengthAwarePaginator 實體的方法](#paginator-instance-methods)"

#: docs/10.x/pagination.md:block 2 (unordered list)
msgid "[Cursor Paginator Instance Methods](#cursor-paginator-instance-methods)"
msgstr "[Cursor Paginator 實體的方法](#cursor-paginator-instance-methods)"

#: docs/10.x/pagination.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/pagination.md:block 5 (paragraph)
msgid "In other frameworks, pagination can be very painful. We hope Laravel's approach to pagination will be a breath of fresh air. Laravel's paginator is integrated with the [query builder](/docs/{{version}}/queries) and [Eloquent ORM](/docs/{{version}}/eloquent) and provides convenient, easy-to-use pagination of database records with zero configuration."
msgstr "在其他框架中，要進行分頁非常麻煩。我們希望在 Laravel 中可以非常輕鬆地做出分頁功能。Laravel 的 ^[Paginator](分頁程式)與 [Query Builder](/docs/{{version}}/queries) 以及 [Eloquent ORM](/docs/{{version}}/eloquent) 都進行了整合，不需要進行任何設定就能非常方便輕鬆地為資料庫內的資料進行分頁。"

#: docs/10.x/pagination.md:block 6 (paragraph)
msgid "By default, the HTML generated by the paginator is compatible with the [Tailwind CSS framework](https://tailwindcss.com/); however, Bootstrap pagination support is also available."
msgstr "預設情況下，Paginator 產生的 HTML 相容於  [Tailwind CSS](https://tailwindcss.com/)。不過，Laravel 也有提供 Bootstrap Pagination 的支援。"

#: docs/10.x/pagination.md:block 8 (header)
msgid "Tailwind JIT"
msgstr "Tailwind JIT"

#: docs/10.x/pagination.md:block 9 (paragraph)
msgid "If you are using Laravel's default Tailwind pagination views and the Tailwind JIT engine, you should ensure your application's `tailwind.config.js` file's `content` key references Laravel's pagination views so that their Tailwind classes are not purged:"
msgstr "若要將 Laravel 的預設 Tailwind Pagination View 與 Tailwind JIT Engine 搭配使用，則請確保專案的 `tailwind.config.js` 中，`content` 索引鍵有參照到 Laravel 的 Pagination View，以避免 Pagination View 中的 Tailwind Class 被清除："

#: docs/10.x/pagination.md:block 10 (code)
msgid "content: [\n"
"    './resources/**/*.blade.php',\n"
"    './resources/**/*.js',\n"
"    './resources/**/*.vue',\n"
"    './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',\n"
"],\n"
msgstr "content: [\n"
"    './resources/**/*.blade.php',\n"
"    './resources/**/*.js',\n"
"    './resources/**/*.vue',\n"
"    './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',\n"
"],\n"

#: docs/10.x/pagination.md:block 12 (header)
msgid "Basic Usage"
msgstr "基礎用法"

#: docs/10.x/pagination.md:block 14 (header)
msgid "Paginating Query Builder Results"
msgstr "為 Query Builder 的結果進行分頁"

#: docs/10.x/pagination.md:block 15 (paragraph)
msgid "There are several ways to paginate items. The simplest is by using the `paginate` method on the [query builder](/docs/{{version}}/queries) or an [Eloquent query](/docs/{{version}}/eloquent). The `paginate` method automatically takes care of setting the query's \"limit\" and \"offset\" based on the current page being viewed by the user. By default, the current page is detected by the value of the `page` query string argument on the HTTP request. This value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator."
msgstr "要將資料進行分頁有許多方法。最簡單的方法就是在 [Query Builder](/docs/{{version}}/queries) 或 [Eloquent query](/docs/{{version}}/eloquent) 上使用 `paginate` 方法。`paginate` 方法會自動依照使用者額目前正在檢視的頁面來設定查詢的「LIMIT」與「OFFSET」。預設情況下，會使用 HTTP Request 上的 `page` Query String 引數來偵測目前的頁面。Laravel 會自動偵測這個值，並且在 Paginator 所產生的連結中也會自動插入這個值。"

#: docs/10.x/pagination.md:block 16 (paragraph)
msgid "In this example, the only argument passed to the `paginate` method is the number of items you would like displayed \"per page\". In this case, let's specify that we would like to display `15` items per page:"
msgstr "在這個範例中，傳給 `paginate` 方法的唯一一個引數為要「^[每頁](Per Page)」要顯示的項目數。在這個例子中，我們來指定每頁要顯示 `15` 筆資料："

#: docs/10.x/pagination.md:block 17 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\View\\View;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show all application users.\n"
"     */\n"
"    public function index(): View\n"
"    {\n"
"        return view('user.index', [\n"
"            'users' => DB::table('users')->paginate(15)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"use Illuminate\\View\\View;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show all application users.\n"
"     */\n"
"    public function index(): View\n"
"    {\n"
"        return view('user.index', [\n"
"            'users' => DB::table('users')->paginate(15)\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/10.x/pagination.md:block 19 (header)
msgid "Simple Pagination"
msgstr "Simple Pagination"

#: docs/10.x/pagination.md:block 20 (paragraph)
msgid "The `paginate` method counts the total number of records matched by the query before retrieving the records from the database. This is done so that the paginator knows how many pages of records there are in total. However, if you do not plan to show the total number of pages in your application's UI then the record count query is unnecessary."
msgstr "`paginate` 方法會在從資料庫中取得資料前，先計算該查詢所包含的資料數。要這麼做 Paginator 才知道這些資料總共有多少頁。不過，如果不打算在 UI 上顯示總頁數，那就不需要去計算資料數。"

#: docs/10.x/pagination.md:block 21 (paragraph)
msgid "Therefore, if you only need to display simple \"Next\" and \"Previous\" links in your application's UI, you may use the `simplePaginate` method to perform a single, efficient query:"
msgstr "因此，如果我們只需要在網站 UI 上顯示「上一頁」與「下一頁」按鈕，則可以使用 `simplePaginate` 方法來執行單一、有效率的查詢："

#: docs/10.x/pagination.md:block 22 (code)
msgid "$users = DB::table('users')->simplePaginate(15);\n"
msgstr "$users = DB::table('users')->simplePaginate(15);\n"

#: docs/10.x/pagination.md:block 24 (header)
msgid "Paginating Eloquent Results"
msgstr "為 Eloquent 查詢結果進行分頁"

#: docs/10.x/pagination.md:block 25 (paragraph)
msgid "You may also paginate [Eloquent](/docs/{{version}}/eloquent) queries. In this example, we will paginate the `App\\Models\\User` model and indicate that we plan to display 15 records per page. As you can see, the syntax is nearly identical to paginating query builder results:"
msgstr "我們也可以為 [Eloquent](/docs/{{version}}/eloquent) 的查詢結果進行分頁。在這個例子中，我們會為 `App\\Models\\User` Model 進行分頁，並在每頁中顯示 15 筆資料。在程式碼中可以看到，Eloquent 分頁的語法幾乎與 Query Builder 的語法相同："

#: docs/10.x/pagination.md:block 26 (code)
msgid "use App\\Models\\User;\n\n"
"$users = User::paginate(15);\n"
msgstr "use App\\Models\\User;\n\n"
"$users = User::paginate(15);\n"

#: docs/10.x/pagination.md:block 27 (paragraph)
msgid "Of course, you may call the `paginate` method after setting other constraints on the query, such as `where` clauses:"
msgstr "當然，我們也可以在呼叫 `paginate` 方法前先在查詢上設定其他的查詢條件，如 `where` 子句："

#: docs/10.x/pagination.md:block 28 (code)
msgid "$users = User::where('votes', '>', 100)->paginate(15);\n"
msgstr "$users = User::where('votes', '>', 100)->paginate(15);\n"

#: docs/10.x/pagination.md:block 29 (paragraph)
msgid "You may also use the `simplePaginate` method when paginating Eloquent models:"
msgstr "我們也可以在 Eloquent Model 上使用 `simplePaginate` 方法進行分頁："

#: docs/10.x/pagination.md:block 30 (code)
msgid "$users = User::where('votes', '>', 100)->simplePaginate(15);\n"
msgstr "$users = User::where('votes', '>', 100)->simplePaginate(15);\n"

#: docs/10.x/pagination.md:block 31 (paragraph)
msgid "Similarly, you may use the `cursorPaginate` method to cursor paginate Eloquent models:"
msgstr "類似地，也可以使用 `cursorPaginate` 來以 Cursor 為 Eloquent Model 進行分頁："

#: docs/10.x/pagination.md:block 32 (code)
msgid "$users = User::where('votes', '>', 100)->cursorPaginate(15);\n"
msgstr "$users = User::where('votes', '>', 100)->cursorPaginate(15);\n"

#: docs/10.x/pagination.md:block 34 (header)
msgid "Multiple Paginator Instances Per Page"
msgstr "在同一頁中包含多個 Paginator 實體"

#: docs/10.x/pagination.md:block 35 (paragraph)
msgid "Sometimes you may need to render two separate paginators on a single screen that is rendered by your application. However, if both paginator instances use the `page` query string parameter to store the current page, the two paginator's will conflict. To resolve this conflict, you may pass the name of the query string parameter you wish to use to store the paginator's current page via the third argument provided to the `paginate`, `simplePaginate`, and `cursorPaginate` methods:"
msgstr "在網站中，有時候我們會需要在同一頁中顯示兩個不同的 Paginator。不過，如果這兩個 Paginator 實體都使用 `page` Query String 引數來保存目前頁碼的話，則這兩個 Paginator 會衝突。為了解決這樣的衝突，我們可以使用 `paginate`、`simplePaginate`、與 `cursorPaginate` 方法的第三個引數來指定用來保存該 Paginator 頁碼的 Query String 參數："

#: docs/10.x/pagination.md:block 36 (code)
msgid "use App\\Models\\User;\n\n"
"$users = User::where('votes', '>', 100)->paginate(\n"
"    $perPage = 15, $columns = ['*'], $pageName = 'users'\n"
");\n"
msgstr "use App\\Models\\User;\n\n"
"$users = User::where('votes', '>', 100)->paginate(\n"
"    $perPage = 15, $columns = ['*'], $pageName = 'users'\n"
");\n"

#: docs/10.x/pagination.md:block 38 (header)
msgid "Cursor Pagination"
msgstr "使用 Cursor 來分頁"

#: docs/10.x/pagination.md:block 39 (paragraph)
msgid "While `paginate` and `simplePaginate` create queries using the SQL \"offset\" clause, cursor pagination works by constructing \"where\" clauses that compare the values of the ordered columns contained in the query, providing the most efficient database performance available amongst all of Laravel's pagination methods. This method of pagination is particularly well-suited for large data-sets and \"infinite\" scrolling user interfaces."
msgstr "`paginate` 與 `simplePaginate` 會使用 SQL 的「Offset」子句來建立查詢，而使用 Cursor 的分頁則會建立一個「Where」子句，該子句會在查詢中用來排序的欄位上進行比較。因此，在 Laravel 所有的分頁方法中，對於資料效能而言，使用 Cursor 的分頁是最有效率的。對於大量的資料、或是可以「無限」往下滑的 UI 來說，就特別適合使用這個方法。"

#: docs/10.x/pagination.md:block 40 (paragraph)
msgid "Unlike offset based pagination, which includes a page number in the query string of the URLs generated by the paginator, cursor based pagination places a \"cursor\" string in the query string. The cursor is an encoded string containing the location that the next paginated query should start paginating and the direction that it should paginate:"
msgstr "與使用 Offset 的分頁方式不同。使用 Offset 時，Paginator 所產生的 URL 中，Query String 內會包含頁碼。而使用 Cursor 的分頁方式則會在 Query String 中包含一個「Cursor」字串。這個 Cursor 是一個經過編碼的字串，該字串用來表示下一頁的分頁查詢應從哪個地方開始分頁，以及分頁的方向為何："

#: docs/10.x/pagination.md:block 41 (code)
msgid "http://localhost/users?cursor=eyJpZCI6MTUsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0\n"
msgstr "http://localhost/users?cursor=eyJpZCI6MTUsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0\n"

#: docs/10.x/pagination.md:block 42 (paragraph)
msgid "You may create a cursor based paginator instance via the `cursorPaginate` method offered by the query builder. This method returns an instance of `Illuminate\\Pagination\\CursorPaginator`:"
msgstr "我們可以使用 Query Builder 所提供的 `cursorPaginate` 方法來建立使用 Cursor 的 Paginator 實體。該方法會回傳一個 `Illuminate\\Pagination\\CursorPaginator` 的實體："

#: docs/10.x/pagination.md:block 43 (code)
msgid "$users = DB::table('users')->orderBy('id')->cursorPaginate(15);\n"
msgstr "$users = DB::table('users')->orderBy('id')->cursorPaginate(15);\n"

#: docs/10.x/pagination.md:block 44 (paragraph)
msgid "Once you have retrieved a cursor paginator instance, you may [display the pagination results](#displaying-pagination-results) as you typically would when using the `paginate` and `simplePaginate` methods. For more information on the instance methods offered by the cursor paginator, please consult the [cursor paginator instance method documentation](#cursor-paginator-instance-methods)."
msgstr "取得 Cursor Paginator 實體後，就可以像使用 `paginate` 與 `simplePaginate` 方法一樣[顯示分頁結果](#displaying-pagination-results)。有關 Cursor Paginator 上所提供的實體方法之更多資訊，請參考 [Cursor Paginator 實體方法的說明文件](#cursor-paginator-instance-methods)。"

#: docs/10.x/pagination.md:block 45 (quote)
msgid "**Warning** Your query must contain an \"order by\" clause in order to take advantage of cursor pagination."
msgstr "**Warning** 查詢中功能必須要有「Order By」子句，才可使用 Cursor 的分頁。"

#: docs/10.x/pagination.md:block 47 (header)
msgid "Cursor vs. Offset Pagination"
msgstr "Cursor 與 Offset Pagination 的比較"

#: docs/10.x/pagination.md:block 48 (paragraph)
msgid "To illustrate the differences between offset pagination and cursor pagination, let's examine some example SQL queries. Both of the following queries will both display the \"second page\" of results for a `users` table ordered by `id`:"
msgstr "為了說明使用 Offset 的 Pagination 與使用 Cursor 的 Pagination 間有何差異，讓我們先來看看一個範例的 SQL 查詢。不管使用下面這兩個查詢中的哪個查詢，都會顯示以 `id` 排列 `users` 資料表時，「第二頁」的資料："

#: docs/10.x/pagination.md:block 49 (code)
msgid "# Offset Pagination...\n"
"select * from users order by id asc limit 15 offset 15;\n\n"
"# Cursor Pagination...\n"
"select * from users where id > 15 order by id asc limit 15;\n"
msgstr "# 使用 Offset 的 Pagination...\n"
"select * from users order by id asc limit 15 offset 15;\n\n"
"# 使用 Cursor 的 Pagination...\n"
"select * from users where id > 15 order by id asc limit 15;\n"

#: docs/10.x/pagination.md:block 50 (paragraph)
msgid "The cursor pagination query offers the following advantages over offset pagination:"
msgstr "比起使用 Offset 的 Pagination，使用 Cursor 的 Pagination 有下列優點："

#: docs/10.x/pagination.md:block 51 (unordered list)
msgid "For large data-sets, cursor pagination will offer better performance if the \"order by\" columns are indexed. This is because the \"offset\" clause scans through all previously matched data."
msgstr "當資料量龐大時，若「Order By」的欄位有索引，則使用 Cursor 的 Pagination 會比較有效率。這是因為，「Offset」子句會先掃描所有先前已經配對的資料。"

#: docs/10.x/pagination.md:block 51 (unordered list)
msgid "For data-sets with frequent writes, offset pagination may skip records or show duplicates if results have been recently added to or deleted from the page a user is currently viewing."
msgstr "如果這些資料很常寫入的話，當使用者在件事頁面時，若在這個頁面中有新增或刪除資料，使用 Offset 的 Pagination 可能會跳過或重複顯示某些資料。"

#: docs/10.x/pagination.md:block 52 (paragraph)
msgid "However, cursor pagination has the following limitations:"
msgstr "不過，使用 Cursor 的 Pagination 也有下列限制："

#: docs/10.x/pagination.md:block 53 (unordered list)
msgid "Like `simplePaginate`, cursor pagination can only be used to display \"Next\" and \"Previous\" links and does not support generating links with page numbers."
msgstr "與 `simplePaginate` 類似，使用 Cursor 的 Pagination 只能顯示「下一頁」與「上一頁」的連結，無法產生頁碼連結。"

#: docs/10.x/pagination.md:block 53 (unordered list)
msgid "It requires that the ordering is based on at least one unique column or a combination of columns that are unique. Columns with `null` values are not supported."
msgstr "在使用 Cursor 的 Pagination 中，必須至少以 1 個不重複欄位排序，或是以多個組合起來不重複的欄位進行排序。不支援有 `null` 值的欄位。"

#: docs/10.x/pagination.md:block 53 (unordered list)
msgid "Query expressions in \"order by\" clauses are supported only if they are aliased and added to the \"select\" clause as well."
msgstr "若要在「Order By」子句中包含運算式，則必須先將這些運算式加到「Select」子句內，並設定^[別名](Alias)後以別名來在「Order By」中使用。"

#: docs/10.x/pagination.md:block 53 (unordered list)
msgid "Query expressions with parameters are not supported."
msgstr "不支援有參數的查詢運算式。"

#: docs/10.x/pagination.md:block 55 (header)
msgid "Manually Creating A Paginator"
msgstr "手動建立 Paginator"

#: docs/10.x/pagination.md:block 56 (paragraph)
msgid "Sometimes you may wish to create a pagination instance manually, passing it an array of items that you already have in memory. You may do so by creating either an `Illuminate\\Pagination\\Paginator`, `Illuminate\\Pagination\\LengthAwarePaginator` or `Illuminate\\Pagination\\CursorPaginator` instance, depending on your needs."
msgstr "有時候，我們會需要手動建立 Pagination 實體，並手動傳入記憶體中已有的值。若要手動建立 Pagination，則可依照需求手動建立 `Illuminate\\Pagination\\Paginator`、`Illuminate\\Pagination\\LengthAwarePaginator`、或 `Illuminate\\Pagination\\CursorPaginator` 的實體。"

#: docs/10.x/pagination.md:block 57 (paragraph)
msgid "The `Paginator` and `CursorPaginator` classes do not need to know the total number of items in the result set; however, because of this, these classes do not have methods for retrieving the index of the last page. The `LengthAwarePaginator` accepts almost the same arguments as the `Paginator`; however, it requires a count of the total number of items in the result set."
msgstr "使用 `Paginator` 與 `CursorPaginator` 類別時，這兩個類別不需要知道資料的總數。因此，在這兩個類別上也沒有能取得最後一頁頁碼的方法。`LengthAwarePaginator` 接受的引數則幾乎與 `Paginator` 相同，不過，`LengthAwarePaginator` 必須要知道資料的總數。"

#: docs/10.x/pagination.md:block 58 (paragraph)
msgid "In other words, the `Paginator` corresponds to the `simplePaginate` method on the query builder, the `CursorPaginator` corresponds to the `cursorPaginate` method, and the `LengthAwarePaginator` corresponds to the `paginate` method."
msgstr "換句話說，`Paginator` 對應 Query Builder 上的 `simplePaginate` 方法，而 `CursorPaginator` 則是對應 `cursorPaginate` 方法，`LengthAwarePaginator` 對應 `paginate` 方法。"

#: docs/10.x/pagination.md:block 59 (quote)
msgid "**Warning** When manually creating a paginator instance, you should manually \"slice\" the array of results you pass to the paginator. If you're unsure how to do this, check out the [array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP function."
msgstr "**Warning** 手動建立 Paginator 實體時，應「切割 - Slice」要傳給 Paginator 的結果陣列。如果不知道要如何切割陣列，請參考 [array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP 函式。"

#: docs/10.x/pagination.md:block 61 (header)
msgid "Customizing Pagination URLs"
msgstr "自訂分頁的 URL"

#: docs/10.x/pagination.md:block 62 (paragraph)
msgid "By default, links generated by the paginator will match the current request's URI. However, the paginator's `withPath` method allows you to customize the URI used by the paginator when generating links. For example, if you want the paginator to generate links like `http://example.com/admin/users?page=N`, you should pass `/admin/users` to the `withPath` method:"
msgstr "預設情況下，Paginator 會產生與目前 Request 網址相同的 URI。不過，只要使用 Paginator 的 `withPath` 方法，我們就能自訂 Paginator 在產生連結時要使用的 URI。舉例來說，若我們要產生像 `http://example.com/admin/users?page=N` 這樣的連結，則我們需要將 `/admin/users` 傳給 `withPath` 方法："

#: docs/10.x/pagination.md:block 63 (code)
msgid "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->withPath('/admin/users');\n\n"
"    // ...\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->withPath('/admin/users');\n\n"
"    // ...\n"
"});\n"

#: docs/10.x/pagination.md:block 65 (header)
msgid "Appending Query String Values"
msgstr "加上 Query String 值"

#: docs/10.x/pagination.md:block 66 (paragraph)
msgid "You may append to the query string of pagination links using the `appends` method. For example, to append `sort=votes` to each pagination link, you should make the following call to `appends`:"
msgstr "可以使用 `appends` 方法來將 Query String 加到分頁連結的最後面。舉例來說，若要在每個分頁連結後方都加上 `sort=votes`，則應這樣呼叫 `appends`："

#: docs/10.x/pagination.md:block 67 (code)
msgid "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->appends(['sort' => 'votes']);\n\n"
"    // ...\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->appends(['sort' => 'votes']);\n\n"
"    // ...\n"
"});\n"

#: docs/10.x/pagination.md:block 68 (paragraph)
msgid "You may use the `withQueryString` method if you would like to append all of the current request's query string values to the pagination links:"
msgstr "若想將目前 Request 中所有的 Query String 值都加到分頁連結後，請使用 `withQueryString` 方法："

#: docs/10.x/pagination.md:block 69 (code)
msgid "$users = User::paginate(15)->withQueryString();\n"
msgstr "$users = User::paginate(15)->withQueryString();\n"

#: docs/10.x/pagination.md:block 71 (header)
msgid "Appending Hash Fragments"
msgstr "附加 Hash Fragment"

#: docs/10.x/pagination.md:block 72 (paragraph)
msgid "If you need to append a \"hash fragment\" to URLs generated by the paginator, you may use the `fragment` method. For example, to append `#users` to the end of each pagination link, you should invoke the `fragment` method like so:"
msgstr "若想在 Paginator 產生的網址後方加上「Hash Fragment」，請使用 `fragment` 方法。舉例來說，若要在每個分頁鏈接後方加上 `#users`，則請像這樣叫用 `fragment` 方法："

#: docs/10.x/pagination.md:block 73 (code)
msgid "$users = User::paginate(15)->fragment('users');\n"
msgstr "$users = User::paginate(15)->fragment('users');\n"

#: docs/10.x/pagination.md:block 75 (header)
msgid "Displaying Pagination Results"
msgstr "顯示分頁結果"

#: docs/10.x/pagination.md:block 76 (paragraph)
msgid "When calling the `paginate` method, you will receive an instance of `Illuminate\\Pagination\\LengthAwarePaginator`, while calling the `simplePaginate` method returns an instance of `Illuminate\\Pagination\\Paginator`. And, finally, calling the `cursorPaginate` method returns an instance of `Illuminate\\Pagination\\CursorPaginator`."
msgstr "呼叫 `paginate` 方法時，該方法會回傳 `Illuminate\\Pagination\\LengthAwarePaginator` 的實體，而呼叫 `simplePaginate` 方法時，則會回傳 `Illuminate\\Pagination\\Paginator` 的實體。最後，當呼叫 `cursorPaginate` 方法時，會回傳 `Illuminate\\Pagination\\CursorPaginator` 的實體。"

#: docs/10.x/pagination.md:block 77 (paragraph)
msgid "These objects provide several methods that describe the result set. In addition to these helper methods, the paginator instances are iterators and may be looped as an array. So, once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade):"
msgstr "這些物件都提供了各種用來描述分頁結果資料的方法。出了這些輔助方法外，Paginator 實體也是迭代器，所以可以像陣列一樣，以迴圈存取 Paginator 實體。因此，取得結果後，我們就可以使用 [Blade](/docs/{{version}}/blade) 來顯示結果並轉譯出頁面的連結："

#: docs/10.x/pagination.md:block 78 (code)
msgid "<div class=\"container\">\n"
"    @foreach ($users as $user)\n"
"        {{ $user->name }}\n"
"    @endforeach\n"
"</div>\n\n"
"{{ $users->links() }}\n"
msgstr "<div class=\"container\">\n"
"    @foreach ($users as $user)\n"
"        {{ $user->name }}\n"
"    @endforeach\n"
"</div>\n\n"
"{{ $users->links() }}\n"

#: docs/10.x/pagination.md:block 79 (paragraph)
msgid "The `links` method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper `page` query string variable. Remember, the HTML generated by the `links` method is compatible with the [Tailwind CSS framework](https://tailwindcss.com)."
msgstr "`links` 方法會將分頁結果中其他頁面的連結轉譯出來。轉譯出來的這些連結都會包含適當的 `page` Query String 變數。請記得，由 `links` 方法所產生的 HTML 連結相容於 [Tailwind CSS 框架](https://tailwindcss.com)。 "

#: docs/10.x/pagination.md:block 81 (header)
msgid "Adjusting The Pagination Link Window"
msgstr "調整分頁連結的 Window"

#: docs/10.x/pagination.md:block 82 (paragraph)
msgid "When the paginator displays pagination links, the current page number is displayed as well as links for the three pages before and after the current page. Using the `onEachSide` method, you may control how many additional links are displayed on each side of the current page within the middle, sliding window of links generated by the paginator:"
msgstr "Paginator 在顯示分頁連結時，會顯示目前的頁碼以及該頁碼兩側各三頁的連結。只要使用 `onEachSide` 方法，就能控制 Paginator 在產生連結時目前頁碼的兩側各要顯示多少頁："

#: docs/10.x/pagination.md:block 83 (code)
msgid "{{ $users->onEachSide(5)->links() }}\n"
msgstr "{{ $users->onEachSide(5)->links() }}\n"

#: docs/10.x/pagination.md:block 85 (header)
msgid "Converting Results To JSON"
msgstr "將分頁結果轉為 JSON"

#: docs/10.x/pagination.md:block 86 (paragraph)
msgid "The Laravel paginator classes implement the `Illuminate\\Contracts\\Support\\Jsonable` Interface contract and expose the `toJson` method, so it's very easy to convert your pagination results to JSON. You may also convert a paginator instance to JSON by returning it from a route or controller action:"
msgstr "Laravel 的 Paginator 類別實作了 `Illuminate\\Contracts\\Support\\Jsonable` 介面 Contract，並提供了一個 `toJson` 方法。因此，要將分頁結果轉為 JSON 非常簡單。我們也可以在 Route 或 Controller 動作中回傳 Paginator 實體來將 Paginator 實體轉為 JSON："

#: docs/10.x/pagination.md:block 87 (code)
msgid "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    return User::paginate();\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    return User::paginate();\n"
"});\n"

#: docs/10.x/pagination.md:block 88 (paragraph)
msgid "The JSON from the paginator will include meta information such as `total`, `current_page`, `last_page`, and more. The result records are available via the `data` key in the JSON array. Here is an example of the JSON created by returning a paginator instance from a route:"
msgstr "Paginator 轉換出來的 JSON 中會包含一些^[詮釋](Meta)資訊，如 `total`、`current_page`、`last_page`……等。在 JSON 陣列中，分頁結果的資料放在 `data` 索引鍵中。下列為從 Route 中回傳 Paginator 實體所產生的 JSON 範例："

#: docs/10.x/pagination.md:block 89 (code)
msgid "{\n"
"   \"total\": 50,\n"
"   \"per_page\": 15,\n"
"   \"current_page\": 1,\n"
"   \"last_page\": 4,\n"
"   \"first_page_url\": \"http://laravel.app?page=1\",\n"
"   \"last_page_url\": \"http://laravel.app?page=4\",\n"
"   \"next_page_url\": \"http://laravel.app?page=2\",\n"
"   \"prev_page_url\": null,\n"
"   \"path\": \"http://laravel.app\",\n"
"   \"from\": 1,\n"
"   \"to\": 15,\n"
"   \"data\":[\n"
"        {\n"
"            // Record...\n"
"        },\n"
"        {\n"
"            // Record...\n"
"        }\n"
"   ]\n"
"}\n"
msgstr "{\n"
"   \"total\": 50,\n"
"   \"per_page\": 15,\n"
"   \"current_page\": 1,\n"
"   \"last_page\": 4,\n"
"   \"first_page_url\": \"http://laravel.app?page=1\",\n"
"   \"last_page_url\": \"http://laravel.app?page=4\",\n"
"   \"next_page_url\": \"http://laravel.app?page=2\",\n"
"   \"prev_page_url\": null,\n"
"   \"path\": \"http://laravel.app\",\n"
"   \"from\": 1,\n"
"   \"to\": 15,\n"
"   \"data\":[\n"
"        {\n"
"            // 資料...\n"
"        },\n"
"        {\n"
"            // 資料...\n"
"        }\n"
"   ]\n"
"}\n"

#: docs/10.x/pagination.md:block 91 (header)
msgid "Customizing The Pagination View"
msgstr "自訂分頁的 View"

#: docs/10.x/pagination.md:block 92 (paragraph)
msgid "By default, the views rendered to display the pagination links are compatible with the [Tailwind CSS](https://tailwindcss.com) framework. However, if you are not using Tailwind, you are free to define your own views to render these links. When calling the `links` method on a paginator instance, you may pass the view name as the first argument to the method:"
msgstr "預設情況下，轉譯出來顯示分頁連結的 View 是相容於 [Tailwind CSS](https://tailwindcss.com) 框架的。不過，若不使用 Tailwind，則也可以自行定義自己的 View 來轉譯這些連結。在 Paginator 實體上呼叫 `links` 方法時，可傳入 View 的名稱作為該方法的第一個引數："

#: docs/10.x/pagination.md:block 93 (code)
msgid "{{ $paginator->links('view.name') }}\n\n"
"<!-- Passing additional data to the view... -->\n"
"{{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"
msgstr "{{ $paginator->links('view.name') }}\n\n"
"<!-- 傳入額外資料給 View... -->\n"
"{{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"

#: docs/10.x/pagination.md:block 94 (paragraph)
msgid "However, the easiest way to customize the pagination views is by exporting them to your `resources/views/vendor` directory using the `vendor:publish` command:"
msgstr "不過，要自訂分頁連結最簡單的方法是使用 `vendor:publish` 來將分頁 View 安裝到 `resources/views/vendor` 目錄下："

#: docs/10.x/pagination.md:block 95 (code)
msgid "php artisan vendor:publish --tag=laravel-pagination\n"
msgstr "php artisan vendor:publish --tag=laravel-pagination\n"

#: docs/10.x/pagination.md:block 96 (paragraph)
msgid "This command will place the views in your application's `resources/views/vendor/pagination` directory. The `tailwind.blade.php` file within this directory corresponds to the default pagination view. You may edit this file to modify the pagination HTML."
msgstr "該指令會將分頁的 View 放到專案的 `resources/views/vendor/pagination` 目錄下。該目錄下的  `tailwind.blade.php` 為預設的分頁 View。我們可以編輯該檔案來修改分頁的 HTML。"

#: docs/10.x/pagination.md:block 97 (paragraph)
msgid "If you would like to designate a different file as the default pagination view, you may invoke the paginator's `defaultView` and `defaultSimpleView` methods within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr "若想指定用不同的檔案來作為預設的分頁 View，則可在 `App\\Providers\\AppServiceProvider` 類別的 `boot` 方法內叫用 Paginator 的 `defaultView` 與 `defaultSimpleView` 方法："

#: docs/10.x/pagination.md:block 98 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Paginator::defaultView('view-name');\n\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Paginator::defaultView('view-name');\n\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"

#: docs/10.x/pagination.md:block 100 (header)
msgid "Using Bootstrap"
msgstr "使用 Bootstrap"

#: docs/10.x/pagination.md:block 101 (paragraph)
msgid "Laravel includes pagination views built using [Bootstrap CSS](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrapFour` or `useBootstrapFive` methods within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr "Laravel 也提供了適用於 [Bootstrap CSS](https://getbootstrap.com/) 的分頁 View。若要使用這些 View 來替代預設的 Tailwind View，可以在 `App\\Providers\\AppServiceProvider` 內的 `boot` 方法中呼叫 Paginator 的 `useBootstrapFour` (用於 Bootstrap 第 4 版) 或 `useBootstrapFive` (用於 Bootstrap 第 5 版) 方法："

#: docs/10.x/pagination.md:block 102 (code)
msgid "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"    Paginator::useBootstrapFour();\n"
"}\n"
msgstr "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"    Paginator::useBootstrapFour();\n"
"}\n"

#: docs/10.x/pagination.md:block 104 (header)
msgid "Paginator / LengthAwarePaginator Instance Methods"
msgstr "Paginator / LengthAwarePaginator 實體方法"

#: docs/10.x/pagination.md:block 105 (paragraph)
msgid "Each paginator instance provides additional pagination information via the following methods:"
msgstr "各個 Paginator 的實體都有提供下列方法，可用來存取額外的資訊："

#: docs/10.x/pagination.md:block 106 (table)
msgid "Method"
msgstr "方法"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Description"
msgstr "說明"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->count()`"
msgstr "`$paginator->count()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the number of items for the current page."
msgstr "取得目前頁面的項目數。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->currentPage()`"
msgstr "`$paginator->currentPage()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the current page number."
msgstr "取得目前頁碼。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->firstItem()`"
msgstr "`$paginator->firstItem()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the result number of the first item in the results."
msgstr "取得結果中第一項的結果編號。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->getOptions()`"
msgstr "`$paginator->getOptions()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the paginator options."
msgstr "取得 Paginator 的選項。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->getUrlRange($start, $end)`"
msgstr "`$paginator->getUrlRange($start, $end)`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Create a range of pagination URLs."
msgstr "建立一組分頁 URL 的範圍。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->hasPages()`"
msgstr "`$paginator->hasPages()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Determine if there are enough items to split into multiple pages."
msgstr "判斷是否有足夠多的項目可將結果拆分為多頁顯示。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->hasMorePages()`"
msgstr "`$paginator->hasMorePages()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Determine if there are more items in the data store."
msgstr "判斷資料存放空間中是否還有更多項目。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->items()`"
msgstr "`$paginator->items()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the items for the current page."
msgstr "取得目前頁面的項目。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->lastItem()`"
msgstr "`$paginator->lastItem()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the result number of the last item in the results."
msgstr "取得結果中最後一項的結果編號。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->lastPage()`"
msgstr "`$paginator->lastPage()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the page number of the last available page. (Not available when using `simplePaginate`)."
msgstr "取得最後一頁的頁碼。(使用 `simplePaginate` 時無本方法。)"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->nextPageUrl()`"
msgstr "`$paginator->nextPageUrl()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the URL for the next page."
msgstr "取得下一頁的 URL。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->onFirstPage()`"
msgstr "`$paginator->onFirstPage()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Determine if the paginator is on the first page."
msgstr "判斷 Paginator 是否在第一頁。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->perPage()`"
msgstr "`$paginator->perPage()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "The number of items to be shown per page."
msgstr "每頁顯示的項目數。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->previousPageUrl()`"
msgstr "`$paginator->previousPageUrl()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the URL for the previous page."
msgstr "取得前一頁的 URL。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->total()`"
msgstr "`$paginator->total()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Determine the total number of matching items in the data store. (Not available when using `simplePaginate`)."
msgstr "判斷資料存放空間中符合項目的總數。(使用 `simplePaginate` 時無本方法。)"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->url($page)`"
msgstr "`$paginator->url($page)`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the URL for a given page number."
msgstr "取得給定頁碼的 URL。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->getPageName()`"
msgstr "`$paginator->getPageName()`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Get the query string variable used to store the page."
msgstr "取得用來存放頁碼的 Query String 變數。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->setPageName($name)`"
msgstr "`$paginator->setPageName($name)`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Set the query string variable used to store the page."
msgstr "設定用來存放頁碼的 Query String 變數。"

#: docs/10.x/pagination.md:block 106 (table)
msgid "`$paginator->through($callback)`"
msgstr "`$paginator->through($callback)`"

#: docs/10.x/pagination.md:block 106 (table)
msgid "Transform each item using a callback."
msgstr "使用回呼來更改各個項目。"

#: docs/10.x/pagination.md:block 108 (header)
msgid "Cursor Paginator Instance Methods"
msgstr "Cursor Paginator 的實體方法"

#: docs/10.x/pagination.md:block 109 (paragraph)
msgid "Each cursor paginator instance provides additional pagination information via the following methods:"
msgstr "各個 Cursor Paginator 的實體都有提供下列方法，可用來存取額外的資訊："

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->cursor()`"
msgstr "`$paginator->cursor()`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Get the current cursor instance."
msgstr "取得目前的 Cursor 實體。"

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->getCursorName()`"
msgstr "`$paginator->getCursorName()`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Get the query string variable used to store the cursor."
msgstr "取得用來存放 Cursor 的 Query String 變數。"

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->nextCursor()`"
msgstr "`$paginator->nextCursor()`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Get the cursor instance for the next set of items."
msgstr "取得下一組項目的 Cursor 實體。"

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->onLastPage()`"
msgstr "`$paginator->onLastPage()`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Determine if the paginator is on the last page."
msgstr "判斷 Paginator 是否在最後一頁。"

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->previousCursor()`"
msgstr "`$paginator->previousCursor()`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Get the cursor instance for the previous set of items."
msgstr "取得上一組項目的 Cursor 實體。"

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->setCursorName()`"
msgstr "`$paginator->setCursorName()`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Set the query string variable used to store the cursor."
msgstr "設定用來存放 Cursor 的 Query String 變數。"

#: docs/10.x/pagination.md:block 110 (table)
msgid "`$paginator->url($cursor)`"
msgstr "`$paginator->url($cursor)`"

#: docs/10.x/pagination.md:block 110 (table)
msgid "Get the URL for a given cursor instance."
msgstr "取得給定 Cursor 實體的 URL。"

#: docs/8.x/pagination.md:block 17 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show all application users.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        return view('user.index', [\n"
"            'users' => DB::table('users')->paginate(15)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show all application users.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        return view('user.index', [\n"
"            'users' => DB::table('users')->paginate(15)\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/8.x/pagination.md:block 45 (quote)
msgid "{note} Your query must contain an \"order by\" clause in order to take advantage of cursor pagination."
msgstr "{note} 查詢中功能必須要有「Order By」子句，才可使用 Cursor 的分頁。"

#: docs/8.x/pagination.md:block 59 (quote)
msgid "{note} When manually creating a paginator instance, you should manually \"slice\" the array of results you pass to the paginator. If you're unsure how to do this, check out the [array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP function."
msgstr "{note} 手動建立 Paginator 實體時，應「切割 - Slice」要傳給 Paginator 的結果陣列。如果不知道要如何切割陣列，請參考 [array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP 函式。"

#: docs/8.x/pagination.md:block 63 (code)
msgid "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->withPath('/admin/users');\n\n"
"    //\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->withPath('/admin/users');\n\n"
"    //\n"
"});\n"

#: docs/8.x/pagination.md:block 67 (code)
msgid "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->appends(['sort' => 'votes']);\n\n"
"    //\n"
"});\n"
msgstr "use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    $users = User::paginate(15);\n\n"
"    $users->appends(['sort' => 'votes']);\n\n"
"    //\n"
"});\n"

#: docs/8.x/pagination.md:block 77 (paragraph)
msgid "These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array. So, once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade):"
msgstr "這些物件都提供了各種用來描述分頁結果資料的方法。出了這些輔助方法外，Paginator 實體也是迭代器，所以可以像陣列一樣，以迴圈存取 Paginator 實體。因此，取得結果後，我們就可以使用 [Blade](/docs/{{version}}/blade) 來顯示結果並轉譯出頁面的連結："

#: docs/8.x/pagination.md:block 93 (code)
msgid "{{ $paginator->links('view.name') }}\n\n"
"// Passing additional data to the view...\n"
"{{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"
msgstr "{{ $paginator->links('view.name') }}\n\n"
"// 傳入額外資料給 View...\n"
"{{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"

#: docs/8.x/pagination.md:block 98 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::defaultView('view-name');\n\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::defaultView('view-name');\n\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"

#: docs/8.x/pagination.md:block 101 (paragraph)
msgid "Laravel includes pagination views built using [Bootstrap CSS](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrap` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr "Laravel 也提供了適用於 [Bootstrap CSS](https://getbootstrap.com/) 的分頁 View。若要使用這些 View 來替代預設的 Tailwind View，可以在 `App\\Providers\\AppServiceProvider` 內的 `boot` 方法中呼叫 Paginator 的 `useBootstrap` 方法："

#: docs/8.x/pagination.md:block 102 (code)
msgid "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrap();\n"
"}\n"
msgstr "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrap();\n"
"}\n"

#: docs/9.x/pagination.md:block 98 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::defaultView('view-name');\n\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Pagination\\Paginator;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::defaultView('view-name');\n\n"
"        Paginator::defaultSimpleView('view-name');\n"
"    }\n"
"}\n"

#: docs/9.x/pagination.md:block 102 (code)
msgid "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"    Paginator::useBootstrapFour();\n"
"}\n"
msgstr "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"    Paginator::useBootstrapFour();\n"
"}\n"

