msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/http-tests.pot\n"
"X-Crowdin-File-ID: 87\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 06:48\n"

#: ./docs/8.x/http-tests.md:1
#: ./docs/9.x/http-tests.md:1
#: ./docs/10.x/http-tests.md:1
#: ./docs/11.x/http-tests.md:1
#: ./docs/master/http-tests.md:1
msgctxt "H1"
msgid "HTTP Tests"
msgstr ""

#: ./docs/8.x/http-tests.md:3
#: ./docs/9.x/http-tests.md:3
#: ./docs/10.x/http-tests.md:3
#: ./docs/11.x/http-tests.md:3
#: ./docs/master/http-tests.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/http-tests.md:4
#: ./docs/9.x/http-tests.md:4
#: ./docs/10.x/http-tests.md:4
#: ./docs/11.x/http-tests.md:4
#: ./docs/master/http-tests.md:4
msgctxt "P"
msgid "[Making Requests](#making-requests)"
msgstr ""

#: ./docs/8.x/http-tests.md:5
#: ./docs/9.x/http-tests.md:5
#: ./docs/10.x/http-tests.md:5
#: ./docs/11.x/http-tests.md:5
#: ./docs/master/http-tests.md:5
msgctxt "P"
msgid "[Customizing Request Headers](#customizing-request-headers)"
msgstr ""

#: ./docs/8.x/http-tests.md:6
#: ./docs/9.x/http-tests.md:6
#: ./docs/10.x/http-tests.md:6
#: ./docs/11.x/http-tests.md:6
#: ./docs/master/http-tests.md:6
msgctxt "P"
msgid "[Cookies](#cookies)"
msgstr ""

#: ./docs/8.x/http-tests.md:7
#: ./docs/9.x/http-tests.md:7
#: ./docs/10.x/http-tests.md:7
#: ./docs/11.x/http-tests.md:7
#: ./docs/master/http-tests.md:7
msgctxt "P"
msgid "[Session / Authentication](#session-and-authentication)"
msgstr ""

#: ./docs/8.x/http-tests.md:8
#: ./docs/9.x/http-tests.md:8
#: ./docs/10.x/http-tests.md:8
#: ./docs/11.x/http-tests.md:8
#: ./docs/master/http-tests.md:8
msgctxt "P"
msgid "[Debugging Responses](#debugging-responses)"
msgstr ""

#: ./docs/8.x/http-tests.md:9
#: ./docs/9.x/http-tests.md:9
#: ./docs/10.x/http-tests.md:9
#: ./docs/11.x/http-tests.md:9
#: ./docs/master/http-tests.md:9
msgctxt "P"
msgid "[Exception Handling](#exception-handling)"
msgstr ""

#: ./docs/8.x/http-tests.md:10
#: ./docs/9.x/http-tests.md:10
#: ./docs/10.x/http-tests.md:10
#: ./docs/11.x/http-tests.md:10
#: ./docs/master/http-tests.md:10
msgctxt "P"
msgid "[Testing JSON APIs](#testing-json-apis)"
msgstr ""

#: ./docs/8.x/http-tests.md:11
#: ./docs/9.x/http-tests.md:11
#: ./docs/10.x/http-tests.md:11
#: ./docs/11.x/http-tests.md:11
#: ./docs/master/http-tests.md:11
msgctxt "P"
msgid "[Fluent JSON Testing](#fluent-json-testing)"
msgstr ""

#: ./docs/8.x/http-tests.md:12
#: ./docs/9.x/http-tests.md:12
#: ./docs/10.x/http-tests.md:12
#: ./docs/11.x/http-tests.md:12
#: ./docs/master/http-tests.md:12
msgctxt "P"
msgid "[Testing File Uploads](#testing-file-uploads)"
msgstr ""

#: ./docs/8.x/http-tests.md:13
#: ./docs/9.x/http-tests.md:13
#: ./docs/10.x/http-tests.md:13
#: ./docs/11.x/http-tests.md:13
#: ./docs/master/http-tests.md:13
msgctxt "P"
msgid "[Testing Views](#testing-views)"
msgstr ""

#: ./docs/10.x/http-tests.md:14
#: ./docs/11.x/http-tests.md:14
#: ./docs/master/http-tests.md:14
msgctxt "P"
msgid "[Rendering Blade and Components](#rendering-blade-and-components)"
msgstr ""

#: ./docs/8.x/http-tests.md:14
#: ./docs/9.x/http-tests.md:14
msgctxt "P"
msgid "[Rendering Blade & Components](#rendering-blade-and-components)"
msgstr ""

#: ./docs/8.x/http-tests.md:15
#: ./docs/9.x/http-tests.md:15
#: ./docs/10.x/http-tests.md:15
#: ./docs/11.x/http-tests.md:15
#: ./docs/master/http-tests.md:15
msgctxt "P"
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#: ./docs/8.x/http-tests.md:16
#: ./docs/9.x/http-tests.md:16
#: ./docs/10.x/http-tests.md:16
#: ./docs/11.x/http-tests.md:16
#: ./docs/master/http-tests.md:16
msgctxt "P"
msgid "[Response Assertions](#response-assertions)"
msgstr ""

#: ./docs/8.x/http-tests.md:17
#: ./docs/9.x/http-tests.md:17
#: ./docs/10.x/http-tests.md:17
#: ./docs/11.x/http-tests.md:17
#: ./docs/master/http-tests.md:17
msgctxt "P"
msgid "[Authentication Assertions](#authentication-assertions)"
msgstr ""

#: ./docs/9.x/http-tests.md:18
#: ./docs/10.x/http-tests.md:18
#: ./docs/11.x/http-tests.md:18
#: ./docs/master/http-tests.md:18
msgctxt "P"
msgid "[Validation Assertions](#validation-assertions)"
msgstr ""

#: ./docs/8.x/http-tests.md:19
#: ./docs/9.x/http-tests.md:20
#: ./docs/10.x/http-tests.md:20
#: ./docs/11.x/http-tests.md:20
#: ./docs/master/http-tests.md:20
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:20
#: ./docs/9.x/http-tests.md:21
#: ./docs/10.x/http-tests.md:21
#: ./docs/11.x/http-tests.md:21
#: ./docs/master/http-tests.md:21
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/http-tests.md:22
#: ./docs/9.x/http-tests.md:23
#: ./docs/10.x/http-tests.md:23
#: ./docs/11.x/http-tests.md:23
#: ./docs/master/http-tests.md:23
msgctxt "P"
msgid "Laravel provides a very fluent API for making HTTP requests to your application and examining the responses. For example, take a look at the feature test defined below:"
msgstr ""

#: ./docs/8.x/http-tests.md:24
#: ./docs/8.x/http-tests.md:56
#: ./docs/9.x/http-tests.md:25
#: ./docs/9.x/http-tests.md:57
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_a_basic_request()\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->assertStatus(200);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:25
#: ./docs/11.x/http-tests.md:35
#: ./docs/master/http-tests.md:35
msgctxt "CODE: php"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_the_application_returns_a_successful_response(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->assertStatus(200);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:25
#: ./docs/master/http-tests.md:25
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('the application returns a successful response', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->assertStatus(200);\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:47
#: ./docs/9.x/http-tests.md:48
#: ./docs/10.x/http-tests.md:46
#: ./docs/11.x/http-tests.md:56
#: ./docs/master/http-tests.md:56
msgctxt "P"
msgid "The `get` method makes a `GET` request into the application, while the `assertStatus` method asserts that the returned response should have the given HTTP status code. In addition to this simple assertion, Laravel also contains a variety of assertions for inspecting the response headers, content, JSON structure, and more."
msgstr ""

#: ./docs/8.x/http-tests.md:49
#: ./docs/9.x/http-tests.md:50
#: ./docs/10.x/http-tests.md:48
#: ./docs/11.x/http-tests.md:58
#: ./docs/master/http-tests.md:58
#~ msgctxt "P"
#~ msgid "<a name=\"making-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:50
#: ./docs/9.x/http-tests.md:51
#: ./docs/10.x/http-tests.md:49
#: ./docs/11.x/http-tests.md:59
#: ./docs/master/http-tests.md:59
msgctxt "H2"
msgid "Making Requests"
msgstr ""

#: ./docs/8.x/http-tests.md:52
#: ./docs/9.x/http-tests.md:53
#: ./docs/10.x/http-tests.md:51
#: ./docs/11.x/http-tests.md:61
#: ./docs/master/http-tests.md:61
msgctxt "P"
msgid "To make a request to your application, you may invoke the `get`, `post`, `put`, `patch`, or `delete` methods within your test. These methods do not actually issue a \"real\" HTTP request to your application. Instead, the entire network request is simulated internally."
msgstr ""

#: ./docs/8.x/http-tests.md:54
#: ./docs/9.x/http-tests.md:55
#: ./docs/10.x/http-tests.md:53
#: ./docs/11.x/http-tests.md:63
#: ./docs/master/http-tests.md:63
msgctxt "P"
msgid "Instead of returning an `Illuminate\\Http\\Response` instance, test request methods return an instance of `Illuminate\\Testing\\TestResponse`, which provides a [variety of helpful assertions](#available-assertions) that allow you to inspect your application's responses:"
msgstr ""

#: ./docs/10.x/http-tests.md:55
#: ./docs/11.x/http-tests.md:75
#: ./docs/master/http-tests.md:75
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_a_basic_request(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->assertStatus(200);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:65
#: ./docs/master/http-tests.md:65
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('basic request', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->assertStatus(200);\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:79
#: ./docs/9.x/http-tests.md:80
#: ./docs/10.x/http-tests.md:74
#: ./docs/11.x/http-tests.md:96
#: ./docs/master/http-tests.md:96
msgctxt "P"
msgid "In general, each of your tests should only make one request to your application. Unexpected behavior may occur if multiple requests are executed within a single test method."
msgstr ""

#: ./docs/8.x/http-tests.md:81
#: ./docs/9.x/http-tests.md:83
#: ./docs/10.x/http-tests.md:77
#: ./docs/11.x/http-tests.md:99
#: ./docs/master/http-tests.md:99
msgctxt "P"
msgid "For convenience, the CSRF middleware is automatically disabled when running tests."
msgstr ""

#: ./docs/8.x/http-tests.md:83
#: ./docs/9.x/http-tests.md:85
#: ./docs/10.x/http-tests.md:79
#: ./docs/11.x/http-tests.md:101
#: ./docs/master/http-tests.md:101
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-request-headers\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:84
#: ./docs/11.x/http-tests.md:118
#: ./docs/master/http-tests.md:118
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_interacting_with_headers(): void\n"
"    {\n"
"        $response = $this->withHeaders([\n"
"            'X-Header' => 'Value',\n"
"        ])->post('/user', ['name' => 'Sally']);\n\n"
"        $response->assertStatus(201);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:84
#: ./docs/9.x/http-tests.md:86
#: ./docs/10.x/http-tests.md:80
#: ./docs/11.x/http-tests.md:102
#: ./docs/master/http-tests.md:102
msgctxt "H3"
msgid "Customizing Request Headers"
msgstr ""

#: ./docs/8.x/http-tests.md:86
#: ./docs/9.x/http-tests.md:88
#: ./docs/10.x/http-tests.md:82
#: ./docs/11.x/http-tests.md:104
#: ./docs/master/http-tests.md:104
msgctxt "P"
msgid "You may use the `withHeaders` method to customize the request's headers before it is sent to the application. This method allows you to add any custom headers you would like to the request:"
msgstr ""

#: ./docs/8.x/http-tests.md:88
#: ./docs/9.x/http-tests.md:90
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_interacting_with_headers()\n"
"    {\n"
"        $response = $this->withHeaders([\n"
"            'X-Header' => 'Value',\n"
"        ])->post('/user', ['name' => 'Sally']);\n\n"
"        $response->assertStatus(201);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:106
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('interacting with headers', function () {\n"
"    $response = $this->withHeaders([\n"
"        'X-Header' => 'Value',\n"
"    ])->post('/user', ['name' => 'Sally']);\n\n"
"    $response->assertStatus(201);\n"
"});"
msgstr ""

#: ./docs/master/http-tests.md:106
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"tesst('interacting with headers', function () {\n"
"    $response = $this->withHeaders([\n"
"        'X-Header' => 'Value',\n"
"    ])->post('/user', ['name' => 'Sally']);\n\n"
"    $response->assertStatus(201);\n"
"});"
msgstr ""

#: ./docs/10.x/http-tests.md:110
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_cookies(): void\n"
"    {\n"
"        $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"        $response = $this->withCookies([\n"
"            'color' => 'blue',\n"
"            'name' => 'Taylor',\n"
"        ])->get('/');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:111
#: ./docs/9.x/http-tests.md:113
#: ./docs/10.x/http-tests.md:105
#: ./docs/11.x/http-tests.md:141
#: ./docs/master/http-tests.md:141
#~ msgctxt "P"
#~ msgid "<a name=\"cookies\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:112
#: ./docs/9.x/http-tests.md:114
#: ./docs/10.x/http-tests.md:106
#: ./docs/11.x/http-tests.md:142
#: ./docs/master/http-tests.md:142
msgctxt "H3"
msgid "Cookies"
msgstr ""

#: ./docs/8.x/http-tests.md:114
#: ./docs/9.x/http-tests.md:116
#: ./docs/10.x/http-tests.md:108
#: ./docs/11.x/http-tests.md:144
#: ./docs/master/http-tests.md:144
msgctxt "P"
msgid "You may use the `withCookie` or `withCookies` methods to set cookie values before making a request. The `withCookie` method accepts a cookie name and value as its two arguments, while the `withCookies` method accepts an array of name / value pairs:"
msgstr ""

#: ./docs/8.x/http-tests.md:116
#: ./docs/9.x/http-tests.md:118
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_cookies()\n"
"    {\n"
"        $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"        $response = $this->withCookies([\n"
"            'color' => 'blue',\n"
"            'name' => 'Taylor',\n"
"        ])->get('/');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:134
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_the_session(): void\n"
"    {\n"
"        $response = $this->withSession(['banned' => false])->get('/');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:135
#: ./docs/9.x/http-tests.md:137
#: ./docs/10.x/http-tests.md:129
#: ./docs/11.x/http-tests.md:184
#: ./docs/master/http-tests.md:184
#~ msgctxt "P"
#~ msgid "<a name=\"session-and-authentication\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:136
#: ./docs/9.x/http-tests.md:138
#: ./docs/10.x/http-tests.md:130
#: ./docs/11.x/http-tests.md:185
#: ./docs/master/http-tests.md:185
msgctxt "H3"
msgid "Session / Authentication"
msgstr ""

#: ./docs/8.x/http-tests.md:138
#: ./docs/9.x/http-tests.md:140
#: ./docs/10.x/http-tests.md:132
#: ./docs/11.x/http-tests.md:187
#: ./docs/master/http-tests.md:187
msgctxt "P"
msgid "Laravel provides several helpers for interacting with the session during HTTP testing. First, you may set the session data to a given array using the `withSession` method. This is useful for loading the session with data before issuing a request to your application:"
msgstr ""

#: ./docs/8.x/http-tests.md:140
#: ./docs/9.x/http-tests.md:142
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_the_session()\n"
"    {\n"
"        $response = $this->withSession(['banned' => false])->get('/');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:146
#: ./docs/master/http-tests.md:146
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('interacting with cookies', function () {\n"
"    $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"    $response = $this->withCookies([\n"
"        'color' => 'blue',\n"
"        'name' => 'Taylor',\n"
"    ])->get('/');\n\n"
"    //\n"
"});"
msgstr ""

#: ./docs/10.x/http-tests.md:150
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Models\\User;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_an_action_that_requires_authentication(): void\n"
"    {\n"
"        $user = User::factory()->create();\n\n"
"        $response = $this->actingAs($user)\n"
"                         ->withSession(['banned' => false])\n"
"                         ->get('/');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:154
msgctxt "P"
msgid "Laravel's session is typically used to maintain state for the currently authenticated user. Therefore, the `actingAs` helper method provides a simple way to authenticate a given user as the current user. For example, we may use a [model factory](/docs/{{version}}/database-testing#writing-factories) to generate and authenticate a user:"
msgstr ""

#: ./docs/8.x/http-tests.md:156
#: ./docs/9.x/http-tests.md:158
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Models\\User;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_an_action_that_requires_authentication()\n"
"    {\n"
"        $user = User::factory()->create();\n\n"
"        $response = $this->actingAs($user)\n"
"                         ->withSession(['banned' => false])\n"
"                         ->get('/');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/http-tests.md:156
#: ./docs/10.x/http-tests.md:148
#: ./docs/11.x/http-tests.md:217
#: ./docs/master/http-tests.md:217
msgctxt "P"
msgid "Laravel's session is typically used to maintain state for the currently authenticated user. Therefore, the `actingAs` helper method provides a simple way to authenticate a given user as the current user. For example, we may use a [model factory](/docs/{{version}}/eloquent-factories) to generate and authenticate a user:"
msgstr ""

#: ./docs/11.x/http-tests.md:161
#: ./docs/master/http-tests.md:161
msgctxt "CODE: php tab=PHPUnit"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_cookies(): void\n"
"    {\n"
"        $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"        $response = $this->withCookies([\n"
"            'color' => 'blue',\n"
"            'name' => 'Taylor',\n"
"        ])->get('/');\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:175
msgctxt "P"
msgid "You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the `actingAs` method:"
msgstr ""

#: ./docs/8.x/http-tests.md:177
#: ./docs/9.x/http-tests.md:179
#: ./docs/10.x/http-tests.md:171
#: ./docs/11.x/http-tests.md:260
#: ./docs/master/http-tests.md:260
msgctxt "CODE"
msgid "$this->actingAs($user, 'web')"
msgstr ""

#: ./docs/9.x/http-tests.md:177
#: ./docs/10.x/http-tests.md:169
#: ./docs/11.x/http-tests.md:258
#: ./docs/master/http-tests.md:258
msgctxt "P"
msgid "You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the `actingAs` method. The guard that is provided to the `actingAs` method will also become the default guard for the duration of the test:"
msgstr ""

#: ./docs/10.x/http-tests.md:178
#: ./docs/11.x/http-tests.md:281
#: ./docs/master/http-tests.md:281
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_basic_test(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->dumpHeaders();\n\n"
"        $response->dumpSession();\n\n"
"        $response->dump();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:179
#: ./docs/9.x/http-tests.md:181
#: ./docs/10.x/http-tests.md:173
#: ./docs/11.x/http-tests.md:262
#: ./docs/master/http-tests.md:262
#~ msgctxt "P"
#~ msgid "<a name=\"debugging-responses\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:180
#: ./docs/9.x/http-tests.md:182
#: ./docs/10.x/http-tests.md:174
#: ./docs/11.x/http-tests.md:263
#: ./docs/master/http-tests.md:263
msgctxt "H3"
msgid "Debugging Responses"
msgstr ""

#: ./docs/8.x/http-tests.md:182
#: ./docs/9.x/http-tests.md:184
#: ./docs/10.x/http-tests.md:176
#: ./docs/11.x/http-tests.md:265
#: ./docs/master/http-tests.md:265
msgctxt "P"
msgid "After making a test request to your application, the `dump`, `dumpHeaders`, and `dumpSession` methods may be used to examine and debug the response contents:"
msgstr ""

#: ./docs/8.x/http-tests.md:184
#: ./docs/9.x/http-tests.md:186
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->dumpHeaders();\n\n"
"        $response->dumpSession();\n\n"
"        $response->dump();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:189
#: ./docs/master/http-tests.md:189
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('interacting with the session', function () {\n"
"    $response = $this->withSession(['banned' => false])->get('/');\n\n"
"    //\n"
"});"
msgstr ""

#: ./docs/11.x/http-tests.md:199
#: ./docs/master/http-tests.md:199
msgctxt "CODE: php tab=PHPUnit"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_the_session(): void\n"
"    {\n"
"        $response = $this->withSession(['banned' => false])->get('/');\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:203
#: ./docs/11.x/http-tests.md:322
#: ./docs/master/http-tests.md:322
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_basic_test(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->ddHeaders();\n\n"
"        $response->ddSession();\n\n"
"        $response->dd();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:209
#: ./docs/9.x/http-tests.md:211
#: ./docs/10.x/http-tests.md:201
#: ./docs/11.x/http-tests.md:306
#: ./docs/master/http-tests.md:306
msgctxt "P"
msgid "Alternatively, you may use the `dd`, `ddHeaders`, and `ddSession` methods to dump information about the response and then stop execution:"
msgstr ""

#: ./docs/8.x/http-tests.md:211
#: ./docs/9.x/http-tests.md:213
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->ddHeaders();\n\n"
"        $response->ddSession();\n\n"
"        $response->dd();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:219
#: ./docs/master/http-tests.md:219
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"use App\\Models\\User;\n\n"
"test('an action that requires authentication', function () {\n"
"    $user = User::factory()->create();\n\n"
"    $response = $this->actingAs($user)\n"
"                     ->withSession(['banned' => false])\n"
"                     ->get('/');\n\n"
"    //\n"
"});"
msgstr ""

#: ./docs/11.x/http-tests.md:235
#: ./docs/master/http-tests.md:235
msgctxt "CODE: php tab=PHPUnit"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Models\\User;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_an_action_that_requires_authentication(): void\n"
"    {\n"
"        $user = User::factory()->create();\n\n"
"        $response = $this->actingAs($user)\n"
"                         ->withSession(['banned' => false])\n"
"                         ->get('/');\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:236
#: ./docs/9.x/http-tests.md:238
#: ./docs/10.x/http-tests.md:226
#: ./docs/11.x/http-tests.md:347
#: ./docs/master/http-tests.md:347
#~ msgctxt "P"
#~ msgid "<a name=\"exception-handling\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:237
#: ./docs/11.x/http-tests.md:420
#: ./docs/master/http-tests.md:358
msgctxt "P"
msgid "The `assertThrows` method may be used to assert that code within a given closure throws an exception of the specified type:"
msgstr ""

#: ./docs/8.x/http-tests.md:237
#: ./docs/9.x/http-tests.md:239
#: ./docs/10.x/http-tests.md:227
#: ./docs/11.x/http-tests.md:348
#: ./docs/master/http-tests.md:348
msgctxt "H3"
msgid "Exception Handling"
msgstr ""

#: ./docs/10.x/http-tests.md:239
#: ./docs/11.x/http-tests.md:422
#: ./docs/master/http-tests.md:360
msgctxt "CODE: php"
msgid "$this->assertThrows(\n"
"    fn () => (new ProcessOrder)->execute(),\n"
"    OrderInvalid::class\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:239
#: ./docs/9.x/http-tests.md:241
#: ./docs/10.x/http-tests.md:229
#: ./docs/master/http-tests.md:350
msgctxt "P"
msgid "Sometimes you may want to test that your application is throwing a specific exception. To ensure that the exception does not get caught by Laravel's exception handler and returned as an HTTP response, you may invoke the `withoutExceptionHandling` method before making your request:"
msgstr ""

#: ./docs/8.x/http-tests.md:241
#: ./docs/9.x/http-tests.md:243
#: ./docs/10.x/http-tests.md:231
#: ./docs/11.x/http-tests.md:414
#: ./docs/master/http-tests.md:352
msgctxt "CODE"
msgid "$response = $this->withoutExceptionHandling()->get('/');"
msgstr ""

#: ./docs/8.x/http-tests.md:243
#: ./docs/9.x/http-tests.md:245
#: ./docs/10.x/http-tests.md:233
#: ./docs/11.x/http-tests.md:416
#: ./docs/master/http-tests.md:354
msgctxt "P"
msgid "In addition, if you would like to ensure that your application is not utilizing features that have been deprecated by the PHP language or the libraries your application is using, you may invoke the `withoutDeprecationHandling` method before making your request. When deprecation handling is disabled, deprecation warnings will be converted to exceptions, thus causing your test to fail:"
msgstr ""

#: ./docs/8.x/http-tests.md:245
#: ./docs/9.x/http-tests.md:247
#: ./docs/10.x/http-tests.md:235
#: ./docs/11.x/http-tests.md:418
#: ./docs/master/http-tests.md:356
msgctxt "CODE"
msgid "$response = $this->withoutDeprecationHandling()->get('/');"
msgstr ""

#: ./docs/8.x/http-tests.md:247
#: ./docs/9.x/http-tests.md:249
#: ./docs/10.x/http-tests.md:246
#: ./docs/11.x/http-tests.md:438
#: ./docs/master/http-tests.md:367
#~ msgctxt "P"
#~ msgid "<a name=\"testing-json-apis\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:248
#: ./docs/9.x/http-tests.md:250
#: ./docs/10.x/http-tests.md:247
#: ./docs/11.x/http-tests.md:439
#: ./docs/master/http-tests.md:368
msgctxt "H2"
msgid "Testing JSON APIs"
msgstr ""

#: ./docs/8.x/http-tests.md:250
#: ./docs/9.x/http-tests.md:252
#: ./docs/10.x/http-tests.md:249
#: ./docs/11.x/http-tests.md:441
#: ./docs/master/http-tests.md:370
msgctxt "P"
msgid "Laravel also provides several helpers for testing JSON APIs and their responses. For example, the `json`, `getJson`, `postJson`, `putJson`, `patchJson`, `deleteJson`, and `optionsJson` methods may be used to issue JSON requests with various HTTP verbs. You may also easily pass data and headers to these methods. To get started, let's write a test to make a `POST` request to `/api/user` and assert that the expected JSON data was returned:"
msgstr ""

#: ./docs/10.x/http-tests.md:251
#: ./docs/11.x/http-tests.md:457
#: ./docs/master/http-tests.md:386
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_making_an_api_request(): void\n"
"    {\n"
"        $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:252
#: ./docs/9.x/http-tests.md:254
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_making_an_api_request()\n"
"    {\n"
"        $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:267
#: ./docs/master/http-tests.md:267
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('basic test', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->dumpHeaders();\n\n"
"    $response->dumpSession();\n\n"
"    $response->dump();\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:277
#: ./docs/9.x/http-tests.md:279
#: ./docs/10.x/http-tests.md:274
#: ./docs/11.x/http-tests.md:482
#: ./docs/master/http-tests.md:411
msgctxt "P"
msgid "In addition, JSON response data may be accessed as array variables on the response, making it convenient for you to inspect the individual values returned within a JSON response:"
msgstr ""

#: ./docs/8.x/http-tests.md:279
#: ./docs/9.x/http-tests.md:281
#: ./docs/10.x/http-tests.md:276
#: ./docs/11.x/http-tests.md:488
#: ./docs/master/http-tests.md:417
msgctxt "CODE"
msgid "$this->assertTrue($response['created']);"
msgstr ""

#: ./docs/8.x/http-tests.md:281
#: ./docs/8.x/http-tests.md:763
#: ./docs/9.x/http-tests.md:284
#: ./docs/9.x/http-tests.md:784
#: ./docs/10.x/http-tests.md:279
#: ./docs/10.x/http-tests.md:827
#: ./docs/master/http-tests.md:422
#: ./docs/master/http-tests.md:1054
msgctxt "P"
msgid "The `assertJson` method converts the response to an array and utilizes `PHPUnit::assertArraySubset` to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present."
msgstr ""

#: ./docs/8.x/http-tests.md:283
#: ./docs/9.x/http-tests.md:286
#: ./docs/10.x/http-tests.md:281
#: ./docs/11.x/http-tests.md:495
#: ./docs/master/http-tests.md:424
#~ msgctxt "P"
#~ msgid "<a name=\"verifying-exact-match\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:284
#: ./docs/9.x/http-tests.md:287
#: ./docs/10.x/http-tests.md:282
#: ./docs/11.x/http-tests.md:496
#: ./docs/master/http-tests.md:425
msgctxt "H4"
msgid "Asserting Exact JSON Matches"
msgstr ""

#: ./docs/10.x/http-tests.md:286
#: ./docs/11.x/http-tests.md:515
#: ./docs/master/http-tests.md:444
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_asserting_an_exact_json_match(): void\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertExactJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:286
#: ./docs/9.x/http-tests.md:289
#: ./docs/10.x/http-tests.md:284
#: ./docs/11.x/http-tests.md:498
#: ./docs/master/http-tests.md:427
msgctxt "P"
msgid "As previously mentioned, the `assertJson` method may be used to assert that a fragment of JSON exists within the JSON response. If you would like to verify that a given array **exactly matches** the JSON returned by your application, you should use the `assertExactJson` method:"
msgstr ""

#: ./docs/8.x/http-tests.md:288
#: ./docs/9.x/http-tests.md:291
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_asserting_an_exact_json_match()\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertExactJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:308
#: ./docs/master/http-tests.md:308
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('basic test', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->ddHeaders();\n\n"
"    $response->ddSession();\n\n"
"    $response->dd();\n"
"});"
msgstr ""

#: ./docs/10.x/http-tests.md:310
#: ./docs/11.x/http-tests.md:541
#: ./docs/master/http-tests.md:470
msgctxt "H4"
msgid "Asserting on JSON Paths"
msgstr ""

#: ./docs/8.x/http-tests.md:313
#: ./docs/9.x/http-tests.md:316
#: ./docs/10.x/http-tests.md:309
#: ./docs/11.x/http-tests.md:540
#: ./docs/master/http-tests.md:469
#~ msgctxt "P"
#~ msgid "<a name=\"verifying-json-paths\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:314
#: ./docs/11.x/http-tests.md:557
#: ./docs/master/http-tests.md:486
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_asserting_a_json_paths_value(): void\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJsonPath('team.owner.name', 'Darian');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:314
#: ./docs/9.x/http-tests.md:317
msgctxt "H4"
msgid "Asserting On JSON Paths"
msgstr ""

#: ./docs/8.x/http-tests.md:316
#: ./docs/9.x/http-tests.md:319
#: ./docs/10.x/http-tests.md:312
#: ./docs/11.x/http-tests.md:543
#: ./docs/master/http-tests.md:472
msgctxt "P"
msgid "If you would like to verify that the JSON response contains the given data at a specified path, you should use the `assertJsonPath` method:"
msgstr ""

#: ./docs/8.x/http-tests.md:318
#: ./docs/9.x/http-tests.md:321
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_asserting_a_json_paths_value()\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJsonPath('team.owner.name', 'Darian');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:337
#: ./docs/11.x/http-tests.md:582
#: ./docs/master/http-tests.md:511
msgctxt "CODE"
msgid "$response->assertJsonPath('team.owner.name', fn (string $name) => strlen($name) >= 3);"
msgstr ""

#: ./docs/8.x/http-tests.md:341
#: ./docs/9.x/http-tests.md:348
#: ./docs/10.x/http-tests.md:339
#: ./docs/11.x/http-tests.md:584
#: ./docs/master/http-tests.md:513
#~ msgctxt "P"
#~ msgid "<a name=\"fluent-json-testing\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:342
#: ./docs/9.x/http-tests.md:349
#: ./docs/10.x/http-tests.md:340
#: ./docs/11.x/http-tests.md:585
#: ./docs/master/http-tests.md:514
msgctxt "H3"
msgid "Fluent JSON Testing"
msgstr ""

#: ./docs/10.x/http-tests.md:344
#: ./docs/11.x/http-tests.md:607
#: ./docs/master/http-tests.md:536
msgctxt "CODE"
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"/**\n"
" * A basic functional test example.\n"
" */\n"
"public function test_fluent_json(): void\n"
"{\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                 ->whereNot('status', 'pending')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:344
#: ./docs/9.x/http-tests.md:351
#: ./docs/10.x/http-tests.md:342
#: ./docs/11.x/http-tests.md:587
#: ./docs/master/http-tests.md:516
msgctxt "P"
msgid "Laravel also offers a beautiful way to fluently test your application's JSON responses. To get started, pass a closure to the `assertJson` method. This closure will be invoked with an instance of `Illuminate\\Testing\\Fluent\\AssertableJson` which can be used to make assertions against the JSON that was returned by your application. The `where` method may be used to make assertions against a particular attribute of the JSON, while the `missing` method may be used to assert that a particular attribute is missing from the JSON:"
msgstr ""

#: ./docs/9.x/http-tests.md:344
#: ./docs/10.x/http-tests.md:335
#: ./docs/11.x/http-tests.md:580
#: ./docs/master/http-tests.md:509
msgctxt "P"
msgid "The `assertJsonPath` method also accepts a closure, which may be used to dynamically determine if the assertion should pass:"
msgstr ""

#: ./docs/8.x/http-tests.md:346
msgctxt "CODE"
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"/**\n"
" * A basic functional test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_fluent_json()\n"
"{\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"}"
msgstr ""

#: ./docs/9.x/http-tests.md:346
msgctxt "CODE"
msgid "$response->assertJsonPath('team.owner.name', fn ($name) => strlen($name) >= 3);"
msgstr ""

#: ./docs/11.x/http-tests.md:350
msgctxt "P"
msgid "Sometimes you may need to test that your application is throwing a specific exception. To accomplish this, you may \"fake\" the exception handler via the `Exceptions` facade. Once the exception handler has been faked, you may utilize the `assertReported` and `assertNotReported` methods to make assertions against exceptions that were thrown during the request:"
msgstr ""

#: ./docs/11.x/http-tests.md:352
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Support\\Facades\\Exceptions;\n\n"
"test('exception is thrown', function () {\n"
"    Exceptions::fake();\n\n"
"    $response = $this->get('/order/1');\n\n"
"    // Assert an exception was thrown...\n"
"    Exceptions::assertReported(InvalidOrderException::class);\n\n"
"    // Assert against the exception...\n"
"    Exceptions::assertReported(function (InvalidOrderException $e) {\n"
"        return $e->getMessage() === 'The order was invalid.';\n"
"    });\n"
"});"
msgstr ""

#: ./docs/9.x/http-tests.md:353
msgctxt "CODE"
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"/**\n"
" * A basic functional test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_fluent_json()\n"
"{\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                 ->whereNot('status', 'pending')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:364
#: ./docs/11.x/http-tests.md:629
#: ./docs/master/http-tests.md:558
msgctxt "H4"
msgid "Understanding the `etc` Method"
msgstr ""

#: ./docs/8.x/http-tests.md:366
#: ./docs/9.x/http-tests.md:375
msgctxt "H4"
msgid "Understanding The `etc` Method"
msgstr ""

#: ./docs/8.x/http-tests.md:368
#: ./docs/9.x/http-tests.md:377
#: ./docs/10.x/http-tests.md:366
#: ./docs/11.x/http-tests.md:631
#: ./docs/master/http-tests.md:560
msgctxt "P"
msgid "In the example above, you may have noticed we invoked the `etc` method at the end of our assertion chain. This method informs Laravel that there may be other attributes present on the JSON object. If the `etc` method is not used, the test will fail if other attributes that you did not make assertions against exist on the JSON object."
msgstr ""

#: ./docs/8.x/http-tests.md:370
#: ./docs/9.x/http-tests.md:379
#: ./docs/10.x/http-tests.md:368
#: ./docs/11.x/http-tests.md:633
#: ./docs/master/http-tests.md:562
msgctxt "P"
msgid "The intention behind this behavior is to protect you from unintentionally exposing sensitive information in your JSON responses by forcing you to either explicitly make an assertion against the attribute or explicitly allow additional attributes via the `etc` method."
msgstr ""

#: ./docs/8.x/http-tests.md:372
#: ./docs/9.x/http-tests.md:383
#: ./docs/10.x/http-tests.md:372
#: ./docs/11.x/http-tests.md:637
#: ./docs/master/http-tests.md:566
#~ msgctxt "P"
#~ msgid "<a name=\"asserting-json-attribute-presence-and-absence\"></a>"
#~ msgstr ""

#: ./docs/11.x/http-tests.md:373
msgctxt "CODE: php tab=PHPUnit"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Support\\Facades\\Exceptions;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_exception_is_thrown(): void\n"
"    {\n"
"        Exceptions::fake();\n\n"
"        $response = $this->get('/');\n\n"
"        // Assert an exception was thrown...\n"
"        Exceptions::assertReported(InvalidOrderException::class);\n\n"
"        // Assert against the exception...\n"
"        Exceptions::assertReported(function (InvalidOrderException $e) {\n"
"            return $e->getMessage() === 'The order was invalid.';\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/http-tests.md:373
#: ./docs/9.x/http-tests.md:384
#: ./docs/10.x/http-tests.md:373
#: ./docs/11.x/http-tests.md:638
#: ./docs/master/http-tests.md:567
msgctxt "H4"
msgid "Asserting Attribute Presence / Absence"
msgstr ""

#: ./docs/8.x/http-tests.md:375
#: ./docs/9.x/http-tests.md:386
#: ./docs/10.x/http-tests.md:375
#: ./docs/11.x/http-tests.md:640
#: ./docs/master/http-tests.md:569
msgctxt "P"
msgid "To assert that an attribute is present or absent, you may use the `has` and `missing` methods:"
msgstr ""

#: ./docs/8.x/http-tests.md:377
#: ./docs/9.x/http-tests.md:388
#: ./docs/10.x/http-tests.md:377
#: ./docs/11.x/http-tests.md:642
#: ./docs/master/http-tests.md:571
msgctxt "CODE"
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->has('data')\n"
"         ->missing('message')\n"
");"
msgstr ""

#: ./docs/9.x/http-tests.md:381
#: ./docs/10.x/http-tests.md:370
#: ./docs/11.x/http-tests.md:635
#: ./docs/master/http-tests.md:564
msgctxt "P"
msgid "However, you should be aware that not including the `etc` method in your assertion chain does not ensure that additional attributes are not being added to arrays that are nested within your JSON object. The `etc` method only ensures that no additional attributes exist at the nesting level in which the `etc` method is invoked."
msgstr ""

#: ./docs/8.x/http-tests.md:382
#: ./docs/9.x/http-tests.md:393
#: ./docs/10.x/http-tests.md:382
#: ./docs/11.x/http-tests.md:647
#: ./docs/master/http-tests.md:576
msgctxt "P"
msgid "In addition, the `hasAll` and `missingAll` methods allow asserting the presence or absence of multiple attributes simultaneously:"
msgstr ""

#: ./docs/8.x/http-tests.md:384
msgctxt "CODE"
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->hasAll('status', 'data')\n"
"         ->missingAll('message', 'code')\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:389
#: ./docs/9.x/http-tests.md:400
#: ./docs/10.x/http-tests.md:389
#: ./docs/11.x/http-tests.md:654
#: ./docs/master/http-tests.md:583
msgctxt "P"
msgid "You may use the `hasAny` method to determine if at least one of a given list of attributes is present:"
msgstr ""

#: ./docs/8.x/http-tests.md:391
#: ./docs/9.x/http-tests.md:402
#: ./docs/10.x/http-tests.md:391
#: ./docs/11.x/http-tests.md:656
#: ./docs/master/http-tests.md:585
msgctxt "CODE"
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->has('status')\n"
"         ->hasAny('data', 'message', 'code')\n"
");"
msgstr ""

#: ./docs/9.x/http-tests.md:395
#: ./docs/10.x/http-tests.md:384
#: ./docs/11.x/http-tests.md:649
#: ./docs/master/http-tests.md:578
msgctxt "CODE"
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->hasAll(['status', 'data'])\n"
"         ->missingAll(['message', 'code'])\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:396
#: ./docs/9.x/http-tests.md:407
#: ./docs/10.x/http-tests.md:396
#: ./docs/11.x/http-tests.md:661
#: ./docs/master/http-tests.md:590
#~ msgctxt "P"
#~ msgid "<a name=\"asserting-against-json-collections\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:397
#: ./docs/9.x/http-tests.md:408
#: ./docs/10.x/http-tests.md:397
#: ./docs/11.x/http-tests.md:662
#: ./docs/master/http-tests.md:591
msgctxt "H4"
msgid "Asserting Against JSON Collections"
msgstr ""

#: ./docs/8.x/http-tests.md:399
#: ./docs/9.x/http-tests.md:410
#: ./docs/10.x/http-tests.md:399
#: ./docs/11.x/http-tests.md:664
#: ./docs/master/http-tests.md:593
msgctxt "P"
msgid "Often, your route will return a JSON response that contains multiple items, such as multiple users:"
msgstr ""

#: ./docs/8.x/http-tests.md:401
#: ./docs/9.x/http-tests.md:412
#: ./docs/10.x/http-tests.md:401
#: ./docs/11.x/http-tests.md:666
#: ./docs/master/http-tests.md:595
msgctxt "CODE"
msgid "Route::get('/users', function () {\n"
"    return User::all();\n"
"});"
msgstr ""

#: ./docs/11.x/http-tests.md:404
msgctxt "P"
msgid "The `assertNotReported` and `assertNothingReported` methods may be used to assert that a given exception was not thrown during the request or that no exceptions were thrown:"
msgstr ""

#: ./docs/8.x/http-tests.md:405
#: ./docs/9.x/http-tests.md:416
#: ./docs/10.x/http-tests.md:405
#: ./docs/11.x/http-tests.md:670
#: ./docs/master/http-tests.md:599
msgctxt "P"
msgid "In these situations, we may use the fluent JSON object's `has` method to make assertions against the users included in the response. For example, let's assert that the JSON response contains three users. Next, we'll make some assertions about the first user in the collection using the `first` method. The `first` method accepts a closure which receives another assertable JSON string that we can use to make assertions about the first object in the JSON collection:"
msgstr ""

#: ./docs/11.x/http-tests.md:406
msgctxt "CODE: php"
msgid "Exceptions::assertNotReported(InvalidOrderException::class);\n\n"
"Exceptions::assertNothingReported();"
msgstr ""

#: ./docs/10.x/http-tests.md:407
#: ./docs/11.x/http-tests.md:672
#: ./docs/master/http-tests.md:601
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has(3)\n"
"             ->first(fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/8.x/http-tests.md:407
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has(3)\n"
"             ->first(fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/11.x/http-tests.md:412
msgctxt "P"
msgid "You may totally disable exception handling for a given request by invoking the `withoutExceptionHandling` method before making your request:"
msgstr ""

#: ./docs/8.x/http-tests.md:418
#: ./docs/9.x/http-tests.md:430
#: ./docs/10.x/http-tests.md:419
#: ./docs/11.x/http-tests.md:684
#: ./docs/master/http-tests.md:613
#~ msgctxt "P"
#~ msgid "<a name=\"scoping-json-collection-assertions\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:418
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has(3)\n"
"             ->first(fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/8.x/http-tests.md:419
#: ./docs/9.x/http-tests.md:431
#: ./docs/10.x/http-tests.md:420
#: ./docs/11.x/http-tests.md:685
#: ./docs/master/http-tests.md:614
msgctxt "H4"
msgid "Scoping JSON Collection Assertions"
msgstr ""

#: ./docs/8.x/http-tests.md:421
#: ./docs/9.x/http-tests.md:433
#: ./docs/10.x/http-tests.md:422
#: ./docs/11.x/http-tests.md:687
#: ./docs/master/http-tests.md:616
msgctxt "P"
msgid "Sometimes, your application's routes will return JSON collections that are assigned named keys:"
msgstr ""

#: ./docs/8.x/http-tests.md:423
#: ./docs/9.x/http-tests.md:435
#: ./docs/10.x/http-tests.md:424
#: ./docs/11.x/http-tests.md:689
#: ./docs/master/http-tests.md:618
msgctxt "CODE"
msgid "Route::get('/users', function () {\n"
"    return [\n"
"        'meta' => [...],\n"
"        'users' => User::all(),\n"
"    ];\n"
"})"
msgstr ""

#: ./docs/11.x/http-tests.md:429
msgctxt "P"
msgid "If you would like to inspect and make assertions against the exception that is thrown, you may provide a closure as the second argument to the `assertThrows` method:"
msgstr ""

#: ./docs/8.x/http-tests.md:430
#: ./docs/9.x/http-tests.md:442
#: ./docs/10.x/http-tests.md:431
#: ./docs/11.x/http-tests.md:696
#: ./docs/master/http-tests.md:625
msgctxt "P"
msgid "When testing these routes, you may use the `has` method to assert against the number of items in the collection. In addition, you may use the `has` method to scope a chain of assertions:"
msgstr ""

#: ./docs/11.x/http-tests.md:431
msgctxt "CODE: php"
msgid "$this->assertThrows(\n"
"    fn () => (new ProcessOrder)->execute(),\n"
"    fn (OrderInvalid $e) => $e->orderId() === 123;\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:432
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3)\n"
"             ->has('users.0', fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/10.x/http-tests.md:433
#: ./docs/11.x/http-tests.md:698
#: ./docs/master/http-tests.md:627
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3)\n"
"             ->has('users.0', fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/11.x/http-tests.md:443
#: ./docs/master/http-tests.md:372
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('making an api request', function () {\n"
"    $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n"
"    $response\n"
"        ->assertStatus(201)\n"
"        ->assertJson([\n"
"            'created' => true,\n"
"         ]);\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:444
#: ./docs/9.x/http-tests.md:457
#: ./docs/10.x/http-tests.md:446
#: ./docs/11.x/http-tests.md:711
#: ./docs/master/http-tests.md:640
msgctxt "P"
msgid "However, instead of making two separate calls to the `has` method to assert against the `users` collection, you may make a single call which provides a closure as its third parameter. When doing so, the closure will automatically be invoked and scoped to the first item in the collection:"
msgstr ""

#: ./docs/9.x/http-tests.md:444
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3)\n"
"             ->has('users.0', fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/8.x/http-tests.md:446
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3, fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/10.x/http-tests.md:448
#: ./docs/11.x/http-tests.md:713
#: ./docs/master/http-tests.md:642
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3, fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/8.x/http-tests.md:457
#: ./docs/9.x/http-tests.md:471
#: ./docs/10.x/http-tests.md:460
#: ./docs/11.x/http-tests.md:725
#: ./docs/master/http-tests.md:654
#~ msgctxt "P"
#~ msgid "<a name=\"asserting-json-types\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:458
#: ./docs/9.x/http-tests.md:472
#: ./docs/10.x/http-tests.md:461
#: ./docs/11.x/http-tests.md:726
#: ./docs/master/http-tests.md:655
msgctxt "H4"
msgid "Asserting JSON Types"
msgstr ""

#: ./docs/9.x/http-tests.md:459
msgctxt "CODE"
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3, fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

#: ./docs/8.x/http-tests.md:460
#: ./docs/9.x/http-tests.md:474
#: ./docs/10.x/http-tests.md:463
#: ./docs/11.x/http-tests.md:728
#: ./docs/master/http-tests.md:657
msgctxt "P"
msgid "You may only want to assert that the properties in the JSON response are of a certain type. The `Illuminate\\Testing\\Fluent\\AssertableJson` class provides the `whereType` and `whereAllType` methods for doing just that:"
msgstr ""

#: ./docs/8.x/http-tests.md:462
#: ./docs/9.x/http-tests.md:476
#: ./docs/10.x/http-tests.md:465
#: ./docs/11.x/http-tests.md:730
#: ./docs/master/http-tests.md:659
msgctxt "CODE"
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->whereType('id', 'integer')\n"
"         ->whereAllType([\n"
"            'users.0.name' => 'string',\n"
"            'meta' => 'array'\n"
"        ])\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:470
#: ./docs/9.x/http-tests.md:484
#: ./docs/10.x/http-tests.md:473
#: ./docs/11.x/http-tests.md:738
#: ./docs/master/http-tests.md:667
msgctxt "P"
msgid "You may specify multiple types using the `|` character, or passing an array of types as the second parameter to the `whereType` method. The assertion will be successful if the response value is any of the listed types:"
msgstr ""

#: ./docs/8.x/http-tests.md:472
#: ./docs/9.x/http-tests.md:486
#: ./docs/10.x/http-tests.md:475
#: ./docs/11.x/http-tests.md:740
#: ./docs/master/http-tests.md:669
msgctxt "CODE"
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->whereType('name', 'string|null')\n"
"         ->whereType('id', ['string', 'integer'])\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:477
#: ./docs/9.x/http-tests.md:491
#: ./docs/10.x/http-tests.md:480
#: ./docs/11.x/http-tests.md:745
#: ./docs/master/http-tests.md:674
msgctxt "P"
msgid "The `whereType` and `whereAllType` methods recognize the following types: `string`, `integer`, `double`, `boolean`, `array`, and `null`."
msgstr ""

#: ./docs/8.x/http-tests.md:479
#: ./docs/9.x/http-tests.md:493
#: ./docs/10.x/http-tests.md:482
#: ./docs/11.x/http-tests.md:747
#: ./docs/master/http-tests.md:676
#~ msgctxt "P"
#~ msgid "<a name=\"testing-file-uploads\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:480
#: ./docs/9.x/http-tests.md:494
#: ./docs/10.x/http-tests.md:483
#: ./docs/11.x/http-tests.md:748
#: ./docs/master/http-tests.md:677
msgctxt "H2"
msgid "Testing File Uploads"
msgstr ""

#: ./docs/8.x/http-tests.md:482
#: ./docs/9.x/http-tests.md:496
#: ./docs/10.x/http-tests.md:485
#: ./docs/11.x/http-tests.md:750
#: ./docs/master/http-tests.md:679
msgctxt "P"
msgid "The `Illuminate\\Http\\UploadedFile` class provides a `fake` method which may be used to generate dummy files or images for testing. This, combined with the `Storage` facade's `fake` method, greatly simplifies the testing of file uploads. For example, you may combine these two features to easily test an avatar upload form:"
msgstr ""

#: ./docs/11.x/http-tests.md:484
#: ./docs/master/http-tests.md:413
msgctxt "CODE: php tab=Pest"
msgid "expect($response['created'])->toBeTrue();"
msgstr ""

#: ./docs/8.x/http-tests.md:484
#: ./docs/9.x/http-tests.md:498
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_avatars_can_be_uploaded()\n"
"    {\n"
"        Storage::fake('avatars');\n\n"
"        $file = UploadedFile::fake()->image('avatar.jpg');\n\n"
"        $response = $this->post('/avatar', [\n"
"            'avatar' => $file,\n"
"        ]);\n\n"
"        Storage::disk('avatars')->assertExists($file->hashName());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:487
#: ./docs/11.x/http-tests.md:771
#: ./docs/master/http-tests.md:700
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_avatars_can_be_uploaded(): void\n"
"    {\n"
"        Storage::fake('avatars');\n\n"
"        $file = UploadedFile::fake()->image('avatar.jpg');\n\n"
"        $response = $this->post('/avatar', [\n"
"            'avatar' => $file,\n"
"        ]);\n\n"
"        Storage::disk('avatars')->assertExists($file->hashName());\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:493
#: ./docs/11.x/http-tests.md:1135
msgctxt "P"
msgid "The `assertJson` method converts the response to an array to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present."
msgstr ""

#: ./docs/11.x/http-tests.md:500
#: ./docs/master/http-tests.md:429
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('asserting an exact json match', function () {\n"
"    $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"    $response\n"
"        ->assertStatus(201)\n"
"        ->assertExactJson([\n"
"            'created' => true,\n"
"        ]);\n"
"});\n"
msgstr ""

#: ./docs/8.x/http-tests.md:510
#: ./docs/9.x/http-tests.md:524
#: ./docs/10.x/http-tests.md:511
#: ./docs/11.x/http-tests.md:797
#: ./docs/master/http-tests.md:726
msgctxt "P"
msgid "If you would like to assert that a given file does not exist, you may use the `assertMissing` method provided by the `Storage` facade:"
msgstr ""

#: ./docs/8.x/http-tests.md:512
#: ./docs/9.x/http-tests.md:526
#: ./docs/10.x/http-tests.md:513
#: ./docs/11.x/http-tests.md:799
#: ./docs/master/http-tests.md:728
msgctxt "CODE"
msgid "Storage::fake('avatars');\n\n"
"// ...\n\n"
"Storage::disk('avatars')->assertMissing('missing.jpg');"
msgstr ""

#: ./docs/8.x/http-tests.md:518
#: ./docs/9.x/http-tests.md:532
#: ./docs/10.x/http-tests.md:519
#: ./docs/11.x/http-tests.md:805
#: ./docs/master/http-tests.md:734
#~ msgctxt "P"
#~ msgid "<a name=\"fake-file-customization\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:519
#: ./docs/9.x/http-tests.md:533
#: ./docs/10.x/http-tests.md:520
#: ./docs/11.x/http-tests.md:806
#: ./docs/master/http-tests.md:735
msgctxt "H4"
msgid "Fake File Customization"
msgstr ""

#: ./docs/8.x/http-tests.md:521
#: ./docs/9.x/http-tests.md:535
#: ./docs/10.x/http-tests.md:522
#: ./docs/11.x/http-tests.md:808
#: ./docs/master/http-tests.md:737
msgctxt "P"
msgid "When creating files using the `fake` method provided by the `UploadedFile` class, you may specify the width, height, and size of the image (in kilobytes) in order to better test your application's validation rules:"
msgstr ""

#: ./docs/8.x/http-tests.md:523
#: ./docs/9.x/http-tests.md:537
#: ./docs/10.x/http-tests.md:524
#: ./docs/11.x/http-tests.md:810
#: ./docs/master/http-tests.md:739
msgctxt "CODE"
msgid "UploadedFile::fake()->image('avatar.jpg', $width, $height)->size(100);"
msgstr ""

#: ./docs/8.x/http-tests.md:525
#: ./docs/9.x/http-tests.md:539
#: ./docs/10.x/http-tests.md:526
#: ./docs/11.x/http-tests.md:812
#: ./docs/master/http-tests.md:741
msgctxt "P"
msgid "In addition to creating images, you may create files of any other type using the `create` method:"
msgstr ""

#: ./docs/8.x/http-tests.md:527
#: ./docs/9.x/http-tests.md:541
#: ./docs/10.x/http-tests.md:528
#: ./docs/11.x/http-tests.md:814
#: ./docs/master/http-tests.md:743
msgctxt "CODE"
msgid "UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);"
msgstr ""

#: ./docs/8.x/http-tests.md:529
#: ./docs/9.x/http-tests.md:543
#: ./docs/10.x/http-tests.md:530
#: ./docs/11.x/http-tests.md:816
#: ./docs/master/http-tests.md:745
msgctxt "P"
msgid "If needed, you may pass a `$mimeType` argument to the method to explicitly define the MIME type that should be returned by the file:"
msgstr ""

#: ./docs/8.x/http-tests.md:531
#: ./docs/9.x/http-tests.md:545
#: ./docs/10.x/http-tests.md:532
#: ./docs/11.x/http-tests.md:818
#: ./docs/master/http-tests.md:747
msgctxt "CODE"
msgid "UploadedFile::fake()->create(\n"
"    'document.pdf', $sizeInKilobytes, 'application/pdf'\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:535
#: ./docs/9.x/http-tests.md:549
#: ./docs/10.x/http-tests.md:536
#: ./docs/11.x/http-tests.md:822
#: ./docs/master/http-tests.md:751
#~ msgctxt "P"
#~ msgid "<a name=\"testing-views\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:536
#: ./docs/9.x/http-tests.md:550
#: ./docs/10.x/http-tests.md:537
#: ./docs/11.x/http-tests.md:823
#: ./docs/master/http-tests.md:752
msgctxt "H2"
msgid "Testing Views"
msgstr ""

#: ./docs/8.x/http-tests.md:538
#: ./docs/9.x/http-tests.md:552
#: ./docs/10.x/http-tests.md:539
#: ./docs/11.x/http-tests.md:825
#: ./docs/master/http-tests.md:754
msgctxt "P"
msgid "Laravel also allows you to render a view without making a simulated HTTP request to the application. To accomplish this, you may call the `view` method within your test. The `view` method accepts the view name and an optional array of data. The method returns an instance of `Illuminate\\Testing\\TestView`, which offers several methods to conveniently make assertions about the view's contents:"
msgstr ""

#: ./docs/8.x/http-tests.md:540
#: ./docs/9.x/http-tests.md:554
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_a_welcome_view_can_be_rendered()\n"
"    {\n"
"        $view = $this->view('welcome', ['name' => 'Taylor']);\n\n"
"        $view->assertSee('Taylor');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/http-tests.md:541
#: ./docs/11.x/http-tests.md:837
#: ./docs/master/http-tests.md:766
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_a_welcome_view_can_be_rendered(): void\n"
"    {\n"
"        $view = $this->view('welcome', ['name' => 'Taylor']);\n\n"
"        $view->assertSee('Taylor');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/http-tests.md:545
#: ./docs/master/http-tests.md:474
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('asserting a json path value', function () {\n"
"    $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"    $response\n"
"        ->assertStatus(201)\n"
"        ->assertJsonPath('team.owner.name', 'Darian');\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:556
#: ./docs/9.x/http-tests.md:570
#: ./docs/10.x/http-tests.md:557
#: ./docs/11.x/http-tests.md:855
#: ./docs/master/http-tests.md:784
msgctxt "P"
msgid "The `TestView` class provides the following assertion methods: `assertSee`, `assertSeeInOrder`, `assertSeeText`, `assertSeeTextInOrder`, `assertDontSee`, and `assertDontSeeText`."
msgstr ""

#: ./docs/8.x/http-tests.md:558
#: ./docs/9.x/http-tests.md:572
#: ./docs/10.x/http-tests.md:559
#: ./docs/11.x/http-tests.md:857
#: ./docs/master/http-tests.md:786
msgctxt "P"
msgid "If needed, you may get the raw, rendered view contents by casting the `TestView` instance to a string:"
msgstr ""

#: ./docs/8.x/http-tests.md:560
#: ./docs/9.x/http-tests.md:574
#: ./docs/10.x/http-tests.md:561
#: ./docs/11.x/http-tests.md:859
#: ./docs/master/http-tests.md:788
msgctxt "CODE"
msgid "$contents = (string) $this->view('welcome');"
msgstr ""

#: ./docs/8.x/http-tests.md:562
#: ./docs/9.x/http-tests.md:576
#: ./docs/10.x/http-tests.md:563
#: ./docs/11.x/http-tests.md:861
#: ./docs/master/http-tests.md:790
#~ msgctxt "P"
#~ msgid "<a name=\"sharing-errors\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:563
#: ./docs/9.x/http-tests.md:577
#: ./docs/10.x/http-tests.md:564
#: ./docs/11.x/http-tests.md:862
#: ./docs/master/http-tests.md:791
msgctxt "H4"
msgid "Sharing Errors"
msgstr ""

#: ./docs/8.x/http-tests.md:565
#: ./docs/9.x/http-tests.md:579
#: ./docs/10.x/http-tests.md:566
#: ./docs/11.x/http-tests.md:864
#: ./docs/master/http-tests.md:793
msgctxt "P"
msgid "Some views may depend on errors shared in the [global error bag provided by Laravel](/docs/{{version}}/validation#quick-displaying-the-validation-errors). To hydrate the error bag with error messages, you may use the `withViewErrors` method:"
msgstr ""

#: ./docs/8.x/http-tests.md:567
#: ./docs/9.x/http-tests.md:581
#: ./docs/10.x/http-tests.md:568
#: ./docs/11.x/http-tests.md:866
#: ./docs/master/http-tests.md:795
msgctxt "CODE"
msgid "$view = $this->withViewErrors([\n"
"    'name' => ['Please provide a valid name.']\n"
"])->view('form');\n\n"
"$view->assertSee('Please provide a valid name.');"
msgstr ""

#: ./docs/8.x/http-tests.md:573
#: ./docs/9.x/http-tests.md:587
#: ./docs/10.x/http-tests.md:574
#: ./docs/11.x/http-tests.md:872
#: ./docs/master/http-tests.md:801
#~ msgctxt "P"
#~ msgid "<a name=\"rendering-blade-and-components\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:574
#: ./docs/9.x/http-tests.md:588
msgctxt "H3"
msgid "Rendering Blade & Components"
msgstr ""

#: ./docs/10.x/http-tests.md:575
#: ./docs/11.x/http-tests.md:873
#: ./docs/master/http-tests.md:802
msgctxt "H3"
msgid "Rendering Blade and Components"
msgstr ""

#: ./docs/8.x/http-tests.md:576
#: ./docs/9.x/http-tests.md:590
#: ./docs/10.x/http-tests.md:577
#: ./docs/11.x/http-tests.md:875
#: ./docs/master/http-tests.md:804
msgctxt "P"
msgid "If necessary, you may use the `blade` method to evaluate and render a raw [Blade](/docs/{{version}}/blade) string. Like the `view` method, the `blade` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#: ./docs/8.x/http-tests.md:578
#: ./docs/9.x/http-tests.md:592
#: ./docs/10.x/http-tests.md:579
#: ./docs/11.x/http-tests.md:877
#: ./docs/master/http-tests.md:806
msgctxt "CODE"
msgid "$view = $this->blade(\n"
"    '<x-component :name=\"$name\" />',\n"
"    ['name' => 'Taylor']\n"
");\n\n"
"$view->assertSee('Taylor');"
msgstr ""

#: ./docs/8.x/http-tests.md:585
msgctxt "P"
msgid "You may use the `component` method to evaluate and render a [Blade component](/docs/{{version}}/blade#components). Like the `view` method, the `component` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#: ./docs/8.x/http-tests.md:587
#: ./docs/9.x/http-tests.md:601
#: ./docs/10.x/http-tests.md:588
#: ./docs/11.x/http-tests.md:886
#: ./docs/master/http-tests.md:815
msgctxt "CODE"
msgid "$view = $this->component(Profile::class, ['name' => 'Taylor']);\n\n"
"$view->assertSee('Taylor');"
msgstr ""

#: ./docs/11.x/http-tests.md:589
#: ./docs/master/http-tests.md:518
msgctxt "CODE: php tab=Pest"
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"test('fluent json', function () {\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                 ->whereNot('status', 'pending')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:591
#: ./docs/9.x/http-tests.md:605
#: ./docs/10.x/http-tests.md:592
#: ./docs/11.x/http-tests.md:890
#: ./docs/master/http-tests.md:819
#~ msgctxt "P"
#~ msgid "<a name=\"available-assertions\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:592
#: ./docs/9.x/http-tests.md:606
#: ./docs/10.x/http-tests.md:593
#: ./docs/11.x/http-tests.md:891
#: ./docs/master/http-tests.md:820
msgctxt "H2"
msgid "Available Assertions"
msgstr ""

#: ./docs/8.x/http-tests.md:594
#: ./docs/9.x/http-tests.md:608
#: ./docs/10.x/http-tests.md:595
#: ./docs/11.x/http-tests.md:893
#: ./docs/master/http-tests.md:822
#~ msgctxt "P"
#~ msgid "<a name=\"response-assertions\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:595
#: ./docs/9.x/http-tests.md:609
#: ./docs/10.x/http-tests.md:596
#: ./docs/11.x/http-tests.md:894
#: ./docs/master/http-tests.md:823
msgctxt "H3"
msgid "Response Assertions"
msgstr ""

#: ./docs/8.x/http-tests.md:597
#: ./docs/9.x/http-tests.md:611
#: ./docs/10.x/http-tests.md:598
#: ./docs/11.x/http-tests.md:896
#: ./docs/master/http-tests.md:825
msgctxt "P"
msgid "Laravel's `Illuminate\\Testing\\TestResponse` class provides a variety of custom assertion methods that you may utilize when testing your application. These assertions may be accessed on the response that is returned by the `json`, `get`, `post`, `put`, and `delete` test methods:"
msgstr ""

#: ./docs/9.x/http-tests.md:599
#: ./docs/10.x/http-tests.md:586
#: ./docs/11.x/http-tests.md:884
#: ./docs/master/http-tests.md:813
msgctxt "P"
msgid "You may use the `component` method to evaluate and render a [Blade component](/docs/{{version}}/blade#components). The `component` method returns an instance of `Illuminate\\Testing\\TestComponent`:"
msgstr ""

#: ./docs/8.x/http-tests.md:612
msgctxt "P"
msgid "[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertSimilarJson](#assert-similar-json)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

#: ./docs/10.x/http-tests.md:615
#: ./docs/master/http-tests.md:842
msgctxt "P"
msgid "[assertAccepted](#assert-accepted)\n"
"[assertBadRequest](#assert-bad-request)\n"
"[assertConflict](#assert-conflict)\n"
"[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertFound](#assert-found)\n"
"[assertGone](#assert-gone)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertInternalServerError](#assert-internal-server-error)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonIsArray](#assert-json-is-array)\n"
"[assertJsonIsObject](#assert-json-is-object)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonMissingPath](#assert-json-missing-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertMethodNotAllowed](#assert-method-not-allowed)\n"
"[assertMovedPermanently](#assert-moved-permanently)\n"
"[assertContent](#assert-content)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertStreamedContent](#assert-streamed-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPaymentRequired](#assert-payment-required)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToRoute](#assert-redirect-to-route)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertRequestTimeout](#assert-request-timeout)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertServerError](#assert-server-error)\n"
"[assertServiceUnavailable](#assert-server-unavailable)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertTooManyRequests](#assert-too-many-requests)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertUnsupportedMediaType](#assert-unsupported-media-type)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

#: ./docs/9.x/http-tests.md:628
msgctxt "P"
msgid "[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonIsArray](#assert-json-is-array)\n"
"[assertJsonIsObject](#assert-json-is-object)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonMissingPath](#assert-json-missing-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertContent](#assert-content)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertStreamedContent](#assert-streamed-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToRoute](#assert-redirect-to-route)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

#: ./docs/8.x/http-tests.md:668
#: ./docs/9.x/http-tests.md:689
#: ./docs/10.x/http-tests.md:711
#: ./docs/11.x/http-tests.md:1010
#: ./docs/master/http-tests.md:938
#~ msgctxt "P"
#~ msgid "<a name=\"assert-cookie\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:669
#: ./docs/9.x/http-tests.md:690
#: ./docs/10.x/http-tests.md:712
#: ./docs/11.x/http-tests.md:1011
#: ./docs/master/http-tests.md:939
msgctxt "H4"
msgid "assertCookie"
msgstr ""

#: ./docs/8.x/http-tests.md:671
#: ./docs/9.x/http-tests.md:692
#: ./docs/10.x/http-tests.md:714
#: ./docs/11.x/http-tests.md:1013
#: ./docs/master/http-tests.md:941
msgctxt "P"
msgid "Assert that the response contains the given cookie:"
msgstr ""

#: ./docs/8.x/http-tests.md:673
#: ./docs/9.x/http-tests.md:694
#: ./docs/10.x/http-tests.md:716
#: ./docs/11.x/http-tests.md:1015
#: ./docs/master/http-tests.md:943
msgctxt "CODE"
msgid "$response->assertCookie($cookieName, $value = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:675
#: ./docs/9.x/http-tests.md:696
#: ./docs/10.x/http-tests.md:718
#: ./docs/11.x/http-tests.md:1017
#: ./docs/master/http-tests.md:945
#~ msgctxt "P"
#~ msgid "<a name=\"assert-cookie-expired\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:676
#: ./docs/9.x/http-tests.md:697
#: ./docs/10.x/http-tests.md:719
#: ./docs/11.x/http-tests.md:1018
#: ./docs/master/http-tests.md:946
msgctxt "H4"
msgid "assertCookieExpired"
msgstr ""

#: ./docs/8.x/http-tests.md:678
#: ./docs/9.x/http-tests.md:699
#: ./docs/10.x/http-tests.md:721
#: ./docs/11.x/http-tests.md:1020
#: ./docs/master/http-tests.md:948
msgctxt "P"
msgid "Assert that the response contains the given cookie and it is expired:"
msgstr ""

#: ./docs/8.x/http-tests.md:680
#: ./docs/9.x/http-tests.md:701
#: ./docs/10.x/http-tests.md:723
#: ./docs/11.x/http-tests.md:1022
#: ./docs/master/http-tests.md:950
msgctxt "CODE"
msgid "$response->assertCookieExpired($cookieName);"
msgstr ""

#: ./docs/8.x/http-tests.md:682
#: ./docs/9.x/http-tests.md:703
#: ./docs/10.x/http-tests.md:725
#: ./docs/11.x/http-tests.md:1024
#: ./docs/master/http-tests.md:952
#~ msgctxt "P"
#~ msgid "<a name=\"assert-cookie-not-expired\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:683
#: ./docs/9.x/http-tests.md:704
#: ./docs/10.x/http-tests.md:726
#: ./docs/11.x/http-tests.md:1025
#: ./docs/master/http-tests.md:953
msgctxt "H4"
msgid "assertCookieNotExpired"
msgstr ""

#: ./docs/8.x/http-tests.md:685
#: ./docs/9.x/http-tests.md:706
#: ./docs/10.x/http-tests.md:728
#: ./docs/11.x/http-tests.md:1027
#: ./docs/master/http-tests.md:955
msgctxt "P"
msgid "Assert that the response contains the given cookie and it is not expired:"
msgstr ""

#: ./docs/8.x/http-tests.md:687
#: ./docs/9.x/http-tests.md:708
#: ./docs/10.x/http-tests.md:730
#: ./docs/11.x/http-tests.md:1029
#: ./docs/master/http-tests.md:957
msgctxt "CODE"
msgid "$response->assertCookieNotExpired($cookieName);"
msgstr ""

#: ./docs/8.x/http-tests.md:689
#: ./docs/9.x/http-tests.md:710
#: ./docs/10.x/http-tests.md:732
#: ./docs/11.x/http-tests.md:1031
#: ./docs/master/http-tests.md:959
#~ msgctxt "P"
#~ msgid "<a name=\"assert-cookie-missing\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:690
#: ./docs/11.x/http-tests.md:989
#: ./docs/master/http-tests.md:917
#~ msgctxt "P"
#~ msgid "<a name=\"assert-bad-request\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:690
#: ./docs/9.x/http-tests.md:711
#: ./docs/10.x/http-tests.md:733
#: ./docs/11.x/http-tests.md:1032
#: ./docs/master/http-tests.md:960
msgctxt "H4"
msgid "assertCookieMissing"
msgstr ""

#: ./docs/10.x/http-tests.md:691
#: ./docs/11.x/http-tests.md:990
#: ./docs/master/http-tests.md:918
msgctxt "H4"
msgid "assertBadRequest"
msgstr ""

#: ./docs/8.x/http-tests.md:692
msgctxt "P"
msgid "Assert that the response does not contains the given cookie:"
msgstr ""

#: ./docs/10.x/http-tests.md:693
#: ./docs/11.x/http-tests.md:992
#: ./docs/master/http-tests.md:920
msgctxt "P"
msgid "Assert that the response has a bad request (400) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:694
#: ./docs/9.x/http-tests.md:715
#: ./docs/10.x/http-tests.md:737
#: ./docs/11.x/http-tests.md:1036
#: ./docs/master/http-tests.md:964
msgctxt "CODE"
msgid "$response->assertCookieMissing($cookieName);"
msgstr ""

#: ./docs/10.x/http-tests.md:695
#: ./docs/11.x/http-tests.md:994
#: ./docs/master/http-tests.md:922
msgctxt "CODE"
msgid "$response->assertBadRequest();"
msgstr ""

#: ./docs/8.x/http-tests.md:696
#: ./docs/9.x/http-tests.md:717
#: ./docs/10.x/http-tests.md:739
#: ./docs/11.x/http-tests.md:1038
#: ./docs/master/http-tests.md:966
#~ msgctxt "P"
#~ msgid "<a name=\"assert-created\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:697
#: ./docs/11.x/http-tests.md:996
#: ./docs/master/http-tests.md:924
#~ msgctxt "P"
#~ msgid "<a name=\"assert-accepted\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:697
#: ./docs/9.x/http-tests.md:718
#: ./docs/10.x/http-tests.md:740
#: ./docs/11.x/http-tests.md:1039
#: ./docs/master/http-tests.md:967
msgctxt "H4"
msgid "assertCreated"
msgstr ""

#: ./docs/10.x/http-tests.md:698
#: ./docs/11.x/http-tests.md:997
#: ./docs/master/http-tests.md:925
msgctxt "H4"
msgid "assertAccepted"
msgstr ""

#: ./docs/8.x/http-tests.md:699
#: ./docs/9.x/http-tests.md:720
#: ./docs/10.x/http-tests.md:742
#: ./docs/11.x/http-tests.md:1041
#: ./docs/master/http-tests.md:969
msgctxt "P"
msgid "Assert that the response has a 201 HTTP status code:"
msgstr ""

#: ./docs/10.x/http-tests.md:700
#: ./docs/11.x/http-tests.md:999
#: ./docs/master/http-tests.md:927
msgctxt "P"
msgid "Assert that the response has an accepted (202) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:701
#: ./docs/9.x/http-tests.md:722
#: ./docs/10.x/http-tests.md:744
#: ./docs/11.x/http-tests.md:1043
#: ./docs/master/http-tests.md:971
msgctxt "CODE"
msgid "$response->assertCreated();"
msgstr ""

#: ./docs/10.x/http-tests.md:702
#: ./docs/11.x/http-tests.md:1001
#: ./docs/master/http-tests.md:929
msgctxt "CODE"
msgid "$response->assertAccepted();"
msgstr ""

#: ./docs/8.x/http-tests.md:703
#: ./docs/9.x/http-tests.md:724
#: ./docs/10.x/http-tests.md:746
#: ./docs/11.x/http-tests.md:1045
#: ./docs/master/http-tests.md:973
#~ msgctxt "P"
#~ msgid "<a name=\"assert-dont-see\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:704
#: ./docs/11.x/http-tests.md:1003
#: ./docs/master/http-tests.md:931
#~ msgctxt "P"
#~ msgid "<a name=\"assert-conflict\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:704
#: ./docs/9.x/http-tests.md:725
#: ./docs/10.x/http-tests.md:747
#: ./docs/11.x/http-tests.md:1046
#: ./docs/master/http-tests.md:974
msgctxt "H4"
msgid "assertDontSee"
msgstr ""

#: ./docs/10.x/http-tests.md:705
#: ./docs/11.x/http-tests.md:1004
#: ./docs/master/http-tests.md:932
msgctxt "H4"
msgid "assertConflict"
msgstr ""

#: ./docs/8.x/http-tests.md:706
#: ./docs/9.x/http-tests.md:727
#: ./docs/10.x/http-tests.md:749
#: ./docs/11.x/http-tests.md:1048
#: ./docs/master/http-tests.md:976
msgctxt "P"
msgid "Assert that the given string is not contained within the response returned by the application. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

#: ./docs/10.x/http-tests.md:707
#: ./docs/11.x/http-tests.md:1006
#: ./docs/master/http-tests.md:934
msgctxt "P"
msgid "Assert that the response has a conflict (409) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:708
#: ./docs/9.x/http-tests.md:729
#: ./docs/10.x/http-tests.md:751
#: ./docs/11.x/http-tests.md:1050
#: ./docs/master/http-tests.md:978
msgctxt "CODE"
msgid "$response->assertDontSee($value, $escaped = true);"
msgstr ""

#: ./docs/10.x/http-tests.md:709
#: ./docs/11.x/http-tests.md:1008
#: ./docs/master/http-tests.md:936
msgctxt "CODE"
msgid "$response->assertConflict();"
msgstr ""

#: ./docs/8.x/http-tests.md:710
#: ./docs/9.x/http-tests.md:731
#: ./docs/10.x/http-tests.md:753
#: ./docs/11.x/http-tests.md:1052
#: ./docs/master/http-tests.md:980
#~ msgctxt "P"
#~ msgid "<a name=\"assert-dont-see-text\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:711
#: ./docs/9.x/http-tests.md:732
#: ./docs/10.x/http-tests.md:754
#: ./docs/11.x/http-tests.md:1053
#: ./docs/master/http-tests.md:981
msgctxt "H4"
msgid "assertDontSeeText"
msgstr ""

#: ./docs/8.x/http-tests.md:713
#: ./docs/9.x/http-tests.md:734
#: ./docs/10.x/http-tests.md:756
#: ./docs/11.x/http-tests.md:1055
#: ./docs/master/http-tests.md:983
msgctxt "P"
msgid "Assert that the given string is not contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. This method will pass the response content to the `strip_tags` PHP function before making the assertion:"
msgstr ""

#: ./docs/9.x/http-tests.md:713
#: ./docs/10.x/http-tests.md:735
#: ./docs/11.x/http-tests.md:1034
#: ./docs/master/http-tests.md:962
msgctxt "P"
msgid "Assert that the response does not contain the given cookie:"
msgstr ""

#: ./docs/8.x/http-tests.md:715
#: ./docs/9.x/http-tests.md:736
#: ./docs/10.x/http-tests.md:758
#: ./docs/11.x/http-tests.md:1057
#: ./docs/master/http-tests.md:985
msgctxt "CODE"
msgid "$response->assertDontSeeText($value, $escaped = true);"
msgstr ""

#: ./docs/8.x/http-tests.md:717
#: ./docs/9.x/http-tests.md:738
#: ./docs/10.x/http-tests.md:760
#: ./docs/11.x/http-tests.md:1059
#: ./docs/master/http-tests.md:987
#~ msgctxt "P"
#~ msgid "<a name=\"assert-download\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:718
#: ./docs/9.x/http-tests.md:739
#: ./docs/10.x/http-tests.md:761
#: ./docs/11.x/http-tests.md:1060
#: ./docs/master/http-tests.md:988
msgctxt "H4"
msgid "assertDownload"
msgstr ""

#: ./docs/8.x/http-tests.md:720
#: ./docs/9.x/http-tests.md:741
#: ./docs/10.x/http-tests.md:763
#: ./docs/11.x/http-tests.md:1062
#: ./docs/master/http-tests.md:990
msgctxt "P"
msgid "Assert that the response is a \"download\". Typically, this means the invoked route that returned the response returned a `Response::download` response, `BinaryFileResponse`, or `Storage::download` response:"
msgstr ""

#: ./docs/8.x/http-tests.md:722
#: ./docs/9.x/http-tests.md:743
#: ./docs/10.x/http-tests.md:765
#: ./docs/11.x/http-tests.md:1064
#: ./docs/master/http-tests.md:992
msgctxt "CODE"
msgid "$response->assertDownload();"
msgstr ""

#: ./docs/8.x/http-tests.md:724
#: ./docs/9.x/http-tests.md:745
#: ./docs/10.x/http-tests.md:767
#: ./docs/11.x/http-tests.md:1066
#: ./docs/master/http-tests.md:994
msgctxt "P"
msgid "If you wish, you may assert that the downloadable file was assigned a given file name:"
msgstr ""

#: ./docs/8.x/http-tests.md:726
#: ./docs/9.x/http-tests.md:747
#: ./docs/10.x/http-tests.md:769
#: ./docs/11.x/http-tests.md:1068
#: ./docs/master/http-tests.md:996
msgctxt "CODE"
msgid "$response->assertDownload('image.jpg');"
msgstr ""

#: ./docs/8.x/http-tests.md:728
#: ./docs/9.x/http-tests.md:749
#: ./docs/10.x/http-tests.md:771
#: ./docs/11.x/http-tests.md:1070
#: ./docs/master/http-tests.md:998
#~ msgctxt "P"
#~ msgid "<a name=\"assert-exact-json\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:729
#: ./docs/9.x/http-tests.md:750
#: ./docs/10.x/http-tests.md:772
#: ./docs/11.x/http-tests.md:1071
#: ./docs/master/http-tests.md:999
msgctxt "H4"
msgid "assertExactJson"
msgstr ""

#: ./docs/8.x/http-tests.md:731
#: ./docs/9.x/http-tests.md:752
#: ./docs/10.x/http-tests.md:774
#: ./docs/11.x/http-tests.md:1073
#: ./docs/master/http-tests.md:1001
msgctxt "P"
msgid "Assert that the response contains an exact match of the given JSON data:"
msgstr ""

#: ./docs/8.x/http-tests.md:733
#: ./docs/9.x/http-tests.md:754
#: ./docs/10.x/http-tests.md:776
#: ./docs/11.x/http-tests.md:1075
#: ./docs/master/http-tests.md:1003
msgctxt "CODE"
msgid "$response->assertExactJson(array $data);"
msgstr ""

#: ./docs/8.x/http-tests.md:735
#: ./docs/9.x/http-tests.md:756
#: ./docs/10.x/http-tests.md:778
#: ./docs/11.x/http-tests.md:1086
#: ./docs/master/http-tests.md:1005
#~ msgctxt "P"
#~ msgid "<a name=\"assert-forbidden\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:736
#: ./docs/9.x/http-tests.md:757
#: ./docs/10.x/http-tests.md:779
#: ./docs/11.x/http-tests.md:1087
#: ./docs/master/http-tests.md:1006
msgctxt "H4"
msgid "assertForbidden"
msgstr ""

#: ./docs/8.x/http-tests.md:738
#: ./docs/9.x/http-tests.md:759
#: ./docs/10.x/http-tests.md:781
#: ./docs/11.x/http-tests.md:1089
#: ./docs/master/http-tests.md:1008
msgctxt "P"
msgid "Assert that the response has a forbidden (403) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:740
#: ./docs/9.x/http-tests.md:761
#: ./docs/10.x/http-tests.md:783
#: ./docs/11.x/http-tests.md:1091
#: ./docs/master/http-tests.md:1010
msgctxt "CODE"
msgid "$response->assertForbidden();"
msgstr ""

#: ./docs/8.x/http-tests.md:742
#: ./docs/9.x/http-tests.md:763
#: ./docs/10.x/http-tests.md:799
#: ./docs/11.x/http-tests.md:1107
#: ./docs/master/http-tests.md:1026
#~ msgctxt "P"
#~ msgid "<a name=\"assert-header\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:743
#: ./docs/9.x/http-tests.md:764
#: ./docs/10.x/http-tests.md:800
#: ./docs/11.x/http-tests.md:1108
#: ./docs/master/http-tests.md:1027
msgctxt "H4"
msgid "assertHeader"
msgstr ""

#: ./docs/8.x/http-tests.md:745
#: ./docs/9.x/http-tests.md:766
#: ./docs/10.x/http-tests.md:802
#: ./docs/11.x/http-tests.md:1110
#: ./docs/master/http-tests.md:1029
msgctxt "P"
msgid "Assert that the given header and value is present on the response:"
msgstr ""

#: ./docs/8.x/http-tests.md:747
#: ./docs/9.x/http-tests.md:768
#: ./docs/10.x/http-tests.md:804
#: ./docs/11.x/http-tests.md:1112
#: ./docs/master/http-tests.md:1031
msgctxt "CODE"
msgid "$response->assertHeader($headerName, $value = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:749
#: ./docs/9.x/http-tests.md:770
#: ./docs/10.x/http-tests.md:806
#: ./docs/11.x/http-tests.md:1114
#: ./docs/master/http-tests.md:1033
#~ msgctxt "P"
#~ msgid "<a name=\"assert-header-missing\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:750
#: ./docs/9.x/http-tests.md:771
#: ./docs/10.x/http-tests.md:807
#: ./docs/11.x/http-tests.md:1115
#: ./docs/master/http-tests.md:1034
msgctxt "H4"
msgid "assertHeaderMissing"
msgstr ""

#: ./docs/11.x/http-tests.md:752
#: ./docs/master/http-tests.md:681
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"test('avatars can be uploaded', function () {\n"
"    Storage::fake('avatars');\n\n"
"    $file = UploadedFile::fake()->image('avatar.jpg');\n\n"
"    $response = $this->post('/avatar', [\n"
"        'avatar' => $file,\n"
"    ]);\n\n"
"    Storage::disk('avatars')->assertExists($file->hashName());\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:752
#: ./docs/9.x/http-tests.md:773
#: ./docs/10.x/http-tests.md:809
#: ./docs/11.x/http-tests.md:1117
#: ./docs/master/http-tests.md:1036
msgctxt "P"
msgid "Assert that the given header is not present on the response:"
msgstr ""

#: ./docs/8.x/http-tests.md:754
#: ./docs/9.x/http-tests.md:775
#: ./docs/10.x/http-tests.md:811
#: ./docs/11.x/http-tests.md:1119
#: ./docs/master/http-tests.md:1038
msgctxt "CODE"
msgid "$response->assertHeaderMissing($headerName);"
msgstr ""

#: ./docs/8.x/http-tests.md:756
#: ./docs/9.x/http-tests.md:777
#: ./docs/10.x/http-tests.md:820
#: ./docs/11.x/http-tests.md:1128
#: ./docs/master/http-tests.md:1047
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:757
#: ./docs/9.x/http-tests.md:778
#: ./docs/10.x/http-tests.md:821
#: ./docs/11.x/http-tests.md:1129
#: ./docs/master/http-tests.md:1048
msgctxt "H4"
msgid "assertJson"
msgstr ""

#: ./docs/8.x/http-tests.md:759
#: ./docs/9.x/http-tests.md:780
#: ./docs/10.x/http-tests.md:823
#: ./docs/11.x/http-tests.md:1131
#: ./docs/master/http-tests.md:1050
msgctxt "P"
msgid "Assert that the response contains the given JSON data:"
msgstr ""

#: ./docs/8.x/http-tests.md:761
#: ./docs/9.x/http-tests.md:782
#: ./docs/10.x/http-tests.md:825
#: ./docs/11.x/http-tests.md:1133
#: ./docs/master/http-tests.md:1052
msgctxt "CODE"
msgid "$response->assertJson(array $data, $strict = false);"
msgstr ""

#: ./docs/8.x/http-tests.md:765
#: ./docs/9.x/http-tests.md:786
#: ./docs/10.x/http-tests.md:829
#: ./docs/11.x/http-tests.md:1137
#: ./docs/master/http-tests.md:1056
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-count\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:766
#: ./docs/9.x/http-tests.md:787
#: ./docs/10.x/http-tests.md:830
#: ./docs/11.x/http-tests.md:1138
#: ./docs/master/http-tests.md:1057
msgctxt "H4"
msgid "assertJsonCount"
msgstr ""

#: ./docs/8.x/http-tests.md:768
#: ./docs/9.x/http-tests.md:789
#: ./docs/10.x/http-tests.md:832
#: ./docs/11.x/http-tests.md:1140
#: ./docs/master/http-tests.md:1059
msgctxt "P"
msgid "Assert that the response JSON has an array with the expected number of items at the given key:"
msgstr ""

#: ./docs/8.x/http-tests.md:770
#: ./docs/9.x/http-tests.md:791
#: ./docs/10.x/http-tests.md:834
#: ./docs/11.x/http-tests.md:1142
#: ./docs/master/http-tests.md:1061
msgctxt "CODE"
msgid "$response->assertJsonCount($count, $key = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:772
#: ./docs/9.x/http-tests.md:793
#: ./docs/10.x/http-tests.md:836
#: ./docs/11.x/http-tests.md:1144
#: ./docs/master/http-tests.md:1063
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-fragment\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:773
#: ./docs/9.x/http-tests.md:794
#: ./docs/10.x/http-tests.md:837
#: ./docs/11.x/http-tests.md:1145
#: ./docs/master/http-tests.md:1064
msgctxt "H4"
msgid "assertJsonFragment"
msgstr ""

#: ./docs/8.x/http-tests.md:775
#: ./docs/9.x/http-tests.md:796
#: ./docs/10.x/http-tests.md:839
#: ./docs/11.x/http-tests.md:1147
#: ./docs/master/http-tests.md:1066
msgctxt "P"
msgid "Assert that the response contains the given JSON data anywhere in the response:"
msgstr ""

#: ./docs/8.x/http-tests.md:777
#: ./docs/9.x/http-tests.md:798
#: ./docs/10.x/http-tests.md:841
#: ./docs/11.x/http-tests.md:1149
#: ./docs/master/http-tests.md:1068
msgctxt "CODE"
msgid "Route::get('/users', function () {\n"
"    return [\n"
"        'users' => [\n"
"            [\n"
"                'name' => 'Taylor Otwell',\n"
"            ],\n"
"        ],\n"
"    ];\n"
"});\n\n"
"$response->assertJsonFragment(['name' => 'Taylor Otwell']);"
msgstr ""

#: ./docs/10.x/http-tests.md:785
#: ./docs/11.x/http-tests.md:1093
#: ./docs/master/http-tests.md:1012
#~ msgctxt "P"
#~ msgid "<a name=\"assert-found\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:786
#: ./docs/11.x/http-tests.md:1094
#: ./docs/master/http-tests.md:1013
msgctxt "H4"
msgid "assertFound"
msgstr ""

#: ./docs/10.x/http-tests.md:788
#: ./docs/11.x/http-tests.md:1096
#: ./docs/master/http-tests.md:1015
msgctxt "P"
msgid "Assert that the response has a found (302) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:789
#: ./docs/9.x/http-tests.md:824
#: ./docs/10.x/http-tests.md:867
#: ./docs/11.x/http-tests.md:1175
#: ./docs/master/http-tests.md:1094
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-missing\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:790
#: ./docs/11.x/http-tests.md:1098
#: ./docs/master/http-tests.md:1017
msgctxt "CODE"
msgid "$response->assertFound();"
msgstr ""

#: ./docs/8.x/http-tests.md:790
#: ./docs/9.x/http-tests.md:825
#: ./docs/10.x/http-tests.md:868
#: ./docs/11.x/http-tests.md:1176
#: ./docs/master/http-tests.md:1095
msgctxt "H4"
msgid "assertJsonMissing"
msgstr ""

#: ./docs/10.x/http-tests.md:792
#: ./docs/11.x/http-tests.md:1100
#: ./docs/master/http-tests.md:1019
#~ msgctxt "P"
#~ msgid "<a name=\"assert-gone\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:792
#: ./docs/9.x/http-tests.md:827
#: ./docs/10.x/http-tests.md:870
#: ./docs/11.x/http-tests.md:1178
#: ./docs/master/http-tests.md:1097
msgctxt "P"
msgid "Assert that the response does not contain the given JSON data:"
msgstr ""

#: ./docs/10.x/http-tests.md:793
#: ./docs/11.x/http-tests.md:1101
#: ./docs/master/http-tests.md:1020
msgctxt "H4"
msgid "assertGone"
msgstr ""

#: ./docs/8.x/http-tests.md:794
#: ./docs/9.x/http-tests.md:829
#: ./docs/10.x/http-tests.md:872
#: ./docs/11.x/http-tests.md:1180
#: ./docs/master/http-tests.md:1099
msgctxt "CODE"
msgid "$response->assertJsonMissing(array $data);"
msgstr ""

#: ./docs/10.x/http-tests.md:795
#: ./docs/11.x/http-tests.md:1103
#: ./docs/master/http-tests.md:1022
msgctxt "P"
msgid "Assert that the response has a gone (410) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:796
#: ./docs/9.x/http-tests.md:831
#: ./docs/10.x/http-tests.md:874
#: ./docs/11.x/http-tests.md:1182
#: ./docs/master/http-tests.md:1101
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-missing-exact\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:797
#: ./docs/11.x/http-tests.md:1105
#: ./docs/master/http-tests.md:1024
msgctxt "CODE"
msgid "$response->assertGone();"
msgstr ""

#: ./docs/8.x/http-tests.md:797
#: ./docs/9.x/http-tests.md:832
#: ./docs/10.x/http-tests.md:875
#: ./docs/11.x/http-tests.md:1183
#: ./docs/master/http-tests.md:1102
msgctxt "H4"
msgid "assertJsonMissingExact"
msgstr ""

#: ./docs/8.x/http-tests.md:799
#: ./docs/9.x/http-tests.md:834
#: ./docs/10.x/http-tests.md:877
#: ./docs/11.x/http-tests.md:1185
#: ./docs/master/http-tests.md:1104
msgctxt "P"
msgid "Assert that the response does not contain the exact JSON data:"
msgstr ""

#: ./docs/8.x/http-tests.md:801
#: ./docs/9.x/http-tests.md:836
#: ./docs/10.x/http-tests.md:879
#: ./docs/11.x/http-tests.md:1187
#: ./docs/master/http-tests.md:1106
msgctxt "CODE"
msgid "$response->assertJsonMissingExact(array $data);"
msgstr ""

#: ./docs/8.x/http-tests.md:803
#: ./docs/9.x/http-tests.md:838
#: ./docs/10.x/http-tests.md:881
#: ./docs/11.x/http-tests.md:1189
#: ./docs/master/http-tests.md:1108
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-missing-validation-errors\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:804
#: ./docs/9.x/http-tests.md:839
#: ./docs/10.x/http-tests.md:882
#: ./docs/11.x/http-tests.md:1190
#: ./docs/master/http-tests.md:1109
msgctxt "H4"
msgid "assertJsonMissingValidationErrors"
msgstr ""

#: ./docs/8.x/http-tests.md:806
#: ./docs/9.x/http-tests.md:841
#: ./docs/10.x/http-tests.md:884
#: ./docs/11.x/http-tests.md:1192
#: ./docs/master/http-tests.md:1111
msgctxt "P"
msgid "Assert that the response has no JSON validation errors for the given keys:"
msgstr ""

#: ./docs/8.x/http-tests.md:808
#: ./docs/9.x/http-tests.md:843
#: ./docs/10.x/http-tests.md:886
#: ./docs/11.x/http-tests.md:1194
#: ./docs/master/http-tests.md:1113
msgctxt "CODE"
msgid "$response->assertJsonMissingValidationErrors($keys);"
msgstr ""

#: ./docs/8.x/http-tests.md:810
#: ./docs/9.x/http-tests.md:846
#: ./docs/9.x/http-tests.md:1152
#: ./docs/10.x/http-tests.md:889
#: ./docs/10.x/http-tests.md:1239
#: ./docs/11.x/http-tests.md:1197
#: ./docs/11.x/http-tests.md:1547
#: ./docs/master/http-tests.md:1116
#: ./docs/master/http-tests.md:1466
msgctxt "P"
msgid "The more generic [assertValid](#assert-valid) method may be used to assert that a response does not have validation errors that were returned as JSON **and** that no errors were flashed to session storage."
msgstr ""

#: ./docs/9.x/http-tests.md:810
#: ./docs/10.x/http-tests.md:853
#: ./docs/11.x/http-tests.md:1161
#: ./docs/master/http-tests.md:1080
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-is-array\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:811
#: ./docs/10.x/http-tests.md:854
#: ./docs/11.x/http-tests.md:1162
#: ./docs/master/http-tests.md:1081
msgctxt "H4"
msgid "assertJsonIsArray"
msgstr ""

#: ./docs/8.x/http-tests.md:812
#: ./docs/9.x/http-tests.md:848
#: ./docs/10.x/http-tests.md:891
#: ./docs/11.x/http-tests.md:1199
#: ./docs/master/http-tests.md:1118
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-path\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:813
#: ./docs/11.x/http-tests.md:1121
#: ./docs/master/http-tests.md:1040
#~ msgctxt "P"
#~ msgid "<a name=\"assert-internal-server-error\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:813
#: ./docs/9.x/http-tests.md:849
#: ./docs/10.x/http-tests.md:892
#: ./docs/11.x/http-tests.md:1200
#: ./docs/master/http-tests.md:1119
msgctxt "H4"
msgid "assertJsonPath"
msgstr ""

#: ./docs/9.x/http-tests.md:813
#: ./docs/10.x/http-tests.md:856
#: ./docs/11.x/http-tests.md:1164
#: ./docs/master/http-tests.md:1083
msgctxt "P"
msgid "Assert that the response JSON is an array:"
msgstr ""

#: ./docs/10.x/http-tests.md:814
#: ./docs/11.x/http-tests.md:1122
#: ./docs/master/http-tests.md:1041
msgctxt "H4"
msgid "assertInternalServerError"
msgstr ""

#: ./docs/8.x/http-tests.md:815
#: ./docs/9.x/http-tests.md:851
#: ./docs/10.x/http-tests.md:894
#: ./docs/11.x/http-tests.md:1202
#: ./docs/master/http-tests.md:1121
msgctxt "P"
msgid "Assert that the response contains the given data at the specified path:"
msgstr ""

#: ./docs/9.x/http-tests.md:815
#: ./docs/10.x/http-tests.md:858
#: ./docs/11.x/http-tests.md:1166
#: ./docs/master/http-tests.md:1085
msgctxt "CODE"
msgid "$response->assertJsonIsArray();"
msgstr ""

#: ./docs/10.x/http-tests.md:816
#: ./docs/11.x/http-tests.md:1124
#: ./docs/master/http-tests.md:1043
msgctxt "P"
msgid "Assert that the response has an \"Internal Server Error\" (500) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:817
#: ./docs/9.x/http-tests.md:853
#: ./docs/10.x/http-tests.md:896
#: ./docs/11.x/http-tests.md:1204
#: ./docs/master/http-tests.md:1123
msgctxt "CODE"
msgid "$response->assertJsonPath($path, $expectedValue);"
msgstr ""

#: ./docs/9.x/http-tests.md:817
#: ./docs/10.x/http-tests.md:860
#: ./docs/11.x/http-tests.md:1168
#: ./docs/master/http-tests.md:1087
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-is-object\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:818
#: ./docs/11.x/http-tests.md:1126
#: ./docs/master/http-tests.md:1045
msgctxt "CODE"
msgid "$response->assertInternalServerError();"
msgstr ""

#: ./docs/9.x/http-tests.md:818
#: ./docs/10.x/http-tests.md:861
#: ./docs/11.x/http-tests.md:1169
#: ./docs/master/http-tests.md:1088
msgctxt "H4"
msgid "assertJsonIsObject"
msgstr ""

#: ./docs/8.x/http-tests.md:819
#: ./docs/8.x/http-tests.md:840
#: ./docs/9.x/http-tests.md:897
#: ./docs/10.x/http-tests.md:940
#: ./docs/11.x/http-tests.md:1248
#: ./docs/master/http-tests.md:1167
msgctxt "P"
msgid "For example, if the JSON response returned by your application contains the following data:"
msgstr ""

#: ./docs/9.x/http-tests.md:820
#: ./docs/10.x/http-tests.md:863
#: ./docs/11.x/http-tests.md:1171
#: ./docs/master/http-tests.md:1090
msgctxt "P"
msgid "Assert that the response JSON is an object:"
msgstr ""

#: ./docs/8.x/http-tests.md:821
#: ./docs/8.x/http-tests.md:842
#: ./docs/9.x/http-tests.md:857
#: ./docs/9.x/http-tests.md:878
#: ./docs/9.x/http-tests.md:899
#: ./docs/10.x/http-tests.md:900
#: ./docs/10.x/http-tests.md:921
#: ./docs/10.x/http-tests.md:942
#: ./docs/11.x/http-tests.md:1208
#: ./docs/11.x/http-tests.md:1229
#: ./docs/11.x/http-tests.md:1250
#: ./docs/master/http-tests.md:1127
#: ./docs/master/http-tests.md:1148
#: ./docs/master/http-tests.md:1169
msgctxt "CODE: js"
msgid "{\n"
"    \"user\": {\n"
"        \"name\": \"Steve Schoger\"\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/http-tests.md:822
#: ./docs/10.x/http-tests.md:865
#: ./docs/11.x/http-tests.md:1173
#: ./docs/master/http-tests.md:1092
msgctxt "CODE"
msgid "$response->assertJsonIsObject();"
msgstr ""

#: ./docs/11.x/http-tests.md:827
#: ./docs/master/http-tests.md:756
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"test('a welcome view can be rendered', function () {\n"
"    $view = $this->view('welcome', ['name' => 'Taylor']);\n\n"
"    $view->assertSee('Taylor');\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:829
#: ./docs/9.x/http-tests.md:865
#: ./docs/10.x/http-tests.md:908
#: ./docs/11.x/http-tests.md:1216
#: ./docs/master/http-tests.md:1135
msgctxt "P"
msgid "You may assert that the `name` property of the `user` object matches a given value like so:"
msgstr ""

#: ./docs/8.x/http-tests.md:831
#: ./docs/9.x/http-tests.md:867
#: ./docs/10.x/http-tests.md:910
#: ./docs/11.x/http-tests.md:1218
#: ./docs/master/http-tests.md:1137
msgctxt "CODE"
msgid "$response->assertJsonPath('user.name', 'Steve Schoger');"
msgstr ""

#: ./docs/8.x/http-tests.md:833
#: ./docs/9.x/http-tests.md:890
#: ./docs/10.x/http-tests.md:933
#: ./docs/11.x/http-tests.md:1241
#: ./docs/master/http-tests.md:1160
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:834
#: ./docs/9.x/http-tests.md:891
#: ./docs/10.x/http-tests.md:934
#: ./docs/11.x/http-tests.md:1242
#: ./docs/master/http-tests.md:1161
msgctxt "H4"
msgid "assertJsonStructure"
msgstr ""

#: ./docs/8.x/http-tests.md:836
#: ./docs/9.x/http-tests.md:893
#: ./docs/10.x/http-tests.md:936
#: ./docs/11.x/http-tests.md:1244
#: ./docs/master/http-tests.md:1163
msgctxt "P"
msgid "Assert that the response has a given JSON structure:"
msgstr ""

#: ./docs/8.x/http-tests.md:838
#: ./docs/9.x/http-tests.md:895
#: ./docs/10.x/http-tests.md:938
#: ./docs/11.x/http-tests.md:1246
#: ./docs/master/http-tests.md:1165
msgctxt "CODE"
msgid "$response->assertJsonStructure(array $structure);"
msgstr ""

#: ./docs/8.x/http-tests.md:850
#: ./docs/9.x/http-tests.md:907
#: ./docs/10.x/http-tests.md:950
#: ./docs/11.x/http-tests.md:1258
#: ./docs/master/http-tests.md:1177
msgctxt "P"
msgid "You may assert that the JSON structure matches your expectations like so:"
msgstr ""

#: ./docs/8.x/http-tests.md:852
#: ./docs/9.x/http-tests.md:909
#: ./docs/10.x/http-tests.md:952
#: ./docs/11.x/http-tests.md:1260
#: ./docs/master/http-tests.md:1179
msgctxt "CODE"
msgid "$response->assertJsonStructure([\n"
"    'user' => [\n"
"        'name',\n"
"    ]\n"
"]);"
msgstr ""

#: ./docs/9.x/http-tests.md:855
#: ./docs/9.x/http-tests.md:876
#: ./docs/10.x/http-tests.md:898
#: ./docs/10.x/http-tests.md:919
#: ./docs/11.x/http-tests.md:1206
#: ./docs/11.x/http-tests.md:1227
#: ./docs/master/http-tests.md:1125
#: ./docs/master/http-tests.md:1146
msgctxt "P"
msgid "For example, if the following JSON response is returned by your application:"
msgstr ""

#: ./docs/8.x/http-tests.md:858
#: ./docs/9.x/http-tests.md:915
#: ./docs/10.x/http-tests.md:958
#: ./docs/11.x/http-tests.md:1266
#: ./docs/master/http-tests.md:1185
msgctxt "P"
msgid "Sometimes, JSON responses returned by your application may contain arrays of objects:"
msgstr ""

#: ./docs/8.x/http-tests.md:860
#: ./docs/9.x/http-tests.md:917
#: ./docs/10.x/http-tests.md:960
#: ./docs/11.x/http-tests.md:1268
#: ./docs/master/http-tests.md:1187
msgctxt "CODE: js"
msgid "{\n"
"    \"user\": [\n"
"        {\n"
"            \"name\": \"Steve Schoger\",\n"
"            \"age\": 55,\n"
"            \"location\": \"Earth\"\n"
"        },\n"
"        {\n"
"            \"name\": \"Mary Schoger\",\n"
"            \"age\": 60,\n"
"            \"location\": \"Earth\"\n"
"        }\n"
"    ]\n"
"}"
msgstr ""

#: ./docs/9.x/http-tests.md:869
#: ./docs/10.x/http-tests.md:912
#: ./docs/11.x/http-tests.md:1220
#: ./docs/master/http-tests.md:1139
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-missing-path\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:870
#: ./docs/10.x/http-tests.md:913
#: ./docs/11.x/http-tests.md:1221
#: ./docs/master/http-tests.md:1140
msgctxt "H4"
msgid "assertJsonMissingPath"
msgstr ""

#: ./docs/9.x/http-tests.md:872
#: ./docs/10.x/http-tests.md:915
#: ./docs/11.x/http-tests.md:1223
#: ./docs/master/http-tests.md:1142
msgctxt "P"
msgid "Assert that the response does not contain the given path:"
msgstr ""

#: ./docs/9.x/http-tests.md:874
#: ./docs/10.x/http-tests.md:917
#: ./docs/11.x/http-tests.md:1225
#: ./docs/master/http-tests.md:1144
msgctxt "CODE"
msgid "$response->assertJsonMissingPath($path);"
msgstr ""

#: ./docs/8.x/http-tests.md:877
#: ./docs/9.x/http-tests.md:934
#: ./docs/10.x/http-tests.md:977
#: ./docs/11.x/http-tests.md:1285
#: ./docs/master/http-tests.md:1204
msgctxt "P"
msgid "In this situation, you may use the `*` character to assert against the structure of all of the objects in the array:"
msgstr ""

#: ./docs/8.x/http-tests.md:879
#: ./docs/9.x/http-tests.md:936
#: ./docs/10.x/http-tests.md:979
#: ./docs/11.x/http-tests.md:1287
#: ./docs/master/http-tests.md:1206
msgctxt "CODE"
msgid "$response->assertJsonStructure([\n"
"    'user' => [\n"
"        '*' => [\n"
"             'name',\n"
"             'age',\n"
"             'location'\n"
"        ]\n"
"    ]\n"
"]);"
msgstr ""

#: ./docs/9.x/http-tests.md:886
#: ./docs/10.x/http-tests.md:929
#: ./docs/11.x/http-tests.md:1237
#: ./docs/master/http-tests.md:1156
msgctxt "P"
msgid "You may assert that it does not contain the `email` property of the `user` object:"
msgstr ""

#: ./docs/9.x/http-tests.md:888
#: ./docs/10.x/http-tests.md:931
#: ./docs/11.x/http-tests.md:1239
#: ./docs/master/http-tests.md:1158
msgctxt "CODE"
msgid "$response->assertJsonMissingPath('user.email');"
msgstr ""

#: ./docs/8.x/http-tests.md:889
#: ./docs/9.x/http-tests.md:946
#: ./docs/10.x/http-tests.md:989
#: ./docs/11.x/http-tests.md:1297
#: ./docs/master/http-tests.md:1216
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-validation-errors\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:890
#: ./docs/9.x/http-tests.md:947
#: ./docs/10.x/http-tests.md:990
#: ./docs/11.x/http-tests.md:1298
#: ./docs/master/http-tests.md:1217
msgctxt "H4"
msgid "assertJsonValidationErrors"
msgstr ""

#: ./docs/8.x/http-tests.md:892
#: ./docs/9.x/http-tests.md:949
#: ./docs/10.x/http-tests.md:992
#: ./docs/11.x/http-tests.md:1300
#: ./docs/master/http-tests.md:1219
msgctxt "P"
msgid "Assert that the response has the given JSON validation errors for the given keys. This method should be used when asserting against responses where the validation errors are returned as a JSON structure instead of being flashed to the session:"
msgstr ""

#: ./docs/8.x/http-tests.md:894
#: ./docs/9.x/http-tests.md:951
#: ./docs/10.x/http-tests.md:994
#: ./docs/11.x/http-tests.md:1302
#: ./docs/master/http-tests.md:1221
msgctxt "CODE"
msgid "$response->assertJsonValidationErrors(array $data, $responseKey = 'errors');"
msgstr ""

#: ./docs/8.x/http-tests.md:896
#: ./docs/9.x/http-tests.md:954
#: ./docs/9.x/http-tests.md:1128
#: ./docs/10.x/http-tests.md:997
#: ./docs/10.x/http-tests.md:1215
#: ./docs/11.x/http-tests.md:1305
#: ./docs/11.x/http-tests.md:1523
#: ./docs/master/http-tests.md:1224
#: ./docs/master/http-tests.md:1442
msgctxt "P"
msgid "The more generic [assertInvalid](#assert-invalid) method may be used to assert that a response has validation errors returned as JSON **or** that errors were flashed to session storage."
msgstr ""

#: ./docs/8.x/http-tests.md:898
#: ./docs/9.x/http-tests.md:956
#: ./docs/10.x/http-tests.md:999
#: ./docs/11.x/http-tests.md:1307
#: ./docs/master/http-tests.md:1226
#~ msgctxt "P"
#~ msgid "<a name=\"assert-json-validation-error-for\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:899
#: ./docs/9.x/http-tests.md:957
#: ./docs/10.x/http-tests.md:1000
#: ./docs/11.x/http-tests.md:1308
#: ./docs/master/http-tests.md:1227
msgctxt "H4"
msgid "assertJsonValidationErrorFor"
msgstr ""

#: ./docs/8.x/http-tests.md:901
#: ./docs/9.x/http-tests.md:959
#: ./docs/10.x/http-tests.md:1002
#: ./docs/11.x/http-tests.md:1310
#: ./docs/master/http-tests.md:1229
msgctxt "P"
msgid "Assert the response has any JSON validation errors for the given key:"
msgstr ""

#: ./docs/8.x/http-tests.md:903
#: ./docs/9.x/http-tests.md:961
#: ./docs/10.x/http-tests.md:1004
#: ./docs/11.x/http-tests.md:1312
#: ./docs/master/http-tests.md:1231
msgctxt "CODE"
msgid "$response->assertJsonValidationErrorFor(string $key, $responseKey = 'errors');"
msgstr ""

#: ./docs/8.x/http-tests.md:905
#: ./docs/9.x/http-tests.md:963
#: ./docs/10.x/http-tests.md:1020
#: ./docs/11.x/http-tests.md:1328
#: ./docs/master/http-tests.md:1247
#~ msgctxt "P"
#~ msgid "<a name=\"assert-location\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:906
#: ./docs/9.x/http-tests.md:964
#: ./docs/10.x/http-tests.md:1021
#: ./docs/11.x/http-tests.md:1329
#: ./docs/master/http-tests.md:1248
msgctxt "H4"
msgid "assertLocation"
msgstr ""

#: ./docs/8.x/http-tests.md:908
#: ./docs/9.x/http-tests.md:966
#: ./docs/10.x/http-tests.md:1023
#: ./docs/11.x/http-tests.md:1331
#: ./docs/master/http-tests.md:1250
msgctxt "P"
msgid "Assert that the response has the given URI value in the `Location` header:"
msgstr ""

#: ./docs/8.x/http-tests.md:910
#: ./docs/9.x/http-tests.md:968
#: ./docs/10.x/http-tests.md:1025
#: ./docs/11.x/http-tests.md:1333
#: ./docs/master/http-tests.md:1252
msgctxt "CODE"
msgid "$response->assertLocation($uri);"
msgstr ""

#: ./docs/8.x/http-tests.md:912
#: ./docs/9.x/http-tests.md:977
#: ./docs/10.x/http-tests.md:1034
#: ./docs/11.x/http-tests.md:1342
#: ./docs/master/http-tests.md:1261
#~ msgctxt "P"
#~ msgid "<a name=\"assert-no-content\"></a>"
#~ msgstr ""

#: ./docs/11.x/http-tests.md:913
msgctxt "P"
msgid "[assertAccepted](#assert-accepted)\n"
"[assertBadRequest](#assert-bad-request)\n"
"[assertConflict](#assert-conflict)\n"
"[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertExactJsonStructure](#assert-exact-json-structure)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertFound](#assert-found)\n"
"[assertGone](#assert-gone)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertInternalServerError](#assert-internal-server-error)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonIsArray](#assert-json-is-array)\n"
"[assertJsonIsObject](#assert-json-is-object)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonMissingPath](#assert-json-missing-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertMethodNotAllowed](#assert-method-not-allowed)\n"
"[assertMovedPermanently](#assert-moved-permanently)\n"
"[assertContent](#assert-content)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertStreamedContent](#assert-streamed-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPaymentRequired](#assert-payment-required)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToRoute](#assert-redirect-to-route)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertRequestTimeout](#assert-request-timeout)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertServerError](#assert-server-error)\n"
"[assertServiceUnavailable](#assert-server-unavailable)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertTooManyRequests](#assert-too-many-requests)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertUnsupportedMediaType](#assert-unsupported-media-type)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

#: ./docs/8.x/http-tests.md:913
#: ./docs/9.x/http-tests.md:978
#: ./docs/10.x/http-tests.md:1035
#: ./docs/11.x/http-tests.md:1343
#: ./docs/master/http-tests.md:1262
msgctxt "H4"
msgid "assertNoContent"
msgstr ""

#: ./docs/8.x/http-tests.md:915
#: ./docs/9.x/http-tests.md:980
#: ./docs/10.x/http-tests.md:1037
#: ./docs/11.x/http-tests.md:1345
#: ./docs/master/http-tests.md:1264
msgctxt "P"
msgid "Assert that the response has the given HTTP status code and no content:"
msgstr ""

#: ./docs/8.x/http-tests.md:917
#: ./docs/9.x/http-tests.md:982
#: ./docs/10.x/http-tests.md:1039
#: ./docs/11.x/http-tests.md:1347
#: ./docs/master/http-tests.md:1266
msgctxt "CODE"
msgid "$response->assertNoContent($status = 204);"
msgstr ""

#: ./docs/8.x/http-tests.md:919
#: ./docs/9.x/http-tests.md:991
#: ./docs/10.x/http-tests.md:1048
#: ./docs/11.x/http-tests.md:1356
#: ./docs/master/http-tests.md:1275
#~ msgctxt "P"
#~ msgid "<a name=\"assert-not-found\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:920
#: ./docs/9.x/http-tests.md:992
#: ./docs/10.x/http-tests.md:1049
#: ./docs/11.x/http-tests.md:1357
#: ./docs/master/http-tests.md:1276
msgctxt "H4"
msgid "assertNotFound"
msgstr ""

#: ./docs/8.x/http-tests.md:922
#: ./docs/9.x/http-tests.md:994
#: ./docs/10.x/http-tests.md:1051
#: ./docs/11.x/http-tests.md:1359
#: ./docs/master/http-tests.md:1278
msgctxt "P"
msgid "Assert that the response has a not found (404) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:924
#: ./docs/9.x/http-tests.md:996
#: ./docs/10.x/http-tests.md:1053
#: ./docs/11.x/http-tests.md:1361
#: ./docs/master/http-tests.md:1280
msgctxt "CODE"
msgid "$response->assertNotFound();"
msgstr ""

#: ./docs/8.x/http-tests.md:926
#: ./docs/9.x/http-tests.md:998
#: ./docs/10.x/http-tests.md:1055
#: ./docs/11.x/http-tests.md:1363
#: ./docs/master/http-tests.md:1282
#~ msgctxt "P"
#~ msgid "<a name=\"assert-ok\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:927
#: ./docs/9.x/http-tests.md:999
#: ./docs/10.x/http-tests.md:1056
#: ./docs/11.x/http-tests.md:1364
#: ./docs/master/http-tests.md:1283
msgctxt "H4"
msgid "assertOk"
msgstr ""

#: ./docs/8.x/http-tests.md:929
#: ./docs/9.x/http-tests.md:1001
#: ./docs/10.x/http-tests.md:1058
#: ./docs/11.x/http-tests.md:1366
#: ./docs/master/http-tests.md:1285
msgctxt "P"
msgid "Assert that the response has a 200 HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:931
#: ./docs/9.x/http-tests.md:1003
#: ./docs/10.x/http-tests.md:1060
#: ./docs/11.x/http-tests.md:1368
#: ./docs/master/http-tests.md:1287
msgctxt "CODE"
msgid "$response->assertOk();"
msgstr ""

#: ./docs/8.x/http-tests.md:933
#: ./docs/9.x/http-tests.md:1005
#: ./docs/10.x/http-tests.md:1069
#: ./docs/11.x/http-tests.md:1377
#: ./docs/master/http-tests.md:1296
#~ msgctxt "P"
#~ msgid "<a name=\"assert-plain-cookie\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:934
#: ./docs/9.x/http-tests.md:1006
#: ./docs/10.x/http-tests.md:1070
#: ./docs/11.x/http-tests.md:1378
#: ./docs/master/http-tests.md:1297
msgctxt "H4"
msgid "assertPlainCookie"
msgstr ""

#: ./docs/8.x/http-tests.md:936
#: ./docs/9.x/http-tests.md:1008
#: ./docs/10.x/http-tests.md:1072
#: ./docs/11.x/http-tests.md:1380
#: ./docs/master/http-tests.md:1299
msgctxt "P"
msgid "Assert that the response contains the given unencrypted cookie:"
msgstr ""

#: ./docs/8.x/http-tests.md:938
#: ./docs/9.x/http-tests.md:1010
#: ./docs/10.x/http-tests.md:1074
#: ./docs/11.x/http-tests.md:1382
#: ./docs/master/http-tests.md:1301
msgctxt "CODE"
msgid "$response->assertPlainCookie($cookieName, $value = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:940
#: ./docs/9.x/http-tests.md:1012
#: ./docs/10.x/http-tests.md:1076
#: ./docs/11.x/http-tests.md:1384
#: ./docs/master/http-tests.md:1303
#~ msgctxt "P"
#~ msgid "<a name=\"assert-redirect\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:941
#: ./docs/9.x/http-tests.md:1013
#: ./docs/10.x/http-tests.md:1077
#: ./docs/11.x/http-tests.md:1385
#: ./docs/master/http-tests.md:1304
msgctxt "H4"
msgid "assertRedirect"
msgstr ""

#: ./docs/8.x/http-tests.md:943
#: ./docs/9.x/http-tests.md:1015
#: ./docs/10.x/http-tests.md:1079
#: ./docs/11.x/http-tests.md:1387
#: ./docs/master/http-tests.md:1306
msgctxt "P"
msgid "Assert that the response is a redirect to the given URI:"
msgstr ""

#: ./docs/8.x/http-tests.md:945
#: ./docs/9.x/http-tests.md:1017
msgctxt "CODE"
msgid "$response->assertRedirect($uri);"
msgstr ""

#: ./docs/8.x/http-tests.md:947
#: ./docs/9.x/http-tests.md:1019
#: ./docs/10.x/http-tests.md:1083
#: ./docs/11.x/http-tests.md:1391
#: ./docs/master/http-tests.md:1310
#~ msgctxt "P"
#~ msgid "<a name=\"assert-redirect-contains\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:948
#: ./docs/9.x/http-tests.md:1020
#: ./docs/10.x/http-tests.md:1084
#: ./docs/11.x/http-tests.md:1392
#: ./docs/master/http-tests.md:1311
msgctxt "H4"
msgid "assertRedirectContains"
msgstr ""

#: ./docs/8.x/http-tests.md:950
#: ./docs/9.x/http-tests.md:1022
#: ./docs/10.x/http-tests.md:1086
#: ./docs/11.x/http-tests.md:1394
#: ./docs/master/http-tests.md:1313
msgctxt "P"
msgid "Assert whether the response is redirecting to a URI that contains the given string:"
msgstr ""

#: ./docs/8.x/http-tests.md:952
#: ./docs/9.x/http-tests.md:1024
#: ./docs/10.x/http-tests.md:1088
#: ./docs/11.x/http-tests.md:1396
#: ./docs/master/http-tests.md:1315
msgctxt "CODE"
msgid "$response->assertRedirectContains($string);"
msgstr ""

#: ./docs/8.x/http-tests.md:954
#: ./docs/9.x/http-tests.md:1033
#: ./docs/10.x/http-tests.md:1097
#: ./docs/11.x/http-tests.md:1405
#: ./docs/master/http-tests.md:1324
#~ msgctxt "P"
#~ msgid "<a name=\"assert-redirect-to-signed-route\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:955
#: ./docs/9.x/http-tests.md:1034
#: ./docs/10.x/http-tests.md:1098
#: ./docs/11.x/http-tests.md:1406
#: ./docs/master/http-tests.md:1325
msgctxt "H4"
msgid "assertRedirectToSignedRoute"
msgstr ""

#: ./docs/8.x/http-tests.md:957
msgctxt "P"
msgid "Assert that the response is a redirect to the given signed route:"
msgstr ""

#: ./docs/8.x/http-tests.md:959
#: ./docs/9.x/http-tests.md:1038
#: ./docs/10.x/http-tests.md:1102
#: ./docs/11.x/http-tests.md:1410
#: ./docs/master/http-tests.md:1329
msgctxt "CODE"
msgid "$response->assertRedirectToSignedRoute($name = null, $parameters = []);"
msgstr ""

#: ./docs/8.x/http-tests.md:961
#: ./docs/9.x/http-tests.md:1040
#: ./docs/10.x/http-tests.md:1111
#: ./docs/11.x/http-tests.md:1419
#: ./docs/master/http-tests.md:1338
#~ msgctxt "P"
#~ msgid "<a name=\"assert-see\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:962
#: ./docs/9.x/http-tests.md:1041
#: ./docs/10.x/http-tests.md:1112
#: ./docs/11.x/http-tests.md:1420
#: ./docs/master/http-tests.md:1339
msgctxt "H4"
msgid "assertSee"
msgstr ""

#: ./docs/8.x/http-tests.md:964
#: ./docs/9.x/http-tests.md:1043
#: ./docs/10.x/http-tests.md:1114
#: ./docs/11.x/http-tests.md:1422
#: ./docs/master/http-tests.md:1341
msgctxt "P"
msgid "Assert that the given string is contained within the response. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

#: ./docs/8.x/http-tests.md:966
#: ./docs/9.x/http-tests.md:1045
#: ./docs/10.x/http-tests.md:1116
#: ./docs/11.x/http-tests.md:1424
#: ./docs/master/http-tests.md:1343
msgctxt "CODE"
msgid "$response->assertSee($value, $escaped = true);"
msgstr ""

#: ./docs/8.x/http-tests.md:968
#: ./docs/9.x/http-tests.md:1047
#: ./docs/10.x/http-tests.md:1118
#: ./docs/11.x/http-tests.md:1426
#: ./docs/master/http-tests.md:1345
#~ msgctxt "P"
#~ msgid "<a name=\"assert-see-in-order\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:969
#: ./docs/9.x/http-tests.md:1048
#: ./docs/10.x/http-tests.md:1119
#: ./docs/11.x/http-tests.md:1427
#: ./docs/master/http-tests.md:1346
msgctxt "H4"
msgid "assertSeeInOrder"
msgstr ""

#: ./docs/9.x/http-tests.md:970
#: ./docs/10.x/http-tests.md:1027
#: ./docs/11.x/http-tests.md:1335
#: ./docs/master/http-tests.md:1254
#~ msgctxt "P"
#~ msgid "<a name=\"assert-content\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:971
#: ./docs/9.x/http-tests.md:1050
#: ./docs/10.x/http-tests.md:1121
#: ./docs/11.x/http-tests.md:1429
#: ./docs/master/http-tests.md:1348
msgctxt "P"
msgid "Assert that the given strings are contained in order within the response. This assertion will automatically escape the given strings unless you pass a second argument of `false`:"
msgstr ""

#: ./docs/9.x/http-tests.md:971
#: ./docs/10.x/http-tests.md:1028
#: ./docs/11.x/http-tests.md:1336
#: ./docs/master/http-tests.md:1255
msgctxt "H4"
msgid "assertContent"
msgstr ""

#: ./docs/8.x/http-tests.md:973
#: ./docs/9.x/http-tests.md:1052
#: ./docs/10.x/http-tests.md:1123
#: ./docs/11.x/http-tests.md:1431
#: ./docs/master/http-tests.md:1350
msgctxt "CODE"
msgid "$response->assertSeeInOrder(array $values, $escaped = true);"
msgstr ""

#: ./docs/9.x/http-tests.md:973
#: ./docs/10.x/http-tests.md:1030
#: ./docs/11.x/http-tests.md:1338
#: ./docs/master/http-tests.md:1257
msgctxt "P"
msgid "Assert that the given string matches the response content:"
msgstr ""

#: ./docs/8.x/http-tests.md:975
#: ./docs/9.x/http-tests.md:1054
#: ./docs/10.x/http-tests.md:1125
#: ./docs/11.x/http-tests.md:1433
#: ./docs/master/http-tests.md:1352
#~ msgctxt "P"
#~ msgid "<a name=\"assert-see-text\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:975
#: ./docs/10.x/http-tests.md:1032
#: ./docs/11.x/http-tests.md:1340
#: ./docs/master/http-tests.md:1259
msgctxt "CODE"
msgid "$response->assertContent($value);"
msgstr ""

#: ./docs/8.x/http-tests.md:976
#: ./docs/9.x/http-tests.md:1055
#: ./docs/10.x/http-tests.md:1126
#: ./docs/11.x/http-tests.md:1434
#: ./docs/master/http-tests.md:1353
msgctxt "H4"
msgid "assertSeeText"
msgstr ""

#: ./docs/8.x/http-tests.md:978
#: ./docs/9.x/http-tests.md:1057
#: ./docs/10.x/http-tests.md:1128
#: ./docs/11.x/http-tests.md:1436
#: ./docs/master/http-tests.md:1355
msgctxt "P"
msgid "Assert that the given string is contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

#: ./docs/8.x/http-tests.md:980
#: ./docs/9.x/http-tests.md:1059
#: ./docs/10.x/http-tests.md:1130
#: ./docs/11.x/http-tests.md:1438
#: ./docs/master/http-tests.md:1357
msgctxt "CODE"
msgid "$response->assertSeeText($value, $escaped = true);"
msgstr ""

#: ./docs/8.x/http-tests.md:982
#: ./docs/9.x/http-tests.md:1061
#: ./docs/10.x/http-tests.md:1132
#: ./docs/11.x/http-tests.md:1440
#: ./docs/master/http-tests.md:1359
#~ msgctxt "P"
#~ msgid "<a name=\"assert-see-text-in-order\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:983
#: ./docs/9.x/http-tests.md:1062
#: ./docs/10.x/http-tests.md:1133
#: ./docs/11.x/http-tests.md:1441
#: ./docs/master/http-tests.md:1360
msgctxt "H4"
msgid "assertSeeTextInOrder"
msgstr ""

#: ./docs/9.x/http-tests.md:984
#: ./docs/10.x/http-tests.md:1041
#: ./docs/11.x/http-tests.md:1349
#: ./docs/master/http-tests.md:1268
#~ msgctxt "P"
#~ msgid "<a name=\"assert-streamed-content\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:985
#: ./docs/9.x/http-tests.md:1064
#: ./docs/10.x/http-tests.md:1135
#: ./docs/11.x/http-tests.md:1443
#: ./docs/master/http-tests.md:1362
msgctxt "P"
msgid "Assert that the given strings are contained in order within the response text. This assertion will automatically escape the given strings unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

#: ./docs/9.x/http-tests.md:985
#: ./docs/10.x/http-tests.md:1042
#: ./docs/11.x/http-tests.md:1350
#: ./docs/master/http-tests.md:1269
msgctxt "H4"
msgid "assertStreamedContent"
msgstr ""

#: ./docs/8.x/http-tests.md:987
#: ./docs/9.x/http-tests.md:1066
#: ./docs/10.x/http-tests.md:1137
#: ./docs/11.x/http-tests.md:1445
#: ./docs/master/http-tests.md:1364
msgctxt "CODE"
msgid "$response->assertSeeTextInOrder(array $values, $escaped = true);"
msgstr ""

#: ./docs/9.x/http-tests.md:987
#: ./docs/10.x/http-tests.md:1044
#: ./docs/11.x/http-tests.md:1352
#: ./docs/master/http-tests.md:1271
msgctxt "P"
msgid "Assert that the given string matches the streamed response content:"
msgstr ""

#: ./docs/8.x/http-tests.md:989
#: ./docs/9.x/http-tests.md:1068
#: ./docs/10.x/http-tests.md:1153
#: ./docs/11.x/http-tests.md:1461
#: ./docs/master/http-tests.md:1380
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-has\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:989
#: ./docs/10.x/http-tests.md:1046
#: ./docs/11.x/http-tests.md:1354
#: ./docs/master/http-tests.md:1273
msgctxt "CODE"
msgid "$response->assertStreamedContent($value);"
msgstr ""

#: ./docs/8.x/http-tests.md:990
#: ./docs/9.x/http-tests.md:1069
#: ./docs/10.x/http-tests.md:1154
#: ./docs/11.x/http-tests.md:1462
#: ./docs/master/http-tests.md:1381
msgctxt "H4"
msgid "assertSessionHas"
msgstr ""

#: ./docs/8.x/http-tests.md:992
#: ./docs/9.x/http-tests.md:1071
#: ./docs/10.x/http-tests.md:1156
#: ./docs/11.x/http-tests.md:1464
#: ./docs/master/http-tests.md:1383
msgctxt "P"
msgid "Assert that the session contains the given piece of data:"
msgstr ""

#: ./docs/8.x/http-tests.md:994
#: ./docs/9.x/http-tests.md:1073
#: ./docs/10.x/http-tests.md:1158
#: ./docs/11.x/http-tests.md:1466
#: ./docs/master/http-tests.md:1385
msgctxt "CODE"
msgid "$response->assertSessionHas($key, $value = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:996
#: ./docs/9.x/http-tests.md:1075
#: ./docs/10.x/http-tests.md:1160
#: ./docs/11.x/http-tests.md:1468
#: ./docs/master/http-tests.md:1387
msgctxt "P"
msgid "If needed, a closure can be provided as the second argument to the `assertSessionHas` method. The assertion will pass if the closure returns `true`:"
msgstr ""

#: ./docs/8.x/http-tests.md:998
#: ./docs/9.x/http-tests.md:1077
msgctxt "CODE"
msgid "$response->assertSessionHas($key, function ($value) {\n"
"    return $value->name === 'Taylor Otwell';\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:1002
#: ./docs/9.x/http-tests.md:1081
#: ./docs/10.x/http-tests.md:1166
#: ./docs/11.x/http-tests.md:1474
#: ./docs/master/http-tests.md:1393
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-has-input\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1003
#: ./docs/9.x/http-tests.md:1082
#: ./docs/10.x/http-tests.md:1167
#: ./docs/11.x/http-tests.md:1475
#: ./docs/master/http-tests.md:1394
msgctxt "H4"
msgid "assertSessionHasInput"
msgstr ""

#: ./docs/8.x/http-tests.md:1005
#: ./docs/9.x/http-tests.md:1084
#: ./docs/10.x/http-tests.md:1169
#: ./docs/11.x/http-tests.md:1477
#: ./docs/master/http-tests.md:1396
msgctxt "P"
msgid "Assert that the session has a given value in the [flashed input array](/docs/{{version}}/responses#redirecting-with-flashed-session-data):"
msgstr ""

#: ./docs/10.x/http-tests.md:1006
#: ./docs/11.x/http-tests.md:1314
#: ./docs/master/http-tests.md:1233
#~ msgctxt "P"
#~ msgid "<a name=\"assert-method-not-allowed\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1007
#: ./docs/11.x/http-tests.md:1315
#: ./docs/master/http-tests.md:1234
msgctxt "H4"
msgid "assertMethodNotAllowed"
msgstr ""

#: ./docs/8.x/http-tests.md:1007
#: ./docs/9.x/http-tests.md:1086
#: ./docs/10.x/http-tests.md:1171
#: ./docs/11.x/http-tests.md:1479
#: ./docs/master/http-tests.md:1398
msgctxt "CODE"
msgid "$response->assertSessionHasInput($key, $value = null);"
msgstr ""

#: ./docs/10.x/http-tests.md:1009
#: ./docs/11.x/http-tests.md:1317
#: ./docs/master/http-tests.md:1236
msgctxt "P"
msgid "Assert that the response has a method not allowed (405) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1009
#: ./docs/9.x/http-tests.md:1088
#: ./docs/10.x/http-tests.md:1173
#: ./docs/11.x/http-tests.md:1481
#: ./docs/master/http-tests.md:1400
msgctxt "P"
msgid "If needed, a closure can be provided as the second argument to the `assertSessionHasInput` method. The assertion will pass if the closure returns `true`:"
msgstr ""

#: ./docs/10.x/http-tests.md:1011
#: ./docs/11.x/http-tests.md:1319
#: ./docs/master/http-tests.md:1238
msgctxt "CODE"
msgid "$response->assertMethodNotAllowed();"
msgstr ""

#: ./docs/8.x/http-tests.md:1011
#: ./docs/9.x/http-tests.md:1090
msgctxt "CODE"
msgid "$response->assertSessionHasInput($key, function ($value) {\n"
"    return Crypt::decryptString($value) === 'secret';\n"
"});"
msgstr ""

#: ./docs/10.x/http-tests.md:1013
#: ./docs/11.x/http-tests.md:1321
#: ./docs/master/http-tests.md:1240
#~ msgctxt "P"
#~ msgid "<a name=\"assert-moved-permanently\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1014
#: ./docs/11.x/http-tests.md:1322
#: ./docs/master/http-tests.md:1241
msgctxt "H4"
msgid "assertMovedPermanently"
msgstr ""

#: ./docs/8.x/http-tests.md:1015
#: ./docs/9.x/http-tests.md:1094
#: ./docs/10.x/http-tests.md:1181
#: ./docs/11.x/http-tests.md:1489
#: ./docs/master/http-tests.md:1408
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-has-all\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1016
#: ./docs/11.x/http-tests.md:1324
#: ./docs/master/http-tests.md:1243
msgctxt "P"
msgid "Assert that the response has a moved permanently (301) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1016
#: ./docs/9.x/http-tests.md:1095
#: ./docs/10.x/http-tests.md:1182
#: ./docs/11.x/http-tests.md:1490
#: ./docs/master/http-tests.md:1409
msgctxt "H4"
msgid "assertSessionHasAll"
msgstr ""

#: ./docs/10.x/http-tests.md:1018
#: ./docs/11.x/http-tests.md:1326
#: ./docs/master/http-tests.md:1245
msgctxt "CODE"
msgid "$response->assertMovedPermanently();"
msgstr ""

#: ./docs/8.x/http-tests.md:1018
#: ./docs/9.x/http-tests.md:1097
#: ./docs/10.x/http-tests.md:1184
#: ./docs/11.x/http-tests.md:1492
#: ./docs/master/http-tests.md:1411
msgctxt "P"
msgid "Assert that the session contains a given array of key / value pairs:"
msgstr ""

#: ./docs/8.x/http-tests.md:1020
#: ./docs/9.x/http-tests.md:1099
#: ./docs/10.x/http-tests.md:1186
#: ./docs/11.x/http-tests.md:1494
#: ./docs/master/http-tests.md:1413
msgctxt "CODE"
msgid "$response->assertSessionHasAll(array $data);"
msgstr ""

#: ./docs/8.x/http-tests.md:1022
#: ./docs/9.x/http-tests.md:1101
#: ./docs/10.x/http-tests.md:1188
#: ./docs/11.x/http-tests.md:1496
#: ./docs/master/http-tests.md:1415
msgctxt "P"
msgid "For example, if your application's session contains `name` and `status` keys, you may assert that both exist and have the specified values like so:"
msgstr ""

#: ./docs/8.x/http-tests.md:1024
#: ./docs/9.x/http-tests.md:1103
#: ./docs/10.x/http-tests.md:1190
#: ./docs/11.x/http-tests.md:1498
#: ./docs/master/http-tests.md:1417
msgctxt "CODE"
msgid "$response->assertSessionHasAll([\n"
"    'name' => 'Taylor Otwell',\n"
"    'status' => 'active',\n"
"]);"
msgstr ""

#: ./docs/9.x/http-tests.md:1026
#: ./docs/10.x/http-tests.md:1090
#: ./docs/11.x/http-tests.md:1398
#: ./docs/master/http-tests.md:1317
#~ msgctxt "P"
#~ msgid "<a name=\"assert-redirect-to-route\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:1027
#: ./docs/10.x/http-tests.md:1091
#: ./docs/11.x/http-tests.md:1399
#: ./docs/master/http-tests.md:1318
msgctxt "H4"
msgid "assertRedirectToRoute"
msgstr ""

#: ./docs/8.x/http-tests.md:1029
#: ./docs/9.x/http-tests.md:1108
#: ./docs/10.x/http-tests.md:1195
#: ./docs/11.x/http-tests.md:1503
#: ./docs/master/http-tests.md:1422
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-has-errors\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:1029
#: ./docs/10.x/http-tests.md:1093
#: ./docs/11.x/http-tests.md:1401
#: ./docs/master/http-tests.md:1320
msgctxt "P"
msgid "Assert that the response is a redirect to the given [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#: ./docs/8.x/http-tests.md:1030
#: ./docs/9.x/http-tests.md:1109
#: ./docs/10.x/http-tests.md:1196
#: ./docs/11.x/http-tests.md:1504
#: ./docs/master/http-tests.md:1423
msgctxt "H4"
msgid "assertSessionHasErrors"
msgstr ""

#: ./docs/9.x/http-tests.md:1031
msgctxt "CODE"
msgid "$response->assertRedirectToRoute($name = null, $parameters = []);"
msgstr ""

#: ./docs/8.x/http-tests.md:1032
#: ./docs/9.x/http-tests.md:1111
#: ./docs/10.x/http-tests.md:1198
#: ./docs/11.x/http-tests.md:1506
#: ./docs/master/http-tests.md:1425
msgctxt "P"
msgid "Assert that the session contains an error for the given `$keys`. If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key). This method should be used when testing routes that flash validation errors to the session instead of returning them as a JSON structure:"
msgstr ""

#: ./docs/8.x/http-tests.md:1034
#: ./docs/9.x/http-tests.md:1113
msgctxt "CODE"
msgid "$response->assertSessionHasErrors(\n"
"    array $keys, $format = null, $errorBag = 'default'\n"
");"
msgstr ""

#: ./docs/9.x/http-tests.md:1036
#: ./docs/10.x/http-tests.md:1100
#: ./docs/11.x/http-tests.md:1408
#: ./docs/master/http-tests.md:1327
msgctxt "P"
msgid "Assert that the response is a redirect to the given [signed route](/docs/{{version}}/urls#signed-urls):"
msgstr ""

#: ./docs/8.x/http-tests.md:1038
#: ./docs/9.x/http-tests.md:1117
#: ./docs/10.x/http-tests.md:1204
#: ./docs/11.x/http-tests.md:1512
#: ./docs/master/http-tests.md:1431
msgctxt "P"
msgid "For example, to assert that the `name` and `email` fields have validation error messages that were flashed to the session, you may invoke the `assertSessionHasErrors` method like so:"
msgstr ""

#: ./docs/8.x/http-tests.md:1040
#: ./docs/9.x/http-tests.md:1119
#: ./docs/10.x/http-tests.md:1206
#: ./docs/11.x/http-tests.md:1514
#: ./docs/master/http-tests.md:1433
msgctxt "CODE"
msgid "$response->assertSessionHasErrors(['name', 'email']);"
msgstr ""

#: ./docs/8.x/http-tests.md:1042
#: ./docs/9.x/http-tests.md:1121
#: ./docs/10.x/http-tests.md:1208
#: ./docs/11.x/http-tests.md:1516
#: ./docs/master/http-tests.md:1435
msgctxt "P"
msgid "Or, you may assert that a given field has a particular validation error message:"
msgstr ""

#: ./docs/8.x/http-tests.md:1044
#: ./docs/9.x/http-tests.md:1123
#: ./docs/10.x/http-tests.md:1210
#: ./docs/11.x/http-tests.md:1518
#: ./docs/master/http-tests.md:1437
msgctxt "CODE"
msgid "$response->assertSessionHasErrors([\n"
"    'name' => 'The given name was invalid.'\n"
"]);"
msgstr ""

#: ./docs/8.x/http-tests.md:1048
#: ./docs/9.x/http-tests.md:1130
#: ./docs/10.x/http-tests.md:1217
#: ./docs/11.x/http-tests.md:1525
#: ./docs/master/http-tests.md:1444
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-has-errors-in\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1049
#: ./docs/9.x/http-tests.md:1131
#: ./docs/10.x/http-tests.md:1218
#: ./docs/11.x/http-tests.md:1526
#: ./docs/master/http-tests.md:1445
msgctxt "H4"
msgid "assertSessionHasErrorsIn"
msgstr ""

#: ./docs/8.x/http-tests.md:1051
#: ./docs/9.x/http-tests.md:1133
#: ./docs/10.x/http-tests.md:1220
#: ./docs/11.x/http-tests.md:1528
#: ./docs/master/http-tests.md:1447
msgctxt "P"
msgid "Assert that the session contains an error for the given `$keys` within a specific [error bag](/docs/{{version}}/validation#named-error-bags). If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key), within the error bag:"
msgstr ""

#: ./docs/8.x/http-tests.md:1053
#: ./docs/9.x/http-tests.md:1135
#: ./docs/10.x/http-tests.md:1222
#: ./docs/11.x/http-tests.md:1530
#: ./docs/master/http-tests.md:1449
msgctxt "CODE"
msgid "$response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:1055
#: ./docs/9.x/http-tests.md:1137
#: ./docs/10.x/http-tests.md:1224
#: ./docs/11.x/http-tests.md:1532
#: ./docs/master/http-tests.md:1451
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-has-no-errors\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1056
#: ./docs/9.x/http-tests.md:1138
#: ./docs/10.x/http-tests.md:1225
#: ./docs/11.x/http-tests.md:1533
#: ./docs/master/http-tests.md:1452
msgctxt "H4"
msgid "assertSessionHasNoErrors"
msgstr ""

#: ./docs/8.x/http-tests.md:1058
#: ./docs/9.x/http-tests.md:1140
#: ./docs/10.x/http-tests.md:1227
#: ./docs/11.x/http-tests.md:1535
#: ./docs/master/http-tests.md:1454
msgctxt "P"
msgid "Assert that the session has no validation errors:"
msgstr ""

#: ./docs/8.x/http-tests.md:1060
#: ./docs/9.x/http-tests.md:1142
#: ./docs/10.x/http-tests.md:1229
#: ./docs/11.x/http-tests.md:1537
#: ./docs/master/http-tests.md:1456
msgctxt "CODE"
msgid "$response->assertSessionHasNoErrors();"
msgstr ""

#: ./docs/10.x/http-tests.md:1062
#: ./docs/11.x/http-tests.md:1370
#: ./docs/master/http-tests.md:1289
#~ msgctxt "P"
#~ msgid "<a name=\"assert-payment-required\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1062
#: ./docs/9.x/http-tests.md:1144
#: ./docs/10.x/http-tests.md:1231
#: ./docs/11.x/http-tests.md:1539
#: ./docs/master/http-tests.md:1458
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-doesnt-have-errors\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1063
#: ./docs/11.x/http-tests.md:1371
#: ./docs/master/http-tests.md:1290
msgctxt "H4"
msgid "assertPaymentRequired"
msgstr ""

#: ./docs/8.x/http-tests.md:1063
#: ./docs/9.x/http-tests.md:1145
#: ./docs/10.x/http-tests.md:1232
#: ./docs/11.x/http-tests.md:1540
#: ./docs/master/http-tests.md:1459
msgctxt "H4"
msgid "assertSessionDoesntHaveErrors"
msgstr ""

#: ./docs/10.x/http-tests.md:1065
#: ./docs/11.x/http-tests.md:1373
#: ./docs/master/http-tests.md:1292
msgctxt "P"
msgid "Assert that the response has a payment required (402) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1065
#: ./docs/9.x/http-tests.md:1147
#: ./docs/10.x/http-tests.md:1234
#: ./docs/11.x/http-tests.md:1542
#: ./docs/master/http-tests.md:1461
msgctxt "P"
msgid "Assert that the session has no validation errors for the given keys:"
msgstr ""

#: ./docs/10.x/http-tests.md:1067
#: ./docs/11.x/http-tests.md:1375
#: ./docs/master/http-tests.md:1294
msgctxt "CODE"
msgid "$response->assertPaymentRequired();"
msgstr ""

#: ./docs/8.x/http-tests.md:1067
#: ./docs/9.x/http-tests.md:1149
#: ./docs/10.x/http-tests.md:1236
#: ./docs/11.x/http-tests.md:1544
#: ./docs/master/http-tests.md:1463
msgctxt "CODE"
msgid "$response->assertSessionDoesntHaveErrors($keys = [], $format = null, $errorBag = 'default');"
msgstr ""

#: ./docs/8.x/http-tests.md:1069
#: ./docs/9.x/http-tests.md:1154
#: ./docs/10.x/http-tests.md:1241
#: ./docs/11.x/http-tests.md:1549
#: ./docs/master/http-tests.md:1468
#~ msgctxt "P"
#~ msgid "<a name=\"assert-session-missing\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1070
#: ./docs/9.x/http-tests.md:1155
#: ./docs/10.x/http-tests.md:1242
#: ./docs/11.x/http-tests.md:1550
#: ./docs/master/http-tests.md:1469
msgctxt "H4"
msgid "assertSessionMissing"
msgstr ""

#: ./docs/8.x/http-tests.md:1072
#: ./docs/9.x/http-tests.md:1157
#: ./docs/10.x/http-tests.md:1244
#: ./docs/11.x/http-tests.md:1552
#: ./docs/master/http-tests.md:1471
msgctxt "P"
msgid "Assert that the session does not contain the given key:"
msgstr ""

#: ./docs/8.x/http-tests.md:1074
#: ./docs/9.x/http-tests.md:1159
#: ./docs/10.x/http-tests.md:1246
#: ./docs/11.x/http-tests.md:1554
#: ./docs/master/http-tests.md:1473
msgctxt "CODE"
msgid "$response->assertSessionMissing($key);"
msgstr ""

#: ./docs/8.x/http-tests.md:1076
#: ./docs/9.x/http-tests.md:1161
#: ./docs/10.x/http-tests.md:1248
#: ./docs/11.x/http-tests.md:1556
#: ./docs/master/http-tests.md:1475
#~ msgctxt "P"
#~ msgid "<a name=\"assert-status\"></a>"
#~ msgstr ""

#: ./docs/11.x/http-tests.md:1077
#~ msgctxt "P"
#~ msgid "<a name=\"assert-exact-json-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1077
#: ./docs/9.x/http-tests.md:1162
#: ./docs/10.x/http-tests.md:1249
#: ./docs/11.x/http-tests.md:1557
#: ./docs/master/http-tests.md:1476
msgctxt "H4"
msgid "assertStatus"
msgstr ""

#: ./docs/11.x/http-tests.md:1078
msgctxt "H4"
msgid "assertExactJsonStructure"
msgstr ""

#: ./docs/8.x/http-tests.md:1079
#: ./docs/9.x/http-tests.md:1164
#: ./docs/10.x/http-tests.md:1251
#: ./docs/11.x/http-tests.md:1559
#: ./docs/master/http-tests.md:1478
msgctxt "P"
msgid "Assert that the response has a given HTTP status code:"
msgstr ""

#: ./docs/11.x/http-tests.md:1080
msgctxt "P"
msgid "Assert that the response contains an exact match of the given JSON structure:"
msgstr ""

#: ./docs/10.x/http-tests.md:1081
#: ./docs/11.x/http-tests.md:1389
#: ./docs/master/http-tests.md:1308
msgctxt "CODE"
msgid "$response->assertRedirect($uri = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:1081
#: ./docs/9.x/http-tests.md:1166
#: ./docs/10.x/http-tests.md:1253
#: ./docs/11.x/http-tests.md:1561
#: ./docs/master/http-tests.md:1480
msgctxt "CODE"
msgid "$response->assertStatus($code);"
msgstr ""

#: ./docs/11.x/http-tests.md:1082
msgctxt "CODE"
msgid "$response->assertExactJsonStructure(array $data);"
msgstr ""

#: ./docs/8.x/http-tests.md:1083
#: ./docs/9.x/http-tests.md:1168
#: ./docs/10.x/http-tests.md:1255
#: ./docs/11.x/http-tests.md:1563
#: ./docs/master/http-tests.md:1482
#~ msgctxt "P"
#~ msgid "<a name=\"assert-successful\"></a>"
#~ msgstr ""

#: ./docs/11.x/http-tests.md:1084
msgctxt "P"
msgid "This method is a more strict variant of [assertJsonStructure](#assert-json-structure). In contrast with `assertJsonStructure`, this method will fail if the response contains any keys that aren't explicitly included in the expected JSON structure."
msgstr ""

#: ./docs/8.x/http-tests.md:1084
#: ./docs/9.x/http-tests.md:1169
#: ./docs/10.x/http-tests.md:1256
#: ./docs/11.x/http-tests.md:1564
#: ./docs/master/http-tests.md:1483
msgctxt "H4"
msgid "assertSuccessful"
msgstr ""

#: ./docs/8.x/http-tests.md:1086
#: ./docs/9.x/http-tests.md:1171
#: ./docs/10.x/http-tests.md:1258
#: ./docs/11.x/http-tests.md:1566
#: ./docs/master/http-tests.md:1485
msgctxt "P"
msgid "Assert that the response has a successful (>= 200 and < 300) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1088
#: ./docs/9.x/http-tests.md:1173
#: ./docs/10.x/http-tests.md:1260
#: ./docs/11.x/http-tests.md:1568
#: ./docs/master/http-tests.md:1487
msgctxt "CODE"
msgid "$response->assertSuccessful();"
msgstr ""

#: ./docs/8.x/http-tests.md:1090
#: ./docs/9.x/http-tests.md:1175
#: ./docs/10.x/http-tests.md:1269
#: ./docs/11.x/http-tests.md:1577
#: ./docs/master/http-tests.md:1496
#~ msgctxt "P"
#~ msgid "<a name=\"assert-unauthorized\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1091
#: ./docs/9.x/http-tests.md:1176
#: ./docs/10.x/http-tests.md:1270
#: ./docs/11.x/http-tests.md:1578
#: ./docs/master/http-tests.md:1497
msgctxt "H4"
msgid "assertUnauthorized"
msgstr ""

#: ./docs/8.x/http-tests.md:1093
#: ./docs/9.x/http-tests.md:1178
#: ./docs/10.x/http-tests.md:1272
#: ./docs/11.x/http-tests.md:1580
#: ./docs/master/http-tests.md:1499
msgctxt "P"
msgid "Assert that the response has an unauthorized (401) HTTP status code:"
msgstr ""

#: ./docs/10.x/http-tests.md:1095
#: ./docs/11.x/http-tests.md:1403
#: ./docs/master/http-tests.md:1322
msgctxt "CODE"
msgid "$response->assertRedirectToRoute($name, $parameters = []);"
msgstr ""

#: ./docs/8.x/http-tests.md:1095
#: ./docs/9.x/http-tests.md:1180
#: ./docs/10.x/http-tests.md:1274
#: ./docs/11.x/http-tests.md:1582
#: ./docs/master/http-tests.md:1501
msgctxt "CODE"
msgid "$response->assertUnauthorized();"
msgstr ""

#: ./docs/8.x/http-tests.md:1097
#: ./docs/9.x/http-tests.md:1182
#: ./docs/10.x/http-tests.md:1276
#: ./docs/11.x/http-tests.md:1584
#: ./docs/master/http-tests.md:1503
#~ msgctxt "P"
#~ msgid "<a name=\"assert-unprocessable\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1098
#: ./docs/9.x/http-tests.md:1183
#: ./docs/10.x/http-tests.md:1277
#: ./docs/11.x/http-tests.md:1585
#: ./docs/master/http-tests.md:1504
msgctxt "H4"
msgid "assertUnprocessable"
msgstr ""

#: ./docs/8.x/http-tests.md:1100
#: ./docs/9.x/http-tests.md:1185
#: ./docs/10.x/http-tests.md:1279
#: ./docs/11.x/http-tests.md:1587
#: ./docs/master/http-tests.md:1506
msgctxt "P"
msgid "Assert that the response has an unprocessable entity (422) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1102
#: ./docs/9.x/http-tests.md:1187
#: ./docs/10.x/http-tests.md:1281
#: ./docs/11.x/http-tests.md:1589
#: ./docs/master/http-tests.md:1508
msgctxt "CODE"
msgid "$response->assertUnprocessable();"
msgstr ""

#: ./docs/10.x/http-tests.md:1104
#: ./docs/11.x/http-tests.md:1412
#: ./docs/master/http-tests.md:1331
#~ msgctxt "P"
#~ msgid "<a name=\"assert-request-timeout\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1104
#: ./docs/9.x/http-tests.md:1189
#: ./docs/10.x/http-tests.md:1290
#: ./docs/11.x/http-tests.md:1598
#: ./docs/master/http-tests.md:1517
#~ msgctxt "P"
#~ msgid "<a name=\"assert-valid\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1105
#: ./docs/11.x/http-tests.md:1413
#: ./docs/master/http-tests.md:1332
msgctxt "H4"
msgid "assertRequestTimeout"
msgstr ""

#: ./docs/8.x/http-tests.md:1105
#: ./docs/9.x/http-tests.md:1190
#: ./docs/9.x/http-tests.md:1298
#: ./docs/10.x/http-tests.md:1291
#: ./docs/10.x/http-tests.md:1399
#: ./docs/11.x/http-tests.md:1599
#: ./docs/11.x/http-tests.md:1713
#: ./docs/master/http-tests.md:1518
#: ./docs/master/http-tests.md:1632
msgctxt "H4"
msgid "assertValid"
msgstr ""

#: ./docs/10.x/http-tests.md:1107
#: ./docs/11.x/http-tests.md:1415
#: ./docs/master/http-tests.md:1334
msgctxt "P"
msgid "Assert that the response has a request timeout (408) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1107
#: ./docs/9.x/http-tests.md:1192
#: ./docs/9.x/http-tests.md:1300
#: ./docs/10.x/http-tests.md:1293
#: ./docs/10.x/http-tests.md:1401
#: ./docs/11.x/http-tests.md:1601
#: ./docs/11.x/http-tests.md:1715
#: ./docs/master/http-tests.md:1520
#: ./docs/master/http-tests.md:1634
msgctxt "P"
msgid "Assert that the response has no validation errors for the given keys. This method may be used for asserting against responses where the validation errors are returned as a JSON structure or where the validation errors have been flashed to the session:"
msgstr ""

#: ./docs/10.x/http-tests.md:1109
#: ./docs/11.x/http-tests.md:1417
#: ./docs/master/http-tests.md:1336
msgctxt "CODE"
msgid "$response->assertRequestTimeout();"
msgstr ""

#: ./docs/8.x/http-tests.md:1109
#: ./docs/9.x/http-tests.md:1194
#: ./docs/9.x/http-tests.md:1302
#: ./docs/10.x/http-tests.md:1295
#: ./docs/10.x/http-tests.md:1403
#: ./docs/11.x/http-tests.md:1603
#: ./docs/11.x/http-tests.md:1717
#: ./docs/master/http-tests.md:1522
#: ./docs/master/http-tests.md:1636
msgctxt "CODE"
msgid "// Assert that no validation errors are present...\n"
"$response->assertValid();\n\n"
"// Assert that the given keys do not have validation errors...\n"
"$response->assertValid(['name', 'email']);"
msgstr ""

#: ./docs/8.x/http-tests.md:1115
#: ./docs/9.x/http-tests.md:1200
#: ./docs/10.x/http-tests.md:1301
#: ./docs/11.x/http-tests.md:1609
#: ./docs/master/http-tests.md:1528
#~ msgctxt "P"
#~ msgid "<a name=\"assert-invalid\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1116
#: ./docs/9.x/http-tests.md:1201
#: ./docs/9.x/http-tests.md:1309
#: ./docs/10.x/http-tests.md:1302
#: ./docs/10.x/http-tests.md:1410
#: ./docs/11.x/http-tests.md:1610
#: ./docs/11.x/http-tests.md:1724
#: ./docs/master/http-tests.md:1529
#: ./docs/master/http-tests.md:1643
msgctxt "H4"
msgid "assertInvalid"
msgstr ""

#: ./docs/8.x/http-tests.md:1118
#: ./docs/9.x/http-tests.md:1203
#: ./docs/9.x/http-tests.md:1311
#: ./docs/10.x/http-tests.md:1304
#: ./docs/10.x/http-tests.md:1412
#: ./docs/11.x/http-tests.md:1612
#: ./docs/11.x/http-tests.md:1726
#: ./docs/master/http-tests.md:1531
#: ./docs/master/http-tests.md:1645
msgctxt "P"
msgid "Assert that the response has validation errors for the given keys. This method may be used for asserting against responses where the validation errors are returned as a JSON structure or where the validation errors have been flashed to the session:"
msgstr ""

#: ./docs/8.x/http-tests.md:1120
#: ./docs/9.x/http-tests.md:1205
#: ./docs/9.x/http-tests.md:1313
#: ./docs/10.x/http-tests.md:1306
#: ./docs/10.x/http-tests.md:1414
#: ./docs/11.x/http-tests.md:1614
#: ./docs/11.x/http-tests.md:1728
#: ./docs/master/http-tests.md:1533
#: ./docs/master/http-tests.md:1647
msgctxt "CODE"
msgid "$response->assertInvalid(['name', 'email']);"
msgstr ""

#: ./docs/8.x/http-tests.md:1122
#: ./docs/9.x/http-tests.md:1207
#: ./docs/9.x/http-tests.md:1315
#: ./docs/10.x/http-tests.md:1308
#: ./docs/10.x/http-tests.md:1416
#: ./docs/11.x/http-tests.md:1616
#: ./docs/11.x/http-tests.md:1730
#: ./docs/master/http-tests.md:1535
#: ./docs/master/http-tests.md:1649
msgctxt "P"
msgid "You may also assert that a given key has a particular validation error message. When doing so, you may provide the entire message or only a small portion of the message:"
msgstr ""

#: ./docs/8.x/http-tests.md:1124
#: ./docs/9.x/http-tests.md:1209
#: ./docs/9.x/http-tests.md:1317
#: ./docs/10.x/http-tests.md:1310
#: ./docs/10.x/http-tests.md:1418
#: ./docs/11.x/http-tests.md:1618
#: ./docs/11.x/http-tests.md:1732
#: ./docs/master/http-tests.md:1537
#: ./docs/master/http-tests.md:1651
msgctxt "CODE"
msgid "$response->assertInvalid([\n"
"    'name' => 'The name field is required.',\n"
"    'email' => 'valid email address',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-tests.md:1129
#: ./docs/9.x/http-tests.md:1214
#: ./docs/10.x/http-tests.md:1315
#: ./docs/11.x/http-tests.md:1623
#: ./docs/master/http-tests.md:1542
#~ msgctxt "P"
#~ msgid "<a name=\"assert-view-has\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1130
#: ./docs/9.x/http-tests.md:1215
#: ./docs/10.x/http-tests.md:1316
#: ./docs/11.x/http-tests.md:1624
#: ./docs/master/http-tests.md:1543
msgctxt "H4"
msgid "assertViewHas"
msgstr ""

#: ./docs/8.x/http-tests.md:1132
#: ./docs/9.x/http-tests.md:1217
msgctxt "P"
msgid "Assert that the response view contains given a piece of data:"
msgstr ""

#: ./docs/8.x/http-tests.md:1134
#: ./docs/9.x/http-tests.md:1219
#: ./docs/10.x/http-tests.md:1320
#: ./docs/11.x/http-tests.md:1628
#: ./docs/master/http-tests.md:1547
msgctxt "CODE"
msgid "$response->assertViewHas($key, $value = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:1136
#: ./docs/9.x/http-tests.md:1221
#: ./docs/10.x/http-tests.md:1322
#: ./docs/11.x/http-tests.md:1630
#: ./docs/master/http-tests.md:1549
msgctxt "P"
msgid "Passing a closure as the second argument to the `assertViewHas` method will allow you to inspect and make assertions against a particular piece of view data:"
msgstr ""

#: ./docs/8.x/http-tests.md:1138
#: ./docs/9.x/http-tests.md:1223
#: ./docs/10.x/http-tests.md:1324
#: ./docs/11.x/http-tests.md:1632
#: ./docs/master/http-tests.md:1551
msgctxt "CODE"
msgid "$response->assertViewHas('user', function (User $user) {\n"
"    return $user->name === 'Taylor';\n"
"});"
msgstr ""

#: ./docs/10.x/http-tests.md:1139
#: ./docs/11.x/http-tests.md:1447
#: ./docs/master/http-tests.md:1366
#~ msgctxt "P"
#~ msgid "<a name=\"assert-server-error\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1140
#: ./docs/11.x/http-tests.md:1448
#: ./docs/master/http-tests.md:1367
msgctxt "H4"
msgid "assertServerError"
msgstr ""

#: ./docs/10.x/http-tests.md:1142
#: ./docs/11.x/http-tests.md:1450
#: ./docs/master/http-tests.md:1369
msgctxt "P"
msgid "Assert that the response has a server error (>= 500 , < 600) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1142
#: ./docs/9.x/http-tests.md:1227
#: ./docs/10.x/http-tests.md:1328
#: ./docs/11.x/http-tests.md:1636
#: ./docs/master/http-tests.md:1555
msgctxt "P"
msgid "In addition, view data may be accessed as array variables on the response, allowing you to conveniently inspect it:"
msgstr ""

#: ./docs/10.x/http-tests.md:1144
#: ./docs/11.x/http-tests.md:1452
#: ./docs/master/http-tests.md:1371
msgctxt "CODE"
msgid "$response->assertServerError();"
msgstr ""

#: ./docs/8.x/http-tests.md:1144
#: ./docs/9.x/http-tests.md:1229
#: ./docs/10.x/http-tests.md:1330
#: ./docs/11.x/http-tests.md:1642
#: ./docs/master/http-tests.md:1561
msgctxt "CODE"
msgid "$this->assertEquals('Taylor', $response['name']);"
msgstr ""

#: ./docs/10.x/http-tests.md:1146
#: ./docs/11.x/http-tests.md:1454
#: ./docs/master/http-tests.md:1373
#~ msgctxt "P"
#~ msgid "<a name=\"assert-server-unavailable\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1146
#: ./docs/9.x/http-tests.md:1231
#: ./docs/10.x/http-tests.md:1332
#: ./docs/11.x/http-tests.md:1646
#: ./docs/master/http-tests.md:1565
#~ msgctxt "P"
#~ msgid "<a name=\"assert-view-has-all\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1147
#: ./docs/11.x/http-tests.md:1455
#: ./docs/master/http-tests.md:1374
msgctxt "H4"
msgid "assertServiceUnavailable"
msgstr ""

#: ./docs/8.x/http-tests.md:1147
#: ./docs/9.x/http-tests.md:1232
#: ./docs/10.x/http-tests.md:1333
#: ./docs/11.x/http-tests.md:1647
#: ./docs/master/http-tests.md:1566
msgctxt "H4"
msgid "assertViewHasAll"
msgstr ""

#: ./docs/10.x/http-tests.md:1149
#: ./docs/11.x/http-tests.md:1457
#: ./docs/master/http-tests.md:1376
msgctxt "P"
msgid "Assert that the response has a \"Service Unavailable\" (503) HTTP status code:"
msgstr ""

#: ./docs/8.x/http-tests.md:1149
#: ./docs/9.x/http-tests.md:1234
#: ./docs/10.x/http-tests.md:1335
#: ./docs/11.x/http-tests.md:1649
#: ./docs/master/http-tests.md:1568
msgctxt "P"
msgid "Assert that the response view has a given list of data:"
msgstr ""

#: ./docs/10.x/http-tests.md:1151
#: ./docs/11.x/http-tests.md:1459
#: ./docs/master/http-tests.md:1378
msgctxt "CODE"
msgid "$response->assertServiceUnavailable();"
msgstr ""

#: ./docs/8.x/http-tests.md:1151
#: ./docs/9.x/http-tests.md:1236
#: ./docs/10.x/http-tests.md:1337
#: ./docs/11.x/http-tests.md:1651
#: ./docs/master/http-tests.md:1570
msgctxt "CODE"
msgid "$response->assertViewHasAll(array $data);"
msgstr ""

#: ./docs/8.x/http-tests.md:1153
#: ./docs/9.x/http-tests.md:1238
#: ./docs/10.x/http-tests.md:1339
#: ./docs/11.x/http-tests.md:1653
#: ./docs/master/http-tests.md:1572
msgctxt "P"
msgid "This method may be used to assert that the view simply contains data matching the given keys:"
msgstr ""

#: ./docs/8.x/http-tests.md:1155
#: ./docs/9.x/http-tests.md:1240
#: ./docs/10.x/http-tests.md:1341
#: ./docs/11.x/http-tests.md:1655
#: ./docs/master/http-tests.md:1574
msgctxt "CODE"
msgid "$response->assertViewHasAll([\n"
"    'name',\n"
"    'email',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-tests.md:1160
#: ./docs/9.x/http-tests.md:1245
#: ./docs/10.x/http-tests.md:1346
#: ./docs/11.x/http-tests.md:1660
#: ./docs/master/http-tests.md:1579
msgctxt "P"
msgid "Or, you may assert that the view data is present and has specific values:"
msgstr ""

#: ./docs/10.x/http-tests.md:1162
#: ./docs/11.x/http-tests.md:1470
#: ./docs/master/http-tests.md:1389
msgctxt "CODE"
msgid "$response->assertSessionHas($key, function (User $value) {\n"
"    return $value->name === 'Taylor Otwell';\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:1162
#: ./docs/9.x/http-tests.md:1247
#: ./docs/10.x/http-tests.md:1348
#: ./docs/11.x/http-tests.md:1662
#: ./docs/master/http-tests.md:1581
msgctxt "CODE"
msgid "$response->assertViewHasAll([\n"
"    'name' => 'Taylor Otwell',\n"
"    'email' => 'taylor@example.com,',\n"
"]);"
msgstr ""

#: ./docs/8.x/http-tests.md:1167
#: ./docs/9.x/http-tests.md:1252
#: ./docs/10.x/http-tests.md:1353
#: ./docs/11.x/http-tests.md:1667
#: ./docs/master/http-tests.md:1586
#~ msgctxt "P"
#~ msgid "<a name=\"assert-view-is\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1168
#: ./docs/9.x/http-tests.md:1253
#: ./docs/10.x/http-tests.md:1354
#: ./docs/11.x/http-tests.md:1668
#: ./docs/master/http-tests.md:1587
msgctxt "H4"
msgid "assertViewIs"
msgstr ""

#: ./docs/8.x/http-tests.md:1170
#: ./docs/9.x/http-tests.md:1255
#: ./docs/10.x/http-tests.md:1356
#: ./docs/11.x/http-tests.md:1670
#: ./docs/master/http-tests.md:1589
msgctxt "P"
msgid "Assert that the given view was returned by the route:"
msgstr ""

#: ./docs/8.x/http-tests.md:1172
#: ./docs/9.x/http-tests.md:1257
#: ./docs/10.x/http-tests.md:1358
#: ./docs/11.x/http-tests.md:1672
#: ./docs/master/http-tests.md:1591
msgctxt "CODE"
msgid "$response->assertViewIs($value);"
msgstr ""

#: ./docs/8.x/http-tests.md:1174
#: ./docs/9.x/http-tests.md:1259
#: ./docs/10.x/http-tests.md:1360
#: ./docs/11.x/http-tests.md:1674
#: ./docs/master/http-tests.md:1593
#~ msgctxt "P"
#~ msgid "<a name=\"assert-view-missing\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1175
#: ./docs/11.x/http-tests.md:1483
#: ./docs/master/http-tests.md:1402
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Crypt;\n\n"
"$response->assertSessionHasInput($key, function (string $value) {\n"
"    return Crypt::decryptString($value) === 'secret';\n"
"});"
msgstr ""

#: ./docs/8.x/http-tests.md:1175
#: ./docs/9.x/http-tests.md:1260
#: ./docs/10.x/http-tests.md:1361
#: ./docs/11.x/http-tests.md:1675
#: ./docs/master/http-tests.md:1594
msgctxt "H4"
msgid "assertViewMissing"
msgstr ""

#: ./docs/8.x/http-tests.md:1177
#: ./docs/9.x/http-tests.md:1262
#: ./docs/10.x/http-tests.md:1363
#: ./docs/11.x/http-tests.md:1677
#: ./docs/master/http-tests.md:1596
msgctxt "P"
msgid "Assert that the given data key was not made available to the view returned in the application's response:"
msgstr ""

#: ./docs/8.x/http-tests.md:1179
#: ./docs/9.x/http-tests.md:1264
#: ./docs/10.x/http-tests.md:1365
#: ./docs/11.x/http-tests.md:1679
#: ./docs/master/http-tests.md:1598
msgctxt "CODE"
msgid "$response->assertViewMissing($key);"
msgstr ""

#: ./docs/8.x/http-tests.md:1181
#: ./docs/9.x/http-tests.md:1266
#: ./docs/10.x/http-tests.md:1367
#: ./docs/11.x/http-tests.md:1681
#: ./docs/master/http-tests.md:1600
#~ msgctxt "P"
#~ msgid "<a name=\"authentication-assertions\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1182
#: ./docs/9.x/http-tests.md:1267
#: ./docs/10.x/http-tests.md:1368
#: ./docs/11.x/http-tests.md:1682
#: ./docs/master/http-tests.md:1601
msgctxt "H3"
msgid "Authentication Assertions"
msgstr ""

#: ./docs/8.x/http-tests.md:1184
#: ./docs/9.x/http-tests.md:1269
#: ./docs/10.x/http-tests.md:1370
#: ./docs/11.x/http-tests.md:1684
#: ./docs/master/http-tests.md:1603
msgctxt "P"
msgid "Laravel also provides a variety of authentication related assertions that you may utilize within your application's feature tests. Note that these methods are invoked on the test class itself and not the `Illuminate\\Testing\\TestResponse` instance returned by methods such as `get` and `post`."
msgstr ""

#: ./docs/8.x/http-tests.md:1186
#: ./docs/9.x/http-tests.md:1271
#: ./docs/10.x/http-tests.md:1372
#: ./docs/11.x/http-tests.md:1686
#: ./docs/master/http-tests.md:1605
#~ msgctxt "P"
#~ msgid "<a name=\"assert-authenticated\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1187
#: ./docs/9.x/http-tests.md:1272
#: ./docs/10.x/http-tests.md:1373
#: ./docs/11.x/http-tests.md:1687
#: ./docs/master/http-tests.md:1606
msgctxt "H4"
msgid "assertAuthenticated"
msgstr ""

#: ./docs/8.x/http-tests.md:1189
#: ./docs/9.x/http-tests.md:1274
#: ./docs/10.x/http-tests.md:1375
#: ./docs/11.x/http-tests.md:1689
#: ./docs/master/http-tests.md:1608
msgctxt "P"
msgid "Assert that a user is authenticated:"
msgstr ""

#: ./docs/8.x/http-tests.md:1191
#: ./docs/9.x/http-tests.md:1276
#: ./docs/10.x/http-tests.md:1377
#: ./docs/11.x/http-tests.md:1691
#: ./docs/master/http-tests.md:1610
msgctxt "CODE"
msgid "$this->assertAuthenticated($guard = null);"
msgstr ""

#: ./docs/8.x/http-tests.md:1193
#: ./docs/9.x/http-tests.md:1278
#: ./docs/10.x/http-tests.md:1379
#: ./docs/11.x/http-tests.md:1693
#: ./docs/master/http-tests.md:1612
#~ msgctxt "P"
#~ msgid "<a name=\"assert-guest\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1194
#: ./docs/9.x/http-tests.md:1279
#: ./docs/10.x/http-tests.md:1380
#: ./docs/11.x/http-tests.md:1694
#: ./docs/master/http-tests.md:1613
msgctxt "H4"
msgid "assertGuest"
msgstr ""

#: ./docs/8.x/http-tests.md:1196
#: ./docs/9.x/http-tests.md:1281
#: ./docs/10.x/http-tests.md:1382
#: ./docs/11.x/http-tests.md:1696
#: ./docs/master/http-tests.md:1615
msgctxt "P"
msgid "Assert that a user is not authenticated:"
msgstr ""

#: ./docs/8.x/http-tests.md:1198
#: ./docs/9.x/http-tests.md:1283
#: ./docs/10.x/http-tests.md:1384
#: ./docs/11.x/http-tests.md:1698
#: ./docs/master/http-tests.md:1617
msgctxt "CODE"
msgid "$this->assertGuest($guard = null);"
msgstr ""

#: ./docs/10.x/http-tests.md:1200
#: ./docs/11.x/http-tests.md:1508
#: ./docs/master/http-tests.md:1427
msgctxt "CODE"
msgid "$response->assertSessionHasErrors(\n"
"    array $keys = [], $format = null, $errorBag = 'default'\n"
");"
msgstr ""

#: ./docs/8.x/http-tests.md:1200
#: ./docs/9.x/http-tests.md:1285
#: ./docs/10.x/http-tests.md:1386
#: ./docs/11.x/http-tests.md:1700
#: ./docs/master/http-tests.md:1619
#~ msgctxt "P"
#~ msgid "<a name=\"assert-authenticated-as\"></a>"
#~ msgstr ""

#: ./docs/8.x/http-tests.md:1201
#: ./docs/9.x/http-tests.md:1286
#: ./docs/10.x/http-tests.md:1387
#: ./docs/11.x/http-tests.md:1701
#: ./docs/master/http-tests.md:1620
msgctxt "H4"
msgid "assertAuthenticatedAs"
msgstr ""

#: ./docs/8.x/http-tests.md:1203
#: ./docs/9.x/http-tests.md:1288
#: ./docs/10.x/http-tests.md:1389
#: ./docs/11.x/http-tests.md:1703
#: ./docs/master/http-tests.md:1622
msgctxt "P"
msgid "Assert that a specific user is authenticated:"
msgstr ""

#: ./docs/8.x/http-tests.md:1205
#: ./docs/9.x/http-tests.md:1290
#: ./docs/10.x/http-tests.md:1391
#: ./docs/11.x/http-tests.md:1705
#: ./docs/master/http-tests.md:1624
msgctxt "CODE"
msgid "$this->assertAuthenticatedAs($user, $guard = null);"
msgstr ""

#: ./docs/10.x/http-tests.md:1262
#: ./docs/11.x/http-tests.md:1570
#: ./docs/master/http-tests.md:1489
#~ msgctxt "P"
#~ msgid "<a name=\"assert-too-many-requests\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1263
#: ./docs/11.x/http-tests.md:1571
#: ./docs/master/http-tests.md:1490
msgctxt "H4"
msgid "assertTooManyRequests"
msgstr ""

#: ./docs/10.x/http-tests.md:1265
#: ./docs/11.x/http-tests.md:1573
#: ./docs/master/http-tests.md:1492
msgctxt "P"
msgid "Assert that the response has a too many requests (429) HTTP status code:"
msgstr ""

#: ./docs/10.x/http-tests.md:1267
#: ./docs/11.x/http-tests.md:1575
#: ./docs/master/http-tests.md:1494
msgctxt "CODE"
msgid "$response->assertTooManyRequests();"
msgstr ""

#: ./docs/10.x/http-tests.md:1283
#: ./docs/11.x/http-tests.md:1591
#: ./docs/master/http-tests.md:1510
#~ msgctxt "P"
#~ msgid "<a name=\"assert-unsupported-media-type\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1284
#: ./docs/11.x/http-tests.md:1592
#: ./docs/master/http-tests.md:1511
msgctxt "H4"
msgid "assertUnsupportedMediaType"
msgstr ""

#: ./docs/10.x/http-tests.md:1286
#: ./docs/11.x/http-tests.md:1594
#: ./docs/master/http-tests.md:1513
msgctxt "P"
msgid "Assert that the response has an unsupported media type (415) HTTP status code:"
msgstr ""

#: ./docs/10.x/http-tests.md:1288
#: ./docs/11.x/http-tests.md:1596
#: ./docs/master/http-tests.md:1515
msgctxt "CODE"
msgid "$response->assertUnsupportedMediaType();"
msgstr ""

#: ./docs/9.x/http-tests.md:1292
#: ./docs/10.x/http-tests.md:1393
#: ./docs/11.x/http-tests.md:1707
#: ./docs/master/http-tests.md:1626
#~ msgctxt "P"
#~ msgid "<a name=\"validation-assertions\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:1293
#: ./docs/10.x/http-tests.md:1394
#: ./docs/11.x/http-tests.md:1708
#: ./docs/master/http-tests.md:1627
msgctxt "H2"
msgid "Validation Assertions"
msgstr ""

#: ./docs/9.x/http-tests.md:1295
#: ./docs/10.x/http-tests.md:1396
#: ./docs/11.x/http-tests.md:1710
#: ./docs/master/http-tests.md:1629
msgctxt "P"
msgid "Laravel provides two primary validation related assertions that you may use to ensure the data provided in your request was either valid or invalid."
msgstr ""

#: ./docs/9.x/http-tests.md:1297
#: ./docs/10.x/http-tests.md:1398
#: ./docs/11.x/http-tests.md:1712
#: ./docs/master/http-tests.md:1631
#~ msgctxt "P"
#~ msgid "<a name=\"validation-assert-valid\"></a>"
#~ msgstr ""

#: ./docs/9.x/http-tests.md:1308
#: ./docs/10.x/http-tests.md:1409
#: ./docs/11.x/http-tests.md:1723
#: ./docs/master/http-tests.md:1642
#~ msgctxt "P"
#~ msgid "<a name=\"validation-assert-invalid\"></a>"
#~ msgstr ""

#: ./docs/10.x/http-tests.md:1318
#: ./docs/11.x/http-tests.md:1626
#: ./docs/master/http-tests.md:1545
msgctxt "P"
msgid "Assert that the response view contains a given piece of data:"
msgstr ""

#: ./docs/11.x/http-tests.md:1638
#: ./docs/master/http-tests.md:1557
msgctxt "CODE: php tab=Pest"
msgid "expect($response['name'])->toBe('Taylor');"
msgstr ""

