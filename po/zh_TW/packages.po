msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/packages.pot\n"
"X-Crowdin-File-ID: 113\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-04-18 09:23\n"

#: docs/8.x/packages.md:block 1 (header)
msgid "Package Development"
msgstr "套件開發"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[A Note On Facades](#a-note-on-facades)"
msgstr "[有關 Facade 的注意事項](#a-note-on-facades)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Package Discovery](#package-discovery)"
msgstr "[Package Discovery](#package-discovery)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Service Providers](#service-providers)"
msgstr "[Service Provider](#service-providers)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Resources](#resources)"
msgstr "[資源](#resources)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr "[組態設定](#configuration)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Migrations](#migrations)"
msgstr "[Migration](#migrations)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Routes](#routes)"
msgstr "[Route](#routes)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Translations](#translations)"
msgstr "[翻譯](#translations)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Views](#views)"
msgstr "[View](#views)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[View Components](#view-components)"
msgstr "[View 元件](#view-components)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Commands](#commands)"
msgstr "[指令](#commands)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Public Assets](#public-assets)"
msgstr "[公用素材](#public-assets)"

#: docs/8.x/packages.md:block 2 (unordered list)
msgid "[Publishing File Groups](#publishing-file-groups)"
msgstr "[安裝檔案群組](#publishing-file-groups)"

#: docs/8.x/packages.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/packages.md:block 5 (paragraph)
msgid "Packages are the primary way of adding functionality to Laravel. Packages might be anything from a great way to work with dates like [Carbon](https://github.com/briannesbitt/Carbon) or a package that allows you to associate files with Eloquent models like Spatie's [Laravel Media Library](https://github.com/spatie/laravel-medialibrary)."
msgstr "套件是用來給 Laravel 新增功能的主要方法。套件可以是任何東西，有像 [Carbon](https://github.com/briannesbitt/Carbon) 這樣可以方便處理日期的套件、或者是像 Spatie 的 [Laravel Media Library](https://github.com/spatie/laravel-medialibrary) 這樣用來處理與 Eloquent Model 關聯檔案的套件。"

#: docs/8.x/packages.md:block 6 (paragraph)
msgid "There are different types of packages. Some packages are stand-alone, meaning they work with any PHP framework. Carbon and PHPUnit are examples of stand-alone packages. Any of these packages may be used with Laravel by requiring them in your `composer.json` file."
msgstr "套件也有一些不同的類型。有的套件是^[獨立](Stand-alone)套件，這些套件在任何的 PHP 框架上都可使用。舉例來說，Carbon 與 PHPUnit 就是獨立套件。只要在 `composer.json` 檔案中加上這些套件，就可以在 Laravel 中使用。"

#: docs/8.x/packages.md:block 7 (paragraph)
msgid "On the other hand, other packages are specifically intended for use with Laravel. These packages may have routes, controllers, views, and configuration specifically intended to enhance a Laravel application. This guide primarily covers the development of those packages that are Laravel specific."
msgstr "另一方面，有的套件是特別為了供 Laravel 使用而設計的。這些套件可能會有 Route、Controller、View、組態設定檔等等用來增強 Laravel 程式的功能。本篇指南主要就是在討論有關開發這些專為 Laravel 設計的套件。"

#: docs/8.x/packages.md:block 9 (header)
msgid "A Note On Facades"
msgstr "有關 Facade 的注意事項"

#: docs/8.x/packages.md:block 10 (paragraph)
msgid "When writing a Laravel application, it generally does not matter if you use contracts or facades since both provide essentially equal levels of testability. However, when writing packages, your package will not typically have access to all of Laravel's testing helpers. If you would like to be able to write your package tests as if the package were installed inside a typical Laravel application, you may use the [Orchestral Testbench](https://github.com/orchestral/testbench) package."
msgstr "在撰寫 Laravel 專案時，要使用 Contract 還是 Facade，一般來說沒什麼差別，因為兩者的可測試性都是相同的。不過，在開發套件的時候，我們要開發的套件可能無法存取所有的 Laravel 測試輔助函式。若想在測試套件是能像在一般的 Laravel 專案一樣測試，可使用 [Orchestral Testbench](https://github.com/orchestral/testbench) 套件。"

#: docs/8.x/packages.md:block 12 (header)
msgid "Package Discovery"
msgstr "Package Discovery"

#: docs/8.x/packages.md:block 13 (paragraph)
msgid "In a Laravel application's `config/app.php` configuration file, the `providers` option defines a list of service providers that should be loaded by Laravel. When someone installs your package, you will typically want your service provider to be included in this list. Instead of requiring users to manually add your service provider to the list, you may define the provider in the `extra` section of your package's `composer.json` file. In addition to service providers, you may also list any [facades](/docs/{{version}}/facades) you would like to be registered:"
msgstr "在 Laravel 專案的 `config/app.php` 設定中，`providers` 選項列出了 Laravel 要載入的 Service Provider。當有人安裝了我們的套件後，通常來說就需要將我們的 Service Provider 列在其中。不過，其實不需要讓使用者手動將 Service Provider 寫在列表中，我們可以在套件的 `composer.json` 檔中的 `extra` 欄位內定義 Provider。除了 Servce Provider 內，也可以列出要註冊的 [Facade](/docs/{{version}}/facades)："

#: docs/8.x/packages.md:block 14 (code)
msgid "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"providers\": [\n"
"            \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n"
"        ],\n"
"        \"aliases\": {\n"
"            \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n"
"        }\n"
"    }\n"
"},\n"
msgstr "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"providers\": [\n"
"            \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n"
"        ],\n"
"        \"aliases\": {\n"
"            \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n"
"        }\n"
"    }\n"
"},\n"

#: docs/8.x/packages.md:block 15 (paragraph)
msgid "Once your package has been configured for discovery, Laravel will automatically register its service providers and facades when it is installed, creating a convenient installation experience for your package's users."
msgstr "設定好 Discovery 後，Larave 就會在套件安裝時自動註冊套件的 Service Provider 與 Facade，帶給套件使用者一個方便的體驗。"

#: docs/8.x/packages.md:block 17 (header)
msgid "Opting Out Of Package Discovery"
msgstr "不使用 Package Discovery"

#: docs/8.x/packages.md:block 18 (paragraph)
msgid "If you are the consumer of a package and would like to disable package discovery for a package, you may list the package name in the `extra` section of your application's `composer.json` file:"
msgstr "若有使用到某個套件且想為該套件禁用 Package Discovery 的話，可以將該套件名稱列在專案 `composer.json` 檔中的 `extra` 段落內："

#: docs/8.x/packages.md:block 19 (code)
msgid "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"barryvdh/laravel-debugbar\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"barryvdh/laravel-debugbar\"\n"
"        ]\n"
"    }\n"
"},\n"

#: docs/8.x/packages.md:block 20 (paragraph)
msgid "You may disable package discovery for all packages using the `*` character inside of your application's `dont-discover` directive:"
msgstr "可以在 `dont-discover` 指示詞內使用 `*` 字元來禁用所有套件的 Package Discovery："

#: docs/8.x/packages.md:block 21 (code)
msgid "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"*\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr "\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"*\"\n"
"        ]\n"
"    }\n"
"},\n"

#: docs/8.x/packages.md:block 23 (header)
msgid "Service Providers"
msgstr "Service Provider"

#: docs/8.x/packages.md:block 24 (paragraph)
msgid "[Service providers](/docs/{{version}}/providers) are the connection point between your package and Laravel. A service provider is responsible for binding things into Laravel's [service container](/docs/{{version}}/container) and informing Laravel where to load package resources such as views, configuration, and localization files."
msgstr "[Service Provider](/docs/{{version}}/providers) 是套件與 Laravel 間的連結點。Service Provider 負責將各種東西繫結到 Laravel 的 [Service Container](/docs/{{version}}/container) 上，並告訴 Laravel 要在哪裡載入套件的資源，如 View、設定檔、語系檔等。"

#: docs/8.x/packages.md:block 25 (paragraph)
msgid "A service provider extends the `Illuminate\\Support\\ServiceProvider` class and contains two methods: `register` and `boot`. The base `ServiceProvider` class is located in the `illuminate/support` Composer package, which you should add to your own package's dependencies. To learn more about the structure and purpose of service providers, check out [their documentation](/docs/{{version}}/providers)."
msgstr "Service Provider 應繼承 `Illuminate\\Support\\ServiceProvider` 類別，並包含兩個方法：`register` 與 `boot`。`ServiceProvider` 基礎類別放在 `illuminate/support` Composer 套件中，請在你的套件中將其加為相依性套件。若要瞭解更多有關 Service Provider 的架構與功能，請參見 [Service Provider 的說明文件](/docs/{{version}}/providers)。"

#: docs/8.x/packages.md:block 27 (header)
msgid "Resources"
msgstr "資源"

#: docs/8.x/packages.md:block 29 (header)
msgid "Configuration"
msgstr "組態設定"

#: docs/8.x/packages.md:block 30 (paragraph)
msgid "Typically, you will need to publish your package's configuration file to the application's `config` directory. This will allow users of your package to easily override your default configuration options. To allow your configuration files to be published, call the `publishes` method from the `boot` method of your service provider:"
msgstr "一般來說，在製作套件的時候我們會想將套件的組態設定檔安裝到專案的 `config` 目錄內。這樣一來套件使用者就能輕鬆地覆寫預設設定。若要讓組態設定檔能安裝到專案內，請在 Service Provider 的 `boot` 方法內呼叫 `publishes` 方法："

#: docs/8.x/packages.md:block 31 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../config/courier.php' => config_path('courier.php'),\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../config/courier.php' => config_path('courier.php'),\n"
"    ]);\n"
"}\n"

#: docs/8.x/packages.md:block 32 (paragraph)
msgid "Now, when users of your package execute Laravel's `vendor:publish` command, your file will be copied to the specified publish location. Once your configuration has been published, its values may be accessed like any other configuration file:"
msgstr "然後，當套件使用者執行 Laravel 的 `vendor:publish` 指令時，這些檔案就會被複製到指定的^[安裝](Publish)地點。安裝好設定檔後，就可以像其他設定檔樣存取這些設定值："

#: docs/8.x/packages.md:block 33 (code)
msgid "$value = config('courier.option');\n"
msgstr "$value = config('courier.option');\n"

#: docs/8.x/packages.md:block 34 (quote)
msgid "{note} You should not define closures in your configuration files. They can not be serialized correctly when users execute the `config:cache` Artisan command."
msgstr "{note} 請不要在設定檔中定義閉包。因為當使用者執行 `config:cache` Artisan 指令時，這些閉包沒有辦法被序列化。"

#: docs/8.x/packages.md:block 36 (header)
msgid "Default Package Configuration"
msgstr "預設套件設定"

#: docs/8.x/packages.md:block 37 (paragraph)
msgid "You may also merge your own package configuration file with the application's published copy. This will allow your users to define only the options they actually want to override in the published copy of the configuration file. To merge the configuration file values, use the `mergeConfigFrom` method within your service provider's `register` method."
msgstr "可以將套件自己的設定檔跟安裝到專案裡的設定檔合併。這樣一來，就能讓使用者在設定檔中只定義要覆寫的值。若要合併設定檔，請在 Service Provider 的 `register` 方法中使用 `mergeConfigFrom` 方法。"

#: docs/8.x/packages.md:block 38 (paragraph)
msgid "The `mergeConfigFrom` method accepts the path to your package's configuration file as its first argument and the name of the application's copy of the configuration file as its second argument:"
msgstr "`mergeConfigFrom` 方法接受套件設定檔的路徑作為其第一個引數，而專案中的設定檔名稱則為其第二個引數："

#: docs/8.x/packages.md:block 39 (code)
msgid "/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->mergeConfigFrom(\n"
"        __DIR__.'/../config/courier.php', 'courier'\n"
"    );\n"
"}\n"
msgstr "/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->mergeConfigFrom(\n"
"        __DIR__.'/../config/courier.php', 'courier'\n"
"    );\n"
"}\n"

#: docs/8.x/packages.md:block 40 (quote)
msgid "{note} This method only merges the first level of the configuration array. If your users partially define a multi-dimensional configuration array, the missing options will not be merged."
msgstr "{note} 該方法只會合併設定陣列中的第一層。若套件使用者只定義了多為陣列中的一部分，則未定義的部分將不會被合併。"

#: docs/8.x/packages.md:block 42 (header)
msgid "Routes"
msgstr "Route"

#: docs/8.x/packages.md:block 43 (paragraph)
msgid "If your package contains routes, you may load them using the `loadRoutesFrom` method. This method will automatically determine if the application's routes are cached and will not load your routes file if the routes have already been cached:"
msgstr "若套件中包含 Route，可使用 `loadRoutesFrom` 方法。該方法會自動判斷專案的 Route 是否有被快取，當有快取時將不會載入這些 Route 檔："

#: docs/8.x/packages.md:block 44 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n"
"}\n"

#: docs/8.x/packages.md:block 46 (header)
msgid "Migrations"
msgstr "Migration"

#: docs/8.x/packages.md:block 47 (paragraph)
msgid "If your package contains [database migrations](/docs/{{version}}/migrations), you may use the `loadMigrationsFrom` method to inform Laravel how to load them. The `loadMigrationsFrom` method accepts the path to your package's migrations as its only argument:"
msgstr "若套件中有 [資料庫 Migration](/docs/{{version}}/migrations)，可使用 `loadMigrationsFrom` 方法來讓 Laravel 載入這些 Migration。`loadMigrationsFrom` 方法接受套件 Migartion 的路徑作為其唯一的引數："

#: docs/8.x/packages.md:block 48 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadMigrationsFrom(__DIR__.'/../database/migrations');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadMigrationsFrom(__DIR__.'/../database/migrations');\n"
"}\n"

#: docs/8.x/packages.md:block 49 (paragraph)
msgid "Once your package's migrations have been registered, they will automatically be run when the `php artisan migrate` command is executed. You do not need to export them to the application's `database/migrations` directory."
msgstr "Migration 註冊好後，執行 `php artisan migrate` 指令時，就會自動執行這些 Migration。不需要將這些檔案匯出到 `database/migrations` 目錄中。"

#: docs/8.x/packages.md:block 51 (header)
msgid "Translations"
msgstr "翻譯"

#: docs/8.x/packages.md:block 52 (paragraph)
msgid "If your package contains [translation files](/docs/{{version}}/localization), you may use the `loadTranslationsFrom` method to inform Laravel how to load them. For example, if your package is named `courier`, you should add the following to your service provider's `boot` method:"
msgstr "若套件有包含[語系檔](/docs/{{version}}/localization)，可使用 `loadTranslationsFrom` 方法來讓 Laravel 載入這些檔案。舉例來說，若套件名稱為 `courier`，則可在 Service Provider 的 `boot` 方法中這樣寫："

#: docs/8.x/packages.md:block 53 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
"}\n"

#: docs/8.x/packages.md:block 54 (paragraph)
msgid "Package translations are referenced using the `package::file.line` syntax convention. So, you may load the `courier` package's `welcome` line from the `messages` file like so:"
msgstr "套件的語系檔使用 `package::file.line` (`套件::檔名.行`) 語法慣例來參照。所以，`courier` 套件的 `messages` 檔案中，`welcome` 行可以這樣載入："

#: docs/8.x/packages.md:block 55 (code)
msgid "echo trans('courier::messages.welcome');\n"
msgstr "echo trans('courier::messages.welcome');\n"

#: docs/8.x/packages.md:block 57 (header)
msgid "Publishing Translations"
msgstr "安裝翻譯"

#: docs/8.x/packages.md:block 58 (paragraph)
msgid "If you would like to publish your package's translations to the application's `resources/lang/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the `courier` package, you may do the following:"
msgstr "若想將套件的語系檔安裝到專案的 `resources/lang/vendor` 目錄下，可使用 Service Provider 的 `publishes` 方法。`publishes` 方法接受一組套件路徑與欲安裝位置的陣列。舉例來說，若要為 `courier` 套件安裝語系檔，可以這樣寫："

#: docs/8.x/packages.md:block 59 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../resources/lang' => resource_path('lang/vendor/courier'),\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../resources/lang' => resource_path('lang/vendor/courier'),\n"
"    ]);\n"
"}\n"

#: docs/8.x/packages.md:block 60 (paragraph)
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's translations will be published to the specified publish location."
msgstr "接著，當套件使用者執行 Laravel 的 `vendor:publish` Artisan 指令後，套件的翻譯語系檔就會被安裝到指定的安裝位置內。"

#: docs/8.x/packages.md:block 62 (header)
msgid "Views"
msgstr "View"

#: docs/8.x/packages.md:block 63 (paragraph)
msgid "To register your package's [views](/docs/{{version}}/views) with Laravel, you need to tell Laravel where the views are located. You may do this using the service provider's `loadViewsFrom` method. The `loadViewsFrom` method accepts two arguments: the path to your view templates and your package's name. For example, if your package's name is `courier`, you would add the following to your service provider's `boot` method:"
msgstr "若要向 Laravel 註冊套件的 [View]，我們需要告訴 Laravel 這些 View 存在哪裡。可以使用 Service Provider 的 `loadViewsFrom` 方法。`loadViewsFrom` 方法接受兩個引數：View 樣板的路徑，以及套件的名稱。舉例來說，若套件名稱為 `courier`，則可在 Service Provider 的 `boot` 方法中加入下列程式："

#: docs/8.x/packages.md:block 64 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
"}\n"

#: docs/8.x/packages.md:block 65 (paragraph)
msgid "Package views are referenced using the `package::view` syntax convention. So, once your view path is registered in a service provider, you may load the `dashboard` view from the `courier` package like so:"
msgstr "套件的 View 使用 `package::view` (`套件::View`) 語法慣例來參照。所以，在 Service Provider 內註冊好 View 的路徑後，就可以在 `courier` 套件中像這樣載入 `dashboard` View："

#: docs/8.x/packages.md:block 66 (code)
msgid "Route::get('/dashboard', function () {\n"
"    return view('courier::dashboard');\n"
"});\n"
msgstr "Route::get('/dashboard', function () {\n"
"    return view('courier::dashboard');\n"
"});\n"

#: docs/8.x/packages.md:block 68 (header)
msgid "Overriding Package Views"
msgstr "覆寫套件的 View"

#: docs/8.x/packages.md:block 69 (paragraph)
msgid "When you use the `loadViewsFrom` method, Laravel actually registers two locations for your views: the application's `resources/views/vendor` directory and the directory you specify. So, using the `courier` package as an example, Laravel will first check if a custom version of the view has been placed in the `resources/views/vendor/courier` directory by the developer. Then, if the view has not been customized, Laravel will search the package view directory you specified in your call to `loadViewsFrom`. This makes it easy for package users to customize / override your package's views."
msgstr "使用 `loadViewsFrom` 方法時，Laravel 實際上在兩個地方上都註冊為這個套件的 View 存放位置：專案的 `resources/views/vendor` 目錄，以及你所指定的目錄。所以，若以 `courier` 套件為例，Laravel 會先檢查 `resources/views/vendor/courier` 目錄下是否有開發人員覆寫的自訂版本。若沒找到自訂版本，Laravel 接著才會在呼叫 `loadViewsFrom` 時提供的路徑下搜尋套件的 View。這樣一來，套件使用者就能輕鬆地客製化 / 覆寫套件的 View。"

#: docs/8.x/packages.md:block 71 (header)
msgid "Publishing Views"
msgstr "安裝 View"

#: docs/8.x/packages.md:block 72 (paragraph)
msgid "If you would like to make your views available for publishing to the application's `resources/views/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package view paths and their desired publish locations:"
msgstr "若想讓 View 可被安裝到專案的 `resources/views/vendor` 目錄下，可使用 Service Provider 的 `publishes` 方法。`publishes` 方法接受一組套件 View 路徑與欲安裝路徑的陣列："

#: docs/8.x/packages.md:block 73 (code)
msgid "/**\n"
" * Bootstrap the package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../resources/views' => resource_path('views/vendor/courier'),\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Bootstrap the package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../resources/views' => resource_path('views/vendor/courier'),\n"
"    ]);\n"
"}\n"

#: docs/8.x/packages.md:block 74 (paragraph)
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's views will be copied to the specified publish location."
msgstr "接著，當套件使用者執行 Laravel 的 `vendor:publish` Artisan 指令後，套件的 View 就會被複製到指定的安裝位置內。"

#: docs/8.x/packages.md:block 76 (header)
msgid "View Components"
msgstr "View 元件"

#: docs/8.x/packages.md:block 77 (paragraph)
msgid "If your package contains [view components](/docs/{{version}}/blade#components), you may use the `loadViewComponentsAs` method to inform Laravel how to load them. The `loadViewComponentsAs` method accepts two arguments: the tag prefix for your view components and an array of your view component class names. For example, if your package's prefix is `courier` and you have `Alert` and `Button` view components, you would add the following to your service provider's `boot` method:"
msgstr "若套件中有包含 [View 元件](/docs/{{version}}/blade#components)，可以使用 `loadViewComponentsAs` 方法來讓 Laravel 載入這些元件。`loadViewComponentsAs` 方法接受兩個引數：用於 View 元件標籤的前置詞，以及一組 View 元件類別名稱的陣列。舉例來說，若套件的前置詞為 `courier`，且套件中有 `Alert` 與 `Button` 兩個 View 元件，就可以在 Service Provider 的 `boot` 方法中加上下列程式："

#: docs/8.x/packages.md:block 78 (code)
msgid "use Courier\\Components\\Alert;\n"
"use Courier\\Components\\Button;\n\n"
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewComponentsAs('courier', [\n"
"        Alert::class,\n"
"        Button::class,\n"
"    ]);\n"
"}\n"
msgstr "use Courier\\Components\\Alert;\n"
"use Courier\\Components\\Button;\n\n"
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadViewComponentsAs('courier', [\n"
"        Alert::class,\n"
"        Button::class,\n"
"    ]);\n"
"}\n"

#: docs/8.x/packages.md:block 79 (paragraph)
msgid "Once your view components are registered in a service provider, you may reference them in your view like so:"
msgstr "在 Service Provider 中註冊好 View 元件後，就可以像這樣在 View 中參照這些元件："

#: docs/8.x/packages.md:block 80 (code)
msgid "<x-courier-alert />\n\n"
"<x-courier-button />\n"
msgstr "<x-courier-alert />\n\n"
"<x-courier-button />\n"

#: docs/8.x/packages.md:block 82 (header)
msgid "Anonymous Components"
msgstr "匿名元件"

#: docs/8.x/packages.md:block 83 (paragraph)
msgid "If your package contains anonymous components, they must be placed within a `components` directory of your package's \"views\" directory (as specified by `loadViewsFrom`). Then, you may render them by prefixing the component name with the package's view namespace:"
msgstr "若套件中有匿名元件，則這些套件必須放在套件「view」目錄 (即 `loadViewsFrom` 指定的目錄) 下的 `components` 目錄內。接著，就可以使用套件 View 命名空間作為前置詞來轉譯套件："

#: docs/8.x/packages.md:block 84 (code)
msgid "<x-courier::alert />\n"
msgstr "<x-courier::alert />\n"

#: docs/8.x/packages.md:block 86 (header)
msgid "Commands"
msgstr "指令"

#: docs/8.x/packages.md:block 87 (paragraph)
msgid "To register your package's Artisan commands with Laravel, you may use the `commands` method. This method expects an array of command class names. Once the commands have been registered, you may execute them using the [Artisan CLI](/docs/{{version}}/artisan):"
msgstr "若要向 Laravel 註冊 Artisan 指令，可使用 `commands` 方法。這個方法接受一組指令類別名稱的陣列。註冊好指令後，就可以使用 [Artisan CLI](/docs/{{version}}/artisan) 來執行這些指令："

#: docs/8.x/packages.md:block 88 (code)
msgid "use Courier\\Console\\Commands\\InstallCommand;\n"
"use Courier\\Console\\Commands\\NetworkCommand;\n\n"
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->runningInConsole()) {\n"
"        $this->commands([\n"
"            InstallCommand::class,\n"
"            NetworkCommand::class,\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "use Courier\\Console\\Commands\\InstallCommand;\n"
"use Courier\\Console\\Commands\\NetworkCommand;\n\n"
"/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->runningInConsole()) {\n"
"        $this->commands([\n"
"            InstallCommand::class,\n"
"            NetworkCommand::class,\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/8.x/packages.md:block 90 (header)
msgid "Public Assets"
msgstr "公用素材"

#: docs/8.x/packages.md:block 91 (paragraph)
msgid "Your package may have assets such as JavaScript, CSS, and images. To publish these assets to the application's `public` directory, use the service provider's `publishes` method. In this example, we will also add a `public` asset group tag, which may be used to easily publish groups of related assets:"
msgstr "套件也可以有像 JavaScript、CSS、圖片等的素材。若要將這些素材安裝到 `public` 目錄內，可使用 Service Provider 的 `publishes` 方法。在這個範例中，我們也給這些素材嫁了一個 `public` 素材群組標籤，這樣我們就能使用該標籤來輕鬆將一組相關的素材安裝到專案內："

#: docs/8.x/packages.md:block 92 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../public' => public_path('vendor/courier'),\n"
"    ], 'public');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../public' => public_path('vendor/courier'),\n"
"    ], 'public');\n"
"}\n"

#: docs/8.x/packages.md:block 93 (paragraph)
msgid "Now, when your package's users execute the `vendor:publish` command, your assets will be copied to the specified publish location. Since users will typically need to overwrite the assets every time the package is updated, you may use the `--force` flag:"
msgstr "接著，當專案使用者執行 `vendor:publish` 指令後，素材就會被複製到指定的位置。由於使用者通常會需要在每次套件更新後都覆寫這些素材，因此可以使用 `--force` 旗標："

#: docs/8.x/packages.md:block 94 (code)
msgid "php artisan vendor:publish --tag=public --force\n"
msgstr "php artisan vendor:publish --tag=public --force\n"

#: docs/8.x/packages.md:block 96 (header)
msgid "Publishing File Groups"
msgstr "安裝檔案群組"

#: docs/8.x/packages.md:block 97 (paragraph)
msgid "You may want to publish groups of package assets and resources separately. For instance, you might want to allow your users to publish your package's configuration files without being forced to publish your package's assets. You may do this by \"tagging\" them when calling the `publishes` method from a package's service provider. For example, let's use tags to define two publish groups for the `courier` package (`courier-config` and `courier-migrations`) in the `boot` method of the package's service provider:"
msgstr "有時候我們可能會想分別安裝套件素材與資源。舉例來說，我們可以讓使用者安裝套件的設定檔，但不強制使用者安裝套件素材。我們可以通過在 Service Provider 內呼叫 `publishes` 方法時為這些檔案指定「標籤」。舉例來說，我們來在 Service Provider 內 `boot` 方法中為 `courier` 套件定義兩個安裝群組 (`courier-config` 與 `courier-migrations`)："

#: docs/8.x/packages.md:block 98 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../config/package.php' => config_path('package.php')\n"
"    ], 'courier-config');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../database/migrations/' => database_path('migrations')\n"
"    ], 'courier-migrations');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->publishes([\n"
"        __DIR__.'/../config/package.php' => config_path('package.php')\n"
"    ], 'courier-config');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../database/migrations/' => database_path('migrations')\n"
"    ], 'courier-migrations');\n"
"}\n"

#: docs/8.x/packages.md:block 99 (paragraph)
msgid "Now your users may publish these groups separately by referencing their tag when executing the `vendor:publish` command:"
msgstr "接著，使用者在執行 `vendor:publish` 指令時就可以使用標籤來分別安裝這些群組："

#: docs/8.x/packages.md:block 100 (code)
msgid "php artisan vendor:publish --tag=courier-config\n"
msgstr "php artisan vendor:publish --tag=courier-config\n"

#: docs/9.x/packages.md:block 53 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n"
"}\n"

#: docs/9.x/packages.md:block 58 (paragraph)
msgid "If you would like to publish your package's translations to the application's `lang/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the `courier` package, you may do the following:"
msgstr "若想將套件的語系檔安裝到專案的 `lang/vendor` 目錄下，可使用 Service Provider 的 `publishes` 方法。`publishes` 方法接受一組套件路徑與欲安裝位置的陣列。舉例來說，若要為 `courier` 套件安裝語系檔，可以這樣寫："

#: docs/9.x/packages.md:block 59 (code)
msgid "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../lang' => $this->app->langPath('vendor/courier'),\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any package services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n\n"
"    $this->publishes([\n"
"        __DIR__.'/../lang' => $this->app->langPath('vendor/courier'),\n"
"    ]);\n"
"}\n"

#: docs/9.x/packages.md:block 77 (paragraph)
msgid "If you are building a package that utilizes Blade components or placing components in non-conventional directories, you will need to manually register your component class and its HTML tag alias so that Laravel knows where to find the component. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

#: docs/9.x/packages.md:block 78 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use VendorPackage\\View\\Components\\AlertComponent;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', AlertComponent::class);\n"
"}\n"
msgstr ""

#: docs/9.x/packages.md:block 79 (paragraph)
msgid "Once your component has been registered, it may be rendered using its tag alias:"
msgstr ""

#: docs/9.x/packages.md:block 80 (code)
msgid "<x-package-alert/>\n"
msgstr ""

#: docs/9.x/packages.md:block 82 (header)
msgid "Autoloading Package Components"
msgstr ""

#: docs/9.x/packages.md:block 83 (paragraph)
msgid "Alternatively, you may use the `componentNamespace` method to autoload component classes by convention. For example, a `Nightshade` package might have `Calendar` and `ColorPicker` components that reside within the `Nightshade\\Views\\Components` namespace:"
msgstr ""

#: docs/9.x/packages.md:block 84 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"}\n"
msgstr ""

#: docs/9.x/packages.md:block 85 (paragraph)
msgid "This will allow the usage of package components by their vendor namespace using the `package-name::` syntax:"
msgstr ""

#: docs/9.x/packages.md:block 86 (code)
msgid "<x-nightshade::calendar />\n"
"<x-nightshade::color-picker />\n"
msgstr ""

#: docs/9.x/packages.md:block 87 (paragraph)
msgid "Blade will automatically detect the class that's linked to this component by pascal-casing the component name. Subdirectories are also supported using \"dot\" notation."
msgstr ""

#: docs/9.x/packages.md:block 90 (paragraph)
msgid "If your package contains anonymous components, they must be placed within a `components` directory of your package's \"views\" directory (as specified by the [`loadViewsFrom` method](#views)). Then, you may render them by prefixing the component name with the package's view namespace:"
msgstr ""

