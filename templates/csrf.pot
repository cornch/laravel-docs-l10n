#
msgid ""
msgstr ""

#: docs/8.x/csrf.md:block 1 (header)
msgid "CSRF Protection"
msgstr ""

#: docs/8.x/csrf.md:block 2 (unordered list)
msgid "[Introduction](#csrf-introduction)"
msgstr ""

#: docs/8.x/csrf.md:block 2 (unordered list)
msgid "[Preventing CSRF Requests](#preventing-csrf-requests)"
msgstr ""

#: docs/8.x/csrf.md:block 2 (unordered list)
msgid "[Excluding URIs](#csrf-excluding-uris)"
msgstr ""

#: docs/8.x/csrf.md:block 2 (unordered list)
msgid "[X-CSRF-Token](#csrf-x-csrf-token)"
msgstr ""

#: docs/8.x/csrf.md:block 2 (unordered list)
msgid "[X-XSRF-Token](#csrf-x-xsrf-token)"
msgstr ""

#: docs/8.x/csrf.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/csrf.md:block 5 (paragraph)
msgid "Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user. Thankfully, Laravel makes it easy to protect your application from [cross-site request forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) attacks."
msgstr ""

#: docs/8.x/csrf.md:block 7 (header)
msgid "An Explanation Of The Vulnerability"
msgstr ""

#: docs/8.x/csrf.md:block 8 (paragraph)
msgid "In case you're not familiar with cross-site request forgeries, let's discuss an example of how this vulnerability can be exploited. Imagine your application has a `/user/email` route that accepts a `POST` request to change the authenticated user's email address. Most likely, this route expects an `email` input field to contain the email address the user would like to begin using."
msgstr ""

#: docs/8.x/csrf.md:block 9 (paragraph)
msgid "Without CSRF protection, a malicious website could create an HTML form that points to your application's `/user/email` route and submits the malicious user's own email address:"
msgstr ""

#: docs/8.x/csrf.md:block 10 (code)
msgid ""
"<form action=\"https://your-application.com/user/email\" method=\"POST\">\n"
"    <input type=\"email\" value=\"malicious-email@example.com\">\n"
"</form>\n"
"\n"
"<script>\n"
"    document.forms[0].submit();\n"
"</script>\n"
msgstr ""

#: docs/8.x/csrf.md:block 11 (paragraph)
msgid "If the malicious website automatically submits the form when the page is loaded, the malicious user only needs to lure an unsuspecting user of your application to visit their website and their email address will be changed in your application."
msgstr ""

#: docs/8.x/csrf.md:block 12 (paragraph)
msgid "To prevent this vulnerability, we need to inspect every incoming `POST`, `PUT`, `PATCH`, or `DELETE` request for a secret session value that the malicious application is unable to access."
msgstr ""

#: docs/8.x/csrf.md:block 14 (header)
msgid "Preventing CSRF Requests"
msgstr ""

#: docs/8.x/csrf.md:block 15 (paragraph)
msgid "Laravel automatically generates a CSRF \"token\" for each active [user session](/docs/{{version}}/session) managed by the application. This token is used to verify that the authenticated user is the person actually making the requests to the application. Since this token is stored in the user's session and changes each time the session is regenerated, a malicious application is unable to access it."
msgstr ""

#: docs/8.x/csrf.md:block 16 (paragraph)
msgid "The current session's CSRF token can be accessed via the request's session or via the `csrf_token` helper function:"
msgstr ""

#: docs/8.x/csrf.md:block 17 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/token', function (Request $request) {\n"
"    $token = $request->session()->token();\n"
"\n"
"    $token = csrf_token();\n"
"\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/8.x/csrf.md:block 18 (paragraph)
msgid "Anytime you define a \"POST\", \"PUT\", \"PATCH\", or \"DELETE\" HTML form in your application, you should include a hidden CSRF `_token` field in the form so that the CSRF protection middleware can validate the request. For convenience, you may use the `@csrf` Blade directive to generate the hidden token input field:"
msgstr ""

#: docs/8.x/csrf.md:block 19 (code)
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"\n"
"    <!-- Equivalent to... -->\n"
"    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n"
"</form>\n"
msgstr ""

#: docs/8.x/csrf.md:block 20 (paragraph)
msgid "The `App\\Http\\Middleware\\VerifyCsrfToken` [middleware](/docs/{{version}}/middleware), which is included in the `web` middleware group by default, will automatically verify that the token in the request input matches the token stored in the session. When these two tokens match, we know that the authenticated user is the one initiating the request."
msgstr ""

#: docs/8.x/csrf.md:block 22 (header)
msgid "CSRF Tokens & SPAs"
msgstr ""

#: docs/8.x/csrf.md:block 23 (paragraph)
msgid "If you are building an SPA that is utilizing Laravel as an API backend, you should consult the [Laravel Sanctum documentation](/docs/{{version}}/sanctum) for information on authenticating with your API and protecting against CSRF vulnerabilities."
msgstr ""

#: docs/8.x/csrf.md:block 25 (header)
msgid "Excluding URIs From CSRF Protection"
msgstr ""

#: docs/8.x/csrf.md:block 26 (paragraph)
msgid "Sometimes you may wish to exclude a set of URIs from CSRF protection. For example, if you are using [Stripe](https://stripe.com) to process payments and are utilizing their webhook system, you will need to exclude your Stripe webhook handler route from CSRF protection since Stripe will not know what CSRF token to send to your routes."
msgstr ""

#: docs/8.x/csrf.md:block 27 (paragraph)
msgid "Typically, you should place these kinds of routes outside of the `web` middleware group that the `App\\Providers\\RouteServiceProvider` applies to all routes in the `routes/web.php` file. However, you may also exclude the routes by adding their URIs to the `$except` property of the `VerifyCsrfToken` middleware:"
msgstr ""

#: docs/8.x/csrf.md:block 28 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;\n"
"\n"
"class VerifyCsrfToken extends Middleware\n"
"{\n"
"    /**\n"
"     * The URIs that should be excluded from CSRF verification.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = [\n"
"        'stripe/*',\n"
"        'http://example.com/foo/bar',\n"
"        'http://example.com/foo/*',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/csrf.md:block 29 (quote)
msgid "{tip} For convenience, the CSRF middleware is automatically disabled for all routes when [running tests](/docs/{{version}}/testing)."
msgstr ""

#: docs/8.x/csrf.md:block 31 (header)
msgid "X-CSRF-TOKEN"
msgstr ""

#: docs/8.x/csrf.md:block 32 (paragraph)
msgid "In addition to checking for the CSRF token as a POST parameter, the `App\\Http\\Middleware\\VerifyCsrfToken` middleware will also check for the `X-CSRF-TOKEN` request header. You could, for example, store the token in an HTML `meta` tag:"
msgstr ""

#: docs/8.x/csrf.md:block 33 (code)
msgid "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n"
msgstr ""

#: docs/8.x/csrf.md:block 34 (paragraph)
msgid "Then, you can instruct a library like jQuery to automatically add the token to all request headers. This provides simple, convenient CSRF protection for your AJAX based applications using legacy JavaScript technology:"
msgstr ""

#: docs/8.x/csrf.md:block 35 (code)
msgid ""
"$.ajaxSetup({\n"
"    headers: {\n"
"        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/csrf.md:block 37 (header)
msgid "X-XSRF-TOKEN"
msgstr ""

#: docs/8.x/csrf.md:block 38 (paragraph)
msgid "Laravel stores the current CSRF token in an encrypted `XSRF-TOKEN` cookie that is included with each response generated by the framework. You can use the cookie value to set the `X-XSRF-TOKEN` request header."
msgstr ""

#: docs/8.x/csrf.md:block 39 (paragraph)
msgid "This cookie is primarily sent as a developer convenience since some JavaScript frameworks and libraries, like Angular and Axios, automatically place its value in the `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""

#: docs/8.x/csrf.md:block 40 (quote)
msgid "{tip} By default, the `resources/js/bootstrap.js` file includes the Axios HTTP library which will automatically send the `X-XSRF-TOKEN` header for you."
msgstr ""

#: docs/9.x/csrf.md:block 23 (paragraph)
msgid "If you are building a SPA that is utilizing Laravel as an API backend, you should consult the [Laravel Sanctum documentation](/docs/{{version}}/sanctum) for information on authenticating with your API and protecting against CSRF vulnerabilities."
msgstr ""

#: docs/9.x/csrf.md:block 29 (quote)
msgid "**Note** For convenience, the CSRF middleware is automatically disabled for all routes when [running tests](/docs/{{version}}/testing)."
msgstr ""

#: docs/9.x/csrf.md:block 40 (quote)
msgid "**Note** By default, the `resources/js/bootstrap.js` file includes the Axios HTTP library which will automatically send the `X-XSRF-TOKEN` header for you."
msgstr ""
