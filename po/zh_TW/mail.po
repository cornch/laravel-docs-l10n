msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/mail.pot\n"
"X-Crowdin-File-ID: 99\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:58\n"

#: ./docs/8.x/mail.md:1
#: ./docs/9.x/mail.md:1
#: ./docs/10.x/mail.md:1
#: ./docs/11.x/mail.md:1
#: ./docs/master/mail.md:1
msgctxt "H1"
msgid "Mail"
msgstr ""

#: ./docs/8.x/mail.md:3
#: ./docs/9.x/mail.md:3
#: ./docs/10.x/mail.md:3
#: ./docs/11.x/mail.md:3
#: ./docs/master/mail.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/mail.md:4
#: ./docs/9.x/mail.md:4
#: ./docs/10.x/mail.md:4
#: ./docs/11.x/mail.md:4
#: ./docs/master/mail.md:4
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/8.x/mail.md:5
#: ./docs/9.x/mail.md:5
#: ./docs/10.x/mail.md:5
#: ./docs/11.x/mail.md:5
#: ./docs/master/mail.md:5
msgctxt "P"
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: ./docs/8.x/mail.md:6
#: ./docs/9.x/mail.md:6
#: ./docs/10.x/mail.md:6
#: ./docs/11.x/mail.md:6
#: ./docs/master/mail.md:6
msgctxt "P"
msgid "[Failover Configuration](#failover-configuration)"
msgstr ""

#: ./docs/10.x/mail.md:7
#: ./docs/11.x/mail.md:7
#: ./docs/master/mail.md:7
msgctxt "P"
msgid "[Round Robin Configuration](#round-robin-configuration)"
msgstr ""

#: ./docs/8.x/mail.md:7
#: ./docs/9.x/mail.md:7
#: ./docs/10.x/mail.md:8
#: ./docs/11.x/mail.md:8
#: ./docs/master/mail.md:8
msgctxt "P"
msgid "[Generating Mailables](#generating-mailables)"
msgstr ""

#: ./docs/8.x/mail.md:8
#: ./docs/9.x/mail.md:8
#: ./docs/10.x/mail.md:9
#: ./docs/11.x/mail.md:9
#: ./docs/master/mail.md:9
msgctxt "P"
msgid "[Writing Mailables](#writing-mailables)"
msgstr ""

#: ./docs/8.x/mail.md:9
#: ./docs/9.x/mail.md:9
msgctxt "P"
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr ""

#: ./docs/10.x/mail.md:10
#: ./docs/11.x/mail.md:10
#: ./docs/master/mail.md:10
msgctxt "P"
msgid "[Configuring the Sender](#configuring-the-sender)"
msgstr ""

#: ./docs/8.x/mail.md:10
#: ./docs/9.x/mail.md:10
msgctxt "P"
msgid "[Configuring The View](#configuring-the-view)"
msgstr ""

#: ./docs/10.x/mail.md:11
#: ./docs/11.x/mail.md:11
#: ./docs/master/mail.md:11
msgctxt "P"
msgid "[Configuring the View](#configuring-the-view)"
msgstr ""

#: ./docs/8.x/mail.md:11
#: ./docs/9.x/mail.md:11
#: ./docs/10.x/mail.md:12
#: ./docs/11.x/mail.md:12
#: ./docs/master/mail.md:12
msgctxt "P"
msgid "[View Data](#view-data)"
msgstr ""

#: ./docs/8.x/mail.md:12
#: ./docs/9.x/mail.md:12
#: ./docs/10.x/mail.md:13
#: ./docs/11.x/mail.md:13
#: ./docs/master/mail.md:13
msgctxt "P"
msgid "[Attachments](#attachments)"
msgstr ""

#: ./docs/8.x/mail.md:13
#: ./docs/9.x/mail.md:13
#: ./docs/10.x/mail.md:14
#: ./docs/11.x/mail.md:14
#: ./docs/master/mail.md:14
msgctxt "P"
msgid "[Inline Attachments](#inline-attachments)"
msgstr ""

#: ./docs/8.x/mail.md:14
msgctxt "P"
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr ""

#: ./docs/9.x/mail.md:14
#: ./docs/10.x/mail.md:15
#: ./docs/11.x/mail.md:15
#: ./docs/master/mail.md:15
msgctxt "P"
msgid "[Attachable Objects](#attachable-objects)"
msgstr ""

#: ./docs/8.x/mail.md:15
#: ./docs/9.x/mail.md:18
#: ./docs/10.x/mail.md:19
#: ./docs/11.x/mail.md:19
#: ./docs/master/mail.md:19
msgctxt "P"
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr ""

#: ./docs/9.x/mail.md:15
#: ./docs/10.x/mail.md:16
#: ./docs/11.x/mail.md:16
#: ./docs/master/mail.md:16
msgctxt "P"
msgid "[Headers](#headers)"
msgstr ""

#: ./docs/8.x/mail.md:16
#: ./docs/9.x/mail.md:19
#: ./docs/10.x/mail.md:20
#: ./docs/11.x/mail.md:20
#: ./docs/master/mail.md:20
msgctxt "P"
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr ""

#: ./docs/9.x/mail.md:16
msgctxt "P"
msgid "[Tags & Metadata](#tags-and-metadata)"
msgstr ""

#: ./docs/10.x/mail.md:17
#: ./docs/11.x/mail.md:17
#: ./docs/master/mail.md:17
msgctxt "P"
msgid "[Tags and Metadata](#tags-and-metadata)"
msgstr ""

#: ./docs/8.x/mail.md:17
#: ./docs/9.x/mail.md:20
#: ./docs/10.x/mail.md:21
#: ./docs/11.x/mail.md:21
#: ./docs/master/mail.md:21
msgctxt "P"
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr ""

#: ./docs/9.x/mail.md:17
msgctxt "P"
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: ./docs/10.x/mail.md:18
#: ./docs/11.x/mail.md:18
#: ./docs/master/mail.md:18
msgctxt "P"
msgid "[Customizing the Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: ./docs/8.x/mail.md:18
#: ./docs/9.x/mail.md:21
msgctxt "P"
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: ./docs/8.x/mail.md:19
#: ./docs/9.x/mail.md:22
#: ./docs/10.x/mail.md:23
#: ./docs/11.x/mail.md:23
#: ./docs/master/mail.md:23
msgctxt "P"
msgid "[Sending Mail](#sending-mail)"
msgstr ""

#: ./docs/8.x/mail.md:20
#: ./docs/9.x/mail.md:23
#: ./docs/10.x/mail.md:24
#: ./docs/11.x/mail.md:24
#: ./docs/master/mail.md:24
msgctxt "P"
msgid "[Queueing Mail](#queueing-mail)"
msgstr ""

#: ./docs/8.x/mail.md:21
#: ./docs/9.x/mail.md:24
#: ./docs/10.x/mail.md:25
#: ./docs/11.x/mail.md:25
#: ./docs/master/mail.md:25
msgctxt "P"
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr ""

#: ./docs/10.x/mail.md:22
#: ./docs/11.x/mail.md:22
#: ./docs/master/mail.md:22
msgctxt "P"
msgid "[Customizing the Components](#customizing-the-components)"
msgstr ""

#: ./docs/8.x/mail.md:22
#: ./docs/9.x/mail.md:25
msgctxt "P"
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: ./docs/8.x/mail.md:23
#: ./docs/9.x/mail.md:26
#: ./docs/10.x/mail.md:27
#: ./docs/11.x/mail.md:27
#: ./docs/master/mail.md:27
msgctxt "P"
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr ""

#: ./docs/8.x/mail.md:24
#: ./docs/9.x/mail.md:27
msgctxt "P"
msgid "[Testing Mailables](#testing-mailables)"
msgstr ""

#: ./docs/8.x/mail.md:25
#: ./docs/9.x/mail.md:28
msgctxt "P"
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr ""

#: ./docs/10.x/mail.md:26
#: ./docs/11.x/mail.md:26
#: ./docs/master/mail.md:26
msgctxt "P"
msgid "[Previewing Mailables in the Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: ./docs/8.x/mail.md:26
#: ./docs/9.x/mail.md:29
#: ./docs/10.x/mail.md:32
#: ./docs/11.x/mail.md:32
#: ./docs/master/mail.md:32
msgctxt "P"
msgid "[Events](#events)"
msgstr ""

#: ./docs/10.x/mail.md:28
#: ./docs/11.x/mail.md:28
#: ./docs/master/mail.md:28
msgctxt "P"
msgid "[Testing](#testing-mailables)"
msgstr ""

#: ./docs/8.x/mail.md:28
#: ./docs/9.x/mail.md:33
#: ./docs/10.x/mail.md:36
#: ./docs/11.x/mail.md:36
#: ./docs/master/mail.md:36
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/10.x/mail.md:29
#: ./docs/11.x/mail.md:29
#: ./docs/master/mail.md:29
msgctxt "P"
msgid "[Testing Mailable Content](#testing-mailable-content)"
msgstr ""

#: ./docs/8.x/mail.md:29
#: ./docs/9.x/mail.md:34
#: ./docs/10.x/mail.md:37
#: ./docs/11.x/mail.md:37
#: ./docs/master/mail.md:37
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/10.x/mail.md:30
#: ./docs/11.x/mail.md:30
#: ./docs/master/mail.md:30
msgctxt "P"
msgid "[Testing Mailable Sending](#testing-mailable-sending)"
msgstr ""

#: ./docs/9.x/mail.md:30
#: ./docs/10.x/mail.md:33
#: ./docs/11.x/mail.md:33
#: ./docs/master/mail.md:33
msgctxt "P"
msgid "[Custom Transports](#custom-transports)"
msgstr ""

#: ./docs/10.x/mail.md:31
#: ./docs/11.x/mail.md:31
#: ./docs/master/mail.md:31
msgctxt "P"
msgid "[Mail and Local Development](#mail-and-local-development)"
msgstr ""

#: ./docs/8.x/mail.md:31
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/9.x/mail.md:31
#: ./docs/10.x/mail.md:34
#: ./docs/11.x/mail.md:34
#: ./docs/master/mail.md:34
msgctxt "P"
msgid "[Additional Symfony Transports](#additional-symfony-transports)"
msgstr ""

#: ./docs/8.x/mail.md:33
#: ./docs/9.x/mail.md:38
#: ./docs/10.x/mail.md:41
#: ./docs/11.x/mail.md:41
#: ./docs/master/mail.md:41
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:34
#: ./docs/9.x/mail.md:39
#: ./docs/10.x/mail.md:42
#: ./docs/11.x/mail.md:42
#: ./docs/master/mail.md:42
msgctxt "H3"
msgid "Configuration"
msgstr ""

#: ./docs/8.x/mail.md:36
#: ./docs/9.x/mail.md:41
#: ./docs/10.x/mail.md:44
#: ./docs/11.x/mail.md:44
#: ./docs/master/mail.md:44
msgctxt "P"
msgid "Laravel's email services may be configured via your application's `config/mail.php` configuration file. Each mailer configured within this file may have its own unique configuration and even its own unique \"transport\", allowing your application to use different email services to send certain email messages. For example, your application might use Postmark to send transactional emails while using Amazon SES to send bulk emails."
msgstr ""

#: ./docs/9.x/mail.md:36
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/8.x/mail.md:38
#: ./docs/9.x/mail.md:43
#: ./docs/10.x/mail.md:46
#: ./docs/11.x/mail.md:46
#: ./docs/master/mail.md:46
msgctxt "P"
msgid "Within your `mail` configuration file, you will find a `mailers` configuration array. This array contains a sample configuration entry for each of the major mail drivers / transports supported by Laravel, while the `default` configuration value determines which mailer will be used by default when your application needs to send an email message."
msgstr ""

#: ./docs/10.x/mail.md:39
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.2/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/11.x/mail.md:39
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/7.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Resend, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/master/mail.md:39
msgctxt "P"
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/7.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: ./docs/8.x/mail.md:40
#: ./docs/9.x/mail.md:45
#: ./docs/10.x/mail.md:48
#: ./docs/11.x/mail.md:48
#: ./docs/master/mail.md:48
#~ msgctxt "P"
#~ msgid "<a name=\"driver-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:41
#: ./docs/9.x/mail.md:46
#: ./docs/10.x/mail.md:49
#: ./docs/11.x/mail.md:49
#: ./docs/master/mail.md:49
msgctxt "H3"
msgid "Driver / Transport Prerequisites"
msgstr ""

#: ./docs/8.x/mail.md:43
msgctxt "P"
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers. All of the API based drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:"
msgstr ""

#: ./docs/8.x/mail.md:45
msgctxt "CODE"
msgid "composer require guzzlehttp/guzzle"
msgstr ""

#: ./docs/8.x/mail.md:47
#: ./docs/9.x/mail.md:50
#: ./docs/10.x/mail.md:53
#: ./docs/11.x/mail.md:53
#: ./docs/master/mail.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"mailgun-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:48
#: ./docs/9.x/mail.md:51
#: ./docs/10.x/mail.md:54
#: ./docs/11.x/mail.md:54
#: ./docs/master/mail.md:54
msgctxt "H4"
msgid "Mailgun Driver"
msgstr ""

#: ./docs/9.x/mail.md:48
msgctxt "P"
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: ./docs/8.x/mail.md:50
msgctxt "P"
msgid "To use the Mailgun driver, first install the Guzzle HTTP library. Then, set the `default` option in your `config/mail.php` configuration file to `mailgun`. Next, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/10.x/mail.md:51
#: ./docs/master/mail.md:51
msgctxt "P"
msgid "The API based drivers such as Mailgun, Postmark, and MailerSend are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: ./docs/11.x/mail.md:51
msgctxt "P"
msgid "The API based drivers such as Mailgun, Postmark, Resend, and MailerSend are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: ./docs/8.x/mail.md:52
#: ./docs/9.x/mail.md:61
msgctxt "CODE"
msgid "'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:53
#: ./docs/10.x/mail.md:56
#: ./docs/11.x/mail.md:56
#: ./docs/master/mail.md:56
msgctxt "P"
msgid "To use the Mailgun driver, install Symfony's Mailgun Mailer transport via Composer:"
msgstr ""

#: ./docs/9.x/mail.md:55
#: ./docs/10.x/mail.md:58
#: ./docs/11.x/mail.md:58
#: ./docs/master/mail.md:58
msgctxt "CODE: shell"
msgid "composer require symfony/mailgun-mailer symfony/http-client"
msgstr ""

#: ./docs/8.x/mail.md:57
#: ./docs/9.x/mail.md:66
#: ./docs/10.x/mail.md:70
#: ./docs/11.x/mail.md:80
#: ./docs/master/mail.md:80
msgctxt "P"
msgid "If you are not using the United States [Mailgun region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), you may define your region's endpoint in the `services` configuration file:"
msgstr ""

#: ./docs/8.x/mail.md:59
#: ./docs/9.x/mail.md:68
#: ./docs/10.x/mail.md:72
msgctxt "CODE"
msgid "'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:59
#: ./docs/10.x/mail.md:62
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/11.x/mail.md:62
#: ./docs/master/mail.md:62
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun` and add the following configuration array to your array of `mailers`:"
msgstr ""

#: ./docs/10.x/mail.md:64
msgctxt "CODE"
msgid "'mailgun' => [\n"
"    'transport' => 'mailgun',\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:64
#: ./docs/master/mail.md:64
msgctxt "CODE"
msgid "'mailgun' => [\n"
"    'transport' => 'mailgun',\n"
"    // 'client' => [\n"
"    //     'timeout' => 5,\n"
"    // ],\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:65
#: ./docs/9.x/mail.md:74
#: ./docs/10.x/mail.md:78
#: ./docs/11.x/mail.md:89
#: ./docs/master/mail.md:89
#~ msgctxt "P"
#~ msgid "<a name=\"postmark-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:66
#: ./docs/9.x/mail.md:75
#: ./docs/10.x/mail.md:79
#: ./docs/11.x/mail.md:90
#: ./docs/master/mail.md:90
msgctxt "H4"
msgid "Postmark Driver"
msgstr ""

#: ./docs/8.x/mail.md:68
msgctxt "P"
msgid "To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:"
msgstr ""

#: ./docs/8.x/mail.md:70
msgctxt "CODE"
msgid "composer require wildbit/swiftmailer-postmark"
msgstr ""

#: ./docs/11.x/mail.md:71
#: ./docs/master/mail.md:71
msgctxt "P"
msgid "After configuring your application's default mailer, add the following options to your `config/services.php` configuration file:"
msgstr ""

#: ./docs/8.x/mail.md:72
msgctxt "P"
msgid "Next, install the Guzzle HTTP library and set the `default` option in your `config/mail.php` configuration file to `postmark`. Finally, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/11.x/mail.md:73
#: ./docs/master/mail.md:73
msgctxt "CODE"
msgid "'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),\n"
"    'scheme' => 'https',\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:74
#: ./docs/9.x/mail.md:85
#: ./docs/10.x/mail.md:89
#: ./docs/11.x/mail.md:100
#: ./docs/master/mail.md:100
msgctxt "CODE"
msgid "'postmark' => [\n"
"    'token' => env('POSTMARK_TOKEN'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:77
#: ./docs/10.x/mail.md:81
#: ./docs/master/mail.md:92
msgctxt "P"
msgid "To use the Postmark driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr ""

#: ./docs/8.x/mail.md:78
#: ./docs/9.x/mail.md:89
#: ./docs/10.x/mail.md:93
#: ./docs/11.x/mail.md:104
#: ./docs/master/mail.md:104
msgctxt "P"
msgid "If you would like to specify the Postmark message stream that should be used by a given mailer, you may add the `message_stream_id` configuration option to the mailer's configuration array. This configuration array can be found in your application's `config/mail.php` configuration file:"
msgstr ""

#: ./docs/9.x/mail.md:79
#: ./docs/10.x/mail.md:83
#: ./docs/11.x/mail.md:94
#: ./docs/master/mail.md:94
msgctxt "CODE: shell"
msgid "composer require symfony/postmark-mailer symfony/http-client"
msgstr ""

#: ./docs/8.x/mail.md:80
#: ./docs/9.x/mail.md:91
#: ./docs/10.x/mail.md:95
msgctxt "CODE"
msgid "'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:82
#: ./docs/master/mail.md:82
msgctxt "CODE"
msgid "'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"    'scheme' => 'https',\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:83
#: ./docs/10.x/mail.md:87
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/8.x/mail.md:85
#: ./docs/9.x/mail.md:96
#: ./docs/10.x/mail.md:100
#: ./docs/11.x/mail.md:114
#: ./docs/master/mail.md:114
msgctxt "P"
msgid "This way you are also able to set up multiple Postmark mailers with different message streams."
msgstr ""

#: ./docs/8.x/mail.md:87
#: ./docs/9.x/mail.md:98
#: ./docs/10.x/mail.md:102
#: ./docs/11.x/mail.md:131
#: ./docs/master/mail.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"ses-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:88
#: ./docs/9.x/mail.md:99
#: ./docs/10.x/mail.md:103
#: ./docs/11.x/mail.md:132
#: ./docs/master/mail.md:117
msgctxt "H4"
msgid "SES Driver"
msgstr ""

#: ./docs/8.x/mail.md:90
#: ./docs/9.x/mail.md:101
#: ./docs/10.x/mail.md:105
#: ./docs/11.x/mail.md:134
#: ./docs/master/mail.md:119
msgctxt "P"
msgid "To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library via the Composer package manager:"
msgstr ""

#: ./docs/11.x/mail.md:92
msgctxt "P"
msgid "To use the [Postmark](https://postmarkapp.com/) driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr ""

#: ./docs/8.x/mail.md:92
#: ./docs/9.x/mail.md:103
#: ./docs/10.x/mail.md:107
#: ./docs/11.x/mail.md:136
#: ./docs/master/mail.md:121
msgctxt "CODE: bash"
msgid "composer require aws/aws-sdk-php"
msgstr ""

#: ./docs/8.x/mail.md:96
#: ./docs/9.x/mail.md:107
#: ./docs/10.x/mail.md:111
#: ./docs/11.x/mail.md:140
#: ./docs/master/mail.md:125
msgctxt "P"
msgid "Next, set the `default` option in your `config/mail.php` configuration file to `ses` and verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/11.x/mail.md:98
#: ./docs/master/mail.md:98
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, ensure that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/8.x/mail.md:98
#: ./docs/9.x/mail.md:109
#: ./docs/10.x/mail.md:113
#: ./docs/11.x/mail.md:142
#: ./docs/master/mail.md:127
msgctxt "CODE"
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:104
#: ./docs/9.x/mail.md:115
#: ./docs/10.x/mail.md:119
#: ./docs/11.x/mail.md:148
#: ./docs/master/mail.md:133
msgctxt "P"
msgid "To utilize AWS [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html) via a session token, you may add a `token` key to your application's SES configuration:"
msgstr ""

#: ./docs/11.x/mail.md:106
#: ./docs/master/mail.md:106
msgctxt "CODE"
msgid "'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"    // 'client' => [\n"
"    //     'timeout' => 5,\n"
"    // ],\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:106
#: ./docs/9.x/mail.md:117
#: ./docs/10.x/mail.md:121
#: ./docs/11.x/mail.md:150
#: ./docs/master/mail.md:135
msgctxt "CODE"
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'token' => env('AWS_SESSION_TOKEN'),\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:113
msgctxt "P"
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#: ./docs/8.x/mail.md:115
msgctxt "CODE"
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'Tags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"resend-driver\"></a>"
#~ msgstr ""

#: ./docs/11.x/mail.md:117
msgctxt "H4"
msgid "Resend Driver"
msgstr ""

#: ./docs/11.x/mail.md:119
msgctxt "P"
msgid "To use the [Resend](https://resend.com/) driver, install Resend's PHP SDK via Composer:"
msgstr ""

#: ./docs/11.x/mail.md:121
msgctxt "CODE: shell"
msgid "composer require resend/resend-php"
msgstr ""

#: ./docs/9.x/mail.md:124
#: ./docs/10.x/mail.md:128
#: ./docs/11.x/mail.md:173
#: ./docs/master/mail.md:142
msgctxt "P"
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail) that Laravel should pass to the AWS SDK's `SendEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#: ./docs/11.x/mail.md:125
msgctxt "P"
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `resend`. After configuring your application's default mailer, ensure that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: ./docs/9.x/mail.md:126
#: ./docs/10.x/mail.md:130
#: ./docs/11.x/mail.md:175
#: ./docs/master/mail.md:144
msgctxt "CODE"
msgid "'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'EmailTags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:127
msgctxt "CODE"
msgid "'resend' => [\n"
"    'key' => env('RESEND_KEY'),\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:127
#: ./docs/9.x/mail.md:138
#: ./docs/10.x/mail.md:163
#: ./docs/11.x/mail.md:216
#: ./docs/master/mail.md:177
#~ msgctxt "P"
#~ msgid "<a name=\"failover-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:128
#: ./docs/9.x/mail.md:139
#: ./docs/10.x/mail.md:164
#: ./docs/11.x/mail.md:217
#: ./docs/master/mail.md:178
msgctxt "H3"
msgid "Failover Configuration"
msgstr ""

#: ./docs/8.x/mail.md:130
#: ./docs/9.x/mail.md:141
#: ./docs/10.x/mail.md:166
#: ./docs/11.x/mail.md:219
#: ./docs/master/mail.md:180
msgctxt "P"
msgid "Sometimes, an external service you have configured to send your application's mail may be down. In these cases, it can be useful to define one or more backup mail delivery configurations that will be used in case your primary delivery driver is down."
msgstr ""

#: ./docs/8.x/mail.md:132
#: ./docs/9.x/mail.md:143
msgctxt "P"
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which mail drivers should be chosen for delivery:"
msgstr ""

#: ./docs/8.x/mail.md:134
#: ./docs/9.x/mail.md:145
#: ./docs/10.x/mail.md:170
#: ./docs/11.x/mail.md:223
#: ./docs/master/mail.md:184
msgctxt "CODE"
msgid "'mailers' => [\n"
"    'failover' => [\n"
"        'transport' => 'failover',\n"
"        'mailers' => [\n"
"            'postmark',\n"
"            'mailgun',\n"
"            'sendmail',\n"
"        ],\n"
"    ],\n\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/10.x/mail.md:142
#: ./docs/11.x/mail.md:187
#: ./docs/master/mail.md:156
#~ msgctxt "P"
#~ msgid "<a name=\"mailersend-driver\"></a>"
#~ msgstr ""

#: ./docs/10.x/mail.md:143
#: ./docs/11.x/mail.md:188
#: ./docs/master/mail.md:157
msgctxt "H4"
msgid "MailerSend Driver"
msgstr ""

#: ./docs/10.x/mail.md:145
#: ./docs/11.x/mail.md:190
#: ./docs/master/mail.md:159
msgctxt "P"
msgid "[MailerSend](https://www.mailersend.com/), a transactional email and SMS service, maintains their own API based mail driver for Laravel. The package containing the driver may be installed via the Composer package manager:"
msgstr ""

#: ./docs/10.x/mail.md:147
#: ./docs/11.x/mail.md:192
#: ./docs/master/mail.md:161
msgctxt "CODE: shell"
msgid "composer require mailersend/laravel-driver"
msgstr ""

#: ./docs/8.x/mail.md:147
#: ./docs/9.x/mail.md:158
#: ./docs/10.x/mail.md:183
#: ./docs/11.x/mail.md:236
#: ./docs/master/mail.md:197
msgctxt "P"
msgid "Once your failover mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr ""

#: ./docs/8.x/mail.md:149
#: ./docs/9.x/mail.md:160
#: ./docs/10.x/mail.md:185
#: ./docs/11.x/mail.md:238
#: ./docs/master/mail.md:199
msgctxt "CODE"
msgid "'default' => env('MAIL_MAILER', 'failover'),"
msgstr ""

#: ./docs/10.x/mail.md:151
#: ./docs/11.x/mail.md:196
#: ./docs/master/mail.md:165
msgctxt "P"
msgid "Once the package is installed, add the `MAILERSEND_API_KEY` environment variable to your application's `.env` file. In addition, the `MAIL_MAILER` environment variable should be defined as `mailersend`:"
msgstr ""

#: ./docs/8.x/mail.md:151
#: ./docs/9.x/mail.md:162
#: ./docs/10.x/mail.md:210
#: ./docs/11.x/mail.md:263
#: ./docs/master/mail.md:224
#~ msgctxt "P"
#~ msgid "<a name=\"generating-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:152
#: ./docs/9.x/mail.md:163
#: ./docs/10.x/mail.md:211
#: ./docs/11.x/mail.md:264
#: ./docs/master/mail.md:225
msgctxt "H2"
msgid "Generating Mailables"
msgstr ""

#: ./docs/10.x/mail.md:153
#: ./docs/11.x/mail.md:198
#: ./docs/master/mail.md:167
msgctxt "CODE: shell"
msgid "MAIL_MAILER=mailersend\n"
"MAIL_FROM_ADDRESS=app@yourdomain.com\n"
"MAIL_FROM_NAME=\"App Name\"\n\n"
"MAILERSEND_API_KEY=your-api-key"
msgstr ""

#: ./docs/8.x/mail.md:154
#: ./docs/9.x/mail.md:165
#: ./docs/10.x/mail.md:213
#: ./docs/11.x/mail.md:266
#: ./docs/master/mail.md:227
msgctxt "P"
msgid "When building Laravel applications, each type of email sent by your application is represented as a \"mailable\" class. These classes are stored in the `app/Mail` directory. Don't worry if you don't see this directory in your application, since it will be generated for you when you create your first mailable class using the `make:mail` Artisan command:"
msgstr ""

#: ./docs/8.x/mail.md:156
#: ./docs/9.x/mail.md:167
#: ./docs/10.x/mail.md:215
#: ./docs/11.x/mail.md:268
#: ./docs/master/mail.md:229
msgctxt "CODE"
msgid "php artisan make:mail OrderShipped"
msgstr ""

#: ./docs/11.x/mail.md:157
msgctxt "P"
msgid "To interact with SES's [subscription management features](https://docs.aws.amazon.com/ses/latest/dg/sending-email-subscription-management.html), you may return the `X-Ses-List-Management-Options` header in the array returned by the [`headers`](#headers) method of a mail message:"
msgstr ""

#: ./docs/8.x/mail.md:158
#: ./docs/9.x/mail.md:171
#: ./docs/10.x/mail.md:219
#: ./docs/11.x/mail.md:272
#: ./docs/master/mail.md:233
#~ msgctxt "P"
#~ msgid "<a name=\"writing-mailables\"></a>"
#~ msgstr ""

#: ./docs/11.x/mail.md:159
msgctxt "CODE: php"
msgid "/**\n"
" * Get the message headers.\n"
" */\n"
"public function headers(): Headers\n"
"{\n"
"    return new Headers(\n"
"        text: [\n"
"            'X-Ses-List-Management-Options' => 'contactListName=MyContactList;topicName=MyTopic',\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:159
#: ./docs/9.x/mail.md:172
#: ./docs/10.x/mail.md:220
#: ./docs/11.x/mail.md:273
#: ./docs/master/mail.md:234
msgctxt "H2"
msgid "Writing Mailables"
msgstr ""

#: ./docs/10.x/mail.md:161
#: ./docs/11.x/mail.md:214
#: ./docs/master/mail.md:175
msgctxt "P"
msgid "To learn more about MailerSend, including how to use hosted templates, consult the [MailerSend driver documentation](https://github.com/mailersend/mailersend-laravel-driver#usage)."
msgstr ""

#: ./docs/8.x/mail.md:161
msgctxt "P"
msgid "Once you have generated a mailable class, open it up so we can explore its contents. First, note that all of a mailable class' configuration is done in the `build` method. Within this method, you may call various methods such as `from`, `subject`, `view`, and `attach` to configure the email's presentation and delivery."
msgstr ""

#: ./docs/8.x/mail.md:163
msgctxt "P"
msgid "You may type-hint dependencies on the mailable's `build` method. The Laravel [service container](/docs/{{version}}/container) automatically injects these dependencies."
msgstr ""

#: ./docs/8.x/mail.md:165
#: ./docs/9.x/mail.md:178
#: ./docs/10.x/mail.md:226
#: ./docs/11.x/mail.md:279
#: ./docs/master/mail.md:240
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-the-sender\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:166
#: ./docs/9.x/mail.md:179
msgctxt "H3"
msgid "Configuring The Sender"
msgstr ""

#: ./docs/10.x/mail.md:168
#: ./docs/11.x/mail.md:221
#: ./docs/master/mail.md:182
msgctxt "P"
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which configured mailers should be chosen for delivery:"
msgstr ""

#: ./docs/8.x/mail.md:168
#~ msgctxt "P"
#~ msgid "<a name=\"using-the-from-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:169
msgctxt "H4"
msgid "Using The `from` Method"
msgstr ""

#: ./docs/8.x/mail.md:171
msgctxt "P"
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may use the `from` method within your mailable class' `build` method:"
msgstr ""

#: ./docs/8.x/mail.md:173
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com', 'Example')\n"
"                ->view('emails.orders.shipped');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:174
#: ./docs/10.x/mail.md:222
#: ./docs/11.x/mail.md:275
#: ./docs/master/mail.md:236
msgctxt "P"
msgid "Once you have generated a mailable class, open it up so we can explore its contents. Mailable class configuration is done in several methods, including the `envelope`, `content`, and `attachments` methods."
msgstr ""

#: ./docs/9.x/mail.md:176
#: ./docs/10.x/mail.md:224
#: ./docs/11.x/mail.md:277
#: ./docs/master/mail.md:238
msgctxt "P"
msgid "The `envelope` method returns an `Illuminate\\Mail\\Mailables\\Envelope` object that defines the subject and, sometimes, the recipients of the message. The `content` method returns an `Illuminate\\Mail\\Mailables\\Content` object that defines the [Blade template](/docs/{{version}}/blade) that will be used to generate the message content."
msgstr ""

#: ./docs/9.x/mail.md:181
#: ./docs/10.x/mail.md:229
#: ./docs/11.x/mail.md:282
#: ./docs/master/mail.md:243
#~ msgctxt "P"
#~ msgid "<a name=\"using-the-envelope\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:182
msgctxt "H4"
msgid "Using The Envelope"
msgstr ""

#: ./docs/8.x/mail.md:184
#: ./docs/9.x/mail.md:212
#: ./docs/10.x/mail.md:258
#: ./docs/11.x/mail.md:311
#: ./docs/master/mail.md:272
#~ msgctxt "P"
#~ msgid "<a name=\"using-a-global-from-address\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:184
#: ./docs/10.x/mail.md:232
#: ./docs/11.x/mail.md:285
#: ./docs/master/mail.md:246
msgctxt "P"
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may specify the \"from\" address on your message's envelope:"
msgstr ""

#: ./docs/8.x/mail.md:185
#: ./docs/9.x/mail.md:213
msgctxt "H4"
msgid "Using A Global `from` Address"
msgstr ""

#: ./docs/9.x/mail.md:186
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Address;\n"
"use Illuminate\\Mail\\Mailables\\Envelope;\n\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"        subject: 'Order Shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:187
#: ./docs/11.x/mail.md:240
#: ./docs/master/mail.md:201
#~ msgctxt "P"
#~ msgid "<a name=\"round-robin-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:187
#: ./docs/9.x/mail.md:215
msgctxt "P"
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to call the `from` method in each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr ""

#: ./docs/10.x/mail.md:188
#: ./docs/11.x/mail.md:241
#: ./docs/master/mail.md:202
msgctxt "H3"
msgid "Round Robin Configuration"
msgstr ""

#: ./docs/8.x/mail.md:189
#: ./docs/9.x/mail.md:217
msgctxt "CODE"
msgid "'from' => ['address' => 'example@example.com', 'name' => 'App Name'],"
msgstr ""

#: ./docs/10.x/mail.md:190
#: ./docs/11.x/mail.md:243
#: ./docs/master/mail.md:204
msgctxt "P"
msgid "The `roundrobin` transport allows you to distribute your mailing workload across multiple mailers. To get started, define a mailer within your application's `mail` configuration file that uses the `roundrobin` transport. The configuration array for your application's `roundrobin` mailer should contain an array of `mailers` that reference which configured mailers should be used for delivery:"
msgstr ""

#: ./docs/8.x/mail.md:191
#: ./docs/9.x/mail.md:219
#: ./docs/10.x/mail.md:268
#: ./docs/11.x/mail.md:321
#: ./docs/master/mail.md:282
msgctxt "P"
msgid "In addition, you may define a global \"reply_to\" address within your `config/mail.php` configuration file:"
msgstr ""

#: ./docs/10.x/mail.md:192
#: ./docs/11.x/mail.md:245
#: ./docs/master/mail.md:206
msgctxt "CODE"
msgid "'mailers' => [\n"
"    'roundrobin' => [\n"
"        'transport' => 'roundrobin',\n"
"        'mailers' => [\n"
"            'ses',\n"
"            'postmark',\n"
"        ],\n"
"    ],\n\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:193
#: ./docs/9.x/mail.md:221
#: ./docs/10.x/mail.md:270
#: ./docs/11.x/mail.md:323
#: ./docs/master/mail.md:284
msgctxt "CODE"
msgid "'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],"
msgstr ""

#: ./docs/8.x/mail.md:195
#: ./docs/9.x/mail.md:223
#: ./docs/10.x/mail.md:272
#: ./docs/11.x/mail.md:325
#: ./docs/master/mail.md:286
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-the-view\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:196
#: ./docs/9.x/mail.md:224
msgctxt "H3"
msgid "Configuring The View"
msgstr ""

#: ./docs/8.x/mail.md:198
msgctxt "P"
msgid "Within a mailable class' `build` method, you may use the `view` method to specify which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: ./docs/8.x/mail.md:200
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:202
#: ./docs/10.x/mail.md:248
#: ./docs/11.x/mail.md:301
#: ./docs/master/mail.md:262
msgctxt "P"
msgid "If you would like, you may also specify a `replyTo` address:"
msgstr ""

#: ./docs/10.x/mail.md:204
#: ./docs/11.x/mail.md:257
#: ./docs/master/mail.md:218
msgctxt "P"
msgid "Once your round robin mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr ""

#: ./docs/9.x/mail.md:204
#: ./docs/10.x/mail.md:250
#: ./docs/11.x/mail.md:303
#: ./docs/master/mail.md:264
msgctxt "CODE"
msgid "return new Envelope(\n"
"    from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"    replyTo: [\n"
"        new Address('taylor@example.com', 'Taylor Otwell'),\n"
"    ],\n"
"    subject: 'Order Shipped',\n"
");"
msgstr ""

#: ./docs/10.x/mail.md:206
#: ./docs/11.x/mail.md:259
#: ./docs/master/mail.md:220
msgctxt "CODE"
msgid "'default' => env('MAIL_MAILER', 'roundrobin'),"
msgstr ""

#: ./docs/11.x/mail.md:206
msgctxt "P"
msgid "Finally, add MailerSend to the `mailers` array in your application's `config/mail.php` configuration file:"
msgstr ""

#: ./docs/10.x/mail.md:208
#: ./docs/11.x/mail.md:261
#: ./docs/master/mail.md:222
msgctxt "P"
msgid "The round robin transport selects a random mailer from the list of configured mailers and then switches to the next available mailer for each subsequent email. In contrast to `failover` transport, which helps to achieve *[high availability](https://en.wikipedia.org/wiki/High_availability)*, the `roundrobin` transport provides *[load balancing](https://en.wikipedia.org/wiki/Load_balancing_(computing))*."
msgstr ""

#: ./docs/11.x/mail.md:208
msgctxt "CODE: php"
msgid "'mailersend' => [\n"
"    'transport' => 'mailersend',\n"
"],"
msgstr ""

#: ./docs/8.x/mail.md:210
#: ./docs/9.x/mail.md:241
#: ./docs/10.x/mail.md:288
#: ./docs/11.x/mail.md:341
#: ./docs/master/mail.md:302
msgctxt "P"
msgid "You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr ""

#: ./docs/8.x/mail.md:212
#: ./docs/9.x/mail.md:243
#: ./docs/10.x/mail.md:290
#: ./docs/11.x/mail.md:343
#: ./docs/master/mail.md:304
#~ msgctxt "P"
#~ msgid "<a name=\"plain-text-emails\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:213
#: ./docs/9.x/mail.md:244
#: ./docs/10.x/mail.md:291
#: ./docs/11.x/mail.md:344
#: ./docs/master/mail.md:305
msgctxt "H4"
msgid "Plain Text Emails"
msgstr ""

#: ./docs/8.x/mail.md:215
msgctxt "P"
msgid "If you would like to define a plain-text version of your email, you may use the `text` method. Like the `view` method, the `text` method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr ""

#: ./docs/8.x/mail.md:217
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->text('emails.orders.shipped_plain');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:226
msgctxt "P"
msgid "Within a mailable class' `content` method, you may define the `view`, or which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: ./docs/10.x/mail.md:227
#: ./docs/11.x/mail.md:280
#: ./docs/master/mail.md:241
msgctxt "H3"
msgid "Configuring the Sender"
msgstr ""

#: ./docs/8.x/mail.md:228
#: ./docs/9.x/mail.md:268
#: ./docs/10.x/mail.md:313
#: ./docs/11.x/mail.md:366
#: ./docs/master/mail.md:327
#~ msgctxt "P"
#~ msgid "<a name=\"view-data\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:228
msgctxt "CODE"
msgid "/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        view: 'emails.orders.shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:229
#: ./docs/9.x/mail.md:269
#: ./docs/10.x/mail.md:314
#: ./docs/11.x/mail.md:367
#: ./docs/master/mail.md:328
msgctxt "H3"
msgid "View Data"
msgstr ""

#: ./docs/10.x/mail.md:230
#: ./docs/11.x/mail.md:283
#: ./docs/master/mail.md:244
msgctxt "H4"
msgid "Using the Envelope"
msgstr ""

#: ./docs/8.x/mail.md:231
#: ./docs/9.x/mail.md:271
#: ./docs/10.x/mail.md:316
#: ./docs/11.x/mail.md:369
#: ./docs/master/mail.md:330
#~ msgctxt "P"
#~ msgid "<a name=\"via-public-properties\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:232
#: ./docs/9.x/mail.md:272
#: ./docs/10.x/mail.md:317
#: ./docs/11.x/mail.md:370
#: ./docs/master/mail.md:331
msgctxt "H4"
msgid "Via Public Properties"
msgstr ""

#: ./docs/10.x/mail.md:234
#: ./docs/11.x/mail.md:287
#: ./docs/master/mail.md:248
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Address;\n"
"use Illuminate\\Mail\\Mailables\\Envelope;\n\n"
"/**\n"
" * Get the message envelope.\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"        subject: 'Order Shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:234
#: ./docs/9.x/mail.md:274
msgctxt "P"
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class' constructor and set that data to public properties defined on the class:"
msgstr ""

#: ./docs/8.x/mail.md:236
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:246
#: ./docs/10.x/mail.md:293
#: ./docs/11.x/mail.md:346
#: ./docs/master/mail.md:307
msgctxt "P"
msgid "If you would like to define a plain-text version of your email, you may specify the plain-text template when creating the message's `Content` definition. Like the `view` parameter, the `text` parameter should be a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr ""

#: ./docs/9.x/mail.md:248
msgctxt "CODE"
msgid "/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        view: 'emails.orders.shipped',\n"
"        text: 'emails.orders.shipped-text'\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:259
#: ./docs/11.x/mail.md:312
#: ./docs/master/mail.md:273
msgctxt "H4"
msgid "Using a Global `from` Address"
msgstr ""

#: ./docs/10.x/mail.md:261
#: ./docs/11.x/mail.md:314
#: ./docs/master/mail.md:275
msgctxt "P"
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to add it to each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr ""

#: ./docs/9.x/mail.md:261
#: ./docs/10.x/mail.md:306
#: ./docs/11.x/mail.md:359
#: ./docs/master/mail.md:320
msgctxt "P"
msgid "For clarity, the `html` parameter may be used as an alias of the `view` parameter:"
msgstr ""

#: ./docs/10.x/mail.md:263
#: ./docs/11.x/mail.md:316
#: ./docs/master/mail.md:277
msgctxt "CODE"
msgid "'from' => [\n"
"    'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),\n"
"    'name' => env('MAIL_FROM_NAME', 'Example'),\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:263
msgctxt "CODE"
msgid "return new Content(\n"
"    html: 'emails.orders.shipped',\n"
"    text: 'emails.orders.shipped-text'\n"
");"
msgstr ""

#: ./docs/10.x/mail.md:273
#: ./docs/11.x/mail.md:326
#: ./docs/master/mail.md:287
msgctxt "H3"
msgid "Configuring the View"
msgstr ""

#: ./docs/10.x/mail.md:275
#: ./docs/11.x/mail.md:328
#: ./docs/master/mail.md:289
msgctxt "P"
msgid "Within a mailable class's `content` method, you may define the `view`, or which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: ./docs/9.x/mail.md:276
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n\n"
"    /**\n"
"     * Get the message content definition.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Mailables\\Content\n"
"     */\n"
"    public function content()\n"
"    {\n"
"        return new Content(\n"
"            view: 'emails.orders.shipped',\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:277
#: ./docs/11.x/mail.md:330
#: ./docs/master/mail.md:291
msgctxt "CODE"
msgid "/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        view: 'mail.orders.shipped',\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:278
#: ./docs/9.x/mail.md:321
#: ./docs/10.x/mail.md:353
#: ./docs/11.x/mail.md:406
#: ./docs/master/mail.md:367
msgctxt "P"
msgid "Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#: ./docs/8.x/mail.md:280
#: ./docs/9.x/mail.md:323
#: ./docs/10.x/mail.md:355
#: ./docs/11.x/mail.md:408
#: ./docs/master/mail.md:369
msgctxt "CODE"
msgid "<div>\n"
"    Price: {{ $order->price }}\n"
"</div>"
msgstr ""

#: ./docs/8.x/mail.md:284
#~ msgctxt "P"
#~ msgid "<a name=\"via-the-with-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:285
msgctxt "H4"
msgid "Via The `with` Method:"
msgstr ""

#: ./docs/8.x/mail.md:287
msgctxt "P"
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `with` method. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template. Then, when calling the `with` method, pass an array of data that you wish to make available to the template:"
msgstr ""

#: ./docs/8.x/mail.md:289
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->with([\n"
"                        'orderName' => $this->order->name,\n"
"                        'orderPrice' => $this->order->price,\n"
"                    ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:295
#: ./docs/11.x/mail.md:348
#: ./docs/master/mail.md:309
msgctxt "CODE"
msgid "/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        view: 'mail.orders.shipped',\n"
"        text: 'mail.orders.shipped-text'\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:308
#: ./docs/11.x/mail.md:361
#: ./docs/master/mail.md:322
msgctxt "CODE"
msgid "return new Content(\n"
"    html: 'mail.orders.shipped',\n"
"    text: 'mail.orders.shipped-text'\n"
");"
msgstr ""

#: ./docs/10.x/mail.md:319
#: ./docs/11.x/mail.md:372
#: ./docs/master/mail.md:333
msgctxt "P"
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class's constructor and set that data to public properties defined on the class:"
msgstr ""

#: ./docs/10.x/mail.md:321
#: ./docs/11.x/mail.md:374
#: ./docs/master/mail.md:335
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct(\n"
"        public Order $order,\n"
"    ) {}\n\n"
"    /**\n"
"     * Get the message content definition.\n"
"     */\n"
"    public function content(): Content\n"
"    {\n"
"        return new Content(\n"
"            view: 'mail.orders.shipped',\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:327
#: ./docs/10.x/mail.md:359
#: ./docs/11.x/mail.md:412
#: ./docs/master/mail.md:373
#~ msgctxt "P"
#~ msgid "<a name=\"via-the-with-parameter\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:328
msgctxt "H4"
msgid "Via The `with` Parameter:"
msgstr ""

#: ./docs/9.x/mail.md:330
msgctxt "P"
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `Content` definition's `with` parameter. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template:"
msgstr ""

#: ./docs/9.x/mail.md:332
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n\n"
"    /**\n"
"     * Get the message content definition.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Mailables\\Content\n"
"     */\n"
"    public function content()\n"
"    {\n"
"        return new Content(\n"
"            view: 'emails.orders.shipped',\n"
"            with: [\n"
"                'orderName' => $this->order->name,\n"
"                'orderPrice' => $this->order->price,\n"
"            ],\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:335
#: ./docs/9.x/mail.md:381
#: ./docs/10.x/mail.md:400
#: ./docs/11.x/mail.md:453
#: ./docs/master/mail.md:414
msgctxt "P"
msgid "Once the data has been passed to the `with` method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#: ./docs/8.x/mail.md:337
#: ./docs/9.x/mail.md:383
#: ./docs/10.x/mail.md:402
#: ./docs/11.x/mail.md:455
#: ./docs/master/mail.md:416
msgctxt "CODE"
msgid "<div>\n"
"    Price: {{ $orderPrice }}\n"
"</div>"
msgstr ""

#: ./docs/8.x/mail.md:341
#: ./docs/9.x/mail.md:387
#: ./docs/10.x/mail.md:406
#: ./docs/11.x/mail.md:459
#: ./docs/master/mail.md:420
#~ msgctxt "P"
#~ msgid "<a name=\"attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:342
#: ./docs/9.x/mail.md:388
#: ./docs/10.x/mail.md:407
#: ./docs/11.x/mail.md:460
#: ./docs/master/mail.md:421
msgctxt "H3"
msgid "Attachments"
msgstr ""

#: ./docs/8.x/mail.md:344
msgctxt "P"
msgid "To add attachments to an email, use the `attach` method within the mailable class' `build` method. The `attach` method accepts the full path to the file as its first argument:"
msgstr ""

#: ./docs/8.x/mail.md:346
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:357
msgctxt "P"
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#: ./docs/8.x/mail.md:359
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:360
#: ./docs/11.x/mail.md:413
#: ./docs/master/mail.md:374
msgctxt "H4"
msgid "Via the `with` Parameter:"
msgstr ""

#: ./docs/10.x/mail.md:362
#: ./docs/11.x/mail.md:415
#: ./docs/master/mail.md:376
msgctxt "P"
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `Content` definition's `with` parameter. Typically, you will still pass data via the mailable class's constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template:"
msgstr ""

#: ./docs/10.x/mail.md:364
#: ./docs/11.x/mail.md:417
#: ./docs/master/mail.md:378
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected Order $order,\n"
"    ) {}\n\n"
"    /**\n"
"     * Get the message content definition.\n"
"     */\n"
"    public function content(): Content\n"
"    {\n"
"        return new Content(\n"
"            view: 'mail.orders.shipped',\n"
"            with: [\n"
"                'orderName' => $this->order->name,\n"
"                'orderPrice' => $this->order->price,\n"
"            ],\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:373
#: ./docs/9.x/mail.md:422
#: ./docs/10.x/mail.md:441
#: ./docs/11.x/mail.md:494
#: ./docs/master/mail.md:455
#~ msgctxt "P"
#~ msgid "<a name=\"attaching-files-from-disk\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:374
#: ./docs/9.x/mail.md:423
#: ./docs/10.x/mail.md:442
#: ./docs/11.x/mail.md:495
#: ./docs/master/mail.md:456
msgctxt "H4"
msgid "Attaching Files From Disk"
msgstr ""

#: ./docs/8.x/mail.md:376
msgctxt "P"
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `attachFromStorage` method:"
msgstr ""

#: ./docs/8.x/mail.md:378
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:389
msgctxt "P"
msgid "If necessary, you may specify the file's attachment name and additional options using the second and third arguments to the `attachFromStorage` method:"
msgstr ""

#: ./docs/9.x/mail.md:390
#: ./docs/10.x/mail.md:409
#: ./docs/11.x/mail.md:462
#: ./docs/master/mail.md:423
msgctxt "P"
msgid "To add attachments to an email, you will add attachments to the array returned by the message's `attachments` method. First, you may add an attachment by providing a file path to the `fromPath` method provided by the `Attachment` class:"
msgstr ""

#: ./docs/8.x/mail.md:391
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                   'mime' => 'application/pdf'\n"
"               ]);\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:392
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Attachment;\n\n"
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:404
msgctxt "P"
msgid "The `attachFromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr ""

#: ./docs/8.x/mail.md:406
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorageDisk('s3', '/path/to/file');\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:406
#: ./docs/10.x/mail.md:425
#: ./docs/11.x/mail.md:478
#: ./docs/master/mail.md:439
msgctxt "P"
msgid "When attaching files to a message, you may also specify the display name and / or MIME type for the attachment using the `as` and `withMime` methods:"
msgstr ""

#: ./docs/9.x/mail.md:408
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:411
#: ./docs/11.x/mail.md:464
#: ./docs/master/mail.md:425
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Attachment;\n\n"
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:417
#: ./docs/9.x/mail.md:471
#: ./docs/10.x/mail.md:490
#: ./docs/11.x/mail.md:543
#: ./docs/master/mail.md:504
#~ msgctxt "P"
#~ msgid "<a name=\"raw-data-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:418
#: ./docs/9.x/mail.md:472
#: ./docs/10.x/mail.md:491
#: ./docs/11.x/mail.md:544
#: ./docs/master/mail.md:505
msgctxt "H4"
msgid "Raw Data Attachments"
msgstr ""

#: ./docs/8.x/mail.md:420
msgctxt "P"
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `attachData` method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:"
msgstr ""

#: ./docs/8.x/mail.md:422
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:425
#: ./docs/10.x/mail.md:444
#: ./docs/11.x/mail.md:497
#: ./docs/master/mail.md:458
msgctxt "P"
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `fromStorage` attachment method:"
msgstr ""

#: ./docs/10.x/mail.md:427
#: ./docs/11.x/mail.md:480
#: ./docs/master/mail.md:441
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:427
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:435
#: ./docs/9.x/mail.md:489
#: ./docs/10.x/mail.md:508
#: ./docs/11.x/mail.md:561
#: ./docs/master/mail.md:522
#~ msgctxt "P"
#~ msgid "<a name=\"inline-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:436
#: ./docs/9.x/mail.md:490
#: ./docs/10.x/mail.md:509
#: ./docs/11.x/mail.md:562
#: ./docs/master/mail.md:523
msgctxt "H3"
msgid "Inline Attachments"
msgstr ""

#: ./docs/8.x/mail.md:438
#: ./docs/9.x/mail.md:492
#: ./docs/10.x/mail.md:511
#: ./docs/11.x/mail.md:564
#: ./docs/master/mail.md:525
msgctxt "P"
msgid "Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails. To embed an inline image, use the `embed` method on the `$message` variable within your email template. Laravel automatically makes the `$message` variable available to all of your email templates, so you don't need to worry about passing it in manually:"
msgstr ""

#: ./docs/9.x/mail.md:439
#: ./docs/10.x/mail.md:458
#: ./docs/11.x/mail.md:511
#: ./docs/master/mail.md:472
msgctxt "P"
msgid "Of course, you may also specify the attachment's name and MIME type:"
msgstr ""

#: ./docs/8.x/mail.md:440
#: ./docs/9.x/mail.md:494
#: ./docs/10.x/mail.md:513
#: ./docs/11.x/mail.md:566
#: ./docs/master/mail.md:527
msgctxt "CODE"
msgid "<body>\n"
"    Here is an image:\n\n"
"    <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"</body>"
msgstr ""

#: ./docs/9.x/mail.md:441
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:446
#: ./docs/11.x/mail.md:499
#: ./docs/master/mail.md:460
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:446
#: ./docs/9.x/mail.md:503
#: ./docs/10.x/mail.md:522
#: ./docs/11.x/mail.md:575
#: ./docs/master/mail.md:536
msgctxt "P"
msgid "The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr ""

#: ./docs/8.x/mail.md:448
#: ./docs/9.x/mail.md:505
#: ./docs/10.x/mail.md:524
#: ./docs/11.x/mail.md:577
#: ./docs/master/mail.md:538
#~ msgctxt "P"
#~ msgid "<a name=\"embedding-raw-data-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:449
#: ./docs/9.x/mail.md:506
#: ./docs/10.x/mail.md:525
#: ./docs/11.x/mail.md:578
#: ./docs/master/mail.md:539
msgctxt "H4"
msgid "Embedding Raw Data Attachments"
msgstr ""

#: ./docs/8.x/mail.md:451
#: ./docs/9.x/mail.md:508
#: ./docs/10.x/mail.md:527
#: ./docs/11.x/mail.md:580
#: ./docs/master/mail.md:541
msgctxt "P"
msgid "If you already have a raw image data string you wish to embed into an email template, you may call the `embedData` method on the `$message` variable. When calling the `embedData` method, you will need to provide a filename that should be assigned to the embedded image:"
msgstr ""

#: ./docs/8.x/mail.md:453
#: ./docs/9.x/mail.md:510
#: ./docs/10.x/mail.md:529
#: ./docs/11.x/mail.md:582
#: ./docs/master/mail.md:543
msgctxt "CODE"
msgid "<body>\n"
"    Here is an image from raw data:\n\n"
"    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"</body>"
msgstr ""

#: ./docs/9.x/mail.md:455
#: ./docs/10.x/mail.md:474
#: ./docs/11.x/mail.md:527
#: ./docs/master/mail.md:488
msgctxt "P"
msgid "The `fromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr ""

#: ./docs/9.x/mail.md:457
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:459
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-swiftmailer-message\"></a>"
#~ msgstr ""

#: ./docs/10.x/mail.md:460
#: ./docs/11.x/mail.md:513
#: ./docs/master/mail.md:474
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:460
msgctxt "H3"
msgid "Customizing The SwiftMailer Message"
msgstr ""

#: ./docs/8.x/mail.md:462
msgctxt "P"
msgid "The `withSwiftMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the SwiftMailer message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#: ./docs/8.x/mail.md:464
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n\n"
"    $this->withSwiftMessage(function ($message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n\n"
"    return $this;\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:474
#: ./docs/10.x/mail.md:493
#: ./docs/11.x/mail.md:546
#: ./docs/master/mail.md:507
msgctxt "P"
msgid "The `fromData` attachment method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `fromData` method accepts a closure which resolves the raw data bytes as well as the name that the attachment should be assigned:"
msgstr ""

#: ./docs/10.x/mail.md:476
#: ./docs/11.x/mail.md:529
#: ./docs/master/mail.md:490
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:476
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:482
#: ./docs/9.x/mail.md:653
#: ./docs/10.x/mail.md:666
#: ./docs/11.x/mail.md:719
#: ./docs/master/mail.md:680
#~ msgctxt "P"
#~ msgid "<a name=\"markdown-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:483
#: ./docs/9.x/mail.md:654
#: ./docs/10.x/mail.md:667
#: ./docs/11.x/mail.md:720
#: ./docs/master/mail.md:681
msgctxt "H2"
msgid "Markdown Mailables"
msgstr ""

#: ./docs/8.x/mail.md:485
#: ./docs/9.x/mail.md:656
#: ./docs/10.x/mail.md:669
#: ./docs/11.x/mail.md:722
#: ./docs/master/mail.md:683
msgctxt "P"
msgid "Markdown mailable messages allow you to take advantage of the pre-built templates and components of [mail notifications](/docs/{{version}}/notifications#mail-notifications) in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#: ./docs/8.x/mail.md:487
#: ./docs/9.x/mail.md:658
#: ./docs/10.x/mail.md:671
#: ./docs/11.x/mail.md:724
#: ./docs/master/mail.md:685
#~ msgctxt "P"
#~ msgid "<a name=\"generating-markdown-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:488
#: ./docs/9.x/mail.md:659
#: ./docs/10.x/mail.md:672
#: ./docs/11.x/mail.md:725
#: ./docs/master/mail.md:686
msgctxt "H3"
msgid "Generating Markdown Mailables"
msgstr ""

#: ./docs/8.x/mail.md:490
#: ./docs/9.x/mail.md:661
#: ./docs/10.x/mail.md:674
#: ./docs/11.x/mail.md:727
#: ./docs/master/mail.md:688
msgctxt "P"
msgid "To generate a mailable with a corresponding Markdown template, you may use the `--markdown` option of the `make:mail` Artisan command:"
msgstr ""

#: ./docs/8.x/mail.md:492
#: ./docs/9.x/mail.md:663
msgctxt "CODE"
msgid "php artisan make:mail OrderShipped --markdown=emails.orders.shipped"
msgstr ""

#: ./docs/8.x/mail.md:494
msgctxt "P"
msgid "Then, when configuring the mailable within its `build` method, call the `markdown` method instead of the `view` method. The `markdown` method accepts the name of the Markdown template and an optional array of data to make available to the template:"
msgstr ""

#: ./docs/10.x/mail.md:495
#: ./docs/11.x/mail.md:548
#: ./docs/master/mail.md:509
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:496
msgctxt "CODE"
msgid "/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com')\n"
"                ->markdown('emails.orders.shipped', [\n"
"                    'url' => $this->orderUrl,\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:509
#: ./docs/9.x/mail.md:686
#: ./docs/10.x/mail.md:697
#: ./docs/11.x/mail.md:750
#: ./docs/master/mail.md:711
#~ msgctxt "P"
#~ msgid "<a name=\"writing-markdown-messages\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:510
#: ./docs/9.x/mail.md:687
#: ./docs/10.x/mail.md:698
#: ./docs/11.x/mail.md:751
#: ./docs/master/mail.md:712
msgctxt "H3"
msgid "Writing Markdown Messages"
msgstr ""

#: ./docs/8.x/mail.md:512
#: ./docs/9.x/mail.md:689
#: ./docs/10.x/mail.md:700
#: ./docs/11.x/mail.md:753
#: ./docs/master/mail.md:714
msgctxt "P"
msgid "Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel's pre-built email UI components:"
msgstr ""

#: ./docs/8.x/mail.md:514
msgctxt "CODE"
msgid "@component('mail::message')\n"
"# Order Shipped\n\n"
"Your order has been shipped!\n\n"
"@component('mail::button', ['url' => $url])\n"
"View Order\n"
"@endcomponent\n\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent"
msgstr ""

#: ./docs/9.x/mail.md:518
#: ./docs/10.x/mail.md:537
#: ./docs/11.x/mail.md:590
#: ./docs/master/mail.md:551
#~ msgctxt "P"
#~ msgid "<a name=\"attachable-objects\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:519
#: ./docs/10.x/mail.md:538
#: ./docs/11.x/mail.md:591
#: ./docs/master/mail.md:552
msgctxt "H3"
msgid "Attachable Objects"
msgstr ""

#: ./docs/9.x/mail.md:521
#: ./docs/10.x/mail.md:540
#: ./docs/11.x/mail.md:593
#: ./docs/master/mail.md:554
msgctxt "P"
msgid "While attaching files to messages via simple string paths is often sufficient, in many cases the attachable entities within your application are represented by classes. For example, if your application is attaching a photo to a message, your application may also have a `Photo` model that represents that photo. When that is the case, wouldn't it be convenient to simply pass the `Photo` model to the `attach` method? Attachable objects allow you to do just that."
msgstr ""

#: ./docs/9.x/mail.md:523
#: ./docs/10.x/mail.md:542
#: ./docs/11.x/mail.md:595
#: ./docs/master/mail.md:556
msgctxt "P"
msgid "To get started, implement the `Illuminate\\Contracts\\Mail\\Attachable` interface on the object that will be attachable to messages. This interface dictates that your class defines a `toMailAttachment` method that returns an `Illuminate\\Mail\\Attachment` instance:"
msgstr ""

#: ./docs/9.x/mail.md:525
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Mail\\Attachable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Mail\\Attachment;\n\n"
"class Photo extends Model implements Attachable\n"
"{\n"
"    /**\n"
"     * Get the attachable representation of the model.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Attachment\n"
"     */\n"
"    public function toMailAttachment()\n"
"    {\n"
"        return Attachment::fromPath('/path/to/file');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:527
#: ./docs/9.x/mail.md:707
#: ./docs/10.x/mail.md:718
#: ./docs/11.x/mail.md:771
#: ./docs/master/mail.md:732
msgctxt "P"
msgid "Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr ""

#: ./docs/8.x/mail.md:529
#: ./docs/9.x/mail.md:709
#: ./docs/10.x/mail.md:720
#: ./docs/11.x/mail.md:773
#: ./docs/master/mail.md:734
#~ msgctxt "P"
#~ msgid "<a name=\"button-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:530
#: ./docs/9.x/mail.md:710
#: ./docs/10.x/mail.md:721
#: ./docs/11.x/mail.md:774
#: ./docs/master/mail.md:735
msgctxt "H4"
msgid "Button Component"
msgstr ""

#: ./docs/8.x/mail.md:532
#: ./docs/9.x/mail.md:712
#: ./docs/10.x/mail.md:723
#: ./docs/11.x/mail.md:776
#: ./docs/master/mail.md:737
msgctxt "P"
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `success`, and `error`. You may add as many button components to a message as you wish:"
msgstr ""

#: ./docs/8.x/mail.md:534
msgctxt "CODE"
msgid "@component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"View Order\n"
"@endcomponent"
msgstr ""

#: ./docs/8.x/mail.md:538
#: ./docs/9.x/mail.md:720
#: ./docs/10.x/mail.md:731
#: ./docs/11.x/mail.md:784
#: ./docs/master/mail.md:745
#~ msgctxt "P"
#~ msgid "<a name=\"panel-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:539
#: ./docs/9.x/mail.md:721
#: ./docs/10.x/mail.md:732
#: ./docs/11.x/mail.md:785
#: ./docs/master/mail.md:746
msgctxt "H4"
msgid "Panel Component"
msgstr ""

#: ./docs/8.x/mail.md:541
#: ./docs/9.x/mail.md:723
#: ./docs/10.x/mail.md:734
#: ./docs/11.x/mail.md:787
#: ./docs/master/mail.md:748
msgctxt "P"
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:"
msgstr ""

#: ./docs/8.x/mail.md:543
msgctxt "CODE"
msgid "@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent"
msgstr ""

#: ./docs/10.x/mail.md:544
#: ./docs/11.x/mail.md:597
#: ./docs/master/mail.md:558
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Mail\\Attachable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Mail\\Attachment;\n\n"
"class Photo extends Model implements Attachable\n"
"{\n"
"    /**\n"
"     * Get the attachable representation of the model.\n"
"     */\n"
"    public function toMailAttachment(): Attachment\n"
"    {\n"
"        return Attachment::fromPath('/path/to/file');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:546
#: ./docs/10.x/mail.md:563
#: ./docs/11.x/mail.md:616
#: ./docs/master/mail.md:577
msgctxt "P"
msgid "Once you have defined your attachable object, you may return an instance of that object from the `attachments` method when building an email message:"
msgstr ""

#: ./docs/8.x/mail.md:547
#: ./docs/9.x/mail.md:731
#: ./docs/10.x/mail.md:742
#: ./docs/11.x/mail.md:795
#: ./docs/master/mail.md:756
#~ msgctxt "P"
#~ msgid "<a name=\"table-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:548
#: ./docs/9.x/mail.md:732
#: ./docs/10.x/mail.md:743
#: ./docs/11.x/mail.md:796
#: ./docs/master/mail.md:757
msgctxt "H4"
msgid "Table Component"
msgstr ""

#: ./docs/9.x/mail.md:548
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [$this->photo];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:550
#: ./docs/9.x/mail.md:734
#: ./docs/10.x/mail.md:745
#: ./docs/11.x/mail.md:798
#: ./docs/master/mail.md:759
msgctxt "P"
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#: ./docs/8.x/mail.md:552
msgctxt "CODE"
msgid "@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent"
msgstr ""

#: ./docs/9.x/mail.md:558
#: ./docs/10.x/mail.md:575
#: ./docs/11.x/mail.md:628
#: ./docs/master/mail.md:589
msgctxt "P"
msgid "Of course, attachment data may be stored on a remote file storage service such as Amazon S3. So, Laravel also allows you to generate attachment instances from data that is stored on one of your application's [filesystem disks](/docs/{{version}}/filesystem):"
msgstr ""

#: ./docs/8.x/mail.md:559
#: ./docs/9.x/mail.md:745
#: ./docs/10.x/mail.md:756
#: ./docs/11.x/mail.md:809
#: ./docs/master/mail.md:770
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-components\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:560
#: ./docs/9.x/mail.md:746
msgctxt "H3"
msgid "Customizing The Components"
msgstr ""

#: ./docs/9.x/mail.md:560
#: ./docs/10.x/mail.md:577
#: ./docs/11.x/mail.md:630
#: ./docs/master/mail.md:591
msgctxt "CODE"
msgid "// Create an attachment from a file on your default disk...\n"
"return Attachment::fromStorage($this->path);\n\n"
"// Create an attachment from a file on a specific disk...\n"
"return Attachment::fromStorageDisk('backblaze', $this->path);"
msgstr ""

#: ./docs/8.x/mail.md:562
#: ./docs/9.x/mail.md:748
#: ./docs/10.x/mail.md:759
#: ./docs/11.x/mail.md:812
#: ./docs/master/mail.md:773
msgctxt "P"
msgid "You may export all of the Markdown mail components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#: ./docs/8.x/mail.md:564
#: ./docs/9.x/mail.md:750
#: ./docs/10.x/mail.md:761
#: ./docs/11.x/mail.md:814
#: ./docs/master/mail.md:775
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=laravel-mail"
msgstr ""

#: ./docs/10.x/mail.md:565
#: ./docs/11.x/mail.md:618
#: ./docs/master/mail.md:579
msgctxt "CODE"
msgid "/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [$this->photo];\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:566
#: ./docs/9.x/mail.md:754
#: ./docs/10.x/mail.md:765
#: ./docs/11.x/mail.md:818
#: ./docs/master/mail.md:779
msgctxt "P"
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#: ./docs/9.x/mail.md:566
#: ./docs/10.x/mail.md:583
#: ./docs/11.x/mail.md:636
#: ./docs/master/mail.md:597
msgctxt "P"
msgid "In addition, you may create attachment instances via data that you have in memory. To accomplish this, provide a closure to the `fromData` method. The closure should return the raw data that represents the attachment:"
msgstr ""

#: ./docs/8.x/mail.md:568
#: ./docs/9.x/mail.md:756
#: ./docs/10.x/mail.md:767
#: ./docs/11.x/mail.md:820
#: ./docs/master/mail.md:781
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-css\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:568
#: ./docs/10.x/mail.md:585
#: ./docs/11.x/mail.md:638
#: ./docs/master/mail.md:599
msgctxt "CODE"
msgid "return Attachment::fromData(fn () => $this->content, 'Photo Name');"
msgstr ""

#: ./docs/8.x/mail.md:569
#: ./docs/9.x/mail.md:757
msgctxt "H4"
msgid "Customizing The CSS"
msgstr ""

#: ./docs/9.x/mail.md:570
#: ./docs/10.x/mail.md:587
#: ./docs/11.x/mail.md:640
#: ./docs/master/mail.md:601
msgctxt "P"
msgid "Laravel also provides additional methods that you may use to customize your attachments. For example, you may use the `as` and `withMime` methods to customize the file's name and MIME type:"
msgstr ""

#: ./docs/8.x/mail.md:571
#: ./docs/9.x/mail.md:759
#: ./docs/10.x/mail.md:770
#: ./docs/11.x/mail.md:823
#: ./docs/master/mail.md:784
msgctxt "P"
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be converted to inline CSS styles within the HTML representations of your Markdown mail messages."
msgstr ""

#: ./docs/9.x/mail.md:572
#: ./docs/10.x/mail.md:589
#: ./docs/11.x/mail.md:642
#: ./docs/master/mail.md:603
msgctxt "CODE"
msgid "return Attachment::fromPath('/path/to/file')\n"
"        ->as('Photo Name')\n"
"        ->withMime('image/jpeg');"
msgstr ""

#: ./docs/8.x/mail.md:573
#: ./docs/9.x/mail.md:761
#: ./docs/10.x/mail.md:772
#: ./docs/11.x/mail.md:825
#: ./docs/master/mail.md:786
msgctxt "P"
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of your application's `config/mail.php` configuration file to match the name of your new theme."
msgstr ""

#: ./docs/8.x/mail.md:575
#: ./docs/9.x/mail.md:763
#: ./docs/10.x/mail.md:774
#: ./docs/11.x/mail.md:827
#: ./docs/master/mail.md:788
msgctxt "P"
msgid "To customize the theme for an individual mailable, you may set the `$theme` property of the mailable class to the name of the theme that should be used when sending that mailable."
msgstr ""

#: ./docs/9.x/mail.md:576
#: ./docs/10.x/mail.md:593
#: ./docs/11.x/mail.md:646
#: ./docs/master/mail.md:607
#~ msgctxt "P"
#~ msgid "<a name=\"headers\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:577
#: ./docs/9.x/mail.md:765
#: ./docs/10.x/mail.md:776
#: ./docs/11.x/mail.md:829
#: ./docs/master/mail.md:790
#~ msgctxt "P"
#~ msgid "<a name=\"sending-mail\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:577
#: ./docs/10.x/mail.md:594
#: ./docs/11.x/mail.md:647
#: ./docs/master/mail.md:608
msgctxt "H3"
msgid "Headers"
msgstr ""

#: ./docs/8.x/mail.md:578
#: ./docs/9.x/mail.md:766
#: ./docs/10.x/mail.md:777
#: ./docs/11.x/mail.md:830
#: ./docs/master/mail.md:791
msgctxt "H2"
msgid "Sending Mail"
msgstr ""

#: ./docs/9.x/mail.md:579
#: ./docs/10.x/mail.md:596
#: ./docs/11.x/mail.md:649
#: ./docs/master/mail.md:610
msgctxt "P"
msgid "Sometimes you may need to attach additional headers to the outgoing message. For instance, you may need to set a custom `Message-Id` or other arbitrary text headers."
msgstr ""

#: ./docs/8.x/mail.md:580
#: ./docs/9.x/mail.md:768
#: ./docs/10.x/mail.md:779
#: ./docs/11.x/mail.md:832
#: ./docs/master/mail.md:793
msgctxt "P"
msgid "To send a message, use the `to` method on the `Mail` [facade](/docs/{{version}}/facades). The `to` method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their `email` and `name` properties when determining the email's recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the `send` method:"
msgstr ""

#: ./docs/9.x/mail.md:581
#: ./docs/10.x/mail.md:598
#: ./docs/11.x/mail.md:651
#: ./docs/master/mail.md:612
msgctxt "P"
msgid "To accomplish this, define a `headers` method on your mailable. The `headers` method should return an `Illuminate\\Mail\\Mailables\\Headers` instance. This class accepts `messageId`, `references`, and `text` parameters. Of course, you may provide only the parameters you need for your particular message:"
msgstr ""

#: ./docs/8.x/mail.md:582
#: ./docs/9.x/mail.md:770
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n\n"
"        // Ship the order...\n\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:583
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Headers;\n\n"
"/**\n"
" * Get the message headers.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Headers\n"
" */\n"
"public function headers()\n"
"{\n"
"    return new Headers(\n"
"        messageId: 'custom-message-id@example.com',\n"
"        references: ['previous-message@example.com'],\n"
"        text: [\n"
"            'X-Custom-Header' => 'Custom Value',\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:600
#: ./docs/11.x/mail.md:653
#: ./docs/master/mail.md:614
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Headers;\n\n"
"/**\n"
" * Get the message headers.\n"
" */\n"
"public function headers(): Headers\n"
"{\n"
"    return new Headers(\n"
"        messageId: 'custom-message-id@example.com',\n"
"        references: ['previous-message@example.com'],\n"
"        text: [\n"
"            'X-Custom-Header' => 'Custom Value',\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:601
#: ./docs/10.x/mail.md:616
#: ./docs/11.x/mail.md:669
#: ./docs/master/mail.md:630
#~ msgctxt "P"
#~ msgid "<a name=\"tags-and-metadata\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:602
msgctxt "H3"
msgid "Tags & Metadata"
msgstr ""

#: ./docs/9.x/mail.md:604
#: ./docs/10.x/mail.md:619
#: ./docs/11.x/mail.md:672
#: ./docs/master/mail.md:633
msgctxt "P"
msgid "Some third-party email providers such as Mailgun and Postmark support message \"tags\" and \"metadata\", which may be used to group and track emails sent by your application. You may add tags and metadata to an email message via your `Envelope` definition:"
msgstr ""

#: ./docs/9.x/mail.md:606
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Envelope;\n\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        tags: ['shipment'],\n"
"        metadata: [\n"
"            'order_id' => $this->order->id,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:610
#: ./docs/9.x/mail.md:798
#: ./docs/10.x/mail.md:809
#: ./docs/11.x/mail.md:862
#: ./docs/master/mail.md:823
msgctxt "P"
msgid "You are not limited to just specifying the \"to\" recipients when sending a message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by chaining their respective methods together:"
msgstr ""

#: ./docs/8.x/mail.md:612
#: ./docs/9.x/mail.md:800
#: ./docs/10.x/mail.md:811
#: ./docs/11.x/mail.md:864
#: ./docs/master/mail.md:825
msgctxt "CODE"
msgid "Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->send(new OrderShipped($order));"
msgstr ""

#: ./docs/10.x/mail.md:617
#: ./docs/11.x/mail.md:670
#: ./docs/master/mail.md:631
msgctxt "H3"
msgid "Tags and Metadata"
msgstr ""

#: ./docs/8.x/mail.md:617
#: ./docs/9.x/mail.md:805
#: ./docs/10.x/mail.md:816
#: ./docs/11.x/mail.md:869
#: ./docs/master/mail.md:830
#~ msgctxt "P"
#~ msgid "<a name=\"looping-over-recipients\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:618
#: ./docs/9.x/mail.md:806
#: ./docs/10.x/mail.md:817
#: ./docs/11.x/mail.md:870
#: ./docs/master/mail.md:831
msgctxt "H4"
msgid "Looping Over Recipients"
msgstr ""

#: ./docs/8.x/mail.md:620
#: ./docs/9.x/mail.md:808
#: ./docs/10.x/mail.md:819
#: ./docs/11.x/mail.md:872
#: ./docs/master/mail.md:833
msgctxt "P"
msgid "Occasionally, you may need to send a mailable to a list of recipients by iterating over an array of recipients / email addresses. However, since the `to` method appends email addresses to the mailable's list of recipients, each iteration through the loop will send another email to every previous recipient. Therefore, you should always re-create the mailable instance for each recipient:"
msgstr ""

#: ./docs/10.x/mail.md:621
#: ./docs/11.x/mail.md:674
#: ./docs/master/mail.md:635
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Envelope;\n\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        tags: ['shipment'],\n"
"        metadata: [\n"
"            'order_id' => $this->order->id,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:622
#: ./docs/9.x/mail.md:810
#: ./docs/10.x/mail.md:821
#: ./docs/11.x/mail.md:874
#: ./docs/master/mail.md:835
msgctxt "CODE"
msgid "foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"    Mail::to($recipient)->send(new OrderShipped($order));\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:624
#: ./docs/10.x/mail.md:639
#: ./docs/master/mail.md:653
msgctxt "P"
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/en/latest/user_manual.html#tagging-1) and [metadata](https://documentation.mailgun.com/en/latest/user_manual.html#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr ""

#: ./docs/8.x/mail.md:626
#: ./docs/9.x/mail.md:814
#: ./docs/10.x/mail.md:825
#: ./docs/11.x/mail.md:878
#: ./docs/master/mail.md:839
#~ msgctxt "P"
#~ msgid "<a name=\"sending-mail-via-a-specific-mailer\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:626
#: ./docs/10.x/mail.md:641
#: ./docs/11.x/mail.md:694
#: ./docs/master/mail.md:655
msgctxt "P"
msgid "If your application is using Amazon SES to send emails, you should use the `metadata` method to attach [SES \"tags\"](https://docs.aws.amazon.com/ses/latest/APIReference/API_MessageTag.html) to the message."
msgstr ""

#: ./docs/8.x/mail.md:627
#: ./docs/9.x/mail.md:815
msgctxt "H4"
msgid "Sending Mail Via A Specific Mailer"
msgstr ""

#: ./docs/9.x/mail.md:628
#: ./docs/10.x/mail.md:643
#: ./docs/11.x/mail.md:696
#: ./docs/master/mail.md:657
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-symfony-message\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:629
#: ./docs/9.x/mail.md:817
#: ./docs/10.x/mail.md:828
#: ./docs/11.x/mail.md:881
#: ./docs/master/mail.md:842
msgctxt "P"
msgid "By default, Laravel will send email using the mailer configured as the `default` mailer in your application's `mail` configuration file. However, you may use the `mailer` method to send a message using a specific mailer configuration:"
msgstr ""

#: ./docs/9.x/mail.md:629
msgctxt "H3"
msgid "Customizing The Symfony Message"
msgstr ""

#: ./docs/8.x/mail.md:631
#: ./docs/9.x/mail.md:819
#: ./docs/10.x/mail.md:830
#: ./docs/11.x/mail.md:883
#: ./docs/master/mail.md:844
msgctxt "CODE"
msgid "Mail::mailer('postmark')\n"
"        ->to($request->user())\n"
"        ->send(new OrderShipped($order));"
msgstr ""

#: ./docs/9.x/mail.md:631
#: ./docs/10.x/mail.md:646
#: ./docs/11.x/mail.md:699
#: ./docs/master/mail.md:660
msgctxt "P"
msgid "Laravel's mail capabilities are powered by Symfony Mailer. Laravel allows you to register custom callbacks that will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is sent. To accomplish this, define a `using` parameter on your `Envelope` definition:"
msgstr ""

#: ./docs/9.x/mail.md:633
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Envelope;\n"
"use Symfony\\Component\\Mime\\Email;\n\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        using: [\n"
"            function (Email $message) {\n"
"                // ...\n"
"            },\n"
"        ]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:635
#: ./docs/9.x/mail.md:823
#: ./docs/10.x/mail.md:834
#: ./docs/11.x/mail.md:887
#: ./docs/master/mail.md:848
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-mail\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:636
#: ./docs/9.x/mail.md:824
#: ./docs/10.x/mail.md:835
#: ./docs/11.x/mail.md:888
#: ./docs/master/mail.md:849
msgctxt "H3"
msgid "Queueing Mail"
msgstr ""

#: ./docs/8.x/mail.md:638
#: ./docs/9.x/mail.md:826
#: ./docs/10.x/mail.md:837
#: ./docs/11.x/mail.md:890
#: ./docs/master/mail.md:851
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-a-mail-message\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:639
#: ./docs/9.x/mail.md:827
msgctxt "H4"
msgid "Queueing A Mail Message"
msgstr ""

#: ./docs/8.x/mail.md:641
#: ./docs/9.x/mail.md:829
#: ./docs/10.x/mail.md:840
#: ./docs/11.x/mail.md:893
#: ./docs/master/mail.md:854
msgctxt "P"
msgid "Since sending email messages can negatively impact the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in [unified queue API](/docs/{{version}}/queues). To queue a mail message, use the `queue` method on the `Mail` facade after specifying the message's recipients:"
msgstr ""

#: ./docs/8.x/mail.md:643
#: ./docs/9.x/mail.md:831
#: ./docs/10.x/mail.md:842
#: ./docs/11.x/mail.md:895
#: ./docs/master/mail.md:856
msgctxt "CODE"
msgid "Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue(new OrderShipped($order));"
msgstr ""

#: ./docs/10.x/mail.md:644
#: ./docs/11.x/mail.md:697
#: ./docs/master/mail.md:658
msgctxt "H3"
msgid "Customizing the Symfony Message"
msgstr ""

#: ./docs/10.x/mail.md:648
#: ./docs/11.x/mail.md:701
#: ./docs/master/mail.md:662
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Envelope;\n"
"use Symfony\\Component\\Mime\\Email;\n\n"
"/**\n"
" * Get the message envelope.\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        using: [\n"
"            function (Email $message) {\n"
"                // ...\n"
"            },\n"
"        ]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:648
#: ./docs/9.x/mail.md:836
#: ./docs/10.x/mail.md:847
#: ./docs/11.x/mail.md:900
#: ./docs/master/mail.md:861
msgctxt "P"
msgid "This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to [configure your queues](/docs/{{version}}/queues) before using this feature."
msgstr ""

#: ./docs/8.x/mail.md:650
#: ./docs/9.x/mail.md:838
#: ./docs/10.x/mail.md:849
#: ./docs/11.x/mail.md:902
#: ./docs/master/mail.md:863
#~ msgctxt "P"
#~ msgid "<a name=\"delayed-message-queueing\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:651
#: ./docs/9.x/mail.md:839
#: ./docs/10.x/mail.md:850
#: ./docs/11.x/mail.md:903
#: ./docs/master/mail.md:864
msgctxt "H4"
msgid "Delayed Message Queueing"
msgstr ""

#: ./docs/8.x/mail.md:653
#: ./docs/9.x/mail.md:841
#: ./docs/10.x/mail.md:852
#: ./docs/11.x/mail.md:905
#: ./docs/master/mail.md:866
msgctxt "P"
msgid "If you wish to delay the delivery of a queued email message, you may use the `later` method. As its first argument, the `later` method accepts a `DateTime` instance indicating when the message should be sent:"
msgstr ""

#: ./docs/8.x/mail.md:655
#: ./docs/9.x/mail.md:843
#: ./docs/10.x/mail.md:854
#: ./docs/11.x/mail.md:907
#: ./docs/master/mail.md:868
msgctxt "CODE"
msgid "Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->later(now()->addMinutes(10), new OrderShipped($order));"
msgstr ""

#: ./docs/8.x/mail.md:660
#: ./docs/9.x/mail.md:848
#: ./docs/10.x/mail.md:859
#: ./docs/11.x/mail.md:912
#: ./docs/master/mail.md:873
#~ msgctxt "P"
#~ msgid "<a name=\"pushing-to-specific-queues\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:661
#: ./docs/9.x/mail.md:849
msgctxt "H4"
msgid "Pushing To Specific Queues"
msgstr ""

#: ./docs/8.x/mail.md:663
#: ./docs/9.x/mail.md:851
#: ./docs/10.x/mail.md:862
#: ./docs/11.x/mail.md:915
#: ./docs/master/mail.md:876
msgctxt "P"
msgid "Since all mailable classes generated using the `make:mail` command make use of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and `onConnection` methods on any mailable class instance, allowing you to specify the connection and queue name for the message:"
msgstr ""

#: ./docs/8.x/mail.md:665
#: ./docs/9.x/mail.md:853
#: ./docs/10.x/mail.md:864
#: ./docs/11.x/mail.md:917
#: ./docs/master/mail.md:878
msgctxt "CODE"
msgid "$message = (new OrderShipped($order))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('emails');\n\n"
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue($message);"
msgstr ""

#: ./docs/9.x/mail.md:667
#: ./docs/10.x/mail.md:680
#: ./docs/11.x/mail.md:733
#: ./docs/master/mail.md:694
msgctxt "P"
msgid "Then, when configuring the mailable `Content` definition within its `content` method, use the `markdown` parameter instead of the `view` parameter:"
msgstr ""

#: ./docs/9.x/mail.md:669
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Content;\n\n"
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        markdown: 'emails.orders.shipped',\n"
"        with: [\n"
"            'url' => $this->orderUrl,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:674
#: ./docs/9.x/mail.md:862
#: ./docs/10.x/mail.md:873
#: ./docs/11.x/mail.md:926
#: ./docs/master/mail.md:887
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-by-default\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:675
#: ./docs/9.x/mail.md:863
msgctxt "H4"
msgid "Queueing By Default"
msgstr ""

#: ./docs/10.x/mail.md:676
#: ./docs/11.x/mail.md:729
#: ./docs/master/mail.md:690
msgctxt "CODE: shell"
msgid "php artisan make:mail OrderShipped --markdown=mail.orders.shipped"
msgstr ""

#: ./docs/8.x/mail.md:677
#: ./docs/9.x/mail.md:865
#: ./docs/10.x/mail.md:876
#: ./docs/11.x/mail.md:929
#: ./docs/master/mail.md:890
msgctxt "P"
msgid "If you have mailable classes that you want to always be queued, you may implement the `ShouldQueue` contract on the class. Now, even if you call the `send` method when mailing, the mailable will still be queued since it implements the contract:"
msgstr ""

#: ./docs/8.x/mail.md:679
#: ./docs/9.x/mail.md:867
msgctxt "CODE"
msgid "use Illuminate\\Contracts\\Queue\\ShouldQueue;\n\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:682
#: ./docs/11.x/mail.md:735
#: ./docs/master/mail.md:696
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Content;\n\n"
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        markdown: 'mail.orders.shipped',\n"
"        with: [\n"
"            'url' => $this->orderUrl,\n"
"        ],\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:686
#: ./docs/9.x/mail.md:874
#: ./docs/10.x/mail.md:885
#: ./docs/11.x/mail.md:938
#: ./docs/master/mail.md:899
#~ msgctxt "P"
#~ msgid "<a name=\"queued-mailables-and-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:687
#: ./docs/9.x/mail.md:875
msgctxt "H4"
msgid "Queued Mailables & Database Transactions"
msgstr ""

#: ./docs/8.x/mail.md:689
#: ./docs/9.x/mail.md:877
#: ./docs/10.x/mail.md:888
#: ./docs/11.x/mail.md:941
#: ./docs/master/mail.md:902
msgctxt "P"
msgid "When queued mailables are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your mailable depends on these models, unexpected errors can occur when the job that sends the queued mailable is processed."
msgstr ""

#: ./docs/8.x/mail.md:691
#: ./docs/9.x/mail.md:879
#: ./docs/10.x/mail.md:890
#: ./docs/11.x/mail.md:943
#: ./docs/master/mail.md:904
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued mailable should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the mail message:"
msgstr ""

#: ./docs/9.x/mail.md:691
#: ./docs/10.x/mail.md:702
#: ./docs/11.x/mail.md:755
#: ./docs/master/mail.md:716
msgctxt "CODE: blade"
msgid "<x-mail::message>\n"
"# Order Shipped\n\n"
"Your order has been shipped!\n\n"
"<x-mail::button :url=\"$url\">\n"
"View Order\n"
"</x-mail::button>\n\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"</x-mail::message>"
msgstr ""

#: ./docs/11.x/mail.md:692
msgctxt "P"
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#tagging) and [metadata](https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr ""

#: ./docs/8.x/mail.md:693
#: ./docs/9.x/mail.md:881
#: ./docs/10.x/mail.md:892
#: ./docs/11.x/mail.md:945
#: ./docs/master/mail.md:906
msgctxt "CODE"
msgid "Mail::to($request->user())->send(\n"
"    (new OrderShipped($order))->afterCommit()\n"
");"
msgstr ""

#: ./docs/8.x/mail.md:697
#: ./docs/9.x/mail.md:885
#: ./docs/10.x/mail.md:896
#: ./docs/11.x/mail.md:949
#: ./docs/master/mail.md:910
msgctxt "P"
msgid "Alternatively, you may call the `afterCommit` method from your mailable's constructor:"
msgstr ""

#: ./docs/8.x/mail.md:699
#: ./docs/9.x/mail.md:887
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:714
#: ./docs/10.x/mail.md:725
#: ./docs/11.x/mail.md:778
#: ./docs/master/mail.md:739
msgctxt "CODE: blade"
msgid "<x-mail::button :url=\"$url\" color=\"success\">\n"
"View Order\n"
"</x-mail::button>"
msgstr ""

#: ./docs/8.x/mail.md:723
#: ./docs/9.x/mail.md:912
#: ./docs/10.x/mail.md:921
#: ./docs/11.x/mail.md:974
#: ./docs/master/mail.md:935
msgctxt "P"
msgid "To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: ./docs/8.x/mail.md:725
#: ./docs/9.x/mail.md:914
#: ./docs/10.x/mail.md:923
#: ./docs/11.x/mail.md:976
#: ./docs/master/mail.md:937
#~ msgctxt "P"
#~ msgid "<a name=\"rendering-mailables\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:725
#: ./docs/10.x/mail.md:736
#: ./docs/11.x/mail.md:789
#: ./docs/master/mail.md:750
msgctxt "CODE: blade"
msgid "<x-mail::panel>\n"
"This is the panel content.\n"
"</x-mail::panel>"
msgstr ""

#: ./docs/8.x/mail.md:726
#: ./docs/9.x/mail.md:915
#: ./docs/10.x/mail.md:924
#: ./docs/11.x/mail.md:977
#: ./docs/master/mail.md:938
msgctxt "H2"
msgid "Rendering Mailables"
msgstr ""

#: ./docs/8.x/mail.md:728
#: ./docs/9.x/mail.md:917
#: ./docs/10.x/mail.md:926
#: ./docs/11.x/mail.md:979
#: ./docs/master/mail.md:940
msgctxt "P"
msgid "Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the `render` method of the mailable. This method will return the evaluated HTML content of the mailable as a string:"
msgstr ""

#: ./docs/8.x/mail.md:730
#: ./docs/9.x/mail.md:919
#: ./docs/10.x/mail.md:928
#: ./docs/11.x/mail.md:981
#: ./docs/master/mail.md:942
msgctxt "CODE"
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\Invoice;\n\n"
"$invoice = Invoice::find(1);\n\n"
"return (new InvoicePaid($invoice))->render();"
msgstr ""

#: ./docs/9.x/mail.md:736
#: ./docs/10.x/mail.md:747
#: ./docs/master/mail.md:761
msgctxt "CODE: blade"
msgid "<x-mail::table>\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"</x-mail::table>"
msgstr ""

#: ./docs/8.x/mail.md:737
#: ./docs/9.x/mail.md:926
#: ./docs/10.x/mail.md:935
#: ./docs/11.x/mail.md:988
#: ./docs/master/mail.md:949
#~ msgctxt "P"
#~ msgid "<a name=\"previewing-mailables-in-the-browser\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:738
#: ./docs/9.x/mail.md:927
msgctxt "H3"
msgid "Previewing Mailables In The Browser"
msgstr ""

#: ./docs/8.x/mail.md:740
#: ./docs/9.x/mail.md:929
#: ./docs/10.x/mail.md:938
#: ./docs/11.x/mail.md:991
#: ./docs/master/mail.md:952
msgctxt "P"
msgid "When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#: ./docs/8.x/mail.md:742
#: ./docs/9.x/mail.md:931
#: ./docs/10.x/mail.md:940
#: ./docs/11.x/mail.md:993
#: ./docs/master/mail.md:954
msgctxt "CODE"
msgid "Route::get('/mailable', function () {\n"
"    $invoice = App\\Models\\Invoice::find(1);\n\n"
"    return new App\\Mail\\InvoicePaid($invoice);\n"
"});"
msgstr ""

#: ./docs/8.x/mail.md:748
msgctxt "P"
msgid "[Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [MailHog](https://github.com/mailhog/MailHog) or [HELO](https://usehelo.com)."
msgstr ""

#: ./docs/8.x/mail.md:750
#: ./docs/9.x/mail.md:940
#: ./docs/10.x/mail.md:946
#: ./docs/11.x/mail.md:999
#: ./docs/master/mail.md:960
#~ msgctxt "P"
#~ msgid "<a name=\"localizing-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:751
#: ./docs/9.x/mail.md:941
#: ./docs/10.x/mail.md:947
#: ./docs/11.x/mail.md:1000
#: ./docs/master/mail.md:961
msgctxt "H2"
msgid "Localizing Mailables"
msgstr ""

#: ./docs/8.x/mail.md:753
#: ./docs/9.x/mail.md:943
#: ./docs/10.x/mail.md:949
#: ./docs/11.x/mail.md:1002
#: ./docs/master/mail.md:963
msgctxt "P"
msgid "Laravel allows you to send mailables in a locale other than the request's current locale, and will even remember this locale if the mail is queued."
msgstr ""

#: ./docs/8.x/mail.md:755
#: ./docs/9.x/mail.md:945
#: ./docs/10.x/mail.md:951
#: ./docs/11.x/mail.md:1004
#: ./docs/master/mail.md:965
msgctxt "P"
msgid "To accomplish this, the `Mail` facade offers a `locale` method to set the desired language. The application will change into this locale when the mailable's template is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#: ./docs/10.x/mail.md:757
#: ./docs/11.x/mail.md:810
#: ./docs/master/mail.md:771
msgctxt "H3"
msgid "Customizing the Components"
msgstr ""

#: ./docs/8.x/mail.md:757
#: ./docs/9.x/mail.md:947
#: ./docs/10.x/mail.md:953
#: ./docs/11.x/mail.md:1006
#: ./docs/master/mail.md:967
msgctxt "CODE"
msgid "Mail::to($request->user())->locale('es')->send(\n"
"    new OrderShipped($order)\n"
");"
msgstr ""

#: ./docs/8.x/mail.md:761
#: ./docs/9.x/mail.md:951
#: ./docs/10.x/mail.md:957
#: ./docs/11.x/mail.md:1010
#: ./docs/master/mail.md:971
#~ msgctxt "P"
#~ msgid "<a name=\"user-preferred-locales\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:762
#: ./docs/9.x/mail.md:952
#: ./docs/10.x/mail.md:958
#: ./docs/11.x/mail.md:1011
#: ./docs/master/mail.md:972
msgctxt "H3"
msgid "User Preferred Locales"
msgstr ""

#: ./docs/8.x/mail.md:764
#: ./docs/9.x/mail.md:954
#: ./docs/10.x/mail.md:960
#: ./docs/11.x/mail.md:1013
#: ./docs/master/mail.md:974
msgctxt "P"
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:"
msgstr ""

#: ./docs/8.x/mail.md:766
#: ./docs/9.x/mail.md:956
msgctxt "CODE"
msgid "use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:768
#: ./docs/11.x/mail.md:821
#: ./docs/master/mail.md:782
msgctxt "H4"
msgid "Customizing the CSS"
msgstr ""

#: ./docs/10.x/mail.md:781
#: ./docs/11.x/mail.md:834
#: ./docs/master/mail.md:795
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n\n"
"        // Ship the order...\n\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n\n"
"        return redirect('/orders');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/mail.md:781
#: ./docs/9.x/mail.md:971
#: ./docs/10.x/mail.md:975
#: ./docs/11.x/mail.md:1028
#: ./docs/master/mail.md:989
msgctxt "P"
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#: ./docs/8.x/mail.md:783
#: ./docs/9.x/mail.md:973
#: ./docs/10.x/mail.md:977
#: ./docs/11.x/mail.md:1030
#: ./docs/master/mail.md:991
msgctxt "CODE"
msgid "Mail::to($request->user())->send(new OrderShipped($order));"
msgstr ""

#: ./docs/8.x/mail.md:785
#: ./docs/9.x/mail.md:975
#: ./docs/10.x/mail.md:979
#: ./docs/11.x/mail.md:1032
#: ./docs/master/mail.md:993
#~ msgctxt "P"
#~ msgid "<a name=\"testing-mailables\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:786
#: ./docs/9.x/mail.md:976
msgctxt "H2"
msgid "Testing Mailables"
msgstr ""

#: ./docs/8.x/mail.md:788
msgctxt "P"
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr ""

#: ./docs/8.x/mail.md:790
#: ./docs/9.x/mail.md:980
#: ./docs/10.x/mail.md:987
#: ./docs/11.x/mail.md:1040
#: ./docs/master/mail.md:1001
msgctxt "P"
msgid "As you might expect, the \"HTML\" assertions assert that the HTML version of your mailable contains a given string, while the \"text\" assertions assert that the plain-text version of your mailable contains a given string:"
msgstr ""

#: ./docs/8.x/mail.md:792
msgctxt "CODE"
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n\n"
"    $mailable = new InvoicePaid($user);\n\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInText('Invoice Paid');\n"
"}"
msgstr ""

#: ./docs/11.x/mail.md:800
msgctxt "CODE: blade"
msgid "<x-mail::table>\n"
"| Laravel       | Table         | Example       |\n"
"| ------------- | :-----------: | ------------: |\n"
"| Col 2 is      | Centered      | $10           |\n"
"| Col 3 is      | Right-Aligned | $20           |\n"
"</x-mail::table>"
msgstr ""

#: ./docs/8.x/mail.md:808
#: ./docs/9.x/mail.md:1014
#: ./docs/10.x/mail.md:1021
#: ./docs/11.x/mail.md:1109
#: ./docs/master/mail.md:1070
#~ msgctxt "P"
#~ msgid "<a name=\"testing-mailable-sending\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:809
#: ./docs/9.x/mail.md:1015
#: ./docs/10.x/mail.md:1022
#: ./docs/11.x/mail.md:1110
#: ./docs/master/mail.md:1071
msgctxt "H4"
msgid "Testing Mailable Sending"
msgstr ""

#: ./docs/8.x/mail.md:811
#: ./docs/9.x/mail.md:1017
msgctxt "P"
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test that mailables were sent, check out our documentation on the [Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr ""

#: ./docs/8.x/mail.md:813
#: ./docs/9.x/mail.md:1019
#: ./docs/10.x/mail.md:1117
#: ./docs/11.x/mail.md:1247
#: ./docs/master/mail.md:1196
#~ msgctxt "P"
#~ msgid "<a name=\"mail-and-local-development\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:814
#: ./docs/9.x/mail.md:1020
msgctxt "H2"
msgid "Mail & Local Development"
msgstr ""

#: ./docs/8.x/mail.md:816
#: ./docs/9.x/mail.md:1022
#: ./docs/10.x/mail.md:1120
#: ./docs/11.x/mail.md:1250
#: ./docs/master/mail.md:1199
msgctxt "P"
msgid "When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to \"disable\" the actual sending of emails during local development."
msgstr ""

#: ./docs/8.x/mail.md:818
#: ./docs/9.x/mail.md:1024
#: ./docs/10.x/mail.md:1122
#: ./docs/11.x/mail.md:1252
#: ./docs/master/mail.md:1201
#~ msgctxt "P"
#~ msgid "<a name=\"log-driver\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:819
#: ./docs/9.x/mail.md:1025
#: ./docs/10.x/mail.md:1123
#: ./docs/11.x/mail.md:1253
#: ./docs/master/mail.md:1202
msgctxt "H4"
msgid "Log Driver"
msgstr ""

#: ./docs/8.x/mail.md:821
#: ./docs/9.x/mail.md:1027
#: ./docs/10.x/mail.md:1125
#: ./docs/11.x/mail.md:1255
#: ./docs/master/mail.md:1204
msgctxt "P"
msgid "Instead of sending your emails, the `log` mail driver will write all email messages to your log files for inspection. Typically, this driver would only be used during local development. For more information on configuring your application per environment, check out the [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr ""

#: ./docs/8.x/mail.md:823
#: ./docs/9.x/mail.md:1029
#: ./docs/10.x/mail.md:1127
#: ./docs/11.x/mail.md:1257
#: ./docs/master/mail.md:1206
#~ msgctxt "P"
#~ msgid "<a name=\"mailtrap\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:824
msgctxt "H4"
msgid "HELO / Mailtrap / MailHog"
msgstr ""

#: ./docs/10.x/mail.md:826
#: ./docs/11.x/mail.md:879
#: ./docs/master/mail.md:840
msgctxt "H4"
msgid "Sending Mail via a Specific Mailer"
msgstr ""

#: ./docs/8.x/mail.md:826
#: ./docs/9.x/mail.md:1032
#: ./docs/10.x/mail.md:1130
#: ./docs/11.x/mail.md:1260
#: ./docs/master/mail.md:1209
msgctxt "P"
msgid "Alternatively, you may use a service like [HELO](https://usehelo.com) or [Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email messages to a \"dummy\" mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap's message viewer."
msgstr ""

#: ./docs/8.x/mail.md:828
msgctxt "P"
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail is running, you may access the MailHog interface at: `http://localhost:8025`."
msgstr ""

#: ./docs/8.x/mail.md:830
#: ./docs/9.x/mail.md:1036
#: ./docs/10.x/mail.md:1134
#: ./docs/11.x/mail.md:1264
#: ./docs/master/mail.md:1213
#~ msgctxt "P"
#~ msgid "<a name=\"using-a-global-to-address\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:831
#: ./docs/9.x/mail.md:1037
msgctxt "H4"
msgid "Using A Global `to` Address"
msgstr ""

#: ./docs/8.x/mail.md:833
#: ./docs/9.x/mail.md:1039
#: ./docs/10.x/mail.md:1137
#: ./docs/11.x/mail.md:1267
#: ./docs/master/mail.md:1216
msgctxt "P"
msgid "Finally, you may specify a global \"to\" address by invoking the `alwaysTo` method offered by the `Mail` facade. Typically, this method should be called from the `boot` method of one of your application's service providers:"
msgstr ""

#: ./docs/8.x/mail.md:835
#: ./docs/9.x/mail.md:1041
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Mail;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:838
#: ./docs/11.x/mail.md:891
#: ./docs/master/mail.md:852
msgctxt "H4"
msgid "Queueing a Mail Message"
msgstr ""

#: ./docs/8.x/mail.md:849
#: ./docs/9.x/mail.md:1055
#: ./docs/10.x/mail.md:1151
#: ./docs/11.x/mail.md:1281
#: ./docs/master/mail.md:1230
#~ msgctxt "P"
#~ msgid "<a name=\"events\"></a>"
#~ msgstr ""

#: ./docs/8.x/mail.md:850
#: ./docs/9.x/mail.md:1056
#: ./docs/10.x/mail.md:1152
#: ./docs/11.x/mail.md:1282
#: ./docs/master/mail.md:1231
msgctxt "H2"
msgid "Events"
msgstr ""

#: ./docs/8.x/mail.md:852
#: ./docs/9.x/mail.md:1058
#: ./docs/10.x/mail.md:1154
msgctxt "P"
msgid "Laravel fires two events during the process of sending mail messages. The `MessageSending` event is fired prior to a message being sent, while the `MessageSent` event is fired after a message has been sent. Remember, these events are fired when the mail is being *sent*, not when it is queued. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#: ./docs/8.x/mail.md:854
msgctxt "CODE"
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"        'App\\Listeners\\LogSendingMessage',\n"
"    ],\n"
"    'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"        'App\\Listeners\\LogSentMessage',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/mail.md:860
#: ./docs/11.x/mail.md:913
#: ./docs/master/mail.md:874
msgctxt "H4"
msgid "Pushing to Specific Queues"
msgstr ""

#: ./docs/10.x/mail.md:874
#: ./docs/11.x/mail.md:927
#: ./docs/master/mail.md:888
msgctxt "H4"
msgid "Queueing by Default"
msgstr ""

#: ./docs/10.x/mail.md:878
#: ./docs/11.x/mail.md:931
#: ./docs/master/mail.md:892
msgctxt "CODE"
msgid "use Illuminate\\Contracts\\Queue\\ShouldQueue;\n\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:886
#: ./docs/11.x/mail.md:939
#: ./docs/master/mail.md:900
msgctxt "H4"
msgid "Queued Mailables and Database Transactions"
msgstr ""

#: ./docs/10.x/mail.md:898
#: ./docs/11.x/mail.md:951
#: ./docs/master/mail.md:912
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Mail;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:936
#: ./docs/11.x/mail.md:989
#: ./docs/master/mail.md:950
msgctxt "H3"
msgid "Previewing Mailables in the Browser"
msgstr ""

#: ./docs/9.x/mail.md:938
msgctxt "P"
msgid "[Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [Mailpit](https://github.com/axllent/mailpit) or [HELO](https://usehelo.com)."
msgstr ""

#: ./docs/10.x/mail.md:962
#: ./docs/11.x/mail.md:1015
#: ./docs/master/mail.md:976
msgctxt "CODE"
msgid "use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     */\n"
"    public function preferredLocale(): string\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:978
#: ./docs/10.x/mail.md:985
#: ./docs/11.x/mail.md:1038
#: ./docs/master/mail.md:999
msgctxt "P"
msgid "Laravel provides a variety of methods for inspecting your mailable's structure. In addition, Laravel provides several convenient methods for testing that your mailable contains the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInOrderInHtml`, `assertSeeInText`, `assertDontSeeInText`, `assertSeeInOrderInText`, `assertHasAttachment`, `assertHasAttachedData`, `assertHasAttachmentFromStorage`, and `assertHasAttachmentFromStorageDisk`."
msgstr ""

#: ./docs/10.x/mail.md:980
#: ./docs/11.x/mail.md:1033
#: ./docs/master/mail.md:994
msgctxt "H2"
msgid "Testing"
msgstr ""

#: ./docs/10.x/mail.md:982
#: ./docs/11.x/mail.md:1035
#: ./docs/master/mail.md:996
#~ msgctxt "P"
#~ msgid "<a name=\"testing-mailable-content\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:982
msgctxt "CODE"
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n\n"
"    $mailable = new InvoicePaid($user);\n\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:983
#: ./docs/11.x/mail.md:1036
#: ./docs/master/mail.md:997
msgctxt "H3"
msgid "Testing Mailable Content"
msgstr ""

#: ./docs/10.x/mail.md:989
#: ./docs/11.x/mail.md:1075
#: ./docs/master/mail.md:1036
msgctxt "CODE"
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n\n"
"public function test_mailable_content(): void\n"
"{\n"
"    $user = User::factory()->create();\n\n"
"    $mailable = new InvoicePaid($user);\n\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:1024
#: ./docs/11.x/mail.md:1112
#: ./docs/master/mail.md:1073
msgctxt "P"
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. Typically, the content of mailables is not relevant to the code you are testing, and it is sufficient to simply assert that Laravel was instructed to send a given mailable."
msgstr ""

#: ./docs/10.x/mail.md:1026
#: ./docs/11.x/mail.md:1114
#: ./docs/master/mail.md:1075
msgctxt "P"
msgid "You may use the `Mail` facade's `fake` method to prevent mail from being sent. After calling the `Mail` facade's `fake` method, you may then assert that mailables were instructed to be sent to users and even inspect the data the mailables received:"
msgstr ""

#: ./docs/10.x/mail.md:1028
#: ./docs/master/mail.md:1105
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Mail::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no mailables were sent...\n"
"        Mail::assertNothingSent();\n\n"
"        // Assert that a mailable was sent...\n"
"        Mail::assertSent(OrderShipped::class);\n\n"
"        // Assert a mailable was sent twice...\n"
"        Mail::assertSent(OrderShipped::class, 2);\n\n"
"        // Assert a mailable was not sent...\n"
"        Mail::assertNotSent(AnotherMailable::class);\n\n"
"        // Assert 3 total mailables were sent...\n"
"        Mail::assertSentCount(3);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1030
#: ./docs/10.x/mail.md:1128
#: ./docs/11.x/mail.md:1258
#: ./docs/master/mail.md:1207
msgctxt "H4"
msgid "HELO / Mailtrap / Mailpit"
msgstr ""

#: ./docs/9.x/mail.md:1034
#: ./docs/10.x/mail.md:1132
#: ./docs/11.x/mail.md:1262
#: ./docs/master/mail.md:1211
msgctxt "P"
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [Mailpit](https://github.com/axllent/mailpit). When Sail is running, you may access the Mailpit interface at: `http://localhost:8025`."
msgstr ""

#: ./docs/11.x/mail.md:1042
#: ./docs/master/mail.md:1003
msgctxt "CODE: php tab=Pest"
msgid "use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n\n"
"test('mailable content', function () {\n"
"    $user = User::factory()->create();\n\n"
"    $mailable = new InvoicePaid($user);\n\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"});"
msgstr ""

#: ./docs/9.x/mail.md:1060
#: ./docs/10.x/mail.md:1156
msgctxt "CODE"
msgid "use App\\Listeners\\LogSendingMessage;\n"
"use App\\Listeners\\LogSentMessage;\n"
"use Illuminate\\Mail\\Events\\MessageSending;\n"
"use Illuminate\\Mail\\Events\\MessageSent;\n\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    MessageSending::class => [\n"
"        LogSendingMessage::class,\n"
"    ],\n\n"
"    MessageSent::class => [\n"
"        LogSentMessage::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/mail.md:1061
#: ./docs/11.x/mail.md:1191
#: ./docs/master/mail.md:1140
msgctxt "P"
msgid "If you are queueing mailables for delivery in the background, you should use the `assertQueued` method instead of `assertSent`:"
msgstr ""

#: ./docs/10.x/mail.md:1063
#: ./docs/11.x/mail.md:1193
#: ./docs/master/mail.md:1142
msgctxt "CODE"
msgid "Mail::assertQueued(OrderShipped::class);\n"
"Mail::assertNotQueued(OrderShipped::class);\n"
"Mail::assertNothingQueued();\n"
"Mail::assertQueuedCount(3);"
msgstr ""

#: ./docs/10.x/mail.md:1068
#: ./docs/11.x/mail.md:1198
#: ./docs/master/mail.md:1147
msgctxt "P"
msgid "You may pass a closure to the `assertSent`, `assertNotSent`, `assertQueued`, or `assertNotQueued` methods in order to assert that a mailable was sent that passes a given \"truth test\". If at least one mailable was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#: ./docs/10.x/mail.md:1070
#: ./docs/11.x/mail.md:1200
#: ./docs/master/mail.md:1149
msgctxt "CODE"
msgid "Mail::assertSent(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});"
msgstr ""

#: ./docs/10.x/mail.md:1074
#: ./docs/11.x/mail.md:1204
#: ./docs/master/mail.md:1153
msgctxt "P"
msgid "When calling the `Mail` facade's assertion methods, the mailable instance accepted by the provided closure exposes helpful methods for examining the mailable:"
msgstr ""

#: ./docs/10.x/mail.md:1076
#: ./docs/11.x/mail.md:1206
#: ./docs/master/mail.md:1155
msgctxt "CODE"
msgid "Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($user) {\n"
"    return $mail->hasTo($user->email) &&\n"
"           $mail->hasCc('...') &&\n"
"           $mail->hasBcc('...') &&\n"
"           $mail->hasReplyTo('...') &&\n"
"           $mail->hasFrom('...') &&\n"
"           $mail->hasSubject('...');\n"
"});"
msgstr ""

#: ./docs/master/mail.md:1077
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"test('orders can be shipped', function () {\n"
"    Mail::fake();\n\n"
"    // Perform order shipping...\n\n"
"    // Assert that no mailables were sent...\n"
"    Mail::assertNothingSent();\n\n"
"    // Assert that a mailable was sent...\n"
"    Mail::assertSent(OrderShipped::class);\n\n"
"    // Assert a mailable was sent twice...\n"
"    Mail::assertSent(OrderShipped::class, 2);\n\n"
"    // Assert a mailable was not sent...\n"
"    Mail::assertNotSent(AnotherMailable::class);\n\n"
"    // Assert 3 total mailables were sent...\n"
"    Mail::assertSentCount(3);\n"
"});"
msgstr ""

#: ./docs/9.x/mail.md:1080
#: ./docs/10.x/mail.md:1176
#: ./docs/11.x/mail.md:1300
#: ./docs/master/mail.md:1249
#~ msgctxt "P"
#~ msgid "<a name=\"custom-transports\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:1081
#: ./docs/10.x/mail.md:1177
#: ./docs/11.x/mail.md:1301
#: ./docs/master/mail.md:1250
msgctxt "H2"
msgid "Custom Transports"
msgstr ""

#: ./docs/9.x/mail.md:1083
#: ./docs/10.x/mail.md:1179
#: ./docs/11.x/mail.md:1303
#: ./docs/master/mail.md:1252
msgctxt "P"
msgid "Laravel includes a variety of mail transports; however, you may wish to write your own transports to deliver email via other services that Laravel does not support out of the box. To get started, define a class that extends the `Symfony\\Component\\Mailer\\Transport\\AbstractTransport` class. Then, implement the `doSend` and `__toString()` methods on your transport:"
msgstr ""

#: ./docs/10.x/mail.md:1085
#: ./docs/11.x/mail.md:1215
#: ./docs/master/mail.md:1164
msgctxt "P"
msgid "The mailable instance also includes several helpful methods for examining the attachments on a mailable:"
msgstr ""

#: ./docs/9.x/mail.md:1085
msgctxt "CODE"
msgid "use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * The Mailchimp API client.\n"
"     *\n"
"     * @var \\MailchimpTransactional\\ApiClient\n"
"     */\n"
"    protected $client;\n\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     *\n"
"     * @param  \\MailchimpTransactional\\ApiClient  $client\n"
"     * @return void\n"
"     */\n"
"    public function __construct(ApiClient $client)\n"
"    {\n"
"        parent::__construct();\n"
"        \n"
"        $this->client = $client;\n"
"    }\n\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function ($email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:1087
#: ./docs/11.x/mail.md:1217
#: ./docs/master/mail.md:1166
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Mailables\\Attachment;\n\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf')\n"
"    );\n"
"});\n\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"    );\n"
"});\n\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($pdfData) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromData(fn () => $pdfData, 'name.pdf')\n"
"    );\n"
"});"
msgstr ""

#: ./docs/10.x/mail.md:1109
#: ./docs/11.x/mail.md:1239
#: ./docs/master/mail.md:1188
msgctxt "P"
msgid "You may have noticed that there are two methods for asserting that mail was not sent: `assertNotSent` and `assertNotQueued`. Sometimes you may wish to assert that no mail was sent **or** queued. To accomplish this, you may use the `assertNothingOutgoing` and `assertNotOutgoing` methods:"
msgstr ""

#: ./docs/10.x/mail.md:1111
#: ./docs/11.x/mail.md:1241
#: ./docs/master/mail.md:1190
msgctxt "CODE"
msgid "Mail::assertNothingOutgoing();\n\n"
"Mail::assertNotOutgoing(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});"
msgstr ""

#: ./docs/11.x/mail.md:1116
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"test('orders can be shipped', function () {\n"
"    Mail::fake();\n\n"
"    // Perform order shipping...\n\n"
"    // Assert that no mailables were sent...\n"
"    Mail::assertNothingSent();\n\n"
"    // Assert that a mailable was sent...\n"
"    Mail::assertSent(OrderShipped::class);\n\n"
"    // Assert a mailable was sent twice...\n"
"    Mail::assertSent(OrderShipped::class, 2);\n\n"
"    // Assert a mailable was sent to an email address...\n"
"    Mail::assertSent(OrderShipped::class, 'example@laravel.com');\n\n"
"    // Assert a mailable was sent to multiple email addresses...\n"
"    Mail::assertSent(OrderShipped::class, ['example@laravel.com', '...']);\n\n"
"    // Assert a mailable was not sent...\n"
"    Mail::assertNotSent(AnotherMailable::class);\n\n"
"    // Assert 3 total mailables were sent...\n"
"    Mail::assertSentCount(3);\n"
"});"
msgstr ""

#: ./docs/10.x/mail.md:1118
#: ./docs/11.x/mail.md:1248
#: ./docs/master/mail.md:1197
msgctxt "H2"
msgid "Mail and Local Development"
msgstr ""

#: ./docs/10.x/mail.md:1135
#: ./docs/11.x/mail.md:1265
#: ./docs/master/mail.md:1214
msgctxt "H4"
msgid "Using a Global `to` Address"
msgstr ""

#: ./docs/10.x/mail.md:1139
#: ./docs/11.x/mail.md:1269
#: ./docs/master/mail.md:1218
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Mail;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1140
#: ./docs/10.x/mail.md:1224
#: ./docs/11.x/mail.md:1348
#: ./docs/master/mail.md:1297
msgctxt "P"
msgid "Once you've defined your custom transport, you may register it via the `extend` method provided by the `Mail` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider` service provider. A `$config` argument will be passed to the closure provided to the `extend` method. This argument will contain the configuration array defined for the mailer in the application's `config/mail.php` configuration file:"
msgstr ""

#: ./docs/9.x/mail.md:1142
msgctxt "CODE"
msgid "use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(/* ... */);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/mail.md:1150
msgctxt "CODE: php tab=PHPUnit"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Mail::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no mailables were sent...\n"
"        Mail::assertNothingSent();\n\n"
"        // Assert that a mailable was sent...\n"
"        Mail::assertSent(OrderShipped::class);\n\n"
"        // Assert a mailable was sent twice...\n"
"        Mail::assertSent(OrderShipped::class, 2);\n\n"
"        // Assert a mailable was sent to an email address...\n"
"        Mail::assertSent(OrderShipped::class, 'example@laravel.com');\n\n"
"        // Assert a mailable was sent to multiple email addresses...\n"
"        Mail::assertSent(OrderShipped::class, ['example@laravel.com', '...']);\n\n"
"        // Assert a mailable was not sent...\n"
"        Mail::assertNotSent(AnotherMailable::class);\n\n"
"        // Assert 3 total mailables were sent...\n"
"        Mail::assertSentCount(3);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1157
#: ./docs/10.x/mail.md:1239
#: ./docs/11.x/mail.md:1363
#: ./docs/master/mail.md:1312
msgctxt "P"
msgid "Once your custom transport has been defined and registered, you may create a mailer definition within your application's `config/mail.php` configuration file that utilizes the new transport:"
msgstr ""

#: ./docs/9.x/mail.md:1159
#: ./docs/10.x/mail.md:1241
#: ./docs/11.x/mail.md:1365
#: ./docs/master/mail.md:1314
msgctxt "CODE"
msgid "'mailchimp' => [\n"
"    'transport' => 'mailchimp',\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:1164
#: ./docs/10.x/mail.md:1246
#: ./docs/11.x/mail.md:1370
#: ./docs/master/mail.md:1319
#~ msgctxt "P"
#~ msgid "<a name=\"additional-symfony-transports\"></a>"
#~ msgstr ""

#: ./docs/9.x/mail.md:1165
#: ./docs/10.x/mail.md:1247
#: ./docs/11.x/mail.md:1371
#: ./docs/master/mail.md:1320
msgctxt "H3"
msgid "Additional Symfony Transports"
msgstr ""

#: ./docs/9.x/mail.md:1167
msgctxt "P"
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Sendinblue\" Symfony mailer:"
msgstr ""

#: ./docs/9.x/mail.md:1169
msgctxt "CODE: none"
msgid "composer require symfony/sendinblue-mailer symfony/http-client"
msgstr ""

#: ./docs/9.x/mail.md:1173
msgctxt "P"
msgid "Once the Sendinblue mailer package has been installed, you may add an entry for your Sendinblue API credentials to your application's `services` configuration file:"
msgstr ""

#: ./docs/9.x/mail.md:1175
msgctxt "CODE"
msgid "'sendinblue' => [\n"
"    'key' => 'your-api-key',\n"
"],"
msgstr ""

#: ./docs/9.x/mail.md:1179
#: ./docs/10.x/mail.md:1261
#: ./docs/11.x/mail.md:1385
#: ./docs/master/mail.md:1334
msgctxt "P"
msgid "Next, you may use the `Mail` facade's `extend` method to register the transport with Laravel. Typically, this should be done within the `boot` method of a service provider:"
msgstr ""

#: ./docs/10.x/mail.md:1181
#: ./docs/11.x/mail.md:1305
#: ./docs/master/mail.md:1254
msgctxt "CODE"
msgid "use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\Address;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected ApiClient $client,\n"
"    ) {\n"
"        parent::__construct();\n"
"    }\n\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function (Address $email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1181
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Sendinblue\\Transport\\SendinblueTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('sendinblue', function () {\n"
"        return (new SendinblueTransportFactory)->create(\n"
"            new Dsn(\n"
"                'sendinblue+api',\n"
"                'default',\n"
"                config('services.sendinblue.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}"
msgstr ""

#: ./docs/9.x/mail.md:1203
#: ./docs/10.x/mail.md:1283
#: ./docs/11.x/mail.md:1407
#: ./docs/master/mail.md:1356
msgctxt "P"
msgid "Once your transport has been registered, you may create a mailer definition within your application's config/mail.php configuration file that utilizes the new transport:"
msgstr ""

#: ./docs/9.x/mail.md:1205
msgctxt "CODE"
msgid "'sendinblue' => [\n"
"    'transport' => 'sendinblue',\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/10.x/mail.md:1226
#: ./docs/11.x/mail.md:1350
#: ./docs/master/mail.md:1299
msgctxt "CODE"
msgid "use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(/* ... */);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/mail.md:1249
#: ./docs/11.x/mail.md:1373
#: ./docs/master/mail.md:1322
msgctxt "P"
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Brevo\" (formerly \"Sendinblue\") Symfony mailer:"
msgstr ""

#: ./docs/10.x/mail.md:1251
#: ./docs/11.x/mail.md:1375
#: ./docs/master/mail.md:1324
msgctxt "CODE: none"
msgid "composer require symfony/brevo-mailer symfony/http-client"
msgstr ""

#: ./docs/10.x/mail.md:1255
#: ./docs/11.x/mail.md:1379
#: ./docs/master/mail.md:1328
msgctxt "P"
msgid "Once the Brevo mailer package has been installed, you may add an entry for your Brevo API credentials to your application's `services` configuration file:"
msgstr ""

#: ./docs/10.x/mail.md:1257
#: ./docs/11.x/mail.md:1381
#: ./docs/master/mail.md:1330
msgctxt "CODE"
msgid "'brevo' => [\n"
"    'key' => 'your-api-key',\n"
"],"
msgstr ""

#: ./docs/10.x/mail.md:1263
#: ./docs/11.x/mail.md:1387
#: ./docs/master/mail.md:1336
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Brevo\\Transport\\BrevoTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Mail::extend('brevo', function () {\n"
"        return (new BrevoTransportFactory)->create(\n"
"            new Dsn(\n"
"                'brevo+api',\n"
"                'default',\n"
"                config('services.brevo.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/mail.md:1284
#: ./docs/master/mail.md:1233
msgctxt "P"
msgid "Laravel dispatches two events while sending mail messages. The `MessageSending` event is dispatched prior to a message being sent, while the `MessageSent` event is dispatched after a message has been sent. Remember, these events are dispatched when the mail is being *sent*, not when it is queued. You may create [event listeners](/docs/{{version}}/events) for these events within your application:"
msgstr ""

#: ./docs/10.x/mail.md:1285
#: ./docs/11.x/mail.md:1409
#: ./docs/master/mail.md:1358
msgctxt "CODE"
msgid "'brevo' => [\n"
"    'transport' => 'brevo',\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/11.x/mail.md:1286
#: ./docs/master/mail.md:1235
msgctxt "CODE"
msgid "use Illuminate\\Mail\\Events\\MessageSending;\n"
"// use Illuminate\\Mail\\Events\\MessageSent;\n\n"
"class LogMessage\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(MessageSending $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

