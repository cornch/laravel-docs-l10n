msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 05:45\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/http-tests.pot\n"
"X-Crowdin-File-ID: 87\n"

# File: docs/8.x/http-tests.md, line: 1
# File: docs/master/http-tests.md, line: 1
#. type: Title #
#, no-wrap
msgid "HTTP Tests"
msgstr ""

# File: docs/8.x/http-tests.md, line: 18
# File: docs/master/http-tests.md, line: 18
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr ""

# File: docs/8.x/http-tests.md, line: 18
# File: docs/master/http-tests.md, line: 18
#. type: Plain text
#, no-wrap
msgid "- [Making Requests](#making-requests)\n"
"    - [Customizing Request Headers](#customizing-request-headers)\n"
"    - [Cookies](#cookies)\n"
"    - [Session / Authentication](#session-and-authentication)\n"
"    - [Debugging Responses](#debugging-responses)\n"
"    - [Exception Handling](#exception-handling)\n"
"- [Testing JSON APIs](#testing-json-apis)\n"
"    - [Fluent JSON Testing](#fluent-json-testing)\n"
"- [Testing File Uploads](#testing-file-uploads)\n"
"- [Testing Views](#testing-views)\n"
"    - [Rendering Blade & Components](#rendering-blade-and-components)\n"
"- [Available Assertions](#available-assertions)\n"
"    - [Response Assertions](#response-assertions)\n"
"    - [Authentication Assertions](#authentication-assertions)\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 20
# File: docs/master/http-tests.md, line: 20
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 20
# File: docs/master/http-tests.md, line: 20
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr ""

# File: docs/8.x/http-tests.md, line: 23
# File: docs/master/http-tests.md, line: 23
#. type: Plain text
msgid "Laravel provides a very fluent API for making HTTP requests to your application and examining the responses. For example, take a look at the feature test defined below:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 25
# File: docs/8.x/http-tests.md, line: 57
# File: docs/8.x/http-tests.md, line: 89
# File: docs/8.x/http-tests.md, line: 117
# File: docs/8.x/http-tests.md, line: 141
# File: docs/8.x/http-tests.md, line: 157
# File: docs/8.x/http-tests.md, line: 185
# File: docs/8.x/http-tests.md, line: 212
# File: docs/8.x/http-tests.md, line: 253
# File: docs/8.x/http-tests.md, line: 289
# File: docs/8.x/http-tests.md, line: 319
# File: docs/8.x/http-tests.md, line: 485
# File: docs/8.x/http-tests.md, line: 541
# File: docs/master/http-tests.md, line: 25
# File: docs/master/http-tests.md, line: 57
# File: docs/master/http-tests.md, line: 89
# File: docs/master/http-tests.md, line: 117
# File: docs/master/http-tests.md, line: 141
# File: docs/master/http-tests.md, line: 157
# File: docs/master/http-tests.md, line: 185
# File: docs/master/http-tests.md, line: 212
# File: docs/master/http-tests.md, line: 253
# File: docs/master/http-tests.md, line: 289
# File: docs/master/http-tests.md, line: 319
# File: docs/master/http-tests.md, line: 485
# File: docs/master/http-tests.md, line: 541
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 27
# File: docs/8.x/http-tests.md, line: 59
# File: docs/8.x/http-tests.md, line: 91
# File: docs/8.x/http-tests.md, line: 119
# File: docs/8.x/http-tests.md, line: 143
# File: docs/8.x/http-tests.md, line: 159
# File: docs/8.x/http-tests.md, line: 187
# File: docs/8.x/http-tests.md, line: 214
# File: docs/8.x/http-tests.md, line: 255
# File: docs/8.x/http-tests.md, line: 291
# File: docs/8.x/http-tests.md, line: 321
# File: docs/8.x/http-tests.md, line: 487
# File: docs/8.x/http-tests.md, line: 543
# File: docs/master/http-tests.md, line: 27
# File: docs/master/http-tests.md, line: 59
# File: docs/master/http-tests.md, line: 91
# File: docs/master/http-tests.md, line: 119
# File: docs/master/http-tests.md, line: 143
# File: docs/master/http-tests.md, line: 159
# File: docs/master/http-tests.md, line: 187
# File: docs/master/http-tests.md, line: 214
# File: docs/master/http-tests.md, line: 255
# File: docs/master/http-tests.md, line: 291
# File: docs/master/http-tests.md, line: 321
# File: docs/master/http-tests.md, line: 487
# File: docs/master/http-tests.md, line: 543
#. type: Plain text
#, no-wrap
msgid "    namespace Tests\\Feature;\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 31
# File: docs/8.x/http-tests.md, line: 63
# File: docs/master/http-tests.md, line: 31
# File: docs/master/http-tests.md, line: 63
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 42
# File: docs/8.x/http-tests.md, line: 74
# File: docs/master/http-tests.md, line: 42
# File: docs/master/http-tests.md, line: 74
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_a_basic_request()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 46
# File: docs/8.x/http-tests.md, line: 78
# File: docs/master/http-tests.md, line: 46
# File: docs/master/http-tests.md, line: 78
#. type: Plain text
#, no-wrap
msgid "            $response->assertStatus(200);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 48
# File: docs/master/http-tests.md, line: 48
#. type: Plain text
msgid "The `get` method makes a `GET` request into the application, while the `assertStatus` method asserts that the returned response should have the given HTTP status code. In addition to this simple assertion, Laravel also contains a variety of assertions for inspecting the response headers, content, JSON structure, and more."
msgstr ""

# File: docs/8.x/http-tests.md, line: 50
# File: docs/master/http-tests.md, line: 50
#. type: Plain text
#, no-wrap
msgid "<a name=\"making-requests\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 50
# File: docs/master/http-tests.md, line: 50
#. type: Title ##
#, no-wrap
msgid "Making Requests"
msgstr ""

# File: docs/8.x/http-tests.md, line: 53
# File: docs/master/http-tests.md, line: 53
#. type: Plain text
msgid "To make a request to your application, you may invoke the `get`, `post`, `put`, `patch`, or `delete` methods within your test. These methods do not actually issue a \"real\" HTTP request to your application. Instead, the entire network request is simulated internally."
msgstr ""

# File: docs/8.x/http-tests.md, line: 55
# File: docs/master/http-tests.md, line: 55
#. type: Plain text
msgid "Instead of returning an `Illuminate\\Http\\Response` instance, test request methods return an instance of `Illuminate\\Testing\\TestResponse`, which provides a [variety of helpful assertions](#available-assertions) that allow you to inspect your application's responses:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 80
# File: docs/master/http-tests.md, line: 80
#. type: Plain text
msgid "In general, each of your tests should only make one request to your application. Unexpected behavior may occur if multiple requests are executed within a single test method."
msgstr ""

# File: docs/8.x/http-tests.md, line: 82
# File: docs/master/http-tests.md, line: 82
#. type: Plain text
#, no-wrap
msgid "> {tip} For convenience, the CSRF middleware is automatically disabled when running tests.\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 84
# File: docs/master/http-tests.md, line: 84
#. type: Plain text
#, no-wrap
msgid "<a name=\"customizing-request-headers\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 84
# File: docs/master/http-tests.md, line: 84
#. type: Title ###
#, no-wrap
msgid "Customizing Request Headers"
msgstr ""

# File: docs/8.x/http-tests.md, line: 87
# File: docs/master/http-tests.md, line: 87
#. type: Plain text
msgid "You may use the `withHeaders` method to customize the request's headers before it is sent to the application. This method allows you to add any custom headers you would like to the request:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 93
# File: docs/8.x/http-tests.md, line: 121
# File: docs/8.x/http-tests.md, line: 145
# File: docs/8.x/http-tests.md, line: 189
# File: docs/8.x/http-tests.md, line: 216
# File: docs/8.x/http-tests.md, line: 257
# File: docs/8.x/http-tests.md, line: 293
# File: docs/8.x/http-tests.md, line: 323
# File: docs/8.x/http-tests.md, line: 545
# File: docs/master/http-tests.md, line: 93
# File: docs/master/http-tests.md, line: 121
# File: docs/master/http-tests.md, line: 145
# File: docs/master/http-tests.md, line: 189
# File: docs/master/http-tests.md, line: 216
# File: docs/master/http-tests.md, line: 257
# File: docs/master/http-tests.md, line: 293
# File: docs/master/http-tests.md, line: 323
# File: docs/master/http-tests.md, line: 545
#. type: Plain text
#, no-wrap
msgid "    use Tests\\TestCase;\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 106
# File: docs/master/http-tests.md, line: 106
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_interacting_with_headers()\n"
"        {\n"
"            $response = $this->withHeaders([\n"
"                'X-Header' => 'Value',\n"
"            ])->post('/user', ['name' => 'Sally']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 110
# File: docs/master/http-tests.md, line: 110
#. type: Plain text
#, no-wrap
msgid "            $response->assertStatus(201);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 112
# File: docs/master/http-tests.md, line: 112
#. type: Plain text
#, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 112
# File: docs/master/http-tests.md, line: 112
#. type: Title ###
#, no-wrap
msgid "Cookies"
msgstr ""

# File: docs/8.x/http-tests.md, line: 115
# File: docs/master/http-tests.md, line: 115
#. type: Plain text
msgid "You may use the `withCookie` or `withCookies` methods to set cookie values before making a request. The `withCookie` method accepts a cookie name and value as its two arguments, while the `withCookies` method accepts an array of name / value pairs:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 127
# File: docs/master/http-tests.md, line: 127
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_cookies()\n"
"        {\n"
"            $response = $this->withCookie('color', 'blue')->get('/');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 134
# File: docs/master/http-tests.md, line: 134
#. type: Plain text
#, no-wrap
msgid "            $response = $this->withCookies([\n"
"                'color' => 'blue',\n"
"                'name' => 'Taylor',\n"
"            ])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 136
# File: docs/master/http-tests.md, line: 136
#. type: Plain text
#, no-wrap
msgid "<a name=\"session-and-authentication\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 136
# File: docs/master/http-tests.md, line: 136
#. type: Title ###
#, no-wrap
msgid "Session / Authentication"
msgstr ""

# File: docs/8.x/http-tests.md, line: 139
# File: docs/master/http-tests.md, line: 139
#. type: Plain text
msgid "Laravel provides several helpers for interacting with the session during HTTP testing. First, you may set the session data to a given array using the `withSession` method. This is useful for loading the session with data before issuing a request to your application:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 153
# File: docs/master/http-tests.md, line: 153
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_the_session()\n"
"        {\n"
"            $response = $this->withSession(['banned' => false])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 155
# File: docs/master/http-tests.md, line: 155
#. type: Plain text
msgid "Laravel's session is typically used to maintain state for the currently authenticated user. Therefore, the `actingAs` helper method provides a simple way to authenticate a given user as the current user. For example, we may use a [model factory](/docs/{{version}}/database-testing#writing-factories) to generate and authenticate a user:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 162
# File: docs/master/http-tests.md, line: 162
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Tests\\TestCase;\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 168
# File: docs/master/http-tests.md, line: 168
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_an_action_that_requires_authentication()\n"
"        {\n"
"            $user = User::factory()->create();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 174
# File: docs/master/http-tests.md, line: 174
#. type: Plain text
#, no-wrap
msgid "            $response = $this->actingAs($user)\n"
"                             ->withSession(['banned' => false])\n"
"                             ->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 176
# File: docs/master/http-tests.md, line: 176
#. type: Plain text
msgid "You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the `actingAs` method:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 178
# File: docs/master/http-tests.md, line: 178
#. type: Plain text
#, no-wrap
msgid "    $this->actingAs($user, 'web')\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 180
# File: docs/master/http-tests.md, line: 180
#. type: Plain text
#, no-wrap
msgid "<a name=\"debugging-responses\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 180
# File: docs/master/http-tests.md, line: 180
#. type: Title ###
#, no-wrap
msgid "Debugging Responses"
msgstr ""

# File: docs/8.x/http-tests.md, line: 183
# File: docs/master/http-tests.md, line: 183
#. type: Plain text
msgid "After making a test request to your application, the `dump`, `dumpHeaders`, and `dumpSession` methods may be used to examine and debug the response contents:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 200
# File: docs/8.x/http-tests.md, line: 227
# File: docs/master/http-tests.md, line: 200
# File: docs/master/http-tests.md, line: 227
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_test()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 202
# File: docs/master/http-tests.md, line: 202
#. type: Plain text
#, no-wrap
msgid "            $response->dumpHeaders();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 204
# File: docs/master/http-tests.md, line: 204
#. type: Plain text
#, no-wrap
msgid "            $response->dumpSession();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 208
# File: docs/master/http-tests.md, line: 208
#. type: Plain text
#, no-wrap
msgid "            $response->dump();\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 210
# File: docs/master/http-tests.md, line: 210
#. type: Plain text
msgid "Alternatively, you may use the `dd`, `ddHeaders`, and `ddSession` methods to dump information about the response and then stop execution:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 229
# File: docs/master/http-tests.md, line: 229
#. type: Plain text
#, no-wrap
msgid "            $response->ddHeaders();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 231
# File: docs/master/http-tests.md, line: 231
#. type: Plain text
#, no-wrap
msgid "            $response->ddSession();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 235
# File: docs/master/http-tests.md, line: 235
#. type: Plain text
#, no-wrap
msgid "            $response->dd();\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 237
# File: docs/master/http-tests.md, line: 237
#. type: Plain text
#, no-wrap
msgid "<a name=\"exception-handling\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 237
# File: docs/master/http-tests.md, line: 237
#. type: Title ###
#, no-wrap
msgid "Exception Handling"
msgstr ""

# File: docs/8.x/http-tests.md, line: 240
# File: docs/master/http-tests.md, line: 240
#. type: Plain text
msgid "Sometimes you may want to test that your application is throwing a specific exception. To ensure that the exception does not get caught by Laravel's exception handler and returned as an HTTP response, you may invoke the `withoutExceptionHandling` method before making your request:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 242
# File: docs/master/http-tests.md, line: 242
#. type: Plain text
#, no-wrap
msgid "    $response = $this->withoutExceptionHandling()->get('/');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 244
# File: docs/master/http-tests.md, line: 244
#. type: Plain text
msgid "In addition, if you would like to ensure that your application is not utilizing features that have been deprecated by the PHP language or the libraries your application is using, you may invoke the `withoutDeprecationHandling` method before making your request. When deprecation handling is disabled, deprecation warnings will be converted to exceptions, thus causing your test to fail:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 246
# File: docs/master/http-tests.md, line: 246
#. type: Plain text
#, no-wrap
msgid "    $response = $this->withoutDeprecationHandling()->get('/');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 248
# File: docs/master/http-tests.md, line: 248
#. type: Plain text
#, no-wrap
msgid "<a name=\"testing-json-apis\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 248
# File: docs/master/http-tests.md, line: 248
#. type: Title ##
#, no-wrap
msgid "Testing JSON APIs"
msgstr ""

# File: docs/8.x/http-tests.md, line: 251
# File: docs/master/http-tests.md, line: 251
#. type: Plain text
msgid "Laravel also provides several helpers for testing JSON APIs and their responses. For example, the `json`, `getJson`, `postJson`, `putJson`, `patchJson`, `deleteJson`, and `optionsJson` methods may be used to issue JSON requests with various HTTP verbs. You may also easily pass data and headers to these methods. To get started, let's write a test to make a `POST` request to `/api/user` and assert that the expected JSON data was returned:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 268
# File: docs/master/http-tests.md, line: 268
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_making_an_api_request()\n"
"        {\n"
"            $response = $this->postJson('/api/user', ['name' => 'Sally']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 276
# File: docs/master/http-tests.md, line: 276
#. type: Plain text
#, no-wrap
msgid "            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 278
# File: docs/master/http-tests.md, line: 278
#. type: Plain text
msgid "In addition, JSON response data may be accessed as array variables on the response, making it convenient for you to inspect the individual values returned within a JSON response:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 280
# File: docs/master/http-tests.md, line: 280
#. type: Plain text
#, no-wrap
msgid "    $this->assertTrue($response['created']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 282
# File: docs/master/http-tests.md, line: 282
#. type: Plain text
#, no-wrap
msgid "> {tip} The `assertJson` method converts the response to an array and utilizes `PHPUnit::assertArraySubset` to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present.\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 284
# File: docs/master/http-tests.md, line: 284
#. type: Plain text
#, no-wrap
msgid "<a name=\"verifying-exact-match\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 284
# File: docs/master/http-tests.md, line: 284
#. type: Title ####
#, no-wrap
msgid "Asserting Exact JSON Matches"
msgstr ""

# File: docs/8.x/http-tests.md, line: 287
# File: docs/master/http-tests.md, line: 287
#. type: Plain text
msgid "As previously mentioned, the `assertJson` method may be used to assert that a fragment of JSON exists within the JSON response. If you would like to verify that a given array **exactly matches** the JSON returned by your application, you should use the `assertExactJson` method:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 304
# File: docs/master/http-tests.md, line: 304
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_an_exact_json_match()\n"
"        {\n"
"            $response = $this->postJson('/user', ['name' => 'Sally']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 312
# File: docs/master/http-tests.md, line: 312
#. type: Plain text
#, no-wrap
msgid "            $response\n"
"                ->assertStatus(201)\n"
"                ->assertExactJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 314
# File: docs/master/http-tests.md, line: 314
#. type: Plain text
#, no-wrap
msgid "<a name=\"verifying-json-paths\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 314
# File: docs/master/http-tests.md, line: 314
#. type: Title ####
#, no-wrap
msgid "Asserting On JSON Paths"
msgstr ""

# File: docs/8.x/http-tests.md, line: 317
# File: docs/master/http-tests.md, line: 317
#. type: Plain text
msgid "If you would like to verify that the JSON response contains the given data at a specified path, you should use the `assertJsonPath` method:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 334
# File: docs/master/http-tests.md, line: 334
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_a_json_paths_value()\n"
"        {\n"
"            $response = $this->postJson('/user', ['name' => 'Sally']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 340
# File: docs/master/http-tests.md, line: 340
#. type: Plain text
#, no-wrap
msgid "            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJsonPath('team.owner.name', 'Darian');\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 342
# File: docs/master/http-tests.md, line: 342
#. type: Plain text
#, no-wrap
msgid "<a name=\"fluent-json-testing\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 342
# File: docs/master/http-tests.md, line: 342
#. type: Title ###
#, no-wrap
msgid "Fluent JSON Testing"
msgstr ""

# File: docs/8.x/http-tests.md, line: 345
# File: docs/master/http-tests.md, line: 345
#. type: Plain text
msgid "Laravel also offers a beautiful way to fluently test your application's JSON responses. To get started, pass a closure to the `assertJson` method. This closure will be invoked with an instance of `Illuminate\\Testing\\Fluent\\AssertableJson` which can be used to make assertions against the JSON that was returned by your application. The `where` method may be used to make assertions against a particular attribute of the JSON, while the `missing` method may be used to assert that a particular attribute is missing from the JSON:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 347
# File: docs/master/http-tests.md, line: 347
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Testing\\Fluent\\AssertableJson;\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 356
# File: docs/master/http-tests.md, line: 356
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_fluent_json()\n"
"    {\n"
"        $response = $this->getJson('/users/1');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 365
# File: docs/master/http-tests.md, line: 365
#. type: Plain text
#, no-wrap
msgid "        $response\n"
"            ->assertJson(fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"            );\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 366
# File: docs/master/http-tests.md, line: 366
#. type: Title ####
#, no-wrap
msgid "Understanding The `etc` Method"
msgstr ""

# File: docs/8.x/http-tests.md, line: 369
# File: docs/master/http-tests.md, line: 369
#. type: Plain text
msgid "In the example above, you may have noticed we invoked the `etc` method at the end of our assertion chain. This method informs Laravel that there may be other attributes present on the JSON object. If the `etc` method is not used, the test will fail if other attributes that you did not make assertions against exist on the JSON object."
msgstr ""

# File: docs/8.x/http-tests.md, line: 371
# File: docs/master/http-tests.md, line: 371
#. type: Plain text
msgid "The intention behind this behavior is to protect you from unintentionally exposing sensitive information in your JSON responses by forcing you to either explicitly make an assertion against the attribute or explicitly allow additional attributes via the `etc` method."
msgstr ""

# File: docs/8.x/http-tests.md, line: 373
# File: docs/master/http-tests.md, line: 373
#. type: Plain text
#, no-wrap
msgid "<a name=\"asserting-json-attribute-presence-and-absence\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 373
# File: docs/master/http-tests.md, line: 373
#. type: Title ####
#, no-wrap
msgid "Asserting Attribute Presence / Absence"
msgstr ""

# File: docs/8.x/http-tests.md, line: 376
# File: docs/master/http-tests.md, line: 376
#. type: Plain text
msgid "To assert that an attribute is present or absent, you may use the `has` and `missing` methods:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 381
# File: docs/master/http-tests.md, line: 381
#. type: Plain text
#, no-wrap
msgid "    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('data')\n"
"             ->missing('message')\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 383
# File: docs/master/http-tests.md, line: 383
#. type: Plain text
msgid "In addition, the `hasAll` and `missingAll` methods allow asserting the presence or absence of multiple attributes simultaneously:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 388
# File: docs/master/http-tests.md, line: 388
#. type: Plain text
#, no-wrap
msgid "    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->hasAll('status', 'data')\n"
"             ->missingAll('message', 'code')\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 390
# File: docs/master/http-tests.md, line: 390
#. type: Plain text
msgid "You may use the `hasAny` method to determine if at least one of a given list of attributes is present:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 395
# File: docs/master/http-tests.md, line: 395
#. type: Plain text
#, no-wrap
msgid "    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('status')\n"
"             ->hasAny('data', 'message', 'code')\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 397
# File: docs/master/http-tests.md, line: 397
#. type: Plain text
#, no-wrap
msgid "<a name=\"asserting-against-json-collections\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 397
# File: docs/master/http-tests.md, line: 397
#. type: Title ####
#, no-wrap
msgid "Asserting Against JSON Collections"
msgstr ""

# File: docs/8.x/http-tests.md, line: 400
# File: docs/master/http-tests.md, line: 400
#. type: Plain text
msgid "Often, your route will return a JSON response that contains multiple items, such as multiple users:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 404
# File: docs/master/http-tests.md, line: 404
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return User::all();\n"
"    });\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 406
# File: docs/master/http-tests.md, line: 406
#. type: Plain text
msgid "In these situations, we may use the fluent JSON object's `has` method to make assertions against the users included in the response. For example, let's assert that the JSON response contains three users. Next, we'll make some assertions about the first user in the collection using the `first` method. The `first` method accepts a closure which receives another assertable JSON string that we can use to make assertions about the first object in the JSON collection:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 417
# File: docs/master/http-tests.md, line: 417
#. type: Plain text
#, no-wrap
msgid "    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has(3)\n"
"                 ->first(fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 419
# File: docs/master/http-tests.md, line: 419
#. type: Plain text
#, no-wrap
msgid "<a name=\"scoping-json-collection-assertions\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 419
# File: docs/master/http-tests.md, line: 419
#. type: Title ####
#, no-wrap
msgid "Scoping JSON Collection Assertions"
msgstr ""

# File: docs/8.x/http-tests.md, line: 422
# File: docs/master/http-tests.md, line: 422
#. type: Plain text
msgid "Sometimes, your application's routes will return JSON collections that are assigned named keys:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 429
# File: docs/master/http-tests.md, line: 429
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return [\n"
"            'meta' => [...],\n"
"            'users' => User::all(),\n"
"        ];\n"
"    })\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 431
# File: docs/master/http-tests.md, line: 431
#. type: Plain text
msgid "When testing these routes, you may use the `has` method to assert against the number of items in the collection. In addition, you may use the `has` method to scope a chain of assertions:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 443
# File: docs/master/http-tests.md, line: 443
#. type: Plain text
#, no-wrap
msgid "    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has('meta')\n"
"                 ->has('users', 3)\n"
"                 ->has('users.0', fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 445
# File: docs/master/http-tests.md, line: 445
#. type: Plain text
msgid "However, instead of making two separate calls to the `has` method to assert against the `users` collection, you may make a single call which provides a closure as its third parameter. When doing so, the closure will automatically be invoked and scoped to the first item in the collection:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 456
# File: docs/master/http-tests.md, line: 456
#. type: Plain text
#, no-wrap
msgid "    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has('meta')\n"
"                 ->has('users', 3, fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 458
# File: docs/master/http-tests.md, line: 458
#. type: Plain text
#, no-wrap
msgid "<a name=\"asserting-json-types\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 458
# File: docs/master/http-tests.md, line: 458
#. type: Title ####
#, no-wrap
msgid "Asserting JSON Types"
msgstr ""

# File: docs/8.x/http-tests.md, line: 461
# File: docs/master/http-tests.md, line: 461
#. type: Plain text
msgid "You may only want to assert that the properties in the JSON response are of a certain type. The `Illuminate\\Testing\\Fluent\\AssertableJson` class provides the `whereType` and `whereAllType` methods for doing just that:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 469
# File: docs/master/http-tests.md, line: 469
#. type: Plain text
#, no-wrap
msgid "    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->whereType('id', 'integer')\n"
"             ->whereAllType([\n"
"                'users.0.name' => 'string',\n"
"                'meta' => 'array'\n"
"            ])\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 471
# File: docs/master/http-tests.md, line: 471
#. type: Plain text
msgid "You may specify multiple types using the `|` character, or passing an array of types as the second parameter to the `whereType` method. The assertion will be successful if the response value is any of the listed types:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 476
# File: docs/master/http-tests.md, line: 476
#. type: Plain text
#, no-wrap
msgid "    $response->assertJson(fn (AssertableJson $json) =>\n"
"        $json->whereType('name', 'string|null')\n"
"             ->whereType('id', ['string', 'integer'])\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 478
# File: docs/master/http-tests.md, line: 478
#. type: Plain text
msgid "The `whereType` and `whereAllType` methods recognize the following types: `string`, `integer`, `double`, `boolean`, `array`, and `null`."
msgstr ""

# File: docs/8.x/http-tests.md, line: 480
# File: docs/master/http-tests.md, line: 480
#. type: Plain text
#, no-wrap
msgid "<a name=\"testing-file-uploads\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 480
# File: docs/master/http-tests.md, line: 480
#. type: Title ##
#, no-wrap
msgid "Testing File Uploads"
msgstr ""

# File: docs/8.x/http-tests.md, line: 483
# File: docs/master/http-tests.md, line: 483
#. type: Plain text
msgid "The `Illuminate\\Http\\UploadedFile` class provides a `fake` method which may be used to generate dummy files or images for testing. This, combined with the `Storage` facade's `fake` method, greatly simplifies the testing of file uploads. For example, you may combine these two features to easily test an avatar upload form:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 493
# File: docs/master/http-tests.md, line: 493
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Http\\UploadedFile;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Tests\\TestCase;\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 499
# File: docs/master/http-tests.md, line: 499
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_avatars_can_be_uploaded()\n"
"        {\n"
"            Storage::fake('avatars');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 501
# File: docs/master/http-tests.md, line: 501
#. type: Plain text
#, no-wrap
msgid "            $file = UploadedFile::fake()->image('avatar.jpg');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 505
# File: docs/master/http-tests.md, line: 505
#. type: Plain text
#, no-wrap
msgid "            $response = $this->post('/avatar', [\n"
"                'avatar' => $file,\n"
"            ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 509
# File: docs/master/http-tests.md, line: 509
#. type: Plain text
#, no-wrap
msgid "            Storage::disk('avatars')->assertExists($file->hashName());\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 511
# File: docs/master/http-tests.md, line: 511
#. type: Plain text
msgid "If you would like to assert that a given file does not exist, you may use the `assertMissing` method provided by the `Storage` facade:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 513
# File: docs/master/http-tests.md, line: 513
#. type: Plain text
#, no-wrap
msgid "    Storage::fake('avatars');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 515
# File: docs/master/http-tests.md, line: 515
#. type: Plain text
#, no-wrap
msgid "    // ...\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 517
# File: docs/master/http-tests.md, line: 517
#. type: Plain text
#, no-wrap
msgid "    Storage::disk('avatars')->assertMissing('missing.jpg');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 519
# File: docs/master/http-tests.md, line: 519
#. type: Plain text
#, no-wrap
msgid "<a name=\"fake-file-customization\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 519
# File: docs/master/http-tests.md, line: 519
#. type: Title ####
#, no-wrap
msgid "Fake File Customization"
msgstr ""

# File: docs/8.x/http-tests.md, line: 522
# File: docs/master/http-tests.md, line: 522
#. type: Plain text
msgid "When creating files using the `fake` method provided by the `UploadedFile` class, you may specify the width, height, and size of the image (in kilobytes) in order to better test your application's validation rules:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 524
# File: docs/master/http-tests.md, line: 524
#. type: Plain text
#, no-wrap
msgid "    UploadedFile::fake()->image('avatar.jpg', $width, $height)->size(100);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 526
# File: docs/master/http-tests.md, line: 526
#. type: Plain text
msgid "In addition to creating images, you may create files of any other type using the `create` method:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 528
# File: docs/master/http-tests.md, line: 528
#. type: Plain text
#, no-wrap
msgid "    UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 530
# File: docs/master/http-tests.md, line: 530
#. type: Plain text
msgid "If needed, you may pass a `$mimeType` argument to the method to explicitly define the MIME type that should be returned by the file:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 534
# File: docs/master/http-tests.md, line: 534
#. type: Plain text
#, no-wrap
msgid "    UploadedFile::fake()->create(\n"
"        'document.pdf', $sizeInKilobytes, 'application/pdf'\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 536
# File: docs/master/http-tests.md, line: 536
#. type: Plain text
#, no-wrap
msgid "<a name=\"testing-views\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 536
# File: docs/master/http-tests.md, line: 536
#. type: Title ##
#, no-wrap
msgid "Testing Views"
msgstr ""

# File: docs/8.x/http-tests.md, line: 539
# File: docs/master/http-tests.md, line: 539
#. type: Plain text
msgid "Laravel also allows you to render a view without making a simulated HTTP request to the application. To accomplish this, you may call the `view` method within your test. The `view` method accepts the view name and an optional array of data. The method returns an instance of `Illuminate\\Testing\\TestView`, which offers several methods to conveniently make assertions about the view's contents:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 551
# File: docs/master/http-tests.md, line: 551
#. type: Plain text
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_a_welcome_view_can_be_rendered()\n"
"        {\n"
"            $view = $this->view('welcome', ['name' => 'Taylor']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 555
# File: docs/master/http-tests.md, line: 555
#. type: Plain text
#, no-wrap
msgid "            $view->assertSee('Taylor');\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 557
# File: docs/master/http-tests.md, line: 557
#. type: Plain text
msgid "The `TestView` class provides the following assertion methods: `assertSee`, `assertSeeInOrder`, `assertSeeText`, `assertSeeTextInOrder`, `assertDontSee`, and `assertDontSeeText`."
msgstr ""

# File: docs/8.x/http-tests.md, line: 559
# File: docs/master/http-tests.md, line: 559
#. type: Plain text
msgid "If needed, you may get the raw, rendered view contents by casting the `TestView` instance to a string:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 561
# File: docs/master/http-tests.md, line: 561
#. type: Plain text
#, no-wrap
msgid "    $contents = (string) $this->view('welcome');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 563
# File: docs/master/http-tests.md, line: 563
#. type: Plain text
#, no-wrap
msgid "<a name=\"sharing-errors\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 563
# File: docs/master/http-tests.md, line: 563
#. type: Title ####
#, no-wrap
msgid "Sharing Errors"
msgstr ""

# File: docs/8.x/http-tests.md, line: 566
# File: docs/master/http-tests.md, line: 566
#. type: Plain text
msgid "Some views may depend on errors shared in the [global error bag provided by Laravel](/docs/{{version}}/validation#quick-displaying-the-validation-errors). To hydrate the error bag with error messages, you may use the `withViewErrors` method:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 570
# File: docs/master/http-tests.md, line: 570
#. type: Plain text
#, no-wrap
msgid "    $view = $this->withViewErrors([\n"
"        'name' => ['Please provide a valid name.']\n"
"    ])->view('form');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 572
# File: docs/master/http-tests.md, line: 572
#. type: Plain text
#, no-wrap
msgid "    $view->assertSee('Please provide a valid name.');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 574
# File: docs/master/http-tests.md, line: 574
#. type: Plain text
#, no-wrap
msgid "<a name=\"rendering-blade-and-components\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 574
# File: docs/master/http-tests.md, line: 574
#. type: Title ###
#, no-wrap
msgid "Rendering Blade & Components"
msgstr ""

# File: docs/8.x/http-tests.md, line: 577
# File: docs/master/http-tests.md, line: 577
#. type: Plain text
msgid "If necessary, you may use the `blade` method to evaluate and render a raw [Blade](/docs/{{version}}/blade) string. Like the `view` method, the `blade` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 582
# File: docs/master/http-tests.md, line: 582
#. type: Plain text
#, no-wrap
msgid "    $view = $this->blade(\n"
"        '<x-component :name=\"$name\" />',\n"
"        ['name' => 'Taylor']\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 584
# File: docs/8.x/http-tests.md, line: 590
# File: docs/master/http-tests.md, line: 584
# File: docs/master/http-tests.md, line: 590
#. type: Plain text
#, no-wrap
msgid "    $view->assertSee('Taylor');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 586
# File: docs/master/http-tests.md, line: 586
#. type: Plain text
msgid "You may use the `component` method to evaluate and render a [Blade component](/docs/{{version}}/blade#components). Like the `view` method, the `component` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 588
# File: docs/master/http-tests.md, line: 588
#. type: Plain text
#, no-wrap
msgid "    $view = $this->component(Profile::class, ['name' => 'Taylor']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 592
# File: docs/master/http-tests.md, line: 592
#. type: Plain text
#, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 592
# File: docs/master/http-tests.md, line: 592
#. type: Title ##
#, no-wrap
msgid "Available Assertions"
msgstr ""

# File: docs/8.x/http-tests.md, line: 595
# File: docs/master/http-tests.md, line: 595
#. type: Plain text
#, no-wrap
msgid "<a name=\"response-assertions\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 595
# File: docs/master/http-tests.md, line: 595
#. type: Title ###
#, no-wrap
msgid "Response Assertions"
msgstr ""

# File: docs/8.x/http-tests.md, line: 598
# File: docs/master/http-tests.md, line: 598
#. type: Plain text
msgid "Laravel's `Illuminate\\Testing\\TestResponse` class provides a variety of custom assertion methods that you may utilize when testing your application. These assertions may be accessed on the response that is returned by the `json`, `get`, `post`, `put`, and `delete` test methods:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 604
# File: docs/master/http-tests.md, line: 604
#. type: Plain text
#, no-wrap
msgid "<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 609
# File: docs/master/http-tests.md, line: 609
#. type: Plain text
#, no-wrap
msgid "    .collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 611
# File: docs/master/http-tests.md, line: 611
#. type: Plain text
#, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 665
# File: docs/master/http-tests.md, line: 665
#. type: Plain text
msgid "[assertCookie](#assert-cookie)  [assertCookieExpired](#assert-cookie-expired)  [assertCookieNotExpired](#assert-cookie-not-expired)  [assertCookieMissing](#assert-cookie-missing)  [assertCreated](#assert-created)  [assertDontSee](#assert-dont-see)  [assertDontSeeText](#assert-dont-see-text)  [assertDownload](#assert-download)  [assertExactJson](#assert-exact-json)  [assertForbidden](#assert-forbidden)  [assertHeader](#assert-header)  [assertHeaderMissing](#assert-header-missing)  [assertJson](#assert-json)  [assertJsonCount](#assert-json-count)  [assertJsonFragment](#assert-json-fragment)  [assertJsonMissing](#assert-json-missing)  [assertJsonMissingExact](#assert-json-missing-exact)  [assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)  [assertJsonPath](#assert-json-path)  [assertJsonStructure](#assert-json-structure)  [assertJsonValidationErrors](#assert-json-validation-errors)  [assertJsonValidationErrorFor](#assert-json-validation-error-for)  [assertLocation](#assert-location)  [assertNoContent](#assert-no-content)  [assertNotFound](#assert-not-found)  [assertOk](#assert-ok)  [assertPlainCookie](#assert-plain-cookie)  [assertRedirect](#assert-redirect)  [assertRedirectContains](#assert-redirect-contains)  [assertRedirectToSignedRoute](#assert-redirect-to-signed-route)  [assertSee](#assert-see)  [assertSeeInOrder](#assert-see-in-order)  [assertSeeText](#assert-see-text)  [assertSeeTextInOrder](#assert-see-text-in-order)  [assertSessionHas](#assert-session-has)  [assertSessionHasInput](#assert-session-has-input)  [assertSessionHasAll](#assert-session-has-all)  [assertSessionHasErrors](#assert-session-has-errors)  [assertSessionHasErrorsIn](#assert-session-has-errors-in)  [assertSessionHasNoErrors](#assert-session-has-no-errors)  [assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)  [assertSessionMissing](#assert-session-missing)  [assertSimilarJson](#assert-similar-json)  [assertStatus](#assert-status)  [assertSuccessful](#assert-successful)  [assertUnauthorized](#assert-unauthorized)  [assertUnprocessable](#assert-unprocessable)  [assertValid](#assert-valid)  [assertInvalid](#assert-invalid)  [assertViewHas](#assert-view-has)  [assertViewHasAll](#assert-view-has-all)  [assertViewIs](#assert-view-is)  [assertViewMissing](#assert-view-missing)"
msgstr ""

# File: docs/8.x/http-tests.md, line: 667
# File: docs/master/http-tests.md, line: 667
#. type: Plain text
#, no-wrap
msgid "</div>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 669
# File: docs/master/http-tests.md, line: 669
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-cookie\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 669
# File: docs/master/http-tests.md, line: 669
#. type: Title ####
#, no-wrap
msgid "assertCookie"
msgstr ""

# File: docs/8.x/http-tests.md, line: 672
# File: docs/master/http-tests.md, line: 672
#. type: Plain text
msgid "Assert that the response contains the given cookie:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 674
# File: docs/master/http-tests.md, line: 674
#. type: Plain text
#, no-wrap
msgid "    $response->assertCookie($cookieName, $value = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 676
# File: docs/master/http-tests.md, line: 676
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-cookie-expired\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 676
# File: docs/master/http-tests.md, line: 676
#. type: Title ####
#, no-wrap
msgid "assertCookieExpired"
msgstr ""

# File: docs/8.x/http-tests.md, line: 679
# File: docs/master/http-tests.md, line: 679
#. type: Plain text
msgid "Assert that the response contains the given cookie and it is expired:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 681
# File: docs/master/http-tests.md, line: 681
#. type: Plain text
#, no-wrap
msgid "    $response->assertCookieExpired($cookieName);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 683
# File: docs/master/http-tests.md, line: 683
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-cookie-not-expired\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 683
# File: docs/master/http-tests.md, line: 683
#. type: Title ####
#, no-wrap
msgid "assertCookieNotExpired"
msgstr ""

# File: docs/8.x/http-tests.md, line: 686
# File: docs/master/http-tests.md, line: 686
#. type: Plain text
msgid "Assert that the response contains the given cookie and it is not expired:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 688
# File: docs/master/http-tests.md, line: 688
#. type: Plain text
#, no-wrap
msgid "    $response->assertCookieNotExpired($cookieName);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 690
# File: docs/master/http-tests.md, line: 690
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-cookie-missing\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 690
# File: docs/master/http-tests.md, line: 690
#. type: Title ####
#, no-wrap
msgid "assertCookieMissing"
msgstr ""

# File: docs/8.x/http-tests.md, line: 693
# File: docs/master/http-tests.md, line: 693
#. type: Plain text
msgid "Assert that the response does not contains the given cookie:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 695
# File: docs/master/http-tests.md, line: 695
#. type: Plain text
#, no-wrap
msgid "    $response->assertCookieMissing($cookieName);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 697
# File: docs/master/http-tests.md, line: 697
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-created\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 697
# File: docs/master/http-tests.md, line: 697
#. type: Title ####
#, no-wrap
msgid "assertCreated"
msgstr ""

# File: docs/8.x/http-tests.md, line: 700
# File: docs/master/http-tests.md, line: 700
#. type: Plain text
msgid "Assert that the response has a 201 HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 702
# File: docs/master/http-tests.md, line: 702
#. type: Plain text
#, no-wrap
msgid "    $response->assertCreated();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 704
# File: docs/master/http-tests.md, line: 704
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-dont-see\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 704
# File: docs/master/http-tests.md, line: 704
#. type: Title ####
#, no-wrap
msgid "assertDontSee"
msgstr ""

# File: docs/8.x/http-tests.md, line: 707
# File: docs/master/http-tests.md, line: 707
#. type: Plain text
msgid "Assert that the given string is not contained within the response returned by the application. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 709
# File: docs/master/http-tests.md, line: 709
#. type: Plain text
#, no-wrap
msgid "    $response->assertDontSee($value, $escaped = true);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 711
# File: docs/master/http-tests.md, line: 711
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-dont-see-text\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 711
# File: docs/master/http-tests.md, line: 711
#. type: Title ####
#, no-wrap
msgid "assertDontSeeText"
msgstr ""

# File: docs/8.x/http-tests.md, line: 714
# File: docs/master/http-tests.md, line: 714
#. type: Plain text
msgid "Assert that the given string is not contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. This method will pass the response content to the `strip_tags` PHP function before making the assertion:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 716
# File: docs/master/http-tests.md, line: 716
#. type: Plain text
#, no-wrap
msgid "    $response->assertDontSeeText($value, $escaped = true);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 718
# File: docs/master/http-tests.md, line: 718
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-download\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 718
# File: docs/master/http-tests.md, line: 718
#. type: Title ####
#, no-wrap
msgid "assertDownload"
msgstr ""

# File: docs/8.x/http-tests.md, line: 721
# File: docs/master/http-tests.md, line: 721
#. type: Plain text
msgid "Assert that the response is a \"download\". Typically, this means the invoked route that returned the response returned a `Response::download` response, `BinaryFileResponse`, or `Storage::download` response:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 723
# File: docs/master/http-tests.md, line: 723
#. type: Plain text
#, no-wrap
msgid "    $response->assertDownload();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 725
# File: docs/master/http-tests.md, line: 725
#. type: Plain text
msgid "If you wish, you may assert that the downloadable file was assigned a given file name:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 727
# File: docs/master/http-tests.md, line: 727
#. type: Plain text
#, no-wrap
msgid "    $response->assertDownload('image.jpg');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 729
# File: docs/master/http-tests.md, line: 729
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-exact-json\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 729
# File: docs/master/http-tests.md, line: 729
#. type: Title ####
#, no-wrap
msgid "assertExactJson"
msgstr ""

# File: docs/8.x/http-tests.md, line: 732
# File: docs/master/http-tests.md, line: 732
#. type: Plain text
msgid "Assert that the response contains an exact match of the given JSON data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 734
# File: docs/master/http-tests.md, line: 734
#. type: Plain text
#, no-wrap
msgid "    $response->assertExactJson(array $data);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 736
# File: docs/master/http-tests.md, line: 736
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-forbidden\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 736
# File: docs/master/http-tests.md, line: 736
#. type: Title ####
#, no-wrap
msgid "assertForbidden"
msgstr ""

# File: docs/8.x/http-tests.md, line: 739
# File: docs/master/http-tests.md, line: 739
#. type: Plain text
msgid "Assert that the response has a forbidden (403) HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 741
# File: docs/master/http-tests.md, line: 741
#. type: Plain text
#, no-wrap
msgid "    $response->assertForbidden();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 743
# File: docs/master/http-tests.md, line: 743
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-header\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 743
# File: docs/master/http-tests.md, line: 743
#. type: Title ####
#, no-wrap
msgid "assertHeader"
msgstr ""

# File: docs/8.x/http-tests.md, line: 746
# File: docs/master/http-tests.md, line: 746
#. type: Plain text
msgid "Assert that the given header and value is present on the response:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 748
# File: docs/master/http-tests.md, line: 748
#. type: Plain text
#, no-wrap
msgid "    $response->assertHeader($headerName, $value = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 750
# File: docs/master/http-tests.md, line: 750
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-header-missing\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 750
# File: docs/master/http-tests.md, line: 750
#. type: Title ####
#, no-wrap
msgid "assertHeaderMissing"
msgstr ""

# File: docs/8.x/http-tests.md, line: 753
# File: docs/master/http-tests.md, line: 753
#. type: Plain text
msgid "Assert that the given header is not present on the response:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 755
# File: docs/master/http-tests.md, line: 755
#. type: Plain text
#, no-wrap
msgid "    $response->assertHeaderMissing($headerName);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 757
# File: docs/master/http-tests.md, line: 757
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 757
# File: docs/master/http-tests.md, line: 757
#. type: Title ####
#, no-wrap
msgid "assertJson"
msgstr ""

# File: docs/8.x/http-tests.md, line: 760
# File: docs/master/http-tests.md, line: 760
#. type: Plain text
msgid "Assert that the response contains the given JSON data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 762
# File: docs/master/http-tests.md, line: 762
#. type: Plain text
#, no-wrap
msgid "    $response->assertJson(array $data, $strict = false);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 764
# File: docs/master/http-tests.md, line: 764
#. type: Plain text
msgid "The `assertJson` method converts the response to an array and utilizes `PHPUnit::assertArraySubset` to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present."
msgstr ""

# File: docs/8.x/http-tests.md, line: 766
# File: docs/master/http-tests.md, line: 766
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-count\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 766
# File: docs/master/http-tests.md, line: 766
#. type: Title ####
#, no-wrap
msgid "assertJsonCount"
msgstr ""

# File: docs/8.x/http-tests.md, line: 769
# File: docs/master/http-tests.md, line: 769
#. type: Plain text
msgid "Assert that the response JSON has an array with the expected number of items at the given key:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 771
# File: docs/master/http-tests.md, line: 771
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonCount($count, $key = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 773
# File: docs/master/http-tests.md, line: 773
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-fragment\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 773
# File: docs/master/http-tests.md, line: 773
#. type: Title ####
#, no-wrap
msgid "assertJsonFragment"
msgstr ""

# File: docs/8.x/http-tests.md, line: 776
# File: docs/master/http-tests.md, line: 776
#. type: Plain text
msgid "Assert that the response contains the given JSON data anywhere in the response:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 786
# File: docs/master/http-tests.md, line: 786
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return [\n"
"            'users' => [\n"
"                [\n"
"                    'name' => 'Taylor Otwell',\n"
"                ],\n"
"            ],\n"
"        ];\n"
"    });\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 788
# File: docs/master/http-tests.md, line: 788
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonFragment(['name' => 'Taylor Otwell']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 790
# File: docs/master/http-tests.md, line: 790
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-missing\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 790
# File: docs/master/http-tests.md, line: 790
#. type: Title ####
#, no-wrap
msgid "assertJsonMissing"
msgstr ""

# File: docs/8.x/http-tests.md, line: 793
# File: docs/master/http-tests.md, line: 793
#. type: Plain text
msgid "Assert that the response does not contain the given JSON data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 795
# File: docs/master/http-tests.md, line: 795
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonMissing(array $data);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 797
# File: docs/master/http-tests.md, line: 797
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-missing-exact\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 797
# File: docs/master/http-tests.md, line: 797
#. type: Title ####
#, no-wrap
msgid "assertJsonMissingExact"
msgstr ""

# File: docs/8.x/http-tests.md, line: 800
# File: docs/master/http-tests.md, line: 800
#. type: Plain text
msgid "Assert that the response does not contain the exact JSON data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 802
# File: docs/master/http-tests.md, line: 802
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonMissingExact(array $data);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 804
# File: docs/master/http-tests.md, line: 804
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-missing-validation-errors\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 804
# File: docs/master/http-tests.md, line: 804
#. type: Title ####
#, no-wrap
msgid "assertJsonMissingValidationErrors"
msgstr ""

# File: docs/8.x/http-tests.md, line: 807
# File: docs/master/http-tests.md, line: 807
#. type: Plain text
msgid "Assert that the response has no JSON validation errors for the given keys:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 809
# File: docs/master/http-tests.md, line: 809
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonMissingValidationErrors($keys);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 811
# File: docs/master/http-tests.md, line: 811
#. type: Plain text
#, no-wrap
msgid "> {tip} The more generic [assertValid](#assert-valid) method may be used to assert that a response does not have validation errors that were returned as JSON **and** that no errors were flashed to session storage.\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 813
# File: docs/master/http-tests.md, line: 813
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-path\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 813
# File: docs/master/http-tests.md, line: 813
#. type: Title ####
#, no-wrap
msgid "assertJsonPath"
msgstr ""

# File: docs/8.x/http-tests.md, line: 816
# File: docs/master/http-tests.md, line: 816
#. type: Plain text
msgid "Assert that the response contains the given data at the specified path:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 818
# File: docs/master/http-tests.md, line: 818
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonPath($path, $expectedValue);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 820
# File: docs/8.x/http-tests.md, line: 841
# File: docs/master/http-tests.md, line: 820
# File: docs/master/http-tests.md, line: 841
#. type: Plain text
msgid "For example, if the JSON response returned by your application contains the following data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 821
# File: docs/8.x/http-tests.md, line: 842
# File: docs/8.x/http-tests.md, line: 860
# File: docs/master/http-tests.md, line: 821
# File: docs/master/http-tests.md, line: 842
# File: docs/master/http-tests.md, line: 860
#. type: Code fence info string
#, no-wrap
msgid "js"
msgstr ""

# File: docs/8.x/http-tests.md, line: 821
# File: docs/8.x/http-tests.md, line: 842
# File: docs/master/http-tests.md, line: 821
# File: docs/master/http-tests.md, line: 842
#. type: Plain text
#, no-wrap
msgid "{\n"
"    \"user\": {\n"
"        \"name\": \"Steve Schoger\"\n"
"    }\n"
"}\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 830
# File: docs/master/http-tests.md, line: 830
#. type: Plain text
msgid "You may assert that the `name` property of the `user` object matches a given value like so:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 832
# File: docs/master/http-tests.md, line: 832
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonPath('user.name', 'Steve Schoger');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 834
# File: docs/master/http-tests.md, line: 834
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-structure\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 834
# File: docs/master/http-tests.md, line: 834
#. type: Title ####
#, no-wrap
msgid "assertJsonStructure"
msgstr ""

# File: docs/8.x/http-tests.md, line: 837
# File: docs/master/http-tests.md, line: 837
#. type: Plain text
msgid "Assert that the response has a given JSON structure:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 839
# File: docs/master/http-tests.md, line: 839
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonStructure(array $structure);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 851
# File: docs/master/http-tests.md, line: 851
#. type: Plain text
msgid "You may assert that the JSON structure matches your expectations like so:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 857
# File: docs/master/http-tests.md, line: 857
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonStructure([\n"
"        'user' => [\n"
"            'name',\n"
"        ]\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 859
# File: docs/master/http-tests.md, line: 859
#. type: Plain text
msgid "Sometimes, JSON responses returned by your application may contain arrays of objects:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 860
# File: docs/master/http-tests.md, line: 860
#. type: Plain text
#, no-wrap
msgid "{\n"
"    \"user\": [\n"
"        {\n"
"            \"name\": \"Steve Schoger\",\n"
"            \"age\": 55,\n"
"            \"location\": \"Earth\"\n"
"        },\n"
"        {\n"
"            \"name\": \"Mary Schoger\",\n"
"            \"age\": 60,\n"
"            \"location\": \"Earth\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 878
# File: docs/master/http-tests.md, line: 878
#. type: Plain text
msgid "In this situation, you may use the `*` character to assert against the structure of all of the objects in the array:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 888
# File: docs/master/http-tests.md, line: 888
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonStructure([\n"
"        'user' => [\n"
"            '*' => [\n"
"                 'name',\n"
"                 'age',\n"
"                 'location'\n"
"            ]\n"
"        ]\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 890
# File: docs/master/http-tests.md, line: 890
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-validation-errors\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 890
# File: docs/master/http-tests.md, line: 890
#. type: Title ####
#, no-wrap
msgid "assertJsonValidationErrors"
msgstr ""

# File: docs/8.x/http-tests.md, line: 893
# File: docs/master/http-tests.md, line: 893
#. type: Plain text
msgid "Assert that the response has the given JSON validation errors for the given keys. This method should be used when asserting against responses where the validation errors are returned as a JSON structure instead of being flashed to the session:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 895
# File: docs/master/http-tests.md, line: 895
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonValidationErrors(array $data, $responseKey = 'errors');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 897
# File: docs/master/http-tests.md, line: 897
#. type: Plain text
#, no-wrap
msgid "> {tip} The more generic [assertInvalid](#assert-invalid) method may be used to assert that a response has validation errors returned as JSON **or** that errors were flashed to session storage.\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 899
# File: docs/master/http-tests.md, line: 899
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-json-validation-error-for\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 899
# File: docs/master/http-tests.md, line: 899
#. type: Title ####
#, no-wrap
msgid "assertJsonValidationErrorFor"
msgstr ""

# File: docs/8.x/http-tests.md, line: 902
# File: docs/master/http-tests.md, line: 902
#. type: Plain text
msgid "Assert the response has any JSON validation errors for the given key:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 904
# File: docs/master/http-tests.md, line: 904
#. type: Plain text
#, no-wrap
msgid "    $response->assertJsonValidationErrorFor(string $key, $responseKey = 'errors');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 906
# File: docs/master/http-tests.md, line: 906
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-location\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 906
# File: docs/master/http-tests.md, line: 906
#. type: Title ####
#, no-wrap
msgid "assertLocation"
msgstr ""

# File: docs/8.x/http-tests.md, line: 909
# File: docs/master/http-tests.md, line: 909
#. type: Plain text
msgid "Assert that the response has the given URI value in the `Location` header:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 911
# File: docs/master/http-tests.md, line: 911
#. type: Plain text
#, no-wrap
msgid "    $response->assertLocation($uri);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 913
# File: docs/master/http-tests.md, line: 913
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-no-content\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 913
# File: docs/master/http-tests.md, line: 913
#. type: Title ####
#, no-wrap
msgid "assertNoContent"
msgstr ""

# File: docs/8.x/http-tests.md, line: 916
# File: docs/master/http-tests.md, line: 916
#. type: Plain text
msgid "Assert that the response has the given HTTP status code and no content:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 918
# File: docs/master/http-tests.md, line: 918
#. type: Plain text
#, no-wrap
msgid "    $response->assertNoContent($status = 204);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 920
# File: docs/master/http-tests.md, line: 920
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-not-found\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 920
# File: docs/master/http-tests.md, line: 920
#. type: Title ####
#, no-wrap
msgid "assertNotFound"
msgstr ""

# File: docs/8.x/http-tests.md, line: 923
# File: docs/master/http-tests.md, line: 923
#. type: Plain text
msgid "Assert that the response has a not found (404) HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 925
# File: docs/master/http-tests.md, line: 925
#. type: Plain text
#, no-wrap
msgid "    $response->assertNotFound();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 927
# File: docs/master/http-tests.md, line: 927
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-ok\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 927
# File: docs/master/http-tests.md, line: 927
#. type: Title ####
#, no-wrap
msgid "assertOk"
msgstr ""

# File: docs/8.x/http-tests.md, line: 930
# File: docs/master/http-tests.md, line: 930
#. type: Plain text
msgid "Assert that the response has a 200 HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 932
# File: docs/master/http-tests.md, line: 932
#. type: Plain text
#, no-wrap
msgid "    $response->assertOk();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 934
# File: docs/master/http-tests.md, line: 934
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-plain-cookie\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 934
# File: docs/master/http-tests.md, line: 934
#. type: Title ####
#, no-wrap
msgid "assertPlainCookie"
msgstr ""

# File: docs/8.x/http-tests.md, line: 937
# File: docs/master/http-tests.md, line: 937
#. type: Plain text
msgid "Assert that the response contains the given unencrypted cookie:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 939
# File: docs/master/http-tests.md, line: 939
#. type: Plain text
#, no-wrap
msgid "    $response->assertPlainCookie($cookieName, $value = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 941
# File: docs/master/http-tests.md, line: 941
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-redirect\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 941
# File: docs/master/http-tests.md, line: 941
#. type: Title ####
#, no-wrap
msgid "assertRedirect"
msgstr ""

# File: docs/8.x/http-tests.md, line: 944
# File: docs/master/http-tests.md, line: 944
#. type: Plain text
msgid "Assert that the response is a redirect to the given URI:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 946
# File: docs/master/http-tests.md, line: 946
#. type: Plain text
#, no-wrap
msgid "    $response->assertRedirect($uri);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 948
# File: docs/master/http-tests.md, line: 948
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-redirect-contains\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 948
# File: docs/master/http-tests.md, line: 948
#. type: Title ####
#, no-wrap
msgid "assertRedirectContains"
msgstr ""

# File: docs/8.x/http-tests.md, line: 951
# File: docs/master/http-tests.md, line: 951
#. type: Plain text
msgid "Assert whether the response is redirecting to a URI that contains the given string:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 953
# File: docs/master/http-tests.md, line: 953
#. type: Plain text
#, no-wrap
msgid "    $response->assertRedirectContains($string);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 955
# File: docs/master/http-tests.md, line: 955
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-redirect-to-signed-route\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 955
# File: docs/master/http-tests.md, line: 955
#. type: Title ####
#, no-wrap
msgid "assertRedirectToSignedRoute"
msgstr ""

# File: docs/8.x/http-tests.md, line: 958
# File: docs/master/http-tests.md, line: 958
#. type: Plain text
msgid "Assert that the response is a redirect to the given signed route:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 960
# File: docs/master/http-tests.md, line: 960
#. type: Plain text
#, no-wrap
msgid "    $response->assertRedirectToSignedRoute($name = null, $parameters = []);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 962
# File: docs/master/http-tests.md, line: 962
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 962
# File: docs/master/http-tests.md, line: 962
#. type: Title ####
#, no-wrap
msgid "assertSee"
msgstr ""

# File: docs/8.x/http-tests.md, line: 965
# File: docs/master/http-tests.md, line: 965
#. type: Plain text
msgid "Assert that the given string is contained within the response. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 967
# File: docs/master/http-tests.md, line: 967
#. type: Plain text
#, no-wrap
msgid "    $response->assertSee($value, $escaped = true);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 969
# File: docs/master/http-tests.md, line: 969
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-in-order\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 969
# File: docs/master/http-tests.md, line: 969
#. type: Title ####
#, no-wrap
msgid "assertSeeInOrder"
msgstr ""

# File: docs/8.x/http-tests.md, line: 972
# File: docs/master/http-tests.md, line: 972
#. type: Plain text
msgid "Assert that the given strings are contained in order within the response. This assertion will automatically escape the given strings unless you pass a second argument of `false`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 974
# File: docs/master/http-tests.md, line: 974
#. type: Plain text
#, no-wrap
msgid "    $response->assertSeeInOrder(array $values, $escaped = true);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 976
# File: docs/master/http-tests.md, line: 976
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-text\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 976
# File: docs/master/http-tests.md, line: 976
#. type: Title ####
#, no-wrap
msgid "assertSeeText"
msgstr ""

# File: docs/8.x/http-tests.md, line: 979
# File: docs/master/http-tests.md, line: 979
#. type: Plain text
msgid "Assert that the given string is contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 981
# File: docs/master/http-tests.md, line: 981
#. type: Plain text
#, no-wrap
msgid "    $response->assertSeeText($value, $escaped = true);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 983
# File: docs/master/http-tests.md, line: 983
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-see-text-in-order\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 983
# File: docs/master/http-tests.md, line: 983
#. type: Title ####
#, no-wrap
msgid "assertSeeTextInOrder"
msgstr ""

# File: docs/8.x/http-tests.md, line: 986
# File: docs/master/http-tests.md, line: 986
#. type: Plain text
msgid "Assert that the given strings are contained in order within the response text. This assertion will automatically escape the given strings unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 988
# File: docs/master/http-tests.md, line: 988
#. type: Plain text
#, no-wrap
msgid "    $response->assertSeeTextInOrder(array $values, $escaped = true);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 990
# File: docs/master/http-tests.md, line: 990
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-has\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 990
# File: docs/master/http-tests.md, line: 990
#. type: Title ####
#, no-wrap
msgid "assertSessionHas"
msgstr ""

# File: docs/8.x/http-tests.md, line: 993
# File: docs/master/http-tests.md, line: 993
#. type: Plain text
msgid "Assert that the session contains the given piece of data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 995
# File: docs/master/http-tests.md, line: 995
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHas($key, $value = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 997
# File: docs/master/http-tests.md, line: 997
#. type: Plain text
msgid "If needed, a closure can be provided as the second argument to the `assertSessionHas` method. The assertion will pass if the closure returns `true`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1001
# File: docs/master/http-tests.md, line: 1001
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHas($key, function ($value) {\n"
"        return $value->name === 'Taylor Otwell';\n"
"    });\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1003
# File: docs/master/http-tests.md, line: 1003
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-has-input\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1003
# File: docs/master/http-tests.md, line: 1003
#. type: Title ####
#, no-wrap
msgid "assertSessionHasInput"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1006
# File: docs/master/http-tests.md, line: 1006
#. type: Plain text
msgid "Assert that the session has a given value in the [flashed input array](/docs/{{version}}/responses#redirecting-with-flashed-session-data):"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1008
# File: docs/master/http-tests.md, line: 1008
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasInput($key, $value = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1010
# File: docs/master/http-tests.md, line: 1010
#. type: Plain text
msgid "If needed, a closure can be provided as the second argument to the `assertSessionHasInput` method. The assertion will pass if the closure returns `true`:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1014
# File: docs/master/http-tests.md, line: 1014
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasInput($key, function ($value) {\n"
"        return Crypt::decryptString($value) === 'secret';\n"
"    });\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1016
# File: docs/master/http-tests.md, line: 1016
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-has-all\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1016
# File: docs/master/http-tests.md, line: 1016
#. type: Title ####
#, no-wrap
msgid "assertSessionHasAll"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1019
# File: docs/master/http-tests.md, line: 1019
#. type: Plain text
msgid "Assert that the session contains a given array of key / value pairs:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1021
# File: docs/master/http-tests.md, line: 1021
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasAll(array $data);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1023
# File: docs/master/http-tests.md, line: 1023
#. type: Plain text
msgid "For example, if your application's session contains `name` and `status` keys, you may assert that both exist and have the specified values like so:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1028
# File: docs/master/http-tests.md, line: 1028
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'status' => 'active',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1030
# File: docs/master/http-tests.md, line: 1030
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-has-errors\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1030
# File: docs/master/http-tests.md, line: 1030
#. type: Title ####
#, no-wrap
msgid "assertSessionHasErrors"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1033
# File: docs/master/http-tests.md, line: 1033
#. type: Plain text
msgid "Assert that the session contains an error for the given `$keys`. If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key). This method should be used when testing routes that flash validation errors to the session instead of returning them as a JSON structure:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1037
# File: docs/master/http-tests.md, line: 1037
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasErrors(\n"
"        array $keys, $format = null, $errorBag = 'default'\n"
"    );\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1039
# File: docs/master/http-tests.md, line: 1039
#. type: Plain text
msgid "For example, to assert that the `name` and `email` fields have validation error messages that were flashed to the session, you may invoke the `assertSessionHasErrors` method like so:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1041
# File: docs/master/http-tests.md, line: 1041
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasErrors(['name', 'email']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1043
# File: docs/master/http-tests.md, line: 1043
#. type: Plain text
msgid "Or, you may assert that a given field has a particular validation error message:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1047
# File: docs/master/http-tests.md, line: 1047
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasErrors([\n"
"        'name' => 'The given name was invalid.'\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1049
# File: docs/master/http-tests.md, line: 1049
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-has-errors-in\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1049
# File: docs/master/http-tests.md, line: 1049
#. type: Title ####
#, no-wrap
msgid "assertSessionHasErrorsIn"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1052
# File: docs/master/http-tests.md, line: 1052
#. type: Plain text
msgid "Assert that the session contains an error for the given `$keys` within a specific [error bag](/docs/{{version}}/validation#named-error-bags). If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key), within the error bag:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1054
# File: docs/master/http-tests.md, line: 1054
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1056
# File: docs/master/http-tests.md, line: 1056
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-has-no-errors\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1056
# File: docs/master/http-tests.md, line: 1056
#. type: Title ####
#, no-wrap
msgid "assertSessionHasNoErrors"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1059
# File: docs/master/http-tests.md, line: 1059
#. type: Plain text
msgid "Assert that the session has no validation errors:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1061
# File: docs/master/http-tests.md, line: 1061
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionHasNoErrors();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1063
# File: docs/master/http-tests.md, line: 1063
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-doesnt-have-errors\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1063
# File: docs/master/http-tests.md, line: 1063
#. type: Title ####
#, no-wrap
msgid "assertSessionDoesntHaveErrors"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1066
# File: docs/master/http-tests.md, line: 1066
#. type: Plain text
msgid "Assert that the session has no validation errors for the given keys:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1068
# File: docs/master/http-tests.md, line: 1068
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionDoesntHaveErrors($keys = [], $format = null, $errorBag = 'default');\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1070
# File: docs/master/http-tests.md, line: 1070
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-session-missing\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1070
# File: docs/master/http-tests.md, line: 1070
#. type: Title ####
#, no-wrap
msgid "assertSessionMissing"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1073
# File: docs/master/http-tests.md, line: 1073
#. type: Plain text
msgid "Assert that the session does not contain the given key:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1075
# File: docs/master/http-tests.md, line: 1075
#. type: Plain text
#, no-wrap
msgid "    $response->assertSessionMissing($key);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1077
# File: docs/master/http-tests.md, line: 1077
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-status\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1077
# File: docs/master/http-tests.md, line: 1077
#. type: Title ####
#, no-wrap
msgid "assertStatus"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1080
# File: docs/master/http-tests.md, line: 1080
#. type: Plain text
msgid "Assert that the response has a given HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1082
# File: docs/master/http-tests.md, line: 1082
#. type: Plain text
#, no-wrap
msgid "    $response->assertStatus($code);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1084
# File: docs/master/http-tests.md, line: 1084
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-successful\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1084
# File: docs/master/http-tests.md, line: 1084
#. type: Title ####
#, no-wrap
msgid "assertSuccessful"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1087
# File: docs/master/http-tests.md, line: 1087
#. type: Plain text
#, no-wrap
msgid "Assert that the response has a successful (>= 200 and < 300) HTTP status code:\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1089
# File: docs/master/http-tests.md, line: 1089
#. type: Plain text
#, no-wrap
msgid "    $response->assertSuccessful();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1091
# File: docs/master/http-tests.md, line: 1091
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-unauthorized\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1091
# File: docs/master/http-tests.md, line: 1091
#. type: Title ####
#, no-wrap
msgid "assertUnauthorized"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1094
# File: docs/master/http-tests.md, line: 1094
#. type: Plain text
msgid "Assert that the response has an unauthorized (401) HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1096
# File: docs/master/http-tests.md, line: 1096
#. type: Plain text
#, no-wrap
msgid "    $response->assertUnauthorized();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1098
# File: docs/master/http-tests.md, line: 1098
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-unprocessable\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1098
# File: docs/master/http-tests.md, line: 1098
#. type: Title ####
#, no-wrap
msgid "assertUnprocessable"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1101
# File: docs/master/http-tests.md, line: 1101
#. type: Plain text
msgid "Assert that the response has an unprocessable entity (422) HTTP status code:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1103
# File: docs/master/http-tests.md, line: 1103
#. type: Plain text
#, no-wrap
msgid "    $response->assertUnprocessable();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1105
# File: docs/master/http-tests.md, line: 1105
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-valid\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1105
# File: docs/master/http-tests.md, line: 1105
#. type: Title ####
#, no-wrap
msgid "assertValid"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1108
# File: docs/master/http-tests.md, line: 1108
#. type: Plain text
msgid "Assert that the response has no validation errors for the given keys. This method may be used for asserting against responses where the validation errors are returned as a JSON structure or where the validation errors have been flashed to the session:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1111
# File: docs/master/http-tests.md, line: 1111
#. type: Plain text
#, no-wrap
msgid "    // Assert that no validation errors are present...\n"
"    $response->assertValid();\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1114
# File: docs/master/http-tests.md, line: 1114
#. type: Plain text
#, no-wrap
msgid "    // Assert that the given keys do not have validation errors...\n"
"    $response->assertValid(['name', 'email']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1116
# File: docs/master/http-tests.md, line: 1116
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-invalid\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1116
# File: docs/master/http-tests.md, line: 1116
#. type: Title ####
#, no-wrap
msgid "assertInvalid"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1119
# File: docs/master/http-tests.md, line: 1119
#. type: Plain text
msgid "Assert that the response has validation errors for the given keys. This method may be used for asserting against responses where the validation errors are returned as a JSON structure or where the validation errors have been flashed to the session:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1121
# File: docs/master/http-tests.md, line: 1121
#. type: Plain text
#, no-wrap
msgid "    $response->assertInvalid(['name', 'email']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1123
# File: docs/master/http-tests.md, line: 1123
#. type: Plain text
msgid "You may also assert that a given key has a particular validation error message. When doing so, you may provide the entire message or only a small portion of the message:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1128
# File: docs/master/http-tests.md, line: 1128
#. type: Plain text
#, no-wrap
msgid "    $response->assertInvalid([\n"
"        'name' => 'The name field is required.',\n"
"        'email' => 'valid email address',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1130
# File: docs/master/http-tests.md, line: 1130
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-view-has\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1130
# File: docs/master/http-tests.md, line: 1130
#. type: Title ####
#, no-wrap
msgid "assertViewHas"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1133
# File: docs/master/http-tests.md, line: 1133
#. type: Plain text
msgid "Assert that the response view contains given a piece of data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1135
# File: docs/master/http-tests.md, line: 1135
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewHas($key, $value = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1137
# File: docs/master/http-tests.md, line: 1137
#. type: Plain text
msgid "Passing a closure as the second argument to the `assertViewHas` method will allow you to inspect and make assertions against a particular piece of view data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1141
# File: docs/master/http-tests.md, line: 1141
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewHas('user', function (User $user) {\n"
"        return $user->name === 'Taylor';\n"
"    });\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1143
# File: docs/master/http-tests.md, line: 1143
#. type: Plain text
msgid "In addition, view data may be accessed as array variables on the response, allowing you to conveniently inspect it:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1145
# File: docs/master/http-tests.md, line: 1145
#. type: Plain text
#, no-wrap
msgid "    $this->assertEquals('Taylor', $response['name']);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1147
# File: docs/master/http-tests.md, line: 1147
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-view-has-all\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1147
# File: docs/master/http-tests.md, line: 1147
#. type: Title ####
#, no-wrap
msgid "assertViewHasAll"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1150
# File: docs/master/http-tests.md, line: 1150
#. type: Plain text
msgid "Assert that the response view has a given list of data:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1152
# File: docs/master/http-tests.md, line: 1152
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewHasAll(array $data);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1154
# File: docs/master/http-tests.md, line: 1154
#. type: Plain text
msgid "This method may be used to assert that the view simply contains data matching the given keys:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1159
# File: docs/master/http-tests.md, line: 1159
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewHasAll([\n"
"        'name',\n"
"        'email',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1161
# File: docs/master/http-tests.md, line: 1161
#. type: Plain text
msgid "Or, you may assert that the view data is present and has specific values:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1166
# File: docs/master/http-tests.md, line: 1166
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'email' => 'taylor@example.com,',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1168
# File: docs/master/http-tests.md, line: 1168
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-view-is\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1168
# File: docs/master/http-tests.md, line: 1168
#. type: Title ####
#, no-wrap
msgid "assertViewIs"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1171
# File: docs/master/http-tests.md, line: 1171
#. type: Plain text
msgid "Assert that the given view was returned by the route:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1173
# File: docs/master/http-tests.md, line: 1173
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewIs($value);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1175
# File: docs/master/http-tests.md, line: 1175
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-view-missing\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1175
# File: docs/master/http-tests.md, line: 1175
#. type: Title ####
#, no-wrap
msgid "assertViewMissing"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1178
# File: docs/master/http-tests.md, line: 1178
#. type: Plain text
msgid "Assert that the given data key was not made available to the view returned in the application's response:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1180
# File: docs/master/http-tests.md, line: 1180
#. type: Plain text
#, no-wrap
msgid "    $response->assertViewMissing($key);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1182
# File: docs/master/http-tests.md, line: 1182
#. type: Plain text
#, no-wrap
msgid "<a name=\"authentication-assertions\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1182
# File: docs/master/http-tests.md, line: 1182
#. type: Title ###
#, no-wrap
msgid "Authentication Assertions"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1185
# File: docs/master/http-tests.md, line: 1185
#. type: Plain text
msgid "Laravel also provides a variety of authentication related assertions that you may utilize within your application's feature tests. Note that these methods are invoked on the test class itself and not the `Illuminate\\Testing\\TestResponse` instance returned by methods such as `get` and `post`."
msgstr ""

# File: docs/8.x/http-tests.md, line: 1187
# File: docs/master/http-tests.md, line: 1187
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-authenticated\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1187
# File: docs/master/http-tests.md, line: 1187
#. type: Title ####
#, no-wrap
msgid "assertAuthenticated"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1190
# File: docs/master/http-tests.md, line: 1190
#. type: Plain text
msgid "Assert that a user is authenticated:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1192
# File: docs/master/http-tests.md, line: 1192
#. type: Plain text
#, no-wrap
msgid "    $this->assertAuthenticated($guard = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1194
# File: docs/master/http-tests.md, line: 1194
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-guest\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1194
# File: docs/master/http-tests.md, line: 1194
#. type: Title ####
#, no-wrap
msgid "assertGuest"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1197
# File: docs/master/http-tests.md, line: 1197
#. type: Plain text
msgid "Assert that a user is not authenticated:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1199
# File: docs/master/http-tests.md, line: 1199
#. type: Plain text
#, no-wrap
msgid "    $this->assertGuest($guard = null);\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1201
# File: docs/master/http-tests.md, line: 1201
#. type: Plain text
#, no-wrap
msgid "<a name=\"assert-authenticated-as\"></a>\n"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1201
# File: docs/master/http-tests.md, line: 1201
#. type: Title ####
#, no-wrap
msgid "assertAuthenticatedAs"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1204
# File: docs/master/http-tests.md, line: 1204
#. type: Plain text
msgid "Assert that a specific user is authenticated:"
msgstr ""

# File: docs/8.x/http-tests.md, line: 1205
# File: docs/master/http-tests.md, line: 1205
#. type: Plain text
#, no-wrap
msgid "    $this->assertAuthenticatedAs($user, $guard = null);\n"
msgstr ""

