# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"#-#-#-#-#  filesystem.pot (Laravel Documentation VERSION)  #-#-#-#-#\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"#-#-#-#-#  filesystem.pot (Laravel Documentation VERSION)  #-#-#-#-#\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
"#-#-#-#-#  filesystem.pot (Laravel Documentation VERSION)  #-#-#-#-#\n"
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-08 06:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/filesystem.md, line: 1
# File: docs/9.x/filesystem.md, line: 1
# File: docs/master/filesystem.md, line: 1
#, no-wrap
msgid "File Storage"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/filesystem.md, line: 22
# File: docs/9.x/filesystem.md, line: 21
# File: docs/master/filesystem.md, line: 21
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 22
#, no-wrap
msgid ""
"- [Configuration](#configuration)\n"
"    - [The Local Driver](#the-local-driver)\n"
"    - [The Public Disk](#the-public-disk)\n"
"    - [Driver Prerequisites](#driver-prerequisites)\n"
"    - [Amazon S3 Compatible Filesystems](#amazon-s3-compatible-filesystems)\n"
"    - [Caching](#caching)\n"
"- [Obtaining Disk Instances](#obtaining-disk-instances)\n"
"    - [On-Demand Disks](#on-demand-disks)\n"
"- [Retrieving Files](#retrieving-files)\n"
"    - [Downloading Files](#downloading-files)\n"
"    - [File URLs](#file-urls)\n"
"    - [File Metadata](#file-metadata)\n"
"- [Storing Files](#storing-files)\n"
"    - [File Uploads](#file-uploads)\n"
"    - [File Visibility](#file-visibility)\n"
"- [Deleting Files](#deleting-files)\n"
"- [Directories](#directories)\n"
"- [Custom Filesystems](#custom-filesystems)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 24
# File: docs/9.x/filesystem.md, line: 23
# File: docs/master/filesystem.md, line: 23
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 24
# File: docs/9.x/filesystem.md, line: 23
# File: docs/master/filesystem.md, line: 23
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 27
# File: docs/9.x/filesystem.md, line: 26
# File: docs/master/filesystem.md, line: 26
msgid "Laravel provides a powerful filesystem abstraction thanks to the wonderful [Flysystem](https://github.com/thephpleague/flysystem) PHP package by Frank de Jonge. The Laravel Flysystem integration provides simple drivers for working with local filesystems, SFTP, and Amazon S3. Even better, it's amazingly simple to switch between these storage options between your local development machine and production server as the API remains the same for each system."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 29
# File: docs/9.x/filesystem.md, line: 28
# File: docs/master/filesystem.md, line: 28
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 29
# File: docs/9.x/filesystem.md, line: 28
# File: docs/master/filesystem.md, line: 28
#, no-wrap
msgid "Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 32
# File: docs/9.x/filesystem.md, line: 31
# File: docs/master/filesystem.md, line: 31
msgid "Laravel's filesystem configuration file is located at `config/filesystems.php`. Within this file, you may configure all of your filesystem \"disks\". Each disk represents a particular storage driver and storage location. Example configurations for each supported driver are included in the configuration file so you can modify the configuration to reflect your storage preferences and credentials."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 34
# File: docs/9.x/filesystem.md, line: 33
# File: docs/master/filesystem.md, line: 33
msgid "The `local` driver interacts with files stored locally on the server running the Laravel application while the `s3` driver is used to write to Amazon's S3 cloud storage service."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 36
# File: docs/9.x/filesystem.md, line: 35
# File: docs/master/filesystem.md, line: 35
#, no-wrap
msgid "> {tip} You may configure as many disks as you like and may even have multiple disks that use the same driver.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 38
# File: docs/9.x/filesystem.md, line: 37
# File: docs/master/filesystem.md, line: 37
#, no-wrap
msgid "<a name=\"the-local-driver\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 38
# File: docs/9.x/filesystem.md, line: 37
# File: docs/master/filesystem.md, line: 37
#, no-wrap
msgid "The Local Driver"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 41
# File: docs/9.x/filesystem.md, line: 40
# File: docs/master/filesystem.md, line: 40
msgid "When using the `local` driver, all file operations are relative to the `root` directory defined in your `filesystems` configuration file. By default, this value is set to the `storage/app` directory. Therefore, the following method would write to `storage/app/example.txt`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 43
# File: docs/8.x/filesystem.md, line: 162
# File: docs/8.x/filesystem.md, line: 219
# File: docs/8.x/filesystem.md, line: 232
# File: docs/8.x/filesystem.md, line: 295
# File: docs/8.x/filesystem.md, line: 308
# File: docs/8.x/filesystem.md, line: 317
# File: docs/8.x/filesystem.md, line: 453
# File: docs/8.x/filesystem.md, line: 498
# File: docs/8.x/filesystem.md, line: 506
# File: docs/8.x/filesystem.md, line: 518
# File: docs/9.x/filesystem.md, line: 42
# File: docs/9.x/filesystem.md, line: 142
# File: docs/9.x/filesystem.md, line: 199
# File: docs/9.x/filesystem.md, line: 212
# File: docs/9.x/filesystem.md, line: 275
# File: docs/9.x/filesystem.md, line: 288
# File: docs/9.x/filesystem.md, line: 297
# File: docs/9.x/filesystem.md, line: 433
# File: docs/9.x/filesystem.md, line: 478
# File: docs/9.x/filesystem.md, line: 486
# File: docs/9.x/filesystem.md, line: 498
# File: docs/master/filesystem.md, line: 42
# File: docs/master/filesystem.md, line: 142
# File: docs/master/filesystem.md, line: 199
# File: docs/master/filesystem.md, line: 212
# File: docs/master/filesystem.md, line: 275
# File: docs/master/filesystem.md, line: 288
# File: docs/master/filesystem.md, line: 297
# File: docs/master/filesystem.md, line: 433
# File: docs/master/filesystem.md, line: 478
# File: docs/master/filesystem.md, line: 486
# File: docs/master/filesystem.md, line: 498
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Storage;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 45
# File: docs/9.x/filesystem.md, line: 44
# File: docs/master/filesystem.md, line: 44
#, no-wrap
msgid "    Storage::disk('local')->put('example.txt', 'Contents');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 47
# File: docs/9.x/filesystem.md, line: 46
# File: docs/master/filesystem.md, line: 46
#, no-wrap
msgid "<a name=\"the-public-disk\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 47
# File: docs/9.x/filesystem.md, line: 46
# File: docs/master/filesystem.md, line: 46
#, no-wrap
msgid "The Public Disk"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 50
# File: docs/9.x/filesystem.md, line: 49
# File: docs/master/filesystem.md, line: 49
msgid "The `public` disk included in your application's `filesystems` configuration file is intended for files that are going to be publicly accessible. By default, the `public` disk uses the `local` driver and stores its files in `storage/app/public`."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 52
# File: docs/9.x/filesystem.md, line: 51
# File: docs/master/filesystem.md, line: 51
msgid "To make these files accessible from the web, you should create a symbolic link from `public/storage` to `storage/app/public`. Utilizing this folder convention will keep your publicly accessible files in one directory that can be easily shared across deployments when using zero down-time deployment systems like [Envoyer](https://envoyer.io)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 54
# File: docs/9.x/filesystem.md, line: 53
# File: docs/master/filesystem.md, line: 53
msgid "To create the symbolic link, you may use the `storage:link` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 56
#, no-wrap
msgid "    php artisan storage:link\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 58
# File: docs/9.x/filesystem.md, line: 59
# File: docs/master/filesystem.md, line: 59
msgid "Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the `asset` helper:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 60
# File: docs/9.x/filesystem.md, line: 61
# File: docs/master/filesystem.md, line: 61
#, no-wrap
msgid "    echo asset('storage/file.txt');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 62
# File: docs/9.x/filesystem.md, line: 63
# File: docs/master/filesystem.md, line: 63
msgid "You may configure additional symbolic links in your `filesystems` configuration file. Each of the configured links will be created when you run the `storage:link` command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 67
# File: docs/9.x/filesystem.md, line: 68
# File: docs/master/filesystem.md, line: 68
#, no-wrap
msgid ""
"    'links' => [\n"
"        public_path('storage') => storage_path('app/public'),\n"
"        public_path('images') => storage_path('app/images'),\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 69
# File: docs/9.x/filesystem.md, line: 70
# File: docs/master/filesystem.md, line: 70
#, no-wrap
msgid "<a name=\"driver-prerequisites\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 69
# File: docs/9.x/filesystem.md, line: 70
# File: docs/master/filesystem.md, line: 70
#, no-wrap
msgid "Driver Prerequisites"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 72
# File: docs/9.x/filesystem.md, line: 73
# File: docs/master/filesystem.md, line: 73
#, no-wrap
msgid "<a name=\"composer-packages\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 72
# File: docs/9.x/filesystem.md, line: 73
# File: docs/master/filesystem.md, line: 73
#, no-wrap
msgid "Composer Packages"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 75
# File: docs/9.x/filesystem.md, line: 76
# File: docs/master/filesystem.md, line: 76
msgid "Before using the S3 or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 78
msgid "- Amazon S3: `composer require --with-all-dependencies league/flysystem-aws-s3-v3 \"^1.0\"` - SFTP: `composer require league/flysystem-sftp \"~1.0\"`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 80
msgid "In addition, you may choose to install a cached adapter for increased performance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 82
msgid "- CachedAdapter: `composer require league/flysystem-cached-adapter \"~1.0\"`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 84
# File: docs/9.x/filesystem.md, line: 81
# File: docs/master/filesystem.md, line: 81
#, no-wrap
msgid "<a name=\"s3-driver-configuration\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 84
# File: docs/9.x/filesystem.md, line: 81
# File: docs/master/filesystem.md, line: 81
#, no-wrap
msgid "S3 Driver Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 87
# File: docs/9.x/filesystem.md, line: 84
# File: docs/master/filesystem.md, line: 84
msgid "The S3 driver configuration information is located in your `config/filesystems.php` configuration file. This file contains an example configuration array for an S3 driver. You are free to modify this array with your own S3 configuration and credentials. For convenience, these environment variables match the naming convention used by the AWS CLI."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 89
# File: docs/9.x/filesystem.md, line: 86
# File: docs/master/filesystem.md, line: 86
#, no-wrap
msgid "<a name=\"ftp-driver-configuration\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 89
# File: docs/9.x/filesystem.md, line: 86
# File: docs/master/filesystem.md, line: 86
#, no-wrap
msgid "FTP Driver Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 92
# File: docs/9.x/filesystem.md, line: 89
# File: docs/master/filesystem.md, line: 89
msgid "Laravel's Flysystem integrations work great with FTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an FTP filesystem, you may use the configuration example below:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 98
# File: docs/9.x/filesystem.md, line: 95
# File: docs/master/filesystem.md, line: 95
#, no-wrap
msgid ""
"    'ftp' => [\n"
"        'driver' => 'ftp',\n"
"        'host' => env('FTP_HOST'),\n"
"        'username' => env('FTP_USERNAME'),\n"
"        'password' => env('FTP_PASSWORD'),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 106
# File: docs/9.x/filesystem.md, line: 103
# File: docs/master/filesystem.md, line: 103
#, no-wrap
msgid ""
"        // Optional FTP Settings...\n"
"        // 'port' => env('FTP_PORT', 21),\n"
"        // 'root' => env('FTP_ROOT'),\n"
"        // 'passive' => true,\n"
"        // 'ssl' => true,\n"
"        // 'timeout' => 30,\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 108
# File: docs/9.x/filesystem.md, line: 105
# File: docs/master/filesystem.md, line: 105
#, no-wrap
msgid "<a name=\"sftp-driver-configuration\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 108
# File: docs/9.x/filesystem.md, line: 105
# File: docs/master/filesystem.md, line: 105
#, no-wrap
msgid "SFTP Driver Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 111
# File: docs/9.x/filesystem.md, line: 108
# File: docs/master/filesystem.md, line: 108
msgid "Laravel's Flysystem integrations work great with SFTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an SFTP filesystem, you may use the configuration example below:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 115
# File: docs/9.x/filesystem.md, line: 112
# File: docs/master/filesystem.md, line: 112
#, no-wrap
msgid ""
"    'sftp' => [\n"
"        'driver' => 'sftp',\n"
"        'host' => env('SFTP_HOST'),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 119
# File: docs/9.x/filesystem.md, line: 116
# File: docs/master/filesystem.md, line: 116
#, no-wrap
msgid ""
"        // Settings for basic authentication...\n"
"        'username' => env('SFTP_USERNAME'),\n"
"        'password' => env('SFTP_PASSWORD'),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 123
# File: docs/9.x/filesystem.md, line: 120
# File: docs/master/filesystem.md, line: 120
#, no-wrap
msgid ""
"        // Settings for SSH key based authentication with encryption password...\n"
"        'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"        'password' => env('SFTP_PASSWORD'),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 129
# File: docs/9.x/filesystem.md, line: 126
# File: docs/master/filesystem.md, line: 126
#, no-wrap
msgid ""
"        // Optional SFTP Settings...\n"
"        // 'port' => env('SFTP_PORT', 22),\n"
"        // 'root' => env('SFTP_ROOT'),\n"
"        // 'timeout' => 30,\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 131
# File: docs/9.x/filesystem.md, line: 128
# File: docs/master/filesystem.md, line: 128
#, no-wrap
msgid "<a name=\"amazon-s3-compatible-filesystems\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 131
# File: docs/9.x/filesystem.md, line: 128
# File: docs/master/filesystem.md, line: 128
#, no-wrap
msgid "Amazon S3 Compatible Filesystems"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 134
# File: docs/9.x/filesystem.md, line: 131
# File: docs/master/filesystem.md, line: 131
msgid "By default, your application's `filesystems` configuration file contains a disk configuration for the `s3` disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as [MinIO](https://github.com/minio/minio) or [DigitalOcean Spaces](https://www.digitalocean.com/products/spaces/)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 136
# File: docs/9.x/filesystem.md, line: 133
# File: docs/master/filesystem.md, line: 133
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `url` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 138
# File: docs/9.x/filesystem.md, line: 135
# File: docs/master/filesystem.md, line: 135
#, no-wrap
msgid "    'endpoint' => env('AWS_ENDPOINT', 'https://minio:9000'),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 140
#, no-wrap
msgid "<a name=\"caching\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 140
#, no-wrap
msgid "Caching"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 143
msgid "To enable caching for a given disk, you may add a `cache` directive to the disk's configuration options. The `cache` option should be an array of caching options containing the `disk` name, the `expire` time in seconds, and the cache `prefix`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 146
#, no-wrap
msgid ""
"    's3' => [\n"
"        'driver' => 's3',\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 148
#, no-wrap
msgid "        // Other Disk Options...\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 155
#, no-wrap
msgid ""
"        'cache' => [\n"
"            'store' => 'memcached',\n"
"            'expire' => 600,\n"
"            'prefix' => 'cache-prefix',\n"
"        ],\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 157
# File: docs/9.x/filesystem.md, line: 137
# File: docs/master/filesystem.md, line: 137
#, no-wrap
msgid "<a name=\"obtaining-disk-instances\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 157
# File: docs/9.x/filesystem.md, line: 137
# File: docs/master/filesystem.md, line: 137
#, no-wrap
msgid "Obtaining Disk Instances"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 160
# File: docs/9.x/filesystem.md, line: 140
# File: docs/master/filesystem.md, line: 140
msgid "The `Storage` facade may be used to interact with any of your configured disks. For example, you may use the `put` method on the facade to store an avatar on the default disk. If you call methods on the `Storage` facade without first calling the `disk` method, the method will automatically be passed to the default disk:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 164
# File: docs/9.x/filesystem.md, line: 144
# File: docs/master/filesystem.md, line: 144
#, no-wrap
msgid "    Storage::put('avatars/1', $content);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 166
# File: docs/9.x/filesystem.md, line: 146
# File: docs/master/filesystem.md, line: 146
msgid "If your application interacts with multiple disks, you may use the `disk` method on the `Storage` facade to work with files on a particular disk:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 168
# File: docs/9.x/filesystem.md, line: 148
# File: docs/master/filesystem.md, line: 148
#, no-wrap
msgid "    Storage::disk('s3')->put('avatars/1', $content);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 170
# File: docs/9.x/filesystem.md, line: 150
# File: docs/master/filesystem.md, line: 150
#, no-wrap
msgid "<a name=\"on-demand-disks\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 170
# File: docs/9.x/filesystem.md, line: 150
# File: docs/master/filesystem.md, line: 150
#, no-wrap
msgid "On-Demand Disks"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 173
# File: docs/9.x/filesystem.md, line: 153
# File: docs/master/filesystem.md, line: 153
msgid "Sometimes you may wish to create a disk at runtime using a given configuration without that configuration actually being present in your application's `filesystems` configuration file. To accomplish this, you may pass a configuration array to the `Storage` facade's `build` method:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/filesystem.md, line: 174
# File: docs/9.x/filesystem.md, line: 154
# File: docs/master/filesystem.md, line: 154
#, no-wrap
msgid "php"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 174
# File: docs/9.x/filesystem.md, line: 154
# File: docs/master/filesystem.md, line: 154
#, no-wrap
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$disk = Storage::build([\n"
"    'driver' => 'local',\n"
"    'root' => '/path/to/root',\n"
"]);\n"
"\n"
"$disk->put('image.jpg', $content);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 186
# File: docs/9.x/filesystem.md, line: 166
# File: docs/master/filesystem.md, line: 166
#, no-wrap
msgid "<a name=\"retrieving-files\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 186
# File: docs/9.x/filesystem.md, line: 166
# File: docs/master/filesystem.md, line: 166
#, no-wrap
msgid "Retrieving Files"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 189
# File: docs/9.x/filesystem.md, line: 169
# File: docs/master/filesystem.md, line: 169
msgid "The `get` method may be used to retrieve the contents of a file. The raw string contents of the file will be returned by the method. Remember, all file paths should be specified relative to the disk's \"root\" location:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 191
# File: docs/9.x/filesystem.md, line: 171
# File: docs/master/filesystem.md, line: 171
#, no-wrap
msgid "    $contents = Storage::get('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 193
# File: docs/9.x/filesystem.md, line: 173
# File: docs/master/filesystem.md, line: 173
msgid "The `exists` method may be used to determine if a file exists on the disk:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 197
# File: docs/9.x/filesystem.md, line: 177
# File: docs/master/filesystem.md, line: 177
#, no-wrap
msgid ""
"    if (Storage::disk('s3')->exists('file.jpg')) {\n"
"        // ...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 199
# File: docs/9.x/filesystem.md, line: 179
# File: docs/master/filesystem.md, line: 179
msgid "The `missing` method may be used to determine if a file is missing from the disk:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 203
# File: docs/9.x/filesystem.md, line: 183
# File: docs/master/filesystem.md, line: 183
#, no-wrap
msgid ""
"    if (Storage::disk('s3')->missing('file.jpg')) {\n"
"        // ...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 205
# File: docs/9.x/filesystem.md, line: 185
# File: docs/master/filesystem.md, line: 185
#, no-wrap
msgid "<a name=\"downloading-files\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 205
# File: docs/9.x/filesystem.md, line: 185
# File: docs/master/filesystem.md, line: 185
#, no-wrap
msgid "Downloading Files"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 208
# File: docs/9.x/filesystem.md, line: 188
# File: docs/master/filesystem.md, line: 188
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 210
# File: docs/9.x/filesystem.md, line: 190
# File: docs/master/filesystem.md, line: 190
#, no-wrap
msgid "    return Storage::download('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 212
# File: docs/9.x/filesystem.md, line: 192
# File: docs/master/filesystem.md, line: 192
#, no-wrap
msgid "    return Storage::download('file.jpg', $name, $headers);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 214
# File: docs/9.x/filesystem.md, line: 194
# File: docs/master/filesystem.md, line: 194
#, no-wrap
msgid "<a name=\"file-urls\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 214
# File: docs/9.x/filesystem.md, line: 194
# File: docs/master/filesystem.md, line: 194
#, no-wrap
msgid "File URLs"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 217
# File: docs/9.x/filesystem.md, line: 197
# File: docs/master/filesystem.md, line: 197
msgid "You may use the `url` method to get the URL for a given file. If you are using the `local` driver, this will typically just prepend `/storage` to the given path and return a relative URL to the file. If you are using the `s3` driver, the fully qualified remote URL will be returned:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 221
# File: docs/9.x/filesystem.md, line: 201
# File: docs/master/filesystem.md, line: 201
#, no-wrap
msgid "    $url = Storage::url('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 223
# File: docs/9.x/filesystem.md, line: 203
# File: docs/master/filesystem.md, line: 203
msgid "When using the `local` driver, all files that should be publicly accessible should be placed in the `storage/app/public` directory. Furthermore, you should [create a symbolic link](#the-public-disk) at `public/storage` which points to the `storage/app/public` directory."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 225
# File: docs/9.x/filesystem.md, line: 205
# File: docs/master/filesystem.md, line: 205
#, no-wrap
msgid "> {note} When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 227
# File: docs/9.x/filesystem.md, line: 207
# File: docs/master/filesystem.md, line: 207
#, no-wrap
msgid "<a name=\"temporary-urls\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 227
# File: docs/9.x/filesystem.md, line: 207
# File: docs/master/filesystem.md, line: 207
#, no-wrap
msgid "Temporary URLs"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 230
# File: docs/9.x/filesystem.md, line: 210
# File: docs/master/filesystem.md, line: 210
msgid "Using the `temporaryUrl` method, you may create temporary URLs to files stored using the `s3` driver. This method accepts a path and a `DateTime` instance specifying when the URL should expire:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 236
# File: docs/9.x/filesystem.md, line: 216
# File: docs/master/filesystem.md, line: 216
#, no-wrap
msgid ""
"    $url = Storage::temporaryUrl(\n"
"        'file.jpg', now()->addMinutes(5)\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 238
# File: docs/9.x/filesystem.md, line: 218
# File: docs/master/filesystem.md, line: 218
msgid "If you need to specify additional [S3 request parameters](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests), you may pass the array of request parameters as the third argument to the `temporaryUrl` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 247
# File: docs/9.x/filesystem.md, line: 227
# File: docs/master/filesystem.md, line: 227
#, no-wrap
msgid ""
"    $url = Storage::temporaryUrl(\n"
"        'file.jpg',\n"
"        now()->addMinutes(5),\n"
"        [\n"
"            'ResponseContentType' => 'application/octet-stream',\n"
"            'ResponseContentDisposition' => 'attachment; filename=file2.jpg',\n"
"        ]\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 249
# File: docs/9.x/filesystem.md, line: 229
# File: docs/master/filesystem.md, line: 229
msgid "If you need to customize how temporary URLs are created for a specific storage disk, you can use the `buildTemporaryUrlsUsing` method. For example, this can be useful if you have a controller that allows you to download files stored via a disk that doesn't typically support temporary URLs. Usually, this method should be called from the `boot` method of a service provider:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 251
# File: docs/8.x/filesystem.md, line: 366
# File: docs/8.x/filesystem.md, line: 558
# File: docs/9.x/filesystem.md, line: 231
# File: docs/9.x/filesystem.md, line: 346
# File: docs/9.x/filesystem.md, line: 540
# File: docs/master/filesystem.md, line: 231
# File: docs/master/filesystem.md, line: 346
# File: docs/master/filesystem.md, line: 540
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 253
# File: docs/8.x/filesystem.md, line: 560
# File: docs/9.x/filesystem.md, line: 233
# File: docs/9.x/filesystem.md, line: 542
# File: docs/master/filesystem.md, line: 233
# File: docs/master/filesystem.md, line: 542
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 257
# File: docs/9.x/filesystem.md, line: 237
# File: docs/master/filesystem.md, line: 237
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Illuminate\\Support\\Facades\\URL;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 276
# File: docs/9.x/filesystem.md, line: 256
# File: docs/master/filesystem.md, line: 256
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Storage::disk('local')->buildTemporaryUrlsUsing(function ($path, $expiration, $options) {\n"
"                return URL::temporarySignedRoute(\n"
"                    'files.download',\n"
"                    $expiration,\n"
"                    array_merge($options, ['path' => $path])\n"
"                );\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 278
# File: docs/9.x/filesystem.md, line: 258
# File: docs/master/filesystem.md, line: 258
#, no-wrap
msgid "<a name=\"url-host-customization\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 278
# File: docs/9.x/filesystem.md, line: 258
# File: docs/master/filesystem.md, line: 258
#, no-wrap
msgid "URL Host Customization"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 281
# File: docs/9.x/filesystem.md, line: 261
# File: docs/master/filesystem.md, line: 261
msgid "If you would like to pre-define the host for URLs generated using the `Storage` facade, you may add a `url` option to the disk's configuration array:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 288
# File: docs/9.x/filesystem.md, line: 268
# File: docs/master/filesystem.md, line: 268
#, no-wrap
msgid ""
"    'public' => [\n"
"        'driver' => 'local',\n"
"        'root' => storage_path('app/public'),\n"
"        'url' => env('APP_URL').'/storage',\n"
"        'visibility' => 'public',\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 290
# File: docs/9.x/filesystem.md, line: 270
# File: docs/master/filesystem.md, line: 270
#, no-wrap
msgid "<a name=\"file-metadata\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 290
# File: docs/9.x/filesystem.md, line: 270
# File: docs/master/filesystem.md, line: 270
#, no-wrap
msgid "File Metadata"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 293
# File: docs/9.x/filesystem.md, line: 273
# File: docs/master/filesystem.md, line: 273
msgid "In addition to reading and writing files, Laravel can also provide information about the files themselves. For example, the `size` method may be used to get the size of a file in bytes:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 297
# File: docs/9.x/filesystem.md, line: 277
# File: docs/master/filesystem.md, line: 277
#, no-wrap
msgid "    $size = Storage::size('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 299
# File: docs/9.x/filesystem.md, line: 279
# File: docs/master/filesystem.md, line: 279
msgid "The `lastModified` method returns the UNIX timestamp of the last time the file was modified:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 301
# File: docs/9.x/filesystem.md, line: 281
# File: docs/master/filesystem.md, line: 281
#, no-wrap
msgid "    $time = Storage::lastModified('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 303
# File: docs/9.x/filesystem.md, line: 283
# File: docs/master/filesystem.md, line: 283
#, no-wrap
msgid "<a name=\"file-paths\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 303
# File: docs/9.x/filesystem.md, line: 283
# File: docs/master/filesystem.md, line: 283
#, no-wrap
msgid "File Paths"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 306
# File: docs/9.x/filesystem.md, line: 286
# File: docs/master/filesystem.md, line: 286
msgid "You may use the `path` method to get the path for a given file. If you are using the `local` driver, this will return the absolute path to the file. If you are using the `s3` driver, this method will return the relative path to the file in the S3 bucket:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 310
# File: docs/9.x/filesystem.md, line: 290
# File: docs/master/filesystem.md, line: 290
#, no-wrap
msgid "    $path = Storage::path('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 312
# File: docs/9.x/filesystem.md, line: 292
# File: docs/master/filesystem.md, line: 292
#, no-wrap
msgid "<a name=\"storing-files\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 312
# File: docs/9.x/filesystem.md, line: 292
# File: docs/master/filesystem.md, line: 292
#, no-wrap
msgid "Storing Files"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 315
# File: docs/9.x/filesystem.md, line: 295
# File: docs/master/filesystem.md, line: 295
msgid "The `put` method may be used to store file contents on a disk. You may also pass a PHP `resource` to the `put` method, which will use Flysystem's underlying stream support. Remember, all file paths should be specified relative to the \"root\" location configured for the disk:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 319
# File: docs/9.x/filesystem.md, line: 299
# File: docs/master/filesystem.md, line: 299
#, no-wrap
msgid "    Storage::put('file.jpg', $contents);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 321
# File: docs/9.x/filesystem.md, line: 301
# File: docs/master/filesystem.md, line: 301
#, no-wrap
msgid "    Storage::put('file.jpg', $resource);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 323
# File: docs/9.x/filesystem.md, line: 303
# File: docs/master/filesystem.md, line: 303
#, no-wrap
msgid "<a name=\"automatic-streaming\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 323
# File: docs/9.x/filesystem.md, line: 303
# File: docs/master/filesystem.md, line: 303
#, no-wrap
msgid "Automatic Streaming"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 326
# File: docs/9.x/filesystem.md, line: 306
# File: docs/master/filesystem.md, line: 306
msgid "Streaming files to storage offers significantly reduced memory usage. If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the `putFile` or `putFileAs` method. This method accepts either an `Illuminate\\Http\\File` or `Illuminate\\Http\\UploadedFile` instance and will automatically stream the file to your desired location:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 329
# File: docs/9.x/filesystem.md, line: 309
# File: docs/master/filesystem.md, line: 309
#, no-wrap
msgid ""
"    use Illuminate\\Http\\File;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 332
# File: docs/9.x/filesystem.md, line: 312
# File: docs/master/filesystem.md, line: 312
#, no-wrap
msgid ""
"    // Automatically generate a unique ID for filename...\n"
"    $path = Storage::putFile('photos', new File('/path/to/photo'));\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 335
# File: docs/9.x/filesystem.md, line: 315
# File: docs/master/filesystem.md, line: 315
#, no-wrap
msgid ""
"    // Manually specify a filename...\n"
"    $path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 337
# File: docs/9.x/filesystem.md, line: 317
# File: docs/master/filesystem.md, line: 317
msgid "There are a few important things to note about the `putFile` method. Note that we only specified a directory name and not a filename. By default, the `putFile` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `putFile` method so you can store the path, including the generated filename, in your database."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 339
# File: docs/9.x/filesystem.md, line: 319
# File: docs/master/filesystem.md, line: 319
msgid "The `putFile` and `putFileAs` methods also accept an argument to specify the \"visibility\" of the stored file. This is particularly useful if you are storing the file on a cloud disk such as Amazon S3 and would like the file to be publicly accessible via generated URLs:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 341
# File: docs/9.x/filesystem.md, line: 321
# File: docs/master/filesystem.md, line: 321
#, no-wrap
msgid "    Storage::putFile('photos', new File('/path/to/photo'), 'public');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 343
# File: docs/9.x/filesystem.md, line: 323
# File: docs/master/filesystem.md, line: 323
#, no-wrap
msgid "<a name=\"prepending-appending-to-files\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 343
# File: docs/9.x/filesystem.md, line: 323
# File: docs/master/filesystem.md, line: 323
#, no-wrap
msgid "Prepending & Appending To Files"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 346
# File: docs/9.x/filesystem.md, line: 326
# File: docs/master/filesystem.md, line: 326
msgid "The `prepend` and `append` methods allow you to write to the beginning or end of a file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 348
# File: docs/9.x/filesystem.md, line: 328
# File: docs/master/filesystem.md, line: 328
#, no-wrap
msgid "    Storage::prepend('file.log', 'Prepended Text');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 350
# File: docs/9.x/filesystem.md, line: 330
# File: docs/master/filesystem.md, line: 330
#, no-wrap
msgid "    Storage::append('file.log', 'Appended Text');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 352
# File: docs/9.x/filesystem.md, line: 332
# File: docs/master/filesystem.md, line: 332
#, no-wrap
msgid "<a name=\"copying-moving-files\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 352
# File: docs/9.x/filesystem.md, line: 332
# File: docs/master/filesystem.md, line: 332
#, no-wrap
msgid "Copying & Moving Files"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 355
# File: docs/9.x/filesystem.md, line: 335
# File: docs/master/filesystem.md, line: 335
msgid "The `copy` method may be used to copy an existing file to a new location on the disk, while the `move` method may be used to rename or move an existing file to a new location:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 357
# File: docs/9.x/filesystem.md, line: 337
# File: docs/master/filesystem.md, line: 337
#, no-wrap
msgid "    Storage::copy('old/file.jpg', 'new/file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 359
# File: docs/9.x/filesystem.md, line: 339
# File: docs/master/filesystem.md, line: 339
#, no-wrap
msgid "    Storage::move('old/file.jpg', 'new/file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 361
# File: docs/9.x/filesystem.md, line: 341
# File: docs/master/filesystem.md, line: 341
#, no-wrap
msgid "<a name=\"file-uploads\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 361
# File: docs/9.x/filesystem.md, line: 341
# File: docs/master/filesystem.md, line: 341
#, no-wrap
msgid "File Uploads"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 364
# File: docs/9.x/filesystem.md, line: 344
# File: docs/master/filesystem.md, line: 344
msgid "In web applications, one of the most common use-cases for storing files is storing user uploaded files such as photos and documents. Laravel makes it very easy to store uploaded files using the `store` method on an uploaded file instance. Call the `store` method with the path at which you wish to store the uploaded file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 368
# File: docs/9.x/filesystem.md, line: 348
# File: docs/master/filesystem.md, line: 348
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 371
# File: docs/9.x/filesystem.md, line: 351
# File: docs/master/filesystem.md, line: 351
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 383
# File: docs/9.x/filesystem.md, line: 363
# File: docs/master/filesystem.md, line: 363
#, no-wrap
msgid ""
"    class UserAvatarController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the avatar for the user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            $path = $request->file('avatar')->store('avatars');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 387
# File: docs/9.x/filesystem.md, line: 367
# File: docs/master/filesystem.md, line: 367
#, no-wrap
msgid ""
"            return $path;\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 389
# File: docs/9.x/filesystem.md, line: 369
# File: docs/master/filesystem.md, line: 369
msgid "There are a few important things to note about this example. Note that we only specified a directory name, not a filename. By default, the `store` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `store` method so you can store the path, including the generated filename, in your database."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 391
# File: docs/9.x/filesystem.md, line: 371
# File: docs/master/filesystem.md, line: 371
msgid "You may also call the `putFile` method on the `Storage` facade to perform the same file storage operation as the example above:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 393
# File: docs/9.x/filesystem.md, line: 373
# File: docs/master/filesystem.md, line: 373
#, no-wrap
msgid "    $path = Storage::putFile('avatars', $request->file('avatar'));\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 395
# File: docs/9.x/filesystem.md, line: 375
# File: docs/master/filesystem.md, line: 375
#, no-wrap
msgid "<a name=\"specifying-a-file-name\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 395
# File: docs/9.x/filesystem.md, line: 375
# File: docs/master/filesystem.md, line: 375
#, no-wrap
msgid "Specifying A File Name"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 398
# File: docs/9.x/filesystem.md, line: 378
# File: docs/master/filesystem.md, line: 378
msgid "If you do not want a filename to be automatically assigned to your stored file, you may use the `storeAs` method, which receives the path, the filename, and the (optional) disk as its arguments:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 402
# File: docs/9.x/filesystem.md, line: 382
# File: docs/master/filesystem.md, line: 382
#, no-wrap
msgid ""
"    $path = $request->file('avatar')->storeAs(\n"
"        'avatars', $request->user()->id\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 404
# File: docs/9.x/filesystem.md, line: 384
# File: docs/master/filesystem.md, line: 384
msgid "You may also use the `putFileAs` method on the `Storage` facade, which will perform the same file storage operation as the example above:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 408
# File: docs/9.x/filesystem.md, line: 388
# File: docs/master/filesystem.md, line: 388
#, no-wrap
msgid ""
"    $path = Storage::putFileAs(\n"
"        'avatars', $request->file('avatar'), $request->user()->id\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 410
# File: docs/9.x/filesystem.md, line: 390
# File: docs/master/filesystem.md, line: 390
#, no-wrap
msgid "> {note} Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\Util::normalizePath` method.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 412
# File: docs/9.x/filesystem.md, line: 392
# File: docs/master/filesystem.md, line: 392
#, no-wrap
msgid "<a name=\"specifying-a-disk\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 412
# File: docs/9.x/filesystem.md, line: 392
# File: docs/master/filesystem.md, line: 392
#, no-wrap
msgid "Specifying A Disk"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 415
# File: docs/9.x/filesystem.md, line: 395
# File: docs/master/filesystem.md, line: 395
msgid "By default, this uploaded file's `store` method will use your default disk. If you would like to specify another disk, pass the disk name as the second argument to the `store` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 419
# File: docs/9.x/filesystem.md, line: 399
# File: docs/master/filesystem.md, line: 399
#, no-wrap
msgid ""
"    $path = $request->file('avatar')->store(\n"
"        'avatars/'.$request->user()->id, 's3'\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 421
# File: docs/9.x/filesystem.md, line: 401
# File: docs/master/filesystem.md, line: 401
msgid "If you are using the `storeAs` method, you may pass the disk name as the third argument to the method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 427
# File: docs/9.x/filesystem.md, line: 407
# File: docs/master/filesystem.md, line: 407
#, no-wrap
msgid ""
"    $path = $request->file('avatar')->storeAs(\n"
"        'avatars',\n"
"        $request->user()->id,\n"
"        's3'\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 429
# File: docs/9.x/filesystem.md, line: 409
# File: docs/master/filesystem.md, line: 409
#, no-wrap
msgid "<a name=\"other-uploaded-file-information\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 429
# File: docs/9.x/filesystem.md, line: 409
# File: docs/master/filesystem.md, line: 409
#, no-wrap
msgid "Other Uploaded File Information"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 432
# File: docs/9.x/filesystem.md, line: 412
# File: docs/master/filesystem.md, line: 412
msgid "If you would like to get the original name and extension of the uploaded file, you may do so using the `getClientOriginalName` and `getClientOriginalExtension` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 434
# File: docs/8.x/filesystem.md, line: 441
# File: docs/9.x/filesystem.md, line: 414
# File: docs/9.x/filesystem.md, line: 421
# File: docs/master/filesystem.md, line: 414
# File: docs/master/filesystem.md, line: 421
#, no-wrap
msgid "    $file = $request->file('avatar');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 437
# File: docs/9.x/filesystem.md, line: 417
# File: docs/master/filesystem.md, line: 417
#, no-wrap
msgid ""
"    $name = $file->getClientOriginalName();\n"
"    $extension = $file->getClientOriginalExtension();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 439
# File: docs/9.x/filesystem.md, line: 419
# File: docs/master/filesystem.md, line: 419
msgid "However, keep in mind that the `getClientOriginalName` and `getClientOriginalExtension` methods are considered unsafe, as the file name and extension may be tampered with by a malicious user. For this reason, you should typically prefer the `hashName` and `extension` methods to get a name and an extension for the given file upload:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 444
# File: docs/9.x/filesystem.md, line: 424
# File: docs/master/filesystem.md, line: 424
#, no-wrap
msgid ""
"    $name = $file->hashName(); // Generate a unique, random name...\n"
"    $extension = $file->extension(); // Determine the file's extension based on the file's MIME type...\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 446
# File: docs/9.x/filesystem.md, line: 426
# File: docs/master/filesystem.md, line: 426
#, no-wrap
msgid "<a name=\"file-visibility\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/filesystem.md, line: 446
# File: docs/9.x/filesystem.md, line: 426
# File: docs/master/filesystem.md, line: 426
#, no-wrap
msgid "File Visibility"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 449
# File: docs/9.x/filesystem.md, line: 429
# File: docs/master/filesystem.md, line: 429
msgid "In Laravel's Flysystem integration, \"visibility\" is an abstraction of file permissions across multiple platforms. Files may either be declared `public` or `private`. When a file is declared `public`, you are indicating that the file should generally be accessible to others. For example, when using the S3 driver, you may retrieve URLs for `public` files."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 451
# File: docs/9.x/filesystem.md, line: 431
# File: docs/master/filesystem.md, line: 431
msgid "You can set the visibility when writing the file via the `put` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 455
# File: docs/9.x/filesystem.md, line: 435
# File: docs/master/filesystem.md, line: 435
#, no-wrap
msgid "    Storage::put('file.jpg', $contents, 'public');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 457
# File: docs/9.x/filesystem.md, line: 437
# File: docs/master/filesystem.md, line: 437
msgid "If the file has already been stored, its visibility can be retrieved and set via the `getVisibility` and `setVisibility` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 459
# File: docs/9.x/filesystem.md, line: 439
# File: docs/master/filesystem.md, line: 439
#, no-wrap
msgid "    $visibility = Storage::getVisibility('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 461
# File: docs/9.x/filesystem.md, line: 441
# File: docs/master/filesystem.md, line: 441
#, no-wrap
msgid "    Storage::setVisibility('file.jpg', 'public');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 463
# File: docs/9.x/filesystem.md, line: 443
# File: docs/master/filesystem.md, line: 443
msgid "When interacting with uploaded files, you may use the `storePublicly` and `storePubliclyAs` methods to store the uploaded file with `public` visibility:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 465
# File: docs/9.x/filesystem.md, line: 445
# File: docs/master/filesystem.md, line: 445
#, no-wrap
msgid "    $path = $request->file('avatar')->storePublicly('avatars', 's3');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 471
# File: docs/9.x/filesystem.md, line: 451
# File: docs/master/filesystem.md, line: 451
#, no-wrap
msgid ""
"    $path = $request->file('avatar')->storePubliclyAs(\n"
"        'avatars',\n"
"        $request->user()->id,\n"
"        's3'\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 473
# File: docs/9.x/filesystem.md, line: 453
# File: docs/master/filesystem.md, line: 453
#, no-wrap
msgid "<a name=\"local-files-and-visibility\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 473
# File: docs/9.x/filesystem.md, line: 453
# File: docs/master/filesystem.md, line: 453
#, no-wrap
msgid "Local Files & Visibility"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 476
# File: docs/9.x/filesystem.md, line: 456
# File: docs/master/filesystem.md, line: 456
msgid "When using the `local` driver, `public` [visibility](#file-visibility) translates to `0755` permissions for directories and `0644` permissions for files. You can modify the permissions mappings in your application's `filesystems` configuration file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 491
# File: docs/9.x/filesystem.md, line: 471
# File: docs/master/filesystem.md, line: 471
#, no-wrap
msgid ""
"    'local' => [\n"
"        'driver' => 'local',\n"
"        'root' => storage_path('app'),\n"
"        'permissions' => [\n"
"            'file' => [\n"
"                'public' => 0644,\n"
"                'private' => 0600,\n"
"            ],\n"
"            'dir' => [\n"
"                'public' => 0755,\n"
"                'private' => 0700,\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 493
# File: docs/9.x/filesystem.md, line: 473
# File: docs/master/filesystem.md, line: 473
#, no-wrap
msgid "<a name=\"deleting-files\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 493
# File: docs/9.x/filesystem.md, line: 473
# File: docs/master/filesystem.md, line: 473
#, no-wrap
msgid "Deleting Files"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 496
# File: docs/9.x/filesystem.md, line: 476
# File: docs/master/filesystem.md, line: 476
msgid "The `delete` method accepts a single filename or an array of files to delete:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 500
# File: docs/9.x/filesystem.md, line: 480
# File: docs/master/filesystem.md, line: 480
#, no-wrap
msgid "    Storage::delete('file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 502
# File: docs/9.x/filesystem.md, line: 482
# File: docs/master/filesystem.md, line: 482
#, no-wrap
msgid "    Storage::delete(['file.jpg', 'file2.jpg']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 504
# File: docs/9.x/filesystem.md, line: 484
# File: docs/master/filesystem.md, line: 484
msgid "If necessary, you may specify the disk that the file should be deleted from:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 508
# File: docs/9.x/filesystem.md, line: 488
# File: docs/master/filesystem.md, line: 488
#, no-wrap
msgid "    Storage::disk('s3')->delete('path/file.jpg');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 510
# File: docs/9.x/filesystem.md, line: 490
# File: docs/master/filesystem.md, line: 490
#, no-wrap
msgid "<a name=\"directories\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 510
# File: docs/9.x/filesystem.md, line: 490
# File: docs/master/filesystem.md, line: 490
#, no-wrap
msgid "Directories"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 513
# File: docs/9.x/filesystem.md, line: 493
# File: docs/master/filesystem.md, line: 493
#, no-wrap
msgid "<a name=\"get-all-files-within-a-directory\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 513
# File: docs/9.x/filesystem.md, line: 493
# File: docs/master/filesystem.md, line: 493
#, no-wrap
msgid "Get All Files Within A Directory"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 516
# File: docs/9.x/filesystem.md, line: 496
# File: docs/master/filesystem.md, line: 496
msgid "The `files` method returns an array of all of the files in a given directory. If you would like to retrieve a list of all files within a given directory including all subdirectories, you may use the `allFiles` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 520
# File: docs/9.x/filesystem.md, line: 500
# File: docs/master/filesystem.md, line: 500
#, no-wrap
msgid "    $files = Storage::files($directory);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 522
# File: docs/9.x/filesystem.md, line: 502
# File: docs/master/filesystem.md, line: 502
#, no-wrap
msgid "    $files = Storage::allFiles($directory);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 524
# File: docs/9.x/filesystem.md, line: 504
# File: docs/master/filesystem.md, line: 504
#, no-wrap
msgid "<a name=\"get-all-directories-within-a-directory\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 524
# File: docs/9.x/filesystem.md, line: 504
# File: docs/master/filesystem.md, line: 504
#, no-wrap
msgid "Get All Directories Within A Directory"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 527
# File: docs/9.x/filesystem.md, line: 507
# File: docs/master/filesystem.md, line: 507
msgid "The `directories` method returns an array of all the directories within a given directory. Additionally, you may use the `allDirectories` method to get a list of all directories within a given directory and all of its subdirectories:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 529
# File: docs/9.x/filesystem.md, line: 509
# File: docs/master/filesystem.md, line: 509
#, no-wrap
msgid "    $directories = Storage::directories($directory);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 531
# File: docs/9.x/filesystem.md, line: 511
# File: docs/master/filesystem.md, line: 511
#, no-wrap
msgid "    $directories = Storage::allDirectories($directory);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 533
# File: docs/9.x/filesystem.md, line: 513
# File: docs/master/filesystem.md, line: 513
#, no-wrap
msgid "<a name=\"create-a-directory\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 533
# File: docs/9.x/filesystem.md, line: 513
# File: docs/master/filesystem.md, line: 513
#, no-wrap
msgid "Create A Directory"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 536
# File: docs/9.x/filesystem.md, line: 516
# File: docs/master/filesystem.md, line: 516
msgid "The `makeDirectory` method will create the given directory, including any needed subdirectories:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 538
# File: docs/9.x/filesystem.md, line: 518
# File: docs/master/filesystem.md, line: 518
#, no-wrap
msgid "    Storage::makeDirectory($directory);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 540
# File: docs/9.x/filesystem.md, line: 520
# File: docs/master/filesystem.md, line: 520
#, no-wrap
msgid "<a name=\"delete-a-directory\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/filesystem.md, line: 540
# File: docs/9.x/filesystem.md, line: 520
# File: docs/master/filesystem.md, line: 520
#, no-wrap
msgid "Delete A Directory"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 543
# File: docs/9.x/filesystem.md, line: 523
# File: docs/master/filesystem.md, line: 523
msgid "Finally, the `deleteDirectory` method may be used to remove a directory and all of its files:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 545
# File: docs/9.x/filesystem.md, line: 525
# File: docs/master/filesystem.md, line: 525
#, no-wrap
msgid "    Storage::deleteDirectory($directory);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 547
# File: docs/9.x/filesystem.md, line: 527
# File: docs/master/filesystem.md, line: 527
#, no-wrap
msgid "<a name=\"custom-filesystems\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/filesystem.md, line: 547
# File: docs/9.x/filesystem.md, line: 527
# File: docs/master/filesystem.md, line: 527
#, no-wrap
msgid "Custom Filesystems"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 550
# File: docs/9.x/filesystem.md, line: 530
# File: docs/master/filesystem.md, line: 530
msgid "Laravel's Flysystem integration provides support for several \"drivers\" out of the box; however, Flysystem is not limited to these and has adapters for many other storage systems. You can create a custom driver if you want to use one of these additional adapters in your Laravel application."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 552
# File: docs/9.x/filesystem.md, line: 532
# File: docs/master/filesystem.md, line: 532
msgid "In order to define a custom filesystem you will need a Flysystem adapter. Let's add a community maintained Dropbox adapter to our project:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 554
#, no-wrap
msgid "    composer require spatie/flysystem-dropbox\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 556
# File: docs/9.x/filesystem.md, line: 538
# File: docs/master/filesystem.md, line: 538
msgid "Next, you can register the driver within the `boot` method of one of your application's [service providers](/docs/{{version}}/providers). To accomplish this, you should use the `extend` method of the `Storage` facade:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 566
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use League\\Flysystem\\Filesystem;\n"
"    use Spatie\\Dropbox\\Client as DropboxClient;\n"
"    use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 578
# File: docs/9.x/filesystem.md, line: 561
# File: docs/master/filesystem.md, line: 561
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 590
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Storage::extend('dropbox', function ($app, $config) {\n"
"                $client = new DropboxClient(\n"
"                    $config['authorization_token']\n"
"                );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 595
#, no-wrap
msgid ""
"                return new Filesystem(new DropboxAdapter($client));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 597
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `League\\Flysystem\\Filesystem`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/filesystem.md, line: 598
# File: docs/9.x/filesystem.md, line: 585
# File: docs/master/filesystem.md, line: 585
msgid "Once you have created and registered the extension's service provider, you may use the `dropbox` driver in your `config/filesystems.php` configuration file."
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 21
# File: docs/master/filesystem.md, line: 21
#, no-wrap
msgid ""
"- [Configuration](#configuration)\n"
"    - [The Local Driver](#the-local-driver)\n"
"    - [The Public Disk](#the-public-disk)\n"
"    - [Driver Prerequisites](#driver-prerequisites)\n"
"    - [Amazon S3 Compatible Filesystems](#amazon-s3-compatible-filesystems)\n"
"- [Obtaining Disk Instances](#obtaining-disk-instances)\n"
"    - [On-Demand Disks](#on-demand-disks)\n"
"- [Retrieving Files](#retrieving-files)\n"
"    - [Downloading Files](#downloading-files)\n"
"    - [File URLs](#file-urls)\n"
"    - [File Metadata](#file-metadata)\n"
"- [Storing Files](#storing-files)\n"
"    - [File Uploads](#file-uploads)\n"
"    - [File Visibility](#file-visibility)\n"
"- [Deleting Files](#deleting-files)\n"
"- [Directories](#directories)\n"
"- [Custom Filesystems](#custom-filesystems)\n"
msgstr ""
#
#. type: Code fence info string
# File: docs/9.x/filesystem.md, line: 54
# File: docs/9.x/filesystem.md, line: 533
# File: docs/master/filesystem.md, line: 54
# File: docs/master/filesystem.md, line: 533
#, no-wrap
msgid "shell"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 54
# File: docs/master/filesystem.md, line: 54
#, no-wrap
msgid "php artisan storage:link\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 79
# File: docs/master/filesystem.md, line: 79
msgid "- Amazon S3: `composer require --with-all-dependencies league/flysystem-aws-s3-v3 \"^3.0\"` - SFTP: `composer require league/flysystem-sftp-v3 \"^3.0\"`"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 533
# File: docs/master/filesystem.md, line: 533
#, no-wrap
msgid "composer require spatie/flysystem-dropbox\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 549
# File: docs/master/filesystem.md, line: 549
#, no-wrap
msgid ""
"    use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use League\\Flysystem\\Filesystem;\n"
"    use Spatie\\Dropbox\\Client as DropboxClient;\n"
"    use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 573
# File: docs/master/filesystem.md, line: 573
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Storage::extend('dropbox', function ($app, $config) {\n"
"                $adapter = new DropboxAdapter(new DropboxClient(\n"
"                    $config['authorization_token']\n"
"                ););\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 582
# File: docs/master/filesystem.md, line: 582
#, no-wrap
msgid ""
"                return new FilesystemAdapter(\n"
"                    new Filesystem($adapter, $config),\n"
"                    $adapter,\n"
"                    $config\n"
"                );\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/9.x/filesystem.md, line: 584
# File: docs/master/filesystem.md, line: 584
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `Illuminate\\Filesystem\\FilesystemAdapter`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""
