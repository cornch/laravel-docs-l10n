# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Cornch <cornch@cornch.dev>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title #
#: docs/master/billing.md:1
#, no-wrap
msgid "Laravel Cashier (Stripe)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Upgrading Cashier](#upgrading-cashier)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Installation](#installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Database Migrations](#database-migrations)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Billable Model](#billable-model)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[API Keys](#api-keys)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Currency Configuration](#currency-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Logging](#logging)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Customers](#customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Retrieving Customers](#retrieving-customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Creating Customers](#creating-customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Updating Customers](#updating-customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Billing Portal](#billing-portal)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Payment Methods](#payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Storing Payment Methods](#storing-payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Retrieving Payment Methods](#retrieving-payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid ""
"[Determining If A User Has A Payment Method](#check-for-a-payment-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid ""
"[Updating The Default Payment Method](#updating-the-default-payment-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Adding Payment Methods](#adding-payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Deleting Payment Methods](#deleting-payment-methods)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Subscriptions](#subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Creating Subscriptions](#creating-subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Checking Subscription Status](#checking-subscription-status)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Changing Plans](#changing-plans)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Subscription Quantity](#subscription-quantity)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Multiplan Subscriptions](#multiplan-subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Subscription Taxes](#subscription-taxes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Subscription Anchor Date](#subscription-anchor-date)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Cancelling Subscriptions](#cancelling-subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Resuming Subscriptions](#resuming-subscriptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Subscription Trials](#subscription-trials)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[With Payment Method Up Front](#with-payment-method-up-front)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Without Payment Method Up Front](#without-payment-method-up-front)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Extending Trials](#extending-trials)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Handling Stripe Webhooks](#handling-stripe-webhooks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Defining Webhook Event Handlers](#defining-webhook-event-handlers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Verifying Webhook Signatures](#verifying-webhook-signatures)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Single Charges](#single-charges)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Simple Charge](#simple-charge)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Charge With Invoice](#charge-with-invoice)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Refunding Charges](#refunding-charges)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Checkout](#checkout)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Product Checkouts](#product-checkouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Single Charge Checkouts](#single-charge-checkouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Subscription Checkouts](#subscription-checkouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Styling The Checkout Button](#styling-the-checkout-button)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Invoices](#invoices)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Retrieving Invoices](#retrieving-invoices)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Generating Invoice PDFs](#generating-invoice-pdfs)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Handling Failed Payments](#handling-failed-payments)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Strong Customer Authentication (SCA)](#strong-customer-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid ""
"[Payments Requiring Additional Confirmation](#payments-requiring-additional-"
"confirmation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/billing.md:59
msgid "[Off-session Payment Notifications](#off-session-payment-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Stripe SDK](#stripe-sdk)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:59
msgid "[Testing](#testing)"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:61
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:61
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:64
msgid ""
"Laravel Cashier provides an expressive, fluent interface to [Stripe's]"
"(https://stripe.com) subscription billing services. It handles almost all of "
"the boilerplate subscription billing code you are dreading writing. In "
"addition to basic subscription management, Cashier can handle coupons, "
"swapping subscription, subscription \"quantities\", cancellation grace "
"periods, and even generate invoice PDFs."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:66
#, no-wrap
msgid "<a name=\"upgrading-cashier\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:66
#, no-wrap
msgid "Upgrading Cashier"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:69
msgid ""
"When upgrading to a new version of Cashier, it's important that you "
"carefully review [the upgrade guide](https://github.com/laravel/cashier-"
"stripe/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:71
#, no-wrap
msgid "> {note} To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 12 utilizes Stripe API version `2020-03-02`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:73
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:73
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:76
msgid ""
"First, install the Cashier package for Stripe using the Composer package "
"manager:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:78
#, no-wrap
msgid "    composer require laravel/cashier\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:80
#, no-wrap
msgid "> {note} To ensure Cashier properly handles all Stripe events, remember to [set up Cashier's webhook handling](#handling-stripe-webhooks).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:82
#, no-wrap
msgid "<a name=\"database-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:82
#, no-wrap
msgid "Database Migrations"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:85
msgid ""
"Cashier's service provider registers its own database migration directory, "
"so remember to migrate your database after installing the package. The "
"Cashier migrations will add several columns to your `users` table as well as "
"create a new `subscriptions` table to hold all of your customer's "
"subscriptions:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:87
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:89
msgid ""
"If you need to overwrite the migrations that ship with Cashier, you can "
"publish them using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:91
#, no-wrap
msgid "    php artisan vendor:publish --tag=\"cashier-migrations\"\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:93
msgid ""
"If you would like to prevent Cashier's migrations from running entirely, you "
"may use the `ignoreMigrations` method provided by Cashier. Typically, this "
"method should be called in the `register` method of your "
"`AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:95 docs/master/billing.md:166
#: docs/master/billing.md:593
#, no-wrap
msgid "    use Laravel\\Cashier\\Cashier;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:105
#, no-wrap
msgid ""
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        Cashier::ignoreMigrations();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:107
#, no-wrap
msgid "> {note} Stripe recommends that any column used for storing Stripe identifiers should be case-sensitive. Therefore, you should ensure the column collation for the `stripe_id` column is set to `utf8_bin` when using MySQL. More information regarding this can be found in the [Stripe documentation](https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:109
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:109
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:112
#, no-wrap
msgid "<a name=\"billable-model\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:112
#, no-wrap
msgid "Billable Model"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:115
msgid ""
"Before using Cashier, add the `Billable` trait to your billable model "
"definition. Typically, this will be the `App\\Models\\User` model. This "
"trait provides various methods to allow you to perform common billing tasks, "
"such as creating subscriptions, applying coupons, and updating payment "
"method information:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:117
#, no-wrap
msgid "    use Laravel\\Cashier\\Billable;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:122
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use Billable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:124
msgid ""
"Cashier assumes your billable model will be the `App\\Models\\User` class "
"that ships with Laravel. If you wish to change this you can specify a "
"different model in your `.env` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:126
#, no-wrap
msgid "    CASHIER_MODEL=App\\Models\\User\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:128
#, no-wrap
msgid "> {note} If you're using a model other than Laravel's supplied `App\\Models\\User` model, you'll need to publish and alter the [Cashier migrations](#installation) provided to match your alternative model's table name.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:130
#, no-wrap
msgid "<a name=\"api-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:130
#, no-wrap
msgid "API Keys"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:133
msgid ""
"Next, you should configure your Stripe API keys in your application's `.env` "
"file. You can retrieve your Stripe API keys from the Stripe control panel:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:136
#, no-wrap
msgid ""
"    STRIPE_KEY=your-stripe-key\n"
"    STRIPE_SECRET=your-stripe-secret\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:138
#, no-wrap
msgid "<a name=\"currency-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:138
#, no-wrap
msgid "Currency Configuration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:141
msgid ""
"The default Cashier currency is United States Dollars (USD). You can change "
"the default currency by setting the `CASHIER_CURRENCY` environment variable "
"within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:143
#, no-wrap
msgid "    CASHIER_CURRENCY=eur\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:145
msgid ""
"In addition to configuring Cashier's currency, you may also specify a locale "
"to be used when formatting money values for display on invoices. Internally, "
"Cashier utilizes [PHP's `NumberFormatter` class](https://www.php.net/manual/"
"en/class.numberformatter.php) to set the currency locale:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:147
#, no-wrap
msgid "    CASHIER_CURRENCY_LOCALE=nl_BE\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:149
#, no-wrap
msgid "> {note} In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:151
#, no-wrap
msgid "<a name=\"logging\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:151
#, no-wrap
msgid "Logging"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:154
msgid ""
"Cashier allows you to specify the log channel to be used when logging all "
"Stripe related exceptions. You may specify the log channel by defining the "
"`CASHIER_LOGGER` environment variable within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:156
#, no-wrap
msgid "    CASHIER_LOGGER=stack\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:158
#, no-wrap
msgid "<a name=\"customers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:158
#, no-wrap
msgid "Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:161
#, no-wrap
msgid "<a name=\"retrieving-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:161
#, no-wrap
msgid "Retrieving Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:164
msgid ""
"You can retrieve a customer by their Stripe ID using the `Cashier::"
"findBillable` method. This method will return an instance of the billable "
"model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:168
#, no-wrap
msgid "    $user = Cashier::findBillable($stripeId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:170
#, no-wrap
msgid "<a name=\"creating-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:170
#, no-wrap
msgid "Creating Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:173
msgid ""
"Occasionally, you may wish to create a Stripe customer without beginning a "
"subscription. You may accomplish this using the `createAsStripeCustomer` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:175
#, no-wrap
msgid "    $stripeCustomer = $user->createAsStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:177
msgid ""
"Once the customer has been created in Stripe, you may begin a subscription "
"at a later date. You may provide an optional `$options` array to pass in any "
"additional [customer creation parameters that are supported by the Stripe "
"API](https://stripe.com/docs/api/customers/create):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:179
#, no-wrap
msgid "    $stripeCustomer = $user->createAsStripeCustomer($options);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:181
msgid ""
"You may use the `asStripeCustomer` method if you want to return the Stripe "
"customer object for a billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:183
#, no-wrap
msgid "    $stripeCustomer = $user->asStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:185
msgid ""
"The `createOrGetStripeCustomer` method may be used if you would like to "
"retrieve the Stripe customer object for a given billable model but are not "
"sure whether the billable model is already a customer within Stripe. This "
"method will create a new customer in Stripe if one does not already exist:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:187
#, no-wrap
msgid "    $stripeCustomer = $user->createOrGetStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:189
#, no-wrap
msgid "<a name=\"updating-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:189
#, no-wrap
msgid "Updating Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:192
msgid ""
"Occasionally, you may wish to update the Stripe customer directly with "
"additional information. You may accomplish this using the "
"`updateStripeCustomer` method. This method accepts an array of [customer "
"update options supported by the Stripe API](https://stripe.com/docs/api/"
"customers/update):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:194
#, no-wrap
msgid "    $stripeCustomer = $user->updateStripeCustomer($options);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:196
#, no-wrap
msgid "<a name=\"billing-portal\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:196
#, no-wrap
msgid "Billing Portal"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:199
msgid ""
"Stripe offers [an easy way to set up a billing portal](https://stripe.com/"
"docs/billing/subscriptions/customer-portal) so that your customer can manage "
"their subscription, payment methods, and view their billing history. You can "
"redirect your users to the billing portal by invoking the "
"`redirectToBillingPortal` method on the billable model from a controller or "
"route:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:201 docs/master/billing.md:209
#: docs/master/billing.md:422 docs/master/billing.md:711
#: docs/master/billing.md:887 docs/master/billing.md:939
#: docs/master/billing.md:1117 docs/master/billing.md:1211
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:205
#, no-wrap
msgid ""
"    Route::get('/billing-portal', function (Request $request) {\n"
"        return $request->user()->redirectToBillingPortal();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:207
msgid ""
"By default, when the user is finished managing their subscription, they will "
"be able to return to the `home` route of your application via a link within "
"the Stripe billing portal. You may provide a custom URL that the user should "
"return to by passing the URL as an argument to the `redirectToBillingPortal` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:213
#, no-wrap
msgid ""
"    Route::get('/billing-portal', function (Request $request) {\n"
"        return $request->user()->redirectToBillingPortal(route('billing'));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:215
msgid ""
"If you would like to generate the URL to the billing portal without "
"generating an HTTP redirect response, you may invoke the `billingPortalUrl` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:217
#, no-wrap
msgid "    $url = $request->user()->billingPortalUrl(route('billing'));\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:219
#, no-wrap
msgid "<a name=\"payment-methods\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:219
#, no-wrap
msgid "Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:222
#, no-wrap
msgid "<a name=\"storing-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:222
#, no-wrap
msgid "Storing Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:225
msgid ""
"In order to create subscriptions or perform \"one off\" charges with Stripe, "
"you will need to store a payment method and retrieve its identifier from "
"Stripe. The approach used to accomplish this differs based on whether you "
"plan to use the payment method for subscriptions or single charges, so we "
"will examine both below."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:227
#, no-wrap
msgid "<a name=\"payment-methods-for-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:227
#, no-wrap
msgid "Payment Methods For Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:230
msgid ""
"When storing a customer's credit card information for future use by a "
"subscription, the Stripe \"Setup Intents\" API must be used to securely "
"gather the customer's payment method details. A \"Setup Intent\" indicates "
"to Stripe the intention to charge a customer's payment method. Cashier's "
"`Billable` trait includes the `createSetupIntent` method to easily create a "
"new Setup Intent. You should invoke this method from the route or controller "
"that will render the form which gathers your customer's payment method "
"details:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:234
#, no-wrap
msgid ""
"    return view('update-payment-method', [\n"
"        'intent' => $user->createSetupIntent()\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:236
msgid ""
"After you have created the Setup Intent and passed it to the view, you "
"should attach its secret to the element that will gather the payment method. "
"For example, consider this \"update payment method\" form:"
msgstr ""

#. type: Fenced code block (html)
#: docs/master/billing.md:237
#, no-wrap
msgid ""
"<input id=\"card-holder-name\" type=\"text\">\n"
"\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n"
"\n"
"<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">\n"
"    Update Payment Method\n"
"</button>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:249
msgid ""
"Next, the Stripe.js library may be used to attach a [Stripe Element](https://"
"stripe.com/docs/stripe-js) to the form and securely gather the customer's "
"payment details:"
msgstr ""

#. type: Fenced code block (html)
#: docs/master/billing.md:250 docs/master/billing.md:310
#, no-wrap
msgid ""
"<script src=\"https://js.stripe.com/v3/\"></script>\n"
"\n"
"<script>\n"
"    const stripe = Stripe('stripe-public-key');\n"
"\n"
"    const elements = stripe.elements();\n"
"    const cardElement = elements.create('card');\n"
"\n"
"    cardElement.mount('#card-element');\n"
"</script>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:264
msgid ""
"Next, the card can be verified and a secure \"payment method identifier\" "
"can be retrieved from Stripe using [Stripe's `confirmCardSetup` method]"
"(https://stripe.com/docs/js/setup_intents/confirm_card_setup):"
msgstr ""

#. type: Fenced code block (js)
#: docs/master/billing.md:265
#, no-wrap
msgid ""
"const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"const clientSecret = cardButton.dataset.secret;\n"
"\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { setupIntent, error } = await stripe.confirmCardSetup(\n"
"        clientSecret, {\n"
"            payment_method: {\n"
"                card: cardElement,\n"
"                billing_details: { name: cardHolderName.value }\n"
"            }\n"
"        }\n"
"    );\n"
"\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:289
msgid ""
"After the card has been verified by Stripe, you may pass the resulting "
"`setupIntent.payment_method` identifier to your Laravel application, where "
"it can be attached to the customer. The payment method can either be [added "
"as a new payment method](#adding-payment-methods) or [used to update the "
"default payment method](#updating-the-default-payment-method). You can also "
"immediately use the payment method identifier to [create a new subscription]"
"(#creating-subscriptions)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:291
#, no-wrap
msgid "> {tip} If you would like more information about Setup Intents and gathering customer payment details please [review this overview provided by Stripe](https://stripe.com/docs/payments/save-and-reuse#php).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:293
#, no-wrap
msgid "<a name=\"payment-methods-for-single-charges\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:293
#, no-wrap
msgid "Payment Methods For Single Charges"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:296
msgid ""
"Of course, when making a single charge against a customer's payment method, "
"we will only need to use a payment method identifier once. Due to Stripe "
"limitations, you may not use the stored default payment method of a customer "
"for single charges. You must allow the customer to enter their payment "
"method details using the Stripe.js library. For example, consider the "
"following form:"
msgstr ""

#. type: Fenced code block (html)
#: docs/master/billing.md:297
#, no-wrap
msgid ""
"<input id=\"card-holder-name\" type=\"text\">\n"
"\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n"
"\n"
"<button id=\"card-button\">\n"
"    Process Payment\n"
"</button>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:309
msgid ""
"After defining such a form, the Stripe.js library may be used to attach a "
"[Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely "
"gather the customer's payment details:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:324
msgid ""
"Next, the card can be verified and a secure \"payment method identifier\" "
"can be retrieved from Stripe using [Stripe's `createPaymentMethod` method]"
"(https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method):"
msgstr ""

#. type: Fenced code block (js)
#: docs/master/billing.md:325
#, no-wrap
msgid ""
"const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { paymentMethod, error } = await stripe.createPaymentMethod(\n"
"        'card', cardElement, {\n"
"            billing_details: { name: cardHolderName.value }\n"
"        }\n"
"    );\n"
"\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:345
msgid ""
"If the card is verified successfully, you may pass the `paymentMethod.id` to "
"your Laravel application and process a [single charge](#simple-charge)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:347
#, no-wrap
msgid "<a name=\"retrieving-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:347
#, no-wrap
msgid "Retrieving Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:350
msgid ""
"The `paymentMethods` method on the billable model instance returns a "
"collection of `Laravel\\Cashier\\PaymentMethod` instances:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:352
#, no-wrap
msgid "    $paymentMethods = $user->paymentMethods();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:354
msgid ""
"To retrieve the customer's default payment method, the "
"`defaultPaymentMethod` method may be used:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:356
#, no-wrap
msgid "    $paymentMethod = $user->defaultPaymentMethod();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:358
msgid ""
"You can retrieve a specific payment method that is attached to the billable "
"model using the `findPaymentMethod` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:360
#, no-wrap
msgid "    $paymentMethod = $user->findPaymentMethod($paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:362
#, no-wrap
msgid "<a name=\"check-for-a-payment-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:362
#, no-wrap
msgid "Determining If A User Has A Payment Method"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:365
msgid ""
"To determine if a billable model has a default payment method attached to "
"their account, invoke the `hasDefaultPaymentMethod` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:369
#, no-wrap
msgid ""
"    if ($user->hasDefaultPaymentMethod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:371
msgid ""
"You may use the `hasPaymentMethod` method to determine if a billable model "
"has at least one payment method attached to their account:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:375
#, no-wrap
msgid ""
"    if ($user->hasPaymentMethod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:377
#, no-wrap
msgid "<a name=\"updating-the-default-payment-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:377
#, no-wrap
msgid "Updating The Default Payment Method"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:380
msgid ""
"The `updateDefaultPaymentMethod` method may be used to update a customer's "
"default payment method information. This method accepts a Stripe payment "
"method identifier and will assign the new payment method as the default "
"billing payment method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:382
#, no-wrap
msgid "    $user->updateDefaultPaymentMethod($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:384
msgid ""
"To sync your default payment method information with the customer's default "
"payment method information in Stripe, you may use the "
"`updateDefaultPaymentMethodFromStripe` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:386
#, no-wrap
msgid "    $user->updateDefaultPaymentMethodFromStripe();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:388
#, no-wrap
msgid "> {note} The default payment method on a customer can only be used for invoicing and creating new subscriptions. Due to limitations imposed by Stripe, it may not be used for single charges.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:390
#, no-wrap
msgid "<a name=\"adding-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:390
#, no-wrap
msgid "Adding Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:393
msgid ""
"To add a new payment method, you may call the `addPaymentMethod` method on "
"the billable model, passing the payment method identifier:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:395
#, no-wrap
msgid "    $user->addPaymentMethod($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:397
#, no-wrap
msgid "> {tip} To learn how to retrieve payment method identifiers please review the [payment method storage documentation](#storing-payment-methods).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:399
#, no-wrap
msgid "<a name=\"deleting-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:399
#, no-wrap
msgid "Deleting Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:402
msgid ""
"To delete a payment method, you may call the `delete` method on the `Laravel"
"\\Cashier\\PaymentMethod` instance you wish to delete:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:404
#, no-wrap
msgid "    $paymentMethod->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:406
msgid ""
"The `deletePaymentMethods` method will delete all of the payment method "
"information for the billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:408
#, no-wrap
msgid "    $user->deletePaymentMethods();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:410
#, no-wrap
msgid "> {note} If a user has an active subscription, your application should not allow them to delete their default payment method.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:412
#, no-wrap
msgid "<a name=\"subscriptions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:412
#, no-wrap
msgid "Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:415
msgid ""
"Subscriptions provide a way to set up recurring payments for your customers. "
"Stripe subscriptions managed by Cashier provide support for multiple "
"subscription plans, subscription quantities, trials, and more."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:417
#, no-wrap
msgid "<a name=\"creating-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:417
#, no-wrap
msgid "Creating Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:420
msgid ""
"To create a subscription, first retrieve an instance of your billable model, "
"which typically will be an instance of `App\\Models\\User`. Once you have "
"retrieved the model instance, you may use the `newSubscription` method to "
"create the model's subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:427
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription(\n"
"            'default', 'price_premium'\n"
"        )->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:430 docs/master/billing.md:720
#: docs/master/billing.md:897 docs/master/billing.md:947
#: docs/master/billing.md:1125
#, no-wrap
msgid ""
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:432
msgid ""
"The first argument passed to the `newSubscription` method should be the name "
"of the subscription. If your application only offers a single subscription, "
"you might call this `default` or `primary`. The second argument is the "
"specific plan the user is subscribing to. This value should correspond to "
"the plan's price identifier in Stripe."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:434
msgid ""
"The `create` method, which accepts [a Stripe payment method identifier]"
"(#storing-payment-methods) or Stripe `PaymentMethod` object, will begin the "
"subscription as well as update your database with the billable model's "
"Stripe customer ID and other relevant billing information."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:436
#, no-wrap
msgid "> {note} Passing a payment method identifier directly to the `create` subscription method will also automatically add it to the user's stored payment methods.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:438
#, no-wrap
msgid "<a name=\"subscription-quantities\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:438 docs/master/billing.md:789
#, no-wrap
msgid "Quantities"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:441
msgid ""
"If you would like to set a specific [quantity](https://stripe.com/docs/"
"billing/subscriptions/quantities) for the plan when creating the "
"subscription, you should invoke the `quantity` method on the subscription "
"builder before creating the subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:445
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"         ->quantity(5)\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:447
#, no-wrap
msgid "<a name=\"additional-details\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:447
#, no-wrap
msgid "Additional Details"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:450
msgid ""
"If you would like to specify additional [customer](https://stripe.com/docs/"
"api/customers/create) or [subscription](https://stripe.com/docs/api/"
"subscriptions/create) options supported by Stripe, you may do so by passing "
"them as the second and third arguments to the `create` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:456
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')->create($paymentMethod, [\n"
"        'email' => $email,\n"
"    ], [\n"
"        'metadata' => ['note' => 'Some extra information.'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:458
#, no-wrap
msgid "<a name=\"coupons\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:458
#, no-wrap
msgid "Coupons"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:461
msgid ""
"If you would like to apply a coupon when creating the subscription, you may "
"use the `withCoupon` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:465
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"         ->withCoupon('code')\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:467
msgid ""
"Or, if you would like to apply a [Stripe promotion code](https://stripe.com/"
"docs/billing/subscriptions/discounts/codes), you may use the "
"`withPromotionCode` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:471
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"         ->withPromotionCode('promo_code')\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:473
#, no-wrap
msgid "<a name=\"adding-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:473
#, no-wrap
msgid "Adding Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:476
msgid ""
"If you would like to add a subscription to a customer who already has a "
"default payment method you may invoke the `add` method on the subscription "
"builder:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:478 docs/master/billing.md:637
#: docs/master/billing.md:673 docs/master/billing.md:757
#: docs/master/billing.md:809 docs/master/billing.md:872
#: docs/master/billing.md:981 docs/master/billing.md:1019
#: docs/master/billing.md:1135
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:480 docs/master/billing.md:653
#: docs/master/billing.md:675 docs/master/billing.md:724
#: docs/master/billing.md:732 docs/master/billing.md:742
#: docs/master/billing.md:759 docs/master/billing.md:767
#: docs/master/billing.md:776 docs/master/billing.md:794
#: docs/master/billing.md:811 docs/master/billing.md:821
#: docs/master/billing.md:874 docs/master/billing.md:998
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:482
#, no-wrap
msgid "    $user->newSubscription('default', 'price_premium')->add();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:484
#, no-wrap
msgid "<a name=\"checking-subscription-status\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:484
#, no-wrap
msgid "Checking Subscription Status"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:487
msgid ""
"Once a customer is subscribed to your application, you may easily check "
"their subscription status using a variety of convenient methods. First, the "
"`subscribed` method returns `true` if the customer has an active "
"subscription, even if the subscription is currently within its trial period. "
"The `subscribed` method accepts the name of the subscription as its first "
"argument:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:491
#, no-wrap
msgid ""
"    if ($user->subscribed('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:493
msgid ""
"The `subscribed` method also makes a great candidate for a [route middleware]"
"(/docs/{{version}}/middleware), allowing you to filter access to routes and "
"controllers based on the user's subscription status:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:495 docs/master/billing.md:1069
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:497
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:499
#, no-wrap
msgid "    use Closure;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:515
#, no-wrap
msgid ""
"    class EnsureUserIsSubscribed\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"                // This user is not a paying customer...\n"
"                return redirect('billing');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:519
#, no-wrap
msgid ""
"            return $next($request);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:521
msgid ""
"If you would like to determine if a user is still within their trial period, "
"you may use the `onTrial` method. This method can be useful for determining "
"if you should display a warning to the user that they are still on their "
"trial period:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:525 docs/master/billing.md:969
#, no-wrap
msgid ""
"    if ($user->subscription('default')->onTrial()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:527
msgid ""
"The `subscribedToPlan` method may be used to determine if the user is "
"subscribed to a given plan based on a given Stripe plan's price identifier. "
"In this example, we will determine if the user's `default` subscription is "
"actively subscribed to the application's \"monthly\" plan. The given Stripe "
"plan price identifier should correspond to one of your plan's price "
"identifiers in the Stripe dashboard:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:531
#, no-wrap
msgid ""
"    if ($user->subscribedToPlan('price_monthly', 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:533
msgid ""
"By passing an array to the `subscribedToPlan` method, you may determine if "
"the user's `default` subscription is actively subscribed to the "
"application's \"monthly\" or \"yearly\" plan:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:537
#, no-wrap
msgid ""
"    if ($user->subscribedToPlan(['price_monthly', 'price_yearly'], 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:539
msgid ""
"The `recurring` method may be used to determine if the user is currently "
"subscribed and is no longer within their trial period:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:543
#, no-wrap
msgid ""
"    if ($user->subscription('default')->recurring()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:545
#, no-wrap
msgid "> {note} If a user has two subscriptions with the same name, the most recent subscription will always be returned by the `subscription` method. For example, a user might have two subscription records named `default`; however, one of the subscriptions may be an old, expired subscription, while the other is the current, active subscription. The most recent subscription will always be returned while older subscriptions are kept in the database for historical review.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:547
#, no-wrap
msgid "<a name=\"cancelled-subscription-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:547
#, no-wrap
msgid "Cancelled Subscription Status"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:550
msgid ""
"To determine if the user was once an active subscriber but has cancelled "
"their subscription, you may use the `cancelled` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:554
#, no-wrap
msgid ""
"    if ($user->subscription('default')->cancelled()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:556
msgid ""
"You may also determine if a user has cancelled their subscription but are "
"still on their \"grace period\" until the subscription fully expires. For "
"example, if a user cancels a subscription on March 5th that was originally "
"scheduled to expire on March 10th, the user is on their \"grace period\" "
"until March 10th. Note that the `subscribed` method still returns `true` "
"during this time:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:560 docs/master/billing.md:916
#, no-wrap
msgid ""
"    if ($user->subscription('default')->onGracePeriod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:562
msgid ""
"To determine if the user has cancelled their subscription and is no longer "
"within their \"grace period\", you may use the `ended` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:566
#, no-wrap
msgid ""
"    if ($user->subscription('default')->ended()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:568
#, no-wrap
msgid "<a name=\"incomplete-and-past-due-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:568
#, no-wrap
msgid "Incomplete and Past Due Status"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:571
msgid ""
"If a subscription requires a secondary payment action after creation the "
"subscription will be marked as `incomplete`. Subscription statuses are "
"stored in the `stripe_status` column of Cashier's `subscriptions` database "
"table."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:573
msgid ""
"Similarly, if a secondary payment action is required when swapping plans the "
"subscription will be marked as `past_due`. When your subscription is in "
"either of these states it will not be active until the customer has "
"confirmed their payment. Determining if a subscription has an incomplete "
"payment may be accomplished using the `hasIncompletePayment` method on the "
"billable model or a subscription instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:577 docs/master/billing.md:1374
#, no-wrap
msgid ""
"    if ($user->hasIncompletePayment('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:581 docs/master/billing.md:1378
#, no-wrap
msgid ""
"    if ($user->subscription('default')->hasIncompletePayment()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:583
msgid ""
"When a subscription has an incomplete payment, you should direct the user to "
"Cashier's payment confirmation page, passing the `latestPayment` identifier. "
"You may use the `latestPayment` method available on subscription instance to "
"retrieve this identifier:"
msgstr ""

#. type: Fenced code block (html)
#: docs/master/billing.md:584
#, no-wrap
msgid ""
"<a href=\"{{ route('cashier.payment', $subscription->latestPayment()->id) }}\">\n"
"    Please confirm your payment.\n"
"</a>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:591
msgid ""
"If you would like the subscription to still be considered active when it's "
"in a `past_due` state, you may use the `keepPastDueSubscriptionsActive` "
"method provided by Cashier. Typically, this method should be called in the "
"`register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:603
#, no-wrap
msgid ""
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        Cashier::keepPastDueSubscriptionsActive();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:605
#, no-wrap
msgid "> {note} When a subscription is in an `incomplete` state it cannot be changed until the payment is confirmed. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in an `incomplete` state.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:607
#, no-wrap
msgid "<a name=\"subscription-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:607
#, no-wrap
msgid "Subscription Scopes"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:610
msgid ""
"Most subscription states are also available as query scopes so that you may "
"easily query your database for subscriptions that are in a given state:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:613
#, no-wrap
msgid ""
"    // Get all active subscriptions...\n"
"    $subscriptions = Subscription::query()->active()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:616
#, no-wrap
msgid ""
"    // Get all of the cancelled subscriptions for a user...\n"
"    $subscriptions = $user->subscriptions()->cancelled()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:618
msgid "A complete list of available scopes is available below:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:630
#, no-wrap
msgid ""
"    Subscription::query()->active();\n"
"    Subscription::query()->cancelled();\n"
"    Subscription::query()->ended();\n"
"    Subscription::query()->incomplete();\n"
"    Subscription::query()->notCancelled();\n"
"    Subscription::query()->notOnGracePeriod();\n"
"    Subscription::query()->notOnTrial();\n"
"    Subscription::query()->onGracePeriod();\n"
"    Subscription::query()->onTrial();\n"
"    Subscription::query()->pastDue();\n"
"    Subscription::query()->recurring();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:632
#, no-wrap
msgid "<a name=\"changing-plans\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:632
#, no-wrap
msgid "Changing Plans"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:635
msgid ""
"After a customer is subscribed to your application, they may occasionally "
"want to change to a new subscription plan. To swap a customer to a new plan, "
"pass the Stripe plan's price identifier to the `swap` method. The given "
"price identifier should correspond to a Stripe plan price identifier "
"available in the Stripe dashboard:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:639
#, no-wrap
msgid "    $user = App\\Models\\User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:641
#, no-wrap
msgid "    $user->subscription('default')->swap('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:643
msgid ""
"If the customer is on trial, the trial period will be maintained. "
"Additionally, if a \"quantity\" exists for the subscription, that quantity "
"will also be maintained."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:645
msgid ""
"If you would like to swap plans and cancel any trial period the customer is "
"currently on, you may invoke the `skipTrial` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:649
#, no-wrap
msgid ""
"    $user->subscription('default')\n"
"            ->skipTrial()\n"
"            ->swap('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:651
msgid ""
"If you would like to swap plans and immediately invoice the customer instead "
"of waiting for their next billing cycle, you may use the `swapAndInvoice` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:655
#, no-wrap
msgid "    $user->subscription('default')->swapAndInvoice('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:657
#, no-wrap
msgid "<a name=\"prorations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:657
#, no-wrap
msgid "Prorations"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:660
msgid ""
"By default, Stripe prorates charges when swapping between plans. The "
"`noProrate` method may be used to update the subscription's plan without "
"prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:662
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->swap('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:664
msgid ""
"For more information on subscription proration, consult the [Stripe "
"documentation](https://stripe.com/docs/billing/subscriptions/prorations)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:666
#, no-wrap
msgid "> {note} Executing the `noProrate` method before the `swapAndInvoice` method will have no effect on proration. An invoice will always be issued.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:668
#, no-wrap
msgid "<a name=\"subscription-quantity\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:668
#, no-wrap
msgid "Subscription Quantity"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:671
msgid ""
"Sometimes subscriptions are affected by \"quantity\". For example, a project "
"management application might charge $10 per month per project. You may use "
"the `incrementQuantity` and `decrementQuantity` methods to easily increment "
"or decrement your subscription quantity:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:677
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:680
#, no-wrap
msgid ""
"    // Add five to the subscription's current quantity...\n"
"    $user->subscription('default')->incrementQuantity(5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:682
#, no-wrap
msgid "    $user->subscription('default')->decrementQuantity();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:685
#, no-wrap
msgid ""
"    // Subtract five from the subscription's current quantity...\n"
"    $user->subscription('default')->decrementQuantity(5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:687
msgid ""
"Alternatively, you may set a specific quantity using the `updateQuantity` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:689
#, no-wrap
msgid "    $user->subscription('default')->updateQuantity(10);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:691
msgid ""
"The `noProrate` method may be used to update the subscription's quantity "
"without prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:693
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->updateQuantity(10);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:695
msgid ""
"For more information on subscription quantities, consult the [Stripe "
"documentation](https://stripe.com/docs/subscriptions/quantities)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:697
#, no-wrap
msgid "<a name=\"multiplan-subscription-quantities\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:697
#, no-wrap
msgid "Multiplan Subscription Quantities"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:700
msgid ""
"If your subscription is a [multiplan subscription](#multiplan-"
"subscriptions), you should pass the name of the plan whose quantity you wish "
"to increment or decrement as the second argument to the increment / "
"decrement methods:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:702
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity(1, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:704
#, no-wrap
msgid "<a name=\"multiplan-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:704
#, no-wrap
msgid "Multiplan Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:707
msgid ""
"[Multiplan subscriptions](https://stripe.com/docs/billing/subscriptions/"
"multiplan) allow you to assign multiple billing plans to a single "
"subscription. For example, imagine you are building a customer service "
"\"helpdesk\" application that has a base subscription plan of $10 per month "
"but offers a live chat add-on plan for an additional $15 per month. "
"Multiplan subscription information is stored in Cashier's "
"`subscription_items` database table."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:709
msgid ""
"You may specify multiple plans for a given subscription by passing an array "
"of plans as the second argument to the `newSubscription` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:717
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', [\n"
"            'price_monthly',\n"
"            'chat-plan',\n"
"        ])->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:722
msgid ""
"In the example above, the customer will have two plans attached to their "
"`default` subscription. Both plans will be charged on their respective "
"billing intervals. If necessary, you may use the `quantity` method to "
"indicate a specific quantity for each plan:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:728
#, no-wrap
msgid ""
"    $user->newSubscription('default', ['price_monthly', 'chat-plan'])\n"
"        ->quantity(5, 'chat-plan')\n"
"        ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:730
msgid ""
"If you would like to add another plan to an existing subscription, you may "
"invoke the subscription's `addPlan` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:734
#, no-wrap
msgid "    $user->subscription('default')->addPlan('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:736
msgid ""
"The example above will add the new plan and the customer will be billed for "
"it on their next billing cycle. If you would like to bill the customer "
"immediately you may use the `addPlanAndInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:738
#, no-wrap
msgid "    $user->subscription('default')->addPlanAndInvoice('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:740
msgid ""
"If you would like to add a plan with a specific quantity, you can pass the "
"quantity as the second argument of the `addPlan` or `addPlanAndInvoice` "
"methods:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:744
#, no-wrap
msgid "    $user->subscription('default')->addPlan('chat-plan', 5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:746
msgid "You may remove plans from subscriptions using the `removePlan` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:748
#, no-wrap
msgid "    $user->subscription('default')->removePlan('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:750
#, no-wrap
msgid "> {note} You may not remove the last plan on a subscription. Instead, you should simply cancel the subscription.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:752
#, no-wrap
msgid "<a name=\"swapping-multiplan-plans\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:752
#, no-wrap
msgid "Swapping Plans"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:755
msgid ""
"You may also change the plans attached to a multiplan subscription. For "
"example, imagine a customer has a `basic-plan` subscription with a `chat-"
"plan` add-on plan and you want to upgrade the customer from the `basic-plan` "
"to the `pro-plan` plan:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:761
#, no-wrap
msgid "    $user->subscription('default')->swap(['pro-plan', 'chat-plan']);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:763
msgid ""
"When executing the example above, the underlying subscription item with the "
"`basic-plan` is deleted and the one with the `chat-plan` is preserved. "
"Additionally, a new subscription item for the `pro-plan` is created."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:765
msgid ""
"You can also specify subscription item options by passing an array of key / "
"value pairs to the `swap` method. For example, you may need to specify the "
"subscription plan quantities:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:772
#, no-wrap
msgid ""
"    $user->subscription('default')->swap([\n"
"        'pro-plan' => ['quantity' => 5],\n"
"        'chat-plan'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:774
msgid ""
"If you want to swap a single plan on a subscription, you may do so using the "
"`swap` method on the subscription item itself. This approach is particularly "
"useful if you would like to preserve all of the existing metadata on the "
"subscription's other plans:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:780
#, no-wrap
msgid ""
"    $user->subscription('default')\n"
"            ->findItemOrFail('basic-plan')\n"
"            ->swap('pro-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:782
#, no-wrap
msgid "<a name=\"proration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:782
#, no-wrap
msgid "Proration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:785
msgid ""
"By default, Stripe will prorate charges when adding or removing plans from a "
"multiplan subscription. If you would like to make a plan adjustment without "
"proration, you should chain the `noProrate` method onto your plan operation:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:787
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->removePlan('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:789
#, no-wrap
msgid "<a name=\"swapping-quantities\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:792
msgid ""
"If you would like to update quantities on individual subscription plans, you "
"may do so using the [existing quantity methods](#subscription-quantity) by "
"passing the name of the plan as an additional argument to the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:796
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity(5, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:798
#, no-wrap
msgid "    $user->subscription('default')->decrementQuantity(3, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:800
#, no-wrap
msgid "    $user->subscription('default')->updateQuantity(10, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:802
#, no-wrap
msgid "> {note} When a subscription has multiple plans the `stripe_plan` and `quantity` attributes on the `Subscription` model will be `null`. To access the individual plan attributes, you should use the `items` relationship available on the `Subscription` model.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:804
#, no-wrap
msgid "<a name=\"subscription-items\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:804
#, no-wrap
msgid "Subscription Items"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:807
msgid ""
"When a subscription has multiple plans, it will have multiple subscription "
"\"items\" stored in your database's `subscription_items` table. You may "
"access these via the `items` relationship on the subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:813
#, no-wrap
msgid "    $subscriptionItem = $user->subscription('default')->items->first();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:817
#, no-wrap
msgid ""
"    // Retrieve the Stripe plan and quantity for a specific item...\n"
"    $stripePlan = $subscriptionItem->stripe_plan;\n"
"    $quantity = $subscriptionItem->quantity;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:819
msgid ""
"You can also retrieve a specific plan using the `findItemOrFail` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:823
#, no-wrap
msgid "    $subscriptionItem = $user->subscription('default')->findItemOrFail('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:825
#, no-wrap
msgid "<a name=\"subscription-taxes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:825
#, no-wrap
msgid "Subscription Taxes"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:828
msgid ""
"To specify the tax rates a user pays on a subscription, you should implement "
"the `taxRates` method on your billable model and return an array containing "
"the Stripe tax rate IDs. You can define these tax rates in [your Stripe "
"dashboard](https://dashboard.stripe.com/test/tax-rates):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:838
#, no-wrap
msgid ""
"    /**\n"
"     * The tax rates that should apply to the customer's subscriptions.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function taxRates()\n"
"    {\n"
"        return ['tax-rate-id'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:840
msgid ""
"The `taxRates` method enables you to apply a tax rate on a customer-by-"
"customer basis, which may be helpful for a user base that spans multiple "
"countries and tax rates."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:842
msgid ""
"If you're offering multiplan subscriptions, you may define different tax "
"rates for each plan by implementing a `planTaxRates` method on your billable "
"model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:854
#, no-wrap
msgid ""
"    /**\n"
"     * The tax rates that should apply to the customer's subscriptions.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function planTaxRates()\n"
"    {\n"
"        return [\n"
"            'plan-id' => ['tax-rate-id'],\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:856
#, no-wrap
msgid "> {note} The `taxRates` method only applies to subscription charges. If you use Cashier to make \"one off\" charges, you will need to manually specify the tax rate at that time.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:858
#, no-wrap
msgid "<a name=\"syncing-tax-rates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:858
#, no-wrap
msgid "Syncing Tax Rates"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:861
msgid ""
"When changing the hard-coded tax rate IDs returned by the `taxRates` method, "
"the tax settings on any existing subscriptions for the user will remain the "
"same. If you wish to update the tax value for existing subscriptions with "
"the new `taxRates` values, you should call the `syncTaxRates` method on the "
"user's subscription instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:863
#, no-wrap
msgid "    $user->subscription('default')->syncTaxRates();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:865
msgid ""
"This will also sync any multiplan subscription item tax rates. If your "
"application is offering multiplan subscriptions, you should ensure that your "
"billable model implements the `planTaxRates` method [discussed above]"
"(#subscription-taxes)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:867
#, no-wrap
msgid "<a name=\"tax-exemption\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:867
#, no-wrap
msgid "Tax Exemption"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:870
msgid ""
"Cashier also offers the `isNotTaxExempt`, `isTaxExempt`, and "
"`reverseChargeApplies` methods to determine if the customer is tax exempt. "
"These methods will call the Stripe API to determine a customer's tax "
"exemption status:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:878
#, no-wrap
msgid ""
"    $user->isTaxExempt();\n"
"    $user->isNotTaxExempt();\n"
"    $user->reverseChargeApplies();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:880
#, no-wrap
msgid "> {note} These methods are also available on any `Laravel\\Cashier\\Invoice` object. However, when invoked on an `Invoice` object, the methods will determine the exemption status at the time the invoice was created.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:882
#, no-wrap
msgid "<a name=\"subscription-anchor-date\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:882
#, no-wrap
msgid "Subscription Anchor Date"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:885
msgid ""
"By default, the billing cycle anchor is the date the subscription was "
"created or, if a trial period is used, the date that the trial ends. If you "
"would like to modify the billing anchor date, you may use the "
"`anchorBillingCycleOn` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:890
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $anchor = Carbon::parse('first day of next month');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:894
#, no-wrap
msgid ""
"        $request->user()->newSubscription('default', 'price_premium')\n"
"                    ->anchorBillingCycleOn($anchor->startOfDay())\n"
"                    ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:899
msgid ""
"For more information on managing subscription billing cycles, consult the "
"[Stripe billing cycle documentation](https://stripe.com/docs/billing/"
"subscriptions/billing-cycle)"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:901
#, no-wrap
msgid "<a name=\"cancelling-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:901
#, no-wrap
msgid "Cancelling Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:904
msgid ""
"To cancel a subscription, call the `cancel` method on the user's "
"subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:906
#, no-wrap
msgid "    $user->subscription('default')->cancel();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:908
msgid ""
"When a subscription is cancelled, Cashier will automatically set the "
"`ends_at` column in your `subscriptions` database table. This column is used "
"to know when the `subscribed` method should begin returning `false`."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:910
msgid ""
"For example, if a customer cancels a subscription on March 1st, but the "
"subscription was not scheduled to end until March 5th, the `subscribed` "
"method will continue to return `true` until March 5th. This is done because "
"a user is typically allowed to continue using an application until the end "
"of their billing cycle."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:912
msgid ""
"You may determine if a user has cancelled their subscription but are still "
"on their \"grace period\" using the `onGracePeriod` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:918
msgid ""
"If you wish to cancel a subscription immediately, call the `cancelNow` "
"method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:920
#, no-wrap
msgid "    $user->subscription('default')->cancelNow();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:922
#, no-wrap
msgid "<a name=\"resuming-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:922
#, no-wrap
msgid "Resuming Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:925
msgid ""
"If a customer has cancelled their subscription and you wish to resume it, "
"you may invoke the `resume` method on the subscription. The customer must "
"still be within their \"grace period\" in order to resume a subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:927
#, no-wrap
msgid "    $user->subscription('default')->resume();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:929
msgid ""
"If the customer cancels a subscription and then resumes that subscription "
"before the subscription has fully expired the customer will not be billed "
"immediately. Instead, their subscription will be re-activated and they will "
"be billed on the original billing cycle."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:931
#, no-wrap
msgid "<a name=\"subscription-trials\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:931
#, no-wrap
msgid "Subscription Trials"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:934
#, no-wrap
msgid "<a name=\"with-payment-method-up-front\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:934
#, no-wrap
msgid "With Payment Method Up Front"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:937
msgid ""
"If you would like to offer trial periods to your customers while still "
"collecting payment method information up front, you should use the "
"`trialDays` method when creating your subscriptions:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:944
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', 'price_monthly')\n"
"                    ->trialDays(10)\n"
"                    ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:949
msgid ""
"This method will set the trial period ending date on the subscription record "
"within the database and instruct Stripe to not begin billing the customer "
"until after this date. When using the `trialDays` method, Cashier will "
"overwrite any default trial period configured for the plan in Stripe."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:951
#, no-wrap
msgid "> {note} If the customer's subscription is not cancelled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:953
msgid ""
"The `trialUntil` method allows you to provide a `DateTime` instance that "
"specifies when the trial period should end:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:955
#, no-wrap
msgid "    use Carbon\\Carbon;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:959
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"                ->trialUntil(Carbon::now()->addDays(10))\n"
"                ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:961
msgid ""
"You may determine if a user is within their trial period using either the "
"`onTrial` method of the user instance or the `onTrial` method of the "
"subscription instance. The two examples below are equivalent:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:965
#, no-wrap
msgid ""
"    if ($user->onTrial('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:971
#, no-wrap
msgid "<a name=\"defining-trial-days-in-stripe-cashier\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:971
#, no-wrap
msgid "Defining Trial Days In Stripe / Cashier"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:974
msgid ""
"You may choose to define how many trial days your plan's receive in the "
"Stripe dashboard or always pass them explicitly using Cashier. If you choose "
"to define your plan's trial days in Stripe you should be aware that new "
"subscriptions, including new subscriptions for a customer that had a "
"subscription in the past, will always receive a trial period unless you "
"explicitly call the `trialDays(0)` method."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:976
#, no-wrap
msgid "<a name=\"without-payment-method-up-front\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:976
#, no-wrap
msgid "Without Payment Method Up Front"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:979
msgid ""
"If you would like to offer trial periods without collecting the user's "
"payment method information up front, you may set the `trial_ends_at` column "
"on the user record to your desired trial ending date. This is typically done "
"during user registration:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:986
#, no-wrap
msgid ""
"    $user = User::create([\n"
"        // ...\n"
"        'trial_ends_at' => now()->addDays(10),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:988
#, no-wrap
msgid "> {note} Be sure to add a [date cast](/docs/{{version}}/eloquent-mutators##date-casting) for the `trial_ends_at` attribute within your billable model's class definition.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:990
msgid ""
"Cashier refers to this type of trial as a \"generic trial\", since it is not "
"attached to any existing subscription. The `onTrial` method on the billable "
"model instance will return `true` if the current date is not past the value "
"of `trial_ends_at`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:994
#, no-wrap
msgid ""
"    if ($user->onTrial()) {\n"
"        // User is within their trial period...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:996
msgid ""
"Once you are ready to create an actual subscription for the user, you may "
"use the `newSubscription` method as usual:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1000
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1002
msgid ""
"To retrieve the user's trial ending date, you may use the `trialEndsAt` "
"method. This method will return a Carbon date instance if a user is on a "
"trial or `null` if they aren't. You may also pass an optional subscription "
"name parameter if you would like to get the trial ending date for a specific "
"subscription other than the default one:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1006
#, no-wrap
msgid ""
"    if ($user->onTrial()) {\n"
"        $trialEndsAt = $user->trialEndsAt('main');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1008
msgid ""
"You may also use the `onGenericTrial` method if you wish to know "
"specifically that the user is within their \"generic\" trial period and has "
"not yet created an actual subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1012
#, no-wrap
msgid ""
"    if ($user->onGenericTrial()) {\n"
"        // User is within their \"generic\" trial period...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1014
#, no-wrap
msgid "<a name=\"extending-trials\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1014
#, no-wrap
msgid "Extending Trials"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1017
msgid ""
"The `extendTrial` method allows you to extend the trial period of a "
"subscription after the subscription has been created. If the trial has "
"already expired and the customer is already being billed for the "
"subscription, you can still offer them an extended trial. The time spent "
"within the trial period will be deducted from the customer's next invoice:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1021
#, no-wrap
msgid "    $subscription = User::find(1)->subscription('default');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1026
#, no-wrap
msgid ""
"    // End the trial 7 days from now...\n"
"    $subscription->extendTrial(\n"
"        now()->addDays(7)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1031
#, no-wrap
msgid ""
"    // Add an additional 5 days to the trial...\n"
"    $subscription->extendTrial(\n"
"        $subscription->trial_ends_at->addDays(5)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1033
#, no-wrap
msgid "<a name=\"handling-stripe-webhooks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1033
#, no-wrap
msgid "Handling Stripe Webhooks"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1036
#, no-wrap
msgid "> {tip} You may use [the Stripe CLI](https://stripe.com/docs/stripe-cli) to help test webhooks during local development.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1038
msgid ""
"Stripe can notify your application of a variety of events via webhooks. By "
"default, a route that points to Cashier's webhook controller is "
"automatically registered by the Cashier service provider. This controller "
"will handle all incoming webhook requests."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1040
msgid ""
"By default, the Cashier webhook controller will automatically handle "
"cancelling subscriptions that have too many failed charges (as defined by "
"your Stripe settings), customer updates, customer deletions, subscription "
"updates, and payment method changes; however, as we'll soon discover, you "
"can extend this controller to handle any Stripe webhook event you like."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1042
msgid ""
"To ensure your application can handle Stripe webhooks, be sure to configure "
"the webhook URL in the Stripe control panel. By default, Cashier's webhook "
"controller responds to the `/stripe/webhook` URL path. The full list of all "
"webhooks you should enable in the Stripe control panel are:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1049
msgid ""
"- `customer.subscription.created` - `customer.subscription.updated` - "
"`customer.subscription.deleted` - `customer.updated` - `customer.deleted` - "
"`invoice.payment_action_required`"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1051
#, no-wrap
msgid "> {note} Make sure you protect incoming Stripe webhook requests with Cashier's included [webhook signature verification](/docs/{{version}}/billing#verifying-webhook-signatures) middleware.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1053
#, no-wrap
msgid "<a name=\"webhooks-csrf-protection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1053
#, no-wrap
msgid "Webhooks & CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1056
msgid ""
"Since Stripe webhooks need to bypass Laravel's [CSRF protection](/docs/"
"{{version}}/csrf), be sure to list the URI as an exception in your "
"application's `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list "
"the route outside of the `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1060
#, no-wrap
msgid ""
"    protected $except = [\n"
"        'stripe/*',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1062
#, no-wrap
msgid "<a name=\"defining-webhook-event-handlers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1062
#, no-wrap
msgid "Defining Webhook Event Handlers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1065
msgid ""
"Cashier automatically handles subscription cancellations for failed charges "
"and other common Stripe webhook events. However, if you have additional "
"webhook events you would like to handle, you may do so by extending the "
"Cashier webhook controller."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1067
msgid ""
"Your controller's method names should correspond to Cashier's controller "
"conventions. Specifically, methods should be prefixed with `handle` and the "
"\"camel case\" name of the webhook you wish to handle. For example, if you "
"wish to handle the `invoice.payment_succeeded` webhook, you should add a "
"`handleInvoicePaymentSucceeded` method to the controller:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1071
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1073
#, no-wrap
msgid "    use Laravel\\Cashier\\Http\\Controllers\\WebhookController as CashierController;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1087
#, no-wrap
msgid ""
"    class WebhookController extends CashierController\n"
"    {\n"
"        /**\n"
"         * Handle invoice payment succeeded.\n"
"         *\n"
"         * @param  array  $payload\n"
"         * @return \\Symfony\\Component\\HttpFoundation\\Response\n"
"         */\n"
"        public function handleInvoicePaymentSucceeded($payload)\n"
"        {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1089
msgid ""
"Next, define a route to your Cashier webhook controller within your "
"application's `routes/web.php` file. This will overwrite the default route "
"registered by Cashier's service provider:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1091
#, no-wrap
msgid "    use App\\Http\\Controllers\\WebhookController;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1096
#, no-wrap
msgid ""
"    Route::post(\n"
"        '/stripe/webhook',\n"
"        [WebhookController::class, 'handleWebhook']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1098
#, no-wrap
msgid "> {tip} Cashier emits a `Laravel\\Cashier\\Events\\WebhookReceived` event when a webhook is received and a `Laravel\\Cashier\\Events\\WebhookHandled` event when a webhook was handled by Cashier. Both events contain the full payload of the Stripe webhook.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1100
#, no-wrap
msgid "<a name=\"verifying-webhook-signatures\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1100
#, no-wrap
msgid "Verifying Webhook Signatures"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1103
msgid ""
"To secure your webhooks, you may use [Stripe's webhook signatures](https://"
"stripe.com/docs/webhooks/signatures). For convenience, Cashier automatically "
"includes a middleware which validates that the incoming Stripe webhook "
"request is valid."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1105
msgid ""
"To enable webhook verification, ensure that the `STRIPE_WEBHOOK_SECRET` "
"environment variable is set in your application's `.env` file. The webhook "
"`secret` may be retrieved from your Stripe account dashboard."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1107
#, no-wrap
msgid "<a name=\"single-charges\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1107
#, no-wrap
msgid "Single Charges"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1110
#, no-wrap
msgid "<a name=\"simple-charge\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1110
#, no-wrap
msgid "Simple Charge"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1113
#, no-wrap
msgid "> {note} The `charge` method accepts the amount you would like to charge in the lowest denominator of the currency used by your application. For example, when using United States Dollars, amounts should be specified in pennies.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1115
msgid ""
"If you would like to make a one-time charge against a customer, you may use "
"the `charge` method on a billable model instance. You will need to [provide "
"a payment method identifier](#payment-methods-for-single-charges) as the "
"second argument to the `charge` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1122
#, no-wrap
msgid ""
"    Route::post('/purchase', function (Request $request) {\n"
"        $stripeCharge = $request->user()->charge(\n"
"            100, $request->paymentMethodId\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1127
msgid ""
"The `charge` method accepts an array as its third argument, allowing you to "
"pass any options you wish to the underlying Stripe charge creation. More "
"information regarding the options available to you when creating charges may "
"be found in the [Stripe documentation](https://stripe.com/docs/api/charges/"
"create):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1131
#, no-wrap
msgid ""
"    $user->charge(100, $paymentMethod, [\n"
"        'custom_option' => $value,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1133
msgid ""
"You may also use the `charge` method without an underlying customer or user. "
"To accomplish this, invoke the `charge` method on a new instance of your "
"application's billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1137
#, no-wrap
msgid "    $stripeCharge = (new User)->charge(100, $paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1139
msgid ""
"The `charge` method will throw an exception if the charge fails. If the "
"charge is successful, an instance of `Laravel\\Cashier\\Payment` will be "
"returned from the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1145
#, no-wrap
msgid ""
"    try {\n"
"        $payment = $user->charge(100, $paymentMethod);\n"
"    } catch (Exception $e) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1147
#, no-wrap
msgid "<a name=\"charge-with-invoice\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1147
#, no-wrap
msgid "Charge With Invoice"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1150
msgid ""
"Sometimes you may need to make a one-time charge and offer a PDF receipt to "
"your customer. The `invoiceFor` method lets you do just that. For example, "
"let's invoice a customer $5.00 for a \"Maintenance Fee\":"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1152
#, no-wrap
msgid "    $user->invoiceFor('One Time Fee', 500);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1154
msgid ""
"The invoice will be charged immediately against the user's default payment "
"method. The `invoiceFor` method also accepts an array as its third argument. "
"This array contains the billing options for the invoice item. The fourth "
"argument accepted by the method is also an array which should contain the "
"billing options for the invoice itself:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1160
#, no-wrap
msgid ""
"    $user->invoiceFor('Stickers', 500, [\n"
"        'quantity' => 50,\n"
"    ], [\n"
"        'default_tax_rates' => ['tax-rate-id'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1162
#, no-wrap
msgid "> {note} The `invoiceFor` method will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1164
#, no-wrap
msgid "<a name=\"refunding-charges\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1164
#, no-wrap
msgid "Refunding Charges"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1167
msgid ""
"If you need to refund a Stripe charge, you may use the `refund` method. This "
"method accepts the Stripe [payment intent ID](#payment-methods-for-single-"
"charges) as its first argument:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1169
#, no-wrap
msgid "    $payment = $user->charge(100, $paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1171
#, no-wrap
msgid "    $user->refund($payment->id);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1173
#, no-wrap
msgid "<a name=\"invoices\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1173
#, no-wrap
msgid "Invoices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1176
#, no-wrap
msgid "<a name=\"retrieving-invoices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1176
#, no-wrap
msgid "Retrieving Invoices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1179
msgid ""
"You may easily retrieve an array of a billable model's invoices using the "
"`invoices` method. The `invoices` method returns a collection of `Laravel"
"\\Cashier\\Invoice` instances:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1181
#, no-wrap
msgid "    $invoices = $user->invoices();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1183
msgid ""
"If you would like to include pending invoices in the results, you may use "
"the `invoicesIncludingPending` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1185
#, no-wrap
msgid "    $invoices = $user->invoicesIncludingPending();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1187
msgid ""
"You may use the `findInvoice` method to retrieve a specific invoice by its "
"ID:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1189
#, no-wrap
msgid "    $invoice = $user->findInvoice($invoiceId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1191
#, no-wrap
msgid "<a name=\"displaying-invoice-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1191
#, no-wrap
msgid "Displaying Invoice Information"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1194
msgid ""
"When listing the invoices for the customer, you may use the invoice's "
"methods to display the relevant invoice information. For example, you may "
"wish to list every invoice in a table, allowing the user to easily download "
"any of them:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1204
#, no-wrap
msgid ""
"    <table>\n"
"        @foreach ($invoices as $invoice)\n"
"            <tr>\n"
"                <td>{{ $invoice->date()->toFormattedDateString() }}</td>\n"
"                <td>{{ $invoice->total() }}</td>\n"
"                <td><a href=\"/user/invoice/{{ $invoice->id }}\">Download</a></td>\n"
"            </tr>\n"
"        @endforeach\n"
"    </table>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1206
#, no-wrap
msgid "<a name=\"generating-invoice-pdfs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1206
#, no-wrap
msgid "Generating Invoice PDFs"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1209
msgid ""
"From within a route or controller, you may use the `downloadInvoice` method "
"to generate a PDF download of a given invoice. This method will "
"automatically generate the proper HTTP response needed to download the "
"invoice:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1218
#, no-wrap
msgid ""
"    Route::get('/user/invoice/{invoice}', function (Request $request, $invoiceId) {\n"
"        return $request->user()->downloadInvoice($invoiceId, [\n"
"            'vendor' => 'Your Company',\n"
"            'product' => 'Your Product',\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1220
msgid ""
"The `downloadInvoice` method also allows for a custom filename via its third "
"argument. This filename will automatically be suffixed with `.pdf` for you:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1225
#, no-wrap
msgid ""
"    return $request->user()->downloadInvoice($invoiceId, [\n"
"        'vendor' => 'Your Company',\n"
"        'product' => 'Your Product',\n"
"    ], 'my-invoice');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1227
#, no-wrap
msgid "<a name=\"checkout\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1227
#, no-wrap
msgid "Checkout"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1230
msgid ""
"Cashier Stripe also provides support for [Stripe Checkout](https://stripe."
"com/en-be/payments/checkout). Stripe Checkout takes the pain out of "
"implementing custom pages to accept payments by providing a pre-built, "
"hosted payment page."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1232
msgid ""
"The following documentation contains information on how to get started using "
"Stripe Checkout with Cashier. To learn more about Stripe Checkout, you "
"should also consider reviewing [Stripe's own documentation on Checkout]"
"(https://stripe.com/docs/payments/checkout)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1234
#, no-wrap
msgid "<a name=\"product-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1234
#, no-wrap
msgid "Product Checkouts"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1237
msgid ""
"You may perform a checkout for an existing product that has been created "
"within your Stripe dashboard using the `checkout` method on a billable "
"model. The `checkout` method will initiate a new Stripe Checkout session. By "
"default, you're required to pass a Stripe Price ID:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1239
#, no-wrap
msgid "    $checkout = $user->checkout('price_12345');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1243 docs/master/billing.md:1276
#: docs/master/billing.md:1299
#, no-wrap
msgid ""
"    return view('your-checkout-view', [\n"
"        'checkout' => $checkout,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1245
msgid "If needed, you may also specify a product quantity:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1247
#, no-wrap
msgid "    $checkout = $user->checkout('price_12345', 15);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1249 docs/master/billing.md:1278
#: docs/master/billing.md:1314
msgid ""
"Once you have passed the Checkout session instance to your view, a button "
"that directs the user to Stripe Checkout may be rendered using the `button` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1251 docs/master/billing.md:1280
#, no-wrap
msgid "    {{ $checkout->button('Buy') }}\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1253
msgid ""
"When a customer clicks this button they will be redirected to Stripe's "
"Checkout page. By default, when a user successfully completes a purchase or "
"cancels a purchase they will be redirected to your `home` route location, "
"but you may specify custom callback URLs using the `success_url` and "
"`cancel_url` options:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1258
#, no-wrap
msgid ""
"    $checkout = $user->checkout('price_12345', 1, [\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1260
#, no-wrap
msgid "<a name=\"checkout-promotion-codes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1260
#, no-wrap
msgid "Promotion Codes"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1263
msgid ""
"By default, Stripe Checkout does not allow [user redeemable promotion codes]"
"(https://stripe.com/docs/billing/subscriptions/discounts/codes). Luckily, "
"there's an easy way to enable these for your Checkout page. To do so, you "
"may invoke the `allowPromotionCodes` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1265
#, no-wrap
msgid "    $checkout = $user->allowPromotionCodes()->checkout('price_12345');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1267
#, no-wrap
msgid "<a name=\"single-charge-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1267
#, no-wrap
msgid "Single Charge Checkouts"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1270
msgid ""
"You can also perform a simple charge for an ad-hoc product that has not been "
"created in your Stripe dashboard. To do so you may use the `checkoutCharge` "
"method on a billable model and pass it a chargeable amount, a product name, "
"and an optional quantity:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1272
#, no-wrap
msgid "    $checkout = $user->checkoutCharge(1200, 'T-Shirt', 5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1282 docs/master/billing.md:1318
msgid ""
"When a customer clicks this button they will be redirected to Stripe's "
"Checkout page."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1284
#, no-wrap
msgid "> {note} When using the `checkoutCharge` method, Stripe will always create a new product and price in your Stripe dashboard. Therefore, we recommend that you create the products up front in your Stripe dashboard and use of the `checkout` method instead.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1286
#, no-wrap
msgid "<a name=\"subscription-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1286
#, no-wrap
msgid "Subscription Checkouts"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1289
#, no-wrap
msgid "> {note} Using Stripe Checkout for subscriptions requires you to enable the `customer.subscription.created` webhook in your Stripe dashboard. This webhook will create the subscription record in your database and store all of the relevant subscription items.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1291
msgid ""
"You may also use Stripe Checkout to initiate subscriptions. After defining "
"your subscription with Cashier's subscription builder methods, you may call "
"the `checkout `method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1295
#, no-wrap
msgid ""
"    $checkout = Auth::user()\n"
"            ->newSubscription('default', 'price_xxx')\n"
"            ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1301
msgid ""
"Just as with product checkouts, you may customize the success and "
"cancellation URLs:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1306
#, no-wrap
msgid ""
"    $checkout = Auth::user()->newSubscription('default', 'price_xxx')->checkout([\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1308
msgid ""
"Of course, you can also enable promotion codes for subscription checkouts:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1312
#, no-wrap
msgid ""
"    $checkout = Auth::user()->newSubscription('default', 'price_xxx')\n"
"        ->allowPromotionCodes()\n"
"        ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1316
#, no-wrap
msgid "    {{ $checkout->button('Subscribe') }}\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1320
#, no-wrap
msgid "> {note} Unfortunately Stripe Checkout does not support all subscription billing options when starting subscriptions. Using the `anchorBillingCycleOn` method on the subscription builder, setting proration behavior, or setting payment behavior will not have any effect during Stripe Checkout sessions. Please consult [the Stripe Checkout Session API documentation](https://stripe.com/docs/api/checkout/sessions/create) to review which parameters are available.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1322
#, no-wrap
msgid "<a name=\"stripe-checkout-trial-periods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1322
#, no-wrap
msgid "Stripe Checkout & Trial Periods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1325
msgid ""
"Of course, you can define a trial period when building a subscription that "
"will be completed using Stripe Checkout:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1329
#, no-wrap
msgid ""
"    $checkout = Auth::user()->newSubscription('default', 'price_xxx')\n"
"        ->trialDays(3)\n"
"        ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1331
msgid ""
"However, the trial period must be at least 48 hours, which is the minimum "
"amount of trial time supported by Stripe Checkout."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1333
#, no-wrap
msgid "<a name=\"stripe-checkout-subscriptions-and-webhooks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1333
#, no-wrap
msgid "Subscriptions & Webhooks"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1336
msgid ""
"Remember, Stripe and Cashier update subscription statuses via webhooks, so "
"there's a possibility a subscription might not yet be active when the "
"customer returns to the application after entering their payment "
"information. To handle this scenario, you may wish to display a message "
"informing the user that their payment or subscription is pending."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1338
#, no-wrap
msgid "<a name=\"styling-the-checkout-button\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1338
#, no-wrap
msgid "Styling The Checkout Button"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1341
msgid ""
"When rendering the checkout button, you may customize the button's styling "
"using the `class` and `style` options. These options should be passed within "
"an associative array as the second argument to the `button` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1343
#, no-wrap
msgid "    {{ $checkout->button('Buy', ['class' => 'p-4 bg-blue-500 text-white']) }}\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1345
#, no-wrap
msgid "<a name=\"handling-failed-payments\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1345
#, no-wrap
msgid "Handling Failed Payments"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1348
msgid ""
"Sometimes, payments for subscriptions or single charges can fail. When this "
"happens, Cashier will throw an `Laravel\\Cashier\\Exceptions"
"\\IncompletePayment` exception that informs you that this happened. After "
"catching this exception, you have two options on how to proceed."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1350
msgid ""
"First, you could redirect your customer to the dedicated payment "
"confirmation page which is included with Cashier. This page already has an "
"associated named route that is registered via Cashier's service provider. "
"So, you may catch the `IncompletePayment` exception and redirect the user to "
"the payment confirmation page:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1352
#, no-wrap
msgid "    use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1362
#, no-wrap
msgid ""
"    try {\n"
"        $subscription = $user->newSubscription('default', $planId)\n"
"                                ->create($paymentMethod);\n"
"    } catch (IncompletePayment $exception) {\n"
"        return redirect()->route(\n"
"            'cashier.payment',\n"
"            [$exception->payment->id, 'redirect' => route('home')]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1364
msgid ""
"On the payment confirmation page, the customer will be prompted to enter "
"their credit card information again and perform any additional actions "
"required by Stripe, such as \"3D Secure\" confirmation. After confirming "
"their payment, the user will be redirected to the URL provided by the "
"`redirect` parameter specified above. Upon redirection, `message` (string) "
"and `success` (integer) query string variables will be added to the URL."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1366
msgid ""
"Alternatively, you could allow Stripe to handle the payment confirmation for "
"you. In this case, instead of redirecting to the payment confirmation page, "
"you may [setup Stripe's automatic billing emails](https://dashboard.stripe."
"com/account/billing/automatic) in your Stripe dashboard. However, if an "
"`IncompletePayment` exception is caught, you should still inform the user "
"they will receive an email with further payment confirmation instructions."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1368
msgid ""
"Payment exceptions may be thrown for the following methods: `charge`, "
"`invoiceFor`, and `invoice` on models using the `Billable` trait. When "
"interacting with subscriptions, the `create` method on the "
"`SubscriptionBuilder`, and the `incrementAndInvoice` and `swapAndInvoice` "
"methods on the `Subscription` model may throw incomplete payment exceptions."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1370
msgid ""
"Determining if an existing subscription has an incomplete payment may be "
"accomplished using the `hasIncompletePayment` method on the billable model "
"or a subscription instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1380
msgid ""
"There are currently two types of payment exceptions which extend "
"`IncompletePayment`. You can catch these separately if needed so that you "
"can customize the user experience:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1385
#, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- `Laravel\\Cashier\\Exceptions\\PaymentActionRequired`: this exception indicates that Stripe requires extra verification in order to confirm and process a payment.\n"
"- `Laravel\\Cashier\\Exceptions\\PaymentFailure`: this exception indicates that a payment failed for various other reasons, such as being out of available funds.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1387
#, no-wrap
msgid "<a name=\"strong-customer-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1387
#, no-wrap
msgid "Strong Customer Authentication"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1390
msgid ""
"If your business is based in Europe you will need to abide by the EU's "
"Strong Customer Authentication (SCA) regulations. These regulations were "
"imposedÂ in September 2019 by the European Union to prevent payment fraud. "
"Luckily, Stripe and Cashier are prepared for building SCA compliant "
"applications."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1392
#, no-wrap
msgid "> {note} Before getting started, review [Stripe's guide on PSD2 and SCA](https://stripe.com/guides/strong-customer-authentication) as well as their [documentation on the new SCA APIs](https://stripe.com/docs/strong-customer-authentication).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1394
#, no-wrap
msgid "<a name=\"payments-requiring-additional-confirmation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1394
#, no-wrap
msgid "Payments Requiring Additional Confirmation"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1397
msgid ""
"SCA regulations often require extra verification in order to confirm and "
"process a payment. When this happens, Cashier will throw a `Laravel\\Cashier"
"\\Exceptions\\PaymentActionRequired` exception that informs you that extra "
"verification is needed. More information on how to handle these exceptions "
"be found can be found in the documentation on [handling failed payments]"
"(#handling-failed-payments)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1399
#, no-wrap
msgid "<a name=\"incomplete-and-past-due-state\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1399
#, no-wrap
msgid "Incomplete and Past Due State"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1402
msgid ""
"When a payment needs additional confirmation, the subscription will remain "
"in an `incomplete` or `past_due` state as indicated by its `stripe_status` "
"database column. Cashier will automatically activate the customer's "
"subscription as soon as payment confirmation is complete and your "
"application is notified by Stripe via webhook of its completion."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1404
msgid ""
"For more information on `incomplete` and `past_due` states, please refer to "
"[our additional documentation on these states](#incomplete-and-past-due-"
"status)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1406
#, no-wrap
msgid "<a name=\"off-session-payment-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1406
#, no-wrap
msgid "Off-Session Payment Notifications"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1409
msgid ""
"Since SCA regulations require customers to occasionally verify their payment "
"details even while their subscription is active, Cashier can send a "
"notification to the customer when off-session payment confirmation is "
"required. For example, this may occur when a subscription is renewing. "
"Cashier's payment notification can be enabled by setting the "
"`CASHIER_PAYMENT_NOTIFICATION` environment variable to a notification class. "
"By default, this notification is disabled. Of course, Cashier includes a "
"notification class you may use for this purpose, but you are free to provide "
"your own notification class if desired:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1411
#, no-wrap
msgid "    CASHIER_PAYMENT_NOTIFICATION=Laravel\\Cashier\\Notifications\\ConfirmPayment\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1413
msgid ""
"To ensure that off-session payment confirmation notifications are delivered, "
"verify that [Stripe webhooks are configured](#handling-stripe-webhooks) for "
"your application and the `invoice.payment_action_required` webhook is "
"enabled in your Stripe dashboard. In addition, your `Billable` model should "
"also use Laravel's `Illuminate\\Notifications\\Notifiable` trait."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1415
#, no-wrap
msgid "> {note} Notifications will be sent even when customers are manually making a payment that requires additional confirmation. Unfortunately, there is no way for Stripe to know that the payment was done manually or \"off-session\". But, a customer will simply see a \"Payment Successful\" message if they visit the payment page after already confirming their payment. The customer will not be allowed to accidentally confirm the same payment twice and incur an accidental second charge.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1417
#, no-wrap
msgid "<a name=\"stripe-sdk\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1417
#, no-wrap
msgid "Stripe SDK"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1420
msgid ""
"Many of Cashier's objects are wrappers around Stripe SDK objects. If you "
"would like to interact with the Stripe objects directly, you may "
"conveniently retrieve them using the `asStripe` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1422
#, no-wrap
msgid "    $stripeSubscription = $subscription->asStripeSubscription();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1424
#, no-wrap
msgid "    $stripeSubscription->application_fee_percent = 5;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1426
#, no-wrap
msgid "    $stripeSubscription->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1428
msgid ""
"You may also use the `updateStripeSubscription` method to update a Stripe "
"subscription directly:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1430
#, no-wrap
msgid "    $subscription->updateStripeSubscription(['application_fee_percent' => 5]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1432
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1432
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1435
msgid ""
"When testing an application that uses Cashier, you may mock the actual HTTP "
"requests to the Stripe API; however, this requires you to partially re-"
"implement Cashier's own behavior. Therefore, we recommend allowing your "
"tests to hit the actual Stripe API. While this is slower, it provides more "
"confidence that your application is working as expected and any slow tests "
"may be placed within their own PHPUnit testing group."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1437
msgid ""
"When testing, remember that Cashier itself already has a great test suite, "
"so you should only focus on testing the subscription and payment flow of "
"your own application and not every underlying Cashier behavior."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1439
msgid ""
"To get started, add the **testing** version of your Stripe secret to your "
"`phpunit.xml` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1441
#, no-wrap
msgid "    <env name=\"STRIPE_SECRET\" value=\"sk_test_<your-key>\"/>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1443
msgid ""
"Now, whenever you interact with Cashier while testing, it will send actual "
"API requests to your Stripe testing environment. For convenience, you should "
"pre-fill your Stripe testing account with subscriptions / plans that you may "
"use during testing."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1444
#, no-wrap
msgid "> {tip} In order to test a variety of billing scenarios, such as credit card denials and failures, you may use the vast range of [testing card numbers and tokens](https://stripe.com/docs/testing) provided by Stripe.\n"
msgstr ""

#, no-wrap
#~ msgid "Laravel Fortify"
#~ msgstr "Laravel Fortify"

#~ msgid "[What Is Fortify?](#what-is-fortify)"
#~ msgstr "[什麼是 Fortify？](#what-is-fortify)"

#~ msgid "[When Should I Use Fortify?](#when-should-i-use-fortify)"
#~ msgstr "[什麼時候該用 Fortify？](#when-should-i-use-fortify)"
