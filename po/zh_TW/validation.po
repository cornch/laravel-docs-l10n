msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/validation.pot\n"
"X-Crowdin-File-ID: 171\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-02-11 12:59\n"

#: docs/10.x/validation.md:block 1 (header)
msgid "Validation"
msgstr "表單驗證 - Validation"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validation Quickstart](#validation-quickstart)"
msgstr "[「表單驗證」快速入門](#validation-quickstart)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Defining The Routes](#quick-defining-the-routes)"
msgstr "[定義 Route](#quick-defining-the-routes)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Creating The Controller](#quick-creating-the-controller)"
msgstr "[建立 Controller](#quick-creating-the-controller)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Writing The Validation Logic](#quick-writing-the-validation-logic)"
msgstr "[撰寫表單驗證邏輯](#quick-writing-the-validation-logic)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Displaying The Validation Errors](#quick-displaying-the-validation-errors)"
msgstr "[顯示驗證錯誤](#quick-displaying-the-validation-errors)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Repopulating Forms](#repopulating-forms)"
msgstr "[重新回填表單](#repopulating-forms)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[A Note On Optional Fields](#a-note-on-optional-fields)"
msgstr "[有關可選欄位的注意事項](#a-note-on-optional-fields)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validation Error Response Format](#validation-error-response-format)"
msgstr "[驗證錯誤的 Response 格式](#validation-error-response-format)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Form Request Validation](#form-request-validation)"
msgstr "[Form Request 的驗證](#form-request-validation)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Creating Form Requests](#creating-form-requests)"
msgstr "[建立 Form Request](#creating-form-requests)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Authorizing Form Requests](#authorizing-form-requests)"
msgstr "[授權 Form Request](#authorizing-form-requests)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Customizing The Error Messages](#customizing-the-error-messages)"
msgstr "[自訂錯誤訊息](#customizing-the-error-messages)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Preparing Input For Validation](#preparing-input-for-validation)"
msgstr "[為表單驗證準備輸入](#preparing-input-for-validation)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Manually Creating Validators](#manually-creating-validators)"
msgstr "[手動建立 Validator](#manually-creating-validators)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Automatic Redirection](#automatic-redirection)"
msgstr "[自動重新導向](#automatic-redirection)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Named Error Bags](#named-error-bags)"
msgstr "[命名的 Error Bag](#named-error-bags)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Customizing The Error Messages](#manual-customizing-the-error-messages)"
msgstr "[自訂錯誤訊息](#manual-customizing-the-error-messages)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[After Validation Hook](#after-validation-hook)"
msgstr "[After Validation Hook](#after-validation-hook)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Working With Validated Input](#working-with-validated-input)"
msgstr "[處理已驗證的輸入](#working-with-validated-input)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Working With Error Messages](#working-with-error-messages)"
msgstr "[處理錯誤訊息](#working-with-error-messages)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Specifying Custom Messages In Language Files](#specifying-custom-messages-in-language-files)"
msgstr "[在語系檔中指定自訂訊息](#specifying-custom-messages-in-language-files)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Specifying Attributes In Language Files](#specifying-attribute-in-language-files)"
msgstr "[在語系檔中指定屬性](#specifying-attribute-in-language-files)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Specifying Values In Language Files](#specifying-values-in-language-files)"
msgstr "[在語系檔中指定值](#specifying-values-in-language-files)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Available Validation Rules](#available-validation-rules)"
msgstr "[可用的表單驗證規則](#available-validation-rules)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Conditionally Adding Rules](#conditionally-adding-rules)"
msgstr "[條件式新增規則](#conditionally-adding-rules)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Arrays](#validating-arrays)"
msgstr "[驗證陣列](#validating-arrays)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Nested Array Input](#validating-nested-array-input)"
msgstr "[驗證巢狀陣列輸入](#validating-nested-array-input)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Error Message Indexes & Positions](#error-message-indexes-and-positions)"
msgstr "[錯誤訊息的索引與位置](#error-message-indexes-and-positions)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Files](#validating-files)"
msgstr "[驗證](#validating-files)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Validating Passwords](#validating-passwords)"
msgstr "[驗證密碼](#validating-passwords)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Custom Validation Rules](#custom-validation-rules)"
msgstr "[自訂驗證規則](#custom-validation-rules)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Using Rule Objects](#using-rule-objects)"
msgstr "[使用 Rule 物件](#using-rule-objects)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Using Closures](#using-closures)"
msgstr "[使用閉包](#using-closures)"

#: docs/10.x/validation.md:block 2 (unordered list)
msgid "[Implicit Rules](#implicit-rules)"
msgstr "[隱式規則](#implicit-rules)"

#: docs/10.x/validation.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/validation.md:block 5 (paragraph)
msgid "Laravel provides several different approaches to validate your application's incoming data. It is most common to use the `validate` method available on all incoming HTTP requests. However, we will discuss other approaches to validation as well."
msgstr "Laravel 中提供了多種不同方式能讓我們對連入資料做驗證 (Validate)。最常見的方法就是使用所有連入 HTTP Request 上都有的 `validata` 方法來驗證。不過，我們稍後也會討論其他驗證方法。"

#: docs/10.x/validation.md:block 6 (paragraph)
msgid "Laravel includes a wide variety of convenient validation rules that you may apply to data, even providing the ability to validate if values are unique in a given database table. We'll cover each of these validation rules in detail so that you are familiar with all of Laravel's validation features."
msgstr "Laravel 中包含了多種方便的驗證規則可讓你套用到資料上，甚至，Laravel 中也有辦法驗證某個值在給定資料表上是否是不重複的。稍後我們會詳細說明各個驗證規則，讓你熟悉 Laravel 中所有的驗證功能。"

#: docs/10.x/validation.md:block 8 (header)
msgid "Validation Quickstart"
msgstr "「Validation」快速開始"

#: docs/10.x/validation.md:block 9 (paragraph)
msgid "To learn about Laravel's powerful validation features, let's look at a complete example of validating a form and displaying the error messages back to the user. By reading this high-level overview, you'll be able to gain a good general understanding of how to validate incoming request data using Laravel:"
msgstr "要瞭解有關 Laravel 中強大的驗證功能，我們先來看看一個驗證表單並將錯誤訊息顯示給使用者看的完整範例。閱讀這個高階的範例，讀者將能對如何使用 Laravel 驗證連入的 Request 資料有個基本的理解："

#: docs/10.x/validation.md:block 11 (header)
msgid "Defining The Routes"
msgstr "定義 Route"

#: docs/10.x/validation.md:block 12 (paragraph)
msgid "First, let's assume we have the following routes defined in our `routes/web.php` file:"
msgstr "首先，我們假設 `routes/web.php` 檔案中有下列 Route 定義："

#: docs/10.x/validation.md:block 13 (code)
msgid "use App\\Http\\Controllers\\PostController;\n\n"
"Route::get('/post/create', [PostController::class, 'create']);\n"
"Route::post('/post', [PostController::class, 'store']);\n"
msgstr "use App\\Http\\Controllers\\PostController;\n\n"
"Route::get('/post/create', [PostController::class, 'create']);\n"
"Route::post('/post', [PostController::class, 'store']);\n"

#: docs/10.x/validation.md:block 14 (paragraph)
msgid "The `GET` route will display a form for the user to create a new blog post, while the `POST` route will store the new blog post in the database."
msgstr "這個 `GET` Route 會向使用者顯示一個用來建立新部落格貼文的表單，而 `POST` Route 則用來將新部落格貼文儲存到資料庫中。"

#: docs/10.x/validation.md:block 16 (header)
msgid "Creating The Controller"
msgstr "建立 Controller"

#: docs/10.x/validation.md:block 17 (paragraph)
msgid "Next, let's take a look at a simple controller that handles incoming requests to these routes. We'll leave the `store` method empty for now:"
msgstr "接著，我們來看看一個簡單的 Controller，這個 Controller 用來處理這些 Route 的連入 Request。我們現在先把 `store` 方法留空："

#: docs/10.x/validation.md:block 18 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\View\\View;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     */\n"
"    public function create(): View\n"
"    {\n"
"        return view('post.create');\n"
"    }\n\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        // Validate and store the blog post...\n\n"
"        $post = /** ... */\n\n"
"        return to_route('post.show', ['post' => $post->id]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\View\\View;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     */\n"
"    public function create(): View\n"
"    {\n"
"        return view('post.create');\n"
"    }\n\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        // 驗證並保存部落格貼文...\n\n"
"        $post = /** ... */\n\n"
"        return to_route('post.show', ['post' => $post->id]);\n"
"    }\n"
"}\n"

#: docs/10.x/validation.md:block 20 (header)
msgid "Writing The Validation Logic"
msgstr "撰寫驗證邏輯"

#: docs/10.x/validation.md:block 21 (paragraph)
msgid "Now we are ready to fill in our `store` method with the logic to validate the new blog post. To do this, we will use the `validate` method provided by the `Illuminate\\Http\\Request` object. If the validation rules pass, your code will keep executing normally; however, if validation fails, an `Illuminate\\Validation\\ValidationException` exception will be thrown and the proper error response will automatically be sent back to the user."
msgstr "現在，我們已經準備好可以在 `store` 方法內撰寫驗證新部落格貼文的驗證邏輯了。要撰寫驗證邏輯，我們會使用 `Illuminate\\Http\\Request` 物件所提供的 `validate` 方法。若驗證規則通過，則程式碼就可以繼續正常執行。不過，若驗證失敗，則會擲回 `Illuminate\\Validation\\ValidationException` 例外，然後 Laravel 會自動回傳適當的錯誤 Response 給使用者。"

#: docs/10.x/validation.md:block 22 (paragraph)
msgid "If validation fails during a traditional HTTP request, a redirect response to the previous URL will be generated. If the incoming request is an XHR request, a [JSON response containing the validation error messages](#validation-error-response-format) will be returned."
msgstr "若驗證失敗時使用的是傳統 HTTP Request，則會產生一個回到上一頁網址的 Redirect Response。若連入的 Request 是 XHR Request，則會回傳一個[包含驗證錯誤訊息的 JSON Response]](#validation-error-response-format)。"

#: docs/10.x/validation.md:block 23 (paragraph)
msgid "To get a better understanding of the `validate` method, let's jump back into the `store` method:"
msgstr "為了更好瞭解 `validate`，我們先回來看看 `store` 方法："

#: docs/10.x/validation.md:block 24 (code)
msgid "/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(Request $request): Response\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n\n"
"    // The blog post is valid...\n\n"
"    return response()->noContent();\n"
"}\n"
msgstr "/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(Request $request): Response\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n\n"
"    // 部落格貼文有效...\n\n"
"    return response()->noContent();\n"
"}\n"

#: docs/10.x/validation.md:block 25 (paragraph)
msgid "As you can see, the validation rules are passed into the `validate` method. Don't worry - all available validation rules are [documented](#available-validation-rules). Again, if the validation fails, the proper response will automatically be generated. If the validation passes, our controller will continue executing normally."
msgstr "就像我們可以看到的一樣，我們將驗證規則傳入 `validate` 方法。別擔心 —— 所有可用的規則都有[說明文件](#available-validation-rules)。一樣，若驗證失敗，會自動產生適當的 Response。若驗證成功，我們的 Controller 就會繼續正常執行。"

#: docs/10.x/validation.md:block 26 (paragraph)
msgid "Alternatively, validation rules may be specified as arrays of rules instead of a single `|` delimited string:"
msgstr "或者，我們也可以不使用以 `|` 分隔的單一字串來指定驗證規則，而是使用一組規則陣列："

#: docs/10.x/validation.md:block 27 (code)
msgid "$validatedData = $request->validate([\n"
"    'title' => ['required', 'unique:posts', 'max:255'],\n"
"    'body' => ['required'],\n"
"]);\n"
msgstr "$validatedData = $request->validate([\n"
"    'title' => ['required', 'unique:posts', 'max:255'],\n"
"    'body' => ['required'],\n"
"]);\n"

#: docs/10.x/validation.md:block 28 (paragraph)
msgid "In addition, you may use the `validateWithBag` method to validate a request and store any error messages within a [named error bag](#named-error-bags):"
msgstr "此外，也可以使用 `validateWithBag` 方法來驗證 Request 並將錯誤訊息保存在一個[命名的 Error Bag](#named-error-bags)："

#: docs/10.x/validation.md:block 29 (code)
msgid "$validatedData = $request->validateWithBag('post', [\n"
"    'title' => ['required', 'unique:posts', 'max:255'],\n"
"    'body' => ['required'],\n"
"]);\n"
msgstr "$validatedData = $request->validateWithBag('post', [\n"
"    'title' => ['required', 'unique:posts', 'max:255'],\n"
"    'body' => ['required'],\n"
"]);\n"

#: docs/10.x/validation.md:block 31 (header)
msgid "Stopping On First Validation Failure"
msgstr "在第一個驗證失敗後就停止"

#: docs/10.x/validation.md:block 32 (paragraph)
msgid "Sometimes you may wish to stop running validation rules on an attribute after the first validation failure. To do so, assign the `bail` rule to the attribute:"
msgstr "有時候，我們會想在驗證某個屬性時，當遇到第一個驗證失敗就停止執行接下來的驗證規則。為此，可以在該屬性上加上 `bail` 規則："

#: docs/10.x/validation.md:block 33 (code)
msgid "$request->validate([\n"
"    'title' => 'bail|required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"]);\n"
msgstr "$request->validate([\n"
"    'title' => 'bail|required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"]);\n"

#: docs/10.x/validation.md:block 34 (paragraph)
msgid "In this example, if the `unique` rule on the `title` attribute fails, the `max` rule will not be checked. Rules will be validated in the order they are assigned."
msgstr "在這個例子中，若 `title` 屬性上的 `unique` 規則執行失敗，將不會檢查 `max` 規則。會依照所指派的順序來執行驗證規則。"

#: docs/10.x/validation.md:block 36 (header)
msgid "A Note On Nested Attributes"
msgstr "有關巢狀屬性的注意事項"

#: docs/10.x/validation.md:block 37 (paragraph)
msgid "If the incoming HTTP request contains \"nested\" field data, you may specify these fields in your validation rules using \"dot\" syntax:"
msgstr "若連入的 HTTP Request 中包含「巢狀」的欄位資料，請使用「點 (.)」語法來在驗證規則中指定這些欄位："

#: docs/10.x/validation.md:block 38 (code)
msgid "$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'author.name' => 'required',\n"
"    'author.description' => 'required',\n"
"]);\n"
msgstr "$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'author.name' => 'required',\n"
"    'author.description' => 'required',\n"
"]);\n"

#: docs/10.x/validation.md:block 39 (paragraph)
msgid "On the other hand, if your field name contains a literal period, you can explicitly prevent this from being interpreted as \"dot\" syntax by escaping the period with a backslash:"
msgstr "另一方面，若欄位名稱包含 `.` 字元，則我們可以使用反斜線來逸出句點，以顯式避免被解析成「點 (.)」語法："

#: docs/10.x/validation.md:block 40 (code)
msgid "$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'v1\\.0' => 'required',\n"
"]);\n"
msgstr "$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'v1\\.0' => 'required',\n"
"]);\n"

#: docs/10.x/validation.md:block 42 (header)
msgid "Displaying The Validation Errors"
msgstr "顯示驗證錯誤"

#: docs/10.x/validation.md:block 43 (paragraph)
msgid "So, what if the incoming request fields do not pass the given validation rules? As mentioned previously, Laravel will automatically redirect the user back to their previous location. In addition, all of the validation errors and [request input](/docs/{{version}}/requests#retrieving-old-input) will automatically be [flashed to the session](/docs/{{version}}/session#flash-data)."
msgstr "那麼，如果連入 Request 的欄位沒通過給定的驗證規則呢？就像剛才提到過的，Laravel 會自動將使用者重新導向回到上一個位置。此外，所有的驗證規則與 [Request 輸入](/docs/{{version}}/requests#retrieving-old-input)都會自動被[快閃存入 Session](/docs/{{version}}/session#flash-data)。"

#: docs/10.x/validation.md:block 44 (paragraph)
msgid "An `$errors` variable is shared with all of your application's views by the `Illuminate\\View\\Middleware\\ShareErrorsFromSession` middleware, which is provided by the `web` middleware group. When this middleware is applied an `$errors` variable will always be available in your views, allowing you to conveniently assume the `$errors` variable is always defined and can be safely used. The `$errors` variable will be an instance of `Illuminate\\Support\\MessageBag`. For more information on working with this object, [check out its documentation](#working-with-error-messages)."
msgstr "`Illuminate\\View\\Middleware\\ShareErrorsFromSession` Middleware 幫我們在專案中所有的 View 間共享了一個 `$errors` 變數。這個 Middleware 在 `web` Middleware 群組中提供。當有套用這個 Middleware 時，所有的 View 中都會有 `$errors` 變數，因此我們能方便地假設 `$errors` 變數擁有都已定義好且可安全地使用。`$errors` 變數是 `Illuminate\\Support\\MessageBag` 的實體。更多有關該物件的資訊，[請參考 Message Bag 的說明文件](#working-with-error-messages)。"

#: docs/10.x/validation.md:block 45 (paragraph)
msgid "So, in our example, the user will be redirected to our controller's `create` method when validation fails, allowing us to display the error messages in the view:"
msgstr "所有，在我們的範例中，當驗證失敗時，使用者會被重新導向到 Controller 的 `create` 方法，讓我們能在 View 中顯示錯誤訊息："

#: docs/10.x/validation.md:block 46 (code)
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<h1>Create Post</h1>\n\n"
"@if ($errors->any())\n"
"    <div class=\"alert alert-danger\">\n"
"        <ul>\n"
"            @foreach ($errors->all() as $error)\n"
"                <li>{{ $error }}</li>\n"
"            @endforeach\n"
"        </ul>\n"
"    </div>\n"
"@endif\n\n"
"<!-- Create Post Form -->\n"
msgstr "<!-- /resources/views/post/create.blade.php -->\n\n"
"<h1>Create Post</h1>\n\n"
"@if ($errors->any())\n"
"    <div class=\"alert alert-danger\">\n"
"        <ul>\n"
"            @foreach ($errors->all() as $error)\n"
"                <li>{{ $error }}</li>\n"
"            @endforeach\n"
"        </ul>\n"
"    </div>\n"
"@endif\n\n"
"<!-- Create Post Form -->\n"

#: docs/10.x/validation.md:block 48 (header)
msgid "Customizing The Error Messages"
msgstr "自訂錯誤訊息"

#: docs/10.x/validation.md:block 49 (paragraph)
msgid "Laravel's built-in validation rules each have an error message that is located in your application's `lang/en/validation.php` file. Within this file, you will find a translation entry for each validation rule. You are free to change or modify these messages based on the needs of your application."
msgstr "在專案的 `lang/en/validation.php` 檔案中，有所有 Laravel 內建驗證規則的錯誤訊息。在這個檔案中，我們可以看到每個驗證規則的翻譯欄位。可以依照需求修改這些訊息。"

#: docs/10.x/validation.md:block 50 (paragraph)
msgid "In addition, you may copy this file to another language directory to translate the messages for your application's language. To learn more about Laravel localization, check out the complete [localization documentation](/docs/{{version}}/localization)."
msgstr "此外，也可以把這個檔案複製到另一個翻譯語系目錄中，以將其翻成你專案的語言。要瞭解 Laravel 中有關本土化 (Localization) 的更多資訊，請參考完整的[本土化說明文件](/docs/{{version}}/localization)。"

#: docs/10.x/validation.md:block 51 (quote)
msgid "**Warning** By default, the Laravel application skeleton does not include the `lang` directory. If you would like to customize Laravel's language files, you may publish them via the `lang:publish` Artisan command."
msgstr "**Warning** 預設情況下，Laravel 專案的 Skeleton 中未包含 `lang` 目錄。若想自定 Laravel 的語系檔，可以使用 `lang:publish` Artisan 指令來安裝語系檔："

#: docs/10.x/validation.md:block 53 (header)
msgid "XHR Requests & Validation"
msgstr "XHR Request 與驗證"

#: docs/10.x/validation.md:block 54 (paragraph)
msgid "In this example, we used a traditional form to send data to the application. However, many applications receive XHR requests from a JavaScript powered frontend. When using the `validate` method during an XHR request, Laravel will not generate a redirect response. Instead, Laravel generates a [JSON response containing all of the validation errors](#validation-error-response-format). This JSON response will be sent with a 422 HTTP status code."
msgstr "在這個例子中，我們使用傳統的表單來將資料傳給程式。不過，有許多程式是接受來自 JavaScript 前端的 XHR Request。在 XHR Request 中使用 `validate` 方法時，Laravel 不會產生 Redirect Response，而是產生一個[包含所有驗證錯誤的 JSON Response](#validation-error-response-format)。JSON Response 會以 422 HTTP 狀態碼傳送。"

#: docs/10.x/validation.md:block 56 (header)
msgid "The `@error` Directive"
msgstr "`@error` 指示詞"

#: docs/10.x/validation.md:block 57 (paragraph)
msgid "You may use the `@error` [Blade](/docs/{{version}}/blade) directive to quickly determine if validation error messages exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr "可以使用 `@error` Blade 指示詞來快速判斷給定的屬性是否有驗證錯誤訊息。在 `@error` 指示詞內，可以輸出 `$message` 變數來顯示錯誤訊息："

#: docs/10.x/validation.md:block 58 (code)
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    name=\"title\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    name=\"title\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"

#: docs/10.x/validation.md:block 59 (paragraph)
msgid "If you are using [named error bags](#named-error-bags), you may pass the name of the error bag as the second argument to the `@error` directive:"
msgstr "若使用[命名的 Error Bag](#named-error-bags)，則可將 Error Bag 的名稱作為第二個引數傳給 `@error` 指示詞："

#: docs/10.x/validation.md:block 60 (code)
msgid "<input ... class=\"@error('title', 'post') is-invalid @enderror\">\n"
msgstr "<input ... class=\"@error('title', 'post') is-invalid @enderror\">\n"

#: docs/10.x/validation.md:block 62 (header)
msgid "Repopulating Forms"
msgstr "重新回填表單"

#: docs/10.x/validation.md:block 63 (paragraph)
msgid "When Laravel generates a redirect response due to a validation error, the framework will automatically [flash all of the request's input to the session](/docs/{{version}}/session#flash-data). This is done so that you may conveniently access the input during the next request and repopulate the form that the user attempted to submit."
msgstr "當 Laravel 因為驗證錯誤而產生 Redirect Response 時，Laravel 會自動[將目前的 Request 輸入快閃存入 Session](/docs/{{version}}/session#flash-data)。這樣一來我們就能在下一個 Request 中方便地存取這些輸入，並將資料重新回填到使用者嘗試送出的表單上。"

#: docs/10.x/validation.md:block 64 (paragraph)
msgid "To retrieve flashed input from the previous request, invoke the `old` method on an instance of `Illuminate\\Http\\Request`. The `old` method will pull the previously flashed input data from the [session](/docs/{{version}}/session):"
msgstr "若要取得前一個 Request 中的快閃輸入，可叫用 `Illuminate\\Http\\Request` 上的 `old` 方法。`old` 方法從 [Session](/docs/{{version}}/session) 中拉取前次快閃存入輸入資料："

#: docs/10.x/validation.md:block 65 (code)
msgid "$title = $request->old('title');\n"
msgstr "$title = $request->old('title');\n"

#: docs/10.x/validation.md:block 66 (paragraph)
msgid "Laravel also provides a global `old` helper. If you are displaying old input within a [Blade template](/docs/{{version}}/blade), it is more convenient to use the `old` helper to repopulate the form. If no old input exists for the given field, `null` will be returned:"
msgstr "Laravel 也提供了一個全域 `old` 輔助函式。若想在 [Blade 樣板](/docs/{{version}}/blade)中顯示舊輸入，那麼使用 `old` 輔助函式來將其填回表單回比較方便。若給定欄位沒有舊輸入的話，會回傳 `null`："

#: docs/10.x/validation.md:block 67 (code)
msgid "<input type=\"text\" name=\"title\" value=\"{{ old('title') }}\">\n"
msgstr "<input type=\"text\" name=\"title\" value=\"{{ old('title') }}\">\n"

#: docs/10.x/validation.md:block 69 (header)
msgid "A Note On Optional Fields"
msgstr "有關可選欄位的注意事項"

#: docs/10.x/validation.md:block 70 (paragraph)
msgid "By default, Laravel includes the `TrimStrings` and `ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware are listed in the stack by the `App\\Http\\Kernel` class. Because of this, you will often need to mark your \"optional\" request fields as `nullable` if you do not want the validator to consider `null` values as invalid. For example:"
msgstr "預設情況下，Laravel 的全域 Middleware Stack 中包含了 `TrimStrings` 與 `ConvertEmptyStringsToNull` Middleware。這兩個 Middleware 由 `App\\Http\\Kernel` 類別列在一個 Stack 中。因此，如果不希望 Validator (驗證程式) 把 `null` 值當作無效資料的話，我們常常需要將「可選填」的 Request 欄位標為 `nullable`。舉例來說："

#: docs/10.x/validation.md:block 71 (code)
msgid "$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"    'publish_at' => 'nullable|date',\n"
"]);\n"
msgstr "$request->validate([\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"    'publish_at' => 'nullable|date',\n"
"]);\n"

#: docs/10.x/validation.md:block 72 (paragraph)
msgid "In this example, we are specifying that the `publish_at` field may be either `null` or a valid date representation. If the `nullable` modifier is not added to the rule definition, the validator would consider `null` an invalid date."
msgstr "在這個範例中，我們指定讓 `publish_at` 欄位可以是 `null` 或是有效的日期呈現。若沒有在規則定義中加上 `nullabale` 修飾詞 (Modifier)，則 Validator 會把 `null` 當作無效的日期。"

#: docs/10.x/validation.md:block 74 (header)
msgid "Validation Error Response Format"
msgstr "驗證錯誤的 Response 格式"

#: docs/10.x/validation.md:block 75 (paragraph)
msgid "When your application throws a `Illuminate\\Validation\\ValidationException` exception and the incoming HTTP request is expecting a JSON response, Laravel will automatically format the error messages for you and return a `422 Unprocessable Entity` HTTP response."
msgstr "當專案擲回 `Illuminate\\Validation\\ValidationException` Exception 且連入 HTTP Request 預期要回傳 JSON Response 時，Laravel 會自動格式化錯誤訊息，並回傳 `422 Unprocessable Entity` HTTP Response。"

#: docs/10.x/validation.md:block 76 (paragraph)
msgid "Below, you can review an example of the JSON response format for validation errors. Note that nested error keys are flattened into \"dot\" notation format:"
msgstr "下方是一個範例的驗證錯誤 JSON Response 格式。請注意，巢狀的錯誤索引鍵會被扁平化為「點 (.)」表示法："

#: docs/10.x/validation.md:block 77 (code)
msgid "{\n"
"    \"message\": \"The team name must be a string. (and 4 more errors)\",\n"
"    \"errors\": {\n"
"        \"team_name\": [\n"
"            \"The team name must be a string.\",\n"
"            \"The team name must be at least 1 characters.\"\n"
"        ],\n"
"        \"authorization.role\": [\n"
"            \"The selected authorization.role is invalid.\"\n"
"        ],\n"
"        \"users.0.email\": [\n"
"            \"The users.0.email field is required.\"\n"
"        ],\n"
"        \"users.2.email\": [\n"
"            \"The users.2.email must be a valid email address.\"\n"
"        ]\n"
"    }\n"
"}\n"
msgstr "{\n"
"    \"message\": \"The team name must be a string. (and 4 more errors)\",\n"
"    \"errors\": {\n"
"        \"team_name\": [\n"
"            \"The team name must be a string.\",\n"
"            \"The team name must be at least 1 characters.\"\n"
"        ],\n"
"        \"authorization.role\": [\n"
"            \"The selected authorization.role is invalid.\"\n"
"        ],\n"
"        \"users.0.email\": [\n"
"            \"The users.0.email field is required.\"\n"
"        ],\n"
"        \"users.2.email\": [\n"
"            \"The users.2.email must be a valid email address.\"\n"
"        ]\n"
"    }\n"
"}\n"

#: docs/10.x/validation.md:block 79 (header)
msgid "Form Request Validation"
msgstr "Form Request 的驗證"

#: docs/10.x/validation.md:block 81 (header)
msgid "Creating Form Requests"
msgstr "建立 Form Request"

#: docs/10.x/validation.md:block 82 (paragraph)
msgid "For more complex validation scenarios, you may wish to create a \"form request\". Form requests are custom request classes that encapsulate their own validation and authorization logic. To create a form request class, you may use the `make:request` Artisan CLI command:"
msgstr "在更複雜的驗證情境中，我們可能會想建立一個「Form Request (表單請求)」。Form Request 就是自訂的 Request 類別，其中封裝了該 Request 自己的驗證與認證邏輯。若要建立 Form Request 類別，可使用 `make:request` Artisan CLI 指令："

#: docs/10.x/validation.md:block 83 (code)
msgid "php artisan make:request StorePostRequest\n"
msgstr "php artisan make:request StorePostRequest\n"

#: docs/10.x/validation.md:block 84 (paragraph)
msgid "The generated form request class will be placed in the `app/Http/Requests` directory. If this directory does not exist, it will be created when you run the `make:request` command. Each form request generated by Laravel has two methods: `authorize` and `rules`."
msgstr "產生的 Form Request 會被放在 `app/Http/Requests` 目錄中。若該目錄不存在，則執行 `make:request` 指令是會自動建立。Laravel 產生的每個 Form Request 都有兩個方法：`authorize` 與 `rules`。"

#: docs/10.x/validation.md:block 85 (paragraph)
msgid "As you might have guessed, the `authorize` method is responsible for determining if the currently authenticated user can perform the action represented by the request, while the `rules` method returns the validation rules that should apply to the request's data:"
msgstr "讀者可能已經猜到，`authorize` 方法是用來判斷目前已登入使用者是否能進行該 Request 所代表的動作。`rules` 方法則回傳要套用到 Request 資料的驗證規則："

#: docs/10.x/validation.md:block 86 (code)
msgid "/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array<string, \\Illuminate\\Contracts\\Validation\\Rule|array|string>\n"
" */\n"
"public function rules(): array\n"
"{\n"
"    return [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array<string, \\Illuminate\\Contracts\\Validation\\Rule|array|string>\n"
" */\n"
"public function rules(): array\n"
"{\n"
"    return [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ];\n"
"}\n"

#: docs/10.x/validation.md:block 87 (quote)
msgid "**Note** You may type-hint any dependencies you require within the `rules` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr "**Note** 在 `rules` 方法的^[簽章](Signature) 中可以對任何需要的相依性進行^[型別提示](Type-Hint)。型別提示的相依性會由 Laravel 的 [Service Container](/docs/{{version}}/container) 自動解析。"

#: docs/10.x/validation.md:block 88 (paragraph)
msgid "So, how are the validation rules evaluated? All you need to do is type-hint the request on your controller method. The incoming form request is validated before the controller method is called, meaning you do not need to clutter your controller with any validation logic:"
msgstr "那麼，要怎麼執行驗證規則呢？我們只需要在 Controller 方法中型別提示這個 Request 即可。連入的 Form Request 會在呼叫 Controller 方法前驗證。這表示，我們就不需要在 Controller 中放一些凌亂的驗證邏輯："

#: docs/10.x/validation.md:block 89 (code)
msgid "/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(StorePostRequest $request): Response\n"
"{\n"
"    // The incoming request is valid...\n\n"
"    // Retrieve the validated input data...\n"
"    $validated = $request->validated();\n\n"
"    // Retrieve a portion of the validated input data...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n\n"
"    // Store the blog post...\n\n"
"    return response()->noContent();\n"
"}\n"
msgstr "/**\n"
" * Store a new blog post.\n"
" */\n"
"public function store(StorePostRequest $request): Response\n"
"{\n"
"    // 連入 Request 有效...\n\n"
"    // 取得已驗證的輸入資料...\n"
"    $validated = $request->validated();\n\n"
"    // 取得已驗證輸入資料中的一部分...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n\n"
"    // 保存部落格貼文...\n\n"
"    return response()->noContent();\n"
"}\n"

#: docs/10.x/validation.md:block 90 (paragraph)
msgid "If validation fails, a redirect response will be generated to send the user back to their previous location. The errors will also be flashed to the session so they are available for display. If the request was an XHR request, an HTTP response with a 422 status code will be returned to the user including a [JSON representation of the validation errors](#validation-error-response-format)."
msgstr "若驗證失敗，會產生一個 Redirect Response，並將使用者傳送回前一個位置。錯誤訊息也會被快閃存入 Session 中以便顯示。若目前的 Request 是 XHR Request，則會回傳一個 422 狀態碼的 HTTP Response 給使用者，其中包含了[以 JSON 呈現的驗證錯誤訊息](#validation-error-response-format)："

#: docs/10.x/validation.md:block 92 (header)
msgid "Adding After Hooks To Form Requests"
msgstr "新增 After Hook 到 Form Request"

#: docs/10.x/validation.md:block 93 (paragraph)
msgid "If you would like to add an \"after\" validation hook to a form request, you may use the `withValidator` method. This method receives the fully constructed validator, allowing you to call any of its methods before the validation rules are actually evaluated:"
msgstr "若想將「After」驗證 Hook 加到 Form Request 上，則需要使用 `withValidator` 方法。該方法接收完整建構好的 Validator，能讓你在實際執行驗證規則前呼叫 Validator 上的任何方法："

#: docs/10.x/validation.md:block 94 (code)
msgid "use Illuminate\\Validation\\Validator;\n\n"
"/**\n"
" * Configure the validator instance.\n"
" */\n"
"public function withValidator(Validator $validator): void\n"
"{\n"
"    $validator->after(function (Validator $validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"        }\n"
"    });\n"
"}\n"
msgstr "use Illuminate\\Validation\\Validator;\n\n"
"/**\n"
" * Configure the validator instance.\n"
" */\n"
"public function withValidator(Validator $validator): void\n"
"{\n"
"    $validator->after(function (Validator $validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"        }\n"
"    });\n"
"}\n"

#: docs/10.x/validation.md:block 96 (header)
msgid "Stopping On First Validation Failure Attribute"
msgstr "在第一個屬性驗證失敗後就停止"

#: docs/10.x/validation.md:block 97 (paragraph)
msgid "By adding a `stopOnFirstFailure` property to your request class, you may inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr "在 Request 類別上新增 `stopOnFirstFailure` 屬性後，就可以讓 Validator 在發生一個驗證失敗後就停止驗證所有的屬性："

#: docs/10.x/validation.md:block 98 (code)
msgid "/**\n"
" * Indicates if the validator should stop on the first rule failure.\n"
" *\n"
" * @var bool\n"
" */\n"
"protected $stopOnFirstFailure = true;\n"
msgstr "/**\n"
" * Indicates if the validator should stop on the first rule failure.\n"
" *\n"
" * @var bool\n"
" */\n"
"protected $stopOnFirstFailure = true;\n"

#: docs/10.x/validation.md:block 100 (header)
msgid "Customizing The Redirect Location"
msgstr "自訂重新導向位置"

#: docs/10.x/validation.md:block 101 (paragraph)
msgid "As previously discussed, a redirect response will be generated to send the user back to their previous location when form request validation fails. However, you are free to customize this behavior. To do so, define a `$redirect` property on your form request:"
msgstr "前面也提到過，Form Request 驗證失敗時會產生一個 Redirect Response 來將使用者傳送到前一個位置。不過，我們可以自訂這個行為。為此，請在 Form Request 中定義一個 `$redirect` 屬性："

#: docs/10.x/validation.md:block 102 (code)
msgid "/**\n"
" * The URI that users should be redirected to if validation fails.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $redirect = '/dashboard';\n"
msgstr "/**\n"
" * The URI that users should be redirected to if validation fails.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $redirect = '/dashboard';\n"

#: docs/10.x/validation.md:block 103 (paragraph)
msgid "Or, if you would like to redirect users to a named route, you may define a `$redirectRoute` property instead:"
msgstr "或者，若想將使用者重新導向到命名 Route，請改定義 `$redirectRoute` 屬性："

#: docs/10.x/validation.md:block 104 (code)
msgid "/**\n"
" * The route that users should be redirected to if validation fails.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $redirectRoute = 'dashboard';\n"
msgstr "/**\n"
" * The route that users should be redirected to if validation fails.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $redirectRoute = 'dashboard';\n"

#: docs/10.x/validation.md:block 106 (header)
msgid "Authorizing Form Requests"
msgstr "授權 Form Request"

#: docs/10.x/validation.md:block 107 (paragraph)
msgid "The form request class also contains an `authorize` method. Within this method, you may determine if the authenticated user actually has the authority to update a given resource. For example, you may determine if a user actually owns a blog comment they are attempting to update. Most likely, you will interact with your [authorization gates and policies](/docs/{{version}}/authorization) within this method:"
msgstr "Form Request 類別中也包含了一個 `authorize` 方法。在這個方法中，我們可以判斷已登入使用者是否有授權能更新給定資源。舉例來說，我們可以判斷使用者是否真的擁有正在編輯的部落格留言。大多數情況下，在這個方法中我們應該都是使用[授權的 Gate 與 Policy](/docs/{{version}}/authorization)："

#: docs/10.x/validation.md:block 108 (code)
msgid "use App\\Models\\Comment;\n\n"
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" */\n"
"public function authorize(): bool\n"
"{\n"
"    $comment = Comment::find($this->route('comment'));\n\n"
"    return $comment && $this->user()->can('update', $comment);\n"
"}\n"
msgstr "use App\\Models\\Comment;\n\n"
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" */\n"
"public function authorize(): bool\n"
"{\n"
"    $comment = Comment::find($this->route('comment'));\n\n"
"    return $comment && $this->user()->can('update', $comment);\n"
"}\n"

#: docs/10.x/validation.md:block 109 (paragraph)
msgid "Since all form requests extend the base Laravel request class, we may use the `user` method to access the currently authenticated user. Also, note the call to the `route` method in the example above. This method grants you access to the URI parameters defined on the route being called, such as the `{comment}` parameter in the example below:"
msgstr "由於所有 Form Request 都繼承自 Laravel 的基礎 Request 類別，因此我們可以使用 `user` 方法來存取目前已登入的使用者。此外，也請注意上方範例中呼叫的 `route` 方法。這個方法能讓我們存取目前呼叫的 Route 上的 URI 參數，如上述例子中為 `{comment}` 參數："

#: docs/10.x/validation.md:block 110 (code)
msgid "Route::post('/comment/{comment}');\n"
msgstr "Route::post('/comment/{comment}');\n"

#: docs/10.x/validation.md:block 111 (paragraph)
msgid "Therefore, if your application is taking advantage of [route model binding](/docs/{{version}}/routing#route-model-binding), your code may be made even more succinct by accessing the resolved model as a property of the request:"
msgstr "因此，若我們的專案有使用 [Route Model 繫結](/docs/{{version}}/routing#route-model-binding)，則這裡的程式碼還能存取 Request 上已解析的 Model 屬性來進一步簡化："

#: docs/10.x/validation.md:block 112 (code)
msgid "return $this->user()->can('update', $this->comment);\n"
msgstr "return $this->user()->can('update', $this->comment);\n"

#: docs/10.x/validation.md:block 113 (paragraph)
msgid "If the `authorize` method returns `false`, an HTTP response with a 403 status code will automatically be returned and your controller method will not execute."
msgstr "若 `authorize` 方法回傳 `false`，則會自動回傳一個 403 狀態碼的 HTTP Respnose，而 Controller 則不會被執行。"

#: docs/10.x/validation.md:block 114 (paragraph)
msgid "If you plan to handle authorization logic for the request in another part of your application, you may simply return `true` from the `authorize` method:"
msgstr "若想在程式中的其他部分處理授權邏輯，只要在 `authorize` 方法中回傳 `true` 即可："

#: docs/10.x/validation.md:block 115 (code)
msgid "/**\n"
" * Determine if the user is authorized to make this request.\n"
" */\n"
"public function authorize(): bool\n"
"{\n"
"    return true;\n"
"}\n"
msgstr "/**\n"
" * Determine if the user is authorized to make this request.\n"
" */\n"
"public function authorize(): bool\n"
"{\n"
"    return true;\n"
"}\n"

#: docs/10.x/validation.md:block 116 (quote)
msgid "**Note** You may type-hint any dependencies you need within the `authorize` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr "**Note** 在 `authorize` 方法的^[簽章](Signature) 中可以對任何需要的相依性進行^[型別提示](Type-Hint)。型別提示中的相依性會由 Laravel 的 [Service Container](/docs/{{version}}/container) 自動解析。"

#: docs/10.x/validation.md:block 119 (paragraph)
msgid "You may customize the error messages used by the form request by overriding the `messages` method. This method should return an array of attribute / rule pairs and their corresponding error messages:"
msgstr "可以複寫 `messages` 方法來自訂 Form Request 使用的錯誤訊息。這個方法應回傳一組包含屬性/ 規則配對的陣列與其對應的錯誤訊息："

#: docs/10.x/validation.md:block 120 (code)
msgid "/**\n"
" * Get the error messages for the defined validation rules.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function messages(): array\n"
"{\n"
"    return [\n"
"        'title.required' => 'A title is required',\n"
"        'body.required' => 'A message is required',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get the error messages for the defined validation rules.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function messages(): array\n"
"{\n"
"    return [\n"
"        'title.required' => 'A title is required',\n"
"        'body.required' => 'A message is required',\n"
"    ];\n"
"}\n"

#: docs/10.x/validation.md:block 122 (header)
msgid "Customizing The Validation Attributes"
msgstr "自訂驗證屬性"

#: docs/10.x/validation.md:block 123 (paragraph)
msgid "Many of Laravel's built-in validation rule error messages contain an `:attribute` placeholder. If you would like the `:attribute` placeholder of your validation message to be replaced with a custom attribute name, you may specify the custom names by overriding the `attributes` method. This method should return an array of attribute / name pairs:"
msgstr "Laravel 中許多的內建驗證規則錯誤訊息都包含了一個 `:attribute` 預留位置 (Placeholder)。若想將驗證訊息中 `:attribute` 預留位置該為自訂屬性名稱，可以複寫 `attributes` 方法來指定自訂的名稱。這個方法應回傳一組包含屬性 / 名稱配對的陣列："

#: docs/10.x/validation.md:block 124 (code)
msgid "/**\n"
" * Get custom attributes for validator errors.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function attributes(): array\n"
"{\n"
"    return [\n"
"        'email' => 'email address',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get custom attributes for validator errors.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function attributes(): array\n"
"{\n"
"    return [\n"
"        'email' => 'email address',\n"
"    ];\n"
"}\n"

#: docs/10.x/validation.md:block 126 (header)
msgid "Preparing Input For Validation"
msgstr "為驗證準備輸入"

#: docs/10.x/validation.md:block 127 (paragraph)
msgid "If you need to prepare or sanitize any data from the request before you apply your validation rules, you may use the `prepareForValidation` method:"
msgstr "若有需要在套用驗證規則前準備或消毒 (Sanitize) 任何 Request 中的資料，可使用 `prepareForValidation` 方法："

#: docs/10.x/validation.md:block 128 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Prepare the data for validation.\n"
" */\n"
"protected function prepareForValidation(): void\n"
"{\n"
"    $this->merge([\n"
"        'slug' => Str::slug($this->slug),\n"
"    ]);\n"
"}\n"
msgstr "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Prepare the data for validation.\n"
" */\n"
"protected function prepareForValidation(): void\n"
"{\n"
"    $this->merge([\n"
"        'slug' => Str::slug($this->slug),\n"
"    ]);\n"
"}\n"

#: docs/10.x/validation.md:block 129 (paragraph)
msgid "Likewise, if you need to normalize any request data after validation is complete, you may use the `passedValidation` method:"
msgstr "類似地，若有需要在驗證完成後正常化任何 Request 資料，可使用 `passedValidation` 方法："

#: docs/10.x/validation.md:block 130 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle a passed validation attempt.\n"
" */\n"
"protected function passedValidation(): void\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"
msgstr "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle a passed validation attempt.\n"
" */\n"
"protected function passedValidation(): void\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"

#: docs/10.x/validation.md:block 132 (header)
msgid "Manually Creating Validators"
msgstr "手動建立 Validator"

#: docs/10.x/validation.md:block 133 (paragraph)
msgid "If you do not want to use the `validate` method on the request, you may create a validator instance manually using the `Validator` [facade](/docs/{{version}}/facades). The `make` method on the facade generates a new validator instance:"
msgstr "若不想使用 Request 上的 `validate` 方法，也可以使用 `Validator` [Facade](/docs/{{version}}/facades) 來手動建立 Validator 實體。Facade 方法上的 `make` 方法會產生新的 Validator 實體："

#: docs/10.x/validation.md:block 134 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Illuminate\\Support\\Facades\\Validator;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): Response\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n\n"
"        // Retrieve the validated input...\n"
"        $validated = $validator->validated();\n\n"
"        // Retrieve a portion of the validated input...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n\n"
"        // Store the blog post...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"use Illuminate\\Support\\Facades\\Validator;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     */\n"
"    public function store(Request $request): Response\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n\n"
"        // 取得已驗證的輸入...\n"
"        $validated = $validator->validated();\n\n"
"        // 取得已驗證輸入的一部分...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n\n"
"        // 保存部落格貼文...\n\n"
"        return response()->noContent();\n"
"    }\n"
"}\n"

#: docs/10.x/validation.md:block 135 (paragraph)
msgid "The first argument passed to the `make` method is the data under validation. The second argument is an array of the validation rules that should be applied to the data."
msgstr "傳入 `make` 方法的第一個屬性是要驗證的資料。第二個引述則是一組要套用到給定資料上的驗證規則陣列。"

#: docs/10.x/validation.md:block 136 (paragraph)
msgid "After determining whether the request validation failed, you may use the `withErrors` method to flash the error messages to the session. When using this method, the `$errors` variable will automatically be shared with your views after redirection, allowing you to easily display them back to the user. The `withErrors` method accepts a validator, a `MessageBag`, or a PHP `array`."
msgstr "在判斷 Request 是否驗證失敗後，可以使用 `withErrors` 方法來將錯誤訊息快閃存入 Session 中。使用這個方法時，重新導向後會自動共享 `$errors` 變數，讓我們能輕鬆將其顯示給使用者。`withErrors` 方法接受一個 Validator、`MessageBag`、或 PHP `array`。"

#: docs/10.x/validation.md:block 138 (paragraph)
msgid "The `stopOnFirstFailure` method will inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr "`stopOnFirstFailure` 方法可以讓 Validator 在發生一個驗證失敗後就停止驗證所有的屬性："

#: docs/10.x/validation.md:block 139 (code)
msgid "if ($validator->stopOnFirstFailure()->fails()) {\n"
"    // ...\n"
"}\n"
msgstr "if ($validator->stopOnFirstFailure()->fails()) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/validation.md:block 141 (header)
msgid "Automatic Redirection"
msgstr "自動重新導向"

#: docs/10.x/validation.md:block 142 (paragraph)
msgid "If you would like to create a validator instance manually but still take advantage of the automatic redirection offered by the HTTP request's `validate` method, you may call the `validate` method on an existing validator instance. If validation fails, the user will automatically be redirected or, in the case of an XHR request, a [JSON response will be returned](#validation-error-response-format):"
msgstr "若想手動建立 Validator 實體，但也想要使用 HTTP Request 的 `validate` 方法提供的自動重新導向功能，可以在現有 Validator 實體上呼叫 `validate` 方法。若驗證失敗，使用者會被重新導向。XHR Request 的情況下，則會[回傳 JSON Response](#validation-error-response-format)："

#: docs/10.x/validation.md:block 143 (code)
msgid "Validator::make($request->all(), [\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"])->validate();\n"
msgstr "Validator::make($request->all(), [\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"])->validate();\n"

#: docs/10.x/validation.md:block 144 (paragraph)
msgid "You may use the `validateWithBag` method to store the error messages in a [named error bag](#named-error-bags) if validation fails:"
msgstr "可以使用 `validateWithBag` 方法來在驗證失敗時將錯誤訊息保存在[命名的 Error Bag](#named-error-bags) 中："

#: docs/10.x/validation.md:block 145 (code)
msgid "Validator::make($request->all(), [\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"])->validateWithBag('post');\n"
msgstr "Validator::make($request->all(), [\n"
"    'title' => 'required|unique:posts|max:255',\n"
"    'body' => 'required',\n"
"])->validateWithBag('post');\n"

#: docs/10.x/validation.md:block 147 (header)
msgid "Named Error Bags"
msgstr "命名的 Error Bag"

#: docs/10.x/validation.md:block 148 (paragraph)
msgid "If you have multiple forms on a single page, you may wish to name the `MessageBag` containing the validation errors, allowing you to retrieve the error messages for a specific form. To achieve this, pass a name as the second argument to `withErrors`:"
msgstr "若單一頁面中有多個表單，則我們可能會想為保存錯誤訊息的 `MessageBag` 命名。這樣一來，我們就可以為特定的表單取得錯誤訊息。為此，請傳入名稱作為第二個引數給 `withErrors`："

#: docs/10.x/validation.md:block 149 (code)
msgid "return redirect('register')->withErrors($validator, 'login');\n"
msgstr "return redirect('register')->withErrors($validator, 'login');\n"

#: docs/10.x/validation.md:block 150 (paragraph)
msgid "You may then access the named `MessageBag` instance from the `$errors` variable:"
msgstr "接著我們就可以在 `$errors` 變數中存取命名的 `MessageBag` 實體："

#: docs/10.x/validation.md:block 151 (code)
msgid "{{ $errors->login->first('email') }}\n"
msgstr "{{ $errors->login->first('email') }}\n"

#: docs/10.x/validation.md:block 154 (paragraph)
msgid "If needed, you may provide custom error messages that a validator instance should use instead of the default error messages provided by Laravel. There are several ways to specify custom messages. First, you may pass the custom messages as the third argument to the `Validator::make` method:"
msgstr "當然，除了 Laravel 提供的預設錯誤訊息外，我們還可以提供自訂的錯誤訊息給 Validator 實體使用。有許多方法可以指定自訂訊息。第一個方法是，將自訂訊息作為第三個引數傳給 `Validator::make` 方法："

#: docs/10.x/validation.md:block 155 (code)
msgid "$validator = Validator::make($input, $rules, $messages = [\n"
"    'required' => 'The :attribute field is required.',\n"
"]);\n"
msgstr "$validator = Validator::make($input, $rules, $messages = [\n"
"    'required' => 'The :attribute field is required.',\n"
"]);\n"

#: docs/10.x/validation.md:block 156 (paragraph)
msgid "In this example, the `:attribute` placeholder will be replaced by the actual name of the field under validation. You may also utilize other placeholders in validation messages. For example:"
msgstr "在這個例子中，`:attribute` 預留位置 (Placeholder) 會被替換成驗證中的實際欄位名稱。我們也可以在驗證訊息中使用其他的預留位置，如："

#: docs/10.x/validation.md:block 157 (code)
msgid "$messages = [\n"
"    'same' => 'The :attribute and :other must match.',\n"
"    'size' => 'The :attribute must be exactly :size.',\n"
"    'between' => 'The :attribute value :input is not between :min - :max.',\n"
"    'in' => 'The :attribute must be one of the following types: :values',\n"
"];\n"
msgstr "$messages = [\n"
"    'same' => 'The :attribute and :other must match.',\n"
"    'size' => 'The :attribute must be exactly :size.',\n"
"    'between' => 'The :attribute value :input is not between :min - :max.',\n"
"    'in' => 'The :attribute must be one of the following types: :values',\n"
"];\n"

#: docs/10.x/validation.md:block 159 (header)
msgid "Specifying A Custom Message For A Given Attribute"
msgstr "為給定屬性指定自訂訊息"

#: docs/10.x/validation.md:block 160 (paragraph)
msgid "Sometimes you may wish to specify a custom error message only for a specific attribute. You may do so using \"dot\" notation. Specify the attribute's name first, followed by the rule:"
msgstr "有時候我們可能會想指為特定的屬性指定錯誤訊息。為此，我們可以使用「點 (.)」標記法。先指定屬性的名稱，然後再加上規則名稱："

#: docs/10.x/validation.md:block 161 (code)
msgid "$messages = [\n"
"    'email.required' => 'We need to know your email address!',\n"
"];\n"
msgstr "$messages = [\n"
"    'email.required' => 'We need to know your email address!',\n"
"];\n"

#: docs/10.x/validation.md:block 163 (header)
msgid "Specifying Custom Attribute Values"
msgstr "指定自訂屬性值"

#: docs/10.x/validation.md:block 164 (paragraph)
msgid "Many of Laravel's built-in error messages include an `:attribute` placeholder that is replaced with the name of the field or attribute under validation. To customize the values used to replace these placeholders for specific fields, you may pass an array of custom attributes as the fourth argument to the `Validator::make` method:"
msgstr "Laravel 中許多內建的錯誤訊息都包含了一個 `:attribute` 預留位置，會被取代成正在驗證的欄位名稱或屬性名稱。若想在指定的欄位上自使用自訂值來取代這些預留位置，可將一組自訂屬性的陣列作為第四個引數傳給 `Validator::make` 方法："

#: docs/10.x/validation.md:block 165 (code)
msgid "$validator = Validator::make($input, $rules, $messages, [\n"
"    'email' => 'email address',\n"
"]);\n"
msgstr "$validator = Validator::make($input, $rules, $messages, [\n"
"    'email' => 'email address',\n"
"]);\n"

#: docs/10.x/validation.md:block 167 (header)
msgid "After Validation Hook"
msgstr "驗證的「After」Hook"

#: docs/10.x/validation.md:block 168 (paragraph)
msgid "You may also attach callbacks to be run after validation is completed. This allows you to easily perform further validation and even add more error messages to the message collection. To get started, call the `after` method on a validator instance:"
msgstr "我們可以附加一個要在驗證完成後才執行的回呼。這樣一來，我們就可以輕鬆地做進一步的驗證、甚至是將更多的錯誤訊息加到 Message Collection 上。要開始加上 After Hook，請在 Validator 實體上呼叫 `after` 方法："

#: docs/10.x/validation.md:block 169 (code)
msgid "use Illuminate\\Support\\Facades;\n"
"use Illuminate\\Validation\\Validator;\n\n"
"$validator = Facades\\Validator::make(/* ... */);\n\n"
"$validator->after(function (Validator $validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n\n"
"if ($validator->fails()) {\n"
"    // ...\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades;\n"
"use Illuminate\\Validation\\Validator;\n\n"
"$validator = Facades\\Validator::make(/* ... */);\n\n"
"$validator->after(function (Validator $validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n\n"
"if ($validator->fails()) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/validation.md:block 171 (header)
msgid "Working With Validated Input"
msgstr "處理已驗證的輸入"

#: docs/10.x/validation.md:block 172 (paragraph)
msgid "After validating incoming request data using a form request or a manually created validator instance, you may wish to retrieve the incoming request data that actually underwent validation. This can be accomplished in several ways. First, you may call the `validated` method on a form request or validator instance. This method returns an array of the data that was validated:"
msgstr "使用 Form Request 或手動建立的 Validator 實體驗證好連入的 Request 資料後，我們可能會想取得連入 Request 中實際被驗證過的資料。有許多種方法可以取得這些資料。第一種方法是在 Form Request 或 Validator 實體上呼叫 `validated` 方法。這個方法會回傳一組驗證過的資料陣列："

#: docs/10.x/validation.md:block 173 (code)
msgid "$validated = $request->validated();\n\n"
"$validated = $validator->validated();\n"
msgstr "$validated = $request->validated();\n\n"
"$validated = $validator->validated();\n"

#: docs/10.x/validation.md:block 174 (paragraph)
msgid "Alternatively, you may call the `safe` method on a form request or validator instance. This method returns an instance of `Illuminate\\Support\\ValidatedInput`. This object exposes `only`, `except`, and `all` methods to retrieve a subset of the validated data or the entire array of validated data:"
msgstr "或者，也可以在 Form Request 或 Validator 實體上呼叫 `safe` 方法。這個方法會回傳一個 `Illuminate\\Support\\ValidatedInput` 實體。該物件提供了 `only`、`except`、`all` 等方法，可用來取得一部分已驗證的資料或是整個已驗證資料的陣列："

#: docs/10.x/validation.md:block 175 (code)
msgid "$validated = $request->safe()->only(['name', 'email']);\n\n"
"$validated = $request->safe()->except(['name', 'email']);\n\n"
"$validated = $request->safe()->all();\n"
msgstr "$validated = $request->safe()->only(['name', 'email']);\n\n"
"$validated = $request->safe()->except(['name', 'email']);\n\n"
"$validated = $request->safe()->all();\n"

#: docs/10.x/validation.md:block 176 (paragraph)
msgid "In addition, the `Illuminate\\Support\\ValidatedInput` instance may be iterated over and accessed like an array:"
msgstr "此外，也可迭代 `Illuminate\\Support\\ValidatedInput` 或像陣列一樣存取："

#: docs/10.x/validation.md:block 177 (code)
msgid "// Validated data may be iterated...\n"
"foreach ($request->safe() as $key => $value) {\n"
"    // ...\n"
"}\n\n"
"// Validated data may be accessed as an array...\n"
"$validated = $request->safe();\n\n"
"$email = $validated['email'];\n"
msgstr "// 可迭代已驗證資料...\n"
"foreach ($request->safe() as $key => $value) {\n"
"    // ...\n"
"}\n\n"
"// 可將已驗證資料作為陣列存取...\n"
"$validated = $request->safe();\n\n"
"$email = $validated['email'];\n"

#: docs/10.x/validation.md:block 178 (paragraph)
msgid "If you would like to add additional fields to the validated data, you may call the `merge` method:"
msgstr "若想在已驗證資料上加上額外的欄位，可呼叫 `merge` 方法："

#: docs/10.x/validation.md:block 179 (code)
msgid "$validated = $request->safe()->merge(['name' => 'Taylor Otwell']);\n"
msgstr "$validated = $request->safe()->merge(['name' => 'Taylor Otwell']);\n"

#: docs/10.x/validation.md:block 180 (paragraph)
msgid "If you would like to retrieve the validated data as a [collection](/docs/{{version}}/collections) instance, you may call the `collect` method:"
msgstr "若想將已驗證資料作為 [Collection](/docs/{{version}}/collections) 實體取得，可呼叫 `collect` 方法："

#: docs/10.x/validation.md:block 181 (code)
msgid "$collection = $request->safe()->collect();\n"
msgstr "$collection = $request->safe()->collect();\n"

#: docs/10.x/validation.md:block 183 (header)
msgid "Working With Error Messages"
msgstr "處理錯誤訊息"

#: docs/10.x/validation.md:block 184 (paragraph)
msgid "After calling the `errors` method on a `Validator` instance, you will receive an `Illuminate\\Support\\MessageBag` instance, which has a variety of convenient methods for working with error messages. The `$errors` variable that is automatically made available to all views is also an instance of the `MessageBag` class."
msgstr "在 `Validator` 實體上呼叫 `errors` 方法後，會收到 `Illuminate\\Support\\MessageBag` 實體。該實體提供了多種方便的方法能讓我們處理錯誤訊息。自動提供給所有 View 的 `$errors` 變數也是一個 `MessageBag` 類別的實體。"

#: docs/10.x/validation.md:block 186 (header)
msgid "Retrieving The First Error Message For A Field"
msgstr "取得某個欄位的第一筆錯誤訊息"

#: docs/10.x/validation.md:block 187 (paragraph)
msgid "To retrieve the first error message for a given field, use the `first` method:"
msgstr "若要取得給定欄位的第一筆錯誤訊息，請使用 `first` 方法："

#: docs/10.x/validation.md:block 188 (code)
msgid "$errors = $validator->errors();\n\n"
"echo $errors->first('email');\n"
msgstr "$errors = $validator->errors();\n\n"
"echo $errors->first('email');\n"

#: docs/10.x/validation.md:block 190 (header)
msgid "Retrieving All Error Messages For A Field"
msgstr "取得某個欄位的所有錯誤訊息"

#: docs/10.x/validation.md:block 191 (paragraph)
msgid "If you need to retrieve an array of all the messages for a given field, use the `get` method:"
msgstr "若需要取得給定欄位的所有訊息陣列，請使用 `get` 方法："

#: docs/10.x/validation.md:block 192 (code)
msgid "foreach ($errors->get('email') as $message) {\n"
"    // ...\n"
"}\n"
msgstr "foreach ($errors->get('email') as $message) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/validation.md:block 193 (paragraph)
msgid "If you are validating an array form field, you may retrieve all of the messages for each of the array elements using the `*` character:"
msgstr "在驗證某個陣列格式的表單欄位時，可使用 `*` 字元來取得各個陣列元素的所有錯誤訊息："

#: docs/10.x/validation.md:block 194 (code)
msgid "foreach ($errors->get('attachments.*') as $message) {\n"
"    // ...\n"
"}\n"
msgstr "foreach ($errors->get('attachments.*') as $message) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/validation.md:block 196 (header)
msgid "Retrieving All Error Messages For All Fields"
msgstr "取得全部欄位的所有訊息"

#: docs/10.x/validation.md:block 197 (paragraph)
msgid "To retrieve an array of all messages for all fields, use the `all` method:"
msgstr "若要取得所有欄位的所有訊息陣列，請使用 `all` 方法："

#: docs/10.x/validation.md:block 198 (code)
msgid "foreach ($errors->all() as $message) {\n"
"    // ...\n"
"}\n"
msgstr "foreach ($errors->all() as $message) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/validation.md:block 200 (header)
msgid "Determining If Messages Exist For A Field"
msgstr "判斷某個欄位是否有錯誤訊息"

#: docs/10.x/validation.md:block 201 (paragraph)
msgid "The `has` method may be used to determine if any error messages exist for a given field:"
msgstr "`has` 方法可用來判斷給定的欄位是否有錯誤訊息："

#: docs/10.x/validation.md:block 202 (code)
msgid "if ($errors->has('email')) {\n"
"    // ...\n"
"}\n"
msgstr "if ($errors->has('email')) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/validation.md:block 204 (header)
msgid "Specifying Custom Messages In Language Files"
msgstr "在語系檔中指定自訂訊息"

#: docs/10.x/validation.md:block 209 (header)
msgid "Custom Messages For Specific Attributes"
msgstr "為特定屬性指定自訂訊息"

#: docs/10.x/validation.md:block 210 (paragraph)
msgid "You may customize the error messages used for specified attribute and rule combinations within your application's validation language files. To do so, add your message customizations to the `custom` array of your application's `lang/xx/validation.php` language file:"
msgstr "我們可能會想在程式的驗證語系檔中為特定的屬性與規則組合自訂錯誤訊息。為此，請在專案的 `lang/xx/validation.php` 語系檔中 `custom` 陣列內新增你的自訂訊息："

#: docs/10.x/validation.md:block 211 (code)
msgid "'custom' => [\n"
"    'email' => [\n"
"        'required' => 'We need to know your email address!',\n"
"        'max' => 'Your email address is too long!'\n"
"    ],\n"
"],\n"
msgstr "'custom' => [\n"
"    'email' => [\n"
"        'required' => 'We need to know your email address!',\n"
"        'max' => 'Your email address is too long!'\n"
"    ],\n"
"],\n"

#: docs/10.x/validation.md:block 213 (header)
msgid "Specifying Attributes In Language Files"
msgstr "在語系檔中指定屬性"

#: docs/10.x/validation.md:block 214 (paragraph)
msgid "Many of Laravel's built-in error messages include an `:attribute` placeholder that is replaced with the name of the field or attribute under validation. If you would like the `:attribute` portion of your validation message to be replaced with a custom value, you may specify the custom attribute name in the `attributes` array of your `lang/xx/validation.php` language file:"
msgstr "Laravel 中內建的許多錯誤訊息都包含了一個 `:attribute` 預留位置 (Placeholder)，該預留位置會被取代為被驗證的欄位名稱或屬性名稱。若想讓驗證訊息的 `:attribute` 部分被取代為自訂的值，可在 `lang/xx/validation.php` 語系檔中 `attributes` 陣列內指定自訂的屬性名稱："

#: docs/10.x/validation.md:block 215 (code)
msgid "'attributes' => [\n"
"    'email' => 'email address',\n"
"],\n"
msgstr "'attributes' => [\n"
"    'email' => 'email address',\n"
"],\n"

#: docs/10.x/validation.md:block 218 (header)
msgid "Specifying Values In Language Files"
msgstr "在語系檔中指定值"

#: docs/10.x/validation.md:block 219 (paragraph)
msgid "Some of Laravel's built-in validation rule error messages contain a `:value` placeholder that is replaced with the current value of the request attribute. However, you may occasionally need the `:value` portion of your validation message to be replaced with a custom representation of the value. For example, consider the following rule that specifies that a credit card number is required if the `payment_type` has a value of `cc`:"
msgstr "Laravel 中有些內建的驗證規則錯誤訊息中包含了一個 `:value` 預留位置 (Placeholder)，這個預留位置會被取代為目前 Request 中的屬性值。不過，有時候我們會像讓驗證訊息中的 `:value` 部分被取代為用於該值的自訂呈現方式。舉例來說，假設我們套用了下列規則來讓 `payment_type` 值為 `cc` 時，信用卡卡號為必填："

#: docs/10.x/validation.md:block 220 (code)
msgid "Validator::make($request->all(), [\n"
"    'credit_card_number' => 'required_if:payment_type,cc'\n"
"]);\n"
msgstr "Validator::make($request->all(), [\n"
"    'credit_card_number' => 'required_if:payment_type,cc'\n"
"]);\n"

#: docs/10.x/validation.md:block 221 (paragraph)
msgid "If this validation rule fails, it will produce the following error message:"
msgstr "若驗證規則執行失敗，會產生下列錯誤訊息："

#: docs/10.x/validation.md:block 222 (code)
msgid "The credit card number field is required when payment type is cc.\n"
msgstr "The credit card number field is required when payment type is cc.\n"

#: docs/10.x/validation.md:block 223 (paragraph)
msgid "Instead of displaying `cc` as the payment type value, you may specify a more user-friendly value representation in your `lang/xx/validation.php` language file by defining a `values` array:"
msgstr "我們可以在 `lang/xx/validation.php` 語系檔中定義一個 `values` 陣列來為付款方式的值指定一個對使用者更友好的呈現，而不是顯示 `cc`："

#: docs/10.x/validation.md:block 224 (code)
msgid "'values' => [\n"
"    'payment_type' => [\n"
"        'cc' => 'credit card'\n"
"    ],\n"
"],\n"
msgstr "'values' => [\n"
"    'payment_type' => [\n"
"        'cc' => 'credit card'\n"
"    ],\n"
"],\n"

#: docs/10.x/validation.md:block 226 (paragraph)
msgid "After defining this value, the validation rule will produce the following error message:"
msgstr "定義好這個值之後，剛才的驗證規則會產生下列錯誤訊息："

#: docs/10.x/validation.md:block 227 (code)
msgid "The credit card number field is required when payment type is credit card.\n"
msgstr "The credit card number field is required when payment type is credit card.\n"

#: docs/10.x/validation.md:block 229 (header)
msgid "Available Validation Rules"
msgstr "可用的驗證規則"

#: docs/10.x/validation.md:block 230 (paragraph)
msgid "Below is a list of all available validation rules and their function:"
msgstr "下面列出了所有可用的驗證規則與其函式："

#: docs/10.x/validation.md:block 233 (paragraph)
msgid "[Accepted](#rule-accepted) [Accepted If](#rule-accepted-if) [Active URL](#rule-active-url) [After (Date)](#rule-after) [After Or Equal (Date)](#rule-after-or-equal) [Alpha](#rule-alpha) [Alpha Dash](#rule-alpha-dash) [Alpha Numeric](#rule-alpha-num) [Array](#rule-array) [Ascii](#rule-ascii) [Bail](#rule-bail) [Before (Date)](#rule-before) [Before Or Equal (Date)](#rule-before-or-equal) [Between](#rule-between) [Boolean](#rule-boolean) [Confirmed](#rule-confirmed) [Current Password](#rule-current-password) [Date](#rule-date) [Date Equals](#rule-date-equals) [Date Format](#rule-date-format) [Decimal](#rule-decimal) [Declined](#rule-declined) [Declined If](#rule-declined-if) [Different](#rule-different) [Digits](#rule-digits) [Digits Between](#rule-digits-between) [Dimensions (Image Files)](#rule-dimensions) [Distinct](#rule-distinct) [Doesnt Start With](#rule-doesnt-start-with) [Doesnt End With](#rule-doesnt-end-with) [Email](#rule-email) [Ends With](#rule-ends-with) [Enum](#rule-enum) [Exclude](#rule-exclude) [Exclude If](#rule-exclude-if) [Exclude Unless](#rule-exclude-unless) [Exclude With](#rule-exclude-with) [Exclude Without](#rule-exclude-without) [Exists (Database)](#rule-exists) [File](#rule-file) [Filled](#rule-filled) [Greater Than](#rule-gt) [Greater Than Or Equal](#rule-gte) [Image (File)](#rule-image) [In](#rule-in) [In Array](#rule-in-array) [Integer](#rule-integer) [IP Address](#rule-ip) [JSON](#rule-json) [Less Than](#rule-lt) [Less Than Or Equal](#rule-lte) [Lowercase](#rule-lowercase) [MAC Address](#rule-mac) [Max](#rule-max) [Max Digits](#rule-max-digits) [MIME Types](#rule-mimetypes) [MIME Type By File Extension](#rule-mimes) [Min](#rule-min) [Min Digits](#rule-min-digits) [Missing](#rule-missing) [Missing If](#rule-missing-if) [Missing Unless](#rule-missing-unless) [Missing With](#rule-missing-with) [Missing With All](#rule-missing-with-all) [Multiple Of](#rule-multiple-of) [Not In](#rule-not-in) [Not Regex](#rule-not-regex) [Nullable](#rule-nullable) [Numeric](#rule-numeric) [Password](#rule-password) [Present](#rule-present) [Prohibited](#rule-prohibited) [Prohibited If](#rule-prohibited-if) [Prohibited Unless](#rule-prohibited-unless) [Prohibits](#rule-prohibits) [Regular Expression](#rule-regex) [Required](#rule-required) [Required If](#rule-required-if) [Required Unless](#rule-required-unless) [Required With](#rule-required-with) [Required With All](#rule-required-with-all) [Required Without](#rule-required-without) [Required Without All](#rule-required-without-all) [Required Array Keys](#rule-required-array-keys) [Same](#rule-same) [Size](#rule-size) [Sometimes](#validating-when-present) [Starts With](#rule-starts-with) [String](#rule-string) [Timezone](#rule-timezone) [Unique (Database)](#rule-unique) [Uppercase](#rule-uppercase) [URL](#rule-url) [ULID](#rule-ulid) [UUID](#rule-uuid)"
msgstr ""

#: docs/10.x/validation.md:block 236 (header)
msgid "accepted"
msgstr "accepted"

#: docs/10.x/validation.md:block 237 (paragraph)
msgid "The field under validation must be `\"yes\"`, `\"on\"`, `1`, or `true`. This is useful for validating \"Terms of Service\" acceptance or similar fields."
msgstr "驗證欄位必須為 `\"yes\"`、`\"on\"`、`1`、`true` 等。適用於驗證類似是否已接受「服務條款」等欄位。"

#: docs/10.x/validation.md:block 239 (header)
msgid "accepted_if:anotherfield,value,..."
msgstr "accepted_if:anotherfield,value,..."

#: docs/10.x/validation.md:block 240 (paragraph)
msgid "The field under validation must be `\"yes\"`, `\"on\"`, `1`, or `true` if another field under validation is equal to a specified value. This is useful for validating \"Terms of Service\" acceptance or similar fields."
msgstr "若另一個驗證欄位符合給定的值，則該驗證欄位必須為 `\"yes\"`、`\"on\"`、`1`、`true`。適用於驗證類似是否接受「服務條款」等欄位。"

#: docs/10.x/validation.md:block 242 (header)
msgid "active_url"
msgstr "active_url"

#: docs/10.x/validation.md:block 243 (paragraph)
msgid "The field under validation must have a valid A or AAAA record according to the `dns_get_record` PHP function. The hostname of the provided URL is extracted using the `parse_url` PHP function before being passed to `dns_get_record`."
msgstr "該驗證欄位在使用 `dns_get_record` PHP 函式時必須有有效的 A 紀錄或 AAAA 紀錄。在傳送給 `dns_get_record` 前，主機名稱是從提供的 URL 中使用 `parse_url` PHP 方法取出的。"

#: docs/10.x/validation.md:block 245 (header)
msgid "after:*date*"
msgstr "after:*日期*"

#: docs/10.x/validation.md:block 246 (paragraph)
msgid "The field under validation must be a value after a given date. The dates will be passed into the `strtotime` PHP function in order to be converted to a valid `DateTime` instance:"
msgstr "該驗證欄位必須為給定日期後的日期。日期會使用 PHP 的 `strtotime` 函式來轉換為有效的 `DataTime` 實體："

#: docs/10.x/validation.md:block 247 (code)
msgid "'start_date' => 'required|date|after:tomorrow'\n"
msgstr "'start_date' => 'required|date|after:tomorrow'\n"

#: docs/10.x/validation.md:block 248 (paragraph)
msgid "Instead of passing a date string to be evaluated by `strtotime`, you may specify another field to compare against the date:"
msgstr "除了將日期字串直接傳入 `strtotime` 取值外，也可以指定另一個欄位來比較日期："

#: docs/10.x/validation.md:block 249 (code)
msgid "'finish_date' => 'required|date|after:start_date'\n"
msgstr "'finish_date' => 'required|date|after:start_date'\n"

#: docs/10.x/validation.md:block 251 (header)
msgid "after_or_equal:*date*"
msgstr "after_or_equal:*日期*"

#: docs/10.x/validation.md:block 252 (paragraph)
msgid "The field under validation must be a value after or equal to the given date. For more information, see the [after](#rule-after) rule."
msgstr "該驗證欄位的值必須在給定日期之後或等於給定日期。更多資訊請參考 [after](#rule-after) 規則。"

#: docs/10.x/validation.md:block 254 (header)
msgid "alpha"
msgstr "alpha"

#: docs/10.x/validation.md:block 255 (paragraph)
msgid "The field under validation must be entirely Unicode alphabetic characters contained in [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=) and [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=)."
msgstr "該驗證欄位必須只由 [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=) 與 [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=) 內的 Unicode 的字母字元組成。"

#: docs/10.x/validation.md:block 256 (paragraph)
msgid "To restrict this validation rule to characters in the ASCII range (`a-z` and `A-Z`), you may provide the `ascii` option to the validation rule:"
msgstr "若要進一步限制該驗證規則為只允許 ASCII 範圍 (`a-z` 與 `A-Z`)，可提供 `ascii` 選項給該驗證規則："

#: docs/10.x/validation.md:block 257 (code)
msgid "'username' => 'alpha:ascii',\n"
msgstr "'username' => 'alpha:ascii',\n"

#: docs/10.x/validation.md:block 259 (header)
msgid "alpha_dash"
msgstr "alpha_dash"

#: docs/10.x/validation.md:block 260 (paragraph)
msgid "The field under validation must be entirely Unicode alpha-numeric characters contained in [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=), [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=), [`\\p{N}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AN%3A%5D&g=&i=), as well as ASCII dashes (`-`) and ASCII underscores (`_`)."
msgstr "該驗證欄位必須完全由 `\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=)、[`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=)、[`\\p{N}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AN%3A%5D&g=&i=) 內所包含的 Unicode 字母數字字元、以及 ASCII 的減號 (`-`) 與 ASCII 的底線 (`_`) 所組成。"

#: docs/10.x/validation.md:block 262 (code)
msgid "'username' => 'alpha_dash:ascii',\n"
msgstr "'username' => 'alpha_dash:ascii',\n"

#: docs/10.x/validation.md:block 264 (header)
msgid "alpha_num"
msgstr "alpha_num"

#: docs/10.x/validation.md:block 265 (paragraph)
msgid "The field under validation must be entirely Unicode alpha-numeric characters contained in [`\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=), [`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=), and [`\\p{N}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AN%3A%5D&g=&i=)."
msgstr "該驗證欄位必須完全由 `\\p{L}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AL%3A%5D&g=&i=)、[`\\p{M}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AM%3A%5D&g=&i=) 與 [`\\p{N}`](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%3AN%3A%5D&g=&i=) 內所包含的 Unicode 字母數字字元所組成。"

#: docs/10.x/validation.md:block 267 (code)
msgid "'username' => 'alpha_num:ascii',\n"
msgstr "'username' => 'alpha_num:ascii',\n"

#: docs/10.x/validation.md:block 269 (header)
msgid "array"
msgstr "array"

#: docs/10.x/validation.md:block 270 (paragraph)
msgid "The field under validation must be a PHP `array`."
msgstr "該欄位必須為一 PHP `array`。"

#: docs/10.x/validation.md:block 271 (paragraph)
msgid "When additional values are provided to the `array` rule, each key in the input array must be present within the list of values provided to the rule. In the following example, the `admin` key in the input array is invalid since it is not contained in the list of values provided to the `array` rule:"
msgstr "若有提供額外的值給 `array` 規則，則輸入陣列中的每個索引鍵都必須要在提供給該規則的列表值中。在下列的例子中，`admin` 索引鍵是無效的，因為 `admin` 不包含在我們提供給 `array` 規則的數值列表中："

#: docs/10.x/validation.md:block 272 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$input = [\n"
"    'user' => [\n"
"        'name' => 'Taylor Otwell',\n"
"        'username' => 'taylorotwell',\n"
"        'admin' => true,\n"
"    ],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'user' => 'array:name,username',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$input = [\n"
"    'user' => [\n"
"        'name' => 'Taylor Otwell',\n"
"        'username' => 'taylorotwell',\n"
"        'admin' => true,\n"
"    ],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'user' => 'array:name,username',\n"
"]);\n"

#: docs/10.x/validation.md:block 273 (paragraph)
msgid "In general, you should always specify the array keys that are allowed to be present within your array."
msgstr "一般來說，請總是指定允許出現在陣列中的索引鍵："

#: docs/10.x/validation.md:block 275 (header)
msgid "ascii"
msgstr "ascii"

#: docs/10.x/validation.md:block 276 (paragraph)
msgid "The field under validation must be entirely 7-bit ASCII characters."
msgstr "該驗證欄位只能由 7 位元的 ASCII 字元組成。"

#: docs/10.x/validation.md:block 278 (header)
msgid "bail"
msgstr "bail"

#: docs/10.x/validation.md:block 279 (paragraph)
msgid "Stop running validation rules for the field after the first validation failure."
msgstr "該欄位中某項驗證規則失敗後，停止驗證該欄位的其他規則。"

#: docs/10.x/validation.md:block 280 (paragraph)
msgid "While the `bail` rule will only stop validating a specific field when it encounters a validation failure, the `stopOnFirstFailure` method will inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr "`bail` 規則會在遇到驗證失敗時停止驗證該欄位，而 `stopOnFirstFailure` 方法則會讓 Validator 在遇到一個驗證失敗的時候就停止所有屬性的驗證："

#: docs/10.x/validation.md:block 283 (header)
msgid "before:*date*"
msgstr "before:*日期*"

#: docs/10.x/validation.md:block 284 (paragraph)
msgid "The field under validation must be a value preceding the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance. In addition, like the [`after`](#rule-after) rule, the name of another field under validation may be supplied as the value of `date`."
msgstr "驗證欄位必須為給定日期之前的日期。該日期會被傳給 PHP 的 `strtotime` 函式，以轉換為有效的 `DateTime` 實體。此外，與 [`after`](#rule-after) 規則一樣，我們也可以提供驗證欄位中的另一個欄位來作為 `日期` 的值。"

#: docs/10.x/validation.md:block 286 (header)
msgid "before_or_equal:*date*"
msgstr "before_or_equal:*日期*"

#: docs/10.x/validation.md:block 287 (paragraph)
msgid "The field under validation must be a value preceding or equal to the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance. In addition, like the [`after`](#rule-after) rule, the name of another field under validation may be supplied as the value of `date`."
msgstr "驗證欄位必須為給定日期或給定日期之前的日期。該日期會被傳給 PHP 的 `strtotime` 函式，以轉換為有效的 `DateTime` 實體。此外，與 [`after`](#rule-after) 規則一樣，我們也可以提供驗證欄位中的另一個欄位來作為 `日期` 的值。"

#: docs/10.x/validation.md:block 289 (header)
msgid "between:*min*,*max*"
msgstr "between:*最小值*,*最大值*"

#: docs/10.x/validation.md:block 290 (paragraph)
msgid "The field under validation must have a size between the given *min* and *max* (inclusive). Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr "該驗證欄位的大小必須介於給定的 *最小值* 與 *最大值* 之間 (含)。字串、數字、陣列、與檔案會使用與 [`size`](#rule-size) 規則相同的方法計算大小。"

#: docs/10.x/validation.md:block 292 (header)
msgid "boolean"
msgstr "boolean"

#: docs/10.x/validation.md:block 293 (paragraph)
msgid "The field under validation must be able to be cast as a boolean. Accepted input are `true`, `false`, `1`, `0`, `\"1\"`, and `\"0\"`."
msgstr "該驗證欄位必須能被轉為布林值。可接受的輸入為 `true`, `false`, `1`, `0`, `\"1\"`, 與 `\"0\"`。"

#: docs/10.x/validation.md:block 295 (header)
msgid "confirmed"
msgstr "confirmed"

#: docs/10.x/validation.md:block 296 (paragraph)
msgid "The field under validation must have a matching field of `{field}_confirmation`. For example, if the field under validation is `password`, a matching `password_confirmation` field must be present in the input."
msgstr "該驗證欄位必須與 `{欄位}_confirmation` 相符合。舉例來說，若正在驗證的欄位是 `password`，則輸入中必須有相符的 `password_confirmation` 欄位。"

#: docs/10.x/validation.md:block 298 (header)
msgid "current_password"
msgstr "current_password"

#: docs/10.x/validation.md:block 299 (paragraph)
msgid "The field under validation must match the authenticated user's password. You may specify an [authentication guard](/docs/{{version}}/authentication) using the rule's first parameter:"
msgstr "驗證欄位必須符合目前登入使用者的密碼。可以使用規則的第一個參數來指定[認證 Guard](/docs/{{version}}/authentication)。"

#: docs/10.x/validation.md:block 300 (code)
msgid "'password' => 'current_password:api'\n"
msgstr "'password' => 'current_password:api'\n"

#: docs/10.x/validation.md:block 302 (header)
msgid "date"
msgstr "date"

#: docs/10.x/validation.md:block 303 (paragraph)
msgid "The field under validation must be a valid, non-relative date according to the `strtotime` PHP function."
msgstr "驗證欄位在依照 `strtotime` PHP 函式時，必須是有效且非相對的日期。"

#: docs/10.x/validation.md:block 305 (header)
msgid "date_equals:*date*"
msgstr "date_equals:*日期*"

#: docs/10.x/validation.md:block 306 (paragraph)
msgid "The field under validation must be equal to the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance."
msgstr "該驗證欄位必須為給定日期或給定日期後的日期。日期會使用 PHP 的 `strtotime` 函式來轉換為有效的 `DataTime` 實體："

#: docs/10.x/validation.md:block 308 (header)
msgid "date_format:*format*,..."
msgstr "date_format:*格式*,..."

#: docs/10.x/validation.md:block 309 (paragraph)
msgid "The field under validation must match one of the given *formats*. You should use **either** `date` or `date_format` when validating a field, not both. This validation rule supports all formats supported by PHP's [DateTime](https://www.php.net/manual/en/class.datetime.php) class."
msgstr "驗證欄位必須符合其中一個給定的 *格式*。驗證欄位時只能使用 `date` 或 `date_format` **擇一**，不可同時使用。該驗證規則支援 PHP [DateTime](https://www.php.net/manual/en/class.datetime.php) 類別支援的所有格式。"

#: docs/10.x/validation.md:block 311 (header)
msgid "decimal:*min*,*max*"
msgstr "decimal:*最小值*,*最大值*"

#: docs/10.x/validation.md:block 312 (paragraph)
msgid "The field under validation must be numeric and must contain the specified number of decimal places:"
msgstr "該驗證欄位必須為數字 (Numeric)，且必須包含特定位數的小數點："

#: docs/10.x/validation.md:block 313 (code)
msgid "// Must have exactly two decimal places (9.99)...\n"
"'price' => 'decimal:2'\n\n"
"// Must have between 2 and 4 decimal places...\n"
"'price' => 'decimal:2,4'\n"
msgstr "// 必須正好有兩位小數點 (9.99)...\n"
"'price' => 'decimal:2'\n\n"
"// 必須有介於 2 到 4 位小數點位數...\n"
"'price' => 'decimal:2,4'\n"

#: docs/10.x/validation.md:block 315 (header)
msgid "declined"
msgstr "declined"

#: docs/10.x/validation.md:block 316 (paragraph)
msgid "The field under validation must be `\"no\"`, `\"off\"`, `0`, or `false`."
msgstr "該驗證欄位必須為 `\"no\"`, `\"off\"`, `0`, 或 `false`。"

#: docs/10.x/validation.md:block 318 (header)
msgid "declined_if:anotherfield,value,..."
msgstr "declined_if:另一個欄位,值,..."

#: docs/10.x/validation.md:block 319 (paragraph)
msgid "The field under validation must be `\"no\"`, `\"off\"`, `0`, or `false` if another field under validation is equal to a specified value."
msgstr "若驗證中另一個欄位符合給定的值時，該驗證欄位必須為 `\"no\"`, `\"off\"`, `0`, 或 `false`。"

#: docs/10.x/validation.md:block 321 (header)
msgid "different:*field*"
msgstr "different:*欄位*"

#: docs/10.x/validation.md:block 322 (paragraph)
msgid "The field under validation must have a different value than *field*."
msgstr "該驗證欄位必須與 *欄位* 的值不同。"

#: docs/10.x/validation.md:block 324 (header)
msgid "digits:*value*"
msgstr "digits:*值*"

#: docs/10.x/validation.md:block 325 (paragraph)
msgid "The integer under validation must have an exact length of *value*."
msgstr "要驗證的整數的長度必須完全符合 **值**。"

#: docs/10.x/validation.md:block 327 (header)
msgid "digits_between:*min*,*max*"
msgstr "digits_between:*最小值*,*最大值*"

#: docs/10.x/validation.md:block 328 (paragraph)
msgid "The integer validation must have a length between the given *min* and *max*."
msgstr "要驗證的整數長度必須介於給定的 **最小值** 與 **最大值**。"

#: docs/10.x/validation.md:block 330 (header)
msgid "dimensions"
msgstr "dimensions"

#: docs/10.x/validation.md:block 331 (paragraph)
msgid "The file under validation must be an image meeting the dimension constraints as specified by the rule's parameters:"
msgstr "該驗證欄位必須為一張圖片，且必須符合規則參數所指定的長寬限制："

#: docs/10.x/validation.md:block 332 (code)
msgid "'avatar' => 'dimensions:min_width=100,min_height=200'\n"
msgstr "'avatar' => 'dimensions:min_width=100,min_height=200'\n"

#: docs/10.x/validation.md:block 333 (paragraph)
msgid "Available constraints are: *min_width*, *max_width*, *min_height*, *max_height*, *width*, *height*, *ratio*."
msgstr "可用的條件限制為：最小寬度 `min_width`、最大寬度 `max_width`、最小高度 `min_height`、最大高度 `max_height`、寬度 `width`、高度 `height`、長寬比 `ratio`。"

#: docs/10.x/validation.md:block 334 (paragraph)
msgid "A *ratio* constraint should be represented as width divided by height. This can be specified either by a fraction like `3/2` or a float like `1.5`:"
msgstr "長寬比 `ratio` 以寬除以高來呈現。可以使用如 `3/2` 這樣的分數，或是如 `1.5` 這樣的浮點數來表示："

#: docs/10.x/validation.md:block 335 (code)
msgid "'avatar' => 'dimensions:ratio=3/2'\n"
msgstr "'avatar' => 'dimensions:ratio=3/2'\n"

#: docs/10.x/validation.md:block 336 (paragraph)
msgid "Since this rule requires several arguments, you may use the `Rule::dimensions` method to fluently construct the rule:"
msgstr "由於這個規則要求多個引數，所以也可以使用 `Rule::dimensions` 方法來流暢地建立規則："

#: docs/10.x/validation.md:block 337 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'avatar' => [\n"
"        'required',\n"
"        Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'avatar' => [\n"
"        'required',\n"
"        Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 339 (header)
msgid "distinct"
msgstr "distinct"

#: docs/10.x/validation.md:block 340 (paragraph)
msgid "When validating arrays, the field under validation must not have any duplicate values:"
msgstr "在驗證陣列時，該驗證欄位必須不含重複的值："

#: docs/10.x/validation.md:block 341 (code)
msgid "'foo.*.id' => 'distinct'\n"
msgstr "'foo.*.id' => 'distinct'\n"

#: docs/10.x/validation.md:block 342 (paragraph)
msgid "Distinct uses loose variable comparisons by default. To use strict comparisons, you may add the `strict` parameter to your validation rule definition:"
msgstr "Distinct 預設使用鬆散的 (Loose) 變數比較。若要使用嚴格 (Strict) 比較，可在驗證規則定義中加上 `strict` 參數："

#: docs/10.x/validation.md:block 343 (code)
msgid "'foo.*.id' => 'distinct:strict'\n"
msgstr "'foo.*.id' => 'distinct:strict'\n"

#: docs/10.x/validation.md:block 344 (paragraph)
msgid "You may add `ignore_case` to the validation rule's arguments to make the rule ignore capitalization differences:"
msgstr "可以將 `ignore_case` 加到驗證規則的參數內來讓該規則忽略大小寫差異："

#: docs/10.x/validation.md:block 345 (code)
msgid "'foo.*.id' => 'distinct:ignore_case'\n"
msgstr "'foo.*.id' => 'distinct:ignore_case'\n"

#: docs/10.x/validation.md:block 347 (header)
msgid "doesnt_start_with:*foo*,*bar*,..."
msgstr "doesnt_start_with:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 348 (paragraph)
msgid "The field under validation must not start with one of the given values."
msgstr "該驗證欄位不可以任何給定的值開頭。"

#: docs/10.x/validation.md:block 350 (header)
msgid "doesnt_end_with:*foo*,*bar*,..."
msgstr "doesnt_end_with:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 351 (paragraph)
msgid "The field under validation must not end with one of the given values."
msgstr "該驗證欄位不可以任何給定的值結尾。"

#: docs/10.x/validation.md:block 353 (header)
msgid "email"
msgstr "email"

#: docs/10.x/validation.md:block 354 (paragraph)
msgid "The field under validation must be formatted as an email address. This validation rule utilizes the [`egulias/email-validator`](https://github.com/egulias/EmailValidator) package for validating the email address. By default, the `RFCValidation` validator is applied, but you can apply other validation styles as well:"
msgstr "驗證欄位必須為 E-Mail 位址格式。該驗證規則使用 [`egulias/email-validator`](https://github.com/egulias/EmailValidator) 套件來驗證 E-Mail位址。預設情況下，使用 `RFCValidation` Validator，不過，也可以自訂套用其他驗證風格："

#: docs/10.x/validation.md:block 355 (code)
msgid "'email' => 'email:rfc,dns'\n"
msgstr "'email' => 'email:rfc,dns'\n"

#: docs/10.x/validation.md:block 356 (paragraph)
msgid "The example above will apply the `RFCValidation` and `DNSCheckValidation` validations. Here's a full list of validation styles you can apply:"
msgstr "上方的例子會套用 `RFCValidation` 與 `DNSCheckValidation` 驗證。此處列出了所有可套用的驗證風格："

#: docs/10.x/validation.md:block 358 (unordered list)
msgid "`rfc`: `RFCValidation`"
msgstr "`rfc`: `RFCValidation`"

#: docs/10.x/validation.md:block 358 (unordered list)
msgid "`strict`: `NoRFCWarningsValidation`"
msgstr "`strict`: `NoRFCWarningsValidation`"

#: docs/10.x/validation.md:block 358 (unordered list)
msgid "`dns`: `DNSCheckValidation`"
msgstr "`dns`: `DNSCheckValidation`"

#: docs/10.x/validation.md:block 358 (unordered list)
msgid "`spoof`: `SpoofCheckValidation`"
msgstr "`spoof`: `SpoofCheckValidation`"

#: docs/10.x/validation.md:block 358 (unordered list)
msgid "`filter`: `FilterEmailValidation`"
msgstr "`filter`: `FilterEmailValidation`"

#: docs/10.x/validation.md:block 358 (unordered list)
msgid "`filter_unicode`: `FilterEmailValidation::unicode()`"
msgstr "`filter_unicode`: `FilterEmailValidation::unicode()`"

#: docs/10.x/validation.md:block 360 (paragraph)
msgid "The `filter` validator, which uses PHP's `filter_var` function, ships with Laravel and was Laravel's default email validation behavior prior to Laravel version 5.8."
msgstr "`filter` Validator 使用 PHP 的 `filter_var` 函式，是隨 Laravel 提供的 Validator。在 Laravel 5.8 以前是 Laravel 的預設 E-Mail 驗證行為。"

#: docs/10.x/validation.md:block 361 (quote)
msgid "**Warning** The `dns` and `spoof` validators require the PHP `intl` extension."
msgstr "**Warning** `dns` 與 `spoof` Validator 需要有 PHP 的 `intl` 擴充程式。"

#: docs/10.x/validation.md:block 363 (header)
msgid "ends_with:*foo*,*bar*,..."
msgstr "ends_with:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 364 (paragraph)
msgid "The field under validation must end with one of the given values."
msgstr "該驗證欄位必須以其中一個給定的值結尾。"

#: docs/10.x/validation.md:block 366 (header)
msgid "enum"
msgstr "enum"

#: docs/10.x/validation.md:block 367 (paragraph)
msgid "The `Enum` rule is a class based rule that validates whether the field under validation contains a valid enum value. The `Enum` rule accepts the name of the enum as its only constructor argument:"
msgstr "`Enum` 規則是一個基於類別的規則，會驗證該驗證欄位是否包含有效的 Enum 值。`Enum` 規則接受一個 Enum 的名稱作為其唯一的 Constructor (建構函式) 引數："

#: docs/10.x/validation.md:block 368 (code)
msgid "use App\\Enums\\ServerStatus;\n"
"use Illuminate\\Validation\\Rules\\Enum;\n\n"
"$request->validate([\n"
"    'status' => [new Enum(ServerStatus::class)],\n"
"]);\n"
msgstr "use App\\Enums\\ServerStatus;\n"
"use Illuminate\\Validation\\Rules\\Enum;\n\n"
"$request->validate([\n"
"    'status' => [new Enum(ServerStatus::class)],\n"
"]);\n"

#: docs/10.x/validation.md:block 369 (quote)
msgid "**Warning** Enums are only available on PHP 8.1+."
msgstr "**Warning** Enum 只在 PHP 8.1 以上提供。"

#: docs/10.x/validation.md:block 371 (header)
msgid "exclude"
msgstr "exclude"

#: docs/10.x/validation.md:block 372 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods."
msgstr "`validate` 或 `validated` 方法回傳的 Request 資料中會排除此驗證欄位。"

#: docs/10.x/validation.md:block 374 (header)
msgid "exclude_if:*anotherfield*,*value*"
msgstr "exclude_if:*另一欄位*,*值*"

#: docs/10.x/validation.md:block 375 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the *anotherfield* field is equal to *value*."
msgstr "若 *另一欄位* 欄位的值是 *值*，則 `validate` 或 `validated` 方法回傳的 Request 資料中會排除此驗證欄位。"

#: docs/10.x/validation.md:block 376 (paragraph)
msgid "If complex conditional exclusion logic is required, you may utilize the `Rule::excludeIf` method. This method accepts a boolean or a closure. When given a closure, the closure should return `true` or `false` to indicate if the field under validation should be excluded:"
msgstr "若有需要使用複雜的邏輯條件來排除欄位，可使用 `Rule::excludeIf` 方法。該方法接受一個布林值或閉包。傳入閉包時，該閉包應回傳 `true` 或 `false`，來判斷該驗證欄位是否要被排除："

#: docs/10.x/validation.md:block 377 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::excludeIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::excludeIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n"
"]);\n"

#: docs/10.x/validation.md:block 379 (header)
msgid "exclude_unless:*anotherfield*,*value*"
msgstr "exclude_unless:*另一欄位*,*值*"

#: docs/10.x/validation.md:block 380 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods unless *anotherfield*'s field is equal to *value*. If *value* is `null` (`exclude_unless:name,null`), the field under validation will be excluded unless the comparison field is `null` or the comparison field is missing from the request data."
msgstr "除非 *另一欄位* 為 *值*，否則 `validate` 或 `validated` 方法回傳的 Request 資料中將不會排除該驗證欄位。若 *值* 為 `null` (`exclude_unless:name,null`)，則除非要比較的欄位為 `null` 或 Request 資料中沒有要比較的欄位，否則該驗證欄位將不會被排除。"

#: docs/10.x/validation.md:block 382 (header)
msgid "exclude_with:*anotherfield*"
msgstr "exclude_with:*anotherfield*"

#: docs/10.x/validation.md:block 383 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the *anotherfield* field is present."
msgstr "若 *另一欄位* 存在，則 `validate` 或 `validated` 方法回傳的 Request 資料中將排除該驗證欄位。"

#: docs/10.x/validation.md:block 385 (header)
msgid "exclude_without:*anotherfield*"
msgstr "exclude_without:*另一欄位*"

#: docs/10.x/validation.md:block 386 (paragraph)
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the *anotherfield* field is not present."
msgstr "若 *另一欄位* 不存在，則 `validate` 或 `validated` 方法回傳的 Request 資料中將排除該驗證欄位。"

#: docs/10.x/validation.md:block 388 (header)
msgid "exists:*table*,*column*"
msgstr "exists:*資料表*,*欄位*"

#: docs/10.x/validation.md:block 389 (paragraph)
msgid "The field under validation must exist in a given database table."
msgstr "該驗證欄位必須在給定資料庫資料表中存在。"

#: docs/10.x/validation.md:block 391 (header)
msgid "Basic Usage Of Exists Rule"
msgstr "Exists 規則的基本用法"

#: docs/10.x/validation.md:block 392 (code)
msgid "'state' => 'exists:states'\n"
msgstr "'state' => 'exists:states'\n"

#: docs/10.x/validation.md:block 393 (paragraph)
msgid "If the `column` option is not specified, the field name will be used. So, in this case, the rule will validate that the `states` database table contains a record with a `state` column value matching the request's `state` attribute value."
msgstr "若未指定 `column` 欄位，則會該驗證欄位的名稱。因此，在這個例子中，本規則會驗證 `states` 資料表中是否包含有一筆 `state` 欄位值符合 Request 中 `state` 屬性值的紀錄。"

#: docs/10.x/validation.md:block 395 (header)
msgid "Specifying A Custom Column Name"
msgstr "指定自訂欄位名稱"

#: docs/10.x/validation.md:block 396 (paragraph)
msgid "You may explicitly specify the database column name that should be used by the validation rule by placing it after the database table name:"
msgstr "也可以顯式指定本驗證規則要使用的資料庫欄位名稱。只需要將欄位名稱放在資料表名稱後即可："

#: docs/10.x/validation.md:block 397 (code)
msgid "'state' => 'exists:states,abbreviation'\n"
msgstr "'state' => 'exists:states,abbreviation'\n"

#: docs/10.x/validation.md:block 398 (paragraph)
msgid "Occasionally, you may need to specify a specific database connection to be used for the `exists` query. You can accomplish this by prepending the connection name to the table name:"
msgstr "有時候，我們可能會需要指定 `exists` 查詢使用的資料庫連線。為此，我們只要在資料表名稱前方加上連線名稱即可："

#: docs/10.x/validation.md:block 399 (code)
msgid "'email' => 'exists:connection.staff,email'\n"
msgstr "'email' => 'exists:connection.staff,email'\n"

#: docs/10.x/validation.md:block 400 (paragraph)
msgid "Instead of specifying the table name directly, you may specify the Eloquent model which should be used to determine the table name:"
msgstr "除了直接指定資料表名稱外，也可以指定要用來判斷資料表名稱的 Eloquent Model："

#: docs/10.x/validation.md:block 401 (code)
msgid "'user_id' => 'exists:App\\Models\\User,id'\n"
msgstr "'user_id' => 'exists:App\\Models\\User,id'\n"

#: docs/10.x/validation.md:block 402 (paragraph)
msgid "If you would like to customize the query executed by the validation rule, you may use the `Rule` class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the `|` character to delimit them:"
msgstr "若想自訂該驗證規則執行的查詢，可以使用 `Rule` 類別來流暢地定義該規則。在這個範例中，我們還會使用陣列來指定驗證規則，而不是使用 `|` 字元來區分各個規則："

#: docs/10.x/validation.md:block 403 (code)
msgid "use Illuminate\\Database\\Query\\Builder;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::exists('staff')->where(function (Builder $query) {\n"
"            return $query->where('account_id', 1);\n"
"        }),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Database\\Query\\Builder;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::exists('staff')->where(function (Builder $query) {\n"
"            return $query->where('account_id', 1);\n"
"        }),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 404 (paragraph)
msgid "You may explicitly specify the database column name that should be used by the `exists` rule generated by the `Rule::exists` method by providing the column name as the second argument to the `exists` method:"
msgstr "只要在 `exists` 方法的第二個引數上提供欄位名稱，就可以明顯指定 `Rule::exists` 方法所產生的 `exists` 規則要使用的資料庫欄位名稱："

#: docs/10.x/validation.md:block 405 (code)
msgid "'state' => Rule::exists('states', 'abbreviation'),\n"
msgstr "'state' => Rule::exists('states', 'abbreviation'),\n"

#: docs/10.x/validation.md:block 407 (header)
msgid "file"
msgstr "file"

#: docs/10.x/validation.md:block 408 (paragraph)
msgid "The field under validation must be a successfully uploaded file."
msgstr "該驗證欄位必須為一成功上傳的檔案。"

#: docs/10.x/validation.md:block 410 (header)
msgid "filled"
msgstr "filled"

#: docs/10.x/validation.md:block 411 (paragraph)
msgid "The field under validation must not be empty when it is present."
msgstr "當該驗證欄位存在時，不可為空。"

#: docs/10.x/validation.md:block 413 (header)
msgid "gt:*field*"
msgstr "gt:*欄位*"

#: docs/10.x/validation.md:block 414 (paragraph)
msgid "The field under validation must be greater than the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr "該驗證欄位必須大於給定的 *欄位*。這兩個欄位必須為相同型別。字串、數字、陣列、檔案等，都使用與 [`size`](#rule-size) 規則相同的方式計算大小。"

#: docs/10.x/validation.md:block 416 (header)
msgid "gte:*field*"
msgstr "gte:*欄位*"

#: docs/10.x/validation.md:block 417 (paragraph)
msgid "The field under validation must be greater than or equal to the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr "該驗證欄位必須大於或等於給定的 *欄位*。這兩個欄位必須為相同型別。字串、數字、陣列、檔案等，都使用與 [`size`](#rule-size) 規則相同的方式計算大小。"

#: docs/10.x/validation.md:block 419 (header)
msgid "image"
msgstr "image"

#: docs/10.x/validation.md:block 420 (paragraph)
msgid "The file under validation must be an image (jpg, jpeg, png, bmp, gif, svg, or webp)."
msgstr "該驗證欄位必須為一圖片 (jpg, jpeg, png, bmp, gif, svg, 或 webp)。"

#: docs/10.x/validation.md:block 422 (header)
msgid "in:*foo*,*bar*,..."
msgstr "in:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 423 (paragraph)
msgid "The field under validation must be included in the given list of values. Since this rule often requires you to `implode` an array, the `Rule::in` method may be used to fluently construct the rule:"
msgstr "該驗證欄位必須要包含在給定的列表值中。使用這個規則時，我們常常需要對陣列 `implode`，所以我們還能使用 `Rule::in` 方法來流暢地建立該規則："

#: docs/10.x/validation.md:block 424 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'zones' => [\n"
"        'required',\n"
"        Rule::in(['first-zone', 'second-zone']),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'zones' => [\n"
"        'required',\n"
"        Rule::in(['first-zone', 'second-zone']),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 425 (paragraph)
msgid "When the `in` rule is combined with the `array` rule, each value in the input array must be present within the list of values provided to the `in` rule. In the following example, the `LAS` airport code in the input array is invalid since it is not contained in the list of airports provided to the `in` rule:"
msgstr "若與 `array` 規則一起使用 `in` 規則，則輸入陣列中的每個值都必須要包含在提供給 `in` 規則的列表值中。在下面的例子中，輸入陣列內的 `LAS` 機場代碼是無效的，因為提供給 `in` 規則的機場列表中未包含 `LAS`："

#: docs/10.x/validation.md:block 426 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$input = [\n"
"    'airports' => ['NYC', 'LAS'],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'airports' => [\n"
"        'required',\n"
"        'array',\n"
"    ],\n"
"    'airports.*' => Rule::in(['NYC', 'LIT']),\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$input = [\n"
"    'airports' => ['NYC', 'LAS'],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'airports' => [\n"
"        'required',\n"
"        'array',\n"
"    ],\n"
"    'airports.*' => Rule::in(['NYC', 'LIT']),\n"
"]);\n"

#: docs/10.x/validation.md:block 428 (header)
msgid "in_array:*anotherfield*.*"
msgstr "in_array:*另一欄位*.*"

#: docs/10.x/validation.md:block 429 (paragraph)
msgid "The field under validation must exist in *anotherfield*'s values."
msgstr "該驗證欄位的值必須存在於 *另一欄位* 的值中。"

#: docs/10.x/validation.md:block 431 (header)
msgid "integer"
msgstr "integer"

#: docs/10.x/validation.md:block 432 (paragraph)
msgid "The field under validation must be an integer."
msgstr "該驗證欄位必須為整數。"

#: docs/10.x/validation.md:block 433 (quote)
msgid "**Warning** This validation rule does not verify that the input is of the \"integer\" variable type, only that the input is of a type accepted by PHP's `FILTER_VALIDATE_INT` rule. If you need to validate the input as being a number please use this rule in combination with [the `numeric` validation rule](#rule-numeric)."
msgstr "**Warning** 這個驗證規則並不會驗證輸入是否為「^[整數](Integer)」變數型別，只會驗證該輸入值是否為 PHP 的 `FILTER_VALIDATE_INT` 規則接受的類型。若想驗證輸入是否為一數字，請搭配 [`numeric` 驗證規則](#rule-numeric)一起使用此規則。"

#: docs/10.x/validation.md:block 435 (header)
msgid "ip"
msgstr "ip"

#: docs/10.x/validation.md:block 436 (paragraph)
msgid "The field under validation must be an IP address."
msgstr "該驗證欄位必須為一 IP 位址。"

#: docs/10.x/validation.md:block 438 (header)
msgid "ipv4"
msgstr "ipv4"

#: docs/10.x/validation.md:block 439 (paragraph)
msgid "The field under validation must be an IPv4 address."
msgstr "該驗證欄位必須為一 IPv4 位址。"

#: docs/10.x/validation.md:block 441 (header)
msgid "ipv6"
msgstr "ipv6"

#: docs/10.x/validation.md:block 442 (paragraph)
msgid "The field under validation must be an IPv6 address."
msgstr "該驗證欄位必須為一 IPv6 位址。"

#: docs/10.x/validation.md:block 444 (header)
msgid "json"
msgstr "json"

#: docs/10.x/validation.md:block 445 (paragraph)
msgid "The field under validation must be a valid JSON string."
msgstr "該驗證欄位必須為有效的 JSON 字串。"

#: docs/10.x/validation.md:block 447 (header)
msgid "lt:*field*"
msgstr "lt:*欄位*"

#: docs/10.x/validation.md:block 448 (paragraph)
msgid "The field under validation must be less than the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr "該驗證欄位必須小於給定的 *欄位*。這兩個欄位必須為相同型別。字串、數字、陣列、檔案等，將使用與 [`size`](#rule-size) 規則相同的方式計算長度。"

#: docs/10.x/validation.md:block 450 (header)
msgid "lte:*field*"
msgstr "lte:*欄位*"

#: docs/10.x/validation.md:block 451 (paragraph)
msgid "The field under validation must be less than or equal to the given *field*. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr "該驗證欄位必須小於或等於給定的 *欄位*。這兩個欄位必須為相同型別。字串、數字、陣列、檔案等，將使用與 [`size`](#rule-size) 規則相同的方式計算長度。"

#: docs/10.x/validation.md:block 453 (header)
msgid "lowercase"
msgstr "lowercase"

#: docs/10.x/validation.md:block 454 (paragraph)
msgid "The field under validation must be lowercase."
msgstr "該驗證欄位必須為小寫字母。"

#: docs/10.x/validation.md:block 456 (header)
msgid "mac_address"
msgstr "mac_address"

#: docs/10.x/validation.md:block 457 (paragraph)
msgid "The field under validation must be a MAC address."
msgstr "該驗證欄位必須為一 MAC 位址。"

#: docs/10.x/validation.md:block 459 (header)
msgid "max:*value*"
msgstr "max:*值*"

#: docs/10.x/validation.md:block 460 (paragraph)
msgid "The field under validation must be less than or equal to a maximum *value*. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr "該驗證欄位必須小於或等於最大值 *值*。字串、數字、陣列、檔案等會使用與 [`size`](#rule-size) 規則相同的方法計算大小。"

#: docs/10.x/validation.md:block 462 (header)
msgid "max_digits:*value*"
msgstr "max_digits:*值*"

#: docs/10.x/validation.md:block 463 (paragraph)
msgid "The integer under validation must have a maximum length of *value*."
msgstr "要驗證的整數位數必須小於 *值*。"

#: docs/10.x/validation.md:block 465 (header)
msgid "mimetypes:*text/plain*,..."
msgstr "mimetypes:*text/plain*,..."

#: docs/10.x/validation.md:block 466 (paragraph)
msgid "The file under validation must match one of the given MIME types:"
msgstr "該驗證欄位的檔案必須為其中一個給定的 MIME 型別："

#: docs/10.x/validation.md:block 467 (code)
msgid "'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n"
msgstr "'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n"

#: docs/10.x/validation.md:block 468 (paragraph)
msgid "To determine the MIME type of the uploaded file, the file's contents will be read and the framework will attempt to guess the MIME type, which may be different from the client's provided MIME type."
msgstr "若要判斷上傳檔案的 MIME 類型，Laravel 會讀取該檔案的內容，並嘗試推測 MIME 類型。推測的 MIME 類型可能會與用戶端提供的 MIME 類型不同。"

#: docs/10.x/validation.md:block 470 (header)
msgid "mimes:*foo*,*bar*,..."
msgstr "mimes:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 471 (paragraph)
msgid "The file under validation must have a MIME type corresponding to one of the listed extensions."
msgstr "該驗證欄位的檔案必須為列出的副檔名中其中一個對應的 MIME 類型。"

#: docs/10.x/validation.md:block 473 (header)
msgid "Basic Usage Of MIME Rule"
msgstr "MIME 規則的基礎用法"

#: docs/10.x/validation.md:block 474 (code)
msgid "'photo' => 'mimes:jpg,bmp,png'\n"
msgstr "'photo' => 'mimes:jpg,bmp,png'\n"

#: docs/10.x/validation.md:block 475 (paragraph)
msgid "Even though you only need to specify the extensions, this rule actually validates the MIME type of the file by reading the file's contents and guessing its MIME type. A full listing of MIME types and their corresponding extensions may be found at the following location:"
msgstr "雖然我們只需要指定副檔名，不過這個規則會讀取該檔案的內容並判斷 MIME 類型，再實際去驗證 MIME 類型。可以在下列位置找到一組 MIME 類型與其對應副檔名的列表："

#: docs/10.x/validation.md:block 476 (paragraph)
msgid "<https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types>"
msgstr "<https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types>"

#: docs/10.x/validation.md:block 478 (header)
msgid "min:*value*"
msgstr "min:*值*"

#: docs/10.x/validation.md:block 479 (paragraph)
msgid "The field under validation must have a minimum *value*. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr "該驗證欄位必須有最小值 *最小值*。字串、數字、陣列、與檔案會使用與 [`size`](#rule-size) 規則相同的方法計算大小。"

#: docs/10.x/validation.md:block 481 (header)
msgid "min_digits:*value*"
msgstr "min_digits:*值*"

#: docs/10.x/validation.md:block 482 (paragraph)
msgid "The integer under validation must have a minimum length of *value*."
msgstr "要驗證的整數位數必須大於 *值*。"

#: docs/10.x/validation.md:block 484 (header)
msgid "multiple_of:*value*"
msgstr "multiple_of:*值*"

#: docs/10.x/validation.md:block 485 (paragraph)
msgid "The field under validation must be a multiple of *value*."
msgstr "該驗證欄位必須為 *值* 的倍數。"

#: docs/10.x/validation.md:block 487 (header)
msgid "missing"
msgstr "missing"

#: docs/10.x/validation.md:block 488 (paragraph)
msgid "The field under validation must not be present in the input data."
msgstr "要驗證的欄位不可存在於輸入資料中。"

#: docs/10.x/validation.md:block 490 (header)
msgid "missing_if:*anotherfield*,*value*,..."
msgstr "missing_if:*另一欄位*,*值*,..."

#: docs/10.x/validation.md:block 491 (paragraph)
msgid "The field under validation must not be present if the *anotherfield* field is equal to any *value*."
msgstr "若 *另一欄位* 欄位為給定的其中一個 *值* 時，該驗證欄位不可存在。"

#: docs/10.x/validation.md:block 493 (header)
msgid "missing_unless:*anotherfield*,*value*"
msgstr "missing_unless:*另一欄位*,*值*"

#: docs/10.x/validation.md:block 494 (paragraph)
msgid "The field under validation must not be present unless the *anotherfield* field is equal to any *value*."
msgstr "除非 *另一欄位* 欄位為給定的其中一個 *值* 時，否則該驗證欄位不可存在。"

#: docs/10.x/validation.md:block 496 (header)
msgid "missing_with:*foo*,*bar*,..."
msgstr "missing_with:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 497 (paragraph)
msgid "The field under validation must not be present *only if* any of the other specified fields are present."
msgstr "**只有在** 任一指定的其他欄位存在時，該驗證欄位不可存在。"

#: docs/10.x/validation.md:block 499 (header)
msgid "missing_with_all:*foo*,*bar*,..."
msgstr "missing_with_all:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 500 (paragraph)
msgid "The field under validation must not be present *only if* all of the other specified fields are present."
msgstr "**只有在** 所有指定的其他欄位都存在時，該驗證欄位不可存在。"

#: docs/10.x/validation.md:block 502 (header)
msgid "not_in:*foo*,*bar*,..."
msgstr "not_in:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 503 (paragraph)
msgid "The field under validation must not be included in the given list of values. The `Rule::notIn` method may be used to fluently construct the rule:"
msgstr "該驗證欄位不可包含在給定的列表值中。可使用 `Rule::notIn` 方法來流暢地建立此規則："

#: docs/10.x/validation.md:block 504 (code)
msgid "use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'toppings' => [\n"
"        'required',\n"
"        Rule::notIn(['sprinkles', 'cherries']),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'toppings' => [\n"
"        'required',\n"
"        Rule::notIn(['sprinkles', 'cherries']),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 506 (header)
msgid "not_regex:*pattern*"
msgstr "not_regex:*格式*"

#: docs/10.x/validation.md:block 507 (paragraph)
msgid "The field under validation must not match the given regular expression."
msgstr "該驗證欄位不可符合給定的正規表示式 (Regular Expression)。"

#: docs/10.x/validation.md:block 508 (paragraph)
msgid "Internally, this rule uses the PHP `preg_match` function. The pattern specified should obey the same formatting required by `preg_match` and thus also include valid delimiters. For example: `'email' => 'not_regex:/^.+$/i'`."
msgstr "在這個規則內部，使用了 PHP 的 `preg_match` 函式。指定的規則必須符合 `preg_match` 所要求的格式，因此也必須包含有效的^[分隔字元](Delimiter)。例如：`'email' => 'not_regex:/^.+$/i'`。"

#: docs/10.x/validation.md:block 509 (quote)
msgid "**Warning** When using the `regex` / `not_regex` patterns, it may be necessary to specify your validation rules using an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr "**Warning** 在使用 `regex` / `not_regex` 格式時，可能會需要以變數方式來指定驗證規則，而不是使用 `|` 分隔符號。尤其是當正規表示式包含 `|` 字元時。"

#: docs/10.x/validation.md:block 511 (header)
msgid "nullable"
msgstr "nullable"

#: docs/10.x/validation.md:block 512 (paragraph)
msgid "The field under validation may be `null`."
msgstr "該驗證欄位可為 `null`。。"

#: docs/10.x/validation.md:block 514 (header)
msgid "numeric"
msgstr "numeric"

#: docs/10.x/validation.md:block 515 (paragraph)
msgid "The field under validation must be [numeric](https://www.php.net/manual/en/function.is-numeric.php)."
msgstr "該驗證欄位必須為[數字 (Numeric)](https://www.php.net/manual/en/function.is-numeric.php)。"

#: docs/10.x/validation.md:block 517 (header)
msgid "password"
msgstr "password"

#: docs/10.x/validation.md:block 518 (paragraph)
msgid "The field under validation must match the authenticated user's password."
msgstr "該驗證欄位必須符合已登入使用者的密碼。"

#: docs/10.x/validation.md:block 519 (quote)
msgid "**Warning** This rule was renamed to `current_password` with the intention of removing it in Laravel 9. Please use the [Current Password](#rule-current-password) rule instead."
msgstr "**Warning** 該驗證欄位已改名為 `current_password`，並將於 Laravel 9 中移除。請改用 [current_password](#rule-current-password) 規則代替。"

#: docs/10.x/validation.md:block 521 (header)
msgid "present"
msgstr "present"

#: docs/10.x/validation.md:block 522 (paragraph)
msgid "The field under validation must exist in the input data."
msgstr "要驗證的欄位必須存在於輸入資料中。"

#: docs/10.x/validation.md:block 524 (header)
msgid "prohibited"
msgstr "prohibited"

#: docs/10.x/validation.md:block 525 (paragraph)
msgid "The field under validation must be missing or empty. A field is \"empty\" if it meets one of the following criteria:"
msgstr "要驗證的欄位必須不存在或為空。當欄位符合下列條件時，將視該欄位為空："

#: docs/10.x/validation.md:block 527 (unordered list)
msgid "The value is `null`."
msgstr "該值為 `null`。"

#: docs/10.x/validation.md:block 527 (unordered list)
msgid "The value is an empty string."
msgstr "該值為空字串。"

#: docs/10.x/validation.md:block 527 (unordered list)
msgid "The value is an empty array or empty `Countable` object."
msgstr "該值為空陣列或空的 `Countable` 物件。"

#: docs/10.x/validation.md:block 527 (unordered list)
msgid "The value is an uploaded file with an empty path."
msgstr "該值為已上傳的檔案，並且路徑為空。"

#: docs/10.x/validation.md:block 530 (header)
msgid "prohibited_if:*anotherfield*,*value*,..."
msgstr "prohibited_if:*另一欄位*,*值*,..."

#: docs/10.x/validation.md:block 531 (paragraph)
msgid "The field under validation must be missing or empty if the *anotherfield* field is equal to any *value*. A field is \"empty\" if it meets one of the following criteria:"
msgstr "若 *另一欄位* 相符與任意的 *值*，則要驗證的欄位必須不存在或為空。當欄位滿足下列條件時，將視該欄位為空："

#: docs/10.x/validation.md:block 535 (paragraph)
msgid "If complex conditional prohibition logic is required, you may utilize the `Rule::prohibitedIf` method. This method accepts a boolean or a closure. When given a closure, the closure should return `true` or `false` to indicate if the field under validation should be prohibited:"
msgstr "若有需要使用複雜的邏輯條件來禁止欄位，可使用 `Rule::prohibitedIf` 方法。該方法接受一個布林值或閉包。傳入閉包時，該閉包應回傳 `true` 或 `false`，來判斷該驗證欄位是否要被禁止："

#: docs/10.x/validation.md:block 536 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n"
"]);\n"

#: docs/10.x/validation.md:block 538 (header)
msgid "prohibited_unless:*anotherfield*,*value*,..."
msgstr "prohibited_unless:*另一欄位*,*值*,..."

#: docs/10.x/validation.md:block 539 (paragraph)
msgid "The field under validation must be missing or empty unless the *anotherfield* field is equal to any *value*. A field is \"empty\" if it meets one of the following criteria:"
msgstr "除非 *另一欄位* 相符與任意的 *值*，否則要驗證的欄位必須不存在或為空。當欄位滿足下列條件時，將視該欄位為空："

#: docs/10.x/validation.md:block 544 (header)
msgid "prohibits:*anotherfield*,..."
msgstr "prohibits:*另一欄位*,..."

#: docs/10.x/validation.md:block 545 (paragraph)
msgid "If the field under validation is not missing or empty, all fields in *anotherfield* must be missing or empty. A field is \"empty\" if it meets one of the following criteria:"
msgstr "若該驗證欄位不存在或為空，則所有 *另一欄位* 的欄位都必須不存在或為空。當欄位滿足下列條件時，將視該欄位為「空」："

#: docs/10.x/validation.md:block 550 (header)
msgid "regex:*pattern*"
msgstr "regex:*格式*"

#: docs/10.x/validation.md:block 551 (paragraph)
msgid "The field under validation must match the given regular expression."
msgstr "該驗證欄位必須符合給定的正規表示式 (Regular Expression)。"

#: docs/10.x/validation.md:block 552 (paragraph)
msgid "Internally, this rule uses the PHP `preg_match` function. The pattern specified should obey the same formatting required by `preg_match` and thus also include valid delimiters. For example: `'email' => 'regex:/^.+@.+$/i'`."
msgstr "在這個規則內部，使用了 PHP 的 `preg_match` 函式。指定的格式必須符合 `preg_match` 所要求的格式，因此必須包含^[分隔字元](Delimiter)。如：`'email' => 'regex:/^.+@.+$/i'`。"

#: docs/10.x/validation.md:block 553 (quote)
msgid "**Warning** When using the `regex` / `not_regex` patterns, it may be necessary to specify rules in an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr "**Warning** 使用 `regex` / `not_regex` 格式時，可能有需要使用陣列方式制定規則，而不是使用 `|` 分隔字元。特別是當正規式中有包含 `|` 字元時。"

#: docs/10.x/validation.md:block 555 (header)
msgid "required"
msgstr "required"

#: docs/10.x/validation.md:block 556 (paragraph)
msgid "The field under validation must be present in the input data and not empty. A field is \"empty\" if it meets one of the following criteria:"
msgstr "該驗證欄位必須存在於數字資料中且不為空。當欄位滿足下列條件時，將視為「空」："

#: docs/10.x/validation.md:block 558 (unordered list)
msgid "The value is an uploaded file with no path."
msgstr "該值為一無路徑的已上傳檔案。"

#: docs/10.x/validation.md:block 561 (header)
msgid "required_if:*anotherfield*,*value*,..."
msgstr "required_if:*另一欄位*,*值*,..."

#: docs/10.x/validation.md:block 562 (paragraph)
msgid "The field under validation must be present and not empty if the *anotherfield* field is equal to any *value*."
msgstr "若 *另一欄位* 符合其中一個 *值* 時，該驗證欄位必須存在且不可為空。"

#: docs/10.x/validation.md:block 563 (paragraph)
msgid "If you would like to construct a more complex condition for the `required_if` rule, you may use the `Rule::requiredIf` method. This method accepts a boolean or a closure. When passed a closure, the closure should return `true` or `false` to indicate if the field under validation is required:"
msgstr "若想為 `required_if` 規則建立更複雜的條件，可使用 `Rule::requiredIf` 方法。該方法接受一個布林或閉包。傳入閉包時，該閉包應回傳 `true` 或 `false` 欄判斷該驗證欄位是否為必填 (Required)："

#: docs/10.x/validation.md:block 564 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf(fn () => $request->user()->is_admin),\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf(fn () => $request->user()->is_admin),\n"
"]);\n"

#: docs/10.x/validation.md:block 566 (header)
msgid "required_unless:*anotherfield*,*value*,..."
msgstr "required_unless:*另一欄位*,*值*,..."

#: docs/10.x/validation.md:block 567 (paragraph)
msgid "The field under validation must be present and not empty unless the *anotherfield* field is equal to any *value*. This also means *anotherfield* must be present in the request data unless *value* is `null`. If *value* is `null` (`required_unless:name,null`), the field under validation will be required unless the comparison field is `null` or the comparison field is missing from the request data."
msgstr "除非 *另一欄位* 符合其中一個 *值*，否則該驗證欄位必須存在且不可為空。這也表示，除非 *值* 為 `null`，否則 *另一欄位* 必須存在於 Request 資料中。若 *值* 為 `null` (`required_unless:name,null`)，則除非比較的欄位為 `null` 或比較的欄位不存在於 Request 資料中，否則該驗證欄位為^[必填](Required)。"

#: docs/10.x/validation.md:block 569 (header)
msgid "required_with:*foo*,*bar*,..."
msgstr "required_with:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 570 (paragraph)
msgid "The field under validation must be present and not empty *only if* any of the other specified fields are present and not empty."
msgstr "**只有在** 任意指定的其他欄位存在且不為空時，該驗證欄位必須存在且不為空。"

#: docs/10.x/validation.md:block 572 (header)
msgid "required_with_all:*foo*,*bar*,..."
msgstr "required_with_all:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 573 (paragraph)
msgid "The field under validation must be present and not empty *only if* all of the other specified fields are present and not empty."
msgstr "**只有在** 所有指定的其他欄位都存在且都不為空時，該驗證欄位必須存在且不為空。"

#: docs/10.x/validation.md:block 575 (header)
msgid "required_without:*foo*,*bar*,..."
msgstr "required_without:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 576 (paragraph)
msgid "The field under validation must be present and not empty *only when* any of the other specified fields are empty or not present."
msgstr "**只有在** 任意指定的其他欄位為空或不存在時，該驗證欄位必須存在且不為空。"

#: docs/10.x/validation.md:block 578 (header)
msgid "required_without_all:*foo*,*bar*,..."
msgstr "required_without_all:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 579 (paragraph)
msgid "The field under validation must be present and not empty *only when* all of the other specified fields are empty or not present."
msgstr "**只有在** 所有指定的其他欄位都為空或不存在時，該驗證欄位必須存在且不為空。"

#: docs/10.x/validation.md:block 581 (header)
msgid "required_array_keys:*foo*,*bar*,..."
msgstr "required_array_keys:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 582 (paragraph)
msgid "The field under validation must be an array and must contain at least the specified keys."
msgstr "The field under validation must be an array and must contain at least the specified keys."

#: docs/10.x/validation.md:block 584 (header)
msgid "same:*field*"
msgstr "same:*欄位*"

#: docs/10.x/validation.md:block 585 (paragraph)
msgid "The given *field* must match the field under validation."
msgstr "給定的 *欄位* 必須符合該驗證欄位。"

#: docs/10.x/validation.md:block 587 (header)
msgid "size:*value*"
msgstr "size:*值*"

#: docs/10.x/validation.md:block 588 (paragraph)
msgid "The field under validation must have a size matching the given *value*. For string data, *value* corresponds to the number of characters. For numeric data, *value* corresponds to a given integer value (the attribute must also have the `numeric` or `integer` rule). For an array, *size* corresponds to the `count` of the array. For files, *size* corresponds to the file size in kilobytes. Let's look at some examples:"
msgstr "該驗證值必須符合給定 *值* 的大小。若為字串資料，則 *值* 代表字元數。若為^[數字](Numeric)資料，_值_ 則對應給定的整數值 (該屬性必須同時使用 `numeric` 或 `integer` 規則)。若為陣列，*值* 對應到陣列的 `count` 結果。若為檔案，則 _size_ 對應到單位為 ^[KB](Kilobytes) 的檔案大小。來看看下列範例："

#: docs/10.x/validation.md:block 589 (code)
msgid "// Validate that a string is exactly 12 characters long...\n"
"'title' => 'size:12';\n\n"
"// Validate that a provided integer equals 10...\n"
"'seats' => 'integer|size:10';\n\n"
"// Validate that an array has exactly 5 elements...\n"
"'tags' => 'array|size:5';\n\n"
"// Validate that an uploaded file is exactly 512 kilobytes...\n"
"'image' => 'file|size:512';\n"
msgstr "// 驗證字串為恰好 12 字元長...\n"
"'title' => 'size:12';\n\n"
"// 驗證提供的整數等於 10...\n"
"'seats' => 'integer|size:10';\n\n"
"// 驗證陣列恰好有 5 個元素...\n"
"'tags' => 'array|size:5';\n\n"
"// 驗證上傳檔案的大小為 512 KB...\n"
"'image' => 'file|size:512';\n"

#: docs/10.x/validation.md:block 591 (header)
msgid "starts_with:*foo*,*bar*,..."
msgstr "starts_with:*foo*,*bar*,..."

#: docs/10.x/validation.md:block 592 (paragraph)
msgid "The field under validation must start with one of the given values."
msgstr "該驗證欄位必須以其中一個給定的值開頭。"

#: docs/10.x/validation.md:block 594 (header)
msgid "string"
msgstr "string"

#: docs/10.x/validation.md:block 595 (paragraph)
msgid "The field under validation must be a string. If you would like to allow the field to also be `null`, you should assign the `nullable` rule to the field."
msgstr "該驗證欄位必須為一字串。若想允許該欄位為 `null`，請為該欄位指定 `nullable` 規則。"

#: docs/10.x/validation.md:block 597 (header)
msgid "timezone"
msgstr "timezone"

#: docs/10.x/validation.md:block 598 (paragraph)
msgid "The field under validation must be a valid timezone identifier according to the `timezone_identifiers_list` PHP function."
msgstr "該欄位必須為 `timezone_identifiers_list` PHP 函式中的有效^[時區識別子](Timezone Identifier)。"

#: docs/10.x/validation.md:block 600 (header)
msgid "unique:*table*,*column*"
msgstr "unique:*資料表*,*欄位*"

#: docs/10.x/validation.md:block 601 (paragraph)
msgid "The field under validation must not exist within the given database table."
msgstr "該驗證欄位必須不存在於給定資料庫資料表中。"

#: docs/10.x/validation.md:block 602 (paragraph)
msgid "**Specifying A Custom Table / Column Name:**"
msgstr "**指定自訂的資料表 / 欄位名稱：**"

#: docs/10.x/validation.md:block 604 (code)
msgid "'email' => 'unique:App\\Models\\User,email_address'\n"
msgstr "'email' => 'unique:App\\Models\\User,email_address'\n"

#: docs/10.x/validation.md:block 605 (paragraph)
msgid "The `column` option may be used to specify the field's corresponding database column. If the `column` option is not specified, the name of the field under validation will be used."
msgstr "可使用 `欄位` 選項來指定該欄位對應的資料庫欄位。若未指定 `欄位` 選項，則會使用該驗證欄位的名稱。"

#: docs/10.x/validation.md:block 606 (code)
msgid "'email' => 'unique:users,email_address'\n"
msgstr "'email' => 'unique:users,email_address'\n"

#: docs/10.x/validation.md:block 607 (paragraph)
msgid "**Specifying A Custom Database Connection**"
msgstr "**指定自訂資料庫連線**"

#: docs/10.x/validation.md:block 608 (paragraph)
msgid "Occasionally, you may need to set a custom connection for database queries made by the Validator. To accomplish this, you may prepend the connection name to the table name:"
msgstr "有時候，我們可能需要讓 Validator 在做資料庫查詢時使用自訂的資料庫連線。為此，只需再資料表名稱前方加上連線名稱即可："

#: docs/10.x/validation.md:block 609 (code)
msgid "'email' => 'unique:connection.users,email_address'\n"
msgstr "'email' => 'unique:connection.users,email_address'\n"

#: docs/10.x/validation.md:block 610 (paragraph)
msgid "**Forcing A Unique Rule To Ignore A Given ID:**"
msgstr "**強制 Unique 規則忽略給定的 ID：**"

#: docs/10.x/validation.md:block 611 (paragraph)
msgid "Sometimes, you may wish to ignore a given ID during unique validation. For example, consider an \"update profile\" screen that includes the user's name, email address, and location. You will probably want to verify that the email address is unique. However, if the user only changes the name field and not the email field, you do not want a validation error to be thrown because the user is already the owner of the email address in question."
msgstr "有時候我們可能會想在做 Unique 驗證時忽略給定的 ID。舉例來說，假設我們在「更新個人檔案」頁面，其中包含使用者名稱、電子郵件、位置。我們可能會想驗證這個 E-Mail 是否不重複。不過，若使用者只更改姓名欄位而未更改 E-Mail 欄位，這時因為該使用者已經是這個 E-Mail 位址的擁有者了，所以我們就不會想讓再讓 Validator 跑出驗證錯誤。"

#: docs/10.x/validation.md:block 612 (paragraph)
msgid "To instruct the validator to ignore the user's ID, we'll use the `Rule` class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the `|` character to delimit the rules:"
msgstr "若想讓 Validator 忽略該使用者的 ID，我們會需要使用 `Rule` 類別來流暢地定義該規則。在這個例子中，我們還會使用陣列來定義驗證規則，而不是使用 `|` 字元來區分各個規則："

#: docs/10.x/validation.md:block 613 (code)
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::unique('users')->ignore($user->id),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::unique('users')->ignore($user->id),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 614 (quote)
msgid "**Warning** You should never pass any user controlled request input into the `ignore` method. Instead, you should only pass a system generated unique ID such as an auto-incrementing ID or UUID from an Eloquent model instance. Otherwise, your application will be vulnerable to an SQL injection attack."
msgstr "**Warning** 絕對不要傳入任何由使用者控制的 Request 輸入給 `ignore` 方法。請只傳入 Eloquent Model 實體中由系統產生的不重複 ID，如^[自動遞增 ID](Auto-Incrementing ID) 或 UUID。若傳入了使用者控制的資料，可能會讓你的程式發生如 ^[SQL 注入](SQL Injection)等弱點。"

#: docs/10.x/validation.md:block 615 (paragraph)
msgid "Instead of passing the model key's value to the `ignore` method, you may also pass the entire model instance. Laravel will automatically extract the key from the model:"
msgstr "除了直接將 Model 的索引鍵值傳給 `ignore` 方法外，還可以傳入整個 Model 實體。Laravel 會自動從 Model 中取出索引鍵："

#: docs/10.x/validation.md:block 616 (code)
msgid "Rule::unique('users')->ignore($user)\n"
msgstr "Rule::unique('users')->ignore($user)\n"

#: docs/10.x/validation.md:block 617 (paragraph)
msgid "If your table uses a primary key column name other than `id`, you may specify the name of the column when calling the `ignore` method:"
msgstr "若你的資料表使用 `id` 以外的欄位名稱作為主索引鍵，可在呼叫 `ignore` 方法時指定欄位名稱："

#: docs/10.x/validation.md:block 618 (code)
msgid "Rule::unique('users')->ignore($user->id, 'user_id')\n"
msgstr "Rule::unique('users')->ignore($user->id, 'user_id')\n"

#: docs/10.x/validation.md:block 619 (paragraph)
msgid "By default, the `unique` rule will check the uniqueness of the column matching the name of the attribute being validated. However, you may pass a different column name as the second argument to the `unique` method:"
msgstr "預設情況下，`unique` 規則會檢查欄位名稱符合欲驗證屬性名稱是否不重複。不過，也可以傳入不同的欄位名稱作為第二個引數給 `unique` 方法："

#: docs/10.x/validation.md:block 620 (code)
msgid "Rule::unique('users', 'email_address')->ignore($user->id)\n"
msgstr "Rule::unique('users', 'email_address')->ignore($user->id)\n"

#: docs/10.x/validation.md:block 621 (paragraph)
msgid "**Adding Additional Where Clauses:**"
msgstr "**新增額外的 Where 子句：**"

#: docs/10.x/validation.md:block 622 (paragraph)
msgid "You may specify additional query conditions by customizing the query using the `where` method. For example, let's add a query condition that scopes the query to only search records that have an `account_id` column value of `1`:"
msgstr "可以使用 `where` 方法來自訂查詢，以指定額外的查詢條件。舉例來說，我們來新增一個查詢條件，將該查詢限制在只搜尋 `account_id` 為 `1` 的紀錄："

#: docs/10.x/validation.md:block 623 (code)
msgid "'email' => Rule::unique('users')->where(fn (Builder $query) => $query->where('account_id', 1))\n"
msgstr "'email' => Rule::unique('users')->where(fn (Builder $query) => $query->where('account_id', 1))\n"

#: docs/10.x/validation.md:block 625 (header)
msgid "uppercase"
msgstr "uppercase"

#: docs/10.x/validation.md:block 626 (paragraph)
msgid "The field under validation must be uppercase."
msgstr "該驗證欄位必須為大寫字母。"

#: docs/10.x/validation.md:block 628 (header)
msgid "url"
msgstr "url"

#: docs/10.x/validation.md:block 629 (paragraph)
msgid "The field under validation must be a valid URL."
msgstr "該驗證欄位必須為一有效的網址。"

#: docs/10.x/validation.md:block 631 (header)
msgid "ulid"
msgstr "ulid"

#: docs/10.x/validation.md:block 632 (paragraph)
msgid "The field under validation must be a valid [Universally Unique Lexicographically Sortable Identifier](https://github.com/ulid/spec) (ULID)."
msgstr "驗證的欄位必須為有效的 [ULID](https://github.com/ulid/spec) (Universally Unique Lexicographically Sortable Identifier)。"

#: docs/10.x/validation.md:block 634 (header)
msgid "uuid"
msgstr "uuid"

#: docs/10.x/validation.md:block 635 (paragraph)
msgid "The field under validation must be a valid RFC 4122 (version 1, 3, 4, or 5) universally unique identifier (UUID)."
msgstr "該驗證欄位必須為有效的 RFC 4122 (Version 1, 3, 4, 或 5) 之^[通用唯一識別碼](Universally Unique Identifier) (UUID)。"

#: docs/10.x/validation.md:block 637 (header)
msgid "Conditionally Adding Rules"
msgstr "有條件地新增規則"

#: docs/10.x/validation.md:block 639 (header)
msgid "Skipping Validation When Fields Have Certain Values"
msgstr "當欄位符合特定值時，略過驗證"

#: docs/10.x/validation.md:block 640 (paragraph)
msgid "You may occasionally wish to not validate a given field if another field has a given value. You may accomplish this using the `exclude_if` validation rule. In this example, the `appointment_date` and `doctor_name` fields will not be validated if the `has_appointment` field has a value of `false`:"
msgstr "有時候我們可能會想只在某個欄位為特定值時，才驗證另一個欄位。為此，可以使用 `exclude_if` 驗證規則。在這個例子中，除非 `has_appointment` 欄位為 `false`，否則將不會驗證 `appointment_date` 與 `doctor_name` 欄位："

#: docs/10.x/validation.md:block 641 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($data, [\n"
"    'has_appointment' => 'required|boolean',\n"
"    'appointment_date' => 'exclude_if:has_appointment,false|required|date',\n"
"    'doctor_name' => 'exclude_if:has_appointment,false|required|string',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($data, [\n"
"    'has_appointment' => 'required|boolean',\n"
"    'appointment_date' => 'exclude_if:has_appointment,false|required|date',\n"
"    'doctor_name' => 'exclude_if:has_appointment,false|required|string',\n"
"]);\n"

#: docs/10.x/validation.md:block 642 (paragraph)
msgid "Alternatively, you may use the `exclude_unless` rule to not validate a given field unless another field has a given value:"
msgstr "或者，也可以使用 `exclude_unless` 規則來在另一個欄位不符合給定值時驗證給定欄位："

#: docs/10.x/validation.md:block 643 (code)
msgid "$validator = Validator::make($data, [\n"
"    'has_appointment' => 'required|boolean',\n"
"    'appointment_date' => 'exclude_unless:has_appointment,true|required|date',\n"
"    'doctor_name' => 'exclude_unless:has_appointment,true|required|string',\n"
"]);\n"
msgstr "$validator = Validator::make($data, [\n"
"    'has_appointment' => 'required|boolean',\n"
"    'appointment_date' => 'exclude_unless:has_appointment,true|required|date',\n"
"    'doctor_name' => 'exclude_unless:has_appointment,true|required|string',\n"
"]);\n"

#: docs/10.x/validation.md:block 645 (header)
msgid "Validating When Present"
msgstr "存在時驗證"

#: docs/10.x/validation.md:block 646 (paragraph)
msgid "In some situations, you may wish to run validation checks against a field **only** if that field is present in the data being validated. To quickly accomplish this, add the `sometimes` rule to your rule list:"
msgstr "在某些情況下，我們會需要 **只在** 某個欄位存在於資料中，才去驗證該欄位。要快速搞定這個狀況，只需要在規則列表中加上 `sometimes` 即可："

#: docs/10.x/validation.md:block 647 (code)
msgid "$v = Validator::make($data, [\n"
"    'email' => 'sometimes|required|email',\n"
"]);\n"
msgstr "$v = Validator::make($data, [\n"
"    'email' => 'sometimes|required|email',\n"
"]);\n"

#: docs/10.x/validation.md:block 648 (paragraph)
msgid "In the example above, the `email` field will only be validated if it is present in the `$data` array."
msgstr "在上述例子中，只有在 `$data` 陣列中有 `email` 欄位時，才會驗證該欄位。"

#: docs/10.x/validation.md:block 649 (quote)
msgid "**Note** If you are attempting to validate a field that should always be present but may be empty, check out [this note on optional fields](#a-note-on-optional-fields)."
msgstr "**Note** 若想驗證某個欄位必須存在，但可為空，請參考[這個關於可選欄位的備註](#a-note-on-optional-fields)。"

#: docs/10.x/validation.md:block 651 (header)
msgid "Complex Conditional Validation"
msgstr "複雜的條件式驗證"

#: docs/10.x/validation.md:block 652 (paragraph)
msgid "Sometimes you may wish to add validation rules based on more complex conditional logic. For example, you may wish to require a given field only if another field has a greater value than 100. Or, you may need two fields to have a given value only when another field is present. Adding these validation rules doesn't have to be a pain. First, create a `Validator` instance with your *static rules* that never change:"
msgstr "有時候，我們可能會想以更複雜的條件邏輯來新增驗證規則。舉例來說，我們可能會想在另一個欄位大於 100 時，才要求給定欄位為必填。或者，我們可能需要在某個欄位存在時才驗證某兩個欄位是否有給定的值。要新增這類規則不會很難。首先，先使用不會變動的 **靜態規則** 來建立 `Validator` 實體："

#: docs/10.x/validation.md:block 653 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'email' => 'required|email',\n"
"    'games' => 'required|numeric',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'email' => 'required|email',\n"
"    'games' => 'required|numeric',\n"
"]);\n"

#: docs/10.x/validation.md:block 654 (paragraph)
msgid "Let's assume our web application is for game collectors. If a game collector registers with our application and they own more than 100 games, we want them to explain why they own so many games. For example, perhaps they run a game resale shop, or maybe they just enjoy collecting games. To conditionally add this requirement, we can use the `sometimes` method on the `Validator` instance."
msgstr "先假設我們在做一個給遊戲收藏家用的網站。假設某個遊戲收藏家註冊了這個網站，且該收藏家擁有超過 100 款遊戲，我們就想問問這個收藏家位什麼擁有這麼多遊戲。舉例來說，這個收藏家可能在經營二手遊戲店、或者這個收藏家只是很喜歡收藏遊戲而已。若要有條件地新增這個要求，可以在 `Validator` 實體上使用 `sometimes` 方法。"

#: docs/10.x/validation.md:block 655 (code)
msgid "use Illuminate\\Support\\Fluent;\n\n"
"$validator->sometimes('reason', 'required|max:500', function (Fluent $input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr "use Illuminate\\Support\\Fluent;\n\n"
"$validator->sometimes('reason', 'required|max:500', function (Fluent $input) {\n"
"    return $input->games >= 100;\n"
"});\n"

#: docs/10.x/validation.md:block 656 (paragraph)
msgid "The first argument passed to the `sometimes` method is the name of the field we are conditionally validating. The second argument is a list of the rules we want to add. If the closure passed as the third argument returns `true`, the rules will be added. This method makes it a breeze to build complex conditional validations. You may even add conditional validations for several fields at once:"
msgstr "傳入 `sometimes` 方法的引數是我們要條件式驗證的欄位名稱。第二個引數是我們要新增的規則列表。若第三個引數的閉包回傳 `true`，就會新增這些規則。這麼一來，我們就能建立更複雜的條件式驗證了。我們還能一次位多個欄位新增條件式驗證："

#: docs/10.x/validation.md:block 657 (code)
msgid "$validator->sometimes(['reason', 'cost'], 'required', function (Fluent $input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr "$validator->sometimes(['reason', 'cost'], 'required', function (Fluent $input) {\n"
"    return $input->games >= 100;\n"
"});\n"

#: docs/10.x/validation.md:block 658 (quote)
msgid "**Note** The `$input` parameter passed to your closure will be an instance of `Illuminate\\Support\\Fluent` and may be used to access your input and files under validation."
msgstr "**Note** 傳給閉包的 `$input` 引數會是 `Illuminate\\Support\\Fluent` 的實體。且可用來存取所有正在驗證的輸入與檔案。"

#: docs/10.x/validation.md:block 660 (header)
msgid "Complex Conditional Array Validation"
msgstr "複雜的條件式陣列驗證"

#: docs/10.x/validation.md:block 661 (paragraph)
msgid "Sometimes you may want to validate a field based on another field in the same nested array whose index you do not know. In these situations, you may allow your closure to receive a second argument which will be the current individual item in the array being validated:"
msgstr "有時候，我們可能會想依據同一個巢狀陣列中的另一個欄位來驗證某個欄位，但同時我們又不知道這個巢狀陣列的索引鍵。在這種情況下，我們可以在閉包中接收第二個引數，該引數位為目前在驗證的陣列中目前的項目："

#: docs/10.x/validation.md:block 662 (code)
msgid "$input = [\n"
"    'channels' => [\n"
"        [\n"
"            'type' => 'email',\n"
"            'address' => 'abigail@example.com',\n"
"        ],\n"
"        [\n"
"            'type' => 'url',\n"
"            'address' => 'https://example.com',\n"
"        ],\n"
"    ],\n"
"];\n\n"
"$validator->sometimes('channels.*.address', 'email', function (Fluent $input, Fluent $item) {\n"
"    return $item->type === 'email';\n"
"});\n\n"
"$validator->sometimes('channels.*.address', 'url', function (Fluent $input, Fluent $item) {\n"
"    return $item->type !== 'email';\n"
"});\n"
msgstr "$input = [\n"
"    'channels' => [\n"
"        [\n"
"            'type' => 'email',\n"
"            'address' => 'abigail@example.com',\n"
"        ],\n"
"        [\n"
"            'type' => 'url',\n"
"            'address' => 'https://example.com',\n"
"        ],\n"
"    ],\n"
"];\n\n"
"$validator->sometimes('channels.*.address', 'email', function (Fluent $input, Fluent $item) {\n"
"    return $item->type === 'email';\n"
"});\n\n"
"$validator->sometimes('channels.*.address', 'url', function (Fluent $input, Fluent $item) {\n"
"    return $item->type !== 'email';\n"
"});\n"

#: docs/10.x/validation.md:block 663 (paragraph)
msgid "Like the `$input` parameter passed to the closure, the `$item` parameter is an instance of `Illuminate\\Support\\Fluent` when the attribute data is an array; otherwise, it is a string."
msgstr "與傳給閉包的 `$input` 類似，當屬性資料是陣列時，`$item` 參數也會是 `Illuminate\\Support\\Fluent` 的實體。若非陣列，則會是字串。"

#: docs/10.x/validation.md:block 665 (header)
msgid "Validating Arrays"
msgstr "驗證陣列"

#: docs/10.x/validation.md:block 666 (paragraph)
msgid "As discussed in the [`array` validation rule documentation](#rule-array), the `array` rule accepts a list of allowed array keys. If any additional keys are present within the array, validation will fail:"
msgstr "與 [`array` 驗證規則說明文件](#rule-array)中討論過的類似，`array` 規則接收一個允許的陣列索引鍵列表。若該陣列中有出現其他的索引鍵，會驗證失敗："

#: docs/10.x/validation.md:block 667 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$input = [\n"
"    'user' => [\n"
"        'name' => 'Taylor Otwell',\n"
"        'username' => 'taylorotwell',\n"
"        'admin' => true,\n"
"    ],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'user' => 'array:username,locale',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$input = [\n"
"    'user' => [\n"
"        'name' => 'Taylor Otwell',\n"
"        'username' => 'taylorotwell',\n"
"        'admin' => true,\n"
"    ],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'user' => 'array:username,locale',\n"
"]);\n"

#: docs/10.x/validation.md:block 668 (paragraph)
msgid "In general, you should always specify the array keys that are allowed to be present within your array. Otherwise, the validator's `validate` and `validated` methods will return all of the validated data, including the array and all of its keys, even if those keys were not validated by other nested array validation rules."
msgstr "一般來說，請總是指定陣列中可出現的索引鍵。如未指定可出現的索引鍵，即使這些索引鍵未經過其他巢狀陣列驗證規則驗證，Validator 的 `validate` 方法與 `validated` 方法回傳的所有已驗證中資料，還是會包含該陣列與其所有的索引鍵。"

#: docs/10.x/validation.md:block 670 (header)
msgid "Validating Nested Array Input"
msgstr "驗證巢狀的陣列輸入"

#: docs/10.x/validation.md:block 671 (paragraph)
msgid "Validating nested array based form input fields doesn't have to be a pain. You may use \"dot notation\" to validate attributes within an array. For example, if the incoming HTTP request contains a `photos[profile]` field, you may validate it like so:"
msgstr "依據表單輸入欄位來驗證巢狀的陣列並不會很難。我們可以使用「^[『點』標記法](Dot Natation)」來在陣列中驗證屬性。舉例來說，若連入的 HTTP Request 包含了 `photos[profile]` 欄位，我們可以像這樣驗證該欄位："

#: docs/10.x/validation.md:block 672 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'photos.profile' => 'required|image',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'photos.profile' => 'required|image',\n"
"]);\n"

#: docs/10.x/validation.md:block 673 (paragraph)
msgid "You may also validate each element of an array. For example, to validate that each email in a given array input field is unique, you may do the following:"
msgstr "也可以驗證陣列中的各個元素。舉例來說，若要驗證給定陣列輸入欄位中的各個 E-Mail 是否不重複，可以這麼做："

#: docs/10.x/validation.md:block 674 (code)
msgid "$validator = Validator::make($request->all(), [\n"
"    'person.*.email' => 'email|unique:users',\n"
"    'person.*.first_name' => 'required_with:person.*.last_name',\n"
"]);\n"
msgstr "$validator = Validator::make($request->all(), [\n"
"    'person.*.email' => 'email|unique:users',\n"
"    'person.*.first_name' => 'required_with:person.*.last_name',\n"
"]);\n"

#: docs/10.x/validation.md:block 675 (paragraph)
msgid "Likewise, you may use the `*` character when specifying [custom validation messages in your language files](#custom-messages-for-specific-attributes), making it a breeze to use a single validation message for array based fields:"
msgstr "類似的，[在語系檔中自訂驗證訊息](#custom-messages-for-specific-attributes)時，也可以使用 `*` 字元，讓我們只需要單一驗證訊息就能輕鬆地在陣列欄位上使用："

#: docs/10.x/validation.md:block 676 (code)
msgid "'custom' => [\n"
"    'person.*.email' => [\n"
"        'unique' => 'Each person must have a unique email address',\n"
"    ]\n"
"],\n"
msgstr "'custom' => [\n"
"    'person.*.email' => [\n"
"        'unique' => 'Each person must have a unique email address',\n"
"    ]\n"
"],\n"

#: docs/10.x/validation.md:block 678 (header)
msgid "Accessing Nested Array Data"
msgstr "存取巢狀陣列資料"

#: docs/10.x/validation.md:block 679 (paragraph)
msgid "Sometimes you may need to access the value for a given nested array element when assigning validation rules to the attribute. You may accomplish this using the `Rule::forEach` method. The `forEach` method accepts a closure that will be invoked for each iteration of the array attribute under validation and will receive the attribute's value and explicit, fully-expanded attribute name. The closure should return an array of rules to assign to the array element:"
msgstr "有時候，在為屬性指派認證規則時，我們可能會想存取給定巢狀陣列項目的值。為此，我們可以使用 `Rule::forEach` 方法來達成。`forEach` 方法接受一個閉包。在認證時，每次迭代陣列屬性都會叫用一次這個閉包，且該閉包會收到屬性值與完整展開的屬性名稱。該閉包應回傳一個陣列，其中包含要指派給陣列元素的認證規則："

#: docs/10.x/validation.md:block 680 (code)
msgid "use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function (string|null $value, string $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"
msgstr "use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function (string|null $value, string $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"

#: docs/10.x/validation.md:block 682 (header)
msgid "Error Message Indexes & Positions"
msgstr "錯誤訊息的索引與位置"

#: docs/10.x/validation.md:block 683 (paragraph)
msgid "When validating arrays, you may want to reference the index or position of a particular item that failed validation within the error message displayed by your application. To accomplish this, you may include the `:index` (starts from `0`) and `:position` (starts from `1`) placeholders within your [custom validation message](#manual-customizing-the-error-messages):"
msgstr "在驗證陣列時，有時候我們可能會想在顯示錯誤訊息時參照特定項目的索引或位置。若要參照驗證失敗項目的索引或位置，可在[自定驗證訊息](#manual-customizing-the-error-messages)中使用 `:index` (從 0 開始) 與 `:position` (從 1 開始) 預留位置："

#: docs/10.x/validation.md:block 684 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$input = [\n"
"    'photos' => [\n"
"        [\n"
"            'name' => 'BeachVacation.jpg',\n"
"            'description' => 'A photo of my beach vacation!',\n"
"        ],\n"
"        [\n"
"            'name' => 'GrandCanyon.jpg',\n"
"            'description' => '',\n"
"        ],\n"
"    ],\n"
"];\n\n"
"Validator::validate($input, [\n"
"    'photos.*.description' => 'required',\n"
"], [\n"
"    'photos.*.description.required' => 'Please describe photo #:position.',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$input = [\n"
"    'photos' => [\n"
"        [\n"
"            'name' => 'BeachVacation.jpg',\n"
"            'description' => 'A photo of my beach vacation!',\n"
"        ],\n"
"        [\n"
"            'name' => 'GrandCanyon.jpg',\n"
"            'description' => '',\n"
"        ],\n"
"    ],\n"
"];\n\n"
"Validator::validate($input, [\n"
"    'photos.*.description' => 'required',\n"
"], [\n"
"    'photos.*.description.required' => 'Please describe photo #:position.',\n"
"]);\n"

#: docs/10.x/validation.md:block 685 (paragraph)
msgid "Given the example above, validation will fail and the user will be presented with the following error of *\"Please describe photo #2.\"*"
msgstr "在上述的範例中，會驗證失敗，而使用者會看到這個錯誤訊息：「**Please describe photo #2.**」"

#: docs/10.x/validation.md:block 687 (header)
msgid "Validating Files"
msgstr "驗證檔案"

#: docs/10.x/validation.md:block 688 (paragraph)
msgid "Laravel provides a variety of validation rules that may be used to validate uploaded files, such as `mimes`, `image`, `min`, and `max`. While you are free to specify these rules individually when validating files, Laravel also offers a fluent file validation rule builder that you may find convenient:"
msgstr "Laravel 提供了多種驗證規則，可用來驗證已上傳的檔案，如 `mimes`、`image`、`min`、`max`。雖然我們也可以自行個別指定這些規則，但 Laravel 還提供了一種能流暢建立檔案驗證規則的建構程式："

#: docs/10.x/validation.md:block 689 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\File;\n\n"
"Validator::validate($input, [\n"
"    'attachment' => [\n"
"        'required',\n"
"        File::types(['mp3', 'wav'])\n"
"            ->min(1024)\n"
"            ->max(12 * 1024),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\File;\n\n"
"Validator::validate($input, [\n"
"    'attachment' => [\n"
"        'required',\n"
"        File::types(['mp3', 'wav'])\n"
"            ->min(1024)\n"
"            ->max(12 * 1024),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 690 (paragraph)
msgid "If your application accepts images uploaded by your users, you may use the `File` rule's `image` constructor method to indicate that the uploaded file should be an image. In addition, the `dimensions` rule may be used to limit the dimensions of the image:"
msgstr "若專案接受使用者上傳圖片，則可使用 `File` 規則的 `image` Constructor 方法來指定這個上傳的檔案應為圖片。此外，使用 `dimensions` 規則可用來限制圖片的長寬："

#: docs/10.x/validation.md:block 691 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\File;\n\n"
"Validator::validate($input, [\n"
"    'photo' => [\n"
"        'required',\n"
"        File::image()\n"
"            ->min(1024)\n"
"            ->max(12 * 1024)\n"
"            ->dimensions(Rule::dimensions()->maxWidth(1000)->maxHeight(500)),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\File;\n\n"
"Validator::validate($input, [\n"
"    'photo' => [\n"
"        'required',\n"
"        File::image()\n"
"            ->min(1024)\n"
"            ->max(12 * 1024)\n"
"            ->dimensions(Rule::dimensions()->maxWidth(1000)->maxHeight(500)),\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 692 (quote)
msgid "**Note** More information regarding validating image dimensions may be found in the [dimension rule documentation](#rule-dimensions)."
msgstr "**Note** 更多有關驗證圖片長寬的資訊，請參考 [dimension 規則的說明文件](#rule-dimensions)。"

#: docs/10.x/validation.md:block 694 (header)
msgid "File Types"
msgstr "檔案類型"

#: docs/10.x/validation.md:block 695 (paragraph)
msgid "Even though you only need to specify the extensions when invoking the `types` method, this method actually validates the MIME type of the file by reading the file's contents and guessing its MIME type. A full listing of MIME types and their corresponding extensions may be found at the following location:"
msgstr "雖然在叫用 `types` 方法時只需要指定副檔名，但該方法其實會實際讀取檔案的內容名推測其 MIME 型別，然後再驗證該檔案實際的 MIME 型別。完整的 MIME 型別列表，以及這些 MIME 對應的副檔名可在下列位置中找到："

#: docs/10.x/validation.md:block 698 (header)
msgid "Validating Passwords"
msgstr "驗證密碼"

#: docs/10.x/validation.md:block 699 (paragraph)
msgid "To ensure that passwords have an adequate level of complexity, you may use Laravel's `Password` rule object:"
msgstr "若要確定輸入的密碼有足夠的複雜度，可使用 Laravel 的 `Password` 規則物件："

#: docs/10.x/validation.md:block 700 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\Password;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'password' => ['required', 'confirmed', Password::min(8)],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rules\\Password;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'password' => ['required', 'confirmed', Password::min(8)],\n"
"]);\n"

#: docs/10.x/validation.md:block 701 (paragraph)
msgid "The `Password` rule object allows you to easily customize the password complexity requirements for your application, such as specifying that passwords require at least one letter, number, symbol, or characters with mixed casing:"
msgstr "`Password` 規則物件能讓我們輕鬆地為我們的專案自訂密碼複雜度的要求。例如：我們可以指定密碼必須至少要有一個字母、一個數字、一個符號、或是有大小寫混合的字元："

#: docs/10.x/validation.md:block 702 (code)
msgid "// Require at least 8 characters...\n"
"Password::min(8)\n\n"
"// Require at least one letter...\n"
"Password::min(8)->letters()\n\n"
"// Require at least one uppercase and one lowercase letter...\n"
"Password::min(8)->mixedCase()\n\n"
"// Require at least one number...\n"
"Password::min(8)->numbers()\n\n"
"// Require at least one symbol...\n"
"Password::min(8)->symbols()\n"
msgstr "// 至少要有 8 字元...\n"
"Password::min(8)\n\n"
"// 至少要有 1 個英文字母...\n"
"Password::min(8)->letters()\n\n"
"// 至少要有一個大寫與一個小寫字母...\n"
"Password::min(8)->mixedCase()\n\n"
"// 至少要有 1 個數字...\n"
"Password::min(8)->numbers()\n\n"
"// 至少要有 1 個符號...\n"
"Password::min(8)->symbols()\n"

#: docs/10.x/validation.md:block 703 (paragraph)
msgid "In addition, you may ensure that a password has not been compromised in a public password data breach leak using the `uncompromised` method:"
msgstr "此外，還可以使用 `uncompromised` 方法來確保該密碼在公開的密碼^[資料外洩](Data Breach)中未曾被入侵："

#: docs/10.x/validation.md:block 704 (code)
msgid "Password::min(8)->uncompromised()\n"
msgstr "Password::min(8)->uncompromised()\n"

#: docs/10.x/validation.md:block 705 (paragraph)
msgid "Internally, the `Password` rule object uses the [k-Anonymity](https://en.wikipedia.org/wiki/K-anonymity) model to determine if a password has been leaked via the [haveibeenpwned.com](https://haveibeenpwned.com) service without sacrificing the user's privacy or security."
msgstr "在這個方法內部，`Password` 規則物件會使用 [k-Anonymity](https://en.wikipedia.org/wiki/K-anonymity) 模型來在 [haveibeenpwned.com](https://haveibeenpwned.com) 上以不犧牲使用者隱私或安全性的前提判斷密碼是否有被外洩。"

#: docs/10.x/validation.md:block 706 (paragraph)
msgid "By default, if a password appears at least once in a data leak, it will be considered compromised. You can customize this threshold using the first argument of the `uncompromised` method:"
msgstr "預設情況下，若密碼出現在只少一個資料外洩中，就會被當作^[已被入侵](Compromised)。我們可以使用 `uncompromised` 方法的第一個引述來修改這個門檻："

#: docs/10.x/validation.md:block 707 (code)
msgid "// Ensure the password appears less than 3 times in the same data leak...\n"
"Password::min(8)->uncompromised(3);\n"
msgstr "// 確認密碼在同一個資料外洩中只出現少於 3 次...\n"
"Password::min(8)->uncompromised(3);\n"

#: docs/10.x/validation.md:block 708 (paragraph)
msgid "Of course, you may chain all the methods in the examples above:"
msgstr "當然，我們還可以將上述的例子中所有的方法都串在一起："

#: docs/10.x/validation.md:block 709 (code)
msgid "Password::min(8)\n"
"    ->letters()\n"
"    ->mixedCase()\n"
"    ->numbers()\n"
"    ->symbols()\n"
"    ->uncompromised()\n"
msgstr "Password::min(8)\n"
"    ->letters()\n"
"    ->mixedCase()\n"
"    ->numbers()\n"
"    ->symbols()\n"
"    ->uncompromised()\n"

#: docs/10.x/validation.md:block 711 (header)
msgid "Defining Default Password Rules"
msgstr "定義預設的密碼規則"

#: docs/10.x/validation.md:block 712 (paragraph)
msgid "You may find it convenient to specify the default validation rules for passwords in a single location of your application. You can easily accomplish this using the `Password::defaults` method, which accepts a closure. The closure given to the `defaults` method should return the default configuration of the Password rule. Typically, the `defaults` rule should be called within the `boot` method of one of your application's service providers:"
msgstr "對一些專案來說，在程式中的單一位置內指定預設的密碼驗證規則可能會比較方便。只要使用 `Password::defaults` 方法就可以輕鬆達成。該方法接受一個閉包，該閉包應回傳預設的 Password 規則設定。一般來說，應在專案內其中一個 Service Provider 中 `boot` 方法內呼叫這個 `defaults` 方法："

#: docs/10.x/validation.md:block 713 (code)
msgid "use Illuminate\\Validation\\Rules\\Password;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Password::defaults(function () {\n"
"        $rule = Password::min(8);\n\n"
"        return $this->app->isProduction()\n"
"                    ? $rule->mixedCase()->uncompromised()\n"
"                    : $rule;\n"
"    });\n"
"}\n"
msgstr "use Illuminate\\Validation\\Rules\\Password;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Password::defaults(function () {\n"
"        $rule = Password::min(8);\n\n"
"        return $this->app->isProduction()\n"
"                    ? $rule->mixedCase()->uncompromised()\n"
"                    : $rule;\n"
"    });\n"
"}\n"

#: docs/10.x/validation.md:block 714 (paragraph)
msgid "Then, when you would like to apply the default rules to a particular password undergoing validation, you may invoke the `defaults` method with no arguments:"
msgstr "接著，若要在某個密碼驗證中套用預設規則，只需要呼叫 `defaults` 方法即可。不需帶任何參數："

#: docs/10.x/validation.md:block 715 (code)
msgid "'password' => ['required', Password::defaults()],\n"
msgstr "'password' => ['required', Password::defaults()],\n"

#: docs/10.x/validation.md:block 716 (paragraph)
msgid "Occasionally, you may want to attach additional validation rules to your default password validation rules. You may use the `rules` method to accomplish this:"
msgstr "有時候，除了預設的密碼驗證規則外，我們可能會想附加一些額外的規則上去。為此，可以使用 `rules` 方法："

#: docs/10.x/validation.md:block 717 (code)
msgid "use App\\Rules\\ZxcvbnRule;\n\n"
"Password::defaults(function () {\n"
"    $rule = Password::min(8)->rules([new ZxcvbnRule]);\n\n"
"    // ...\n"
"});\n"
msgstr "use App\\Rules\\ZxcvbnRule;\n\n"
"Password::defaults(function () {\n"
"    $rule = Password::min(8)->rules([new ZxcvbnRule]);\n\n"
"    // ...\n"
"});\n"

#: docs/10.x/validation.md:block 719 (header)
msgid "Custom Validation Rules"
msgstr "自訂驗證規則"

#: docs/10.x/validation.md:block 721 (header)
msgid "Using Rule Objects"
msgstr "使用規則物件"

#: docs/10.x/validation.md:block 722 (paragraph)
msgid "Laravel provides a variety of helpful validation rules; however, you may wish to specify some of your own. One method of registering custom validation rules is using rule objects. To generate a new rule object, you may use the `make:rule` Artisan command. Let's use this command to generate a rule that verifies a string is uppercase. Laravel will place the new rule in the `app/Rules` directory. If this directory does not exist, Laravel will create it when you execute the Artisan command to create your rule:"
msgstr "Laravel 提供了多種實用的驗證規則。不過，有時候我們可能會想自訂一個規則。要註冊自訂驗證規則的其中一個方法就是使用 Rule 物件。若要產生新的 Rule 物件，可使用 `make:rule` Artisan 指令。讓我們來使用這個指令產生一個檢查字串是否為大寫的規則。Laravel 會將該規則放在 `app/Rules` 目錄內。若該目錄不存在，執行這個 Artisan 指令時，Laravel 會自動幫你建立："

#: docs/10.x/validation.md:block 723 (code)
msgid "php artisan make:rule Uppercase\n"
msgstr "php artisan make:rule Uppercase\n"

#: docs/10.x/validation.md:block 724 (paragraph)
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains a single method: `validate`. This method receives the attribute name, its value, and a callback that should be invoked on failure with the validation error message:"
msgstr "建立好規則後，就可以來定義其行為了。Rule 物件只包含了單一方法：`validate`。該方法會收到屬性的名稱、屬性值、以及一個應在驗證失敗時以錯誤訊息叫用的回呼："

#: docs/10.x/validation.md:block 725 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Closure;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n\n"
"class Uppercase implements ValidationRule\n"
"{\n"
"    /**\n"
"     * Run the validation rule.\n"
"     */\n"
"    public function validate(string $attribute, mixed $value, Closure $fail): void\n"
"    {\n"
"        if (strtoupper($value) !== $value) {\n"
"            $fail('The :attribute must be uppercase.');\n"
"        }\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Closure;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n\n"
"class Uppercase implements ValidationRule\n"
"{\n"
"    /**\n"
"     * Run the validation rule.\n"
"     */\n"
"    public function validate(string $attribute, mixed $value, Closure $fail): void\n"
"    {\n"
"        if (strtoupper($value) !== $value) {\n"
"            $fail('The :attribute must be uppercase.');\n"
"        }\n"
"    }\n"
"}\n"

#: docs/10.x/validation.md:block 726 (paragraph)
msgid "Once the rule has been defined, you may attach it to a validator by passing an instance of the rule object with your other validation rules:"
msgstr "定義好規則後，就可以與其他驗證規則一起，將 Rule 物件的實體傳給 Validator，以使用該規則："

#: docs/10.x/validation.md:block 727 (code)
msgid "use App\\Rules\\Uppercase;\n\n"
"$request->validate([\n"
"    'name' => ['required', 'string', new Uppercase],\n"
"]);\n"
msgstr "use App\\Rules\\Uppercase;\n\n"
"$request->validate([\n"
"    'name' => ['required', 'string', new Uppercase],\n"
"]);\n"

#: docs/10.x/validation.md:block 728 (header)
msgid "Translating Validation Messages"
msgstr "翻譯驗證訊息"

#: docs/10.x/validation.md:block 729 (paragraph)
msgid "Instead of providing a literal error message to the `$fail` closure, you may also provide a [translation string key](/docs/{{version}}/localization) and instruct Laravel to translate the error message:"
msgstr "除了提供字面錯誤訊息給 `$fail` 閉包外，也可以提供[翻譯字串的索引鍵](/docs/{{version}}/localization)，並告訴 Laravel 要翻譯這個錯誤訊息："

#: docs/10.x/validation.md:block 730 (code)
msgid "if (strtoupper($value) !== $value) {\n"
"    $fail('validation.uppercase')->translate();\n"
"}\n"
msgstr "if (strtoupper($value) !== $value) {\n"
"    $fail('validation.uppercase')->translate();\n"
"}\n"

#: docs/10.x/validation.md:block 731 (paragraph)
msgid "If necessary, you may provide placeholder replacements and the preferred language as the first and second arguments to the `translate` method:"
msgstr "若有需要，`translate` 方法的第一個引數可以設定預留位置 (Placeholder) 的取代值，第二個引數可以設定偏好的語言："

#: docs/10.x/validation.md:block 732 (code)
msgid "$fail('validation.location')->translate([\n"
"    'value' => $this->value,\n"
"], 'fr')\n"
msgstr "$fail('validation.location')->translate([\n"
"    'value' => $this->value,\n"
"], 'fr')\n"

#: docs/10.x/validation.md:block 733 (header)
msgid "Accessing Additional Data"
msgstr "存取額外資料"

#: docs/10.x/validation.md:block 734 (paragraph)
msgid "If your custom validation rule class needs to access all of the other data undergoing validation, your rule class may implement the `Illuminate\\Contracts\\Validation\\DataAwareRule` interface. This interface requires your class to define a `setData` method. This method will automatically be invoked by Laravel (before validation proceeds) with all of the data under validation:"
msgstr "若這個自訂驗證 Rule 類別需要存取正在驗證的所有其他資料，則可以讓 Rule 類別實作 `Illuminate\\Contracts\\Validation\\DataAwareRule` 介面。該介面會要求類別要定義 `setData` 方法。這個方法會由 Laravel (在驗證開始前) 自動叫用，並會傳入所有要驗證的資料："

#: docs/10.x/validation.md:block 735 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n\n"
"class Uppercase implements DataAwareRule, ValidationRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array<string, mixed>\n"
"     */\n"
"    protected $data = [];\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array<string, mixed>  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData(array $data): static\n"
"    {\n"
"        $this->data = $data;\n\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n\n"
"class Uppercase implements DataAwareRule, ValidationRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array<string, mixed>\n"
"     */\n"
"    protected $data = [];\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array<string, mixed>  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData(array $data): static\n"
"    {\n"
"        $this->data = $data;\n\n"
"        return $this;\n"
"    }\n"
"}\n"

#: docs/10.x/validation.md:block 736 (paragraph)
msgid "Or, if your validation rule requires access to the validator instance performing the validation, you may implement the `ValidatorAwareRule` interface:"
msgstr "或者，若這個驗證規則需要存取正在進行驗證的 Validator 實體，則可以實作 `ValidatorAwareRule` 介面："

#: docs/10.x/validation.md:block 737 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n"
"use Illuminate\\Validation\\Validator;\n\n"
"class Uppercase implements ValidationRule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the current validator.\n"
"     */\n"
"    public function setValidator(Validator $validator): static\n"
"    {\n"
"        $this->validator = $validator;\n\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\ValidationRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n"
"use Illuminate\\Validation\\Validator;\n\n"
"class Uppercase implements ValidationRule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the current validator.\n"
"     */\n"
"    public function setValidator(Validator $validator): static\n"
"    {\n"
"        $this->validator = $validator;\n\n"
"        return $this;\n"
"    }\n"
"}\n"

#: docs/10.x/validation.md:block 739 (header)
msgid "Using Closures"
msgstr "使用閉包"

#: docs/10.x/validation.md:block 740 (paragraph)
msgid "If you only need the functionality of a custom rule once throughout your application, you may use a closure instead of a rule object. The closure receives the attribute's name, the attribute's value, and a `$fail` callback that should be called if validation fails:"
msgstr "若在專案中只有一個地方會需要某個自訂驗證規則，除了使用 Rule 物件外，我們可以使用閉包。這個閉包會收到屬性名稱、屬性值、以及一個要在驗證失敗時呼叫的 `$fail` 回呼："

#: docs/10.x/validation.md:block 741 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function (string $attribute, mixed $value, Closure $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail(\"The {$attribute} is invalid.\");\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function (string $attribute, mixed $value, Closure $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail(\"The {$attribute} is invalid.\");\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"

#: docs/10.x/validation.md:block 743 (header)
msgid "Implicit Rules"
msgstr "隱式規則"

#: docs/10.x/validation.md:block 744 (paragraph)
msgid "By default, when an attribute being validated is not present or contains an empty string, normal validation rules, including custom rules, are not run. For example, the [`unique`](#rule-unique) rule will not be run against an empty string:"
msgstr "預設情況下，若正在驗證的屬性不存在或包含空字串時，就不會執行包含自訂規則在內的一般驗證規則。舉例來說，遇到空字串時 [`unique`](#rule-unique) 規則將不會執行："

#: docs/10.x/validation.md:block 745 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$rules = ['name' => 'unique:users,name'];\n\n"
"$input = ['name' => ''];\n\n"
"Validator::make($input, $rules)->passes(); // true\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$rules = ['name' => 'unique:users,name'];\n\n"
"$input = ['name' => ''];\n\n"
"Validator::make($input, $rules)->passes(); // true\n"

#: docs/10.x/validation.md:block 746 (paragraph)
msgid "For a custom rule to run even when an attribute is empty, the rule must imply that the attribute is required. To quickly generate a new implicit rule object, you may use the `make:rule` Artisan command with the `--implicit` option:"
msgstr "如果要在屬性為空時也執行自定規則，則該規則必須暗示該屬性為 `required`。若要產生新的隱式規則物件，可在呼叫 `make:rule` Artisan 指令時提供 `--implicit` 選項："

#: docs/10.x/validation.md:block 747 (code)
msgid "php artisan make:rule Uppercase --implicit\n"
msgstr "php artisan make:rule Uppercase --implicit\n"

#: docs/10.x/validation.md:block 748 (quote)
msgid "**Warning** An \"implicit\" rule only *implies* that the attribute is required. Whether it actually invalidates a missing or empty attribute is up to you."
msgstr "**Warning** 「隱式」規則只 **暗示** 該屬性為必填欄位。至於當屬性不存在或屬性為空時是否要視為驗證失敗，則取決於你。"

#: docs/8.x/validation.md:block 2 (unordered list)
msgid "[Excluding Unvalidated Array Keys](#excluding-unvalidated-array-keys)"
msgstr "[排除未驗證的陣列索引鍵](#excluding-unvalidated-array-keys)"

#: docs/8.x/validation.md:block 18 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View\n"
"     */\n"
"    public function create()\n"
"    {\n"
"        return view('post.create');\n"
"    }\n\n"
"    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        // Validate and store the blog post...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the form to create a new blog post.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View\n"
"     */\n"
"    public function create()\n"
"    {\n"
"        return view('post.create');\n"
"    }\n\n"
"    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        // Validate and store the blog post...\n"
"    }\n"
"}\n"

#: docs/8.x/validation.md:block 22 (paragraph)
msgid "If validation fails during a traditional HTTP request, a redirect response to the previous URL will be generated. If the incoming request is an XHR request, a JSON response containing the validation error messages will be returned."
msgstr "若驗證失敗時使用的是傳統 HTTP Request，則會產生一個回到上一頁網址的 Redirect Response。若連入的 Request 是 XHR Request，則會回傳一個包含驗證錯誤訊息的 JSON Response。"

#: docs/8.x/validation.md:block 24 (code)
msgid "/**\n"
" * Store a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function store(Request $request)\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n\n"
"    // The blog post is valid...\n"
"}\n"
msgstr "/**\n"
" * Store a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function store(Request $request)\n"
"{\n"
"    $validated = $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n\n"
"    // The blog post is valid...\n"
"}\n"

#: docs/8.x/validation.md:block 49 (paragraph)
msgid "Laravel's built-in validation rules each has an error message that is located in your application's `resources/lang/en/validation.php` file. Within this file, you will find a translation entry for each validation rule. You are free to change or modify these messages based on the needs of your application."
msgstr "在專案的 `resources/lang/en/validation.php` 檔案中，有所有 Laravel 內建驗證規則的錯誤訊息。在這個檔案中，我們可以看到每個驗證規則的翻譯欄位。可以依照需求修改這些訊息。"

#: docs/8.x/validation.md:block 50 (paragraph)
msgid "In addition, you may copy this file to another translation language directory to translate the messages for your application's language. To learn more about Laravel localization, check out the complete [localization documentation](/docs/{{version}}/localization)."
msgstr "此外，也可以把這個檔案複製到另一個翻譯語系目錄中，以將其翻成你專案的語言。要瞭解 Laravel 中有關本土化 (Localization) 的更多資訊，請參考完整的[本土化說明文件](/docs/{{version}}/localization)。"

#: docs/8.x/validation.md:block 53 (paragraph)
msgid "In this example, we used a traditional form to send data to the application. However, many applications receive XHR requests from a JavaScript powered frontend. When using the `validate` method during an XHR request, Laravel will not generate a redirect response. Instead, Laravel generates a JSON response containing all of the validation errors. This JSON response will be sent with a 422 HTTP status code."
msgstr "在這個例子中，我們使用傳統的表單來將資料傳給程式。不過，有許多程式是接受來自 JavaScript 前端的 XHR Request。在 XHR Request 中使用 `validate` 方法時，Laravel 不會產生 Redirect Response，而是產生一個包含所有驗證錯誤的 JSON Response。JSON Response 會以 422 HTTP 狀態碼傳送。"

#: docs/8.x/validation.md:block 57 (code)
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\" type=\"text\" name=\"title\" class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\" type=\"text\" name=\"title\" class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"

#: docs/8.x/validation.md:block 80 (code)
msgid "/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array\n"
" */\n"
"public function rules()\n"
"{\n"
"    return [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array\n"
" */\n"
"public function rules()\n"
"{\n"
"    return [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ];\n"
"}\n"

#: docs/8.x/validation.md:block 81 (quote)
msgid "{tip} You may type-hint any dependencies you require within the `rules` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr "{tip} 在 `rules` 方法的^[簽章](Signature) 中可以對任何需要的相依性進行^[型別提示](Type-Hint)。型別提示的相依性會由 Laravel 的 [Service Container](/docs/{{version}}/container) 自動解析。"

#: docs/8.x/validation.md:block 83 (code)
msgid "/**\n"
" * Store a new blog post.\n"
" *\n"
" * @param  \\App\\Http\\Requests\\StorePostRequest  $request\n"
" * @return Illuminate\\Http\\Response\n"
" */\n"
"public function store(StorePostRequest $request)\n"
"{\n"
"    // The incoming request is valid...\n\n"
"    // Retrieve the validated input data...\n"
"    $validated = $request->validated();\n\n"
"    // Retrieve a portion of the validated input data...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n"
"}\n"
msgstr "/**\n"
" * Store a new blog post.\n"
" *\n"
" * @param  \\App\\Http\\Requests\\StorePostRequest  $request\n"
" * @return Illuminate\\Http\\Response\n"
" */\n"
"public function store(StorePostRequest $request)\n"
"{\n"
"    // 連入的 Request 是有效的...\n\n"
"    // 取得已驗證的輸入資料...\n"
"    $validated = $request->validated();\n\n"
"    // 取得一部分的已驗證輸入資料...\n"
"    $validated = $request->safe()->only(['name', 'email']);\n"
"    $validated = $request->safe()->except(['name', 'email']);\n"
"}\n"

#: docs/8.x/validation.md:block 84 (paragraph)
msgid "If validation fails, a redirect response will be generated to send the user back to their previous location. The errors will also be flashed to the session so they are available for display. If the request was an XHR request, an HTTP response with a 422 status code will be returned to the user including a JSON representation of the validation errors."
msgstr "若驗證失敗，會產生一個 Redirect Response，並將使用者傳送回前一個位置。錯誤訊息也會被快閃存入 Session 中以便顯示。若目前的 Request 是 XHR Request，則會回傳一個 422 狀態碼的 HTTP Response 給使用者，其中包含了以 JSON 呈現的驗證錯誤訊息："

#: docs/8.x/validation.md:block 88 (code)
msgid "/**\n"
" * Configure the validator instance.\n"
" *\n"
" * @param  \\Illuminate\\Validation\\Validator  $validator\n"
" * @return void\n"
" */\n"
"public function withValidator($validator)\n"
"{\n"
"    $validator->after(function ($validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"        }\n"
"    });\n"
"}\n"
msgstr "/**\n"
" * Configure the validator instance.\n"
" *\n"
" * @param  \\Illuminate\\Validation\\Validator  $validator\n"
" * @return void\n"
" */\n"
"public function withValidator($validator)\n"
"{\n"
"    $validator->after(function ($validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"        }\n"
"    });\n"
"}\n"

#: docs/8.x/validation.md:block 102 (code)
msgid "use App\\Models\\Comment;\n\n"
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function authorize()\n"
"{\n"
"    $comment = Comment::find($this->route('comment'));\n\n"
"    return $comment && $this->user()->can('update', $comment);\n"
"}\n"
msgstr "use App\\Models\\Comment;\n\n"
"/**\n"
" * Determine if the user is authorized to make this request.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function authorize()\n"
"{\n"
"    $comment = Comment::find($this->route('comment'));\n\n"
"    return $comment && $this->user()->can('update', $comment);\n"
"}\n"

#: docs/8.x/validation.md:block 109 (code)
msgid "/**\n"
" * Determine if the user is authorized to make this request.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function authorize()\n"
"{\n"
"    return true;\n"
"}\n"
msgstr "/**\n"
" * Determine if the user is authorized to make this request.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function authorize()\n"
"{\n"
"    return true;\n"
"}\n"

#: docs/8.x/validation.md:block 110 (quote)
msgid "{tip} You may type-hint any dependencies you need within the `authorize` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container)."
msgstr "{tip} 在 `authorize` 方法的^[簽章](Signature) 中可以對任何需要的相依性進行^[型別提示](Type-Hint)。型別提示中的相依性會由 Laravel 的 [Service Container](/docs/{{version}}/container) 自動解析。"

#: docs/8.x/validation.md:block 114 (code)
msgid "/**\n"
" * Get the error messages for the defined validation rules.\n"
" *\n"
" * @return array\n"
" */\n"
"public function messages()\n"
"{\n"
"    return [\n"
"        'title.required' => 'A title is required',\n"
"        'body.required' => 'A message is required',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get the error messages for the defined validation rules.\n"
" *\n"
" * @return array\n"
" */\n"
"public function messages()\n"
"{\n"
"    return [\n"
"        'title.required' => 'A title is required',\n"
"        'body.required' => 'A message is required',\n"
"    ];\n"
"}\n"

#: docs/8.x/validation.md:block 118 (code)
msgid "/**\n"
" * Get custom attributes for validator errors.\n"
" *\n"
" * @return array\n"
" */\n"
"public function attributes()\n"
"{\n"
"    return [\n"
"        'email' => 'email address',\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Get custom attributes for validator errors.\n"
" *\n"
" * @return array\n"
" */\n"
"public function attributes()\n"
"{\n"
"    return [\n"
"        'email' => 'email address',\n"
"    ];\n"
"}\n"

#: docs/8.x/validation.md:block 122 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Prepare the data for validation.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function prepareForValidation()\n"
"{\n"
"    $this->merge([\n"
"        'slug' => Str::slug($this->slug),\n"
"    ]);\n"
"}\n"
msgstr "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Prepare the data for validation.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function prepareForValidation()\n"
"{\n"
"    $this->merge([\n"
"        'slug' => Str::slug($this->slug),\n"
"    ]);\n"
"}\n"

#: docs/8.x/validation.md:block 126 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Validator;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  Request  $request\n"
"     * @return Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n\n"
"        // Retrieve the validated input...\n"
"        $validated = $validator->validated();\n\n"
"        // Retrieve a portion of the validated input...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n\n"
"        // Store the blog post...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Validator;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  Request  $request\n"
"     * @return Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $validator = Validator::make($request->all(), [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n\n"
"        if ($validator->fails()) {\n"
"            return redirect('post/create')\n"
"                        ->withErrors($validator)\n"
"                        ->withInput();\n"
"        }\n\n"
"        // Retrieve the validated input...\n"
"        $validated = $validator->validated();\n\n"
"        // Retrieve a portion of the validated input...\n"
"        $validated = $validator->safe()->only(['name', 'email']);\n"
"        $validated = $validator->safe()->except(['name', 'email']);\n\n"
"        // Store the blog post...\n"
"    }\n"
"}\n"

#: docs/8.x/validation.md:block 134 (paragraph)
msgid "If you would like to create a validator instance manually but still take advantage of the automatic redirection offered by the HTTP request's `validate` method, you may call the `validate` method on an existing validator instance. If validation fails, the user will automatically be redirected or, in the case of an XHR request, a JSON response will be returned:"
msgstr "若想手動建立 Validator 實體，但也想要使用 HTTP Request 的 `validate` 方法提供的自動重新導向功能，可以在現有 Validator 實體上呼叫 `validate` 方法。若驗證失敗，使用者會被重新導向。XHR Request 的情況下，則會回傳 JSON Response："

#: docs/8.x/validation.md:block 161 (code)
msgid "$validator = Validator::make(...);\n\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n\n"
"if ($validator->fails()) {\n"
"    //\n"
"}\n"
msgstr "$validator = Validator::make(...);\n\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n\n"
"if ($validator->fails()) {\n"
"    //\n"
"}\n"

#: docs/8.x/validation.md:block 169 (code)
msgid "// Validated data may be iterated...\n"
"foreach ($request->safe() as $key => $value) {\n"
"    //\n"
"}\n\n"
"// Validated data may be accessed as an array...\n"
"$validated = $request->safe();\n\n"
"$email = $validated['email'];\n"
msgstr "// 可以迭代已驗證的資料...\n"
"foreach ($request->safe() as $key => $value) {\n"
"    //\n"
"}\n\n"
"// 可用陣列形式存取已驗證的資料...\n"
"$validated = $request->safe();\n\n"
"$email = $validated['email'];\n"

#: docs/8.x/validation.md:block 184 (code)
msgid "foreach ($errors->get('email') as $message) {\n"
"    //\n"
"}\n"
msgstr "foreach ($errors->get('email') as $message) {\n"
"    //\n"
"}\n"

#: docs/8.x/validation.md:block 186 (code)
msgid "foreach ($errors->get('attachments.*') as $message) {\n"
"    //\n"
"}\n"
msgstr "foreach ($errors->get('attachments.*') as $message) {\n"
"    //\n"
"}\n"

#: docs/8.x/validation.md:block 190 (code)
msgid "foreach ($errors->all() as $message) {\n"
"    //\n"
"}\n"
msgstr "foreach ($errors->all() as $message) {\n"
"    //\n"
"}\n"

#: docs/8.x/validation.md:block 194 (code)
msgid "if ($errors->has('email')) {\n"
"    //\n"
"}\n"
msgstr "if ($errors->has('email')) {\n"
"    //\n"
"}\n"

#: docs/8.x/validation.md:block 201 (paragraph)
msgid "You may customize the error messages used for specified attribute and rule combinations within your application's validation language files. To do so, add your message customizations to the `custom` array of your application's `resources/lang/xx/validation.php` language file:"
msgstr "我們可能會想在程式的驗證語系檔中為特定的屬性與規則組合自訂錯誤訊息。為此，請在專案的 `resources/lang/xx/validation.php` 語系檔中 `custom` 陣列內新增你的自訂訊息："

#: docs/8.x/validation.md:block 205 (paragraph)
msgid "Many of Laravel's built-in error messages include an `:attribute` placeholder that is replaced with the name of the field or attribute under validation. If you would like the `:attribute` portion of your validation message to be replaced with a custom value, you may specify the custom attribute name in the `attributes` array of your `resources/lang/xx/validation.php` language file:"
msgstr "Laravel 中內建的許多錯誤訊息都包含了一個 `:attribute` 預留位置 (Placeholder)，該預留位置會被取代為被驗證的欄位名稱或屬性名稱。若想讓驗證訊息的 `:attribute` 部分被取代為自訂的值，可在 `resources/lang/xx/validation.php` 語系檔中 `attributes` 陣列內指定自訂的屬性名稱："

#: docs/8.x/validation.md:block 213 (paragraph)
msgid "Instead of displaying `cc` as the payment type value, you may specify a more user-friendly value representation in your `resources/lang/xx/validation.php` language file by defining a `values` array:"
msgstr "我們可以在 `resources/lang/xx/validation.php` 語系檔中定義一個 `values` 陣列來為付款方式的值指定一個對使用者更友好的呈現，而不是顯示 `cc`："

#: docs/8.x/validation.md:block 222 (paragraph)
msgid "[Accepted](#rule-accepted) [Accepted If](#rule-accepted-if) [Active URL](#rule-active-url) [After (Date)](#rule-after) [After Or Equal (Date)](#rule-after-or-equal) [Alpha](#rule-alpha) [Alpha Dash](#rule-alpha-dash) [Alpha Numeric](#rule-alpha-num) [Array](#rule-array) [Bail](#rule-bail) [Before (Date)](#rule-before) [Before Or Equal (Date)](#rule-before-or-equal) [Between](#rule-between) [Boolean](#rule-boolean) [Confirmed](#rule-confirmed) [Current Password](#rule-current-password) [Date](#rule-date) [Date Equals](#rule-date-equals) [Date Format](#rule-date-format) [Declined](#rule-declined) [Declined If](#rule-declined-if) [Different](#rule-different) [Digits](#rule-digits) [Digits Between](#rule-digits-between) [Dimensions (Image Files)](#rule-dimensions) [Distinct](#rule-distinct) [Email](#rule-email) [Ends With](#rule-ends-with) [Enum](#rule-enum) [Exclude](#rule-exclude) [Exclude If](#rule-exclude-if) [Exclude Unless](#rule-exclude-unless) [Exclude Without](#rule-exclude-without) [Exists (Database)](#rule-exists) [File](#rule-file) [Filled](#rule-filled) [Greater Than](#rule-gt) [Greater Than Or Equal](#rule-gte) [Image (File)](#rule-image) [In](#rule-in) [In Array](#rule-in-array) [Integer](#rule-integer) [IP Address](#rule-ip) [MAC Address](#rule-mac) [JSON](#rule-json) [Less Than](#rule-lt) [Less Than Or Equal](#rule-lte) [Max](#rule-max) [MIME Types](#rule-mimetypes) [MIME Type By File Extension](#rule-mimes) [Min](#rule-min) [Multiple Of](#multiple-of) [Not In](#rule-not-in) [Not Regex](#rule-not-regex) [Nullable](#rule-nullable) [Numeric](#rule-numeric) [Password](#rule-password) [Present](#rule-present) [Prohibited](#rule-prohibited) [Prohibited If](#rule-prohibited-if) [Prohibited Unless](#rule-prohibited-unless) [Prohibits](#rule-prohibits) [Regular Expression](#rule-regex) [Required](#rule-required) [Required If](#rule-required-if) [Required Unless](#rule-required-unless) [Required With](#rule-required-with) [Required With All](#rule-required-with-all) [Required Without](#rule-required-without) [Required Without All](#rule-required-without-all) [Same](#rule-same) [Size](#rule-size) [Sometimes](#validating-when-present) [Starts With](#rule-starts-with) [String](#rule-string) [Timezone](#rule-timezone) [Unique (Database)](#rule-unique) [URL](#rule-url) [UUID](#rule-uuid)"
msgstr ""

#: docs/8.x/validation.md:block 244 (paragraph)
msgid "The field under validation must be entirely alphabetic characters."
msgstr "該驗證欄位只能由字母組成。"

#: docs/8.x/validation.md:block 247 (paragraph)
msgid "The field under validation may have alpha-numeric characters, as well as dashes and underscores."
msgstr "該驗證欄位只能由字母或數字字元、以及減號 (-) 或底線組成。"

#: docs/8.x/validation.md:block 250 (paragraph)
msgid "The field under validation must be entirely alpha-numeric characters."
msgstr "該驗證欄位只能由字母或數字字元組成。"

#: docs/8.x/validation.md:block 257 (paragraph)
msgid "If you would like, you may instruct Laravel's validator to never include unvalidated array keys in the \"validated\" data it returns, even if you use the `array` rule without specifying a list of allowed keys. To accomplish this, you may call the validator's `excludeUnvalidatedArrayKeys` method in the `boot` method of your application's `AppServiceProvider`. After doing so, the validator will include array keys in the \"validated\" data it returns only when those keys were specifically validated by [nested array rules](#validating-arrays):"
msgstr "若想的話，也可以讓 Laravel 的 Validator 即使在不指定允許索引鍵列表情況下使用 `array` 規則時，也永遠不要在其回傳的「已驗證」資料中包含未驗證陣列索引鍵。為此，請在專案的 `AppServiceProvider` 中 `boot` 方法內呼叫 Validator 的 `excludeUnvalidatedArrayKeys` 方法。完成後，Validator 只會在陣列索引鍵有特別在[巢狀陣列規則](#validating-arrays)中指定，才會將這些陣列索引鍵包含在「已驗證」的資料內："

#: docs/8.x/validation.md:block 258 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Validator::excludeUnvalidatedArrayKeys();\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Validator::excludeUnvalidatedArrayKeys();\n"
"}\n"

#: docs/8.x/validation.md:block 272 (paragraph)
msgid "The field under validation must have a size between the given *min* and *max*. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr "該驗證欄位的大小必須介於給定的 *最小值* 與 *最大值* 之間。字串、數字、陣列、與檔案會使用與 [`size`](#rule-size) 規則相同的方法計算大小。"

#: docs/8.x/validation.md:block 290 (header)
msgid "date_format:*format*"
msgstr "date_format:*格式*"

#: docs/8.x/validation.md:block 291 (paragraph)
msgid "The field under validation must match the given *format*. You should use **either** `date` or `date_format` when validating a field, not both. This validation rule supports all formats supported by PHP's [DateTime](https://www.php.net/manual/en/class.datetime.php) class."
msgstr "驗證欄位必須符合給定的 *格式*。驗證欄位時只能使用 `date` 或 `date_format` **擇一**，不可同時使用。該驗證規則支援 PHP [DateTime](https://www.php.net/manual/en/class.datetime.php) 類別支援的所有格式。"

#: docs/8.x/validation.md:block 303 (paragraph)
msgid "The field under validation must be *numeric* and must have an exact length of *value*."
msgstr "該驗證欄位必須為 **數字**，且位數必須等於 *值*。"

#: docs/8.x/validation.md:block 306 (paragraph)
msgid "The field under validation must be *numeric* and must have a length between the given *min* and *max*."
msgstr "該驗證欄位必須為 •數字*，且長度必須介於給定的 *最小值* 與 *最大值*。"

#: docs/8.x/validation.md:block 333 (quote)
msgid "{note} The `dns` and `spoof` validators require the PHP `intl` extension."
msgstr "{note} `dns` 與 `spoof` Validator 需要有 PHP 的 `intl` 擴充程式。"

#: docs/8.x/validation.md:block 341 (quote)
msgid "{note} Enums are only available on PHP 8.1+."
msgstr "{note} Enum 只在 PHP 8.1 以上提供。"

#: docs/8.x/validation.md:block 370 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::exists('staff')->where(function ($query) {\n"
"            return $query->where('account_id', 1);\n"
"        }),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::exists('staff')->where(function ($query) {\n"
"            return $query->where('account_id', 1);\n"
"        }),\n"
"    ],\n"
"]);\n"

#: docs/8.x/validation.md:block 391 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$input = [\n"
"    'airports' => ['NYC', 'LAS'],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'airports' => [\n"
"        'required',\n"
"        'array',\n"
"        Rule::in(['NYC', 'LIT']),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$input = [\n"
"    'airports' => ['NYC', 'LAS'],\n"
"];\n\n"
"Validator::make($input, [\n"
"    'airports' => [\n"
"        'required',\n"
"        'array',\n"
"        Rule::in(['NYC', 'LIT']),\n"
"    ],\n"
"]);\n"

#: docs/8.x/validation.md:block 398 (quote)
msgid "{note} This validation rule does not verify that the input is of the \"integer\" variable type, only that the input is of a type accepted by PHP's `FILTER_VALIDATE_INT` rule. If you need to validate the input as being a number please use this rule in combination with [the `numeric` validation rule](#rule-numeric)."
msgstr "{note} 這個驗證規則並不會驗證輸入是否為「^[整數](Integer)」變數型別，只會驗證該輸入值是否為 PHP 的 `FILTER_VALIDATE_INT` 規則接受的類型。若想驗證輸入是否為一數字，請搭配 [`numeric` 驗證規則](#rule-numeric)一起使用此規則。"

#: docs/8.x/validation.md:block 442 (quote)
msgid "{note} The [`bcmath` PHP extension](https://www.php.net/manual/en/book.bc.php) is required in order to use the `multiple_of` rule."
msgstr "{note} 必須安裝 [`bcmath` PHP 擴充程式](https://www.php.net/manual/en/book.bc.php)，才可使用 `multiple_of` 規則。"

#: docs/8.x/validation.md:block 451 (quote)
msgid "{note} When using the `regex` / `not_regex` patterns, it may be necessary to specify your validation rules using an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr "{note} 在使用 `regex` / `not_regex` 格式時，可能會需要以變數方式來指定驗證規則，而不是使用 `|` 分隔符號。尤其是當正規表示式包含 `|` 字元時。"

#: docs/8.x/validation.md:block 461 (quote)
msgid "{note} This rule was renamed to `current_password` with the intention of removing it in Laravel 9. Please use the [Current Password](#rule-current-password) rule instead."
msgstr "{note} 該驗證欄位已改名為 `current_password`，並將於 Laravel 9 中移除。請改用 [current_password](#rule-current-password) 規則代替。"

#: docs/8.x/validation.md:block 464 (paragraph)
msgid "The field under validation must be present in the input data but can be empty."
msgstr "該驗證欄位必須存在輸入資料中，可為空。"

#: docs/8.x/validation.md:block 467 (paragraph)
msgid "The field under validation must be empty or not present."
msgstr "該驗證欄位必須為空或不可存在。"

#: docs/8.x/validation.md:block 470 (paragraph)
msgid "The field under validation must be empty or not present if the *anotherfield* field is equal to any *value*."
msgstr "若 *另一欄位* 欄位為給定的其中一個 *值* 時，該驗證欄位必須為空或不存在。"

#: docs/8.x/validation.md:block 473 (paragraph)
msgid "The field under validation must be empty or not present unless the *anotherfield* field is equal to any *value*."
msgstr "除非 *另一欄位* 值為給定的其中一個 *值*，否則該驗證欄位必須為空或不存在。"

#: docs/8.x/validation.md:block 476 (paragraph)
msgid "If the field under validation is present, no fields in *anotherfield* can be present, even if empty."
msgstr "當該驗證欄位存在時，所有 *另一欄位* 都不可存在，也不可為空。"

#: docs/8.x/validation.md:block 481 (quote)
msgid "{note} When using the `regex` / `not_regex` patterns, it may be necessary to specify rules in an array instead of using `|` delimiters, especially if the regular expression contains a `|` character."
msgstr "{note} 使用 `regex` / `not_regex` 格式時，可能有需要使用陣列方式制定規則，而不是使用 `|` 分隔字元。特別是當正規式中有包含 `|` 字元時。"

#: docs/8.x/validation.md:block 484 (paragraph)
msgid "The field under validation must be present in the input data and not empty. A field is considered \"empty\" if one of the following conditions are true:"
msgstr "該驗證欄位必須存在於輸入資料中，且不可為空。當某個欄位滿足下列條件時，將被視為「空 (Empty)」："

#: docs/8.x/validation.md:block 492 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf(function () use ($request) {\n"
"        return $request->user()->is_admin;\n"
"    }),\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"]);\n\n"
"Validator::make($request->all(), [\n"
"    'role_id' => Rule::requiredIf(function () use ($request) {\n"
"        return $request->user()->is_admin;\n"
"    }),\n"
"]);\n"

#: docs/8.x/validation.md:block 538 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::unique('users')->ignore($user->id),\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"Validator::make($data, [\n"
"    'email' => [\n"
"        'required',\n"
"        Rule::unique('users')->ignore($user->id),\n"
"    ],\n"
"]);\n"

#: docs/8.x/validation.md:block 539 (quote)
msgid "{note} You should never pass any user controlled request input into the `ignore` method. Instead, you should only pass a system generated unique ID such as an auto-incrementing ID or UUID from an Eloquent model instance. Otherwise, your application will be vulnerable to an SQL injection attack."
msgstr "{note} 絕對不要傳入任何由使用者控制的 Request 輸入給 `ignore` 方法。請只傳入 Eloquent Model 實體中由系統產生的不重複 ID，如^[自動遞增 ID](Auto-Incrementing ID) 或 UUID。若傳入了使用者控制的資料，可能會讓你的程式發生如 ^[SQL 注入](SQL Injection)等弱點。"

#: docs/8.x/validation.md:block 545 (code)
msgid "Rule::unique('users', 'email_address')->ignore($user->id),\n"
msgstr "Rule::unique('users', 'email_address')->ignore($user->id),\n"

#: docs/8.x/validation.md:block 548 (code)
msgid "'email' => Rule::unique('users')->where(function ($query) {\n"
"    return $query->where('account_id', 1);\n"
"})\n"
msgstr "'email' => Rule::unique('users')->where(function ($query) {\n"
"    return $query->where('account_id', 1);\n"
"})\n"

#: docs/8.x/validation.md:block 568 (quote)
msgid "{tip} If you are attempting to validate a field that should always be present but may be empty, check out [this note on optional fields](#a-note-on-optional-fields)."
msgstr "{tip} 若想驗證某個欄位必須存在，但可為空，請參考[這個關於可選欄位的備註](#a-note-on-optional-fields)。"

#: docs/8.x/validation.md:block 574 (code)
msgid "$validator->sometimes('reason', 'required|max:500', function ($input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr "$validator->sometimes('reason', 'required|max:500', function ($input) {\n"
"    return $input->games >= 100;\n"
"});\n"

#: docs/8.x/validation.md:block 576 (code)
msgid "$validator->sometimes(['reason', 'cost'], 'required', function ($input) {\n"
"    return $input->games >= 100;\n"
"});\n"
msgstr "$validator->sometimes(['reason', 'cost'], 'required', function ($input) {\n"
"    return $input->games >= 100;\n"
"});\n"

#: docs/8.x/validation.md:block 577 (quote)
msgid "{tip} The `$input` parameter passed to your closure will be an instance of `Illuminate\\Support\\Fluent` and may be used to access your input and files under validation."
msgstr "{tip} 傳給閉包的 `$input` 引數會是 `Illuminate\\Support\\Fluent` 的實體。且可用來存取所有正在驗證的輸入與檔案。"

#: docs/8.x/validation.md:block 581 (code)
msgid "$input = [\n"
"    'channels' => [\n"
"        [\n"
"            'type' => 'email',\n"
"            'address' => 'abigail@example.com',\n"
"        ],\n"
"        [\n"
"            'type' => 'url',\n"
"            'address' => 'https://example.com',\n"
"        ],\n"
"    ],\n"
"];\n\n"
"$validator->sometimes('channels.*.address', 'email', function ($input, $item) {\n"
"    return $item->type === 'email';\n"
"});\n\n"
"$validator->sometimes('channels.*.address', 'url', function ($input, $item) {\n"
"    return $item->type !== 'email';\n"
"});\n"
msgstr "$input = [\n"
"    'channels' => [\n"
"        [\n"
"            'type' => 'email',\n"
"            'address' => 'abigail@example.com',\n"
"        ],\n"
"        [\n"
"            'type' => 'url',\n"
"            'address' => 'https://example.com',\n"
"        ],\n"
"    ],\n"
"];\n\n"
"$validator->sometimes('channels.*.address', 'email', function ($input, $item) {\n"
"    return $item->type === 'email';\n"
"});\n\n"
"$validator->sometimes('channels.*.address', 'url', function ($input, $item) {\n"
"    return $item->type !== 'email';\n"
"});\n"

#: docs/8.x/validation.md:block 589 (header)
msgid "Excluding Unvalidated Array Keys"
msgstr "排除未驗證的陣列索引鍵"

#: docs/8.x/validation.md:block 616 (code)
msgid "use Illuminate\\Validation\\Rules\\Password;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Password::defaults(function () {\n"
"        $rule = Password::min(8);\n\n"
"        return $this->app->isProduction()\n"
"                    ? $rule->mixedCase()->uncompromised()\n"
"                    : $rule;\n"
"    });\n"
"}\n"
msgstr "use Illuminate\\Validation\\Rules\\Password;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Password::defaults(function () {\n"
"        $rule = Password::min(8);\n\n"
"        return $this->app->isProduction()\n"
"                    ? $rule->mixedCase()->uncompromised()\n"
"                    : $rule;\n"
"    });\n"
"}\n"

#: docs/8.x/validation.md:block 627 (paragraph)
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains two methods: `passes` and `message`. The `passes` method receives the attribute value and name, and should return `true` or `false` depending on whether the attribute value is valid or not. The `message` method should return the validation error message that should be used when validation fails:"
msgstr "建立好規則後，我們就可以開始定義該規則的行外。Rule 物件中包含了兩個方法：`passes` 與 `message`。`passes` 方法會收到屬性值與屬性名稱，該方法應根據該屬性是否通過驗證來回傳 `true` 與 `false`。`message` 方法則應回傳驗證失敗時要使用的驗證錯誤訊息："

#: docs/8.x/validation.md:block 628 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n\n"
"class Uppercase implements Rule\n"
"{\n"
"    /**\n"
"     * Determine if the validation rule passes.\n"
"     *\n"
"     * @param  string  $attribute\n"
"     * @param  mixed  $value\n"
"     * @return bool\n"
"     */\n"
"    public function passes($attribute, $value)\n"
"    {\n"
"        return strtoupper($value) === $value;\n"
"    }\n\n"
"    /**\n"
"     * Get the validation error message.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function message()\n"
"    {\n"
"        return 'The :attribute must be uppercase.';\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n\n"
"class Uppercase implements Rule\n"
"{\n"
"    /**\n"
"     * Determine if the validation rule passes.\n"
"     *\n"
"     * @param  string  $attribute\n"
"     * @param  mixed  $value\n"
"     * @return bool\n"
"     */\n"
"    public function passes($attribute, $value)\n"
"    {\n"
"        return strtoupper($value) === $value;\n"
"    }\n\n"
"    /**\n"
"     * Get the validation error message.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function message()\n"
"    {\n"
"        return 'The :attribute must be uppercase.';\n"
"    }\n"
"}\n"

#: docs/8.x/validation.md:block 629 (paragraph)
msgid "You may call the `trans` helper from your `message` method if you would like to return an error message from your translation files:"
msgstr "可以在 `message` 方法內呼叫 `trans` 輔助函式來回傳在語系檔中的錯誤訊息："

#: docs/8.x/validation.md:block 630 (code)
msgid "/**\n"
" * Get the validation error message.\n"
" *\n"
" * @return string\n"
" */\n"
"public function message()\n"
"{\n"
"    return trans('validation.uppercase');\n"
"}\n"
msgstr "/**\n"
" * Get the validation error message.\n"
" *\n"
" * @return string\n"
" */\n"
"public function message()\n"
"{\n"
"    return trans('validation.uppercase');\n"
"}\n"

#: docs/8.x/validation.md:block 635 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n\n"
"class Uppercase implements Rule, DataAwareRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $data = [];\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData($data)\n"
"    {\n"
"        $this->data = $data;\n\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n\n"
"class Uppercase implements Rule, DataAwareRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $data = [];\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData($data)\n"
"    {\n"
"        $this->data = $data;\n\n"
"        return $this;\n"
"    }\n"
"}\n"

#: docs/8.x/validation.md:block 637 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n\n"
"class Uppercase implements Rule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the current validator.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return $this\n"
"     */\n"
"    public function setValidator($validator)\n"
"    {\n"
"        $this->validator = $validator;\n\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\Rule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n\n"
"class Uppercase implements Rule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the current validator.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return $this\n"
"     */\n"
"    public function setValidator($validator)\n"
"    {\n"
"        $this->validator = $validator;\n\n"
"        return $this;\n"
"    }\n"
"}\n"

#: docs/8.x/validation.md:block 641 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function ($attribute, $value, $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail('The '.$attribute.' is invalid.');\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'title' => [\n"
"        'required',\n"
"        'max:255',\n"
"        function ($attribute, $value, $fail) {\n"
"            if ($value === 'foo') {\n"
"                $fail('The '.$attribute.' is invalid.');\n"
"            }\n"
"        },\n"
"    ],\n"
"]);\n"

#: docs/8.x/validation.md:block 646 (paragraph)
msgid "For a custom rule to run even when an attribute is empty, the rule must imply that the attribute is required. To create an \"implicit\" rule, implement the `Illuminate\\Contracts\\Validation\\ImplicitRule` interface. This interface serves as a \"marker interface\" for the validator; therefore, it does not contain any additional methods you need to implement beyond the methods required by the typical `Rule` interface."
msgstr "若想讓自訂規則在屬性為空時也執行，就表示該規則暗示了該屬性為必填。若要建立「隱式」規則，請實作 `Illuminate\\Contracts\\Validation\\ImplicitRule` 介面。這個介面就好比 Validator 的「^[標記介面](Marker Interface)」。因此，加上該介面後除了原本 `Rule` 介面要求的方法外，並不需要實作任何其他的方法。"

#: docs/8.x/validation.md:block 647 (paragraph)
msgid "To generate a new implicit rule object, you may use the `make:rule` Artisan command with the `--implicit` option :"
msgstr "若要產生新的隱式 Rule 物件，可在執行 `make:rule` Artisan 指令時帶上 `--implicit` 選項："

#: docs/8.x/validation.md:block 648 (code)
msgid " php artisan make:rule Uppercase --implicit\n"
msgstr " php artisan make:rule Uppercase --implicit\n"

#: docs/8.x/validation.md:block 649 (quote)
msgid "{note} An \"implicit\" rule only *implies* that the attribute is required. Whether it actually invalidates a missing or empty attribute is up to you."
msgstr "{note} 「隱式」規則只 **暗示** 該屬性為必填欄位。至於當屬性不存在或屬性為空時是否要視為驗證失敗，則取決於你。"

#: docs/9.x/validation.md:block 129 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle a passed validation attempt.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function passedValidation()\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"
msgstr "use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle a passed validation attempt.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function passedValidation()\n"
"{\n"
"    $this->replace(['name' => 'Taylor']);\n"
"}\n"

#: docs/9.x/validation.md:block 168 (code)
msgid "$validator = Validator::make(/* ... */);\n\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n\n"
"if ($validator->fails()) {\n"
"    //\n"
"}\n"
msgstr "$validator = Validator::make(/* ... */);\n\n"
"$validator->after(function ($validator) {\n"
"    if ($this->somethingElseIsInvalid()) {\n"
"        $validator->errors()->add(\n"
"            'field', 'Something is wrong with this field!'\n"
"        );\n"
"    }\n"
"});\n\n"
"if ($validator->fails()) {\n"
"    //\n"
"}\n"

#: docs/9.x/validation.md:block 619 (code)
msgid "'email' => Rule::unique('users')->where(fn ($query) => $query->where('account_id', 1))\n"
msgstr "'email' => Rule::unique('users')->where(fn ($query) => $query->where('account_id', 1))\n"

#: docs/9.x/validation.md:block 676 (code)
msgid "use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function ($value, $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"
msgstr "use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function ($value, $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"

#: docs/9.x/validation.md:block 719 (code)
msgid "php artisan make:rule Uppercase --invokable\n"
msgstr "php artisan make:rule Uppercase --invokable\n"

#: docs/9.x/validation.md:block 720 (paragraph)
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains a single method: `__invoke`. This method receives the attribute name, its value, and a callback that should be invoked on failure with the validation error message:"
msgstr "建立好規則後，就可以來定義其行為了。Rule 物件只包含了單一方法：`__invoke`。該方法會收到屬性的名稱、屬性值、以及一個應在驗證失敗時以錯誤訊息叫用的回呼："

#: docs/9.x/validation.md:block 721 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n\n"
"class Uppercase implements InvokableRule\n"
"{\n"
"    /**\n"
"     * Run the validation rule.\n"
"     *\n"
"     * @param  string  $attribute\n"
"     * @param  mixed  $value\n"
"     * @param  \\Closure  $fail\n"
"     * @return void\n"
"     */\n"
"    public function __invoke($attribute, $value, $fail)\n"
"    {\n"
"        if (strtoupper($value) !== $value) {\n"
"            $fail('The :attribute must be uppercase.');\n"
"        }\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n\n"
"class Uppercase implements InvokableRule\n"
"{\n"
"    /**\n"
"     * Run the validation rule.\n"
"     *\n"
"     * @param  string  $attribute\n"
"     * @param  mixed  $value\n"
"     * @param  \\Closure  $fail\n"
"     * @return void\n"
"     */\n"
"    public function __invoke($attribute, $value, $fail)\n"
"    {\n"
"        if (strtoupper($value) !== $value) {\n"
"            $fail('The :attribute must be uppercase.');\n"
"        }\n"
"    }\n"
"}\n"

#: docs/9.x/validation.md:block 731 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n\n"
"class Uppercase implements DataAwareRule, InvokableRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $data = [];\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData($data)\n"
"    {\n"
"        $this->data = $data;\n\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\DataAwareRule;\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n\n"
"class Uppercase implements DataAwareRule, InvokableRule\n"
"{\n"
"    /**\n"
"     * All of the data under validation.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $data = [];\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the data under validation.\n"
"     *\n"
"     * @param  array  $data\n"
"     * @return $this\n"
"     */\n"
"    public function setData($data)\n"
"    {\n"
"        $this->data = $data;\n\n"
"        return $this;\n"
"    }\n"
"}\n"

#: docs/9.x/validation.md:block 733 (code)
msgid "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n\n"
"class Uppercase implements InvokableRule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the current validator.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return $this\n"
"     */\n"
"    public function setValidator($validator)\n"
"    {\n"
"        $this->validator = $validator;\n\n"
"        return $this;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Rules;\n\n"
"use Illuminate\\Contracts\\Validation\\InvokableRule;\n"
"use Illuminate\\Contracts\\Validation\\ValidatorAwareRule;\n\n"
"class Uppercase implements InvokableRule, ValidatorAwareRule\n"
"{\n"
"    /**\n"
"     * The validator instance.\n"
"     *\n"
"     * @var \\Illuminate\\Validation\\Validator\n"
"     */\n"
"    protected $validator;\n\n"
"    // ...\n\n"
"    /**\n"
"     * Set the current validator.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return $this\n"
"     */\n"
"    public function setValidator($validator)\n"
"    {\n"
"        $this->validator = $validator;\n\n"
"        return $this;\n"
"    }\n"
"}\n"

#: docs/9.x/validation.md:block 743 (code)
msgid "php artisan make:rule Uppercase --invokable --implicit\n"
msgstr "php artisan make:rule Uppercase --invokable --implicit\n"

