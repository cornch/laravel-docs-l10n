# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-13 00:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/passport.md:1
#, markdown-text, no-wrap
msgid "Laravel Passport"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Passport Or Sanctum?](#passport-or-sanctum)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Installation](#installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Deploying Passport](#deploying-passport)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Migration Customization](#migration-customization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Upgrading Passport](#upgrading-passport)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Client Secret Hashing](#client-secret-hashing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Token Lifetimes](#token-lifetimes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Overriding Default Models](#overriding-default-models)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Issuing Access Tokens](#issuing-access-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Managing Clients](#managing-clients)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Requesting Tokens](#requesting-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Refreshing Tokens](#refreshing-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Revoking Tokens](#revoking-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Purging Tokens](#purging-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Authorization Code Grant with PKCE](#code-grant-pkce)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Creating The Client](#creating-a-auth-pkce-grant-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Requesting Tokens](#requesting-auth-pkce-grant-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Password Grant Tokens](#password-grant-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Creating A Password Grant Client](#creating-a-password-grant-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Requesting Tokens](#requesting-password-grant-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Requesting All Scopes](#requesting-all-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Customizing The User Provider](#customizing-the-user-provider)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Customizing The Username Field](#customizing-the-username-field)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Customizing The Password Validation](#customizing-the-password-validation)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Implicit Grant Tokens](#implicit-grant-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Client Credentials Grant Tokens](#client-credentials-grant-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Personal Access Tokens](#personal-access-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Creating A Personal Access Client](#creating-a-personal-access-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Managing Personal Access Tokens](#managing-personal-access-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Protecting Routes](#protecting-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Via Middleware](#via-middleware)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Passing The Access Token](#passing-the-access-token)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Token Scopes](#token-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Defining Scopes](#defining-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Default Scope](#default-scope)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Assigning Scopes To Tokens](#assigning-scopes-to-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Checking Scopes](#checking-scopes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Consuming Your API With JavaScript](#consuming-your-api-with-javascript)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Events](#events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45
#, markdown-text
msgid "[Testing](#testing)"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:47
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:47
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:50
#, markdown-text
msgid ""
"Laravel Passport provides a full OAuth2 server implementation for your "
"Laravel application in a matter of minutes. Passport is built on top of the "
"[League OAuth2 server](https://github.com/thephpleague/oauth2-server) that "
"is maintained by Andy Millington and Simon Hamp."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:52
#, markdown-text, no-wrap
msgid ""
"> {note} This documentation assumes you are already familiar with OAuth2. If "
"you do not know anything about OAuth2, consider familiarizing yourself with "
"the general [terminology](https://oauth2.thephpleague.com/terminology/) and "
"features of OAuth2 before continuing.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:54
#, markdown-text, no-wrap
msgid "<a name=\"passport-or-sanctum\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:54
#, markdown-text, no-wrap
msgid "Passport Or Sanctum?"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:57
#, markdown-text
msgid ""
"Before getting started, you may wish to determine if your application would "
"be better served by Laravel Passport or [Laravel "
"Sanctum](/docs/{{version}}/sanctum). If your application absolutely needs to "
"support OAuth2, then you should use Laravel Passport."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:59
#, markdown-text
msgid ""
"However, if you are attempting to authenticate a single-page application, "
"mobile application, or issue API tokens, you should use [Laravel "
"Sanctum](/docs/{{version}}/sanctum). Laravel Sanctum does not support "
"OAuth2; however, it provides a much simpler API authentication development "
"experience."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:61
#, markdown-text, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:61
#, markdown-text, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:64
#, markdown-text
msgid "To get started, install Passport via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:66
#, markdown-text, no-wrap
msgid "    composer require laravel/passport\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:68
#, markdown-text
msgid ""
"Passport's [service provider](/docs/{{version}}/providers) registers its own "
"database migration directory, so you should migrate your database after "
"installing the package. The Passport migrations will create the tables your "
"application needs to store OAuth2 clients and access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:70
#, markdown-text, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:72
#, markdown-text
msgid ""
"Next, you should execute the `passport:install` Artisan command. This "
"command will create the encryption keys needed to generate secure access "
"tokens. In addition, the command will create \"personal access\" and "
"\"password grant\" clients which will be used to generate access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:74
#, markdown-text, no-wrap
msgid "    php artisan passport:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:76
#, markdown-text, no-wrap
msgid ""
"> {tip} If you would like to use UUIDs as the primary key value of the "
"Passport `Client` model instead of auto-incrementing integers, please "
"install Passport using [the `uuids` option](#client-uuids).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:78
#, markdown-text
msgid ""
"After running the `passport:install` command, add the "
"`Laravel\\Passport\\HasApiTokens` trait to your `App\\Models\\User` "
"model. This trait will provide a few helper methods to your model which "
"allow you to inspect the authenticated user's token and scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:80 docs/8.x/passport.md:96 docs/8.x/passport.md:408
#: docs/8.x/passport.md:692 docs/8.x/passport.md:721
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:82 docs/8.x/passport.md:694 docs/8.x/passport.md:723
#, markdown-text, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:87
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:92
#, markdown-text, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, HasFactory, Notifiable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:94
#, markdown-text
msgid ""
"Next, you should call the `Passport::routes` method within the `boot` method "
"of your `App\\Providers\\AuthServiceProvider`. This method will register the "
"routes necessary to issue access tokens and revoke access tokens, clients, "
"and personal access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:98
#, markdown-text, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:102
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as "
"ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:113
#, markdown-text, no-wrap
msgid ""
"    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * The policy mappings for the application.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $policies = [\n"
"            'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:122
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Register any authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:128
#, markdown-text, no-wrap
msgid ""
"            if (! $this->app->routesAreCached()) {\n"
"                Passport::routes();\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:130
#, markdown-text
msgid ""
"Finally, in your application's `config/auth.php` configuration file, you "
"should set the `driver` option of the `api` authentication guard to "
"`passport`. This will instruct your application to use Passport's "
"`TokenGuard` when authenticating incoming API requests:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:136
#, markdown-text, no-wrap
msgid ""
"    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:142
#, markdown-text, no-wrap
msgid ""
"        'api' => [\n"
"            'driver' => 'passport',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:144
#, markdown-text, no-wrap
msgid "<a name=\"client-uuids\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:144
#, markdown-text, no-wrap
msgid "Client UUIDs"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:147
#, markdown-text
msgid ""
"You may also run the `passport:install` command with the `--uuids` option "
"present. This option will instruct Passport that you would like to use UUIDs "
"instead of auto-incrementing integers as the Passport `Client` model's "
"primary key values. After running the `passport:install` command with the "
"`--uuids` option, you will be given additional instructions regarding "
"disabling Passport's default migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:149
#, markdown-text, no-wrap
msgid "    php artisan passport:install --uuids\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:151
#, markdown-text, no-wrap
msgid "<a name=\"deploying-passport\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:151
#, markdown-text, no-wrap
msgid "Deploying Passport"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:154
#, markdown-text
msgid ""
"When deploying Passport to your application's servers for the first time, "
"you will likely need to run the `passport:keys` command. This command "
"generates the encryption keys Passport needs in order to generate access "
"tokens. The generated keys are not typically kept in source control:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:156
#, markdown-text, no-wrap
msgid "    php artisan passport:keys\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:158
#, markdown-text
msgid ""
"If necessary, you may define the path where Passport's keys should be loaded "
"from. You may use the `Passport::loadKeysFrom` method to accomplish "
"this. Typically, this method should be called from the `boot` method of your "
"application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:167 docs/8.x/passport.md:231 docs/8.x/passport.md:268
#: docs/8.x/passport.md:758 docs/8.x/passport.md:982 docs/8.x/passport.md:1128
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Register any authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:169 docs/8.x/passport.md:233 docs/8.x/passport.md:270
#: docs/8.x/passport.md:760 docs/8.x/passport.md:984 docs/8.x/passport.md:1130
#, markdown-text, no-wrap
msgid "        Passport::routes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:172
#, markdown-text, no-wrap
msgid ""
"        Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:174
#, markdown-text, no-wrap
msgid "<a name=\"loading-keys-from-the-environment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:174
#, markdown-text, no-wrap
msgid "Loading Keys From The Environment"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:177
#, markdown-text
msgid ""
"Alternatively, you may publish Passport's configuration file using the "
"`vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:179
#, markdown-text, no-wrap
msgid "    php artisan vendor:publish --tag=passport-config\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:181
#, markdown-text
msgid ""
"After the configuration file has been published, you may load your "
"application's encryption keys by defining them as environment variables:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/passport.md:182
#, no-wrap
msgid ""
"PASSPORT_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n"
"<private key here>\n"
"-----END RSA PRIVATE KEY-----\"\n"
"\n"
"PASSPORT_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\n"
"<public key here>\n"
"-----END PUBLIC KEY-----\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:193
#, markdown-text, no-wrap
msgid "<a name=\"migration-customization\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:193
#, markdown-text, no-wrap
msgid "Migration Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:196
#, markdown-text
msgid ""
"If you are not going to use Passport's default migrations, you should call "
"the `Passport::ignoreMigrations` method in the `register` method of your "
"`App\\Providers\\AppServiceProvider` class. You may export the default "
"migrations using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:198
#, markdown-text, no-wrap
msgid "    php artisan vendor:publish --tag=passport-migrations\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:200
#, markdown-text, no-wrap
msgid "<a name=\"upgrading-passport\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:200
#, markdown-text, no-wrap
msgid "Upgrading Passport"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:203
#, markdown-text
msgid ""
"When upgrading to a new major version of Passport, it's important that you "
"carefully review [the upgrade "
"guide](https://github.com/laravel/passport/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:205
#, markdown-text, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:205
#, markdown-text, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:208
#, markdown-text, no-wrap
msgid "<a name=\"client-secret-hashing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:208
#, markdown-text, no-wrap
msgid "Client Secret Hashing"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:211
#, markdown-text
msgid ""
"If you would like your client's secrets to be hashed when stored in your "
"database, you should call the `Passport::hashClientSecrets` method in the "
"`boot` method of your `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:213 docs/8.x/passport.md:997 docs/8.x/passport.md:1079
#, markdown-text, no-wrap
msgid "    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:215
#, markdown-text, no-wrap
msgid "    Passport::hashClientSecrets();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:217
#, markdown-text
msgid ""
"Once enabled, all of your client secrets will only be displayable to the "
"user immediately after they are created. Since the plain-text client secret "
"value is never stored in the database, it is not possible to recover the "
"secret's value if it is lost."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:219
#, markdown-text, no-wrap
msgid "<a name=\"token-lifetimes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:219
#, markdown-text, no-wrap
msgid "Token Lifetimes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:222
#, markdown-text
msgid ""
"By default, Passport issues long-lived access tokens that expire after one "
"year. If you would like to configure a longer / shorter token lifetime, you "
"may use the `tokensExpireIn`, `refreshTokensExpireIn`, and "
"`personalAccessTokensExpireIn` methods. These methods should be called from "
"the `boot` method of your application's "
"`App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:238
#, markdown-text, no-wrap
msgid ""
"        Passport::tokensExpireIn(now()->addDays(15));\n"
"        Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"        Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:240
#, markdown-text, no-wrap
msgid ""
"> {note} The `expires_at` columns on Passport's database tables are "
"read-only and for display purposes only. When issuing tokens, Passport "
"stores the expiration information within the signed and encrypted tokens. If "
"you need to invalidate a token you should [revoke it](#revoking-tokens).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:242
#, markdown-text, no-wrap
msgid "<a name=\"overriding-default-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:242
#, markdown-text, no-wrap
msgid "Overriding Default Models"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:245
#, markdown-text
msgid ""
"You are free to extend the models used internally by Passport by defining "
"your own model and extending the corresponding Passport model:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:247
#, markdown-text, no-wrap
msgid "    use Laravel\\Passport\\Client as PassportClient;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:252
#, markdown-text, no-wrap
msgid ""
"    class Client extends PassportClient\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:254
#, markdown-text
msgid ""
"After defining your model, you may instruct Passport to use your custom "
"model via the `Laravel\\Passport\\Passport` class. Typically, you should "
"inform Passport about your custom models in the `boot` method of your "
"application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:259
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\Passport\\AuthCode;\n"
"    use App\\Models\\Passport\\Client;\n"
"    use App\\Models\\Passport\\PersonalAccessClient;\n"
"    use App\\Models\\Passport\\Token;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:276
#, markdown-text, no-wrap
msgid ""
"        Passport::useTokenModel(Token::class);\n"
"        Passport::useClientModel(Client::class);\n"
"        Passport::useAuthCodeModel(AuthCode::class);\n"
"        "
"Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:278
#, markdown-text, no-wrap
msgid "<a name=\"issuing-access-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:278
#, markdown-text, no-wrap
msgid "Issuing Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:281
#, markdown-text
msgid ""
"Using OAuth2 via authorization codes is how most developers are familiar "
"with OAuth2. When using authorization codes, a client application will "
"redirect a user to your server where they will either approve or deny the "
"request to issue an access token to the client."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:283
#, markdown-text, no-wrap
msgid "<a name=\"managing-clients\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:283
#, markdown-text, no-wrap
msgid "Managing Clients"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:286
#, markdown-text
msgid ""
"First, developers building applications that need to interact with your "
"application's API will need to register their application with yours by "
"creating a \"client\". Typically, this consists of providing the name of "
"their application and a URL that your application can redirect to after "
"users approve their request for authorization."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:288
#, markdown-text, no-wrap
msgid "<a name=\"the-passportclient-command\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:288
#, markdown-text, no-wrap
msgid "The `passport:client` Command"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:291
#, markdown-text
msgid ""
"The simplest way to create a client is using the `passport:client` Artisan "
"command. This command may be used to create your own clients for testing "
"your OAuth2 functionality. When you run the `client` command, Passport will "
"prompt you for more information about your client and will provide you with "
"a client ID and secret:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:293
#, markdown-text, no-wrap
msgid "    php artisan passport:client\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:295
#, markdown-text, no-wrap
msgid "**Redirect URLs**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:297
#, markdown-text
msgid ""
"If you would like to allow multiple redirect URLs for your client, you may "
"specify them using a comma-delimited list when prompted for the URL by the "
"`passport:client` command. Any URLs which contain commas should be URL "
"encoded:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/passport.md:298
#, no-wrap
msgid "http://example.com/callback,http://examplefoo.com/callback\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:303
#, markdown-text, no-wrap
msgid "<a name=\"clients-json-api\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:303 docs/8.x/passport.md:458 docs/8.x/passport.md:864
#, markdown-text, no-wrap
msgid "JSON API"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:306
#, markdown-text
msgid ""
"Since your application's users will not be able to utilize the `client` "
"command, Passport provides a JSON API that you may use to create "
"clients. This saves you the trouble of having to manually code controllers "
"for creating, updating, and deleting clients."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:308
#, markdown-text
msgid ""
"However, you will need to pair Passport's JSON API with your own frontend to "
"provide a dashboard for your users to manage their clients. Below, we'll "
"review all of the API endpoints for managing clients. For convenience, we'll "
"use [Axios](https://github.com/axios/axios) to demonstrate making HTTP "
"requests to the endpoints."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:310 docs/8.x/passport.md:869
#, markdown-text
msgid ""
"The JSON API is guarded by the `web` and `auth` middleware; therefore, it "
"may only be called from your own application. It is not able to be called "
"from an external source."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:312
#, markdown-text, no-wrap
msgid "<a name=\"get-oauthclients\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:312
#, markdown-text, no-wrap
msgid "`GET /oauth/clients`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:315
#, markdown-text
msgid ""
"This route returns all of the clients for the authenticated user. This is "
"primarily useful for listing all of the user's clients so that they may edit "
"or delete them:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:320
#, markdown-text, no-wrap
msgid ""
"    axios.get('/oauth/clients')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:322
#, markdown-text, no-wrap
msgid "<a name=\"post-oauthclients\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:322
#, markdown-text, no-wrap
msgid "`POST /oauth/clients`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:325
#, markdown-text
msgid ""
"This route is used to create new clients. It requires two pieces of data: "
"the client's `name` and a `redirect` URL. The `redirect` URL is where the "
"user will be redirected after approving or denying a request for "
"authorization."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:327
#, markdown-text
msgid ""
"When a client is created, it will be issued a client ID and client "
"secret. These values will be used when requesting access tokens from your "
"application. The client creation route will return the new client instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:332
#, markdown-text, no-wrap
msgid ""
"    const data = {\n"
"        name: 'Client Name',\n"
"        redirect: 'http://example.com/callback'\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:340
#, markdown-text, no-wrap
msgid ""
"    axios.post('/oauth/clients', data)\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:342
#, markdown-text, no-wrap
msgid "<a name=\"put-oauthclientsclient-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:342
#, markdown-text, no-wrap
msgid "`PUT /oauth/clients/{client-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:345
#, markdown-text
msgid ""
"This route is used to update clients. It requires two pieces of data: the "
"client's `name` and a `redirect` URL. The `redirect` URL is where the user "
"will be redirected after approving or denying a request for "
"authorization. The route will return the updated client instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:350
#, markdown-text, no-wrap
msgid ""
"    const data = {\n"
"        name: 'New Client Name',\n"
"        redirect: 'http://example.com/callback'\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:358
#, markdown-text, no-wrap
msgid ""
"    axios.put('/oauth/clients/' + clientId, data)\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:360
#, markdown-text, no-wrap
msgid "<a name=\"delete-oauthclientsclient-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:360
#, markdown-text, no-wrap
msgid "`DELETE /oauth/clients/{client-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:363
#, markdown-text
msgid "This route is used to delete clients:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:368
#, markdown-text, no-wrap
msgid ""
"    axios.delete('/oauth/clients/' + clientId)\n"
"        .then(response => {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:370
#, markdown-text, no-wrap
msgid "<a name=\"requesting-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:370 docs/8.x/passport.md:555 docs/8.x/passport.md:646
#, markdown-text, no-wrap
msgid "Requesting Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:373
#, markdown-text, no-wrap
msgid "<a name=\"requesting-tokens-redirecting-for-authorization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:373 docs/8.x/passport.md:571
#, markdown-text, no-wrap
msgid "Redirecting For Authorization"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:376
#, markdown-text
msgid ""
"Once a client has been created, developers may use their client ID and "
"secret to request an authorization code and access token from your "
"application. First, the consuming application should make a redirect request "
"to your application's `/oauth/authorize` route like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:379 docs/8.x/passport.md:577
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:382 docs/8.x/passport.md:580 docs/8.x/passport.md:770
#, markdown-text, no-wrap
msgid ""
"    Route::get('/redirect', function (Request $request) {\n"
"        $request->session()->put('state', $state = Str::random(40));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:390
#, markdown-text, no-wrap
msgid ""
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:393 docs/8.x/passport.md:601 docs/8.x/passport.md:781
#: docs/8.x/passport.md:1026
#, markdown-text, no-wrap
msgid ""
"        return "
"redirect('http://passport-app.com/oauth/authorize?'.$query);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:395 docs/8.x/passport.md:783
#, markdown-text, no-wrap
msgid ""
"> {tip} Remember, the `/oauth/authorize` route is already defined by the "
"`Passport::routes` method. You do not need to manually define this route.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:397
#, markdown-text, no-wrap
msgid "<a name=\"approving-the-request\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:397
#, markdown-text, no-wrap
msgid "Approving The Request"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:400
#, markdown-text
msgid ""
"When receiving authorization requests, Passport will automatically display a "
"template to the user allowing them to approve or deny the authorization "
"request. If they approve the request, they will be redirected back to the "
"`redirect_uri` that was specified by the consuming application. The "
"`redirect_uri` must match the `redirect` URL that was specified when the "
"client was created."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:402
#, markdown-text
msgid ""
"If you would like to customize the authorization approval screen, you may "
"publish Passport's views using the `vendor:publish` Artisan command. The "
"published views will be placed in the `resources/views/vendor/passport` "
"directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:404
#, markdown-text, no-wrap
msgid "    php artisan vendor:publish --tag=passport-views\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:406
#, markdown-text
msgid ""
"Sometimes you may wish to skip the authorization prompt, such as when "
"authorizing a first-party client. You may accomplish this by [extending the "
"`Client` model](#overriding-default-models) and defining a "
"`skipsAuthorization` method. If `skipsAuthorization` returns `true` the "
"client will be approved and the user will be redirected back to the "
"`redirect_uri` immediately:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:410
#, markdown-text, no-wrap
msgid "    namespace App\\Models\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:412
#, markdown-text, no-wrap
msgid "    use Laravel\\Passport\\Client as BaseClient;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:425
#, markdown-text, no-wrap
msgid ""
"    class Client extends BaseClient\n"
"    {\n"
"        /**\n"
"         * Determine if the client should skip the authorization prompt.\n"
"         *\n"
"         * @return bool\n"
"         */\n"
"        public function skipsAuthorization()\n"
"        {\n"
"            return $this->firstParty();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:427
#, markdown-text, no-wrap
msgid ""
"<a "
"name=\"requesting-tokens-converting-authorization-codes-to-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:427 docs/8.x/passport.md:603
#, markdown-text, no-wrap
msgid "Converting Authorization Codes To Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:430
#, markdown-text
msgid ""
"If the user approves the authorization request, they will be redirected back "
"to the consuming application. The consumer should first verify the `state` "
"parameter against the value that was stored prior to the redirect. If the "
"state parameter matches then the consumer should issue a `POST` request to "
"your application to request an access token. The request should include the "
"authorization code that was issued by your application when the user "
"approved the authorization request:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:433 docs/8.x/passport.md:611
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:436 docs/8.x/passport.md:614
#, markdown-text, no-wrap
msgid ""
"    Route::get('/callback', function (Request $request) {\n"
"        $state = $request->session()->pull('state');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:441 docs/8.x/passport.md:621
#, markdown-text, no-wrap
msgid ""
"        throw_unless(\n"
"            strlen($state) > 0 && $state === $request->state,\n"
"            InvalidArgumentException::class\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:449
#, markdown-text, no-wrap
msgid ""
"        $response = "
"Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"            'grant_type' => 'authorization_code',\n"
"            'client_id' => 'client-id',\n"
"            'client_secret' => 'client-secret',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'code' => $request->code,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:452 docs/8.x/passport.md:632
#, markdown-text, no-wrap
msgid ""
"        return $response->json();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:454 docs/8.x/passport.md:497
#, markdown-text
msgid ""
"This `/oauth/token` route will return a JSON response containing "
"`access_token`, `refresh_token`, and `expires_in` attributes. The "
"`expires_in` attribute contains the number of seconds until the access token "
"expires."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:456
#, markdown-text, no-wrap
msgid ""
"> {tip} Like the `/oauth/authorize` route, the `/oauth/token` route is "
"defined for you by the `Passport::routes` method. There is no need to "
"manually define this route.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:458
#, markdown-text, no-wrap
msgid "<a name=\"tokens-json-api\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:461
#, markdown-text
msgid ""
"Passport also includes a JSON API for managing authorized access tokens. You "
"may pair this with your own frontend to offer your users a dashboard for "
"managing access tokens. For convenience, we'll use "
"[Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP "
"requests to the endpoints. The JSON API is guarded by the `web` and `auth` "
"middleware; therefore, it may only be called from your own application."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:463
#, markdown-text, no-wrap
msgid "<a name=\"get-oauthtokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:463
#, markdown-text, no-wrap
msgid "`GET /oauth/tokens`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:466
#, markdown-text
msgid ""
"This route returns all of the authorized access tokens that the "
"authenticated user has created. This is primarily useful for listing all of "
"the user's tokens so that they can revoke them:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:471
#, markdown-text, no-wrap
msgid ""
"    axios.get('/oauth/tokens')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:473
#, markdown-text, no-wrap
msgid "<a name=\"delete-oauthtokenstoken-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:473
#, markdown-text, no-wrap
msgid "`DELETE /oauth/tokens/{token-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:476
#, markdown-text
msgid ""
"This route may be used to revoke authorized access tokens and their related "
"refresh tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:478
#, markdown-text, no-wrap
msgid "    axios.delete('/oauth/tokens/' + tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:480
#, markdown-text, no-wrap
msgid "<a name=\"refreshing-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:480
#, markdown-text, no-wrap
msgid "Refreshing Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:483
#, markdown-text
msgid ""
"If your application issues short-lived access tokens, users will need to "
"refresh their access tokens via the refresh token that was provided to them "
"when the access token was issued:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:485 docs/8.x/passport.md:651 docs/8.x/passport.md:671
#: docs/8.x/passport.md:819 docs/8.x/passport.md:956
#, markdown-text, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:493
#, markdown-text, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.com/oauth/token', "
"[\n"
"        'grant_type' => 'refresh_token',\n"
"        'refresh_token' => 'the-refresh-token',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'scope' => '',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:495 docs/8.x/passport.md:662 docs/8.x/passport.md:963
#, markdown-text, no-wrap
msgid "    return $response->json();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:499
#, markdown-text, no-wrap
msgid "<a name=\"revoking-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:499
#, markdown-text, no-wrap
msgid "Revoking Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:502
#, markdown-text
msgid ""
"You may revoke a token by using the `revokeAccessToken` method on the "
"`Laravel\\Passport\\TokenRepository`. You may revoke a token's refresh "
"tokens using the `revokeRefreshTokensByAccessTokenId` method on the "
"`Laravel\\Passport\\RefreshTokenRepository`. These classes may be resolved "
"using Laravel's [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:505
#, markdown-text, no-wrap
msgid ""
"    use Laravel\\Passport\\TokenRepository;\n"
"    use Laravel\\Passport\\RefreshTokenRepository;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:508
#, markdown-text, no-wrap
msgid ""
"    $tokenRepository = app(TokenRepository::class);\n"
"    $refreshTokenRepository = app(RefreshTokenRepository::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:511
#, markdown-text, no-wrap
msgid ""
"    // Revoke an access token...\n"
"    $tokenRepository->revokeAccessToken($tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:514
#, markdown-text, no-wrap
msgid ""
"    // Revoke all of the token's refresh tokens...\n"
"    $refreshTokenRepository->revokeRefreshTokensByAccessTokenId($tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:516
#, markdown-text, no-wrap
msgid "<a name=\"purging-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:516
#, markdown-text, no-wrap
msgid "Purging Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:519
#, markdown-text
msgid ""
"When tokens have been revoked or expired, you might want to purge them from "
"the database. Passport's included `passport:purge` Artisan command can do "
"this for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:522
#, markdown-text, no-wrap
msgid ""
"    # Purge revoked and expired tokens and auth codes...\n"
"    php artisan passport:purge\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:525
#, markdown-text, no-wrap
msgid ""
"    # Only purge revoked tokens and auth codes...\n"
"    php artisan passport:purge --revoked\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:528
#, markdown-text, no-wrap
msgid ""
"    # Only purge expired tokens and auth codes...\n"
"    php artisan passport:purge --expired\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:530
#, markdown-text
msgid ""
"You may also configure a [scheduled job](/docs/{{version}}/scheduling) in "
"your application's `App\\Console\\Kernel` class to automatically prune your "
"tokens on a schedule:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:541
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->command('passport:purge')->hourly();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:543
#, markdown-text, no-wrap
msgid "<a name=\"code-grant-pkce\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:543
#, markdown-text, no-wrap
msgid "Authorization Code Grant with PKCE"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:546
#, markdown-text
msgid ""
"The Authorization Code grant with \"Proof Key for Code Exchange\" (PKCE) is "
"a secure way to authenticate single page applications or native applications "
"to access your API. This grant should be used when you can't guarantee that "
"the client secret will be stored confidentially or in order to mitigate the "
"threat of having the authorization code intercepted by an attacker. A "
"combination of a \"code verifier\" and a \"code challenge\" replaces the "
"client secret when exchanging the authorization code for an access token."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:548
#, markdown-text, no-wrap
msgid "<a name=\"creating-a-auth-pkce-grant-client\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:548
#, markdown-text, no-wrap
msgid "Creating The Client"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:551
#, markdown-text
msgid ""
"Before your application can issue tokens via the authorization code grant "
"with PKCE, you will need to create a PKCE-enabled client. You may do this "
"using the `passport:client` Artisan command with the `--public` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:553
#, markdown-text, no-wrap
msgid "    php artisan passport:client --public\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:555
#, markdown-text, no-wrap
msgid "<a name=\"requesting-auth-pkce-grant-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:558
#, markdown-text, no-wrap
msgid "<a name=\"code-verifier-code-challenge\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:558
#, markdown-text, no-wrap
msgid "Code Verifier & Code Challenge"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:561
#, markdown-text
msgid ""
"As this authorization grant does not provide a client secret, developers "
"will need to generate a combination of a code verifier and a code challenge "
"in order to request a token."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:563
#, markdown-text
msgid ""
"The code verifier should be a random string of between 43 and 128 characters "
"containing letters, numbers, and `\"-\"`, `\".\"`, `\"_\"`, `\"~\"` "
"characters, as defined in the [RFC 7636 "
"specification](https://tools.ietf.org/html/rfc7636)."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:565
#, markdown-text
msgid ""
"The code challenge should be a Base64 encoded string with URL and "
"filename-safe characters. The trailing `'='` characters should be removed "
"and no line breaks, whitespace, or other additional characters should be "
"present."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:567
#, markdown-text, no-wrap
msgid "    $encoded = base64_encode(hash('sha256', $code_verifier, true));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:569
#, markdown-text, no-wrap
msgid "    $codeChallenge = strtr(rtrim($encoded, '='), '+/', '-_');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:571
#, markdown-text, no-wrap
msgid "<a name=\"code-grant-pkce-redirecting-for-authorization\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:574
#, markdown-text
msgid ""
"Once a client has been created, you may use the client ID and the generated "
"code verifier and code challenge to request an authorization code and access "
"token from your application. First, the consuming application should make a "
"redirect request to your application's `/oauth/authorize` route:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:584
#, markdown-text, no-wrap
msgid ""
"        $request->session()->put(\n"
"            'code_verifier', $code_verifier = Str::random(128)\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:588
#, markdown-text, no-wrap
msgid ""
"        $codeChallenge = strtr(rtrim(\n"
"            base64_encode(hash('sha256', $code_verifier, true))\n"
"        , '='), '+/', '-_');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:598
#, markdown-text, no-wrap
msgid ""
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"            'code_challenge' => $codeChallenge,\n"
"            'code_challenge_method' => 'S256',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:603
#, markdown-text, no-wrap
msgid ""
"<a "
"name=\"code-grant-pkce-converting-authorization-codes-to-access-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:606
#, markdown-text
msgid ""
"If the user approves the authorization request, they will be redirected back "
"to the consuming application. The consumer should verify the `state` "
"parameter against the value that was stored prior to the redirect, as in the "
"standard Authorization Code Grant."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:608
#, markdown-text
msgid ""
"If the state parameter matches, the consumer should issue a `POST` request "
"to your application to request an access token. The request should include "
"the authorization code that was issued by your application when the user "
"approved the authorization request along with the originally generated code "
"verifier:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:616
#, markdown-text, no-wrap
msgid "        $codeVerifier = $request->session()->pull('code_verifier');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:629
#, markdown-text, no-wrap
msgid ""
"        $response = "
"Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"            'grant_type' => 'authorization_code',\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'code_verifier' => $codeVerifier,\n"
"            'code' => $request->code,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:634
#, markdown-text, no-wrap
msgid "<a name=\"password-grant-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:634
#, markdown-text, no-wrap
msgid "Password Grant Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:637
#, markdown-text
msgid ""
"The OAuth2 password grant allows your other first-party clients, such as a "
"mobile application, to obtain an access token using an email address / "
"username and password. This allows you to issue access tokens securely to "
"your first-party clients without requiring your users to go through the "
"entire OAuth2 authorization code redirect flow."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:639
#, markdown-text, no-wrap
msgid "<a name=\"creating-a-password-grant-client\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:639
#, markdown-text, no-wrap
msgid "Creating A Password Grant Client"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:642
#, markdown-text
msgid ""
"Before your application can issue tokens via the password grant, you will "
"need to create a password grant client. You may do this using the "
"`passport:client` Artisan command with the `--password` option. **If you "
"have already run the `passport:install` command, you do not need to run this "
"command:**"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:644
#, markdown-text, no-wrap
msgid "    php artisan passport:client --password\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:646
#, markdown-text, no-wrap
msgid "<a name=\"requesting-password-grant-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:649
#, markdown-text
msgid ""
"Once you have created a password grant client, you may request an access "
"token by issuing a `POST` request to the `/oauth/token` route with the "
"user's email address and password. Remember, this route is already "
"registered by the `Passport::routes` method so there is no need to define it "
"manually. If the request is successful, you will receive an `access_token` "
"and `refresh_token` in the JSON response from the server:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:660
#, markdown-text, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.com/oauth/token', "
"[\n"
"        'grant_type' => 'password',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'username' => 'taylor@laravel.com',\n"
"        'password' => 'my-password',\n"
"        'scope' => '',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:664
#, markdown-text, no-wrap
msgid ""
"> {tip} Remember, access tokens are long-lived by default. However, you are "
"free to [configure your maximum access token lifetime](#configuration) if "
"needed.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:666
#, markdown-text, no-wrap
msgid "<a name=\"requesting-all-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:666
#, markdown-text, no-wrap
msgid "Requesting All Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:669
#, markdown-text
msgid ""
"When using the password grant or client credentials grant, you may wish to "
"authorize the token for all of the scopes supported by your application. You "
"can do this by requesting the `*` scope. If you request the `*` scope, the "
"`can` method on the token instance will always return `true`. This scope may "
"only be assigned to a token that is issued using the `password` or "
"`client_credentials` grant:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:680
#, markdown-text, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.com/oauth/token', "
"[\n"
"        'grant_type' => 'password',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'username' => 'taylor@laravel.com',\n"
"        'password' => 'my-password',\n"
"        'scope' => '*',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:682
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-user-provider\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:682
#, markdown-text, no-wrap
msgid "Customizing The User Provider"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:685
#, markdown-text
msgid ""
"If your application uses more than one [authentication user "
"provider](/docs/{{version}}/authentication#introduction), you may specify "
"which user provider the password grant client uses by providing a "
"`--provider` option when creating the client via the `artisan "
"passport:client --password` command. The given provider name should match a "
"valid provider defined in your application's `config/auth.php` configuration "
"file. You can then [protect your route using middleware](#via-middleware) to "
"ensure that only users from the guard's specified provider are authorized."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:687
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-username-field\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:687
#, markdown-text, no-wrap
msgid "Customizing The Username Field"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:690
#, markdown-text
msgid ""
"When authenticating using the password grant, Passport will use the `email` "
"attribute of your authenticatable model as the \"username\". However, you "
"may customize this behavior by defining a `findForPassport` method on your "
"model:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:698
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:702 docs/8.x/passport.md:732
#, markdown-text, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:714
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Find the user instance for the given username.\n"
"         *\n"
"         * @param  string  $username\n"
"         * @return \\App\\Models\\User\n"
"         */\n"
"        public function findForPassport($username)\n"
"        {\n"
"            return $this->where('username', $username)->first();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:716
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-password-validation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:716
#, markdown-text, no-wrap
msgid "Customizing The Password Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:719
#, markdown-text
msgid ""
"When authenticating using the password grant, Passport will use the "
"`password` attribute of your model to validate the given password. If your "
"model does not have a `password` attribute or you wish to customize the "
"password validation logic, you can define a "
"`validateForPassportPasswordGrant` method on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:728
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:744
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Validate the password of the user for the Passport password "
"grant.\n"
"         *\n"
"         * @param  string  $password\n"
"         * @return bool\n"
"         */\n"
"        public function validateForPassportPasswordGrant($password)\n"
"        {\n"
"            return Hash::check($password, $this->password);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:746
#, markdown-text, no-wrap
msgid "<a name=\"implicit-grant-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:746
#, markdown-text, no-wrap
msgid "Implicit Grant Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:749
#, markdown-text
msgid ""
"The implicit grant is similar to the authorization code grant; however, the "
"token is returned to the client without exchanging an authorization "
"code. This grant is most commonly used for JavaScript or mobile applications "
"where the client credentials can't be securely stored. To enable the grant, "
"call the `enableImplicitGrant` method in the `boot` method of your "
"application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:763
#, markdown-text, no-wrap
msgid ""
"        Passport::enableImplicitGrant();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:765
#, markdown-text
msgid ""
"Once the grant has been enabled, developers may use their client ID to "
"request an access token from your application. The consuming application "
"should make a redirect request to your application's `/oauth/authorize` "
"route like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:767 docs/8.x/passport.md:1066
#, markdown-text, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:778
#, markdown-text, no-wrap
msgid ""
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'token',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:785
#, markdown-text, no-wrap
msgid "<a name=\"client-credentials-grant-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:785
#, markdown-text, no-wrap
msgid "Client Credentials Grant Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:788
#, markdown-text
msgid ""
"The client credentials grant is suitable for machine-to-machine "
"authentication. For example, you might use this grant in a scheduled job "
"which is performing maintenance tasks over an API."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:790
#, markdown-text
msgid ""
"Before your application can issue tokens via the client credentials grant, "
"you will need to create a client credentials grant client. You may do this "
"using the `--client` option of the `passport:client` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:792
#, markdown-text, no-wrap
msgid "    php artisan passport:client --client\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:794
#, markdown-text
msgid ""
"Next, to use this grant type, you need to add the `CheckClientCredentials` "
"middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` "
"file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:796
#, markdown-text, no-wrap
msgid "    use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:800
#, markdown-text, no-wrap
msgid ""
"    protected $routeMiddleware = [\n"
"        'client' => CheckClientCredentials::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:802
#, markdown-text
msgid "Then, attach the middleware to a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:806
#, markdown-text, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        ...\n"
"    })->middleware('client');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:808
#, markdown-text
msgid ""
"To restrict access to the route to specific scopes, you may provide a "
"comma-delimited list of the required scopes when attaching the `client` "
"middleware to the route:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:812
#, markdown-text, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        ...\n"
"    })->middleware('client:check-status,your-scope');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:814
#, markdown-text, no-wrap
msgid "<a name=\"retrieving-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:814
#, markdown-text, no-wrap
msgid "Retrieving Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:817
#, markdown-text
msgid ""
"To retrieve a token using this grant type, make a request to the "
"`oauth/token` endpoint:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:826
#, markdown-text, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.com/oauth/token', "
"[\n"
"        'grant_type' => 'client_credentials',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'scope' => 'your-scope',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:828
#, markdown-text, no-wrap
msgid "    return $response->json()['access_token'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:830
#, markdown-text, no-wrap
msgid "<a name=\"personal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:830
#, markdown-text, no-wrap
msgid "Personal Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:833
#, markdown-text
msgid ""
"Sometimes, your users may want to issue access tokens to themselves without "
"going through the typical authorization code redirect flow. Allowing users "
"to issue tokens to themselves via your application's UI can be useful for "
"allowing users to experiment with your API or may serve as a simpler "
"approach to issuing access tokens in general."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:835
#, markdown-text, no-wrap
msgid "<a name=\"creating-a-personal-access-client\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:835
#, markdown-text, no-wrap
msgid "Creating A Personal Access Client"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:838
#, markdown-text
msgid ""
"Before your application can issue personal access tokens, you will need to "
"create a personal access client. You may do this by executing the "
"`passport:client` Artisan command with the `--personal` option. If you have "
"already run the `passport:install` command, you do not need to run this "
"command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:840
#, markdown-text, no-wrap
msgid "    php artisan passport:client --personal\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:842
#, markdown-text
msgid ""
"After creating your personal access client, place the client's ID and "
"plain-text secret value in your application's `.env` file:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/passport.md:843
#, no-wrap
msgid ""
"PASSPORT_PERSONAL_ACCESS_CLIENT_ID=\"client-id-value\"\n"
"PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=\"unhashed-client-secret-value\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:849
#, markdown-text, no-wrap
msgid "<a name=\"managing-personal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:849
#, markdown-text, no-wrap
msgid "Managing Personal Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:852
#, markdown-text
msgid ""
"Once you have created a personal access client, you may issue tokens for a "
"given user using the `createToken` method on the `App\\Models\\User` model "
"instance. The `createToken` method accepts the name of the token as its "
"first argument and an optional array of [scopes](#token-scopes) as its "
"second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:854
#, markdown-text, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:856
#, markdown-text, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:859
#, markdown-text, no-wrap
msgid ""
"    // Creating a token without scopes...\n"
"    $token = $user->createToken('Token Name')->accessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:862
#, markdown-text, no-wrap
msgid ""
"    // Creating a token with scopes...\n"
"    $token = $user->createToken('My Token', "
"['place-orders'])->accessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:864
#, markdown-text, no-wrap
msgid "<a name=\"personal-access-tokens-json-api\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:867
#, markdown-text
msgid ""
"Passport also includes a JSON API for managing personal access tokens. You "
"may pair this with your own frontend to offer your users a dashboard for "
"managing personal access tokens. Below, we'll review all of the API "
"endpoints for managing personal access tokens. For convenience, we'll use "
"[Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP "
"requests to the endpoints."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:871
#, markdown-text, no-wrap
msgid "<a name=\"get-oauthscopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:871
#, markdown-text, no-wrap
msgid "`GET /oauth/scopes`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:874
#, markdown-text
msgid ""
"This route returns all of the [scopes](#token-scopes) defined for your "
"application. You may use this route to list the scopes a user may assign to "
"a personal access token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:879
#, markdown-text, no-wrap
msgid ""
"    axios.get('/oauth/scopes')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:881
#, markdown-text, no-wrap
msgid "<a name=\"get-oauthpersonal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:881
#, markdown-text, no-wrap
msgid "`GET /oauth/personal-access-tokens`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:884
#, markdown-text
msgid ""
"This route returns all of the personal access tokens that the authenticated "
"user has created. This is primarily useful for listing all of the user's "
"tokens so that they may edit or revoke them:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:889
#, markdown-text, no-wrap
msgid ""
"    axios.get('/oauth/personal-access-tokens')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:891
#, markdown-text, no-wrap
msgid "<a name=\"post-oauthpersonal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:891
#, markdown-text, no-wrap
msgid "`POST /oauth/personal-access-tokens`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:894
#, markdown-text
msgid ""
"This route creates new personal access tokens. It requires two pieces of "
"data: the token's `name` and the `scopes` that should be assigned to the "
"token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:899
#, markdown-text, no-wrap
msgid ""
"    const data = {\n"
"        name: 'Token Name',\n"
"        scopes: []\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:907
#, markdown-text, no-wrap
msgid ""
"    axios.post('/oauth/personal-access-tokens', data)\n"
"        .then(response => {\n"
"            console.log(response.data.accessToken);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:909
#, markdown-text, no-wrap
msgid "<a name=\"delete-oauthpersonal-access-tokenstoken-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:909
#, markdown-text, no-wrap
msgid "`DELETE /oauth/personal-access-tokens/{token-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:912
#, markdown-text
msgid "This route may be used to revoke personal access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:914
#, markdown-text, no-wrap
msgid "    axios.delete('/oauth/personal-access-tokens/' + tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:916
#, markdown-text, no-wrap
msgid "<a name=\"protecting-routes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:916
#, markdown-text, no-wrap
msgid "Protecting Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:919
#, markdown-text, no-wrap
msgid "<a name=\"via-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:919
#, markdown-text, no-wrap
msgid "Via Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:922
#, markdown-text
msgid ""
"Passport includes an [authentication "
"guard](/docs/{{version}}/authentication#adding-custom-guards) that will "
"validate access tokens on incoming requests. Once you have configured the "
"`api` guard to use the `passport` driver, you only need to specify the "
"`auth:api` middleware on any routes that should require a valid access "
"token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:926
#, markdown-text, no-wrap
msgid ""
"    Route::get('/user', function () {\n"
"        //\n"
"    })->middleware('auth:api');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:928
#, markdown-text, no-wrap
msgid "<a name=\"multiple-authentication-guards\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:928
#, markdown-text, no-wrap
msgid "Multiple Authentication Guards"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:931
#, markdown-text
msgid ""
"If your application authenticates different types of users that perhaps use "
"entirely different Eloquent models, you will likely need to define a guard "
"configuration for each user provider type in your application. This allows "
"you to protect requests intended for specific user providers. For example, "
"given the following guard configuration the `config/auth.php` configuration "
"file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:936
#, markdown-text, no-wrap
msgid ""
"    'api' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'users',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:941
#, markdown-text, no-wrap
msgid ""
"    'api-customers' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'customers',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:943
#, markdown-text
msgid ""
"The following route will utilize the `api-customers` guard, which uses the "
"`customers` user provider, to authenticate incoming requests:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:947
#, markdown-text, no-wrap
msgid ""
"    Route::get('/customer', function () {\n"
"        //\n"
"    })->middleware('auth:api-customers');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:949
#, markdown-text, no-wrap
msgid ""
"> {tip} For more information on using multiple user providers with Passport, "
"please consult the [password grant "
"documentation](#customizing-the-user-provider).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:951
#, markdown-text, no-wrap
msgid "<a name=\"passing-the-access-token\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:951
#, markdown-text, no-wrap
msgid "Passing The Access Token"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:954
#, markdown-text
msgid ""
"When calling routes that are protected by Passport, your application's API "
"consumers should specify their access token as a `Bearer` token in the "
"`Authorization` header of their request. For example, when using the Guzzle "
"HTTP library:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:961
#, markdown-text, no-wrap
msgid ""
"    $response = Http::withHeaders([\n"
"        'Accept' => 'application/json',\n"
"        'Authorization' => 'Bearer '.$accessToken,\n"
"    ])->get('https://passport-app.com/api/user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:965
#, markdown-text, no-wrap
msgid "<a name=\"token-scopes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:965
#, markdown-text, no-wrap
msgid "Token Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:968
#, markdown-text
msgid ""
"Scopes allow your API clients to request a specific set of permissions when "
"requesting authorization to access an account. For example, if you are "
"building an e-commerce application, not all API consumers will need the "
"ability to place orders. Instead, you may allow the consumers to only "
"request authorization to access order shipment statuses. In other words, "
"scopes allow your application's users to limit the actions a third-party "
"application can perform on their behalf."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:970
#, markdown-text, no-wrap
msgid "<a name=\"defining-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:970
#, markdown-text, no-wrap
msgid "Defining Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:973
#, markdown-text
msgid ""
"You may define your API's scopes using the `Passport::tokensCan` method in "
"the `boot` method of your application's "
"`App\\Providers\\AuthServiceProvider` class. The `tokensCan` method accepts "
"an array of scope names and scope descriptions. The scope description may be "
"anything you wish and will be displayed to users on the authorization "
"approval screen:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:990
#, markdown-text, no-wrap
msgid ""
"        Passport::tokensCan([\n"
"            'place-orders' => 'Place orders',\n"
"            'check-status' => 'Check order status',\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:992
#, markdown-text, no-wrap
msgid "<a name=\"default-scope\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:992
#, markdown-text, no-wrap
msgid "Default Scope"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:995
#, markdown-text
msgid ""
"If a client does not request any specific scopes, you may configure your "
"Passport server to attach default scope(s) to the token using the "
"`setDefaultScope` method. Typically, you should call this method from the "
"`boot` method of your application's `App\\Providers\\AuthServiceProvider` "
"class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1002
#, markdown-text, no-wrap
msgid ""
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1007
#, markdown-text, no-wrap
msgid ""
"    Passport::setDefaultScope([\n"
"        'check-status',\n"
"        'place-orders',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1009
#, markdown-text, no-wrap
msgid "<a name=\"assigning-scopes-to-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:1009
#, markdown-text, no-wrap
msgid "Assigning Scopes To Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1012
#, markdown-text, no-wrap
msgid "<a name=\"when-requesting-authorization-codes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1012
#, markdown-text, no-wrap
msgid "When Requesting Authorization Codes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1015
#, markdown-text
msgid ""
"When requesting an access token using the authorization code grant, "
"consumers should specify their desired scopes as the `scope` query string "
"parameter. The `scope` parameter should be a space-delimited list of scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1023
#, markdown-text, no-wrap
msgid ""
"    Route::get('/redirect', function () {\n"
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://example.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => 'place-orders check-status',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1028
#, markdown-text, no-wrap
msgid "<a name=\"when-issuing-personal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1028
#, markdown-text, no-wrap
msgid "When Issuing Personal Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1031
#, markdown-text
msgid ""
"If you are issuing personal access tokens using the `App\\Models\\User` "
"model's `createToken` method, you may pass the array of desired scopes as "
"the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1033
#, markdown-text, no-wrap
msgid ""
"    $token = $user->createToken('My Token', "
"['place-orders'])->accessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1035
#, markdown-text, no-wrap
msgid "<a name=\"checking-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:1035
#, markdown-text, no-wrap
msgid "Checking Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1038
#, markdown-text
msgid ""
"Passport includes two middleware that may be used to verify that an incoming "
"request is authenticated with a token that has been granted a given "
"scope. To get started, add the following middleware to the "
"`$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1041
#, markdown-text, no-wrap
msgid ""
"    'scopes' => \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n"
"    'scope' => "
"\\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1043
#, markdown-text, no-wrap
msgid "<a name=\"check-for-all-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1043
#, markdown-text, no-wrap
msgid "Check For All Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1046
#, markdown-text
msgid ""
"The `scopes` middleware may be assigned to a route to verify that the "
"incoming request's access token has all of the listed scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1050
#, markdown-text, no-wrap
msgid ""
"    Route::get('/orders', function () {\n"
"        // Access token has both \"check-status\" and \"place-orders\" "
"scopes...\n"
"    })->middleware(['auth:api', 'scopes:check-status,place-orders']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1052
#, markdown-text, no-wrap
msgid "<a name=\"check-for-any-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1052
#, markdown-text, no-wrap
msgid "Check For Any Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1055
#, markdown-text
msgid ""
"The `scope` middleware may be assigned to a route to verify that the "
"incoming request's access token has *at least one* of the listed scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1059
#, markdown-text, no-wrap
msgid ""
"    Route::get('/orders', function () {\n"
"        // Access token has either \"check-status\" or \"place-orders\" "
"scope...\n"
"    })->middleware(['auth:api', 'scope:check-status,place-orders']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1061
#, markdown-text, no-wrap
msgid "<a name=\"checking-scopes-on-a-token-instance\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1061
#, markdown-text, no-wrap
msgid "Checking Scopes On A Token Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1064
#, markdown-text
msgid ""
"Once an access token authenticated request has entered your application, you "
"may still check if the token has a given scope using the `tokenCan` method "
"on the authenticated `App\\Models\\User` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1072
#, markdown-text, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        if ($request->user()->tokenCan('place-orders')) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1074
#, markdown-text, no-wrap
msgid "<a name=\"additional-scope-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1074
#, markdown-text, no-wrap
msgid "Additional Scope Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1077
#, markdown-text
msgid "The `scopeIds` method will return an array of all defined IDs / names:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1081
#, markdown-text, no-wrap
msgid "    Passport::scopeIds();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1083
#, markdown-text
msgid ""
"The `scopes` method will return an array of all defined scopes as instances "
"of `Laravel\\Passport\\Scope`:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1085
#, markdown-text, no-wrap
msgid "    Passport::scopes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1087
#, markdown-text
msgid ""
"The `scopesFor` method will return an array of `Laravel\\Passport\\Scope` "
"instances matching the given IDs / names:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1089
#, markdown-text, no-wrap
msgid "    Passport::scopesFor(['place-orders', 'check-status']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1091
#, markdown-text
msgid ""
"You may determine if a given scope has been defined using the `hasScope` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1093
#, markdown-text, no-wrap
msgid "    Passport::hasScope('place-orders');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1095
#, markdown-text, no-wrap
msgid "<a name=\"consuming-your-api-with-javascript\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:1095
#, markdown-text, no-wrap
msgid "Consuming Your API With JavaScript"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1098
#, markdown-text
msgid ""
"When building an API, it can be extremely useful to be able to consume your "
"own API from your JavaScript application. This approach to API development "
"allows your own application to consume the same API that you are sharing "
"with the world. The same API may be consumed by your web application, mobile "
"applications, third-party applications, and any SDKs that you may publish on "
"various package managers."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1100
#, markdown-text
msgid ""
"Typically, if you want to consume your API from your JavaScript application, "
"you would need to manually send an access token to the application and pass "
"it with each request to your application. However, Passport includes a "
"middleware that can handle this for you. All you need to do is add the "
"`CreateFreshApiToken` middleware to your `web` middleware group in your "
"`app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1105
#, markdown-text, no-wrap
msgid ""
"    'web' => [\n"
"        // Other middleware...\n"
"        \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1107
#, markdown-text, no-wrap
msgid ""
"> {note} You should ensure that the `CreateFreshApiToken` middleware is the "
"last middleware listed in your middleware stack.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1109
#, markdown-text
msgid ""
"This middleware will attach a `laravel_token` cookie to your outgoing "
"responses. This cookie contains an encrypted JWT that Passport will use to "
"authenticate API requests from your JavaScript application. The JWT has a "
"lifetime equal to your `session.lifetime` configuration value. Now, since "
"the browser will automatically send the cookie with all subsequent requests, "
"you may make requests to your application's API without explicitly passing "
"an access token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1114
#, markdown-text, no-wrap
msgid ""
"    axios.get('/api/user')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1116
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-cookie-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1116
#, markdown-text, no-wrap
msgid "Customizing The Cookie Name"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1119
#, markdown-text
msgid ""
"If needed, you can customize the `laravel_token` cookie's name using the "
"`Passport::cookie` method. Typically, this method should be called from the "
"`boot` method of your application's `App\\Providers\\AuthServiceProvider` "
"class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1133
#, markdown-text, no-wrap
msgid ""
"        Passport::cookie('custom_name');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1135
#, markdown-text, no-wrap
msgid "<a name=\"csrf-protection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1135
#, markdown-text, no-wrap
msgid "CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1138
#, markdown-text
msgid ""
"When using this method of authentication, you will need to ensure a valid "
"CSRF token header is included in your requests. The default Laravel "
"JavaScript scaffolding includes an Axios instance, which will automatically "
"use the encrypted `XSRF-TOKEN` cookie value to send an `X-XSRF-TOKEN` header "
"on same-origin requests."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1140
#, markdown-text, no-wrap
msgid ""
"> {tip} If you choose to send the `X-CSRF-TOKEN` header instead of "
"`X-XSRF-TOKEN`, you will need to use the unencrypted token provided by "
"`csrf_token()`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1142
#, markdown-text, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:1142
#, markdown-text, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1145
#, markdown-text
msgid ""
"Passport raises events when issuing access tokens and refresh tokens. You "
"may use these events to prune or revoke other access tokens in your "
"database. If you would like, you may attach listeners to these events in "
"your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1155
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Laravel\\Passport\\Events\\AccessTokenCreated' => [\n"
"            'App\\Listeners\\RevokeOldTokens',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1160
#, markdown-text, no-wrap
msgid ""
"        'Laravel\\Passport\\Events\\RefreshTokenCreated' => [\n"
"            'App\\Listeners\\PruneOldTokens',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1162
#, markdown-text, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:1162
#, markdown-text, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1165
#, markdown-text
msgid ""
"Passport's `actingAs` method may be used to specify the currently "
"authenticated user as well as its scopes. The first argument given to the "
"`actingAs` method is the user instance and the second is an array of scopes "
"that should be granted to the user's token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1168
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1175
#, markdown-text, no-wrap
msgid ""
"    public function test_servers_can_be_created()\n"
"    {\n"
"        Passport::actingAs(\n"
"            User::factory()->create(),\n"
"            ['create-servers']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1177
#, markdown-text, no-wrap
msgid "        $response = $this->post('/api/create-server');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1180
#, markdown-text, no-wrap
msgid ""
"        $response->assertStatus(201);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1182
#, markdown-text
msgid ""
"Passport's `actingAsClient` method may be used to specify the currently "
"authenticated client as well as its scopes. The first argument given to the "
"`actingAsClient` method is the client instance and the second is an array of "
"scopes that should be granted to the client's token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1185
#, markdown-text, no-wrap
msgid ""
"    use Laravel\\Passport\\Client;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1192
#, markdown-text, no-wrap
msgid ""
"    public function test_orders_can_be_retrieved()\n"
"    {\n"
"        Passport::actingAsClient(\n"
"            Client::factory()->create(),\n"
"            ['check-status']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1194
#, markdown-text, no-wrap
msgid "        $response = $this->get('/api/orders');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1196
#, markdown-text, no-wrap
msgid ""
"        $response->assertStatus(200);\n"
"    }\n"
msgstr ""
