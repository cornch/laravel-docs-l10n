msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/migrations.pot\n"
"X-Crowdin-File-ID: 103\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-04-27 11:02\n"

#: docs/8.x/migrations.md:block 1 (header)
msgid "Database: Migrations"
msgstr "資料庫：Migration"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Generating Migrations](#generating-migrations)"
msgstr "[產生 Migration](#generating-migrations)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Squashing Migrations](#squashing-migrations)"
msgstr "[壓縮 Migration](#squashing-migrations)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Migration Structure](#migration-structure)"
msgstr "[Migration 的架構](#migration-structure)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Running Migrations](#running-migrations)"
msgstr "[執行 Migration](#running-migrations)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Rolling Back Migrations](#rolling-back-migrations)"
msgstr "[復原 Migration](#rolling-back-migrations)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Tables](#tables)"
msgstr "[資料表](#tables)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Creating Tables](#creating-tables)"
msgstr "[建立資料表](#creating-tables)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Updating Tables](#updating-tables)"
msgstr "[更新資料表](#updating-tables)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Renaming / Dropping Tables](#renaming-and-dropping-tables)"
msgstr "[重新命名或刪除資料表](#renaming-and-dropping-tables)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Columns](#columns)"
msgstr "[欄位](#columns)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Creating Columns](#creating-columns)"
msgstr "[建立欄位](#creating-columns)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Available Column Types](#available-column-types)"
msgstr "[可用的欄位型別](#available-column-types)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Column Modifiers](#column-modifiers)"
msgstr "[欄位修飾詞](#column-modifiers)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Modifying Columns](#modifying-columns)"
msgstr "[修改欄位](#modifying-columns)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Dropping Columns](#dropping-columns)"
msgstr "[刪除欄位](#dropping-columns)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Indexes](#indexes)"
msgstr "[索引](#indexes)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Creating Indexes](#creating-indexes)"
msgstr "[建立索引](#creating-indexes)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Renaming Indexes](#renaming-indexes)"
msgstr "[重新命名索引](#renaming-indexes)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Dropping Indexes](#dropping-indexes)"
msgstr "[刪除索引](#dropping-indexes)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Foreign Key Constraints](#foreign-key-constraints)"
msgstr "[Foreign Key Constraint](#foreign-key-constraints)"

#: docs/8.x/migrations.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr "[Event](#events)"

#: docs/8.x/migrations.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/migrations.md:block 5 (paragraph)
msgid "Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. If you have ever had to tell a teammate to manually add a column to their local database schema after pulling in your changes from source control, you've faced the problem that database migrations solve."
msgstr "「^[Migration](移轉)」就像是資料表的版本控制一樣，我們能通過 Migration 來定義並與開發團隊共享專案的資料庫結構定義。讀者是否曾經在從版控拉去更新後，還需要告訴同事要手動新增欄位？資料庫 Migration 就是要解決這樣的問題。"

#: docs/8.x/migrations.md:block 6 (paragraph)
msgid "The Laravel `Schema` [facade](/docs/{{version}}/facades) provides database agnostic support for creating and manipulating tables across all of Laravel's supported database systems. Typically, migrations will use this facade to create and modify database tables and columns."
msgstr "Laravel 的 `Schema` [Facade](/docs/{{version}}/facades) 提供了一種可建立或修改資料表的功能，該功能不區分資料，可用在所有 Laravel 支援的資料庫系統上。一般來說，Migration 會使用該 Facade 來建立或修改資料庫資料表與欄位。"

#: docs/8.x/migrations.md:block 8 (header)
msgid "Generating Migrations"
msgstr "產生 Migration"

#: docs/8.x/migrations.md:block 9 (paragraph)
msgid "You may use the `make:migration` [Artisan command](/docs/{{version}}/artisan) to generate a database migration. The new migration will be placed in your `database/migrations` directory. Each migration filename contains a timestamp that allows Laravel to determine the order of the migrations:"
msgstr "我們可以使用 `make:migration` [Artisan 指令](/docs/{{version}}/artisan) 來產生資料庫 Migration。新建立的 Migration 會放在 `database/migrations` 目錄下。各個 Migration 的檔名都包含了一個時戳，用來讓 Laravel 判斷各個 Migration 的執行順序："

#: docs/8.x/migrations.md:block 10 (code)
msgid "php artisan make:migration create_flights_table\n"
msgstr "php artisan make:migration create_flights_table\n"

#: docs/8.x/migrations.md:block 11 (paragraph)
msgid "Laravel will use the name of the migration to attempt to guess the name of the table and whether or not the migration will be creating a new table. If Laravel is able to determine the table name from the migration name, Laravel will pre-fill the generated migration file with the specified table. Otherwise, you may simply specify the table in the migration file manually."
msgstr "Laravel 會使用 Migration 的名稱來嘗試推測資料表的名稱，並嘗試推測該 Migration 是否要建立新資料表。若 Laravel 可判斷檔案名稱，則 Laravel 會預先在產生的 Migration 檔中填入特定的資料表。若無法判斷時，我們只需要在 Migration 檔中手動指定資料表即可。"

#: docs/8.x/migrations.md:block 12 (paragraph)
msgid "If you would like to specify a custom path for the generated migration, you may use the `--path` option when executing the `make:migration` command. The given path should be relative to your application's base path."
msgstr "若想為產生的 Migration 檔指定自訂的路徑，則可在執行 `make:migration` 指令時使用 `--path` 選項。給定的路徑應為相對於專案根目錄的相對路徑。"

#: docs/8.x/migrations.md:block 13 (quote)
msgid "{tip} Migration stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr "{tip} 可以[安裝 Stub](/docs/{{version}}/artisan#stub-customization) 來自訂 Migration 的 Stub。"

#: docs/8.x/migrations.md:block 15 (header)
msgid "Squashing Migrations"
msgstr "壓縮 Migration"

#: docs/8.x/migrations.md:block 16 (paragraph)
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your `database/migrations` directory becoming bloated with potentially hundreds of migrations. If you would like, you may \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr "在我們持續撰寫專案的同時，我們可能會逐漸累積出越來越多的資料庫 Migration 檔。這樣可能會導致 `database/migrations` 目錄中包含了數百個 Migration 檔。若有需要的話，我們可以將 Migration 檔「壓縮」進單一 SQL 檔內。要開始壓縮，請執行 `schema:dump` 指令："

#: docs/8.x/migrations.md:block 17 (code)
msgid "php artisan schema:dump\n\n"
"// Dump the current database schema and prune all existing migrations...\n"
"php artisan schema:dump --prune\n"
msgstr "php artisan schema:dump\n\n"
"// 傾印目前的資料庫結構，並刪除所有現存的 Migration...\n"
"php artisan schema:dump --prune\n"

#: docs/8.x/migrations.md:block 18 (paragraph)
msgid "When you execute this command, Laravel will write a \"schema\" file to your application's `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL statements first. After executing the schema file's statements, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr "執行該指令時，Laravel 會將一個「^[Schema](結構描述)」檔案寫入 `database/schema` 目錄內。接著，當要移轉資料庫且尚未執行過任何 Migration 時，Laravel 會先執行該 Schema 檔中的 SQL。執行完 Schema 檔內的陳述式後，接著 Laravel 才會執行不在該 Schema 傾印中剩下的 Migration。"

#: docs/8.x/migrations.md:block 19 (paragraph)
msgid "You should commit your database schema file to source control so that other new developers on your team may quickly create your application's initial database structure."
msgstr "請將資料庫 Schema 檔 ^[Commit](簽入) 進版本控制中，好讓團隊中其他的新開發人員可快速建立專案的初始資料庫結構。"

#: docs/8.x/migrations.md:block 20 (quote)
msgid "{note} Migration squashing is only available for the MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client. Schema dumps may not be restored to in-memory SQLite databases."
msgstr "{note} Migration 壓縮只支援 MySQL、PostgreSQL、SQLite 等資料庫，且會使用資料庫的主控台用戶端。Schema 傾印無法用來復原 In-Memory 的 SQLite 資料庫。"

#: docs/8.x/migrations.md:block 22 (header)
msgid "Migration Structure"
msgstr "Migration 的架構"

#: docs/8.x/migrations.md:block 23 (paragraph)
msgid "A migration class contains two methods: `up` and `down`. The `up` method is used to add new tables, columns, or indexes to your database, while the `down` method should reverse the operations performed by the `up` method."
msgstr "Migration 類別中包含了兩個方法：`up` 與 `down`。`up` 方法可用來在資料庫中新增新資料表、欄位、索引等；而 `down` 方法則用來做與 `up` 方法相反的事。"

#: docs/8.x/migrations.md:block 24 (paragraph)
msgid "Within both of these methods, you may use the Laravel schema builder to expressively create and modify tables. To learn about all of the methods available on the `Schema` builder, [check out its documentation](#creating-tables). For example, the following migration creates a `flights` table:"
msgstr "在這兩個方法中，我們可以使用 Laravel 的 Schema Builder 來以描述性的方法建立與修改資料表。若要瞭解 `Schema` Builder 中所有可用的方法，[請參考 Schema Builder 的說明文件](#creating-tables)。舉例來說，下列 Migration 會建立一個 `flights` 資料表："

#: docs/8.x/migrations.md:block 25 (code)
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"class CreateFlightsTable extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->string('name');\n"
"            $table->string('airline');\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Reverse the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function down()\n"
"    {\n"
"        Schema::drop('flights');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"class CreateFlightsTable extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->string('name');\n"
"            $table->string('airline');\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Reverse the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function down()\n"
"    {\n"
"        Schema::drop('flights');\n"
"    }\n"
"}\n"

#: docs/8.x/migrations.md:block 27 (header)
msgid "Anonymous Migrations"
msgstr "匿名 Migration"

#: docs/8.x/migrations.md:block 28 (paragraph)
msgid "As you may have noticed in the example above, Laravel will automatically assign a class name to all of the migrations that you generate using the `make:migration` command. However, if you wish, you may return an anonymous class from your migration file. This is primarily useful if your application accumulates many migrations and two of them have a class name collision:"
msgstr "在上述的範例中可以看到，Laravel 會自動為所有使用 `make:migration` 指令所產生的所有 Migration 指定一個類別名稱。不過，若有需要的話，我們可以在 Migration 檔中回傳一個匿名類別。若專案中已經有許多的 Migration，且其中某兩個 Migration 發生的類別名稱衝突時，就很適合使用這個方法："

#: docs/8.x/migrations.md:block 29 (code)
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"return new class extends Migration\n"
"{\n"
"    //\n"
"};\n"
msgstr "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"return new class extends Migration\n"
"{\n"
"    //\n"
"};\n"

#: docs/8.x/migrations.md:block 31 (header)
msgid "Setting The Migration Connection"
msgstr "設定 Migration 的連線"

#: docs/8.x/migrations.md:block 32 (paragraph)
msgid "If your migration will be interacting with a database connection other than your application's default database connection, you should set the `$connection` property of your migration:"
msgstr "若 Migration 會使用與專案預設資料庫連線不同的資料庫連線，則請在 Migration 中設定 `$connection` 屬性："

#: docs/8.x/migrations.md:block 33 (code)
msgid "/**\n"
" * The database connection that should be used by the migration.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $connection = 'pgsql';\n\n"
"/**\n"
" * Run the migrations.\n"
" *\n"
" * @return void\n"
" */\n"
"public function up()\n"
"{\n"
"    //\n"
"}\n"
msgstr "/**\n"
" * The database connection that should be used by the migration.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $connection = 'pgsql';\n\n"
"/**\n"
" * Run the migrations.\n"
" *\n"
" * @return void\n"
" */\n"
"public function up()\n"
"{\n"
"    //\n"
"}\n"

#: docs/8.x/migrations.md:block 35 (header)
msgid "Running Migrations"
msgstr "執行 Migration"

#: docs/8.x/migrations.md:block 36 (paragraph)
msgid "To run all of your outstanding migrations, execute the `migrate` Artisan command:"
msgstr "若要執行所有尚未執行過的 Migration，請執行 `migrate` Artisan 指令："

#: docs/8.x/migrations.md:block 37 (code)
msgid "php artisan migrate\n"
msgstr "php artisan migrate\n"

#: docs/8.x/migrations.md:block 38 (paragraph)
msgid "If you would like to see which migrations have run thus far, you may use the `migrate:status` Artisan command:"
msgstr "若想檢視目前為止已執行了哪些 Migration，可使用 `migrate:status` Artisan 指令："

#: docs/8.x/migrations.md:block 39 (code)
msgid "php artisan migrate:status\n"
msgstr "php artisan migrate:status\n"

#: docs/8.x/migrations.md:block 41 (header)
msgid "Forcing Migrations To Run In Production"
msgstr "在正式環境中強制執行 Migration"

#: docs/8.x/migrations.md:block 42 (paragraph)
msgid "Some migration operations are destructive, which means they may cause you to lose data. In order to protect you from running these commands against your production database, you will be prompted for confirmation before the commands are executed. To force the commands to run without a prompt, use the `--force` flag:"
msgstr "有些 Migration 中的動作是破壞性的，也就是一些會導致資料消失的動作。為了避免在正式環境資料庫中執行這些破壞性的動作，因此在執行指令時，會出現提示要求確認。若要強制該指令不跳出提示直接執行，請使用 `--force` 旗標："

#: docs/8.x/migrations.md:block 43 (code)
msgid "php artisan migrate --force\n"
msgstr "php artisan migrate --force\n"

#: docs/8.x/migrations.md:block 45 (header)
msgid "Rolling Back Migrations"
msgstr "復原 Migration"

#: docs/8.x/migrations.md:block 46 (paragraph)
msgid "To roll back the latest migration operation, you may use the `rollback` Artisan command. This command rolls back the last \"batch\" of migrations, which may include multiple migration files:"
msgstr "若要復原最後執行的 Migration 動作，可使用 `rollback` Artisan 指令。該指令會復原最後「一批」執行的 Migration，其中可能包含多個 Migration 檔："

#: docs/8.x/migrations.md:block 47 (code)
msgid "php artisan migrate:rollback\n"
msgstr "php artisan migrate:rollback\n"

#: docs/8.x/migrations.md:block 48 (paragraph)
msgid "You may roll back a limited number of migrations by providing the `step` option to the `rollback` command. For example, the following command will roll back the last five migrations:"
msgstr "我們也可以提供各一個 `step` 選項給 `rollback` 指令，以限制要復原的 Migration 數量。舉例來說，下列指令只會復原最後 5 個 Migration："

#: docs/8.x/migrations.md:block 49 (code)
msgid "php artisan migrate:rollback --step=5\n"
msgstr "php artisan migrate:rollback --step=5\n"

#: docs/8.x/migrations.md:block 50 (paragraph)
msgid "The `migrate:reset` command will roll back all of your application's migrations:"
msgstr "`migrate:reset` 指令會復原專案中所有的 Migration："

#: docs/8.x/migrations.md:block 51 (code)
msgid "php artisan migrate:reset\n"
msgstr "php artisan migrate:reset\n"

#: docs/8.x/migrations.md:block 53 (header)
msgid "Roll Back & Migrate Using A Single Command"
msgstr "以單一指令來復原並 Migrate"

#: docs/8.x/migrations.md:block 54 (paragraph)
msgid "The `migrate:refresh` command will roll back all of your migrations and then execute the `migrate` command. This command effectively re-creates your entire database:"
msgstr "`migrate:refresh` 指令會將所有的 Migration 都復原回去，並接著執行 `migrate` 指令。使用該指令，就可以有效率的重建整個資料庫："

#: docs/8.x/migrations.md:block 55 (code)
msgid "php artisan migrate:refresh\n\n"
"// Refresh the database and run all database seeds...\n"
"php artisan migrate:refresh --seed\n"
msgstr "php artisan migrate:refresh\n\n"
"// 重新整理資料庫，病執行所有的資料庫 Seed...\n"
"php artisan migrate:refresh --seed\n"

#: docs/8.x/migrations.md:block 56 (paragraph)
msgid "You may roll back and re-migrate a limited number of migrations by providing the `step` option to the `refresh` command. For example, the following command will roll back and re-migrate the last five migrations:"
msgstr "我們也可以提供各一個 `step` 選項給 `refresh` 指令，以限制要復原並重新 Migrate 的 Migration 數量。舉例來說，下列指令只會復原並重新 Migrate 最後 5 個 Migration："

#: docs/8.x/migrations.md:block 57 (code)
msgid "php artisan migrate:refresh --step=5\n"
msgstr "php artisan migrate:refresh --step=5\n"

#: docs/8.x/migrations.md:block 59 (header)
msgid "Drop All Tables & Migrate"
msgstr "刪除所有資料表並 Migrate"

#: docs/8.x/migrations.md:block 60 (paragraph)
msgid "The `migrate:fresh` command will drop all tables from the database and then execute the `migrate` command:"
msgstr "`migrate:fresh` 指令會刪除資料庫中所有資料表，並接著執行 `migrate` 指令："

#: docs/8.x/migrations.md:block 61 (code)
msgid "php artisan migrate:fresh\n\n"
"php artisan migrate:fresh --seed\n"
msgstr "php artisan migrate:fresh\n\n"
"php artisan migrate:fresh --seed\n"

#: docs/8.x/migrations.md:block 62 (quote)
msgid "{note} The `migrate:fresh` command will drop all database tables regardless of their prefix. This command should be used with caution when developing on a database that is shared with other applications."
msgstr "{note} 不論資料表是否有^[前置詞](Prefix)，`migrate:fresh` 指令會刪除所有的資料庫資料表。在使用與其他專案共享的資料庫時，若要與本指令搭配使用請務必注意。"

#: docs/8.x/migrations.md:block 64 (header)
msgid "Tables"
msgstr "資料表"

#: docs/8.x/migrations.md:block 66 (header)
msgid "Creating Tables"
msgstr "建立資料表"

#: docs/8.x/migrations.md:block 67 (paragraph)
msgid "To create a new database table, use the `create` method on the `Schema` facade. The `create` method accepts two arguments: the first is the name of the table, while the second is a closure which receives a `Blueprint` object that may be used to define the new table:"
msgstr "若要建立新的資料庫資料表，請使用 `Schema` Facade 上的 `create` 方法。`create` 方法接受兩個引數：資料表名稱、以及一個接收 `Blueprint` 物件的閉包。`Blueprint` 物件可用來定義新資料表："

#: docs/8.x/migrations.md:block 68 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::create('users', function (Blueprint $table) {\n"
"    $table->id();\n"
"    $table->string('name');\n"
"    $table->string('email');\n"
"    $table->timestamps();\n"
"});\n"
msgstr "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::create('users', function (Blueprint $table) {\n"
"    $table->id();\n"
"    $table->string('name');\n"
"    $table->string('email');\n"
"    $table->timestamps();\n"
"});\n"

#: docs/8.x/migrations.md:block 69 (paragraph)
msgid "When creating the table, you may use any of the schema builder's [column methods](#creating-columns) to define the table's columns."
msgstr "建立資料表時，我們可以使用任意 Schema Builder 的[欄位方法](#creating-columns)來定義資料表欄位。"

#: docs/8.x/migrations.md:block 71 (header)
msgid "Checking For Table / Column Existence"
msgstr "檢查資料表與欄位是否存在"

#: docs/8.x/migrations.md:block 72 (paragraph)
msgid "You may check for the existence of a table or column using the `hasTable` and `hasColumn` methods:"
msgstr "我們可以使用 `hasTable` 與 `hasColumn` 方法來檢查資料表或欄位是否存在："

#: docs/8.x/migrations.md:block 73 (code)
msgid "if (Schema::hasTable('users')) {\n"
"    // The \"users\" table exists...\n"
"}\n\n"
"if (Schema::hasColumn('users', 'email')) {\n"
"    // The \"users\" table exists and has an \"email\" column...\n"
"}\n"
msgstr "if (Schema::hasTable('users')) {\n"
"    // 「users」資料表存在...\n"
"}\n\n"
"if (Schema::hasColumn('users', 'email')) {\n"
"    // 「users」資料表存在，且包含一個「email」欄位...\n"
"}\n"

#: docs/8.x/migrations.md:block 75 (header)
msgid "Database Connection & Table Options"
msgstr "資料庫連線與資料表選項"

#: docs/8.x/migrations.md:block 76 (paragraph)
msgid "If you want to perform a schema operation on a database connection that is not your application's default connection, use the `connection` method:"
msgstr "若要在非專案預設連線的資料庫連線上做 Schema 動作，請使用 `connection` 方法："

#: docs/8.x/migrations.md:block 77 (code)
msgid "Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n"
"    $table->id();\n"
"});\n"
msgstr "Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n"
"    $table->id();\n"
"});\n"

#: docs/8.x/migrations.md:block 78 (paragraph)
msgid "In addition, a few other properties and methods may be used to define other aspects of the table's creation. The `engine` property may be used to specify the table's storage engine when using MySQL:"
msgstr "此外，還有一些其他的屬性或方法，可用來調整資料表建立中的其他細節。使用 MySQL 時，可使用 `engine` 屬性來指定資料表的 Storage Engine："

#: docs/8.x/migrations.md:block 79 (code)
msgid "Schema::create('users', function (Blueprint $table) {\n"
"    $table->engine = 'InnoDB';\n\n"
"    // ...\n"
"});\n"
msgstr "Schema::create('users', function (Blueprint $table) {\n"
"    $table->engine = 'InnoDB';\n\n"
"    // ...\n"
"});\n"

#: docs/8.x/migrations.md:block 80 (paragraph)
msgid "The `charset` and `collation` properties may be used to specify the character set and collation for the created table when using MySQL:"
msgstr "使用 MySQL 時，`charset` 與 `collation` 屬性可用來指定建立資料表的 Character Set 與 Collection："

#: docs/8.x/migrations.md:block 81 (code)
msgid "Schema::create('users', function (Blueprint $table) {\n"
"    $table->charset = 'utf8mb4';\n"
"    $table->collation = 'utf8mb4_unicode_ci';\n\n"
"    // ...\n"
"});\n"
msgstr "Schema::create('users', function (Blueprint $table) {\n"
"    $table->charset = 'utf8mb4';\n"
"    $table->collation = 'utf8mb4_unicode_ci';\n\n"
"    // ...\n"
"});\n"

#: docs/8.x/migrations.md:block 82 (paragraph)
msgid "The `temporary` method may be used to indicate that the table should be \"temporary\". Temporary tables are only visible to the current connection's database session and are dropped automatically when the connection is closed:"
msgstr "`temporary` 方法可用來表示該資料表是「臨時」資料表。臨時資料表只可在目前連線的資料庫工作階段中使用，且會在連線關閉後自動刪除："

#: docs/8.x/migrations.md:block 83 (code)
msgid "Schema::create('calculations', function (Blueprint $table) {\n"
"    $table->temporary();\n\n"
"    // ...\n"
"});\n"
msgstr "Schema::create('calculations', function (Blueprint $table) {\n"
"    $table->temporary();\n\n"
"    // ...\n"
"});\n"

#: docs/8.x/migrations.md:block 85 (header)
msgid "Updating Tables"
msgstr "更新資料表"

#: docs/8.x/migrations.md:block 86 (paragraph)
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives a `Blueprint` instance you may use to add columns or indexes to the table:"
msgstr "`Schema` Facade 上的 `table` 方法可用來更新現有的資料表。與 `create` 方法類似，`table` 方法接受兩個因數：資料表名稱，以及一個接收 `Blueprint` 實體的閉包。使用 `Blueprint` 實體，即可用來在資料表上新增欄位或索引："

#: docs/8.x/migrations.md:block 87 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->integer('votes');\n"
"});\n"
msgstr "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->integer('votes');\n"
"});\n"

#: docs/8.x/migrations.md:block 89 (header)
msgid "Renaming / Dropping Tables"
msgstr "重新命名或刪除資料表"

#: docs/8.x/migrations.md:block 90 (paragraph)
msgid "To rename an existing database table, use the `rename` method:"
msgstr "若要重新命名現有的資料表，可使用 `rename` 方法："

#: docs/8.x/migrations.md:block 91 (code)
msgid "use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::rename($from, $to);\n"
msgstr "use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::rename($from, $to);\n"

#: docs/8.x/migrations.md:block 92 (paragraph)
msgid "To drop an existing table, you may use the `drop` or `dropIfExists` methods:"
msgstr "若要移除現有的資料表，可使用 `drop` 或 `dropIfExists` 方法："

#: docs/8.x/migrations.md:block 93 (code)
msgid "Schema::drop('users');\n\n"
"Schema::dropIfExists('users');\n"
msgstr "Schema::drop('users');\n\n"
"Schema::dropIfExists('users');\n"

#: docs/8.x/migrations.md:block 95 (header)
msgid "Renaming Tables With Foreign Keys"
msgstr "與外部索引鍵一起重新命名資料表"

#: docs/8.x/migrations.md:block 96 (paragraph)
msgid "Before renaming a table, you should verify that any foreign key constraints on the table have an explicit name in your migration files instead of letting Laravel assign a convention based name. Otherwise, the foreign key constraint name will refer to the old table name."
msgstr "在重新命名資料表時，請務必確認該資料表上的^[外部索引鍵條件](Foreign Key Constraint)是否有直接設定名稱，而不是使用 Laravel 所指定的基於慣例的名稱。若未直接設定名稱，則這些外部索引鍵條件的名稱可能會參照到舊的資料表名稱："

#: docs/8.x/migrations.md:block 98 (header)
msgid "Columns"
msgstr "欄位"

#: docs/8.x/migrations.md:block 100 (header)
msgid "Creating Columns"
msgstr "建立欄位"

#: docs/8.x/migrations.md:block 101 (paragraph)
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives an `Illuminate\\Database\\Schema\\Blueprint` instance you may use to add columns to the table:"
msgstr "`Schema` Facade 上的 `table` 方法可用來更新現有的資料表。與 `create` 方法類似，`table` 方法接受兩個因數：資料表名稱，以及一個接收 `Illuminate\\Database\\Schema\\Blueprint` 實體的閉包。使用這個 `Blueprint` 實體，即可用來在資料表上新增欄位或索引："

#: docs/8.x/migrations.md:block 104 (header)
msgid "Available Column Types"
msgstr "可用的欄位型別"

#: docs/8.x/migrations.md:block 105 (paragraph)
msgid "The schema builder blueprint offers a variety of methods that correspond to the different types of columns you can add to your database tables. Each of the available methods are listed in the table below:"
msgstr "Schema Builder Blueprint 提供了多種方法，這些方法對應到可新增至資料庫資料表中各種不同的欄位型別。可用的各個方法列在下表中："

#: docs/8.x/migrations.md:block 108 (paragraph)
msgid "[bigIncrements](#column-method-bigIncrements) [bigInteger](#column-method-bigInteger) [binary](#column-method-binary) [boolean](#column-method-boolean) [char](#column-method-char) [dateTimeTz](#column-method-dateTimeTz) [dateTime](#column-method-dateTime) [date](#column-method-date) [decimal](#column-method-decimal) [double](#column-method-double) [enum](#column-method-enum) [float](#column-method-float) [foreignId](#column-method-foreignId) [foreignIdFor](#column-method-foreignIdFor) [foreignUuid](#column-method-foreignUuid) [geometryCollection](#column-method-geometryCollection) [geometry](#column-method-geometry) [id](#column-method-id) [increments](#column-method-increments) [integer](#column-method-integer) [ipAddress](#column-method-ipAddress) [json](#column-method-json) [jsonb](#column-method-jsonb) [lineString](#column-method-lineString) [longText](#column-method-longText) [macAddress](#column-method-macAddress) [mediumIncrements](#column-method-mediumIncrements) [mediumInteger](#column-method-mediumInteger) [mediumText](#column-method-mediumText) [morphs](#column-method-morphs) [multiLineString](#column-method-multiLineString) [multiPoint](#column-method-multiPoint) [multiPolygon](#column-method-multiPolygon) [nullableMorphs](#column-method-nullableMorphs) [nullableTimestamps](#column-method-nullableTimestamps) [nullableUuidMorphs](#column-method-nullableUuidMorphs) [point](#column-method-point) [polygon](#column-method-polygon) [rememberToken](#column-method-rememberToken) [set](#column-method-set) [smallIncrements](#column-method-smallIncrements) [smallInteger](#column-method-smallInteger) [softDeletesTz](#column-method-softDeletesTz) [softDeletes](#column-method-softDeletes) [string](#column-method-string) [text](#column-method-text) [timeTz](#column-method-timeTz) [time](#column-method-time) [timestampTz](#column-method-timestampTz) [timestamp](#column-method-timestamp) [timestampsTz](#column-method-timestampsTz) [timestamps](#column-method-timestamps) [tinyIncrements](#column-method-tinyIncrements) [tinyInteger](#column-method-tinyInteger) [tinyText](#column-method-tinyText) [unsignedBigInteger](#column-method-unsignedBigInteger) [unsignedDecimal](#column-method-unsignedDecimal) [unsignedInteger](#column-method-unsignedInteger) [unsignedMediumInteger](#column-method-unsignedMediumInteger) [unsignedSmallInteger](#column-method-unsignedSmallInteger) [unsignedTinyInteger](#column-method-unsignedTinyInteger) [uuidMorphs](#column-method-uuidMorphs) [uuid](#column-method-uuid) [year](#column-method-year)"
msgstr "[bigIncrements](#column-method-bigIncrements) [bigInteger](#column-method-bigInteger) [binary](#column-method-binary) [boolean](#column-method-boolean) [char](#column-method-char) [dateTimeTz](#column-method-dateTimeTz) [dateTime](#column-method-dateTime) [date](#column-method-date) [decimal](#column-method-decimal) [double](#column-method-double) [enum](#column-method-enum) [float](#column-method-float) [foreignId](#column-method-foreignId) [foreignIdFor](#column-method-foreignIdFor) [foreignUuid](#column-method-foreignUuid) [geometryCollection](#column-method-geometryCollection) [geometry](#column-method-geometry) [id](#column-method-id) [increments](#column-method-increments) [integer](#column-method-integer) [ipAddress](#column-method-ipAddress) [json](#column-method-json) [jsonb](#column-method-jsonb) [lineString](#column-method-lineString) [longText](#column-method-longText) [macAddress](#column-method-macAddress) [mediumIncrements](#column-method-mediumIncrements) [mediumInteger](#column-method-mediumInteger) [mediumText](#column-method-mediumText) [morphs](#column-method-morphs) [multiLineString](#column-method-multiLineString) [multiPoint](#column-method-multiPoint) [multiPolygon](#column-method-multiPolygon) [nullableMorphs](#column-method-nullableMorphs) [nullableTimestamps](#column-method-nullableTimestamps) [nullableUuidMorphs](#column-method-nullableUuidMorphs) [point](#column-method-point) [polygon](#column-method-polygon) [rememberToken](#column-method-rememberToken) [set](#column-method-set) [smallIncrements](#column-method-smallIncrements) [smallInteger](#column-method-smallInteger) [softDeletesTz](#column-method-softDeletesTz) [softDeletes](#column-method-softDeletes) [string](#column-method-string) [text](#column-method-text) [timeTz](#column-method-timeTz) [time](#column-method-time) [timestampTz](#column-method-timestampTz) [timestamp](#column-method-timestamp) [timestampsTz](#column-method-timestampsTz) [timestamps](#column-method-timestamps) [tinyIncrements](#column-method-tinyIncrements) [tinyInteger](#column-method-tinyInteger) [tinyText](#column-method-tinyText) [unsignedBigInteger](#column-method-unsignedBigInteger) [unsignedDecimal](#column-method-unsignedDecimal) [unsignedInteger](#column-method-unsignedInteger) [unsignedMediumInteger](#column-method-unsignedMediumInteger) [unsignedSmallInteger](#column-method-unsignedSmallInteger) [unsignedTinyInteger](#column-method-unsignedTinyInteger) [uuidMorphs](#column-method-uuidMorphs) [uuid](#column-method-uuid) [year](#column-method-year)"

#: docs/8.x/migrations.md:block 111 (header)
msgid "`bigIncrements()` {.collection-method .first-collection-method}"
msgstr "`bigIncrements()` {.collection-method .first-collection-method}"

#: docs/8.x/migrations.md:block 112 (paragraph)
msgid "The `bigIncrements` method creates an auto-incrementing `UNSIGNED BIGINT` (primary key) equivalent column:"
msgstr "`bigIncrements` 方法建立一個 ^[Auto-Increment](自動遞增) 的 `UNSIGNED BIGINT` (^[主索引鍵](Primary Key)) 或相等欄位："

#: docs/8.x/migrations.md:block 113 (code)
msgid "$table->bigIncrements('id');\n"
msgstr "$table->bigIncrements('id');\n"

#: docs/8.x/migrations.md:block 115 (header)
msgid "`bigInteger()` {.collection-method}"
msgstr "`bigInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 116 (paragraph)
msgid "The `bigInteger` method creates a `BIGINT` equivalent column:"
msgstr "`bigInteger` 方法建立一個 `BIGINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 117 (code)
msgid "$table->bigInteger('votes');\n"
msgstr "$table->bigInteger('votes');\n"

#: docs/8.x/migrations.md:block 119 (header)
msgid "`binary()` {.collection-method}"
msgstr "`binary()` {.collection-method}"

#: docs/8.x/migrations.md:block 120 (paragraph)
msgid "The `binary` method creates a `BLOB` equivalent column:"
msgstr "`binary` 方法建立一個 `BLOB` 或相等欄位："

#: docs/8.x/migrations.md:block 121 (code)
msgid "$table->binary('photo');\n"
msgstr "$table->binary('photo');\n"

#: docs/8.x/migrations.md:block 123 (header)
msgid "`boolean()` {.collection-method}"
msgstr "`boolean()` {.collection-method}"

#: docs/8.x/migrations.md:block 124 (paragraph)
msgid "The `boolean` method creates a `BOOLEAN` equivalent column:"
msgstr "`boolean` 方法建立一個 `BOOLEAN` 或相等欄位："

#: docs/8.x/migrations.md:block 125 (code)
msgid "$table->boolean('confirmed');\n"
msgstr "$table->boolean('confirmed');\n"

#: docs/8.x/migrations.md:block 127 (header)
msgid "`char()` {.collection-method}"
msgstr "`char()` {.collection-method}"

#: docs/8.x/migrations.md:block 128 (paragraph)
msgid "The `char` method creates a `CHAR` equivalent column with of a given length:"
msgstr "`char` 方法以給定的長度來建立一個 `CHAR` 或相等欄位："

#: docs/8.x/migrations.md:block 129 (code)
msgid "$table->char('name', 100);\n"
msgstr "$table->char('name', 100);\n"

#: docs/8.x/migrations.md:block 131 (header)
msgid "`dateTimeTz()` {.collection-method}"
msgstr "`dateTimeTz()` {.collection-method}"

#: docs/8.x/migrations.md:block 132 (paragraph)
msgid "The `dateTimeTz` method creates a `DATETIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr "`dateTimeTz` 方法以給定的精度 (總位數) 建立一個 `DATETIME` (含時區) 或相等欄位："

#: docs/8.x/migrations.md:block 133 (code)
msgid "$table->dateTimeTz('created_at', $precision = 0);\n"
msgstr "$table->dateTimeTz('created_at', $precision = 0);\n"

#: docs/8.x/migrations.md:block 135 (header)
msgid "`dateTime()` {.collection-method}"
msgstr "`dateTime()` {.collection-method}"

#: docs/8.x/migrations.md:block 136 (paragraph)
msgid "The `dateTime` method creates a `DATETIME` equivalent column with an optional precision (total digits):"
msgstr "`dateTime` 方法會使用給定的可選精度 (總位數) 來建立一個 `DATETIME` 或相等欄位："

#: docs/8.x/migrations.md:block 137 (code)
msgid "$table->dateTime('created_at', $precision = 0);\n"
msgstr "$table->dateTime('created_at', $precision = 0);\n"

#: docs/8.x/migrations.md:block 139 (header)
msgid "`date()` {.collection-method}"
msgstr "`date()` {.collection-method}"

#: docs/8.x/migrations.md:block 140 (paragraph)
msgid "The `date` method creates a `DATE` equivalent column:"
msgstr "`date` 方法會建立一個 `DATE` 或相等欄位："

#: docs/8.x/migrations.md:block 141 (code)
msgid "$table->date('created_at');\n"
msgstr "$table->date('created_at');\n"

#: docs/8.x/migrations.md:block 143 (header)
msgid "`decimal()` {.collection-method}"
msgstr "`decimal()` {.collection-method}"

#: docs/8.x/migrations.md:block 144 (paragraph)
msgid "The `decimal` method creates a `DECIMAL` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr "`decimal` 方法會以給定的^[精度](Precision) (總位數) 與^[小數位數](Scale) (小數位數) 來建立一個 `DECIMAL` 或相等欄位："

#: docs/8.x/migrations.md:block 145 (code)
msgid "$table->decimal('amount', $precision = 8, $scale = 2);\n"
msgstr "$table->decimal('amount', $precision = 8, $scale = 2);\n"

#: docs/8.x/migrations.md:block 147 (header)
msgid "`double()` {.collection-method}"
msgstr "`double()` {.collection-method}"

#: docs/8.x/migrations.md:block 148 (paragraph)
msgid "The `double` method creates a `DOUBLE` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr "`double` 方法會以給定的^[精度](Precision) (總位數) 與^[小數位數](Scale) (小數位數) 來建立一個 `DOUBLE` 或相等欄位："

#: docs/8.x/migrations.md:block 149 (code)
msgid "$table->double('amount', 8, 2);\n"
msgstr "$table->double('amount', 8, 2);\n"

#: docs/8.x/migrations.md:block 151 (header)
msgid "`enum()` {.collection-method}"
msgstr "`enum()` {.collection-method}"

#: docs/8.x/migrations.md:block 152 (paragraph)
msgid "The `enum` method creates a `ENUM` equivalent column with the given valid values:"
msgstr "`enum` 方法以給定的有效值來建立一個 `ENUM` 或相等欄位："

#: docs/8.x/migrations.md:block 153 (code)
msgid "$table->enum('difficulty', ['easy', 'hard']);\n"
msgstr "$table->enum('difficulty', ['easy', 'hard']);\n"

#: docs/8.x/migrations.md:block 155 (header)
msgid "`float()` {.collection-method}"
msgstr "`float()` {.collection-method}"

#: docs/8.x/migrations.md:block 156 (paragraph)
msgid "The `float` method creates a `FLOAT` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr "`float` 方法會以給定的^[精度](Precision) (總位數) 與^[小數位數](Scale) (小數位數) 來建立一個 `FLOAT` 或相等欄位："

#: docs/8.x/migrations.md:block 157 (code)
msgid "$table->float('amount', 8, 2);\n"
msgstr "$table->float('amount', 8, 2);\n"

#: docs/8.x/migrations.md:block 159 (header)
msgid "`foreignId()` {.collection-method}"
msgstr "`foreignId()` {.collection-method}"

#: docs/8.x/migrations.md:block 160 (paragraph)
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr "`foreignId` 方法會建立一個 `UNSIGNED BIGINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 161 (code)
msgid "$table->foreignId('user_id');\n"
msgstr "$table->foreignId('user_id');\n"

#: docs/8.x/migrations.md:block 163 (header)
msgid "`foreignIdFor()` {.collection-method}"
msgstr "`foreignIdFor()` {.collection-method}"

#: docs/8.x/migrations.md:block 164 (paragraph)
msgid "The `foreignIdFor` method adds a `{column}_id UNSIGNED BIGINT` equivalent column for a given model class:"
msgstr "`foreighIdFor` 方法會以給定的 Model 類別來建立一個 `{欄位}_id UNSIGNED BIGINT` 或相等欄位："

#: docs/8.x/migrations.md:block 165 (code)
msgid "$table->foreignIdFor(User::class);\n"
msgstr "$table->foreignIdFor(User::class);\n"

#: docs/8.x/migrations.md:block 167 (header)
msgid "`foreignUuid()` {.collection-method}"
msgstr "`foreignUuid()` {.collection-method}"

#: docs/8.x/migrations.md:block 168 (paragraph)
msgid "The `foreignUuid` method creates a `UUID` equivalent column:"
msgstr "`foreignUuid` 方法會建立一個 `UUID` 或相等欄位："

#: docs/8.x/migrations.md:block 169 (code)
msgid "$table->foreignUuid('user_id');\n"
msgstr "$table->foreignUuid('user_id');\n"

#: docs/8.x/migrations.md:block 171 (header)
msgid "`geometryCollection()` {.collection-method}"
msgstr "`geometryCollection()` {.collection-method}"

#: docs/8.x/migrations.md:block 172 (paragraph)
msgid "The `geometryCollection` method creates a `GEOMETRYCOLLECTION` equivalent column:"
msgstr "`geometryCollection` 方法會建立一個 `GEOMETRYCOLLECTION` 或相等欄位："

#: docs/8.x/migrations.md:block 173 (code)
msgid "$table->geometryCollection('positions');\n"
msgstr "$table->geometryCollection('positions');\n"

#: docs/8.x/migrations.md:block 175 (header)
msgid "`geometry()` {.collection-method}"
msgstr "`geometry()` {.collection-method}"

#: docs/8.x/migrations.md:block 176 (paragraph)
msgid "The `geometry` method creates a `GEOMETRY` equivalent column:"
msgstr "`geometry` 方法建立一個 `GEOMETRY` 或相等欄位："

#: docs/8.x/migrations.md:block 177 (code)
msgid "$table->geometry('positions');\n"
msgstr "$table->geometry('positions');\n"

#: docs/8.x/migrations.md:block 179 (header)
msgid "`id()` {.collection-method}"
msgstr "`id()` {.collection-method}"

#: docs/8.x/migrations.md:block 180 (paragraph)
msgid "The `id` method is an alias of the `bigIncrements` method. By default, the method will create an `id` column; however, you may pass a column name if you would like to assign a different name to the column:"
msgstr "`id` 欄位為 `bigIncrements` 方法的別名。預設情況下，該方法會建立一個 `id` 欄位。不過，若想為該欄位指定不同的名稱，也可以傳入欄位名稱："

#: docs/8.x/migrations.md:block 181 (code)
msgid "$table->id();\n"
msgstr "$table->id();\n"

#: docs/8.x/migrations.md:block 183 (header)
msgid "`increments()` {.collection-method}"
msgstr "`increments()` {.collection-method}"

#: docs/8.x/migrations.md:block 184 (paragraph)
msgid "The `increments` method creates an auto-incrementing `UNSIGNED INTEGER` equivalent column as a primary key:"
msgstr "`increments` 方法會建立一個 ^[Auto-Increment](自動遞增) 的 `UNSIGNED INTEGER` 或同等欄位作為^[主索引鍵](Primary Key)："

#: docs/8.x/migrations.md:block 185 (code)
msgid "$table->increments('id');\n"
msgstr "$table->increments('id');\n"

#: docs/8.x/migrations.md:block 187 (header)
msgid "`integer()` {.collection-method}"
msgstr "`integer()` {.collection-method}"

#: docs/8.x/migrations.md:block 188 (paragraph)
msgid "The `integer` method creates an `INTEGER` equivalent column:"
msgstr "`integer` 方法建立一個 `INTEGER` 或相等的欄位："

#: docs/8.x/migrations.md:block 189 (code)
msgid "$table->integer('votes');\n"
msgstr "$table->integer('votes');\n"

#: docs/8.x/migrations.md:block 191 (header)
msgid "`ipAddress()` {.collection-method}"
msgstr "`ipAddress()` {.collection-method}"

#: docs/8.x/migrations.md:block 192 (paragraph)
msgid "The `ipAddress` method creates a `VARCHAR` equivalent column:"
msgstr "`ipAddress` 方法會建立一個 `VARCHAR` 或相等欄位："

#: docs/8.x/migrations.md:block 193 (code)
msgid "$table->ipAddress('visitor');\n"
msgstr "$table->ipAddress('visitor');\n"

#: docs/8.x/migrations.md:block 195 (header)
msgid "`json()` {.collection-method}"
msgstr "`json()` {.collection-method}"

#: docs/8.x/migrations.md:block 196 (paragraph)
msgid "The `json` method creates a `JSON` equivalent column:"
msgstr "`json` 方法會建立一個 `JSON` 或相等欄位："

#: docs/8.x/migrations.md:block 197 (code)
msgid "$table->json('options');\n"
msgstr "$table->json('options');\n"

#: docs/8.x/migrations.md:block 199 (header)
msgid "`jsonb()` {.collection-method}"
msgstr "`jsonb()` {.collection-method}"

#: docs/8.x/migrations.md:block 200 (paragraph)
msgid "The `jsonb` method creates a `JSONB` equivalent column:"
msgstr "`jsonb` 方法會建立一個 `JSONB` 或相等欄位："

#: docs/8.x/migrations.md:block 201 (code)
msgid "$table->jsonb('options');\n"
msgstr "$table->jsonb('options');\n"

#: docs/8.x/migrations.md:block 203 (header)
msgid "`lineString()` {.collection-method}"
msgstr "`lineString()` {.collection-method}"

#: docs/8.x/migrations.md:block 204 (paragraph)
msgid "The `lineString` method creates a `LINESTRING` equivalent column:"
msgstr "`lineString` 方法建立一個 `LINESTRING` 或相等的欄位："

#: docs/8.x/migrations.md:block 205 (code)
msgid "$table->lineString('positions');\n"
msgstr "$table->lineString('positions');\n"

#: docs/8.x/migrations.md:block 207 (header)
msgid "`longText()` {.collection-method}"
msgstr "`longText()` {.collection-method}"

#: docs/8.x/migrations.md:block 208 (paragraph)
msgid "The `longText` method creates a `LONGTEXT` equivalent column:"
msgstr "`longText` 方法建立一個 `LONGTEXT` 或相等欄位："

#: docs/8.x/migrations.md:block 209 (code)
msgid "$table->longText('description');\n"
msgstr "$table->longText('description');\n"

#: docs/8.x/migrations.md:block 211 (header)
msgid "`macAddress()` {.collection-method}"
msgstr "`macAddress()` {.collection-method}"

#: docs/8.x/migrations.md:block 212 (paragraph)
msgid "The `macAddress` method creates a column that is intended to hold a MAC address. Some database systems, such as PostgreSQL, have a dedicated column type for this type of data. Other database systems will use a string equivalent column:"
msgstr "`macAddress` 方法會建立一個用來保存 MAC 位址的欄位。在某些資料庫系統，如 PostgreSQL 中，有專門的欄位可用來保存這種類型的資料。在其他資料庫系統，則會使用相等的字串欄位："

#: docs/8.x/migrations.md:block 213 (code)
msgid "$table->macAddress('device');\n"
msgstr "$table->macAddress('device');\n"

#: docs/8.x/migrations.md:block 215 (header)
msgid "`mediumIncrements()` {.collection-method}"
msgstr "`mediumIncrements()` {.collection-method}"

#: docs/8.x/migrations.md:block 216 (paragraph)
msgid "The `mediumIncrements` method creates an auto-incrementing `UNSIGNED MEDIUMINT` equivalent column as a primary key:"
msgstr "`mediumIncrements` 方法會建立一個 ^[Auto-Increment](自動遞增) 的 `UNSIGNED MEDIUMINT` 或同等欄位作為^[主索引鍵](Primary Key)："

#: docs/8.x/migrations.md:block 217 (code)
msgid "$table->mediumIncrements('id');\n"
msgstr "$table->mediumIncrements('id');\n"

#: docs/8.x/migrations.md:block 219 (header)
msgid "`mediumInteger()` {.collection-method}"
msgstr "`mediumInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 220 (paragraph)
msgid "The `mediumInteger` method creates a `MEDIUMINT` equivalent column:"
msgstr "`mediumInteger` 方法建立一個 `MEDIUMINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 221 (code)
msgid "$table->mediumInteger('votes');\n"
msgstr "$table->mediumInteger('votes');\n"

#: docs/8.x/migrations.md:block 223 (header)
msgid "`mediumText()` {.collection-method}"
msgstr "`mediumText()` {.collection-method}"

#: docs/8.x/migrations.md:block 224 (paragraph)
msgid "The `mediumText` method creates a `MEDIUMTEXT` equivalent column:"
msgstr "`mediumText` 方法建立一個 `MEDIUMTEXT` 或相等的欄位："

#: docs/8.x/migrations.md:block 225 (code)
msgid "$table->mediumText('description');\n"
msgstr "$table->mediumText('description');\n"

#: docs/8.x/migrations.md:block 227 (header)
msgid "`morphs()` {.collection-method}"
msgstr "`morphs()` {.collection-method}"

#: docs/8.x/migrations.md:block 228 (paragraph)
msgid "The `morphs` method is a convenience method that adds a `{column}_id` `UNSIGNED BIGINT` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr "`morphs` 是一個方便方法，會新增一個 `{欄位}_id` `UNSIGNED BIGINT` 或相等欄位，以及一個 `{欄位}_type` `VARCHAR` 或想等欄位。"

#: docs/8.x/migrations.md:block 229 (paragraph)
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships). In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr "該方法主要是要給多型 [Eloquent 關聯](/docs/{{version}}/eloquent-relationships)定義欄位用的。在下列範例中，會建立 `taggable_id` 與 `taggable_type` 欄位："

#: docs/8.x/migrations.md:block 230 (code)
msgid "$table->morphs('taggable');\n"
msgstr "$table->morphs('taggable');\n"

#: docs/8.x/migrations.md:block 232 (header)
msgid "`multiLineString()` {.collection-method}"
msgstr "`multiLineString()` {.collection-method}"

#: docs/8.x/migrations.md:block 233 (paragraph)
msgid "The `multiLineString` method creates a `MULTILINESTRING` equivalent column:"
msgstr "`multiLineString` 方法建立一個 `MULTILINESTRING` 或相等的欄位："

#: docs/8.x/migrations.md:block 234 (code)
msgid "$table->multiLineString('positions');\n"
msgstr "$table->multiLineString('positions');\n"

#: docs/8.x/migrations.md:block 236 (header)
msgid "`multiPoint()` {.collection-method}"
msgstr "`multiPoint()` {.collection-method}"

#: docs/8.x/migrations.md:block 237 (paragraph)
msgid "The `multiPoint` method creates a `MULTIPOINT` equivalent column:"
msgstr "`multiPoint` 方法建立一個 `MULTIPOINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 238 (code)
msgid "$table->multiPoint('positions');\n"
msgstr "$table->multiPoint('positions');\n"

#: docs/8.x/migrations.md:block 240 (header)
msgid "`multiPolygon()` {.collection-method}"
msgstr "`multiPolygon()` {.collection-method}"

#: docs/8.x/migrations.md:block 241 (paragraph)
msgid "The `multiPolygon` method creates a `MULTIPOLYGON` equivalent column:"
msgstr "`multiPolygon` 方法建立一個 `MULTIPOLYGON` 或相等的欄位："

#: docs/8.x/migrations.md:block 242 (code)
msgid "$table->multiPolygon('positions');\n"
msgstr "$table->multiPolygon('positions');\n"

#: docs/8.x/migrations.md:block 244 (header)
msgid "`nullableTimestamps()` {.collection-method}"
msgstr "`nullableTimestamps()` {.collection-method}"

#: docs/8.x/migrations.md:block 245 (paragraph)
msgid "The `nullableTimestamps` method is an alias of the [timestamps](#column-method-timestamps) method:"
msgstr "`nullabaleTimestamps` 方法是 [timestamps](#column-method-timestamps) 方法的別名："

#: docs/8.x/migrations.md:block 246 (code)
msgid "$table->nullableTimestamps(0);\n"
msgstr "$table->nullableTimestamps(0);\n"

#: docs/8.x/migrations.md:block 248 (header)
msgid "`nullableMorphs()` {.collection-method}"
msgstr "`nullableMorphs()` {.collection-method}"

#: docs/8.x/migrations.md:block 249 (paragraph)
msgid "The method is similar to the [morphs](#column-method-morphs) method; however, the columns that are created will be \"nullable\":"
msgstr "該方法與 [morphs](#column-method-morphs) 方法類似。不過，使用 `nullableMorphs` 方法建立的欄位會是「nullable」的："

#: docs/8.x/migrations.md:block 250 (code)
msgid "$table->nullableMorphs('taggable');\n"
msgstr "$table->nullableMorphs('taggable');\n"

#: docs/8.x/migrations.md:block 252 (header)
msgid "`nullableUuidMorphs()` {.collection-method}"
msgstr "`nullableUuidMorphs()` {.collection-method}"

#: docs/8.x/migrations.md:block 253 (paragraph)
msgid "The method is similar to the [uuidMorphs](#column-method-uuidMorphs) method; however, the columns that are created will be \"nullable\":"
msgstr "該方法與 [uuidMorphs](#column-method-uuidMorphs) 方法類似。不過，使用 `nullableMorphs` 方法建立的欄位會是「nullable」的："

#: docs/8.x/migrations.md:block 254 (code)
msgid "$table->nullableUuidMorphs('taggable');\n"
msgstr "$table->nullableUuidMorphs('taggable');\n"

#: docs/8.x/migrations.md:block 256 (header)
msgid "`point()` {.collection-method}"
msgstr "`point()` {.collection-method}"

#: docs/8.x/migrations.md:block 257 (paragraph)
msgid "The `point` method creates a `POINT` equivalent column:"
msgstr "`point` 方法會建立一個 `POINT` 或相等欄位："

#: docs/8.x/migrations.md:block 258 (code)
msgid "$table->point('position');\n"
msgstr "$table->point('position');\n"

#: docs/8.x/migrations.md:block 260 (header)
msgid "`polygon()` {.collection-method}"
msgstr "`polygon()` {.collection-method}"

#: docs/8.x/migrations.md:block 261 (paragraph)
msgid "The `polygon` method creates a `POLYGON` equivalent column:"
msgstr "`polygon` 方法建立一個 `POLYGON` 或相等的欄位："

#: docs/8.x/migrations.md:block 262 (code)
msgid "$table->polygon('position');\n"
msgstr "$table->polygon('position');\n"

#: docs/8.x/migrations.md:block 264 (header)
msgid "`rememberToken()` {.collection-method}"
msgstr "`rememberToken()` {.collection-method}"

#: docs/8.x/migrations.md:block 265 (paragraph)
msgid "The `rememberToken` method creates a nullable, `VARCHAR(100)` equivalent column that is intended to store the current \"remember me\" [authentication token](/docs/{{version}}/authentication#remembering-users):"
msgstr "`rememberToken` 方法會建立一個 Nullable 的 `VARCHAR(100)` 或相等的欄位，用於存放目前的「記住我」[身份驗證權杖](/docs/{{version}}/authentication#remembering-users)："

#: docs/8.x/migrations.md:block 266 (code)
msgid "$table->rememberToken();\n"
msgstr "$table->rememberToken();\n"

#: docs/8.x/migrations.md:block 268 (header)
msgid "`set()` {.collection-method}"
msgstr "`set()` {.collection-method}"

#: docs/8.x/migrations.md:block 269 (paragraph)
msgid "The `set` method creates a `SET` equivalent column with the given list of valid values:"
msgstr "`set` 方法會以給定的有效值來建立一個 `SET` 或相等欄位："

#: docs/8.x/migrations.md:block 270 (code)
msgid "$table->set('flavors', ['strawberry', 'vanilla']);\n"
msgstr "$table->set('flavors', ['strawberry', 'vanilla']);\n"

#: docs/8.x/migrations.md:block 272 (header)
msgid "`smallIncrements()` {.collection-method}"
msgstr "`smallIncrements()` {.collection-method}"

#: docs/8.x/migrations.md:block 273 (paragraph)
msgid "The `smallIncrements` method creates an auto-incrementing `UNSIGNED SMALLINT` equivalent column as a primary key:"
msgstr "`smallIncrements` 方法會建立一個 ^[Auto-Increment](自動遞增) 的 `UNSIGNED SMALLINT` 或同等欄位作為^[主索引鍵](Primary Key)："

#: docs/8.x/migrations.md:block 274 (code)
msgid "$table->smallIncrements('id');\n"
msgstr "$table->smallIncrements('id');\n"

#: docs/8.x/migrations.md:block 276 (header)
msgid "`smallInteger()` {.collection-method}"
msgstr "`smallInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 277 (paragraph)
msgid "The `smallInteger` method creates a `SMALLINT` equivalent column:"
msgstr "`smallInteger` 方法建立一個 `SMALLINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 278 (code)
msgid "$table->smallInteger('votes');\n"
msgstr "$table->smallInteger('votes');\n"

#: docs/8.x/migrations.md:block 280 (header)
msgid "`softDeletesTz()` {.collection-method}"
msgstr "`softDeletesTz()` {.collection-method}"

#: docs/8.x/migrations.md:block 281 (paragraph)
msgid "The `softDeletesTz` method adds a nullable `deleted_at` `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr "`softDeletesTz` 方法會以給定的可選^[精度](Precision) (總位數) 新增一個 Nullable 的 `deleted_at` `TIMESTAMP` (含時區) 或相等欄位。該欄位主要是給 Eloquent「軟刪除」功能使用的，用來保存 `deleted_at` 時戳："

#: docs/8.x/migrations.md:block 282 (code)
msgid "$table->softDeletesTz($column = 'deleted_at', $precision = 0);\n"
msgstr "$table->softDeletesTz($column = 'deleted_at', $precision = 0);\n"

#: docs/8.x/migrations.md:block 284 (header)
msgid "`softDeletes()` {.collection-method}"
msgstr "`softDeletes()` {.collection-method}"

#: docs/8.x/migrations.md:block 285 (paragraph)
msgid "The `softDeletes` method adds a nullable `deleted_at` `TIMESTAMP` equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr "`softDeletes` 方法會以給定的可選^[精度](Precision) (總位數) 新增一個 Nullable 的 `deleted_at` `TIMESTAMP` 或相等欄位。該欄位主要是給 Eloquent「軟刪除」功能使用的，用來保存 `deleted_at` 時戳："

#: docs/8.x/migrations.md:block 286 (code)
msgid "$table->softDeletes($column = 'deleted_at', $precision = 0);\n"
msgstr "$table->softDeletes($column = 'deleted_at', $precision = 0);\n"

#: docs/8.x/migrations.md:block 288 (header)
msgid "`string()` {.collection-method}"
msgstr "`string()` {.collection-method}"

#: docs/8.x/migrations.md:block 289 (paragraph)
msgid "The `string` method creates a `VARCHAR` equivalent column of the given length:"
msgstr "`string` 方法以給定的長度來建立一個 `VARCHAR` 或相等欄位："

#: docs/8.x/migrations.md:block 290 (code)
msgid "$table->string('name', 100);\n"
msgstr "$table->string('name', 100);\n"

#: docs/8.x/migrations.md:block 292 (header)
msgid "`text()` {.collection-method}"
msgstr "`text()` {.collection-method}"

#: docs/8.x/migrations.md:block 293 (paragraph)
msgid "The `text` method creates a `TEXT` equivalent column:"
msgstr "`text` 方法會建立一個 `TEXT` 或相等欄位："

#: docs/8.x/migrations.md:block 294 (code)
msgid "$table->text('description');\n"
msgstr "$table->text('description');\n"

#: docs/8.x/migrations.md:block 296 (header)
msgid "`timeTz()` {.collection-method}"
msgstr "`timeTz()` {.collection-method}"

#: docs/8.x/migrations.md:block 297 (paragraph)
msgid "The `timeTz` method creates a `TIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr "`timeTz` 方法以給定的精度 (總位數) 建立一個 `TIME` (含時區) 或相等欄位："

#: docs/8.x/migrations.md:block 298 (code)
msgid "$table->timeTz('sunrise', $precision = 0);\n"
msgstr "$table->timeTz('sunrise', $precision = 0);\n"

#: docs/8.x/migrations.md:block 300 (header)
msgid "`time()` {.collection-method}"
msgstr "`time()` {.collection-method}"

#: docs/8.x/migrations.md:block 301 (paragraph)
msgid "The `time` method creates a `TIME` equivalent column with an optional precision (total digits):"
msgstr "`time` 方法會使用給定的可選精度 (總位數) 來建立一個 `TIME` 或相等欄位："

#: docs/8.x/migrations.md:block 302 (code)
msgid "$table->time('sunrise', $precision = 0);\n"
msgstr "$table->time('sunrise', $precision = 0);\n"

#: docs/8.x/migrations.md:block 304 (header)
msgid "`timestampTz()` {.collection-method}"
msgstr "`timestampTz()` {.collection-method}"

#: docs/8.x/migrations.md:block 305 (paragraph)
msgid "The `timestampTz` method creates a `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits):"
msgstr "`timestampTz` 方法以給定的精度 (總位數) 建立一個 `TIMESTAMP` (含時區) 或相等欄位："

#: docs/8.x/migrations.md:block 306 (code)
msgid "$table->timestampTz('added_at', $precision = 0);\n"
msgstr "$table->timestampTz('added_at', $precision = 0);\n"

#: docs/8.x/migrations.md:block 308 (header)
msgid "`timestamp()` {.collection-method}"
msgstr "`timestamp()` {.collection-method}"

#: docs/8.x/migrations.md:block 309 (paragraph)
msgid "The `timestamp` method creates a `TIMESTAMP` equivalent column with an optional precision (total digits):"
msgstr "`timestamp` 方法會使用給定的可選精度 (總位數) 來建立一個 `TIMESTAMP` 或相等欄位："

#: docs/8.x/migrations.md:block 310 (code)
msgid "$table->timestamp('added_at', $precision = 0);\n"
msgstr "$table->timestamp('added_at', $precision = 0);\n"

#: docs/8.x/migrations.md:block 312 (header)
msgid "`timestampsTz()` {.collection-method}"
msgstr "`timestampsTz()` {.collection-method}"

#: docs/8.x/migrations.md:block 313 (paragraph)
msgid "The `timestampsTz` method creates `created_at` and `updated_at` `TIMESTAMP` (with timezone) equivalent columns with an optional precision (total digits):"
msgstr "`timestampsTz` 方法以給定可選^[精度](Precision) (總位數) 建立 `TIMESTAMP` (含時區) 或相等的 `created_at` 與 `updated_at` 欄位："

#: docs/8.x/migrations.md:block 314 (code)
msgid "$table->timestampsTz($precision = 0);\n"
msgstr "$table->timestampsTz($precision = 0);\n"

#: docs/8.x/migrations.md:block 316 (header)
msgid "`timestamps()` {.collection-method}"
msgstr "`timestamps()` {.collection-method}"

#: docs/8.x/migrations.md:block 317 (paragraph)
msgid "The `timestamps` method creates `created_at` and `updated_at` `TIMESTAMP` equivalent columns with an optional precision (total digits):"
msgstr "`timestamps` 方法以給定可選^[精度](Precision) (總位數) 建立 `TIMESTAMP` 或相等的 `created_at` 與 `updated_at` 欄位："

#: docs/8.x/migrations.md:block 318 (code)
msgid "$table->timestamps($precision = 0);\n"
msgstr "$table->timestamps($precision = 0);\n"

#: docs/8.x/migrations.md:block 320 (header)
msgid "`tinyIncrements()` {.collection-method}"
msgstr "`tinyIncrements()` {.collection-method}"

#: docs/8.x/migrations.md:block 321 (paragraph)
msgid "The `tinyIncrements` method creates an auto-incrementing `UNSIGNED TINYINT` equivalent column as a primary key:"
msgstr "`tinyIncrements` 方法會建立一個 ^[Auto-Increment](自動遞增) 的 `UNSIGNED TINYINT` 或同等欄位作為^[主索引鍵](Primary Key)："

#: docs/8.x/migrations.md:block 322 (code)
msgid "$table->tinyIncrements('id');\n"
msgstr "$table->tinyIncrements('id');\n"

#: docs/8.x/migrations.md:block 324 (header)
msgid "`tinyInteger()` {.collection-method}"
msgstr "`tinyInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 325 (paragraph)
msgid "The `tinyInteger` method creates a `TINYINT` equivalent column:"
msgstr "`tinyInteger` 方法建立一個 `TINYINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 326 (code)
msgid "$table->tinyInteger('votes');\n"
msgstr "$table->tinyInteger('votes');\n"

#: docs/8.x/migrations.md:block 328 (header)
msgid "`tinyText()` {.collection-method}"
msgstr "`tinyText()` {.collection-method}"

#: docs/8.x/migrations.md:block 329 (paragraph)
msgid "The `tinyText` method creates a `TINYTEXT` equivalent column:"
msgstr "`tinyText` 方法建立一個 `TINYTEXT` 或相等欄位："

#: docs/8.x/migrations.md:block 330 (code)
msgid "$table->tinyText('notes');\n"
msgstr "$table->tinyText('notes');\n"

#: docs/8.x/migrations.md:block 332 (header)
msgid "`unsignedBigInteger()` {.collection-method}"
msgstr "`unsignedBigInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 333 (paragraph)
msgid "The `unsignedBigInteger` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr "`unsignedBigInteger` 方法會建立一個 `UNSIGNED BIGINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 334 (code)
msgid "$table->unsignedBigInteger('votes');\n"
msgstr "$table->unsignedBigInteger('votes');\n"

#: docs/8.x/migrations.md:block 336 (header)
msgid "`unsignedDecimal()` {.collection-method}"
msgstr "`unsignedDecimal()` {.collection-method}"

#: docs/8.x/migrations.md:block 337 (paragraph)
msgid "The `unsignedDecimal` method creates an `UNSIGNED DECIMAL` equivalent column with an optional precision (total digits) and scale (decimal digits):"
msgstr "`unsignedDecimal` 方法會以給定的可選^[精度](Precision) (總位數) 與^[小數位數](Scale) (小數位數) 來建立一個 `UNSIGNED DECIMAL` 或相等欄位："

#: docs/8.x/migrations.md:block 338 (code)
msgid "$table->unsignedDecimal('amount', $precision = 8, $scale = 2);\n"
msgstr "$table->unsignedDecimal('amount', $precision = 8, $scale = 2);\n"

#: docs/8.x/migrations.md:block 340 (header)
msgid "`unsignedInteger()` {.collection-method}"
msgstr "`unsignedInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 341 (paragraph)
msgid "The `unsignedInteger` method creates an `UNSIGNED INTEGER` equivalent column:"
msgstr "`unsignedInteger` 方法會建立一個 `UNSIGNED INTEGER` 或相等的欄位："

#: docs/8.x/migrations.md:block 342 (code)
msgid "$table->unsignedInteger('votes');\n"
msgstr "$table->unsignedInteger('votes');\n"

#: docs/8.x/migrations.md:block 344 (header)
msgid "`unsignedMediumInteger()` {.collection-method}"
msgstr "`unsignedMediumInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 345 (paragraph)
msgid "The `unsignedMediumInteger` method creates an `UNSIGNED MEDIUMINT` equivalent column:"
msgstr "`unsignedMediumInteger` 方法會建立一個 `UNSIGNED MEDIUMINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 346 (code)
msgid "$table->unsignedMediumInteger('votes');\n"
msgstr "$table->unsignedMediumInteger('votes');\n"

#: docs/8.x/migrations.md:block 348 (header)
msgid "`unsignedSmallInteger()` {.collection-method}"
msgstr "`unsignedSmallInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 349 (paragraph)
msgid "The `unsignedSmallInteger` method creates an `UNSIGNED SMALLINT` equivalent column:"
msgstr "`unsignedSmallInteger` 方法會建立一個 `UNSIGNED SMALLINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 350 (code)
msgid "$table->unsignedSmallInteger('votes');\n"
msgstr "$table->unsignedSmallInteger('votes');\n"

#: docs/8.x/migrations.md:block 352 (header)
msgid "`unsignedTinyInteger()` {.collection-method}"
msgstr "`unsignedTinyInteger()` {.collection-method}"

#: docs/8.x/migrations.md:block 353 (paragraph)
msgid "The `unsignedTinyInteger` method creates an `UNSIGNED TINYINT` equivalent column:"
msgstr "`unsignedTinyInteger` 方法會建立一個 `UNSIGNED TINYINT` 或相等的欄位："

#: docs/8.x/migrations.md:block 354 (code)
msgid "$table->unsignedTinyInteger('votes');\n"
msgstr "$table->unsignedTinyInteger('votes');\n"

#: docs/8.x/migrations.md:block 356 (header)
msgid "`uuidMorphs()` {.collection-method}"
msgstr "`uuidMorphs()` {.collection-method}"

#: docs/8.x/migrations.md:block 357 (paragraph)
msgid "The `uuidMorphs` method is a convenience method that adds a `{column}_id` `CHAR(36)` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr "`uuidMorphs` 是一個方便方法，會新增一個 `{欄位}_id` `CHAR(36)` 或相等欄位，以及一個 `{欄位}_type` `VARCHAR` 或想等欄位。"

#: docs/8.x/migrations.md:block 358 (paragraph)
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that use UUID identifiers. In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr "該方法主要是要給使用 UUID 作為識別字元的多型 [Eloquent 關聯](/docs/{{version}}/eloquent-relationships)定義欄位用的。在下列範例中，會建立 `taggable_id` 與 `taggable_type` 欄位："

#: docs/8.x/migrations.md:block 359 (code)
msgid "$table->uuidMorphs('taggable');\n"
msgstr "$table->uuidMorphs('taggable');\n"

#: docs/8.x/migrations.md:block 361 (header)
msgid "`uuid()` {.collection-method}"
msgstr "`uuid()` {.collection-method}"

#: docs/8.x/migrations.md:block 362 (paragraph)
msgid "The `uuid` method creates a `UUID` equivalent column:"
msgstr "`uuid` 方法會建立一個 `UUID` 或相等欄位："

#: docs/8.x/migrations.md:block 363 (code)
msgid "$table->uuid('id');\n"
msgstr "$table->uuid('id');\n"

#: docs/8.x/migrations.md:block 365 (header)
msgid "`year()` {.collection-method}"
msgstr "`year()` {.collection-method}"

#: docs/8.x/migrations.md:block 366 (paragraph)
msgid "The `year` method creates a `YEAR` equivalent column:"
msgstr "`year` 方法會建立一個 `YEAR` 或相等欄位："

#: docs/8.x/migrations.md:block 367 (code)
msgid "$table->year('birth_year');\n"
msgstr "$table->year('birth_year');\n"

#: docs/8.x/migrations.md:block 369 (header)
msgid "Column Modifiers"
msgstr "欄位修飾詞"

#: docs/8.x/migrations.md:block 370 (paragraph)
msgid "In addition to the column types listed above, there are several column \"modifiers\" you may use when adding a column to a database table. For example, to make the column \"nullable\", you may use the `nullable` method:"
msgstr "除了上列欄位型別外，還有多種可在將欄位新增至資料表時使用的欄位「修飾詞」。舉例來說，若要將欄位設為「Nullable」，可使用 `nullable` 方法："

#: docs/8.x/migrations.md:block 371 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('email')->nullable();\n"
"});\n"
msgstr "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('email')->nullable();\n"
"});\n"

#: docs/8.x/migrations.md:block 372 (paragraph)
msgid "The following table contains all of the available column modifiers. This list does not include [index modifiers](#creating-indexes):"
msgstr "下表中包含了所有可用的修飾詞。該列表中未包含[索引修飾詞](#creating-indexes)："

#: docs/8.x/migrations.md:block 373 (table)
msgid "Modifier"
msgstr "修飾詞"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Description"
msgstr "說明"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->after('column')`"
msgstr "`->after('column')`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Place the column \"after\" another column (MySQL)."
msgstr "將欄位放在另一個欄位「^[之後](After)」(MySQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->autoIncrement()`"
msgstr "`->autoIncrement()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Set INTEGER columns as auto-incrementing (primary key)."
msgstr "將 INTEGER 欄位設為 ^[Auto-Increment](自動遞增) (^[主索引鍵](Primary Key))。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->charset('utf8mb4')`"
msgstr "`->charset('utf8mb4')`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Specify a character set for the column (MySQL)."
msgstr "指定用於該欄位的 Character Set (MySQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->collation('utf8mb4_unicode_ci')`"
msgstr "`->collation('utf8mb4_unicode_ci')`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Specify a collation for the column (MySQL/PostgreSQL/SQL Server)."
msgstr "指定用於該欄位的 Collation (MySQL/PostgreSQL/SQL Server)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->comment('my comment')`"
msgstr "`->comment('my comment')`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Add a comment to a column (MySQL/PostgreSQL)."
msgstr "為該欄位新增註解 (MySQL/PostgreSQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->default($value)`"
msgstr "`->default($value)`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Specify a \"default\" value for the column."
msgstr "為欄位指定「^[預設](Default)」值。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->first()`"
msgstr "`->first()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Place the column \"first\" in the table (MySQL)."
msgstr "將欄位放在資料表中的「^[第一個](First)」欄位 (MySQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->from($integer)`"
msgstr "`->from($integer)`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Set the starting value of an auto-incrementing field (MySQL / PostgreSQL)."
msgstr "設定 ^[Auto-Increment](自動遞增) 欄位的起始值 (MySQL / PostgreSQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->invisible()`"
msgstr "`->invisible()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Make the column \"invisible\" to `SELECT *` queries (MySQL)."
msgstr "讓該欄位在 `SELECT *` 查詢中「^[不可見](Invisible)」(MySQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->nullable($value = true)`"
msgstr "`->nullable($value = true)`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Allow NULL values to be inserted into the column."
msgstr "允許將 NULL 值插入該欄位中。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->storedAs($expression)`"
msgstr "`->storedAs($expression)`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Create a stored generated column (MySQL / PostgreSQL)."
msgstr "建立一個 Stored Generated 的欄位 (MySQL / PostgreSQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->unsigned()`"
msgstr "`->unsigned()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Set INTEGER columns as UNSIGNED (MySQL)."
msgstr "將 INTEGER 欄位設為 UNSIGNED (MySQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->useCurrent()`"
msgstr "`->useCurrent()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value."
msgstr "設定 TIMESTAMP 欄位使用 CURRENT_TIMESTAMP 作為預設值。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->useCurrentOnUpdate()`"
msgstr "`->useCurrentOnUpdate()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated."
msgstr "在資料更新時，將 TIMESTAMP 欄位設為 CURRENT_TIMESTAMP。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->virtualAs($expression)`"
msgstr "`->virtualAs($expression)`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Create a virtual generated column (MySQL)."
msgstr "建立 Virtual Generated 欄位 (MySQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->generatedAs($expression)`"
msgstr "`->generatedAs($expression)`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Create an identity column with specified sequence options (PostgreSQL)."
msgstr "以指定的 ^[Sequence](順序) 選項來建立 Identity 欄位 (PostgreSQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->always()`"
msgstr "`->always()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Defines the precedence of sequence values over input for an identity column (PostgreSQL)."
msgstr "定義一個優先使用 Sequence 值而不使用輸入值的 Identity 欄位 (PostgreSQL)。"

#: docs/8.x/migrations.md:block 373 (table)
msgid "`->isGeometry()`"
msgstr "`->isGeometry()`"

#: docs/8.x/migrations.md:block 373 (table)
msgid "Set spatial column type to `geometry` - the default type is `geography` (PostgreSQL)."
msgstr "將 Spatial 欄位的型別設為 `geometry` —— 即 `geography` 的預設型別 (PostgreSQL)。"

#: docs/8.x/migrations.md:block 375 (header)
msgid "Default Expressions"
msgstr "預設運算式"

#: docs/8.x/migrations.md:block 376 (paragraph)
msgid "The `default` modifier accepts a value or an `Illuminate\\Database\\Query\\Expression` instance. Using an `Expression` instance will prevent Laravel from wrapping the value in quotes and allow you to use database specific functions. One situation where this is particularly useful is when you need to assign default values to JSON columns:"
msgstr "`default` 修飾詞可接受 `Illuminate\\Database\\Query\\Expression` 實體。使用 `Expression` 實體時，Laravel 就不會將輸入值包裝在引號內，能讓我們使用資料庫所提供的函式。有一些狀況特別適合使用這個方法，如要給 JSON 欄位指定預設值時："

#: docs/8.x/migrations.md:block 377 (code)
msgid "<?php\n\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Database\\Query\\Expression;\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"class CreateFlightsTable extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Database\\Query\\Expression;\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"class CreateFlightsTable extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/migrations.md:block 378 (quote)
msgid "{note} Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation."
msgstr "{note} 對於預設運算式的支援程度會因資料庫 Driver、資料庫版本、欄位型別等而有所不同。請參考資料庫的說明文件。"

#: docs/8.x/migrations.md:block 380 (header)
msgid "Column Order"
msgstr "欄位順序"

#: docs/8.x/migrations.md:block 381 (paragraph)
msgid "When using the MySQL database, the `after` method may be used to add columns after an existing column in the schema:"
msgstr "在使用 MySQL 資料庫時，可使用 `after` 方法來將欄位插入到資料表結構中的某個現有欄位之後："

#: docs/8.x/migrations.md:block 382 (code)
msgid "$table->after('password', function ($table) {\n"
"    $table->string('address_line1');\n"
"    $table->string('address_line2');\n"
"    $table->string('city');\n"
"});\n"
msgstr "$table->after('password', function ($table) {\n"
"    $table->string('address_line1');\n"
"    $table->string('address_line2');\n"
"    $table->string('city');\n"
"});\n"

#: docs/8.x/migrations.md:block 384 (header)
msgid "Modifying Columns"
msgstr "修改欄位"

#: docs/8.x/migrations.md:block 386 (header)
msgid "Prerequisites"
msgstr "前置要求"

#: docs/8.x/migrations.md:block 387 (paragraph)
msgid "Before modifying a column, you must install the `doctrine/dbal` package using the Composer package manager. The Doctrine DBAL library is used to determine the current state of the column and to create the SQL queries needed to make the requested changes to your column:"
msgstr "要修改欄位前，必須先使用 Composer 套件管理員來安裝 `doctrine/dbal` 套件。Doctrine DBAL 函式庫要用來判斷目前欄位的狀態，並用以建立要修改欄位所需要的 SQL 查詢："

#: docs/8.x/migrations.md:block 388 (code)
msgid "composer require doctrine/dbal\n"
msgstr "composer require doctrine/dbal\n"

#: docs/8.x/migrations.md:block 389 (paragraph)
msgid "If you plan to modify columns created using the `timestamp` method, you must also add the following configuration to your application's `config/database.php` configuration file:"
msgstr "若有需要修改使用 `timestamp` 方法建立的欄位，則必須在 `config/database.php` 設定檔中加上下列設定："

#: docs/8.x/migrations.md:block 390 (code)
msgid "use Illuminate\\Database\\DBAL\\TimestampType;\n\n"
"'dbal' => [\n"
"    'types' => [\n"
"        'timestamp' => TimestampType::class,\n"
"    ],\n"
"],\n"
msgstr "use Illuminate\\Database\\DBAL\\TimestampType;\n\n"
"'dbal' => [\n"
"    'types' => [\n"
"        'timestamp' => TimestampType::class,\n"
"    ],\n"
"],\n"

#: docs/8.x/migrations.md:block 391 (quote)
msgid "{note} If your application is using Microsoft SQL Server, please ensure that you install `doctrine/dbal:^3.0`."
msgstr "{note} 使用 Microsoft SQL Server 時，請確保有安裝 `doctrine/dbal:^3.0`。"

#: docs/8.x/migrations.md:block 393 (header)
msgid "Updating Column Attributes"
msgstr "更新欄位屬性"

#: docs/8.x/migrations.md:block 394 (paragraph)
msgid "The `change` method allows you to modify the type and attributes of existing columns. For example, you may wish to increase the size of a `string` column. To see the `change` method in action, let's increase the size of the `name` column from 25 to 50. To accomplish this, we simply define the new state of the column and then call the `change` method:"
msgstr "使用 `change` 欄位，即可修改現有欄位的型別或屬性。舉例來說，我們可以用來增加 `string` 欄位的大小。來看看使用 `change` 方法的例子，我們來把 `name` 欄位的大小從 25 增加到 50。若要增加 `name` 欄位的大小，我們只需要定義該欄位的新狀態，然後呼叫 `change` 方法即可："

#: docs/8.x/migrations.md:block 395 (code)
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('name', 50)->change();\n"
"});\n"
msgstr "Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('name', 50)->change();\n"
"});\n"

#: docs/8.x/migrations.md:block 396 (paragraph)
msgid "We could also modify a column to be nullable:"
msgstr "我們也可以將某個欄位更改為 nullable："

#: docs/8.x/migrations.md:block 397 (code)
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('name', 50)->nullable()->change();\n"
"});\n"
msgstr "Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('name', 50)->nullable()->change();\n"
"});\n"

#: docs/8.x/migrations.md:block 398 (quote)
msgid "{note} The following column types can be modified: `bigInteger`, `binary`, `boolean`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`. To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites)."
msgstr "{note} 可修改的欄位型別有：`bigInteger`、`binary`、`boolean`、`date`、`dateTime`、`dateTimeTz`、`decimal`、`integer`、`json`、`longText`、`mediumText`、`smallInteger`、`string`、`text`、`time`、`unsignedBigInteger`、`unsignedInteger`、`unsignedSmallInteger`、`uuid` 等。若要修改 `timestamp` 欄位型別，則[必須先將其註冊為 Doctrine 型別](#prerequisites)。"

#: docs/8.x/migrations.md:block 400 (header)
msgid "Renaming Columns"
msgstr "重新命名欄位"

#: docs/8.x/migrations.md:block 401 (paragraph)
msgid "To rename a column, you may use the `renameColumn` method provided by the schema builder blueprint. Before renaming a column, ensure that you have installed the `doctrine/dbal` library via the Composer package manager:"
msgstr "若要重新命名欄位，可使用 Schema Builder Blueprint 提供的 `renameColumn` 方法。在重新命名欄位前，請先確認是否有使用 Composer 套件管理員安裝 `doctrine/dbal` 函式庫："

#: docs/8.x/migrations.md:block 402 (code)
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->renameColumn('from', 'to');\n"
"});\n"
msgstr "Schema::table('users', function (Blueprint $table) {\n"
"    $table->renameColumn('from', 'to');\n"
"});\n"

#: docs/8.x/migrations.md:block 403 (quote)
msgid "{note} Renaming an `enum` column is not currently supported."
msgstr "{note} 目前尚不支援重新命名 `enum` 欄位。"

#: docs/8.x/migrations.md:block 405 (header)
msgid "Dropping Columns"
msgstr "刪除欄位"

#: docs/8.x/migrations.md:block 406 (paragraph)
msgid "To drop a column, you may use the `dropColumn` method on the schema builder blueprint. If your application is utilizing an SQLite database, you must install the `doctrine/dbal` package via the Composer package manager before the `dropColumn` method may be used:"
msgstr "若要刪除欄位，可使用 Schema Builder Blueprint 上的 `dropColumn` 方法。若為使用 SQLite 資料庫的專案，則在使用 `dropColumn` 前必須先使用 Composer 套件管理員安裝 `doctrine/dbal` 套件："

#: docs/8.x/migrations.md:block 407 (code)
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->dropColumn('votes');\n"
"});\n"
msgstr "Schema::table('users', function (Blueprint $table) {\n"
"    $table->dropColumn('votes');\n"
"});\n"

#: docs/8.x/migrations.md:block 408 (paragraph)
msgid "You may drop multiple columns from a table by passing an array of column names to the `dropColumn` method:"
msgstr "可以傳入一組欄位名稱的陣列給 `dropColumn` 方法來一次移除多個欄位："

#: docs/8.x/migrations.md:block 409 (code)
msgid "Schema::table('users', function (Blueprint $table) {\n"
"    $table->dropColumn(['votes', 'avatar', 'location']);\n"
"});\n"
msgstr "Schema::table('users', function (Blueprint $table) {\n"
"    $table->dropColumn(['votes', 'avatar', 'location']);\n"
"});\n"

#: docs/8.x/migrations.md:block 410 (quote)
msgid "{note} Dropping or modifying multiple columns within a single migration while using an SQLite database is not supported."
msgstr "{note} 使用 SQLite 資料庫時，不支援在單一 Migration 中刪除或修改多個欄位。"

#: docs/8.x/migrations.md:block 412 (header)
msgid "Available Command Aliases"
msgstr "可用的指令別名"

#: docs/8.x/migrations.md:block 413 (paragraph)
msgid "Laravel provides several convenient methods related to dropping common types of columns. Each of these methods is described in the table below:"
msgstr "Laravel 提供了多種可用來刪除常見欄位型別的方便方法。下表中說明了這些方法："

#: docs/8.x/migrations.md:block 414 (table)
msgid "Command"
msgstr "指令"

#: docs/8.x/migrations.md:block 414 (table)
msgid "`$table->dropMorphs('morphable');`"
msgstr "`$table->dropMorphs('morphable');`"

#: docs/8.x/migrations.md:block 414 (table)
msgid "Drop the `morphable_id` and `morphable_type` columns."
msgstr "刪除 `morphable_id` 與 `morphable_type` 欄位。"

#: docs/8.x/migrations.md:block 414 (table)
msgid "`$table->dropRememberToken();`"
msgstr "`$table->dropRememberToken();`"

#: docs/8.x/migrations.md:block 414 (table)
msgid "Drop the `remember_token` column."
msgstr "刪除 `remember_token` 欄位。"

#: docs/8.x/migrations.md:block 414 (table)
msgid "`$table->dropSoftDeletes();`"
msgstr "`$table->dropSoftDeletes();`"

#: docs/8.x/migrations.md:block 414 (table)
msgid "Drop the `deleted_at` column."
msgstr "刪除 `deleted_at` 欄位。"

#: docs/8.x/migrations.md:block 414 (table)
msgid "`$table->dropSoftDeletesTz();`"
msgstr "`$table->dropSoftDeletesTz();`"

#: docs/8.x/migrations.md:block 414 (table)
msgid "Alias of `dropSoftDeletes()` method."
msgstr "`dropSoftDeletes()` 方法的別名。"

#: docs/8.x/migrations.md:block 414 (table)
msgid "`$table->dropTimestamps();`"
msgstr "`$table->dropTimestamps();`"

#: docs/8.x/migrations.md:block 414 (table)
msgid "Drop the `created_at` and `updated_at` columns."
msgstr "刪除 `created_at` 與 `updated_at` 欄位。"

#: docs/8.x/migrations.md:block 414 (table)
msgid "`$table->dropTimestampsTz();`"
msgstr "`$table->dropTimestampsTz();`"

#: docs/8.x/migrations.md:block 414 (table)
msgid "Alias of `dropTimestamps()` method."
msgstr "`dropTimestamps()` 方法的別名。"

#: docs/8.x/migrations.md:block 416 (header)
msgid "Indexes"
msgstr "索引"

#: docs/8.x/migrations.md:block 418 (header)
msgid "Creating Indexes"
msgstr "建立索引"

#: docs/8.x/migrations.md:block 419 (paragraph)
msgid "The Laravel schema builder supports several types of indexes. The following example creates a new `email` column and specifies that its values should be unique. To create the index, we can chain the `unique` method onto the column definition:"
msgstr "Laravel 的 Schema Builder 支援多種類型的索引。下列為一個建立新 `email` 欄位並指定該欄位值^[不可重複](Unique)的範例。若要建立索引，我們可以將 `unique` 方法串聯到欄位定義之後呼叫："

#: docs/8.x/migrations.md:block 420 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('email')->unique();\n"
"});\n"
msgstr "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('users', function (Blueprint $table) {\n"
"    $table->string('email')->unique();\n"
"});\n"

#: docs/8.x/migrations.md:block 421 (paragraph)
msgid "Alternatively, you may create the index after defining the column. To do so, you should call the `unique` method on the schema builder blueprint. This method accepts the name of the column that should receive a unique index:"
msgstr "或者，我們也可以在定義完欄位後再建立索引。若要在定義欄位完後才建立索引，我們需要在 Schema Builder Blueprint 上呼叫 `unique` 方法。該方法的引數為要設為 Unique 索引的欄位名稱："

#: docs/8.x/migrations.md:block 422 (code)
msgid "$table->unique('email');\n"
msgstr "$table->unique('email');\n"

#: docs/8.x/migrations.md:block 423 (paragraph)
msgid "You may even pass an array of columns to an index method to create a compound (or composite) index:"
msgstr "我們也可以傳入一組欄位的陣列給索引方法，以建立一個^[複合式](Compound) / ^[組合式](Composite)的索引"

#: docs/8.x/migrations.md:block 424 (code)
msgid "$table->index(['account_id', 'created_at']);\n"
msgstr "$table->index(['account_id', 'created_at']);\n"

#: docs/8.x/migrations.md:block 425 (paragraph)
msgid "When creating an index, Laravel will automatically generate an index name based on the table, column names, and the index type, but you may pass a second argument to the method to specify the index name yourself:"
msgstr "建立索引時，Laravel 會自動依據資料表名稱、欄位名稱、索引類型等來產生索引名稱。不過，我們也可以傳入第二個因數給該方法來自行指定索引名稱："

#: docs/8.x/migrations.md:block 426 (code)
msgid "$table->unique('email', 'unique_email');\n"
msgstr "$table->unique('email', 'unique_email');\n"

#: docs/8.x/migrations.md:block 428 (header)
msgid "Available Index Types"
msgstr "可用的索引類型"

#: docs/8.x/migrations.md:block 429 (paragraph)
msgid "Laravel's schema builder blueprint class provides methods for creating each type of index supported by Laravel. Each index method accepts an optional second argument to specify the name of the index. If omitted, the name will be derived from the names of the table and column(s) used for the index, as well as the index type. Each of the available index methods is described in the table below:"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->primary('id');`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds a primary key."
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->primary(['id', 'parent_id']);`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds composite keys."
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->unique('email');`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds a unique index."
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->index('state');`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds an index."
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->fulltext('body');`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds a fulltext index (MySQL/PostgreSQL)."
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->fulltext('body')->language('english');`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds a fulltext index of the specified language (PostgreSQL)."
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "`$table->spatialIndex('location');`"
msgstr ""

#: docs/8.x/migrations.md:block 430 (table)
msgid "Adds a spatial index (except SQLite)."
msgstr ""

#: docs/8.x/migrations.md:block 432 (header)
msgid "Index Lengths & MySQL / MariaDB"
msgstr ""

#: docs/8.x/migrations.md:block 433 (paragraph)
msgid "By default, Laravel uses the `utf8mb4` character set. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure the default string length by calling the `Schema::defaultStringLength` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/8.x/migrations.md:block 434 (code)
msgid "use Illuminate\\Support\\Facades\\Schema;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Schema::defaultStringLength(191);\n"
"}\n"
msgstr ""

#: docs/8.x/migrations.md:block 435 (paragraph)
msgid "Alternatively, you may enable the `innodb_large_prefix` option for your database. Refer to your database's documentation for instructions on how to properly enable this option."
msgstr ""

#: docs/8.x/migrations.md:block 437 (header)
msgid "Renaming Indexes"
msgstr ""

#: docs/8.x/migrations.md:block 438 (paragraph)
msgid "To rename an index, you may use the `renameIndex` method provided by the schema builder blueprint. This method accepts the current index name as its first argument and the desired name as its second argument:"
msgstr ""

#: docs/8.x/migrations.md:block 439 (code)
msgid "$table->renameIndex('from', 'to')\n"
msgstr ""

#: docs/8.x/migrations.md:block 441 (header)
msgid "Dropping Indexes"
msgstr ""

#: docs/8.x/migrations.md:block 442 (paragraph)
msgid "To drop an index, you must specify the index's name. By default, Laravel automatically assigns an index name based on the table name, the name of the indexed column, and the index type. Here are some examples:"
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "`$table->dropPrimary('users_id_primary');`"
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "Drop a primary key from the \"users\" table."
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "`$table->dropUnique('users_email_unique');`"
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "Drop a unique index from the \"users\" table."
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "`$table->dropIndex('geo_state_index');`"
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "Drop a basic index from the \"geo\" table."
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "`$table->dropSpatialIndex('geo_location_spatialindex');`"
msgstr ""

#: docs/8.x/migrations.md:block 443 (table)
msgid "Drop a spatial index from the \"geo\" table (except SQLite)."
msgstr ""

#: docs/8.x/migrations.md:block 444 (paragraph)
msgid "If you pass an array of columns into a method that drops indexes, the conventional index name will be generated based on the table name, columns, and index type:"
msgstr ""

#: docs/8.x/migrations.md:block 445 (code)
msgid "Schema::table('geo', function (Blueprint $table) {\n"
"    $table->dropIndex(['state']); // Drops index 'geo_state_index'\n"
"});\n"
msgstr ""

#: docs/8.x/migrations.md:block 447 (header)
msgid "Foreign Key Constraints"
msgstr ""

#: docs/8.x/migrations.md:block 448 (paragraph)
msgid "Laravel also provides support for creating foreign key constraints, which are used to force referential integrity at the database level. For example, let's define a `user_id` column on the `posts` table that references the `id` column on a `users` table:"
msgstr ""

#: docs/8.x/migrations.md:block 449 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('posts', function (Blueprint $table) {\n"
"    $table->unsignedBigInteger('user_id');\n\n"
"    $table->foreign('user_id')->references('id')->on('users');\n"
"});\n"
msgstr ""

#: docs/8.x/migrations.md:block 450 (paragraph)
msgid "Since this syntax is rather verbose, Laravel provides additional, terser methods that use conventions to provide a better developer experience. When using the `foreignId` method to create your column, the example above can be rewritten like so:"
msgstr ""

#: docs/8.x/migrations.md:block 451 (code)
msgid "Schema::table('posts', function (Blueprint $table) {\n"
"    $table->foreignId('user_id')->constrained();\n"
"});\n"
msgstr ""

#: docs/8.x/migrations.md:block 452 (paragraph)
msgid "The `foreignId` method creates an `UNSIGNED BIGINT` equivalent column, while the `constrained` method will use conventions to determine the table and column name being referenced. If your table name does not match Laravel's conventions, you may specify the table name by passing it as an argument to the `constrained` method:"
msgstr ""

#: docs/8.x/migrations.md:block 453 (code)
msgid "Schema::table('posts', function (Blueprint $table) {\n"
"    $table->foreignId('user_id')->constrained('users');\n"
"});\n"
msgstr ""

#: docs/8.x/migrations.md:block 454 (paragraph)
msgid "You may also specify the desired action for the \"on delete\" and \"on update\" properties of the constraint:"
msgstr ""

#: docs/8.x/migrations.md:block 455 (code)
msgid "$table->foreignId('user_id')\n"
"      ->constrained()\n"
"      ->onUpdate('cascade')\n"
"      ->onDelete('cascade');\n"
msgstr ""

#: docs/8.x/migrations.md:block 456 (paragraph)
msgid "An alternative, expressive syntax is also provided for these actions:"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "Method"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "`$table->cascadeOnUpdate();`"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "Updates should cascade."
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "`$table->restrictOnUpdate();`"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "Updates should be restricted."
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "`$table->cascadeOnDelete();`"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "Deletes should cascade."
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "`$table->restrictOnDelete();`"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "Deletes should be restricted."
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "`$table->nullOnDelete();`"
msgstr ""

#: docs/8.x/migrations.md:block 457 (table)
msgid "Deletes should set the foreign key value to null."
msgstr ""

#: docs/8.x/migrations.md:block 458 (paragraph)
msgid "Any additional [column modifiers](#column-modifiers) must be called before the `constrained` method:"
msgstr ""

#: docs/8.x/migrations.md:block 459 (code)
msgid "$table->foreignId('user_id')\n"
"      ->nullable()\n"
"      ->constrained();\n"
msgstr ""

#: docs/8.x/migrations.md:block 461 (header)
msgid "Dropping Foreign Keys"
msgstr ""

#: docs/8.x/migrations.md:block 462 (paragraph)
msgid "To drop a foreign key, you may use the `dropForeign` method, passing the name of the foreign key constraint to be deleted as an argument. Foreign key constraints use the same naming convention as indexes. In other words, the foreign key constraint name is based on the name of the table and the columns in the constraint, followed by a \"_foreign\" suffix:"
msgstr ""

#: docs/8.x/migrations.md:block 463 (code)
msgid "$table->dropForeign('posts_user_id_foreign');\n"
msgstr ""

#: docs/8.x/migrations.md:block 464 (paragraph)
msgid "Alternatively, you may pass an array containing the column name that holds the foreign key to the `dropForeign` method. The array will be converted to a foreign key constraint name using Laravel's constraint naming conventions:"
msgstr ""

#: docs/8.x/migrations.md:block 465 (code)
msgid "$table->dropForeign(['user_id']);\n"
msgstr ""

#: docs/8.x/migrations.md:block 467 (header)
msgid "Toggling Foreign Key Constraints"
msgstr ""

#: docs/8.x/migrations.md:block 468 (paragraph)
msgid "You may enable or disable foreign key constraints within your migrations by using the following methods:"
msgstr ""

#: docs/8.x/migrations.md:block 469 (code)
msgid "Schema::enableForeignKeyConstraints();\n\n"
"Schema::disableForeignKeyConstraints();\n"
msgstr ""

#: docs/8.x/migrations.md:block 470 (quote)
msgid "{note} SQLite disables foreign key constraints by default. When using SQLite, make sure to [enable foreign key support](/docs/{{version}}/database#configuration) in your database configuration before attempting to create them in your migrations. In addition, SQLite only supports foreign keys upon creation of the table and [not when tables are altered](https://www.sqlite.org/omitted.html)."
msgstr ""

#: docs/8.x/migrations.md:block 472 (header)
msgid "Events"
msgstr ""

#: docs/8.x/migrations.md:block 473 (paragraph)
msgid "For convenience, each migration operation will dispatch an [event](/docs/{{version}}/events). All of the following events extend the base `Illuminate\\Database\\Events\\MigrationEvent` class:"
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "Class"
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "`Illuminate\\Database\\Events\\MigrationsStarted`"
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "A batch of migrations is about to be executed."
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "`Illuminate\\Database\\Events\\MigrationsEnded`"
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "A batch of migrations has finished executing."
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "`Illuminate\\Database\\Events\\MigrationStarted`"
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "A single migration is about to be executed."
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "`Illuminate\\Database\\Events\\MigrationEnded`"
msgstr ""

#: docs/8.x/migrations.md:block 474 (table)
msgid "A single migration has finished executing."
msgstr ""

#: docs/9.x/migrations.md:block 17 (code)
msgid "php artisan schema:dump\n\n"
"# Dump the current database schema and prune all existing migrations...\n"
"php artisan schema:dump --prune\n"
msgstr ""

#: docs/9.x/migrations.md:block 25 (code)
msgid "<?php\n\n"
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->string('name');\n"
"            $table->string('airline');\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Reverse the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function down()\n"
"    {\n"
"        Schema::drop('flights');\n"
"    }\n"
"};\n"
msgstr ""

#: docs/9.x/migrations.md:block 51 (code)
msgid "php artisan migrate:refresh\n\n"
"# Refresh the database and run all database seeds...\n"
"php artisan migrate:refresh --seed\n"
msgstr ""

#: docs/9.x/migrations.md:block 373 (code)
msgid "<?php\n\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Database\\Query\\Expression;\n"
"use Illuminate\\Database\\Migrations\\Migration;\n\n"
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        Schema::create('flights', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"            $table->timestamps();\n"
"        });\n"
"    }\n"
"};\n"
msgstr ""

#: docs/9.x/migrations.md:block 394 (quote)
msgid "{note} The following column types can be modified: `bigInteger`, `binary`, `boolean`, `char`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`. To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites)."
msgstr ""

#: docs/9.x/migrations.md:block 426 (table)
msgid "`$table->fullText('body');`"
msgstr ""

#: docs/9.x/migrations.md:block 426 (table)
msgid "Adds a full text index (MySQL/PostgreSQL)."
msgstr ""

#: docs/9.x/migrations.md:block 426 (table)
msgid "`$table->fullText('body')->language('english');`"
msgstr ""

#: docs/9.x/migrations.md:block 426 (table)
msgid "Adds a full text index of the specified language (PostgreSQL)."
msgstr ""

#: docs/9.x/migrations.md:block 439 (table)
msgid "`$table->dropFullText('posts_body_fulltext');`"
msgstr ""

#: docs/9.x/migrations.md:block 439 (table)
msgid "Drop a full text index from the \"posts\" table."
msgstr ""

#: docs/9.x/migrations.md:block 470 (table)
msgid "`Illuminate\\Database\\Events\\SchemaDumped`"
msgstr ""

#: docs/9.x/migrations.md:block 470 (table)
msgid "A database schema dump has completed."
msgstr ""

#: docs/9.x/migrations.md:block 470 (table)
msgid "`Illuminate\\Database\\Events\\SchemaLoaded`"
msgstr ""

#: docs/9.x/migrations.md:block 470 (table)
msgid "An existing database schema dump has loaded."
msgstr ""

#: docs/master/migrations.md:block 50 (paragraph)
msgid "You may roll back a specific \"batch\" of migrations by providing the `batch` option to the `rollback` command, where the `batch` option corresponds to a batch value within your application's `migrations` database table. For example, the following command will roll back all migrations in batch three:"
msgstr ""

#: docs/master/migrations.md:block 51 (code)
msgid "php artisan migrate:rollback --batch=3\n"
msgstr ""

