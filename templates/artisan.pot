#
msgid ""
msgstr ""

#: docs/10.x/artisan.md:block 1 (header)
msgid "Artisan Console"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Tinker (REPL)](#tinker)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Writing Commands](#writing-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Generating Commands](#generating-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Command Structure](#command-structure)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Closure Commands](#closure-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Isolatable Commands](#isolatable-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Defining Input Expectations](#defining-input-expectations)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Arguments](#arguments)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Options](#options)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Input Arrays](#input-arrays)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Input Descriptions](#input-descriptions)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Prompting for Missing Input](#prompting-for-missing-input)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Command I/O](#command-io)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Retrieving Input](#retrieving-input)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Prompting for Input](#prompting-for-input)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Writing Output](#writing-output)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Registering Commands](#registering-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Programmatically Executing Commands](#programmatically-executing-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Calling Commands From Other Commands](#calling-commands-from-other-commands)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Signal Handling](#signal-handling)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Stub Customization](#stub-customization)"
msgstr ""

#: docs/10.x/artisan.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/10.x/artisan.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/artisan.md:block 5 (paragraph)
msgid "Artisan is the command line interface included with Laravel. Artisan exists at the root of your application as the `artisan` script and provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the `list` command:"
msgstr ""

#: docs/10.x/artisan.md:block 6 (code)
msgid "php artisan list\n"
msgstr ""

#: docs/10.x/artisan.md:block 7 (paragraph)
msgid "Every command also includes a \"help\" screen which displays and describes the command's available arguments and options. To view a help screen, precede the name of the command with `help`:"
msgstr ""

#: docs/10.x/artisan.md:block 8 (code)
msgid "php artisan help migrate\n"
msgstr ""

#: docs/10.x/artisan.md:block 10 (header)
msgid "Laravel Sail"
msgstr ""

#: docs/10.x/artisan.md:block 11 (paragraph)
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail) as your local development environment, remember to use the `sail` command line to invoke Artisan commands. Sail will execute your Artisan commands within your application's Docker containers:"
msgstr ""

#: docs/10.x/artisan.md:block 12 (code)
msgid "./vendor/bin/sail artisan list\n"
msgstr ""

#: docs/10.x/artisan.md:block 14 (header)
msgid "Tinker (REPL)"
msgstr ""

#: docs/10.x/artisan.md:block 15 (paragraph)
msgid "Laravel Tinker is a powerful REPL for the Laravel framework, powered by the [PsySH](https://github.com/bobthecow/psysh) package."
msgstr ""

#: docs/10.x/artisan.md:block 17 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/artisan.md:block 18 (paragraph)
msgid "All Laravel applications include Tinker by default. However, you may install Tinker using Composer if you have previously removed it from your application:"
msgstr ""

#: docs/10.x/artisan.md:block 19 (code)
msgid "composer require laravel/tinker\n"
msgstr ""

#: docs/10.x/artisan.md:block 20 (quote)
msgid "[!NOTE] Looking for hot reloading, multiline code editing, and autocompletion when interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!"
msgstr ""

#: docs/10.x/artisan.md:block 22 (header)
msgid "Usage"
msgstr ""

#: docs/10.x/artisan.md:block 23 (paragraph)
msgid "Tinker allows you to interact with your entire Laravel application on the command line, including your Eloquent models, jobs, events, and more. To enter the Tinker environment, run the `tinker` Artisan command:"
msgstr ""

#: docs/10.x/artisan.md:block 24 (code)
msgid "php artisan tinker\n"
msgstr ""

#: docs/10.x/artisan.md:block 25 (paragraph)
msgid "You can publish Tinker's configuration file using the `vendor:publish` command:"
msgstr ""

#: docs/10.x/artisan.md:block 26 (code)
msgid "php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr ""

#: docs/10.x/artisan.md:block 27 (quote)
msgid "[!WARNING] The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs."
msgstr ""

#: docs/10.x/artisan.md:block 29 (header)
msgid "Command Allow List"
msgstr ""

#: docs/10.x/artisan.md:block 30 (paragraph)
msgid "Tinker utilizes an \"allow\" list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` commands. If you would like to allow more commands you may add them to the `commands` array in your `tinker.php` configuration file:"
msgstr ""

#: docs/10.x/artisan.md:block 31 (code)
msgid ""
"'commands' => [\n"
"    // App\\Console\\Commands\\ExampleCommand::class,\n"
"],\n"
msgstr ""

#: docs/10.x/artisan.md:block 33 (header)
msgid "Classes That Should Not Be Aliased"
msgstr ""

#: docs/10.x/artisan.md:block 34 (paragraph)
msgid "Typically, Tinker automatically aliases classes as you interact with them in Tinker. However, you may wish to never alias some classes. You may accomplish this by listing the classes in the `dont_alias` array of your `tinker.php` configuration file:"
msgstr ""

#: docs/10.x/artisan.md:block 35 (code)
msgid ""
"'dont_alias' => [\n"
"    App\\Models\\User::class,\n"
"],\n"
msgstr ""

#: docs/10.x/artisan.md:block 37 (header)
msgid "Writing Commands"
msgstr ""

#: docs/10.x/artisan.md:block 38 (paragraph)
msgid "In addition to the commands provided with Artisan, you may build your own custom commands. Commands are typically stored in the `app/Console/Commands` directory; however, you are free to choose your own storage location as long as your commands can be loaded by Composer."
msgstr ""

#: docs/10.x/artisan.md:block 40 (header)
msgid "Generating Commands"
msgstr ""

#: docs/10.x/artisan.md:block 41 (paragraph)
msgid "To create a new command, you may use the `make:command` Artisan command. This command will create a new command class in the `app/Console/Commands` directory. Don't worry if this directory does not exist in your application - it will be created the first time you run the `make:command` Artisan command:"
msgstr ""

#: docs/10.x/artisan.md:block 42 (code)
msgid "php artisan make:command SendEmails\n"
msgstr ""

#: docs/10.x/artisan.md:block 44 (header)
msgid "Command Structure"
msgstr ""

#: docs/10.x/artisan.md:block 45 (paragraph)
msgid "After generating your command, you should define appropriate values for the `signature` and `description` properties of the class. These properties will be used when displaying your command on the `list` screen. The `signature` property also allows you to define [your command's input expectations](#defining-input-expectations). The `handle` method will be called when your command is executed. You may place your command logic in this method."
msgstr ""

#: docs/10.x/artisan.md:block 46 (paragraph)
msgid "Let's take a look at an example command. Note that we are able to request any dependencies we need via the command's `handle` method. The Laravel [service container](/docs/{{version}}/container) will automatically inject all dependencies that are type-hinted in this method's signature:"
msgstr ""

#: docs/10.x/artisan.md:block 47 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"use Illuminate\\Console\\Command;\n"
"\n"
"class SendEmails extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Send a marketing email to a user';\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     */\n"
"    public function handle(DripEmailer $drip): void\n"
"    {\n"
"        $drip->send(User::find($this->argument('user')));\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 48 (quote)
msgid "[!NOTE] For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails."
msgstr ""

#: docs/10.x/artisan.md:block 50 (header)
msgid "Closure Commands"
msgstr ""

#: docs/10.x/artisan.md:block 51 (paragraph)
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes. Within the `commands` method of your `app/Console/Kernel.php` file, Laravel loads the `routes/console.php` file:"
msgstr ""

#: docs/10.x/artisan.md:block 52 (code)
msgid ""
"/**\n"
" * Register the closure based commands for the application.\n"
" */\n"
"protected function commands(): void\n"
"{\n"
"    require base_path('routes/console.php');\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 53 (paragraph)
msgid "Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#: docs/10.x/artisan.md:block 54 (code)
msgid ""
"Artisan::command('mail:send {user}', function (string $user) {\n"
"    $this->info(\"Sending email to: {$user}!\");\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 55 (paragraph)
msgid "The closure is bound to the underlying command instance, so you have full access to all of the helper methods you would typically be able to access on a full command class."
msgstr ""

#: docs/10.x/artisan.md:block 57 (header)
msgid "Type-Hinting Dependencies"
msgstr ""

#: docs/10.x/artisan.md:block 58 (paragraph)
msgid "In addition to receiving your command's arguments and options, command closures may also type-hint additional dependencies that you would like resolved out of the [service container](/docs/{{version}}/container):"
msgstr ""

#: docs/10.x/artisan.md:block 59 (code)
msgid ""
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"\n"
"Artisan::command('mail:send {user}', function (DripEmailer $drip, string $user) {\n"
"    $drip->send(User::find($user));\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 61 (header)
msgid "Closure Command Descriptions"
msgstr ""

#: docs/10.x/artisan.md:block 62 (paragraph)
msgid "When defining a closure based command, you may use the `purpose` method to add a description to the command. This description will be displayed when you run the `php artisan list` or `php artisan help` commands:"
msgstr ""

#: docs/10.x/artisan.md:block 63 (code)
msgid ""
"Artisan::command('mail:send {user}', function (string $user) {\n"
"    // ...\n"
"})->purpose('Send a marketing email to a user');\n"
msgstr ""

#: docs/10.x/artisan.md:block 65 (header)
msgid "Isolatable Commands"
msgstr ""

#: docs/10.x/artisan.md:block 66 (quote)
msgid "[!WARNING] To utilize this feature, your application must be using the `memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server."
msgstr ""

#: docs/10.x/artisan.md:block 67 (paragraph)
msgid "Sometimes you may wish to ensure that only one instance of a command can run at a time. To accomplish this, you may implement the `Illuminate\\Contracts\\Console\\Isolatable` interface on your command class:"
msgstr ""

#: docs/10.x/artisan.md:block 68 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use Illuminate\\Console\\Command;\n"
"use Illuminate\\Contracts\\Console\\Isolatable;\n"
"\n"
"class SendEmails extends Command implements Isolatable\n"
"{\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 69 (paragraph)
msgid "When a command is marked as `Isolatable`, Laravel will automatically add an `--isolated` option to the command. When the command is invoked with that option, Laravel will ensure that no other instances of that command are already running. Laravel accomplishes this by attempting to acquire an atomic lock using your application's default cache driver. If other instances of the command are running, the command will not execute; however, the command will still exit with a successful exit status code:"
msgstr ""

#: docs/10.x/artisan.md:block 70 (code)
msgid "php artisan mail:send 1 --isolated\n"
msgstr ""

#: docs/10.x/artisan.md:block 71 (paragraph)
msgid "If you would like to specify the exit status code that the command should return if it is not able to execute, you may provide the desired status code via the `isolated` option:"
msgstr ""

#: docs/10.x/artisan.md:block 72 (code)
msgid "php artisan mail:send 1 --isolated=12\n"
msgstr ""

#: docs/10.x/artisan.md:block 74 (header)
msgid "Lock ID"
msgstr ""

#: docs/10.x/artisan.md:block 75 (paragraph)
msgid "By default, Laravel will use the command's name to generate the string key that is used to acquire the atomic lock in your application's cache. However, you may customize this key by defining an `isolatableId` method on your Artisan command class, allowing you to integrate the command's arguments or options into the key:"
msgstr ""

#: docs/10.x/artisan.md:block 76 (code)
msgid ""
"/**\n"
" * Get the isolatable ID for the command.\n"
" */\n"
"public function isolatableId(): string\n"
"{\n"
"    return $this->argument('user');\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 78 (header)
msgid "Lock Expiration Time"
msgstr ""

#: docs/10.x/artisan.md:block 79 (paragraph)
msgid "By default, isolation locks expire after the command is finished. Or, if the command is interrupted and unable to finish, the lock will expire after one hour. However, you may adjust the lock expiration time by defining a `isolationLockExpiresAt` method on your command:"
msgstr ""

#: docs/10.x/artisan.md:block 80 (code)
msgid ""
"use DateTimeInterface;\n"
"use DateInterval;\n"
"\n"
"/**\n"
" * Determine when an isolation lock expires for the command.\n"
" */\n"
"public function isolationLockExpiresAt(): DateTimeInterface|DateInterval\n"
"{\n"
"    return now()->addMinutes(5);\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 82 (header)
msgid "Defining Input Expectations"
msgstr ""

#: docs/10.x/artisan.md:block 83 (paragraph)
msgid "When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the `signature` property on your commands. The `signature` property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax."
msgstr ""

#: docs/10.x/artisan.md:block 85 (header)
msgid "Arguments"
msgstr ""

#: docs/10.x/artisan.md:block 86 (paragraph)
msgid "All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one required argument: `user`:"
msgstr ""

#: docs/10.x/artisan.md:block 87 (code)
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send {user}';\n"
msgstr ""

#: docs/10.x/artisan.md:block 88 (paragraph)
msgid "You may also make arguments optional or define default values for arguments:"
msgstr ""

#: docs/10.x/artisan.md:block 89 (code)
msgid ""
"// Optional argument...\n"
"'mail:send {user?}'\n"
"\n"
"// Optional argument with default value...\n"
"'mail:send {user=foo}'\n"
msgstr ""

#: docs/10.x/artisan.md:block 91 (header)
msgid "Options"
msgstr ""

#: docs/10.x/artisan.md:block 92 (paragraph)
msgid "Options, like arguments, are another form of user input. Options are prefixed by two hyphens (`--`) when they are provided via the command line. There are two types of options: those that receive a value and those that don't. Options that don't receive a value serve as a boolean \"switch\". Let's take a look at an example of this type of option:"
msgstr ""

#: docs/10.x/artisan.md:block 93 (code)
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send {user} {--queue}';\n"
msgstr ""

#: docs/10.x/artisan.md:block 94 (paragraph)
msgid "In this example, the `--queue` switch may be specified when calling the Artisan command. If the `--queue` switch is passed, the value of the option will be `true`. Otherwise, the value will be `false`:"
msgstr ""

#: docs/10.x/artisan.md:block 95 (code)
msgid "php artisan mail:send 1 --queue\n"
msgstr ""

#: docs/10.x/artisan.md:block 97 (header)
msgid "Options With Values"
msgstr ""

#: docs/10.x/artisan.md:block 98 (paragraph)
msgid "Next, let's take a look at an option that expects a value. If the user must specify a value for an option, you should suffix the option name with a `=` sign:"
msgstr ""

#: docs/10.x/artisan.md:block 99 (code)
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send {user} {--queue=}';\n"
msgstr ""

#: docs/10.x/artisan.md:block 100 (paragraph)
msgid "In this example, the user may pass a value for the option like so. If the option is not specified when invoking the command, its value will be `null`:"
msgstr ""

#: docs/10.x/artisan.md:block 101 (code)
msgid "php artisan mail:send 1 --queue=default\n"
msgstr ""

#: docs/10.x/artisan.md:block 102 (paragraph)
msgid "You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:"
msgstr ""

#: docs/10.x/artisan.md:block 103 (code)
msgid "'mail:send {user} {--queue=default}'\n"
msgstr ""

#: docs/10.x/artisan.md:block 105 (header)
msgid "Option Shortcuts"
msgstr ""

#: docs/10.x/artisan.md:block 106 (paragraph)
msgid "To assign a shortcut when defining an option, you may specify it before the option name and use the `|` character as a delimiter to separate the shortcut from the full option name:"
msgstr ""

#: docs/10.x/artisan.md:block 107 (code)
msgid "'mail:send {user} {--Q|queue}'\n"
msgstr ""

#: docs/10.x/artisan.md:block 108 (paragraph)
msgid "When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen and no `=` character should be included when specifying a value for the option:"
msgstr ""

#: docs/10.x/artisan.md:block 109 (code)
msgid "php artisan mail:send 1 -Qdefault\n"
msgstr ""

#: docs/10.x/artisan.md:block 111 (header)
msgid "Input Arrays"
msgstr ""

#: docs/10.x/artisan.md:block 112 (paragraph)
msgid "If you would like to define arguments or options to expect multiple input values, you may use the `*` character. First, let's take a look at an example that specifies such an argument:"
msgstr ""

#: docs/10.x/artisan.md:block 113 (code)
msgid "'mail:send {user*}'\n"
msgstr ""

#: docs/10.x/artisan.md:block 114 (paragraph)
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `1` and `2` as its values:"
msgstr ""

#: docs/10.x/artisan.md:block 115 (code)
msgid "php artisan mail:send 1 2\n"
msgstr ""

#: docs/10.x/artisan.md:block 116 (paragraph)
msgid "This `*` character can be combined with an optional argument definition to allow zero or more instances of an argument:"
msgstr ""

#: docs/10.x/artisan.md:block 117 (code)
msgid "'mail:send {user?*}'\n"
msgstr ""

#: docs/10.x/artisan.md:block 119 (header)
msgid "Option Arrays"
msgstr ""

#: docs/10.x/artisan.md:block 120 (paragraph)
msgid "When defining an option that expects multiple input values, each option value passed to the command should be prefixed with the option name:"
msgstr ""

#: docs/10.x/artisan.md:block 121 (code)
msgid "'mail:send {--id=*}'\n"
msgstr ""

#: docs/10.x/artisan.md:block 122 (paragraph)
msgid "Such a command may be invoked by passing multiple `--id` arguments:"
msgstr ""

#: docs/10.x/artisan.md:block 123 (code)
msgid "php artisan mail:send --id=1 --id=2\n"
msgstr ""

#: docs/10.x/artisan.md:block 125 (header)
msgid "Input Descriptions"
msgstr ""

#: docs/10.x/artisan.md:block 126 (paragraph)
msgid "You may assign descriptions to input arguments and options by separating the argument name from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:"
msgstr ""

#: docs/10.x/artisan.md:block 127 (code)
msgid ""
"/**\n"
" * The name and signature of the console command.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $signature = 'mail:send\n"
"                        {user : The ID of the user}\n"
"                        {--queue : Whether the job should be queued}';\n"
msgstr ""

#: docs/10.x/artisan.md:block 129 (header)
msgid "Prompting for Missing Input"
msgstr ""

#: docs/10.x/artisan.md:block 130 (paragraph)
msgid "If your command contains required arguments, the user will receive an error message when they are not provided. Alternatively, you may configure your command to automatically prompt the user when required arguments are missing by implementing the `PromptsForMissingInput` interface:"
msgstr ""

#: docs/10.x/artisan.md:block 131 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use Illuminate\\Console\\Command;\n"
"use Illuminate\\Contracts\\Console\\PromptsForMissingInput;\n"
"\n"
"class SendEmails extends Command implements PromptsForMissingInput\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 132 (paragraph)
msgid "If Laravel needs to gather a required argument from the user, it will automatically ask the user for the argument by intelligently phrasing the question using either the argument name or description. If you wish to customize the question used to gather the required argument, you may implement the `promptForMissingArgumentsUsing` method, returning an array of questions keyed by the argument names:"
msgstr ""

#: docs/10.x/artisan.md:block 133 (code)
msgid ""
"/**\n"
" * Prompt for missing input arguments using the returned questions.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function promptForMissingArgumentsUsing()\n"
"{\n"
"    return [\n"
"        'user' => 'Which user ID should receive the mail?',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 134 (paragraph)
msgid "You may also provide placeholder text by using a tuple containing the question and placeholder:"
msgstr ""

#: docs/10.x/artisan.md:block 135 (code)
msgid ""
"return [\n"
"    'user' => ['Which user ID should receive the mail?', 'E.g. 123'],\n"
"];\n"
msgstr ""

#: docs/10.x/artisan.md:block 136 (paragraph)
msgid "If you would like complete control over the prompt, you may provide a closure that should prompt the user and return their answer:"
msgstr ""

#: docs/10.x/artisan.md:block 137 (code)
msgid ""
"use App\\Models\\User;\n"
"use function Laravel\\Prompts\\search;\n"
"\n"
"// ...\n"
"\n"
"return [\n"
"    'user' => fn () => search(\n"
"        label: 'Search for a user:',\n"
"        placeholder: 'E.g. Taylor Otwell',\n"
"        options: fn ($value) => strlen($value) > 0\n"
"            ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"            : []\n"
"    ),\n"
"];\n"
msgstr ""

#: docs/10.x/artisan.md:block 138 (quote)
msgid "[!NOTE] The comprehensive [Laravel Prompts](/docs/{{version}}/prompts) documentation includes additional information on the available prompts and their usage."
msgstr ""

#: docs/10.x/artisan.md:block 139 (paragraph)
msgid "If you wish to prompt the user to select or enter [options](#options), you may include prompts in your command's `handle` method. However, if you only wish to prompt the user when they have also been automatically prompted for missing arguments, then you may implement the `afterPromptingForMissingArguments` method:"
msgstr ""

#: docs/10.x/artisan.md:block 140 (code)
msgid ""
"use Symfony\\Component\\Console\\Input\\InputInterface;\n"
"use Symfony\\Component\\Console\\Output\\OutputInterface;\n"
"use function Laravel\\Prompts\\confirm;\n"
"\n"
"// ...\n"
"\n"
"/**\n"
" * Perform actions after the user was prompted for missing arguments.\n"
" *\n"
" * @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input\n"
" * @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output\n"
" * @return void\n"
" */\n"
"protected function afterPromptingForMissingArguments(InputInterface $input, OutputInterface $output)\n"
"{\n"
"    $input->setOption('queue', confirm(\n"
"        label: 'Would you like to queue the mail?',\n"
"        default: $this->option('queue')\n"
"    ));\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 142 (header)
msgid "Command I/O"
msgstr ""

#: docs/10.x/artisan.md:block 144 (header)
msgid "Retrieving Input"
msgstr ""

#: docs/10.x/artisan.md:block 145 (paragraph)
msgid "While your command is executing, you will likely need to access the values for the arguments and options accepted by your command. To do so, you may use the `argument` and `option` methods. If an argument or option does not exist, `null` will be returned:"
msgstr ""

#: docs/10.x/artisan.md:block 146 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $userId = $this->argument('user');\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 147 (paragraph)
msgid "If you need to retrieve all of the arguments as an `array`, call the `arguments` method:"
msgstr ""

#: docs/10.x/artisan.md:block 148 (code)
msgid "$arguments = $this->arguments();\n"
msgstr ""

#: docs/10.x/artisan.md:block 149 (paragraph)
msgid "Options may be retrieved just as easily as arguments using the `option` method. To retrieve all of the options as an array, call the `options` method:"
msgstr ""

#: docs/10.x/artisan.md:block 150 (code)
msgid ""
"// Retrieve a specific option...\n"
"$queueName = $this->option('queue');\n"
"\n"
"// Retrieve all options as an array...\n"
"$options = $this->options();\n"
msgstr ""

#: docs/10.x/artisan.md:block 152 (header)
msgid "Prompting for Input"
msgstr ""

#: docs/10.x/artisan.md:block 153 (quote)
msgid "[!NOTE] [Laravel Prompts](/docs/{{version}}/prompts) is a PHP package for adding beautiful and user-friendly forms to your command-line applications, with browser-like features including placeholder text and validation."
msgstr ""

#: docs/10.x/artisan.md:block 154 (paragraph)
msgid "In addition to displaying output, you may also ask the user to provide input during the execution of your command. The `ask` method will prompt the user with the given question, accept their input, and then return the user's input back to your command:"
msgstr ""

#: docs/10.x/artisan.md:block 155 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $name = $this->ask('What is your name?');\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 156 (paragraph)
msgid "The `ask` method also accepts an optional second argument which specifies the default value that should be returned if no user input is provided:"
msgstr ""

#: docs/10.x/artisan.md:block 157 (code)
msgid "$name = $this->ask('What is your name?', 'Taylor');\n"
msgstr ""

#: docs/10.x/artisan.md:block 158 (paragraph)
msgid "The `secret` method is similar to `ask`, but the user's input will not be visible to them as they type in the console. This method is useful when asking for sensitive information such as passwords:"
msgstr ""

#: docs/10.x/artisan.md:block 159 (code)
msgid "$password = $this->secret('What is the password?');\n"
msgstr ""

#: docs/10.x/artisan.md:block 161 (header)
msgid "Asking for Confirmation"
msgstr ""

#: docs/10.x/artisan.md:block 162 (paragraph)
msgid "If you need to ask the user for a simple \"yes or no\" confirmation, you may use the `confirm` method. By default, this method will return `false`. However, if the user enters `y` or `yes` in response to the prompt, the method will return `true`."
msgstr ""

#: docs/10.x/artisan.md:block 163 (code)
msgid ""
"if ($this->confirm('Do you wish to continue?')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 164 (paragraph)
msgid "If necessary, you may specify that the confirmation prompt should return `true` by default by passing `true` as the second argument to the `confirm` method:"
msgstr ""

#: docs/10.x/artisan.md:block 165 (code)
msgid ""
"if ($this->confirm('Do you wish to continue?', true)) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 167 (header)
msgid "Auto-Completion"
msgstr ""

#: docs/10.x/artisan.md:block 168 (paragraph)
msgid "The `anticipate` method can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr ""

#: docs/10.x/artisan.md:block 169 (code)
msgid "$name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr ""

#: docs/10.x/artisan.md:block 170 (paragraph)
msgid "Alternatively, you may pass a closure as the second argument to the `anticipate` method. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far, and return an array of options for auto-completion:"
msgstr ""

#: docs/10.x/artisan.md:block 171 (code)
msgid ""
"$name = $this->anticipate('What is your address?', function (string $input) {\n"
"    // Return auto-completion options...\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 173 (header)
msgid "Multiple Choice Questions"
msgstr ""

#: docs/10.x/artisan.md:block 174 (paragraph)
msgid "If you need to give the user a predefined set of choices when asking a question, you may use the `choice` method. You may set the array index of the default value to be returned if no option is chosen by passing the index as the third argument to the method:"
msgstr ""

#: docs/10.x/artisan.md:block 175 (code)
msgid ""
"$name = $this->choice(\n"
"    'What is your name?',\n"
"    ['Taylor', 'Dayle'],\n"
"    $defaultIndex\n"
");\n"
msgstr ""

#: docs/10.x/artisan.md:block 176 (paragraph)
msgid "In addition, the `choice` method accepts optional fourth and fifth arguments for determining the maximum number of attempts to select a valid response and whether multiple selections are permitted:"
msgstr ""

#: docs/10.x/artisan.md:block 177 (code)
msgid ""
"$name = $this->choice(\n"
"    'What is your name?',\n"
"    ['Taylor', 'Dayle'],\n"
"    $defaultIndex,\n"
"    $maxAttempts = null,\n"
"    $allowMultipleSelections = false\n"
");\n"
msgstr ""

#: docs/10.x/artisan.md:block 179 (header)
msgid "Writing Output"
msgstr ""

#: docs/10.x/artisan.md:block 180 (paragraph)
msgid "To send output to the console, you may use the `line`, `info`, `comment`, `question`, `warn`, and `error` methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let's display some general information to the user. Typically, the `info` method will display in the console as green colored text:"
msgstr ""

#: docs/10.x/artisan.md:block 181 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    // ...\n"
"\n"
"    $this->info('The command was successful!');\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 182 (paragraph)
msgid "To display an error message, use the `error` method. Error message text is typically displayed in red:"
msgstr ""

#: docs/10.x/artisan.md:block 183 (code)
msgid "$this->error('Something went wrong!');\n"
msgstr ""

#: docs/10.x/artisan.md:block 184 (paragraph)
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr ""

#: docs/10.x/artisan.md:block 185 (code)
msgid "$this->line('Display this on the screen');\n"
msgstr ""

#: docs/10.x/artisan.md:block 186 (paragraph)
msgid "You may use the `newLine` method to display a blank line:"
msgstr ""

#: docs/10.x/artisan.md:block 187 (code)
msgid ""
"// Write a single blank line...\n"
"$this->newLine();\n"
"\n"
"// Write three blank lines...\n"
"$this->newLine(3);\n"
msgstr ""

#: docs/10.x/artisan.md:block 189 (header)
msgid "Tables"
msgstr ""

#: docs/10.x/artisan.md:block 190 (paragraph)
msgid "The `table` method makes it easy to correctly format multiple rows / columns of data. All you need to do is provide the column names and the data for the table and Laravel will automatically calculate the appropriate width and height of the table for you:"
msgstr ""

#: docs/10.x/artisan.md:block 191 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$this->table(\n"
"    ['Name', 'Email'],\n"
"    User::all(['name', 'email'])->toArray()\n"
");\n"
msgstr ""

#: docs/10.x/artisan.md:block 193 (header)
msgid "Progress Bars"
msgstr ""

#: docs/10.x/artisan.md:block 194 (paragraph)
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `withProgressBar` method, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr ""

#: docs/10.x/artisan.md:block 195 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $this->withProgressBar(User::all(), function (User $user) {\n"
"    $this->performTask($user);\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 196 (paragraph)
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar after processing each item:"
msgstr ""

#: docs/10.x/artisan.md:block 197 (code)
msgid ""
"$users = App\\Models\\User::all();\n"
"\n"
"$bar = $this->output->createProgressBar(count($users));\n"
"\n"
"$bar->start();\n"
"\n"
"foreach ($users as $user) {\n"
"    $this->performTask($user);\n"
"\n"
"    $bar->advance();\n"
"}\n"
"\n"
"$bar->finish();\n"
msgstr ""

#: docs/10.x/artisan.md:block 198 (quote)
msgid "[!NOTE] For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html)."
msgstr ""

#: docs/10.x/artisan.md:block 200 (header)
msgid "Registering Commands"
msgstr ""

#: docs/10.x/artisan.md:block 201 (paragraph)
msgid "All of your console commands are registered within your application's `App\\Console\\Kernel` class, which is your application's \"console kernel\". Within the `commands` method of this class, you will see a call to the kernel's `load` method. The `load` method will scan the `app/Console/Commands` directory and automatically register each command it contains with Artisan. You are even free to make additional calls to the `load` method to scan other directories for Artisan commands:"
msgstr ""

#: docs/10.x/artisan.md:block 202 (code)
msgid ""
"/**\n"
" * Register the commands for the application.\n"
" */\n"
"protected function commands(): void\n"
"{\n"
"    $this->load(__DIR__.'/Commands');\n"
"    $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 203 (paragraph)
msgid "If necessary, you may manually register commands by adding the command's class name to a `$commands` property within your `App\\Console\\Kernel` class. If this property is not already defined on your kernel, you should define it manually. When Artisan boots, all the commands listed in this property will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan:"
msgstr ""

#: docs/10.x/artisan.md:block 204 (code)
msgid ""
"protected $commands = [\n"
"    Commands\\SendEmails::class\n"
"];\n"
msgstr ""

#: docs/10.x/artisan.md:block 206 (header)
msgid "Programmatically Executing Commands"
msgstr ""

#: docs/10.x/artisan.md:block 207 (paragraph)
msgid "Sometimes you may wish to execute an Artisan command outside of the CLI. For example, you may wish to execute an Artisan command from a route or controller. You may use the `call` method on the `Artisan` facade to accomplish this. The `call` method accepts either the command's signature name or class name as its first argument, and an array of command parameters as the second argument. The exit code will be returned:"
msgstr ""

#: docs/10.x/artisan.md:block 208 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function (string $user) {\n"
"    $exitCode = Artisan::call('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 209 (paragraph)
msgid "Alternatively, you may pass the entire Artisan command to the `call` method as a string:"
msgstr ""

#: docs/10.x/artisan.md:block 210 (code)
msgid "Artisan::call('mail:send 1 --queue=default');\n"
msgstr ""

#: docs/10.x/artisan.md:block 212 (header)
msgid "Passing Array Values"
msgstr ""

#: docs/10.x/artisan.md:block 213 (paragraph)
msgid "If your command defines an option that accepts an array, you may pass an array of values to that option:"
msgstr ""

#: docs/10.x/artisan.md:block 214 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/mail', function () {\n"
"    $exitCode = Artisan::call('mail:send', [\n"
"        '--id' => [5, 13]\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 216 (header)
msgid "Passing Boolean Values"
msgstr ""

#: docs/10.x/artisan.md:block 217 (paragraph)
msgid "If you need to specify the value of an option that does not accept string values, such as the `--force` flag on the `migrate:refresh` command, you should pass `true` or `false` as the value of the option:"
msgstr ""

#: docs/10.x/artisan.md:block 218 (code)
msgid ""
"$exitCode = Artisan::call('migrate:refresh', [\n"
"    '--force' => true,\n"
"]);\n"
msgstr ""

#: docs/10.x/artisan.md:block 220 (header)
msgid "Queueing Artisan Commands"
msgstr ""

#: docs/10.x/artisan.md:block 221 (paragraph)
msgid "Using the `queue` method on the `Artisan` facade, you may even queue Artisan commands so they are processed in the background by your [queue workers](/docs/{{version}}/queues). Before using this method, make sure you have configured your queue and are running a queue listener:"
msgstr ""

#: docs/10.x/artisan.md:block 222 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function (string $user) {\n"
"    Artisan::queue('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 223 (paragraph)
msgid "Using the `onConnection` and `onQueue` methods, you may specify the connection or queue the Artisan command should be dispatched to:"
msgstr ""

#: docs/10.x/artisan.md:block 224 (code)
msgid ""
"Artisan::queue('mail:send', [\n"
"    'user' => 1, '--queue' => 'default'\n"
"])->onConnection('redis')->onQueue('commands');\n"
msgstr ""

#: docs/10.x/artisan.md:block 226 (header)
msgid "Calling Commands From Other Commands"
msgstr ""

#: docs/10.x/artisan.md:block 227 (paragraph)
msgid "Sometimes you may wish to call other commands from an existing Artisan command. You may do so using the `call` method. This `call` method accepts the command name and an array of command arguments / options:"
msgstr ""

#: docs/10.x/artisan.md:block 228 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $this->call('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 229 (paragraph)
msgid "If you would like to call another console command and suppress all of its output, you may use the `callSilently` method. The `callSilently` method has the same signature as the `call` method:"
msgstr ""

#: docs/10.x/artisan.md:block 230 (code)
msgid ""
"$this->callSilently('mail:send', [\n"
"    'user' => 1, '--queue' => 'default'\n"
"]);\n"
msgstr ""

#: docs/10.x/artisan.md:block 232 (header)
msgid "Signal Handling"
msgstr ""

#: docs/10.x/artisan.md:block 233 (paragraph)
msgid "As you may know, operating systems allow signals to be sent to running processes. For example, the `SIGTERM` signal is how operating systems ask a program to terminate. If you wish to listen for signals in your Artisan console commands and execute code when they occur, you may use the `trap` method:"
msgstr ""

#: docs/10.x/artisan.md:block 234 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" */\n"
"public function handle(): void\n"
"{\n"
"    $this->trap(SIGTERM, fn () => $this->shouldKeepRunning = false);\n"
"\n"
"    while ($this->shouldKeepRunning) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/artisan.md:block 235 (paragraph)
msgid "To listen for multiple signals at once, you may provide an array of signals to the `trap` method:"
msgstr ""

#: docs/10.x/artisan.md:block 236 (code)
msgid ""
"$this->trap([SIGTERM, SIGQUIT], function (int $signal) {\n"
"    $this->shouldKeepRunning = false;\n"
"\n"
"    dump($signal); // SIGTERM / SIGQUIT\n"
"});\n"
msgstr ""

#: docs/10.x/artisan.md:block 238 (header)
msgid "Stub Customization"
msgstr ""

#: docs/10.x/artisan.md:block 239 (paragraph)
msgid "The Artisan console's `make` commands are used to create a variety of classes, such as controllers, jobs, migrations, and tests. These classes are generated using \"stub\" files that are populated with values based on your input. However, you may want to make small changes to files generated by Artisan. To accomplish this, you may use the `stub:publish` command to publish the most common stubs to your application so that you can customize them:"
msgstr ""

#: docs/10.x/artisan.md:block 240 (code)
msgid "php artisan stub:publish\n"
msgstr ""

#: docs/10.x/artisan.md:block 241 (paragraph)
msgid "The published stubs will be located within a `stubs` directory in the root of your application. Any changes you make to these stubs will be reflected when you generate their corresponding classes using Artisan's `make` commands."
msgstr ""

#: docs/10.x/artisan.md:block 243 (header)
msgid "Events"
msgstr ""

#: docs/10.x/artisan.md:block 244 (paragraph)
msgid "Artisan dispatches three events when running commands: `Illuminate\\Console\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting`, and `Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` event is dispatched immediately when Artisan starts running. Next, the `CommandStarting` event is dispatched immediately before a command runs. Finally, the `CommandFinished` event is dispatched once a command finishes executing."
msgstr ""

#: docs/11.x/artisan.md:block 50 (header)
msgid "Exit Codes"
msgstr ""

#: docs/11.x/artisan.md:block 51 (paragraph)
msgid "If nothing is returned from the `handle` method and the command executes successfully, the command will exit with a `0` exit code, indicating success. However, the `handle` method may optionally return an integer to manually specify command's exit code:"
msgstr ""

#: docs/11.x/artisan.md:block 52 (code)
msgid ""
"$this->error('Something went wrong.');\n"
"\n"
"return 1;\n"
msgstr ""

#: docs/11.x/artisan.md:block 53 (paragraph)
msgid "If you would like to \"fail\" the command from any method within the command, you may utilize the `fail` method. The `fail` method will immediately terminate execution of the command and return an exit code of `1`:"
msgstr ""

#: docs/11.x/artisan.md:block 54 (code)
msgid "$this->fail('Something went wrong.');\n"
msgstr ""

#: docs/11.x/artisan.md:block 57 (paragraph)
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes."
msgstr ""

#: docs/11.x/artisan.md:block 58 (paragraph)
msgid "Even though the `routes/console.php` file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#: docs/11.x/artisan.md:block 138 (code)
msgid ""
"/**\n"
" * Prompt for missing input arguments using the returned questions.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"protected function promptForMissingArgumentsUsing(): array\n"
"{\n"
"    return [\n"
"        'user' => 'Which user ID should receive the mail?',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/11.x/artisan.md:block 145 (code)
msgid ""
"use Symfony\\Component\\Console\\Input\\InputInterface;\n"
"use Symfony\\Component\\Console\\Output\\OutputInterface;\n"
"use function Laravel\\Prompts\\confirm;\n"
"\n"
"// ...\n"
"\n"
"/**\n"
" * Perform actions after the user was prompted for missing arguments.\n"
" */\n"
"protected function afterPromptingForMissingArguments(InputInterface $input, OutputInterface $output): void\n"
"{\n"
"    $input->setOption('queue', confirm(\n"
"        label: 'Would you like to queue the mail?',\n"
"        default: $this->option('queue')\n"
"    ));\n"
"}\n"
msgstr ""

#: docs/11.x/artisan.md:block 203 (quote)
msgid "[!NOTE] For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/7.0/components/console/helpers/progressbar.html)."
msgstr ""

#: docs/11.x/artisan.md:block 206 (paragraph)
msgid "By default, Laravel automatically registers all commands within the `app/Console/Commands` directory. However, you can instruct Laravel to scan other directories for Artisan commands using the `withCommands` method in your application's `bootstrap/app.php` file:"
msgstr ""

#: docs/11.x/artisan.md:block 207 (code)
msgid ""
"->withCommands([\n"
"    __DIR__.'/../app/Domain/Orders/Commands',\n"
"])\n"
msgstr ""

#: docs/11.x/artisan.md:block 208 (paragraph)
msgid "If necessary, you may also manually register commands by providing the command's class name to the `withCommands` method:"
msgstr ""

#: docs/11.x/artisan.md:block 209 (code)
msgid ""
"use App\\Domain\\Orders\\Commands\\SendEmails;\n"
"\n"
"->withCommands([\n"
"    SendEmails::class,\n"
"])\n"
msgstr ""

#: docs/11.x/artisan.md:block 210 (paragraph)
msgid "When Artisan boots, all the commands in your application will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan."
msgstr ""

#: docs/8.x/artisan.md:block 2 (unordered list)
msgid "[Prompting For Input](#prompting-for-input)"
msgstr ""

#: docs/8.x/artisan.md:block 12 (code)
msgid "./sail artisan list\n"
msgstr ""

#: docs/8.x/artisan.md:block 20 (quote)
msgid "{tip} Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!"
msgstr ""

#: docs/8.x/artisan.md:block 27 (quote)
msgid "{note} The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs."
msgstr ""

#: docs/8.x/artisan.md:block 47 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"use Illuminate\\Console\\Command;\n"
"\n"
"class SendEmails extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Send a marketing email to a user';\n"
"\n"
"    /**\n"
"     * Create a new command instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        parent::__construct();\n"
"    }\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @param  \\App\\Support\\DripEmailer  $drip\n"
"     * @return mixed\n"
"     */\n"
"    public function handle(DripEmailer $drip)\n"
"    {\n"
"        $drip->send(User::find($this->argument('user')));\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 48 (quote)
msgid "{tip} For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails."
msgstr ""

#: docs/8.x/artisan.md:block 52 (code)
msgid ""
"/**\n"
" * Register the closure based commands for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function commands()\n"
"{\n"
"    require base_path('routes/console.php');\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 54 (code)
msgid ""
"Artisan::command('mail:send {user}', function ($user) {\n"
"    $this->info(\"Sending email to: {$user}!\");\n"
"});\n"
msgstr ""

#: docs/8.x/artisan.md:block 59 (code)
msgid ""
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"\n"
"Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"    $drip->send(User::find($user));\n"
"});\n"
msgstr ""

#: docs/8.x/artisan.md:block 63 (code)
msgid ""
"Artisan::command('mail:send {user}', function ($user) {\n"
"    // ...\n"
"})->purpose('Send a marketing email to a user');\n"
msgstr ""

#: docs/8.x/artisan.md:block 72 (code)
msgid ""
"// Optional argument...\n"
"mail:send {user?}\n"
"\n"
"// Optional argument with default value...\n"
"mail:send {user=foo}\n"
msgstr ""

#: docs/8.x/artisan.md:block 86 (code)
msgid "mail:send {user} {--queue=default}\n"
msgstr ""

#: docs/8.x/artisan.md:block 90 (code)
msgid "mail:send {user} {--Q|queue}\n"
msgstr ""

#: docs/8.x/artisan.md:block 91 (paragraph)
msgid "When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen:"
msgstr ""

#: docs/8.x/artisan.md:block 92 (code)
msgid "php artisan mail:send 1 -Q\n"
msgstr ""

#: docs/8.x/artisan.md:block 96 (code)
msgid "mail:send {user*}\n"
msgstr ""

#: docs/8.x/artisan.md:block 97 (paragraph)
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `foo` and `bar` as its values:"
msgstr ""

#: docs/8.x/artisan.md:block 98 (code)
msgid "php artisan mail:send foo bar\n"
msgstr ""

#: docs/8.x/artisan.md:block 100 (code)
msgid "mail:send {user?*}\n"
msgstr ""

#: docs/8.x/artisan.md:block 104 (code)
msgid ""
"mail:send {user} {--id=*}\n"
"\n"
"php artisan mail:send --id=1 --id=2\n"
msgstr ""

#: docs/8.x/artisan.md:block 114 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return int\n"
" */\n"
"public function handle()\n"
"{\n"
"    $userId = $this->argument('user');\n"
"\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 120 (header)
msgid "Prompting For Input"
msgstr ""

#: docs/8.x/artisan.md:block 122 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    $name = $this->ask('What is your name?');\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 126 (header)
msgid "Asking For Confirmation"
msgstr ""

#: docs/8.x/artisan.md:block 128 (code)
msgid ""
"if ($this->confirm('Do you wish to continue?')) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 130 (code)
msgid ""
"if ($this->confirm('Do you wish to continue?', true)) {\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 136 (code)
msgid ""
"$name = $this->anticipate('What is your address?', function ($input) {\n"
"    // Return auto-completion options...\n"
"});\n"
msgstr ""

#: docs/8.x/artisan.md:block 146 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    // ...\n"
"\n"
"    $this->info('The command was successful!');\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 160 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $this->withProgressBar(User::all(), function ($user) {\n"
"    $this->performTask($user);\n"
"});\n"
msgstr ""

#: docs/8.x/artisan.md:block 163 (quote)
msgid "{tip} For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html)."
msgstr ""

#: docs/8.x/artisan.md:block 167 (code)
msgid ""
"/**\n"
" * Register the commands for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function commands()\n"
"{\n"
"    $this->load(__DIR__.'/Commands');\n"
"    $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 173 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function ($user) {\n"
"    $exitCode = Artisan::call('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/artisan.md:block 187 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Artisan;\n"
"\n"
"Route::post('/user/{user}/mail', function ($user) {\n"
"    Artisan::queue('mail:send', [\n"
"        'user' => $user, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/artisan.md:block 193 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    $this->call('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
"\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 198 (paragraph)
msgid "The Symfony Console component, which powers the Artisan console, allows you to indicate which process signals (if any) your command handles. For example, you may indicate that your command handles the `SIGINT` and `SIGTERM` signals."
msgstr ""

#: docs/8.x/artisan.md:block 199 (paragraph)
msgid "To get started, you should implement the `Symfony\\Component\\Console\\Command\\SignalableCommandInterface` interface on your Artisan command class. This interface requires you to define two methods: `getSubscribedSignals` and `handleSignal`:"
msgstr ""

#: docs/8.x/artisan.md:block 200 (code)
msgid ""
"<?php\n"
"\n"
"use Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\n"
"\n"
"class StartServer extends Command implements SignalableCommandInterface\n"
"{\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Get the list of signals handled by the command.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function getSubscribedSignals(): array\n"
"    {\n"
"        return [SIGINT, SIGTERM];\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle an incoming signal.\n"
"     *\n"
"     * @param  int  $signal\n"
"     * @return void\n"
"     */\n"
"    public function handleSignal(int $signal): void\n"
"    {\n"
"        if ($signal === SIGINT) {\n"
"            $this->stopServer();\n"
"\n"
"            return;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/artisan.md:block 201 (paragraph)
msgid "As you might expect, the `getSubscribedSignals` method should return an array of the signals that your command can handle, while the `handleSignal` method receives the signal and can respond accordingly."
msgstr ""

#: docs/9.x/artisan.md:block 20 (quote)
msgid "**Note** Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!"
msgstr ""

#: docs/9.x/artisan.md:block 27 (quote)
msgid "**Warning** The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs."
msgstr ""

#: docs/9.x/artisan.md:block 47 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use App\\Models\\User;\n"
"use App\\Support\\DripEmailer;\n"
"use Illuminate\\Console\\Command;\n"
"\n"
"class SendEmails extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Send a marketing email to a user';\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @param  \\App\\Support\\DripEmailer  $drip\n"
"     * @return mixed\n"
"     */\n"
"    public function handle(DripEmailer $drip)\n"
"    {\n"
"        $drip->send(User::find($this->argument('user')));\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/artisan.md:block 48 (quote)
msgid "**Note** For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails."
msgstr ""

#: docs/9.x/artisan.md:block 66 (quote)
msgid "**Warning** To utilize this feature, your application must be using the `memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server."
msgstr ""

#: docs/9.x/artisan.md:block 76 (code)
msgid ""
"/**\n"
" * Determine when an isolation lock expires for the command.\n"
" *\n"
" * @return \\DateTimeInterface|\\DateInterval\n"
" */\n"
"public function isolationLockExpiresAt()\n"
"{\n"
"    return now()->addMinutes(5);\n"
"}\n"
msgstr ""

#: docs/9.x/artisan.md:block 178 (quote)
msgid "**Note** For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html)."
msgstr ""

#: docs/9.x/artisan.md:block 214 (code)
msgid ""
"/**\n"
" * Execute the console command.\n"
" *\n"
" * @return mixed\n"
" */\n"
"public function handle()\n"
"{\n"
"    $this->trap(SIGTERM, fn () => $this->shouldKeepRunning = false);\n"
"\n"
"    while ($this->shouldKeepRunning) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/artisan.md:block 216 (code)
msgid ""
"$this->trap([SIGTERM, SIGQUIT], function ($signal) {\n"
"    $this->shouldKeepRunning = false;\n"
"\n"
"    dump($signal); // SIGTERM / SIGQUIT\n"
"});\n"
msgstr ""

#: docs/master/artisan.md:block 52 (paragraph)
msgid "Even though the `routes/console.php` file file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#: docs/master/artisan.md:block 201 (code)
msgid ""
"->withCommands([\n"
"    __DIR__.'../app/Domain/Orders/Commands',\n"
"])\n"
msgstr ""
