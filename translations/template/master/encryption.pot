# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-16 04:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/encryption.md:1
#, no-wrap
msgid "Encryption"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:6
msgid ""
"- [Introduction](#introduction)  - [Configuration](#configuration)  - [Using "
"The Encrypter](#using-the-encrypter)"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:8
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/encryption.md:8
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:11
msgid ""
"Laravel's encryption services provide a simple, convenient interface for "
"encrypting and decrypting text via OpenSSL using AES-256 and AES-128 "
"encryption. All of Laravel's encrypted values are signed using a message "
"authentication code (MAC) so that their underlying value can not be modified "
"or tampered with once encrypted."
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:13
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/encryption.md:13
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:16
msgid ""
"Before using Laravel's encrypter, you must set the `key` configuration "
"option in your `config/app.php` configuration file. This configuration value "
"is driven by the `APP_KEY` environment variable. You should use the `php "
"artisan key:generate` command to generate this variable's value since the "
"`key:generate` command will use PHP's secure random bytes generator to build "
"a cryptographically secure key for your application. Typically, the value of "
"the `APP_KEY` environment variable will be generated for you during "
"[Laravel's installation](/docs/{{version}}/installation)."
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:18
#, no-wrap
msgid "<a name=\"using-the-encrypter\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/encryption.md:18
#, no-wrap
msgid "Using The Encrypter"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:21
#, no-wrap
msgid "<a name=\"encrypting-a-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/encryption.md:21
#, no-wrap
msgid "Encrypting A Value"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:24
msgid ""
"You may encrypt a value using the `encryptString` method provided by the "
"`Crypt` facade. All encrypted values are encrypted using OpenSSL and the "
"AES-256-CBC cipher. Furthermore, all encrypted values are signed with a "
"message authentication code (MAC). The integrated message authentication "
"code will prevent the decryption of any values that have been tampered with "
"by malicious users:"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:26
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:28
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:33
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Crypt;\n"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:49
#, no-wrap
msgid ""
"    class DigitalOceanTokenController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a DigitalOcean API token for the user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function storeSecret(Request $request)\n"
"        {\n"
"            $request->user()->fill([\n"
"                'token' => Crypt::encryptString($request->token),\n"
"            ])->save();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:51
#, no-wrap
msgid "<a name=\"decrypting-a-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/encryption.md:51
#, no-wrap
msgid "Decrypting A Value"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:54
msgid ""
"You may decrypt values using the `decryptString` method provided by the "
"`Crypt` facade. If the value can not be properly decrypted, such as when the "
"message authentication code is invalid, an "
"`Illuminate\\Contracts\\Encryption\\DecryptException` will be thrown:"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:57
#, no-wrap
msgid ""
"    use Illuminate\\Contracts\\Encryption\\DecryptException;\n"
"    use Illuminate\\Support\\Facades\\Crypt;\n"
msgstr ""

#. type: Plain text
#: docs/master/encryption.md:62
#, no-wrap
msgid ""
"    try {\n"
"        $decrypted = Crypt::decryptString($encryptedValue);\n"
"    } catch (DecryptException $e) {\n"
"        //\n"
"    }\n"
msgstr ""
