#
msgid ""
msgstr ""

#: docs/10.x/routing.md:block 1 (header)
msgid "Routing"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Basic Routing](#basic-routing)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Redirect Routes](#redirect-routes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[View Routes](#view-routes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[The Route List](#the-route-list)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Route Parameters](#route-parameters)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Required Parameters](#required-parameters)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Optional Parameters](#parameters-optional-parameters)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Regular Expression Constraints](#parameters-regular-expression-constraints)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Named Routes](#named-routes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Route Groups](#route-groups)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Middleware](#route-group-middleware)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Controllers](#route-group-controllers)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Subdomain Routing](#route-group-subdomain-routing)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Route Prefixes](#route-group-prefixes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Route Name Prefixes](#route-group-name-prefixes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Route Model Binding](#route-model-binding)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Implicit Binding](#implicit-binding)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Implicit Enum Binding](#implicit-enum-binding)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Explicit Binding](#explicit-binding)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Fallback Routes](#fallback-routes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Rate Limiting](#rate-limiting)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Defining Rate Limiters](#defining-rate-limiters)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Attaching Rate Limiters To Routes](#attaching-rate-limiters-to-routes)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Form Method Spoofing](#form-method-spoofing)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Accessing The Current Route](#accessing-the-current-route)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Cross-Origin Resource Sharing (CORS)](#cors)"
msgstr ""

#: docs/10.x/routing.md:block 2 (unordered list)
msgid "[Route Caching](#route-caching)"
msgstr ""

#: docs/10.x/routing.md:block 4 (header)
msgid "Basic Routing"
msgstr ""

#: docs/10.x/routing.md:block 5 (paragraph)
msgid "The most basic Laravel routes accept a URI and a closure, providing a very simple and expressive method of defining routes and behavior without complicated routing configuration files:"
msgstr ""

#: docs/10.x/routing.md:block 6 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/greeting', function () {\n"
"    return 'Hello World';\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 8 (header)
msgid "The Default Route Files"
msgstr ""

#: docs/10.x/routing.md:block 9 (paragraph)
msgid "All Laravel routes are defined in your route files, which are located in the `routes` directory. These files are automatically loaded by your application's `App\\Providers\\RouteServiceProvider`. The `routes/web.php` file defines routes that are for your web interface. These routes are assigned the `web` middleware group, which provides features like session state and CSRF protection. The routes in `routes/api.php` are stateless and are assigned the `api` middleware group."
msgstr ""

#: docs/10.x/routing.md:block 10 (paragraph)
msgid "For most applications, you will begin by defining routes in your `routes/web.php` file. The routes defined in `routes/web.php` may be accessed by entering the defined route's URL in your browser. For example, you may access the following route by navigating to `http://example.com/user` in your browser:"
msgstr ""

#: docs/10.x/routing.md:block 11 (code)
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"Route::get('/user', [UserController::class, 'index']);\n"
msgstr ""

#: docs/10.x/routing.md:block 12 (paragraph)
msgid "Routes defined in the `routes/api.php` file are nested within a route group by the `RouteServiceProvider`. Within this group, the `/api` URI prefix is automatically applied so you do not need to manually apply it to every route in the file. You may modify the prefix and other route group options by modifying your `RouteServiceProvider` class."
msgstr ""

#: docs/10.x/routing.md:block 14 (header)
msgid "Available Router Methods"
msgstr ""

#: docs/10.x/routing.md:block 15 (paragraph)
msgid "The router allows you to register routes that respond to any HTTP verb:"
msgstr ""

#: docs/10.x/routing.md:block 16 (code)
msgid ""
"Route::get($uri, $callback);\n"
"Route::post($uri, $callback);\n"
"Route::put($uri, $callback);\n"
"Route::patch($uri, $callback);\n"
"Route::delete($uri, $callback);\n"
"Route::options($uri, $callback);\n"
msgstr ""

#: docs/10.x/routing.md:block 17 (paragraph)
msgid "Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the `match` method. Or, you may even register a route that responds to all HTTP verbs using the `any` method:"
msgstr ""

#: docs/10.x/routing.md:block 18 (code)
msgid ""
"Route::match(['get', 'post'], '/', function () {\n"
"    // ...\n"
"});\n"
"\n"
"Route::any('/', function () {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 19 (quote)
msgid "**Note** When defining multiple routes that share the same URI, routes using the `get`, `post`, `put`, `patch`, `delete`, and `options` methods should be defined before routes using the `any`, `match`, and `redirect` methods. This ensures the incoming request is matched with the correct route."
msgstr ""

#: docs/10.x/routing.md:block 21 (header)
msgid "Dependency Injection"
msgstr ""

#: docs/10.x/routing.md:block 22 (paragraph)
msgid "You may type-hint any dependencies required by your route in your route's callback signature. The declared dependencies will automatically be resolved and injected into the callback by the Laravel [service container](/docs/{{version}}/container). For example, you may type-hint the `Illuminate\\Http\\Request` class to have the current HTTP request automatically injected into your route callback:"
msgstr ""

#: docs/10.x/routing.md:block 23 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/users', function (Request $request) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 25 (header)
msgid "CSRF Protection"
msgstr ""

#: docs/10.x/routing.md:block 26 (paragraph)
msgid "Remember, any HTML forms pointing to `POST`, `PUT`, `PATCH`, or `DELETE` routes that are defined in the `web` routes file should include a CSRF token field. Otherwise, the request will be rejected. You can read more about CSRF protection in the [CSRF documentation](/docs/{{version}}/csrf):"
msgstr ""

#: docs/10.x/routing.md:block 27 (code)
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"    ...\n"
"</form>\n"
msgstr ""

#: docs/10.x/routing.md:block 29 (header)
msgid "Redirect Routes"
msgstr ""

#: docs/10.x/routing.md:block 30 (paragraph)
msgid "If you are defining a route that redirects to another URI, you may use the `Route::redirect` method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:"
msgstr ""

#: docs/10.x/routing.md:block 31 (code)
msgid "Route::redirect('/here', '/there');\n"
msgstr ""

#: docs/10.x/routing.md:block 32 (paragraph)
msgid "By default, `Route::redirect` returns a `302` status code. You may customize the status code using the optional third parameter:"
msgstr ""

#: docs/10.x/routing.md:block 33 (code)
msgid "Route::redirect('/here', '/there', 301);\n"
msgstr ""

#: docs/10.x/routing.md:block 34 (paragraph)
msgid "Or, you may use the `Route::permanentRedirect` method to return a `301` status code:"
msgstr ""

#: docs/10.x/routing.md:block 35 (code)
msgid "Route::permanentRedirect('/here', '/there');\n"
msgstr ""

#: docs/10.x/routing.md:block 36 (quote)
msgid "**Warning** When using route parameters in redirect routes, the following parameters are reserved by Laravel and cannot be used: `destination` and `status`."
msgstr ""

#: docs/10.x/routing.md:block 38 (header)
msgid "View Routes"
msgstr ""

#: docs/10.x/routing.md:block 39 (paragraph)
msgid "If your route only needs to return a [view](/docs/{{version}}/views), you may use the `Route::view` method. Like the `redirect` method, this method provides a simple shortcut so that you do not have to define a full route or controller. The `view` method accepts a URI as its first argument and a view name as its second argument. In addition, you may provide an array of data to pass to the view as an optional third argument:"
msgstr ""

#: docs/10.x/routing.md:block 40 (code)
msgid ""
"Route::view('/welcome', 'welcome');\n"
"\n"
"Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\n"
msgstr ""

#: docs/10.x/routing.md:block 41 (quote)
msgid "**Warning** When using route parameters in view routes, the following parameters are reserved by Laravel and cannot be used: `view`, `data`, `status`, and `headers`."
msgstr ""

#: docs/10.x/routing.md:block 43 (header)
msgid "The Route List"
msgstr ""

#: docs/10.x/routing.md:block 44 (paragraph)
msgid "The `route:list` Artisan command can easily provide an overview of all of the routes that are defined by your application:"
msgstr ""

#: docs/10.x/routing.md:block 45 (code)
msgid "php artisan route:list\n"
msgstr ""

#: docs/10.x/routing.md:block 46 (paragraph)
msgid "By default, the route middleware that are assigned to each route will not be displayed in the `route:list` output; however, you can instruct Laravel to display the route middleware and middleware group names by adding the `-v` option to the command:"
msgstr ""

#: docs/10.x/routing.md:block 47 (code)
msgid ""
"php artisan route:list -v\n"
"\n"
"# Expand middleware groups...\n"
"php artisan route:list -vv\n"
msgstr ""

#: docs/10.x/routing.md:block 48 (paragraph)
msgid "You may also instruct Laravel to only show routes that begin with a given URI:"
msgstr ""

#: docs/10.x/routing.md:block 49 (code)
msgid "php artisan route:list --path=api\n"
msgstr ""

#: docs/10.x/routing.md:block 50 (paragraph)
msgid "In addition, you may instruct Laravel to hide any routes that are defined by third-party packages by providing the `--except-vendor` option when executing the `route:list` command:"
msgstr ""

#: docs/10.x/routing.md:block 51 (code)
msgid "php artisan route:list --except-vendor\n"
msgstr ""

#: docs/10.x/routing.md:block 52 (paragraph)
msgid "Likewise, you may also instruct Laravel to only show routes that are defined by third-party packages by providing the `--only-vendor` option when executing the `route:list` command:"
msgstr ""

#: docs/10.x/routing.md:block 53 (code)
msgid "php artisan route:list --only-vendor\n"
msgstr ""

#: docs/10.x/routing.md:block 55 (header)
msgid "Route Parameters"
msgstr ""

#: docs/10.x/routing.md:block 57 (header)
msgid "Required Parameters"
msgstr ""

#: docs/10.x/routing.md:block 58 (paragraph)
msgid "Sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:"
msgstr ""

#: docs/10.x/routing.md:block 59 (code)
msgid ""
"Route::get('/user/{id}', function (string $id) {\n"
"    return 'User '.$id;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 60 (paragraph)
msgid "You may define as many route parameters as required by your route:"
msgstr ""

#: docs/10.x/routing.md:block 61 (code)
msgid ""
"Route::get('/posts/{post}/comments/{comment}', function (string $postId, string $commentId) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 62 (paragraph)
msgid "Route parameters are always encased within `{}` braces and should consist of alphabetic characters. Underscores (`_`) are also acceptable within route parameter names. Route parameters are injected into route callbacks / controllers based on their order - the names of the route callback / controller arguments do not matter."
msgstr ""

#: docs/10.x/routing.md:block 64 (header)
msgid "Parameters & Dependency Injection"
msgstr ""

#: docs/10.x/routing.md:block 65 (paragraph)
msgid "If your route has dependencies that you would like the Laravel service container to automatically inject into your route's callback, you should list your route parameters after your dependencies:"
msgstr ""

#: docs/10.x/routing.md:block 66 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/{id}', function (Request $request, string $id) {\n"
"    return 'User '.$id;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 68 (header)
msgid "Optional Parameters"
msgstr ""

#: docs/10.x/routing.md:block 69 (paragraph)
msgid "Occasionally you may need to specify a route parameter that may not always be present in the URI. You may do so by placing a `?` mark after the parameter name. Make sure to give the route's corresponding variable a default value:"
msgstr ""

#: docs/10.x/routing.md:block 70 (code)
msgid ""
"Route::get('/user/{name?}', function (?string $name = null) {\n"
"    return $name;\n"
"});\n"
"\n"
"Route::get('/user/{name?}', function (?string $name = 'John') {\n"
"    return $name;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 72 (header)
msgid "Regular Expression Constraints"
msgstr ""

#: docs/10.x/routing.md:block 73 (paragraph)
msgid "You may constrain the format of your route parameters using the `where` method on a route instance. The `where` method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:"
msgstr ""

#: docs/10.x/routing.md:block 74 (code)
msgid ""
"Route::get('/user/{name}', function (string $name) {\n"
"    // ...\n"
"})->where('name', '[A-Za-z]+');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    // ...\n"
"})->where('id', '[0-9]+');\n"
"\n"
"Route::get('/user/{id}/{name}', function (string $id, string $name) {\n"
"    // ...\n"
"})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n"
msgstr ""

#: docs/10.x/routing.md:block 75 (paragraph)
msgid "For convenience, some commonly used regular expression patterns have helper methods that allow you to quickly add pattern constraints to your routes:"
msgstr ""

#: docs/10.x/routing.md:block 76 (code)
msgid ""
"Route::get('/user/{id}/{name}', function (string $id, string $name) {\n"
"    // ...\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function (string $name) {\n"
"    // ...\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    // ...\n"
"})->whereUuid('id');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    //\n"
"})->whereUlid('id');\n"
"\n"
"Route::get('/category/{category}', function (string $category) {\n"
"    // ...\n"
"})->whereIn('category', ['movie', 'song', 'painting']);\n"
msgstr ""

#: docs/10.x/routing.md:block 77 (paragraph)
msgid "If the incoming request does not match the route pattern constraints, a 404 HTTP response will be returned."
msgstr ""

#: docs/10.x/routing.md:block 79 (header)
msgid "Global Constraints"
msgstr ""

#: docs/10.x/routing.md:block 80 (paragraph)
msgid "If you would like a route parameter to always be constrained by a given regular expression, you may use the `pattern` method. You should define these patterns in the `boot` method of your `App\\Providers\\RouteServiceProvider` class:"
msgstr ""

#: docs/10.x/routing.md:block 81 (code)
msgid ""
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::pattern('id', '[0-9]+');\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 82 (paragraph)
msgid "Once the pattern has been defined, it is automatically applied to all routes using that parameter name:"
msgstr ""

#: docs/10.x/routing.md:block 83 (code)
msgid ""
"Route::get('/user/{id}', function (string $id) {\n"
"    // Only executed if {id} is numeric...\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 85 (header)
msgid "Encoded Forward Slashes"
msgstr ""

#: docs/10.x/routing.md:block 86 (paragraph)
msgid "The Laravel routing component allows all characters except `/` to be present within route parameter values. You must explicitly allow `/` to be part of your placeholder using a `where` condition regular expression:"
msgstr ""

#: docs/10.x/routing.md:block 87 (code)
msgid ""
"Route::get('/search/{search}', function (string $search) {\n"
"    return $search;\n"
"})->where('search', '.*');\n"
msgstr ""

#: docs/10.x/routing.md:block 88 (quote)
msgid "**Warning** Encoded forward slashes are only supported within the last route segment."
msgstr ""

#: docs/10.x/routing.md:block 90 (header)
msgid "Named Routes"
msgstr ""

#: docs/10.x/routing.md:block 91 (paragraph)
msgid "Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the `name` method onto the route definition:"
msgstr ""

#: docs/10.x/routing.md:block 92 (code)
msgid ""
"Route::get('/user/profile', function () {\n"
"    // ...\n"
"})->name('profile');\n"
msgstr ""

#: docs/10.x/routing.md:block 93 (paragraph)
msgid "You may also specify route names for controller actions:"
msgstr ""

#: docs/10.x/routing.md:block 94 (code)
msgid ""
"Route::get(\n"
"    '/user/profile',\n"
"    [UserProfileController::class, 'show']\n"
")->name('profile');\n"
msgstr ""

#: docs/10.x/routing.md:block 95 (quote)
msgid "**Warning** Route names should always be unique."
msgstr ""

#: docs/10.x/routing.md:block 97 (header)
msgid "Generating URLs To Named Routes"
msgstr ""

#: docs/10.x/routing.md:block 98 (paragraph)
msgid "Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via Laravel's `route` and `redirect` helper functions:"
msgstr ""

#: docs/10.x/routing.md:block 99 (code)
msgid ""
"// Generating URLs...\n"
"$url = route('profile');\n"
"\n"
"// Generating Redirects...\n"
"return redirect()->route('profile');\n"
"\n"
"return to_route('profile');\n"
msgstr ""

#: docs/10.x/routing.md:block 100 (paragraph)
msgid "If the named route defines parameters, you may pass the parameters as the second argument to the `route` function. The given parameters will automatically be inserted into the generated URL in their correct positions:"
msgstr ""

#: docs/10.x/routing.md:block 101 (code)
msgid ""
"Route::get('/user/{id}/profile', function (string $id) {\n"
"    // ...\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1]);\n"
msgstr ""

#: docs/10.x/routing.md:block 102 (paragraph)
msgid "If you pass additional parameters in the array, those key / value pairs will automatically be added to the generated URL's query string:"
msgstr ""

#: docs/10.x/routing.md:block 103 (code)
msgid ""
"Route::get('/user/{id}/profile', function (string $id) {\n"
"    // ...\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
"\n"
"// /user/1/profile?photos=yes\n"
msgstr ""

#: docs/10.x/routing.md:block 104 (quote)
msgid "**Note** Sometimes, you may wish to specify request-wide default values for URL parameters, such as the current locale. To accomplish this, you may use the [`URL::defaults` method](/docs/{{version}}/urls#default-values)."
msgstr ""

#: docs/10.x/routing.md:block 106 (header)
msgid "Inspecting The Current Route"
msgstr ""

#: docs/10.x/routing.md:block 107 (paragraph)
msgid "If you would like to determine if the current request was routed to a given named route, you may use the `named` method on a Route instance. For example, you may check the current route name from a route middleware:"
msgstr ""

#: docs/10.x/routing.md:block 108 (code)
msgid ""
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
" */\n"
"public function handle(Request $request, Closure $next): Response\n"
"{\n"
"    if ($request->route()->named('profile')) {\n"
"        // ...\n"
"    }\n"
"\n"
"    return $next($request);\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 110 (header)
msgid "Route Groups"
msgstr ""

#: docs/10.x/routing.md:block 111 (paragraph)
msgid "Route groups allow you to share route attributes, such as middleware, across a large number of routes without needing to define those attributes on each individual route."
msgstr ""

#: docs/10.x/routing.md:block 112 (paragraph)
msgid "Nested groups attempt to intelligently \"merge\" attributes with their parent group. Middleware and `where` conditions are merged while names and prefixes are appended. Namespace delimiters and slashes in URI prefixes are automatically added where appropriate."
msgstr ""

#: docs/10.x/routing.md:block 114 (header)
msgid "Middleware"
msgstr ""

#: docs/10.x/routing.md:block 115 (paragraph)
msgid "To assign [middleware](/docs/{{version}}/middleware) to all routes within a group, you may use the `middleware` method before defining the group. Middleware are executed in the order they are listed in the array:"
msgstr ""

#: docs/10.x/routing.md:block 116 (code)
msgid ""
"Route::middleware(['first', 'second'])->group(function () {\n"
"    Route::get('/', function () {\n"
"        // Uses first & second middleware...\n"
"    });\n"
"\n"
"    Route::get('/user/profile', function () {\n"
"        // Uses first & second middleware...\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 118 (header)
msgid "Controllers"
msgstr ""

#: docs/10.x/routing.md:block 119 (paragraph)
msgid "If a group of routes all utilize the same [controller](/docs/{{version}}/controllers), you may use the `controller` method to define the common controller for all of the routes within the group. Then, when defining the routes, you only need to provide the controller method that they invoke:"
msgstr ""

#: docs/10.x/routing.md:block 120 (code)
msgid ""
"use App\\Http\\Controllers\\OrderController;\n"
"\n"
"Route::controller(OrderController::class)->group(function () {\n"
"    Route::get('/orders/{id}', 'show');\n"
"    Route::post('/orders', 'store');\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 122 (header)
msgid "Subdomain Routing"
msgstr ""

#: docs/10.x/routing.md:block 123 (paragraph)
msgid "Route groups may also be used to handle subdomain routing. Subdomains may be assigned route parameters just like route URIs, allowing you to capture a portion of the subdomain for usage in your route or controller. The subdomain may be specified by calling the `domain` method before defining the group:"
msgstr ""

#: docs/10.x/routing.md:block 124 (code)
msgid ""
"Route::domain('{account}.example.com')->group(function () {\n"
"    Route::get('user/{id}', function (string $account, string $id) {\n"
"        // ...\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 125 (quote)
msgid "**Warning** In order to ensure your subdomain routes are reachable, you should register subdomain routes before registering root domain routes. This will prevent root domain routes from overwriting subdomain routes which have the same URI path."
msgstr ""

#: docs/10.x/routing.md:block 127 (header)
msgid "Route Prefixes"
msgstr ""

#: docs/10.x/routing.md:block 128 (paragraph)
msgid "The `prefix` method may be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with `admin`:"
msgstr ""

#: docs/10.x/routing.md:block 129 (code)
msgid ""
"Route::prefix('admin')->group(function () {\n"
"    Route::get('/users', function () {\n"
"        // Matches The \"/admin/users\" URL\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 131 (header)
msgid "Route Name Prefixes"
msgstr ""

#: docs/10.x/routing.md:block 132 (paragraph)
msgid "The `name` method may be used to prefix each route name in the group with a given string. For example, you may want to prefix the names of all of the routes in the group with `admin`. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing `.` character in the prefix:"
msgstr ""

#: docs/10.x/routing.md:block 133 (code)
msgid ""
"Route::name('admin.')->group(function () {\n"
"    Route::get('/users', function () {\n"
"        // Route assigned name \"admin.users\"...\n"
"    })->name('users');\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 135 (header)
msgid "Route Model Binding"
msgstr ""

#: docs/10.x/routing.md:block 136 (paragraph)
msgid "When injecting a model ID to a route or controller action, you will often query the database to retrieve the model that corresponds to that ID. Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes. For example, instead of injecting a user's ID, you can inject the entire `User` model instance that matches the given ID."
msgstr ""

#: docs/10.x/routing.md:block 138 (header)
msgid "Implicit Binding"
msgstr ""

#: docs/10.x/routing.md:block 139 (paragraph)
msgid "Laravel automatically resolves Eloquent models defined in routes or controller actions whose type-hinted variable names match a route segment name. For example:"
msgstr ""

#: docs/10.x/routing.md:block 140 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    return $user->email;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 141 (paragraph)
msgid "Since the `$user` variable is type-hinted as the `App\\Models\\User` Eloquent model and the variable name matches the `{user}` URI segment, Laravel will automatically inject the model instance that has an ID matching the corresponding value from the request URI. If a matching model instance is not found in the database, a 404 HTTP response will automatically be generated."
msgstr ""

#: docs/10.x/routing.md:block 142 (paragraph)
msgid "Of course, implicit binding is also possible when using controller methods. Again, note the `{user}` URI segment matches the `$user` variable in the controller which contains an `App\\Models\\User` type-hint:"
msgstr ""

#: docs/10.x/routing.md:block 143 (code)
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"use App\\Models\\User;\n"
"\n"
"// Route definition...\n"
"Route::get('/users/{user}', [UserController::class, 'show']);\n"
"\n"
"// Controller method definition...\n"
"public function show(User $user)\n"
"{\n"
"    return view('user.profile', ['user' => $user]);\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 145 (header)
msgid "Soft Deleted Models"
msgstr ""

#: docs/10.x/routing.md:block 146 (paragraph)
msgid "Typically, implicit model binding will not retrieve models that have been [soft deleted](/docs/{{version}}/eloquent#soft-deleting). However, you may instruct the implicit binding to retrieve these models by chaining the `withTrashed` method onto your route's definition:"
msgstr ""

#: docs/10.x/routing.md:block 147 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    return $user->email;\n"
"})->withTrashed();\n"
msgstr ""

#: docs/10.x/routing.md:block 149 (header)
msgid "Customizing The Key"
msgstr ""

#: docs/10.x/routing.md:block 150 (paragraph)
msgid "Sometimes you may wish to resolve Eloquent models using a column other than `id`. To do so, you may specify the column in the route parameter definition:"
msgstr ""

#: docs/10.x/routing.md:block 151 (code)
msgid ""
"use App\\Models\\Post;\n"
"\n"
"Route::get('/posts/{post:slug}', function (Post $post) {\n"
"    return $post;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 152 (paragraph)
msgid "If you would like model binding to always use a database column other than `id` when retrieving a given model class, you may override the `getRouteKeyName` method on the Eloquent model:"
msgstr ""

#: docs/10.x/routing.md:block 153 (code)
msgid ""
"/**\n"
" * Get the route key for the model.\n"
" */\n"
"public function getRouteKeyName(): string\n"
"{\n"
"    return 'slug';\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 155 (header)
msgid "Custom Keys & Scoping"
msgstr ""

#: docs/10.x/routing.md:block 156 (paragraph)
msgid "When implicitly binding multiple Eloquent models in a single route definition, you may wish to scope the second Eloquent model such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr ""

#: docs/10.x/routing.md:block 157 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 158 (paragraph)
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. In this case, it will be assumed that the `User` model has a relationship named `posts` (the plural form of the route parameter name) which can be used to retrieve the `Post` model."
msgstr ""

#: docs/10.x/routing.md:block 159 (paragraph)
msgid "If you wish, you may instruct Laravel to scope \"child\" bindings even when a custom key is not provided. To do so, you may invoke the `scopeBindings` method when defining your route:"
msgstr ""

#: docs/10.x/routing.md:block 160 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->scopeBindings();\n"
msgstr ""

#: docs/10.x/routing.md:block 161 (paragraph)
msgid "Or, you may instruct an entire group of route definitions to use scoped bindings:"
msgstr ""

#: docs/10.x/routing.md:block 162 (code)
msgid ""
"Route::scopeBindings()->group(function () {\n"
"    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 163 (paragraph)
msgid "Similarly, you may explicitly instruct Laravel to not scope bindings by invoking the `withoutScopedBindings` method:"
msgstr ""

#: docs/10.x/routing.md:block 164 (code)
msgid ""
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->withoutScopedBindings();\n"
msgstr ""

#: docs/10.x/routing.md:block 166 (header)
msgid "Customizing Missing Model Behavior"
msgstr ""

#: docs/10.x/routing.md:block 167 (paragraph)
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound model is not found. However, you may customize this behavior by calling the `missing` method when defining your route. The `missing` method accepts a closure that will be invoked if an implicitly bound model can not be found:"
msgstr ""

#: docs/10.x/routing.md:block 168 (code)
msgid ""
"use App\\Http\\Controllers\\LocationsController;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Redirect;\n"
"\n"
"Route::get('/locations/{location:slug}', [LocationsController::class, 'show'])\n"
"        ->name('locations.view')\n"
"        ->missing(function (Request $request) {\n"
"            return Redirect::route('locations.index');\n"
"        });\n"
msgstr ""

#: docs/10.x/routing.md:block 170 (header)
msgid "Implicit Enum Binding"
msgstr ""

#: docs/10.x/routing.md:block 171 (paragraph)
msgid "PHP 8.1 introduced support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To compliment this feature, Laravel allows you to type-hint a [string-backed Enum](https://www.php.net/manual/en/language.enumerations.backed.php) on your route definition and Laravel will only invoke the route if that route segment corresponds to a valid Enum value. Otherwise, a 404 HTTP response will be returned automatically. For example, given the following Enum:"
msgstr ""

#: docs/10.x/routing.md:block 172 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Enums;\n"
"\n"
"enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 173 (paragraph)
msgid "You may define a route that will only be invoked if the `{category}` route segment is `fruits` or `people`. Otherwise, Laravel will return a 404 HTTP response:"
msgstr ""

#: docs/10.x/routing.md:block 174 (code)
msgid ""
"use App\\Enums\\Category;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 176 (header)
msgid "Explicit Binding"
msgstr ""

#: docs/10.x/routing.md:block 177 (paragraph)
msgid "You are not required to use Laravel's implicit, convention based model resolution in order to use model binding. You can also explicitly define how route parameters correspond to models. To register an explicit binding, use the router's `model` method to specify the class for a given parameter. You should define your explicit model bindings at the beginning of the `boot` method of your `RouteServiceProvider` class:"
msgstr ""

#: docs/10.x/routing.md:block 178 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::model('user', User::class);\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 179 (paragraph)
msgid "Next, define a route that contains a `{user}` parameter:"
msgstr ""

#: docs/10.x/routing.md:block 180 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 181 (paragraph)
msgid "Since we have bound all `{user}` parameters to the `App\\Models\\User` model, an instance of that class will be injected into the route. So, for example, a request to `users/1` will inject the `User` instance from the database which has an ID of `1`."
msgstr ""

#: docs/10.x/routing.md:block 182 (paragraph)
msgid "If a matching model instance is not found in the database, a 404 HTTP response will be automatically generated."
msgstr ""

#: docs/10.x/routing.md:block 184 (header)
msgid "Customizing The Resolution Logic"
msgstr ""

#: docs/10.x/routing.md:block 185 (paragraph)
msgid "If you wish to define your own model binding resolution logic, you may use the `Route::bind` method. The closure you pass to the `bind` method will receive the value of the URI segment and should return the instance of the class that should be injected into the route. Again, this customization should take place in the `boot` method of your application's `RouteServiceProvider`:"
msgstr ""

#: docs/10.x/routing.md:block 186 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::bind('user', function (string $value) {\n"
"        return User::where('name', $value)->firstOrFail();\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 187 (paragraph)
msgid "Alternatively, you may override the `resolveRouteBinding` method on your Eloquent model. This method will receive the value of the URI segment and should return the instance of the class that should be injected into the route:"
msgstr ""

#: docs/10.x/routing.md:block 188 (code)
msgid ""
"/**\n"
" * Retrieve the model for a bound value.\n"
" *\n"
" * @param  mixed  $value\n"
" * @param  string|null  $field\n"
" * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
" */\n"
"public function resolveRouteBinding($value, $field = null)\n"
"{\n"
"    return $this->where('name', $value)->firstOrFail();\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 189 (paragraph)
msgid "If a route is utilizing [implicit binding scoping](#implicit-model-binding-scoping), the `resolveChildRouteBinding` method will be used to resolve the child binding of the parent model:"
msgstr ""

#: docs/10.x/routing.md:block 190 (code)
msgid ""
"/**\n"
" * Retrieve the child model for a bound value.\n"
" *\n"
" * @param  string  $childType\n"
" * @param  mixed  $value\n"
" * @param  string|null  $field\n"
" * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
" */\n"
"public function resolveChildRouteBinding($childType, $value, $field)\n"
"{\n"
"    return parent::resolveChildRouteBinding($childType, $value, $field);\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 192 (header)
msgid "Fallback Routes"
msgstr ""

#: docs/10.x/routing.md:block 193 (paragraph)
msgid "Using the `Route::fallback` method, you may define a route that will be executed when no other route matches the incoming request. Typically, unhandled requests will automatically render a \"404\" page via your application's exception handler. However, since you would typically define the `fallback` route within your `routes/web.php` file, all middleware in the `web` middleware group will apply to the route. You are free to add additional middleware to this route as needed:"
msgstr ""

#: docs/10.x/routing.md:block 194 (code)
msgid ""
"Route::fallback(function () {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 195 (quote)
msgid "**Warning** The fallback route should always be the last route registered by your application."
msgstr ""

#: docs/10.x/routing.md:block 197 (header)
msgid "Rate Limiting"
msgstr ""

#: docs/10.x/routing.md:block 199 (header)
msgid "Defining Rate Limiters"
msgstr ""

#: docs/10.x/routing.md:block 200 (paragraph)
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs."
msgstr ""

#: docs/10.x/routing.md:block 201 (paragraph)
msgid "Typically, rate limiters are defined within the `boot` method of your application's `App\\Providers\\RouteServiceProvider` class. In fact, this class already includes a rate limiter definition that is applied to the routes in your application's `routes/api.php` file:"
msgstr ""

#: docs/10.x/routing.md:block 202 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, and other route configuration.\n"
" */\n"
"protected function boot(): void\n"
"{\n"
"    RateLimiter::for('api', function (Request $request) {\n"
"        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 203 (paragraph)
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned to the rate limiter. Limit configuration are instances of the `Illuminate\\Cache\\RateLimiting\\Limit` class. This class contains helpful \"builder\" methods so that you can quickly define your limit. The rate limiter name may be any string you wish:"
msgstr ""

#: docs/10.x/routing.md:block 204 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, and other route configuration.\n"
" */\n"
"protected function boot(): void\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/routing.md:block 205 (paragraph)
msgid "If the incoming request exceeds the specified rate limit, a response with a 429 HTTP status code will automatically be returned by Laravel. If you would like to define your own response that should be returned by a rate limit, you may use the `response` method:"
msgstr ""

#: docs/10.x/routing.md:block 206 (code)
msgid ""
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000)->response(function (Request $request, array $headers) {\n"
"        return response('Custom response...', 429, $headers);\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 207 (paragraph)
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr ""

#: docs/10.x/routing.md:block 208 (code)
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100);\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 210 (header)
msgid "Segmenting Rate Limits"
msgstr ""

#: docs/10.x/routing.md:block 211 (paragraph)
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr ""

#: docs/10.x/routing.md:block 212 (code)
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100)->by($request->ip());\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 213 (paragraph)
msgid "To illustrate this feature using another example, we can limit access to the route to 100 times per minute per authenticated user ID or 10 times per minute per IP address for guests:"
msgstr ""

#: docs/10.x/routing.md:block 214 (code)
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()\n"
"                ? Limit::perMinute(100)->by($request->user()->id)\n"
"                : Limit::perMinute(10)->by($request->ip());\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 216 (header)
msgid "Multiple Rate Limits"
msgstr ""

#: docs/10.x/routing.md:block 217 (paragraph)
msgid "If needed, you may return an array of rate limits for a given rate limiter configuration. Each rate limit will be evaluated for the route based on the order they are placed within the array:"
msgstr ""

#: docs/10.x/routing.md:block 218 (code)
msgid ""
"RateLimiter::for('login', function (Request $request) {\n"
"    return [\n"
"        Limit::perMinute(500),\n"
"        Limit::perMinute(3)->by($request->input('email')),\n"
"    ];\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 220 (header)
msgid "Attaching Rate Limiters To Routes"
msgstr ""

#: docs/10.x/routing.md:block 221 (paragraph)
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr ""

#: docs/10.x/routing.md:block 222 (code)
msgid ""
"Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        // ...\n"
"    });\n"
"\n"
"    Route::post('/video', function () {\n"
"        // ...\n"
"    });\n"
"});\n"
msgstr ""

#: docs/10.x/routing.md:block 224 (header)
msgid "Throttling With Redis"
msgstr ""

#: docs/10.x/routing.md:block 225 (paragraph)
msgid "Typically, the `throttle` middleware is mapped to the `Illuminate\\Routing\\Middleware\\ThrottleRequests` class. This mapping is defined in your application's HTTP kernel (`App\\Http\\Kernel`). However, if you are using Redis as your application's cache driver, you may wish to change this mapping to use the `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` class. This class is more efficient at managing rate limiting using Redis:"
msgstr ""

#: docs/10.x/routing.md:block 226 (code)
msgid "'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
msgstr ""

#: docs/10.x/routing.md:block 228 (header)
msgid "Form Method Spoofing"
msgstr ""

#: docs/10.x/routing.md:block 229 (paragraph)
msgid "HTML forms do not support `PUT`, `PATCH`, or `DELETE` actions. So, when defining `PUT`, `PATCH`, or `DELETE` routes that are called from an HTML form, you will need to add a hidden `_method` field to the form. The value sent with the `_method` field will be used as the HTTP request method:"
msgstr ""

#: docs/10.x/routing.md:block 230 (code)
msgid ""
"<form action=\"/example\" method=\"POST\">\n"
"    <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n"
"    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n"
"</form>\n"
msgstr ""

#: docs/10.x/routing.md:block 231 (paragraph)
msgid "For convenience, you may use the `@method` [Blade directive](/docs/{{version}}/blade) to generate the `_method` input field:"
msgstr ""

#: docs/10.x/routing.md:block 232 (code)
msgid ""
"<form action=\"/example\" method=\"POST\">\n"
"    @method('PUT')\n"
"    @csrf\n"
"</form>\n"
msgstr ""

#: docs/10.x/routing.md:block 234 (header)
msgid "Accessing The Current Route"
msgstr ""

#: docs/10.x/routing.md:block 235 (paragraph)
msgid "You may use the `current`, `currentRouteName`, and `currentRouteAction` methods on the `Route` facade to access information about the route handling the incoming request:"
msgstr ""

#: docs/10.x/routing.md:block 236 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"$route = Route::current(); // Illuminate\\Routing\\Route\n"
"$name = Route::currentRouteName(); // string\n"
"$action = Route::currentRouteAction(); // string\n"
msgstr ""

#: docs/10.x/routing.md:block 237 (paragraph)
msgid "You may refer to the API documentation for both the [underlying class of the Route facade](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html) and [Route instance](https://laravel.com/api/{{version}}/Illuminate/Routing/Route.html) to review all of the methods that are available on the router and route classes."
msgstr ""

#: docs/10.x/routing.md:block 239 (header)
msgid "Cross-Origin Resource Sharing (CORS)"
msgstr ""

#: docs/10.x/routing.md:block 240 (paragraph)
msgid "Laravel can automatically respond to CORS `OPTIONS` HTTP requests with values that you configure. All CORS settings may be configured in your application's `config/cors.php` configuration file. The `OPTIONS` requests will automatically be handled by the `HandleCors` [middleware](/docs/{{version}}/middleware) that is included by default in your global middleware stack. Your global middleware stack is located in your application's HTTP kernel (`App\\Http\\Kernel`)."
msgstr ""

#: docs/10.x/routing.md:block 241 (quote)
msgid "**Note** For more information on CORS and CORS headers, please consult the [MDN web documentation on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers)."
msgstr ""

#: docs/10.x/routing.md:block 243 (header)
msgid "Route Caching"
msgstr ""

#: docs/10.x/routing.md:block 244 (paragraph)
msgid "When deploying your application to production, you should take advantage of Laravel's route cache. Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. To generate a route cache, execute the `route:cache` Artisan command:"
msgstr ""

#: docs/10.x/routing.md:block 245 (code)
msgid "php artisan route:cache\n"
msgstr ""

#: docs/10.x/routing.md:block 246 (paragraph)
msgid "After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes you will need to generate a fresh route cache. Because of this, you should only run the `route:cache` command during your project's deployment."
msgstr ""

#: docs/10.x/routing.md:block 247 (paragraph)
msgid "You may use the `route:clear` command to clear the route cache:"
msgstr ""

#: docs/10.x/routing.md:block 248 (code)
msgid "php artisan route:clear\n"
msgstr ""

#: docs/8.x/routing.md:block 18 (code)
msgid ""
"Route::match(['get', 'post'], '/', function () {\n"
"    //\n"
"});\n"
"\n"
"Route::any('/', function () {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 19 (quote)
msgid "{tip} When defining multiple routes that share the same URI, routes using the `get`, `post`, `put`, `patch`, `delete`, and `options` methods should be defined before routes using the `any`, `match`, and `redirect` methods. This ensures the incoming request is matched with the correct route."
msgstr ""

#: docs/8.x/routing.md:block 36 (quote)
msgid "{note} When using route parameters in redirect routes, the following parameters are reserved by Laravel and cannot be used: `destination` and `status`."
msgstr ""

#: docs/8.x/routing.md:block 41 (quote)
msgid "{note} When using route parameters in view routes, the following parameters are reserved by Laravel and cannot be used: `view`, `data`, `status`, and `headers`."
msgstr ""

#: docs/8.x/routing.md:block 47 (code)
msgid ""
"Route::get('/user/{id}', function ($id) {\n"
"    return 'User '.$id;\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 49 (code)
msgid ""
"Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 54 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/{id}', function (Request $request, $id) {\n"
"    return 'User '.$id;\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 58 (code)
msgid ""
"Route::get('/user/{name?}', function ($name = null) {\n"
"    return $name;\n"
"});\n"
"\n"
"Route::get('/user/{name?}', function ($name = 'John') {\n"
"    return $name;\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 62 (code)
msgid ""
"Route::get('/user/{name}', function ($name) {\n"
"    //\n"
"})->where('name', '[A-Za-z]+');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->where('id', '[0-9]+');\n"
"\n"
"Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"    //\n"
"})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n"
msgstr ""

#: docs/8.x/routing.md:block 64 (code)
msgid ""
"Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"    //\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function ($name) {\n"
"    //\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->whereUuid('id');\n"
msgstr ""

#: docs/8.x/routing.md:block 69 (code)
msgid ""
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::pattern('id', '[0-9]+');\n"
"}\n"
msgstr ""

#: docs/8.x/routing.md:block 71 (code)
msgid ""
"Route::get('/user/{id}', function ($id) {\n"
"    // Only executed if {id} is numeric...\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 75 (code)
msgid ""
"Route::get('/search/{search}', function ($search) {\n"
"    return $search;\n"
"})->where('search', '.*');\n"
msgstr ""

#: docs/8.x/routing.md:block 76 (quote)
msgid "{note} Encoded forward slashes are only supported within the last route segment."
msgstr ""

#: docs/8.x/routing.md:block 80 (code)
msgid ""
"Route::get('/user/profile', function () {\n"
"    //\n"
"})->name('profile');\n"
msgstr ""

#: docs/8.x/routing.md:block 83 (quote)
msgid "{note} Route names should always be unique."
msgstr ""

#: docs/8.x/routing.md:block 87 (code)
msgid ""
"// Generating URLs...\n"
"$url = route('profile');\n"
"\n"
"// Generating Redirects...\n"
"return redirect()->route('profile');\n"
msgstr ""

#: docs/8.x/routing.md:block 89 (code)
msgid ""
"Route::get('/user/{id}/profile', function ($id) {\n"
"    //\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1]);\n"
msgstr ""

#: docs/8.x/routing.md:block 91 (code)
msgid ""
"Route::get('/user/{id}/profile', function ($id) {\n"
"    //\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
"\n"
"// /user/1/profile?photos=yes\n"
msgstr ""

#: docs/8.x/routing.md:block 92 (quote)
msgid "{tip} Sometimes, you may wish to specify request-wide default values for URL parameters, such as the current locale. To accomplish this, you may use the [`URL::defaults` method](/docs/{{version}}/urls#default-values)."
msgstr ""

#: docs/8.x/routing.md:block 96 (code)
msgid ""
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @param  \\Closure  $next\n"
" * @return mixed\n"
" */\n"
"public function handle($request, Closure $next)\n"
"{\n"
"    if ($request->route()->named('profile')) {\n"
"        //\n"
"    }\n"
"\n"
"    return $next($request);\n"
"}\n"
msgstr ""

#: docs/8.x/routing.md:block 112 (code)
msgid ""
"Route::domain('{account}.example.com')->group(function () {\n"
"    Route::get('user/{id}', function ($account, $id) {\n"
"        //\n"
"    });\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 113 (quote)
msgid "{note} In order to ensure your subdomain routes are reachable, you should register subdomain routes before registering root domain routes. This will prevent root domain routes from overwriting subdomain routes which have the same URI path."
msgstr ""

#: docs/8.x/routing.md:block 120 (paragraph)
msgid "The `name` method may be used to prefix each route name in the group with a given string. For example, you may want to prefix all of the grouped route's names with `admin`. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing `.` character in the prefix:"
msgstr ""

#: docs/8.x/routing.md:block 141 (code)
msgid ""
"/**\n"
" * Get the route key for the model.\n"
" *\n"
" * @return string\n"
" */\n"
"public function getRouteKeyName()\n"
"{\n"
"    return 'slug';\n"
"}\n"
msgstr ""

#: docs/8.x/routing.md:block 158 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::model('user', User::class);\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/routing.md:block 160 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 166 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::bind('user', function ($value) {\n"
"        return User::where('name', $value)->firstOrFail();\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/routing.md:block 174 (code)
msgid ""
"Route::fallback(function () {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 175 (quote)
msgid "{note} The fallback route should always be the last route registered by your application."
msgstr ""

#: docs/8.x/routing.md:block 180 (paragraph)
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs. Typically, this should be done within the `configureRateLimiting` method of your application's `App\\Providers\\RouteServiceProvider` class."
msgstr ""

#: docs/8.x/routing.md:block 182 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function configureRateLimiting()\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/routing.md:block 184 (code)
msgid ""
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000)->response(function () {\n"
"        return response('Custom response...', 429);\n"
"    });\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 200 (code)
msgid ""
"Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        //\n"
"    });\n"
"\n"
"    Route::post('/video', function () {\n"
"        //\n"
"    });\n"
"});\n"
msgstr ""

#: docs/8.x/routing.md:block 219 (quote)
msgid "{tip} For more information on CORS and CORS headers, please consult the [MDN web documentation on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers)."
msgstr ""

#: docs/9.x/routing.md:block 46 (paragraph)
msgid "By default, the route middleware that are assigned to each route will not be displayed in the `route:list` output; however, you can instruct Laravel to display the route middleware by adding the `-v` option to the command:"
msgstr ""

#: docs/9.x/routing.md:block 47 (code)
msgid "php artisan route:list -v\n"
msgstr ""

#: docs/9.x/routing.md:block 76 (code)
msgid ""
"Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"    //\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function ($name) {\n"
"    //\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->whereUuid('id');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->whereUlid('id');\n"
"\n"
"Route::get('/category/{category}', function ($category) {\n"
"    //\n"
"})->whereIn('category', ['movie', 'song', 'painting']);\n"
msgstr ""

#: docs/9.x/routing.md:block 200 (paragraph)
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs. Typically, this should be done within the `configureRateLimiting` method of your application's `App\\Providers\\RouteServiceProvider` class, which already includes a rate limiter definition that is applied to the routes in your application's `routes/api.php` file:"
msgstr ""

#: docs/9.x/routing.md:block 201 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" */\n"
"protected function configureRateLimiting(): void\n"
"{\n"
"    RateLimiter::for('api', function (Request $request) {\n"
"        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n"
"    });\n"
"}\n"
msgstr ""

#: docs/9.x/routing.md:block 203 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function configureRateLimiting()\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/master/routing.md:block 70 (code)
msgid ""
"Route::get('/user/{name?}', function (string $name = null) {\n"
"    return $name;\n"
"});\n"
"\n"
"Route::get('/user/{name?}', function (string $name = 'John') {\n"
"    return $name;\n"
"});\n"
msgstr ""

#: docs/master/routing.md:block 203 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" */\n"
"protected function configureRateLimiting(): void\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"}\n"
msgstr ""
