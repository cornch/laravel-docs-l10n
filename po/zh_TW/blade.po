msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/blade.pot\n"
"X-Crowdin-File-ID: 17\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-03-07 16:55\n"

#: docs/8.x/blade.md:block 1 (header)
msgid "Blade Templates"
msgstr "Blade 樣板"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Displaying Data](#displaying-data)"
msgstr "[顯示資料](#displaying-data)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[HTML Entity Encoding](#html-entity-encoding)"
msgstr "[HTML 實體編碼](#html-entity-encoding)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Blade & JavaScript Frameworks](#blade-and-javascript-frameworks)"
msgstr "[Blade 與 JavaScript 框架](#blade-and-javascript-frameworks)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Blade Directives](#blade-directives)"
msgstr "[Blade 指示詞](#blade-directives)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[If Statements](#if-statements)"
msgstr "[If 陳述式](#if-statements)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Switch Statements](#switch-statements)"
msgstr "[Switch 陳述式](#switch-statements)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Loops](#loops)"
msgstr "[迴圈](#loops)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[The Loop Variable](#the-loop-variable)"
msgstr "[迴圈變數](#the-loop-variable)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Conditional Classes](#conditional-classes)"
msgstr "[條件式 Class](#conditional-classes)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Including Subviews](#including-subviews)"
msgstr "[Include 子 View](#including-subviews)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[The `@once` Directive](#the-once-directive)"
msgstr "[`@once` 指示詞](#the-once-directive)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Raw PHP](#raw-php)"
msgstr "[原始 PHP](#raw-php)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Comments](#comments)"
msgstr "[註解](#comments)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Components](#components)"
msgstr "[元件](#components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Rendering Components](#rendering-components)"
msgstr "[轉譯元件](#rendering-components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Passing Data To Components](#passing-data-to-components)"
msgstr "[將資料傳給元件](#passing-data-to-components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Component Attributes](#component-attributes)"
msgstr "[元件屬性](#component-attributes)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Reserved Keywords](#reserved-keywords)"
msgstr "[保留字](#reserved-keywords)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Slots](#slots)"
msgstr "[Slot](#slots)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Inline Component Views](#inline-component-views)"
msgstr "[內嵌元件 View](#inline-component-views)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Anonymous Components](#anonymous-components)"
msgstr "[匿名元件](#anonymous-components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Dynamic Components](#dynamic-components)"
msgstr "[動態元件](#dynamic-components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Manually Registering Components](#manually-registering-components)"
msgstr "[手動註冊元件](#manually-registering-components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Building Layouts](#building-layouts)"
msgstr "[製作 Layout](#building-layouts)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Layouts Using Components](#layouts-using-components)"
msgstr "[使用元件的 Layout](#layouts-using-components)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Layouts Using Template Inheritance](#layouts-using-template-inheritance)"
msgstr "[使用樣板繼承的 Layout](#layouts-using-template-inheritance)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Forms](#forms)"
msgstr "[表單](#forms)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[CSRF Field](#csrf-field)"
msgstr "[CSRF 欄位](#csrf-field)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Method Field](#method-field)"
msgstr "[方法欄位](#method-field)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Validation Errors](#validation-errors)"
msgstr "[表單驗證錯誤](#validation-errors)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Stacks](#stacks)"
msgstr "[Stack](#stacks)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Service Injection](#service-injection)"
msgstr "[插入 Service](#service-injection)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Extending Blade](#extending-blade)"
msgstr "[擴充 Blade](#extending-blade)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Custom Echo Handlers](#custom-echo-handlers)"
msgstr "[自訂的 Echo 處理常式](#custom-echo-handlers)"

#: docs/8.x/blade.md:block 2 (unordered list)
msgid "[Custom If Statements](#custom-if-statements)"
msgstr "[自訂 If 陳述式](#custom-if-statements)"

#: docs/8.x/blade.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/blade.md:block 5 (paragraph)
msgid "Blade is the simple, yet powerful templating engine that is included with Laravel. Unlike some PHP templating engines, Blade does not restrict you from using plain PHP code in your templates. In fact, all Blade templates are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade template files use the `.blade.php` file extension and are typically stored in the `resources/views` directory."
msgstr "Blade 是 Laravel 內建的一個簡單但強大的樣板引擎。與其他 PHP 樣板引擎不同，Blade 不會在樣板中限制你不能使用純 PHP 程式碼。事實上，Blade 樣板會被編譯為純 PHP 程式碼，且在被修改前都會被快取起來。這代表，使用 Blade 並不會給你的網站帶來任何額外的開銷。Blade 樣板檔使用 `.blade.php` 副檔名，且通常放在 `resources/views` 目錄內。"

#: docs/8.x/blade.md:block 6 (paragraph)
msgid "Blade views may be returned from routes or controller using the global `view` helper. Of course, as mentioned in the documentation on [views](/docs/{{version}}/views), data may be passed to the Blade view using the `view` helper's second argument:"
msgstr "Blade 樣板可以在路由或 Controller 內通過 `view` 全域輔助函式來回傳。當然，就像在 [View](/docs/{{version}}/views) 說明文件內講的一樣，可以使用 `view` 輔助函式的第二個引數來將資料傳給 Blade View："

#: docs/8.x/blade.md:block 7 (code)
msgid "Route::get('/', function () {\n"
"    return view('greeting', ['name' => 'Finn']);\n"
"});\n"
msgstr "Route::get('/', function () {\n"
"    return view('greeting', ['name' => 'Finn']);\n"
"});\n"

#: docs/8.x/blade.md:block 8 (quote)
msgid "{tip} Want to take your Blade templates to the next level and build dynamic interfaces with ease? Check out [Laravel Livewire](https://laravel-livewire.com)."
msgstr "{tip} 想要將 Blade 樣板的功能提升到新的境界並輕鬆製作動態使用者界面嗎？請參考看看 [Laravel Livewire](https://laravel-livewire.com)。"

#: docs/8.x/blade.md:block 10 (header)
msgid "Displaying Data"
msgstr "顯示資料"

#: docs/8.x/blade.md:block 11 (paragraph)
msgid "You may display data that is passed to your Blade views by wrapping the variable in curly braces. For example, given the following route:"
msgstr "可以通過將變數以大括號包裝起來來顯示傳給 Blade View 的資料。舉例來說，假設有下列路由："

#: docs/8.x/blade.md:block 12 (code)
msgid "Route::get('/', function () {\n"
"    return view('welcome', ['name' => 'Samantha']);\n"
"});\n"
msgstr "Route::get('/', function () {\n"
"    return view('welcome', ['name' => 'Samantha']);\n"
"});\n"

#: docs/8.x/blade.md:block 13 (paragraph)
msgid "You may display the contents of the `name` variable like so:"
msgstr "可以像這樣顯示 `name` 變數的內容："

#: docs/8.x/blade.md:block 14 (code)
msgid "Hello, {{ $name }}.\n"
msgstr "Hello, {{ $name }}.\n"

#: docs/8.x/blade.md:block 15 (quote)
msgid "{tip} Blade's `{{ }}` echo statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks."
msgstr "{tip} Blade 的 `{{ }}` echo 陳述式會自動通過 PHP 的 `htmlspecialchars` 函式來防止 XSS 攻擊。"

#: docs/8.x/blade.md:block 16 (paragraph)
msgid "You are not limited to displaying the contents of the variables passed to the view. You may also echo the results of any PHP function. In fact, you can put any PHP code you wish inside of a Blade echo statement:"
msgstr "在 Blade 中不只可以顯示傳進來的變數，還可以 echo 任何 PHP 函式的回傳值。事實上，可以在 Blade 的 echo 陳述式中放入任何的 PHP 程式碼："

#: docs/8.x/blade.md:block 17 (code)
msgid "The current UNIX timestamp is {{ time() }}.\n"
msgstr "現在的 Unix 時戳是 {{ time() }}。\n"

#: docs/8.x/blade.md:block 19 (header)
msgid "HTML Entity Encoding"
msgstr "HTML 實體編碼"

#: docs/8.x/blade.md:block 20 (paragraph)
msgid "By default, Blade (and the Laravel `e` helper) will double encode HTML entities. If you would like to disable double encoding, call the `Blade::withoutDoubleEncoding` method from the `boot` method of your `AppServiceProvider`:"
msgstr "預設情況下，Blade (以及 Laravel 的 `e` 輔助函式) 會重複轉譯 HTML 實體 (Double Encode)。若不像被重複轉譯，請在 `AppServiceProvider` 內的 `boot` 方法中呼叫 `Blade::withoutDoubleEncoding` 方法："

#: docs/8.x/blade.md:block 21 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::withoutDoubleEncoding();\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::withoutDoubleEncoding();\n"
"    }\n"
"}\n"

#: docs/8.x/blade.md:block 23 (header)
msgid "Displaying Unescaped Data"
msgstr "顯示未逸出的資料"

#: docs/8.x/blade.md:block 24 (paragraph)
msgid "By default, Blade `{{ }}` statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks. If you do not want your data to be escaped, you may use the following syntax:"
msgstr "預設情況下，Blade 的 `{{ }}` 陳述式會自動通過 PHP 的 `htmlspecialchars` 函式來防止 XSS 攻擊。若不想要逸出資料，可以使用下列語法："

#: docs/8.x/blade.md:block 25 (code)
msgid "Hello, {!! $name !!}.\n"
msgstr "Hello, {!! $name !!}.\n"

#: docs/8.x/blade.md:block 26 (quote)
msgid "{note} Be very careful when echoing content that is supplied by users of your application. You should typically use the escaped, double curly brace syntax to prevent XSS attacks when displaying user supplied data."
msgstr "{note} 在輸出使用者提供的資料時，請格外小心。平常在顯示使用者提供的資料時應該要使用經過逸出的雙大括號語法來防止 XSS 攻擊。"

#: docs/8.x/blade.md:block 28 (header)
msgid "Blade & JavaScript Frameworks"
msgstr "Blade 與 JavaScript 框架"

#: docs/8.x/blade.md:block 29 (paragraph)
msgid "Since many JavaScript frameworks also use \"curly\" braces to indicate a given expression should be displayed in the browser, you may use the `@` symbol to inform the Blade rendering engine an expression should remain untouched. For example:"
msgstr "由於許多 JavaScript 框架都使用「大括號」來判斷給定的運算式應顯示在瀏覽器上，因此可以使用 `@` 符號來告訴 Blade 轉譯引擎不應修改該運算式。如："

#: docs/8.x/blade.md:block 30 (code)
msgid "<h1>Laravel</h1>\n\n"
"Hello, @{{ name }}.\n"
msgstr "<h1>Laravel</h1>\n\n"
"Hello, @{{ name }}.\n"

#: docs/8.x/blade.md:block 31 (paragraph)
msgid "In this example, the `@` symbol will be removed by Blade; however, `{{ name }}` expression will remain untouched by the Blade engine, allowing it to be rendered by your JavaScript framework."
msgstr "在這個例子中，Blade 會將 `@` 符號逸出。而 `{{ name }}` 運算式則不會被 Blade 引擎處理，這樣一來便可讓 JavaScript 框架進行轉譯。"

#: docs/8.x/blade.md:block 32 (paragraph)
msgid "The `@` symbol may also be used to escape Blade directives:"
msgstr "`@` 符號也可用來逸出 Blade 指示詞："

#: docs/8.x/blade.md:block 33 (code)
msgid "{{-- Blade template --}}\n"
"@@if()\n\n"
"<!-- HTML output -->\n"
"@if()\n"
msgstr "{{-- Blade 樣板 --}}\n"
"@@if()\n\n"
"<!-- HTML 輸出 -->\n"
"@if()\n"

#: docs/8.x/blade.md:block 35 (header)
msgid "Rendering JSON"
msgstr "轉譯 JSON"

#: docs/8.x/blade.md:block 36 (paragraph)
msgid "Sometimes you may pass an array to your view with the intention of rendering it as JSON in order to initialize a JavaScript variable. For example:"
msgstr "有時候將陣列傳進 View 是為了將其轉譯為 JSON 來初始化 JavaScript 變數。如："

#: docs/8.x/blade.md:block 37 (code)
msgid "<script>\n"
"    var app = <?php echo json_encode($array); ?>;\n"
"</script>\n"
msgstr "<script>\n"
"    var app = <?php echo json_encode($array); ?>;\n"
"</script>\n"

#: docs/8.x/blade.md:block 38 (paragraph)
msgid "However, instead of manually calling `json_encode`, you may use the `Illuminate\\Support\\Js::from` method directive. The `from` method accepts the same arguments as PHP's `json_encode` function; however, it will ensure that the resulting JSON is properly escaped for inclusion within HTML quotes. The `from` method will return a string `JSON.parse` JavaScript statement that will convert the given object or array into a valid JavaScript object:"
msgstr "不過，比起手動呼叫 `json_encode`，我們應使用 `Illuminate\\Support\\Js::from` 方法指示詞。`from` 方法接受的引數與 PHP 的 `json_encode` 函式相同；不過，`from` 方法會確保即使時在 HTML 引號內，也能正確逸出 JSON。`from` 方法會回傳一個 `JSON.parse` JavaScript 陳述式字串，該陳述式會將給定的物件或陣列轉換為有效的 JavaScript 物件："

#: docs/8.x/blade.md:block 39 (code)
msgid "<script>\n"
"    var app = {{ Illuminate\\Support\\Js::from($array) }};\n"
"</script>\n"
msgstr "<script>\n"
"    var app = {{ Illuminate\\Support\\Js::from($array) }};\n"
"</script>\n"

#: docs/8.x/blade.md:block 40 (paragraph)
msgid "The latest versions of the Laravel application skeleton include a `Js` facade, which provides convenient access to this functionality within your Blade templates:"
msgstr "最新版本的 Laravel 專案 Skeleton 包含了一個 `Js` Facade。使用這個 Facade 就能方便地在 Blade 樣板中存取這個功能："

#: docs/8.x/blade.md:block 41 (code)
msgid "<script>\n"
"    var app = {{ Js::from($array) }};\n"
"</script>\n"
msgstr "<script>\n"
"    var app = {{ Js::from($array) }};\n"
"</script>\n"

#: docs/8.x/blade.md:block 42 (quote)
msgid "{note} You should only use the `Js::from` method to render existing variables as JSON. The Blade templating is based on regular expressions and attempts to pass a complex expression to the directive may cause unexpected failures."
msgstr "{note} 請只在轉譯現有變數為 JSON 時使用 `Js::from` 方法。Blade 樣板引擎是是基於正規標示式實作的，若將複雜的陳述式傳給指示詞可能會導致未預期的錯誤。"

#: docs/8.x/blade.md:block 44 (header)
msgid "The `@verbatim` Directive"
msgstr "`@verbatim` 指示詞"

#: docs/8.x/blade.md:block 45 (paragraph)
msgid "If you are displaying JavaScript variables in a large portion of your template, you may wrap the HTML in the `@verbatim` directive so that you do not have to prefix each Blade echo statement with an `@` symbol:"
msgstr "若在樣板中顯示了很多的 JavaScript 變數，則可以將 HTML 包裝在 `@verbatim` 指示詞內。這樣一來就不需要在每個 Blade 的 echo 陳述式前面加上前置 `@` 符號："

#: docs/8.x/blade.md:block 46 (code)
msgid "@verbatim\n"
"    <div class=\"container\">\n"
"        Hello, {{ name }}.\n"
"    </div>\n"
"@endverbatim\n"
msgstr "@verbatim\n"
"    <div class=\"container\">\n"
"        Hello, {{ name }}.\n"
"    </div>\n"
"@endverbatim\n"

#: docs/8.x/blade.md:block 48 (header)
msgid "Blade Directives"
msgstr "Blade 指示詞"

#: docs/8.x/blade.md:block 49 (paragraph)
msgid "In addition to template inheritance and displaying data, Blade also provides convenient shortcuts for common PHP control structures, such as conditional statements and loops. These shortcuts provide a very clean, terse way of working with PHP control structures while also remaining familiar to their PHP counterparts."
msgstr "除了繼承樣板與顯示資料外，Blade 也提供了常見 PHP 流程控制結構的方便捷徑，如條件陳述式以及迴圈。這些捷徑提供了一種非常乾淨簡介的方式來處理 PHP 流程控制，同時也保持了與 PHP 的相似性。"

#: docs/8.x/blade.md:block 51 (header)
msgid "If Statements"
msgstr "If 陳述式"

#: docs/8.x/blade.md:block 52 (paragraph)
msgid "You may construct `if` statements using the `@if`, `@elseif`, `@else`, and `@endif` directives. These directives function identically to their PHP counterparts:"
msgstr "可以通過 `@if`, `@elseif`, `@else` 與 `@endif` 指示詞來架構 `if` 陳述式。這些指示詞的功能與其 PHP 對應的部分相同："

#: docs/8.x/blade.md:block 53 (code)
msgid "@if (count($records) === 1)\n"
"    I have one record!\n"
"@elseif (count($records) > 1)\n"
"    I have multiple records!\n"
"@else\n"
"    I don't have any records!\n"
"@endif\n"
msgstr "@if (count($records) === 1)\n"
"    這裡有 1 筆記錄！\n"
"@elseif (count($records) > 1)\n"
"    這裡有多筆記錄！\n"
"@else\n"
"    這裡沒有任何記錄！\n"
"@endif\n"

#: docs/8.x/blade.md:block 54 (paragraph)
msgid "For convenience, Blade also provides an `@unless` directive:"
msgstr "為了方便起見，Blade 也提供了一個 `@unless` 指示詞："

#: docs/8.x/blade.md:block 55 (code)
msgid "@unless (Auth::check())\n"
"    You are not signed in.\n"
"@endunless\n"
msgstr "@unless (Auth::check())\n"
"    你還沒有登入。\n"
"@endunless\n"

#: docs/8.x/blade.md:block 56 (paragraph)
msgid "In addition to the conditional directives already discussed, the `@isset` and `@empty` directives may be used as convenient shortcuts for their respective PHP functions:"
msgstr "除了已經討論過的條件指示詞外，也可以通過 `@isset` 與 `@empty` 指示詞來作為其對應 PHP 函式的方便捷徑："

#: docs/8.x/blade.md:block 57 (code)
msgid "@isset($records)\n"
"    // $records is defined and is not null...\n"
"@endisset\n\n"
"@empty($records)\n"
"    // $records is \"empty\"...\n"
"@endempty\n"
msgstr "@isset($records)\n"
"    // $records 已定義且不為 null...\n"
"@endisset\n\n"
"@empty($records)\n"
"    // $records 為「空」...\n"
"@endempty\n"

#: docs/8.x/blade.md:block 59 (header)
msgid "Authentication Directives"
msgstr "認證指示詞"

#: docs/8.x/blade.md:block 60 (paragraph)
msgid "The `@auth` and `@guest` directives may be used to quickly determine if the current user is [authenticated](/docs/{{version}}/authentication) or is a guest:"
msgstr "`@auth` 與 `@guest` 指示詞可以用來快速判斷目前的使用者是否[已登入](/docs/{{version}}/authentication)，或是該使用者是否為訪客："

#: docs/8.x/blade.md:block 61 (code)
msgid "@auth\n"
"    // The user is authenticated...\n"
"@endauth\n\n"
"@guest\n"
"    // The user is not authenticated...\n"
"@endguest\n"
msgstr "@auth\n"
"    // 使用者已登入...\n"
"@endauth\n\n"
"@guest\n"
"    // 使用者未登入...\n"
"@endguest\n"

#: docs/8.x/blade.md:block 62 (paragraph)
msgid "If needed, you may specify the authentication guard that should be checked when using the `@auth` and `@guest` directives:"
msgstr "若有需要，可以在使用 `@auth` 與 `@guest` 指示詞時指定要使用哪個認證 Guard 來做檢查："

#: docs/8.x/blade.md:block 63 (code)
msgid "@auth('admin')\n"
"    // The user is authenticated...\n"
"@endauth\n\n"
"@guest('admin')\n"
"    // The user is not authenticated...\n"
"@endguest\n"
msgstr "@auth('admin')\n"
"    // 使用者已登入...\n"
"@endauth\n\n"
"@guest('admin')\n"
"    // 使用者未登入...\n"
"@endguest\n"

#: docs/8.x/blade.md:block 65 (header)
msgid "Environment Directives"
msgstr "環境指示詞"

#: docs/8.x/blade.md:block 66 (paragraph)
msgid "You may check if the application is running in the production environment using the `@production` directive:"
msgstr "可以通過 `@production` 指示詞來判斷網站目前是否在正式環境上執行："

#: docs/8.x/blade.md:block 67 (code)
msgid "@production\n"
"    // Production specific content...\n"
"@endproduction\n"
msgstr "@production\n"
"    // 只在正式環境上顯示的內容...\n"
"@endproduction\n"

#: docs/8.x/blade.md:block 68 (paragraph)
msgid "Or, you may determine if the application is running in a specific environment using the `@env` directive:"
msgstr "或者，可以通過 `@env` 指示詞來判斷網站是否在特定的環境上執行："

#: docs/8.x/blade.md:block 69 (code)
msgid "@env('staging')\n"
"    // The application is running in \"staging\"...\n"
"@endenv\n\n"
"@env(['staging', 'production'])\n"
"    // The application is running in \"staging\" or \"production\"...\n"
"@endenv\n"
msgstr "@env('staging')\n"
"    // 專案在「staging」環境上執行...\n"
"@endenv\n\n"
"@env(['staging', 'production'])\n"
"    // 專案在「staging」或「production」上執行...\n"
"@endenv\n"

#: docs/8.x/blade.md:block 71 (header)
msgid "Section Directives"
msgstr "段落指示詞"

#: docs/8.x/blade.md:block 72 (paragraph)
msgid "You may determine if a template inheritance section has content using the `@hasSection` directive:"
msgstr "可以通過 `@hasSection` 指示詞來判斷某個樣板繼承段落是否有內容："

#: docs/8.x/blade.md:block 73 (code)
msgid "@hasSection('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @yield('navigation')\n"
"    </div>\n\n"
"    <div class=\"clearfix\"></div>\n"
"@endif\n"
msgstr "@hasSection('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @yield('navigation')\n"
"    </div>\n\n"
"    <div class=\"clearfix\"></div>\n"
"@endif\n"

#: docs/8.x/blade.md:block 74 (paragraph)
msgid "You may use the `sectionMissing` directive to determine if a section does not have content:"
msgstr "可以通過 `sectionMissing` 指示詞來判斷某個段落是否沒有內容："

#: docs/8.x/blade.md:block 75 (code)
msgid "@sectionMissing('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @include('default-navigation')\n"
"    </div>\n"
"@endif\n"
msgstr "@sectionMissing('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @include('default-navigation')\n"
"    </div>\n"
"@endif\n"

#: docs/8.x/blade.md:block 77 (header)
msgid "Switch Statements"
msgstr "Switch 陳述式"

#: docs/8.x/blade.md:block 78 (paragraph)
msgid "Switch statements can be constructed using the `@switch`, `@case`, `@break`, `@default` and `@endswitch` directives:"
msgstr "Switch 陳述式可以通過 `@switch`, `@case`, `@break`, `@default` 與 `@endswitch` 指示詞來架構："

#: docs/8.x/blade.md:block 79 (code)
msgid "@switch($i)\n"
"    @case(1)\n"
"        First case...\n"
"        @break\n\n"
"    @case(2)\n"
"        Second case...\n"
"        @break\n\n"
"    @default\n"
"        Default case...\n"
"@endswitch\n"
msgstr "@switch($i)\n"
"    @case(1)\n"
"        第一個 case...\n"
"        @break\n\n"
"    @case(2)\n"
"        第二個 case...\n"
"        @break\n\n"
"    @default\n"
"        Default case...\n"
"@endswitch\n"

#: docs/8.x/blade.md:block 81 (header)
msgid "Loops"
msgstr "迴圈"

#: docs/8.x/blade.md:block 82 (paragraph)
msgid "In addition to conditional statements, Blade provides simple directives for working with PHP's loop structures. Again, each of these directives functions identically to their PHP counterparts:"
msgstr "除了條件陳述式外，Blade 也提供了能配合 PHP 的迴圈架構一起使用的一些簡單指示詞。同樣地，這些指示詞的功能都與其對應 PHP 的部分相同："

#: docs/8.x/blade.md:block 83 (code)
msgid "@for ($i = 0; $i < 10; $i++)\n"
"    The current value is {{ $i }}\n"
"@endfor\n\n"
"@foreach ($users as $user)\n"
"    <p>This is user {{ $user->id }}</p>\n"
"@endforeach\n\n"
"@forelse ($users as $user)\n"
"    <li>{{ $user->name }}</li>\n"
"@empty\n"
"    <p>No users</p>\n"
"@endforelse\n\n"
"@while (true)\n"
"    <p>I'm looping forever.</p>\n"
"@endwhile\n"
msgstr "@for ($i = 0; $i < 10; $i++)\n"
"    目前值為 {{ $i }}\n"
"@endfor\n\n"
"@foreach ($users as $user)\n"
"    <p>使用者 {{ $user->id }}</p>\n"
"@endforeach\n\n"
"@forelse ($users as $user)\n"
"    <li>{{ $user->name }}</li>\n"
"@empty\n"
"    <p>無使用者</p>\n"
"@endforelse\n\n"
"@while (true)\n"
"    <p>我會無限循環。</p>\n"
"@endwhile\n"

#: docs/8.x/blade.md:block 84 (quote)
msgid "{tip} While iterating through a `foreach` loop, you may use the [loop variable](#the-loop-variable) to gain valuable information about the loop, such as whether you are in the first or last iteration through the loop."
msgstr "{tip} 在使用 `foreach` 迴圈迭代時，可以使用[迴圈變數](#the-loop-variable)來取得有關迴圈的有用資訊，如目前是否在迴圈的第一次或最後一次迭代。"

#: docs/8.x/blade.md:block 85 (paragraph)
msgid "When using loops you may also end the loop or skip the current iteration using the `@continue` and `@break` directives:"
msgstr "在使用迴圈時，也可以通過 `@continue` 與 `@break` 指示詞來結束迴圈或跳過目前迭代："

#: docs/8.x/blade.md:block 86 (code)
msgid "@foreach ($users as $user)\n"
"    @if ($user->type == 1)\n"
"        @continue\n"
"    @endif\n\n"
"    <li>{{ $user->name }}</li>\n\n"
"    @if ($user->number == 5)\n"
"        @break\n"
"    @endif\n"
"@endforeach\n"
msgstr "@foreach ($users as $user)\n"
"    @if ($user->type == 1)\n"
"        @continue\n"
"    @endif\n\n"
"    <li>{{ $user->name }}</li>\n\n"
"    @if ($user->number == 5)\n"
"        @break\n"
"    @endif\n"
"@endforeach\n"

#: docs/8.x/blade.md:block 87 (paragraph)
msgid "You may also include the continuation or break condition within the directive declaration:"
msgstr "也可以在指示詞定義中包含 continue 或 break 的條件："

#: docs/8.x/blade.md:block 88 (code)
msgid "@foreach ($users as $user)\n"
"    @continue($user->type == 1)\n\n"
"    <li>{{ $user->name }}</li>\n\n"
"    @break($user->number == 5)\n"
"@endforeach\n"
msgstr "@foreach ($users as $user)\n"
"    @continue($user->type == 1)\n\n"
"    <li>{{ $user->name }}</li>\n\n"
"    @break($user->number == 5)\n"
"@endforeach\n"

#: docs/8.x/blade.md:block 90 (header)
msgid "The Loop Variable"
msgstr "迴圈變數"

#: docs/8.x/blade.md:block 91 (paragraph)
msgid "While iterating through a `foreach` loop, a `$loop` variable will be available inside of your loop. This variable provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:"
msgstr "在迭代 `foreach` 迴圈時，迴圈內提供了 `$loop` 變數可用。這個變數提供了許多實用的資訊，如目前的迴圈索引，以及本次迭代是否為迴圈的第一次或最後一次迭代："

#: docs/8.x/blade.md:block 92 (code)
msgid "@foreach ($users as $user)\n"
"    @if ($loop->first)\n"
"        This is the first iteration.\n"
"    @endif\n\n"
"    @if ($loop->last)\n"
"        This is the last iteration.\n"
"    @endif\n\n"
"    <p>This is user {{ $user->id }}</p>\n"
"@endforeach\n"
msgstr "@foreach ($users as $user)\n"
"    @if ($loop->first)\n"
"        第一次迭代。\n"
"    @endif\n\n"
"    @if ($loop->last)\n"
"        最後一次迭代。\n"
"    @endif\n\n"
"    <p>使用者 {{ $user->id }}</p>\n"
"@endforeach\n"

#: docs/8.x/blade.md:block 93 (paragraph)
msgid "If you are in a nested loop, you may access the parent loop's `$loop` variable via the `parent` property:"
msgstr "若在巢狀迴圈中，可以通過 `parent` 屬性來存取上層迴圈的 `$loop` 變數："

#: docs/8.x/blade.md:block 94 (code)
msgid "@foreach ($users as $user)\n"
"    @foreach ($user->posts as $post)\n"
"        @if ($loop->parent->first)\n"
"            This is the first iteration of the parent loop.\n"
"        @endif\n"
"    @endforeach\n"
"@endforeach\n"
msgstr "@foreach ($users as $user)\n"
"    @foreach ($user->posts as $post)\n"
"        @if ($loop->parent->first)\n"
"            這是上層迴圈的第一次迭代。\n"
"        @endif\n"
"    @endforeach\n"
"@endforeach\n"

#: docs/8.x/blade.md:block 95 (paragraph)
msgid "The `$loop` variable also contains a variety of other useful properties:"
msgstr "`$loop` 變數也包含了其他各種實用的屬性："

#: docs/8.x/blade.md:block 96 (table)
msgid "Property"
msgstr "屬性"

#: docs/8.x/blade.md:block 96 (table)
msgid "Description"
msgstr "說明"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->index`"
msgstr "`$loop->index`"

#: docs/8.x/blade.md:block 96 (table)
msgid "The index of the current loop iteration (starts at 0)."
msgstr "目前迴圈迭代的索引 (從 0 開始)。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->iteration`"
msgstr "`$loop->iteration`"

#: docs/8.x/blade.md:block 96 (table)
msgid "The current loop iteration (starts at 1)."
msgstr "目前的迴圈迭代 (從 1 開始)。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->remaining`"
msgstr "`$loop->remaining`"

#: docs/8.x/blade.md:block 96 (table)
msgid "The iterations remaining in the loop."
msgstr "迴圈中剩餘的迭代數。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->count`"
msgstr "`$loop->count`"

#: docs/8.x/blade.md:block 96 (table)
msgid "The total number of items in the array being iterated."
msgstr "迭代中陣列內的總項目數。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->first`"
msgstr "`$loop->first`"

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is the first iteration through the loop."
msgstr "目前是否為迴圈的第一次迭代。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->last`"
msgstr "`$loop->last`"

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is the last iteration through the loop."
msgstr "目前是否為迴圈的最後一次迭代。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->even`"
msgstr "`$loop->even`"

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is an even iteration through the loop."
msgstr "目前是否為迴圈的偶數次迭代。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->odd`"
msgstr "`$loop->odd`"

#: docs/8.x/blade.md:block 96 (table)
msgid "Whether this is an odd iteration through the loop."
msgstr "目前是否為迴圈的奇數次迭代。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->depth`"
msgstr "`$loop->depth`"

#: docs/8.x/blade.md:block 96 (table)
msgid "The nesting level of the current loop."
msgstr "目前迴圈的巢狀深度等級。"

#: docs/8.x/blade.md:block 96 (table)
msgid "`$loop->parent`"
msgstr "`$loop->parent`"

#: docs/8.x/blade.md:block 96 (table)
msgid "When in a nested loop, the parent's loop variable."
msgstr "若在巢狀迴圈內，即代表上層的迴圈變數。"

#: docs/8.x/blade.md:block 98 (header)
msgid "Conditional Classes"
msgstr "有條件的 Class"

#: docs/8.x/blade.md:block 99 (paragraph)
msgid "The `@class` directive conditionally compiles a CSS class string. The directive accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr "`@class` 指示詞可以有條件地編譯 CSS class 字串。`@class` 指示詞接受一組包含 class 的陣列，其中，陣列的索引鍵代表欲新增的 class，陣列值則是一個布林運算式。若陣列的元素有數字索引鍵，則該元素一定會被加到轉譯後的 Class 列表上："

#: docs/8.x/blade.md:block 100 (code)
msgid "@php\n"
"    $isActive = false;\n"
"    $hasError = true;\n"
"@endphp\n\n"
"<span @class([\n"
"    'p-4',\n"
"    'font-bold' => $isActive,\n"
"    'text-gray-500' => ! $isActive,\n"
"    'bg-red' => $hasError,\n"
"])></span>\n\n"
"<span class=\"p-4 text-gray-500 bg-red\"></span>\n"
msgstr "@php\n"
"    $isActive = false;\n"
"    $hasError = true;\n"
"@endphp\n\n"
"<span @class([\n"
"    'p-4',\n"
"    'font-bold' => $isActive,\n"
"    'text-gray-500' => ! $isActive,\n"
"    'bg-red' => $hasError,\n"
"])></span>\n\n"
"<span class=\"p-4 text-gray-500 bg-red\"></span>\n"

#: docs/8.x/blade.md:block 102 (header)
msgid "Including Subviews"
msgstr "Include 子 View"

#: docs/8.x/blade.md:block 103 (quote)
msgid "{tip} While you're free to use the `@include` directive, Blade [components](#components) provide similar functionality and offer several benefits over the `@include` directive such as data and attribute binding."
msgstr "{tip} 雖然可以使用 `@include` 指示詞，但 Blade 的[元件](#components)提供了類似的功能，但比起 `@include` 指示詞來說有更多的優勢，如資料與屬性綁定。"

#: docs/8.x/blade.md:block 104 (paragraph)
msgid "Blade's `@include` directive allows you to include a Blade view from within another view. All variables that are available to the parent view will be made available to the included view:"
msgstr "Blade 的 `@include` 指示詞可用來在 Blade View 中包含另一個 View。所有上層 View 中可用的變數在 Include 的 View 當中都保持可用："

#: docs/8.x/blade.md:block 105 (code)
msgid "<div>\n"
"    @include('shared.errors')\n\n"
"    <form>\n"
"        <!-- Form Contents -->\n"
"    </form>\n"
"</div>\n"
msgstr "<div>\n"
"    @include('shared.errors')\n\n"
"    <form>\n"
"        <!-- 表單內容 -->\n"
"    </form>\n"
"</div>\n"

#: docs/8.x/blade.md:block 106 (paragraph)
msgid "Even though the included view will inherit all data available in the parent view, you may also pass an array of additional data that should be made available to the included view:"
msgstr "雖然 Include 的 View 會繼承其上層 View 中所有的資料，但也可以將要在包含的 View 中使用的資料作為陣列傳入："

#: docs/8.x/blade.md:block 107 (code)
msgid "@include('view.name', ['status' => 'complete'])\n"
msgstr "@include('view.name', ['status' => 'complete'])\n"

#: docs/8.x/blade.md:block 108 (paragraph)
msgid "If you attempt to `@include` a view which does not exist, Laravel will throw an error. If you would like to include a view that may or may not be present, you should use the `@includeIf` directive:"
msgstr "若嘗試 `@include` 一個不存在的 View，Laravel 會擲回錯誤。若想 Include 一個可能不存在的 View，應使用 `@includeIf` 指示詞："

#: docs/8.x/blade.md:block 109 (code)
msgid "@includeIf('view.name', ['status' => 'complete'])\n"
msgstr "@includeIf('view.name', ['status' => 'complete'])\n"

#: docs/8.x/blade.md:block 110 (paragraph)
msgid "If you would like to `@include` a view if a given boolean expression evaluates to `true` or `false`, you may use the `@includeWhen` and `@includeUnless` directives:"
msgstr "若想在某個布林表達式取值為 `true` 或 `false` 的時候 `@include` 一個 View，則可以使用 `@includeWhen` 與 `@includeUnless` 指示詞："

#: docs/8.x/blade.md:block 111 (code)
msgid "@includeWhen($boolean, 'view.name', ['status' => 'complete'])\n\n"
"@includeUnless($boolean, 'view.name', ['status' => 'complete'])\n"
msgstr "@includeWhen($boolean, 'view.name', ['status' => 'complete'])\n\n"
"@includeUnless($boolean, 'view.name', ['status' => 'complete'])\n"

#: docs/8.x/blade.md:block 112 (paragraph)
msgid "To include the first view that exists from a given array of views, you may use the `includeFirst` directive:"
msgstr "若要在某個包含了一些 View 的陣列中 Include 第一個存在的 View，可以使用 `includeFirst` 指示詞："

#: docs/8.x/blade.md:block 113 (code)
msgid "@includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])\n"
msgstr "@includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])\n"

#: docs/8.x/blade.md:block 114 (quote)
msgid "{note} You should avoid using the `__DIR__` and `__FILE__` constants in your Blade views, since they will refer to the location of the cached, compiled view."
msgstr "{note} 應避免在 Blade View 中使用 `__DIR__` 與 `__FILE__` 常數，因為這些常數會參照到經過快取與編譯過的 View。"

#: docs/8.x/blade.md:block 116 (header)
msgid "Rendering Views For Collections"
msgstr "為 Collection 轉譯 View"

#: docs/8.x/blade.md:block 117 (paragraph)
msgid "You may combine loops and includes into one line with Blade's `@each` directive:"
msgstr "可以通過 Blade 的 `@each` 指示詞來將迴圈與 Include 組合成一行："

#: docs/8.x/blade.md:block 118 (code)
msgid "@each('view.name', $jobs, 'job')\n"
msgstr "@each('view.name', $jobs, 'job')\n"

#: docs/8.x/blade.md:block 119 (paragraph)
msgid "The `@each` directive's first argument is the view to render for each element in the array or collection. The second argument is the array or collection you wish to iterate over, while the third argument is the variable name that will be assigned to the current iteration within the view. So, for example, if you are iterating over an array of `jobs`, typically you will want to access each job as a `job` variable within the view. The array key for the current iteration will be available as the `key` variable within the view."
msgstr "`@each` 指示詞的第一個引數是用來轉譯陣列或 Collection 中各個元素的 View。第二個引數則為要迭代的陣列或 Collection，而第三個引數則為要在 View 中被指派目前迭代的變數名稱。因此，舉例來說，若要迭代一個 `jobs` 陣列，通常我們會想在 View 中通過 `job` 變數來存取各個 Job。目前迭代的陣列索引鍵可在 View 中通過 `key` 存取。"

#: docs/8.x/blade.md:block 120 (paragraph)
msgid "You may also pass a fourth argument to the `@each` directive. This argument determines the view that will be rendered if the given array is empty."
msgstr "也可以傳入第四個引數給 `@each` 指示詞。這個引數用來判斷當給定陣列為空時要被轉譯的 View。"

#: docs/8.x/blade.md:block 121 (code)
msgid "@each('view.name', $jobs, 'job', 'view.empty')\n"
msgstr "@each('view.name', $jobs, 'job', 'view.empty')\n"

#: docs/8.x/blade.md:block 122 (quote)
msgid "{note} Views rendered via `@each` do not inherit the variables from the parent view. If the child view requires these variables, you should use the `@foreach` and `@include` directives instead."
msgstr "{note} 通過 `@each` 所轉譯的 View 不會繼承其上層 View 的變數。若子 View 有需要這些變數，應使用 `@foreach` 與 `@include` 指示詞來代替。"

#: docs/8.x/blade.md:block 124 (header)
msgid "The `@once` Directive"
msgstr "`@once` 指示詞"

#: docs/8.x/blade.md:block 125 (paragraph)
msgid "The `@once` directive allows you to define a portion of the template that will only be evaluated once per rendering cycle. This may be useful for pushing a given piece of JavaScript into the page's header using [stacks](#stacks). For example, if you are rendering a given [component](#components) within a loop, you may wish to only push the JavaScript to the header the first time the component is rendered:"
msgstr "`@once` 指示詞可以用來定義讓某部分的樣板在每個轉譯週期內只被轉譯一次。通常適用於想讓某部分的 JavaScript 的通過[堆疊](#stacks) Push 的頁面頭部時。舉例來說，若想在迴圈中轉譯某個給定的[元素](#components)，可能會只想在第一次轉譯的時候將 JavaScript Push 到頭部："

#: docs/8.x/blade.md:block 126 (code)
msgid "@once\n"
"    @push('scripts')\n"
"        <script>\n"
"            // Your custom JavaScript...\n"
"        </script>\n"
"    @endpush\n"
"@endonce\n"
msgstr "@once\n"
"    @push('scripts')\n"
"        <script>\n"
"            // 自訂 JavaScript...\n"
"        </script>\n"
"    @endpush\n"
"@endonce\n"

#: docs/8.x/blade.md:block 128 (header)
msgid "Raw PHP"
msgstr "原始 PHP"

#: docs/8.x/blade.md:block 129 (paragraph)
msgid "In some situations, it's useful to embed PHP code into your views. You can use the Blade `@php` directive to execute a block of plain PHP within your template:"
msgstr "在某些情況下，可能需要將 PHP 程式碼嵌入到 View 中。可以使用 Blade 的 `@php` 指示詞來在樣板中執行某一區塊的純 PHP："

#: docs/8.x/blade.md:block 130 (code)
msgid "@php\n"
"    $counter = 1;\n"
"@endphp\n"
msgstr "@php\n"
"    $counter = 1;\n"
"@endphp\n"

#: docs/8.x/blade.md:block 132 (header)
msgid "Comments"
msgstr "註解"

#: docs/8.x/blade.md:block 133 (paragraph)
msgid "Blade also allows you to define comments in your views. However, unlike HTML comments, Blade comments are not included in the HTML returned by your application:"
msgstr "在 Blade 中，我們也可以在 View 中定義註解。不過，與 HTML 註解不同，Blade 的註解不會包含在網站所回傳的 HTML 中："

#: docs/8.x/blade.md:block 134 (code)
msgid "{{-- This comment will not be present in the rendered HTML --}}\n"
msgstr "{{-- 這條註解將不會出現在轉譯完的 HTML 中 --}}\n"

#: docs/8.x/blade.md:block 136 (header)
msgid "Components"
msgstr "元件"

#: docs/8.x/blade.md:block 137 (paragraph)
msgid "Components and slots provide similar benefits to sections, layouts, and includes; however, some may find the mental model of components and slots easier to understand. There are two approaches to writing components: class based components and anonymous components."
msgstr "元件與 Slot 提供了與 Section, Layout 與 Include 類似的功能。不過，有些人可能會覺得元件跟 Slot 比較好懂。撰寫元件有兩種方法：一種是基於類別的元件，另一種則是匿名元件。"

#: docs/8.x/blade.md:block 138 (paragraph)
msgid "To create a class based component, you may use the `make:component` Artisan command. To illustrate how to use components, we will create a simple `Alert` component. The `make:component` command will place the component in the `App\\View\\Components` directory:"
msgstr "若要建立基於類別的元件，可以使用 `make:component` Artisan 指令。為了解釋如何使用元件，我們將會建立一個簡單的 `Alert` 元件。`make:component` 指令會將元件放在 `app\\View\\Components` 目錄中："

#: docs/8.x/blade.md:block 139 (code)
msgid "php artisan make:component Alert\n"
msgstr "php artisan make:component Alert\n"

#: docs/8.x/blade.md:block 140 (paragraph)
msgid "The `make:component` command will also create a view template for the component. The view will be placed in the `resources/views/components` directory. When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory, so no further component registration is typically required."
msgstr "`make:component` 指令也會為元件建立一個 View 樣板。這個樣板會被放在 `resources/views/components` 目錄內。當在為專案撰寫元件時，元件會在 `app/View/Components` 與 `resources/views/components` 目錄中被 Auto Discover (自動偵測)，因此不需要進一步註冊元件。"

#: docs/8.x/blade.md:block 141 (paragraph)
msgid "You may also create components within subdirectories:"
msgstr "也可以在子資料夾內建立元件："

#: docs/8.x/blade.md:block 142 (code)
msgid "php artisan make:component Forms/Input\n"
msgstr "php artisan make:component Forms/Input\n"

#: docs/8.x/blade.md:block 143 (paragraph)
msgid "The command above will create an `Input` component in the `App\\View\\Components\\Forms` directory and the view will be placed in the `resources/views/components/forms` directory."
msgstr "上述指令會在 `App\\View\\Components\\Forms` 目錄內建立一個 `Input` 元件，而 View 會被放在 `resources/views/components/forms` 目錄內。"

#: docs/8.x/blade.md:block 145 (header)
msgid "Manually Registering Package Components"
msgstr "手動註冊套件元件"

#: docs/8.x/blade.md:block 146 (paragraph)
msgid "When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory."
msgstr "在為專案撰寫元件時，元件會在 `app/View/Components` 與 `resources/views/components` 目錄下被 Auto Discover (自動偵測)。"

#: docs/8.x/blade.md:block 147 (paragraph)
msgid "However, if you are building a package that utilizes Blade components, you will need to manually register your component class and its HTML tag alias. You should typically register your components in the `boot` method of your package's service provider:"
msgstr "不過，若想製作使用 Blade 元件的套件，則需要手動註冊元件類別與其 HTML 標籤別名。通常，應在套件的 Service Provider 內的 `boot` 方法中註冊你的元件："

#: docs/8.x/blade.md:block 148 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', Alert::class);\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', Alert::class);\n"
"}\n"

#: docs/8.x/blade.md:block 149 (paragraph)
msgid "Once your component has been registered, it may be rendered using its tag alias:"
msgstr "註冊好元件後，便可使用其標籤別名來轉譯："

#: docs/8.x/blade.md:block 150 (code)
msgid "<x-package-alert/>\n"
msgstr "<x-package-alert/>\n"

#: docs/8.x/blade.md:block 151 (paragraph)
msgid "Alternatively, you may use the `componentNamespace` method to autoload component classes by convention. For example, a `Nightshade` package might have `Calendar` and `ColorPicker` components that reside within the `Package\\Views\\Components` namespace:"
msgstr "或者，也可以使用 `componentNamespace` 方法來依照慣例自動載入元件類別。舉例來說，`Nightshade` 套件可能包含了放在 `Package\\Views\\Components` Namespace 下的 `Calendar` 與 `ColorPicker` 元件："

#: docs/8.x/blade.md:block 152 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"}\n"

#: docs/8.x/blade.md:block 153 (paragraph)
msgid "This will allow the usage of package components by their vendor namespace using the `package-name::` syntax:"
msgstr "這樣依賴可以讓套件元件通過其 Vendor Namespace 來使用 `package-name::` 語法："

#: docs/8.x/blade.md:block 154 (code)
msgid "<x-nightshade::calendar />\n"
"<x-nightshade::color-picker />\n"
msgstr "<x-nightshade::calendar />\n"
"<x-nightshade::color-picker />\n"

#: docs/8.x/blade.md:block 155 (paragraph)
msgid "Blade will automatically detect the class that's linked to this component by pascal-casing the component name. Subdirectories are also supported using \"dot\" notation."
msgstr "Blade 會通過將元件名稱轉為 Pascal 命名法 (pascal-case) 來自動偵測與這個元件關連的類別。也可以使用「點」語法來支援子目錄。"

#: docs/8.x/blade.md:block 157 (header)
msgid "Rendering Components"
msgstr "轉譯元件"

#: docs/8.x/blade.md:block 158 (paragraph)
msgid "To display a component, you may use a Blade component tag within one of your Blade templates. Blade component tags start with the string `x-` followed by the kebab case name of the component class:"
msgstr "若要顯示元件，可以在 Blade 樣板中使用 Blade 元件的標籤。Blade 元件標籤以 `x-` 開頭，並接上以 Kebab Case 命名法命名的元素類別："

#: docs/8.x/blade.md:block 159 (code)
msgid "<x-alert/>\n\n"
"<x-user-profile/>\n"
msgstr "<x-alert/>\n\n"
"<x-user-profile/>\n"

#: docs/8.x/blade.md:block 160 (paragraph)
msgid "If the component class is nested deeper within the `App\\View\\Components` directory, you may use the `.` character to indicate directory nesting. For example, if we assume a component is located at `App\\View\\Components\\Inputs\\Button.php`, we may render it like so:"
msgstr "若元件類別在 `app\\View\\Components` 目錄中嵌套多層，可以使用 `.` 字元來標示巢狀目錄。舉例來說，假設有個位於 `app\\View\\Components\\Inputs\\Button.php` 的元件，我們可以像這樣轉譯該元件："

#: docs/8.x/blade.md:block 161 (code)
msgid "<x-inputs.button/>\n"
msgstr "<x-inputs.button/>\n"

#: docs/8.x/blade.md:block 163 (header)
msgid "Passing Data To Components"
msgstr "將資料傳給元件"

#: docs/8.x/blade.md:block 164 (paragraph)
msgid "You may pass data to Blade components using HTML attributes. Hard-coded, primitive values may be passed to the component using simple HTML attribute strings. PHP expressions and variables should be passed to the component via attributes that use the `:` character as a prefix:"
msgstr "可以使用 HTML 屬性來將資料傳給 Blade 元素。硬式編碼或原生值可以使用簡單的 HTML 屬性字串來傳給元素。PHP 表達式與變數應使用以 `:` 字元作為前綴的屬性來傳遞："

#: docs/8.x/blade.md:block 165 (code)
msgid "<x-alert type=\"error\" :message=\"$message\"/>\n"
msgstr "<x-alert type=\"error\" :message=\"$message\"/>\n"

#: docs/8.x/blade.md:block 166 (paragraph)
msgid "You should define the component's required data in its class constructor. All public properties on a component will automatically be made available to the component's view. It is not necessary to pass the data to the view from the component's `render` method:"
msgstr "可以在元件的類別建構函式中定義元件所需的資料。元件中所有 Public 的屬性都會自動在元件的 View 中可用。不需要在元件的 `render` 方法中將這些資料傳給 View："

#: docs/8.x/blade.md:block 167 (code)
msgid "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n\n"
"    /**\n"
"     * The alert message.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $message;\n\n"
"    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  string  $type\n"
"     * @param  string  $message\n"
"     * @return void\n"
"     */\n"
"    public function __construct($type, $message)\n"
"    {\n"
"        $this->type = $type;\n"
"        $this->message = $message;\n"
"    }\n\n"
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return view('components.alert');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n\n"
"    /**\n"
"     * The alert message.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $message;\n\n"
"    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  string  $type\n"
"     * @param  string  $message\n"
"     * @return void\n"
"     */\n"
"    public function __construct($type, $message)\n"
"    {\n"
"        $this->type = $type;\n"
"        $this->message = $message;\n"
"    }\n\n"
"    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return view('components.alert');\n"
"    }\n"
"}\n"

#: docs/8.x/blade.md:block 168 (paragraph)
msgid "When your component is rendered, you may display the contents of your component's public variables by echoing the variables by name:"
msgstr "元件在進行轉譯時，可以通過 Echo 變數名稱來顯示元件的公用變數："

#: docs/8.x/blade.md:block 169 (code)
msgid "<div class=\"alert alert-{{ $type }}\">\n"
"    {{ $message }}\n"
"</div>\n"
msgstr "<div class=\"alert alert-{{ $type }}\">\n"
"    {{ $message }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 171 (header)
msgid "Casing"
msgstr "大小寫"

#: docs/8.x/blade.md:block 172 (paragraph)
msgid "Component constructor arguments should be specified using `camelCase`, while `kebab-case` should be used when referencing the argument names in your HTML attributes. For example, given the following component constructor:"
msgstr "元件建構函式中的引數應以 `camelCase` 來指定，而在 HTML 屬性中參照其引數名稱時應使用 `kebab-case`。舉例來說，假設有下列元件建構函式："

#: docs/8.x/blade.md:block 173 (code)
msgid "/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  string  $alertType\n"
" * @return void\n"
" */\n"
"public function __construct($alertType)\n"
"{\n"
"    $this->alertType = $alertType;\n"
"}\n"
msgstr "/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  string  $alertType\n"
" * @return void\n"
" */\n"
"public function __construct($alertType)\n"
"{\n"
"    $this->alertType = $alertType;\n"
"}\n"

#: docs/8.x/blade.md:block 174 (paragraph)
msgid "The `$alertType` argument may be provided to the component like so:"
msgstr "可以像這樣將 `$alertType` 引數提供給元件："

#: docs/8.x/blade.md:block 175 (code)
msgid "<x-alert alert-type=\"danger\" />\n"
msgstr "<x-alert alert-type=\"danger\" />\n"

#: docs/8.x/blade.md:block 177 (header)
msgid "Escaping Attribute Rendering"
msgstr "逸出屬性轉譯"

#: docs/8.x/blade.md:block 178 (paragraph)
msgid "Since some JavaScript frameworks such as Alpine.js also use colon-prefixed attributes, you may use a double colon (`::`) prefix to inform Blade that the attribute is not a PHP expression. For example, given the following component:"
msgstr "由於有些像 Alpine.js 的 JavaScript 框架也使用分號前綴的屬性，因此可以在 Blade 中使用雙分號（`::`）來提示 Blade 其屬性並非 PHP 運算式。舉例來說，假設有下列元件："

#: docs/8.x/blade.md:block 179 (code)
msgid "<x-button ::class=\"{ danger: isDeleting }\">\n"
"    Submit\n"
"</x-button>\n"
msgstr "<x-button ::class=\"{ danger: isDeleting }\">\n"
"    送出\n"
"</x-button>\n"

#: docs/8.x/blade.md:block 180 (paragraph)
msgid "The following HTML will be rendered by Blade:"
msgstr "Blade 會轉譯為下列 HTML："

#: docs/8.x/blade.md:block 181 (code)
msgid "<button :class=\"{ danger: isDeleting }\">\n"
"    Submit\n"
"</button>\n"
msgstr "<button :class=\"{ danger: isDeleting }\">\n"
"    送出\n"
"</button>\n"

#: docs/8.x/blade.md:block 183 (header)
msgid "Component Methods"
msgstr "元件方法"

#: docs/8.x/blade.md:block 184 (paragraph)
msgid "In addition to public variables being available to your component template, any public methods on the component may be invoked. For example, imagine a component that has an `isSelected` method:"
msgstr "除了公用變數可以在元件樣板中使用以外，元件內的任何公用方法也可以被叫用。舉例來說，假設某個有 `isSelected` 方法的元件："

#: docs/8.x/blade.md:block 185 (code)
msgid "/**\n"
" * Determine if the given option is the currently selected option.\n"
" *\n"
" * @param  string  $option\n"
" * @return bool\n"
" */\n"
"public function isSelected($option)\n"
"{\n"
"    return $option === $this->selected;\n"
"}\n"
msgstr "/**\n"
" * Determine if the given option is the currently selected option.\n"
" *\n"
" * @param  string  $option\n"
" * @return bool\n"
" */\n"
"public function isSelected($option)\n"
"{\n"
"    return $option === $this->selected;\n"
"}\n"

#: docs/8.x/blade.md:block 186 (paragraph)
msgid "You may execute this method from your component template by invoking the variable matching the name of the method:"
msgstr "可以在元件樣板中通過叫用與方法名稱相同的變數來執行此方法："

#: docs/8.x/blade.md:block 187 (code)
msgid "<option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n"
"    {{ $label }}\n"
"</option>\n"
msgstr "<option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n"
"    {{ $label }}\n"
"</option>\n"

#: docs/8.x/blade.md:block 189 (header)
msgid "Accessing Attributes & Slots Within Component Classes"
msgstr "在元件類別中存取屬性與 Slot"

#: docs/8.x/blade.md:block 190 (paragraph)
msgid "Blade components also allow you to access the component name, attributes, and slot inside the class's render method. However, in order to access this data, you should return a closure from your component's `render` method. The closure will receive a `$data` array as its only argument. This array will contain several elements that provide information about the component:"
msgstr "Blade 元件也允許在類別的 `render` 方法中存取元素名稱、屬性、以及 Slot。不過，若要存取這些資料，就必須在元件 `render` 方法中回傳一個閉包。這個閉包會收到 `$data` 陣列作為其唯一的引數。該陣列將包含多個提供有關該元件資訊的元素："

#: docs/8.x/blade.md:block 191 (code)
msgid "/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return function (array $data) {\n"
"        // $data['componentName'];\n"
"        // $data['attributes'];\n"
"        // $data['slot'];\n\n"
"        return '<div>Components content</div>';\n"
"    };\n"
"}\n"
msgstr "/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return function (array $data) {\n"
"        // $data['componentName'];\n"
"        // $data['attributes'];\n"
"        // $data['slot'];\n\n"
"        return '<div>Components content</div>';\n"
"    };\n"
"}\n"

#: docs/8.x/blade.md:block 192 (paragraph)
msgid "The `componentName` is equal to the name used in the HTML tag after the `x-` prefix. So `<x-alert />`'s `componentName` will be `alert`. The `attributes` element will contain all of the attributes that were present on the HTML tag. The `slot` element is an `Illuminate\\Support\\HtmlString` instance with the contents of the component's slot."
msgstr "`componentName` 與 HTML Tag 的 `x-` 前綴之後所使用的名稱相同。因此 `<x-alert />` 的 `componentName` 會是 `alert`。`attributes` 元素會包含出現在 HTML 標籤上的所有屬性。`slot` 元素是一個 `Illuminate\\Support\\HtmlString` 實體，其中包含了該元件的 Slot 內容。"

#: docs/8.x/blade.md:block 193 (paragraph)
msgid "The closure should return a string. If the returned string corresponds to an existing view, that view will be rendered; otherwise, the returned string will be evaluated as an inline Blade view."
msgstr "這個閉包應回傳字串。若該閉包回傳的字串為一個現有的 View，則會轉譯該 View。否則，回傳的字串將被轉換為內嵌的 Blade View。"

#: docs/8.x/blade.md:block 195 (header)
msgid "Additional Dependencies"
msgstr "額外的相依項"

#: docs/8.x/blade.md:block 196 (paragraph)
msgid "If your component requires dependencies from Laravel's [service container](/docs/{{version}}/container), you may list them before any of the component's data attributes and they will automatically be injected by the container:"
msgstr "若元件需要從 Laravel 的 [Service Container](/docs/{{version}}/container) 內取得其他相依性，則可以將這些相依性列在所有元素的資料屬性前，Container 會自動插入這些相依性項目："

#: docs/8.x/blade.md:block 197 (code)
msgid "use App\\Services\\AlertCreator\n\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}\n"
msgstr "use App\\Services\\AlertCreator\n\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}\n"

#: docs/8.x/blade.md:block 199 (header)
msgid "Hiding Attributes / Methods"
msgstr "隱藏屬性與方法"

#: docs/8.x/blade.md:block 200 (paragraph)
msgid "If you would like to prevent some public methods or properties from being exposed as variables to your component template, you may add them to an `$except` array property on your component:"
msgstr "若想防止一些公用方法或屬性被作為變數暴露到元件的樣板中，可以將這些項目加到元件的 `$except` 陣列屬性上："

#: docs/8.x/blade.md:block 201 (code)
msgid "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n\n"
"    /**\n"
"     * The properties / methods that should not be exposed to the component template.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = ['type'];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\View\\Components;\n\n"
"use Illuminate\\View\\Component;\n\n"
"class Alert extends Component\n"
"{\n"
"    /**\n"
"     * The alert type.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $type;\n\n"
"    /**\n"
"     * The properties / methods that should not be exposed to the component template.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = ['type'];\n"
"}\n"

#: docs/8.x/blade.md:block 203 (header)
msgid "Component Attributes"
msgstr "元件屬性"

#: docs/8.x/blade.md:block 204 (paragraph)
msgid "We've already examined how to pass data attributes to a component; however, sometimes you may need to specify additional HTML attributes, such as `class`, that are not part of the data required for a component to function. Typically, you want to pass these additional attributes down to the root element of the component template. For example, imagine we want to render an `alert` component like so:"
msgstr "我們已經看到了如何將資料屬性傳遞到元件內。然而，有時候可能會像指定不是元件運作所需的一些額外 HTML 屬性，如 `class`。通常來說，我們會像將這些額外的屬性向下傳遞到元件樣板中的根元素。舉例來說，假設我們想要像這樣轉譯一個 `alert` 元件："

#: docs/8.x/blade.md:block 205 (code)
msgid "<x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n"
msgstr "<x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n"

#: docs/8.x/blade.md:block 206 (paragraph)
msgid "All of the attributes that are not part of the component's constructor will automatically be added to the component's \"attribute bag\". This attribute bag is automatically made available to the component via the `$attributes` variable. All of the attributes may be rendered within the component by echoing this variable:"
msgstr "所有不在元件建構函式內的屬性都會被加到元件的「屬性包 (Attribute Bag)」內。這個屬性包會自動通過一個 `$attributes` 變數在元件內可用。可以通過 echo 這個變數來讓所有的屬性在元件內被轉譯："

#: docs/8.x/blade.md:block 207 (code)
msgid "<div {{ $attributes }}>\n"
"    <!-- Component content -->\n"
"</div>\n"
msgstr "<div {{ $attributes }}>\n"
"    <!-- 元件內容 -->\n"
"</div>\n"

#: docs/8.x/blade.md:block 208 (quote)
msgid "{note} Using directives such as `@env` within component tags is not supported at this time. For example, `<x-alert :live=\"@env('production')\"/>` will not be compiled."
msgstr "{note} 目前不支援在元件標籤內使用如 `@env` 的指示詞。舉例來說，`<x-alert :live=\"@env('production')\"/>` 將不會被編譯。"

#: docs/8.x/blade.md:block 210 (header)
msgid "Default / Merged Attributes"
msgstr "預設與合併屬性"

#: docs/8.x/blade.md:block 211 (paragraph)
msgid "Sometimes you may need to specify default values for attributes or merge additional values into some of the component's attributes. To accomplish this, you may use the attribute bag's `merge` method. This method is particularly useful for defining a set of default CSS classes that should always be applied to a component:"
msgstr "有時候我們可能需要為屬性指定預設值，或是將額外的值合併到某些元件的屬性內。為此，可以使用屬性包的 `merge` 方法。這個方法特別適合用在如定義一系列永遠會被套用到元件上的預設 CSS："

#: docs/8.x/blade.md:block 212 (code)
msgid "<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>\n"
msgstr "<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 213 (paragraph)
msgid "If we assume this component is utilized like so:"
msgstr "若我們假設這個元件會被這樣使用："

#: docs/8.x/blade.md:block 214 (code)
msgid "<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n"
msgstr "<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n"

#: docs/8.x/blade.md:block 215 (paragraph)
msgid "The final, rendered HTML of the component will appear like the following:"
msgstr "則屬性最後經過轉譯的 HTML 會長這樣："

#: docs/8.x/blade.md:block 216 (code)
msgid "<div class=\"alert alert-error mb-4\">\n"
"    <!-- Contents of the $message variable -->\n"
"</div>\n"
msgstr "<div class=\"alert alert-error mb-4\">\n"
"    <!-- $message 變數的內容 -->\n"
"</div>\n"

#: docs/8.x/blade.md:block 218 (header)
msgid "Conditionally Merge Classes"
msgstr "有條件地合併 Class"

#: docs/8.x/blade.md:block 219 (paragraph)
msgid "Sometimes you may wish to merge classes if a given condition is `true`. You can accomplish this via the `class` method, which accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr "有時候我們可能會依照給定條件式的結果是否為 `true` 來決定要不要合併 Class。可以通過 `class` 方法來達成，該方法接受一段含有 Class 的陣列。陣列的索引鍵包含了要新增的 Class，而陣列的值則為布林運算式。若陣列的元素有數字索引鍵，則該元素一定會被加到轉譯後的 Class 列表上："

#: docs/8.x/blade.md:block 220 (code)
msgid "<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n"
"    {{ $message }}\n"
"</div>\n"
msgstr "<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n"
"    {{ $message }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 221 (paragraph)
msgid "If you need to merge other attributes onto your component, you can chain the `merge` method onto the `class` method:"
msgstr "若像將其他屬性合併到元件上，可以將 `merge` 方法串接到 `class` 方法後："

#: docs/8.x/blade.md:block 222 (code)
msgid "<button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>\n"
msgstr "<button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>\n"

#: docs/8.x/blade.md:block 223 (quote)
msgid "{tip} If you need to conditionally compile classes on other HTML elements that shouldn't receive merged attributes, you can use the [`@class` directive](#conditional-classes)."
msgstr "{tip} 若不想讓要套用條件式編譯 Class 的 HTML 收到經過合併的屬性，請使用 [`@class` 指示詞](#conditional-classes)。"

#: docs/8.x/blade.md:block 225 (header)
msgid "Non-Class Attribute Merging"
msgstr "非 Class 的屬性合併"

#: docs/8.x/blade.md:block 226 (paragraph)
msgid "When merging attributes that are not `class` attributes, the values provided to the `merge` method will be considered the \"default\" values of the attribute. However, unlike the `class` attribute, these attributes will not be merged with injected attribute values. Instead, they will be overwritten. For example, a `button` component's implementation may look like the following:"
msgstr "在合併 `class` 以外的屬性值時，提供給 `merge` 方法的值會被當作是屬性的「預設」值。不過，與 `class` 屬性不同，這些屬性不會跟插入的屬性值合併，而是會被複寫。舉例來說，一個 `button` 元件的實作可能會長這樣："

#: docs/8.x/blade.md:block 227 (code)
msgid "<button {{ $attributes->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>\n"
msgstr "<button {{ $attributes->merge(['type' => 'button']) }}>\n"
"    {{ $slot }}\n"
"</button>\n"

#: docs/8.x/blade.md:block 228 (paragraph)
msgid "To render the button component with a custom `type`, it may be specified when consuming the component. If no type is specified, the `button` type will be used:"
msgstr "若要以自訂 `type` 來轉譯按鈕元素，可以在使用元素時指定。若未指定 Type，則會使用 `button` Type："

#: docs/8.x/blade.md:block 229 (code)
msgid "<x-button type=\"submit\">\n"
"    Submit\n"
"</x-button>\n"
msgstr "<x-button type=\"submit\">\n"
"    送出\n"
"</x-button>\n"

#: docs/8.x/blade.md:block 230 (paragraph)
msgid "The rendered HTML of the `button` component in this example would be:"
msgstr "在這個範例中，`button` 元件轉譯後的 HTML 會是："

#: docs/8.x/blade.md:block 231 (code)
msgid "<button type=\"submit\">\n"
"    Submit\n"
"</button>\n"
msgstr "<button type=\"submit\">\n"
"    送出\n"
"</button>\n"

#: docs/8.x/blade.md:block 232 (paragraph)
msgid "If you would like an attribute other than `class` to have its default value and injected values joined together, you may use the `prepends` method. In this example, the `data-controller` attribute will always begin with `profile-controller` and any additional injected `data-controller` values will be placed after this default value:"
msgstr "若像要讓 `class` 之外的屬性也能將其預設值與插入的值被串在一起，則可以使用 `prepends` 方法。在此例子中，`data-controller` 屬性將總是以 `profile-controller` 開頭，而任何額外插入的 `data-controller` 值都將被放在這個預設值之後："

#: docs/8.x/blade.md:block 233 (code)
msgid "<div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr "<div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>\n"
"    {{ $slot }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 235 (header)
msgid "Retrieving & Filtering Attributes"
msgstr "取得與過濾屬性"

#: docs/8.x/blade.md:block 236 (paragraph)
msgid "You may filter attributes using the `filter` method. This method accepts a closure which should return `true` if you wish to retain the attribute in the attribute bag:"
msgstr "可以使用 `filter` 方法來過濾屬性。該方法接受一個閉包。若希望在屬性包內保留該屬性，則應在該閉包內回傳 `true`："

#: docs/8.x/blade.md:block 237 (code)
msgid "{{ $attributes->filter(fn ($value, $key) => $key == 'foo') }}\n"
msgstr "{{ $attributes->filter(fn ($value, $key) => $key == 'foo') }}\n"

#: docs/8.x/blade.md:block 238 (paragraph)
msgid "For convenience, you may use the `whereStartsWith` method to retrieve all attributes whose keys begin with a given string:"
msgstr "為了方便起見，可以使用 `whereStartsWith` 方法來取得所有索引鍵以給定字串開頭的屬性："

#: docs/8.x/blade.md:block 239 (code)
msgid "{{ $attributes->whereStartsWith('wire:model') }}\n"
msgstr "{{ $attributes->whereStartsWith('wire:model') }}\n"

#: docs/8.x/blade.md:block 240 (paragraph)
msgid "Conversely, the `whereDoesntStartWith` method may be used to exclude all attributes whose keys begin with a given string:"
msgstr "相對的，可以使用 `whereDoesntStartWith` 方法來排除所有索引鍵不以給定字串開頭的屬性："

#: docs/8.x/blade.md:block 241 (code)
msgid "{{ $attributes->whereDoesntStartWith('wire:model') }}\n"
msgstr "{{ $attributes->whereDoesntStartWith('wire:model') }}\n"

#: docs/8.x/blade.md:block 242 (paragraph)
msgid "Using the `first` method, you may render the first attribute in a given attribute bag:"
msgstr "使用 `first` 方法，就可以轉譯給定屬性包中的第一個屬性："

#: docs/8.x/blade.md:block 243 (code)
msgid "{{ $attributes->whereStartsWith('wire:model')->first() }}\n"
msgstr "{{ $attributes->whereStartsWith('wire:model')->first() }}\n"

#: docs/8.x/blade.md:block 244 (paragraph)
msgid "If you would like to check if an attribute is present on the component, you may use the `has` method. This method accepts the attribute name as its only argument and returns a boolean indicating whether or not the attribute is present:"
msgstr "若像檢查某個屬性是否有出現在元件內，可以使用 `has` 方法。這個方法接受一個屬性名稱作為其唯一的一個引數，並且會回傳一個布林值，來代表該屬性是否有出現："

#: docs/8.x/blade.md:block 245 (code)
msgid "@if ($attributes->has('class'))\n"
"    <div>Class attribute is present</div>\n"
"@endif\n"
msgstr "@if ($attributes->has('class'))\n"
"    <div>有該 class 屬性</div>\n"
"@endif\n"

#: docs/8.x/blade.md:block 246 (paragraph)
msgid "You may retrieve a specific attribute's value using the `get` method:"
msgstr "可以通過 `get` 方法來取得某個特定的屬性值："

#: docs/8.x/blade.md:block 247 (code)
msgid "{{ $attributes->get('class') }}\n"
msgstr "{{ $attributes->get('class') }}\n"

#: docs/8.x/blade.md:block 249 (header)
msgid "Reserved Keywords"
msgstr "保留字"

#: docs/8.x/blade.md:block 250 (paragraph)
msgid "By default, some keywords are reserved for Blade's internal use in order to render components. The following keywords cannot be defined as public properties or method names within your components:"
msgstr "預設情況下，Blade 中保留了一些關鍵字來作為內部使用，以用於轉譯元件。下列關鍵字將無法在元件內被定義為公用屬性或屬性名稱："

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`data`"
msgstr "`data`"

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`render`"
msgstr "`render`"

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`resolveView`"
msgstr "`resolveView`"

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`shouldRender`"
msgstr "`shouldRender`"

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`view`"
msgstr "`view`"

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`withAttributes`"
msgstr "`withAttributes`"

#: docs/8.x/blade.md:block 252 (unordered list)
msgid "`withName`"
msgstr "`withName`"

#: docs/8.x/blade.md:block 255 (header)
msgid "Slots"
msgstr "Slot"

#: docs/8.x/blade.md:block 256 (paragraph)
msgid "You will often need to pass additional content to your component via \"slots\". Component slots are rendered by echoing the `$slot` variable. To explore this concept, let's imagine that an `alert` component has the following markup:"
msgstr "我們常常會通過「Slot」來將額外的內容傳到元件內。元件的 Slot 可以通過 Echo `$slot` 變數來進行轉譯。為了進一步探討這個概念，我們來想想有個長得像這樣的 `alert` 元件："

#: docs/8.x/blade.md:block 257 (code)
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 258 (paragraph)
msgid "We may pass content to the `slot` by injecting content into the component:"
msgstr "我們可以通過將內容插入到元件內來把內容傳給 `slot`："

#: docs/8.x/blade.md:block 259 (code)
msgid "<x-alert>\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr "<x-alert>\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"

#: docs/8.x/blade.md:block 260 (paragraph)
msgid "Sometimes a component may need to render multiple different slots in different locations within the component. Let's modify our alert component to allow for the injection of a \"title\" slot:"
msgstr "有時候，元件可能需要在元件中不同位置來轉譯多個不同的 Slot。我們來修改一下 alert 元件，讓這個元件能允許插入「title」Slot："

#: docs/8.x/blade.md:block 261 (code)
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<span class=\"alert-title\">{{ $title }}</span>\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<span class=\"alert-title\">{{ $title }}</span>\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 262 (paragraph)
msgid "You may define the content of the named slot using the `x-slot` tag. Any content not within an explicit `x-slot` tag will be passed to the component in the `$slot` variable:"
msgstr "可以通過 `x-slot` 標籤來定義帶名稱 Slot 的內容。任何沒有明顯放在 `x-slot` 標籤內的內容都會被傳到元素的 `$slot` 變數內："

#: docs/8.x/blade.md:block 263 (code)
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"

#: docs/8.x/blade.md:block 265 (header)
msgid "Scoped Slots"
msgstr "限定範圍的 Slot"

#: docs/8.x/blade.md:block 266 (paragraph)
msgid "If you have used a JavaScript framework such as Vue, you may be familiar with \"scoped slots\", which allow you to access data or methods from the component within your slot. You may achieve similar behavior in Laravel by defining public methods or properties on your component and accessing the component within your slot via the `$component` variable. In this example, we will assume that the `x-alert` component has a public `formatAlert` method defined on its component class:"
msgstr "若讀者使用過如 Vue 之類的 JavaScript 框架，可能有看過「限定區域的 Slot (Scoped Slot)」。這種 Slot 可以讓我們能在 Slot 中從元件內存取資料或方法。在 Laravel 中，可以在元素內定義公用方法或屬性，然後在 Slot 內通過 `$component` 變數來存取元件，就可以達到類似的行為。在這個例子裡，我們會假設 `x-alert` 元件中有一個在元件類別內定義的公用 `formatAlert` 方法："

#: docs/8.x/blade.md:block 267 (code)
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"

#: docs/8.x/blade.md:block 269 (header)
msgid "Slot Attributes"
msgstr "Slot 屬性"

#: docs/8.x/blade.md:block 270 (paragraph)
msgid "Like Blade components, you may assign additional [attributes](#component-attributes) to slots such as CSS class names:"
msgstr "與 Blade 元件類似，我們可以將一些如 CSS Class 名稱等額外的[屬性](#component-attributes)指派給 Slot："

#: docs/8.x/blade.md:block 271 (code)
msgid "<x-card class=\"shadow-sm\">\n"
"    <x-slot name=\"heading\" class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n\n"
"    Content\n\n"
"    <x-slot name=\"footer\" class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"
msgstr "<x-card class=\"shadow-sm\">\n"
"    <x-slot name=\"heading\" class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n\n"
"    Content\n\n"
"    <x-slot name=\"footer\" class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"

#: docs/8.x/blade.md:block 272 (paragraph)
msgid "To interact with slot attributes, you may access the `attributes` property of the slot's variable. For more information on how to interact with attributes, please consult the documentation on [component attributes](#component-attributes):"
msgstr "若要與 Slot 屬性互動，可以存取 Slot 變數的 `attributes` 屬性。更多有關與屬性互動的資訊，請參考關於[元件屬性](#component-attributes)的說明文件："

#: docs/8.x/blade.md:block 273 (code)
msgid "@props([\n"
"    'heading',\n"
"    'footer',\n"
"])\n\n"
"<div {{ $attributes->class(['border']) }}>\n"
"    <h1 {{ $heading->attributes->class(['text-lg']) }}>\n"
"        {{ $heading }}\n"
"    </h1>\n\n"
"    {{ $slot }}\n\n"
"    <footer {{ $footer->attributes->class(['text-gray-700']) }}>\n"
"        {{ $footer }}\n"
"    </footer>\n"
"</div>\n"
msgstr "@props([\n"
"    'heading',\n"
"    'footer',\n"
"])\n\n"
"<div {{ $attributes->class(['border']) }}>\n"
"    <h1 {{ $heading->attributes->class(['text-lg']) }}>\n"
"        {{ $heading }}\n"
"    </h1>\n\n"
"    {{ $slot }}\n\n"
"    <footer {{ $footer->attributes->class(['text-gray-700']) }}>\n"
"        {{ $footer }}\n"
"    </footer>\n"
"</div>\n"

#: docs/8.x/blade.md:block 275 (header)
msgid "Inline Component Views"
msgstr "內嵌元件 View"

#: docs/8.x/blade.md:block 276 (paragraph)
msgid "For very small components, it may feel cumbersome to manage both the component class and the component's view template. For this reason, you may return the component's markup directly from the `render` method:"
msgstr "對於非常小的元件，要同時處理元件類別與元件樣板感覺非常麻煩。為此，可以直接在 `render` 方法內回傳元件的標記："

#: docs/8.x/blade.md:block 277 (code)
msgid "/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return <<<'blade'\n"
"        <div class=\"alert alert-danger\">\n"
"            {{ $slot }}\n"
"        </div>\n"
"    blade;\n"
"}\n"
msgstr "/**\n"
" * Get the view / contents that represent the component.\n"
" *\n"
" * @return \\Illuminate\\View\\View|\\Closure|string\n"
" */\n"
"public function render()\n"
"{\n"
"    return <<<'blade'\n"
"        <div class=\"alert alert-danger\">\n"
"            {{ $slot }}\n"
"        </div>\n"
"    blade;\n"
"}\n"

#: docs/8.x/blade.md:block 279 (header)
msgid "Generating Inline View Components"
msgstr "產生內嵌 View 元件"

#: docs/8.x/blade.md:block 280 (paragraph)
msgid "To create a component that renders an inline view, you may use the `inline` option when executing the `make:component` command:"
msgstr "若要建立會轉譯內嵌 View 的元件，可以在執行 `make:component` 指令時加上 `inline` 選項："

#: docs/8.x/blade.md:block 281 (code)
msgid "php artisan make:component Alert --inline\n"
msgstr "php artisan make:component Alert --inline\n"

#: docs/8.x/blade.md:block 283 (header)
msgid "Anonymous Components"
msgstr "匿名元件"

#: docs/8.x/blade.md:block 284 (paragraph)
msgid "Similar to inline components, anonymous components provide a mechanism for managing a component via a single file. However, anonymous components utilize a single view file and have no associated class. To define an anonymous component, you only need to place a Blade template within your `resources/views/components` directory. For example, assuming you have defined a component at `resources/views/components/alert.blade.php`, you may simply render it like so:"
msgstr "與內嵌元件類似，匿名元件提供了一種能在單一檔案內管理元件的機制。不過，匿名元件使用單一 View 檔案，且沒有相關聯的類別。若要定義匿名元件，只需要將 Blade 樣板放在 `resources/views/components` 目錄內即可。舉例來說，假設有在 `resources/views/components/alert.blade.php` 內定義個了一個元件，則可以輕鬆地像這樣轉譯該元件："

#: docs/8.x/blade.md:block 285 (code)
msgid "<x-alert/>\n"
msgstr "<x-alert/>\n"

#: docs/8.x/blade.md:block 286 (paragraph)
msgid "You may use the `.` character to indicate if a component is nested deeper inside the `components` directory. For example, assuming the component is defined at `resources/views/components/inputs/button.blade.php`, you may render it like so:"
msgstr "可以使用 `.` 字元來表示該元件是嵌套放在 `components` 目錄下的。舉例來說，假設某個元件是定義在 `resources/views/components/inputs/button.blade.php`，則可以像這樣對其進行轉譯："

#: docs/8.x/blade.md:block 289 (header)
msgid "Anonymous Index Components"
msgstr "匿名的 Index 元件"

#: docs/8.x/blade.md:block 290 (paragraph)
msgid "Sometimes, when a component is made up of many Blade templates, you may wish to group the given component's templates within a single directory. For example, imagine an \"accordion\" component with the following directory structure:"
msgstr "有時候，若我們做了一個由多個 Blade 樣板組成的元件，我們可能會想將給定的元件樣板放在單一目錄內群組化起來。舉例來說，若有個「accordion」元件，並有下列目錄結構："

#: docs/8.x/blade.md:block 291 (code)
msgid "/resources/views/components/accordion.blade.php\n"
"/resources/views/components/accordion/item.blade.php\n"
msgstr "/resources/views/components/accordion.blade.php\n"
"/resources/views/components/accordion/item.blade.php\n"

#: docs/8.x/blade.md:block 292 (paragraph)
msgid "This directory structure allows you to render the accordion component and its item like so:"
msgstr "使用這個目錄結構能讓我們將 accordion 元件與其元素依照下列這種方式轉譯："

#: docs/8.x/blade.md:block 293 (code)
msgid "<x-accordion>\n"
"    <x-accordion.item>\n"
"        ...\n"
"    </x-accordion.item>\n"
"</x-accordion>\n"
msgstr "<x-accordion>\n"
"    <x-accordion.item>\n"
"        ...\n"
"    </x-accordion.item>\n"
"</x-accordion>\n"

#: docs/8.x/blade.md:block 294 (paragraph)
msgid "However, in order to render the accordion component via `x-accordion`, we were forced to place the \"index\" accordion component template in the `resources/views/components` directory instead of nesting it within the `accordion` directory with the other accordion related templates."
msgstr "不過，若要使用 `x-accordion` 來轉譯 accordion 元件，則我們必須強制將「index」的 accordion 元件樣板放在 `resources/views/components` 目錄，而不是與其他 accordion 相關的樣板一起放在 `accordion` 目錄下。"

#: docs/8.x/blade.md:block 295 (paragraph)
msgid "Thankfully, Blade allows you to place an `index.blade.php` file within a component's template directory. When an `index.blade.php` template exists for the component, it will be rendered as the \"root\" node of the component. So, we can continue to use the same Blade syntax given in the example above; however, we will adjust our directory structure like so:"
msgstr "好佳在，Blade 能讓我們在元件的樣板目錄內放置一個 `index.blade.php` 檔案。當該元件內有 `index.blade.php` 樣板時，Laravel 會將其轉移為元件的「根節點」。因此，我們可以使用與上方範例相同的 Blade 語法。不過，我們會需要將目錄結構改成如下："

#: docs/8.x/blade.md:block 296 (code)
msgid "/resources/views/components/accordion/index.blade.php\n"
"/resources/views/components/accordion/item.blade.php\n"
msgstr "/resources/views/components/accordion/index.blade.php\n"
"/resources/views/components/accordion/item.blade.php\n"

#: docs/8.x/blade.md:block 298 (header)
msgid "Data Properties / Attributes"
msgstr "資料屬性"

#: docs/8.x/blade.md:block 299 (paragraph)
msgid "Since anonymous components do not have any associated class, you may wonder how you may differentiate which data should be passed to the component as variables and which attributes should be placed in the component's [attribute bag](#component-attributes)."
msgstr "由於匿名元件沒有相關聯的類別，因此你可能像知道該如何判斷那些資料應作為變數傳給元件，而那些屬性應放在元件的 [Attribute Bag](#component-attributes) 內。"

#: docs/8.x/blade.md:block 300 (paragraph)
msgid "You may specify which attributes should be considered data variables using the `@props` directive at the top of your component's Blade template. All other attributes on the component will be available via the component's attribute bag. If you wish to give a data variable a default value, you may specify the variable's name as the array key and the default value as the array value:"
msgstr "可以通過在元件的 Blade 樣板最上方使用 `@props` 指示詞來指定那個屬性應被當作資料變數使用。在元件中，所有其他的屬性都會通過元件的屬性包內可用。若像為某個資料變數設定預設值，則可以指定變數的名稱作為陣列索引鍵，並以預設值作為陣列值："

#: docs/8.x/blade.md:block 301 (code)
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"@props(['type' => 'info', 'message'])\n\n"
"<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>\n"
msgstr "<!-- /resources/views/components/alert.blade.php -->\n\n"
"@props(['type' => 'info', 'message'])\n\n"
"<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"    {{ $message }}\n"
"</div>\n"

#: docs/8.x/blade.md:block 302 (paragraph)
msgid "Given the component definition above, we may render the component like so:"
msgstr "以上方的元件定義為例，我們可能會像這樣來轉譯元件："

#: docs/8.x/blade.md:block 305 (header)
msgid "Accessing Parent Data"
msgstr "存取上層資料"

#: docs/8.x/blade.md:block 306 (paragraph)
msgid "Sometimes you may want to access data from a parent component inside a child component. In these cases, you may use the `@aware` directive. For example, imagine we are building a complex menu component consisting of a parent `<x-menu>` and child `<x-menu.item>`:"
msgstr "有時候，我們會想從子元件中存取上層元件的資料。在這種情況下，可以使用 `@aware` 指示詞。舉例來說，假設我們正在建立一個有上層元件 `<x-menu>` 與子元件 `<x-menu.item>` 的複雜選單元件："

#: docs/8.x/blade.md:block 307 (code)
msgid "<x-menu color=\"purple\">\n"
"    <x-menu.item>...</x-menu.item>\n"
"    <x-menu.item>...</x-menu.item>\n"
"</x-menu>\n"
msgstr "<x-menu color=\"purple\">\n"
"    <x-menu.item>...</x-menu.item>\n"
"    <x-menu.item>...</x-menu.item>\n"
"</x-menu>\n"

#: docs/8.x/blade.md:block 308 (paragraph)
msgid "The `<x-menu>` component may have an implementation like the following:"
msgstr "`<x-menu>` 元件可能會有像這樣的實作："

#: docs/8.x/blade.md:block 309 (code)
msgid "<!-- /resources/views/components/menu/index.blade.php -->\n\n"
"@props(['color' => 'gray'])\n\n"
"<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>\n"
"    {{ $slot }}\n"
"</ul>\n"
msgstr "<!-- /resources/views/components/menu/index.blade.php -->\n\n"
"@props(['color' => 'gray'])\n\n"
"<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>\n"
"    {{ $slot }}\n"
"</ul>\n"

#: docs/8.x/blade.md:block 310 (paragraph)
msgid "Because the `color` prop was only passed into the parent (`<x-menu>`), it won't be available inside `<x-menu.item>`. However, if we use the `@aware` directive, we can make it available inside `<x-menu.item>` as well:"
msgstr "由於 `color` 屬性只傳給了上層元件 (`<x-menu>`)，因此該屬性在 `<x-menu.item>` 中將無法存取。不過，若我們使用了 `@aware` 指示詞，就可以讓該屬性也在 `<x-menu.item>` 內可用："

#: docs/8.x/blade.md:block 311 (code)
msgid "<!-- /resources/views/components/menu/item.blade.php -->\n\n"
"@aware(['color' => 'gray'])\n\n"
"<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>\n"
"    {{ $slot }}\n"
"</li>\n"
msgstr "<!-- /resources/views/components/menu/item.blade.php -->\n\n"
"@aware(['color' => 'gray'])\n\n"
"<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>\n"
"    {{ $slot }}\n"
"</li>\n"

#: docs/8.x/blade.md:block 313 (header)
msgid "Dynamic Components"
msgstr "動態元件"

#: docs/8.x/blade.md:block 314 (paragraph)
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr "有時候我們可能會需要轉譯元件，但在執行階段前並不知道要轉譯哪個元件。這種情況，可以使用 Laravel 的內建「dynamic-component」動態元件來依照執行階段的值或變數進行轉譯："

#: docs/8.x/blade.md:block 315 (code)
msgid "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"

#: docs/8.x/blade.md:block 317 (header)
msgid "Manually Registering Components"
msgstr "手動註冊元件"

#: docs/8.x/blade.md:block 318 (quote)
msgid "{note} The following documentation on manually registering components is primarily applicable to those who are writing Laravel packages that include view components. If you are not writing a package, this portion of the component documentation may not be relevant to you."
msgstr "{note} 下列有關手動註冊元件的說明文件主要適用於撰寫包含 View 元件的 Laravel 套件的套件作者。若你並不撰寫套件，則這部分的元件說明文件可能跟你比較沒關係。"

#: docs/8.x/blade.md:block 320 (paragraph)
msgid "However, if you are building a package that utilizes Blade components or placing components in non-conventional directories, you will need to manually register your component class and its HTML tag alias so that Laravel knows where to find the component. You should typically register your components in the `boot` method of your package's service provider:"
msgstr "不過，若想製作使用 Blade 元件的套件或將元件放在不符合慣例的目錄內，則需要手動註冊元件類別與其 HTML 標籤別名，以讓 Laravel 知道要在哪裡尋找元件。通常，應在套件的 Service Provider 內的 `boot` 方法中註冊你的元件："

#: docs/8.x/blade.md:block 321 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use VendorPackage\\View\\Components\\AlertComponent;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', AlertComponent::class);\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n"
"use VendorPackage\\View\\Components\\AlertComponent;\n\n"
"/**\n"
" * Bootstrap your package's services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::component('package-alert', AlertComponent::class);\n"
"}\n"

#: docs/8.x/blade.md:block 324 (header)
msgid "Autoloading Package Components"
msgstr "自動載入套件元件"

#: docs/8.x/blade.md:block 331 (header)
msgid "Building Layouts"
msgstr "製作 Layout"

#: docs/8.x/blade.md:block 333 (header)
msgid "Layouts Using Components"
msgstr "使用元件的 Layout"

#: docs/8.x/blade.md:block 334 (paragraph)
msgid "Most web applications maintain the same general layout across various pages. It would be incredibly cumbersome and hard to maintain our application if we had to repeat the entire layout HTML in every view we create. Thankfully, it's convenient to define this layout as a single [Blade component](#components) and then use it throughout our application."
msgstr "大多數網站都會在許多頁面間共用同一個相同 Layout (版面配置)。如果我們每建立一個 HTML 都要重寫一整個 Layout，就會變得非常麻煩又難維護。好佳在，我們可以非常輕鬆地把這個 Layout 定義為一個 [Blade 元件](#components)，並在網站中重複利用。"

#: docs/8.x/blade.md:block 336 (header)
msgid "Defining The Layout Component"
msgstr "定義 Layout 元件"

#: docs/8.x/blade.md:block 337 (paragraph)
msgid "For example, imagine we are building a \"todo\" list application. We might define a `layout` component that looks like the following:"
msgstr "舉例來說，假設我們正在製作一個「代辦事項」App。我們可能會像這樣定義一個 `layout` 元件："

#: docs/8.x/blade.md:block 338 (code)
msgid "<!-- resources/views/components/layout.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>{{ $title ?? 'Todo Manager' }}</title>\n"
"    </head>\n"
"    <body>\n"
"        <h1>Todos</h1>\n"
"        <hr/>\n"
"        {{ $slot }}\n"
"    </body>\n"
"</html>\n"
msgstr "<!-- resources/views/components/layout.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>{{ $title ?? 'Todo Manager' }}</title>\n"
"    </head>\n"
"    <body>\n"
"        <h1>代辦事項</h1>\n"
"        <hr/>\n"
"        {{ $slot }}\n"
"    </body>\n"
"</html>\n"

#: docs/8.x/blade.md:block 340 (header)
msgid "Applying The Layout Component"
msgstr "套用 Layout 元件"

#: docs/8.x/blade.md:block 341 (paragraph)
msgid "Once the `layout` component has been defined, we may create a Blade view that utilizes the component. In this example, we will define a simple view that displays our task list:"
msgstr "定義好 `layout` 元件後，我們就可以建立使用該元件的 Blade 樣板。舉例來說，我們可以定義一個用來顯示任務清單的一個簡單的 View："

#: docs/8.x/blade.md:block 342 (code)
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"

#: docs/8.x/blade.md:block 343 (paragraph)
msgid "Remember, content that is injected into a component will be supplied to the default `$slot` variable within our `layout` component. As you may have noticed, our `layout` also respects a `$title` slot if one is provided; otherwise, a default title is shown. We may inject a custom title from our task list view using the standard slot syntax discussed in the [component documentation](#components):"
msgstr "請記得，在 `layout` 元件，被插入的內容會被提供給預設的 `$slot` 變數。讀者可能已經注意到，我們的 `layout` 會在有提供 `$title` Slot 時對其進行處理，並在未提供 `$title` 時顯示預設標題。我們也可以通過利用在[元件說明文件](#components)中討論過的方法一樣，在任務清單 View 內通過標準的 Slot 語法來插入自訂標題。"

#: docs/8.x/blade.md:block 344 (code)
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot name=\"title\">\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot name=\"title\">\n"
"        自訂標題\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"

#: docs/8.x/blade.md:block 345 (paragraph)
msgid "Now that we have defined our layout and task list views, we just need to return the `task` view from a route:"
msgstr "現在我們已經定義好了畫面配置以及任務清單 View 了，接著只需要在路由內回傳 `task` View："

#: docs/8.x/blade.md:block 346 (code)
msgid "use App\\Models\\Task;\n\n"
"Route::get('/tasks', function () {\n"
"    return view('tasks', ['tasks' => Task::all()]);\n"
"});\n"
msgstr "use App\\Models\\Task;\n\n"
"Route::get('/tasks', function () {\n"
"    return view('tasks', ['tasks' => Task::all()]);\n"
"});\n"

#: docs/8.x/blade.md:block 348 (header)
msgid "Layouts Using Template Inheritance"
msgstr "使用樣板繼承的版面配置"

#: docs/8.x/blade.md:block 350 (header)
msgid "Defining A Layout"
msgstr "定義版面配置"

#: docs/8.x/blade.md:block 351 (paragraph)
msgid "Layouts may also be created via \"template inheritance\". This was the primary way of building applications prior to the introduction of [components](#components)."
msgstr "也可以通過「樣板繼承」來製作 Layout。在[元件](#components)功能問世前，我們通常都是使用這個方法來製作網站。"

#: docs/8.x/blade.md:block 352 (paragraph)
msgid "To get started, let's take a look at a simple example. First, we will examine a page layout. Since most web applications maintain the same general layout across various pages, it's convenient to define this layout as a single Blade view:"
msgstr "要開始使用樣板繼承的 Layout，我們先來看一個簡單的例子。首先，我們先來看看一個 Layout 定義。由於大多數的 Web App 都會在多個不同的頁面上共用同一個 Layout，因此將這個 Layout 定義為單一 Blade View 比較方便："

#: docs/8.x/blade.md:block 353 (code)
msgid "<!-- resources/views/layouts/app.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>App Name - @yield('title')</title>\n"
"    </head>\n"
"    <body>\n"
"        @section('sidebar')\n"
"            This is the master sidebar.\n"
"        @show\n\n"
"        <div class=\"container\">\n"
"            @yield('content')\n"
"        </div>\n"
"    </body>\n"
"</html>\n"
msgstr "<!-- resources/views/layouts/app.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>App Name - @yield('title')</title>\n"
"    </head>\n"
"    <body>\n"
"        @section('sidebar')\n"
"            This is the master sidebar.\n"
"        @show\n\n"
"        <div class=\"container\">\n"
"            @yield('content')\n"
"        </div>\n"
"    </body>\n"
"</html>\n"

#: docs/8.x/blade.md:block 354 (paragraph)
msgid "As you can see, this file contains typical HTML mark-up. However, take note of the `@section` and `@yield` directives. The `@section` directive, as the name implies, defines a section of content, while the `@yield` directive is used to display the contents of a given section."
msgstr "就像我們可以看到的一樣，這個檔案包含了普通的 HTML 標記。不過，可以注意到 `@section` 與 `@yield` 指示詞。`@section` 指示詞與其名稱代表的意思一樣，是定義一個內容的段落。而 `@yield` 指示詞則用來將給定段落的內容顯示出來。"

#: docs/8.x/blade.md:block 355 (paragraph)
msgid "Now that we have defined a layout for our application, let's define a child page that inherits the layout."
msgstr "現在，我們已經定義好要在網站中使用的 Layout 了。讓我們來定義繼承該 Layout 的子頁面。"

#: docs/8.x/blade.md:block 357 (header)
msgid "Extending A Layout"
msgstr "繼承 Layout"

#: docs/8.x/blade.md:block 358 (paragraph)
msgid "When defining a child view, use the `@extends` Blade directive to specify which layout the child view should \"inherit\". Views which extend a Blade layout may inject content into the layout's sections using `@section` directives. Remember, as seen in the example above, the contents of these sections will be displayed in the layout using `@yield`:"
msgstr "在定義子 View 時，可以使用 `@extends` Blade 指示詞來指定要「繼承」哪個 Layout。繼承了 Blade 版面配置的 View 可以使用 `@section` 指示詞來將內容插入到 Layout 的段落中。請記得，就像在剛才範例中看到的一樣，這些段落的內容會在 Layout 中通過 `@yield` 來顯示："

#: docs/8.x/blade.md:block 359 (code)
msgid "<!-- resources/views/child.blade.php -->\n\n"
"@extends('layouts.app')\n\n"
"@section('title', 'Page Title')\n\n"
"@section('sidebar')\n"
"    @@parent\n\n"
"    <p>This is appended to the master sidebar.</p>\n"
"@endsection\n\n"
"@section('content')\n"
"    <p>This is my body content.</p>\n"
"@endsection\n"
msgstr "<!-- resources/views/child.blade.php -->\n\n"
"@extends('layouts.app')\n\n"
"@section('title', 'Page Title')\n\n"
"@section('sidebar')\n"
"    @@parent\n\n"
"    <p>This is appended to the master sidebar.</p>\n"
"@endsection\n\n"
"@section('content')\n"
"    <p>This is my body content.</p>\n"
"@endsection\n"

#: docs/8.x/blade.md:block 360 (paragraph)
msgid "In this example, the `sidebar` section is utilizing the `@@parent` directive to append (rather than overwriting) content to the layout's sidebar. The `@@parent` directive will be replaced by the content of the layout when the view is rendered."
msgstr "In this example, the `sidebar` section is utilizing the `@@parent` directive to append (rather than overwriting) content to the layout's sidebar. The `@@parent` directive will be replaced by the content of the layout when the view is rendered."

#: docs/8.x/blade.md:block 361 (quote)
msgid "{tip} Contrary to the previous example, this `sidebar` section ends with `@endsection` instead of `@show`. The `@endsection` directive will only define a section while `@show` will define and **immediately yield** the section."
msgstr "{tip} 相較於前一個例子，`sidebar` 段落是以 `@endsection` 結束的，而不是 `@show`。`@endsection` 指示詞只會定義一個段落，而 `@show` 則會定義並 **馬上 Yield** 該段落。"

#: docs/8.x/blade.md:block 362 (paragraph)
msgid "The `@yield` directive also accepts a default value as its second parameter. This value will be rendered if the section being yielded is undefined:"
msgstr "`@yield` 指示詞也接受一個預設值作為其第二個參數。這個值會在要 Yield 的段落未定義時被轉譯："

#: docs/8.x/blade.md:block 363 (code)
msgid "@yield('content', 'Default content')\n"
msgstr "@yield('content', '預設內容')\n"

#: docs/8.x/blade.md:block 365 (header)
msgid "Forms"
msgstr "表單"

#: docs/8.x/blade.md:block 367 (header)
msgid "CSRF Field"
msgstr "CSRF 欄位"

#: docs/8.x/blade.md:block 368 (paragraph)
msgid "Anytime you define an HTML form in your application, you should include a hidden CSRF token field in the form so that [the CSRF protection](/docs/{{version}}/csrf) middleware can validate the request. You may use the `@csrf` Blade directive to generate the token field:"
msgstr "只要是在專案中內定義 HTML 表單，不管是什麼時候，我們都應該要在表單內包含一個隱藏的 CSRF 權杖欄位來讓 [CSRF 保護](/docs/{{version}}/csrf) Middleware 能認證請求。我們可以使用 `@csrf` Blade 指示詞來產生這個權杖欄位："

#: docs/8.x/blade.md:block 369 (code)
msgid "<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n\n"
"    ...\n"
"</form>\n"
msgstr "<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n\n"
"    ...\n"
"</form>\n"

#: docs/8.x/blade.md:block 371 (header)
msgid "Method Field"
msgstr "方法欄位"

#: docs/8.x/blade.md:block 372 (paragraph)
msgid "Since HTML forms can't make `PUT`, `PATCH`, or `DELETE` requests, you will need to add a hidden `_method` field to spoof these HTTP verbs. The `@method` Blade directive can create this field for you:"
msgstr "由於 HTML 表單沒辦法建立 `PUT`, `PATCH` 與 `DELETE` 請求，因此會需要加上一個隱藏的 `_method` 欄位來假裝成這些 HTTP 動詞。`@method` Blade 指示詞可以幫你建立這個欄位："

#: docs/8.x/blade.md:block 373 (code)
msgid "<form action=\"/foo/bar\" method=\"POST\">\n"
"    @method('PUT')\n\n"
"    ...\n"
"</form>\n"
msgstr "<form action=\"/foo/bar\" method=\"POST\">\n"
"    @method('PUT')\n\n"
"    ...\n"
"</form>\n"

#: docs/8.x/blade.md:block 375 (header)
msgid "Validation Errors"
msgstr "認證錯誤"

#: docs/8.x/blade.md:block 376 (paragraph)
msgid "The `@error` directive may be used to quickly check if [validation error messages](/docs/{{version}}/validation#quick-displaying-the-validation-errors) exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr "可以使用 `@error` 指示詞來快速檢查給定的屬性是否有[驗證錯誤訊息](/docs/{{version}}/validation#quick-displaying-the-validation-errors)。在 `@error` 指示詞內，可以 echo `$message` 變數來顯示錯誤訊息："

#: docs/8.x/blade.md:block 377 (code)
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">貼文標題</label>\n\n"
"<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"

#: docs/8.x/blade.md:block 378 (paragraph)
msgid "Since the `@error` directive compiles to an \"if\" statement, you may use the `@else` directive to render content when there is not an error for an attribute:"
msgstr "由於 `@error` 指示詞匯被編譯為「if」陳述式，因此我們可以使用 `@else` 指示詞來在屬性沒有錯誤時轉譯特定內容："

#: docs/8.x/blade.md:block 379 (code)
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email') is-invalid @else is-valid @enderror\">\n"
msgstr "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email') is-invalid @else is-valid @enderror\">\n"

#: docs/8.x/blade.md:block 380 (paragraph)
msgid "You may pass [the name of a specific error bag](/docs/{{version}}/validation#named-error-bags) as the second parameter to the `@error` directive to retrieve validation error messages on pages containing multiple forms:"
msgstr "可以將[特定錯誤包的名稱](/docs/{{version}}/validation#named-error-bags)傳送給 `@error` 指示詞的第二個參數來在包含多個表單的頁面上取得驗證錯誤訊息："

#: docs/8.x/blade.md:block 381 (code)
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email 位址</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"

#: docs/8.x/blade.md:block 383 (header)
msgid "Stacks"
msgstr "堆疊"

#: docs/8.x/blade.md:block 384 (paragraph)
msgid "Blade allows you to push to named stacks which can be rendered somewhere else in another view or layout. This can be particularly useful for specifying any JavaScript libraries required by your child views:"
msgstr "在 Blade 中可以 Push 到帶名稱的堆疊。這個堆疊可以在另一個 View 或 Layout 內進行轉譯。堆疊特別適合用來指定任何子 View 所需要的 JavaScript 函式庫："

#: docs/8.x/blade.md:block 385 (code)
msgid "@push('scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endpush\n"
msgstr "@push('scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endpush\n"

#: docs/8.x/blade.md:block 386 (paragraph)
msgid "You may push to a stack as many times as needed. To render the complete stack contents, pass the name of the stack to the `@stack` directive:"
msgstr "一個堆疊可以按照需求 Push 多次。要將完成的堆疊內容轉譯出來，只需要將堆疊名稱傳給 `@stack` 指示詞："

#: docs/8.x/blade.md:block 387 (code)
msgid "<head>\n"
"    <!-- Head Contents -->\n\n"
"    @stack('scripts')\n"
"</head>\n"
msgstr "<head>\n"
"    <!-- Head 內容 -->\n\n"
"    @stack('scripts')\n"
"</head>\n"

#: docs/8.x/blade.md:block 388 (paragraph)
msgid "If you would like to prepend content onto the beginning of a stack, you should use the `@prepend` directive:"
msgstr "若想將內容加到堆疊的最前面，可以使用 `@prepend` 指示詞："

#: docs/8.x/blade.md:block 389 (code)
msgid "@push('scripts')\n"
"    This will be second...\n"
"@endpush\n\n"
"// Later...\n\n"
"@prepend('scripts')\n"
"    This will be first...\n"
"@endprepend\n"
msgstr "@push('scripts')\n"
"    這個會是第二個…\n"
"@endpush\n\n"
"// 之後…\n\n"
"@prepend('scripts')\n"
"    這個會是第一個…\n"
"@endprepend\n"

#: docs/8.x/blade.md:block 391 (header)
msgid "Service Injection"
msgstr "Service Injection"

#: docs/8.x/blade.md:block 392 (paragraph)
msgid "The `@inject` directive may be used to retrieve a service from the Laravel [service container](/docs/{{version}}/container). The first argument passed to `@inject` is the name of the variable the service will be placed into, while the second argument is the class or interface name of the service you wish to resolve:"
msgstr "`@inject` 指示詞可以用來從 Laravel 的 [Service Container](/docs/{{version}}/container) 中取得服務。傳給 `@inject` 的第一個引數是要放置服務的變數名稱，而第二個引數則是要解析服務的類別或介面名稱："

#: docs/8.x/blade.md:block 393 (code)
msgid "@inject('metrics', 'App\\Services\\MetricsService')\n\n"
"<div>\n"
"    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n"
"</div>\n"
msgstr "@inject('metrics', 'App\\Services\\MetricsService')\n\n"
"<div>\n"
"    月收入：{{ $metrics->monthlyRevenue() }}.\n"
"</div>\n"

#: docs/8.x/blade.md:block 395 (header)
msgid "Extending Blade"
msgstr "擴充 Blade"

#: docs/8.x/blade.md:block 396 (paragraph)
msgid "Blade allows you to define your own custom directives using the `directive` method. When the Blade compiler encounters the custom directive, it will call the provided callback with the expression that the directive contains."
msgstr "Blade 中可以通過 `directive` 方法來自訂指示詞。當 Blade 編譯器遇到自訂指示詞的時候，編譯器會呼叫所提供的回呼，並將將該指示詞內包含的運算式提供給該回呼。"

#: docs/8.x/blade.md:block 397 (paragraph)
msgid "The following example creates a `@datetime($var)` directive which formats a given `$var`, which should be an instance of `DateTime`:"
msgstr "下列範例建立了一個 `@datetime($var)` 指示詞，用來將給定的 `$var` 格式化，而 `$var` 應為 `DateTime` 的實體："

#: docs/8.x/blade.md:block 398 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::directive('datetime', function ($expression) {\n"
"            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n"
"        });\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Support\\Facades\\Blade;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::directive('datetime', function ($expression) {\n"
"            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n"
"        });\n"
"    }\n"
"}\n"

#: docs/8.x/blade.md:block 399 (paragraph)
msgid "As you can see, we will chain the `format` method onto whatever expression is passed into the directive. So, in this example, the final PHP generated by this directive will be:"
msgstr "如你所見，我們接著會將 `format` 方法接到傳入指示詞的運算式之後。因此，在這個範例中，這個指示詞最終所產生的指示詞會長這樣："

#: docs/8.x/blade.md:block 400 (code)
msgid "<?php echo ($var)->format('m/d/Y H:i'); ?>\n"
msgstr "<?php echo ($var)->format('m/d/Y H:i'); ?>\n"

#: docs/8.x/blade.md:block 401 (quote)
msgid "{note} After updating the logic of a Blade directive, you will need to delete all of the cached Blade views. The cached Blade views may be removed using the `view:clear` Artisan command."
msgstr "{note} 更新完 Blade 的指示詞邏輯後，會需要刪除所有已快取的 Blade View。可以通過 `view:clear` Artisan 指令來移除已快取的 Blade View。"

#: docs/8.x/blade.md:block 403 (header)
msgid "Custom Echo Handlers"
msgstr "自訂 Echo 處理常式"

#: docs/8.x/blade.md:block 404 (paragraph)
msgid "If you attempt to \"echo\" an object using Blade, the object's `__toString` method will be invoked. The [`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) method is one of PHP's built-in \"magic methods\". However, sometimes you may not have control over the `__toString` method of a given class, such as when the class that you are interacting with belongs to a third-party library."
msgstr "若有打算在 Blade 中「echo」某個物件，則 Blade 會叫用該物件的 `__toString` 方法。[`__toString`](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring) 方法是 PHP 的其中一個「魔法方法」。不過，有的時候我們可能無法控制給定類別的 `__toString` 方法，如：來自第三方函式庫的類別。"

#: docs/8.x/blade.md:block 405 (paragraph)
msgid "In these cases, Blade allows you to register a custom echo handler for that particular type of object. To accomplish this, you should invoke Blade's `stringable` method. The `stringable` method accepts a closure. This closure should type-hint the type of object that it is responsible for rendering. Typically, the `stringable` method should be invoked within the `boot` method of your application's `AppServiceProvider` class:"
msgstr "這個時候，Blade 能讓我們針對特定類型的物件註冊自訂的 Echo 處理常式。為此，應叫用 Blade 的 `stringable` 方法。`stringable` 方法接受一個閉包，該閉包應在型別標示中指定要負責轉譯的物件。一般情況下來說，`stringable` 方法應在專案的 `AppServiceProvider` 類別中 `boot` 方法內叫用："

#: docs/8.x/blade.md:block 406 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n"
"use Money\\Money;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n"
"use Money\\Money;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::stringable(function (Money $money) {\n"
"        return $money->formatTo('en_GB');\n"
"    });\n"
"}\n"

#: docs/8.x/blade.md:block 407 (paragraph)
msgid "Once your custom echo handler has been defined, you may simply echo the object in your Blade template:"
msgstr "定義好自訂的 Echo 處理常式後，就可以直接在 Blade 樣板中 Echo 這個物件："

#: docs/8.x/blade.md:block 408 (code)
msgid "Cost: {{ $money }}\n"
msgstr "Cost: {{ $money }}\n"

#: docs/8.x/blade.md:block 410 (header)
msgid "Custom If Statements"
msgstr "自訂 If 陳述式"

#: docs/8.x/blade.md:block 411 (paragraph)
msgid "Programming a custom directive is sometimes more complex than necessary when defining simple, custom conditional statements. For that reason, Blade provides a `Blade::if` method which allows you to quickly define custom conditional directives using closures. For example, let's define a custom conditional that checks the configured default \"disk\" for the application. We may do this in the `boot` method of our `AppServiceProvider`:"
msgstr "為了定義一個簡單的自訂條件陳述式，撰寫一個自訂指示詞有時候搞得很複雜又不必要。為此，Blade 提供了一個 `Blade::if` 方法，可以讓你通過閉包來快速地定義自訂條件指示詞。舉例來說，讓我們來定義一個檢查專案設定的預設「disk」的自訂條件句。我們可以在 `AppServiceProvider` 中的 `boot` 方法內定義："

#: docs/8.x/blade.md:block 412 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::if('disk', function ($value) {\n"
"        return config('filesystems.default') === $value;\n"
"    });\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Blade::if('disk', function ($value) {\n"
"        return config('filesystems.default') === $value;\n"
"    });\n"
"}\n"

#: docs/8.x/blade.md:block 413 (paragraph)
msgid "Once the custom conditional has been defined, you can use it within your templates:"
msgstr "定義好自訂條件句後，就可以在樣板中使用這個條件句："

#: docs/8.x/blade.md:block 414 (code)
msgid "@disk('local')\n"
"    <!-- The application is using the local disk... -->\n"
"@elsedisk('s3')\n"
"    <!-- The application is using the s3 disk... -->\n"
"@else\n"
"    <!-- The application is using some other disk... -->\n"
"@enddisk\n\n"
"@unlessdisk('local')\n"
"    <!-- The application is not using the local disk... -->\n"
"@enddisk\n"
msgstr "@disk('local')\n"
"    <!-- 應用程式使用 local disk… -->\n"
"@elsedisk('s3')\n"
"    <!-- 應用程式使用 s3 disk… -->\n"
"@else\n"
"    <!-- 應用程式使用其他的 disk… -->\n"
"@enddisk\n\n"
"@unlessdisk('local')\n"
"    <!-- 應用程式不使用 local disk… -->\n"
"@enddisk\n"

#: docs/9.x/blade.md:block 2 (unordered list)
msgid "[Checked / Selected / Disabled](#checked-and-selected)"
msgstr "[Checked / Selected / Disabled](#checked-and-selected)"

#: docs/9.x/blade.md:block 2 (unordered list)
msgid "[Rendering Inline Blade Templates](#rendering-inline-blade-templates)"
msgstr "[轉譯內嵌的 Blade 樣板](#rendering-inline-blade-templates)"

#: docs/9.x/blade.md:block 102 (header)
msgid "Checked / Selected / Disabled"
msgstr "Checked / Selected / Disabled"

#: docs/9.x/blade.md:block 103 (paragraph)
msgid "For convenience, you may use the `@checked` directive to easily indicate if a given HTML checkbox input is \"checked\". This directive will echo `checked` if the provided condition evaluates to `true`:"
msgstr "為了方便起見，可以使用 `@checked` 指示詞用來可輕鬆地標示給定 HTML 勾選框為「^[已勾選](Checked)」。這個指示詞會在條件為 `true` 時 Echo `checked`："

#: docs/9.x/blade.md:block 104 (code)
msgid "<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />\n"
msgstr "<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />\n"

#: docs/9.x/blade.md:block 105 (paragraph)
msgid "Likewise, the `@selected` directive may be used to indicate if a given select option should be \"selected\":"
msgstr "類似地，`@selected` 指示詞可用來表示給定 Select 選項應為「^[已選擇](Selected)」："

#: docs/9.x/blade.md:block 106 (code)
msgid "<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>\n"
msgstr "<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>\n"

#: docs/9.x/blade.md:block 107 (paragraph)
msgid "Additionally, the `@disabled` directive may be used to indicate if a given element should be \"disabled\":"
msgstr "此外，可使用  `@disabled` 指示詞來表示給定元素應為「disabled」："

#: docs/9.x/blade.md:block 108 (code)
msgid "<button type=\"submit\" @disabled($errors->isNotEmpty())>Submit</button>\n"
msgstr "<button type=\"submit\" @disabled($errors->isNotEmpty())>Submit</button>\n"

#: docs/9.x/blade.md:block 135 (paragraph)
msgid "Since the `@once` directive is often used in conjunction with the `@push` or `@prepend` directives, the `@pushOnce` and `@prependOnce` directives are available for your convenience:"
msgstr "由於 `@once` 指示詞常常與 `@push` 或 `@prepend` 指示詞一起使用，所以也提供了 `@pushOnce` 與 `@prependOnce` 等方便的指示詞可使用："

#: docs/9.x/blade.md:block 136 (code)
msgid "@pushOnce('scripts')\n"
"    <script>\n"
"        // Your custom JavaScript...\n"
"    </script>\n"
"@endPushOnce\n"
msgstr "@pushOnce('scripts')\n"
"    <script>\n"
"        // 自訂 JavaScript...\n"
"    </script>\n"
"@endPushOnce\n"

#: docs/9.x/blade.md:block 154 (paragraph)
msgid "If you would like to create an anonymous component (a component with only a Blade template and no class), you may use the `--view` flag when invoking the `make:component` command:"
msgstr "若想建立匿名元件 (即，只有 Blade 樣板且無類別的元件)，可在叫用 `make:component` 指令時使用 `--view` 旗標："

#: docs/9.x/blade.md:block 155 (code)
msgid "php artisan make:component forms.input --view\n"
msgstr "php artisan make:component forms.input --view\n"

#: docs/9.x/blade.md:block 156 (paragraph)
msgid "The command above will create a Blade file at `resources/views/components/forms/input.blade.php` which can be rendered as a component via `<x-forms.input />`."
msgstr "上述指令會在 `resources/views/components/forms/input.blade.php` 中建立一個 Blade 檔，可通過 `<x-forms.input />` 來轉譯這個元件。"

#: docs/9.x/blade.md:block 210 (code)
msgid "use App\\Services\\AlertCreator;\n\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}\n"
msgstr "use App\\Services\\AlertCreator;\n\n"
"/**\n"
" * Create the component instance.\n"
" *\n"
" * @param  \\App\\Services\\AlertCreator  $creator\n"
" * @param  string  $type\n"
" * @param  string  $message\n"
" * @return void\n"
" */\n"
"public function __construct(AlertCreator $creator, $type, $message)\n"
"{\n"
"    $this->creator = $creator;\n"
"    $this->type = $type;\n"
"    $this->message = $message;\n"
"}\n"

#: docs/9.x/blade.md:block 276 (code)
msgid "<x-alert>\n"
"    <x-slot:title>\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr "<x-alert>\n"
"    <x-slot:title>\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"

#: docs/9.x/blade.md:block 280 (code)
msgid "<x-alert>\n"
"    <x-slot:title>\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr "<x-alert>\n"
"    <x-slot:title>\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"

#: docs/9.x/blade.md:block 284 (code)
msgid "<x-card class=\"shadow-sm\">\n"
"    <x-slot:heading class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n\n"
"    Content\n\n"
"    <x-slot:footer class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"
msgstr "<x-card class=\"shadow-sm\">\n"
"    <x-slot:heading class=\"font-bold\">\n"
"        Heading\n"
"    </x-slot>\n\n"
"    Content\n\n"
"    <x-slot:footer class=\"text-sm\">\n"
"        Footer\n"
"    </x-slot>\n"
"</x-card>\n"

#: docs/9.x/blade.md:block 325 (quote)
msgid "{note} The `@aware` directive can not access parent data that is not explicitly passed to the parent component via HTML attributes. Default `@props` values that are not explicitly passed to the parent component can not be accessed by the `@aware` directive."
msgstr "{note} `@aware` 指示詞無法存取不是通過 HTML 屬性顯式傳遞給上層原件的上層資料。未顯式傳遞給上層元件的預設 `@props` 值無法被 `@aware` 指示詞存取。"

#: docs/9.x/blade.md:block 358 (code)
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot:title>\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot:title>\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"

#: docs/9.x/blade.md:block 391 (code)
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\"\n"
"    type=\"text\"\n"
"    class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"

#: docs/9.x/blade.md:block 393 (code)
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email') is-invalid @else is-valid @enderror\">\n"
msgstr "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email') is-invalid @else is-valid @enderror\">\n"

#: docs/9.x/blade.md:block 395 (code)
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\"\n"
"    type=\"email\"\n"
"    class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"

#: docs/9.x/blade.md:block 409 (header)
msgid "Rendering Inline Blade Templates"
msgstr "轉譯內嵌的 Blade 樣板"

#: docs/9.x/blade.md:block 410 (paragraph)
msgid "Sometimes you may need to transform a raw Blade template string into valid HTML. You may accomplish this using the `render` method provided by the `Blade` facade. The `render` method accepts the Blade template string and an optional array of data to provide to the template:"
msgstr "有時候，我們可能會像將原始的 Blade 樣板字串轉譯為有效的 HTML。我們可以通過 `Blade` Facade 所提供的 `render` 方法來達成。`render` 方法接受 Blade 樣板字串，以及一個用來提供給樣板的可選資料陣列："

#: docs/9.x/blade.md:block 411 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"

#: docs/9.x/blade.md:block 412 (paragraph)
msgid "Laravel renders inline Blade templates by writing them to the `storage/framework/views` directory. If you would like Laravel to remove these temporary files after rendering the Blade template, you may provide the `deleteCachedView` argument to the method:"
msgstr "Laravel 會將這些樣板寫到 `storage/framework/views` 來轉譯內嵌的 Blade 樣板。若想讓 Laravel 在轉譯完這些 Blade 樣板後刪除這些臨時檔案，可以將 `deleteCachedView` 引數提供給該方法："

#: docs/9.x/blade.md:block 413 (code)
msgid "return Blade::render(\n"
"    'Hello, {{ $name }}',\n"
"    ['name' => 'Julian Bashir'],\n"
"    deleteCachedView: true\n"
");\n"
msgstr "return Blade::render(\n"
"    'Hello, {{ $name }}',\n"
"    ['name' => 'Julian Bashir'],\n"
"    deleteCachedView: true\n"
");\n"

