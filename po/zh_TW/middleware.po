msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/middleware.pot\n"
"X-Crowdin-File-ID: 101\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-08-06 05:46\n"

#: docs/8.x/middleware.md:block 1 (header)
msgid "Middleware"
msgstr "中介軟體 - Middleware"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Defining Middleware](#defining-middleware)"
msgstr "[定義 Middleware](#defining-middleware)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Registering Middleware](#registering-middleware)"
msgstr "[註冊 Middleware](#registering-middleware)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Global Middleware](#global-middleware)"
msgstr "[全域 Middleware](#global-middleware)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Assigning Middleware To Routes](#assigning-middleware-to-routes)"
msgstr "[將 Middleware 指派給 Route](#assigning-middleware-to-routes)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Middleware Groups](#middleware-groups)"
msgstr "[Middleware 群組](#middleware-groups)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Sorting Middleware](#sorting-middleware)"
msgstr "[排序 Middleware](#sorting-middleware)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Middleware Parameters](#middleware-parameters)"
msgstr "[Middleware 參數](#middleware-parameters)"

#: docs/8.x/middleware.md:block 2 (unordered list)
msgid "[Terminable Middleware](#terminable-middleware)"
msgstr "[可終止的 Middleware](#terminable-middleware)"

#: docs/8.x/middleware.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/middleware.md:block 5 (paragraph)
msgid "Middleware provide a convenient mechanism for inspecting and filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to your application's login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application."
msgstr "Middleware 提供了一個機制，可檢驗與過濾進入應用程式的 HTTP Request。舉例來說，Laravel 中包含了一個可以認證使用者是否已登入的 Middleware。若使用者未登入，該 Middleware 會將使用者重新導向回登入畫面。不過，若使用者已登入，這個 Middleware 就會讓 Request 進一步進入程式中處理。"

#: docs/8.x/middleware.md:block 6 (paragraph)
msgid "Additional middleware can be written to perform a variety of tasks besides authentication. For example, a logging middleware might log all incoming requests to your application. There are several middleware included in the Laravel framework, including middleware for authentication and CSRF protection. All of these middleware are located in the `app/Http/Middleware` directory."
msgstr "除了登入認證外，我們還能撰寫追加的 Middleware 來進行各種任務。舉例來說，可以有個 Logging Middleware 來將程式的所有連入 Request 都紀錄到日誌裡。Laravel Framework 還包含了許多 Middleware，包含用於登入認證的 Middleware、以及用於 CSRF 保護的 Middleware。這些 Middleware 都放置在 `app/Http/Middleware` 目錄內。"

#: docs/8.x/middleware.md:block 8 (header)
msgid "Defining Middleware"
msgstr "定義 Middleware"

#: docs/8.x/middleware.md:block 9 (paragraph)
msgid "To create a new middleware, use the `make:middleware` Artisan command:"
msgstr "若要建立新的 Middleware，請使用 `make:middleware` Artisan 指令："

#: docs/8.x/middleware.md:block 10 (code)
msgid "php artisan make:middleware EnsureTokenIsValid\n"
msgstr "php artisan make:middleware EnsureTokenIsValid\n"

#: docs/8.x/middleware.md:block 11 (paragraph)
msgid "This command will place a new `EnsureTokenIsValid` class within your `app/Http/Middleware` directory. In this middleware, we will only allow access to the route if the supplied `token` input matches a specified value. Otherwise, we will redirect the users back to the `home` URI:"
msgstr "該指令會在 `app/Http/Middleware` 目錄中放置一個新的 `EnsureTokenIsValid` 類別。在這個 Middleware 中，我們要只在提供的 `token` 符合特定的值時才允許存取該 Route。`token` 不符合時，會將使用者重新導向回到 `home` URI："

#: docs/8.x/middleware.md:block 12 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class EnsureTokenIsValid\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->input('token') !== 'my-secret-token') {\n"
"            return redirect('home');\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class EnsureTokenIsValid\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->input('token') !== 'my-secret-token') {\n"
"            return redirect('home');\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"

#: docs/8.x/middleware.md:block 13 (paragraph)
msgid "As you can see, if the given `token` does not match our secret token, the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to \"pass\"), you should call the `$next` callback with the `$request`."
msgstr "就像我們可以看到的一樣，若給定的 `token` 不符合我們的私密權杖 (Secret Token)，則這個 Middleware 會回傳一個 HTTP Redirect 給用戶端。`token` 符合時，這個 Request 就會進一步地傳給我們的程式。若要將 Request 進一步傳進我們的應用程式中 (即，讓 Middleware「通過 - Pass」)，應以 `$request` 呼叫 `$next` 回呼。"

#: docs/8.x/middleware.md:block 14 (paragraph)
msgid "It's best to envision middleware as a series of \"layers\" HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely."
msgstr "最好想像成我們有「一層又一層」的 Middleware。HTTP Request 必須通過每一層的 Middleware，最後才能進入你的應用程式中。每一層 Middleware 都可以檢查 Request 的內容，甚至還能完全拒絕 Request。"

#: docs/8.x/middleware.md:block 15 (quote)
msgid "{tip} All middleware are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a middleware's constructor."
msgstr "{tip} 所有的 Middleware 都會經過 [Service Container] 解析，因此我們可以在 Middleware 的 ^[Constructor](建構函式) 上^[型別提示](Type-Hint) 任何需要的相依性。"

#: docs/8.x/middleware.md:block 17 (header)
msgid "Middleware & Responses"
msgstr "Middleare 與 Response"

#: docs/8.x/middleware.md:block 18 (paragraph)
msgid "Of course, a middleware can perform tasks before or after passing the request deeper into the application. For example, the following middleware would perform some task **before** the request is handled by the application:"
msgstr "當然，Middleware 可以在將 Request 傳入應用程式的前後執行。舉例來說，下列 Middleware 會在 Request 被程式處理 **之後** 進行一些任務："

#: docs/8.x/middleware.md:block 19 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class BeforeMiddleware\n"
"{\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        // Perform action\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class BeforeMiddleware\n"
"{\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        // Perform action\n\n"
"        return $next($request);\n"
"    }\n"
"}\n"

#: docs/8.x/middleware.md:block 20 (paragraph)
msgid "However, this middleware would perform its task **after** the request is handled by the application:"
msgstr "不過，這個 Middleware 會在 Request 被程式處理 **之後** 才進行其任務："

#: docs/8.x/middleware.md:block 21 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class AfterMiddleware\n"
"{\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        $response = $next($request);\n\n"
"        // Perform action\n\n"
"        return $response;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class AfterMiddleware\n"
"{\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        $response = $next($request);\n\n"
"        // Perform action\n\n"
"        return $response;\n"
"    }\n"
"}\n"

#: docs/8.x/middleware.md:block 23 (header)
msgid "Registering Middleware"
msgstr "註冊 Middleware"

#: docs/8.x/middleware.md:block 25 (header)
msgid "Global Middleware"
msgstr "全域 Middleware"

#: docs/8.x/middleware.md:block 26 (paragraph)
msgid "If you want a middleware to run during every HTTP request to your application, list the middleware class in the `$middleware` property of your `app/Http/Kernel.php` class."
msgstr "若想讓 Middleware 在每一個 HTTP Request 上都執行的話，請將該 Middleware 列在 `app/Http/Kernel.php` 類別中的 `$middleware` 屬性內。"

#: docs/8.x/middleware.md:block 28 (header)
msgid "Assigning Middleware To Routes"
msgstr "將 Middleware 指派給 Route"

#: docs/8.x/middleware.md:block 29 (paragraph)
msgid "If you would like to assign middleware to specific routes, you should first assign the middleware a key in your application's `app/Http/Kernel.php` file. By default, the `$routeMiddleware` property of this class contains entries for the middleware included with Laravel. You may add your own middleware to this list and assign it a key of your choosing:"
msgstr "若想將 Middleware 指派給特定的 Route，請先在專案的 `app/Http/Kernel.php` 檔案中為該 Middleware 指派一個索引鍵。預設情況下，這個類別的 `$routeMiddleware` 屬性包含了 Laravel 附帶的 Middleware。我們可以在這個列表中列出我們自己的 Middleware，並為其指派一個自訂的索引鍵："

#: docs/8.x/middleware.md:block 30 (code)
msgid "// Within App\\Http\\Kernel class...\n\n"
"protected $routeMiddleware = [\n"
"    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"    'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"    'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"    'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"    'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"];\n"
msgstr "// 在 App\\Http\\Kernel 類別中...\n\n"
"protected $routeMiddleware = [\n"
"    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"    'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"    'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"    'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"    'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"];\n"

#: docs/8.x/middleware.md:block 31 (paragraph)
msgid "Once the middleware has been defined in the HTTP kernel, you may use the `middleware` method to assign middleware to a route:"
msgstr "Middleware 被定義為 HTTP Kernel 後，就可以使用 `middleware` 方法來將 Middleware 指派給 Route："

#: docs/8.x/middleware.md:block 32 (code)
msgid "Route::get('/profile', function () {\n"
"    //\n"
"})->middleware('auth');\n"
msgstr "Route::get('/profile', function () {\n"
"    //\n"
"})->middleware('auth');\n"

#: docs/8.x/middleware.md:block 33 (paragraph)
msgid "You may assign multiple middleware to the route by passing an array of middleware names to the `middleware` method:"
msgstr "也可以傳入一組 Middleware 陣列給 `middleware` 方法來指派多個 Middleware 給 Route："

#: docs/8.x/middleware.md:block 34 (code)
msgid "Route::get('/', function () {\n"
"    //\n"
"})->middleware(['first', 'second']);\n"
msgstr "Route::get('/', function () {\n"
"    //\n"
"})->middleware(['first', 'second']);\n"

#: docs/8.x/middleware.md:block 35 (paragraph)
msgid "When assigning middleware, you may also pass the fully qualified class name:"
msgstr "指派 Middleware 時，也可以傳入完整類別名稱 (Fully Qualified Class Name)："

#: docs/8.x/middleware.md:block 36 (code)
msgid "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n"
"Route::get('/profile', function () {\n"
"    //\n"
"})->middleware(EnsureTokenIsValid::class);\n"
msgstr "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n"
"Route::get('/profile', function () {\n"
"    //\n"
"})->middleware(EnsureTokenIsValid::class);\n"

#: docs/8.x/middleware.md:block 38 (header)
msgid "Excluding Middleware"
msgstr "排除 Middleware"

#: docs/8.x/middleware.md:block 39 (paragraph)
msgid "When assigning middleware to a group of routes, you may occasionally need to prevent the middleware from being applied to an individual route within the group. You may accomplish this using the `withoutMiddleware` method:"
msgstr "當我們將 Middleware 指派給 Route 群組時，我們有時候會需要讓某個 Middleware 不要被套用到群組中的個別 Route 上。我們可以使用 `withoutMiddleware` 方法來完成："

#: docs/8.x/middleware.md:block 40 (code)
msgid "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n"
"Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/', function () {\n"
"        //\n"
"    });\n\n"
"    Route::get('/profile', function () {\n"
"        //\n"
"    })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"});\n"
msgstr "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n"
"Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/', function () {\n"
"        //\n"
"    });\n\n"
"    Route::get('/profile', function () {\n"
"        //\n"
"    })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"});\n"

#: docs/8.x/middleware.md:block 41 (paragraph)
msgid "You may also exclude a given set of middleware from an entire [group](/docs/{{version}}/routing#route-groups) of route definitions:"
msgstr "也可以將一組 Middleware 從整個 Route [群組](/docs/{{version}}/routing#route-groups)定義中排除："

#: docs/8.x/middleware.md:block 42 (code)
msgid "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n"
"Route::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/profile', function () {\n"
"        //\n"
"    });\n"
"});\n"
msgstr "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n"
"Route::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/profile', function () {\n"
"        //\n"
"    });\n"
"});\n"

#: docs/8.x/middleware.md:block 43 (paragraph)
msgid "The `withoutMiddleware` method can only remove route middleware and does not apply to [global middleware](#global-middleware)."
msgstr "`withoutMiddleware` 方法只能移除 Route Middleware，不能移除[全域 Middleware](#global-middleware)。"

#: docs/8.x/middleware.md:block 45 (header)
msgid "Middleware Groups"
msgstr "Middleware 群組"

#: docs/8.x/middleware.md:block 46 (paragraph)
msgid "Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may accomplish this using the `$middlewareGroups` property of your HTTP kernel."
msgstr "有時候，我們會想將多個 Middleware 分組在單一索引鍵上，來讓我們可以輕鬆地將其指派給 Route。可以在 HTTP Kernel 中使用 `$middlewareGroups` 屬性來完成。"

#: docs/8.x/middleware.md:block 47 (paragraph)
msgid "Out of the box, Laravel comes with `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware groups are automatically applied by your application's `App\\Providers\\RouteServiceProvider` service provider to routes within your corresponding `web` and `api` route files:"
msgstr "Laravel 中安裝完後就自帶了 `web` 與 `api` 兩個 Middleware 群組，其中共包含了可用在網頁與 API Route 上的常見 Middleware。請記得，這些 Middleware 群組由 `App\\Providers\\RouteServiceProvider` Service Provider 自動套用到對應的 `web` 與 `api` Route 檔案："

#: docs/8.x/middleware.md:block 48 (code)
msgid "/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n\n"
"    'api' => [\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];\n"
msgstr "/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n\n"
"    'api' => [\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];\n"

#: docs/8.x/middleware.md:block 49 (paragraph)
msgid "Middleware groups may be assigned to routes and controller actions using the same syntax as individual middleware. Again, middleware groups make it more convenient to assign many middleware to a route at once:"
msgstr "也可以使用相同的語法來將 Middleware 群組作為個別 Middleware 一樣指派給 Route 與 Controller 動作。同樣的，使用 Middleware 群組來一次指派多個 Middleware 給 Route 比較方便："

#: docs/8.x/middleware.md:block 50 (code)
msgid "Route::get('/', function () {\n"
"    //\n"
"})->middleware('web');\n\n"
"Route::middleware(['web'])->group(function () {\n"
"    //\n"
"});\n"
msgstr "Route::get('/', function () {\n"
"    //\n"
"})->middleware('web');\n\n"
"Route::middleware(['web'])->group(function () {\n"
"    //\n"
"});\n"

#: docs/8.x/middleware.md:block 51 (quote)
msgid "{tip} Out of the box, the `web` and `api` middleware groups are automatically applied to your application's corresponding `routes/web.php` and `routes/api.php` files by the `App\\Providers\\RouteServiceProvider`."
msgstr "{tip} 在新安裝的 Laravel 中隨附了 `web` 與 `api` Middleware 群組，並由 `App\\Providers\\RouteServiceProvider` 自動套用到對應的 `routes/web.php` 與 `routes/api.php` 檔上。"

#: docs/8.x/middleware.md:block 53 (header)
msgid "Sorting Middleware"
msgstr "排序 Middleware"

#: docs/8.x/middleware.md:block 54 (paragraph)
msgid "Rarely, you may need your middleware to execute in a specific order but not have control over their order when they are assigned to the route. In this case, you may specify your middleware priority using the `$middlewarePriority` property of your `app/Http/Kernel.php` file. This property may not exist in your HTTP kernel by default. If it does not exist, you may copy its default definition below:"
msgstr "我們偶爾會需要讓 Middleware 以特定的順序執行，但有時候沒有辦法控制 Middleware 是以什麼順序指派給 Route 的。這時，我們可以使用 `app/Http/Kernel.php` 檔案中的 `$middlewarePriority` 屬性來執行 Middleware 的優先順序。這個屬性預設可能不存在 HTTP Kernel 中。若沒有這個屬性，可以複製下列預設定義來用："

#: docs/8.x/middleware.md:block 55 (code)
msgid "/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];\n"
msgstr "/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];\n"

#: docs/8.x/middleware.md:block 57 (header)
msgid "Middleware Parameters"
msgstr "Middleware 參數"

#: docs/8.x/middleware.md:block 58 (paragraph)
msgid "Middleware can also receive additional parameters. For example, if your application needs to verify that the authenticated user has a given \"role\" before performing a given action, you could create an `EnsureUserHasRole` middleware that receives a role name as an additional argument."
msgstr "Middleware 也可以接收額外的參數。舉例來說，若你的程式需要在執行給定動作前認證登入的使用者是否有給定的「職位 (Role)」，則我們可以先建立一個 `EnsureUserHasRole` Middleware，讓該 Middleware 接收一個職位名稱來作為其額外的引數。"

#: docs/8.x/middleware.md:block 59 (paragraph)
msgid "Additional middleware parameters will be passed to the middleware after the `$next` argument:"
msgstr "額外的 Middleware 引數會被放在 `$next` 引數之後傳遞給 Middleware："

#: docs/8.x/middleware.md:block 60 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class EnsureUserHasRole\n"
"{\n"
"    /**\n"
"     * Handle the incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @param  string  $role\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next, $role)\n"
"    {\n"
"        if (! $request->user()->hasRole($role)) {\n"
"            // Redirect...\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n\n"
"class EnsureUserHasRole\n"
"{\n"
"    /**\n"
"     * Handle the incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @param  string  $role\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next, $role)\n"
"    {\n"
"        if (! $request->user()->hasRole($role)) {\n"
"            // Redirect...\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n\n"
"}\n"

#: docs/8.x/middleware.md:block 61 (paragraph)
msgid "Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a `:`. Multiple parameters should be delimited by commas:"
msgstr "也可以在定義 Route 時使用 `:` 區分出 Middleware 名稱與參數來指定 Middleware 參數。多個參數請使用逗點 (,) 區隔："

#: docs/8.x/middleware.md:block 62 (code)
msgid "Route::put('/post/{id}', function ($id) {\n"
"    //\n"
"})->middleware('role:editor');\n"
msgstr "Route::put('/post/{id}', function ($id) {\n"
"    //\n"
"})->middleware('role:editor');\n"

#: docs/8.x/middleware.md:block 64 (header)
msgid "Terminable Middleware"
msgstr "可終止的 Middleware"

#: docs/8.x/middleware.md:block 65 (paragraph)
msgid "Sometimes a middleware may need to do some work after the HTTP response has been sent to the browser. If you define a `terminate` method on your middleware and your web server is using FastCGI, the `terminate` method will automatically be called after the response is sent to the browser:"
msgstr "有時候，某個 Middleware 可能需要在 HTTP Response 被傳送到瀏覽器後才進行某些動作。若我們在 Middleware 上定義一個 `terminate` 方法，且網頁伺服器 (Web Server) 使用 FastCGI，則會在 Response 傳送給瀏覽器後會自動呼叫 `terminate` 方法："

#: docs/8.x/middleware.md:block 66 (code)
msgid "<?php\n\n"
"namespace Illuminate\\Session\\Middleware;\n\n"
"use Closure;\n\n"
"class TerminatingMiddleware\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        return $next($request);\n"
"    }\n\n"
"    /**\n"
"     * Handle tasks after the response has been sent to the browser.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Illuminate\\Http\\Response  $response\n"
"     * @return void\n"
"     */\n"
"    public function terminate($request, $response)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Illuminate\\Session\\Middleware;\n\n"
"use Closure;\n\n"
"class TerminatingMiddleware\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        return $next($request);\n"
"    }\n\n"
"    /**\n"
"     * Handle tasks after the response has been sent to the browser.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Illuminate\\Http\\Response  $response\n"
"     * @return void\n"
"     */\n"
"    public function terminate($request, $response)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"

#: docs/8.x/middleware.md:block 67 (paragraph)
msgid "The `terminate` method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of routes or global middleware in the `app/Http/Kernel.php` file."
msgstr "`terminate` 方法應接收 Request 與 Response。定義好可終止的 Middleware (Terminable Middleware) 後，請將其加到 Route 列表或 `app/Http/Kernel.php` 檔案中的全域 Middleware 內。"

#: docs/8.x/middleware.md:block 68 (paragraph)
msgid "When calling the `terminate` method on your middleware, Laravel will resolve a fresh instance of the middleware from the [service container](/docs/{{version}}/container). If you would like to use the same middleware instance when the `handle` and `terminate` methods are called, register the middleware with the container using the container's `singleton` method. Typically this should be done in the `register` method of your `AppServiceProvider`:"
msgstr "呼叫 Middleware 上的 `terminate` 方法時，Laravel 會從 [Service Container] 中解析出這個 Middleware 的新實體。若想讓 `handle` 與 `terminate` 都在同一個 Middleware 實體上呼叫的話，請使用 Container 的 `singleton` 方法來想 Container 註冊這個 Middleware。一般來說，這個註冊應在 `AppServiceProvider` 的 `register` 方法中進行："

#: docs/8.x/middleware.md:block 69 (code)
msgid "use App\\Http\\Middleware\\TerminatingMiddleware;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(TerminatingMiddleware::class);\n"
"}\n"
msgstr "use App\\Http\\Middleware\\TerminatingMiddleware;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(TerminatingMiddleware::class);\n"
"}\n"

#: docs/9.x/middleware.md:block 15 (quote)
msgid "**Note** All middleware are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a middleware's constructor."
msgstr ""

#: docs/9.x/middleware.md:block 48 (code)
msgid "/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n\n"
"    'api' => [\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];\n"
msgstr "/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n\n"
"    'api' => [\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];\n"

#: docs/9.x/middleware.md:block 51 (quote)
msgid "**Note** Out of the box, the `web` and `api` middleware groups are automatically applied to your application's corresponding `routes/web.php` and `routes/api.php` files by the `App\\Providers\\RouteServiceProvider`."
msgstr ""

#: docs/9.x/middleware.md:block 55 (code)
msgid "/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Contracts\\Session\\Middleware\\AuthenticatesSessions::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];\n"
msgstr "/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Contracts\\Session\\Middleware\\AuthenticatesSessions::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];\n"

