msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 05:45\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/logging.pot\n"
"X-Crowdin-File-ID: 97\n"

# File: docs/8.x/logging.md, line: 1
# File: docs/master/logging.md, line: 1
#. type: Title #
#, no-wrap
msgid "Logging"
msgstr ""

# File: docs/8.x/logging.md, line: 16
# File: docs/master/logging.md, line: 16
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr ""

# File: docs/8.x/logging.md, line: 16
# File: docs/master/logging.md, line: 16
#. type: Plain text
#, no-wrap
msgid "- [Configuration](#configuration)\n"
"    - [Available Channel Drivers](#available-channel-drivers)\n"
"    - [Channel Prerequisites](#channel-prerequisites)\n"
"    - [Logging Deprecation Warnings](#logging-deprecation-warnings)\n"
"- [Building Log Stacks](#building-log-stacks)\n"
"- [Writing Log Messages](#writing-log-messages)\n"
"    - [Contextual Information](#contextual-information)\n"
"    - [Writing To Specific Channels](#writing-to-specific-channels)\n"
"- [Monolog Channel Customization](#monolog-channel-customization)\n"
"    - [Customizing Monolog For Channels](#customizing-monolog-for-channels)\n"
"    - [Creating Monolog Handler Channels](#creating-monolog-handler-channels)\n"
"    - [Creating Custom Channels Via Factories](#creating-custom-channels-via-factories)\n"
msgstr ""

# File: docs/8.x/logging.md, line: 18
# File: docs/master/logging.md, line: 18
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 18
# File: docs/master/logging.md, line: 18
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr ""

# File: docs/8.x/logging.md, line: 21
# File: docs/master/logging.md, line: 21
#. type: Plain text
msgid "To help you learn more about what's happening within your application, Laravel provides robust logging services that allow you to log messages to files, the system error log, and even to Slack to notify your entire team."
msgstr ""

# File: docs/8.x/logging.md, line: 23
# File: docs/master/logging.md, line: 23
#. type: Plain text
msgid "Laravel logging is based on \"channels\". Each channel represents a specific way of writing log information. For example, the `single` channel writes log files to a single log file, while the `slack` channel sends log messages to Slack. Log messages may be written to multiple channels based on their severity."
msgstr ""

# File: docs/8.x/logging.md, line: 25
# File: docs/master/logging.md, line: 25
#. type: Plain text
msgid "Under the hood, Laravel utilizes the [Monolog](https://github.com/Seldaek/monolog) library, which provides support for a variety of powerful log handlers. Laravel makes it a cinch to configure these handlers, allowing you to mix and match them to customize your application's log handling."
msgstr ""

# File: docs/8.x/logging.md, line: 27
# File: docs/master/logging.md, line: 27
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 27
# File: docs/master/logging.md, line: 27
#. type: Title ##
#, no-wrap
msgid "Configuration"
msgstr ""

# File: docs/8.x/logging.md, line: 30
# File: docs/master/logging.md, line: 30
#. type: Plain text
msgid "All of the configuration options for your application's logging behavior is housed in the `config/logging.php` configuration file. This file allows you to configure your application's log channels, so be sure to review each of the available channels and their options. We'll review a few common options below."
msgstr ""

# File: docs/8.x/logging.md, line: 32
# File: docs/master/logging.md, line: 32
#. type: Plain text
msgid "By default, Laravel will use the `stack` channel when logging messages. The `stack` channel is used to aggregate multiple log channels into a single channel. For more information on building stacks, check out the [documentation below](#building-log-stacks)."
msgstr ""

# File: docs/8.x/logging.md, line: 34
# File: docs/master/logging.md, line: 34
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuring-the-channel-name\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 34
# File: docs/master/logging.md, line: 34
#. type: Title ####
#, no-wrap
msgid "Configuring The Channel Name"
msgstr ""

# File: docs/8.x/logging.md, line: 37
# File: docs/master/logging.md, line: 37
#. type: Plain text
msgid "By default, Monolog is instantiated with a \"channel name\" that matches the current environment, such as `production` or `local`. To change this value, add a `name` option to your channel's configuration:"
msgstr ""

# File: docs/8.x/logging.md, line: 43
# File: docs/master/logging.md, line: 43
#. type: Plain text
#, no-wrap
msgid "    'stack' => [\n"
"        'driver' => 'stack',\n"
"        'name' => 'channel-name',\n"
"        'channels' => ['single', 'slack'],\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 45
# File: docs/master/logging.md, line: 45
#. type: Plain text
#, no-wrap
msgid "<a name=\"available-channel-drivers\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 45
# File: docs/master/logging.md, line: 45
#. type: Title ###
#, no-wrap
msgid "Available Channel Drivers"
msgstr ""

# File: docs/8.x/logging.md, line: 48
# File: docs/master/logging.md, line: 48
#. type: Plain text
msgid "Each log channel is powered by a \"driver\". The driver determines how and where the log message is actually recorded. The following log channel drivers are available in every Laravel application. An entry for most of these drivers is already present in your application's `config/logging.php` configuration file, so be sure to review this file to become familiar with its contents:"
msgstr ""

# File: docs/8.x/logging.md, line: 61
# File: docs/master/logging.md, line: 61
#. type: Plain text
msgid "Name | Description ------------- | ------------- `custom` | A driver that calls a specified factory to create a channel `daily` | A `RotatingFileHandler` based Monolog driver which rotates daily `errorlog` | An `ErrorLogHandler` based Monolog driver `monolog` | A Monolog factory driver that may use any supported Monolog handler `null` | A driver that discards all log messages `papertrail` | A `SyslogUdpHandler` based Monolog driver `single` | A single file or path based logger channel (`StreamHandler`)  `slack` | A `SlackWebhookHandler` based Monolog driver `stack` | A wrapper to facilitate creating \"multi-channel\" channels `syslog` | A `SyslogHandler` based Monolog driver"
msgstr ""

# File: docs/8.x/logging.md, line: 63
# File: docs/master/logging.md, line: 63
#. type: Plain text
#, no-wrap
msgid "> {tip} Check out the documentation on [advanced channel customization](#monolog-channel-customization) to learn more about the `monolog` and `custom` drivers.\n"
msgstr ""

# File: docs/8.x/logging.md, line: 65
# File: docs/master/logging.md, line: 65
#. type: Plain text
#, no-wrap
msgid "<a name=\"channel-prerequisites\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 65
# File: docs/master/logging.md, line: 65
#. type: Title ###
#, no-wrap
msgid "Channel Prerequisites"
msgstr ""

# File: docs/8.x/logging.md, line: 68
# File: docs/master/logging.md, line: 68
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuring-the-single-and-daily-channels\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 68
# File: docs/master/logging.md, line: 68
#. type: Title ####
#, no-wrap
msgid "Configuring The Single and Daily Channels"
msgstr ""

# File: docs/8.x/logging.md, line: 71
# File: docs/master/logging.md, line: 71
#. type: Plain text
msgid "The `single` and `daily` channels have three optional configuration options: `bubble`, `permission`, and `locking`."
msgstr ""

# File: docs/8.x/logging.md, line: 77
# File: docs/master/logging.md, line: 77
#. type: Plain text
msgid "Name | Description | Default ------------- | ------------- | ------------- `bubble` | Indicates if messages should bubble up to other channels after being handled | `true` `locking` | Attempt to lock the log file before writing to it | `false` `permission` | The log file's permissions | `0644`"
msgstr ""

# File: docs/8.x/logging.md, line: 79
# File: docs/master/logging.md, line: 79
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuring-the-papertrail-channel\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 79
# File: docs/master/logging.md, line: 79
#. type: Title ####
#, no-wrap
msgid "Configuring The Papertrail Channel"
msgstr ""

# File: docs/8.x/logging.md, line: 82
# File: docs/master/logging.md, line: 82
#. type: Plain text
msgid "The `papertrail` channel requires the `host` and `port` configuration options. You can obtain these values from [Papertrail](https://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-php-apps/#send-events-from-php-app)."
msgstr ""

# File: docs/8.x/logging.md, line: 84
# File: docs/master/logging.md, line: 84
#. type: Plain text
#, no-wrap
msgid "<a name=\"configuring-the-slack-channel\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 84
# File: docs/master/logging.md, line: 84
#. type: Title ####
#, no-wrap
msgid "Configuring The Slack Channel"
msgstr ""

# File: docs/8.x/logging.md, line: 87
# File: docs/master/logging.md, line: 87
#. type: Plain text
msgid "The `slack` channel requires a `url` configuration option. This URL should match a URL for an [incoming webhook](https://slack.com/apps/A0F7XDUAZ-incoming-webhooks) that you have configured for your Slack team."
msgstr ""

# File: docs/8.x/logging.md, line: 89
# File: docs/master/logging.md, line: 89
#. type: Plain text
msgid "By default, Slack will only receive logs at the `critical` level and above; however, you can adjust this in your `config/logging.php` configuration file by modifying the `level` configuration option within your Slack log channel's configuration array."
msgstr ""

# File: docs/8.x/logging.md, line: 91
# File: docs/master/logging.md, line: 91
#. type: Plain text
#, no-wrap
msgid "<a name=\"logging-deprecation-warnings\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 91
# File: docs/master/logging.md, line: 91
#. type: Title ###
#, no-wrap
msgid "Logging Deprecation Warnings"
msgstr ""

# File: docs/8.x/logging.md, line: 94
# File: docs/master/logging.md, line: 94
#. type: Plain text
msgid "PHP, Laravel, and other libraries often notify their users that some of their features have been deprecated and will be removed in a future version. If you would like to log these deprecation warnings, you may specify your preferred `deprecations` log channel in your application's `config/logging.php` configuration file:"
msgstr ""

# File: docs/8.x/logging.md, line: 96
# File: docs/master/logging.md, line: 96
#. type: Plain text
#, no-wrap
msgid "    'deprecations' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),\n"
msgstr ""

# File: docs/8.x/logging.md, line: 100
# File: docs/master/logging.md, line: 100
#. type: Plain text
#, no-wrap
msgid "    'channels' => [\n"
"        ...\n"
"    ]\n"
msgstr ""

# File: docs/8.x/logging.md, line: 102
# File: docs/master/logging.md, line: 102
#. type: Plain text
msgid "Or, you may define a log channel named `deprecations`. If a log channel with this name exists, it will always be used to log deprecations:"
msgstr ""

# File: docs/8.x/logging.md, line: 109
# File: docs/master/logging.md, line: 109
#. type: Plain text
#, no-wrap
msgid "    'channels' => [\n"
"        'deprecations' => [\n"
"            'driver' => 'single',\n"
"            'path' => storage_path('logs/php-deprecation-warnings.log'),\n"
"        ],\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 111
# File: docs/master/logging.md, line: 111
#. type: Plain text
#, no-wrap
msgid "<a name=\"building-log-stacks\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 111
# File: docs/master/logging.md, line: 111
#. type: Title ##
#, no-wrap
msgid "Building Log Stacks"
msgstr ""

# File: docs/8.x/logging.md, line: 114
# File: docs/master/logging.md, line: 114
#. type: Plain text
msgid "As mentioned previously, the `stack` driver allows you to combine multiple channels into a single log channel for convenience. To illustrate how to use log stacks, let's take a look at an example configuration that you might see in a production application:"
msgstr ""

# File: docs/8.x/logging.md, line: 120
# File: docs/master/logging.md, line: 120
#. type: Plain text
#, no-wrap
msgid "    'channels' => [\n"
"        'stack' => [\n"
"            'driver' => 'stack',\n"
"            'channels' => ['syslog', 'slack'],\n"
"        ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 125
# File: docs/master/logging.md, line: 125
#. type: Plain text
#, no-wrap
msgid "        'syslog' => [\n"
"            'driver' => 'syslog',\n"
"            'level' => 'debug',\n"
"        ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 134
# File: docs/master/logging.md, line: 134
#. type: Plain text
#, no-wrap
msgid "        'slack' => [\n"
"            'driver' => 'slack',\n"
"            'url' => env('LOG_SLACK_WEBHOOK_URL'),\n"
"            'username' => 'Laravel Log',\n"
"            'emoji' => ':boom:',\n"
"            'level' => 'critical',\n"
"        ],\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 136
# File: docs/master/logging.md, line: 136
#. type: Plain text
msgid "Let's dissect this configuration. First, notice our `stack` channel aggregates two other channels via its `channels` option: `syslog` and `slack`. So, when logging messages, both of these channels will have the opportunity to log the message. However, as we will see below, whether these channels actually log the message may be determined by the message's severity / \"level\"."
msgstr ""

# File: docs/8.x/logging.md, line: 138
# File: docs/master/logging.md, line: 138
#. type: Plain text
#, no-wrap
msgid "<a name=\"log-levels\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 138
# File: docs/master/logging.md, line: 138
#. type: Title ####
#, no-wrap
msgid "Log Levels"
msgstr ""

# File: docs/8.x/logging.md, line: 141
# File: docs/master/logging.md, line: 141
#. type: Plain text
msgid "Take note of the `level` configuration option present on the `syslog` and `slack` channel configurations in the example above. This option determines the minimum \"level\" a message must be in order to be logged by the channel. Monolog, which powers Laravel's logging services, offers all of the log levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424): **emergency**, **alert**, **critical**, **error**, **warning**, **notice**, **info**, and **debug**."
msgstr ""

# File: docs/8.x/logging.md, line: 143
# File: docs/master/logging.md, line: 143
#. type: Plain text
msgid "So, imagine we log a message using the `debug` method:"
msgstr ""

# File: docs/8.x/logging.md, line: 145
# File: docs/master/logging.md, line: 145
#. type: Plain text
#, no-wrap
msgid "    Log::debug('An informational message.');\n"
msgstr ""

# File: docs/8.x/logging.md, line: 147
# File: docs/master/logging.md, line: 147
#. type: Plain text
msgid "Given our configuration, the `syslog` channel will write the message to the system log; however, since the error message is not `critical` or above, it will not be sent to Slack. However, if we log an `emergency` message, it will be sent to both the system log and Slack since the `emergency` level is above our minimum level threshold for both channels:"
msgstr ""

# File: docs/8.x/logging.md, line: 149
# File: docs/master/logging.md, line: 149
#. type: Plain text
#, no-wrap
msgid "    Log::emergency('The system is down!');\n"
msgstr ""

# File: docs/8.x/logging.md, line: 151
# File: docs/master/logging.md, line: 151
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-log-messages\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 151
# File: docs/master/logging.md, line: 151
#. type: Title ##
#, no-wrap
msgid "Writing Log Messages"
msgstr ""

# File: docs/8.x/logging.md, line: 154
# File: docs/master/logging.md, line: 154
#. type: Plain text
msgid "You may write information to the logs using the `Log` [facade](/docs/{{version}}/facades). As previously mentioned, the logger provides the eight logging levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424): **emergency**, **alert**, **critical**, **error**, **warning**, **notice**, **info** and **debug**:"
msgstr ""

# File: docs/8.x/logging.md, line: 156
# File: docs/8.x/logging.md, line: 200
# File: docs/8.x/logging.md, line: 240
# File: docs/8.x/logging.md, line: 253
# File: docs/8.x/logging.md, line: 262
# File: docs/master/logging.md, line: 156
# File: docs/master/logging.md, line: 200
# File: docs/master/logging.md, line: 240
# File: docs/master/logging.md, line: 253
# File: docs/master/logging.md, line: 262
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Log;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 165
# File: docs/master/logging.md, line: 165
#. type: Plain text
#, no-wrap
msgid "    Log::emergency($message);\n"
"    Log::alert($message);\n"
"    Log::critical($message);\n"
"    Log::error($message);\n"
"    Log::warning($message);\n"
"    Log::notice($message);\n"
"    Log::info($message);\n"
"    Log::debug($message);\n"
msgstr ""

# File: docs/8.x/logging.md, line: 167
# File: docs/master/logging.md, line: 167
#. type: Plain text
msgid "You may call any of these methods to log a message for the corresponding level. By default, the message will be written to the default log channel as configured by your `logging` configuration file:"
msgstr ""

# File: docs/8.x/logging.md, line: 169
# File: docs/8.x/logging.md, line: 206
# File: docs/8.x/logging.md, line: 290
# File: docs/8.x/logging.md, line: 368
# File: docs/master/logging.md, line: 169
# File: docs/master/logging.md, line: 206
# File: docs/master/logging.md, line: 290
# File: docs/master/logging.md, line: 368
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr ""

# File: docs/8.x/logging.md, line: 171
# File: docs/master/logging.md, line: 171
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 175
# File: docs/master/logging.md, line: 175
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Log;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 187
# File: docs/master/logging.md, line: 187
#. type: Plain text
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            Log::info('Showing the user profile for user: '.$id);\n"
msgstr ""

# File: docs/8.x/logging.md, line: 193
# File: docs/master/logging.md, line: 193
#. type: Plain text
#, no-wrap
msgid "            return view('user.profile', [\n"
"                'user' => User::findOrFail($id)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/logging.md, line: 195
# File: docs/master/logging.md, line: 195
#. type: Plain text
#, no-wrap
msgid "<a name=\"contextual-information\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 195
# File: docs/master/logging.md, line: 195
#. type: Title ###
#, no-wrap
msgid "Contextual Information"
msgstr ""

# File: docs/8.x/logging.md, line: 198
# File: docs/master/logging.md, line: 198
#. type: Plain text
msgid "An array of contextual data may be passed to the log methods. This contextual data will be formatted and displayed with the log message:"
msgstr ""

# File: docs/8.x/logging.md, line: 202
# File: docs/master/logging.md, line: 202
#. type: Plain text
#, no-wrap
msgid "    Log::info('User failed to login.', ['id' => $user->id]);\n"
msgstr ""

# File: docs/8.x/logging.md, line: 204
# File: docs/master/logging.md, line: 204
#. type: Plain text
msgid "Occasionally, you may wish to specify some contextual information that should be included with all subsequent log entries. For example, you may wish to log a request ID that is associated with each incoming request to your application. To accomplish this, you may call the `Log` facade's `withContext` method:"
msgstr ""

# File: docs/8.x/logging.md, line: 208
# File: docs/master/logging.md, line: 208
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 212
# File: docs/master/logging.md, line: 212
#. type: Plain text
#, no-wrap
msgid "    use Closure;\n"
"    use Illuminate\\Support\\Facades\\Log;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 225
# File: docs/master/logging.md, line: 225
#. type: Plain text
#, no-wrap
msgid "    class AssignRequestId\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            $requestId = (string) Str::uuid();\n"
msgstr ""

# File: docs/8.x/logging.md, line: 229
# File: docs/master/logging.md, line: 229
#. type: Plain text
#, no-wrap
msgid "            Log::withContext([\n"
"                'request-id' => $requestId\n"
"            ]);\n"
msgstr ""

# File: docs/8.x/logging.md, line: 233
# File: docs/master/logging.md, line: 233
#. type: Plain text
#, no-wrap
msgid "            return $next($request)->header('Request-Id', $requestId);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/logging.md, line: 235
# File: docs/master/logging.md, line: 235
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-to-specific-channels\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 235
# File: docs/master/logging.md, line: 235
#. type: Title ###
#, no-wrap
msgid "Writing To Specific Channels"
msgstr ""

# File: docs/8.x/logging.md, line: 238
# File: docs/master/logging.md, line: 238
#. type: Plain text
msgid "Sometimes you may wish to log a message to a channel other than your application's default channel. You may use the `channel` method on the `Log` facade to retrieve and log to any channel defined in your configuration file:"
msgstr ""

# File: docs/8.x/logging.md, line: 242
# File: docs/master/logging.md, line: 242
#. type: Plain text
#, no-wrap
msgid "    Log::channel('slack')->info('Something happened!');\n"
msgstr ""

# File: docs/8.x/logging.md, line: 244
# File: docs/master/logging.md, line: 244
#. type: Plain text
msgid "If you would like to create an on-demand logging stack consisting of multiple channels, you may use the `stack` method:"
msgstr ""

# File: docs/8.x/logging.md, line: 246
# File: docs/master/logging.md, line: 246
#. type: Plain text
#, no-wrap
msgid "    Log::stack(['single', 'slack'])->info('Something happened!');\n"
msgstr ""

# File: docs/8.x/logging.md, line: 248
# File: docs/master/logging.md, line: 248
#. type: Plain text
#, no-wrap
msgid "<a name=\"on-demand-channels\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 248
# File: docs/master/logging.md, line: 248
#. type: Title ####
#, no-wrap
msgid "On-Demand Channels"
msgstr ""

# File: docs/8.x/logging.md, line: 251
# File: docs/master/logging.md, line: 251
#. type: Plain text
msgid "It is also possible to create an on-demand channel by providing the configuration at runtime without that configuration being present in your application's `logging` configuration file. To accomplish this, you may pass a configuration array to the `Log` facade's `build` method:"
msgstr ""

# File: docs/8.x/logging.md, line: 258
# File: docs/master/logging.md, line: 258
#. type: Plain text
#, no-wrap
msgid "    Log::build([\n"
"      'driver' => 'single',\n"
"      'path' => storage_path('logs/custom.log'),\n"
"    ])->info('Something happened!');\n"
msgstr ""

# File: docs/8.x/logging.md, line: 260
# File: docs/master/logging.md, line: 260
#. type: Plain text
msgid "You may also wish to include an on-demand channel in an on-demand logging stack. This can be achieved by including your on-demand channel instance in the array passed to the `stack` method:"
msgstr ""

# File: docs/8.x/logging.md, line: 267
# File: docs/master/logging.md, line: 267
#. type: Plain text
#, no-wrap
msgid "    $channel = Log::build([\n"
"      'driver' => 'single',\n"
"      'path' => storage_path('logs/custom.log'),\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/logging.md, line: 269
# File: docs/master/logging.md, line: 269
#. type: Plain text
#, no-wrap
msgid "    Log::stack(['slack', $channel])->info('Something happened!');\n"
msgstr ""

# File: docs/8.x/logging.md, line: 271
# File: docs/master/logging.md, line: 271
#. type: Plain text
#, no-wrap
msgid "<a name=\"monolog-channel-customization\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 271
# File: docs/master/logging.md, line: 271
#. type: Title ##
#, no-wrap
msgid "Monolog Channel Customization"
msgstr ""

# File: docs/8.x/logging.md, line: 274
# File: docs/master/logging.md, line: 274
#. type: Plain text
#, no-wrap
msgid "<a name=\"customizing-monolog-for-channels\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 274
# File: docs/master/logging.md, line: 274
#. type: Title ###
#, no-wrap
msgid "Customizing Monolog For Channels"
msgstr ""

# File: docs/8.x/logging.md, line: 277
# File: docs/master/logging.md, line: 277
#. type: Plain text
msgid "Sometimes you may need complete control over how Monolog is configured for an existing channel. For example, you may want to configure a custom Monolog `FormatterInterface` implementation for Laravel's built-in `single` channel."
msgstr ""

# File: docs/8.x/logging.md, line: 279
# File: docs/master/logging.md, line: 279
#. type: Plain text
msgid "To get started, define a `tap` array on the channel's configuration. The `tap` array should contain a list of classes that should have an opportunity to customize (or \"tap\" into) the Monolog instance after it is created. There is no conventional location where these classes should be placed, so you are free to create a directory within your application to contain these classes:"
msgstr ""

# File: docs/8.x/logging.md, line: 286
# File: docs/master/logging.md, line: 286
#. type: Plain text
#, no-wrap
msgid "    'single' => [\n"
"        'driver' => 'single',\n"
"        'tap' => [App\\Logging\\CustomizeFormatter::class],\n"
"        'path' => storage_path('logs/laravel.log'),\n"
"        'level' => 'debug',\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 288
# File: docs/master/logging.md, line: 288
#. type: Plain text
msgid "Once you have configured the `tap` option on your channel, you're ready to define the class that will customize your Monolog instance. This class only needs a single method: `__invoke`, which receives an `Illuminate\\Log\\Logger` instance. The `Illuminate\\Log\\Logger` instance proxies all method calls to the underlying Monolog instance:"
msgstr ""

# File: docs/8.x/logging.md, line: 292
# File: docs/8.x/logging.md, line: 370
# File: docs/master/logging.md, line: 292
# File: docs/master/logging.md, line: 370
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Logging;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 294
# File: docs/master/logging.md, line: 294
#. type: Plain text
#, no-wrap
msgid "    use Monolog\\Formatter\\LineFormatter;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 312
# File: docs/master/logging.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    class CustomizeFormatter\n"
"    {\n"
"        /**\n"
"         * Customize the given logger instance.\n"
"         *\n"
"         * @param  \\Illuminate\\Log\\Logger  $logger\n"
"         * @return void\n"
"         */\n"
"        public function __invoke($logger)\n"
"        {\n"
"            foreach ($logger->getHandlers() as $handler) {\n"
"                $handler->setFormatter(new LineFormatter(\n"
"                    '[%datetime%] %channel%.%level_name%: %message% %context% %extra%'\n"
"                ));\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/logging.md, line: 314
# File: docs/master/logging.md, line: 314
#. type: Plain text
#, no-wrap
msgid "> {tip} All of your \"tap\" classes are resolved by the [service container](/docs/{{version}}/container), so any constructor dependencies they require will automatically be injected.\n"
msgstr ""

# File: docs/8.x/logging.md, line: 316
# File: docs/master/logging.md, line: 316
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-monolog-handler-channels\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 316
# File: docs/master/logging.md, line: 316
#. type: Title ###
#, no-wrap
msgid "Creating Monolog Handler Channels"
msgstr ""

# File: docs/8.x/logging.md, line: 319
# File: docs/master/logging.md, line: 319
#. type: Plain text
msgid "Monolog has a variety of [available handlers](https://github.com/Seldaek/monolog/tree/main/src/Monolog/Handler) and Laravel does not include a built-in channel for each one. In some cases, you may wish to create a custom channel that is merely an instance of a specific Monolog handler that does not have a corresponding Laravel log driver.  These channels can be easily created using the `monolog` driver."
msgstr ""

# File: docs/8.x/logging.md, line: 321
# File: docs/master/logging.md, line: 321
#. type: Plain text
msgid "When using the `monolog` driver, the `handler` configuration option is used to specify which handler will be instantiated. Optionally, any constructor parameters the handler needs may be specified using the `with` configuration option:"
msgstr ""

# File: docs/8.x/logging.md, line: 330
# File: docs/master/logging.md, line: 330
#. type: Plain text
#, no-wrap
msgid "    'logentries' => [\n"
"        'driver'  => 'monolog',\n"
"        'handler' => Monolog\\Handler\\SyslogUdpHandler::class,\n"
"        'with' => [\n"
"            'host' => 'my.logentries.internal.datahubhost.company.com',\n"
"            'port' => '10000',\n"
"        ],\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 332
# File: docs/master/logging.md, line: 332
#. type: Plain text
#, no-wrap
msgid "<a name=\"monolog-formatters\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 332
# File: docs/master/logging.md, line: 332
#. type: Title ####
#, no-wrap
msgid "Monolog Formatters"
msgstr ""

# File: docs/8.x/logging.md, line: 335
# File: docs/master/logging.md, line: 335
#. type: Plain text
msgid "When using the `monolog` driver, the Monolog `LineFormatter` will be used as the default formatter. However, you may customize the type of formatter passed to the handler using the `formatter` and `formatter_with` configuration options:"
msgstr ""

# File: docs/8.x/logging.md, line: 344
# File: docs/master/logging.md, line: 344
#. type: Plain text
#, no-wrap
msgid "    'browser' => [\n"
"        'driver' => 'monolog',\n"
"        'handler' => Monolog\\Handler\\BrowserConsoleHandler::class,\n"
"        'formatter' => Monolog\\Formatter\\HtmlFormatter::class,\n"
"        'formatter_with' => [\n"
"            'dateFormat' => 'Y-m-d',\n"
"        ],\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 346
# File: docs/master/logging.md, line: 346
#. type: Plain text
msgid "If you are using a Monolog handler that is capable of providing its own formatter, you may set the value of the `formatter` configuration option to `default`:"
msgstr ""

# File: docs/8.x/logging.md, line: 352
# File: docs/master/logging.md, line: 352
#. type: Plain text
#, no-wrap
msgid "    'newrelic' => [\n"
"        'driver' => 'monolog',\n"
"        'handler' => Monolog\\Handler\\NewRelicHandler::class,\n"
"        'formatter' => 'default',\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 354
# File: docs/master/logging.md, line: 354
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-custom-channels-via-factories\"></a>\n"
msgstr ""

# File: docs/8.x/logging.md, line: 354
# File: docs/master/logging.md, line: 354
#. type: Title ###
#, no-wrap
msgid "Creating Custom Channels Via Factories"
msgstr ""

# File: docs/8.x/logging.md, line: 357
# File: docs/master/logging.md, line: 357
#. type: Plain text
msgid "If you would like to define an entirely custom channel in which you have full control over Monolog's instantiation and configuration, you may specify a `custom` driver type in your `config/logging.php` configuration file. Your configuration should include a `via` option that contains the name of the factory class which will be invoked to create the Monolog instance:"
msgstr ""

# File: docs/8.x/logging.md, line: 364
# File: docs/master/logging.md, line: 364
#. type: Plain text
#, no-wrap
msgid "    'channels' => [\n"
"        'example-custom-channel' => [\n"
"            'driver' => 'custom',\n"
"            'via' => App\\Logging\\CreateCustomLogger::class,\n"
"        ],\n"
"    ],\n"
msgstr ""

# File: docs/8.x/logging.md, line: 366
# File: docs/master/logging.md, line: 366
#. type: Plain text
msgid "Once you have configured the `custom` driver channel, you're ready to define the class that will create your Monolog instance. This class only needs a single `__invoke` method which should return the Monolog logger instance. The method will receive the channels configuration array as its only argument:"
msgstr ""

# File: docs/8.x/logging.md, line: 372
# File: docs/master/logging.md, line: 372
#. type: Plain text
#, no-wrap
msgid "    use Monolog\\Logger;\n"
msgstr ""

# File: docs/8.x/logging.md, line: 385
# File: docs/master/logging.md, line: 385
#. type: Plain text
#, no-wrap
msgid "    class CreateCustomLogger\n"
"    {\n"
"        /**\n"
"         * Create a custom Monolog instance.\n"
"         *\n"
"         * @param  array  $config\n"
"         * @return \\Monolog\\Logger\n"
"         */\n"
"        public function __invoke(array $config)\n"
"        {\n"
"            return new Logger(...);\n"
"        }\n"
"    }\n"
msgstr ""

