msgid ""
msgstr ""

#: ./docs/8.x/requests.md:1
#: ./docs/9.x/requests.md:1
#: ./docs/10.x/requests.md:1
#: ./docs/11.x/requests.md:1
#: ./docs/master/requests.md:1
msgid "HTTP Requests"
msgstr ""

#: ./docs/8.x/requests.md:3
#: ./docs/9.x/requests.md:3
#: ./docs/10.x/requests.md:3
#: ./docs/11.x/requests.md:3
#: ./docs/master/requests.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/requests.md:4
#: ./docs/9.x/requests.md:4
#: ./docs/10.x/requests.md:4
#: ./docs/11.x/requests.md:4
#: ./docs/master/requests.md:4
msgid "[Interacting With The Request](#interacting-with-the-request)"
msgstr ""

#: ./docs/10.x/requests.md:5
#: ./docs/11.x/requests.md:5
#: ./docs/master/requests.md:5
msgid "[Accessing the Request](#accessing-the-request)"
msgstr ""

#: ./docs/8.x/requests.md:5
#: ./docs/9.x/requests.md:5
msgid "[Accessing The Request](#accessing-the-request)"
msgstr ""

#: ./docs/10.x/requests.md:6
#: ./docs/11.x/requests.md:6
#: ./docs/master/requests.md:6
msgid "[Request Path, Host, and Method](#request-path-and-method)"
msgstr ""

#: ./docs/8.x/requests.md:6
msgid "[Request Path & Method](#request-path-and-method)"
msgstr ""

#: ./docs/9.x/requests.md:6
msgid "[Request Path, Host, & Method](#request-path-and-method)"
msgstr ""

#: ./docs/8.x/requests.md:7
#: ./docs/9.x/requests.md:7
#: ./docs/10.x/requests.md:7
#: ./docs/11.x/requests.md:7
#: ./docs/master/requests.md:7
msgid "[Request Headers](#request-headers)"
msgstr ""

#: ./docs/8.x/requests.md:8
#: ./docs/9.x/requests.md:8
#: ./docs/10.x/requests.md:8
#: ./docs/11.x/requests.md:8
#: ./docs/master/requests.md:8
msgid "[Request IP Address](#request-ip-address)"
msgstr ""

#: ./docs/8.x/requests.md:9
#: ./docs/9.x/requests.md:9
#: ./docs/10.x/requests.md:9
#: ./docs/11.x/requests.md:9
#: ./docs/master/requests.md:9
msgid "[Content Negotiation](#content-negotiation)"
msgstr ""

#: ./docs/8.x/requests.md:10
#: ./docs/9.x/requests.md:10
#: ./docs/10.x/requests.md:10
#: ./docs/11.x/requests.md:10
#: ./docs/master/requests.md:10
msgid "[PSR-7 Requests](#psr7-requests)"
msgstr ""

#: ./docs/8.x/requests.md:11
#: ./docs/9.x/requests.md:11
#: ./docs/10.x/requests.md:11
#: ./docs/11.x/requests.md:11
#: ./docs/master/requests.md:11
msgid "[Input](#input)"
msgstr ""

#: ./docs/8.x/requests.md:12
#: ./docs/9.x/requests.md:12
#: ./docs/10.x/requests.md:12
#: ./docs/11.x/requests.md:12
#: ./docs/master/requests.md:12
msgid "[Retrieving Input](#retrieving-input)"
msgstr ""

#: ./docs/10.x/requests.md:13
#: ./docs/11.x/requests.md:13
#: ./docs/master/requests.md:13
msgid "[Input Presence](#input-presence)"
msgstr ""

#: ./docs/8.x/requests.md:13
#: ./docs/9.x/requests.md:13
msgid "[Determining If Input Is Present](#determining-if-input-is-present)"
msgstr ""

#: ./docs/8.x/requests.md:14
#: ./docs/9.x/requests.md:14
#: ./docs/10.x/requests.md:14
#: ./docs/11.x/requests.md:14
#: ./docs/master/requests.md:14
msgid "[Merging Additional Input](#merging-additional-input)"
msgstr ""

#: ./docs/8.x/requests.md:15
#: ./docs/9.x/requests.md:15
#: ./docs/10.x/requests.md:15
#: ./docs/11.x/requests.md:15
#: ./docs/master/requests.md:15
msgid "[Old Input](#old-input)"
msgstr ""

#: ./docs/8.x/requests.md:16
#: ./docs/9.x/requests.md:16
#: ./docs/10.x/requests.md:16
#: ./docs/11.x/requests.md:16
#: ./docs/master/requests.md:16
msgid "[Cookies](#cookies)"
msgstr ""

#: ./docs/10.x/requests.md:17
#: ./docs/11.x/requests.md:17
#: ./docs/master/requests.md:17
msgid "[Input Trimming and Normalization](#input-trimming-and-normalization)"
msgstr ""

#: ./docs/8.x/requests.md:17
#: ./docs/9.x/requests.md:17
msgid "[Input Trimming & Normalization](#input-trimming-and-normalization)"
msgstr ""

#: ./docs/8.x/requests.md:18
#: ./docs/9.x/requests.md:18
#: ./docs/10.x/requests.md:18
#: ./docs/11.x/requests.md:18
#: ./docs/master/requests.md:18
msgid "[Files](#files)"
msgstr ""

#: ./docs/8.x/requests.md:19
#: ./docs/9.x/requests.md:19
#: ./docs/10.x/requests.md:19
#: ./docs/11.x/requests.md:19
#: ./docs/master/requests.md:19
msgid "[Retrieving Uploaded Files](#retrieving-uploaded-files)"
msgstr ""

#: ./docs/8.x/requests.md:20
#: ./docs/9.x/requests.md:20
#: ./docs/10.x/requests.md:20
#: ./docs/11.x/requests.md:20
#: ./docs/master/requests.md:20
msgid "[Storing Uploaded Files](#storing-uploaded-files)"
msgstr ""

#: ./docs/8.x/requests.md:21
#: ./docs/9.x/requests.md:21
#: ./docs/10.x/requests.md:21
#: ./docs/11.x/requests.md:21
#: ./docs/master/requests.md:21
msgid "[Configuring Trusted Proxies](#configuring-trusted-proxies)"
msgstr ""

#: ./docs/8.x/requests.md:22
#: ./docs/9.x/requests.md:22
#: ./docs/10.x/requests.md:22
#: ./docs/11.x/requests.md:22
#: ./docs/master/requests.md:22
msgid "[Configuring Trusted Hosts](#configuring-trusted-hosts)"
msgstr ""

#: ./docs/8.x/requests.md:24
#: ./docs/9.x/requests.md:24
#: ./docs/10.x/requests.md:24
#: ./docs/11.x/requests.md:24
#: ./docs/master/requests.md:24
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:25
#: ./docs/9.x/requests.md:25
#: ./docs/10.x/requests.md:25
#: ./docs/11.x/requests.md:25
#: ./docs/master/requests.md:25
msgid "Introduction"
msgstr ""

#: ./docs/8.x/requests.md:27
#: ./docs/9.x/requests.md:27
#: ./docs/10.x/requests.md:27
#: ./docs/11.x/requests.md:27
#: ./docs/master/requests.md:27
msgid "Laravel's `Illuminate\\Http\\Request` class provides an object-oriented way to interact with the current HTTP request being handled by your application as well as retrieve the input, cookies, and files that were submitted with the request."
msgstr ""

#: ./docs/8.x/requests.md:29
#: ./docs/9.x/requests.md:29
#: ./docs/10.x/requests.md:29
#: ./docs/11.x/requests.md:29
#: ./docs/master/requests.md:29
#~ msgctxt "P"
#~ msgid "<a name=\"interacting-with-the-request\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:30
#: ./docs/9.x/requests.md:30
#: ./docs/10.x/requests.md:30
#: ./docs/11.x/requests.md:30
#: ./docs/master/requests.md:30
msgid "Interacting With The Request"
msgstr ""

#: ./docs/8.x/requests.md:32
#: ./docs/9.x/requests.md:32
#: ./docs/10.x/requests.md:32
#: ./docs/11.x/requests.md:32
#: ./docs/master/requests.md:32
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-the-request\"></a>"
#~ msgstr ""

#: ./docs/10.x/requests.md:33
#: ./docs/11.x/requests.md:33
#: ./docs/master/requests.md:33
msgid "Accessing the Request"
msgstr ""

#: ./docs/8.x/requests.md:33
#: ./docs/9.x/requests.md:33
msgid "Accessing The Request"
msgstr ""

#: ./docs/8.x/requests.md:35
#: ./docs/9.x/requests.md:35
#: ./docs/10.x/requests.md:35
#: ./docs/11.x/requests.md:35
#: ./docs/master/requests.md:35
msgid "To obtain an instance of the current HTTP request via dependency injection, you should type-hint the `Illuminate\\Http\\Request` class on your route closure or controller method. The incoming request instance will automatically be injected by the Laravel [service container](/docs/{{version}}/container):"
msgstr ""

#: ./docs/10.x/requests.md:37
#: ./docs/11.x/requests.md:37
#: ./docs/master/requests.md:37
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new user.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        $name = $request->input('name');\n"
"\n"
"        // Store the user...\n"
"\n"
"        return redirect('/users');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:37
#: ./docs/9.x/requests.md:37
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Store a new user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $name = $request->input('name');\n"
"\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:59
#: ./docs/9.x/requests.md:59
#: ./docs/10.x/requests.md:59
#: ./docs/11.x/requests.md:59
#: ./docs/master/requests.md:59
msgid "As mentioned, you may also type-hint the `Illuminate\\Http\\Request` class on a route closure. The service container will automatically inject the incoming request into the closure when it is executed:"
msgstr ""

#: ./docs/10.x/requests.md:61
#: ./docs/11.x/requests.md:61
#: ./docs/master/requests.md:61
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/', function (Request $request) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:61
#: ./docs/9.x/requests.md:61
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/', function (Request $request) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:67
#: ./docs/9.x/requests.md:67
#: ./docs/10.x/requests.md:67
#: ./docs/11.x/requests.md:67
#: ./docs/master/requests.md:67
#~ msgctxt "P"
#~ msgid "<a name=\"dependency-injection-route-parameters\"></a>"
#~ msgstr ""

#: ./docs/10.x/requests.md:68
#: ./docs/11.x/requests.md:68
#: ./docs/master/requests.md:68
msgid "Dependency Injection and Route Parameters"
msgstr ""

#: ./docs/8.x/requests.md:68
#: ./docs/9.x/requests.md:68
msgid "Dependency Injection & Route Parameters"
msgstr ""

#: ./docs/8.x/requests.md:70
#: ./docs/9.x/requests.md:70
#: ./docs/10.x/requests.md:70
#: ./docs/11.x/requests.md:70
#: ./docs/master/requests.md:70
msgid "If your controller method is also expecting input from a route parameter you should list your route parameters after your other dependencies. For example, if your route is defined like so:"
msgstr ""

#: ./docs/8.x/requests.md:72
#: ./docs/9.x/requests.md:72
#: ./docs/10.x/requests.md:72
#: ./docs/11.x/requests.md:72
#: ./docs/master/requests.md:72
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"Route::put('/user/{id}', [UserController::class, 'update']);"
msgstr ""

#: ./docs/8.x/requests.md:76
#: ./docs/9.x/requests.md:76
#: ./docs/10.x/requests.md:76
#: ./docs/11.x/requests.md:76
#: ./docs/master/requests.md:76
msgid "You may still type-hint the `Illuminate\\Http\\Request` and access your `id` route parameter by defining your controller method as follows:"
msgstr ""

#: ./docs/10.x/requests.md:78
#: ./docs/11.x/requests.md:78
#: ./docs/master/requests.md:78
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the specified user.\n"
"     */\n"
"    public function update(Request $request, string $id): RedirectResponse\n"
"    {\n"
"        // Update the user...\n"
"\n"
"        return redirect('/users');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:78
#: ./docs/9.x/requests.md:78
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the specified user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  string  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, $id)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/requests.md:99
#: ./docs/11.x/requests.md:99
#: ./docs/master/requests.md:99
msgid "Request Path, Host, and Method"
msgstr ""

#: ./docs/8.x/requests.md:99
#: ./docs/9.x/requests.md:99
#: ./docs/10.x/requests.md:98
#: ./docs/11.x/requests.md:98
#: ./docs/master/requests.md:98
#~ msgctxt "P"
#~ msgid "<a name=\"request-path-and-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:100
msgid "Request Path & Method"
msgstr ""

#: ./docs/9.x/requests.md:100
msgid "Request Path, Host, & Method"
msgstr ""

#: ./docs/8.x/requests.md:102
#: ./docs/9.x/requests.md:102
#: ./docs/10.x/requests.md:101
#: ./docs/11.x/requests.md:101
#: ./docs/master/requests.md:101
msgid "The `Illuminate\\Http\\Request` instance provides a variety of methods for examining the incoming HTTP request and extends the `Symfony\\Component\\HttpFoundation\\Request` class. We will discuss a few of the most important methods below."
msgstr ""

#: ./docs/10.x/requests.md:104
#: ./docs/11.x/requests.md:104
#: ./docs/master/requests.md:104
msgid "Retrieving the Request Path"
msgstr ""

#: ./docs/8.x/requests.md:104
#: ./docs/9.x/requests.md:104
#: ./docs/10.x/requests.md:103
#: ./docs/11.x/requests.md:103
#: ./docs/master/requests.md:103
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-the-request-path\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:105
#: ./docs/9.x/requests.md:105
msgid "Retrieving The Request Path"
msgstr ""

#: ./docs/8.x/requests.md:107
#: ./docs/9.x/requests.md:107
#: ./docs/10.x/requests.md:106
#: ./docs/11.x/requests.md:106
#: ./docs/master/requests.md:106
msgid "The `path` method returns the request's path information. So, if the incoming request is targeted at `http://example.com/foo/bar`, the `path` method will return `foo/bar`:"
msgstr ""

#: ./docs/8.x/requests.md:109
#: ./docs/9.x/requests.md:109
#: ./docs/10.x/requests.md:108
#: ./docs/11.x/requests.md:108
#: ./docs/master/requests.md:108
msgid "$uri = $request->path();"
msgstr ""

#: ./docs/10.x/requests.md:111
#: ./docs/11.x/requests.md:111
#: ./docs/master/requests.md:111
msgid "Inspecting the Request Path / Route"
msgstr ""

#: ./docs/8.x/requests.md:111
#: ./docs/9.x/requests.md:111
#: ./docs/10.x/requests.md:110
#: ./docs/11.x/requests.md:110
#: ./docs/master/requests.md:110
#~ msgctxt "P"
#~ msgid "<a name=\"inspecting-the-request-path\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:112
#: ./docs/9.x/requests.md:112
msgid "Inspecting The Request Path / Route"
msgstr ""

#: ./docs/8.x/requests.md:114
#: ./docs/9.x/requests.md:114
#: ./docs/10.x/requests.md:113
#: ./docs/11.x/requests.md:113
#: ./docs/master/requests.md:113
msgid "The `is` method allows you to verify that the incoming request path matches a given pattern. You may use the `*` character as a wildcard when utilizing this method:"
msgstr ""

#: ./docs/10.x/requests.md:115
#: ./docs/11.x/requests.md:115
#: ./docs/master/requests.md:115
msgid ""
"if ($request->is('admin/*')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:116
#: ./docs/9.x/requests.md:116
msgid ""
"if ($request->is('admin/*')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:120
#: ./docs/9.x/requests.md:120
#: ./docs/10.x/requests.md:119
#: ./docs/11.x/requests.md:119
#: ./docs/master/requests.md:119
msgid "Using the `routeIs` method, you may determine if the incoming request has matched a [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#: ./docs/10.x/requests.md:121
#: ./docs/11.x/requests.md:121
#: ./docs/master/requests.md:121
msgid ""
"if ($request->routeIs('admin.*')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:122
#: ./docs/9.x/requests.md:122
msgid ""
"if ($request->routeIs('admin.*')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/requests.md:126
#: ./docs/11.x/requests.md:126
#: ./docs/master/requests.md:126
msgid "Retrieving the Request URL"
msgstr ""

#: ./docs/8.x/requests.md:126
#: ./docs/9.x/requests.md:126
#: ./docs/10.x/requests.md:125
#: ./docs/11.x/requests.md:125
#: ./docs/master/requests.md:125
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-the-request-url\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:127
#: ./docs/9.x/requests.md:127
msgid "Retrieving The Request URL"
msgstr ""

#: ./docs/8.x/requests.md:129
#: ./docs/9.x/requests.md:129
#: ./docs/10.x/requests.md:128
#: ./docs/11.x/requests.md:128
#: ./docs/master/requests.md:128
msgid "To retrieve the full URL for the incoming request you may use the `url` or `fullUrl` methods. The `url` method will return the URL without the query string, while the `fullUrl` method includes the query string:"
msgstr ""

#: ./docs/8.x/requests.md:131
#: ./docs/9.x/requests.md:131
#: ./docs/10.x/requests.md:130
#: ./docs/11.x/requests.md:130
#: ./docs/master/requests.md:130
msgid ""
"$url = $request->url();\n"
"\n"
"$urlWithQueryString = $request->fullUrl();"
msgstr ""

#: ./docs/8.x/requests.md:135
#: ./docs/9.x/requests.md:135
#: ./docs/10.x/requests.md:134
#: ./docs/11.x/requests.md:134
#: ./docs/master/requests.md:134
msgid "If you would like to append query string data to the current URL, you may call the `fullUrlWithQuery` method. This method merges the given array of query string variables with the current query string:"
msgstr ""

#: ./docs/8.x/requests.md:137
#: ./docs/9.x/requests.md:137
#: ./docs/10.x/requests.md:136
#: ./docs/11.x/requests.md:136
#: ./docs/master/requests.md:136
msgid "$request->fullUrlWithQuery(['type' => 'phone']);"
msgstr ""

#: ./docs/10.x/requests.md:138
#: ./docs/11.x/requests.md:138
#: ./docs/master/requests.md:138
msgid "If you would like to get the current URL without a given query string parameter, you may utilize the `fullUrlWithoutQuery` method:"
msgstr ""

#: ./docs/8.x/requests.md:139
#: ./docs/9.x/requests.md:148
#: ./docs/10.x/requests.md:153
#: ./docs/11.x/requests.md:153
#: ./docs/master/requests.md:153
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-the-request-method\"></a>"
#~ msgstr ""

#: ./docs/9.x/requests.md:139
#: ./docs/10.x/requests.md:144
#: ./docs/11.x/requests.md:144
#: ./docs/master/requests.md:144
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-the-request-host\"></a>"
#~ msgstr ""

#: ./docs/10.x/requests.md:140
#: ./docs/11.x/requests.md:140
#: ./docs/master/requests.md:140
msgid "$request->fullUrlWithoutQuery(['type']);"
msgstr ""

#: ./docs/8.x/requests.md:140
#: ./docs/9.x/requests.md:149
msgid "Retrieving The Request Method"
msgstr ""

#: ./docs/9.x/requests.md:140
msgid "Retrieving The Request Host"
msgstr ""

#: ./docs/8.x/requests.md:142
#: ./docs/9.x/requests.md:151
#: ./docs/10.x/requests.md:156
#: ./docs/11.x/requests.md:156
#: ./docs/master/requests.md:156
msgid "The `method` method will return the HTTP verb for the request. You may use the `isMethod` method to verify that the HTTP verb matches a given string:"
msgstr ""

#: ./docs/9.x/requests.md:142
#: ./docs/10.x/requests.md:147
#: ./docs/11.x/requests.md:147
#: ./docs/master/requests.md:147
msgid "You may retrieve the \"host\" of the incoming request via the `host`, `httpHost`, and `schemeAndHttpHost` methods:"
msgstr ""

#: ./docs/8.x/requests.md:144
#: ./docs/9.x/requests.md:153
msgid ""
"$method = $request->method();\n"
"\n"
"if ($request->isMethod('post')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/requests.md:144
#: ./docs/10.x/requests.md:149
#: ./docs/11.x/requests.md:149
#: ./docs/master/requests.md:149
msgid ""
"$request->host();\n"
"$request->httpHost();\n"
"$request->schemeAndHttpHost();"
msgstr ""

#: ./docs/10.x/requests.md:145
#: ./docs/11.x/requests.md:145
#: ./docs/master/requests.md:145
msgid "Retrieving the Request Host"
msgstr ""

#: ./docs/8.x/requests.md:150
#: ./docs/9.x/requests.md:159
#: ./docs/10.x/requests.md:164
#: ./docs/11.x/requests.md:164
#: ./docs/master/requests.md:164
#~ msgctxt "P"
#~ msgid "<a name=\"request-headers\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:151
#: ./docs/9.x/requests.md:160
#: ./docs/10.x/requests.md:165
#: ./docs/11.x/requests.md:165
#: ./docs/master/requests.md:165
msgid "Request Headers"
msgstr ""

#: ./docs/8.x/requests.md:153
#: ./docs/9.x/requests.md:162
#: ./docs/10.x/requests.md:167
#: ./docs/11.x/requests.md:167
#: ./docs/master/requests.md:167
msgid "You may retrieve a request header from the `Illuminate\\Http\\Request` instance using the `header` method. If the header is not present on the request, `null` will be returned. However, the `header` method accepts an optional second argument that will be returned if the header is not present on the request:"
msgstr ""

#: ./docs/10.x/requests.md:154
#: ./docs/11.x/requests.md:154
#: ./docs/master/requests.md:154
msgid "Retrieving the Request Method"
msgstr ""

#: ./docs/8.x/requests.md:155
#: ./docs/9.x/requests.md:164
#: ./docs/10.x/requests.md:169
#: ./docs/11.x/requests.md:169
#: ./docs/master/requests.md:169
msgid ""
"$value = $request->header('X-Header-Name');\n"
"\n"
"$value = $request->header('X-Header-Name', 'default');"
msgstr ""

#: ./docs/10.x/requests.md:158
#: ./docs/11.x/requests.md:158
#: ./docs/master/requests.md:158
msgid ""
"$method = $request->method();\n"
"\n"
"if ($request->isMethod('post')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:159
#: ./docs/9.x/requests.md:168
#: ./docs/10.x/requests.md:173
#: ./docs/11.x/requests.md:173
#: ./docs/master/requests.md:173
msgid "The `hasHeader` method may be used to determine if the request contains a given header:"
msgstr ""

#: ./docs/8.x/requests.md:161
#: ./docs/9.x/requests.md:170
msgid ""
"if ($request->hasHeader('X-Header-Name')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:165
#: ./docs/9.x/requests.md:174
#: ./docs/10.x/requests.md:179
#: ./docs/11.x/requests.md:179
#: ./docs/master/requests.md:179
msgid "For convenience, the `bearerToken` method may be used to retrieve a bearer token from the `Authorization` header. If no such header is present, an empty string will be returned:"
msgstr ""

#: ./docs/8.x/requests.md:167
#: ./docs/9.x/requests.md:176
#: ./docs/10.x/requests.md:181
#: ./docs/11.x/requests.md:181
#: ./docs/master/requests.md:181
msgid "$token = $request->bearerToken();"
msgstr ""

#: ./docs/8.x/requests.md:169
#: ./docs/9.x/requests.md:178
#: ./docs/10.x/requests.md:183
#: ./docs/11.x/requests.md:183
#: ./docs/master/requests.md:183
#~ msgctxt "P"
#~ msgid "<a name=\"request-ip-address\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:170
#: ./docs/9.x/requests.md:179
#: ./docs/10.x/requests.md:184
#: ./docs/11.x/requests.md:184
#: ./docs/master/requests.md:184
msgid "Request IP Address"
msgstr ""

#: ./docs/8.x/requests.md:172
#: ./docs/9.x/requests.md:181
#: ./docs/10.x/requests.md:186
#: ./docs/11.x/requests.md:186
#: ./docs/master/requests.md:186
msgid "The `ip` method may be used to retrieve the IP address of the client that made the request to your application:"
msgstr ""

#: ./docs/8.x/requests.md:174
#: ./docs/9.x/requests.md:183
#: ./docs/10.x/requests.md:188
#: ./docs/11.x/requests.md:188
#: ./docs/master/requests.md:188
msgid "$ipAddress = $request->ip();"
msgstr ""

#: ./docs/10.x/requests.md:175
#: ./docs/11.x/requests.md:175
#: ./docs/master/requests.md:175
msgid ""
"if ($request->hasHeader('X-Header-Name')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:176
#: ./docs/9.x/requests.md:185
#: ./docs/10.x/requests.md:196
#: ./docs/11.x/requests.md:196
#: ./docs/master/requests.md:196
#~ msgctxt "P"
#~ msgid "<a name=\"content-negotiation\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:177
#: ./docs/9.x/requests.md:186
#: ./docs/10.x/requests.md:197
#: ./docs/11.x/requests.md:197
#: ./docs/master/requests.md:197
msgid "Content Negotiation"
msgstr ""

#: ./docs/8.x/requests.md:179
#: ./docs/9.x/requests.md:188
#: ./docs/10.x/requests.md:199
#: ./docs/11.x/requests.md:199
#: ./docs/master/requests.md:199
msgid "Laravel provides several methods for inspecting the incoming request's requested content types via the `Accept` header. First, the `getAcceptableContentTypes` method will return an array containing all of the content types accepted by the request:"
msgstr ""

#: ./docs/8.x/requests.md:181
#: ./docs/9.x/requests.md:190
#: ./docs/10.x/requests.md:201
#: ./docs/11.x/requests.md:201
#: ./docs/master/requests.md:201
msgid "$contentTypes = $request->getAcceptableContentTypes();"
msgstr ""

#: ./docs/8.x/requests.md:183
#: ./docs/9.x/requests.md:192
#: ./docs/10.x/requests.md:203
#: ./docs/11.x/requests.md:203
#: ./docs/master/requests.md:203
msgid "The `accepts` method accepts an array of content types and returns `true` if any of the content types are accepted by the request. Otherwise, `false` will be returned:"
msgstr ""

#: ./docs/8.x/requests.md:185
#: ./docs/9.x/requests.md:194
#: ./docs/10.x/requests.md:205
#: ./docs/11.x/requests.md:205
#: ./docs/master/requests.md:205
msgid ""
"if ($request->accepts(['text/html', 'application/json'])) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:189
#: ./docs/9.x/requests.md:198
#: ./docs/10.x/requests.md:209
#: ./docs/11.x/requests.md:209
#: ./docs/master/requests.md:209
msgid "You may use the `prefers` method to determine which content type out of a given array of content types is most preferred by the request. If none of the provided content types are accepted by the request, `null` will be returned:"
msgstr ""

#: ./docs/10.x/requests.md:190
msgid "If you would like to retrieve an array of IP addresses, including all of the client IP addesses that were forwarded by proxies, you may use the `ips` method. The \"original\" client IP address will be at the end of the array:"
msgstr ""

#: ./docs/11.x/requests.md:190
#: ./docs/master/requests.md:190
msgid "If you would like to retrieve an array of IP addresses, including all of the client IP addresses that were forwarded by proxies, you may use the `ips` method. The \"original\" client IP address will be at the end of the array:"
msgstr ""

#: ./docs/8.x/requests.md:191
#: ./docs/9.x/requests.md:200
#: ./docs/10.x/requests.md:211
#: ./docs/11.x/requests.md:211
#: ./docs/master/requests.md:211
msgid "$preferred = $request->prefers(['text/html', 'application/json']);"
msgstr ""

#: ./docs/10.x/requests.md:192
#: ./docs/11.x/requests.md:192
#: ./docs/master/requests.md:192
msgid "$ipAddresses = $request->ips();"
msgstr ""

#: ./docs/8.x/requests.md:193
#: ./docs/9.x/requests.md:202
#: ./docs/10.x/requests.md:213
#: ./docs/11.x/requests.md:213
#: ./docs/master/requests.md:213
msgid "Since many applications only serve HTML or JSON, you may use the `expectsJson` method to quickly determine if the incoming request expects a JSON response:"
msgstr ""

#: ./docs/10.x/requests.md:194
#: ./docs/11.x/requests.md:194
#: ./docs/master/requests.md:194
msgid "In general, IP addresses should be considered untrusted, user-controlled input and be used for informational purposes only."
msgstr ""

#: ./docs/8.x/requests.md:195
#: ./docs/9.x/requests.md:204
#: ./docs/10.x/requests.md:215
#: ./docs/11.x/requests.md:215
#: ./docs/master/requests.md:215
msgid ""
"if ($request->expectsJson()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:199
#: ./docs/9.x/requests.md:208
#: ./docs/10.x/requests.md:219
#: ./docs/11.x/requests.md:219
#: ./docs/master/requests.md:219
#~ msgctxt "P"
#~ msgid "<a name=\"psr7-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:200
#: ./docs/9.x/requests.md:209
#: ./docs/10.x/requests.md:220
#: ./docs/11.x/requests.md:220
#: ./docs/master/requests.md:220
msgid "PSR-7 Requests"
msgstr ""

#: ./docs/8.x/requests.md:202
#: ./docs/9.x/requests.md:211
#: ./docs/10.x/requests.md:222
#: ./docs/11.x/requests.md:222
#: ./docs/master/requests.md:222
msgid "The [PSR-7 standard](https://www.php-fig.org/psr/psr-7/) specifies interfaces for HTTP messages, including requests and responses. If you would like to obtain an instance of a PSR-7 request instead of a Laravel request, you will first need to install a few libraries. Laravel uses the *Symfony HTTP Message Bridge* component to convert typical Laravel requests and responses into PSR-7 compatible implementations:"
msgstr ""

#: ./docs/8.x/requests.md:204
#: ./docs/9.x/requests.md:213
#: ./docs/10.x/requests.md:224
#: ./docs/11.x/requests.md:224
#: ./docs/master/requests.md:224
msgid ""
"composer require symfony/psr-http-message-bridge\n"
"composer require nyholm/psr7"
msgstr ""

#: ./docs/8.x/requests.md:207
#: ./docs/9.x/requests.md:218
#: ./docs/10.x/requests.md:229
#: ./docs/11.x/requests.md:229
#: ./docs/master/requests.md:229
msgid "Once you have installed these libraries, you may obtain a PSR-7 request by type-hinting the request interface on your route closure or controller method:"
msgstr ""

#: ./docs/8.x/requests.md:209
#: ./docs/9.x/requests.md:220
msgid ""
"use Psr\\Http\\Message\\ServerRequestInterface;\n"
"\n"
"Route::get('/', function (ServerRequestInterface $request) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:215
#: ./docs/9.x/requests.md:227
#: ./docs/10.x/requests.md:238
#: ./docs/11.x/requests.md:238
#: ./docs/master/requests.md:238
msgid "If you return a PSR-7 response instance from a route or controller, it will automatically be converted back to a Laravel response instance and be displayed by the framework."
msgstr ""

#: ./docs/8.x/requests.md:217
#: ./docs/9.x/requests.md:229
#: ./docs/10.x/requests.md:240
#: ./docs/11.x/requests.md:240
#: ./docs/master/requests.md:240
#~ msgctxt "P"
#~ msgid "<a name=\"input\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:218
#: ./docs/9.x/requests.md:230
#: ./docs/10.x/requests.md:241
#: ./docs/11.x/requests.md:241
#: ./docs/master/requests.md:241
msgid "Input"
msgstr ""

#: ./docs/8.x/requests.md:220
#: ./docs/9.x/requests.md:232
#: ./docs/10.x/requests.md:243
#: ./docs/11.x/requests.md:243
#: ./docs/master/requests.md:243
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-input\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:221
#: ./docs/9.x/requests.md:233
#: ./docs/10.x/requests.md:244
#: ./docs/11.x/requests.md:244
#: ./docs/master/requests.md:244
msgid "Retrieving Input"
msgstr ""

#: ./docs/8.x/requests.md:223
#: ./docs/9.x/requests.md:235
#: ./docs/10.x/requests.md:246
#: ./docs/11.x/requests.md:246
#: ./docs/master/requests.md:246
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-all-input-data\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:224
#: ./docs/9.x/requests.md:236
#: ./docs/10.x/requests.md:247
#: ./docs/11.x/requests.md:247
#: ./docs/master/requests.md:247
msgid "Retrieving All Input Data"
msgstr ""

#: ./docs/8.x/requests.md:226
#: ./docs/9.x/requests.md:238
#: ./docs/10.x/requests.md:249
#: ./docs/11.x/requests.md:249
#: ./docs/master/requests.md:249
msgid "You may retrieve all of the incoming request's input data as an `array` using the `all` method. This method may be used regardless of whether the incoming request is from an HTML form or is an XHR request:"
msgstr ""

#: ./docs/8.x/requests.md:228
#: ./docs/9.x/requests.md:240
#: ./docs/10.x/requests.md:251
#: ./docs/11.x/requests.md:251
#: ./docs/master/requests.md:251
msgid "$input = $request->all();"
msgstr ""

#: ./docs/8.x/requests.md:230
#: ./docs/9.x/requests.md:242
#: ./docs/10.x/requests.md:253
#: ./docs/11.x/requests.md:253
#: ./docs/master/requests.md:253
msgid "Using the `collect` method, you may retrieve all of the incoming request's input data as a [collection](/docs/{{version}}/collections):"
msgstr ""

#: ./docs/10.x/requests.md:231
#: ./docs/11.x/requests.md:231
#: ./docs/master/requests.md:231
msgid ""
"use Psr\\Http\\Message\\ServerRequestInterface;\n"
"\n"
"Route::get('/', function (ServerRequestInterface $request) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:232
#: ./docs/9.x/requests.md:244
#: ./docs/10.x/requests.md:255
#: ./docs/11.x/requests.md:255
#: ./docs/master/requests.md:255
msgid "$input = $request->collect();"
msgstr ""

#: ./docs/8.x/requests.md:234
#: ./docs/9.x/requests.md:246
msgid "The `collect` method also allows you to retrieve a subset of the incoming request input as a collection:"
msgstr ""

#: ./docs/8.x/requests.md:236
#: ./docs/9.x/requests.md:248
msgid ""
"$request->collect('users')->each(function ($user) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:240
#: ./docs/9.x/requests.md:252
#: ./docs/10.x/requests.md:263
#: ./docs/11.x/requests.md:263
#: ./docs/master/requests.md:263
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-an-input-value\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:241
#: ./docs/9.x/requests.md:253
msgid "Retrieving An Input Value"
msgstr ""

#: ./docs/8.x/requests.md:243
#: ./docs/9.x/requests.md:255
#: ./docs/10.x/requests.md:266
#: ./docs/11.x/requests.md:266
#: ./docs/master/requests.md:266
msgid "Using a few simple methods, you may access all of the user input from your `Illuminate\\Http\\Request` instance without worrying about which HTTP verb was used for the request. Regardless of the HTTP verb, the `input` method may be used to retrieve user input:"
msgstr ""

#: ./docs/8.x/requests.md:245
#: ./docs/9.x/requests.md:257
#: ./docs/10.x/requests.md:268
#: ./docs/11.x/requests.md:268
#: ./docs/master/requests.md:268
msgid "$name = $request->input('name');"
msgstr ""

#: ./docs/8.x/requests.md:247
#: ./docs/9.x/requests.md:259
#: ./docs/10.x/requests.md:270
#: ./docs/11.x/requests.md:270
#: ./docs/master/requests.md:270
msgid "You may pass a default value as the second argument to the `input` method. This value will be returned if the requested input value is not present on the request:"
msgstr ""

#: ./docs/8.x/requests.md:249
#: ./docs/9.x/requests.md:261
#: ./docs/10.x/requests.md:272
#: ./docs/11.x/requests.md:272
#: ./docs/master/requests.md:272
msgid "$name = $request->input('name', 'Sally');"
msgstr ""

#: ./docs/8.x/requests.md:251
#: ./docs/9.x/requests.md:263
#: ./docs/10.x/requests.md:274
#: ./docs/11.x/requests.md:274
#: ./docs/master/requests.md:274
msgid "When working with forms that contain array inputs, use \"dot\" notation to access the arrays:"
msgstr ""

#: ./docs/8.x/requests.md:253
#: ./docs/9.x/requests.md:265
#: ./docs/10.x/requests.md:276
#: ./docs/11.x/requests.md:276
#: ./docs/master/requests.md:276
msgid ""
"$name = $request->input('products.0.name');\n"
"\n"
"$names = $request->input('products.*.name');"
msgstr ""

#: ./docs/10.x/requests.md:257
#: ./docs/11.x/requests.md:257
#: ./docs/master/requests.md:257
msgid "The `collect` method also allows you to retrieve a subset of the incoming request's input as a collection:"
msgstr ""

#: ./docs/8.x/requests.md:257
#: ./docs/9.x/requests.md:269
#: ./docs/10.x/requests.md:280
#: ./docs/11.x/requests.md:280
#: ./docs/master/requests.md:280
msgid "You may call the `input` method without any arguments in order to retrieve all of the input values as an associative array:"
msgstr ""

#: ./docs/10.x/requests.md:259
#: ./docs/11.x/requests.md:259
#: ./docs/master/requests.md:259
msgid ""
"$request->collect('users')->each(function (string $user) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:259
#: ./docs/9.x/requests.md:271
#: ./docs/10.x/requests.md:282
#: ./docs/11.x/requests.md:282
#: ./docs/master/requests.md:282
msgid "$input = $request->input();"
msgstr ""

#: ./docs/8.x/requests.md:261
#: ./docs/9.x/requests.md:273
#: ./docs/10.x/requests.md:284
#: ./docs/11.x/requests.md:284
#: ./docs/master/requests.md:284
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-input-from-the-query-string\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:262
#: ./docs/9.x/requests.md:274
msgid "Retrieving Input From The Query String"
msgstr ""

#: ./docs/10.x/requests.md:264
#: ./docs/11.x/requests.md:264
#: ./docs/master/requests.md:264
msgid "Retrieving an Input Value"
msgstr ""

#: ./docs/8.x/requests.md:264
#: ./docs/9.x/requests.md:276
#: ./docs/10.x/requests.md:287
#: ./docs/11.x/requests.md:287
#: ./docs/master/requests.md:287
msgid "While the `input` method retrieves values from the entire request payload (including the query string), the `query` method will only retrieve values from the query string:"
msgstr ""

#: ./docs/8.x/requests.md:266
#: ./docs/9.x/requests.md:278
#: ./docs/10.x/requests.md:289
#: ./docs/11.x/requests.md:289
#: ./docs/master/requests.md:289
msgid "$name = $request->query('name');"
msgstr ""

#: ./docs/8.x/requests.md:268
#: ./docs/9.x/requests.md:280
#: ./docs/10.x/requests.md:291
#: ./docs/11.x/requests.md:291
#: ./docs/master/requests.md:291
msgid "If the requested query string value data is not present, the second argument to this method will be returned:"
msgstr ""

#: ./docs/8.x/requests.md:270
#: ./docs/9.x/requests.md:282
#: ./docs/10.x/requests.md:293
#: ./docs/11.x/requests.md:293
#: ./docs/master/requests.md:293
msgid "$name = $request->query('name', 'Helen');"
msgstr ""

#: ./docs/8.x/requests.md:272
#: ./docs/9.x/requests.md:284
#: ./docs/10.x/requests.md:295
#: ./docs/11.x/requests.md:295
#: ./docs/master/requests.md:295
msgid "You may call the `query` method without any arguments in order to retrieve all of the query string values as an associative array:"
msgstr ""

#: ./docs/8.x/requests.md:274
#: ./docs/9.x/requests.md:286
#: ./docs/10.x/requests.md:297
#: ./docs/11.x/requests.md:297
#: ./docs/master/requests.md:297
msgid "$query = $request->query();"
msgstr ""

#: ./docs/8.x/requests.md:276
#: ./docs/9.x/requests.md:288
#: ./docs/10.x/requests.md:299
#: ./docs/11.x/requests.md:299
#: ./docs/master/requests.md:299
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-json-input-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:277
#: ./docs/9.x/requests.md:289
#: ./docs/10.x/requests.md:300
#: ./docs/11.x/requests.md:300
#: ./docs/master/requests.md:300
msgid "Retrieving JSON Input Values"
msgstr ""

#: ./docs/8.x/requests.md:279
msgid "When sending JSON requests to your application, you may access the JSON data via the `input` method as long as the `Content-Type` header of the request is properly set to `application/json`. You may even use \"dot\" syntax to retrieve values that are nested within JSON arrays:"
msgstr ""

#: ./docs/8.x/requests.md:281
#: ./docs/9.x/requests.md:293
#: ./docs/10.x/requests.md:304
#: ./docs/11.x/requests.md:304
#: ./docs/master/requests.md:304
msgid "$name = $request->input('user.name');"
msgstr ""

#: ./docs/8.x/requests.md:283
#: ./docs/9.x/requests.md:302
#: ./docs/10.x/requests.md:313
#: ./docs/11.x/requests.md:320
#: ./docs/master/requests.md:313
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-boolean-input-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:284
#: ./docs/9.x/requests.md:303
#: ./docs/10.x/requests.md:314
#: ./docs/11.x/requests.md:321
#: ./docs/master/requests.md:314
msgid "Retrieving Boolean Input Values"
msgstr ""

#: ./docs/10.x/requests.md:285
#: ./docs/11.x/requests.md:285
#: ./docs/master/requests.md:285
msgid "Retrieving Input From the Query String"
msgstr ""

#: ./docs/8.x/requests.md:286
#: ./docs/9.x/requests.md:305
#: ./docs/10.x/requests.md:316
#: ./docs/11.x/requests.md:323
#: ./docs/master/requests.md:316
msgid "When dealing with HTML elements like checkboxes, your application may receive \"truthy\" values that are actually strings. For example, \"true\" or \"on\". For convenience, you may use the `boolean` method to retrieve these values as booleans. The `boolean` method returns `true` for 1, \"1\", true, \"true\", \"on\", and \"yes\". All other values will return `false`:"
msgstr ""

#: ./docs/8.x/requests.md:288
#: ./docs/9.x/requests.md:307
#: ./docs/10.x/requests.md:318
#: ./docs/11.x/requests.md:325
#: ./docs/master/requests.md:318
msgid "$archived = $request->boolean('archived');"
msgstr ""

#: ./docs/8.x/requests.md:290
#: ./docs/9.x/requests.md:309
#: ./docs/10.x/requests.md:320
#: ./docs/11.x/requests.md:327
#: ./docs/master/requests.md:320
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-date-input-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:291
#: ./docs/9.x/requests.md:310
#: ./docs/10.x/requests.md:321
#: ./docs/11.x/requests.md:328
#: ./docs/master/requests.md:321
msgid "Retrieving Date Input Values"
msgstr ""

#: ./docs/9.x/requests.md:291
#: ./docs/10.x/requests.md:302
#: ./docs/11.x/requests.md:302
#: ./docs/master/requests.md:302
msgid "When sending JSON requests to your application, you may access the JSON data via the `input` method as long as the `Content-Type` header of the request is properly set to `application/json`. You may even use \"dot\" syntax to retrieve values that are nested within JSON arrays / objects:"
msgstr ""

#: ./docs/8.x/requests.md:293
#: ./docs/9.x/requests.md:312
#: ./docs/10.x/requests.md:323
#: ./docs/11.x/requests.md:330
#: ./docs/master/requests.md:323
msgid "For convenience, input values containing dates / times may be retrieved as Carbon instances using the `date` method. If the request does not contain an input value with the given name, `null` will be returned:"
msgstr ""

#: ./docs/8.x/requests.md:295
#: ./docs/9.x/requests.md:314
#: ./docs/10.x/requests.md:325
#: ./docs/11.x/requests.md:332
#: ./docs/master/requests.md:325
msgid "$birthday = $request->date('birthday');"
msgstr ""

#: ./docs/9.x/requests.md:295
#: ./docs/10.x/requests.md:306
#: ./docs/11.x/requests.md:306
#: ./docs/master/requests.md:306
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-stringable-input-values\"></a>"
#~ msgstr ""

#: ./docs/9.x/requests.md:296
#: ./docs/10.x/requests.md:307
#: ./docs/11.x/requests.md:307
#: ./docs/master/requests.md:307
msgid "Retrieving Stringable Input Values"
msgstr ""

#: ./docs/8.x/requests.md:297
#: ./docs/9.x/requests.md:316
#: ./docs/10.x/requests.md:327
#: ./docs/11.x/requests.md:334
#: ./docs/master/requests.md:327
msgid "The second and third arguments accepted by the `date` method may be used to specify the date's format and timezone, respectively:"
msgstr ""

#: ./docs/9.x/requests.md:298
#: ./docs/10.x/requests.md:309
#: ./docs/master/requests.md:309
msgid "Instead of retrieving the request's input data as a primitive `string`, you may use the `string` method to retrieve the request data as an instance of [`Illuminate\\Support\\Stringable`](/docs/{{version}}/helpers#fluent-strings):"
msgstr ""

#: ./docs/8.x/requests.md:299
#: ./docs/9.x/requests.md:318
#: ./docs/10.x/requests.md:329
#: ./docs/11.x/requests.md:336
#: ./docs/master/requests.md:329
msgid "$elapsed = $request->date('elapsed', '!H:i', 'Europe/Madrid');"
msgstr ""

#: ./docs/9.x/requests.md:300
#: ./docs/10.x/requests.md:311
#: ./docs/11.x/requests.md:311
#: ./docs/master/requests.md:311
msgid "$name = $request->string('name')->trim();"
msgstr ""

#: ./docs/8.x/requests.md:301
#: ./docs/9.x/requests.md:320
#: ./docs/10.x/requests.md:331
#: ./docs/11.x/requests.md:338
#: ./docs/master/requests.md:331
msgid "If the input value is present but has an invalid format, an `InvalidArgumentException` will be thrown; therefore, it is recommended that you validate the input before invoking the `date` method."
msgstr ""

#: ./docs/8.x/requests.md:303
#: ./docs/9.x/requests.md:331
#: ./docs/10.x/requests.md:342
#: ./docs/11.x/requests.md:355
#: ./docs/master/requests.md:342
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-input-via-dynamic-properties\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:304
#: ./docs/9.x/requests.md:332
msgid "Retrieving Input Via Dynamic Properties"
msgstr ""

#: ./docs/8.x/requests.md:306
#: ./docs/9.x/requests.md:334
#: ./docs/10.x/requests.md:345
#: ./docs/11.x/requests.md:358
#: ./docs/master/requests.md:345
msgid "You may also access user input using dynamic properties on the `Illuminate\\Http\\Request` instance. For example, if one of your application's forms contains a `name` field, you may access the value of the field like so:"
msgstr ""

#: ./docs/8.x/requests.md:308
#: ./docs/9.x/requests.md:336
#: ./docs/10.x/requests.md:347
#: ./docs/11.x/requests.md:360
#: ./docs/master/requests.md:347
msgid "$name = $request->name;"
msgstr ""

#: ./docs/11.x/requests.md:309
msgid "Instead of retrieving the request's input data as a primitive `string`, you may use the `string` method to retrieve the request data as an instance of [`Illuminate\\Support\\Stringable`](/docs/{{version}}/strings):"
msgstr ""

#: ./docs/8.x/requests.md:310
#: ./docs/9.x/requests.md:338
#: ./docs/10.x/requests.md:349
#: ./docs/11.x/requests.md:362
#: ./docs/master/requests.md:349
msgid "When using dynamic properties, Laravel will first look for the parameter's value in the request payload. If it is not present, Laravel will search for the field in the matched route's parameters."
msgstr ""

#: ./docs/8.x/requests.md:312
#: ./docs/9.x/requests.md:340
#: ./docs/10.x/requests.md:351
#: ./docs/11.x/requests.md:364
#: ./docs/master/requests.md:351
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-a-portion-of-the-input-data\"></a>"
#~ msgstr ""

#: ./docs/11.x/requests.md:313
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-integer-input-values\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:313
#: ./docs/9.x/requests.md:341
msgid "Retrieving A Portion Of The Input Data"
msgstr ""

#: ./docs/11.x/requests.md:314
msgid "Retrieving Integer Input Values"
msgstr ""

#: ./docs/8.x/requests.md:315
#: ./docs/9.x/requests.md:343
#: ./docs/10.x/requests.md:354
#: ./docs/11.x/requests.md:367
#: ./docs/master/requests.md:354
msgid "If you need to retrieve a subset of the input data, you may use the `only` and `except` methods. Both of these methods accept a single `array` or a dynamic list of arguments:"
msgstr ""

#: ./docs/11.x/requests.md:316
msgid "To retrieve input values as integers, you may use the `integer` method. This method will attempt to cast the input value to an integer. If the input is not present or the cast fails, it will return the default value you specify. This is particularly useful for pagination or other numeric inputs:"
msgstr ""

#: ./docs/8.x/requests.md:317
#: ./docs/9.x/requests.md:345
#: ./docs/10.x/requests.md:356
#: ./docs/11.x/requests.md:369
#: ./docs/master/requests.md:356
msgid ""
"$input = $request->only(['username', 'password']);\n"
"\n"
"$input = $request->only('username', 'password');\n"
"\n"
"$input = $request->except(['credit_card']);\n"
"\n"
"$input = $request->except('credit_card');"
msgstr ""

#: ./docs/11.x/requests.md:318
msgid "$perPage = $request->integer('per_page');"
msgstr ""

#: ./docs/9.x/requests.md:322
#: ./docs/10.x/requests.md:333
#: ./docs/11.x/requests.md:340
#: ./docs/master/requests.md:333
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-enum-input-values\"></a>"
#~ msgstr ""

#: ./docs/9.x/requests.md:323
#: ./docs/10.x/requests.md:334
#: ./docs/11.x/requests.md:341
#: ./docs/master/requests.md:334
msgid "Retrieving Enum Input Values"
msgstr ""

#: ./docs/8.x/requests.md:325
#: ./docs/9.x/requests.md:354
#: ./docs/10.x/requests.md:365
#: ./docs/11.x/requests.md:378
#: ./docs/master/requests.md:365
msgid "The `only` method returns all of the key / value pairs that you request; however, it will not return key / value pairs that are not present on the request."
msgstr ""

#: ./docs/9.x/requests.md:325
#: ./docs/10.x/requests.md:336
#: ./docs/11.x/requests.md:343
#: ./docs/master/requests.md:336
msgid "Input values that correspond to [PHP enums](https://www.php.net/manual/en/language.types.enumerations.php) may also be retrieved from the request. If the request does not contain an input value with the given name or the enum does not have a backing value that matches the input value, `null` will be returned. The `enum` method accepts the name of the input value and the enum class as its first and second arguments:"
msgstr ""

#: ./docs/8.x/requests.md:327
#: ./docs/9.x/requests.md:356
#~ msgctxt "P"
#~ msgid "<a name=\"determining-if-input-is-present\"></a>"
#~ msgstr ""

#: ./docs/9.x/requests.md:327
#: ./docs/10.x/requests.md:338
#: ./docs/11.x/requests.md:345
#: ./docs/master/requests.md:338
msgid ""
"use App\\Enums\\Status;\n"
"\n"
"$status = $request->enum('status', Status::class);"
msgstr ""

#: ./docs/8.x/requests.md:328
#: ./docs/9.x/requests.md:357
msgid "Determining If Input Is Present"
msgstr ""

#: ./docs/8.x/requests.md:330
#: ./docs/9.x/requests.md:359
#: ./docs/10.x/requests.md:370
#: ./docs/11.x/requests.md:383
#: ./docs/master/requests.md:370
msgid "You may use the `has` method to determine if a value is present on the request. The `has` method returns `true` if the value is present on the request:"
msgstr ""

#: ./docs/8.x/requests.md:332
#: ./docs/9.x/requests.md:361
msgid ""
"if ($request->has('name')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:336
#: ./docs/9.x/requests.md:365
#: ./docs/10.x/requests.md:376
#: ./docs/11.x/requests.md:389
#: ./docs/master/requests.md:376
msgid "When given an array, the `has` method will determine if all of the specified values are present:"
msgstr ""

#: ./docs/8.x/requests.md:338
#: ./docs/9.x/requests.md:367
msgid ""
"if ($request->has(['name', 'email'])) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:342
#: ./docs/9.x/requests.md:371
#: ./docs/10.x/requests.md:388
#: ./docs/11.x/requests.md:401
#: ./docs/master/requests.md:388
msgid "The `whenHas` method will execute the given closure if a value is present on the request:"
msgstr ""

#: ./docs/10.x/requests.md:343
#: ./docs/11.x/requests.md:356
#: ./docs/master/requests.md:343
msgid "Retrieving Input via Dynamic Properties"
msgstr ""

#: ./docs/8.x/requests.md:344
#: ./docs/9.x/requests.md:373
msgid ""
"$request->whenHas('name', function ($input) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:348
#: ./docs/9.x/requests.md:377
#: ./docs/10.x/requests.md:394
#: ./docs/11.x/requests.md:407
#: ./docs/master/requests.md:394
msgid "A second closure may be passed to the `whenHas` method that will be executed if the specified value is not present on the request:"
msgstr ""

#: ./docs/11.x/requests.md:349
msgid "If the input value is an array of values that correspond to a PHP enum, you may use the `enums` method to retrieve the array of values as enum instances:"
msgstr ""

#: ./docs/8.x/requests.md:350
#: ./docs/9.x/requests.md:379
msgid ""
"$request->whenHas('name', function ($input) {\n"
"    // The \"name\" value is present...\n"
"}, function () {\n"
"    // The \"name\" value is not present...\n"
"});"
msgstr ""

#: ./docs/11.x/requests.md:351
msgid ""
"use App\\Enums\\Product;\n"
"\n"
"$products = $request->enums('products', Product::class);"
msgstr ""

#: ./docs/10.x/requests.md:352
#: ./docs/11.x/requests.md:365
#: ./docs/master/requests.md:352
msgid "Retrieving a Portion of the Input Data"
msgstr ""

#: ./docs/8.x/requests.md:356
#: ./docs/9.x/requests.md:385
#: ./docs/10.x/requests.md:382
#: ./docs/11.x/requests.md:395
#: ./docs/master/requests.md:382
msgid "The `hasAny` method returns `true` if any of the specified values are present:"
msgstr ""

#: ./docs/8.x/requests.md:358
#: ./docs/9.x/requests.md:387
msgid ""
"if ($request->hasAny(['name', 'email'])) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:362
msgid "If you would like to determine if a value is present on the request and is not empty, you may use the `filled` method:"
msgstr ""

#: ./docs/8.x/requests.md:364
#: ./docs/9.x/requests.md:393
msgid ""
"if ($request->filled('name')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/requests.md:367
#: ./docs/11.x/requests.md:380
#: ./docs/master/requests.md:367
#~ msgctxt "P"
#~ msgid "<a name=\"input-presence\"></a>"
#~ msgstr ""

#: ./docs/10.x/requests.md:368
#: ./docs/11.x/requests.md:381
#: ./docs/master/requests.md:368
msgid "Input Presence"
msgstr ""

#: ./docs/8.x/requests.md:368
msgid "The `whenFilled` method will execute the given closure if a value is present on the request and is not empty:"
msgstr ""

#: ./docs/8.x/requests.md:370
#: ./docs/9.x/requests.md:399
msgid ""
"$request->whenFilled('name', function ($input) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/10.x/requests.md:372
#: ./docs/11.x/requests.md:385
#: ./docs/master/requests.md:372
msgid ""
"if ($request->has('name')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:374
#: ./docs/9.x/requests.md:403
#: ./docs/10.x/requests.md:420
#: ./docs/11.x/requests.md:445
#: ./docs/master/requests.md:420
msgid "A second closure may be passed to the `whenFilled` method that will be executed if the specified value is not \"filled\":"
msgstr ""

#: ./docs/8.x/requests.md:376
#: ./docs/9.x/requests.md:405
msgid ""
"$request->whenFilled('name', function ($input) {\n"
"    // The \"name\" value is filled...\n"
"}, function () {\n"
"    // The \"name\" value is not filled...\n"
"});"
msgstr ""

#: ./docs/10.x/requests.md:378
#: ./docs/11.x/requests.md:391
#: ./docs/master/requests.md:378
msgid ""
"if ($request->has(['name', 'email'])) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:382
msgid "To determine if a given key is absent from the request, you may use the `missing` method:"
msgstr ""

#: ./docs/10.x/requests.md:384
#: ./docs/11.x/requests.md:397
#: ./docs/master/requests.md:384
msgid ""
"if ($request->hasAny(['name', 'email'])) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:384
msgid ""
"if ($request->missing('name')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:388
#: ./docs/9.x/requests.md:423
#: ./docs/10.x/requests.md:440
#: ./docs/11.x/requests.md:465
#: ./docs/master/requests.md:440
#~ msgctxt "P"
#~ msgid "<a name=\"merging-additional-input\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:389
#: ./docs/9.x/requests.md:424
#: ./docs/10.x/requests.md:441
#: ./docs/11.x/requests.md:466
#: ./docs/master/requests.md:441
msgid "Merging Additional Input"
msgstr ""

#: ./docs/10.x/requests.md:390
#: ./docs/11.x/requests.md:403
#: ./docs/master/requests.md:390
msgid ""
"$request->whenHas('name', function (string $input) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:391
msgid "Sometimes you may need to manually merge additional input into the request's existing input data. To accomplish this, you may use the `merge` method:"
msgstr ""

#: ./docs/9.x/requests.md:391
#: ./docs/10.x/requests.md:402
#: ./docs/11.x/requests.md:415
#: ./docs/master/requests.md:402
msgid "If you would like to determine if a value is present on the request and is not an empty string, you may use the `filled` method:"
msgstr ""

#: ./docs/8.x/requests.md:393
#: ./docs/9.x/requests.md:428
#: ./docs/10.x/requests.md:445
#: ./docs/11.x/requests.md:470
#: ./docs/master/requests.md:445
msgid "$request->merge(['votes' => 0]);"
msgstr ""

#: ./docs/8.x/requests.md:395
#: ./docs/9.x/requests.md:430
#: ./docs/10.x/requests.md:447
#: ./docs/11.x/requests.md:472
#: ./docs/master/requests.md:447
msgid "The `mergeIfMissing` method may be used to merge input into the request if the corresponding keys do not already exist within the request's input data:"
msgstr ""

#: ./docs/10.x/requests.md:396
#: ./docs/11.x/requests.md:409
#: ./docs/master/requests.md:396
msgid ""
"$request->whenHas('name', function (string $input) {\n"
"    // The \"name\" value is present...\n"
"}, function () {\n"
"    // The \"name\" value is not present...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:397
#: ./docs/9.x/requests.md:432
#: ./docs/10.x/requests.md:449
#: ./docs/11.x/requests.md:474
#: ./docs/master/requests.md:449
msgid "$request->mergeIfMissing(['votes' => 0]);"
msgstr ""

#: ./docs/9.x/requests.md:397
#: ./docs/10.x/requests.md:414
#: ./docs/11.x/requests.md:439
#: ./docs/master/requests.md:414
msgid "The `whenFilled` method will execute the given closure if a value is present on the request and is not an empty string:"
msgstr ""

#: ./docs/8.x/requests.md:399
#: ./docs/9.x/requests.md:434
#: ./docs/10.x/requests.md:451
#: ./docs/11.x/requests.md:476
#: ./docs/master/requests.md:451
#~ msgctxt "P"
#~ msgid "<a name=\"old-input\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:400
#: ./docs/9.x/requests.md:435
#: ./docs/10.x/requests.md:452
#: ./docs/11.x/requests.md:477
#: ./docs/master/requests.md:452
msgid "Old Input"
msgstr ""

#: ./docs/8.x/requests.md:402
#: ./docs/9.x/requests.md:437
#: ./docs/10.x/requests.md:454
#: ./docs/11.x/requests.md:479
#: ./docs/master/requests.md:454
msgid "Laravel allows you to keep input from one request during the next request. This feature is particularly useful for re-populating forms after detecting validation errors. However, if you are using Laravel's included [validation features](/docs/{{version}}/validation), it is possible that you will not need to manually use these session input flashing methods directly, as some of Laravel's built-in validation facilities will call them automatically."
msgstr ""

#: ./docs/10.x/requests.md:404
#: ./docs/11.x/requests.md:417
#: ./docs/master/requests.md:404
msgid ""
"if ($request->filled('name')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:404
#: ./docs/9.x/requests.md:439
#: ./docs/10.x/requests.md:456
#: ./docs/11.x/requests.md:481
#: ./docs/master/requests.md:456
#~ msgctxt "P"
#~ msgid "<a name=\"flashing-input-to-the-session\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:405
#: ./docs/9.x/requests.md:440
msgid "Flashing Input To The Session"
msgstr ""

#: ./docs/8.x/requests.md:407
#: ./docs/9.x/requests.md:442
#: ./docs/10.x/requests.md:459
#: ./docs/11.x/requests.md:484
#: ./docs/master/requests.md:459
msgid "The `flash` method on the `Illuminate\\Http\\Request` class will flash the current input to the [session](/docs/{{version}}/session) so that it is available during the user's next request to the application:"
msgstr ""

#: ./docs/10.x/requests.md:408
#: ./docs/11.x/requests.md:433
#: ./docs/master/requests.md:408
msgid "The `anyFilled` method returns `true` if any of the specified values is not an empty string:"
msgstr ""

#: ./docs/8.x/requests.md:409
#: ./docs/9.x/requests.md:444
#: ./docs/10.x/requests.md:461
#: ./docs/11.x/requests.md:486
#: ./docs/master/requests.md:461
msgid "$request->flash();"
msgstr ""

#: ./docs/10.x/requests.md:410
#: ./docs/11.x/requests.md:435
#: ./docs/master/requests.md:410
msgid ""
"if ($request->anyFilled(['name', 'email'])) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:411
#: ./docs/9.x/requests.md:446
#: ./docs/10.x/requests.md:463
#: ./docs/11.x/requests.md:488
#: ./docs/master/requests.md:463
msgid "You may also use the `flashOnly` and `flashExcept` methods to flash a subset of the request data to the session. These methods are useful for keeping sensitive information such as passwords out of the session:"
msgstr ""

#: ./docs/9.x/requests.md:411
#: ./docs/10.x/requests.md:428
#: ./docs/11.x/requests.md:453
#: ./docs/master/requests.md:428
msgid "To determine if a given key is absent from the request, you may use the `missing` and `whenMissing` methods:"
msgstr ""

#: ./docs/8.x/requests.md:413
#: ./docs/9.x/requests.md:448
#: ./docs/10.x/requests.md:465
#: ./docs/11.x/requests.md:490
#: ./docs/master/requests.md:465
msgid ""
"$request->flashOnly(['username', 'email']);\n"
"\n"
"$request->flashExcept('password');"
msgstr ""

#: ./docs/9.x/requests.md:413
msgid ""
"if ($request->missing('name')) {\n"
"    //\n"
"}\n"
"\n"
"$request->whenMissing('name', function ($input) {\n"
"    // The \"name\" value is missing...\n"
"}, function () {\n"
"    // The \"name\" value is present...\n"
"});"
msgstr ""

#: ./docs/10.x/requests.md:416
#: ./docs/11.x/requests.md:441
#: ./docs/master/requests.md:416
msgid ""
"$request->whenFilled('name', function (string $input) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:417
#: ./docs/9.x/requests.md:452
#: ./docs/10.x/requests.md:469
#: ./docs/11.x/requests.md:494
#: ./docs/master/requests.md:469
#~ msgctxt "P"
#~ msgid "<a name=\"flashing-input-then-redirecting\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:418
#: ./docs/9.x/requests.md:453
#: ./docs/10.x/requests.md:470
#: ./docs/11.x/requests.md:495
#: ./docs/master/requests.md:470
msgid "Flashing Input Then Redirecting"
msgstr ""

#: ./docs/8.x/requests.md:420
#: ./docs/9.x/requests.md:455
#: ./docs/10.x/requests.md:472
#: ./docs/11.x/requests.md:497
#: ./docs/master/requests.md:472
msgid "Since you often will want to flash input to the session and then redirect to the previous page, you may easily chain input flashing onto a redirect using the `withInput` method:"
msgstr ""

#: ./docs/11.x/requests.md:421
msgid "If you would like to determine if a value is missing from the request or is an empty string, you may use the `isNotFilled` method:"
msgstr ""

#: ./docs/10.x/requests.md:422
#: ./docs/11.x/requests.md:447
#: ./docs/master/requests.md:422
msgid ""
"$request->whenFilled('name', function (string $input) {\n"
"    // The \"name\" value is filled...\n"
"}, function () {\n"
"    // The \"name\" value is not filled...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:422
#: ./docs/9.x/requests.md:457
#: ./docs/10.x/requests.md:474
#: ./docs/master/requests.md:474
msgid ""
"return redirect('form')->withInput();\n"
"\n"
"return redirect()->route('user.create')->withInput();\n"
"\n"
"return redirect('form')->withInput(\n"
"    $request->except('password')\n"
");"
msgstr ""

#: ./docs/11.x/requests.md:423
msgid ""
"if ($request->isNotFilled('name')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/requests.md:426
#: ./docs/10.x/requests.md:443
#: ./docs/11.x/requests.md:468
#: ./docs/master/requests.md:443
msgid "Sometimes you may need to manually merge additional input into the request's existing input data. To accomplish this, you may use the `merge` method. If a given input key already exists on the request, it will be overwritten by the data provided to the `merge` method:"
msgstr ""

#: ./docs/11.x/requests.md:427
msgid "When given an array, the `isNotFilled` method will determine if all of the specified values are missing or empty:"
msgstr ""

#: ./docs/11.x/requests.md:429
msgid ""
"if ($request->isNotFilled(['name', 'email'])) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/requests.md:430
#: ./docs/master/requests.md:430
msgid ""
"if ($request->missing('name')) {\n"
"    // ...\n"
"}\n"
"\n"
"$request->whenMissing('name', function (array $input) {\n"
"    // The \"name\" value is missing...\n"
"}, function () {\n"
"    // The \"name\" value is present...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:430
#: ./docs/9.x/requests.md:465
#: ./docs/10.x/requests.md:482
#: ./docs/11.x/requests.md:507
#: ./docs/master/requests.md:482
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-old-input\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:431
#: ./docs/9.x/requests.md:466
#: ./docs/10.x/requests.md:483
#: ./docs/11.x/requests.md:508
#: ./docs/master/requests.md:483
msgid "Retrieving Old Input"
msgstr ""

#: ./docs/8.x/requests.md:433
#: ./docs/9.x/requests.md:468
#: ./docs/10.x/requests.md:485
#: ./docs/11.x/requests.md:510
#: ./docs/master/requests.md:485
msgid "To retrieve flashed input from the previous request, invoke the `old` method on an instance of `Illuminate\\Http\\Request`. The `old` method will pull the previously flashed input data from the [session](/docs/{{version}}/session):"
msgstr ""

#: ./docs/8.x/requests.md:435
#: ./docs/9.x/requests.md:470
#: ./docs/10.x/requests.md:487
#: ./docs/11.x/requests.md:512
#: ./docs/master/requests.md:487
msgid "$username = $request->old('username');"
msgstr ""

#: ./docs/8.x/requests.md:437
#: ./docs/9.x/requests.md:472
#: ./docs/10.x/requests.md:489
#: ./docs/11.x/requests.md:514
#: ./docs/master/requests.md:489
msgid "Laravel also provides a global `old` helper. If you are displaying old input within a [Blade template](/docs/{{version}}/blade), it is more convenient to use the `old` helper to repopulate the form. If no old input exists for the given field, `null` will be returned:"
msgstr ""

#: ./docs/8.x/requests.md:439
#: ./docs/9.x/requests.md:474
#: ./docs/10.x/requests.md:491
#: ./docs/11.x/requests.md:516
#: ./docs/master/requests.md:491
msgid "<input type=\"text\" name=\"username\" value=\"{{ old('username') }}\">"
msgstr ""

#: ./docs/8.x/requests.md:441
#: ./docs/9.x/requests.md:476
#: ./docs/10.x/requests.md:493
#: ./docs/11.x/requests.md:518
#: ./docs/master/requests.md:493
#~ msgctxt "P"
#~ msgid "<a name=\"cookies\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:442
#: ./docs/9.x/requests.md:477
#: ./docs/10.x/requests.md:494
#: ./docs/11.x/requests.md:519
#: ./docs/master/requests.md:494
msgid "Cookies"
msgstr ""

#: ./docs/8.x/requests.md:444
#: ./docs/9.x/requests.md:479
#: ./docs/10.x/requests.md:496
#: ./docs/11.x/requests.md:521
#: ./docs/master/requests.md:496
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-cookies-from-requests\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:445
#: ./docs/9.x/requests.md:480
#: ./docs/10.x/requests.md:497
#: ./docs/11.x/requests.md:522
#: ./docs/master/requests.md:497
msgid "Retrieving Cookies From Requests"
msgstr ""

#: ./docs/8.x/requests.md:447
#: ./docs/9.x/requests.md:482
#: ./docs/10.x/requests.md:499
#: ./docs/11.x/requests.md:524
#: ./docs/master/requests.md:499
msgid "All cookies created by the Laravel framework are encrypted and signed with an authentication code, meaning they will be considered invalid if they have been changed by the client. To retrieve a cookie value from the request, use the `cookie` method on an `Illuminate\\Http\\Request` instance:"
msgstr ""

#: ./docs/8.x/requests.md:449
#: ./docs/9.x/requests.md:484
#: ./docs/10.x/requests.md:501
#: ./docs/11.x/requests.md:526
#: ./docs/master/requests.md:501
msgid "$value = $request->cookie('name');"
msgstr ""

#: ./docs/8.x/requests.md:451
#: ./docs/9.x/requests.md:486
#: ./docs/10.x/requests.md:503
#: ./docs/11.x/requests.md:528
#: ./docs/master/requests.md:503
#~ msgctxt "P"
#~ msgid "<a name=\"input-trimming-and-normalization\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:452
#: ./docs/9.x/requests.md:487
msgid "Input Trimming & Normalization"
msgstr ""

#: ./docs/8.x/requests.md:454
msgid "By default, Laravel includes the `App\\Http\\Middleware\\TrimStrings` and `App\\Http\\Middleware\\ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware are listed in the global middleware stack by the `App\\Http\\Kernel` class. These middleware will automatically trim all incoming string fields on the request, as well as convert any empty string fields to `null`. This allows you to not have to worry about these normalization concerns in your routes and controllers."
msgstr ""

#: ./docs/11.x/requests.md:455
msgid ""
"if ($request->missing('name')) {\n"
"    // ...\n"
"}\n"
"\n"
"$request->whenMissing('name', function () {\n"
"    // The \"name\" value is missing...\n"
"}, function () {\n"
"    // The \"name\" value is present...\n"
"});"
msgstr ""

#: ./docs/8.x/requests.md:456
msgid "If you would like to disable this behavior, you may remove the two middleware from your application's middleware stack by removing them from the `$middleware` property of your `App\\Http\\Kernel` class."
msgstr ""

#: ./docs/10.x/requests.md:457
#: ./docs/11.x/requests.md:482
#: ./docs/master/requests.md:457
msgid "Flashing Input to the Session"
msgstr ""

#: ./docs/8.x/requests.md:458
#: ./docs/9.x/requests.md:518
#: ./docs/10.x/requests.md:534
#: ./docs/11.x/requests.md:559
#: ./docs/master/requests.md:534
#~ msgctxt "P"
#~ msgid "<a name=\"files\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:459
#: ./docs/9.x/requests.md:519
#: ./docs/10.x/requests.md:535
#: ./docs/11.x/requests.md:560
#: ./docs/master/requests.md:535
msgid "Files"
msgstr ""

#: ./docs/8.x/requests.md:461
#: ./docs/9.x/requests.md:521
#: ./docs/10.x/requests.md:537
#: ./docs/11.x/requests.md:562
#: ./docs/master/requests.md:537
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-uploaded-files\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:462
#: ./docs/9.x/requests.md:522
#: ./docs/10.x/requests.md:538
#: ./docs/11.x/requests.md:563
#: ./docs/master/requests.md:538
msgid "Retrieving Uploaded Files"
msgstr ""

#: ./docs/8.x/requests.md:464
#: ./docs/9.x/requests.md:524
#: ./docs/10.x/requests.md:540
#: ./docs/11.x/requests.md:565
#: ./docs/master/requests.md:540
msgid "You may retrieve uploaded files from an `Illuminate\\Http\\Request` instance using the `file` method or using dynamic properties. The `file` method returns an instance of the `Illuminate\\Http\\UploadedFile` class, which extends the PHP `SplFileInfo` class and provides a variety of methods for interacting with the file:"
msgstr ""

#: ./docs/8.x/requests.md:466
#: ./docs/9.x/requests.md:526
#: ./docs/10.x/requests.md:542
#: ./docs/11.x/requests.md:567
#: ./docs/master/requests.md:542
msgid ""
"$file = $request->file('photo');\n"
"\n"
"$file = $request->photo;"
msgstr ""

#: ./docs/8.x/requests.md:470
#: ./docs/9.x/requests.md:530
#: ./docs/10.x/requests.md:546
#: ./docs/11.x/requests.md:571
#: ./docs/master/requests.md:546
msgid "You may determine if a file is present on the request using the `hasFile` method:"
msgstr ""

#: ./docs/8.x/requests.md:472
#: ./docs/9.x/requests.md:532
msgid ""
"if ($request->hasFile('photo')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:476
#: ./docs/9.x/requests.md:536
#: ./docs/10.x/requests.md:552
#: ./docs/11.x/requests.md:577
#: ./docs/master/requests.md:552
#~ msgctxt "P"
#~ msgid "<a name=\"validating-successful-uploads\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:477
#: ./docs/9.x/requests.md:537
#: ./docs/10.x/requests.md:553
#: ./docs/11.x/requests.md:578
#: ./docs/master/requests.md:553
msgid "Validating Successful Uploads"
msgstr ""

#: ./docs/8.x/requests.md:479
#: ./docs/9.x/requests.md:539
#: ./docs/10.x/requests.md:555
#: ./docs/11.x/requests.md:580
#: ./docs/master/requests.md:555
msgid "In addition to checking if the file is present, you may verify that there were no problems uploading the file via the `isValid` method:"
msgstr ""

#: ./docs/8.x/requests.md:481
#: ./docs/9.x/requests.md:541
msgid ""
"if ($request->file('photo')->isValid()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:485
#: ./docs/9.x/requests.md:545
#: ./docs/10.x/requests.md:561
#: ./docs/11.x/requests.md:586
#: ./docs/master/requests.md:561
#~ msgctxt "P"
#~ msgid "<a name=\"file-paths-extensions\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:486
#: ./docs/9.x/requests.md:546
msgid "File Paths & Extensions"
msgstr ""

#: ./docs/8.x/requests.md:488
#: ./docs/9.x/requests.md:548
#: ./docs/10.x/requests.md:564
#: ./docs/11.x/requests.md:589
#: ./docs/master/requests.md:564
msgid "The `UploadedFile` class also contains methods for accessing the file's fully-qualified path and its extension. The `extension` method will attempt to guess the file's extension based on its contents. This extension may be different from the extension that was supplied by the client:"
msgstr ""

#: ./docs/9.x/requests.md:489
#: ./docs/10.x/requests.md:506
msgid "By default, Laravel includes the `App\\Http\\Middleware\\TrimStrings` and `Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware are listed in the global middleware stack by the `App\\Http\\Kernel` class. These middleware will automatically trim all incoming string fields on the request, as well as convert any empty string fields to `null`. This allows you to not have to worry about these normalization concerns in your routes and controllers."
msgstr ""

#: ./docs/8.x/requests.md:490
#: ./docs/9.x/requests.md:550
#: ./docs/10.x/requests.md:566
#: ./docs/11.x/requests.md:591
#: ./docs/master/requests.md:566
msgid ""
"$path = $request->photo->path();\n"
"\n"
"$extension = $request->photo->extension();"
msgstr ""

#: ./docs/9.x/requests.md:491
#: ./docs/10.x/requests.md:508
#: ./docs/11.x/requests.md:533
#: ./docs/master/requests.md:508
msgid "Disabling Input Normalization"
msgstr ""

#: ./docs/9.x/requests.md:493
#: ./docs/10.x/requests.md:510
msgid "If you would like to disable this behavior for all requests, you may remove the two middleware from your application's middleware stack by removing them from the `$middleware` property of your `App\\Http\\Kernel` class."
msgstr ""

#: ./docs/8.x/requests.md:494
#: ./docs/9.x/requests.md:554
#: ./docs/10.x/requests.md:570
#: ./docs/11.x/requests.md:595
#: ./docs/master/requests.md:570
#~ msgctxt "P"
#~ msgid "<a name=\"other-file-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:495
#: ./docs/9.x/requests.md:555
#: ./docs/10.x/requests.md:571
#: ./docs/11.x/requests.md:596
#: ./docs/master/requests.md:571
msgid "Other File Methods"
msgstr ""

#: ./docs/9.x/requests.md:495
#: ./docs/10.x/requests.md:512
msgid "If you would like to disable string trimming and empty string conversion for a subset of requests to your application, you may use the `skipWhen` method offered by both middleware. This method accepts a closure which should return `true` or `false` to indicate if input normalization should be skipped. Typically, the `skipWhen` method should be invoked in the `boot` method of your application's `AppServiceProvider`."
msgstr ""

#: ./docs/8.x/requests.md:497
msgid "There are a variety of other methods available on `UploadedFile` instances. Check out the [API documentation for the class](https://api.symfony.com/master/Symfony/Component/HttpFoundation/File/UploadedFile.html) for more information regarding these methods."
msgstr ""

#: ./docs/9.x/requests.md:497
msgid ""
"use App\\Http\\Middleware\\TrimStrings;\n"
"use Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    TrimStrings::skipWhen(function ($request) {\n"
"        return $request->is('admin/*');\n"
"    });\n"
"\n"
"    ConvertEmptyStringsToNull::skipWhen(function ($request) {\n"
"        // ...\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/requests.md:499
msgid ""
"return redirect('/form')->withInput();\n"
"\n"
"return redirect()->route('user.create')->withInput();\n"
"\n"
"return redirect('/form')->withInput(\n"
"    $request->except('password')\n"
");"
msgstr ""

#: ./docs/8.x/requests.md:499
#: ./docs/9.x/requests.md:559
#: ./docs/10.x/requests.md:575
#: ./docs/11.x/requests.md:600
#: ./docs/master/requests.md:575
#~ msgctxt "P"
#~ msgid "<a name=\"storing-uploaded-files\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:500
#: ./docs/9.x/requests.md:560
#: ./docs/10.x/requests.md:576
#: ./docs/11.x/requests.md:601
#: ./docs/master/requests.md:576
msgid "Storing Uploaded Files"
msgstr ""

#: ./docs/8.x/requests.md:502
#: ./docs/9.x/requests.md:562
#: ./docs/10.x/requests.md:578
#: ./docs/11.x/requests.md:603
#: ./docs/master/requests.md:578
msgid "To store an uploaded file, you will typically use one of your configured [filesystems](/docs/{{version}}/filesystem). The `UploadedFile` class has a `store` method that will move an uploaded file to one of your disks, which may be a location on your local filesystem or a cloud storage location like Amazon S3."
msgstr ""

#: ./docs/10.x/requests.md:504
#: ./docs/11.x/requests.md:529
#: ./docs/master/requests.md:504
msgid "Input Trimming and Normalization"
msgstr ""

#: ./docs/8.x/requests.md:504
#: ./docs/9.x/requests.md:564
#: ./docs/10.x/requests.md:580
#: ./docs/11.x/requests.md:605
#: ./docs/master/requests.md:580
msgid "The `store` method accepts the path where the file should be stored relative to the filesystem's configured root directory. This path should not contain a filename, since a unique ID will automatically be generated to serve as the filename."
msgstr ""

#: ./docs/8.x/requests.md:506
#: ./docs/9.x/requests.md:566
#: ./docs/10.x/requests.md:582
#: ./docs/11.x/requests.md:607
#: ./docs/master/requests.md:582
msgid "The `store` method also accepts an optional second argument for the name of the disk that should be used to store the file. The method will return the path of the file relative to the disk's root:"
msgstr ""

#: ./docs/8.x/requests.md:508
#: ./docs/9.x/requests.md:568
#: ./docs/10.x/requests.md:584
#: ./docs/11.x/requests.md:609
#: ./docs/master/requests.md:584
msgid ""
"$path = $request->photo->store('images');\n"
"\n"
"$path = $request->photo->store('images', 's3');"
msgstr ""

#: ./docs/8.x/requests.md:512
#: ./docs/9.x/requests.md:572
#: ./docs/10.x/requests.md:588
#: ./docs/11.x/requests.md:613
#: ./docs/master/requests.md:588
msgid "If you do not want a filename to be automatically generated, you may use the `storeAs` method, which accepts the path, filename, and disk name as its arguments:"
msgstr ""

#: ./docs/10.x/requests.md:514
msgid ""
"use App\\Http\\Middleware\\TrimStrings;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    TrimStrings::skipWhen(function (Request $request) {\n"
"        return $request->is('admin/*');\n"
"    });\n"
"\n"
"    ConvertEmptyStringsToNull::skipWhen(function (Request $request) {\n"
"        // ...\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:514
#: ./docs/9.x/requests.md:574
#: ./docs/10.x/requests.md:590
#: ./docs/11.x/requests.md:615
#: ./docs/master/requests.md:590
msgid ""
"$path = $request->photo->storeAs('images', 'filename.jpg');\n"
"\n"
"$path = $request->photo->storeAs('images', 'filename.jpg', 's3');"
msgstr ""

#: ./docs/8.x/requests.md:518
#: ./docs/9.x/requests.md:579
#: ./docs/10.x/requests.md:595
#: ./docs/11.x/requests.md:620
#: ./docs/master/requests.md:595
msgid "For more information about file storage in Laravel, check out the complete [file storage documentation](/docs/{{version}}/filesystem)."
msgstr ""

#: ./docs/8.x/requests.md:520
#: ./docs/9.x/requests.md:581
#: ./docs/10.x/requests.md:597
#: ./docs/11.x/requests.md:622
#: ./docs/master/requests.md:597
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-trusted-proxies\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:521
#: ./docs/9.x/requests.md:582
#: ./docs/10.x/requests.md:598
#: ./docs/11.x/requests.md:623
#: ./docs/master/requests.md:598
msgid "Configuring Trusted Proxies"
msgstr ""

#: ./docs/8.x/requests.md:523
#: ./docs/9.x/requests.md:584
#: ./docs/10.x/requests.md:600
#: ./docs/11.x/requests.md:625
#: ./docs/master/requests.md:600
msgid "When running your applications behind a load balancer that terminates TLS / SSL certificates, you may notice your application sometimes does not generate HTTPS links when using the `url` helper. Typically this is because your application is being forwarded traffic from your load balancer on port 80 and does not know it should generate secure links."
msgstr ""

#: ./docs/8.x/requests.md:525
#: ./docs/9.x/requests.md:586
#: ./docs/10.x/requests.md:602
msgid "To solve this, you may use the `App\\Http\\Middleware\\TrustProxies` middleware that is included in your Laravel application, which allows you to quickly customize the load balancers or proxies that should be trusted by your application. Your trusted proxies should be listed as an array on the `$proxies` property of this middleware. In addition to configuring the trusted proxies, you may configure the proxy `$headers` that should be trusted:"
msgstr ""

#: ./docs/8.x/requests.md:527
#: ./docs/9.x/requests.md:588
#: ./docs/10.x/requests.md:604
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Illuminate\\Http\\Middleware\\TrustProxies as Middleware;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class TrustProxies extends Middleware\n"
"{\n"
"    /**\n"
"     * The trusted proxies for this application.\n"
"     *\n"
"     * @var string|array\n"
"     */\n"
"    protected $proxies = [\n"
"        '192.168.1.1',\n"
"        '192.168.1.2',\n"
"    ];\n"
"\n"
"    /**\n"
"     * The headers that should be used to detect proxies.\n"
"     *\n"
"     * @var int\n"
"     */\n"
"    protected $headers = Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO;\n"
"}"
msgstr ""

#: ./docs/11.x/requests.md:531
#: ./docs/master/requests.md:506
msgid "By default, Laravel includes the `Illuminate\\Foundation\\Http\\Middleware\\TrimStrings` and `Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware will automatically trim all incoming string fields on the request, as well as convert any empty string fields to `null`. This allows you to not have to worry about these normalization concerns in your routes and controllers."
msgstr ""

#: ./docs/11.x/requests.md:535
#: ./docs/master/requests.md:510
msgid "If you would like to disable this behavior for all requests, you may remove the two middleware from your application's middleware stack by invoking the `$middleware->remove` method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/requests.md:537
#: ./docs/master/requests.md:512
msgid ""
"use Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull;\n"
"use Illuminate\\Foundation\\Http\\Middleware\\TrimStrings;\n"
"\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->remove([\n"
"        ConvertEmptyStringsToNull::class,\n"
"        TrimStrings::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/11.x/requests.md:547
#: ./docs/master/requests.md:522
msgid "If you would like to disable string trimming and empty string conversion for a subset of requests to your application, you may use the `trimStrings` and `convertEmptyStringsToNull` middleware methods within your application's `bootstrap/app.php` file. Both methods accept an array of closures, which should return `true` or `false` to indicate whether input normalization should be skipped:"
msgstr ""

#: ./docs/10.x/requests.md:548
#: ./docs/11.x/requests.md:573
#: ./docs/master/requests.md:548
msgid ""
"if ($request->hasFile('photo')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/11.x/requests.md:549
#: ./docs/master/requests.md:524
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->convertEmptyStringsToNull(except: [\n"
"        fn (Request $request) => $request->is('admin/*'),\n"
"    ]);\n"
"\n"
"    $middleware->trimStrings(except: [\n"
"        fn (Request $request) => $request->is('admin/*'),\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/requests.md:554
#: ./docs/9.x/requests.md:616
#: ./docs/10.x/requests.md:632
msgid "If you are using AWS Elastic Load Balancing, your `$headers` value should be `Request::HEADER_X_FORWARDED_AWS_ELB`. For more information on the constants that may be used in the `$headers` property, check out Symfony's documentation on [trusting proxies](https://symfony.com/doc/current/deployment/proxies.html)."
msgstr ""

#: ./docs/8.x/requests.md:556
#: ./docs/9.x/requests.md:618
#: ./docs/10.x/requests.md:634
#: ./docs/11.x/requests.md:650
#: ./docs/master/requests.md:625
#~ msgctxt "P"
#~ msgid "<a name=\"trusting-all-proxies\"></a>"
#~ msgstr ""

#: ./docs/10.x/requests.md:557
#: ./docs/11.x/requests.md:582
#: ./docs/master/requests.md:557
msgid ""
"if ($request->file('photo')->isValid()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:557
#: ./docs/9.x/requests.md:619
#: ./docs/10.x/requests.md:635
#: ./docs/11.x/requests.md:651
#: ./docs/master/requests.md:626
msgid "Trusting All Proxies"
msgstr ""

#: ./docs/9.x/requests.md:557
#: ./docs/10.x/requests.md:573
#: ./docs/11.x/requests.md:598
#: ./docs/master/requests.md:573
msgid "There are a variety of other methods available on `UploadedFile` instances. Check out the [API documentation for the class](https://github.com/symfony/symfony/blob/6.0/src/Symfony/Component/HttpFoundation/File/UploadedFile.php) for more information regarding these methods."
msgstr ""

#: ./docs/8.x/requests.md:559
#: ./docs/9.x/requests.md:621
#: ./docs/10.x/requests.md:637
#: ./docs/11.x/requests.md:653
#: ./docs/master/requests.md:628
msgid "If you are using Amazon AWS or another \"cloud\" load balancer provider, you may not know the IP addresses of your actual balancers. In this case, you may use `*` to trust all proxies:"
msgstr ""

#: ./docs/8.x/requests.md:561
#: ./docs/9.x/requests.md:623
#: ./docs/10.x/requests.md:639
msgid ""
"/**\n"
" * The trusted proxies for this application.\n"
" *\n"
" * @var string|array\n"
" */\n"
"protected $proxies = '*';"
msgstr ""

#: ./docs/10.x/requests.md:562
#: ./docs/11.x/requests.md:587
#: ./docs/master/requests.md:562
msgid "File Paths and Extensions"
msgstr ""

#: ./docs/8.x/requests.md:568
#: ./docs/9.x/requests.md:630
#: ./docs/10.x/requests.md:646
#: ./docs/11.x/requests.md:659
#: ./docs/master/requests.md:634
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-trusted-hosts\"></a>"
#~ msgstr ""

#: ./docs/8.x/requests.md:569
#: ./docs/9.x/requests.md:631
#: ./docs/10.x/requests.md:647
#: ./docs/11.x/requests.md:660
#: ./docs/master/requests.md:635
msgid "Configuring Trusted Hosts"
msgstr ""

#: ./docs/8.x/requests.md:571
#: ./docs/9.x/requests.md:633
#: ./docs/10.x/requests.md:649
#: ./docs/11.x/requests.md:662
#: ./docs/master/requests.md:637
msgid "By default, Laravel will respond to all requests it receives regardless of the content of the HTTP request's `Host` header. In addition, the `Host` header's value will be used when generating absolute URLs to your application during a web request."
msgstr ""

#: ./docs/8.x/requests.md:573
#: ./docs/9.x/requests.md:635
#: ./docs/10.x/requests.md:651
msgid "Typically, you should configure your web server, such as Nginx or Apache, to only send requests to your application that match a given host name. However, if you do not have the ability to customize your web server directly and need to instruct Laravel to only respond to certain host names, you may do so by enabling the `App\\Http\\Middleware\\TrustHosts` middleware for your application."
msgstr ""

#: ./docs/8.x/requests.md:575
#: ./docs/9.x/requests.md:637
#: ./docs/10.x/requests.md:653
msgid "The `TrustHosts` middleware is already included in the `$middleware` stack of your application; however, you should uncomment it so that it becomes active. Within this middleware's `hosts` method, you may specify the host names that your application should respond to. Incoming requests with other `Host` value headers will be rejected:"
msgstr ""

#: ./docs/8.x/requests.md:577
#: ./docs/9.x/requests.md:639
msgid ""
"/**\n"
" * Get the host patterns that should be trusted.\n"
" *\n"
" * @return array\n"
" */\n"
"public function hosts()\n"
"{\n"
"    return [\n"
"        'laravel.test',\n"
"        $this->allSubdomainsOfApplicationUrl(),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/requests.md:590
#: ./docs/9.x/requests.md:652
#: ./docs/10.x/requests.md:668
msgid "The `allSubdomainsOfApplicationUrl` helper method will return a regular expression matching all subdomains of your application's `app.url` configuration value. This helper method provides a convenient way to allow all of your application's subdomains when building an application that utilizes wildcard subdomains."
msgstr ""

#: ./docs/master/requests.md:604
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustProxies(at: [\n"
"        '192.168.1.1',\n"
"        '192.168.1.2',\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/master/requests.md:623
msgid "If you are using AWS Elastic Load Balancing, your `headers` value should be `Request::HEADER_X_FORWARDED_AWS_ELB`. For more information on the constants that may be used in the `headers` value, check out Symfony's documentation on [trusting proxies](https://symfony.com/doc/7.0/deployment/proxies.html)."
msgstr ""

#: ./docs/11.x/requests.md:627
#: ./docs/master/requests.md:602
msgid "To solve this, you may enable the `Illuminate\\Http\\Middleware\\TrustProxies` middleware that is included in your Laravel application, which allows you to quickly customize the load balancers or proxies that should be trusted by your application. Your trusted proxies should be specified using the `trustProxies` middleware method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/requests.md:629
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustProxies(at: [\n"
"        '192.168.1.1',\n"
"        '10.0.0.0/8',\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/11.x/requests.md:636
#: ./docs/master/requests.md:611
msgid "In addition to configuring the trusted proxies, you may also configure the proxy headers that should be trusted:"
msgstr ""

#: ./docs/11.x/requests.md:638
#: ./docs/master/requests.md:613
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustProxies(headers: Request::HEADER_X_FORWARDED_FOR |\n"
"        Request::HEADER_X_FORWARDED_HOST |\n"
"        Request::HEADER_X_FORWARDED_PORT |\n"
"        Request::HEADER_X_FORWARDED_PROTO |\n"
"        Request::HEADER_X_FORWARDED_AWS_ELB\n"
"    );\n"
"})"
msgstr ""

#: ./docs/11.x/requests.md:648
msgid "If you are using AWS Elastic Load Balancing, the `headers` value should be `Request::HEADER_X_FORWARDED_AWS_ELB`. If your load balancer uses the standard `Forwarded` header from [RFC 7239](https://www.rfc-editor.org/rfc/rfc7239#section-4), the `headers` value should be `Request::HEADER_FORWARDED`. For more information on the constants that may be used in the `headers` value, check out Symfony's documentation on [trusting proxies](https://symfony.com/doc/7.0/deployment/proxies.html)."
msgstr ""

#: ./docs/10.x/requests.md:655
msgid ""
"/**\n"
" * Get the host patterns that should be trusted.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"public function hosts(): array\n"
"{\n"
"    return [\n"
"        'laravel.test',\n"
"        $this->allSubdomainsOfApplicationUrl(),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/requests.md:655
#: ./docs/master/requests.md:630
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustProxies(at: '*');\n"
"})"
msgstr ""

#: ./docs/11.x/requests.md:664
#: ./docs/master/requests.md:639
msgid "Typically, you should configure your web server, such as Nginx or Apache, to only send requests to your application that match a given hostname. However, if you do not have the ability to customize your web server directly and need to instruct Laravel to only respond to certain hostnames, you may do so by enabling the `Illuminate\\Http\\Middleware\\TrustHosts` middleware for your application."
msgstr ""

#: ./docs/11.x/requests.md:666
#: ./docs/master/requests.md:641
msgid "To enable the `TrustHosts` middleware, you should invoke the `trustHosts` middleware method in your application's `bootstrap/app.php` file. Using the `at` argument of this method, you may specify the hostnames that your application should respond to. Incoming requests with other `Host` headers will be rejected:"
msgstr ""

#: ./docs/11.x/requests.md:668
#: ./docs/master/requests.md:643
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustHosts(at: ['laravel.test']);\n"
"})"
msgstr ""

#: ./docs/11.x/requests.md:672
#: ./docs/master/requests.md:647
msgid "By default, requests coming from subdomains of the application's URL are also automatically trusted. If you would like to disable this behavior, you may use the `subdomains` argument:"
msgstr ""

#: ./docs/11.x/requests.md:674
#: ./docs/master/requests.md:649
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustHosts(at: ['laravel.test'], subdomains: false);\n"
"})"
msgstr ""

#: ./docs/11.x/requests.md:678
msgid "If you need to access your application's configuration files or database to determine your trusted hosts, you may provide a closure to the `at` argument:"
msgstr ""

#: ./docs/11.x/requests.md:680
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->trustHosts(at: fn () => config('app.trusted_hosts'));\n"
"})"
msgstr ""
