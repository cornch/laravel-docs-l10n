msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:27\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/session.pot\n"
"X-Crowdin-File-ID: 153\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

# H1
#: ./docs/8.x/session.md:1
#: ./docs/9.x/session.md:1
#: ./docs/10.x/session.md:1
#: ./docs/11.x/session.md:1
#: ./docs/master/session.md:1
msgid "HTTP Session"
msgstr "HTTP Session"

# P
#: ./docs/8.x/session.md:3
#: ./docs/9.x/session.md:3
#: ./docs/10.x/session.md:3
#: ./docs/11.x/session.md:3
#: ./docs/master/session.md:3
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# P
#: ./docs/8.x/session.md:4
#: ./docs/9.x/session.md:4
#: ./docs/10.x/session.md:4
#: ./docs/11.x/session.md:4
#: ./docs/master/session.md:4
msgid "[Configuration](#configuration)"
msgstr "[設定](#configuration)"

# P
#: ./docs/8.x/session.md:5
#: ./docs/9.x/session.md:5
#: ./docs/10.x/session.md:5
#: ./docs/11.x/session.md:5
#: ./docs/master/session.md:5
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr "[Driver 前置需求](#driver-prerequisites)"

# P
#: ./docs/10.x/session.md:6
#: ./docs/11.x/session.md:6
#: ./docs/master/session.md:6
msgid "[Interacting With the Session](#interacting-with-the-session)"
msgstr ""

# P
#: ./docs/8.x/session.md:6
#: ./docs/9.x/session.md:6
msgid "[Interacting With The Session](#interacting-with-the-session)"
msgstr "[使用 Session](#interacting-with-the-session)"

# P
#: ./docs/8.x/session.md:7
#: ./docs/9.x/session.md:7
#: ./docs/10.x/session.md:7
#: ./docs/11.x/session.md:7
#: ./docs/master/session.md:7
msgid "[Retrieving Data](#retrieving-data)"
msgstr "[取得資料](#retrieving-data)"

# P
#: ./docs/8.x/session.md:8
#: ./docs/9.x/session.md:8
#: ./docs/10.x/session.md:8
#: ./docs/11.x/session.md:8
#: ./docs/master/session.md:8
msgid "[Storing Data](#storing-data)"
msgstr "[保存資料](#storing-data)"

# P
#: ./docs/8.x/session.md:9
#: ./docs/9.x/session.md:9
#: ./docs/10.x/session.md:9
#: ./docs/11.x/session.md:9
#: ./docs/master/session.md:9
msgid "[Flash Data](#flash-data)"
msgstr "[快閃資料](#flash-data)"

# P
#: ./docs/8.x/session.md:10
#: ./docs/9.x/session.md:10
#: ./docs/10.x/session.md:10
#: ./docs/11.x/session.md:10
#: ./docs/master/session.md:10
msgid "[Deleting Data](#deleting-data)"
msgstr "[刪除資料](#deleting-data)"

# P
#: ./docs/10.x/session.md:11
#: ./docs/11.x/session.md:11
#: ./docs/master/session.md:11
msgid "[Regenerating the Session ID](#regenerating-the-session-id)"
msgstr ""

# P
#: ./docs/8.x/session.md:11
#: ./docs/9.x/session.md:11
msgid "[Regenerating The Session ID](#regenerating-the-session-id)"
msgstr "[重新產生 Session ID](#regenerating-the-session-id)"

# P
#: ./docs/8.x/session.md:12
#: ./docs/9.x/session.md:12
#: ./docs/10.x/session.md:12
#: ./docs/11.x/session.md:12
#: ./docs/master/session.md:12
msgid "[Session Blocking](#session-blocking)"
msgstr "[Session 鎖定](#session-blocking)"

# P
#: ./docs/8.x/session.md:13
#: ./docs/9.x/session.md:13
#: ./docs/10.x/session.md:13
#: ./docs/11.x/session.md:13
#: ./docs/master/session.md:13
msgid "[Adding Custom Session Drivers](#adding-custom-session-drivers)"
msgstr "[新增自訂的 Session Driver](#adding-custom-session-drivers)"

# P
#: ./docs/10.x/session.md:14
#: ./docs/11.x/session.md:14
#: ./docs/master/session.md:14
msgid "[Implementing the Driver](#implementing-the-driver)"
msgstr ""

# P
#: ./docs/8.x/session.md:14
#: ./docs/9.x/session.md:14
msgid "[Implementing The Driver](#implementing-the-driver)"
msgstr "[實作 Driver](#implementing-the-driver)"

# P
#: ./docs/10.x/session.md:15
#: ./docs/11.x/session.md:15
#: ./docs/master/session.md:15
msgid "[Registering the Driver](#registering-the-driver)"
msgstr ""

# P
#: ./docs/8.x/session.md:15
#: ./docs/9.x/session.md:15
msgid "[Registering The Driver](#registering-the-driver)"
msgstr "[註冊 Driver](#registering-the-driver)"

# P
#: ./docs/8.x/session.md:17
#: ./docs/9.x/session.md:17
#: ./docs/10.x/session.md:17
#: ./docs/11.x/session.md:17
#: ./docs/master/session.md:17
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/session.md:18
#: ./docs/9.x/session.md:18
#: ./docs/10.x/session.md:18
#: ./docs/11.x/session.md:18
#: ./docs/master/session.md:18
msgid "Introduction"
msgstr "簡介"

# P
#: ./docs/8.x/session.md:20
#: ./docs/9.x/session.md:20
#: ./docs/10.x/session.md:20
#: ./docs/11.x/session.md:20
#: ./docs/master/session.md:20
msgid "Since HTTP driven applications are stateless, sessions provide a way to store information about the user across multiple requests. That user information is typically placed in a persistent store / backend that can be accessed from subsequent requests."
msgstr "由於使用 HTTP 的應用程式是無狀態的 (Stateless)，因此 Session 提供了能在多個 Request 間儲存有關使用者資訊的方法。這個使用者資訊通常儲存於持續性存放空間 (Persistent Store) 或後端中，能讓我們在之後的 Request 中存取。"

# P
#: ./docs/8.x/session.md:22
#: ./docs/9.x/session.md:22
#: ./docs/10.x/session.md:22
#: ./docs/11.x/session.md:22
#: ./docs/master/session.md:22
msgid "Laravel ships with a variety of session backends that are accessed through an expressive, unified API. Support for popular backends such as [Memcached](https://memcached.org), [Redis](https://redis.io), and databases is included."
msgstr "Laravel 隨附了多種 Session 後端，能讓我們使用直觀且同一的 API 來存取 Session。支援的後端包含常見的 [Memcached](https://memcached.org)、[Redis](https://redis.io)、與資料庫。"

# P
#: ./docs/8.x/session.md:24
#: ./docs/9.x/session.md:24
#: ./docs/10.x/session.md:24
#: ./docs/11.x/session.md:24
#: ./docs/master/session.md:24
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/session.md:25
#: ./docs/9.x/session.md:25
#: ./docs/10.x/session.md:25
#: ./docs/11.x/session.md:25
#: ./docs/master/session.md:25
msgid "Configuration"
msgstr "設定"

# P
#: ./docs/11.x/session.md:27
#: ./docs/master/session.md:27
msgid "Your application's session configuration file is stored at `config/session.php`. Be sure to review the options available to you in this file. By default, Laravel is configured to use the `database` session driver."
msgstr ""

# P
#: ./docs/8.x/session.md:27
#: ./docs/9.x/session.md:27
#: ./docs/10.x/session.md:27
msgid "Your application's session configuration file is stored at `config/session.php`. Be sure to review the options available to you in this file. By default, Laravel is configured to use the `file` session driver, which will work well for many applications. If your application will be load balanced across multiple web servers, you should choose a centralized store that all servers can access, such as Redis or a database."
msgstr "專案的 Session 設定檔存在 `config/session.php` 中。建議先閱讀該檔案了解一下有哪些可用的選項。預設情況下，Laravel 設定使用 `file` Session Driver，對於大多數的專案來說，都可以使用這個 Driver。若你的網站會在多個 Web Server (網頁伺服器) 間做 Load Balance (負載平衡)，那我們就會需要選擇一種集中式的存放方案，如 Redis 或資料庫。"

# P
#: ./docs/11.x/session.md:29
#: ./docs/master/session.md:29
msgid "The session `driver` configuration option defines where session data will be stored for each request. Laravel includes a variety of drivers:"
msgstr ""

# P
#: ./docs/8.x/session.md:29
#: ./docs/9.x/session.md:29
#: ./docs/10.x/session.md:29
msgid "The session `driver` configuration option defines where session data will be stored for each request. Laravel ships with several great drivers out of the box:"
msgstr "Session 的 `driver` 設定定義了每個 Request 的 Session 資料要存在哪裡。Laravel 隨附了多個不錯的 Driver："

# P
#: ./docs/8.x/session.md:33
#: ./docs/9.x/session.md:33
#: ./docs/10.x/session.md:33
#: ./docs/11.x/session.md:33
#: ./docs/master/session.md:33
msgid "`file` - sessions are stored in `storage/framework/sessions`."
msgstr "`file` - Session 儲存在 `storage/framework/sessions`。"

# P
#: ./docs/8.x/session.md:34
#: ./docs/9.x/session.md:34
#: ./docs/10.x/session.md:34
#: ./docs/11.x/session.md:34
#: ./docs/master/session.md:34
msgid "`cookie` - sessions are stored in secure, encrypted cookies."
msgstr "`cookie` - Session 儲存在安全的加密 Cookie 中。"

# P
#: ./docs/8.x/session.md:35
#: ./docs/9.x/session.md:35
#: ./docs/10.x/session.md:35
#: ./docs/11.x/session.md:35
#: ./docs/master/session.md:35
msgid "`database` - sessions are stored in a relational database."
msgstr "`database` - Session 儲存在關聯式資料庫中。"

# P
#: ./docs/8.x/session.md:36
#: ./docs/9.x/session.md:36
#: ./docs/10.x/session.md:36
#: ./docs/11.x/session.md:36
#: ./docs/master/session.md:36
msgid "`memcached` / `redis` - sessions are stored in one of these fast, cache based stores."
msgstr "`memcached` / `redis` - Session 儲存在其中一個快速、基於快取的存放空間中。"

# P
#: ./docs/8.x/session.md:37
#: ./docs/9.x/session.md:37
#: ./docs/10.x/session.md:37
#: ./docs/11.x/session.md:37
#: ./docs/master/session.md:37
msgid "`dynamodb` - sessions are stored in AWS DynamoDB."
msgstr "`dynamodb` - Session 儲存在 AWS DynamoDB。"

# P
#: ./docs/8.x/session.md:38
#: ./docs/9.x/session.md:38
#: ./docs/10.x/session.md:38
#: ./docs/11.x/session.md:38
#: ./docs/master/session.md:38
msgid "`array` - sessions are stored in a PHP array and will not be persisted."
msgstr "`array` - Session 儲存在 PHP 陣列中，且不會被^[持續保存](Persist)。"

# P
#: ./docs/8.x/session.md:42
#: ./docs/9.x/session.md:43
#: ./docs/10.x/session.md:43
#: ./docs/11.x/session.md:43
#: ./docs/master/session.md:43
msgid "The array driver is primarily used during [testing](/docs/{{version}}/testing) and prevents the data stored in the session from being persisted."
msgstr "Array Driver 主要是用在[測試](/docs/{{version}}/testing)上的，會讓保存在 Session 裡的資料不被持續保存。"

# P
#: ./docs/8.x/session.md:44
#: ./docs/9.x/session.md:45
#: ./docs/10.x/session.md:45
#: ./docs/11.x/session.md:45
#: ./docs/master/session.md:45
#~ msgid "<a name=\"driver-prerequisites\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/session.md:45
#: ./docs/9.x/session.md:46
#: ./docs/10.x/session.md:46
#: ./docs/11.x/session.md:46
#: ./docs/master/session.md:46
msgid "Driver Prerequisites"
msgstr "Driver 前置需求"

# P
#: ./docs/8.x/session.md:47
#: ./docs/9.x/session.md:48
#: ./docs/10.x/session.md:48
#: ./docs/11.x/session.md:48
#: ./docs/master/session.md:48
#~ msgid "<a name=\"database\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:48
#: ./docs/9.x/session.md:49
#: ./docs/10.x/session.md:49
#: ./docs/11.x/session.md:49
#: ./docs/master/session.md:49
msgid "Database"
msgstr "Database"

# P
#: ./docs/8.x/session.md:50
#: ./docs/9.x/session.md:51
#: ./docs/10.x/session.md:51
msgid "When using the `database` session driver, you will need to create a table to contain the session records. An example `Schema` declaration for the table may be found below:"
msgstr "使用 `database` Session Driver 時，需要先建立用來保存 Session 紀錄的資料表。下列是一個 Session 紀錄資料表的 `Schema` 定義範例："

# P
#: ./docs/11.x/session.md:51
#: ./docs/master/session.md:51
msgid "When using the `database` session driver, you will need to ensure that you have a database table to contain the session data. Typically, this is included in Laravel's default `0001_01_01_000000_create_users_table.php` [database migration](/docs/{{version}}/migrations); however, if for any reason you do not have a `sessions` table, you may use the `make:session-table` Artisan command to generate this migration:"
msgstr ""

# CODE
#: ./docs/8.x/session.md:52
#: ./docs/9.x/session.md:53
msgid ""
"Schema::create('sessions', function ($table) {\n"
"    $table->string('id')->primary();\n"
"    $table->foreignId('user_id')->nullable()->index();\n"
"    $table->string('ip_address', 45)->nullable();\n"
"    $table->text('user_agent')->nullable();\n"
"    $table->text('payload');\n"
"    $table->integer('last_activity')->index();\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/session.md:53
msgid ""
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"\n"
"Schema::create('sessions', function (Blueprint $table) {\n"
"    $table->string('id')->primary();\n"
"    $table->foreignId('user_id')->nullable()->index();\n"
"    $table->string('ip_address', 45)->nullable();\n"
"    $table->text('user_agent')->nullable();\n"
"    $table->text('payload');\n"
"    $table->integer('last_activity')->index();\n"
"});"
msgstr ""

# CODE: shell
#: ./docs/11.x/session.md:53
#: ./docs/master/session.md:53
msgid ""
"php artisan make:session-table\n"
"\n"
"php artisan migrate"
msgstr ""

# P
#: ./docs/8.x/session.md:61
#: ./docs/9.x/session.md:62
#: ./docs/10.x/session.md:65
msgid "You may use the `session:table` Artisan command to generate this migration. To learn more about database migrations, you may consult the complete [migration documentation](/docs/{{version}}/migrations):"
msgstr "可以使用 `session:table` Artisan 指令來產生這個 Migration。若要瞭解更多資料庫 Migration 的資訊，請參考完整的 [Migration 說明文件](/docs/{{version}}/migrations)："

# CODE
# CODE: shell
#: ./docs/8.x/session.md:63
#: ./docs/9.x/session.md:64
#: ./docs/10.x/session.md:67
msgid ""
"php artisan session:table\n"
"\n"
"php artisan migrate"
msgstr ""

# P
#: ./docs/11.x/session.md:65
#: ./docs/master/session.md:65
msgid "The `SESSION_CONNECTION` environment variable, or the `connection` option in the `session.php` configuration file, may be used to specify which Redis connection is used for session storage."
msgstr ""

# P
#: ./docs/8.x/session.md:67
#: ./docs/9.x/session.md:70
#: ./docs/10.x/session.md:73
#: ./docs/11.x/session.md:59
#: ./docs/master/session.md:59
#~ msgid "<a name=\"redis\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:68
#: ./docs/9.x/session.md:71
#: ./docs/10.x/session.md:74
#: ./docs/11.x/session.md:60
#: ./docs/master/session.md:60
msgid "Redis"
msgstr "Redis"

# P
#: ./docs/8.x/session.md:70
#: ./docs/9.x/session.md:73
#: ./docs/10.x/session.md:76
#: ./docs/11.x/session.md:62
#: ./docs/master/session.md:62
msgid "Before using Redis sessions with Laravel, you will need to either install the PhpRedis PHP extension via PECL or install the `predis/predis` package (~1.0) via Composer. For more information on configuring Redis, consult Laravel's [Redis documentation](/docs/{{version}}/redis#configuration)."
msgstr "在 Laravel 上使用 Redis Session 前，必須先使用 PECL 安裝 PhpRedis PHP 擴充程式，或是使用 Composer 安裝 `predis/predis` 套件 (~1.0)。更多有關設定 Redis 的資訊，請參考 Laravel 的 [Redis 說明文件](/docs/{{version}}/redis#configuration)。"

# P
#: ./docs/8.x/session.md:72
#: ./docs/9.x/session.md:76
#: ./docs/10.x/session.md:79
msgid "In the `session` configuration file, the `connection` option may be used to specify which Redis connection is used by the session."
msgstr "在 `session` 設定檔中，可使用 `connection` 選項來指定 Session 要使用哪個 Redis 連線。"

# P
#: ./docs/8.x/session.md:74
#: ./docs/9.x/session.md:78
#: ./docs/10.x/session.md:81
#: ./docs/11.x/session.md:67
#: ./docs/master/session.md:67
#~ msgid "<a name=\"interacting-with-the-session\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/session.md:75
#: ./docs/9.x/session.md:79
msgid "Interacting With The Session"
msgstr "使用 Session"

# P
#: ./docs/8.x/session.md:77
#: ./docs/9.x/session.md:81
#: ./docs/10.x/session.md:84
#: ./docs/11.x/session.md:70
#: ./docs/master/session.md:70
#~ msgid "<a name=\"retrieving-data\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/session.md:78
#: ./docs/9.x/session.md:82
#: ./docs/10.x/session.md:85
#: ./docs/11.x/session.md:71
#: ./docs/master/session.md:71
msgid "Retrieving Data"
msgstr "取得資料"

# P
#: ./docs/8.x/session.md:80
#: ./docs/9.x/session.md:84
#: ./docs/10.x/session.md:87
#: ./docs/11.x/session.md:73
#: ./docs/master/session.md:73
msgid "There are two primary ways of working with session data in Laravel: the global `session` helper and via a `Request` instance. First, let's look at accessing the session via a `Request` instance, which can be type-hinted on a route closure or controller method. Remember, controller method dependencies are automatically injected via the Laravel [service container](/docs/{{version}}/container):"
msgstr "在 Laravel 中有兩種使用 Session 的方式：全域 `session` 輔助函式，或是 `Request` 實體。首先，我們先來看看如何使用 `Request` 實體來存取 Session。可以在 Route 閉包或 Controller 方法上型別提示 (Type-Hint) Request。請記住，Controller 方法的相依性會自動由 Laravel 的 [Service Container](/docs/{{version}}/container) 插入："

# H2
#: ./docs/10.x/session.md:82
#: ./docs/11.x/session.md:68
#: ./docs/master/session.md:68
msgid "Interacting With the Session"
msgstr ""

# CODE
#: ./docs/8.x/session.md:82
#: ./docs/9.x/session.md:86
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  Request  $request\n"
"     * @param  int  $id\n"
"     * @return Response\n"
"     */\n"
"    public function show(Request $request, $id)\n"
"    {\n"
"        $value = $request->session()->get('key');\n"
"\n"
"        //\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/session.md:89
#: ./docs/11.x/session.md:75
#: ./docs/master/session.md:75
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     */\n"
"    public function show(Request $request, string $id): View\n"
"    {\n"
"        $value = $request->session()->get('key');\n"
"\n"
"        // ...\n"
"\n"
"        $user = $this->users->find($id);\n"
"\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/session.md:106
#: ./docs/9.x/session.md:110
#: ./docs/10.x/session.md:113
#: ./docs/11.x/session.md:99
#: ./docs/master/session.md:99
msgid "When you retrieve an item from the session, you may also pass a default value as the second argument to the `get` method. This default value will be returned if the specified key does not exist in the session. If you pass a closure as the default value to the `get` method and the requested key does not exist, the closure will be executed and its result returned:"
msgstr "從 Session 中取得資料時，也可以傳入一個預設值作為第二個引數給 `get` 方法。當 Session 中沒有指定的索引鍵時，就會回傳該索引值。若將閉包傳入作為預設值給 `get`，且要求的索引鍵不存在時，就會執行該閉包並回傳執行的結果："

# CODE
#: ./docs/8.x/session.md:108
#: ./docs/9.x/session.md:112
#: ./docs/10.x/session.md:115
#: ./docs/11.x/session.md:101
#: ./docs/master/session.md:101
msgid ""
"$value = $request->session()->get('key', 'default');\n"
"\n"
"$value = $request->session()->get('key', function () {\n"
"    return 'default';\n"
"});"
msgstr ""

# P
#: ./docs/8.x/session.md:114
#: ./docs/9.x/session.md:118
#: ./docs/10.x/session.md:121
#: ./docs/11.x/session.md:107
#: ./docs/master/session.md:107
#~ msgid "<a name=\"the-global-session-helper\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:115
#: ./docs/9.x/session.md:119
#: ./docs/10.x/session.md:122
#: ./docs/11.x/session.md:108
#: ./docs/master/session.md:108
msgid "The Global Session Helper"
msgstr "全域 Session 輔助函式"

# P
#: ./docs/8.x/session.md:117
#: ./docs/9.x/session.md:121
#: ./docs/10.x/session.md:124
#: ./docs/11.x/session.md:110
#: ./docs/master/session.md:110
msgid "You may also use the global `session` PHP function to retrieve and store data in the session. When the `session` helper is called with a single, string argument, it will return the value of that session key. When the helper is called with an array of key / value pairs, those values will be stored in the session:"
msgstr "也可以使用全域的 `session` PHP 函式來從 Session 中取得或儲存資料。呼叫 `session` 輔助函式時若只提供一個字串參數，則會回傳該 Session 索引鍵的值。呼叫 `session` 輔助函式時若提供一組索引鍵 / 值配對的陣列，則會將該陣列的值儲存在 Session 中："

# CODE
#: ./docs/8.x/session.md:119
#: ./docs/9.x/session.md:123
#: ./docs/10.x/session.md:126
#: ./docs/11.x/session.md:112
#: ./docs/master/session.md:112
msgid ""
"Route::get('/home', function () {\n"
"    // Retrieve a piece of data from the session...\n"
"    $value = session('key');\n"
"\n"
"    // Specifying a default value...\n"
"    $value = session('key', 'default');\n"
"\n"
"    // Store a piece of data in the session...\n"
"    session(['key' => 'value']);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/session.md:130
#: ./docs/9.x/session.md:135
#: ./docs/10.x/session.md:138
#: ./docs/11.x/session.md:124
#: ./docs/master/session.md:124
msgid "There is little practical difference between using the session via an HTTP request instance versus using the global `session` helper. Both methods are [testable](/docs/{{version}}/testing) via the `assertSessionHas` method which is available in all of your test cases."
msgstr "使用 HTTP Request 實體跟全域 `session` 輔助函式在實務上沒有太大的不同。不管是哪種方式都是[可測試的](/docs/{{version}}/testing)，測試時可以使用測試例中的 `assertSessionHas` 方法來測試。"

# P
#: ./docs/8.x/session.md:132
#: ./docs/9.x/session.md:137
#: ./docs/10.x/session.md:140
#: ./docs/11.x/session.md:126
#: ./docs/master/session.md:126
#~ msgid "<a name=\"retrieving-all-session-data\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:133
#: ./docs/9.x/session.md:138
#: ./docs/10.x/session.md:141
#: ./docs/11.x/session.md:127
#: ./docs/master/session.md:127
msgid "Retrieving All Session Data"
msgstr "取得所有 Session 資料"

# P
#: ./docs/8.x/session.md:135
#: ./docs/9.x/session.md:140
#: ./docs/10.x/session.md:143
#: ./docs/11.x/session.md:129
#: ./docs/master/session.md:129
msgid "If you would like to retrieve all the data in the session, you may use the `all` method:"
msgstr "若想從 Session 中取得所有資料，可以使用 `all` 方法："

# CODE
#: ./docs/8.x/session.md:137
#: ./docs/9.x/session.md:142
#: ./docs/10.x/session.md:145
#: ./docs/11.x/session.md:131
#: ./docs/master/session.md:131
msgid "$data = $request->session()->all();"
msgstr ""

# P
#: ./docs/8.x/session.md:139
#: ./docs/9.x/session.md:144
#: ./docs/10.x/session.md:156
#: ./docs/11.x/session.md:142
#: ./docs/master/session.md:142
#~ msgid "<a name=\"determining-if-an-item-exists-in-the-session\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:140
#: ./docs/9.x/session.md:145
msgid "Determining If An Item Exists In The Session"
msgstr "判斷 Session 中某個項目是否存在"

# P
#: ./docs/8.x/session.md:142
#: ./docs/9.x/session.md:147
#: ./docs/10.x/session.md:159
#: ./docs/11.x/session.md:145
#: ./docs/master/session.md:145
msgid "To determine if an item is present in the session, you may use the `has` method. The `has` method returns `true` if the item is present and is not `null`:"
msgstr "若要判斷 Session 中是否有某個項目，可使用 `has` 方法。`has` 方法會在該項目存在且不為 `null` 時回傳 `true`："

# CODE
#: ./docs/8.x/session.md:144
#: ./docs/9.x/session.md:149
msgid ""
"if ($request->session()->has('users')) {\n"
"    //\n"
"}"
msgstr ""

# P
#: ./docs/10.x/session.md:147
#: ./docs/11.x/session.md:133
#: ./docs/master/session.md:133
#~ msgid "<a name=\"retrieving-a-portion-of-the-session-data\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/session.md:148
#: ./docs/11.x/session.md:134
#: ./docs/master/session.md:134
msgid "Retrieving a Portion of the Session Data"
msgstr ""

# P
#: ./docs/8.x/session.md:148
#: ./docs/9.x/session.md:153
#: ./docs/10.x/session.md:165
#: ./docs/11.x/session.md:151
#: ./docs/master/session.md:151
msgid "To determine if an item is present in the session, even if its value is `null`, you may use the `exists` method:"
msgstr "若想判斷某個項目是否存在 Session，且不論其值是否為 `null`，可使用 `exists` 方法："

# P
#: ./docs/10.x/session.md:150
#: ./docs/11.x/session.md:136
#: ./docs/master/session.md:136
msgid "The `only` and `except` methods may be used to retrieve a subset of the session data:"
msgstr ""

# CODE
#: ./docs/8.x/session.md:150
#: ./docs/9.x/session.md:155
msgid ""
"if ($request->session()->exists('users')) {\n"
"    //\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/session.md:152
#: ./docs/11.x/session.md:138
#: ./docs/master/session.md:138
msgid ""
"$data = $request->session()->only(['username', 'email']);\n"
"\n"
"$data = $request->session()->except(['username', 'email']);"
msgstr ""

# P
#: ./docs/8.x/session.md:154
msgid "To determine if an item is not present in the session, you may use the `missing` method. The `missing` method returns `true` if the item is `null` or if the item is not present:"
msgstr "若要判斷 Session 中是否沒有某個項目，可使用 `missing` 方法。`missing` 方法會在該項目為 `null` 或不存在時回傳 `true`："

# CODE
#: ./docs/8.x/session.md:156
#: ./docs/9.x/session.md:161
msgid ""
"if ($request->session()->missing('users')) {\n"
"    //\n"
"}"
msgstr ""

# H4
#: ./docs/10.x/session.md:157
#: ./docs/11.x/session.md:143
#: ./docs/master/session.md:143
msgid "Determining if an Item Exists in the Session"
msgstr ""

# P
#: ./docs/9.x/session.md:159
#: ./docs/10.x/session.md:171
#: ./docs/11.x/session.md:157
#: ./docs/master/session.md:157
msgid "To determine if an item is not present in the session, you may use the `missing` method. The `missing` method returns `true` if the item is not present:"
msgstr "若要判斷 Session 中是否沒有某個項目，可使用 `missing` 方法。`missing` 方法會在該項目不存在時回傳 `true`："

# P
#: ./docs/8.x/session.md:160
#: ./docs/9.x/session.md:165
#: ./docs/10.x/session.md:177
#: ./docs/11.x/session.md:163
#: ./docs/master/session.md:163
#~ msgid "<a name=\"storing-data\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/session.md:161
#: ./docs/11.x/session.md:147
#: ./docs/master/session.md:147
msgid ""
"if ($request->session()->has('users')) {\n"
"    // ...\n"
"}"
msgstr ""

# H3
#: ./docs/8.x/session.md:161
#: ./docs/9.x/session.md:166
#: ./docs/10.x/session.md:178
#: ./docs/11.x/session.md:164
#: ./docs/master/session.md:164
msgid "Storing Data"
msgstr "保存資料"

# P
#: ./docs/8.x/session.md:163
#: ./docs/9.x/session.md:168
#: ./docs/10.x/session.md:180
#: ./docs/11.x/session.md:166
#: ./docs/master/session.md:166
msgid "To store data in the session, you will typically use the request instance's `put` method or the global `session` helper:"
msgstr "若要將資料保存到 Session，我們通常會使用 Request 實體的 `put` 方法或全域的 `session` 輔助函式："

# CODE
#: ./docs/8.x/session.md:165
#: ./docs/9.x/session.md:170
#: ./docs/10.x/session.md:182
#: ./docs/11.x/session.md:168
#: ./docs/master/session.md:168
msgid ""
"// Via a request instance...\n"
"$request->session()->put('key', 'value');\n"
"\n"
"// Via the global \"session\" helper...\n"
"session(['key' => 'value']);"
msgstr ""

# CODE
#: ./docs/10.x/session.md:167
#: ./docs/11.x/session.md:153
#: ./docs/master/session.md:153
msgid ""
"if ($request->session()->exists('users')) {\n"
"    // ...\n"
"}"
msgstr ""

# P
#: ./docs/8.x/session.md:171
#: ./docs/9.x/session.md:176
#: ./docs/10.x/session.md:188
#: ./docs/11.x/session.md:174
#: ./docs/master/session.md:174
#~ msgid "<a name=\"pushing-to-array-session-values\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:172
#: ./docs/9.x/session.md:177
msgid "Pushing To Array Session Values"
msgstr "在 Session 值中推入陣列資料"

# CODE
#: ./docs/10.x/session.md:173
#: ./docs/11.x/session.md:159
#: ./docs/master/session.md:159
msgid ""
"if ($request->session()->missing('users')) {\n"
"    // ...\n"
"}"
msgstr ""

# P
#: ./docs/8.x/session.md:174
#: ./docs/9.x/session.md:179
#: ./docs/10.x/session.md:191
#: ./docs/11.x/session.md:177
#: ./docs/master/session.md:177
msgid "The `push` method may be used to push a new value onto a session value that is an array. For example, if the `user.teams` key contains an array of team names, you may push a new value onto the array like so:"
msgstr "可以使用 `push` 方法來將值推入 (Push) 到陣列的 Session 值中。舉例來說，若 `user.teams` 索引鍵中包含了一組團隊名稱陣列，我們可以像這樣將一個新的值推入陣列中："

# CODE
#: ./docs/8.x/session.md:176
#: ./docs/9.x/session.md:181
#: ./docs/10.x/session.md:193
#: ./docs/11.x/session.md:179
#: ./docs/master/session.md:179
msgid "$request->session()->push('user.teams', 'developers');"
msgstr ""

# P
#: ./docs/8.x/session.md:178
#: ./docs/9.x/session.md:183
#: ./docs/10.x/session.md:195
#: ./docs/11.x/session.md:181
#: ./docs/master/session.md:181
#~ msgid "<a name=\"retrieving-deleting-an-item\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:179
#: ./docs/9.x/session.md:184
msgid "Retrieving & Deleting An Item"
msgstr "取得與刪除項目"

# P
#: ./docs/8.x/session.md:181
#: ./docs/9.x/session.md:186
#: ./docs/10.x/session.md:198
#: ./docs/11.x/session.md:184
#: ./docs/master/session.md:184
msgid "The `pull` method will retrieve and delete an item from the session in a single statement:"
msgstr "使用 `pull` 方法即可以單一陳述式從 Session 內取得並刪除某個項目："

# CODE
#: ./docs/8.x/session.md:183
#: ./docs/9.x/session.md:188
#: ./docs/10.x/session.md:200
#: ./docs/11.x/session.md:186
#: ./docs/master/session.md:186
msgid "$value = $request->session()->pull('key', 'default');"
msgstr ""

# P
#: ./docs/8.x/session.md:185
#: ./docs/9.x/session.md:190
#: ./docs/10.x/session.md:202
#: ./docs/11.x/session.md:188
#~ msgid "<a name=\"incrementing-and-decrementing-session-values\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:186
#: ./docs/9.x/session.md:191
msgid "Incrementing & Decrementing Session Values"
msgstr "遞增或遞減 Session 值"

# P
#: ./docs/8.x/session.md:188
#: ./docs/9.x/session.md:193
#: ./docs/10.x/session.md:205
#: ./docs/11.x/session.md:191
#: ./docs/master/session.md:191
msgid "If your session data contains an integer you wish to increment or decrement, you may use the `increment` and `decrement` methods:"
msgstr "若 Session 資料中包含要遞增或遞減的整數，可以使用 `increment` (遞增) 與 `decrement` (遞減) 方法："

# P
#: ./docs/master/session.md:188
#~ msgid "<a name=\"#incrementing-and-decrementing-session-values\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/session.md:189
#: ./docs/11.x/session.md:175
#: ./docs/master/session.md:175
msgid "Pushing to Array Session Values"
msgstr ""

# CODE
#: ./docs/8.x/session.md:190
#: ./docs/9.x/session.md:195
#: ./docs/10.x/session.md:207
#: ./docs/11.x/session.md:193
#: ./docs/master/session.md:193
msgid ""
"$request->session()->increment('count');\n"
"\n"
"$request->session()->increment('count', $incrementBy = 2);\n"
"\n"
"$request->session()->decrement('count');\n"
"\n"
"$request->session()->decrement('count', $decrementBy = 2);"
msgstr ""

# H4
#: ./docs/10.x/session.md:196
#: ./docs/11.x/session.md:182
#: ./docs/master/session.md:182
msgid "Retrieving and Deleting an Item"
msgstr ""

# P
#: ./docs/8.x/session.md:198
#: ./docs/9.x/session.md:203
#: ./docs/10.x/session.md:215
#: ./docs/11.x/session.md:201
#: ./docs/master/session.md:201
#~ msgid "<a name=\"flash-data\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/session.md:199
#: ./docs/9.x/session.md:204
#: ./docs/10.x/session.md:216
#: ./docs/11.x/session.md:202
#: ./docs/master/session.md:202
msgid "Flash Data"
msgstr "快閃資料"

# P
#: ./docs/8.x/session.md:201
#: ./docs/9.x/session.md:206
#: ./docs/10.x/session.md:218
#: ./docs/11.x/session.md:204
#: ./docs/master/session.md:204
msgid "Sometimes you may wish to store items in the session for the next request. You may do so using the `flash` method. Data stored in the session using this method will be available immediately and during the subsequent HTTP request. After the subsequent HTTP request, the flashed data will be deleted. Flash data is primarily useful for short-lived status messages:"
msgstr "有時候，我們可能會想保存一些資料在 Session 中以供下一個 Request 使用。為此，我們可以使用 `flash` 方法。使用這個方法儲存在 Session 中的資料會在緊接著這個 Request 的下一個 HTTP Request 中可用。在下一個 HTTP Request 執行完成後，快閃資料就會被刪掉。快閃資料特別適合用於生命週期短的 (Short-Lived) 狀態訊息："

# H4
#: ./docs/10.x/session.md:203
#: ./docs/11.x/session.md:189
#: ./docs/master/session.md:189
msgid "Incrementing and Decrementing Session Values"
msgstr ""

# CODE
#: ./docs/8.x/session.md:203
#: ./docs/9.x/session.md:208
#: ./docs/10.x/session.md:220
#: ./docs/11.x/session.md:206
#: ./docs/master/session.md:206
msgid "$request->session()->flash('status', 'Task was successful!');"
msgstr ""

# P
#: ./docs/8.x/session.md:205
#: ./docs/9.x/session.md:210
#: ./docs/10.x/session.md:222
#: ./docs/11.x/session.md:208
#: ./docs/master/session.md:208
msgid "If you need to persist your flash data for several requests, you may use the `reflash` method, which will keep all of the flash data for an additional request. If you only need to keep specific flash data, you may use the `keep` method:"
msgstr "若想將快閃資料維持在好幾個 Request 中，可使用 `reflash` 方法。該方法會將所有的快閃資料都再維持一個 Request。若有需要保存特定的快閃資料，可使用 `keep` 方法："

# CODE
#: ./docs/8.x/session.md:207
#: ./docs/9.x/session.md:212
#: ./docs/10.x/session.md:224
#: ./docs/11.x/session.md:210
#: ./docs/master/session.md:210
msgid ""
"$request->session()->reflash();\n"
"\n"
"$request->session()->keep(['username', 'email']);"
msgstr ""

# P
#: ./docs/8.x/session.md:211
#: ./docs/9.x/session.md:216
#: ./docs/10.x/session.md:228
#: ./docs/11.x/session.md:214
#: ./docs/master/session.md:214
msgid "To persist your flash data only for the current request, you may use the `now` method:"
msgstr "若只想在目前 Request 中維持快閃資料，可使用 `now` 方法："

# CODE
#: ./docs/8.x/session.md:213
#: ./docs/9.x/session.md:218
#: ./docs/10.x/session.md:230
#: ./docs/11.x/session.md:216
#: ./docs/master/session.md:216
msgid "$request->session()->now('status', 'Task was successful!');"
msgstr ""

# P
#: ./docs/8.x/session.md:215
#: ./docs/9.x/session.md:220
#: ./docs/10.x/session.md:232
#: ./docs/11.x/session.md:218
#: ./docs/master/session.md:218
#~ msgid "<a name=\"deleting-data\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/session.md:216
#: ./docs/9.x/session.md:221
#: ./docs/10.x/session.md:233
#: ./docs/11.x/session.md:219
#: ./docs/master/session.md:219
msgid "Deleting Data"
msgstr "刪除資料"

# P
#: ./docs/8.x/session.md:218
#: ./docs/9.x/session.md:223
#: ./docs/10.x/session.md:235
#: ./docs/11.x/session.md:221
#: ./docs/master/session.md:221
msgid "The `forget` method will remove a piece of data from the session. If you would like to remove all data from the session, you may use the `flush` method:"
msgstr "使用 `forget` 方法可從 Session 中刪除一筆資料。若想移除 Session 中的所有資料，可使用 `flush` 方法："

# CODE
#: ./docs/8.x/session.md:220
#: ./docs/9.x/session.md:225
#: ./docs/10.x/session.md:237
#: ./docs/11.x/session.md:223
#: ./docs/master/session.md:223
msgid ""
"// Forget a single key...\n"
"$request->session()->forget('name');\n"
"\n"
"// Forget multiple keys...\n"
"$request->session()->forget(['name', 'status']);\n"
"\n"
"$request->session()->flush();"
msgstr ""

# P
#: ./docs/8.x/session.md:228
#: ./docs/9.x/session.md:233
#: ./docs/10.x/session.md:245
#: ./docs/11.x/session.md:231
#: ./docs/master/session.md:231
#~ msgid "<a name=\"regenerating-the-session-id\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/session.md:229
#: ./docs/9.x/session.md:234
msgid "Regenerating The Session ID"
msgstr "重新產生 Session ID"

# P
#: ./docs/8.x/session.md:231
#: ./docs/9.x/session.md:236
#: ./docs/10.x/session.md:248
#: ./docs/11.x/session.md:234
#: ./docs/master/session.md:234
msgid "Regenerating the session ID is often done in order to prevent malicious users from exploiting a [session fixation](https://owasp.org/www-community/attacks/Session_fixation) attack on your application."
msgstr "一般來說，重新產生 Session ID 是為了防止惡意使用者利用 [Session Fixation](https://owasp.org/www-community/attacks/Session_fixation) 弱點攻擊你的程式。"

# P
#: ./docs/8.x/session.md:233
#: ./docs/9.x/session.md:238
#: ./docs/10.x/session.md:250
#: ./docs/11.x/session.md:236
#: ./docs/master/session.md:236
msgid "Laravel automatically regenerates the session ID during authentication if you are using one of the Laravel [application starter kits](/docs/{{version}}/starter-kits) or [Laravel Fortify](/docs/{{version}}/fortify); however, if you need to manually regenerate the session ID, you may use the `regenerate` method:"
msgstr "如果你使用其中一種 Laravel 的[專案入門套件](/docs/{{version}}/starter-kits)，或是 [Laravel Fortify](/docs/{{version}}/fortify)，則 Laravel 會在登入時自動重新產生 Session ID。不過，若有需要手動重新產生 Session ID，可使用 `regenerate` 方法："

# CODE
#: ./docs/8.x/session.md:235
#: ./docs/9.x/session.md:240
#: ./docs/10.x/session.md:252
#: ./docs/11.x/session.md:238
#: ./docs/master/session.md:238
msgid "$request->session()->regenerate();"
msgstr ""

# P
#: ./docs/8.x/session.md:237
#: ./docs/9.x/session.md:242
#: ./docs/10.x/session.md:254
#: ./docs/11.x/session.md:240
#: ./docs/master/session.md:240
msgid "If you need to regenerate the session ID and remove all data from the session in a single statement, you may use the `invalidate` method:"
msgstr "若有需要以單一陳述式重新產生 Session ID 並從 Session 中移除所有資料的話，可使用 `invalidate` 方法："

# CODE
#: ./docs/8.x/session.md:239
#: ./docs/9.x/session.md:244
#: ./docs/10.x/session.md:256
#: ./docs/11.x/session.md:242
#: ./docs/master/session.md:242
msgid "$request->session()->invalidate();"
msgstr ""

# P
#: ./docs/8.x/session.md:241
#: ./docs/9.x/session.md:246
#: ./docs/10.x/session.md:258
#: ./docs/11.x/session.md:244
#: ./docs/master/session.md:244
#~ msgid "<a name=\"session-blocking\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/session.md:242
#: ./docs/9.x/session.md:247
#: ./docs/10.x/session.md:259
#: ./docs/11.x/session.md:245
#: ./docs/master/session.md:245
msgid "Session Blocking"
msgstr "Session 封鎖"

# P
#: ./docs/8.x/session.md:244
#: ./docs/9.x/session.md:250
msgid "To utilize session blocking, your application must be using a cache driver that supports [atomic locks](/docs/{{version}}/cache#atomic-locks). Currently, those cache drivers include the `memcached`, `dynamodb`, `redis`, and `database` drivers. In addition, you may not use the `cookie` session driver."
msgstr "若要使用 Session 鎖定，必須要使用支援 [Atomic Lock](/docs/{{version}}/cache#atomic-locks) (不可部分完成鎖定) 的快取 Driver。目前，支援 Atomic Lock 的快取 Driver 有 `memcached`、`dynamodb`、`redis`、`database` 等 Driver。此外，也沒辦法使用 `cookie` Session Driver。"

# H3
#: ./docs/10.x/session.md:246
#: ./docs/11.x/session.md:232
#: ./docs/master/session.md:232
msgid "Regenerating the Session ID"
msgstr ""

# P
#: ./docs/8.x/session.md:246
#: ./docs/9.x/session.md:252
#: ./docs/10.x/session.md:264
#: ./docs/11.x/session.md:250
#: ./docs/master/session.md:250
msgid "By default, Laravel allows requests using the same session to execute concurrently. So, for example, if you use a JavaScript HTTP library to make two HTTP requests to your application, they will both execute at the same time. For many applications, this is not a problem; however, session data loss can occur in a small subset of applications that make concurrent requests to two different application endpoints which both write data to the session."
msgstr "預設情況下，Laravel 能讓多個 Request 使用相同的 Session 來同步執行。不過，舉例來說，若我們使用某個 JavaScript HTTP 函式庫來建立兩個連到我們專案的 HTTP Request，且這兩個 Request 會同時執行。對於大多數的專案來說，這不會有什麼問題。不過，對一部分的專案，如果這兩個 Request 送往兩個不同的 Endpoint (端點)，且這兩個 Endpoint 都有寫入資料到 Session 的話，就有可能會發生 Session 資料遺失的問題。"

# P
#: ./docs/11.x/session.md:248
msgid "To utilize session blocking, your application must be using a cache driver that supports [atomic locks](/docs/{{version}}/cache#atomic-locks). Currently, those cache drivers include the `memcached`, `dynamodb`, `redis`, `mongodb` (included in the official `mongodb/laravel-mongodb` package), `database`, `file`, and `array` drivers. In addition, you may not use the `cookie` session driver."
msgstr ""

# P
#: ./docs/8.x/session.md:248
#: ./docs/9.x/session.md:254
#: ./docs/10.x/session.md:266
#: ./docs/11.x/session.md:252
#: ./docs/master/session.md:252
msgid "To mitigate this, Laravel provides functionality that allows you to limit concurrent requests for a given session. To get started, you may simply chain the `block` method onto your route definition. In this example, an incoming request to the `/profile` endpoint would acquire a session lock. While this lock is being held, any incoming requests to the `/profile` or `/order` endpoints which share the same session ID will wait for the first request to finish executing before continuing their execution:"
msgstr "為了解決這個問題，Laravel 提供了能讓我們針對給定 Session 限制同步 Request 數量的功能。要開始使用 Session 封鎖，我們只需要在 Route 定義後方串上 `block` 方法即可。在這個例子中，所有連入到 `/profile` Endpoint 的 Request 都會取得一個 Session Lock (鎖定)。當被 Lock 時，所有連到 `/profile` 或 `/order` Endpoint 的 Request 若有相同的 Session ID，都必須等到第一個 Request 執行完成後，才能繼續執行："

# CODE
#: ./docs/8.x/session.md:250
#: ./docs/9.x/session.md:256
msgid ""
"Route::post('/profile', function () {\n"
"    //\n"
"})->block($lockSeconds = 10, $waitSeconds = 10)\n"
"\n"
"Route::post('/order', function () {\n"
"    //\n"
"})->block($lockSeconds = 10, $waitSeconds = 10)"
msgstr ""

# P
#: ./docs/8.x/session.md:258
#: ./docs/9.x/session.md:264
#: ./docs/10.x/session.md:276
#: ./docs/11.x/session.md:262
#: ./docs/master/session.md:262
msgid "The `block` method accepts two optional arguments. The first argument accepted by the `block` method is the maximum number of seconds the session lock should be held for before it is released. Of course, if the request finishes executing before this time the lock will be released earlier."
msgstr "`block` 方法接受兩個可選的引數。`block` 方法的第一個引數 Session 要被 Lock 的最大秒數。當然，若 Request 比這個時間還要早完成執行的話，也會提早釋放 Lock："

# P
#: ./docs/8.x/session.md:260
#: ./docs/9.x/session.md:266
#: ./docs/10.x/session.md:278
#: ./docs/11.x/session.md:264
#: ./docs/master/session.md:264
msgid "The second argument accepted by the `block` method is the number of seconds a request should wait while attempting to obtain a session lock. An `Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown if the request is unable to obtain a session lock within the given number of seconds."
msgstr "`block` 方法的第二個引數是 Request 在取得 Session Lock 前應等待的秒數。若在給定的秒數後 Request 仍然無法取得 Session Lock 的話，會擲回 `Illuminate\\Contracts\\Cache\\LockTimeoutException`。"

# P
#: ./docs/10.x/session.md:262
#: ./docs/master/session.md:248
msgid "To utilize session blocking, your application must be using a cache driver that supports [atomic locks](/docs/{{version}}/cache#atomic-locks). Currently, those cache drivers include the `memcached`, `dynamodb`, `redis`, `database`, `file`, and `array` drivers. In addition, you may not use the `cookie` session driver."
msgstr ""

# P
#: ./docs/8.x/session.md:262
#: ./docs/9.x/session.md:268
#: ./docs/10.x/session.md:280
#: ./docs/11.x/session.md:266
#: ./docs/master/session.md:266
msgid "If neither of these arguments is passed, the lock will be obtained for a maximum of 10 seconds and requests will wait a maximum of 10 seconds while attempting to obtain a lock:"
msgstr "若沒有提供這些引數，則 Lock 最長可取得 10 秒，而 Request 在取得 Lock 時最多可等待 10 秒："

# CODE
#: ./docs/8.x/session.md:264
#: ./docs/9.x/session.md:270
msgid ""
"Route::post('/profile', function () {\n"
"    //\n"
"})->block()"
msgstr ""

# CODE
#: ./docs/10.x/session.md:268
#: ./docs/11.x/session.md:254
#: ./docs/master/session.md:254
msgid ""
"Route::post('/profile', function () {\n"
"    // ...\n"
"})->block($lockSeconds = 10, $waitSeconds = 10)\n"
"\n"
"Route::post('/order', function () {\n"
"    // ...\n"
"})->block($lockSeconds = 10, $waitSeconds = 10)"
msgstr ""

# P
#: ./docs/8.x/session.md:268
#: ./docs/9.x/session.md:274
#: ./docs/10.x/session.md:286
#: ./docs/11.x/session.md:272
#: ./docs/master/session.md:272
#~ msgid "<a name=\"adding-custom-session-drivers\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/session.md:269
#: ./docs/9.x/session.md:275
#: ./docs/10.x/session.md:287
#: ./docs/11.x/session.md:273
#: ./docs/master/session.md:273
msgid "Adding Custom Session Drivers"
msgstr "新增自訂 Session Driver"

# P
#: ./docs/8.x/session.md:271
#: ./docs/9.x/session.md:277
#: ./docs/10.x/session.md:289
#: ./docs/11.x/session.md:275
#: ./docs/master/session.md:275
#~ msgid "<a name=\"implementing-the-driver\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:272
#: ./docs/9.x/session.md:278
msgid "Implementing The Driver"
msgstr "實作 Driver"

# P
#: ./docs/8.x/session.md:274
#: ./docs/9.x/session.md:280
#: ./docs/10.x/session.md:292
#: ./docs/11.x/session.md:278
#: ./docs/master/session.md:278
msgid "If none of the existing session drivers fit your application's needs, Laravel makes it possible to write your own session handler. Your custom session driver should implement PHP's built-in `SessionHandlerInterface`. This interface contains just a few simple methods. A stubbed MongoDB implementation looks like the following:"
msgstr "若現有的 Session Driver 都無法滿足你的專案需求，在 Laravel 中也可以撰寫你自己的 Session 處理常式 (Handler)。自訂 Session Driver 應實作 PHP 內建的 `SessionHandlerInterface`。這個介面只包含了幾個簡單的方法。MongoDB 實作的 Stub (虛設常式) 看起來會像這樣："

# CODE
#: ./docs/8.x/session.md:276
#: ./docs/9.x/session.md:282
#: ./docs/10.x/session.md:294
#: ./docs/11.x/session.md:280
#: ./docs/master/session.md:280
msgid ""
"<?php\n"
"\n"
"namespace App\\Extensions;\n"
"\n"
"class MongoSessionHandler implements \\SessionHandlerInterface\n"
"{\n"
"    public function open($savePath, $sessionName) {}\n"
"    public function close() {}\n"
"    public function read($sessionId) {}\n"
"    public function write($sessionId, $data) {}\n"
"    public function destroy($sessionId) {}\n"
"    public function gc($lifetime) {}\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/session.md:282
#: ./docs/11.x/session.md:268
#: ./docs/master/session.md:268
msgid ""
"Route::post('/profile', function () {\n"
"    // ...\n"
"})->block()"
msgstr ""

# H3
#: ./docs/10.x/session.md:290
#: ./docs/11.x/session.md:276
#: ./docs/master/session.md:276
msgid "Implementing the Driver"
msgstr ""

# P
#: ./docs/8.x/session.md:290
#: ./docs/9.x/session.md:297
#: ./docs/10.x/session.md:309
#: ./docs/master/session.md:295
msgid "Laravel does not ship with a directory to contain your extensions. You are free to place them anywhere you like. In this example, we have created an `Extensions` directory to house the `MongoSessionHandler`."
msgstr "Laravel 中沒有內建用來放置擴充程式的目錄。你可以自由放置這些擴充程式。在這個例子中，我們建立了一個 `Extensions` 目錄來放置 `MongoSessionHandler`。"

# P
#: ./docs/8.x/session.md:292
#: ./docs/9.x/session.md:299
#: ./docs/10.x/session.md:311
#: ./docs/master/session.md:297
msgid "Since the purpose of these methods is not readily understandable, let's quickly cover what each of the methods do:"
msgstr "由於只看這些方法很難看出他們的功能，所以我們來快速看一下各個方法都用來做什麼："

# P
#: ./docs/11.x/session.md:294
msgid "Since Laravel does not include a default directory to house your extensions. You are free to place them anywhere you like. In this example, we have created an `Extensions` directory to house the `MongoSessionHandler`."
msgstr ""

# P
#: ./docs/11.x/session.md:296
msgid "Since the purpose of these methods is not readily understandable, here is an overview of the purpose of each method:"
msgstr ""

# P
#: ./docs/8.x/session.md:296
#: ./docs/9.x/session.md:303
#: ./docs/10.x/session.md:315
#: ./docs/11.x/session.md:300
#: ./docs/master/session.md:301
msgid "The `open` method would typically be used in file based session store systems. Since Laravel ships with a `file` session driver, you will rarely need to put anything in this method. You can simply leave this method empty."
msgstr "`open` 方法通常是給一些基於檔案的 Session 存放系統使用的。因為 Laravel 已經有附帶 `file` Session Driver 了，所以通常這個方法裡應該不需要寫什麼內容。留空即可。"

# P
#: ./docs/8.x/session.md:297
#: ./docs/9.x/session.md:304
#: ./docs/10.x/session.md:316
#: ./docs/11.x/session.md:301
#: ./docs/master/session.md:302
msgid "The `close` method, like the `open` method, can also usually be disregarded. For most drivers, it is not needed."
msgstr "`close` 方法跟 `open` 方法一樣，通常可以忽略。對大多數的 Driver 來說並不需要。"

# P
#: ./docs/8.x/session.md:298
#: ./docs/9.x/session.md:305
#: ./docs/10.x/session.md:317
#: ./docs/11.x/session.md:302
#: ./docs/master/session.md:303
msgid "The `read` method should return the string version of the session data associated with the given `$sessionId`. There is no need to do any serialization or other encoding when retrieving or storing session data in your driver, as Laravel will perform the serialization for you."
msgstr "`read` 方法應回傳與給定 `$sessionId` 關聯的字串版本 Session 資料。在從 Driver 中取出資料時不需要進行任何的^[序列化](Serialization) 或其他編碼，因為 Laravel 會幫你序列化。"

# P
#: ./docs/8.x/session.md:299
#: ./docs/9.x/session.md:306
#: ./docs/10.x/session.md:318
#: ./docs/11.x/session.md:303
#: ./docs/master/session.md:304
msgid "The `write` method should write the given `$data` string associated with the `$sessionId` to some persistent storage system, such as MongoDB or another storage system of your choice.  Again, you should not perform any serialization - Laravel will have already handled that for you."
msgstr ""

# P
#: ./docs/8.x/session.md:300
#: ./docs/9.x/session.md:307
#: ./docs/10.x/session.md:319
#: ./docs/11.x/session.md:304
#: ./docs/master/session.md:305
msgid "The `destroy` method should remove the data associated with the `$sessionId` from persistent storage."
msgstr "`destroy` 方法從持續性儲存系統中移除任何與 `$sessionId` 關聯的資料。"

# P
#: ./docs/8.x/session.md:301
#: ./docs/9.x/session.md:308
#: ./docs/10.x/session.md:320
#: ./docs/11.x/session.md:305
#: ./docs/master/session.md:306
msgid "The `gc` method should destroy all session data that is older than the given `$lifetime`, which is a UNIX timestamp. For self-expiring systems like Memcached and Redis, this method may be left empty."
msgstr "`gc` 方法移除所有時間舊於 `$lifetime` 的 `Session` 資料。`$lifetime` 是 UNIX 時戳。對於^[自帶有效期限](Self-Expiring)的系統，如 Memcached 或 Redis，可以將這個方法留空。"

# P
#: ./docs/8.x/session.md:305
#: ./docs/9.x/session.md:312
#: ./docs/10.x/session.md:324
#: ./docs/11.x/session.md:309
#: ./docs/master/session.md:310
#~ msgid "<a name=\"registering-the-driver\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/session.md:306
#: ./docs/9.x/session.md:313
msgid "Registering The Driver"
msgstr "註冊 Driver"

# P
#: ./docs/8.x/session.md:308
#: ./docs/9.x/session.md:315
#: ./docs/10.x/session.md:327
#: ./docs/11.x/session.md:312
#: ./docs/master/session.md:313
msgid "Once your driver has been implemented, you are ready to register it with Laravel. To add additional drivers to Laravel's session backend, you may use the `extend` method provided by the `Session` [facade](/docs/{{version}}/facades). You should call the `extend` method from the `boot` method of a [service provider](/docs/{{version}}/providers). You may do this from the existing `App\\Providers\\AppServiceProvider` or create an entirely new provider:"
msgstr "實作好 Driver 後，就可以將該 Driver 註冊到 Laravel。若要將額外的 Driver 新增到 Laravel 的 Session 後端中，我們可以使用 `Session` [Facade](/docs/{{version}}/facades) 的 `extend` 方法。可以在某個 [Service Provider](/docs/{{version}}/providers) 中呼叫這個 `extend` 方法。可以使用現有的 `App\\Providers\\AppServiceProvider`，或是建立一個全新的 Provider："

# CODE
#: ./docs/8.x/session.md:310
#: ./docs/9.x/session.md:317
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Extensions\\MongoSessionHandler;\n"
"use Illuminate\\Support\\Facades\\Session;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class SessionServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Session::extend('mongo', function ($app) {\n"
"            // Return an implementation of SessionHandlerInterface...\n"
"            return new MongoSessionHandler;\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# H3
#: ./docs/10.x/session.md:325
#: ./docs/11.x/session.md:310
#: ./docs/master/session.md:311
msgid "Registering the Driver"
msgstr ""

# CODE
#: ./docs/10.x/session.md:329
#: ./docs/11.x/session.md:314
#: ./docs/master/session.md:315
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Extensions\\MongoSessionHandler;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\Facades\\Session;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class SessionServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Session::extend('mongo', function (Application $app) {\n"
"            // Return an implementation of SessionHandlerInterface...\n"
"            return new MongoSessionHandler;\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/session.md:344
#: ./docs/9.x/session.md:351
#: ./docs/10.x/session.md:360
msgid "Once the session driver has been registered, you may use the `mongo` driver in your `config/session.php` configuration file."
msgstr "註冊好 Session Driver 後，就可以在 `config/session.php` 設定檔中使用 `mongo` Driver。"

# P
#: ./docs/11.x/session.md:345
#: ./docs/master/session.md:346
msgid "Once the session driver has been registered, you may specify the `mongo` driver as your application's session driver using the `SESSION_DRIVER` environment variable or within the application's `config/session.php` configuration file."
msgstr ""
