# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-03-30 14:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/cache.md:1
#, markdown-text, no-wrap
msgid "Cache"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Cache Usage](#cache-usage)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Obtaining A Cache Instance](#obtaining-a-cache-instance)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Retrieving Items From The Cache](#retrieving-items-from-the-cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Storing Items In The Cache](#storing-items-in-the-cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Removing Items From The Cache](#removing-items-from-the-cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[The Cache Helper](#the-cache-helper)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Cache Tags](#cache-tags)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Storing Tagged Cache Items](#storing-tagged-cache-items)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Accessing Tagged Cache Items](#accessing-tagged-cache-items)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Removing Tagged Cache Items](#removing-tagged-cache-items)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Atomic Locks](#atomic-locks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Driver Prerequisites](#lock-driver-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Managing Locks](#managing-locks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Managing Locks Across Processes](#managing-locks-across-processes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Adding Custom Cache Drivers](#adding-custom-cache-drivers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Writing The Driver](#writing-the-driver)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Registering The Driver](#registering-the-driver)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24
#, markdown-text
msgid "[Events](#events)"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:26
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:26
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:29
#, markdown-text
msgid ""
"Some of the data retrieval or processing tasks performed by your application "
"could be CPU intensive or take several seconds to complete. When this is the "
"case, it is common to cache the retrieved data for a time so it can be "
"retrieved quickly on subsequent requests for the same data. The cached data "
"is usually stored in a very fast data store such as "
"[Memcached](https://memcached.org) or [Redis](https://redis.io)."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:31
#, markdown-text
msgid ""
"Thankfully, Laravel provides an expressive, unified API for various cache "
"backends, allowing you to take advantage of their blazing fast data "
"retrieval and speed up your web application."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:33
#, markdown-text, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:33
#, markdown-text, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:36
#, markdown-text
msgid ""
"Your application's cache configuration file is located at "
"`config/cache.php`. In this file, you may specify which cache driver you "
"would like to be used by default throughout your application. Laravel "
"supports popular caching backends like [Memcached](https://memcached.org), "
"[Redis](https://redis.io), [DynamoDB](https://aws.amazon.com/dynamodb), and "
"relational databases out of the box. In addition, a file based cache driver "
"is available, while `array` and \"null\" cache drivers provide convenient "
"cache backends for your automated tests."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:38
#, markdown-text
msgid ""
"The cache configuration file also contains various other options, which are "
"documented within the file, so make sure to read over these options. By "
"default, Laravel is configured to use the `file` cache driver, which stores "
"the serialized, cached objects on the server's filesystem. For larger "
"applications, it is recommended that you use a more robust driver such as "
"Memcached or Redis. You may even configure multiple cache configurations for "
"the same driver."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:40
#, markdown-text, no-wrap
msgid "<a name=\"driver-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:40 docs/8.x/cache.md:301
#, markdown-text, no-wrap
msgid "Driver Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:43
#, markdown-text, no-wrap
msgid "<a name=\"prerequisites-database\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:43 docs/8.x/cache.md:304
#, markdown-text, no-wrap
msgid "Database"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:46
#, markdown-text
msgid ""
"When using the `database` cache driver, you will need to setup a table to "
"contain the cache items. You'll find an example `Schema` declaration for the "
"table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:52
#, markdown-text, no-wrap
msgid ""
"    Schema::create('cache', function ($table) {\n"
"        $table->string('key')->unique();\n"
"        $table->text('value');\n"
"        $table->integer('expiration');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:54
#, markdown-text, no-wrap
msgid ""
"> {tip} You may also use the `php artisan cache:table` Artisan command to "
"generate a migration with the proper schema.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:56
#, markdown-text, no-wrap
msgid "<a name=\"memcached\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:56
#, markdown-text, no-wrap
msgid "Memcached"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:59
#, markdown-text
msgid ""
"Using the Memcached driver requires the [Memcached PECL "
"package](https://pecl.php.net/package/memcached) to be installed. You may "
"list all of your Memcached servers in the `config/cache.php` configuration "
"file. This file already contains a `memcached.servers` entry to get you "
"started:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:69
#, markdown-text, no-wrap
msgid ""
"    'memcached' => [\n"
"        'servers' => [\n"
"            [\n"
"                'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n"
"                'port' => env('MEMCACHED_PORT', 11211),\n"
"                'weight' => 100,\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:71
#, markdown-text
msgid ""
"If needed, you may set the `host` option to a UNIX socket path. If you do "
"this, the `port` option should be set to `0`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:79
#, markdown-text, no-wrap
msgid ""
"    'memcached' => [\n"
"        [\n"
"            'host' => '/var/run/memcached/memcached.sock',\n"
"            'port' => 0,\n"
"            'weight' => 100\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:81
#, markdown-text, no-wrap
msgid "<a name=\"redis\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:81
#, markdown-text, no-wrap
msgid "Redis"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:84
#, markdown-text
msgid ""
"Before using a Redis cache with Laravel, you will need to either install the "
"PhpRedis PHP extension via PECL or install the `predis/predis` package "
"(~1.0) via Composer. [Laravel Sail](/docs/{{version}}/sail) already includes "
"this extension. In addition, official Laravel deployment platforms such as "
"[Laravel Forge](https://forge.laravel.com) and [Laravel "
"Vapor](https://vapor.laravel.com) have the PhpRedis extension installed by "
"default."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:86
#, markdown-text
msgid ""
"For more information on configuring Redis, consult its [Laravel "
"documentation page](/docs/{{version}}/redis#configuration)."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:88
#, markdown-text, no-wrap
msgid "<a name=\"dynamodb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:88
#, markdown-text, no-wrap
msgid "DynamoDB"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:91
#, markdown-text
msgid ""
"Before using the [DynamoDB](https://aws.amazon.com/dynamodb) cache driver, "
"you must create a DynamoDB table to store all of the cached data. Typically, "
"this table should be named `cache`. However, you should name the table based "
"on the value of the `stores.dynamodb.table` configuration value within your "
"application's `cache` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:93
#, markdown-text
msgid ""
"This table should also have a string partition key with a name that "
"corresponds to the value of the `stores.dynamodb.key` configuration item "
"within your application's `cache` configuration file. By default, the "
"partition key should be named `key`."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:95
#, markdown-text, no-wrap
msgid "<a name=\"cache-usage\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:95
#, markdown-text, no-wrap
msgid "Cache Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:98
#, markdown-text, no-wrap
msgid "<a name=\"obtaining-a-cache-instance\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:98
#, markdown-text, no-wrap
msgid "Obtaining A Cache Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:101
#, markdown-text
msgid ""
"To obtain a cache store instance, you may use the `Cache` facade, which is "
"what we will use throughout this documentation. The `Cache` facade provides "
"convenient, terse access to the underlying implementations of the Laravel "
"cache contracts:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:103 docs/8.x/cache.md:389 docs/8.x/cache.md:422
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:105
#, markdown-text, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:107 docs/8.x/cache.md:320
#, markdown-text, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Cache;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:118
#, markdown-text, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all users of the application.\n"
"         *\n"
"         * @return Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $value = Cache::get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:122
#, markdown-text, no-wrap
msgid ""
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:124
#, markdown-text, no-wrap
msgid "<a name=\"accessing-multiple-cache-stores\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:124
#, markdown-text, no-wrap
msgid "Accessing Multiple Cache Stores"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:127
#, markdown-text
msgid ""
"Using the `Cache` facade, you may access various cache stores via the "
"`store` method. The key passed to the `store` method should correspond to "
"one of the stores listed in the `stores` configuration array in your `cache` "
"configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:129
#, markdown-text, no-wrap
msgid "    $value = Cache::store('file')->get('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:131
#, markdown-text, no-wrap
msgid "    Cache::store('redis')->put('bar', 'baz', 600); // 10 Minutes\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:133
#, markdown-text, no-wrap
msgid "<a name=\"retrieving-items-from-the-cache\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:133
#, markdown-text, no-wrap
msgid "Retrieving Items From The Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:136
#, markdown-text
msgid ""
"The `Cache` facade's `get` method is used to retrieve items from the "
"cache. If the item does not exist in the cache, `null` will be returned. If "
"you wish, you may pass a second argument to the `get` method specifying the "
"default value you wish to be returned if the item doesn't exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:138
#, markdown-text, no-wrap
msgid "    $value = Cache::get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:140
#, markdown-text, no-wrap
msgid "    $value = Cache::get('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:142
#, markdown-text
msgid ""
"You may even pass a closure as the default value. The result of the closure "
"will be returned if the specified item does not exist in the cache. Passing "
"a closure allows you to defer the retrieval of default values from a "
"database or other external service:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:146
#, markdown-text, no-wrap
msgid ""
"    $value = Cache::get('key', function () {\n"
"        return DB::table(...)->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:148
#, markdown-text, no-wrap
msgid "<a name=\"checking-for-item-existence\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:148
#, markdown-text, no-wrap
msgid "Checking For Item Existence"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:151
#, markdown-text
msgid ""
"The `has` method may be used to determine if an item exists in the "
"cache. This method will also return `false` if the item exists but its value "
"is `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:155
#, markdown-text, no-wrap
msgid ""
"    if (Cache::has('key')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:157
#, markdown-text, no-wrap
msgid "<a name=\"incrementing-decrementing-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:157
#, markdown-text, no-wrap
msgid "Incrementing / Decrementing Values"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:160
#, markdown-text
msgid ""
"The `increment` and `decrement` methods may be used to adjust the value of "
"integer items in the cache. Both of these methods accept an optional second "
"argument indicating the amount by which to increment or decrement the item's "
"value:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:165
#, markdown-text, no-wrap
msgid ""
"    Cache::increment('key');\n"
"    Cache::increment('key', $amount);\n"
"    Cache::decrement('key');\n"
"    Cache::decrement('key', $amount);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:167
#, markdown-text, no-wrap
msgid "<a name=\"retrieve-store\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:167
#, markdown-text, no-wrap
msgid "Retrieve & Store"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:170
#, markdown-text
msgid ""
"Sometimes you may wish to retrieve an item from the cache, but also store a "
"default value if the requested item doesn't exist. For example, you may wish "
"to retrieve all users from the cache or, if they don't exist, retrieve them "
"from the database and add them to the cache. You may do this using the "
"`Cache::remember` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:174
#, markdown-text, no-wrap
msgid ""
"    $value = Cache::remember('users', $seconds, function () {\n"
"        return DB::table('users')->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:176
#, markdown-text
msgid ""
"If the item does not exist in the cache, the closure passed to the "
"`remember` method will be executed and its result will be placed in the "
"cache."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:178
#, markdown-text
msgid ""
"You may use the `rememberForever` method to retrieve an item from the cache "
"or store it forever if it does not exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:182
#, markdown-text, no-wrap
msgid ""
"    $value = Cache::rememberForever('users', function () {\n"
"        return DB::table('users')->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:184
#, markdown-text, no-wrap
msgid "<a name=\"retrieve-delete\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:184
#, markdown-text, no-wrap
msgid "Retrieve & Delete"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:187
#, markdown-text
msgid ""
"If you need to retrieve an item from the cache and then delete the item, you "
"may use the `pull` method. Like the `get` method, `null` will be returned if "
"the item does not exist in the cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:189
#, markdown-text, no-wrap
msgid "    $value = Cache::pull('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:191
#, markdown-text, no-wrap
msgid "<a name=\"storing-items-in-the-cache\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:191
#, markdown-text, no-wrap
msgid "Storing Items In The Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:194
#, markdown-text
msgid ""
"You may use the `put` method on the `Cache` facade to store items in the "
"cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:196
#, markdown-text, no-wrap
msgid "    Cache::put('key', 'value', $seconds = 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:198
#, markdown-text
msgid ""
"If the storage time is not passed to the `put` method, the item will be "
"stored indefinitely:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:200
#, markdown-text, no-wrap
msgid "    Cache::put('key', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:202
#, markdown-text
msgid ""
"Instead of passing the number of seconds as an integer, you may also pass a "
"`DateTime` instance representing the desired expiration time of the cached "
"item:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:204
#, markdown-text, no-wrap
msgid "    Cache::put('key', 'value', now()->addMinutes(10));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:206
#, markdown-text, no-wrap
msgid "<a name=\"store-if-not-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:206
#, markdown-text, no-wrap
msgid "Store If Not Present"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:209
#, markdown-text
msgid ""
"The `add` method will only add the item to the cache if it does not already "
"exist in the cache store. The method will return `true` if the item is "
"actually added to the cache. Otherwise, the method will return `false`. The "
"`add` method is an atomic operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:211
#, markdown-text, no-wrap
msgid "    Cache::add('key', 'value', $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:213
#, markdown-text, no-wrap
msgid "<a name=\"storing-items-forever\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:213
#, markdown-text, no-wrap
msgid "Storing Items Forever"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:216
#, markdown-text
msgid ""
"The `forever` method may be used to store an item in the cache "
"permanently. Since these items will not expire, they must be manually "
"removed from the cache using the `forget` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:218
#, markdown-text, no-wrap
msgid "    Cache::forever('key', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:220
#, markdown-text, no-wrap
msgid ""
"> {tip} If you are using the Memcached driver, items that are stored "
"\"forever\" may be removed when the cache reaches its size limit.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:222
#, markdown-text, no-wrap
msgid "<a name=\"removing-items-from-the-cache\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:222
#, markdown-text, no-wrap
msgid "Removing Items From The Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:225
#, markdown-text
msgid "You may remove items from the cache using the `forget` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:227
#, markdown-text, no-wrap
msgid "    Cache::forget('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:229
#, markdown-text
msgid ""
"You may also remove items by providing a zero or negative number of "
"expiration seconds:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:231
#, markdown-text, no-wrap
msgid "    Cache::put('key', 'value', 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:233
#, markdown-text, no-wrap
msgid "    Cache::put('key', 'value', -5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:235
#, markdown-text
msgid "You may clear the entire cache using the `flush` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:237
#, markdown-text, no-wrap
msgid "    Cache::flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:239
#, markdown-text, no-wrap
msgid ""
"> {note} Flushing the cache does not respect your configured cache "
"\"prefix\" and will remove all entries from the cache. Consider this "
"carefully when clearing a cache which is shared by other applications.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:241
#, markdown-text, no-wrap
msgid "<a name=\"the-cache-helper\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:241
#, markdown-text, no-wrap
msgid "The Cache Helper"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:244
#, markdown-text
msgid ""
"In addition to using the `Cache` facade, you may also use the global `cache` "
"function to retrieve and store data via the cache. When the `cache` function "
"is called with a single, string argument, it will return the value of the "
"given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:246
#, markdown-text, no-wrap
msgid "    $value = cache('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:248
#, markdown-text
msgid ""
"If you provide an array of key / value pairs and an expiration time to the "
"function, it will store values in the cache for the specified duration:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:250
#, markdown-text, no-wrap
msgid "    cache(['key' => 'value'], $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:252
#, markdown-text, no-wrap
msgid "    cache(['key' => 'value'], now()->addMinutes(10));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:254
#, markdown-text
msgid ""
"When the `cache` function is called without any arguments, it returns an "
"instance of the `Illuminate\\Contracts\\Cache\\Factory` implementation, "
"allowing you to call other caching methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:258
#, markdown-text, no-wrap
msgid ""
"    cache()->remember('users', $seconds, function () {\n"
"        return DB::table('users')->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:260
#, markdown-text, no-wrap
msgid ""
"> {tip} When testing call to the global `cache` function, you may use the "
"`Cache::shouldReceive` method just as if you were [testing the "
"facade](/docs/{{version}}/mocking#mocking-facades).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:262
#, markdown-text, no-wrap
msgid "<a name=\"cache-tags\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:262
#, markdown-text, no-wrap
msgid "Cache Tags"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:265
#, markdown-text, no-wrap
msgid ""
"> {note} Cache tags are not supported when using the `file`, `dynamodb`, or "
"`database` cache drivers. Furthermore, when using multiple tags with caches "
"that are stored \"forever\", performance will be best with a driver such as "
"`memcached`, which automatically purges stale records.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:267
#, markdown-text, no-wrap
msgid "<a name=\"storing-tagged-cache-items\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:267
#, markdown-text, no-wrap
msgid "Storing Tagged Cache Items"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:270
#, markdown-text
msgid ""
"Cache tags allow you to tag related items in the cache and then flush all "
"cached values that have been assigned a given tag. You may access a tagged "
"cache by passing in an ordered array of tag names. For example, let's access "
"a tagged cache and `put` a value into the cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:272
#, markdown-text, no-wrap
msgid "    Cache::tags(['people', 'artists'])->put('John', $john, $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:274
#, markdown-text, no-wrap
msgid "    Cache::tags(['people', 'authors'])->put('Anne', $anne, $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:276
#, markdown-text, no-wrap
msgid "<a name=\"accessing-tagged-cache-items\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:276
#, markdown-text, no-wrap
msgid "Accessing Tagged Cache Items"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:279
#, markdown-text
msgid ""
"To retrieve a tagged cache item, pass the same ordered list of tags to the "
"`tags` method and then call the `get` method with the key you wish to "
"retrieve:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:281
#, markdown-text, no-wrap
msgid "    $john = Cache::tags(['people', 'artists'])->get('John');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:283
#, markdown-text, no-wrap
msgid "    $anne = Cache::tags(['people', 'authors'])->get('Anne');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:285
#, markdown-text, no-wrap
msgid "<a name=\"removing-tagged-cache-items\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:285
#, markdown-text, no-wrap
msgid "Removing Tagged Cache Items"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:288
#, markdown-text
msgid ""
"You may flush all items that are assigned a tag or list of tags. For "
"example, this statement would remove all caches tagged with either `people`, "
"`authors`, or both. So, both `Anne` and `John` would be removed from the "
"cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:290
#, markdown-text, no-wrap
msgid "    Cache::tags(['people', 'authors'])->flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:292
#, markdown-text
msgid ""
"In contrast, this statement would remove only cached values tagged with "
"`authors`, so `Anne` would be removed, but not `John`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:294
#, markdown-text, no-wrap
msgid "    Cache::tags('authors')->flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:296
#, markdown-text, no-wrap
msgid "<a name=\"atomic-locks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:296
#, markdown-text, no-wrap
msgid "Atomic Locks"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:299
#, markdown-text, no-wrap
msgid ""
"> {note} To utilize this feature, your application must be using the "
"`memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache "
"driver as your application's default cache driver. In addition, all servers "
"must be communicating with the same central cache server.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:301
#, markdown-text, no-wrap
msgid "<a name=\"lock-driver-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:304
#, markdown-text, no-wrap
msgid "<a name=\"atomic-locks-prerequisites-database\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:307
#, markdown-text
msgid ""
"When using the `database` cache driver, you will need to setup a table to "
"contain your application's cache locks. You'll find an example `Schema` "
"declaration for the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:313
#, markdown-text, no-wrap
msgid ""
"    Schema::create('cache_locks', function ($table) {\n"
"        $table->string('key')->primary();\n"
"        $table->string('owner');\n"
"        $table->integer('expiration');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:315
#, markdown-text, no-wrap
msgid "<a name=\"managing-locks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:315
#, markdown-text, no-wrap
msgid "Managing Locks"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:318
#, markdown-text
msgid ""
"Atomic locks allow for the manipulation of distributed locks without "
"worrying about race conditions. For example, [Laravel "
"Forge](https://forge.laravel.com) uses atomic locks to ensure that only one "
"remote task is being executed on a server at a time. You may create and "
"manage locks using the `Cache::lock` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:322 docs/8.x/cache.md:340
#, markdown-text, no-wrap
msgid "    $lock = Cache::lock('foo', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:325
#, markdown-text, no-wrap
msgid ""
"    if ($lock->get()) {\n"
"        // Lock acquired for 10 seconds...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:328
#, markdown-text, no-wrap
msgid ""
"        $lock->release();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:330
#, markdown-text
msgid ""
"The `get` method also accepts a closure. After the closure is executed, "
"Laravel will automatically release the lock:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:334
#, markdown-text, no-wrap
msgid ""
"    Cache::lock('foo')->get(function () {\n"
"        // Lock acquired indefinitely and automatically released...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:336
#, markdown-text
msgid ""
"If the lock is not available at the moment you request it, you may instruct "
"Laravel to wait for a specified number of seconds. If the lock can not be "
"acquired within the specified time limit, an "
"`Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:338
#, markdown-text, no-wrap
msgid "    use Illuminate\\Contracts\\Cache\\LockTimeoutException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:343
#, markdown-text, no-wrap
msgid ""
"    try {\n"
"        $lock->block(5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:350
#, markdown-text, no-wrap
msgid ""
"        // Lock acquired after waiting a maximum of 5 seconds...\n"
"    } catch (LockTimeoutException $e) {\n"
"        // Unable to acquire lock...\n"
"    } finally {\n"
"        optional($lock)->release();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:352
#, markdown-text
msgid ""
"The example above may be simplified by passing a closure to the `block` "
"method. When a closure is passed to this method, Laravel will attempt to "
"acquire the lock for the specified number of seconds and will automatically "
"release the lock once the closure has been executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:356
#, markdown-text, no-wrap
msgid ""
"    Cache::lock('foo', 10)->block(5, function () {\n"
"        // Lock acquired after waiting a maximum of 5 seconds...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:358
#, markdown-text, no-wrap
msgid "<a name=\"managing-locks-across-processes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:358
#, markdown-text, no-wrap
msgid "Managing Locks Across Processes"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:361
#, markdown-text
msgid ""
"Sometimes, you may wish to acquire a lock in one process and release it in "
"another process. For example, you may acquire a lock during a web request "
"and wish to release the lock at the end of a queued job that is triggered by "
"that request. In this scenario, you should pass the lock's scoped \"owner "
"token\" to the queued job so that the job can re-instantiate the lock using "
"the given token."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:363
#, markdown-text
msgid ""
"In the example below, we will dispatch a queued job if a lock is "
"successfully acquired. In addition, we will pass the lock's owner token to "
"the queued job via the lock's `owner` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:365
#, markdown-text, no-wrap
msgid "    $podcast = Podcast::find($id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:367
#, markdown-text, no-wrap
msgid "    $lock = Cache::lock('processing', 120);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:371
#, markdown-text, no-wrap
msgid ""
"    if ($result = $lock->get()) {\n"
"        ProcessPodcast::dispatch($podcast, $lock->owner());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:373
#, markdown-text
msgid ""
"Within our application's `ProcessPodcast` job, we can restore and release "
"the lock using the owner token:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:375
#, markdown-text, no-wrap
msgid "    Cache::restoreLock('processing', $this->owner)->release();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:377
#, markdown-text
msgid ""
"If you would like to release a lock without respecting its current owner, "
"you may use the `forceRelease` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:379
#, markdown-text, no-wrap
msgid "    Cache::lock('processing')->forceRelease();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:381
#, markdown-text, no-wrap
msgid "<a name=\"adding-custom-cache-drivers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:381
#, markdown-text, no-wrap
msgid "Adding Custom Cache Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:384
#, markdown-text, no-wrap
msgid "<a name=\"writing-the-driver\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:384
#, markdown-text, no-wrap
msgid "Writing The Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:387
#, markdown-text
msgid ""
"To create our custom cache driver, we first need to implement the "
"`Illuminate\\Contracts\\Cache\\Store` "
"[contract](/docs/{{version}}/contracts). So, a MongoDB cache implementation "
"might look something like this:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:391
#, markdown-text, no-wrap
msgid "    namespace App\\Extensions;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:393
#, markdown-text, no-wrap
msgid "    use Illuminate\\Contracts\\Cache\\Store;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:407
#, markdown-text, no-wrap
msgid ""
"    class MongoStore implements Store\n"
"    {\n"
"        public function get($key) {}\n"
"        public function many(array $keys) {}\n"
"        public function put($key, $value, $seconds) {}\n"
"        public function putMany(array $values, $seconds) {}\n"
"        public function increment($key, $value = 1) {}\n"
"        public function decrement($key, $value = 1) {}\n"
"        public function forever($key, $value) {}\n"
"        public function forget($key) {}\n"
"        public function flush() {}\n"
"        public function getPrefix() {}\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:409
#, markdown-text
msgid ""
"We just need to implement each of these methods using a MongoDB "
"connection. For an example of how to implement each of these methods, take a "
"look at the `Illuminate\\Cache\\MemcachedStore` in the [Laravel framework "
"source code](https://github.com/laravel/framework). Once our implementation "
"is complete, we can finish our custom driver registration by calling the "
"`Cache` facade's `extend` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:413
#, markdown-text, no-wrap
msgid ""
"    Cache::extend('mongo', function ($app) {\n"
"        return Cache::repository(new MongoStore);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:415
#, markdown-text, no-wrap
msgid ""
"> {tip} If you're wondering where to put your custom cache driver code, you "
"could create an `Extensions` namespace within your `app` directory. However, "
"keep in mind that Laravel does not have a rigid application structure and "
"you are free to organize your application according to your preferences.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:417
#, markdown-text, no-wrap
msgid "<a name=\"registering-the-driver\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:417
#, markdown-text, no-wrap
msgid "Registering The Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:420
#, markdown-text
msgid ""
"To register the custom cache driver with Laravel, we will use the `extend` "
"method on the `Cache` facade. Since other service providers may attempt to "
"read cached values within their `boot` method, we will register our custom "
"driver within a `booting` callback. By using the `booting` callback, we can "
"ensure that the custom driver is registered just before the `boot` method is "
"called on our application's service providers but after the `register` "
"method is called on all of the service providers. We will register our "
"`booting` callback within the `register` method of our application's "
"`App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:424
#, markdown-text, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:428
#, markdown-text, no-wrap
msgid ""
"    use App\\Extensions\\MongoStore;\n"
"    use Illuminate\\Support\\Facades\\Cache;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:444
#, markdown-text, no-wrap
msgid ""
"    class CacheServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            $this->app->booting(function () {\n"
"                 Cache::extend('mongo', function ($app) {\n"
"                     return Cache::repository(new MongoStore);\n"
"                 });\n"
"             });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:455
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:457
#, markdown-text
msgid ""
"The first argument passed to the `extend` method is the name of the "
"driver. This will correspond to your `driver` option in the "
"`config/cache.php` configuration file. The second argument is a closure that "
"should return an `Illuminate\\Cache\\Repository` instance. The closure will "
"be passed an `$app` instance, which is an instance of the [service "
"container](/docs/{{version}}/container)."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:459
#, markdown-text
msgid ""
"Once your extension is registered, update your `config/cache.php` "
"configuration file's `driver` option to the name of your extension."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:461
#, markdown-text, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:461
#, markdown-text, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:464
#, markdown-text
msgid ""
"To execute code on every cache operation, you may listen for the "
"[events](/docs/{{version}}/events) fired by the cache. Typically, you should "
"place these event listeners within your application's "
"`App\\Providers\\EventServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:474
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Cache\\Events\\CacheHit' => [\n"
"            'App\\Listeners\\LogCacheHit',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:478
#, markdown-text, no-wrap
msgid ""
"        'Illuminate\\Cache\\Events\\CacheMissed' => [\n"
"            'App\\Listeners\\LogCacheMissed',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:482
#, markdown-text, no-wrap
msgid ""
"        'Illuminate\\Cache\\Events\\KeyForgotten' => [\n"
"            'App\\Listeners\\LogKeyForgotten',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:486
#, markdown-text, no-wrap
msgid ""
"        'Illuminate\\Cache\\Events\\KeyWritten' => [\n"
"            'App\\Listeners\\LogKeyWritten',\n"
"        ],\n"
"    ];\n"
msgstr ""
