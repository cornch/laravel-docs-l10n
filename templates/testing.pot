msgid ""
msgstr ""

#: ./docs/8.x/testing.md:1
#: ./docs/9.x/testing.md:1
#: ./docs/10.x/testing.md:1
#: ./docs/11.x/testing.md:1
#: ./docs/master/testing.md:1
msgid "Testing: Getting Started"
msgstr ""

#: ./docs/8.x/testing.md:3
#: ./docs/9.x/testing.md:3
#: ./docs/10.x/testing.md:3
#: ./docs/11.x/testing.md:3
#: ./docs/master/testing.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/testing.md:4
#: ./docs/9.x/testing.md:4
#: ./docs/10.x/testing.md:4
#: ./docs/11.x/testing.md:4
#: ./docs/master/testing.md:4
msgid "[Environment](#environment)"
msgstr ""

#: ./docs/8.x/testing.md:5
#: ./docs/9.x/testing.md:5
#: ./docs/10.x/testing.md:5
#: ./docs/11.x/testing.md:5
#: ./docs/master/testing.md:5
msgid "[Creating Tests](#creating-tests)"
msgstr ""

#: ./docs/8.x/testing.md:6
#: ./docs/9.x/testing.md:6
#: ./docs/10.x/testing.md:6
#: ./docs/11.x/testing.md:6
#: ./docs/master/testing.md:6
msgid "[Running Tests](#running-tests)"
msgstr ""

#: ./docs/10.x/testing.md:7
#: ./docs/11.x/testing.md:7
#: ./docs/master/testing.md:7
msgid "[Running Tests in Parallel](#running-tests-in-parallel)"
msgstr ""

#: ./docs/8.x/testing.md:7
#: ./docs/9.x/testing.md:7
msgid "[Running Tests In Parallel](#running-tests-in-parallel)"
msgstr ""

#: ./docs/9.x/testing.md:8
#: ./docs/10.x/testing.md:8
#: ./docs/11.x/testing.md:8
#: ./docs/master/testing.md:8
msgid "[Reporting Test Coverage](#reporting-test-coverage)"
msgstr ""

#: ./docs/10.x/testing.md:9
#: ./docs/11.x/testing.md:9
#: ./docs/master/testing.md:9
msgid "[Profiling Tests](#profiling-tests)"
msgstr ""

#: ./docs/8.x/testing.md:9
#: ./docs/9.x/testing.md:10
#: ./docs/10.x/testing.md:11
#: ./docs/11.x/testing.md:11
#: ./docs/master/testing.md:11
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:10
#: ./docs/9.x/testing.md:11
#: ./docs/10.x/testing.md:12
#: ./docs/11.x/testing.md:12
#: ./docs/master/testing.md:12
msgid "Introduction"
msgstr ""

#: ./docs/8.x/testing.md:12
#: ./docs/9.x/testing.md:13
#: ./docs/10.x/testing.md:14
msgid "Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr ""

#: ./docs/11.x/testing.md:14
#: ./docs/master/testing.md:14
msgid "Laravel is built with testing in mind. In fact, support for testing with [Pest](https://pestphp.com) and [PHPUnit](https://phpunit.de) is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr ""

#: ./docs/8.x/testing.md:14
#: ./docs/9.x/testing.md:15
#: ./docs/10.x/testing.md:16
#: ./docs/11.x/testing.md:16
#: ./docs/master/testing.md:16
msgid "By default, your application's `tests` directory contains two directories: `Feature` and `Unit`. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests within your \"Unit\" test directory do not boot your Laravel application and therefore are unable to access your application's database or other framework services."
msgstr ""

#: ./docs/8.x/testing.md:16
#: ./docs/9.x/testing.md:17
#: ./docs/10.x/testing.md:18
#: ./docs/11.x/testing.md:18
#: ./docs/master/testing.md:18
msgid "Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint. **Generally, most of your tests should be feature tests. These types of tests provide the most confidence that your system as a whole is functioning as intended.**"
msgstr ""

#: ./docs/8.x/testing.md:18
#: ./docs/9.x/testing.md:19
#: ./docs/10.x/testing.md:20
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/phpunit` or `php artisan test` commands to run your tests."
msgstr ""

#: ./docs/11.x/testing.md:20
#: ./docs/master/testing.md:20
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/pest`, `vendor/bin/phpunit`, or `php artisan test` commands to run your tests."
msgstr ""

#: ./docs/8.x/testing.md:20
#: ./docs/9.x/testing.md:21
#: ./docs/10.x/testing.md:22
#: ./docs/11.x/testing.md:22
#: ./docs/master/testing.md:22
#~ msgctxt "P"
#~ msgid "<a name=\"environment\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:21
#: ./docs/9.x/testing.md:22
#: ./docs/10.x/testing.md:23
#: ./docs/11.x/testing.md:23
#: ./docs/master/testing.md:23
msgid "Environment"
msgstr ""

#: ./docs/8.x/testing.md:23
#: ./docs/9.x/testing.md:24
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver while testing, meaning no session or cache data will be persisted while testing."
msgstr ""

#: ./docs/10.x/testing.md:25
#: ./docs/11.x/testing.md:25
#: ./docs/master/testing.md:25
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver so that no session or cache data will be persisted while testing."
msgstr ""

#: ./docs/8.x/testing.md:25
#: ./docs/9.x/testing.md:26
#: ./docs/10.x/testing.md:27
#: ./docs/11.x/testing.md:27
#: ./docs/master/testing.md:27
msgid "You are free to define other testing environment configuration values as necessary. The `testing` environment variables may be configured in your application's `phpunit.xml` file, but make sure to clear your configuration cache using the `config:clear` Artisan command before running your tests!"
msgstr ""

#: ./docs/8.x/testing.md:27
#: ./docs/9.x/testing.md:28
#: ./docs/10.x/testing.md:29
#: ./docs/11.x/testing.md:29
#: ./docs/master/testing.md:29
#~ msgctxt "P"
#~ msgid "<a name=\"the-env-testing-environment-file\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:28
#: ./docs/9.x/testing.md:29
#: ./docs/10.x/testing.md:30
#: ./docs/11.x/testing.md:30
#: ./docs/master/testing.md:30
msgid "The `.env.testing` Environment File"
msgstr ""

#: ./docs/8.x/testing.md:30
#: ./docs/9.x/testing.md:31
#: ./docs/10.x/testing.md:32
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr ""

#: ./docs/11.x/testing.md:32
#: ./docs/master/testing.md:32
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running Pest and PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr ""

#: ./docs/8.x/testing.md:32
#: ./docs/9.x/testing.md:33
#: ./docs/10.x/testing.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"the-creates-application-trait\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:33
#: ./docs/9.x/testing.md:34
#: ./docs/10.x/testing.md:35
msgid "The `CreatesApplication` Trait"
msgstr ""

#: ./docs/8.x/testing.md:35
#: ./docs/9.x/testing.md:36
#: ./docs/10.x/testing.md:37
msgid "Laravel includes a `CreatesApplication` trait that is applied to your application's base `TestCase` class. This trait contains a `createApplication` method that bootstraps the Laravel application before running your tests. It's important that you leave this trait at its original location as some features, such as Laravel's parallel testing feature, depend on it."
msgstr ""

#: ./docs/8.x/testing.md:37
#: ./docs/9.x/testing.md:38
#: ./docs/10.x/testing.md:39
#: ./docs/11.x/testing.md:34
#: ./docs/master/testing.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"creating-tests\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:38
#: ./docs/9.x/testing.md:39
#: ./docs/10.x/testing.md:40
#: ./docs/11.x/testing.md:35
#: ./docs/master/testing.md:35
msgid "Creating Tests"
msgstr ""

#: ./docs/8.x/testing.md:40
#: ./docs/9.x/testing.md:41
#: ./docs/10.x/testing.md:42
#: ./docs/11.x/testing.md:37
#: ./docs/master/testing.md:37
msgid "To create a new test case, use the `make:test` Artisan command. By default, tests will be placed in the `tests/Feature` directory:"
msgstr ""

#: ./docs/8.x/testing.md:42
#: ./docs/9.x/testing.md:43
#: ./docs/10.x/testing.md:44
#: ./docs/11.x/testing.md:39
#: ./docs/master/testing.md:39
msgid "php artisan make:test UserTest"
msgstr ""

#: ./docs/8.x/testing.md:44
#: ./docs/9.x/testing.md:47
#: ./docs/10.x/testing.md:48
#: ./docs/11.x/testing.md:43
#: ./docs/master/testing.md:43
msgid "If you would like to create a test within the `tests/Unit` directory, you may use the `--unit` option when executing the `make:test` command:"
msgstr ""

#: ./docs/8.x/testing.md:46
#: ./docs/9.x/testing.md:49
#: ./docs/10.x/testing.md:50
#: ./docs/11.x/testing.md:45
#: ./docs/master/testing.md:45
msgid "php artisan make:test UserTest --unit"
msgstr ""

#: ./docs/8.x/testing.md:48
#: ./docs/9.x/testing.md:53
#: ./docs/10.x/testing.md:54
msgid "If you would like to create a [Pest PHP](https://pestphp.com) test, you may provide the `--pest` option to the `make:test` command:"
msgstr ""

#: ./docs/8.x/testing.md:50
#: ./docs/9.x/testing.md:55
#: ./docs/10.x/testing.md:56
msgid ""
"php artisan make:test UserTest --pest\n"
"php artisan make:test UserTest --unit --pest"
msgstr ""

#: ./docs/11.x/testing.md:52
#: ./docs/master/testing.md:52
msgid "Once the test has been generated, you may define test as you normally would using Pest or PHPUnit. To run your tests, execute the `vendor/bin/pest`, `vendor/bin/phpunit`, or `php artisan test` command from your terminal:"
msgstr ""

#: ./docs/8.x/testing.md:53
#: ./docs/9.x/testing.md:61
#: ./docs/10.x/testing.md:62
#: ./docs/11.x/testing.md:50
#: ./docs/master/testing.md:50
msgid "Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr ""

#: ./docs/11.x/testing.md:54
#: ./docs/master/testing.md:54
msgid ""
"<?php\n"
"\n"
"test('basic', function () {\n"
"    expect(true)->toBeTrue();\n"
"});"
msgstr ""

#: ./docs/8.x/testing.md:55
#: ./docs/9.x/testing.md:63
#: ./docs/10.x/testing.md:64
msgid "Once the test has been generated, you may define test methods as you normally would using [PHPUnit](https://phpunit.de). To run your tests, execute the `vendor/bin/phpunit` or `php artisan test` command from your terminal:"
msgstr ""

#: ./docs/8.x/testing.md:57
#: ./docs/9.x/testing.md:65
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Unit;\n"
"\n"
"use PHPUnit\\Framework\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/testing.md:66
#: ./docs/11.x/testing.md:62
#: ./docs/master/testing.md:62
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Unit;\n"
"\n"
"use PHPUnit\\Framework\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_basic_test(): void\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/testing.md:76
#: ./docs/9.x/testing.md:85
msgid "If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class."
msgstr ""

#: ./docs/8.x/testing.md:78
#: ./docs/9.x/testing.md:87
#: ./docs/10.x/testing.md:86
#: ./docs/11.x/testing.md:84
#: ./docs/master/testing.md:84
#~ msgctxt "P"
#~ msgid "<a name=\"running-tests\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:79
#: ./docs/9.x/testing.md:88
#: ./docs/10.x/testing.md:87
#: ./docs/11.x/testing.md:85
#: ./docs/master/testing.md:85
msgid "Running Tests"
msgstr ""

#: ./docs/8.x/testing.md:81
#: ./docs/9.x/testing.md:90
#: ./docs/10.x/testing.md:89
msgid "As mentioned previously, once you've written tests, you may run them using `phpunit`:"
msgstr ""

#: ./docs/8.x/testing.md:83
#: ./docs/9.x/testing.md:92
#: ./docs/10.x/testing.md:91
#: ./docs/11.x/testing.md:93
#: ./docs/master/testing.md:93
msgid "./vendor/bin/phpunit"
msgstr ""

#: ./docs/10.x/testing.md:84
#: ./docs/11.x/testing.md:82
#: ./docs/master/testing.md:82
msgid "If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class. Typically, you should invoke `parent::setUp()` at the start of your own `setUp` method, and `parent::tearDown()` at the end of your `tearDown` method."
msgstr ""

#: ./docs/8.x/testing.md:85
#: ./docs/9.x/testing.md:96
#: ./docs/10.x/testing.md:95
msgid "In addition to the `phpunit` command, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr ""

#: ./docs/11.x/testing.md:87
#: ./docs/master/testing.md:87
msgid "As mentioned previously, once you've written tests, you may run them using `pest` or `phpunit`:"
msgstr ""

#: ./docs/8.x/testing.md:87
#: ./docs/9.x/testing.md:98
#: ./docs/10.x/testing.md:97
#: ./docs/11.x/testing.md:99
#: ./docs/master/testing.md:99
msgid "php artisan test"
msgstr ""

#: ./docs/11.x/testing.md:89
#: ./docs/master/testing.md:89
msgid "./vendor/bin/pest"
msgstr ""

#: ./docs/8.x/testing.md:89
#: ./docs/9.x/testing.md:102
#: ./docs/10.x/testing.md:101
msgid "Any arguments that can be passed to the `phpunit` command may also be passed to the Artisan `test` command:"
msgstr ""

#: ./docs/8.x/testing.md:91
#: ./docs/9.x/testing.md:104
#: ./docs/10.x/testing.md:103
#: ./docs/11.x/testing.md:105
#: ./docs/master/testing.md:105
msgid "php artisan test --testsuite=Feature --stop-on-failure"
msgstr ""

#: ./docs/8.x/testing.md:94
#: ./docs/9.x/testing.md:108
#: ./docs/10.x/testing.md:107
#: ./docs/11.x/testing.md:109
#: ./docs/master/testing.md:109
#~ msgctxt "P"
#~ msgid "<a name=\"running-tests-in-parallel\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:95
#: ./docs/9.x/testing.md:109
msgid "Running Tests In Parallel"
msgstr ""

#: ./docs/11.x/testing.md:97
#: ./docs/master/testing.md:97
msgid "In addition to the `pest` or `phpunit` commands, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr ""

#: ./docs/8.x/testing.md:97
#: ./docs/9.x/testing.md:111
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, ensure your application depends on version `^5.3` or greater of the `nunomaduro/collision` package. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#: ./docs/8.x/testing.md:99
#: ./docs/9.x/testing.md:113
msgid "php artisan test --parallel"
msgstr ""

#: ./docs/8.x/testing.md:101
#: ./docs/9.x/testing.md:117
#: ./docs/10.x/testing.md:118
#: ./docs/11.x/testing.md:120
#: ./docs/master/testing.md:120
msgid "By default, Laravel will create as many processes as there are available CPU cores on your machine. However, you may adjust the number of processes using the `--processes` option:"
msgstr ""

#: ./docs/11.x/testing.md:103
#: ./docs/master/testing.md:103
msgid "Any arguments that can be passed to the `pest` or `phpunit` commands may also be passed to the Artisan `test` command:"
msgstr ""

#: ./docs/8.x/testing.md:103
#: ./docs/9.x/testing.md:119
#: ./docs/10.x/testing.md:120
#: ./docs/11.x/testing.md:122
#: ./docs/master/testing.md:122
msgid "php artisan test --parallel --processes=4"
msgstr ""

#: ./docs/8.x/testing.md:105
#: ./docs/9.x/testing.md:124
#: ./docs/10.x/testing.md:125
msgid "When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr ""

#: ./docs/8.x/testing.md:107
#: ./docs/9.x/testing.md:126
#: ./docs/10.x/testing.md:127
#: ./docs/11.x/testing.md:129
#: ./docs/master/testing.md:129
#~ msgctxt "P"
#~ msgid "<a name=\"parallel-testing-and-databases\"></a>"
#~ msgstr ""

#: ./docs/10.x/testing.md:108
#: ./docs/11.x/testing.md:110
#: ./docs/master/testing.md:110
msgid "Running Tests in Parallel"
msgstr ""

#: ./docs/8.x/testing.md:108
#: ./docs/9.x/testing.md:127
msgid "Parallel Testing & Databases"
msgstr ""

#: ./docs/10.x/testing.md:110
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, you should install the `brianium/paratest` Composer package as a \"dev\" dependency. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#: ./docs/8.x/testing.md:110
msgid "Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr ""

#: ./docs/10.x/testing.md:112
#: ./docs/11.x/testing.md:114
#: ./docs/master/testing.md:114
msgid ""
"composer require brianium/paratest --dev\n"
"\n"
"php artisan test --parallel"
msgstr ""

#: ./docs/11.x/testing.md:112
#: ./docs/master/testing.md:112
msgid "By default, Laravel and Pest / PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, you should install the `brianium/paratest` Composer package as a \"dev\" dependency. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#: ./docs/8.x/testing.md:112
#: ./docs/9.x/testing.md:131
#: ./docs/10.x/testing.md:132
#: ./docs/11.x/testing.md:134
#: ./docs/master/testing.md:134
msgid "By default, test databases persist between calls to the `test` Artisan command so that they can be used again by subsequent `test` invocations. However, you may re-create them using the `--recreate-databases` option:"
msgstr ""

#: ./docs/8.x/testing.md:114
#: ./docs/9.x/testing.md:133
#: ./docs/10.x/testing.md:134
#: ./docs/11.x/testing.md:136
#: ./docs/master/testing.md:136
msgid "php artisan test --parallel --recreate-databases"
msgstr ""

#: ./docs/8.x/testing.md:116
#: ./docs/9.x/testing.md:137
#: ./docs/10.x/testing.md:138
#: ./docs/11.x/testing.md:140
#: ./docs/master/testing.md:140
#~ msgctxt "P"
#~ msgid "<a name=\"parallel-testing-hooks\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:117
#: ./docs/9.x/testing.md:138
#: ./docs/10.x/testing.md:139
#: ./docs/11.x/testing.md:141
#: ./docs/master/testing.md:141
msgid "Parallel Testing Hooks"
msgstr ""

#: ./docs/8.x/testing.md:119
#: ./docs/9.x/testing.md:140
#: ./docs/10.x/testing.md:141
#: ./docs/11.x/testing.md:143
#: ./docs/master/testing.md:143
msgid "Occasionally, you may need to prepare certain resources used by your application's tests so they may be safely used by multiple test processes."
msgstr ""

#: ./docs/8.x/testing.md:121
#: ./docs/9.x/testing.md:142
#: ./docs/10.x/testing.md:143
#: ./docs/11.x/testing.md:145
#: ./docs/master/testing.md:145
msgid "Using the `ParallelTesting` facade, you may specify code to be executed on the `setUp` and `tearDown` of a process or test case. The given closures receive the `$token` and `$testCase` variables that contain the process token and the current test case, respectively:"
msgstr ""

#: ./docs/8.x/testing.md:123
#: ./docs/9.x/testing.md:144
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        ParallelTesting::setUpProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/testing.md:127
#: ./docs/master/testing.md:127
msgid "When running tests in parallel, some Pest / PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr ""

#: ./docs/10.x/testing.md:128
#: ./docs/11.x/testing.md:130
#: ./docs/master/testing.md:130
msgid "Parallel Testing and Databases"
msgstr ""

#: ./docs/9.x/testing.md:129
#: ./docs/10.x/testing.md:130
#: ./docs/11.x/testing.md:132
#: ./docs/master/testing.md:132
msgid "As long as you have configured a primary database connection, Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr ""

#: ./docs/10.x/testing.md:145
#: ./docs/11.x/testing.md:147
#: ./docs/master/testing.md:147
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use PHPUnit\\Framework\\TestCase;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        ParallelTesting::setUpProcess(function (int $token) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::setUpTestCase(function (int $token, TestCase $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function (string $database, int $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownTestCase(function (int $token, TestCase $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownProcess(function (int $token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/testing.md:163
#: ./docs/9.x/testing.md:184
#: ./docs/10.x/testing.md:184
#: ./docs/11.x/testing.md:186
#: ./docs/master/testing.md:186
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-the-parallel-testing-token\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:164
#: ./docs/9.x/testing.md:185
msgid "Accessing The Parallel Testing Token"
msgstr ""

#: ./docs/8.x/testing.md:166
msgid "If you would like to access to current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr ""

#: ./docs/8.x/testing.md:168
#: ./docs/9.x/testing.md:189
#: ./docs/10.x/testing.md:189
#: ./docs/11.x/testing.md:191
#: ./docs/master/testing.md:191
msgid "$token = ParallelTesting::token();"
msgstr ""

#: ./docs/10.x/testing.md:185
#: ./docs/11.x/testing.md:187
#: ./docs/master/testing.md:187
msgid "Accessing the Parallel Testing Token"
msgstr ""

#: ./docs/9.x/testing.md:187
#: ./docs/10.x/testing.md:187
#: ./docs/11.x/testing.md:189
#: ./docs/master/testing.md:189
msgid "If you would like to access the current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr ""

#: ./docs/9.x/testing.md:191
#: ./docs/10.x/testing.md:191
#: ./docs/11.x/testing.md:193
#: ./docs/master/testing.md:193
#~ msgctxt "P"
#~ msgid "<a name=\"reporting-test-coverage\"></a>"
#~ msgstr ""

#: ./docs/9.x/testing.md:192
#: ./docs/10.x/testing.md:192
#: ./docs/11.x/testing.md:194
#: ./docs/master/testing.md:194
msgid "Reporting Test Coverage"
msgstr ""

#: ./docs/9.x/testing.md:195
#: ./docs/10.x/testing.md:195
#: ./docs/11.x/testing.md:197
#: ./docs/master/testing.md:197
msgid "This feature requires [Xdebug](https://xdebug.org) or [PCOV](https://pecl.php.net/package/pcov)."
msgstr ""

#: ./docs/9.x/testing.md:197
#: ./docs/10.x/testing.md:197
#: ./docs/11.x/testing.md:199
#: ./docs/master/testing.md:199
msgid "When running your application tests, you may want to determine whether your test cases are actually covering the application code and how much application code is used when running your tests. To accomplish this, you may provide the `--coverage` option when invoking the `test` command:"
msgstr ""

#: ./docs/9.x/testing.md:199
#: ./docs/10.x/testing.md:199
#: ./docs/11.x/testing.md:201
#: ./docs/master/testing.md:201
msgid "php artisan test --coverage"
msgstr ""

#: ./docs/9.x/testing.md:203
#: ./docs/10.x/testing.md:203
#: ./docs/11.x/testing.md:205
#: ./docs/master/testing.md:205
#~ msgctxt "P"
#~ msgid "<a name=\"enforcing-a-minimum-coverage-threshold\"></a>"
#~ msgstr ""

#: ./docs/10.x/testing.md:204
#: ./docs/11.x/testing.md:206
#: ./docs/master/testing.md:206
msgid "Enforcing a Minimum Coverage Threshold"
msgstr ""

#: ./docs/9.x/testing.md:204
msgid "Enforcing A Minimum Coverage Threshold"
msgstr ""

#: ./docs/9.x/testing.md:206
#: ./docs/10.x/testing.md:206
#: ./docs/11.x/testing.md:208
#: ./docs/master/testing.md:208
msgid "You may use the `--min` option to define a minimum test coverage threshold for your application. The test suite will fail if this threshold is not met:"
msgstr ""

#: ./docs/9.x/testing.md:208
#: ./docs/10.x/testing.md:208
#: ./docs/11.x/testing.md:210
#: ./docs/master/testing.md:210
msgid "php artisan test --coverage --min=80.3"
msgstr ""

#: ./docs/10.x/testing.md:212
#: ./docs/11.x/testing.md:214
#: ./docs/master/testing.md:214
#~ msgctxt "P"
#~ msgid "<a name=\"profiling-tests\"></a>"
#~ msgstr ""

#: ./docs/10.x/testing.md:213
#: ./docs/11.x/testing.md:215
#: ./docs/master/testing.md:215
msgid "Profiling Tests"
msgstr ""

#: ./docs/10.x/testing.md:215
#: ./docs/11.x/testing.md:217
#: ./docs/master/testing.md:217
msgid "The Artisan test runner also includes a convenient mechanism for listing your application's slowest tests. Invoke the `test` command with the `--profile` option to be presented with a list of your ten slowest tests, allowing you to easily investigate which tests can be improved to speed up your test suite:"
msgstr ""

#: ./docs/10.x/testing.md:217
#: ./docs/11.x/testing.md:219
#: ./docs/master/testing.md:219
msgid "php artisan test --profile"
msgstr ""
