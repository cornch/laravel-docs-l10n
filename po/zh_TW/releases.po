msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 12:20\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/releases.pot\n"
"X-Crowdin-File-ID: 135\n"

# File: docs/8.x/releases.md, line: 1
# File: docs/master/releases.md, line: 1
#. type: Title #
#, no-wrap
msgid "Release Notes"
msgstr "版本資訊"

# File: docs/8.x/releases.md, line: 7
#. type: Plain text
#, no-wrap
msgid "- [Versioning Scheme](#versioning-scheme)\n"
"    - [Exceptions](#exceptions)\n"
"- [Support Policy](#support-policy)\n"
"- [Laravel 8](#laravel-8)\n"
msgstr "- [版本策略](#versioning-scheme)\n"
"    - [例外](#exceptions)\n"
"- [支援政策](#support-policy)\n"
"- [Laravel 8](#laravel-8)\n"

# File: docs/8.x/releases.md, line: 9
# File: docs/master/releases.md, line: 9
#. type: Plain text
#, no-wrap
msgid "<a name=\"versioning-scheme\"></a>\n"
msgstr "<a name=\"versioning-scheme\"></a>\n"

# File: docs/8.x/releases.md, line: 9
# File: docs/master/releases.md, line: 9
#. type: Title ##
#, no-wrap
msgid "Versioning Scheme"
msgstr "版本策略"

# File: docs/8.x/releases.md, line: 12
# File: docs/master/releases.md, line: 12
#. type: Plain text
msgid "Laravel and its other first-party packages follow [Semantic Versioning](https://semver.org). Major framework releases are released every year (~January), while minor and patch releases may be released as often as every week. Minor and patch releases should **never** contain breaking changes."
msgstr "Laravel 及其第一方套件都遵守 [語義化版本](https://semver.org/lang/zh-Tw/)。框架的主要更新會每年釋出 (約在九月時)，而次版本與修訂版則可能頻繁到每週更新。此版本與修訂版 **絕對不會** 包含中斷性變更 (Breaking Change)。"

# File: docs/8.x/releases.md, line: 14
#. type: Plain text
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^8.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr "由於 Laravel 的主要更新會包含中斷性變更，因此在專案或套件中參照 Laravel 框架或其組件時，應使用如 `^8.0` 這樣的版本限制式。不過，我們也會不斷努力確保每次進行主要版本更新時，都可於一天之內升級完成。"

# File: docs/8.x/releases.md, line: 16
#. type: Plain text
#, no-wrap
msgid "<a name=\"exceptions\"></a>\n"
msgstr "<a name=\"exceptions\"></a>\n"

# File: docs/8.x/releases.md, line: 16
#. type: Title ###
#, no-wrap
msgid "Exceptions"
msgstr "例外"

# File: docs/8.x/releases.md, line: 19
# File: docs/master/releases.md, line: 16
#. type: Plain text
#, no-wrap
msgid "<a name=\"named-arguments\"></a>\n"
msgstr "<a name=\"named-arguments\"></a>\n"

# File: docs/8.x/releases.md, line: 19
# File: docs/master/releases.md, line: 16
#. type: Title ####
#, no-wrap
msgid "Named Arguments"
msgstr "帶名稱的引數"

# File: docs/8.x/releases.md, line: 22
#. type: Plain text
msgid "At this time, PHP's [named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) functionality are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function parameters when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr "截至目前為止，PHP 的[帶名稱引數](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) 尚未包含在 Laravel 的向下相容性方針內。我們可能會在有必要的時候更改函式的引數名稱以改進 Laravel 的程式碼。因此，在使用帶名稱引數呼叫 Laravel 方法時應格外注意，並應瞭解到引數名稱未來可能會有所更改。"

# File: docs/8.x/releases.md, line: 24
# File: docs/master/releases.md, line: 21
#. type: Plain text
#, no-wrap
msgid "<a name=\"support-policy\"></a>\n"
msgstr "<a name=\"support-policy\"></a>\n"

# File: docs/8.x/releases.md, line: 24
# File: docs/master/releases.md, line: 21
#. type: Title ##
#, no-wrap
msgid "Support Policy"
msgstr "支援政策"

# File: docs/8.x/releases.md, line: 27
# File: docs/master/releases.md, line: 24
#. type: Plain text
msgid "For LTS releases, such as Laravel 9, bug fixes are provided for 2 years and security fixes are provided for 3 years. These releases provide the longest window of support and maintenance. For general releases, bug fixes are provided for 18 months and security fixes are provided for 2 years. For all additional libraries, including Lumen, only the latest release receives bug fixes. In addition, please review the database versions [supported by Laravel](/docs/{{version}}/database#introduction)."
msgstr "LTS 版本 (如 Laravel 9) 提供 2 年的 Bug 修正以及 3 年的安全性修正。這些版本提供了最長的支援與維護期間。而一般性版本，則提供 18 個月的 Bug 修正以及 2 年的安全性更新。其他額外的函式庫 (如 Lumen) 則只為最新版本提供 Bug 修正。此外，請參考 [Laravel 支援的](/docs/{{version}}/database#introduction) 資料庫版本。"

# File: docs/8.x/releases.md, line: 35
# File: docs/master/releases.md, line: 32
#. type: Plain text
msgid "| Version | PHP (*) | Release | Bug Fixes Until | Security Fixes Until | | --- | --- | --- | --- | --- | | 6 (LTS) | 7.2 - 8.0 | September 3rd, 2019 | January 25th, 2022 | September 6th, 2022 | | 7 | 7.2 - 8.0 | March 3rd, 2020 | October 6th, 2020 | March 3rd, 2021 | | 8 | 7.3 - 8.1 | September 8th, 2020 | July 26th, 2022 | January 24th, 2023 | | 9 (LTS) | 8.0 - 8.1 | February 8th, 2022 | February 8th, 2024 | February 8th, 2025 | | 10 | 8.0 - 8.1 | February 7th, 2023 | August 7th, 2024 | February 7th, 2025 |"
msgstr "| 版本 | PHP (*) | 釋出日期 | Bug 修正期限 | 安全修正期限 |\n"
"| --- | --- | --- | --- | --- |\n"
"| 6 (LTS) | 7.2 - 8.0 | 2019 年 9 月 3 日 | 2022 年 1 月 25 日 | 2022 年 9 月 6 日 |\n"
"| 7 | 7.2 - 8.0 | 2020 年 3 月 3 日 | 2020 年 10 月 6 日 | 2021 年 3 月 3 日 |\n"
"| 8 | 7.3 - 8.1 | 2020 年 9 月 8 日 | 2022 年 6 月 26 日 | 2023 年 1 月 24 日 |\n"
"| 9 (LTS) | 8.0 - 8.1 | 2022 年 2 月 8 日 | 2024 年 2 月 8 日 | 2025 年 2 月 8 日 |\n"
"| 10 | 8.0 - 8.1 | 2023 年 2 月 7 日 | 2024 年 8 月 7 日 | 2025 年 2 月 7 日 |"

# File: docs/8.x/releases.md, line: 46
# File: docs/master/releases.md, line: 43
#. type: Plain text
#, no-wrap
msgid "<div class=\"sm:flex dark:text-gray-400 mb-1\">\n"
"    <div class=\"flex items-center mr-4\">\n"
"        <div class=\"w-3 h-3 mr-2 bg-red-500\"></div>\n"
"        <div>End of life</div>\n"
"    </div>\n"
"    <div class=\"flex items-center\">\n"
"        <div class=\"w-3 h-3 mr-2 bg-orange-600\"></div>\n"
"        <div>Security fixes only</div>\n"
"    </div>\n"
"</div>\n"
msgstr "<div class=\"sm:flex dark:text-gray-400 mb-1\">\n"
"    <div class=\"flex items-center mr-4\">\n"
"        <div class=\"w-3 h-3 mr-2 bg-red-500\"></div>\n"
"        <div>生命週期結束</div>\n"
"    </div>\n"
"    <div class=\"flex items-center\">\n"
"        <div class=\"w-3 h-3 mr-2 bg-orange-600\"></div>\n"
"        <div>僅限安全性更新</div>\n"
"    </div>\n"
"</div>\n"

# File: docs/8.x/releases.md, line: 48
# File: docs/master/releases.md, line: 45
#. type: Plain text
msgid "(*) Supported PHP versions"
msgstr "(*) 支援的 PHP 版本"

# File: docs/8.x/releases.md, line: 50
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-8\"></a>\n"
msgstr "<a name=\"laravel-8\"></a>\n"

# File: docs/8.x/releases.md, line: 50
#. type: Title ##
#, no-wrap
msgid "Laravel 8"
msgstr "Laravel 8"

# File: docs/8.x/releases.md, line: 53
#. type: Plain text
msgid "Laravel 8 continues the improvements made in Laravel 7.x by introducing Laravel Jetstream, model factory classes, migration squashing, job batching, improved rate limiting, queue improvements, dynamic Blade components, Tailwind pagination views, time testing helpers, improvements to `artisan serve`, event listener improvements, and a variety of other bug fixes and usability improvements."
msgstr "Laravel 8 持續地對 Laravel 7.x 進行改進，包含導入了 Laravel Jetstream、模型 Factory 類別、資料庫遷移壓縮、批次任務、改進頻率限制、佇列改進、動態 Blade 元件、Tailwind 分頁檢視器、測試時間用的輔助函式、對 `artisan serve` 的改進、時間監聽程式改進、以及各種其他 Bug 修正以及使用性改進。"

# File: docs/8.x/releases.md, line: 55
# File: docs/master/releases.md, line: 61
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-jetstream\"></a>\n"
msgstr "<a name=\"laravel-jetstream\"></a>\n"

# File: docs/8.x/releases.md, line: 55
#. type: Title ###
#, no-wrap
msgid "Laravel Jetstream"
msgstr "Laravel Jetstream"

# File: docs/8.x/releases.md, line: 58
#. type: Plain text
msgid "_Laravel Jetstream was written by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_Laravel Jetstream 由 [Taylor Otwell](https://github.com/taylorotwell) 撰寫_。"

# File: docs/8.x/releases.md, line: 60
#. type: Plain text
msgid "[Laravel Jetstream](https://jetstream.laravel.com) is a beautifully designed application scaffolding for Laravel. Jetstream provides the perfect starting point for your next project and includes login, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management. Laravel Jetstream replaces and improves upon the legacy authentication UI scaffolding available for previous versions of Laravel."
msgstr "[Laravel Jetstream](https://jetstream.laravel.com) 是一套用於 Laravel 的網站 Scaffolding，有漂亮的設計。Jetstream 為你的下一個專案提供了一個絕佳的開始點，包含登入、註冊、電子郵件驗證、二步驟驗證、Session 管理、通過 Laravel Sanctum 提供的 API 支援、以及選配的團隊管理。Laravel Jetstream 取代並改進了過往版本 Laravel 所提供的舊版驗證 UI Scaffolding。"

# File: docs/8.x/releases.md, line: 62
#. type: Plain text
msgid "Jetstream is designed using [Tailwind CSS](https://tailwindcss.com) and offers your choice of [Livewire](https://laravel-livewire.com) or [Inertia](https://inertiajs.com) scaffolding."
msgstr "Jetstream 是使用 [Tailwind CSS](https://tailwindcss.com) 進行設計的，並提供了[Livewire](https://laravel-livewire.com) 或 [Inertia](https://inertiajs.com) Scaffolding 可進行選擇。"

# File: docs/8.x/releases.md, line: 64
#. type: Plain text
#, no-wrap
msgid "<a name=\"models-directory\"></a>\n"
msgstr "<a name=\"models-directory\"></a>\n"

# File: docs/8.x/releases.md, line: 64
#. type: Title ###
#, no-wrap
msgid "Models Directory"
msgstr "Model 目錄"

# File: docs/8.x/releases.md, line: 67
#. type: Plain text
msgid "By overwhelming community demand, the default Laravel application skeleton now contains an `app/Models` directory. We hope you enjoy this new home for your Eloquent models! All relevant generator commands have been updated to assume models exist within the `app/Models` directory if it exists. If the directory does not exist, the framework will assume your models should be placed within the `app` directory."
msgstr "為了回應來自社群的強烈要求，Laravel 專案的預設基本架構目前已包含了 `app/Models` 目錄。我們希望你能享受這個 Eloquent Model 的新家！所有相關的產生程式指令都已更新。而且，如果 `app/Models` 目錄存在，那麼這些產生程式會假設這個資料夾是用來存放 Model 的。若該目錄不存在，則框架會假設 Model 應放置於 `app` 目錄內。"

# File: docs/8.x/releases.md, line: 69
#. type: Plain text
#, no-wrap
msgid "<a name=\"model-factory-classes\"></a>\n"
msgstr "<a name=\"model-factory-classes\"></a>\n"

# File: docs/8.x/releases.md, line: 69
#. type: Title ###
#, no-wrap
msgid "Model Factory Classes"
msgstr "Model Factory 類別"

# File: docs/8.x/releases.md, line: 72
#. type: Plain text
msgid "_Model factory classes were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_Model Factory 類別由 [Taylor Otwell](https://github.com/taylorotwell) 貢獻_。"

# File: docs/8.x/releases.md, line: 74
#. type: Plain text
msgid "Eloquent [model factories](/docs/{{version}}/database-testing#defining-model-factories) have been entirely re-written as class based factories and improved to have first-class relationship support. For example, the `UserFactory` included with Laravel is written like so:"
msgstr "Eloquent 的 [Model Factory](/docs/{{version}}/database-testing#defining-model-factories) 已經全面重寫為基於 Class 的 Factory 了，並且也經過改進來直接支援資料庫關聯。舉例來說，在 Laravel 中的 `UserFactory` 是這樣寫的："

# File: docs/8.x/releases.md, line: 76
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/releases.md, line: 78
#. type: Plain text
#, no-wrap
msgid "    namespace Database\\Factories;\n"
msgstr "    namespace Database\\Factories;\n"

# File: docs/8.x/releases.md, line: 82
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr "    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"    use Illuminate\\Support\\Str;\n"

# File: docs/8.x/releases.md, line: 91
#. type: Plain text
#, no-wrap
msgid "    class UserFactory extends Factory\n"
"    {\n"
"        /**\n"
"         * The name of the factory's corresponding model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $model = User::class;\n"
msgstr "    class UserFactory extends Factory\n"
"    {\n"
"        /**\n"
"         * The name of the factory's corresponding model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $model = User::class;\n"

# File: docs/8.x/releases.md, line: 108
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Define the model's default state.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function definition()\n"
"        {\n"
"            return [\n"
"                'name' => $this->faker->name(),\n"
"                'email' => $this->faker->unique()->safeEmail(),\n"
"                'email_verified_at' => now(),\n"
"                'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"                'remember_token' => Str::random(10),\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Define the model's default state.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function definition()\n"
"        {\n"
"            return [\n"
"                'name' => $this->faker->name(),\n"
"                'email' => $this->faker->unique()->safeEmail(),\n"
"                'email_verified_at' => now(),\n"
"                'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"                'remember_token' => Str::random(10),\n"
"            ];\n"
"        }\n"
"    }\n"

# File: docs/8.x/releases.md, line: 110
#. type: Plain text
msgid "Thanks to the new `HasFactory` trait available on generated models, the model factory may be used like so:"
msgstr "由於產生的 Model 中包含了新的 `HasFactory` Trait，因此我們可以這樣使用 Model Factory："

# File: docs/8.x/releases.md, line: 112
# File: docs/8.x/releases.md, line: 134
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr "    use App\\Models\\User;\n"

# File: docs/8.x/releases.md, line: 114
#. type: Plain text
#, no-wrap
msgid "    User::factory()->count(50)->create();\n"
msgstr "    User::factory()->count(50)->create();\n"

# File: docs/8.x/releases.md, line: 116
#. type: Plain text
msgid "Since model factories are now simple PHP classes, state transformations may be written as class methods. In addition, you may add any other helper classes to your Eloquent model factory as needed."
msgstr "由於 Model Factory 已經是一般的 PHP 類別了，因此 State 的變換應通過類別方法來撰寫。此外，也可以依照需求在 Eloquent Model Factory 內加上任何其他的輔助函式。"

# File: docs/8.x/releases.md, line: 118
#. type: Plain text
msgid "For example, your `User` model might have a `suspended` state that modifies one of its default attribute values. You may define your state transformations using the base factory's `state` method. You may name your state method anything you like. After all, it's just a typical PHP method:"
msgstr "舉例來說，`User` Model 可能會有個 `suspended` 狀態，用於修改 Model 中預設的屬性值。可以通過基礎 Factory 的 `state` 方法來定義狀態變換。可以任意為狀態方法命名。不管怎麼樣，這個方法就只是個單純的 PHP 方法而已："

# File: docs/8.x/releases.md, line: 130
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Indicate that the user is suspended.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    public function suspended()\n"
"    {\n"
"        return $this->state([\n"
"            'account_status' => 'suspended',\n"
"        ]);\n"
"    }\n"
msgstr "    /**\n"
"     * Indicate that the user is suspended.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    public function suspended()\n"
"    {\n"
"        return $this->state([\n"
"            'account_status' => 'suspended',\n"
"        ]);\n"
"    }\n"

# File: docs/8.x/releases.md, line: 132
#. type: Plain text
msgid "After defining the state transformation method, we may use it like so:"
msgstr "定義好狀態變換方法後，我們可以這樣使用："

# File: docs/8.x/releases.md, line: 136
#. type: Plain text
#, no-wrap
msgid "    User::factory()->count(5)->suspended()->create();\n"
msgstr "    User::factory()->count(5)->suspended()->create();\n"

# File: docs/8.x/releases.md, line: 138
#. type: Plain text
msgid "As mentioned, Laravel 8's model factories contain first class support for relationships. So, assuming our `User` model has a `posts` relationship method, we may simply run the following code to generate a user with three posts:"
msgstr "就像前面提到的一樣，Laravel 8 的 Model Factory 包含了對關聯的第一手支援。因此，假設我們的 `User` Model 有個 `posts` 關聯方法，我們只需要執行下列程式碼就能產生一個有 3 篇貼文的使用者："

# File: docs/8.x/releases.md, line: 144
#. type: Plain text
#, no-wrap
msgid "    $users = User::factory()\n"
"                ->hasPosts(3, [\n"
"                    'published' => false,\n"
"                ])\n"
"                ->create();\n"
msgstr "    $users = User::factory()\n"
"                ->hasPosts(3, [\n"
"                    'published' => false,\n"
"                ])\n"
"                ->create();\n"

# File: docs/8.x/releases.md, line: 146
#. type: Plain text
msgid "To ease the upgrade process, the [laravel/legacy-factories](https://github.com/laravel/legacy-factories) package has been released to provide support for the previous iteration of model factories within Laravel 8.x."
msgstr "為了減緩升級的過程，我們提供了 [laravel/legacy-factories](https://github.com/laravel/legacy-factories) 套件來在 Laravel 8.x 中提供舊版 Model Factory 的支援。"

# File: docs/8.x/releases.md, line: 148
#. type: Plain text
msgid "Laravel's re-written factories contain many more features that we think you will love. To learn more about model factories, please consult the [database testing documentation](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr "Laravel 的全新 Factory 包含了其他更多我們認為你會喜歡的功能。要瞭解更多有關 Model Factory 的資訊，請參考[資料庫測試說明文件](/docs/{{version}}/database-testing#defining-model-factories)。"

# File: docs/8.x/releases.md, line: 150
#. type: Plain text
#, no-wrap
msgid "<a name=\"migration-squashing\"></a>\n"
msgstr "<a name=\"migration-squashing\"></a>\n"

# File: docs/8.x/releases.md, line: 150
#. type: Title ###
#, no-wrap
msgid "Migration Squashing"
msgstr "資料庫遷移壓縮"

# File: docs/8.x/releases.md, line: 153
#. type: Plain text
msgid "_Migration squashing was contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_資料庫遷移壓縮由 [Taylor Otwell](https://github.com/taylorotwell) 貢獻_。"

# File: docs/8.x/releases.md, line: 155
#. type: Plain text
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your migration directory becoming bloated with potentially hundreds of migrations. If you're using MySQL or PostgreSQL, you may now \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr "在寫網站的時候，我們可能會逐漸累積出越來越多的資料庫遷移檔。這樣可能會導致遷移檔目錄中被數百個遷移檔給佔滿。若你使用 MySQL 或 PostgreSQL，現在可以將遷移檔「壓縮」進單一 SQL 檔內。要開始壓縮，請執行 `schema:dump` 指令："

# File: docs/8.x/releases.md, line: 157
#. type: Plain text
#, no-wrap
msgid "    php artisan schema:dump\n"
msgstr "    php artisan schema:dump\n"

# File: docs/8.x/releases.md, line: 160
#. type: Plain text
#, no-wrap
msgid "    // Dump the current database schema and prune all existing migrations...\n"
"    php artisan schema:dump --prune\n"
msgstr "    // 傾印目前的資料庫結構，並刪除所有現存的 Migration...\n"
"    php artisan schema:dump --prune\n"

# File: docs/8.x/releases.md, line: 162
#. type: Plain text
msgid "When you execute this command, Laravel will write a \"schema\" file to your `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL first. After executing the schema file's commands, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr "執行該指令時，Laravel 會將一個「結構描述 (Schema)」檔案寫入 `database/schema` 目錄內。接著，當要遷移資料庫且尚未執行過任何遷移時，Laravel 會先執行該結構描述檔的 SQL。執行玩結構描述檔的指令後，Laravel 才會接著執行不在該結構描述傾印中剩下的遷移。"

# File: docs/8.x/releases.md, line: 164
#. type: Plain text
#, no-wrap
msgid "<a name=\"job-batching\"></a>\n"
msgstr "<a name=\"job-batching\"></a>\n"

# File: docs/8.x/releases.md, line: 164
#. type: Title ###
#, no-wrap
msgid "Job Batching"
msgstr "批次任務"

# File: docs/8.x/releases.md, line: 167
#. type: Plain text
msgid "_Job batching was contributed by [Taylor Otwell](https://github.com/taylorotwell) & [Mohamed Said](https://github.com/themsaid)_."
msgstr "_批次任務由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Mohamed Said](https://github.com/themsaid) 參與貢獻_。"

# File: docs/8.x/releases.md, line: 169
#. type: Plain text
msgid "Laravel's job batching feature allows you to easily execute a batch of jobs and then perform some action when the batch of jobs has completed executing."
msgstr "Laravel 的批次任務功能能讓你輕鬆地執行一系列的任務，並接著在這些任務完成後執行其他操作。"

# File: docs/8.x/releases.md, line: 171
#. type: Plain text
msgid "The new `batch` method of the `Bus` facade may be used to dispatch a batch of jobs. Of course, batching is primarily useful when combined with completion callbacks. So, you may use the `then`, `catch`, and `finally` methods to define completion callbacks for the batch. Each of these callbacks will receive an `Illuminate\\Bus\\Batch` instance when they are invoked:"
msgstr "`Bus` Facade 的全新 `batch` 方法可以用來分派一批任務。當然，批次功能與完成回呼一起使用時是最有用。因此，可以使用 `then`, `catch` 與 `finally` 方法來為該批次定義完成回呼。這些回呼都會在被叫用時收到 `Illuminate\\Bus\\Batch` 實體："

# File: docs/8.x/releases.md, line: 177
#. type: Plain text
#, no-wrap
msgid "    use App\\Jobs\\ProcessPodcast;\n"
"    use App\\Podcast;\n"
"    use Illuminate\\Bus\\Batch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Throwable;\n"
msgstr "    use App\\Jobs\\ProcessPodcast;\n"
"    use App\\Podcast;\n"
"    use Illuminate\\Bus\\Batch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Throwable;\n"

# File: docs/8.x/releases.md, line: 191
#. type: Plain text
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        new ProcessPodcast(Podcast::find(1)),\n"
"        new ProcessPodcast(Podcast::find(2)),\n"
"        new ProcessPodcast(Podcast::find(3)),\n"
"        new ProcessPodcast(Podcast::find(4)),\n"
"        new ProcessPodcast(Podcast::find(5)),\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->catch(function (Batch $batch, Throwable $e) {\n"
"        // First batch job failure detected...\n"
"    })->finally(function (Batch $batch) {\n"
"        // The batch has finished executing...\n"
"    })->dispatch();\n"
msgstr "    $batch = Bus::batch([\n"
"        new ProcessPodcast(Podcast::find(1)),\n"
"        new ProcessPodcast(Podcast::find(2)),\n"
"        new ProcessPodcast(Podcast::find(3)),\n"
"        new ProcessPodcast(Podcast::find(4)),\n"
"        new ProcessPodcast(Podcast::find(5)),\n"
"    ])->then(function (Batch $batch) {\n"
"        // 所有任務都已成功完成...\n"
"    })->catch(function (Batch $batch, Throwable $e) {\n"
"        // 偵測到第一個批次任務失敗...\n"
"    })->finally(function (Batch $batch) {\n"
"        // 已完成執行批次...\n"
"    })->dispatch();\n"

# File: docs/8.x/releases.md, line: 193
#. type: Plain text
#, no-wrap
msgid "    return $batch->id;\n"
msgstr "    return $batch->id;\n"

# File: docs/8.x/releases.md, line: 195
#. type: Plain text
msgid "To learn more about job batching, please consult the [queue documentation](/docs/{{version}}/queues#job-batching)."
msgstr "要瞭解更多有關批次任務的資訊，請參考[佇列說明文件](/docs/{{version}}/queues#job-batching)。"

# File: docs/8.x/releases.md, line: 197
#. type: Plain text
#, no-wrap
msgid "<a name=\"improved-rate-limiting\"></a>\n"
msgstr "<a name=\"improved-rate-limiting\"></a>\n"

# File: docs/8.x/releases.md, line: 197
#. type: Title ###
#, no-wrap
msgid "Improved Rate Limiting"
msgstr "改進的頻率限制"

# File: docs/8.x/releases.md, line: 200
#. type: Plain text
msgid "_Rate limiting improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_頻率限制的改進由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻_。"

# File: docs/8.x/releases.md, line: 202
#. type: Plain text
msgid "Laravel's request rate limiter feature has been augmented with more flexibility and power, while still maintaining backwards compatibility with previous release's `throttle` middleware API."
msgstr "Laravel 的請求頻率限制功能現在有了更多的彈性與能力，且仍於過去版本的 `throttle` 中間層 API 保持向下相容性。"

# File: docs/8.x/releases.md, line: 204
#. type: Plain text
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned this rate limiter:"
msgstr "可以使用 `RateLimiter` Facade 的 `for` 方法來定義頻率限制程式。`for` 方法接收頻率限制程式的名稱、以及一個閉包。該閉包應回傳頻率限制的設定，該設定將套用到有設定這個頻率限制程式的路由上："

# File: docs/8.x/releases.md, line: 207
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"    use Illuminate\\Support\\Facades\\RateLimiter;\n"
msgstr "    use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"    use Illuminate\\Support\\Facades\\RateLimiter;\n"

# File: docs/8.x/releases.md, line: 211
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
msgstr "    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"

# File: docs/8.x/releases.md, line: 213
#. type: Plain text
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr "由於頻率限制程式的回呼會接收連入 HTTP 請求實體，因此我們可以依據連入請求或登入使用者來動態調整適當的頻率限制："

# File: docs/8.x/releases.md, line: 219
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100);\n"
"    });\n"
msgstr "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100);\n"
"    });\n"

# File: docs/8.x/releases.md, line: 221
#. type: Plain text
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr "有時候，我們可能會像以某些任意數值來設定頻率限制。舉例來說，我們可能會想限制給定的路由：每個 IP 位址每分鐘只能存取 100 次。為此，可以在設定頻率限制時使用 `by` 方法："

# File: docs/8.x/releases.md, line: 227
#. type: Plain text
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100)->by($request->ip());\n"
"    });\n"
msgstr "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100)->by($request->ip());\n"
"    });\n"

# File: docs/8.x/releases.md, line: 229
#. type: Plain text
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr "可以使用 `throttle` [Middleware](/docs/{{version}}/middleware) 來將頻率限制程式附加到路由或路由群組上。這個 Throttle Middleware 接受欲指派給路由的頻率限制程式名稱："

# File: docs/8.x/releases.md, line: 234
#. type: Plain text
#, no-wrap
msgid "    Route::middleware(['throttle:uploads'])->group(function () {\n"
"        Route::post('/audio', function () {\n"
"            //\n"
"        });\n"
msgstr "    Route::middleware(['throttle:uploads'])->group(function () {\n"
"        Route::post('/audio', function () {\n"
"            //\n"
"        });\n"

# File: docs/8.x/releases.md, line: 239
#. type: Plain text
#, no-wrap
msgid "        Route::post('/video', function () {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr "        Route::post('/video', function () {\n"
"            //\n"
"        });\n"
"    });\n"

# File: docs/8.x/releases.md, line: 241
#. type: Plain text
msgid "To learn more about rate limiting, please consult the [routing documentation](/docs/{{version}}/routing#rate-limiting)."
msgstr "要瞭解更多有關頻率限制的資訊，請參考[路由說明文件](/docs/{{version}}/routing#rate-limiting)。"

# File: docs/8.x/releases.md, line: 243
#. type: Plain text
#, no-wrap
msgid "<a name=\"improved-maintenance-mode\"></a>\n"
msgstr "<a name=\"improved-maintenance-mode\"></a>\n"

# File: docs/8.x/releases.md, line: 243
#. type: Title ###
#, no-wrap
msgid "Improved Maintenance Mode"
msgstr "改進過的維護模式"

# File: docs/8.x/releases.md, line: 246
#. type: Plain text
msgid "_Maintenance mode improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from [Spatie](https://spatie.be)_."
msgstr "_改進過的維護模式由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻，靈感來自 [Spatie](https://spatie.be)_。"

# File: docs/8.x/releases.md, line: 248
#. type: Plain text
msgid "In previous releases of Laravel, the `php artisan down` maintenance mode feature may be bypassed using an \"allow list\" of IP addresses that were allowed to access the application. This feature has been removed in favor of a simpler \"secret\" / token solution."
msgstr "在之前版本的 Laravel 中，`php artisan down` 維護模式功能可以通過使用一組允許存取網站的 IP 位址「允許列表」來繞過。該功能現已被移除，並改用了一種更簡單的「密鑰」/ 權杖方案來代替。"

# File: docs/8.x/releases.md, line: 250
#. type: Plain text
msgid "While in maintenance mode, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr "在維護模式下，可以使用 `secret` 選項來指定一個用來繞過維護模式的權杖："

# File: docs/8.x/releases.md, line: 252
#. type: Plain text
#, no-wrap
msgid "    php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"
msgstr "    php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"

# File: docs/8.x/releases.md, line: 254
#. type: Plain text
msgid "After placing the application in maintenance mode, you may navigate to the application URL matching this token and Laravel will issue a maintenance mode bypass cookie to your browser:"
msgstr "將應用程式放入維護模式後，可以瀏覽符合該權杖的應用程式網址，Laravel 會簽發一個繞過維護模式的 Cookie 給瀏覽器："

# File: docs/8.x/releases.md, line: 256
#. type: Plain text
#, no-wrap
msgid "    https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"
msgstr "    https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"

# File: docs/8.x/releases.md, line: 258
#. type: Plain text
msgid "When accessing this hidden route, you will then be redirected to the `/` route of the application. Once the cookie has been issued to your browser, you will be able to browse the application normally as if it was not in maintenance mode."
msgstr "在存取該隱藏路由時，會接著被重新導向至應用程式的 `/` 路由。該 Cookie 被簽發給瀏覽器後，就可以像沒有在維護模式一樣正常地瀏覽應用程式。"

# File: docs/8.x/releases.md, line: 260
#. type: Plain text
#, no-wrap
msgid "<a name=\"pre-rendering-the-maintenance-mode-view\"></a>\n"
msgstr "<a name=\"pre-rendering-the-maintenance-mode-view\"></a>\n"

# File: docs/8.x/releases.md, line: 260
#. type: Title ####
#, no-wrap
msgid "Pre-Rendering The Maintenance Mode View"
msgstr "預轉譯維護模式 View"

# File: docs/8.x/releases.md, line: 263
#. type: Plain text
msgid "If you utilize the `php artisan down` command during deployment, your users may still occasionally encounter errors if they access the application while your Composer dependencies or other infrastructure components are updating. This occurs because a significant part of the Laravel framework must boot in order to determine your application is in maintenance mode and render the maintenance mode view using the templating engine."
msgstr "若在部署過程中使用了 `php artisan down` 指令，若使用者在 Composer 依賴或其他基礎設施元件更新時存取了應用程式，則可能會遇到錯誤。這是因為 Laravel 框架中重要的部分必須要先啟動才能判斷應用程式是否在維護模式下，並才能接著使用樣板引擎來轉譯維護模式的 View。"

# File: docs/8.x/releases.md, line: 265
#. type: Plain text
msgid "For this reason, Laravel now allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the `down` command's `render` option:"
msgstr "基於此原因，現在，Laravel 能讓你預先轉譯維護模式 View，並在整個請求週期的一開始就將其回傳。這個 View 會在任何應用程式的依賴載入前就預先被轉譯。可以使用 `down` 指令的 `render` 選項來預轉譯所選的樣板："

# File: docs/8.x/releases.md, line: 267
#. type: Plain text
#, no-wrap
msgid "    php artisan down --render=\"errors::503\"\n"
msgstr "    php artisan down --render=\"errors::503\"\n"

# File: docs/8.x/releases.md, line: 269
#. type: Plain text
#, no-wrap
msgid "<a name=\"closure-dispatch-chain-catch\"></a>\n"
msgstr "<a name=\"closure-dispatch-chain-catch\"></a>\n"

# File: docs/8.x/releases.md, line: 269
#. type: Title ###
#, no-wrap
msgid "Closure Dispatch / Chain `catch`"
msgstr "閉包分派與顆串連的 `catch`"

# File: docs/8.x/releases.md, line: 272
#. type: Plain text
msgid "_Catch improvements were contributed by [Mohamed Said](https://github.com/themsaid)_."
msgstr "_Catch 的改進由 [Mohamed Said](https://github.com/themsaid) 參與貢獻_。"

# File: docs/8.x/releases.md, line: 274
#. type: Plain text
msgid "Using the new `catch` method, you may now provide a closure that should be executed if a queued closure fails to complete successfully after exhausting all of your queue's configured retry attempts:"
msgstr "使用新的 `catch` 方法，就能為佇列閉包提供一組要在所有重試次數都失敗的時候執行的閉包："

# File: docs/8.x/releases.md, line: 276
#. type: Plain text
#, no-wrap
msgid "    use Throwable;\n"
msgstr "    use Throwable;\n"

# File: docs/8.x/releases.md, line: 282
#. type: Plain text
#, no-wrap
msgid "    dispatch(function () use ($podcast) {\n"
"        $podcast->publish();\n"
"    })->catch(function (Throwable $e) {\n"
"        // This job has failed...\n"
"    });\n"
msgstr "    dispatch(function () use ($podcast) {\n"
"        $podcast->publish();\n"
"    })->catch(function (Throwable $e) {\n"
"        // This job has failed...\n"
"    });\n"

# File: docs/8.x/releases.md, line: 284
#. type: Plain text
#, no-wrap
msgid "<a name=\"dynamic-blade-components\"></a>\n"
msgstr "<a name=\"dynamic-blade-components\"></a>\n"

# File: docs/8.x/releases.md, line: 284
#. type: Title ###
#, no-wrap
msgid "Dynamic Blade Components"
msgstr "動態 Blade 元件"

# File: docs/8.x/releases.md, line: 287
#. type: Plain text
msgid "_Dynamic Blade components were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_動態 Blade 元件由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻_。"

# File: docs/8.x/releases.md, line: 289
#. type: Plain text
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may now use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr "有時候我們可能會需要轉譯元件，但在執行階段前並不知道要轉譯哪個元件。對於這種情況，現在，我們可以使用 Laravel 的內建「dynamic-component」動態元件來依照執行階段的值或變數進行轉譯："

# File: docs/8.x/releases.md, line: 291
#. type: Plain text
#, no-wrap
msgid "    <x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr "    <x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"

# File: docs/8.x/releases.md, line: 293
#. type: Plain text
msgid "To learn more about Blade components, please consult the [Blade documentation](/docs/{{version}}/blade#components)."
msgstr "要瞭解更多有關 Blade 元件的資訊，請參考 [Blade 的說明文件](/docs/{{version}}/blade#components)。"

# File: docs/8.x/releases.md, line: 295
#. type: Plain text
#, no-wrap
msgid "<a name=\"event-listener-improvements\"></a>\n"
msgstr "<a name=\"event-listener-improvements\"></a>\n"

# File: docs/8.x/releases.md, line: 295
#. type: Title ###
#, no-wrap
msgid "Event Listener Improvements"
msgstr "事件監聽程式的改進"

# File: docs/8.x/releases.md, line: 298
#. type: Plain text
msgid "_Event listener improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_事件監聽程式的改進由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻_。"

# File: docs/8.x/releases.md, line: 300
#. type: Plain text
msgid "Closure based event listeners may now be registered by only passing the closure to the `Event::listen` method. Laravel will inspect the closure to determine which type of event the listener handles:"
msgstr "現在，只要將閉包傳給 `Event::listen` 方法，就可以註冊基於閉包的事件監聽程式。Laravel 會偵測閉包，以判斷該事件監聽程式能負責的事件類型："

# File: docs/8.x/releases.md, line: 303
#. type: Plain text
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
msgstr "    use App\\Events\\PodcastProcessed;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"

# File: docs/8.x/releases.md, line: 307
#. type: Plain text
#, no-wrap
msgid "    Event::listen(function (PodcastProcessed $event) {\n"
"        //\n"
"    });\n"
msgstr "    Event::listen(function (PodcastProcessed $event) {\n"
"        //\n"
"    });\n"

# File: docs/8.x/releases.md, line: 309
#. type: Plain text
msgid "In addition, closure based event listeners may now be marked as queueable using the `Illuminate\\Events\\queueable` function:"
msgstr "此外，可以使用 `Illuminate\\Events\\queueable` 方法來將基於閉包的事件監聽程式標記為要放入佇列 (Queueable)："

# File: docs/8.x/releases.md, line: 313
#. type: Plain text
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use function Illuminate\\Events\\queueable;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
msgstr "    use App\\Events\\PodcastProcessed;\n"
"    use function Illuminate\\Events\\queueable;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"

# File: docs/8.x/releases.md, line: 317
#. type: Plain text
#, no-wrap
msgid "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    }));\n"
msgstr "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    }));\n"

# File: docs/8.x/releases.md, line: 319
#. type: Plain text
msgid "Like queued jobs, you may use the `onConnection`, `onQueue`, and `delay` methods to customize the execution of the queued listener:"
msgstr "就像佇列任務一樣，可以使用 `onConnection`, `onQueue`, 與 `delay` 方法來自訂放入佇列的監聽程式的執行："

# File: docs/8.x/releases.md, line: 323
#. type: Plain text
#, no-wrap
msgid "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    })->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n"
msgstr "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    })->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n"

# File: docs/8.x/releases.md, line: 325
#. type: Plain text
msgid "If you would like to handle anonymous queued listener failures, you may provide a closure to the `catch` method while defining the `queueable` listener:"
msgstr "若想在匿名的佇列監聽程式執行失敗時進行處理，可以在定義 `queueable` 監聽程式時提供一個閉包給 `catch` 方法："

# File: docs/8.x/releases.md, line: 330
#. type: Plain text
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use function Illuminate\\Events\\queueable;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Throwable;\n"
msgstr "    use App\\Events\\PodcastProcessed;\n"
"    use function Illuminate\\Events\\queueable;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Throwable;\n"

# File: docs/8.x/releases.md, line: 336
#. type: Plain text
#, no-wrap
msgid "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    })->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"        // The queued listener failed...\n"
"    }));\n"
msgstr "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    })->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"        // The queued listener failed...\n"
"    }));\n"

# File: docs/8.x/releases.md, line: 338
#. type: Plain text
#, no-wrap
msgid "<a name=\"time-testing-helpers\"></a>\n"
msgstr "<a name=\"time-testing-helpers\"></a>\n"

# File: docs/8.x/releases.md, line: 338
#. type: Title ###
#, no-wrap
msgid "Time Testing Helpers"
msgstr "時間測試輔助函式"

# File: docs/8.x/releases.md, line: 341
#. type: Plain text
msgid "_Time testing helpers were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from Ruby on Rails_."
msgstr "_時間測試輔助韓式由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻，靈感來自 Ruby on Rails_。"

# File: docs/8.x/releases.md, line: 343
#. type: Plain text
msgid "When testing, you may occasionally need to modify the time returned by helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Laravel's base feature test class now includes helpers that allow you to manipulate the current time:"
msgstr "在測試的時候，我們有時候會想要更改如 `now` 或 `Illuminate\\Support\\Carbon::now()` 等輔助函式所回傳的時間。現在，Laravel 的基礎功能測試 (Feature Test) 類別已包含了顆用來更改目前時間的輔助函式："

# File: docs/8.x/releases.md, line: 354
#. type: Plain text
#, no-wrap
msgid "    public function testTimeCanBeManipulated()\n"
"    {\n"
"        // Travel into the future...\n"
"        $this->travel(5)->milliseconds();\n"
"        $this->travel(5)->seconds();\n"
"        $this->travel(5)->minutes();\n"
"        $this->travel(5)->hours();\n"
"        $this->travel(5)->days();\n"
"        $this->travel(5)->weeks();\n"
"        $this->travel(5)->years();\n"
msgstr "    public function testTimeCanBeManipulated()\n"
"    {\n"
"        // Travel into the future...\n"
"        $this->travel(5)->milliseconds();\n"
"        $this->travel(5)->seconds();\n"
"        $this->travel(5)->minutes();\n"
"        $this->travel(5)->hours();\n"
"        $this->travel(5)->days();\n"
"        $this->travel(5)->weeks();\n"
"        $this->travel(5)->years();\n"

# File: docs/8.x/releases.md, line: 357
#. type: Plain text
#, no-wrap
msgid "        // Travel into the past...\n"
"        $this->travel(-5)->hours();\n"
msgstr "        // Travel into the past...\n"
"        $this->travel(-5)->hours();\n"

# File: docs/8.x/releases.md, line: 360
#. type: Plain text
#, no-wrap
msgid "        // Travel to an explicit time...\n"
"        $this->travelTo(now()->subHours(6));\n"
msgstr "        // Travel to an explicit time...\n"
"        $this->travelTo(now()->subHours(6));\n"

# File: docs/8.x/releases.md, line: 364
#. type: Plain text
#, no-wrap
msgid "        // Return back to the present time...\n"
"        $this->travelBack();\n"
"    }\n"
msgstr "        // Return back to the present time...\n"
"        $this->travelBack();\n"
"    }\n"

# File: docs/8.x/releases.md, line: 366
#. type: Plain text
#, no-wrap
msgid "<a name=\"artisan-serve-improvements\"></a>\n"
msgstr "<a name=\"artisan-serve-improvements\"></a>\n"

# File: docs/8.x/releases.md, line: 366
#. type: Title ###
#, no-wrap
msgid "Artisan `serve` Improvements"
msgstr "Artisan `serve` 的改進"

# File: docs/8.x/releases.md, line: 369
#. type: Plain text
msgid "_Artisan `serve` improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_Artisan `serve` 的改進由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻_。"

# File: docs/8.x/releases.md, line: 371
#. type: Plain text
msgid "The Artisan `serve` command has been improved with automatic reloading when environment variable changes are detected within your local `.env` file. Previously, the command had to be manually stopped and restarted."
msgstr "Artisan `serve` 指令已經過改進，該指令會偵測本機的 `.env` 檔案，並在環境變數更改的時候自動重新載入。在此之前，需要手動停止並重新啟動該指令。"

# File: docs/8.x/releases.md, line: 373
#. type: Plain text
#, no-wrap
msgid "<a name=\"tailwind-pagination-views\"></a>\n"
msgstr "<a name=\"tailwind-pagination-views\"></a>\n"

# File: docs/8.x/releases.md, line: 373
#. type: Title ###
#, no-wrap
msgid "Tailwind Pagination Views"
msgstr "Tailwind 分頁 View"

# File: docs/8.x/releases.md, line: 376
#. type: Plain text
msgid "The Laravel paginator has been updated to use the [Tailwind CSS](https://tailwindcss.com) framework by default. Tailwind CSS is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override. Of course, Bootstrap 3 and 4 views remain available as well."
msgstr "Laravel 的分頁程式 (Paginator) 已更新為預設使用 [Tailwind CSS](https://tailwindcss.com) 框架。Tailwind CSS 是一個可高度客製化、低階的 CSS 框架，能讓你不需處理並複寫一些煩人的固定樣式，就能製作所有你所需要的客製化區塊。當然，Bootstrap 3 與 Bootstrap 4 的 View 依然可用。"

# File: docs/8.x/releases.md, line: 378
#. type: Plain text
#, no-wrap
msgid "<a name=\"routing-namespace-updates\"></a>\n"
msgstr "<a name=\"routing-namespace-updates\"></a>\n"

# File: docs/8.x/releases.md, line: 378
#. type: Title ###
#, no-wrap
msgid "Routing Namespace Updates"
msgstr "路由 Namespace 更新"

# File: docs/8.x/releases.md, line: 381
#. type: Plain text
msgid "In previous releases of Laravel, the `RouteServiceProvider` contained a `$namespace` property. This property's value would automatically be prefixed onto controller route definitions and calls to the `action` helper / `URL::action` method. In Laravel 8.x, this property is `null` by default. This means that no automatic namespace prefixing will be done by Laravel. Therefore, in new Laravel 8.x applications, controller route definitions should be defined using standard PHP callable syntax:"
msgstr "在之前的 Laravel 版本中，`RouteServiceProvider` 包含了一個 `$namespace` 屬性。當使用 Controller 路由定義或是呼叫 `action` 輔助函式 / `URL::action` 方法時，會自動將該屬性的值加到前面。在 Laravel 8.x 中，這個屬性預設為 `null`。這表示，Laravel 將不會自動幫你將 Namespace 放在前面。因此，在新安裝的 Laravel 8.x 專案中，Controller 路由定義應使用標準的 PHP Callable 語法來定義："

# File: docs/8.x/releases.md, line: 383
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr "    use App\\Http\\Controllers\\UserController;\n"

# File: docs/8.x/releases.md, line: 385
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users', [UserController::class, 'index']);\n"
msgstr "    Route::get('/users', [UserController::class, 'index']);\n"

# File: docs/8.x/releases.md, line: 387
#. type: Plain text
msgid "Calls to the `action` related methods should use the same callable syntax:"
msgstr "與呼叫 `actions` 相關的方法也應使用相同的 Callable 語法："

# File: docs/8.x/releases.md, line: 389
#. type: Plain text
#, no-wrap
msgid "    action([UserController::class, 'index']);\n"
msgstr "    action([UserController::class, 'index']);\n"

# File: docs/8.x/releases.md, line: 391
#. type: Plain text
#, no-wrap
msgid "    return Redirect::action([UserController::class, 'index']);\n"
msgstr "    return Redirect::action([UserController::class, 'index']);\n"

# File: docs/8.x/releases.md, line: 393
#. type: Plain text
msgid "If you prefer Laravel 7.x style controller route prefixing, you may simply add the `$namespace` property into your application's `RouteServiceProvider`."
msgstr "若你偏好使用 Laravel 7.x 風格的 Controller 路由前置，只需要在專案的 `RouteServiceProvider` 中加上 `$namespace` 屬性即可。"

# File: docs/8.x/releases.md, line: 394
#. type: Plain text
#, no-wrap
msgid "> {note} This change only affects new Laravel 8.x applications. Applications upgrading from Laravel 7.x will still have the `$namespace` property in their `RouteServiceProvider`.\n"
msgstr "> {note} 這個更改只會影響新安裝的 Laravel 8.x 專案。對於從 Laravel 7.x 升級來的專案，`RouteServiceProvider` 內還是會有 `$namespace` 屬性。\n"

# File: docs/master/releases.md, line: 7
#. type: Plain text
#, no-wrap
msgid "- [Versioning Scheme](#versioning-scheme)\n"
"    - [Exceptions](#exceptions)\n"
"- [Support Policy](#support-policy)\n"
"- [Laravel 9](#laravel-9)\n"
msgstr "- [版本策略](#versioning-scheme)\n"
"    - [例外](#exceptions)\n"
"- [支援政策](#support-policy)\n"
"- [Laravel 9](#laravel-9)\n"

# File: docs/master/releases.md, line: 14
#. type: Plain text
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^9.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr "由於 Laravel 的主要更新會包含中斷性變更，因此在應用程式或套件中參照 Laravel 框架或其組件時，應使用如 `^9.0` 這樣的版本限制式。然而，我們竭力確保主要更新應可於一天之內完成。"

# File: docs/master/releases.md, line: 19
#. type: Plain text
msgid "[Named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function arguments when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr "[帶名稱引數](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments)功能尚未包含在 Laravel 的向下相容性方針內。我們可能會在有必要的時候更改函式的參數名稱以改進 Laravel 的程式碼。因此，在使用帶名稱引數呼叫 Laravel 方法時應格外注意，並瞭解到引數名稱未來可能會有所更改。"

# File: docs/master/releases.md, line: 47
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-9\"></a>\n"
msgstr "<a name=\"laravel-9\"></a>\n"

# File: docs/master/releases.md, line: 47
#. type: Title ##
#, no-wrap
msgid "Laravel 9"
msgstr "Laravel 9"

# File: docs/master/releases.md, line: 50
#. type: Plain text
msgid "As you may know, Laravel transitioned to yearly releases with the release of Laravel 8. Previously, major versions were released every 6 months. This transition is intended to ease the maintenance burden on the community and challenge our development team to ship amazing, powerful new features without introducing breaking changes. Therefore, we have shipped a variety of robust features to Laravel 8 without breaking backwards compatibility, such as parallel testing support, improved Breeze starter kits, HTTP client improvements, and even new Eloquent relationship types such as \"has one of many\"."
msgstr "讀者可能已經知道，從 Laravel 8 開始，Laravel 改為每年釋出新的主要版本。在此之前，每 6 個月都會釋出主要版本。這個改變是為了降低社群維護的負擔，並讓我們的開發團隊能想辦法在不包含中斷性更改 (Breaking Change) 的情況下繼續提供驚艷且強大的新功能。因此，我們在 Laravel 8 中，以不破壞向下相容性的前提下推出了許多強健的功能，如平行測試 (Parallel Testing) 支援、改進了 Breeze 入門套件、HTTP 用戶端的改進、甚至還出了一些如「一對多種之一 (Has One of Many)」等新的 Eloquent 關聯類型。"

# File: docs/master/releases.md, line: 52
#. type: Plain text
msgid "Therefore, this commitment to ship great new features during the current release will likely lead to future \"major\" releases being primarily used for \"maintenance\" tasks such as upgrading upstream dependencies, which can be seen in these release notes."
msgstr "因此，我們對於在目前版本中釋出新功能的承諾也將導致未來的「主要 (Major)」版本將著重於一些「維護性」的任務，如更新上游套件等，讀者稍後可以在本版本資訊內讀到。"

# File: docs/master/releases.md, line: 54
#. type: Plain text
msgid "Laravel 9 continues the improvements made in Laravel 8.x by introducing support for Symfony 6.0 components, Symfony Mailer, Flysystem 3.0, improved `route:list` output, a Laravel Scout database driver, new Eloquent accessor / mutator syntax, implicit route bindings via Enums, and a variety of other bug fixes and usability improvements."
msgstr "Laravel 9 延續了 Laravel 8.x 中推出的各種改進，並支援 Symfony 6.0 元件、Symfony Mailer、Flysystem 3.0、改進過的 `route:list` 輸出、Laravel Scout 資料庫 Driver、新的 Eloquent 存取子 / 更動子語法、通過 Enum 進行的隱式路由繫結、以及其他多個 Bug 修正與可用性提升。"

# File: docs/master/releases.md, line: 56
#. type: Plain text
#, no-wrap
msgid "<a name=\"php-8\"></a>\n"
msgstr "<a name=\"php-8\"></a>\n"

# File: docs/master/releases.md, line: 56
#. type: Title ###
#, no-wrap
msgid "PHP 8.0"
msgstr "PHP 8.0"

# File: docs/master/releases.md, line: 59
#. type: Plain text
msgid "Laravel 9.x requires a minimum PHP version of 8.0."
msgstr "Laravel 9.x 所要求的最小 PHP 版本為 8.0。"

# File: docs/master/releases.md, line: 61
#. type: Title ###
#, no-wrap
msgid "Symfony Mailer"
msgstr "Symfony Mailer"

# File: docs/master/releases.md, line: 64
#. type: Plain text
msgid "_Symfony Mailer support was contributed by [Dries Vints](https://github.com/driesvints)_, [James Brooks](https://github.com/jbrooksuk), and [Julius Kiekbusch](https://github.com/Jubeki)."
msgstr "_Symfony Mailer 支援由 [Dries Vints](https://github.com/driesvints), [James Brooks](https://github.com/jbrooksuk), 與 [Julius Kiekbusch](https://github.com/Jubeki) 參與貢獻。_"

# File: docs/master/releases.md, line: 66
#. type: Plain text
msgid "Previous releases of Laravel utilized the [Swift Mailer](https://swiftmailer.symfony.com/docs/introduction.html) library to send outgoing email. However, that library is no longer maintained and has been succeeded by Symfony Mailer."
msgstr "在以前版本的 Laravel 中，我們使用 [Swift Mailer](https://swiftmailer.symfony.com/docs/introduction.html) 函式庫來寄送外部 E-Mail。不過，這個函式庫已不在維護，Symfony Mailer 為其後繼者。"

# File: docs/master/releases.md, line: 68
#. type: Plain text
msgid "Please review the [upgrade guide](/docs/{{version}}/upgrade#symfony-mailer) to learn more about ensuring your application is compatible with Symfony Mailer."
msgstr "請參考[升級指南](/docs/{{version}}/upgrade#symfony-mailer)來瞭解如何確保你的專案能相容於 Symfony Mailer。"

# File: docs/master/releases.md, line: 70
#. type: Plain text
#, no-wrap
msgid "<a name=\"flysystem-3\"></a>\n"
msgstr "<a name=\"flysystem-3\"></a>\n"

# File: docs/master/releases.md, line: 70
#. type: Title ###
#, no-wrap
msgid "Flysystem 3.x"
msgstr "Flysystem 3.x"

# File: docs/master/releases.md, line: 73
#. type: Plain text
msgid "_Flysystem 3.x support was contributed by [Dries Vints](https://github.com/driesvints)_."
msgstr "_Flysystem 3.x 支援由 [Dries Vints](https://github.com/driesvints) 參與貢獻_。"

# File: docs/master/releases.md, line: 75
#. type: Plain text
msgid "Laravel 9.x upgrades our upstream Flysystem dependency to Flysystem 3.x. Flysystem powers all of filesystem interactions offered by the `Storage` facade."
msgstr "Laravel 9.x 更新了上游的 Flysystem 相依性套件為 Flysystem 3.x。Flysystem 驅動了 `Storage` Facade 中提供的所有檔案系統互動功能。"

# File: docs/master/releases.md, line: 77
#. type: Plain text
msgid "Please review the [upgrade guide](/docs/{{version}}/upgrade#flysystem-3) to learn more about ensuring your application is compatible with Flysystem 3.x."
msgstr "請參考[升級指南](/docs/{{version}}/upgrade#flysystem-3)來瞭解如何確保你的專案能相容於 Flysystem 3.x。"

# File: docs/master/releases.md, line: 79
#. type: Plain text
#, no-wrap
msgid "<a name=\"eloquent-accessors-and-mutators\"></a>\n"
msgstr "<a name=\"eloquent-accessors-and-mutators\"></a>\n"

# File: docs/master/releases.md, line: 79
#. type: Title ###
#, no-wrap
msgid "Improved Eloquent Accessors / Mutators"
msgstr "改進過的 Eloquent 存取子與更動子"

# File: docs/master/releases.md, line: 82
#. type: Plain text
msgid "_Improved Eloquent accessors / mutators was contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr "_改進過的 Eloquent 存取子與更動子由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻_。"

# File: docs/master/releases.md, line: 84
#. type: Plain text
msgid "Laravel 9.x offers a new way to define Eloquent [accessors and mutators](/docs/{{version}}/eloquent-mutators#accessors-and-mutators). In previous releases of Laravel, the only way to define accessors and mutators was by defining prefixed methods on your model like so:"
msgstr "Laravel 9.x 提供了一種定義 Eloquent [存取子與更動子](/docs/{{version}}/eloquent-mutators#accessors-and-mutators)的全新方法。在之前版本的 Laravel 中，唯一一種定義存取子與更動子的方法就只有在 Model 中像這樣定義由前置詞的方法："

# File: docs/master/releases.md, line: 85
# File: docs/master/releases.md, line: 99
# File: docs/master/releases.md, line: 113
# File: docs/master/releases.md, line: 139
# File: docs/master/releases.md, line: 149
# File: docs/master/releases.md, line: 265
#. type: Code fence info string
#, no-wrap
msgid "php"
msgstr "php"

# File: docs/master/releases.md, line: 85
#. type: Plain text
#, no-wrap
msgid "public function getNameAttribute($value)\n"
"{\n"
"    return strtoupper($value);\n"
"}\n\n"
"public function setNameAttribute($value)\n"
"{\n"
"    $this->attributes['name'] = $value;\n"
"}\n"
msgstr "public function getNameAttribute($value)\n"
"{\n"
"    return strtoupper($value);\n"
"}\n\n"
"public function setNameAttribute($value)\n"
"{\n"
"    $this->attributes['name'] = $value;\n"
"}\n"

# File: docs/master/releases.md, line: 98
#. type: Plain text
msgid "However, in Laravel 9.x you may define an accessor and mutator using a single, non-prefixed method by type-hinting a return type of `Illuminate\\Database\\Eloquent\\Casts\\Attribute`:"
msgstr "不過，在 Laravel 9.x 中，只需要標示回傳型別為 `Illuminate\\Database\\Eloquent\\Casts\\Attribute`，就可以使用不含前置詞的單一一個方法來定義存取子與更動子："

# File: docs/master/releases.md, line: 99
#. type: Plain text
#, no-wrap
msgid "use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function name(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value) => strtoupper($value),\n"
"        set: fn ($value) => $value,\n"
"    );\n"
"}\n"
msgstr "use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function name(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value) => strtoupper($value),\n"
"        set: fn ($value) => $value,\n"
"    );\n"
"}\n"

# File: docs/master/releases.md, line: 112
#. type: Plain text
msgid "In addition, this new approach to defining accessors will cache object values that are returned by the attribute, just like [custom cast classes](/docs/{{version}}/eloquent-mutators#custom-casts):"
msgstr "此外，這種定義存取子的新方法也會將以屬性回傳的物件值快取起來，就跟[自訂型別轉換類別](/docs/{{version}}/eloquent-mutators#custom-casts)一樣："

# File: docs/master/releases.md, line: 113
#. type: Plain text
#, no-wrap
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"

# File: docs/master/releases.md, line: 133
#. type: Plain text
#, no-wrap
msgid "<a name=\"implicit-route-bindings-with-enums\"></a>\n"
msgstr "<a name=\"implicit-route-bindings-with-enums\"></a>\n"

# File: docs/master/releases.md, line: 133
#. type: Title ###
#, no-wrap
msgid "Implicit Route Bindings With Enums"
msgstr "使用 Enum 的隱式路由繫結"

# File: docs/master/releases.md, line: 136
#. type: Plain text
msgid "_Implicit Enum bindings was contributed by [Nuno Maduro](https://github.com/nunomaduro)_."
msgstr "_隱式路由繫結由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻_。"

# File: docs/master/releases.md, line: 138
#. type: Plain text
msgid "PHP 8.1 introduces support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). Laravel 9.x introduces the ability to type-hint an Enum on your route definition and Laravel will only invoke the route if that route segment is a valid Enum value in the URI. Otherwise, an HTTP 404 response will be returned automatically. For example, given the following Enum:"
msgstr "PHP 8.1 新增了對 [Enum](https://www.php.net/manual/en/language.enumerations.backed.php) 的支援。Laravel 9.x 中提供了能在路由定義中對 Enum 進行型別提示的功能。加上型別提示後，只有當網址中的路由片段 (Segment) 為有效的 Enum 時，Laravel 才會叫用該路由。若不是有效的 Enum 值，則會自動回傳 HTTP 404 回應。舉例來說，假設有下列 Enum："

# File: docs/master/releases.md, line: 139
#. type: Plain text
#, no-wrap
msgid "enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"
msgstr "enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"

# File: docs/master/releases.md, line: 148
#. type: Plain text
msgid "You may define a route that will only be invoked if the `{category}` route segment is `fruits` or `people`. Otherwise, an HTTP 404 response will be returned:"
msgstr "我們可以定義一個只有當 `{category}` 路由片段為 `fruits` 或 `people` 時才會被叫用的路由。若為其他值，則會回傳 HTTP 404 回應："

# File: docs/master/releases.md, line: 149
#. type: Plain text
#, no-wrap
msgid "Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"
msgstr "Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"

# File: docs/master/releases.md, line: 156
#. type: Plain text
#, no-wrap
msgid "<a name=\"controller-route-groups\"></a>\n"
msgstr "<a name=\"controller-route-groups\"></a>\n"

# File: docs/master/releases.md, line: 156
#. type: Title ###
#, no-wrap
msgid "Controller Route Groups"
msgstr "Controller 路由群組"

# File: docs/master/releases.md, line: 159
#. type: Plain text
msgid "_Route group improvements were contributed by [Luke Downing](https://github.com/lukeraymonddowning)_."
msgstr "_路由群組的改進由 [Luke Downing](https://github.com/lukeraymonddowning) 參與貢獻_。"

# File: docs/master/releases.md, line: 161
#. type: Plain text
msgid "You may now use the `controller` method to define the common controller for all of the routes within the group. Then, when defining the routes, you only need to provide the controller method that they invoke:"
msgstr "我們現在可以使用 `controller` 方法來在路由群組中為所有的路由定義通用的 Controller 了。定義好之後，當定義路由時，就只需要提供要叫用的 Controller 方法即可："

# File: docs/master/releases.md, line: 163
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Controllers\\OrderController;\n"
msgstr "    use App\\Http\\Controllers\\OrderController;\n"

# File: docs/master/releases.md, line: 168
#. type: Plain text
#, no-wrap
msgid "    Route::controller(OrderController::class)->group(function () {\n"
"        Route::get('/orders/{id}', 'show');\n"
"        Route::post('/orders', 'store');\n"
"    });\n"
msgstr "    Route::controller(OrderController::class)->group(function () {\n"
"        Route::get('/orders/{id}', 'show');\n"
"        Route::post('/orders', 'store');\n"
"    });\n"

# File: docs/master/releases.md, line: 170
#. type: Plain text
#, no-wrap
msgid "<a name=\"enum-casting\"></a>\n"
msgstr "<a name=\"enum-casting\"></a>\n"

# File: docs/master/releases.md, line: 170
#. type: Title ###
#, no-wrap
msgid "Enum Eloquent Attribute Casting"
msgstr "Enum Eloquent 屬性型別轉換"

# File: docs/master/releases.md, line: 173
#. type: Plain text
#, no-wrap
msgid "> {note} Enum casting is only available for PHP 8.1+.\n"
msgstr "> {note} Enum 型別轉換只可在 PHP 8.1 以上使用。\n"

# File: docs/master/releases.md, line: 175
#. type: Plain text
msgid "_Enum casting was contributed by [Mohamed Said](https://github.com/themsaid)_."
msgstr "_Enum 型別轉換由 [Mohamed Said](https://github.com/themsaid) 參與貢獻_。"

# File: docs/master/releases.md, line: 177
#. type: Plain text
msgid "Eloquent now allows you to cast your attribute values to PHP enums. To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr "現在，Eloquent 能讓我們將屬性值轉換為 PHP Enum 了。若要轉換為 Enum，可在 Model 中的 `$casts` 屬性陣列中指定要型別轉換的屬性與 Enum："

# File: docs/master/releases.md, line: 179
#. type: Plain text
#, no-wrap
msgid "    use App\\Enums\\ServerStatus;\n"
msgstr "    use App\\Enums\\ServerStatus;\n"

# File: docs/master/releases.md, line: 188
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'status' => ServerStatus::class,\n"
"    ];\n"
msgstr "    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'status' => ServerStatus::class,\n"
"    ];\n"

# File: docs/master/releases.md, line: 190
#. type: Plain text
msgid "Once you have defined the cast on your model, the specified attribute will be automatically cast to and from an enum when you interact with the attribute:"
msgstr "定義好 Model 的型別轉換後，每次存取該屬性時就會自動轉換對 Enum 進行轉換："

# File: docs/master/releases.md, line: 193
#. type: Plain text
#, no-wrap
msgid "    if ($server->status == ServerStatus::provisioned) {\n"
"        $server->status = ServerStatus::ready;\n"
msgstr "    if ($server->status == ServerStatus::provisioned) {\n"
"        $server->status = ServerStatus::ready;\n"

# File: docs/master/releases.md, line: 196
#. type: Plain text
#, no-wrap
msgid "        $server->save();\n"
"    }\n"
msgstr "        $server->save();\n"
"    }\n"

# File: docs/master/releases.md, line: 197
#. type: Title ###
#, no-wrap
msgid "Forced Scoped Bindings"
msgstr "強制限定作用範圍的繫結"

# File: docs/master/releases.md, line: 200
#. type: Plain text
msgid "_Forced scoped bindings was contributed by [Claudio Dekker](https://github.com/claudiodekker)_."
msgstr "_強制限定作用範圍的繫結由 [Claudio Dekker](https://github.com/claudiodekker) 參與貢獻_。"

# File: docs/master/releases.md, line: 202
#. type: Plain text
msgid "In previous releases of Laravel, you may wish to scope the second Eloquent model in a route definition such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr "在之前版本的 Laravel 中，我們可以在路由定義中限定第二個 Eloquent Model 一定要是前一個 Eloquent Model 的子 Model。舉例來說，假設有下列這樣通過 Slug 取得特定使用者的部落格貼文的路由定義："

# File: docs/master/releases.md, line: 205
# File: docs/master/releases.md, line: 216
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr "    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"

# File: docs/master/releases.md, line: 209
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
msgstr "    Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"

# File: docs/master/releases.md, line: 211
#. type: Plain text
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. However, this behavior was only previously supported by Laravel when a custom key was used for the child route binding."
msgstr "在巢狀路由參數中使用自訂索引鍵的隱式繫結時，Laravel 會自動使用慣例來猜測上層 Model 的關聯名稱，並在查詢巢狀 Model 時以此限定查詢範圍。不過，在以前版本的 Laravel 中，只有在子路由繫結上使用自訂索引鍵時才可使用此功能。"

# File: docs/master/releases.md, line: 213
#. type: Plain text
msgid "However, in Laravel 9.x, you may now instruct Laravel to scope \"child\" bindings even when a custom key is not provided. To do so, you may invoke the `scopeBindings` method when defining your route:"
msgstr "不過，在 Laravel 9.x 中，就算沒有提供自訂索引鍵，我們還是可以告訴 Laravel 要如何對「子」繫結限定範圍。為此，我們可以在定義路由時叫用 `scopeBindings` 方法："

# File: docs/master/releases.md, line: 220
#. type: Plain text
#, no-wrap
msgid "    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    })->scopeBindings();\n"
msgstr "    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    })->scopeBindings();\n"

# File: docs/master/releases.md, line: 222
#. type: Plain text
msgid "Or, you may instruct an entire group of route definitions to use scoped bindings:"
msgstr "或者，也可以讓整個路由定義群組使用限定範圍的繫結："

# File: docs/master/releases.md, line: 228
#. type: Plain text
#, no-wrap
msgid "    Route::scopeBindings()->group(function () {\n"
"        Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"            return $post;\n"
"        });\n"
"    });\n"
msgstr "    Route::scopeBindings()->group(function () {\n"
"        Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"            return $post;\n"
"        });\n"
"    });\n"

# File: docs/master/releases.md, line: 230
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-breeze-api\"></a>\n"
msgstr "<a name=\"laravel-breeze-api\"></a>\n"

# File: docs/master/releases.md, line: 230
#. type: Title ###
#, no-wrap
msgid "Laravel Breeze API & Next.js"
msgstr "Laravel Breeze API 與 Next.js"

# File: docs/master/releases.md, line: 233
#. type: Plain text
msgid "_The Laravel Breeze API scaffolding and Next.js starter kit was contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Miguel Piedrafita](https://twitter.com/m1guelpf)_."
msgstr "Laravel Breeze API Scaffolding 與 Next.js 入門套件由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Miguel Piedrafita](https://twitter.com/m1guelpf) 參與貢獻_。"

# File: docs/master/releases.md, line: 235
#. type: Plain text
msgid "The [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-next) starter kit has received an \"API\" scaffolding mode and complimentary [Next.js](https://nextjs.org) [frontend implementation](https://github.com/laravel/breeze-next). This starter kit scaffolding may be used to jump start your Laravel applications that are serving as a backend, Laravel Sanctum authenticated API for a JavaScript frontend."
msgstr "[Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-next) 入門套件現在有了「API」Scaffolding 模式，且有了完整的 [Next.js](https://nextjs.org) [前端實作](https://github.com/laravel/breeze-next)。如果你想使用 Laravel 作為後端並使用 Laravel Sanctum 的登入 API 給 JavaScript 前端使用的話，就適合這個入門套件 Scaffolding。"

# File: docs/master/releases.md, line: 237
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-scout-database-engine\"></a>\n"
msgstr "<a name=\"laravel-scout-database-engine\"></a>\n"

# File: docs/master/releases.md, line: 237
#. type: Title ###
#, no-wrap
msgid "Laravel Scout Database Engine"
msgstr "Laravel Scout 資料庫引擎"

# File: docs/master/releases.md, line: 240
#. type: Plain text
msgid "_The Laravel Scout database engine was contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Dries Vints](https://github.com/driesvints)_."
msgstr "Laravel Scout 資料庫引擎由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Dries Vints](https://github.com/driesvints) 參與貢獻_。"

# File: docs/master/releases.md, line: 242
#. type: Plain text
msgid "If your application interacts with small to medium sized databases or has a light workload, you may now use Scout's \"database\" engine instead of a dedicated search service such as Algolia or MeiliSerach. The database engine will use \"where like\" clauses and full text indexes when filtering results from your existing database to determine the applicable search results for your query."
msgstr "若你的專案使用中小型的資料庫，或是資料庫的工作量 (Workload) 不高的話，現在，你可以使用 Scout 的「database」引擎，而不需使用如 Algolia 或 MeiliSearch 等專門的搜尋服務。在從現有資料庫過濾結果時，資料庫引擎會使用「where like」查詢語句來取得搜尋結果。"

# File: docs/master/releases.md, line: 244
#. type: Plain text
msgid "To learn more about the Scout database engine, consult the [Scout documentation](/docs/{{version}}/scout)."
msgstr "要瞭解更多有關 Scout 資料庫引擎的資訊，請參考 [Scout 說明文件](/docs/{{version}}/scout)。"

# File: docs/master/releases.md, line: 246
#. type: Plain text
#, no-wrap
msgid "<a name=\"full-text\"></a>\n"
msgstr "<a name=\"full-text\"></a>\n"

# File: docs/master/releases.md, line: 246
#. type: Title ###
#, no-wrap
msgid "Full Text Indexes / Where Clauses"
msgstr "全文索引與 Where 子句"

# File: docs/master/releases.md, line: 249
#. type: Plain text
msgid "_Full text indexes and \"where\" clauses were contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Dries Vints](https://github.com/driesvints)_."
msgstr "_全文索引與「where」子句由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Dries Vints](https://github.com/driesvints) 參與貢獻_。"

# File: docs/master/releases.md, line: 251
#. type: Plain text
msgid "When using MySQL or PostgreSQL, the `fullText` method may now be added to column definitions to generate full text indexes:"
msgstr "現在，在使用 MySQL 或 PostgresSQL 時，我們可以在欄位定義中新增 `fullText` 方法來產生全文索引 (Full Text Indexes)："

# File: docs/master/releases.md, line: 253
#. type: Plain text
#, no-wrap
msgid "    $table->text('bio')->fullText();\n"
msgstr "    $table->text('bio')->fullText();\n"

# File: docs/master/releases.md, line: 255
#. type: Plain text
msgid "In addition, the `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MySQL:"
msgstr "此外，也可以使用 `whereFullText` 與 `orWhereFullText` 方法來在查詢中為有[全文索引](/docs/{{version}}/migrations#available-index-types)的欄位加上全文「where」子句。Laravel 會依據底層的資料庫系統將這些方法轉換為適當的 SQL。舉例來說，使用 MySQL 的專案會產生 `MATCH AGAINST` 子句："

# File: docs/master/releases.md, line: 259
#. type: Plain text
#, no-wrap
msgid "    $users = DB::table('users')\n"
"               ->whereFullText('bio', 'web developer')\n"
"               ->get();\n"
msgstr "    $users = DB::table('users')\n"
"               ->whereFullText('bio', 'web developer')\n"
"               ->get();\n"

# File: docs/master/releases.md, line: 261
#. type: Plain text
#, no-wrap
msgid "<a name=\"rendering-inline-blade-templates\"></a>\n"
msgstr "<a name=\"rendering-inline-blade-templates\"></a>\n"

# File: docs/master/releases.md, line: 261
#. type: Title ###
#, no-wrap
msgid "Rendering Inline Blade Templates"
msgstr "轉譯內嵌的 Blade 樣板"

# File: docs/master/releases.md, line: 264
#. type: Plain text
msgid "Sometimes you may need to transform a raw Blade template string into valid HTML. You may accomplish this using the `render` method provided by the `Blade` facade. The `render` method accepts the Blade template string and an optional array of data to provide to the template:"
msgstr "有時候，我們可能會想將原始的 Blade 樣板字串轉譯為有效的 HTML。我們可以通過 `Blade` Facade 所提供的 `render` 方法來達成。`render` 方法接受 Blade 樣板字串，以及一個用來提供給樣板的可選資料陣列："

# File: docs/master/releases.md, line: 265
#. type: Plain text
#, no-wrap
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"

# File: docs/master/releases.md, line: 272
#. type: Plain text
#, no-wrap
msgid "<a name=\"improved-route-list\"></a>\n"
msgstr "<a name=\"improved-route-list\"></a>\n"

# File: docs/master/releases.md, line: 272
#. type: Title ###
#, no-wrap
msgid "Improved `route:list` CLI Output"
msgstr "改進過的 `route:list` CLI 輸出"

# File: docs/master/releases.md, line: 275
#. type: Plain text
msgid "_Improved `route:list` CLI output was contributed by [Nuno Maduro](https://github.com/nunomaduro)_."
msgstr "_改進過的 `route:list` CLI 輸出由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻_。"

# File: docs/master/releases.md, line: 277
#. type: Plain text
msgid "The `route:list` CLI output has been significantly improved for the Laravel 9.x release, offering a beautiful new experience when exploring your route definitions."
msgstr "Laravel 9.x 更新中的 `route:list` CLI 已大幅改進，能讓你在探索路由定義時獲得全新、漂亮的體驗。"

# File: docs/master/releases.md, line: 281
#. type: Plain text
#, no-wrap
msgid "<p align=\"center\">\n"
"<img src=\"https://user-images.githubusercontent.com/5457236/148321982-38c8b869-f188-4f42-a3cc-a03451d5216c.png\"/>\n"
"</p>\n"
msgstr "<p align=\"center\">\n"
"<img src=\"https://user-images.githubusercontent.com/5457236/148321982-38c8b869-f188-4f42-a3cc-a03451d5216c.png\"/>\n"
"</p>\n"

# File: docs/master/releases.md, line: 283
#. type: Plain text
#, no-wrap
msgid "<a name=\"test-coverage-support-on-artisan-test-Command\"></a>\n"
msgstr "<a name=\"test-coverage-support-on-artisan-test-Command\"></a>\n"

# File: docs/master/releases.md, line: 283
#. type: Title ###
#, no-wrap
msgid "Test Coverage Using Artisan `test` Command"
msgstr "使用 Artisan `test` 指令來取得測試覆蓋率"

# File: docs/master/releases.md, line: 286
#. type: Plain text
msgid "_Test coverage when using the Artisan `test` command was contributed by [Nuno Maduro](https://github.com/nunomaduro)_."
msgstr "_使用 Artisan `test` 指令來取得測試覆蓋率由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻_。"

# File: docs/master/releases.md, line: 288
#. type: Plain text
msgid "The Artisan `test` command has received a new `--coverage` option that you may use to explore the amount of code coverage your tests are providing to your application:"
msgstr "現在，Artisan `test` 指令有了全新的 `--coverage` 選項，能讓你用來確認測試為專案提供了多少的程式碼覆蓋率："

# File: docs/master/releases.md, line: 290
#. type: Plain text
#, no-wrap
msgid "    php artisan test --coverage\n"
msgstr "    php artisan test --coverage\n"

# File: docs/master/releases.md, line: 292
#. type: Plain text
msgid "The test coverage results will be displayed directly within the CLI output."
msgstr "測試覆蓋率會直接顯示在 CLI 輸出中。"

# File: docs/master/releases.md, line: 296
#. type: Plain text
#, no-wrap
msgid "<p align=\"center\">\n"
"<img width=\"100%\" src=\"https://user-images.githubusercontent.com/5457236/150133237-440290c2-3538-4d8e-8eac-4fdd5ec7bd9e.png\"/>\n"
"</p>\n"
msgstr "<p align=\"center\">\n"
"<img width=\"100%\" src=\"https://user-images.githubusercontent.com/5457236/150133237-440290c2-3538-4d8e-8eac-4fdd5ec7bd9e.png\"/>\n"
"</p>\n"

# File: docs/master/releases.md, line: 298
#. type: Plain text
msgid "In addition, if you would like to specify a minimum threshold that your test coverage percentage must meet, you may use the `--min` option. The test suite will fail if the given minimum threshold is not met:"
msgstr "此外，若想指定測試覆蓋率的最小百分比值，可以使用 `--min` 選項。當沒滿足最小值時，測試套件就會執行失敗："

# File: docs/master/releases.md, line: 300
#. type: Plain text
#, no-wrap
msgid "    php artisan test --coverage --min=80.3\n"
msgstr "    php artisan test --coverage --min=80.3\n"

# File: docs/master/releases.md, line: 304
#. type: Plain text
#, no-wrap
msgid "<p align=\"center\">\n"
"<img width=\"100%\" src=\"https://user-images.githubusercontent.com/5457236/149989853-a29a7629-2bfa-4bf3-bbf7-cdba339ec157.png\"/>\n"
"</p>\n"
msgstr "<p align=\"center\">\n"
"<img width=\"100%\" src=\"https://user-images.githubusercontent.com/5457236/149989853-a29a7629-2bfa-4bf3-bbf7-cdba339ec157.png\"/>\n"
"</p>\n"

# File: docs/master/releases.md, line: 306
#. type: Plain text
#, no-wrap
msgid "<a name=\"soketi-echo-server\"></a>\n"
msgstr "<a name=\"soketi-echo-server\"></a>\n"

# File: docs/master/releases.md, line: 306
#. type: Title ###
#, no-wrap
msgid "Soketi Echo Server"
msgstr "Soketi Echo 伺服器"

# File: docs/master/releases.md, line: 309
#. type: Plain text
msgid "_The Soketi Echo server was developed by [Alex Renoki](https://github.com/rennokki)_."
msgstr "Soketi Echo 伺服器由 [Alex Renoki](https://github.com/rennokki) 開發_。"

# File: docs/master/releases.md, line: 311
#. type: Plain text
msgid "Although not exclusive to Laravel 9.x, Laravel has recently assisted with the documentation of Soketi, a [Laravel Echo](/docs/{{version}}/broadcasting) compatible Web Socket server written for Node.js. Soketi provides a great, open source alternative to Pusher and Ably for those applications that prefer to manage their own Web Socket server."
msgstr "雖然這個功能不侷限於 Laravel 9.x 使用，單 Laravel 也協助了 Soketi —— 使用 Node.js 撰寫的相容於 [Laravel Echo](/docs/{{version}}/broadcasting) 的 Web Socket 伺服器 ——提供說明文件。Soketi 提供了良好且開源的 Pusher 與 Ably 替代方案，可供偏好自行管理 Web Socket 伺服器的專案使用。"

# File: docs/master/releases.md, line: 313
#. type: Plain text
msgid "For more information on using Soketi, please consult the [broadcasting documentation](/docs/{{version}}/broadcasting) and [Soketi documentation](https://docs.soketi.app/)."
msgstr "更多關於 Soketi 的資訊，請參考[廣播說明文件](/docs/{{version}}/broadcasting)與 [Soketi 的說明文件](https://docs.soketi.app/)。"

# File: docs/master/releases.md, line: 315
#. type: Plain text
#, no-wrap
msgid "<a name=\"bootstrap-5-pagination-views\"></a>\n"
msgstr "<a name=\"bootstrap-5-pagination-views\"></a>\n"

# File: docs/master/releases.md, line: 315
#. type: Title ###
#, no-wrap
msgid "Bootstrap 5 Pagination Views"
msgstr "Bootstrap 5 的分頁 View"

# File: docs/master/releases.md, line: 318
#. type: Plain text
msgid "Laravel now includes pagination views built using [Bootstrap 5](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrapFive` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr "現在，Laravel 提供了適用於 [Bootstrap 5](https://getbootstrap.com/) 的分頁 View。若要使用這些 View 來替代預設的 Tailwind View，可以在 `App\\Providers\\AppServiceProvider` 內的 `boot` 方法中呼叫 Paginator 的 `useBootstrapFive` 方法："

# File: docs/master/releases.md, line: 320
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Pagination\\Paginator;\n"
msgstr "    use Illuminate\\Pagination\\Paginator;\n"

# File: docs/master/releases.md, line: 330
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::useBootstrapFive();\n"
"    }\n"
msgstr "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::useBootstrapFive();\n"
"    }\n"

# File: docs/master/releases.md, line: 332
#. type: Plain text
#, no-wrap
msgid "<a name=\"exception-page\"></a>\n"
msgstr "<a name=\"exception-page\"></a>\n"

# File: docs/master/releases.md, line: 332
#. type: Title ###
#, no-wrap
msgid "Improved Ignition Exception Page"
msgstr "改進過的 Ignition 例外頁面"

# File: docs/master/releases.md, line: 335
#. type: Plain text
msgid "Ignition, the open source exception debug page created by Spatie, has been redesigned from the ground up. The new, improved Ignition ships with Laravel 9.x and includes light / dark themes, customizable \"open in editor\" functionality, and more."
msgstr "Ignition 是由 Spatie 製作的開放原始碼例外除錯頁面。Ignition 現已被重新設計。Laravel 9.x 隨附了這個全新、改進過的 Ignition，並包含了亮色 / 暗色主題、可自訂的「在編輯器中開啟」功能⋯等。"

# File: docs/master/releases.md, line: 338
#. type: Plain text
#, no-wrap
msgid "<p align=\"center\">\n"
"<img width=\"100%\" src=\"https://user-images.githubusercontent.com/483853/149235404-f7caba56-ebdf-499e-9883-cac5d5610369.png\"/>\n"
"</p>\n"
msgstr "<p align=\"center\">\n"
"<img width=\"100%\" src=\"https://user-images.githubusercontent.com/483853/149235404-f7caba56-ebdf-499e-9883-cac5d5610369.png\"/>\n"
"</p>\n"

