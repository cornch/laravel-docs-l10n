#
msgid ""
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 1 (header)
msgid "Eloquent: Serialization"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Serializing Models and Collections](#serializing-models-and-collections)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Serializing to Arrays](#serializing-to-arrays)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Serializing to JSON](#serializing-to-json)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Hiding Attributes From JSON](#hiding-attributes-from-json)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Appending Values to JSON](#appending-values-to-json)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Date Serialization](#date-serialization)"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 5 (paragraph)
msgid "When building APIs using Laravel, you will often need to convert your models and relationships to arrays or JSON. Eloquent includes convenient methods for making these conversions, as well as controlling which attributes are included in the serialized representation of your models."
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 6 (quote)
msgid "[!NOTE] For an even more robust way of handling Eloquent model and collection JSON serialization, check out the documentation on [Eloquent API resources](/docs/{{version}}/eloquent-resources)."
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 8 (header)
msgid "Serializing Models and Collections"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 10 (header)
msgid "Serializing to Arrays"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 11 (paragraph)
msgid "To convert a model and its loaded [relationships](/docs/{{version}}/eloquent-relationships) to an array, you should use the `toArray` method. This method is recursive, so all attributes and all relations (including the relations of relations) will be converted to arrays:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 12 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::with('roles')->first();\n"
"\n"
"return $user->toArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 13 (paragraph)
msgid "The `attributesToArray` method may be used to convert a model's attributes to an array but not its relationships:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 14 (code)
msgid ""
"$user = User::first();\n"
"\n"
"return $user->attributesToArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 15 (paragraph)
msgid "You may also convert entire [collections](/docs/{{version}}/eloquent-collections) of models to arrays by calling the `toArray` method on the collection instance:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 16 (code)
msgid ""
"$users = User::all();\n"
"\n"
"return $users->toArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 18 (header)
msgid "Serializing to JSON"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 19 (paragraph)
msgid "To convert a model to JSON, you should use the `toJson` method. Like `toArray`, the `toJson` method is recursive, so all attributes and relations will be converted to JSON. You may also specify any JSON encoding options that are [supported by PHP](https://secure.php.net/manual/en/function.json-encode.php):"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 20 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"return $user->toJson();\n"
"\n"
"return $user->toJson(JSON_PRETTY_PRINT);\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 21 (paragraph)
msgid "Alternatively, you may cast a model or collection to a string, which will automatically call the `toJson` method on the model or collection:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 22 (code)
msgid "return (string) User::find(1);\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 23 (paragraph)
msgid "Since models and collections are converted to JSON when cast to a string, you can return Eloquent objects directly from your application's routes or controllers. Laravel will automatically serialize your Eloquent models and collections to JSON when they are returned from routes or controllers:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 24 (code)
msgid ""
"Route::get('users', function () {\n"
"    return User::all();\n"
"});\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 26 (header)
msgid "Relationships"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 27 (paragraph)
msgid "When an Eloquent model is converted to JSON, its loaded relationships will automatically be included as attributes on the JSON object. Also, though Eloquent relationship methods are defined using \"camel case\" method names, a relationship's JSON attribute will be \"snake case\"."
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 29 (header)
msgid "Hiding Attributes From JSON"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 30 (paragraph)
msgid "Sometimes you may wish to limit the attributes, such as passwords, that are included in your model's array or JSON representation. To do so, add a `$hidden` property to your model. Attributes that are listed in the `$hidden` property's array will not be included in the serialized representation of your model:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 31 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be hidden for arrays.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $hidden = ['password'];\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 32 (quote)
msgid "[!NOTE] To hide relationships, add the relationship's method name to your Eloquent model's `$hidden` property."
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 33 (paragraph)
msgid "Alternatively, you may use the `visible` property to define an \"allow list\" of attributes that should be included in your model's array and JSON representation. All attributes that are not present in the `$visible` array will be hidden when the model is converted to an array or JSON:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 34 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be visible in arrays.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $visible = ['first_name', 'last_name'];\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 36 (header)
msgid "Temporarily Modifying Attribute Visibility"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 37 (paragraph)
msgid "If you would like to make some typically hidden attributes visible on a given model instance, you may use the `makeVisible` method. The `makeVisible` method returns the model instance:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 38 (code)
msgid "return $user->makeVisible('attribute')->toArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 39 (paragraph)
msgid "Likewise, if you would like to hide some attributes that are typically visible, you may use the `makeHidden` method."
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 40 (code)
msgid "return $user->makeHidden('attribute')->toArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 41 (paragraph)
msgid "If you wish to temporarily override all of the visible or hidden attributes, you may use the `setVisible` and `setHidden` methods respectively:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 42 (code)
msgid ""
"return $user->setVisible(['id', 'name'])->toArray();\n"
"\n"
"return $user->setHidden(['email', 'password', 'remember_token'])->toArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 44 (header)
msgid "Appending Values to JSON"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 45 (paragraph)
msgid "Occasionally, when converting models to arrays or JSON, you may wish to add attributes that do not have a corresponding column in your database. To do so, first define an [accessor](/docs/{{version}}/eloquent-mutators) for the value:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 46 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Determine if the user is an administrator.\n"
"     */\n"
"    protected function isAdmin(): Attribute\n"
"    {\n"
"        return new Attribute(\n"
"            get: fn () => 'yes',\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 47 (paragraph)
msgid "If you would like the accessor to always be appended to your model's array and JSON representations, you may add the attribute name to the `appends` property of your model. Note that attribute names are typically referenced using their \"snake case\" serialized representation, even though the accessor's PHP method is defined using \"camel case\":"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 48 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The accessors to append to the model's array form.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $appends = ['is_admin'];\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 49 (paragraph)
msgid "Once the attribute has been added to the `appends` list, it will be included in both the model's array and JSON representations. Attributes in the `appends` array will also respect the `visible` and `hidden` settings configured on the model."
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 51 (header)
msgid "Appending at Run Time"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 52 (paragraph)
msgid "At runtime, you may instruct a model instance to append additional attributes using the `append` method. Or, you may use the `setAppends` method to override the entire array of appended properties for a given model instance:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 53 (code)
msgid ""
"return $user->append('is_admin')->toArray();\n"
"\n"
"return $user->setAppends(['is_admin'])->toArray();\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 55 (header)
msgid "Date Serialization"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 57 (header)
msgid "Customizing the Default Date Format"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 58 (paragraph)
msgid "You may customize the default serialization format by overriding the `serializeDate` method. This method does not affect how your dates are formatted for storage in the database:"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 59 (code)
msgid ""
"/**\n"
" * Prepare a date for array / JSON serialization.\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date): string\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}\n"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 61 (header)
msgid "Customizing the Date Format per Attribute"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 62 (paragraph)
msgid "You may customize the serialization format of individual Eloquent date attributes by specifying the date format in the model's [cast declarations](/docs/{{version}}/eloquent-mutators#attribute-casting):"
msgstr ""

#: docs/10.x/eloquent-serialization.md:block 63 (code)
msgid ""
"protected $casts = [\n"
"    'birthday' => 'date:Y-m-d',\n"
"    'joined_at' => 'datetime:Y-m-d H:00',\n"
"];\n"
msgstr ""

#: docs/11.x/eloquent-serialization.md:block 63 (code)
msgid ""
"protected function casts(): array\n"
"{\n"
"    return [\n"
"        'birthday' => 'date:Y-m-d',\n"
"        'joined_at' => 'datetime:Y-m-d H:00',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Serializing Models & Collections](#serializing-models-and-collections)"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Serializing To Arrays](#serializing-to-arrays)"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Serializing To JSON](#serializing-to-json)"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 2 (unordered list)
msgid "[Appending Values To JSON](#appending-values-to-json)"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 6 (quote)
msgid "{tip} For an even more robust way of handling Eloquent model and collection JSON serialization, check out the documentation on [Eloquent API resources](/docs/{{version}}/eloquent-resources)."
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 8 (header)
msgid "Serializing Models & Collections"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 10 (header)
msgid "Serializing To Arrays"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 18 (header)
msgid "Serializing To JSON"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 30 (paragraph)
msgid "Sometimes you may wish to limit the attributes, such as passwords, that are included in your model's array or JSON representation. To do so, add a `$hidden` property to your model. In attributes that are listed in the `$hidden` property's array will not be included in the serialized representation of your model:"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 32 (quote)
msgid "{tip} To hide relationships, add the relationship's method name to your Eloquent model's `$hidden` property."
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 42 (header)
msgid "Appending Values To JSON"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 44 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Determine if the user is an administrator.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function getIsAdminAttribute()\n"
"    {\n"
"        return $this->attributes['admin'] === 'yes';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 45 (paragraph)
msgid "After creating the accessor, add the attribute name to the `appends` property of your model. Note that attribute names are typically referenced using their \"snake case\" serialized representation, even though the accessor's PHP method is defined using \"camel case\":"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 49 (header)
msgid "Appending At Run Time"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 55 (header)
msgid "Customizing The Default Date Format"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 57 (code)
msgid ""
"/**\n"
" * Prepare a date for array / JSON serialization.\n"
" *\n"
" * @param  \\DateTimeInterface  $date\n"
" * @return string\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date)\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-serialization.md:block 59 (header)
msgid "Customizing The Date Format Per Attribute"
msgstr ""

#: docs/9.x/eloquent-serialization.md:block 6 (quote)
msgid "**Note** For an even more robust way of handling Eloquent model and collection JSON serialization, check out the documentation on [Eloquent API resources](/docs/{{version}}/eloquent-resources)."
msgstr ""

#: docs/9.x/eloquent-serialization.md:block 32 (quote)
msgid "**Note** To hide relationships, add the relationship's method name to your Eloquent model's `$hidden` property."
msgstr ""

#: docs/9.x/eloquent-serialization.md:block 46 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Determine if the user is an administrator.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function isAdmin(): Attribute\n"
"    {\n"
"        return new Attribute(\n"
"            get: fn () => 'yes',\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""
