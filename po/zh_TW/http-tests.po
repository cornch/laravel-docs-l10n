msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/http-tests.pot\n"
"X-Crowdin-File-ID: 87\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 08:38\n"

# H1
#: ./docs/8.x/http-tests.md:1
#: ./docs/9.x/http-tests.md:1
#: ./docs/10.x/http-tests.md:1
#: ./docs/11.x/http-tests.md:1
#: ./docs/master/http-tests.md:1
msgid "HTTP Tests"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:3
#: ./docs/9.x/http-tests.md:3
#: ./docs/10.x/http-tests.md:3
#: ./docs/11.x/http-tests.md:3
#: ./docs/master/http-tests.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:4
#: ./docs/9.x/http-tests.md:4
#: ./docs/10.x/http-tests.md:4
#: ./docs/11.x/http-tests.md:4
#: ./docs/master/http-tests.md:4
msgid "[Making Requests](#making-requests)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:5
#: ./docs/9.x/http-tests.md:5
#: ./docs/10.x/http-tests.md:5
#: ./docs/11.x/http-tests.md:5
#: ./docs/master/http-tests.md:5
msgid "[Customizing Request Headers](#customizing-request-headers)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:6
#: ./docs/9.x/http-tests.md:6
#: ./docs/10.x/http-tests.md:6
#: ./docs/11.x/http-tests.md:6
#: ./docs/master/http-tests.md:6
msgid "[Cookies](#cookies)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:7
#: ./docs/9.x/http-tests.md:7
#: ./docs/10.x/http-tests.md:7
#: ./docs/11.x/http-tests.md:7
#: ./docs/master/http-tests.md:7
msgid "[Session / Authentication](#session-and-authentication)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:8
#: ./docs/9.x/http-tests.md:8
#: ./docs/10.x/http-tests.md:8
#: ./docs/11.x/http-tests.md:8
#: ./docs/master/http-tests.md:8
msgid "[Debugging Responses](#debugging-responses)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:9
#: ./docs/9.x/http-tests.md:9
#: ./docs/10.x/http-tests.md:9
#: ./docs/11.x/http-tests.md:9
#: ./docs/master/http-tests.md:9
msgid "[Exception Handling](#exception-handling)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:10
#: ./docs/9.x/http-tests.md:10
#: ./docs/10.x/http-tests.md:10
#: ./docs/11.x/http-tests.md:10
#: ./docs/master/http-tests.md:10
msgid "[Testing JSON APIs](#testing-json-apis)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:11
#: ./docs/9.x/http-tests.md:11
#: ./docs/10.x/http-tests.md:11
#: ./docs/11.x/http-tests.md:11
#: ./docs/master/http-tests.md:11
msgid "[Fluent JSON Testing](#fluent-json-testing)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:12
#: ./docs/9.x/http-tests.md:12
#: ./docs/10.x/http-tests.md:12
#: ./docs/11.x/http-tests.md:12
#: ./docs/master/http-tests.md:12
msgid "[Testing File Uploads](#testing-file-uploads)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:13
#: ./docs/9.x/http-tests.md:13
#: ./docs/10.x/http-tests.md:13
#: ./docs/11.x/http-tests.md:13
#: ./docs/master/http-tests.md:13
msgid "[Testing Views](#testing-views)"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:14
#: ./docs/11.x/http-tests.md:14
#: ./docs/master/http-tests.md:14
msgid "[Rendering Blade and Components](#rendering-blade-and-components)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:14
#: ./docs/9.x/http-tests.md:14
msgid "[Rendering Blade & Components](#rendering-blade-and-components)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:15
#: ./docs/9.x/http-tests.md:15
#: ./docs/10.x/http-tests.md:15
#: ./docs/11.x/http-tests.md:15
#: ./docs/master/http-tests.md:15
msgid "[Available Assertions](#available-assertions)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:16
#: ./docs/9.x/http-tests.md:16
#: ./docs/10.x/http-tests.md:16
#: ./docs/11.x/http-tests.md:16
#: ./docs/master/http-tests.md:16
msgid "[Response Assertions](#response-assertions)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:17
#: ./docs/9.x/http-tests.md:17
#: ./docs/10.x/http-tests.md:17
#: ./docs/11.x/http-tests.md:17
#: ./docs/master/http-tests.md:17
msgid "[Authentication Assertions](#authentication-assertions)"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:18
#: ./docs/10.x/http-tests.md:18
#: ./docs/11.x/http-tests.md:18
#: ./docs/master/http-tests.md:18
msgid "[Validation Assertions](#validation-assertions)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:19
#: ./docs/9.x/http-tests.md:20
#: ./docs/10.x/http-tests.md:20
#: ./docs/11.x/http-tests.md:20
#: ./docs/master/http-tests.md:20
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/http-tests.md:20
#: ./docs/9.x/http-tests.md:21
#: ./docs/10.x/http-tests.md:21
#: ./docs/11.x/http-tests.md:21
#: ./docs/master/http-tests.md:21
msgid "Introduction"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:22
#: ./docs/9.x/http-tests.md:23
#: ./docs/10.x/http-tests.md:23
#: ./docs/11.x/http-tests.md:23
#: ./docs/master/http-tests.md:23
msgid "Laravel provides a very fluent API for making HTTP requests to your application and examining the responses. For example, take a look at the feature test defined below:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:24
#: ./docs/8.x/http-tests.md:56
#: ./docs/9.x/http-tests.md:25
#: ./docs/9.x/http-tests.md:57
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_a_basic_request()\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->assertStatus(200);\n"
"    }\n"
"}"
msgstr ""

# CODE: php
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:25
#: ./docs/11.x/http-tests.md:35
#: ./docs/master/http-tests.md:35
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_the_application_returns_a_successful_response(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->assertStatus(200);\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:25
#: ./docs/master/http-tests.md:25
msgid "<?php\n\n"
"test('the application returns a successful response', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->assertStatus(200);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:47
#: ./docs/9.x/http-tests.md:48
#: ./docs/10.x/http-tests.md:46
#: ./docs/11.x/http-tests.md:56
#: ./docs/master/http-tests.md:56
msgid "The `get` method makes a `GET` request into the application, while the `assertStatus` method asserts that the returned response should have the given HTTP status code. In addition to this simple assertion, Laravel also contains a variety of assertions for inspecting the response headers, content, JSON structure, and more."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:49
#: ./docs/9.x/http-tests.md:50
#: ./docs/10.x/http-tests.md:48
#: ./docs/11.x/http-tests.md:58
#: ./docs/master/http-tests.md:58
#~ msgid "<a name=\"making-requests\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/http-tests.md:50
#: ./docs/9.x/http-tests.md:51
#: ./docs/10.x/http-tests.md:49
#: ./docs/11.x/http-tests.md:59
#: ./docs/master/http-tests.md:59
msgid "Making Requests"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:52
#: ./docs/9.x/http-tests.md:53
#: ./docs/10.x/http-tests.md:51
#: ./docs/11.x/http-tests.md:61
#: ./docs/master/http-tests.md:61
msgid "To make a request to your application, you may invoke the `get`, `post`, `put`, `patch`, or `delete` methods within your test. These methods do not actually issue a \"real\" HTTP request to your application. Instead, the entire network request is simulated internally."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:54
#: ./docs/9.x/http-tests.md:55
#: ./docs/10.x/http-tests.md:53
#: ./docs/11.x/http-tests.md:63
#: ./docs/master/http-tests.md:63
msgid "Instead of returning an `Illuminate\\Http\\Response` instance, test request methods return an instance of `Illuminate\\Testing\\TestResponse`, which provides a [variety of helpful assertions](#available-assertions) that allow you to inspect your application's responses:"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:55
#: ./docs/11.x/http-tests.md:75
#: ./docs/master/http-tests.md:75
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_a_basic_request(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->assertStatus(200);\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:65
#: ./docs/master/http-tests.md:65
msgid "<?php\n\n"
"test('basic request', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->assertStatus(200);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:79
#: ./docs/9.x/http-tests.md:80
#: ./docs/10.x/http-tests.md:74
#: ./docs/11.x/http-tests.md:96
#: ./docs/master/http-tests.md:96
msgid "In general, each of your tests should only make one request to your application. Unexpected behavior may occur if multiple requests are executed within a single test method."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:81
#: ./docs/9.x/http-tests.md:83
#: ./docs/10.x/http-tests.md:77
#: ./docs/11.x/http-tests.md:99
#: ./docs/master/http-tests.md:99
msgid "For convenience, the CSRF middleware is automatically disabled when running tests."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:83
#: ./docs/9.x/http-tests.md:85
#: ./docs/10.x/http-tests.md:79
#: ./docs/11.x/http-tests.md:101
#: ./docs/master/http-tests.md:101
#~ msgid "<a name=\"customizing-request-headers\"></a>"
#~ msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:84
#: ./docs/11.x/http-tests.md:118
#: ./docs/master/http-tests.md:118
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_interacting_with_headers(): void\n"
"    {\n"
"        $response = $this->withHeaders([\n"
"            'X-Header' => 'Value',\n"
"        ])->post('/user', ['name' => 'Sally']);\n\n"
"        $response->assertStatus(201);\n"
"    }\n"
"}"
msgstr ""

# H3
#: ./docs/8.x/http-tests.md:84
#: ./docs/9.x/http-tests.md:86
#: ./docs/10.x/http-tests.md:80
#: ./docs/11.x/http-tests.md:102
#: ./docs/master/http-tests.md:102
msgid "Customizing Request Headers"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:86
#: ./docs/9.x/http-tests.md:88
#: ./docs/10.x/http-tests.md:82
#: ./docs/11.x/http-tests.md:104
#: ./docs/master/http-tests.md:104
msgid "You may use the `withHeaders` method to customize the request's headers before it is sent to the application. This method allows you to add any custom headers you would like to the request:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:88
#: ./docs/9.x/http-tests.md:90
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_interacting_with_headers()\n"
"    {\n"
"        $response = $this->withHeaders([\n"
"            'X-Header' => 'Value',\n"
"        ])->post('/user', ['name' => 'Sally']);\n\n"
"        $response->assertStatus(201);\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:106
msgid "<?php\n\n"
"test('interacting with headers', function () {\n"
"    $response = $this->withHeaders([\n"
"        'X-Header' => 'Value',\n"
"    ])->post('/user', ['name' => 'Sally']);\n\n"
"    $response->assertStatus(201);\n"
"});"
msgstr ""

# CODE: php tab=Pest
#: ./docs/master/http-tests.md:106
msgid "<?php\n\n"
"tesst('interacting with headers', function () {\n"
"    $response = $this->withHeaders([\n"
"        'X-Header' => 'Value',\n"
"    ])->post('/user', ['name' => 'Sally']);\n\n"
"    $response->assertStatus(201);\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:110
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_cookies(): void\n"
"    {\n"
"        $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"        $response = $this->withCookies([\n"
"            'color' => 'blue',\n"
"            'name' => 'Taylor',\n"
"        ])->get('/');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:111
#: ./docs/9.x/http-tests.md:113
#: ./docs/10.x/http-tests.md:105
#: ./docs/11.x/http-tests.md:141
#: ./docs/master/http-tests.md:141
#~ msgid "<a name=\"cookies\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:112
#: ./docs/9.x/http-tests.md:114
#: ./docs/10.x/http-tests.md:106
#: ./docs/11.x/http-tests.md:142
#: ./docs/master/http-tests.md:142
msgid "Cookies"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:114
#: ./docs/9.x/http-tests.md:116
#: ./docs/10.x/http-tests.md:108
#: ./docs/11.x/http-tests.md:144
#: ./docs/master/http-tests.md:144
msgid "You may use the `withCookie` or `withCookies` methods to set cookie values before making a request. The `withCookie` method accepts a cookie name and value as its two arguments, while the `withCookies` method accepts an array of name / value pairs:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:116
#: ./docs/9.x/http-tests.md:118
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_cookies()\n"
"    {\n"
"        $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"        $response = $this->withCookies([\n"
"            'color' => 'blue',\n"
"            'name' => 'Taylor',\n"
"        ])->get('/');\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:134
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_the_session(): void\n"
"    {\n"
"        $response = $this->withSession(['banned' => false])->get('/');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:135
#: ./docs/9.x/http-tests.md:137
#: ./docs/10.x/http-tests.md:129
#: ./docs/11.x/http-tests.md:184
#: ./docs/master/http-tests.md:184
#~ msgid "<a name=\"session-and-authentication\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:136
#: ./docs/9.x/http-tests.md:138
#: ./docs/10.x/http-tests.md:130
#: ./docs/11.x/http-tests.md:185
#: ./docs/master/http-tests.md:185
msgid "Session / Authentication"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:138
#: ./docs/9.x/http-tests.md:140
#: ./docs/10.x/http-tests.md:132
#: ./docs/11.x/http-tests.md:187
#: ./docs/master/http-tests.md:187
msgid "Laravel provides several helpers for interacting with the session during HTTP testing. First, you may set the session data to a given array using the `withSession` method. This is useful for loading the session with data before issuing a request to your application:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:140
#: ./docs/9.x/http-tests.md:142
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_the_session()\n"
"    {\n"
"        $response = $this->withSession(['banned' => false])->get('/');\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:146
#: ./docs/master/http-tests.md:146
msgid "<?php\n\n"
"test('interacting with cookies', function () {\n"
"    $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"    $response = $this->withCookies([\n"
"        'color' => 'blue',\n"
"        'name' => 'Taylor',\n"
"    ])->get('/');\n\n"
"    //\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:150
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Models\\User;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_an_action_that_requires_authentication(): void\n"
"    {\n"
"        $user = User::factory()->create();\n\n"
"        $response = $this->actingAs($user)\n"
"                         ->withSession(['banned' => false])\n"
"                         ->get('/');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:154
msgid "Laravel's session is typically used to maintain state for the currently authenticated user. Therefore, the `actingAs` helper method provides a simple way to authenticate a given user as the current user. For example, we may use a [model factory](/docs/{{version}}/database-testing#writing-factories) to generate and authenticate a user:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:156
#: ./docs/9.x/http-tests.md:158
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Models\\User;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_an_action_that_requires_authentication()\n"
"    {\n"
"        $user = User::factory()->create();\n\n"
"        $response = $this->actingAs($user)\n"
"                         ->withSession(['banned' => false])\n"
"                         ->get('/');\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:156
#: ./docs/10.x/http-tests.md:148
#: ./docs/11.x/http-tests.md:217
#: ./docs/master/http-tests.md:217
msgid "Laravel's session is typically used to maintain state for the currently authenticated user. Therefore, the `actingAs` helper method provides a simple way to authenticate a given user as the current user. For example, we may use a [model factory](/docs/{{version}}/eloquent-factories) to generate and authenticate a user:"
msgstr ""

# CODE: php tab=PHPUnit
#: ./docs/11.x/http-tests.md:161
#: ./docs/master/http-tests.md:161
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_cookies(): void\n"
"    {\n"
"        $response = $this->withCookie('color', 'blue')->get('/');\n\n"
"        $response = $this->withCookies([\n"
"            'color' => 'blue',\n"
"            'name' => 'Taylor',\n"
"        ])->get('/');\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:175
msgid "You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the `actingAs` method:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:177
#: ./docs/9.x/http-tests.md:179
#: ./docs/10.x/http-tests.md:171
#: ./docs/11.x/http-tests.md:260
#: ./docs/master/http-tests.md:260
msgid "$this->actingAs($user, 'web')"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:177
#: ./docs/10.x/http-tests.md:169
#: ./docs/11.x/http-tests.md:258
#: ./docs/master/http-tests.md:258
msgid "You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the `actingAs` method. The guard that is provided to the `actingAs` method will also become the default guard for the duration of the test:"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:178
#: ./docs/11.x/http-tests.md:281
#: ./docs/master/http-tests.md:281
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_basic_test(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->dumpHeaders();\n\n"
"        $response->dumpSession();\n\n"
"        $response->dump();\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:179
#: ./docs/9.x/http-tests.md:181
#: ./docs/10.x/http-tests.md:173
#: ./docs/11.x/http-tests.md:262
#: ./docs/master/http-tests.md:262
#~ msgid "<a name=\"debugging-responses\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:180
#: ./docs/9.x/http-tests.md:182
#: ./docs/10.x/http-tests.md:174
#: ./docs/11.x/http-tests.md:263
#: ./docs/master/http-tests.md:263
msgid "Debugging Responses"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:182
#: ./docs/9.x/http-tests.md:184
#: ./docs/10.x/http-tests.md:176
#: ./docs/11.x/http-tests.md:265
#: ./docs/master/http-tests.md:265
msgid "After making a test request to your application, the `dump`, `dumpHeaders`, and `dumpSession` methods may be used to examine and debug the response contents:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:184
#: ./docs/9.x/http-tests.md:186
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->dumpHeaders();\n\n"
"        $response->dumpSession();\n\n"
"        $response->dump();\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:189
#: ./docs/master/http-tests.md:189
msgid "<?php\n\n"
"test('interacting with the session', function () {\n"
"    $response = $this->withSession(['banned' => false])->get('/');\n\n"
"    //\n"
"});"
msgstr ""

# CODE: php tab=PHPUnit
#: ./docs/11.x/http-tests.md:199
#: ./docs/master/http-tests.md:199
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_interacting_with_the_session(): void\n"
"    {\n"
"        $response = $this->withSession(['banned' => false])->get('/');\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:203
#: ./docs/11.x/http-tests.md:322
#: ./docs/master/http-tests.md:322
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_basic_test(): void\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->ddHeaders();\n\n"
"        $response->ddSession();\n\n"
"        $response->dd();\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:209
#: ./docs/9.x/http-tests.md:211
#: ./docs/10.x/http-tests.md:201
#: ./docs/11.x/http-tests.md:306
#: ./docs/master/http-tests.md:306
msgid "Alternatively, you may use the `dd`, `ddHeaders`, and `ddSession` methods to dump information about the response and then stop execution:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:211
#: ./docs/9.x/http-tests.md:213
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $response = $this->get('/');\n\n"
"        $response->ddHeaders();\n\n"
"        $response->ddSession();\n\n"
"        $response->dd();\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:219
#: ./docs/master/http-tests.md:219
msgid "<?php\n\n"
"use App\\Models\\User;\n\n"
"test('an action that requires authentication', function () {\n"
"    $user = User::factory()->create();\n\n"
"    $response = $this->actingAs($user)\n"
"                     ->withSession(['banned' => false])\n"
"                     ->get('/');\n\n"
"    //\n"
"});"
msgstr ""

# CODE: php tab=PHPUnit
#: ./docs/11.x/http-tests.md:235
#: ./docs/master/http-tests.md:235
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Models\\User;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_an_action_that_requires_authentication(): void\n"
"    {\n"
"        $user = User::factory()->create();\n\n"
"        $response = $this->actingAs($user)\n"
"                         ->withSession(['banned' => false])\n"
"                         ->get('/');\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:236
#: ./docs/9.x/http-tests.md:238
#: ./docs/10.x/http-tests.md:226
#: ./docs/11.x/http-tests.md:347
#: ./docs/master/http-tests.md:347
#~ msgid "<a name=\"exception-handling\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:237
#: ./docs/11.x/http-tests.md:420
#: ./docs/master/http-tests.md:358
msgid "The `assertThrows` method may be used to assert that code within a given closure throws an exception of the specified type:"
msgstr ""

# H3
#: ./docs/8.x/http-tests.md:237
#: ./docs/9.x/http-tests.md:239
#: ./docs/10.x/http-tests.md:227
#: ./docs/11.x/http-tests.md:348
#: ./docs/master/http-tests.md:348
msgid "Exception Handling"
msgstr ""

# CODE: php
#: ./docs/10.x/http-tests.md:239
#: ./docs/11.x/http-tests.md:422
#: ./docs/master/http-tests.md:360
msgid "$this->assertThrows(\n"
"    fn () => (new ProcessOrder)->execute(),\n"
"    OrderInvalid::class\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:239
#: ./docs/9.x/http-tests.md:241
#: ./docs/10.x/http-tests.md:229
#: ./docs/master/http-tests.md:350
msgid "Sometimes you may want to test that your application is throwing a specific exception. To ensure that the exception does not get caught by Laravel's exception handler and returned as an HTTP response, you may invoke the `withoutExceptionHandling` method before making your request:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:241
#: ./docs/9.x/http-tests.md:243
#: ./docs/10.x/http-tests.md:231
#: ./docs/11.x/http-tests.md:414
#: ./docs/master/http-tests.md:352
msgid "$response = $this->withoutExceptionHandling()->get('/');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:243
#: ./docs/9.x/http-tests.md:245
#: ./docs/10.x/http-tests.md:233
#: ./docs/11.x/http-tests.md:416
#: ./docs/master/http-tests.md:354
msgid "In addition, if you would like to ensure that your application is not utilizing features that have been deprecated by the PHP language or the libraries your application is using, you may invoke the `withoutDeprecationHandling` method before making your request. When deprecation handling is disabled, deprecation warnings will be converted to exceptions, thus causing your test to fail:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:245
#: ./docs/9.x/http-tests.md:247
#: ./docs/10.x/http-tests.md:235
#: ./docs/11.x/http-tests.md:418
#: ./docs/master/http-tests.md:356
msgid "$response = $this->withoutDeprecationHandling()->get('/');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:247
#: ./docs/9.x/http-tests.md:249
#: ./docs/10.x/http-tests.md:246
#: ./docs/11.x/http-tests.md:438
#: ./docs/master/http-tests.md:367
#~ msgid "<a name=\"testing-json-apis\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/http-tests.md:248
#: ./docs/9.x/http-tests.md:250
#: ./docs/10.x/http-tests.md:247
#: ./docs/11.x/http-tests.md:439
#: ./docs/master/http-tests.md:368
msgid "Testing JSON APIs"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:250
#: ./docs/9.x/http-tests.md:252
#: ./docs/10.x/http-tests.md:249
#: ./docs/11.x/http-tests.md:441
#: ./docs/master/http-tests.md:370
msgid "Laravel also provides several helpers for testing JSON APIs and their responses. For example, the `json`, `getJson`, `postJson`, `putJson`, `patchJson`, `deleteJson`, and `optionsJson` methods may be used to issue JSON requests with various HTTP verbs. You may also easily pass data and headers to these methods. To get started, let's write a test to make a `POST` request to `/api/user` and assert that the expected JSON data was returned:"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:251
#: ./docs/11.x/http-tests.md:457
#: ./docs/master/http-tests.md:386
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_making_an_api_request(): void\n"
"    {\n"
"        $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:252
#: ./docs/9.x/http-tests.md:254
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_making_an_api_request()\n"
"    {\n"
"        $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:267
#: ./docs/master/http-tests.md:267
msgid "<?php\n\n"
"test('basic test', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->dumpHeaders();\n\n"
"    $response->dumpSession();\n\n"
"    $response->dump();\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:277
#: ./docs/9.x/http-tests.md:279
#: ./docs/10.x/http-tests.md:274
#: ./docs/11.x/http-tests.md:482
#: ./docs/master/http-tests.md:411
msgid "In addition, JSON response data may be accessed as array variables on the response, making it convenient for you to inspect the individual values returned within a JSON response:"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/8.x/http-tests.md:279
#: ./docs/9.x/http-tests.md:281
#: ./docs/10.x/http-tests.md:276
#: ./docs/11.x/http-tests.md:488
#: ./docs/master/http-tests.md:417
msgid "$this->assertTrue($response['created']);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:281
#: ./docs/8.x/http-tests.md:763
#: ./docs/9.x/http-tests.md:284
#: ./docs/9.x/http-tests.md:784
#: ./docs/10.x/http-tests.md:279
#: ./docs/10.x/http-tests.md:827
#: ./docs/master/http-tests.md:422
#: ./docs/master/http-tests.md:1054
msgid "The `assertJson` method converts the response to an array and utilizes `PHPUnit::assertArraySubset` to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:283
#: ./docs/9.x/http-tests.md:286
#: ./docs/10.x/http-tests.md:281
#: ./docs/11.x/http-tests.md:495
#: ./docs/master/http-tests.md:424
#~ msgid "<a name=\"verifying-exact-match\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:284
#: ./docs/9.x/http-tests.md:287
#: ./docs/10.x/http-tests.md:282
#: ./docs/11.x/http-tests.md:496
#: ./docs/master/http-tests.md:425
msgid "Asserting Exact JSON Matches"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:286
#: ./docs/11.x/http-tests.md:515
#: ./docs/master/http-tests.md:444
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_asserting_an_exact_json_match(): void\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertExactJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:286
#: ./docs/9.x/http-tests.md:289
#: ./docs/10.x/http-tests.md:284
#: ./docs/11.x/http-tests.md:498
#: ./docs/master/http-tests.md:427
msgid "As previously mentioned, the `assertJson` method may be used to assert that a fragment of JSON exists within the JSON response. If you would like to verify that a given array **exactly matches** the JSON returned by your application, you should use the `assertExactJson` method:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:288
#: ./docs/9.x/http-tests.md:291
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_asserting_an_exact_json_match()\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertExactJson([\n"
"                'created' => true,\n"
"            ]);\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:308
#: ./docs/master/http-tests.md:308
msgid "<?php\n\n"
"test('basic test', function () {\n"
"    $response = $this->get('/');\n\n"
"    $response->ddHeaders();\n\n"
"    $response->ddSession();\n\n"
"    $response->dd();\n"
"});"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:310
#: ./docs/11.x/http-tests.md:541
#: ./docs/master/http-tests.md:470
msgid "Asserting on JSON Paths"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:313
#: ./docs/9.x/http-tests.md:316
#: ./docs/10.x/http-tests.md:309
#: ./docs/11.x/http-tests.md:540
#: ./docs/master/http-tests.md:469
#~ msgid "<a name=\"verifying-json-paths\"></a>"
#~ msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:314
#: ./docs/11.x/http-tests.md:557
#: ./docs/master/http-tests.md:486
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_asserting_a_json_paths_value(): void\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJsonPath('team.owner.name', 'Darian');\n"
"    }\n"
"}"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:314
#: ./docs/9.x/http-tests.md:317
msgid "Asserting On JSON Paths"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:316
#: ./docs/9.x/http-tests.md:319
#: ./docs/10.x/http-tests.md:312
#: ./docs/11.x/http-tests.md:543
#: ./docs/master/http-tests.md:472
msgid "If you would like to verify that the JSON response contains the given data at a specified path, you should use the `assertJsonPath` method:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:318
#: ./docs/9.x/http-tests.md:321
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_asserting_a_json_paths_value()\n"
"    {\n"
"        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"        $response\n"
"            ->assertStatus(201)\n"
"            ->assertJsonPath('team.owner.name', 'Darian');\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:337
#: ./docs/11.x/http-tests.md:582
#: ./docs/master/http-tests.md:511
msgid "$response->assertJsonPath('team.owner.name', fn (string $name) => strlen($name) >= 3);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:341
#: ./docs/9.x/http-tests.md:348
#: ./docs/10.x/http-tests.md:339
#: ./docs/11.x/http-tests.md:584
#: ./docs/master/http-tests.md:513
#~ msgid "<a name=\"fluent-json-testing\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:342
#: ./docs/9.x/http-tests.md:349
#: ./docs/10.x/http-tests.md:340
#: ./docs/11.x/http-tests.md:585
#: ./docs/master/http-tests.md:514
msgid "Fluent JSON Testing"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:344
#: ./docs/11.x/http-tests.md:607
#: ./docs/master/http-tests.md:536
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"/**\n"
" * A basic functional test example.\n"
" */\n"
"public function test_fluent_json(): void\n"
"{\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                 ->whereNot('status', 'pending')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"}"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:344
#: ./docs/9.x/http-tests.md:351
#: ./docs/10.x/http-tests.md:342
#: ./docs/11.x/http-tests.md:587
#: ./docs/master/http-tests.md:516
msgid "Laravel also offers a beautiful way to fluently test your application's JSON responses. To get started, pass a closure to the `assertJson` method. This closure will be invoked with an instance of `Illuminate\\Testing\\Fluent\\AssertableJson` which can be used to make assertions against the JSON that was returned by your application. The `where` method may be used to make assertions against a particular attribute of the JSON, while the `missing` method may be used to assert that a particular attribute is missing from the JSON:"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:344
#: ./docs/10.x/http-tests.md:335
#: ./docs/11.x/http-tests.md:580
#: ./docs/master/http-tests.md:509
msgid "The `assertJsonPath` method also accepts a closure, which may be used to dynamically determine if the assertion should pass:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:346
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"/**\n"
" * A basic functional test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_fluent_json()\n"
"{\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"}"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:346
msgid "$response->assertJsonPath('team.owner.name', fn ($name) => strlen($name) >= 3);"
msgstr ""

# P
#: ./docs/11.x/http-tests.md:350
msgid "Sometimes you may need to test that your application is throwing a specific exception. To accomplish this, you may \"fake\" the exception handler via the `Exceptions` facade. Once the exception handler has been faked, you may utilize the `assertReported` and `assertNotReported` methods to make assertions against exceptions that were thrown during the request:"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:352
msgid "<?php\n\n"
"use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Support\\Facades\\Exceptions;\n\n"
"test('exception is thrown', function () {\n"
"    Exceptions::fake();\n\n"
"    $response = $this->get('/order/1');\n\n"
"    // Assert an exception was thrown...\n"
"    Exceptions::assertReported(InvalidOrderException::class);\n\n"
"    // Assert against the exception...\n"
"    Exceptions::assertReported(function (InvalidOrderException $e) {\n"
"        return $e->getMessage() === 'The order was invalid.';\n"
"    });\n"
"});"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:353
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"/**\n"
" * A basic functional test example.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_fluent_json()\n"
"{\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                 ->whereNot('status', 'pending')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"}"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:364
#: ./docs/11.x/http-tests.md:629
#: ./docs/master/http-tests.md:558
msgid "Understanding the `etc` Method"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:366
#: ./docs/9.x/http-tests.md:375
msgid "Understanding The `etc` Method"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:368
#: ./docs/9.x/http-tests.md:377
#: ./docs/10.x/http-tests.md:366
#: ./docs/11.x/http-tests.md:631
#: ./docs/master/http-tests.md:560
msgid "In the example above, you may have noticed we invoked the `etc` method at the end of our assertion chain. This method informs Laravel that there may be other attributes present on the JSON object. If the `etc` method is not used, the test will fail if other attributes that you did not make assertions against exist on the JSON object."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:370
#: ./docs/9.x/http-tests.md:379
#: ./docs/10.x/http-tests.md:368
#: ./docs/11.x/http-tests.md:633
#: ./docs/master/http-tests.md:562
msgid "The intention behind this behavior is to protect you from unintentionally exposing sensitive information in your JSON responses by forcing you to either explicitly make an assertion against the attribute or explicitly allow additional attributes via the `etc` method."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:372
#: ./docs/9.x/http-tests.md:383
#: ./docs/10.x/http-tests.md:372
#: ./docs/11.x/http-tests.md:637
#: ./docs/master/http-tests.md:566
#~ msgid "<a name=\"asserting-json-attribute-presence-and-absence\"></a>"
#~ msgstr ""

# CODE: php tab=PHPUnit
#: ./docs/11.x/http-tests.md:373
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Support\\Facades\\Exceptions;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_exception_is_thrown(): void\n"
"    {\n"
"        Exceptions::fake();\n\n"
"        $response = $this->get('/');\n\n"
"        // Assert an exception was thrown...\n"
"        Exceptions::assertReported(InvalidOrderException::class);\n\n"
"        // Assert against the exception...\n"
"        Exceptions::assertReported(function (InvalidOrderException $e) {\n"
"            return $e->getMessage() === 'The order was invalid.';\n"
"        });\n"
"    }\n"
"}"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:373
#: ./docs/9.x/http-tests.md:384
#: ./docs/10.x/http-tests.md:373
#: ./docs/11.x/http-tests.md:638
#: ./docs/master/http-tests.md:567
msgid "Asserting Attribute Presence / Absence"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:375
#: ./docs/9.x/http-tests.md:386
#: ./docs/10.x/http-tests.md:375
#: ./docs/11.x/http-tests.md:640
#: ./docs/master/http-tests.md:569
msgid "To assert that an attribute is present or absent, you may use the `has` and `missing` methods:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:377
#: ./docs/9.x/http-tests.md:388
#: ./docs/10.x/http-tests.md:377
#: ./docs/11.x/http-tests.md:642
#: ./docs/master/http-tests.md:571
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->has('data')\n"
"         ->missing('message')\n"
");"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:381
#: ./docs/10.x/http-tests.md:370
#: ./docs/11.x/http-tests.md:635
#: ./docs/master/http-tests.md:564
msgid "However, you should be aware that not including the `etc` method in your assertion chain does not ensure that additional attributes are not being added to arrays that are nested within your JSON object. The `etc` method only ensures that no additional attributes exist at the nesting level in which the `etc` method is invoked."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:382
#: ./docs/9.x/http-tests.md:393
#: ./docs/10.x/http-tests.md:382
#: ./docs/11.x/http-tests.md:647
#: ./docs/master/http-tests.md:576
msgid "In addition, the `hasAll` and `missingAll` methods allow asserting the presence or absence of multiple attributes simultaneously:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:384
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->hasAll('status', 'data')\n"
"         ->missingAll('message', 'code')\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:389
#: ./docs/9.x/http-tests.md:400
#: ./docs/10.x/http-tests.md:389
#: ./docs/11.x/http-tests.md:654
#: ./docs/master/http-tests.md:583
msgid "You may use the `hasAny` method to determine if at least one of a given list of attributes is present:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:391
#: ./docs/9.x/http-tests.md:402
#: ./docs/10.x/http-tests.md:391
#: ./docs/11.x/http-tests.md:656
#: ./docs/master/http-tests.md:585
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->has('status')\n"
"         ->hasAny('data', 'message', 'code')\n"
");"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:395
#: ./docs/10.x/http-tests.md:384
#: ./docs/11.x/http-tests.md:649
#: ./docs/master/http-tests.md:578
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->hasAll(['status', 'data'])\n"
"         ->missingAll(['message', 'code'])\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:396
#: ./docs/9.x/http-tests.md:407
#: ./docs/10.x/http-tests.md:396
#: ./docs/11.x/http-tests.md:661
#: ./docs/master/http-tests.md:590
#~ msgid "<a name=\"asserting-against-json-collections\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:397
#: ./docs/9.x/http-tests.md:408
#: ./docs/10.x/http-tests.md:397
#: ./docs/11.x/http-tests.md:662
#: ./docs/master/http-tests.md:591
msgid "Asserting Against JSON Collections"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:399
#: ./docs/9.x/http-tests.md:410
#: ./docs/10.x/http-tests.md:399
#: ./docs/11.x/http-tests.md:664
#: ./docs/master/http-tests.md:593
msgid "Often, your route will return a JSON response that contains multiple items, such as multiple users:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:401
#: ./docs/9.x/http-tests.md:412
#: ./docs/10.x/http-tests.md:401
#: ./docs/11.x/http-tests.md:666
#: ./docs/master/http-tests.md:595
msgid "Route::get('/users', function () {\n"
"    return User::all();\n"
"});"
msgstr ""

# P
#: ./docs/11.x/http-tests.md:404
msgid "The `assertNotReported` and `assertNothingReported` methods may be used to assert that a given exception was not thrown during the request or that no exceptions were thrown:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:405
#: ./docs/9.x/http-tests.md:416
#: ./docs/10.x/http-tests.md:405
#: ./docs/11.x/http-tests.md:670
#: ./docs/master/http-tests.md:599
msgid "In these situations, we may use the fluent JSON object's `has` method to make assertions against the users included in the response. For example, let's assert that the JSON response contains three users. Next, we'll make some assertions about the first user in the collection using the `first` method. The `first` method accepts a closure which receives another assertable JSON string that we can use to make assertions about the first object in the JSON collection:"
msgstr ""

# CODE: php
#: ./docs/11.x/http-tests.md:406
msgid "Exceptions::assertNotReported(InvalidOrderException::class);\n\n"
"Exceptions::assertNothingReported();"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:407
#: ./docs/11.x/http-tests.md:672
#: ./docs/master/http-tests.md:601
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has(3)\n"
"             ->first(fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:407
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has(3)\n"
"             ->first(fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# P
#: ./docs/11.x/http-tests.md:412
msgid "You may totally disable exception handling for a given request by invoking the `withoutExceptionHandling` method before making your request:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:418
#: ./docs/9.x/http-tests.md:430
#: ./docs/10.x/http-tests.md:419
#: ./docs/11.x/http-tests.md:684
#: ./docs/master/http-tests.md:613
#~ msgid "<a name=\"scoping-json-collection-assertions\"></a>"
#~ msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:418
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has(3)\n"
"             ->first(fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:419
#: ./docs/9.x/http-tests.md:431
#: ./docs/10.x/http-tests.md:420
#: ./docs/11.x/http-tests.md:685
#: ./docs/master/http-tests.md:614
msgid "Scoping JSON Collection Assertions"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:421
#: ./docs/9.x/http-tests.md:433
#: ./docs/10.x/http-tests.md:422
#: ./docs/11.x/http-tests.md:687
#: ./docs/master/http-tests.md:616
msgid "Sometimes, your application's routes will return JSON collections that are assigned named keys:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:423
#: ./docs/9.x/http-tests.md:435
#: ./docs/10.x/http-tests.md:424
#: ./docs/11.x/http-tests.md:689
#: ./docs/master/http-tests.md:618
msgid "Route::get('/users', function () {\n"
"    return [\n"
"        'meta' => [...],\n"
"        'users' => User::all(),\n"
"    ];\n"
"})"
msgstr ""

# P
#: ./docs/11.x/http-tests.md:429
msgid "If you would like to inspect and make assertions against the exception that is thrown, you may provide a closure as the second argument to the `assertThrows` method:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:430
#: ./docs/9.x/http-tests.md:442
#: ./docs/10.x/http-tests.md:431
#: ./docs/11.x/http-tests.md:696
#: ./docs/master/http-tests.md:625
msgid "When testing these routes, you may use the `has` method to assert against the number of items in the collection. In addition, you may use the `has` method to scope a chain of assertions:"
msgstr ""

# CODE: php
#: ./docs/11.x/http-tests.md:431
msgid "$this->assertThrows(\n"
"    fn () => (new ProcessOrder)->execute(),\n"
"    fn (OrderInvalid $e) => $e->orderId() === 123;\n"
");"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:432
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3)\n"
"             ->has('users.0', fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:433
#: ./docs/11.x/http-tests.md:698
#: ./docs/master/http-tests.md:627
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3)\n"
"             ->has('users.0', fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:443
#: ./docs/master/http-tests.md:372
msgid "<?php\n\n"
"test('making an api request', function () {\n"
"    $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n"
"    $response\n"
"        ->assertStatus(201)\n"
"        ->assertJson([\n"
"            'created' => true,\n"
"         ]);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:444
#: ./docs/9.x/http-tests.md:457
#: ./docs/10.x/http-tests.md:446
#: ./docs/11.x/http-tests.md:711
#: ./docs/master/http-tests.md:640
msgid "However, instead of making two separate calls to the `has` method to assert against the `users` collection, you may make a single call which provides a closure as its third parameter. When doing so, the closure will automatically be invoked and scoped to the first item in the collection:"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:444
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3)\n"
"             ->has('users.0', fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:446
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3, fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:448
#: ./docs/11.x/http-tests.md:713
#: ./docs/master/http-tests.md:642
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3, fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:457
#: ./docs/9.x/http-tests.md:471
#: ./docs/10.x/http-tests.md:460
#: ./docs/11.x/http-tests.md:725
#: ./docs/master/http-tests.md:654
#~ msgid "<a name=\"asserting-json-types\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:458
#: ./docs/9.x/http-tests.md:472
#: ./docs/10.x/http-tests.md:461
#: ./docs/11.x/http-tests.md:726
#: ./docs/master/http-tests.md:655
msgid "Asserting JSON Types"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:459
msgid "$response\n"
"    ->assertJson(fn (AssertableJson $json) =>\n"
"        $json->has('meta')\n"
"             ->has('users', 3, fn ($json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->where('email', fn ($email) => str($email)->is('victoria@gmail.com'))\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"             )\n"
"    );"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:460
#: ./docs/9.x/http-tests.md:474
#: ./docs/10.x/http-tests.md:463
#: ./docs/11.x/http-tests.md:728
#: ./docs/master/http-tests.md:657
msgid "You may only want to assert that the properties in the JSON response are of a certain type. The `Illuminate\\Testing\\Fluent\\AssertableJson` class provides the `whereType` and `whereAllType` methods for doing just that:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:462
#: ./docs/9.x/http-tests.md:476
#: ./docs/10.x/http-tests.md:465
#: ./docs/11.x/http-tests.md:730
#: ./docs/master/http-tests.md:659
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->whereType('id', 'integer')\n"
"         ->whereAllType([\n"
"            'users.0.name' => 'string',\n"
"            'meta' => 'array'\n"
"        ])\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:470
#: ./docs/9.x/http-tests.md:484
#: ./docs/10.x/http-tests.md:473
#: ./docs/11.x/http-tests.md:738
#: ./docs/master/http-tests.md:667
msgid "You may specify multiple types using the `|` character, or passing an array of types as the second parameter to the `whereType` method. The assertion will be successful if the response value is any of the listed types:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:472
#: ./docs/9.x/http-tests.md:486
#: ./docs/10.x/http-tests.md:475
#: ./docs/11.x/http-tests.md:740
#: ./docs/master/http-tests.md:669
msgid "$response->assertJson(fn (AssertableJson $json) =>\n"
"    $json->whereType('name', 'string|null')\n"
"         ->whereType('id', ['string', 'integer'])\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:477
#: ./docs/9.x/http-tests.md:491
#: ./docs/10.x/http-tests.md:480
#: ./docs/11.x/http-tests.md:745
#: ./docs/master/http-tests.md:674
msgid "The `whereType` and `whereAllType` methods recognize the following types: `string`, `integer`, `double`, `boolean`, `array`, and `null`."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:479
#: ./docs/9.x/http-tests.md:493
#: ./docs/10.x/http-tests.md:482
#: ./docs/11.x/http-tests.md:747
#: ./docs/master/http-tests.md:676
#~ msgid "<a name=\"testing-file-uploads\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/http-tests.md:480
#: ./docs/9.x/http-tests.md:494
#: ./docs/10.x/http-tests.md:483
#: ./docs/11.x/http-tests.md:748
#: ./docs/master/http-tests.md:677
msgid "Testing File Uploads"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:482
#: ./docs/9.x/http-tests.md:496
#: ./docs/10.x/http-tests.md:485
#: ./docs/11.x/http-tests.md:750
#: ./docs/master/http-tests.md:679
msgid "The `Illuminate\\Http\\UploadedFile` class provides a `fake` method which may be used to generate dummy files or images for testing. This, combined with the `Storage` facade's `fake` method, greatly simplifies the testing of file uploads. For example, you may combine these two features to easily test an avatar upload form:"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:484
#: ./docs/master/http-tests.md:413
msgid "expect($response['created'])->toBeTrue();"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:484
#: ./docs/9.x/http-tests.md:498
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_avatars_can_be_uploaded()\n"
"    {\n"
"        Storage::fake('avatars');\n\n"
"        $file = UploadedFile::fake()->image('avatar.jpg');\n\n"
"        $response = $this->post('/avatar', [\n"
"            'avatar' => $file,\n"
"        ]);\n\n"
"        Storage::disk('avatars')->assertExists($file->hashName());\n"
"    }\n"
"}"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:487
#: ./docs/11.x/http-tests.md:771
#: ./docs/master/http-tests.md:700
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_avatars_can_be_uploaded(): void\n"
"    {\n"
"        Storage::fake('avatars');\n\n"
"        $file = UploadedFile::fake()->image('avatar.jpg');\n\n"
"        $response = $this->post('/avatar', [\n"
"            'avatar' => $file,\n"
"        ]);\n\n"
"        Storage::disk('avatars')->assertExists($file->hashName());\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/11.x/http-tests.md:493
#: ./docs/11.x/http-tests.md:1135
msgid "The `assertJson` method converts the response to an array to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present."
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:500
#: ./docs/master/http-tests.md:429
msgid "<?php\n\n"
"test('asserting an exact json match', function () {\n"
"    $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"    $response\n"
"        ->assertStatus(201)\n"
"        ->assertExactJson([\n"
"            'created' => true,\n"
"        ]);\n"
"});\n"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:510
#: ./docs/9.x/http-tests.md:524
#: ./docs/10.x/http-tests.md:511
#: ./docs/11.x/http-tests.md:797
#: ./docs/master/http-tests.md:726
msgid "If you would like to assert that a given file does not exist, you may use the `assertMissing` method provided by the `Storage` facade:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:512
#: ./docs/9.x/http-tests.md:526
#: ./docs/10.x/http-tests.md:513
#: ./docs/11.x/http-tests.md:799
#: ./docs/master/http-tests.md:728
msgid "Storage::fake('avatars');\n\n"
"// ...\n\n"
"Storage::disk('avatars')->assertMissing('missing.jpg');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:518
#: ./docs/9.x/http-tests.md:532
#: ./docs/10.x/http-tests.md:519
#: ./docs/11.x/http-tests.md:805
#: ./docs/master/http-tests.md:734
#~ msgid "<a name=\"fake-file-customization\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:519
#: ./docs/9.x/http-tests.md:533
#: ./docs/10.x/http-tests.md:520
#: ./docs/11.x/http-tests.md:806
#: ./docs/master/http-tests.md:735
msgid "Fake File Customization"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:521
#: ./docs/9.x/http-tests.md:535
#: ./docs/10.x/http-tests.md:522
#: ./docs/11.x/http-tests.md:808
#: ./docs/master/http-tests.md:737
msgid "When creating files using the `fake` method provided by the `UploadedFile` class, you may specify the width, height, and size of the image (in kilobytes) in order to better test your application's validation rules:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:523
#: ./docs/9.x/http-tests.md:537
#: ./docs/10.x/http-tests.md:524
#: ./docs/11.x/http-tests.md:810
#: ./docs/master/http-tests.md:739
msgid "UploadedFile::fake()->image('avatar.jpg', $width, $height)->size(100);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:525
#: ./docs/9.x/http-tests.md:539
#: ./docs/10.x/http-tests.md:526
#: ./docs/11.x/http-tests.md:812
#: ./docs/master/http-tests.md:741
msgid "In addition to creating images, you may create files of any other type using the `create` method:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:527
#: ./docs/9.x/http-tests.md:541
#: ./docs/10.x/http-tests.md:528
#: ./docs/11.x/http-tests.md:814
#: ./docs/master/http-tests.md:743
msgid "UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:529
#: ./docs/9.x/http-tests.md:543
#: ./docs/10.x/http-tests.md:530
#: ./docs/11.x/http-tests.md:816
#: ./docs/master/http-tests.md:745
msgid "If needed, you may pass a `$mimeType` argument to the method to explicitly define the MIME type that should be returned by the file:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:531
#: ./docs/9.x/http-tests.md:545
#: ./docs/10.x/http-tests.md:532
#: ./docs/11.x/http-tests.md:818
#: ./docs/master/http-tests.md:747
msgid "UploadedFile::fake()->create(\n"
"    'document.pdf', $sizeInKilobytes, 'application/pdf'\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:535
#: ./docs/9.x/http-tests.md:549
#: ./docs/10.x/http-tests.md:536
#: ./docs/11.x/http-tests.md:822
#: ./docs/master/http-tests.md:751
#~ msgid "<a name=\"testing-views\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/http-tests.md:536
#: ./docs/9.x/http-tests.md:550
#: ./docs/10.x/http-tests.md:537
#: ./docs/11.x/http-tests.md:823
#: ./docs/master/http-tests.md:752
msgid "Testing Views"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:538
#: ./docs/9.x/http-tests.md:552
#: ./docs/10.x/http-tests.md:539
#: ./docs/11.x/http-tests.md:825
#: ./docs/master/http-tests.md:754
msgid "Laravel also allows you to render a view without making a simulated HTTP request to the application. To accomplish this, you may call the `view` method within your test. The `view` method accepts the view name and an optional array of data. The method returns an instance of `Illuminate\\Testing\\TestView`, which offers several methods to conveniently make assertions about the view's contents:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:540
#: ./docs/9.x/http-tests.md:554
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_a_welcome_view_can_be_rendered()\n"
"    {\n"
"        $view = $this->view('welcome', ['name' => 'Taylor']);\n\n"
"        $view->assertSee('Taylor');\n"
"    }\n"
"}"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/10.x/http-tests.md:541
#: ./docs/11.x/http-tests.md:837
#: ./docs/master/http-tests.md:766
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_a_welcome_view_can_be_rendered(): void\n"
"    {\n"
"        $view = $this->view('welcome', ['name' => 'Taylor']);\n\n"
"        $view->assertSee('Taylor');\n"
"    }\n"
"}"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:545
#: ./docs/master/http-tests.md:474
msgid "<?php\n\n"
"test('asserting a json path value', function () {\n"
"    $response = $this->postJson('/user', ['name' => 'Sally']);\n\n"
"    $response\n"
"        ->assertStatus(201)\n"
"        ->assertJsonPath('team.owner.name', 'Darian');\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:556
#: ./docs/9.x/http-tests.md:570
#: ./docs/10.x/http-tests.md:557
#: ./docs/11.x/http-tests.md:855
#: ./docs/master/http-tests.md:784
msgid "The `TestView` class provides the following assertion methods: `assertSee`, `assertSeeInOrder`, `assertSeeText`, `assertSeeTextInOrder`, `assertDontSee`, and `assertDontSeeText`."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:558
#: ./docs/9.x/http-tests.md:572
#: ./docs/10.x/http-tests.md:559
#: ./docs/11.x/http-tests.md:857
#: ./docs/master/http-tests.md:786
msgid "If needed, you may get the raw, rendered view contents by casting the `TestView` instance to a string:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:560
#: ./docs/9.x/http-tests.md:574
#: ./docs/10.x/http-tests.md:561
#: ./docs/11.x/http-tests.md:859
#: ./docs/master/http-tests.md:788
msgid "$contents = (string) $this->view('welcome');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:562
#: ./docs/9.x/http-tests.md:576
#: ./docs/10.x/http-tests.md:563
#: ./docs/11.x/http-tests.md:861
#: ./docs/master/http-tests.md:790
#~ msgid "<a name=\"sharing-errors\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:563
#: ./docs/9.x/http-tests.md:577
#: ./docs/10.x/http-tests.md:564
#: ./docs/11.x/http-tests.md:862
#: ./docs/master/http-tests.md:791
msgid "Sharing Errors"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:565
#: ./docs/9.x/http-tests.md:579
#: ./docs/10.x/http-tests.md:566
#: ./docs/11.x/http-tests.md:864
#: ./docs/master/http-tests.md:793
msgid "Some views may depend on errors shared in the [global error bag provided by Laravel](/docs/{{version}}/validation#quick-displaying-the-validation-errors). To hydrate the error bag with error messages, you may use the `withViewErrors` method:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:567
#: ./docs/9.x/http-tests.md:581
#: ./docs/10.x/http-tests.md:568
#: ./docs/11.x/http-tests.md:866
#: ./docs/master/http-tests.md:795
msgid "$view = $this->withViewErrors([\n"
"    'name' => ['Please provide a valid name.']\n"
"])->view('form');\n\n"
"$view->assertSee('Please provide a valid name.');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:573
#: ./docs/9.x/http-tests.md:587
#: ./docs/10.x/http-tests.md:574
#: ./docs/11.x/http-tests.md:872
#: ./docs/master/http-tests.md:801
#~ msgid "<a name=\"rendering-blade-and-components\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:574
#: ./docs/9.x/http-tests.md:588
msgid "Rendering Blade & Components"
msgstr ""

# H3
#: ./docs/10.x/http-tests.md:575
#: ./docs/11.x/http-tests.md:873
#: ./docs/master/http-tests.md:802
msgid "Rendering Blade and Components"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:576
#: ./docs/9.x/http-tests.md:590
#: ./docs/10.x/http-tests.md:577
#: ./docs/11.x/http-tests.md:875
#: ./docs/master/http-tests.md:804
msgid "If necessary, you may use the `blade` method to evaluate and render a raw [Blade](/docs/{{version}}/blade) string. Like the `view` method, the `blade` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:578
#: ./docs/9.x/http-tests.md:592
#: ./docs/10.x/http-tests.md:579
#: ./docs/11.x/http-tests.md:877
#: ./docs/master/http-tests.md:806
msgid "$view = $this->blade(\n"
"    '<x-component :name=\"$name\" />',\n"
"    ['name' => 'Taylor']\n"
");\n\n"
"$view->assertSee('Taylor');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:585
msgid "You may use the `component` method to evaluate and render a [Blade component](/docs/{{version}}/blade#components). Like the `view` method, the `component` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:587
#: ./docs/9.x/http-tests.md:601
#: ./docs/10.x/http-tests.md:588
#: ./docs/11.x/http-tests.md:886
#: ./docs/master/http-tests.md:815
msgid "$view = $this->component(Profile::class, ['name' => 'Taylor']);\n\n"
"$view->assertSee('Taylor');"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:589
#: ./docs/master/http-tests.md:518
msgid "use Illuminate\\Testing\\Fluent\\AssertableJson;\n\n"
"test('fluent json', function () {\n"
"    $response = $this->getJson('/users/1');\n\n"
"    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->where('id', 1)\n"
"                 ->where('name', 'Victoria Faith')\n"
"                 ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n"
"                 ->whereNot('status', 'pending')\n"
"                 ->missing('password')\n"
"                 ->etc()\n"
"        );\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:591
#: ./docs/9.x/http-tests.md:605
#: ./docs/10.x/http-tests.md:592
#: ./docs/11.x/http-tests.md:890
#: ./docs/master/http-tests.md:819
#~ msgid "<a name=\"available-assertions\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/http-tests.md:592
#: ./docs/9.x/http-tests.md:606
#: ./docs/10.x/http-tests.md:593
#: ./docs/11.x/http-tests.md:891
#: ./docs/master/http-tests.md:820
msgid "Available Assertions"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:594
#: ./docs/9.x/http-tests.md:608
#: ./docs/10.x/http-tests.md:595
#: ./docs/11.x/http-tests.md:893
#: ./docs/master/http-tests.md:822
#~ msgid "<a name=\"response-assertions\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:595
#: ./docs/9.x/http-tests.md:609
#: ./docs/10.x/http-tests.md:596
#: ./docs/11.x/http-tests.md:894
#: ./docs/master/http-tests.md:823
msgid "Response Assertions"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:597
#: ./docs/9.x/http-tests.md:611
#: ./docs/10.x/http-tests.md:598
#: ./docs/11.x/http-tests.md:896
#: ./docs/master/http-tests.md:825
msgid "Laravel's `Illuminate\\Testing\\TestResponse` class provides a variety of custom assertion methods that you may utilize when testing your application. These assertions may be accessed on the response that is returned by the `json`, `get`, `post`, `put`, and `delete` test methods:"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:599
#: ./docs/10.x/http-tests.md:586
#: ./docs/11.x/http-tests.md:884
#: ./docs/master/http-tests.md:813
msgid "You may use the `component` method to evaluate and render a [Blade component](/docs/{{version}}/blade#components). The `component` method returns an instance of `Illuminate\\Testing\\TestComponent`:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:612
msgid "[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertSimilarJson](#assert-similar-json)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:615
#: ./docs/master/http-tests.md:842
msgid "[assertAccepted](#assert-accepted)\n"
"[assertBadRequest](#assert-bad-request)\n"
"[assertConflict](#assert-conflict)\n"
"[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertFound](#assert-found)\n"
"[assertGone](#assert-gone)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertInternalServerError](#assert-internal-server-error)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonIsArray](#assert-json-is-array)\n"
"[assertJsonIsObject](#assert-json-is-object)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonMissingPath](#assert-json-missing-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertMethodNotAllowed](#assert-method-not-allowed)\n"
"[assertMovedPermanently](#assert-moved-permanently)\n"
"[assertContent](#assert-content)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertStreamedContent](#assert-streamed-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPaymentRequired](#assert-payment-required)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToRoute](#assert-redirect-to-route)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertRequestTimeout](#assert-request-timeout)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertServerError](#assert-server-error)\n"
"[assertServiceUnavailable](#assert-server-unavailable)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertTooManyRequests](#assert-too-many-requests)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertUnsupportedMediaType](#assert-unsupported-media-type)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:628
msgid "[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonIsArray](#assert-json-is-array)\n"
"[assertJsonIsObject](#assert-json-is-object)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonMissingPath](#assert-json-missing-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertContent](#assert-content)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertStreamedContent](#assert-streamed-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToRoute](#assert-redirect-to-route)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:668
#: ./docs/9.x/http-tests.md:689
#: ./docs/10.x/http-tests.md:711
#: ./docs/11.x/http-tests.md:1010
#: ./docs/master/http-tests.md:938
#~ msgid "<a name=\"assert-cookie\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:669
#: ./docs/9.x/http-tests.md:690
#: ./docs/10.x/http-tests.md:712
#: ./docs/11.x/http-tests.md:1011
#: ./docs/master/http-tests.md:939
msgid "assertCookie"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:671
#: ./docs/9.x/http-tests.md:692
#: ./docs/10.x/http-tests.md:714
#: ./docs/11.x/http-tests.md:1013
#: ./docs/master/http-tests.md:941
msgid "Assert that the response contains the given cookie:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:673
#: ./docs/9.x/http-tests.md:694
#: ./docs/10.x/http-tests.md:716
#: ./docs/11.x/http-tests.md:1015
#: ./docs/master/http-tests.md:943
msgid "$response->assertCookie($cookieName, $value = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:675
#: ./docs/9.x/http-tests.md:696
#: ./docs/10.x/http-tests.md:718
#: ./docs/11.x/http-tests.md:1017
#: ./docs/master/http-tests.md:945
#~ msgid "<a name=\"assert-cookie-expired\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:676
#: ./docs/9.x/http-tests.md:697
#: ./docs/10.x/http-tests.md:719
#: ./docs/11.x/http-tests.md:1018
#: ./docs/master/http-tests.md:946
msgid "assertCookieExpired"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:678
#: ./docs/9.x/http-tests.md:699
#: ./docs/10.x/http-tests.md:721
#: ./docs/11.x/http-tests.md:1020
#: ./docs/master/http-tests.md:948
msgid "Assert that the response contains the given cookie and it is expired:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:680
#: ./docs/9.x/http-tests.md:701
#: ./docs/10.x/http-tests.md:723
#: ./docs/11.x/http-tests.md:1022
#: ./docs/master/http-tests.md:950
msgid "$response->assertCookieExpired($cookieName);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:682
#: ./docs/9.x/http-tests.md:703
#: ./docs/10.x/http-tests.md:725
#: ./docs/11.x/http-tests.md:1024
#: ./docs/master/http-tests.md:952
#~ msgid "<a name=\"assert-cookie-not-expired\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:683
#: ./docs/9.x/http-tests.md:704
#: ./docs/10.x/http-tests.md:726
#: ./docs/11.x/http-tests.md:1025
#: ./docs/master/http-tests.md:953
msgid "assertCookieNotExpired"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:685
#: ./docs/9.x/http-tests.md:706
#: ./docs/10.x/http-tests.md:728
#: ./docs/11.x/http-tests.md:1027
#: ./docs/master/http-tests.md:955
msgid "Assert that the response contains the given cookie and it is not expired:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:687
#: ./docs/9.x/http-tests.md:708
#: ./docs/10.x/http-tests.md:730
#: ./docs/11.x/http-tests.md:1029
#: ./docs/master/http-tests.md:957
msgid "$response->assertCookieNotExpired($cookieName);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:689
#: ./docs/9.x/http-tests.md:710
#: ./docs/10.x/http-tests.md:732
#: ./docs/11.x/http-tests.md:1031
#: ./docs/master/http-tests.md:959
#~ msgid "<a name=\"assert-cookie-missing\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:690
#: ./docs/11.x/http-tests.md:989
#: ./docs/master/http-tests.md:917
#~ msgid "<a name=\"assert-bad-request\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:690
#: ./docs/9.x/http-tests.md:711
#: ./docs/10.x/http-tests.md:733
#: ./docs/11.x/http-tests.md:1032
#: ./docs/master/http-tests.md:960
msgid "assertCookieMissing"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:691
#: ./docs/11.x/http-tests.md:990
#: ./docs/master/http-tests.md:918
msgid "assertBadRequest"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:692
msgid "Assert that the response does not contains the given cookie:"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:693
#: ./docs/11.x/http-tests.md:992
#: ./docs/master/http-tests.md:920
msgid "Assert that the response has a bad request (400) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:694
#: ./docs/9.x/http-tests.md:715
#: ./docs/10.x/http-tests.md:737
#: ./docs/11.x/http-tests.md:1036
#: ./docs/master/http-tests.md:964
msgid "$response->assertCookieMissing($cookieName);"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:695
#: ./docs/11.x/http-tests.md:994
#: ./docs/master/http-tests.md:922
msgid "$response->assertBadRequest();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:696
#: ./docs/9.x/http-tests.md:717
#: ./docs/10.x/http-tests.md:739
#: ./docs/11.x/http-tests.md:1038
#: ./docs/master/http-tests.md:966
#~ msgid "<a name=\"assert-created\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:697
#: ./docs/11.x/http-tests.md:996
#: ./docs/master/http-tests.md:924
#~ msgid "<a name=\"assert-accepted\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:697
#: ./docs/9.x/http-tests.md:718
#: ./docs/10.x/http-tests.md:740
#: ./docs/11.x/http-tests.md:1039
#: ./docs/master/http-tests.md:967
msgid "assertCreated"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:698
#: ./docs/11.x/http-tests.md:997
#: ./docs/master/http-tests.md:925
msgid "assertAccepted"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:699
#: ./docs/9.x/http-tests.md:720
#: ./docs/10.x/http-tests.md:742
#: ./docs/11.x/http-tests.md:1041
#: ./docs/master/http-tests.md:969
msgid "Assert that the response has a 201 HTTP status code:"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:700
#: ./docs/11.x/http-tests.md:999
#: ./docs/master/http-tests.md:927
msgid "Assert that the response has an accepted (202) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:701
#: ./docs/9.x/http-tests.md:722
#: ./docs/10.x/http-tests.md:744
#: ./docs/11.x/http-tests.md:1043
#: ./docs/master/http-tests.md:971
msgid "$response->assertCreated();"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:702
#: ./docs/11.x/http-tests.md:1001
#: ./docs/master/http-tests.md:929
msgid "$response->assertAccepted();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:703
#: ./docs/9.x/http-tests.md:724
#: ./docs/10.x/http-tests.md:746
#: ./docs/11.x/http-tests.md:1045
#: ./docs/master/http-tests.md:973
#~ msgid "<a name=\"assert-dont-see\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:704
#: ./docs/11.x/http-tests.md:1003
#: ./docs/master/http-tests.md:931
#~ msgid "<a name=\"assert-conflict\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:704
#: ./docs/9.x/http-tests.md:725
#: ./docs/10.x/http-tests.md:747
#: ./docs/11.x/http-tests.md:1046
#: ./docs/master/http-tests.md:974
msgid "assertDontSee"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:705
#: ./docs/11.x/http-tests.md:1004
#: ./docs/master/http-tests.md:932
msgid "assertConflict"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:706
#: ./docs/9.x/http-tests.md:727
#: ./docs/10.x/http-tests.md:749
#: ./docs/11.x/http-tests.md:1048
#: ./docs/master/http-tests.md:976
msgid "Assert that the given string is not contained within the response returned by the application. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:707
#: ./docs/11.x/http-tests.md:1006
#: ./docs/master/http-tests.md:934
msgid "Assert that the response has a conflict (409) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:708
#: ./docs/9.x/http-tests.md:729
#: ./docs/10.x/http-tests.md:751
#: ./docs/11.x/http-tests.md:1050
#: ./docs/master/http-tests.md:978
msgid "$response->assertDontSee($value, $escaped = true);"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:709
#: ./docs/11.x/http-tests.md:1008
#: ./docs/master/http-tests.md:936
msgid "$response->assertConflict();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:710
#: ./docs/9.x/http-tests.md:731
#: ./docs/10.x/http-tests.md:753
#: ./docs/11.x/http-tests.md:1052
#: ./docs/master/http-tests.md:980
#~ msgid "<a name=\"assert-dont-see-text\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:711
#: ./docs/9.x/http-tests.md:732
#: ./docs/10.x/http-tests.md:754
#: ./docs/11.x/http-tests.md:1053
#: ./docs/master/http-tests.md:981
msgid "assertDontSeeText"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:713
#: ./docs/9.x/http-tests.md:734
#: ./docs/10.x/http-tests.md:756
#: ./docs/11.x/http-tests.md:1055
#: ./docs/master/http-tests.md:983
msgid "Assert that the given string is not contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. This method will pass the response content to the `strip_tags` PHP function before making the assertion:"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:713
#: ./docs/10.x/http-tests.md:735
#: ./docs/11.x/http-tests.md:1034
#: ./docs/master/http-tests.md:962
msgid "Assert that the response does not contain the given cookie:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:715
#: ./docs/9.x/http-tests.md:736
#: ./docs/10.x/http-tests.md:758
#: ./docs/11.x/http-tests.md:1057
#: ./docs/master/http-tests.md:985
msgid "$response->assertDontSeeText($value, $escaped = true);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:717
#: ./docs/9.x/http-tests.md:738
#: ./docs/10.x/http-tests.md:760
#: ./docs/11.x/http-tests.md:1059
#: ./docs/master/http-tests.md:987
#~ msgid "<a name=\"assert-download\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:718
#: ./docs/9.x/http-tests.md:739
#: ./docs/10.x/http-tests.md:761
#: ./docs/11.x/http-tests.md:1060
#: ./docs/master/http-tests.md:988
msgid "assertDownload"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:720
#: ./docs/9.x/http-tests.md:741
#: ./docs/10.x/http-tests.md:763
#: ./docs/11.x/http-tests.md:1062
#: ./docs/master/http-tests.md:990
msgid "Assert that the response is a \"download\". Typically, this means the invoked route that returned the response returned a `Response::download` response, `BinaryFileResponse`, or `Storage::download` response:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:722
#: ./docs/9.x/http-tests.md:743
#: ./docs/10.x/http-tests.md:765
#: ./docs/11.x/http-tests.md:1064
#: ./docs/master/http-tests.md:992
msgid "$response->assertDownload();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:724
#: ./docs/9.x/http-tests.md:745
#: ./docs/10.x/http-tests.md:767
#: ./docs/11.x/http-tests.md:1066
#: ./docs/master/http-tests.md:994
msgid "If you wish, you may assert that the downloadable file was assigned a given file name:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:726
#: ./docs/9.x/http-tests.md:747
#: ./docs/10.x/http-tests.md:769
#: ./docs/11.x/http-tests.md:1068
#: ./docs/master/http-tests.md:996
msgid "$response->assertDownload('image.jpg');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:728
#: ./docs/9.x/http-tests.md:749
#: ./docs/10.x/http-tests.md:771
#: ./docs/11.x/http-tests.md:1070
#: ./docs/master/http-tests.md:998
#~ msgid "<a name=\"assert-exact-json\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:729
#: ./docs/9.x/http-tests.md:750
#: ./docs/10.x/http-tests.md:772
#: ./docs/11.x/http-tests.md:1071
#: ./docs/master/http-tests.md:999
msgid "assertExactJson"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:731
#: ./docs/9.x/http-tests.md:752
#: ./docs/10.x/http-tests.md:774
#: ./docs/11.x/http-tests.md:1073
#: ./docs/master/http-tests.md:1001
msgid "Assert that the response contains an exact match of the given JSON data:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:733
#: ./docs/9.x/http-tests.md:754
#: ./docs/10.x/http-tests.md:776
#: ./docs/11.x/http-tests.md:1075
#: ./docs/master/http-tests.md:1003
msgid "$response->assertExactJson(array $data);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:735
#: ./docs/9.x/http-tests.md:756
#: ./docs/10.x/http-tests.md:778
#: ./docs/11.x/http-tests.md:1086
#: ./docs/master/http-tests.md:1005
#~ msgid "<a name=\"assert-forbidden\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:736
#: ./docs/9.x/http-tests.md:757
#: ./docs/10.x/http-tests.md:779
#: ./docs/11.x/http-tests.md:1087
#: ./docs/master/http-tests.md:1006
msgid "assertForbidden"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:738
#: ./docs/9.x/http-tests.md:759
#: ./docs/10.x/http-tests.md:781
#: ./docs/11.x/http-tests.md:1089
#: ./docs/master/http-tests.md:1008
msgid "Assert that the response has a forbidden (403) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:740
#: ./docs/9.x/http-tests.md:761
#: ./docs/10.x/http-tests.md:783
#: ./docs/11.x/http-tests.md:1091
#: ./docs/master/http-tests.md:1010
msgid "$response->assertForbidden();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:742
#: ./docs/9.x/http-tests.md:763
#: ./docs/10.x/http-tests.md:799
#: ./docs/11.x/http-tests.md:1107
#: ./docs/master/http-tests.md:1026
#~ msgid "<a name=\"assert-header\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:743
#: ./docs/9.x/http-tests.md:764
#: ./docs/10.x/http-tests.md:800
#: ./docs/11.x/http-tests.md:1108
#: ./docs/master/http-tests.md:1027
msgid "assertHeader"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:745
#: ./docs/9.x/http-tests.md:766
#: ./docs/10.x/http-tests.md:802
#: ./docs/11.x/http-tests.md:1110
#: ./docs/master/http-tests.md:1029
msgid "Assert that the given header and value is present on the response:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:747
#: ./docs/9.x/http-tests.md:768
#: ./docs/10.x/http-tests.md:804
#: ./docs/11.x/http-tests.md:1112
#: ./docs/master/http-tests.md:1031
msgid "$response->assertHeader($headerName, $value = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:749
#: ./docs/9.x/http-tests.md:770
#: ./docs/10.x/http-tests.md:806
#: ./docs/11.x/http-tests.md:1114
#: ./docs/master/http-tests.md:1033
#~ msgid "<a name=\"assert-header-missing\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:750
#: ./docs/9.x/http-tests.md:771
#: ./docs/10.x/http-tests.md:807
#: ./docs/11.x/http-tests.md:1115
#: ./docs/master/http-tests.md:1034
msgid "assertHeaderMissing"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:752
#: ./docs/master/http-tests.md:681
msgid "<?php\n\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n\n"
"test('avatars can be uploaded', function () {\n"
"    Storage::fake('avatars');\n\n"
"    $file = UploadedFile::fake()->image('avatar.jpg');\n\n"
"    $response = $this->post('/avatar', [\n"
"        'avatar' => $file,\n"
"    ]);\n\n"
"    Storage::disk('avatars')->assertExists($file->hashName());\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:752
#: ./docs/9.x/http-tests.md:773
#: ./docs/10.x/http-tests.md:809
#: ./docs/11.x/http-tests.md:1117
#: ./docs/master/http-tests.md:1036
msgid "Assert that the given header is not present on the response:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:754
#: ./docs/9.x/http-tests.md:775
#: ./docs/10.x/http-tests.md:811
#: ./docs/11.x/http-tests.md:1119
#: ./docs/master/http-tests.md:1038
msgid "$response->assertHeaderMissing($headerName);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:756
#: ./docs/9.x/http-tests.md:777
#: ./docs/10.x/http-tests.md:820
#: ./docs/11.x/http-tests.md:1128
#: ./docs/master/http-tests.md:1047
#~ msgid "<a name=\"assert-json\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:757
#: ./docs/9.x/http-tests.md:778
#: ./docs/10.x/http-tests.md:821
#: ./docs/11.x/http-tests.md:1129
#: ./docs/master/http-tests.md:1048
msgid "assertJson"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:759
#: ./docs/9.x/http-tests.md:780
#: ./docs/10.x/http-tests.md:823
#: ./docs/11.x/http-tests.md:1131
#: ./docs/master/http-tests.md:1050
msgid "Assert that the response contains the given JSON data:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:761
#: ./docs/9.x/http-tests.md:782
#: ./docs/10.x/http-tests.md:825
#: ./docs/11.x/http-tests.md:1133
#: ./docs/master/http-tests.md:1052
msgid "$response->assertJson(array $data, $strict = false);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:765
#: ./docs/9.x/http-tests.md:786
#: ./docs/10.x/http-tests.md:829
#: ./docs/11.x/http-tests.md:1137
#: ./docs/master/http-tests.md:1056
#~ msgid "<a name=\"assert-json-count\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:766
#: ./docs/9.x/http-tests.md:787
#: ./docs/10.x/http-tests.md:830
#: ./docs/11.x/http-tests.md:1138
#: ./docs/master/http-tests.md:1057
msgid "assertJsonCount"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:768
#: ./docs/9.x/http-tests.md:789
#: ./docs/10.x/http-tests.md:832
#: ./docs/11.x/http-tests.md:1140
#: ./docs/master/http-tests.md:1059
msgid "Assert that the response JSON has an array with the expected number of items at the given key:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:770
#: ./docs/9.x/http-tests.md:791
#: ./docs/10.x/http-tests.md:834
#: ./docs/11.x/http-tests.md:1142
#: ./docs/master/http-tests.md:1061
msgid "$response->assertJsonCount($count, $key = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:772
#: ./docs/9.x/http-tests.md:793
#: ./docs/10.x/http-tests.md:836
#: ./docs/11.x/http-tests.md:1144
#: ./docs/master/http-tests.md:1063
#~ msgid "<a name=\"assert-json-fragment\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:773
#: ./docs/9.x/http-tests.md:794
#: ./docs/10.x/http-tests.md:837
#: ./docs/11.x/http-tests.md:1145
#: ./docs/master/http-tests.md:1064
msgid "assertJsonFragment"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:775
#: ./docs/9.x/http-tests.md:796
#: ./docs/10.x/http-tests.md:839
#: ./docs/11.x/http-tests.md:1147
#: ./docs/master/http-tests.md:1066
msgid "Assert that the response contains the given JSON data anywhere in the response:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:777
#: ./docs/9.x/http-tests.md:798
#: ./docs/10.x/http-tests.md:841
#: ./docs/11.x/http-tests.md:1149
#: ./docs/master/http-tests.md:1068
msgid "Route::get('/users', function () {\n"
"    return [\n"
"        'users' => [\n"
"            [\n"
"                'name' => 'Taylor Otwell',\n"
"            ],\n"
"        ],\n"
"    ];\n"
"});\n\n"
"$response->assertJsonFragment(['name' => 'Taylor Otwell']);"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:785
#: ./docs/11.x/http-tests.md:1093
#: ./docs/master/http-tests.md:1012
#~ msgid "<a name=\"assert-found\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:786
#: ./docs/11.x/http-tests.md:1094
#: ./docs/master/http-tests.md:1013
msgid "assertFound"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:788
#: ./docs/11.x/http-tests.md:1096
#: ./docs/master/http-tests.md:1015
msgid "Assert that the response has a found (302) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:789
#: ./docs/9.x/http-tests.md:824
#: ./docs/10.x/http-tests.md:867
#: ./docs/11.x/http-tests.md:1175
#: ./docs/master/http-tests.md:1094
#~ msgid "<a name=\"assert-json-missing\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:790
#: ./docs/11.x/http-tests.md:1098
#: ./docs/master/http-tests.md:1017
msgid "$response->assertFound();"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:790
#: ./docs/9.x/http-tests.md:825
#: ./docs/10.x/http-tests.md:868
#: ./docs/11.x/http-tests.md:1176
#: ./docs/master/http-tests.md:1095
msgid "assertJsonMissing"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:792
#: ./docs/11.x/http-tests.md:1100
#: ./docs/master/http-tests.md:1019
#~ msgid "<a name=\"assert-gone\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/http-tests.md:792
#: ./docs/9.x/http-tests.md:827
#: ./docs/10.x/http-tests.md:870
#: ./docs/11.x/http-tests.md:1178
#: ./docs/master/http-tests.md:1097
msgid "Assert that the response does not contain the given JSON data:"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:793
#: ./docs/11.x/http-tests.md:1101
#: ./docs/master/http-tests.md:1020
msgid "assertGone"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:794
#: ./docs/9.x/http-tests.md:829
#: ./docs/10.x/http-tests.md:872
#: ./docs/11.x/http-tests.md:1180
#: ./docs/master/http-tests.md:1099
msgid "$response->assertJsonMissing(array $data);"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:795
#: ./docs/11.x/http-tests.md:1103
#: ./docs/master/http-tests.md:1022
msgid "Assert that the response has a gone (410) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:796
#: ./docs/9.x/http-tests.md:831
#: ./docs/10.x/http-tests.md:874
#: ./docs/11.x/http-tests.md:1182
#: ./docs/master/http-tests.md:1101
#~ msgid "<a name=\"assert-json-missing-exact\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:797
#: ./docs/11.x/http-tests.md:1105
#: ./docs/master/http-tests.md:1024
msgid "$response->assertGone();"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:797
#: ./docs/9.x/http-tests.md:832
#: ./docs/10.x/http-tests.md:875
#: ./docs/11.x/http-tests.md:1183
#: ./docs/master/http-tests.md:1102
msgid "assertJsonMissingExact"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:799
#: ./docs/9.x/http-tests.md:834
#: ./docs/10.x/http-tests.md:877
#: ./docs/11.x/http-tests.md:1185
#: ./docs/master/http-tests.md:1104
msgid "Assert that the response does not contain the exact JSON data:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:801
#: ./docs/9.x/http-tests.md:836
#: ./docs/10.x/http-tests.md:879
#: ./docs/11.x/http-tests.md:1187
#: ./docs/master/http-tests.md:1106
msgid "$response->assertJsonMissingExact(array $data);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:803
#: ./docs/9.x/http-tests.md:838
#: ./docs/10.x/http-tests.md:881
#: ./docs/11.x/http-tests.md:1189
#: ./docs/master/http-tests.md:1108
#~ msgid "<a name=\"assert-json-missing-validation-errors\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:804
#: ./docs/9.x/http-tests.md:839
#: ./docs/10.x/http-tests.md:882
#: ./docs/11.x/http-tests.md:1190
#: ./docs/master/http-tests.md:1109
msgid "assertJsonMissingValidationErrors"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:806
#: ./docs/9.x/http-tests.md:841
#: ./docs/10.x/http-tests.md:884
#: ./docs/11.x/http-tests.md:1192
#: ./docs/master/http-tests.md:1111
msgid "Assert that the response has no JSON validation errors for the given keys:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:808
#: ./docs/9.x/http-tests.md:843
#: ./docs/10.x/http-tests.md:886
#: ./docs/11.x/http-tests.md:1194
#: ./docs/master/http-tests.md:1113
msgid "$response->assertJsonMissingValidationErrors($keys);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:810
#: ./docs/9.x/http-tests.md:846
#: ./docs/9.x/http-tests.md:1152
#: ./docs/10.x/http-tests.md:889
#: ./docs/10.x/http-tests.md:1239
#: ./docs/11.x/http-tests.md:1197
#: ./docs/11.x/http-tests.md:1547
#: ./docs/master/http-tests.md:1116
#: ./docs/master/http-tests.md:1466
msgid "The more generic [assertValid](#assert-valid) method may be used to assert that a response does not have validation errors that were returned as JSON **and** that no errors were flashed to session storage."
msgstr ""

# P
#: ./docs/9.x/http-tests.md:810
#: ./docs/10.x/http-tests.md:853
#: ./docs/11.x/http-tests.md:1161
#: ./docs/master/http-tests.md:1080
#~ msgid "<a name=\"assert-json-is-array\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/http-tests.md:811
#: ./docs/10.x/http-tests.md:854
#: ./docs/11.x/http-tests.md:1162
#: ./docs/master/http-tests.md:1081
msgid "assertJsonIsArray"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:812
#: ./docs/9.x/http-tests.md:848
#: ./docs/10.x/http-tests.md:891
#: ./docs/11.x/http-tests.md:1199
#: ./docs/master/http-tests.md:1118
#~ msgid "<a name=\"assert-json-path\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:813
#: ./docs/11.x/http-tests.md:1121
#: ./docs/master/http-tests.md:1040
#~ msgid "<a name=\"assert-internal-server-error\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:813
#: ./docs/9.x/http-tests.md:849
#: ./docs/10.x/http-tests.md:892
#: ./docs/11.x/http-tests.md:1200
#: ./docs/master/http-tests.md:1119
msgid "assertJsonPath"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:813
#: ./docs/10.x/http-tests.md:856
#: ./docs/11.x/http-tests.md:1164
#: ./docs/master/http-tests.md:1083
msgid "Assert that the response JSON is an array:"
msgstr ""

# H4
#: ./docs/10.x/http-tests.md:814
#: ./docs/11.x/http-tests.md:1122
#: ./docs/master/http-tests.md:1041
msgid "assertInternalServerError"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:815
#: ./docs/9.x/http-tests.md:851
#: ./docs/10.x/http-tests.md:894
#: ./docs/11.x/http-tests.md:1202
#: ./docs/master/http-tests.md:1121
msgid "Assert that the response contains the given data at the specified path:"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:815
#: ./docs/10.x/http-tests.md:858
#: ./docs/11.x/http-tests.md:1166
#: ./docs/master/http-tests.md:1085
msgid "$response->assertJsonIsArray();"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:816
#: ./docs/11.x/http-tests.md:1124
#: ./docs/master/http-tests.md:1043
msgid "Assert that the response has an \"Internal Server Error\" (500) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:817
#: ./docs/9.x/http-tests.md:853
#: ./docs/10.x/http-tests.md:896
#: ./docs/11.x/http-tests.md:1204
#: ./docs/master/http-tests.md:1123
msgid "$response->assertJsonPath($path, $expectedValue);"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:817
#: ./docs/10.x/http-tests.md:860
#: ./docs/11.x/http-tests.md:1168
#: ./docs/master/http-tests.md:1087
#~ msgid "<a name=\"assert-json-is-object\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:818
#: ./docs/11.x/http-tests.md:1126
#: ./docs/master/http-tests.md:1045
msgid "$response->assertInternalServerError();"
msgstr ""

# H4
#: ./docs/9.x/http-tests.md:818
#: ./docs/10.x/http-tests.md:861
#: ./docs/11.x/http-tests.md:1169
#: ./docs/master/http-tests.md:1088
msgid "assertJsonIsObject"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:819
#: ./docs/8.x/http-tests.md:840
#: ./docs/9.x/http-tests.md:897
#: ./docs/10.x/http-tests.md:940
#: ./docs/11.x/http-tests.md:1248
#: ./docs/master/http-tests.md:1167
msgid "For example, if the JSON response returned by your application contains the following data:"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:820
#: ./docs/10.x/http-tests.md:863
#: ./docs/11.x/http-tests.md:1171
#: ./docs/master/http-tests.md:1090
msgid "Assert that the response JSON is an object:"
msgstr ""

# CODE: js
# CODE: json
#: ./docs/8.x/http-tests.md:821
#: ./docs/8.x/http-tests.md:842
#: ./docs/9.x/http-tests.md:857
#: ./docs/9.x/http-tests.md:878
#: ./docs/9.x/http-tests.md:899
#: ./docs/10.x/http-tests.md:900
#: ./docs/10.x/http-tests.md:921
#: ./docs/10.x/http-tests.md:942
#: ./docs/11.x/http-tests.md:1208
#: ./docs/11.x/http-tests.md:1229
#: ./docs/11.x/http-tests.md:1250
#: ./docs/master/http-tests.md:1127
#: ./docs/master/http-tests.md:1148
#: ./docs/master/http-tests.md:1169
msgid "{\n"
"    \"user\": {\n"
"        \"name\": \"Steve Schoger\"\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:822
#: ./docs/10.x/http-tests.md:865
#: ./docs/11.x/http-tests.md:1173
#: ./docs/master/http-tests.md:1092
msgid "$response->assertJsonIsObject();"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:827
#: ./docs/master/http-tests.md:756
msgid "<?php\n\n"
"test('a welcome view can be rendered', function () {\n"
"    $view = $this->view('welcome', ['name' => 'Taylor']);\n\n"
"    $view->assertSee('Taylor');\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:829
#: ./docs/9.x/http-tests.md:865
#: ./docs/10.x/http-tests.md:908
#: ./docs/11.x/http-tests.md:1216
#: ./docs/master/http-tests.md:1135
msgid "You may assert that the `name` property of the `user` object matches a given value like so:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:831
#: ./docs/9.x/http-tests.md:867
#: ./docs/10.x/http-tests.md:910
#: ./docs/11.x/http-tests.md:1218
#: ./docs/master/http-tests.md:1137
msgid "$response->assertJsonPath('user.name', 'Steve Schoger');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:833
#: ./docs/9.x/http-tests.md:890
#: ./docs/10.x/http-tests.md:933
#: ./docs/11.x/http-tests.md:1241
#: ./docs/master/http-tests.md:1160
#~ msgid "<a name=\"assert-json-structure\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:834
#: ./docs/9.x/http-tests.md:891
#: ./docs/10.x/http-tests.md:934
#: ./docs/11.x/http-tests.md:1242
#: ./docs/master/http-tests.md:1161
msgid "assertJsonStructure"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:836
#: ./docs/9.x/http-tests.md:893
#: ./docs/10.x/http-tests.md:936
#: ./docs/11.x/http-tests.md:1244
#: ./docs/master/http-tests.md:1163
msgid "Assert that the response has a given JSON structure:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:838
#: ./docs/9.x/http-tests.md:895
#: ./docs/10.x/http-tests.md:938
#: ./docs/11.x/http-tests.md:1246
#: ./docs/master/http-tests.md:1165
msgid "$response->assertJsonStructure(array $structure);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:850
#: ./docs/9.x/http-tests.md:907
#: ./docs/10.x/http-tests.md:950
#: ./docs/11.x/http-tests.md:1258
#: ./docs/master/http-tests.md:1177
msgid "You may assert that the JSON structure matches your expectations like so:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:852
#: ./docs/9.x/http-tests.md:909
#: ./docs/10.x/http-tests.md:952
#: ./docs/11.x/http-tests.md:1260
#: ./docs/master/http-tests.md:1179
msgid "$response->assertJsonStructure([\n"
"    'user' => [\n"
"        'name',\n"
"    ]\n"
"]);"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:855
#: ./docs/9.x/http-tests.md:876
#: ./docs/10.x/http-tests.md:898
#: ./docs/10.x/http-tests.md:919
#: ./docs/11.x/http-tests.md:1206
#: ./docs/11.x/http-tests.md:1227
#: ./docs/master/http-tests.md:1125
#: ./docs/master/http-tests.md:1146
msgid "For example, if the following JSON response is returned by your application:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:858
#: ./docs/9.x/http-tests.md:915
#: ./docs/10.x/http-tests.md:958
#: ./docs/11.x/http-tests.md:1266
#: ./docs/master/http-tests.md:1185
msgid "Sometimes, JSON responses returned by your application may contain arrays of objects:"
msgstr ""

# CODE: js
# CODE: json
#: ./docs/8.x/http-tests.md:860
#: ./docs/9.x/http-tests.md:917
#: ./docs/10.x/http-tests.md:960
#: ./docs/11.x/http-tests.md:1268
#: ./docs/master/http-tests.md:1187
msgid "{\n"
"    \"user\": [\n"
"        {\n"
"            \"name\": \"Steve Schoger\",\n"
"            \"age\": 55,\n"
"            \"location\": \"Earth\"\n"
"        },\n"
"        {\n"
"            \"name\": \"Mary Schoger\",\n"
"            \"age\": 60,\n"
"            \"location\": \"Earth\"\n"
"        }\n"
"    ]\n"
"}"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:869
#: ./docs/10.x/http-tests.md:912
#: ./docs/11.x/http-tests.md:1220
#: ./docs/master/http-tests.md:1139
#~ msgid "<a name=\"assert-json-missing-path\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/http-tests.md:870
#: ./docs/10.x/http-tests.md:913
#: ./docs/11.x/http-tests.md:1221
#: ./docs/master/http-tests.md:1140
msgid "assertJsonMissingPath"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:872
#: ./docs/10.x/http-tests.md:915
#: ./docs/11.x/http-tests.md:1223
#: ./docs/master/http-tests.md:1142
msgid "Assert that the response does not contain the given path:"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:874
#: ./docs/10.x/http-tests.md:917
#: ./docs/11.x/http-tests.md:1225
#: ./docs/master/http-tests.md:1144
msgid "$response->assertJsonMissingPath($path);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:877
#: ./docs/9.x/http-tests.md:934
#: ./docs/10.x/http-tests.md:977
#: ./docs/11.x/http-tests.md:1285
#: ./docs/master/http-tests.md:1204
msgid "In this situation, you may use the `*` character to assert against the structure of all of the objects in the array:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:879
#: ./docs/9.x/http-tests.md:936
#: ./docs/10.x/http-tests.md:979
#: ./docs/11.x/http-tests.md:1287
#: ./docs/master/http-tests.md:1206
msgid "$response->assertJsonStructure([\n"
"    'user' => [\n"
"        '*' => [\n"
"             'name',\n"
"             'age',\n"
"             'location'\n"
"        ]\n"
"    ]\n"
"]);"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:886
#: ./docs/10.x/http-tests.md:929
#: ./docs/11.x/http-tests.md:1237
#: ./docs/master/http-tests.md:1156
msgid "You may assert that it does not contain the `email` property of the `user` object:"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:888
#: ./docs/10.x/http-tests.md:931
#: ./docs/11.x/http-tests.md:1239
#: ./docs/master/http-tests.md:1158
msgid "$response->assertJsonMissingPath('user.email');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:889
#: ./docs/9.x/http-tests.md:946
#: ./docs/10.x/http-tests.md:989
#: ./docs/11.x/http-tests.md:1297
#: ./docs/master/http-tests.md:1216
#~ msgid "<a name=\"assert-json-validation-errors\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:890
#: ./docs/9.x/http-tests.md:947
#: ./docs/10.x/http-tests.md:990
#: ./docs/11.x/http-tests.md:1298
#: ./docs/master/http-tests.md:1217
msgid "assertJsonValidationErrors"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:892
#: ./docs/9.x/http-tests.md:949
#: ./docs/10.x/http-tests.md:992
#: ./docs/11.x/http-tests.md:1300
#: ./docs/master/http-tests.md:1219
msgid "Assert that the response has the given JSON validation errors for the given keys. This method should be used when asserting against responses where the validation errors are returned as a JSON structure instead of being flashed to the session:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:894
#: ./docs/9.x/http-tests.md:951
#: ./docs/10.x/http-tests.md:994
#: ./docs/11.x/http-tests.md:1302
#: ./docs/master/http-tests.md:1221
msgid "$response->assertJsonValidationErrors(array $data, $responseKey = 'errors');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:896
#: ./docs/9.x/http-tests.md:954
#: ./docs/9.x/http-tests.md:1128
#: ./docs/10.x/http-tests.md:997
#: ./docs/10.x/http-tests.md:1215
#: ./docs/11.x/http-tests.md:1305
#: ./docs/11.x/http-tests.md:1523
#: ./docs/master/http-tests.md:1224
#: ./docs/master/http-tests.md:1442
msgid "The more generic [assertInvalid](#assert-invalid) method may be used to assert that a response has validation errors returned as JSON **or** that errors were flashed to session storage."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:898
#: ./docs/9.x/http-tests.md:956
#: ./docs/10.x/http-tests.md:999
#: ./docs/11.x/http-tests.md:1307
#: ./docs/master/http-tests.md:1226
#~ msgid "<a name=\"assert-json-validation-error-for\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:899
#: ./docs/9.x/http-tests.md:957
#: ./docs/10.x/http-tests.md:1000
#: ./docs/11.x/http-tests.md:1308
#: ./docs/master/http-tests.md:1227
msgid "assertJsonValidationErrorFor"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:901
#: ./docs/9.x/http-tests.md:959
#: ./docs/10.x/http-tests.md:1002
#: ./docs/11.x/http-tests.md:1310
#: ./docs/master/http-tests.md:1229
msgid "Assert the response has any JSON validation errors for the given key:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:903
#: ./docs/9.x/http-tests.md:961
#: ./docs/10.x/http-tests.md:1004
#: ./docs/11.x/http-tests.md:1312
#: ./docs/master/http-tests.md:1231
msgid "$response->assertJsonValidationErrorFor(string $key, $responseKey = 'errors');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:905
#: ./docs/9.x/http-tests.md:963
#: ./docs/10.x/http-tests.md:1020
#: ./docs/11.x/http-tests.md:1328
#: ./docs/master/http-tests.md:1247
#~ msgid "<a name=\"assert-location\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:906
#: ./docs/9.x/http-tests.md:964
#: ./docs/10.x/http-tests.md:1021
#: ./docs/11.x/http-tests.md:1329
#: ./docs/master/http-tests.md:1248
msgid "assertLocation"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:908
#: ./docs/9.x/http-tests.md:966
#: ./docs/10.x/http-tests.md:1023
#: ./docs/11.x/http-tests.md:1331
#: ./docs/master/http-tests.md:1250
msgid "Assert that the response has the given URI value in the `Location` header:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:910
#: ./docs/9.x/http-tests.md:968
#: ./docs/10.x/http-tests.md:1025
#: ./docs/11.x/http-tests.md:1333
#: ./docs/master/http-tests.md:1252
msgid "$response->assertLocation($uri);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:912
#: ./docs/9.x/http-tests.md:977
#: ./docs/10.x/http-tests.md:1034
#: ./docs/11.x/http-tests.md:1342
#: ./docs/master/http-tests.md:1261
#~ msgid "<a name=\"assert-no-content\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/http-tests.md:913
msgid "[assertAccepted](#assert-accepted)\n"
"[assertBadRequest](#assert-bad-request)\n"
"[assertConflict](#assert-conflict)\n"
"[assertCookie](#assert-cookie)\n"
"[assertCookieExpired](#assert-cookie-expired)\n"
"[assertCookieNotExpired](#assert-cookie-not-expired)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertCreated](#assert-created)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertDontSeeText](#assert-dont-see-text)\n"
"[assertDownload](#assert-download)\n"
"[assertExactJson](#assert-exact-json)\n"
"[assertExactJsonStructure](#assert-exact-json-structure)\n"
"[assertForbidden](#assert-forbidden)\n"
"[assertFound](#assert-found)\n"
"[assertGone](#assert-gone)\n"
"[assertHeader](#assert-header)\n"
"[assertHeaderMissing](#assert-header-missing)\n"
"[assertInternalServerError](#assert-internal-server-error)\n"
"[assertJson](#assert-json)\n"
"[assertJsonCount](#assert-json-count)\n"
"[assertJsonFragment](#assert-json-fragment)\n"
"[assertJsonIsArray](#assert-json-is-array)\n"
"[assertJsonIsObject](#assert-json-is-object)\n"
"[assertJsonMissing](#assert-json-missing)\n"
"[assertJsonMissingExact](#assert-json-missing-exact)\n"
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)\n"
"[assertJsonPath](#assert-json-path)\n"
"[assertJsonMissingPath](#assert-json-missing-path)\n"
"[assertJsonStructure](#assert-json-structure)\n"
"[assertJsonValidationErrors](#assert-json-validation-errors)\n"
"[assertJsonValidationErrorFor](#assert-json-validation-error-for)\n"
"[assertLocation](#assert-location)\n"
"[assertMethodNotAllowed](#assert-method-not-allowed)\n"
"[assertMovedPermanently](#assert-moved-permanently)\n"
"[assertContent](#assert-content)\n"
"[assertNoContent](#assert-no-content)\n"
"[assertStreamedContent](#assert-streamed-content)\n"
"[assertNotFound](#assert-not-found)\n"
"[assertOk](#assert-ok)\n"
"[assertPaymentRequired](#assert-payment-required)\n"
"[assertPlainCookie](#assert-plain-cookie)\n"
"[assertRedirect](#assert-redirect)\n"
"[assertRedirectContains](#assert-redirect-contains)\n"
"[assertRedirectToRoute](#assert-redirect-to-route)\n"
"[assertRedirectToSignedRoute](#assert-redirect-to-signed-route)\n"
"[assertRequestTimeout](#assert-request-timeout)\n"
"[assertSee](#assert-see)\n"
"[assertSeeInOrder](#assert-see-in-order)\n"
"[assertSeeText](#assert-see-text)\n"
"[assertSeeTextInOrder](#assert-see-text-in-order)\n"
"[assertServerError](#assert-server-error)\n"
"[assertServiceUnavailable](#assert-server-unavailable)\n"
"[assertSessionHas](#assert-session-has)\n"
"[assertSessionHasInput](#assert-session-has-input)\n"
"[assertSessionHasAll](#assert-session-has-all)\n"
"[assertSessionHasErrors](#assert-session-has-errors)\n"
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)\n"
"[assertSessionHasNoErrors](#assert-session-has-no-errors)\n"
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)\n"
"[assertSessionMissing](#assert-session-missing)\n"
"[assertStatus](#assert-status)\n"
"[assertSuccessful](#assert-successful)\n"
"[assertTooManyRequests](#assert-too-many-requests)\n"
"[assertUnauthorized](#assert-unauthorized)\n"
"[assertUnprocessable](#assert-unprocessable)\n"
"[assertUnsupportedMediaType](#assert-unsupported-media-type)\n"
"[assertValid](#assert-valid)\n"
"[assertInvalid](#assert-invalid)\n"
"[assertViewHas](#assert-view-has)\n"
"[assertViewHasAll](#assert-view-has-all)\n"
"[assertViewIs](#assert-view-is)\n"
"[assertViewMissing](#assert-view-missing)"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:913
#: ./docs/9.x/http-tests.md:978
#: ./docs/10.x/http-tests.md:1035
#: ./docs/11.x/http-tests.md:1343
#: ./docs/master/http-tests.md:1262
msgid "assertNoContent"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:915
#: ./docs/9.x/http-tests.md:980
#: ./docs/10.x/http-tests.md:1037
#: ./docs/11.x/http-tests.md:1345
#: ./docs/master/http-tests.md:1264
msgid "Assert that the response has the given HTTP status code and no content:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:917
#: ./docs/9.x/http-tests.md:982
#: ./docs/10.x/http-tests.md:1039
#: ./docs/11.x/http-tests.md:1347
#: ./docs/master/http-tests.md:1266
msgid "$response->assertNoContent($status = 204);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:919
#: ./docs/9.x/http-tests.md:991
#: ./docs/10.x/http-tests.md:1048
#: ./docs/11.x/http-tests.md:1356
#: ./docs/master/http-tests.md:1275
#~ msgid "<a name=\"assert-not-found\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:920
#: ./docs/9.x/http-tests.md:992
#: ./docs/10.x/http-tests.md:1049
#: ./docs/11.x/http-tests.md:1357
#: ./docs/master/http-tests.md:1276
msgid "assertNotFound"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:922
#: ./docs/9.x/http-tests.md:994
#: ./docs/10.x/http-tests.md:1051
#: ./docs/11.x/http-tests.md:1359
#: ./docs/master/http-tests.md:1278
msgid "Assert that the response has a not found (404) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:924
#: ./docs/9.x/http-tests.md:996
#: ./docs/10.x/http-tests.md:1053
#: ./docs/11.x/http-tests.md:1361
#: ./docs/master/http-tests.md:1280
msgid "$response->assertNotFound();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:926
#: ./docs/9.x/http-tests.md:998
#: ./docs/10.x/http-tests.md:1055
#: ./docs/11.x/http-tests.md:1363
#: ./docs/master/http-tests.md:1282
#~ msgid "<a name=\"assert-ok\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:927
#: ./docs/9.x/http-tests.md:999
#: ./docs/10.x/http-tests.md:1056
#: ./docs/11.x/http-tests.md:1364
#: ./docs/master/http-tests.md:1283
msgid "assertOk"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:929
#: ./docs/9.x/http-tests.md:1001
#: ./docs/10.x/http-tests.md:1058
#: ./docs/11.x/http-tests.md:1366
#: ./docs/master/http-tests.md:1285
msgid "Assert that the response has a 200 HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:931
#: ./docs/9.x/http-tests.md:1003
#: ./docs/10.x/http-tests.md:1060
#: ./docs/11.x/http-tests.md:1368
#: ./docs/master/http-tests.md:1287
msgid "$response->assertOk();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:933
#: ./docs/9.x/http-tests.md:1005
#: ./docs/10.x/http-tests.md:1069
#: ./docs/11.x/http-tests.md:1377
#: ./docs/master/http-tests.md:1296
#~ msgid "<a name=\"assert-plain-cookie\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:934
#: ./docs/9.x/http-tests.md:1006
#: ./docs/10.x/http-tests.md:1070
#: ./docs/11.x/http-tests.md:1378
#: ./docs/master/http-tests.md:1297
msgid "assertPlainCookie"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:936
#: ./docs/9.x/http-tests.md:1008
#: ./docs/10.x/http-tests.md:1072
#: ./docs/11.x/http-tests.md:1380
#: ./docs/master/http-tests.md:1299
msgid "Assert that the response contains the given unencrypted cookie:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:938
#: ./docs/9.x/http-tests.md:1010
#: ./docs/10.x/http-tests.md:1074
#: ./docs/11.x/http-tests.md:1382
#: ./docs/master/http-tests.md:1301
msgid "$response->assertPlainCookie($cookieName, $value = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:940
#: ./docs/9.x/http-tests.md:1012
#: ./docs/10.x/http-tests.md:1076
#: ./docs/11.x/http-tests.md:1384
#: ./docs/master/http-tests.md:1303
#~ msgid "<a name=\"assert-redirect\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:941
#: ./docs/9.x/http-tests.md:1013
#: ./docs/10.x/http-tests.md:1077
#: ./docs/11.x/http-tests.md:1385
#: ./docs/master/http-tests.md:1304
msgid "assertRedirect"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:943
#: ./docs/9.x/http-tests.md:1015
#: ./docs/10.x/http-tests.md:1079
#: ./docs/11.x/http-tests.md:1387
#: ./docs/master/http-tests.md:1306
msgid "Assert that the response is a redirect to the given URI:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:945
#: ./docs/9.x/http-tests.md:1017
msgid "$response->assertRedirect($uri);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:947
#: ./docs/9.x/http-tests.md:1019
#: ./docs/10.x/http-tests.md:1083
#: ./docs/11.x/http-tests.md:1391
#: ./docs/master/http-tests.md:1310
#~ msgid "<a name=\"assert-redirect-contains\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:948
#: ./docs/9.x/http-tests.md:1020
#: ./docs/10.x/http-tests.md:1084
#: ./docs/11.x/http-tests.md:1392
#: ./docs/master/http-tests.md:1311
msgid "assertRedirectContains"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:950
#: ./docs/9.x/http-tests.md:1022
#: ./docs/10.x/http-tests.md:1086
#: ./docs/11.x/http-tests.md:1394
#: ./docs/master/http-tests.md:1313
msgid "Assert whether the response is redirecting to a URI that contains the given string:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:952
#: ./docs/9.x/http-tests.md:1024
#: ./docs/10.x/http-tests.md:1088
#: ./docs/11.x/http-tests.md:1396
#: ./docs/master/http-tests.md:1315
msgid "$response->assertRedirectContains($string);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:954
#: ./docs/9.x/http-tests.md:1033
#: ./docs/10.x/http-tests.md:1097
#: ./docs/11.x/http-tests.md:1405
#: ./docs/master/http-tests.md:1324
#~ msgid "<a name=\"assert-redirect-to-signed-route\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:955
#: ./docs/9.x/http-tests.md:1034
#: ./docs/10.x/http-tests.md:1098
#: ./docs/11.x/http-tests.md:1406
#: ./docs/master/http-tests.md:1325
msgid "assertRedirectToSignedRoute"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:957
msgid "Assert that the response is a redirect to the given signed route:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:959
#: ./docs/9.x/http-tests.md:1038
#: ./docs/10.x/http-tests.md:1102
#: ./docs/11.x/http-tests.md:1410
#: ./docs/master/http-tests.md:1329
msgid "$response->assertRedirectToSignedRoute($name = null, $parameters = []);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:961
#: ./docs/9.x/http-tests.md:1040
#: ./docs/10.x/http-tests.md:1111
#: ./docs/11.x/http-tests.md:1419
#: ./docs/master/http-tests.md:1338
#~ msgid "<a name=\"assert-see\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:962
#: ./docs/9.x/http-tests.md:1041
#: ./docs/10.x/http-tests.md:1112
#: ./docs/11.x/http-tests.md:1420
#: ./docs/master/http-tests.md:1339
msgid "assertSee"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:964
#: ./docs/9.x/http-tests.md:1043
#: ./docs/10.x/http-tests.md:1114
#: ./docs/11.x/http-tests.md:1422
#: ./docs/master/http-tests.md:1341
msgid "Assert that the given string is contained within the response. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:966
#: ./docs/9.x/http-tests.md:1045
#: ./docs/10.x/http-tests.md:1116
#: ./docs/11.x/http-tests.md:1424
#: ./docs/master/http-tests.md:1343
msgid "$response->assertSee($value, $escaped = true);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:968
#: ./docs/9.x/http-tests.md:1047
#: ./docs/10.x/http-tests.md:1118
#: ./docs/11.x/http-tests.md:1426
#: ./docs/master/http-tests.md:1345
#~ msgid "<a name=\"assert-see-in-order\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:969
#: ./docs/9.x/http-tests.md:1048
#: ./docs/10.x/http-tests.md:1119
#: ./docs/11.x/http-tests.md:1427
#: ./docs/master/http-tests.md:1346
msgid "assertSeeInOrder"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:970
#: ./docs/10.x/http-tests.md:1027
#: ./docs/11.x/http-tests.md:1335
#: ./docs/master/http-tests.md:1254
#~ msgid "<a name=\"assert-content\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/http-tests.md:971
#: ./docs/9.x/http-tests.md:1050
#: ./docs/10.x/http-tests.md:1121
#: ./docs/11.x/http-tests.md:1429
#: ./docs/master/http-tests.md:1348
msgid "Assert that the given strings are contained in order within the response. This assertion will automatically escape the given strings unless you pass a second argument of `false`:"
msgstr ""

# H4
#: ./docs/9.x/http-tests.md:971
#: ./docs/10.x/http-tests.md:1028
#: ./docs/11.x/http-tests.md:1336
#: ./docs/master/http-tests.md:1255
msgid "assertContent"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:973
#: ./docs/9.x/http-tests.md:1052
#: ./docs/10.x/http-tests.md:1123
#: ./docs/11.x/http-tests.md:1431
#: ./docs/master/http-tests.md:1350
msgid "$response->assertSeeInOrder(array $values, $escaped = true);"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:973
#: ./docs/10.x/http-tests.md:1030
#: ./docs/11.x/http-tests.md:1338
#: ./docs/master/http-tests.md:1257
msgid "Assert that the given string matches the response content:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:975
#: ./docs/9.x/http-tests.md:1054
#: ./docs/10.x/http-tests.md:1125
#: ./docs/11.x/http-tests.md:1433
#: ./docs/master/http-tests.md:1352
#~ msgid "<a name=\"assert-see-text\"></a>"
#~ msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:975
#: ./docs/10.x/http-tests.md:1032
#: ./docs/11.x/http-tests.md:1340
#: ./docs/master/http-tests.md:1259
msgid "$response->assertContent($value);"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:976
#: ./docs/9.x/http-tests.md:1055
#: ./docs/10.x/http-tests.md:1126
#: ./docs/11.x/http-tests.md:1434
#: ./docs/master/http-tests.md:1353
msgid "assertSeeText"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:978
#: ./docs/9.x/http-tests.md:1057
#: ./docs/10.x/http-tests.md:1128
#: ./docs/11.x/http-tests.md:1436
#: ./docs/master/http-tests.md:1355
msgid "Assert that the given string is contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:980
#: ./docs/9.x/http-tests.md:1059
#: ./docs/10.x/http-tests.md:1130
#: ./docs/11.x/http-tests.md:1438
#: ./docs/master/http-tests.md:1357
msgid "$response->assertSeeText($value, $escaped = true);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:982
#: ./docs/9.x/http-tests.md:1061
#: ./docs/10.x/http-tests.md:1132
#: ./docs/11.x/http-tests.md:1440
#: ./docs/master/http-tests.md:1359
#~ msgid "<a name=\"assert-see-text-in-order\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:983
#: ./docs/9.x/http-tests.md:1062
#: ./docs/10.x/http-tests.md:1133
#: ./docs/11.x/http-tests.md:1441
#: ./docs/master/http-tests.md:1360
msgid "assertSeeTextInOrder"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:984
#: ./docs/10.x/http-tests.md:1041
#: ./docs/11.x/http-tests.md:1349
#: ./docs/master/http-tests.md:1268
#~ msgid "<a name=\"assert-streamed-content\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/http-tests.md:985
#: ./docs/9.x/http-tests.md:1064
#: ./docs/10.x/http-tests.md:1135
#: ./docs/11.x/http-tests.md:1443
#: ./docs/master/http-tests.md:1362
msgid "Assert that the given strings are contained in order within the response text. This assertion will automatically escape the given strings unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

# H4
#: ./docs/9.x/http-tests.md:985
#: ./docs/10.x/http-tests.md:1042
#: ./docs/11.x/http-tests.md:1350
#: ./docs/master/http-tests.md:1269
msgid "assertStreamedContent"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:987
#: ./docs/9.x/http-tests.md:1066
#: ./docs/10.x/http-tests.md:1137
#: ./docs/11.x/http-tests.md:1445
#: ./docs/master/http-tests.md:1364
msgid "$response->assertSeeTextInOrder(array $values, $escaped = true);"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:987
#: ./docs/10.x/http-tests.md:1044
#: ./docs/11.x/http-tests.md:1352
#: ./docs/master/http-tests.md:1271
msgid "Assert that the given string matches the streamed response content:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:989
#: ./docs/9.x/http-tests.md:1068
#: ./docs/10.x/http-tests.md:1153
#: ./docs/11.x/http-tests.md:1461
#: ./docs/master/http-tests.md:1380
#~ msgid "<a name=\"assert-session-has\"></a>"
#~ msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:989
#: ./docs/10.x/http-tests.md:1046
#: ./docs/11.x/http-tests.md:1354
#: ./docs/master/http-tests.md:1273
msgid "$response->assertStreamedContent($value);"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:990
#: ./docs/9.x/http-tests.md:1069
#: ./docs/10.x/http-tests.md:1154
#: ./docs/11.x/http-tests.md:1462
#: ./docs/master/http-tests.md:1381
msgid "assertSessionHas"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:992
#: ./docs/9.x/http-tests.md:1071
#: ./docs/10.x/http-tests.md:1156
#: ./docs/11.x/http-tests.md:1464
#: ./docs/master/http-tests.md:1383
msgid "Assert that the session contains the given piece of data:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:994
#: ./docs/9.x/http-tests.md:1073
#: ./docs/10.x/http-tests.md:1158
#: ./docs/11.x/http-tests.md:1466
#: ./docs/master/http-tests.md:1385
msgid "$response->assertSessionHas($key, $value = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:996
#: ./docs/9.x/http-tests.md:1075
#: ./docs/10.x/http-tests.md:1160
#: ./docs/11.x/http-tests.md:1468
#: ./docs/master/http-tests.md:1387
msgid "If needed, a closure can be provided as the second argument to the `assertSessionHas` method. The assertion will pass if the closure returns `true`:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:998
#: ./docs/9.x/http-tests.md:1077
msgid "$response->assertSessionHas($key, function ($value) {\n"
"    return $value->name === 'Taylor Otwell';\n"
"});"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1002
#: ./docs/9.x/http-tests.md:1081
#: ./docs/10.x/http-tests.md:1166
#: ./docs/11.x/http-tests.md:1474
#: ./docs/master/http-tests.md:1393
#~ msgid "<a name=\"assert-session-has-input\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1003
#: ./docs/9.x/http-tests.md:1082
#: ./docs/10.x/http-tests.md:1167
#: ./docs/11.x/http-tests.md:1475
#: ./docs/master/http-tests.md:1394
msgid "assertSessionHasInput"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1005
#: ./docs/9.x/http-tests.md:1084
#: ./docs/10.x/http-tests.md:1169
#: ./docs/11.x/http-tests.md:1477
#: ./docs/master/http-tests.md:1396
msgid "Assert that the session has a given value in the [flashed input array](/docs/{{version}}/responses#redirecting-with-flashed-session-data):"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1006
#: ./docs/11.x/http-tests.md:1314
#: ./docs/master/http-tests.md:1233
#~ msgid "<a name=\"assert-method-not-allowed\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1007
#: ./docs/11.x/http-tests.md:1315
#: ./docs/master/http-tests.md:1234
msgid "assertMethodNotAllowed"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1007
#: ./docs/9.x/http-tests.md:1086
#: ./docs/10.x/http-tests.md:1171
#: ./docs/11.x/http-tests.md:1479
#: ./docs/master/http-tests.md:1398
msgid "$response->assertSessionHasInput($key, $value = null);"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1009
#: ./docs/11.x/http-tests.md:1317
#: ./docs/master/http-tests.md:1236
msgid "Assert that the response has a method not allowed (405) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1009
#: ./docs/9.x/http-tests.md:1088
#: ./docs/10.x/http-tests.md:1173
#: ./docs/11.x/http-tests.md:1481
#: ./docs/master/http-tests.md:1400
msgid "If needed, a closure can be provided as the second argument to the `assertSessionHasInput` method. The assertion will pass if the closure returns `true`:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1011
#: ./docs/11.x/http-tests.md:1319
#: ./docs/master/http-tests.md:1238
msgid "$response->assertMethodNotAllowed();"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1011
#: ./docs/9.x/http-tests.md:1090
msgid "$response->assertSessionHasInput($key, function ($value) {\n"
"    return Crypt::decryptString($value) === 'secret';\n"
"});"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1013
#: ./docs/11.x/http-tests.md:1321
#: ./docs/master/http-tests.md:1240
#~ msgid "<a name=\"assert-moved-permanently\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1014
#: ./docs/11.x/http-tests.md:1322
#: ./docs/master/http-tests.md:1241
msgid "assertMovedPermanently"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1015
#: ./docs/9.x/http-tests.md:1094
#: ./docs/10.x/http-tests.md:1181
#: ./docs/11.x/http-tests.md:1489
#: ./docs/master/http-tests.md:1408
#~ msgid "<a name=\"assert-session-has-all\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:1016
#: ./docs/11.x/http-tests.md:1324
#: ./docs/master/http-tests.md:1243
msgid "Assert that the response has a moved permanently (301) HTTP status code:"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1016
#: ./docs/9.x/http-tests.md:1095
#: ./docs/10.x/http-tests.md:1182
#: ./docs/11.x/http-tests.md:1490
#: ./docs/master/http-tests.md:1409
msgid "assertSessionHasAll"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1018
#: ./docs/11.x/http-tests.md:1326
#: ./docs/master/http-tests.md:1245
msgid "$response->assertMovedPermanently();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1018
#: ./docs/9.x/http-tests.md:1097
#: ./docs/10.x/http-tests.md:1184
#: ./docs/11.x/http-tests.md:1492
#: ./docs/master/http-tests.md:1411
msgid "Assert that the session contains a given array of key / value pairs:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1020
#: ./docs/9.x/http-tests.md:1099
#: ./docs/10.x/http-tests.md:1186
#: ./docs/11.x/http-tests.md:1494
#: ./docs/master/http-tests.md:1413
msgid "$response->assertSessionHasAll(array $data);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1022
#: ./docs/9.x/http-tests.md:1101
#: ./docs/10.x/http-tests.md:1188
#: ./docs/11.x/http-tests.md:1496
#: ./docs/master/http-tests.md:1415
msgid "For example, if your application's session contains `name` and `status` keys, you may assert that both exist and have the specified values like so:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1024
#: ./docs/9.x/http-tests.md:1103
#: ./docs/10.x/http-tests.md:1190
#: ./docs/11.x/http-tests.md:1498
#: ./docs/master/http-tests.md:1417
msgid "$response->assertSessionHasAll([\n"
"    'name' => 'Taylor Otwell',\n"
"    'status' => 'active',\n"
"]);"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:1026
#: ./docs/10.x/http-tests.md:1090
#: ./docs/11.x/http-tests.md:1398
#: ./docs/master/http-tests.md:1317
#~ msgid "<a name=\"assert-redirect-to-route\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/http-tests.md:1027
#: ./docs/10.x/http-tests.md:1091
#: ./docs/11.x/http-tests.md:1399
#: ./docs/master/http-tests.md:1318
msgid "assertRedirectToRoute"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1029
#: ./docs/9.x/http-tests.md:1108
#: ./docs/10.x/http-tests.md:1195
#: ./docs/11.x/http-tests.md:1503
#: ./docs/master/http-tests.md:1422
#~ msgid "<a name=\"assert-session-has-errors\"></a>"
#~ msgstr ""

# P
#: ./docs/9.x/http-tests.md:1029
#: ./docs/10.x/http-tests.md:1093
#: ./docs/11.x/http-tests.md:1401
#: ./docs/master/http-tests.md:1320
msgid "Assert that the response is a redirect to the given [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1030
#: ./docs/9.x/http-tests.md:1109
#: ./docs/10.x/http-tests.md:1196
#: ./docs/11.x/http-tests.md:1504
#: ./docs/master/http-tests.md:1423
msgid "assertSessionHasErrors"
msgstr ""

# CODE
#: ./docs/9.x/http-tests.md:1031
msgid "$response->assertRedirectToRoute($name = null, $parameters = []);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1032
#: ./docs/9.x/http-tests.md:1111
#: ./docs/10.x/http-tests.md:1198
#: ./docs/11.x/http-tests.md:1506
#: ./docs/master/http-tests.md:1425
msgid "Assert that the session contains an error for the given `$keys`. If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key). This method should be used when testing routes that flash validation errors to the session instead of returning them as a JSON structure:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1034
#: ./docs/9.x/http-tests.md:1113
msgid "$response->assertSessionHasErrors(\n"
"    array $keys, $format = null, $errorBag = 'default'\n"
");"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:1036
#: ./docs/10.x/http-tests.md:1100
#: ./docs/11.x/http-tests.md:1408
#: ./docs/master/http-tests.md:1327
msgid "Assert that the response is a redirect to the given [signed route](/docs/{{version}}/urls#signed-urls):"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1038
#: ./docs/9.x/http-tests.md:1117
#: ./docs/10.x/http-tests.md:1204
#: ./docs/11.x/http-tests.md:1512
#: ./docs/master/http-tests.md:1431
msgid "For example, to assert that the `name` and `email` fields have validation error messages that were flashed to the session, you may invoke the `assertSessionHasErrors` method like so:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1040
#: ./docs/9.x/http-tests.md:1119
#: ./docs/10.x/http-tests.md:1206
#: ./docs/11.x/http-tests.md:1514
#: ./docs/master/http-tests.md:1433
msgid "$response->assertSessionHasErrors(['name', 'email']);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1042
#: ./docs/9.x/http-tests.md:1121
#: ./docs/10.x/http-tests.md:1208
#: ./docs/11.x/http-tests.md:1516
#: ./docs/master/http-tests.md:1435
msgid "Or, you may assert that a given field has a particular validation error message:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1044
#: ./docs/9.x/http-tests.md:1123
#: ./docs/10.x/http-tests.md:1210
#: ./docs/11.x/http-tests.md:1518
#: ./docs/master/http-tests.md:1437
msgid "$response->assertSessionHasErrors([\n"
"    'name' => 'The given name was invalid.'\n"
"]);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1048
#: ./docs/9.x/http-tests.md:1130
#: ./docs/10.x/http-tests.md:1217
#: ./docs/11.x/http-tests.md:1525
#: ./docs/master/http-tests.md:1444
#~ msgid "<a name=\"assert-session-has-errors-in\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1049
#: ./docs/9.x/http-tests.md:1131
#: ./docs/10.x/http-tests.md:1218
#: ./docs/11.x/http-tests.md:1526
#: ./docs/master/http-tests.md:1445
msgid "assertSessionHasErrorsIn"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1051
#: ./docs/9.x/http-tests.md:1133
#: ./docs/10.x/http-tests.md:1220
#: ./docs/11.x/http-tests.md:1528
#: ./docs/master/http-tests.md:1447
msgid "Assert that the session contains an error for the given `$keys` within a specific [error bag](/docs/{{version}}/validation#named-error-bags). If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key), within the error bag:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1053
#: ./docs/9.x/http-tests.md:1135
#: ./docs/10.x/http-tests.md:1222
#: ./docs/11.x/http-tests.md:1530
#: ./docs/master/http-tests.md:1449
msgid "$response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1055
#: ./docs/9.x/http-tests.md:1137
#: ./docs/10.x/http-tests.md:1224
#: ./docs/11.x/http-tests.md:1532
#: ./docs/master/http-tests.md:1451
#~ msgid "<a name=\"assert-session-has-no-errors\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1056
#: ./docs/9.x/http-tests.md:1138
#: ./docs/10.x/http-tests.md:1225
#: ./docs/11.x/http-tests.md:1533
#: ./docs/master/http-tests.md:1452
msgid "assertSessionHasNoErrors"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1058
#: ./docs/9.x/http-tests.md:1140
#: ./docs/10.x/http-tests.md:1227
#: ./docs/11.x/http-tests.md:1535
#: ./docs/master/http-tests.md:1454
msgid "Assert that the session has no validation errors:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1060
#: ./docs/9.x/http-tests.md:1142
#: ./docs/10.x/http-tests.md:1229
#: ./docs/11.x/http-tests.md:1537
#: ./docs/master/http-tests.md:1456
msgid "$response->assertSessionHasNoErrors();"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1062
#: ./docs/11.x/http-tests.md:1370
#: ./docs/master/http-tests.md:1289
#~ msgid "<a name=\"assert-payment-required\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/http-tests.md:1062
#: ./docs/9.x/http-tests.md:1144
#: ./docs/10.x/http-tests.md:1231
#: ./docs/11.x/http-tests.md:1539
#: ./docs/master/http-tests.md:1458
#~ msgid "<a name=\"assert-session-doesnt-have-errors\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1063
#: ./docs/11.x/http-tests.md:1371
#: ./docs/master/http-tests.md:1290
msgid "assertPaymentRequired"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1063
#: ./docs/9.x/http-tests.md:1145
#: ./docs/10.x/http-tests.md:1232
#: ./docs/11.x/http-tests.md:1540
#: ./docs/master/http-tests.md:1459
msgid "assertSessionDoesntHaveErrors"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1065
#: ./docs/11.x/http-tests.md:1373
#: ./docs/master/http-tests.md:1292
msgid "Assert that the response has a payment required (402) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1065
#: ./docs/9.x/http-tests.md:1147
#: ./docs/10.x/http-tests.md:1234
#: ./docs/11.x/http-tests.md:1542
#: ./docs/master/http-tests.md:1461
msgid "Assert that the session has no validation errors for the given keys:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1067
#: ./docs/11.x/http-tests.md:1375
#: ./docs/master/http-tests.md:1294
msgid "$response->assertPaymentRequired();"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1067
#: ./docs/9.x/http-tests.md:1149
#: ./docs/10.x/http-tests.md:1236
#: ./docs/11.x/http-tests.md:1544
#: ./docs/master/http-tests.md:1463
msgid "$response->assertSessionDoesntHaveErrors($keys = [], $format = null, $errorBag = 'default');"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1069
#: ./docs/9.x/http-tests.md:1154
#: ./docs/10.x/http-tests.md:1241
#: ./docs/11.x/http-tests.md:1549
#: ./docs/master/http-tests.md:1468
#~ msgid "<a name=\"assert-session-missing\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1070
#: ./docs/9.x/http-tests.md:1155
#: ./docs/10.x/http-tests.md:1242
#: ./docs/11.x/http-tests.md:1550
#: ./docs/master/http-tests.md:1469
msgid "assertSessionMissing"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1072
#: ./docs/9.x/http-tests.md:1157
#: ./docs/10.x/http-tests.md:1244
#: ./docs/11.x/http-tests.md:1552
#: ./docs/master/http-tests.md:1471
msgid "Assert that the session does not contain the given key:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1074
#: ./docs/9.x/http-tests.md:1159
#: ./docs/10.x/http-tests.md:1246
#: ./docs/11.x/http-tests.md:1554
#: ./docs/master/http-tests.md:1473
msgid "$response->assertSessionMissing($key);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1076
#: ./docs/9.x/http-tests.md:1161
#: ./docs/10.x/http-tests.md:1248
#: ./docs/11.x/http-tests.md:1556
#: ./docs/master/http-tests.md:1475
#~ msgid "<a name=\"assert-status\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/http-tests.md:1077
#~ msgid "<a name=\"assert-exact-json-structure\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1077
#: ./docs/9.x/http-tests.md:1162
#: ./docs/10.x/http-tests.md:1249
#: ./docs/11.x/http-tests.md:1557
#: ./docs/master/http-tests.md:1476
msgid "assertStatus"
msgstr ""

# H4
#: ./docs/11.x/http-tests.md:1078
msgid "assertExactJsonStructure"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1079
#: ./docs/9.x/http-tests.md:1164
#: ./docs/10.x/http-tests.md:1251
#: ./docs/11.x/http-tests.md:1559
#: ./docs/master/http-tests.md:1478
msgid "Assert that the response has a given HTTP status code:"
msgstr ""

# P
#: ./docs/11.x/http-tests.md:1080
msgid "Assert that the response contains an exact match of the given JSON structure:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1081
#: ./docs/11.x/http-tests.md:1389
#: ./docs/master/http-tests.md:1308
msgid "$response->assertRedirect($uri = null);"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1081
#: ./docs/9.x/http-tests.md:1166
#: ./docs/10.x/http-tests.md:1253
#: ./docs/11.x/http-tests.md:1561
#: ./docs/master/http-tests.md:1480
msgid "$response->assertStatus($code);"
msgstr ""

# CODE
#: ./docs/11.x/http-tests.md:1082
msgid "$response->assertExactJsonStructure(array $data);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1083
#: ./docs/9.x/http-tests.md:1168
#: ./docs/10.x/http-tests.md:1255
#: ./docs/11.x/http-tests.md:1563
#: ./docs/master/http-tests.md:1482
#~ msgid "<a name=\"assert-successful\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/http-tests.md:1084
msgid "This method is a more strict variant of [assertJsonStructure](#assert-json-structure). In contrast with `assertJsonStructure`, this method will fail if the response contains any keys that aren't explicitly included in the expected JSON structure."
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1084
#: ./docs/9.x/http-tests.md:1169
#: ./docs/10.x/http-tests.md:1256
#: ./docs/11.x/http-tests.md:1564
#: ./docs/master/http-tests.md:1483
msgid "assertSuccessful"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1086
#: ./docs/9.x/http-tests.md:1171
#: ./docs/10.x/http-tests.md:1258
#: ./docs/11.x/http-tests.md:1566
#: ./docs/master/http-tests.md:1485
msgid "Assert that the response has a successful (>= 200 and < 300) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1088
#: ./docs/9.x/http-tests.md:1173
#: ./docs/10.x/http-tests.md:1260
#: ./docs/11.x/http-tests.md:1568
#: ./docs/master/http-tests.md:1487
msgid "$response->assertSuccessful();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1090
#: ./docs/9.x/http-tests.md:1175
#: ./docs/10.x/http-tests.md:1269
#: ./docs/11.x/http-tests.md:1577
#: ./docs/master/http-tests.md:1496
#~ msgid "<a name=\"assert-unauthorized\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1091
#: ./docs/9.x/http-tests.md:1176
#: ./docs/10.x/http-tests.md:1270
#: ./docs/11.x/http-tests.md:1578
#: ./docs/master/http-tests.md:1497
msgid "assertUnauthorized"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1093
#: ./docs/9.x/http-tests.md:1178
#: ./docs/10.x/http-tests.md:1272
#: ./docs/11.x/http-tests.md:1580
#: ./docs/master/http-tests.md:1499
msgid "Assert that the response has an unauthorized (401) HTTP status code:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1095
#: ./docs/11.x/http-tests.md:1403
#: ./docs/master/http-tests.md:1322
msgid "$response->assertRedirectToRoute($name, $parameters = []);"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1095
#: ./docs/9.x/http-tests.md:1180
#: ./docs/10.x/http-tests.md:1274
#: ./docs/11.x/http-tests.md:1582
#: ./docs/master/http-tests.md:1501
msgid "$response->assertUnauthorized();"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1097
#: ./docs/9.x/http-tests.md:1182
#: ./docs/10.x/http-tests.md:1276
#: ./docs/11.x/http-tests.md:1584
#: ./docs/master/http-tests.md:1503
#~ msgid "<a name=\"assert-unprocessable\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1098
#: ./docs/9.x/http-tests.md:1183
#: ./docs/10.x/http-tests.md:1277
#: ./docs/11.x/http-tests.md:1585
#: ./docs/master/http-tests.md:1504
msgid "assertUnprocessable"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1100
#: ./docs/9.x/http-tests.md:1185
#: ./docs/10.x/http-tests.md:1279
#: ./docs/11.x/http-tests.md:1587
#: ./docs/master/http-tests.md:1506
msgid "Assert that the response has an unprocessable entity (422) HTTP status code:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1102
#: ./docs/9.x/http-tests.md:1187
#: ./docs/10.x/http-tests.md:1281
#: ./docs/11.x/http-tests.md:1589
#: ./docs/master/http-tests.md:1508
msgid "$response->assertUnprocessable();"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1104
#: ./docs/11.x/http-tests.md:1412
#: ./docs/master/http-tests.md:1331
#~ msgid "<a name=\"assert-request-timeout\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/http-tests.md:1104
#: ./docs/9.x/http-tests.md:1189
#: ./docs/10.x/http-tests.md:1290
#: ./docs/11.x/http-tests.md:1598
#: ./docs/master/http-tests.md:1517
#~ msgid "<a name=\"assert-valid\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1105
#: ./docs/11.x/http-tests.md:1413
#: ./docs/master/http-tests.md:1332
msgid "assertRequestTimeout"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1105
#: ./docs/9.x/http-tests.md:1190
#: ./docs/9.x/http-tests.md:1298
#: ./docs/10.x/http-tests.md:1291
#: ./docs/10.x/http-tests.md:1399
#: ./docs/11.x/http-tests.md:1599
#: ./docs/11.x/http-tests.md:1713
#: ./docs/master/http-tests.md:1518
#: ./docs/master/http-tests.md:1632
msgid "assertValid"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1107
#: ./docs/11.x/http-tests.md:1415
#: ./docs/master/http-tests.md:1334
msgid "Assert that the response has a request timeout (408) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1107
#: ./docs/9.x/http-tests.md:1192
#: ./docs/9.x/http-tests.md:1300
#: ./docs/10.x/http-tests.md:1293
#: ./docs/10.x/http-tests.md:1401
#: ./docs/11.x/http-tests.md:1601
#: ./docs/11.x/http-tests.md:1715
#: ./docs/master/http-tests.md:1520
#: ./docs/master/http-tests.md:1634
msgid "Assert that the response has no validation errors for the given keys. This method may be used for asserting against responses where the validation errors are returned as a JSON structure or where the validation errors have been flashed to the session:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1109
#: ./docs/11.x/http-tests.md:1417
#: ./docs/master/http-tests.md:1336
msgid "$response->assertRequestTimeout();"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1109
#: ./docs/9.x/http-tests.md:1194
#: ./docs/9.x/http-tests.md:1302
#: ./docs/10.x/http-tests.md:1295
#: ./docs/10.x/http-tests.md:1403
#: ./docs/11.x/http-tests.md:1603
#: ./docs/11.x/http-tests.md:1717
#: ./docs/master/http-tests.md:1522
#: ./docs/master/http-tests.md:1636
msgid "// Assert that no validation errors are present...\n"
"$response->assertValid();\n\n"
"// Assert that the given keys do not have validation errors...\n"
"$response->assertValid(['name', 'email']);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1115
#: ./docs/9.x/http-tests.md:1200
#: ./docs/10.x/http-tests.md:1301
#: ./docs/11.x/http-tests.md:1609
#: ./docs/master/http-tests.md:1528
#~ msgid "<a name=\"assert-invalid\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1116
#: ./docs/9.x/http-tests.md:1201
#: ./docs/9.x/http-tests.md:1309
#: ./docs/10.x/http-tests.md:1302
#: ./docs/10.x/http-tests.md:1410
#: ./docs/11.x/http-tests.md:1610
#: ./docs/11.x/http-tests.md:1724
#: ./docs/master/http-tests.md:1529
#: ./docs/master/http-tests.md:1643
msgid "assertInvalid"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1118
#: ./docs/9.x/http-tests.md:1203
#: ./docs/9.x/http-tests.md:1311
#: ./docs/10.x/http-tests.md:1304
#: ./docs/10.x/http-tests.md:1412
#: ./docs/11.x/http-tests.md:1612
#: ./docs/11.x/http-tests.md:1726
#: ./docs/master/http-tests.md:1531
#: ./docs/master/http-tests.md:1645
msgid "Assert that the response has validation errors for the given keys. This method may be used for asserting against responses where the validation errors are returned as a JSON structure or where the validation errors have been flashed to the session:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1120
#: ./docs/9.x/http-tests.md:1205
#: ./docs/9.x/http-tests.md:1313
#: ./docs/10.x/http-tests.md:1306
#: ./docs/10.x/http-tests.md:1414
#: ./docs/11.x/http-tests.md:1614
#: ./docs/11.x/http-tests.md:1728
#: ./docs/master/http-tests.md:1533
#: ./docs/master/http-tests.md:1647
msgid "$response->assertInvalid(['name', 'email']);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1122
#: ./docs/9.x/http-tests.md:1207
#: ./docs/9.x/http-tests.md:1315
#: ./docs/10.x/http-tests.md:1308
#: ./docs/10.x/http-tests.md:1416
#: ./docs/11.x/http-tests.md:1616
#: ./docs/11.x/http-tests.md:1730
#: ./docs/master/http-tests.md:1535
#: ./docs/master/http-tests.md:1649
msgid "You may also assert that a given key has a particular validation error message. When doing so, you may provide the entire message or only a small portion of the message:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1124
#: ./docs/9.x/http-tests.md:1209
#: ./docs/9.x/http-tests.md:1317
#: ./docs/10.x/http-tests.md:1310
#: ./docs/10.x/http-tests.md:1418
#: ./docs/11.x/http-tests.md:1618
#: ./docs/11.x/http-tests.md:1732
#: ./docs/master/http-tests.md:1537
#: ./docs/master/http-tests.md:1651
msgid "$response->assertInvalid([\n"
"    'name' => 'The name field is required.',\n"
"    'email' => 'valid email address',\n"
"]);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1129
#: ./docs/9.x/http-tests.md:1214
#: ./docs/10.x/http-tests.md:1315
#: ./docs/11.x/http-tests.md:1623
#: ./docs/master/http-tests.md:1542
#~ msgid "<a name=\"assert-view-has\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1130
#: ./docs/9.x/http-tests.md:1215
#: ./docs/10.x/http-tests.md:1316
#: ./docs/11.x/http-tests.md:1624
#: ./docs/master/http-tests.md:1543
msgid "assertViewHas"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1132
#: ./docs/9.x/http-tests.md:1217
msgid "Assert that the response view contains given a piece of data:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1134
#: ./docs/9.x/http-tests.md:1219
#: ./docs/10.x/http-tests.md:1320
#: ./docs/11.x/http-tests.md:1628
#: ./docs/master/http-tests.md:1547
msgid "$response->assertViewHas($key, $value = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1136
#: ./docs/9.x/http-tests.md:1221
#: ./docs/10.x/http-tests.md:1322
#: ./docs/11.x/http-tests.md:1630
#: ./docs/master/http-tests.md:1549
msgid "Passing a closure as the second argument to the `assertViewHas` method will allow you to inspect and make assertions against a particular piece of view data:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1138
#: ./docs/9.x/http-tests.md:1223
#: ./docs/10.x/http-tests.md:1324
#: ./docs/11.x/http-tests.md:1632
#: ./docs/master/http-tests.md:1551
msgid "$response->assertViewHas('user', function (User $user) {\n"
"    return $user->name === 'Taylor';\n"
"});"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1139
#: ./docs/11.x/http-tests.md:1447
#: ./docs/master/http-tests.md:1366
#~ msgid "<a name=\"assert-server-error\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1140
#: ./docs/11.x/http-tests.md:1448
#: ./docs/master/http-tests.md:1367
msgid "assertServerError"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1142
#: ./docs/11.x/http-tests.md:1450
#: ./docs/master/http-tests.md:1369
msgid "Assert that the response has a server error (>= 500 , < 600) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1142
#: ./docs/9.x/http-tests.md:1227
#: ./docs/10.x/http-tests.md:1328
#: ./docs/11.x/http-tests.md:1636
#: ./docs/master/http-tests.md:1555
msgid "In addition, view data may be accessed as array variables on the response, allowing you to conveniently inspect it:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1144
#: ./docs/11.x/http-tests.md:1452
#: ./docs/master/http-tests.md:1371
msgid "$response->assertServerError();"
msgstr ""

# CODE
# CODE: php tab=PHPUnit
#: ./docs/8.x/http-tests.md:1144
#: ./docs/9.x/http-tests.md:1229
#: ./docs/10.x/http-tests.md:1330
#: ./docs/11.x/http-tests.md:1642
#: ./docs/master/http-tests.md:1561
msgid "$this->assertEquals('Taylor', $response['name']);"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1146
#: ./docs/11.x/http-tests.md:1454
#: ./docs/master/http-tests.md:1373
#~ msgid "<a name=\"assert-server-unavailable\"></a>"
#~ msgstr ""

# P
#: ./docs/8.x/http-tests.md:1146
#: ./docs/9.x/http-tests.md:1231
#: ./docs/10.x/http-tests.md:1332
#: ./docs/11.x/http-tests.md:1646
#: ./docs/master/http-tests.md:1565
#~ msgid "<a name=\"assert-view-has-all\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1147
#: ./docs/11.x/http-tests.md:1455
#: ./docs/master/http-tests.md:1374
msgid "assertServiceUnavailable"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1147
#: ./docs/9.x/http-tests.md:1232
#: ./docs/10.x/http-tests.md:1333
#: ./docs/11.x/http-tests.md:1647
#: ./docs/master/http-tests.md:1566
msgid "assertViewHasAll"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1149
#: ./docs/11.x/http-tests.md:1457
#: ./docs/master/http-tests.md:1376
msgid "Assert that the response has a \"Service Unavailable\" (503) HTTP status code:"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1149
#: ./docs/9.x/http-tests.md:1234
#: ./docs/10.x/http-tests.md:1335
#: ./docs/11.x/http-tests.md:1649
#: ./docs/master/http-tests.md:1568
msgid "Assert that the response view has a given list of data:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1151
#: ./docs/11.x/http-tests.md:1459
#: ./docs/master/http-tests.md:1378
msgid "$response->assertServiceUnavailable();"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1151
#: ./docs/9.x/http-tests.md:1236
#: ./docs/10.x/http-tests.md:1337
#: ./docs/11.x/http-tests.md:1651
#: ./docs/master/http-tests.md:1570
msgid "$response->assertViewHasAll(array $data);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1153
#: ./docs/9.x/http-tests.md:1238
#: ./docs/10.x/http-tests.md:1339
#: ./docs/11.x/http-tests.md:1653
#: ./docs/master/http-tests.md:1572
msgid "This method may be used to assert that the view simply contains data matching the given keys:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1155
#: ./docs/9.x/http-tests.md:1240
#: ./docs/10.x/http-tests.md:1341
#: ./docs/11.x/http-tests.md:1655
#: ./docs/master/http-tests.md:1574
msgid "$response->assertViewHasAll([\n"
"    'name',\n"
"    'email',\n"
"]);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1160
#: ./docs/9.x/http-tests.md:1245
#: ./docs/10.x/http-tests.md:1346
#: ./docs/11.x/http-tests.md:1660
#: ./docs/master/http-tests.md:1579
msgid "Or, you may assert that the view data is present and has specific values:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1162
#: ./docs/11.x/http-tests.md:1470
#: ./docs/master/http-tests.md:1389
msgid "$response->assertSessionHas($key, function (User $value) {\n"
"    return $value->name === 'Taylor Otwell';\n"
"});"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1162
#: ./docs/9.x/http-tests.md:1247
#: ./docs/10.x/http-tests.md:1348
#: ./docs/11.x/http-tests.md:1662
#: ./docs/master/http-tests.md:1581
msgid "$response->assertViewHasAll([\n"
"    'name' => 'Taylor Otwell',\n"
"    'email' => 'taylor@example.com,',\n"
"]);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1167
#: ./docs/9.x/http-tests.md:1252
#: ./docs/10.x/http-tests.md:1353
#: ./docs/11.x/http-tests.md:1667
#: ./docs/master/http-tests.md:1586
#~ msgid "<a name=\"assert-view-is\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1168
#: ./docs/9.x/http-tests.md:1253
#: ./docs/10.x/http-tests.md:1354
#: ./docs/11.x/http-tests.md:1668
#: ./docs/master/http-tests.md:1587
msgid "assertViewIs"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1170
#: ./docs/9.x/http-tests.md:1255
#: ./docs/10.x/http-tests.md:1356
#: ./docs/11.x/http-tests.md:1670
#: ./docs/master/http-tests.md:1589
msgid "Assert that the given view was returned by the route:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1172
#: ./docs/9.x/http-tests.md:1257
#: ./docs/10.x/http-tests.md:1358
#: ./docs/11.x/http-tests.md:1672
#: ./docs/master/http-tests.md:1591
msgid "$response->assertViewIs($value);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1174
#: ./docs/9.x/http-tests.md:1259
#: ./docs/10.x/http-tests.md:1360
#: ./docs/11.x/http-tests.md:1674
#: ./docs/master/http-tests.md:1593
#~ msgid "<a name=\"assert-view-missing\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1175
#: ./docs/11.x/http-tests.md:1483
#: ./docs/master/http-tests.md:1402
msgid "use Illuminate\\Support\\Facades\\Crypt;\n\n"
"$response->assertSessionHasInput($key, function (string $value) {\n"
"    return Crypt::decryptString($value) === 'secret';\n"
"});"
msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1175
#: ./docs/9.x/http-tests.md:1260
#: ./docs/10.x/http-tests.md:1361
#: ./docs/11.x/http-tests.md:1675
#: ./docs/master/http-tests.md:1594
msgid "assertViewMissing"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1177
#: ./docs/9.x/http-tests.md:1262
#: ./docs/10.x/http-tests.md:1363
#: ./docs/11.x/http-tests.md:1677
#: ./docs/master/http-tests.md:1596
msgid "Assert that the given data key was not made available to the view returned in the application's response:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1179
#: ./docs/9.x/http-tests.md:1264
#: ./docs/10.x/http-tests.md:1365
#: ./docs/11.x/http-tests.md:1679
#: ./docs/master/http-tests.md:1598
msgid "$response->assertViewMissing($key);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1181
#: ./docs/9.x/http-tests.md:1266
#: ./docs/10.x/http-tests.md:1367
#: ./docs/11.x/http-tests.md:1681
#: ./docs/master/http-tests.md:1600
#~ msgid "<a name=\"authentication-assertions\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/http-tests.md:1182
#: ./docs/9.x/http-tests.md:1267
#: ./docs/10.x/http-tests.md:1368
#: ./docs/11.x/http-tests.md:1682
#: ./docs/master/http-tests.md:1601
msgid "Authentication Assertions"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1184
#: ./docs/9.x/http-tests.md:1269
#: ./docs/10.x/http-tests.md:1370
#: ./docs/11.x/http-tests.md:1684
#: ./docs/master/http-tests.md:1603
msgid "Laravel also provides a variety of authentication related assertions that you may utilize within your application's feature tests. Note that these methods are invoked on the test class itself and not the `Illuminate\\Testing\\TestResponse` instance returned by methods such as `get` and `post`."
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1186
#: ./docs/9.x/http-tests.md:1271
#: ./docs/10.x/http-tests.md:1372
#: ./docs/11.x/http-tests.md:1686
#: ./docs/master/http-tests.md:1605
#~ msgid "<a name=\"assert-authenticated\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1187
#: ./docs/9.x/http-tests.md:1272
#: ./docs/10.x/http-tests.md:1373
#: ./docs/11.x/http-tests.md:1687
#: ./docs/master/http-tests.md:1606
msgid "assertAuthenticated"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1189
#: ./docs/9.x/http-tests.md:1274
#: ./docs/10.x/http-tests.md:1375
#: ./docs/11.x/http-tests.md:1689
#: ./docs/master/http-tests.md:1608
msgid "Assert that a user is authenticated:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1191
#: ./docs/9.x/http-tests.md:1276
#: ./docs/10.x/http-tests.md:1377
#: ./docs/11.x/http-tests.md:1691
#: ./docs/master/http-tests.md:1610
msgid "$this->assertAuthenticated($guard = null);"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1193
#: ./docs/9.x/http-tests.md:1278
#: ./docs/10.x/http-tests.md:1379
#: ./docs/11.x/http-tests.md:1693
#: ./docs/master/http-tests.md:1612
#~ msgid "<a name=\"assert-guest\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1194
#: ./docs/9.x/http-tests.md:1279
#: ./docs/10.x/http-tests.md:1380
#: ./docs/11.x/http-tests.md:1694
#: ./docs/master/http-tests.md:1613
msgid "assertGuest"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1196
#: ./docs/9.x/http-tests.md:1281
#: ./docs/10.x/http-tests.md:1382
#: ./docs/11.x/http-tests.md:1696
#: ./docs/master/http-tests.md:1615
msgid "Assert that a user is not authenticated:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1198
#: ./docs/9.x/http-tests.md:1283
#: ./docs/10.x/http-tests.md:1384
#: ./docs/11.x/http-tests.md:1698
#: ./docs/master/http-tests.md:1617
msgid "$this->assertGuest($guard = null);"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1200
#: ./docs/11.x/http-tests.md:1508
#: ./docs/master/http-tests.md:1427
msgid "$response->assertSessionHasErrors(\n"
"    array $keys = [], $format = null, $errorBag = 'default'\n"
");"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1200
#: ./docs/9.x/http-tests.md:1285
#: ./docs/10.x/http-tests.md:1386
#: ./docs/11.x/http-tests.md:1700
#: ./docs/master/http-tests.md:1619
#~ msgid "<a name=\"assert-authenticated-as\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/http-tests.md:1201
#: ./docs/9.x/http-tests.md:1286
#: ./docs/10.x/http-tests.md:1387
#: ./docs/11.x/http-tests.md:1701
#: ./docs/master/http-tests.md:1620
msgid "assertAuthenticatedAs"
msgstr ""

# P
#: ./docs/8.x/http-tests.md:1203
#: ./docs/9.x/http-tests.md:1288
#: ./docs/10.x/http-tests.md:1389
#: ./docs/11.x/http-tests.md:1703
#: ./docs/master/http-tests.md:1622
msgid "Assert that a specific user is authenticated:"
msgstr ""

# CODE
#: ./docs/8.x/http-tests.md:1205
#: ./docs/9.x/http-tests.md:1290
#: ./docs/10.x/http-tests.md:1391
#: ./docs/11.x/http-tests.md:1705
#: ./docs/master/http-tests.md:1624
msgid "$this->assertAuthenticatedAs($user, $guard = null);"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1262
#: ./docs/11.x/http-tests.md:1570
#: ./docs/master/http-tests.md:1489
#~ msgid "<a name=\"assert-too-many-requests\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1263
#: ./docs/11.x/http-tests.md:1571
#: ./docs/master/http-tests.md:1490
msgid "assertTooManyRequests"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1265
#: ./docs/11.x/http-tests.md:1573
#: ./docs/master/http-tests.md:1492
msgid "Assert that the response has a too many requests (429) HTTP status code:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1267
#: ./docs/11.x/http-tests.md:1575
#: ./docs/master/http-tests.md:1494
msgid "$response->assertTooManyRequests();"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1283
#: ./docs/11.x/http-tests.md:1591
#: ./docs/master/http-tests.md:1510
#~ msgid "<a name=\"assert-unsupported-media-type\"></a>"
#~ msgstr ""

# H4
#: ./docs/10.x/http-tests.md:1284
#: ./docs/11.x/http-tests.md:1592
#: ./docs/master/http-tests.md:1511
msgid "assertUnsupportedMediaType"
msgstr ""

# P
#: ./docs/10.x/http-tests.md:1286
#: ./docs/11.x/http-tests.md:1594
#: ./docs/master/http-tests.md:1513
msgid "Assert that the response has an unsupported media type (415) HTTP status code:"
msgstr ""

# CODE
#: ./docs/10.x/http-tests.md:1288
#: ./docs/11.x/http-tests.md:1596
#: ./docs/master/http-tests.md:1515
msgid "$response->assertUnsupportedMediaType();"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:1292
#: ./docs/10.x/http-tests.md:1393
#: ./docs/11.x/http-tests.md:1707
#: ./docs/master/http-tests.md:1626
#~ msgid "<a name=\"validation-assertions\"></a>"
#~ msgstr ""

# H2
#: ./docs/9.x/http-tests.md:1293
#: ./docs/10.x/http-tests.md:1394
#: ./docs/11.x/http-tests.md:1708
#: ./docs/master/http-tests.md:1627
msgid "Validation Assertions"
msgstr ""

# P
#: ./docs/9.x/http-tests.md:1295
#: ./docs/10.x/http-tests.md:1396
#: ./docs/11.x/http-tests.md:1710
#: ./docs/master/http-tests.md:1629
msgid "Laravel provides two primary validation related assertions that you may use to ensure the data provided in your request was either valid or invalid."
msgstr ""

# P
#: ./docs/9.x/http-tests.md:1297
#: ./docs/10.x/http-tests.md:1398
#: ./docs/11.x/http-tests.md:1712
#: ./docs/master/http-tests.md:1631
#~ msgid "<a name=\"validation-assert-valid\"></a>"
#~ msgstr ""

# P
#: ./docs/9.x/http-tests.md:1308
#: ./docs/10.x/http-tests.md:1409
#: ./docs/11.x/http-tests.md:1723
#: ./docs/master/http-tests.md:1642
#~ msgid "<a name=\"validation-assert-invalid\"></a>"
#~ msgstr ""

# P
#: ./docs/10.x/http-tests.md:1318
#: ./docs/11.x/http-tests.md:1626
#: ./docs/master/http-tests.md:1545
msgid "Assert that the response view contains a given piece of data:"
msgstr ""

# CODE: php tab=Pest
#: ./docs/11.x/http-tests.md:1638
#: ./docs/master/http-tests.md:1557
msgid "expect($response['name'])->toBe('Taylor');"
msgstr ""

