#
msgid ""
msgstr ""

#: docs/8.x/filesystem.md:block 1 (header)
msgid "File Storage"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[The Local Driver](#the-local-driver)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[The Public Disk](#the-public-disk)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Amazon S3 Compatible Filesystems](#amazon-s3-compatible-filesystems)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Caching](#caching)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Obtaining Disk Instances](#obtaining-disk-instances)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[On-Demand Disks](#on-demand-disks)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Retrieving Files](#retrieving-files)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Downloading Files](#downloading-files)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[File URLs](#file-urls)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[File Metadata](#file-metadata)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Storing Files](#storing-files)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[File Uploads](#file-uploads)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[File Visibility](#file-visibility)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Deleting Files](#deleting-files)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Directories](#directories)"
msgstr ""

#: docs/8.x/filesystem.md:block 2 (unordered list)
msgid "[Custom Filesystems](#custom-filesystems)"
msgstr ""

#: docs/8.x/filesystem.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/filesystem.md:block 5 (paragraph)
msgid "Laravel provides a powerful filesystem abstraction thanks to the wonderful [Flysystem](https://github.com/thephpleague/flysystem) PHP package by Frank de Jonge. The Laravel Flysystem integration provides simple drivers for working with local filesystems, SFTP, and Amazon S3. Even better, it's amazingly simple to switch between these storage options between your local development machine and production server as the API remains the same for each system."
msgstr ""

#: docs/8.x/filesystem.md:block 7 (header)
msgid "Configuration"
msgstr ""

#: docs/8.x/filesystem.md:block 8 (paragraph)
msgid "Laravel's filesystem configuration file is located at `config/filesystems.php`. Within this file, you may configure all of your filesystem \"disks\". Each disk represents a particular storage driver and storage location. Example configurations for each supported driver are included in the configuration file so you can modify the configuration to reflect your storage preferences and credentials."
msgstr ""

#: docs/8.x/filesystem.md:block 9 (paragraph)
msgid "The `local` driver interacts with files stored locally on the server running the Laravel application while the `s3` driver is used to write to Amazon's S3 cloud storage service."
msgstr ""

#: docs/8.x/filesystem.md:block 10 (quote)
msgid "{tip} You may configure as many disks as you like and may even have multiple disks that use the same driver."
msgstr ""

#: docs/8.x/filesystem.md:block 12 (header)
msgid "The Local Driver"
msgstr ""

#: docs/8.x/filesystem.md:block 13 (paragraph)
msgid "When using the `local` driver, all file operations are relative to the `root` directory defined in your `filesystems` configuration file. By default, this value is set to the `storage/app` directory. Therefore, the following method would write to `storage/app/example.txt`:"
msgstr ""

#: docs/8.x/filesystem.md:block 14 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"Storage::disk('local')->put('example.txt', 'Contents');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 16 (header)
msgid "The Public Disk"
msgstr ""

#: docs/8.x/filesystem.md:block 17 (paragraph)
msgid "The `public` disk included in your application's `filesystems` configuration file is intended for files that are going to be publicly accessible. By default, the `public` disk uses the `local` driver and stores its files in `storage/app/public`."
msgstr ""

#: docs/8.x/filesystem.md:block 18 (paragraph)
msgid "To make these files accessible from the web, you should create a symbolic link from `public/storage` to `storage/app/public`. Utilizing this folder convention will keep your publicly accessible files in one directory that can be easily shared across deployments when using zero down-time deployment systems like [Envoyer](https://envoyer.io)."
msgstr ""

#: docs/8.x/filesystem.md:block 19 (paragraph)
msgid "To create the symbolic link, you may use the `storage:link` Artisan command:"
msgstr ""

#: docs/8.x/filesystem.md:block 20 (code)
msgid "php artisan storage:link\n"
msgstr ""

#: docs/8.x/filesystem.md:block 21 (paragraph)
msgid "Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the `asset` helper:"
msgstr ""

#: docs/8.x/filesystem.md:block 22 (code)
msgid "echo asset('storage/file.txt');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 23 (paragraph)
msgid "You may configure additional symbolic links in your `filesystems` configuration file. Each of the configured links will be created when you run the `storage:link` command:"
msgstr ""

#: docs/8.x/filesystem.md:block 24 (code)
msgid ""
"'links' => [\n"
"    public_path('storage') => storage_path('app/public'),\n"
"    public_path('images') => storage_path('app/images'),\n"
"],\n"
msgstr ""

#: docs/8.x/filesystem.md:block 26 (header)
msgid "Driver Prerequisites"
msgstr ""

#: docs/8.x/filesystem.md:block 28 (header)
msgid "Composer Packages"
msgstr ""

#: docs/8.x/filesystem.md:block 29 (paragraph)
msgid "Before using the S3 or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr ""

#: docs/8.x/filesystem.md:block 30 (unordered list)
msgid "Amazon S3: `composer require --with-all-dependencies league/flysystem-aws-s3-v3 \"^1.0\"`"
msgstr ""

#: docs/8.x/filesystem.md:block 30 (unordered list)
msgid "SFTP: `composer require league/flysystem-sftp \"~1.0\"`"
msgstr ""

#: docs/8.x/filesystem.md:block 31 (paragraph)
msgid "In addition, you may choose to install a cached adapter for increased performance:"
msgstr ""

#: docs/8.x/filesystem.md:block 32 (unordered list)
msgid "CachedAdapter: `composer require league/flysystem-cached-adapter \"~1.0\"`"
msgstr ""

#: docs/8.x/filesystem.md:block 34 (header)
msgid "S3 Driver Configuration"
msgstr ""

#: docs/8.x/filesystem.md:block 35 (paragraph)
msgid "The S3 driver configuration information is located in your `config/filesystems.php` configuration file. This file contains an example configuration array for an S3 driver. You are free to modify this array with your own S3 configuration and credentials. For convenience, these environment variables match the naming convention used by the AWS CLI."
msgstr ""

#: docs/8.x/filesystem.md:block 37 (header)
msgid "FTP Driver Configuration"
msgstr ""

#: docs/8.x/filesystem.md:block 38 (paragraph)
msgid "Laravel's Flysystem integrations work great with FTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an FTP filesystem, you may use the configuration example below:"
msgstr ""

#: docs/8.x/filesystem.md:block 39 (code)
msgid ""
"'ftp' => [\n"
"    'driver' => 'ftp',\n"
"    'host' => env('FTP_HOST'),\n"
"    'username' => env('FTP_USERNAME'),\n"
"    'password' => env('FTP_PASSWORD'),\n"
"\n"
"    // Optional FTP Settings...\n"
"    // 'port' => env('FTP_PORT', 21),\n"
"    // 'root' => env('FTP_ROOT'),\n"
"    // 'passive' => true,\n"
"    // 'ssl' => true,\n"
"    // 'timeout' => 30,\n"
"],\n"
msgstr ""

#: docs/8.x/filesystem.md:block 41 (header)
msgid "SFTP Driver Configuration"
msgstr ""

#: docs/8.x/filesystem.md:block 42 (paragraph)
msgid "Laravel's Flysystem integrations work great with SFTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an SFTP filesystem, you may use the configuration example below:"
msgstr ""

#: docs/8.x/filesystem.md:block 43 (code)
msgid ""
"'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n"
"    \n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n"
"\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'password' => env('SFTP_PASSWORD'),\n"
"\n"
"    // Optional SFTP Settings...\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT'),\n"
"    // 'timeout' => 30,\n"
"],\n"
msgstr ""

#: docs/8.x/filesystem.md:block 45 (header)
msgid "Amazon S3 Compatible Filesystems"
msgstr ""

#: docs/8.x/filesystem.md:block 46 (paragraph)
msgid "By default, your application's `filesystems` configuration file contains a disk configuration for the `s3` disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as [MinIO](https://github.com/minio/minio) or [DigitalOcean Spaces](https://www.digitalocean.com/products/spaces/)."
msgstr ""

#: docs/8.x/filesystem.md:block 47 (paragraph)
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `url` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr ""

#: docs/8.x/filesystem.md:block 48 (code)
msgid "'endpoint' => env('AWS_ENDPOINT', 'https://minio:9000'),\n"
msgstr ""

#: docs/8.x/filesystem.md:block 50 (header)
msgid "Caching"
msgstr ""

#: docs/8.x/filesystem.md:block 51 (paragraph)
msgid "To enable caching for a given disk, you may add a `cache` directive to the disk's configuration options. The `cache` option should be an array of caching options containing the `disk` name, the `expire` time in seconds, and the cache `prefix`:"
msgstr ""

#: docs/8.x/filesystem.md:block 52 (code)
msgid ""
"'s3' => [\n"
"    'driver' => 's3',\n"
"\n"
"    // Other Disk Options...\n"
"\n"
"    'cache' => [\n"
"        'store' => 'memcached',\n"
"        'expire' => 600,\n"
"        'prefix' => 'cache-prefix',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/filesystem.md:block 54 (header)
msgid "Obtaining Disk Instances"
msgstr ""

#: docs/8.x/filesystem.md:block 55 (paragraph)
msgid "The `Storage` facade may be used to interact with any of your configured disks. For example, you may use the `put` method on the facade to store an avatar on the default disk. If you call methods on the `Storage` facade without first calling the `disk` method, the method will automatically be passed to the default disk:"
msgstr ""

#: docs/8.x/filesystem.md:block 56 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"Storage::put('avatars/1', $content);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 57 (paragraph)
msgid "If your application interacts with multiple disks, you may use the `disk` method on the `Storage` facade to work with files on a particular disk:"
msgstr ""

#: docs/8.x/filesystem.md:block 58 (code)
msgid "Storage::disk('s3')->put('avatars/1', $content);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 60 (header)
msgid "On-Demand Disks"
msgstr ""

#: docs/8.x/filesystem.md:block 61 (paragraph)
msgid "Sometimes you may wish to create a disk at runtime using a given configuration without that configuration actually being present in your application's `filesystems` configuration file. To accomplish this, you may pass a configuration array to the `Storage` facade's `build` method:"
msgstr ""

#: docs/8.x/filesystem.md:block 62 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$disk = Storage::build([\n"
"    'driver' => 'local',\n"
"    'root' => '/path/to/root',\n"
"]);\n"
"\n"
"$disk->put('image.jpg', $content);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 64 (header)
msgid "Retrieving Files"
msgstr ""

#: docs/8.x/filesystem.md:block 65 (paragraph)
msgid "The `get` method may be used to retrieve the contents of a file. The raw string contents of the file will be returned by the method. Remember, all file paths should be specified relative to the disk's \"root\" location:"
msgstr ""

#: docs/8.x/filesystem.md:block 66 (code)
msgid "$contents = Storage::get('file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 67 (paragraph)
msgid "The `exists` method may be used to determine if a file exists on the disk:"
msgstr ""

#: docs/8.x/filesystem.md:block 68 (code)
msgid ""
"if (Storage::disk('s3')->exists('file.jpg')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/filesystem.md:block 69 (paragraph)
msgid "The `missing` method may be used to determine if a file is missing from the disk:"
msgstr ""

#: docs/8.x/filesystem.md:block 70 (code)
msgid ""
"if (Storage::disk('s3')->missing('file.jpg')) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/filesystem.md:block 72 (header)
msgid "Downloading Files"
msgstr ""

#: docs/8.x/filesystem.md:block 73 (paragraph)
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr ""

#: docs/8.x/filesystem.md:block 74 (code)
msgid ""
"return Storage::download('file.jpg');\n"
"\n"
"return Storage::download('file.jpg', $name, $headers);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 76 (header)
msgid "File URLs"
msgstr ""

#: docs/8.x/filesystem.md:block 77 (paragraph)
msgid "You may use the `url` method to get the URL for a given file. If you are using the `local` driver, this will typically just prepend `/storage` to the given path and return a relative URL to the file. If you are using the `s3` driver, the fully qualified remote URL will be returned:"
msgstr ""

#: docs/8.x/filesystem.md:block 78 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$url = Storage::url('file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 79 (paragraph)
msgid "When using the `local` driver, all files that should be publicly accessible should be placed in the `storage/app/public` directory. Furthermore, you should [create a symbolic link](#the-public-disk) at `public/storage` which points to the `storage/app/public` directory."
msgstr ""

#: docs/8.x/filesystem.md:block 80 (quote)
msgid "{note} When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs."
msgstr ""

#: docs/8.x/filesystem.md:block 82 (header)
msgid "Temporary URLs"
msgstr ""

#: docs/8.x/filesystem.md:block 83 (paragraph)
msgid "Using the `temporaryUrl` method, you may create temporary URLs to files stored using the `s3` driver. This method accepts a path and a `DateTime` instance specifying when the URL should expire:"
msgstr ""

#: docs/8.x/filesystem.md:block 84 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$url = Storage::temporaryUrl(\n"
"    'file.jpg', now()->addMinutes(5)\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 85 (paragraph)
msgid "If you need to specify additional [S3 request parameters](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests), you may pass the array of request parameters as the third argument to the `temporaryUrl` method:"
msgstr ""

#: docs/8.x/filesystem.md:block 86 (code)
msgid ""
"$url = Storage::temporaryUrl(\n"
"    'file.jpg',\n"
"    now()->addMinutes(5),\n"
"    [\n"
"        'ResponseContentType' => 'application/octet-stream',\n"
"        'ResponseContentDisposition' => 'attachment; filename=file2.jpg',\n"
"    ]\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 87 (paragraph)
msgid "If you need to customize how temporary URLs are created for a specific storage disk, you can use the `buildTemporaryUrlsUsing` method. For example, this can be useful if you have a controller that allows you to download files stored via a disk that doesn't typically support temporary URLs. Usually, this method should be called from the `boot` method of a service provider:"
msgstr ""

#: docs/8.x/filesystem.md:block 88 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function ($path, $expiration, $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/filesystem.md:block 90 (header)
msgid "URL Host Customization"
msgstr ""

#: docs/8.x/filesystem.md:block 91 (paragraph)
msgid "If you would like to pre-define the host for URLs generated using the `Storage` facade, you may add a `url` option to the disk's configuration array:"
msgstr ""

#: docs/8.x/filesystem.md:block 92 (code)
msgid ""
"'public' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app/public'),\n"
"    'url' => env('APP_URL').'/storage',\n"
"    'visibility' => 'public',\n"
"],\n"
msgstr ""

#: docs/8.x/filesystem.md:block 94 (header)
msgid "File Metadata"
msgstr ""

#: docs/8.x/filesystem.md:block 95 (paragraph)
msgid "In addition to reading and writing files, Laravel can also provide information about the files themselves. For example, the `size` method may be used to get the size of a file in bytes:"
msgstr ""

#: docs/8.x/filesystem.md:block 96 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$size = Storage::size('file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 97 (paragraph)
msgid "The `lastModified` method returns the UNIX timestamp of the last time the file was modified:"
msgstr ""

#: docs/8.x/filesystem.md:block 98 (code)
msgid "$time = Storage::lastModified('file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 100 (header)
msgid "File Paths"
msgstr ""

#: docs/8.x/filesystem.md:block 101 (paragraph)
msgid "You may use the `path` method to get the path for a given file. If you are using the `local` driver, this will return the absolute path to the file. If you are using the `s3` driver, this method will return the relative path to the file in the S3 bucket:"
msgstr ""

#: docs/8.x/filesystem.md:block 102 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$path = Storage::path('file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 104 (header)
msgid "Storing Files"
msgstr ""

#: docs/8.x/filesystem.md:block 105 (paragraph)
msgid "The `put` method may be used to store file contents on a disk. You may also pass a PHP `resource` to the `put` method, which will use Flysystem's underlying stream support. Remember, all file paths should be specified relative to the \"root\" location configured for the disk:"
msgstr ""

#: docs/8.x/filesystem.md:block 106 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"Storage::put('file.jpg', $contents);\n"
"\n"
"Storage::put('file.jpg', $resource);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 108 (header)
msgid "Automatic Streaming"
msgstr ""

#: docs/8.x/filesystem.md:block 109 (paragraph)
msgid "Streaming files to storage offers significantly reduced memory usage. If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the `putFile` or `putFileAs` method. This method accepts either an `Illuminate\\Http\\File` or `Illuminate\\Http\\UploadedFile` instance and will automatically stream the file to your desired location:"
msgstr ""

#: docs/8.x/filesystem.md:block 110 (code)
msgid ""
"use Illuminate\\Http\\File;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"// Automatically generate a unique ID for filename...\n"
"$path = Storage::putFile('photos', new File('/path/to/photo'));\n"
"\n"
"// Manually specify a filename...\n"
"$path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 111 (paragraph)
msgid "There are a few important things to note about the `putFile` method. Note that we only specified a directory name and not a filename. By default, the `putFile` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `putFile` method so you can store the path, including the generated filename, in your database."
msgstr ""

#: docs/8.x/filesystem.md:block 112 (paragraph)
msgid "The `putFile` and `putFileAs` methods also accept an argument to specify the \"visibility\" of the stored file. This is particularly useful if you are storing the file on a cloud disk such as Amazon S3 and would like the file to be publicly accessible via generated URLs:"
msgstr ""

#: docs/8.x/filesystem.md:block 113 (code)
msgid "Storage::putFile('photos', new File('/path/to/photo'), 'public');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 115 (header)
msgid "Prepending & Appending To Files"
msgstr ""

#: docs/8.x/filesystem.md:block 116 (paragraph)
msgid "The `prepend` and `append` methods allow you to write to the beginning or end of a file:"
msgstr ""

#: docs/8.x/filesystem.md:block 117 (code)
msgid ""
"Storage::prepend('file.log', 'Prepended Text');\n"
"\n"
"Storage::append('file.log', 'Appended Text');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 119 (header)
msgid "Copying & Moving Files"
msgstr ""

#: docs/8.x/filesystem.md:block 120 (paragraph)
msgid "The `copy` method may be used to copy an existing file to a new location on the disk, while the `move` method may be used to rename or move an existing file to a new location:"
msgstr ""

#: docs/8.x/filesystem.md:block 121 (code)
msgid ""
"Storage::copy('old/file.jpg', 'new/file.jpg');\n"
"\n"
"Storage::move('old/file.jpg', 'new/file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 123 (header)
msgid "File Uploads"
msgstr ""

#: docs/8.x/filesystem.md:block 124 (paragraph)
msgid "In web applications, one of the most common use-cases for storing files is storing user uploaded files such as photos and documents. Laravel makes it very easy to store uploaded files using the `store` method on an uploaded file instance. Call the `store` method with the path at which you wish to store the uploaded file:"
msgstr ""

#: docs/8.x/filesystem.md:block 125 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request)\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n"
"\n"
"        return $path;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/filesystem.md:block 126 (paragraph)
msgid "There are a few important things to note about this example. Note that we only specified a directory name, not a filename. By default, the `store` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `store` method so you can store the path, including the generated filename, in your database."
msgstr ""

#: docs/8.x/filesystem.md:block 127 (paragraph)
msgid "You may also call the `putFile` method on the `Storage` facade to perform the same file storage operation as the example above:"
msgstr ""

#: docs/8.x/filesystem.md:block 128 (code)
msgid "$path = Storage::putFile('avatars', $request->file('avatar'));\n"
msgstr ""

#: docs/8.x/filesystem.md:block 130 (header)
msgid "Specifying A File Name"
msgstr ""

#: docs/8.x/filesystem.md:block 131 (paragraph)
msgid "If you do not want a filename to be automatically assigned to your stored file, you may use the `storeAs` method, which receives the path, the filename, and the (optional) disk as its arguments:"
msgstr ""

#: docs/8.x/filesystem.md:block 132 (code)
msgid ""
"$path = $request->file('avatar')->storeAs(\n"
"    'avatars', $request->user()->id\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 133 (paragraph)
msgid "You may also use the `putFileAs` method on the `Storage` facade, which will perform the same file storage operation as the example above:"
msgstr ""

#: docs/8.x/filesystem.md:block 134 (code)
msgid ""
"$path = Storage::putFileAs(\n"
"    'avatars', $request->file('avatar'), $request->user()->id\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 135 (quote)
msgid "{note} Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\Util::normalizePath` method."
msgstr ""

#: docs/8.x/filesystem.md:block 137 (header)
msgid "Specifying A Disk"
msgstr ""

#: docs/8.x/filesystem.md:block 138 (paragraph)
msgid "By default, this uploaded file's `store` method will use your default disk. If you would like to specify another disk, pass the disk name as the second argument to the `store` method:"
msgstr ""

#: docs/8.x/filesystem.md:block 139 (code)
msgid ""
"$path = $request->file('avatar')->store(\n"
"    'avatars/'.$request->user()->id, 's3'\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 140 (paragraph)
msgid "If you are using the `storeAs` method, you may pass the disk name as the third argument to the method:"
msgstr ""

#: docs/8.x/filesystem.md:block 141 (code)
msgid ""
"$path = $request->file('avatar')->storeAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 143 (header)
msgid "Other Uploaded File Information"
msgstr ""

#: docs/8.x/filesystem.md:block 144 (paragraph)
msgid "If you would like to get the original name and extension of the uploaded file, you may do so using the `getClientOriginalName` and `getClientOriginalExtension` methods:"
msgstr ""

#: docs/8.x/filesystem.md:block 145 (code)
msgid ""
"$file = $request->file('avatar');\n"
"\n"
"$name = $file->getClientOriginalName();\n"
"$extension = $file->getClientOriginalExtension();\n"
msgstr ""

#: docs/8.x/filesystem.md:block 146 (paragraph)
msgid "However, keep in mind that the `getClientOriginalName` and `getClientOriginalExtension` methods are considered unsafe, as the file name and extension may be tampered with by a malicious user. For this reason, you should typically prefer the `hashName` and `extension` methods to get a name and an extension for the given file upload:"
msgstr ""

#: docs/8.x/filesystem.md:block 147 (code)
msgid ""
"$file = $request->file('avatar');\n"
"\n"
"$name = $file->hashName(); // Generate a unique, random name...\n"
"$extension = $file->extension(); // Determine the file's extension based on the file's MIME type...\n"
msgstr ""

#: docs/8.x/filesystem.md:block 149 (header)
msgid "File Visibility"
msgstr ""

#: docs/8.x/filesystem.md:block 150 (paragraph)
msgid "In Laravel's Flysystem integration, \"visibility\" is an abstraction of file permissions across multiple platforms. Files may either be declared `public` or `private`. When a file is declared `public`, you are indicating that the file should generally be accessible to others. For example, when using the S3 driver, you may retrieve URLs for `public` files."
msgstr ""

#: docs/8.x/filesystem.md:block 151 (paragraph)
msgid "You can set the visibility when writing the file via the `put` method:"
msgstr ""

#: docs/8.x/filesystem.md:block 152 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"Storage::put('file.jpg', $contents, 'public');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 153 (paragraph)
msgid "If the file has already been stored, its visibility can be retrieved and set via the `getVisibility` and `setVisibility` methods:"
msgstr ""

#: docs/8.x/filesystem.md:block 154 (code)
msgid ""
"$visibility = Storage::getVisibility('file.jpg');\n"
"\n"
"Storage::setVisibility('file.jpg', 'public');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 155 (paragraph)
msgid "When interacting with uploaded files, you may use the `storePublicly` and `storePubliclyAs` methods to store the uploaded file with `public` visibility:"
msgstr ""

#: docs/8.x/filesystem.md:block 156 (code)
msgid ""
"$path = $request->file('avatar')->storePublicly('avatars', 's3');\n"
"\n"
"$path = $request->file('avatar')->storePubliclyAs(\n"
"    'avatars',\n"
"    $request->user()->id,\n"
"    's3'\n"
");\n"
msgstr ""

#: docs/8.x/filesystem.md:block 158 (header)
msgid "Local Files & Visibility"
msgstr ""

#: docs/8.x/filesystem.md:block 159 (paragraph)
msgid "When using the `local` driver, `public` [visibility](#file-visibility) translates to `0755` permissions for directories and `0644` permissions for files. You can modify the permissions mappings in your application's `filesystems` configuration file:"
msgstr ""

#: docs/8.x/filesystem.md:block 160 (code)
msgid ""
"'local' => [\n"
"    'driver' => 'local',\n"
"    'root' => storage_path('app'),\n"
"    'permissions' => [\n"
"        'file' => [\n"
"            'public' => 0644,\n"
"            'private' => 0600,\n"
"        ],\n"
"        'dir' => [\n"
"            'public' => 0755,\n"
"            'private' => 0700,\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/filesystem.md:block 162 (header)
msgid "Deleting Files"
msgstr ""

#: docs/8.x/filesystem.md:block 163 (paragraph)
msgid "The `delete` method accepts a single filename or an array of files to delete:"
msgstr ""

#: docs/8.x/filesystem.md:block 164 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"Storage::delete('file.jpg');\n"
"\n"
"Storage::delete(['file.jpg', 'file2.jpg']);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 165 (paragraph)
msgid "If necessary, you may specify the disk that the file should be deleted from:"
msgstr ""

#: docs/8.x/filesystem.md:block 166 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"Storage::disk('s3')->delete('path/file.jpg');\n"
msgstr ""

#: docs/8.x/filesystem.md:block 168 (header)
msgid "Directories"
msgstr ""

#: docs/8.x/filesystem.md:block 170 (header)
msgid "Get All Files Within A Directory"
msgstr ""

#: docs/8.x/filesystem.md:block 171 (paragraph)
msgid "The `files` method returns an array of all of the files in a given directory. If you would like to retrieve a list of all files within a given directory including all subdirectories, you may use the `allFiles` method:"
msgstr ""

#: docs/8.x/filesystem.md:block 172 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$files = Storage::files($directory);\n"
"\n"
"$files = Storage::allFiles($directory);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 174 (header)
msgid "Get All Directories Within A Directory"
msgstr ""

#: docs/8.x/filesystem.md:block 175 (paragraph)
msgid "The `directories` method returns an array of all the directories within a given directory. Additionally, you may use the `allDirectories` method to get a list of all directories within a given directory and all of its subdirectories:"
msgstr ""

#: docs/8.x/filesystem.md:block 176 (code)
msgid ""
"$directories = Storage::directories($directory);\n"
"\n"
"$directories = Storage::allDirectories($directory);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 178 (header)
msgid "Create A Directory"
msgstr ""

#: docs/8.x/filesystem.md:block 179 (paragraph)
msgid "The `makeDirectory` method will create the given directory, including any needed subdirectories:"
msgstr ""

#: docs/8.x/filesystem.md:block 180 (code)
msgid "Storage::makeDirectory($directory);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 182 (header)
msgid "Delete A Directory"
msgstr ""

#: docs/8.x/filesystem.md:block 183 (paragraph)
msgid "Finally, the `deleteDirectory` method may be used to remove a directory and all of its files:"
msgstr ""

#: docs/8.x/filesystem.md:block 184 (code)
msgid "Storage::deleteDirectory($directory);\n"
msgstr ""

#: docs/8.x/filesystem.md:block 186 (header)
msgid "Custom Filesystems"
msgstr ""

#: docs/8.x/filesystem.md:block 187 (paragraph)
msgid "Laravel's Flysystem integration provides support for several \"drivers\" out of the box; however, Flysystem is not limited to these and has adapters for many other storage systems. You can create a custom driver if you want to use one of these additional adapters in your Laravel application."
msgstr ""

#: docs/8.x/filesystem.md:block 188 (paragraph)
msgid "In order to define a custom filesystem you will need a Flysystem adapter. Let's add a community maintained Dropbox adapter to our project:"
msgstr ""

#: docs/8.x/filesystem.md:block 189 (code)
msgid "composer require spatie/flysystem-dropbox\n"
msgstr ""

#: docs/8.x/filesystem.md:block 190 (paragraph)
msgid "Next, you can register the driver within the `boot` method of one of your application's [service providers](/docs/{{version}}/providers). To accomplish this, you should use the `extend` method of the `Storage` facade:"
msgstr ""

#: docs/8.x/filesystem.md:block 191 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $client = new DropboxClient(\n"
"                $config['authorization_token']\n"
"            );\n"
"\n"
"            return new Filesystem(new DropboxAdapter($client));\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/filesystem.md:block 192 (paragraph)
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `League\\Flysystem\\Filesystem`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""

#: docs/8.x/filesystem.md:block 193 (paragraph)
msgid "Once you have created and registered the extension's service provider, you may use the `dropbox` driver in your `config/filesystems.php` configuration file."
msgstr ""

#: docs/9.x/filesystem.md:block 2 (unordered list)
msgid "[Scoped & Read-Only Filesystems](#scoped-and-read-only-filesystems)"
msgstr ""

#: docs/9.x/filesystem.md:block 2 (unordered list)
msgid "[Prepending & Appending To Files](#prepending-appending-to-files)"
msgstr ""

#: docs/9.x/filesystem.md:block 2 (unordered list)
msgid "[Copying & Moving Files](#copying-moving-files)"
msgstr ""

#: docs/9.x/filesystem.md:block 2 (unordered list)
msgid "[Automatic Streaming](#automatic-streaming)"
msgstr ""

#: docs/9.x/filesystem.md:block 10 (quote)
msgid "**Note** You may configure as many disks as you like and may even have multiple disks that use the same driver."
msgstr ""

#: docs/9.x/filesystem.md:block 29 (paragraph)
msgid "Before using the S3 driver, you will need to install the Flysystem S3 package via the Composer package manager:"
msgstr ""

#: docs/9.x/filesystem.md:block 30 (code)
msgid "composer require league/flysystem-aws-s3-v3 \"^3.0\"\n"
msgstr ""

#: docs/9.x/filesystem.md:block 34 (paragraph)
msgid "Before using the FTP driver, you will need to install the Flysystem FTP package via the Composer package manager:"
msgstr ""

#: docs/9.x/filesystem.md:block 35 (code)
msgid "composer require league/flysystem-ftp \"^3.0\"\n"
msgstr ""

#: docs/9.x/filesystem.md:block 40 (paragraph)
msgid "Before using the SFTP driver, you will need to install the Flysystem SFTP package via the Composer package manager:"
msgstr ""

#: docs/9.x/filesystem.md:block 41 (code)
msgid "composer require league/flysystem-sftp-v3 \"^3.0\"\n"
msgstr ""

#: docs/9.x/filesystem.md:block 43 (code)
msgid ""
"'sftp' => [\n"
"    'driver' => 'sftp',\n"
"    'host' => env('SFTP_HOST'),\n"
"\n"
"    // Settings for basic authentication...\n"
"    'username' => env('SFTP_USERNAME'),\n"
"    'password' => env('SFTP_PASSWORD'),\n"
"\n"
"    // Settings for SSH key based authentication with encryption password...\n"
"    'privateKey' => env('SFTP_PRIVATE_KEY'),\n"
"    'passphrase' => env('SFTP_PASSPHRASE'),\n"
"\n"
"    // Optional SFTP Settings...\n"
"    // 'hostFingerprint' => env('SFTP_HOST_FINGERPRINT'),\n"
"    // 'maxTries' => 4,\n"
"    // 'passphrase' => env('SFTP_PASSPHRASE'),\n"
"    // 'port' => env('SFTP_PORT', 22),\n"
"    // 'root' => env('SFTP_ROOT', ''),\n"
"    // 'timeout' => 30,\n"
"    // 'useAgent' => true,\n"
"],\n"
msgstr ""

#: docs/9.x/filesystem.md:block 45 (header)
msgid "Scoped & Read-Only Filesystems"
msgstr ""

#: docs/9.x/filesystem.md:block 46 (paragraph)
msgid "Scoped disks allow you to define a filesystem where all paths are automatically prefixed with a given path prefix. Before creating a scoped filesystem disk, you will need to install an additional Flysystem package via the Composer package manager:"
msgstr ""

#: docs/9.x/filesystem.md:block 47 (code)
msgid "composer require league/flysystem-path-prefixing \"^3.0\"\n"
msgstr ""

#: docs/9.x/filesystem.md:block 48 (paragraph)
msgid "You may create a path scoped instance of any existing filesystem disk by defining a disk that utilizes the `scoped` driver. For example, you may create a disk which scopes your existing `s3` disk to a specific path prefix, and then every file operation using your scoped disk will utilize the specified prefix:"
msgstr ""

#: docs/9.x/filesystem.md:block 49 (code)
msgid ""
"'s3-videos' => [\n"
"    'driver' => 'scoped',\n"
"    'disk' => 's3',\n"
"    'prefix' => 'path/to/videos',\n"
"],\n"
msgstr ""

#: docs/9.x/filesystem.md:block 50 (paragraph)
msgid "\"Read-only\" disks allow you to create filesystem disks that do not allow write operations. Before using the `read-only` configuration option, you will need to install an additional Flysystem package via the Composer package manager:"
msgstr ""

#: docs/9.x/filesystem.md:block 51 (code)
msgid "composer require league/flysystem-read-only \"^3.0\"\n"
msgstr ""

#: docs/9.x/filesystem.md:block 52 (paragraph)
msgid "Next, you may include the `read-only` configuration option in one or more of your disk's configuration arrays:"
msgstr ""

#: docs/9.x/filesystem.md:block 53 (code)
msgid ""
"'s3-videos' => [\n"
"    'driver' => 's3',\n"
"    // ...\n"
"    'read-only' => true,\n"
"],\n"
msgstr ""

#: docs/9.x/filesystem.md:block 57 (paragraph)
msgid "Typically, after updating the disk's credentials to match the credentials of the service you are planning to use, you only need to update the value of the `endpoint` configuration option. This option's value is typically defined via the `AWS_ENDPOINT` environment variable:"
msgstr ""

#: docs/9.x/filesystem.md:block 60 (header)
msgid "MinIO"
msgstr ""

#: docs/9.x/filesystem.md:block 61 (paragraph)
msgid "In order for Laravel's Flysystem integration to generate proper URLs when using MinIO, you should define the `AWS_URL` environment variable so that it matches your application's local URL and includes the bucket name in the URL path:"
msgstr ""

#: docs/9.x/filesystem.md:block 62 (code)
msgid "AWS_URL=http://localhost:9000/local\n"
msgstr ""

#: docs/9.x/filesystem.md:block 63 (quote)
msgid "**Warning** Generating temporary storage URLs via the `temporaryUrl` method is not supported when using MinIO."
msgstr ""

#: docs/9.x/filesystem.md:block 91 (quote)
msgid "**Warning** When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs."
msgstr ""

#: docs/9.x/filesystem.md:block 110 (paragraph)
msgid "The MIME type of a given file may be obtained via the `mimeType` method:"
msgstr ""

#: docs/9.x/filesystem.md:block 111 (code)
msgid "$mime = Storage::mimeType('file.jpg')\n"
msgstr ""

#: docs/9.x/filesystem.md:block 121 (header)
msgid "Failed Writes"
msgstr ""

#: docs/9.x/filesystem.md:block 122 (paragraph)
msgid "If the `put` method (or other \"write\" operations) is unable to write the file to disk, `false` will be returned:"
msgstr ""

#: docs/9.x/filesystem.md:block 123 (code)
msgid ""
"if (! Storage::put('file.jpg', $contents)) {\n"
"    // The file could not be written to disk...\n"
"}\n"
msgstr ""

#: docs/9.x/filesystem.md:block 124 (paragraph)
msgid "If you wish, you may define the `throw` option within your filesystem disk's configuration array. When this option is defined as `true`, \"write\" methods such as `put` will throw an instance of `League\\Flysystem\\UnableToWriteFile` when write operations fail:"
msgstr ""

#: docs/9.x/filesystem.md:block 125 (code)
msgid ""
"'public' => [\n"
"    'driver' => 'local',\n"
"    // ...\n"
"    'throw' => true,\n"
"],\n"
msgstr ""

#: docs/9.x/filesystem.md:block 154 (quote)
msgid "**Warning** Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\WhitespacePathNormalizer::normalizePath` method."
msgstr ""

#: docs/9.x/filesystem.md:block 210 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Storage::extend('dropbox', function ($app, $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n"
"\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/filesystem.md:block 211 (paragraph)
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `Illuminate\\Filesystem\\FilesystemAdapter`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""

#: docs/master/filesystem.md:block 99 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use DateTime;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::disk('local')->buildTemporaryUrlsUsing(function (string $path, DateTime $expiration, array $options) {\n"
"            return URL::temporarySignedRoute(\n"
"                'files.download',\n"
"                $expiration,\n"
"                array_merge($options, ['path' => $path])\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/filesystem.md:block 144 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class UserAvatarController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the avatar for the user.\n"
"     */\n"
"    public function update(Request $request): string\n"
"    {\n"
"        $path = $request->file('avatar')->store('avatars');\n"
"\n"
"        return $path;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/filesystem.md:block 210 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     */\n"
"    public function register(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Storage::extend('dropbox', function (Application $app, array $config) {\n"
"            $adapter = new DropboxAdapter(new DropboxClient(\n"
"                $config['authorization_token']\n"
"            ));\n"
"\n"
"            return new FilesystemAdapter(\n"
"                new Filesystem($adapter, $config),\n"
"                $adapter,\n"
"                $config\n"
"            );\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""
