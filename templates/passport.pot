# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-07 15:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/passport.md, line: 1
# File: docs/master/passport.md, line: 1
#, no-wrap
msgid "Laravel Passport"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 45
# File: docs/master/passport.md, line: 45
#, no-wrap
msgid ""
"- [Introduction](#introduction)\n"
"    - [Passport Or Sanctum?](#passport-or-sanctum)\n"
"- [Installation](#installation)\n"
"    - [Deploying Passport](#deploying-passport)\n"
"    - [Migration Customization](#migration-customization)\n"
"    - [Upgrading Passport](#upgrading-passport)\n"
"- [Configuration](#configuration)\n"
"    - [Client Secret Hashing](#client-secret-hashing)\n"
"    - [Token Lifetimes](#token-lifetimes)\n"
"    - [Overriding Default Models](#overriding-default-models)\n"
"- [Issuing Access Tokens](#issuing-access-tokens)\n"
"    - [Managing Clients](#managing-clients)\n"
"    - [Requesting Tokens](#requesting-tokens)\n"
"    - [Refreshing Tokens](#refreshing-tokens)\n"
"    - [Revoking Tokens](#revoking-tokens)\n"
"    - [Purging Tokens](#purging-tokens)\n"
"- [Authorization Code Grant with PKCE](#code-grant-pkce)\n"
"    - [Creating The Client](#creating-a-auth-pkce-grant-client)\n"
"    - [Requesting Tokens](#requesting-auth-pkce-grant-tokens)\n"
"- [Password Grant Tokens](#password-grant-tokens)\n"
"    - [Creating A Password Grant Client](#creating-a-password-grant-client)\n"
"    - [Requesting Tokens](#requesting-password-grant-tokens)\n"
"    - [Requesting All Scopes](#requesting-all-scopes)\n"
"    - [Customizing The User Provider](#customizing-the-user-provider)\n"
"    - [Customizing The Username Field](#customizing-the-username-field)\n"
"    - [Customizing The Password Validation](#customizing-the-password-validation)\n"
"- [Implicit Grant Tokens](#implicit-grant-tokens)\n"
"- [Client Credentials Grant Tokens](#client-credentials-grant-tokens)\n"
"- [Personal Access Tokens](#personal-access-tokens)\n"
"    - [Creating A Personal Access Client](#creating-a-personal-access-client)\n"
"    - [Managing Personal Access Tokens](#managing-personal-access-tokens)\n"
"- [Protecting Routes](#protecting-routes)\n"
"    - [Via Middleware](#via-middleware)\n"
"    - [Passing The Access Token](#passing-the-access-token)\n"
"- [Token Scopes](#token-scopes)\n"
"    - [Defining Scopes](#defining-scopes)\n"
"    - [Default Scope](#default-scope)\n"
"    - [Assigning Scopes To Tokens](#assigning-scopes-to-tokens)\n"
"    - [Checking Scopes](#checking-scopes)\n"
"- [Consuming Your API With JavaScript](#consuming-your-api-with-javascript)\n"
"- [Events](#events)\n"
"- [Testing](#testing)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 47
# File: docs/master/passport.md, line: 47
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 47
# File: docs/master/passport.md, line: 47
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 50
# File: docs/master/passport.md, line: 50
msgid "[Laravel Passport](https://github.com/laravel/passport) provides a full OAuth2 server implementation for your Laravel application in a matter of minutes. Passport is built on top of the [League OAuth2 server](https://github.com/thephpleague/oauth2-server) that is maintained by Andy Millington and Simon Hamp."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 52
# File: docs/master/passport.md, line: 52
#, no-wrap
msgid "> {note} This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general [terminology](https://oauth2.thephpleague.com/terminology/) and features of OAuth2 before continuing.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 54
# File: docs/master/passport.md, line: 54
#, no-wrap
msgid "<a name=\"passport-or-sanctum\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 54
# File: docs/master/passport.md, line: 54
#, no-wrap
msgid "Passport Or Sanctum?"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 57
# File: docs/master/passport.md, line: 57
msgid "Before getting started, you may wish to determine if your application would be better served by Laravel Passport or [Laravel Sanctum](/docs/{{version}}/sanctum). If your application absolutely needs to support OAuth2, then you should use Laravel Passport."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 59
# File: docs/master/passport.md, line: 59
msgid "However, if you are attempting to authenticate a single-page application, mobile application, or issue API tokens, you should use [Laravel Sanctum](/docs/{{version}}/sanctum). Laravel Sanctum does not support OAuth2; however, it provides a much simpler API authentication development experience."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 61
# File: docs/master/passport.md, line: 61
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 61
# File: docs/master/passport.md, line: 61
#, no-wrap
msgid "Installation"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 64
# File: docs/master/passport.md, line: 64
msgid "To get started, install Passport via the Composer package manager:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 66
# File: docs/master/passport.md, line: 66
#, no-wrap
msgid "    composer require laravel/passport\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 68
# File: docs/master/passport.md, line: 68
msgid "Passport's [service provider](/docs/{{version}}/providers) registers its own database migration directory, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store OAuth2 clients and access tokens:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 70
# File: docs/master/passport.md, line: 70
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 72
# File: docs/master/passport.md, line: 72
msgid "Next, you should execute the `passport:install` Artisan command. This command will create the encryption keys needed to generate secure access tokens. In addition, the command will create \"personal access\" and \"password grant\" clients which will be used to generate access tokens:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 74
# File: docs/master/passport.md, line: 74
#, no-wrap
msgid "    php artisan passport:install\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 76
# File: docs/master/passport.md, line: 76
#, no-wrap
msgid "> {tip} If you would like to use UUIDs as the primary key value of the Passport `Client` model instead of auto-incrementing integers, please install Passport using [the `uuids` option](#client-uuids).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 78
# File: docs/master/passport.md, line: 78
msgid "After running the `passport:install` command, add the `Laravel\\Passport\\HasApiTokens` trait to your `App\\Models\\User` model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes. If your model is already using the `Laravel\\Sanctum\\HasApiTokens` trait, you may remove that trait:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 80
# File: docs/8.x/passport.md, line: 96
# File: docs/8.x/passport.md, line: 408
# File: docs/8.x/passport.md, line: 694
# File: docs/8.x/passport.md, line: 723
# File: docs/master/passport.md, line: 80
# File: docs/master/passport.md, line: 96
# File: docs/master/passport.md, line: 408
# File: docs/master/passport.md, line: 694
# File: docs/master/passport.md, line: 723
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 82
# File: docs/8.x/passport.md, line: 696
# File: docs/8.x/passport.md, line: 725
# File: docs/master/passport.md, line: 82
# File: docs/master/passport.md, line: 696
# File: docs/master/passport.md, line: 725
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 87
# File: docs/master/passport.md, line: 87
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 92
# File: docs/master/passport.md, line: 92
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, HasFactory, Notifiable;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 94
# File: docs/master/passport.md, line: 94
msgid "Next, you should call the `Passport::routes` method within the `boot` method of your `App\\Providers\\AuthServiceProvider`. This method will register the routes necessary to issue access tokens and revoke access tokens, clients, and personal access tokens:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 98
# File: docs/master/passport.md, line: 98
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 102
# File: docs/master/passport.md, line: 102
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 113
# File: docs/master/passport.md, line: 113
#, no-wrap
msgid ""
"    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * The policy mappings for the application.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $policies = [\n"
"            'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n"
"        ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 122
# File: docs/master/passport.md, line: 122
#, no-wrap
msgid ""
"        /**\n"
"         * Register any authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 128
# File: docs/master/passport.md, line: 128
#, no-wrap
msgid ""
"            if (! $this->app->routesAreCached()) {\n"
"                Passport::routes();\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 130
# File: docs/master/passport.md, line: 130
msgid "Finally, in your application's `config/auth.php` configuration file, you should set the `driver` option of the `api` authentication guard to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 136
# File: docs/master/passport.md, line: 136
#, no-wrap
msgid ""
"    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 142
# File: docs/master/passport.md, line: 142
#, no-wrap
msgid ""
"        'api' => [\n"
"            'driver' => 'passport',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 144
# File: docs/master/passport.md, line: 144
#, no-wrap
msgid "<a name=\"client-uuids\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 144
# File: docs/master/passport.md, line: 144
#, no-wrap
msgid "Client UUIDs"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 147
# File: docs/master/passport.md, line: 147
msgid "You may also run the `passport:install` command with the `--uuids` option present. This option will instruct Passport that you would like to use UUIDs instead of auto-incrementing integers as the Passport `Client` model's primary key values. After running the `passport:install` command with the `--uuids` option, you will be given additional instructions regarding disabling Passport's default migrations:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 149
# File: docs/master/passport.md, line: 149
#, no-wrap
msgid "    php artisan passport:install --uuids\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 151
# File: docs/master/passport.md, line: 151
#, no-wrap
msgid "<a name=\"deploying-passport\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 151
# File: docs/master/passport.md, line: 151
#, no-wrap
msgid "Deploying Passport"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 154
# File: docs/master/passport.md, line: 154
msgid "When deploying Passport to your application's servers for the first time, you will likely need to run the `passport:keys` command. This command generates the encryption keys Passport needs in order to generate access tokens. The generated keys are not typically kept in source control:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 156
# File: docs/master/passport.md, line: 156
#, no-wrap
msgid "    php artisan passport:keys\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 158
# File: docs/master/passport.md, line: 158
msgid "If necessary, you may define the path where Passport's keys should be loaded from. You may use the `Passport::loadKeysFrom` method to accomplish this. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 167
# File: docs/8.x/passport.md, line: 231
# File: docs/8.x/passport.md, line: 268
# File: docs/8.x/passport.md, line: 762
# File: docs/8.x/passport.md, line: 990
# File: docs/8.x/passport.md, line: 1136
# File: docs/master/passport.md, line: 167
# File: docs/master/passport.md, line: 231
# File: docs/master/passport.md, line: 268
# File: docs/master/passport.md, line: 762
# File: docs/master/passport.md, line: 990
# File: docs/master/passport.md, line: 1136
#, no-wrap
msgid ""
"    /**\n"
"     * Register any authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 169
# File: docs/8.x/passport.md, line: 233
# File: docs/8.x/passport.md, line: 270
# File: docs/8.x/passport.md, line: 764
# File: docs/8.x/passport.md, line: 992
# File: docs/8.x/passport.md, line: 1138
# File: docs/master/passport.md, line: 169
# File: docs/master/passport.md, line: 233
# File: docs/master/passport.md, line: 270
# File: docs/master/passport.md, line: 764
# File: docs/master/passport.md, line: 992
# File: docs/master/passport.md, line: 1138
#, no-wrap
msgid "        Passport::routes();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 172
# File: docs/master/passport.md, line: 172
#, no-wrap
msgid ""
"        Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 174
# File: docs/master/passport.md, line: 174
#, no-wrap
msgid "<a name=\"loading-keys-from-the-environment\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 174
# File: docs/master/passport.md, line: 174
#, no-wrap
msgid "Loading Keys From The Environment"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 177
# File: docs/master/passport.md, line: 177
msgid "Alternatively, you may publish Passport's configuration file using the `vendor:publish` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 179
# File: docs/master/passport.md, line: 179
#, no-wrap
msgid "    php artisan vendor:publish --tag=passport-config\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 181
# File: docs/master/passport.md, line: 181
msgid "After the configuration file has been published, you may load your application's encryption keys by defining them as environment variables:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/passport.md, line: 182
# File: docs/8.x/passport.md, line: 298
# File: docs/8.x/passport.md, line: 849
# File: docs/master/passport.md, line: 182
# File: docs/master/passport.md, line: 298
# File: docs/master/passport.md, line: 849
#, no-wrap
msgid "bash"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 182
# File: docs/master/passport.md, line: 182
#, no-wrap
msgid ""
"PASSPORT_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n"
"<private key here>\n"
"-----END RSA PRIVATE KEY-----\"\n"
"\n"
"PASSPORT_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\n"
"<public key here>\n"
"-----END PUBLIC KEY-----\"\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 193
# File: docs/master/passport.md, line: 193
#, no-wrap
msgid "<a name=\"migration-customization\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 193
# File: docs/master/passport.md, line: 193
#, no-wrap
msgid "Migration Customization"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 196
# File: docs/master/passport.md, line: 196
msgid "If you are not going to use Passport's default migrations, you should call the `Passport::ignoreMigrations` method in the `register` method of your `App\\Providers\\AppServiceProvider` class. You may export the default migrations using the `vendor:publish` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 198
# File: docs/master/passport.md, line: 198
#, no-wrap
msgid "    php artisan vendor:publish --tag=passport-migrations\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 200
# File: docs/master/passport.md, line: 200
#, no-wrap
msgid "<a name=\"upgrading-passport\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 200
# File: docs/master/passport.md, line: 200
#, no-wrap
msgid "Upgrading Passport"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 203
# File: docs/master/passport.md, line: 203
msgid "When upgrading to a new major version of Passport, it's important that you carefully review [the upgrade guide](https://github.com/laravel/passport/blob/master/UPGRADE.md)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 205
# File: docs/master/passport.md, line: 205
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 205
# File: docs/master/passport.md, line: 205
#, no-wrap
msgid "Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 208
# File: docs/master/passport.md, line: 208
#, no-wrap
msgid "<a name=\"client-secret-hashing\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 208
# File: docs/master/passport.md, line: 208
#, no-wrap
msgid "Client Secret Hashing"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 211
# File: docs/master/passport.md, line: 211
msgid "If you would like your client's secrets to be hashed when stored in your database, you should call the `Passport::hashClientSecrets` method in the `boot` method of your `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 213
# File: docs/8.x/passport.md, line: 1005
# File: docs/8.x/passport.md, line: 1087
# File: docs/master/passport.md, line: 213
# File: docs/master/passport.md, line: 1005
# File: docs/master/passport.md, line: 1087
#, no-wrap
msgid "    use Laravel\\Passport\\Passport;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 215
# File: docs/master/passport.md, line: 215
#, no-wrap
msgid "    Passport::hashClientSecrets();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 217
# File: docs/master/passport.md, line: 217
msgid "Once enabled, all of your client secrets will only be displayable to the user immediately after they are created. Since the plain-text client secret value is never stored in the database, it is not possible to recover the secret's value if it is lost."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 219
# File: docs/master/passport.md, line: 219
#, no-wrap
msgid "<a name=\"token-lifetimes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 219
# File: docs/master/passport.md, line: 219
#, no-wrap
msgid "Token Lifetimes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 222
# File: docs/master/passport.md, line: 222
msgid "By default, Passport issues long-lived access tokens that expire after one year. If you would like to configure a longer / shorter token lifetime, you may use the `tokensExpireIn`, `refreshTokensExpireIn`, and `personalAccessTokensExpireIn` methods. These methods should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 238
# File: docs/master/passport.md, line: 238
#, no-wrap
msgid ""
"        Passport::tokensExpireIn(now()->addDays(15));\n"
"        Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"        Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 240
# File: docs/master/passport.md, line: 240
#, no-wrap
msgid "> {note} The `expires_at` columns on Passport's database tables are read-only and for display purposes only. When issuing tokens, Passport stores the expiration information within the signed and encrypted tokens. If you need to invalidate a token you should [revoke it](#revoking-tokens).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 242
# File: docs/master/passport.md, line: 242
#, no-wrap
msgid "<a name=\"overriding-default-models\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 242
# File: docs/master/passport.md, line: 242
#, no-wrap
msgid "Overriding Default Models"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 245
# File: docs/master/passport.md, line: 245
msgid "You are free to extend the models used internally by Passport by defining your own model and extending the corresponding Passport model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 247
# File: docs/master/passport.md, line: 247
#, no-wrap
msgid "    use Laravel\\Passport\\Client as PassportClient;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 252
# File: docs/master/passport.md, line: 252
#, no-wrap
msgid ""
"    class Client extends PassportClient\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 254
# File: docs/master/passport.md, line: 254
msgid "After defining your model, you may instruct Passport to use your custom model via the `Laravel\\Passport\\Passport` class. Typically, you should inform Passport about your custom models in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 259
# File: docs/master/passport.md, line: 259
#, no-wrap
msgid ""
"    use App\\Models\\Passport\\AuthCode;\n"
"    use App\\Models\\Passport\\Client;\n"
"    use App\\Models\\Passport\\PersonalAccessClient;\n"
"    use App\\Models\\Passport\\Token;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 276
# File: docs/master/passport.md, line: 276
#, no-wrap
msgid ""
"        Passport::useTokenModel(Token::class);\n"
"        Passport::useClientModel(Client::class);\n"
"        Passport::useAuthCodeModel(AuthCode::class);\n"
"        Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 278
# File: docs/master/passport.md, line: 278
#, no-wrap
msgid "<a name=\"issuing-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 278
# File: docs/master/passport.md, line: 278
#, no-wrap
msgid "Issuing Access Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 281
# File: docs/master/passport.md, line: 281
msgid "Using OAuth2 via authorization codes is how most developers are familiar with OAuth2. When using authorization codes, a client application will redirect a user to your server where they will either approve or deny the request to issue an access token to the client."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 283
# File: docs/master/passport.md, line: 283
#, no-wrap
msgid "<a name=\"managing-clients\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 283
# File: docs/master/passport.md, line: 283
#, no-wrap
msgid "Managing Clients"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 286
# File: docs/master/passport.md, line: 286
msgid "First, developers building applications that need to interact with your application's API will need to register their application with yours by creating a \"client\". Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 288
# File: docs/master/passport.md, line: 288
#, no-wrap
msgid "<a name=\"the-passportclient-command\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 288
# File: docs/master/passport.md, line: 288
#, no-wrap
msgid "The `passport:client` Command"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 291
# File: docs/master/passport.md, line: 291
msgid "The simplest way to create a client is using the `passport:client` Artisan command. This command may be used to create your own clients for testing your OAuth2 functionality. When you run the `client` command, Passport will prompt you for more information about your client and will provide you with a client ID and secret:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 293
# File: docs/master/passport.md, line: 293
#, no-wrap
msgid "    php artisan passport:client\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 295
# File: docs/master/passport.md, line: 295
#, no-wrap
msgid "**Redirect URLs**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 297
# File: docs/master/passport.md, line: 297
msgid "If you would like to allow multiple redirect URLs for your client, you may specify them using a comma-delimited list when prompted for the URL by the `passport:client` command. Any URLs which contain commas should be URL encoded:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 298
# File: docs/master/passport.md, line: 298
#, no-wrap
msgid "http://example.com/callback,http://examplefoo.com/callback\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 303
# File: docs/master/passport.md, line: 303
#, no-wrap
msgid "<a name=\"clients-json-api\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 303
# File: docs/8.x/passport.md, line: 458
# File: docs/8.x/passport.md, line: 870
# File: docs/master/passport.md, line: 303
# File: docs/master/passport.md, line: 458
# File: docs/master/passport.md, line: 870
#, no-wrap
msgid "JSON API"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 306
# File: docs/master/passport.md, line: 306
msgid "Since your application's users will not be able to utilize the `client` command, Passport provides a JSON API that you may use to create clients. This saves you the trouble of having to manually code controllers for creating, updating, and deleting clients."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 308
# File: docs/master/passport.md, line: 308
msgid "However, you will need to pair Passport's JSON API with your own frontend to provide a dashboard for your users to manage their clients. Below, we'll review all of the API endpoints for managing clients. For convenience, we'll use [Axios](https://github.com/axios/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 310
# File: docs/8.x/passport.md, line: 875
# File: docs/master/passport.md, line: 310
# File: docs/master/passport.md, line: 875
msgid "The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application. It is not able to be called from an external source."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 312
# File: docs/master/passport.md, line: 312
#, no-wrap
msgid "<a name=\"get-oauthclients\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 312
# File: docs/master/passport.md, line: 312
#, no-wrap
msgid "`GET /oauth/clients`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 315
# File: docs/master/passport.md, line: 315
msgid "This route returns all of the clients for the authenticated user. This is primarily useful for listing all of the user's clients so that they may edit or delete them:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 320
# File: docs/master/passport.md, line: 320
#, no-wrap
msgid ""
"    axios.get('/oauth/clients')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 322
# File: docs/master/passport.md, line: 322
#, no-wrap
msgid "<a name=\"post-oauthclients\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 322
# File: docs/master/passport.md, line: 322
#, no-wrap
msgid "`POST /oauth/clients`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 325
# File: docs/master/passport.md, line: 325
msgid "This route is used to create new clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 327
# File: docs/master/passport.md, line: 327
msgid "When a client is created, it will be issued a client ID and client secret. These values will be used when requesting access tokens from your application. The client creation route will return the new client instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 332
# File: docs/master/passport.md, line: 332
#, no-wrap
msgid ""
"    const data = {\n"
"        name: 'Client Name',\n"
"        redirect: 'http://example.com/callback'\n"
"    };\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 340
# File: docs/master/passport.md, line: 340
#, no-wrap
msgid ""
"    axios.post('/oauth/clients', data)\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 342
# File: docs/master/passport.md, line: 342
#, no-wrap
msgid "<a name=\"put-oauthclientsclient-id\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 342
# File: docs/master/passport.md, line: 342
#, no-wrap
msgid "`PUT /oauth/clients/{client-id}`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 345
# File: docs/master/passport.md, line: 345
msgid "This route is used to update clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization. The route will return the updated client instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 350
# File: docs/master/passport.md, line: 350
#, no-wrap
msgid ""
"    const data = {\n"
"        name: 'New Client Name',\n"
"        redirect: 'http://example.com/callback'\n"
"    };\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 358
# File: docs/master/passport.md, line: 358
#, no-wrap
msgid ""
"    axios.put('/oauth/clients/' + clientId, data)\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 360
# File: docs/master/passport.md, line: 360
#, no-wrap
msgid "<a name=\"delete-oauthclientsclient-id\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 360
# File: docs/master/passport.md, line: 360
#, no-wrap
msgid "`DELETE /oauth/clients/{client-id}`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 363
# File: docs/master/passport.md, line: 363
msgid "This route is used to delete clients:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 368
# File: docs/master/passport.md, line: 368
#, no-wrap
msgid ""
"    axios.delete('/oauth/clients/' + clientId)\n"
"        .then(response => {\n"
"            //\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 370
# File: docs/master/passport.md, line: 370
#, no-wrap
msgid "<a name=\"requesting-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 370
# File: docs/8.x/passport.md, line: 555
# File: docs/8.x/passport.md, line: 648
# File: docs/master/passport.md, line: 370
# File: docs/master/passport.md, line: 555
# File: docs/master/passport.md, line: 648
#, no-wrap
msgid "Requesting Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 373
# File: docs/master/passport.md, line: 373
#, no-wrap
msgid "<a name=\"requesting-tokens-redirecting-for-authorization\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 373
# File: docs/8.x/passport.md, line: 571
# File: docs/master/passport.md, line: 373
# File: docs/master/passport.md, line: 571
#, no-wrap
msgid "Redirecting For Authorization"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 376
# File: docs/master/passport.md, line: 376
msgid "Once a client has been created, developers may use their client ID and secret to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 379
# File: docs/8.x/passport.md, line: 577
# File: docs/master/passport.md, line: 379
# File: docs/master/passport.md, line: 577
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 382
# File: docs/8.x/passport.md, line: 580
# File: docs/8.x/passport.md, line: 774
# File: docs/master/passport.md, line: 382
# File: docs/master/passport.md, line: 580
# File: docs/master/passport.md, line: 774
#, no-wrap
msgid ""
"    Route::get('/redirect', function (Request $request) {\n"
"        $request->session()->put('state', $state = Str::random(40));\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 390
# File: docs/master/passport.md, line: 390
#, no-wrap
msgid ""
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"        ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 393
# File: docs/8.x/passport.md, line: 601
# File: docs/8.x/passport.md, line: 785
# File: docs/8.x/passport.md, line: 1034
# File: docs/master/passport.md, line: 393
# File: docs/master/passport.md, line: 601
# File: docs/master/passport.md, line: 785
# File: docs/master/passport.md, line: 1034
#, no-wrap
msgid ""
"        return redirect('http://passport-app.test/oauth/authorize?'.$query);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 395
# File: docs/8.x/passport.md, line: 787
# File: docs/master/passport.md, line: 395
# File: docs/master/passport.md, line: 787
#, no-wrap
msgid "> {tip} Remember, the `/oauth/authorize` route is already defined by the `Passport::routes` method. You do not need to manually define this route.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 397
# File: docs/master/passport.md, line: 397
#, no-wrap
msgid "<a name=\"approving-the-request\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 397
# File: docs/master/passport.md, line: 397
#, no-wrap
msgid "Approving The Request"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 400
# File: docs/master/passport.md, line: 400
msgid "When receiving authorization requests, Passport will automatically display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the `redirect_uri` that was specified by the consuming application. The `redirect_uri` must match the `redirect` URL that was specified when the client was created."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 402
# File: docs/master/passport.md, line: 402
msgid "If you would like to customize the authorization approval screen, you may publish Passport's views using the `vendor:publish` Artisan command. The published views will be placed in the `resources/views/vendor/passport` directory:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 404
# File: docs/master/passport.md, line: 404
#, no-wrap
msgid "    php artisan vendor:publish --tag=passport-views\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 406
# File: docs/master/passport.md, line: 406
msgid "Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by [extending the `Client` model](#overriding-default-models) and defining a `skipsAuthorization` method. If `skipsAuthorization` returns `true` the client will be approved and the user will be redirected back to the `redirect_uri` immediately:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 410
# File: docs/master/passport.md, line: 410
#, no-wrap
msgid "    namespace App\\Models\\Passport;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 412
# File: docs/master/passport.md, line: 412
#, no-wrap
msgid "    use Laravel\\Passport\\Client as BaseClient;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 425
# File: docs/master/passport.md, line: 425
#, no-wrap
msgid ""
"    class Client extends BaseClient\n"
"    {\n"
"        /**\n"
"         * Determine if the client should skip the authorization prompt.\n"
"         *\n"
"         * @return bool\n"
"         */\n"
"        public function skipsAuthorization()\n"
"        {\n"
"            return $this->firstParty();\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 427
# File: docs/master/passport.md, line: 427
#, no-wrap
msgid "<a name=\"requesting-tokens-converting-authorization-codes-to-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 427
# File: docs/8.x/passport.md, line: 603
# File: docs/master/passport.md, line: 427
# File: docs/master/passport.md, line: 603
#, no-wrap
msgid "Converting Authorization Codes To Access Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 430
# File: docs/master/passport.md, line: 430
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should first verify the `state` parameter against the value that was stored prior to the redirect. If the state parameter matches then the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 433
# File: docs/8.x/passport.md, line: 611
# File: docs/master/passport.md, line: 433
# File: docs/master/passport.md, line: 611
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 436
# File: docs/8.x/passport.md, line: 614
# File: docs/master/passport.md, line: 436
# File: docs/master/passport.md, line: 614
#, no-wrap
msgid ""
"    Route::get('/callback', function (Request $request) {\n"
"        $state = $request->session()->pull('state');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 441
# File: docs/8.x/passport.md, line: 621
# File: docs/master/passport.md, line: 441
# File: docs/master/passport.md, line: 621
#, no-wrap
msgid ""
"        throw_unless(\n"
"            strlen($state) > 0 && $state === $request->state,\n"
"            InvalidArgumentException::class\n"
"        );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 449
# File: docs/master/passport.md, line: 449
#, no-wrap
msgid ""
"        $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"            'grant_type' => 'authorization_code',\n"
"            'client_id' => 'client-id',\n"
"            'client_secret' => 'client-secret',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'code' => $request->code,\n"
"        ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 452
# File: docs/8.x/passport.md, line: 632
# File: docs/master/passport.md, line: 452
# File: docs/master/passport.md, line: 632
#, no-wrap
msgid ""
"        return $response->json();\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 454
# File: docs/8.x/passport.md, line: 497
# File: docs/master/passport.md, line: 454
# File: docs/master/passport.md, line: 497
msgid "This `/oauth/token` route will return a JSON response containing `access_token`, `refresh_token`, and `expires_in` attributes. The `expires_in` attribute contains the number of seconds until the access token expires."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 456
# File: docs/master/passport.md, line: 456
#, no-wrap
msgid "> {tip} Like the `/oauth/authorize` route, the `/oauth/token` route is defined for you by the `Passport::routes` method. There is no need to manually define this route.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 458
# File: docs/master/passport.md, line: 458
#, no-wrap
msgid "<a name=\"tokens-json-api\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 461
# File: docs/master/passport.md, line: 461
msgid "Passport also includes a JSON API for managing authorized access tokens. You may pair this with your own frontend to offer your users a dashboard for managing access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints. The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 463
# File: docs/master/passport.md, line: 463
#, no-wrap
msgid "<a name=\"get-oauthtokens\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 463
# File: docs/master/passport.md, line: 463
#, no-wrap
msgid "`GET /oauth/tokens`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 466
# File: docs/master/passport.md, line: 466
msgid "This route returns all of the authorized access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they can revoke them:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 471
# File: docs/master/passport.md, line: 471
#, no-wrap
msgid ""
"    axios.get('/oauth/tokens')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 473
# File: docs/master/passport.md, line: 473
#, no-wrap
msgid "<a name=\"delete-oauthtokenstoken-id\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 473
# File: docs/master/passport.md, line: 473
#, no-wrap
msgid "`DELETE /oauth/tokens/{token-id}`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 476
# File: docs/master/passport.md, line: 476
msgid "This route may be used to revoke authorized access tokens and their related refresh tokens:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 478
# File: docs/master/passport.md, line: 478
#, no-wrap
msgid "    axios.delete('/oauth/tokens/' + tokenId);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 480
# File: docs/master/passport.md, line: 480
#, no-wrap
msgid "<a name=\"refreshing-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 480
# File: docs/master/passport.md, line: 480
#, no-wrap
msgid "Refreshing Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 483
# File: docs/master/passport.md, line: 483
msgid "If your application issues short-lived access tokens, users will need to refresh their access tokens via the refresh token that was provided to them when the access token was issued:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 485
# File: docs/8.x/passport.md, line: 653
# File: docs/8.x/passport.md, line: 673
# File: docs/8.x/passport.md, line: 823
# File: docs/8.x/passport.md, line: 964
# File: docs/master/passport.md, line: 485
# File: docs/master/passport.md, line: 653
# File: docs/master/passport.md, line: 673
# File: docs/master/passport.md, line: 823
# File: docs/master/passport.md, line: 964
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 493
# File: docs/master/passport.md, line: 493
#, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'refresh_token',\n"
"        'refresh_token' => 'the-refresh-token',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'scope' => '',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 495
# File: docs/8.x/passport.md, line: 664
# File: docs/8.x/passport.md, line: 971
# File: docs/master/passport.md, line: 495
# File: docs/master/passport.md, line: 664
# File: docs/master/passport.md, line: 971
#, no-wrap
msgid "    return $response->json();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 499
# File: docs/master/passport.md, line: 499
#, no-wrap
msgid "<a name=\"revoking-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 499
# File: docs/master/passport.md, line: 499
#, no-wrap
msgid "Revoking Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 502
# File: docs/master/passport.md, line: 502
msgid "You may revoke a token by using the `revokeAccessToken` method on the `Laravel\\Passport\\TokenRepository`. You may revoke a token's refresh tokens using the `revokeRefreshTokensByAccessTokenId` method on the `Laravel\\Passport\\RefreshTokenRepository`. These classes may be resolved using Laravel's [service container](/docs/{{version}}/container):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 505
# File: docs/master/passport.md, line: 505
#, no-wrap
msgid ""
"    use Laravel\\Passport\\TokenRepository;\n"
"    use Laravel\\Passport\\RefreshTokenRepository;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 508
# File: docs/master/passport.md, line: 508
#, no-wrap
msgid ""
"    $tokenRepository = app(TokenRepository::class);\n"
"    $refreshTokenRepository = app(RefreshTokenRepository::class);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 511
# File: docs/master/passport.md, line: 511
#, no-wrap
msgid ""
"    // Revoke an access token...\n"
"    $tokenRepository->revokeAccessToken($tokenId);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 514
# File: docs/master/passport.md, line: 514
#, no-wrap
msgid ""
"    // Revoke all of the token's refresh tokens...\n"
"    $refreshTokenRepository->revokeRefreshTokensByAccessTokenId($tokenId);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 516
# File: docs/master/passport.md, line: 516
#, no-wrap
msgid "<a name=\"purging-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 516
# File: docs/master/passport.md, line: 516
#, no-wrap
msgid "Purging Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 519
# File: docs/master/passport.md, line: 519
msgid "When tokens have been revoked or expired, you might want to purge them from the database. Passport's included `passport:purge` Artisan command can do this for you:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 522
# File: docs/master/passport.md, line: 522
#, no-wrap
msgid ""
"    # Purge revoked and expired tokens and auth codes...\n"
"    php artisan passport:purge\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 525
# File: docs/master/passport.md, line: 525
#, no-wrap
msgid ""
"    # Only purge revoked tokens and auth codes...\n"
"    php artisan passport:purge --revoked\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 528
# File: docs/master/passport.md, line: 528
#, no-wrap
msgid ""
"    # Only purge expired tokens and auth codes...\n"
"    php artisan passport:purge --expired\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 530
# File: docs/master/passport.md, line: 530
msgid "You may also configure a [scheduled job](/docs/{{version}}/scheduling) in your application's `App\\Console\\Kernel` class to automatically prune your tokens on a schedule:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 541
# File: docs/master/passport.md, line: 541
#, no-wrap
msgid ""
"    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->command('passport:purge')->hourly();\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 543
# File: docs/master/passport.md, line: 543
#, no-wrap
msgid "<a name=\"code-grant-pkce\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 543
# File: docs/master/passport.md, line: 543
#, no-wrap
msgid "Authorization Code Grant with PKCE"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 546
# File: docs/master/passport.md, line: 546
msgid "The Authorization Code grant with \"Proof Key for Code Exchange\" (PKCE) is a secure way to authenticate single page applications or native applications to access your API. This grant should be used when you can't guarantee that the client secret will be stored confidentially or in order to mitigate the threat of having the authorization code intercepted by an attacker. A combination of a \"code verifier\" and a \"code challenge\" replaces the client secret when exchanging the authorization code for an access token."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 548
# File: docs/master/passport.md, line: 548
#, no-wrap
msgid "<a name=\"creating-a-auth-pkce-grant-client\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 548
# File: docs/master/passport.md, line: 548
#, no-wrap
msgid "Creating The Client"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 551
# File: docs/master/passport.md, line: 551
msgid "Before your application can issue tokens via the authorization code grant with PKCE, you will need to create a PKCE-enabled client. You may do this using the `passport:client` Artisan command with the `--public` option:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 553
# File: docs/master/passport.md, line: 553
#, no-wrap
msgid "    php artisan passport:client --public\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 555
# File: docs/master/passport.md, line: 555
#, no-wrap
msgid "<a name=\"requesting-auth-pkce-grant-tokens\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 558
# File: docs/master/passport.md, line: 558
#, no-wrap
msgid "<a name=\"code-verifier-code-challenge\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 558
# File: docs/master/passport.md, line: 558
#, no-wrap
msgid "Code Verifier & Code Challenge"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 561
# File: docs/master/passport.md, line: 561
msgid "As this authorization grant does not provide a client secret, developers will need to generate a combination of a code verifier and a code challenge in order to request a token."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 563
# File: docs/master/passport.md, line: 563
msgid "The code verifier should be a random string of between 43 and 128 characters containing letters, numbers, and `\"-\"`, `\".\"`, `\"_\"`, `\"~\"` characters, as defined in the [RFC 7636 specification](https://tools.ietf.org/html/rfc7636)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 565
# File: docs/master/passport.md, line: 565
msgid "The code challenge should be a Base64 encoded string with URL and filename-safe characters. The trailing `'='` characters should be removed and no line breaks, whitespace, or other additional characters should be present."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 567
# File: docs/master/passport.md, line: 567
#, no-wrap
msgid "    $encoded = base64_encode(hash('sha256', $code_verifier, true));\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 569
# File: docs/master/passport.md, line: 569
#, no-wrap
msgid "    $codeChallenge = strtr(rtrim($encoded, '='), '+/', '-_');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 571
# File: docs/master/passport.md, line: 571
#, no-wrap
msgid "<a name=\"code-grant-pkce-redirecting-for-authorization\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 574
# File: docs/master/passport.md, line: 574
msgid "Once a client has been created, you may use the client ID and the generated code verifier and code challenge to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 584
# File: docs/master/passport.md, line: 584
#, no-wrap
msgid ""
"        $request->session()->put(\n"
"            'code_verifier', $code_verifier = Str::random(128)\n"
"        );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 588
# File: docs/master/passport.md, line: 588
#, no-wrap
msgid ""
"        $codeChallenge = strtr(rtrim(\n"
"            base64_encode(hash('sha256', $code_verifier, true))\n"
"        , '='), '+/', '-_');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 598
# File: docs/master/passport.md, line: 598
#, no-wrap
msgid ""
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"            'code_challenge' => $codeChallenge,\n"
"            'code_challenge_method' => 'S256',\n"
"        ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 603
# File: docs/master/passport.md, line: 603
#, no-wrap
msgid "<a name=\"code-grant-pkce-converting-authorization-codes-to-access-tokens\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 606
# File: docs/master/passport.md, line: 606
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should verify the `state` parameter against the value that was stored prior to the redirect, as in the standard Authorization Code Grant."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 608
# File: docs/master/passport.md, line: 608
msgid "If the state parameter matches, the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request along with the originally generated code verifier:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 616
# File: docs/master/passport.md, line: 616
#, no-wrap
msgid "        $codeVerifier = $request->session()->pull('code_verifier');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 629
# File: docs/master/passport.md, line: 629
#, no-wrap
msgid ""
"        $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"            'grant_type' => 'authorization_code',\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'code_verifier' => $codeVerifier,\n"
"            'code' => $request->code,\n"
"        ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 634
# File: docs/master/passport.md, line: 634
#, no-wrap
msgid "<a name=\"password-grant-tokens\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 634
# File: docs/master/passport.md, line: 634
#, no-wrap
msgid "Password Grant Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 637
# File: docs/master/passport.md, line: 637
#, no-wrap
msgid "> {note} We no longer recommend using password grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 639
# File: docs/master/passport.md, line: 639
msgid "The OAuth2 password grant allows your other first-party clients, such as a mobile application, to obtain an access token using an email address / username and password. This allows you to issue access tokens securely to your first-party clients without requiring your users to go through the entire OAuth2 authorization code redirect flow."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 641
# File: docs/master/passport.md, line: 641
#, no-wrap
msgid "<a name=\"creating-a-password-grant-client\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 641
# File: docs/master/passport.md, line: 641
#, no-wrap
msgid "Creating A Password Grant Client"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 644
# File: docs/master/passport.md, line: 644
msgid "Before your application can issue tokens via the password grant, you will need to create a password grant client. You may do this using the `passport:client` Artisan command with the `--password` option. **If you have already run the `passport:install` command, you do not need to run this command:**"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 646
# File: docs/master/passport.md, line: 646
#, no-wrap
msgid "    php artisan passport:client --password\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 648
# File: docs/master/passport.md, line: 648
#, no-wrap
msgid "<a name=\"requesting-password-grant-tokens\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 651
# File: docs/master/passport.md, line: 651
msgid "Once you have created a password grant client, you may request an access token by issuing a `POST` request to the `/oauth/token` route with the user's email address and password. Remember, this route is already registered by the `Passport::routes` method so there is no need to define it manually. If the request is successful, you will receive an `access_token` and `refresh_token` in the JSON response from the server:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 662
# File: docs/master/passport.md, line: 662
#, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'password',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'username' => 'taylor@laravel.com',\n"
"        'password' => 'my-password',\n"
"        'scope' => '',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 666
# File: docs/master/passport.md, line: 666
#, no-wrap
msgid "> {tip} Remember, access tokens are long-lived by default. However, you are free to [configure your maximum access token lifetime](#configuration) if needed.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 668
# File: docs/master/passport.md, line: 668
#, no-wrap
msgid "<a name=\"requesting-all-scopes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 668
# File: docs/master/passport.md, line: 668
#, no-wrap
msgid "Requesting All Scopes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 671
# File: docs/master/passport.md, line: 671
msgid "When using the password grant or client credentials grant, you may wish to authorize the token for all of the scopes supported by your application. You can do this by requesting the `*` scope. If you request the `*` scope, the `can` method on the token instance will always return `true`. This scope may only be assigned to a token that is issued using the `password` or `client_credentials` grant:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 682
# File: docs/master/passport.md, line: 682
#, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'password',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'username' => 'taylor@laravel.com',\n"
"        'password' => 'my-password',\n"
"        'scope' => '*',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 684
# File: docs/master/passport.md, line: 684
#, no-wrap
msgid "<a name=\"customizing-the-user-provider\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 684
# File: docs/master/passport.md, line: 684
#, no-wrap
msgid "Customizing The User Provider"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 687
# File: docs/master/passport.md, line: 687
msgid "If your application uses more than one [authentication user provider](/docs/{{version}}/authentication#introduction), you may specify which user provider the password grant client uses by providing a `--provider` option when creating the client via the `artisan passport:client --password` command. The given provider name should match a valid provider defined in your application's `config/auth.php` configuration file. You can then [protect your route using middleware](#via-middleware) to ensure that only users from the guard's specified provider are authorized."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 689
# File: docs/master/passport.md, line: 689
#, no-wrap
msgid "<a name=\"customizing-the-username-field\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 689
# File: docs/master/passport.md, line: 689
#, no-wrap
msgid "Customizing The Username Field"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 692
# File: docs/master/passport.md, line: 692
msgid "When authenticating using the password grant, Passport will use the `email` attribute of your authenticatable model as the \"username\". However, you may customize this behavior by defining a `findForPassport` method on your model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 700
# File: docs/master/passport.md, line: 700
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 704
# File: docs/8.x/passport.md, line: 734
# File: docs/master/passport.md, line: 704
# File: docs/master/passport.md, line: 734
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, Notifiable;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 716
# File: docs/master/passport.md, line: 716
#, no-wrap
msgid ""
"        /**\n"
"         * Find the user instance for the given username.\n"
"         *\n"
"         * @param  string  $username\n"
"         * @return \\App\\Models\\User\n"
"         */\n"
"        public function findForPassport($username)\n"
"        {\n"
"            return $this->where('username', $username)->first();\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 718
# File: docs/master/passport.md, line: 718
#, no-wrap
msgid "<a name=\"customizing-the-password-validation\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 718
# File: docs/master/passport.md, line: 718
#, no-wrap
msgid "Customizing The Password Validation"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 721
# File: docs/master/passport.md, line: 721
msgid "When authenticating using the password grant, Passport will use the `password` attribute of your model to validate the given password. If your model does not have a `password` attribute or you wish to customize the password validation logic, you can define a `validateForPassportPasswordGrant` method on your model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 730
# File: docs/master/passport.md, line: 730
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 746
# File: docs/master/passport.md, line: 746
#, no-wrap
msgid ""
"        /**\n"
"         * Validate the password of the user for the Passport password grant.\n"
"         *\n"
"         * @param  string  $password\n"
"         * @return bool\n"
"         */\n"
"        public function validateForPassportPasswordGrant($password)\n"
"        {\n"
"            return Hash::check($password, $this->password);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 748
# File: docs/master/passport.md, line: 748
#, no-wrap
msgid "<a name=\"implicit-grant-tokens\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 748
# File: docs/master/passport.md, line: 748
#, no-wrap
msgid "Implicit Grant Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 751
# File: docs/master/passport.md, line: 751
#, no-wrap
msgid "> {note} We no longer recommend using implicit grant tokens. Instead, you should choose [a grant type that is currently recommended by OAuth2 Server](https://oauth2.thephpleague.com/authorization-server/which-grant/).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 753
# File: docs/master/passport.md, line: 753
msgid "The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored. To enable the grant, call the `enableImplicitGrant` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 767
# File: docs/master/passport.md, line: 767
#, no-wrap
msgid ""
"        Passport::enableImplicitGrant();\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 769
# File: docs/master/passport.md, line: 769
msgid "Once the grant has been enabled, developers may use their client ID to request an access token from your application. The consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 771
# File: docs/8.x/passport.md, line: 1074
# File: docs/master/passport.md, line: 771
# File: docs/master/passport.md, line: 1074
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 782
# File: docs/master/passport.md, line: 782
#, no-wrap
msgid ""
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'token',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"        ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 789
# File: docs/master/passport.md, line: 789
#, no-wrap
msgid "<a name=\"client-credentials-grant-tokens\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 789
# File: docs/master/passport.md, line: 789
#, no-wrap
msgid "Client Credentials Grant Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 792
# File: docs/master/passport.md, line: 792
msgid "The client credentials grant is suitable for machine-to-machine authentication. For example, you might use this grant in a scheduled job which is performing maintenance tasks over an API."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 794
# File: docs/master/passport.md, line: 794
msgid "Before your application can issue tokens via the client credentials grant, you will need to create a client credentials grant client. You may do this using the `--client` option of the `passport:client` Artisan command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 796
# File: docs/master/passport.md, line: 796
#, no-wrap
msgid "    php artisan passport:client --client\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 798
# File: docs/master/passport.md, line: 798
msgid "Next, to use this grant type, you need to add the `CheckClientCredentials` middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 800
# File: docs/master/passport.md, line: 800
#, no-wrap
msgid "    use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 804
# File: docs/master/passport.md, line: 804
#, no-wrap
msgid ""
"    protected $routeMiddleware = [\n"
"        'client' => CheckClientCredentials::class,\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 806
# File: docs/master/passport.md, line: 806
msgid "Then, attach the middleware to a route:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 810
# File: docs/master/passport.md, line: 810
#, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        ...\n"
"    })->middleware('client');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 812
# File: docs/master/passport.md, line: 812
msgid "To restrict access to the route to specific scopes, you may provide a comma-delimited list of the required scopes when attaching the `client` middleware to the route:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 816
# File: docs/master/passport.md, line: 816
#, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        ...\n"
"    })->middleware('client:check-status,your-scope');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 818
# File: docs/master/passport.md, line: 818
#, no-wrap
msgid "<a name=\"retrieving-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 818
# File: docs/master/passport.md, line: 818
#, no-wrap
msgid "Retrieving Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 821
# File: docs/master/passport.md, line: 821
msgid "To retrieve a token using this grant type, make a request to the `oauth/token` endpoint:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 830
# File: docs/master/passport.md, line: 830
#, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n"
"        'grant_type' => 'client_credentials',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'scope' => 'your-scope',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 832
# File: docs/master/passport.md, line: 832
#, no-wrap
msgid "    return $response->json()['access_token'];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 834
# File: docs/master/passport.md, line: 834
#, no-wrap
msgid "<a name=\"personal-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 834
# File: docs/master/passport.md, line: 834
#, no-wrap
msgid "Personal Access Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 837
# File: docs/master/passport.md, line: 837
msgid "Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow. Allowing users to issue tokens to themselves via your application's UI can be useful for allowing users to experiment with your API or may serve as a simpler approach to issuing access tokens in general."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 839
# File: docs/master/passport.md, line: 839
#, no-wrap
msgid "> {tip} If your application is primarily using Passport to issue personal access tokens, consider using [Laravel Sanctum](/docs/{{version}}/sanctum), Laravel's light-weight first-party library for issuing API access tokens.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 841
# File: docs/master/passport.md, line: 841
#, no-wrap
msgid "<a name=\"creating-a-personal-access-client\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 841
# File: docs/master/passport.md, line: 841
#, no-wrap
msgid "Creating A Personal Access Client"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 844
# File: docs/master/passport.md, line: 844
msgid "Before your application can issue personal access tokens, you will need to create a personal access client. You may do this by executing the `passport:client` Artisan command with the `--personal` option. If you have already run the `passport:install` command, you do not need to run this command:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 846
# File: docs/master/passport.md, line: 846
#, no-wrap
msgid "    php artisan passport:client --personal\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 848
# File: docs/master/passport.md, line: 848
msgid "After creating your personal access client, place the client's ID and plain-text secret value in your application's `.env` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 849
# File: docs/master/passport.md, line: 849
#, no-wrap
msgid ""
"PASSPORT_PERSONAL_ACCESS_CLIENT_ID=\"client-id-value\"\n"
"PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=\"unhashed-client-secret-value\"\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 855
# File: docs/master/passport.md, line: 855
#, no-wrap
msgid "<a name=\"managing-personal-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 855
# File: docs/master/passport.md, line: 855
#, no-wrap
msgid "Managing Personal Access Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 858
# File: docs/master/passport.md, line: 858
msgid "Once you have created a personal access client, you may issue tokens for a given user using the `createToken` method on the `App\\Models\\User` model instance. The `createToken` method accepts the name of the token as its first argument and an optional array of [scopes](#token-scopes) as its second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 860
# File: docs/master/passport.md, line: 860
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 862
# File: docs/master/passport.md, line: 862
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 865
# File: docs/master/passport.md, line: 865
#, no-wrap
msgid ""
"    // Creating a token without scopes...\n"
"    $token = $user->createToken('Token Name')->accessToken;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 868
# File: docs/master/passport.md, line: 868
#, no-wrap
msgid ""
"    // Creating a token with scopes...\n"
"    $token = $user->createToken('My Token', ['place-orders'])->accessToken;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 870
# File: docs/master/passport.md, line: 870
#, no-wrap
msgid "<a name=\"personal-access-tokens-json-api\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 873
# File: docs/master/passport.md, line: 873
msgid "Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a dashboard for managing personal access tokens. Below, we'll review all of the API endpoints for managing personal access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 877
# File: docs/master/passport.md, line: 877
#, no-wrap
msgid "<a name=\"get-oauthscopes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 877
# File: docs/master/passport.md, line: 877
#, no-wrap
msgid "`GET /oauth/scopes`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 880
# File: docs/master/passport.md, line: 880
msgid "This route returns all of the [scopes](#token-scopes) defined for your application. You may use this route to list the scopes a user may assign to a personal access token:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 885
# File: docs/master/passport.md, line: 885
#, no-wrap
msgid ""
"    axios.get('/oauth/scopes')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 887
# File: docs/master/passport.md, line: 887
#, no-wrap
msgid "<a name=\"get-oauthpersonal-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 887
# File: docs/master/passport.md, line: 887
#, no-wrap
msgid "`GET /oauth/personal-access-tokens`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 890
# File: docs/master/passport.md, line: 890
msgid "This route returns all of the personal access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they may edit or revoke them:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 895
# File: docs/master/passport.md, line: 895
#, no-wrap
msgid ""
"    axios.get('/oauth/personal-access-tokens')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 897
# File: docs/master/passport.md, line: 897
#, no-wrap
msgid "<a name=\"post-oauthpersonal-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 897
# File: docs/master/passport.md, line: 897
#, no-wrap
msgid "`POST /oauth/personal-access-tokens`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 900
# File: docs/master/passport.md, line: 900
msgid "This route creates new personal access tokens. It requires two pieces of data: the token's `name` and the `scopes` that should be assigned to the token:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 905
# File: docs/master/passport.md, line: 905
#, no-wrap
msgid ""
"    const data = {\n"
"        name: 'Token Name',\n"
"        scopes: []\n"
"    };\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 913
# File: docs/master/passport.md, line: 913
#, no-wrap
msgid ""
"    axios.post('/oauth/personal-access-tokens', data)\n"
"        .then(response => {\n"
"            console.log(response.data.accessToken);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 915
# File: docs/master/passport.md, line: 915
#, no-wrap
msgid "<a name=\"delete-oauthpersonal-access-tokenstoken-id\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 915
# File: docs/master/passport.md, line: 915
#, no-wrap
msgid "`DELETE /oauth/personal-access-tokens/{token-id}`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 918
# File: docs/master/passport.md, line: 918
msgid "This route may be used to revoke personal access tokens:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 920
# File: docs/master/passport.md, line: 920
#, no-wrap
msgid "    axios.delete('/oauth/personal-access-tokens/' + tokenId);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 922
# File: docs/master/passport.md, line: 922
#, no-wrap
msgid "<a name=\"protecting-routes\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 922
# File: docs/master/passport.md, line: 922
#, no-wrap
msgid "Protecting Routes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 925
# File: docs/master/passport.md, line: 925
#, no-wrap
msgid "<a name=\"via-middleware\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 925
# File: docs/master/passport.md, line: 925
#, no-wrap
msgid "Via Middleware"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 928
# File: docs/master/passport.md, line: 928
msgid "Passport includes an [authentication guard](/docs/{{version}}/authentication#adding-custom-guards) that will validate access tokens on incoming requests. Once you have configured the `api` guard to use the `passport` driver, you only need to specify the `auth:api` middleware on any routes that should require a valid access token:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 932
# File: docs/master/passport.md, line: 932
#, no-wrap
msgid ""
"    Route::get('/user', function () {\n"
"        //\n"
"    })->middleware('auth:api');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 934
# File: docs/master/passport.md, line: 934
#, no-wrap
msgid "> {note} If you are using the [client credentials grant](#client-credentials-grant-tokens), you should use [the `client` middleware](#client-credentials-grant-tokens) to protect your routes instead of the `auth:api` middleware.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 936
# File: docs/master/passport.md, line: 936
#, no-wrap
msgid "<a name=\"multiple-authentication-guards\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 936
# File: docs/master/passport.md, line: 936
#, no-wrap
msgid "Multiple Authentication Guards"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 939
# File: docs/master/passport.md, line: 939
msgid "If your application authenticates different types of users that perhaps use entirely different Eloquent models, you will likely need to define a guard configuration for each user provider type in your application. This allows you to protect requests intended for specific user providers. For example, given the following guard configuration the `config/auth.php` configuration file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 944
# File: docs/master/passport.md, line: 944
#, no-wrap
msgid ""
"    'api' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'users',\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 949
# File: docs/master/passport.md, line: 949
#, no-wrap
msgid ""
"    'api-customers' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'customers',\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 951
# File: docs/master/passport.md, line: 951
msgid "The following route will utilize the `api-customers` guard, which uses the `customers` user provider, to authenticate incoming requests:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 955
# File: docs/master/passport.md, line: 955
#, no-wrap
msgid ""
"    Route::get('/customer', function () {\n"
"        //\n"
"    })->middleware('auth:api-customers');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 957
# File: docs/master/passport.md, line: 957
#, no-wrap
msgid "> {tip} For more information on using multiple user providers with Passport, please consult the [password grant documentation](#customizing-the-user-provider).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 959
# File: docs/master/passport.md, line: 959
#, no-wrap
msgid "<a name=\"passing-the-access-token\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 959
# File: docs/master/passport.md, line: 959
#, no-wrap
msgid "Passing The Access Token"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 962
# File: docs/master/passport.md, line: 962
msgid "When calling routes that are protected by Passport, your application's API consumers should specify their access token as a `Bearer` token in the `Authorization` header of their request. For example, when using the Guzzle HTTP library:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 969
# File: docs/master/passport.md, line: 969
#, no-wrap
msgid ""
"    $response = Http::withHeaders([\n"
"        'Accept' => 'application/json',\n"
"        'Authorization' => 'Bearer '.$accessToken,\n"
"    ])->get('https://passport-app.test/api/user');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 973
# File: docs/master/passport.md, line: 973
#, no-wrap
msgid "<a name=\"token-scopes\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 973
# File: docs/master/passport.md, line: 973
#, no-wrap
msgid "Token Scopes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 976
# File: docs/master/passport.md, line: 976
msgid "Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. For example, if you are building an e-commerce application, not all API consumers will need the ability to place orders. Instead, you may allow the consumers to only request authorization to access order shipment statuses. In other words, scopes allow your application's users to limit the actions a third-party application can perform on their behalf."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 978
# File: docs/master/passport.md, line: 978
#, no-wrap
msgid "<a name=\"defining-scopes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 978
# File: docs/master/passport.md, line: 978
#, no-wrap
msgid "Defining Scopes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 981
# File: docs/master/passport.md, line: 981
msgid "You may define your API's scopes using the `Passport::tokensCan` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class. The `tokensCan` method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 998
# File: docs/master/passport.md, line: 998
#, no-wrap
msgid ""
"        Passport::tokensCan([\n"
"            'place-orders' => 'Place orders',\n"
"            'check-status' => 'Check order status',\n"
"        ]);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1000
# File: docs/master/passport.md, line: 1000
#, no-wrap
msgid "<a name=\"default-scope\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 1000
# File: docs/master/passport.md, line: 1000
#, no-wrap
msgid "Default Scope"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1003
# File: docs/master/passport.md, line: 1003
msgid "If a client does not request any specific scopes, you may configure your Passport server to attach default scope(s) to the token using the `setDefaultScope` method. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1010
# File: docs/master/passport.md, line: 1010
#, no-wrap
msgid ""
"    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1015
# File: docs/master/passport.md, line: 1015
#, no-wrap
msgid ""
"    Passport::setDefaultScope([\n"
"        'check-status',\n"
"        'place-orders',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1017
# File: docs/master/passport.md, line: 1017
#, no-wrap
msgid "<a name=\"assigning-scopes-to-tokens\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 1017
# File: docs/master/passport.md, line: 1017
#, no-wrap
msgid "Assigning Scopes To Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1020
# File: docs/master/passport.md, line: 1020
#, no-wrap
msgid "<a name=\"when-requesting-authorization-codes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1020
# File: docs/master/passport.md, line: 1020
#, no-wrap
msgid "When Requesting Authorization Codes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1023
# File: docs/master/passport.md, line: 1023
msgid "When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the `scope` query string parameter. The `scope` parameter should be a space-delimited list of scopes:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1031
# File: docs/master/passport.md, line: 1031
#, no-wrap
msgid ""
"    Route::get('/redirect', function () {\n"
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://example.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => 'place-orders check-status',\n"
"        ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1036
# File: docs/master/passport.md, line: 1036
#, no-wrap
msgid "<a name=\"when-issuing-personal-access-tokens\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1036
# File: docs/master/passport.md, line: 1036
#, no-wrap
msgid "When Issuing Personal Access Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1039
# File: docs/master/passport.md, line: 1039
msgid "If you are issuing personal access tokens using the `App\\Models\\User` model's `createToken` method, you may pass the array of desired scopes as the second argument to the method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1041
# File: docs/master/passport.md, line: 1041
#, no-wrap
msgid "    $token = $user->createToken('My Token', ['place-orders'])->accessToken;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1043
# File: docs/master/passport.md, line: 1043
#, no-wrap
msgid "<a name=\"checking-scopes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/passport.md, line: 1043
# File: docs/master/passport.md, line: 1043
#, no-wrap
msgid "Checking Scopes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1046
# File: docs/master/passport.md, line: 1046
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1049
# File: docs/master/passport.md, line: 1049
#, no-wrap
msgid ""
"    'scopes' => \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n"
"    'scope' => \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1051
# File: docs/master/passport.md, line: 1051
#, no-wrap
msgid "<a name=\"check-for-all-scopes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1051
# File: docs/master/passport.md, line: 1051
#, no-wrap
msgid "Check For All Scopes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1054
# File: docs/master/passport.md, line: 1054
msgid "The `scopes` middleware may be assigned to a route to verify that the incoming request's access token has all of the listed scopes:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1058
# File: docs/master/passport.md, line: 1058
#, no-wrap
msgid ""
"    Route::get('/orders', function () {\n"
"        // Access token has both \"check-status\" and \"place-orders\" scopes...\n"
"    })->middleware(['auth:api', 'scopes:check-status,place-orders']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1060
# File: docs/master/passport.md, line: 1060
#, no-wrap
msgid "<a name=\"check-for-any-scopes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1060
# File: docs/master/passport.md, line: 1060
#, no-wrap
msgid "Check For Any Scopes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1063
# File: docs/master/passport.md, line: 1063
msgid "The `scope` middleware may be assigned to a route to verify that the incoming request's access token has *at least one* of the listed scopes:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1067
# File: docs/master/passport.md, line: 1067
#, no-wrap
msgid ""
"    Route::get('/orders', function () {\n"
"        // Access token has either \"check-status\" or \"place-orders\" scope...\n"
"    })->middleware(['auth:api', 'scope:check-status,place-orders']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1069
# File: docs/master/passport.md, line: 1069
#, no-wrap
msgid "<a name=\"checking-scopes-on-a-token-instance\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1069
# File: docs/master/passport.md, line: 1069
#, no-wrap
msgid "Checking Scopes On A Token Instance"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1072
# File: docs/master/passport.md, line: 1072
msgid "Once an access token authenticated request has entered your application, you may still check if the token has a given scope using the `tokenCan` method on the authenticated `App\\Models\\User` instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1080
# File: docs/master/passport.md, line: 1080
#, no-wrap
msgid ""
"    Route::get('/orders', function (Request $request) {\n"
"        if ($request->user()->tokenCan('place-orders')) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1082
# File: docs/master/passport.md, line: 1082
#, no-wrap
msgid "<a name=\"additional-scope-methods\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1082
# File: docs/master/passport.md, line: 1082
#, no-wrap
msgid "Additional Scope Methods"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1085
# File: docs/master/passport.md, line: 1085
msgid "The `scopeIds` method will return an array of all defined IDs / names:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1089
# File: docs/master/passport.md, line: 1089
#, no-wrap
msgid "    Passport::scopeIds();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1091
# File: docs/master/passport.md, line: 1091
msgid "The `scopes` method will return an array of all defined scopes as instances of `Laravel\\Passport\\Scope`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1093
# File: docs/master/passport.md, line: 1093
#, no-wrap
msgid "    Passport::scopes();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1095
# File: docs/master/passport.md, line: 1095
msgid "The `scopesFor` method will return an array of `Laravel\\Passport\\Scope` instances matching the given IDs / names:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1097
# File: docs/master/passport.md, line: 1097
#, no-wrap
msgid "    Passport::scopesFor(['place-orders', 'check-status']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1099
# File: docs/master/passport.md, line: 1099
msgid "You may determine if a given scope has been defined using the `hasScope` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1101
# File: docs/master/passport.md, line: 1101
#, no-wrap
msgid "    Passport::hasScope('place-orders');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1103
# File: docs/master/passport.md, line: 1103
#, no-wrap
msgid "<a name=\"consuming-your-api-with-javascript\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 1103
# File: docs/master/passport.md, line: 1103
#, no-wrap
msgid "Consuming Your API With JavaScript"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1106
# File: docs/master/passport.md, line: 1106
msgid "When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach to API development allows your own application to consume the same API that you are sharing with the world. The same API may be consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package managers."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1108
# File: docs/master/passport.md, line: 1108
msgid "Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you. All you need to do is add the `CreateFreshApiToken` middleware to your `web` middleware group in your `app/Http/Kernel.php` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1113
# File: docs/master/passport.md, line: 1113
#, no-wrap
msgid ""
"    'web' => [\n"
"        // Other middleware...\n"
"        \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n"
"    ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1115
# File: docs/master/passport.md, line: 1115
#, no-wrap
msgid "> {note} You should ensure that the `CreateFreshApiToken` middleware is the last middleware listed in your middleware stack.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1117
# File: docs/master/passport.md, line: 1117
msgid "This middleware will attach a `laravel_token` cookie to your outgoing responses. This cookie contains an encrypted JWT that Passport will use to authenticate API requests from your JavaScript application. The JWT has a lifetime equal to your `session.lifetime` configuration value. Now, since the browser will automatically send the cookie with all subsequent requests, you may make requests to your application's API without explicitly passing an access token:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1122
# File: docs/master/passport.md, line: 1122
#, no-wrap
msgid ""
"    axios.get('/api/user')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1124
# File: docs/master/passport.md, line: 1124
#, no-wrap
msgid "<a name=\"customizing-the-cookie-name\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1124
# File: docs/master/passport.md, line: 1124
#, no-wrap
msgid "Customizing The Cookie Name"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1127
# File: docs/master/passport.md, line: 1127
msgid "If needed, you can customize the `laravel_token` cookie's name using the `Passport::cookie` method. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1141
# File: docs/master/passport.md, line: 1141
#, no-wrap
msgid ""
"        Passport::cookie('custom_name');\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1143
# File: docs/master/passport.md, line: 1143
#, no-wrap
msgid "<a name=\"csrf-protection\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/passport.md, line: 1143
# File: docs/master/passport.md, line: 1143
#, no-wrap
msgid "CSRF Protection"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1146
# File: docs/master/passport.md, line: 1146
msgid "When using this method of authentication, you will need to ensure a valid CSRF token header is included in your requests. The default Laravel JavaScript scaffolding includes an Axios instance, which will automatically use the encrypted `XSRF-TOKEN` cookie value to send an `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1148
# File: docs/master/passport.md, line: 1148
#, no-wrap
msgid "> {tip} If you choose to send the `X-CSRF-TOKEN` header instead of `X-XSRF-TOKEN`, you will need to use the unencrypted token provided by `csrf_token()`.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1150
# File: docs/master/passport.md, line: 1150
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 1150
# File: docs/master/passport.md, line: 1150
#, no-wrap
msgid "Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1153
# File: docs/master/passport.md, line: 1153
msgid "Passport raises events when issuing access tokens and refresh tokens. You may use these events to prune or revoke other access tokens in your database. If you would like, you may attach listeners to these events in your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1163
# File: docs/master/passport.md, line: 1163
#, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Laravel\\Passport\\Events\\AccessTokenCreated' => [\n"
"            'App\\Listeners\\RevokeOldTokens',\n"
"        ],\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1168
# File: docs/master/passport.md, line: 1168
#, no-wrap
msgid ""
"        'Laravel\\Passport\\Events\\RefreshTokenCreated' => [\n"
"            'App\\Listeners\\PruneOldTokens',\n"
"        ],\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1170
# File: docs/master/passport.md, line: 1170
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/passport.md, line: 1170
# File: docs/master/passport.md, line: 1170
#, no-wrap
msgid "Testing"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1173
# File: docs/master/passport.md, line: 1173
msgid "Passport's `actingAs` method may be used to specify the currently authenticated user as well as its scopes. The first argument given to the `actingAs` method is the user instance and the second is an array of scopes that should be granted to the user's token:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1176
# File: docs/master/passport.md, line: 1176
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1183
# File: docs/master/passport.md, line: 1183
#, no-wrap
msgid ""
"    public function test_servers_can_be_created()\n"
"    {\n"
"        Passport::actingAs(\n"
"            User::factory()->create(),\n"
"            ['create-servers']\n"
"        );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1185
# File: docs/master/passport.md, line: 1185
#, no-wrap
msgid "        $response = $this->post('/api/create-server');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1188
# File: docs/master/passport.md, line: 1188
#, no-wrap
msgid ""
"        $response->assertStatus(201);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1190
# File: docs/master/passport.md, line: 1190
msgid "Passport's `actingAsClient` method may be used to specify the currently authenticated client as well as its scopes. The first argument given to the `actingAsClient` method is the client instance and the second is an array of scopes that should be granted to the client's token:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1193
# File: docs/master/passport.md, line: 1193
#, no-wrap
msgid ""
"    use Laravel\\Passport\\Client;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1200
# File: docs/master/passport.md, line: 1200
#, no-wrap
msgid ""
"    public function test_orders_can_be_retrieved()\n"
"    {\n"
"        Passport::actingAsClient(\n"
"            Client::factory()->create(),\n"
"            ['check-status']\n"
"        );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1202
# File: docs/master/passport.md, line: 1202
#, no-wrap
msgid "        $response = $this->get('/api/orders');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/passport.md, line: 1204
# File: docs/master/passport.md, line: 1204
#, no-wrap
msgid ""
"        $response->assertStatus(200);\n"
"    }\n"
msgstr ""
