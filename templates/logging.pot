#
msgid ""
msgstr ""

#: docs/8.x/logging.md:block 1 (header)
msgid "Logging"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Available Channel Drivers](#available-channel-drivers)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Channel Prerequisites](#channel-prerequisites)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Logging Deprecation Warnings](#logging-deprecation-warnings)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Building Log Stacks](#building-log-stacks)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Writing Log Messages](#writing-log-messages)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Contextual Information](#contextual-information)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Writing To Specific Channels](#writing-to-specific-channels)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Monolog Channel Customization](#monolog-channel-customization)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Customizing Monolog For Channels](#customizing-monolog-for-channels)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Creating Monolog Handler Channels](#creating-monolog-handler-channels)"
msgstr ""

#: docs/8.x/logging.md:block 2 (unordered list)
msgid "[Creating Custom Channels Via Factories](#creating-custom-channels-via-factories)"
msgstr ""

#: docs/8.x/logging.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/logging.md:block 5 (paragraph)
msgid "To help you learn more about what's happening within your application, Laravel provides robust logging services that allow you to log messages to files, the system error log, and even to Slack to notify your entire team."
msgstr ""

#: docs/8.x/logging.md:block 6 (paragraph)
msgid "Laravel logging is based on \"channels\". Each channel represents a specific way of writing log information. For example, the `single` channel writes log files to a single log file, while the `slack` channel sends log messages to Slack. Log messages may be written to multiple channels based on their severity."
msgstr ""

#: docs/8.x/logging.md:block 7 (paragraph)
msgid "Under the hood, Laravel utilizes the [Monolog](https://github.com/Seldaek/monolog) library, which provides support for a variety of powerful log handlers. Laravel makes it a cinch to configure these handlers, allowing you to mix and match them to customize your application's log handling."
msgstr ""

#: docs/8.x/logging.md:block 9 (header)
msgid "Configuration"
msgstr ""

#: docs/8.x/logging.md:block 10 (paragraph)
msgid "All of the configuration options for your application's logging behavior is housed in the `config/logging.php` configuration file. This file allows you to configure your application's log channels, so be sure to review each of the available channels and their options. We'll review a few common options below."
msgstr ""

#: docs/8.x/logging.md:block 11 (paragraph)
msgid "By default, Laravel will use the `stack` channel when logging messages. The `stack` channel is used to aggregate multiple log channels into a single channel. For more information on building stacks, check out the [documentation below](#building-log-stacks)."
msgstr ""

#: docs/8.x/logging.md:block 13 (header)
msgid "Configuring The Channel Name"
msgstr ""

#: docs/8.x/logging.md:block 14 (paragraph)
msgid "By default, Monolog is instantiated with a \"channel name\" that matches the current environment, such as `production` or `local`. To change this value, add a `name` option to your channel's configuration:"
msgstr ""

#: docs/8.x/logging.md:block 15 (code)
msgid ""
"'stack' => [\n"
"    'driver' => 'stack',\n"
"    'name' => 'channel-name',\n"
"    'channels' => ['single', 'slack'],\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 17 (header)
msgid "Available Channel Drivers"
msgstr ""

#: docs/8.x/logging.md:block 18 (paragraph)
msgid "Each log channel is powered by a \"driver\". The driver determines how and where the log message is actually recorded. The following log channel drivers are available in every Laravel application. An entry for most of these drivers is already present in your application's `config/logging.php` configuration file, so be sure to review this file to become familiar with its contents:"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "Name"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "Description"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`custom`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A driver that calls a specified factory to create a channel"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`daily`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A `RotatingFileHandler` based Monolog driver which rotates daily"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`errorlog`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "An `ErrorLogHandler` based Monolog driver"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`monolog`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A Monolog factory driver that may use any supported Monolog handler"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`null`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A driver that discards all log messages"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`papertrail`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A `SyslogUdpHandler` based Monolog driver"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`single`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A single file or path based logger channel (`StreamHandler`)"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`slack`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A `SlackWebhookHandler` based Monolog driver"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`stack`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A wrapper to facilitate creating \"multi-channel\" channels"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "`syslog`"
msgstr ""

#: docs/8.x/logging.md:block 19 (table)
msgid "A `SyslogHandler` based Monolog driver"
msgstr ""

#: docs/8.x/logging.md:block 20 (quote)
msgid "{tip} Check out the documentation on [advanced channel customization](#monolog-channel-customization) to learn more about the `monolog` and `custom` drivers."
msgstr ""

#: docs/8.x/logging.md:block 22 (header)
msgid "Channel Prerequisites"
msgstr ""

#: docs/8.x/logging.md:block 24 (header)
msgid "Configuring The Single and Daily Channels"
msgstr ""

#: docs/8.x/logging.md:block 25 (paragraph)
msgid "The `single` and `daily` channels have three optional configuration options: `bubble`, `permission`, and `locking`."
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "Default"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "`bubble`"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "Indicates if messages should bubble up to other channels after being handled"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "`true`"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "`locking`"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "Attempt to lock the log file before writing to it"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "`false`"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "`permission`"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "The log file's permissions"
msgstr ""

#: docs/8.x/logging.md:block 26 (table)
msgid "`0644`"
msgstr ""

#: docs/8.x/logging.md:block 28 (header)
msgid "Configuring The Papertrail Channel"
msgstr ""

#: docs/8.x/logging.md:block 29 (paragraph)
msgid "The `papertrail` channel requires the `host` and `port` configuration options. You can obtain these values from [Papertrail](https://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-php-apps/#send-events-from-php-app)."
msgstr ""

#: docs/8.x/logging.md:block 31 (header)
msgid "Configuring The Slack Channel"
msgstr ""

#: docs/8.x/logging.md:block 32 (paragraph)
msgid "The `slack` channel requires a `url` configuration option. This URL should match a URL for an [incoming webhook](https://slack.com/apps/A0F7XDUAZ-incoming-webhooks) that you have configured for your Slack team."
msgstr ""

#: docs/8.x/logging.md:block 33 (paragraph)
msgid "By default, Slack will only receive logs at the `critical` level and above; however, you can adjust this in your `config/logging.php` configuration file by modifying the `level` configuration option within your Slack log channel's configuration array."
msgstr ""

#: docs/8.x/logging.md:block 35 (header)
msgid "Logging Deprecation Warnings"
msgstr ""

#: docs/8.x/logging.md:block 36 (paragraph)
msgid "PHP, Laravel, and other libraries often notify their users that some of their features have been deprecated and will be removed in a future version. If you would like to log these deprecation warnings, you may specify your preferred `deprecations` log channel in your application's `config/logging.php` configuration file:"
msgstr ""

#: docs/8.x/logging.md:block 37 (code)
msgid ""
"'deprecations' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),\n"
"\n"
"'channels' => [\n"
"    ...\n"
"]\n"
msgstr ""

#: docs/8.x/logging.md:block 38 (paragraph)
msgid "Or, you may define a log channel named `deprecations`. If a log channel with this name exists, it will always be used to log deprecations:"
msgstr ""

#: docs/8.x/logging.md:block 39 (code)
msgid ""
"'channels' => [\n"
"    'deprecations' => [\n"
"        'driver' => 'single',\n"
"        'path' => storage_path('logs/php-deprecation-warnings.log'),\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 41 (header)
msgid "Building Log Stacks"
msgstr ""

#: docs/8.x/logging.md:block 42 (paragraph)
msgid "As mentioned previously, the `stack` driver allows you to combine multiple channels into a single log channel for convenience. To illustrate how to use log stacks, let's take a look at an example configuration that you might see in a production application:"
msgstr ""

#: docs/8.x/logging.md:block 43 (code)
msgid ""
"'channels' => [\n"
"    'stack' => [\n"
"        'driver' => 'stack',\n"
"        'channels' => ['syslog', 'slack'],\n"
"    ],\n"
"\n"
"    'syslog' => [\n"
"        'driver' => 'syslog',\n"
"        'level' => 'debug',\n"
"    ],\n"
"\n"
"    'slack' => [\n"
"        'driver' => 'slack',\n"
"        'url' => env('LOG_SLACK_WEBHOOK_URL'),\n"
"        'username' => 'Laravel Log',\n"
"        'emoji' => ':boom:',\n"
"        'level' => 'critical',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 44 (paragraph)
msgid "Let's dissect this configuration. First, notice our `stack` channel aggregates two other channels via its `channels` option: `syslog` and `slack`. So, when logging messages, both of these channels will have the opportunity to log the message. However, as we will see below, whether these channels actually log the message may be determined by the message's severity / \"level\"."
msgstr ""

#: docs/8.x/logging.md:block 46 (header)
msgid "Log Levels"
msgstr ""

#: docs/8.x/logging.md:block 47 (paragraph)
msgid "Take note of the `level` configuration option present on the `syslog` and `slack` channel configurations in the example above. This option determines the minimum \"level\" a message must be in order to be logged by the channel. Monolog, which powers Laravel's logging services, offers all of the log levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424): **emergency**, **alert**, **critical**, **error**, **warning**, **notice**, **info**, and **debug**."
msgstr ""

#: docs/8.x/logging.md:block 48 (paragraph)
msgid "So, imagine we log a message using the `debug` method:"
msgstr ""

#: docs/8.x/logging.md:block 49 (code)
msgid "Log::debug('An informational message.');\n"
msgstr ""

#: docs/8.x/logging.md:block 50 (paragraph)
msgid "Given our configuration, the `syslog` channel will write the message to the system log; however, since the error message is not `critical` or above, it will not be sent to Slack. However, if we log an `emergency` message, it will be sent to both the system log and Slack since the `emergency` level is above our minimum level threshold for both channels:"
msgstr ""

#: docs/8.x/logging.md:block 51 (code)
msgid "Log::emergency('The system is down!');\n"
msgstr ""

#: docs/8.x/logging.md:block 53 (header)
msgid "Writing Log Messages"
msgstr ""

#: docs/8.x/logging.md:block 54 (paragraph)
msgid "You may write information to the logs using the `Log` [facade](/docs/{{version}}/facades). As previously mentioned, the logger provides the eight logging levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424): **emergency**, **alert**, **critical**, **error**, **warning**, **notice**, **info** and **debug**:"
msgstr ""

#: docs/8.x/logging.md:block 55 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Log;\n"
"\n"
"Log::emergency($message);\n"
"Log::alert($message);\n"
"Log::critical($message);\n"
"Log::error($message);\n"
"Log::warning($message);\n"
"Log::notice($message);\n"
"Log::info($message);\n"
"Log::debug($message);\n"
msgstr ""

#: docs/8.x/logging.md:block 56 (paragraph)
msgid "You may call any of these methods to log a message for the corresponding level. By default, the message will be written to the default log channel as configured by your `logging` configuration file:"
msgstr ""

#: docs/8.x/logging.md:block 57 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Log;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        Log::info('Showing the user profile for user: '.$id);\n"
"\n"
"        return view('user.profile', [\n"
"            'user' => User::findOrFail($id)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/logging.md:block 59 (header)
msgid "Contextual Information"
msgstr ""

#: docs/8.x/logging.md:block 60 (paragraph)
msgid "An array of contextual data may be passed to the log methods. This contextual data will be formatted and displayed with the log message:"
msgstr ""

#: docs/8.x/logging.md:block 61 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Log;\n"
"\n"
"Log::info('User failed to login.', ['id' => $user->id]);\n"
msgstr ""

#: docs/8.x/logging.md:block 62 (paragraph)
msgid "Occasionally, you may wish to specify some contextual information that should be included with all subsequent log entries. For example, you may wish to log a request ID that is associated with each incoming request to your application. To accomplish this, you may call the `Log` facade's `withContext` method:"
msgstr ""

#: docs/8.x/logging.md:block 63 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Support\\Facades\\Log;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class AssignRequestId\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        $requestId = (string) Str::uuid();\n"
"\n"
"        Log::withContext([\n"
"            'request-id' => $requestId\n"
"        ]);\n"
"\n"
"        return $next($request)->header('Request-Id', $requestId);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/logging.md:block 65 (header)
msgid "Writing To Specific Channels"
msgstr ""

#: docs/8.x/logging.md:block 66 (paragraph)
msgid "Sometimes you may wish to log a message to a channel other than your application's default channel. You may use the `channel` method on the `Log` facade to retrieve and log to any channel defined in your configuration file:"
msgstr ""

#: docs/8.x/logging.md:block 67 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Log;\n"
"\n"
"Log::channel('slack')->info('Something happened!');\n"
msgstr ""

#: docs/8.x/logging.md:block 68 (paragraph)
msgid "If you would like to create an on-demand logging stack consisting of multiple channels, you may use the `stack` method:"
msgstr ""

#: docs/8.x/logging.md:block 69 (code)
msgid "Log::stack(['single', 'slack'])->info('Something happened!');\n"
msgstr ""

#: docs/8.x/logging.md:block 71 (header)
msgid "On-Demand Channels"
msgstr ""

#: docs/8.x/logging.md:block 72 (paragraph)
msgid "It is also possible to create an on-demand channel by providing the configuration at runtime without that configuration being present in your application's `logging` configuration file. To accomplish this, you may pass a configuration array to the `Log` facade's `build` method:"
msgstr ""

#: docs/8.x/logging.md:block 73 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Log;\n"
"\n"
"Log::build([\n"
"  'driver' => 'single',\n"
"  'path' => storage_path('logs/custom.log'),\n"
"])->info('Something happened!');\n"
msgstr ""

#: docs/8.x/logging.md:block 74 (paragraph)
msgid "You may also wish to include an on-demand channel in an on-demand logging stack. This can be achieved by including your on-demand channel instance in the array passed to the `stack` method:"
msgstr ""

#: docs/8.x/logging.md:block 75 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Log;\n"
"\n"
"$channel = Log::build([\n"
"  'driver' => 'single',\n"
"  'path' => storage_path('logs/custom.log'),\n"
"]);\n"
"\n"
"Log::stack(['slack', $channel])->info('Something happened!');\n"
msgstr ""

#: docs/8.x/logging.md:block 77 (header)
msgid "Monolog Channel Customization"
msgstr ""

#: docs/8.x/logging.md:block 79 (header)
msgid "Customizing Monolog For Channels"
msgstr ""

#: docs/8.x/logging.md:block 80 (paragraph)
msgid "Sometimes you may need complete control over how Monolog is configured for an existing channel. For example, you may want to configure a custom Monolog `FormatterInterface` implementation for Laravel's built-in `single` channel."
msgstr ""

#: docs/8.x/logging.md:block 81 (paragraph)
msgid "To get started, define a `tap` array on the channel's configuration. The `tap` array should contain a list of classes that should have an opportunity to customize (or \"tap\" into) the Monolog instance after it is created. There is no conventional location where these classes should be placed, so you are free to create a directory within your application to contain these classes:"
msgstr ""

#: docs/8.x/logging.md:block 82 (code)
msgid ""
"'single' => [\n"
"    'driver' => 'single',\n"
"    'tap' => [App\\Logging\\CustomizeFormatter::class],\n"
"    'path' => storage_path('logs/laravel.log'),\n"
"    'level' => 'debug',\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 83 (paragraph)
msgid "Once you have configured the `tap` option on your channel, you're ready to define the class that will customize your Monolog instance. This class only needs a single method: `__invoke`, which receives an `Illuminate\\Log\\Logger` instance. The `Illuminate\\Log\\Logger` instance proxies all method calls to the underlying Monolog instance:"
msgstr ""

#: docs/8.x/logging.md:block 84 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Logging;\n"
"\n"
"use Monolog\\Formatter\\LineFormatter;\n"
"\n"
"class CustomizeFormatter\n"
"{\n"
"    /**\n"
"     * Customize the given logger instance.\n"
"     *\n"
"     * @param  \\Illuminate\\Log\\Logger  $logger\n"
"     * @return void\n"
"     */\n"
"    public function __invoke($logger)\n"
"    {\n"
"        foreach ($logger->getHandlers() as $handler) {\n"
"            $handler->setFormatter(new LineFormatter(\n"
"                '[%datetime%] %channel%.%level_name%: %message% %context% %extra%'\n"
"            ));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/logging.md:block 85 (quote)
msgid "{tip} All of your \"tap\" classes are resolved by the [service container](/docs/{{version}}/container), so any constructor dependencies they require will automatically be injected."
msgstr ""

#: docs/8.x/logging.md:block 87 (header)
msgid "Creating Monolog Handler Channels"
msgstr ""

#: docs/8.x/logging.md:block 88 (paragraph)
msgid "Monolog has a variety of [available handlers](https://github.com/Seldaek/monolog/tree/main/src/Monolog/Handler) and Laravel does not include a built-in channel for each one. In some cases, you may wish to create a custom channel that is merely an instance of a specific Monolog handler that does not have a corresponding Laravel log driver. These channels can be easily created using the `monolog` driver."
msgstr ""

#: docs/8.x/logging.md:block 89 (paragraph)
msgid "When using the `monolog` driver, the `handler` configuration option is used to specify which handler will be instantiated. Optionally, any constructor parameters the handler needs may be specified using the `with` configuration option:"
msgstr ""

#: docs/8.x/logging.md:block 90 (code)
msgid ""
"'logentries' => [\n"
"    'driver'  => 'monolog',\n"
"    'handler' => Monolog\\Handler\\SyslogUdpHandler::class,\n"
"    'with' => [\n"
"        'host' => 'my.logentries.internal.datahubhost.company.com',\n"
"        'port' => '10000',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 92 (header)
msgid "Monolog Formatters"
msgstr ""

#: docs/8.x/logging.md:block 93 (paragraph)
msgid "When using the `monolog` driver, the Monolog `LineFormatter` will be used as the default formatter. However, you may customize the type of formatter passed to the handler using the `formatter` and `formatter_with` configuration options:"
msgstr ""

#: docs/8.x/logging.md:block 94 (code)
msgid ""
"'browser' => [\n"
"    'driver' => 'monolog',\n"
"    'handler' => Monolog\\Handler\\BrowserConsoleHandler::class,\n"
"    'formatter' => Monolog\\Formatter\\HtmlFormatter::class,\n"
"    'formatter_with' => [\n"
"        'dateFormat' => 'Y-m-d',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 95 (paragraph)
msgid "If you are using a Monolog handler that is capable of providing its own formatter, you may set the value of the `formatter` configuration option to `default`:"
msgstr ""

#: docs/8.x/logging.md:block 96 (code)
msgid ""
"'newrelic' => [\n"
"    'driver' => 'monolog',\n"
"    'handler' => Monolog\\Handler\\NewRelicHandler::class,\n"
"    'formatter' => 'default',\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 98 (header)
msgid "Creating Custom Channels Via Factories"
msgstr ""

#: docs/8.x/logging.md:block 99 (paragraph)
msgid "If you would like to define an entirely custom channel in which you have full control over Monolog's instantiation and configuration, you may specify a `custom` driver type in your `config/logging.php` configuration file. Your configuration should include a `via` option that contains the name of the factory class which will be invoked to create the Monolog instance:"
msgstr ""

#: docs/8.x/logging.md:block 100 (code)
msgid ""
"'channels' => [\n"
"    'example-custom-channel' => [\n"
"        'driver' => 'custom',\n"
"        'via' => App\\Logging\\CreateCustomLogger::class,\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/logging.md:block 101 (paragraph)
msgid "Once you have configured the `custom` driver channel, you're ready to define the class that will create your Monolog instance. This class only needs a single `__invoke` method which should return the Monolog logger instance. The method will receive the channels configuration array as its only argument:"
msgstr ""

#: docs/8.x/logging.md:block 102 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Logging;\n"
"\n"
"use Monolog\\Logger;\n"
"\n"
"class CreateCustomLogger\n"
"{\n"
"    /**\n"
"     * Create a custom Monolog instance.\n"
"     *\n"
"     * @param  array  $config\n"
"     * @return \\Monolog\\Logger\n"
"     */\n"
"    public function __invoke(array $config)\n"
"    {\n"
"        return new Logger(...);\n"
"    }\n"
"}\n"
msgstr ""
