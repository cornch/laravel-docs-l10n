#
msgid ""
msgstr ""

#: docs/8.x/mail.md:block 1 (header)
msgid "Mail"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Failover Configuration](#failover-configuration)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Generating Mailables](#generating-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Writing Mailables](#writing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuring The View](#configuring-the-view)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[View Data](#view-data)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Attachments](#attachments)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Inline Attachments](#inline-attachments)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Sending Mail](#sending-mail)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Queueing Mail](#queueing-mail)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Testing Mailables](#testing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/8.x/mail.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: docs/8.x/mail.md:block 7 (header)
msgid "Configuration"
msgstr ""

#: docs/8.x/mail.md:block 8 (paragraph)
msgid "Laravel's email services may be configured via your application's `config/mail.php` configuration file. Each mailer configured within this file may have its own unique configuration and even its own unique \"transport\", allowing your application to use different email services to send certain email messages. For example, your application might use Postmark to send transactional emails while using Amazon SES to send bulk emails."
msgstr ""

#: docs/8.x/mail.md:block 9 (paragraph)
msgid "Within your `mail` configuration file, you will find a `mailers` configuration array. This array contains a sample configuration entry for each of the major mail drivers / transports supported by Laravel, while the `default` configuration value determines which mailer will be used by default when your application needs to send an email message."
msgstr ""

#: docs/8.x/mail.md:block 11 (header)
msgid "Driver / Transport Prerequisites"
msgstr ""

#: docs/8.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers. All of the API based drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:"
msgstr ""

#: docs/8.x/mail.md:block 13 (code)
msgid "composer require guzzlehttp/guzzle\n"
msgstr ""

#: docs/8.x/mail.md:block 15 (header)
msgid "Mailgun Driver"
msgstr ""

#: docs/8.x/mail.md:block 16 (paragraph)
msgid "To use the Mailgun driver, first install the Guzzle HTTP library. Then, set the `default` option in your `config/mail.php` configuration file to `mailgun`. Next, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/8.x/mail.md:block 17 (code)
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 18 (paragraph)
msgid "If you are not using the United States [Mailgun region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), you may define your region's endpoint in the `services` configuration file:"
msgstr ""

#: docs/8.x/mail.md:block 19 (code)
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 21 (header)
msgid "Postmark Driver"
msgstr ""

#: docs/8.x/mail.md:block 22 (paragraph)
msgid "To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:"
msgstr ""

#: docs/8.x/mail.md:block 23 (code)
msgid "composer require wildbit/swiftmailer-postmark\n"
msgstr ""

#: docs/8.x/mail.md:block 24 (paragraph)
msgid "Next, install the Guzzle HTTP library and set the `default` option in your `config/mail.php` configuration file to `postmark`. Finally, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/8.x/mail.md:block 25 (code)
msgid ""
"'postmark' => [\n"
"    'token' => env('POSTMARK_TOKEN'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 26 (paragraph)
msgid "If you would like to specify the Postmark message stream that should be used by a given mailer, you may add the `message_stream_id` configuration option to the mailer's configuration array. This configuration array can be found in your application's `config/mail.php` configuration file:"
msgstr ""

#: docs/8.x/mail.md:block 27 (code)
msgid ""
"'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 28 (paragraph)
msgid "This way you are also able to set up multiple Postmark mailers with different message streams."
msgstr ""

#: docs/8.x/mail.md:block 30 (header)
msgid "SES Driver"
msgstr ""

#: docs/8.x/mail.md:block 31 (paragraph)
msgid "To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library via the Composer package manager:"
msgstr ""

#: docs/8.x/mail.md:block 32 (code)
msgid "composer require aws/aws-sdk-php\n"
msgstr ""

#: docs/8.x/mail.md:block 33 (paragraph)
msgid "Next, set the `default` option in your `config/mail.php` configuration file to `ses` and verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/8.x/mail.md:block 34 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 35 (paragraph)
msgid "To utilize AWS [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html) via a session token, you may add a `token` key to your application's SES configuration:"
msgstr ""

#: docs/8.x/mail.md:block 36 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'token' => env('AWS_SESSION_TOKEN'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 37 (paragraph)
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#: docs/8.x/mail.md:block 38 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'Tags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 40 (header)
msgid "Failover Configuration"
msgstr ""

#: docs/8.x/mail.md:block 41 (paragraph)
msgid "Sometimes, an external service you have configured to send your application's mail may be down. In these cases, it can be useful to define one or more backup mail delivery configurations that will be used in case your primary delivery driver is down."
msgstr ""

#: docs/8.x/mail.md:block 42 (paragraph)
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which mail drivers should be chosen for delivery:"
msgstr ""

#: docs/8.x/mail.md:block 43 (code)
msgid ""
"'mailers' => [\n"
"    'failover' => [\n"
"        'transport' => 'failover',\n"
"        'mailers' => [\n"
"            'postmark',\n"
"            'mailgun',\n"
"            'sendmail',\n"
"        ],\n"
"    ],\n"
"\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 44 (paragraph)
msgid "Once your failover mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr ""

#: docs/8.x/mail.md:block 45 (code)
msgid "'default' => env('MAIL_MAILER', 'failover'),\n"
msgstr ""

#: docs/8.x/mail.md:block 47 (header)
msgid "Generating Mailables"
msgstr ""

#: docs/8.x/mail.md:block 48 (paragraph)
msgid "When building Laravel applications, each type of email sent by your application is represented as a \"mailable\" class. These classes are stored in the `app/Mail` directory. Don't worry if you don't see this directory in your application, since it will be generated for you when you create your first mailable class using the `make:mail` Artisan command:"
msgstr ""

#: docs/8.x/mail.md:block 49 (code)
msgid "php artisan make:mail OrderShipped\n"
msgstr ""

#: docs/8.x/mail.md:block 51 (header)
msgid "Writing Mailables"
msgstr ""

#: docs/8.x/mail.md:block 52 (paragraph)
msgid "Once you have generated a mailable class, open it up so we can explore its contents. First, note that all of a mailable class' configuration is done in the `build` method. Within this method, you may call various methods such as `from`, `subject`, `view`, and `attach` to configure the email's presentation and delivery."
msgstr ""

#: docs/8.x/mail.md:block 53 (quote)
msgid "{tip} You may type-hint dependencies on the mailable's `build` method. The Laravel [service container](/docs/{{version}}/container) automatically injects these dependencies."
msgstr ""

#: docs/8.x/mail.md:block 55 (header)
msgid "Configuring The Sender"
msgstr ""

#: docs/8.x/mail.md:block 57 (header)
msgid "Using The `from` Method"
msgstr ""

#: docs/8.x/mail.md:block 58 (paragraph)
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may use the `from` method within your mailable class' `build` method:"
msgstr ""

#: docs/8.x/mail.md:block 59 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com', 'Example')\n"
"                ->view('emails.orders.shipped');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 61 (header)
msgid "Using A Global `from` Address"
msgstr ""

#: docs/8.x/mail.md:block 62 (paragraph)
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to call the `from` method in each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr ""

#: docs/8.x/mail.md:block 63 (code)
msgid "'from' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#: docs/8.x/mail.md:block 64 (paragraph)
msgid "In addition, you may define a global \"reply_to\" address within your `config/mail.php` configuration file:"
msgstr ""

#: docs/8.x/mail.md:block 65 (code)
msgid "'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#: docs/8.x/mail.md:block 67 (header)
msgid "Configuring The View"
msgstr ""

#: docs/8.x/mail.md:block 68 (paragraph)
msgid "Within a mailable class' `build` method, you may use the `view` method to specify which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: docs/8.x/mail.md:block 69 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 70 (quote)
msgid "{tip} You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr ""

#: docs/8.x/mail.md:block 72 (header)
msgid "Plain Text Emails"
msgstr ""

#: docs/8.x/mail.md:block 73 (paragraph)
msgid "If you would like to define a plain-text version of your email, you may use the `text` method. Like the `view` method, the `text` method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr ""

#: docs/8.x/mail.md:block 74 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->text('emails.orders.shipped_plain');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 76 (header)
msgid "View Data"
msgstr ""

#: docs/8.x/mail.md:block 78 (header)
msgid "Via Public Properties"
msgstr ""

#: docs/8.x/mail.md:block 79 (paragraph)
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class' constructor and set that data to public properties defined on the class:"
msgstr ""

#: docs/8.x/mail.md:block 80 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 81 (paragraph)
msgid "Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#: docs/8.x/mail.md:block 82 (code)
msgid ""
"<div>\n"
"    Price: {{ $order->price }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/mail.md:block 84 (header)
msgid "Via The `with` Method:"
msgstr ""

#: docs/8.x/mail.md:block 85 (paragraph)
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `with` method. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template. Then, when calling the `with` method, pass an array of data that you wish to make available to the template:"
msgstr ""

#: docs/8.x/mail.md:block 86 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->with([\n"
"                        'orderName' => $this->order->name,\n"
"                        'orderPrice' => $this->order->price,\n"
"                    ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 87 (paragraph)
msgid "Once the data has been passed to the `with` method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#: docs/8.x/mail.md:block 88 (code)
msgid ""
"<div>\n"
"    Price: {{ $orderPrice }}\n"
"</div>\n"
msgstr ""

#: docs/8.x/mail.md:block 90 (header)
msgid "Attachments"
msgstr ""

#: docs/8.x/mail.md:block 91 (paragraph)
msgid "To add attachments to an email, use the `attach` method within the mailable class' `build` method. The `attach` method accepts the full path to the file as its first argument:"
msgstr ""

#: docs/8.x/mail.md:block 92 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 93 (paragraph)
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#: docs/8.x/mail.md:block 94 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 96 (header)
msgid "Attaching Files From Disk"
msgstr ""

#: docs/8.x/mail.md:block 97 (paragraph)
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `attachFromStorage` method:"
msgstr ""

#: docs/8.x/mail.md:block 98 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 99 (paragraph)
msgid "If necessary, you may specify the file's attachment name and additional options using the second and third arguments to the `attachFromStorage` method:"
msgstr ""

#: docs/8.x/mail.md:block 100 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                   'mime' => 'application/pdf'\n"
"               ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 101 (paragraph)
msgid "The `attachFromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr ""

#: docs/8.x/mail.md:block 102 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorageDisk('s3', '/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 104 (header)
msgid "Raw Data Attachments"
msgstr ""

#: docs/8.x/mail.md:block 105 (paragraph)
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `attachData` method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:"
msgstr ""

#: docs/8.x/mail.md:block 106 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 108 (header)
msgid "Inline Attachments"
msgstr ""

#: docs/8.x/mail.md:block 109 (paragraph)
msgid "Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails. To embed an inline image, use the `embed` method on the `$message` variable within your email template. Laravel automatically makes the `$message` variable available to all of your email templates, so you don't need to worry about passing it in manually:"
msgstr ""

#: docs/8.x/mail.md:block 110 (code)
msgid ""
"<body>\n"
"    Here is an image:\n"
"\n"
"    <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"</body>\n"
msgstr ""

#: docs/8.x/mail.md:block 111 (quote)
msgid "{note} The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr ""

#: docs/8.x/mail.md:block 113 (header)
msgid "Embedding Raw Data Attachments"
msgstr ""

#: docs/8.x/mail.md:block 114 (paragraph)
msgid "If you already have a raw image data string you wish to embed into an email template, you may call the `embedData` method on the `$message` variable. When calling the `embedData` method, you will need to provide a filename that should be assigned to the embedded image:"
msgstr ""

#: docs/8.x/mail.md:block 115 (code)
msgid ""
"<body>\n"
"    Here is an image from raw data:\n"
"\n"
"    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"</body>\n"
msgstr ""

#: docs/8.x/mail.md:block 117 (header)
msgid "Customizing The SwiftMailer Message"
msgstr ""

#: docs/8.x/mail.md:block 118 (paragraph)
msgid "The `withSwiftMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the SwiftMailer message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#: docs/8.x/mail.md:block 119 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n"
"\n"
"    $this->withSwiftMessage(function ($message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n"
"\n"
"    return $this;\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 121 (header)
msgid "Markdown Mailables"
msgstr ""

#: docs/8.x/mail.md:block 122 (paragraph)
msgid "Markdown mailable messages allow you to take advantage of the pre-built templates and components of [mail notifications](/docs/{{version}}/notifications#mail-notifications) in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#: docs/8.x/mail.md:block 124 (header)
msgid "Generating Markdown Mailables"
msgstr ""

#: docs/8.x/mail.md:block 125 (paragraph)
msgid "To generate a mailable with a corresponding Markdown template, you may use the `--markdown` option of the `make:mail` Artisan command:"
msgstr ""

#: docs/8.x/mail.md:block 126 (code)
msgid "php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n"
msgstr ""

#: docs/8.x/mail.md:block 127 (paragraph)
msgid "Then, when configuring the mailable within its `build` method, call the `markdown` method instead of the `view` method. The `markdown` method accepts the name of the Markdown template and an optional array of data to make available to the template:"
msgstr ""

#: docs/8.x/mail.md:block 128 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com')\n"
"                ->markdown('emails.orders.shipped', [\n"
"                    'url' => $this->orderUrl,\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 130 (header)
msgid "Writing Markdown Messages"
msgstr ""

#: docs/8.x/mail.md:block 131 (paragraph)
msgid "Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel's pre-built email UI components:"
msgstr ""

#: docs/8.x/mail.md:block 132 (code)
msgid ""
"@component('mail::message')\n"
"# Order Shipped\n"
"\n"
"Your order has been shipped!\n"
"\n"
"@component('mail::button', ['url' => $url])\n"
"View Order\n"
"@endcomponent\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 133 (quote)
msgid "{tip} Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr ""

#: docs/8.x/mail.md:block 135 (header)
msgid "Button Component"
msgstr ""

#: docs/8.x/mail.md:block 136 (paragraph)
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `success`, and `error`. You may add as many button components to a message as you wish:"
msgstr ""

#: docs/8.x/mail.md:block 137 (code)
msgid ""
"@component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"View Order\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 139 (header)
msgid "Panel Component"
msgstr ""

#: docs/8.x/mail.md:block 140 (paragraph)
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:"
msgstr ""

#: docs/8.x/mail.md:block 141 (code)
msgid ""
"@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 143 (header)
msgid "Table Component"
msgstr ""

#: docs/8.x/mail.md:block 144 (paragraph)
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#: docs/8.x/mail.md:block 145 (code)
msgid ""
"@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 147 (header)
msgid "Customizing The Components"
msgstr ""

#: docs/8.x/mail.md:block 148 (paragraph)
msgid "You may export all of the Markdown mail components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#: docs/8.x/mail.md:block 149 (code)
msgid "php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#: docs/8.x/mail.md:block 150 (paragraph)
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#: docs/8.x/mail.md:block 152 (header)
msgid "Customizing The CSS"
msgstr ""

#: docs/8.x/mail.md:block 153 (paragraph)
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be converted to inline CSS styles within the HTML representations of your Markdown mail messages."
msgstr ""

#: docs/8.x/mail.md:block 154 (paragraph)
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of your application's `config/mail.php` configuration file to match the name of your new theme."
msgstr ""

#: docs/8.x/mail.md:block 155 (paragraph)
msgid "To customize the theme for an individual mailable, you may set the `$theme` property of the mailable class to the name of the theme that should be used when sending that mailable."
msgstr ""

#: docs/8.x/mail.md:block 157 (header)
msgid "Sending Mail"
msgstr ""

#: docs/8.x/mail.md:block 158 (paragraph)
msgid "To send a message, use the `to` method on the `Mail` [facade](/docs/{{version}}/facades). The `to` method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their `email` and `name` properties when determining the email's recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the `send` method:"
msgstr ""

#: docs/8.x/mail.md:block 159 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Ship the order...\n"
"\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 160 (paragraph)
msgid "You are not limited to just specifying the \"to\" recipients when sending a message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by chaining their respective methods together:"
msgstr ""

#: docs/8.x/mail.md:block 161 (code)
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->send(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 163 (header)
msgid "Looping Over Recipients"
msgstr ""

#: docs/8.x/mail.md:block 164 (paragraph)
msgid "Occasionally, you may need to send a mailable to a list of recipients by iterating over an array of recipients / email addresses. However, since the `to` method appends email addresses to the mailable's list of recipients, each iteration through the loop will send another email to every previous recipient. Therefore, you should always re-create the mailable instance for each recipient:"
msgstr ""

#: docs/8.x/mail.md:block 165 (code)
msgid ""
"foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"    Mail::to($recipient)->send(new OrderShipped($order));\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 167 (header)
msgid "Sending Mail Via A Specific Mailer"
msgstr ""

#: docs/8.x/mail.md:block 168 (paragraph)
msgid "By default, Laravel will send email using the mailer configured as the `default` mailer in your application's `mail` configuration file. However, you may use the `mailer` method to send a message using a specific mailer configuration:"
msgstr ""

#: docs/8.x/mail.md:block 169 (code)
msgid ""
"Mail::mailer('postmark')\n"
"        ->to($request->user())\n"
"        ->send(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 171 (header)
msgid "Queueing Mail"
msgstr ""

#: docs/8.x/mail.md:block 173 (header)
msgid "Queueing A Mail Message"
msgstr ""

#: docs/8.x/mail.md:block 174 (paragraph)
msgid "Since sending email messages can negatively impact the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in [unified queue API](/docs/{{version}}/queues). To queue a mail message, use the `queue` method on the `Mail` facade after specifying the message's recipients:"
msgstr ""

#: docs/8.x/mail.md:block 175 (code)
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 176 (paragraph)
msgid "This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to [configure your queues](/docs/{{version}}/queues) before using this feature."
msgstr ""

#: docs/8.x/mail.md:block 178 (header)
msgid "Delayed Message Queueing"
msgstr ""

#: docs/8.x/mail.md:block 179 (paragraph)
msgid "If you wish to delay the delivery of a queued email message, you may use the `later` method. As its first argument, the `later` method accepts a `DateTime` instance indicating when the message should be sent:"
msgstr ""

#: docs/8.x/mail.md:block 180 (code)
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->later(now()->addMinutes(10), new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 182 (header)
msgid "Pushing To Specific Queues"
msgstr ""

#: docs/8.x/mail.md:block 183 (paragraph)
msgid "Since all mailable classes generated using the `make:mail` command make use of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and `onConnection` methods on any mailable class instance, allowing you to specify the connection and queue name for the message:"
msgstr ""

#: docs/8.x/mail.md:block 184 (code)
msgid ""
"$message = (new OrderShipped($order))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('emails');\n"
"\n"
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue($message);\n"
msgstr ""

#: docs/8.x/mail.md:block 186 (header)
msgid "Queueing By Default"
msgstr ""

#: docs/8.x/mail.md:block 187 (paragraph)
msgid "If you have mailable classes that you want to always be queued, you may implement the `ShouldQueue` contract on the class. Now, even if you call the `send` method when mailing, the mailable will still be queued since it implements the contract:"
msgstr ""

#: docs/8.x/mail.md:block 188 (code)
msgid ""
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 190 (header)
msgid "Queued Mailables & Database Transactions"
msgstr ""

#: docs/8.x/mail.md:block 191 (paragraph)
msgid "When queued mailables are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your mailable depends on these models, unexpected errors can occur when the job that sends the queued mailable is processed."
msgstr ""

#: docs/8.x/mail.md:block 192 (paragraph)
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued mailable should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the mail message:"
msgstr ""

#: docs/8.x/mail.md:block 193 (code)
msgid ""
"Mail::to($request->user())->send(\n"
"    (new OrderShipped($order))->afterCommit()\n"
");\n"
msgstr ""

#: docs/8.x/mail.md:block 194 (paragraph)
msgid "Alternatively, you may call the `afterCommit` method from your mailable's constructor:"
msgstr ""

#: docs/8.x/mail.md:block 195 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 196 (quote)
msgid "{tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/8.x/mail.md:block 198 (header)
msgid "Rendering Mailables"
msgstr ""

#: docs/8.x/mail.md:block 199 (paragraph)
msgid "Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the `render` method of the mailable. This method will return the evaluated HTML content of the mailable as a string:"
msgstr ""

#: docs/8.x/mail.md:block 200 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\Invoice;\n"
"\n"
"$invoice = Invoice::find(1);\n"
"\n"
"return (new InvoicePaid($invoice))->render();\n"
msgstr ""

#: docs/8.x/mail.md:block 202 (header)
msgid "Previewing Mailables In The Browser"
msgstr ""

#: docs/8.x/mail.md:block 203 (paragraph)
msgid "When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#: docs/8.x/mail.md:block 204 (code)
msgid ""
"Route::get('/mailable', function () {\n"
"    $invoice = App\\Models\\Invoice::find(1);\n"
"\n"
"    return new App\\Mail\\InvoicePaid($invoice);\n"
"});\n"
msgstr ""

#: docs/8.x/mail.md:block 205 (quote)
msgid "{note} [Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [MailHog](https://github.com/mailhog/MailHog) or [HELO](https://usehelo.com)."
msgstr ""

#: docs/8.x/mail.md:block 207 (header)
msgid "Localizing Mailables"
msgstr ""

#: docs/8.x/mail.md:block 208 (paragraph)
msgid "Laravel allows you to send mailables in a locale other than the request's current locale, and will even remember this locale if the mail is queued."
msgstr ""

#: docs/8.x/mail.md:block 209 (paragraph)
msgid "To accomplish this, the `Mail` facade offers a `locale` method to set the desired language. The application will change into this locale when the mailable's template is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#: docs/8.x/mail.md:block 210 (code)
msgid ""
"Mail::to($request->user())->locale('es')->send(\n"
"    new OrderShipped($order)\n"
");\n"
msgstr ""

#: docs/8.x/mail.md:block 212 (header)
msgid "User Preferred Locales"
msgstr ""

#: docs/8.x/mail.md:block 213 (paragraph)
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:"
msgstr ""

#: docs/8.x/mail.md:block 214 (code)
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 215 (paragraph)
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#: docs/8.x/mail.md:block 216 (code)
msgid "Mail::to($request->user())->send(new OrderShipped($order));\n"
msgstr ""

#: docs/8.x/mail.md:block 218 (header)
msgid "Testing Mailables"
msgstr ""

#: docs/8.x/mail.md:block 219 (paragraph)
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr ""

#: docs/8.x/mail.md:block 220 (paragraph)
msgid "As you might expect, the \"HTML\" assertions assert that the HTML version of your mailable contains a given string, while the \"text\" assertions assert that the plain-text version of your mailable contains a given string:"
msgstr ""

#: docs/8.x/mail.md:block 221 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInText('Invoice Paid');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 223 (header)
msgid "Testing Mailable Sending"
msgstr ""

#: docs/8.x/mail.md:block 224 (paragraph)
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test that mailables were sent, check out our documentation on the [Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr ""

#: docs/8.x/mail.md:block 226 (header)
msgid "Mail & Local Development"
msgstr ""

#: docs/8.x/mail.md:block 227 (paragraph)
msgid "When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to \"disable\" the actual sending of emails during local development."
msgstr ""

#: docs/8.x/mail.md:block 229 (header)
msgid "Log Driver"
msgstr ""

#: docs/8.x/mail.md:block 230 (paragraph)
msgid "Instead of sending your emails, the `log` mail driver will write all email messages to your log files for inspection. Typically, this driver would only be used during local development. For more information on configuring your application per environment, check out the [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr ""

#: docs/8.x/mail.md:block 232 (header)
msgid "HELO / Mailtrap / MailHog"
msgstr ""

#: docs/8.x/mail.md:block 233 (paragraph)
msgid "Alternatively, you may use a service like [HELO](https://usehelo.com) or [Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email messages to a \"dummy\" mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap's message viewer."
msgstr ""

#: docs/8.x/mail.md:block 234 (paragraph)
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail is running, you may access the MailHog interface at: `http://localhost:8025`."
msgstr ""

#: docs/8.x/mail.md:block 236 (header)
msgid "Using A Global `to` Address"
msgstr ""

#: docs/8.x/mail.md:block 237 (paragraph)
msgid "Finally, you may specify a global \"to\" address by invoking the `alwaysTo` method offered by the `Mail` facade. Typically, this method should be called from the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/8.x/mail.md:block 238 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 240 (header)
msgid "Events"
msgstr ""

#: docs/8.x/mail.md:block 241 (paragraph)
msgid "Laravel fires two events during the process of sending mail messages. The `MessageSending` event is fired prior to a message being sent, while the `MessageSent` event is fired after a message has been sent. Remember, these events are fired when the mail is being *sent*, not when it is queued. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#: docs/8.x/mail.md:block 242 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"        'App\\Listeners\\LogSendingMessage',\n"
"    ],\n"
"    'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"        'App\\Listeners\\LogSentMessage',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Custom Transports](#custom-transports)"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Additional Symfony Transports](#additional-symfony-transports)"
msgstr ""

#: docs/9.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: docs/9.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: docs/9.x/mail.md:block 15 (paragraph)
msgid "To use the Mailgun driver, install Symfony's Mailgun Mailer transport via Composer:"
msgstr ""

#: docs/9.x/mail.md:block 16 (code)
msgid "composer require symfony/mailgun-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/mail.md:block 17 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/9.x/mail.md:block 23 (paragraph)
msgid "To use the Postmark driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr ""

#: docs/9.x/mail.md:block 24 (code)
msgid "composer require symfony/postmark-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/mail.md:block 25 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/9.x/mail.md:block 38 (paragraph)
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail) that Laravel should pass to the AWS SDK's `SendEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#: docs/9.x/mail.md:block 39 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'EmailTags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 118 (header)
msgid "Customizing The Symfony Message"
msgstr ""

#: docs/9.x/mail.md:block 119 (paragraph)
msgid "The `withSymfonyMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#: docs/9.x/mail.md:block 120 (code)
msgid ""
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n"
"\n"
"    $this->withSymfonyMessage(function (Email $message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n"
"\n"
"    return $this;\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 220 (paragraph)
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInOrderInHtml`, `assertSeeInText`, `assertDontSeeInText`, and `assertSeeInOrderInText`."
msgstr ""

#: docs/9.x/mail.md:block 222 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 245 (header)
msgid "Custom Transports"
msgstr ""

#: docs/9.x/mail.md:block 246 (paragraph)
msgid "Laravel includes a variety of mail transports; however, you may wish to write your own transports to deliver email via other services that Laravel does not support out of the box. To get started, define a class that extends the `Symfony\\Component\\Mailer\\Transport\\AbstractTransport` class. Then, implement the `doSend` and `__toString()` methods on your transport:"
msgstr ""

#: docs/9.x/mail.md:block 247 (code)
msgid ""
"use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n"
"\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * The Mailchimp API client.\n"
"     *\n"
"     * @var \\MailchimpTransactional\\ApiClient\n"
"     */\n"
"    protected $client;\n"
"\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     *\n"
"     * @param  \\MailchimpTransactional\\ApiClient  $client\n"
"     * @return void\n"
"     */\n"
"    public function __construct(ApiClient $client)\n"
"    {\n"
"        $this->client = $client\n"
"    }\n"
"\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n"
"\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function ($email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 248 (paragraph)
msgid "Once you've defined your custom transport, you may register it via the `extend` method provided by the `Mail` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider` service provider. A `$config` argument will be passed to the closure provided to the `extend` method. This argument will contain the configuration array defined for the mailer in the application's `config/mail.php` configuration file:"
msgstr ""

#: docs/9.x/mail.md:block 249 (code)
msgid ""
"use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(...);\n"
"    })\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 250 (paragraph)
msgid "Once your custom transport has been defined and registered, you may create a mailer definition within your application's `config/mail.php` configuration file that utilizes the new transport:"
msgstr ""

#: docs/9.x/mail.md:block 251 (code)
msgid ""
"'mailchimp' => [\n"
"    'transport' => 'mailchimp',\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 253 (header)
msgid "Additional Symfony Transports"
msgstr ""

#: docs/9.x/mail.md:block 254 (paragraph)
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Sendinblue\" Symfony mailer:"
msgstr ""

#: docs/9.x/mail.md:block 255 (code)
msgid "composer require symfony/sendinblue-mailer\n"
msgstr ""

#: docs/9.x/mail.md:block 256 (paragraph)
msgid "Once the Sendinblue mailer package has been installed, you may add an entry for your Sendinblue API credentials to your application's `services` configuration file:"
msgstr ""

#: docs/9.x/mail.md:block 257 (code)
msgid ""
"'sendinblue' => [\n"
"    'key' => 'your-api-key',\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 258 (paragraph)
msgid "Finally, you may use the `Mail` facade's `extend` method to register the transport with Laravel. Typically, this should be done within the `boot` method of a service provider:"
msgstr ""

#: docs/9.x/mail.md:block 259 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Sendinblue\\Transport\\SendinblueTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('sendinblue', function () {\n"
"        return (new SendinblueTransportFactory)->create(\n"
"            new Dsn(\n"
"                'sendinblue+api',\n"
"                'default',\n"
"                config('services.sendinblue.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}\n"
msgstr ""

#: docs/master/mail.md:block 16 (code)
msgid "composer require symfony/mailgun-mailer\n"
msgstr ""

#: docs/master/mail.md:block 24 (code)
msgid "composer require symfony/postmark-mailer\n"
msgstr ""
