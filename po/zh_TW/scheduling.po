msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 05:46\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/scheduling.pot\n"
"X-Crowdin-File-ID: 147\n"

# File: docs/8.x/scheduling.md, line: 1
# File: docs/master/scheduling.md, line: 1
#. type: Title #
#, no-wrap
msgid "Task Scheduling"
msgstr ""

# File: docs/8.x/scheduling.md, line: 19
# File: docs/master/scheduling.md, line: 19
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr ""

# File: docs/8.x/scheduling.md, line: 19
# File: docs/master/scheduling.md, line: 19
#. type: Plain text
#, no-wrap
msgid "- [Defining Schedules](#defining-schedules)\n"
"    - [Scheduling Artisan Commands](#scheduling-artisan-commands)\n"
"    - [Scheduling Queued Jobs](#scheduling-queued-jobs)\n"
"    - [Scheduling Shell Commands](#scheduling-shell-commands)\n"
"    - [Schedule Frequency Options](#schedule-frequency-options)\n"
"    - [Timezones](#timezones)\n"
"    - [Preventing Task Overlaps](#preventing-task-overlaps)\n"
"    - [Running Tasks On One Server](#running-tasks-on-one-server)\n"
"    - [Background Tasks](#background-tasks)\n"
"    - [Maintenance Mode](#maintenance-mode)\n"
"- [Running The Scheduler](#running-the-scheduler)\n"
"    - [Running The Scheduler Locally](#running-the-scheduler-locally)\n"
"- [Task Output](#task-output)\n"
"- [Task Hooks](#task-hooks)\n"
"- [Events](#events)\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 21
# File: docs/master/scheduling.md, line: 21
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 21
# File: docs/master/scheduling.md, line: 21
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr ""

# File: docs/8.x/scheduling.md, line: 24
# File: docs/master/scheduling.md, line: 24
#. type: Plain text
msgid "In the past, you may have written a cron configuration entry for each task you needed to schedule on your server. However, this can quickly become a pain because your task schedule is no longer in source control and you must SSH into your server to view your existing cron entries or add additional entries."
msgstr ""

# File: docs/8.x/scheduling.md, line: 26
# File: docs/master/scheduling.md, line: 26
#. type: Plain text
msgid "Laravel's command scheduler offers a fresh approach to managing scheduled tasks on your server. The scheduler allows you to fluently and expressively define your command schedule within your Laravel application itself. When using the scheduler, only a single cron entry is needed on your server. Your task schedule is defined in the `app/Console/Kernel.php` file's `schedule` method. To help you get started, a simple example is defined within the method."
msgstr ""

# File: docs/8.x/scheduling.md, line: 28
# File: docs/master/scheduling.md, line: 28
#. type: Plain text
#, no-wrap
msgid "<a name=\"defining-schedules\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 28
# File: docs/master/scheduling.md, line: 28
#. type: Title ##
#, no-wrap
msgid "Defining Schedules"
msgstr ""

# File: docs/8.x/scheduling.md, line: 31
# File: docs/master/scheduling.md, line: 31
#. type: Plain text
msgid "You may define all of your scheduled tasks in the `schedule` method of your application's `App\\Console\\Kernel` class. To get started, let's take a look at an example. In this example, we will schedule a closure to be called every day at midnight. Within the closure we will execute a database query to clear a table:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 33
# File: docs/master/scheduling.md, line: 33
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 35
# File: docs/master/scheduling.md, line: 35
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Console;\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 39
# File: docs/master/scheduling.md, line: 39
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Console\\Scheduling\\Schedule;\n"
"    use Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 55
# File: docs/master/scheduling.md, line: 55
#. type: Plain text
#, no-wrap
msgid "    class Kernel extends ConsoleKernel\n"
"    {\n"
"        /**\n"
"         * Define the application's command schedule.\n"
"         *\n"
"         * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"         * @return void\n"
"         */\n"
"        protected function schedule(Schedule $schedule)\n"
"        {\n"
"            $schedule->call(function () {\n"
"                DB::table('recent_users')->delete();\n"
"            })->daily();\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 57
# File: docs/master/scheduling.md, line: 57
#. type: Plain text
msgid "In addition to scheduling using closures, you may also schedule [invokable objects](https://secure.php.net/manual/en/language.oop5.magic.php#object.invoke). Invokable objects are simple PHP classes that contain an `__invoke` method:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 59
# File: docs/master/scheduling.md, line: 59
#. type: Plain text
#, no-wrap
msgid "    $schedule->call(new DeleteRecentUsers)->daily();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 61
# File: docs/master/scheduling.md, line: 61
#. type: Plain text
msgid "If you would like to view an overview of your scheduled tasks and the next time they are scheduled to run, you may use the `schedule:list` Artisan command:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 62
# File: docs/master/scheduling.md, line: 62
#. type: Code fence info string
#, no-wrap
msgid "nothing"
msgstr ""

# File: docs/8.x/scheduling.md, line: 62
# File: docs/master/scheduling.md, line: 62
#. type: Plain text
#, no-wrap
msgid "php artisan schedule:list\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 67
# File: docs/master/scheduling.md, line: 67
#. type: Plain text
#, no-wrap
msgid "<a name=\"scheduling-artisan-commands\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 67
# File: docs/master/scheduling.md, line: 67
#. type: Title ###
#, no-wrap
msgid "Scheduling Artisan Commands"
msgstr ""

# File: docs/8.x/scheduling.md, line: 70
# File: docs/master/scheduling.md, line: 70
#. type: Plain text
msgid "In addition to scheduling closures, you may also schedule [Artisan commands](/docs/{{version}}/artisan) and system commands. For example, you may use the `command` method to schedule an Artisan command using either the command's name or class."
msgstr ""

# File: docs/8.x/scheduling.md, line: 72
# File: docs/master/scheduling.md, line: 72
#. type: Plain text
msgid "When scheduling Artisan commands using the command's class name, you may pass an array of additional command-line arguments that should be provided to the command when it is invoked:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 74
# File: docs/master/scheduling.md, line: 74
#. type: Plain text
#, no-wrap
msgid "    use App\\Console\\Commands\\SendEmailsCommand;\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 76
# File: docs/master/scheduling.md, line: 76
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send Taylor --force')->daily();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 78
# File: docs/master/scheduling.md, line: 78
#. type: Plain text
#, no-wrap
msgid "    $schedule->command(SendEmailsCommand::class, ['Taylor', '--force'])->daily();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 80
# File: docs/master/scheduling.md, line: 80
#. type: Plain text
#, no-wrap
msgid "<a name=\"scheduling-queued-jobs\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 80
# File: docs/master/scheduling.md, line: 80
#. type: Title ###
#, no-wrap
msgid "Scheduling Queued Jobs"
msgstr ""

# File: docs/8.x/scheduling.md, line: 83
# File: docs/master/scheduling.md, line: 83
#. type: Plain text
msgid "The `job` method may be used to schedule a [queued job](/docs/{{version}}/queues). This method provides a convenient way to schedule queued jobs without using the `call` method to define closures to queue the job:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 85
# File: docs/8.x/scheduling.md, line: 91
# File: docs/master/scheduling.md, line: 85
# File: docs/master/scheduling.md, line: 91
#. type: Plain text
#, no-wrap
msgid "    use App\\Jobs\\Heartbeat;\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 87
# File: docs/master/scheduling.md, line: 87
#. type: Plain text
#, no-wrap
msgid "    $schedule->job(new Heartbeat)->everyFiveMinutes();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 89
# File: docs/master/scheduling.md, line: 89
#. type: Plain text
msgid "Optional second and third arguments may be provided to the `job` method which specifies the queue name and queue connection that should be used to queue the job:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 94
# File: docs/master/scheduling.md, line: 94
#. type: Plain text
#, no-wrap
msgid "    // Dispatch the job to the \"heartbeats\" queue on the \"sqs\" connection...\n"
"    $schedule->job(new Heartbeat, 'heartbeats', 'sqs')->everyFiveMinutes();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 96
# File: docs/master/scheduling.md, line: 96
#. type: Plain text
#, no-wrap
msgid "<a name=\"scheduling-shell-commands\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 96
# File: docs/master/scheduling.md, line: 96
#. type: Title ###
#, no-wrap
msgid "Scheduling Shell Commands"
msgstr ""

# File: docs/8.x/scheduling.md, line: 99
# File: docs/master/scheduling.md, line: 99
#. type: Plain text
msgid "The `exec` method may be used to issue a command to the operating system:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 101
# File: docs/master/scheduling.md, line: 101
#. type: Plain text
#, no-wrap
msgid "    $schedule->exec('node /home/forge/script.js')->daily();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 103
# File: docs/master/scheduling.md, line: 103
#. type: Plain text
#, no-wrap
msgid "<a name=\"schedule-frequency-options\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 103
# File: docs/master/scheduling.md, line: 103
#. type: Title ###
#, no-wrap
msgid "Schedule Frequency Options"
msgstr ""

# File: docs/8.x/scheduling.md, line: 106
# File: docs/master/scheduling.md, line: 106
#. type: Plain text
msgid "We've already seen a few examples of how you may configure a task to run at specified intervals. However, there are many more task schedule frequencies that you may assign to a task:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 137
# File: docs/master/scheduling.md, line: 137
#. type: Plain text
#, no-wrap
msgid "Method  | Description\n"
"------------- | -------------\n"
"`->cron('* * * * *');`  |  Run the task on a custom cron schedule\n"
"`->everyMinute();`  |  Run the task every minute\n"
"`->everyTwoMinutes();`  |  Run the task every two minutes\n"
"`->everyThreeMinutes();`  |  Run the task every three minutes\n"
"`->everyFourMinutes();`  |  Run the task every four minutes\n"
"`->everyFiveMinutes();`  |  Run the task every five minutes\n"
"`->everyTenMinutes();`  |  Run the task every ten minutes\n"
"`->everyFifteenMinutes();`  |  Run the task every fifteen minutes\n"
"`->everyThirtyMinutes();`  |  Run the task every thirty minutes\n"
"`->hourly();`  |  Run the task every hour\n"
"`->hourlyAt(17);`  |  Run the task every hour at 17 minutes past the hour\n"
"`->everyTwoHours();`  |  Run the task every two hours\n"
"`->everyThreeHours();`  |  Run the task every three hours\n"
"`->everyFourHours();`  |  Run the task every four hours\n"
"`->everySixHours();`  |  Run the task every six hours\n"
"`->daily();`  |  Run the task every day at midnight\n"
"`->dailyAt('13:00');`  |  Run the task every day at 13:00\n"
"`->twiceDaily(1, 13);`  |  Run the task daily at 1:00 & 13:00\n"
"`->weekly();`  |  Run the task every Sunday at 00:00\n"
"`->weeklyOn(1, '8:00');`  |  Run the task every week on Monday at 8:00\n"
"`->monthly();`  |  Run the task on the first day of every month at 00:00\n"
"`->monthlyOn(4, '15:00');`  |  Run the task every month on the 4th at 15:00\n"
"`->twiceMonthly(1, 16, '13:00');`  |  Run the task monthly on the 1st and 16th at 13:00\n"
"`->lastDayOfMonth('15:00');` | Run the task on the last day of the month at 15:00\n"
"`->quarterly();` |  Run the task on the first day of every quarter at 00:00\n"
"`->yearly();`  |  Run the task on the first day of every year at 00:00\n"
"`->yearlyOn(6, 1, '17:00');`  |  Run the task every year on June 1st at 17:00\n"
"`->timezone('America/New_York');` | Set the timezone for the task\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 139
# File: docs/master/scheduling.md, line: 139
#. type: Plain text
msgid "These methods may be combined with additional constraints to create even more finely tuned schedules that only run on certain days of the week. For example, you may schedule a command to run weekly on Monday:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 144
# File: docs/master/scheduling.md, line: 144
#. type: Plain text
#, no-wrap
msgid "    // Run once per week on Monday at 1 PM...\n"
"    $schedule->call(function () {\n"
"        //\n"
"    })->weekly()->mondays()->at('13:00');\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 151
# File: docs/master/scheduling.md, line: 151
#. type: Plain text
#, no-wrap
msgid "    // Run hourly from 8 AM to 5 PM on weekdays...\n"
"    $schedule->command('foo')\n"
"              ->weekdays()\n"
"              ->hourly()\n"
"              ->timezone('America/Chicago')\n"
"              ->between('8:00', '17:00');\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 153
# File: docs/master/scheduling.md, line: 153
#. type: Plain text
msgid "A list of additional schedule constraints may be found below:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 170
# File: docs/master/scheduling.md, line: 170
#. type: Plain text
#, no-wrap
msgid "Method  | Description\n"
"------------- | -------------\n"
"`->weekdays();`  |  Limit the task to weekdays\n"
"`->weekends();`  |  Limit the task to weekends\n"
"`->sundays();`  |  Limit the task to Sunday\n"
"`->mondays();`  |  Limit the task to Monday\n"
"`->tuesdays();`  |  Limit the task to Tuesday\n"
"`->wednesdays();`  |  Limit the task to Wednesday\n"
"`->thursdays();`  |  Limit the task to Thursday\n"
"`->fridays();`  |  Limit the task to Friday\n"
"`->saturdays();`  |  Limit the task to Saturday\n"
"`->days(array|mixed);`  |  Limit the task to specific days\n"
"`->between($startTime, $endTime);`  |  Limit the task to run between start and end times\n"
"`->unlessBetween($startTime, $endTime);`  |  Limit the task to not run between start and end times\n"
"`->when(Closure);`  |  Limit the task based on a truth test\n"
"`->environments($env);`  |  Limit the task to specific environments\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 172
# File: docs/master/scheduling.md, line: 172
#. type: Plain text
#, no-wrap
msgid "<a name=\"day-constraints\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 172
# File: docs/master/scheduling.md, line: 172
#. type: Title ####
#, no-wrap
msgid "Day Constraints"
msgstr ""

# File: docs/8.x/scheduling.md, line: 175
# File: docs/master/scheduling.md, line: 175
#. type: Plain text
msgid "The `days` method may be used to limit the execution of a task to specific days of the week. For example, you may schedule a command to run hourly on Sundays and Wednesdays:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 179
# File: docs/master/scheduling.md, line: 179
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                    ->hourly()\n"
"                    ->days([0, 3]);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 181
# File: docs/master/scheduling.md, line: 181
#. type: Plain text
msgid "Alternatively, you may use the constants available on the `Illuminate\\Console\\Scheduling\\Schedule` class when defining the days on which a task should run:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 183
# File: docs/master/scheduling.md, line: 183
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Console\\Scheduling\\Schedule;\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 187
# File: docs/master/scheduling.md, line: 187
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                    ->hourly()\n"
"                    ->days([Schedule::SUNDAY, Schedule::WEDNESDAY]);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 189
# File: docs/master/scheduling.md, line: 189
#. type: Plain text
#, no-wrap
msgid "<a name=\"between-time-constraints\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 189
# File: docs/master/scheduling.md, line: 189
#. type: Title ####
#, no-wrap
msgid "Between Time Constraints"
msgstr ""

# File: docs/8.x/scheduling.md, line: 192
# File: docs/master/scheduling.md, line: 192
#. type: Plain text
msgid "The `between` method may be used to limit the execution of a task based on the time of day:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 196
# File: docs/master/scheduling.md, line: 196
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                        ->hourly()\n"
"                        ->between('7:00', '22:00');\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 198
# File: docs/master/scheduling.md, line: 198
#. type: Plain text
msgid "Similarly, the `unlessBetween` method can be used to exclude the execution of a task for a period of time:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 202
# File: docs/master/scheduling.md, line: 202
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                        ->hourly()\n"
"                        ->unlessBetween('23:00', '4:00');\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 204
# File: docs/master/scheduling.md, line: 204
#. type: Plain text
#, no-wrap
msgid "<a name=\"truth-test-constraints\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 204
# File: docs/master/scheduling.md, line: 204
#. type: Title ####
#, no-wrap
msgid "Truth Test Constraints"
msgstr ""

# File: docs/8.x/scheduling.md, line: 207
# File: docs/master/scheduling.md, line: 207
#. type: Plain text
msgid "The `when` method may be used to limit the execution of a task based on the result of a given truth test. In other words, if the given closure returns `true`, the task will execute as long as no other constraining conditions prevent the task from running:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 211
# File: docs/master/scheduling.md, line: 211
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')->daily()->when(function () {\n"
"        return true;\n"
"    });\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 213
# File: docs/master/scheduling.md, line: 213
#. type: Plain text
msgid "The `skip` method may be seen as the inverse of `when`. If the `skip` method returns `true`, the scheduled task will not be executed:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 217
# File: docs/master/scheduling.md, line: 217
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')->daily()->skip(function () {\n"
"        return true;\n"
"    });\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 219
# File: docs/master/scheduling.md, line: 219
#. type: Plain text
msgid "When using chained `when` methods, the scheduled command will only execute if all `when` conditions return `true`."
msgstr ""

# File: docs/8.x/scheduling.md, line: 221
# File: docs/master/scheduling.md, line: 221
#. type: Plain text
#, no-wrap
msgid "<a name=\"environment-constraints\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 221
# File: docs/master/scheduling.md, line: 221
#. type: Title ####
#, no-wrap
msgid "Environment Constraints"
msgstr ""

# File: docs/8.x/scheduling.md, line: 224
# File: docs/master/scheduling.md, line: 224
#. type: Plain text
msgid "The `environments` method may be used to execute tasks only on the given environments (as defined by the `APP_ENV` [environment variable](/docs/{{version}}/configuration#environment-configuration)):"
msgstr ""

# File: docs/8.x/scheduling.md, line: 228
# File: docs/master/scheduling.md, line: 228
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                ->daily()\n"
"                ->environments(['staging', 'production']);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 230
# File: docs/master/scheduling.md, line: 230
#. type: Plain text
#, no-wrap
msgid "<a name=\"timezones\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 230
# File: docs/master/scheduling.md, line: 230
#. type: Title ###
#, no-wrap
msgid "Timezones"
msgstr ""

# File: docs/8.x/scheduling.md, line: 233
# File: docs/master/scheduling.md, line: 233
#. type: Plain text
msgid "Using the `timezone` method, you may specify that a scheduled task's time should be interpreted within a given timezone:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 237
# File: docs/master/scheduling.md, line: 237
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"             ->timezone('America/New_York')\n"
"             ->at('2:00')\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 239
# File: docs/master/scheduling.md, line: 239
#. type: Plain text
msgid "If you are repeatedly assigning the same timezone to all of your scheduled tasks, you may wish to define a `scheduleTimezone` method in your `App\\Console\\Kernel` class. This method should return the default timezone that should be assigned to all scheduled tasks:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 249
# File: docs/master/scheduling.md, line: 249
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Get the timezone that should be used by default for scheduled events.\n"
"     *\n"
"     * @return \\DateTimeZone|string|null\n"
"     */\n"
"    protected function scheduleTimezone()\n"
"    {\n"
"        return 'America/Chicago';\n"
"    }\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 251
# File: docs/master/scheduling.md, line: 251
#. type: Plain text
#, no-wrap
msgid "> {note} Remember that some timezones utilize daylight savings time. When daylight saving time changes occur, your scheduled task may run twice or even not run at all. For this reason, we recommend avoiding timezone scheduling when possible.\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 253
# File: docs/master/scheduling.md, line: 253
#. type: Plain text
#, no-wrap
msgid "<a name=\"preventing-task-overlaps\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 253
# File: docs/master/scheduling.md, line: 253
#. type: Title ###
#, no-wrap
msgid "Preventing Task Overlaps"
msgstr ""

# File: docs/8.x/scheduling.md, line: 256
# File: docs/master/scheduling.md, line: 256
#. type: Plain text
msgid "By default, scheduled tasks will be run even if the previous instance of the task is still running. To prevent this, you may use the `withoutOverlapping` method:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 258
# File: docs/master/scheduling.md, line: 258
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')->withoutOverlapping();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 260
# File: docs/master/scheduling.md, line: 260
#. type: Plain text
msgid "In this example, the `emails:send` [Artisan command](/docs/{{version}}/artisan) will be run every minute if it is not already running. The `withoutOverlapping` method is especially useful if you have tasks that vary drastically in their execution time, preventing you from predicting exactly how long a given task will take."
msgstr ""

# File: docs/8.x/scheduling.md, line: 262
# File: docs/master/scheduling.md, line: 262
#. type: Plain text
msgid "If needed, you may specify how many minutes must pass before the \"without overlapping\" lock expires. By default, the lock will expire after 24 hours:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 264
# File: docs/master/scheduling.md, line: 264
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')->withoutOverlapping(10);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 266
# File: docs/master/scheduling.md, line: 266
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-tasks-on-one-server\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 266
# File: docs/master/scheduling.md, line: 266
#. type: Title ###
#, no-wrap
msgid "Running Tasks On One Server"
msgstr ""

# File: docs/8.x/scheduling.md, line: 269
# File: docs/master/scheduling.md, line: 269
#. type: Plain text
#, no-wrap
msgid "> {note} To utilize this feature, your application must be using the `database`, `memcached`, `dynamodb`, or `redis` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server.\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 271
# File: docs/master/scheduling.md, line: 271
#. type: Plain text
msgid "If your application's scheduler is running on multiple servers, you may limit a scheduled job to only execute on a single server. For instance, assume you have a scheduled task that generates a new report every Friday night. If the task scheduler is running on three worker servers, the scheduled task will run on all three servers and generate the report three times. Not good!"
msgstr ""

# File: docs/8.x/scheduling.md, line: 273
# File: docs/master/scheduling.md, line: 273
#. type: Plain text
msgid "To indicate that the task should run on only one server, use the `onOneServer` method when defining the scheduled task. The first server to obtain the task will secure an atomic lock on the job to prevent other servers from running the same task at the same time:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 278
# File: docs/master/scheduling.md, line: 278
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"                    ->fridays()\n"
"                    ->at('17:00')\n"
"                    ->onOneServer();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 280
# File: docs/master/scheduling.md, line: 280
#. type: Plain text
#, no-wrap
msgid "<a name=\"background-tasks\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 280
# File: docs/master/scheduling.md, line: 280
#. type: Title ###
#, no-wrap
msgid "Background Tasks"
msgstr ""

# File: docs/8.x/scheduling.md, line: 283
# File: docs/master/scheduling.md, line: 283
#. type: Plain text
msgid "By default, multiple tasks scheduled at the same time will execute sequentially based on the order they are defined in your `schedule` method. If you have long-running tasks, this may cause subsequent tasks to start much later than anticipated. If you would like to run tasks in the background so that they may all run simultaneously, you may use the `runInBackground` method:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 287
# File: docs/master/scheduling.md, line: 287
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('analytics:report')\n"
"             ->daily()\n"
"             ->runInBackground();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 289
# File: docs/master/scheduling.md, line: 289
#. type: Plain text
#, no-wrap
msgid "> {note} The `runInBackground` method may only be used when scheduling tasks via the `command` and `exec` methods.\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 291
# File: docs/master/scheduling.md, line: 291
#. type: Plain text
#, no-wrap
msgid "<a name=\"maintenance-mode\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 291
# File: docs/master/scheduling.md, line: 291
#. type: Title ###
#, no-wrap
msgid "Maintenance Mode"
msgstr ""

# File: docs/8.x/scheduling.md, line: 294
# File: docs/master/scheduling.md, line: 294
#. type: Plain text
msgid "Your application's scheduled tasks will not run when the application is in [maintenance mode](/docs/{{version}}/configuration#maintenance-mode), since we don't want your tasks to interfere with any unfinished maintenance you may be performing on your server. However, if you would like to force a task to run even in maintenance mode, you may call the `evenInMaintenanceMode` method when defining the task:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 296
# File: docs/master/scheduling.md, line: 296
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')->evenInMaintenanceMode();\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 298
# File: docs/master/scheduling.md, line: 298
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-the-scheduler\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 298
# File: docs/master/scheduling.md, line: 298
#. type: Title ##
#, no-wrap
msgid "Running The Scheduler"
msgstr ""

# File: docs/8.x/scheduling.md, line: 301
# File: docs/master/scheduling.md, line: 301
#. type: Plain text
msgid "Now that we have learned how to define scheduled tasks, let's discuss how to actually run them on our server. The `schedule:run` Artisan command will evaluate all of your scheduled tasks and determine if they need to run based on the server's current time."
msgstr ""

# File: docs/8.x/scheduling.md, line: 303
# File: docs/master/scheduling.md, line: 303
#. type: Plain text
msgid "So, when using Laravel's scheduler, we only need to add a single cron configuration entry to our server that runs the `schedule:run` command every minute. If you do not know how to add cron entries to your server, consider using a service such as [Laravel Forge](https://forge.laravel.com) which can manage the cron entries for you:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 305
# File: docs/master/scheduling.md, line: 305
#. type: Bullet: '    * '
msgid "* * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1"
msgstr ""

# File: docs/8.x/scheduling.md, line: 307
# File: docs/master/scheduling.md, line: 307
#. type: Plain text
#, no-wrap
msgid "<a name=\"running-the-scheduler-locally\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 307
# File: docs/master/scheduling.md, line: 307
#. type: Title ##
#, no-wrap
msgid "Running The Scheduler Locally"
msgstr ""

# File: docs/8.x/scheduling.md, line: 310
# File: docs/master/scheduling.md, line: 310
#. type: Plain text
msgid "Typically, you would not add a scheduler cron entry to your local development machine. Instead, you may use the `schedule:work` Artisan command. This command will run in the foreground and invoke the scheduler every minute until you terminate the command:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 312
# File: docs/master/scheduling.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    php artisan schedule:work\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 314
# File: docs/master/scheduling.md, line: 314
#. type: Plain text
#, no-wrap
msgid "<a name=\"task-output\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 314
# File: docs/master/scheduling.md, line: 314
#. type: Title ##
#, no-wrap
msgid "Task Output"
msgstr ""

# File: docs/8.x/scheduling.md, line: 317
# File: docs/master/scheduling.md, line: 317
#. type: Plain text
msgid "The Laravel scheduler provides several convenient methods for working with the output generated by scheduled tasks. First, using the `sendOutputTo` method, you may send the output to a file for later inspection:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 321
# File: docs/master/scheduling.md, line: 321
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->sendOutputTo($filePath);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 323
# File: docs/master/scheduling.md, line: 323
#. type: Plain text
msgid "If you would like to append the output to a given file, you may use the `appendOutputTo` method:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 327
# File: docs/master/scheduling.md, line: 327
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->appendOutputTo($filePath);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 329
# File: docs/master/scheduling.md, line: 329
#. type: Plain text
msgid "Using the `emailOutputTo` method, you may email the output to an email address of your choice. Before emailing the output of a task, you should configure Laravel's [email services](/docs/{{version}}/mail):"
msgstr ""

# File: docs/8.x/scheduling.md, line: 334
# File: docs/master/scheduling.md, line: 334
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"             ->daily()\n"
"             ->sendOutputTo($filePath)\n"
"             ->emailOutputTo('taylor@example.com');\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 336
# File: docs/master/scheduling.md, line: 336
#. type: Plain text
msgid "If you only want to email the output if the scheduled Artisan or system command terminates with a non-zero exit code, use the `emailOutputOnFailure` method:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 340
# File: docs/master/scheduling.md, line: 340
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"             ->daily()\n"
"             ->emailOutputOnFailure('taylor@example.com');\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 342
# File: docs/master/scheduling.md, line: 342
#. type: Plain text
#, no-wrap
msgid "> {note} The `emailOutputTo`, `emailOutputOnFailure`, `sendOutputTo`, and `appendOutputTo` methods are exclusive to the `command` and `exec` methods.\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 344
# File: docs/master/scheduling.md, line: 344
#. type: Plain text
#, no-wrap
msgid "<a name=\"task-hooks\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 344
# File: docs/master/scheduling.md, line: 344
#. type: Title ##
#, no-wrap
msgid "Task Hooks"
msgstr ""

# File: docs/8.x/scheduling.md, line: 347
# File: docs/master/scheduling.md, line: 347
#. type: Plain text
msgid "Using the `before` and `after` methods, you may specify code to be executed before and after the scheduled task is executed:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 356
# File: docs/master/scheduling.md, line: 356
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->before(function () {\n"
"                 // The task is about to execute...\n"
"             })\n"
"             ->after(function () {\n"
"                 // The task has executed...\n"
"             });\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 358
# File: docs/master/scheduling.md, line: 358
#. type: Plain text
msgid "The `onSuccess` and `onFailure` methods allow you to specify code to be executed if the scheduled task succeeds or fails. A failure indicates that the scheduled Artisan or system command terminated with a non-zero exit code:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 367
# File: docs/master/scheduling.md, line: 367
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->onSuccess(function () {\n"
"                 // The task succeeded...\n"
"             })\n"
"             ->onFailure(function () {\n"
"                 // The task failed...\n"
"             });\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 369
# File: docs/master/scheduling.md, line: 369
#. type: Plain text
msgid "If output is available from your command, you may access it in your `after`, `onSuccess` or `onFailure` hooks by type-hinting an `Illuminate\\Support\\Stringable` instance as the `$output` argument of your hook's closure definition:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 371
# File: docs/master/scheduling.md, line: 371
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Stringable;\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 380
# File: docs/master/scheduling.md, line: 380
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->onSuccess(function (Stringable $output) {\n"
"                 // The task succeeded...\n"
"             })\n"
"             ->onFailure(function (Stringable $output) {\n"
"                 // The task failed...\n"
"             });\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 382
# File: docs/master/scheduling.md, line: 382
#. type: Plain text
#, no-wrap
msgid "<a name=\"pinging-urls\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 382
# File: docs/master/scheduling.md, line: 382
#. type: Title ####
#, no-wrap
msgid "Pinging URLs"
msgstr ""

# File: docs/8.x/scheduling.md, line: 385
# File: docs/master/scheduling.md, line: 385
#. type: Plain text
msgid "Using the `pingBefore` and `thenPing` methods, the scheduler can automatically ping a given URL before or after a task is executed. This method is useful for notifying an external service, such as [Envoyer](https://envoyer.io), that your scheduled task is beginning or has finished execution:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 390
# File: docs/master/scheduling.md, line: 390
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->pingBefore($url)\n"
"             ->thenPing($url);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 392
# File: docs/master/scheduling.md, line: 392
#. type: Plain text
msgid "The `pingBeforeIf` and `thenPingIf` methods may be used to ping a given URL only if a given condition is `true`:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 397
# File: docs/master/scheduling.md, line: 397
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->pingBeforeIf($condition, $url)\n"
"             ->thenPingIf($condition, $url);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 399
# File: docs/master/scheduling.md, line: 399
#. type: Plain text
msgid "The `pingOnSuccess` and `pingOnFailure` methods may be used to ping a given URL only if the task succeeds or fails. A failure indicates that the scheduled Artisan or system command terminated with a non-zero exit code:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 404
# File: docs/master/scheduling.md, line: 404
#. type: Plain text
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->pingOnSuccess($successUrl)\n"
"             ->pingOnFailure($failureUrl);\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 406
# File: docs/master/scheduling.md, line: 406
#. type: Plain text
msgid "All of the ping methods require the Guzzle HTTP library. Guzzle is typically installed in all new Laravel projects by default, but, you may manually install Guzzle into your project using the Composer package manager if it has been accidentally removed:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 408
# File: docs/master/scheduling.md, line: 408
#. type: Plain text
#, no-wrap
msgid "    composer require guzzlehttp/guzzle\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 410
# File: docs/master/scheduling.md, line: 410
#. type: Plain text
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 410
# File: docs/master/scheduling.md, line: 410
#. type: Title ##
#, no-wrap
msgid "Events"
msgstr ""

# File: docs/8.x/scheduling.md, line: 413
# File: docs/master/scheduling.md, line: 413
#. type: Plain text
msgid "If needed, you may listen to [events](/docs/{{version}}/events) dispatched by the scheduler. Typically, event listener mappings will be defined within your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

# File: docs/8.x/scheduling.md, line: 423
# File: docs/master/scheduling.md, line: 423
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Console\\Events\\ScheduledTaskStarting' => [\n"
"            'App\\Listeners\\LogScheduledTaskStarting',\n"
"        ],\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 427
# File: docs/master/scheduling.md, line: 427
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Console\\Events\\ScheduledTaskFinished' => [\n"
"            'App\\Listeners\\LogScheduledTaskFinished',\n"
"        ],\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 431
# File: docs/master/scheduling.md, line: 431
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Console\\Events\\ScheduledBackgroundTaskFinished' => [\n"
"            'App\\Listeners\\LogScheduledBackgroundTaskFinished',\n"
"        ],\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 435
# File: docs/master/scheduling.md, line: 435
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Console\\Events\\ScheduledTaskSkipped' => [\n"
"            'App\\Listeners\\LogScheduledTaskSkipped',\n"
"        ],\n"
msgstr ""

# File: docs/8.x/scheduling.md, line: 439
# File: docs/master/scheduling.md, line: 439
#. type: Plain text
#, no-wrap
msgid "        'Illuminate\\Console\\Events\\ScheduledTaskFailed' => [\n"
"            'App\\Listeners\\LogScheduledTaskFailed',\n"
"        ],\n"
"    ];\n"
msgstr ""

