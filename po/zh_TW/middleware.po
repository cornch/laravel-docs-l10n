msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-02-03 06:58\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/middleware.pot\n"
"X-Crowdin-File-ID: 101\n"

# File: docs/8.x/middleware.md, line: 1
# File: docs/master/middleware.md, line: 1
#. type: Title #
#, no-wrap
msgid "Middleware"
msgstr "中介軟體 - Middleware"

# File: docs/8.x/middleware.md, line: 12
# File: docs/master/middleware.md, line: 12
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# File: docs/8.x/middleware.md, line: 12
# File: docs/master/middleware.md, line: 12
#. type: Bullet: '- '
msgid "[Defining Middleware](#defining-middleware)"
msgstr "[定義 Middleware](#defining-middleware)"

# File: docs/8.x/middleware.md, line: 12
# File: docs/master/middleware.md, line: 12
#. type: Plain text
#, no-wrap
msgid "- [Registering Middleware](#registering-middleware)\n"
"    - [Global Middleware](#global-middleware)\n"
"    - [Assigning Middleware To Routes](#assigning-middleware-to-routes)\n"
"    - [Middleware Groups](#middleware-groups)\n"
"    - [Sorting Middleware](#sorting-middleware)\n"
"- [Middleware Parameters](#middleware-parameters)\n"
"- [Terminable Middleware](#terminable-middleware)\n"
msgstr "- [註冊 Middleware](#registering-middleware)\n"
"    - [全域 Middleware](#global-middleware)\n"
"    - [將 Middleware 指派給 Route](#assigning-middleware-to-routes)\n"
"    - [Middleware 群組](#middleware-groups)\n"
"    - [排序 Middleware](#sorting-middleware)\n"
"- [Middleware 參數](#middleware-parameters)\n"
"- [可終止的 Middleware](#terminable-middleware)\n"

# File: docs/8.x/middleware.md, line: 14
# File: docs/master/middleware.md, line: 14
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/middleware.md, line: 14
# File: docs/master/middleware.md, line: 14
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/middleware.md, line: 17
# File: docs/master/middleware.md, line: 17
#. type: Plain text
msgid "Middleware provide a convenient mechanism for inspecting and filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to your application's login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application."
msgstr ""

# File: docs/8.x/middleware.md, line: 19
# File: docs/master/middleware.md, line: 19
#. type: Plain text
msgid "Additional middleware can be written to perform a variety of tasks besides authentication. For example, a logging middleware might log all incoming requests to your application. There are several middleware included in the Laravel framework, including middleware for authentication and CSRF protection. All of these middleware are located in the `app/Http/Middleware` directory."
msgstr ""

# File: docs/8.x/middleware.md, line: 21
# File: docs/master/middleware.md, line: 21
#. type: Plain text
#, no-wrap
msgid "<a name=\"defining-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 21
# File: docs/master/middleware.md, line: 21
#. type: Title ##
#, no-wrap
msgid "Defining Middleware"
msgstr ""

# File: docs/8.x/middleware.md, line: 24
# File: docs/master/middleware.md, line: 24
#. type: Plain text
msgid "To create a new middleware, use the `make:middleware` Artisan command:"
msgstr ""

# File: docs/8.x/middleware.md, line: 26
# File: docs/master/middleware.md, line: 26
#. type: Plain text
#, no-wrap
msgid "    php artisan make:middleware EnsureTokenIsValid\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 28
# File: docs/master/middleware.md, line: 28
#. type: Plain text
msgid "This command will place a new `EnsureTokenIsValid` class within your `app/Http/Middleware` directory. In this middleware, we will only allow access to the route if the supplied `token` input matches a specified value. Otherwise, we will redirect the users back to the `home` URI:"
msgstr ""

# File: docs/8.x/middleware.md, line: 30
# File: docs/8.x/middleware.md, line: 67
# File: docs/8.x/middleware.md, line: 85
# File: docs/8.x/middleware.md, line: 251
# File: docs/8.x/middleware.md, line: 289
# File: docs/master/middleware.md, line: 30
# File: docs/master/middleware.md, line: 67
# File: docs/master/middleware.md, line: 85
# File: docs/master/middleware.md, line: 251
# File: docs/master/middleware.md, line: 289
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 32
# File: docs/8.x/middleware.md, line: 69
# File: docs/8.x/middleware.md, line: 87
# File: docs/8.x/middleware.md, line: 253
# File: docs/master/middleware.md, line: 32
# File: docs/master/middleware.md, line: 69
# File: docs/master/middleware.md, line: 87
# File: docs/master/middleware.md, line: 253
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 34
# File: docs/8.x/middleware.md, line: 71
# File: docs/8.x/middleware.md, line: 89
# File: docs/8.x/middleware.md, line: 255
# File: docs/8.x/middleware.md, line: 293
# File: docs/master/middleware.md, line: 34
# File: docs/master/middleware.md, line: 71
# File: docs/master/middleware.md, line: 89
# File: docs/master/middleware.md, line: 255
# File: docs/master/middleware.md, line: 293
#. type: Plain text
#, no-wrap
msgid "    use Closure;\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 49
# File: docs/master/middleware.md, line: 49
#. type: Plain text
#, no-wrap
msgid "    class EnsureTokenIsValid\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            if ($request->input('token') !== 'my-secret-token') {\n"
"                return redirect('home');\n"
"            }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 53
# File: docs/8.x/middleware.md, line: 81
# File: docs/master/middleware.md, line: 53
# File: docs/master/middleware.md, line: 81
#. type: Plain text
#, no-wrap
msgid "            return $next($request);\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 55
# File: docs/master/middleware.md, line: 55
#. type: Plain text
msgid "As you can see, if the given `token` does not match our secret token, the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to \"pass\"), you should call the `$next` callback with the `$request`."
msgstr ""

# File: docs/8.x/middleware.md, line: 57
# File: docs/master/middleware.md, line: 57
#. type: Plain text
msgid "It's best to envision middleware as a series of \"layers\" HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely."
msgstr ""

# File: docs/8.x/middleware.md, line: 59
# File: docs/master/middleware.md, line: 59
#. type: Plain text
#, no-wrap
msgid "> {tip} All middleware are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a middleware's constructor.\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 62
# File: docs/master/middleware.md, line: 62
#. type: Plain text
#, no-wrap
msgid "<a name=\"before-after-middleware\"></a>\n"
"<a name=\"middleware-and-responses\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 62
# File: docs/master/middleware.md, line: 62
#. type: Title ####
#, no-wrap
msgid "Middleware & Responses"
msgstr ""

# File: docs/8.x/middleware.md, line: 65
# File: docs/master/middleware.md, line: 65
#. type: Plain text
msgid "Of course, a middleware can perform tasks before or after passing the request deeper into the application. For example, the following middleware would perform some task **before** the request is handled by the application:"
msgstr ""

# File: docs/8.x/middleware.md, line: 77
# File: docs/master/middleware.md, line: 77
#. type: Plain text
#, no-wrap
msgid "    class BeforeMiddleware\n"
"    {\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            // Perform action\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 83
# File: docs/master/middleware.md, line: 83
#. type: Plain text
msgid "However, this middleware would perform its task **after** the request is handled by the application:"
msgstr ""

# File: docs/8.x/middleware.md, line: 95
# File: docs/master/middleware.md, line: 95
#. type: Plain text
#, no-wrap
msgid "    class AfterMiddleware\n"
"    {\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            $response = $next($request);\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 97
# File: docs/master/middleware.md, line: 97
#. type: Plain text
#, no-wrap
msgid "            // Perform action\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 101
# File: docs/master/middleware.md, line: 101
#. type: Plain text
#, no-wrap
msgid "            return $response;\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 103
# File: docs/master/middleware.md, line: 103
#. type: Plain text
#, no-wrap
msgid "<a name=\"registering-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 103
# File: docs/master/middleware.md, line: 103
#. type: Title ##
#, no-wrap
msgid "Registering Middleware"
msgstr ""

# File: docs/8.x/middleware.md, line: 106
# File: docs/master/middleware.md, line: 106
#. type: Plain text
#, no-wrap
msgid "<a name=\"global-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 106
# File: docs/master/middleware.md, line: 106
#. type: Title ###
#, no-wrap
msgid "Global Middleware"
msgstr ""

# File: docs/8.x/middleware.md, line: 109
# File: docs/master/middleware.md, line: 109
#. type: Plain text
msgid "If you want a middleware to run during every HTTP request to your application, list the middleware class in the `$middleware` property of your `app/Http/Kernel.php` class."
msgstr ""

# File: docs/8.x/middleware.md, line: 111
# File: docs/master/middleware.md, line: 111
#. type: Plain text
#, no-wrap
msgid "<a name=\"assigning-middleware-to-routes\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 111
# File: docs/master/middleware.md, line: 111
#. type: Title ###
#, no-wrap
msgid "Assigning Middleware To Routes"
msgstr ""

# File: docs/8.x/middleware.md, line: 114
# File: docs/master/middleware.md, line: 114
#. type: Plain text
msgid "If you would like to assign middleware to specific routes, you should first assign the middleware a key in your application's `app/Http/Kernel.php` file. By default, the `$routeMiddleware` property of this class contains entries for the middleware included with Laravel. You may add your own middleware to this list and assign it a key of your choosing:"
msgstr ""

# File: docs/8.x/middleware.md, line: 116
# File: docs/master/middleware.md, line: 116
#. type: Plain text
#, no-wrap
msgid "    // Within App\\Http\\Kernel class...\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 128
# File: docs/master/middleware.md, line: 128
#. type: Plain text
#, no-wrap
msgid "    protected $routeMiddleware = [\n"
"        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"        'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"    ];\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 130
# File: docs/master/middleware.md, line: 130
#. type: Plain text
msgid "Once the middleware has been defined in the HTTP kernel, you may use the `middleware` method to assign middleware to a route:"
msgstr ""

# File: docs/8.x/middleware.md, line: 134
# File: docs/master/middleware.md, line: 134
#. type: Plain text
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        //\n"
"    })->middleware('auth');\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 136
# File: docs/master/middleware.md, line: 136
#. type: Plain text
msgid "You may assign multiple middleware to the route by passing an array of middleware names to the `middleware` method:"
msgstr ""

# File: docs/8.x/middleware.md, line: 140
# File: docs/master/middleware.md, line: 140
#. type: Plain text
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        //\n"
"    })->middleware(['first', 'second']);\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 142
# File: docs/master/middleware.md, line: 142
#. type: Plain text
msgid "When assigning middleware, you may also pass the fully qualified class name:"
msgstr ""

# File: docs/8.x/middleware.md, line: 144
# File: docs/8.x/middleware.md, line: 155
# File: docs/8.x/middleware.md, line: 169
# File: docs/master/middleware.md, line: 144
# File: docs/master/middleware.md, line: 155
# File: docs/master/middleware.md, line: 169
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 148
# File: docs/master/middleware.md, line: 148
#. type: Plain text
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        //\n"
"    })->middleware(EnsureTokenIsValid::class);\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 150
# File: docs/master/middleware.md, line: 150
#. type: Plain text
#, no-wrap
msgid "<a name=\"excluding-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 150
# File: docs/master/middleware.md, line: 150
#. type: Title ####
#, no-wrap
msgid "Excluding Middleware"
msgstr ""

# File: docs/8.x/middleware.md, line: 153
# File: docs/master/middleware.md, line: 153
#. type: Plain text
msgid "When assigning middleware to a group of routes, you may occasionally need to prevent the middleware from being applied to an individual route within the group. You may accomplish this using the `withoutMiddleware` method:"
msgstr ""

# File: docs/8.x/middleware.md, line: 160
# File: docs/master/middleware.md, line: 160
#. type: Plain text
#, no-wrap
msgid "    Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"        Route::get('/', function () {\n"
"            //\n"
"        });\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 165
# File: docs/master/middleware.md, line: 165
#. type: Plain text
#, no-wrap
msgid "        Route::get('/profile', function () {\n"
"            //\n"
"        })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"    });\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 167
# File: docs/master/middleware.md, line: 167
#. type: Plain text
msgid "You may also exclude a given set of middleware from an entire [group](/docs/{{version}}/routing#route-groups) of route definitions:"
msgstr ""

# File: docs/8.x/middleware.md, line: 175
# File: docs/master/middleware.md, line: 175
#. type: Plain text
#, no-wrap
msgid "    Route::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n"
"        Route::get('/profile', function () {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 177
# File: docs/master/middleware.md, line: 177
#. type: Plain text
msgid "The `withoutMiddleware` method can only remove route middleware and does not apply to [global middleware](#global-middleware)."
msgstr ""

# File: docs/8.x/middleware.md, line: 179
# File: docs/master/middleware.md, line: 179
#. type: Plain text
#, no-wrap
msgid "<a name=\"middleware-groups\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 179
# File: docs/master/middleware.md, line: 179
#. type: Title ###
#, no-wrap
msgid "Middleware Groups"
msgstr ""

# File: docs/8.x/middleware.md, line: 182
# File: docs/master/middleware.md, line: 182
#. type: Plain text
msgid "Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may accomplish this using the `$middlewareGroups` property of your HTTP kernel."
msgstr ""

# File: docs/8.x/middleware.md, line: 184
# File: docs/master/middleware.md, line: 184
#. type: Plain text
msgid "Out of the box, Laravel comes with `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware groups are automatically applied by your application's `App\\Providers\\RouteServiceProvider` service provider to routes within your corresponding `web` and `api` route files:"
msgstr ""

# File: docs/8.x/middleware.md, line: 200
# File: docs/master/middleware.md, line: 200
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The application's route middleware groups.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $middlewareGroups = [\n"
"        'web' => [\n"
"            \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"            \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"            // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        ],\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 206
# File: docs/master/middleware.md, line: 206
#. type: Plain text
#, no-wrap
msgid "        'api' => [\n"
"            'throttle:api',\n"
"            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        ],\n"
"    ];\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 208
# File: docs/master/middleware.md, line: 208
#. type: Plain text
msgid "Middleware groups may be assigned to routes and controller actions using the same syntax as individual middleware. Again, middleware groups make it more convenient to assign many middleware to a route at once:"
msgstr ""

# File: docs/8.x/middleware.md, line: 212
# File: docs/master/middleware.md, line: 212
#. type: Plain text
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        //\n"
"    })->middleware('web');\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 216
# File: docs/master/middleware.md, line: 216
#. type: Plain text
#, no-wrap
msgid "    Route::middleware(['web'])->group(function () {\n"
"        //\n"
"    });\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 218
# File: docs/master/middleware.md, line: 218
#. type: Plain text
#, no-wrap
msgid "> {tip} Out of the box, the `web` and `api` middleware groups are automatically applied to your application's corresponding `routes/web.php` and `routes/api.php` files by the `App\\Providers\\RouteServiceProvider`.\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 220
# File: docs/master/middleware.md, line: 220
#. type: Plain text
#, no-wrap
msgid "<a name=\"sorting-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 220
# File: docs/master/middleware.md, line: 220
#. type: Title ###
#, no-wrap
msgid "Sorting Middleware"
msgstr ""

# File: docs/8.x/middleware.md, line: 223
# File: docs/master/middleware.md, line: 223
#. type: Plain text
msgid "Rarely, you may need your middleware to execute in a specific order but not have control over their order when they are assigned to the route. In this case, you may specify your middleware priority using the `$middlewarePriority` property of your `app/Http/Kernel.php` file. This property may not exist in your HTTP kernel by default. If it does not exist, you may copy its default definition below:"
msgstr ""

# File: docs/8.x/middleware.md, line: 242
# File: docs/master/middleware.md, line: 242
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The priority-sorted list of middleware.\n"
"     *\n"
"     * This forces non-global middleware to always be in the given order.\n"
"     *\n"
"     * @var string[]\n"
"     */\n"
"    protected $middlewarePriority = [\n"
"        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    ];\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 244
# File: docs/master/middleware.md, line: 244
#. type: Plain text
#, no-wrap
msgid "<a name=\"middleware-parameters\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 244
# File: docs/master/middleware.md, line: 244
#. type: Title ##
#, no-wrap
msgid "Middleware Parameters"
msgstr ""

# File: docs/8.x/middleware.md, line: 247
# File: docs/master/middleware.md, line: 247
#. type: Plain text
msgid "Middleware can also receive additional parameters. For example, if your application needs to verify that the authenticated user has a given \"role\" before performing a given action, you could create an `EnsureUserHasRole` middleware that receives a role name as an additional argument."
msgstr ""

# File: docs/8.x/middleware.md, line: 249
# File: docs/master/middleware.md, line: 249
#. type: Plain text
msgid "Additional middleware parameters will be passed to the middleware after the `$next` argument:"
msgstr ""

# File: docs/8.x/middleware.md, line: 271
# File: docs/master/middleware.md, line: 271
#. type: Plain text
#, no-wrap
msgid "    class EnsureUserHasRole\n"
"    {\n"
"        /**\n"
"         * Handle the incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @param  string  $role\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next, $role)\n"
"        {\n"
"            if (! $request->user()->hasRole($role)) {\n"
"                // Redirect...\n"
"            }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 274
# File: docs/master/middleware.md, line: 274
#. type: Plain text
#, no-wrap
msgid "            return $next($request);\n"
"        }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 276
# File: docs/master/middleware.md, line: 276
#. type: Plain text
#, no-wrap
msgid "    }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 278
# File: docs/master/middleware.md, line: 278
#. type: Plain text
msgid "Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a `:`. Multiple parameters should be delimited by commas:"
msgstr ""

# File: docs/8.x/middleware.md, line: 282
# File: docs/master/middleware.md, line: 282
#. type: Plain text
#, no-wrap
msgid "    Route::put('/post/{id}', function ($id) {\n"
"        //\n"
"    })->middleware('role:editor');\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 284
# File: docs/master/middleware.md, line: 284
#. type: Plain text
#, no-wrap
msgid "<a name=\"terminable-middleware\"></a>\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 284
# File: docs/master/middleware.md, line: 284
#. type: Title ##
#, no-wrap
msgid "Terminable Middleware"
msgstr ""

# File: docs/8.x/middleware.md, line: 287
# File: docs/master/middleware.md, line: 287
#. type: Plain text
msgid "Sometimes a middleware may need to do some work after the HTTP response has been sent to the browser. If you define a `terminate` method on your middleware and your web server is using FastCGI, the `terminate` method will automatically be called after the response is sent to the browser:"
msgstr ""

# File: docs/8.x/middleware.md, line: 291
# File: docs/master/middleware.md, line: 291
#. type: Plain text
#, no-wrap
msgid "    namespace Illuminate\\Session\\Middleware;\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 307
# File: docs/master/middleware.md, line: 307
#. type: Plain text
#, no-wrap
msgid "    class TerminatingMiddleware\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            return $next($request);\n"
"        }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 320
# File: docs/master/middleware.md, line: 320
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Handle tasks after the response has been sent to the browser.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Illuminate\\Http\\Response  $response\n"
"         * @return void\n"
"         */\n"
"        public function terminate($request, $response)\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 322
# File: docs/master/middleware.md, line: 322
#. type: Plain text
msgid "The `terminate` method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of routes or global middleware in the `app/Http/Kernel.php` file."
msgstr ""

# File: docs/8.x/middleware.md, line: 324
# File: docs/master/middleware.md, line: 324
#. type: Plain text
msgid "When calling the `terminate` method on your middleware, Laravel will resolve a fresh instance of the middleware from the [service container](/docs/{{version}}/container). If you would like to use the same middleware instance when the `handle` and `terminate` methods are called, register the middleware with the container using the container's `singleton` method. Typically this should be done in the `register` method of your `AppServiceProvider`:"
msgstr ""

# File: docs/8.x/middleware.md, line: 326
# File: docs/master/middleware.md, line: 326
#. type: Plain text
#, no-wrap
msgid "    use App\\Http\\Middleware\\TerminatingMiddleware;\n"
msgstr ""

# File: docs/8.x/middleware.md, line: 335
# File: docs/master/middleware.md, line: 335
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->app->singleton(TerminatingMiddleware::class);\n"
"    }\n"
msgstr ""

