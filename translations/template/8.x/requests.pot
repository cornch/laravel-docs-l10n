# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 15:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/requests.md:1
#, no-wrap
msgid "HTTP Requests"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/requests.md:22
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:22
#, no-wrap
msgid ""
"- [Interacting With The Request](#interacting-with-the-request)\n"
"    - [Accessing The Request](#accessing-the-request)\n"
"    - [Request Path & Method](#request-path-and-method)\n"
"    - [Request Headers](#request-headers)\n"
"    - [Request IP Address](#request-ip-address)\n"
"    - [Content Negotiation](#content-negotiation)\n"
"    - [PSR-7 Requests](#psr7-requests)\n"
"- [Input](#input)\n"
"    - [Retrieving Input](#retrieving-input)\n"
"    - [Determining If Input Is Present](#determining-if-input-is-present)\n"
"    - [Old Input](#old-input)\n"
"    - [Cookies](#cookies)\n"
"    - [Input Trimming & Normalization](#input-trimming-and-normalization)\n"
"- [Files](#files)\n"
"    - [Retrieving Uploaded Files](#retrieving-uploaded-files)\n"
"    - [Storing Uploaded Files](#storing-uploaded-files)\n"
"- [Configuring Trusted Proxies](#configuring-trusted-proxies)\n"
"- [Configuring Trusted Hosts](#configuring-trusted-hosts)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:24
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:24
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:27
msgid ""
"Laravel's `Illuminate\\Http\\Request` class provides an object-oriented way "
"to interact with the current HTTP request being handled by your application "
"as well as retrieve the input, cookies, and files that were submitted with "
"the request."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:29
#, no-wrap
msgid "<a name=\"interacting-with-the-request\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:29
#, no-wrap
msgid "Interacting With The Request"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:32
#, no-wrap
msgid "<a name=\"accessing-the-request\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:32
#, no-wrap
msgid "Accessing The Request"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:35
msgid ""
"To obtain an instance of the current HTTP request via dependency injection, "
"you should type-hint the `Illuminate\\Http\\Request` class on your route "
"closure or controller method. The incoming request instance will "
"automatically be injected by the Laravel [service "
"container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:37 docs/8.x/requests.md:78 docs/8.x/requests.md:477
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:39 docs/8.x/requests.md:80
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:41 docs/8.x/requests.md:61 docs/8.x/requests.md:82
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:53
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $name = $request->input('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:57
#, no-wrap
msgid ""
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:59
msgid ""
"As mentioned, you may also type-hint the `Illuminate\\Http\\Request` class "
"on a route closure. The service container will automatically inject the "
"incoming request into the closure when it is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:65
#, no-wrap
msgid ""
"    Route::get('/', function (Request $request) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:67
#, no-wrap
msgid "<a name=\"dependency-injection-route-parameters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:67
#, no-wrap
msgid "Dependency Injection & Route Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:70
msgid ""
"If your controller method is also expecting input from a route parameter you "
"should list your route parameters after your other dependencies. For "
"example, if your route is defined like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:72
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:74
#, no-wrap
msgid "    Route::put('/user/{id}', [UserController::class, 'update']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:76
msgid ""
"You may still type-hint the `Illuminate\\Http\\Request` and access your `id` "
"route parameter by defining your controller method as follows:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:97
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the specified user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  string  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request, $id)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:99
#, no-wrap
msgid "<a name=\"request-path-and-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:99
#, no-wrap
msgid "Request Path & Method"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:102
msgid ""
"The `Illuminate\\Http\\Request` instance provides a variety of methods for "
"examining the incoming HTTP request and extends the "
"`Symfony\\Component\\HttpFoundation\\Request` class. We will discuss a few "
"of the most important methods below."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:104
#, no-wrap
msgid "<a name=\"retrieving-the-request-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:104
#, no-wrap
msgid "Retrieving The Request Path"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:107
msgid ""
"The `path` method returns the request's path information. So, if the "
"incoming request is targeted at `http://example.com/foo/bar`, the `path` "
"method will return `foo/bar`:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:109
#, no-wrap
msgid "    $uri = $request->path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:111
#, no-wrap
msgid "<a name=\"inspecting-the-request-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:111
#, no-wrap
msgid "Inspecting The Request Path / Route"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:114
msgid ""
"The `is` method allows you to verify that the incoming request path matches "
"a given pattern. You may use the `*` character as a wildcard when utilizing "
"this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:118
#, no-wrap
msgid ""
"    if ($request->is('admin/*')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:120
msgid ""
"Using the `routeIs` method, you may determine if the incoming request has "
"matched a [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:124
#, no-wrap
msgid ""
"    if ($request->routeIs('admin.*')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:126
#, no-wrap
msgid "<a name=\"retrieving-the-request-url\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:126
#, no-wrap
msgid "Retrieving The Request URL"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:129
msgid ""
"To retrieve the full URL for the incoming request you may use the `url` or "
"`fullUrl` methods. The `url` method will return the URL without the query "
"string, while the `fullUrl` method includes the query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:131
#, no-wrap
msgid "    $url = $request->url();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:133
#, no-wrap
msgid "    $urlWithQueryString = $request->fullUrl();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:135
msgid ""
"If you would like to append query string data to the current URL, you may "
"call the `fullUrlWithQuery` method. This method merges the given array of "
"query string variables with the current query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:137
#, no-wrap
msgid "    $request->fullUrlWithQuery(['type' => 'phone']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:139
#, no-wrap
msgid "<a name=\"retrieving-the-request-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:139
#, no-wrap
msgid "Retrieving The Request Method"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:142
msgid ""
"The `method` method will return the HTTP verb for the request. You may use "
"the `isMethod` method to verify that the HTTP verb matches a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:144
#, no-wrap
msgid "    $method = $request->method();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:148
#, no-wrap
msgid ""
"    if ($request->isMethod('post')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:150
#, no-wrap
msgid "<a name=\"request-headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:150
#, no-wrap
msgid "Request Headers"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:153
msgid ""
"You may retrieve a request header from the `Illuminate\\Http\\Request` "
"instance using the `header` method. If the header is not present on the "
"request, `null` will be returned. However, the `header` method accepts an "
"optional second argument that will be returned if the header is not present "
"on the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:155
#, no-wrap
msgid "    $value = $request->header('X-Header-Name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:157
#, no-wrap
msgid "    $value = $request->header('X-Header-Name', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:159
msgid ""
"The `hasHeader` method may be used to determine if the request contains a "
"given header:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:163
#, no-wrap
msgid ""
"    if ($request->hasHeader('X-Header-Name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:165
msgid ""
"For convenience, the `bearerToken` method may be used to retrieve a bearer "
"token from the `Authorization` header. If no such header is present, an "
"empty string will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:167
#, no-wrap
msgid "    $token = $request->bearerToken();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:169
#, no-wrap
msgid "<a name=\"request-ip-address\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:169
#, no-wrap
msgid "Request IP Address"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:172
msgid ""
"The `ip` method may be used to retrieve the IP address of the client that "
"made the request to your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:174
#, no-wrap
msgid "    $ipAddress = $request->ip();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:176
#, no-wrap
msgid "<a name=\"content-negotiation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:176
#, no-wrap
msgid "Content Negotiation"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:179
msgid ""
"Laravel provides several methods for inspecting the incoming request's "
"requested content types via the `Accept` header. First, the "
"`getAcceptableContentTypes` method will return an array containing all of "
"the content types accepted by the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:181
#, no-wrap
msgid "    $contentTypes = $request->getAcceptableContentTypes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:183
msgid ""
"The `accepts` method accepts an array of content types and returns `true` if "
"any of the content types are accepted by the request. Otherwise, `false` "
"will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:187
#, no-wrap
msgid ""
"    if ($request->accepts(['text/html', 'application/json'])) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:189
msgid ""
"You may use the `prefers` method to determine which content type out of a "
"given array of content types is most preferred by the request. If none of "
"the provided content types are accepted by the request, `null` will be "
"returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:191
#, no-wrap
msgid "    $preferred = $request->prefers(['text/html', 'application/json']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:193
msgid ""
"Since many applications only serve HTML or JSON, you may use the "
"`expectsJson` method to quickly determine if the incoming request expects a "
"JSON response:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:197
#, no-wrap
msgid ""
"    if ($request->expectsJson()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:199
#, no-wrap
msgid "<a name=\"psr7-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:199
#, no-wrap
msgid "PSR-7 Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:202
msgid ""
"The [PSR-7 standard](https://www.php-fig.org/psr/psr-7/) specifies "
"interfaces for HTTP messages, including requests and responses. If you would "
"like to obtain an instance of a PSR-7 request instead of a Laravel request, "
"you will first need to install a few libraries. Laravel uses the *Symfony "
"HTTP Message Bridge* component to convert typical Laravel requests and "
"responses into PSR-7 compatible implementations:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:205
#, no-wrap
msgid ""
"    composer require symfony/psr-http-message-bridge\n"
"    composer require nyholm/psr7\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:207
msgid ""
"Once you have installed these libraries, you may obtain a PSR-7 request by "
"type-hinting the request interface on your route closure or controller "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:209
#, no-wrap
msgid "    use Psr\\Http\\Message\\ServerRequestInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:213
#, no-wrap
msgid ""
"    Route::get('/', function (ServerRequestInterface $request) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:215
#, no-wrap
msgid ""
"> {tip} If you return a PSR-7 response instance from a route or controller, "
"it will automatically be converted back to a Laravel response instance and "
"be displayed by the framework.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:217
#, no-wrap
msgid "<a name=\"input\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:217
#, no-wrap
msgid "Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:220
#, no-wrap
msgid "<a name=\"retrieving-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:220
#, no-wrap
msgid "Retrieving Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:223
#, no-wrap
msgid "<a name=\"retrieving-all-input-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:223
#, no-wrap
msgid "Retrieving All Input Data"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:226
msgid ""
"You may retrieve all of the incoming request's input data as an `array` "
"using the `all` method. This method may be used regardless of whether the "
"incoming request is from an HTML form or is an XHR request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:228
#, no-wrap
msgid "    $input = $request->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:230
#, no-wrap
msgid "<a name=\"retrieving-an-input-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:230
#, no-wrap
msgid "Retrieving An Input Value"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:233
msgid ""
"Using a few simple methods, you may access all of the user input from your "
"`Illuminate\\Http\\Request` instance without worrying about which HTTP verb "
"was used for the request. Regardless of the HTTP verb, the `input` method "
"may be used to retrieve user input:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:235
#, no-wrap
msgid "    $name = $request->input('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:237
msgid ""
"You may pass a default value as the second argument to the `input` "
"method. This value will be returned if the requested input value is not "
"present on the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:239
#, no-wrap
msgid "    $name = $request->input('name', 'Sally');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:241
msgid ""
"When working with forms that contain array inputs, use \"dot\" notation to "
"access the arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:243
#, no-wrap
msgid "    $name = $request->input('products.0.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:245
#, no-wrap
msgid "    $names = $request->input('products.*.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:247
msgid ""
"You may call the `input` method without any arguments in order to retrieve "
"all of the input values as an associative array:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:249
#, no-wrap
msgid "    $input = $request->input();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:251
#, no-wrap
msgid "<a name=\"retrieving-input-from-the-query-string\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:251
#, no-wrap
msgid "Retrieving Input From The Query String"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:254
msgid ""
"While the `input` method retrieves values from the entire request payload "
"(including the query string), the `query` method will only retrieve values "
"from the query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:256
#, no-wrap
msgid "    $name = $request->query('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:258
msgid ""
"If the requested query string value data is not present, the second argument "
"to this method will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:260
#, no-wrap
msgid "    $name = $request->query('name', 'Helen');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:262
msgid ""
"You may call the `query` method without any arguments in order to retrieve "
"all of the query string values as an associative array:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:264
#, no-wrap
msgid "    $query = $request->query();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:266
#, no-wrap
msgid "<a name=\"retrieving-json-input-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:266
#, no-wrap
msgid "Retrieving JSON Input Values"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:269
msgid ""
"When sending JSON requests to your application, you may access the JSON data "
"via the `input` method as long as the `Content-Type` header of the request "
"is properly set to `application/json`. You may even use \"dot\" syntax to "
"retrieve values that are nested within JSON arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:271
#, no-wrap
msgid "    $name = $request->input('user.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:273
#, no-wrap
msgid "<a name=\"retrieving-boolean-input-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:273
#, no-wrap
msgid "Retrieving Boolean Input Values"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:276
msgid ""
"When dealing with HTML elements like checkboxes, your application may "
"receive \"truthy\" values that are actually strings. For example, \"true\" "
"or \"on\". For convenience, you may use the `boolean` method to retrieve "
"these values as booleans. The `boolean` method returns `true` for 1, \"1\", "
"true, \"true\", \"on\", and \"yes\". All other values will return `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:278
#, no-wrap
msgid "    $archived = $request->boolean('archived');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:280
#, no-wrap
msgid "<a name=\"retrieving-input-via-dynamic-properties\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:280
#, no-wrap
msgid "Retrieving Input Via Dynamic Properties"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:283
msgid ""
"You may also access user input using dynamic properties on the "
"`Illuminate\\Http\\Request` instance. For example, if one of your "
"application's forms contains a `name` field, you may access the value of the "
"field like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:285
#, no-wrap
msgid "    $name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:287
msgid ""
"When using dynamic properties, Laravel will first look for the parameter's "
"value in the request payload. If it is not present, Laravel will search for "
"the field in the matched route's parameters."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:289
#, no-wrap
msgid "<a name=\"retrieving-a-portion-of-the-input-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:289
#, no-wrap
msgid "Retrieving A Portion Of The Input Data"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:292
msgid ""
"If you need to retrieve a subset of the input data, you may use the `only` "
"and `except` methods. Both of these methods accept a single `array` or a "
"dynamic list of arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:294
#, no-wrap
msgid "    $input = $request->only(['username', 'password']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:296
#, no-wrap
msgid "    $input = $request->only('username', 'password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:298
#, no-wrap
msgid "    $input = $request->except(['credit_card']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:300
#, no-wrap
msgid "    $input = $request->except('credit_card');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:302
#, no-wrap
msgid ""
"> {note} The `only` method returns all of the key / value pairs that you "
"request; however, it will not return key / value pairs that are not present "
"on the request.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:304
#, no-wrap
msgid "<a name=\"determining-if-input-is-present\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:304
#, no-wrap
msgid "Determining If Input Is Present"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:307
msgid ""
"You may use the `has` method to determine if a value is present on the "
"request. The `has` method returns `true` if the value is present on the "
"request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:311
#, no-wrap
msgid ""
"    if ($request->has('name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:313
msgid ""
"When given an array, the `has` method will determine if all of the specified "
"values are present:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:317
#, no-wrap
msgid ""
"    if ($request->has(['name', 'email'])) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:319
msgid ""
"The `whenHas` method will execute the given closure if a value is present on "
"the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:323
#, no-wrap
msgid ""
"    $request->whenHas('name', function ($input) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:325
msgid ""
"The `hasAny` method returns `true` if any of the specified values are "
"present:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:329
#, no-wrap
msgid ""
"    if ($request->hasAny(['name', 'email'])) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:331
msgid ""
"If you would like to determine if a value is present on the request and is "
"not empty, you may use the `filled` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:335
#, no-wrap
msgid ""
"    if ($request->filled('name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:337
msgid ""
"The `whenFilled` method will execute the given closure if a value is present "
"on the request and is not empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:341
#, no-wrap
msgid ""
"    $request->whenFilled('name', function ($input) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:343
msgid ""
"To determine if a given key is absent from the request, you may use the "
"`missing` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:347
#, no-wrap
msgid ""
"    if ($request->missing('name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:349
#, no-wrap
msgid "<a name=\"old-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:349
#, no-wrap
msgid "Old Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:352
msgid ""
"Laravel allows you to keep input from one request during the next "
"request. This feature is particularly useful for re-populating forms after "
"detecting validation errors. However, if you are using Laravel's included "
"[validation features](/docs/{{version}}/validation), it is possible that you "
"will not need to manually use these session input flashing methods directly, "
"as some of Laravel's built-in validation facilities will call them "
"automatically."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:354
#, no-wrap
msgid "<a name=\"flashing-input-to-the-session\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:354
#, no-wrap
msgid "Flashing Input To The Session"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:357
msgid ""
"The `flash` method on the `Illuminate\\Http\\Request` class will flash the "
"current input to the [session](/docs/{{version}}/session) so that it is "
"available during the user's next request to the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:359
#, no-wrap
msgid "    $request->flash();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:361
msgid ""
"You may also use the `flashOnly` and `flashExcept` methods to flash a subset "
"of the request data to the session. These methods are useful for keeping "
"sensitive information such as passwords out of the session:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:363
#, no-wrap
msgid "    $request->flashOnly(['username', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:365
#, no-wrap
msgid "    $request->flashExcept('password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:367
#, no-wrap
msgid "<a name=\"flashing-input-then-redirecting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:367
#, no-wrap
msgid "Flashing Input Then Redirecting"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:370
msgid ""
"Since you often will want to flash input to the session and then redirect to "
"the previous page, you may easily chain input flashing onto a redirect using "
"the `withInput` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:372
#, no-wrap
msgid "    return redirect('form')->withInput();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:374
#, no-wrap
msgid "    return redirect()->route('user.create')->withInput();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:378
#, no-wrap
msgid ""
"    return redirect('form')->withInput(\n"
"        $request->except('password')\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:380
#, no-wrap
msgid "<a name=\"retrieving-old-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:380
#, no-wrap
msgid "Retrieving Old Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:383
msgid ""
"To retrieve flashed input from the previous request, invoke the `old` method "
"on an instance of `Illuminate\\Http\\Request`. The `old` method will pull "
"the previously flashed input data from the "
"[session](/docs/{{version}}/session):"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:385
#, no-wrap
msgid "    $username = $request->old('username');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:387
msgid ""
"Laravel also provides a global `old` helper. If you are displaying old input "
"within a [Blade template](/docs/{{version}}/blade), it is more convenient to "
"use the `old` helper to repopulate the form. If no old input exists for the "
"given field, `null` will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:389
#, no-wrap
msgid ""
"    <input type=\"text\" name=\"username\" value=\"{{ old('username') "
"}}\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:391
#, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:391
#, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:394
#, no-wrap
msgid "<a name=\"retrieving-cookies-from-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:394
#, no-wrap
msgid "Retrieving Cookies From Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:397
msgid ""
"All cookies created by the Laravel framework are encrypted and signed with "
"an authentication code, meaning they will be considered invalid if they have "
"been changed by the client. To retrieve a cookie value from the request, use "
"the `cookie` method on an `Illuminate\\Http\\Request` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:399
#, no-wrap
msgid "    $value = $request->cookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:401
#, no-wrap
msgid "<a name=\"input-trimming-and-normalization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:401
#, no-wrap
msgid "Input Trimming & Normalization"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:404
msgid ""
"By default, Laravel includes the `App\\Http\\Middleware\\TrimStrings` and "
"`App\\Http\\Middleware\\ConvertEmptyStringsToNull` middleware in your "
"application's global middleware stack. These middleware are listed in the "
"global middleware stack by the `App\\Http\\Kernel` class. These middleware "
"will automatically trim all incoming string fields on the request, as well "
"as convert any empty string fields to `null`. This allows you to not have to "
"worry about these normalization concerns in your routes and controllers."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:406
msgid ""
"If you would like to disable this behavior, you may remove the two "
"middleware from your application's middleware stack by removing them from "
"the `$middleware` property of your `App\\Http\\Kernel` class."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:408
#, no-wrap
msgid "<a name=\"files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:408
#, no-wrap
msgid "Files"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:411
#, no-wrap
msgid "<a name=\"retrieving-uploaded-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:411
#, no-wrap
msgid "Retrieving Uploaded Files"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:414
msgid ""
"You may retrieve uploaded files from an `Illuminate\\Http\\Request` instance "
"using the `file` method or using dynamic properties. The `file` method "
"returns an instance of the `Illuminate\\Http\\UploadedFile` class, which "
"extends the PHP `SplFileInfo` class and provides a variety of methods for "
"interacting with the file:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:416
#, no-wrap
msgid "    $file = $request->file('photo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:418
#, no-wrap
msgid "    $file = $request->photo;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:420
msgid ""
"You may determine if a file is present on the request using the `hasFile` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:424
#, no-wrap
msgid ""
"    if ($request->hasFile('photo')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:426
#, no-wrap
msgid "<a name=\"validating-successful-uploads\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:426
#, no-wrap
msgid "Validating Successful Uploads"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:429
msgid ""
"In addition to checking if the file is present, you may verify that there "
"were no problems uploading the file via the `isValid` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:433
#, no-wrap
msgid ""
"    if ($request->file('photo')->isValid()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:435
#, no-wrap
msgid "<a name=\"file-paths-extensions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:435
#, no-wrap
msgid "File Paths & Extensions"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:438
msgid ""
"The `UploadedFile` class also contains methods for accessing the file's "
"fully-qualified path and its extension. The `extension` method will attempt "
"to guess the file's extension based on its contents. This extension may be "
"different from the extension that was supplied by the client:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:440
#, no-wrap
msgid "    $path = $request->photo->path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:442
#, no-wrap
msgid "    $extension = $request->photo->extension();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:444
#, no-wrap
msgid "<a name=\"other-file-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:444
#, no-wrap
msgid "Other File Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:447
msgid ""
"There are a variety of other methods available on `UploadedFile` "
"instances. Check out the [API documentation for the "
"class](https://api.symfony.com/master/Symfony/Component/HttpFoundation/File/UploadedFile.html) "
"for more information regarding these methods."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:449
#, no-wrap
msgid "<a name=\"storing-uploaded-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:449
#, no-wrap
msgid "Storing Uploaded Files"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:452
msgid ""
"To store an uploaded file, you will typically use one of your configured "
"[filesystems](/docs/{{version}}/filesystem). The `UploadedFile` class has a "
"`store` method that will move an uploaded file to one of your disks, which "
"may be a location on your local filesystem or a cloud storage location like "
"Amazon S3."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:454
msgid ""
"The `store` method accepts the path where the file should be stored relative "
"to the filesystem's configured root directory. This path should not contain "
"a filename, since a unique ID will automatically be generated to serve as "
"the filename."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:456
msgid ""
"The `store` method also accepts an optional second argument for the name of "
"the disk that should be used to store the file. The method will return the "
"path of the file relative to the disk's root:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:458
#, no-wrap
msgid "    $path = $request->photo->store('images');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:460
#, no-wrap
msgid "    $path = $request->photo->store('images', 's3');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:462
msgid ""
"If you do not want a filename to be automatically generated, you may use the "
"`storeAs` method, which accepts the path, filename, and disk name as its "
"arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:464
#, no-wrap
msgid "    $path = $request->photo->storeAs('images', 'filename.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:466
#, no-wrap
msgid "    $path = $request->photo->storeAs('images', 'filename.jpg', 's3');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:468
#, no-wrap
msgid ""
"> {tip} For more information about file storage in Laravel, check out the "
"complete [file storage documentation](/docs/{{version}}/filesystem).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:470
#, no-wrap
msgid "<a name=\"configuring-trusted-proxies\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:470
#, no-wrap
msgid "Configuring Trusted Proxies"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:473
msgid ""
"When running your applications behind a load balancer that terminates TLS / "
"SSL certificates, you may notice your application sometimes does not "
"generate HTTPS links when using the `url` helper. Typically this is because "
"your application is being forwarded traffic from your load balancer on port "
"80 and does not know it should generate secure links."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:475
msgid ""
"To solve this, you may use the `App\\Http\\Middleware\\TrustProxies` "
"middleware that is included in your Laravel application, which allows you to "
"quickly customize the load balancers or proxies that should be trusted by "
"your application. Your trusted proxies should be listed as an array on the "
"`$proxies` property of this middleware. In addition to configuring the "
"trusted proxies, you may configure the proxy `$headers` that should be "
"trusted:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:479
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:482
#, no-wrap
msgid ""
"    use Fideloper\\Proxy\\TrustProxies as Middleware;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:494
#, no-wrap
msgid ""
"    class TrustProxies extends Middleware\n"
"    {\n"
"        /**\n"
"         * The trusted proxies for this application.\n"
"         *\n"
"         * @var string|array\n"
"         */\n"
"        protected $proxies = [\n"
"            '192.168.1.1',\n"
"            '192.168.1.2',\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:502
#, no-wrap
msgid ""
"        /**\n"
"         * The headers that should be used to detect proxies.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        protected $headers = Request::HEADER_X_FORWARDED_FOR | "
"Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | "
"Request::HEADER_X_FORWARDED_PROTO;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:504
#, no-wrap
msgid ""
"> {tip} If you are using AWS Elastic Load Balancing, your `$headers` value "
"should be `Request::HEADER_X_FORWARDED_AWS_ELB`. For more information on the "
"constants that may be used in the `$headers` property, check out Symfony's "
"documentation on [trusting "
"proxies](https://symfony.com/doc/current/deployment/proxies.html).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:506
#, no-wrap
msgid "<a name=\"trusting-all-proxies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:506
#, no-wrap
msgid "Trusting All Proxies"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:509
msgid ""
"If you are using Amazon AWS or another \"cloud\" load balancer provider, you "
"may not know the IP addresses of your actual balancers. In this case, you "
"may use `*` to trust all proxies:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:516
#, no-wrap
msgid ""
"    /**\n"
"     * The trusted proxies for this application.\n"
"     *\n"
"     * @var string|array\n"
"     */\n"
"    protected $proxies = '*';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:518
#, no-wrap
msgid "<a name=\"configuring-trusted-hosts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:518
#, no-wrap
msgid "Configuring Trusted Hosts"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:521
msgid ""
"By default, Laravel will respond to all requests it receives regardless of "
"the content of the HTTP request's `Host` header. In addition, the `Host` "
"header's value will be used when generating absolute URLs to your "
"application during a web request."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:523
msgid ""
"Typically, you should configure your web server, such as Nginx or Apache, to "
"only send requests to your application that match a given host "
"name. However, if you do not have the ability to customize your web server "
"directly and need to instruct Laravel to only respond to certain host names, "
"you may do so by enabling the `App\\Http\\Middleware\\TrustHosts` middleware "
"for your application."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:525
msgid ""
"The `TrustHosts` middleware is already included in the `$middleware` stack "
"of your application; however, you should uncomment it so that it becomes "
"active. Within this middleware's `hosts` method, you may specify the host "
"names that your application should respond to. Incoming requests with other "
"`Host` value headers will be rejected:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:538
#, no-wrap
msgid ""
"    /**\n"
"     * Get the host patterns that should be trusted.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function hosts()\n"
"    {\n"
"        return [\n"
"            'laravel.test',\n"
"            $this->allSubdomainsOfApplicationUrl(),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:539
msgid ""
"The `allSubdomainsOfApplicationUrl` helper method will return a regular "
"expression matching all subdomains of your application's `app.url` "
"configuration value. This helper method provides a convenient way to allow "
"all of your application's subdomains when building an application that "
"utilizes wildcard subdomains."
msgstr ""
