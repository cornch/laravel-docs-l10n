msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/releases.pot\n"
"X-Crowdin-File-ID: 135\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-11-05 13:30\n"

#: docs/10.x/releases.md:block 1 (header)
msgid "Release Notes"
msgstr "版本資訊"

#: docs/10.x/releases.md:block 2 (unordered list)
msgid "[Versioning Scheme](#versioning-scheme)"
msgstr "[版本策略](#versioning-scheme)"

#: docs/10.x/releases.md:block 2 (unordered list)
msgid "[Support Policy](#support-policy)"
msgstr "[支援政策](#support-policy)"

#: docs/10.x/releases.md:block 2 (unordered list)
msgid "[Laravel 10](#laravel-10)"
msgstr "[Laravel 10](#laravel-10)"

#: docs/10.x/releases.md:block 4 (header)
msgid "Versioning Scheme"
msgstr "版本策略"

#: docs/10.x/releases.md:block 5 (paragraph)
msgid "Laravel and its other first-party packages follow [Semantic Versioning](https://semver.org). Major framework releases are released every year (~Q1), while minor and patch releases may be released as often as every week. Minor and patch releases should **never** contain breaking changes."
msgstr "Laravel 及其第一方套件都遵守 [語義化版本](https://semver.org/lang/zh-Tw/)。框架的主要更新會每年釋出 (約在第一季)，而次版本與修訂版則可能頻繁到每週更新。此版本與修訂版 **絕對不會** 包含中斷性變更 (Breaking Change)。"

#: docs/10.x/releases.md:block 6 (paragraph)
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^10.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr "由於 Laravel 的主要更新會包含中斷性變更，因此在專案或套件中參照 Laravel 框架或其組件時，應使用如 `^10.0` 這樣的版本限制式。不過，我們也會不斷努力確保每次進行主要版本更新時，都可於一天之內升級完成。"

#: docs/10.x/releases.md:block 8 (header)
msgid "Named Arguments"
msgstr "帶名稱的引數"

#: docs/10.x/releases.md:block 9 (paragraph)
msgid "[Named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function arguments when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr "[帶名稱引數](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments)功能尚未包含在 Laravel 的向下相容性方針內。我們可能會在有必要的時候更改函式的參數名稱以改進 Laravel 的程式碼。因此，在使用帶名稱引數呼叫 Laravel 方法時應格外注意，並瞭解到引數名稱未來可能會有所更改。"

#: docs/10.x/releases.md:block 11 (header)
msgid "Support Policy"
msgstr "支援政策"

#: docs/10.x/releases.md:block 12 (paragraph)
msgid "For all Laravel releases, bug fixes are provided for 18 months and security fixes are provided for 2 years. For all additional libraries, including Lumen, only the latest major release receives bug fixes. In addition, please review the database versions [supported by Laravel](/docs/{{version}}/database#introduction)."
msgstr "所有的 Laravel 版本都提供 18 個月的 Bug 修正，以及 2 年的安全性修正。對於其他的函式庫，如 Lumen，則只有最新的主要版本會收到 Bug 修正。此外，也請參考 [Laravel 支援的](/docs/{{version}}/database#introduction)資料庫版本。"

#: docs/10.x/releases.md:block 14 (table)
msgid "Version"
msgstr "版本"

#: docs/10.x/releases.md:block 14 (table)
msgid "PHP (*)"
msgstr "PHP (*)"

#: docs/10.x/releases.md:block 14 (table)
msgid "Release"
msgstr "釋出日期"

#: docs/10.x/releases.md:block 14 (table)
msgid "Bug Fixes Until"
msgstr "Bug 修正期限"

#: docs/10.x/releases.md:block 14 (table)
msgid "Security Fixes Until"
msgstr "安全性修正期限"

#: docs/10.x/releases.md:block 14 (table)
msgid "8"
msgstr "8"

#: docs/10.x/releases.md:block 14 (table)
msgid "7.3 - 8.1"
msgstr "7.3 - 8.1"

#: docs/10.x/releases.md:block 14 (table)
msgid "September 8th, 2020"
msgstr "2020 年 9 月 8 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "July 26th, 2022"
msgstr "2022 年 7 月 26 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "January 24th, 2023"
msgstr "2023 年 1 月 24 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "9"
msgstr "9"

#: docs/10.x/releases.md:block 14 (table)
msgid "8.0 - 8.2"
msgstr "8.0 - 8.2"

#: docs/10.x/releases.md:block 14 (table)
msgid "February 8th, 2022"
msgstr "2022 年 2 月 8 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "August 8th, 2023"
msgstr "2023 年 8 月 8 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "February 6th, 2024"
msgstr "2024 年 2 月 6 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "10"
msgstr "10"

#: docs/10.x/releases.md:block 14 (table)
msgid "8.1 - 8.2"
msgstr "8.1 - 8.2"

#: docs/10.x/releases.md:block 14 (table)
msgid "February 14th, 2023"
msgstr ""

#: docs/10.x/releases.md:block 14 (table)
msgid "August 6th, 2024"
msgstr "2024 年 8 月 6 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "February 4th, 2025"
msgstr "2025 年 2 月 4 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "11"
msgstr "11"

#: docs/10.x/releases.md:block 14 (table)
msgid "8.2"
msgstr "8.2"

#: docs/10.x/releases.md:block 14 (table)
msgid "Q1 2024"
msgstr "2024 年第 1 季"

#: docs/10.x/releases.md:block 14 (table)
msgid "August 5th, 2025"
msgstr "2025 年 8 月 5 日"

#: docs/10.x/releases.md:block 14 (table)
msgid "February 3rd, 2026"
msgstr "2026 年 2 月 3 日"

#: docs/10.x/releases.md:block 17 (paragraph)
msgid "(*) Supported PHP versions"
msgstr "(*) 支援的 PHP 版本"

#: docs/10.x/releases.md:block 19 (header)
msgid "Laravel 10"
msgstr "Laravel 10"

#: docs/10.x/releases.md:block 20 (paragraph)
msgid "As you may know, Laravel transitioned to yearly releases with the release of Laravel 8. Previously, major versions were released every 6 months. This transition is intended to ease the maintenance burden on the community and challenge our development team to ship amazing, powerful new features without introducing breaking changes. Therefore, we have shipped a variety of robust features to Laravel 9 without breaking backwards compatibility."
msgstr "讀者可能已經知道，從 Laravel 8 開始，Laravel 改為每年釋出新的主要版本。在此之前，每 6 個月都會釋出主要版本。這個改變是為了降低社群維護的負擔，並讓我們的開發團隊能想辦法在不包含中斷性更改 (Breaking Change) 的情況下繼續提供驚艷且強大的新功能。因此，我們在 Laravel 9 中，以不破壞向下相容性的前提下推出了許多強健的功能。"

#: docs/10.x/releases.md:block 21 (paragraph)
msgid "Therefore, this commitment to ship great new features during the current release will likely lead to future \"major\" releases being primarily used for \"maintenance\" tasks such as upgrading upstream dependencies, which can be seen in these release notes."
msgstr "因此，我們對於在目前版本中釋出新功能的承諾也將導致未來的「主要 (Major)」版本將著重於一些「維護性」的任務，如更新上游套件等，讀者稍後可以在本版本資訊內讀到。"

#: docs/10.x/releases.md:block 22 (paragraph)
msgid "Laravel 10 continues the improvements made in Laravel 9.x by introducing argument and return types to all application skeleton methods, as well as all stub files used to generate classes throughout the framework. In addition, a new, developer-friendly abstraction layer has been introduced for starting and interacting with external processes. Further, Laravel Pennant has been introduced to provide a wonderful approach to managing your application's \"feature flags\"."
msgstr "Laravel 10 在 Laravel 9.x 的基礎上繼續進行了諸多改進，包含在專案 Skeleton 中以及 Laravel 用來產生類別的 Stub 檔案中加上了回傳型別，並為所有引數加上型別。此外，我們還新增了一個對開發者友善的抽象層，可用來啟動與使用外部處理程序。而且，我們還推出了 Laravel Pennant，為你提供管理專案「^[Feature Flag](功能旗標)」的優質方案。"

#: docs/10.x/releases.md:block 24 (header)
msgid "PHP 8.1"
msgstr "PHP 8.1"

#: docs/10.x/releases.md:block 25 (paragraph)
msgid "Laravel 10.x requires a minimum PHP version of 8.1."
msgstr "Laravel 10.x 所要求的最小 PHP 版本為 8.1。"

#: docs/10.x/releases.md:block 27 (header)
msgid "Types"
msgstr "型別"

#: docs/10.x/releases.md:block 28 (paragraph)
msgid "*Application skeleton and stub type-hints were contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr "*專案 Skeleton 與 Stub 的型別提示由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻*。"

#: docs/10.x/releases.md:block 29 (paragraph)
msgid "On its initial release, Laravel utilized all of the type-hinting features available in PHP at the time. However, many new features have been added to PHP in the subsequent years, including additional primitive type-hints, return types, and union types."
msgstr "在 Laravel 最初的版本中，我們使用了當時 PHP 內能用的所有型別提示 (Type-hint) 功能。不過，在接下來的幾年中，PHP 不斷推出新功能，包含原生型別的型別提示、回傳型別、等位型別 (Union Type) 等。"

#: docs/10.x/releases.md:block 30 (paragraph)
msgid "Laravel 10.x thoroughly updates the application skeleton and all stubs utilized by the framework to introduce argument and return types to all method signatures. In addition, extraneous \"doc block\" type-hint information has been deleted."
msgstr ""

#: docs/10.x/releases.md:block 31 (paragraph)
msgid "This change is entirely backwards compatible with existing applications. Therefore, existing applications that do not have these type-hints will continue to function normally."
msgstr "對於現有專案來說，這項更改是完全向下相容的。因此，現有專案若沒有型別提示，也能繼續正常運作："

#: docs/10.x/releases.md:block 33 (header)
msgid "Laravel Pennant"
msgstr "Laravel Pennant"

#: docs/10.x/releases.md:block 34 (paragraph)
msgid "*Laravel Pennant was developed by [Tim MacDonald](https://github.com/timacdonald)*."
msgstr "*Laravel Pennant 由 [Tim MacDonald](https://github.com/timacdonald) 開發*。"

#: docs/10.x/releases.md:block 35 (paragraph)
msgid "A new first-party package, Laravel Pennant, has been released. Laravel Pennant offers a light-weight, streamlined approach to managing your application's feature flags. Out of the box, Pennant includes an in-memory `array` driver and a `database` driver for persistent feature storage."
msgstr "第一方套件，Laravel Pennant，現已推出。Laravel Pennant 提供了輕量、簡化的方法，能讓你管理專案的 Feature Flag。在 Pennant 中包含了現成的 `array` Driver 與 `database` Driver 可用來保存 Feature。"

#: docs/10.x/releases.md:block 36 (paragraph)
msgid "Features can be easily defined via the `Feature::define` method:"
msgstr "使用 `Feature::define` 方法就能輕鬆定義 Feature："

#: docs/10.x/releases.md:block 37 (code)
msgid "use Laravel\\Pennant\\Feature;\n"
"use Illuminate\\Support\\Lottery;\n\n"
"Feature::define('new-onboarding-flow', function () {\n"
"    return Lottery::odds(1, 10);\n"
"});\n"
msgstr "use Laravel\\Pennant\\Feature;\n"
"use Illuminate\\Support\\Lottery;\n\n"
"Feature::define('new-onboarding-flow', function () {\n"
"    return Lottery::odds(1, 10);\n"
"});\n"

#: docs/10.x/releases.md:block 38 (paragraph)
msgid "Once a feature has been defined, you may easily determine if the current user has access to the given feature:"
msgstr "定義好 Feature 後，可以輕鬆判斷目前使用者是否能存取該功能："

#: docs/10.x/releases.md:block 39 (code)
msgid "if (Feature::active('new-onboarding-flow')) {\n"
"    // ...\n"
"}\n"
msgstr "if (Feature::active('new-onboarding-flow')) {\n"
"    // ...\n"
"}\n"

#: docs/10.x/releases.md:block 40 (paragraph)
msgid "Of course, for convenience, Blade directives are also available:"
msgstr "當然，為了讓開發起來更方便，我們也提供了 Blade 指示詞："

#: docs/10.x/releases.md:block 41 (code)
msgid "@feature('new-onboarding-flow')\n"
"    <div>\n"
"        <!-- ... -->\n"
"    </div>\n"
"@endfeature\n"
msgstr "@feature('new-onboarding-flow')\n"
"    <div>\n"
"        <!-- ... -->\n"
"    </div>\n"
"@endfeature\n"

#: docs/10.x/releases.md:block 42 (paragraph)
msgid "Pennant offers a variety of more advanced features and APIs. For more information, please consult the [comprehensive Pennant documentation](/docs/{{version}}/pennant)."
msgstr "Pennant 還提供了更多進階的功能與 API。更多資訊請參考[完整的 Pennant 說明文件](/docs/{{version}}/pennant)。"

#: docs/10.x/releases.md:block 44 (header)
msgid "Process Interaction"
msgstr "使用 Process"

#: docs/10.x/releases.md:block 45 (paragraph)
msgid "*The process abstraction layer was contributed by [Nuno Maduro](https://github.com/nunomaduro) and [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Process 的抽象層由 [Nuno Maduro](https://github.com/nunomaduro) 與 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/10.x/releases.md:block 46 (paragraph)
msgid "Laravel 10.x introduces a beautiful abstraction layer for starting and interacting with external processes via a new `Process` facade:"
msgstr "Laravel 10.x 中推出了一個新的 `Process` Facade，這個出色的抽象層可用來啟動與操縱外部處理程序 (Process)："

#: docs/10.x/releases.md:block 47 (code)
msgid "use Illuminate\\Support\\Facades\\Process;\n\n"
"$result = Process::run('ls -la');\n\n"
"return $result->output();\n"
msgstr "use Illuminate\\Support\\Facades\\Process;\n\n"
"$result = Process::run('ls -la');\n\n"
"return $result->output();\n"

#: docs/10.x/releases.md:block 48 (paragraph)
msgid "Processes may even be started in pools, allowing for the convenient execution and management of concurrent processes:"
msgstr "也可以使用集區 (Pool) 的方式啟動處理程序，以更方便的執行與管理平行執行的處理程序："

#: docs/10.x/releases.md:block 49 (code)
msgid "use Illuminate\\Process\\Pool;\n"
"use Illuminate\\Support\\Facades\\Process;\n\n"
"[$first, $second, $third] = Process::concurrently(function (Pool $pool) {\n"
"    $pool->command('cat first.txt');\n"
"    $pool->command('cat second.txt');\n"
"    $pool->command('cat third.txt');\n"
"});\n\n"
"return $first->output();\n"
msgstr ""

#: docs/10.x/releases.md:block 50 (paragraph)
msgid "In addition, processes may be faked for convenient testing:"
msgstr "此外，也可以模擬 Process 以方便測試："

#: docs/10.x/releases.md:block 51 (code)
msgid "Process::fake();\n\n"
"// ...\n\n"
"Process::assertRan('ls -la');\n"
msgstr "Process::fake();\n\n"
"// ...\n\n"
"Process::assertRan('ls -la');\n"

#: docs/10.x/releases.md:block 52 (paragraph)
msgid "For more information on interacting with processes, please consult the [comprehensive process documentation](/docs/{{version}}/processes)."
msgstr "更多有關使用 Process 的資訊，請參考[完整的 Process 說明文件](/docs/{{version}}/processes)。"

#: docs/10.x/releases.md:block 54 (header)
msgid "Test Profiling"
msgstr "測試分析"

#: docs/10.x/releases.md:block 55 (paragraph)
msgid "*Test profiling was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr "*測試分析由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻*。"

#: docs/10.x/releases.md:block 56 (paragraph)
msgid "The Artisan `test` command has received a new `--profile` option that allows you to easily identify the slowest tests in your application:"
msgstr "Artisan 的 `test` 指令有了一個全新的 `--profile` 選項，能讓你輕鬆的找到專案中最慢的測試："

#: docs/10.x/releases.md:block 57 (code)
msgid "php artisan test --profile\n"
msgstr "php artisan test --profile\n"

#: docs/10.x/releases.md:block 58 (paragraph)
msgid "For convenience, the slowest tests will be displayed directly within the CLI output:"
msgstr "為了方便起見，最慢的測試會直接在 CLI 的輸出中顯示出來："

#: docs/10.x/releases.md:block 61 (header)
msgid "Pest Scaffolding"
msgstr "Pest 的 Scaffold"

#: docs/10.x/releases.md:block 62 (paragraph)
msgid "New Laravel projects may now be created with Pest test scaffolding by default. To opt-in to this feature, provide the `--pest` flag when creating a new application via the Laravel installer:"
msgstr "現在，新建立的 Laravel 專案中可以使用 Pest 測試來 Scaffold。若要使用這個功能，請在使用 Laravel 安裝程式建立新專案時提供 `--pest` 旗標："

#: docs/10.x/releases.md:block 63 (code)
msgid "laravel new example-application --pest\n"
msgstr "laravel new example-application --pest\n"

#: docs/10.x/releases.md:block 65 (header)
msgid "Generator CLI Prompts"
msgstr "產生 CLI 提示字元"

#: docs/10.x/releases.md:block 66 (paragraph)
msgid "*Generator CLI prompts were contributed by [Jess Archer](https://github.com/jessarcher)*."
msgstr "*產生 CLI 提示字元由 [Jess Archer](https://github.com/jessarcher) 參與貢獻*。"

#: docs/10.x/releases.md:block 67 (paragraph)
msgid "To improve the framework's developer experience, all of Laravel's built-in `make` commands no longer require any input. If the commands are invoked without input, you will be prompted for the required arguments:"
msgstr "為了改進 Laravel 所提供的開發者經驗，Laravel 內所有內建的 `make` 指令現在已不再需要任何輸入。在執行這些指令時，若未提供輸入，則會被提示輸入必要的引數："

#: docs/10.x/releases.md:block 68 (code)
msgid "php artisan make:controller\n"
msgstr "php artisan make:controller\n"

#: docs/10.x/releases.md:block 70 (header)
msgid "Horizon / Telescope Facelift"
msgstr ""

#: docs/10.x/releases.md:block 71 (paragraph)
msgid "[Horizon](/docs/{{version}}/horizon) and [Telescope](/docs/{{version}}/telescope) have been updated with a fresh, modern look including improved typography, spacing, and design:"
msgstr ""

#: docs/8.x/releases.md:block 2 (unordered list)
msgid "[Exceptions](#exceptions)"
msgstr "[例外](#exceptions)"

#: docs/8.x/releases.md:block 2 (unordered list)
msgid "[Laravel 8](#laravel-8)"
msgstr "[Laravel 8](#laravel-8)"

#: docs/8.x/releases.md:block 5 (paragraph)
msgid "Laravel and its other first-party packages follow [Semantic Versioning](https://semver.org). Major framework releases are released every year (~February), while minor and patch releases may be released as often as every week. Minor and patch releases should **never** contain breaking changes."
msgstr "Laravel 及其第一方套件都遵守 [語義化版本](https://semver.org/lang/zh-Tw/)。框架的主要更新會每年釋出 (約在二月時)，而次版本與修訂版則可能頻繁到每週更新。次版本與修訂版 **絕對不會** 包含^[中斷性變更](Breaking Change)。"

#: docs/8.x/releases.md:block 6 (paragraph)
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^8.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr "由於 Laravel 的主要更新會包含中斷性變更，因此在專案或套件中參照 Laravel 框架或其組件時，應使用如 `^8.0` 這樣的版本限制式。不過，我們也會不斷努力確保每次進行主要版本更新時，都可於一天之內升級完成。"

#: docs/8.x/releases.md:block 8 (header)
msgid "Exceptions"
msgstr "例外"

#: docs/8.x/releases.md:block 11 (paragraph)
msgid "At this time, PHP's [named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) functionality are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function parameters when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr "截至目前為止，PHP 的[帶名稱引數](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) 尚未包含在 Laravel 的向下相容性方針內。我們可能會在有必要的時候更改函式的引數名稱以改進 Laravel 的程式碼。因此，在使用帶名稱引數呼叫 Laravel 方法時應格外注意，並應瞭解到引數名稱未來可能會有所更改。"

#: docs/8.x/releases.md:block 15 (table)
msgid "6 (LTS)"
msgstr "6 (LTS)"

#: docs/8.x/releases.md:block 15 (table)
msgid "7.2 - 8.0"
msgstr "7.2 - 8.0"

#: docs/8.x/releases.md:block 15 (table)
msgid "September 3rd, 2019"
msgstr "2019 年 9 月 3 日"

#: docs/8.x/releases.md:block 15 (table)
msgid "January 25th, 2022"
msgstr "2022 年 1 月 25 日"

#: docs/8.x/releases.md:block 15 (table)
msgid "September 6th, 2022"
msgstr "2022 年 9 月 6 日"

#: docs/8.x/releases.md:block 15 (table)
msgid "7"
msgstr "7"

#: docs/8.x/releases.md:block 15 (table)
msgid "March 3rd, 2020"
msgstr "2020 年 3 月 3 日"

#: docs/8.x/releases.md:block 15 (table)
msgid "October 6th, 2020"
msgstr "2020 年 10 月 6 日"

#: docs/8.x/releases.md:block 15 (table)
msgid "March 3rd, 2021"
msgstr "2021 年 3 月 3 日"

#: docs/8.x/releases.md:block 15 (table)
msgid "8.0 - 8.1"
msgstr "8.0 - 8.1"

#: docs/8.x/releases.md:block 15 (table)
msgid "8.1"
msgstr "8.1"

#: docs/8.x/releases.md:block 15 (table)
msgid "February 7th, 2023"
msgstr "2023 年 2 月 7 日"

#: docs/8.x/releases.md:block 19 (header)
msgid "Laravel 8"
msgstr "Laravel 8"

#: docs/8.x/releases.md:block 20 (paragraph)
msgid "Laravel 8 continues the improvements made in Laravel 7.x by introducing Laravel Jetstream, model factory classes, migration squashing, job batching, improved rate limiting, queue improvements, dynamic Blade components, Tailwind pagination views, time testing helpers, improvements to `artisan serve`, event listener improvements, and a variety of other bug fixes and usability improvements."
msgstr "Laravel 8 持續地對 Laravel 7.x 進行改進，包含導入了 Laravel Jetstream、模型 Factory 類別、資料庫遷移壓縮、批次任務、改進頻率限制、佇列改進、動態 Blade 元件、Tailwind 分頁檢視器、測試時間用的輔助函式、對 `artisan serve` 的改進、時間監聽程式改進、以及各種其他 Bug 修正以及使用性改進。"

#: docs/8.x/releases.md:block 22 (header)
msgid "Laravel Jetstream"
msgstr "Laravel Jetstream"

#: docs/8.x/releases.md:block 23 (paragraph)
msgid "*Laravel Jetstream was written by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Laravel Jetstream 由 [Taylor Otwell](https://github.com/taylorotwell) 撰寫*。"

#: docs/8.x/releases.md:block 24 (paragraph)
msgid "[Laravel Jetstream](https://jetstream.laravel.com) is a beautifully designed application scaffolding for Laravel. Jetstream provides the perfect starting point for your next project and includes login, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management. Laravel Jetstream replaces and improves upon the legacy authentication UI scaffolding available for previous versions of Laravel."
msgstr "[Laravel Jetstream](https://jetstream.laravel.com) 是一套用於 Laravel 的網站 Scaffolding，有漂亮的設計。Jetstream 為你的下一個專案提供了一個絕佳的開始點，包含登入、註冊、電子郵件認證、二步驟認證、Session 管理、通過 Laravel Sanctum 提供的 API 支援、以及選配的團隊管理。Laravel Jetstream 取代並改進了過往版本 Laravel 所提供的舊版認證 UI Scaffolding。"

#: docs/8.x/releases.md:block 25 (paragraph)
msgid "Jetstream is designed using [Tailwind CSS](https://tailwindcss.com) and offers your choice of [Livewire](https://laravel-livewire.com) or [Inertia](https://inertiajs.com) scaffolding."
msgstr "Jetstream 是使用 [Tailwind CSS](https://tailwindcss.com) 進行設計的，並提供了[Livewire](https://laravel-livewire.com) 或 [Inertia](https://inertiajs.com) Scaffolding 可進行選擇。"

#: docs/8.x/releases.md:block 27 (header)
msgid "Models Directory"
msgstr "Model 目錄"

#: docs/8.x/releases.md:block 28 (paragraph)
msgid "By overwhelming community demand, the default Laravel application skeleton now contains an `app/Models` directory. We hope you enjoy this new home for your Eloquent models! All relevant generator commands have been updated to assume models exist within the `app/Models` directory if it exists. If the directory does not exist, the framework will assume your models should be placed within the `app` directory."
msgstr "為了回應來自社群的強烈要求，Laravel 專案的預設基本架構目前已包含了 `app/Models` 目錄。我們希望你能享受這個 Eloquent Model 的新家！所有相關的產生程式指令都已更新。而且，如果 `app/Models` 目錄存在，那麼這些產生程式會假設這個資料夾是用來存放 Model 的。若該目錄不存在，則框架會假設 Model 應放置於 `app` 目錄內。"

#: docs/8.x/releases.md:block 30 (header)
msgid "Model Factory Classes"
msgstr "Model Factory 類別"

#: docs/8.x/releases.md:block 31 (paragraph)
msgid "*Model factory classes were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Model Factory 類別由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/8.x/releases.md:block 32 (paragraph)
msgid "Eloquent [model factories](/docs/{{version}}/database-testing#defining-model-factories) have been entirely re-written as class based factories and improved to have first-class relationship support. For example, the `UserFactory` included with Laravel is written like so:"
msgstr "Eloquent 的 [Model Factory](/docs/{{version}}/database-testing#defining-model-factories) 已經全面重寫為基於 Class 的 Factory 了，並且也經過改進來直接支援資料庫關聯。舉例來說，在 Laravel 中的 `UserFactory` 是這樣寫的："

#: docs/8.x/releases.md:block 33 (code)
msgid "<?php\n\n"
"namespace Database\\Factories;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * The name of the factory's corresponding model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $model = User::class;\n\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'name' => $this->faker->name(),\n"
"            'email' => $this->faker->unique()->safeEmail(),\n"
"            'email_verified_at' => now(),\n"
"            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"            'remember_token' => Str::random(10),\n"
"        ];\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace Database\\Factories;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * The name of the factory's corresponding model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $model = User::class;\n\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'name' => $this->faker->name(),\n"
"            'email' => $this->faker->unique()->safeEmail(),\n"
"            'email_verified_at' => now(),\n"
"            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"            'remember_token' => Str::random(10),\n"
"        ];\n"
"    }\n"
"}\n"

#: docs/8.x/releases.md:block 34 (paragraph)
msgid "Thanks to the new `HasFactory` trait available on generated models, the model factory may be used like so:"
msgstr "由於產生的 Model 中包含了新的 `HasFactory` Trait，因此我們可以這樣使用 Model Factory："

#: docs/8.x/releases.md:block 35 (code)
msgid "use App\\Models\\User;\n\n"
"User::factory()->count(50)->create();\n"
msgstr "use App\\Models\\User;\n\n"
"User::factory()->count(50)->create();\n"

#: docs/8.x/releases.md:block 36 (paragraph)
msgid "Since model factories are now simple PHP classes, state transformations may be written as class methods. In addition, you may add any other helper classes to your Eloquent model factory as needed."
msgstr "由於 Model Factory 已經是一般的 PHP 類別了，因此 State 的變換應通過類別方法來撰寫。此外，也可以依照需求在 Eloquent Model Factory 內加上任何其他的輔助函式。"

#: docs/8.x/releases.md:block 37 (paragraph)
msgid "For example, your `User` model might have a `suspended` state that modifies one of its default attribute values. You may define your state transformations using the base factory's `state` method. You may name your state method anything you like. After all, it's just a typical PHP method:"
msgstr "舉例來說，`User` Model 可能會有個 `suspended` 狀態，用於修改 Model 中預設的屬性值。可以通過基礎 Factory 的 `state` 方法來定義狀態變換。可以任意為狀態方法命名。不管怎麼樣，這個方法就只是個單純的 PHP 方法而已："

#: docs/8.x/releases.md:block 38 (code)
msgid "/**\n"
" * Indicate that the user is suspended.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"public function suspended()\n"
"{\n"
"    return $this->state([\n"
"        'account_status' => 'suspended',\n"
"    ]);\n"
"}\n"
msgstr "/**\n"
" * Indicate that the user is suspended.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"public function suspended()\n"
"{\n"
"    return $this->state([\n"
"        'account_status' => 'suspended',\n"
"    ]);\n"
"}\n"

#: docs/8.x/releases.md:block 39 (paragraph)
msgid "After defining the state transformation method, we may use it like so:"
msgstr "定義好狀態變換方法後，我們可以這樣使用："

#: docs/8.x/releases.md:block 40 (code)
msgid "use App\\Models\\User;\n\n"
"User::factory()->count(5)->suspended()->create();\n"
msgstr "use App\\Models\\User;\n\n"
"User::factory()->count(5)->suspended()->create();\n"

#: docs/8.x/releases.md:block 41 (paragraph)
msgid "As mentioned, Laravel 8's model factories contain first class support for relationships. So, assuming our `User` model has a `posts` relationship method, we may simply run the following code to generate a user with three posts:"
msgstr "就像前面提到的一樣，Laravel 8 的 Model Factory 包含了對關聯的第一手支援。因此，假設我們的 `User` Model 有個 `posts` 關聯方法，我們只需要執行下列程式碼就能產生一個有 3 篇貼文的使用者："

#: docs/8.x/releases.md:block 42 (code)
msgid "$users = User::factory()\n"
"            ->hasPosts(3, [\n"
"                'published' => false,\n"
"            ])\n"
"            ->create();\n"
msgstr "$users = User::factory()\n"
"            ->hasPosts(3, [\n"
"                'published' => false,\n"
"            ])\n"
"            ->create();\n"

#: docs/8.x/releases.md:block 43 (paragraph)
msgid "To ease the upgrade process, the [laravel/legacy-factories](https://github.com/laravel/legacy-factories) package has been released to provide support for the previous iteration of model factories within Laravel 8.x."
msgstr "為了減緩升級的過程，我們提供了 [laravel/legacy-factories](https://github.com/laravel/legacy-factories) 套件來在 Laravel 8.x 中提供舊版 Model Factory 的支援。"

#: docs/8.x/releases.md:block 44 (paragraph)
msgid "Laravel's re-written factories contain many more features that we think you will love. To learn more about model factories, please consult the [database testing documentation](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr "Laravel 的全新 Factory 包含了其他更多我們認為你會喜歡的功能。要瞭解更多有關 Model Factory 的資訊，請參考[資料庫測試說明文件](/docs/{{version}}/database-testing#defining-model-factories)。"

#: docs/8.x/releases.md:block 46 (header)
msgid "Migration Squashing"
msgstr "資料庫遷移壓縮"

#: docs/8.x/releases.md:block 47 (paragraph)
msgid "*Migration squashing was contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Migration 壓縮由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/8.x/releases.md:block 48 (paragraph)
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your migration directory becoming bloated with potentially hundreds of migrations. If you're using MySQL or PostgreSQL, you may now \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr "在寫網站的時候，我們可能會逐漸累積出越來越多的資料庫遷移檔。這樣可能會導致遷移檔目錄中被數百個遷移檔給佔滿。若你使用 MySQL 或 PostgreSQL，現在可以將遷移檔「壓縮」進單一 SQL 檔內。要開始壓縮，請執行 `schema:dump` 指令："

#: docs/8.x/releases.md:block 49 (code)
msgid "php artisan schema:dump\n\n"
"// Dump the current database schema and prune all existing migrations...\n"
"php artisan schema:dump --prune\n"
msgstr "php artisan schema:dump\n\n"
"// 傾印目前的資料庫結構，並刪除所有現存的 Migration...\n"
"php artisan schema:dump --prune\n"

#: docs/8.x/releases.md:block 50 (paragraph)
msgid "When you execute this command, Laravel will write a \"schema\" file to your `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL first. After executing the schema file's commands, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr "執行該指令時，Laravel 會將一個「結構描述 (Schema)」檔案寫入 `database/schema` 目錄內。接著，當要遷移資料庫且尚未執行過任何遷移時，Laravel 會先執行該結構描述檔的 SQL。執行玩結構描述檔的指令後，Laravel 才會接著執行不在該結構描述傾印中剩下的遷移。"

#: docs/8.x/releases.md:block 52 (header)
msgid "Job Batching"
msgstr "批次任務"

#: docs/8.x/releases.md:block 53 (paragraph)
msgid "*Job batching was contributed by [Taylor Otwell](https://github.com/taylorotwell) & [Mohamed Said](https://github.com/themsaid)*."
msgstr "*批次任務由 [Taylor Otwell](https://github.com/taylorotwell) & [Mohamed Said](https://github.com/themsaid) 參與貢獻*。"

#: docs/8.x/releases.md:block 54 (paragraph)
msgid "Laravel's job batching feature allows you to easily execute a batch of jobs and then perform some action when the batch of jobs has completed executing."
msgstr "Laravel 的批次任務功能能讓你輕鬆地執行一系列的任務，並接著在這些任務完成後執行其他操作。"

#: docs/8.x/releases.md:block 55 (paragraph)
msgid "The new `batch` method of the `Bus` facade may be used to dispatch a batch of jobs. Of course, batching is primarily useful when combined with completion callbacks. So, you may use the `then`, `catch`, and `finally` methods to define completion callbacks for the batch. Each of these callbacks will receive an `Illuminate\\Bus\\Batch` instance when they are invoked:"
msgstr "`Bus` Facade 的全新 `batch` 方法可以用來分派一批任務。當然，批次功能與完成回呼一起使用時是最有用。因此，可以使用 `then`, `catch` 與 `finally` 方法來為該批次定義完成回呼。這些回呼都會在被叫用時收到 `Illuminate\\Bus\\Batch` 實體："

#: docs/8.x/releases.md:block 56 (code)
msgid "use App\\Jobs\\ProcessPodcast;\n"
"use App\\Models\\Podcast;\n"
"use Illuminate\\Bus\\Batch;\n"
"use Illuminate\\Support\\Facades\\Bus;\n"
"use Throwable;\n\n"
"$batch = Bus::batch([\n"
"    new ProcessPodcast(Podcast::find(1)),\n"
"    new ProcessPodcast(Podcast::find(2)),\n"
"    new ProcessPodcast(Podcast::find(3)),\n"
"    new ProcessPodcast(Podcast::find(4)),\n"
"    new ProcessPodcast(Podcast::find(5)),\n"
"])->then(function (Batch $batch) {\n"
"    // All jobs completed successfully...\n"
"})->catch(function (Batch $batch, Throwable $e) {\n"
"    // First batch job failure detected...\n"
"})->finally(function (Batch $batch) {\n"
"    // The batch has finished executing...\n"
"})->dispatch();\n\n"
"return $batch->id;\n"
msgstr ""

#: docs/8.x/releases.md:block 57 (paragraph)
msgid "To learn more about job batching, please consult the [queue documentation](/docs/{{version}}/queues#job-batching)."
msgstr "要瞭解更多有關批次任務的資訊，請參考[佇列說明文件](/docs/{{version}}/queues#job-batching)。"

#: docs/8.x/releases.md:block 59 (header)
msgid "Improved Rate Limiting"
msgstr "改進的頻率限制"

#: docs/8.x/releases.md:block 60 (paragraph)
msgid "*Rate limiting improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "(頻率限制的改進由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/8.x/releases.md:block 61 (paragraph)
msgid "Laravel's request rate limiter feature has been augmented with more flexibility and power, while still maintaining backwards compatibility with previous release's `throttle` middleware API."
msgstr "Laravel 的請求頻率限制功能現在有了更多的彈性與能力，且仍於過去版本的 `throttle` 中間層 API 保持向下相容性。"

#: docs/8.x/releases.md:block 62 (paragraph)
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned this rate limiter:"
msgstr "可以使用 `RateLimiter` Facade 的 `for` 方法來定義頻率限制程式。`for` 方法接收頻率限制程式的名稱、以及一個閉包。該閉包應回傳頻率限制的設定，該設定將套用到有設定這個頻率限制程式的路由上："

#: docs/8.x/releases.md:block 63 (code)
msgid "use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n\n"
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000);\n"
"});\n"
msgstr "use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n\n"
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000);\n"
"});\n"

#: docs/8.x/releases.md:block 64 (paragraph)
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr "由於頻率限制程式的回呼會接收連入 HTTP 請求實體，因此我們可以依據連入請求或登入使用者來動態調整適當的頻率限制："

#: docs/8.x/releases.md:block 65 (code)
msgid "RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100);\n"
"});\n"
msgstr "RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100);\n"
"});\n"

#: docs/8.x/releases.md:block 66 (paragraph)
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr "有時候，我們可能會像以某些任意數值來設定頻率限制。舉例來說，我們可能會想限制給定的路由：每個 IP 位址每分鐘只能存取 100 次。為此，可以在設定頻率限制時使用 `by` 方法："

#: docs/8.x/releases.md:block 67 (code)
msgid "RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100)->by($request->ip());\n"
"});\n"
msgstr "RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100)->by($request->ip());\n"
"});\n"

#: docs/8.x/releases.md:block 68 (paragraph)
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr "可以使用 `throttle` [Middleware](/docs/{{version}}/middleware) 來將頻率限制程式附加到路由或路由群組上。這個 Throttle Middleware 接受欲指派給路由的頻率限制程式名稱："

#: docs/8.x/releases.md:block 69 (code)
msgid "Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        //\n"
"    });\n\n"
"    Route::post('/video', function () {\n"
"        //\n"
"    });\n"
"});\n"
msgstr "Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        //\n"
"    });\n\n"
"    Route::post('/video', function () {\n"
"        //\n"
"    });\n"
"});\n"

#: docs/8.x/releases.md:block 70 (paragraph)
msgid "To learn more about rate limiting, please consult the [routing documentation](/docs/{{version}}/routing#rate-limiting)."
msgstr "要瞭解更多有關頻率限制的資訊，請參考[路由說明文件](/docs/{{version}}/routing#rate-limiting)。"

#: docs/8.x/releases.md:block 72 (header)
msgid "Improved Maintenance Mode"
msgstr "改進過的維護模式"

#: docs/8.x/releases.md:block 73 (paragraph)
msgid "*Maintenance mode improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from [Spatie](https://spatie.be)*."
msgstr "*改進過的維護模式由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻，靈感來自 [Spatie](https://spatie.be)*。"

#: docs/8.x/releases.md:block 74 (paragraph)
msgid "In previous releases of Laravel, the `php artisan down` maintenance mode feature may be bypassed using an \"allow list\" of IP addresses that were allowed to access the application. This feature has been removed in favor of a simpler \"secret\" / token solution."
msgstr "在之前版本的 Laravel 中，`php artisan down` 維護模式功能可以通過使用一組允許存取網站的 IP 位址「允許列表」來繞過。該功能現已被移除，並改用了一種更簡單的「密鑰」/ 權杖方案來代替。"

#: docs/8.x/releases.md:block 75 (paragraph)
msgid "While in maintenance mode, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr "在維護模式下，可以使用 `secret` 選項來指定一個用來繞過維護模式的權杖："

#: docs/8.x/releases.md:block 76 (code)
msgid "php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"
msgstr "php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"

#: docs/8.x/releases.md:block 77 (paragraph)
msgid "After placing the application in maintenance mode, you may navigate to the application URL matching this token and Laravel will issue a maintenance mode bypass cookie to your browser:"
msgstr "將應用程式放入維護模式後，可以瀏覽符合該權杖的應用程式網址，Laravel 會簽發一個繞過維護模式的 Cookie 給瀏覽器："

#: docs/8.x/releases.md:block 78 (code)
msgid "https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"
msgstr "https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"

#: docs/8.x/releases.md:block 79 (paragraph)
msgid "When accessing this hidden route, you will then be redirected to the `/` route of the application. Once the cookie has been issued to your browser, you will be able to browse the application normally as if it was not in maintenance mode."
msgstr "在存取該隱藏路由時，會接著被重新導向至應用程式的 `/` 路由。該 Cookie 被簽發給瀏覽器後，就可以像沒有在維護模式一樣正常地瀏覽應用程式。"

#: docs/8.x/releases.md:block 81 (header)
msgid "Pre-Rendering The Maintenance Mode View"
msgstr "預轉譯維護模式 View"

#: docs/8.x/releases.md:block 82 (paragraph)
msgid "If you utilize the `php artisan down` command during deployment, your users may still occasionally encounter errors if they access the application while your Composer dependencies or other infrastructure components are updating. This occurs because a significant part of the Laravel framework must boot in order to determine your application is in maintenance mode and render the maintenance mode view using the templating engine."
msgstr "若在部署過程中使用了 `php artisan down` 指令，若使用者在 Composer 依賴或其他基礎設施元件更新時存取了應用程式，則可能會遇到錯誤。這是因為 Laravel 框架中重要的部分必須要先啟動才能判斷應用程式是否在維護模式下，並才能接著使用樣板引擎來轉譯維護模式的 View。"

#: docs/8.x/releases.md:block 83 (paragraph)
msgid "For this reason, Laravel now allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the `down` command's `render` option:"
msgstr "基於此原因，現在，Laravel 能讓你預先轉譯維護模式 View，並在整個請求週期的一開始就將其回傳。這個 View 會在任何應用程式的依賴載入前就預先被轉譯。可以使用 `down` 指令的 `render` 選項來預轉譯所選的樣板："

#: docs/8.x/releases.md:block 84 (code)
msgid "php artisan down --render=\"errors::503\"\n"
msgstr "php artisan down --render=\"errors::503\"\n"

#: docs/8.x/releases.md:block 86 (header)
msgid "Closure Dispatch / Chain `catch`"
msgstr "閉包分派與顆串連的 `catch`"

#: docs/8.x/releases.md:block 87 (paragraph)
msgid "*Catch improvements were contributed by [Mohamed Said](https://github.com/themsaid)*."
msgstr "*Catch 的改進由 [Mohamed Said](https://github.com/themsaid) 參與貢獻*。"

#: docs/8.x/releases.md:block 88 (paragraph)
msgid "Using the new `catch` method, you may now provide a closure that should be executed if a queued closure fails to complete successfully after exhausting all of your queue's configured retry attempts:"
msgstr "使用新的 `catch` 方法，就能為佇列閉包提供一組要在所有重試次數都失敗的時候執行的閉包："

#: docs/8.x/releases.md:block 89 (code)
msgid "use Throwable;\n\n"
"dispatch(function () use ($podcast) {\n"
"    $podcast->publish();\n"
"})->catch(function (Throwable $e) {\n"
"    // This job has failed...\n"
"});\n"
msgstr "use Throwable;\n\n"
"dispatch(function () use ($podcast) {\n"
"    $podcast->publish();\n"
"})->catch(function (Throwable $e) {\n"
"    // 任務執行失敗...\n"
"});\n"

#: docs/8.x/releases.md:block 91 (header)
msgid "Dynamic Blade Components"
msgstr "動態 Blade 元件"

#: docs/8.x/releases.md:block 92 (paragraph)
msgid "*Dynamic Blade components were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*動態 Blade 元件由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/8.x/releases.md:block 93 (paragraph)
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may now use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr "有時候我們可能會需要轉譯元件，但在執行階段前並不知道要轉譯哪個元件。對於這種情況，現在，我們可以使用 Laravel 的內建「dynamic-component」動態元件來依照執行階段的值或變數進行轉譯："

#: docs/8.x/releases.md:block 94 (code)
msgid "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"

#: docs/8.x/releases.md:block 95 (paragraph)
msgid "To learn more about Blade components, please consult the [Blade documentation](/docs/{{version}}/blade#components)."
msgstr "要瞭解更多有關 Blade 元件的資訊，請參考 [Blade 的說明文件](/docs/{{version}}/blade#components)。"

#: docs/8.x/releases.md:block 97 (header)
msgid "Event Listener Improvements"
msgstr "事件監聽程式的改進"

#: docs/8.x/releases.md:block 98 (paragraph)
msgid "*Event listener improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Event Listener 的改進由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/8.x/releases.md:block 99 (paragraph)
msgid "Closure based event listeners may now be registered by only passing the closure to the `Event::listen` method. Laravel will inspect the closure to determine which type of event the listener handles:"
msgstr "現在，只要將閉包傳給 `Event::listen` 方法，就可以註冊基於閉包的事件監聽程式。Laravel 會偵測閉包，以判斷該事件監聽程式能負責的事件類型："

#: docs/8.x/releases.md:block 100 (code)
msgid "use App\\Events\\PodcastProcessed;\n"
"use Illuminate\\Support\\Facades\\Event;\n\n"
"Event::listen(function (PodcastProcessed $event) {\n"
"    //\n"
"});\n"
msgstr "use App\\Events\\PodcastProcessed;\n"
"use Illuminate\\Support\\Facades\\Event;\n\n"
"Event::listen(function (PodcastProcessed $event) {\n"
"    //\n"
"});\n"

#: docs/8.x/releases.md:block 101 (paragraph)
msgid "In addition, closure based event listeners may now be marked as queueable using the `Illuminate\\Events\\queueable` function:"
msgstr "此外，可以使用 `Illuminate\\Events\\queueable` 方法來將基於閉包的事件監聽程式標記為要放入佇列 (Queueable)："

#: docs/8.x/releases.md:block 102 (code)
msgid "use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"}));\n"
msgstr "use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"}));\n"

#: docs/8.x/releases.md:block 103 (paragraph)
msgid "Like queued jobs, you may use the `onConnection`, `onQueue`, and `delay` methods to customize the execution of the queued listener:"
msgstr "就像佇列任務一樣，可以使用 `onConnection`, `onQueue`, 與 `delay` 方法來自訂放入佇列的監聽程式的執行："

#: docs/8.x/releases.md:block 104 (code)
msgid "Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n"
msgstr "Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n"

#: docs/8.x/releases.md:block 105 (paragraph)
msgid "If you would like to handle anonymous queued listener failures, you may provide a closure to the `catch` method while defining the `queueable` listener:"
msgstr "若想在匿名的佇列監聽程式執行失敗時進行處理，可以在定義 `queueable` 監聽程式時提供一個閉包給 `catch` 方法："

#: docs/8.x/releases.md:block 106 (code)
msgid "use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Throwable;\n\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"    // The queued listener failed...\n"
"}));\n"
msgstr "use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Throwable;\n\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"    // 佇列中的 Listener 執行失敗...\n"
"}));\n"

#: docs/8.x/releases.md:block 108 (header)
msgid "Time Testing Helpers"
msgstr "時間測試輔助函式"

#: docs/8.x/releases.md:block 109 (paragraph)
msgid "*Time testing helpers were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from Ruby on Rails*."
msgstr "*時間測試輔助韓式由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻，靈感來自 Ruby on Rails*。"

#: docs/8.x/releases.md:block 110 (paragraph)
msgid "When testing, you may occasionally need to modify the time returned by helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Laravel's base feature test class now includes helpers that allow you to manipulate the current time:"
msgstr "在測試的時候，我們有時候會想要更改如 `now` 或 `Illuminate\\Support\\Carbon::now()` 等輔助函式所回傳的時間。現在，Laravel 的基礎功能測試 (Feature Test) 類別已包含了顆用來更改目前時間的輔助函式："

#: docs/8.x/releases.md:block 111 (code)
msgid "public function testTimeCanBeManipulated()\n"
"{\n"
"    // Travel into the future...\n"
"    $this->travel(5)->milliseconds();\n"
"    $this->travel(5)->seconds();\n"
"    $this->travel(5)->minutes();\n"
"    $this->travel(5)->hours();\n"
"    $this->travel(5)->days();\n"
"    $this->travel(5)->weeks();\n"
"    $this->travel(5)->years();\n\n"
"    // Travel into the past...\n"
"    $this->travel(-5)->hours();\n\n"
"    // Travel to an explicit time...\n"
"    $this->travelTo(now()->subHours(6));\n\n"
"    // Return back to the present time...\n"
"    $this->travelBack();\n"
"}\n"
msgstr "public function testTimeCanBeManipulated()\n"
"{\n"
"    // Travel into the future...\n"
"    $this->travel(5)->milliseconds();\n"
"    $this->travel(5)->seconds();\n"
"    $this->travel(5)->minutes();\n"
"    $this->travel(5)->hours();\n"
"    $this->travel(5)->days();\n"
"    $this->travel(5)->weeks();\n"
"    $this->travel(5)->years();\n\n"
"    // 時間旅行回到過去...\n"
"    $this->travel(-5)->hours();\n\n"
"    // 時間旅行到一個特定的時間...\n"
"    $this->travelTo(now()->subHours(6));\n\n"
"    // 回到目前時間...\n"
"    $this->travelBack();\n"
"}\n"

#: docs/8.x/releases.md:block 113 (header)
msgid "Artisan `serve` Improvements"
msgstr "Artisan `serve` 的改進"

#: docs/8.x/releases.md:block 114 (paragraph)
msgid "*Artisan `serve` improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Artisan `serve` 的改進由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/8.x/releases.md:block 115 (paragraph)
msgid "The Artisan `serve` command has been improved with automatic reloading when environment variable changes are detected within your local `.env` file. Previously, the command had to be manually stopped and restarted."
msgstr "Artisan `serve` 指令已經過改進，該指令會偵測本機的 `.env` 檔案，並在環境變數更改的時候自動重新載入。在此之前，需要手動停止並重新啟動該指令。"

#: docs/8.x/releases.md:block 117 (header)
msgid "Tailwind Pagination Views"
msgstr "Tailwind 分頁 View"

#: docs/8.x/releases.md:block 118 (paragraph)
msgid "The Laravel paginator has been updated to use the [Tailwind CSS](https://tailwindcss.com) framework by default. Tailwind CSS is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override. Of course, Bootstrap 3 and 4 views remain available as well."
msgstr "Laravel 的分頁程式 (Paginator) 已更新為預設使用 [Tailwind CSS](https://tailwindcss.com) 框架。Tailwind CSS 是一個可高度客製化、低階的 CSS 框架，能讓你不需處理並複寫一些煩人的固定樣式，就能製作所有你所需要的客製化區塊。當然，Bootstrap 3 與 Bootstrap 4 的 View 依然可用。"

#: docs/8.x/releases.md:block 120 (header)
msgid "Routing Namespace Updates"
msgstr "路由 Namespace 更新"

#: docs/8.x/releases.md:block 121 (paragraph)
msgid "In previous releases of Laravel, the `RouteServiceProvider` contained a `$namespace` property. This property's value would automatically be prefixed onto controller route definitions and calls to the `action` helper / `URL::action` method. In Laravel 8.x, this property is `null` by default. This means that no automatic namespace prefixing will be done by Laravel. Therefore, in new Laravel 8.x applications, controller route definitions should be defined using standard PHP callable syntax:"
msgstr "在之前的 Laravel 版本中，`RouteServiceProvider` 包含了一個 `$namespace` 屬性。當使用 Controller 路由定義或是呼叫 `action` 輔助函式 / `URL::action` 方法時，會自動將該屬性的值加到前面。在 Laravel 8.x 中，這個屬性預設為 `null`。這表示，Laravel 將不會自動幫你將 Namespace 放在前面。因此，在新安裝的 Laravel 8.x 專案中，Controller 路由定義應使用標準的 PHP Callable 語法來定義："

#: docs/8.x/releases.md:block 122 (code)
msgid "use App\\Http\\Controllers\\UserController;\n\n"
"Route::get('/users', [UserController::class, 'index']);\n"
msgstr "use App\\Http\\Controllers\\UserController;\n\n"
"Route::get('/users', [UserController::class, 'index']);\n"

#: docs/8.x/releases.md:block 123 (paragraph)
msgid "Calls to the `action` related methods should use the same callable syntax:"
msgstr "與呼叫 `actions` 相關的方法也應使用相同的 Callable 語法："

#: docs/8.x/releases.md:block 124 (code)
msgid "action([UserController::class, 'index']);\n\n"
"return Redirect::action([UserController::class, 'index']);\n"
msgstr "action([UserController::class, 'index']);\n\n"
"return Redirect::action([UserController::class, 'index']);\n"

#: docs/8.x/releases.md:block 125 (paragraph)
msgid "If you prefer Laravel 7.x style controller route prefixing, you may simply add the `$namespace` property into your application's `RouteServiceProvider`."
msgstr "若你偏好使用 Laravel 7.x 風格的 Controller 路由前置，只需要在專案的 `RouteServiceProvider` 中加上 `$namespace` 屬性即可。"

#: docs/8.x/releases.md:block 126 (quote)
msgid "{note} This change only affects new Laravel 8.x applications. Applications upgrading from Laravel 7.x will still have the `$namespace` property in their `RouteServiceProvider`."
msgstr "{note} 這個更改只會影響新安裝的 Laravel 8.x 專案。對於從 Laravel 7.x 升級來的專案，`RouteServiceProvider` 內還是會有 `$namespace` 屬性。"

#: docs/9.x/releases.md:block 2 (unordered list)
msgid "[Laravel 9](#laravel-9)"
msgstr "[Laravel 9](#laravel-9)"

#: docs/9.x/releases.md:block 6 (paragraph)
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^9.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr "由於 Laravel 的主要更新會包含中斷性變更，因此在應用程式或套件中參照 Laravel 框架或其組件時，應使用如 `^9.0` 這樣的版本限制式。然而，我們竭力確保主要更新應可於一天之內完成。"

#: docs/9.x/releases.md:block 13 (table)
msgid "Q1 2023"
msgstr "2023 年第 1 季"

#: docs/9.x/releases.md:block 17 (header)
msgid "Laravel 9"
msgstr "Laravel 9"

#: docs/9.x/releases.md:block 18 (paragraph)
msgid "As you may know, Laravel transitioned to yearly releases with the release of Laravel 8. Previously, major versions were released every 6 months. This transition is intended to ease the maintenance burden on the community and challenge our development team to ship amazing, powerful new features without introducing breaking changes. Therefore, we have shipped a variety of robust features to Laravel 8 without breaking backwards compatibility, such as parallel testing support, improved Breeze starter kits, HTTP client improvements, and even new Eloquent relationship types such as \"has one of many\"."
msgstr "讀者可能已經知道，從 Laravel 8 開始，Laravel 改為每年釋出新的主要版本。在此之前，每 6 個月都會釋出主要版本。這個改變是為了降低社群維護的負擔，並讓我們的開發團隊能想辦法在不包含中斷性更改 (Breaking Change) 的情況下繼續提供驚艷且強大的新功能。因此，我們在 Laravel 8 中，以不破壞向下相容性的前提下推出了許多強健的功能，如平行測試 (Parallel Testing) 支援、改進了 Breeze 入門套件、HTTP 用戶端的改進、甚至還出了一些如「一對多種之一 (Has One of Many)」等新的 Eloquent 關聯類型。"

#: docs/9.x/releases.md:block 20 (paragraph)
msgid "Laravel 9 continues the improvements made in Laravel 8.x by introducing support for Symfony 6.0 components, Symfony Mailer, Flysystem 3.0, improved `route:list` output, a Laravel Scout database driver, new Eloquent accessor / mutator syntax, implicit route bindings via Enums, and a variety of other bug fixes and usability improvements."
msgstr "Laravel 9 延續了 Laravel 8.x 中推出的各種改進，並支援 Symfony 6.0 元件、Symfony Mailer、Flysystem 3.0、改進過的 `route:list` 輸出、Laravel Scout 資料庫 Driver、新的 Eloquent 存取子 / 更動子語法、通過 Enum 進行的隱式路由繫結、以及其他多個 Bug 修正與可用性提升。"

#: docs/9.x/releases.md:block 22 (header)
msgid "PHP 8.0"
msgstr "PHP 8.0"

#: docs/9.x/releases.md:block 23 (paragraph)
msgid "Laravel 9.x requires a minimum PHP version of 8.0."
msgstr "Laravel 9.x 所要求的最小 PHP 版本為 8.0。"

#: docs/9.x/releases.md:block 25 (header)
msgid "Symfony Mailer"
msgstr "Symfony Mailer"

#: docs/9.x/releases.md:block 26 (paragraph)
msgid "*Symfony Mailer support was contributed by [Dries Vints](https://github.com/driesvints)*, [James Brooks](https://github.com/jbrooksuk), and [Julius Kiekbusch](https://github.com/Jubeki)."
msgstr "*Symfony Mailer 支援由 [Dries Vints](https://github.com/driesvints), [James Brooks](https://github.com/jbrooksuk), 與 [Julius Kiekbusch](https://github.com/Jubeki) 參與貢獻*。"

#: docs/9.x/releases.md:block 27 (paragraph)
msgid "Previous releases of Laravel utilized the [Swift Mailer](https://swiftmailer.symfony.com/docs/introduction.html) library to send outgoing email. However, that library is no longer maintained and has been succeeded by Symfony Mailer."
msgstr "在以前版本的 Laravel 中，我們使用 [Swift Mailer](https://swiftmailer.symfony.com/docs/introduction.html) 函式庫來寄送外部 E-Mail。不過，這個函式庫已不在維護，Symfony Mailer 為其後繼者。"

#: docs/9.x/releases.md:block 28 (paragraph)
msgid "Please review the [upgrade guide](/docs/{{version}}/upgrade#symfony-mailer) to learn more about ensuring your application is compatible with Symfony Mailer."
msgstr "請參考[升級指南](/docs/{{version}}/upgrade#symfony-mailer)來瞭解如何確保你的專案能相容於 Symfony Mailer。"

#: docs/9.x/releases.md:block 30 (header)
msgid "Flysystem 3.x"
msgstr "Flysystem 3.x"

#: docs/9.x/releases.md:block 31 (paragraph)
msgid "*Flysystem 3.x support was contributed by [Dries Vints](https://github.com/driesvints)*."
msgstr "*Flysystem 3.x 支援由 [Dries Vints](https://github.com/driesvints) 參與貢獻*。"

#: docs/9.x/releases.md:block 32 (paragraph)
msgid "Laravel 9.x upgrades our upstream Flysystem dependency to Flysystem 3.x. Flysystem powers all of filesystem interactions offered by the `Storage` facade."
msgstr "Laravel 9.x 更新了上游的 Flysystem 相依性套件為 Flysystem 3.x。Flysystem 驅動了 `Storage` Facade 中提供的所有檔案系統互動功能。"

#: docs/9.x/releases.md:block 33 (paragraph)
msgid "Please review the [upgrade guide](/docs/{{version}}/upgrade#flysystem-3) to learn more about ensuring your application is compatible with Flysystem 3.x."
msgstr "請參考[升級指南](/docs/{{version}}/upgrade#flysystem-3)來瞭解如何確保你的專案能相容於 Flysystem 3.x。"

#: docs/9.x/releases.md:block 35 (header)
msgid "Improved Eloquent Accessors / Mutators"
msgstr "改進過的 Eloquent 存取子與更動子"

#: docs/9.x/releases.md:block 36 (paragraph)
msgid "*Improved Eloquent accessors / mutators was contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*改進過的 Eloquent ^[Accessor](存取子) 與 ^[Mutator](更動子) 由 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/9.x/releases.md:block 37 (paragraph)
msgid "Laravel 9.x offers a new way to define Eloquent [accessors and mutators](/docs/{{version}}/eloquent-mutators#accessors-and-mutators). In previous releases of Laravel, the only way to define accessors and mutators was by defining prefixed methods on your model like so:"
msgstr "Laravel 9.x 提供了一種定義 Eloquent [存取子與更動子](/docs/{{version}}/eloquent-mutators#accessors-and-mutators)的全新方法。在之前版本的 Laravel 中，唯一一種定義存取子與更動子的方法就只有在 Model 中像這樣定義由前置詞的方法："

#: docs/9.x/releases.md:block 38 (code)
msgid "public function getNameAttribute($value)\n"
"{\n"
"    return strtoupper($value);\n"
"}\n\n"
"public function setNameAttribute($value)\n"
"{\n"
"    $this->attributes['name'] = $value;\n"
"}\n"
msgstr "public function getNameAttribute($value)\n"
"{\n"
"    return strtoupper($value);\n"
"}\n\n"
"public function setNameAttribute($value)\n"
"{\n"
"    $this->attributes['name'] = $value;\n"
"}\n"

#: docs/9.x/releases.md:block 39 (paragraph)
msgid "However, in Laravel 9.x you may define an accessor and mutator using a single, non-prefixed method by type-hinting a return type of `Illuminate\\Database\\Eloquent\\Casts\\Attribute`:"
msgstr "不過，在 Laravel 9.x 中，只需要標示回傳型別為 `Illuminate\\Database\\Eloquent\\Casts\\Attribute`，就可以使用不含前置詞的單一一個方法來定義存取子與更動子："

#: docs/9.x/releases.md:block 40 (code)
msgid "use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function name(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value) => strtoupper($value),\n"
"        set: fn ($value) => $value,\n"
"    );\n"
"}\n"
msgstr "use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function name(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value) => strtoupper($value),\n"
"        set: fn ($value) => $value,\n"
"    );\n"
"}\n"

#: docs/9.x/releases.md:block 41 (paragraph)
msgid "In addition, this new approach to defining accessors will cache object values that are returned by the attribute, just like [custom cast classes](/docs/{{version}}/eloquent-mutators#custom-casts):"
msgstr "此外，這種定義存取子的新方法也會將以屬性回傳的物件值快取起來，就跟[自訂型別轉換類別](/docs/{{version}}/eloquent-mutators#custom-casts)一樣："

#: docs/9.x/releases.md:block 42 (code)
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"

#: docs/9.x/releases.md:block 44 (header)
msgid "Enum Eloquent Attribute Casting"
msgstr "Enum Eloquent 屬性型別轉換"

#: docs/9.x/releases.md:block 45 (quote)
msgid "**Warning** Enum casting is only available for PHP 8.1+."
msgstr "**Warning** Enum 型別轉換只可在 PHP 8.1 以上使用。"

#: docs/9.x/releases.md:block 46 (paragraph)
msgid "*Enum casting was contributed by [Mohamed Said](https://github.com/themsaid)*."
msgstr "*Enum 型別轉換由 [Mohamed Said](https://github.com/themsaid) 參與貢獻*。"

#: docs/9.x/releases.md:block 47 (paragraph)
msgid "Eloquent now allows you to cast your attribute values to PHP [\"backed\" Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr "現在，Eloquent 也能讓我們將屬性值轉換為 PHP 的 [「Backed」Enum](https://www.php.net/manual/en/language.enumerations.backed.php) 了。為此，可在 Model 中的 `$casts` 屬性陣列中指定要型別轉換的屬性與 Enum："

#: docs/9.x/releases.md:block 48 (code)
msgid "use App\\Enums\\ServerStatus;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'status' => ServerStatus::class,\n"
"];\n"
msgstr "use App\\Enums\\ServerStatus;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'status' => ServerStatus::class,\n"
"];\n"

#: docs/9.x/releases.md:block 49 (paragraph)
msgid "Once you have defined the cast on your model, the specified attribute will be automatically cast to and from an enum when you interact with the attribute:"
msgstr "定義好 Model 的型別轉換後，每次存取該屬性時就會自動轉換對 Enum 進行轉換："

#: docs/9.x/releases.md:block 50 (code)
msgid "if ($server->status == ServerStatus::Provisioned) {\n"
"    $server->status = ServerStatus::Ready;\n\n"
"    $server->save();\n"
"}\n"
msgstr "if ($server->status == ServerStatus::Provisioned) {\n"
"    $server->status = ServerStatus::Ready;\n\n"
"    $server->save();\n"
"}\n"

#: docs/9.x/releases.md:block 52 (header)
msgid "Implicit Route Bindings With Enums"
msgstr "使用 Enum 的隱式路由繫結"

#: docs/9.x/releases.md:block 53 (paragraph)
msgid "*Implicit Enum bindings was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr "*隱式路由繫結由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻*。"

#: docs/9.x/releases.md:block 54 (paragraph)
msgid "PHP 8.1 introduces support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). Laravel 9.x introduces the ability to type-hint an Enum on your route definition and Laravel will only invoke the route if that route segment is a valid Enum value in the URI. Otherwise, an HTTP 404 response will be returned automatically. For example, given the following Enum:"
msgstr "PHP 8.1 新增了對 [Enum](https://www.php.net/manual/en/language.enumerations.backed.php) 的支援。Laravel 9.x 中提供了能在路由定義中對 Enum 進行型別提示的功能。加上型別提示後，只有當網址中的路由片段 (Segment) 為有效的 Enum 時，Laravel 才會叫用該路由。若不是有效的 Enum 值，則會自動回傳 HTTP 404 回應。舉例來說，假設有下列 Enum："

#: docs/9.x/releases.md:block 55 (code)
msgid "enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"
msgstr "enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"

#: docs/9.x/releases.md:block 56 (paragraph)
msgid "You may define a route that will only be invoked if the `{category}` route segment is `fruits` or `people`. Otherwise, an HTTP 404 response will be returned:"
msgstr "我們可以定義一個只有當 `{category}` 路由片段為 `fruits` 或 `people` 時才會被叫用的路由。若為其他值，則會回傳 HTTP 404 回應："

#: docs/9.x/releases.md:block 57 (code)
msgid "Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"
msgstr "Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"

#: docs/9.x/releases.md:block 59 (header)
msgid "Forced Scoping Of Route Bindings"
msgstr "Route 繫結的強制限定範圍"

#: docs/9.x/releases.md:block 60 (paragraph)
msgid "*Forced scoped bindings was contributed by [Claudio Dekker](https://github.com/claudiodekker)*."
msgstr "*強制限定作用範圍的繫結由 [Claudio Dekker](https://github.com/claudiodekker) 參與貢獻*。"

#: docs/9.x/releases.md:block 61 (paragraph)
msgid "In previous releases of Laravel, you may wish to scope the second Eloquent model in a route definition such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr "在之前版本的 Laravel 中，我們可以在路由定義中限定第二個 Eloquent Model 一定要是前一個 Eloquent Model 的子 Model。舉例來說，假設有下列這樣通過 Slug 取得特定使用者的部落格貼文的路由定義："

#: docs/9.x/releases.md:block 62 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"});\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"});\n"

#: docs/9.x/releases.md:block 63 (paragraph)
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. However, this behavior was only previously supported by Laravel when a custom key was used for the child route binding."
msgstr "在巢狀路由參數中使用自訂索引鍵的隱式繫結時，Laravel 會自動使用慣例來猜測上層 Model 的關聯名稱，並在查詢巢狀 Model 時以此限定查詢範圍。不過，在以前版本的 Laravel 中，只有在子路由繫結上使用自訂索引鍵時才可使用此功能。"

#: docs/9.x/releases.md:block 64 (paragraph)
msgid "However, in Laravel 9.x, you may now instruct Laravel to scope \"child\" bindings even when a custom key is not provided. To do so, you may invoke the `scopeBindings` method when defining your route:"
msgstr "不過，在 Laravel 9.x 中，就算沒有提供自訂索引鍵，我們還是可以告訴 Laravel 要如何對「子」繫結限定範圍。為此，我們可以在定義路由時叫用 `scopeBindings` 方法："

#: docs/9.x/releases.md:block 65 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->scopeBindings();\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->scopeBindings();\n"

#: docs/9.x/releases.md:block 66 (paragraph)
msgid "Or, you may instruct an entire group of route definitions to use scoped bindings:"
msgstr "或者，也可以讓整個路由定義群組使用限定範圍的繫結："

#: docs/9.x/releases.md:block 67 (code)
msgid "Route::scopeBindings()->group(function () {\n"
"    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
"});\n"
msgstr "Route::scopeBindings()->group(function () {\n"
"    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
"});\n"

#: docs/9.x/releases.md:block 69 (header)
msgid "Controller Route Groups"
msgstr "Controller 路由群組"

#: docs/9.x/releases.md:block 70 (paragraph)
msgid "*Route group improvements were contributed by [Luke Downing](https://github.com/lukeraymonddowning)*."
msgstr "*路由群組的改進由 [Luke Downing](https://github.com/lukeraymonddowning) 參與貢獻*。"

#: docs/9.x/releases.md:block 71 (paragraph)
msgid "You may now use the `controller` method to define the common controller for all of the routes within the group. Then, when defining the routes, you only need to provide the controller method that they invoke:"
msgstr "我們現在可以使用 `controller` 方法來在路由群組中為所有的路由定義通用的 Controller 了。定義好之後，當定義路由時，就只需要提供要叫用的 Controller 方法即可："

#: docs/9.x/releases.md:block 72 (code)
msgid "use App\\Http\\Controllers\\OrderController;\n\n"
"Route::controller(OrderController::class)->group(function () {\n"
"    Route::get('/orders/{id}', 'show');\n"
"    Route::post('/orders', 'store');\n"
"});\n"
msgstr "use App\\Http\\Controllers\\OrderController;\n\n"
"Route::controller(OrderController::class)->group(function () {\n"
"    Route::get('/orders/{id}', 'show');\n"
"    Route::post('/orders', 'store');\n"
"});\n"

#: docs/9.x/releases.md:block 74 (header)
msgid "Full Text Indexes / Where Clauses"
msgstr "全文索引與 Where 子句"

#: docs/9.x/releases.md:block 75 (paragraph)
msgid "*Full text indexes and \"where\" clauses were contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Dries Vints](https://github.com/driesvints)*."
msgstr "*全文索引與「where」子句由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Dries Vints](https://github.com/driesvints) 參與貢獻*。"

#: docs/9.x/releases.md:block 76 (paragraph)
msgid "When using MySQL or PostgreSQL, the `fullText` method may now be added to column definitions to generate full text indexes:"
msgstr "現在，在使用 MySQL 或 PostgresSQL 時，我們可以在欄位定義中新增 `fullText` 方法來產生全文索引 (Full Text Indexes)："

#: docs/9.x/releases.md:block 77 (code)
msgid "$table->text('bio')->fullText();\n"
msgstr "$table->text('bio')->fullText();\n"

#: docs/9.x/releases.md:block 78 (paragraph)
msgid "In addition, the `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MySQL:"
msgstr "此外，也可以使用 `whereFullText` 與 `orWhereFullText` 方法來在查詢中為有[全文索引](/docs/{{version}}/migrations#available-index-types)的欄位加上全文「where」子句。Laravel 會依據底層的資料庫系統將這些方法轉換為適當的 SQL。舉例來說，使用 MySQL 的專案會產生 `MATCH AGAINST` 子句："

#: docs/9.x/releases.md:block 79 (code)
msgid "$users = DB::table('users')\n"
"           ->whereFullText('bio', 'web developer')\n"
"           ->get();\n"
msgstr "$users = DB::table('users')\n"
"           ->whereFullText('bio', 'web developer')\n"
"           ->get();\n"

#: docs/9.x/releases.md:block 81 (header)
msgid "Laravel Scout Database Engine"
msgstr "Laravel Scout 資料庫引擎"

#: docs/9.x/releases.md:block 82 (paragraph)
msgid "*The Laravel Scout database engine was contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Dries Vints](https://github.com/driesvints)*."
msgstr "*Laravel Scout 資料庫引擎由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Dries Vints](https://github.com/driesvints) 參與貢獻*。"

#: docs/9.x/releases.md:block 83 (paragraph)
msgid "If your application interacts with small to medium sized databases or has a light workload, you may now use Scout's \"database\" engine instead of a dedicated search service such as Algolia or MeiliSearch. The database engine will use \"where like\" clauses and full text indexes when filtering results from your existing database to determine the applicable search results for your query."
msgstr "若你的專案使用中小型的資料庫，或是資料庫的工作量 (Workload) 不高的話，現在，你可以使用 Scout 的「database」引擎，而不需使用如 Algolia 或 MeiliSearch 等專門的搜尋服務。在從現有資料庫過濾結果時，資料庫引擎會使用「where like」查詢語句來取得搜尋結果。"

#: docs/9.x/releases.md:block 84 (paragraph)
msgid "To learn more about the Scout database engine, consult the [Scout documentation](/docs/{{version}}/scout)."
msgstr "要瞭解更多有關 Scout 資料庫引擎的資訊，請參考 [Scout 說明文件](/docs/{{version}}/scout)。"

#: docs/9.x/releases.md:block 86 (header)
msgid "Rendering Inline Blade Templates"
msgstr "轉譯內嵌的 Blade 樣板"

#: docs/9.x/releases.md:block 87 (paragraph)
msgid "*Rendering inline Blade templates was contributed by [Jason Beggs](https://github.com/jasonlbeggs). Rendering inline Blade components was contributed by [Toby Zerner](https://github.com/tobyzerner)*."
msgstr "*轉譯內嵌的 Blade 樣板由 [Jason Beggs](https://github.com/jasonlbeggs) 參與貢獻。轉譯內嵌的 Blade 元件由 [Toby Zerner](https://github.com/tobyzerner) 參與貢獻*。"

#: docs/9.x/releases.md:block 88 (paragraph)
msgid "Sometimes you may need to transform a raw Blade template string into valid HTML. You may accomplish this using the `render` method provided by the `Blade` facade. The `render` method accepts the Blade template string and an optional array of data to provide to the template:"
msgstr "有時候，我們可能會想將原始的 Blade 樣板字串轉譯為有效的 HTML。我們可以通過 `Blade` Facade 所提供的 `render` 方法來達成。`render` 方法接受 Blade 樣板字串，以及一個用來提供給樣板的可選資料陣列："

#: docs/9.x/releases.md:block 89 (code)
msgid "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"
msgstr "use Illuminate\\Support\\Facades\\Blade;\n\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"

#: docs/9.x/releases.md:block 90 (paragraph)
msgid "Similarly, the `renderComponent` method may be used to render a given class component by passing the component instance to the method:"
msgstr "類似地，只要將元件實體傳給 `renderComponent` 方法，就可轉譯給定的類別元件："

#: docs/9.x/releases.md:block 91 (code)
msgid "use App\\View\\Components\\HelloComponent;\n\n"
"return Blade::renderComponent(new HelloComponent('Julian Bashir'));\n"
msgstr "use App\\View\\Components\\HelloComponent;\n\n"
"return Blade::renderComponent(new HelloComponent('Julian Bashir'));\n"

#: docs/9.x/releases.md:block 93 (header)
msgid "Slot Name Shortcut"
msgstr "Slot 名稱捷徑"

#: docs/9.x/releases.md:block 94 (paragraph)
msgid "*Slot name shortcuts were contributed by [Caleb Porzio](https://github.com/calebporzio).*"
msgstr "*Slot 名稱捷徑由 [Caleb Porzio](https://github.com/calebporzio) 參與貢獻*。"

#: docs/9.x/releases.md:block 95 (paragraph)
msgid "In previous releases of Laravel, slot names were provided using a `name` attribute on the `x-slot` tag:"
msgstr "在之前版本的 Laravel 中，可在 `x-slot` 標籤上使用 `name` 屬性來提供 Slot 名稱："

#: docs/9.x/releases.md:block 96 (code)
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"

#: docs/9.x/releases.md:block 97 (paragraph)
msgid "However, beginning in Laravel 9.x, you may specify the slot's name using a convenient, shorter syntax:"
msgstr "不過，從 Laravel 9.x 開始，就可以使用更方便簡潔的語法來指定 Slot 的名稱："

#: docs/9.x/releases.md:block 98 (code)
msgid "<x-slot:title>\n"
"    Server Error\n"
"</x-slot>\n"
msgstr "<x-slot:title>\n"
"    Server Error\n"
"</x-slot>\n"

#: docs/9.x/releases.md:block 100 (header)
msgid "Checked / Selected Blade Directives"
msgstr "Checked / Selected Blade 指示詞"

#: docs/9.x/releases.md:block 101 (paragraph)
msgid "*Checked and selected Blade directives were contributed by [Ash Allen](https://github.com/ash-jc-allen) and [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr "*Checked 與 Selected Blade 指示詞由 [Ash Allen](https://github.com/ash-jc-allen) 與 [Taylor Otwell](https://github.com/taylorotwell) 參與貢獻*。"

#: docs/9.x/releases.md:block 102 (paragraph)
msgid "For convenience, you may now use the `@checked` directive to easily indicate if a given HTML checkbox input is \"checked\". This directive will echo `checked` if the provided condition evaluates to `true`:"
msgstr "為了方便起見，現在可以使用 `@checked` 指示詞來輕鬆地標示給定 HTML 勾選框為「^[已勾選](Checked)」。這個指示詞會在條件為 `true` 時 Echo `checked`："

#: docs/9.x/releases.md:block 103 (code)
msgid "<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />\n"
msgstr "<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />\n"

#: docs/9.x/releases.md:block 104 (paragraph)
msgid "Likewise, the `@selected` directive may be used to indicate if a given select option should be \"selected\":"
msgstr "類似地，`@selected` 指示詞可用來表示給定 Select 選項應為「^[已選擇](Selected)」："

#: docs/9.x/releases.md:block 105 (code)
msgid "<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>\n"
msgstr "<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>\n"

#: docs/9.x/releases.md:block 107 (header)
msgid "Bootstrap 5 Pagination Views"
msgstr "Bootstrap 5 的分頁 View"

#: docs/9.x/releases.md:block 108 (paragraph)
msgid "*Bootstrap 5 pagination views were contributed by [Jared Lewis](https://github.com/jrd-lewis)*."
msgstr "*Bootstrap 5 分頁 View 由 [Jared Lewis](https://github.com/jrd-lewis) 參與貢獻*。"

#: docs/9.x/releases.md:block 109 (paragraph)
msgid "Laravel now includes pagination views built using [Bootstrap 5](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrapFive` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr "現在，Laravel 提供了適用於 [Bootstrap 5](https://getbootstrap.com/) 的分頁 View。若要使用這些 View 來替代預設的 Tailwind View，可以在 `App\\Providers\\AppServiceProvider` 內的 `boot` 方法中呼叫 Paginator 的 `useBootstrapFive` 方法："

#: docs/9.x/releases.md:block 110 (code)
msgid "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"}\n"
msgstr "use Illuminate\\Pagination\\Paginator;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"}\n"

#: docs/9.x/releases.md:block 112 (header)
msgid "Improved Validation Of Nested Array Data"
msgstr "對巢狀陣列資料認證的改進"

#: docs/9.x/releases.md:block 113 (paragraph)
msgid "*Improved validation of nested array inputs was contributed by [Steve Bauman](https://github.com/stevebauman)*."
msgstr "*針對巢狀陣列輸入的表單驗證改進由 [Steve Bauman](https://github.com/stevebauman) 參與貢獻*。"

#: docs/9.x/releases.md:block 114 (paragraph)
msgid "Sometimes you may need to access the value for a given nested array element when assigning validation rules to the attribute. You may now accomplish this using the `Rule::forEach` method. The `forEach` method accepts a closure that will be invoked for each iteration of the array attribute under validation and will receive the attribute's value and explicit, fully-expanded attribute name. The closure should return an array of rules to assign to the array element:"
msgstr "有時候，在為屬性指派認證規則時，我們可能會想存取給定巢狀陣列項目的值。現在，我們可以使用 `Rule::forEach` 方法來達成。`forEach` 方法接受一個閉包。在認證時，每次迭代陣列屬性都會叫用一次這個閉包，且該閉包會收到屬性值與完整展開的屬性名稱。該閉包應回傳一個陣列，其中包含要指派給陣列元素的認證規則："

#: docs/9.x/releases.md:block 115 (code)
msgid "use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function ($value, $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"
msgstr "use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function ($value, $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"

#: docs/9.x/releases.md:block 117 (header)
msgid "Laravel Breeze API & Next.js"
msgstr "Laravel Breeze API 與 Next.js"

#: docs/9.x/releases.md:block 118 (paragraph)
msgid "*The Laravel Breeze API scaffolding and Next.js starter kit was contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Miguel Piedrafita](https://twitter.com/m1guelpf)*."
msgstr "*Laravel Breeze API Scaffolding 與 Next.js 入門套件由 [Taylor Otwell](https://github.com/taylorotwell) 與 [Miguel Piedrafita](https://twitter.com/m1guelpf) 參與貢獻*。"

#: docs/9.x/releases.md:block 119 (paragraph)
msgid "The [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-next) starter kit has received an \"API\" scaffolding mode and complimentary [Next.js](https://nextjs.org) [frontend implementation](https://github.com/laravel/breeze-next). This starter kit scaffolding may be used to jump start your Laravel applications that are serving as a backend, Laravel Sanctum authenticated API for a JavaScript frontend."
msgstr "[Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-next) 入門套件現在有了「API」Scaffolding 模式，且有了完整的 [Next.js](https://nextjs.org) [前端實作](https://github.com/laravel/breeze-next)。如果你想使用 Laravel 作為後端並使用 Laravel Sanctum 的登入 API 給 JavaScript 前端使用的話，就適合這個入門套件 Scaffolding。"

#: docs/9.x/releases.md:block 121 (header)
msgid "Improved Ignition Exception Page"
msgstr "改進過的 Ignition 例外頁面"

#: docs/9.x/releases.md:block 122 (paragraph)
msgid "*Ignition is developed by [Spatie](https://spatie.be/).*"
msgstr "*Ignition 由 [Spatie](https://spatie.be/) 開發*。"

#: docs/9.x/releases.md:block 123 (paragraph)
msgid "Ignition, the open source exception debug page created by Spatie, has been redesigned from the ground up. The new, improved Ignition ships with Laravel 9.x and includes light / dark themes, customizable \"open in editor\" functionality, and more."
msgstr "Ignition 是由 Spatie 製作的開放原始碼例外偵錯頁面。Ignition 現已被重新設計。Laravel 9.x 隨附了這個全新、改進過的 Ignition，並包含了亮色 / 暗色主題、可自訂的「在編輯器中開啟」功能⋯等。"

#: docs/9.x/releases.md:block 126 (header)
msgid "Improved `route:list` CLI Output"
msgstr "改進過的 `route:list` CLI 輸出"

#: docs/9.x/releases.md:block 127 (paragraph)
msgid "*Improved `route:list` CLI output was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr "*改進過的 `route:list` CLI 輸出由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻*。"

#: docs/9.x/releases.md:block 128 (paragraph)
msgid "The `route:list` CLI output has been significantly improved for the Laravel 9.x release, offering a beautiful new experience when exploring your route definitions."
msgstr "Laravel 9.x 更新中的 `route:list` CLI 已大幅改進，能讓你在探索路由定義時獲得全新、漂亮的體驗。"

#: docs/9.x/releases.md:block 131 (header)
msgid "Test Coverage Using Artisan `test` Command"
msgstr "使用 Artisan `test` 指令來取得測試覆蓋率"

#: docs/9.x/releases.md:block 132 (paragraph)
msgid "*Test coverage when using the Artisan `test` command was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr "*使用 Artisan `test` 指令來取得測試覆蓋率由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻*。"

#: docs/9.x/releases.md:block 133 (paragraph)
msgid "The Artisan `test` command has received a new `--coverage` option that you may use to explore the amount of code coverage your tests are providing to your application:"
msgstr "現在，Artisan `test` 指令有了全新的 `--coverage` 選項，能讓你用來確認測試為專案提供了多少的程式碼覆蓋率："

#: docs/9.x/releases.md:block 134 (code)
msgid "php artisan test --coverage\n"
msgstr "php artisan test --coverage\n"

#: docs/9.x/releases.md:block 135 (paragraph)
msgid "The test coverage results will be displayed directly within the CLI output."
msgstr "測試覆蓋率會直接顯示在 CLI 輸出中。"

#: docs/9.x/releases.md:block 137 (paragraph)
msgid "In addition, if you would like to specify a minimum threshold that your test coverage percentage must meet, you may use the `--min` option. The test suite will fail if the given minimum threshold is not met:"
msgstr "此外，若想指定測試覆蓋率的最小百分比值，可以使用 `--min` 選項。當沒滿足最小值時，測試套件就會執行失敗："

#: docs/9.x/releases.md:block 138 (code)
msgid "php artisan test --coverage --min=80.3\n"
msgstr "php artisan test --coverage --min=80.3\n"

#: docs/9.x/releases.md:block 141 (header)
msgid "Soketi Echo Server"
msgstr "Soketi Echo 伺服器"

#: docs/9.x/releases.md:block 142 (paragraph)
msgid "*The Soketi Echo server was developed by [Alex Renoki](https://github.com/rennokki)*."
msgstr "*Soketi Echo 伺服器由 [Alex Renoki](https://github.com/rennokki) 開發*。"

#: docs/9.x/releases.md:block 143 (paragraph)
msgid "Although not exclusive to Laravel 9.x, Laravel has recently assisted with the documentation of Soketi, a [Laravel Echo](/docs/{{version}}/broadcasting) compatible Web Socket server written for Node.js. Soketi provides a great, open source alternative to Pusher and Ably for those applications that prefer to manage their own Web Socket server."
msgstr "雖然這個功能不侷限於 Laravel 9.x 使用，單 Laravel 也協助了 Soketi —— 使用 Node.js 撰寫的相容於 [Laravel Echo](/docs/{{version}}/broadcasting) 的 Web Socket 伺服器 ——提供說明文件。Soketi 提供了良好且開源的 Pusher 與 Ably 替代方案，可供偏好自行管理 Web Socket 伺服器的專案使用。"

#: docs/9.x/releases.md:block 144 (paragraph)
msgid "For more information on using Soketi, please consult the [broadcasting documentation](/docs/{{version}}/broadcasting) and [Soketi documentation](https://docs.soketi.app/)."
msgstr "更多關於 Soketi 的資訊，請參考[廣播說明文件](/docs/{{version}}/broadcasting)與 [Soketi 的說明文件](https://docs.soketi.app/)。"

#: docs/9.x/releases.md:block 146 (header)
msgid "Improved Collections IDE Support"
msgstr "改進了 IDE 對 Collection 的支援"

#: docs/9.x/releases.md:block 147 (paragraph)
msgid "*Improved collections IDE support was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr "*針對 Collection 的 IDE 支援改進由 [Nuno Maduro](https://github.com/nunomaduro) 參與貢獻*。"

#: docs/9.x/releases.md:block 148 (paragraph)
msgid "Laravel 9.x adds improved, \"generic\" style type definitions to the collections component, improving IDE and static analysis support. IDEs such as [PHPStorm](https://blog.jetbrains.com/phpstorm/2021/12/phpstorm-2021-3-release/#support_for_future_laravel_collections) or static analysis tools such as [PHPStan](https://phpstan.org) will now better understand Laravel collections natively."
msgstr "Laravel 9.x 在 Collection 元件上新增了改進過的、「^[泛型](Generic)」風格的型別定義，提升了對 IDE 與靜態檢查的支援。如 [PHPStorm](https://blog.jetbrains.com/phpstorm/2021/12/phpstorm-2021-3-release/#support_for_future_laravel_collections) 等 IDE 或 [PHPStan](https://phpstan.org) 等靜態檢查工具現在可以原生地更理解 Laravel Collection 了。"

#: docs/9.x/releases.md:block 151 (header)
msgid "New Helpers"
msgstr "新的輔助函式"

#: docs/9.x/releases.md:block 152 (paragraph)
msgid "Laravel 9.x introduces two new, convenient helper functions that you may use in your own application."
msgstr "Laravel 9.x 提供了兩個新的方便輔助函式，可以讓你在你自己的專案內使用。"

#: docs/9.x/releases.md:block 154 (header)
msgid "`str`"
msgstr "`str`"

#: docs/9.x/releases.md:block 155 (paragraph)
msgid "The `str` function returns a new `Illuminate\\Support\\Stringable` instance for the given string. This function is equivalent to the `Str::of` method:"
msgstr "`str` 會為給定的字串回傳一個 `Illuminate\\Support\\Stringable`。這個函式與 `Str::of` 方法等價："

#: docs/9.x/releases.md:block 156 (code)
msgid "$string = str('Taylor')->append(' Otwell');\n\n"
"// 'Taylor Otwell'\n"
msgstr "$string = str('Taylor')->append(' Otwell');\n\n"
"// 'Taylor Otwell'\n"

#: docs/9.x/releases.md:block 157 (paragraph)
msgid "If no argument is provided to the `str` function, the function returns an instance of `Illuminate\\Support\\Str`:"
msgstr "若沒有提供引數給 `str` 函式，則 `str` 會回傳一個 `Illuminate\\Support\\Str` 的實體："

#: docs/9.x/releases.md:block 158 (code)
msgid "$snake = str()->snake('LaravelFramework');\n\n"
"// 'laravel_framework'\n"
msgstr "$snake = str()->snake('LaravelFramework');\n\n"
"// 'laravel_framework'\n"

#: docs/9.x/releases.md:block 160 (header)
msgid "`to_route`"
msgstr "`to_route`"

#: docs/9.x/releases.md:block 161 (paragraph)
msgid "The `to_route` function generates a redirect HTTP response for a given named route, providing an expressive way to redirect to named routes from your routes and controllers:"
msgstr "`to_route` 方法會產生一個跳轉到給定命名路由的重新導向 HTTP 回應，讓我們能在路由與 Controller 中以更富語意的方法跳轉到命名路由："

#: docs/9.x/releases.md:block 162 (code)
msgid "return to_route('users.show', ['user' => 1]);\n"
msgstr "return to_route('users.show', ['user' => 1]);\n"

#: docs/9.x/releases.md:block 163 (paragraph)
msgid "If necessary, you may pass the HTTP status code that should be assigned to the redirect and any additional response headers as the third and fourth arguments to the to_route method:"
msgstr "若有需要，也可以傳入一個用於跳轉的 HTTP 狀態碼以及一些額外的回應標頭作為 to_route 方法的第三與第四個引數："

#: docs/9.x/releases.md:block 164 (code)
msgid "return to_route('users.show', ['user' => 1], 302, ['X-Framework' => 'Laravel']);\n"
msgstr "return to_route('users.show', ['user' => 1], 302, ['X-Framework' => 'Laravel']);\n"

#: docs/master/releases.md:block 2 (unordered list)
msgid "[Laravel 11](#laravel-11)"
msgstr ""

#: docs/master/releases.md:block 6 (paragraph)
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^11.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr ""

#: docs/master/releases.md:block 19 (header)
msgid "Laravel 11"
msgstr ""

#: docs/master/releases.md:block 20 (paragraph)
msgid "To be determined..."
msgstr ""

#: docs/master/releases.md:block 22 (header)
msgid "PHP 8.2"
msgstr ""

#: docs/master/releases.md:block 23 (paragraph)
msgid "Laravel 11.x requires a minimum PHP version of 8.2."
msgstr ""

