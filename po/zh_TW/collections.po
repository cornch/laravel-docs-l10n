msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 12:20\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/collections.pot\n"
"X-Crowdin-File-ID: 25\n"

# File: docs/8.x/collections.md, line: 1
# File: docs/master/collections.md, line: 1
#. type: Title #
#, no-wrap
msgid "Collections"
msgstr "Collection"

# File: docs/8.x/collections.md, line: 13
# File: docs/master/collections.md, line: 13
#. type: Plain text
#, no-wrap
msgid "- [Introduction](#introduction)\n"
"    - [Creating Collections](#creating-collections)\n"
"    - [Extending Collections](#extending-collections)\n"
"- [Available Methods](#available-methods)\n"
"- [Higher Order Messages](#higher-order-messages)\n"
"- [Lazy Collections](#lazy-collections)\n"
"    - [Introduction](#lazy-collection-introduction)\n"
"    - [Creating Lazy Collections](#creating-lazy-collections)\n"
"    - [The Enumerable Contract](#the-enumerable-contract)\n"
"    - [Lazy Collection Methods](#lazy-collection-methods)\n"
msgstr "- [簡介](#introduction)\n"
"    - [建立 Collection](#creating-collections)\n"
"    - [擴充 Collection](#extending-collections)\n"
"- [可用方法](#available-methods)\n"
"- [高階訊息](#higher-order-messages)\n"
"- [Lazy Collection](#lazy-collections)\n"
"    - [簡介](#lazy-collection-introduction)\n"
"    - [建立 Lazy Collection](#creating-lazy-collections)\n"
"    - [Enumerable Contract](#the-enumerable-contract)\n"
"    - [Lazy Collection 方法](#lazy-collection-methods)\n"

# File: docs/8.x/collections.md, line: 15
# File: docs/master/collections.md, line: 15
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/collections.md, line: 15
# File: docs/8.x/collections.md, line: 3169
# File: docs/master/collections.md, line: 15
# File: docs/master/collections.md, line: 3185
#. type: Title ###
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/collections.md, line: 18
# File: docs/master/collections.md, line: 18
#. type: Plain text
msgid "The `Illuminate\\Support\\Collection` class provides a fluent, convenient wrapper for working with arrays of data. For example, check out the following code. We'll use the `collect` helper to create a new collection instance from the array, run the `strtoupper` function on each element, and then remove all empty elements:"
msgstr "`Illuminate\\Support\\Collection` 類別為處理陣列資料提供了一個流暢且便利的包裝。舉例來說，看看下列程式碼。我們會使用 `collect` 輔助函式來自陣列建立一個新的 Collection 實體，然後在每個元素上執行 `strtoupper` 函式，並移除所有空元素："

# File: docs/8.x/collections.md, line: 24
# File: docs/master/collections.md, line: 24
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['taylor', 'abigail', null])->map(function ($name) {\n"
"        return strtoupper($name);\n"
"    })->reject(function ($name) {\n"
"        return empty($name);\n"
"    });\n"
msgstr "    $collection = collect(['taylor', 'abigail', null])->map(function ($name) {\n"
"        return strtoupper($name);\n"
"    })->reject(function ($name) {\n"
"        return empty($name);\n"
"    });\n"

# File: docs/8.x/collections.md, line: 26
# File: docs/master/collections.md, line: 26
#. type: Plain text
msgid "As you can see, the `Collection` class allows you to chain its methods to perform fluent mapping and reducing of the underlying array. In general, collections are immutable, meaning every `Collection` method returns an entirely new `Collection` instance."
msgstr "如你所見，`Collection` 類別能讓你將其方法串在一起呼叫，以流暢地在底層的陣列上進行 Map 與 Reduce 處理。通常來說，Collection 是不可變的（Immutable），這代表每個 `Collection` 方法都會回傳一個全新的 `Collection` 實體。"

# File: docs/8.x/collections.md, line: 28
# File: docs/master/collections.md, line: 28
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-collections\"></a>\n"
msgstr "<a name=\"creating-collections\"></a>\n"

# File: docs/8.x/collections.md, line: 28
# File: docs/master/collections.md, line: 28
#. type: Title ###
#, no-wrap
msgid "Creating Collections"
msgstr "建立 Collection"

# File: docs/8.x/collections.md, line: 31
# File: docs/master/collections.md, line: 31
#. type: Plain text
msgid "As mentioned above, the `collect` helper returns a new `Illuminate\\Support\\Collection` instance for the given array. So, creating a collection is as simple as:"
msgstr "就像上面提到的一樣，`collect` 輔助函式會為給定的陣列回傳一個新的 `Illuminate\\Support\\Collection` 實體。因此，建立 Collection 就這麼簡單："

# File: docs/8.x/collections.md, line: 33
# File: docs/8.x/collections.md, line: 1543
# File: docs/8.x/collections.md, line: 1575
# File: docs/8.x/collections.md, line: 1588
# File: docs/8.x/collections.md, line: 1785
# File: docs/8.x/collections.md, line: 2690
# File: docs/8.x/collections.md, line: 2706
# File: docs/8.x/collections.md, line: 2773
# File: docs/8.x/collections.md, line: 2789
# File: docs/master/collections.md, line: 33
# File: docs/master/collections.md, line: 1544
# File: docs/master/collections.md, line: 1576
# File: docs/master/collections.md, line: 1589
# File: docs/master/collections.md, line: 1786
# File: docs/master/collections.md, line: 2706
# File: docs/master/collections.md, line: 2722
# File: docs/master/collections.md, line: 2789
# File: docs/master/collections.md, line: 2805
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3]);\n"
msgstr "    $collection = collect([1, 2, 3]);\n"

# File: docs/8.x/collections.md, line: 35
# File: docs/master/collections.md, line: 35
#. type: Plain text
#, no-wrap
msgid "> {tip} The results of [Eloquent](/docs/{{version}}/eloquent) queries are always returned as `Collection` instances.\n"
msgstr "> {tip} [Eloquent](/docs/{{version}}/eloquent) 查詢的結果總會回傳為 `Collection` 實體。\n"

# File: docs/8.x/collections.md, line: 37
# File: docs/master/collections.md, line: 37
#. type: Plain text
#, no-wrap
msgid "<a name=\"extending-collections\"></a>\n"
msgstr "<a name=\"extending-collections\"></a>\n"

# File: docs/8.x/collections.md, line: 37
# File: docs/master/collections.md, line: 37
#. type: Title ###
#, no-wrap
msgid "Extending Collections"
msgstr "擴充 Collection"

# File: docs/8.x/collections.md, line: 40
# File: docs/master/collections.md, line: 40
#. type: Plain text
msgid "Collections are \"macroable\", which allows you to add additional methods to the `Collection` class at run time. The `Illuminate\\Support\\Collection` class' `macro` method accepts a closure that will be executed when your macro is called. The macro closure may access the collection's other methods via `$this`, just as if it were a real method of the collection class. For example, the following code adds a `toUpper` method to the `Collection` class:"
msgstr "Collection 是「Macroable (可巨集)」的，這代表我們可以在執行階段往 `Collection` 增加額外的方法。`Illuminate\\Support\\Collection` 類別的 `macro` 方法接收一個閉包，該閉包會在 Macro 被呼叫時執行。Macro 閉包也能像真正的 Collection 類別方法一樣，通過 `$this` 來存取該 Collection 的其他方法。舉例來說，下列程式碼會往 `Collection` 類別內新增一個 `toUpper` 方法："

# File: docs/8.x/collections.md, line: 43
# File: docs/master/collections.md, line: 43
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr "    use Illuminate\\Support\\Collection;\n"
"    use Illuminate\\Support\\Str;\n"

# File: docs/8.x/collections.md, line: 49
# File: docs/master/collections.md, line: 49
#. type: Plain text
#, no-wrap
msgid "    Collection::macro('toUpper', function () {\n"
"        return $this->map(function ($value) {\n"
"            return Str::upper($value);\n"
"        });\n"
"    });\n"
msgstr "    Collection::macro('toUpper', function () {\n"
"        return $this->map(function ($value) {\n"
"            return Str::upper($value);\n"
"        });\n"
"    });\n"

# File: docs/8.x/collections.md, line: 51
# File: docs/8.x/collections.md, line: 73
# File: docs/master/collections.md, line: 51
# File: docs/master/collections.md, line: 73
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['first', 'second']);\n"
msgstr "    $collection = collect(['first', 'second']);\n"

# File: docs/8.x/collections.md, line: 53
# File: docs/master/collections.md, line: 53
#. type: Plain text
#, no-wrap
msgid "    $upper = $collection->toUpper();\n"
msgstr "    $upper = $collection->toUpper();\n"

# File: docs/8.x/collections.md, line: 55
# File: docs/master/collections.md, line: 55
#. type: Plain text
#, no-wrap
msgid "    // ['FIRST', 'SECOND']\n"
msgstr "    // ['FIRST', 'SECOND']\n"

# File: docs/8.x/collections.md, line: 57
# File: docs/master/collections.md, line: 57
#. type: Plain text
msgid "Typically, you should declare collection macros in the `boot` method of a [service provider](/docs/{{version}}/providers)."
msgstr "一般來說，Collection Macro 的宣告應放置於某個 [Service Provider](/docs/{{version}}/providers) 的 `boot` 方法內。"

# File: docs/8.x/collections.md, line: 59
# File: docs/master/collections.md, line: 59
#. type: Plain text
#, no-wrap
msgid "<a name=\"macro-arguments\"></a>\n"
msgstr "<a name=\"macro-arguments\"></a>\n"

# File: docs/8.x/collections.md, line: 59
# File: docs/master/collections.md, line: 59
#. type: Title ####
#, no-wrap
msgid "Macro Arguments"
msgstr "Macro 引數"

# File: docs/8.x/collections.md, line: 62
# File: docs/master/collections.md, line: 62
#. type: Plain text
msgid "If necessary, you may define macros that accept additional arguments:"
msgstr "若有需要，也可以定義接受額外引數的 Macro："

# File: docs/8.x/collections.md, line: 65
# File: docs/master/collections.md, line: 65
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
"    use Illuminate\\Support\\Facades\\Lang;\n"
msgstr "    use Illuminate\\Support\\Collection;\n"
"    use Illuminate\\Support\\Facades\\Lang;\n"

# File: docs/8.x/collections.md, line: 71
# File: docs/master/collections.md, line: 71
#. type: Plain text
#, no-wrap
msgid "    Collection::macro('toLocale', function ($locale) {\n"
"        return $this->map(function ($value) use ($locale) {\n"
"            return Lang::get($value, [], $locale);\n"
"        });\n"
"    });\n"
msgstr "    Collection::macro('toLocale', function ($locale) {\n"
"        return $this->map(function ($value) use ($locale) {\n"
"            return Lang::get($value, [], $locale);\n"
"        });\n"
"    });\n"

# File: docs/8.x/collections.md, line: 75
# File: docs/master/collections.md, line: 75
#. type: Plain text
#, no-wrap
msgid "    $translated = $collection->toLocale('es');\n"
msgstr "    $translated = $collection->toLocale('es');\n"

# File: docs/8.x/collections.md, line: 77
# File: docs/master/collections.md, line: 77
#. type: Plain text
#, no-wrap
msgid "<a name=\"available-methods\"></a>\n"
msgstr "<a name=\"available-methods\"></a>\n"

# File: docs/8.x/collections.md, line: 77
# File: docs/master/collections.md, line: 77
#. type: Title ##
#, no-wrap
msgid "Available Methods"
msgstr "可用方法"

# File: docs/8.x/collections.md, line: 80
# File: docs/master/collections.md, line: 80
#. type: Plain text
msgid "For the majority of the remaining collection documentation, we'll discuss each method available on the `Collection` class. Remember, all of these methods may be chained to fluently manipulate the underlying array. Furthermore, almost every method returns a new `Collection` instance, allowing you to preserve the original copy of the collection when necessary:"
msgstr "在 Collection 說明文件剩下的一大部分，我們會討論 `Collection` 類別內可用的各個方法。請記住，這裡所有的方法都可以互相串接使用，以流利地操作底層的陣列。此外，幾乎所有的函式都會回傳一個新的 `Collection` 實體，讓你可以在有需要的時候保留原始的 Collection 拷貝："

# File: docs/8.x/collections.md, line: 86
# File: docs/master/collections.md, line: 86
#. type: Plain text
#, no-wrap
msgid "<style>\n"
"    #collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr "<style>\n"
"    #collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"

# File: docs/8.x/collections.md, line: 91
# File: docs/master/collections.md, line: 91
#. type: Plain text
#, no-wrap
msgid "    #collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr "    #collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"

# File: docs/8.x/collections.md, line: 93
# File: docs/8.x/collections.md, line: 3233
# File: docs/master/collections.md, line: 93
# File: docs/master/collections.md, line: 3249
#. type: Plain text
#, no-wrap
msgid "<div id=\"collection-method-list\" markdown=\"1\">\n"
msgstr "<div id=\"collection-method-list\" markdown=\"1\">\n"

# File: docs/8.x/collections.md, line: 228
#. type: Plain text
msgid "[all](#method-all)  [average](#method-average)  [avg](#method-avg)  [chunk](#method-chunk)  [chunkWhile](#method-chunkwhile)  [collapse](#method-collapse)  [collect](#method-collect)  [combine](#method-combine)  [concat](#method-concat)  [contains](#method-contains)  [containsStrict](#method-containsstrict)  [count](#method-count)  [countBy](#method-countBy)  [crossJoin](#method-crossjoin)  [dd](#method-dd)  [diff](#method-diff)  [diffAssoc](#method-diffassoc)  [diffKeys](#method-diffkeys)  [doesntContain](#method-doesntcontain)  [dump](#method-dump)  [duplicates](#method-duplicates)  [duplicatesStrict](#method-duplicatesstrict)  [each](#method-each)  [eachSpread](#method-eachspread)  [every](#method-every)  [except](#method-except)  [filter](#method-filter)  [first](#method-first)  [firstWhere](#method-first-where)  [flatMap](#method-flatmap)  [flatten](#method-flatten)  [flip](#method-flip)  [forget](#method-forget)  [forPage](#method-forpage)  [get](#method-get)  [groupBy](#method-groupby)  [has](#method-has)  [implode](#method-implode)  [intersect](#method-intersect)  [intersectByKeys](#method-intersectbykeys)  [isEmpty](#method-isempty)  [isNotEmpty](#method-isnotempty)  [join](#method-join)  [keyBy](#method-keyby)  [keys](#method-keys)  [last](#method-last)  [macro](#method-macro)  [make](#method-make)  [map](#method-map)  [mapInto](#method-mapinto)  [mapSpread](#method-mapspread)  [mapToGroups](#method-maptogroups)  [mapWithKeys](#method-mapwithkeys)  [max](#method-max)  [median](#method-median)  [merge](#method-merge)  [mergeRecursive](#method-mergerecursive)  [min](#method-min)  [mode](#method-mode)  [nth](#method-nth)  [only](#method-only)  [pad](#method-pad)  [partition](#method-partition)  [pipe](#method-pipe)  [pipeInto](#method-pipeinto)  [pipeThrough](#method-pipethrough)  [pluck](#method-pluck)  [pop](#method-pop)  [prepend](#method-prepend)  [pull](#method-pull)  [push](#method-push)  [put](#method-put)  [random](#method-random)  [range](#method-range)  [reduce](#method-reduce)  [reduceSpread](#method-reduce-spread)  [reject](#method-reject)  [replace](#method-replace)  [replaceRecursive](#method-replacerecursive)  [reverse](#method-reverse)  [search](#method-search)  [shift](#method-shift)  [shuffle](#method-shuffle)  [sliding](#method-sliding)  [skip](#method-skip)  [skipUntil](#method-skipuntil)  [skipWhile](#method-skipwhile)  [slice](#method-slice)  [sole](#method-sole)  [some](#method-some)  [sort](#method-sort)  [sortBy](#method-sortby)  [sortByDesc](#method-sortbydesc)  [sortDesc](#method-sortdesc)  [sortKeys](#method-sortkeys)  [sortKeysDesc](#method-sortkeysdesc)  [sortKeysUsing](#method-sortkeysusing)  [splice](#method-splice)  [split](#method-split)  [splitIn](#method-splitin)  [sum](#method-sum)  [take](#method-take)  [takeUntil](#method-takeuntil)  [takeWhile](#method-takewhile)  [tap](#method-tap)  [times](#method-times)  [toArray](#method-toarray)  [toJson](#method-tojson)  [transform](#method-transform)  [undot](#method-undot)  [union](#method-union)  [unique](#method-unique)  [uniqueStrict](#method-uniquestrict)  [unless](#method-unless)  [unlessEmpty](#method-unlessempty)  [unlessNotEmpty](#method-unlessnotempty)  [unwrap](#method-unwrap)  [values](#method-values)  [when](#method-when)  [whenEmpty](#method-whenempty)  [whenNotEmpty](#method-whennotempty)  [where](#method-where)  [whereStrict](#method-wherestrict)  [whereBetween](#method-wherebetween)  [whereIn](#method-wherein)  [whereInStrict](#method-whereinstrict)  [whereInstanceOf](#method-whereinstanceof)  [whereNotBetween](#method-wherenotbetween)  [whereNotIn](#method-wherenotin)  [whereNotInStrict](#method-wherenotinstrict)  [whereNotNull](#method-wherenotnull)  [whereNull](#method-wherenull)  [wrap](#method-wrap)  [zip](#method-zip)"
msgstr "[all](#method-all)  [average](#method-average)  [avg](#method-avg)  [chunk](#method-chunk)  [chunkWhile](#method-chunkwhile)  [collapse](#method-collapse)  [collect](#method-collect)  [combine](#method-combine)  [concat](#method-concat)  [contains](#method-contains)  [containsStrict](#method-containsstrict)  [count](#method-count)  [countBy](#method-countBy)  [crossJoin](#method-crossjoin)  [dd](#method-dd)  [diff](#method-diff)  [diffAssoc](#method-diffassoc)  [diffKeys](#method-diffkeys)  [doesntContain](#method-doesntcontain)  [dump](#method-dump)  [duplicates](#method-duplicates)  [duplicatesStrict](#method-duplicatesstrict)  [each](#method-each)  [eachSpread](#method-eachspread)  [every](#method-every)  [except](#method-except)  [filter](#method-filter)  [first](#method-first)  [firstWhere](#method-first-where)  [flatMap](#method-flatmap)  [flatten](#method-flatten)  [flip](#method-flip)  [forget](#method-forget)  [forPage](#method-forpage)  [get](#method-get)  [groupBy](#method-groupby)  [has](#method-has)  [implode](#method-implode)  [intersect](#method-intersect)  [intersectByKeys](#method-intersectbykeys)  [isEmpty](#method-isempty)  [isNotEmpty](#method-isnotempty)  [join](#method-join)  [keyBy](#method-keyby)  [keys](#method-keys)  [last](#method-last)  [macro](#method-macro)  [make](#method-make)  [map](#method-map)  [mapInto](#method-mapinto)  [mapSpread](#method-mapspread)  [mapToGroups](#method-maptogroups)  [mapWithKeys](#method-mapwithkeys)  [max](#method-max)  [median](#method-median)  [merge](#method-merge)  [mergeRecursive](#method-mergerecursive)  [min](#method-min)  [mode](#method-mode)  [nth](#method-nth)  [only](#method-only)  [pad](#method-pad)  [partition](#method-partition)  [pipe](#method-pipe)  [pipeInto](#method-pipeinto)  [pipeThrough](#method-pipethrough)  [pluck](#method-pluck)  [pop](#method-pop)  [prepend](#method-prepend)  [pull](#method-pull)  [push](#method-push)  [put](#method-put)  [random](#method-random)  [range](#method-range)  [reduce](#method-reduce)  [reduceSpread](#method-reduce-spread)  [reject](#method-reject)  [replace](#method-replace)  [replaceRecursive](#method-replacerecursive)  [reverse](#method-reverse)  [search](#method-search)  [shift](#method-shift)  [shuffle](#method-shuffle)  [sliding](#method-sliding)  [skip](#method-skip)  [skipUntil](#method-skipuntil)  [skipWhile](#method-skipwhile)  [slice](#method-slice)  [sole](#method-sole)  [some](#method-some)  [sort](#method-sort)  [sortBy](#method-sortby)  [sortByDesc](#method-sortbydesc)  [sortDesc](#method-sortdesc)  [sortKeys](#method-sortkeys)  [sortKeysDesc](#method-sortkeysdesc)  [sortKeysUsing](#method-sortkeysusing)  [splice](#method-splice)  [split](#method-split)  [splitIn](#method-splitin)  [sum](#method-sum)  [take](#method-take)  [takeUntil](#method-takeuntil)  [takeWhile](#method-takewhile)  [tap](#method-tap)  [times](#method-times)  [toArray](#method-toarray)  [toJson](#method-tojson)  [transform](#method-transform)  [undot](#method-undot)  [union](#method-union)  [unique](#method-unique)  [uniqueStrict](#method-uniquestrict)  [unless](#method-unless)  [unlessEmpty](#method-unlessempty)  [unlessNotEmpty](#method-unlessnotempty)  [unwrap](#method-unwrap)  [values](#method-values)  [when](#method-when)  [whenEmpty](#method-whenempty)  [whenNotEmpty](#method-whennotempty)  [where](#method-where)  [whereStrict](#method-wherestrict)  [whereBetween](#method-wherebetween)  [whereIn](#method-wherein)  [whereInStrict](#method-whereinstrict)  [whereInstanceOf](#method-whereinstanceof)  [whereNotBetween](#method-wherenotbetween)  [whereNotIn](#method-wherenotin)  [whereNotInStrict](#method-wherenotinstrict)  [whereNotNull](#method-wherenotnull)  [whereNull](#method-wherenull)  [wrap](#method-wrap)  [zip](#method-zip)"

# File: docs/8.x/collections.md, line: 230
# File: docs/8.x/collections.md, line: 3344
# File: docs/master/collections.md, line: 231
# File: docs/master/collections.md, line: 3360
#. type: Plain text
#, no-wrap
msgid "</div>\n"
msgstr "</div>\n"

# File: docs/8.x/collections.md, line: 232
# File: docs/master/collections.md, line: 233
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-listing\"></a>\n"
msgstr "<a name=\"method-listing\"></a>\n"

# File: docs/8.x/collections.md, line: 232
# File: docs/master/collections.md, line: 233
#. type: Title ##
#, no-wrap
msgid "Method Listing"
msgstr "方法列表"

# File: docs/8.x/collections.md, line: 238
# File: docs/master/collections.md, line: 239
#. type: Plain text
#, no-wrap
msgid "<style>\n"
"    .collection-method code {\n"
"        font-size: 14px;\n"
"    }\n"
msgstr "<style>\n"
"    .collection-method code {\n"
"        font-size: 14px;\n"
"    }\n"

# File: docs/8.x/collections.md, line: 243
# File: docs/master/collections.md, line: 244
#. type: Plain text
#, no-wrap
msgid "    .collection-method:not(.first-collection-method) {\n"
"        margin-top: 50px;\n"
"    }\n"
"</style>\n"
msgstr "    .collection-method:not(.first-collection-method) {\n"
"        margin-top: 50px;\n"
"    }\n"
"</style>\n"

# File: docs/8.x/collections.md, line: 245
# File: docs/master/collections.md, line: 246
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-all\"></a>\n"
msgstr "<a name=\"method-all\"></a>\n"

# File: docs/8.x/collections.md, line: 245
# File: docs/master/collections.md, line: 246
#. type: Title ####
#, no-wrap
msgid "`all()` {.collection-method .first-collection-method}"
msgstr "`all()` {.collection-method .first-collection-method}"

# File: docs/8.x/collections.md, line: 248
# File: docs/master/collections.md, line: 249
#. type: Plain text
msgid "The `all` method returns the underlying array represented by the collection:"
msgstr "`all` 方法會回傳該 Collection 所代表的底層陣列："

# File: docs/8.x/collections.md, line: 250
# File: docs/master/collections.md, line: 251
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3])->all();\n"
msgstr "    collect([1, 2, 3])->all();\n"

# File: docs/8.x/collections.md, line: 252
# File: docs/8.x/collections.md, line: 343
# File: docs/8.x/collections.md, line: 361
# File: docs/8.x/collections.md, line: 773
# File: docs/8.x/collections.md, line: 1581
# File: docs/master/collections.md, line: 253
# File: docs/master/collections.md, line: 344
# File: docs/master/collections.md, line: 362
# File: docs/master/collections.md, line: 774
# File: docs/master/collections.md, line: 1582
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 3]\n"
msgstr "    // [1, 2, 3]\n"

# File: docs/8.x/collections.md, line: 254
# File: docs/master/collections.md, line: 255
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-average\"></a>\n"
msgstr "<a name=\"method-average\"></a>\n"

# File: docs/8.x/collections.md, line: 254
# File: docs/master/collections.md, line: 255
#. type: Title ####
#, no-wrap
msgid "`average()` {.collection-method}"
msgstr "`average()` {.collection-method}"

# File: docs/8.x/collections.md, line: 257
# File: docs/master/collections.md, line: 258
#. type: Plain text
msgid "Alias for the [`avg`](#method-avg) method."
msgstr "[`avg`](#method-avg) 方法的別名。"

# File: docs/8.x/collections.md, line: 259
# File: docs/master/collections.md, line: 260
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-avg\"></a>\n"
msgstr "<a name=\"method-avg\"></a>\n"

# File: docs/8.x/collections.md, line: 259
# File: docs/master/collections.md, line: 260
#. type: Title ####
#, no-wrap
msgid "`avg()` {.collection-method}"
msgstr "`avg()` {.collection-method}"

# File: docs/8.x/collections.md, line: 262
# File: docs/master/collections.md, line: 263
#. type: Plain text
msgid "The `avg` method returns the [average value](https://en.wikipedia.org/wiki/Average) of a given key:"
msgstr "`avg` 方法會回傳給定索引鍵的[平均值](https://zh.wikipedia.org/zh-tw/%E5%B9%B3%E5%9D%87%E6%95%B0)："

# File: docs/8.x/collections.md, line: 269
# File: docs/master/collections.md, line: 270
#. type: Plain text
#, no-wrap
msgid "    $average = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->avg('foo');\n"
msgstr "    $average = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->avg('foo');\n"

# File: docs/8.x/collections.md, line: 271
# File: docs/8.x/collections.md, line: 1360
# File: docs/master/collections.md, line: 272
# File: docs/master/collections.md, line: 1361
#. type: Plain text
#, no-wrap
msgid "    // 20\n"
msgstr "    // 20\n"

# File: docs/8.x/collections.md, line: 273
# File: docs/master/collections.md, line: 274
#. type: Plain text
#, no-wrap
msgid "    $average = collect([1, 1, 2, 4])->avg();\n"
msgstr "    $average = collect([1, 1, 2, 4])->avg();\n"

# File: docs/8.x/collections.md, line: 275
# File: docs/8.x/collections.md, line: 1203
# File: docs/8.x/collections.md, line: 1938
# File: docs/8.x/collections.md, line: 2098
# File: docs/master/collections.md, line: 276
# File: docs/master/collections.md, line: 1204
# File: docs/master/collections.md, line: 1954
# File: docs/master/collections.md, line: 2114
#. type: Plain text
#, no-wrap
msgid "    // 2\n"
msgstr "    // 2\n"

# File: docs/8.x/collections.md, line: 277
# File: docs/master/collections.md, line: 278
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-chunk\"></a>\n"
msgstr "<a name=\"method-chunk\"></a>\n"

# File: docs/8.x/collections.md, line: 277
# File: docs/master/collections.md, line: 278
#. type: Title ####
#, no-wrap
msgid "`chunk()` {.collection-method}"
msgstr "`chunk()` {.collection-method}"

# File: docs/8.x/collections.md, line: 280
# File: docs/master/collections.md, line: 281
#. type: Plain text
msgid "The `chunk` method breaks the collection into multiple, smaller collections of a given size:"
msgstr "`chunk` 方法會將該 Collection 以給定的大小拆分為多個較小的 Collection："

# File: docs/8.x/collections.md, line: 282
# File: docs/master/collections.md, line: 283
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6, 7]);\n"
msgstr "    $collection = collect([1, 2, 3, 4, 5, 6, 7]);\n"

# File: docs/8.x/collections.md, line: 284
# File: docs/master/collections.md, line: 285
#. type: Plain text
#, no-wrap
msgid "    $chunks = $collection->chunk(4);\n"
msgstr "    $chunks = $collection->chunk(4);\n"

# File: docs/8.x/collections.md, line: 286
# File: docs/8.x/collections.md, line: 311
# File: docs/master/collections.md, line: 287
# File: docs/master/collections.md, line: 312
#. type: Plain text
#, no-wrap
msgid "    $chunks->all();\n"
msgstr "    $chunks->all();\n"

# File: docs/8.x/collections.md, line: 288
# File: docs/master/collections.md, line: 289
#. type: Plain text
#, no-wrap
msgid "    // [[1, 2, 3, 4], [5, 6, 7]]\n"
msgstr "    // [[1, 2, 3, 4], [5, 6, 7]]\n"

# File: docs/8.x/collections.md, line: 290
# File: docs/master/collections.md, line: 291
#. type: Plain text
msgid "This method is especially useful in [views](/docs/{{version}}/views) when working with a grid system such as [Bootstrap](https://getbootstrap.com/docs/4.1/layout/grid/). For example, imagine you have a collection of [Eloquent](/docs/{{version}}/eloquent) models you want to display in a grid:"
msgstr "此方法特別適合用在 [View](/docs/{{version}}/views) 內，配合如 [Bootstrap](https://getbootstrap.com/docs/4.1/layout/grid/) 等網格系統一起使用。舉例來說，假設我們有一個 [Eloquent](/docs/{{version}}/eloquent) 模型的 Collection 想要在網格上顯示："

# File: docs/8.x/collections.md, line: 298
# File: docs/master/collections.md, line: 299
#. type: Plain text
#, no-wrap
msgid "    @foreach ($products->chunk(3) as $chunk)\n"
"        <div class=\"row\">\n"
"            @foreach ($chunk as $product)\n"
"                <div class=\"col-xs-4\">{{ $product->name }}</div>\n"
"            @endforeach\n"
"        </div>\n"
"    @endforeach\n"
msgstr "    @foreach ($products->chunk(3) as $chunk)\n"
"        <div class=\"row\">\n"
"            @foreach ($chunk as $product)\n"
"                <div class=\"col-xs-4\">{{ $product->name }}</div>\n"
"            @endforeach\n"
"        </div>\n"
"    @endforeach\n"

# File: docs/8.x/collections.md, line: 300
# File: docs/master/collections.md, line: 301
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-chunkwhile\"></a>\n"
msgstr "<a name=\"method-chunkwhile\"></a>\n"

# File: docs/8.x/collections.md, line: 300
# File: docs/master/collections.md, line: 301
#. type: Title ####
#, no-wrap
msgid "`chunkWhile()` {.collection-method}"
msgstr "`chunkWhile()` {.collection-method}"

# File: docs/8.x/collections.md, line: 303
# File: docs/master/collections.md, line: 304
#. type: Plain text
msgid "The `chunkWhile` method breaks the collection into multiple, smaller collections based on the evaluation of the given callback. The `$chunk` variable passed to the closure may be used to inspect the previous element:"
msgstr "`chunkWhile` 方法會依照給定回呼的取值結果來將 Collection 拆分為多個更小的 Collection。傳入閉包的 `$chunk` 變數可用來檢視上一個元素："

# File: docs/8.x/collections.md, line: 305
# File: docs/master/collections.md, line: 306
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(str_split('AABBCCCD'));\n"
msgstr "    $collection = collect(str_split('AABBCCCD'));\n"

# File: docs/8.x/collections.md, line: 309
# File: docs/master/collections.md, line: 310
#. type: Plain text
#, no-wrap
msgid "    $chunks = $collection->chunkWhile(function ($value, $key, $chunk) {\n"
"        return $value === $chunk->last();\n"
"    });\n"
msgstr "    $chunks = $collection->chunkWhile(function ($value, $key, $chunk) {\n"
"        return $value === $chunk->last();\n"
"    });\n"

# File: docs/8.x/collections.md, line: 313
# File: docs/master/collections.md, line: 314
#. type: Plain text
#, no-wrap
msgid "    // [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]\n"
msgstr "    // [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]\n"

# File: docs/8.x/collections.md, line: 315
# File: docs/master/collections.md, line: 316
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-collapse\"></a>\n"
msgstr "<a name=\"method-collapse\"></a>\n"

# File: docs/8.x/collections.md, line: 315
# File: docs/master/collections.md, line: 316
#. type: Title ####
#, no-wrap
msgid "`collapse()` {.collection-method}"
msgstr "`collapse()` {.collection-method}"

# File: docs/8.x/collections.md, line: 318
# File: docs/master/collections.md, line: 319
#. type: Plain text
msgid "The `collapse` method collapses a collection of arrays into a single, flat collection:"
msgstr "`collapse` 方法可以將多個陣列合併為單一的扁平 (Flat) Collection："

# File: docs/8.x/collections.md, line: 324
# File: docs/master/collections.md, line: 325
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        [1, 2, 3],\n"
"        [4, 5, 6],\n"
"        [7, 8, 9],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        [1, 2, 3],\n"
"        [4, 5, 6],\n"
"        [7, 8, 9],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 326
# File: docs/master/collections.md, line: 327
#. type: Plain text
#, no-wrap
msgid "    $collapsed = $collection->collapse();\n"
msgstr "    $collapsed = $collection->collapse();\n"

# File: docs/8.x/collections.md, line: 328
# File: docs/master/collections.md, line: 329
#. type: Plain text
#, no-wrap
msgid "    $collapsed->all();\n"
msgstr "    $collapsed->all();\n"

# File: docs/8.x/collections.md, line: 330
# File: docs/master/collections.md, line: 331
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
msgstr "    // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"

# File: docs/8.x/collections.md, line: 332
# File: docs/master/collections.md, line: 333
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-collect\"></a>\n"
msgstr "<a name=\"method-collect\"></a>\n"

# File: docs/8.x/collections.md, line: 332
# File: docs/master/collections.md, line: 333
#. type: Title ####
#, no-wrap
msgid "`collect()` {.collection-method}"
msgstr "`collect()` {.collection-method}"

# File: docs/8.x/collections.md, line: 335
# File: docs/master/collections.md, line: 336
#. type: Plain text
msgid "The `collect` method returns a new `Collection` instance with the items currently in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 337
# File: docs/master/collections.md, line: 338
#. type: Plain text
#, no-wrap
msgid "    $collectionA = collect([1, 2, 3]);\n"
msgstr "    $collectionA = collect([1, 2, 3]);\n"

# File: docs/8.x/collections.md, line: 339
# File: docs/master/collections.md, line: 340
#. type: Plain text
#, no-wrap
msgid "    $collectionB = $collectionA->collect();\n"
msgstr "    $collectionB = $collectionA->collect();\n"

# File: docs/8.x/collections.md, line: 341
# File: docs/master/collections.md, line: 342
#. type: Plain text
#, no-wrap
msgid "    $collectionB->all();\n"
msgstr "    $collectionB->all();\n"

# File: docs/8.x/collections.md, line: 345
# File: docs/master/collections.md, line: 346
#. type: Plain text
msgid "The `collect` method is primarily useful for converting [lazy collections](#lazy-collections) into standard `Collection` instances:"
msgstr ""

# File: docs/8.x/collections.md, line: 351
# File: docs/master/collections.md, line: 352
#. type: Plain text
#, no-wrap
msgid "    $lazyCollection = LazyCollection::make(function () {\n"
"        yield 1;\n"
"        yield 2;\n"
"        yield 3;\n"
"    });\n"
msgstr "    $lazyCollection = LazyCollection::make(function () {\n"
"        yield 1;\n"
"        yield 2;\n"
"        yield 3;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 353
# File: docs/master/collections.md, line: 354
#. type: Plain text
#, no-wrap
msgid "    $collection = $lazyCollection->collect();\n"
msgstr "    $collection = $lazyCollection->collect();\n"

# File: docs/8.x/collections.md, line: 355
# File: docs/master/collections.md, line: 356
#. type: Plain text
#, no-wrap
msgid "    get_class($collection);\n"
msgstr "    get_class($collection);\n"

# File: docs/8.x/collections.md, line: 357
# File: docs/master/collections.md, line: 358
#. type: Plain text
#, no-wrap
msgid "    // 'Illuminate\\Support\\Collection'\n"
msgstr "    // 'Illuminate\\Support\\Collection'\n"

# File: docs/8.x/collections.md, line: 359
# File: docs/8.x/collections.md, line: 911
# File: docs/8.x/collections.md, line: 1668
# File: docs/8.x/collections.md, line: 1680
# File: docs/8.x/collections.md, line: 1693
# File: docs/8.x/collections.md, line: 1703
# File: docs/8.x/collections.md, line: 1718
# File: docs/8.x/collections.md, line: 1731
# File: docs/8.x/collections.md, line: 1744
# File: docs/8.x/collections.md, line: 1776
# File: docs/8.x/collections.md, line: 1951
# File: docs/8.x/collections.md, line: 1963
# File: docs/8.x/collections.md, line: 2018
# File: docs/8.x/collections.md, line: 2346
# File: docs/8.x/collections.md, line: 2360
# File: docs/8.x/collections.md, line: 2374
# File: docs/8.x/collections.md, line: 2528
# File: docs/8.x/collections.md, line: 2571
# File: docs/8.x/collections.md, line: 2700
# File: docs/8.x/collections.md, line: 2714
# File: docs/8.x/collections.md, line: 2783
# File: docs/8.x/collections.md, line: 2797
# File: docs/8.x/collections.md, line: 2814
# File: docs/8.x/collections.md, line: 2825
# File: docs/8.x/collections.md, line: 2839
# File: docs/8.x/collections.md, line: 2856
# File: docs/8.x/collections.md, line: 2867
# File: docs/8.x/collections.md, line: 2881
# File: docs/8.x/collections.md, line: 3118
# File: docs/8.x/collections.md, line: 3124
# File: docs/8.x/collections.md, line: 3130
# File: docs/master/collections.md, line: 360
# File: docs/master/collections.md, line: 912
# File: docs/master/collections.md, line: 1669
# File: docs/master/collections.md, line: 1681
# File: docs/master/collections.md, line: 1694
# File: docs/master/collections.md, line: 1704
# File: docs/master/collections.md, line: 1719
# File: docs/master/collections.md, line: 1732
# File: docs/master/collections.md, line: 1745
# File: docs/master/collections.md, line: 1777
# File: docs/master/collections.md, line: 1967
# File: docs/master/collections.md, line: 1979
# File: docs/master/collections.md, line: 2034
# File: docs/master/collections.md, line: 2362
# File: docs/master/collections.md, line: 2376
# File: docs/master/collections.md, line: 2390
# File: docs/master/collections.md, line: 2544
# File: docs/master/collections.md, line: 2587
# File: docs/master/collections.md, line: 2716
# File: docs/master/collections.md, line: 2730
# File: docs/master/collections.md, line: 2799
# File: docs/master/collections.md, line: 2813
# File: docs/master/collections.md, line: 2830
# File: docs/master/collections.md, line: 2841
# File: docs/master/collections.md, line: 2855
# File: docs/master/collections.md, line: 2872
# File: docs/master/collections.md, line: 2883
# File: docs/master/collections.md, line: 2897
# File: docs/master/collections.md, line: 3134
# File: docs/master/collections.md, line: 3140
# File: docs/master/collections.md, line: 3146
#. type: Plain text
#, no-wrap
msgid "    $collection->all();\n"
msgstr "    $collection->all();\n"

# File: docs/8.x/collections.md, line: 363
# File: docs/master/collections.md, line: 364
#. type: Plain text
#, no-wrap
msgid "> {tip} The `collect` method is especially useful when you have an instance of `Enumerable` and need a non-lazy collection instance. Since `collect()` is part of the `Enumerable` contract, you can safely use it to get a `Collection` instance.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 365
# File: docs/master/collections.md, line: 366
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-combine\"></a>\n"
msgstr "<a name=\"method-combine\"></a>\n"

# File: docs/8.x/collections.md, line: 365
# File: docs/master/collections.md, line: 366
#. type: Title ####
#, no-wrap
msgid "`combine()` {.collection-method}"
msgstr "`combine()` {.collection-method}"

# File: docs/8.x/collections.md, line: 368
# File: docs/master/collections.md, line: 369
#. type: Plain text
msgid "The `combine` method combines the values of the collection, as keys, with the values of another array or collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 370
# File: docs/master/collections.md, line: 371
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['name', 'age']);\n"
msgstr "    $collection = collect(['name', 'age']);\n"

# File: docs/8.x/collections.md, line: 372
# File: docs/master/collections.md, line: 373
#. type: Plain text
#, no-wrap
msgid "    $combined = $collection->combine(['George', 29]);\n"
msgstr "    $combined = $collection->combine(['George', 29]);\n"

# File: docs/8.x/collections.md, line: 374
# File: docs/master/collections.md, line: 375
#. type: Plain text
#, no-wrap
msgid "    $combined->all();\n"
msgstr "    $combined->all();\n"

# File: docs/8.x/collections.md, line: 376
# File: docs/master/collections.md, line: 377
#. type: Plain text
#, no-wrap
msgid "    // ['name' => 'George', 'age' => 29]\n"
msgstr "    // ['name' => 'George', 'age' => 29]\n"

# File: docs/8.x/collections.md, line: 378
# File: docs/master/collections.md, line: 379
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-concat\"></a>\n"
msgstr "<a name=\"method-concat\"></a>\n"

# File: docs/8.x/collections.md, line: 378
# File: docs/master/collections.md, line: 379
#. type: Title ####
#, no-wrap
msgid "`concat()` {.collection-method}"
msgstr "`concat()` {.collection-method}"

# File: docs/8.x/collections.md, line: 381
# File: docs/master/collections.md, line: 382
#. type: Plain text
msgid "The `concat` method appends the given `array` or collection's values onto the end of another collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 383
# File: docs/master/collections.md, line: 384
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['John Doe']);\n"
msgstr "    $collection = collect(['John Doe']);\n"

# File: docs/8.x/collections.md, line: 385
# File: docs/master/collections.md, line: 386
#. type: Plain text
#, no-wrap
msgid "    $concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\n"
msgstr "    $concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\n"

# File: docs/8.x/collections.md, line: 387
# File: docs/master/collections.md, line: 388
#. type: Plain text
#, no-wrap
msgid "    $concatenated->all();\n"
msgstr "    $concatenated->all();\n"

# File: docs/8.x/collections.md, line: 389
# File: docs/master/collections.md, line: 390
#. type: Plain text
#, no-wrap
msgid "    // ['John Doe', 'Jane Doe', 'Johnny Doe']\n"
msgstr "    // ['John Doe', 'Jane Doe', 'Johnny Doe']\n"

# File: docs/8.x/collections.md, line: 391
# File: docs/master/collections.md, line: 392
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-contains\"></a>\n"
msgstr "<a name=\"method-contains\"></a>\n"

# File: docs/8.x/collections.md, line: 391
# File: docs/master/collections.md, line: 392
#. type: Title ####
#, no-wrap
msgid "`contains()` {.collection-method}"
msgstr "`contains()` {.collection-method}"

# File: docs/8.x/collections.md, line: 394
# File: docs/master/collections.md, line: 395
#. type: Plain text
msgid "The `contains` method determines whether the collection contains a given item. You may pass a closure to the `contains` method to determine if an element exists in the collection matching a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 396
# File: docs/8.x/collections.md, line: 538
# File: docs/8.x/collections.md, line: 599
# File: docs/8.x/collections.md, line: 1226
# File: docs/8.x/collections.md, line: 1662
# File: docs/8.x/collections.md, line: 1674
# File: docs/8.x/collections.md, line: 1689
# File: docs/8.x/collections.md, line: 1753
# File: docs/8.x/collections.md, line: 1945
# File: docs/8.x/collections.md, line: 1957
# File: docs/8.x/collections.md, line: 1972
# File: docs/8.x/collections.md, line: 1985
# File: docs/8.x/collections.md, line: 2001
# File: docs/8.x/collections.md, line: 2338
# File: docs/8.x/collections.md, line: 2352
# File: docs/8.x/collections.md, line: 2366
# File: docs/8.x/collections.md, line: 2383
# File: docs/8.x/collections.md, line: 2565
# File: docs/master/collections.md, line: 397
# File: docs/master/collections.md, line: 539
# File: docs/master/collections.md, line: 600
# File: docs/master/collections.md, line: 1227
# File: docs/master/collections.md, line: 1663
# File: docs/master/collections.md, line: 1675
# File: docs/master/collections.md, line: 1690
# File: docs/master/collections.md, line: 1754
# File: docs/master/collections.md, line: 1961
# File: docs/master/collections.md, line: 1973
# File: docs/master/collections.md, line: 1988
# File: docs/master/collections.md, line: 2001
# File: docs/master/collections.md, line: 2017
# File: docs/master/collections.md, line: 2354
# File: docs/master/collections.md, line: 2368
# File: docs/master/collections.md, line: 2382
# File: docs/master/collections.md, line: 2399
# File: docs/master/collections.md, line: 2581
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5]);\n"
msgstr "    $collection = collect([1, 2, 3, 4, 5]);\n"

# File: docs/8.x/collections.md, line: 400
# File: docs/master/collections.md, line: 401
#. type: Plain text
#, no-wrap
msgid "    $collection->contains(function ($value, $key) {\n"
"        return $value > 5;\n"
"    });\n"
msgstr "    $collection->contains(function ($value, $key) {\n"
"        return $value > 5;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 402
# File: docs/8.x/collections.md, line: 414
# File: docs/8.x/collections.md, line: 425
# File: docs/8.x/collections.md, line: 605
# File: docs/8.x/collections.md, line: 617
# File: docs/8.x/collections.md, line: 723
# File: docs/8.x/collections.md, line: 1059
# File: docs/8.x/collections.md, line: 1129
# File: docs/8.x/collections.md, line: 1930
# File: docs/master/collections.md, line: 403
# File: docs/master/collections.md, line: 415
# File: docs/master/collections.md, line: 426
# File: docs/master/collections.md, line: 606
# File: docs/master/collections.md, line: 618
# File: docs/master/collections.md, line: 724
# File: docs/master/collections.md, line: 1060
# File: docs/master/collections.md, line: 1130
# File: docs/master/collections.md, line: 1946
#. type: Plain text
#, no-wrap
msgid "    // false\n"
msgstr "    // false\n"

# File: docs/8.x/collections.md, line: 404
# File: docs/master/collections.md, line: 405
#. type: Plain text
msgid "Alternatively, you may pass a string to the `contains` method to determine whether the collection contains a given item value:"
msgstr ""

# File: docs/8.x/collections.md, line: 406
# File: docs/8.x/collections.md, line: 609
# File: docs/master/collections.md, line: 407
# File: docs/master/collections.md, line: 610
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['name' => 'Desk', 'price' => 100]);\n"
msgstr "    $collection = collect(['name' => 'Desk', 'price' => 100]);\n"

# File: docs/8.x/collections.md, line: 408
# File: docs/master/collections.md, line: 409
#. type: Plain text
#, no-wrap
msgid "    $collection->contains('Desk');\n"
msgstr "    $collection->contains('Desk');\n"

# File: docs/8.x/collections.md, line: 410
# File: docs/8.x/collections.md, line: 613
# File: docs/8.x/collections.md, line: 628
# File: docs/8.x/collections.md, line: 733
# File: docs/8.x/collections.md, line: 1051
# File: docs/8.x/collections.md, line: 1055
# File: docs/8.x/collections.md, line: 1120
# File: docs/master/collections.md, line: 411
# File: docs/master/collections.md, line: 614
# File: docs/master/collections.md, line: 629
# File: docs/master/collections.md, line: 734
# File: docs/master/collections.md, line: 1052
# File: docs/master/collections.md, line: 1056
# File: docs/master/collections.md, line: 1121
#. type: Plain text
#, no-wrap
msgid "    // true\n"
msgstr "    // true\n"

# File: docs/8.x/collections.md, line: 412
# File: docs/master/collections.md, line: 413
#. type: Plain text
#, no-wrap
msgid "    $collection->contains('New York');\n"
msgstr "    $collection->contains('New York');\n"

# File: docs/8.x/collections.md, line: 416
# File: docs/master/collections.md, line: 417
#. type: Plain text
msgid "You may also pass a key / value pair to the `contains` method, which will determine if the given pair exists in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 421
# File: docs/8.x/collections.md, line: 624
# File: docs/8.x/collections.md, line: 2105
# File: docs/master/collections.md, line: 422
# File: docs/master/collections.md, line: 625
# File: docs/master/collections.md, line: 2121
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 423
# File: docs/master/collections.md, line: 424
#. type: Plain text
#, no-wrap
msgid "    $collection->contains('product', 'Bookcase');\n"
msgstr "    $collection->contains('product', 'Bookcase');\n"

# File: docs/8.x/collections.md, line: 427
# File: docs/master/collections.md, line: 428
#. type: Plain text
msgid "The `contains` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`containsStrict`](#method-containsstrict) method to filter using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 429
# File: docs/master/collections.md, line: 430
#. type: Plain text
msgid "For the inverse of `contains`, see the [doesntContain](#method-doesntcontain) method."
msgstr ""

# File: docs/8.x/collections.md, line: 431
# File: docs/master/collections.md, line: 432
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-containsstrict\"></a>\n"
msgstr "<a name=\"method-containsstrict\"></a>\n"

# File: docs/8.x/collections.md, line: 431
# File: docs/master/collections.md, line: 432
#. type: Title ####
#, no-wrap
msgid "`containsStrict()` {.collection-method}"
msgstr "`containsStrict()` {.collection-method}"

# File: docs/8.x/collections.md, line: 434
# File: docs/master/collections.md, line: 435
#. type: Plain text
msgid "This method has the same signature as the [`contains`](#method-contains) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 436
# File: docs/master/collections.md, line: 437
#. type: Plain text
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-contains).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 438
# File: docs/master/collections.md, line: 439
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-count\"></a>\n"
msgstr "<a name=\"method-count\"></a>\n"

# File: docs/8.x/collections.md, line: 438
# File: docs/master/collections.md, line: 439
#. type: Title ####
#, no-wrap
msgid "`count()` {.collection-method}"
msgstr "`count()` {.collection-method}"

# File: docs/8.x/collections.md, line: 441
# File: docs/master/collections.md, line: 442
#. type: Plain text
msgid "The `count` method returns the total number of items in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 443
# File: docs/8.x/collections.md, line: 757
# File: docs/8.x/collections.md, line: 1727
# File: docs/8.x/collections.md, line: 1845
# File: docs/8.x/collections.md, line: 2027
# File: docs/8.x/collections.md, line: 2039
# File: docs/8.x/collections.md, line: 2054
# File: docs/8.x/collections.md, line: 2466
# File: docs/8.x/collections.md, line: 2478
# File: docs/8.x/collections.md, line: 2493
# File: docs/master/collections.md, line: 444
# File: docs/master/collections.md, line: 758
# File: docs/master/collections.md, line: 1728
# File: docs/master/collections.md, line: 1861
# File: docs/master/collections.md, line: 2043
# File: docs/master/collections.md, line: 2055
# File: docs/master/collections.md, line: 2070
# File: docs/master/collections.md, line: 2482
# File: docs/master/collections.md, line: 2494
# File: docs/master/collections.md, line: 2509
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4]);\n"
msgstr "    $collection = collect([1, 2, 3, 4]);\n"

# File: docs/8.x/collections.md, line: 445
# File: docs/master/collections.md, line: 446
#. type: Plain text
#, no-wrap
msgid "    $collection->count();\n"
msgstr "    $collection->count();\n"

# File: docs/8.x/collections.md, line: 447
# File: docs/8.x/collections.md, line: 1209
# File: docs/master/collections.md, line: 448
# File: docs/master/collections.md, line: 1210
#. type: Plain text
#, no-wrap
msgid "    // 4\n"
msgstr "    // 4\n"

# File: docs/8.x/collections.md, line: 449
# File: docs/master/collections.md, line: 450
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-countBy\"></a>\n"
msgstr "<a name=\"method-countBy\"></a>\n"

# File: docs/8.x/collections.md, line: 449
# File: docs/master/collections.md, line: 450
#. type: Title ####
#, no-wrap
msgid "`countBy()` {.collection-method}"
msgstr "`countBy()` {.collection-method}"

# File: docs/8.x/collections.md, line: 452
# File: docs/master/collections.md, line: 453
#. type: Plain text
msgid "The `countBy` method counts the occurrences of values in the collection. By default, the method counts the occurrences of every element, allowing you to count certain \"types\" of elements in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 454
# File: docs/master/collections.md, line: 455
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 2, 2, 3]);\n"
msgstr "    $collection = collect([1, 2, 2, 2, 3]);\n"

# File: docs/8.x/collections.md, line: 456
# File: docs/master/collections.md, line: 457
#. type: Plain text
#, no-wrap
msgid "    $counted = $collection->countBy();\n"
msgstr "    $counted = $collection->countBy();\n"

# File: docs/8.x/collections.md, line: 458
# File: docs/8.x/collections.md, line: 470
# File: docs/master/collections.md, line: 459
# File: docs/master/collections.md, line: 471
#. type: Plain text
#, no-wrap
msgid "    $counted->all();\n"
msgstr "    $counted->all();\n"

# File: docs/8.x/collections.md, line: 460
# File: docs/master/collections.md, line: 461
#. type: Plain text
#, no-wrap
msgid "    // [1 => 1, 2 => 3, 3 => 1]\n"
msgstr "    // [1 => 1, 2 => 3, 3 => 1]\n"

# File: docs/8.x/collections.md, line: 462
# File: docs/master/collections.md, line: 463
#. type: Plain text
msgid "You pass a closure to the `countBy` method to count all items by a custom value:"
msgstr ""

# File: docs/8.x/collections.md, line: 464
# File: docs/master/collections.md, line: 465
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n"
msgstr "    $collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n"

# File: docs/8.x/collections.md, line: 468
# File: docs/master/collections.md, line: 469
#. type: Plain text
#, no-wrap
msgid "    $counted = $collection->countBy(function ($email) {\n"
"        return substr(strrchr($email, \"@\"), 1);\n"
"    });\n"
msgstr "    $counted = $collection->countBy(function ($email) {\n"
"        return substr(strrchr($email, \"@\"), 1);\n"
"    });\n"

# File: docs/8.x/collections.md, line: 472
# File: docs/master/collections.md, line: 473
#. type: Plain text
#, no-wrap
msgid "    // ['gmail.com' => 2, 'yahoo.com' => 1]\n"
msgstr "    // ['gmail.com' => 2, 'yahoo.com' => 1]\n"

# File: docs/8.x/collections.md, line: 474
# File: docs/master/collections.md, line: 475
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-crossjoin\"></a>\n"
msgstr "<a name=\"method-crossjoin\"></a>\n"

# File: docs/8.x/collections.md, line: 474
# File: docs/master/collections.md, line: 475
#. type: Title ####
#, no-wrap
msgid "`crossJoin()` {.collection-method}"
msgstr "`crossJoin()` {.collection-method}"

# File: docs/8.x/collections.md, line: 477
# File: docs/master/collections.md, line: 478
#. type: Plain text
msgid "The `crossJoin` method cross joins the collection's values among the given arrays or collections, returning a Cartesian product with all possible permutations:"
msgstr "The `crossJoin` method cross joins the collection's values among the given arrays or collections, returning a Cartesian product with all possible permutations:"

# File: docs/8.x/collections.md, line: 479
# File: docs/8.x/collections.md, line: 494
# File: docs/master/collections.md, line: 480
# File: docs/master/collections.md, line: 495
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2]);\n"
msgstr "    $collection = collect([1, 2]);\n"

# File: docs/8.x/collections.md, line: 481
# File: docs/master/collections.md, line: 482
#. type: Plain text
#, no-wrap
msgid "    $matrix = $collection->crossJoin(['a', 'b']);\n"
msgstr "    $matrix = $collection->crossJoin(['a', 'b']);\n"

# File: docs/8.x/collections.md, line: 483
# File: docs/8.x/collections.md, line: 498
# File: docs/master/collections.md, line: 484
# File: docs/master/collections.md, line: 499
#. type: Plain text
#, no-wrap
msgid "    $matrix->all();\n"
msgstr "    $matrix->all();\n"

# File: docs/8.x/collections.md, line: 492
# File: docs/master/collections.md, line: 493
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            [1, 'a'],\n"
"            [1, 'b'],\n"
"            [2, 'a'],\n"
"            [2, 'b'],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            [1, 'a'],\n"
"            [1, 'b'],\n"
"            [2, 'a'],\n"
"            [2, 'b'],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 496
# File: docs/master/collections.md, line: 497
#. type: Plain text
#, no-wrap
msgid "    $matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n"
msgstr "    $matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n"

# File: docs/8.x/collections.md, line: 511
# File: docs/master/collections.md, line: 512
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            [1, 'a', 'I'],\n"
"            [1, 'a', 'II'],\n"
"            [1, 'b', 'I'],\n"
"            [1, 'b', 'II'],\n"
"            [2, 'a', 'I'],\n"
"            [2, 'a', 'II'],\n"
"            [2, 'b', 'I'],\n"
"            [2, 'b', 'II'],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            [1, 'a', 'I'],\n"
"            [1, 'a', 'II'],\n"
"            [1, 'b', 'I'],\n"
"            [1, 'b', 'II'],\n"
"            [2, 'a', 'I'],\n"
"            [2, 'a', 'II'],\n"
"            [2, 'b', 'I'],\n"
"            [2, 'b', 'II'],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 513
# File: docs/master/collections.md, line: 514
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-dd\"></a>\n"
msgstr "<a name=\"method-dd\"></a>\n"

# File: docs/8.x/collections.md, line: 513
# File: docs/master/collections.md, line: 514
#. type: Title ####
#, no-wrap
msgid "`dd()` {.collection-method}"
msgstr "`dd()` {.collection-method}"

# File: docs/8.x/collections.md, line: 516
# File: docs/master/collections.md, line: 517
#. type: Plain text
msgid "The `dd` method dumps the collection's items and ends execution of the script:"
msgstr ""

# File: docs/8.x/collections.md, line: 518
# File: docs/8.x/collections.md, line: 637
# File: docs/master/collections.md, line: 519
# File: docs/master/collections.md, line: 638
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['John Doe', 'Jane Doe']);\n"
msgstr "    $collection = collect(['John Doe', 'Jane Doe']);\n"

# File: docs/8.x/collections.md, line: 520
# File: docs/master/collections.md, line: 521
#. type: Plain text
#, no-wrap
msgid "    $collection->dd();\n"
msgstr "    $collection->dd();\n"

# File: docs/8.x/collections.md, line: 529
# File: docs/8.x/collections.md, line: 648
# File: docs/master/collections.md, line: 530
# File: docs/master/collections.md, line: 649
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        Collection {\n"
"            #items: array:2 [\n"
"                0 => \"John Doe\"\n"
"                1 => \"Jane Doe\"\n"
"            ]\n"
"        }\n"
"    */\n"
msgstr "    /*\n"
"        Collection {\n"
"            #items: array:2 [\n"
"                0 => \"John Doe\"\n"
"                1 => \"Jane Doe\"\n"
"            ]\n"
"        }\n"
"    */\n"

# File: docs/8.x/collections.md, line: 531
# File: docs/master/collections.md, line: 532
#. type: Plain text
msgid "If you do not want to stop executing the script, use the [`dump`](#method-dump) method instead."
msgstr ""

# File: docs/8.x/collections.md, line: 533
# File: docs/master/collections.md, line: 534
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-diff\"></a>\n"
msgstr "<a name=\"method-diff\"></a>\n"

# File: docs/8.x/collections.md, line: 533
# File: docs/master/collections.md, line: 534
#. type: Title ####
#, no-wrap
msgid "`diff()` {.collection-method}"
msgstr "`diff()` {.collection-method}"

# File: docs/8.x/collections.md, line: 536
# File: docs/master/collections.md, line: 537
#. type: Plain text
msgid "The `diff` method compares the collection against another collection or a plain PHP `array` based on its values. This method will return the values in the original collection that are not present in the given collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 540
# File: docs/master/collections.md, line: 541
#. type: Plain text
#, no-wrap
msgid "    $diff = $collection->diff([2, 4, 6, 8]);\n"
msgstr "    $diff = $collection->diff([2, 4, 6, 8]);\n"

# File: docs/8.x/collections.md, line: 542
# File: docs/8.x/collections.md, line: 566
# File: docs/8.x/collections.md, line: 590
# File: docs/master/collections.md, line: 543
# File: docs/master/collections.md, line: 567
# File: docs/master/collections.md, line: 591
#. type: Plain text
#, no-wrap
msgid "    $diff->all();\n"
msgstr "    $diff->all();\n"

# File: docs/8.x/collections.md, line: 544
# File: docs/master/collections.md, line: 545
#. type: Plain text
#, no-wrap
msgid "    // [1, 3, 5]\n"
msgstr "    // [1, 3, 5]\n"

# File: docs/8.x/collections.md, line: 546
# File: docs/master/collections.md, line: 547
#. type: Plain text
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-diff).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 548
# File: docs/master/collections.md, line: 549
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-diffassoc\"></a>\n"
msgstr "<a name=\"method-diffassoc\"></a>\n"

# File: docs/8.x/collections.md, line: 548
# File: docs/master/collections.md, line: 549
#. type: Title ####
#, no-wrap
msgid "`diffAssoc()` {.collection-method}"
msgstr "`diffAssoc()` {.collection-method}"

# File: docs/8.x/collections.md, line: 551
# File: docs/master/collections.md, line: 552
#. type: Plain text
msgid "The `diffAssoc` method compares the collection against another collection or a plain PHP `array` based on its keys and values. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 557
# File: docs/master/collections.md, line: 558
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'color' => 'orange',\n"
"        'type' => 'fruit',\n"
"        'remain' => 6,\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'color' => 'orange',\n"
"        'type' => 'fruit',\n"
"        'remain' => 6,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 564
# File: docs/master/collections.md, line: 565
#. type: Plain text
#, no-wrap
msgid "    $diff = $collection->diffAssoc([\n"
"        'color' => 'yellow',\n"
"        'type' => 'fruit',\n"
"        'remain' => 3,\n"
"        'used' => 6,\n"
"    ]);\n"
msgstr "    $diff = $collection->diffAssoc([\n"
"        'color' => 'yellow',\n"
"        'type' => 'fruit',\n"
"        'remain' => 3,\n"
"        'used' => 6,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 568
# File: docs/master/collections.md, line: 569
#. type: Plain text
#, no-wrap
msgid "    // ['color' => 'orange', 'remain' => 6]\n"
msgstr "    // ['color' => 'orange', 'remain' => 6]\n"

# File: docs/8.x/collections.md, line: 570
# File: docs/master/collections.md, line: 571
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-diffkeys\"></a>\n"
msgstr "<a name=\"method-diffkeys\"></a>\n"

# File: docs/8.x/collections.md, line: 570
# File: docs/master/collections.md, line: 571
#. type: Title ####
#, no-wrap
msgid "`diffKeys()` {.collection-method}"
msgstr "`diffKeys()` {.collection-method}"

# File: docs/8.x/collections.md, line: 573
# File: docs/master/collections.md, line: 574
#. type: Plain text
msgid "The `diffKeys` method compares the collection against another collection or a plain PHP `array` based on its keys. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 581
# File: docs/master/collections.md, line: 582
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'one' => 10,\n"
"        'two' => 20,\n"
"        'three' => 30,\n"
"        'four' => 40,\n"
"        'five' => 50,\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'one' => 10,\n"
"        'two' => 20,\n"
"        'three' => 30,\n"
"        'four' => 40,\n"
"        'five' => 50,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 588
# File: docs/master/collections.md, line: 589
#. type: Plain text
#, no-wrap
msgid "    $diff = $collection->diffKeys([\n"
"        'two' => 2,\n"
"        'four' => 4,\n"
"        'six' => 6,\n"
"        'eight' => 8,\n"
"    ]);\n"
msgstr "    $diff = $collection->diffKeys([\n"
"        'two' => 2,\n"
"        'four' => 4,\n"
"        'six' => 6,\n"
"        'eight' => 8,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 592
# File: docs/master/collections.md, line: 593
#. type: Plain text
#, no-wrap
msgid "    // ['one' => 10, 'three' => 30, 'five' => 50]\n"
msgstr "    // ['one' => 10, 'three' => 30, 'five' => 50]\n"

# File: docs/8.x/collections.md, line: 594
# File: docs/master/collections.md, line: 595
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-doesntcontain\"></a>\n"
msgstr "<a name=\"method-doesntcontain\"></a>\n"

# File: docs/8.x/collections.md, line: 594
# File: docs/master/collections.md, line: 595
#. type: Title ####
#, no-wrap
msgid "`doesntContain()` {.collection-method}"
msgstr "`doesntContain()` {.collection-method}"

# File: docs/8.x/collections.md, line: 597
# File: docs/master/collections.md, line: 598
#. type: Plain text
msgid "The `doesntContain` method determines whether the collection does not contain a given item. You may pass a closure to the `doesntContain` method to determine if an element does not exist in the collection matching a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 603
# File: docs/master/collections.md, line: 604
#. type: Plain text
#, no-wrap
msgid "    $collection->doesntContain(function ($value, $key) {\n"
"        return $value < 5;\n"
"    });\n"
msgstr "    $collection->doesntContain(function ($value, $key) {\n"
"        return $value < 5;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 607
# File: docs/master/collections.md, line: 608
#. type: Plain text
msgid "Alternatively, you may pass a string to the `doesntContain` method to determine whether the collection does not contain a given item value:"
msgstr ""

# File: docs/8.x/collections.md, line: 611
# File: docs/master/collections.md, line: 612
#. type: Plain text
#, no-wrap
msgid "    $collection->doesntContain('Table');\n"
msgstr "    $collection->doesntContain('Table');\n"

# File: docs/8.x/collections.md, line: 615
# File: docs/master/collections.md, line: 616
#. type: Plain text
#, no-wrap
msgid "    $collection->doesntContain('Desk');\n"
msgstr "    $collection->doesntContain('Desk');\n"

# File: docs/8.x/collections.md, line: 619
# File: docs/master/collections.md, line: 620
#. type: Plain text
msgid "You may also pass a key / value pair to the `doesntContain` method, which will determine if the given pair does not exist in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 626
# File: docs/master/collections.md, line: 627
#. type: Plain text
#, no-wrap
msgid "    $collection->doesntContain('product', 'Bookcase');\n"
msgstr "    $collection->doesntContain('product', 'Bookcase');\n"

# File: docs/8.x/collections.md, line: 630
# File: docs/master/collections.md, line: 631
#. type: Plain text
msgid "The `doesntContain` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value."
msgstr ""

# File: docs/8.x/collections.md, line: 632
# File: docs/master/collections.md, line: 633
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-dump\"></a>\n"
msgstr "<a name=\"method-dump\"></a>\n"

# File: docs/8.x/collections.md, line: 632
# File: docs/master/collections.md, line: 633
#. type: Title ####
#, no-wrap
msgid "`dump()` {.collection-method}"
msgstr "`dump()` {.collection-method}"

# File: docs/8.x/collections.md, line: 635
# File: docs/master/collections.md, line: 636
#. type: Plain text
msgid "The `dump` method dumps the collection's items:"
msgstr ""

# File: docs/8.x/collections.md, line: 639
# File: docs/master/collections.md, line: 640
#. type: Plain text
#, no-wrap
msgid "    $collection->dump();\n"
msgstr "    $collection->dump();\n"

# File: docs/8.x/collections.md, line: 650
# File: docs/master/collections.md, line: 651
#. type: Plain text
msgid "If you want to stop executing the script after dumping the collection, use the [`dd`](#method-dd) method instead."
msgstr ""

# File: docs/8.x/collections.md, line: 652
# File: docs/master/collections.md, line: 653
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-duplicates\"></a>\n"
msgstr "<a name=\"method-duplicates\"></a>\n"

# File: docs/8.x/collections.md, line: 652
# File: docs/master/collections.md, line: 653
#. type: Title ####
#, no-wrap
msgid "`duplicates()` {.collection-method}"
msgstr "`duplicates()` {.collection-method}"

# File: docs/8.x/collections.md, line: 655
# File: docs/master/collections.md, line: 656
#. type: Plain text
msgid "The `duplicates` method retrieves and returns duplicate values from the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 657
# File: docs/master/collections.md, line: 658
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['a', 'b', 'a', 'c', 'b']);\n"
msgstr "    $collection = collect(['a', 'b', 'a', 'c', 'b']);\n"

# File: docs/8.x/collections.md, line: 659
# File: docs/master/collections.md, line: 660
#. type: Plain text
#, no-wrap
msgid "    $collection->duplicates();\n"
msgstr "    $collection->duplicates();\n"

# File: docs/8.x/collections.md, line: 661
# File: docs/master/collections.md, line: 662
#. type: Plain text
#, no-wrap
msgid "    // [2 => 'a', 4 => 'b']\n"
msgstr "    // [2 => 'a', 4 => 'b']\n"

# File: docs/8.x/collections.md, line: 663
# File: docs/master/collections.md, line: 664
#. type: Plain text
msgid "If the collection contains arrays or objects, you can pass the key of the attributes that you wish to check for duplicate values:"
msgstr ""

# File: docs/8.x/collections.md, line: 669
# File: docs/master/collections.md, line: 670
#. type: Plain text
#, no-wrap
msgid "    $employees = collect([\n"
"        ['email' => 'abigail@example.com', 'position' => 'Developer'],\n"
"        ['email' => 'james@example.com', 'position' => 'Designer'],\n"
"        ['email' => 'victoria@example.com', 'position' => 'Developer'],\n"
"    ]);\n"
msgstr "    $employees = collect([\n"
"        ['email' => 'abigail@example.com', 'position' => 'Developer'],\n"
"        ['email' => 'james@example.com', 'position' => 'Designer'],\n"
"        ['email' => 'victoria@example.com', 'position' => 'Developer'],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 671
# File: docs/master/collections.md, line: 672
#. type: Plain text
#, no-wrap
msgid "    $employees->duplicates('position');\n"
msgstr "    $employees->duplicates('position');\n"

# File: docs/8.x/collections.md, line: 673
# File: docs/master/collections.md, line: 674
#. type: Plain text
#, no-wrap
msgid "    // [2 => 'Developer']\n"
msgstr "    // [2 => 'Developer']\n"

# File: docs/8.x/collections.md, line: 675
# File: docs/master/collections.md, line: 676
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-duplicatesstrict\"></a>\n"
msgstr "<a name=\"method-duplicatesstrict\"></a>\n"

# File: docs/8.x/collections.md, line: 675
# File: docs/master/collections.md, line: 676
#. type: Title ####
#, no-wrap
msgid "`duplicatesStrict()` {.collection-method}"
msgstr "`duplicatesStrict()` {.collection-method}"

# File: docs/8.x/collections.md, line: 678
# File: docs/master/collections.md, line: 679
#. type: Plain text
msgid "This method has the same signature as the [`duplicates`](#method-duplicates) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 680
# File: docs/master/collections.md, line: 681
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-each\"></a>\n"
msgstr "<a name=\"method-each\"></a>\n"

# File: docs/8.x/collections.md, line: 680
# File: docs/master/collections.md, line: 681
#. type: Title ####
#, no-wrap
msgid "`each()` {.collection-method}"
msgstr "`each()` {.collection-method}"

# File: docs/8.x/collections.md, line: 683
# File: docs/master/collections.md, line: 684
#. type: Plain text
msgid "The `each` method iterates over the items in the collection and passes each item to a closure:"
msgstr ""

# File: docs/8.x/collections.md, line: 687
# File: docs/master/collections.md, line: 688
#. type: Plain text
#, no-wrap
msgid "    $collection->each(function ($item, $key) {\n"
"        //\n"
"    });\n"
msgstr "    $collection->each(function ($item, $key) {\n"
"        //\n"
"    });\n"

# File: docs/8.x/collections.md, line: 689
# File: docs/master/collections.md, line: 690
#. type: Plain text
msgid "If you would like to stop iterating through the items, you may return `false` from your closure:"
msgstr ""

# File: docs/8.x/collections.md, line: 695
# File: docs/master/collections.md, line: 696
#. type: Plain text
#, no-wrap
msgid "    $collection->each(function ($item, $key) {\n"
"        if (/* condition */) {\n"
"            return false;\n"
"        }\n"
"    });\n"
msgstr "    $collection->each(function ($item, $key) {\n"
"        if (/* condition */) {\n"
"            return false;\n"
"        }\n"
"    });\n"

# File: docs/8.x/collections.md, line: 697
# File: docs/master/collections.md, line: 698
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-eachspread\"></a>\n"
msgstr "<a name=\"method-eachspread\"></a>\n"

# File: docs/8.x/collections.md, line: 697
# File: docs/master/collections.md, line: 698
#. type: Title ####
#, no-wrap
msgid "`eachSpread()` {.collection-method}"
msgstr "`eachSpread()` {.collection-method}"

# File: docs/8.x/collections.md, line: 700
# File: docs/master/collections.md, line: 701
#. type: Plain text
msgid "The `eachSpread` method iterates over the collection's items, passing each nested item value into the given callback:"
msgstr ""

# File: docs/8.x/collections.md, line: 702
# File: docs/master/collections.md, line: 703
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n"
msgstr "    $collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n"

# File: docs/8.x/collections.md, line: 706
# File: docs/master/collections.md, line: 707
#. type: Plain text
#, no-wrap
msgid "    $collection->eachSpread(function ($name, $age) {\n"
"        //\n"
"    });\n"
msgstr "    $collection->eachSpread(function ($name, $age) {\n"
"        //\n"
"    });\n"

# File: docs/8.x/collections.md, line: 708
# File: docs/master/collections.md, line: 709
#. type: Plain text
msgid "You may stop iterating through the items by returning `false` from the callback:"
msgstr ""

# File: docs/8.x/collections.md, line: 712
# File: docs/master/collections.md, line: 713
#. type: Plain text
#, no-wrap
msgid "    $collection->eachSpread(function ($name, $age) {\n"
"        return false;\n"
"    });\n"
msgstr "    $collection->eachSpread(function ($name, $age) {\n"
"        return false;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 714
# File: docs/master/collections.md, line: 715
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-every\"></a>\n"
msgstr "<a name=\"method-every\"></a>\n"

# File: docs/8.x/collections.md, line: 714
# File: docs/master/collections.md, line: 715
#. type: Title ####
#, no-wrap
msgid "`every()` {.collection-method}"
msgstr "`every()` {.collection-method}"

# File: docs/8.x/collections.md, line: 717
# File: docs/master/collections.md, line: 718
#. type: Plain text
msgid "The `every` method may be used to verify that all elements of a collection pass a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 721
# File: docs/master/collections.md, line: 722
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4])->every(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr "    collect([1, 2, 3, 4])->every(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 725
# File: docs/master/collections.md, line: 726
#. type: Plain text
msgid "If the collection is empty, the `every` method will return true:"
msgstr ""

# File: docs/8.x/collections.md, line: 727
# File: docs/master/collections.md, line: 728
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([]);\n"
msgstr "    $collection = collect([]);\n"

# File: docs/8.x/collections.md, line: 731
# File: docs/master/collections.md, line: 732
#. type: Plain text
#, no-wrap
msgid "    $collection->every(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr "    $collection->every(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 735
# File: docs/master/collections.md, line: 736
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-except\"></a>\n"
msgstr "<a name=\"method-except\"></a>\n"

# File: docs/8.x/collections.md, line: 735
# File: docs/master/collections.md, line: 736
#. type: Title ####
#, no-wrap
msgid "`except()` {.collection-method}"
msgstr "`except()` {.collection-method}"

# File: docs/8.x/collections.md, line: 738
# File: docs/master/collections.md, line: 739
#. type: Plain text
msgid "The `except` method returns all items in the collection except for those with the specified keys:"
msgstr ""

# File: docs/8.x/collections.md, line: 740
# File: docs/master/collections.md, line: 741
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);\n"
msgstr "    $collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);\n"

# File: docs/8.x/collections.md, line: 742
# File: docs/master/collections.md, line: 743
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->except(['price', 'discount']);\n"
msgstr "    $filtered = $collection->except(['price', 'discount']);\n"

# File: docs/8.x/collections.md, line: 744
# File: docs/8.x/collections.md, line: 763
# File: docs/8.x/collections.md, line: 1490
# File: docs/8.x/collections.md, line: 1509
# File: docs/8.x/collections.md, line: 1515
# File: docs/8.x/collections.md, line: 1851
# File: docs/8.x/collections.md, line: 2901
# File: docs/8.x/collections.md, line: 2922
# File: docs/8.x/collections.md, line: 2951
# File: docs/8.x/collections.md, line: 2975
# File: docs/8.x/collections.md, line: 3007
# File: docs/8.x/collections.md, line: 3026
# File: docs/8.x/collections.md, line: 3049
# File: docs/8.x/collections.md, line: 3078
# File: docs/8.x/collections.md, line: 3100
# File: docs/master/collections.md, line: 745
# File: docs/master/collections.md, line: 764
# File: docs/master/collections.md, line: 1491
# File: docs/master/collections.md, line: 1510
# File: docs/master/collections.md, line: 1516
# File: docs/master/collections.md, line: 1867
# File: docs/master/collections.md, line: 2917
# File: docs/master/collections.md, line: 2938
# File: docs/master/collections.md, line: 2967
# File: docs/master/collections.md, line: 2991
# File: docs/master/collections.md, line: 3023
# File: docs/master/collections.md, line: 3042
# File: docs/master/collections.md, line: 3065
# File: docs/master/collections.md, line: 3094
# File: docs/master/collections.md, line: 3116
#. type: Plain text
#, no-wrap
msgid "    $filtered->all();\n"
msgstr "    $filtered->all();\n"

# File: docs/8.x/collections.md, line: 746
# File: docs/master/collections.md, line: 747
#. type: Plain text
#, no-wrap
msgid "    // ['product_id' => 1]\n"
msgstr "    // ['product_id' => 1]\n"

# File: docs/8.x/collections.md, line: 748
# File: docs/master/collections.md, line: 749
#. type: Plain text
msgid "For the inverse of `except`, see the [only](#method-only) method."
msgstr ""

# File: docs/8.x/collections.md, line: 750
# File: docs/master/collections.md, line: 751
#. type: Plain text
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-except).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 752
# File: docs/master/collections.md, line: 753
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-filter\"></a>\n"
msgstr "<a name=\"method-filter\"></a>\n"

# File: docs/8.x/collections.md, line: 752
# File: docs/master/collections.md, line: 753
#. type: Title ####
#, no-wrap
msgid "`filter()` {.collection-method}"
msgstr "`filter()` {.collection-method}"

# File: docs/8.x/collections.md, line: 755
# File: docs/master/collections.md, line: 756
#. type: Plain text
msgid "The `filter` method filters the collection using the given callback, keeping only those items that pass a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 761
# File: docs/master/collections.md, line: 762
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->filter(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr "    $filtered = $collection->filter(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 765
# File: docs/8.x/collections.md, line: 2035
# File: docs/8.x/collections.md, line: 2045
# File: docs/master/collections.md, line: 766
# File: docs/master/collections.md, line: 2051
# File: docs/master/collections.md, line: 2061
#. type: Plain text
#, no-wrap
msgid "    // [3, 4]\n"
msgstr "    // [3, 4]\n"

# File: docs/8.x/collections.md, line: 767
# File: docs/master/collections.md, line: 768
#. type: Plain text
msgid "If no callback is supplied, all entries of the collection that are equivalent to `false` will be removed:"
msgstr ""

# File: docs/8.x/collections.md, line: 769
# File: docs/master/collections.md, line: 770
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, null, false, '', 0, []]);\n"
msgstr "    $collection = collect([1, 2, 3, null, false, '', 0, []]);\n"

# File: docs/8.x/collections.md, line: 771
# File: docs/master/collections.md, line: 772
#. type: Plain text
#, no-wrap
msgid "    $collection->filter()->all();\n"
msgstr "    $collection->filter()->all();\n"

# File: docs/8.x/collections.md, line: 775
# File: docs/master/collections.md, line: 776
#. type: Plain text
msgid "For the inverse of `filter`, see the [reject](#method-reject) method."
msgstr ""

# File: docs/8.x/collections.md, line: 777
# File: docs/master/collections.md, line: 778
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-first\"></a>\n"
msgstr "<a name=\"method-first\"></a>\n"

# File: docs/8.x/collections.md, line: 777
# File: docs/master/collections.md, line: 778
#. type: Title ####
#, no-wrap
msgid "`first()` {.collection-method}"
msgstr "`first()` {.collection-method}"

# File: docs/8.x/collections.md, line: 780
# File: docs/master/collections.md, line: 781
#. type: Plain text
msgid "The `first` method returns the first element in the collection that passes a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 784
# File: docs/master/collections.md, line: 785
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4])->first(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr "    collect([1, 2, 3, 4])->first(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 786
# File: docs/master/collections.md, line: 787
#. type: Plain text
#, no-wrap
msgid "    // 3\n"
msgstr "    // 3\n"

# File: docs/8.x/collections.md, line: 788
# File: docs/master/collections.md, line: 789
#. type: Plain text
msgid "You may also call the `first` method with no arguments to get the first element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

# File: docs/8.x/collections.md, line: 790
# File: docs/master/collections.md, line: 791
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4])->first();\n"
msgstr "    collect([1, 2, 3, 4])->first();\n"

# File: docs/8.x/collections.md, line: 792
# File: docs/8.x/collections.md, line: 1435
# File: docs/8.x/collections.md, line: 1924
# File: docs/8.x/collections.md, line: 1949
# File: docs/8.x/collections.md, line: 2517
# File: docs/master/collections.md, line: 793
# File: docs/master/collections.md, line: 1436
# File: docs/master/collections.md, line: 1940
# File: docs/master/collections.md, line: 1965
# File: docs/master/collections.md, line: 2533
#. type: Plain text
#, no-wrap
msgid "    // 1\n"
msgstr "    // 1\n"

# File: docs/8.x/collections.md, line: 794
# File: docs/master/collections.md, line: 795
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-first-where\"></a>\n"
msgstr "<a name=\"method-first-where\"></a>\n"

# File: docs/8.x/collections.md, line: 794
# File: docs/master/collections.md, line: 795
#. type: Title ####
#, no-wrap
msgid "`firstWhere()` {.collection-method}"
msgstr "`firstWhere()` {.collection-method}"

# File: docs/8.x/collections.md, line: 797
# File: docs/master/collections.md, line: 798
#. type: Plain text
msgid "The `firstWhere` method returns the first element in the collection with the given key / value pair:"
msgstr ""

# File: docs/8.x/collections.md, line: 804
# File: docs/master/collections.md, line: 805
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Regena', 'age' => null],\n"
"        ['name' => 'Linda', 'age' => 14],\n"
"        ['name' => 'Diego', 'age' => 23],\n"
"        ['name' => 'Linda', 'age' => 84],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['name' => 'Regena', 'age' => null],\n"
"        ['name' => 'Linda', 'age' => 14],\n"
"        ['name' => 'Diego', 'age' => 23],\n"
"        ['name' => 'Linda', 'age' => 84],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 806
# File: docs/master/collections.md, line: 807
#. type: Plain text
#, no-wrap
msgid "    $collection->firstWhere('name', 'Linda');\n"
msgstr "    $collection->firstWhere('name', 'Linda');\n"

# File: docs/8.x/collections.md, line: 808
# File: docs/8.x/collections.md, line: 820
# File: docs/master/collections.md, line: 809
# File: docs/master/collections.md, line: 821
#. type: Plain text
#, no-wrap
msgid "    // ['name' => 'Linda', 'age' => 14]\n"
msgstr "    // ['name' => 'Linda', 'age' => 14]\n"

# File: docs/8.x/collections.md, line: 810
# File: docs/master/collections.md, line: 811
#. type: Plain text
msgid "You may also call the `firstWhere` method with a comparison operator:"
msgstr ""

# File: docs/8.x/collections.md, line: 812
# File: docs/master/collections.md, line: 813
#. type: Plain text
#, no-wrap
msgid "    $collection->firstWhere('age', '>=', 18);\n"
msgstr "    $collection->firstWhere('age', '>=', 18);\n"

# File: docs/8.x/collections.md, line: 814
# File: docs/master/collections.md, line: 815
#. type: Plain text
#, no-wrap
msgid "    // ['name' => 'Diego', 'age' => 23]\n"
msgstr "    // ['name' => 'Diego', 'age' => 23]\n"

# File: docs/8.x/collections.md, line: 816
# File: docs/master/collections.md, line: 817
#. type: Plain text
msgid "Like the [where](#method-where) method, you may pass one argument to the `firstWhere` method. In this scenario, the `firstWhere` method will return the first item where the given item key's value is \"truthy\":"
msgstr ""

# File: docs/8.x/collections.md, line: 818
# File: docs/master/collections.md, line: 819
#. type: Plain text
#, no-wrap
msgid "    $collection->firstWhere('age');\n"
msgstr "    $collection->firstWhere('age');\n"

# File: docs/8.x/collections.md, line: 822
# File: docs/master/collections.md, line: 823
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-flatmap\"></a>\n"
msgstr "<a name=\"method-flatmap\"></a>\n"

# File: docs/8.x/collections.md, line: 822
# File: docs/master/collections.md, line: 823
#. type: Title ####
#, no-wrap
msgid "`flatMap()` {.collection-method}"
msgstr "`flatMap()` {.collection-method}"

# File: docs/8.x/collections.md, line: 825
# File: docs/master/collections.md, line: 826
#. type: Plain text
msgid "The `flatMap` method iterates through the collection and passes each value to the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items. Then, the array is flattened by one level:"
msgstr ""

# File: docs/8.x/collections.md, line: 831
# File: docs/master/collections.md, line: 832
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Sally'],\n"
"        ['school' => 'Arkansas'],\n"
"        ['age' => 28]\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['name' => 'Sally'],\n"
"        ['school' => 'Arkansas'],\n"
"        ['age' => 28]\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 835
# File: docs/master/collections.md, line: 836
#. type: Plain text
#, no-wrap
msgid "    $flattened = $collection->flatMap(function ($values) {\n"
"        return array_map('strtoupper', $values);\n"
"    });\n"
msgstr "    $flattened = $collection->flatMap(function ($values) {\n"
"        return array_map('strtoupper', $values);\n"
"    });\n"

# File: docs/8.x/collections.md, line: 837
# File: docs/8.x/collections.md, line: 855
# File: docs/master/collections.md, line: 838
# File: docs/master/collections.md, line: 856
#. type: Plain text
#, no-wrap
msgid "    $flattened->all();\n"
msgstr "    $flattened->all();\n"

# File: docs/8.x/collections.md, line: 839
# File: docs/master/collections.md, line: 840
#. type: Plain text
#, no-wrap
msgid "    // ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];\n"
msgstr "    // ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];\n"

# File: docs/8.x/collections.md, line: 841
# File: docs/master/collections.md, line: 842
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-flatten\"></a>\n"
msgstr "<a name=\"method-flatten\"></a>\n"

# File: docs/8.x/collections.md, line: 841
# File: docs/master/collections.md, line: 842
#. type: Title ####
#, no-wrap
msgid "`flatten()` {.collection-method}"
msgstr "`flatten()` {.collection-method}"

# File: docs/8.x/collections.md, line: 844
# File: docs/master/collections.md, line: 845
#. type: Plain text
msgid "The `flatten` method flattens a multi-dimensional collection into a single dimension:"
msgstr ""

# File: docs/8.x/collections.md, line: 851
# File: docs/master/collections.md, line: 852
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'name' => 'taylor',\n"
"        'languages' => [\n"
"            'php', 'javascript'\n"
"        ]\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'name' => 'taylor',\n"
"        'languages' => [\n"
"            'php', 'javascript'\n"
"        ]\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 853
# File: docs/master/collections.md, line: 854
#. type: Plain text
#, no-wrap
msgid "    $flattened = $collection->flatten();\n"
msgstr "    $flattened = $collection->flatten();\n"

# File: docs/8.x/collections.md, line: 857
# File: docs/master/collections.md, line: 858
#. type: Plain text
#, no-wrap
msgid "    // ['taylor', 'php', 'javascript'];\n"
msgstr "    // ['taylor', 'php', 'javascript'];\n"

# File: docs/8.x/collections.md, line: 859
# File: docs/master/collections.md, line: 860
#. type: Plain text
msgid "If necessary, you may pass the `flatten` method a \"depth\" argument:"
msgstr ""

# File: docs/8.x/collections.md, line: 874
# File: docs/master/collections.md, line: 875
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'Apple' => [\n"
"            [\n"
"                'name' => 'iPhone 6S',\n"
"                'brand' => 'Apple'\n"
"            ],\n"
"        ],\n"
"        'Samsung' => [\n"
"            [\n"
"                'name' => 'Galaxy S7',\n"
"                'brand' => 'Samsung'\n"
"            ],\n"
"        ],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'Apple' => [\n"
"            [\n"
"                'name' => 'iPhone 6S',\n"
"                'brand' => 'Apple'\n"
"            ],\n"
"        ],\n"
"        'Samsung' => [\n"
"            [\n"
"                'name' => 'Galaxy S7',\n"
"                'brand' => 'Samsung'\n"
"            ],\n"
"        ],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 876
# File: docs/master/collections.md, line: 877
#. type: Plain text
#, no-wrap
msgid "    $products = $collection->flatten(1);\n"
msgstr "    $products = $collection->flatten(1);\n"

# File: docs/8.x/collections.md, line: 878
# File: docs/master/collections.md, line: 879
#. type: Plain text
#, no-wrap
msgid "    $products->values()->all();\n"
msgstr "    $products->values()->all();\n"

# File: docs/8.x/collections.md, line: 885
# File: docs/master/collections.md, line: 886
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6S', 'brand' => 'Apple'],\n"
"            ['name' => 'Galaxy S7', 'brand' => 'Samsung'],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6S', 'brand' => 'Apple'],\n"
"            ['name' => 'Galaxy S7', 'brand' => 'Samsung'],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 887
# File: docs/master/collections.md, line: 888
#. type: Plain text
msgid "In this example, calling `flatten` without providing the depth would have also flattened the nested arrays, resulting in `['iPhone 6S', 'Apple', 'Galaxy S7', 'Samsung']`. Providing a depth allows you to specify the number of levels nested arrays will be flattened."
msgstr ""

# File: docs/8.x/collections.md, line: 889
# File: docs/master/collections.md, line: 890
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-flip\"></a>\n"
msgstr "<a name=\"method-flip\"></a>\n"

# File: docs/8.x/collections.md, line: 889
# File: docs/master/collections.md, line: 890
#. type: Title ####
#, no-wrap
msgid "`flip()` {.collection-method}"
msgstr "`flip()` {.collection-method}"

# File: docs/8.x/collections.md, line: 892
# File: docs/master/collections.md, line: 893
#. type: Plain text
msgid "The `flip` method swaps the collection's keys with their corresponding values:"
msgstr ""

# File: docs/8.x/collections.md, line: 894
# File: docs/8.x/collections.md, line: 907
# File: docs/8.x/collections.md, line: 935
# File: docs/8.x/collections.md, line: 943
# File: docs/master/collections.md, line: 895
# File: docs/master/collections.md, line: 908
# File: docs/master/collections.md, line: 936
# File: docs/master/collections.md, line: 944
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
msgstr "    $collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"

# File: docs/8.x/collections.md, line: 896
# File: docs/master/collections.md, line: 897
#. type: Plain text
#, no-wrap
msgid "    $flipped = $collection->flip();\n"
msgstr "    $flipped = $collection->flip();\n"

# File: docs/8.x/collections.md, line: 898
# File: docs/master/collections.md, line: 899
#. type: Plain text
#, no-wrap
msgid "    $flipped->all();\n"
msgstr "    $flipped->all();\n"

# File: docs/8.x/collections.md, line: 900
# File: docs/master/collections.md, line: 901
#. type: Plain text
#, no-wrap
msgid "    // ['taylor' => 'name', 'laravel' => 'framework']\n"
msgstr "    // ['taylor' => 'name', 'laravel' => 'framework']\n"

# File: docs/8.x/collections.md, line: 902
# File: docs/master/collections.md, line: 903
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-forget\"></a>\n"
msgstr "<a name=\"method-forget\"></a>\n"

# File: docs/8.x/collections.md, line: 902
# File: docs/master/collections.md, line: 903
#. type: Title ####
#, no-wrap
msgid "`forget()` {.collection-method}"
msgstr "`forget()` {.collection-method}"

# File: docs/8.x/collections.md, line: 905
# File: docs/master/collections.md, line: 906
#. type: Plain text
msgid "The `forget` method removes an item from the collection by its key:"
msgstr ""

# File: docs/8.x/collections.md, line: 909
# File: docs/master/collections.md, line: 910
#. type: Plain text
#, no-wrap
msgid "    $collection->forget('name');\n"
msgstr "    $collection->forget('name');\n"

# File: docs/8.x/collections.md, line: 913
# File: docs/master/collections.md, line: 914
#. type: Plain text
#, no-wrap
msgid "    // ['framework' => 'laravel']\n"
msgstr "    // ['framework' => 'laravel']\n"

# File: docs/8.x/collections.md, line: 915
# File: docs/master/collections.md, line: 916
#. type: Plain text
#, no-wrap
msgid "> {note} Unlike most other collection methods, `forget` does not return a new modified collection; it modifies the collection it is called on.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 917
# File: docs/master/collections.md, line: 918
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-forpage\"></a>\n"
msgstr "<a name=\"method-forpage\"></a>\n"

# File: docs/8.x/collections.md, line: 917
# File: docs/master/collections.md, line: 918
#. type: Title ####
#, no-wrap
msgid "`forPage()` {.collection-method}"
msgstr "`forPage()` {.collection-method}"

# File: docs/8.x/collections.md, line: 920
# File: docs/master/collections.md, line: 921
#. type: Plain text
msgid "The `forPage` method returns a new collection containing the items that would be present on a given page number. The method accepts the page number as its first argument and the number of items to show per page as its second argument:"
msgstr ""

# File: docs/8.x/collections.md, line: 922
# File: docs/master/collections.md, line: 923
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
msgstr "    $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"

# File: docs/8.x/collections.md, line: 924
# File: docs/master/collections.md, line: 925
#. type: Plain text
#, no-wrap
msgid "    $chunk = $collection->forPage(2, 3);\n"
msgstr "    $chunk = $collection->forPage(2, 3);\n"

# File: docs/8.x/collections.md, line: 926
# File: docs/8.x/collections.md, line: 2342
# File: docs/8.x/collections.md, line: 2356
# File: docs/8.x/collections.md, line: 2370
# File: docs/8.x/collections.md, line: 2447
# File: docs/8.x/collections.md, line: 2457
# File: docs/master/collections.md, line: 927
# File: docs/master/collections.md, line: 2358
# File: docs/master/collections.md, line: 2372
# File: docs/master/collections.md, line: 2386
# File: docs/master/collections.md, line: 2463
# File: docs/master/collections.md, line: 2473
#. type: Plain text
#, no-wrap
msgid "    $chunk->all();\n"
msgstr "    $chunk->all();\n"

# File: docs/8.x/collections.md, line: 928
# File: docs/master/collections.md, line: 929
#. type: Plain text
#, no-wrap
msgid "    // [4, 5, 6]\n"
msgstr "    // [4, 5, 6]\n"

# File: docs/8.x/collections.md, line: 930
# File: docs/master/collections.md, line: 931
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-get\"></a>\n"
msgstr "<a name=\"method-get\"></a>\n"

# File: docs/8.x/collections.md, line: 930
# File: docs/master/collections.md, line: 931
#. type: Title ####
#, no-wrap
msgid "`get()` {.collection-method}"
msgstr "`get()` {.collection-method}"

# File: docs/8.x/collections.md, line: 933
# File: docs/master/collections.md, line: 934
#. type: Plain text
msgid "The `get` method returns the item at a given key. If the key does not exist, `null` is returned:"
msgstr ""

# File: docs/8.x/collections.md, line: 937
# File: docs/master/collections.md, line: 938
#. type: Plain text
#, no-wrap
msgid "    $value = $collection->get('name');\n"
msgstr "    $value = $collection->get('name');\n"

# File: docs/8.x/collections.md, line: 939
# File: docs/master/collections.md, line: 940
#. type: Plain text
#, no-wrap
msgid "    // taylor\n"
msgstr "    // taylor\n"

# File: docs/8.x/collections.md, line: 941
# File: docs/master/collections.md, line: 942
#. type: Plain text
msgid "You may optionally pass a default value as the second argument:"
msgstr ""

# File: docs/8.x/collections.md, line: 945
# File: docs/master/collections.md, line: 946
#. type: Plain text
#, no-wrap
msgid "    $value = $collection->get('age', 34);\n"
msgstr "    $value = $collection->get('age', 34);\n"

# File: docs/8.x/collections.md, line: 947
# File: docs/master/collections.md, line: 948
#. type: Plain text
#, no-wrap
msgid "    // 34\n"
msgstr "    // 34\n"

# File: docs/8.x/collections.md, line: 949
# File: docs/master/collections.md, line: 950
#. type: Plain text
msgid "You may even pass a callback as the method's default value. The result of the callback will be returned if the specified key does not exist:"
msgstr ""

# File: docs/8.x/collections.md, line: 953
# File: docs/master/collections.md, line: 954
#. type: Plain text
#, no-wrap
msgid "    $collection->get('email', function () {\n"
"        return 'taylor@example.com';\n"
"    });\n"
msgstr "    $collection->get('email', function () {\n"
"        return 'taylor@example.com';\n"
"    });\n"

# File: docs/8.x/collections.md, line: 955
# File: docs/master/collections.md, line: 956
#. type: Plain text
#, no-wrap
msgid "    // taylor@example.com\n"
msgstr "    // taylor@example.com\n"

# File: docs/8.x/collections.md, line: 957
# File: docs/master/collections.md, line: 958
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-groupby\"></a>\n"
msgstr "<a name=\"method-groupby\"></a>\n"

# File: docs/8.x/collections.md, line: 957
# File: docs/master/collections.md, line: 958
#. type: Title ####
#, no-wrap
msgid "`groupBy()` {.collection-method}"
msgstr "`groupBy()` {.collection-method}"

# File: docs/8.x/collections.md, line: 960
# File: docs/master/collections.md, line: 961
#. type: Plain text
msgid "The `groupBy` method groups the collection's items by a given key:"
msgstr ""

# File: docs/8.x/collections.md, line: 966
# File: docs/master/collections.md, line: 967
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"        ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"        ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 968
# File: docs/master/collections.md, line: 969
#. type: Plain text
#, no-wrap
msgid "    $grouped = $collection->groupBy('account_id');\n"
msgstr "    $grouped = $collection->groupBy('account_id');\n"

# File: docs/8.x/collections.md, line: 970
# File: docs/8.x/collections.md, line: 990
# File: docs/8.x/collections.md, line: 1306
# File: docs/master/collections.md, line: 971
# File: docs/master/collections.md, line: 991
# File: docs/master/collections.md, line: 1307
#. type: Plain text
#, no-wrap
msgid "    $grouped->all();\n"
msgstr "    $grouped->all();\n"

# File: docs/8.x/collections.md, line: 982
# File: docs/master/collections.md, line: 983
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'account-x10' => [\n"
"                ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"                ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"            ],\n"
"            'account-x11' => [\n"
"                ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            'account-x10' => [\n"
"                ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"                ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"            ],\n"
"            'account-x11' => [\n"
"                ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"            ],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 984
# File: docs/master/collections.md, line: 985
#. type: Plain text
msgid "Instead of passing a string `key`, you may pass a callback. The callback should return the value you wish to key the group by:"
msgstr ""

# File: docs/8.x/collections.md, line: 988
# File: docs/master/collections.md, line: 989
#. type: Plain text
#, no-wrap
msgid "    $grouped = $collection->groupBy(function ($item, $key) {\n"
"        return substr($item['account_id'], -3);\n"
"    });\n"
msgstr "    $grouped = $collection->groupBy(function ($item, $key) {\n"
"        return substr($item['account_id'], -3);\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1002
# File: docs/master/collections.md, line: 1003
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'x10' => [\n"
"                ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"                ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"            ],\n"
"            'x11' => [\n"
"                ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            'x10' => [\n"
"                ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"                ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"            ],\n"
"            'x11' => [\n"
"                ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"            ],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1004
# File: docs/master/collections.md, line: 1005
#. type: Plain text
msgid "Multiple grouping criteria may be passed as an array. Each array element will be applied to the corresponding level within a multi-dimensional array:"
msgstr ""

# File: docs/8.x/collections.md, line: 1011
# File: docs/master/collections.md, line: 1012
#. type: Plain text
#, no-wrap
msgid "    $data = new Collection([\n"
"        10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"    ]);\n"
msgstr "    $data = new Collection([\n"
"        10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1015
# File: docs/master/collections.md, line: 1016
#. type: Plain text
#, no-wrap
msgid "    $result = $data->groupBy(['skill', function ($item) {\n"
"        return $item['roles'];\n"
"    }], $preserveKeys = true);\n"
msgstr "    $result = $data->groupBy(['skill', function ($item) {\n"
"        return $item['roles'];\n"
"    }], $preserveKeys = true);\n"

# File: docs/8.x/collections.md, line: 1040
# File: docs/master/collections.md, line: 1041
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"    [\n"
"        1 => [\n"
"            'Role_1' => [\n"
"                10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"                20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"            ],\n"
"            'Role_2' => [\n"
"                20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"            ],\n"
"            'Role_3' => [\n"
"                10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            ],\n"
"        ],\n"
"        2 => [\n"
"            'Role_1' => [\n"
"                30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"            ],\n"
"            'Role_2' => [\n"
"                40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"            ],\n"
"        ],\n"
"    ];\n"
"    */\n"
msgstr "    /*\n"
"    [\n"
"        1 => [\n"
"            'Role_1' => [\n"
"                10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"                20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"            ],\n"
"            'Role_2' => [\n"
"                20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"            ],\n"
"            'Role_3' => [\n"
"                10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            ],\n"
"        ],\n"
"        2 => [\n"
"            'Role_1' => [\n"
"                30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"            ],\n"
"            'Role_2' => [\n"
"                40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"            ],\n"
"        ],\n"
"    ];\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1042
# File: docs/master/collections.md, line: 1043
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-has\"></a>\n"
msgstr "<a name=\"method-has\"></a>\n"

# File: docs/8.x/collections.md, line: 1042
# File: docs/master/collections.md, line: 1043
#. type: Title ####
#, no-wrap
msgid "`has()` {.collection-method}"
msgstr "`has()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1045
# File: docs/master/collections.md, line: 1046
#. type: Plain text
msgid "The `has` method determines if a given key exists in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1047
# File: docs/master/collections.md, line: 1048
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n"
msgstr "    $collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n"

# File: docs/8.x/collections.md, line: 1049
# File: docs/master/collections.md, line: 1050
#. type: Plain text
#, no-wrap
msgid "    $collection->has('product');\n"
msgstr "    $collection->has('product');\n"

# File: docs/8.x/collections.md, line: 1053
# File: docs/master/collections.md, line: 1054
#. type: Plain text
#, no-wrap
msgid "    $collection->has(['product', 'amount']);\n"
msgstr "    $collection->has(['product', 'amount']);\n"

# File: docs/8.x/collections.md, line: 1057
# File: docs/master/collections.md, line: 1058
#. type: Plain text
#, no-wrap
msgid "    $collection->has(['amount', 'price']);\n"
msgstr "    $collection->has(['amount', 'price']);\n"

# File: docs/8.x/collections.md, line: 1061
# File: docs/master/collections.md, line: 1062
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-implode\"></a>\n"
msgstr "<a name=\"method-implode\"></a>\n"

# File: docs/8.x/collections.md, line: 1061
# File: docs/master/collections.md, line: 1062
#. type: Title ####
#, no-wrap
msgid "`implode()` {.collection-method}"
msgstr "`implode()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1064
# File: docs/master/collections.md, line: 1065
#. type: Plain text
msgid "The `implode` method joins items in a collection. Its arguments depend on the type of items in the collection. If the collection contains arrays or objects, you should pass the key of the attributes you wish to join, and the \"glue\" string you wish to place between the values:"
msgstr ""

# File: docs/8.x/collections.md, line: 1069
# File: docs/master/collections.md, line: 1070
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['account_id' => 1, 'product' => 'Desk'],\n"
"        ['account_id' => 2, 'product' => 'Chair'],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['account_id' => 1, 'product' => 'Desk'],\n"
"        ['account_id' => 2, 'product' => 'Chair'],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1071
# File: docs/master/collections.md, line: 1072
#. type: Plain text
#, no-wrap
msgid "    $collection->implode('product', ', ');\n"
msgstr "    $collection->implode('product', ', ');\n"

# File: docs/8.x/collections.md, line: 1073
# File: docs/master/collections.md, line: 1074
#. type: Plain text
#, no-wrap
msgid "    // Desk, Chair\n"
msgstr "    // Desk, Chair\n"

# File: docs/8.x/collections.md, line: 1075
# File: docs/master/collections.md, line: 1076
#. type: Plain text
msgid "If the collection contains simple strings or numeric values, you should pass the \"glue\" as the only argument to the method:"
msgstr ""

# File: docs/8.x/collections.md, line: 1077
# File: docs/master/collections.md, line: 1078
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4, 5])->implode('-');\n"
msgstr "    collect([1, 2, 3, 4, 5])->implode('-');\n"

# File: docs/8.x/collections.md, line: 1079
# File: docs/master/collections.md, line: 1080
#. type: Plain text
#, no-wrap
msgid "    // '1-2-3-4-5'\n"
msgstr "    // '1-2-3-4-5'\n"

# File: docs/8.x/collections.md, line: 1081
# File: docs/master/collections.md, line: 1082
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-intersect\"></a>\n"
msgstr "<a name=\"method-intersect\"></a>\n"

# File: docs/8.x/collections.md, line: 1081
# File: docs/master/collections.md, line: 1082
#. type: Title ####
#, no-wrap
msgid "`intersect()` {.collection-method}"
msgstr "`intersect()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1084
# File: docs/master/collections.md, line: 1085
#. type: Plain text
msgid "The `intersect` method removes any values from the original collection that are not present in the given `array` or collection. The resulting collection will preserve the original collection's keys:"
msgstr ""

# File: docs/8.x/collections.md, line: 1086
# File: docs/master/collections.md, line: 1087
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['Desk', 'Sofa', 'Chair']);\n"
msgstr "    $collection = collect(['Desk', 'Sofa', 'Chair']);\n"

# File: docs/8.x/collections.md, line: 1088
# File: docs/master/collections.md, line: 1089
#. type: Plain text
#, no-wrap
msgid "    $intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n"
msgstr "    $intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n"

# File: docs/8.x/collections.md, line: 1090
# File: docs/8.x/collections.md, line: 1109
# File: docs/master/collections.md, line: 1091
# File: docs/master/collections.md, line: 1110
#. type: Plain text
#, no-wrap
msgid "    $intersect->all();\n"
msgstr "    $intersect->all();\n"

# File: docs/8.x/collections.md, line: 1092
# File: docs/master/collections.md, line: 1093
#. type: Plain text
#, no-wrap
msgid "    // [0 => 'Desk', 2 => 'Chair']\n"
msgstr "    // [0 => 'Desk', 2 => 'Chair']\n"

# File: docs/8.x/collections.md, line: 1094
# File: docs/master/collections.md, line: 1095
#. type: Plain text
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-intersect).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 1096
# File: docs/master/collections.md, line: 1097
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-intersectbykeys\"></a>\n"
msgstr "<a name=\"method-intersectbykeys\"></a>\n"

# File: docs/8.x/collections.md, line: 1096
# File: docs/master/collections.md, line: 1097
#. type: Title ####
#, no-wrap
msgid "`intersectByKeys()` {.collection-method}"
msgstr "`intersectByKeys()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1099
# File: docs/master/collections.md, line: 1100
#. type: Plain text
msgid "The `intersectByKeys` method removes any keys and their corresponding values from the original collection that are not present in the given `array` or collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1103
# File: docs/master/collections.md, line: 1104
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'serial' => 'UX301', 'type' => 'screen', 'year' => 2009,\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'serial' => 'UX301', 'type' => 'screen', 'year' => 2009,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1107
# File: docs/master/collections.md, line: 1108
#. type: Plain text
#, no-wrap
msgid "    $intersect = $collection->intersectByKeys([\n"
"        'reference' => 'UX404', 'type' => 'tab', 'year' => 2011,\n"
"    ]);\n"
msgstr "    $intersect = $collection->intersectByKeys([\n"
"        'reference' => 'UX404', 'type' => 'tab', 'year' => 2011,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1111
# File: docs/master/collections.md, line: 1112
#. type: Plain text
#, no-wrap
msgid "    // ['type' => 'screen', 'year' => 2009]\n"
msgstr "    // ['type' => 'screen', 'year' => 2009]\n"

# File: docs/8.x/collections.md, line: 1113
# File: docs/master/collections.md, line: 1114
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-isempty\"></a>\n"
msgstr "<a name=\"method-isempty\"></a>\n"

# File: docs/8.x/collections.md, line: 1113
# File: docs/master/collections.md, line: 1114
#. type: Title ####
#, no-wrap
msgid "`isEmpty()` {.collection-method}"
msgstr "`isEmpty()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1116
# File: docs/master/collections.md, line: 1117
#. type: Plain text
msgid "The `isEmpty` method returns `true` if the collection is empty; otherwise, `false` is returned:"
msgstr ""

# File: docs/8.x/collections.md, line: 1118
# File: docs/master/collections.md, line: 1119
#. type: Plain text
#, no-wrap
msgid "    collect([])->isEmpty();\n"
msgstr "    collect([])->isEmpty();\n"

# File: docs/8.x/collections.md, line: 1122
# File: docs/master/collections.md, line: 1123
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-isnotempty\"></a>\n"
msgstr "<a name=\"method-isnotempty\"></a>\n"

# File: docs/8.x/collections.md, line: 1122
# File: docs/master/collections.md, line: 1123
#. type: Title ####
#, no-wrap
msgid "`isNotEmpty()` {.collection-method}"
msgstr "`isNotEmpty()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1125
# File: docs/master/collections.md, line: 1126
#. type: Plain text
msgid "The `isNotEmpty` method returns `true` if the collection is not empty; otherwise, `false` is returned:"
msgstr ""

# File: docs/8.x/collections.md, line: 1127
# File: docs/master/collections.md, line: 1128
#. type: Plain text
#, no-wrap
msgid "    collect([])->isNotEmpty();\n"
msgstr "    collect([])->isNotEmpty();\n"

# File: docs/8.x/collections.md, line: 1131
# File: docs/master/collections.md, line: 1132
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-join\"></a>\n"
msgstr "<a name=\"method-join\"></a>\n"

# File: docs/8.x/collections.md, line: 1131
# File: docs/master/collections.md, line: 1132
#. type: Title ####
#, no-wrap
msgid "`join()` {.collection-method}"
msgstr "`join()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1134
# File: docs/master/collections.md, line: 1135
#. type: Plain text
msgid "The `join` method joins the collection's values with a string. Using this method's second argument, you may also specify how the final element should be appended to the string:"
msgstr ""

# File: docs/8.x/collections.md, line: 1140
# File: docs/master/collections.md, line: 1141
#. type: Plain text
#, no-wrap
msgid "    collect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\n"
"    collect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\n"
"    collect(['a', 'b'])->join(', ', ' and '); // 'a and b'\n"
"    collect(['a'])->join(', ', ' and '); // 'a'\n"
"    collect([])->join(', ', ' and '); // ''\n"
msgstr "    collect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\n"
"    collect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\n"
"    collect(['a', 'b'])->join(', ', ' and '); // 'a and b'\n"
"    collect(['a'])->join(', ', ' and '); // 'a'\n"
"    collect([])->join(', ', ' and '); // ''\n"

# File: docs/8.x/collections.md, line: 1142
# File: docs/master/collections.md, line: 1143
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-keyby\"></a>\n"
msgstr "<a name=\"method-keyby\"></a>\n"

# File: docs/8.x/collections.md, line: 1142
# File: docs/master/collections.md, line: 1143
#. type: Title ####
#, no-wrap
msgid "`keyBy()` {.collection-method}"
msgstr "`keyBy()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1145
# File: docs/master/collections.md, line: 1146
#. type: Plain text
msgid "The `keyBy` method keys the collection by the given key. If multiple items have the same key, only the last one will appear in the new collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1150
# File: docs/8.x/collections.md, line: 1609
# File: docs/master/collections.md, line: 1151
# File: docs/master/collections.md, line: 1610
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1152
# File: docs/master/collections.md, line: 1153
#. type: Plain text
#, no-wrap
msgid "    $keyed = $collection->keyBy('product_id');\n"
msgstr "    $keyed = $collection->keyBy('product_id');\n"

# File: docs/8.x/collections.md, line: 1154
# File: docs/8.x/collections.md, line: 1169
# File: docs/8.x/collections.md, line: 1341
# File: docs/master/collections.md, line: 1155
# File: docs/master/collections.md, line: 1170
# File: docs/master/collections.md, line: 1342
#. type: Plain text
#, no-wrap
msgid "    $keyed->all();\n"
msgstr "    $keyed->all();\n"

# File: docs/8.x/collections.md, line: 1161
# File: docs/master/collections.md, line: 1162
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"            'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"            'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1163
# File: docs/master/collections.md, line: 1164
#. type: Plain text
msgid "You may also pass a callback to the method. The callback should return the value to key the collection by:"
msgstr ""

# File: docs/8.x/collections.md, line: 1167
# File: docs/master/collections.md, line: 1168
#. type: Plain text
#, no-wrap
msgid "    $keyed = $collection->keyBy(function ($item) {\n"
"        return strtoupper($item['product_id']);\n"
"    });\n"
msgstr "    $keyed = $collection->keyBy(function ($item) {\n"
"        return strtoupper($item['product_id']);\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1176
# File: docs/master/collections.md, line: 1177
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"            'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"            'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1178
# File: docs/master/collections.md, line: 1179
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-keys\"></a>\n"
msgstr "<a name=\"method-keys\"></a>\n"

# File: docs/8.x/collections.md, line: 1178
# File: docs/master/collections.md, line: 1179
#. type: Title ####
#, no-wrap
msgid "`keys()` {.collection-method}"
msgstr "`keys()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1181
# File: docs/master/collections.md, line: 1182
#. type: Plain text
msgid "The `keys` method returns all of the collection's keys:"
msgstr ""

# File: docs/8.x/collections.md, line: 1186
# File: docs/master/collections.md, line: 1187
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1188
# File: docs/master/collections.md, line: 1189
#. type: Plain text
#, no-wrap
msgid "    $keys = $collection->keys();\n"
msgstr "    $keys = $collection->keys();\n"

# File: docs/8.x/collections.md, line: 1190
# File: docs/master/collections.md, line: 1191
#. type: Plain text
#, no-wrap
msgid "    $keys->all();\n"
msgstr "    $keys->all();\n"

# File: docs/8.x/collections.md, line: 1192
# File: docs/master/collections.md, line: 1193
#. type: Plain text
#, no-wrap
msgid "    // ['prod-100', 'prod-200']\n"
msgstr "    // ['prod-100', 'prod-200']\n"

# File: docs/8.x/collections.md, line: 1194
# File: docs/master/collections.md, line: 1195
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-last\"></a>\n"
msgstr "<a name=\"method-last\"></a>\n"

# File: docs/8.x/collections.md, line: 1194
# File: docs/master/collections.md, line: 1195
#. type: Title ####
#, no-wrap
msgid "`last()` {.collection-method}"
msgstr "`last()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1197
# File: docs/master/collections.md, line: 1198
#. type: Plain text
msgid "The `last` method returns the last element in the collection that passes a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 1201
# File: docs/master/collections.md, line: 1202
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4])->last(function ($value, $key) {\n"
"        return $value < 3;\n"
"    });\n"
msgstr "    collect([1, 2, 3, 4])->last(function ($value, $key) {\n"
"        return $value < 3;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1205
# File: docs/master/collections.md, line: 1206
#. type: Plain text
msgid "You may also call the `last` method with no arguments to get the last element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

# File: docs/8.x/collections.md, line: 1207
# File: docs/master/collections.md, line: 1208
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4])->last();\n"
msgstr "    collect([1, 2, 3, 4])->last();\n"

# File: docs/8.x/collections.md, line: 1211
# File: docs/master/collections.md, line: 1212
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-macro\"></a>\n"
msgstr "<a name=\"method-macro\"></a>\n"

# File: docs/8.x/collections.md, line: 1211
# File: docs/master/collections.md, line: 1212
#. type: Title ####
#, no-wrap
msgid "`macro()` {.collection-method}"
msgstr "`macro()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1214
# File: docs/master/collections.md, line: 1215
#. type: Plain text
msgid "The static `macro` method allows you to add methods to the `Collection` class at run time. Refer to the documentation on [extending collections](#extending-collections) for more information."
msgstr ""

# File: docs/8.x/collections.md, line: 1216
# File: docs/master/collections.md, line: 1217
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-make\"></a>\n"
msgstr "<a name=\"method-make\"></a>\n"

# File: docs/8.x/collections.md, line: 1216
# File: docs/master/collections.md, line: 1217
#. type: Title ####
#, no-wrap
msgid "`make()` {.collection-method}"
msgstr "`make()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1219
# File: docs/master/collections.md, line: 1220
#. type: Plain text
msgid "The static `make` method creates a new collection instance. See the [Creating Collections](#creating-collections) section."
msgstr "The static `make` method creates a new collection instance. See the [Creating Collections](#creating-collections) section."

# File: docs/8.x/collections.md, line: 1221
# File: docs/master/collections.md, line: 1222
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-map\"></a>\n"
msgstr "<a name=\"method-map\"></a>\n"

# File: docs/8.x/collections.md, line: 1221
# File: docs/master/collections.md, line: 1222
#. type: Title ####
#, no-wrap
msgid "`map()` {.collection-method}"
msgstr "`map()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1224
# File: docs/master/collections.md, line: 1225
#. type: Plain text
msgid "The `map` method iterates through the collection and passes each value to the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

# File: docs/8.x/collections.md, line: 1230
# File: docs/master/collections.md, line: 1231
#. type: Plain text
#, no-wrap
msgid "    $multiplied = $collection->map(function ($item, $key) {\n"
"        return $item * 2;\n"
"    });\n"
msgstr "    $multiplied = $collection->map(function ($item, $key) {\n"
"        return $item * 2;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1232
# File: docs/master/collections.md, line: 1233
#. type: Plain text
#, no-wrap
msgid "    $multiplied->all();\n"
msgstr "    $multiplied->all();\n"

# File: docs/8.x/collections.md, line: 1234
# File: docs/8.x/collections.md, line: 2573
# File: docs/master/collections.md, line: 1235
# File: docs/master/collections.md, line: 2589
#. type: Plain text
#, no-wrap
msgid "    // [2, 4, 6, 8, 10]\n"
msgstr "    // [2, 4, 6, 8, 10]\n"

# File: docs/8.x/collections.md, line: 1236
# File: docs/master/collections.md, line: 1237
#. type: Plain text
#, no-wrap
msgid "> {note} Like most other collection methods, `map` returns a new collection instance; it does not modify the collection it is called on. If you want to transform the original collection, use the [`transform`](#method-transform) method.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 1238
# File: docs/master/collections.md, line: 1239
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-mapinto\"></a>\n"
msgstr "<a name=\"method-mapinto\"></a>\n"

# File: docs/8.x/collections.md, line: 1238
# File: docs/master/collections.md, line: 1239
#. type: Title ####
#, no-wrap
msgid "`mapInto()` {.collection-method}"
msgstr "`mapInto()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1241
# File: docs/master/collections.md, line: 1242
#. type: Plain text
msgid "The `mapInto()` method iterates over the collection, creating a new instance of the given class by passing the value into the constructor:"
msgstr "The `mapInto()` method iterates over the collection, creating a new instance of the given class by passing the value into the constructor:"

# File: docs/8.x/collections.md, line: 1255
# File: docs/master/collections.md, line: 1256
#. type: Plain text
#, no-wrap
msgid "    class Currency\n"
"    {\n"
"        /**\n"
"         * Create a new currency instance.\n"
"         *\n"
"         * @param  string  $code\n"
"         * @return void\n"
"         */\n"
"        function __construct(string $code)\n"
"        {\n"
"            $this->code = $code;\n"
"        }\n"
"    }\n"
msgstr "    class Currency\n"
"    {\n"
"        /**\n"
"         * Create a new currency instance.\n"
"         *\n"
"         * @param  string  $code\n"
"         * @return void\n"
"         */\n"
"        function __construct(string $code)\n"
"        {\n"
"            $this->code = $code;\n"
"        }\n"
"    }\n"

# File: docs/8.x/collections.md, line: 1257
# File: docs/master/collections.md, line: 1258
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['USD', 'EUR', 'GBP']);\n"
msgstr "    $collection = collect(['USD', 'EUR', 'GBP']);\n"

# File: docs/8.x/collections.md, line: 1259
# File: docs/master/collections.md, line: 1260
#. type: Plain text
#, no-wrap
msgid "    $currencies = $collection->mapInto(Currency::class);\n"
msgstr "    $currencies = $collection->mapInto(Currency::class);\n"

# File: docs/8.x/collections.md, line: 1261
# File: docs/master/collections.md, line: 1262
#. type: Plain text
#, no-wrap
msgid "    $currencies->all();\n"
msgstr "    $currencies->all();\n"

# File: docs/8.x/collections.md, line: 1263
# File: docs/master/collections.md, line: 1264
#. type: Plain text
#, no-wrap
msgid "    // [Currency('USD'), Currency('EUR'), Currency('GBP')]\n"
msgstr "    // [Currency('USD'), Currency('EUR'), Currency('GBP')]\n"

# File: docs/8.x/collections.md, line: 1265
# File: docs/master/collections.md, line: 1266
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-mapspread\"></a>\n"
msgstr "<a name=\"method-mapspread\"></a>\n"

# File: docs/8.x/collections.md, line: 1265
# File: docs/master/collections.md, line: 1266
#. type: Title ####
#, no-wrap
msgid "`mapSpread()` {.collection-method}"
msgstr "`mapSpread()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1268
# File: docs/master/collections.md, line: 1269
#. type: Plain text
msgid "The `mapSpread` method iterates over the collection's items, passing each nested item value into the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

# File: docs/8.x/collections.md, line: 1270
# File: docs/master/collections.md, line: 1271
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
msgstr "    $collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"

# File: docs/8.x/collections.md, line: 1272
# File: docs/master/collections.md, line: 1273
#. type: Plain text
#, no-wrap
msgid "    $chunks = $collection->chunk(2);\n"
msgstr "    $chunks = $collection->chunk(2);\n"

# File: docs/8.x/collections.md, line: 1276
# File: docs/master/collections.md, line: 1277
#. type: Plain text
#, no-wrap
msgid "    $sequence = $chunks->mapSpread(function ($even, $odd) {\n"
"        return $even + $odd;\n"
"    });\n"
msgstr "    $sequence = $chunks->mapSpread(function ($even, $odd) {\n"
"        return $even + $odd;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1278
# File: docs/master/collections.md, line: 1279
#. type: Plain text
#, no-wrap
msgid "    $sequence->all();\n"
msgstr "    $sequence->all();\n"

# File: docs/8.x/collections.md, line: 1280
# File: docs/master/collections.md, line: 1281
#. type: Plain text
#, no-wrap
msgid "    // [1, 5, 9, 13, 17]\n"
msgstr "    // [1, 5, 9, 13, 17]\n"

# File: docs/8.x/collections.md, line: 1282
# File: docs/master/collections.md, line: 1283
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-maptogroups\"></a>\n"
msgstr "<a name=\"method-maptogroups\"></a>\n"

# File: docs/8.x/collections.md, line: 1282
# File: docs/master/collections.md, line: 1283
#. type: Title ####
#, no-wrap
msgid "`mapToGroups()` {.collection-method}"
msgstr "`mapToGroups()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1285
# File: docs/master/collections.md, line: 1286
#. type: Plain text
msgid "The `mapToGroups` method groups the collection's items by the given closure. The closure should return an associative array containing a single key / value pair, thus forming a new collection of grouped values:"
msgstr ""

# File: docs/8.x/collections.md, line: 1300
# File: docs/master/collections.md, line: 1301
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        [\n"
"            'name' => 'John Doe',\n"
"            'department' => 'Sales',\n"
"        ],\n"
"        [\n"
"            'name' => 'Jane Doe',\n"
"            'department' => 'Sales',\n"
"        ],\n"
"        [\n"
"            'name' => 'Johnny Doe',\n"
"            'department' => 'Marketing',\n"
"        ]\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        [\n"
"            'name' => 'John Doe',\n"
"            'department' => 'Sales',\n"
"        ],\n"
"        [\n"
"            'name' => 'Jane Doe',\n"
"            'department' => 'Sales',\n"
"        ],\n"
"        [\n"
"            'name' => 'Johnny Doe',\n"
"            'department' => 'Marketing',\n"
"        ]\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1304
# File: docs/master/collections.md, line: 1305
#. type: Plain text
#, no-wrap
msgid "    $grouped = $collection->mapToGroups(function ($item, $key) {\n"
"        return [$item['department'] => $item['name']];\n"
"    });\n"
msgstr "    $grouped = $collection->mapToGroups(function ($item, $key) {\n"
"        return [$item['department'] => $item['name']];\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1313
# File: docs/master/collections.md, line: 1314
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'Sales' => ['John Doe', 'Jane Doe'],\n"
"            'Marketing' => ['Johnny Doe'],\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            'Sales' => ['John Doe', 'Jane Doe'],\n"
"            'Marketing' => ['Johnny Doe'],\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1315
# File: docs/master/collections.md, line: 1316
#. type: Plain text
#, no-wrap
msgid "    $grouped->get('Sales')->all();\n"
msgstr "    $grouped->get('Sales')->all();\n"

# File: docs/8.x/collections.md, line: 1317
# File: docs/master/collections.md, line: 1318
#. type: Plain text
#, no-wrap
msgid "    // ['John Doe', 'Jane Doe']\n"
msgstr "    // ['John Doe', 'Jane Doe']\n"

# File: docs/8.x/collections.md, line: 1319
# File: docs/master/collections.md, line: 1320
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-mapwithkeys\"></a>\n"
msgstr "<a name=\"method-mapwithkeys\"></a>\n"

# File: docs/8.x/collections.md, line: 1319
# File: docs/master/collections.md, line: 1320
#. type: Title ####
#, no-wrap
msgid "`mapWithKeys()` {.collection-method}"
msgstr "`mapWithKeys()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1322
# File: docs/master/collections.md, line: 1323
#. type: Plain text
msgid "The `mapWithKeys` method iterates through the collection and passes each value to the given callback. The callback should return an associative array containing a single key / value pair:"
msgstr ""

# File: docs/8.x/collections.md, line: 1335
# File: docs/master/collections.md, line: 1336
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        [\n"
"            'name' => 'John',\n"
"            'department' => 'Sales',\n"
"            'email' => 'john@example.com',\n"
"        ],\n"
"        [\n"
"            'name' => 'Jane',\n"
"            'department' => 'Marketing',\n"
"            'email' => 'jane@example.com',\n"
"        ]\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        [\n"
"            'name' => 'John',\n"
"            'department' => 'Sales',\n"
"            'email' => 'john@example.com',\n"
"        ],\n"
"        [\n"
"            'name' => 'Jane',\n"
"            'department' => 'Marketing',\n"
"            'email' => 'jane@example.com',\n"
"        ]\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1339
# File: docs/master/collections.md, line: 1340
#. type: Plain text
#, no-wrap
msgid "    $keyed = $collection->mapWithKeys(function ($item, $key) {\n"
"        return [$item['email'] => $item['name']];\n"
"    });\n"
msgstr "    $keyed = $collection->mapWithKeys(function ($item, $key) {\n"
"        return [$item['email'] => $item['name']];\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1348
# File: docs/master/collections.md, line: 1349
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'john@example.com' => 'John',\n"
"            'jane@example.com' => 'Jane',\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            'john@example.com' => 'John',\n"
"            'jane@example.com' => 'Jane',\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1350
# File: docs/master/collections.md, line: 1351
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-max\"></a>\n"
msgstr "<a name=\"method-max\"></a>\n"

# File: docs/8.x/collections.md, line: 1350
# File: docs/master/collections.md, line: 1351
#. type: Title ####
#, no-wrap
msgid "`max()` {.collection-method}"
msgstr "`max()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1353
# File: docs/master/collections.md, line: 1354
#. type: Plain text
msgid "The `max` method returns the maximum value of a given key:"
msgstr ""

# File: docs/8.x/collections.md, line: 1358
# File: docs/master/collections.md, line: 1359
#. type: Plain text
#, no-wrap
msgid "    $max = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 20]\n"
"    ])->max('foo');\n"
msgstr "    $max = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 20]\n"
"    ])->max('foo');\n"

# File: docs/8.x/collections.md, line: 1362
# File: docs/master/collections.md, line: 1363
#. type: Plain text
#, no-wrap
msgid "    $max = collect([1, 2, 3, 4, 5])->max();\n"
msgstr "    $max = collect([1, 2, 3, 4, 5])->max();\n"

# File: docs/8.x/collections.md, line: 1364
# File: docs/8.x/collections.md, line: 1666
# File: docs/master/collections.md, line: 1365
# File: docs/master/collections.md, line: 1667
#. type: Plain text
#, no-wrap
msgid "    // 5\n"
msgstr "    // 5\n"

# File: docs/8.x/collections.md, line: 1366
# File: docs/master/collections.md, line: 1367
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-median\"></a>\n"
msgstr "<a name=\"method-median\"></a>\n"

# File: docs/8.x/collections.md, line: 1366
# File: docs/master/collections.md, line: 1367
#. type: Title ####
#, no-wrap
msgid "`median()` {.collection-method}"
msgstr "`median()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1369
# File: docs/master/collections.md, line: 1370
#. type: Plain text
msgid "The `median` method returns the [median value](https://en.wikipedia.org/wiki/Median) of a given key:"
msgstr ""

# File: docs/8.x/collections.md, line: 1376
# File: docs/master/collections.md, line: 1377
#. type: Plain text
#, no-wrap
msgid "    $median = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->median('foo');\n"
msgstr "    $median = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->median('foo');\n"

# File: docs/8.x/collections.md, line: 1378
# File: docs/8.x/collections.md, line: 1599
# File: docs/8.x/collections.md, line: 2411
# File: docs/master/collections.md, line: 1379
# File: docs/master/collections.md, line: 1600
# File: docs/master/collections.md, line: 2427
#. type: Plain text
#, no-wrap
msgid "    // 15\n"
msgstr "    // 15\n"

# File: docs/8.x/collections.md, line: 1380
# File: docs/master/collections.md, line: 1381
#. type: Plain text
#, no-wrap
msgid "    $median = collect([1, 1, 2, 4])->median();\n"
msgstr "    $median = collect([1, 1, 2, 4])->median();\n"

# File: docs/8.x/collections.md, line: 1382
# File: docs/master/collections.md, line: 1383
#. type: Plain text
#, no-wrap
msgid "    // 1.5\n"
msgstr "    // 1.5\n"

# File: docs/8.x/collections.md, line: 1384
# File: docs/master/collections.md, line: 1385
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-merge\"></a>\n"
msgstr "<a name=\"method-merge\"></a>\n"

# File: docs/8.x/collections.md, line: 1384
# File: docs/master/collections.md, line: 1385
#. type: Title ####
#, no-wrap
msgid "`merge()` {.collection-method}"
msgstr "`merge()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1387
# File: docs/master/collections.md, line: 1388
#. type: Plain text
msgid "The `merge` method merges the given array or collection with the original collection. If a string key in the given items matches a string key in the original collection, the given items's value will overwrite the value in the original collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1389
# File: docs/8.x/collections.md, line: 1412
# File: docs/master/collections.md, line: 1390
# File: docs/master/collections.md, line: 1413
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['product_id' => 1, 'price' => 100]);\n"
msgstr "    $collection = collect(['product_id' => 1, 'price' => 100]);\n"

# File: docs/8.x/collections.md, line: 1391
# File: docs/master/collections.md, line: 1392
#. type: Plain text
#, no-wrap
msgid "    $merged = $collection->merge(['price' => 200, 'discount' => false]);\n"
msgstr "    $merged = $collection->merge(['price' => 200, 'discount' => false]);\n"

# File: docs/8.x/collections.md, line: 1393
# File: docs/8.x/collections.md, line: 1403
# File: docs/8.x/collections.md, line: 1420
# File: docs/master/collections.md, line: 1394
# File: docs/master/collections.md, line: 1404
# File: docs/master/collections.md, line: 1421
#. type: Plain text
#, no-wrap
msgid "    $merged->all();\n"
msgstr "    $merged->all();\n"

# File: docs/8.x/collections.md, line: 1395
# File: docs/master/collections.md, line: 1396
#. type: Plain text
#, no-wrap
msgid "    // ['product_id' => 1, 'price' => 200, 'discount' => false]\n"
msgstr "    // ['product_id' => 1, 'price' => 200, 'discount' => false]\n"

# File: docs/8.x/collections.md, line: 1397
# File: docs/master/collections.md, line: 1398
#. type: Plain text
msgid "If the given items's keys are numeric, the values will be appended to the end of the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1399
# File: docs/master/collections.md, line: 1400
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['Desk', 'Chair']);\n"
msgstr "    $collection = collect(['Desk', 'Chair']);\n"

# File: docs/8.x/collections.md, line: 1401
# File: docs/master/collections.md, line: 1402
#. type: Plain text
#, no-wrap
msgid "    $merged = $collection->merge(['Bookcase', 'Door']);\n"
msgstr "    $merged = $collection->merge(['Bookcase', 'Door']);\n"

# File: docs/8.x/collections.md, line: 1405
# File: docs/master/collections.md, line: 1406
#. type: Plain text
#, no-wrap
msgid "    // ['Desk', 'Chair', 'Bookcase', 'Door']\n"
msgstr "    // ['Desk', 'Chair', 'Bookcase', 'Door']\n"

# File: docs/8.x/collections.md, line: 1407
# File: docs/master/collections.md, line: 1408
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-mergerecursive\"></a>\n"
msgstr "<a name=\"method-mergerecursive\"></a>\n"

# File: docs/8.x/collections.md, line: 1407
# File: docs/master/collections.md, line: 1408
#. type: Title ####
#, no-wrap
msgid "`mergeRecursive()` {.collection-method}"
msgstr "`mergeRecursive()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1410
# File: docs/master/collections.md, line: 1411
#. type: Plain text
msgid "The `mergeRecursive` method merges the given array or collection recursively with the original collection. If a string key in the given items matches a string key in the original collection, then the values for these keys are merged together into an array, and this is done recursively:"
msgstr ""

# File: docs/8.x/collections.md, line: 1418
# File: docs/master/collections.md, line: 1419
#. type: Plain text
#, no-wrap
msgid "    $merged = $collection->mergeRecursive([\n"
"        'product_id' => 2,\n"
"        'price' => 200,\n"
"        'discount' => false\n"
"    ]);\n"
msgstr "    $merged = $collection->mergeRecursive([\n"
"        'product_id' => 2,\n"
"        'price' => 200,\n"
"        'discount' => false\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1422
# File: docs/master/collections.md, line: 1423
#. type: Plain text
#, no-wrap
msgid "    // ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n"
msgstr "    // ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n"

# File: docs/8.x/collections.md, line: 1424
# File: docs/master/collections.md, line: 1425
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-min\"></a>\n"
msgstr "<a name=\"method-min\"></a>\n"

# File: docs/8.x/collections.md, line: 1424
# File: docs/master/collections.md, line: 1425
#. type: Title ####
#, no-wrap
msgid "`min()` {.collection-method}"
msgstr "`min()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1427
# File: docs/master/collections.md, line: 1428
#. type: Plain text
msgid "The `min` method returns the minimum value of a given key:"
msgstr ""

# File: docs/8.x/collections.md, line: 1429
# File: docs/master/collections.md, line: 1430
#. type: Plain text
#, no-wrap
msgid "    $min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n"
msgstr "    $min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n"

# File: docs/8.x/collections.md, line: 1431
# File: docs/8.x/collections.md, line: 1799
# File: docs/master/collections.md, line: 1432
# File: docs/master/collections.md, line: 1800
#. type: Plain text
#, no-wrap
msgid "    // 10\n"
msgstr "    // 10\n"

# File: docs/8.x/collections.md, line: 1433
# File: docs/master/collections.md, line: 1434
#. type: Plain text
#, no-wrap
msgid "    $min = collect([1, 2, 3, 4, 5])->min();\n"
msgstr "    $min = collect([1, 2, 3, 4, 5])->min();\n"

# File: docs/8.x/collections.md, line: 1437
# File: docs/master/collections.md, line: 1438
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-mode\"></a>\n"
msgstr "<a name=\"method-mode\"></a>\n"

# File: docs/8.x/collections.md, line: 1437
# File: docs/master/collections.md, line: 1438
#. type: Title ####
#, no-wrap
msgid "`mode()` {.collection-method}"
msgstr "`mode()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1440
# File: docs/master/collections.md, line: 1441
#. type: Plain text
msgid "The `mode` method returns the [mode value](https://en.wikipedia.org/wiki/Mode_(statistics)) of a given key:"
msgstr ""

# File: docs/8.x/collections.md, line: 1447
# File: docs/master/collections.md, line: 1448
#. type: Plain text
#, no-wrap
msgid "    $mode = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->mode('foo');\n"
msgstr "    $mode = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->mode('foo');\n"

# File: docs/8.x/collections.md, line: 1449
# File: docs/master/collections.md, line: 1450
#. type: Plain text
#, no-wrap
msgid "    // [10]\n"
msgstr "    // [10]\n"

# File: docs/8.x/collections.md, line: 1451
# File: docs/master/collections.md, line: 1452
#. type: Plain text
#, no-wrap
msgid "    $mode = collect([1, 1, 2, 4])->mode();\n"
msgstr "    $mode = collect([1, 1, 2, 4])->mode();\n"

# File: docs/8.x/collections.md, line: 1453
# File: docs/master/collections.md, line: 1454
#. type: Plain text
#, no-wrap
msgid "    // [1]\n"
msgstr "    // [1]\n"

# File: docs/8.x/collections.md, line: 1455
# File: docs/master/collections.md, line: 1456
#. type: Plain text
#, no-wrap
msgid "    $mode = collect([1, 1, 2, 2])->mode();\n"
msgstr "    $mode = collect([1, 1, 2, 2])->mode();\n"

# File: docs/8.x/collections.md, line: 1457
# File: docs/8.x/collections.md, line: 1532
# File: docs/8.x/collections.md, line: 1682
# File: docs/8.x/collections.md, line: 1853
# File: docs/8.x/collections.md, line: 2348
# File: docs/8.x/collections.md, line: 2474
# File: docs/8.x/collections.md, line: 2484
# File: docs/8.x/collections.md, line: 2501
# File: docs/master/collections.md, line: 1458
# File: docs/master/collections.md, line: 1533
# File: docs/master/collections.md, line: 1683
# File: docs/master/collections.md, line: 1869
# File: docs/master/collections.md, line: 2364
# File: docs/master/collections.md, line: 2490
# File: docs/master/collections.md, line: 2500
# File: docs/master/collections.md, line: 2517
#. type: Plain text
#, no-wrap
msgid "    // [1, 2]\n"
msgstr "    // [1, 2]\n"

# File: docs/8.x/collections.md, line: 1459
# File: docs/master/collections.md, line: 1460
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-nth\"></a>\n"
msgstr "<a name=\"method-nth\"></a>\n"

# File: docs/8.x/collections.md, line: 1459
# File: docs/master/collections.md, line: 1460
#. type: Title ####
#, no-wrap
msgid "`nth()` {.collection-method}"
msgstr "`nth()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1462
# File: docs/master/collections.md, line: 1463
#. type: Plain text
msgid "The `nth` method creates a new collection consisting of every n-th element:"
msgstr ""

# File: docs/8.x/collections.md, line: 1464
# File: docs/master/collections.md, line: 1465
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n"
msgstr "    $collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n"

# File: docs/8.x/collections.md, line: 1466
# File: docs/master/collections.md, line: 1467
#. type: Plain text
#, no-wrap
msgid "    $collection->nth(4);\n"
msgstr "    $collection->nth(4);\n"

# File: docs/8.x/collections.md, line: 1468
# File: docs/master/collections.md, line: 1469
#. type: Plain text
#, no-wrap
msgid "    // ['a', 'e']\n"
msgstr "    // ['a', 'e']\n"

# File: docs/8.x/collections.md, line: 1470
# File: docs/master/collections.md, line: 1471
#. type: Plain text
msgid "You may optionally pass a starting offset as the second argument:"
msgstr ""

# File: docs/8.x/collections.md, line: 1472
# File: docs/master/collections.md, line: 1473
#. type: Plain text
#, no-wrap
msgid "    $collection->nth(4, 1);\n"
msgstr "    $collection->nth(4, 1);\n"

# File: docs/8.x/collections.md, line: 1474
# File: docs/master/collections.md, line: 1475
#. type: Plain text
#, no-wrap
msgid "    // ['b', 'f']\n"
msgstr "    // ['b', 'f']\n"

# File: docs/8.x/collections.md, line: 1476
# File: docs/master/collections.md, line: 1477
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-only\"></a>\n"
msgstr "<a name=\"method-only\"></a>\n"

# File: docs/8.x/collections.md, line: 1476
# File: docs/master/collections.md, line: 1477
#. type: Title ####
#, no-wrap
msgid "`only()` {.collection-method}"
msgstr "`only()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1479
# File: docs/master/collections.md, line: 1480
#. type: Plain text
msgid "The `only` method returns the items in the collection with the specified keys:"
msgstr ""

# File: docs/8.x/collections.md, line: 1486
# File: docs/master/collections.md, line: 1487
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'product_id' => 1,\n"
"        'name' => 'Desk',\n"
"        'price' => 100,\n"
"        'discount' => false\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'product_id' => 1,\n"
"        'name' => 'Desk',\n"
"        'price' => 100,\n"
"        'discount' => false\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1488
# File: docs/master/collections.md, line: 1489
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->only(['product_id', 'name']);\n"
msgstr "    $filtered = $collection->only(['product_id', 'name']);\n"

# File: docs/8.x/collections.md, line: 1492
# File: docs/master/collections.md, line: 1493
#. type: Plain text
#, no-wrap
msgid "    // ['product_id' => 1, 'name' => 'Desk']\n"
msgstr "    // ['product_id' => 1, 'name' => 'Desk']\n"

# File: docs/8.x/collections.md, line: 1494
# File: docs/master/collections.md, line: 1495
#. type: Plain text
msgid "For the inverse of `only`, see the [except](#method-except) method."
msgstr ""

# File: docs/8.x/collections.md, line: 1496
# File: docs/master/collections.md, line: 1497
#. type: Plain text
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-only).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 1498
# File: docs/master/collections.md, line: 1499
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pad\"></a>\n"
msgstr "<a name=\"method-pad\"></a>\n"

# File: docs/8.x/collections.md, line: 1498
# File: docs/master/collections.md, line: 1499
#. type: Title ####
#, no-wrap
msgid "`pad()` {.collection-method}"
msgstr "`pad()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1501
# File: docs/master/collections.md, line: 1502
#. type: Plain text
msgid "The `pad` method will fill the array with the given value until the array reaches the specified size. This method behaves like the [array_pad](https://secure.php.net/manual/en/function.array-pad.php) PHP function."
msgstr ""

# File: docs/8.x/collections.md, line: 1503
# File: docs/master/collections.md, line: 1504
#. type: Plain text
msgid "To pad to the left, you should specify a negative size. No padding will take place if the absolute value of the given size is less than or equal to the length of the array:"
msgstr ""

# File: docs/8.x/collections.md, line: 1505
# File: docs/master/collections.md, line: 1506
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['A', 'B', 'C']);\n"
msgstr "    $collection = collect(['A', 'B', 'C']);\n"

# File: docs/8.x/collections.md, line: 1507
# File: docs/master/collections.md, line: 1508
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->pad(5, 0);\n"
msgstr "    $collection = collect(['A', 'B', 'C']);\n"

# File: docs/8.x/collections.md, line: 1511
# File: docs/master/collections.md, line: 1512
#. type: Plain text
#, no-wrap
msgid "    // ['A', 'B', 'C', 0, 0]\n"
msgstr "    // ['A', 'B', 'C', 0, 0]\n"

# File: docs/8.x/collections.md, line: 1513
# File: docs/master/collections.md, line: 1514
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->pad(-5, 0);\n"
msgstr "    $filtered = $collection->pad(-5, 0);\n"

# File: docs/8.x/collections.md, line: 1517
# File: docs/master/collections.md, line: 1518
#. type: Plain text
#, no-wrap
msgid "    // [0, 0, 'A', 'B', 'C']\n"
msgstr "    // [0, 0, 'A', 'B', 'C']\n"

# File: docs/8.x/collections.md, line: 1519
# File: docs/master/collections.md, line: 1520
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-partition\"></a>\n"
msgstr "<a name=\"method-partition\"></a>\n"

# File: docs/8.x/collections.md, line: 1519
# File: docs/master/collections.md, line: 1520
#. type: Title ####
#, no-wrap
msgid "`partition()` {.collection-method}"
msgstr "`partition()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1522
# File: docs/master/collections.md, line: 1523
#. type: Plain text
msgid "The `partition` method may be combined with PHP array destructuring to separate elements that pass a given truth test from those that do not:"
msgstr ""

# File: docs/8.x/collections.md, line: 1524
# File: docs/master/collections.md, line: 1525
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6]);\n"
msgstr "    $collection = collect([1, 2, 3, 4, 5, 6]);\n"

# File: docs/8.x/collections.md, line: 1528
# File: docs/master/collections.md, line: 1529
#. type: Plain text
#, no-wrap
msgid "    [$underThree, $equalOrAboveThree] = $collection->partition(function ($i) {\n"
"        return $i < 3;\n"
"    });\n"
msgstr "    [$underThree, $equalOrAboveThree] = $collection->partition(function ($i) {\n"
"        return $i < 3;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1530
# File: docs/master/collections.md, line: 1531
#. type: Plain text
#, no-wrap
msgid "    $underThree->all();\n"
msgstr "    $underThree->all();\n"

# File: docs/8.x/collections.md, line: 1534
# File: docs/master/collections.md, line: 1535
#. type: Plain text
#, no-wrap
msgid "    $equalOrAboveThree->all();\n"
msgstr "    $equalOrAboveThree->all();\n"

# File: docs/8.x/collections.md, line: 1536
# File: docs/8.x/collections.md, line: 1778
# File: docs/master/collections.md, line: 1537
# File: docs/master/collections.md, line: 1779
#. type: Plain text
#, no-wrap
msgid "    // [3, 4, 5, 6]\n"
msgstr "    // [3, 4, 5, 6]\n"

# File: docs/8.x/collections.md, line: 1538
# File: docs/master/collections.md, line: 1539
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pipe\"></a>\n"
msgstr "<a name=\"method-pipe\"></a>\n"

# File: docs/8.x/collections.md, line: 1538
# File: docs/master/collections.md, line: 1539
#. type: Title ####
#, no-wrap
msgid "`pipe()` {.collection-method}"
msgstr "`pipe()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1541
# File: docs/master/collections.md, line: 1542
#. type: Plain text
msgid "The `pipe` method passes the collection to the given closure and returns the result of the executed closure:"
msgstr ""

# File: docs/8.x/collections.md, line: 1547
# File: docs/master/collections.md, line: 1548
#. type: Plain text
#, no-wrap
msgid "    $piped = $collection->pipe(function ($collection) {\n"
"        return $collection->sum();\n"
"    });\n"
msgstr "    $piped = $collection->pipe(function ($collection) {\n"
"        return $collection->sum();\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1549
# File: docs/8.x/collections.md, line: 1791
# File: docs/8.x/collections.md, line: 2436
# File: docs/master/collections.md, line: 1550
# File: docs/master/collections.md, line: 1792
# File: docs/master/collections.md, line: 2452
#. type: Plain text
#, no-wrap
msgid "    // 6\n"
msgstr "    // 6\n"

# File: docs/8.x/collections.md, line: 1551
# File: docs/master/collections.md, line: 1552
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pipeinto\"></a>\n"
msgstr "<a name=\"method-pipeinto\"></a>\n"

# File: docs/8.x/collections.md, line: 1551
# File: docs/master/collections.md, line: 1552
#. type: Title ####
#, no-wrap
msgid "`pipeInto()` {.collection-method}"
msgstr "`pipeInto()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1554
# File: docs/master/collections.md, line: 1555
#. type: Plain text
msgid "The `pipeInto` method creates a new instance of the given class and passes the collection into the constructor:"
msgstr ""

# File: docs/8.x/collections.md, line: 1561
# File: docs/master/collections.md, line: 1562
#. type: Plain text
#, no-wrap
msgid "    class ResourceCollection\n"
"    {\n"
"        /**\n"
"         * The Collection instance.\n"
"         */\n"
"        public $collection;\n"
msgstr "    class ResourceCollection\n"
"    {\n"
"        /**\n"
"         * The Collection instance.\n"
"         */\n"
"        public $collection;\n"

# File: docs/8.x/collections.md, line: 1573
# File: docs/master/collections.md, line: 1574
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Create a new ResourceCollection instance.\n"
"         *\n"
"         * @param  Collection  $collection\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Collection $collection)\n"
"        {\n"
"            $this->collection = $collection;\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Create a new ResourceCollection instance.\n"
"         *\n"
"         * @param  Collection  $collection\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Collection $collection)\n"
"        {\n"
"            $this->collection = $collection;\n"
"        }\n"
"    }\n"

# File: docs/8.x/collections.md, line: 1577
# File: docs/master/collections.md, line: 1578
#. type: Plain text
#, no-wrap
msgid "    $resource = $collection->pipeInto(ResourceCollection::class);\n"
msgstr "    $resource = $collection->pipeInto(ResourceCollection::class);\n"

# File: docs/8.x/collections.md, line: 1579
# File: docs/master/collections.md, line: 1580
#. type: Plain text
#, no-wrap
msgid "    $resource->collection->all();\n"
msgstr "    $resource->collection->all();\n"

# File: docs/8.x/collections.md, line: 1583
# File: docs/master/collections.md, line: 1584
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pipethrough\"></a>\n"
msgstr "<a name=\"method-pipethrough\"></a>\n"

# File: docs/8.x/collections.md, line: 1583
# File: docs/master/collections.md, line: 1584
#. type: Title ####
#, no-wrap
msgid "`pipeThrough()` {.collection-method}"
msgstr "`pipeThrough()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1586
# File: docs/master/collections.md, line: 1587
#. type: Plain text
msgid "The `pipeThrough` method passes the collection to the given array of closures and returns the result of the executed closures:"
msgstr ""

# File: docs/8.x/collections.md, line: 1597
# File: docs/master/collections.md, line: 1598
#. type: Plain text
#, no-wrap
msgid "    $result = $collection->pipeThrough([\n"
"        function ($collection) {\n"
"            return $collection->merge([4, 5]);\n"
"        },\n"
"        function ($collection) {\n"
"            return $collection->sum();\n"
"        },\n"
"    ]);\n"
msgstr "    $result = $collection->pipeThrough([\n"
"        function ($collection) {\n"
"            return $collection->merge([4, 5]);\n"
"        },\n"
"        function ($collection) {\n"
"            return $collection->sum();\n"
"        },\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1601
# File: docs/master/collections.md, line: 1602
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pluck\"></a>\n"
msgstr "<a name=\"method-pluck\"></a>\n"

# File: docs/8.x/collections.md, line: 1601
# File: docs/master/collections.md, line: 1602
#. type: Title ####
#, no-wrap
msgid "`pluck()` {.collection-method}"
msgstr "`pluck()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1604
# File: docs/master/collections.md, line: 1605
#. type: Plain text
msgid "The `pluck` method retrieves all of the values for a given key:"
msgstr ""

# File: docs/8.x/collections.md, line: 1611
# File: docs/master/collections.md, line: 1612
#. type: Plain text
#, no-wrap
msgid "    $plucked = $collection->pluck('name');\n"
msgstr "    $plucked = $collection->pluck('name');\n"

# File: docs/8.x/collections.md, line: 1613
# File: docs/8.x/collections.md, line: 1621
# File: docs/8.x/collections.md, line: 1638
# File: docs/8.x/collections.md, line: 1653
# File: docs/master/collections.md, line: 1614
# File: docs/master/collections.md, line: 1622
# File: docs/master/collections.md, line: 1639
# File: docs/master/collections.md, line: 1654
#. type: Plain text
#, no-wrap
msgid "    $plucked->all();\n"
msgstr "    $plucked->all();\n"

# File: docs/8.x/collections.md, line: 1615
# File: docs/master/collections.md, line: 1616
#. type: Plain text
#, no-wrap
msgid "    // ['Desk', 'Chair']\n"
msgstr "    // ['Desk', 'Chair']\n"

# File: docs/8.x/collections.md, line: 1617
# File: docs/master/collections.md, line: 1618
#. type: Plain text
msgid "You may also specify how you wish the resulting collection to be keyed:"
msgstr ""

# File: docs/8.x/collections.md, line: 1619
# File: docs/master/collections.md, line: 1620
#. type: Plain text
#, no-wrap
msgid "    $plucked = $collection->pluck('name', 'product_id');\n"
msgstr "    $plucked = $collection->pluck('name', 'product_id');\n"

# File: docs/8.x/collections.md, line: 1623
# File: docs/master/collections.md, line: 1624
#. type: Plain text
#, no-wrap
msgid "    // ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n"
msgstr "    // ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n"

# File: docs/8.x/collections.md, line: 1625
# File: docs/master/collections.md, line: 1626
#. type: Plain text
msgid "The `pluck` method also supports retrieving nested values using \"dot\" notation:"
msgstr ""

# File: docs/8.x/collections.md, line: 1634
# File: docs/master/collections.md, line: 1635
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        [\n"
"            'speakers' => [\n"
"                'first_day' => ['Rosa', 'Judith'],\n"
"                'second_day' => ['Angela', 'Kathleen'],\n"
"            ],\n"
"        ],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        [\n"
"            'speakers' => [\n"
"                'first_day' => ['Rosa', 'Judith'],\n"
"                'second_day' => ['Angela', 'Kathleen'],\n"
"            ],\n"
"        ],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1636
# File: docs/master/collections.md, line: 1637
#. type: Plain text
#, no-wrap
msgid "    $plucked = $collection->pluck('speakers.first_day');\n"
msgstr "    $plucked = $collection->pluck('speakers.first_day');\n"

# File: docs/8.x/collections.md, line: 1640
# File: docs/master/collections.md, line: 1641
#. type: Plain text
#, no-wrap
msgid "    // ['Rosa', 'Judith']\n"
msgstr "    // ['Rosa', 'Judith']\n"

# File: docs/8.x/collections.md, line: 1642
# File: docs/master/collections.md, line: 1643
#. type: Plain text
msgid "If duplicate keys exist, the last matching element will be inserted into the plucked collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1649
# File: docs/master/collections.md, line: 1650
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['brand' => 'Tesla',  'color' => 'red'],\n"
"        ['brand' => 'Pagani', 'color' => 'white'],\n"
"        ['brand' => 'Tesla',  'color' => 'black'],\n"
"        ['brand' => 'Pagani', 'color' => 'orange'],\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        ['brand' => 'Tesla',  'color' => 'red'],\n"
"        ['brand' => 'Pagani', 'color' => 'white'],\n"
"        ['brand' => 'Tesla',  'color' => 'black'],\n"
"        ['brand' => 'Pagani', 'color' => 'orange'],\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1651
# File: docs/master/collections.md, line: 1652
#. type: Plain text
#, no-wrap
msgid "    $plucked = $collection->pluck('color', 'brand');\n"
msgstr "    $plucked = $collection->pluck('color', 'brand');\n"

# File: docs/8.x/collections.md, line: 1655
# File: docs/master/collections.md, line: 1656
#. type: Plain text
#, no-wrap
msgid "    // ['Tesla' => 'black', 'Pagani' => 'orange']\n"
msgstr "    // ['Tesla' => 'black', 'Pagani' => 'orange']\n"

# File: docs/8.x/collections.md, line: 1657
# File: docs/master/collections.md, line: 1658
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pop\"></a>\n"
msgstr "<a name=\"method-pop\"></a>\n"

# File: docs/8.x/collections.md, line: 1657
# File: docs/master/collections.md, line: 1658
#. type: Title ####
#, no-wrap
msgid "`pop()` {.collection-method}"
msgstr "`pop()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1660
# File: docs/master/collections.md, line: 1661
#. type: Plain text
msgid "The `pop` method removes and returns the last item from the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1664
# File: docs/master/collections.md, line: 1665
#. type: Plain text
#, no-wrap
msgid "    $collection->pop();\n"
msgstr "    $collection->pop();\n"

# File: docs/8.x/collections.md, line: 1670
# File: docs/8.x/collections.md, line: 2636
# File: docs/8.x/collections.md, line: 2785
# File: docs/master/collections.md, line: 1671
# File: docs/master/collections.md, line: 2652
# File: docs/master/collections.md, line: 2801
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 3, 4]\n"
msgstr "    // [1, 2, 3, 4]\n"

# File: docs/8.x/collections.md, line: 1672
# File: docs/master/collections.md, line: 1673
#. type: Plain text
msgid "You may pass an integer to the `pop` method to remove and return multiple items from the end of a collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1676
# File: docs/master/collections.md, line: 1677
#. type: Plain text
#, no-wrap
msgid "    $collection->pop(3);\n"
msgstr "    $collection->pop(3);\n"

# File: docs/8.x/collections.md, line: 1678
# File: docs/master/collections.md, line: 1679
#. type: Plain text
#, no-wrap
msgid "    // collect([5, 4, 3])\n"
msgstr "    // collect([5, 4, 3])\n"

# File: docs/8.x/collections.md, line: 1684
# File: docs/master/collections.md, line: 1685
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-prepend\"></a>\n"
msgstr "<a name=\"method-prepend\"></a>\n"

# File: docs/8.x/collections.md, line: 1684
# File: docs/master/collections.md, line: 1685
#. type: Title ####
#, no-wrap
msgid "`prepend()` {.collection-method}"
msgstr "`prepend()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1687
# File: docs/master/collections.md, line: 1688
#. type: Plain text
msgid "The `prepend` method adds an item to the beginning of the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1691
# File: docs/master/collections.md, line: 1692
#. type: Plain text
#, no-wrap
msgid "    $collection->prepend(0);\n"
msgstr "    $collection->prepend(0);\n"

# File: docs/8.x/collections.md, line: 1695
# File: docs/master/collections.md, line: 1696
#. type: Plain text
#, no-wrap
msgid "    // [0, 1, 2, 3, 4, 5]\n"
msgstr "    // [0, 1, 2, 3, 4, 5]\n"

# File: docs/8.x/collections.md, line: 1697
# File: docs/master/collections.md, line: 1698
#. type: Plain text
msgid "You may also pass a second argument to specify the key of the prepended item:"
msgstr ""

# File: docs/8.x/collections.md, line: 1699
# File: docs/master/collections.md, line: 1700
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['one' => 1, 'two' => 2]);\n"
msgstr "    $collection = collect(['one' => 1, 'two' => 2]);\n"

# File: docs/8.x/collections.md, line: 1701
# File: docs/master/collections.md, line: 1702
#. type: Plain text
#, no-wrap
msgid "    $collection->prepend(0, 'zero');\n"
msgstr "    $collection->prepend(0, 'zero');\n"

# File: docs/8.x/collections.md, line: 1705
# File: docs/master/collections.md, line: 1706
#. type: Plain text
#, no-wrap
msgid "    // ['zero' => 0, 'one' => 1, 'two' => 2]\n"
msgstr "    // ['zero' => 0, 'one' => 1, 'two' => 2]\n"

# File: docs/8.x/collections.md, line: 1707
# File: docs/master/collections.md, line: 1708
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-pull\"></a>\n"
msgstr "<a name=\"method-pull\"></a>\n"

# File: docs/8.x/collections.md, line: 1707
# File: docs/master/collections.md, line: 1708
#. type: Title ####
#, no-wrap
msgid "`pull()` {.collection-method}"
msgstr "`pull()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1710
# File: docs/master/collections.md, line: 1711
#. type: Plain text
msgid "The `pull` method removes and returns an item from the collection by its key:"
msgstr ""

# File: docs/8.x/collections.md, line: 1712
# File: docs/master/collections.md, line: 1713
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);\n"
msgstr "    $collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);\n"

# File: docs/8.x/collections.md, line: 1714
# File: docs/master/collections.md, line: 1715
#. type: Plain text
#, no-wrap
msgid "    $collection->pull('name');\n"
msgstr "    $collection->pull('name');\n"

# File: docs/8.x/collections.md, line: 1716
# File: docs/master/collections.md, line: 1717
#. type: Plain text
#, no-wrap
msgid "    // 'Desk'\n"
msgstr "    // 'Desk'\n"

# File: docs/8.x/collections.md, line: 1720
# File: docs/master/collections.md, line: 1721
#. type: Plain text
#, no-wrap
msgid "    // ['product_id' => 'prod-100']\n"
msgstr "    // ['product_id' => 'prod-100']\n"

# File: docs/8.x/collections.md, line: 1722
# File: docs/master/collections.md, line: 1723
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-push\"></a>\n"
msgstr "<a name=\"method-push\"></a>\n"

# File: docs/8.x/collections.md, line: 1722
# File: docs/master/collections.md, line: 1723
#. type: Title ####
#, no-wrap
msgid "`push()` {.collection-method}"
msgstr "`push()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1725
# File: docs/master/collections.md, line: 1726
#. type: Plain text
msgid "The `push` method appends an item to the end of the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1729
# File: docs/master/collections.md, line: 1730
#. type: Plain text
#, no-wrap
msgid "    $collection->push(5);\n"
msgstr "    $collection->push(5);\n"

# File: docs/8.x/collections.md, line: 1733
# File: docs/8.x/collections.md, line: 2139
# File: docs/master/collections.md, line: 1734
# File: docs/master/collections.md, line: 2155
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 3, 4, 5]\n"
msgstr "    // [1, 2, 3, 4, 5]\n"

# File: docs/8.x/collections.md, line: 1735
# File: docs/master/collections.md, line: 1736
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-put\"></a>\n"
msgstr "<a name=\"method-put\"></a>\n"

# File: docs/8.x/collections.md, line: 1735
# File: docs/master/collections.md, line: 1736
#. type: Title ####
#, no-wrap
msgid "`put()` {.collection-method}"
msgstr "`put()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1738
# File: docs/master/collections.md, line: 1739
#. type: Plain text
msgid "The `put` method sets the given key and value in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1740
# File: docs/master/collections.md, line: 1741
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['product_id' => 1, 'name' => 'Desk']);\n"
msgstr "    $collection = collect(['product_id' => 1, 'name' => 'Desk']);\n"

# File: docs/8.x/collections.md, line: 1742
# File: docs/master/collections.md, line: 1743
#. type: Plain text
#, no-wrap
msgid "    $collection->put('price', 100);\n"
msgstr "    $collection->put('price', 100);\n"

# File: docs/8.x/collections.md, line: 1746
# File: docs/master/collections.md, line: 1747
#. type: Plain text
#, no-wrap
msgid "    // ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n"
msgstr "    // ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n"

# File: docs/8.x/collections.md, line: 1748
# File: docs/master/collections.md, line: 1749
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-random\"></a>\n"
msgstr "<a name=\"method-random\"></a>\n"

# File: docs/8.x/collections.md, line: 1748
# File: docs/master/collections.md, line: 1749
#. type: Title ####
#, no-wrap
msgid "`random()` {.collection-method}"
msgstr "`random()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1751
# File: docs/master/collections.md, line: 1752
#. type: Plain text
msgid "The `random` method returns a random item from the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1755
# File: docs/master/collections.md, line: 1756
#. type: Plain text
#, no-wrap
msgid "    $collection->random();\n"
msgstr "    $collection->random();\n"

# File: docs/8.x/collections.md, line: 1757
# File: docs/master/collections.md, line: 1758
#. type: Plain text
#, no-wrap
msgid "    // 4 - (retrieved randomly)\n"
msgstr "    // 4 - (隨機取得)\n"

# File: docs/8.x/collections.md, line: 1759
# File: docs/master/collections.md, line: 1760
#. type: Plain text
msgid "You may pass an integer to `random` to specify how many items you would like to randomly retrieve. A collection of items is always returned when explicitly passing the number of items you wish to receive:"
msgstr ""

# File: docs/8.x/collections.md, line: 1761
# File: docs/master/collections.md, line: 1762
#. type: Plain text
#, no-wrap
msgid "    $random = $collection->random(3);\n"
msgstr "    $random = $collection->random(3);\n"

# File: docs/8.x/collections.md, line: 1763
# File: docs/master/collections.md, line: 1764
#. type: Plain text
#, no-wrap
msgid "    $random->all();\n"
msgstr "    $random->all();\n"

# File: docs/8.x/collections.md, line: 1765
# File: docs/master/collections.md, line: 1766
#. type: Plain text
#, no-wrap
msgid "    // [2, 4, 5] - (retrieved randomly)\n"
msgstr "    // [2, 4, 5] - (隨機取得)\n"

# File: docs/8.x/collections.md, line: 1767
# File: docs/master/collections.md, line: 1768
#. type: Plain text
msgid "If the collection instance has fewer items than requested, the `random` method will throw an `InvalidArgumentException`."
msgstr ""

# File: docs/8.x/collections.md, line: 1769
# File: docs/master/collections.md, line: 1770
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-range\"></a>\n"
msgstr "<a name=\"method-range\"></a>\n"

# File: docs/8.x/collections.md, line: 1769
# File: docs/master/collections.md, line: 1770
#. type: Title ####
#, no-wrap
msgid "`range()` {.collection-method}"
msgstr "`range()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1772
# File: docs/master/collections.md, line: 1773
#. type: Plain text
msgid "The `range` method returns a collection containing integers between the specified range:"
msgstr ""

# File: docs/8.x/collections.md, line: 1774
# File: docs/master/collections.md, line: 1775
#. type: Plain text
#, no-wrap
msgid "    $collection = collect()->range(3, 6);\n"
msgstr "    $collection = collect()->range(3, 6);\n"

# File: docs/8.x/collections.md, line: 1780
# File: docs/master/collections.md, line: 1781
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-reduce\"></a>\n"
msgstr "<a name=\"method-reduce\"></a>\n"

# File: docs/8.x/collections.md, line: 1780
# File: docs/master/collections.md, line: 1781
#. type: Title ####
#, no-wrap
msgid "`reduce()` {.collection-method}"
msgstr "`reduce()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1783
# File: docs/master/collections.md, line: 1784
#. type: Plain text
msgid "The `reduce` method reduces the collection to a single value, passing the result of each iteration into the subsequent iteration:"
msgstr ""

# File: docs/8.x/collections.md, line: 1789
# File: docs/master/collections.md, line: 1790
#. type: Plain text
#, no-wrap
msgid "    $total = $collection->reduce(function ($carry, $item) {\n"
"        return $carry + $item;\n"
"    });\n"
msgstr "    $total = $collection->reduce(function ($carry, $item) {\n"
"        return $carry + $item;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1793
# File: docs/master/collections.md, line: 1794
#. type: Plain text
msgid "The value for `$carry` on the first iteration is `null`; however, you may specify its initial value by passing a second argument to `reduce`:"
msgstr ""

# File: docs/8.x/collections.md, line: 1797
# File: docs/master/collections.md, line: 1798
#. type: Plain text
#, no-wrap
msgid "    $collection->reduce(function ($carry, $item) {\n"
"        return $carry + $item;\n"
"    }, 4);\n"
msgstr "    $collection->reduce(function ($carry, $item) {\n"
"        return $carry + $item;\n"
"    }, 4);\n"

# File: docs/8.x/collections.md, line: 1801
# File: docs/master/collections.md, line: 1802
#. type: Plain text
msgid "The `reduce` method also passes array keys in associative collections to the given callback:"
msgstr ""

# File: docs/8.x/collections.md, line: 1807
# File: docs/master/collections.md, line: 1808
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'usd' => 1400,\n"
"        'gbp' => 1200,\n"
"        'eur' => 1000,\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'usd' => 1400,\n"
"        'gbp' => 1200,\n"
"        'eur' => 1000,\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1813
# File: docs/master/collections.md, line: 1814
#. type: Plain text
#, no-wrap
msgid "    $ratio = [\n"
"        'usd' => 1,\n"
"        'gbp' => 1.37,\n"
"        'eur' => 1.22,\n"
"    ];\n"
msgstr "    $ratio = [\n"
"        'usd' => 1,\n"
"        'gbp' => 1.37,\n"
"        'eur' => 1.22,\n"
"    ];\n"

# File: docs/8.x/collections.md, line: 1817
# File: docs/master/collections.md, line: 1818
#. type: Plain text
#, no-wrap
msgid "    $collection->reduce(function ($carry, $value, $key) use ($ratio) {\n"
"        return $carry + ($value * $ratio[$key]);\n"
"    });\n"
msgstr "    $collection->reduce(function ($carry, $value, $key) use ($ratio) {\n"
"        return $carry + ($value * $ratio[$key]);\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1819
# File: docs/master/collections.md, line: 1820
#. type: Plain text
#, no-wrap
msgid "    // 4264\n"
msgstr "    // 4264\n"

# File: docs/8.x/collections.md, line: 1821
# File: docs/master/collections.md, line: 1839
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-reduce-spread\"></a>\n"
msgstr "<a name=\"method-reduce-spread\"></a>\n"

# File: docs/8.x/collections.md, line: 1821
# File: docs/master/collections.md, line: 1839
#. type: Title ####
#, no-wrap
msgid "`reduceSpread()` {.collection-method}"
msgstr "`reduceSpread()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1824
# File: docs/master/collections.md, line: 1842
#. type: Plain text
msgid "The `reduceSpread` method reduces the collection to an array of values, passing the results of each iteration into the subsequent iteration. This method is similar to the `reduce` method; however, it can accept multiple initial values:"
msgstr ""

# File: docs/8.x/collections.md, line: 1825
#. type: Code fence info string
#, no-wrap
msgid "php"
msgstr "php"

# File: docs/8.x/collections.md, line: 1825
#. type: Plain text
#, no-wrap
msgid "[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"        ->get()\n"
"        ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"            if ($creditsRemaining >= $image->creditsRequired()) {\n"
"                $batch->push($image);\n\n"
"                $creditsRemaining -= $image->creditsRequired();\n"
"            }\n\n"
"            return [$creditsRemaining, $batch];\n"
"        }, $creditsAvailable, collect());\n"
msgstr "[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"        ->get()\n"
"        ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"            if ($creditsRemaining >= $image->creditsRequired()) {\n"
"                $batch->push($image);\n\n"
"                $creditsRemaining -= $image->creditsRequired();\n"
"            }\n\n"
"            return [$creditsRemaining, $batch];\n"
"        }, $creditsAvailable, collect());\n"

# File: docs/8.x/collections.md, line: 1840
# File: docs/master/collections.md, line: 1856
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-reject\"></a>\n"
msgstr "<a name=\"method-reject\"></a>\n"

# File: docs/8.x/collections.md, line: 1840
# File: docs/master/collections.md, line: 1856
#. type: Title ####
#, no-wrap
msgid "`reject()` {.collection-method}"
msgstr "`reject()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1843
# File: docs/master/collections.md, line: 1859
#. type: Plain text
msgid "The `reject` method filters the collection using the given closure. The closure should return `true` if the item should be removed from the resulting collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1849
# File: docs/master/collections.md, line: 1865
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->reject(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr "    $filtered = $collection->reject(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1855
# File: docs/master/collections.md, line: 1871
#. type: Plain text
msgid "For the inverse of the `reject` method, see the [`filter`](#method-filter) method."
msgstr ""

# File: docs/8.x/collections.md, line: 1857
# File: docs/master/collections.md, line: 1873
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-replace\"></a>\n"
msgstr "<a name=\"method-replace\"></a>\n"

# File: docs/8.x/collections.md, line: 1857
# File: docs/master/collections.md, line: 1873
#. type: Title ####
#, no-wrap
msgid "`replace()` {.collection-method}"
msgstr "`replace()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1860
# File: docs/master/collections.md, line: 1876
#. type: Plain text
msgid "The `replace` method behaves similarly to `merge`; however, in addition to overwriting matching items that have string keys, the `replace` method will also overwrite items in the collection that have matching numeric keys:"
msgstr ""

# File: docs/8.x/collections.md, line: 1862
# File: docs/master/collections.md, line: 1878
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['Taylor', 'Abigail', 'James']);\n"
msgstr "    $collection = collect(['Taylor', 'Abigail', 'James']);\n"

# File: docs/8.x/collections.md, line: 1864
# File: docs/master/collections.md, line: 1880
#. type: Plain text
#, no-wrap
msgid "    $replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n"
msgstr "    $replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n"

# File: docs/8.x/collections.md, line: 1866
# File: docs/8.x/collections.md, line: 1890
# File: docs/master/collections.md, line: 1882
# File: docs/master/collections.md, line: 1906
#. type: Plain text
#, no-wrap
msgid "    $replaced->all();\n"
msgstr "    $replaced->all();\n"

# File: docs/8.x/collections.md, line: 1868
# File: docs/master/collections.md, line: 1884
#. type: Plain text
#, no-wrap
msgid "    // ['Taylor', 'Victoria', 'James', 'Finn']\n"
msgstr "    // ['Taylor', 'Victoria', 'James', 'Finn']\n"

# File: docs/8.x/collections.md, line: 1870
# File: docs/master/collections.md, line: 1886
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-replacerecursive\"></a>\n"
msgstr "<a name=\"method-replacerecursive\"></a>\n"

# File: docs/8.x/collections.md, line: 1870
# File: docs/master/collections.md, line: 1886
#. type: Title ####
#, no-wrap
msgid "`replaceRecursive()` {.collection-method}"
msgstr "`replaceRecursive()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1873
# File: docs/master/collections.md, line: 1889
#. type: Plain text
msgid "This method works like `replace`, but it will recur into arrays and apply the same replacement process to the inner values:"
msgstr ""

# File: docs/8.x/collections.md, line: 1883
# File: docs/master/collections.md, line: 1899
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'Taylor',\n"
"        'Abigail',\n"
"        [\n"
"            'James',\n"
"            'Victoria',\n"
"            'Finn'\n"
"        ]\n"
"    ]);\n"
msgstr "    $collection = collect([\n"
"        'Taylor',\n"
"        'Abigail',\n"
"        [\n"
"            'James',\n"
"            'Victoria',\n"
"            'Finn'\n"
"        ]\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1888
# File: docs/master/collections.md, line: 1904
#. type: Plain text
#, no-wrap
msgid "    $replaced = $collection->replaceRecursive([\n"
"        'Charlie',\n"
"        2 => [1 => 'King']\n"
"    ]);\n"
msgstr "    $replaced = $collection->replaceRecursive([\n"
"        'Charlie',\n"
"        2 => [1 => 'King']\n"
"    ]);\n"

# File: docs/8.x/collections.md, line: 1892
# File: docs/master/collections.md, line: 1908
#. type: Plain text
#, no-wrap
msgid "    // ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n"
msgstr "    // ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n"

# File: docs/8.x/collections.md, line: 1894
# File: docs/master/collections.md, line: 1910
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-reverse\"></a>\n"
msgstr "<a name=\"method-reverse\"></a>\n"

# File: docs/8.x/collections.md, line: 1894
# File: docs/master/collections.md, line: 1910
#. type: Title ####
#, no-wrap
msgid "`reverse()` {.collection-method}"
msgstr "`reverse()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1897
# File: docs/master/collections.md, line: 1913
#. type: Plain text
msgid "The `reverse` method reverses the order of the collection's items, preserving the original keys:"
msgstr ""

# File: docs/8.x/collections.md, line: 1899
# File: docs/master/collections.md, line: 1915
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['a', 'b', 'c', 'd', 'e']);\n"
msgstr "    $collection = collect(['a', 'b', 'c', 'd', 'e']);\n"

# File: docs/8.x/collections.md, line: 1901
# File: docs/master/collections.md, line: 1917
#. type: Plain text
#, no-wrap
msgid "    $reversed = $collection->reverse();\n"
msgstr "    $reversed = $collection->reverse();\n"

# File: docs/8.x/collections.md, line: 1903
# File: docs/master/collections.md, line: 1919
#. type: Plain text
#, no-wrap
msgid "    $reversed->all();\n"
msgstr "    $reversed->all();\n"

# File: docs/8.x/collections.md, line: 1913
# File: docs/master/collections.md, line: 1929
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            4 => 'e',\n"
"            3 => 'd',\n"
"            2 => 'c',\n"
"            1 => 'b',\n"
"            0 => 'a',\n"
"        ]\n"
"    */\n"
msgstr "    /*\n"
"        [\n"
"            4 => 'e',\n"
"            3 => 'd',\n"
"            2 => 'c',\n"
"            1 => 'b',\n"
"            0 => 'a',\n"
"        ]\n"
"    */\n"

# File: docs/8.x/collections.md, line: 1915
# File: docs/master/collections.md, line: 1931
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-search\"></a>\n"
msgstr "<a name=\"method-search\"></a>\n"

# File: docs/8.x/collections.md, line: 1915
# File: docs/master/collections.md, line: 1931
#. type: Title ####
#, no-wrap
msgid "`search()` {.collection-method}"
msgstr "`search()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1918
# File: docs/master/collections.md, line: 1934
#. type: Plain text
msgid "The `search` method searches the collection for the given value and returns its key if found. If the item is not found, `false` is returned:"
msgstr ""

# File: docs/8.x/collections.md, line: 1920
# File: docs/master/collections.md, line: 1936
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([2, 4, 6, 8]);\n"
msgstr "    $collection = collect([2, 4, 6, 8]);\n"

# File: docs/8.x/collections.md, line: 1922
# File: docs/master/collections.md, line: 1938
#. type: Plain text
#, no-wrap
msgid "    $collection->search(4);\n"
msgstr "    $collection->search(4);\n"

# File: docs/8.x/collections.md, line: 1926
# File: docs/master/collections.md, line: 1942
#. type: Plain text
msgid "The search is done using a \"loose\" comparison, meaning a string with an integer value will be considered equal to an integer of the same value. To use \"strict\" comparison, pass `true` as the second argument to the method:"
msgstr ""

# File: docs/8.x/collections.md, line: 1928
# File: docs/master/collections.md, line: 1944
#. type: Plain text
#, no-wrap
msgid "    collect([2, 4, 6, 8])->search('4', $strict = true);\n"
msgstr "    collect([2, 4, 6, 8])->search('4', $strict = true);\n"

# File: docs/8.x/collections.md, line: 1932
# File: docs/master/collections.md, line: 1948
#. type: Plain text
msgid "Alternatively, you may provide your own closure to search for the first item that passes a given truth test:"
msgstr ""

# File: docs/8.x/collections.md, line: 1936
# File: docs/master/collections.md, line: 1952
#. type: Plain text
#, no-wrap
msgid "    collect([2, 4, 6, 8])->search(function ($item, $key) {\n"
"        return $item > 5;\n"
"    });\n"
msgstr "    collect([2, 4, 6, 8])->search(function ($item, $key) {\n"
"        return $item > 5;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1940
# File: docs/master/collections.md, line: 1956
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-shift\"></a>\n"
msgstr "<a name=\"method-shift\"></a>\n"

# File: docs/8.x/collections.md, line: 1940
# File: docs/master/collections.md, line: 1956
#. type: Title ####
#, no-wrap
msgid "`shift()` {.collection-method}"
msgstr "`shift()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1943
# File: docs/master/collections.md, line: 1959
#. type: Plain text
msgid "The `shift` method removes and returns the first item from the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1947
# File: docs/master/collections.md, line: 1963
#. type: Plain text
#, no-wrap
msgid "    $collection->shift();\n"
msgstr "    $collection->shift();\n"

# File: docs/8.x/collections.md, line: 1953
# File: docs/master/collections.md, line: 1969
#. type: Plain text
#, no-wrap
msgid "    // [2, 3, 4, 5]\n"
msgstr "    // [2, 3, 4, 5]\n"

# File: docs/8.x/collections.md, line: 1955
# File: docs/master/collections.md, line: 1971
#. type: Plain text
msgid "You may pass an integer to the `shift` method to remove and return multiple items from the beginning of a collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1959
# File: docs/master/collections.md, line: 1975
#. type: Plain text
#, no-wrap
msgid "    $collection->shift(3);\n"
msgstr "    $collection->shift(3);\n"

# File: docs/8.x/collections.md, line: 1961
# File: docs/master/collections.md, line: 1977
#. type: Plain text
#, no-wrap
msgid "    // collect([1, 2, 3])\n"
msgstr "    // collect([1, 2, 3])\n"

# File: docs/8.x/collections.md, line: 1965
# File: docs/8.x/collections.md, line: 2459
# File: docs/master/collections.md, line: 1981
# File: docs/master/collections.md, line: 2475
#. type: Plain text
#, no-wrap
msgid "    // [4, 5]\n"
msgstr "    // [4, 5]\n"

# File: docs/8.x/collections.md, line: 1967
# File: docs/master/collections.md, line: 1983
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-shuffle\"></a>\n"
msgstr "<a name=\"method-shuffle\"></a>\n"

# File: docs/8.x/collections.md, line: 1967
# File: docs/master/collections.md, line: 1983
#. type: Title ####
#, no-wrap
msgid "`shuffle()` {.collection-method}"
msgstr "`shuffle()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1970
# File: docs/master/collections.md, line: 1986
#. type: Plain text
msgid "The `shuffle` method randomly shuffles the items in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1974
# File: docs/master/collections.md, line: 1990
#. type: Plain text
#, no-wrap
msgid "    $shuffled = $collection->shuffle();\n"
msgstr "    $shuffled = $collection->shuffle();\n"

# File: docs/8.x/collections.md, line: 1976
# File: docs/master/collections.md, line: 1992
#. type: Plain text
#, no-wrap
msgid "    $shuffled->all();\n"
msgstr "    $shuffled->all();\n"

# File: docs/8.x/collections.md, line: 1978
# File: docs/master/collections.md, line: 1994
#. type: Plain text
#, no-wrap
msgid "    // [3, 2, 5, 1, 4] - (generated randomly)\n"
msgstr "    // [3, 2, 5, 1, 4] - (隨機產生)\n"

# File: docs/8.x/collections.md, line: 1980
# File: docs/master/collections.md, line: 1996
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sliding\"></a>\n"
msgstr "<a name=\"method-sliding\"></a>\n"

# File: docs/8.x/collections.md, line: 1980
# File: docs/master/collections.md, line: 1996
#. type: Title ####
#, no-wrap
msgid "`sliding()` {.collection-method}"
msgstr "`sliding()` {.collection-method}"

# File: docs/8.x/collections.md, line: 1983
# File: docs/master/collections.md, line: 1999
#. type: Plain text
msgid "The `sliding` method returns a new collection of chunks representing a \"sliding window\" view of the items in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 1987
# File: docs/master/collections.md, line: 2003
#. type: Plain text
#, no-wrap
msgid "    $chunks = $collection->sliding(2);\n"
msgstr "    $chunks = $collection->sliding(2);\n"

# File: docs/8.x/collections.md, line: 1989
# File: docs/8.x/collections.md, line: 2005
# File: docs/master/collections.md, line: 2005
# File: docs/master/collections.md, line: 2021
#. type: Plain text
#, no-wrap
msgid "    $chunks->toArray();\n"
msgstr "    $chunks->toArray();\n"

# File: docs/8.x/collections.md, line: 1991
# File: docs/master/collections.md, line: 2007
#. type: Plain text
#, no-wrap
msgid "    // [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
msgstr "    // [[1, 2], [2, 3], [3, 4], [4, 5]]\n"

# File: docs/8.x/collections.md, line: 1993
# File: docs/master/collections.md, line: 2009
#. type: Plain text
msgid "This is especially useful in conjunction with the [`eachSpread`](#method-eachspread) method:"
msgstr ""

# File: docs/8.x/collections.md, line: 1997
# File: docs/master/collections.md, line: 2013
#. type: Plain text
#, no-wrap
msgid "    $transactions->sliding(2)->eachSpread(function ($previous, $current) {\n"
"        $current->total = $previous->total + $current->amount;\n"
"    });\n"
msgstr "    $transactions->sliding(2)->eachSpread(function ($previous, $current) {\n"
"        $current->total = $previous->total + $current->amount;\n"
"    });\n"

# File: docs/8.x/collections.md, line: 1999
# File: docs/master/collections.md, line: 2015
#. type: Plain text
msgid "You may optionally pass a second \"step\" value, which determines the distance between the first item of every chunk:"
msgstr ""

# File: docs/8.x/collections.md, line: 2003
# File: docs/master/collections.md, line: 2019
#. type: Plain text
#, no-wrap
msgid "    $chunks = $collection->sliding(3, step: 2);\n"
msgstr "    $chunks = $collection->sliding(3, step: 2);\n"

# File: docs/8.x/collections.md, line: 2007
# File: docs/master/collections.md, line: 2023
#. type: Plain text
#, no-wrap
msgid "    // [[1, 2, 3], [3, 4, 5]]\n"
msgstr "    // [[1, 2, 3], [3, 4, 5]]\n"

# File: docs/8.x/collections.md, line: 2009
# File: docs/master/collections.md, line: 2025
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-skip\"></a>\n"
msgstr "<a name=\"method-skip\"></a>\n"

# File: docs/8.x/collections.md, line: 2009
# File: docs/master/collections.md, line: 2025
#. type: Title ####
#, no-wrap
msgid "`skip()` {.collection-method}"
msgstr "`skip()` {.collection-method}"

# File: docs/8.x/collections.md, line: 2012
# File: docs/master/collections.md, line: 2028
#. type: Plain text
msgid "The `skip` method returns a new collection, with the given number of elements removed from the beginning of the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2014
# File: docs/8.x/collections.md, line: 2071
# File: docs/8.x/collections.md, line: 2396
# File: docs/master/collections.md, line: 2030
# File: docs/master/collections.md, line: 2087
# File: docs/master/collections.md, line: 2412
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
msgstr "    $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"

# File: docs/8.x/collections.md, line: 2016
# File: docs/master/collections.md, line: 2032
#. type: Plain text
#, no-wrap
msgid "    $collection = $collection->skip(4);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2020
# File: docs/8.x/collections.md, line: 2077
# File: docs/master/collections.md, line: 2036
# File: docs/master/collections.md, line: 2093
#. type: Plain text
#, no-wrap
msgid "    // [5, 6, 7, 8, 9, 10]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2022
# File: docs/master/collections.md, line: 2038
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-skipuntil\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2022
# File: docs/master/collections.md, line: 2038
#. type: Title ####
#, no-wrap
msgid "`skipUntil()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2025
# File: docs/master/collections.md, line: 2041
#. type: Plain text
msgid "The `skipUntil` method skips over items from the collection until the given callback returns `true` and then returns the remaining items in the collection as a new collection instance:"
msgstr ""

# File: docs/8.x/collections.md, line: 2031
# File: docs/master/collections.md, line: 2047
#. type: Plain text
#, no-wrap
msgid "    $subset = $collection->skipUntil(function ($item) {\n"
"        return $item >= 3;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2033
# File: docs/8.x/collections.md, line: 2043
# File: docs/8.x/collections.md, line: 2060
# File: docs/8.x/collections.md, line: 2472
# File: docs/8.x/collections.md, line: 2482
# File: docs/8.x/collections.md, line: 2499
# File: docs/master/collections.md, line: 2049
# File: docs/master/collections.md, line: 2059
# File: docs/master/collections.md, line: 2076
# File: docs/master/collections.md, line: 2488
# File: docs/master/collections.md, line: 2498
# File: docs/master/collections.md, line: 2515
#. type: Plain text
#, no-wrap
msgid "    $subset->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2037
# File: docs/master/collections.md, line: 2053
#. type: Plain text
msgid "You may also pass a simple value to the `skipUntil` method to skip all items until the given value is found:"
msgstr ""

# File: docs/8.x/collections.md, line: 2041
# File: docs/master/collections.md, line: 2057
#. type: Plain text
#, no-wrap
msgid "    $subset = $collection->skipUntil(3);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2047
# File: docs/master/collections.md, line: 2063
#. type: Plain text
#, no-wrap
msgid "> {note} If the given value is not found or the callback never returns `true`, the `skipUntil` method will return an empty collection.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2049
# File: docs/master/collections.md, line: 2065
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-skipwhile\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2049
# File: docs/master/collections.md, line: 2065
#. type: Title ####
#, no-wrap
msgid "`skipWhile()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2052
# File: docs/master/collections.md, line: 2068
#. type: Plain text
msgid "The `skipWhile` method skips over items from the collection while the given callback returns `true` and then returns the remaining items in the collection as a new collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2058
# File: docs/master/collections.md, line: 2074
#. type: Plain text
#, no-wrap
msgid "    $subset = $collection->skipWhile(function ($item) {\n"
"        return $item <= 3;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2062
# File: docs/master/collections.md, line: 2078
#. type: Plain text
#, no-wrap
msgid "    // [4]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2064
# File: docs/master/collections.md, line: 2080
#. type: Plain text
#, no-wrap
msgid "> {note} If the callback never returns `false`, the `skipWhile` method will return an empty collection.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2066
# File: docs/master/collections.md, line: 2082
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-slice\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2066
# File: docs/master/collections.md, line: 2082
#. type: Title ####
#, no-wrap
msgid "`slice()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2069
# File: docs/master/collections.md, line: 2085
#. type: Plain text
msgid "The `slice` method returns a slice of the collection starting at the given index:"
msgstr ""

# File: docs/8.x/collections.md, line: 2073
# File: docs/master/collections.md, line: 2089
#. type: Plain text
#, no-wrap
msgid "    $slice = $collection->slice(4);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2075
# File: docs/8.x/collections.md, line: 2083
# File: docs/master/collections.md, line: 2091
# File: docs/master/collections.md, line: 2099
#. type: Plain text
#, no-wrap
msgid "    $slice->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2079
# File: docs/master/collections.md, line: 2095
#. type: Plain text
msgid "If you would like to limit the size of the returned slice, pass the desired size as the second argument to the method:"
msgstr ""

# File: docs/8.x/collections.md, line: 2081
# File: docs/master/collections.md, line: 2097
#. type: Plain text
#, no-wrap
msgid "    $slice = $collection->slice(4, 2);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2085
# File: docs/master/collections.md, line: 2101
#. type: Plain text
#, no-wrap
msgid "    // [5, 6]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2087
# File: docs/master/collections.md, line: 2103
#. type: Plain text
msgid "The returned slice will preserve keys by default. If you do not wish to preserve the original keys, you can use the [`values`](#method-values) method to reindex them."
msgstr ""

# File: docs/8.x/collections.md, line: 2089
# File: docs/master/collections.md, line: 2105
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sole\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2089
# File: docs/master/collections.md, line: 2105
#. type: Title ####
#, no-wrap
msgid "`sole()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2092
# File: docs/master/collections.md, line: 2108
#. type: Plain text
msgid "The `sole` method returns the first element in the collection that passes a given truth test, but only if the truth test matches exactly one element:"
msgstr ""

# File: docs/8.x/collections.md, line: 2096
# File: docs/master/collections.md, line: 2112
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4])->sole(function ($value, $key) {\n"
"        return $value === 2;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2100
# File: docs/master/collections.md, line: 2116
#. type: Plain text
msgid "You may also pass a key / value pair to the `sole` method, which will return the first element in the collection that matches the given pair, but only if it exactly one element matches:"
msgstr ""

# File: docs/8.x/collections.md, line: 2107
# File: docs/master/collections.md, line: 2123
#. type: Plain text
#, no-wrap
msgid "    $collection->sole('product', 'Chair');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2109
# File: docs/master/collections.md, line: 2125
#. type: Plain text
#, no-wrap
msgid "    // ['product' => 'Chair', 'price' => 100]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2111
# File: docs/master/collections.md, line: 2127
#. type: Plain text
msgid "Alternatively, you may also call the `sole` method with no argument to get the first element in the collection if there is only one element:"
msgstr ""

# File: docs/8.x/collections.md, line: 2115
# File: docs/master/collections.md, line: 2131
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2117
# File: docs/master/collections.md, line: 2133
#. type: Plain text
#, no-wrap
msgid "    $collection->sole();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2119
# File: docs/master/collections.md, line: 2135
#. type: Plain text
#, no-wrap
msgid "    // ['product' => 'Desk', 'price' => 200]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2121
# File: docs/master/collections.md, line: 2137
#. type: Plain text
msgid "If there are no elements in the collection that should be returned by the `sole` method, an `\\Illuminate\\Collections\\ItemNotFoundException` exception will be thrown. If there is more than one element that should be returned, an `\\Illuminate\\Collections\\MultipleItemsFoundException` will be thrown."
msgstr ""

# File: docs/8.x/collections.md, line: 2123
# File: docs/master/collections.md, line: 2139
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-some\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2123
# File: docs/master/collections.md, line: 2139
#. type: Title ####
#, no-wrap
msgid "`some()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2126
# File: docs/master/collections.md, line: 2142
#. type: Plain text
msgid "Alias for the [`contains`](#method-contains) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2128
# File: docs/master/collections.md, line: 2144
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sort\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2128
# File: docs/master/collections.md, line: 2144
#. type: Title ####
#, no-wrap
msgid "`sort()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2131
# File: docs/master/collections.md, line: 2147
#. type: Plain text
msgid "The `sort` method sorts the collection. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

# File: docs/8.x/collections.md, line: 2133
# File: docs/8.x/collections.md, line: 2270
# File: docs/master/collections.md, line: 2149
# File: docs/master/collections.md, line: 2286
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([5, 3, 1, 2, 4]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2135
# File: docs/master/collections.md, line: 2151
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sort();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2137
# File: docs/8.x/collections.md, line: 2158
# File: docs/8.x/collections.md, line: 2178
# File: docs/8.x/collections.md, line: 2200
# File: docs/8.x/collections.md, line: 2224
# File: docs/8.x/collections.md, line: 2249
# File: docs/8.x/collections.md, line: 2274
# File: docs/master/collections.md, line: 2153
# File: docs/master/collections.md, line: 2174
# File: docs/master/collections.md, line: 2194
# File: docs/master/collections.md, line: 2216
# File: docs/master/collections.md, line: 2240
# File: docs/master/collections.md, line: 2265
# File: docs/master/collections.md, line: 2290
#. type: Plain text
#, no-wrap
msgid "    $sorted->values()->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2141
# File: docs/master/collections.md, line: 2157
#. type: Plain text
msgid "If your sorting needs are more advanced, you may pass a callback to `sort` with your own algorithm. Refer to the PHP documentation on [`uasort`](https://secure.php.net/manual/en/function.uasort.php#refsect1-function.uasort-parameters), which is what the collection's `sort` method calls utilizes internally."
msgstr ""

# File: docs/8.x/collections.md, line: 2143
# File: docs/master/collections.md, line: 2159
#. type: Plain text
#, no-wrap
msgid "> {tip} If you need to sort a collection of nested arrays or objects, see the [`sortBy`](#method-sortby) and [`sortByDesc`](#method-sortbydesc) methods.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2145
# File: docs/master/collections.md, line: 2161
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sortby\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2145
# File: docs/master/collections.md, line: 2161
#. type: Title ####
#, no-wrap
msgid "`sortBy()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2148
# File: docs/master/collections.md, line: 2164
#. type: Plain text
msgid "The `sortBy` method sorts the collection by the given key. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

# File: docs/8.x/collections.md, line: 2154
# File: docs/master/collections.md, line: 2170
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Desk', 'price' => 200],\n"
"        ['name' => 'Chair', 'price' => 100],\n"
"        ['name' => 'Bookcase', 'price' => 150],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2156
# File: docs/master/collections.md, line: 2172
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortBy('price');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2166
# File: docs/master/collections.md, line: 2182
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Chair', 'price' => 100],\n"
"            ['name' => 'Bookcase', 'price' => 150],\n"
"            ['name' => 'Desk', 'price' => 200],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2168
# File: docs/master/collections.md, line: 2184
#. type: Plain text
msgid "The `sortBy` method accepts [sort flags](https://www.php.net/manual/en/function.sort.php) as its second argument:"
msgstr ""

# File: docs/8.x/collections.md, line: 2174
# File: docs/master/collections.md, line: 2190
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['title' => 'Item 1'],\n"
"        ['title' => 'Item 12'],\n"
"        ['title' => 'Item 3'],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2176
# File: docs/master/collections.md, line: 2192
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortBy('title', SORT_NATURAL);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2186
# File: docs/master/collections.md, line: 2202
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['title' => 'Item 1'],\n"
"            ['title' => 'Item 3'],\n"
"            ['title' => 'Item 12'],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2188
# File: docs/master/collections.md, line: 2204
#. type: Plain text
msgid "Alternatively, you may pass your own closure to determine how to sort the collection's values:"
msgstr ""

# File: docs/8.x/collections.md, line: 2194
# File: docs/master/collections.md, line: 2210
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2198
# File: docs/master/collections.md, line: 2214
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortBy(function ($product, $key) {\n"
"        return count($product['colors']);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2208
# File: docs/master/collections.md, line: 2224
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Chair', 'colors' => ['Black']],\n"
"            ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"            ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2210
# File: docs/master/collections.md, line: 2226
#. type: Plain text
msgid "If you would like to sort your collection by multiple attributes, you may pass an array of sort operations to the `sortBy` method. Each sort operation should be an array consisting of the attribute that you wish to sort by and the direction of the desired sort:"
msgstr ""

# File: docs/8.x/collections.md, line: 2217
# File: docs/8.x/collections.md, line: 2242
# File: docs/master/collections.md, line: 2233
# File: docs/master/collections.md, line: 2258
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2222
# File: docs/master/collections.md, line: 2238
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortBy([\n"
"        ['name', 'asc'],\n"
"        ['age', 'desc'],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2233
# File: docs/8.x/collections.md, line: 2258
# File: docs/master/collections.md, line: 2249
# File: docs/master/collections.md, line: 2274
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Abigail Otwell', 'age' => 32],\n"
"            ['name' => 'Abigail Otwell', 'age' => 30],\n"
"            ['name' => 'Taylor Otwell', 'age' => 36],\n"
"            ['name' => 'Taylor Otwell', 'age' => 34],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2235
# File: docs/master/collections.md, line: 2251
#. type: Plain text
msgid "When sorting a collection by multiple attributes, you may also provide closures that define each sort operation:"
msgstr ""

# File: docs/8.x/collections.md, line: 2247
# File: docs/master/collections.md, line: 2263
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortBy([\n"
"        fn ($a, $b) => $a['name'] <=> $b['name'],\n"
"        fn ($a, $b) => $b['age'] <=> $a['age'],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2260
# File: docs/master/collections.md, line: 2276
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sortbydesc\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2260
# File: docs/master/collections.md, line: 2276
#. type: Title ####
#, no-wrap
msgid "`sortByDesc()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2263
# File: docs/master/collections.md, line: 2279
#. type: Plain text
msgid "This method has the same signature as the [`sortBy`](#method-sortby) method, but will sort the collection in the opposite order."
msgstr ""

# File: docs/8.x/collections.md, line: 2265
# File: docs/master/collections.md, line: 2281
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sortdesc\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2265
# File: docs/master/collections.md, line: 2281
#. type: Title ####
#, no-wrap
msgid "`sortDesc()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2268
# File: docs/master/collections.md, line: 2284
#. type: Plain text
msgid "This method will sort the collection in the opposite order as the [`sort`](#method-sort) method:"
msgstr ""

# File: docs/8.x/collections.md, line: 2272
# File: docs/master/collections.md, line: 2288
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortDesc();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2276
# File: docs/master/collections.md, line: 2292
#. type: Plain text
#, no-wrap
msgid "    // [5, 4, 3, 2, 1]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2278
# File: docs/master/collections.md, line: 2294
#. type: Plain text
msgid "Unlike `sort`, you may not pass a closure to `sortDesc`. Instead, you should use the [`sort`](#method-sort) method and invert your comparison."
msgstr ""

# File: docs/8.x/collections.md, line: 2280
# File: docs/master/collections.md, line: 2296
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sortkeys\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2280
# File: docs/master/collections.md, line: 2296
#. type: Title ####
#, no-wrap
msgid "`sortKeys()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2283
# File: docs/master/collections.md, line: 2299
#. type: Plain text
msgid "The `sortKeys` method sorts the collection by the keys of the underlying associative array:"
msgstr ""

# File: docs/8.x/collections.md, line: 2289
# File: docs/master/collections.md, line: 2305
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'id' => 22345,\n"
"        'first' => 'John',\n"
"        'last' => 'Doe',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2291
# File: docs/master/collections.md, line: 2307
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortKeys();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2293
# File: docs/8.x/collections.md, line: 2321
# File: docs/master/collections.md, line: 2309
# File: docs/master/collections.md, line: 2337
#. type: Plain text
#, no-wrap
msgid "    $sorted->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2301
# File: docs/master/collections.md, line: 2317
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'first' => 'John',\n"
"            'id' => 22345,\n"
"            'last' => 'Doe',\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2303
# File: docs/master/collections.md, line: 2319
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sortkeysdesc\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2303
# File: docs/master/collections.md, line: 2319
#. type: Title ####
#, no-wrap
msgid "`sortKeysDesc()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2306
# File: docs/master/collections.md, line: 2322
#. type: Plain text
msgid "This method has the same signature as the [`sortKeys`](#method-sortkeys) method, but will sort the collection in the opposite order."
msgstr ""

# File: docs/8.x/collections.md, line: 2308
# File: docs/master/collections.md, line: 2324
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sortkeysusing\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2308
# File: docs/master/collections.md, line: 2324
#. type: Title ####
#, no-wrap
msgid "`sortKeysUsing()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2311
# File: docs/master/collections.md, line: 2327
#. type: Plain text
msgid "The `sortKeysUsing` method sorts the collection by the keys of the underlying associative array using a callback:"
msgstr ""

# File: docs/8.x/collections.md, line: 2317
# File: docs/master/collections.md, line: 2333
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        'ID' => 22345,\n"
"        'first' => 'John',\n"
"        'last' => 'Doe',\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2319
# File: docs/master/collections.md, line: 2335
#. type: Plain text
#, no-wrap
msgid "    $sorted = $collection->sortKeysUsing('strnatcasecmp');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2329
# File: docs/master/collections.md, line: 2345
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'first' => 'John',\n"
"            'ID' => 22345,\n"
"            'last' => 'Doe',\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2331
# File: docs/master/collections.md, line: 2347
#. type: Plain text
msgid "The callback must be a comparison function that returns an integer less than, equal to, or greater than zero. For more information, refer to the PHP documentation on [`uksort`](https://www.php.net/manual/en/function.uksort.php#refsect1-function.uksort-parameters), which is the PHP function that `sortKeysUsing` method utilizes internally."
msgstr ""

# File: docs/8.x/collections.md, line: 2333
# File: docs/master/collections.md, line: 2349
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-splice\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2333
# File: docs/master/collections.md, line: 2349
#. type: Title ####
#, no-wrap
msgid "`splice()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2336
# File: docs/master/collections.md, line: 2352
#. type: Plain text
msgid "The `splice` method removes and returns a slice of items starting at the specified index:"
msgstr ""

# File: docs/8.x/collections.md, line: 2340
# File: docs/master/collections.md, line: 2356
#. type: Plain text
#, no-wrap
msgid "    $chunk = $collection->splice(2);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2344
# File: docs/master/collections.md, line: 2360
#. type: Plain text
#, no-wrap
msgid "    // [3, 4, 5]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2350
# File: docs/master/collections.md, line: 2366
#. type: Plain text
msgid "You may pass a second argument to limit the size of the resulting collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2354
# File: docs/master/collections.md, line: 2370
#. type: Plain text
#, no-wrap
msgid "    $chunk = $collection->splice(2, 1);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2358
# File: docs/8.x/collections.md, line: 2372
# File: docs/master/collections.md, line: 2374
# File: docs/master/collections.md, line: 2388
#. type: Plain text
#, no-wrap
msgid "    // [3]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2362
# File: docs/master/collections.md, line: 2378
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 4, 5]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2364
# File: docs/master/collections.md, line: 2380
#. type: Plain text
msgid "In addition, you may pass a third argument containing the new items to replace the items removed from the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2368
# File: docs/master/collections.md, line: 2384
#. type: Plain text
#, no-wrap
msgid "    $chunk = $collection->splice(2, 1, [10, 11]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2376
# File: docs/master/collections.md, line: 2392
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 10, 11, 4, 5]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2378
# File: docs/master/collections.md, line: 2394
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-split\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2378
# File: docs/master/collections.md, line: 2394
#. type: Title ####
#, no-wrap
msgid "`split()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2381
# File: docs/master/collections.md, line: 2397
#. type: Plain text
msgid "The `split` method breaks a collection into the given number of groups:"
msgstr ""

# File: docs/8.x/collections.md, line: 2385
# File: docs/master/collections.md, line: 2401
#. type: Plain text
#, no-wrap
msgid "    $groups = $collection->split(3);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2387
# File: docs/8.x/collections.md, line: 2400
# File: docs/master/collections.md, line: 2403
# File: docs/master/collections.md, line: 2416
#. type: Plain text
#, no-wrap
msgid "    $groups->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2389
# File: docs/master/collections.md, line: 2405
#. type: Plain text
#, no-wrap
msgid "    // [[1, 2], [3, 4], [5]]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2391
# File: docs/master/collections.md, line: 2407
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-splitin\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2391
# File: docs/master/collections.md, line: 2407
#. type: Title ####
#, no-wrap
msgid "`splitIn()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2394
# File: docs/master/collections.md, line: 2410
#. type: Plain text
msgid "The `splitIn` method breaks a collection into the given number of groups, filling non-terminal groups completely before allocating the remainder to the final group:"
msgstr ""

# File: docs/8.x/collections.md, line: 2398
# File: docs/master/collections.md, line: 2414
#. type: Plain text
#, no-wrap
msgid "    $groups = $collection->splitIn(3);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2402
# File: docs/master/collections.md, line: 2418
#. type: Plain text
#, no-wrap
msgid "    // [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2404
# File: docs/master/collections.md, line: 2420
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-sum\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2404
# File: docs/master/collections.md, line: 2420
#. type: Title ####
#, no-wrap
msgid "`sum()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2407
# File: docs/master/collections.md, line: 2423
#. type: Plain text
msgid "The `sum` method returns the sum of all items in the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2409
# File: docs/master/collections.md, line: 2425
#. type: Plain text
#, no-wrap
msgid "    collect([1, 2, 3, 4, 5])->sum();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2413
# File: docs/master/collections.md, line: 2429
#. type: Plain text
msgid "If the collection contains nested arrays or objects, you should pass a key that will be used to determine which values to sum:"
msgstr ""

# File: docs/8.x/collections.md, line: 2418
# File: docs/master/collections.md, line: 2434
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n"
"        ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2420
# File: docs/master/collections.md, line: 2436
#. type: Plain text
#, no-wrap
msgid "    $collection->sum('pages');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2422
# File: docs/master/collections.md, line: 2438
#. type: Plain text
#, no-wrap
msgid "    // 1272\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2424
# File: docs/master/collections.md, line: 2440
#. type: Plain text
msgid "In addition, you may pass your own closure to determine which values of the collection to sum:"
msgstr ""

# File: docs/8.x/collections.md, line: 2430
# File: docs/master/collections.md, line: 2446
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2434
# File: docs/master/collections.md, line: 2450
#. type: Plain text
#, no-wrap
msgid "    $collection->sum(function ($product) {\n"
"        return count($product['colors']);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2438
# File: docs/master/collections.md, line: 2454
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-take\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2438
# File: docs/master/collections.md, line: 2454
#. type: Title ####
#, no-wrap
msgid "`take()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2441
# File: docs/master/collections.md, line: 2457
#. type: Plain text
msgid "The `take` method returns a new collection with the specified number of items:"
msgstr ""

# File: docs/8.x/collections.md, line: 2443
# File: docs/8.x/collections.md, line: 2453
# File: docs/master/collections.md, line: 2459
# File: docs/master/collections.md, line: 2469
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([0, 1, 2, 3, 4, 5]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2445
# File: docs/master/collections.md, line: 2461
#. type: Plain text
#, no-wrap
msgid "    $chunk = $collection->take(3);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2449
# File: docs/master/collections.md, line: 2465
#. type: Plain text
#, no-wrap
msgid "    // [0, 1, 2]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2451
# File: docs/master/collections.md, line: 2467
#. type: Plain text
msgid "You may also pass a negative integer to take the specified number of items from the end of the collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2455
# File: docs/master/collections.md, line: 2471
#. type: Plain text
#, no-wrap
msgid "    $chunk = $collection->take(-2);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2461
# File: docs/master/collections.md, line: 2477
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-takeuntil\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2461
# File: docs/master/collections.md, line: 2477
#. type: Title ####
#, no-wrap
msgid "`takeUntil()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2464
# File: docs/master/collections.md, line: 2480
#. type: Plain text
msgid "The `takeUntil` method returns items in the collection until the given callback returns `true`:"
msgstr ""

# File: docs/8.x/collections.md, line: 2470
# File: docs/master/collections.md, line: 2486
#. type: Plain text
#, no-wrap
msgid "    $subset = $collection->takeUntil(function ($item) {\n"
"        return $item >= 3;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2476
# File: docs/master/collections.md, line: 2492
#. type: Plain text
msgid "You may also pass a simple value to the `takeUntil` method to get the items until the given value is found:"
msgstr ""

# File: docs/8.x/collections.md, line: 2480
# File: docs/master/collections.md, line: 2496
#. type: Plain text
#, no-wrap
msgid "    $subset = $collection->takeUntil(3);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2486
# File: docs/master/collections.md, line: 2502
#. type: Plain text
#, no-wrap
msgid "> {note} If the given value is not found or the callback never returns `true`, the `takeUntil` method will return all items in the collection.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2488
# File: docs/master/collections.md, line: 2504
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-takewhile\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2488
# File: docs/master/collections.md, line: 2504
#. type: Title ####
#, no-wrap
msgid "`takeWhile()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2491
# File: docs/master/collections.md, line: 2507
#. type: Plain text
msgid "The `takeWhile` method returns items in the collection until the given callback returns `false`:"
msgstr ""

# File: docs/8.x/collections.md, line: 2497
# File: docs/master/collections.md, line: 2513
#. type: Plain text
#, no-wrap
msgid "    $subset = $collection->takeWhile(function ($item) {\n"
"        return $item < 3;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2503
# File: docs/master/collections.md, line: 2519
#. type: Plain text
#, no-wrap
msgid "> {note} If the callback never returns `false`, the `takeWhile` method will return all items in the collection.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2505
# File: docs/master/collections.md, line: 2521
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-tap\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2505
# File: docs/master/collections.md, line: 2521
#. type: Title ####
#, no-wrap
msgid "`tap()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2508
# File: docs/master/collections.md, line: 2524
#. type: Plain text
msgid "The `tap` method passes the collection to the given callback, allowing you to \"tap\" into the collection at a specific point and do something with the items while not affecting the collection itself. The collection is then returned by the `tap` method:"
msgstr ""

# File: docs/8.x/collections.md, line: 2515
# File: docs/master/collections.md, line: 2531
#. type: Plain text
#, no-wrap
msgid "    collect([2, 4, 3, 1, 5])\n"
"        ->sort()\n"
"        ->tap(function ($collection) {\n"
"            Log::debug('Values after sorting', $collection->values()->all());\n"
"        })\n"
"        ->shift();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2519
# File: docs/master/collections.md, line: 2535
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-times\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2519
# File: docs/master/collections.md, line: 2535
#. type: Title ####
#, no-wrap
msgid "`times()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2522
# File: docs/master/collections.md, line: 2538
#. type: Plain text
msgid "The static `times` method creates a new collection by invoking the given closure a specified number of times:"
msgstr ""

# File: docs/8.x/collections.md, line: 2526
# File: docs/master/collections.md, line: 2542
#. type: Plain text
#, no-wrap
msgid "    $collection = Collection::times(10, function ($number) {\n"
"        return $number * 9;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2530
# File: docs/master/collections.md, line: 2546
#. type: Plain text
#, no-wrap
msgid "    // [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2532
# File: docs/master/collections.md, line: 2548
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-toarray\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2532
# File: docs/master/collections.md, line: 2548
#. type: Title ####
#, no-wrap
msgid "`toArray()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2535
# File: docs/master/collections.md, line: 2551
#. type: Plain text
msgid "The `toArray` method converts the collection into a plain PHP `array`. If the collection's values are [Eloquent](/docs/{{version}}/eloquent) models, the models will also be converted to arrays:"
msgstr ""

# File: docs/8.x/collections.md, line: 2537
# File: docs/8.x/collections.md, line: 2554
# File: docs/master/collections.md, line: 2553
# File: docs/master/collections.md, line: 2570
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['name' => 'Desk', 'price' => 200]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2539
# File: docs/master/collections.md, line: 2555
#. type: Plain text
#, no-wrap
msgid "    $collection->toArray();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2545
# File: docs/master/collections.md, line: 2561
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Desk', 'price' => 200],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2547
# File: docs/master/collections.md, line: 2563
#. type: Plain text
#, no-wrap
msgid "> {note} `toArray` also converts all of the collection's nested objects that are an instance of `Arrayable` to an array. If you want to get the raw array underlying the collection, use the [`all`](#method-all) method instead.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2549
# File: docs/master/collections.md, line: 2565
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-tojson\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2549
# File: docs/master/collections.md, line: 2565
#. type: Title ####
#, no-wrap
msgid "`toJson()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2552
# File: docs/master/collections.md, line: 2568
#. type: Plain text
msgid "The `toJson` method converts the collection into a JSON serialized string:"
msgstr ""

# File: docs/8.x/collections.md, line: 2556
# File: docs/master/collections.md, line: 2572
#. type: Plain text
#, no-wrap
msgid "    $collection->toJson();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2558
# File: docs/master/collections.md, line: 2574
#. type: Plain text
#, no-wrap
msgid "    // '{\"name\":\"Desk\", \"price\":200}'\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2560
# File: docs/master/collections.md, line: 2576
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-transform\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2560
# File: docs/master/collections.md, line: 2576
#. type: Title ####
#, no-wrap
msgid "`transform()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2563
# File: docs/master/collections.md, line: 2579
#. type: Plain text
msgid "The `transform` method iterates over the collection and calls the given callback with each item in the collection. The items in the collection will be replaced by the values returned by the callback:"
msgstr ""

# File: docs/8.x/collections.md, line: 2569
# File: docs/master/collections.md, line: 2585
#. type: Plain text
#, no-wrap
msgid "    $collection->transform(function ($item, $key) {\n"
"        return $item * 2;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2575
# File: docs/master/collections.md, line: 2591
#. type: Plain text
#, no-wrap
msgid "> {note} Unlike most other collection methods, `transform` modifies the collection itself. If you wish to create a new collection instead, use the [`map`](#method-map) method.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2577
# File: docs/master/collections.md, line: 2593
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-undot\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2577
# File: docs/master/collections.md, line: 2593
#. type: Title ####
#, no-wrap
msgid "`undot()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2580
# File: docs/master/collections.md, line: 2596
#. type: Plain text
msgid "The `undot` method expands a single-dimensional collection that uses \"dot\" notation into a multi-dimensional collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 2590
# File: docs/master/collections.md, line: 2606
#. type: Plain text
#, no-wrap
msgid "    $person = collect([\n"
"        'name.first_name' => 'Marie',\n"
"        'name.last_name' => 'Valentine',\n"
"        'address.line_1' => '2992 Eagle Drive',\n"
"        'address.line_2' => '',\n"
"        'address.suburb' => 'Detroit',\n"
"        'address.state' => 'MI',\n"
"        'address.postcode' => '48219'\n"
"    ])\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2592
# File: docs/master/collections.md, line: 2608
#. type: Plain text
#, no-wrap
msgid "    $person = $person->undot();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2594
# File: docs/master/collections.md, line: 2610
#. type: Plain text
#, no-wrap
msgid "    $person->toArray();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2610
# File: docs/master/collections.md, line: 2626
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            \"name\" => [\n"
"                \"first_name\" => \"Marie\",\n"
"                \"last_name\" => \"Valentine\",\n"
"            ],\n"
"            \"address\" => [\n"
"                \"line_1\" => \"2992 Eagle Drive\",\n"
"                \"line_2\" => \"\",\n"
"                \"suburb\" => \"Detroit\",\n"
"                \"state\" => \"MI\",\n"
"                \"postcode\" => \"48219\",\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2612
# File: docs/master/collections.md, line: 2628
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-union\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2612
# File: docs/master/collections.md, line: 2628
#. type: Title ####
#, no-wrap
msgid "`union()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2615
# File: docs/master/collections.md, line: 2631
#. type: Plain text
msgid "The `union` method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection's values will be preferred:"
msgstr ""

# File: docs/8.x/collections.md, line: 2617
# File: docs/master/collections.md, line: 2633
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1 => ['a'], 2 => ['b']]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2619
# File: docs/master/collections.md, line: 2635
#. type: Plain text
#, no-wrap
msgid "    $union = $collection->union([3 => ['c'], 1 => ['d']]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2621
# File: docs/master/collections.md, line: 2637
#. type: Plain text
#, no-wrap
msgid "    $union->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2623
# File: docs/master/collections.md, line: 2639
#. type: Plain text
#, no-wrap
msgid "    // [1 => ['a'], 2 => ['b'], 3 => ['c']]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2625
# File: docs/master/collections.md, line: 2641
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-unique\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2625
# File: docs/master/collections.md, line: 2641
#. type: Title ####
#, no-wrap
msgid "`unique()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2628
# File: docs/master/collections.md, line: 2644
#. type: Plain text
msgid "The `unique` method returns all of the unique items in the collection. The returned collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

# File: docs/8.x/collections.md, line: 2630
# File: docs/master/collections.md, line: 2646
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([1, 1, 2, 2, 3, 4, 2]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2632
# File: docs/master/collections.md, line: 2648
#. type: Plain text
#, no-wrap
msgid "    $unique = $collection->unique();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2634
# File: docs/8.x/collections.md, line: 2650
# File: docs/8.x/collections.md, line: 2665
# File: docs/master/collections.md, line: 2650
# File: docs/master/collections.md, line: 2666
# File: docs/master/collections.md, line: 2681
#. type: Plain text
#, no-wrap
msgid "    $unique->values()->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2638
# File: docs/master/collections.md, line: 2654
#. type: Plain text
msgid "When dealing with nested arrays or objects, you may specify the key used to determine uniqueness:"
msgstr ""

# File: docs/8.x/collections.md, line: 2646
# File: docs/master/collections.md, line: 2662
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'iPhone 5', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2648
# File: docs/master/collections.md, line: 2664
#. type: Plain text
#, no-wrap
msgid "    $unique = $collection->unique('brand');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2657
# File: docs/master/collections.md, line: 2673
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"            ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2659
# File: docs/master/collections.md, line: 2675
#. type: Plain text
msgid "Finally, you may also pass your own closure to the `unique` method to specify which value should determine an item's uniqueness:"
msgstr ""

# File: docs/8.x/collections.md, line: 2663
# File: docs/master/collections.md, line: 2679
#. type: Plain text
#, no-wrap
msgid "    $unique = $collection->unique(function ($item) {\n"
"        return $item['brand'].$item['type'];\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2674
# File: docs/master/collections.md, line: 2690
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"            ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"            ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"            ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2676
# File: docs/master/collections.md, line: 2692
#. type: Plain text
msgid "The `unique` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`uniqueStrict`](#method-uniquestrict) method to filter using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 2678
# File: docs/master/collections.md, line: 2694
#. type: Plain text
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-unique).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2680
# File: docs/master/collections.md, line: 2696
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-uniquestrict\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2680
# File: docs/master/collections.md, line: 2696
#. type: Title ####
#, no-wrap
msgid "`uniqueStrict()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2683
# File: docs/master/collections.md, line: 2699
#. type: Plain text
msgid "This method has the same signature as the [`unique`](#method-unique) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 2685
# File: docs/master/collections.md, line: 2701
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-unless\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2685
# File: docs/master/collections.md, line: 2701
#. type: Title ####
#, no-wrap
msgid "`unless()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2688
# File: docs/master/collections.md, line: 2704
#. type: Plain text
msgid "The `unless` method will execute the given callback unless the first argument given to the method evaluates to `true`:"
msgstr ""

# File: docs/8.x/collections.md, line: 2694
# File: docs/master/collections.md, line: 2710
#. type: Plain text
#, no-wrap
msgid "    $collection->unless(true, function ($collection) {\n"
"        return $collection->push(4);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2698
# File: docs/master/collections.md, line: 2714
#. type: Plain text
#, no-wrap
msgid "    $collection->unless(false, function ($collection) {\n"
"        return $collection->push(5);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2702
# File: docs/8.x/collections.md, line: 2716
# File: docs/8.x/collections.md, line: 2799
# File: docs/master/collections.md, line: 2718
# File: docs/master/collections.md, line: 2732
# File: docs/master/collections.md, line: 2815
#. type: Plain text
#, no-wrap
msgid "    // [1, 2, 3, 5]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2704
# File: docs/master/collections.md, line: 2720
#. type: Plain text
msgid "A second callback may be passed to the `unless` method. The second callback will be executed when the first argument given to the `unless` method evaluates to `true`:"
msgstr ""

# File: docs/8.x/collections.md, line: 2712
# File: docs/master/collections.md, line: 2728
#. type: Plain text
#, no-wrap
msgid "    $collection->unless(true, function ($collection) {\n"
"        return $collection->push(4);\n"
"    }, function ($collection) {\n"
"        return $collection->push(5);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2718
# File: docs/master/collections.md, line: 2734
#. type: Plain text
msgid "For the inverse of `unless`, see the [`when`](#method-when) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2720
# File: docs/master/collections.md, line: 2736
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-unlessempty\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2720
# File: docs/master/collections.md, line: 2736
#. type: Title ####
#, no-wrap
msgid "`unlessEmpty()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2723
# File: docs/master/collections.md, line: 2739
#. type: Plain text
msgid "Alias for the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2725
# File: docs/master/collections.md, line: 2741
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-unlessnotempty\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2725
# File: docs/master/collections.md, line: 2741
#. type: Title ####
#, no-wrap
msgid "`unlessNotEmpty()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2728
# File: docs/master/collections.md, line: 2744
#. type: Plain text
msgid "Alias for the [`whenEmpty`](#method-whenempty) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2730
# File: docs/master/collections.md, line: 2746
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-unwrap\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2730
# File: docs/master/collections.md, line: 2746
#. type: Title ####
#, no-wrap
msgid "`unwrap()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2733
# File: docs/master/collections.md, line: 2749
#. type: Plain text
msgid "The static `unwrap` method returns the collection's underlying items from the given value when applicable:"
msgstr ""

# File: docs/8.x/collections.md, line: 2735
# File: docs/master/collections.md, line: 2751
#. type: Plain text
#, no-wrap
msgid "    Collection::unwrap(collect('John Doe'));\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2737
# File: docs/8.x/collections.md, line: 2741
# File: docs/8.x/collections.md, line: 3120
# File: docs/8.x/collections.md, line: 3126
# File: docs/8.x/collections.md, line: 3132
# File: docs/master/collections.md, line: 2753
# File: docs/master/collections.md, line: 2757
# File: docs/master/collections.md, line: 3136
# File: docs/master/collections.md, line: 3142
# File: docs/master/collections.md, line: 3148
#. type: Plain text
#, no-wrap
msgid "    // ['John Doe']\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2739
# File: docs/master/collections.md, line: 2755
#. type: Plain text
#, no-wrap
msgid "    Collection::unwrap(['John Doe']);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2743
# File: docs/master/collections.md, line: 2759
#. type: Plain text
#, no-wrap
msgid "    Collection::unwrap('John Doe');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2745
# File: docs/master/collections.md, line: 2761
#. type: Plain text
#, no-wrap
msgid "    // 'John Doe'\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2747
# File: docs/master/collections.md, line: 2763
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-values\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2747
# File: docs/master/collections.md, line: 2763
#. type: Title ####
#, no-wrap
msgid "`values()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2750
# File: docs/master/collections.md, line: 2766
#. type: Plain text
msgid "The `values` method returns a new collection with the keys reset to consecutive integers:"
msgstr ""

# File: docs/8.x/collections.md, line: 2755
# File: docs/master/collections.md, line: 2771
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        10 => ['product' => 'Desk', 'price' => 200],\n"
"        11 => ['product' => 'Desk', 'price' => 200],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2757
# File: docs/master/collections.md, line: 2773
#. type: Plain text
#, no-wrap
msgid "    $values = $collection->values();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2759
# File: docs/master/collections.md, line: 2775
#. type: Plain text
#, no-wrap
msgid "    $values->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2766
# File: docs/master/collections.md, line: 2782
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            0 => ['product' => 'Desk', 'price' => 200],\n"
"            1 => ['product' => 'Desk', 'price' => 200],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2768
# File: docs/master/collections.md, line: 2784
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-when\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2768
# File: docs/master/collections.md, line: 2784
#. type: Title ####
#, no-wrap
msgid "`when()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2771
# File: docs/master/collections.md, line: 2787
#. type: Plain text
msgid "The `when` method will execute the given callback when the first argument given to the method evaluates to `true`:"
msgstr ""

# File: docs/8.x/collections.md, line: 2777
# File: docs/master/collections.md, line: 2793
#. type: Plain text
#, no-wrap
msgid "    $collection->when(true, function ($collection) {\n"
"        return $collection->push(4);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2781
# File: docs/master/collections.md, line: 2797
#. type: Plain text
#, no-wrap
msgid "    $collection->when(false, function ($collection) {\n"
"        return $collection->push(5);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2787
# File: docs/master/collections.md, line: 2803
#. type: Plain text
msgid "A second callback may be passed to the `when` method. The second callback will be executed when the first argument given to the `when` method evaluates to `false`:"
msgstr ""

# File: docs/8.x/collections.md, line: 2795
# File: docs/master/collections.md, line: 2811
#. type: Plain text
#, no-wrap
msgid "    $collection->when(false, function ($collection) {\n"
"        return $collection->push(4);\n"
"    }, function ($collection) {\n"
"        return $collection->push(5);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2801
# File: docs/master/collections.md, line: 2817
#. type: Plain text
msgid "For the inverse of `when`, see the [`unless`](#method-unless) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2803
# File: docs/master/collections.md, line: 2819
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-whenempty\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2803
# File: docs/master/collections.md, line: 2819
#. type: Title ####
#, no-wrap
msgid "`whenEmpty()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2806
# File: docs/master/collections.md, line: 2822
#. type: Plain text
msgid "The `whenEmpty` method will execute the given callback when the collection is empty:"
msgstr ""

# File: docs/8.x/collections.md, line: 2808
# File: docs/8.x/collections.md, line: 2831
# File: docs/master/collections.md, line: 2824
# File: docs/master/collections.md, line: 2847
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['Michael', 'Tom']);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2812
# File: docs/8.x/collections.md, line: 2823
# File: docs/master/collections.md, line: 2828
# File: docs/master/collections.md, line: 2839
#. type: Plain text
#, no-wrap
msgid "    $collection->whenEmpty(function ($collection) {\n"
"        return $collection->push('Adam');\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2816
# File: docs/master/collections.md, line: 2832
#. type: Plain text
#, no-wrap
msgid "    // ['Michael', 'Tom']\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2819
# File: docs/8.x/collections.md, line: 2861
# File: docs/8.x/collections.md, line: 2873
# File: docs/master/collections.md, line: 2835
# File: docs/master/collections.md, line: 2877
# File: docs/master/collections.md, line: 2889
#. type: Plain text
#, no-wrap
msgid "    $collection = collect();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2827
# File: docs/master/collections.md, line: 2843
#. type: Plain text
#, no-wrap
msgid "    // ['Adam']\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2829
# File: docs/master/collections.md, line: 2845
#. type: Plain text
msgid "A second closure may be passed to the `whenEmpty` method that will be executed when the collection is not empty:"
msgstr ""

# File: docs/8.x/collections.md, line: 2837
# File: docs/master/collections.md, line: 2853
#. type: Plain text
#, no-wrap
msgid "    $collection->whenEmpty(function ($collection) {\n"
"        return $collection->push('Adam');\n"
"    }, function ($collection) {\n"
"        return $collection->push('Taylor');\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2841
# File: docs/master/collections.md, line: 2857
#. type: Plain text
#, no-wrap
msgid "    // ['Michael', 'Tom', 'Taylor']\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2843
# File: docs/master/collections.md, line: 2859
#. type: Plain text
msgid "For the inverse of `whenEmpty`, see the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2845
# File: docs/master/collections.md, line: 2861
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-whennotempty\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2845
# File: docs/master/collections.md, line: 2861
#. type: Title ####
#, no-wrap
msgid "`whenNotEmpty()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2848
# File: docs/master/collections.md, line: 2864
#. type: Plain text
msgid "The `whenNotEmpty` method will execute the given callback when the collection is not empty:"
msgstr ""

# File: docs/8.x/collections.md, line: 2850
# File: docs/master/collections.md, line: 2866
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['michael', 'tom']);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2854
# File: docs/8.x/collections.md, line: 2865
# File: docs/master/collections.md, line: 2870
# File: docs/master/collections.md, line: 2881
#. type: Plain text
#, no-wrap
msgid "    $collection->whenNotEmpty(function ($collection) {\n"
"        return $collection->push('adam');\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2858
# File: docs/master/collections.md, line: 2874
#. type: Plain text
#, no-wrap
msgid "    // ['michael', 'tom', 'adam']\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2869
# File: docs/master/collections.md, line: 2885
#. type: Plain text
#, no-wrap
msgid "    // []\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2871
# File: docs/master/collections.md, line: 2887
#. type: Plain text
msgid "A second closure may be passed to the `whenNotEmpty` method that will be executed when the collection is empty:"
msgstr ""

# File: docs/8.x/collections.md, line: 2879
# File: docs/master/collections.md, line: 2895
#. type: Plain text
#, no-wrap
msgid "    $collection->whenNotEmpty(function ($collection) {\n"
"        return $collection->push('adam');\n"
"    }, function ($collection) {\n"
"        return $collection->push('taylor');\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2883
# File: docs/master/collections.md, line: 2899
#. type: Plain text
#, no-wrap
msgid "    // ['taylor']\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2885
# File: docs/master/collections.md, line: 2901
#. type: Plain text
msgid "For the inverse of `whenNotEmpty`, see the [`whenEmpty`](#method-whenempty) method."
msgstr ""

# File: docs/8.x/collections.md, line: 2887
# File: docs/master/collections.md, line: 2903
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-where\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2887
# File: docs/master/collections.md, line: 2903
#. type: Title ####
#, no-wrap
msgid "`where()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2890
# File: docs/master/collections.md, line: 2906
#. type: Plain text
msgid "The `where` method filters the collection by a given key / value pair:"
msgstr ""

# File: docs/8.x/collections.md, line: 2897
# File: docs/8.x/collections.md, line: 2971
# File: docs/8.x/collections.md, line: 3045
# File: docs/master/collections.md, line: 2913
# File: docs/master/collections.md, line: 2987
# File: docs/master/collections.md, line: 3061
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2899
# File: docs/master/collections.md, line: 2915
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->where('price', 100);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2908
# File: docs/8.x/collections.md, line: 3056
# File: docs/master/collections.md, line: 2924
# File: docs/master/collections.md, line: 3072
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Chair', 'price' => 100],\n"
"            ['product' => 'Door', 'price' => 100],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2910
# File: docs/master/collections.md, line: 2926
#. type: Plain text
msgid "The `where` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereStrict`](#method-wherestrict) method to filter using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 2912
# File: docs/master/collections.md, line: 2928
#. type: Plain text
msgid "Optionally, you may pass a comparison operator as the second parameter."
msgstr ""

# File: docs/8.x/collections.md, line: 2918
# File: docs/master/collections.md, line: 2934
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"        ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"        ['name' => 'Sue', 'deleted_at' => null],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2920
# File: docs/master/collections.md, line: 2936
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->where('deleted_at', '!=', null);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2929
# File: docs/master/collections.md, line: 2945
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"            ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2931
# File: docs/master/collections.md, line: 2947
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherestrict\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2931
# File: docs/master/collections.md, line: 2947
#. type: Title ####
#, no-wrap
msgid "`whereStrict()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2934
# File: docs/master/collections.md, line: 2950
#. type: Plain text
msgid "This method has the same signature as the [`where`](#method-where) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 2936
# File: docs/master/collections.md, line: 2952
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherebetween\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2936
# File: docs/master/collections.md, line: 2952
#. type: Title ####
#, no-wrap
msgid "`whereBetween()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2939
# File: docs/master/collections.md, line: 2955
#. type: Plain text
msgid "The `whereBetween` method filters the collection by determining if a specified item value is within a given range:"
msgstr ""

# File: docs/8.x/collections.md, line: 2947
# File: docs/8.x/collections.md, line: 3022
# File: docs/master/collections.md, line: 2963
# File: docs/master/collections.md, line: 3038
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 80],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"        ['product' => 'Pencil', 'price' => 30],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2949
# File: docs/master/collections.md, line: 2965
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereBetween('price', [100, 200]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2959
# File: docs/master/collections.md, line: 2975
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Desk', 'price' => 200],\n"
"            ['product' => 'Bookcase', 'price' => 150],\n"
"            ['product' => 'Door', 'price' => 100],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2961
# File: docs/master/collections.md, line: 2977
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherein\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2961
# File: docs/master/collections.md, line: 2977
#. type: Title ####
#, no-wrap
msgid "`whereIn()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2964
# File: docs/master/collections.md, line: 2980
#. type: Plain text
msgid "The `whereIn` method removes elements from the collection that do not have a specified item value that is contained within the given array:"
msgstr ""

# File: docs/8.x/collections.md, line: 2973
# File: docs/master/collections.md, line: 2989
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereIn('price', [150, 200]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2982
# File: docs/master/collections.md, line: 2998
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Desk', 'price' => 200],\n"
"            ['product' => 'Bookcase', 'price' => 150],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2984
# File: docs/master/collections.md, line: 3000
#. type: Plain text
msgid "The `whereIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereInStrict`](#method-whereinstrict) method to filter using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 2986
# File: docs/master/collections.md, line: 3002
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-whereinstrict\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2986
# File: docs/master/collections.md, line: 3002
#. type: Title ####
#, no-wrap
msgid "`whereInStrict()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2989
# File: docs/master/collections.md, line: 3005
#. type: Plain text
msgid "This method has the same signature as the [`whereIn`](#method-wherein) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 2991
# File: docs/master/collections.md, line: 3007
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-whereinstanceof\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 2991
# File: docs/master/collections.md, line: 3007
#. type: Title ####
#, no-wrap
msgid "`whereInstanceOf()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 2994
# File: docs/master/collections.md, line: 3010
#. type: Plain text
msgid "The `whereInstanceOf` method filters the collection by a given class type:"
msgstr ""

# File: docs/8.x/collections.md, line: 2997
# File: docs/master/collections.md, line: 3013
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Models\\Post;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3003
# File: docs/master/collections.md, line: 3019
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        new User,\n"
"        new User,\n"
"        new Post,\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3005
# File: docs/master/collections.md, line: 3021
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereInstanceOf(User::class);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3009
# File: docs/master/collections.md, line: 3025
#. type: Plain text
#, no-wrap
msgid "    // [App\\Models\\User, App\\Models\\User]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3011
# File: docs/master/collections.md, line: 3027
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherenotbetween\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3011
# File: docs/master/collections.md, line: 3027
#. type: Title ####
#, no-wrap
msgid "`whereNotBetween()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3014
# File: docs/master/collections.md, line: 3030
#. type: Plain text
msgid "The `whereNotBetween` method filters the collection by determining if a specified item value is outside of a given range:"
msgstr ""

# File: docs/8.x/collections.md, line: 3024
# File: docs/master/collections.md, line: 3040
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereNotBetween('price', [100, 200]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3033
# File: docs/master/collections.md, line: 3049
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Chair', 'price' => 80],\n"
"            ['product' => 'Pencil', 'price' => 30],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3035
# File: docs/master/collections.md, line: 3051
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherenotin\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3035
# File: docs/master/collections.md, line: 3051
#. type: Title ####
#, no-wrap
msgid "`whereNotIn()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3038
# File: docs/master/collections.md, line: 3054
#. type: Plain text
msgid "The `whereNotIn` method removes elements from the collection that have a specified item value that is contained within the given array:"
msgstr ""

# File: docs/8.x/collections.md, line: 3047
# File: docs/master/collections.md, line: 3063
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereNotIn('price', [150, 200]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3058
# File: docs/master/collections.md, line: 3074
#. type: Plain text
msgid "The `whereNotIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereNotInStrict`](#method-wherenotinstrict) method to filter using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 3060
# File: docs/master/collections.md, line: 3076
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherenotinstrict\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3060
# File: docs/master/collections.md, line: 3076
#. type: Title ####
#, no-wrap
msgid "`whereNotInStrict()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3063
# File: docs/master/collections.md, line: 3079
#. type: Plain text
msgid "This method has the same signature as the [`whereNotIn`](#method-wherenotin) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

# File: docs/8.x/collections.md, line: 3065
# File: docs/master/collections.md, line: 3081
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherenotnull\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3065
# File: docs/master/collections.md, line: 3081
#. type: Title ####
#, no-wrap
msgid "`whereNotNull()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3068
# File: docs/master/collections.md, line: 3084
#. type: Plain text
msgid "The `whereNotNull` method returns items from the collection where the given key is not `null`:"
msgstr ""

# File: docs/8.x/collections.md, line: 3074
# File: docs/8.x/collections.md, line: 3096
# File: docs/master/collections.md, line: 3090
# File: docs/master/collections.md, line: 3112
#. type: Plain text
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Desk'],\n"
"        ['name' => null],\n"
"        ['name' => 'Bookcase'],\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3076
# File: docs/master/collections.md, line: 3092
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereNotNull('name');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3085
# File: docs/master/collections.md, line: 3101
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Desk'],\n"
"            ['name' => 'Bookcase'],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3087
# File: docs/master/collections.md, line: 3103
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wherenull\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3087
# File: docs/master/collections.md, line: 3103
#. type: Title ####
#, no-wrap
msgid "`whereNull()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3090
# File: docs/master/collections.md, line: 3106
#. type: Plain text
msgid "The `whereNull` method returns items from the collection where the given key is `null`:"
msgstr ""

# File: docs/8.x/collections.md, line: 3098
# File: docs/master/collections.md, line: 3114
#. type: Plain text
#, no-wrap
msgid "    $filtered = $collection->whereNull('name');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3106
# File: docs/master/collections.md, line: 3122
#. type: Plain text
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => null],\n"
"        ]\n"
"    */\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3109
# File: docs/master/collections.md, line: 3125
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-wrap\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3109
# File: docs/master/collections.md, line: 3125
#. type: Title ####
#, no-wrap
msgid "`wrap()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3112
# File: docs/master/collections.md, line: 3128
#. type: Plain text
msgid "The static `wrap` method wraps the given value in a collection when applicable:"
msgstr ""

# File: docs/8.x/collections.md, line: 3114
# File: docs/master/collections.md, line: 3130
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3116
# File: docs/master/collections.md, line: 3132
#. type: Plain text
#, no-wrap
msgid "    $collection = Collection::wrap('John Doe');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3122
# File: docs/master/collections.md, line: 3138
#. type: Plain text
#, no-wrap
msgid "    $collection = Collection::wrap(['John Doe']);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3128
# File: docs/master/collections.md, line: 3144
#. type: Plain text
#, no-wrap
msgid "    $collection = Collection::wrap(collect('John Doe'));\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3134
# File: docs/master/collections.md, line: 3150
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-zip\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3134
# File: docs/master/collections.md, line: 3150
#. type: Title ####
#, no-wrap
msgid "`zip()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3137
# File: docs/master/collections.md, line: 3153
#. type: Plain text
msgid "The `zip` method merges together the values of the given array with the values of the original collection at their corresponding index:"
msgstr ""

# File: docs/8.x/collections.md, line: 3139
# File: docs/master/collections.md, line: 3155
#. type: Plain text
#, no-wrap
msgid "    $collection = collect(['Chair', 'Desk']);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3141
# File: docs/master/collections.md, line: 3157
#. type: Plain text
#, no-wrap
msgid "    $zipped = $collection->zip([100, 200]);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3143
# File: docs/master/collections.md, line: 3159
#. type: Plain text
#, no-wrap
msgid "    $zipped->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3145
# File: docs/master/collections.md, line: 3161
#. type: Plain text
#, no-wrap
msgid "    // [['Chair', 100], ['Desk', 200]]\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3147
# File: docs/master/collections.md, line: 3163
#. type: Plain text
#, no-wrap
msgid "<a name=\"higher-order-messages\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3147
# File: docs/master/collections.md, line: 3163
#. type: Title ##
#, no-wrap
msgid "Higher Order Messages"
msgstr ""

# File: docs/8.x/collections.md, line: 3150
# File: docs/master/collections.md, line: 3166
#. type: Plain text
msgid "Collections also provide support for \"higher order messages\", which are short-cuts for performing common actions on collections. The collection methods that provide higher order messages are: [`average`](#method-average), [`avg`](#method-avg), [`contains`](#method-contains), [`each`](#method-each), [`every`](#method-every), [`filter`](#method-filter), [`first`](#method-first), [`flatMap`](#method-flatmap), [`groupBy`](#method-groupby), [`keyBy`](#method-keyby), [`map`](#method-map), [`max`](#method-max), [`min`](#method-min), [`partition`](#method-partition), [`reject`](#method-reject), [`skipUntil`](#method-skipuntil), [`skipWhile`](#method-skipwhile), [`some`](#method-some), [`sortBy`](#method-sortby), [`sortByDesc`](#method-sortbydesc), [`sum`](#method-sum), [`takeUntil`](#method-takeuntil), [`takeWhile`](#method-takewhile), and [`unique`](#method-unique)."
msgstr ""

# File: docs/8.x/collections.md, line: 3152
# File: docs/master/collections.md, line: 3168
#. type: Plain text
msgid "Each higher order message can be accessed as a dynamic property on a collection instance. For instance, let's use the `each` higher order message to call a method on each object within a collection:"
msgstr ""

# File: docs/8.x/collections.md, line: 3154
# File: docs/8.x/collections.md, line: 3195
# File: docs/8.x/collections.md, line: 3203
# File: docs/master/collections.md, line: 3170
# File: docs/master/collections.md, line: 3211
# File: docs/master/collections.md, line: 3219
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3156
# File: docs/master/collections.md, line: 3172
#. type: Plain text
#, no-wrap
msgid "    $users = User::where('votes', '>', 500)->get();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3158
# File: docs/master/collections.md, line: 3174
#. type: Plain text
#, no-wrap
msgid "    $users->each->markAsVip();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3160
# File: docs/master/collections.md, line: 3176
#. type: Plain text
msgid "Likewise, we can use the `sum` higher order message to gather the total number of \"votes\" for a collection of users:"
msgstr ""

# File: docs/8.x/collections.md, line: 3162
# File: docs/master/collections.md, line: 3178
#. type: Plain text
#, no-wrap
msgid "    $users = User::where('group', 'Development')->get();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3164
# File: docs/master/collections.md, line: 3180
#. type: Plain text
#, no-wrap
msgid "    return $users->sum->votes;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3166
# File: docs/master/collections.md, line: 3182
#. type: Plain text
#, no-wrap
msgid "<a name=\"lazy-collections\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3166
# File: docs/master/collections.md, line: 3182
#. type: Title ##
#, no-wrap
msgid "Lazy Collections"
msgstr ""

# File: docs/8.x/collections.md, line: 3169
# File: docs/master/collections.md, line: 3185
#. type: Plain text
#, no-wrap
msgid "<a name=\"lazy-collection-introduction\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3172
# File: docs/master/collections.md, line: 3188
#. type: Plain text
#, no-wrap
msgid "> {note} Before learning more about Laravel's lazy collections, take some time to familiarize yourself with [PHP generators](https://www.php.net/manual/en/language.generators.overview.php).\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3174
# File: docs/master/collections.md, line: 3190
#. type: Plain text
msgid "To supplement the already powerful `Collection` class, the `LazyCollection` class leverages PHP's [generators](https://www.php.net/manual/en/language.generators.overview.php) to allow you to work with very large datasets while keeping memory usage low."
msgstr ""

# File: docs/8.x/collections.md, line: 3176
# File: docs/master/collections.md, line: 3192
#. type: Plain text
msgid "For example, imagine your application needs to process a multi-gigabyte log file while taking advantage of Laravel's collection methods to parse the logs. Instead of reading the entire file into memory at once, lazy collections may be used to keep only a small part of the file in memory at a given time:"
msgstr ""

# File: docs/8.x/collections.md, line: 3179
# File: docs/master/collections.md, line: 3195
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\LogEntry;\n"
"    use Illuminate\\Support\\LazyCollection;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3182
# File: docs/8.x/collections.md, line: 3221
# File: docs/master/collections.md, line: 3198
# File: docs/master/collections.md, line: 3237
#. type: Plain text
#, no-wrap
msgid "    LazyCollection::make(function () {\n"
"        $handle = fopen('log.txt', 'r');\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3191
# File: docs/master/collections.md, line: 3207
#. type: Plain text
#, no-wrap
msgid "        while (($line = fgets($handle)) !== false) {\n"
"            yield $line;\n"
"        }\n"
"    })->chunk(4)->map(function ($lines) {\n"
"        return LogEntry::fromLines($lines);\n"
"    })->each(function (LogEntry $logEntry) {\n"
"        // Process the log entry...\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3193
# File: docs/master/collections.md, line: 3209
#. type: Plain text
msgid "Or, imagine you need to iterate through 10,000 Eloquent models. When using traditional Laravel collections, all 10,000 Eloquent models must be loaded into memory at the same time:"
msgstr ""

# File: docs/8.x/collections.md, line: 3199
# File: docs/master/collections.md, line: 3215
#. type: Plain text
#, no-wrap
msgid "    $users = User::all()->filter(function ($user) {\n"
"        return $user->id > 500;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3201
# File: docs/master/collections.md, line: 3217
#. type: Plain text
msgid "However, the query builder's `cursor` method returns a `LazyCollection` instance. This allows you to still only run a single query against the database but also only keep one Eloquent model loaded in memory at a time. In this example, the `filter` callback is not executed until we actually iterate over each user individually, allowing for a drastic reduction in memory usage:"
msgstr ""

# File: docs/8.x/collections.md, line: 3207
# File: docs/master/collections.md, line: 3223
#. type: Plain text
#, no-wrap
msgid "    $users = User::cursor()->filter(function ($user) {\n"
"        return $user->id > 500;\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3211
# File: docs/master/collections.md, line: 3227
#. type: Plain text
#, no-wrap
msgid "    foreach ($users as $user) {\n"
"        echo $user->id;\n"
"    }\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3213
# File: docs/master/collections.md, line: 3229
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-lazy-collections\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3213
# File: docs/master/collections.md, line: 3229
#. type: Title ###
#, no-wrap
msgid "Creating Lazy Collections"
msgstr ""

# File: docs/8.x/collections.md, line: 3216
# File: docs/master/collections.md, line: 3232
#. type: Plain text
msgid "To create a lazy collection instance, you should pass a PHP generator function to the collection's `make` method:"
msgstr ""

# File: docs/8.x/collections.md, line: 3218
# File: docs/master/collections.md, line: 3234
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\LazyCollection;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3226
# File: docs/master/collections.md, line: 3242
#. type: Plain text
#, no-wrap
msgid "        while (($line = fgets($handle)) !== false) {\n"
"            yield $line;\n"
"        }\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3228
# File: docs/master/collections.md, line: 3244
#. type: Plain text
#, no-wrap
msgid "<a name=\"the-enumerable-contract\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3228
# File: docs/master/collections.md, line: 3244
#. type: Title ###
#, no-wrap
msgid "The Enumerable Contract"
msgstr ""

# File: docs/8.x/collections.md, line: 3231
# File: docs/master/collections.md, line: 3247
#. type: Plain text
msgid "Almost all methods available on the `Collection` class are also available on the `LazyCollection` class. Both of these classes implement the `Illuminate\\Support\\Enumerable` contract, which defines the following methods:"
msgstr ""

# File: docs/8.x/collections.md, line: 3342
# File: docs/master/collections.md, line: 3358
#. type: Plain text
msgid "[all](#method-all)  [average](#method-average)  [avg](#method-avg)  [chunk](#method-chunk)  [chunkWhile](#method-chunkwhile)  [collapse](#method-collapse)  [collect](#method-collect)  [combine](#method-combine)  [concat](#method-concat)  [contains](#method-contains)  [containsStrict](#method-containsstrict)  [count](#method-count)  [countBy](#method-countBy)  [crossJoin](#method-crossjoin)  [dd](#method-dd)  [diff](#method-diff)  [diffAssoc](#method-diffassoc)  [diffKeys](#method-diffkeys)  [dump](#method-dump)  [duplicates](#method-duplicates)  [duplicatesStrict](#method-duplicatesstrict)  [each](#method-each)  [eachSpread](#method-eachspread)  [every](#method-every)  [except](#method-except)  [filter](#method-filter)  [first](#method-first)  [firstWhere](#method-first-where)  [flatMap](#method-flatmap)  [flatten](#method-flatten)  [flip](#method-flip)  [forPage](#method-forpage)  [get](#method-get)  [groupBy](#method-groupby)  [has](#method-has)  [implode](#method-implode)  [intersect](#method-intersect)  [intersectByKeys](#method-intersectbykeys)  [isEmpty](#method-isempty)  [isNotEmpty](#method-isnotempty)  [join](#method-join)  [keyBy](#method-keyby)  [keys](#method-keys)  [last](#method-last)  [macro](#method-macro)  [make](#method-make)  [map](#method-map)  [mapInto](#method-mapinto)  [mapSpread](#method-mapspread)  [mapToGroups](#method-maptogroups)  [mapWithKeys](#method-mapwithkeys)  [max](#method-max)  [median](#method-median)  [merge](#method-merge)  [mergeRecursive](#method-mergerecursive)  [min](#method-min)  [mode](#method-mode)  [nth](#method-nth)  [only](#method-only)  [pad](#method-pad)  [partition](#method-partition)  [pipe](#method-pipe)  [pluck](#method-pluck)  [random](#method-random)  [reduce](#method-reduce)  [reject](#method-reject)  [replace](#method-replace)  [replaceRecursive](#method-replacerecursive)  [reverse](#method-reverse)  [search](#method-search)  [shuffle](#method-shuffle)  [skip](#method-skip)  [slice](#method-slice)  [some](#method-some)  [sort](#method-sort)  [sortBy](#method-sortby)  [sortByDesc](#method-sortbydesc)  [sortKeys](#method-sortkeys)  [sortKeysDesc](#method-sortkeysdesc)  [split](#method-split)  [sum](#method-sum)  [take](#method-take)  [tap](#method-tap)  [times](#method-times)  [toArray](#method-toarray)  [toJson](#method-tojson)  [union](#method-union)  [unique](#method-unique)  [uniqueStrict](#method-uniquestrict)  [unless](#method-unless)  [unlessEmpty](#method-unlessempty)  [unlessNotEmpty](#method-unlessnotempty)  [unwrap](#method-unwrap)  [values](#method-values)  [when](#method-when)  [whenEmpty](#method-whenempty)  [whenNotEmpty](#method-whennotempty)  [where](#method-where)  [whereStrict](#method-wherestrict)  [whereBetween](#method-wherebetween)  [whereIn](#method-wherein)  [whereInStrict](#method-whereinstrict)  [whereInstanceOf](#method-whereinstanceof)  [whereNotBetween](#method-wherenotbetween)  [whereNotIn](#method-wherenotin)  [whereNotInStrict](#method-wherenotinstrict)  [wrap](#method-wrap)  [zip](#method-zip)"
msgstr ""

# File: docs/8.x/collections.md, line: 3346
# File: docs/master/collections.md, line: 3362
#. type: Plain text
#, no-wrap
msgid "> {note} Methods that mutate the collection (such as `shift`, `pop`, `prepend` etc.) are **not** available on the `LazyCollection` class.\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3348
# File: docs/master/collections.md, line: 3364
#. type: Plain text
#, no-wrap
msgid "<a name=\"lazy-collection-methods\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3348
# File: docs/master/collections.md, line: 3364
#. type: Title ###
#, no-wrap
msgid "Lazy Collection Methods"
msgstr ""

# File: docs/8.x/collections.md, line: 3351
# File: docs/master/collections.md, line: 3367
#. type: Plain text
msgid "In addition to the methods defined in the `Enumerable` contract, the `LazyCollection` class contains the following methods:"
msgstr ""

# File: docs/8.x/collections.md, line: 3353
# File: docs/master/collections.md, line: 3369
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-takeUntilTimeout\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3353
# File: docs/master/collections.md, line: 3369
#. type: Title ####
#, no-wrap
msgid "`takeUntilTimeout()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3356
# File: docs/master/collections.md, line: 3372
#. type: Plain text
msgid "The `takeUntilTimeout` method returns a new lazy collection that will enumerate values until the specified time. After that time, the collection will then stop enumerating:"
msgstr ""

# File: docs/8.x/collections.md, line: 3359
# File: docs/master/collections.md, line: 3375
#. type: Plain text
#, no-wrap
msgid "    $lazyCollection = LazyCollection::times(INF)\n"
"        ->takeUntilTimeout(now()->addMinute());\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3362
# File: docs/master/collections.md, line: 3378
#. type: Plain text
#, no-wrap
msgid "    $lazyCollection->each(function ($number) {\n"
"        dump($number);\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3365
# File: docs/master/collections.md, line: 3381
#. type: Plain text
#, no-wrap
msgid "        sleep(1);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3371
# File: docs/master/collections.md, line: 3387
#. type: Plain text
#, no-wrap
msgid "    // 1\n"
"    // 2\n"
"    // ...\n"
"    // 58\n"
"    // 59\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3373
# File: docs/master/collections.md, line: 3389
#. type: Plain text
msgid "To illustrate the usage of this method, imagine an application that submits invoices from the database using a cursor. You could define a [scheduled task](/docs/{{version}}/scheduling) that runs every 15 minutes and only processes invoices for a maximum of 14 minutes:"
msgstr ""

# File: docs/8.x/collections.md, line: 3376
# File: docs/master/collections.md, line: 3392
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\Invoice;\n"
"    use Illuminate\\Support\\Carbon;\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3382
# File: docs/master/collections.md, line: 3398
#. type: Plain text
#, no-wrap
msgid "    Invoice::pending()->cursor()\n"
"        ->takeUntilTimeout(\n"
"            Carbon::createFromTimestamp(LARAVEL_START)->add(14, 'minutes')\n"
"        )\n"
"        ->each(fn ($invoice) => $invoice->submit());\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3384
# File: docs/master/collections.md, line: 3400
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-tapEach\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3384
# File: docs/master/collections.md, line: 3400
#. type: Title ####
#, no-wrap
msgid "`tapEach()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3387
# File: docs/master/collections.md, line: 3403
#. type: Plain text
msgid "While the `each` method calls the given callback for each item in the collection right away, the `tapEach` method only calls the given callback as the items are being pulled out of the list one by one:"
msgstr ""

# File: docs/8.x/collections.md, line: 3392
# File: docs/master/collections.md, line: 3408
#. type: Plain text
#, no-wrap
msgid "    // Nothing has been dumped so far...\n"
"    $lazyCollection = LazyCollection::times(INF)->tapEach(function ($value) {\n"
"        dump($value);\n"
"    });\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3395
# File: docs/master/collections.md, line: 3411
#. type: Plain text
#, no-wrap
msgid "    // Three items are dumped...\n"
"    $array = $lazyCollection->take(3)->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3399
# File: docs/master/collections.md, line: 3415
#. type: Plain text
#, no-wrap
msgid "    // 1\n"
"    // 2\n"
"    // 3\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3401
# File: docs/master/collections.md, line: 3417
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-remember\"></a>\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3401
# File: docs/master/collections.md, line: 3417
#. type: Title ####
#, no-wrap
msgid "`remember()` {.collection-method}"
msgstr ""

# File: docs/8.x/collections.md, line: 3404
# File: docs/master/collections.md, line: 3420
#. type: Plain text
msgid "The `remember` method returns a new lazy collection that will remember any values that have already been enumerated and will not retrieve them again on subsequent collection enumerations:"
msgstr ""

# File: docs/8.x/collections.md, line: 3407
# File: docs/master/collections.md, line: 3423
#. type: Plain text
#, no-wrap
msgid "    // No query has been executed yet...\n"
"    $users = User::cursor()->remember();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3411
# File: docs/master/collections.md, line: 3427
#. type: Plain text
#, no-wrap
msgid "    // The query is executed...\n"
"    // The first 5 users are hydrated from the database...\n"
"    $users->take(5)->all();\n"
msgstr ""

# File: docs/8.x/collections.md, line: 3415
# File: docs/master/collections.md, line: 3430
#. type: Plain text
#, no-wrap
msgid "    // First 5 users come from the collection's cache...\n"
"    // The rest are hydrated from the database...\n"
"    $users->take(20)->all();\n"
msgstr ""

# File: docs/master/collections.md, line: 229
#. type: Plain text
msgid "[all](#method-all)  [average](#method-average)  [avg](#method-avg)  [chunk](#method-chunk)  [chunkWhile](#method-chunkwhile)  [collapse](#method-collapse)  [collect](#method-collect)  [combine](#method-combine)  [concat](#method-concat)  [contains](#method-contains)  [containsStrict](#method-containsstrict)  [count](#method-count)  [countBy](#method-countBy)  [crossJoin](#method-crossjoin)  [dd](#method-dd)  [diff](#method-diff)  [diffAssoc](#method-diffassoc)  [diffKeys](#method-diffkeys)  [doesntContain](#method-doesntcontain)  [dump](#method-dump)  [duplicates](#method-duplicates)  [duplicatesStrict](#method-duplicatesstrict)  [each](#method-each)  [eachSpread](#method-eachspread)  [every](#method-every)  [except](#method-except)  [filter](#method-filter)  [first](#method-first)  [firstWhere](#method-first-where)  [flatMap](#method-flatmap)  [flatten](#method-flatten)  [flip](#method-flip)  [forget](#method-forget)  [forPage](#method-forpage)  [get](#method-get)  [groupBy](#method-groupby)  [has](#method-has)  [implode](#method-implode)  [intersect](#method-intersect)  [intersectByKeys](#method-intersectbykeys)  [isEmpty](#method-isempty)  [isNotEmpty](#method-isnotempty)  [join](#method-join)  [keyBy](#method-keyby)  [keys](#method-keys)  [last](#method-last)  [macro](#method-macro)  [make](#method-make)  [map](#method-map)  [mapInto](#method-mapinto)  [mapSpread](#method-mapspread)  [mapToGroups](#method-maptogroups)  [mapWithKeys](#method-mapwithkeys)  [max](#method-max)  [median](#method-median)  [merge](#method-merge)  [mergeRecursive](#method-mergerecursive)  [min](#method-min)  [mode](#method-mode)  [nth](#method-nth)  [only](#method-only)  [pad](#method-pad)  [partition](#method-partition)  [pipe](#method-pipe)  [pipeInto](#method-pipeinto)  [pipeThrough](#method-pipethrough)  [pluck](#method-pluck)  [pop](#method-pop)  [prepend](#method-prepend)  [pull](#method-pull)  [push](#method-push)  [put](#method-put)  [random](#method-random)  [range](#method-range)  [reduce](#method-reduce)  [reduceMany](#method-reduce-many)  [reduceSpread](#method-reduce-spread)  [reject](#method-reject)  [replace](#method-replace)  [replaceRecursive](#method-replacerecursive)  [reverse](#method-reverse)  [search](#method-search)  [shift](#method-shift)  [shuffle](#method-shuffle)  [sliding](#method-sliding)  [skip](#method-skip)  [skipUntil](#method-skipuntil)  [skipWhile](#method-skipwhile)  [slice](#method-slice)  [sole](#method-sole)  [some](#method-some)  [sort](#method-sort)  [sortBy](#method-sortby)  [sortByDesc](#method-sortbydesc)  [sortDesc](#method-sortdesc)  [sortKeys](#method-sortkeys)  [sortKeysDesc](#method-sortkeysdesc)  [sortKeysUsing](#method-sortkeysusing)  [splice](#method-splice)  [split](#method-split)  [splitIn](#method-splitin)  [sum](#method-sum)  [take](#method-take)  [takeUntil](#method-takeuntil)  [takeWhile](#method-takewhile)  [tap](#method-tap)  [times](#method-times)  [toArray](#method-toarray)  [toJson](#method-tojson)  [transform](#method-transform)  [undot](#method-undot)  [union](#method-union)  [unique](#method-unique)  [uniqueStrict](#method-uniquestrict)  [unless](#method-unless)  [unlessEmpty](#method-unlessempty)  [unlessNotEmpty](#method-unlessnotempty)  [unwrap](#method-unwrap)  [values](#method-values)  [when](#method-when)  [whenEmpty](#method-whenempty)  [whenNotEmpty](#method-whennotempty)  [where](#method-where)  [whereStrict](#method-wherestrict)  [whereBetween](#method-wherebetween)  [whereIn](#method-wherein)  [whereInStrict](#method-whereinstrict)  [whereInstanceOf](#method-whereinstanceof)  [whereNotBetween](#method-wherenotbetween)  [whereNotIn](#method-wherenotin)  [whereNotInStrict](#method-wherenotinstrict)  [whereNotNull](#method-wherenotnull)  [whereNull](#method-wherenull)  [wrap](#method-wrap)  [zip](#method-zip)"
msgstr ""

# File: docs/master/collections.md, line: 1822
#. type: Plain text
#, no-wrap
msgid "<a name=\"method-reduce-many\"></a>\n"
msgstr ""

# File: docs/master/collections.md, line: 1822
#. type: Title ####
#, no-wrap
msgid "`reduceMany()` {.collection-method}"
msgstr ""

# File: docs/master/collections.md, line: 1825
#. type: Plain text
msgid "The `reduceMany` method reduces the collection to an array of values, passing the results of each iteration into the subsequent iteration. This method is similar to the `reduce` method; however, it can accept multiple initial values:"
msgstr ""

# File: docs/master/collections.md, line: 1831
#. type: Plain text
#, no-wrap
msgid "    [$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"        ->get()\n"
"        ->reduceMany(function ($creditsRemaining, $batch, $image) {\n"
"            if ($creditsRemaining >= $image->creditsRequired()) {\n"
"                $batch->push($image);\n"
msgstr ""

# File: docs/master/collections.md, line: 1834
# File: docs/master/collections.md, line: 1851
#. type: Plain text
#, no-wrap
msgid "                $creditsRemaining -= $image->creditsRequired();\n"
"            }\n"
msgstr ""

# File: docs/master/collections.md, line: 1837
# File: docs/master/collections.md, line: 1854
#. type: Plain text
#, no-wrap
msgid "            return [$creditsRemaining, $batch];\n"
"        }, $creditsAvailable, collect());\n"
msgstr ""

# File: docs/master/collections.md, line: 1848
#. type: Plain text
#, no-wrap
msgid "    [$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n"
"        ->get()\n"
"        ->reduceSpread(function ($creditsRemaining, $batch, $image) {\n"
"            if ($creditsRemaining >= $image->creditsRequired()) {\n"
"                $batch->push($image);\n"
msgstr ""

