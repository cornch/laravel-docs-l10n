msgid ""
msgstr ""

# H1
#: ./docs/8.x/container.md:1
#: ./docs/9.x/container.md:1
#: ./docs/10.x/container.md:1
#: ./docs/11.x/container.md:1
#: ./docs/master/container.md:1
msgid "Service Container"
msgstr ""

# P
#: ./docs/8.x/container.md:3
#: ./docs/9.x/container.md:3
#: ./docs/10.x/container.md:3
#: ./docs/11.x/container.md:3
#: ./docs/master/container.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/container.md:4
#: ./docs/9.x/container.md:4
#: ./docs/10.x/container.md:4
#: ./docs/11.x/container.md:4
#: ./docs/master/container.md:4
msgid "[Zero Configuration Resolution](#zero-configuration-resolution)"
msgstr ""

# P
#: ./docs/10.x/container.md:5
#: ./docs/11.x/container.md:5
#: ./docs/master/container.md:5
msgid "[When to Utilize the Container](#when-to-use-the-container)"
msgstr ""

# P
#: ./docs/8.x/container.md:5
#: ./docs/9.x/container.md:5
msgid "[When To Use The Container](#when-to-use-the-container)"
msgstr ""

# P
#: ./docs/8.x/container.md:6
#: ./docs/9.x/container.md:6
#: ./docs/10.x/container.md:6
#: ./docs/11.x/container.md:6
#: ./docs/master/container.md:6
msgid "[Binding](#binding)"
msgstr ""

# P
#: ./docs/8.x/container.md:7
#: ./docs/9.x/container.md:7
#: ./docs/10.x/container.md:7
#: ./docs/11.x/container.md:7
#: ./docs/master/container.md:7
msgid "[Binding Basics](#binding-basics)"
msgstr ""

# P
#: ./docs/10.x/container.md:8
#: ./docs/11.x/container.md:8
#: ./docs/master/container.md:8
msgid "[Binding Interfaces to Implementations](#binding-interfaces-to-implementations)"
msgstr ""

# P
#: ./docs/8.x/container.md:8
#: ./docs/9.x/container.md:8
msgid "[Binding Interfaces To Implementations](#binding-interfaces-to-implementations)"
msgstr ""

# P
#: ./docs/8.x/container.md:9
#: ./docs/9.x/container.md:9
#: ./docs/10.x/container.md:9
#: ./docs/11.x/container.md:9
#: ./docs/master/container.md:9
msgid "[Contextual Binding](#contextual-binding)"
msgstr ""

# P
#: ./docs/11.x/container.md:10
msgid "[Contextual Attributes](#contextual-attributes)"
msgstr ""

# P
#: ./docs/8.x/container.md:10
#: ./docs/9.x/container.md:10
#: ./docs/10.x/container.md:10
#: ./docs/11.x/container.md:11
#: ./docs/master/container.md:10
msgid "[Binding Primitives](#binding-primitives)"
msgstr ""

# P
#: ./docs/8.x/container.md:11
#: ./docs/9.x/container.md:11
#: ./docs/10.x/container.md:11
#: ./docs/11.x/container.md:12
#: ./docs/master/container.md:11
msgid "[Binding Typed Variadics](#binding-typed-variadics)"
msgstr ""

# P
#: ./docs/8.x/container.md:12
#: ./docs/9.x/container.md:12
#: ./docs/10.x/container.md:12
#: ./docs/11.x/container.md:13
#: ./docs/master/container.md:12
msgid "[Tagging](#tagging)"
msgstr ""

# P
#: ./docs/8.x/container.md:13
#: ./docs/9.x/container.md:13
#: ./docs/10.x/container.md:13
#: ./docs/11.x/container.md:14
#: ./docs/master/container.md:13
msgid "[Extending Bindings](#extending-bindings)"
msgstr ""

# P
#: ./docs/8.x/container.md:14
#: ./docs/9.x/container.md:14
#: ./docs/10.x/container.md:14
#: ./docs/11.x/container.md:15
#: ./docs/master/container.md:14
msgid "[Resolving](#resolving)"
msgstr ""

# P
#: ./docs/8.x/container.md:15
#: ./docs/9.x/container.md:15
#: ./docs/10.x/container.md:15
#: ./docs/11.x/container.md:16
#: ./docs/master/container.md:15
msgid "[The Make Method](#the-make-method)"
msgstr ""

# P
#: ./docs/8.x/container.md:16
#: ./docs/9.x/container.md:16
#: ./docs/10.x/container.md:16
#: ./docs/11.x/container.md:17
#: ./docs/master/container.md:16
msgid "[Automatic Injection](#automatic-injection)"
msgstr ""

# P
#: ./docs/10.x/container.md:17
#: ./docs/11.x/container.md:18
#: ./docs/master/container.md:17
msgid "[Method Invocation and Injection](#method-invocation-and-injection)"
msgstr ""

# P
#: ./docs/8.x/container.md:17
#: ./docs/9.x/container.md:17
msgid "[Method Invocation & Injection](#method-invocation-and-injection)"
msgstr ""

# P
#: ./docs/8.x/container.md:18
#: ./docs/9.x/container.md:18
#: ./docs/10.x/container.md:18
#: ./docs/11.x/container.md:19
#: ./docs/master/container.md:18
msgid "[Container Events](#container-events)"
msgstr ""

# P
#: ./docs/8.x/container.md:19
#: ./docs/9.x/container.md:19
#: ./docs/10.x/container.md:19
#: ./docs/11.x/container.md:21
#: ./docs/master/container.md:19
msgid "[PSR-11](#psr-11)"
msgstr ""

# P
#: ./docs/11.x/container.md:20
msgid "[Rebinding](#rebinding)"
msgstr ""

# P
#: ./docs/8.x/container.md:21
#: ./docs/9.x/container.md:21
#: ./docs/10.x/container.md:21
#: ./docs/11.x/container.md:23
#: ./docs/master/container.md:21
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/container.md:22
#: ./docs/9.x/container.md:22
#: ./docs/10.x/container.md:22
#: ./docs/11.x/container.md:24
#: ./docs/master/container.md:22
msgid "Introduction"
msgstr ""

# P
#: ./docs/8.x/container.md:24
#: ./docs/9.x/container.md:24
#: ./docs/10.x/container.md:24
#: ./docs/11.x/container.md:26
#: ./docs/master/container.md:24
msgid "The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. Dependency injection is a fancy phrase that essentially means this: class dependencies are \"injected\" into the class via the constructor or, in some cases, \"setter\" methods."
msgstr ""

# P
#: ./docs/8.x/container.md:26
#: ./docs/9.x/container.md:26
#: ./docs/10.x/container.md:26
#: ./docs/11.x/container.md:28
#: ./docs/master/container.md:26
msgid "Let's look at a simple example:"
msgstr ""

# CODE
#: ./docs/10.x/container.md:28
#: ./docs/master/container.md:28
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected UserRepository $users,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     */\n"
"    public function show(string $id): View\n"
"    {\n"
"        $user = $this->users->find($id);\n"
"\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/container.md:28
#: ./docs/9.x/container.md:28
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n"
"\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        $user = $this->users->find($id);\n"
"\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/11.x/container.md:30
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Services\\AppleMusic;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class PodcastController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected AppleMusic $apple,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Show information about the given podcast.\n"
"     */\n"
"    public function show(string $id): View\n"
"    {\n"
"        return view('podcasts.show', [\n"
"            'podcast' => $this->apple->findPodcast($id)\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/11.x/container.md:57
msgid "In this example, the `PodcastController` needs to retrieve podcasts from a data source such as Apple Music. So, we will **inject** a service that is able to retrieve podcasts. Since the service is injected, we are able to easily \"mock\", or create a dummy implementation of the `AppleMusic` service when testing our application."
msgstr ""

# CODE
#: ./docs/10.x/container.md:66
#: ./docs/11.x/container.md:66
#: ./docs/master/container.md:66
msgid ""
"<?php\n"
"\n"
"class Service\n"
"{\n"
"    // ...\n"
"}\n"
"\n"
"Route::get('/', function (Service $service) {\n"
"    die($service::class);\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:70
#: ./docs/9.x/container.md:70
#: ./docs/10.x/container.md:57
#: ./docs/master/container.md:57
msgid "In this example, the `UserController` needs to retrieve users from a data source. So, we will **inject** a service that is able to retrieve users. In this context, our `UserRepository` most likely uses [Eloquent](/docs/{{version}}/eloquent) to retrieve user information from the database. However, since the repository is injected, we are able to easily swap it out with another implementation. We are also able to easily \"mock\", or create a dummy implementation of the `UserRepository` when testing our application."
msgstr ""

# P
#: ./docs/8.x/container.md:72
#: ./docs/9.x/container.md:72
#: ./docs/10.x/container.md:59
#: ./docs/11.x/container.md:59
#: ./docs/master/container.md:59
msgid "A deep understanding of the Laravel service container is essential to building a powerful, large application, as well as for contributing to the Laravel core itself."
msgstr ""

# P
#: ./docs/8.x/container.md:74
#: ./docs/9.x/container.md:74
#: ./docs/10.x/container.md:61
#: ./docs/11.x/container.md:61
#: ./docs/master/container.md:61
#~ msgid "<a name=\"zero-configuration-resolution\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:75
#: ./docs/9.x/container.md:75
#: ./docs/10.x/container.md:62
#: ./docs/11.x/container.md:62
#: ./docs/master/container.md:62
msgid "Zero Configuration Resolution"
msgstr ""

# P
#: ./docs/8.x/container.md:77
#: ./docs/9.x/container.md:77
#: ./docs/10.x/container.md:64
#: ./docs/11.x/container.md:64
#: ./docs/master/container.md:64
msgid "If a class has no dependencies or only depends on other concrete classes (not interfaces), the container does not need to be instructed on how to resolve that class. For example, you may place the following code in your `routes/web.php` file:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:79
#: ./docs/9.x/container.md:79
msgid ""
"<?php\n"
"\n"
"class Service\n"
"{\n"
"    //\n"
"}\n"
"\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});"
msgstr ""

# H3
#: ./docs/10.x/container.md:82
#: ./docs/11.x/container.md:82
#: ./docs/master/container.md:82
msgid "When to Utilize the Container"
msgstr ""

# P
#: ./docs/8.x/container.md:90
#: ./docs/9.x/container.md:90
#: ./docs/10.x/container.md:77
#: ./docs/11.x/container.md:77
#: ./docs/master/container.md:77
msgid "In this example, hitting your application's `/` route will automatically resolve the `Service` class and inject it into your route's handler. This is game changing. It means you can develop your application and take advantage of dependency injection without worrying about bloated configuration files."
msgstr ""

# P
#: ./docs/8.x/container.md:92
#: ./docs/9.x/container.md:92
#: ./docs/10.x/container.md:79
#: ./docs/11.x/container.md:79
#: ./docs/master/container.md:79
msgid "Thankfully, many of the classes you will be writing when building a Laravel application automatically receive their dependencies via the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). Once you taste the power of automatic and zero configuration dependency injection it feels impossible to develop without it."
msgstr ""

# P
#: ./docs/8.x/container.md:94
#: ./docs/9.x/container.md:94
#: ./docs/10.x/container.md:81
#: ./docs/11.x/container.md:81
#: ./docs/master/container.md:81
#~ msgid "<a name=\"when-to-use-the-container\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:95
#: ./docs/9.x/container.md:95
msgid "When To Use The Container"
msgstr ""

# P
#: ./docs/8.x/container.md:97
#: ./docs/9.x/container.md:97
#: ./docs/10.x/container.md:84
#: ./docs/11.x/container.md:84
#: ./docs/master/container.md:84
msgid "Thanks to zero configuration resolution, you will often type-hint dependencies on routes, controllers, event listeners, and elsewhere without ever manually interacting with the container. For example, you might type-hint the `Illuminate\\Http\\Request` object on your route definition so that you can easily access the current request. Even though we never have to interact with the container to write this code, it is managing the injection of these dependencies behind the scenes:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:99
#: ./docs/9.x/container.md:99
#: ./docs/10.x/container.md:86
#: ./docs/11.x/container.md:86
#: ./docs/master/container.md:86
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/', function (Request $request) {\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:105
#: ./docs/9.x/container.md:105
#: ./docs/10.x/container.md:92
#: ./docs/11.x/container.md:92
#: ./docs/master/container.md:92
msgid "In many cases, thanks to automatic dependency injection and [facades](/docs/{{version}}/facades), you can build Laravel applications without **ever** manually binding or resolving anything from the container. **So, when would you ever manually interact with the container?** Let's examine two situations."
msgstr ""

# P
#: ./docs/8.x/container.md:107
#: ./docs/9.x/container.md:107
#: ./docs/10.x/container.md:94
#: ./docs/11.x/container.md:94
#: ./docs/master/container.md:94
msgid "First, if you write a class that implements an interface and you wish to type-hint that interface on a route or class constructor, you must [tell the container how to resolve that interface](#binding-interfaces-to-implementations). Secondly, if you are [writing a Laravel package](/docs/{{version}}/packages) that you plan to share with other Laravel developers, you may need to bind your package's services into the container."
msgstr ""

# CODE
#: ./docs/10.x/container.md:109
#: ./docs/11.x/container.md:109
#: ./docs/master/container.md:109
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:109
#: ./docs/9.x/container.md:109
#: ./docs/10.x/container.md:96
#: ./docs/11.x/container.md:96
#: ./docs/master/container.md:96
#~ msgid "<a name=\"binding\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/container.md:110
#: ./docs/9.x/container.md:110
#: ./docs/10.x/container.md:97
#: ./docs/11.x/container.md:97
#: ./docs/master/container.md:97
msgid "Binding"
msgstr ""

# P
#: ./docs/8.x/container.md:112
#: ./docs/9.x/container.md:112
#: ./docs/10.x/container.md:99
#: ./docs/11.x/container.md:99
#: ./docs/master/container.md:99
#~ msgid "<a name=\"binding-basics\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:113
#: ./docs/9.x/container.md:113
#: ./docs/10.x/container.md:100
#: ./docs/11.x/container.md:100
#: ./docs/master/container.md:100
msgid "Binding Basics"
msgstr ""

# P
#: ./docs/8.x/container.md:115
#: ./docs/9.x/container.md:115
#: ./docs/10.x/container.md:102
#: ./docs/11.x/container.md:102
#: ./docs/master/container.md:102
#~ msgid "<a name=\"simple-bindings\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/container.md:116
#: ./docs/9.x/container.md:116
#: ./docs/10.x/container.md:103
#: ./docs/11.x/container.md:103
#: ./docs/master/container.md:103
msgid "Simple Bindings"
msgstr ""

# P
#: ./docs/8.x/container.md:118
#: ./docs/9.x/container.md:118
#: ./docs/10.x/container.md:105
#: ./docs/11.x/container.md:105
#: ./docs/master/container.md:105
msgid "Almost all of your service container bindings will be registered within [service providers](/docs/{{version}}/providers), so most of these examples will demonstrate using the container in that context."
msgstr ""

# P
#: ./docs/8.x/container.md:120
#: ./docs/9.x/container.md:120
#: ./docs/10.x/container.md:107
#: ./docs/11.x/container.md:107
#: ./docs/master/container.md:107
msgid "Within a service provider, you always have access to the container via the `$this->app` property. We can register a binding using the `bind` method, passing the class or interface name that we wish to register along with a closure that returns an instance of the class:"
msgstr ""

# CODE
#: ./docs/10.x/container.md:121
#: ./docs/11.x/container.md:121
#: ./docs/master/container.md:121
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"App::bind(Transistor::class, function (Application $app) {\n"
"    // ...\n"
"});"
msgstr ""

# CODE
#: ./docs/8.x/container.md:122
#: ./docs/9.x/container.md:122
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$this->app->bind(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/10.x/container.md:129
#: ./docs/11.x/container.md:129
#: ./docs/master/container.md:129
msgid "You may use the `bindIf` method to register a container binding only if a binding has not already been registered for the given type:"
msgstr ""

# P
#: ./docs/8.x/container.md:129
#: ./docs/9.x/container.md:129
#: ./docs/10.x/container.md:117
#: ./docs/11.x/container.md:117
#: ./docs/master/container.md:117
msgid "Note that we receive the container itself as an argument to the resolver. We can then use the container to resolve sub-dependencies of the object we are building."
msgstr ""

# CODE: php
#: ./docs/10.x/container.md:131
#: ./docs/11.x/container.md:131
#: ./docs/master/container.md:131
msgid ""
"$this->app->bindIf(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:131
#: ./docs/9.x/container.md:131
#: ./docs/10.x/container.md:119
#: ./docs/11.x/container.md:119
#: ./docs/master/container.md:119
msgid "As mentioned, you will typically be interacting with the container within service providers; however, if you would like to interact with the container outside of a service provider, you may do so via the `App` [facade](/docs/{{version}}/facades):"
msgstr ""

# CODE
#: ./docs/8.x/container.md:133
#: ./docs/9.x/container.md:133
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"App::bind(Transistor::class, function ($app) {\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:140
#: ./docs/9.x/container.md:141
#: ./docs/10.x/container.md:138
#: ./docs/11.x/container.md:138
#: ./docs/master/container.md:138
msgid "There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection."
msgstr ""

# P
#: ./docs/8.x/container.md:142
#: ./docs/9.x/container.md:143
#: ./docs/10.x/container.md:140
#: ./docs/11.x/container.md:140
#: ./docs/master/container.md:140
#~ msgid "<a name=\"binding-a-singleton\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/container.md:143
#: ./docs/9.x/container.md:144
#: ./docs/10.x/container.md:141
#: ./docs/11.x/container.md:141
#: ./docs/master/container.md:141
msgid "Binding A Singleton"
msgstr ""

# CODE
#: ./docs/10.x/container.md:145
#: ./docs/11.x/container.md:145
#: ./docs/master/container.md:145
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->singleton(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:145
#: ./docs/9.x/container.md:146
#: ./docs/10.x/container.md:143
#: ./docs/11.x/container.md:143
#: ./docs/master/container.md:143
msgid "The `singleton` method binds a class or interface into the container that should only be resolved one time. Once a singleton binding is resolved, the same object instance will be returned on subsequent calls into the container:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:147
#: ./docs/9.x/container.md:148
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$this->app->singleton(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/10.x/container.md:153
#: ./docs/11.x/container.md:153
#: ./docs/master/container.md:153
msgid "You may use the `singletonIf` method to register a singleton container binding only if a binding has not already been registered for the given type:"
msgstr ""

# P
#: ./docs/8.x/container.md:154
#: ./docs/9.x/container.md:155
#: ./docs/10.x/container.md:161
#: ./docs/11.x/container.md:161
#: ./docs/master/container.md:161
#~ msgid "<a name=\"binding-scoped\"></a>"
#~ msgstr ""

# CODE: php
#: ./docs/10.x/container.md:155
#: ./docs/11.x/container.md:155
#: ./docs/master/container.md:155
msgid ""
"$this->app->singletonIf(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# H4
#: ./docs/8.x/container.md:155
#: ./docs/9.x/container.md:156
#: ./docs/10.x/container.md:162
#: ./docs/11.x/container.md:162
#: ./docs/master/container.md:162
msgid "Binding Scoped Singletons"
msgstr ""

# P
#: ./docs/8.x/container.md:157
#: ./docs/9.x/container.md:158
#: ./docs/10.x/container.md:164
#: ./docs/11.x/container.md:164
#: ./docs/master/container.md:164
msgid "The `scoped` method binds a class or interface into the container that should only be resolved one time within a given Laravel request / job lifecycle. While this method is similar to the `singleton` method, instances registered using the `scoped` method will be flushed whenever the Laravel application starts a new \"lifecycle\", such as when a [Laravel Octane](/docs/{{version}}/octane) worker processes a new request or when a Laravel [queue worker](/docs/{{version}}/queues) processes a new job:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:159
#: ./docs/9.x/container.md:160
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$this->app->scoped(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/container.md:166
#: ./docs/11.x/container.md:166
#: ./docs/master/container.md:166
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->scoped(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:166
#: ./docs/9.x/container.md:167
#: ./docs/10.x/container.md:174
#: ./docs/11.x/container.md:180
#: ./docs/master/container.md:174
#~ msgid "<a name=\"binding-instances\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/container.md:167
#: ./docs/9.x/container.md:168
#: ./docs/10.x/container.md:175
#: ./docs/11.x/container.md:181
#: ./docs/master/container.md:175
msgid "Binding Instances"
msgstr ""

# P
#: ./docs/8.x/container.md:169
#: ./docs/9.x/container.md:170
#: ./docs/10.x/container.md:177
#: ./docs/11.x/container.md:183
#: ./docs/master/container.md:177
msgid "You may also bind an existing object instance into the container using the `instance` method. The given instance will always be returned on subsequent calls into the container:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:171
#: ./docs/9.x/container.md:172
#: ./docs/10.x/container.md:179
#: ./docs/11.x/container.md:185
#: ./docs/master/container.md:179
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$service = new Transistor(new PodcastParser);\n"
"\n"
"$this->app->instance(Transistor::class, $service);"
msgstr ""

# P
#: ./docs/11.x/container.md:174
msgid "You may use the `scopedIf` method to register a scoped container binding only if a binding has not already been registered for the given type:"
msgstr ""

# CODE
#: ./docs/11.x/container.md:176
msgid ""
"$this->app->scopedIf(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:178
#: ./docs/9.x/container.md:179
#: ./docs/10.x/container.md:186
#: ./docs/11.x/container.md:192
#: ./docs/master/container.md:186
#~ msgid "<a name=\"binding-interfaces-to-implementations\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:179
#: ./docs/9.x/container.md:180
msgid "Binding Interfaces To Implementations"
msgstr ""

# P
#: ./docs/8.x/container.md:181
#: ./docs/9.x/container.md:182
#: ./docs/10.x/container.md:189
#: ./docs/11.x/container.md:195
#: ./docs/master/container.md:189
msgid "A very powerful feature of the service container is its ability to bind an interface to a given implementation. For example, let's assume we have an `EventPusher` interface and a `RedisEventPusher` implementation. Once we have coded our `RedisEventPusher` implementation of this interface, we can register it with the service container like so:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:183
#: ./docs/9.x/container.md:184
#: ./docs/10.x/container.md:191
#: ./docs/11.x/container.md:197
#: ./docs/master/container.md:191
msgid ""
"use App\\Contracts\\EventPusher;\n"
"use App\\Services\\RedisEventPusher;\n"
"\n"
"$this->app->bind(EventPusher::class, RedisEventPusher::class);"
msgstr ""

# H3
#: ./docs/10.x/container.md:187
#: ./docs/11.x/container.md:193
#: ./docs/master/container.md:187
msgid "Binding Interfaces to Implementations"
msgstr ""

# P
#: ./docs/8.x/container.md:188
#: ./docs/9.x/container.md:189
#: ./docs/10.x/container.md:196
#: ./docs/11.x/container.md:202
#: ./docs/master/container.md:196
msgid "This statement tells the container that it should inject the `RedisEventPusher` when a class needs an implementation of `EventPusher`. Now we can type-hint the `EventPusher` interface in the constructor of a class that is resolved by the container. Remember, controllers, event listeners, middleware, and various other types of classes within Laravel applications are always resolved using the container:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:190
#: ./docs/9.x/container.md:191
msgid ""
"use App\\Contracts\\EventPusher;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\App\\Contracts\\EventPusher  $pusher\n"
" * @return void\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/container.md:198
#: ./docs/master/container.md:198
msgid ""
"use App\\Contracts\\EventPusher;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(\n"
"    protected EventPusher $pusher\n"
") {}"
msgstr ""

# P
#: ./docs/8.x/container.md:203
#: ./docs/9.x/container.md:204
#: ./docs/10.x/container.md:207
#: ./docs/11.x/container.md:213
#: ./docs/master/container.md:207
#~ msgid "<a name=\"contextual-binding\"></a>"
#~ msgstr ""

# CODE
#: ./docs/11.x/container.md:204
msgid ""
"use App\\Contracts\\EventPusher;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(\n"
"    protected EventPusher $pusher,\n"
") {}"
msgstr ""

# H3
#: ./docs/8.x/container.md:204
#: ./docs/9.x/container.md:205
#: ./docs/10.x/container.md:208
#: ./docs/11.x/container.md:214
#: ./docs/master/container.md:208
msgid "Contextual Binding"
msgstr ""

# P
#: ./docs/8.x/container.md:206
#: ./docs/9.x/container.md:207
#: ./docs/10.x/container.md:210
#: ./docs/11.x/container.md:216
#: ./docs/master/container.md:210
msgid "Sometimes you may have two classes that utilize the same interface, but you wish to inject different implementations into each class. For example, two controllers may depend on different implementations of the `Illuminate\\Contracts\\Filesystem\\Filesystem` [contract](/docs/{{version}}/contracts). Laravel provides a simple, fluent interface for defining this behavior:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:208
#: ./docs/9.x/container.md:209
#: ./docs/10.x/container.md:212
#: ./docs/11.x/container.md:218
#: ./docs/master/container.md:212
msgid ""
"use App\\Http\\Controllers\\PhotoController;\n"
"use App\\Http\\Controllers\\UploadController;\n"
"use App\\Http\\Controllers\\VideoController;\n"
"use Illuminate\\Contracts\\Filesystem\\Filesystem;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$this->app->when(PhotoController::class)\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('local');\n"
"          });\n"
"\n"
"$this->app->when([VideoController::class, UploadController::class])\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('s3');\n"
"          });"
msgstr ""

# P
#: ./docs/8.x/container.md:226
#: ./docs/9.x/container.md:227
#: ./docs/10.x/container.md:230
#: ./docs/11.x/container.md:344
#: ./docs/master/container.md:230
#~ msgid "<a name=\"binding-primitives\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:227
#: ./docs/9.x/container.md:228
#: ./docs/10.x/container.md:231
#: ./docs/11.x/container.md:345
#: ./docs/master/container.md:231
msgid "Binding Primitives"
msgstr ""

# P
#: ./docs/8.x/container.md:229
#: ./docs/9.x/container.md:230
#: ./docs/10.x/container.md:233
#: ./docs/11.x/container.md:347
#: ./docs/master/container.md:233
msgid "Sometimes you may have a class that receives some injected classes, but also needs an injected primitive value such as an integer. You may easily use contextual binding to inject any value your class may need:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:231
msgid ""
"$this->app->when('App\\Http\\Controllers\\UserController')\n"
"          ->needs('$variableName')\n"
"          ->give($value);"
msgstr ""

# CODE
#: ./docs/9.x/container.md:232
#: ./docs/10.x/container.md:235
#: ./docs/11.x/container.md:349
#: ./docs/master/container.md:235
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"$this->app->when(UserController::class)\n"
"          ->needs('$variableName')\n"
"          ->give($value);"
msgstr ""

# P
#: ./docs/8.x/container.md:235
#: ./docs/9.x/container.md:238
#: ./docs/10.x/container.md:241
#: ./docs/11.x/container.md:355
#: ./docs/master/container.md:241
msgid "Sometimes a class may depend on an array of [tagged](#tagging) instances. Using the `giveTagged` method, you may easily inject all of the container bindings with that tag:"
msgstr ""

# P
#: ./docs/11.x/container.md:236
#~ msgid "<a name=\"contextual-attributes\"></a>"
#~ msgstr ""

# H3
#: ./docs/11.x/container.md:237
msgid "Contextual Attributes"
msgstr ""

# CODE
#: ./docs/8.x/container.md:237
#: ./docs/9.x/container.md:240
#: ./docs/10.x/container.md:243
#: ./docs/11.x/container.md:357
#: ./docs/master/container.md:243
msgid ""
"$this->app->when(ReportAggregator::class)\n"
"    ->needs('$reports')\n"
"    ->giveTagged('reports');"
msgstr ""

# P
#: ./docs/11.x/container.md:239
msgid "Since contextual binding is often used to inject implementations of drivers or configuration values, Laravel offers a variety of contextual binding attributes that allow to inject these types of values without manually defining the contextual bindings in your service providers."
msgstr ""

# P
#: ./docs/11.x/container.md:241
msgid "For example, the `Storage` attribute may be used to inject a specific [storage disk](/docs/{{version}}/filesystem):"
msgstr ""

# P
#: ./docs/8.x/container.md:241
#: ./docs/9.x/container.md:244
#: ./docs/10.x/container.md:247
#: ./docs/11.x/container.md:361
#: ./docs/master/container.md:247
msgid "If you need to inject a value from one of your application's configuration files, you may use the `giveConfig` method:"
msgstr ""

# CODE: php
#: ./docs/11.x/container.md:243
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use Illuminate\\Container\\Attributes\\Storage;\n"
"use Illuminate\\Contracts\\Filesystem\\Filesystem;\n"
"\n"
"class PhotoController extends Controller\n"
"{\n"
"    public function __construct(\n"
"        #[Storage('local')] protected Filesystem $filesystem\n"
"    )\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/container.md:243
#: ./docs/9.x/container.md:246
#: ./docs/10.x/container.md:249
#: ./docs/11.x/container.md:363
#: ./docs/master/container.md:249
msgid ""
"$this->app->when(ReportAggregator::class)\n"
"    ->needs('$timezone')\n"
"    ->giveConfig('app.timezone');"
msgstr ""

# P
#: ./docs/8.x/container.md:247
#: ./docs/9.x/container.md:250
#: ./docs/10.x/container.md:253
#: ./docs/11.x/container.md:367
#: ./docs/master/container.md:253
#~ msgid "<a name=\"binding-typed-variadics\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:248
#: ./docs/9.x/container.md:251
#: ./docs/10.x/container.md:254
#: ./docs/11.x/container.md:368
#: ./docs/master/container.md:254
msgid "Binding Typed Variadics"
msgstr ""

# P
#: ./docs/8.x/container.md:250
#: ./docs/9.x/container.md:253
#: ./docs/10.x/container.md:256
#: ./docs/11.x/container.md:370
#: ./docs/master/container.md:256
msgid "Occasionally, you may have a class that receives an array of typed objects using a variadic constructor argument:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:252
#: ./docs/9.x/container.md:255
msgid ""
"<?php\n"
"\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n"
"\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n"
"\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n"
"\n"
"    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\App\\Services\\Logger  $logger\n"
"     * @param  array  $filters\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/container.md:258
#: ./docs/11.x/container.md:372
#: ./docs/master/container.md:258
msgid ""
"<?php\n"
"\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n"
"\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n"
"\n"
"    /**\n"
"     * Create a new class instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected Logger $logger,\n"
"        Filter ...$filters,\n"
"    ) {\n"
"        $this->filters = $filters;\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/11.x/container.md:262
msgid "In addition to the `Storage` attribute, Laravel offers `Auth`, `Cache`, `Config`, `DB`, `Log`, `RouteParameter`, and [`Tag`](#tagging) attributes:"
msgstr ""

# CODE: php
#: ./docs/11.x/container.md:264
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Models\\Photo;\n"
"use Illuminate\\Container\\Attributes\\Auth;\n"
"use Illuminate\\Container\\Attributes\\Cache;\n"
"use Illuminate\\Container\\Attributes\\Config;\n"
"use Illuminate\\Container\\Attributes\\DB;\n"
"use Illuminate\\Container\\Attributes\\Log;\n"
"use Illuminate\\Container\\Attributes\\RouteParameter;\n"
"use Illuminate\\Container\\Attributes\\Tag;\n"
"use Illuminate\\Contracts\\Auth\\Guard;\n"
"use Illuminate\\Contracts\\Cache\\Repository;\n"
"use Illuminate\\Database\\Connection;\n"
"use Psr\\Log\\LoggerInterface;\n"
"\n"
"class PhotoController extends Controller\n"
"{\n"
"    public function __construct(\n"
"        #[Auth('web')] protected Guard $auth,\n"
"        #[Cache('redis')] protected Repository $cache,\n"
"        #[Config('app.timezone')] protected string $timezone,\n"
"        #[DB('mysql')] protected Connection $connection,\n"
"        #[Log('daily')] protected LoggerInterface $log,\n"
"        #[RouteParameter('photo')] protected Photo $photo,\n"
"        #[Tag('reports')] protected iterable $reports,\n"
"    )\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/10.x/container.md:285
#: ./docs/11.x/container.md:399
#: ./docs/master/container.md:285
msgid ""
"$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function (Application $app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });"
msgstr ""

# P
#: ./docs/8.x/container.md:287
#: ./docs/9.x/container.md:290
#: ./docs/10.x/container.md:283
#: ./docs/11.x/container.md:397
#: ./docs/master/container.md:283
msgid "Using contextual binding, you may resolve this dependency by providing the `give` method with a closure that returns an array of resolved `Filter` instances:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:289
#: ./docs/9.x/container.md:292
msgid ""
"$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function ($app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });"
msgstr ""

# P
#: ./docs/11.x/container.md:299
msgid "Furthermore, Laravel provides a `CurrentUser` attribute for injecting the currently authenticated user into a given route or class:"
msgstr ""

# P
#: ./docs/8.x/container.md:299
#: ./docs/9.x/container.md:302
#: ./docs/10.x/container.md:295
#: ./docs/11.x/container.md:409
#: ./docs/master/container.md:295
msgid "For convenience, you may also just provide an array of class names to be resolved by the container whenever `Firewall` needs `Filter` instances:"
msgstr ""

# CODE: php
#: ./docs/11.x/container.md:301
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Container\\Attributes\\CurrentUser;\n"
"\n"
"Route::get('/user', function (#[CurrentUser] User $user) {\n"
"    return $user;\n"
"})->middleware('auth');"
msgstr ""

# CODE
#: ./docs/8.x/container.md:301
#: ./docs/9.x/container.md:304
#: ./docs/10.x/container.md:297
#: ./docs/11.x/container.md:411
#: ./docs/master/container.md:297
msgid ""
"$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give([\n"
"              NullFilter::class,\n"
"              ProfanityFilter::class,\n"
"              TooLongFilter::class,\n"
"          ]);"
msgstr ""

# P
#: ./docs/8.x/container.md:309
#: ./docs/9.x/container.md:312
#: ./docs/10.x/container.md:305
#: ./docs/11.x/container.md:419
#: ./docs/master/container.md:305
#~ msgid "<a name=\"variadic-tag-dependencies\"></a>"
#~ msgstr ""

# P
#: ./docs/11.x/container.md:310
#~ msgid "<a name=\"defining-custom-attributes\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/container.md:310
#: ./docs/9.x/container.md:313
#: ./docs/10.x/container.md:306
#: ./docs/11.x/container.md:420
#: ./docs/master/container.md:306
msgid "Variadic Tag Dependencies"
msgstr ""

# H4
#: ./docs/11.x/container.md:311
msgid "Defining Custom Attributes"
msgstr ""

# P
#: ./docs/8.x/container.md:312
#: ./docs/9.x/container.md:315
#: ./docs/10.x/container.md:308
#: ./docs/11.x/container.md:422
#: ./docs/master/container.md:308
msgid "Sometimes a class may have a variadic dependency that is type-hinted as a given class (`Report ...$reports`). Using the `needs` and `giveTagged` methods, you may easily inject all of the container bindings with that [tag](#tagging) for the given dependency:"
msgstr ""

# P
#: ./docs/11.x/container.md:313
msgid "You can create your own contextual attributes by implementing the `Illuminate\\Contracts\\Container\\ContextualAttribute` contract. The container will call your attribute's `resolve` method, which should resolve the value that should be injected into the class utilizing the attribute. In the example below, we will re-implement Laravel's built-in `Config` attribute:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:314
#: ./docs/9.x/container.md:317
#: ./docs/10.x/container.md:310
#: ./docs/11.x/container.md:424
#: ./docs/master/container.md:310
msgid ""
"$this->app->when(ReportAggregator::class)\n"
"    ->needs(Report::class)\n"
"    ->giveTagged('reports');"
msgstr ""

# CODE
#: ./docs/11.x/container.md:315
msgid ""
"<?php\n"
"\n"
"namespace App\\Attributes;\n"
"\n"
"use Illuminate\\Contracts\\Container\\ContextualAttribute;\n"
"\n"
"#[Attribute(Attribute::TARGET_PARAMETER)]\n"
"class Config implements ContextualAttribute\n"
"{\n"
"    /**\n"
"     * Create a new attribute instance.\n"
"     */\n"
"    public function __construct(public string $key, public mixed $default = null)\n"
"    {\n"
"    }\n"
"\n"
"    /**\n"
"     * Resolve the configuration value.\n"
"     *\n"
"     * @param  self  $attribute\n"
"     * @param  \\Illuminate\\Contracts\\Container\\Container  $container\n"
"     * @return mixed\n"
"     */\n"
"    public static function resolve(self $attribute, Container $container)\n"
"    {\n"
"        return $container->make('config')->get($attribute->key, $attribute->default);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/container.md:318
#: ./docs/9.x/container.md:321
#: ./docs/10.x/container.md:314
#: ./docs/11.x/container.md:428
#: ./docs/master/container.md:314
#~ msgid "<a name=\"tagging\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/container.md:319
#: ./docs/11.x/container.md:433
#: ./docs/master/container.md:319
msgid ""
"$this->app->bind(CpuReport::class, function () {\n"
"    // ...\n"
"});\n"
"\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    // ...\n"
"});\n"
"\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');"
msgstr ""

# H3
#: ./docs/8.x/container.md:319
#: ./docs/9.x/container.md:322
#: ./docs/10.x/container.md:315
#: ./docs/11.x/container.md:429
#: ./docs/master/container.md:315
msgid "Tagging"
msgstr ""

# P
#: ./docs/8.x/container.md:321
#: ./docs/9.x/container.md:324
#: ./docs/10.x/container.md:317
#: ./docs/11.x/container.md:431
#: ./docs/master/container.md:317
msgid "Occasionally, you may need to resolve all of a certain \"category\" of binding. For example, perhaps you are building a report analyzer that receives an array of many different `Report` interface implementations. After registering the `Report` implementations, you can assign them a tag using the `tag` method:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:323
#: ./docs/9.x/container.md:326
msgid ""
"$this->app->bind(CpuReport::class, function () {\n"
"    //\n"
"});\n"
"\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    //\n"
"});\n"
"\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');"
msgstr ""

# CODE
#: ./docs/10.x/container.md:331
#: ./docs/11.x/container.md:445
#: ./docs/master/container.md:331
msgid ""
"$this->app->bind(ReportAnalyzer::class, function (Application $app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:333
#: ./docs/9.x/container.md:336
#: ./docs/10.x/container.md:329
#: ./docs/11.x/container.md:443
#: ./docs/master/container.md:329
msgid "Once the services have been tagged, you may easily resolve them all via the container's `tagged` method:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:335
#: ./docs/9.x/container.md:338
msgid ""
"$this->app->bind(ReportAnalyzer::class, function ($app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:339
#: ./docs/9.x/container.md:342
#: ./docs/10.x/container.md:335
#: ./docs/11.x/container.md:449
#: ./docs/master/container.md:335
#~ msgid "<a name=\"extending-bindings\"></a>"
#~ msgstr ""

# CODE
#: ./docs/10.x/container.md:340
#: ./docs/11.x/container.md:454
#: ./docs/master/container.md:340
msgid ""
"$this->app->extend(Service::class, function (Service $service, Application $app) {\n"
"    return new DecoratedService($service);\n"
"});"
msgstr ""

# H3
#: ./docs/8.x/container.md:340
#: ./docs/9.x/container.md:343
#: ./docs/10.x/container.md:336
#: ./docs/11.x/container.md:450
#: ./docs/master/container.md:336
msgid "Extending Bindings"
msgstr ""

# P
#: ./docs/8.x/container.md:342
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts a closure, which should return the modified service, as its only argument. The closure receives the service being resolved and the container instance:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:344
#: ./docs/9.x/container.md:347
msgid ""
"$this->app->extend(Service::class, function ($service, $app) {\n"
"    return new DecoratedService($service);\n"
"});"
msgstr ""

# P
#: ./docs/9.x/container.md:345
#: ./docs/10.x/container.md:338
#: ./docs/11.x/container.md:452
#: ./docs/master/container.md:338
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts two arguments, the service class you're extending and a closure that should return the modified service. The closure receives the service being resolved and the container instance:"
msgstr ""

# P
#: ./docs/8.x/container.md:348
#: ./docs/9.x/container.md:351
#: ./docs/10.x/container.md:344
#: ./docs/11.x/container.md:458
#: ./docs/master/container.md:344
#~ msgid "<a name=\"resolving\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/container.md:349
#: ./docs/9.x/container.md:352
#: ./docs/10.x/container.md:345
#: ./docs/11.x/container.md:459
#: ./docs/master/container.md:345
msgid "Resolving"
msgstr ""

# P
#: ./docs/8.x/container.md:351
#: ./docs/9.x/container.md:354
#: ./docs/10.x/container.md:347
#: ./docs/11.x/container.md:461
#: ./docs/master/container.md:347
#~ msgid "<a name=\"the-make-method\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:352
#: ./docs/9.x/container.md:355
#: ./docs/10.x/container.md:348
#: ./docs/11.x/container.md:462
#: ./docs/master/container.md:348
msgid "The `make` Method"
msgstr ""

# P
#: ./docs/8.x/container.md:354
#: ./docs/9.x/container.md:357
#: ./docs/10.x/container.md:350
#: ./docs/11.x/container.md:464
#: ./docs/master/container.md:350
msgid "You may use the `make` method to resolve a class instance from the container. The `make` method accepts the name of the class or interface you wish to resolve:"
msgstr ""

# P
#: ./docs/10.x/container.md:356
#: ./docs/11.x/container.md:470
#: ./docs/master/container.md:356
msgid "If some of your class's dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the `makeWith` method. For example, we may manually pass the `$id` constructor argument required by the `Transistor` service:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:356
#: ./docs/9.x/container.md:359
#: ./docs/10.x/container.md:352
#: ./docs/11.x/container.md:466
#: ./docs/master/container.md:352
msgid ""
"use App\\Services\\Transistor;\n"
"\n"
"$transistor = $this->app->make(Transistor::class);"
msgstr ""

# P
#: ./docs/8.x/container.md:360
#: ./docs/9.x/container.md:363
msgid "If some of your class' dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the `makeWith` method. For example, we may manually pass the `$id` constructor argument required by the `Transistor` service:"
msgstr ""

# P
#: ./docs/10.x/container.md:362
#: ./docs/11.x/container.md:476
#: ./docs/master/container.md:362
msgid "The `bound` method may be used to determine if a class or interface has been explicitly bound in the container:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:362
#: ./docs/9.x/container.md:365
#: ./docs/10.x/container.md:358
#: ./docs/11.x/container.md:472
#: ./docs/master/container.md:358
msgid ""
"use App\\Services\\Transistor;\n"
"\n"
"$transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);"
msgstr ""

# CODE
#: ./docs/10.x/container.md:364
#: ./docs/11.x/container.md:478
#: ./docs/master/container.md:364
msgid ""
"if ($this->app->bound(Transistor::class)) {\n"
"    // ...\n"
"}"
msgstr ""

# P
#: ./docs/8.x/container.md:366
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) to resolve a class instance from the container:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:368
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$transistor = App::make(Transistor::class);"
msgstr ""

# P
#: ./docs/9.x/container.md:369
#: ./docs/10.x/container.md:368
#: ./docs/11.x/container.md:482
#: ./docs/master/container.md:368
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) or the `app` [helper](/docs/{{version}}/helpers#method-app) to resolve a class instance from the container:"
msgstr ""

# CODE
#: ./docs/9.x/container.md:371
#: ./docs/10.x/container.md:370
#: ./docs/11.x/container.md:484
#: ./docs/master/container.md:370
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$transistor = App::make(Transistor::class);\n"
"\n"
"$transistor = app(Transistor::class);"
msgstr ""

# P
#: ./docs/8.x/container.md:373
#: ./docs/9.x/container.md:378
msgid "If you would like to have the Laravel container instance itself injected into a class that is being resolved by the container, you may type-hint the `Illuminate\\Container\\Container` class on your class' constructor:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:375
#: ./docs/9.x/container.md:380
msgid ""
"use Illuminate\\Container\\Container;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\Illuminate\\Container\\Container  $container\n"
" * @return void\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}"
msgstr ""

# P
#: ./docs/10.x/container.md:377
#: ./docs/11.x/container.md:491
#: ./docs/master/container.md:377
msgid "If you would like to have the Laravel container instance itself injected into a class that is being resolved by the container, you may type-hint the `Illuminate\\Container\\Container` class on your class's constructor:"
msgstr ""

# CODE
#: ./docs/10.x/container.md:379
#: ./docs/master/container.md:379
msgid ""
"use Illuminate\\Container\\Container;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(\n"
"    protected Container $container\n"
") {}"
msgstr ""

# P
#: ./docs/8.x/container.md:388
#: ./docs/9.x/container.md:393
#: ./docs/10.x/container.md:388
#: ./docs/11.x/container.md:502
#: ./docs/master/container.md:388
#~ msgid "<a name=\"automatic-injection\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/container.md:389
#: ./docs/9.x/container.md:394
#: ./docs/10.x/container.md:389
#: ./docs/11.x/container.md:503
#: ./docs/master/container.md:389
msgid "Automatic Injection"
msgstr ""

# P
#: ./docs/8.x/container.md:391
#: ./docs/9.x/container.md:396
#: ./docs/10.x/container.md:391
#: ./docs/11.x/container.md:505
#: ./docs/master/container.md:391
msgid "Alternatively, and importantly, you may type-hint the dependency in the constructor of a class that is resolved by the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). In practice, this is how most of your objects should be resolved by the container."
msgstr ""

# P
#: ./docs/8.x/container.md:393
#: ./docs/9.x/container.md:398
#: ./docs/10.x/container.md:393
#: ./docs/master/container.md:393
msgid "For example, you may type-hint a repository defined by your application in a controller's constructor. The repository will automatically be resolved and injected into the class:"
msgstr ""

# CODE
#: ./docs/10.x/container.md:395
#: ./docs/master/container.md:395
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected UserRepository $users,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     */\n"
"    public function show(string $id): User\n"
"    {\n"
"        $user = $this->users->findOrFail($id);\n"
"\n"
"        return $user;\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/8.x/container.md:395
#: ./docs/9.x/container.md:400
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n"
"\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

# H2
#: ./docs/10.x/container.md:423
#: ./docs/11.x/container.md:534
#: ./docs/master/container.md:423
msgid "Method Invocation and Injection"
msgstr ""

# CODE
#: ./docs/10.x/container.md:427
#: ./docs/master/container.md:427
msgid ""
"<?php\n"
"\n"
"namespace App;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     */\n"
"    public function generate(UserRepository $repository): array\n"
"    {\n"
"        return [\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/container.md:433
#: ./docs/9.x/container.md:438
#: ./docs/10.x/container.md:422
#: ./docs/11.x/container.md:533
#: ./docs/master/container.md:422
#~ msgid "<a name=\"method-invocation-and-injection\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/container.md:434
#: ./docs/9.x/container.md:439
msgid "Method Invocation & Injection"
msgstr ""

# P
#: ./docs/8.x/container.md:436
#: ./docs/9.x/container.md:441
#: ./docs/10.x/container.md:425
#: ./docs/11.x/container.md:536
#: ./docs/master/container.md:425
msgid "Sometimes you may wish to invoke a method on an object instance while allowing the container to automatically inject that method's dependencies. For example, given the following class:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:438
#: ./docs/9.x/container.md:443
msgid ""
"<?php\n"
"\n"
"namespace App;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $repository\n"
"     * @return array\n"
"     */\n"
"    public function generate(UserRepository $repository)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/8.x/container.md:458
#: ./docs/9.x/container.md:463
#: ./docs/10.x/container.md:446
#: ./docs/11.x/container.md:557
#: ./docs/master/container.md:446
msgid "You may invoke the `generate` method via the container like so:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:460
#: ./docs/9.x/container.md:465
#: ./docs/10.x/container.md:448
#: ./docs/master/container.md:448
msgid ""
"use App\\UserReport;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$report = App::call([new UserReport, 'generate']);"
msgstr ""

# P
#: ./docs/8.x/container.md:465
#: ./docs/9.x/container.md:470
#: ./docs/10.x/container.md:453
#: ./docs/11.x/container.md:564
#: ./docs/master/container.md:453
msgid "The `call` method accepts any PHP callable. The container's `call` method may even be used to invoke a closure while automatically injecting its dependencies:"
msgstr ""

# CODE
#: ./docs/10.x/container.md:467
#: ./docs/11.x/container.md:578
#: ./docs/master/container.md:467
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->resolving(Transistor::class, function (Transistor $transistor, Application $app) {\n"
"    // Called when container resolves objects of type \"Transistor\"...\n"
"});\n"
"\n"
"$this->app->resolving(function (mixed $object, Application $app) {\n"
"    // Called when container resolves object of any type...\n"
"});"
msgstr ""

# CODE
#: ./docs/8.x/container.md:467
#: ./docs/9.x/container.md:472
#: ./docs/10.x/container.md:455
#: ./docs/master/container.md:455
msgid ""
"use App\\Repositories\\UserRepository;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$result = App::call(function (UserRepository $repository) {\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:474
#: ./docs/9.x/container.md:479
#: ./docs/10.x/container.md:462
#: ./docs/11.x/container.md:573
#: ./docs/master/container.md:462
#~ msgid "<a name=\"container-events\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/container.md:475
#: ./docs/9.x/container.md:480
#: ./docs/10.x/container.md:463
#: ./docs/11.x/container.md:574
#: ./docs/master/container.md:463
msgid "Container Events"
msgstr ""

# P
#: ./docs/8.x/container.md:477
#: ./docs/9.x/container.md:482
#: ./docs/10.x/container.md:465
#: ./docs/11.x/container.md:576
#: ./docs/master/container.md:465
msgid "The service container fires an event each time it resolves an object. You may listen to this event using the `resolving` method:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:479
#: ./docs/9.x/container.md:484
msgid ""
"use App\\Services\\Transistor;\n"
"\n"
"$this->app->resolving(Transistor::class, function ($transistor, $app) {\n"
"    // Called when container resolves objects of type \"Transistor\"...\n"
"});\n"
"\n"
"$this->app->resolving(function ($object, $app) {\n"
"    // Called when container resolves object of any type...\n"
"});"
msgstr ""

# CODE
#: ./docs/10.x/container.md:485
#: ./docs/11.x/container.md:618
#: ./docs/master/container.md:485
msgid ""
"use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n"
"\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:489
#: ./docs/9.x/container.md:494
#: ./docs/10.x/container.md:478
#: ./docs/11.x/container.md:589
#: ./docs/master/container.md:478
msgid "As you can see, the object being resolved will be passed to the callback, allowing you to set any additional properties on the object before it is given to its consumer."
msgstr ""

# P
#: ./docs/8.x/container.md:491
#: ./docs/9.x/container.md:496
#: ./docs/10.x/container.md:480
#: ./docs/11.x/container.md:613
#: ./docs/master/container.md:480
#~ msgid "<a name=\"psr-11\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/container.md:492
#: ./docs/9.x/container.md:497
#: ./docs/10.x/container.md:481
#: ./docs/11.x/container.md:614
#: ./docs/master/container.md:481
msgid "PSR-11"
msgstr ""

# CODE
#: ./docs/11.x/container.md:493
msgid ""
"use Illuminate\\Container\\Container;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(\n"
"    protected Container $container,\n"
") {}"
msgstr ""

# P
#: ./docs/8.x/container.md:494
#: ./docs/9.x/container.md:499
#: ./docs/10.x/container.md:483
#: ./docs/11.x/container.md:616
#: ./docs/master/container.md:483
msgid "Laravel's service container implements the [PSR-11](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md) interface. Therefore, you may type-hint the PSR-11 container interface to obtain an instance of the Laravel container:"
msgstr ""

# CODE
#: ./docs/8.x/container.md:496
#: ./docs/9.x/container.md:501
msgid ""
"use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n"
"\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n"
"\n"
"    //\n"
"});"
msgstr ""

# P
#: ./docs/8.x/container.md:505
#: ./docs/9.x/container.md:510
#: ./docs/10.x/container.md:494
#: ./docs/11.x/container.md:627
#: ./docs/master/container.md:494
msgid "An exception is thrown if the given identifier can't be resolved. The exception will be an instance of `Psr\\Container\\NotFoundExceptionInterface` if the identifier was never bound. If the identifier was bound but was unable to be resolved, an instance of `Psr\\Container\\ContainerExceptionInterface` will be thrown."
msgstr ""

# P
#: ./docs/11.x/container.md:507
msgid "For example, you may type-hint a service defined by your application in a controller's constructor. The service will automatically be resolved and injected into the class:"
msgstr ""

# CODE
#: ./docs/11.x/container.md:509
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Services\\AppleMusic;\n"
"\n"
"class PodcastController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected AppleMusic $apple,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Show information about the given podcast.\n"
"     */\n"
"    public function show(string $id): Podcast\n"
"    {\n"
"        return $this->apple->findPodcast($id);\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/11.x/container.md:538
msgid ""
"<?php\n"
"\n"
"namespace App;\n"
"\n"
"use App\\Services\\AppleMusic;\n"
"\n"
"class PodcastStats\n"
"{\n"
"    /**\n"
"     * Generate a new podcast stats report.\n"
"     */\n"
"    public function generate(AppleMusic $apple): array\n"
"    {\n"
"        return [\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

# CODE
#: ./docs/11.x/container.md:559
msgid ""
"use App\\PodcastStats;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$stats = App::call([new PodcastStats, 'generate']);"
msgstr ""

# CODE
#: ./docs/11.x/container.md:566
msgid ""
"use App\\Services\\AppleMusic;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$result = App::call(function (AppleMusic $apple) {\n"
"    // ...\n"
"});"
msgstr ""

# P
#: ./docs/11.x/container.md:591
#~ msgid "<a name=\"rebinding\"></a>"
#~ msgstr ""

# H3
#: ./docs/11.x/container.md:592
msgid "Rebinding"
msgstr ""

# P
#: ./docs/11.x/container.md:594
msgid "The `rebinding` method allows you to listen for when a service is re-bound to the container, meaning it is registered again or overridden after its initial binding. This can be useful when you need to update dependencies or modify behavior each time a specific binding is updated:"
msgstr ""

# CODE
#: ./docs/11.x/container.md:596
msgid ""
"use App\\Contracts\\PodcastPublisher;\n"
"use App\\Services\\SpotifyPublisher;\n"
"use App\\Services\\TransistorPublisher;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(PodcastPublisher::class, SpotifyPublisher::class);\n"
"\n"
"$this->app->rebinding(\n"
"    PodcastPublisher::class,\n"
"    function (Application $app, PodcastPublisher $newInstance) {\n"
"        //\n"
"    },\n"
");\n"
"\n"
"// New binding will trigger rebinding closure...\n"
"$this->app->bind(PodcastPublisher::class, TransistorPublisher::class);"
msgstr ""
