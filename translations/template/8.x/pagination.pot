# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-01 22:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/pagination.md:1
#, markdown-text, no-wrap
msgid "Database: Pagination"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Basic Usage](#basic-usage)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Paginating Query Builder Results](#paginating-query-builder-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Paginating Eloquent Results](#paginating-eloquent-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Manually Creating A Paginator](#manually-creating-a-paginator)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Customizing Pagination URLs](#customizing-pagination-urls)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Displaying Pagination Results](#displaying-pagination-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid ""
"[Adjusting The Pagination Link "
"Window](#adjusting-the-pagination-link-window)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Converting Results To JSON](#converting-results-to-json)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Customizing The Pagination View](#customizing-the-pagination-view)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Using Bootstrap](#using-bootstrap)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15
#, markdown-text
msgid "[Paginator Instance Methods](#paginator-instance-methods)"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:17
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:17
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:20
#, markdown-text
msgid ""
"In other frameworks, pagination can be very painful. We hope Laravel's "
"approach to pagination will be a breath of fresh air. Laravel's paginator is "
"integrated with the [query builder](/docs/{{version}}/queries) and [Eloquent "
"ORM](/docs/{{version}}/eloquent) and provides convenient, easy-to-use "
"pagination of database records with zero configuration."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:22
#, markdown-text
msgid ""
"By default, the HTML generated by the paginator is compatible with the "
"[Tailwind CSS framework](https://tailwindcss.com/); however, Bootstrap "
"pagination support is also available."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:24
#, markdown-text, no-wrap
msgid "<a name=\"basic-usage\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:24
#, markdown-text, no-wrap
msgid "Basic Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:27
#, markdown-text, no-wrap
msgid "<a name=\"paginating-query-builder-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:27
#, markdown-text, no-wrap
msgid "Paginating Query Builder Results"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:30
#, markdown-text
msgid ""
"There are several ways to paginate items. The simplest is by using the "
"`paginate` method on the [query builder](/docs/{{version}}/queries) or an "
"[Eloquent query](/docs/{{version}}/eloquent). The `paginate` method "
"automatically takes care of setting the query's \"limit\" and \"offset\" "
"based on the current page being viewed by the user. By default, the current "
"page is detected by the value of the `page` query string argument on the "
"HTTP request. This value is automatically detected by Laravel, and is also "
"automatically inserted into links generated by the paginator."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:32
#, markdown-text
msgid ""
"In this example, the only argument passed to the `paginate` method is the "
"number of items you would like displayed \"per page\". In this case, let's "
"specify that we would like to display `15` items per page:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:34 docs/8.x/pagination.md:211
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:36
#, markdown-text, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:39
#, markdown-text, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:54
#, markdown-text, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show all of the users for the application.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            return view('user.index', [\n"
"                'users' => DB::table('users')->paginate(15)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:56
#, markdown-text, no-wrap
msgid "<a name=\"simple-pagination\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/pagination.md:56
#, markdown-text, no-wrap
msgid "\"Simple Pagination\""
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:59
#, markdown-text
msgid ""
"The `paginate` method counts the total number of records matched by the "
"query before retrieving the records from the database. This is done so that "
"the paginator knows how many pages of records there are in total. However, "
"if you do not plan to show the total number of pages in your application's "
"UI then the record count query is unnecessary."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:61
#, markdown-text
msgid ""
"Therefore, if you only need to display simple \"Next\" and \"Previous\" "
"links in your application's UI, you may use the `simplePaginate` method to "
"perform a single, efficient query:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:63
#, markdown-text, no-wrap
msgid "    $users = DB::table('users')->simplePaginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:65
#, markdown-text, no-wrap
msgid "<a name=\"paginating-eloquent-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:65
#, markdown-text, no-wrap
msgid "Paginating Eloquent Results"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:68
#, markdown-text
msgid ""
"You may also paginate [Eloquent](/docs/{{version}}/eloquent) queries. In "
"this example, we will paginate the `App\\Models\\User` model and indicate "
"that we plan to display 15 records per page. As you can see, the syntax is "
"nearly identical to paginating query builder results:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:70 docs/8.x/pagination.md:98
#: docs/8.x/pagination.md:113 docs/8.x/pagination.md:163
#, markdown-text, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:72
#, markdown-text, no-wrap
msgid "    $users = User::paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:74
#, markdown-text
msgid ""
"Of course, you may call the `paginate` method after setting other "
"constraints on the query, such as `where` clauses:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:76
#, markdown-text, no-wrap
msgid "    $users = User::where('votes', '>', 100)->paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:78
#, markdown-text
msgid ""
"You may also use the `simplePaginate` method when paginating Eloquent "
"models:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:80
#, markdown-text, no-wrap
msgid "    $users = User::where('votes', '>', 100)->simplePaginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:82
#, markdown-text, no-wrap
msgid "<a name=\"manually-creating-a-paginator\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:82
#, markdown-text, no-wrap
msgid "Manually Creating A Paginator"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:85
#, markdown-text
msgid ""
"Sometimes you may wish to create a pagination instance manually, passing it "
"an array of items that you already have in memory. You may do so by creating "
"either an `Illuminate\\Pagination\\Paginator` or "
"`Illuminate\\Pagination\\LengthAwarePaginator` instance, depending on your "
"needs."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:87
#, markdown-text
msgid ""
"The `Paginator` class does not need to know the total number of items in the "
"result set; however, because of this, the class does not have methods for "
"retrieving the index of the last page. The `LengthAwarePaginator` accepts "
"almost the same arguments as the `Paginator`; however, it requires a count "
"of the total number of items in the result set."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:89
#, markdown-text
msgid ""
"In other words, the `Paginator` corresponds to the `simplePaginate` method "
"on the query builder, while the `LengthAwarePaginator` corresponds to the "
"`paginate` method."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:91
#, markdown-text, no-wrap
msgid ""
"> {note} When manually creating a paginator instance, you should manually "
"\"slice\" the array of results you pass to the paginator. If you're unsure "
"how to do this, check out the "
"[array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP "
"function.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:93
#, markdown-text, no-wrap
msgid "<a name=\"customizing-pagination-urls\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:93
#, markdown-text, no-wrap
msgid "Customizing Pagination URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:96
#, markdown-text
msgid ""
"By default, links generated by the paginator will match the current "
"request's URI. However, the paginator's `withPath` method allows you to "
"customize the URI used by the paginator when generating links. For example, "
"if you want the paginator to generate links like "
"`http://example.com/admin/users?page=N`, you should pass `/admin/users` to "
"the `withPath` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:101 docs/8.x/pagination.md:116
#, markdown-text, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        $users = User::paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:103
#, markdown-text, no-wrap
msgid "        $users->withPath('/admin/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:106 docs/8.x/pagination.md:121
#, markdown-text, no-wrap
msgid ""
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:108
#, markdown-text, no-wrap
msgid "<a name=\"appending-query-string-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/pagination.md:108
#, markdown-text, no-wrap
msgid "Appending Query String Values"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:111
#, markdown-text
msgid ""
"You may append to the query string of pagination links using the `appends` "
"method. For example, to append `sort=votes` to each pagination link, you "
"should make the following call to `appends`:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:118
#, markdown-text, no-wrap
msgid "        $users->appends(['sort' => 'votes']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:123
#, markdown-text
msgid ""
"You may use the `withQueryString` method if you would like to append all of "
"the current request's query string values to the pagination links:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:125
#, markdown-text, no-wrap
msgid "    $users = User::paginate(15)->withQueryString();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:127
#, markdown-text, no-wrap
msgid "<a name=\"appending-hash-fragments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/pagination.md:127
#, markdown-text, no-wrap
msgid "Appending Hash Fragments"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:130
#, markdown-text
msgid ""
"If you need to append a \"hash fragment\" to URLs generated by the "
"paginator, you may use the `fragment` method. For example, to append "
"`#users` to the end of each pagination link, you should invoke the "
"`fragment` method like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:132
#, markdown-text, no-wrap
msgid "    $users = User::paginate(15)->fragment('users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:134
#, markdown-text, no-wrap
msgid "<a name=\"displaying-pagination-results\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:134
#, markdown-text, no-wrap
msgid "Displaying Pagination Results"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:137
#, markdown-text
msgid ""
"When calling the `paginate` method, you will receive an instance of "
"`Illuminate\\Pagination\\LengthAwarePaginator`. When calling the "
"`simplePaginate` method, you will receive an instance of "
"`Illuminate\\Pagination\\Paginator`. These objects provide several methods "
"that describe the result set. In addition to these helpers methods, the "
"paginator instances are iterators and may be looped as an array. So, once "
"you have retrieved the results, you may display the results and render the "
"page links using [Blade](/docs/{{version}}/blade):"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/pagination.md:138
#, no-wrap
msgid ""
"<div class=\"container\">\n"
"    @foreach ($users as $user)\n"
"        {{ $user->name }}\n"
"    @endforeach\n"
"</div>\n"
"\n"
"{{ $users->links() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:149
#, markdown-text
msgid ""
"The `links` method will render the links to the rest of the pages in the "
"result set. Each of these links will already contain the proper `page` query "
"string variable. Remember, the HTML generated by the `links` method is "
"compatible with the [Tailwind CSS framework](https://tailwindcss.com)."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:151
#, markdown-text, no-wrap
msgid "<a name=\"adjusting-the-pagination-link-window\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:151
#, markdown-text, no-wrap
msgid "Adjusting The Pagination Link Window"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:154
#, markdown-text
msgid ""
"When the paginator displays pagination links, the current page number is "
"displayed as well as links for the three pages before and after the current "
"page. If needed, you may control how many additional links are displayed on "
"each side of the current page using the `onEachSide` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:156
#, markdown-text, no-wrap
msgid "    {{ $users->onEachSide(5)->links() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:158
#, markdown-text, no-wrap
msgid "<a name=\"converting-results-to-json\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:158
#, markdown-text, no-wrap
msgid "Converting Results To JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:161
#, markdown-text
msgid ""
"The Laravel paginator classes implement the "
"`Illuminate\\Contracts\\Support\\Jsonable` Interface contract and expose the "
"`toJson` method, so it's very easy to convert your pagination results to "
"JSON. You may also convert a paginator instance to JSON by returning it from "
"a route or controller action:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:167
#, markdown-text, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return User::paginate();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:169
#, markdown-text
msgid ""
"The JSON from the paginator will include meta information such as `total`, "
"`current_page`, `last_page`, and more. The result records are available via "
"the `data` key in the JSON array. Here is an example of the JSON created by "
"returning a paginator instance from a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:191
#, markdown-text, no-wrap
msgid ""
"    {\n"
"       \"total\": 50,\n"
"       \"per_page\": 15,\n"
"       \"current_page\": 1,\n"
"       \"last_page\": 4,\n"
"       \"first_page_url\": \"http://laravel.app?page=1\",\n"
"       \"last_page_url\": \"http://laravel.app?page=4\",\n"
"       \"next_page_url\": \"http://laravel.app?page=2\",\n"
"       \"prev_page_url\": null,\n"
"       \"path\": \"http://laravel.app\",\n"
"       \"from\": 1,\n"
"       \"to\": 15,\n"
"       \"data\":[\n"
"            {\n"
"                // Record...\n"
"            },\n"
"            {\n"
"                // Record...\n"
"            }\n"
"       ]\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:193
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-pagination-view\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:193
#, markdown-text, no-wrap
msgid "Customizing The Pagination View"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:196
#, markdown-text
msgid ""
"By default, the views rendered to display the pagination links are "
"compatible with the [Tailwind CSS](https://tailwindcss.com) "
"framework. However, if you are not using Tailwind, you are free to define "
"your own views to render these links. When calling the `links` method on a "
"paginator instance, you may pass the view name as the first argument to the "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:198
#, markdown-text, no-wrap
msgid "    {{ $paginator->links('view.name') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:201
#, markdown-text, no-wrap
msgid ""
"    // Passing additional data to the view...\n"
"    {{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:203
#, markdown-text
msgid ""
"However, the easiest way to customize the pagination views is by exporting "
"them to your `resources/views/vendor` directory using the `vendor:publish` "
"command:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:205
#, markdown-text, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-pagination\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:207
#, markdown-text
msgid ""
"This command will place the views in your application's "
"`resources/views/vendor/pagination` directory. The `tailwind.blade.php` file "
"within this directory corresponds to the default pagination view. You may "
"edit this file to modify the pagination HTML."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:209
#, markdown-text
msgid ""
"If you would like to designate a different file as the default pagination "
"view, you may invoke the paginator's `defaultView` and `defaultSimpleView` "
"methods within the `boot` method of your "
"`App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:213
#, markdown-text, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:217
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Pagination\\Paginator;\n"
"    use Illuminate\\Support\\Facades\\Blade;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:228
#, markdown-text, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Paginator::defaultView('view-name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:232
#, markdown-text, no-wrap
msgid ""
"            Paginator::defaultSimpleView('view-name');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:234
#, markdown-text, no-wrap
msgid "<a name=\"using-bootstrap\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:234
#, markdown-text, no-wrap
msgid "Using Bootstrap"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:237
#, markdown-text
msgid ""
"Laravel includes pagination views built using [Bootstrap "
"CSS](https://getbootstrap.com/). To use these views instead of the default "
"Tailwind views, you may call the paginator's `useBootstrap` method within "
"the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:239
#, markdown-text, no-wrap
msgid "    use Illuminate\\Pagination\\Paginator;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:249
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::useBootstrap();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:251
#, markdown-text, no-wrap
msgid "<a name=\"paginator-instance-methods\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:251
#, markdown-text, no-wrap
msgid "Paginator Instance Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:254
#, markdown-text
msgid ""
"Each paginator instance provides additional pagination information via the "
"following methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:274
#, markdown-text, no-wrap
msgid ""
"Method  |  Description\n"
"-------  |  -----------\n"
"`$paginator->count()`  |  Get the number of items for the current page.\n"
"`$paginator->currentPage()`  |  Get the current page number.\n"
"`$paginator->firstItem()`  |  Get the result number of the first item in the "
"results.\n"
"`$paginator->getOptions()`  |  Get the paginator options.\n"
"`$paginator->getUrlRange($start, $end)`  |  Create a range of pagination "
"URLs.\n"
"`$paginator->hasPages()`  |  Determine if there are enough items to split "
"into multiple pages.\n"
"`$paginator->hasMorePages()`  |  Determine if there are more items in the "
"data store.\n"
"`$paginator->items()`  |  Get the items for the current page.\n"
"`$paginator->lastItem()`  |  Get the result number of the last item in the "
"results.\n"
"`$paginator->lastPage()`  |  Get the page number of the last available "
"page. (Not available when using `simplePaginate`).\n"
"`$paginator->nextPageUrl()`  |  Get the URL for the next page.\n"
"`$paginator->onFirstPage()`  |  Determine if the paginator is on the first "
"page.\n"
"`$paginator->perPage()`  |  The number of items to be shown per page.\n"
"`$paginator->previousPageUrl()`  |  Get the URL for the previous page.\n"
"`$paginator->total()`  |  Determine the total number of matching items in "
"the data store. (Not available when using `simplePaginate`).\n"
"`$paginator->url($page)`  |  Get the URL for a given page number.\n"
"`$paginator->getPageName()`  |  Get the query string variable used to store "
"the page.\n"
"`$paginator->setPageName($name)`  |  Set the query string variable used to "
"store the page.\n"
msgstr ""
